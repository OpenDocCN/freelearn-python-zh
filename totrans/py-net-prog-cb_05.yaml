- en: Chapter 5. E-mail Protocols, FTP, and CGI Programming
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Listing the files in a remote FTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Uploading a local file to a remote FTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: E-mailing your current working directory as a compressed ZIP file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading your Google e-mail with POP3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking your remote e-mail with IMAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending an e-mail with an attachment via the Gmail SMTP server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing a guestbook for your (Python-based) web server with CGI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter explores the FTP, e-mail, and CGI communications protocol with
    a Python recipe. Python is a very efficient and friendly language. Using Python,
    you can easily code simple FTP actions such as a file download and upload.
  prefs: []
  type: TYPE_NORMAL
- en: There are some interesting recipes in this chapter, such as manipulating your
    Google e-mail, also known as the Gmail account, from your Python script. You can
    use these recipes to check, download, and send e-mails with IMAP, POP3, and SMTP
    protocols. In another recipe, a web server with CGI also demonstrates the basic
    CGI action, such as writing a guest comment form in your web application.
  prefs: []
  type: TYPE_NORMAL
- en: Listing the files in a remote FTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You would like to list the files available on the official Linux kernel's FTP
    site, [ftp.kernel.org](http://ftp.kernel.org). You can select any other FTP site
    to try this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you work on a real FTP site with a user account, you need a username and
    password. However, in this instance, you don't need a username (and password)
    with Linux kernel's FTP site as you can log in anonymously.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can use the `ftplib` library to fetch files from our selected FTP site. A
    detailed documentation of this library can be found at [http://docs.python.org/2/library/ftplib.html](http://docs.python.org/2/library/ftplib.html).
  prefs: []
  type: TYPE_NORMAL
- en: Let us see how we can fetch some files with `ftplib`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 5.1 gives a simple FTP connection test as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'This recipe will list the files and folders present in the FTP path, `ftp.kernel.org/pub`.
    If you run this script, you can see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe uses `ftplib` to create an FTP client session with [ftp.kernel.org](http://ftp.kernel.org).
    The `test_ftp_connection()` function takes the FTP path, username, and e-mail
    address for connecting to the FTP server.
  prefs: []
  type: TYPE_NORMAL
- en: An FTP client session can be created by calling the `FTP()`function of `ftplib`
    with the preceding connection's credentials. This returns a client handle which
    then can be used to run the usual ftp commands, such as the command to change
    the working directory or `cwd()`. The `dir()`method returns the directory listing.
  prefs: []
  type: TYPE_NORMAL
- en: It is good idea to quit the FTP session by calling `ftp.quit()`.
  prefs: []
  type: TYPE_NORMAL
- en: Uploading a local file to a remote FTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You would like to upload a file to an FTP server.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let us set up a local FTP server. In Unix/Linux, you can install the **wu-ftpd**
    package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: On a Windows machine, you can install the FileZilla FTP server, which can be
    downloaded from [https://filezilla-project.org/download.php?type=server](https://filezilla-project.org/download.php?type=server).
  prefs: []
  type: TYPE_NORMAL
- en: You should create an FTP user account following the FTP server package's user
    manual.
  prefs: []
  type: TYPE_NORMAL
- en: You would also like to upload a file to an ftp server. You can specify the server
    address, login credentials, and filename as the input argument of your script.
    You should create a local file called `readme.txt` with any text in it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Using the following script, let's set up a local FTP server. In Unix/Linux,
    you can install the wu-ftpd package. Then, you can upload a file to the logged-in
    user's home directory. You can specify the server address, login credentials,
    and filename as the input argument of your script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 5.2 gives the FTP Upload Example as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: If you set up a local FTP server and run the following script, this script will
    log in to the FTP server and then will upload a file. If a filename argument is
    not supplied from command line by default, it will upload the `readme.txt` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we assume that a local FTP server is running. Alternatively,
    you can connect to a remote FTP server. The `ftp_upload()` method uses the `FTP()`function
    of Python's `ftplib` to create an FTP connection object. With the `login()` method,
    it logs in to the server.
  prefs: []
  type: TYPE_NORMAL
- en: After a successful login, the `ftp` object sends the STOR command with either
    the `storlines()` or `storbinary()` method. The first method is used for sending
    ASCII text files such as HTML or text files. The latter method is used for binary
    data such as zipped archive.
  prefs: []
  type: TYPE_NORMAL
- en: It's a good idea to wrap these FTP methods with `try-catch` error-handling blocks,
    which is not shown here for the sake of brevity.
  prefs: []
  type: TYPE_NORMAL
- en: E-mailing your current working directory as a compressed ZIP file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It might be interesting to send the current working directory contents as a
    compressed ZIP archive. You can use this recipe to quickly share your files with
    your friends.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you don''t have any mail server installed on your machine, you need to install
    a local mail server such as `postfix`. On a Debian/Ubuntu system, this can be
    installed with default settings using `apt-get`, as shown in the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us first compress the current directory and then create an e-mail message.
    We can send the e-mail message via an external SMTP host, or we can use a local
    e-mail server to do this. Like other recipes, let us get the sender and recipient
    information from parsing the command-line inputs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 5.3 shows how to convert an e-mail folder into a compressed ZIP file
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Running this recipe shows the following output. The extra output is shown because
    we enabled the e-mail debug level.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have used Python''s `zipfile`, `smtplib` and an `email` module to achieve
    our objective of e-mailing a folder as a zipped archive. This is done using the
    `email_dir_zipped()` method. This method takes two arguments: the sender and recipient''s
    e-mail addresses to create the e-mail message.'
  prefs: []
  type: TYPE_NORMAL
- en: In order to create a ZIP archive, we create a temporary file with the `tempfile`
    module's `TemporaryFile()` class. We supply a filename prefix, `mail`, and suffix,
    `.zip`. Then, we initialize the ZIP archive object with the `ZipFile()` class
    by passing the temporary file as its argument. Later, we add files of the current
    directory with the ZIP object's `write()` method call.
  prefs: []
  type: TYPE_NORMAL
- en: To send an e-mail, we create a multipart MIME message with the `MIMEmultipart()`
    class from the `email.mime.multipart` module. Like our usual e-mail message, the
    subject, recipient, and sender information is added in the e-mail header.
  prefs: []
  type: TYPE_NORMAL
- en: We create the e-mail attachment with the `MIMEBase()` method. Here, we first
    specify the application/ZIP header and call `set_payload()` on this message object.
    Then, in order to encode the message correctly, the `encode_base64()` method from
    encoder's module is used. It is also helpful to use the `add_header()` method
    to construct the attachment header. Now, our attachment is ready to be included
    in the main e-mail message with an `attach()` method call.
  prefs: []
  type: TYPE_NORMAL
- en: Sending an e-mail requires you to call the `SMTP()` class instance of `smtplib`.
    There is a `sendmail()` method that will utilize the routine provided by the OS
    to actually send the e-mail message correctly. Its details are hidden under the
    hood. However, you can see a detailed interaction by enabling the debug option
    as shown in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Further information about the Python libraries can be found at the URL [http://docs.python.org/2/library/smtplib.html](http://docs.python.org/2/library/smtplib.html)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading your Google e-mail with POP3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You would like to download your Google (or virtually any other e-mail provider's)
    e-mail via the POP3 protocol.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To run this recipe, you should have an e-mail account with Google or any other
    service provider.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we attempt to download the first e-mail message from a user's Google e-mail
    account. The username is supplied from a command line, but the password is kept
    secret and not passed from the command line. This is rather entered while the
    script is running and kept hidden from display.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 5.4 shows how to download our Google e-mail via `POP3` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: If you run this script, you will see an output similar to the following one.
    The message is truncated for the sake of privacy.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe downloads a user's first Google message via POP3\. The `download_email()`
    method creates a `mailbox` object with Python, the `POP3_SSL()` class of `poplib`.
    We passed the Google POP3 server and port address to the class constructor. The
    `mailbox` object then sets up a user account with the `user()` method call. The
    password is collected from the user securely using the `getpass` module's `getpass()`
    method and then passed to the `mailbox` object. The mailbox's `list()` method
    gives us the e-mail messages as a Python list.
  prefs: []
  type: TYPE_NORMAL
- en: This script first displays the number of e-mail messages stored in the mailbox
    and retrieves the first message with the `retr()` method call. Finally, it's safe
    to call the `quit()` method on the mailbox to clean up the connection.
  prefs: []
  type: TYPE_NORMAL
- en: Checking your remote e-mail with IMAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of using POP3, you can also use IMAP to retrieve the e-mail message
    from your Google account. In this case, the message won't be deleted after retrieval.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To run this recipe, you should have an e-mail account with Google or any other
    service provider.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let us connect to your Google e-mail account and read the first e-mail message.
    If you don't delete it, the first e-mail message would be the welcome message
    from Google.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 5.5 shows us how to check Google e-mail with IMAP as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: If you run this script, this will show the following output. In order to remove
    the private part of the data, we truncated some user data.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The preceding script takes a Google username from the command line and calls
    the `check_email()` function. This function creates an IMAP mailbox with the `IMAP4_SSL()`
    class of `imaplib`, which is initialized with Google's IMAP server and default
    port.
  prefs: []
  type: TYPE_NORMAL
- en: Then, this function logs in to the mailbox with a password, which is captured
    by the `getpass()` method of the `getpass` module. The inbox folder is selected
    by calling the `select()` method on the `mailbox` object.
  prefs: []
  type: TYPE_NORMAL
- en: The `mailbox` object has many useful methods. Two of them are `search()` and
    `fetch()` that are used to get the first e-mail message. Finally, it's safer to
    call the `close()` and `logout()` method on the `mailbox` object to end the IMAP
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: Sending an e-mail with an attachment via Gmail SMTP server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You would like to send an e-mail message from your Google e-mail account to
    another account. You also need to attach a file with this message.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To run this recipe, you should have an e-mail account with Google or any other
    service provider.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We can create an e-mail message and attach Python's `python-logo.gif` file with
    the e-mail message. Then, this message is sent from a Google account to a different
    account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 4.6 shows us how to send an e-mail from your Google account:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Running the following script outputs the success of sending an e-mail to any
    e-mail address if you provide your Google account details correctly. After running
    this script, you can check your recipient e-mail account to verify that the e-mail
    is actually sent.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, an e-mail message is created in the `send_email()` function.
    This function is supplied with a Google account from where the e-mail message
    will be sent. The message header object, `msg`, is created by calling the `MIMEMultipart()`
    class and then subject, recipient, and sender information is added on it.
  prefs: []
  type: TYPE_NORMAL
- en: Python's regular expression-handling module is used to filter the `.gif` image
    on the current path. The image attachment object, `img`, is then created with
    the `MIMEImage()` method from the `email.mime.image` module. A correct image header
    is added to this object and finally, the image is attached with the `msg` object
    created earlier. We can attach multiple image files within a `for` loop as shown
    in this recipe. We can also attach a plain text attachment in a similar way.
  prefs: []
  type: TYPE_NORMAL
- en: To send the e-mail message, we create an SMTP session. We call some testing
    method on this session object, such as `ehlo()` or `starttls()`. Then, log in
    to the Google SMTP server with a username and password and a `sendmail()` method
    is called to send the e-mail.
  prefs: []
  type: TYPE_NORMAL
- en: Writing a guestbook for your (Python-based) web server with CGI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Common Gateway Interface** (**CGI**) is a standard in web programming by
    which custom scripts can be used to produce web server output. You would like
    to catch the HTML form input from a user''s browser, redirect it to another page,
    and acknowledge a user action.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We first need to run a web server that supports CGI scripts. We placed our Python
    CGI script inside a `cgi-bin/` subdirectory and then visited the HTML page that
    contains the feedback form. Upon submitting this form, our web server will send
    the form data to the CGI script, and we'll see the output produced by this script.
  prefs: []
  type: TYPE_NORMAL
- en: 'Listing 5.7 shows us how the Python web server supports CGI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows CGI enabled web server is serving contents:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3463OS_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you run this recipe, you will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Now, you need to visit `http://localhost:8800/5_7_send_feedback.html` from your
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will see an input form. We assume that you provide the following input
    to this form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot shows the entering user comment in a web form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3463OS_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then, your browser will be redirected to `http://localhost:8800/cgi-bin/5_7_get_feedback.py`
    where you can see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The user comment is shown in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3463OS_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have used a basic HTTP server setup that can handle CGI requests. Python
    provides these interfaces in the `BaseHTTPServer` and `CGIHTTPserver` modules.
  prefs: []
  type: TYPE_NORMAL
- en: The handler is configured to use the `/cgi-bin` path to launch the CGI scripts.
    No other path can be used to run the CGI scripts.
  prefs: []
  type: TYPE_NORMAL
- en: 'The HTML feedback form located on `5_7_send_feedback.html` shows a very basic
    HTML form containing the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the form method is `POST` and action is set to the `/cgi-bin/5_7_get_feedback.py`
    file. The contents of this file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In this CGI script, the `FieldStorage()` method is called from `cgilib`. This
    returns a form object to process the HTML form inputs. Two inputs are parsed here
    (`name` and `comment`) using the `getvalue()` method. Finally, the script acknowledges
    the user input by echoing a line back saying that the user *x* has sent a comment.
  prefs: []
  type: TYPE_NORMAL
