- en: '*Chapter 6*: Exploring the Django Admin Site'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第 6 章*：探索 Django 管理站点'
- en: This chapter will introduce the Django admin site, which is a feature allowing
    developers to register certain models into a model-centric interface where only
    permitted users can manage database content. This feature is designed to read
    the metadata related to models as well as the fields and field constraints set
    on those models to build a set of pages that search, sort, filter, create, edit,
    and delete records found in those tables.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将介绍 Django 管理站点，这是一个功能，允许开发者将某些模型注册到一个以模型为中心的界面中，只有被允许的用户才能管理数据库内容。该功能旨在读取与模型相关的元数据以及设置在这些模型上的字段和字段约束，以构建一组用于搜索、排序、筛选、创建、编辑和删除那些表中记录的页面。
- en: The admin site is an optional feature of the Django framework that can be used
    in projects. It allows us to use user-based roles and permission settings that
    are built into the Django framework, allowing only permitted users to edit, add,
    or delete objects. User roles can be modified to only grant permission to edit
    certain models and can even be set to a granular level, such as only letting a
    user edit or view data but not add or delete data. This feature can be deactivated
    if it is not desired or needed in a project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 管理站点是 Django 框架的一个可选功能，可以在项目中使用。它允许我们使用 Django 框架内构建的用户基于的角色和权限设置，仅允许被允许的用户编辑、添加或删除对象。用户角色可以被修改，仅授予编辑某些模型的权限，甚至可以设置为更细粒度，例如仅允许用户编辑或查看数据，但不能添加或删除数据。如果项目不需要或不希望使用此功能，则可以禁用此功能。
- en: Models that are not specifically registered in the Django admin site will not
    be accessible via that interface, giving developers the option to create tables
    that store data that no users at all can control. By the end of this chapter,
    we will have registered the models that we created in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*. Those models will serve as the foundation
    for most of the exercises provided throughout this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 未在 Django 管理站点中特别注册的模型将无法通过该界面访问，这为开发者提供了创建存储数据的表的选择，这些数据没有任何用户可以控制。在本章结束时，我们将注册我们在
    [*第 3 章*](B17243_03_ePub.xhtml#_idTextAnchor077)，*模型、关系和继承* 中创建的模型。这些模型将作为本章提供的多数练习的基础。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Using the Django admin site
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Django 管理站点
- en: Configuring `admin` class options
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置 `admin` 类选项
- en: Adding `admin` class methods
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加 `admin` 类方法
- en: Writing custom `admin form classes`
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自定义 `admin form classes`
- en: Using the Django authentication system
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Django 认证系统
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To work with the code in this chapter, the following tools will need to be
    installed on your local machine:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要与本章中的代码一起工作，以下工具需要在您的本地机器上安装：
- en: Python version 3.9 – used as the underlying programming language for the project
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 版本 3.9 – 作为项目的底层编程语言使用
- en: Django version 4.0 – used as the backend framework of the project
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 版本 4.0 – 作为项目的后端框架使用
- en: pip package manager – used to manage third-party Python/Django packages
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pip 包管理器 – 用于管理第三方 Python/Django 包
- en: We will continue to work with the solution created in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. However, it is not necessary to use the Visual Studio
    IDE. The main project itself can be run using another IDE or run independently
    using a terminal or command-line window from within the project root folder, which
    is where the `manage.py` file resides. Whatever editor or IDE you are using, a
    virtual environment will also be needed to work with the Django project. Instructions
    for how to create a project and virtual environment can be found in [*Chapter
    2*](B17243_02_ePub.xhtml#_idTextAnchor037), *Project Configuration*. You will
    need a database to store the data contained in your project. PostgreSQL was chosen
    for the examples in the previous chapter; however, any database type that you
    chose for your project can be used to work with the examples in this chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用在 [*第 2 章*](B17243_02_ePub.xhtml#_idTextAnchor037)，*项目配置* 中创建的解决方案。然而，并不需要使用
    Visual Studio IDE。主要项目本身可以使用其他 IDE 运行，或者从项目根目录（其中包含 `manage.py` 文件）独立运行，使用终端或命令行窗口。无论您使用什么编辑器或
    IDE，都需要一个虚拟环境来与 Django 项目一起工作。有关如何创建项目和虚拟环境的说明，请参阅 [*第 2 章*](B17243_02_ePub.xhtml#_idTextAnchor037)，*项目配置*。您需要一个数据库来存储项目中的数据。在上一章的示例中选择了
    PostgreSQL；然而，您可以为项目选择任何数据库类型来与本章的示例一起工作。
- en: 'We will also be using data that is in the form of a Django fixture, provided
    previously in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations,
    and Inheritance*, in the sub-section titled *Loading the chapter_3 data fixture*.
    Make sure the `chapter_3` fixture is loaded into your database. If this has already
    been done, then you may skip the next command. If you have already created the
    tables found in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models,
    Relations, and Inheritance*, and have not loaded that fixture yet, then run the
    following command, after activating your virtual environment:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将使用以Django fixture形式提供的数据，这些数据在[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)中“模型、关系和继承”小节标题为“加载chapter_3数据fixture”中提供过。确保`chapter_3`
    fixture已加载到你的数据库中。如果这已经完成，则可以跳过下一个命令。如果你已经创建了[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)中“模型、关系和继承”中提到的表，并且尚未加载该fixture，那么在激活你的虚拟环境后，运行以下命令：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: All of the code created in this chapter can be found in the GitHub repository
    for this book at [https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer](https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer).
    The bulk of the code depicted in this chapter can be found in the `/becoming_a_django_entdev/becoming_a_django_entdev/chapter_6/`
    directory.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章创建的所有代码都可以在本书的GitHub仓库[https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer](https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer)中找到。本章展示的大部分代码可以在`/becoming_a_django_entdev/becoming_a_django_entdev/chapter_6/`目录中找到。
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3ODUaAW](https://bit.ly/3ODUaAW).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频，了解*代码的实际应用*：[https://bit.ly/3ODUaAW](https://bit.ly/3ODUaAW)。
- en: Preparing for this chapter
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备本章内容
- en: Start by creating a new app in your project called `chapter_6` by following
    the steps discussed in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037), *Project
    Configuration*, in the subsection titled *Creating a Django app*. As discussed
    in that section, don't forget to change the value of your `name =` variable for
    your app class found in the `/becoming_a_django_entdev/becoming_a_django_entdev/chapter_6/apps.py`
    file to now point to the path where you installed your app. Be sure to also include
    this app in your `INSTALLED_APPS` variable found in the `settings.py` file as
    well.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，按照[*第2章*](B17243_02_ePub.xhtml#_idTextAnchor037)中“项目配置”小节标题为“创建Django应用”的步骤，在你的项目中创建一个名为`chapter_6`的新应用。如该节所述，不要忘记将位于`/becoming_a_django_entdev/becoming_a_django_entdev/chapter_6/apps.py`文件中的`name
    =`变量值更改为指向你安装应用路径。务必也将此应用包含在`settings.py`文件中的`INSTALLED_APPS`变量中。
- en: 'In the main `urls.py` file of the site, add the following path, which points
    to the URL patterns of this chapter that we will be creating:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站的主`urls.py`文件中，添加以下路径，该路径指向我们将要创建的此章节的URL模式：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now that we have created the app for this chapter, let's begin using the Django
    admin site to manage the models created in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经创建了本章的应用，让我们开始使用Django管理站点来管理在[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)中“模型、关系和继承”创建的模型。
- en: Using the Django admin site
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django管理站点
- en: Django makes it easy to use the admin site right out of the box. In order to
    use this feature, we need to add an app to the `settings.py` file and register
    a URL pattern to handle any project's admin links. By default, these settings
    should already exist in the code when a project is created using the `startproject`
    command or by using the IDE. However, some tools and versions may generate code
    slightly differently and so it is always good to just double-check that these
    settings are configured in this way.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: Django使得直接使用管理站点变得非常简单。为了使用此功能，我们需要在`settings.py`文件中添加一个应用并注册一个URL模式来处理任何项目的管理链接。默认情况下，当使用`startproject`命令或通过IDE创建项目时，这些设置应该已经存在于代码中。然而，某些工具和版本可能生成的代码略有不同，因此始终检查这些设置是否以这种方式配置是很好的。
- en: Activating the Django admin site
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 激活Django管理站点
- en: 'To make sure the Django admin site is activated in your project, follow these
    steps:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要确保Django管理站点在你的项目中已激活，请按照以下步骤操作：
- en: 'In the main `settings.py` file, add the following app to the `INSTALLED_APPS`
    variable and make sure this is at the top of the list:'
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在主`settings.py`文件中，将以下应用添加到`INSTALLED_APPS`变量中，并确保它位于列表顶部：
- en: '[PRE6]'
  id: totrans-34
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If the `/chapter_6/urls.py` file does not exist yet, create that file and include
    the following URL pattern:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果`/chapter_6/urls.py`文件尚不存在，创建该文件并包含以下URL模式：
- en: '[PRE7]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To deactivate the Django admin site, remove the settings described in this section.
    Template and static files related to the Django admin site can also be overridden
    to create your own look and feel. You are not restricted to the user interface
    that is provided right out of the box. Due to the limited space in this book,
    we will not demonstrate how to override Django admin site templates; however,
    you can refer to [*Chapter 4*](B17243_04_ePub.xhtml#_idTextAnchor116), *URLs,
    Views, and Templates*, to learn more about overriding third-party templates.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 要停用 Django 管理站点，请删除本节中描述的设置。与 Django 管理站点相关的模板和静态文件也可以被覆盖以创建您自己的外观和感觉。您不受默认提供的用户界面的限制。由于本书空间有限，我们将不会演示如何覆盖
    Django 管理站点模板；然而，您可以参考 [*第 4 章*](B17243_04_ePub.xhtml#_idTextAnchor116)，*URL、视图和模板*，以了解更多关于覆盖第三方模板的信息。
- en: Tip
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Because Django is designed to do all of the heavy lifting, this is the only
    URL pattern that we need to create in order to activate all URL patterns related
    to the Django admin site.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Django 被设计用来做所有繁重的工作，因此我们只需要创建一个 URL 模式，就可以激活与 Django 管理站点相关的所有 URL 模式。
- en: Logging into the Django admin site
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录 Django 管理站点
- en: 'The Django admin site should now be active and if we navigate to the URL `http://localhost:8000/admin/`,
    we should see the standard Django admin login screen, as depicted in the following
    screenshot:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 现在 Django 管理站点应该已经激活，如果我们导航到 URL `http://localhost:8000/admin/`，我们应该看到标准的 Django
    管理登录屏幕，如下面的截图所示：
- en: '![Figure 6.1 – Django admin site login'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.1 – Django 管理站点登录](img/Figure_6.1 – Django admin site login.jpg)'
- en: '](img/Figure_6.01_B17243.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.01_B17243.jpg)'
- en: Figure 6.1 – Django admin site login
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.1 – Django 管理站点登录
- en: 'Use the username and password that were provided when the `createsuperuser`
    command was executed in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. You can log in with those superuser credentials or, if
    you wish to use the superuser provided with the `chapter_3` data fixture, then
    use the following credentials instead:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用在 [*第 2 章*](B17243_02_ePub.xhtml#_idTextAnchor037)，*项目配置* 中执行 `createsuperuser`
    命令时提供的用户名和密码。您可以使用这些超级用户凭据登录，或者如果您希望使用 `chapter_3` 数据固定提供的超级用户，则可以使用以下凭据：
- en: '`admin`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`admin`'
- en: '`mynewpassword`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mynewpassword`'
- en: 'Once you are logged in, you should see two main sections, titled **AUTHENTICATION
    AND AUTHORIZATION** and **CHAPTER_3**, and to the right, a **Recent actions**
    side-nav section is displayed on your dashboard, as depicted in the following
    screenshot:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 登录后，您应该看到两个主要部分，标题为 **认证和授权** 和 **CHAPTER_3**，在右侧，您的仪表板上显示了一个 **最近操作** 侧边导航部分，如下面的截图所示：
- en: '![Figure 6.2 – Django admin site dashboard'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.2 – Django 管理站点仪表板](img/Figure_6.2 – Django admin site dashboard.jpg)'
- en: '](img/Figure_6.02_B17243.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_6.02_B17243.jpg)'
- en: Figure 6.2 – Django admin site dashboard
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – Django 管理站点仪表板
- en: If you installed the `django-address` package in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, you will see an additional `address` app
    in the `INSTALLED_APPS` variable of the `settings.py` file, then that section
    would not appear within the admin dashboard.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在 [*第 3 章*](B17243_03_ePub.xhtml#_idTextAnchor077)，*模型、关系和继承* 中安装了 `django-address`
    包，您将在 `settings.py` 文件的 `INSTALLED_APPS` 变量中看到额外的 `address` 应用程序，那么该部分就不会出现在管理仪表板中。
- en: The **Recent actions** panel shows us information that tracks when a user created,
    changed, or deleted a particular object that is registered in the admin site when
    any of those actions is performed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**最近操作**面板显示的信息跟踪了当用户在管理站点中创建、更改或删除特定对象时的时间，这些操作中的任何一个发生时，该对象都会在管理站点中注册。'
- en: In the section titled `User` model in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, using the `AUTH_USER_MODEL` variable in
    the `settings.py` file to point to the custom `Seller` class that we created,
    we will have to register the `Seller` model in the admin site in order for it
    to appear.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 3 章*](B17243_03_ePub.xhtml#_idTextAnchor077)，*模型、关系和继承* 中标题为 `User` 模型的部分，使用
    `settings.py` 文件中的 `AUTH_USER_MODEL` 变量指向我们创建的自定义 `Seller` 类，我们将不得不在管理站点中注册 `Seller`
    模型，以便它显示出来。
- en: Next, let's register that `Seller` model to get it to appear on the dashboard.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们注册那个 `Seller` 模型，以便它在仪表板上显示。
- en: Writing admin classes
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写管理类
- en: Here, we will discuss writing a standard `ModelAdmin` class found in the `django.contrib.admin`
    library. We will also provide an example using the `UserAdmin` class, because
    we extended the `User` model in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将讨论如何在`django.contrib.admin`库中找到的标准`ModelAdmin`类的编写。我们还将提供一个使用`UserAdmin`类的示例，因为我们已经在[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)中扩展了`User`模型，*模型、关系和继承*。
- en: Class – ModelAdmin
  id: totrans-58
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类 – ModelAdmin
- en: '`ModelAdmin` is the class provided by Django that does all the heavy lifting
    for us, in regard to models that are not user based. Before a model can be registered,
    an admin class using the `ModelAdmin` class will need to be created in order to
    link a model to the admin interface.'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '`ModelAdmin`是Django为我们提供的类，它为我们处理了所有繁重的工作，特别是在非用户模型方面。在模型可以注册之前，需要创建一个使用`ModelAdmin`类的admin类，以便将模型链接到管理界面。'
- en: 'In the `/chapter_6/admin.py` file, include the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在`/chapter_6/admin.py`文件中，包含以下代码：
- en: '[PRE8]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: In the preceding code, the `SellerAdmin` class is constructed using the Django
    `contrib` class called `ModelAdmin`. Django makes it easy for us by doing a lot
    of the heavy lifting. Django will automatically configure everything that we do
    not specify in this class, such as the options we will discuss soon in this chapter.
    This means if we include the `pass` statement in this class, we will not have
    to write anything else and Django will create the admin site for that model based
    on default parameters. Go ahead and write this class another three times for the
    remaining vehicle model objects, including the `pass` statement for each class
    as you write them. Name these classes `VehicleAdmin`, `VehicleModelAdmin`, and
    `EngineAdmin`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，`SellerAdmin`类是使用Django的`contrib`类`ModelAdmin`构建的。Django通过为我们做很多繁重的工作而使我们变得容易。Django将自动配置我们在这个类中没有指定的所有内容，例如我们将在本章中很快讨论的选项。这意味着如果我们在这个类中包含`pass`语句，我们就不需要写任何其他内容，Django将根据默认参数为该模型创建管理站点。请继续编写这个类另外三次，包括剩余的车辆模型对象，并在编写时为每个类包含`pass`语句。将这些类命名为`VehicleAdmin`、`VehicleModelAdmin`和`EngineAdmin`。
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Each of the class names ends with the word `Admin`. Follow the naming convention
    of `ModelNameAdmin` when naming future admin classes of your own.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 每个类名都以单词`Admin`结尾。在命名未来的admin类时，请遵循`ModelNameAdmin`的命名约定。
- en: Class – UserAdmin
  id: totrans-69
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 类 – UserAdmin
- en: '`UserAdmin` is a special class provided by Django that lets us link a user-based
    model to the admin interface. The `UserAdmin` class is an extension of the `ModelAdmin`
    class. Next, we will create the `SellerAdmin` class, which will import all of
    the functionality available in the Django `UserAdmin` class. We will write the
    admin class the exact same way as we did in the previous exercise with the `pass`
    statement. All of the other vehicle-related admin classes will continue to use
    the standard `ModelAdmin` class.'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserAdmin`是Django提供的一个特殊类，它允许我们将基于用户的模型链接到管理界面。`UserAdmin`类是`ModelAdmin`类的扩展。接下来，我们将创建`SellerAdmin`类，它将导入Django
    `UserAdmin`类中可用的所有功能。我们将以与上一个练习中相同的方式编写admin类，包括`pass`语句。所有其他与车辆相关的admin类将继续使用标准的`ModelAdmin`类。'
- en: 'The following code shows us how the `SellerAdmin` class should look now:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码展示了`SellerAdmin`类现在的样子：
- en: '[PRE13]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Now that we have written the admin classes, let's register them next.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经编写了admin类，接下来让我们注册它们。
- en: Registering models
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 注册模型
- en: 'We need to write a register statement that will link an admin class to its
    corresponding model and automatically create the URL patterns that will pertain
    to that model. There are two ways to do this and they both do the exact same thing:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要编写一个注册语句，将admin类与其相应的模型链接，并自动创建与该模型相关的URL模式。有两种方法可以做到这一点，它们都做完全相同的事情：
- en: The first is with a single statement that is written at the bottom of the document,
    placed right after any admin classes that have been written.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种方法是在文档的底部写一个单独的语句，放在已经编写的任何admin类之后。
- en: The second is to wrap each admin class in a register decorator function.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种方法是将每个admin类包裹在一个register装饰器函数中。
- en: Both will be demonstrated in the following examples but choose only the one
    that you like the most. Implementing both at the same time may cause errors.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 这两种方法将在以下示例中演示，但请选择您最喜欢的一种。同时实现两种方法可能会导致错误。
- en: Using a statement
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用语句
- en: 'Using a statement is easy; first we write the admin classes and then, at the
    bottom of the same `admin.py` file, write the register statement just like we
    have done for `Seller` in the following code block:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 使用语句很简单；首先编写管理类，然后在同一`admin.py`文件的底部，像以下代码块中对`Seller`所做的那样，写下注册语句：
- en: '[PRE19]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Here, we use the `admin.site.register(Model, ModelAdmin)` statement to register
    the admin classes. Write three more statements to register the `Vehicle`, `VehicleModel`,
    and `Engine` model classes to their corresponding admin classes.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`admin.site.register(Model, ModelAdmin)`语句来注册管理类。再写三个语句来注册`Vehicle`、`VehicleModel`和`Engine`模型类到它们相应的管理类。
- en: Using a decorator
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用装饰器
- en: 'Using a decorator works just like when we used the `@property` model method
    decorator introduced in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*. Decorators wrap classes, written on the
    line before the class is declared, as is done on the `SellerAdmin` class here:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 使用装饰器的工作方式与我们在[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)中介绍的`@property`模型方法装饰器类似，*模型、关系和继承*。装饰器封装类，写在类声明之前的行上，就像这里的`SellerAdmin`类一样：
- en: '[PRE31]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: '[PRE42]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Here, we are using the `@admin.register(Model)` decorator provided by Django.
    When used this way, this function takes in only one positional argument and that
    is the name of the model class we wish to link to that admin class. The admin
    class is derived from the class name that the decorator is being used on, in this
    case, the `SellerAdmin` class. Add this decorator to the three remaining admin
    classes and adjust the related model accordingly for each decorator.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用 Django 提供的`@admin.register(Model)`装饰器。当以这种方式使用时，这个函数只接受一个位置参数，即我们希望链接到该管理类的模型类名称。管理类是从使用装饰器的类名称派生的，在这种情况下，是`SellerAdmin`类。将此装饰器添加到剩余的三个管理类中，并相应地调整每个装饰器相关的模型。
- en: 'Now that we have these models registered, when accessing the Django admin dashboard,
    you should now see a fourth section titled **CHAPTER_3** containing four items,
    as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经注册了这些模型，当访问 Django 管理仪表板时，您现在应该会看到一个名为**CHAPTER_3**的第四个部分，包含四个项目，如下面的截图所示：
- en: '![Figure 6.3 – Django – registering models'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.3 – Django – 注册模型](img/Figure_6.03_B17243.jpg)'
- en: '](img/Figure_6.03_B17243.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_6.03_B17243.jpg](img/Figure_6.03_B17243.jpg)'
- en: Figure 6.3 – Django – registering models
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3 – Django – 注册模型
- en: Clicking any one of these will take you to what is called a **changelist view**,
    where a list or collection of all those objects is displayed. Clicking on any
    of those items would then take you to what is called a **change view**. Clicking
    on the **Add** button found on the changelist view page will take the user to
    what is called an **add view**, which is a form that creates a new instance of
    that model rather than editing an existing one. Similarly, deleting an object
    will take the user to what is called a **delete view** page for that object. Similar
    to how models and forms are each controlled using the fields and methods written
    in those classes, we can control admin classes the same way by defining certain
    variables known as options and custom methods. Let's discuss what those options
    are next.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 点击这些选项中的任何一个，都会带您进入所谓的**变更列表视图**，在这里会显示所有这些对象的列表或集合。点击这些项目中的任何一个，然后会进入所谓的**变更视图**。在变更列表视图页面上点击**添加**按钮，会将用户带到所谓的**添加视图**，这是一个创建该模型新实例的表单，而不是编辑现有实例。同样，删除一个对象会将用户带到该对象的**删除视图**页面。类似于如何使用那些类中编写的字段和方法来控制模型和表单，我们可以通过定义某些称为选项的自定义方法来以相同的方式控制管理类。接下来，让我们讨论一下这些选项是什么。
- en: Configuring admin class options
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置管理类选项
- en: Django provides admin class options for customizing the Django admin site interface
    directly. In this section, we will go through some of the most important and widely
    used options and provide examples of how to use them. We don't have enough room
    to discuss them all in great detail.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Django 为自定义 Django 管理站点界面提供了管理类选项。在本节中，我们将介绍一些最重要和最广泛使用的选项，并提供如何使用它们的示例。我们没有足够的空间详细讨论它们。
- en: 'For a complete breakdown of how to use any of the options available, visit
    the official Django documentation, found here: [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-options](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-options).'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解如何使用任何可用的选项，请访问官方 Django 文档，网址为：[https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-options](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-options)。
- en: The following options have been broken down into categories based on what view
    type they relate to (changelist view, change or add view, and just the add view).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 以下选项已根据它们相关的视图类型（更改列表视图、更改或添加视图以及仅添加视图）进行分类。
- en: Note
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Before adding any of the options to your admin classes, remember to remove the
    `pass` statement that was previously written for that class as a placeholder.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在将任何选项添加到你的管理类之前，请记住删除之前为该类编写的`pass`语句作为占位符。
- en: Changelist view-related options
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 与更改列表视图相关的选项
- en: 'These options relate to an admin class on the changelist view page, such as
    those listed here:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项与更改列表视图页面上的管理类相关，例如以下列出的：
- en: '`http://localhost:8000/admin/chapter_3/engine/`'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/engine/`'
- en: '`http://localhost:8000/admin/chapter_3/seller/`'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/seller/`'
- en: '`http://localhost:8000/admin/chapter_3/vehicle_model/`'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/vehicle_model/`'
- en: '`http://localhost:8000/admin/chapter_3/vehicle/`'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/vehicle/`'
- en: Option – actions
  id: totrans-132
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – 操作
- en: 'The `actions` option relates to the checkbox that is found to the left of every
    item on a changelist view page. By default, Django automatically provides at least
    one action for every model that is created and registered; that action is the
    delete action. For example, navigate to the `Sellers` changelist view page at
    `http://localhost:8000/admin/chapter_3/seller/`, select the dropdown next to the
    **Action** label, and you will see only one option, the delete option, as shown
    in the following screenshot:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`actions`选项与更改列表视图页面左侧每个项目旁边的复选框相关。默认情况下，Django为每个创建并注册的模型自动提供至少一个操作；这个操作是删除操作。例如，导航到`Sellers`更改列表视图页面`http://localhost:8000/admin/chapter_3/seller/`，选择**操作**标签旁边的下拉菜单，你将只看到一个选项，即删除选项，如下面的截图所示：'
- en: '![Figure 6.4 – Django – actions admin option'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.4 – Django – 操作管理选项'
- en: '](img/Figure_6.04_B17243.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.04_B17243.jpg)'
- en: Figure 6.4 – Django – actions admin option
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – Django – 操作管理选项
- en: If we had 20 sellers in this list, we could delete all 20 of them at once by
    using this action, instead of having to do a lot of needless clicking around.
    Additional actions can be created for custom use. An example of where this can
    be used is if you have a set of pages, which can have a published or unpublished
    state, stored in a field within your table. A custom action could be created that
    can publish or unpublish all of the selected objects.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在这个列表中有20个卖家，我们可以通过使用这个操作一次性删除所有20个卖家，而不是不得不进行很多不必要的点击。可以创建额外的操作以供自定义使用。一个可以使用此操作的例子是，如果你有一组页面，这些页面可以处于已发布或未发布状态，并存储在你的表中的一个字段中。可以创建一个自定义操作，该操作可以发布或取消发布所有选定的对象。
- en: We won't be creating a custom action in these exercises because it would be
    a complicated task to discuss and goes beyond the scope of this book. Additionally,
    some of the actions that you might be thinking of, such as editing a field, can
    also be done using the `list_editable` option, which we will be discussing in
    the *Option – list_editable section*.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些练习中，我们不会创建自定义操作，因为这会是一个复杂的任务，超出了本书的范围。此外，你可能考虑的一些操作，例如编辑字段，也可以使用`list_editable`选项来完成，我们将在**选项
    – list_editable部分**中讨论。
- en: 'Django provides full documentation on how to create custom actions here: [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/actions/](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/actions/).'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: Django在这里提供了关于如何创建自定义操作的完整文档：[https://docs.djangoproject.com/en/4.0/ref/contrib/admin/actions/](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/actions/)。
- en: Option – actions_on_bottom
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – actions_on_bottom
- en: 'The `actions_on_bottom` option is used to display the `False`. If set to `True`,
    as is done to the `SellerAdmin` class in the following example, the **Action**
    dropdown will appear below the changelist results:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`actions_on_bottom`选项用于显示`False`。如果设置为`True`，如以下示例中对`SellerAdmin`类所做的那样，**操作**下拉菜单将出现在更改列表结果下方：'
- en: '[PRE44]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Option – actions_on_top
  id: totrans-147
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – actions_on_top
- en: 'Similar to the `actions_on_bottom` option, the `actions_on_top` option will
    display the `True`. We only need to write this if we wish to disable it above
    the changelist, but we can set it to `True` in the `SellerAdmin` class using the
    following example without triggering errors as well:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 与`actions_on_bottom`选项类似，`actions_on_top`选项将显示`True`。我们只需要写这个选项，如果我们希望在更改列表上方禁用它，但我们可以使用以下示例在`SellerAdmin`类中将它设置为`True`而不触发错误：
- en: '[PRE49]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: '[PRE52]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: If both this option and the `actions_on_bottom` option are set to `True`, the
    **Action** dropdown will appear both above and below the changelist results.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果同时将此选项和`actions_on_bottom`选项设置为`True`，则**操作**下拉菜单将出现在更改列表结果上方和下方。
- en: Option – actions_selection_counter
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – actions_selection_counter
- en: 'The `actions_selection_counter` relates to the counter displayed to the right
    of the **Action** drop-down box. This option controls whether or not it should
    appear next to **Action**, as depicted in the following screenshot:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`actions_selection_counter`与显示在**操作**下拉框右侧的计数器相关。此选项控制是否应出现在**操作**旁边，如下面的截图所示：'
- en: '![Figure 6.5 – Django – actions_selection_counter admin option'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.5 – Django – actions_selection_counter 管理选项'
- en: '](img/Figure_6.05_B17243.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.05_B17243.jpg)'
- en: Figure 6.5 – Django – actions_selection_counter admin option
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – Django – actions_selection_counter 管理选项
- en: 'By default, Django will set this value to `True`. There is no need to write
    this option unless you want to disable this feature by setting its value to `False`.
    However, there is no harm in including this option with a value of `True`, as
    is done in the following example:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，Django将此值设置为`True`。除非你想通过将其值设置为`False`来禁用此功能，否则无需编写此选项。然而，包含此选项并使用`True`值是没有害处的，如下面的示例所示：
- en: '[PRE54]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Option – list_display
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – 列显示
- en: The `list_display` option is used to show vertical columns on the changelist
    view page of a model. For example, navigate to the URL `http://localhost:8000/admin/chapter_3/seller/`
    and you'll see that the five columns that currently exist are `username`, `email`,
    `first_name`, `last_name`, and `is_staff`. Django will display the value of each
    field for each row that exists in that table.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_display`选项用于在模型的更改列表视图页面上显示垂直列。例如，导航到URL `http://localhost:8000/admin/chapter_3/seller/`，你会看到目前存在的五个列是`username`、`email`、`first_name`、`last_name`和`is_staff`。Django将为该表中存在的每一行显示每个字段的值。'
- en: 'If we want to adjust this list to display the custom fields that we added to
    the `Seller` model that do not exist in the `User` model, such as the `SellerAdmin`
    class would look as in the following example:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想调整此列表以显示我们添加到`Seller`模型中的自定义字段，而这些字段在`User`模型中不存在，例如`SellerAdmin`类将如下所示：
- en: '[PRE59]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The five columns that existed before were already defined in the `list_display`
    option found in the `UserAdmin` class, which was used to construct the `SellerAdmin`
    class. Navigate back to the same URL at `http://localhost:8000/admin/chapter_3/seller/`
    and you should now see the **Business Name** column third from last on the page
    and the **Superuser Status** column as the last column on the page because that
    is how they are positioned in the preceding list.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前存在的五个列已经在`UserAdmin`类中定义的`list_display`选项中定义，该选项用于构建`SellerAdmin`类。导航回相同的URL
    `http://localhost:8000/admin/chapter_3/seller/`，你现在应该看到页面倒数第三列的**业务名称**列和作为页面最后一列的**超级用户状态**列，因为它们在先前的列表中的位置就是这样。
- en: The `list_display` option can also be used in the form of a callable function,
    allowing you to write a method within that admin class to format the data displayed
    in that column. Just add the name of the custom method to this list just like
    any other field name when using a callable for this option.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_display`选项也可以以可调用函数的形式使用，允许你在该管理类中编写一个方法来格式化该列显示的数据。只需将自定义方法的名称添加到该列表中，就像使用可调用选项时添加任何其他字段名称一样。'
- en: Option – list_display_links
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – list_display_links
- en: The `list_display_links` option is used to control which columns in the changelist
    results will navigate the user to the change view page of that object when clicked.
    By default, Django will make only the first column in this list clickable. If
    you want to make other columns editable, use this option.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_display_links`选项用于控制更改列表结果中哪些列在点击时将用户导航到该对象的更改视图页面。默认情况下，Django将使此列表中的第一列可点击。如果你想使其他列可编辑，请使用此选项。'
- en: 'On the `SellerAdmin` class, add the option as follows:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SellerAdmin`类中，添加选项如下：
- en: '[PRE72]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: When using the `list_display_links` option, the `list_display` option must also
    be used. Only fields added to the `list_display` option can be added to this option.
    Also, if the `list_display_links` option is defined, Django will no longer make
    the first column clickable. For example, if we want to keep the first column clickable,
    that is, the `username` and `name` fields in this option. Also, they must be in
    the order in which they appear in the `list_display` option.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用 `list_display_links` 选项时，还必须使用 `list_display` 选项。只有添加到 `list_display` 选项中的字段可以添加到该选项。此外，如果定义了
    `list_display_links` 选项，Django 将不再使第一列可点击。例如，如果我们想保持第一列可点击，即在此选项中的 `username`
    和 `name` 字段。此外，它们必须按照它们在 `list_display` 选项中出现的顺序排列。
- en: Note
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you are using the `list_editable` option, which we are about to discuss,
    those fields cannot be used in the `list_display_links` option, such as the `first_name`
    and `last_name` fields, which we will reserve for the `list_editable` example
    next.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在使用我们即将讨论的 `list_editable` 选项，则这些字段不能用于 `list_display_links` 选项，例如 `first_name`
    和 `last_name` 字段，我们将为 `list_editable` 示例保留。
- en: Option – list_editable
  id: totrans-198
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – list_editable
- en: The `list_editable` option is an option that allows us to specify what fields
    on the changelist view page will be editable from that page. This prevents the
    need to open up the change view for that particular object just to edit a single
    field. Additionally, only fields found in the `list_display` option can be included
    in the `list_editable` option. This is because the column must exist before we
    can edit it.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_editable` 选项是一个允许我们指定在变更列表视图页面上哪些字段可以从该页面进行编辑的选项。这避免了打开特定对象的更改视图来编辑单个字段的必要性。此外，只有包含在
    `list_display` 选项中的字段可以包含在 `list_editable` 选项中。这是因为列必须存在，我们才能编辑它。'
- en: 'For example, if we want to make the `first_name` and `last_name` fields editable
    on the changelist view page, the `SellerAdmin` class would be written as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想在变更列表视图页面上使 `first_name` 和 `last_name` 字段可编辑，则 `SellerAdmin` 类可以这样编写：
- en: '[PRE80]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-205
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-209
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Now, navigate to the changelist view found at `http://localhost:8000/admin/chapter_3/seller/`.
    We can see the `first_name` and `last_name` fields now appear as an input box
    with a save button at the bottom of that list, as depicted in the following screenshot:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到位于 `http://localhost:8000/admin/chapter_3/seller/` 的变更列表视图。我们可以看到 `first_name`
    和 `last_name` 字段现在显示为一个带有底部保存按钮的输入框，如下面的截图所示：
- en: '![Figure 6.6 – Django – list_editable admin option'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.6 – Django – list_editable 管理选项'
- en: '](img/Figure_6.06_B17243.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.06_B17243.jpg)'
- en: Figure 6.6 – Django – list_editable admin option
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – Django – list_editable 管理选项
- en: Option – list_filter
  id: totrans-215
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – list_filter
- en: The `list_filter` option is a powerful tool that creates a box with a label
    titled **Filter** just to the right of the results on a changelist view page.
    The fields that are added to this option will tell Django to create a filter with
    a set of related choices derived from the values found in that QuerySet of results.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_filter` 选项是一个强大的工具，它在一个标签为 **过滤** 的框中创建一个标签，位于变更列表视图页面上的结果右侧。添加到该选项的字段将告诉
    Django 从该结果 QuerySet 中找到的值创建一组相关选项的过滤器。'
- en: 'For example, if we want to override the default `list_filter` option that is
    found in the `UserAdmin` class and add the `Seller` model field called `name`
    as a filter, then we would write the `SellerAdmin` class as in the following example:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想覆盖 `UserAdmin` 类中找到的默认 `list_filter` 选项，并添加名为 `name` 的 `Seller` 模型字段作为过滤器，那么我们将按照以下示例编写
    `SellerAdmin` 类：
- en: '[PRE90]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-222
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: In the previous example, we just copied the `list_filter` option found in the
    `UserAdmin` class, located in the `django.contrib.auth.admin` library of Django.
    Then, we just modified that value to the desired value.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们只是复制了位于 Django 的 `django.contrib.auth.admin` 库中的 `UserAdmin` 类中找到的
    `list_filter` 选项，然后我们只修改了该值到期望的值。
- en: 'Now when we navigate back to the URL `http://localhost:8000/admin/chapter_3/seller/`,
    we see the **By Business Name** filter, as depicted in the following screenshot:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们导航回 URL `http://localhost:8000/admin/chapter_3/seller/` 时，我们看到 **按企业名称**
    过滤器，如下面的截图所示：
- en: '![Figure 6.7 – Django – list_filter admin option'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.7 – Django – list_filter 管理选项'
- en: '](img/Figure_6.07_B17243.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.07_B17243.jpg)'
- en: Figure 6.7 – Django – list_filter admin option
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – Django – list_filter 管理选项
- en: Option – list_per_page
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – list_per_page
- en: 'The `list_per_page` option designates the number of items that we want to appear
    on a changelist view page. By default, Django will set this value to `100`. This
    can sometimes be too much for a user and so let''s go ahead and practice setting
    this to a much more friendly number of, say, `20` on the `SellerAdmin` class by
    using the following example:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`list_per_page`选项指定了我们希望在变更列表视图页面上显示的项目数量。默认情况下，Django会将此值设置为`100`。有时这个值对于用户来说可能太多，所以让我们继续练习将这个值设置为更友好的数字，比如在`SellerAdmin`类中使用以下示例将其设置为`20`：'
- en: '[PRE101]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: '[PRE103]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: '[PRE105]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: If you add more than 20 items to your tables, you will see a set of pagination
    buttons appear at the bottom of your changelist view page. When there are fewer
    than 20 items in total, no pagination buttons will appear since there is only
    one page of results.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你向你的表中添加超过20个项目，你将在变更列表视图页面的底部看到一组分页按钮。当总项目数少于20时，不会出现分页按钮，因为只有一个结果页面。
- en: Note
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you are using a third-party package or custom class instead of the default
    `django.core.paginator.Paginator` class used in Django, you can implement that
    custom paginator class by using the `paginator` admin option. Instructions on
    how this is done can be found here: [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.paginator/](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.paginator/).'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用第三方包或自定义类而不是Django中使用的默认`django.core.paginator.Paginator`类，你可以通过使用`paginator`管理选项来实现这个自定义分页器类。如何做到这一点的说明可以在这里找到：[https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.paginator/](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.paginator/)。
- en: Option – ordering
  id: totrans-244
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – ordering
- en: The `ordering` option is done the same way as the `ordering` option in a model
    `Meta` class. This option accepts a list of fields that are ordered by the field
    specified when the page first loads.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '`ordering`选项与模型`Meta`类中的`ordering`选项执行方式相同。此选项接受一个字段列表，当页面首次加载时，按指定的字段进行排序。'
- en: 'For example, the default ordering option in the `UserAdmin` class is set to
    order by `username` in ascending order. Go ahead and add that to the `SellerAdmin`
    class by using the following example:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`UserAdmin`类中的默认排序选项设置为按`username`升序排序。请继续使用以下示例将其添加到`SellerAdmin`类中：
- en: '[PRE106]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: '[PRE107]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: '[PRE108]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE108]'
- en: '[PRE109]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE109]'
- en: '[PRE110]'
  id: totrans-251
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Here, we can add the subtract symbol, such as in `('-username',)`, to make it
    order in descending order, just like the model `Meta` class `ordering` option.
    Multiple fields can be added and Django will sort by the items in the order that
    they appear in this options list. Also, once the page loads, the user can opt
    to unsort or sort by another column if they press the action buttons in the table
    heading of those columns.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们可以添加减号符号，例如在`('-username',)`中，使其按降序排列，就像模型`Meta`类中的`ordering`选项一样。可以添加多个字段，Django将按照此选项列表中出现的顺序对项目进行排序。此外，一旦页面加载，用户可以选择取消排序或按另一列排序，如果他们按下那些列的表头中的操作按钮。
- en: Option – preserve_filters
  id: totrans-253
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – preserve_filters
- en: The `preserve_filters` option relates to how filters are applied when the user
    visits the changelist view page. By default, when a user decides to create, change,
    or edit an object for a model, when they are brought back to the changelist view
    page, the filters will be preserved. The only time we would actually have to use
    this option is when we want to disable this feature, making all filters reset
    whenever an add, change, or delete action has been performed.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '`preserve_filters`选项与用户访问变更列表视图页面时应用的过滤器有关。默认情况下，当用户决定为模型创建、更改或编辑对象时，当他们被带回变更列表视图页面时，过滤器将被保留。我们实际上会使用此选项的唯一时间是我们想禁用此功能，使得在执行添加、更改或删除操作后，所有过滤器都会重置。'
- en: 'To disable this feature, set the `preserve_filters` value to `False`, as is
    done in the following example:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 要禁用此功能，将`preserve_filters`的值设置为`False`，如下例所示：
- en: '[PRE111]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: '[PRE112]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE112]'
- en: '[PRE113]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE113]'
- en: '[PRE114]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE114]'
- en: '[PRE115]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: Option – search_fields
  id: totrans-261
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – search_fields
- en: The `search_fields` option enables a search bar on the changelist view page.
    One should already appear on the `Sellers` list because the `UserAdmin` class
    already defines this option for us. However, fields such as `name` are not currently
    searchable. Navigate to `http://localhost:8000/admin/chapter_3/seller/` and search
    for the **Biz** keyword and you should get no results.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`search_fields`选项在变更列表视图页面上启用搜索栏。在`Sellers`列表中应该已经有一个出现，因为`UserAdmin`类已经为我们定义了这个选项。然而，像`name`这样的字段目前是不可搜索的。导航到`http://localhost:8000/admin/chapter_3/seller/`并搜索**Biz**关键词，你应该不会得到任何结果。'
- en: 'Now, add the following code block to the `SellerAdmin` class, making the field
    labeled **Business Name** searchable:'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将以下代码块添加到 `SellerAdmin` 类中，使标记为**商业名称**的字段可搜索：
- en: '[PRE116]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: '[PRE117]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE117]'
- en: '[PRE118]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE118]'
- en: '[PRE119]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE119]'
- en: '[PRE120]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE120]'
- en: '[PRE121]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE121]'
- en: '[PRE122]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE122]'
- en: '[PRE123]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE123]'
- en: '[PRE124]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE124]'
- en: '[PRE125]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE125]'
- en: '[PRE126]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE126]'
- en: Now, refresh the page and search for the same `Seller` with a `chapter_3` fixture.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，刷新页面并使用 `chapter_3` 固件搜索相同的 `Seller`。
- en: Change/add view-related options
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更改/添加视图相关选项
- en: 'These options pertain to an admin class on the add or change view pages, such
    as those listed here:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项与添加或更改视图页面的管理类相关，例如以下列出的：
- en: '`http://localhost:8000/admin/chapter_3/engine/add/`'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/engine/add/`'
- en: '`http://localhost:8000/admin/chapter_3/engine/1/change/`'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/engine/1/change/`'
- en: '`http://localhost:8000/admin/chapter_3/seller/add/`'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/seller/add/`'
- en: '`http://localhost:8000/admin/chapter_3/seller/1/change/`'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/seller/1/change/`'
- en: '`http://localhost:8000/admin/chapter_3/vehicle_model/add/`'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/vehicle_model/add/`'
- en: '`http://localhost:8000/admin/chapter_3/vehicle_model/1/change/`'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/vehicle_model/1/change/`'
- en: '`http://localhost:8000/admin/chapter_3/vehicle/add/`'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/vehicle/add/`'
- en: '`http://localhost:8000/admin/chapter_3/vehicle/1/change/`'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/vehicle/1/change/`'
- en: Option – exclude
  id: totrans-286
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – exclude
- en: The `exclude` option can be thought of as the reverse of the `fields` option.
    This option will accept a list of fields that we wish to exclude from appearing
    on the form on the Django admin site. The fields added to the `exclude` option
    should not appear anywhere in the `fieldsets` or `add_fieldsets` option; otherwise,
    an error will be triggered. If a field exists in both the `fields` and `exclude`
    options, the field will be excluded.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 可以将 `exclude` 选项视为 `fields` 选项的反面。此选项将接受一个字段列表，我们希望从 Django 管理站点的表单中排除这些字段。添加到
    `exclude` 选项中的字段不应出现在 `fieldsets` 或 `add_fieldsets` 选项中；否则，将触发一个错误。如果一个字段同时存在于
    `fields` 和 `exclude` 选项中，该字段将被排除。
- en: 'For example, if we want to exclude the `first_name` field using the following
    code, we would also have to remove the `first_name` field everywhere it appears
    in the `fieldsets`, `add_fieldsets`, `list_display`, `list_editable`, `search_fields`,
    and `prepopulated_fields` options, as they have been written in previous and future
    examples:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果我们想使用以下代码排除 `first_name` 字段，那么我们也必须从 `fieldsets`、`add_fieldsets`、`list_display`、`list_editable`、`search_fields`
    和 `prepopulated_fields` 选项中删除 `first_name` 字段，因为它们在之前的和未来的示例中已经编写过：
- en: '[PRE127]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE127]'
- en: '[PRE128]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE128]'
- en: '[PRE129]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE129]'
- en: '[PRE130]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE130]'
- en: '[PRE131]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE131]'
- en: You may now remove this setting and reset the `first_name` field to its previous
    usage.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以删除此设置并将 `first_name` 字段重置为其以前的用法。
- en: Option – fields
  id: totrans-295
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – fields
- en: The `fields` option lets us explicitly state what fields to include in the admin
    form. Without declaring this field, Django will automatically include every field
    that exists for the model specified. However, the `'__all__'` value can also be
    used to explicitly state that all fields that exist in a related model shall be
    included.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`fields` 选项让我们明确指定要在管理表单中包含哪些字段。如果不声明此字段，Django 将自动包含为指定模型存在的所有字段。然而，也可以使用
    `''__all__''` 值来明确指定应包含相关模型中存在的所有字段。'
- en: 'We will not be including this option since we want all fields included in these
    forms. However, if we did want to specify only certain fields, that would be done
    using a list, where the name of each field in the model is separated by a comma:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会包括这个选项，因为我们希望这些表单中包含所有字段。然而，如果我们只想指定某些字段，那么这将通过一个列表来完成，其中模型中每个字段的名字由逗号分隔：
- en: '[PRE132]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE132]'
- en: '[PRE133]'
  id: totrans-299
  prefs: []
  type: TYPE_PRE
  zh: '[PRE133]'
- en: '[PRE134]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE134]'
- en: '[PRE135]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE135]'
- en: In this example, only these four fields would appear on the change view page
    for the `Seller` object.
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个示例中，只有这四个字段会出现在 `Seller` 对象的更改视图页面上。
- en: Note
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `fields` option cannot be combined with the `fieldsets` or `add_fieldsets`
    option and doing so will result in an error. However, the `fieldsets` and `add_fieldsets`
    options can be used together. On the `SellerAdmin` class, we can only use the
    `fieldsets` and `add_fieldsets` options because the `UserAdmin` parent class that
    was used to construct the `SellerAdmin` class already uses those options. In this
    case, the `exclude` option would be best used if we did not want to include specific
    fields. Also, if a field is not included in an admin class and is specified in
    any of the class options, then an error will be triggered.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`fields` 选项不能与 `fieldsets` 或 `add_fieldsets` 选项结合使用，这样做会导致错误。但是，`fieldsets`
    和 `add_fieldsets` 选项可以一起使用。在 `SellerAdmin` 类中，我们只能使用 `fieldsets` 和 `add_fieldsets`
    选项，因为用于构建 `SellerAdmin` 类的 `UserAdmin` 父类已经使用了这些选项。在这种情况下，如果我们不想包括特定的字段，最好使用 `exclude`
    选项。此外，如果一个字段没有包含在管理类中，但在任何类选项中指定了它，那么将会触发一个错误。'
- en: Option – fieldsets
  id: totrans-305
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – fieldsets
- en: The `fieldsets` option is similar to the `fields` option in that it relates
    to customizing fields but it will group like fields together into designated categories
    that we create. Django will add HTML and special formatting to group these fields
    on the change and add view pages.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`fieldsets`选项与`fields`选项类似，因为它与自定义字段相关，但它会将类似字段分组到我们创建的指定类别中。Django将为这些字段在更改和查看页面上添加HTML和特殊格式。'
- en: For example, because we extended the Django `User` model in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, and are now using the `UserAdmin` class
    to construct the `SellerAdmin` class, we will need to write our own `fieldsets`
    option. We have to do this because Django will be using the `fieldsets` option
    as it was written in the `UserAdmin` class, which currently does not include the
    additional fields we created called `name` and `vehicles`. In order for the `name`
    and `vehicles` fields to appear on the change and add view pages, we need to add
    them to any fieldset group; otherwise, only the original `User` fields will appear.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，因为我们扩展了Django的`User`模型在[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)“模型、关系和继承”，现在使用`UserAdmin`类来构建`SellerAdmin`类，我们将需要编写自己的`fieldsets`选项。我们必须这样做，因为Django将使用`fieldsets`选项，就像它在`UserAdmin`类中那样编写，目前不包括我们创建的额外字段，称为`name`和`vehicles`。为了使`name`和`vehicles`字段出现在更改和添加查看页面上，我们需要将它们添加到任何字段集组中；否则，只会出现原始的`User`字段。
- en: 'Start by copying the original `fieldsets` option found in the `django.contrib.auth.admin`
    library of Django into your `SellerAdmin` class and modify the groups to now include
    the `name` and `vehicles` fields, as shown:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，将Django的`django.contrib.auth.admin`库中找到的原始`fieldsets`选项复制到您的`SellerAdmin`类中，并修改组以现在包括`name`和`vehicles`字段，如下所示：
- en: '[PRE136]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE136]'
- en: '[PRE137]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE137]'
- en: '[PRE138]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE138]'
- en: '[PRE139]'
  id: totrans-312
  prefs: []
  type: TYPE_PRE
  zh: '[PRE139]'
- en: '[PRE140]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE140]'
- en: '[PRE141]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE141]'
- en: '[PRE142]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE142]'
- en: '[PRE143]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE143]'
- en: '[PRE144]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE144]'
- en: '[PRE145]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE145]'
- en: '[PRE146]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE146]'
- en: '[PRE147]'
  id: totrans-320
  prefs: []
  type: TYPE_PRE
  zh: '[PRE147]'
- en: '[PRE148]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE148]'
- en: '[PRE149]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE149]'
- en: '[PRE150]'
  id: totrans-323
  prefs: []
  type: TYPE_PRE
  zh: '[PRE150]'
- en: '[PRE151]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE151]'
- en: '[PRE152]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE152]'
- en: '[PRE153]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE153]'
- en: '[PRE154]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE154]'
- en: '[PRE155]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE155]'
- en: '[PRE156]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE156]'
- en: '[PRE157]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE157]'
- en: '[PRE158]'
  id: totrans-331
  prefs: []
  type: TYPE_PRE
  zh: '[PRE158]'
- en: '[PRE159]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE159]'
- en: '[PRE160]'
  id: totrans-333
  prefs: []
  type: TYPE_PRE
  zh: '[PRE160]'
- en: '[PRE161]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE161]'
- en: '[PRE162]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE162]'
- en: '[PRE163]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE163]'
- en: '[PRE164]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE164]'
- en: '[PRE165]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE165]'
- en: '[PRE166]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE166]'
- en: '[PRE167]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE167]'
- en: '[PRE168]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE168]'
- en: '[PRE169]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE169]'
- en: '[PRE170]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE170]'
- en: 'This option accepts a list of tuples. Each tuple contains two items, the label
    of that fieldset or the value of `None` to display no label at all, as depicted
    in the first group previously. The second item is another list of tuples where
    that tuple either defines one or all of three available keys: `fields`, `description`,
    and `classes`. The `classes` key is used to give the container of that fieldset
    an HTML class name, as depicted in `''classes'': (''wide'',)`. The `description`
    key will add an optional description that is rendered above a field in the admin
    form as a `<p></p>` HTML object, as shown in the `Vehicles` group previously.
    The `fields` key will accept a list of fields separated by a comma to add the
    fields desired to that fieldset group. This is the one mandatory key.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '此选项接受一个元组列表。每个元组包含两个项目，该字段集的标签或显示无标签的`None`值，如之前的第一组所示。第二个项目是另一个元组列表，其中该元组定义了三个可用的键之一或全部：`fields`、`description`和`classes`。`classes`键用于给该字段集的容器赋予一个HTML类名，如`''classes'':
    (''wide'',)`所示。`description`键将添加一个可选的描述，该描述作为`<p></p>`HTML对象渲染在管理表单中的字段上方，如之前在`车辆`组中所示。`fields`键将接受一个由逗号分隔的字段列表，以将该字段添加到字段集组中。这是必选键。'
- en: 'Visit the change view for the seller named `admin` using the link `http://localhost:8000/admin/chapter_3/seller/1/change/`,
    and you should see five sections. The first section is not labeled and the other
    four are named in the order listed here:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 使用链接`http://localhost:8000/admin/chapter_3/seller/1/change/`访问名为`admin`的卖家更改视图，你应该看到五个部分。第一个部分没有标签，其他四个部分按以下顺序命名：
- en: '*No label displayed*'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**不显示标签**'
- en: '**Personal Info**'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**个人信息**'
- en: '**Permissions**'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**权限**'
- en: '**Important Dates**'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**重要日期**'
- en: '**Vehicles**'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**车辆**'
- en: The new fields are the ones labeled `name` field in the `vehicles` field its
    own group.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 新字段是`vehicles`字段中标记为`name`字段的独立组。
- en: Option – filter_horizontal
  id: totrans-352
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – filter_horizontal
- en: The `filter_horizontal` option relates to the `ManyToMany` field called `vehicles`,
    which was created for the `Seller` model. Navigate to the change view page for
    any seller in the database, such as `http://localhost:8000/admin/chapter_3/seller/1/change/`,
    and you'll see the field labeled `<select multiple="">` HTML object. This can
    actually be difficult for some users to interact with, especially with the need
    to use the keyboard by either pressing the *Ctrl* button on Windows or the *Command*
    button on Mac to select multiple items for submission. Django provides a slick
    JavaScript-based user interface that can be applied to any `ManyToMany` fields.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter_horizontal`选项与名为`vehicles`的`ManyToMany`字段相关联，该字段是为`Seller`模型创建的。导航到数据库中任何销售员的更改视图页面，例如`http://localhost:8000/admin/chapter_3/seller/1/change/`，你会看到标记为`<select
    multiple="">`的HTML对象字段。这实际上可能对一些用户来说难以交互，特别是当需要使用键盘时，无论是在Windows上按*Ctrl*按钮还是在Mac上按*Command*按钮来选择多个项目进行提交。Django提供了一个基于JavaScript的用户界面，可以应用于任何`ManyToMany`字段。'
- en: 'For example, go ahead and apply the following option to the `SellerAdmin` class,
    converting the `vehicles` field to now using the horizontal JavaScript user interfaces:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将以下选项应用到`SellerAdmin`类中，将`vehicles`字段转换为现在使用水平JavaScript用户界面：
- en: '[PRE171]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE171]'
- en: '[PRE172]'
  id: totrans-356
  prefs: []
  type: TYPE_PRE
  zh: '[PRE172]'
- en: '[PRE173]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE173]'
- en: '[PRE174]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE174]'
- en: '[PRE175]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE175]'
- en: 'Next, refresh the same change view page and you will see the vehicles now look
    as in the following screenshot, where the boxes are stacked side by side horizontally
    from one another:'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，刷新相同的更改视图页面，你会看到车辆现在看起来如下截图所示，其中框是水平并排堆叠的：
- en: '![Figure 6.8 – Django – filter_horizontal admin option'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 – Django – filter_horizontal管理选项](img/Figure_6.08_B17243.jpg)'
- en: '](img/Figure_6.08_B17243.jpg)'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.8 – Django – filter_horizontal管理选项](img/Figure_6.08_B17243.jpg)'
- en: Figure 6.8 – Django – filter_horizontal admin option
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.8 – Django – filter_horizontal管理选项
- en: Now, the user has more than one method of interacting with this field. They
    could still use the keyboard to do everything, they could use the mouse to do
    everything, or they could use a combination of both. Visually it is much more
    appealing and easier to see what is and is not selected. This even provides a
    search field to help filter results and trim the fat if there are too many available
    choices. The two boxes are used for selecting what is available on the left and
    moving it to the selected box on the right with controls that move items in either
    direction. Additional controls allow the user to select and move all items found
    in one box to the other box.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，用户有更多种方式与这个字段交互。他们仍然可以使用键盘完成所有操作，他们可以使用鼠标完成所有操作，或者他们可以使用两者的组合。从视觉上看，这更加吸引人，更容易看到哪些被选中，哪些没有被选中。这甚至提供了一个搜索字段来帮助过滤结果，如果可选项太多，还可以减少冗余。两个框用于选择左侧可用的项目，并通过控制按钮将其移动到右侧的选中框中。额外的控制按钮允许用户选择并将一个框中找到的所有项目移动到另一个框中。
- en: Option – filter_vertical
  id: totrans-365
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – filter_vertical
- en: The `filter_vertical` option is exactly the same as the `filter_horizontal`
    option except it will stack the boxes vertically instead of horizontally next
    to each other. The top box will be the items available and the bottom box is used
    for the items selected.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`filter_vertical`选项与`filter_horizontal`选项完全相同，只是它将框垂直堆叠而不是水平并排。顶部框是可用的项目，底部框用于选中的项目。'
- en: Option – form
  id: totrans-367
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – 表单
- en: When creating a custom admin form, which we will do later in this chapter, the
    `form` option is used to point to the form class that we wish to use. If we don't
    use this setting, Django will dynamically create a `ModelForm` for the model that
    you have registered with that admin class.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 当创建自定义管理表单时，我们将在本章后面进行，`form`选项用于指向我们希望使用的表单类。如果我们不使用此设置，Django将为与该管理类注册的模型动态创建一个`ModelForm`。
- en: 'Preparing ourselves for the section titled *Writing custom admin form classes*
    of this chapter, add the following option to the `EngineAdmin` class:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章标题为*编写自定义管理表单类*的部分之前，将以下选项添加到`EngineAdmin`类中：
- en: '[PRE176]'
  id: totrans-370
  prefs: []
  type: TYPE_PRE
  zh: '[PRE176]'
- en: '[PRE177]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE177]'
- en: '[PRE178]'
  id: totrans-372
  prefs: []
  type: TYPE_PRE
  zh: '[PRE178]'
- en: '[PRE179]'
  id: totrans-373
  prefs: []
  type: TYPE_PRE
  zh: '[PRE179]'
- en: '[PRE180]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE180]'
- en: This option will link the admin class to an admin form that we will later call
    `EngineForm`.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 此选项将管理类链接到我们稍后称为`EngineForm`的管理表单。
- en: Note
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Until we actually create the `EngineForm` form, you may run into errors. To
    prevent those errors, you can either comment out this line of code and leave the
    `pass` statement under the `EngineAdmin` class or create the `EngineForm` class
    now and add the `pass` statement to that `EngineForm` class until we actually
    add code to it later in this chapter.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际创建`EngineForm`表单之前，你可能会遇到错误。为了防止这些错误，你可以取消注释此行代码并在`EngineAdmin`类下留下`pass`语句，或者现在创建`EngineForm`类并将`pass`语句添加到该`EngineForm`类中，直到我们在本章后面添加代码。
- en: Option – inlines
  id: totrans-378
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – inlines
- en: The `inlines` option is an advanced feature allowing us to make child models
    editable from within the parent model's change view page as an inline formset
    display. This feature is considered advanced in that we need to write separate
    classes just to use and implement this option. These classes can be edited with
    options that customize the look and feel of those formsets. Each inline object
    starts with an `InlineModelAdmin` class. The two `InlineModelAdmin` subclasses
    that are used to render an inline formset are `StackedInline` and `TabularInline`.
    These two classes perform the same actions as the `InlineModelAdmin` class except
    that they render a different HTML template for each class. Additional form classes
    can even be created and used with these inline classes. Refer to the documentation
    found at [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-objects](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-objects),
    as well as the concepts provided in [*Chapter 5*](B17243_05_ePub.xhtml#_idTextAnchor152),
    *Django Forms*.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`inlines`选项是一个高级功能，允许我们在父模型的更改视图页面上作为内联表单集显示来编辑子模型。这个功能被认为是高级的，因为我们需要编写单独的类来使用和实现这个选项。这些类可以使用自定义这些表单集外观和感觉的选项进行编辑。每个内联对象都以`InlineModelAdmin`类开始。用于渲染内联表单集的两个`InlineModelAdmin`子类是`StackedInline`和`TabularInline`。这两个类执行与`InlineModelAdmin`类相同的行为，除了为每个类渲染不同的HTML模板。甚至可以创建和使用这些内联类的新表单类。请参阅位于[https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-objects](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-objects)的文档，以及[*第5章*](B17243_05_ePub.xhtml#_idTextAnchor152)中提供的概念，*Django表单*。'
- en: Both the `StackedInline` and `TabularInline` classes are used for the model
    to which a `ForeignKey` field is linked. In the vehicle objects, we can apply
    the inline option to the `EngineAdmin` and `VehicleModelAdmin` classes. For any
    `ManyToMany` fields, we will have to link them in a slightly different way.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`StackedInline`和`TabularInline`类都用于与`ForeignKey`字段链接的模型。在车辆对象中，我们可以将内联选项应用于`EngineAdmin`和`VehicleModelAdmin`类。对于任何`ManyToMany`字段，我们都需要以稍微不同的方式将它们链接起来。'
- en: Next, we will go over each of these classes and discuss briefly how they are
    used.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将逐一介绍这些类，并简要讨论它们的使用方法。
- en: Class – InlineModelAdmin
  id: totrans-382
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类 – InlineModelAdmin
- en: The `InlineModelAdmin` class is the parent class that the two classes used to
    render inline formsets are constructed from. Every option and method of this class
    is available in those two child classes.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`InlineModelAdmin`类是构建用于渲染内联表单集的两个类的父类。这个类的每个选项和方法都可在这两个子类中使用。'
- en: 'Many of the options and methods available to the `ModelAdmin` class are also
    available in the `InlineModelAdmin` class. Here is a full list of what is provided
    in the `InlineModelAdmin` class:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 许多可用于`ModelAdmin`类的选项和方法也适用于`InlineModelAdmin`类。以下是`InlineModelAdmin`类中提供内容的完整列表：
- en: '![](img/Table_6.01_B17243.jpg)'
  id: totrans-385
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Table_6.01_B17243.jpg)'
- en: A common option that we will be adding to all of the inline classes is `extra
    = 1`, which sets this value to `1` in order to show only one additional blank
    formset, allowing the user to dynamically add objects when they want to. If this
    value were set to, say `10`, then 10 additional blank formsets would appear. The
    default value is `3` and this is why we are going to override the default value
    in all of our classes to the value of `1`, providing a better user experience.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加到所有内联类的一个常见选项是`extra = 1`，这个值设置为`1`以仅显示一个额外的空白表单集，使用户能够在需要时动态添加对象。如果这个值被设置为，比如说`10`，那么将出现10个额外的空白表单集。默认值是`3`，这就是为什么我们将所有类的默认值覆盖为`1`，以提供更好的用户体验。
- en: For a complete breakdown of how to use these options and methods, visit [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-options](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-options).
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解如何使用这些选项和方法，请访问[https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-options](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-options)。
- en: Class – StackedInline
  id: totrans-388
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类 – StackedInline
- en: The `StackedInline` class is used to render inline formsets using the `/admin/edit_inline/stacked.html`
    template.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`StackedInline`类用于使用`/admin/edit_inline/stacked.html`模板渲染内联表单集。'
- en: 'To practice using this option on the `EngineAdmin` class, add the following
    class to the `/chapter_6/admin.py` file, preferably placing all inline formset
    classes at the top of this document:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 要在`EngineAdmin`类上练习使用此选项，请将以下类添加到`/chapter_6/admin.py`文件中，最好将所有内联表单集类放置在此文档的顶部：
- en: '[PRE181]'
  id: totrans-391
  prefs: []
  type: TYPE_PRE
  zh: '[PRE181]'
- en: '[PRE182]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE182]'
- en: '[PRE183]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE183]'
- en: '[PRE184]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE184]'
- en: '[PRE185]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE185]'
- en: '[PRE186]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE186]'
- en: '[PRE187]'
  id: totrans-397
  prefs: []
  type: TYPE_PRE
  zh: '[PRE187]'
- en: 'Next, add the following option to the `EngineAdmin` class, placed below all
    inline formset classes:'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将以下选项添加到`EngineAdmin`类中，放置在所有内联表单集类下方：
- en: '[PRE188]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE188]'
- en: '[PRE189]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE189]'
- en: '[PRE190]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE190]'
- en: '[PRE191]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE191]'
- en: '[PRE192]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE192]'
- en: 'Now, navigate to the change view page of any of the engine objects, such as
    `http://localhost:8000/admin/chapter_3/engine/1/change/`. We can see that each
    vehicle that uses that particular engine can be edited from the edit engine page,
    as shown in the following screenshot:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到任何发动机对象的变更视图页面，例如`http://localhost:8000/admin/chapter_3/engine/1/change/`。我们可以看到，使用该特定发动机的每辆车都可以从编辑发动机页面进行编辑，如下面的屏幕截图所示：
- en: '![Figure 6.9 – Django – inlines admin option – StackedInline'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.9 – Django – 内联管理选项 – 堆叠内联'
- en: '](img/Figure_6.09_B17243.jpg)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.09_B17243.jpg)'
- en: Figure 6.9 – Django – inlines admin option – StackedInline
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9 – Django – 内联管理选项 – 堆叠内联
- en: The `StackedInline` class will display each field stacked one on top of the
    other, vertically, as shown in the previous screenshot.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`StackedInline`类将垂直堆叠显示每个字段，如前面的屏幕截图所示。'
- en: Class – TabularInline
  id: totrans-409
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 类 – 表格内联
- en: 'The `TabularInline` class is written and implemented in the exact same way
    as the previous `StackedInline` example except that the `VehicleInline` class
    is used, as shown in the following example:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '`TabularInline`类是以与之前的`StackedInline`示例完全相同的方式编写的和实现的，除了使用`VehicleInline`类，如下例所示：'
- en: '[PRE193]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE193]'
- en: '[PRE194]'
  id: totrans-412
  prefs: []
  type: TYPE_PRE
  zh: '[PRE194]'
- en: '[PRE195]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE195]'
- en: '[PRE196]'
  id: totrans-414
  prefs: []
  type: TYPE_PRE
  zh: '[PRE196]'
- en: '[PRE197]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE197]'
- en: '[PRE198]'
  id: totrans-416
  prefs: []
  type: TYPE_PRE
  zh: '[PRE198]'
- en: '[PRE199]'
  id: totrans-417
  prefs: []
  type: TYPE_PRE
  zh: '[PRE199]'
- en: 'Now, refresh the same page, `http://localhost:8000/admin/chapter_3/engine/1/change/`,
    and when rendered to the page, the fields will now display horizontally in neatly
    organized columns, as shown in the following screenshot:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，刷新相同的页面，`http://localhost:8000/admin/chapter_3/engine/1/change/`，当渲染到页面上时，字段将现在以整齐排列的列水平显示，如下面的屏幕截图所示：
- en: '![Figure 6.10 – Django – inlines admin option – TabularInline'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.10 – Django – 内联管理选项 – 表格内联'
- en: '](img/Figure_6.10_B17243.jpg)'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.10_B17243.jpg)'
- en: Figure 6.10 – Django – inlines admin option – TabularInline
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10 – Django – 内联管理选项 – 表格内联
- en: ManyToMany field inlines
  id: totrans-422
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 多对多字段内联
- en: What would be the most useful and also make the most sense in the vehicle relations
    would be to link all of the vehicles that a seller is selling on the `Seller`
    change view page. If we write an inline class the same way we wrote an inline
    class for a `ForeignKey` field, now for a `ManyToMany` field relation, we would
    wind up getting an error. To prevent that error, write your inline class almost
    the same way that you implemented inline classes for related `ForeignKey` fields
    except now, you will add a `through` statement.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 在车辆关系中最有用且最有意义的方法是将卖家在`Seller`变更视图页面上出售的所有车辆链接起来。如果我们以与为`ForeignKey`字段编写内联类相同的方式编写内联类，现在为`ManyToMany`字段关系编写，我们最终会得到一个错误。为了防止这个错误，编写你的内联类几乎与实现相关`ForeignKey`字段的内联类相同，但现在，你将添加一个`through`语句。
- en: 'Create the following class, to be used on the `SellerAdmin` class, using either
    a `TabularInline` or `StackedInline` class as its constructor, and for the model,
    use the following `through` statement:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 创建以下类，用于`SellerAdmin`类，使用`TabularInline`或`StackedInline`类作为其构造函数，对于模型，使用以下`through`语句：
- en: '[PRE200]'
  id: totrans-425
  prefs: []
  type: TYPE_PRE
  zh: '[PRE200]'
- en: '[PRE201]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE201]'
- en: '[PRE202]'
  id: totrans-427
  prefs: []
  type: TYPE_PRE
  zh: '[PRE202]'
- en: '[PRE203]'
  id: totrans-428
  prefs: []
  type: TYPE_PRE
  zh: '[PRE203]'
- en: '[PRE204]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE204]'
- en: '[PRE205]'
  id: totrans-430
  prefs: []
  type: TYPE_PRE
  zh: '[PRE205]'
- en: '[PRE206]'
  id: totrans-431
  prefs: []
  type: TYPE_PRE
  zh: '[PRE206]'
- en: Here, we are naming this class the plural `VehiclesInline`, with an *s*, instead
    of the first class that we wrote, called `VehicleInline`, as the naming convention.
    We are doing this to indicate that one is related to a `ManyToMany` field and
    the other is not. This naming convention is not mandatory; your naming convention
    can be anything you would like it to be, but this is helpful. We are linking the
    `model` option directly to the `Seller` model by the `vehicles` field, which is
    the `ManyToMany` field, using the `through` attribute.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们把这个类命名为复数形式的`VehiclesInline`，带有一个*s*，而不是我们之前写的第一个类，叫做`VehicleInline`，按照命名约定。我们这样做是为了表明一个与`ManyToMany`字段相关，而另一个则不是。这个命名约定不是强制的；你的命名约定可以是任何你想要的，但这是有帮助的。我们通过`vehicles`字段直接将`model`选项链接到`Seller`模型，`vehicles`字段是`ManyToMany`字段，使用`through`属性。
- en: 'In the `SellerAdmin` class, add the following `inlines` option:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 在`SellerAdmin`类中，添加以下`inlines`选项：
- en: '[PRE207]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE207]'
- en: '[PRE208]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE208]'
- en: '[PRE209]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE209]'
- en: '[PRE210]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE210]'
- en: Now, navigate to the change view page for a seller at `http://localhost:8000/admin/chapter_3/seller/1/change/`,
    and we can see that the vehicles this seller is selling are now rendered the same
    as the previous inline formset exercises. One difference in using the `ManyToMany`
    fields is that they will render as related objects. They can be edited by clicking
    the pencil icon next to each item, where a pop-up window will appear, allowing
    the user to edit that item.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到 `http://localhost:8000/admin/chapter_3/seller/1/change/` 的卖家更改视图页面，我们可以看到这位卖家正在销售的车辆现在渲染得与之前的内联表单集练习相同。使用
    `ManyToMany` 字段的一个区别是，它们将渲染为相关对象。可以通过点击每个项目旁边的铅笔图标来编辑它们，此时将出现一个弹出窗口，允许用户编辑该项目。
- en: Tip
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Remove the `vehicles` field from the `fieldsets`, `filter_horizontal`, and `filter_vertical`
    options for best results when implementing the vehicle inline fieldset.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在实现车辆内联字段集时，为了获得最佳效果，请从 `fieldsets`、`filter_horizontal` 和 `filter_vertical`
    选项中移除 `vehicles` 字段。
- en: Option – radio_fields
  id: totrans-441
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – radio_fields
- en: The `radio_fields` option is used on `ForeignKey`, `OneToOne` fields, and any
    `CharField` that is using a list of choices. By default, Django will render these
    fields as a `<select>` HTML object, where the user can select a single option
    from a drop-down list of choices. By adding a field to the `radio_fields` option,
    Django will render the choices as a set of HTML radio buttons, where the user
    has all the choices visually presented to them when they view this page. For fields
    with dozens or even hundreds of choices, this might not be the best option and
    is the reason why Django will default to a `<select>` box.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`radio_fields` 选项用于 `ForeignKey`、`OneToOne` 字段以及任何使用选择列表的 `CharField`。默认情况下，Django
    将这些字段渲染为 `<select>` HTML 对象，用户可以从下拉列表中选择一个选项。通过将字段添加到 `radio_fields` 选项中，Django
    将选择渲染为一系列 HTML 单选按钮，当用户查看此页面时，所有选项都会以视觉方式呈现给他们。对于有数十个甚至数百个选项的字段，这可能不是最佳选项，这也是为什么
    Django 默认使用 `<select>` 框的原因。'
- en: 'Go ahead and add the `radio_fields` to the `VehicleAdmin` class, where we have
    two `ForeignKey` fields to play with. Apply this option to just one of those fields,
    the `engine` field, and leave the `vehicle_model` field as it is, just like in
    the following example. This way, when we view it on the page, we can see the differences
    between the two:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `radio_fields` 添加到 `VehicleAdmin` 类中，我们有两个 `ForeignKey` 字段可以操作。将此选项应用于其中一个字段，即
    `engine` 字段，而将 `vehicle_model` 字段保持不变，就像以下示例中那样。这样，当我们查看页面时，我们可以看到两种字段之间的区别：
- en: '[PRE211]'
  id: totrans-444
  prefs: []
  type: TYPE_PRE
  zh: '[PRE211]'
- en: '[PRE212]'
  id: totrans-445
  prefs: []
  type: TYPE_PRE
  zh: '[PRE212]'
- en: '[PRE213]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE213]'
- en: '[PRE214]'
  id: totrans-447
  prefs: []
  type: TYPE_PRE
  zh: '[PRE214]'
- en: '[PRE215]'
  id: totrans-448
  prefs: []
  type: TYPE_PRE
  zh: '[PRE215]'
- en: '[PRE216]'
  id: totrans-449
  prefs: []
  type: TYPE_PRE
  zh: '[PRE216]'
- en: '[PRE217]'
  id: totrans-450
  prefs: []
  type: TYPE_PRE
  zh: '[PRE217]'
- en: '[PRE218]'
  id: totrans-451
  prefs: []
  type: TYPE_PRE
  zh: '[PRE218]'
- en: In the previous example, each key in the `radio_fields` option relates to the
    name of the field that we are converting from a `<select>` to a radio button.
    The value of that key takes in one of two choices, `admin.VERTICAL` or `admin.HORIZONTAL`.
    This value is used to display the radio button choices either vertically or horizontally
    on the page.
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，`radio_fields` 选项中的每个键都与我们将从 `<select>` 转换为单选按钮的字段名称相关。该键的值接受两种选择之一，`admin.VERTICAL`
    或 `admin.HORIZONTAL`。此值用于在页面上垂直或水平显示单选按钮选项。
- en: 'Now, navigate to the change view page for any of the vehicles, such as `http://localhost:8000/admin/chapter_3/vehicle/1/change/`,
    and see how the `vehicle_model` and `engine` fields differ, as depicted in the
    following screenshot, with a select box and radio button choices:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到任何车辆的更改视图页面，例如 `http://localhost:8000/admin/chapter_3/vehicle/1/change/`，并查看
    `vehicle_model` 和 `engine` 字段如何不同，如下面的截图所示，有一个选择框和单选按钮选项：
- en: '![Figure 6.11 – Django – radio_fields admin option'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.11 – Django – radio_fields 管理选项'
- en: '](img/Figure_6.11_B17243.jpg)'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.11_B17243.jpg)'
- en: Figure 6.11 – Django – radio_fields admin option
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – Django – radio_fields 管理选项
- en: Option – save_on_top
  id: totrans-457
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – save_on_top
- en: The `save_on_top` option is used to display a set of action buttons at the top
    of the change or add view pages. This is not the same as the `actions_on_bottom`
    or `actions_on_top` options, which only relate to the changelist view page. By
    default, Django sets this value to `False`, showing only action buttons at the
    bottom of the page. Setting this value to `True` means the buttons will appear
    both at the top and at the bottom of those pages.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_on_top` 选项用于在更改或添加视图页面的顶部显示一组操作按钮。这与 `actions_on_bottom` 或 `actions_on_top`
    选项不同，后者仅与更改列表视图页面相关。默认情况下，Django 将此值设置为 `False`，只在页面底部显示操作按钮。将此值设置为 `True` 意味着按钮将出现在这些页面的顶部和底部。'
- en: 'For example, add the following option to the `SellerAdmin` class to show those
    buttons at the top and bottom of the change and add view pages:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，将以下选项添加到 `SellerAdmin` 类中，以在更改和添加视图页面的顶部和底部显示这些按钮：
- en: '[PRE219]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE219]'
- en: '[PRE220]'
  id: totrans-461
  prefs: []
  type: TYPE_PRE
  zh: '[PRE220]'
- en: '[PRE221]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE221]'
- en: '[PRE222]'
  id: totrans-463
  prefs: []
  type: TYPE_PRE
  zh: '[PRE222]'
- en: '[PRE223]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE223]'
- en: Now, navigate to any of the change or add view pages, such as `http://localhost:8000/admin/chapter_3/seller/1/change/`,
    and we will see the action buttons appear both at the top and the bottom of this
    page.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，导航到任何更改或添加视图页面，例如 `http://localhost:8000/admin/chapter_3/seller/1/change/`，我们将在页面顶部和底部看到操作按钮。
- en: Add view-related options
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加视图相关选项
- en: 'These options override the behavior of admin classes that only pertain to the
    add view and not the change view pages, such as those listed here:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 这些选项覆盖了仅与添加视图页面相关而不与更改视图页面相关的管理类行为，例如以下列出的：
- en: '`http://localhost:8000/admin/chapter_3/engine/add/`'
  id: totrans-468
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/engine/add/`'
- en: '`http://localhost:8000/admin/chapter_3/seller/add/`'
  id: totrans-469
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/seller/add/`'
- en: '`http://localhost:8000/admin/chapter_3/vehicle_model/add/`'
  id: totrans-470
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/vehicle_model/add/`'
- en: '`http://localhost:8000/admin/chapter_3/vehicle/add/`'
  id: totrans-471
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`http://localhost:8000/admin/chapter_3/vehicle/add/`'
- en: Option – add_fieldsets
  id: totrans-472
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – add_fieldsets
- en: The `add_fieldsets` option does exactly what the `fieldsets` option does except
    these are fields that relate only to the add/create view form rather than the
    change view form. For example, navigate to `http://localhost:8000/admin/chapter_3/seller/add/`
    and you'll see that the Django `UserAdmin` class that the `SellerAdmin` class
    is constructed from only provides three fields, and then the remaining fields
    appear after we have created a new `Seller` object.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`add_fieldsets` 选项与 `fieldsets` 选项执行的功能完全相同，但这些字段仅与添加/创建视图表单相关，而不是与更改视图表单相关。例如，导航到
    `http://localhost:8000/admin/chapter_3/seller/add/`，您将看到由 `SellerAdmin` 类构建的 Django
    `UserAdmin` 类仅提供三个字段，然后剩余的字段在我们创建新的 `Seller` 对象后出现。'
- en: 'If we wanted to provide the `first_name`, `last_name`, `name`, and `email`
    fields, we would modify the `add_fieldsets` variable of the `SellerAdmin` class
    to look like the following example:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要提供 `first_name`、`last_name`、`name` 和 `email` 字段，我们需要修改 `SellerAdmin` 类的
    `add_fieldsets` 变量，使其看起来像以下示例：
- en: '[PRE224]'
  id: totrans-475
  prefs: []
  type: TYPE_PRE
  zh: '[PRE224]'
- en: '[PRE225]'
  id: totrans-476
  prefs: []
  type: TYPE_PRE
  zh: '[PRE225]'
- en: '[PRE226]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE226]'
- en: '[PRE227]'
  id: totrans-478
  prefs: []
  type: TYPE_PRE
  zh: '[PRE227]'
- en: '[PRE228]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE228]'
- en: '[PRE229]'
  id: totrans-480
  prefs: []
  type: TYPE_PRE
  zh: '[PRE229]'
- en: '[PRE230]'
  id: totrans-481
  prefs: []
  type: TYPE_PRE
  zh: '[PRE230]'
- en: '[PRE231]'
  id: totrans-482
  prefs: []
  type: TYPE_PRE
  zh: '[PRE231]'
- en: '[PRE232]'
  id: totrans-483
  prefs: []
  type: TYPE_PRE
  zh: '[PRE232]'
- en: '[PRE233]'
  id: totrans-484
  prefs: []
  type: TYPE_PRE
  zh: '[PRE233]'
- en: '[PRE234]'
  id: totrans-485
  prefs: []
  type: TYPE_PRE
  zh: '[PRE234]'
- en: '[PRE235]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE235]'
- en: '[PRE236]'
  id: totrans-487
  prefs: []
  type: TYPE_PRE
  zh: '[PRE236]'
- en: '[PRE237]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE237]'
- en: '[PRE238]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE238]'
- en: '[PRE239]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE239]'
- en: '[PRE240]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE240]'
- en: '[PRE241]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE241]'
- en: '[PRE242]'
  id: totrans-493
  prefs: []
  type: TYPE_PRE
  zh: '[PRE242]'
- en: '[PRE243]'
  id: totrans-494
  prefs: []
  type: TYPE_PRE
  zh: '[PRE243]'
- en: In the preceding example, we see that writing and grouping fieldsets are written
    exactly the same as the `fieldsets` example was written earlier. Now, when we
    visit the same add `Seller` URL as before, `http://localhost:8000/admin/chapter_3/seller/add/`,
    we can see four additional fields, the four we included in the **Personal Info**
    fieldset previously.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们看到编写和分组字段集的写法与之前 `fieldsets` 示例的写法完全相同。现在，当我们访问之前相同的添加 `Seller` URL，即
    `http://localhost:8000/admin/chapter_3/seller/add/` 时，我们可以看到四个额外的字段，这四个字段是我们之前在
    **个人信息** 字段集中包含的。
- en: Option – prepopulated_fields
  id: totrans-496
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 选项 – prepopulated_fields
- en: The `prepopulated_fields` option tells a field(s) to listen for an event when
    the target field's value has changed and then updates those field values with
    the value of the target field. This is handy in situations where the user changes
    the value of a `title` field as the `slug` field will automatically populate with
    the same value. For example, in the `Seller` model, let's wire this up to listen
    for when the `first_name` and `last_name` fields change and then populate the
    `username` field value with a value derived from both of the `first_name` and
    `last_name` values.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`prepopulated_fields` 选项告诉一个字段（或多个字段）在目标字段的值发生变化时监听事件，然后使用目标字段的值更新这些字段值。这在用户更改
    `title` 字段值时很有用，因为 `slug` 字段将自动填充相同的值。例如，在 `Seller` 模型中，让我们将其连接起来以监听 `first_name`
    和 `last_name` 字段的变化，然后使用从 `first_name` 和 `last_name` 值派生的值填充 `username` 字段值。'
- en: 'For this example, apply the following option to the `SellerAdmin` class:'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个示例，将以下选项应用到 `SellerAdmin` 类：
- en: '[PRE244]'
  id: totrans-499
  prefs: []
  type: TYPE_PRE
  zh: '[PRE244]'
- en: '[PRE245]'
  id: totrans-500
  prefs: []
  type: TYPE_PRE
  zh: '[PRE245]'
- en: '[PRE246]'
  id: totrans-501
  prefs: []
  type: TYPE_PRE
  zh: '[PRE246]'
- en: '[PRE247]'
  id: totrans-502
  prefs: []
  type: TYPE_PRE
  zh: '[PRE247]'
- en: '[PRE248]'
  id: totrans-503
  prefs: []
  type: TYPE_PRE
  zh: '[PRE248]'
- en: '[PRE249]'
  id: totrans-504
  prefs: []
  type: TYPE_PRE
  zh: '[PRE249]'
- en: '[PRE250]'
  id: totrans-505
  prefs: []
  type: TYPE_PRE
  zh: '[PRE250]'
- en: In the preceding code, we can also apply additional fields just as we did with
    the `first_name` and `last_name` fields. Navigate to the add view page for the
    `Seller` model at `http://localhost:8000/admin/chapter_3/seller/add/` and begin
    typing within the `first_name` or `last_name` fields. You will see the `username`
    field auto-populate with the values that are typed. Spaces will be replaced with
    a dash and the value of the fields will display in the order in which they were
    written in the `prepopulated_fields` option. For example, `first_name` will appear
    before the `last_name` value based on how we wrote it previously.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们也可以像对 `first_name` 和 `last_name` 字段那样应用额外的字段。导航到 `Seller` 模型的添加视图页面
    `http://localhost:8000/admin/chapter_3/seller/add/` 并在 `first_name` 或 `last_name`
    字段中开始输入。您将看到 `username` 字段会自动填充输入的值。空格将被破折号替换，字段的值将按照它们在 `prepopulated_fields`
    选项中写入的顺序显示。例如，`first_name` 将根据我们之前如何编写它而出现在 `last_name` 值之前。
- en: Now that we have learned all about the different options and applied many of
    them to our admin classes, let's dive into the various admin class methods that
    we can use.
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了所有不同的选项，并将其中许多应用到我们的管理类中，让我们深入了解我们可以使用的各种管理类方法。
- en: Adding admin class methods
  id: totrans-508
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加管理类方法
- en: Admin class methods allow us to add or change the default behavior of a `ModelAdmin`
    or `UserAdmin` class. Any of the options available in an admin class can have
    its value dynamically calculated by writing a method. Those methods use the `get_`
    naming convention and then the name of the option, as in `get_ordering()` or `get_form()`.
    Django also provides many built-in methods that add extra actions when something
    happens, such as when an object is saved or deleted using the `save_model()` or
    `delete_model()` methods.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 管理类方法允许我们添加或更改`ModelAdmin`或`UserAdmin`类的默认行为。任何在管理类中可用的选项都可以通过编写一个方法来动态计算其值。这些方法使用`get_`命名约定，然后是选项的名称，例如`get_ordering()`或`get_form()`。Django还提供了许多内置方法，当发生某些事件时，如使用`save_model()`或`delete_model()`方法保存或删除对象时，会添加额外的操作。
- en: Next, we will explore just some of these methods and also provide a demonstration
    using a dynamic value, specifically for the `form` option. That will prepare us
    to use a separate form class later in this chapter.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探索其中的一些方法，并使用一个动态值提供演示，特别是针对`form`选项。这将为我们使用本章后面的单独表单类做准备。
- en: 'For a complete breakdown of how to use Django admin class methods, visit the
    official Django documentation here: [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-methods](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-methods).'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 要详细了解如何使用Django管理类方法，请访问官方Django文档：[https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-methods](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-methods)。
- en: Method – get_form()
  id: totrans-512
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 – `get_form()`
- en: The `get_form()` method is used to get the form class that will be used within
    an admin class. For example, in the following two exercises, one will check to
    see whether an object exists, then based on the result of that condition, we will
    serve one form class for the change view and another form class for the add view.
    In the other exercise, we will demonstrate showing one form for a superuser and
    another for a regular user.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_form()`方法用于获取在管理类内部使用的表单类。例如，在以下两个练习中，一个将检查对象是否存在，然后根据该条件的结果，我们将为更改视图提供一种表单类，为添加视图提供另一种表单类。在另一个练习中，我们将演示为超级用户显示一个表单，为普通用户显示另一个表单。'
- en: Note
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: We have not created the `EngineForm`, `EngineSuperUserForm`, or `AddEngineForm`
    classes yet. Go ahead and create these classes with at least the `pass` statement
    in the `/chapter_6/forms.py` file to allow pages other than the engine change
    and add view ones to load without errors. After completing these exercises, your
    engine change and add view pages will error out even with the `pass` statement
    included. Please wait to load/reload the engine change or add view pages until
    we have completed the section titled *Writing custom admin form classes* of this
    chapter, which will add the necessary components to prevent errors when loading
    those pages.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尚未创建`EngineForm`、`EngineSuperUserForm`或`AddEngineForm`类。请继续在`/chapter_6/forms.py`文件中创建这些类，至少包含`pass`语句，以允许除引擎更改和添加视图页面以外的页面加载时不会出错。完成这些练习后，即使包含`pass`语句，您的引擎更改和添加视图页面也会出错。请等待我们完成本章标题为“编写自定义管理表单类”的部分，这将添加必要的组件以防止加载这些页面时出错。
- en: Change/add view condition
  id: totrans-516
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 修改/添加视图条件
- en: 'In the `EngineAdmin` class, add the following `get_form()` method and remove
    or comment out the previous `form` option that we wrote earlier for this class,
    as depicted here:'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: 在`EngineAdmin`类中，添加以下`get_form()`方法，并删除或注释掉我们之前为该类编写的先前`form`选项，如图所示：
- en: '[PRE251]'
  id: totrans-518
  prefs: []
  type: TYPE_PRE
  zh: '[PRE251]'
- en: '[PRE252]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE252]'
- en: '[PRE253]'
  id: totrans-520
  prefs: []
  type: TYPE_PRE
  zh: '[PRE253]'
- en: '[PRE254]'
  id: totrans-521
  prefs: []
  type: TYPE_PRE
  zh: '[PRE254]'
- en: '[PRE255]'
  id: totrans-522
  prefs: []
  type: TYPE_PRE
  zh: '[PRE255]'
- en: '[PRE256]'
  id: totrans-523
  prefs: []
  type: TYPE_PRE
  zh: '[PRE256]'
- en: '[PRE257]'
  id: totrans-524
  prefs: []
  type: TYPE_PRE
  zh: '[PRE257]'
- en: '[PRE258]'
  id: totrans-525
  prefs: []
  type: TYPE_PRE
  zh: '[PRE258]'
- en: '[PRE259]'
  id: totrans-526
  prefs: []
  type: TYPE_PRE
  zh: '[PRE259]'
- en: '[PRE260]'
  id: totrans-527
  prefs: []
  type: TYPE_PRE
  zh: '[PRE260]'
- en: '[PRE261]'
  id: totrans-528
  prefs: []
  type: TYPE_PRE
  zh: '[PRE261]'
- en: '[PRE262]'
  id: totrans-529
  prefs: []
  type: TYPE_PRE
  zh: '[PRE262]'
- en: '[PRE263]'
  id: totrans-530
  prefs: []
  type: TYPE_PRE
  zh: '[PRE263]'
- en: As we can see in the preceding example, we replaced `form = EngineForm` with
    a method that performs a little bit of logic to serve up one of two different
    forms now. Using the pound symbol, we commented out the `form = EngineForm` line.
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: 如前例所示，我们用执行一点逻辑以提供两种不同表单之一的方法替换了`form = EngineForm`。使用井号符号，我们注释掉了`form = EngineForm`行。
- en: Superuser condition
  id: totrans-532
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 超级用户条件
- en: 'Another use of this method is serving up one form if a user has superuser status
    and another if they do not, using the conditional statement shown here:'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法的另一种用途是，如果用户具有超级用户状态，则提供一种表单，如果没有，则提供另一种表单，使用此处所示的条件语句：
- en: '[PRE264]'
  id: totrans-534
  prefs: []
  type: TYPE_PRE
  zh: '[PRE264]'
- en: '[PRE265]'
  id: totrans-535
  prefs: []
  type: TYPE_PRE
  zh: '[PRE265]'
- en: '[PRE266]'
  id: totrans-536
  prefs: []
  type: TYPE_PRE
  zh: '[PRE266]'
- en: '[PRE267]'
  id: totrans-537
  prefs: []
  type: TYPE_PRE
  zh: '[PRE267]'
- en: '[PRE268]'
  id: totrans-538
  prefs: []
  type: TYPE_PRE
  zh: '[PRE268]'
- en: '[PRE269]'
  id: totrans-539
  prefs: []
  type: TYPE_PRE
  zh: '[PRE269]'
- en: '[PRE270]'
  id: totrans-540
  prefs: []
  type: TYPE_PRE
  zh: '[PRE270]'
- en: '[PRE271]'
  id: totrans-541
  prefs: []
  type: TYPE_PRE
  zh: '[PRE271]'
- en: '[PRE272]'
  id: totrans-542
  prefs: []
  type: TYPE_PRE
  zh: '[PRE272]'
- en: '[PRE273]'
  id: totrans-543
  prefs: []
  type: TYPE_PRE
  zh: '[PRE273]'
- en: '[PRE274]'
  id: totrans-544
  prefs: []
  type: TYPE_PRE
  zh: '[PRE274]'
- en: '[PRE275]'
  id: totrans-545
  prefs: []
  type: TYPE_PRE
  zh: '[PRE275]'
- en: '[PRE276]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE276]'
- en: '[PRE277]'
  id: totrans-547
  prefs: []
  type: TYPE_PRE
  zh: '[PRE277]'
- en: The idea here is that we grant the superuser additional fields that a regular
    user cannot edit, such as permission rights and permission group settings.
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 这里的想法是赋予超级用户一些普通用户无法编辑的额外字段，例如权限权利和权限组设置。
- en: Note
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Even though we extended the Django `User` model as a seller, the currently logged-in
    seller will appear in the `request` dictionary as a `user` key, as in `request.user`
    shown in the previous code block.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管我们将 Django 的 `User` 模型扩展为卖家，但当前登录的卖家将作为 `user` 键出现在 `request` 字典中，就像前面代码块中显示的
    `request.user` 一样。
- en: Method – save_model()
  id: totrans-551
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 – save_model()
- en: 'The `save_model()` method is used to add actions before and/or after the object
    is saved in a change or add view. To add this method to the `EngineAdmin` class,
    include the code shown here:'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '`save_model()` 方法用于在对象在更改或添加视图中保存前后添加操作。要将此方法添加到 `EngineAdmin` 类中，请包含以下代码：'
- en: '[PRE278]'
  id: totrans-553
  prefs: []
  type: TYPE_PRE
  zh: '[PRE278]'
- en: '[PRE279]'
  id: totrans-554
  prefs: []
  type: TYPE_PRE
  zh: '[PRE279]'
- en: '[PRE280]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE280]'
- en: '[PRE281]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE281]'
- en: '[PRE282]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE282]'
- en: '[PRE283]'
  id: totrans-558
  prefs: []
  type: TYPE_PRE
  zh: '[PRE283]'
- en: '[PRE284]'
  id: totrans-559
  prefs: []
  type: TYPE_PRE
  zh: '[PRE284]'
- en: '[PRE285]'
  id: totrans-560
  prefs: []
  type: TYPE_PRE
  zh: '[PRE285]'
- en: '[PRE286]'
  id: totrans-561
  prefs: []
  type: TYPE_PRE
  zh: '[PRE286]'
- en: Here, we create the `save_model()` method with five positional arguments, those
    being `self`, `request`, `obj`, `form`, and `change`, in that order. These five
    arguments make relevant data available to use when writing logic within that method.
    The `change` argument has a value of either `True` or `False`. If the object being
    saved is from the add view page, the `change` value will be `False`; if the object
    is on the change view page, the `change` value will be `True`. The `super().save_model(request,
    obj, form, change)` line is what actually saves the object and this is the same
    as using a `Model.save()` operation. Actions above this line will take place before
    the object is saved. Actions written after this line take place after the object
    has been saved, actions such as sending an email or triggering a notification
    alert.
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们创建了一个具有五个位置参数的 `save_model()` 方法，这些参数依次是 `self`、`request`、`obj`、`form`
    和 `change`。这五个参数使得在方法内部编写逻辑时可以使用相关数据。`change` 参数的值为 `True` 或 `False`。如果正在保存的对象来自添加视图页面，则
    `change` 值将为 `False`；如果对象在更改视图页面上，则 `change` 值将为 `True`。`super().save_model(request,
    obj, form, change)` 行实际上是保存对象的方式，这与使用 `Model.save()` 操作相同。此行以上的操作将在对象保存之前执行。此行之后的操作将在对象保存之后执行，例如发送电子邮件或触发通知警报。
- en: Tip
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: Using the `__dict__` property within the `print` statement shown previously
    will display a dictionary of keys and values available within that `obj`.
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面显示的 `print` 语句中使用 `__dict__` 属性将显示 `obj` 中可用的键和值的字典。
- en: Method – delete_model()
  id: totrans-565
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 方法 – delete_model()
- en: 'The `delete_model()` method is used just like the `save_model()` method except
    for when an object is deleted and not saved. In the same `EngineAdmin` class,
    add the method shown here:'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '`delete_model()` 方法的使用方式与 `save_model()` 方法类似，只是在对象被删除而不是保存时使用。在相同的 `EngineAdmin`
    类中，添加以下方法：'
- en: '[PRE287]'
  id: totrans-567
  prefs: []
  type: TYPE_PRE
  zh: '[PRE287]'
- en: '[PRE288]'
  id: totrans-568
  prefs: []
  type: TYPE_PRE
  zh: '[PRE288]'
- en: '[PRE289]'
  id: totrans-569
  prefs: []
  type: TYPE_PRE
  zh: '[PRE289]'
- en: '[PRE290]'
  id: totrans-570
  prefs: []
  type: TYPE_PRE
  zh: '[PRE290]'
- en: '[PRE291]'
  id: totrans-571
  prefs: []
  type: TYPE_PRE
  zh: '[PRE291]'
- en: '[PRE292]'
  id: totrans-572
  prefs: []
  type: TYPE_PRE
  zh: '[PRE292]'
- en: '[PRE293]'
  id: totrans-573
  prefs: []
  type: TYPE_PRE
  zh: '[PRE293]'
- en: '[PRE294]'
  id: totrans-574
  prefs: []
  type: TYPE_PRE
  zh: '[PRE294]'
- en: '[PRE295]'
  id: totrans-575
  prefs: []
  type: TYPE_PRE
  zh: '[PRE295]'
- en: Next, we will create and modify the custom admin form classes that we spoke
    about earlier in this chapter, in the subsection titled *Method – get_form()*.
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建和修改本章前面提到的自定义管理表单类，在标题为 *方法 – get_form()* 的子节中进行。
- en: Writing custom admin form classes
  id: totrans-577
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自定义管理表单类
- en: Admin forms can be created and used just like the standard form classes we discussed
    in [*Chapter 5*](B17243_05_ePub.xhtml#_idTextAnchor152), *Django Forms*. For admin
    form classes, we need to use the Django `ModelForm` class instead of the standard
    `Form` class found in the `django.forms` library, because the fields in these
    forms will link to model classes. Refer to the examples found in [*Chapter 5*](B17243_05_ePub.xhtml#_idTextAnchor152),
    *Django Forms*, to learn more about how to customize and change your form class
    behavior, for either a `Form` or `ModelForm` class. Here, we will demonstrate
    just initializing your admin forms and enabling all fields that exist, to allow
    any of the engine change and add view pages to load without the errors mentioned
    earlier.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: 管理表单可以像我们在 [*第五章*](B17243_05_ePub.xhtml#_idTextAnchor152) 中讨论的标准表单类一样创建和使用，*Django
    表单*。对于管理表单类，我们需要使用 Django 的 `ModelForm` 类而不是 `django.forms` 库中的标准 `Form` 类，因为这些表单中的字段将链接到模型类。请参阅
    [*第五章*](B17243_05_ePub.xhtml#_idTextAnchor152) 中的示例，*Django 表单*，以了解更多关于如何自定义和更改表单类行为的信息，无论是
    `Form` 还是 `ModelForm` 类。在这里，我们将演示仅初始化您的管理表单并启用所有现有字段，以便允许任何引擎更改和添加视图页面加载时不会出现前面提到的错误。
- en: Initializing an admin form
  id: totrans-579
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化管理表单
- en: 'If you have not already done so, in the `chapter_6` app folder, create a file
    called `forms.py`. We need to create the three different form classes used in
    the previous examples of this chapter and call them `EngineForm`, `AddEngineForm`,
    and `EngineSuperUserForm`. Create them using the example provided here, except
    change the name `EngineForm` to the name of the class that you are writing and
    change the related model class for all three of the classes as well:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您还没有这样做，在`chapter_6`应用文件夹中，创建一个名为`forms.py`的文件。我们需要创建本章前面示例中使用的三个不同的表单类，并将它们命名为`EngineForm`、`AddEngineForm`和`EngineSuperUserForm`。使用此处提供的示例创建它们，但将`EngineForm`的名称更改为您正在编写的类的名称，并将所有三个类的相关模型类也相应更改：
- en: '[PRE296]'
  id: totrans-581
  prefs: []
  type: TYPE_PRE
  zh: '[PRE296]'
- en: '[PRE297]'
  id: totrans-582
  prefs: []
  type: TYPE_PRE
  zh: '[PRE297]'
- en: '[PRE298]'
  id: totrans-583
  prefs: []
  type: TYPE_PRE
  zh: '[PRE298]'
- en: '[PRE299]'
  id: totrans-584
  prefs: []
  type: TYPE_PRE
  zh: '[PRE299]'
- en: '[PRE300]'
  id: totrans-585
  prefs: []
  type: TYPE_PRE
  zh: '[PRE300]'
- en: '[PRE301]'
  id: totrans-586
  prefs: []
  type: TYPE_PRE
  zh: '[PRE301]'
- en: '[PRE302]'
  id: totrans-587
  prefs: []
  type: TYPE_PRE
  zh: '[PRE302]'
- en: '[PRE303]'
  id: totrans-588
  prefs: []
  type: TYPE_PRE
  zh: '[PRE303]'
- en: '[PRE304]'
  id: totrans-589
  prefs: []
  type: TYPE_PRE
  zh: '[PRE304]'
- en: '[PRE305]'
  id: totrans-590
  prefs: []
  type: TYPE_PRE
  zh: '[PRE305]'
- en: '[PRE306]'
  id: totrans-591
  prefs: []
  type: TYPE_PRE
  zh: '[PRE306]'
- en: '[PRE307]'
  id: totrans-592
  prefs: []
  type: TYPE_PRE
  zh: '[PRE307]'
- en: '[PRE308]'
  id: totrans-593
  prefs: []
  type: TYPE_PRE
  zh: '[PRE308]'
- en: The least amount of code that is needed for a `ModelForm` class to work within
    admin classes can be achieved by providing the `__init__` method, initializing
    the form. In addition, we will need the `Meta` subclass with the `model` and `fields`
    options. On all three of these classes (`EngineForm`, `AddEngineForm`, and `EngineSuperUserForm`),
    give the `model` option a value of `Engine`, linking them all to the `Engine`
    model. For the `fields` option, provide a value of `'__all__'` to let Django create
    the fields for you based on the fields that have been written in the `Engine`
    model class. Unlike the admin classes that we wrote, we actually have to tell
    Django to use all or some fields in this class.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: 要在admin类中使`ModelForm`类工作所需的最少代码量可以通过提供`__init__`方法，初始化表单来实现。此外，我们还需要带有`model`和`fields`选项的`Meta`子类。在这三个类（`EngineForm`、`AddEngineForm`和`EngineSuperUserForm`）中，将`model`选项的值设置为`Engine`，将它们全部链接到`Engine`模型。对于`fields`选项，提供值为`'__all__'`，让Django根据在`Engine`模型类中编写的字段为您创建字段。与我们所编写的admin类不同，我们实际上必须告诉Django在这个类中使用所有或某些字段。
- en: You are welcome to adjust the fields and/or add other options in order to customize
    the look and feel of each of these forms, allowing us to see how they differ from
    one another when they are rendered. Alternatively, you can use `print` statements
    in each form's `__init__` method, as was done previously, to let you know that
    the logic is working properly. If you visit any of the engine change or add view
    pages with the options provided in the *Configuring admin class options* section
    of this chapter, the page should now load without errors.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以调整字段和/或添加其他选项，以自定义这些表单的外观和感觉，这样我们就可以看到它们在渲染时彼此之间的差异。或者，您可以在每个表单的`__init__`方法中使用`print`语句，就像之前所做的那样，以告知您逻辑正在正常工作。如果您访问了本章“配置admin类选项”部分提供的选项的任何引擎更改或添加视图页面，页面现在应该能够无错误地加载。
- en: 'The engine change and add pages are listed here:'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: 引擎更改和添加页面如下所示：
- en: Engine add view – `http://localhost:8000/admin/chapter_3/engine/add/`
  id: totrans-597
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引擎添加视图 – `http://localhost:8000/admin/chapter_3/engine/add/`
- en: Engine change view – `http://localhost:8000/admin/chapter_3/engine/1/change/`
  id: totrans-598
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 引擎更改视图 – `http://localhost:8000/admin/chapter_3/engine/1/change/`
- en: Next, let's discuss configuring user permissions within the Django admin site.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论在Django管理站点中配置用户权限。
- en: Using the Django authentication system
  id: totrans-600
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Django认证系统
- en: Django provides a very powerful authentication system to grant permission rights
    to users. By default, a superuser has the authority to do everything, which is
    why we had to create at least one superuser in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. That superuser is needed at all times within the Django
    system to maintain control of your site and your data. The superuser granted us
    the ability to take control of our system and establish user roles and groups
    for every other user in the system. Creating a user and superuser can be done
    via the command line using a Django management command or through the IDE, just
    like when we explored those subjects in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. It can also be done through the Django shell, as we did
    in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations, and
    Inheritance*, when we created and saved models using the Django shell. `user`
    and `Seller` are just other model objects that we create and save. Now that we
    have access to the Django admin site, we can also add users, or in our case, sellers,
    and edit their permissions using this interface.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: Django 提供了一个非常强大的认证系统，用于授予用户权限。默认情况下，超级用户拥有做任何事的权限，这就是为什么我们不得不在 [*第 2 章*](B17243_02_ePub.xhtml#_idTextAnchor037)
    中创建至少一个超级用户，*项目配置*。这个超级用户在 Django 系统中的任何时候都是必需的，以维护对您的站点和数据的控制。超级用户授予了我们控制我们系统的能力，并为系统中的每个其他用户建立用户角色和组。创建用户和超级用户可以通过命令行使用
    Django 管理命令或通过 IDE 完成，就像我们在 [*第 2 章*](B17243_02_ePub.xhtml#_idTextAnchor037) 中探索这些主题时一样，*项目配置*。也可以通过
    Django shell 完成，就像我们在 [*第 3 章*](B17243_03_ePub.xhtml#_idTextAnchor077) 中创建和保存模型时一样，*模型、关系和继承*。`user`
    和 `Seller` 只是其他我们创建和保存的模型对象。现在我们有了访问 Django 管理站点的权限，我们也可以通过此界面添加用户，或者在我们的情况下，添加卖家，并编辑他们的权限。
- en: Next, let's add a regular user to the system so that we can have at least one
    regular user and one superuser to compare and contrast their roles.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们向系统中添加一个普通用户，以便我们可以至少有一个普通用户和一个超级用户来比较和对比他们的角色。
- en: Adding a seller
  id: totrans-603
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加卖家
- en: 'Here, we will activate the Django shell, import the `Seller` model from the
    `chapter_3` app, and then proceed to create the new `Seller` object, which is
    a standard user:'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们将激活 Django shell，从 `chapter_3` 应用程序导入 `Seller` 模型，然后继续创建新的 `Seller` 对象，这是一个标准用户：
- en: 'Activate the Django shell in any terminal or command-line window, just as we
    did in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations,
    and Inheritance*. Once activated, import the `Seller` object, as shown:'
  id: totrans-605
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在任何终端或命令行窗口中激活 Django shell，就像我们在 [*第 3 章*](B17243_03_ePub.xhtml#_idTextAnchor077)
    中做的那样，*模型、关系和继承*。一旦激活，导入 `Seller` 对象，如下所示：
- en: '[PRE309]'
  id: totrans-606
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE309]'
- en: Django includes, in the `User` model, a `create_user()` method, used for easily
    creating a new user that does not have superuser rights. This method does the
    heavy lifting of encrypting the password for us, so all we have to do is provide
    the unencrypted password as a string.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: Django 在 `User` 模型中包含了 `create_user()` 方法，用于轻松创建一个没有超级用户权限的新用户。此方法为我们完成了加密密码的重任，所以我们只需提供未加密的密码字符串即可。
- en: 'Since we extended the Django `User` model into a `Seller` in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, we will have to use the `create_user()`
    method on the `Seller` model, as is shown in the following code. Execute the following
    command, remembering the password that you used as you will need it to log into
    the Django admin site with that user:'
  id: totrans-608
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们在 [*第 3 章*](B17243_03_ePub.xhtml#_idTextAnchor077) 中将 Django `User` 模型扩展为
    `Seller`，*模型、关系和继承*，因此我们必须在 `Seller` 模型上使用 `create_user()` 方法，如下所示代码所示。执行以下命令，记住你使用的密码，因为你将需要使用该用户登录
    Django 管理站点：
- en: '[PRE310]'
  id: totrans-609
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE310]'
- en: 'Now, exit the Django shell by executing the `exit()` command and run the project
    again by executing the `runserver` command, as shown:'
  id: totrans-610
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在退出 Django shell，执行 `exit()` 命令，然后再次运行项目，如下所示：
- en: '[PRE311]'
  id: totrans-611
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE311]'
- en: 'Now, visit the `Seller` changelist view page here: http://localhost:8000/admin/chapter_3/seller/.
    You should see at least two results, as shown in the following screenshot:'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，访问 `Seller` 更改列表视图页面：http://localhost:8000/admin/chapter_3/seller/。你应该看到至少两个结果，如下面的截图所示：
- en: '![Figure 6.12 – Django – Seller''s changelist view'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.12 – Django – 卖家的更改列表视图'
- en: '](img/Figure_6.12_B17243.jpg)'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 6.12 – Django – 卖家的更改列表视图'
- en: Figure 6.12 – Django – Seller's changelist view
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – Django – 卖家的更改列表视图
- en: As is depicted in the preceding screenshot, one result has a superuser status
    and the other, the one that we just created, does not. The `is_staff` value is
    set to `False` when using the `create_user()` method. This is why we had to explicitly
    set it to `True` in the preceding code example.
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一张截图所示，一个结果具有超级用户状态，而另一个，即我们刚刚创建的，则没有。使用`create_user()`方法时，`is_staff`值被设置为`False`。这就是为什么我们不得不在前面的代码示例中显式地将它设置为`True`。
- en: 'Now, log out of the admin site and then log back in, with the username as `test`
    and password as `testpassword`, and you should now see a message on your dashboard
    indicating that you do not have permission to view anything yet, as shown in the
    following screenshot:'
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从管理站点登出，然后以用户名`test`和密码`testpassword`重新登录，您现在应该在仪表板上看到一条消息，表明您还没有权限查看任何内容，如下面的截图所示：
- en: '![Figure 6.13 – Django – admin site test for Seller'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.13 – Django – 卖家管理站点测试'
- en: '](img/Figure_6.13_B17243.jpg)'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.13_B17243.jpg)'
- en: Figure 6.13 – Django – admin site test for Seller
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – Django – 卖家管理站点测试
- en: This is expected behavior because we have not granted this user any permissions
    yet. Next, let's grant this user some permissions.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 这是预期行为，因为我们还没有授予这个用户任何权限。接下来，让我们授予这个用户一些权限。
- en: Granting permissions
  id: totrans-622
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 授予权限
- en: To grant users permissions, we will be using the admin interface this time.
    Log out again and then log back in with the `admin` user or whatever name you
    may have given your superuser. Navigate to the change view of your `test` user
    at `http://localhost:8000/admin/chapter_3/seller/2/change/`, which should be ID
    number `2`, unless you created more users on your own, then find the change view
    of the user ID that you are currently working with.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: 为了授予用户权限，我们这次将使用管理界面。再次登出，然后以`admin`用户或您可能为超级用户提供的任何名称重新登录。导航到您的`test`用户的更改视图，网址为`http://localhost:8000/admin/chapter_3/seller/2/change/`，应该是ID号`2`，除非您自己创建了更多用户，那么找到您当前正在工作的用户ID的更改视图。
- en: 'On this page, grant the `test` user the ability to change everything in the
    `chapter_3` app and leave everything else unselected, as shown:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个页面上，授予`test`用户更改`chapter_3`应用中所有内容的权限，并保留其他所有内容未选中，如下所示：
- en: '![Figure 6.14 – Django – user permissions'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.14 – Django – 用户权限'
- en: '](img/Figure_6.14_B17243.jpg)'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.14_B17243.jpg)'
- en: Figure 6.14 – Django – user permissions
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – Django – 用户权限
- en: 'Using the `chapter_3` to show only the relevant permissions for this task.
    Don''t forget to save this user before proceeding. Log out and then log back in
    again, this time with the `test` user credentials. Now, we should see the models
    related to our vehicles, as depicted in the following screenshot:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`chapter_3`来仅显示与此任务相关的权限。不要忘记在继续之前保存此用户。登出并再次登录，这次使用`test`用户凭据。现在，我们应该看到与我们的车辆相关的模型，如下面的截图所示：
- en: '![Figure 6.15 – Django – admin site test for Seller 2'
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
  zh: '![图6.15 – Django – 卖家管理站点测试2'
- en: '](img/Figure_6.15_B17243.jpg)'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_6.15_B17243.jpg)'
- en: Figure 6.15 – Django – admin site test for Seller 2
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – Django – 卖家管理站点测试2
- en: Permissions can be granted on a per-group basis instead of navigating to each
    user and granting permissions one at a time.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 可以基于每个组授予权限，而不是逐个用户地授予权限。
- en: Note
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `Sellers` object is now available to the `test` user. Navigating to the
    change view of any of the `Sellers` that exists while logged in as a standard
    user will show the permissions fields. To prevent this from happening, you can
    either limit only superusers to view and edit the `Seller` model objects or follow
    the steps depicted in the *Method – get_form()* subsection of this chapter to
    then add your own logic to the `SellerAdmin` class. That will only show the permission-related
    fields to superusers.
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 现在`Sellers`对象对`test`用户可用。以标准用户身份登录时，导航到任何存在的`Sellers`的更改视图将显示权限字段。为了防止这种情况发生，您可以选择仅允许超级用户查看和编辑`Seller`模型对象，或者遵循本章中*方法
    – get_form()*子节中描述的步骤，然后向`SellerAdmin`类添加自己的逻辑。这将只向超级用户显示与权限相关的字段。
- en: Permission groups
  id: totrans-635
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 权限组
- en: Permission groups are a way to add or remove users to or from a group by defining
    a set of permissions. A system with thousands of users would prove tedious to
    manage, not to mention how many inconsistencies it could result in, as we factor
    in human error.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 权限组是一种通过定义一组权限来添加或从组中删除用户的方法。拥有数千个用户的管理系统将变得繁琐，更不用说它可能导致多少不一致性，因为我们考虑到了人为错误。
- en: 'Now, make sure you are logged out of the `test` user account, then log back
    in with the `admin` user account and navigate to the group add view page here:
    `http://localhost:8000/admin/auth/group/add/`. Then, create a new group called
    `test_group` and grant the same permissions to this group that were given to the
    `test` user in the previous exercise. Next, go back to the change view page of
    that `test` user, remove all the user permissions from before, and assign them
    to the `test_group` group instead. This `test` user will be given the same permissions
    as before. With this, you can create as many groups as you would like, assign
    users to each group as you desire, and customize rights to the needs of your project.
    Additional permissions can be given to users on an ad hoc basis by assigning them
    to a group and then giving them extra user-based permissions in addition to that
    group assignment.'
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，请确保你已从`test`用户账户注销，然后使用`admin`用户账户重新登录，并在此导航到组添加视图页面：`http://localhost:8000/admin/auth/group/add/`。然后，创建一个名为`test_group`的新组，并将之前在练习中分配给`test`用户的相同权限授予这个组。接下来，返回到那个`test`用户的修改视图页面，移除之前的所有用户权限，并将它们分配给`test_group`组。这个`test`用户将获得与之前相同的权限。有了这个，你可以创建你想要的任何数量的组，根据你的需求将用户分配到每个组，并定制项目的权限。可以通过将用户分配到组并授予额外的基于用户的权限来临时性地给用户分配额外的权限，这组分配之外。
- en: Summary
  id: totrans-638
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We activated and customized the Django admin site for a project, otherwise known
    as the admin panel. This powerful tool helps us to get up and running with search,
    filter, sort, create, edit, and delete capabilities for all of the models that
    we choose to register on this site. With the concepts provided in this chapter,
    you should be able to make your admin panel a very useful tool that your users
    will enjoy.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为项目激活并定制了Django管理站点，也称为管理面板。这个强大的工具帮助我们在这个网站上注册的所有模型上实现搜索、筛选、排序、创建、编辑和删除功能。根据本章提供的概念，你应该能够使你的管理面板成为一个非常有用的工具，你的用户会喜欢使用。
- en: With the authentication system that Django provides, many different types of
    users can all access and use the same site but have very different roles and uses.
    Each type of user could even be given entirely different templates and flows if
    we venture down the road of extending templates or building onto that templating
    system using the concepts provided in previous chapters.
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Django提供的认证系统，许多不同类型的用户都可以访问和使用同一个网站，但他们的角色和用途却非常不同。如果我们选择扩展模板或使用前几章中提供的概念构建模板系统，每种类型的用户甚至可以分配完全不同的模板和流程。
- en: In the next chapter, we will discuss sending emails, creating custom email templates,
    as well as creating PDF reports using the Django template language.
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将讨论发送电子邮件、创建自定义电子邮件模板，以及使用Django模板语言创建PDF报告。
