- en: '*Chapter 6*: Exploring the Django Admin Site'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter will introduce the Django admin site, which is a feature allowing
    developers to register certain models into a model-centric interface where only
    permitted users can manage database content. This feature is designed to read
    the metadata related to models as well as the fields and field constraints set
    on those models to build a set of pages that search, sort, filter, create, edit,
    and delete records found in those tables.
  prefs: []
  type: TYPE_NORMAL
- en: The admin site is an optional feature of the Django framework that can be used
    in projects. It allows us to use user-based roles and permission settings that
    are built into the Django framework, allowing only permitted users to edit, add,
    or delete objects. User roles can be modified to only grant permission to edit
    certain models and can even be set to a granular level, such as only letting a
    user edit or view data but not add or delete data. This feature can be deactivated
    if it is not desired or needed in a project.
  prefs: []
  type: TYPE_NORMAL
- en: Models that are not specifically registered in the Django admin site will not
    be accessible via that interface, giving developers the option to create tables
    that store data that no users at all can control. By the end of this chapter,
    we will have registered the models that we created in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*. Those models will serve as the foundation
    for most of the exercises provided throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Django admin site
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring `admin` class options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding `admin` class methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing custom `admin form classes`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Django authentication system
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To work with the code in this chapter, the following tools will need to be
    installed on your local machine:'
  prefs: []
  type: TYPE_NORMAL
- en: Python version 3.9 – used as the underlying programming language for the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django version 4.0 – used as the backend framework of the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: pip package manager – used to manage third-party Python/Django packages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will continue to work with the solution created in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. However, it is not necessary to use the Visual Studio
    IDE. The main project itself can be run using another IDE or run independently
    using a terminal or command-line window from within the project root folder, which
    is where the `manage.py` file resides. Whatever editor or IDE you are using, a
    virtual environment will also be needed to work with the Django project. Instructions
    for how to create a project and virtual environment can be found in [*Chapter
    2*](B17243_02_ePub.xhtml#_idTextAnchor037), *Project Configuration*. You will
    need a database to store the data contained in your project. PostgreSQL was chosen
    for the examples in the previous chapter; however, any database type that you
    chose for your project can be used to work with the examples in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will also be using data that is in the form of a Django fixture, provided
    previously in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations,
    and Inheritance*, in the sub-section titled *Loading the chapter_3 data fixture*.
    Make sure the `chapter_3` fixture is loaded into your database. If this has already
    been done, then you may skip the next command. If you have already created the
    tables found in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models,
    Relations, and Inheritance*, and have not loaded that fixture yet, then run the
    following command, after activating your virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: All of the code created in this chapter can be found in the GitHub repository
    for this book at [https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer](https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer).
    The bulk of the code depicted in this chapter can be found in the `/becoming_a_django_entdev/becoming_a_django_entdev/chapter_6/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3ODUaAW](https://bit.ly/3ODUaAW).'
  prefs: []
  type: TYPE_NORMAL
- en: Preparing for this chapter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by creating a new app in your project called `chapter_6` by following
    the steps discussed in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037), *Project
    Configuration*, in the subsection titled *Creating a Django app*. As discussed
    in that section, don't forget to change the value of your `name =` variable for
    your app class found in the `/becoming_a_django_entdev/becoming_a_django_entdev/chapter_6/apps.py`
    file to now point to the path where you installed your app. Be sure to also include
    this app in your `INSTALLED_APPS` variable found in the `settings.py` file as
    well.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the main `urls.py` file of the site, add the following path, which points
    to the URL patterns of this chapter that we will be creating:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have created the app for this chapter, let's begin using the Django
    admin site to manage the models created in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Django admin site
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django makes it easy to use the admin site right out of the box. In order to
    use this feature, we need to add an app to the `settings.py` file and register
    a URL pattern to handle any project's admin links. By default, these settings
    should already exist in the code when a project is created using the `startproject`
    command or by using the IDE. However, some tools and versions may generate code
    slightly differently and so it is always good to just double-check that these
    settings are configured in this way.
  prefs: []
  type: TYPE_NORMAL
- en: Activating the Django admin site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To make sure the Django admin site is activated in your project, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the main `settings.py` file, add the following app to the `INSTALLED_APPS`
    variable and make sure this is at the top of the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the `/chapter_6/urls.py` file does not exist yet, create that file and include
    the following URL pattern:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To deactivate the Django admin site, remove the settings described in this section.
    Template and static files related to the Django admin site can also be overridden
    to create your own look and feel. You are not restricted to the user interface
    that is provided right out of the box. Due to the limited space in this book,
    we will not demonstrate how to override Django admin site templates; however,
    you can refer to [*Chapter 4*](B17243_04_ePub.xhtml#_idTextAnchor116), *URLs,
    Views, and Templates*, to learn more about overriding third-party templates.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Because Django is designed to do all of the heavy lifting, this is the only
    URL pattern that we need to create in order to activate all URL patterns related
    to the Django admin site.
  prefs: []
  type: TYPE_NORMAL
- en: Logging into the Django admin site
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Django admin site should now be active and if we navigate to the URL `http://localhost:8000/admin/`,
    we should see the standard Django admin login screen, as depicted in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Django admin site login'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.01_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Django admin site login
  prefs: []
  type: TYPE_NORMAL
- en: 'Use the username and password that were provided when the `createsuperuser`
    command was executed in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. You can log in with those superuser credentials or, if
    you wish to use the superuser provided with the `chapter_3` data fixture, then
    use the following credentials instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '`admin`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mynewpassword`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Once you are logged in, you should see two main sections, titled **AUTHENTICATION
    AND AUTHORIZATION** and **CHAPTER_3**, and to the right, a **Recent actions**
    side-nav section is displayed on your dashboard, as depicted in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Django admin site dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.02_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Django admin site dashboard
  prefs: []
  type: TYPE_NORMAL
- en: If you installed the `django-address` package in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, you will see an additional `address` app
    in the `INSTALLED_APPS` variable of the `settings.py` file, then that section
    would not appear within the admin dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: The **Recent actions** panel shows us information that tracks when a user created,
    changed, or deleted a particular object that is registered in the admin site when
    any of those actions is performed.
  prefs: []
  type: TYPE_NORMAL
- en: In the section titled `User` model in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, using the `AUTH_USER_MODEL` variable in
    the `settings.py` file to point to the custom `Seller` class that we created,
    we will have to register the `Seller` model in the admin site in order for it
    to appear.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's register that `Seller` model to get it to appear on the dashboard.
  prefs: []
  type: TYPE_NORMAL
- en: Writing admin classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we will discuss writing a standard `ModelAdmin` class found in the `django.contrib.admin`
    library. We will also provide an example using the `UserAdmin` class, because
    we extended the `User` model in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*.
  prefs: []
  type: TYPE_NORMAL
- en: Class – ModelAdmin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`ModelAdmin` is the class provided by Django that does all the heavy lifting
    for us, in regard to models that are not user based. Before a model can be registered,
    an admin class using the `ModelAdmin` class will need to be created in order to
    link a model to the admin interface.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `/chapter_6/admin.py` file, include the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `SellerAdmin` class is constructed using the Django
    `contrib` class called `ModelAdmin`. Django makes it easy for us by doing a lot
    of the heavy lifting. Django will automatically configure everything that we do
    not specify in this class, such as the options we will discuss soon in this chapter.
    This means if we include the `pass` statement in this class, we will not have
    to write anything else and Django will create the admin site for that model based
    on default parameters. Go ahead and write this class another three times for the
    remaining vehicle model objects, including the `pass` statement for each class
    as you write them. Name these classes `VehicleAdmin`, `VehicleModelAdmin`, and
    `EngineAdmin`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Each of the class names ends with the word `Admin`. Follow the naming convention
    of `ModelNameAdmin` when naming future admin classes of your own.
  prefs: []
  type: TYPE_NORMAL
- en: Class – UserAdmin
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`UserAdmin` is a special class provided by Django that lets us link a user-based
    model to the admin interface. The `UserAdmin` class is an extension of the `ModelAdmin`
    class. Next, we will create the `SellerAdmin` class, which will import all of
    the functionality available in the Django `UserAdmin` class. We will write the
    admin class the exact same way as we did in the previous exercise with the `pass`
    statement. All of the other vehicle-related admin classes will continue to use
    the standard `ModelAdmin` class.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code shows us how the `SellerAdmin` class should look now:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have written the admin classes, let's register them next.
  prefs: []
  type: TYPE_NORMAL
- en: Registering models
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to write a register statement that will link an admin class to its
    corresponding model and automatically create the URL patterns that will pertain
    to that model. There are two ways to do this and they both do the exact same thing:'
  prefs: []
  type: TYPE_NORMAL
- en: The first is with a single statement that is written at the bottom of the document,
    placed right after any admin classes that have been written.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second is to wrap each admin class in a register decorator function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both will be demonstrated in the following examples but choose only the one
    that you like the most. Implementing both at the same time may cause errors.
  prefs: []
  type: TYPE_NORMAL
- en: Using a statement
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a statement is easy; first we write the admin classes and then, at the
    bottom of the same `admin.py` file, write the register statement just like we
    have done for `Seller` in the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Here, we use the `admin.site.register(Model, ModelAdmin)` statement to register
    the admin classes. Write three more statements to register the `Vehicle`, `VehicleModel`,
    and `Engine` model classes to their corresponding admin classes.
  prefs: []
  type: TYPE_NORMAL
- en: Using a decorator
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using a decorator works just like when we used the `@property` model method
    decorator introduced in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*. Decorators wrap classes, written on the
    line before the class is declared, as is done on the `SellerAdmin` class here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using the `@admin.register(Model)` decorator provided by Django.
    When used this way, this function takes in only one positional argument and that
    is the name of the model class we wish to link to that admin class. The admin
    class is derived from the class name that the decorator is being used on, in this
    case, the `SellerAdmin` class. Add this decorator to the three remaining admin
    classes and adjust the related model accordingly for each decorator.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have these models registered, when accessing the Django admin dashboard,
    you should now see a fourth section titled **CHAPTER_3** containing four items,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Django – registering models'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.03_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Django – registering models
  prefs: []
  type: TYPE_NORMAL
- en: Clicking any one of these will take you to what is called a **changelist view**,
    where a list or collection of all those objects is displayed. Clicking on any
    of those items would then take you to what is called a **change view**. Clicking
    on the **Add** button found on the changelist view page will take the user to
    what is called an **add view**, which is a form that creates a new instance of
    that model rather than editing an existing one. Similarly, deleting an object
    will take the user to what is called a **delete view** page for that object. Similar
    to how models and forms are each controlled using the fields and methods written
    in those classes, we can control admin classes the same way by defining certain
    variables known as options and custom methods. Let's discuss what those options
    are next.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring admin class options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django provides admin class options for customizing the Django admin site interface
    directly. In this section, we will go through some of the most important and widely
    used options and provide examples of how to use them. We don't have enough room
    to discuss them all in great detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a complete breakdown of how to use any of the options available, visit
    the official Django documentation, found here: [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-options](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-options).'
  prefs: []
  type: TYPE_NORMAL
- en: The following options have been broken down into categories based on what view
    type they relate to (changelist view, change or add view, and just the add view).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Before adding any of the options to your admin classes, remember to remove the
    `pass` statement that was previously written for that class as a placeholder.
  prefs: []
  type: TYPE_NORMAL
- en: Changelist view-related options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These options relate to an admin class on the changelist view page, such as
    those listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/engine/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/seller/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/vehicle_model/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/vehicle/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Option – actions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `actions` option relates to the checkbox that is found to the left of every
    item on a changelist view page. By default, Django automatically provides at least
    one action for every model that is created and registered; that action is the
    delete action. For example, navigate to the `Sellers` changelist view page at
    `http://localhost:8000/admin/chapter_3/seller/`, select the dropdown next to the
    **Action** label, and you will see only one option, the delete option, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Django – actions admin option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.04_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – Django – actions admin option
  prefs: []
  type: TYPE_NORMAL
- en: If we had 20 sellers in this list, we could delete all 20 of them at once by
    using this action, instead of having to do a lot of needless clicking around.
    Additional actions can be created for custom use. An example of where this can
    be used is if you have a set of pages, which can have a published or unpublished
    state, stored in a field within your table. A custom action could be created that
    can publish or unpublish all of the selected objects.
  prefs: []
  type: TYPE_NORMAL
- en: We won't be creating a custom action in these exercises because it would be
    a complicated task to discuss and goes beyond the scope of this book. Additionally,
    some of the actions that you might be thinking of, such as editing a field, can
    also be done using the `list_editable` option, which we will be discussing in
    the *Option – list_editable section*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django provides full documentation on how to create custom actions here: [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/actions/](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/actions/).'
  prefs: []
  type: TYPE_NORMAL
- en: Option – actions_on_bottom
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `actions_on_bottom` option is used to display the `False`. If set to `True`,
    as is done to the `SellerAdmin` class in the following example, the **Action**
    dropdown will appear below the changelist results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: Option – actions_on_top
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Similar to the `actions_on_bottom` option, the `actions_on_top` option will
    display the `True`. We only need to write this if we wish to disable it above
    the changelist, but we can set it to `True` in the `SellerAdmin` class using the
    following example without triggering errors as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: If both this option and the `actions_on_bottom` option are set to `True`, the
    **Action** dropdown will appear both above and below the changelist results.
  prefs: []
  type: TYPE_NORMAL
- en: Option – actions_selection_counter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `actions_selection_counter` relates to the counter displayed to the right
    of the **Action** drop-down box. This option controls whether or not it should
    appear next to **Action**, as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Django – actions_selection_counter admin option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.05_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – Django – actions_selection_counter admin option
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, Django will set this value to `True`. There is no need to write
    this option unless you want to disable this feature by setting its value to `False`.
    However, there is no harm in including this option with a value of `True`, as
    is done in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: Option – list_display
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `list_display` option is used to show vertical columns on the changelist
    view page of a model. For example, navigate to the URL `http://localhost:8000/admin/chapter_3/seller/`
    and you'll see that the five columns that currently exist are `username`, `email`,
    `first_name`, `last_name`, and `is_staff`. Django will display the value of each
    field for each row that exists in that table.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to adjust this list to display the custom fields that we added to
    the `Seller` model that do not exist in the `User` model, such as the `SellerAdmin`
    class would look as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: The five columns that existed before were already defined in the `list_display`
    option found in the `UserAdmin` class, which was used to construct the `SellerAdmin`
    class. Navigate back to the same URL at `http://localhost:8000/admin/chapter_3/seller/`
    and you should now see the **Business Name** column third from last on the page
    and the **Superuser Status** column as the last column on the page because that
    is how they are positioned in the preceding list.
  prefs: []
  type: TYPE_NORMAL
- en: The `list_display` option can also be used in the form of a callable function,
    allowing you to write a method within that admin class to format the data displayed
    in that column. Just add the name of the custom method to this list just like
    any other field name when using a callable for this option.
  prefs: []
  type: TYPE_NORMAL
- en: Option – list_display_links
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `list_display_links` option is used to control which columns in the changelist
    results will navigate the user to the change view page of that object when clicked.
    By default, Django will make only the first column in this list clickable. If
    you want to make other columns editable, use this option.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the `SellerAdmin` class, add the option as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: When using the `list_display_links` option, the `list_display` option must also
    be used. Only fields added to the `list_display` option can be added to this option.
    Also, if the `list_display_links` option is defined, Django will no longer make
    the first column clickable. For example, if we want to keep the first column clickable,
    that is, the `username` and `name` fields in this option. Also, they must be in
    the order in which they appear in the `list_display` option.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using the `list_editable` option, which we are about to discuss,
    those fields cannot be used in the `list_display_links` option, such as the `first_name`
    and `last_name` fields, which we will reserve for the `list_editable` example
    next.
  prefs: []
  type: TYPE_NORMAL
- en: Option – list_editable
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `list_editable` option is an option that allows us to specify what fields
    on the changelist view page will be editable from that page. This prevents the
    need to open up the change view for that particular object just to edit a single
    field. Additionally, only fields found in the `list_display` option can be included
    in the `list_editable` option. This is because the column must exist before we
    can edit it.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to make the `first_name` and `last_name` fields editable
    on the changelist view page, the `SellerAdmin` class would be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, navigate to the changelist view found at `http://localhost:8000/admin/chapter_3/seller/`.
    We can see the `first_name` and `last_name` fields now appear as an input box
    with a save button at the bottom of that list, as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Django – list_editable admin option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.06_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – Django – list_editable admin option
  prefs: []
  type: TYPE_NORMAL
- en: Option – list_filter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `list_filter` option is a powerful tool that creates a box with a label
    titled **Filter** just to the right of the results on a changelist view page.
    The fields that are added to this option will tell Django to create a filter with
    a set of related choices derived from the values found in that QuerySet of results.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to override the default `list_filter` option that is
    found in the `UserAdmin` class and add the `Seller` model field called `name`
    as a filter, then we would write the `SellerAdmin` class as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, we just copied the `list_filter` option found in the
    `UserAdmin` class, located in the `django.contrib.auth.admin` library of Django.
    Then, we just modified that value to the desired value.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now when we navigate back to the URL `http://localhost:8000/admin/chapter_3/seller/`,
    we see the **By Business Name** filter, as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Django – list_filter admin option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.07_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – Django – list_filter admin option
  prefs: []
  type: TYPE_NORMAL
- en: Option – list_per_page
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `list_per_page` option designates the number of items that we want to appear
    on a changelist view page. By default, Django will set this value to `100`. This
    can sometimes be too much for a user and so let''s go ahead and practice setting
    this to a much more friendly number of, say, `20` on the `SellerAdmin` class by
    using the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: If you add more than 20 items to your tables, you will see a set of pagination
    buttons appear at the bottom of your changelist view page. When there are fewer
    than 20 items in total, no pagination buttons will appear since there is only
    one page of results.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using a third-party package or custom class instead of the default
    `django.core.paginator.Paginator` class used in Django, you can implement that
    custom paginator class by using the `paginator` admin option. Instructions on
    how this is done can be found here: [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.paginator/](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#django.contrib.admin.ModelAdmin.paginator/).'
  prefs: []
  type: TYPE_NORMAL
- en: Option – ordering
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ordering` option is done the same way as the `ordering` option in a model
    `Meta` class. This option accepts a list of fields that are ordered by the field
    specified when the page first loads.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the default ordering option in the `UserAdmin` class is set to
    order by `username` in ascending order. Go ahead and add that to the `SellerAdmin`
    class by using the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: Here, we can add the subtract symbol, such as in `('-username',)`, to make it
    order in descending order, just like the model `Meta` class `ordering` option.
    Multiple fields can be added and Django will sort by the items in the order that
    they appear in this options list. Also, once the page loads, the user can opt
    to unsort or sort by another column if they press the action buttons in the table
    heading of those columns.
  prefs: []
  type: TYPE_NORMAL
- en: Option – preserve_filters
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `preserve_filters` option relates to how filters are applied when the user
    visits the changelist view page. By default, when a user decides to create, change,
    or edit an object for a model, when they are brought back to the changelist view
    page, the filters will be preserved. The only time we would actually have to use
    this option is when we want to disable this feature, making all filters reset
    whenever an add, change, or delete action has been performed.
  prefs: []
  type: TYPE_NORMAL
- en: 'To disable this feature, set the `preserve_filters` value to `False`, as is
    done in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: Option – search_fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `search_fields` option enables a search bar on the changelist view page.
    One should already appear on the `Sellers` list because the `UserAdmin` class
    already defines this option for us. However, fields such as `name` are not currently
    searchable. Navigate to `http://localhost:8000/admin/chapter_3/seller/` and search
    for the **Biz** keyword and you should get no results.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following code block to the `SellerAdmin` class, making the field
    labeled **Business Name** searchable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: Now, refresh the page and search for the same `Seller` with a `chapter_3` fixture.
  prefs: []
  type: TYPE_NORMAL
- en: Change/add view-related options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These options pertain to an admin class on the add or change view pages, such
    as those listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/engine/add/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/engine/1/change/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/seller/add/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/seller/1/change/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/vehicle_model/add/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/vehicle_model/1/change/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/vehicle/add/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/vehicle/1/change/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Option – exclude
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `exclude` option can be thought of as the reverse of the `fields` option.
    This option will accept a list of fields that we wish to exclude from appearing
    on the form on the Django admin site. The fields added to the `exclude` option
    should not appear anywhere in the `fieldsets` or `add_fieldsets` option; otherwise,
    an error will be triggered. If a field exists in both the `fields` and `exclude`
    options, the field will be excluded.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if we want to exclude the `first_name` field using the following
    code, we would also have to remove the `first_name` field everywhere it appears
    in the `fieldsets`, `add_fieldsets`, `list_display`, `list_editable`, `search_fields`,
    and `prepopulated_fields` options, as they have been written in previous and future
    examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: You may now remove this setting and reset the `first_name` field to its previous
    usage.
  prefs: []
  type: TYPE_NORMAL
- en: Option – fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fields` option lets us explicitly state what fields to include in the admin
    form. Without declaring this field, Django will automatically include every field
    that exists for the model specified. However, the `'__all__'` value can also be
    used to explicitly state that all fields that exist in a related model shall be
    included.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will not be including this option since we want all fields included in these
    forms. However, if we did want to specify only certain fields, that would be done
    using a list, where the name of each field in the model is separated by a comma:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: In this example, only these four fields would appear on the change view page
    for the `Seller` object.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `fields` option cannot be combined with the `fieldsets` or `add_fieldsets`
    option and doing so will result in an error. However, the `fieldsets` and `add_fieldsets`
    options can be used together. On the `SellerAdmin` class, we can only use the
    `fieldsets` and `add_fieldsets` options because the `UserAdmin` parent class that
    was used to construct the `SellerAdmin` class already uses those options. In this
    case, the `exclude` option would be best used if we did not want to include specific
    fields. Also, if a field is not included in an admin class and is specified in
    any of the class options, then an error will be triggered.
  prefs: []
  type: TYPE_NORMAL
- en: Option – fieldsets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `fieldsets` option is similar to the `fields` option in that it relates
    to customizing fields but it will group like fields together into designated categories
    that we create. Django will add HTML and special formatting to group these fields
    on the change and add view pages.
  prefs: []
  type: TYPE_NORMAL
- en: For example, because we extended the Django `User` model in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, and are now using the `UserAdmin` class
    to construct the `SellerAdmin` class, we will need to write our own `fieldsets`
    option. We have to do this because Django will be using the `fieldsets` option
    as it was written in the `UserAdmin` class, which currently does not include the
    additional fields we created called `name` and `vehicles`. In order for the `name`
    and `vehicles` fields to appear on the change and add view pages, we need to add
    them to any fieldset group; otherwise, only the original `User` fields will appear.
  prefs: []
  type: TYPE_NORMAL
- en: 'Start by copying the original `fieldsets` option found in the `django.contrib.auth.admin`
    library of Django into your `SellerAdmin` class and modify the groups to now include
    the `name` and `vehicles` fields, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: 'This option accepts a list of tuples. Each tuple contains two items, the label
    of that fieldset or the value of `None` to display no label at all, as depicted
    in the first group previously. The second item is another list of tuples where
    that tuple either defines one or all of three available keys: `fields`, `description`,
    and `classes`. The `classes` key is used to give the container of that fieldset
    an HTML class name, as depicted in `''classes'': (''wide'',)`. The `description`
    key will add an optional description that is rendered above a field in the admin
    form as a `<p></p>` HTML object, as shown in the `Vehicles` group previously.
    The `fields` key will accept a list of fields separated by a comma to add the
    fields desired to that fieldset group. This is the one mandatory key.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the change view for the seller named `admin` using the link `http://localhost:8000/admin/chapter_3/seller/1/change/`,
    and you should see five sections. The first section is not labeled and the other
    four are named in the order listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '*No label displayed*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Personal Info**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Permissions**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Important Dates**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Vehicles**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The new fields are the ones labeled `name` field in the `vehicles` field its
    own group.
  prefs: []
  type: TYPE_NORMAL
- en: Option – filter_horizontal
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `filter_horizontal` option relates to the `ManyToMany` field called `vehicles`,
    which was created for the `Seller` model. Navigate to the change view page for
    any seller in the database, such as `http://localhost:8000/admin/chapter_3/seller/1/change/`,
    and you'll see the field labeled `<select multiple="">` HTML object. This can
    actually be difficult for some users to interact with, especially with the need
    to use the keyboard by either pressing the *Ctrl* button on Windows or the *Command*
    button on Mac to select multiple items for submission. Django provides a slick
    JavaScript-based user interface that can be applied to any `ManyToMany` fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, go ahead and apply the following option to the `SellerAdmin` class,
    converting the `vehicles` field to now using the horizontal JavaScript user interfaces:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, refresh the same change view page and you will see the vehicles now look
    as in the following screenshot, where the boxes are stacked side by side horizontally
    from one another:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Django – filter_horizontal admin option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.08_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.8 – Django – filter_horizontal admin option
  prefs: []
  type: TYPE_NORMAL
- en: Now, the user has more than one method of interacting with this field. They
    could still use the keyboard to do everything, they could use the mouse to do
    everything, or they could use a combination of both. Visually it is much more
    appealing and easier to see what is and is not selected. This even provides a
    search field to help filter results and trim the fat if there are too many available
    choices. The two boxes are used for selecting what is available on the left and
    moving it to the selected box on the right with controls that move items in either
    direction. Additional controls allow the user to select and move all items found
    in one box to the other box.
  prefs: []
  type: TYPE_NORMAL
- en: Option – filter_vertical
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `filter_vertical` option is exactly the same as the `filter_horizontal`
    option except it will stack the boxes vertically instead of horizontally next
    to each other. The top box will be the items available and the bottom box is used
    for the items selected.
  prefs: []
  type: TYPE_NORMAL
- en: Option – form
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When creating a custom admin form, which we will do later in this chapter, the
    `form` option is used to point to the form class that we wish to use. If we don't
    use this setting, Django will dynamically create a `ModelForm` for the model that
    you have registered with that admin class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Preparing ourselves for the section titled *Writing custom admin form classes*
    of this chapter, add the following option to the `EngineAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: This option will link the admin class to an admin form that we will later call
    `EngineForm`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Until we actually create the `EngineForm` form, you may run into errors. To
    prevent those errors, you can either comment out this line of code and leave the
    `pass` statement under the `EngineAdmin` class or create the `EngineForm` class
    now and add the `pass` statement to that `EngineForm` class until we actually
    add code to it later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Option – inlines
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `inlines` option is an advanced feature allowing us to make child models
    editable from within the parent model's change view page as an inline formset
    display. This feature is considered advanced in that we need to write separate
    classes just to use and implement this option. These classes can be edited with
    options that customize the look and feel of those formsets. Each inline object
    starts with an `InlineModelAdmin` class. The two `InlineModelAdmin` subclasses
    that are used to render an inline formset are `StackedInline` and `TabularInline`.
    These two classes perform the same actions as the `InlineModelAdmin` class except
    that they render a different HTML template for each class. Additional form classes
    can even be created and used with these inline classes. Refer to the documentation
    found at [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-objects](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-objects),
    as well as the concepts provided in [*Chapter 5*](B17243_05_ePub.xhtml#_idTextAnchor152),
    *Django Forms*.
  prefs: []
  type: TYPE_NORMAL
- en: Both the `StackedInline` and `TabularInline` classes are used for the model
    to which a `ForeignKey` field is linked. In the vehicle objects, we can apply
    the inline option to the `EngineAdmin` and `VehicleModelAdmin` classes. For any
    `ManyToMany` fields, we will have to link them in a slightly different way.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will go over each of these classes and discuss briefly how they are
    used.
  prefs: []
  type: TYPE_NORMAL
- en: Class – InlineModelAdmin
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `InlineModelAdmin` class is the parent class that the two classes used to
    render inline formsets are constructed from. Every option and method of this class
    is available in those two child classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Many of the options and methods available to the `ModelAdmin` class are also
    available in the `InlineModelAdmin` class. Here is a full list of what is provided
    in the `InlineModelAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Table_6.01_B17243.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A common option that we will be adding to all of the inline classes is `extra
    = 1`, which sets this value to `1` in order to show only one additional blank
    formset, allowing the user to dynamically add objects when they want to. If this
    value were set to, say `10`, then 10 additional blank formsets would appear. The
    default value is `3` and this is why we are going to override the default value
    in all of our classes to the value of `1`, providing a better user experience.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete breakdown of how to use these options and methods, visit [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-options](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#inlinemodeladmin-options).
  prefs: []
  type: TYPE_NORMAL
- en: Class – StackedInline
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The `StackedInline` class is used to render inline formsets using the `/admin/edit_inline/stacked.html`
    template.
  prefs: []
  type: TYPE_NORMAL
- en: 'To practice using this option on the `EngineAdmin` class, add the following
    class to the `/chapter_6/admin.py` file, preferably placing all inline formset
    classes at the top of this document:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, add the following option to the `EngineAdmin` class, placed below all
    inline formset classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, navigate to the change view page of any of the engine objects, such as
    `http://localhost:8000/admin/chapter_3/engine/1/change/`. We can see that each
    vehicle that uses that particular engine can be edited from the edit engine page,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – Django – inlines admin option – StackedInline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.09_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.9 – Django – inlines admin option – StackedInline
  prefs: []
  type: TYPE_NORMAL
- en: The `StackedInline` class will display each field stacked one on top of the
    other, vertically, as shown in the previous screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Class – TabularInline
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'The `TabularInline` class is written and implemented in the exact same way
    as the previous `StackedInline` example except that the `VehicleInline` class
    is used, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, refresh the same page, `http://localhost:8000/admin/chapter_3/engine/1/change/`,
    and when rendered to the page, the fields will now display horizontally in neatly
    organized columns, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Django – inlines admin option – TabularInline'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.10_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.10 – Django – inlines admin option – TabularInline
  prefs: []
  type: TYPE_NORMAL
- en: ManyToMany field inlines
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: What would be the most useful and also make the most sense in the vehicle relations
    would be to link all of the vehicles that a seller is selling on the `Seller`
    change view page. If we write an inline class the same way we wrote an inline
    class for a `ForeignKey` field, now for a `ManyToMany` field relation, we would
    wind up getting an error. To prevent that error, write your inline class almost
    the same way that you implemented inline classes for related `ForeignKey` fields
    except now, you will add a `through` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following class, to be used on the `SellerAdmin` class, using either
    a `TabularInline` or `StackedInline` class as its constructor, and for the model,
    use the following `through` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are naming this class the plural `VehiclesInline`, with an *s*, instead
    of the first class that we wrote, called `VehicleInline`, as the naming convention.
    We are doing this to indicate that one is related to a `ManyToMany` field and
    the other is not. This naming convention is not mandatory; your naming convention
    can be anything you would like it to be, but this is helpful. We are linking the
    `model` option directly to the `Seller` model by the `vehicles` field, which is
    the `ManyToMany` field, using the `through` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `SellerAdmin` class, add the following `inlines` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: Now, navigate to the change view page for a seller at `http://localhost:8000/admin/chapter_3/seller/1/change/`,
    and we can see that the vehicles this seller is selling are now rendered the same
    as the previous inline formset exercises. One difference in using the `ManyToMany`
    fields is that they will render as related objects. They can be edited by clicking
    the pencil icon next to each item, where a pop-up window will appear, allowing
    the user to edit that item.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Remove the `vehicles` field from the `fieldsets`, `filter_horizontal`, and `filter_vertical`
    options for best results when implementing the vehicle inline fieldset.
  prefs: []
  type: TYPE_NORMAL
- en: Option – radio_fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `radio_fields` option is used on `ForeignKey`, `OneToOne` fields, and any
    `CharField` that is using a list of choices. By default, Django will render these
    fields as a `<select>` HTML object, where the user can select a single option
    from a drop-down list of choices. By adding a field to the `radio_fields` option,
    Django will render the choices as a set of HTML radio buttons, where the user
    has all the choices visually presented to them when they view this page. For fields
    with dozens or even hundreds of choices, this might not be the best option and
    is the reason why Django will default to a `<select>` box.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go ahead and add the `radio_fields` to the `VehicleAdmin` class, where we have
    two `ForeignKey` fields to play with. Apply this option to just one of those fields,
    the `engine` field, and leave the `vehicle_model` field as it is, just like in
    the following example. This way, when we view it on the page, we can see the differences
    between the two:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, each key in the `radio_fields` option relates to the
    name of the field that we are converting from a `<select>` to a radio button.
    The value of that key takes in one of two choices, `admin.VERTICAL` or `admin.HORIZONTAL`.
    This value is used to display the radio button choices either vertically or horizontally
    on the page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, navigate to the change view page for any of the vehicles, such as `http://localhost:8000/admin/chapter_3/vehicle/1/change/`,
    and see how the `vehicle_model` and `engine` fields differ, as depicted in the
    following screenshot, with a select box and radio button choices:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – Django – radio_fields admin option'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.11_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.11 – Django – radio_fields admin option
  prefs: []
  type: TYPE_NORMAL
- en: Option – save_on_top
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `save_on_top` option is used to display a set of action buttons at the top
    of the change or add view pages. This is not the same as the `actions_on_bottom`
    or `actions_on_top` options, which only relate to the changelist view page. By
    default, Django sets this value to `False`, showing only action buttons at the
    bottom of the page. Setting this value to `True` means the buttons will appear
    both at the top and at the bottom of those pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, add the following option to the `SellerAdmin` class to show those
    buttons at the top and bottom of the change and add view pages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: Now, navigate to any of the change or add view pages, such as `http://localhost:8000/admin/chapter_3/seller/1/change/`,
    and we will see the action buttons appear both at the top and the bottom of this
    page.
  prefs: []
  type: TYPE_NORMAL
- en: Add view-related options
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These options override the behavior of admin classes that only pertain to the
    add view and not the change view pages, such as those listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/engine/add/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/seller/add/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/vehicle_model/add/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://localhost:8000/admin/chapter_3/vehicle/add/`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Option – add_fieldsets
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `add_fieldsets` option does exactly what the `fieldsets` option does except
    these are fields that relate only to the add/create view form rather than the
    change view form. For example, navigate to `http://localhost:8000/admin/chapter_3/seller/add/`
    and you'll see that the Django `UserAdmin` class that the `SellerAdmin` class
    is constructed from only provides three fields, and then the remaining fields
    appear after we have created a new `Seller` object.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we wanted to provide the `first_name`, `last_name`, `name`, and `email`
    fields, we would modify the `add_fieldsets` variable of the `SellerAdmin` class
    to look like the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we see that writing and grouping fieldsets are written
    exactly the same as the `fieldsets` example was written earlier. Now, when we
    visit the same add `Seller` URL as before, `http://localhost:8000/admin/chapter_3/seller/add/`,
    we can see four additional fields, the four we included in the **Personal Info**
    fieldset previously.
  prefs: []
  type: TYPE_NORMAL
- en: Option – prepopulated_fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `prepopulated_fields` option tells a field(s) to listen for an event when
    the target field's value has changed and then updates those field values with
    the value of the target field. This is handy in situations where the user changes
    the value of a `title` field as the `slug` field will automatically populate with
    the same value. For example, in the `Seller` model, let's wire this up to listen
    for when the `first_name` and `last_name` fields change and then populate the
    `username` field value with a value derived from both of the `first_name` and
    `last_name` values.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this example, apply the following option to the `SellerAdmin` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we can also apply additional fields just as we did with
    the `first_name` and `last_name` fields. Navigate to the add view page for the
    `Seller` model at `http://localhost:8000/admin/chapter_3/seller/add/` and begin
    typing within the `first_name` or `last_name` fields. You will see the `username`
    field auto-populate with the values that are typed. Spaces will be replaced with
    a dash and the value of the fields will display in the order in which they were
    written in the `prepopulated_fields` option. For example, `first_name` will appear
    before the `last_name` value based on how we wrote it previously.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have learned all about the different options and applied many of
    them to our admin classes, let's dive into the various admin class methods that
    we can use.
  prefs: []
  type: TYPE_NORMAL
- en: Adding admin class methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Admin class methods allow us to add or change the default behavior of a `ModelAdmin`
    or `UserAdmin` class. Any of the options available in an admin class can have
    its value dynamically calculated by writing a method. Those methods use the `get_`
    naming convention and then the name of the option, as in `get_ordering()` or `get_form()`.
    Django also provides many built-in methods that add extra actions when something
    happens, such as when an object is saved or deleted using the `save_model()` or
    `delete_model()` methods.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will explore just some of these methods and also provide a demonstration
    using a dynamic value, specifically for the `form` option. That will prepare us
    to use a separate form class later in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'For a complete breakdown of how to use Django admin class methods, visit the
    official Django documentation here: [https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-methods](https://docs.djangoproject.com/en/4.0/ref/contrib/admin/#modeladmin-methods).'
  prefs: []
  type: TYPE_NORMAL
- en: Method – get_form()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `get_form()` method is used to get the form class that will be used within
    an admin class. For example, in the following two exercises, one will check to
    see whether an object exists, then based on the result of that condition, we will
    serve one form class for the change view and another form class for the add view.
    In the other exercise, we will demonstrate showing one form for a superuser and
    another for a regular user.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We have not created the `EngineForm`, `EngineSuperUserForm`, or `AddEngineForm`
    classes yet. Go ahead and create these classes with at least the `pass` statement
    in the `/chapter_6/forms.py` file to allow pages other than the engine change
    and add view ones to load without errors. After completing these exercises, your
    engine change and add view pages will error out even with the `pass` statement
    included. Please wait to load/reload the engine change or add view pages until
    we have completed the section titled *Writing custom admin form classes* of this
    chapter, which will add the necessary components to prevent errors when loading
    those pages.
  prefs: []
  type: TYPE_NORMAL
- en: Change/add view condition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the `EngineAdmin` class, add the following `get_form()` method and remove
    or comment out the previous `form` option that we wrote earlier for this class,
    as depicted here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: As we can see in the preceding example, we replaced `form = EngineForm` with
    a method that performs a little bit of logic to serve up one of two different
    forms now. Using the pound symbol, we commented out the `form = EngineForm` line.
  prefs: []
  type: TYPE_NORMAL
- en: Superuser condition
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Another use of this method is serving up one form if a user has superuser status
    and another if they do not, using the conditional statement shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: The idea here is that we grant the superuser additional fields that a regular
    user cannot edit, such as permission rights and permission group settings.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Even though we extended the Django `User` model as a seller, the currently logged-in
    seller will appear in the `request` dictionary as a `user` key, as in `request.user`
    shown in the previous code block.
  prefs: []
  type: TYPE_NORMAL
- en: Method – save_model()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `save_model()` method is used to add actions before and/or after the object
    is saved in a change or add view. To add this method to the `EngineAdmin` class,
    include the code shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: Here, we create the `save_model()` method with five positional arguments, those
    being `self`, `request`, `obj`, `form`, and `change`, in that order. These five
    arguments make relevant data available to use when writing logic within that method.
    The `change` argument has a value of either `True` or `False`. If the object being
    saved is from the add view page, the `change` value will be `False`; if the object
    is on the change view page, the `change` value will be `True`. The `super().save_model(request,
    obj, form, change)` line is what actually saves the object and this is the same
    as using a `Model.save()` operation. Actions above this line will take place before
    the object is saved. Actions written after this line take place after the object
    has been saved, actions such as sending an email or triggering a notification
    alert.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Using the `__dict__` property within the `print` statement shown previously
    will display a dictionary of keys and values available within that `obj`.
  prefs: []
  type: TYPE_NORMAL
- en: Method – delete_model()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `delete_model()` method is used just like the `save_model()` method except
    for when an object is deleted and not saved. In the same `EngineAdmin` class,
    add the method shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will create and modify the custom admin form classes that we spoke
    about earlier in this chapter, in the subsection titled *Method – get_form()*.
  prefs: []
  type: TYPE_NORMAL
- en: Writing custom admin form classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Admin forms can be created and used just like the standard form classes we discussed
    in [*Chapter 5*](B17243_05_ePub.xhtml#_idTextAnchor152), *Django Forms*. For admin
    form classes, we need to use the Django `ModelForm` class instead of the standard
    `Form` class found in the `django.forms` library, because the fields in these
    forms will link to model classes. Refer to the examples found in [*Chapter 5*](B17243_05_ePub.xhtml#_idTextAnchor152),
    *Django Forms*, to learn more about how to customize and change your form class
    behavior, for either a `Form` or `ModelForm` class. Here, we will demonstrate
    just initializing your admin forms and enabling all fields that exist, to allow
    any of the engine change and add view pages to load without the errors mentioned
    earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Initializing an admin form
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have not already done so, in the `chapter_6` app folder, create a file
    called `forms.py`. We need to create the three different form classes used in
    the previous examples of this chapter and call them `EngineForm`, `AddEngineForm`,
    and `EngineSuperUserForm`. Create them using the example provided here, except
    change the name `EngineForm` to the name of the class that you are writing and
    change the related model class for all three of the classes as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: The least amount of code that is needed for a `ModelForm` class to work within
    admin classes can be achieved by providing the `__init__` method, initializing
    the form. In addition, we will need the `Meta` subclass with the `model` and `fields`
    options. On all three of these classes (`EngineForm`, `AddEngineForm`, and `EngineSuperUserForm`),
    give the `model` option a value of `Engine`, linking them all to the `Engine`
    model. For the `fields` option, provide a value of `'__all__'` to let Django create
    the fields for you based on the fields that have been written in the `Engine`
    model class. Unlike the admin classes that we wrote, we actually have to tell
    Django to use all or some fields in this class.
  prefs: []
  type: TYPE_NORMAL
- en: You are welcome to adjust the fields and/or add other options in order to customize
    the look and feel of each of these forms, allowing us to see how they differ from
    one another when they are rendered. Alternatively, you can use `print` statements
    in each form's `__init__` method, as was done previously, to let you know that
    the logic is working properly. If you visit any of the engine change or add view
    pages with the options provided in the *Configuring admin class options* section
    of this chapter, the page should now load without errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'The engine change and add pages are listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: Engine add view – `http://localhost:8000/admin/chapter_3/engine/add/`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Engine change view – `http://localhost:8000/admin/chapter_3/engine/1/change/`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's discuss configuring user permissions within the Django admin site.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Django authentication system
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django provides a very powerful authentication system to grant permission rights
    to users. By default, a superuser has the authority to do everything, which is
    why we had to create at least one superuser in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. That superuser is needed at all times within the Django
    system to maintain control of your site and your data. The superuser granted us
    the ability to take control of our system and establish user roles and groups
    for every other user in the system. Creating a user and superuser can be done
    via the command line using a Django management command or through the IDE, just
    like when we explored those subjects in [*Chapter 2*](B17243_02_ePub.xhtml#_idTextAnchor037),
    *Project Configuration*. It can also be done through the Django shell, as we did
    in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations, and
    Inheritance*, when we created and saved models using the Django shell. `user`
    and `Seller` are just other model objects that we create and save. Now that we
    have access to the Django admin site, we can also add users, or in our case, sellers,
    and edit their permissions using this interface.
  prefs: []
  type: TYPE_NORMAL
- en: Next, let's add a regular user to the system so that we can have at least one
    regular user and one superuser to compare and contrast their roles.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a seller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will activate the Django shell, import the `Seller` model from the
    `chapter_3` app, and then proceed to create the new `Seller` object, which is
    a standard user:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Activate the Django shell in any terminal or command-line window, just as we
    did in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations,
    and Inheritance*. Once activated, import the `Seller` object, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Django includes, in the `User` model, a `create_user()` method, used for easily
    creating a new user that does not have superuser rights. This method does the
    heavy lifting of encrypting the password for us, so all we have to do is provide
    the unencrypted password as a string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we extended the Django `User` model into a `Seller` in [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, we will have to use the `create_user()`
    method on the `Seller` model, as is shown in the following code. Execute the following
    command, remembering the password that you used as you will need it to log into
    the Django admin site with that user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, exit the Django shell by executing the `exit()` command and run the project
    again by executing the `runserver` command, as shown:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, visit the `Seller` changelist view page here: http://localhost:8000/admin/chapter_3/seller/.
    You should see at least two results, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Django – Seller''s changelist view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.12_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.12 – Django – Seller's changelist view
  prefs: []
  type: TYPE_NORMAL
- en: As is depicted in the preceding screenshot, one result has a superuser status
    and the other, the one that we just created, does not. The `is_staff` value is
    set to `False` when using the `create_user()` method. This is why we had to explicitly
    set it to `True` in the preceding code example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, log out of the admin site and then log back in, with the username as `test`
    and password as `testpassword`, and you should now see a message on your dashboard
    indicating that you do not have permission to view anything yet, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – Django – admin site test for Seller'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.13_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.13 – Django – admin site test for Seller
  prefs: []
  type: TYPE_NORMAL
- en: This is expected behavior because we have not granted this user any permissions
    yet. Next, let's grant this user some permissions.
  prefs: []
  type: TYPE_NORMAL
- en: Granting permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To grant users permissions, we will be using the admin interface this time.
    Log out again and then log back in with the `admin` user or whatever name you
    may have given your superuser. Navigate to the change view of your `test` user
    at `http://localhost:8000/admin/chapter_3/seller/2/change/`, which should be ID
    number `2`, unless you created more users on your own, then find the change view
    of the user ID that you are currently working with.
  prefs: []
  type: TYPE_NORMAL
- en: 'On this page, grant the `test` user the ability to change everything in the
    `chapter_3` app and leave everything else unselected, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – Django – user permissions'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.14_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.14 – Django – user permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the `chapter_3` to show only the relevant permissions for this task.
    Don''t forget to save this user before proceeding. Log out and then log back in
    again, this time with the `test` user credentials. Now, we should see the models
    related to our vehicles, as depicted in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.15 – Django – admin site test for Seller 2'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.15_B17243.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.15 – Django – admin site test for Seller 2
  prefs: []
  type: TYPE_NORMAL
- en: Permissions can be granted on a per-group basis instead of navigating to each
    user and granting permissions one at a time.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `Sellers` object is now available to the `test` user. Navigating to the
    change view of any of the `Sellers` that exists while logged in as a standard
    user will show the permissions fields. To prevent this from happening, you can
    either limit only superusers to view and edit the `Seller` model objects or follow
    the steps depicted in the *Method – get_form()* subsection of this chapter to
    then add your own logic to the `SellerAdmin` class. That will only show the permission-related
    fields to superusers.
  prefs: []
  type: TYPE_NORMAL
- en: Permission groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Permission groups are a way to add or remove users to or from a group by defining
    a set of permissions. A system with thousands of users would prove tedious to
    manage, not to mention how many inconsistencies it could result in, as we factor
    in human error.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, make sure you are logged out of the `test` user account, then log back
    in with the `admin` user account and navigate to the group add view page here:
    `http://localhost:8000/admin/auth/group/add/`. Then, create a new group called
    `test_group` and grant the same permissions to this group that were given to the
    `test` user in the previous exercise. Next, go back to the change view page of
    that `test` user, remove all the user permissions from before, and assign them
    to the `test_group` group instead. This `test` user will be given the same permissions
    as before. With this, you can create as many groups as you would like, assign
    users to each group as you desire, and customize rights to the needs of your project.
    Additional permissions can be given to users on an ad hoc basis by assigning them
    to a group and then giving them extra user-based permissions in addition to that
    group assignment.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We activated and customized the Django admin site for a project, otherwise known
    as the admin panel. This powerful tool helps us to get up and running with search,
    filter, sort, create, edit, and delete capabilities for all of the models that
    we choose to register on this site. With the concepts provided in this chapter,
    you should be able to make your admin panel a very useful tool that your users
    will enjoy.
  prefs: []
  type: TYPE_NORMAL
- en: With the authentication system that Django provides, many different types of
    users can all access and use the same site but have very different roles and uses.
    Each type of user could even be given entirely different templates and flows if
    we venture down the road of extending templates or building onto that templating
    system using the concepts provided in previous chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will discuss sending emails, creating custom email templates,
    as well as creating PDF reports using the Django template language.
  prefs: []
  type: TYPE_NORMAL
