- en: Chapter 4. Fun with Animations
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第四章.动画乐趣
- en: Cartoons have always fascinated the young and old alike. An *animation* is where
    the imaginary creatures become alive and take us to a totally different world.
  id: totrans-1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 卡通一直吸引着年轻人和老年人。*动画*是想象中的生物变得生动，带我们进入一个完全不同的世界。
- en: Animation is a sequence of frames displayed quickly one after the other. This
    creates an optical illusion where the objects, for instance, appear to be moving
    around. This chapter will introduce you to the fundamentals of developing animations
    using Python and Pyglet multimedia application development frameworks. Pyglet
    is designed to do 3D operations, but we will use it for developing very simple
    2D animations in this book.
  id: totrans-2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 动画是一系列快速连续显示的帧。这创造了一种视觉错觉，例如，物体似乎在移动。本章将介绍使用Python和Pyglet多媒体应用程序开发框架开发动画的基础知识。Pyglet旨在执行3D操作，但在这本书中，我们将用它来开发非常简单的2D动画。
- en: 'In this chapter, we shall:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将：
- en: Learn the basics of Pyglet framework. This will be used to develop code to create
    or play animations.
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习Pyglet框架的基础知识。这将用于开发创建或播放动画的代码。
- en: Learn how to play an existing animation file and create animations using a sequence
    of images.
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习如何播放现有的动画文件，并使用一系列图像创建动画。
- en: Work on project 'Bowling animation', where animations can be controlled using
    inputs from the keyboard.
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“保龄球动画”项目中工作，其中可以使用键盘输入来控制动画。
- en: Develop code to create an animation using different regions of a single image.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单个图像的不同区域开发创建动画的代码。
- en: Work on an exciting project that animates a car moving in a thunderstorm. This
    project will cover many important things covered throughout this chapter.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从事一个令人兴奋的项目，该项目将展示一辆汽车在雷雨中移动的动画。这个项目将涵盖本章中涵盖的许多重要内容。
- en: So let's get on with it.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，让我们开始吧。
- en: Installation prerequisites
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装先决条件
- en: We will cover the prerequisites for the installation of Pyglet in this section.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将介绍安装Pyglet的先决条件。
- en: Pyglet
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pyglet
- en: Pyglet provides an API for multimedia application development using Python.
    It is an OpenGL-based library, which works on multiple platforms. It is primarily
    used for developing gaming applications and other graphically-rich applications.
    Pyglet can be downloaded from [http://www.pyglet.org/download.html](http://www.pyglet.org/download.html).
    Install Pyglet version 1.1.4 or later. The Pyglet installation is pretty straightforward.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Pyglet提供了一个用于使用Python进行多媒体应用程序开发的API。它是一个基于OpenGL的库，支持多个平台。它主要用于开发游戏应用程序和其他图形丰富的应用程序。可以从[http://www.pyglet.org/download.html](http://www.pyglet.org/download.html)下载Pyglet。安装Pyglet版本1.1.4或更高版本。Pyglet的安装相当简单。
- en: Windows platform
  id: totrans-14
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows平台
- en: For Windows users, the Pyglet installation is straightforward use the binary
    distribution `Pyglet 1.1.4.msi` or later.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows用户，Pyglet的安装很简单，使用二进制分发`Pyglet 1.1.4.msi`或更高版本。
- en: Note
  id: totrans-16
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: You should have Python 2.6 installed. For Python 2.4, there are some more dependencies.
    We won't discuss them in this book, because we are using Python 2.6 to build multimedia
    applications.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该安装Python 2.6。对于Python 2.4，还有一些额外的依赖项。我们不会在本书中讨论它们，因为我们使用Python 2.6来构建多媒体应用程序。
- en: If you install Pyglet from the source, see the instructions under the next sub-section,
    *Other platforms*.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您从源代码安装Pyglet，请参阅下一小节*其他平台*下的说明。
- en: Other platforms
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他平台
- en: The Pyglet website provides a binary distribution file for Mac OS X. Download
    and install `pyglet-1.1.4.dmg` or later.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Pyglet网站为Mac OS X提供了二进制分发文件。下载并安装`pyglet-1.1.4.dmg`或更高版本。
- en: 'On Linux, install Pyglet 1.1.4 or later if it is available in the package repository
    of your operating system. Otherwise, it can be installed from source tarball as
    follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux上，如果您的操作系统软件仓库中有Pyglet 1.1.4或更高版本，则安装它。否则，可以从源tarball安装，如下所示：
- en: Download and extract the tarball `pyglet-1.1.4.tar.gz` or a later version.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载并解压缩`pyglet-1.1.4.tar.gz`或更高版本的tarball。
- en: Make sure that `python` is a recognizable command in shell. Otherwise, set the
    `PYTHONPATH` environment variable to the correct Python executable path.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在shell中`python`是一个可识别的命令。否则，将`PYTHONPATH`环境变量设置为正确的Python可执行路径。
- en: 'In a shell window, change to the mentioned extracted directory and then run
    the following command:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在shell窗口中，切换到提到的提取目录，然后运行以下命令：
- en: '[PRE0]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Review the succeeding installation instructions using the readme/install instruction
    files in the Pyglet source tarball.
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Pyglet源tarball中的readme/install指令文件审查后续的安装说明。
- en: Tip
  id: totrans-27
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: 'If you have the package `setuptools` (http://pypi.python.org/pypi/setuptools)
    installed, the Pyglet installation should be very easy. However, for this, you
    will need a runtime `egg` of Pyglet. But the `egg` file for Pyglet is not available
    at [http://pypi.python.org](http://pypi.python.org). If you get hold of a Pyglet
    `egg` file, it can be installed by running the following command on Linux or Mac
    OS X. You will need administrator access to install the package:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已安装`setuptools`包（http://pypi.python.org/pypi/setuptools），则Pyglet的安装应该非常简单。然而，为此，您将需要一个Pyglet的运行时`egg`文件。但是，Pyglet的`egg`文件在[http://pypi.python.org](http://pypi.python.org)上不可用。如果您能获取到Pyglet的`egg`文件，可以通过在Linux或Mac
    OS X上运行以下命令来安装它。您需要管理员权限来安装此包：
- en: '`$sudo easy_install -U pyglet`'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '`$sudo easy_install -U pyglet`'
- en: Summary of installation prerequisites
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装需求概述
- en: The following table illustrates installation prerequisites depending on the
    version and platform.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格展示了根据版本和平台的不同，安装需求。
- en: '| Package | Download location | Version | Windows platform | Linux/Unix/OS
    X platforms |'
  id: totrans-32
  prefs: []
  type: TYPE_TB
  zh: '| 包名 | 下载位置 | 版本 | Windows平台 | Linux/Unix/OS X平台 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-33
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| Python | [http://python.org/download/releases/](http://python.org/download/releases/)
    | 2.6.4 (or any 2.6.x) | Install using binary distribution | Install from binary;
    also install additional developer packages (For example, with `python-devel` in
    the package name in a rpm-based Linux distribution).Build and install from the
    source tarball. |'
  id: totrans-34
  prefs: []
  type: TYPE_TB
  zh: '| Python | [http://python.org/download/releases/](http://python.org/download/releases/)
    | 2.6.4（或任何2.6.x版本） | 使用二进制分发安装 | 从二进制安装；也可以安装额外的开发包（例如，在基于rpm的Linux发行版中，包名中包含`python-devel`）。从源tarball构建和安装。
    |'
- en: '| Pyglet | [http://www.pyglet.org/download.html](http://www.pyglet.org/download.html)
    | 1.1.4 or later | Install using binary distribution (the `.msi` file) | **Mac:**
    Install using disk image file (.dmg file).**Linux:** Build and install using the
    source tarball. |'
  id: totrans-35
  prefs: []
  type: TYPE_TB
  zh: '| Pyglet | [http://www.pyglet.org/download.html](http://www.pyglet.org/download.html)
    | 1.1.4或更高版本 | 使用二进制分发（`.msi`文件）安装 | **Mac:** 使用磁盘映像文件（`.dmg`文件）安装。**Linux:**
    使用源tarball构建和安装。 |'
- en: Testing the installation
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试安装
- en: 'Before proceeding further, ensure that Pyglet is installed properly. To test
    this, just start Python from the command line and type the following:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在继续之前，请确保Pyglet已正确安装。为了测试这一点，只需从命令行启动Python并输入以下命令：
- en: '[PRE1]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: If this import is successful, we are all set to go!
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这个导入成功，我们就准备就绪了！
- en: A primer on Pyglet
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Pyglet入门
- en: Pyglet provides an API for multimedia application development using Python.
    It is an OpenGL-based library that works on multiple platforms. It is primarily
    used for developing gaming and other graphically-rich applications. We will cover
    some important aspects of Pyglet framework.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Pyglet提供了一个使用Python进行多媒体应用程序开发的API。它是一个基于OpenGL的库，可以在多个平台上运行。它主要用于开发游戏和其他图形丰富的应用程序。我们将介绍Pyglet框架的一些重要方面。
- en: Important components
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 重要组件
- en: We will briefly discuss some of the important modules and packages of Pyglet
    that we will use. Note that this is just a tiny chunk of the Pyglet framework.
    Please review the Pyglet documentation to know more about its capabilities, as
    this is beyond the scope of this book.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将简要讨论我们将使用的Pyglet的一些重要模块和包。请注意，这仅仅是Pyglet框架的一小部分。请查阅Pyglet文档以了解更多关于其功能的信息，因为这超出了本书的范围。
- en: Window
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 窗口
- en: The `pyglet.window.Window` module provides the user interface. It is used to
    create a window with an OpenGL context. The `Window` class has API methods to
    handle various events such as mouse and keyboard events. The window can be viewed
    in normal or full screen mode. Here is a simple example of creating a `Window`
    instance. You can define a size by specifying `width` and `height` arguments in
    the constructor.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`pyglet.window.Window`模块提供了用户界面。它用于创建具有OpenGL上下文的窗口。`Window`类有API方法来处理各种事件，如鼠标和键盘事件。窗口可以以正常或全屏模式查看。以下是一个创建`Window`实例的简单示例。您可以通过在构造函数中指定`width`和`height`参数来定义大小。'
- en: '[PRE2]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The background color for the image can be set using OpenGL call `glClearColor`,
    as follows:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 使用OpenGL调用`glClearColor`可以设置图像的背景颜色，如下所示：
- en: '[PRE3]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This sets a white background color. The first three arguments are the red, green,
    and blue color values. Whereas, the last value represents the alpha. The following
    code will set up a gray background color.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置白色背景颜色。前三个参数是红色、绿色和蓝色颜色值。而最后一个值代表alpha。以下代码将设置灰色背景颜色。
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The following illustration shows a screenshot of an empty window with a gray
    background color.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: The following illustration shows a screenshot of an empty window with a gray
    background color.
- en: '![Window](img/0165_4_1.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![窗口](img/0165_4_1.jpg)'
- en: Image
  id: totrans-53
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 图像
- en: The `pyglet.image` module enables the drawing of images on the screen. The following
    code snippet shows a way to create an image and display it at a specified position
    within the Pyglet window.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: The `pyglet.image` module enables the drawing of images on the screen. The following
    code snippet shows a way to create an image and display it at a specified position
    within the Pyglet window.
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: A later section will cover some important operations supported by the `pyglet.image`
    module.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 后续部分将介绍`pyglet.image`模块支持的一些重要操作。
- en: Sprite
  id: totrans-57
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 精灵
- en: This is another important module. It is used to display an image or an animation
    frame within a Pyglet window discussed earlier. It is an image instance that allows
    us to position an image anywhere within the Pyglet window. A `sprite` can also
    be rotated and scaled. It is possible to create multiple sprites of the same image
    and place them at different locations and with different orientations inside the
    window.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个另一个重要的模块。它用于在之前讨论的Pyglet窗口中显示图像或动画帧。它是一个图像实例，允许我们在Pyglet窗口的任何位置定位图像。精灵也可以旋转和缩放。可以创建多个相同图像的精灵并将它们放置在窗口的不同位置和不同的方向上。
- en: Animation
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 动画
- en: '`Animation` module is a part of `pyglet.image` package. As the name indicates,
    `pyglet.image.Animation` is used to create an animation from one or more image
    frames. There are different ways to create an animation. For example, it can be
    created from a sequence of images or using `AnimationFrame` objects. We will study
    these techniques later in the chapter. An animation sprite can be created and
    displayed within the Pyglet window.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`Animation`模块是`pyglet.image`包的一部分。正如其名所示，`pyglet.image.Animation`用于从一个或多个图像帧创建动画。有不同方式来创建动画。例如，可以从一系列图像或使用`AnimationFrame`对象创建。我们将在本章后面学习这些技术。可以在Pyglet窗口中创建并显示动画精灵。'
- en: AnimationFrame
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: AnimationFrame
- en: This creates a single frame of an animation from a given image. An animation
    can be created from such `AnimationFrame` objects. The following line of code
    shows an example.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这从给定的图像创建一个动画的单帧。可以从这样的`AnimationFrame`对象创建动画。以下代码行显示了一个示例。
- en: '[PRE6]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`anim_frames` is a list containing instances of `AnimationFrame`.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`anim_frames`是一个包含`AnimationFrame`实例的列表。'
- en: Clock
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 时钟
- en: Among many other things, this module is used for scheduling functions to be
    called at a specified time. For example, the following code calls a method `moveObjects`
    ten times every second.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多其他功能中，此模块用于安排在指定时间调用函数。例如，以下代码每秒调用`moveObjects`方法十次。
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Displaying an image
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 显示图像
- en: In the *Image* sub-section, we learned how to load an image using `image.blit`.
    However, image *blitting* is a less efficient way of drawing images. There is
    a better and preferred way to display the image by creating an instance of `Sprite`.
    Multiple `Sprite` objects can be created for drawing the same image. For example,
    the same image might need to be displayed at various locations within the window.
    Each of these images should be represented by separate `Sprite` instances. The
    following simple program just loads an image and displays the `Sprite` instance
    representing this image on the screen.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图像*子部分中，我们学习了如何使用`image.blit`加载图像。然而，图像*块拷贝*是一种效率较低的绘图方式。通过创建`Sprite`实例，有更好的和推荐的方式来显示图像。可以为绘制相同图像创建多个`Sprite`对象。例如，相同的图像可能需要在窗口的多个位置显示。每个这样的图像都应该由单独的`Sprite`实例表示。以下简单的程序仅加载一个图像并在屏幕上显示代表此图像的`Sprite`实例。
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: On line 3, the image is opened using `pyglet.image.load` call. A `Sprite` instance
    corresponding to this image is created on line 4\. The code on line 6 sets white
    background for the window. The `on_draw` is an API method that is called when
    the window needs to be redrawn. Here, the image sprite is drawn on the screen.
    The next illustration shows a loaded image within a Pyglet window.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在第3行，使用`pyglet.image.load`调用打开图像。在第4行创建与该图像对应的`Sprite`实例。第6行的代码为窗口设置白色背景。`on_draw`是一个API方法，当窗口需要重绘时会被调用。在这里，图像精灵被绘制到屏幕上。下一图显示了Pyglet窗口中的加载图像。
- en: Tip
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 提示
- en: 'In various examples in this chapter and others, the file path strings are hardcoded.
    We have used forward slashes for the file path. Although this works on Windows
    platform, the convention is to use backward slashes. For example, `images/car.png`
    is represented as `images\car.png`. Additionally, you can also specify a complete
    path to the file by using the `os.path.join` method in Python. Regardless of what
    slashes you use, the `os.path.normpath` will make sure it modifies the slashes
    to fit to the ones used for the platform. The use of `os.path.normpath` is illustrated
    in the following snippet:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章和其他章节的各个示例中，文件路径字符串是硬编码的。我们使用了正斜杠作为文件路径。尽管这在 Windows 平台上有效，但惯例是使用反斜杠。例如，`images/car.png`
    表示为 `images\car.png`。此外，您还可以使用 Python 中的 `os.path.join` 方法指定文件的完整路径。无论您使用什么斜杠，`os.path.normpath`
    都会确保它修改斜杠以适应平台。以下代码片段展示了 `os.path.normpath` 的使用：
- en: '`import os`'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`import os`'
- en: '`original_path = ''C:/images/car.png`"'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`original_path = ''C:/images/car.png''`'
- en: '`new_path = os.path.normpath(original_path)`'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`new_path = os.path.normpath(original_path)`'
- en: '![Displaying an image](img/0165_4_2.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![显示图像](img/0165_4_2.jpg)'
- en: The preceding image illustrates Pyglet window showing a still image.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图像展示了 Pyglet 窗口显示的静态图像。
- en: Mouse and keyboard controls
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 鼠标和键盘控制
- en: The `Window` module of Pyglet implements some API methods that enable user input
    to a playing animation. The API methods such as `on_mouse_press` and `on_key_press`
    are used to capture mouse and keyboard events during the animation. These methods
    can be overridden to perform a specific operation.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: Pyglet 的 `Window` 模块实现了一些 API 方法，这些方法允许用户在播放动画时输入。API 方法如 `on_mouse_press` 和
    `on_key_press` 用于在动画期间捕获鼠标和键盘事件。这些方法可以被覆盖以执行特定操作。
- en: Adding sound effects
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加音效
- en: The `media` module of Pyglet supports audio and video playback. The following
    code loads a media file and plays it during the animation.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Pyglet 的 `media` 模块支持音频和视频播放。以下代码加载一个媒体文件并在动画期间播放它。
- en: '[PRE9]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The second optional argument provided on line 3 decodes the media file completely
    in the memory at the time the media is loaded. This is important if the media
    needs to be played several times during the animation. The API method `play()`
    starts streaming the specified media file.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在第 3 行提供的第二个可选参数在加载媒体时将媒体文件完全解码到内存中。如果媒体在动画期间需要播放多次，这很重要。API 方法 `play()` 开始流式传输指定的媒体文件。
- en: Animations with Pyglet
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Pyglet 的动画
- en: The Pyglet framework provides a number of modules required to develop animations.
    Many of these were discussed briefly in earlier sections. Lets now learn techniques
    to create 2D animations using Pyglet.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Pyglet 框架提供了一系列开发动画所需的模块。其中许多在早期章节中已简要讨论。现在让我们学习使用 Pyglet 创建 2D 动画的技术。
- en: Viewing an existing animation
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 查看现有动画
- en: If you already have an animation in, for example, `.gif` file format, it can
    be loaded and displayed directly with Pyglet. The API method to use here is `pyglet.image.load_animation`.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已经有一个动画，例如，`.gif` 文件格式，它可以直接使用 Pyglet 加载和显示。这里要使用的 API 方法是 `pyglet.image.load_animation`。
- en: Time for action - viewing an existing animation
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 查看现有动画的行动时间
- en: This is going to be a short exercise. The goal of this section is to develop
    a primary understanding on use of Pyglet for viewing animations. So let's get
    on with it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是一个简短的练习。本节的目标是培养对使用 Pyglet 查看动画的初步理解。那么，让我们开始吧。
- en: 'Download the file `SimpleAnimation.py` from the Packt website. Also download
    the file `SimpleAnimation.gif` and place it in a sub-directory `images`. The code
    is illustrated as follows:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载文件 `SimpleAnimation.py`。同时下载文件 `SimpleAnimation.gif` 并将其放置在子目录 `images`
    中。代码如下所示：
- en: '[PRE10]'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The code is self-explanatory. On line 3, the API method image.load_animation
    creates an instance of class image.Animation using the specified animation file.
    For this animation, a Sprite object is created on line 7\. The Pyglet window created
    on line 12 will be used to display the animation. The size of this window is specified
    by the height and width of the animSprite. The background color for the window
    is set using OpenGL call glClearColor.
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码是自我解释的。在第 3 行，API 方法 image.load_animation 使用指定的动画文件创建了一个 image.Animation 类的实例。对于这个动画，在第
    7 行创建了一个 Sprite 对象。第 12 行创建的 Pyglet 窗口将用于显示动画。这个窗口的大小由 animSprite 的高度和宽度指定。使用
    OpenGL 调用 glClearColor 设置窗口的背景颜色。
- en: Next, we need to draw this animation sprite into the Pyglet window. The `pyglet.window`
    defines API method `on_draw` which gets called when an event occurs. The call
    to the `draw()` method of animation `Sprite` is made on line 25 to render the
    animation on screen. The code on line 22 is important. The `decorator, @win.event`
    allows us to modify the `on_draw` API method of `pyglet.window.Window` when an
    event occurs. Finally code on line 27 runs this application.
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们需要将这个动画精灵绘制到 Pyglet 窗口中。`pyglet.window` 定义了一个 API 方法 `on_draw`，当发生事件时会被调用。在
    25 行调用了动画 `Sprite` 的 `draw()` 方法，以在屏幕上渲染动画。第 22 行的代码很重要。装饰器 `@win.event` 允许我们在事件发生时修改
    `pyglet.window.Window` 的 `on_draw` API 方法。最后，第 27 行运行了这个应用程序。
- en: Tip
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You can create your own animation file like `SimpleAnimation.gif` using freely
    available image editing software packages like GIMP. This animation file was created
    using GIMP 2.6.7, by drawing each of the characters on a separate layer and then
    blending all the layers using **Filters** | **Animation** | **Blend**.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 你可以使用像 GIMP 这样的免费图像编辑软件包创建自己的动画文件，例如 `SimpleAnimation.gif`。这个动画文件是使用 GIMP 2.6.7
    创建的，通过在每个单独的图层上绘制每个角色，然后使用 **滤镜** | **动画** | **混合** 将所有图层混合在一起。
- en: 'Put the file `SimpleAnimation.py` along with the animation file `SimpleAnimation.gif`
    in the same directory and then run the program as follows:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件 `SimpleAnimation.py` 与动画文件 `SimpleAnimation.gif` 放在同一目录下，然后按照以下方式运行程序：
- en: '[PRE11]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This will show the animation in a Pyglet window. You can use a different animation
    file instead of SimpleAnimation.gif. Just modify the related code in this file
    or add code to accept any GIF file as a command-line argument for this program.
    The next illustration shows some of the frames from this animation at different
    time intervals.
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将在 Pyglet 窗口中显示动画。你可以使用除 SimpleAnimation.gif 之外的动画文件。只需修改此文件中相关的代码，或者添加代码以接受任何
    GIF 文件作为此程序的命令行参数。下一幅插图显示了该动画在不同时间间隔的一些帧。
- en: '![Time for action - viewing an existing animation](img/0165_4_3.jpg)![Time
    for action - viewing an existing animation](img/0165_4_4.jpg)![Time for action
    - viewing an existing animation](img/0165_4_5.jpg)![Time for action - viewing
    an existing animation](img/0165_4_6.jpg)'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![动作时间 - 查看现有动画](img/0165_4_3.jpg)![动作时间 - 查看现有动画](img/0165_4_4.jpg)![动作时间
    - 查看现有动画](img/0165_4_5.jpg)![动作时间 - 查看现有动画](img/0165_4_6.jpg)'
- en: The preceding image is a screen capture of a running animation at different
    time intervals.
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 上一幅图像是不同时间间隔运行动画的屏幕截图。
- en: What just happened?
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We worked out an example where an already created animation file was loaded
    and viewed using Pyglet. This short exercise taught us some preliminary things
    about viewing animations using Pyglet. For example, we learned how to create a
    Pyglet window and load an animation using `pyglet.Sprite` object. These fundamentals
    will be used throughout this chapter.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过一个示例演示了如何使用 Pyglet 加载并查看已创建的动画文件。这个简短的练习让我们了解了使用 Pyglet 查看动画的一些初步知识。例如，我们学习了如何创建
    Pyglet 窗口并使用 `pyglet.Sprite` 对象加载动画。这些基础知识将在本章中用到。
- en: Animation using a sequence of images
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用一系列图像进行动画
- en: The API method `Animation.from_image_sequence` enables creation of an animation
    using a bunch of sequential images. Each of the images is displayed as a frame
    in the animation, one after the other. The time for which each frame is displayed
    can be specified as an argument while creating the animation object. It can also
    be set after the animation instance is created.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: API 方法 `Animation.from_image_sequence` 允许使用一系列连续的图像创建动画。每个图像都作为动画中的一帧显示，依次排列。可以在创建动画对象时指定每帧显示的时间，也可以在动画实例创建后设置。
- en: Time for action - animation using a sequence of images
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间 - 使用一系列图像进行动画
- en: Let's develop a tool that can create an animation and display it on the screen.
    This tool will create and display the animation using the given image files. Each
    of the image files will be displayed as a frame in the animation for a specified
    amount of time. This is going to be a fun little animation that shows a grandfather
    clock with a pendulum. We will animate the pendulum oscillations with other things,
    including making the dial remaining still. This animation has only three image
    frames; two of them show the pendulum at opposite extremes. These images are sequenced
    as shown in the next illustration.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开发一个工具，可以创建动画并在屏幕上显示。这个工具将使用给定的图像文件创建并显示动画。每个图像文件都将作为动画中的一帧显示，持续指定的时间。这将是一个有趣的动画，展示了一个带有摆锤的祖父钟。我们将使用其他东西来动画化摆锤的振荡，包括使表盘保持静止。这个动画只有三个图像帧；其中两个显示了摆锤在相反的极端位置。这些图像的顺序如图所示。
- en: '![Time for action - animation using a sequence of images](img/0165_4_7.jpg)![Time
    for action - animation using a sequence of images](img/0165_4_8.jpg)![Time for
    action - animation using a sequence of images](img/0165_4_9.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![动作时间 - 使用一系列图像的动画](img/0165_4_7.jpg)![动作时间 - 使用一系列图像的动画](img/0165_4_8.jpg)![动作时间
    - 使用一系列图像的动画](img/0165_4_9.jpg)'
- en: Clock image frames to be animated appear in the preceding image.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 动画的时间图像帧出现在前面的图像中。
- en: Download the file `ImageSequenceAnimation.py` from the Packt website.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从Packt网站下载文件`ImageSequenceAnimation.py`。
- en: The code in this file is presented below.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该文件中的代码如下所示。
- en: '[PRE12]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The tuple, image_frames contains the paths for the images. The map function
    call on line 8 creates pyglet.image objects corresponding to each of the image
    paths and stores the resultant images in a list. On line 16, the animation is
    created using the API method Animation.from_image_sequence. This method takes
    the list of image objects as an argument. The other optional argument is the time
    in seconds for which each of the frames will be shown. We set this time as 0.33
    seconds per image so that the total time for a complete animation loop is nearly
    1 second. Thus, in the animation, one complete oscillation of the pendulum will
    be complete in about one second. We already discussed the rest of the code in
    an earlier section.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 元组`image_frames`包含图像的路径。第8行的`map`函数调用为每个图像路径创建pyglet.image对象，并将结果图像存储在列表中。在第16行，使用API方法`Animation.from_image_sequence`创建动画。此方法将图像对象列表作为参数。另一个可选参数是每帧显示的秒数。我们将此时间设置为每张图像0.33秒，以便整个动画循环的总时间接近1秒。因此，在动画中，摆锤的一次完整振荡将在大约一秒内完成。我们已经在早期部分讨论了其余的代码。
- en: '[PRE13]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Place the image files in a sub-directory `images` within the directory in which
    file `ImageSequenceAnimation.py` is placed. Then run the program using:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将图像文件放置在包含文件`ImageSequenceAnimation.py`的目录下的子目录`images`中。然后使用以下命令运行程序：
- en: You will see a clock with an oscillating pendulum in the window. The animation
    will continue in a loop and closing the window will end it.
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你将在窗口中看到一个带有摆动摆锤的时钟。动画将循环进行，关闭窗口将结束动画。
- en: What just happened?
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: By rapidly displaying still images, we just created something like a 'flipbook'
    cartoon! We developed a simple utility that takes a sequence of images as an input
    and creates an animation using Pyglet. To accomplish this task, we used `Animation.from_image_sequence`
    to create the animation and re-used most of the framework from the *Viewing an
    existing animation* section.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 通过快速显示静态图像，我们刚刚创建了一个类似“翻页书”的卡通！我们开发了一个简单的实用工具，它接受一系列图像作为输入，并使用Pyglet创建动画。为了完成这个任务，我们使用了`Animation.from_image_sequence`来创建动画，并重新使用了*查看现有动画*部分的大部分框架。
- en: Single image animation
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 单个图像动画
- en: Imagine that you are creating a cartoon movie where you want to animate the
    motion of an arrow or a bullet hitting a target. In such cases, typically it is
    just a single image. The desired animation effect is accomplished by performing
    appropriate translation or rotation of the image.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你正在制作一部卡通电影，你想要动画化箭头或子弹击中目标的动作。在这种情况下，通常只有一个图像。所需的动画效果是通过执行适当的平移或旋转图像来实现的。
- en: Time for action - bouncing ball animation
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间 - 弹跳球动画
- en: Lets create a simple animation of a 'bouncing ball'. We will use a single image
    file, `ball.png`, which can be downloaded from the Packt website. The dimensions
    of this image in pixels are 200x200, created on a transparent background. The
    following screenshot shows this image opened in GIMP image editor. The three dots
    on the ball identify its side. We will see why this is needed. Imagine this as
    a ball used in a bowling game.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个简单的“弹跳球”动画。我们将使用单个图像文件，`ball.png`，可以从 Packt 网站下载。此图像的像素尺寸为 200x200，是在透明背景上创建的。以下截图显示了在
    GIMP 图像编辑器中打开的此图像。球上的三个点标识了其侧面。我们将看到为什么这是必要的。想象这是一个用于保龄球的球。
- en: '![Time for action - bouncing ball animation](img/0165_4_10.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![动作时间 - 弹跳球动画](img/0165_4_10.jpg)'
- en: The image of a ball opened in GIMP appears as shown in the preceding image.
    The ball size in pixels is 200x200.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 GIMP 中打开的球图像如图所示。球的像素大小为 200x200。
- en: Download the files `SingleImageAnimation.py` and `ball.png` from the Packt website.
    Place the `ball.png` file in a sub-directory 'images' within the directory in
    which `SingleImageAnimation.py` is saved.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载文件 `SingleImageAnimation.py` 和 `ball.png`。将 `ball.png` 文件放置在 `SingleImageAnimation.py`
    所在目录的子目录 'images' 中。
- en: The following code snippet shows the overall structure of the code.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下代码片段显示了代码的整体结构。
- en: '[PRE14]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Although it is not required, we will encapsulate event handling and other functionality
    within a class SingleImageAnimation. The program to be developed is short, but
    in general, it is a good coding practice. It will also be good for any future
    extension to the code. An instance of SingleImageAnimation is created on line
    14\. This class is inherited from pyglet.window.Window. It encapsulates the functionality
    we need here. The API method on_draw is overridden by the class. on_draw is called
    when the window needs to be redrawn. Note that we no longer need a decorator statement
    such as @win.event above the on_draw method because the window API method is simply
    overridden by this inherited class.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 虽然这不是必需的，但我们将将事件处理和其他功能封装在 `SingleImageAnimation` 类中。要开发的应用程序很短，但通常，这是一种良好的编码实践。这也将有利于代码的任何未来扩展。在第
    14 行创建了一个 `SingleImageAnimation` 实例。这个类是从 `pyglet.window.Window` 继承的。它封装了我们这里需要的功能。类重写了
    API 方法 `on_draw`。当窗口需要重绘时调用 `on_draw`。请注意，我们不再需要在 `on_draw` 方法上方使用如 `@win.event`
    这样的装饰器语句，因为窗口 API 方法只是通过这个继承类被重写。
- en: 'The constructor of the class `SingleImageAnimation` is as follows:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`SingleImageAnimation` 类的构造函数如下：'
- en: '[PRE15]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: As mentioned earlier, the class SingleImageAnimation inherits pyglet.window.Window.
    However, its constructor doesn't take all the arguments supported by its super
    class. This is because we don't need to change most of the default argument values.
    If you want to extend this application further and need these arguments, you can
    do so by adding them as __init__ arguments. The constructor initializes some instance
    variables and then calls methods to create the animation sprite and resize the
    window respectively.
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，`SingleImageAnimation` 类继承自 `pyglet.window.Window`。然而，其构造函数并不接受其超类支持的所有参数。这是因为我们不需要更改大多数默认参数值。如果你想进一步扩展此应用程序并需要这些参数，你可以通过将它们作为
    `__init__` 参数添加来实现。构造函数初始化一些实例变量，然后调用方法创建动画精灵和调整窗口大小。
- en: The method `createDrawableObjects` creates a sprite instance using the `ball.png`
    image.
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`createDrawableObjects` 方法使用 `ball.png` 图像创建一个精灵实例。'
- en: '[PRE16]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The anchor_x and anchor_y properties of the image instance are set such that
    the image has an anchor exactly at its center. This will be useful while rotating
    the image later. On line 10, the sprite instance self.ballSprite is created. Later,
    we will be setting the width and height of the Pyglet window as twice of the sprite
    width and thrice of the sprite height. The position of the image within the window
    is set on line 11\. The initial position is chosen as shown in the next screenshot.
    In this case, there is only one Sprite instance. However, to make the program
    more general, a list of drawable objects called self.drawableObjects is maintained.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 图像实例的 `anchor_x` 和 `anchor_y` 属性被设置为图像有一个锚点正好在其中心。这在稍后旋转图像时将很有用。在第 10 行，创建了精灵实例
    `self.ballSprite`。稍后，我们将设置 Pyglet 窗口的宽度和高度为精灵宽度的两倍和高度的三倍。图像在窗口中的位置在第 11 行设置。初始位置选择如图所示。在这种情况下，只有一个
    Sprite 实例。然而，为了使程序更通用，维护了一个名为 `self.drawableObjects` 的可绘制对象列表。
- en: To continue the discussion from the previous step, we will now review the `on_draw`
    method.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了继续上一步的讨论，我们现在将回顾 `on_draw` 方法。
- en: '[PRE17]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: As mentioned previously, the on_draw function is an API method of class pyglet.window.Window
    that is called when a window needs to be redrawn. This method is overridden here.
    The self.clear() call clears the previously drawn contents within the window.
    Then, all the Sprite objects in the list self.drawableObjects are drawn in the
    for loop.![Time for action - bouncing ball animation](img/0165_4_11.jpg)
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如前所述，on_draw函数是pyglet.window.Window类的API方法，当窗口需要重绘时被调用。这里重写了这个方法。self.clear()调用清除了窗口中之前绘制的所有内容。然后，在for循环中绘制列表self.drawableObjects中的所有Sprite对象。![动作时间
    - 弹跳球动画](img/0165_4_11.jpg)
- en: The preceding image illustrates the initial ball position in the animation.
  id: totrans-138
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前面的图片展示了动画中球的初始位置。
- en: 'The method `adjustWindowSize` sets the `width` and `height` parameters of the
    Pyglet window. The code is self-explanatory:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 方法`adjustWindowSize`设置了Pyglet窗口的`width`和`height`参数。代码是自我解释的：
- en: '[PRE18]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: So far, we have set up everything for the animation to play. Now comes the fun
    part. We will change the position of the sprite representing the image to achieve
    the animation effect. During the animation, the image will also be rotated, to
    give it the natural feel of a bouncing ball.
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经为动画的播放设置了所有必要的东西。现在轮到有趣的部分了。我们将改变代表图片的精灵的位置，以实现动画效果。在动画过程中，图片也会被旋转，以使其看起来像是一个自然弹跳的球。
- en: '[PRE19]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This method is scheduled to be called 20 times per second using the following
    code in the program.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个方法计划在程序中以每秒20次的频率被调用。
- en: '[PRE20]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: To start with, the ball is placed near the top. The animation should be such
    that it gradually falls down, hits the bottom, and bounces back. After this, it
    continues its upward journey to hit a boundary somewhere near the top and again
    it begins its downward journey. The code block from lines 2 to 5 checks the current
    y position of self.ballSprite. If it has hit the upward limit, the flag self.rising
    is set to False. Likewise, when the lower limit is hit, the flag is set to True.
    The flag is then used by the next code snippet to increment or decrement the y
    position of self.ballSprite.
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 首先，球被放置在顶部附近。动画应该逐渐下落，碰到底部后弹起。之后，它继续向上运动，在顶部附近的一个边界处碰撞，然后再次开始向下运动。从第2行到第5行的代码块检查self.ballSprite的当前y位置。如果它触碰到上限，self.rising标志被设置为False。同样，当触碰到下限，标志被设置为True。这个标志随后被下一个代码片段用来增加或减少self.ballSprite的y位置。
- en: The highlighted lines of code rotate the `Sprite` instance. The current rotation
    angle is incremented or decremented by the given value. This is the reason why
    we set the image anchors, `anchor_x` and `anchor_y` at the center of the image.
    The `Sprite` object honors these image anchors. If the anchors are not set this
    way, the ball will be seen wobbling in the resultant animation.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 高亮显示的代码行旋转`Sprite`实例。当前的旋转角度根据给定值增加或减少。这就是为什么我们将图像锚点`anchor_x`和`anchor_y`设置在图像中心的原因。`Sprite`对象尊重这些图像锚点。如果锚点没有这样设置，球在最终动画中看起来会摇摆不定。
- en: 'Once all the pieces are in place, run the program from the command line as:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦所有部件都到位，可以从命令行运行程序：
- en: '[PRE21]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This will pop up a window that will play the bouncing ball animation. The next
    illustration shows some intermediate frames from the animation while the ball
    is falling down.![Time for action - bouncing ball animation](img/0165_4_11.jpg)![Time
    for action - bouncing ball animation](img/0165_4_12.jpg)![Time for action - bouncing
    ball animation](img/0165_4_13.jpg)![Time for action - bouncing ball animation](img/0165_4_14.jpg)
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将弹出一个窗口，播放弹跳球动画。接下来的插图显示了动画中球下落时的几个中间帧。![动作时间 - 弹跳球动画](img/0165_4_11.jpg)![动作时间
    - 弹跳球动画](img/0165_4_12.jpg)![动作时间 - 弹跳球动画](img/0165_4_13.jpg)![动作时间 - 弹跳球动画](img/0165_4_14.jpg)
- en: What just happened?
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We learned how to create an animation using just a single image. The image of
    a ball was represented by a sprite instance. This sprite was then translated and
    rotated on the screen to accomplish a bouncing ball animation. The whole functionality,
    including the event handling, was encapsulated in the class `SingleImageAnimation`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何仅使用一张图片来创建动画。一个球的形象由一个精灵实例表示。然后这个精灵在屏幕上被平移和旋转，以实现弹跳球的动画。整个功能，包括事件处理，都被封装在类`SingleImageAnimation`中。
- en: 'Project: a simple bowling animation'
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目：一个简单的保龄球动画
- en: It's time for a small project. We will re-use most of the code we used in the
    *Single Image Animation* section and some more stuff to create an animation where
    a rolling ball hits a pin in a bowling game. Although this chapter covers animation,
    this project will give you a preliminary understanding on how to turn an animation
    into a game. This is not a real game as such, but it will involve some user interactions
    to control the animation.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候进行一个小项目了。我们将重用 *Single Image Animation* 部分的大部分代码和一些其他内容，以创建一个动画，其中滚动的球在保龄球游戏中击中球柱。尽管本章涵盖了动画，但这个项目将让你初步了解如何将动画转变为游戏。这并不是一个真正的游戏，但它将涉及一些用户交互来控制动画。
- en: '![Project: a simple bowling animation](img/0165_4_15.jpg)'
  id: totrans-154
  prefs: []
  type: TYPE_IMG
  zh: '![项目：一个简单的保龄球动画](img/0165_4_15.jpg)'
- en: The starting position in the bowling animation, showing ball and pin images.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 保龄球动画的起始位置，显示了球和球图片。
- en: Time for action - a simple bowling animation
  id: totrans-156
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间 - 一个简单的保龄球动画
- en: Let's develop the code for this application. As mentioned earlier, a big chunk
    of the code comes from the *Single Image Animation* section. So we will only discuss
    the new and modified methods needed to create a bowling animation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们开发这个应用程序的代码。如前所述，大部分代码来自 *Single Image Animation* 部分。因此，我们只讨论创建保龄球动画所需的新和修改的方法。
- en: Download the Python source file `BowlingAnimation.py` from the Packt website.
    The overall class design is the same as the one developed in the *Single Image
    Animation* section. We will only discuss the new and modified methods. You can
    review the rest of the code from this file.
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载 Python 源文件 `BowlingAnimation.py`。整体类设计与在 *Single Image Animation*
    部分开发的设计相同。我们只讨论新的和修改的方法。你可以从该文件中查看其余的代码。
- en: Also, download the image files used in this project. These files are `ball.png`
    and `pin.png`. Place these files in a sub-directory `images`. The `images` directory
    should be placed in the directory in which the above Python source file is located.
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此外，下载本项目中使用的图像文件。这些文件是 `ball.png` 和 `pin.png`。将这些文件放置在子目录 `images` 中。`images`
    目录应放置在上述 Python 源文件所在的目录中。
- en: 'The `__init__` method of the class is identical to that of class `SingleImageAnimation`.
    The only change here is that it initializes the following flags:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类的 `__init__` 方法与 `SingleImageAnimation` 类的 `__init__` 方法相同。这里唯一的改变是初始化以下标志：
- en: '[PRE22]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The flag self.pinHorizontal is used later to check if the pin is knocked out
    by the ball. Whereas, self.paused is used to pause or resume the animation depending
    on its value.
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 后续使用 self.pinHorizontal 标志来检查球是否将球撞倒。而 self.paused 用于根据其值暂停或恢复动画。
- en: 'The `createDrawable` object method is modified to create a sprite instance
    for the pin image. Also, the position of the ball and pin sprites are adjusted
    for our animation needs. The code is presented as follows:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`createDrawable` 对象方法被修改为为球图片创建精灵实例。同时，调整球和球精灵的位置以适应我们的动画需求。代码如下所示：'
- en: '[PRE23]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The code block 6-8 creates an image instance for the pin image and then sets
    the image anchor at its center. The Sprite instances representing ball and pin
    images are created on lines 10 and 14 respectively. Their positions are set such
    that the initial positions appear as shown in the earlier illustration. Finally
    these sprites are added to the list of drawable objects that are drawn in on_draw
    method.
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码块 6-8 创建了一个代表球图片的图像实例，并将其图像锚点设置在其中心。代表球和球图片的 Sprite 实例分别在 10 行和 14 行创建。它们的设置位置使得初始位置看起来与前面的插图所示相同。最后，将这些精灵添加到在
    on_draw 方法中绘制的可绘制对象列表中。
- en: Next, let's review the `moveObjects` method. As before, this method is called
    every `0.05` seconds.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们回顾 `moveObjects` 方法。与之前一样，这个方法每 `0.05` 秒被调用一次。
- en: '[PRE24]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The if block, from lines 6 to 13, is called for when the x position of the ball
    sprite is between 100 pixels to twice the width of the self.ballSprite. On line
    12, the x position of self.ballSprite is incremented by 5 pixels. Also, the sprite
    is rotated by 5 degrees. The combination of these two transforms creates an effect
    where we see the ball rolling horizontally, from left to right, inside the Pyglet
    window. As seen earlier, the center of the pin is located at x = self.ballSprite.width*2
    + 100 and y = self.ballSprite.height.
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当球精灵的 x 位置在 100 像素到 self.ballSprite 宽度的两倍之间时，会调用从第 6 行到第 13 行的 if 块。在第 12 行，self.ballSprite
    的 x 位置增加了 5 像素。此外，精灵旋转了 5 度。这两个变换的组合产生了一种效果，我们在 Pyglet 窗口中看到球从左到右水平滚动。如前所述，球心的位置在
    x = self.ballSprite.width*2 + 100 和 y = self.ballSprite.height。
- en: The if block from lines 15 to 18 is where the ball appears to have hit the pin.
    That is, the x coordinate of ball sprite center is about 100 pixels away from
    the center of the pin. The 100-pixel value is chosen to account for the ball radius.
    Therefore, once the ball hits the pin, the pin image is rotated by 90 degrees
    (line 16). This creates a visual effect where the pin appears to be knocked down
    by the ball. The x coordinate of the pin is incremented by 100 pixels so that,
    after the pin rotation, the ball and pin images don't overlap. You can do some
    more improvement here. Shift the y position of the pin sprite further down, so
    that the pin appears lying on the ground. In this if block, we also set the flag
    self.pinHorizontal to True. When the moveObjects method is called the next time,
    the first thing that is checked is whether the pin is vertical or horizontal.
    If the pin is horizontal, the original positions of the ball and pin are restored
    by the code on lines 2 to 4\. This is a preparation for the next animation loop.
    On line 9, the pin is rotated back to 0 degree, whereas on line 10, the flag self.pinHorizontal
    is reset to False.
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 从第 15 行到第 18 行的 if 块是球似乎击中柱子的地方。也就是说，球精灵中心的 x 坐标大约离柱子中心 100 像素。选择 100 像素值是为了考虑到球的半径。因此，一旦球击中柱子，柱子图像在第
    16 行旋转了 90 度。这产生了一种视觉效果，看起来球把柱子撞倒了。柱子的 x 坐标增加了 100 像素，这样在柱子旋转后，球和柱子图像不会重叠。你还可以在这里做一些改进。将柱子精灵的
    y 位置进一步向下移动，这样柱子看起来就像躺在地面上。在这个 if 块中，我们还设置了标志 self.pinHorizontal 为 True。下次调用 moveObjects
    方法时，首先检查柱子是垂直还是水平。如果柱子是水平的，代码在第 2 行到第 4 行将恢复球和柱子的原始位置。这是为下一个动画循环做准备。在第 9 行，柱子被旋转回
    0 度，而在第 10 行，标志 self.pinHorizontal 被重置为 False。
- en: With the code we developed so far, and with the remaining code from class `SingleImageAnimation`,
    if you run the program, it will show the bowling animation. Now let's add some
    controls to this animation. A flag, `self.paused`, was initialized in the constructor.
    It will be used here. Just like `on_draw, on_key_press` is another API method
    of `pyglet.window.Window`. It is overridden here to implement pause and resume
    controls.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们迄今为止开发的代码，以及来自 `SingleImageAnimation` 类的其余代码，如果你运行程序，它将显示保龄球动画。现在让我们为此动画添加一些控制。在构造函数中初始化了一个标志
    `self.paused`。它将在这里使用。就像 `on_draw` 一样，`on_key_press` 是 `pyglet.window.Window`
    的另一个 API 方法。它在这里被重写以实现暂停和恢复控制。
- en: '[PRE25]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The key argument is one of the keyboard keys pressed by the user. The if block
    from lines 2 to 4 pauses the animation when P key is pressed. The method self.moveObjects
    is scheduled to be called every 0.05 seconds. The scheduled callback to this method
    is canceled using the pyglet.clock.unschedule method. To resume the animation,
    the schedule_interval method is called on line 6\. The self.paused flag ensures
    that the multiple keypresses won't have any undesirable effect on the animation.
    For example, if you press the R key multiple times, the code will just ignore
    the keypress events that follow.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 关键参数是用户按下的键盘键。从第 2 行到第 4 行的 if 块在按下 P 键时暂停动画。self.moveObjects 方法每 0.05 秒被调度一次。使用
    pyglet.clock.unschedule 方法取消对该方法的调度。要恢复动画，在第 6 行调用 schedule_interval 方法。self.paused
    标志确保多次按键不会对动画产生任何不良影响。例如，如果你多次按下 R 键，代码将仅忽略随后的按键事件。
- en: 'Refer to the file `BowlingAnimation.py` to review or develop the rest of the
    code and then run the program from the command line as:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参阅文件 `BowlingAnimation.py` 以查看或开发其余代码，然后从命令行运行程序，如下所示：
- en: '[PRE26]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This will pop up a window in which the animation will be played. Press the P
    key on the keyboard to pause the animation. To resume a paused animation, press
    the R key. The next illustration shows a few intermediate frames in this animation.![Time
    for action - a simple bowling animation](img/0165_4_16.jpg)![Time for action -
    a simple bowling animation](img/0165_4_17.jpg)![Time for action - a simple bowling
    animation](img/0165_4_18.jpg)![Time for action - a simple bowling animation](img/0165_4_19.jpg)
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将在窗口中播放动画。按键盘上的 P 键暂停动画。要恢复暂停的动画，按 R 键。下一张插图显示了该动画中的几个中间帧。![动作时间 - 一个简单的保龄球动画](img/0165_4_16.jpg)![动作时间
    - 一个简单的保龄球动画](img/0165_4_17.jpg)![动作时间 - 一个简单的保龄球动画](img/0165_4_18.jpg)![动作时间
    - 一个简单的保龄球动画](img/0165_4_19.jpg)
- en: The intermediate frames in the bowling animation appear as shown in the preceding
    image.
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保龄球动画的中间帧如图所示。
- en: What just happened?
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We completed a simple but exciting project where an animation of a bowl hitting
    a pin was developed. This was accomplished by moving and rotating the image sprites
    on the screen. Several methods from the `SingleImageAnimation` class were re-used.
    Additionally, we learned how to control the animation by overriding the `on_key_press`
    API method.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们完成了一个简单但令人兴奋的项目，其中开发了一个碗击打钉子的动画。这是通过在屏幕上移动和旋转图像精灵来实现的。我们重新使用了 `SingleImageAnimation`
    类中的几个方法。此外，我们还学习了如何通过重写 `on_key_press` API 方法来控制动画。
- en: Animations using different image regions
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用不同图像区域的动画
- en: It is possible to create an animation using different regions of a single image.
    Each of these regions can be treated as a separate animation frame. In order to
    achieve the desired animation effect, it is important to properly create the image
    with regions. In the following example, the animation will be created using such
    regions. We will also be using the default position parameters for each of the
    regions within that image. Thus, our main task in this section is simply to use
    these regions in their original form and create animation frames out of them.
    We will first see how the image looks. The following illustration shows this image.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 使用单个图像的不同区域来创建动画是可能的。这些区域中的每一个都可以被视为一个单独的动画帧。为了达到预期的动画效果，正确创建带有区域的图像非常重要。在下面的示例中，动画将使用这些区域来创建。我们还将使用该图像内每个区域默认的位置参数。因此，本节的主要任务仅仅是使用这些区域的原貌，并从中创建动画帧。我们首先看看图像的外观。下面的插图显示了这张图像。
- en: '![Animations using different image regions](img/0165_4_20.jpg)'
  id: totrans-181
  prefs: []
  type: TYPE_IMG
  zh: '![使用不同图像区域的动画](img/0165_4_20.jpg)'
- en: A single image file with an imaginary 'grid' on top of it appears in the previous
    image.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 上一张图片中显示了一个带有想象中的 '网格' 的单个图像。
- en: The horizontal dotted lines overlaying this image indicate how an imaginary
    image grid divides the image into different regions. Here we have four rows and
    just a single column. Thus, during the animation, each of these image regions
    will be shown as a single animation frame. Notice how the droplet images are drawn.
    In the first row, the four droplets are drawn at the top. Then in the next row,
    these images are slightly offset to the south-west direction compared to the droplets
    in the first row. This offset is increased further in the third and fourth rows.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 覆盖在这个图像上的水平虚线表示一个想象中的图像网格如何将图像分割成不同的区域。这里我们有四行和一列。因此，在动画过程中，这些图像区域将作为单个动画帧显示。注意雨滴图像是如何绘制的。在第一行，四个雨滴被绘制在顶部。然后在下一行，这些图像相对于第一行的雨滴稍微向西南方向偏移。这种偏移在第三行和第四行进一步增加。
- en: Time for action - raindrops animation
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动作时间 - 雨滴动画
- en: Let's create an animation of falling raindrops by using different regions of
    a single image.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用单个图像的不同区域来创建下落雨滴的动画。
- en: Download the Python source file `RainDropsAnimation.py` and the image file `droplet.png`
    from the Packt website. As done before, place the image file in a sub-directory
    `images`. The `images` directory should be placed in the directory in which the
    Python source file is located.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载 Python 源文件 `RainDropsAnimation.py` 和图像文件 `droplet.png`。与之前一样，将图像文件放置在子目录
    `images` 中。`images` 目录应位于 Python 源文件所在的目录中。
- en: The `__init__` method of the class `RainDropsAnimation` is presented.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类 `RainDropsAnimation` 的 `__init__` 方法被展示出来。
- en: '[PRE27]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The code is self-explanatory. The class `RainDropsAnimation` inherits `pyglet.window.Window`.
    The constructor of the class calls the method that creates the `Sprite` instance
    for displaying the animation on the screen.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码是自我解释的。类 `RainDropsAnimation` 继承自 `pyglet.window.Window`。类的构造函数调用创建用于在屏幕上显示动画的
    `Sprite` 实例的方法。
- en: Let's review the `createDrawableObjects` method.
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回顾一下 `createDrawableObjects` 方法。
- en: '[PRE28]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The pyglet.image.Animation instance is created on line 5, by calling setup_animation
    method. On line 9, the Sprite instance is created for this animation object.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第 5 行，通过调用 `setup_animation` 方法创建了 `pyglet.image.Animation` 实例。在第 9 行，为这个动画对象创建了
    `Sprite` 实例。
- en: The `setup_animation` method is the main worker method that uses regions within
    the image file to create individual animation frames.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`setup_animation` 方法是主要的工作方法，它使用图像文件内的区域来创建单个动画帧。'
- en: '[PRE29]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: First, the instance of image is created on line 2\. The ImageGrid is an imaginary
    grid placed over the droplet image. Each 'cell' or the 'image region' within this
    image grid can be viewed as a separate image frame in an animation. The ImageGrid
    instance is constructed by providing the image object and the number of rows and
    columns as arguments. The number of rows in this case is 4 and there is only a
    single column. Thus, there will be four such image frames in the animation corresponding
    to each of these rows in the ImageGrid. The AnimationFrame object is created on
    line 10\. The code on line 8 increments the value of i from maximum to minimum
    region or cell of the imaginary grid. Line 9 gets the specific image region and
    this is then used to create the pyglet.image.AnimationFrame instance, as we did
    on line 10\. The second argument is the time for which each frame will be displayed
    on the screen. Here, we are displaying each frame for 0.2 seconds. All such animation
    frame forms are stored in a list image_frames and then the pyglet.image.Animation
    instance is created using this list.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在第二行创建了图像实例。ImageGrid是在水滴图像上放置的一个想象中的网格。在这个图像网格中的每个'单元格'或'图像区域'都可以被视为动画中的一个单独图像帧。ImageGrid实例是通过提供图像对象和行数和列数作为参数来构建的。在这种情况下，行数是4，只有一列。因此，在动画中将有四个这样的图像帧，对应于ImageGrid中的每一行。在第十行创建了AnimationFrame对象。第八行的代码将i的值从最大区域或单元格递减到最小。第九行获取特定的图像区域，然后用于创建pyglet.image.AnimationFrame实例，就像我们在第十行所做的那样。第二个参数是每个帧将在屏幕上显示的时间。在这里，我们显示每个帧0.2秒。所有这样的动画帧都存储在image_frames列表中，然后使用此列表创建pyglet.image.Animation实例。
- en: 'Refer to the file `RainDropsAnimation.py` to review the rest of the code and
    then run the program from the command line as:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 请参考文件`RainDropsAnimation.py`来查看剩余的代码，然后从命令行运行程序，如下所示：
- en: '[PRE30]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: This animation displays four image regions of a single image, one after another.
    The next illustration shows these four images.![Time for action - raindrops animation](img/0165_4_21.jpg)![Time
    for action - raindrops animation](img/0165_4_22.jpg)![Time for action - raindrops
    animation](img/0165_4_23.jpg)![Time for action - raindrops animation](img/0165_4_24.jpg)
  id: totrans-198
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 此动画显示了一个单一图像的四个图像区域，依次展示。下一幅插图显示了这四个图像。![行动时间 - 雨滴动画](img/0165_4_21.jpg)![行动时间
    - 雨滴动画](img/0165_4_22.jpg)![行动时间 - 雨滴动画](img/0165_4_23.jpg)![行动时间 - 雨滴动画](img/0165_4_24.jpg)
- en: The four image frames that display different regions of a single image appear
    in the previous illustration. These four image frames are repeated in the animation
    loop.
  id: totrans-199
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在上一幅插图显示的四个图像帧展示了单一图像的不同区域。这四个图像帧在动画循环中重复出现。
- en: What just happened?
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: We created an animation using different regions of a single image. Each of these
    regions was treated as a separate animation frame. The creation of an image used
    in this animation was briefly discussed. Among many other things, we learned how
    to create and use Pyglet classes such as `ImageGrid` and `AnimationFrame`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用单一图像的不同区域创建了一个动画。这些区域中的每一个都被当作一个单独的动画帧来处理。在此动画中使用的图像创建过程进行了简要讨论。在众多其他事情中，我们学习了如何创建和使用Pyglet类，例如`ImageGrid`和`AnimationFrame`。
- en: 'Project: drive on a rainy day!'
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目：雨天驾驶！
- en: This project is essentially a summary of what we have learned so far in this
    chapter. Additionally, it will cover a few other things such as adding sound effects
    to an animation, showing or hiding certain image sprites while the animation is
    being played, and so on. In this animation, there will be a stationary cloud image.
    We will re-use the code from the *raindrops animation* section to animate falling
    rain. There will be an image sprite to animate lightning effect. Finally, a car
    cartoon will be shown passing by from left to right in this heavy rain. The following
    snapshot is an animation frame that captures all these component images.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目基本上是对本章到目前为止所学内容的总结。此外，它还将涵盖一些其他内容，例如为动画添加音效，在播放动画时显示或隐藏某些图像精灵等。在这个动画中，将有一个静止的云图像。我们将重新使用*雨滴动画*部分的代码来动画化下落的雨。将有一个图像精灵来动画化闪电效果。最后，一辆卡通车将从左到右穿过这场大雨。以下快照是捕捉所有这些组成部分图像的动画帧。
- en: '![Project: drive on a rainy day!](img/0165_4_25.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![项目：雨天驾驶！](img/0165_4_25.jpg)'
- en: Component images of animation *drive on a rainy day* illustrated in the preceding
    image.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在前一幅图像中展示了动画*雨天驾驶*的组成部分图像。
- en: Time for action - drive on a rainy day!
  id: totrans-206
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行动时间 - 雨天驾驶！
- en: It's time to write the code for this animation.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候编写这个动画的代码了。
- en: Download the Python source file `RainyDayAnimation.py`. We will discuss some
    of the important methods from this file. You can go through the rest of the code
    from this file.
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载 Python 源文件 `RainyDayAnimation.py`。我们将讨论此文件中的一些重要方法。你可以阅读此文件中的其余代码。
- en: Download the image files, `droplet.png, cloud.png, car.png`, and `lightening.png`
    from the Packt website. Place these image files in a sub-directory called `images`.
    The `images` directory should be placed in the directory where the Python source
    file is located.
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Packt 网站下载图像文件，`droplet.png, cloud.png, car.png` 和 `lightening.png`。将这些图像文件放置在名为
    `images` 的子目录中。`images` 目录应放置在 Python 源文件所在的目录中。
- en: 'The constructor of the class is written as follows:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类的构造函数编写如下：
- en: '[PRE31]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The code is same as the one developed in the raindrops animation. The media
    file horn.wav is decoded on line 14\. The flag streaming is set to False so that
    the media can be played multiple times during the animation. Make sure you specify
    an appropriate audio file path on your computer on line 15.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 代码与雨滴动画中开发的代码相同。媒体文件 horn.wav 在第 14 行被解码。streaming 标志设置为 False，以便在动画期间可以多次播放媒体。确保在第
    15 行指定计算机上的适当音频文件路径。
- en: 'Let''s review the `createDrawableObjects` method:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们回顾一下 `createDrawableObjects` 方法：
- en: '[PRE32]'
  id: totrans-214
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The code block from lines 3 to 10 is identical to the one developed in the raindrops
    animation. The self.dropletSprite image is placed at an appropriate position.
    Next, we just create sprites to load images of clouds, lightning, and car in the
    Pyglet window. These sprites are placed at appropriate locations within the window.
    For example, the starting position of the car is off the screen. It is anchored
    at x = -500 and y = 0\. The code block from lines 24 to 28 adds all the Sprite
    instances to self.drawableObjects . The draw() method of each one of these instances
    is called in on_draw method.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从第 3 行到第 10 行的代码块与雨滴动画中开发的那一个相同。self.dropletSprite 图像放置在适当的位置。接下来，我们只需在 Pyglet
    窗口中创建精灵来加载云、闪电和汽车图像。这些精灵被放置在窗口内的适当位置。例如，汽车的起始位置在屏幕外。它在 x = -500 和 y = 0 的位置锚定。从第
    24 行到第 28 行的代码块将所有 Sprite 实例添加到 self.drawableObjects 中。在 on_draw 方法中调用这些实例的 draw()
    方法。
- en: 'To achieve the desired animation effect, we have to move around various sprites
    during the animation. This is done by scheduling a few methods to be called at
    specified time intervals. These methods update the coordinates of the sprite or
    toggle its visibility when the Pyglet window is redrawn. The code is illustrated
    as follows:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了达到预期的动画效果，我们必须在动画过程中移动各种精灵。这是通过安排一些方法在指定的时间间隔被调用来完成的。这些方法在 Pyglet 窗口重绘时更新精灵的坐标或切换其可见性。代码如下所示：
- en: '[PRE33]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: We have already seen an example of the moveObjects method in earlier sections.
    In this project, we schedule another method, RainyDayAnimation.show_lightening,
    to be called every second. This method created an animation effect where lightning
    strikes every second at different positions.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经在早期部分看到了 moveObjects 方法的例子。在这个项目中，我们安排了另一个方法，RainyDayAnimation.show_lightening，每秒被调用一次。该方法创建了一个动画效果，闪电每秒在不同的位置击中。
- en: We will now review the method `show_lightening`.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们现在将回顾 `show_lightening` 方法。
- en: '[PRE34]'
  id: totrans-220
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: self.lSprite is the sprite representing the lightning image. Our target is to
    create an animation effect where the lightning flashes for a moment and then disappears.
    This can be accomplished by toggling the Sprite.visible property. When this property
    is set to False, the lightning is not shown. When it is set to True, the else
    block 4-10 is executed. The position of self.lSprite is changed so that the lightning
    appears at different locations the next time this method is called.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: self.lSprite 是代表闪电图像的精灵。我们的目标是创建一个动画效果，闪电闪现一下然后消失。这可以通过切换 Sprite.visible 属性来实现。当此属性设置为
    False 时，闪电不会显示。当它设置为 True 时，执行 else 块 4-10。self.lSprite 的位置被改变，以便闪电在下次调用此方法时出现在不同的位置。
- en: The `moveObjects` method is scheduled to be called every `0.05` seconds.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`moveObjects` 方法被安排每 `0.05` 秒调用一次。'
- en: '[PRE35]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Every time it is called, it moves the position of the Sprite representing the
    car by 10 pixels in the positive direction of x axis. However, if the x coordinate
    of the self.carSprite exceeds its width, the car is reset to its original position.
    Also, at the starting position of the car, the horn sound is played.
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 每次调用时，它都会将代表汽车的精灵在x轴正方向上移动10个像素。然而，如果self.carSprite的x坐标超过了其宽度，汽车将重置到原始位置。此外，在汽车的起始位置，会播放喇叭声。
- en: 'Review the rest of the code from file `RainyDayAnimation.py`. Make sure to
    replace the audio file path for `self.horn_sound` with an appropriate file path
    on your computer. Once everything is all set, run the program from the command
    line as:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`RainyDayAnimation.py`文件中的其余代码。确保将`self.horn_sound`的音频文件路径替换为您的计算机上的适当文件路径。一切设置妥当后，从命令行运行程序，如下所示：
- en: '[PRE36]'
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will pop up a window that will play the animation in which a fun car cruises
    along in a thunderstorm. The next illustration shows some intermediate frames
    from the animation.
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将弹出一个窗口，播放一个有趣的汽车在雷雨中巡航的动画。下一张插图显示了动画的一些中间帧。
- en: '![Time for action - drive on a rainy day!](img/0165_4_26.jpg)![Time for action
    - drive on a rainy day!](img/0165_4_27.jpg)![Time for action - drive on a rainy
    day!](img/0165_4_28.jpg)![Time for action - drive on a rainy day!](img/0165_4_29.jpg)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![行动时间 - 在雨天驾驶！](img/0165_4_26.jpg)![行动时间 - 在雨天驾驶！](img/0165_4_27.jpg)![行动时间
    - 在雨天驾驶！](img/0165_4_28.jpg)![行动时间 - 在雨天驾驶！](img/0165_4_29.jpg)'
- en: Intermediate frames from an animation where a car drives along on a rainy day
    appear in the preceding image.
  id: totrans-229
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在前面的图像中显示了汽车在雨天行驶的动画的中间帧。
- en: What just happened?
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 刚才发生了什么？
- en: The animation developed in this project used four different images. We learned
    how to add sound effects and change the visibility of the image sprites during
    the animation. Some of the images were translated or made intermittently visible
    to achieve the desired animation effect. Different regions of a single image were
    used to animate raindrops. Overall, this fun project covered most of the things
    we learned throughout this book.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 本项目中开发的动画使用了四张不同的图像。我们学习了如何在动画中添加音效和更改图像精灵的可见性。一些图像被翻译或间歇性地显示，以实现所需的动画效果。单个图像的不同区域被用来动画化雨滴。总的来说，这个有趣的项目涵盖了本书中学到的许多内容。
- en: Have a go hero add more effects
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 尝试添加更多效果的英雄
- en: Additional sound effects whenever lightning strikes in the animation, play a
    thunderstorm sound.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在动画中，每当闪电出现时，都会播放雷雨声效。
- en: In the code presented earlier, the lightning image position is toggled between
    two fixed locations. Use random module in Python to get a random coordinate between
    0 to `self.cloudSprite.width` and use that as the x coordinate of `self.lSprite`.
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面展示的代码中，闪电图像的位置在两个固定位置之间切换。使用Python的random模块获取0到`self.cloudSprite.width`之间的随机坐标，并将其用作`self.lSprite`的x坐标。
- en: Add keyboard controls to change the speed of the car, the frequency of lightning,
    and so on.
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加键盘控制以改变汽车的速度、闪电的频率等。
- en: Summary
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: 'We learned a lot in this chapter about creating 2D animations in Python using
    Pyglet. Specifically, we:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了使用Pyglet在Python中创建2D动画的很多知识。具体来说，我们：
- en: Learned some fundamental components of the Pyglet framework for creating animations.
    Modules such as `Window, Image, Animation, Sprite, AnimationFrame, ImageGrid`,
    and so on were discussed.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了Pyglet框架创建动画的一些基本组件。例如，讨论了`Window, Image, Animation, Sprite, AnimationFrame,
    ImageGrid`等模块。
- en: Wrote code to create an animation using a sequence of images or to play a pre-created
    animation.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写代码以使用一系列图像创建动画或播放预创建的动画。
- en: Learned things such as modifying the position of the Pyglet sprite, adding keyboard
    and mouse controls and adding sound effects to the animation.
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习了如何修改Pyglet精灵的位置，添加键盘和鼠标控制以及为动画添加音效。
- en: Worked on a cartoon animation project 'Drive on a Rainy Day'. Here we applied
    several of the techniques learned throughout the chapter.
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在“雨天驾驶”的卡通动画项目中工作。在这里，我们应用了本章中学到的多种技术。
