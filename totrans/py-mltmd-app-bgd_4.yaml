- en: Chapter 4. Fun with Animations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cartoons have always fascinated the young and old alike. An *animation* is where
    the imaginary creatures become alive and take us to a totally different world.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Animation is a sequence of frames displayed quickly one after the other. This
    creates an optical illusion where the objects, for instance, appear to be moving
    around. This chapter will introduce you to the fundamentals of developing animations
    using Python and Pyglet multimedia application development frameworks. Pyglet
    is designed to do 3D operations, but we will use it for developing very simple
    2D animations in this book.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'In this chapter, we shall:'
  prefs: []
  type: TYPE_NORMAL
- en: Learn the basics of Pyglet framework. This will be used to develop code to create
    or play animations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn how to play an existing animation file and create animations using a sequence
    of images.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work on project 'Bowling animation', where animations can be controlled using
    inputs from the keyboard.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Develop code to create an animation using different regions of a single image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Work on an exciting project that animates a car moving in a thunderstorm. This
    project will cover many important things covered throughout this chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: So let's get on with it.
  prefs: []
  type: TYPE_NORMAL
- en: Installation prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will cover the prerequisites for the installation of Pyglet in this section.
  prefs: []
  type: TYPE_NORMAL
- en: Pyglet
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pyglet provides an API for multimedia application development using Python.
    It is an OpenGL-based library, which works on multiple platforms. It is primarily
    used for developing gaming applications and other graphically-rich applications.
    Pyglet can be downloaded from [http://www.pyglet.org/download.html](http://www.pyglet.org/download.html).
    Install Pyglet version 1.1.4 or later. The Pyglet installation is pretty straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Windows platform
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: For Windows users, the Pyglet installation is straightforward use the binary
    distribution `Pyglet 1.1.4.msi` or later.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You should have Python 2.6 installed. For Python 2.4, there are some more dependencies.
    We won't discuss them in this book, because we are using Python 2.6 to build multimedia
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: If you install Pyglet from the source, see the instructions under the next sub-section,
    *Other platforms*.
  prefs: []
  type: TYPE_NORMAL
- en: Other platforms
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The Pyglet website provides a binary distribution file for Mac OS X. Download
    and install `pyglet-1.1.4.dmg` or later.
  prefs: []
  type: TYPE_NORMAL
- en: 'On Linux, install Pyglet 1.1.4 or later if it is available in the package repository
    of your operating system. Otherwise, it can be installed from source tarball as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Download and extract the tarball `pyglet-1.1.4.tar.gz` or a later version.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Make sure that `python` is a recognizable command in shell. Otherwise, set the
    `PYTHONPATH` environment variable to the correct Python executable path.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In a shell window, change to the mentioned extracted directory and then run
    the following command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Review the succeeding installation instructions using the readme/install instruction
    files in the Pyglet source tarball.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you have the package `setuptools` (http://pypi.python.org/pypi/setuptools)
    installed, the Pyglet installation should be very easy. However, for this, you
    will need a runtime `egg` of Pyglet. But the `egg` file for Pyglet is not available
    at [http://pypi.python.org](http://pypi.python.org). If you get hold of a Pyglet
    `egg` file, it can be installed by running the following command on Linux or Mac
    OS X. You will need administrator access to install the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$sudo easy_install -U pyglet`'
  prefs: []
  type: TYPE_NORMAL
- en: Summary of installation prerequisites
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following table illustrates installation prerequisites depending on the
    version and platform.
  prefs: []
  type: TYPE_NORMAL
- en: '| Package | Download location | Version | Windows platform | Linux/Unix/OS
    X platforms |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| Python | [http://python.org/download/releases/](http://python.org/download/releases/)
    | 2.6.4 (or any 2.6.x) | Install using binary distribution | Install from binary;
    also install additional developer packages (For example, with `python-devel` in
    the package name in a rpm-based Linux distribution).Build and install from the
    source tarball. |'
  prefs: []
  type: TYPE_TB
- en: '| Pyglet | [http://www.pyglet.org/download.html](http://www.pyglet.org/download.html)
    | 1.1.4 or later | Install using binary distribution (the `.msi` file) | **Mac:**
    Install using disk image file (.dmg file).**Linux:** Build and install using the
    source tarball. |'
  prefs: []
  type: TYPE_TB
- en: Testing the installation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Before proceeding further, ensure that Pyglet is installed properly. To test
    this, just start Python from the command line and type the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: If this import is successful, we are all set to go!
  prefs: []
  type: TYPE_NORMAL
- en: A primer on Pyglet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pyglet provides an API for multimedia application development using Python.
    It is an OpenGL-based library that works on multiple platforms. It is primarily
    used for developing gaming and other graphically-rich applications. We will cover
    some important aspects of Pyglet framework.
  prefs: []
  type: TYPE_NORMAL
- en: Important components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will briefly discuss some of the important modules and packages of Pyglet
    that we will use. Note that this is just a tiny chunk of the Pyglet framework.
    Please review the Pyglet documentation to know more about its capabilities, as
    this is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Window
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `pyglet.window.Window` module provides the user interface. It is used to
    create a window with an OpenGL context. The `Window` class has API methods to
    handle various events such as mouse and keyboard events. The window can be viewed
    in normal or full screen mode. Here is a simple example of creating a `Window`
    instance. You can define a size by specifying `width` and `height` arguments in
    the constructor.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The background color for the image can be set using OpenGL call `glClearColor`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This sets a white background color. The first three arguments are the red, green,
    and blue color values. Whereas, the last value represents the alpha. The following
    code will set up a gray background color.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The following illustration shows a screenshot of an empty window with a gray
    background color.
  prefs: []
  type: TYPE_NORMAL
- en: '![Window](img/0165_4_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Image
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `pyglet.image` module enables the drawing of images on the screen. The following
    code snippet shows a way to create an image and display it at a specified position
    within the Pyglet window.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A later section will cover some important operations supported by the `pyglet.image`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: Sprite
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is another important module. It is used to display an image or an animation
    frame within a Pyglet window discussed earlier. It is an image instance that allows
    us to position an image anywhere within the Pyglet window. A `sprite` can also
    be rotated and scaled. It is possible to create multiple sprites of the same image
    and place them at different locations and with different orientations inside the
    window.
  prefs: []
  type: TYPE_NORMAL
- en: Animation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`Animation` module is a part of `pyglet.image` package. As the name indicates,
    `pyglet.image.Animation` is used to create an animation from one or more image
    frames. There are different ways to create an animation. For example, it can be
    created from a sequence of images or using `AnimationFrame` objects. We will study
    these techniques later in the chapter. An animation sprite can be created and
    displayed within the Pyglet window.'
  prefs: []
  type: TYPE_NORMAL
- en: AnimationFrame
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This creates a single frame of an animation from a given image. An animation
    can be created from such `AnimationFrame` objects. The following line of code
    shows an example.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`anim_frames` is a list containing instances of `AnimationFrame`.'
  prefs: []
  type: TYPE_NORMAL
- en: Clock
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Among many other things, this module is used for scheduling functions to be
    called at a specified time. For example, the following code calls a method `moveObjects`
    ten times every second.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Displaying an image
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the *Image* sub-section, we learned how to load an image using `image.blit`.
    However, image *blitting* is a less efficient way of drawing images. There is
    a better and preferred way to display the image by creating an instance of `Sprite`.
    Multiple `Sprite` objects can be created for drawing the same image. For example,
    the same image might need to be displayed at various locations within the window.
    Each of these images should be represented by separate `Sprite` instances. The
    following simple program just loads an image and displays the `Sprite` instance
    representing this image on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: On line 3, the image is opened using `pyglet.image.load` call. A `Sprite` instance
    corresponding to this image is created on line 4\. The code on line 6 sets white
    background for the window. The `on_draw` is an API method that is called when
    the window needs to be redrawn. Here, the image sprite is drawn on the screen.
    The next illustration shows a loaded image within a Pyglet window.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In various examples in this chapter and others, the file path strings are hardcoded.
    We have used forward slashes for the file path. Although this works on Windows
    platform, the convention is to use backward slashes. For example, `images/car.png`
    is represented as `images\car.png`. Additionally, you can also specify a complete
    path to the file by using the `os.path.join` method in Python. Regardless of what
    slashes you use, the `os.path.normpath` will make sure it modifies the slashes
    to fit to the ones used for the platform. The use of `os.path.normpath` is illustrated
    in the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`import os`'
  prefs: []
  type: TYPE_NORMAL
- en: '`original_path = ''C:/images/car.png`"'
  prefs: []
  type: TYPE_NORMAL
- en: '`new_path = os.path.normpath(original_path)`'
  prefs: []
  type: TYPE_NORMAL
- en: '![Displaying an image](img/0165_4_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The preceding image illustrates Pyglet window showing a still image.
  prefs: []
  type: TYPE_NORMAL
- en: Mouse and keyboard controls
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Window` module of Pyglet implements some API methods that enable user input
    to a playing animation. The API methods such as `on_mouse_press` and `on_key_press`
    are used to capture mouse and keyboard events during the animation. These methods
    can be overridden to perform a specific operation.
  prefs: []
  type: TYPE_NORMAL
- en: Adding sound effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `media` module of Pyglet supports audio and video playback. The following
    code loads a media file and plays it during the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: The second optional argument provided on line 3 decodes the media file completely
    in the memory at the time the media is loaded. This is important if the media
    needs to be played several times during the animation. The API method `play()`
    starts streaming the specified media file.
  prefs: []
  type: TYPE_NORMAL
- en: Animations with Pyglet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Pyglet framework provides a number of modules required to develop animations.
    Many of these were discussed briefly in earlier sections. Lets now learn techniques
    to create 2D animations using Pyglet.
  prefs: []
  type: TYPE_NORMAL
- en: Viewing an existing animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you already have an animation in, for example, `.gif` file format, it can
    be loaded and displayed directly with Pyglet. The API method to use here is `pyglet.image.load_animation`.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - viewing an existing animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is going to be a short exercise. The goal of this section is to develop
    a primary understanding on use of Pyglet for viewing animations. So let's get
    on with it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the file `SimpleAnimation.py` from the Packt website. Also download
    the file `SimpleAnimation.gif` and place it in a sub-directory `images`. The code
    is illustrated as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code is self-explanatory. On line 3, the API method image.load_animation
    creates an instance of class image.Animation using the specified animation file.
    For this animation, a Sprite object is created on line 7\. The Pyglet window created
    on line 12 will be used to display the animation. The size of this window is specified
    by the height and width of the animSprite. The background color for the window
    is set using OpenGL call glClearColor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we need to draw this animation sprite into the Pyglet window. The `pyglet.window`
    defines API method `on_draw` which gets called when an event occurs. The call
    to the `draw()` method of animation `Sprite` is made on line 25 to render the
    animation on screen. The code on line 22 is important. The `decorator, @win.event`
    allows us to modify the `on_draw` API method of `pyglet.window.Window` when an
    event occurs. Finally code on line 27 runs this application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: You can create your own animation file like `SimpleAnimation.gif` using freely
    available image editing software packages like GIMP. This animation file was created
    using GIMP 2.6.7, by drawing each of the characters on a separate layer and then
    blending all the layers using **Filters** | **Animation** | **Blend**.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Put the file `SimpleAnimation.py` along with the animation file `SimpleAnimation.gif`
    in the same directory and then run the program as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will show the animation in a Pyglet window. You can use a different animation
    file instead of SimpleAnimation.gif. Just modify the related code in this file
    or add code to accept any GIF file as a command-line argument for this program.
    The next illustration shows some of the frames from this animation at different
    time intervals.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action - viewing an existing animation](img/0165_4_3.jpg)![Time
    for action - viewing an existing animation](img/0165_4_4.jpg)![Time for action
    - viewing an existing animation](img/0165_4_5.jpg)![Time for action - viewing
    an existing animation](img/0165_4_6.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The preceding image is a screen capture of a running animation at different
    time intervals.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We worked out an example where an already created animation file was loaded
    and viewed using Pyglet. This short exercise taught us some preliminary things
    about viewing animations using Pyglet. For example, we learned how to create a
    Pyglet window and load an animation using `pyglet.Sprite` object. These fundamentals
    will be used throughout this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Animation using a sequence of images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The API method `Animation.from_image_sequence` enables creation of an animation
    using a bunch of sequential images. Each of the images is displayed as a frame
    in the animation, one after the other. The time for which each frame is displayed
    can be specified as an argument while creating the animation object. It can also
    be set after the animation instance is created.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - animation using a sequence of images
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's develop a tool that can create an animation and display it on the screen.
    This tool will create and display the animation using the given image files. Each
    of the image files will be displayed as a frame in the animation for a specified
    amount of time. This is going to be a fun little animation that shows a grandfather
    clock with a pendulum. We will animate the pendulum oscillations with other things,
    including making the dial remaining still. This animation has only three image
    frames; two of them show the pendulum at opposite extremes. These images are sequenced
    as shown in the next illustration.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action - animation using a sequence of images](img/0165_4_7.jpg)![Time
    for action - animation using a sequence of images](img/0165_4_8.jpg)![Time for
    action - animation using a sequence of images](img/0165_4_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Clock image frames to be animated appear in the preceding image.
  prefs: []
  type: TYPE_NORMAL
- en: Download the file `ImageSequenceAnimation.py` from the Packt website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The code in this file is presented below.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The tuple, image_frames contains the paths for the images. The map function
    call on line 8 creates pyglet.image objects corresponding to each of the image
    paths and stores the resultant images in a list. On line 16, the animation is
    created using the API method Animation.from_image_sequence. This method takes
    the list of image objects as an argument. The other optional argument is the time
    in seconds for which each of the frames will be shown. We set this time as 0.33
    seconds per image so that the total time for a complete animation loop is nearly
    1 second. Thus, in the animation, one complete oscillation of the pendulum will
    be complete in about one second. We already discussed the rest of the code in
    an earlier section.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Place the image files in a sub-directory `images` within the directory in which
    file `ImageSequenceAnimation.py` is placed. Then run the program using:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will see a clock with an oscillating pendulum in the window. The animation
    will continue in a loop and closing the window will end it.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By rapidly displaying still images, we just created something like a 'flipbook'
    cartoon! We developed a simple utility that takes a sequence of images as an input
    and creates an animation using Pyglet. To accomplish this task, we used `Animation.from_image_sequence`
    to create the animation and re-used most of the framework from the *Viewing an
    existing animation* section.
  prefs: []
  type: TYPE_NORMAL
- en: Single image animation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Imagine that you are creating a cartoon movie where you want to animate the
    motion of an arrow or a bullet hitting a target. In such cases, typically it is
    just a single image. The desired animation effect is accomplished by performing
    appropriate translation or rotation of the image.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - bouncing ball animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lets create a simple animation of a 'bouncing ball'. We will use a single image
    file, `ball.png`, which can be downloaded from the Packt website. The dimensions
    of this image in pixels are 200x200, created on a transparent background. The
    following screenshot shows this image opened in GIMP image editor. The three dots
    on the ball identify its side. We will see why this is needed. Imagine this as
    a ball used in a bowling game.
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action - bouncing ball animation](img/0165_4_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The image of a ball opened in GIMP appears as shown in the preceding image.
    The ball size in pixels is 200x200.
  prefs: []
  type: TYPE_NORMAL
- en: Download the files `SingleImageAnimation.py` and `ball.png` from the Packt website.
    Place the `ball.png` file in a sub-directory 'images' within the directory in
    which `SingleImageAnimation.py` is saved.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The following code snippet shows the overall structure of the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Although it is not required, we will encapsulate event handling and other functionality
    within a class SingleImageAnimation. The program to be developed is short, but
    in general, it is a good coding practice. It will also be good for any future
    extension to the code. An instance of SingleImageAnimation is created on line
    14\. This class is inherited from pyglet.window.Window. It encapsulates the functionality
    we need here. The API method on_draw is overridden by the class. on_draw is called
    when the window needs to be redrawn. Note that we no longer need a decorator statement
    such as @win.event above the on_draw method because the window API method is simply
    overridden by this inherited class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The constructor of the class `SingleImageAnimation` is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As mentioned earlier, the class SingleImageAnimation inherits pyglet.window.Window.
    However, its constructor doesn't take all the arguments supported by its super
    class. This is because we don't need to change most of the default argument values.
    If you want to extend this application further and need these arguments, you can
    do so by adding them as __init__ arguments. The constructor initializes some instance
    variables and then calls methods to create the animation sprite and resize the
    window respectively.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The method `createDrawableObjects` creates a sprite instance using the `ball.png`
    image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The anchor_x and anchor_y properties of the image instance are set such that
    the image has an anchor exactly at its center. This will be useful while rotating
    the image later. On line 10, the sprite instance self.ballSprite is created. Later,
    we will be setting the width and height of the Pyglet window as twice of the sprite
    width and thrice of the sprite height. The position of the image within the window
    is set on line 11\. The initial position is chosen as shown in the next screenshot.
    In this case, there is only one Sprite instance. However, to make the program
    more general, a list of drawable objects called self.drawableObjects is maintained.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To continue the discussion from the previous step, we will now review the `on_draw`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As mentioned previously, the on_draw function is an API method of class pyglet.window.Window
    that is called when a window needs to be redrawn. This method is overridden here.
    The self.clear() call clears the previously drawn contents within the window.
    Then, all the Sprite objects in the list self.drawableObjects are drawn in the
    for loop.![Time for action - bouncing ball animation](img/0165_4_11.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The preceding image illustrates the initial ball position in the animation.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The method `adjustWindowSize` sets the `width` and `height` parameters of the
    Pyglet window. The code is self-explanatory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: So far, we have set up everything for the animation to play. Now comes the fun
    part. We will change the position of the sprite representing the image to achieve
    the animation effect. During the animation, the image will also be rotated, to
    give it the natural feel of a bouncing ball.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method is scheduled to be called 20 times per second using the following
    code in the program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To start with, the ball is placed near the top. The animation should be such
    that it gradually falls down, hits the bottom, and bounces back. After this, it
    continues its upward journey to hit a boundary somewhere near the top and again
    it begins its downward journey. The code block from lines 2 to 5 checks the current
    y position of self.ballSprite. If it has hit the upward limit, the flag self.rising
    is set to False. Likewise, when the lower limit is hit, the flag is set to True.
    The flag is then used by the next code snippet to increment or decrement the y
    position of self.ballSprite.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The highlighted lines of code rotate the `Sprite` instance. The current rotation
    angle is incremented or decremented by the given value. This is the reason why
    we set the image anchors, `anchor_x` and `anchor_y` at the center of the image.
    The `Sprite` object honors these image anchors. If the anchors are not set this
    way, the ball will be seen wobbling in the resultant animation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once all the pieces are in place, run the program from the command line as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will pop up a window that will play the bouncing ball animation. The next
    illustration shows some intermediate frames from the animation while the ball
    is falling down.![Time for action - bouncing ball animation](img/0165_4_11.jpg)![Time
    for action - bouncing ball animation](img/0165_4_12.jpg)![Time for action - bouncing
    ball animation](img/0165_4_13.jpg)![Time for action - bouncing ball animation](img/0165_4_14.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We learned how to create an animation using just a single image. The image of
    a ball was represented by a sprite instance. This sprite was then translated and
    rotated on the screen to accomplish a bouncing ball animation. The whole functionality,
    including the event handling, was encapsulated in the class `SingleImageAnimation`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: a simple bowling animation'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It's time for a small project. We will re-use most of the code we used in the
    *Single Image Animation* section and some more stuff to create an animation where
    a rolling ball hits a pin in a bowling game. Although this chapter covers animation,
    this project will give you a preliminary understanding on how to turn an animation
    into a game. This is not a real game as such, but it will involve some user interactions
    to control the animation.
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: a simple bowling animation](img/0165_4_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The starting position in the bowling animation, showing ball and pin images.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - a simple bowling animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's develop the code for this application. As mentioned earlier, a big chunk
    of the code comes from the *Single Image Animation* section. So we will only discuss
    the new and modified methods needed to create a bowling animation.
  prefs: []
  type: TYPE_NORMAL
- en: Download the Python source file `BowlingAnimation.py` from the Packt website.
    The overall class design is the same as the one developed in the *Single Image
    Animation* section. We will only discuss the new and modified methods. You can
    review the rest of the code from this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Also, download the image files used in this project. These files are `ball.png`
    and `pin.png`. Place these files in a sub-directory `images`. The `images` directory
    should be placed in the directory in which the above Python source file is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `__init__` method of the class is identical to that of class `SingleImageAnimation`.
    The only change here is that it initializes the following flags:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The flag self.pinHorizontal is used later to check if the pin is knocked out
    by the ball. Whereas, self.paused is used to pause or resume the animation depending
    on its value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `createDrawable` object method is modified to create a sprite instance
    for the pin image. Also, the position of the ball and pin sprites are adjusted
    for our animation needs. The code is presented as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code block 6-8 creates an image instance for the pin image and then sets
    the image anchor at its center. The Sprite instances representing ball and pin
    images are created on lines 10 and 14 respectively. Their positions are set such
    that the initial positions appear as shown in the earlier illustration. Finally
    these sprites are added to the list of drawable objects that are drawn in on_draw
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, let's review the `moveObjects` method. As before, this method is called
    every `0.05` seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The if block, from lines 6 to 13, is called for when the x position of the ball
    sprite is between 100 pixels to twice the width of the self.ballSprite. On line
    12, the x position of self.ballSprite is incremented by 5 pixels. Also, the sprite
    is rotated by 5 degrees. The combination of these two transforms creates an effect
    where we see the ball rolling horizontally, from left to right, inside the Pyglet
    window. As seen earlier, the center of the pin is located at x = self.ballSprite.width*2
    + 100 and y = self.ballSprite.height.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The if block from lines 15 to 18 is where the ball appears to have hit the pin.
    That is, the x coordinate of ball sprite center is about 100 pixels away from
    the center of the pin. The 100-pixel value is chosen to account for the ball radius.
    Therefore, once the ball hits the pin, the pin image is rotated by 90 degrees
    (line 16). This creates a visual effect where the pin appears to be knocked down
    by the ball. The x coordinate of the pin is incremented by 100 pixels so that,
    after the pin rotation, the ball and pin images don't overlap. You can do some
    more improvement here. Shift the y position of the pin sprite further down, so
    that the pin appears lying on the ground. In this if block, we also set the flag
    self.pinHorizontal to True. When the moveObjects method is called the next time,
    the first thing that is checked is whether the pin is vertical or horizontal.
    If the pin is horizontal, the original positions of the ball and pin are restored
    by the code on lines 2 to 4\. This is a preparation for the next animation loop.
    On line 9, the pin is rotated back to 0 degree, whereas on line 10, the flag self.pinHorizontal
    is reset to False.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: With the code we developed so far, and with the remaining code from class `SingleImageAnimation`,
    if you run the program, it will show the bowling animation. Now let's add some
    controls to this animation. A flag, `self.paused`, was initialized in the constructor.
    It will be used here. Just like `on_draw, on_key_press` is another API method
    of `pyglet.window.Window`. It is overridden here to implement pause and resume
    controls.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The key argument is one of the keyboard keys pressed by the user. The if block
    from lines 2 to 4 pauses the animation when P key is pressed. The method self.moveObjects
    is scheduled to be called every 0.05 seconds. The scheduled callback to this method
    is canceled using the pyglet.clock.unschedule method. To resume the animation,
    the schedule_interval method is called on line 6\. The self.paused flag ensures
    that the multiple keypresses won't have any undesirable effect on the animation.
    For example, if you press the R key multiple times, the code will just ignore
    the keypress events that follow.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to the file `BowlingAnimation.py` to review or develop the rest of the
    code and then run the program from the command line as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will pop up a window in which the animation will be played. Press the P
    key on the keyboard to pause the animation. To resume a paused animation, press
    the R key. The next illustration shows a few intermediate frames in this animation.![Time
    for action - a simple bowling animation](img/0165_4_16.jpg)![Time for action -
    a simple bowling animation](img/0165_4_17.jpg)![Time for action - a simple bowling
    animation](img/0165_4_18.jpg)![Time for action - a simple bowling animation](img/0165_4_19.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The intermediate frames in the bowling animation appear as shown in the preceding
    image.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We completed a simple but exciting project where an animation of a bowl hitting
    a pin was developed. This was accomplished by moving and rotating the image sprites
    on the screen. Several methods from the `SingleImageAnimation` class were re-used.
    Additionally, we learned how to control the animation by overriding the `on_key_press`
    API method.
  prefs: []
  type: TYPE_NORMAL
- en: Animations using different image regions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It is possible to create an animation using different regions of a single image.
    Each of these regions can be treated as a separate animation frame. In order to
    achieve the desired animation effect, it is important to properly create the image
    with regions. In the following example, the animation will be created using such
    regions. We will also be using the default position parameters for each of the
    regions within that image. Thus, our main task in this section is simply to use
    these regions in their original form and create animation frames out of them.
    We will first see how the image looks. The following illustration shows this image.
  prefs: []
  type: TYPE_NORMAL
- en: '![Animations using different image regions](img/0165_4_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A single image file with an imaginary 'grid' on top of it appears in the previous
    image.
  prefs: []
  type: TYPE_NORMAL
- en: The horizontal dotted lines overlaying this image indicate how an imaginary
    image grid divides the image into different regions. Here we have four rows and
    just a single column. Thus, during the animation, each of these image regions
    will be shown as a single animation frame. Notice how the droplet images are drawn.
    In the first row, the four droplets are drawn at the top. Then in the next row,
    these images are slightly offset to the south-west direction compared to the droplets
    in the first row. This offset is increased further in the third and fourth rows.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - raindrops animation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's create an animation of falling raindrops by using different regions of
    a single image.
  prefs: []
  type: TYPE_NORMAL
- en: Download the Python source file `RainDropsAnimation.py` and the image file `droplet.png`
    from the Packt website. As done before, place the image file in a sub-directory
    `images`. The `images` directory should be placed in the directory in which the
    Python source file is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `__init__` method of the class `RainDropsAnimation` is presented.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code is self-explanatory. The class `RainDropsAnimation` inherits `pyglet.window.Window`.
    The constructor of the class calls the method that creates the `Sprite` instance
    for displaying the animation on the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Let's review the `createDrawableObjects` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The pyglet.image.Animation instance is created on line 5, by calling setup_animation
    method. On line 9, the Sprite instance is created for this animation object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `setup_animation` method is the main worker method that uses regions within
    the image file to create individual animation frames.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, the instance of image is created on line 2\. The ImageGrid is an imaginary
    grid placed over the droplet image. Each 'cell' or the 'image region' within this
    image grid can be viewed as a separate image frame in an animation. The ImageGrid
    instance is constructed by providing the image object and the number of rows and
    columns as arguments. The number of rows in this case is 4 and there is only a
    single column. Thus, there will be four such image frames in the animation corresponding
    to each of these rows in the ImageGrid. The AnimationFrame object is created on
    line 10\. The code on line 8 increments the value of i from maximum to minimum
    region or cell of the imaginary grid. Line 9 gets the specific image region and
    this is then used to create the pyglet.image.AnimationFrame instance, as we did
    on line 10\. The second argument is the time for which each frame will be displayed
    on the screen. Here, we are displaying each frame for 0.2 seconds. All such animation
    frame forms are stored in a list image_frames and then the pyglet.image.Animation
    instance is created using this list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to the file `RainDropsAnimation.py` to review the rest of the code and
    then run the program from the command line as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This animation displays four image regions of a single image, one after another.
    The next illustration shows these four images.![Time for action - raindrops animation](img/0165_4_21.jpg)![Time
    for action - raindrops animation](img/0165_4_22.jpg)![Time for action - raindrops
    animation](img/0165_4_23.jpg)![Time for action - raindrops animation](img/0165_4_24.jpg)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The four image frames that display different regions of a single image appear
    in the previous illustration. These four image frames are repeated in the animation
    loop.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We created an animation using different regions of a single image. Each of these
    regions was treated as a separate animation frame. The creation of an image used
    in this animation was briefly discussed. Among many other things, we learned how
    to create and use Pyglet classes such as `ImageGrid` and `AnimationFrame`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: drive on a rainy day!'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This project is essentially a summary of what we have learned so far in this
    chapter. Additionally, it will cover a few other things such as adding sound effects
    to an animation, showing or hiding certain image sprites while the animation is
    being played, and so on. In this animation, there will be a stationary cloud image.
    We will re-use the code from the *raindrops animation* section to animate falling
    rain. There will be an image sprite to animate lightning effect. Finally, a car
    cartoon will be shown passing by from left to right in this heavy rain. The following
    snapshot is an animation frame that captures all these component images.
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: drive on a rainy day!](img/0165_4_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Component images of animation *drive on a rainy day* illustrated in the preceding
    image.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action - drive on a rainy day!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It's time to write the code for this animation.
  prefs: []
  type: TYPE_NORMAL
- en: Download the Python source file `RainyDayAnimation.py`. We will discuss some
    of the important methods from this file. You can go through the rest of the code
    from this file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the image files, `droplet.png, cloud.png, car.png`, and `lightening.png`
    from the Packt website. Place these image files in a sub-directory called `images`.
    The `images` directory should be placed in the directory where the Python source
    file is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The constructor of the class is written as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code is same as the one developed in the raindrops animation. The media
    file horn.wav is decoded on line 14\. The flag streaming is set to False so that
    the media can be played multiple times during the animation. Make sure you specify
    an appropriate audio file path on your computer on line 15.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let''s review the `createDrawableObjects` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The code block from lines 3 to 10 is identical to the one developed in the raindrops
    animation. The self.dropletSprite image is placed at an appropriate position.
    Next, we just create sprites to load images of clouds, lightning, and car in the
    Pyglet window. These sprites are placed at appropriate locations within the window.
    For example, the starting position of the car is off the screen. It is anchored
    at x = -500 and y = 0\. The code block from lines 24 to 28 adds all the Sprite
    instances to self.drawableObjects . The draw() method of each one of these instances
    is called in on_draw method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To achieve the desired animation effect, we have to move around various sprites
    during the animation. This is done by scheduling a few methods to be called at
    specified time intervals. These methods update the coordinates of the sprite or
    toggle its visibility when the Pyglet window is redrawn. The code is illustrated
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have already seen an example of the moveObjects method in earlier sections.
    In this project, we schedule another method, RainyDayAnimation.show_lightening,
    to be called every second. This method created an animation effect where lightning
    strikes every second at different positions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will now review the method `show_lightening`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: self.lSprite is the sprite representing the lightning image. Our target is to
    create an animation effect where the lightning flashes for a moment and then disappears.
    This can be accomplished by toggling the Sprite.visible property. When this property
    is set to False, the lightning is not shown. When it is set to True, the else
    block 4-10 is executed. The position of self.lSprite is changed so that the lightning
    appears at different locations the next time this method is called.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `moveObjects` method is scheduled to be called every `0.05` seconds.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Every time it is called, it moves the position of the Sprite representing the
    car by 10 pixels in the positive direction of x axis. However, if the x coordinate
    of the self.carSprite exceeds its width, the car is reset to its original position.
    Also, at the starting position of the car, the horn sound is played.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Review the rest of the code from file `RainyDayAnimation.py`. Make sure to
    replace the audio file path for `self.horn_sound` with an appropriate file path
    on your computer. Once everything is all set, run the program from the command
    line as:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will pop up a window that will play the animation in which a fun car cruises
    along in a thunderstorm. The next illustration shows some intermediate frames
    from the animation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Time for action - drive on a rainy day!](img/0165_4_26.jpg)![Time for action
    - drive on a rainy day!](img/0165_4_27.jpg)![Time for action - drive on a rainy
    day!](img/0165_4_28.jpg)![Time for action - drive on a rainy day!](img/0165_4_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Intermediate frames from an animation where a car drives along on a rainy day
    appear in the preceding image.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The animation developed in this project used four different images. We learned
    how to add sound effects and change the visibility of the image sprites during
    the animation. Some of the images were translated or made intermittently visible
    to achieve the desired animation effect. Different regions of a single image were
    used to animate raindrops. Overall, this fun project covered most of the things
    we learned throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: Have a go hero add more effects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Additional sound effects whenever lightning strikes in the animation, play a
    thunderstorm sound.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the code presented earlier, the lightning image position is toggled between
    two fixed locations. Use random module in Python to get a random coordinate between
    0 to `self.cloudSprite.width` and use that as the x coordinate of `self.lSprite`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add keyboard controls to change the speed of the car, the frequency of lightning,
    and so on.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We learned a lot in this chapter about creating 2D animations in Python using
    Pyglet. Specifically, we:'
  prefs: []
  type: TYPE_NORMAL
- en: Learned some fundamental components of the Pyglet framework for creating animations.
    Modules such as `Window, Image, Animation, Sprite, AnimationFrame, ImageGrid`,
    and so on were discussed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Wrote code to create an animation using a sequence of images or to play a pre-created
    animation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learned things such as modifying the position of the Pyglet sprite, adding keyboard
    and mouse controls and adding sound effects to the animation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Worked on a cartoon animation project 'Drive on a Rainy Day'. Here we applied
    several of the techniques learned throughout the chapter.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
