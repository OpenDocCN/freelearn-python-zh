["```py\n{{ youtube(video_id) }} \n```", "```py\nfrom flask import Blueprint\n\nclass Youtube(object):\n    def __init__(self, app=None, **kwargs):\n        if app:\n            self.init_app(app)\n\n    def init_app(self, app):\n        self.register_blueprint(app)\n        app.add_template_global(youtube)\n\n    def register_blueprint(self, app):\n        module = Blueprint(\n            \"youtube\",\n            __name__,\n            url_prefix='youtube',\n            template_folder=\"templates\"\n        )\n        app.register_blueprint(module)\n        return module\n```", "```py\nfrom flask import render_template, Blueprint, Markup \n\nclass Video(object): \n    def __init__(self, video_id, cls=\"youtube\"): \n      self.video_id = video_id \n      self.cls = cls\n\n    @property \n    def html(self): \n      return Markup(render_template('youtube/video.html', video=self)) \n```", "```py\ndef youtube(*args, **kwargs): \n  video = Video(*args, **kwargs) \n  return video.html \n```", "```py\n<iframe \n  class=\"{{ video.cls }}\" \n  width=\"560\" \n  height=\"315\" \n  src=\"img/{{ video.video_id }}\" \n  frameborder=\"0\" \n  allowfullscreen> \n</iframe> \n```", "```py\nyoutube = Youtube()\n```", "```py\ndef create_app(object_name): \n    ... \n    youtube.init_app(app) \n```", "```py\n{% extends \"base.html\" %}\n{% import 'macros.html' as macros %}\n{% block title %}Home{% endblock %}\n{% block leftbody %}\n\n{{ youtube(\"_OBlgSz8sSM\") }}\n\n{{ macros.render_posts(posts) }}\n{{ macros.render_pagination(posts, 'blog.home') }}\n{% endblock %}\n```", "```py\nfrom setuptools import setup, find_packages\n\nsetup(\n    name='Flask-YouTube',\n    version='0.4',\n    license='MIT',\n    description='Flask extension to allow easy \n    embedding of YouTube videos',\n    author='Jack Stouffer',\n    author_email='example@gmail.com',\n    platforms='any',\n    install_requires=['Flask'],\n    packages=find_packages(),\n    include_package_data=True,\n    package_data = {\n        'templates': ['*']\n    },\n    zip_safe=False,\n    classifiers=[\n        'Development Status :: 5 - Production/Stable',\n        'Environment :: Web Environment',\n        'Intended Audience :: Developers',\n        'License :: OSI Approved :: BSD License',\n        'Operating System :: OS Independent',\n        'Programming Language :: Python',\n        'Topic :: Software Development :: Libraries :: Python Modules'\n    ]\n)\n```", "```py\nprune *.pyc\nrecursive-include flask_youtube/templates *\n```", "```py\n$ python setup.py build\n$ python setup.py install\n```", "```py\nfrom flask_youtube import Youtube\n```", "```py\n...\nclass Post(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    title = db.Column(db.String(255), nullable=False)\n    text = db.Column(db.Text(), nullable=False)\n    publish_date = db.Column(db.DateTime(),  \n    default=datetime.datetime.now)\n    user_id = db.Column(db.Integer(), db.ForeignKey('user.id'))\n    youtube_id = db.Column(db.String(20))\n    comments = db.relationship('Comment', backref='post', \n    lazy='dynamic')\n    tags = db.relationship('Tag', secondary=tags, \n    backref=db.backref('posts', lazy='dynamic'))\n...\n```", "```py\nclass PostForm(Form):\n    title = StringField('Title', [DataRequired(),Length(max=255)])\n    youtube_id = StringField('Youtube video id', [Length(max=255)])\n    text = TextAreaField('Content', [DataRequired()])\n```", "```py\n...\ndef new_post():\n    form = PostForm()\n    if form.validate_on_submit():\n        new_post = Post()\n        ...\n        new_post.youtube_id = form.youtube_id.data\n        ...\n        db.session.add(new_post)\n...\n```", "```py\n...\ndef edit_post(id):\n    post = Post.query.get_or_404(id)\n    # We want admins to be able to edit any post\n    if current_user.id == post.user.id:\n        form = PostForm()\n        if form.validate_on_submit():\n            ...\n            post.youtube_id = form.youtube_id.data\n            ...\n            db.session.add(post)\n            db.session.commit()\n            return redirect(url_for('.post', post_id=post.id))\n        form.title.data = post.title\n        form.youtube_id.data = post.youtube_id\n        form.text.data = post.text\n        return render_template('edit.html', form=form, post=post)\n    abort(403)\n...\n```", "```py\n{% if post.youtube_id %}\n<div class=\"row\">\n    <div class=\"col\">\n        {{ youtube(post.youtube_id) | safe }}\n    </div>\n</div>\n{% endif %}\n```", "```py\nfrom flask import request \nfrom gzip import GzipFile \nfrom io import BytesIO \n... \nclass GZip(object): \n  def __init__(self, app=None): \n    self.app = app \n    if app is not None: \n      self.init_app(app) \n  def init_app(self, app): \n    app.after_request(self.after_request) \n  def after_request(self, response): \n    encoding = request.headers.get('Accept-Encoding', '') \n    if 'gzip' not in encoding or  \n      not response.status_code in (200, 201): \n      return response \n    response.direct_passthrough = False \n    contents = BytesIO() \n    with GzipFile( \n      mode='wb', \n      compresslevel=5, \n      fileobj=contents) as gzip_file: \n      gzip_file.write(response.get_data()) \n    response.set_data(bytes(contents.getvalue())) \n    response.headers['Content-Encoding'] = 'gzip' \n    response.headers['Content-Length'] = response.content_length \n    return response \nflask_gzip = GZip() \n```"]