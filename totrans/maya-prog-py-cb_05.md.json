["```py\ndef createSimpleSkeleton(joints):\n    '''\n    Creates a simple skeleton as a single chain of bones\n    ARGS:\n        joints- the number of bones to create\n    '''\n\n    cmds.select(clear=True)\n\n    bones = []\n    pos = [0, 0, 0]\n\n    for i in range(0, joints):\n        pos[1] = i * 5\n        bones.append(cmds.joint(p=pos))\n\n    cmds.select(bones[0], replace=True)\n\ndef createHand(fingers, joints):\n    '''\n    Creates a set of 'fingers', each with a set number of joints\n    ARGS:\n        fingers- the number of joint chains to create\n        joints- the number of bones per finger\n    '''\n\n    cmds.select(clear=True)\n\n    baseJoint = cmds.joint(name='wrist', p=(0,0,0))\n\n    fingerSpacing = 2\n    palmLen = 4\n    jointLen = 2\n\n    for i in range(0, fingers):\n        cmds.select(baseJoint, replace=True)\n        pos = [0, palmLen, 0]\n\n        pos[0] = (i * fingerSpacing) - ((fingers-1) * fingerSpacing)/2\n\n        cmds.joint(name='finger{0}base'.format(i+1), p=pos)\n\n        for j in range(0, joints):\n            cmds.joint(name='finger{0}joint{1}'.format((i+1),(j+1)), relative=True, p=(0,jointLen, 0))\n\n    cmds.select(baseJoint, replace=True)\n\ncreateSimpleSkeleton(5)\ncreateHand(5, 3)\n```", "```py\ndef createSimpleSkeleton(joints):\n    '''\n    Creates a simple skeleton as a single chain of bones\n    ARGS:\n        joints- the number of bones to create\n    '''\n```", "```py\ndef functionOne():\n    \"\"\"Description of function one\"\"\"\n```", "```py\nhelp(myFunctions.functionOne)\n```", "```py\ncmds.joint(position=(1, 1, 1))\n```", "```py\n    pos = [0, 0, 0]\n```", "```py\n    bones = []\n```", "```py\n    for i in range(0, joints):\n        pos[1] = i * 5\n        bones.append(cmds.joint(p=pos))\n```", "```py\ncmds.select(clear=True)\n```", "```py\ndef createHand(fingers, joints):\n    '''\n    Creates a set of 'fingers', each with a set number of joints\n    ARGS:\n        fingers- the number of joint chains to create\n        joints- the number of bones per finger\n    '''\n```", "```py\nbaseJoint = cmds.joint(name='wrist', p=(0,0,0))\n```", "```py\npos[0] = (i * fingerSpacing) - ((fingers-1) * fingerSpacing)/2\n```", "```py\n(i * fingerSpacing)\n```", "```py\n((fingers-1) * fingerSpacing)/2\n```", "```py\ncmds.joint(name='finger{0}base'.format(i+1), p=pos)\n```", "```py\n        for j in range(0, joints):\n            cmds.joint(name='finger{0}joint{1}'.format((i+1),(j+1)), relative=True, p=(0,jointLen, 0))\n```", "```py\ncmds.joint(p=(0,0,0))\ncmds.joint(p=(-5, 5, 0))\ncmds.pickWalk(direction=\"Up\")\ncmds.joint(p=(5, 5, 0))\n```", "```py\nimport maya.cmds as cmds\n\ndef setDrivenKeys():\n    objs = cmds.ls(selection=True)\n    baseJoint = objs[0]\n\n    driver = baseJoint + \".rotateZ\"\n\n    children = cmds. listRelatives(children=True, allDescendents=True)\n\n    for bone in children:\n        driven = bone + \".rotateZ\"\n\n        cmds.setAttr(driver, 0)\n        cmds.setDrivenKeyframe(driven, cd=driver, value=0, driverValue=0)\n\n        cmds.setAttr(driver, 30)\n        cmds.setDrivenKeyframe(driven, cd=driver, value=30, driverValue=30)\n\n    cmds.setAttr(driver, 0)\n\nsetDrivenKeys()\n```", "```py\nobjs = cmds.ls(selection=True)\nbaseJoint = objs[0]\n```", "```py\ndriver = baseJoint + \".rotateZ\"\n```", "```py\n    children = cmds.listRelatives(children=True, allDescendents=True)\n```", "```py\ncmds.setDrivenKeyframe(driven, cd=driver, value=-10, driverValue=0)\n```", "```py\ncmds.setAttr(driver, 30)\n```", "```py\n    for bone in children:\n        driven = bone + \".rotateZ\"\n\n        cmds.setAttr(driver, 0)\n        cmds.setDrivenKeyframe(driven, cd=driver, value=0, driverValue=0)\n\n        cmds.setAttr(driver, 30)\n        cmds.setDrivenKeyframe(driven, cd=driver, value=30, driverValue=30)\n```", "```py\ncmds.setAttr(driver, 0) \n```", "```py\n    cmds.setAttr(driver, 0)\n    cmds.setDrivenKeyframe(driven, cd=driver, v=0, dr=0)\n\n    cmds.setAttr(driver, 20)\n    cmds.setDrivenKeyframe(driven, cd=driver, v=20, dr=10)\n\n    cmds.setAttr(driver, 30)\n    cmds.setDrivenKeyframe(driven, cd=driver, v=30, dr=30)\n```", "```py\ncmds.setDrivenKeyframe(driven, cd=driver, v=30, dr=30, inTangentType=\"linear\", outTangentType=\"linear\")\n```", "```py\ndef addCustomAttributes():\n\n    objs = cmds.ls(selection=True)\n    cmds.addAttr(objs[0], shortName=\"blink\", longName=\"blink\", defaultValue=0, minValue=-1, maxValue=1, keyable=True)\n\n    cmds.addAttr(objs[0], shortName=\"ikfkR\", longName=\"ikfkRight\", attributeType=\"bool\", keyable=True)\n    cmds.addAttr(objs[0], shortName=\"ikfkL\", longName=\"ikfkLeft\", attributeType=\"enum\", enumName=\"IK:FK\", keyable=True)\n\n    cmds.setAttr(objs[0]+\".rotateX\", edit=True, lock=True, keyable=False, channelBox=False)\n\n    for att in ['rotateY','rotateZ','scaleX','scaleY','scaleZ']:\n        lockAndHide(objs[0], att)\n\ndef lockAndHide(obj, att):\n\n    fullAttributeName = obj + '.' + att\n\n    cmds.setAttr(fullAttributeName, edit=True, lock=True, keyable=False, channelBox=False)\n\nsetup()\naddCustomAttributes()\n```", "```py\ncmds.addAttr(objs[0], shortName=\"blink\", longName=\"blink\", defaultValue=0, minValue=-1, maxValue=1, keyable=True)\n```", "```py\ncmds.addAttr(objs[0], shortName=\"ikfkR\", longName=\"ikfkRight\", attributeType=\"bool\", keyable=True)\n```", "```py\ncmds.addAttr(objs[0], shortName=\"ikfkL\", longName=\"ikfkLeft\", attributeType=\"enum\", enumName=\"IK:FK\", keyable=True)\n```", "```py\ncmds.addAttr(objs[0], longName=\"ikCustomVals\", attributeType=\"enum\", enumName=\"IK=5:FK=23\", keyable=True)\n```", "```py\ncmds.setAttr(objs[0]+\".rotateX\", edit=True, lock=True, keyable=False, channelBox=False)\n```", "```py\ndef lockAndHide(obj, att):\n\n    fullAttributeName = obj + '.' + att\n    cmds.setAttr(fullAttributeName, edit=True, lock=True, keyable=False, channelBox=False)\n```", "```py\nfor att in ['rotateY','rotateZ','scaleX','scaleY','scaleZ']:\n    lockAndHide(objs[0], att)\n```", "```py\ncmds.addAttr(objs[0], longName='colorTest', attributeType='float3', usedAsColor=True)\n```", "```py\n    cmds.addAttr(objs[0], longName='colorR', attributeType='float', parent='colorTest' )\n    cmds.addAttr(objs[0], longName='colorG', attributeType='float', parent='colorTest' )\n    cmds.addAttr(objs[0], longName='colorB', attributeType='float', parent='colorTest' )\n```", "```py\nimport maya.cmds as cmds\n\ndef showUI():\n    myWin = cmds.window(title=\"IK Rig\", widthHeight=(200, 200))\n    cmds.columnLayout()\n    cmds.button(label=\"Make Locators\", command=makeLocators, width=200)\n    cmds.button(label=\"Setup IK\", command=setupIK, width=200)\n\n    cmds.showWindow(myWin)\n\ndef makeLocators(args):\n    global hipLoc\n    global kneeLoc\n    global ankleLoc\n    global footLoc\n\n    hipLoc = cmds.spaceLocator(name=\"HipLoc\")\n    kneeLoc = cmds.spaceLocator(name=\"KneeLoc\")\n    ankleLoc = cmds.spaceLocator(name=\"AnkleLoc\")\n    footLoc = cmds.spaceLocator(name=\"FootLoc\")\n\n    cmds.xform(kneeLoc, absolute=True, translation=(0, 5, 0))\n    cmds.xform(hipLoc, absolute=True, translation=(0, 10, 0))\n    cmds.xform(footLoc, absolute=True, translation=(2, 0, 0))\n\ndef setupIK(args):\n    global hipLoc\n    global kneeLoc\n    global ankleLoc\n    global footLoc\n\n    cmds.select(clear=True)\n\n    pos = cmds.xform(hipLoc, query=True, translation=True, worldSpace=True)\n    hipJoint = cmds.joint(position=pos)\n\n    pos = cmds.xform(kneeLoc, query=True, translation=True, worldSpace=True)\n    kneeJoint = cmds.joint(position=pos)\n\n    pos = cmds.xform(ankleLoc, query=True, translation=True, worldSpace=True)\n    ankleJoint = cmds.joint(position=pos)\n\n    pos = cmds.xform(footLoc, query=True, translation=True, worldSpace=True)\n    footJoint = cmds.joint(position=pos)\n\n    cmds.ikHandle(startJoint=hipJoint, endEffector=ankleJoint)\n\nshowUI()\n```", "```py\ndef showUI():\n    myWin = cmds.window(title=\"IK Rig\", widthHeight=(200, 200))\n    cmds.columnLayout()\n    cmds.button(label=\"Make Locators\", command=makeLocators, width=200)\n    cmds.button(label=\"Setup IK\", command=setupIK, width=200)\n\n    cmds.showWindow(myWin)\n```", "```py\n    global hipLoc\n    global kneeLoc\n    global ankleLoc\n    global footLoc\n```", "```py\n    hipLoc = cmds.spaceLocator(name=\"HipLoc\")\n    kneeLoc = cmds.spaceLocator(name=\"KneeLoc\")\n    ankleLoc = cmds.spaceLocator(name=\"AnkleLoc\")\n    footLoc = cmds.spaceLocator(name=\"FootLoc\")\n```", "```py\ncmds.xform(kneeLoc, absolute=True, translation=(0, 5, 0))\ncmds.xform(hipLoc, absolute=True, translation=(0, 10, 0))\ncmds.xform(footLoc, absolute=True, translation=(2, 0, 0))\n```", "```py\n    global hipLoc\n    global kneeLoc\n    global ankleLoc\n    global footLoc\n\n    cmds.select(clear=True)\n```", "```py\n    pos = cmds.xform(hipLoc, query=True, translation=True, worldSpace=True)\n    hipJoint = cmds.joint(name=\"hipBone\", position=pos)\n\n    pos = cmds.xform(kneeLoc, query=True, translation=True, worldSpace=True)\n    kneeJoint = cmds.joint(name=\"kneeBone\",position=pos)\n\n    pos = cmds.xform(ankleLoc, query=True, translation=True, worldSpace=True)\n    ankleJoint = cmds.joint(name=\"akleBone\", position=pos)\n\n    pos = cmds.xform(footLoc, query=True, translation=True, worldSpace=True)\n    footJoint = cmds.joint(name=\"footBone\", position=pos)\n```", "```py\ncmds.ikHandle(startJoint=hipJoint, endEffector=ankleJoint)\n```", "```py\n    cmds.setAttr(kneeJoint + \".jointTypeX\", 0)\n    cmds.setAttr(kneeJoint + \".jointTypeY\", 0)\n```", "```py\n    cmds.transformLimits(kneeJoint, rotationZ=(-90, 0), enableRotationZ=(1,1))\n```", "```py\n    cmds.transformLimits(kneeJoint, rotationZ=(-90, 0), enableRotationZ=(1,0))\n```"]