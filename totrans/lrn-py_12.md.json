["```py\n$ django-admin startproject pwdweb\n\n```", "```py\n$ tree -A pwdweb\npwdweb\n├── db.sqlite3\n├── manage.py\n├── pwdweb\n│   ├── __init__.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n└── records\n ├── admin.py\n ├── forms.py\n ├── __init__.py\n ├── migrations\n │   ├── 0001_initial.py\n │   └── __init__.py\n ├── models.py\n ├── static\n │   └── records\n │       ├── css\n │       │   └── main.css\n │       └── js\n │           ├── api.js\n │           └── jquery-2.1.4.min.js\n ├── templates\n │   └── records\n │       ├── base.html\n │       ├── footer.html\n │       ├── home.html\n │       ├── list.html\n │       ├── messages.html\n │       ├── record_add_edit.html\n │       └── record_confirm_delete.html\n ├── templatetags\n │   └── record_extras.py\n ├── urls.py\n └── views.py\n\n```", "```py\nENCRYPTION_KEY = b'qMhPGx-ROWUDr4veh0ybPRL6viIUNe0vcPDmy67x6CQ='\n```", "```py\nfrom cryptography.fernet import Fernet\nfrom django.conf import settings\nfrom django.db import models\n\nclass Record(models.Model):\n    DEFAULT_ENCODING = 'utf-8'\n\n    title = models.CharField(max_length=64, unique=True)\n    username = models.CharField(max_length=64)\n    email = models.EmailField(null=True, blank=True)\n    url = models.URLField(max_length=255, null=True, blank=True)\n    password = models.CharField(max_length=2048)\n    notes = models.TextField(null=True, blank=True)\n    created = models.DateTimeField(auto_now_add=True)\n    last_modified = models.DateTimeField(auto_now=True)\n\n    def encrypt_password(self):\n        self.password = self.encrypt(self.password)\n\n    def decrypt_password(self):\n        self.password = self.decrypt(self.password)\n\n    def encrypt(self, plaintext):\n        return self.cypher('encrypt', plaintext)\n\n    def decrypt(self, cyphertext):\n        return self.cypher('decrypt', cyphertext)\n\n    def cypher(self, cypher_func, text):\n        fernet = Fernet(settings.ENCRYPTION_KEY)\n        result = getattr(fernet, cypher_func)(\n            self._to_bytes(text))\n        return self._to_str(result)\n\n    def _to_str(self, bytes_str):\n        return bytes_str.decode(self.DEFAULT_ENCODING)\n\n    def _to_bytes(self, s):\n        return s.encode(self.DEFAULT_ENCODING)\n```", "```py\ndef cypher_encrypt(self, text):\n        fernet = Fernet(settings.ENCRYPTION_KEY)\n        result = fernet.encrypt(\n            self._to_bytes(text))\n        return self._to_str(result)\n```", "```py\n$ python manage.py makemigrations\n$ python manage.py migrate\n\n```", "```py\n>>> from cryptography.fernet import Fernet\n>>> Fernet.generate_key()\n\n```", "```py\nfrom django.forms import ModelForm, Textarea\nfrom .models import Record\n\nclass RecordForm(ModelForm):\n    class Meta:\n        model = Record\n        fields = ['title', 'username', 'email', 'url',\n                  'password', 'notes']\n        widgets = {'notes': Textarea(\n            attrs={'cols': 40, 'rows': 4})}\n```", "```py\nfrom django.contrib import messages\nfrom django.contrib.messages.views import SuccessMessageMixin\nfrom django.core.urlresolvers import reverse_lazy\nfrom django.views.generic import TemplateView\nfrom django.views.generic.edit import (\n    CreateView, UpdateView, DeleteView)\nfrom .forms import RecordForm\nfrom .models import Record\n\nclass HomeView(TemplateView):\n    template_name = 'records/home.html'\n```", "```py\nclass RecordListView(TemplateView):\n    template_name = 'records/list.html'\n\n    def get(self, request, *args, **kwargs):\n        context = self.get_context_data(**kwargs)\n        records = Record.objects.all().order_by('title')  #1\n        for record in records:\n            record.plaintext = record.decrypt(record.password) #2\n        context['records'] = records\n        return self.render_to_response(context)\n```", "```py\nclass EncryptionMixin:\n    def form_valid(self, form):\n        self.encrypt_password(form)\n        return super(EncryptionMixin, self).form_valid(form)\n\n    def encrypt_password(self, form):\n        self.object = form.save(commit=False)\n        self.object.encrypt_password()\n        self.object.save()\n\nclass RecordCreateView(\n        EncryptionMixin, SuccessMessageMixin, CreateView):\n    template_name = 'records/record_add_edit.html'\n    form_class = RecordForm\n    success_url = reverse_lazy('records:add')\n    success_message = 'Record was created successfully'\n```", "```py\nself.object = form.save()\n```", "```py\nclass RecordUpdateView(\n        EncryptionMixin, SuccessMessageMixin, UpdateView):\n    template_name = 'records/record_add_edit.html'\n    form_class = RecordForm\n    model = Record\n    success_message = 'Record was updated successfully'\n\n    def get_context_data(self, **kwargs):\n        kwargs['update'] = True\n        return super(\n            RecordUpdateView, self).get_context_data(**kwargs)\n\n    def form_valid(self, form):\n        self.success_url = reverse_lazy(\n            'records:edit',\n            kwargs={'pk': self.object.pk}\n        )\n        return super(RecordUpdateView, self).form_valid(form)\n\n    def get_form_kwargs(self):\n        kwargs = super(RecordUpdateView, self).get_form_kwargs()\n        kwargs['instance'].decrypt_password()\n        return kwargs\n```", "```py\nclass RecordDeleteView(SuccessMessageMixin, DeleteView):\n    model = Record\n    success_url = reverse_lazy('records:list')\n\n    def delete(self, request, *args, **kwargs):\n        messages.success(\n            request, 'Record was deleted successfully')\n        return super(RecordDeleteView, self).delete(\n            request, *args, **kwargs)\n```", "```py\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom records import urls as records_url\nfrom records.views import HomeView\n\nurlpatterns = [\n    url(r'^admin/', include(admin.site.urls)),\n    url(r'^records/', include(records_url, namespace='records')),\n    url(r'^$', HomeView.as_view(), name='home'),\n]\n```", "```py\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom .views import (RecordCreateView, RecordUpdateView,\n                    RecordDeleteView, RecordListView)\n\nurlpatterns = [\n    url(r'^add/$', RecordCreateView.as_view(), name='add'),\n    url(r'^edit/(?P<pk>[0-9]+)/$', RecordUpdateView.as_view(),\n        name='edit'),\n    url(r'^delete/(?P<pk>[0-9]+)/$', RecordDeleteView.as_view(),\n        name='delete'),\n    url(r'^$', RecordListView.as_view(), name='list'),\n]\n```", "```py\n{% load static from staticfiles %}\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"{% static \"records/css/main.css\" %}\"\n          rel=\"stylesheet\">\n    <title>{% block title %}Title{% endblock title %}</title>\n  </head>\n\n  <body>\n    <div id=\"page-content\">\n      {% block page-content %}{% endblock page-content %}\n    </div>\n    <div id=\"footer\">{% block footer %}{% endblock footer %}</div>\n    {% block scripts %}\n <script\n src=\"img/{% static \"records/js/jquery-2.1.4.min.js\" %}\">\n </script>\n {% endblock scripts %}\n  </body>\n</html>\n```", "```py\n{% extends \"records/base.html\" %}\n{% block title %}Welcome to the Records website.{% endblock %}\n\n{% block page-content %}\n  <h1>Welcome {{ user.first_name }}!</h1>\n  <div class=\"home-option\">To create a record click\n    <a href=\"{% url \"records:add\" %}\">here.</a>\n  </div>\n  <div class=\"home-option\">To see all records click\n    <a href=\"{% url \"records:list\" %}\">here.</a>\n  </div>\n{% endblock page-content %}\n```", "```py\n<div class=\"footer\">\n  Go back <a href=\"{% url \"home\" %}\">home</a>.\n</div>\n```", "```py\n{% extends \"records/base.html\" %}\n{% load record_extras %}\n{% block title %}Records{% endblock title %}\n\n{% block page-content %}\n  <h1>Records</h1><span name=\"top\"></span>\n  {% include \"records/messages.html\" %}\n\n  {% for record in records %}\n  <div class=\"record {% cycle 'row-light-blue' 'row-white' %}\"\n       id=\"record-{{ record.pk }}\">\n    <div class=\"record-left\">\n      <div class=\"record-list\">\n        <span class=\"record-span\">Title</span>{{ record.title }}\n      </div>\n      <div class=\"record-list\">\n        <span class=\"record-span\">Username</span>\n        {{ record.username }}\n      </div>\n      <div class=\"record-list\">\n        <span class=\"record-span\">Email</span>{{ record.email }}\n      </div>\n      <div class=\"record-list\">\n        <span class=\"record-span\">URL</span>\n          <a href=\"{{ record.url }}\" target=\"_blank\">\n            {{ record.url }}</a>\n      </div>\n      <div class=\"record-list\">\n        <span class=\"record-span\">Password</span>\n        {% hide_password record.plaintext %}\n      </div>\n    </div>\n    <div class=\"record-right\">\n      <div class=\"record-list\">\n        <span class=\"record-span\">Notes</span>\n        <textarea rows=\"3\" cols=\"40\" class=\"record-notes\"\n                  readonly>{{ record.notes }}</textarea>\n      </div>\n      <div class=\"record-list\">\n        <span class=\"record-span\">Last modified</span>\n        {{ record.last_modified }}\n      </div>\n      <div class=\"record-list\">\n        <span class=\"record-span\">Created</span>\n        {{ record.created }}\n      </div>\n\n    </div>\n    <div class=\"record-list-actions\">\n      <a href=\"{% url \"records:edit\" pk=record.pk %}\">» edit</a>\n      <a href=\"{% url \"records:delete\" pk=record.pk %}\">» delete\n      </a>\n    </div>\n  </div>\n  {% endfor %}\n{% endblock page-content %}\n\n{% block footer %}\n  <p><a href=\"#top\">Go back to top</a></p>\n  {% include \"records/footer.html\" %}\n{% endblock footer %}\n```", "```py\n.record-left { float: left; width: 300px;}\n```", "```py\nfrom django import template\nfrom django.utils.html import escape\n\nregister = template.Library()\n\n@register.simple_tag\ndef hide_password(password):\n    return '<span title=\"{0}\">{1}</span>'.format(\n        escape(password), '*' * len(password))\n```", "```py\n{% if messages %}\n  {% for message in messages %}\n    <p class=\"{{ message.tags }}\">{{ message }}</p>\n  {% endfor %}\n{% endif %}\n```", "```py\nhtml, body, * {\n  font-family: 'Trebuchet MS', Helvetica, sans-serif; }\na { color: #333; }\n.record {\n  clear: both; padding: 1em; border-bottom: 1px solid #666;}\n.record-left { float: left; width: 300px;}\n.record-list { padding: 2px 0; }\n.fieldWrapper { padding: 5px; }\n.footer { margin-top: 1em; color: #333; }\n.home-option { padding: .6em 0; }\n.record-span { font-weight: bold; padding-right: 1em; }\n.record-notes { vertical-align: top; }\n.record-list-actions { padding: 4px 0; clear: both; }\n.record-list-actions a { padding: 0 4px; }\n#pwd-info { padding: 0 6px; font-size: 1.1em; font-weight: bold;}\n#id_notes { vertical-align: top; }\n/* Messages */\n.success, .errorlist {font-size: 1.2em; font-weight: bold; }\n.success {color: #25B725; }\n.errorlist {color: #B12B2B; }\n/* colors */\n.row-light-blue { background-color: #E6F0FA; }\n.row-white { background-color: #fff; }\n.green { color: #060; }\n.orange { color: #FF3300; }\n.red { color: #900; }\n```", "```py\n{% extends \"records/base.html\" %}\n{% load static from staticfiles %}\n{% block title %}\n  {% if update %}Update{% else %}Create{% endif %} Record\n{% endblock title %}\n\n{% block page-content %}\n  <h1>{% if update %}Update a{% else %}Create a new{% endif %}\n    Record\n  </h1>\n  {% include \"records/messages.html\" %}\n\n  <form action=\".\" method=\"post\">{% csrf_token %}\n    {{ form.non_field_errors }}\n\n    <div class=\"fieldWrapper\">{{ form.title.errors }}\n      {{ form.title.label_tag }} {{ form.title }}</div>\n\n    <div class=\"fieldWrapper\">{{ form.username.errors }}\n      {{ form.username.label_tag }} {{ form.username }}</div>\n\n    <div class=\"fieldWrapper\">{{ form.email.errors }}\n      {{ form.email.label_tag }} {{ form.email }}</div>\n\n    <div class=\"fieldWrapper\">{{ form.url.errors }}\n      {{ form.url.label_tag }} {{ form.url }}</div>\n\n    <div class=\"fieldWrapper\">{{ form.password.errors }}\n      {{ form.password.label_tag }} {{ form.password }}\n      <span id=\"pwd-info\"></span></div>\n\n    <button type=\"button\" id=\"validate-btn\">\n Validate Password</button>\n <button type=\"button\" id=\"generate-btn\">\n Generate Password</button>\n\n    <div class=\"fieldWrapper\">{{ form.notes.errors }}\n      {{ form.notes.label_tag }} {{ form.notes }}</div>\n\n    <input type=\"submit\"\n      value=\"{% if update %}Update{% else %}Insert{% endif %}\">\n  </form>\n{% endblock page-content %}\n\n{% block footer %}\n  <br>{% include \"records/footer.html\" %}<br>\n  Go to <a href=\"{% url \"records:list\" %}\">the records list</a>.\n{% endblock footer %}\n\n{% block scripts %}\n  {{ block.super }}\n  <script src=\"img/{% static \"records/js/api.js\" %}\"></script>\n{% endblock scripts %}\n```", "```py\nvar baseURL = 'http://127.0.0.1:5555/password';\n\nvar getRandomPassword = function() {\n  var apiURL = '{url}/generate'.replace('{url}', baseURL);\n  $.ajax({\n    type: 'GET',\n    url: apiURL,\n    success: function(data, status, request) {\n      $('#id_password').val(data[1]);\n    },\n    error: function() { alert('Unexpected error'); }\n  });\n}\n\n$(function() {\n  $('#generate-btn').click(getRandomPassword);\n});\n```", "```py\nvar validatePassword = function() {\n  var apiURL = '{url}/validate'.replace('{url}', baseURL);\n  $.ajax({\n    type: 'POST',\n    url: apiURL,\n    data: JSON.stringify({'password': $('#id_password').val()}),\n    contentType: \"text/plain\",  // Avoid CORS preflight\n    success: function(data, status, request) {\n      var valid = data['valid'], infoClass, grade;\n      var msg = (valid?'Valid':'Invalid') + ' password.';\n      if (valid) {\n        var score = data['score']['total'];\n        grade = (score<10?'Poor':(score<18?'Medium':'Strong'));\n        infoClass = (score<10?'red':(score<18?'orange':'green'));\n        msg += ' (Score: {score}, {grade})'\n          .replace('{score}', score).replace('{grade}', grade);\n      }\n      $('#pwd-info').html(msg);\n      $('#pwd-info').removeClass().addClass(infoClass);\n    },\n    error: function(data) { alert('Unexpected error'); }\n  });\n}\n\n$(function() {\n  $('#validate-btn').click(validatePassword);\n});\n```", "```py\n# Python\nerror = 'critical' if error_level > 50 else 'medium'\n// JavaScript equivalent\nerror = (error_level > 50 ? 'critical' : 'medium');\n```", "```py\n{% extends \"records/base.html\" %}\n{% block title %}Delete record{% endblock title %}\n\n{% block page-content %}\n  <h1>Confirm Record Deletion</h1>\n  <form action=\".\" method=\"post\">{% csrf_token %}\n    <p>Are you sure you want to delete \"{{ object }}\"?</p>\n    <input type=\"submit\" value=\"Confirm\" />&nbsp;\n    <a href=\"{% url \"records:list\" %}#record-{{ object.pk }}\">\n       » cancel</a>\n  </form>\n{% endblock page-content %}\n```", "```py\nclass Record(models.Model):\n    ...\n\n    def __str__(self):\n return '{}'.format(self.title)\n\n```", "```py\n$ tree -A pwdapi/\npwdapi/\n├── core\n│   ├── handlers.py\n│   └── passwords.py\n├── main.py\n└── tests\n └── test_core\n ├── test_handlers.py\n └── test_passwords.py\n\n```", "```py\nimport falcon\nfrom core.handlers import (\n    PasswordValidatorHandler,\n    PasswordGeneratorHandler,\n)\n\nvalidation_handler = PasswordValidatorHandler()\ngenerator_handler = PasswordGeneratorHandler()\n\napp = falcon.API()\napp.add_route('/password/validate/', validation_handler)\napp.add_route('/password/generate/', generator_handler)\n```", "```py\nfrom math import ceil\nfrom random import sample\nfrom string import ascii_lowercase, ascii_uppercase, digits\n\npunctuation = '!#$%&()*+-?@_|'\nallchars = ''.join(\n    (ascii_lowercase, ascii_uppercase, digits, punctuation))\n```", "```py\nclass PasswordValidator:\n    def __init__(self, password):\n        self.password = password.strip()\n```", "```py\n    def is_valid(self):\n        return (len(self.password) > 0 and\n                all(char in allchars for char in self.password))\n```", "```py\n    def score(self):\n        result = {\n            'length': self._score_length(),\n            'case': self._score_case(),\n            'numbers': self._score_numbers(),\n            'special': self._score_special(),\n            'ratio': self._score_ratio(),\n        }\n        result['total'] = sum(result.values())\n        return result\n```", "```py\n    def _score_length(self):\n        scores_list = ([0]*4) + ([1]*4) + ([3]*4) + ([5]*4)\n        scores = dict(enumerate(scores_list))\n        return scores.get(len(self.password), 7)\n```", "```py\n    def _score_case(self):\n        lower = bool(set(ascii_lowercase) & set(self.password))\n        upper = bool(set(ascii_uppercase) & set(self.password))\n        return int(lower or upper) + 2 * (lower and upper)\n```", "```py\n    def _score_numbers(self):\n        return 2 if (set(self.password) & set(digits)) else 0\n```", "```py\n    def _score_special(self):\n        return 4 if (\n            set(self.password) & set(punctuation)) else 0\n```", "```py\n    def _score_ratio(self):\n        alpha_count = sum(\n            1 if c.lower() in ascii_lowercase else 0\n            for c in self.password)\n        digits_count = sum(\n            1 if c in digits else 0 for c in self.password)\n        if digits_count == 0:\n            return 0\n        return min(ceil(alpha_count / digits_count), 7)\n```", "```py\nclass PasswordGenerator:\n\n    @classmethod\n    def generate(cls, length, bestof=10):\n        candidates = sorted([\n            cls._generate_candidate(length)\n            for k in range(max(1, bestof))\n        ])\n        return candidates[-1]\n\n    @classmethod\n    def _generate_candidate(cls, length):\n        password = cls._generate_password(length)\n        score = PasswordValidator(password).score()\n        return (score['total'], password)\n\n    @classmethod\n    def _generate_password(cls, length):\n        chars = allchars * (ceil(length / len(allchars)))\n        return ''.join(sample(chars, length))\n```", "```py\nimport json\nimport falcon\nfrom .passwords import PasswordValidator, PasswordGenerator\n\nclass HeaderMixin:\n    def set_access_control_allow_origin(self, resp):\n        resp.set_header('Access-Control-Allow-Origin', '*')\n```", "```py\nclass PasswordValidatorHandler(HeaderMixin):\n\n    def on_post(self, req, resp):\n        self.process_request(req, resp)\n        password = req.context.get('_body', {}).get('password')\n        if password is None:\n            resp.status = falcon.HTTP_BAD_REQUEST\n            return None\n\n        result = self.parse_password(password)\n        resp.body = json.dumps(result)\n\n    def parse_password(self, password):\n        validator = PasswordValidator(password)\n        return {\n            'password': password,\n            'valid': validator.is_valid(),\n            'score': validator.score(),\n        }\n\n    def process_request(self, req, resp):\n        self.set_access_control_allow_origin(resp)\n\n        body = req.stream.read()\n        if not body:\n            raise falcon.HTTPBadRequest('Empty request body',\n                'A valid JSON document is required.')\n        try:\n            req.context['_body'] = json.loads(\n body.decode('utf-8'))\n        except (ValueError, UnicodeDecodeError):\n            raise falcon.HTTPError(\n                falcon.HTTP_753, 'Malformed JSON',\n                'JSON incorrect or not utf-8 encoded.')\n```", "```py\nclass PasswordGeneratorHandler(HeaderMixin):\n\n    def on_get(self, req, resp):\n        self.process_request(req, resp)\n        length = req.context.get('_length', 16)\n        resp.body = json.dumps(\n            PasswordGenerator.generate(length))\n\n    def process_request(self, req, resp):\n        self.set_access_control_allow_origin(resp)\n        length = req.get_param('length')\n        if length is None:\n            return\n        try:\n            length = int(length)\n            assert length > 0\n            req.context['_length'] = length\n        except (ValueError, TypeError, AssertionError):\n            raise falcon.HTTPBadRequest('Wrong query parameter',\n                '`length` must be a positive integer.')\n```", "```py\n$ gunicorn -b 127.0.0.1:5555 main:app\n\n```", "```py\nclass PasswordGeneratorTestCase(TestCase):\n\n    def test__generate_password_length(self):\n        for length in range(300):\n            assert_equal(\n                length,\n                len(PasswordGenerator._generate_password(length))\n            )\n\n    def test__generate_password_validity(self):\n        for length in range(1, 300):\n            password = PasswordGenerator._generate_password(\n                length)\n            assert_true(PasswordValidator(password).is_valid())\n\n    def test__generate_candidate(self):\n        score, password = (\n            PasswordGenerator._generate_candidate(42))\n        expected_score = PasswordValidator(password).score()\n        assert_equal(expected_score['total'], score)\n\n    @patch.object(PasswordGenerator, '_generate_candidate')\n    def test__generate(self, _generate_candidate_mock):\n        # checks `generate` returns the highest score candidate\n        _generate_candidate_mock.side_effect = [\n            (16, '&a69Ly+0H4jZ'),\n            (17, 'UXaF4stRfdlh'),\n            (21, 'aB4Ge_KdTgwR'),  # the winner\n            (12, 'IRLT*XEfcglm'),\n            (16, '$P92-WZ5+DnG'),\n            (18, 'Xi#36jcKA_qQ'),\n            (19, '?p9avQzRMIK0'),\n            (17, '4@sY&bQ9*H!+'),\n            (12, 'Cx-QAYXG_Ejq'),\n            (18, 'C)RAV(HP7j9n'),\n        ]\n        assert_equal(\n            (21, 'aB4Ge_KdTgwR'), PasswordGenerator.generate(12))\n```", "```py\nfrom unittest import TestCase\nfrom unittest.mock import patch\nfrom nose_parameterized import parameterized, param\nfrom nose.tools import (\n    assert_equal, assert_dict_equal, assert_true)\nfrom core.passwords import PasswordValidator, PasswordGenerator\n\nclass PasswordValidatorTestCase(TestCase):\n\n    @parameterized.expand([\n        (False, ''),\n        (False, '  '),\n        (True, 'abcdefghijklmnopqrstuvwxyz'),\n        (True, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n        (True, '0123456789'),\n        (True, '!#$%&()*+-?@_|'),\n    ])\n    def test_is_valid(self, valid, password):\n        validator = PasswordValidator(password)\n        assert_equal(valid, validator.is_valid())\n```", "```py\n    @parameterized.expand(\n        param.explicit(char) for char in '>]{<`\\\\;,[^/\"\\'~:}=.'\n    )\n    def test_is_valid_invalid_chars(self, password):\n        validator = PasswordValidator(password)\n        assert_equal(False, validator.is_valid())\n```", "```py\n    @parameterized.expand([\n        (0, ''),  # 0-3: score 0\n        (0, 'a'),  # 0-3: score 0\n        (0, 'aa'),  # 0-3: score 0\n        (0, 'aaa'),  # 0-3: score 0\n        (1, 'aaab'),  # 4-7: score 1\n        ...\n        (5, 'aaabbbbccccddd'),  # 12-15: score 5\n        (5, 'aaabbbbccccdddd'),  # 12-15: score 5\n    ])\n    def test__score_length(self, score, password):\n        validator = PasswordValidator(password)\n        assert_equal(score, validator._score_length())\n```", "```py\n    def test__score_length_sixteen_plus(self):\n        # all password whose length is 16+ score 7 points\n        password = 'x' * 255\n        for length in range(16, len(password)):\n            validator = PasswordValidator(password[:length])\n            assert_equal(7, validator._score_length())\n```", "```py\n    @patch.object(PasswordValidator, '_score_length')\n    @patch.object(PasswordValidator, '_score_case')\n    @patch.object(PasswordValidator, '_score_numbers')\n    @patch.object(PasswordValidator, '_score_special')\n    @patch.object(PasswordValidator, '_score_ratio')\n    def test_score(\n            self,\n            _score_ratio_mock,\n            _score_special_mock,\n            _score_numbers_mock,\n            _score_case_mock,\n            _score_length_mock):\n\n        _score_ratio_mock.return_value = 2\n        _score_special_mock.return_value = 3\n        _score_numbers_mock.return_value = 5\n        _score_case_mock.return_value = 7\n        _score_length_mock.return_value = 11\n\n        expected_result = {\n            'length': 11,\n            'case': 7,\n            'numbers': 5,\n            'special': 3,\n            'ratio': 2,\n            'total': 28,\n        }\n\n        validator = PasswordValidator('')\n        assert_dict_equal(expected_result, validator.score())\n```", "```py\nimport json\nfrom unittest.mock import patch\nfrom nose.tools import assert_dict_equal, assert_equal\nimport falcon\nimport falcon.testing as testing\nfrom core.handlers import (\n    PasswordValidatorHandler, PasswordGeneratorHandler)\n\nclass PGHTest(PasswordGeneratorHandler):\n    def process_request(self, req, resp):\n        self.req, self.resp = req, resp\n        return super(PGHTest, self).process_request(req, resp)\n\nclass PVHTest(PasswordValidatorHandler):\n    def process_request(self, req, resp):\n        self.req, self.resp = req, resp\n        return super(PVHTest, self).process_request(req, resp)\n```", "```py\nclass TestPasswordValidatorHandler(testing.TestBase):\n\n    def before(self):\n        self.resource = PVHTest()\n        self.api.add_route('/password/validate/', self.resource)\n```", "```py\n    def test_post(self):\n        self.simulate_request(\n            '/password/validate/',\n            body=json.dumps({'password': 'abcABC0123#&'}),\n            method='POST')\n        resp = self.resource.resp\n\n        assert_equal('200 OK', resp.status)\n        assert_dict_equal(\n            {'password': 'abcABC0123#&',\n             'score': {'case': 3, 'length': 5, 'numbers': 2,\n                'special': 4, 'ratio': 2, 'total': 16},\n             'valid': True},\n             json.loads(resp.body))\n```", "```py\nclass TestPasswordGeneratorHandler(testing.TestBase):\n\n    def before(self):\n        self.resource = PGHTest()\n        self.api.add_route('/password/generate/', self.resource)\n\n    @patch('core.handlers.PasswordGenerator')\n    def test_get(self, PasswordGenerator):\n        PasswordGenerator.generate.return_value = (7, 'abc123')\n        self.simulate_request(\n            '/password/generate/',\n            query_string='length=7',\n            method='GET')\n        resp = self.resource.resp\n\n        assert_equal('200 OK', resp.status)\n        assert_equal([7, 'abc123'], json.loads(resp.body))\n```"]