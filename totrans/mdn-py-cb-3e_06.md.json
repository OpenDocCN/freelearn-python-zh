["```py\n >>> print(\"Hello, world.\") \n\nHello, world.\n```", "```py\n >>> count = 9973 \n\n>>> print(\"Final count\", count) \n\nFinal count 9973\n```", "```py\n date,engine on,fuel height on,engine off,fuel height off \n\n10/25/13,08:24:00,29,13:15:00,27 \n\n10/26/13,09:12:00,27,18:25:00,22 \n\n10/28/13,13:21:00,22,06:25:00,14\n```", "```py\n from pathlib import Path \n\nimport csv \n\ndef get_fuel_use(source_path: Path) -> list[dict[str, str]]: \n\n    with source_path.open() as source_file: \n\n        rdr = csv.DictReader(source_file) \n\n        return list(rdr)\n```", "```py\n >>> source_path = Path(\"data/fuel2.csv\") \n\n>>> fuel_use = get_fuel_use(source_path) \n\n>>> for row in fuel_use: \n\n...     print(row) \n\n{’date’: ’10/25/13’, ’engine on’: ’08:24:00’, ’fuel height on’: ’29’, ’engine off’: ’13:15:00’, ’fuel height off’: ’27’} \n\n{’date’: ’10/26/13’, ’engine on’: ’09:12:00’, ’fuel height on’: ’27’, ’engine off’: ’18:25:00’, ’fuel height off’: ’22’} \n\n{’date’: ’10/28/13’, ’engine on’: ’13:21:00’, ’fuel height on’: ’22’, ’engine off’: ’06:25:00’, ’fuel height off’: ’14’}\n```", "```py\n     >>> fuel_use = get_fuel_use(Path(\"data/fuel2.csv\"))\n    ```", "```py\n     >>> for leg in fuel_use: \n\n    ...     start = float(leg[\"fuel height on\"]) \n\n    ...     finish = float(leg[\"fuel height off\"])\n    ```", "```py\n         ...     print(\"On\", leg[\"date\"], \"from\", leg[\"engine on\"], \n\n        ...         \"to\", leg[\"engine off\"], \n\n        ...         \"change\", start-finish, \"in.\") \n\n        On 10/25/13 from 08:24:00 to 13:15:00 change 2.0 in. \n\n        On 10/26/13 from 09:12:00 to 18:25:00 change 5.0 in. \n\n        On 10/28/13 from 13:21:00 to 06:25:00 change 8.0 in. \n        ```", "```py\n         ...     print(leg[\"date\"], leg[\"engine on\"], \n\n        ...         leg[\"engine off\"], start-finish, sep=\" | \") \n\n        10/25/13 | 08:24:00 | 13:15:00 | 2.0 \n\n        10/26/13 | 09:12:00 | 18:25:00 | 5.0 \n\n        10/28/13 | 13:21:00 | 06:25:00 | 8.0 \n        ```", "```py\n         ...     print(\"date\", leg[\"date\"], sep=\"=\", end=\", \") \n\n        ...     print(\"on\", leg[\"engine on\"], sep=\"=\", end=\", \") \n\n        ...     print(\"off\", leg[\"engine off\"], sep=\"=\", end=\", \") \n\n        ...     print(\"change\", start-finish, sep=\"=\") \n\n        date=10/25/13, on=08:24:00, off=13:15:00, change=2.0 \n\n        date=10/26/13, on=09:12:00, off=18:25:00, change=5.0 \n\n        date=10/28/13, on=13:21:00, off=06:25:00, change=8.0 \n        ```", "```py\n >>> import sys \n\n>>> print(\"Red Alert!\", file=sys.stderr) \n```", "```py\n % python myapp.py < input.dat > output.dat\n```", "```py\n >>> from pathlib import Path \n\n>>> target_path = Path(\"data\")/\"extra_detail.log\" \n\n>>> with target_path.open(’w’) as target_file: \n\n...     print(\"Some detailed output\", file=target_file) \n\n...     print(\"Ordinary log\") \n\nOrdinary log\n```", "```py\n from datetime import date \n\ndef get_date1() -> date: \n\n    year = int(input(\"year: \")) \n\n    month = int(input(\"month [1-12]: \")) \n\n    day = int(input(\"day [1-31]: \")) \n\n    result = date(year, month, day) \n\n    return result\n```", "```py\n     from getpass import getpass\n    ```", "```py\n     year_text = input(\"year: \")\n    ```", "```py\n     year = int(year_text)\n    ```", "```py\n     year = None \n\n        while year is None: \n\n            year_text = input(\"year: \") \n\n            try: \n\n                year = int(year_text) \n\n            except ValueError as ex: \n\n                print(ex)\n    ```", "```py\n def get_integer(prompt: str) -> int: \n\n    while True: \n\n        value_text = input(prompt) \n\n        try: \n\n            value = int(value_text) \n\n            return value \n\n        except ValueError as ex: \n\n            print(ex) \n```", "```py\n def get_date2() -> date: \n\n    while True: \n\n        year = get_integer(\"year: \") \n\n        month = get_integer(\"month [1-12]: \") \n\n        day = get_integer(\"day [1-31]: \") \n\n        try: \n\n            result = date(year, month, day) \n\n            return result \n\n        except ValueError as ex: \n\n            print(f\"invalid, {ex}\")\n```", "```py\n >>> import statistics \n\n>>> size = [2353, 2889, 2195, 3094, \n\n...     725, 1099, 690, 1207, 926, \n\n...     758, 615, 521, 1320] \n\n>>> mean_size = statistics.mean(size) \n\n>>> std_size = statistics.stdev(size) \n\n>>> sig1 = round(mean_size + std_size, 1) \n\n>>> [x for x in size if x > sig1] \n\n[2353, 2889, 3094]\n```", "```py\n >>> print( \n\n...     f\"{mean_size=:.2f}, {std_size=:.2f}\" \n\n... ) \n\nmean_size=1414.77, std_size=901.10\n```", "```py\n >>> print( \n\n...     f\"{mean_size=:.2f}, {std_size=:.2f},\" \n\n...     f\" {mean_size + 2 * std_size=:.2f}\" \n\n... ) \n\nmean_size=1414.77, std_size=901.10, mean_size + 2 * std_size=3216.97\n```", "```py\n % python ch06/distance_app.py -u KM 36.12,-86.67 33.94,-118.40 \n\nFrom 36.12,-86.67 to 33.94,-118.4 in KM = 2886.90\n```", "```py\n % python ch06/distance_app.py -u KM 36.12,-86.67 33.94,-118asd \n\nusage: distance_app.py [-h] [-u {NM,MI,KM}] p1 p2 \n\ndistance_app.py: error: argument p2: could not convert string to float: ’-118asd’\n```", "```py\n from ch06.distance_computation import haversine, MI, NM, KM \n\ndef display( \n\n        lat1: float, lon1: float, lat2: float, lon2: float, r: str \n\n) -> None: \n\n    r_float = {\"NM\": NM, \"KM\": KM, \"MI\": MI}[r] \n\n    d = haversine(lat1, lon1, lat2, lon2, R=r_float) \n\n    print(f\"From {lat1},{lon1} to {lat2},{lon2} in {r} = {d:.2f}\")\n```", "```py\n >>> display(36.12, -86.67, 33.94, -118.4, ’NM’) \n\nFrom 36.12,-86.67 to 33.94,-118.4 in NM = 1558.53\n```", "```py\n     def get_options(argv: list[str]) -> argparse.Namespace:\n    ```", "```py\n     parser = argparse.ArgumentParser()\n    ```", "```py\n     parser.add_argument(\"-u\", \"--units\", \n\n            action=\"store\", choices=(\"NM\", \"MI\", \"KM\"), default=\"NM\") \n\n        parser.add_argument(\"p1\", action=\"store\", type=point_type) \n\n        parser.add_argument(\"p2\", action=\"store\", type=point_type)\n    ```", "```py\n     options = parser.parse_args(argv) \n    ```", "```py\n def get_options(argv: list[str]) -> argparse.Namespace: \n\n    parser = argparse.ArgumentParser() \n\n    parser.add_argument(\"-u\", \"--units\", \n\n        action=\"store\", choices=(\"NM\", \"MI\", \"KM\"), default=\"NM\") \n\n    parser.add_argument(\"p1\", action=\"store\", type=point_type) \n\n    parser.add_argument(\"p2\", action=\"store\", type=point_type) \n\n    options = parser.parse_args(argv) \n\n    return options\n```", "```py\n def point_type(text: str) -> tuple[float, float]: \n\n    try: \n\n        lat_str, lon_str = text.split(\",\") \n\n        lat = float(lat_str) \n\n        lon = float(lon_str) \n\n        return lat, lon \n\n    except ValueError as ex: \n\n        raise argparse.ArgumentTypeError(ex)\n```", "```py\n def main(argv: list[str] = sys.argv[1:]) -> None: \n\n    options = get_options(argv) \n\n    lat_1, lon_1 = options.p1 \n\n    lat_2, lon_2 = options.p2 \n\n    display(lat_1, lon_1, lat_2, lon_2, r=options.r) \n\nif __name__ == \"__main__\": \n\n    main()\n```", "```py\n % python some_program.py *.rst\n```", "```py\n parser.add_argument(’file’, type=Path, nargs=’*’)\n```", "```py\n for filename in options.file: \n\n        process(filename)\n```", "```py\n(cookbook3) % python -m pip install invoke\n```", "```py\n % RECIPE=7  # invoke\n```", "```py\n     import sys \n\n    from invoke.tasks import task \n\n    from invoke.context import Context\n    ```", "```py\n     @task( \n\n        help={ \n\n            ’p1’: ’Lat,Lon’, \n\n            ’p2’: ’Lat,Lon’, \n\n            ’u’: ’Unit: KM, MI, NM’}) \n\n    def distance( \n\n            context: Context, p1: str, p2: str, u: str = \"KM\" \n\n    ) -> None: \n\n        \"\"\"Compute distance between two points. \n\n        \"\"\"\n    ```", "```py\n     try: \n\n            lat_1, lon_1 = point_type(p1) \n\n            lat_2, lon_2 = point_type(p2) \n\n            display(lat_1, lon_1, lat_2, lon_2, r=u) \n\n        except (ValueError, KeyError) as ex: \n\n            sys.exit(f\"{ex}\\nFor help use invoke --help distance\") \n    ```", "```py\n@task \n\ndef distance(context: Context, p1: str, p2: str, u: str) -> None: \n\n    ...  # Shown earlier \n\n@task \n\ndef route(context: Context, filename: str) -> None: \n\n    if not path(filename).exists(): \n\n        sys.exit(f\"File not found {filename}\") \n\n    context.run(\"python some_app.py {filename}\", env={\"APP_UNITS\": \"NM\"})\n```", "```py\n ] dice 5 \n\nRolling 5 dice \n\n] roll \n\n[5, 6, 6, 1, 5] \n\n]\n```", "```py\n     import cmd \n\n    import random\n    ```", "```py\n     class DiceCLI(cmd.Cmd):\n    ```", "```py\n     def preloop(self) -> None: \n\n            self.n_dice = 6 \n\n            self.dice: list[int] | None = None  # no roll has been made. \n\n            self.reroll_count = 0\n    ```", "```py\n     def do_roll(self, arg: str) -> bool: \n\n            \"\"\"Roll the dice. Use the dice command to set the number of dice.\"\"\" \n\n            self.dice = [random.randint(1, 6) for _ in range(self.n_dice)] \n\n            print(f\"{self.dice}\") \n\n            return False\n    ```", "```py\n     def do_dice(self, arg: str) -> bool: \n\n            \"\"\"Sets the number of dice to roll.\"\"\" \n\n            try: \n\n                self.n_dice = int(arg) \n\n            except ValueError: \n\n                print(f\"{arg!r} is invalid\") \n\n                return False \n\n            self.dice = None \n\n            print(f\"Rolling {self.n_dice} dice\") \n\n            return False\n    ```", "```py\n     if __name__ == \"__main__\": \n\n        game = DiceCLI() \n\n        game.cmdloop()\n    ```", "```py\n     class DiceCLI2(cmd.Cmd): \n\n        prompt = \"] \" \n\n        intro = \"A dice rolling tool. ? for help.\"\n    ```", "```py\n % python ch06/distance_app.py -u KM 36.12,-86.67 33.94,-118.40 \n\nFrom 36.12,-86.67 to 33.94,-118.4 in KM = 2886.90 \n\n\"\"\"\n```", "```py\n % UNITS=NM \n\n% HOME_PORT=36.842952,-76.300171 \n\n% python ch06/distance_app.py 36.12,-86.67 \n\nFrom 36.12,-86.67 to 36.842952,-76.300171 in NM = 502.23\n```", "```py\n     import os \n\n    import sys \n\n    import argparse\n    ```", "```py\n     from ch03.recipe_11 import haversine, MI, NM, KM \n\n    from ch06.recipe_04 import point_type, display\n    ```", "```py\n     def get_options(argv: list[str] = sys.argv[1:]) -> argparse.Namespace:\n    ```", "```py\n     default_units = os.environ.get(\"UNITS\", \"KM\") \n\n        if default_units not in (\"KM\", \"NM\", \"MI\"): \n\n            sys.exit(f\"Invalid UNITS, {default_units!r} not KM, NM, or MI\") \n\n        default_home_port = os.environ.get(\"HOME_PORT\")\n    ```", "```py\n     parser = argparse.ArgumentParser() \n\n        parser.add_argument(\"-u\", \"--units\", \n\n            action=\"store\", choices=(\"NM\", \"MI\", \"KM\"), \n\n            default=default_units \n\n        ) \n\n        parser.add_argument(\"p1\", action=\"store\", type=point_type) \n\n        parser.add_argument( \n\n            \"p2\", nargs=\"?\", action=\"store\", type=point_type, \n\n            default=default_home_port \n\n        )\n    ```", "```py\n     options = parser.parse_args(argv) \n\n        if options.p2 is None: \n\n            sys.exit(\"Neither HOME_PORT nor p2 argument provided.\")\n    ```", "```py\n     return options\n    ```", "```py\n [’ch06/distance_app.py’, ’-u’, ’NM’, ’36.12,-86.67’]\n```"]