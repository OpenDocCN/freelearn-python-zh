["```py\nclass Note(ndb.Model):\n    title = ndb.StringProperty()\n    content = ndb.TextProperty(required=True)\n    date_created = ndb.DateTimeProperty(auto_now_add=True)\n    checklist_items = ndb.StructuredProperty(CheckListItem,\n                                             repeated=True)\n    files = ndb.KeyProperty(\"NoteFile\", repeated=True)\n```", "```py\n@ndb.transactional\ndef _create_note(self, user, file_name, file_path):\n    note = Note(parent=ndb.Key(\"User\", user.nickname()),\n                title=self.request.get('title'),\n                content=self.request.get('content'))\n\n    item_titles = self.request.get('checklist_items').split(',')\n    for item_title in item_titles:\n        if not item_title:\n            continue\n        item = CheckListItem(title=item_title)\n        note.checklist_items.append(item)\n    note.put()\n\n    if file_name and file_path:\n        url, thumbnail_url = self._get_urls_for(file_name)\n\n        f = NoteFile(parent=note.key, name=file_name,\n                     url=url, thumbnail_url=thumbnail_url,\n                     full_path=file_path)\n        f.put()\n        note.files.append(f.key)\n        note.put()\n```", "```py\n{% if note.checklist_items %}\n<ul>\n  {% for item in note.checklist_items %}\n  <li class=\"{%if item.checked%}checked{%endif%}\">\n    {{item.title}}\n  </li>\n  {% endfor %}\n</ul>\n{% endif %}\n```", "```py\n{% if note.checklist_items %}\n<ul>\n  {% for item in note.checklist_items %}\n  <li class=\"{%if item.checked%}checked{%endif%}\">\n    <a href=\"/toggle/{{note.key.urlsafe()}}/{{ loop.index }}\">\n      {{item.title}}\n    </a>\n  </li>\n  {% endfor %}\n</ul>\n{% endif %}\n```", "```py\ndiv.note > ul > li > a {\n    text-decoration: none;\n    color: inherit;\n}\n```", "```py\nclass ToggleHandler(webapp2.RequestHandler):\n    def get(self, note_key, item_index):\n        item_index = int(item_index) - 1\n        note = ndb.Key(urlsafe=note_key).get()\n        item = note.checklist_items[item_index]\n        item.checked = not item.checked\n        note.put()\n        self.redirect('/')\n```", "```py\napp = webapp2.WSGIApplication([\n    (r'/', MainHandler),\n    (r'/media/(?P<file_name>[\\w.]{0,256})', MediaHandler),\n    (r'/shrink', ShrinkHandler),\n    (r'/shrink_all', ShrinkCronJob),\n    (r'/toggle/(?P<note_key>[\\w\\-]+)/(?P<item_index>\\d+)', ToggleHandler),\n    (r'/_ah/mail/create@book-123456\\.appspotmail\\.com', CreateNoteHandler),\n], debug=True)\n```", "```py\nnotes = Note.owner_query(ancestor_key).fetch(\n    projection=[Note.files])\n```", "```py\nancestor_key = ndb.Key(\"User\", user.nickname())\nnotes = Note.owner_query(ancestor_key).fetch()\nfor note in notes:\n    self._shrink_note(note)\n```", "```py\nancestor_key = ndb.Key(\"User\", user.nickname())\nNote.owner_query(ancestor_key).map(self._shrink_note)\n```", "```py\nNote.owner_query(ancestor_key).map(\n    self._shrink_note, projection=[Note.files])\n```", "```py\ndef _render_template(self, template_name, context=None):\n    if context is None:\n        context = {}\n\n    user = users.get_current_user()\n    ancestor_key = ndb.Key(\"User\", user.nickname())\n    qry = Note.owner_query(ancestor_key)\n    context['notes'] = qry.fetch()\n\n    template = jinja_env.get_template(template_name)\n    return template.render(context)\n```", "```py\ndef _render_template(self, template_name, context=None):\n    if context is None:\n        context = {}\n\n    user = users.get_current_user()\n    ancestor_key = ndb.Key(\"User\", user.nickname())\n    qry = Note.owner_query(ancestor_key)\n    future = qry.fetch_async()\n\n    template = jinja_env.get_template(template_name)\n\n    context['notes'] = future.get_result()\n    return template.render(context)\n```", "```py\n@ndb.tasklet\ndef _shrink_note(self, note):\n    for file_key in note.files:\n        file = yield file_key.get_async()\n        try:\n            with cloudstorage.open(file.full_path) as f:\n                image = images.Image(f.read())\n                image.resize(640)\n                new_image_data = image.execute_transforms()\n\n            content_t = images_formats.get(str(image.format))\n            with cloudstorage.open(file.full_path, 'w',\n                                   content_type=content_t) as f:\n                f.write(new_image_data)\n\n        except images.NotImageError:\n            pass\n```", "```py\nUserLoader(user=user_instance).put()\nkey.delete(use_datastore=False)\nu_loader = UserLoader.query(\n    UserLoader.user == user_instance).get()\n```", "```py\nctx = ndb.get_context()\nctx.set_cache_policy(lambda key: key.kind() != 'UserLoader')\nUserLoader(user=user_instance).put()\nu_loader = UserLoader.query(\n    UserLoader.user == user_instance).get()\n```", "```py\n- kind: Note\n  ancestor: yes\n  properties:\n  - name: date_created\n    direction: desc\n  - name: NoteFile\n```", "```py\nclass NoteFile(ndb.Model):\n    name = ndb.StringProperty(indexed=False)\n    url = ndb.StringProperty(indexed=False)\n    thumbnail_url = ndb.StringProperty(indexed=False)\n    full_path = ndb.StringProperty(indexed=False)\n```", "```py\nfrom google.appengine.api import memcache\nfrom models import Note\ndef get_note_counter():\n    data = memcache.get('note_count')\n    if data is None:\n        data = Note.query().count()\n        memcache.set('note_count', data)\n\n    return data\n```", "```py\ndef _render_template(self, template_name, context=None):\n    if context is None:\n        context = {}\n    user = users.get_current_user()\n    ancestor_key = ndb.Key(\"User\", user.nickname())\n    qry = Note.owner_query(ancestor_key)\n    future = qry.fetch_async()\n\n    template = jinja_env.get_template(template_name)\n\n    context['notes'] = future.get_result()\n    context['note_count'] = get_note_counter()\n\n    return template.render(context)\n```", "```py\nfrom utils import get_note_counter\n```", "```py\n<body>\n  <div class=\"container\">\n\n    <h1>Welcome to Notes!</h1>\n    <h5>{{ note_count }} notes stored so far!</h5>\n```", "```py\ndef inc_note_counter():\n    client = memcache.Client()\n    retry = 0\n    while retry < 10:\n        data = client.gets('note_count')\n        if client.cas('note_count', data+1):\n            break\n        retry += 1\n```", "```py\napplication: notes\nmodule: backend\nversion: 1\nruntime: python27\napi_version: 1\nthreadsafe: yes\n\nhandlers:\n- url: .*\n  script: backend.app\n```", "```py\napp = webapp2.WSGIApplication([\n    (r'/shrink_all', ShrinkCronJob),\n], debug=True)\n```", "```py\nclass ShrinkCronJob(webapp2.RequestHandler):\n    @ndb.tasklet\n    def _shrink_note(self, note):\n        for file_key in note.files:\n            file = yield file_key.get_async()\n            try:\n                with cloudstorage.open(file.full_path) as f:\n                    image = images.Image(f.read())\n                    image.resize(640)\n                    new_image_data = image.execute_transforms()\n\n                content_t = images_formats.get(str(image.format))\n                with cloudstorage.open(file.full_path, 'w',\n                                       content_type=content_t) as f:\n                    f.write(new_image_data)\n\n            except images.NotImageError:\n                pass\n\n    def get(self):\n        if 'X-AppEngine-Cron' not in self.request.headers:\n            self.error(403)\n\n        notes = Note.query().fetch()\n        for note in notes:\n            self._shrink_note(note)\n```", "```py\ndispatch:\n\n  - url: \"*/shrink_all\"\n    module: backend\n\n  - url: \"*/*\"\n    module: default\n```", "```py\ndev_appserver.py app.yaml backend.yaml dispatch.yaml\n\n```", "```py\nappcfg.py update app.yaml backend.yaml\n\n```"]