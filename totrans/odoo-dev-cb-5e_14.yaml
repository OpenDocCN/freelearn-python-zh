- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CMS Website Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo has a built-in feature called Website Builder, which is a powerful tool
    that allows you to create and manage websites within the Odoo ERP ecosystem. It
    offers a user-friendly and visual approach to web design, making it accessible
    to users without extensive technical knowledge.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some key features and aspects of Odoo Website Builder:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Drag-and-drop interface**: Website Builder provides a drag-and-drop interface,
    allowing you to easily add and arrange various content elements on your web pages.
    This includes text, images, videos, forms, buttons, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Pre-designed templates**: Odoo offers a selection of pre-designed website
    templates that you can use as a starting point. These templates are customizable
    and can be adapted to your brand’s identity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Responsive design**: Websites created with Odoo are designed to be responsive,
    which means they automatically adapt to different screen sizes and devices, ensuring
    a consistent user experience on desktops, tablets, and smartphones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Content management**: You can create and manage web pages, blogs, product
    listings, and other types of content easily. Website Builder provides a **content
    management system** (**CMS**) to organize and update your content.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Search engine optimization (SEO)**: Odoo includes tools for SEO, allowing
    you to set metadata, define SEO-friendly URLs, and manage sitemaps to improve
    your website’s visibility in search engines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multilingual support**: Odoo supports multiple languages, making it suitable
    for businesses with international audiences. You can translate content and adapt
    your website for different regions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integration with other Odoo modules**: One of the advantages of using Odoo
    Website Builder is its seamless integration with other Odoo modules, such as CRM,
    sales, inventory, and more. This means you can manage various aspects of your
    business within a unified system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Analytics and reporting**: Odoo provides built-in analytics and reporting
    tools to track the performance of your website, including visitor statistics,
    conversion rates, and more.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Custom development**: For businesses with unique requirements, Odoo’s modular
    architecture allows for custom development to extend the platform’s functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, you will explore the developments of the Odoo website’s custom
    features and learn how to create web pages. You will also learn how to create
    building blocks that users can drag and drop on a page. Advanced things such as
    **Urchin Tracking Modules** (**UTMs**), SEO, multi-websites, GeoIP, and sitemaps
    are also covered in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Managing assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding CSS and JavaScript for a website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating or modifying templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing dynamic routes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offering static snippets to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Offering dynamic snippets to the user
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting input from website users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing SEO options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing sitemaps for the website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a visitor’s country information
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tracking a marketing campaign
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing multiple websites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting old URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Publish management for website-related records
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the context of Odoo’s website, assets refer to various types of resources,
    such as **Cascading Style Sheets** (**CSS**), JavaScript files, fonts, and images,
    that are used to enhance the appearance and functionality of your website. Managing
    assets in Odoo is important for maintaining a well-structured and efficient website.
    When a page is loaded in the browser, these static files make a separate request
    to the server. The higher the number of requests, the lower the website speed.
    To avoid this issue, most websites serve static assets by combining multiple files.
    There are several tools on the market to manage these sorts of things, but Odoo
    has its own implementation for managing static assets.
  prefs: []
  type: TYPE_NORMAL
- en: What are asset bundles and different assets in Odoo?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Odoo, asset bundles are collections of different assets, such as CSS, JavaScript
    files, and other resources, grouped together for efficient and organized loading
    on your website. Asset bundles help manage the loading of these resources by allowing
    you to define which assets should be loaded together to improve performance and
    ensure that your website functions properly. The job of an asset bundle is to
    combine all the JavaScript and CSS in a single file and reduce its size by minimizing
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the different asset bundles used in Odoo:'
  prefs: []
  type: TYPE_NORMAL
- en: '`web._assets_primary_variables`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web._assets_secondary_variables`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_backend`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_frontend`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_frontend_minimal`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_frontend_lazy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.report_assets_common`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.report_assets_pdf`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_web_dark`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web._assets_frontend_helpers`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web_editor.assets_wysiwyg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`website.assets_wysiwyg`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`website.assets_editor`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: There are some other asset bundles used for specific applications;
  prefs: []
  type: TYPE_NORMAL
- en: for example, `point_of_sale.assets`, `survey.survey_assets`, `mass_mailing.layout`,
    and `website_slides.slide_embed_assets`.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo manages its static assets through the `AssetBundle` class, which is located
    at `/odoo/addons/base/models/assetsbundle.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, `AssetBundle` not only combines multiple files; it is also packed with
    more features. Here is the list of features it provides:'
  prefs: []
  type: TYPE_NORMAL
- en: It combines multiple JavaScript and CSS files.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It minifies the JavaScript and CSS files by removing comments, extra spaces,
    and carriage returns from the file content. Removing this extra data will reduce
    the size of static assets and improve the page loading speed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has built-in support for CSS preprocessors, such as **Sassy CSS** (**SCSS**)
    and **Leaner Style Sheets** (**LESS**). This means you can add SCSS and LESS files
    and they will automatically be compiled and added to the bundle.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Custom assets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As we have seen, Odoo has different assets for different code bases. To get
    the right result, you will need to choose the right asset bundle in which to place
    your custom JavaScript and CSS files. For example, if you are designing a website,
    you need to put your file in `web.assets_frontend`. Although it is rare, sometimes,
    you need to create a whole new asset bundle. You can create your own asset bundle,
    as we will describe in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To load assets, you can use the `web.assets_frontend` template in your module’s
    `__manifest__.py` file; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Here are some of the most important bundles:'
  prefs: []
  type: TYPE_NORMAL
- en: '`web.assets_common`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_backend`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_frontend`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.qunit_suite_tests`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.qunit_mobile_suite_tests`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Operations
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are all directives targeting a certain asset file:'
  prefs: []
  type: TYPE_NORMAL
- en: '`before`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`after`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`replace`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`remove`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: append
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An appending assets operation refers to adding additional CSS or JavaScript
    files to existing bundles or templates provided by other modules or the Odoo core.
    This allows you to extend the functionality or appearance without modifying the
    original code directly; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Always consider the sequence in which your assets are loaded. If your code depends
    on any specific libraries or functionalities defined in other assets, ensure they
    are loaded in the correct order to avoid conflicts or errors.
  prefs: []
  type: TYPE_NORMAL
- en: prepend
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Prepending assets in Odoo involves adding your own CSS or JavaScript files
    at the beginning of existing bundles or templates provided by other modules or
    the Odoo core. This helps ensure that your customizations take precedence over
    existing styles or scripts; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Determine the sequence in which your assets are loaded. Prepending assets means
    they’ll be loaded before other styles or scripts, potentially impacting functionality
    or design. Be cautious with overriding core functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: before
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Odoo, organizing assets such as CSS or JavaScript files before other modules’
    assets involves controlling the loading order of resources to ensure your module’s
    files are loaded before those of other modules; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Ensure that you’re referring to the correct assets or templates of modules you
    want to load your resources beforehand. Incorrect referencing might lead to errors
    or unexpected behavior.
  prefs: []
  type: TYPE_NORMAL
- en: after
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Odoo, organizing assets such as CSS or JavaScript files to load after other
    modules’ assets involves controlling the loading order to ensure your module’s
    files are loaded after those of other modules. This is useful when you need your
    assets to rely on or override styles or scripts from other modules; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Controlling the loading sequence using the `after` attribute or Python code
    helps ensure your module’s assets are loaded after other modules, enabling you
    to manage dependencies and customizations effectively.
  prefs: []
  type: TYPE_NORMAL
- en: include
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Odoo, including assets such as CSS or JavaScript files involves linking
    these resources to your module or theme to enhance its functionality or appearance;
    for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Including assets in Odoo allows you to extend your module’s capabilities by
    adding custom styles or scripts, enhancing the user experience and functionality.
  prefs: []
  type: TYPE_NORMAL
- en: remove
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Remove one or multiple file(s).
  prefs: []
  type: TYPE_NORMAL
- en: 'Removing assets, such as CSS or JavaScript files, in Odoo involves excluding
    them from your module’s assets; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Removing assets in Odoo enables you to customize your module by excluding specific
    styles or scripts that are not needed or conflict with your module’s functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: replace
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Odoo, replacing assets involves substituting existing CSS or JavaScript
    files with new ones in your module or theme; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Replacing assets in Odoo allows you to update and customize the appearance or
    functionality of your module by substituting existing files with new ones. Be
    cautious when replacing assets to maintain the stability and functionality of
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: Loading order
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In Odoo, managing the loading order of assets (CSS, JavaScript, and so on)
    is crucial for ensuring that dependencies are resolved correctly and that the
    user interface renders properly. The loading order can be controlled to determine
    which assets are loaded first or after others; for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: When an asset bundle is called (for example, `t-call-assets="web.assets_common"`),
    an empty list of assets is generated.
  prefs: []
  type: TYPE_NORMAL
- en: All records of type `ir.asset` matching the bundle are fetched and sorted by
    sequence number. Then, all records with a sequence strictly less than 16 are processed
    and applied to the current list of assets.
  prefs: []
  type: TYPE_NORMAL
- en: All modules declaring assets for the said bundle in their manifest apply their
    assets’ operations to this list. This is done following the order of module dependencies
    (for example, web assets are processed before the website). If a directive tries
    to add a file already present in the list, nothing is done for that file. In other
    words, only the first occurrence of a file is kept in the list.
  prefs: []
  type: TYPE_NORMAL
- en: The remaining `ir.asset` records (those with a sequence greater than or equal
    to 16) are then processed and applied as well.
  prefs: []
  type: TYPE_NORMAL
- en: Assets declared in the manifest may need to be loaded in a particular order;
    for example, `jquery.js` must be loaded before all other `jquery` scripts when
    loading the `lib` folder. One solution would be to create an `ir.asset` record
    with a lower sequence or a `prepend` directive, but there is another, simpler
    way to do so.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following are a few things you need to know if you are working with assets
    in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging JavaScript can be very hard in Odoo because `AssetBundle` merges multiple
    JavaScript files into a single file and also minifies them. By enabling developer
    mode with assets, you can skip asset bundling, and the page will load static assets
    separately so that you can debug easily.
  prefs: []
  type: TYPE_NORMAL
- en: 'Combined assets are generated once and stored in the `ir.attachment` model.
    After that, they are served from the attachment. If you want to regenerate assets,
    you can do so from the debug options, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.1 – Screenshot of assets’ activation options](img/B20997_14_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.1 – Screenshot of assets’ activation options
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: As you know, Odoo will generate an asset only once. This behavior can be a headache
    during development, as it requires frequent server restarts. To overcome this
    issue, you can use `dev=xml` in the command line, which will load assets directly,
    so there will be no need for a server restart.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Lazy loading is a technique that defers loading non-essential resources until
    they’re needed, often used for images, scripts, or other assets to improve performance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: However, implementing lazy loading for specific assets or components in Odoo
    can be achieved through custom development or by utilizing third-party libraries.
    Here are some approaches you might consider.
  prefs: []
  type: TYPE_NORMAL
- en: Lazy loading images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can implement lazy loading for images using JavaScript libraries such as
    Intersection Observer. This library allows you to load images only when they enter
    the user’s viewport.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using Intersection Observer, JavaScript code could look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You would then need to assign the `lazy` class to your `<img>` tags and use
    the `data-src` attribute for the actual image source.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`lazy` class and `data-src` attributes to the image tags.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Adding CSS and JavaScript for a website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing assets such as CSS, JavaScript, and other static files can be done
    through the module’s asset management system. You can control the loading of these
    assets in your module by defining them in your manifest file and linking them
    to views or templates.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s an overview of how to manage CSS and JavaScript in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: Defining assets in module manifest (__manifest__.py)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the manifest file, specify the assets your module requires:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We will add CSS, SCSS, and JavaScript files, which will modify the website.
    As we are modifying the website, we will need to add the website as a dependency.
    Modify the manifest file like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some SCSS code to `static/src/scss/hostel.scss`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add some JavaScript code to `static/src/js/my_library.js`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'After updating your module, you should see that the Odoo website has custom
    colors in the menu, body, and footer, and a somewhat annoying Hello World popup
    on each page load, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.2 – Screenshot of Hello World popup from JavaScript code](img/B20997_14_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.2 – Screenshot of Hello World popup from JavaScript code
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: For CSS/SCSS files, sometimes, order matters. So, if you need to override a
    style defined in another add-on, you will have to ensure that your file is loaded
    after the original file you want to modify. This can be done by either adjusting
    your view’s priority field or directly inheriting from the add-on’s view that
    injects the reference to the CSS file.
  prefs: []
  type: TYPE_NORMAL
- en: We have added basic SCSS. Odoo has built-in support for the SCSS preprocessor.
    Odoo will automatically compile SCSS files into CSS. In our example, we have used
    basic SCSS with some variables and the `darken` function to make `$my-text-color`
    darker by 15%. The SCSS preprocessor has tons of other features; if you want to
    learn more about SCSS, refer to [http://sass-lang.com/](http://sass-lang.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating or modifying templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Website templates are created using QWeb, a templating language that integrates
    seamlessly with the Odoo framework. These templates are used to define the structure
    and appearance of web pages within the Odoo website module.
  prefs: []
  type: TYPE_NORMAL
- en: Here’s an overview of how to work with website templates in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding QWeb templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QWeb templates in Odoo allow you to create dynamic web pages using XML-like
    syntax mixed with control structures and placeholders. They enable you to define
    the structure, content, and presentation of web pages.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a basic website template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a simple website template, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '`views` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Here’s an explanation of the code:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<template>`: Defines the QWeb template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id`: Unique identifier for the template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: Name of the template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<t t-call="website.layout">`: Indicates that this template inherits from the
    website’s main layout'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<t t-set="page_title">`: Sets the page title dynamically'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<div class="custom-content">`: Example of content within the template'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Include in the manifest file**: Include your view file in the module’s manifest
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Using Odoo Website Builder
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also use the Odoo Website Builder interface to create and customize
    web pages using predefined blocks and templates. This allows for a more visual
    and interactive way to design web pages without directly editing XML templates.
  prefs: []
  type: TYPE_NORMAL
- en: Styling and customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For styling and customization, you can use CSS, which can be included within
    your QWeb templates or as separate files linked to your templates.
  prefs: []
  type: TYPE_NORMAL
- en: Remember—the structure and styling of your website templates can vary based
    on your specific needs and the complexity of the web pages you’re creating. Additionally,
    consider exploring existing Odoo website modules and official documentation for
    more detailed and advanced usage of QWeb templates within the Odoo framework.
  prefs: []
  type: TYPE_NORMAL
- en: Loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To work on recordsets or iterable data types, you need a construct to loop
    through lists. In the QWeb template, this can be done with the `t-foreach` element.
    Iteration can happen in a `t` element, in which case its contents are repeated
    for every member of the iterable that was passed in the `t-foreach` attribute,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'This will be rendered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also place the `t-foreach` and `t-as` attributes in some arbitrary
    element, at which point this element and its contents will be repeated for every
    item in the iterable. Take a look at the following code block. This will generate
    exactly the same result as the previous example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In our example, take a look at the inside of the `t-call` element, where the
    actual content generation happens. The template expects to be rendered with a
    context that has a variable called `hostel` set that iterates through it in the
    `t-foreach` element. The `t-as` attribute is mandatory and will be used as the
    name of the iterator variable to access the iterated data. While the most common
    use for this construction is to iterate over recordsets, you can use it on any
    iterable Python object.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QWeb templates can set attribute values dynamically. This can be done in the
    following three ways.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first way is through `t-att-$attr_name`. At the time of template rendering,
    an attribute, `$attr_name`, is created; its value can be any valid Python expression.
    This is computed with the current context and the result is set as the value of
    the attribute, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It will be rendered like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The second way is through `t-attf-$attr_name`. This is similar to the previous
    option. The only difference is that only strings between `{{ ..}}` and `#{..}`
    are evaluated. This is helpful when values are mixed with the strings. It is mostly
    used to evaluate classes, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'It will be rendered like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'The third way is through the `t-att=mapping` option. This option accepts the
    dictionary after the template rendering the dictionary’s data is converted into
    attributes and values. Take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'After rendering this template, it will be converted into the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we have used `t-attf-class` to get a dynamic background based
    on index values.
  prefs: []
  type: TYPE_NORMAL
- en: Fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `h3` and `div` tags use the `t-field` attribute. The value of the `t-field`
    attribute must be used with the recordset with a length of one; this allows the
    user to change the content of the web page when they open the website in edit
    mode. When you save the page, updated values will be stored in the database. Of
    course, this is subject to a permission check and is only allowed if the current
    user has write permissions for the displayed record. With an optional `t-options`
    attribute, you can give a dictionary option to be passed to the field renderer,
    including the widget to be used. Currently, there is not a vast collection of
    widgets for the backend, so the choices are a bit limited here. For example, if
    you want to display an image from the binary field, then you can use the `image`
    widget like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: '`t-field` has some limitations. It only works on recordsets, and it cannot
    work on the `<t>` element. For this, you need to use some HTML elements, such
    as `<span>` or `<div>`. There is an alternative to the `t-field` attribute, which
    is `t-esc`. The `t-esc` attribute is not limited to recordsets; it can also be
    used on any data type, but it is not editable on a website.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Another difference between `t-esc` and `t-field` is that `t-field` shows values
    based on the user’s language, while `t-esc` shows raw values from the database.
    For example, for users who configured the English language in their preferences
    and set the `datetime` field as used with `t-field`, the result will be rendered
    in `12/15/2023 14:17:15` format. In contrast, if the `t-esc` attribute is used,
    then the result will be in a rendered format like this: `2023-12-15 21:12:07`.'
  prefs: []
  type: TYPE_NORMAL
- en: Conditionals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Note that the division showing the publication date is wrapped by a `t` element
    with the `t-if` attribute set. This attribute is evaluated as Python code, and
    the element is only rendered if the result is a truthy value. In the following
    example, we only show the `div` class if there is actually a publication date
    set. However, in complex cases, you can use `t-elif` and `t-else`, as in the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Setting variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The QWeb template is also capable of defining the variable in the template
    itself. After defining the template, you can use the variable in the subsequent
    template. You can set the variable like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Subtemplates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you are developing a big application, managing large templates can be difficult.
    The QWeb template supports subtemplates, so you can divide large templates into
    smaller subtemplates and you can reuse them in multiple templates. For subtemplates,
    you can use a `t-call` attribute, as in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Inline editing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The user will be able to modify records directly from the website in edit mode.
    The data loaded with the `t-field` node will be editable by default. If the user
    changes the value in such a node and saves the page, the values will also be updated
    in the backend. Don’t worry; in order to update the record, a user will need write
    permissions on the record. Note that `t-field` only works on a recordset. To display
    other types of data, you can use `t-esc`. This works exactly like `t-field`, but
    the only difference is that `t-esc` is not editable and can be used with any type
    of data.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to enable snippet drag-and-drop support on the page, you can use
    the `oe_structure` class. In our example, we have added this at the top of the
    template. Using `oe_structure` will enable editing and snippet drag-and-drop support.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to disable the website editing feature on a block, you can use the
    `contenteditable=False` attribute. This makes an element read-only. We have used
    this attribute in the last `<``section>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: To make the page multi-website compatible, when you edit a page/view through
    the website editor, Odoo will create a separate copy of the page for that website.
    This means that subsequent code updates will never make it to the edited website
    page. In order to also get the ease of use of inline editing and the possibility
    of updating your HTML code in subsequent releases, create one view that contains
    semantic HTML elements and a second one that injects editable elements. Then,
    only the latter view will be copied, and you can still have updates for the parent
    view.
  prefs: []
  type: TYPE_NORMAL
- en: For the other CSS classes used here, consult Bootstrap’s documentation.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we have declared the route to render the template. If you noticed,
    we have used the `website=True` parameter in `route()`, which will pass some extra
    context in the template, such as menus, user language, company, and so on. This
    will be used in `website.layout` to render the menus and footers. The `website=True`
    parameter also enables multi-language support in a website and displays exceptions
    in a better way.
  prefs: []
  type: TYPE_NORMAL
- en: Managing dynamic routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In website development projects, it is often the case that we need to create
    pages with dynamic URLs. For example, in e-commerce, each product has a detailed
    page linked with a different URL. In this recipe, we will create a web page to
    display hostel details.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add basic fields in the `hostel` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to generate a details page for the hostel:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new route for hostel details in `main.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new template for hostel details in `hostel_templates.xml`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a button in the hostel list template, as follows. This button will redirect
    to the hostel details web page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the `my_hostel` module to apply changes. After the update, you will see
    hostel details page links on the hostel card. Upon clicking those links, the hostel
    details pages will open.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we created a dynamic route for the hostel details page. In this
    route, we added `<model("hostel.hostel"):hostel>`. This accepts URLs with integers,
    as in `/hostel/1`. Odoo considers this integer as the ID of the `hostel.hostel`
    model, and when this URL is accessed, Odoo fetches a recordset and passes it to
    the function as the argument. So, when `/hostel/1` is accessed from the browser,
    the `hostel` parameter in the `hostel_detail()` function will have a recordset
    of the `hostel.hostel` model with the ID `1`. We passed this `hostel` recordset
    and rendered a new template called `my_hostel.hostel2_detail`.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we created a new QWeb template called `hostel_detail` to render
    a hostel details page. This is simple and is created using the Bootstrap structure.
    If you check, we have added `html_description` in the details page. The `html_description`
    field has a field type of HTML, so you can store HTML data in the field. Odoo
    automatically adds snippet drag-and-drop support to HTML types of fields. So,
    we are now able to use snippets in the hostel details page. The snippets dropped
    in the HTML fields are stored in a hostel’s records, so you can design different
    content for different records.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we added a link with the anchor tag so that a visitor can be redirected
    to the hostel details page.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'The model route also supports domain filtering. For example, if you want to
    restrict some records based on a condition, you can do so by passing the domain
    to the route as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/hostel/<model("hostel.hostel", "[(name'',''!='', ''``Hostel 1'')]"):hostel>`'
  prefs: []
  type: TYPE_NORMAL
- en: This will restrict access to the hostel that has the name `Hostel 1`.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Odoo uses `werkzeug` to handle HTTP requests. Odoo adds a thin wrapper around
    `werkzeug` to easily handle routes. You saw the `<model("hostel.hostel"):hostel>`
    route in the last example. This is Odoo’s own implementation, but it also supports
    all features from the `werkzeug` routing. Consequently, you can use routing like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/page/<int:page>` accepts integer values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/page/<any(about, help):page_name>` accepts selected values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/pages/<page>` accepts strings'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/pages/<category>/<int:page>` accepts multiple values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are lots of variations available for routes, which you can read about
    at [http://werkzeug.pocoo.org/docs/0.14/routing/](http://werkzeug.pocoo.org/docs/0.14/routing/).
  prefs: []
  type: TYPE_NORMAL
- en: Offering static snippets to the user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Static snippets are reusable components or blocks of HTML, CSS, and JavaScript
    that can be inserted into website pages using Website Builder. These snippets
    allow for easy customization and construction of web pages without needing to
    write code from scratch.
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo’s website editor offers several editing building blocks, which can be
    dragged onto the page and edited according to your needs. This recipe will cover
    how to offer your own building blocks. These blocks are referred to as snippets.
    There are several types of snippets, but in general, we can categorize them into
    two types: static and dynamic. A static snippet is fixed and does not change until
    the user changes it. Dynamic snippets depend on database records and are changed
    based on record values. In this recipe, we will see how to create a static snippet.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A snippet is actually just a QWeb view that gets injected into the **Insert
    blocks** bar. We will create a small snippet that will show the hostel’s image
    and its title. You will be able to drag and drop the snippet on the page, and
    you will be able to edit the image and text. Follow these steps to add a new static
    snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a file called `views/snippets.xml`, as follows (do not forget to register
    the file in the manifest):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a QWeb template for the snippet in `views/snippets.xml`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'List the template in the snippet list like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add the cover image and snippet thumbnail image in the `/``my_hostel/static/src/img`
    directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Restart the server and update the `my_hostel` module to apply the changes.
    When you open the website page in edit mode, you will be able to see our snippet
    in the snippets blocks panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.3 – Screenshot of static snippet](img/B20997_14_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.3 – Screenshot of static snippet
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A static snippet is nothing but a block of HTML code. In *step 1*, we created
    a QWeb template with our HTML for the hostel block. In this HTML, we have just
    used a Bootstrap column structure, but you can use any HTML code. Note that the
    HTML code you add in the snippet’s QWeb template will be added to the page when
    you drag and drop. In general, it is a good idea to use `section` elements and
    Bootstrap classes for snippets, because for them, Odoo’s editor offers edit, background,
    and resize controls out of the box.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we registered our snippet in the snippet list. You will need to
    inherit `website.snippets` to register a snippet. In the website editor GUI, snippets
    are divided into different sections based on their usage. In our example, we have
    registered our snippet in the `Structure` section via `xpath`. To list your snippet,
    you need to use a `<t>` tag with the `t-snippet` attribute. The `t-snippet` attribute
    will have the XML ID of the QWeb template, which is `my_hostel.snippet_hostel_card`
    in our example. You will also need to use the `t-thumbnail` attribute, which is
    used to show a small snippet image in the website editor.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `website.snippets` template contains all the default snippets, and you can
    learn more about it by exploring the `/``addons/website/views/snippets/snippets.xml`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: In *step 3*, we listed our snippet under the `structure` block. Once you update
    the module, you will be able to drag and drop the snippet. In *step 4*, we just
    added an image for the snippet thumbnail.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In such cases, there will be no need for extra JavaScript. Odoo’s editor offers
    lots of options and controls out of the box, and they are more than enough for
    static snippets. You will find all existing snippets and options at `website/views/snippets.xml`.
  prefs: []
  type: TYPE_NORMAL
- en: Snippet options also support the `data-exclude`, `data-drop-near`, and `data-drop-in`
    attributes, which determine where a snippet can be placed when dragging it out
    of the snippet bar. These are also jQuery selectors, but in *step 3* of this recipe,
    we didn’t use them, because we allow putting the snippet basically anywhere that
    content can go.
  prefs: []
  type: TYPE_NORMAL
- en: Offering dynamic snippets to the user
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Dynamic snippets refer to reusable components or blocks that are capable of
    displaying dynamic content pulled from various sources such as databases, models,
    or external services. These snippets enable the creation of versatile and adaptable
    web pages that display real-time or context-specific information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Identify data sources:'
  prefs: []
  type: TYPE_NORMAL
- en: Determine the data sources you want to use in your dynamic snippet. This can
    include Odoo models, databases, APIs, and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement dynamic placeholders using QWeb templating tags (`{% %}`) or Odoo-specific
    directives (`<t` `t-foreach="..." t-as="...">`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will see how we can create dynamic snippets for Odoo. We will generate content
    based on database values.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to add a dynamic snippet that shows a list of hostel
    data:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a given QWeb template for the snippet in `views/snippets.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the snippet and add an option to change the snippet behavior:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add snippet options for the hostel snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Add a new `/static/src/snippets.js` file and add code to render a dynamic snippet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add a `public` widget to render the hostel snippet dynamically:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Load the JavaScript file to the `__manifest__.py` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: After updating the module, you will be offered a new snippet called `Hostels`,
    which has an option to change the number of recently added rooms. We have also
    added the option to change the table design, which can be displayed when you click
    on the table.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we added a QWeb template for the new snippet (it is just like the
    previous recipe). Note that we added a basic structure for the table. We will
    dynamically add lines for the hostel in the table.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we registered our dynamic snippet and added custom options to change
    the behavior of our dynamic snippet. The first option we added is `Table Style`.
    It will be used to change the style of the table. The second option we added is
    `No of Rooms`. We used the `<we-select>` and `<we-button-group>` tags for our
    options. These tags will provide different GUIs to the snippet option. The `<we-select>`
    tag will show the options as a dropdown, while the `<we-button-group>` tag will
    show the options as a button group. There are several other GUI options, such
    as `<we-checkbox>` and `<we-colorpicker>`. You can explore more GUI options in
    the `/``addons/website/views/snippets/snippets.xml` file.
  prefs: []
  type: TYPE_NORMAL
- en: If you look at the options closely, you will see we have `data-select-class`
    and `data-select-data-attribute` attributes for the option buttons. This will
    let Odoo know which attribute to change when the user chooses an option. `data-select-class`
    will set the class attribute on the element when the user chooses this option,
    while `data-select-data-attribute` will set the custom attribute and value on
    the element. Note that it will use the value of `data-attribute-name` to set the
    attribute.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we have added the snippet options. If you drag and drop the snippet at
    this point, you will only see the table header and the snippet options. Changing
    the snippet options will change the table style, but there is no hostel data yet.
    For that, we need to write some JavaScript code that will fetch the data and display
    it in the table. In *step 3*, we added JavaScript code that will render the hostel
    data in the table. To map a JavaScript object to an HTML element, Odoo uses `PublicWidget`.
    Now, `PublicWidget` is available through `import publicWidget from "@web/legacy/js/public/public_widget";`.
    The key attribute in using `PublicWidget` is the `selector` attribute. In the
    `selector` attribute, you will need to use the CSS selector of the element, and
    Odoo will automatically bind the element with `PublicWidget`. You can access the
    related element in the `$el` attribute. The rest of the code is basic JavaScript
    and jQuery except `_rpc`.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to create your own snippet option, you can use the `t-js` option
    on the snippet option. After that, you will need to define your own option in
    the JavaScript code. Explore the `addons/website/static/src/js/editor/snippets.options.js`
    file to learn more about snippet options.
  prefs: []
  type: TYPE_NORMAL
- en: Getting input from website users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Odoo, you can collect input from website users through forms, surveys, or
    interactive elements integrated into your website. Odoo provides functionalities
    to create forms easily and manage the data collected from these forms. Here’s
    how you can set up input collection.
  prefs: []
  type: TYPE_NORMAL
- en: Submitted form data is typically stored in the database as records of a specific
    model associated with the form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Access the collected data either through the website backend or by configuring
    views to display the form submissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Optionally, you can link the form submissions to specific models in Odoo, allowing
    you to manage and process the data within the Odoo backend
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Define models and fields to store the form data securely
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module. We will need a new
    model to store hostel booking inquiries submitted by users.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, before starting this recipe, modify the previous code and create one new
    model for booking inquiries, `my_hostel/models/inquiries.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: Now, create menus, actions, and views in the backend to store the submitted
    data from the website inquiries form.
  prefs: []
  type: TYPE_NORMAL
- en: 'For that, create an XML file in `my_hostel/views/inquiries_view.xml`, then
    add menus, actions, and its basic tree and form view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: Now, create a basic form to get the details from the customers, which is published
    on the website page. Once a user has submitted that form, all the filled data
    will be stored in the `Inquiries` table.
  prefs: []
  type: TYPE_NORMAL
- en: 'For that, create a new folder in the module, `my_hostel/controllers/main.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, design a form for the website called `my_hostel/views/form_template.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Update the module and open the `/inquiry/form` URL. From this page, you will
    be able to submit queries for the hostel. After submission, you can check them
    into the respective inquiries form view in the backend.
  prefs: []
  type: TYPE_NORMAL
- en: Managing SEO options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo has built-in SEO features for templates (pages). However, some templates
    are used for multiple URLs. For example, in an online shop, each product page
    uses the same template but different product data. For these cases, we need different
    SEO options for each URL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will be using the `my_hostel` module. We will store separate
    SEO data for each hostel details page. Before following this recipe, you should
    test the SEO options in the different hostel pages. You can get an SEO dialog
    from the **Promote** drop-down menu on the top, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.4 – Opening the SEO configuration for a page](img/B20997_14_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.4 – Opening the SEO configuration for a page
  prefs: []
  type: TYPE_NORMAL
- en: If you test SEO options on different hostel details pages, you will notice that
    changing the SEO data in one book page will reflect on all hostel pages. We will
    fix this issue in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To manage separate SEO options for each hostel, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inherit the `website.seo.metadata` mixin in the `hostel.hostel` model, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Pass the `hostel` object in the hostel details route as `main_object`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the module and change the SEO on the different hostel pages. It can be
    changed through the **Optimize SEO** option. Now, you will be able to manage separate
    SEO details per hostel.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To enable SEO on each record of the model, you will need to inherit the `website.seo.metadata`
    mixin in your model. This will add a few fields and methods to the `hostel.hostel`
    model. These fields and methods will be used from the website to store separate
    data for each book.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see fields and methods for the SEO mixin, search for the `website.seo.metadata`
    model in the `/``addons/website/models/website.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: All SEO-related code is written in `website.layout`, and it gets all the SEO
    meta-information from the recordset passed as `main_object`. Consequently, in
    *step 2*, we passed a `hostel` object with the `main_object` key so that the website
    layout will get all SEO information from the hostel. If you don’t pass `main_object`
    from the controller, then the template recordset will be passed as `main_object`,
    and that’s why you were getting the same SEO data in all hostels.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Odoo, you can add custom metatags for Open Graph and Twitter sharing. If
    you want to add your custom metatags to a page, you can override `_default_website_meta()`
    after adding the SEO mixin. For example, if we want to use the hostel cover as
    the social sharing image, then we can use the following code in our `hostel` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: After this, the hostel cover will be displayed on social media when you share
    the hostel’s URL. Additionally, you can also set the page title and the description
    from the same method.
  prefs: []
  type: TYPE_NORMAL
- en: Managing sitemaps for the website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A website’s sitemaps are crucial for any website. The search engine will use
    website sitemaps to index the pages of a website. In this recipe, we will add
    hostel details pages to the sitemap.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
    If you want to check the current sitemap in Odoo, open `<your_odoo_server_url>/sitemap.xml`
    in your browser.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to modify a hostel’s page to `sitemap.xml`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the methods in `main.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `sitemap_hostels` method to `main.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `sitemap_hostels` function reference in a hostel’s detail routes as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Update the module to apply the changes. A `sitemap.xml` file is generated and
    stored in `Attachments`. Then, it is regenerated every few hours. To see our changes,
    you will need to remove the sitemap file from the attachment. To do this, visit
    `/sitemap.xml` URL in a browser, and you will see the hostel’s pages in the sitemap.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we imported a few required functions. `slug` is used to generate
    a clean, user-friendly URL, based on a record name. `sitemap_qs2dom` is used to
    generate a domain based on route and query strings.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we created a Python generator function,`sitemap_hostels()`. This
    function will be called whenever a sitemap is generated. During the call, it will
    receive three arguments—the `env` Odoo environment, the `rule` route rule, and
    the `qs` query string. In the function, we generated a domain with `sitemap_qs2dom`.
    Then, we used the generated domain to search the hostel records, which are used
    to generate the location through the `slug()` method. With `slug`, you will get
    a user-friendly URL, such as `/hostels/cambridge-1`. If you do not want to list
    all the hostels on the sitemap, you can just use a valid domain in the search
    to filter the hostel.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we passed the `sitemap_hostels()` function reference to the route
    with a `sitemap` keyword.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have seen how you can use a custom method to generate a
    URL for a sitemap. But if you do not want to filter hostels and you want to list
    all hostels in a sitemap, then instead of the function reference, just pass `True`
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same way, if you don’t want any URL to display in the sitemap, just
    pass `False` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Getting a visitor’s country information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Odoo CMS has built-in support for **GeoIP**. In a live environment, you
    can track a visitor’s country based on the IP address. In this recipe, we will
    get the country of the visitor based on the visitor’s IP address.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will be using the `my_hostel` module from the previous
    recipe. In this recipe, we will hide some hostels on the web page based on the
    visitor’s country. You will need to download the GeoIP database for this recipe.
    After that, you will need to pass the database location from the `cli` option,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, follow the steps from this document sheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.odoo.com/documentation/17.0/applications/websites/website/configuration/on-premise_geo-ip-installation.html](https://www.odoo.com/documentation/17.0/applications/websites/website/configuration/on-premise_geo-ip-installation.html).'
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to locate the GeoIP database in `/usr/share/GeoIP/`, use the
    `--geoip-city-db` and `--geoip-country-db` options of the Odoo command-line interface.
    These options take the absolute path to the GeoIP database file and use it as
    the GeoIP database.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to restrict books based on country:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `restrict_country_ids` `Many2many` field in the `hostel.hostel` model,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `restrict_country_ids` field in the form view of the `hostel.hostel`
    model, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `/hostel` controller to restrict books based on country, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: This recipe does not work with the local server. It will require a hosted server
    because, with the local machine, you will get the local IP, which is not related
    to any country. You will also need to configure NGINX properly.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we added a new `restricted_country_ids` `many2many`-type field
    in the `hostel.hostel` model. We will hide the book if the website visitor is
    from a restricted country.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we just added a `restricted_country_ids` field in the book’s form
    view. If GeoIP and NGINX are configured properly, Odoo will add GeoIP information
    to `request.geoip`, and then you can get the country code from that.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we fetched the country code from GeoIP, followed by the recordset
    of the country, based on `country_code`. After getting a visitor’s country information,
    we filtered hostels with domains based on a restricted country.
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t have a real server and you want to test this anyway, you can add
    a default country code in the controller, like this: `country_code = request.geoip
    and request.geoip.get(''country_code'')` `or ''IN''`.'
  prefs: []
  type: TYPE_NORMAL
- en: The GeoIP database gets updated from time to time, so you will need to update
    your copy to get up-to-date country information.
  prefs: []
  type: TYPE_NORMAL
- en: Tracking a marketing campaign
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any business or service, it is really important to be familiar with the **return
    on investment** (**ROI**). The ROI is used to evaluate the effectiveness of an
    investment. Investments in ads can be tracked through UTM codes. A UTM code is
    a small string that you can add to a URL. This UTM code will help you to track
    campaigns, sources, and media.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_library` module. Odoo has built-in
    support for UTMs. With our hostel application, we don’t have any practical cases
    where UTMs can be used. However, in this recipe, we will add a UTM in the issues
    generated by `/books/submit_issues` in `my_library`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to link UTMs in a book issue generated from our web page
    to the `/``books/submit_issues` URL:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `utm` module in the `depends` section of `manifest.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'class LibraryBookIssues(models.Model):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _name = 'book.issue'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _inherit = ['utm.mixin']
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: book_id = fields.Many2one('library.book', required=True)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: submitted_by = fields.Many2one('res.users')
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: issue_description = fields.Text()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `campaign_id` field in the tree view of the `book_issue_ids` field, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the module to apply the changes. To test the UTM, you need to perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In Odoo, a UTM is processed based on cookies, and some browsers do not support
    cookies in the localhost, so if you are testing it with the localhost, access
    the instance with `http://127.0.0.1:8069`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, UTM tracking is blocked for salespeople. Consequently, to test the
    UTM feature, you need to log in with a portal user.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, open the `http://127.0.0.1:8069/books/submit_issues?utm_campaign=sale`
    URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit the book issue and check the book issue in the backend. This will display
    the campaign in the book’s form view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first step, we inherited `utm.mixin` in the `book.issue` model. This
    will add the following fields to the `book.issue` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '`campaign_id`: The `Many2one` field with the `utm.campaign` model. This is
    used to track different campaigns, such as the *Summer* and *Christmas* *Special*
    campaigns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`source_id`: The `Many2one` field with the `utm.source` model. This is used
    to track different sources, such as search engines and other domains.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`medium_id`: The `Many2one` field with the `utm.medium` model. This is used
    to track different media, such as postcards, emails, and banner ads.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To track the campaign, medium, and source, you need to share a URL in the marketing
    media like this: `your_url?utm_campaign=campaign_name&utm_medium=medium_name&utm_source=source_name`.'
  prefs: []
  type: TYPE_NORMAL
- en: If a visitor visits your website from any marketing media, then the `campaign_id`,
    `source_id`, and `medium_id` fields are automatically filled when records are
    created on the website page.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we just tracked `campaign_id`, but you can also add `source_id`
    and `medium_id`.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: In our test example, we have used `campaign_id=sale`. Now, `sale` is the name
    of the record in the `utm.campaign` model. By default, the `utm` module adds a
    few records of the campaign, medium, and source. The `sale` record is one of them.
    If you want to create a new campaign, medium, and source, you can do this by visiting
    the `Link Tracker > UTMs` menu in developer mode.
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple websites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo has built-in support for multiple websites. This means that the same Odoo
    instance can be run on multiple domains as well as when displaying different records.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
    In this recipe, we will hide hostels based on the website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to make the online website multi-website compatible:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `website.multi.mixin` in the `hostel.hostel` model, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `website_id` in the hostel form view, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the domain in the `/hostels` controller, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Import `werkzeug` and modify a hostel details controller to restrict hostel
    access from another website, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the module to apply the changes. To test this module, set up different
    websites in some hostels. Now, open the `/hostels` URL and check the list of books.
    After this, change the website and check the list of books. For testing, you can
    change the website from the website switcher drop-down menu. Refer to the following
    screenshot to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Website switcher](img/B20997_14_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – Website switcher
  prefs: []
  type: TYPE_NORMAL
- en: You can also try to access the book details directly from the URL, such as for
    `/hostels/1`. If a hostel is not from that website, it will show as `404`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we added `website.multi.mixin`. This mixin adds a basic utility
    to handle multiple websites in the model. This mixin adds the `website_id` field
    in the model. This field is used to determine which website a record is meant
    for.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we added the `website_id` field in the form view of the hostel
    so that the hostels would be filtered based on the website.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we modified the domain used to find a list of hostels. `request.website.website_domain()`
    will return the domain that filters out hostels that are not from the website.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: Notice that there are records that do not have any `website_id` field set. Such
    records will be displayed on all websites. This means that if you don’t have a
    `website_id` field on a particular hostel, then that hostel will be displayed
    on all websites.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we added the domain in the web search, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we restricted book access. If the book is not meant for the current
    website, then we will raise a `Not found` error. The `can_access_from_current_website()`
    method will return a `True` value if a hostel record is meant for the currently
    active website and `False` if a hostel record is meant for another website.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you noticed, we added `**post` in both controllers. This is because, without
    it, `**post` `/hostels` and `/hostels/<model("hostel.hostel"):hostel>` will not
    accept a query parameter. They will also generate an error while switching the
    website from the website switcher, so we added it. Normally, it is a good practice
    to add `**post` in every controller so that they can handle query parameters.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting old URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you move to the Odoo website from an existing system or website, you must
    redirect your old URLs to new URLs. With proper redirection, all of your SEO rankings
    will be moved to new pages. In this recipe, we will see how to redirect old URLs
    to new URLs in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostels` module from the previous
    recipe. For this recipe, we are assuming that you used to have a website and have
    just moved to Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Imagine that, in your old website, books were listed at the `/my-hostels` URL;
    as you know, the `my_hostel` module lists hostels on the `/hostels` URL as well.
    So, we will now add a `/my-hostels` URL to the new `/hostels` URL. Perform the
    following steps to add the redirection rule:'
  prefs: []
  type: TYPE_NORMAL
- en: Activate developer mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Website** | **Configuration** | **Redirects**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New** to add a new rule.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter values in the form, as shown in the following screenshot. In `/my-hostels`,
    and in `/hostels`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Action** value of **301** **Moved permanently**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the record. Once you have filled in the data, your form will look like
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![     Figure 14.6 – Redirection rule](img/B20997_14_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – Redirection rule
  prefs: []
  type: TYPE_NORMAL
- en: Once you have added this rule, open the `/my-hostels` page. You will notice
    that the page gets redirected automatically to the `/``hostels` page.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Page redirection is simple; it’s just part of the HTTP protocol. In our example,
    we moved `/my-hostels` to `/hostels`. We used a **301 Moved permanently** redirect
    for redirection. Here are all the redirection options that are available in Odoo:'
  prefs: []
  type: TYPE_NORMAL
- en: '`404 Not Found` response for a page. Note that Odoo will display the default
    `404` page for such requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**301 Moved permanently**: This option redirects old URLs to new ones permanently.
    This type of redirection will move SEO rankings to a new page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**302 Moved temporarily**: This option redirects old URLs to new ones temporarily.
    Use this option when you need to redirect a URL for a limited time. This type
    of redirection will not move SEO rankings to a new page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**308 Redirect/Rewrite**: An interesting option – with this, you will be able
    to change/rewrite existing Odoo URLs to new ones.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, this would allow us to rewrite the old `/my-hostels` URL to
    the new `/hostels` URL. Hence, we would have no need to redirect the old URL by
    using the `/my-hostels`.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few more fields on the redirection rule form. One of them is the
    **Active** field, which can used if you want to enable/disable rules from time
    to time. A second important field is **Website**. The **Website** field is used
    when you are using the multi-website feature and you want to limit the redirection
    rule to one website only. By default, however, the rule will be applied to all
    websites.
  prefs: []
  type: TYPE_NORMAL
- en: Publish management for website-related records
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In business flows, there are some cases where you need to allow or revoke page
    access to public users. One such case is e-commerce products, where you need to
    publish or unpublish products based on availability. In this recipe, we will see
    how you can publish and unpublish hostel records for public users.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you notice, we have put `auth=''user''` on the `/hostels` and `/hostels/<model``     ("hostel.hostel"):hostel>` routes. Please change this to `auth=''public''` to
    make those URLs accessible to public users.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to enable a publish/unpublish option for hostel
    details pages:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `website.published.mixin` to the `hostel.hostel` model like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file to `my_hostel/security/rules.xml` and add a record rule for
    hostels like this (make sure you register the file in the manifest):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `my_hostel` module to apply the changes. Now, you can publish and
    unpublish hostel pages:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.7 – The Publish/Unpublish toggle](img/B20997_14_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – The Publish/Unpublish toggle
  prefs: []
  type: TYPE_NORMAL
- en: To publish/unpublish hostels, you can use the toggle shown in the preceding
    screenshot of a hostel details page.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo provides a ready-made mixin to handle publish management for your records.
    It does most of the job for you. All you need to do is add `website.published.mixin`
    to your model. In *step 1*, we added `website.published.mixin` to our `hostel`
    model. This will add all the fields and methods required to publish and unpublish
    hostels. Once you add this mixin to the book model, you will be able to see the
    button to toggle the state on the book details page, as shown in the preceding
    screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: We are sending a hostel record as `main_object` from our hostel details route.
    Without this, you will not be able to see the publish/unpublish button on the
    hostel details page.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the mixin will show the publish/unpublish button on the hostel’s details
    page, but it will not restrict a public user from accessing it. To do this, we
    need to add a record rule. In *step 2*, we added a record rule to restrict access
    to unpublished hostels. If you want to learn more about record rules, refer to
    [*Chapter 10*](B20997_10.xhtml#_idTextAnchor549), *Security Access*.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `publish` mixin will enable the publish/unpublish button on the website.
    But if you want to show a redirect button on the backend form view, the publish
    mixin can provide a means for that too. The following steps show how to add a
    redirect button to a hostel’s form view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a method in the `hostel.hostel` model to compute the URL for a hostel:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a button in the form view to redirect to the website:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Once you add the button, you will be able to see the button in the hostel’s
    form view, and by clicking on it, you will be redirected to the hostel’s details
    page.
  prefs: []
  type: TYPE_NORMAL
