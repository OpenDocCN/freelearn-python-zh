- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '14'
- en: CMS Website Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CMS 网站开发
- en: Odoo has a built-in feature called Website Builder, which is a powerful tool
    that allows you to create and manage websites within the Odoo ERP ecosystem. It
    offers a user-friendly and visual approach to web design, making it accessible
    to users without extensive technical knowledge.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 内置了一个名为网站构建器的功能，这是一个强大的工具，允许您在 Odoo ERP 生态系统中创建和管理网站。它提供了一种用户友好且直观的网页设计方法，使得没有广泛技术知识的使用者也能轻松使用。
- en: 'Here are some key features and aspects of Odoo Website Builder:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是 Odoo 网站构建器的关键功能和方面：
- en: '**Drag-and-drop interface**: Website Builder provides a drag-and-drop interface,
    allowing you to easily add and arrange various content elements on your web pages.
    This includes text, images, videos, forms, buttons, and more.'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拖放界面**：网站构建器提供了一个拖放界面，允许您轻松地在网页上添加和排列各种内容元素。这包括文本、图片、视频、表单、按钮等等。'
- en: '**Pre-designed templates**: Odoo offers a selection of pre-designed website
    templates that you can use as a starting point. These templates are customizable
    and can be adapted to your brand’s identity.'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**预设计模板**：Odoo 提供了一系列预设计的网站模板，您可以用作起点。这些模板是可定制的，并且可以根据您的品牌形象进行调整。'
- en: '**Responsive design**: Websites created with Odoo are designed to be responsive,
    which means they automatically adapt to different screen sizes and devices, ensuring
    a consistent user experience on desktops, tablets, and smartphones.'
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**响应式设计**：使用 Odoo 创建的网站设计为响应式，这意味着它们会自动适应不同的屏幕尺寸和设备，确保在桌面、平板电脑和智能手机上提供一致的用户体验。'
- en: '**Content management**: You can create and manage web pages, blogs, product
    listings, and other types of content easily. Website Builder provides a **content
    management system** (**CMS**) to organize and update your content.'
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内容管理**：您可以轻松创建和管理网页、博客、产品列表以及其他类型的内容。网站构建器提供了一个**内容管理系统（CMS**）来组织和更新您的内容。'
- en: '**Search engine optimization (SEO)**: Odoo includes tools for SEO, allowing
    you to set metadata, define SEO-friendly URLs, and manage sitemaps to improve
    your website’s visibility in search engines.'
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**搜索引擎优化（SEO）**：Odoo 包含了 SEO 工具，允许您设置元数据、定义 SEO 友好的 URL 并管理网站地图，以提高您网站在搜索引擎中的可见性。'
- en: '**Multilingual support**: Odoo supports multiple languages, making it suitable
    for businesses with international audiences. You can translate content and adapt
    your website for different regions.'
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**多语言支持**：Odoo 支持多种语言，使其适合拥有国际受众的企业。您可以翻译内容并适应不同地区。'
- en: '**Integration with other Odoo modules**: One of the advantages of using Odoo
    Website Builder is its seamless integration with other Odoo modules, such as CRM,
    sales, inventory, and more. This means you can manage various aspects of your
    business within a unified system.'
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**与其他 Odoo 模块集成**：使用 Odoo 网站构建器的优势之一是它与其他 Odoo 模块（如 CRM、销售、库存等）的无缝集成。这意味着您可以在一个统一的系统中管理您业务的各个方面。'
- en: '**Analytics and reporting**: Odoo provides built-in analytics and reporting
    tools to track the performance of your website, including visitor statistics,
    conversion rates, and more.'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分析和报告**：Odoo 提供了内置的分析和报告工具，以跟踪您网站的绩效，包括访客统计、转化率等等。'
- en: '**Custom development**: For businesses with unique requirements, Odoo’s modular
    architecture allows for custom development to extend the platform’s functionality.'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**定制开发**：对于有独特需求的企业，Odoo 的模块化架构允许进行定制开发以扩展平台的功能。'
- en: In this chapter, you will explore the developments of the Odoo website’s custom
    features and learn how to create web pages. You will also learn how to create
    building blocks that users can drag and drop on a page. Advanced things such as
    **Urchin Tracking Modules** (**UTMs**), SEO, multi-websites, GeoIP, and sitemaps
    are also covered in this chapter.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将探索 Odoo 网站的定制功能发展，并学习如何创建网页。您还将学习如何创建用户可以在页面上拖放的基本构建块。本章还涵盖了高级功能，如**Urchin
    跟踪模块（UTMs**）、SEO、多网站、GeoIP 和网站地图。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Managing assets
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理资产
- en: Adding CSS and JavaScript for a website
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为网站添加 CSS 和 JavaScript
- en: Creating or modifying templates
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建或修改模板
- en: Managing dynamic routes
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理动态路由
- en: Offering static snippets to the user
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户提供静态片段
- en: Offering dynamic snippets to the user
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向用户提供动态片段
- en: Getting input from website users
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从网站用户那里获取输入
- en: Managing SEO options
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理网站 SEO 选项
- en: Managing sitemaps for the website
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理网站地图
- en: Getting a visitor’s country information
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取访客的国家信息
- en: Tracking a marketing campaign
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪营销活动
- en: Managing multiple websites
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 管理多个网站
- en: Redirecting old URLs
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 重定向旧 URL
- en: Publish management for website-related records
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 发布网站相关记录的管理
- en: Managing assets
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理资源
- en: In the context of Odoo’s website, assets refer to various types of resources,
    such as **Cascading Style Sheets** (**CSS**), JavaScript files, fonts, and images,
    that are used to enhance the appearance and functionality of your website. Managing
    assets in Odoo is important for maintaining a well-structured and efficient website.
    When a page is loaded in the browser, these static files make a separate request
    to the server. The higher the number of requests, the lower the website speed.
    To avoid this issue, most websites serve static assets by combining multiple files.
    There are several tools on the market to manage these sorts of things, but Odoo
    has its own implementation for managing static assets.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 的上下文中，资源指的是各种类型的资源，例如 **Cascading Style Sheets**（**CSS**）、JavaScript
    文件、字体和图像，这些资源被用来增强网站的外观和功能。在 Odoo 中管理资源对于维护一个结构良好且高效的网站非常重要。当浏览器中加载一个页面时，这些静态文件会向服务器发出单独的请求。请求的数量越多，网站的速度就越低。为了避免这个问题，大多数网站通过合并多个文件来提供静态资源。市场上有一些工具用于管理这类事情，但
    Odoo 有自己的静态资源管理实现。
- en: What are asset bundles and different assets in Odoo?
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Odoo 中的资源包和不同资源是什么？
- en: In Odoo, asset bundles are collections of different assets, such as CSS, JavaScript
    files, and other resources, grouped together for efficient and organized loading
    on your website. Asset bundles help manage the loading of these resources by allowing
    you to define which assets should be loaded together to improve performance and
    ensure that your website functions properly. The job of an asset bundle is to
    combine all the JavaScript and CSS in a single file and reduce its size by minimizing
    it.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 中，资源包是不同资源的集合，例如 CSS、JavaScript 文件和其他资源，它们被分组在一起以便在您的网站上高效且有序地加载。资源包通过允许您定义哪些资源应该一起加载来帮助管理这些资源的加载，从而提高性能并确保网站正常工作。资源包的工作是将所有
    JavaScript 和 CSS 合并到一个文件中，并通过最小化来减小其大小。
- en: 'Here are the different asset bundles used in Odoo:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是 Odoo 中使用的不同资源包：
- en: '`web._assets_primary_variables`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web._assets_primary_variables`'
- en: '`web._assets_secondary_variables`'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web._assets_secondary_variables`'
- en: '`web.assets_backend`'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_backend`'
- en: '`web.assets_frontend`'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_frontend`'
- en: '`web.assets_frontend_minimal`'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_frontend_minimal`'
- en: '`web.assets_frontend_lazy`'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_frontend_lazy`'
- en: '`web.report_assets_common`'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.report_assets_common`'
- en: '`web.report_assets_pdf`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.report_assets_pdf`'
- en: '`web.assets_web_dark`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_web_dark`'
- en: '`web._assets_frontend_helpers`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web._assets_frontend_helpers`'
- en: '`web_editor.assets_wysiwyg`'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web_editor.assets_wysiwyg`'
- en: '`website.assets_wysiwyg`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`website.assets_wysiwyg`'
- en: '`website.assets_editor`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`website.assets_editor`'
- en: Important information
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: There are some other asset bundles used for specific applications;
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 对于某些特定应用，还有一些其他资源包被使用；
- en: for example, `point_of_sale.assets`, `survey.survey_assets`, `mass_mailing.layout`,
    and `website_slides.slide_embed_assets`.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`point_of_sale.assets`、`survey.survey_assets`、`mass_mailing.layout` 和 `website_slides.slide_embed_assets`。
- en: Odoo manages its static assets through the `AssetBundle` class, which is located
    at `/odoo/addons/base/models/assetsbundle.py`.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 通过位于 `/odoo/addons/base/models/assetsbundle.py` 的 `AssetBundle` 类来管理其静态资源。
- en: 'Now, `AssetBundle` not only combines multiple files; it is also packed with
    more features. Here is the list of features it provides:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`AssetBundle` 不仅合并多个文件，还包含更多功能。以下是它提供的功能列表：
- en: It combines multiple JavaScript and CSS files.
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Odoo 网站的上下文中，资源指的是各种类型的资源，例如**层叠样式表**（**CSS**）、JavaScript 文件、字体和图像，这些资源被用来增强网站的外观和功能。在
    Odoo 中管理资源对于维护一个结构良好且高效的网站非常重要。当浏览器中加载一个页面时，这些静态文件会向服务器发出单独的请求。请求的数量越多，网站的速度就越低。为了避免这个问题，大多数网站通过合并多个文件来提供静态资源。市场上有一些工具用于管理这类事情，但
    Odoo 有自己的静态资源管理实现。
- en: It minifies the JavaScript and CSS files by removing comments, extra spaces,
    and carriage returns from the file content. Removing this extra data will reduce
    the size of static assets and improve the page loading speed.
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过从文件内容中移除注释、额外空格和换行符来最小化 JavaScript 和 CSS 文件。移除这些额外数据将减小静态资源的大小并提高页面加载速度。
- en: It has built-in support for CSS preprocessors, such as **Sassy CSS** (**SCSS**)
    and **Leaner Style Sheets** (**LESS**). This means you can add SCSS and LESS files
    and they will automatically be compiled and added to the bundle.
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它内置了对 CSS 预处理器，如 **Sassy CSS**（**SCSS**）和 **Leaner Style Sheets**（**LESS**）的支持。这意味着您可以添加
    SCSS 和 LESS 文件，并且它们将自动被编译并添加到包中。
- en: Custom assets
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 自定义资源
- en: As we have seen, Odoo has different assets for different code bases. To get
    the right result, you will need to choose the right asset bundle in which to place
    your custom JavaScript and CSS files. For example, if you are designing a website,
    you need to put your file in `web.assets_frontend`. Although it is rare, sometimes,
    you need to create a whole new asset bundle. You can create your own asset bundle,
    as we will describe in the following section.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们所见，Odoo 为不同的代码库提供了不同的资产。为了得到正确的结果，您需要选择正确的资产包来放置您的自定义 JavaScript 和 CSS 文件。例如，如果您正在设计一个网站，您需要将文件放入
    `web.assets_frontend`。尽管这种情况很少见，但有时您需要创建一个全新的资产包。您可以在下一节中了解到如何创建自己的资产包。
- en: How to do it...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To load assets, you can use the `web.assets_frontend` template in your module’s
    `__manifest__.py` file; for example:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载资产，您可以在模块的 `__manifest__.py` 文件中使用 `web.assets_frontend` 模板；例如：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Here are some of the most important bundles:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一些最重要的包：
- en: '`web.assets_common`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_common`'
- en: '`web.assets_backend`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_backend`'
- en: '`web.assets_frontend`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_frontend`'
- en: '`web.qunit_suite_tests`'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.qunit_suite_tests`'
- en: '`web.qunit_mobile_suite_tests`'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.qunit_mobile_suite_tests`'
- en: Operations
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 操作
- en: 'Here are all directives targeting a certain asset file:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是针对特定资产文件的所有指令：
- en: '`before`'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`before`'
- en: '`after`'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`after`'
- en: '`replace`'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`replace`'
- en: '`remove`'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`remove`'
- en: append
  id: totrans-72
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: append
- en: 'An appending assets operation refers to adding additional CSS or JavaScript
    files to existing bundles or templates provided by other modules or the Odoo core.
    This allows you to extend the functionality or appearance without modifying the
    original code directly; for example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 追加资产操作是指向由其他模块或 Odoo 核心提供的现有包或模板中添加额外的 CSS 或 JavaScript 文件。这允许您扩展功能或外观，而无需直接修改原始代码；例如：
- en: '[PRE1]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Always consider the sequence in which your assets are loaded. If your code depends
    on any specific libraries or functionalities defined in other assets, ensure they
    are loaded in the correct order to avoid conflicts or errors.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 总是考虑您的资产加载顺序。如果您的代码依赖于其他资产中定义的任何特定库或功能，请确保它们以正确的顺序加载，以避免冲突或错误。
- en: prepend
  id: totrans-76
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: prepend
- en: 'Prepending assets in Odoo involves adding your own CSS or JavaScript files
    at the beginning of existing bundles or templates provided by other modules or
    the Odoo core. This helps ensure that your customizations take precedence over
    existing styles or scripts; for example:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 中，将资产（如 CSS 或 JavaScript 文件）添加到现有包或模板（由其他模块或 Odoo 核心提供）的开头，涉及到添加您自己的
    CSS 或 JavaScript 文件。这有助于确保您的自定义更改优先于现有的样式或脚本；例如：
- en: '[PRE2]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Determine the sequence in which your assets are loaded. Prepending assets means
    they’ll be loaded before other styles or scripts, potentially impacting functionality
    or design. Be cautious with overriding core functionalities.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 确定您的资产加载顺序。追加资产意味着它们将在其他样式或脚本之前加载，可能会影响功能或设计。在覆盖核心功能时要谨慎。
- en: before
  id: totrans-80
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: before
- en: 'In Odoo, organizing assets such as CSS or JavaScript files before other modules’
    assets involves controlling the loading order of resources to ensure your module’s
    files are loaded before those of other modules; for example:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 中，将资产（如 CSS 或 JavaScript 文件）组织在其他模块的资产之前，涉及到控制资源加载顺序以确保您的模块文件在其他模块的文件之前加载；例如：
- en: '[PRE3]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Ensure that you’re referring to the correct assets or templates of modules you
    want to load your resources beforehand. Incorrect referencing might lead to errors
    or unexpected behavior.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您在加载资源之前引用的是您想要加载的模块的正确资产或模板。错误的引用可能会导致错误或意外的行为。
- en: after
  id: totrans-84
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: after
- en: 'In Odoo, organizing assets such as CSS or JavaScript files to load after other
    modules’ assets involves controlling the loading order to ensure your module’s
    files are loaded after those of other modules. This is useful when you need your
    assets to rely on or override styles or scripts from other modules; for example:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 中，将 CSS 或 JavaScript 文件等资产组织在其他模块的资产之后，涉及到控制加载顺序以确保您的模块文件在其他模块的文件之后加载。这在您需要您的资产依赖于或覆盖其他模块的样式或脚本时很有用；例如：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Controlling the loading sequence using the `after` attribute or Python code
    helps ensure your module’s assets are loaded after other modules, enabling you
    to manage dependencies and customizations effectively.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `after` 属性或 Python 代码控制加载顺序有助于确保您的模块资产在其他模块之后加载，从而有效地管理依赖项和自定义。
- en: include
  id: totrans-88
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: include
- en: 'In Odoo, including assets such as CSS or JavaScript files involves linking
    these resources to your module or theme to enhance its functionality or appearance;
    for example:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中，包括CSS或JavaScript文件等资产涉及将这些资源链接到您的模块或主题以增强其功能或外观；例如：
- en: '[PRE5]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Including assets in Odoo allows you to extend your module’s capabilities by
    adding custom styles or scripts, enhancing the user experience and functionality.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中包括资产允许您通过添加自定义样式或脚本扩展模块的功能，增强用户体验和功能。
- en: remove
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 删除
- en: Remove one or multiple file(s).
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 删除一个或多个文件。
- en: 'Removing assets, such as CSS or JavaScript files, in Odoo involves excluding
    them from your module’s assets; for example:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 删除资产，例如CSS或JavaScript文件，在Odoo中涉及从您的模块资产中排除它们；例如：
- en: '[PRE6]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Removing assets in Odoo enables you to customize your module by excluding specific
    styles or scripts that are not needed or conflict with your module’s functionalities.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中删除资产允许您通过排除不需要或与您的模块功能冲突的特定样式或脚本来自定义您的模块。
- en: replace
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 替换
- en: 'In Odoo, replacing assets involves substituting existing CSS or JavaScript
    files with new ones in your module or theme; for example:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中，替换资产涉及在您的模块或主题中用新CSS或JavaScript文件替换现有文件；例如：
- en: '[PRE7]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Replacing assets in Odoo allows you to update and customize the appearance or
    functionality of your module by substituting existing files with new ones. Be
    cautious when replacing assets to maintain the stability and functionality of
    your application.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中替换资产允许您通过用新文件替换现有文件来更新和自定义模块的外观或功能。替换资产时要谨慎，以保持应用程序的稳定性和功能。
- en: Loading order
  id: totrans-101
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 加载顺序
- en: 'In Odoo, managing the loading order of assets (CSS, JavaScript, and so on)
    is crucial for ensuring that dependencies are resolved correctly and that the
    user interface renders properly. The loading order can be controlled to determine
    which assets are loaded first or after others; for example:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中，管理资产的加载顺序（CSS、JavaScript等）对于确保依赖关系正确解决和用户界面正确渲染至关重要。加载顺序可以控制以确定哪些资产首先加载或在其他资产之后加载；例如：
- en: '[PRE8]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: When an asset bundle is called (for example, `t-call-assets="web.assets_common"`),
    an empty list of assets is generated.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用资产包时（例如，`t-call-assets="web.assets_common"`），会生成一个空的资产列表。
- en: All records of type `ir.asset` matching the bundle are fetched and sorted by
    sequence number. Then, all records with a sequence strictly less than 16 are processed
    and applied to the current list of assets.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 所有与该包匹配的类型为`ir.asset`的记录都会被检索并按序列号排序。然后，所有序列严格小于16的记录都会被处理并应用于当前资产列表。
- en: All modules declaring assets for the said bundle in their manifest apply their
    assets’ operations to this list. This is done following the order of module dependencies
    (for example, web assets are processed before the website). If a directive tries
    to add a file already present in the list, nothing is done for that file. In other
    words, only the first occurrence of a file is kept in the list.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 所有在其清单中声明该包资产的模块都会将它们的资产操作应用于此列表。这是按照模块依赖顺序进行的（例如，网站资产在网站之前处理）。如果指令尝试添加列表中已存在的文件，则对该文件不进行任何操作。换句话说，列表中只保留文件的第一种出现。
- en: The remaining `ir.asset` records (those with a sequence greater than or equal
    to 16) are then processed and applied as well.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，处理并应用剩余的`ir.asset`记录（序列号大于或等于16的记录）。
- en: Assets declared in the manifest may need to be loaded in a particular order;
    for example, `jquery.js` must be loaded before all other `jquery` scripts when
    loading the `lib` folder. One solution would be to create an `ir.asset` record
    with a lower sequence or a `prepend` directive, but there is another, simpler
    way to do so.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单中声明的资产可能需要按特定顺序加载；例如，在加载`lib`文件夹时，`jquery.js`必须先于所有其他`jquery`脚本加载。一个解决方案是创建一个序列号较低的`ir.asset`记录或`prepend`指令，但还有另一种更简单的方法。
- en: There’s more...
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The following are a few things you need to know if you are working with assets
    in Odoo.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在Odoo中处理资产，以下是一些您需要了解的事项。
- en: Debugging JavaScript can be very hard in Odoo because `AssetBundle` merges multiple
    JavaScript files into a single file and also minifies them. By enabling developer
    mode with assets, you can skip asset bundling, and the page will load static assets
    separately so that you can debug easily.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中调试JavaScript可能非常困难，因为`AssetBundle`将多个JavaScript文件合并成一个文件，并且还会对其进行压缩。通过启用带有资产的开发者模式，您可以跳过资产打包，页面将单独加载静态资产，以便您可以轻松调试。
- en: 'Combined assets are generated once and stored in the `ir.attachment` model.
    After that, they are served from the attachment. If you want to regenerate assets,
    you can do so from the debug options, as shown in the following screenshot:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 合并资源一次生成并存储在`ir.attachment`模型中。之后，它们从附件中提供。如果您想重新生成资源，可以从调试选项中进行，如下面的截图所示：
- en: '![Figure 14.1 – Screenshot of assets’ activation options](img/B20997_14_1.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图14.1 – 资源激活选项的截图](img/B20997_14_1.jpg)'
- en: Figure 14.1 – Screenshot of assets’ activation options
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.1 – 资源激活选项的截图
- en: Tip
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: As you know, Odoo will generate an asset only once. This behavior can be a headache
    during development, as it requires frequent server restarts. To overcome this
    issue, you can use `dev=xml` in the command line, which will load assets directly,
    so there will be no need for a server restart.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，Odoo只会生成一次资源。在开发过程中，这种行为可能会引起头痛，因为它需要频繁重启服务器。为了克服这个问题，您可以在命令行中使用`dev=xml`，这将直接加载资源，因此不需要重启服务器。
- en: Lazy loading
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 懒加载
- en: 'Lazy loading is a technique that defers loading non-essential resources until
    they’re needed, often used for images, scripts, or other assets to improve performance:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 懒加载是一种技术，它将非关键资源的加载推迟到需要时，通常用于图像、脚本或其他资源以提高性能：
- en: '[PRE9]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: However, implementing lazy loading for specific assets or components in Odoo
    can be achieved through custom development or by utilizing third-party libraries.
    Here are some approaches you might consider.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在Odoo中实现特定资源或组件的懒加载可以通过自定义开发或利用第三方库来实现。以下是一些您可能考虑的方法。
- en: Lazy loading images
  id: totrans-121
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 懒加载图像
- en: You can implement lazy loading for images using JavaScript libraries such as
    Intersection Observer. This library allows you to load images only when they enter
    the user’s viewport.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用如Intersection Observer这样的JavaScript库来实现图像的懒加载。这个库允许您在图像进入用户的视口时才加载图像。
- en: 'Using Intersection Observer, JavaScript code could look like this:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Intersection Observer，JavaScript代码可能如下所示：
- en: '[PRE10]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: You would then need to assign the `lazy` class to your `<img>` tags and use
    the `data-src` attribute for the actual image source.
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后，您需要将`lazy`类分配给您的`<img>`标签，并使用`data-src`属性作为实际图像源。
- en: '`lazy` class and `data-src` attributes to the image tags.'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`lazy`类和`data-src`属性添加到图像标签中。
- en: Adding CSS and JavaScript for a website
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为网站添加CSS和JavaScript
- en: Managing assets such as CSS, JavaScript, and other static files can be done
    through the module’s asset management system. You can control the loading of these
    assets in your module by defining them in your manifest file and linking them
    to views or templates.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通过模块的资产管理系统管理如CSS、JavaScript和其他静态文件。您可以通过在清单文件中定义它们并将它们链接到视图或模板来控制这些资源在您的模块中的加载。
- en: Here’s an overview of how to manage CSS and JavaScript in Odoo.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一份关于如何在Odoo中管理CSS和JavaScript的概述。
- en: Defining assets in module manifest (__manifest__.py)
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在模块清单中定义资源（__manifest__.py）
- en: 'In the manifest file, specify the assets your module requires:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在清单文件中，指定模块所需的资源：
- en: '[PRE11]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We will add CSS, SCSS, and JavaScript files, which will modify the website.
    As we are modifying the website, we will need to add the website as a dependency.
    Modify the manifest file like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加CSS、SCSS和JavaScript文件，这些文件将修改网站。由于我们在修改网站，我们需要将网站作为依赖项添加。修改清单文件如下：
- en: '[PRE12]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add some SCSS code to `static/src/scss/hostel.scss`, as follows:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 将一些SCSS代码添加到`static/src/scss/hostel.scss`中，如下所示：
- en: '[PRE13]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add some JavaScript code to `static/src/js/my_library.js`, as follows:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 将一些JavaScript代码添加到`static/src/js/my_library.js`中，如下所示：
- en: '[PRE14]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'After updating your module, you should see that the Odoo website has custom
    colors in the menu, body, and footer, and a somewhat annoying Hello World popup
    on each page load, as shown in the following screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 更新您的模块后，您应该会看到Odoo网站在菜单、主体和页脚中具有自定义颜色，并且在每次页面加载时都会出现一个有点令人烦恼的Hello World弹出窗口，如下面的截图所示：
- en: '![Figure 14.2 – Screenshot of Hello World popup from JavaScript code](img/B20997_14_2.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
  zh: '![图14.2 – JavaScript代码中Hello World弹出窗口的截图](img/B20997_14_2.jpg)'
- en: Figure 14.2 – Screenshot of Hello World popup from JavaScript code
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.2 – JavaScript代码中Hello World弹出窗口的截图
- en: Tip
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: For CSS/SCSS files, sometimes, order matters. So, if you need to override a
    style defined in another add-on, you will have to ensure that your file is loaded
    after the original file you want to modify. This can be done by either adjusting
    your view’s priority field or directly inheriting from the add-on’s view that
    injects the reference to the CSS file.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 CSS/SCSS 文件，有时顺序很重要。因此，如果你需要覆盖另一个插件中定义的样式，你必须确保你的文件在加载原始文件之后。这可以通过调整你的视图的优先级字段或直接从注入
    CSS 文件引用的插件视图继承来实现。
- en: We have added basic SCSS. Odoo has built-in support for the SCSS preprocessor.
    Odoo will automatically compile SCSS files into CSS. In our example, we have used
    basic SCSS with some variables and the `darken` function to make `$my-text-color`
    darker by 15%. The SCSS preprocessor has tons of other features; if you want to
    learn more about SCSS, refer to [http://sass-lang.com/](http://sass-lang.com/).
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了基本的 SCSS。Odoo 内置了对 SCSS 预处理器的支持。Odoo 将自动将 SCSS 文件编译成 CSS。在我们的示例中，我们使用了带有一些变量和
    `darken` 函数的基本 SCSS，将 `$my-text-color` 的颜色加深 15%。SCSS 预处理器有众多其他功能；如果你想了解更多关于 SCSS
    的信息，请参阅 [http://sass-lang.com/](http://sass-lang.com/)。
- en: Creating or modifying templates
  id: totrans-145
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建或修改模板
- en: Website templates are created using QWeb, a templating language that integrates
    seamlessly with the Odoo framework. These templates are used to define the structure
    and appearance of web pages within the Odoo website module.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 网站模板使用 QWeb 创建，这是一种与 Odoo 框架无缝集成的模板语言。这些模板用于在 Odoo 网站模块中定义网页的结构和外观。
- en: Here’s an overview of how to work with website templates in Odoo.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是关于如何在 Odoo 中处理网站模板的概述。
- en: Understanding QWeb templates
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解 QWeb 模板
- en: QWeb templates in Odoo allow you to create dynamic web pages using XML-like
    syntax mixed with control structures and placeholders. They enable you to define
    the structure, content, and presentation of web pages.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 中的 QWeb 模板允许你使用类似于 XML 的语法，结合控制结构和占位符，创建动态网页。它们使你能够定义网页的结构、内容和展示。
- en: Creating a basic website template
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建基本的网站模板
- en: 'To create a simple website template, follow these steps:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个简单的网站模板，请按照以下步骤操作：
- en: '`views` directory:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`views` 目录：'
- en: '[PRE15]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Here’s an explanation of the code:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是对代码的解释：
- en: '`<template>`: Defines the QWeb template'
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<template>`: 定义 QWeb 模板'
- en: '`id`: Unique identifier for the template'
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`: 模板的唯一标识符'
- en: '`name`: Name of the template'
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 模板的名称'
- en: '`<t t-call="website.layout">`: Indicates that this template inherits from the
    website’s main layout'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<t t-call="website.layout">`: 表示此模板继承自网站的主要布局'
- en: '`<t t-set="page_title">`: Sets the page title dynamically'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<t t-set="page_title">`: 动态设置页面标题'
- en: '`<div class="custom-content">`: Example of content within the template'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<div class="custom-content">`: 模板内的内容示例'
- en: '**Include in the manifest file**: Include your view file in the module’s manifest
    file:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**包含在清单文件中**：将你的视图文件包含在模块的清单文件中：'
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Using Odoo Website Builder
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Odoo 网站构建器
- en: You can also use the Odoo Website Builder interface to create and customize
    web pages using predefined blocks and templates. This allows for a more visual
    and interactive way to design web pages without directly editing XML templates.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以使用 Odoo 网站构建器界面，通过预定义的块和模板创建和定制网页。这允许以更直观和互动的方式设计网页，而无需直接编辑 XML 模板。
- en: Styling and customization
  id: totrans-165
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 样式和定制
- en: For styling and customization, you can use CSS, which can be included within
    your QWeb templates or as separate files linked to your templates.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 对于样式和定制，你可以使用 CSS，它可以在你的 QWeb 模板内包含或作为链接到模板的单独文件。
- en: Remember—the structure and styling of your website templates can vary based
    on your specific needs and the complexity of the web pages you’re creating. Additionally,
    consider exploring existing Odoo website modules and official documentation for
    more detailed and advanced usage of QWeb templates within the Odoo framework.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 记住——你的网站模板的结构和样式可以根据你的具体需求和创建的网页的复杂性而变化。此外，考虑探索现有的 Odoo 网站模块和官方文档，以获取更多关于 Odoo
    框架内 QWeb 模板的详细和高级用法。
- en: Loops
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 循环
- en: 'To work on recordsets or iterable data types, you need a construct to loop
    through lists. In the QWeb template, this can be done with the `t-foreach` element.
    Iteration can happen in a `t` element, in which case its contents are repeated
    for every member of the iterable that was passed in the `t-foreach` attribute,
    as follows:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 要处理记录集或可迭代的数据类型，你需要一个结构来遍历列表。在 QWeb 模板中，这可以通过 `t-foreach` 元素来完成。迭代可以在 `t` 元素中发生，在这种情况下，其内容会为
    `t-foreach` 属性中传递的每个可迭代成员重复，如下所示：
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'This will be rendered as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 这将被渲染如下：
- en: '[PRE18]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'You can also place the `t-foreach` and `t-as` attributes in some arbitrary
    element, at which point this element and its contents will be repeated for every
    item in the iterable. Take a look at the following code block. This will generate
    exactly the same result as the previous example:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以将 `t-foreach` 和 `t-as` 属性放置在某个任意元素中，此时该元素及其内容将重复迭代器中的每个项目。看看下面的代码块。这将生成与上一个示例完全相同的结果：
- en: '[PRE19]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In our example, take a look at the inside of the `t-call` element, where the
    actual content generation happens. The template expects to be rendered with a
    context that has a variable called `hostel` set that iterates through it in the
    `t-foreach` element. The `t-as` attribute is mandatory and will be used as the
    name of the iterator variable to access the iterated data. While the most common
    use for this construction is to iterate over recordsets, you can use it on any
    iterable Python object.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，看看 `t-call` 元素内部，那里实际的内容生成发生。模板期望在具有名为 `hostel` 的变量的上下文中渲染，该变量在 `t-foreach`
    元素中迭代。`t-as` 属性是必需的，并将用作迭代变量名以访问迭代数据。虽然这种构造最常用的用途是迭代记录集，但你可以在任何可迭代的 Python 对象上使用它。
- en: Dynamic attributes
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 动态属性
- en: QWeb templates can set attribute values dynamically. This can be done in the
    following three ways.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb 模板可以动态设置属性值。这可以通过以下三种方式实现。
- en: 'The first way is through `t-att-$attr_name`. At the time of template rendering,
    an attribute, `$attr_name`, is created; its value can be any valid Python expression.
    This is computed with the current context and the result is set as the value of
    the attribute, like this:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方式是通过 `t-att-$attr_name`。在模板渲染时，创建一个名为 `$attr_name` 的属性；它的值可以是任何有效的 Python
    表达式。这是使用当前上下文计算得出的，结果被设置为属性的值，如下所示：
- en: '[PRE20]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'It will be rendered like this:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 它将被渲染如下：
- en: '[PRE21]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The second way is through `t-attf-$attr_name`. This is similar to the previous
    option. The only difference is that only strings between `{{ ..}}` and `#{..}`
    are evaluated. This is helpful when values are mixed with the strings. It is mostly
    used to evaluate classes, as in this example:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方式是通过 `t-attf-$attr_name`。这与前面的选项类似。唯一的区别是只有 `{{ ..}}` 和 `#{..}` 之间的字符串会被评估。这在值与字符串混合时很有用。它主要用于评估类，例如在这个例子中：
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'It will be rendered like this:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 它将被渲染如下：
- en: '[PRE23]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'The third way is through the `t-att=mapping` option. This option accepts the
    dictionary after the template rendering the dictionary’s data is converted into
    attributes and values. Take a look at the following example:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方式是通过 `t-att=mapping` 选项。此选项接受模板渲染后的字典，字典的数据被转换为属性和值。看看以下示例：
- en: '[PRE24]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'After rendering this template, it will be converted into the following:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 在渲染此模板之后，它将被转换为以下形式：
- en: '[PRE25]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In our example, we have used `t-attf-class` to get a dynamic background based
    on index values.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的例子中，我们使用了 `t-attf-class` 来根据索引值获取动态背景。
- en: Fields
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 字段
- en: 'The `h3` and `div` tags use the `t-field` attribute. The value of the `t-field`
    attribute must be used with the recordset with a length of one; this allows the
    user to change the content of the web page when they open the website in edit
    mode. When you save the page, updated values will be stored in the database. Of
    course, this is subject to a permission check and is only allowed if the current
    user has write permissions for the displayed record. With an optional `t-options`
    attribute, you can give a dictionary option to be passed to the field renderer,
    including the widget to be used. Currently, there is not a vast collection of
    widgets for the backend, so the choices are a bit limited here. For example, if
    you want to display an image from the binary field, then you can use the `image`
    widget like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`h3` 和 `div` 标签使用 `t-field` 属性。`t-field` 属性的值必须与长度为之一的记录集一起使用；这允许用户在以编辑模式打开网站时更改网页内容。当你保存页面时，更新的值将被存储在数据库中。当然，这需要权限检查，并且只有当前用户有显示记录的写入权限时才允许。通过可选的
    `t-options` 属性，你可以向字段渲染器传递一个字典选项，包括要使用的部件。目前，后端部件的选择相当有限。例如，如果你想从二进制字段显示一个图片，那么你可以使用
    `image` 部件，如下所示：'
- en: '[PRE26]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '`t-field` has some limitations. It only works on recordsets, and it cannot
    work on the `<t>` element. For this, you need to use some HTML elements, such
    as `<span>` or `<div>`. There is an alternative to the `t-field` attribute, which
    is `t-esc`. The `t-esc` attribute is not limited to recordsets; it can also be
    used on any data type, but it is not editable on a website.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-field`有一些限制。它仅在记录集上工作，并且不能在`<t>`元素上工作。为此，您需要使用一些HTML元素，如`<span>`或`<div>`。`t-field`属性有一个替代方案，即`t-esc`。`t-esc`属性不仅限于记录集；它也可以用于任何数据类型，但在网站上不可编辑。'
- en: 'Another difference between `t-esc` and `t-field` is that `t-field` shows values
    based on the user’s language, while `t-esc` shows raw values from the database.
    For example, for users who configured the English language in their preferences
    and set the `datetime` field as used with `t-field`, the result will be rendered
    in `12/15/2023 14:17:15` format. In contrast, if the `t-esc` attribute is used,
    then the result will be in a rendered format like this: `2023-12-15 21:12:07`.'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-esc`和`t-field`之间的另一个区别是`t-field`根据用户的语言显示值，而`t-esc`显示数据库中的原始值。例如，对于在偏好设置中配置了英语语言并将`datetime`字段设置为与`t-field`一起使用的用户，结果将以`12/15/2023
    14:17:15`的格式渲染。相比之下，如果使用`t-esc`属性，则结果将以如下渲染格式显示：`2023-12-15 21:12:07`。'
- en: Conditionals
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 条件语句
- en: 'Note that the division showing the publication date is wrapped by a `t` element
    with the `t-if` attribute set. This attribute is evaluated as Python code, and
    the element is only rendered if the result is a truthy value. In the following
    example, we only show the `div` class if there is actually a publication date
    set. However, in complex cases, you can use `t-elif` and `t-else`, as in the following
    example:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，显示发布日期的分区被一个带有`t-if`属性的`t`元素包裹。此属性被评估为Python代码，并且只有当结果为真值时，元素才会被渲染。在以下示例中，我们只显示设置了发布日期的`div`类。然而，在复杂情况下，您可以使用`t-elif`和`t-else`，如下例所示：
- en: '[PRE27]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Setting variables
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置变量
- en: 'The QWeb template is also capable of defining the variable in the template
    itself. After defining the template, you can use the variable in the subsequent
    template. You can set the variable like this:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb模板也能够在模板本身中定义变量。定义模板后，您可以在后续模板中使用该变量。您可以这样设置变量：
- en: '[PRE28]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Subtemplates
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 子模板
- en: 'If you are developing a big application, managing large templates can be difficult.
    The QWeb template supports subtemplates, so you can divide large templates into
    smaller subtemplates and you can reuse them in multiple templates. For subtemplates,
    you can use a `t-call` attribute, as in this example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在开发大型应用程序，管理大型模板可能会很困难。QWeb模板支持子模板，因此您可以把大型模板分成更小的子模板，并在多个模板中重复使用它们。对于子模板，您可以使用`t-call`属性，如下例所示：
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Inline editing
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 行内编辑
- en: The user will be able to modify records directly from the website in edit mode.
    The data loaded with the `t-field` node will be editable by default. If the user
    changes the value in such a node and saves the page, the values will also be updated
    in the backend. Don’t worry; in order to update the record, a user will need write
    permissions on the record. Note that `t-field` only works on a recordset. To display
    other types of data, you can use `t-esc`. This works exactly like `t-field`, but
    the only difference is that `t-esc` is not editable and can be used with any type
    of data.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 用户将能够在编辑模式下直接从网站上修改记录。使用`t-field`节点加载的数据默认可编辑。如果用户更改了此类节点中的值并保存页面，后端中的值也将更新。请放心；为了更新记录，用户需要对该记录有写权限。请注意，`t-field`仅在记录集上工作。要显示其他类型的数据，您可以使用`t-esc`。这与`t-field`的工作方式完全相同，但唯一的不同是`t-esc`不可编辑，并且可以用于任何类型的数据。
- en: If you want to enable snippet drag-and-drop support on the page, you can use
    the `oe_structure` class. In our example, we have added this at the top of the
    template. Using `oe_structure` will enable editing and snippet drag-and-drop support.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在页面上启用代码片段拖放支持，可以使用`oe_structure`类。在我们的示例中，我们在模板顶部添加了这一设置。使用`oe_structure`将启用编辑和代码片段拖放支持。
- en: If you want to disable the website editing feature on a block, you can use the
    `contenteditable=False` attribute. This makes an element read-only. We have used
    this attribute in the last `<``section>` tag.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想在某个块上禁用网站编辑功能，可以使用`contenteditable=False`属性。这会使元素变为只读。我们在最后一个`<section>`标签中使用了这个属性。
- en: Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: To make the page multi-website compatible, when you edit a page/view through
    the website editor, Odoo will create a separate copy of the page for that website.
    This means that subsequent code updates will never make it to the edited website
    page. In order to also get the ease of use of inline editing and the possibility
    of updating your HTML code in subsequent releases, create one view that contains
    semantic HTML elements and a second one that injects editable elements. Then,
    only the latter view will be copied, and you can still have updates for the parent
    view.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使页面多网站兼容，当你通过网站编辑器编辑页面/视图时，Odoo 将为该网站创建页面的一个单独副本。这意味着后续的代码更新永远不会影响到已编辑的网站页面。为了同时获得内联编辑的便利性和在后续版本中更新你的
    HTML 代码的可能性，创建一个包含语义 HTML 元素的一个视图，以及一个包含可编辑元素的第二视图。然后，只有后者视图会被复制，你仍然可以为父视图更新。
- en: For the other CSS classes used here, consult Bootstrap’s documentation.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这里使用的其他 CSS 类，请参考 Bootstrap 的文档。
- en: In *step 1*, we have declared the route to render the template. If you noticed,
    we have used the `website=True` parameter in `route()`, which will pass some extra
    context in the template, such as menus, user language, company, and so on. This
    will be used in `website.layout` to render the menus and footers. The `website=True`
    parameter also enables multi-language support in a website and displays exceptions
    in a better way.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们声明了渲染模板的路由。如果你注意到了，我们在 `route()` 中使用了 `website=True` 参数，这将向模板传递一些额外的上下文，例如菜单、用户语言、公司等。这些将在
    `website.layout` 中用于渲染菜单和页脚。`website=True` 参数还启用了网站的多语言支持，并以更好的方式显示异常。
- en: Managing dynamic routes
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理动态路由
- en: In website development projects, it is often the case that we need to create
    pages with dynamic URLs. For example, in e-commerce, each product has a detailed
    page linked with a different URL. In this recipe, we will create a web page to
    display hostel details.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在网站开发项目中，我们经常需要创建具有动态 URL 的页面。例如，在电子商务中，每个产品都有一个与不同 URL 链接的详细页面。在这个菜谱中，我们将创建一个网页来显示宿舍详情。
- en: Getting ready
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Add basic fields in the `hostel` model:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `hostel` 模型中添加基本字段：
- en: '[PRE30]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: How to do it…
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to generate a details page for the hostel:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤生成宿舍的详情页面：
- en: 'Add a new route for hostel details in `main.py`, as follows:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `main.py` 中添加一个新的宿舍详情路由，如下所示：
- en: '[PRE31]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add a new template for hostel details in `hostel_templates.xml`, as follows:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `hostel_templates.xml` 中添加一个新的宿舍详情模板，如下所示：
- en: '[PRE32]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add a button in the hostel list template, as follows. This button will redirect
    to the hostel details web page:'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在宿舍列表模板中添加一个按钮，如下所示。此按钮将重定向到宿舍详情网页：
- en: '[PRE33]'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Update the `my_hostel` module to apply changes. After the update, you will see
    hostel details page links on the hostel card. Upon clicking those links, the hostel
    details pages will open.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 更新 `my_hostel` 模块以应用更改。更新后，你将在宿舍卡片上看到宿舍详情页面的链接。点击这些链接后，将打开宿舍详情页面。
- en: How it works…
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we created a dynamic route for the hostel details page. In this
    route, we added `<model("hostel.hostel"):hostel>`. This accepts URLs with integers,
    as in `/hostel/1`. Odoo considers this integer as the ID of the `hostel.hostel`
    model, and when this URL is accessed, Odoo fetches a recordset and passes it to
    the function as the argument. So, when `/hostel/1` is accessed from the browser,
    the `hostel` parameter in the `hostel_detail()` function will have a recordset
    of the `hostel.hostel` model with the ID `1`. We passed this `hostel` recordset
    and rendered a new template called `my_hostel.hostel2_detail`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们为宿舍详情页面创建了一个动态路由。在这个路由中，我们添加了 `<model("hostel.hostel"):hostel>`。它接受整数
    URL，例如 `/hostel/1`。Odoo 将这个整数视为 `hostel.hostel` 模型的 ID，当访问这个 URL 时，Odoo 会获取一个记录集并将其作为参数传递给函数。因此，当从浏览器访问
    `/hostel/1` 时，`hostel_detail()` 函数中的 `hostel` 参数将包含 ID 为 `1` 的 `hostel.hostel`
    模型的记录集。我们传递了这个 `hostel` 记录集并渲染了一个名为 `my_hostel.hostel2_detail` 的新模板。
- en: In *step 2*, we created a new QWeb template called `hostel_detail` to render
    a hostel details page. This is simple and is created using the Bootstrap structure.
    If you check, we have added `html_description` in the details page. The `html_description`
    field has a field type of HTML, so you can store HTML data in the field. Odoo
    automatically adds snippet drag-and-drop support to HTML types of fields. So,
    we are now able to use snippets in the hostel details page. The snippets dropped
    in the HTML fields are stored in a hostel’s records, so you can design different
    content for different records.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们创建了一个名为 `hostel_detail` 的新QWeb模板，用于渲染宿舍详情页面。这是简单的，并且使用Bootstrap结构创建的。如果您检查，我们在详情页面中添加了
    `html_description`。`html_description` 字段具有HTML字段类型，因此您可以在字段中存储HTML数据。Odoo自动为HTML类型的字段添加了片段拖放支持。因此，我们现在能够在宿舍详情页面中使用片段。在HTML字段中放置的片段存储在宿舍的记录中，因此您可以针对不同的记录设计不同的内容。
- en: In *step 3*, we added a link with the anchor tag so that a visitor can be redirected
    to the hostel details page.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 中，我们添加了一个带有锚点的链接，以便访客可以重定向到宿舍详情页面。
- en: Note
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'The model route also supports domain filtering. For example, if you want to
    restrict some records based on a condition, you can do so by passing the domain
    to the route as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 模型路由也支持域过滤。例如，如果您想根据条件限制一些记录，可以通过将域传递给路由来实现，如下所示：
- en: '`/hostel/<model("hostel.hostel", "[(name'',''!='', ''``Hostel 1'')]"):hostel>`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`/hostel/<model("hostel.hostel", "[(name'',''!='', ''``Hostel 1'')]"):hostel>`'
- en: This will restrict access to the hostel that has the name `Hostel 1`.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这将限制对名为 `Hostel 1` 的宿舍的访问。
- en: There’s more...
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Odoo uses `werkzeug` to handle HTTP requests. Odoo adds a thin wrapper around
    `werkzeug` to easily handle routes. You saw the `<model("hostel.hostel"):hostel>`
    route in the last example. This is Odoo’s own implementation, but it also supports
    all features from the `werkzeug` routing. Consequently, you can use routing like
    this:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo使用 `werkzeug` 来处理HTTP请求。Odoo在 `werkzeug` 上添加了一个薄薄的包装，以便轻松处理路由。您在上一个示例中看到了
    `<model("hostel.hostel"):hostel>` 路由。这是Odoo自己的实现，但它也支持 `werkzeug` 路由的所有功能。因此，您可以使用类似以下的路由：
- en: '`/page/<int:page>` accepts integer values'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/page/<int:page>` 接受整数值'
- en: '`/page/<any(about, help):page_name>` accepts selected values'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/page/<any(about, help):page_name>` 接受选定值'
- en: '`/pages/<page>` accepts strings'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/pages/<page>` 接受字符串'
- en: '`/pages/<category>/<int:page>` accepts multiple values'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/pages/<category>/<int:page>` 接受多个值'
- en: There are lots of variations available for routes, which you can read about
    at [http://werkzeug.pocoo.org/docs/0.14/routing/](http://werkzeug.pocoo.org/docs/0.14/routing/).
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 路由有很多变体可供选择，您可以在 [http://werkzeug.pocoo.org/docs/0.14/routing/](http://werkzeug.pocoo.org/docs/0.14/routing/)
    中了解相关信息。
- en: Offering static snippets to the user
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向用户提供静态片段
- en: Static snippets are reusable components or blocks of HTML, CSS, and JavaScript
    that can be inserted into website pages using Website Builder. These snippets
    allow for easy customization and construction of web pages without needing to
    write code from scratch.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 静态片段是可以重复使用的组件或HTML、CSS和JavaScript的代码块，可以通过网站构建器插入到网页中。这些片段允许轻松地自定义和构建网页，无需从头编写代码。
- en: 'Odoo’s website editor offers several editing building blocks, which can be
    dragged onto the page and edited according to your needs. This recipe will cover
    how to offer your own building blocks. These blocks are referred to as snippets.
    There are several types of snippets, but in general, we can categorize them into
    two types: static and dynamic. A static snippet is fixed and does not change until
    the user changes it. Dynamic snippets depend on database records and are changed
    based on record values. In this recipe, we will see how to create a static snippet.'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo的网站编辑器提供了几个编辑构建块，可以根据您的需求拖放到页面上进行编辑。本教程将介绍如何提供您自己的构建块。这些块被称为片段。片段有几种类型，但通常我们可以将它们分为两种：静态和动态。静态片段是固定的，直到用户更改它才会改变。动态片段依赖于数据库记录，并根据记录值进行更改。在本教程中，我们将了解如何创建一个静态片段。
- en: How to do it…
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'A snippet is actually just a QWeb view that gets injected into the **Insert
    blocks** bar. We will create a small snippet that will show the hostel’s image
    and its title. You will be able to drag and drop the snippet on the page, and
    you will be able to edit the image and text. Follow these steps to add a new static
    snippet:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 片段实际上只是一个注入到 **插入块** 栏中的QWeb视图。我们将创建一个小片段，用于显示宿舍的图片和标题。您将能够在页面上拖放片段，并且可以编辑图片和文本。按照以下步骤添加一个新的静态片段：
- en: 'Add a file called `views/snippets.xml`, as follows (do not forget to register
    the file in the manifest):'
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为 `views/snippets.xml` 的文件，如下所示（不要忘记在清单中注册文件）：
- en: 'Add a QWeb template for the snippet in `views/snippets.xml`, as follows:'
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `views/snippets.xml` 中为片段添加一个QWeb模板，如下所示：
- en: '[PRE34]'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'List the template in the snippet list like this:'
  id: totrans-250
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式在片段列表中列出模板：
- en: '[PRE35]'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Add the cover image and snippet thumbnail image in the `/``my_hostel/static/src/img`
    directory.
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/my_hostel/static/src/img` 目录中添加封面图像和片段缩略图。
- en: 'Restart the server and update the `my_hostel` module to apply the changes.
    When you open the website page in edit mode, you will be able to see our snippet
    in the snippets blocks panel:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动服务器并更新 `my_hostel` 模块以应用更改。当您以编辑模式打开网站页面时，您将能够在片段块面板中看到我们的片段：
- en: '![Figure 14.3 – Screenshot of static snippet](img/B20997_14_3.jpg)'
  id: totrans-254
  prefs: []
  type: TYPE_IMG
  zh: '![图14.3 – 静态片段截图](img/B20997_14_3.jpg)'
- en: Figure 14.3 – Screenshot of static snippet
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.3 – 静态片段截图
- en: How it works…
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: A static snippet is nothing but a block of HTML code. In *step 1*, we created
    a QWeb template with our HTML for the hostel block. In this HTML, we have just
    used a Bootstrap column structure, but you can use any HTML code. Note that the
    HTML code you add in the snippet’s QWeb template will be added to the page when
    you drag and drop. In general, it is a good idea to use `section` elements and
    Bootstrap classes for snippets, because for them, Odoo’s editor offers edit, background,
    and resize controls out of the box.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 静态片段不过是一块HTML代码。在 *步骤1* 中，我们为宿舍块创建了一个包含我们HTML的QWeb模板。在这个HTML中，我们只使用了Bootstrap列结构，但您可以使用任何HTML代码。请注意，您在片段的QWeb模板中添加的HTML代码将在您拖放时添加到页面上。通常，使用
    `section` 元素和Bootstrap类为片段是一个好主意，因为对于它们，Odoo的编辑器提供了编辑、背景和调整大小控件。
- en: In *step 2*, we registered our snippet in the snippet list. You will need to
    inherit `website.snippets` to register a snippet. In the website editor GUI, snippets
    are divided into different sections based on their usage. In our example, we have
    registered our snippet in the `Structure` section via `xpath`. To list your snippet,
    you need to use a `<t>` tag with the `t-snippet` attribute. The `t-snippet` attribute
    will have the XML ID of the QWeb template, which is `my_hostel.snippet_hostel_card`
    in our example. You will also need to use the `t-thumbnail` attribute, which is
    used to show a small snippet image in the website editor.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤2* 中，我们在片段列表中注册了我们的片段。您需要继承 `website.snippets` 以注册片段。在网站编辑器GUI中，片段根据其用途分为不同的部分。在我们的例子中，我们通过
    `xpath` 在 `Structure` 部分注册了我们的片段。要列出您的片段，您需要使用具有 `t-snippet` 属性的 `<t>` 标签。`t-snippet`
    属性将具有QWeb模板的XML ID，在我们的例子中是 `my_hostel.snippet_hostel_card`。您还需要使用 `t-thumbnail`
    属性，该属性用于在网站编辑器中显示一个小片段图像。
- en: Note
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `website.snippets` template contains all the default snippets, and you can
    learn more about it by exploring the `/``addons/website/views/snippets/snippets.xml`
    file.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`website.snippets` 模板包含所有默认片段，您可以通过探索 `/addons/website/views/snippets/snippets.xml`
    文件了解更多信息。'
- en: '[PRE36]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: In *step 3*, we listed our snippet under the `structure` block. Once you update
    the module, you will be able to drag and drop the snippet. In *step 4*, we just
    added an image for the snippet thumbnail.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤3* 中，我们将我们的片段列在 `structure` 块下。一旦更新模块，您将能够拖放该片段。在 *步骤4* 中，我们只为片段缩略图添加了一张图片。
- en: There’s more…
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: In such cases, there will be no need for extra JavaScript. Odoo’s editor offers
    lots of options and controls out of the box, and they are more than enough for
    static snippets. You will find all existing snippets and options at `website/views/snippets.xml`.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，不需要额外的JavaScript。Odoo的编辑器提供了大量的选项和控件，对于静态片段来说已经足够了。您可以在 `website/views/snippets.xml`
    中找到所有现有的片段和选项。
- en: Snippet options also support the `data-exclude`, `data-drop-near`, and `data-drop-in`
    attributes, which determine where a snippet can be placed when dragging it out
    of the snippet bar. These are also jQuery selectors, but in *step 3* of this recipe,
    we didn’t use them, because we allow putting the snippet basically anywhere that
    content can go.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 片段选项也支持 `data-exclude`、`data-drop-near` 和 `data-drop-in` 属性，这些属性决定了在将片段从片段栏拖出时可以放置的位置。这些也是jQuery选择器，但在本食谱的
    *步骤3* 中我们没有使用它们，因为我们允许将片段放置在基本上任何内容可以放置的地方。
- en: Offering dynamic snippets to the user
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向用户提供动态片段
- en: Dynamic snippets refer to reusable components or blocks that are capable of
    displaying dynamic content pulled from various sources such as databases, models,
    or external services. These snippets enable the creation of versatile and adaptable
    web pages that display real-time or context-specific information.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 动态片段是指能够从数据库、模型或外部服务等各种来源显示动态内容的可重用组件或块。这些片段能够创建灵活且适应性强的网页，显示实时或上下文特定的信息。
- en: 'Identify data sources:'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 识别数据源：
- en: Determine the data sources you want to use in your dynamic snippet. This can
    include Odoo models, databases, APIs, and so on.
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确定您想在动态片段中使用的源数据。这可以包括 Odoo 模型、数据库、API 等。
- en: Implement dynamic placeholders using QWeb templating tags (`{% %}`) or Odoo-specific
    directives (`<t` `t-foreach="..." t-as="...">`).
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 QWeb 模板标签 (`{% %}`) 或 Odoo 特定指令 (`<t t-foreach="..." t-as="...">`) 实现动态占位符。
- en: We will see how we can create dynamic snippets for Odoo. We will generate content
    based on database values.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将了解如何为 Odoo 创建动态片段。我们将根据数据库值生成内容。
- en: How to do it…
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Perform the following steps to add a dynamic snippet that shows a list of hostel
    data:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以添加显示宿舍数据列表的动态片段：
- en: 'Add a given QWeb template for the snippet in `views/snippets.xml`:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `views/snippets.xml` 中添加给定的 QWeb 模板片段：
- en: '[PRE37]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Register the snippet and add an option to change the snippet behavior:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 注册片段并添加一个选项以更改片段行为：
- en: '[PRE38]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, add snippet options for the hostel snippet:'
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，为宿舍片段添加片段选项：
- en: '[PRE39]'
  id: totrans-279
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Add a new `/static/src/snippets.js` file and add code to render a dynamic snippet.
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `/static/src/snippets.js` 文件中添加代码以渲染动态片段。
- en: 'Add a `public` widget to render the hostel snippet dynamically:'
  id: totrans-281
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `public` 小部件以动态渲染宿舍片段：
- en: '[PRE40]'
  id: totrans-282
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Load the JavaScript file to the `__manifest__.py` module:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 JavaScript 文件加载到 `__manifest__.py` 模块中：
- en: '[PRE41]'
  id: totrans-284
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: After updating the module, you will be offered a new snippet called `Hostels`,
    which has an option to change the number of recently added rooms. We have also
    added the option to change the table design, which can be displayed when you click
    on the table.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模块后，您将获得一个名为 `Hostels` 的新片段，该片段有一个选项可以更改最近添加的房间数量。我们还添加了更改表格设计的选项，当您点击表格时可以显示。
- en: How it works…
  id: totrans-286
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, we added a QWeb template for the new snippet (it is just like the
    previous recipe). Note that we added a basic structure for the table. We will
    dynamically add lines for the hostel in the table.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们为新的片段添加了一个 QWeb 模板（它就像之前的食谱一样）。请注意，我们为表格添加了一个基本结构。我们将在表格中动态添加宿舍的行。
- en: In *step 2*, we registered our dynamic snippet and added custom options to change
    the behavior of our dynamic snippet. The first option we added is `Table Style`.
    It will be used to change the style of the table. The second option we added is
    `No of Rooms`. We used the `<we-select>` and `<we-button-group>` tags for our
    options. These tags will provide different GUIs to the snippet option. The `<we-select>`
    tag will show the options as a dropdown, while the `<we-button-group>` tag will
    show the options as a button group. There are several other GUI options, such
    as `<we-checkbox>` and `<we-colorpicker>`. You can explore more GUI options in
    the `/``addons/website/views/snippets/snippets.xml` file.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们注册了我们的动态片段并添加了自定义选项以更改动态片段的行为。我们添加的第一个选项是 `表格样式`。它将用于更改表格的样式。我们添加的第二个选项是
    `房间数量`。我们使用了 `<we-select>` 和 `<we-button-group>` 标签来表示我们的选项。这些标签将为片段选项提供不同的 GUI。`<we-select>`
    标签将以下拉菜单的形式显示选项，而 `<we-button-group>` 标签将以按钮组的形式显示选项。还有其他几个 GUI 选项，例如 `<we-checkbox>`
    和 `<we-colorpicker>`。您可以在 `/addons/website/views/snippets/snippets.xml` 文件中探索更多
    GUI 选项。
- en: If you look at the options closely, you will see we have `data-select-class`
    and `data-select-data-attribute` attributes for the option buttons. This will
    let Odoo know which attribute to change when the user chooses an option. `data-select-class`
    will set the class attribute on the element when the user chooses this option,
    while `data-select-data-attribute` will set the custom attribute and value on
    the element. Note that it will use the value of `data-attribute-name` to set the
    attribute.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您仔细查看选项，您会看到我们为选项按钮添加了 `data-select-class` 和 `data-select-data-attribute`
    属性。这将让 Odoo 知道当用户选择选项时要更改哪个属性。`data-select-class` 将在用户选择此选项时设置元素的类属性，而 `data-select-data-attribute`
    将在元素上设置自定义属性和值。请注意，它将使用 `data-attribute-name` 的值来设置属性。
- en: Now, we have added the snippet options. If you drag and drop the snippet at
    this point, you will only see the table header and the snippet options. Changing
    the snippet options will change the table style, but there is no hostel data yet.
    For that, we need to write some JavaScript code that will fetch the data and display
    it in the table. In *step 3*, we added JavaScript code that will render the hostel
    data in the table. To map a JavaScript object to an HTML element, Odoo uses `PublicWidget`.
    Now, `PublicWidget` is available through `import publicWidget from "@web/legacy/js/public/public_widget";`.
    The key attribute in using `PublicWidget` is the `selector` attribute. In the
    `selector` attribute, you will need to use the CSS selector of the element, and
    Odoo will automatically bind the element with `PublicWidget`. You can access the
    related element in the `$el` attribute. The rest of the code is basic JavaScript
    and jQuery except `_rpc`.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们已经添加了代码片段选项。如果您此时拖放代码片段，您将只会看到表头和代码片段选项。更改代码片段选项将更改表格样式，但还没有宿舍数据。为此，我们需要编写一些JavaScript代码来获取数据并在表格中显示。在*步骤3*中，我们添加了将宿舍数据渲染到表格中的JavaScript代码。为了将JavaScript对象映射到HTML元素，Odoo使用`PublicWidget`。现在，`PublicWidget`可以通过`import
    publicWidget from "@web/legacy/js/public/public_widget";`导入。使用`PublicWidget`的关键属性是`selector`属性。在`selector`属性中，您需要使用元素的CSS选择器，Odoo将自动将元素与`PublicWidget`绑定。您可以通过`$el`属性访问相关元素。除了`_rpc`之外，其余的代码是基本的JavaScript和jQuery。
- en: There’s more…
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: If you want to create your own snippet option, you can use the `t-js` option
    on the snippet option. After that, you will need to define your own option in
    the JavaScript code. Explore the `addons/website/static/src/js/editor/snippets.options.js`
    file to learn more about snippet options.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想创建自己的代码片段选项，您可以在代码片段选项中使用`t-js`选项。之后，您需要在JavaScript代码中定义自己的选项。通过探索`addons/website/static/src/js/editor/snippets.options.js`文件来了解更多关于代码片段选项的信息。
- en: Getting input from website users
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从网站用户获取输入
- en: In Odoo, you can collect input from website users through forms, surveys, or
    interactive elements integrated into your website. Odoo provides functionalities
    to create forms easily and manage the data collected from these forms. Here’s
    how you can set up input collection.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中，您可以通过表单、调查或集成到您网站中的交互式元素从网站用户收集输入。Odoo提供易于创建表单和管理从这些表单收集的数据的功能。以下是您如何设置输入收集的步骤。
- en: Submitted form data is typically stored in the database as records of a specific
    model associated with the form
  id: totrans-295
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提交的表单数据通常以与表单关联的特定模型记录的形式存储在数据库中
- en: Access the collected data either through the website backend or by configuring
    views to display the form submissions
  id: totrans-296
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以通过网站后端或配置视图来显示表单提交来访问收集到的数据
- en: Optionally, you can link the form submissions to specific models in Odoo, allowing
    you to manage and process the data within the Odoo backend
  id: totrans-297
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可选地，您可以将表单提交链接到Odoo中的特定模型，这样您就可以在Odoo后台管理和处理数据。
- en: Define models and fields to store the form data securely
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义模型和字段以安全地存储表单数据
- en: Getting ready
  id: totrans-299
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the `my_hostel` module. We will need a new
    model to store hostel booking inquiries submitted by users.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用`my_hostel`模块。我们需要一个新的模型来存储用户提交的宿舍预订查询。
- en: 'So, before starting this recipe, modify the previous code and create one new
    model for booking inquiries, `my_hostel/models/inquiries.py`:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在开始这个菜谱之前，修改之前的代码并创建一个新的用于预订查询的模型，`my_hostel/models/inquiries.py`：
- en: '[PRE42]'
  id: totrans-302
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: Now, create menus, actions, and views in the backend to store the submitted
    data from the website inquiries form.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在后台创建菜单、操作和视图来存储来自网站查询表单的提交数据。
- en: 'For that, create an XML file in `my_hostel/views/inquiries_view.xml`, then
    add menus, actions, and its basic tree and form view:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，在`my_hostel/views/inquiries_view.xml`中创建一个XML文件，然后添加菜单、操作以及其基本的树形和表单视图：
- en: '[PRE43]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Now, create a basic form to get the details from the customers, which is published
    on the website page. Once a user has submitted that form, all the filled data
    will be stored in the `Inquiries` table.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，创建一个基本的表单来获取客户的详细信息，该表单发布在网站页面上。一旦用户提交该表单，所有填写的数据都将存储在`Inquiries`表中。
- en: 'For that, create a new folder in the module, `my_hostel/controllers/main.py`:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 为此，在模块中创建一个新文件夹，`my_hostel/controllers/main.py`：
- en: '[PRE44]'
  id: totrans-308
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Now, design a form for the website called `my_hostel/views/form_template.xml`:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为网站设计一个名为`my_hostel/views/form_template.xml`的表单：
- en: '[PRE45]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How to do it…
  id: totrans-311
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: Update the module and open the `/inquiry/form` URL. From this page, you will
    be able to submit queries for the hostel. After submission, you can check them
    into the respective inquiries form view in the backend.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模块并打开`/inquiry/form` URL。从该页面，您将能够提交宿舍的查询。提交后，您可以在后端的相关查询表单视图中检查它们。
- en: Managing SEO options
  id: totrans-313
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理SEO选项
- en: Odoo has built-in SEO features for templates (pages). However, some templates
    are used for multiple URLs. For example, in an online shop, each product page
    uses the same template but different product data. For these cases, we need different
    SEO options for each URL.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo为模板（页面）内置了SEO功能。然而，一些模板被用于多个URL。例如，在在线商店中，每个产品页面使用相同的模板但不同的产品数据。对于这些情况，我们需要为每个URL提供不同的SEO选项。
- en: Getting ready
  id: totrans-315
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this recipe, we will be using the `my_hostel` module. We will store separate
    SEO data for each hostel details page. Before following this recipe, you should
    test the SEO options in the different hostel pages. You can get an SEO dialog
    from the **Promote** drop-down menu on the top, as shown in the following screenshot:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用`my_hostel`模块。我们将为每个宿舍详情页面存储单独的SEO数据。在遵循此菜谱之前，您应该在不同的宿舍页面上测试SEO选项。您可以从顶部的**推广**下拉菜单中获取SEO对话框，如图下所示：
- en: '![Figure 14.4 – Opening the SEO configuration for a page](img/B20997_14_4.jpg)'
  id: totrans-317
  prefs: []
  type: TYPE_IMG
  zh: '![图14.4 – 打开页面的SEO配置](img/B20997_14_4.jpg)'
- en: Figure 14.4 – Opening the SEO configuration for a page
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 图14.4 – 打开页面的SEO配置
- en: If you test SEO options on different hostel details pages, you will notice that
    changing the SEO data in one book page will reflect on all hostel pages. We will
    fix this issue in this recipe.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在不同的宿舍详情页面上测试SEO选项，您将注意到更改一个书籍页面的SEO数据将在所有宿舍页面上反映出来。我们将在此菜谱中解决这个问题。
- en: How to do it...
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To manage separate SEO options for each hostel, follow these steps:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 要为模型中的每个记录管理单独的SEO选项，您需要在您的模型中继承`website.seo.metadata`混合。这将向`hostel.hostel`模型添加一些字段和方法。这些字段和方法将被网站用于为每个书籍存储单独的数据。
- en: 'Inherit the `website.seo.metadata` mixin in the `hostel.hostel` model, as follows:'
  id: totrans-322
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`hostel.hostel`模型中继承`website.seo.metadata`混合，如下所示：
- en: '[PRE46]'
  id: totrans-323
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Pass the `hostel` object in the hostel details route as `main_object`, as follows:'
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在宿舍详情路由中将`hostel`对象作为`main_object`传递，如下所示：
- en: '[PRE47]'
  id: totrans-325
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Update the module and change the SEO on the different hostel pages. It can be
    changed through the **Optimize SEO** option. Now, you will be able to manage separate
    SEO details per hostel.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模块并更改不同宿舍页面的SEO。这可以通过**优化SEO**选项进行更改。现在，您将能够为每个宿舍管理单独的SEO详情。
- en: How it works...
  id: totrans-327
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: To enable SEO on each record of the model, you will need to inherit the `website.seo.metadata`
    mixin in your model. This will add a few fields and methods to the `hostel.hostel`
    model. These fields and methods will be used from the website to store separate
    data for each book.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 要在每个模型记录上启用SEO，您需要继承您的模型中的`website.seo.metadata`混合。这将向`hostel.hostel`模型添加一些字段和方法。这些字段和方法将被网站用于为每个书籍存储单独的数据。
- en: Tip
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you want to see fields and methods for the SEO mixin, search for the `website.seo.metadata`
    model in the `/``addons/website/models/website.py` file.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想查看SEO混合的字段和方法，请在`/addons/website/models/website.py`文件中搜索`website.seo.metadata`模型。
- en: All SEO-related code is written in `website.layout`, and it gets all the SEO
    meta-information from the recordset passed as `main_object`. Consequently, in
    *step 2*, we passed a `hostel` object with the `main_object` key so that the website
    layout will get all SEO information from the hostel. If you don’t pass `main_object`
    from the controller, then the template recordset will be passed as `main_object`,
    and that’s why you were getting the same SEO data in all hostels.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 所有与SEO相关的代码都写在`website.layout`中，并且它从作为`main_object`传递的记录集中获取所有SEO元信息。因此，在*步骤2*中，我们传递了一个带有`main_object`键的`hostel`对象，以便网站布局能够从宿舍获取所有SEO信息。如果您从控制器中没有传递`main_object`，那么模板记录集将被传递为`main_object`，这就是为什么您在所有宿舍中都得到了相同的SEO数据。
- en: There’s more...
  id: totrans-332
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'In Odoo, you can add custom metatags for Open Graph and Twitter sharing. If
    you want to add your custom metatags to a page, you can override `_default_website_meta()`
    after adding the SEO mixin. For example, if we want to use the hostel cover as
    the social sharing image, then we can use the following code in our `hostel` model:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo中，您可以添加自定义元标签以用于Open Graph和Twitter分享。如果您想将自定义元标签添加到页面中，您可以在添加SEO混合后覆盖`_default_website_meta()`方法。例如，如果我们想将宿舍封面用作社交分享图片，那么我们可以在我们的`hostel`模型中使用以下代码：
- en: '[PRE48]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: After this, the hostel cover will be displayed on social media when you share
    the hostel’s URL. Additionally, you can also set the page title and the description
    from the same method.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Managing sitemaps for the website
  id: totrans-336
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A website’s sitemaps are crucial for any website. The search engine will use
    website sitemaps to index the pages of a website. In this recipe, we will add
    hostel details pages to the sitemap.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-338
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
    If you want to check the current sitemap in Odoo, open `<your_odoo_server_url>/sitemap.xml`
    in your browser.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to modify a hostel’s page to `sitemap.xml`:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'Import the methods in `main.py`, as follows:'
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-343
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Add the `sitemap_hostels` method to `main.py`, as follows:'
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-345
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add the `sitemap_hostels` function reference in a hostel’s detail routes as
    follows:'
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-347
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Update the module to apply the changes. A `sitemap.xml` file is generated and
    stored in `Attachments`. Then, it is regenerated every few hours. To see our changes,
    you will need to remove the sitemap file from the attachment. To do this, visit
    `/sitemap.xml` URL in a browser, and you will see the hostel’s pages in the sitemap.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we imported a few required functions. `slug` is used to generate
    a clean, user-friendly URL, based on a record name. `sitemap_qs2dom` is used to
    generate a domain based on route and query strings.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we created a Python generator function,`sitemap_hostels()`. This
    function will be called whenever a sitemap is generated. During the call, it will
    receive three arguments—the `env` Odoo environment, the `rule` route rule, and
    the `qs` query string. In the function, we generated a domain with `sitemap_qs2dom`.
    Then, we used the generated domain to search the hostel records, which are used
    to generate the location through the `slug()` method. With `slug`, you will get
    a user-friendly URL, such as `/hostels/cambridge-1`. If you do not want to list
    all the hostels on the sitemap, you can just use a valid domain in the search
    to filter the hostel.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we passed the `sitemap_hostels()` function reference to the route
    with a `sitemap` keyword.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-353
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this recipe, we have seen how you can use a custom method to generate a
    URL for a sitemap. But if you do not want to filter hostels and you want to list
    all hostels in a sitemap, then instead of the function reference, just pass `True`
    as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'In the same way, if you don’t want any URL to display in the sitemap, just
    pass `False` as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Getting a visitor’s country information
  id: totrans-358
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Odoo CMS has built-in support for **GeoIP**. In a live environment, you
    can track a visitor’s country based on the IP address. In this recipe, we will
    get the country of the visitor based on the visitor’s IP address.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, we will be using the `my_hostel` module from the previous
    recipe. In this recipe, we will hide some hostels on the web page based on the
    visitor’s country. You will need to download the GeoIP database for this recipe.
    After that, you will need to pass the database location from the `cli` option,
    like this:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Or, follow the steps from this document sheet:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.odoo.com/documentation/17.0/applications/websites/website/configuration/on-premise_geo-ip-installation.html](https://www.odoo.com/documentation/17.0/applications/websites/website/configuration/on-premise_geo-ip-installation.html).'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to locate the GeoIP database in `/usr/share/GeoIP/`, use the
    `--geoip-city-db` and `--geoip-country-db` options of the Odoo command-line interface.
    These options take the absolute path to the GeoIP database file and use it as
    the GeoIP database.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-366
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to restrict books based on country:'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `restrict_country_ids` `Many2many` field in the `hostel.hostel` model,
    as follows:'
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-369
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Add a `restrict_country_ids` field in the form view of the `hostel.hostel`
    model, as follows:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Update the `/hostel` controller to restrict books based on country, as follows:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Warning
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: This recipe does not work with the local server. It will require a hosted server
    because, with the local machine, you will get the local IP, which is not related
    to any country. You will also need to configure NGINX properly.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we added a new `restricted_country_ids` `many2many`-type field
    in the `hostel.hostel` model. We will hide the book if the website visitor is
    from a restricted country.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we just added a `restricted_country_ids` field in the book’s form
    view. If GeoIP and NGINX are configured properly, Odoo will add GeoIP information
    to `request.geoip`, and then you can get the country code from that.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we fetched the country code from GeoIP, followed by the recordset
    of the country, based on `country_code`. After getting a visitor’s country information,
    we filtered hostels with domains based on a restricted country.
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t have a real server and you want to test this anyway, you can add
    a default country code in the controller, like this: `country_code = request.geoip
    and request.geoip.get(''country_code'')` `or ''IN''`.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: The GeoIP database gets updated from time to time, so you will need to update
    your copy to get up-to-date country information.
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: Tracking a marketing campaign
  id: totrans-383
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any business or service, it is really important to be familiar with the **return
    on investment** (**ROI**). The ROI is used to evaluate the effectiveness of an
    investment. Investments in ads can be tracked through UTM codes. A UTM code is
    a small string that you can add to a URL. This UTM code will help you to track
    campaigns, sources, and media.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_library` module. Odoo has built-in
    support for UTMs. With our hostel application, we don’t have any practical cases
    where UTMs can be used. However, in this recipe, we will add a UTM in the issues
    generated by `/books/submit_issues` in `my_library`.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-387
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to link UTMs in a book issue generated from our web page
    to the `/``books/submit_issues` URL:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `utm` module in the `depends` section of `manifest.py`, as follows:'
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'class LibraryBookIssues(models.Model):'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _name = 'book.issue'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: _inherit = ['utm.mixin']
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: book_id = fields.Many2one('library.book', required=True)
  id: totrans-394
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: submitted_by = fields.Many2one('res.users')
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: issue_description = fields.Text()
  id: totrans-396
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-397
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Add a `campaign_id` field in the tree view of the `book_issue_ids` field, as
    follows:'
  id: totrans-398
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-399
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Update the module to apply the changes. To test the UTM, you need to perform
    the following steps:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: In Odoo, a UTM is processed based on cookies, and some browsers do not support
    cookies in the localhost, so if you are testing it with the localhost, access
    the instance with `http://127.0.0.1:8069`.
  id: totrans-401
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By default, UTM tracking is blocked for salespeople. Consequently, to test the
    UTM feature, you need to log in with a portal user.
  id: totrans-402
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, open the `http://127.0.0.1:8069/books/submit_issues?utm_campaign=sale`
    URL.
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Submit the book issue and check the book issue in the backend. This will display
    the campaign in the book’s form view.
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-405
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the first step, we inherited `utm.mixin` in the `book.issue` model. This
    will add the following fields to the `book.issue` model:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '`campaign_id`: The `Many2one` field with the `utm.campaign` model. This is
    used to track different campaigns, such as the *Summer* and *Christmas* *Special*
    campaigns.'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`source_id`: The `Many2one` field with the `utm.source` model. This is used
    to track different sources, such as search engines and other domains.'
  id: totrans-408
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`medium_id`: The `Many2one` field with the `utm.medium` model. This is used
    to track different media, such as postcards, emails, and banner ads.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To track the campaign, medium, and source, you need to share a URL in the marketing
    media like this: `your_url?utm_campaign=campaign_name&utm_medium=medium_name&utm_source=source_name`.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: If a visitor visits your website from any marketing media, then the `campaign_id`,
    `source_id`, and `medium_id` fields are automatically filled when records are
    created on the website page.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we just tracked `campaign_id`, but you can also add `source_id`
    and `medium_id`.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: In our test example, we have used `campaign_id=sale`. Now, `sale` is the name
    of the record in the `utm.campaign` model. By default, the `utm` module adds a
    few records of the campaign, medium, and source. The `sale` record is one of them.
    If you want to create a new campaign, medium, and source, you can do this by visiting
    the `Link Tracker > UTMs` menu in developer mode.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Managing multiple websites
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo has built-in support for multiple websites. This means that the same Odoo
    instance can be run on multiple domains as well as when displaying different records.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-417
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
    In this recipe, we will hide hostels based on the website.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-419
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to make the online website multi-website compatible:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `website.multi.mixin` in the `hostel.hostel` model, as follows:'
  id: totrans-421
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-422
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Add `website_id` in the hostel form view, as follows:'
  id: totrans-423
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-424
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'Modify the domain in the `/hostels` controller, as follows:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-426
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Import `werkzeug` and modify a hostel details controller to restrict hostel
    access from another website, as follows:'
  id: totrans-427
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-428
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Update the module to apply the changes. To test this module, set up different
    websites in some hostels. Now, open the `/hostels` URL and check the list of books.
    After this, change the website and check the list of books. For testing, you can
    change the website from the website switcher drop-down menu. Refer to the following
    screenshot to do that:'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 14.5 – Website switcher](img/B20997_14_5.jpg)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
- en: Figure 14.5 – Website switcher
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: You can also try to access the book details directly from the URL, such as for
    `/hostels/1`. If a hostel is not from that website, it will show as `404`.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-433
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we added `website.multi.mixin`. This mixin adds a basic utility
    to handle multiple websites in the model. This mixin adds the `website_id` field
    in the model. This field is used to determine which website a record is meant
    for.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we added the `website_id` field in the form view of the hostel
    so that the hostels would be filtered based on the website.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we modified the domain used to find a list of hostels. `request.website.website_domain()`
    will return the domain that filters out hostels that are not from the website.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: Notice that there are records that do not have any `website_id` field set. Such
    records will be displayed on all websites. This means that if you don’t have a
    `website_id` field on a particular hostel, then that hostel will be displayed
    on all websites.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, we added the domain in the web search, as follows:'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we restricted book access. If the book is not meant for the current
    website, then we will raise a `Not found` error. The `can_access_from_current_website()`
    method will return a `True` value if a hostel record is meant for the currently
    active website and `False` if a hostel record is meant for another website.
  id: totrans-440
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If you noticed, we added `**post` in both controllers. This is because, without
    it, `**post` `/hostels` and `/hostels/<model("hostel.hostel"):hostel>` will not
    accept a query parameter. They will also generate an error while switching the
    website from the website switcher, so we added it. Normally, it is a good practice
    to add `**post` in every controller so that they can handle query parameters.
  id: totrans-441
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redirecting old URLs
  id: totrans-442
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you move to the Odoo website from an existing system or website, you must
    redirect your old URLs to new URLs. With proper redirection, all of your SEO rankings
    will be moved to new pages. In this recipe, we will see how to redirect old URLs
    to new URLs in Odoo.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-444
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostels` module from the previous
    recipe. For this recipe, we are assuming that you used to have a website and have
    just moved to Odoo.
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-446
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Imagine that, in your old website, books were listed at the `/my-hostels` URL;
    as you know, the `my_hostel` module lists hostels on the `/hostels` URL as well.
    So, we will now add a `/my-hostels` URL to the new `/hostels` URL. Perform the
    following steps to add the redirection rule:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: Activate developer mode.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Website** | **Configuration** | **Redirects**.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on **New** to add a new rule.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Enter values in the form, as shown in the following screenshot. In `/my-hostels`,
    and in `/hostels`.
  id: totrans-451
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the **Action** value of **301** **Moved permanently**.
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Save the record. Once you have filled in the data, your form will look like
    this:'
  id: totrans-453
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![     Figure 14.6 – Redirection rule](img/B20997_14_6.jpg)'
  id: totrans-454
  prefs: []
  type: TYPE_IMG
- en: Figure 14.6 – Redirection rule
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: Once you have added this rule, open the `/my-hostels` page. You will notice
    that the page gets redirected automatically to the `/``hostels` page.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-457
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Page redirection is simple; it’s just part of the HTTP protocol. In our example,
    we moved `/my-hostels` to `/hostels`. We used a **301 Moved permanently** redirect
    for redirection. Here are all the redirection options that are available in Odoo:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: '`404 Not Found` response for a page. Note that Odoo will display the default
    `404` page for such requests.'
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**301 Moved permanently**: This option redirects old URLs to new ones permanently.
    This type of redirection will move SEO rankings to a new page.'
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**302 Moved temporarily**: This option redirects old URLs to new ones temporarily.
    Use this option when you need to redirect a URL for a limited time. This type
    of redirection will not move SEO rankings to a new page.'
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**308 Redirect/Rewrite**: An interesting option – with this, you will be able
    to change/rewrite existing Odoo URLs to new ones.'
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this recipe, this would allow us to rewrite the old `/my-hostels` URL to
    the new `/hostels` URL. Hence, we would have no need to redirect the old URL by
    using the `/my-hostels`.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: There are a few more fields on the redirection rule form. One of them is the
    **Active** field, which can used if you want to enable/disable rules from time
    to time. A second important field is **Website**. The **Website** field is used
    when you are using the multi-website feature and you want to limit the redirection
    rule to one website only. By default, however, the rule will be applied to all
    websites.
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: Publish management for website-related records
  id: totrans-465
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In business flows, there are some cases where you need to allow or revoke page
    access to public users. One such case is e-commerce products, where you need to
    publish or unpublish products based on availability. In this recipe, we will see
    how you can publish and unpublish hostel records for public users.
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-467
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: 'If you notice, we have put `auth=''user''` on the `/hostels` and `/hostels/<model``     ("hostel.hostel"):hostel>` routes. Please change this to `auth=''public''` to
    make those URLs accessible to public users.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-471
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Perform the following steps to enable a publish/unpublish option for hostel
    details pages:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `website.published.mixin` to the `hostel.hostel` model like this:'
  id: totrans-473
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-474
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Add a new file to `my_hostel/security/rules.xml` and add a record rule for
    hostels like this (make sure you register the file in the manifest):'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'Update the `my_hostel` module to apply the changes. Now, you can publish and
    unpublish hostel pages:'
  id: totrans-477
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 14.7 – The Publish/Unpublish toggle](img/B20997_14_7.jpg)'
  id: totrans-478
  prefs: []
  type: TYPE_IMG
- en: Figure 14.7 – The Publish/Unpublish toggle
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: To publish/unpublish hostels, you can use the toggle shown in the preceding
    screenshot of a hostel details page.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo provides a ready-made mixin to handle publish management for your records.
    It does most of the job for you. All you need to do is add `website.published.mixin`
    to your model. In *step 1*, we added `website.published.mixin` to our `hostel`
    model. This will add all the fields and methods required to publish and unpublish
    hostels. Once you add this mixin to the book model, you will be able to see the
    button to toggle the state on the book details page, as shown in the preceding
    screenshot.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: We are sending a hostel record as `main_object` from our hostel details route.
    Without this, you will not be able to see the publish/unpublish button on the
    hostel details page.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: Adding the mixin will show the publish/unpublish button on the hostel’s details
    page, but it will not restrict a public user from accessing it. To do this, we
    need to add a record rule. In *step 2*, we added a record rule to restrict access
    to unpublished hostels. If you want to learn more about record rules, refer to
    [*Chapter 10*](B20997_10.xhtml#_idTextAnchor549), *Security Access*.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  id: totrans-486
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `publish` mixin will enable the publish/unpublish button on the website.
    But if you want to show a redirect button on the backend form view, the publish
    mixin can provide a means for that too. The following steps show how to add a
    redirect button to a hostel’s form view:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a method in the `hostel.hostel` model to compute the URL for a hostel:'
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-489
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Add a button in the form view to redirect to the website:'
  id: totrans-490
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-491
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Once you add the button, you will be able to see the button in the hostel’s
    form view, and by clicking on it, you will be redirected to the hostel’s details
    page.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
