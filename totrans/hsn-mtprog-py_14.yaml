- en: '*Chapter 11*: Creating Dynamic Objects'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at the concept of dynamic objects in Python 3
    and the process that can be followed to create any dynamic Python objects including
    classes, instances of classes, methods, and attributes.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, dynamic objects are objects that can be created at runtime
    or execution time rather than while coding, provided certain conditions are met.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will look at how to create classes, class instances,
    functions, methods, and attributes dynamically using our core example of *ABC
    Megamart*.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Why should we understand the creation of dynamic objects? In scenarios where
    we want to build applications that can generate code at runtime, the basic building
    blocks for Python code are the objects that are created at runtime. Dynamic creation
    of objects gives the flexibility and choice of creating an object only when it
    is required. Any object defined will occupy a certain amount of memory. When an
    object created during the coding time is not required by the rest of the code
    or application, it occupies memory that can otherwise be used more efficiently.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be taking a look at the following main topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: Exploring type for dynamic objects
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple instances of a class dynamically
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dynamic classes
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dynamic attributes and methods
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have an understanding of how Python objects
    can be created at runtime and how they can be implemented in various applications.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code examples shared in this chapter are available on GitHub under the code
    for this chapter at [https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter11](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter11).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Exploring type for dynamic objects
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let’s explore the function named `type` from the perspective
    of dynamic object creation. Why do we need to create an object dynamically? Let’s
    consider the scenarios where we want to change the attributes of the class only
    for specific instances/objects of the class and not for the original class itself.
    In such scenarios, we can create dynamic objects for the class and define the
    attributes of the class dynamically within the specific dynamic object and not
    for the whole class itself.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: In multiple chapters throughout this book, we have looked at the various uses
    of the `type` function. In this chapter, we will look at how to use `type` to
    dynamically create Python objects.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the graphical representation of the signature of the `type` function
    in Python in the following screenshot:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Signature of type ](img/Figure_11.1_B13426.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Signature of type
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'The type function accepts a self-object followed by a tuple and a dictionary
    of arguments as input. When we provide an object as input to the `type` function,
    it returns the type of the object as in the following example:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The output for the type of object is `type` itself:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: From *Figure 11.1*, we can also see that the other variation of `type` accepts
    an object followed by `bases` and `dict`. The argument value for `bases` denotes
    the base classes and the argument value for `dict` denotes various attributes
    of the class.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'To examine the `type` function for creating dynamic objects, let’s define a
    class named `Branch`:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Let’s further create an object dynamically using the `type` function in the
    following code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In the preceding code, the `branchAlbany` variable is the object to be defined
    dynamically, the first argument is the class name for which an object needs to
    be created, the second argument is the tuple of base classes for the class argument,
    and the third argument is the list of attributes or methods to be added to the
    object.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'We can look at the definition of the `branchAlbany` object in the following
    code and output:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The following screenshot is a representation of the attributes added to `branchAlbany`
    once the preceding code is executed:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Attributes of branchAlbany ](img/Figure_11.2_B13426.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Attributes of branchAlbany
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'The method resolution order of the dynamic class instance is the same as the
    `Branch` class:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'All the dynamic attributes added to the class instance are now part of the
    `branchAlbany` class instance:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '[PRE20]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'To understand this further, let’s look at the attributes of `branchAlbany`
    and compare them to the attributes of the `Branch` class for which the `branchAlbany`
    instance is created. A graphical representation of the comparison is shown in
    *Figure 11.3*:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Attributes of Branch versus branchAlbany ](img/Figure_11.3_B13426.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Attributes of Branch versus branchAlbany
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: The preceding figure clarifies that the attributes defined as part of the dynamic
    object creation for the `Branch` class did not get included in the `Branch` class
    itself. The definition of the `Branch` class remains intact and only the definition
    of the dynamic object changed in this scenario.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore further, we can create another dynamic instance of the `Branch`
    class with a different set of attributes:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'The `branchNYC` instance now has its own set of dynamic attributes that are
    not part of either the `Branch` class or the `branchAlbany` instance. A comparison
    of the three is in *Figure 11.4*:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Attributes of Branch, branchAlbany, and branchNYC ](img/Figure_11.4_B13426.jpg)'
  id: totrans-64
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Attributes of Branch, branchAlbany, and branchNYC
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding, let’s look further at creating multiple instances or
    objects of a class dynamically.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple instances of a class dynamically
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let’s look at creating more than one instance of a class dynamically.
    For this example, we will be making use of a built-in Python function named `globals`
    to create dynamic object names, along with the `type` function that we use to
    create dynamic objects. Refer to the following steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a new class named `Product` without any attributes or methods.
    Instead of defining the attributes within the class and creating an instance of
    the class, let’s create multiple instances with their own attributes:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Next, we will be creating three dictionary items in a list named `details`:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'These dictionary items are going to be provided as attributes for multiple
    instances of objects that we are going to create using `globals` and `type`:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding code, we have created three objects `product1`, `product2`,
    and `product3` with variables defined in the `details` list. Each object is created
    dynamically and will have its own set of attributes.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Product` class has its default set of attributes since we did not define
    any custom attributes in the class. These are presented in *Figure 11.5*:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Attributes of Product ](img/Figure_11.5_B13426.jpg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Attributes of Product
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'The attributes of the three objects we created in this example have their own
    set of attributes defined dynamically. The dynamic attributes of the dynamic objects
    are in the following figure:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Attributes of product1, product2, and product3 ](img/Figure_11.6_B13426.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Attributes of product1, product2, and product3
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to create multiple instances of a class dynamically
    with each instance having its own dynamic set of attributes. With this understanding,
    let’s further look at creating multiple classes dynamically.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic classes
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let’s look at how to create classes dynamically with different
    names and different attributes by making use of the built-in functions of `type`
    and `globals`. To explore this concept further, we will first create one dynamic
    class using the `type` function:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: '[PRE31]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: In the preceding code, we created a class named `Product` and provided the class
    name, followed by the base classes and their corresponding attributes.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s test the created class with the following code:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-95
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: With this understanding, let’s now take it further and create multiple dynamic
    classes.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple dynamic classes
  id: totrans-98
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will be creating multiple dynamic classes using `type`
    and `globals`:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s define three functions to be added as dynamic methods while creating
    multiple dynamic classes as follows:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Next, let’s create a dictionary of attributes:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'In the next step, we will be creating multiple classes dynamically using `type`
    and `globals` in a loop:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The preceding code creates three classes named `productcls1`, `productcls2`,
    and `productcls3`, and also creates dynamic variables and methods that can be
    further reviewed for their usage in the following code and their corresponding
    output:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: In the preceding code, we have successfully executed the methods created within
    the dynamic classes.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to create multiple classes dynamically.
    With this understanding, let’s proceed further by creating dynamic methods in
    classes.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic attributes and methods
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let’s explore how to create dynamic methods within classes.
    A dynamic method is a method created for a class during runtime, unlike the regular
    class methods that we create while coding within the class definition itself.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic methods are created to avoid modifying the structure or the original
    class definition once it is defined. Instead of modifying the class definition,
    we can define and call a runtime template method that will in turn create a dynamic
    method for the class.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating a simple class definition for managing the coupons
    of *ABC Megamart* named `SimpleCoupon`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: '[PRE45]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: '[PRE46]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: We did not define any attributes or methods for this class, but we will define
    them more clearly in the following sections.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: Defining attributes dynamically
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now define a set of coupon attributes for the `SimpleCoupon` class during
    runtime using Python’s built-in `setattr` function. This function accepts a Python
    object, the name of the attribute, and its corresponding value:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'In the preceding code, we have provided the class name `SimpleCoupon` as the
    input object, followed by the attribute name as `couponDetails`, and its corresponding
    values as three lists of product details, one for each type of coupon: `Condiments`,
    `Snacks`, and `Desserts`.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have dynamically created the attribute, let’s check whether it
    has been added to the `SimpleCoupon` class and is available for use by looking
    at the list of attributes and methods available in the class as represented in
    *Figure 11.7*:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – couponDetails added to SimpleCoupon ](img/Figure_11.7_B13426.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – couponDetails added to SimpleCoupon
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding, let’s further dynamically create methods in the `SimpleCoupon`
    class.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: Defining methods dynamically
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, let’s create a new function that acts as a template function
    to dynamically generate methods within the `SimpleCoupon` class. We will now create
    a function named `createCoupon` that accepts a class object, method name, and
    the coupon details as input.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the function definition, let’s also define a `generateCoupon` function
    that will be generated as a dynamic method in the class:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: In the preceding code, we call the `setattr` function to define the method dynamically
    in the class object provided as input to `setattr`.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, let’s generate three `generateCoupon` methods dynamically
    using the same method definition but with three different names and test them
    with three different sets of attributes.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，让我们使用相同的方法定义动态地生成三个`generateCoupon`方法，分别命名为三个不同的名称，并使用三组不同的属性进行测试。
- en: '[PRE70]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'Now, the `SimpleCoupon` class has three different methods added to it with
    the names `generateCondimentsCoupon`, `generateSnacksCoupon`, and `generateDessertsCoupon`
    respectively. The dynamics methods added to the `SimpleCoupon` class are shown
    in the following figure:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`SimpleCoupon`类已添加了三个不同的方法，分别命名为`generateCondimentsCoupon`、`generateSnacksCoupon`和`generateDessertsCoupon`。添加到`SimpleCoupon`类的动态方法如下所示：
- en: '![Figure 11.8 – Dynamic methods added to SimpleCoupon ](img/Figure_11.8_B13426.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图11.8 – 添加到SimpleCoupon的动态方法](img/Figure_11.8_B13426.jpg)'
- en: Figure 11.8 – Dynamic methods added to SimpleCoupon
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.8 – 添加到SimpleCoupon的动态方法
- en: 'Let’s run each method by calling them from the `SimpleCoupon` class. The `generateCondimentsCoupon`
    method is called in the following code:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从`SimpleCoupon`类中调用它们来运行每个方法。以下代码中调用了`generateCondimentsCoupon`方法：
- en: '[PRE72]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'The output is generated as follows:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 输出生成如下：
- en: '[PRE73]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: '[PRE74]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: '[PRE75]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: '[PRE76]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: '[PRE77]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The output for this is as follows:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 此输出的结果如下：
- en: '[PRE84]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: '[PRE85]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: '[PRE86]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: '[PRE87]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: '[PRE88]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: '[PRE89]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: '[PRE90]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: '[PRE91]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The `generateDessertsCoupon` method is called in the following code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码中调用了`generateDessertsCoupon`方法：
- en: '[PRE93]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'The output is generated as follows:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 输出生成如下：
- en: '[PRE94]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: In this section, we have understood the concept of generating methods dynamically
    in a Python class along with examples. This concept will help while designing
    applications with automated code generation capabilities.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们已经理解了在Python类中动态生成方法的概念，并附带了示例。这个概念在设计和具有自动化代码生成功能的应用程序时将有所帮助。
- en: Summary
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned the concept of dynamic objects by exploring
    methods of creating various dynamic objects in Python 3\. We also covered the
    concepts of creating multiple instances of a class dynamically. We looked at the
    concept of creating dynamic classes. We also looked at the concepts of creating
    attributes and methods dynamically within classes.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们通过探索Python 3中创建各种动态对象的方法，学习了动态对象的概念。我们还涵盖了动态创建类多个实例的概念。我们探讨了创建动态类的概念。此外，我们还研究了在类中动态创建属性和方法的概念。
- en: Similar to other chapters covered in this book, while this chapter explained
    dynamic objects, it also provided some focus on metaprogramming and its impact
    on Python code.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中其他章节类似，虽然本章解释了动态对象的概念，但也提供了一些关于元编程及其对Python代码影响的重点。
- en: In the next chapter, we will be looking at the concept of design patterns with
    some other interesting examples.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过一些有趣的示例来探讨设计模式的概念。
