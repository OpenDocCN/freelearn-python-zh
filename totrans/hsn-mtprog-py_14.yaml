- en: '*Chapter 11*: Creating Dynamic Objects'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will look at the concept of dynamic objects in Python 3
    and the process that can be followed to create any dynamic Python objects including
    classes, instances of classes, methods, and attributes.
  prefs: []
  type: TYPE_NORMAL
- en: As the name suggests, dynamic objects are objects that can be created at runtime
    or execution time rather than while coding, provided certain conditions are met.
  prefs: []
  type: TYPE_NORMAL
- en: Throughout this chapter, we will look at how to create classes, class instances,
    functions, methods, and attributes dynamically using our core example of *ABC
    Megamart*.
  prefs: []
  type: TYPE_NORMAL
- en: Why should we understand the creation of dynamic objects? In scenarios where
    we want to build applications that can generate code at runtime, the basic building
    blocks for Python code are the objects that are created at runtime. Dynamic creation
    of objects gives the flexibility and choice of creating an object only when it
    is required. Any object defined will occupy a certain amount of memory. When an
    object created during the coding time is not required by the rest of the code
    or application, it occupies memory that can otherwise be used more efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be taking a look at the following main topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring type for dynamic objects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating multiple instances of a class dynamically
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dynamic classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating dynamic attributes and methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you should have an understanding of how Python objects
    can be created at runtime and how they can be implemented in various applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code examples shared in this chapter are available on GitHub under the code
    for this chapter at [https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter11](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter11).
  prefs: []
  type: TYPE_NORMAL
- en: Exploring type for dynamic objects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let’s explore the function named `type` from the perspective
    of dynamic object creation. Why do we need to create an object dynamically? Let’s
    consider the scenarios where we want to change the attributes of the class only
    for specific instances/objects of the class and not for the original class itself.
    In such scenarios, we can create dynamic objects for the class and define the
    attributes of the class dynamically within the specific dynamic object and not
    for the whole class itself.
  prefs: []
  type: TYPE_NORMAL
- en: In multiple chapters throughout this book, we have looked at the various uses
    of the `type` function. In this chapter, we will look at how to use `type` to
    dynamically create Python objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s look at the graphical representation of the signature of the `type` function
    in Python in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Signature of type ](img/Figure_11.1_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Signature of type
  prefs: []
  type: TYPE_NORMAL
- en: 'The type function accepts a self-object followed by a tuple and a dictionary
    of arguments as input. When we provide an object as input to the `type` function,
    it returns the type of the object as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for the type of object is `type` itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: From *Figure 11.1*, we can also see that the other variation of `type` accepts
    an object followed by `bases` and `dict`. The argument value for `bases` denotes
    the base classes and the argument value for `dict` denotes various attributes
    of the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'To examine the `type` function for creating dynamic objects, let’s define a
    class named `Branch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s further create an object dynamically using the `type` function in the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, the `branchAlbany` variable is the object to be defined
    dynamically, the first argument is the class name for which an object needs to
    be created, the second argument is the tuple of base classes for the class argument,
    and the third argument is the list of attributes or methods to be added to the
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can look at the definition of the `branchAlbany` object in the following
    code and output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The following screenshot is a representation of the attributes added to `branchAlbany`
    once the preceding code is executed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Attributes of branchAlbany ](img/Figure_11.2_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Attributes of branchAlbany
  prefs: []
  type: TYPE_NORMAL
- en: 'The method resolution order of the dynamic class instance is the same as the
    `Branch` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'All the dynamic attributes added to the class instance are now part of the
    `branchAlbany` class instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'To understand this further, let’s look at the attributes of `branchAlbany`
    and compare them to the attributes of the `Branch` class for which the `branchAlbany`
    instance is created. A graphical representation of the comparison is shown in
    *Figure 11.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Attributes of Branch versus branchAlbany ](img/Figure_11.3_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Attributes of Branch versus branchAlbany
  prefs: []
  type: TYPE_NORMAL
- en: The preceding figure clarifies that the attributes defined as part of the dynamic
    object creation for the `Branch` class did not get included in the `Branch` class
    itself. The definition of the `Branch` class remains intact and only the definition
    of the dynamic object changed in this scenario.
  prefs: []
  type: TYPE_NORMAL
- en: 'To explore further, we can create another dynamic instance of the `Branch`
    class with a different set of attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The `branchNYC` instance now has its own set of dynamic attributes that are
    not part of either the `Branch` class or the `branchAlbany` instance. A comparison
    of the three is in *Figure 11.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Attributes of Branch, branchAlbany, and branchNYC ](img/Figure_11.4_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – Attributes of Branch, branchAlbany, and branchNYC
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding, let’s look further at creating multiple instances or
    objects of a class dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple instances of a class dynamically
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let’s look at creating more than one instance of a class dynamically.
    For this example, we will be making use of a built-in Python function named `globals`
    to create dynamic object names, along with the `type` function that we use to
    create dynamic objects. Refer to the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create a new class named `Product` without any attributes or methods.
    Instead of defining the attributes within the class and creating an instance of
    the class, let’s create multiple instances with their own attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, we will be creating three dictionary items in a list named `details`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'These dictionary items are going to be provided as attributes for multiple
    instances of objects that we are going to create using `globals` and `type`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we have created three objects `product1`, `product2`,
    and `product3` with variables defined in the `details` list. Each object is created
    dynamically and will have its own set of attributes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `Product` class has its default set of attributes since we did not define
    any custom attributes in the class. These are presented in *Figure 11.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Attributes of Product ](img/Figure_11.5_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5 – Attributes of Product
  prefs: []
  type: TYPE_NORMAL
- en: 'The attributes of the three objects we created in this example have their own
    set of attributes defined dynamically. The dynamic attributes of the dynamic objects
    are in the following figure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Attributes of product1, product2, and product3 ](img/Figure_11.6_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Attributes of product1, product2, and product3
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we learned how to create multiple instances of a class dynamically
    with each instance having its own dynamic set of attributes. With this understanding,
    let’s further look at creating multiple classes dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic classes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, let’s look at how to create classes dynamically with different
    names and different attributes by making use of the built-in functions of `type`
    and `globals`. To explore this concept further, we will first create one dynamic
    class using the `type` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we created a class named `Product` and provided the class
    name, followed by the base classes and their corresponding attributes.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s test the created class with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: With this understanding, let’s now take it further and create multiple dynamic
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating multiple dynamic classes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this section, we will be creating multiple dynamic classes using `type`
    and `globals`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s define three functions to be added as dynamic methods while creating
    multiple dynamic classes as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, let’s create a dictionary of attributes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the next step, we will be creating multiple classes dynamically using `type`
    and `globals` in a loop:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code creates three classes named `productcls1`, `productcls2`,
    and `productcls3`, and also creates dynamic variables and methods that can be
    further reviewed for their usage in the following code and their corresponding
    output:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we have successfully executed the methods created within
    the dynamic classes.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have learned how to create multiple classes dynamically.
    With this understanding, let’s proceed further by creating dynamic methods in
    classes.
  prefs: []
  type: TYPE_NORMAL
- en: Creating dynamic attributes and methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, let’s explore how to create dynamic methods within classes.
    A dynamic method is a method created for a class during runtime, unlike the regular
    class methods that we create while coding within the class definition itself.
  prefs: []
  type: TYPE_NORMAL
- en: Dynamic methods are created to avoid modifying the structure or the original
    class definition once it is defined. Instead of modifying the class definition,
    we can define and call a runtime template method that will in turn create a dynamic
    method for the class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s start by creating a simple class definition for managing the coupons
    of *ABC Megamart* named `SimpleCoupon`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: We did not define any attributes or methods for this class, but we will define
    them more clearly in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Defining attributes dynamically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s now define a set of coupon attributes for the `SimpleCoupon` class during
    runtime using Python’s built-in `setattr` function. This function accepts a Python
    object, the name of the attribute, and its corresponding value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, we have provided the class name `SimpleCoupon` as the
    input object, followed by the attribute name as `couponDetails`, and its corresponding
    values as three lists of product details, one for each type of coupon: `Condiments`,
    `Snacks`, and `Desserts`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we have dynamically created the attribute, let’s check whether it
    has been added to the `SimpleCoupon` class and is available for use by looking
    at the list of attributes and methods available in the class as represented in
    *Figure 11.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.7 – couponDetails added to SimpleCoupon ](img/Figure_11.7_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – couponDetails added to SimpleCoupon
  prefs: []
  type: TYPE_NORMAL
- en: With this understanding, let’s further dynamically create methods in the `SimpleCoupon`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: Defining methods dynamically
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this section, let’s create a new function that acts as a template function
    to dynamically generate methods within the `SimpleCoupon` class. We will now create
    a function named `createCoupon` that accepts a class object, method name, and
    the coupon details as input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the function definition, let’s also define a `generateCoupon` function
    that will be generated as a dynamic method in the class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we call the `setattr` function to define the method dynamically
    in the class object provided as input to `setattr`.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, let’s generate three `generateCoupon` methods dynamically
    using the same method definition but with three different names and test them
    with three different sets of attributes.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, the `SimpleCoupon` class has three different methods added to it with
    the names `generateCondimentsCoupon`, `generateSnacksCoupon`, and `generateDessertsCoupon`
    respectively. The dynamics methods added to the `SimpleCoupon` class are shown
    in the following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Dynamic methods added to SimpleCoupon ](img/Figure_11.8_B13426.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Dynamic methods added to SimpleCoupon
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s run each method by calling them from the `SimpleCoupon` class. The `generateCondimentsCoupon`
    method is called in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is generated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for this is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: 'The `generateDessertsCoupon` method is called in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: 'The output is generated as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: In this section, we have understood the concept of generating methods dynamically
    in a Python class along with examples. This concept will help while designing
    applications with automated code generation capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have learned the concept of dynamic objects by exploring
    methods of creating various dynamic objects in Python 3\. We also covered the
    concepts of creating multiple instances of a class dynamically. We looked at the
    concept of creating dynamic classes. We also looked at the concepts of creating
    attributes and methods dynamically within classes.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to other chapters covered in this book, while this chapter explained
    dynamic objects, it also provided some focus on metaprogramming and its impact
    on Python code.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will be looking at the concept of design patterns with
    some other interesting examples.
  prefs: []
  type: TYPE_NORMAL
