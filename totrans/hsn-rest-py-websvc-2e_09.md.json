["```py\n    ~/HillarPythonREST2/Pyramid01  \n```", "```py\n    %USERPROFILE%\\HillarPythonREST2\\Pyramid01\n```", "```py\n    $env:userprofile\\HillarPythonREST2\\Pyramid01\n```", "```py\npython3 -m venv ~/HillarPythonREST2/Pyramid01\n```", "```py\npython -m venv %USERPROFILE%\\HillarPythonREST2\\Pyramid01\n```", "```py\npython -m venv $env:userprofile\\HillarPythonREST2\\Pyramid01 \n```", "```py\nsource ~/HillarPythonREST2/Pyramid01/bin/activate\n```", "```py\nsource ~/HillarPythonREST2/Pyramid01/bin/activate.csh  \n```", "```py\nsource ~/HillarPythonREST2/Pyramid01/bin/activate.fish  \n```", "```py\n%USERPROFILE%\\HillarPythonREST2\\Pyramid01\\Scripts\\activate.bat\n```", "```py\ncd $env:USERPROFILE\nHillarPythonREST2\\Pyramid01\\Scripts\\Activate.ps1\n```", "```py\npyramid==1.10 \ncookiecutter==1.6.0 \nhttpie==1.0.2 \n```", "```py\n    cd ~/HillarPythonREST2/Pyramid01\n```", "```py\n    cd /d %USERPROFILE%\\HillarPythonREST2\\Pyramid01\n\n```", "```py\n    cd $env:USERPROFILE\n    cd HillarPythonREST2\\Pyramid01\n```", "```py\npip install -r requirements.txt \n```", "```py\nInstalling collected packages: translationstring, plaster, PasteDeploy, plaster-pastedeploy, zope.deprecation, venusian, zope.interface, webob, hupper, pyramid, future, six, python-dateutil, arrow, MarkupSafe, jinja2, jinja2-time, click, chardet, binaryornot, poyo, urllib3, certifi, idna, requests, whichcraft, cookiecutter, Pygments, httpie\n      Running setup.py install for future ... done\n      Running setup.py install for arrow ... done\nSuccessfully installed MarkupSafe-1.1.0 PasteDeploy-1.5.2 Pygments-2.2.0 arrow-0.12.1 binaryornot-0.4.4 certifi-2018.10.15 chardet-3.0.4 click-7.0 cookiecutter-1.6.0 future-0.17.1 httpie-1.0.2 hupper-1.4 idna-2.7 jinja2-2.10 jinja2-time-0.2.0 plaster-1.0 plaster-pastedeploy-0.6 poyo-0.4.2 pyramid-1.10.1 python-dateutil-2.7.5 requests-2.20.0 six-1.11.0 translationstring-1.3 urllib3-1.24.1 venusian-1.1.0 webob-1.8.3 whichcraft-0.5.2 zope.deprecation-4.3.0 zope.interface-4.6.0\n\n```", "```py\ncookiecutter gh:Pylons/pyramid-cookiecutter-starter --checkout 1.10-branch  \n```", "```py\nfrom enum import Enum \nfrom marshmallow import Schema, fields \nfrom marshmallow_enum import EnumField \n\nclass SurfboardMetricModel: \n    def __init__(self, status, speed_in_mph, altitude_in_feet, water_temperature_in_f): \n        # We will automatically generate the new id \n        self.id = 0 \n        self.status = status \n        self.speed_in_mph = speed_in_mph \n        self.altitude_in_feet = altitude_in_feet \n        self.water_temperature_in_f = water_temperature_in_f \n```", "```py\nclass SurfboardMetricManager(): last_id = 0 def __init__(self): self.metrics = {} def insert_metric(self, metric): self.__class__.last_id += 1 metric.id = self.__class__.last_id ...\n```", "```py\nclass SurferStatus(Enum): \n    IDLE = 0 \n    PADDLING = 1 \n    RIDING = 2 \n    RIDE_FINISHED = 3 \n    WIPED_OUT = 4 \n\nclass SurfboardMetricSchema(Schema): \n    id = fields.Integer(dump_only=True) \n    status = EnumField(SurferStatus, required=True) \n    speed_in_mph = fields.Integer(required=True) \n    altitude_in_feet = fields.Integer(required=True) \n    water_temperature_in_f = fields.Integer(required=True) \n```", "```py\nfrom pyramid.config import Configurator \n\ndef main(global_config, **settings): \n    \"\"\" This function returns a Pyramid WSGI application. \n    \"\"\" \n    with Configurator(settings=settings) as config: \n        config.include('pyramid_jinja2') \n        config.include('.routes') \n        config.scan() \n    return config.make_wsgi_app() \n```", "```py\nfrom metrics.views.metrics import metric, metrics_collection \n\ndef includeme(config): \n    # Define the routes for metrics \n    config.add_route('metrics', '/metrics/') \n    config.add_route('metric', '/metrics/{id:\\d+}/')         \n    # Match the metrics views with the appropriate routes \n    config.add_view(metrics_collection,  \n        route_name='metrics',  \n        renderer='json') \n    config.add_view(metric,  \n        route_name='metric',  \n        renderer='json') \n```"]