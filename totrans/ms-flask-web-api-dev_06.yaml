- en: <st c="0">6</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Developing Computational and Scientific Applications</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="54">Computational scientists always choose easy-to-use, effective, and
    accurate GUI-based applications for their discovery, analysis, synthesis, data
    mines, and number crunches to save time and effort in arriving at some conclusions
    for their studies.</st> <st c="303">Although powerful computational tools are
    available in the market, such as Maple, Matlab, MathCAD, and Mathematica, scientists
    still prefer mechanisms that can provide them with further customizations to apply
    their desired precision, accuracy, and calibration for their mathematical and
    statistical models.</st> <st c="611">In other words, they still prefer custom-made
    applications that can fit with their laboratory setup</st> <st c="711">and parameters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="726">Since the utmost priority is to provide scientists with accurate
    results given an infinite number of data, it is always a challenge as to what
    application frameworks to use in building scalable, real-time, and fast modules
    suited to their needs.</st> <st c="973">The ultimate requirement is to create
    and run asynchronous transactions for complex numerical algorithms, which asynchronous
    Flask</st> <st c="1104">can provide.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1116">The Flask has asynchronous components that can build complex, fast,
    and real-time applications for scientists.</st> <st c="1228">Because of its flexibility,
    asynchronous features, and wide-ranging support, this framework has the complete
    building blocks that can provide scientists with their tailor-fit</st> <st c="1403">scientific
    software.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1423">This chapter will cover the following computational building blocks
    that flask[async]</st> <st c="1510">can provide:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1522">Uploading</st> **<st c="1533">Comma-Separated Values</st>** <st
    c="1555">(</st>**<st c="1557">CSV</st>**<st c="1560">) and</st> **<st c="1567">Microsoft
    Excel Spreadsheets</st>** <st c="1595">(</st>**<st c="1597">XLSX</st>**<st c="1601">)
    documents</st> <st c="1614">for computing</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1627">Implementing symbolic computation</st> <st c="1662">with visualization</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1680">Using the</st> `<st c="1691">pandas</st>` <st c="1697">module for
    data and</st> <st c="1718">graphical analysis</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1736">Creating and rendering</st> <st c="1760">LaTeX documents</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1775">Building graphical charts with</st> <st c="1807">frontend libraries</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1825">Building real-time data plots using WebSocket and</st> **<st c="1876">Server-Sent</st>**
    **<st c="1888">Events</st>** <st c="1894">(</st>**<st c="1896">SSE</st>**<st c="1899">)</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1901">Using asynchronous background tasks for</st> <st c="1941">resource-intensive
    computations</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1972">Incorporating Julia packages</st> <st c="2002">with Flask</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2012">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2035">This chapter will highlight a software prototype for an</st> *<st
    c="2092">Online Housing Pricing Prediction and Analysis</st>* <st c="2138">application
    with features expected to appear in many scientific applications.</st> <st c="2217">First,
    it has simple and formal GUIs that capture user data through forms.</st> <st c="2292">Forms
    that will ask for formulas, variable values, and constants with the capability
    to provide graphical plots, either in real-time or immediately after computations,
    are used.</st> <st c="2470">Second, it is a web application that can be accessible
    within teams or organizations.</st> <st c="2556">Finally, the application can
    run highly computational tasks asynchronously with the</st> <st c="2640">Flask
    platform.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2655">The test data used in this chapter are from</st> [<st c="2700">https://www.kaggle.com/datasets/yasserh/housing-prices-dataset</st>](https://www.kaggle.com/datasets/yasserh/housing-prices-dataset)
    <st c="2762">and</st> [<st c="2767">https://data.world/finance/international-house-price-database</st>](https://data.world/finance/international-house-price-database)<st
    c="2828">. On the other hand, this project uses the</st> `<st c="2871">Blueprint</st>`
    <st c="2880">approach for managing the modules and components.</st> <st c="2931">All
    files are available</st> <st c="2955">at</st> [<st c="2958">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch06</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch06)<st
    c="3039">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3040">Uploading CSV and XLSX documents for computing</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3087">The application</st> <st c="3103">will deal</st> <st c="3114">with
    XLSX and CSV files that contain numerical data affecting worldwide house prices,
    such as the periodic actual and</st> <st c="3232">nominal</st> **<st c="3240">House
    Price Index</st>** <st c="3257">(</st>**<st c="3259">HPI</st>**<st c="3262">)
    of each country and the nominal and actual</st> **<st c="3308">Personal Disposable
    Income</st>** <st c="3334">(</st>**<st c="3336">PDI</st>**<st c="3339">) of the</st>
    <st c="3349">customers.</st> <st c="3360">Also, some documents will show how factors
    such as the house area, furnishing status, the main road preference, and the number
    of bedrooms and bathrooms can affect the housing prices in a country.</st> <st
    c="3557">Our application will upload these documents to the server for</st> <st
    c="3619">data analysis.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3633">Flask has built-in support for a single- or multiple-file-uploading
    process through an HTML</st> `<st c="3726"><form></st>` <st c="3732">with</st>
    `<st c="3738">enctype</st>` <st c="3745">of</st> `<st c="3749">multipart/form-data</st>`<st
    c="3768">. It stores all uploaded files in the</st> `<st c="3806">request.files</st>`
    <st c="3819">dictionary as</st> `<st c="3834">FileStorage</st>` <st c="3845">instances.</st>
    `<st c="3857">FileStorage</st>` <st c="3868">is a thin wrapper class from the</st>
    `<st c="3902">werkzeug</st>` <st c="3910">module used by Flask to represent an
    incoming file.</st> <st c="3963">The following is an HTML script that uploads
    an XLSX document for data analysis</st> <st c="4043">using</st> <st c="4048">the</st>
    `<st c="4053">pandas</st>` <st c="4059">module:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4472">The following snippet shows the</st> `<st c="4505">view</st>` <st
    c="4509">function implementation that renders the given page and accepts the</st>
    <st c="4577">incoming</st> <st c="4586">XLSX document:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="5703">Like any form parameter, the view function accesses the file object
    from</st> `<st c="5777">request.files</st>` <st c="5790">through the name of the
    form field.</st> <st c="5827">The file object, wrapped in a</st> `<st c="5857">FileStorage</st>`
    <st c="5868">wrapper, provides</st> <st c="5887">the</st> <st c="5890">following
    attributes:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="5912">filename</st>`<st c="5921">: This provides the raw filename of
    the</st> <st c="5962">file object.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="5974">stream</st>`<st c="5981">: This provides the input stream object
    that emits Input/Output methods such as</st> `<st c="6062">read()</st>`<st c="6068">,</st>
    `<st c="6070">write()</st>`<st c="6077">,</st> `<st c="6079">readline()</st>`<st
    c="6089">,</st> `<st c="6091">writelines()</st>`<st c="6103">,</st> <st c="6105">and</st>
    `<st c="6109">seek()</st>`<st c="6115">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="6116">headers</st>`<st c="6124">: This contains the fileâ€™s</st> <st
    c="6152">header information.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="6171">content-length</st>`<st c="6186">: This pertains to the content-length
    header of</st> <st c="6235">the file.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="6244">content-type</st>`<st c="6257">: This pertains to the content-type
    header of</st> <st c="6304">the file.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6313">It also contains the following methods that can manage the file</st>
    <st c="6378">at runtime:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="6389">save(destination)</st>`<st c="6407">: This places the file in</st>
    <st c="6434">a destination.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="6448">close()</st>`<st c="6456">: This closes the file,</st> <st c="6481">if
    necessary.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6494">Before accessing the file for reading, writing, transformation,
    or saving, the view function must apply validation and restriction to the file
    object received.</st> <st c="6655">Here are the following areas of concern where
    to impose</st> <st c="6711">red flags:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6721">The existence of the actual</st> <st c="6750">uploaded file</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6763">A</st> <st c="6766">sanitized filename</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6784">The accepted valid extension of</st> <st c="6817">the file</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6825">The accepted</st> <st c="6839">file size</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6848">The given</st> `<st c="6859">show_analysis()</st>` <st c="6874">view
    function raises the following custom exception classes when it encounters a problem
    on the preceding</st> <st c="6981">red flags:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="6991">NoneFilenameException</st>`<st c="7013">: This is raised when
    there is no filename in</st> <st c="7060">the request.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="7072">InvalidTypeException</st>`<st c="7093">: This is raised when
    the sanitized filename gives an</st> <st c="7148">empty value.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="7160">InvalidTypeException</st>`<st c="7181">: This is raised when
    the uploaded file has an extension not supported by</st> <st c="7256">the application.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="7272">Also, part of the concern is to sanitize the filename of the multipart
    object before utilizing it for any file transactions.</st> <st c="7398">The immediate
    use of the raw</st> `<st c="7427">filename</st>` <st c="7435">attribute of the</st>
    `<st c="7453">FileStorage</st>` <st c="7464">instance can expose the application
    to several vulnerabilities because</st> `<st c="7536">filename</st>` <st c="7544">can
    have malware-related symbols, some special characters that are suspicious, and
    characters denoting the file path, such as</st> `<st c="7671">../../</st>`<st
    c="7677">, which can cause trouble with the</st> `<st c="7712">save()</st>` <st
    c="7718">method.</st> <st c="7727">To perform filename sanitation, use the</st>
    `<st c="7767">secure_filename()</st>` <st c="7784">utility method of the</st>
    `<st c="7807">werkzeug.utils</st>` <st c="7821">module.</st> <st c="7830">On the
    other hand, some of our applicationâ€™s view functions save their uploaded files
    inside our projectâ€™s folder, but storing them outside the project directory is
    still the</st> <st c="8005">best practice.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8019">Lastly, always enclose</st> <st c="8043">the</st> <st c="8046">entire
    file transactions of the view function with the</st> `<st c="8102">try-except</st>`
    <st c="8112">clause and raise the necessary exception classes to log all the underlying
    problems that will arise at runtime.</st> <st c="8225">Now, let us discuss the
    process after the file uploading with the</st> `<st c="8291">pandas</st>` <st
    c="8297">module.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8305">Using the pandas module for data and graphical analysis</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="8361">The</st> `<st c="8366">pandas</st>` <st c="8372">module is a</st>
    <st c="8384">popular Python library for data analysis because of its easy-to-apply
    utility functions and a high-performance tabular data structure called</st> `<st
    c="8583">numpy</st>` <st c="8588">module, a low-level library that supports multi-dimensional
    array objects called</st> `<st c="8670">ndarray</st>` <st c="8677">and its mathematical
    operations, and</st> `<st c="8715">matplotlib</st>`<st c="8725">, a library for
    visualizations.</st> <st c="8757">So, install these two</st> <st c="8779">modules
    first:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8822">Then, install the</st> `<st c="8841">pandas</st>` <st c="8847">module:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8874">Since our data will be coming from XLSX sheets, install the</st>
    `<st c="8935">openpyxl</st>` <st c="8943">dependency module of</st> `<st c="8965">pandas</st>`
    <st c="8971">that deals with reading and writing</st> <st c="9008">XLSX documents:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9044">After installing all the dependency modules, we can start creating
    the</st> `<st c="9116">DataFrame</st>` <st c="9126">object.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9133">Utilizing the DataFrame</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9157">To read an</st> <st c="9168">XLSX document, the</st> `<st c="9188">pandas</st>`
    <st c="9194">module</st> <st c="9201">has a</st> `<st c="9208">read_excel()</st>`
    <st c="9220">method with parameters such as</st> `<st c="9252">usecols</st>`<st
    c="9259">, which indicates the columns or range of columns to include,</st> `<st
    c="9321">skiprows</st>`<st c="9329">, which selects the rows to skip starting
    from the column row, and</st> `<st c="9396">sheet_name</st>`<st c="9406">, which
    chooses the sheet to read starting from sheet</st> `<st c="9460">0</st>`<st c="9461">.
    The following from the previous</st> `<st c="9495">show_analysis()</st>` <st c="9510">view
    depicts the data retrieval from sheet</st> `<st c="9554">2</st>` <st c="9555">of
    the workbook, excluding</st> <st c="9583">row</st> `<st c="9587">1</st>`<st c="9588">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="9653">This result will be similar to the following snapshot from a</st>
    <st c="9715">sample</st> `<st c="9722">uploaded_file</st>`<st c="9735">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 â€“ A sample XLSX document containing HPI and PDI data](img/B19383_06_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="11351">Figure 6.1 â€“ A sample XLSX document containing HPI and PDI data</st>
  prefs: []
  type: TYPE_NORMAL
- en: '*<st c="11414">Figure 6</st>**<st c="11423">.2</st>* <st c="11425">shows a</st>
    <st c="11433">sample</st> `<st c="11441">DataFrame</st>` <st c="11450">object</st>
    <st c="11457">extracted from an uploaded housing price data set to the</st> `<st
    c="11515">show_analysis()</st>` <st c="11530">view function.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 â€“ A sample DataFrame from an uploaded file](img/B19383_06_002.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12527">Figure 6.2 â€“ A sample DataFrame from an uploaded file</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12580">A</st> `<st c="12583">DataFrame</st>` <st c="12592">object has
    easy-to-use properties that can extract a portion of the table, such as</st> `<st
    c="12676">shape</st>`<st c="12681">,</st> `<st c="12683">size</st>`<st c="12687">,</st>
    `<st c="12689">axes</st>`<st c="12693">,</st> `<st c="12695">at</st>`<st c="12697">,</st>
    `<st c="12699">columns</st>`<st c="12706">,</st> `<st c="12708">indexes</st>`<st
    c="12715">,</st> `<st c="12717">ndim</st>`<st c="12721">,</st> `<st c="12723">iloc</st>`<st
    c="12727">, and</st> `<st c="12733">loc</st>`<st c="12736">. If the goal is to
    extract only the columns from Australia to the US, the</st> `<st c="12811">loc</st>`
    <st c="12814">property should indicate the range of columns that</st> `<st c="12866">DataFrame</st>`
    <st c="12875">object will sift its analysis from, as shown in the</st> <st c="12928">following
    snippet:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="13010">The</st> `<st c="13015">loc</st>` <st c="13018">property accesses
    the data values using selected column labels or ranges, while its</st> `<st c="13103">iloc</st>`
    <st c="13107">counterpart uses column indices to slice the</st> `<st c="13153">DataFrame</st>`
    <st c="13162">instance, like the</st> `<st c="13182">df_tbl</st>`<st c="13188">.
    Both properties emit mathematical methods, such as</st> `<st c="13241">count()</st>`<st
    c="13248">,</st> `<st c="13250">mean()</st>`<st c="13256">,</st> `<st c="13258">sum()</st>`<st
    c="13263">,</st> `<st c="13265">mode()</st>`<st c="13271">,</st> `<st c="13273">std()</st>`<st
    c="13278">, and</st> `<st c="13284">var()</st>`<st c="13289">. However, the given
    view function utilizes the</st> `<st c="13337">describe()</st>` <st c="13347">method
    to extract the columnar data from</st> `<st c="13389">Australia</st>` <st c="13398">to
    the</st> `<st c="13406">US</st>` <st c="13408">columns on the actual HPI values
    quarterly from 1975 to the current year.</st> <st c="13483">Here is the actual
    output of our view when a valid XLSX document on housing datasets</st> <st c="13568">is
    uploaded:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 â€“ A sample output of the show_analysis() view](img/B19383_06_003.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15018">Figure 6.3 â€“ A sample output of the show_analysis() view</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15074">When rendering data values using Flask, the</st> `<st c="15119">DataFrame</st>`
    <st c="15128">object has three utility methods that can provide format-ready results.</st>
    <st c="15201">Here are the</st> <st c="15214">three methods:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="15228">to_html()</st>`<st c="15238">: This generates an HTML table
    format with</st> <st c="15282">the datasets.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="15295">to_latex()</st>`<st c="15306">: This creates a LaTeX-formatted
    result with the data ready for</st> <st c="15371">PDF transformation.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="15390">to_markdown()</st>`<st c="15404">: This generates a Markdown-ready
    template with the</st> <st c="15457">data values.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="15469">In the case</st> <st c="15481">of</st> `<st c="15485">show_analysis()</st>`<st
    c="15500">, it</st> <st c="15505">uses</st> `<st c="15510">to_html()</st>` <st
    c="15519">to render all the captured datasets as an HTML table through</st> `<st
    c="15581">to_html()</st>`<st c="15590">. However, the rendition will only work
    with the</st> `<st c="15639">safe</st>` <st c="15643">Jinja2 filter because Jinja2
    will not automatically HTML-escape all the characters provided by</st> `<st c="15739">to_html()</st>`
    <st c="15748">for security purposes.</st> *<st c="15772">Figure 6</st>**<st c="15780">.3</st>*
    <st c="15782">shows a raw result of rendering tabular values from the</st> `<st
    c="15839">DataFrame</st>` <st c="15848">instance containing the values using its</st>
    `<st c="15890">to_html()</st>` <st c="15899">method.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15907">Rendering graphs and charts using matplotlib</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="15952">It is easy to plot</st> <st c="15971">data</st> <st c="15977">when</st>
    <st c="15982">contained</st> <st c="15992">in a</st> `<st c="15997">DataFrame</st>`
    <st c="16006">objectâ€™s two-dimension data structure.</st> <st c="16046">The</st>
    `<st c="16050">matplotlib</st>` <st c="16060">has built-in support for rendering
    the tabular values as a</st> *<st c="16120">line</st>*<st c="16124">,</st> *<st
    c="16126">bar</st>*<st c="16129">,</st> *<st c="16131">pie</st>*<st c="16134">,
    or other graph or chart type.</st> <st c="16166">Since our application is a web
    app, our view functions must render these visuals as images, unlike in a REST
    application, which returns JSON resources for</st> <st c="16321">frontend frameworks.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16341">Now, the first step is to create a</st> `<st c="16377">Figure</st>`
    <st c="16383">object.</st> <st c="16392">A</st> `<st c="16394">Figure</st>` <st
    c="16400">object serves as a canvas of a plot or subplots depending on the visualization
    approach.</st> <st c="16490">It is a plain blank object created by the</st> `<st
    c="16532">figure()</st>` <st c="16540">method of the</st> `<st c="16555">matplotlib</st>`
    <st c="16565">module or the</st> `<st c="16580">Figure</st>` <st c="16586">helper
    class of the</st> `<st c="16607">matplotlib.figure</st>` <st c="16624">module.</st>
    <st c="16633">It has the following essential properties that need configuration
    before finalizing</st> <st c="16717">the plot:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="16726">figsize</st>`<st c="16734">: This measures the</st> `<st c="16755">x-</st>`<st
    c="16757">axis and</st> `<st c="16767">y</st>`<st c="16768">-axis of the</st>
    <st c="16781">canvasâ€™ dimensions.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="16800">dpi</st>`<st c="16804">: This gauges the dot pixel per inch
    for</st> <st c="16846">the plot.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="16855">linewidth</st>`<st c="16865">: This measures the borderline
    of</st> <st c="16900">the canvas.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="16911">edgecolor</st>`<st c="16921">: This applies the color of the</st>
    <st c="16954">canvasâ€™ borderline.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="16973">facecolor</st>`<st c="16983">: This applies the indicated color
    to the border area between the canvas borderline and the axes</st> <st c="17081">plot
    borderline.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="17097">The following view implementation uploads a file, creates a</st>
    `<st c="17158">DataFrame</st>` <st c="17167">object from the uploaded XLSX document,
    and renders a line graph from the</st> <st c="17242">tabular values:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: df_rhpi = read_excel(uploaded_file, sheet_name=2, <st c="19978">plot()</st>â€™s
    x-values or <st c="20000">scalex</st> will have <st c="20017">ndarray</st> from
    <st c="20030">0</st> to the maximum number of captured HPI values, and its y-values
    or <st c="20098">scaley</st> will have the HPI values of Belgium. Its color parameter
    is set to <st c="20172">#fc0366</st> to change the default blue color of the line
    graph. Aside from <st c="20243">plot()</st>, <st c="20251">Axes</st> has <st c="20260">set_title()</st>
    to add a header title for the image, <st c="20309">set_xlabel()</st> to add the
    description of the x-values, <st c="20362">set_ylabel()</st> for the y-values
    description, <st c="20405">set_facecolor()</st> to change the font color of the
    text, and <st c="20463">tick_params()</st> to update the color of the x and y
    tick values. <st c="20525">Axes</st> also has properties such as <st c="20558">xaxis</st>
    and <st c="20568">yaxis</st> to apply a new color to the x- and y-axis descriptions
    and spines to adjust the <st c="20654">linewidth</st> and <st c="20668">edgecolor</st>
    of the plot.
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20690">After finalizing the plot details, create a</st> `<st c="20735">BytesIO</st>`
    <st c="20742">buffer object to contain the</st> `<st c="20772">Figure</st>` <st
    c="20778">instance.</st> <st c="20789">Saving the</st> `<st c="20800">Figure</st>`
    <st c="20806">in</st> `<st c="20810">BytesIO</st>` <st c="20817">is necessary
    for decoding the plot as an inline image.</st> <st c="20873">The view must pass
    the</st> `<st c="20896">base64</st>`<st c="20902">-encoded image to its Jinja2
    template for rendition.</st> <st c="20956">Rendering an inline image through the</st>
    `<st c="20994"><url></st>` <st c="20999">tag is a fast way of displaying images.</st>
    *<st c="21040">Figure 6</st>**<st c="21048">.5</st>* <st c="21050">shows the updated
    line graph for a sample actual HPI dataset</st> <st c="21112">for Belgium.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.5 â€“ A final line graph for a sample actual HPI data set for Belgium](img/B19383_06_005.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="21401">Figure 6.5 â€“ A final line graph for a sample actual HPI data set
    for Belgium</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="21477">How about if</st> <st c="21491">we</st> <st c="21494">have</st>
    <st c="21499">multiple</st> <st c="21508">graphs in one</st> `<st c="21522">Axes</st>`
    <st c="21526">plot?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="21532">Rendering multiple line graphs</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="21563">Depending on the</st> <st c="21580">goal of</st> <st c="21589">the
    visualization, the</st> `<st c="21612">pandas</st>` <st c="21618">module with</st>
    `<st c="21631">matplotlib</st>` <st c="21641">can handle complex graphical renditions
    of</st> `<st c="21685">DataFrame</st>` <st c="21694">objectâ€™s data values.</st>
    <st c="21717">The following view function creates two line graphs that can compare
    Belgiumâ€™s actual and nominal HPI values based on a</st> <st c="21837">sample dataset:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="22894">Compared to the previous</st> `<st c="22920">upload_xlsx_hpi_belgium_plot()</st>`
    <st c="22950">view,</st> `<st c="22957">upload_xlsx_belgium_hpi_rhpi_plot()</st>`
    <st c="22992">utilizes two sheets from the workbook of an uploaded file, namely</st>
    `<st c="23059">sheet[1]</st>` <st c="23067">for the nominal HPI and</st> `<st
    c="23092">sheet[2]</st>` <st c="23100">for the actual HPI values of Belgium.</st>
    <st c="23139">It derives separate</st> `<st c="23159">DataFrame</st>` <st c="23168">objectâ€™s
    tabular values from each worksheet and plots a Line2D graph to compare the trend
    between the two datasets.</st> <st c="23285">Similar to the previous vector transformation
    in this chapter, this view still uses</st> `<st c="23369">numpy</st>` <st c="23374">to
    flatten the extracted vertical vector from the DataFrameâ€™s</st> `<st c="23437">to_numpy()</st>`
    <st c="23447">utility method.</st> <st c="23464">By the way, the view function
    only uses one</st> `<st c="23508">Axes</st>` <st c="23512">plot for</st> <st c="23522">both
    graphs.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23534">Moreover, the view also showcases the inclusion of a</st> `<st
    c="23767">Axes</st>`<st c="23771">, but this view captures the Line2D objects
    from the</st> `<st c="23824">plot()</st>` <st c="23830">method calls and maps
    each plot with a string label using the</st> `<st c="23893">Axes</st>`<st c="23897">â€™</st>
    `<st c="23900">legend()</st>` <st c="23908">method.</st> *<st c="23917">Figure
    6</st>**<st c="23925">.6</st>* <st c="23927">shows the result of running</st>
    `<st c="23956">upload_xlsx_belgium_hpi_rhpi_plot()</st>` <st c="23991">with an
    uploaded</st> <st c="24009">XLSX document.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.6 â€“ Two line graphs in one Axes plot](img/B19383_06_006.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="24301">Figure 6.6 â€“ Two line graphs in one Axes plot</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="24346">Up next, we will</st> <st c="24364">see how</st> <st c="24372">to
    plot a pie chart</st> <st c="24392">with Flask.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="24403">Rendering a pie chart from a CSV file</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="24441">The</st> `<st c="24446">pandas</st>` <st c="24452">module</st>
    <st c="24460">can also</st> <st c="24468">read data from CSV files</st> <st c="24493">through
    its</st> `<st c="24506">read_csv()</st>` <st c="24516">method.</st> <st c="24525">Unlike
    in</st> `<st c="24535">read_excel()</st>`<st c="24547">, the</st> `<st c="24553">pandas</st>`
    <st c="24559">module does not need any dependency to read valid CSV files.</st>
    <st c="24621">The following view uses</st> `<st c="24645">read_csv()</st>` <st
    c="24655">to create a DataFrame of values for plotting a</st> <st c="24703">pie
    chart:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="25469">The</st> `<st c="25474">pandas</st>` <st c="25480">module</st>
    <st c="25488">can</st> <st c="25492">also read data from CSV</st> <st c="25516">files
    through its</st> `<st c="25534">read_csv()</st>` <st c="25544">method.</st> <st
    c="25553">Unlike in</st> `<st c="25563">read_excel()</st>`<st c="25575">, the</st>
    `<st c="25581">pandas</st>` <st c="25587">module does not need any dependency
    to read valid</st> <st c="25638">CSV files.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="25648">On the other hand, the</st> `<st c="25672">Axes</st>`<st c="25676">â€™</st>
    `<st c="25679">pie()</st>` <st c="25684">method has several parameters to consider
    before reaching the appropriate pie diagram for the data values.</st> <st c="25792">Here
    are some of the parameters used by the</st> `<st c="25836">upload_csv_pie()</st>`
    <st c="25852">view function:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="25867">explode</st>`<st c="25875">: This provides a list of fraction
    digits that indicate spaces around the wedges that will make them</st> <st c="25977">stand
    out.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="25987">colors</st>`<st c="25994">: This provides a list of</st> `<st
    c="26021">matplotlib</st>`<st c="26031">â€™s built-in named colors or hexadecimal
    formatted color code set to each of</st> <st c="26108">the widgets.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26120">labels</st>`<st c="26127">: This provides a list of string values
    assigned to</st> <st c="26180">each widget.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26192">autopct</st>`<st c="26200">: This provides a string-formatted
    percentage value of</st> <st c="26256">each widget.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26268">shadow</st>`<st c="26275">: This allows adding a shadow around
    the</st> <st c="26317">pie chart.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="26327">startangle</st>`<st c="26338">: This provides an angle of rotation
    for the pie chart to start with its</st> <st c="26412">first wedge.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="26424">The goal of the</st> <st c="26440">given</st> `<st c="26447">upload_csv_pie()</st>`
    <st c="26463">is to</st> <st c="26469">generate</st> <st c="26478">a pie chart
    based on the number of projected house prices (</st>`<st c="26538">Price</st>`<st
    c="26544">) per furnishing status (</st>`<st c="26570">FurnishingStatus</st>`<st
    c="26587">), namely the</st> `<st c="26602">Furnished</st>`<st c="26611">,</st>
    `<st c="26613">Semi-furnished</st>`<st c="26627">, and</st> `<st c="26633">Fully-furnished</st>`
    <st c="26648">houses.</st> <st c="26657">The</st> `<st c="26661">groupby()</st>`
    <st c="26670">method of the</st> `<st c="26685">df_csv</st>` <st c="26691">DataFrame
    extracts the needed data values for the</st> `<st c="26742">pie()</st>` <st c="26747">method.</st>
    <st c="26756">Now, running this view function will render the</st> <st c="26804">following
    chart:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.7 â€“ Pie chart on Furnishing Status preference](img/B19383_06_007.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="26951">Figure 6.7 â€“ Pie chart on Furnishing Status preference</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="27005">If saving the pie chart figure produces the following warning
    message,</st> `<st c="27077">UserWarning: Starting a Matplotlib GUI outside of
    the main thread will likely fail.</st>`<st c="27160">, add</st> `<st c="27166">matplotlib.use(''agg'')</st>`
    <st c="27187">anywhere before creating the</st> `<st c="27217">Figure</st>` <st
    c="27223">instance</st> <st c="27233">to</st> <st c="27235">enable</st> <st c="27242">the
    non-interactive backend mode for writing files outside the</st> <st c="27306">main
    thread.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="27318">How about if we have multiple</st> `<st c="27349">Axes</st>` <st
    c="27353">plots in</st> <st c="27363">one</st> `<st c="27367">Figure</st>`<st
    c="27373">?</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="27374">Rendering multiple Axes plots</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="27403">A Figure can</st> <st c="27416">contain</st> <st c="27425">more
    than one plot of different graphs and charts.</st> <st c="27476">Scientific applications
    mostly have GUIs that render several charts of varying data calibration, transformation,
    and analytics.</st> <st c="27604">The following view function uploads an XLSX
    document and creates four plots on a</st> `<st c="27685">Figure</st>` <st c="27691">to
    create different graphs of the DataFrame data values extracted from</st> <st c="27763">the
    document:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <st c="28354">axes1.plot(df_xlsx.index.values,</st><st c="28387">df_xlsx['Australia'],
    'green',</st><st c="28418">df_xlsx.index.values,</st><st c="28440">df_xlsx['Belgium'],
    'red',)</st> axes1.set_xlabel('Quarterly Duration')
  prefs: []
  type: TYPE_NORMAL
- en: axes1.set_ylabel('House Price Index')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: axes1.set_title('RHPI between Australia â€¦â€¦â€¦')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'index = arange(df_xlsx.loc[: , ''Australia'':''US''].shape[1]) <st c="28805">axes2.bar(index,
    df_xlsx.loc[: ,</st> <st c="28837">''Australia'':''US''].mean(),</st><st c="28863">color=(0.1,
    0.1, 0.1, 0.1), edgecolor=''blue'')</st> axes2.set_xlabel(''Country ID'')'
  prefs: []
  type: TYPE_NORMAL
- en: axes2.set_ylabel('Mean HPI')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: axes2.set_xticks(index)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: axes2.set_title('Mean RHPI among countries')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="29182">axes3.plot(df_xlsx.loc[: , ''Australia'':''US''])</st> axes3.set_xlabel(''Quarterly
    Duration'')'
  prefs: []
  type: TYPE_NORMAL
- en: axes3.set_ylabel('House Price Index')
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: axes3.set_title('RHPI trend among countries')
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: width = 0.3 <st c="29494">axes4.bar(df_xlsx.loc[0:3,</st> <st c="29520">'Japan'].index.values-width,
    df_xlsx.loc[0:3,</st> <st c="29566">'Japan'], width=width, color='#d9182b',</st>
    <st c="29606">label="JP")</st><st c="29618">axes4.bar(df_xlsx.loc[0:3, 'S.</st>
    <st c="29649">Korea'].index.values, df_xlsx.loc[0:3, 'S.</st> <st c="29692">Korea'],
    width=width, color='#f09ec1',</st> <st c="29731">label="SK")</st><st c="29743">axes4.bar(df_xlsx.loc[0:3,
    'New</st> <st c="29775">Zealand'].index.values+width, df_xlsx.loc[0:3,</st> <st
    c="29822">'New Zealand'], width=width, color='#000',</st> <st c="29865">label="NZ")</st>
    axes4.set_xlabel('Quarterly Duration')
  prefs: []
  type: TYPE_NORMAL
- en: â€¦ â€¦ â€¦ â€¦ â€¦ â€¦
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: axes4.legend()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: pip install sympy
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: pip install mpmath
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: from modules.equations import eqn_bp
  prefs: []
  type: TYPE_NORMAL
- en: from flask import render_template, request <st c="32238">from sympy import sympify</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="32263">import gladiator as gl</st> @eqn_bp.route('/eqn/simple/bivar',
    methods = ['GET', 'POST'])
  prefs: []
  type: TYPE_NORMAL
- en: 'async def solve_multivariate_linear():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if request.method == ''GET'':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: soln = None
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else: <st c="32434">field_validations</st> = ('
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: ('lineqn', gl.required, gl.type_(str),    gl.regex_('[+\-]?(([0-9]+\.[0-9]+)|([0-9]+\.?)|(\.?[0-9]+))[+\-/*][xy]([+\-/*](([0-9]+\.[0-9]+)|([0-9]+\.?)|(\.?[0-9]+))[+\-/*][xy])*([+\-/*](([0-9]+\.[0-9]+)|([0-9]+\.?)|(\.?[0-9]+)))*')),
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ('xvar', gl.required, gl.type_(str), gl.regex_('[0-9]+')),
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ('yvar', gl.required, gl.type_(str), gl.regex_('[0-9]+'))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'form_data = request.form.to_dict() <st c="32839">result = gl.validate(field_validations,
    form_data )</st> if bool(result): <st c="32908">xval = float(form_data[''xvar''])</st><st
    c="32939">yval = float(form_data[''yvar''])</st><st c="32971">eqn = sympify(form_data[''lineqn''],
    {''x'': xval,</st> <st c="33018">''y'': yval})</st><st c="33030">soln = eqn.evalf()</st>
    else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: soln = None
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('simple_linear_mv_form.html', soln=soln), 200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: from modules.equations import eqn_bp
  prefs: []
  type: TYPE_NORMAL
- en: from flask import render_template, request <st c="35315">from sympy import symbols,
    sympify, solve</st> @eqn_bp.route('/eqn/eqnsystem/solve', methods = ['GET', 'POST'])
  prefs: []
  type: TYPE_NORMAL
- en: 'async def solve_multiple_eqns():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if request.method == ''GET'':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: soln = None
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: field_validations = (
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ('polyeqn1', gl.required, gl.type_(str)),
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: ('polyeqn2', gl.required, gl.type_(str))
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: form_data = request.form.to_dict()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = gl.validate(field_validations, form_data )
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if bool(result): <st c="35712">x, y = symbols(''x y'')</st><st c="35733">eqn1
    = sympify(form_data[''polyeqn1''])</st><st c="35771">eqn2 = sympify(form_data[''polyeqn2''])</st><st
    c="35809">soln = solve((eqn1, eqn2),(x, y))</st> else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: soln = None
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return  render_template('complex_multiple_eqns_form.html',   soln=soln), 200y
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: <st c="38327">from sympy import symbols, sympify</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38362">from sympy.plotting import plot</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38394">import matplotlib</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38412">import base64</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38426">from io import BytesIO</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="38449">from PIL import Image</st> @eqn_bp.route('/eqn/multi/plot', methods
    = ['GET', 'POST'])
  prefs: []
  type: TYPE_NORMAL
- en: 'async def plot_two_equations():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if request.method == ''GET'':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: data = None
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: â€¦ â€¦ â€¦ â€¦ â€¦ â€¦
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: form_data = request.form.to_dict()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = gl.validate(field_validations, form_data )
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: eqn1_upper = float(form_data['eqn1_maxval'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: eqn1_lower = float(form_data['eqn1_minval'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: eqn2_upper = float(form_data['eqn2_maxval'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: eqn2_lower = float(form_data['eqn2_minval'])
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: data = None
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if bool(result) and (eqn1_lower <= eqn1_upper) and (eqn2_lower <= eqn2_upper):
    <st c="38980">matplotlib.use(''agg'')</st> x = symbols(''x'')'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: eqn1 = sympify(form_data['equation1'])
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: eqn2 = sympify(form_data['equation2']) <st c="39097">graph = plot(eqn1, (x,
    eqn1_lower, eqn1_upper), line_color='red', show=False)</st><st c="39174">graph.extend(plot(eqn2,
    (x, eqn2_lower, eqn2_upper), line_color='blue', show=False))</st> filename = "./files/img/multi_plot.png"
    <st c="39300">graph.save(filename)</st><st c="39320">img = Image.open(filename)</st><st
    c="39347">image_io = BytesIO()</st><st c="39368">img.save(image_io, 'PNG')</st>
    data = base64.b64encode(image_io.getbuffer()) .decode("ascii")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('plot_two_eqns_form.html', data=data), 200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: pip install latex
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <st c="42802">from jinja2 import FileSystemLoader, Environment</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="42851">from latex.jinja2 import make_env</st> environ:<st c="42894">Environment</st>
    = make_env(loader=FileSystemLoader('files'), <st c="42952">enable_async=True,</st>
    block_start_string = '\BLOCK{',
  prefs: []
  type: TYPE_NORMAL
- en: block_end_string = '}',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: variable_start_string = 'VAR{',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: variable_end_string = '}',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: comment_start_string = '#{',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: comment_end_string = '}',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: line_statement_prefix = '%-',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: line_comment_prefix = '%#',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: trim_blocks = True,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: autoescape = False,)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: from modules.rendition import rendition_bp
  prefs: []
  type: TYPE_NORMAL
- en: from flask import send_from_directory
  prefs: []
  type: TYPE_NORMAL
- en: from jinja2 import FileSystemLoader
  prefs: []
  type: TYPE_NORMAL
- en: from latex.jinja2 import make_env
  prefs: []
  type: TYPE_NORMAL
- en: '@rendition_bp.route(''/render/hpi/plot/eqns'', methods = [''GET'', ''POST''])
    <st c="44441">async</st> def convert_latex(): <st c="44468">tpl = environ.get_template(''/latex/hpi_plot.tex'')</st>
    outpath=os.path.join(''./files/latex'',''hpi_plot.pdf'')'
  prefs: []
  type: TYPE_NORMAL
- en: outfile=open(outpath,'w') <st c="44597">outfile.write(await tpl.render_async(author='Sherwin</st>
    <st c="44649">John Tragura', title="Rendering HPI Plot with</st> <st c="44695">LaTeX",
    date=datetime.now().strftime("%B %d, %Y"),</st> <st c="44746">renderTbl=True))</st><st
    c="44763">outfile.close()</st> os.system("pdflatex <st c="44800">--shell-escape</st>
    -output-directory=" + './files/latex' + " " + outpath) <st c="44959">get_template()</st>
    of the <st c="44981">Environment</st> instance, <st c="45003">environ</st>, to
    create a Jinja2 template of a specific LaTeX document from the <st c="45078">/latex</st>
    sub-directory of the root folder. The templateâ€™s <st c="45134">render_async()</st>
    function opens the specified LaTeX document for changes, such as passing context
    values (e.g., <st c="45244">author</st>, <st c="45252">title</st>, <st c="45259">date</st>,
    and <st c="45269">renderTbl</st>) to complete the document.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="45306">Afterward, the</st> `<st c="45322">view</st>` <st c="45326">function
    will convert the document into PDF format, which is the necessary approach for
    this application.</st> `<st c="45433">os.path.join()</st>` <st c="45447">will
    indicate where to save the file.</st> <st c="45486">Now, MikTeX offers three compilers
    to compile and convert the LaTeX document to PDF, namely pdfLaTeX, XeLaTeX, and
    LuaLaTeX, but our implementation uses pdfLaTeX, which is the default one.</st>
    `<st c="45675">os.system()</st>` <st c="45686">will run the compiler and save
    the PDF into the specific location.</st> <st c="45754">To render the content,
    Flask has a</st> `<st c="45789">send_from_directory()</st>` <st c="45810">method
    that can display the content of a PDF file saved in the directory.</st> *<st c="45885">Figure
    6</st>**<st c="45893">.15</st>* <st c="45896">shows the</st> <st c="45906">resulting
    PDF document by running the</st> `<st c="45945">convert_latex()</st>` <st c="45960">view
    function.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.15 â€“ Rendering a LaTeX document as a PDF](img/B19383_06_015.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="46098">Figure 6.15 â€“ Rendering a LaTeX document as a PDF</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="46147">Our Flask application</st> <st c="46169">does not only render
    existing LaTeX documents but also creates one before rendering it to</st> <st
    c="46260">the client.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="46271">Creating LaTeX documents</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="46296">So far, the</st> `<st c="46309">latex</st>` <st c="46314">module</st>
    <st c="46322">with Jinja2 has no LaTeX creation features that Flask can use to
    build scientific writeups from various data sources.</st> <st c="46440">However,
    other modules, such as</st> `<st c="46472">pylatex</st>`<st c="46479">, can provide
    helper classes and methods to serialize LaTeX content at runtime.</st> <st c="46559">The
    following view implementation shows how to generate a LaTeX file with</st> `<st
    c="46633">DataFrame</st>` <st c="46642">objectâ€™s data derived from an uploaded</st>
    <st c="46682">XLSX document:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: <st c="47246">Before anything else, the environment setup must have the MikTeX
    or TeX Live installation for the LaTeX compilers.</st> <st c="47362">Then, install
    the</st> `<st c="47380">pylatex</st>` <st c="47387">module through the</st> `<st
    c="47407">pip</st>` <st c="47410">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: <st c="47439">To start the transaction, the given</st> `<st c="47476">create_latext_pdf()</st>`
    <st c="47495">retrieves an uploaded XLSX document to derive the tabular values
    for the</st> <st c="47569">report generation:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: <st c="48045">Then, it sets up a</st> <st c="48064">dictionary,</st> `<st c="48077">geometry_options</st>`<st
    c="48093">, that consists of the LaTeX document parameters, such as the document
    orientation (</st>`<st c="48177">landscape</st>`<st c="48187">), the left, right,
    top, and bottom margins (</st>`<st c="48233">margin</st>`<st c="48240">), the
    vertical height from the bottom part of the header down to the topmost area of
    first the text (</st>`<st c="48343">headsep</st>`<st c="48351">), the space from
    the top margin to the line where to start the header part (</st>`<st c="48429">headheight</st>`<st
    c="48440">), and the toggle parameter to include or exclude the document header
    and footer of the document (</st>`<st c="48539">includeheadfoot</st>`<st c="48555">).</st>
    <st c="48559">This dictionary is essential to the instantiation of the</st> `<st
    c="48616">pylatex</st>`<st c="48623">â€™s</st> `<st c="48627">Document container</st>`
    <st c="48645">class, which will represent the</st> <st c="48678">LaTeX document.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="48693">Initially, the LaTeX document will be a blank instance with the
    desired document parameters indicated by its</st> `<st c="48803">geometry_option</st>`
    <st c="48818">constructor parameter and the</st> `<st c="48849">document_options</st>`
    <st c="48865">list containing other options such as the font size and paper size.</st>
    <st c="48934">Then, to start customizing the document, the</st> `<st c="48979">view</st>`
    <st c="48983">function uses the</st> `<st c="49002">Command</st>` <st c="49009">class
    to create custom values to the documentâ€™s title, author, and date without escaping
    the backslash, thus the use of the</st> `<st c="49134">NoEscape</st>` <st c="49142">class,
    and append them to the preamble property of the</st> `<st c="49198">Document</st>`
    <st c="49206">instance.</st> <st c="49217">This process is similar to calling</st>
    `<st c="49252">\title</st>`<st c="49258">,</st> `<st c="49260">\author</st>`<st
    c="49267">, and</st> `<st c="49273">\date</st>` <st c="49278">commands with custom
    values interpolated by the</st> `<st c="49327">\</st>``<st c="49328">VAR{}</st>`
    <st c="49333">command.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49342">Next, the view must append the</st> `<st c="49374">\maketitle</st>`
    <st c="49384">command without escaping the backslash to typeset all these added
    document details.</st> <st c="49469">The line following</st> `<st c="49488">\maketitle</st>`
    <st c="49498">is always the generation of the body content, in our case, the</st>
    <st c="49562">following section:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: <st c="49713">The</st> `<st c="49718">pylatex</st>` <st c="49725">module classes
    are equivalent to some LaTeX commands, such as</st> `<st c="49788">Axis</st>`<st
    c="49792">,</st> `<st c="49794">Math</st>`<st c="49798">,</st> `<st c="49800">Matrix</st>`<st
    c="49806">,</st> `<st c="49808">Center</st>`<st c="49814">,</st> `<st c="49816">Alignat</st>`<st
    c="49823">,</st> `<st c="49825">Alignref</st>`<st c="49833">, and</st> `<st c="49839">Plot</st>`<st
    c="49843">. The</st> `<st c="49849">Command</st>` <st c="49856">class is a module
    class used to run custom or general commands such as</st> `<st c="49928">\title</st>`<st
    c="49934">,</st> `<st c="49936">\author</st>`<st c="49943">, and</st> `<st c="49949">\date</st>`<st
    c="49954">. In this</st> `<st c="49964">create_latex_pdf()</st>` <st c="49982">view,
    the content generation started with running the</st> `<st c="50037">Section</st>`
    <st c="50044">command</st> <st c="50052">with a section title,</st> *<st c="50075">The
    Data Analysis.</st> <st c="50094">A</st>* <st c="50095">section is an organized
    part of the content that contains combinations of tables, text, plots, and mathematical
    equations.</st> <st c="50219">After that, the view appends a statement in text
    form.</st> <st c="50274">Since there is no backslash to escape, there is no reason
    to wrap the test with the</st> `<st c="50358">NoEscape</st>` <st c="50366">class.</st>
    <st c="50374">Then, we create the sub-sections indicated in the</st> <st c="50424">following
    snippet:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: <st c="50987">After the text, the view appends a</st> `<st c="51023">Subsection</st>`
    <st c="51033">command, which will granularize the content of the recently created
    section.</st> <st c="51111">Part of its component is the</st> `<st c="51140">Tabular</st>`
    <st c="51147">command that will</st> <st c="51166">construct a spreadsheet of
    HPI values derived from the extracted tabular values.</st> <st c="51247">After
    the assemblage of the LaTeX content, the</st> `<st c="51294">create_latex_pdf()</st>`
    <st c="51312">view will now generate the PDF for rendition, as shown in the</st>
    <st c="51375">following snippet:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: <st c="51526">The</st> `<st c="51531">Document</st>` <st c="51539">instance
    has a</st> `<st c="51555">generate_pdf()</st>` <st c="51569">method that compiles
    and generates the LaTeX file, converts the LaTeX file to its PDF form, and saves
    both files to a specific directory.</st> <st c="51708">Once the PDF is available,
    the view can render the PDF content through Flaskâ€™s</st> `<st c="51787">send_from_directory()</st>`
    <st c="51808">method.</st> *<st c="51817">Figure 6</st>**<st c="51825">.16</st>*
    <st c="51828">displays the generated PDF of the</st> `<st c="51863">create_latex_pdf()</st>`
    <st c="51881">view function.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.16 â€“ A PDF generated by the pylatex module](img/B19383_06_016.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="52320">Figure 6.16 â€“ A PDF generated by the pylatex module</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="52371">Aside from rendering PDF content, Flask can also utilize popular
    frontend libraries for displaying graphs and</st> <st c="52482">charts.</st> <st
    c="52490">Let us concentrate on how Flask can integrate with</st> <st c="52541">these</st>
    **<st c="52547">JavaScript</st>** <st c="52557">(</st>**<st c="52559">JS</st>**<st
    c="52561">)-based libraries in</st> <st c="52583">visualizing datasets.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="52604">Building graphical charts with frontend libraries</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="52654">Most developers prefer</st> <st c="52678">rendering</st> <st c="52687">graphs
    and charts using frontend libraries rather than</st> `<st c="52743">matplotlib</st>`<st
    c="52753">, which requires complex Python coding to refine presentation and lacks
    UI-related features such as responsiveness, adaptability, and user interaction.</st>
    <st c="52905">This section will highlight the Chart.js,</st> `<st c="52947">Bokeh</st>`<st
    c="52952">, and</st> `<st c="52958">Plotly</st>` <st c="52964">libraries, which
    are all popular libraries with varying strengths and weaknesses as external tools</st>
    <st c="53064">for visualization.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="53082">Letâ€™s begin</st> <st c="53095">with Chart.js.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="53109">Plotting with Chart.js</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="53132">The most common</st> <st c="53149">and popular charting library
    used in many visualization applications is Chart.js.</st> <st c="53231">It is
    100% JS, is lightweight, is easy to use, and has a straightforward syntax for
    designing graphs and charts.</st> <st c="53344">The following is the Chart.js
    implementation that displays the mean HPI values of</st> <st c="53426">certain
    countries:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: <st c="54031">Chart.js is available in</st> <st c="54057">three sources:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="54071">Node.js</st>**<st c="54079">: By running npm to install the</st>
    <st c="54112">chart.js module.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="54128">GitHub</st>**<st c="54135">: By downloading the</st> [<st c="54157">https://github.com/chartjs/Chart.js/releases/download/v4.4.0/chart.js-4.4.0.tgz</st>](https://github.com/chartjs/Chart.js/releases/download/v4.4.0/chart.js-4.4.0.tgz)
    <st c="54236">file or the latest</st> <st c="54256">release available.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="54274">Content delivery network</st>** **<st c="54299">(CDN)</st>**<st
    c="54305">: By</st> <st c="54310">referencing</st> [<st c="54323">https://cdn.jsdelivr.net/npm/chart.js</st>](https://cdn.jsdelivr.net/npm/chart.js)<st
    c="54360">.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="54361">Based on the HTML script, our implementation opted for the</st>
    <st c="54421">CDN source.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="54432">After referencing Chart.js, create a</st> `<st c="54470"><canvas></st>`
    <st c="54478">tag with the width and height that fits your plot.</st> <st c="54530">Then,
    create a</st> `<st c="54545">Chart()</st>` <st c="54552">instance with the node
    or 2D context of</st> `<st c="54593"><canvas></st>` <st c="54601">and some</st>
    <st c="54610">configuration options.</st> <st c="54634">Moreover, set new and
    appropriate values to global default properties such as the font name, font size,
    and</st> <st c="54742">font color:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: <st c="55049">The</st> `<st c="55054">data</st>` <st c="55058">property provides
    the x-axis labels, data points, and connecting lines.</st> <st c="55131">Its</st>
    `<st c="55135">datasets</st>` <st c="55143">sub-property</st> <st c="55157">contains
    the look-and-feel details of the plots with the actual data.</st> <st c="55227">Both
    the</st> `<st c="55236">label</st>` <st c="55241">and</st> `<st c="55246">data</st>`
    <st c="55250">lists are context data supplied by its</st> <st c="55290">view function:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: <st c="55617">Now, Chart.js can also build multiple line graphs, varieties of
    bar graphs, pie charts, and doughnuts, all using the same setup as the given line
    graph.</st> <st c="55771">Running the view function with the given Chart.js</st>
    <st c="55820">script will render a line graph, as indicated in</st> *<st c="55870">Figure
    6</st>**<st c="55878">.17</st>*<st c="55881">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.17 â€“ A line graph for HPI values per country](img/B19383_06_017.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="56131">Figure 6.17 â€“ A line graph for HPI values per country</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56184">Chart.js supports responsive web design and interactive results,
    such as the given line graph that provides us with some information during mouse-over
    on every line dot.</st> <st c="56355">Despite its popularity, Chart.js still utilizes
    HTML canvas, which cannot render efficiently large and complex graphs.</st> <st
    c="56474">Also, it lacks other interactive utilities present in Bokeh</st> <st
    c="56534">and Plotly.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56545">Let us now create</st> <st c="56564">graphs using a module friendlier
    to</st> <st c="56600">Python,</st> **<st c="56608">Plotly</st>**<st c="56614">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56615">Creating graphs with Plotly</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56643">Plotly is also a JS-based</st> <st c="56669">library that can
    render interactive</st> <st c="56706">charts and graphs.</st> <st c="56725">It
    is a popular library for various statistical and mathematical projects that require
    interactive data visualization and 3D graphics effects and can seamlessly plot</st>
    <st c="56891">DataFrame datasets.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56910">To utilize its classes and methods for plotting graphs, install
    the</st> `<st c="56979">plotly</st>` <st c="56985">module through the</st> `<st
    c="57005">pip</st>` <st c="57008">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: <st c="57036">The following view function uses Plotly to create a grouped bar
    graph about the price and bedroom preferences of buyers categorized according
    to their furnishing</st> <st c="57199">status preference:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: <!doctype html>
  prefs: []
  type: TYPE_NORMAL
- en: <html>
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <title>Plotly Bar Graph</title>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </head>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <body>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: â€¦ â€¦ â€¦ â€¦ â€¦ â€¦
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{%if graphJSON == ''{}'' %}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>No plot image.</p>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{% else %} <st c="58844"><div id=''chart'' class=''chart''></div></st> {% endif
    %}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body> <st c="58901"><script src='https://cdn.plot.ly/plotly-latest.js'></script></st><st
    c="58961"><script type='text/javascript'></st><st c="58993">var graphs = {{ graphJSON
    | safe }};</st><st c="59030">Plotly.plot('chart', graphs, {});</st><st c="59064"></script></st>
    </html>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: pip install bokeh
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: <st c="60939">from bokeh.plotting import figure</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="60973">from bokeh.embed import components</st> @rendition_bp.route('/bokeh/hpi/line',
    methods = ['GET', 'POST'])
  prefs: []
  type: TYPE_NORMAL
- en: 'def create_bokeh_line():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if request.method == ''GET'':'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: script = None
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: div = None
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: â€¦ â€¦ â€¦ â€¦ â€¦ â€¦
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'try:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: df = read_excel(uploaded_file, sheet_name=1, skiprows=[1])
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: x = df.index.values
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'y = df[''UK''] <st c="61268">plot = figure(max_width=600, max_height=800,title=None,
    toolbar_location="below", background_fill_color="#FFFFCC", x_axis_label=''Period
    by Quarter ID'', y_axis_label=''Nominal HPI'')</st><st c="61447">plot.line(x,y,
    line_width=4, color="#CC0000")</st><st c="61493">script, div = components(plot)</st>
    except:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: raise FileSavingException()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return render_template('bokeh.html', script=script, div=div, title="Line Graph
    of UK's Nominal HPI")
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: <!DOCTYPE html>
  prefs: []
  type: TYPE_NORMAL
- en: <html lang="en">
  prefs: []
  type: TYPE_NORMAL
- en: <head>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <meta charset="utf-8">
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <title>Bokeh HPI</title> <st c="62727"><script src="img/bokeh-3.2.2.js"></script></st>
    </head>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <body>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: â€¦ â€¦ â€¦ â€¦ â€¦ â€¦
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{%if div == None and script == None %}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <p>No plot image.</p>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '{% else %} <st c="62900">{{ div | safe }}</st><st c="62916">{{ script | safe
    }}</st> {% endif %}'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: </body>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </html>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="64773">@sock.route(''/ch06/ws/server/hpi/plot'')</st> def ws_server_plot(ws):'
  prefs: []
  type: TYPE_NORMAL
- en: 'async def process():'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'while True: <st c="64871">hpi_data_json = ws.receive()</st> hpi_data_dict =
    loads(hpi_data_json) <st c="64937">json_data = dumps(</st><st c="64955">{''period'':
    f"Y{hpi_data_dict[''year'']}</st> <st c="64993">Q{hpi_data_dict[''quarter'']}"</st>,
    <st c="65024">''hpi'': float(hpi_data_dict[''hpi''])})</st><st c="65060">ws.send(json_data)</st>
    run(process())'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: <st c="65355">const socket = new WebSocket('ws://' + location.host +</st> <st
    c="65410">'/ch06/ws/server/hpi/plot');</st> socket.addEventListener('message',
    msg => { <st c="65484">const data = JSON.parse(msg.data);</st> if (config.data.labels.length
    === 20) {
  prefs: []
  type: TYPE_NORMAL
- en: config.data.labels.shift();
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: config.data.datasets[0].data.shift();
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} <st c="65627">config.data.labels.push(data.period);</st><st c="65664">config.data.datasets[0].data.push(data.hpi);</st><st
    c="65709">lineChart.update();</st> });'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: from redis import Redis
  prefs: []
  type: TYPE_NORMAL
- en: redis_conn = Redis(
  prefs: []
  type: TYPE_NORMAL
- en: db = 0,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: host='127.0.0.1',
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: port=6379,
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: decode_responses=True
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: <st c="66943">var source = new EventSource("/ch06/sse/hpi/data/stream");</st>
    source.onmessage = function (event) {
  prefs: []
  type: TYPE_NORMAL
- en: const data = JSON.parse(event.data);
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: if (config.data.labels.length === 20) {
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: config.data.labels.shift();
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: config.data.datasets[0].data.shift();
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '} <st c="67186">config.data.labels.push(data.period);</st><st c="67223">config.data.datasets[0].data.push(data.hpi);</st>
    lineChart.update();'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '};'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: pip install celery
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '@shared_task(ignore_result=False)'
  prefs: []
  type: TYPE_NORMAL
- en: 'def compute_hpi_laspeyre(df_json): <st c="68779">async def compute_hpi_task(df_json):</st>
    try:'
  prefs: []
  type: TYPE_NORMAL
- en: df_dict = loads(df_json)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: df = DataFrame(df_dict)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: df["p1*q0"] = df["p1"] * df["q0"]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: df["p0*q0"] = df["p0"] * df["q0"]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print(df)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: numer = df["p1*q0"].sum()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: denom = df["p0*q0"].sum()
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: hpi = numer/denom
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return hpi
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except Exception as e:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return 0
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return <st c="69098">compute_hpi_laspeyre()</st> runs an asynchronous task that
    computes the HPI value using Laspeyreâ€™s formula with inputs that include the house
    price for a particular house preference and the number of customers who bought
    the house for a specific year. The computation will take longer when given a lot
    of data, so using an asynchronous Celery task to run the formula when the worst-case
    scenario happens may improve its execution at runtime.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="69535">It is always a good practice to run heavy and resource-intensive
    computations or processes outside the thread of the view function using asynchronous
    background tasks.</st> <st c="69704">It also employs loose coupling between the
    request-response transactions and the numerical algorithms, which can help avoid
    the degradation and starvations of</st> <st c="69863">these processes.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="69879">Integrating</st> <st c="69892">popular</st> <st c="69900">numerical
    and symbolic software into the Flask platform can sometimes save migration time
    when dealing with existing scientific projects.</st> <st c="70038">Let us now
    explore the capability of Flask to integrate with the</st> <st c="70103">Julia
    language.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="70118">Incorporating Julia packages with Flask</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '**<st c="70158">Julia</st>** <st c="70164">is a high-powered</st> <st c="70183">compiled
    programming</st> <st c="70203">language that provides mathematical and symbolic
    libraries.</st> <st c="70264">It contains simple syntax for numerical computing
    and provides better runtime performance for executing</st> <st c="70368">its applications.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="70385">Although Julia has web frameworks such as Genie, Oxygen, and Bukdu,
    which can implement Julia-based web applications, it is also possible that Flask
    applications can run and extract values from</st> <st c="70580">Julia functions.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="70596">But first, download the latest Julia compiler from</st> [<st c="70648">https://julialang.org/downloads/</st>](https://julialang.org/downloads/)
    <st c="70680">and install it on your system.</st> <st c="70712">Installing an
    old Julia version into an updated Windows OS will result in a system crash, as
    indicated in</st> *<st c="70818">Figure 6</st>**<st c="70826">.20</st>*<st c="70829">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.20 â€“ System crashes due to Flask running outdated Julia](img/B19383_06_020.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="71132">Figure 6.20 â€“ System crashes due to Flask running outdated Julia</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="71196">Letâ€™s now take</st> <st c="71212">a</st> <st c="71214">look at
    the steps involved in creating and integrating the Julia package into a</st> <st
    c="71294">Flask application.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="71312">Creating a custom Julia package</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="71344">After the installation, go</st> <st c="71371">to the project directory
    of the Flask app through the console and open a Julia shell by running the</st>
    `<st c="71472">julia</st>` <st c="71477">command.</st> <st c="71487">Then, follow</st>
    <st c="71500">these instructions:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="71519">Run the command using</st> `<st c="71542">Pkg</st>` <st c="71545">on</st>
    <st c="71549">the shell.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="71559">Create a</st> `<st c="71569">Julia</st>` <st c="71574">package
    in the Flask app directory by running the</st> <st c="71625">following command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="71672">Install the</st> `<st c="71685">PythonCall</st>` <st c="71695">plugin
    by running the</st> <st c="71718">following command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="71758">Also, install Julia packages such as</st> `<st c="71796">DataFrame</st>`<st
    c="71805">,</st> `<st c="71807">Pandas</st>`<st c="71813">, and</st> `<st c="71819">Statistics</st>`
    <st c="71829">for converting and running Python syntax in the</st> <st c="71878">Julia
    environment.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="71896">Finally, run</st> `<st c="71910">Pkg.resolve()</st>` <st c="71923">and</st>
    `<st c="71928">Pkg.instantiate()</st>` <st c="71945">to finalize</st> <st c="71958">the
    setup.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: <st c="71968">Next, weâ€™ll install the</st> `<st c="71993">juliacall</st>` <st
    c="72002">client module and add the Julia-related configuration details to the</st>
    **<st c="72072">TOML</st>** <st c="72076">file.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="72082">Configuring Julia accessibility in a Flask project</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="72133">After creating a</st> <st c="72151">Julia custom package</st>
    <st c="72171">inside the Flask app, open the appâ€™s</st> `<st c="72209">config_dev.toml</st>`
    <st c="72224">file and add the following environment variables to integrate Julia
    into the</st> <st c="72302">Flask platform:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="72317">PYTHON_JULIAPKG_EXE</st>`<st c="72337">: The path to the</st>
    `<st c="72356">julia.exe</st>` <st c="72365">file, including the filename (</st><st
    c="72396">e.g.,</st> `<st c="72403">C:/Alibata/Development/Language/Julia-1.9.2/bin/julia</st>`<st
    c="72456">).</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="72459">PYTHON_JULIAPKG_OFFLINE</st>`<st c="72483">: Set to</st> `<st
    c="72493">yes</st>` <st c="72496">to stop any Julia installation in</st> <st c="72531">the
    background.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="72546">PYTHON_JULIAPKG_PROJECT</st>`<st c="72570">: The path to the
    newly created custom Julia package inside the Flask app (</st><st c="72646">e.g.,</st>
    `<st c="72653">C:/Alibata/Training/Source/flask/mastering/ch06-web-final/Ch06JuliaPkg/</st>`<st
    c="72724">).</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="72727">JULIA_PYTHONCALL_EXE</st>`<st c="72748">: The path to the Python
    compiler of the virtual environment, including the filename (</st><st c="72835">e.g.,</st>
    `<st c="72842">C:/Alibata/Training/Source/flask/mastering/ch06-web-env/Scripts/python</st>`<st
    c="72912">).</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="72915">Afterward, install the</st> `<st c="72939">juliacall</st>` <st
    c="72948">module through the</st> `<st c="72968">pip</st>` <st c="72971">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: <st c="73002">After the Flask setup, let us now create the Julia code inside
    the</st> <st c="73070">Julia package.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="73084">Implementing Julia functions in the package</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="73128">After the Python</st> <st c="73145">configuration, open</st> `<st
    c="73166">ch06-web-final\Ch06JuliaPkg\src\Ch06JuliaPkg.jl</st>` <st c="73213">and
    create some Julia functions with the imported</st> `<st c="73264">PythonCall</st>`
    <st c="73274">package, like in the</st> <st c="73296">following snippet:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: <st c="73706">All syntax inside the Julia package must be valid Julia syntax.</st>
    <st c="73771">Thus, the given</st> `<st c="73787">sum_array()</st>` <st c="73798">is
    a Julia package.</st> <st c="73819">On the other hand, importing Python modules
    requires the</st> <st c="73876">instantiation of</st> `<st c="73893">PythonCall</st>`
    <st c="73903">through</st> `<st c="73912">pynew()</st>`<st c="73919">, and the
    actual module mapping happens in its</st> `<st c="73966">__init__()</st>` <st
    c="73976">initialization method</st> <st c="73999">through</st> `<st c="74007">pycopy()</st>`<st
    c="74015">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="74016">Creating the Julia service module</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="74050">To access the</st> <st c="74064">functions in the custom Julia
    package, such as</st> `<st c="74112">Ch06JuliaPkg</st>`<st c="74124">, create
    a service module that will activate</st> `<st c="74169">Ch06JuliaPkg</st>` <st
    c="74181">and create a Julia module that will execute the Julia commands in Flask
    in that particular</st> `<st c="74273">Blueprint</st>` <st c="74282">section.</st>
    <st c="74292">The following is the</st> `<st c="74313">\modules\external\services\julia_transactions.py</st>`
    <st c="74361">service module from the external</st> `<st c="74395">Blueprint</st>`
    <st c="74404">with the needed</st> `<st c="74421">juliacall</st>` <st c="74430">executions:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: <st c="74723">At every startup</st> <st c="74741">of the Flask server, the application
    always activates the Julia package because the application always loads all the
    services of the blueprints.</st> *<st c="74886">Figure 6</st>**<st c="74894">.21</st>*
    <st c="74897">shows the activation process on the server log of the</st> <st c="74952">Flask
    app:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 6.21 â€“ Julia package activation log during server startup](img/B19383_06_021.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="75365">Figure 6.21 â€“ Julia package activation log during server startup</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="75429">The activation may cause degradation to the startup time of the
    server, which is a disadvantage for Flask.</st> <st c="75537">If this performance
    glitch worsens, it will be advisable to migrate all implementation to popular
    Julia web frameworks, such as Oxygen, Genie, and Bukduh, instead of pursuing further
    the</st> <st c="75724">Flask integration.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="75742">Now, for the view functions to access Julia functions, add service
    methods in the</st> `<st c="75825">Blueprint</st>` <st c="75834">service where
    the activation happens.</st> <st c="75873">In our project, the</st> `<st c="75893">modules\external\services\julia_transactions.py</st>`
    <st c="75940">service module implements the following</st> `<st c="75981">total_array()</st>`
    <st c="75994">service to expose the</st> `<st c="76017">sum_array()</st>` <st
    c="76028">function</st> <st c="76038">in</st> `<st c="76041">Ch06JuliaPkg</st>`<st
    c="76053">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: <st c="76144">The Julia module or</st> `<st c="76165">jl</st>`<st c="76167">,
    using its</st> `<st c="76179">seval()</st>` <st c="76186">method, is the one that
    accesses and executes custom or built-in Julia functions in the Flask service.</st>
    <st c="76290">Given that the applications followed all installations and setups
    given correctly, running</st> `<st c="76381">jl.seval()</st>` <st c="76391">must
    not cause any system crash or</st> `<st c="76427">HTTP Status 500</st>`<st c="76442">.
    Again, the Python service functions that</st> <st c="76485">execute</st> `<st
    c="76493">jl.seval()</st>` <st c="76503">must be placed in the service module
    where the Julia package</st> <st c="76565">activation happened.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="76585">Summary</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="76593">Flask 3.0 is the best-fit version of Flask that can build scientific
    applications because of its asynchronous features and asyncio support.</st> <st
    c="76734">The asynchronous WebSocket, SSE, Celery background tasks, and services,
    together with the mathematical and computational modules, such as</st> `<st c="76872">numpy</st>`<st
    c="76877">,</st> `<st c="76879">matplotlib</st>`<st c="76889">,</st> `<st c="76891">sympy</st>`<st
    c="76896">,</st> `<st c="76898">pandas</st>`<st c="76904">,</st> `<st c="76906">scipy</st>`<st
    c="76911">, and</st> `<st c="76917">seaborn</st>`<st c="76924">, are the core
    ingredients in building applications that highlight visualizations, computations,
    and</st> <st c="77025">statistical analysis.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="77046">Proven by this chapter, Flask supports LaTeX document generation,
    updating, and rendition, including its PDF transformation.</st> <st c="77172">This
    feature is crucial in most scientific computing that requires archiving, reporting,
    and</st> <st c="77265">records management.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="77284">Flask support on visualization is also clear cut in this chapter,
    from the real-time data plotting down to the native plots of the</st> `<st c="77416">matplotlib</st>`
    <st c="77426">module.</st> <st c="77435">Flask can utilize JS-based libraries
    for data plotting of</st> `<st c="77493">DataFrame</st>` <st c="77502">objectâ€™s
    tabular values seamlessly and in a</st> <st c="77547">straightforward manner.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="77570">Although not yet stable, the integration of Julia with Flask shows
    how the interoperability property works with Flask.</st> <st c="77690">Using</st>
    `<st c="77696">PythonCall</st>` <st c="77706">and</st> `<st c="77711">JuliaCall</st>`
    <st c="77720">modules, it is now possible to run existing Julia functions in Flask
    as long as the setup and configuration</st> <st c="77829">are correct.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="77841">In conclusion, Flask, particularly the asynchronous version of
    Flask , is the best option for building web-based scientific applications.</st>
    <st c="77980">The next chapter will discuss how Flask utilizes NoSQL databases
    and addresses some big</st> <st c="78068">data requirements.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
