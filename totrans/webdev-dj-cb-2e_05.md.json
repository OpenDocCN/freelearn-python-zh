["```py\n    # utils/templatetags/utility_tags.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import template\n    register = template.Library()\n\n    ### FILTERS ###\n    # .. your filters go here..\n\n    ### TAGS ###\n    # .. your tags go here..\n    ```", "```py\n# utils/templatetags/utility_tags.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom datetime import datetime\nfrom django import template\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.timezone import now as tz_now\nregister = template.Library()\n\n### FILTERS ###\n\n@register.filter\ndef days_since(value):\n    \"\"\" Returns number of days between today and value.\"\"\"\n\n    today = tz_now().date()\n    if isinstance(value, datetime.datetime):\n        value = value.date()\n    diff = today - value\n    if diff.days > 1:\n        return _(\"%s days ago\") % diff.days\n    elif diff.days == 1:\n        return _(\"yesterday\")\n    elif diff.days == 0:\n        return _(\"today\")\n    else:\n        # Date is in the future; return formatted date.\n        return value.strftime(\"%B %d, %Y\")\n```", "```py\n{% load utility_tags %}\n{{ object.published|days_since }}\n```", "```py\n@register.filter(name=\"humanized_days_since\")\ndef days_since(value):\n    ...\n```", "```py\n# utils/templatetags/utility_tags.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nimport re\nfrom django import template\nfrom django.utils.safestring import mark_safe\nregister = template.Library()\n\n### FILTERS ###\n\nmedia_tags_regex = re.compile(\n    r\"<figure[\\S\\s]+?</figure>|\"\n    r\"<object[\\S\\s]+?</object>|\"\n    r\"<video[\\S\\s]+?</video>|\"\n    r\"<audio[\\S\\s]+?</audio>|\"\n    r\"<iframe[\\S\\s]+?</iframe>|\"\n    r\"<(img|embed)[^>]+>\",\n    re.MULTILINE\n)\n\n@register.filter\ndef first_media(content):\n    \"\"\" Returns the first image or flash file from the html\n content \"\"\"\n    m = media_tags_regex.search(content)\n    media_tag = \"\"\n    if m:\n        media_tag = m.group()\n    return mark_safe(media_tag)\n```", "```py\n{% load utility_tags %}\n{{ object.content|first_media }}\n```", "```py\n# utils/templatetags/utility_tags.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nimport re\nfrom django import template\nregister = template.Library()\n\n### FILTERS ###\n\n@register.filter\ndef humanize_url(url, letter_count):\n    \"\"\" Returns a shortened human-readable URL \"\"\"\n    letter_count = int(letter_count)\n    re_start = re.compile(r\"^https?://\")\n    re_end = re.compile(r\"/$\")\n    url = re_end.sub(\"\", re_start.sub(\"\", url))\n    if len(url) > letter_count:\n        url = \"%sâ€¦\" % url[:letter_count - 1]\n    return url\n```", "```py\n{% load utility_tags %}\n<a href=\"{{ object.website }}\" target=\"_blank\">\n    {{ object.website|humanize_url:30 }}\n</a>\n```", "```py\n    # utils/templatetags/utility_tags.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import template\n    from django.template.loader import get_template\n    register = template.Library()\n\n    ### TAGS ###\n\n    @register.tag\n    def try_to_include(parser, token):\n      \"\"\"Usage: {% try_to_include \"sometemplate.html\" %}\n      This will fail silently if the template doesn't exist.\n      If it does exist, it will be rendered with the current\n      context.\"\"\"\n      try:\n        tag_name, template_name = token.split_contents()\n      except ValueError:\n        raise template.TemplateSyntaxError, \\\n          \"%r tag requires a single argument\" % \\\n          token.contents.split()[0]\n      return IncludeNode(template_name)\n    ```", "```py\n    class IncludeNode(template.Node):\n      def __init__(self, template_name):\n        self.template_name = template_name\n\n      def render(self, context):\n        try:\n          # Loading the template and rendering it\n          template_name = template.resolve_variable(\n            self. template_name, context)\n          included_template = get_template(\n            template_name\n          ).render(context)\n        except template.TemplateDoesNotExist:\n          included_template = \"\"\n        return included_template\n    ```", "```py\n    {% load utility_tags %}\n    {% try_to_include object.template_path %}\n    ```", "```py\n    {# templates/cms/start_page.html #}\n    {% with editorial_content_template_path=\"cms/plugins/editorial_content/start_page.html\" %}\n        {% placeholder \"main_content\" %}\n    {% endwith %}\n\n    {# templates/cms/plugins/editorial_content.html #}\n    {% load utility_tags %}\n\n    {% if editorial_content_template_path %}\n        {% try_to_include editorial_content_template_path %}\n    {% else %}\n        <div>\n            <!-- Some default presentation of\n                 editorial content plugin -->\n        </div>\n    {% endif %}\n    ```", "```py\n{% load utility_tags %}\n{% for object in object_list %}\n    {% try_to_include \"artists/includes/artist_item.html\" %}\n{% endfor %}\n```", "```py\n{# templates/artists/includes/artist_item.html #}\n{% extends \"utils/includes/item_base.html\" %}\n\n{% block item_title %}\n    {{ object.first_name }} {{ object.last_name }}\n{% endblock %}\n```", "```py\n{# templates/utils/includes/item_base.html #}\n{% load likes_tags %}\n\n<h3>{% block item_title %}{% endblock %}</h3>\n{% if request.user.is_authenticated %}\n    {% like_widget for object %}\n{% endif %}\n```", "```py\n    # utils/templatetags/utility_tags.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models\n    from django import template\n    register = template.Library()\n\n    ### TAGS ###\n\n    @register.tag\n    def get_objects(parser, token):\n        \"\"\"\n        Gets a queryset of objects of the model specified\n        by app and model names\n        Usage:\n            {% get_objects [<manager>.]<method> from\n    <app_name>.<model_name> [limit <amount>] as\n            <var_name> %}\n        Example:\n            {% get_objects latest_published from people.Person\n    limit 3 as people %}\n            {% get_objects site_objects.all from news.Article\n            limit 3 as articles %}\n            {% get_objects site_objects.all from news.Article\n             as articles %}\n        \"\"\"\n        amount = None\n        try:\n            tag_name, manager_method, str_from, appmodel, \\\n            str_limit, amount, str_as, var_name = \\\n                token.split_contents()\n        except ValueError:\n            try:\n                tag_name, manager_method, str_from, appmodel, \\\n                str_as, var_name = token.split_contents()\n            except ValueError:\n                raise template.TemplateSyntaxError, \\\n                    \"get_objects tag requires a following \"\\\n                    \"syntax: \"\\\n                    \"{% get_objects [<manager>.]<method> \"\\\n                    \"from <app_ name>.<model_name> \"\\\n                    \"[limit <amount>] as <var_name> %}\"\n        try:\n            app_name, model_name = appmodel.split(\".\")\n        except ValueError:\n            raise template.TemplateSyntaxError, \\\n                \"get_objects tag requires application name \"\\\n                \"and model name separated by a dot\"\n        model = models.get_model(app_name, model_name)\n        return ObjectsNode(\n            model, manager_method, amount, var_name\n        )\n    ```", "```py\n    class ObjectsNode(template.Node):\n        def __init__(\n            self, model, manager_method, amount, var_name\n        ):\n            self.model = model\n            self.manager_method = manager_method\n            self.amount = amount\n            self.var_name = var_name\n\n        def render(self, context):\n            if \".\" in self.manager_method:\n                manager, method = \\\n                    self.manager_method.split(\".\")\n            else:\n                manager = \"_default_manager\"\n                method = self.manager_method\n\n            qs = getattr(\n                getattr(self.model, manager),\n                method,\n                self.model._default_manager.none,\n            )()\n            if self.amount:\n                amount = template.resolve_variable(\n                    self.amount, context\n                )\n                context[self.var_name] = qs[:amount]\n            else:\n                context[self.var_name] = qs\n            return \"\"\n    ```", "```py\n{% load utility_tags %}\n{% get_objects all from news.Article as all_articles %}\n{% for article in all_articles %}\n    <a href=\"{{ article.get_url_path }}\">{{ article.title }}</a>\n{% endfor %}\n```", "```py\n# artists/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nSTATUS_CHOICES = (\n    (\"draft\", _(\"Draft\"),\n    (\"published\", _(\"Published\"),\n)\nclass ArtistManager(models.Manager):\n    def random_published(self):\n        return self.filter(status=\"published\").order_by(\"?\")\n\nclass Artist(models.Model):\n    # ...\n    status = models.CharField(_(\"Status\"), max_length=20, \n        choices=STATUS_CHOICES)\n    custom_manager =  ArtistManager()\n```", "```py\n{% load utility_tags %}\n{% get_objects custom_manager.random_published from artists.Artist limit 1 as random_artists %}\n{% for artist in random_artists %}\n    {{ artist.first_name }} {{ artist.last_name }}\n{% endfor %}\n```", "```py\n    # utils/templatetags/utility_tags.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import template\n    register = template.Library()\n\n    ### TAGS ###\n\n    @register.tag\n    def parse(parser, token):\n        \"\"\"\n        Parses the value as a template and prints it or\n        saves to a variable\n        Usage:\n            {% parse <template_value> [as <variable>] %}\n        Examples:\n            {% parse object.description %}\n            {% parse header as header %}\n            {% parse \"{{ MEDIA_URL }}js/\" as js_url %}\n        \"\"\"\n        bits = token.split_contents()\n        tag_name = bits.pop(0)\n        try:\n            template_value = bits.pop(0)\n            var_name = None\n            if len(bits) == 2:\n                bits.pop(0)  # remove the word \"as\"\n                var_name = bits.pop(0)\n        except ValueError:\n            raise template.TemplateSyntaxError, \\\n                \"parse tag requires a following syntax: \"\\\n                \"{% parse <template_value> [as <variable>] %}\"\n\n        return ParseNode(template_value, var_name)\n    ```", "```py\n    class ParseNode(template.Node):\n        def __init__(self, template_value, var_name):\n            self.template_value = template_value\n            self.var_name = var_name\n\n        def render(self, context):\n            template_value = template.resolve_variable(\n                self.template_value, context)\n            t = template.Template(template_value)\n            context_vars = {}\n            for d in list(context):\n                for var, val in d.items():\n                    context_vars[var] = val\n            result = t.render(template.RequestContext(\n                context[\"request\"], context_vars))\n            if self.var_name:\n                context[self.var_name] = result\n                return \"\"\n            return result\n    ```", "```py\n{% load utility_tags %}\n{% parse object.description %}\n```", "```py\n{% load utility_tags %}\n{% parse \"{{ STATIC_URL }}site/img/\" as img_path %}\n<img src=\"img/{{ img_path }}someimage.png\" alt=\"\" />\n```", "```py\n# conf/base.py or settings.py\nTEMPLATE_CONTEXT_PROCESSORS = (\n    \"django.contrib.auth.context_processors.auth\",\n    \"django.core.context_processors.debug\",\n    \"django.core.context_processors.i18n\",\n    \"django.core.context_processors.media\",\n    \"django.core.context_processors.static\",\n    \"django.core.context_processors.tz\",\n    \"django.contrib.messages.context_processors.messages\",\n \"django.core.context_processors.request\",\n)\n```", "```py\n    # utils/templatetags/utility_tags.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import urllib\n    from django import template\n    from django.utils.encoding import force_str\n    register = template.Library()\n\n    ### TAGS ###\n\n    @register.simple_tag(takes_context=True)\n    def modify_query(\n        context, *params_to_remove, **params_to_change\n    ):\n        \"\"\" Renders a link with modified current query\n        parameters \"\"\"\n        query_params = []\n        for key, value_list in \\\n            context[\"request\"].GET._iterlists():\n            if not key in params_to_remove:\n                # don't add key-value pairs for\n                # params_to_change\n                if key in params_to_change:\n                    query_params.append(\n                        (key, params_to_change[key])\n                    )\n                    params_to_change.pop(key)\n                else:\n                    # leave existing parameters as they were\n                    # if not mentioned in the params_to_change\n                    for value in value_list:\n                        query_params.append((key, value))\n        # attach new params\n        for key, value in params_to_change.items():\n            query_params.append((key, value))\n        query_string = context[\"request\"].path\n        if len(query_params):\n            query_string += \"?%s\" % urllib.urlencode([\n                (key, force_str(value))\n                for (key, value) in query_params if value\n            ]).replace(\"&\", \"&amp;\")\n        return query_string\n    ```", "```py\n    @register.simple_tag(takes_context=True)\n    def add_to_query(\n        context, *params_to_remove, **params_to_add\n    ):\n        \"\"\" Renders a link with modified current query\n        parameters \"\"\"\n        query_params = []\n        # go through current query params..\n        for key, value_list in \\\n            context[\"request\"].GET._iterlists():\n            if not key in params_to_remove:\n                # don't add key-value pairs which already\n                # exist in the query\n                if key in params_to_add and \\\n                unicode(params_to_add[key]) in value_list:\n                    params_to_add.pop(key)\n                for value in value_list:\n                    query_params.append((key, value))\n        # add the rest key-value pairs\n        for key, value in params_to_add.items():\n            query_params.append((key, value))\n        # empty values will be removed\n        query_string = context[\"request\"].path\n        if len(query_params):\n            query_string += \"?%s\" % urllib.urlencode([\n                (key, force_str(value))\n                for (key, value) in query_params if value\n            ]).replace(\"&\", \"&amp;\")\n        return query_string\n    ```", "```py\n    @register.simple_tag(takes_context=True)\n    def remove_from_query(context, *args, **kwargs):\n        \"\"\" Renders a link with modified current query\n        parameters \"\"\"\n        query_params = []\n        # go through current query params..\n        for key, value_list in \\\n            context[\"request\"].GET._iterlists():\n            # skip keys mentioned in the args\n            if not key in args:\n                for value in value_list:\n                    # skip key-value pairs mentioned in kwargs\n                    if not (key in kwargs and\n                      unicode(value) == unicode(kwargs[key])):\n                        query_params.append((key, value))\n        # empty values will be removed\n        query_string = context[\"request\"].path\n        if len(query_params):\n            query_string = \"?%s\" % urllib.urlencode([\n                (key, force_str(value))\n                for (key, value) in query_params if value\n            ]).replace(\"&\", \"&amp;\")\n        return query_string\n    ```", "```py\n{% load utility_tags %}\n<a href=\"{% modify_query page=6 %}\">6</a>\n```", "```py\n<a href=\"/artists/?category=fine-art&amp;page=6\">6</a>\n```", "```py\n{% load utility_tags i18n %}\n<a href=\"{% modify_query \"page\" category=\"sculpture\" %}\">{% trans \"Sculpture\" %}</a>\n```", "```py\n<a href=\"/artists/?category=sculpture\">Sculpture</a>\n```", "```py\n{% load utility_tags i18n %}\n<a href=\"{% add_to_query \"page\" category=\"sculpture\" %}\">{% trans \"Sculpture\" %}</a>\n```", "```py\n<a href=\"/artists/?category=fine-art&amp;category=sculpture\">Sculpture</a>\n```", "```py\n{% load utility_tags i18n %}\n<a href=\"{% remove_from_query \"page\" category=\"sculpture\" %}\"><span class=\"glyphicon glyphicon-remove\"></span> {% trans \"Sculpture\" %}</a>\n```", "```py\n<a href=\"/artists/?category=fine-art\"><span class=\"glyphicon glyphicon-remove\"></span> Sculpture</a>\n```"]