- en: Chapter 1. Getting Started with the Robot Framework
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第一章：Robot Framework入门
- en: 'In this chapter we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Definition and need for acceptance testing
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受测试的定义和需求
- en: Introduction and a brief history of the Robot Framework
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robot Framework的介绍和简要历史
- en: Components of the Robot Framework
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Robot Framework的组件
- en: Various installation methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的安装方法
- en: Different installation environments
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 不同的安装环境
- en: Creation and execution of a sample project
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 示例项目的创建和执行
- en: Brief description of the generated files
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成文件的简要描述
- en: This book introduces you to the Robot Framework, which is a Python-based, keyword-driven,
    and acceptance test automation framework. It is very flexible and easy to use
    and extend according to your intentions. Built to provide acceptance test regardless
    of the platform size and scope of the software to be tested, also known as System
    Under Test (SUT), it is an ideal software tool to structure and manage different
    tests as part of a comprehensive test suite. Since this tool utilizes and manages
    the tests as well as deals with the software under test, it is beneficial for
    both testers and developers alike. Today, with the rise of versatile software
    tools and greater emphasis on test-driven development, the line between tester
    and developer has become blurred. To learn and use this tool effectively, you
    will have to put yourself in the shoes of both tester as well as a developer.
    The Python and/or ports into Java and .Net framework such as, Jython and Ironpython
    are also required.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书向您介绍了Robot Framework，这是一个基于Python、以关键字驱动的、接受测试自动化框架。它非常灵活，易于使用和扩展，以满足您的需求。它旨在提供无论平台大小和待测试软件范围（也称为系统测试对象，SUT）如何的接受测试，是一个理想的软件工具，用于构建和管理不同测试，作为综合测试套件的一部分。由于此工具利用和管理测试，同时处理待测试的软件，因此对测试人员和开发人员都有益。如今，随着多功能软件工具的兴起和对测试驱动开发的重视，测试人员和开发者之间的界限已经变得模糊。为了有效地学习和使用此工具，您必须站在测试人员和开发人员的角度。还需要Python以及将其导入Java和.NET框架（如Jython和Ironpython）。
- en: As with any other physical creation, software is built with an aim of directly
    or indirectly changing our lives to solve a task or desire of someone. However,
    programming is an abstract science that is not dependent upon its end-user's desires,
    commonly referred to as garbage in – garbage out. A difference between the created
    software and its expected behavior by its user determines its implementation by
    the user. Thus, the end user must accept the software that is intended to be sold
    to him. However, the user often does not wants to be involved in the finer details
    and just needs to get the things done as he envisages with each iteration of the
    software. In order to perform this, the interactions that the end user does with
    the software is needed to be verified beforehand, which has led to creation of
    testing especially designed to perform this process of testing and verification.
    This process is known as acceptance testing. However, as the software grows, more
    and more, acceptance tests come up that give rise to a sense of chaos as upon
    failure of a test, proper context is not easily identified.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 就像任何其他物理创造一样，软件的构建旨在直接或间接地改变我们的生活，以解决某人的任务或需求。然而，编程是一种抽象的科学，它不依赖于其最终用户的愿望，通常被称为垃圾输入-垃圾输出。创建的软件与其用户期望的行为之间的差异决定了用户对其的实现。因此，最终用户必须接受打算卖给他/她的软件。然而，用户通常不希望参与细节，只需要按照软件的每次迭代所设想的方式完成任务。为了执行此操作，需要验证最终用户与软件的交互，这导致了专门用于执行此测试和验证过程的测试的创建。这个过程被称为接受测试。然而，随着软件的增长，越来越多的接受测试出现，导致在测试失败时，无法轻易识别出正确的上下文。
- en: As the scale and complexity of software has grown up, so has the need for its
    quality assurance. Manual tests often are quite easy to set up, but they give
    diminishing returns of scale and are only feasible up to an extent, where a tester
    can manually work through different scenarios and identify bugs and errors in
    time without affecting the delivery schedule of the resultant product.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 随着软件规模和复杂性的增长，对其质量保证的需求也在增加。手动测试通常很容易设置，但它们在规模上的回报却在减少，并且只有在一定程度上可行，即测试人员可以手动处理不同的场景，及时识别出错误和缺陷，而不会影响最终产品的交付时间表。
- en: The need for acceptance testing
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 接受测试的需求
- en: 'For tests that are large in size or complexity, a structured approach can help
    you to pinpoint the errors, which arise while testing for the system is carried
    out under test''s acceptance. Increase in the development speed and efficiency
    as well as create accountability for various features of the software are also
    taken into consideration. These benefits can be summarized as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于大型或复杂的测试，采用结构化方法可以帮助您在系统测试接受阶段精确地定位错误。同时，提高开发速度和效率以及为软件的各种特性创造问责制也被考虑在内。这些好处可以总结如下：
- en: Pinpoint application failure
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 精确定位应用程序故障
- en: Reduced error rate
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 降低错误率
- en: Provide automation and reusability
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 提供自动化和可重用性
- en: Create a test audit trail
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建测试审计跟踪
- en: Pinpoint application failure
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 精确定位应用程序故障
- en: Through testing, it is possible for you to identify complete or partial failures
    as well as identify bottlenecks in performance that might have slipped during
    development or in other forms of testing.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 通过测试，您可以识别出完全或部分故障，以及识别出在开发过程中或其他测试形式中可能出现的性能瓶颈。
- en: Reducing the error rate
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 降低错误率
- en: Through automation, the predetermined steps involved to run the program can
    be performed exactly as desired with no interference as well as no extra or erroneous
    user interactions. This is different from monkey testing as in acceptance testing;
    only the happy path scenario is to be dealt with.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 通过自动化，可以精确地执行运行程序所需的预定步骤，没有任何干扰以及没有额外的或错误的用户交互。这与接受测试中的猴子测试不同；只需处理快乐路径场景。
- en: Providing automation and re-use
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 提供自动化和重用
- en: Testers or any other human resources are expensive than computation cycles.
    So it is best to automate the repetitive tasks, which will also reduce time that
    is normally spent in typing, clicking, and digesting the user interface as well
    by the test user. Furthermore, test can be reused or iterated over, which reduces
    the amount of tests while making sure that the complete acceptance testing remains
    while you can focus on other problems.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 测试人员或其他人力资源比计算周期更昂贵。因此，最好自动化重复性任务，这将减少测试用户在输入、点击和消化用户界面时通常花费的时间。此外，测试可以重用或迭代，这减少了测试数量，同时确保完整的接受测试仍然存在，您可以专注于其他问题。
- en: Creating the a test audit trail
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建测试审计跟踪
- en: By keeping a record of various test results, you can gather interesting facts
    about acceptance testing such as how much of the system under test is covered
    under acceptance tests as well as how many failures were reported. This can be
    useful in changing management as well as re-engineering/modernization of the existing
    software.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 通过记录各种测试结果，您可以收集有关接受测试的有趣事实，例如测试覆盖了多少系统，以及报告了多少次故障。这可以在管理变更以及现有软件的重构/现代化中非常有用。
- en: What is the Robot Framework?
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Robot Framework？
- en: The Robot Framework is an open source, general purpose test automation framework
    used for acceptance testing and streamlines it into mainstream development, giving
    rise to the concept of **acceptance test driven development** (**ATDD**). While
    commercial and in-house automated testing tools have been used traditionally to
    provide this kind of test automation. It suffers from the problem of reinventing
    the wheel and vendor lock-in as well as lack of flexibility to use tests with
    different software and under different circumstances. It stands out from other
    tools used for the same purpose by working on easy-to-use tabular test files that
    provide different approaches towards test creation. As different projects require
    acceptance testing in various ways, there is a need to make tests flexible, as
    the Robot Framework is flexible and extensible enough for handling these scenarios.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework 是一个开源的通用测试自动化框架，用于接受测试，并将其简化为主流开发，从而产生了**接受测试驱动开发**（**ATDD**）的概念。虽然商业和内部自动化测试工具传统上被用来提供这种类型的测试自动化，但它存在重新发明轮子和供应商锁定以及缺乏在不同软件和不同情况下使用测试的灵活性的问题。它通过易于使用的表格测试文件脱颖而出，这些文件提供了不同的测试创建方法。由于不同的项目以不同的方式需要接受测试，因此需要使测试灵活，因为
    Robot Framework 足够灵活和可扩展，可以处理这些场景。
- en: It is the extensible nature of the tool that makes it so versatile that it can
    be adjusted into different scenarios and used with different software backend.
    While it is most popularly used with selenium as a website automation tool, it
    can also be used with image-based testing software like **sikuli** and also with
    software that require remote access over multiple machines while only running
    the tests over a given machine. All of these can be made easily available through
    creation of custom libraries, which link up the Robot Framework configuration
    code keywords with tasks associated with whatever software the Robot Framework
    is using. On the other hand, the output that the framework produces can also be
    used in multiple ways, first of which is the HTML report and log file that not
    only produces a XUnit styled output, but also contains test operations in detail
    while signifying the execution order and test hierarchy of entire tests. This
    contrasts with the optional `.xml` generation that can be useful in further manipulation
    of the processes. One such example is creation of customized programs that use
    the information obtained by running tests to create a wide variety of results.
    Another example is the log files' subsequent use in continuous delivery environments
    that can allow a build to continue or fail based on all the individual acceptance
    tests which are in use.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 正是工具的可扩展性使其如此多功能，可以调整到不同的场景，并与不同的软件后端一起使用。虽然它最常与selenium作为网站自动化工具一起使用，但它也可以与基于图像的测试软件如**sikuli**一起使用，还可以与需要通过多台机器远程访问的软件一起使用，而只需在给定的机器上运行测试。所有这些都可以通过创建自定义库轻松实现，这些库将机器人框架配置代码关键字与机器人框架使用的相关任务链接起来。另一方面，框架产生的输出也可以以多种方式使用，首先是HTML报告和日志文件，它不仅产生XUnit样式的输出，而且还包含详细的测试操作，同时表示整个测试的执行顺序和测试层次结构。这与可选的`.xml`生成形成对比，后者在进一步处理过程中可能很有用。一个这样的例子是创建自定义程序，这些程序使用运行测试获得的信息来创建各种结果。另一个例子是日志文件在持续交付环境中的后续使用，这可以使构建根据所有正在使用的单个验收测试继续或失败。
- en: It was created by *Pekka Klärck* as part of his master's thesis ([http://eliga.fi/Thesis-Pekka-Laukkanen.pdf](http://http://eliga.fi/Thesis-Pekka-Laukkanen.pdf))
    and was developed within Nokia Siemens Networks in 2005\. Its second version has
    been open sourced under Apache License, Version 2 since 2008 and has an active
    community of volunteers. It is available at [http://code.google.com/p/robotframework](http://code.google.com/p/robotframework).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 它是由*佩卡·克拉克*在他的硕士论文中创建的，作为其论文的一部分（[http://eliga.fi/Thesis-Pekka-Laukkanen.pdf](http://eliga.fi/Thesis-Pekka-Laukkanen.pdf)），并于2005年在诺基亚西门子网络公司内部开发。自2008年以来，其第二个版本已在Apache许可证2.0下开源，并拥有一个活跃的志愿者社区。它可在[http://code.google.com/p/robotframework](http://code.google.com/p/robotframework)找到。
- en: The Robot Framework ecosystem
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 机器人框架生态系统
- en: 'The following diagram presents a conceptual, high-level overview of the framework,
    and offers an insight into various components involved:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 下图展示了框架的概念性、高级概述，并提供了对涉及的各种组件的深入了解：
- en: '![The Robot Framework ecosystem](img/3033_01_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![机器人框架生态系统](img/3033_01_01.jpg)'
- en: 'This can be explained broadly as follows:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以广泛解释如下：
- en: '**Tests & Test Data**: This is the configuration of the tests, the closest
    to what most testers of the framework will be. It comprises test and data files
    and folders as well as the contents of those which dictate the test execution.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试与测试数据**：这是测试的配置，对于框架的大多数测试人员来说是最接近的。它包括测试和数据文件以及文件夹，以及那些指导测试执行的内容。'
- en: '**Test Results**: These are the end products of the tests, which are used to
    determine the results of tests as well as logs that can be used to assess various
    portions of the test.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试结果**：这是测试的最终产品，用于确定测试结果以及可以用来评估测试各个部分的日志。'
- en: '**Robot Framework**: This is the core framework that performs the actual heavy
    lifting to get things done.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**机器人框架**：这是执行实际繁重工作的核心框架。'
- en: '**Test tool driver**: This provides communication between the framework and
    the actual tools in place. It can be custom-tailored to meet specific requirements
    by the testing tool in place.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试工具驱动程序**：它提供了框架与实际工具之间的通信。它可以根据现有测试工具的具体要求进行定制，以满足特定需求。'
- en: '**Testing Tool**: This is the actual software that is used to perform acceptance
    testing.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试工具**：这是用于执行验收测试的实际软件。'
- en: '**End Application (System under test)**: This is the actual software that is
    to be tested for usability for its acceptance by the client or the end user.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**结束应用程序（待测试的系统）**：这是实际要测试其可用性以便客户或最终用户接受的实际软件。'
- en: Installing and setting up the Robot Framework
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装和设置 Robot Framework
- en: The current version of the Robot Framework requires Python 2.7 for setup.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework 的当前版本需要 Python 2.7 来进行设置。
- en: As of now, only pybot script gets created from a Python environment. In case
    of other environments, only the corresponding execution script gets created. If
    you happen to have multiple environments, then installation of different scripts
    is also possible. This differs from the previous versions where on installation,
    both pybot and jybot scripts were installed.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，只有从 Python 环境创建 pybot 脚本。在其他环境中，仅创建相应的执行脚本。如果您有多个环境，则也可以安装不同的脚本。这与之前的版本不同，在安装时，pybot
    和 jybot 脚本都会被安装。
- en: 'For custom installation, you will require Python, Jython, or Ironpython pre-installed;
    and environment `PATH` variable set correctly as the Robot Framework will use
    the first Python binary available on `PATH` or the exact library if supplied with
    the python command. You can verify this from the command line:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于自定义安装，您需要预先安装 Python、Jython 或 Ironpython；并且正确设置环境 `PATH` 变量，因为 Robot Framework
    将使用 `PATH` 上可用的第一个 Python 二进制文件或如果通过 python 命令提供，则使用确切的库。您可以从命令行验证此信息：
- en: '[PRE0]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: On the project downloads page, there are various options, listed here under
    the following self-explanatory headings.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在项目下载页面，有各种选项，以下列出了以下自解释的标题。
- en: Source installation
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 源安装
- en: 'To use the source, you can either download the zip containing sources or clone
    the project using mercurial hg clone: [https://code.google.com/p/robotframework](https://code.google.com/p/robotframework).'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用源代码，您可以下载包含源代码的 zip 文件，或使用 mercurial hg clone：[https://code.google.com/p/robotframework](https://code.google.com/p/robotframework)
    进行项目克隆。
- en: This will clone the project in the current directory and then you can either
    straightaway install the project, or make some modifications for customizing the
    framework.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在当前目录中克隆项目，然后您可以直接安装项目，或者进行一些修改以自定义框架。
- en: 'Now go to the folder where source is checked out/unzipped and perform the following
    commands based upon the environment present:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 现在转到已检出/解压源代码的文件夹，根据现有环境执行以下命令：
- en: '[PRE1]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding command installs the Python based version with pybot and rebot
    runner scripts.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令安装了基于 Python 的版本，包括 pybot 和 rebot 运行脚本。
- en: '[PRE2]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding command installs the Jython based version, with jybot and jyrebot
    scripts.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令安装了基于 Jython 的版本，包括 jybot 和 jyrebot 脚本。
- en: '[PRE3]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The preceding command installs the Ironpython based runtime with ipybot and
    ipyrebot scripts.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令安装了基于 Ironpython 的运行时，包括 ipybot 和 ipyrebot 脚本。
- en: 'If you see this folder, along with standard `setup.py,` there is another file,
    `install.py`, that can be used to install (it is the similar as installation from
    `setup.py`), reinstall, or uninstall the framework that can be used as follows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看到此文件夹，以及标准的 `setup.py`，还有一个名为 `install.py` 的文件，可以用来安装（它与从 `setup.py` 安装类似），重新安装或卸载框架，可以使用以下方式：
- en: '[PRE4]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To install with Jython or IronPython, replace `python` with `jython` or `ipy`
    respectively in the command. You may have to use `sudo/run` console as administrator
    if you run into any authentication errors, depending upon the user privileges.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Jython 或 IronPython 安装，请在命令中将 `python` 替换为 `jython` 或 `ipy`。如果您遇到任何认证错误，可能需要使用
    `sudo/run` 控制台作为管理员运行，具体取决于用户权限。
- en: '![Source installation](img/3033_01_02.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![源安装](img/3033_01_02.jpg)'
- en: Installing from source with python
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 从源安装
- en: One-click graphical installer
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一键图形安装程序
- en: If you happen to be running Windows XP (32-bit), than you will want to use the
    one-click installer that installs the Robot Framework as well as Python and optionally,
    Jython and sets the paths without requiring any intervention. Other graphical
    installers for windows also exist in 32 and 64 bit versions.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您正在运行 Windows XP（32 位），则可能希望使用一键安装程序，该安装程序将安装 Robot Framework 以及 Python 和可选的
    Jython，并设置路径而无需任何干预。Windows 的其他图形安装程序也存在 32 位和 64 位版本。
- en: Java environment installation
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 环境安装
- en: You can use the standalone jar that contains a bundled Jython as well as the
    framework. You just need to have Java installed on your system to execute the
    runnable jar for its installation.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用包含捆绑 Jython 以及框架的独立 jar 文件。您只需在系统上安装 Java，即可执行可运行的 jar 文件以进行安装。
- en: 'In this method, instead of a command, the jar file is executed:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在此方法中，不是命令，而是执行jar文件：
- en: '[PRE5]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The Python package installation
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python包安装
- en: The pip install mechanism only requires, you to have the Python and package
    managers such as `easy_install` or `pip` installed on your computer. To install
    this, you just have to type `pip install robotframework` or `easy_install robotframework`
    from the command prompt and the Python based Robot Framework gets installed.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: pip安装机制仅要求你在计算机上安装Python和包管理器，如`easy_install`或`pip`。要安装此软件，你只需在命令提示符下输入`pip
    install robotframework`或`easy_install robotframework`，然后基于Python的Robot Framework就会安装。
- en: Note that, for Python to run correctly, you'll need `elementtree` module as
    the default one is already broken.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，为了Python能够正确运行，你需要`elementtree`模块，因为默认的模块已经损坏。
- en: The user can install more than one environment simultaneously on a computer
    and use the specified commands separately without affecting either of the installations.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 用户可以在计算机上同时安装多个环境，并分别使用指定的命令，而不会影响任何安装。
- en: Support for different runtimes
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 支持不同的运行时
- en: The Robot Framework not only works on the native python (`CPython/pypy` installations
    ), but also supports Java and .NET based runtimes in the form of Jython and ironpython
    respectively. While there are some features that are exclusive to native Python-or
    Jython-based Robot Framework installations, most of the functionality is equivalent
    on all the runtimes. As people might have different OS and application software
    a stack setup according to their needs or desires, so they can integrate this
    tool in their existing runtime without requiring a separate runtime.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: Robot Framework不仅可以在原生Python（CPython/pypy）安装上运行，还可以通过Jython和ironpython分别支持基于Java和.NET的运行时。虽然有一些功能仅限于原生Python或基于Jython的Robot
    Framework安装，但大多数功能在所有运行时上都是等效的。由于人们可能拥有不同的操作系统和应用软件，因此可以根据他们的需求或愿望设置一个堆栈，这样他们就可以在不需要单独运行时的情况下将此工具集成到现有的运行时中。
- en: 'Based upon the installer environment used, the Robot Framework will create
    appropriate startup and post-processing scripts:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 根据使用的安装程序环境，Robot Framework将创建适当的启动和后处理脚本：
- en: '| Environment | Startup command | Post-processing command |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
  zh: '| 环境 | 启动命令 | 后处理命令 |'
- en: '| --- | --- | --- |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- |'
- en: '| Python | `pybot` | `rebot` |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
  zh: '| Python | `pybot` | `rebot` |'
- en: '| Jython | `jybot` | `jyrebot` |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
  zh: '| Jython | `jybot` | `jyrebot` |'
- en: '| Iron Python | `ipybot` | `ipyrebot` |'
  id: totrans-78
  prefs: []
  type: TYPE_TB
  zh: '| Iron Python | `ipybot` | `ipyrebot` |'
- en: 'In addition to these commands used in starting the execution, the Robot Framework
    can directly be started through the `robot.run` module itself if the standard
    Robot Framework is installed. This can also be used instead of the standard commands
    as the commands also call the module internally. The module can be called if the
    Python command in use is the one that has the Robot Framework installed:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 除了这些用于启动执行的命令外，如果安装了标准Robot Framework，可以直接通过`robot.run`模块本身启动Robot Framework。这也可以用作标准命令的替代，因为命令也内部调用模块。如果使用的Python命令是安装了Robot
    Framework的命令，则可以调用该模块：
- en: '[PRE6]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This is handy if the Robot Framework is called by some the Python script. Instead
    of executing the scripts separately, you can call the framework from inside the
    same program easily.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果Robot Framework被某个Python脚本调用，这很有用。你不需要分别执行脚本，可以轻松地从同一程序内部调用框架。
- en: The post processing command is useful to recreate test executions in the long
    run. After the test has been executed, you can save the XML file generated as
    output without saving any other file. To recreate the report and log files again
    in future, the `rebot` command can be used which takes the XML file as an argument
    and results in the generation of the log and report files without recalling or
    running the actual tests again.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 后处理命令对于长期重新创建测试执行很有用。测试执行后，你可以保存生成的XML文件作为输出，而不需要保存任何其他文件。为了将来再次重新创建报告和日志文件，可以使用`rebot`命令，该命令将XML文件作为参数，并生成日志和报告文件，而无需重新调用或运行实际的测试。
- en: Command details
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 命令详情
- en: 'The `Pybot` command provides the following major options:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`Pybot`命令提供了以下主要选项：'
- en: '| Options | Description |'
  id: totrans-85
  prefs: []
  type: TYPE_TB
  zh: '| 选项 | 描述 |'
- en: '| --- | --- |'
  id: totrans-86
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- |'
- en: '| `-N --name <name>` | Sets the name of topmost test suite in the test hierarchy—thereby
    effectively customizes those areas. |'
  id: totrans-87
  prefs: []
  type: TYPE_TB
  zh: '| `-N --name <name>` | 设置测试层次结构中最顶层测试套件的名称——从而有效地自定义这些区域。|'
- en: '| `-D --doc <documentation>` | Sets the documentation of the top level test
    suite. |'
  id: totrans-88
  prefs: []
  type: TYPE_TB
  zh: '| `-D --doc <documentation>` | 设置顶级测试套件的文档。|'
- en: '| `-M --metadata [name:value]` | Sets the metadata of the top level test suite.
    |'
  id: totrans-89
  prefs: []
  type: TYPE_TB
  zh: '| `-M --metadata [name:value]` | 设置顶级测试套件的元数据。|'
- en: '| `-G --settag <tagname>` | Sets the given tag to all executed test cases.
    |'
  id: totrans-90
  prefs: []
  type: TYPE_TB
  zh: '| `-G --settag <tagname>` | 将给定的标签设置到所有执行的测试用例。|'
- en: '| `-t --test name` | Selects the test cases available by performing a pattern
    match against them. |'
  id: totrans-91
  prefs: []
  type: TYPE_TB
  zh: '| `-t --test name` | 通过对它们执行模式匹配来选择可用的测试用例。|'
- en: '| `-s --suite name` | Selects the specified test suite by its name and also
    allows for the test reports to have the desired name instead of the name picked
    up by file/folder name. |'
  id: totrans-92
  prefs: []
  type: TYPE_TB
  zh: '| `-s --suite name` | 通过其名称选择指定的测试套件，并允许测试报告具有所需的名称，而不是由文件/文件夹名称选择的名称。|'
- en: '| `-i --include tag` | Selects a test for execution on the basis of its tag
    name. |'
  id: totrans-93
  prefs: []
  type: TYPE_TB
  zh: '| `-i --include tag` | 根据其标签名称选择要执行的测试。|'
- en: '| `-e --exclude tag` | Opposite of include tag. |'
  id: totrans-94
  prefs: []
  type: TYPE_TB
  zh: '| `-e --exclude tag` | 与包含标签相反。|'
- en: '| `-R --runfailed output` | Selected failed tests of earlier test runs have
    another goal. |'
  id: totrans-95
  prefs: []
  type: TYPE_TB
  zh: '| `-R --runfailed output` | 选择之前测试运行中失败的测试有另一个目标。|'
- en: '| `-c --critical tag` | Tests having this tag are considered critical (default
    for all tests). |'
  id: totrans-96
  prefs: []
  type: TYPE_TB
  zh: '| `-c --critical tag` | 具有此标签的测试被认为是关键的（所有测试的默认值）。|'
- en: '| `-n --noncritical tag` | Tests having this tag are overridden to be of non-critical
    type. |'
  id: totrans-97
  prefs: []
  type: TYPE_TB
  zh: '| `-n --noncritical tag` | 具有此标签的测试被覆盖为非关键类型。|'
- en: '| `-v --variable name:value` | Set variables in tests, only scalar variables(${})
    are supported. |'
  id: totrans-98
  prefs: []
  type: TYPE_TB
  zh: '| `-v --variable name:value` | 在测试中设置变量，仅支持标量变量（${}）。|'
- en: '| `-V --variablefile path` | Specify explicitly the file that contains variables.
    |'
  id: totrans-99
  prefs: []
  type: TYPE_TB
  zh: '| `-V --variablefile path` | 明确指定包含变量的文件。|'
- en: '| `-d --output dir` | Specify the desired directory where resultant files are
    placed. |'
  id: totrans-100
  prefs: []
  type: TYPE_TB
  zh: '| `-d --output dir` | 指定结果文件放置的期望目录。|'
- en: '| `-o --output file` | The generated XML output file. |'
  id: totrans-101
  prefs: []
  type: TYPE_TB
  zh: '| `-o --output file` | 生成的 XML 输出文件。|'
- en: '| `-l --log file` | The generated HTML log file. |'
  id: totrans-102
  prefs: []
  type: TYPE_TB
  zh: '| `-l --log file` | 生成的 HTML 日志文件。|'
- en: '| `-r --report file` | The generated HTML log file. |'
  id: totrans-103
  prefs: []
  type: TYPE_TB
  zh: '| `-r --report file` | 生成的 HTML 日志文件。|'
- en: '| `-x --xunit file` | xUnit compatible result file (not created by default).
    |'
  id: totrans-104
  prefs: []
  type: TYPE_TB
  zh: '| `-x --xunit file` | 与 xUnit 兼容的结果文件（默认不创建）。|'
- en: '| `-b --debugginge rake` | Debug file written during the execution(not created
    by default). |'
  id: totrans-105
  prefs: []
  type: TYPE_TB
  zh: '| `-b --debugginge rake` | 执行过程中写入的调试文件（默认不创建）。|'
- en: '| `-T --timestampoutputs` | Adds timestamp and provides a custom title to all
    output files. |'
  id: totrans-106
  prefs: []
  type: TYPE_TB
  zh: '| `-T --timestampoutputs` | 为所有输出文件添加时间戳并提供自定义标题。|'
- en: '| `-L --Loglevel` | Threshold level for logging and logging and test order
    customization. |'
  id: totrans-107
  prefs: []
  type: TYPE_TB
  zh: '| `-L --Loglevel` | 日志和日志测试顺序自定义的阈值级别。|'
- en: '| `-W --monitorwidth` | Specify the width of monitor output. |'
  id: totrans-108
  prefs: []
  type: TYPE_TB
  zh: '| `-W --monitorwidth` | 指定监视输出宽度。|'
- en: '| `-C --monitotcolors` | Specify whether to use color on console or not. |'
  id: totrans-109
  prefs: []
  type: TYPE_TB
  zh: '| `-C --monitotcolors` | 指定是否在控制台使用颜色。|'
- en: '| `-K --monitormarkers` | Specify test success on console for each test that
    passes. |'
  id: totrans-110
  prefs: []
  type: TYPE_TB
  zh: '| `-K --monitormarkers` | 为每个通过测试指定在控制台上的测试成功。|'
- en: '| `-P --pythonpath path` | Additional locations to search test libraries from.
    |'
  id: totrans-111
  prefs: []
  type: TYPE_TB
  zh: '| `-P --pythonpath path` | 搜索测试库的附加位置。|'
- en: '| `-E -escape what` | Specify escape characters in console with common representation.
    |'
  id: totrans-112
  prefs: []
  type: TYPE_TB
  zh: '| `-E -escape what` | 使用常见表示指定控制台中的转义字符。|'
- en: '| `-A --argumentfile path` | Specify a text file to read more arguments in
    tests. |'
  id: totrans-113
  prefs: []
  type: TYPE_TB
  zh: '| `-A --argumentfile path` | 指定一个文本文件以在测试中读取更多参数。|'
- en: '| `-h -? --help` | Prints detailed help for the command. |'
  id: totrans-114
  prefs: []
  type: TYPE_TB
  zh: '| `-h -? --help` | 打印命令的详细帮助。|'
- en: '| `--version` | Prints the version of the installed Robot Framework. |'
  id: totrans-115
  prefs: []
  type: TYPE_TB
  zh: '| `--version` | 打印已安装的 Robot Framework 的版本。|'
- en: A small exercise
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个小练习
- en: To demonstrate the Robot Framework, we will create a simple dummy application
    as follows:.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示 Robot Framework，我们将创建一个简单的虚拟应用程序，如下所示：
- en: Create a folder named `simpleapp`, this will serve as the application root folder.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `simpleapp` 的文件夹，这将成为应用程序的根文件夹。
- en: Inside this, create a folder named `testsuites`, this will contain all the test
    configuration files.
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在其中创建一个名为 `testsuites` 的文件夹，这将包含所有测试配置文件。
- en: 'Within the `testsuites` folder create a file, `Test_Case_1.txt`, with the following
    contents:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `testsuites` 文件夹中创建一个名为 `Test_Case_1.txt` 的文件，内容如下：
- en: '[PRE7]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-122
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that there are two spaces before and after the log keyword.
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意日志关键字前后有两个空格。
- en: Now run the project by calling Pybot script and passing the `testsuites` folder
    as an argument. You should get something similar to the following screenshot:![A
    small exercise](img/3033_01_03.jpg)
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在通过调用 Pybot 脚本并传递 `testsuites` 文件夹作为参数来运行项目。你应该得到以下截图类似的结果：![一个小练习](img/3033_01_03.jpg)
- en: This confirms that the project has run successfully. You can view the results
    and log from generated HTML pages and perform future calculations over the data
    by using the XML file.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 这确认了项目已成功运行。你可以通过生成的 HTML 页面查看结果和日志，并使用 XML 文件对数据进行未来的计算。
- en: 'As we used a simple log statement, you get a logged message in the out log,
    as shown in the following screenshot:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们使用了简单的日志语句，你会在输出日志中看到日志消息，如下截图所示：
- en: '![A small exercise](img/3033_01_04.jpg)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![一个小练习](img/3033_01_04.jpg)'
- en: The generated XML is also easy-to-read (as shown in the following screenshot),
    which can then be used by any other external tool as an input parameter—thereby
    reducing the human intervention between different stages of testing if this process
    is also automated.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 生成的 XML 也易于阅读（如下截图所示），然后可以被任何其他外部工具作为输入参数使用——如果这个过程也被自动化，那么可以减少测试不同阶段之间的人工干预。
- en: '![A small exercise](img/3033_01_05.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![一个小练习](img/3033_01_05.jpg)'
- en: Summary
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we studied the need for acceptance test-driven development
    and how can we use the Robot Framework to achieve it. Various methods of installation
    were discussed over the supported platforms namely Python and its ported equivalents
    in form of Jython and Ironpython. We then proceed with exploring various commands
    that are available to perform various tasks as well as their possibilities. Later
    we created and run a basic test over the Robot Framework that validated the correctness
    of our setup. Lastly we examined the output files generated to get a look and
    feel of the framework.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们研究了接受测试驱动开发的需求以及我们如何使用 Robot Framework 来实现它。讨论了在支持的平台上（即 Python 及其以 Jython
    和 Ironpython 形式移植的等效版本）的安装方法。然后我们继续探索可用于执行各种任务的各种命令及其可能性。后来我们创建并运行了一个基本的测试，以验证我们设置的准确性。最后，我们检查了生成的输出文件，以了解框架的外观和感觉。
- en: Now that the basics have been covered, it is time for us to learn about the
    syntax, the different available actions, and different files involved in the Robot
    Framework project; which will enable us to write tests with various formats and
    be aware of the various options that are allowable in tests.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 现在基础知识已经覆盖，是我们学习 Robot Framework 项目的语法、不同可用的操作以及涉及的不同文件的时候了；这将使我们能够以各种格式编写测试，并了解测试中允许的各种选项。
