["```py\n    $ pip install fastapi[all]\n    ```", "```py\n    $ pip install pytest\n    ```", "```py\n    id,title,description,status\n    1,Task One,Description One,Incomplete\n    2,Task Two,Description Two,Ongoing\n    ```", "```py\n    from pydantic import BaseModel\n    class Task(BaseModel):\n        title: str\n        description: str\n        status: str\n    class TaskWithID(Task):\n        id: int\n    ```", "```py\n    import csv\n    from typing import Optional\n    from models import Task, TaskWithID\n    DATABASE_FILENAME = \"tasks.csv\"\n    column_fields = [\n        \"id\", \"title\", \"description\", \"status\"\n    ]\n    def read_all_tasks() -> list[TaskWithID]:\n        with open(DATABASE_FILENAME) as csvfile:\n            reader = csv.DictReader(\n                csvfile,\n            )\n            return [TaskWithID(**row) for row in reader]\n    ```", "```py\n    def read_task(task_id) -> Optional[TaskWithID]:\n        with open(DATABASE_FILENAME) as csvfile:\n            reader = csv.DictReader(\n                csvfile,\n            )\n            for row in reader:\n                if int(row[\"id\"]) == task_id:\n                    return TaskWithID(**row)\n    ```", "```py\n    def get_next_id():\n        try:\n            with open(DATABASE_FILENAME, \"r\") as csvfile:\n                reader = csv.DictReader(csvfile)\n                max_id = max(\n                    int(row[\"id\"]) for row in reader\n                )\n                return max_id + 1\n        except (FileNotFoundError, ValueError):\n            return 1\n    ```", "```py\n    def write_task_into_csv(\n        task: TaskWithID\n    ):\n        with open(\n            DATABASE_FILENAME, mode=\"a\", newline=\"\"\n        ) as file:\n            writer = csv.DictWriter(\n                file,\n                fieldnames=column_fields,\n            )\n            writer.writerow(task.model_dump())\n    ```", "```py\n    def create_task(\n        task: Task\n    ) -> TaskWithID:\n        id = get_next_id()\n        task_with_id = TaskWithID(\n            id=id, **task.model_dump()\n        )\n        write_task_into_csv(task_with_id)\n        return task_with_id\n    ```", "```py\n    def modify_task(\n        id: int, task: dict\n    ) -> Optional[TaskWithID]:\n        updated_task: Optional[TaskWithID] = None\n        tasks = read_all_tasks()\n        for number, task_ in enumerate(tasks):\n            if task_.id == id:\n                tasks[number] = (\n                    updated_task\n                ) = task_.model_copy(update=task)\n        with open(\n            DATABASE_FILENAME, mode=\"w\", newline=\"\"\n        ) as csvfile:  # rewrite the file\n            writer = csv.DictWriter(\n                csvfile,\n                fieldnames=column_fields,\n            )\n            writer.writeheader()\n            for task in tasks:\n                writer.writerow(task.model_dump())\n        if updated_task:\n            return updated_task\n    ```", "```py\n    def remove_task(id: int) -> bool:\n        deleted_task: Optional[Task] = None\n        tasks = read_all_tasks()\n        with open(\n            DATABASE_FILENAME, mode=\"w\", newline=\"\"\n        ) as csvfile:  # rewrite the file\n            writer = csv.DictWriter(\n                csvfile,\n                fieldnames=column_fields,\n            )\n            writer.writeheader()\n            for task in tasks:\n                if task.id == id:\n                    deleted_task = task\n                    continue\n                writer.writerow(task.model_dump())\n        if deleted_task:\n            dict_task_without_id = (\n                deleted_task.model_dump()\n            )\n            del dict_task_without_id[\"id\"]\n            return Task(**dict_task_wihtout_id)\n    ```", "```py\n    from fastapi import FastAPI, HTTPException\n    from models import (\n        Task,\n        TaskWithID,\n    )\n    from operations import read_all_tasks\n    app = FastAPI()\n    @app.get(\"/tasks\", response_model=list[TaskWithID])\n    def get_tasks():\n        tasks = read_all_tasks()\n        return tasks\n    ```", "```py\n    @app.get(\"/task/{task_id}\")\n    def get_task(task_id: int):\n        task = read_task(task_id)\n        if not task:\n            raise HTTPException(\n                status_code=404, detail=\"task not found\"\n            )\n        return task\n    ```", "```py\n    from operations import create_task\n    @app.post(\"/task\", response_model=TaskWithID)\n    def add_task(task: Task):\n        return create_task(task)\n    ```", "```py\n    from operations import modify_task\n    class UpdateTask(BaseModel):\n        title: str | None = None\n        description: str | None = None\n        status: str | None = None\n    @app.put(\"/task/{task_id}\", response_model=TaskWithID)\n    def update_task(\n        task_id: int, task_update: UpdateTask\n    ):\n        modified = modify_task(\n            task_id,\n            task_update.model_dump(exclude_unset=True),\n        )\n        if not modified:\n            raise HTTPException(\n                status_code=404, detail=\"task not found\"\n            )\n        return modified\n    ```", "```py\n    from operations import remove_task\n    @app.delete(\"/task/{task_id}\", response_model=Task)\n    def delete_task(task_id: int):\n        removed_task = remove_task(task_id)\n        if not removed_task:\n            raise HTTPException(\n                status_code=404, detail=\"task not found\"\n            )\n        return removed_task\n    ```", "```py\n$ uvicorn main:app\n```", "```py\n$ pip install pytest\n```", "```py\nTEST_DATABASE_FILE = \"test_tasks.csv\"\nTEST_TASKS_CSV = [\n    {\n        \"id\": \"1\",\n        \"title\": \"Test Task One\",\n        \"description\": \"Test Description One\",\n        \"status\": \"Incomplete\",\n    },\n    {\n        \"id\": \"2\",\n        \"title\": \"Test Task Two\",\n        \"description\": \"Test Description Two\",\n        \"status\": \"Ongoing\",\n    },\n]\nTEST_TASKS = [\n    {**task_json, \"id\": int(task_json[\"id\"])}\n    for task_json in TEST_TASKS_CSV\n]\n```", "```py\nimport csv\nimport os\nfrom pathlib import Path\nfrom unittest.mock import patch\nimport pytest\n@pytest.fixture(autouse=True)\ndef create_test_database():\n    database_file_location = str(\n        Path(__file__).parent / TEST_DATABASE_FILE\n    )\n    with patch(\n        \"operations.DATABASE_FILENAME\",\n        database_file_location,\n    ) as csv_test:\n        with open(\n            database_file_location, mode=\"w\", newline=\"\"\n        ) as csvfile:\n            writer = csv.DictWriter(\n                csvfile,\n                fieldnames=[\n                    \"id\",\n                    \"title\",\n                    \"description\",\n                    \"status\",\n                ],\n            )\n            writer.writeheader()\n            writer.writerows(TEST_TASKS_CSV)\n            print(\"\")\n        yield csv_test\n        os.remove(database_file_location)\n```", "```py\nfrom main import app\nfrom fastapi.testclient import TestClient\nclient = TestClient(app)\n```", "```py\n    from conftest import TEST_TASKS\n    def test_endpoint_read_all_tasks():\n        response = client.get(\"/tasks\")\n        assert response.status_code == 200\n        assert response.json() == TEST_TASKS\n    ```", "```py\n    def test_endpoint_get_task():\n        response = client.get(\"/task/1\")\n        assert response.status_code == 200\n        assert response.json() == TEST_TASKS[0]\n        response = client.get(\"/task/5\")\n        assert response.status_code == 404\n    ```", "```py\n    from operations import read_all_tasks\n    def test_endpoint_create_task():\n        task = {\n            \"title\": \"To Define\",\n            \"description\": \"will be done\",\n            \"status\": \"Ready\",\n        }\n        response = client.post(\"/task\", json=task)\n        assert response.status_code == 200\n        assert response.json() == {**task, \"id\": 3}\n        assert len(read_all_tasks()) == 3\n    ```", "```py\n    from operations import read_task\n    def test_endpoint_modify_task():\n        updated_fields = {\"status\": \"Finished\"}\n        response = client.put(\n            \"/task/2\", json=updated_fields\n        )\n        assert response.status_code == 200\n        assert response.json() == {\n             *TEST_TASKS[1],\n             *updated_fields,\n        }\n        response = client.put(\n            \"/task/3\", json=updated_fields\n        )\n        assert response.status_code == 404\n    ```", "```py\n    def test_endpoint_delete_task():\n        response = client.delete(\"/task/2\")\n        assert response.status_code == 200\n        expected_response = TEST_TASKS[1]\n        del expected_response[\"id\"]\n        assert response.json() == expected_response\n        assert read_task(2) is None\n    ```", "```py\n$ pytest .\n```", "```py\n@app.get(\"/tasks\", response_model=list[TaskWithID])\ndef get_tasks(\n    status: Optional[str] = None,\n    title: Optional[str] = None,\n):\n    tasks = read_all_tasks()\n    if status:\n        tasks = [\n            task\n            for task in tasks\n            if task.status == status\n        ]\n    if title:\n        tasks = [\n            task for task in tasks if task.title == title\n        ]\n    return tasks\n```", "```py\n@app.get(\"/tasks/search\", response_model=list[TaskWithID])\ndef search_tasks(keyword: str):\n    tasks = read_all_tasks()\n    filtered_tasks = [\n        task\n        for task in tasks\n        if keyword.lower()\n        in (task.title + task.description).lower()\n    ]\n    return filtered_tasks\n```", "```py\n$ uvicorn main:app\n```", "```py\n    from typing import Optional\n    class TaskV2(BaseModel):\n        title: str\n        description: str\n        status: str\n        priority: str | None = \"lower\"\n    class TaskV2WithID(TaskV2):\n        id: int\n    ```", "```py\n    from models import TaskV2WIthID\n    def read_all_tasks_v2() -> list[TaskV2WIthID]:\n        with open(DATABASE_FILENAME) as csvfile:\n            reader = csv.DictReader(\n                csvfile,\n            )\n            return [TaskV2WIthID(**row) for row in reader]\n    ```", "```py\n    from models import TaskV2WithID\n    @app.get(\n        \"/v2/tasks\",\n        response_model=list[TaskV2WithID]\n    )\n    def get_tasks_v2():\n        tasks = read_all_tasks_v2()\n        return tasks\n    ```", "```py\nid,title,description,status,priority\n1,Task One,Description One,Incomplete\n2,Task Two,Description Two,Ongoing,higher\n```", "```py\n$ uvicorn main:app\n```", "```py\n    https://api.example.com/resource?version=1\n    ```", "```py\n    GET /resource HTTP/1.1\n    Host: api.example.com\n    X-API-Version: 1\n    ```", "```py\n    fake_users_db = {\n        \"johndoe\": {\n            \"username\": \"johndoe\",\n            \"hashed_password\": \"hashedsecret\",\n        },\n        \"janedoe\": {\n            \"username\": \"janedoe\",\n            \"hashed_password\": \"hashedsecret2\",\n        },\n    }\n    ```", "```py\n    def fakely_hash_password(password: str):\n        return f\"hashed{password}\"\n    ```", "```py\n    class User(BaseModel):\n        username: str\n    class UserInDB(User):\n        hashed_password: str\n    def get_user(db, username: str):\n        if username in db:\n            user_dict = db[username]\n            return UserInDB(**user_dict)\n    ```", "```py\n    def fake_token_generator(user: UserInDB) -> str:\n        # This doesn't provide any security at all\n        return f\"tokenized{user.username}\"\n    def fake_token_resolver(\n        token: str\n    ) -> UserInDB | None:\n        if token.startswith(\"tokenized\"):\n            user_id = token.removeprefix(\"tokenized\")\n            user = get_user(fake_users_db, user_id)\n            return user\n    ```", "```py\n    from fastapi import Depends, HTTPException, status\n    oauth2_scheme = OAuth2PasswordBearer(tokenUrl=\"token\")\n    def get_user_from_token(\n        token: str = Depends(oauth2_scheme),\n    ) -> UserInDB:\n        user = fake_token_resolver(token)\n        if not user:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=(\n                    \"Invalid authentication credentials\"\n                ),\n                headers={\"WWW-Authenticate\": \"Bearer\"},\n            )\n        return user\n    ```", "```py\n    from fastapi import Depends, HTTPException\n    from fastapi.security import OAuth2PasswordRequestForm\n    from security import (\n        UserInDB,\n        fake_token_generator,\n        fakely_hash_password,\n        fake_users_db\n    )\n    @app.post(\"/token\")\n    async def login(\n        form_data: OAuth2PasswordRequestForm = Depends(),\n    ):\n        user_dict = fake_users_db.get(form_data.username)\n        if not user_dict:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Incorrect username or password\",\n            )\n        user = UserInDB(**user_dict)\n        hashed_password = fakely_hash_password(\n            form_data.password\n        )\n        if not hashed_password == user.hashed_password:\n            raise HTTPException(\n                status_code=400,\n                detail=\"Incorrect username or password\",\n            )\n        token = fake_token_generator(user)\n        return {\n            \"access_token\": token,\n            \"token_type\": \"bearer\"\n        }\n    ```", "```py\n    from security import get_user_from_token\n    @app.get(\"/users/me\", response_model=User)\n    def read_users_me(\n        current_user: User = Depends(get_user_from_token),\n    ):\n        return current_user\n    ```", "```py\n$ uvicorn main:app\n```", "```py\napp = FastAPI(\n    title=\"Task Manager API\",\n    description=\"This is a task management API\",\n    version=\"0.1.0\",\n)\n```", "```py\nfrom fastapi.openapi.utils import get_openapi\ndef custom_openapi():\n    if app.openapi_schema:\n        return app.openapi_schema\n    openapi_schema = get_openapi(\n        title=\"Customized Title\",\n        version=\"2.0.0\",\n        description=\"This is a custom OpenAPI schema\",\n        routes=app.routes,\n    )\n    del openapi_schema[\"paths\"][\"/token\"]\n    app.openapi_schema = openapi_schema\n    return app.openapi_schema\napp = FastAPI(\n    title=\"Task Manager API\",\n    description=\"This is a task management API\",\n    version=\"0.1.0\",\n)\napp.openapi = custom_openapi\n```"]