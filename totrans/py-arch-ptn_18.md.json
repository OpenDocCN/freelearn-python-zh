["```py\ndef check_if_prime(number):\n\n    result = True\n\n    for i in range(2, number):\n\n        if number % i == 0:\n\n            result = False\n\n    return result \n```", "```py\nPRIMES = [1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\n\n          59, 61, 67, 71, 73, 79, 83, 89, 97]\n\nNUM_PRIMES_UP_TO = 5000\n\ndef check_if_prime(number):\n\n    result = True\n\n    for i in range(2, number):\n\n        if number % i == 0:\n\n            result = False\n\n    return result\n\nif __name__ == '__main__':\n\n    # Calculate primes from 1 to NUM_PRIMES_UP_TO\n\n    primes = [number for number in range(1, NUM_PRIMES_UP_TO)\n\n              if check_if_prime(number)]\n\n    # Compare the first primers to verify the process is correct\n\n    assert primes[:len(PRIMES)] == PRIMES\n\n    print('Primes')\n\n    print('------')\n\n    for prime in primes:\n\n        print(prime)\n\n    print('------') \n```", "```py\n # Calculate primes from 1 to NUM_PRIMES_UP_TO\n\n    primes = [number for number in range(1, NUM_PRIMES_UP_TO)\n\n              if check_if_prime(number)] \n```", "```py\nassert primes[:len(PRIMES)] == PRIMES \n```", "```py\n$ time python3 primes_1.py\n\nPrimes\n\n------\n\n1\n\n2\n\n3\n\n5\n\n7\n\n11\n\n13\n\n17\n\n19\n\n… \n\n4969\n\n4973\n\n4987\n\n4993\n\n4999\n\n------\n\nReal      0m0.875s\n\nUser      0m0.751s\n\nsys 0m0.035s \n```", "```py\n$ time python3 -m cProfile primes_1.py\n\nPrimes\n\n------\n\n1\n\n2\n\n3\n\n5\n\n...\n\n4993\n\n4999\n\n------\n\n         5677 function calls in 0.760 seconds\n\n   Ordered by: standard name\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n\n        1    0.002    0.002    0.757    0.757 primes_1.py:19(<listcomp>)\n\n        1    0.000    0.000    0.760    0.760 primes_1.py:2(<module>)\n\n     4999    0.754    0.000    0.754    0.000 primes_1.py:7(check_if_prime)\n\n        1    0.000    0.000    0.760    0.760 {built-in method builtins.exec}\n\n        1    0.000    0.000    0.000    0.000 {built-in method builtins.len}\n\n      673    0.004    0.000    0.004    0.000 {built-in method builtins.print}\n\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n\nReal      0m0.895s\n\nUser      0m0.764s\n\nsys 0m0.032s \n```", "```py\n$ time python3 -m cProfile -o primes1.prof  primes_1.py\n\n$ ls primes1.prof\n\nprimes1.prof \n```", "```py\n$ pip3 install snakeviz \n```", "```py\n$ snakeviz primes1.prof\n\nsnakeviz web server started on 127.0.0.1:8080; enter Ctrl-C to exit\n\nhttp://127.0.0.1:8080/snakeviz/%2FUsers%2Fjaime%2FDropbox%2FPackt%2Farchitecture_book%2Fchapter_13_profiling%2Fprimes1.prof \n```", "```py\n$ pip3 install line_profiler \n```", "```py\n@profile\n\ndef check_if_prime(number):\n\n    result = True\n\n    for i in range(2, number):\n\n        if number % i == 0:\n\n            result = False\n\n    return result \n```", "```py\n$ time kernprof -l primes_2.py\n\nPrimes\n\n------\n\n1\n\n2\n\n3\n\n5\n\n…\n\n4987\n\n4993\n\n4999\n\n------\n\nWrote profile results to primes_2.py.lprof\n\nReal      0m12.139s\n\nUser      0m11.999s\n\nsys 0m0.098s \n```", "```py\n$ python3 -m line_profiler primes_2.py.lprof\n\nTimer unit: 1e-06 s\n\nTotal time: 6.91213 s\n\nFile: primes_2.py\n\nFunction: check_if_prime at line 7\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n\n==============================================================\n\n     7                                           @profile\n\n     8                                           def check_if_prime(number):\n\n     9      4999       1504.0      0.3      0.0      result = True\n\n    10\n\n    11  12492502    3151770.0      0.3     45.6      for i in range(2, number):\n\n    12  12487503    3749127.0      0.3     54.2          if number % i == 0:\n\n    13     33359       8302.0      0.2      0.1              result = False\n\n    14\n\n    15      4999       1428.0      0.3      0.0      return result \n```", "```py\n@profile\n\ndef check_if_prime(number):\n\n    for i in range(2, number):\n\n        if number % i == 0:\n\n            return False\n\n    return True\n\nLet's take a look at the profiler result.\n\n$ time kernprof -l primes_3.py\n\n... \n\nReal      0m2.117s\n\nUser      0m1.713s\n\nsys       0m0.116s\n\n$ python3 -m line_profiler primes_3.py.lprof\n\nTimer unit: 1e-06 s\n\nTotal time: 0.863039 s\n\nFile: primes_3.py\n\nFunction: check_if_prime at line 7\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n\n==============================================================\n\n     7                                           @profile\n\n     8                                           def check_if_prime(number):\n\n     9\n\n    10   1564538     388011.0      0.2     45.0      for i in range(2, number):\n\n    11   1563868     473788.0      0.3     54.9          if number % i == 0:\n\n    12      4329       1078.0      0.2      0.1              return False\n\n    13\n\n    14       670        162.0      0.2      0.0      return True \n```", "```py\nDivide 19 between\n\n[2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19] \n```", "```py\nDivide 19 between\n\n[2, 3, 4, 5, 6, 7, 8, 9, 10] \n```", "```py\nDivide 19 between\n\n[2, 3, 4] \n```", "```py\nDivide 19 between\n\n[2, 3] \n```", "```py\ndef check_if_prime(number):\n\n    if number % 2 == 0 and number != 2:\n\n        return False\n\n    for i in range(3, math.floor(math.sqrt(number)) + 1, 2):\n\n        if number % i == 0:\n\n            return False\n\n    return True \n```", "```py\n>>> import math\n\n>>> math.sqrt(1000)\n\n31.622776601683793\n\n>>> math.floor(math.sqrt(1000))\n\n31\n\n>>> list(range(3, 31 + 1, 2))\n\n[3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31] \n```", "```py\n$ time kernprof -l primes_4.py\n\nPrimes\n\n------\n\n1\n\n2\n\n3\n\n5\n\n…\n\n4973\n\n4987\n\n4993\n\n4999\n\n------\n\nWrote profile results to primes_4.py.lprof\n\nReal      0m0.477s\n\nUser      0m0.353s\n\nsys       0m0.094s \n```", "```py\n$ python3 -m line_profiler primes_4.py.lprof\n\nTimer unit: 1e-06 s\n\nTotal time: 0.018276 s\n\nFile: primes_4.py\n\nFunction: check_if_prime at line 8\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n\n==============================================================\n\n     8                                           @profile\n\n     9                                           def check_if_prime(number):\n\n    10\n\n    11      4999       1924.0      0.4     10.5      if number % 2 == 0 and number != 2:\n\n    12      2498        654.0      0.3      3.6          return False\n\n    13\n\n    14     22228       7558.0      0.3     41.4      for i in range(3, math.floor(math.sqrt(number)) + 1, 2):\n\n    15     21558       7476.0      0.3     40.9          if number % i == 0:\n\n    16      1831        506.0      0.3      2.8              return False\n\n    17\n\n    18       670        158.0      0.2      0.9      return True \n```", "```py\nfrom http.server import BaseHTTPRequestHandler, HTTPServer\n\nimport math\n\ndef check_if_prime(number):\n\n    if number % 2 == 0 and number != 2:\n\n        return False\n\n    for i in range(3, math.floor(math.sqrt(number)) + 1, 2):\n\n        if number % i == 0:\n\n            return False\n\n    return True\n\ndef prime_numbers_up_to(up_to):\n\n    primes = [number for number in range(1, up_to + 1)\n\n              if check_if_prime(number)]\n\n    return primes\n\ndef extract_param(path):\n\n    '''\n\n    Extract the parameter and transform into\n\n    a positive integer. If the parameter is\n\n    not valid, return None\n\n    '''\n\n    raw_param = path.replace('/', '')\n\n    # Try to convert in number\n\n    try:\n\n        param = int(raw_param)\n\n    except ValueError:\n\n        return None\n\n    # Check that it's positive\n\n    if param < 0:\n\n        return None\n\n    return param\n\ndef get_result(path):\n\n    param = extract_param(path)\n\n    if param is None:\n\n        return 'Invalid parameter, please add an integer'\n\n    return prime_numbers_up_to(param)\n\nclass MyServer(BaseHTTPRequestHandler):\n\n    def do_GET(self):\n\n        result = get_result(self.path)\n\n        self.send_response(200)\n\n        self.send_header(\"Content-type\", \"text/html\")\n\n        self.end_headers()\n\n        return_template = '''\n\n            <html>\n\n                <head><title>Example</title></head>\n\n                <body>\n\n                    <p>Add a positive integer number in the path to display\n\n                    all primes up to that number</p>\n\n                    <p>Result {result}</p>\n\n                </body>\n\n            </html>\n\n        '''\n\n        body = bytes(return_template.format(result=result), 'utf-8')\n\n        self.wfile.write(body)\n\nif __name__ == '__main__':\n\n    HOST = 'localhost'\n\n    PORT = 8000\n\n    web_server = HTTPServer((HOST, PORT), MyServer)\n\n    print(f'Server available at http://{HOST}:{PORT}')\n\n    print('Use CTR+C to stop it')\n\n    # Capture gracefully the end of the server by KeyboardInterrupt\n\n    try:\n\n        web_server.serve_forever()\n\n    except KeyboardInterrupt:\n\n        pass\n\n    web_server.server_close()\n\n    print(\"Server stopped.\") \n```", "```py\ndef get_result(path):\n\n    param = extract_param(path)\n\n    if param is None:\n\n        return 'Invalid parameter, please add an integer'\n\n    return prime_numbers_up_to(param) \n```", "```py\ndef extract_param(path):\n\n    '''\n\n    Extract the parameter and transform into\n\n    a positive integer. If the parameter is\n\n    not valid, return None\n\n    '''\n\n    raw_param = path.replace('/', '')\n\n    # Try to convert in number\n\n    try:\n\n        param = int(raw_param)\n\n    except ValueError:\n\n        return None\n\n    # Check that it's positive\n\n    if param < 0:\n\n        return None\n\n    return param \n```", "```py\ndef prime_numbers_up_to(up_to):\n\n    primes = [number for number in range(1, up_to + 1)\n\n              if check_if_prime(number)]\n\n    return primes \n```", "```py\n$ python3 server.py\n\nServer available at http://localhost:8000\n\nUse CTR+C to stop it \n```", "```py\n$ python3 -m cProfile -o server.prof server.py\n\nServer available at http://localhost:8000\n\nUse CTR+C to stop it\n\n127.0.0.1 - - [10/Oct/2021 14:05:34] \"GET /500 HTTP/1.1\" 200 -\n\n127.0.0.1 - - [10/Oct/2021 14:05:34] \"GET /favicon.ico HTTP/1.1\" 200 -\n\n^CServer stopped. \n```", "```py\n$ snakeviz server.prof\n\nsnakeviz web server started on 127.0.0.1:8080; enter Ctrl-C to exit \n```", "```py\nfrom functools import wraps\n\nimport cProfile\n\nfrom time import time\n\ndef profile_this(func):\n\n    @wraps(func)\n\n    def wrapper(*args, **kwargs):\n\n        prof = cProfile.Profile()\n\n        retval = prof.runcall(func, *args, **kwargs)\n\n        filename = f'profile-{time()}.prof'\n\n        prof.dump_stats(filename)\n\n        return retval\n\n    return wrapper \n```", "```py\nretval = prof.runcall(func, *args, **kwargs) \n```", "```py\n@profile_this\n\ndef get_result(path):\n\n    param = extract_param(path)\n\n    if param is None:\n\n        return 'Invalid parameter, please add an integer'\n\n    return prime_numbers_up_to(param) \n```", "```py\n$ python3 server_profile_by_request.py\n\nServer available at http://localhost:8000\n\nUse CTR+C to stop it\n\n127.0.0.1 - - [10/Oct/2021 17:09:57] \"GET /500 HTTP/1.1\" 200 -\n\n127.0.0.1 - - [10/Oct/2021 17:10:00] \"GET /800 HTTP/1.1\" 200 - \n```", "```py\n$ ls profile-*\n\nprofile-1633882197.634005.prof \n\nprofile-1633882200.226291.prof \n```", "```py\n$ snakeviz profile-1633882197.634005.prof\n\nsnakeviz web server started on 127.0.0.1:8080; enter Ctrl-C to exit \n```", "```py\ndef leonardo(number):\n\n    if number in (0, 1):\n\n        return 1\n\n    return leonardo(number - 1) + leonardo(number - 2) + 1\n\nNUMBER = 35\n\nfor i in range(NUMBER + 1):\n\n    print('leonardo[{}] = {}'.format(i, leonardo(i))) \n```", "```py\n$ time python3 leonardo_1.py\n\nleonardo[0] = 1\n\nleonardo[1] = 1\n\nleonardo[2] = 3\n\nleonardo[3] = 5\n\nleonardo[4] = 9\n\nleonardo[5] = 15\n\n...\n\nleonardo[30] = 2692537\n\nleonardo[31] = 4356617\n\nleonardo[32] = 7049155\n\nleonardo[33] = 11405773\n\nleonardo[34] = 18454929\n\nleonardo[35] = 29860703\n\nreal      0m9.454s\n\nuser      0m8.844s\n\nsys 0m0.183s \n```", "```py\nCACHE = {}\n\ndef leonardo(number):\n\n    if number in (0, 1):\n\n        return 1\n\n    if number not in CACHE:\n\n        result = leonardo(number - 1) + leonardo(number - 2) + 1\n\n        CACHE[number] = result\n\n    return CACHE[number]\n\nNUMBER = 35000\n\nfor i in range(NUMBER + 1):\n\n    print(f'leonardo[{i}] = {leonardo(i)}') \n```", "```py\n$ time python3 leonardo_2.py\n\nleonardo[0] = 1\n\nleonardo[1] = 1\n\nleonardo[2] = 3\n\nleonardo[3] = 5\n\nleonardo[4] = 9\n\nleonardo[5] = 15\n\n...\n\nleonardo[35000] = ...\n\nreal      0m15.973s\n\nuser      0m8.309s\n\nsys       0m1.064s \n```", "```py\n$ pip install memory_profiler \n```", "```py\n$ time python3 -m memory_profiler leonardo_2p.py\n\n...\n\nFilename: leonardo_2p.py\n\nLine #    Mem usage    Increment  Occurences   Line Contents\n\n============================================================\n\n     5  104.277 MiB   97.082 MiB      104999   @profile\n\n     6                                         def leonardo(number):\n\n     7\n\n     8  104.277 MiB    0.000 MiB      104999       if number in (0, 1):\n\n     9   38.332 MiB    0.000 MiB           5           return 1\n\n    10\n\n    11  104.277 MiB    0.000 MiB      104994       if number not in CACHE:\n\n    12  104.277 MiB    5.281 MiB       34999           result = leonardo(number - 1) + leonardo(number - 2) + 1\n\n    13  104.277 MiB    1.914 MiB       34999           CACHE[number] = result\n\n    14\n\n    15  104.277 MiB    0.000 MiB      104994       return CACHE[number]\n\nReal      0m47.725s\n\nUser      0m25.188s\n\nsys 0m10.372s \n```", "```py\nCACHE = {}\n\n@profile\n\ndef leonardo(number):\n\n    if number in (0, 1):\n\n        return 1\n\n    if number not in CACHE:\n\n        result = leonardo(number - 1) + leonardo(number - 2) + 1\n\n        CACHE[number] = result\n\n    ret_value = CACHE[number]\n\n    MAX_SIZE = 5\n\n    while len(CACHE) > MAX_SIZE:\n\n        # Maximum size allowed,\n\n        # delete the first value, which will be the oldest\n\n        key = list(CACHE.keys())[0]\n\n        del CACHE[key]\n\n    return ret_value\n\nNUMBER = 35000\n\nfor i in range(NUMBER + 1):\n\n    print(f'leonardo[{i}] = {leonardo(i)}') \n```", "```py\n MAX_SIZE = 5\n\n    while len(CACHE) > MAX_SIZE:\n\n        # Maximum size allowed,\n\n        # delete the first value, which will be the oldest\n\n        key = list(CACHE.keys())[0]\n\n        del CACHE[key] \n```", "```py\n$ time python3 -m memory_profiler leonardo_3.py\n\n...\n\nFilename: leonardo_3.py\n\nLine #    Mem usage    Increment  Occurences   Line Contents\n\n============================================================\n\n     5   38.441 MiB   38.434 MiB      104999   @profile\n\n     6                                         def leonardo(number):\n\n     7\n\n     8   38.441 MiB    0.000 MiB      104999       if number in (0, 1):\n\n     9   38.367 MiB    0.000 MiB           5           return 1\n\n    10\n\n    11   38.441 MiB    0.000 MiB      104994       if number not in CACHE:\n\n    12   38.441 MiB    0.008 MiB       34999           result = leonardo(number - 1) + leonardo(number - 2) + 1\n\n    13   38.441 MiB    0.000 MiB       34999           CACHE[number] = result\n\n    14\n\n    15   38.441 MiB    0.000 MiB      104994       ret_value = CACHE[number]\n\n    16\n\n    17   38.441 MiB    0.000 MiB      104994       MAX_SIZE = 5\n\n    18   38.441 MiB    0.000 MiB      139988       while len(CACHE) > MAX_SIZE:\n\n    19                                                 # Maximum size allowed,\n\n    20                                                 # delete the first value, which will be the oldest\n\n    21   38.441 MiB    0.000 MiB       34994           key = list(CACHE.keys())[0]\n\n    22   38.441 MiB    0.000 MiB       34994           del CACHE[key]\n\n    23\n\n    24   38.441 MiB    0.000 MiB      104994       return ret_value \n```"]