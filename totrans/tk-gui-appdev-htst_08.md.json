["```py\nfrom Tkinter import *\nroot = Tk()\nmyvar = StringVar()\ndef trace_when_myvar_written(var,indx,mode):\n print\"Traced variable %s\"%myvar.get()\n\nmyvar.trace_variable(\"w\", trace_when_myvar_written)\nLabel(root, textvariable=myvar).pack(padx=5, pady=5)\nEntry(root, textvariable=myvar).pack(padx=5, pady=5)\n\nroot.mainloop()\n```", "```py\nTraced variable T\nTraced variable Tr\nTraced variable Tra\nTraced variable Trac\nTraced variable Traci\nTraced variable Tracin\nTraced variable Tracing\n```", "```py\ntrace_vdelete(self, mode, callbacktobedeleted)\nThe trace method returns the name of the callback method. This can be used to get the name of the callback method that is to be deleted.\n```", "```py\nEntry( root, validate=\"all\", validatecommand=vcmd)\n```", "```py\nvcmd = (self.root.register(self.validate), '%V')\n```", "```py\ndef validate(self, v)\n```", "```py\nimport Tkinter as tk\nclass KeyValidationDemo():\n    def __init__(self):\n        root = tk.Tk()\n        tk.Label(root, text='Enter your name').pack()\n vcmd = (root.register(self.validate_data), '%S')\n invcmd = (root.register(self.invalid_name), '%S')\n tk.Entry(root, validate=\"key\", validatecommand=vcmd,invalidcommand=invcmd).pack(pady=5, padx=5)\n        self.errmsg = tk.Label(root, text= '', fg='red')\n        self.errmsg.pack()\n        root.mainloop()\n\ndef validate_data(self, S):\n    self.errmsg.config(text='')\n    return (S.isalpha() or S =='') # always return True or False\n\ndef invalid_name(self, S):\n    self.errmsg.config(text='Invalid characters \\n name canonly have alphabets'%S)\n\napp= KeyValidationDemo()\n```", "```py\nimport Tkinter as tk\nimport re\nclass FocusOutValidationDemo():\n    def __init__(self):\n        self.master = tk.Tk()\n        self.errormsg = tk.Label(text='', fg='red')\n        self.errormsg.pack()\n        tk.Label(text='Enter Email Address').pack()\n        vcmd = (self.master.register(self.validate_email), '%P')\n        invcmd = (self.master.register(self.invalid_email), '%P')\n        self.emailentry = tk.Entry(self.master, validate =\"focusout\",    validatecommand=vcmd, invalidcommand=invcmd)\n        self.emailentry.pack()\n        tk.Button(self.master, text=\"Login\").pack()\n        tk.mainloop()\n\n    def validate_email(self, P):\n        self.errormsg.config(text='')\n x = re.match(r\"[^@]+@[^@]+\\.[^@]+\", P)\n return (x != None)# True(valid email)/False(invalid email)\n\n    def invalid_email(self, P):\n        self.errormsg.config(text='Invalid Email Address')\n        self.emailentry.focus_set()\n\napp = FocusOutValidationDemo()\n```", "```py\nfrom Tkinter import *\nclass FormatEntryWidgetDemo:\n    def __init__(self, root):\n        Label(root, text='Date(MM/DD/YYYY)').pack()\n        self.entereddata = StringVar()\n        self.dateentrywidget =Entry(textvariable=self.entereddata)\n        self.dateentrywidget.pack(padx=5, pady=5)\n        self.dateentrywidget.focus_set()\n        self.slashpositions = [2, 5]\n        root.bind('<Key>', self.format_date_entry_widget)\n\n    def format_date_entry_widget(self, event):\n        entrylist = [c for c in self.entereddata.get() if c != '/']\n        for pos in self.slashpositions:\n            if len(entrylist) > pos:\n                entrylist.insert(pos, '/')\n        self.entereddata.set(''.join(entrylist))\n        # Controlling cursor\n        cursorpos = self.dateentrywidget.index(INSERT)\n        for pos in self.slashpositions:\n            if cursorpos == (pos + 1): # if cursor is on slash\n                cursorpos += 1\n          if event.keysym not in ['BackSpace', 'Right', 'Left','Up', 'Down']:\n                self.dateentrywidget.icursor(cursorpos)\nroot = Tk()\nFormatEntryWidgetDemo(root)\nroot.mainloop()\n```", "```py\nLabel(text=\"Sale Up to 50% Off !\", font=\"TkHeadingFont 20\")\n\nLabel(text=\"**Conditions Apply\", font=\"TkSmallCaptionFont 8\")\n```", "```py\nfrom Tkinter import Tk, Label, Pack\nimport tkFont\nroot=Tk()\nlabel = Label(root, text=\"Humpty Dumpty was pushed\")\nlabel.pack()\ncurrentfont = tkFont.Font(font=label['font'])\nprint'Actual :' + str(currentfont.actual())\nprint'Family :' + currentfont.cget(\"family\")\nprint'Weight :' + currentfont.cget(\"weight\")\nprint'Text width of Dumpty : %d' %currentfont.measure(\"Dumpty\")\nprint'Metrics:' + str(currentfont.metrics())\ncurrentfont.config(size=14)\nlabel.config (font=currentfont)\nprint'New Actual :' + str(currentfont.actual())\nroot.mainloop()\n```", "```py\nActual :{'family': 'Segoe UI', 'weight': 'normal', 'slant': 'roman', 'overstrike': 0, 'underline': 0, 'size': 9}\nFamily : Segoe UI\nWeight : normal\nText width of Dumpty : 43\nMetrics:{'fixed': 0, 'ascent': 12, 'descent': 3, 'linespace': 15}\n\n```", "```py\nfrom Tkinter import *\nimport ttk\nimport tkFont\nclass FontSelectorDemo():\n    def __init__(self):\n      self.currentfont    = tkFont.Font(font=('Times New Roman',12))\n      self.family         = StringVar(value='Times New Roman')\n      self.fontsize       = StringVar(value='12')\n      self.fontweight     =StringVar(value=tkFont.NORMAL)\n      self.slant          =  StringVar(value=tkFont.ROMAN)\n      self.underlinevalue = BooleanVar(value=False)\n      self.overstrikevalue= BooleanVar(value=False)\n      self.gui_creator()\n```", "```py\ndef gui_creator(self):\n    # create the top labels – code removed\n    fontList = ttk.Combobox(textvariable=self.family)\n    fontList.bind('<<ComboboxSelected>>', self.on_value_change)\n allfonts = list(tkFont.families())\n allfonts.sort()\n fontList['values'] =  allfonts\n      # Font Sizes\n    sizeList = ttk.Combobox(textvariable=self.fontsize)\n    sizeList.bind('<<ComboboxSelected>>', self.on_value_change)\n allfontsizes = range(6,70)\n sizeList['values'] =  allfontsizes\n # add four checkbuttons to provide choice for font style\n    # all checkbuttons command attached to self.on_value_change\n #create text widget\n    sampletext ='The quick brown fox jumps over the lazy dog'\n    self.text.insert(INSERT,'%s\\n%s'% (sampletext,sampletext.upper()),'fontspecs')\n    self.text.config(state=DISABLED)\n```", "```py\ndef on_value_change(self, event=None):\n    try:\n        self.currentfont.config(family=self.family.get(), size=self.fontsize.get(), weight=self.fontweight.get(), slant=self.slant.get(), underline=self.underlinevalue.get(), overstrike=self.overstrikevalue.get())\n self.text.tag_config('fontspecs', font=self.currentfont)\n    except ValueError:\n        pass ### invalid entry - ignored for now. You can use a  tkMessageBox dialog to show an error\n```", "```py\nfrom Tkinter import *\nroot = Tk()\nLabel(root, text = \"\nभारतमेंआपकास्वागतहै\n\").pack()\nroot.mainloop()\n```", "```py\nSyntaxError: Non-ASCII character '\\xe0' in file 8.07.py on line 4, but no encoding declared; see http://www.Python.org/peps/pep-0263.html for details.\n\n```", "```py\nfrom Tkinter import *\nroot = Tk()\nLabel(root, text = u\"भारतमेंआपकास्वागतहै\").pack()\nroot.mainloop()\n```", "```py\n# -*- coding: <encoding-name> -*-\n```", "```py\ncoding[:=]\\s*([-\\w.]+)\n```", "```py\n# -*- coding: utf-8 -*-\n```", "```py\n# -*- coding: utf-8 -*- \nfrom Tkinter import *\nroot = Tk()\nLabel(root, text = \"भारतमेंआपकास्वागतहै\").pack()\nroot.mainloop()\n```", "```py\nimport Tkinter\nimport inspect\nprint 'Class Hierarchy for Frame Widget'\nfor i, classname in enumerate(inspect.getmro(Tkinter.Frame)):\n print'%s: %s'%(i, classname)\n\nprint 'Class Hierarchy for Toplevel'\nfor i, classname in enumerate(inspect.getmro(Tkinter.Toplevel)):\n    print '%s: %s'%(i, classname)\n\nprint 'Class Hierarchy for Tk'\nfor i, classname in enumerate(inspect.getmro(Tkinter.Tk)):\n    print'%s: %s'%(i, classname)\n```", "```py\nClass Hierarchy for Frame Widget\n0: Tkinter.Frame\n1: Tkinter.Widget\n2: Tkinter.BaseWidget\n3: Tkinter.Misc\n4: Tkinter.Pack\n5: Tkinter.Place\n6: Tkinter.Grid\nClass Hierarchy for Toplevel\n0: Tkinter.Toplevel\n1: Tkinter.BaseWidget\n2: Tkinter.Misc\n3: Tkinter.Wm\nClass Hierarchy for Tk\n0: Tkinter.Tk\n1: Tkinter.Misc\n2: Tkinter.Wm\n```", "```py\n    >>> import Tkinter\n    >>> help(Tkinter.Misc)\n\n    ```", "```py\n    >>>help(Tkinter.Toplevel)\n    >>>help(Tkinter.Tk)\n\n    ```", "```py\n    >>>help(Tkinter.Wm)\n\n    ```", "```py\nfrom Tkinter import *\n\ndef frame(parent,  row, col):\n    widget = Frame(parent)\n    widget.grid(row= row, column=col)\n    return widget\n\ndef label(parent,  row, col, text):\n    widget = Label(parent, text=text)\n    widget.grid(row=row, column=col,  sticky='w', padx=2)\n    return widget\n\ndef button(parent, row, col, text, command):\n    widget = Button(parent, text=text, command=command)\n    widget.grid(row= row, column=col, sticky='e', padx=5, pady=3)\n    return widget\n\ndef entry(parent,  row, col, var):\n    widget = Entry(parent,textvariable= var)\n    widget.grid(row= row, column=col, sticky='w', padx=5)\n    return widget\n\ndef button_pressed(uname, pwd):\n    print'Username: %s' %uname\n    print'Password: %s'%pwd\n\nif __name__ == '__main__':\n    root = Tk()\n    frm = frame(root, 0, 0) \n    label(frm, 1, 0, 'Username:')\n    uname= StringVar()\n    entry(frm, 1, 1, uname)\n    label(frm, 2, 0, 'Password:')\n    pwd= StringVar()\n    entry(frm, 2, 1, pwd)\n    button(frm, 3, 1, 'login', lambda: button_pressed(uname.get(), pwd.get()) )\n    root.mainloop()\n```", "```py\nself.mylabel = Label(root, text='Name')\nself.mylabel.pack(side=LEFT)\n```", "```py\nkey = event.keysym\nmylabel.config (text=key)\n```", "```py\ntry:\n    doSomethingNormal()\nexcept SomethingWrong:\n    doSomethingElse()\n```", "```py\nif SomethingWrong:\n    doSomethingElse()\nelse:\n    doSomethingNormal()\n```", "```py\n    print filter(lambda num: num>6, range(1,10))# prints [7, 8, 9]\n    ```", "```py\n    print map(lambda num: num+5, range(1,5)) #prints [6, 7, 8, 9]\n    ```", "```py\nimport cProfile\ncProfile.run('spam()','spam.profile')\n```", "```py\nimport pstats\nstats = pstats.Stats('spam.profile')\nstats.strip_dirs().sort_stats('time').print_stats()\n```", "```py\nPython -m cProfilemyscript.py\n\n```", "```py\n1014 function calls in 0.093 CPU seconds\nOrdered by: standard name\nncallstottimepercallcumtimepercallfilename:lineno(function)\n1    0.000    0.000    0.000    0.000 Tkinter.py:3686(Studbutton)\n1    0.000    0.000    0.000    0.000 Tkinter.py:3694(Tributton)\n416  0.001    0.000    0.002    0.000 Tkinter.py:74(_cnfmerge)\n1    0.011    0.011    0.028    0.028 myscript.py:19(<module>)\n2    0.058    0.029    0.086    0.043 myscript.py:20(setAge)\n7520.105   0.0000.257    0.129 myscript.py:23(findAudio)\n10.001    0.001    0.013    0.013 myscript.py:25(createGUI)\n1    40.004   0.000    0.005    0.005 myscript.py:4(saveAudio)\n1    0.000    0.000    0.000    0.000 myscript.py:49(<module>)\n\n```", "```py\n>>> import Tkinter\n>>> help(Tkinter.Pack)\n\n```", "```py\n>>>help(Tkinter.Label)\n\n```", "```py\nfrom Tkinter import *    # for Python2\nfrom tkinter import *    # for Python3\n```"]