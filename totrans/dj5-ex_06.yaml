- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Sharing Content on Your Website
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在您的网站上分享内容
- en: In the previous chapter, you added success and error messages to your site using
    the Django messages framework. You also created an email authentication backend
    and added social authentication to your site using Google. You learned how to
    run your development server with HTTPS on your local machine using Django Extensions.
    You customized the social authentication pipeline to create a user profile for
    new users automatically.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您使用Django消息框架向您的网站添加了成功和错误消息。您还创建了一个电子邮件认证后端，并使用Google添加了社交认证到您的网站。您学习了如何使用Django
    Extensions在本地机器上以HTTPS运行开发服务器。您还自定义了社交认证管道，以自动为新用户创建用户资料。
- en: In this chapter, you will learn how to create a JavaScript bookmarklet to share
    content from other sites on your website, and you will implement asynchronous
    browser requests in your project using JavaScript and Django.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何创建一个JavaScript书签工具，以便在您的网站上分享来自其他网站的内容，并且您将在项目中使用JavaScript和Django实现异步浏览器请求。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating many-to-many relationships
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建多对多关系
- en: Customizing behavior for forms
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义表单的行为
- en: Using JavaScript with Django
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Django中使用JavaScript
- en: Building a JavaScript bookmarklet
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建JavaScript书签工具
- en: Generating image thumbnails using `easy-thumbnails`
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`easy-thumbnails`生成图片缩略图
- en: Implementing asynchronous HTTP requests with JavaScript and Django
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用JavaScript和Django实现异步HTTP请求
- en: Building infinite scroll pagination
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建无限滚动分页
- en: In this chapter, you will create an image bookmarking system. You will create
    models with many-to-many relationships and customize the behavior of forms. You
    will learn how to generate image thumbnails and how to build asynchronous browser
    functionalities using JavaScript and Django.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将创建一个图片收藏系统。您将创建具有多对多关系的模型，并自定义表单的行为。您将学习如何生成图片缩略图，以及如何使用JavaScript和Django构建异步浏览器功能。
- en: Functional overview
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能概述
- en: '*Figure 6.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.1*展示了本章将要构建的视图、模板和功能：'
- en: '![](img/B21088_06_01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_01.png)'
- en: 'Figure 6.1: Diagram of functionalities built in Chapter 6'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1：第6章构建的功能图
- en: In the chapter, you will implement a **Bookmark it** button that will allow
    users to bookmark images from any website. You will use JavaScript to display
    an image selector on top of any website for users to select an image to bookmark.
    You will implement the `image_create` view and a form to retrieve the image from
    its original source and store it on your website. You will build the `image_detail`
    view to display single images and you will generate image thumbnails automatically
    using the `easy-thumbnails` package. You will also implement the `image_like`
    view to allow users to *like/unlike* images. This view will handle asynchronous
    HTTP requests performed with JavaScript and return a response in JSON format.
    You will finally create the `image_list` view to display all bookmarked images
    and you will implement an infinite scroll using JavaScript and Django pagination.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将实现一个**“收藏它”**按钮，允许用户从任何网站收藏图片。您将使用JavaScript在网站顶部显示一个图片选择器，让用户选择要收藏的图片。您将实现`image_create`视图和表单，从图片的原始来源检索图片并将其存储在您的网站上。您将构建`image_detail`视图来显示单个图片，并使用`easy-thumbnails`包自动生成图片缩略图。您还将实现`image_like`视图，允许用户对图片进行*点赞/取消点赞*。此视图将处理使用JavaScript执行的异步HTTP请求，并以JSON格式返回响应。最后，您将创建`image_list`视图来显示所有收藏的图片，并使用JavaScript和Django分页实现无限滚动。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter06](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter06).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter06](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter06)找到。
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter. You can follow the instructions to install
    each Python package in the following sections, or you can install all requirements
    at once with the `python -m pip install -r requirements.txt` command.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有Python包都包含在章节源代码中的`requirements.txt`文件中。您可以在以下部分按照说明安装每个Python包，或者使用`python
    -m pip install -r requirements.txt`命令一次性安装所有依赖。
- en: Creating an image bookmarking website
  id: totrans-20
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个图片收藏网站
- en: 'We will now learn how to allow users to bookmark images that they find on other
    websites and share them on our site. To build this functionality, we will need
    the following elements:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何允许用户将他们在其他网站上找到的图片书签并分享到我们的网站上。为了构建这个功能，我们需要以下元素：
- en: A data model to store images and related information.
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个数据模型来存储图片和相关信息。
- en: A form and a view to handle image uploads.
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个表单和一个视图来处理图片上传。
- en: JavaScript bookmarklet code that can be executed on any website. This code will
    find images across the page and allow users to select the image they want to bookmark.
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以在任何网站上执行的JavaScript书签代码。此代码将在页面中查找图片，并允许用户选择他们想要书签的图片。
- en: 'First, create a new application inside your `bookmarks` project directory by
    running the following command in the shell prompt:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在您的`bookmarks`项目目录内创建一个新的应用程序，通过在shell提示符中运行以下命令：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the new application to the `INSTALLED_APPS` setting in the `settings.py`
    file of the project, as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 将新应用程序添加到项目`settings.py`文件中的`INSTALLED_APPS`设置中，如下所示：
- en: '[PRE1]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: We have activated the `images` application in the project.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在项目中激活了`images`应用程序。
- en: Building the image model
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建图片模型
- en: 'Edit the `models.py` file of the `images` application and add the following
    code to it:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`images`应用程序的`models.py`文件，并向其中添加以下代码：
- en: '[PRE2]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'This is the model that we will use to store images in the platform. Let’s take
    a look at the fields of this model:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们将在平台上存储图片所使用的模型。让我们看看这个模型的字段：
- en: '`user`: This indicates the `User` object that bookmarked this image. This is
    a foreign key field because it specifies a many-to-one relationship: a user can
    post multiple images, but each image is posted by a single user. We have used
    `CASCADE` for the `on_delete` parameter so that related images are deleted when
    a user is deleted.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`user`: 这表示书签此图片的`User`对象。这是一个外键字段，因为它指定了一个多对一的关系：一个用户可以发布多个图片，但每张图片都由单个用户发布。我们为`on_delete`参数使用了`CASCADE`，以便在删除用户时删除相关图片。'
- en: '`title`: A title for the image.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`title`: 图片的标题。'
- en: '`slug`: A short label that contains only letters, numbers, underscores, or
    hyphens to be used for building beautiful SEO-friendly URLs.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`slug`: 一个仅包含字母、数字、下划线或连字符的短标签，用于构建美观且SEO友好的URL。'
- en: '`url`: The original URL for this image. We use `max_length` to define a maximum
    length of `2000` characters.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`url`: 此图片的原始URL。我们使用`max_length`来定义最大长度为`2000`个字符。'
- en: '`image`: The image file.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`: 图片文件。'
- en: '`description`: An optional description for the image.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`description`: 图片的可选描述。'
- en: '`created`: The date and time that indicate when the object was created in the
    database. We have added `auto_now_add` to automatically set the current datetime
    when the object is created.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`created`: 表示对象在数据库中创建的日期和时间的日期和时间。我们添加了`auto_now_add`来自动设置对象创建时的当前日期和时间。'
- en: In the `Meta` class of the model, we have defined a database index in descending
    order for the `created` field. We have also added the `ordering` attribute to
    tell Django that it should sort results by the `created` field by default. We
    indicate descending order by using a hyphen before the field name, such as `-created`,
    so that new images will be displayed first.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在模型的`Meta`类中，我们为`created`字段定义了一个降序数据库索引。我们还添加了`ordering`属性来告诉Django默认按`created`字段排序结果。我们通过在字段名前使用连字符来表示降序，例如`-created`，这样新的图片将首先显示。
- en: Database indexes improve query performance. Consider creating indexes for fields
    that you frequently query using `filter()`, `exclude()`, or `order_by()`. `ForeignKey`
    fields or fields with `unique=True` imply the creation of an index. You can learn
    more about database indexes at [https://docs.djangoproject.com/en/5.0/ref/models/options/#django.db.models.Options.indexes](https://docs.djangoproject.com/en/5.0/ref/models/options/#django.db.models.Options.indexes).
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库索引可以提高查询性能。考虑为那些您经常使用`filter()`、`exclude()`或`order_by()`查询的字段创建索引。`ForeignKey`字段或具有`unique=True`的字段意味着创建索引。您可以在[https://docs.djangoproject.com/en/5.0/ref/models/options/#django.db.models.Options.indexes](https://docs.djangoproject.com/en/5.0/ref/models/options/#django.db.models.Options.indexes)了解更多关于数据库索引的信息。
- en: 'We will override the `save()` method of the `Image` model to automatically
    generate the `slug` field based on the value of the `title` field. Import the
    `slugify()` function and add a `save()` method to the `Image` model, as follows.
    New lines are highlighted in bold:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将覆盖`Image`模型的`save()`方法，以便根据`title`字段的值自动生成`slug`字段。以下代码中，新行以粗体突出显示。导入`slugify()`函数并添加到`Image`模型的`save()`方法中，如下所示：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When an `Image` object is saved, if the `slug` field doesn’t have a value, the
    `slugify()` function is used to automatically generate a slug from the `title`
    field of the image. The object is then saved. By generating slugs automatically
    from the title, users won’t have to provide a slug when they share images on our
    website.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个`Image`对象被保存时，如果`slug`字段没有值，则会使用`slugify()`函数自动从图像的`title`字段生成一个slug。然后对象被保存。通过从标题自动生成slug，用户在分享我们网站上的图像时无需提供slug。
- en: Creating many-to-many relationships
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建多对多关系
- en: Next, we will add another field to the `Image` model to store the users who
    like an image. We will need a many-to-many relationship in this case because a
    user might like multiple images and each image can be liked by multiple users.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将向`Image`模型添加另一个字段以存储喜欢图像的用户。在这种情况下，我们需要一个多对多关系，因为一个用户可能喜欢多个图像，每个图像也可能被多个用户喜欢。
- en: 'Add the following field to the `Image` model:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下字段添加到`Image`模型中：
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When we define a `ManyToManyField` field, Django creates an intermediary join
    table using the primary keys of both models. *Figure 6.2* shows the database table
    that will be created for this relationship:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们定义一个`ManyToManyField`字段时，Django会使用两个模型的键创建一个中间连接表。*图6.2*显示了将为这种关系创建的数据库表：
- en: '![](img/B21088_06_02.png)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_02.png)'
- en: 'Figure 6.2: Intermediary database table for the many-to-many relationship'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.2：多对多关系的中间数据库表
- en: The `images_image_users_like` table is created by Django as an intermediary
    table that has references to the `images_image` table (`Image` model) and `auth_user`
    table (`User` model). The `ManyToManyField` field can be defined in either of
    the two related models.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: Django创建了一个名为`images_image_users_like`的中间表，它引用了`images_image`表（`Image`模型）和`auth_user`表（`User`模型）。`ManyToManyField`字段可以在两个相关模型中的任何一个中定义。
- en: As with `ForeignKey` fields, the `related_name` attribute of `ManyToManyField`
    allows you to name the relationship from the related object back to this one.
    `ManyToManyField` fields provide a many-to-many manager that allows you to retrieve
    related objects, such as `image.users_like.all()`, or get them from a `user` object,
    such as `user.images_liked.all()`.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 与`ForeignKey`字段一样，`ManyToManyField`的`related_name`属性允许您从相关对象命名回此关系。`ManyToManyField`字段提供了一个多对多管理器，允许您检索相关对象，例如`image.users_like.all()`，或从`user`对象中获取它们，例如`user.images_liked.all()`。
- en: You can learn more about many-to-many relationships at [https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_many/](https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_many/).
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_many/](https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_many/)了解更多关于多对多关系的信息。
- en: 'Open the shell prompt and run the following command to create an initial migration:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 打开shell提示符并运行以下命令以创建初始迁移：
- en: '[PRE5]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The output should be similar to the following one:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 输出应类似于以下内容：
- en: '[PRE6]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now run the following command to apply your migration:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在运行以下命令以应用您的迁移：
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will get an output that includes the following line:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 您将得到包含以下行的输出：
- en: '[PRE8]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `Image` model is now synced to the database.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`Image`模型现在已同步到数据库。'
- en: Registering the image model in the administration site
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在管理站点注册图像模型
- en: 'Edit the `admin.py` file of the `images` application and register the `Image`
    model into the administration site, as follows:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`images`应用的`admin.py`文件，并将`Image`模型注册到管理站点，如下所示：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Start the development server with the following command:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令启动开发服务器：
- en: '[PRE10]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Open `https://127.0.0.1:8000/admin/` in your browser, and you will see the
    `Image` model in the administration site, like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中打开`https://127.0.0.1:8000/admin/`，您将看到管理站点中的`Image`模型，如下所示：
- en: '![](img/B21088_06_03.png)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_03.png)'
- en: 'Figure 6.3: The Images block on the Django administration site index page'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.3：Django管理站点索引页面上的图像块
- en: You have completed the model to store images. Now you will learn how to implement
    a form to retrieve images by their URL and store them using the `Image` model.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您已完成了存储图像的模型。现在您将学习如何实现一个表单，通过URL检索图像并使用`Image`模型存储它们。
- en: Posting content from other websites
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 发布来自其他网站的内容
- en: We will allow users to bookmark images from external websites and share them
    on our site. Users will provide the URL of the image, a title, and an optional
    description. We will create a form and a view to download the image and create
    a new `Image` object in the database.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将允许用户从外部网站书签图片并在我们的网站上分享。用户将提供图片的URL、标题和可选描述。我们将创建一个表单和一个视图来下载图片，并在数据库中创建一个新的`Image`对象。
- en: Let’s start by building a form to submit new images.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先构建一个表单来提交新的图片。
- en: 'Create a new `forms.py` file inside the `images` application directory and
    add the following code to it:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 在`images`应用程序目录内创建一个新的`forms.py`文件，并将以下代码添加到其中：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: We have defined a `ModelForm` form from the `Image` model, including only the
    `title`, `url`, and `description` fields. Users will not enter the image URL directly
    in the form. Instead, we will provide them with a JavaScript tool to choose an
    image from an external site, and the form will receive the image’s URL as a parameter.
    We have overridden the default widget of the `url` field to use a `HiddenInput`
    widget. This widget is rendered as an HTML `input` element with a `type="hidden"`
    attribute. We use this widget because we don’t want this field to be visible to
    users.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已从`Image`模型定义了一个`ModelForm`表单，仅包括`title`、`url`和`description`字段。用户不会直接在表单中输入图片URL。相反，我们将为他们提供一个JavaScript工具，从外部网站选择图片，表单将接收图片的URL作为参数。我们已覆盖了`url`字段的默认小部件，以使用`HiddenInput`小部件。此小部件渲染为具有`type="hidden"`属性的HTML
    `input`元素。我们使用此小部件是因为我们不希望此字段对用户可见。
- en: Cleaning form fields
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 清理表单字段
- en: In order to verify that the provided image URL is valid, we will check that
    the filename ends with a `.jpg`, `.jpeg`, or `.png` extension to allow sharing
    JPEG and PNG files only. In the previous chapter, we used the `clean_<fieldname>()`
    convention to implement field validation. This method is executed for each field,
    if the field is present, when we call `is_valid()` on a form instance. In the
    `clean` method, you can alter the field’s value or raise any validation errors
    for the field.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证提供的图片URL是否有效，我们将检查文件名是否以`.jpg`、`.jpeg`或`.png`扩展名结尾，以允许仅共享JPEG和PNG文件。在上一章中，我们使用了`clean_<fieldname>()`约定来实现字段验证。当我们在表单实例上调用`is_valid()`时，如果字段存在，该方法将针对每个字段执行。在`clean`方法中，您可以更改字段的值或为字段引发任何验证错误。
- en: 'In the `forms.py` file of the `images` application, add the following method
    to the `ImageCreateForm` class:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在`images`应用程序的`forms.py`文件中，向`ImageCreateForm`类添加以下方法：
- en: '[PRE12]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In the preceding code, we have defined a `clean_url()` method to clean the
    `url` field. The code works as follows:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了一个`clean_url()`方法来清理`url`字段。代码如下：
- en: The value of the `url` field is retrieved by accessing the `cleaned_data` dictionary
    of the form instance.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过访问表单实例的`cleaned_data`字典来检索`url`字段的值。
- en: The URL is split to check whether the file has a valid extension. If the extension
    is invalid, a `ValidationError` is raised and the form instance is not validated.
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将URL分割以检查文件是否有有效的扩展名。如果扩展名无效，将引发`ValidationError`，并且表单实例不会被验证。
- en: In addition to validating the given URL, we also need to download the image
    file and save it. We could, for example, use the view that handles the form to
    download the image file. Instead, let’s take a more general approach by overriding
    the `save()` method of the model form to perform this task when the form is saved.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 除了验证给定的URL之外，我们还需要下载图片文件并将其保存。例如，我们可以使用处理表单的视图来下载图片文件。相反，让我们通过覆盖模型表单的`save()`方法来采取更通用的方法，在表单保存时执行此任务。
- en: Installing the Requests library
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装Requests库
- en: When a user bookmarks an image, we will need to download the image file by its
    URL. We will use the Requests Python library for this purpose. Requests is the
    most popular HTTP library for Python. It abstracts the complexity of dealing with
    HTTP requests and provides a very simple interface to consume HTTP services. You
    can find the documentation for the Requests library at [https://requests.readthedocs.io/en/master/](https://requests.readthedocs.io/en/master/).
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户将图片书签时，我们需要通过其URL下载图片文件。我们将为此目的使用Requests Python库。Requests是Python中最流行的HTTP库。它抽象了处理HTTP请求的复杂性，并为消费HTTP服务提供了一个非常简单的接口。您可以在[https://requests.readthedocs.io/en/master/](https://requests.readthedocs.io/en/master/)找到Requests库的文档。
- en: 'Open the shell and install the Requests library with the following command:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 打开shell，使用以下命令安装Requests库：
- en: '[PRE13]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: We will now override the `save()` method of `ImageCreateForm` and use the Requests
    library to retrieve the image by its URL.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将覆盖`ImageCreateForm`的`save()`方法，并使用Requests库通过URL检索图像。
- en: Overriding the save() method of a ModelForm
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 覆盖ModelForm的save()方法
- en: As you know, `ModelForm` provides a `save()` method to save the current model
    instance to the database and return the object. This method receives a Boolean
    `commit` parameter, which allows you to specify whether the object has to be persisted
    to the database. If `commit` is `False`, the `save()` method will return a model
    instance but will not save it to the database. We will override the form’s `save()`
    method in order to retrieve the image file by the given URL and save it to the
    file system.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所知，`ModelForm`提供了一个`save()`方法，用于将当前模型实例保存到数据库并返回该对象。此方法接收一个布尔`commit`参数，允许您指定对象是否必须持久化到数据库。如果`commit`为`False`，则`save()`方法将返回一个模型实例，但不会将其保存到数据库中。我们将覆盖表单的`save()`方法，以通过给定的URL检索图像文件并将其保存到文件系统中。
- en: 'Add the following imports at the top of the `forms.py` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在`forms.py`文件的顶部添加以下导入：
- en: '[PRE14]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, add the following `save()` method to the `ImageCreateForm` form:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，向`ImageCreateForm`表单添加以下`save()`方法：
- en: '[PRE15]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We have overridden the `save()` method, keeping the parameters required by
    `ModelForm`. The preceding code can be explained as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经覆盖了`save()`方法，保留了`ModelForm`所需的参数。前面的代码可以这样解释：
- en: A new `image` instance is created by calling the `save()` method of the form
    with `commit=False`.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用表单的`save()`方法并传递`commit=False`来创建一个新的`image`实例。
- en: The URL of the image is retrieved from the `cleaned_data` dictionary of the
    form.
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从表单的`cleaned_data`字典中检索图像的URL。
- en: An image name is generated by combining the `image` title slug with the original
    file extension of the image.
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将图像标题的slug与图像的原始文件扩展名组合来生成图像名称。
- en: The Requests Python library is used to download the image by sending an HTTP
    `GET` request using the image URL. The response is stored in the `response` object.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Requests Python库通过发送使用图像URL的HTTP `GET`请求来下载图像。响应存储在`response`对象中。
- en: The `save()` method of the `image` field is called, passing it a `ContentFile`
    object that is instantiated with the downloaded file content. In this way, the
    file is saved to the media directory of the project. The `save=False` parameter
    is passed to prevent the object from being saved to the database.
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`image`字段的`save()`方法，传递一个使用下载的文件内容实例化的`ContentFile`对象。这样，文件就被保存到项目的媒体目录中。传递`save=False`参数以防止对象被保存到数据库中。
- en: To maintain the same behavior as the original `save()` method of the model form,
    the form is only saved to the database if the `commit` parameter is `True`.
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了保持与模型表单原始`save()`方法相同的行为，只有当`commit`参数为`True`时，表单才会保存到数据库。
- en: We will need a view to create an instance of the form and handle its submission.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个视图来创建表单的实例并处理其提交。
- en: 'Edit the `views.py` file of the `images` application and add the following
    code to it. New code is highlighted in bold:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`images`应用的`views.py`文件，并向其中添加以下代码。新代码以粗体显示：
- en: '[PRE16]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the preceding code, we have created a view to store images on the site.
    We have added the `login_required` decorator to the `image_create` view to prevent
    access to unauthenticated users. This is how this view works:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个视图来在网站上存储图像。我们向`image_create`视图添加了`login_required`装饰器，以防止未经认证的用户访问。这个视图的工作方式如下：
- en: Initial data has to be provided through a `GET` HTTP request in order to create
    an instance of the form. This data will consist of the `url` and `title` attributes
    of an image from an external website. Both parameters will be set in the `GET`
    request by the JavaScript bookmarklet that we will create later. For now, we can
    assume that this data will be available in the request.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了创建表单的实例，必须通过`GET` HTTP请求提供初始数据。这些数据将包括来自外部网站的图像的`url`和`title`属性。这两个参数将由我们稍后创建的JavaScript书签工具在`GET`请求中设置。目前，我们可以假设这些数据将在请求中可用。
- en: When the form is submitted with a `POST` HTTP request, it is validated with
    `form.is_valid()`. If the form data is valid, a new `image` instance is created
    by saving the form with `form.save(commit=False)`. The new instance is not saved
    to the database because of `commit=False`.
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当表单通过`POST` HTTP请求提交时，它通过`form.is_valid()`进行验证。如果表单数据有效，则通过`form.save(commit=False)`保存表单来创建一个新的`image`实例。由于`commit=False`，新实例不会被保存到数据库中。
- en: A relationship to the current user performing the request is added to the new
    `image` instance with `new_image.user = request.user`. This is how we will know
    who uploaded each image.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`new_image.user = request.user`将当前执行请求的用户与新的`image`实例关联起来。这样我们就能知道谁上传了每张图片。
- en: The `Image` object is saved to the database.
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Image`对象被保存到数据库中。'
- en: Finally, a success message is created using the Django messages framework and
    the user is redirected to the canonical URL of the new image. We haven’t yet implemented
    the `get_absolute_url()` method of the `Image` model; we will do that later.
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，使用Django消息框架创建一个成功消息，并将用户重定向到新图像的规范URL。我们尚未实现`Image`模型的`get_absolute_url()`方法；我们将在稍后完成。
- en: 'Create a new `urls.py` file inside the `images` application and add the following
    code to it:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在`images`应用程序内创建一个新的`urls.py`文件并向其中添加以下代码：
- en: '[PRE17]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Edit the main `urls.py` file of the `bookmarks` project to include the patterns
    for the `images` application, as follows. The new code is highlighted in bold:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`bookmarks`项目的主体`urls.py`文件以包含`images`应用程序的模式，如下所示。新的代码以粗体显示：
- en: '[PRE18]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we need to create a template to render the form. Create the following
    directory structure inside the `images` application directory:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要创建一个模板来渲染表单。在`images`应用程序目录内创建以下目录结构：
- en: '[PRE19]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Edit the new `create.html` template and add the following code to it:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑新的`create.html`模板并向其中添加以下代码：
- en: '[PRE20]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Run the development server with the following command in the shell prompt:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在shell提示符中使用以下命令运行开发服务器：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Open `https://127.0.0.1:8000/images/create/?title=...&url=...` in your browser,
    including the `title` and `url` GET parameters, providing an existing JPEG image
    URL in the latter. For example, you can use the following URL: `https://127.0.0.1:8000/images/create/?title=%20Django%20and%20Duke&url=https://upload.wikimedia.org/wikipedia/commons/8/85/Django_Reinhardt_and_Duke_Ellington_%28Gottlieb%29.jpg`.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开`https://127.0.0.1:8000/images/create/?title=...&url=...`，包括`title`和`url`
    GET参数，在后者中提供一个现有的JPEG图像URL。例如，你可以使用以下URL：`https://127.0.0.1:8000/images/create/?title=%20Django%20and%20Duke&url=https://upload.wikimedia.org/wikipedia/commons/8/85/Django_Reinhardt_and_Duke_Ellington_%28Gottlieb%29.jpg`。
- en: 'You will see the form with an image preview, like the following:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 你将看到带有图像预览的表单，如下所示：
- en: '![](img/B21088_06_04.png)'
  id: totrans-127
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_04.png)'
- en: 'Figure 6.4: The Bookmark an image bookmark page'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4：书签图像的页面
- en: 'Add a description and click on the **BOOKMARK IT!** button. A new `Image` object
    will be saved in your database. However, you will get an error that indicates
    that the `Image` model has no `get_absolute_url()` method, as follows:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 添加描述并点击**书签它**按钮。一个新的`Image`对象将被保存在你的数据库中。然而，你将得到一个错误，表明`Image`模型没有`get_absolute_url()`方法，如下所示：
- en: '![](img/B21088_06_05.png)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_05.png)'
- en: 'Figure 6.5: An error showing that the Image object has no get_absolute_url
    attribute'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5：显示`Image`对象没有`get_absolute_url`属性的错误
- en: Don’t worry about this error for now; we are going to implement the `get_absolute_url`
    method in the `Image` model later.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 目前不必担心这个错误；我们将在稍后实现`Image`模型中的`get_absolute_url`方法。
- en: 'Open `https://127.0.0.1:8000/admin/images/image/` in your browser and verify
    that the new `Image` object has been saved, like this:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开`https://127.0.0.1:8000/admin/images/image/`并验证新的`Image`对象是否已保存，如下所示：
- en: '![](img/B21088_06_06.png)'
  id: totrans-134
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_06.png)'
- en: 'Figure 6.6: The administration site image list page showing the created Image
    object'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6：显示创建的`Image`对象的网站管理器图像列表页面
- en: Building a bookmarklet with JavaScript
  id: totrans-136
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript构建书签小工具
- en: A bookmarklet is a bookmark stored in a web browser that contains JavaScript
    code to extend the browser’s functionality. When you click on the bookmark in
    the bookmarks or favorites bar of your browser, the JavaScript code is executed
    on the website being displayed in the browser. This is very useful for building
    tools that interact with other websites.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 书签小工具是一种存储在网页浏览器中的书签，其中包含用于扩展浏览器功能的JavaScript代码。当你点击浏览器书签栏或收藏夹中的书签时，JavaScript代码将在浏览器中显示的网站上执行。这对于构建与其他网站交互的工具非常有用。
- en: Some online services, such as Pinterest, implement their own bookmarklet to
    let users share content from other sites on their platforms. The Pinterest bookmarklet
    is implemented as a browser extension and is available at [https://help.pinterest.com/en/article/save-pins-with-the-pinterest-browser-button](https://help.pinterest.com/en/article/save-pins-with-the-pinterest-browser-button).
    The **Pinterest Save** extension allows users to save images or websites to their
    Pinterest account with just one click on the browser.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 一些在线服务，如Pinterest，实现了他们自己的书签小工具，让用户可以从其他网站在他们的平台上分享内容。Pinterest书签小工具作为浏览器扩展实现，可在[https://help.pinterest.com/en/article/save-pins-with-the-pinterest-browser-button](https://help.pinterest.com/en/article/save-pins-with-the-pinterest-browser-button)找到。**Pinterest保存**扩展允许用户通过在浏览器中单击一次即可将图片或网站保存到他们的Pinterest账户。
- en: '![](img/B21088_06_07.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_07.png)'
- en: 'Figure 6.7: The Pinterest Save extension'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7：Pinterest保存扩展
- en: Let’s create a bookmarklet in a similar way for your website. For that, we will
    be using JavaScript.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以类似的方式为您的网站创建一个书签小工具。为此，我们将使用JavaScript。
- en: 'This is how your users will add the bookmarklet to their browser and use it:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户如何将书签小工具添加到他们的浏览器并使用它的方法：
- en: The user drags a link from your site to their browser’s bookmarks bar. The link
    contains JavaScript code in its `href` attribute. This code will be stored in
    the bookmark.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户将来自您网站的链接拖动到浏览器书签栏。链接在其`href`属性中包含JavaScript代码。此代码将被存储在书签中。
- en: The user navigates to any website and clicks on the bookmark in the bookmarks
    or favorites bar. The JavaScript code of the bookmark is executed.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户导航到任何网站并点击书签栏或收藏夹中的书签。书签的JavaScript代码将被执行。
- en: Since the JavaScript code will be stored as a bookmark, we will not be able
    to update it after the user has added it to their bookmarks bar. This is an important
    drawback that you can solve by implementing a launcher script. Users will save
    the launcher script as a bookmark, and the launcher script will load the actual
    JavaScript bookmarklet from a URL. By doing this, you will be able to update the
    code of the bookmarklet at any time. This is the approach that we will take to
    build the bookmarklet. Let’s start!
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript代码将被存储为书签，因此用户将其添加到书签栏后，我们将无法更新它。这是一个重要的缺点，您可以通过实现启动脚本来解决。用户将启动脚本保存为书签，启动脚本将从URL加载实际的JavaScript书签小工具。通过这样做，您将能够随时更新书签小工具的代码。这是我们构建书签小工具将采取的方法。让我们开始吧！
- en: 'Create a new template under `images/templates/` and name it `bookmarklet_launcher.js`.
    This will be the launcher script. Add the following JavaScript code to the new
    file:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在`images/templates/`下创建一个新的模板，并将其命名为`bookmarklet_launcher.js`。这将是一个启动脚本。将以下JavaScript代码添加到新文件中：
- en: '[PRE22]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The preceding script checks whether the bookmarklet has already been loaded
    by checking the value of the `bookmarklet` window variable with `if(!window.bookmarklet)`:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 上述脚本通过使用`if(!window.bookmarklet)`检查`bookmarklet`窗口变量的值来检查书签小工具是否已被加载：
- en: If `window.bookmarklet` is not defined or doesn’t have a truthy value (considered
    `true` in a Boolean context), a JavaScript file is loaded by appending a `<script>`
    element to the body of the HTML document loaded in the browser. The `src` attribute
    is used to load the URL of the `bookmarklet.js` script with a random 16-digit
    integer parameter generated with `Math.random()*9999999999999999`. Using a random
    number, we prevent the browser from loading the file from the browser’s cache.
    If the bookmarklet JavaScript has been previously loaded, the different parameter
    value will force the browser to load the script from the source URL again. This
    way, we make sure the bookmarklet always runs the most up-to-date JavaScript code.
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`window.bookmarklet`未定义或没有真值（在布尔上下文中被视为`true`），将通过在浏览器中加载的HTML文档的主体中添加一个`<script>`元素来加载一个JavaScript文件。使用`src`属性加载`bookmarklet.js`脚本的URL，该URL使用`Math.random()*9999999999999999`生成的随机16位整数参数。使用随机数，我们防止浏览器从浏览器缓存中加载文件。如果书签小工具JavaScript已被先前加载，不同的参数值将迫使浏览器再次从源URL加载脚本。这样，我们确保书签小工具始终运行最新的JavaScript代码。
- en: If `window.bookmarklet` is defined and has a truthy value, the `bookmarkletLaunch()`
    function is executed. We will define `bookmarkletLaunch()` as a global function
    in the `bookmarklet.js` script.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果`window.bookmarklet`已定义并且具有真值，则执行`bookmarkletLaunch()`函数。我们将在`bookmarklet.js`脚本中将`bookmarkletLaunch()`定义为全局函数。
- en: By checking the `bookmarklet` window variable, we prevent the bookmarklet JavaScript
    code from being loaded more than once if users click on the bookmarklet repeatedly.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查 `bookmarklet` 窗口变量，我们防止用户反复点击书签时书签 JavaScript 代码被加载多次。
- en: You created the bookmarklet launcher code. The actual bookmarklet code will
    reside in the `bookmarklet.js` static file. Using launcher code allows you to
    update the bookmarklet code at any time without requiring users to change the
    bookmark they previously added to their browser.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 你创建了书签启动器代码。实际的书签代码将位于 `bookmarklet.js` 静态文件中。使用启动器代码允许你在任何时间更新书签代码，而无需要求用户更改他们之前添加到浏览器中的书签。
- en: Let’s add the bookmarklet launcher to the dashboard pages so that users can
    add it to the bookmarks bar of their browser.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向仪表板页面添加书签启动器，以便用户可以将其添加到浏览器书签栏中。
- en: 'Edit the `account/dashboard.html` template of the `account` application and
    make it look like the following. New lines are highlighted in bold:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `account/dashboard.html` 模板，使其看起来如下。新行以粗体突出显示：
- en: '[PRE23]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Make sure that no template tag is split over multiple lines; Django doesn’t
    support multiple-line tags.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 确保不要将模板标签拆分到多行；Django 不支持多行标签。
- en: The dashboard now displays the total number of images bookmarked by the user.
    We have added a `{% with %}` template tag to create a variable with the total
    number of images bookmarked by the current user. We have included a link with
    an `href` attribute that contains the bookmarklet launcher script. This JavaScript
    code is loaded from the `bookmarklet_launcher.js` template.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 仪表板现在显示用户书签的总图像数。我们添加了一个 `{% with %}` 模板标签来创建一个变量，该变量包含当前用户书签的总图像数。我们包含了一个带有
    `href` 属性的链接，该属性包含书签启动器脚本。此 JavaScript 代码是从 `bookmarklet_launcher.js` 模板加载的。
- en: 'Open `https://127.0.0.1:8000/account/` in your browser. You should see the
    following page:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开 `https://127.0.0.1:8000/account/`。你应该看到以下页面：
- en: '![](img/B21088_06_08.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_08.png)'
- en: 'Figure 6.8: The dashboard page, including the total images bookmarked and the
    button for the bookmarklet'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8：仪表板页面，包括书签的总图像数和书签按钮
- en: 'Now create the following directories and files inside the `images` application
    directory:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在 `images` 应用程序目录内创建以下目录和文件：
- en: '[PRE24]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: You will find a `static/css/` directory in the `images` application directory
    in the code that comes along with this chapter. Copy the `css/` directory into
    the `static/` directory of your code. You can find the contents of the directory
    at [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter06/bookmarks/images/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter06/bookmarks/images/static).
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 你将在与本章代码一起提供的 `images` 应用程序目录中找到 `static/css/` 目录。将 `css/` 目录复制到你的代码的 `static/`
    目录中。你可以在 [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter06/bookmarks/images/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter06/bookmarks/images/static)
    找到目录的内容。
- en: 'The `css/bookmarklet.css` file provides the styles for the JavaScript bookmarklet.
    The `static/` directory should contain the following file structure now:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`css/bookmarklet.css` 文件提供了 JavaScript 书签的样式。现在 `static/` 目录应包含以下文件结构：'
- en: '[PRE25]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Edit the `bookmarklet.js` static file and add the following JavaScript code
    to it:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `bookmarklet.js` 静态文件，并向其中添加以下 JavaScript 代码：
- en: '[PRE26]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'You have declared four different constants that will be used by the bookmarklet.
    These constants are:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 你已声明了四个不同的常量，这些常量将被书签使用。这些常量是：
- en: '`siteUrl` and `staticUrl`: The base URL for the website and the base URL for
    static files.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`siteUrl` 和 `staticUrl`：网站的基准 URL 和静态文件的基准 URL。'
- en: '`minWidth` and `minHeight`: The minimum width and height in pixels for the
    images that the bookmarklet will collect from the site. The bookmarklet will identify
    images that have at least `250px` width and `250px` height.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`minWidth` 和 `minHeight`：书签将从网站收集的图像的最小宽度和高度（以像素为单位）。书签将识别至少有 `250px` 宽度和 `250px`
    高度的图像。'
- en: 'Edit the `bookmarklet.js` static file and add the following code highlighted
    in bold:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `bookmarklet.js` 静态文件，并向其中添加以下以粗体突出显示的代码：
- en: '[PRE27]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This section loads the CSS stylesheet for the bookmarklet. We use JavaScript
    to manipulate the **Document Object Model** (**DOM**). The DOM represents an HTML
    document in memory and it is created by the browser when a web page is loaded.
    The DOM is constructed as a tree of objects that comprise the structure and content
    of the HTML document.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 本节加载书签脚本的CSS样式表。我们使用JavaScript来操作**文档对象模型**（**DOM**）。DOM代表内存中的HTML文档，并在加载网页时由浏览器创建。DOM被构建为一个对象树，这些对象构成了HTML文档的结构和内容。
- en: 'The previous code generates an object equivalent to the following JavaScript
    code and appends it to the `<head>` element of the HTML page:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码生成一个与以下JavaScript代码等效的对象，并将其附加到HTML页面的`<head>`元素中：
- en: '[PRE28]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Let’s review how this is done:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们回顾一下这是如何完成的：
- en: The `<head>` element of the site is retrieved with `document.getElementsByTagName()`.
    This function retrieves all HTML elements of the page with the given tag. By using
    `[0]`, we access the first instance found. We access the first element because
    all HTML documents should have a single `<head>` element.
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`document.getElementsByTagName()`检索网站的`<head>`元素。此函数检索页面给定标签的所有HTML元素。通过使用`[0]`，我们访问找到的第一个实例。我们访问第一个元素，因为所有HTML文档都应该有一个单独的`<head>`元素。
- en: A `<link>` element is created with `document.createElement('link')`.
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`document.createElement('link')`创建一个`<link>`元素。
- en: The `rel` and `type` attributes of the `<link>` element are set. This is equivalent
    to the HTML `<link rel="stylesheet" type="text/css">`.
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<link>`元素的`rel`和`type`属性被设置。这相当于HTML `<link rel="stylesheet" type="text/css">`。'
- en: The `href` attribute of the `<link>` element is set with the URL of the `bookmarklet.css`
    stylesheet. A 16-digit random number is used as a URL parameter to prevent the
    browser from loading the file from the cache.
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`<link>`元素的`href`属性被设置为`bookmarklet.css`样式表的URL。使用16位随机数作为URL参数，以防止浏览器从缓存中加载文件。'
- en: The new `<link>` element is added to the `<head>` element of the HTML page using
    `head.appendChild(link)`.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`head.appendChild(link)`将新的`<link>`元素添加到HTML页面的`<head>`元素中。
- en: Now we will create the HTML element to display a `<div>` container on the website
    where the bookmarklet is executed. The HTML container will be used to display
    all images found on the site and let users choose the image they want to share.
    It will use the CSS styles defined in the `bookmarklet.css` stylesheet.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们将创建一个HTML元素，在网站中显示一个在书签脚本执行时使用的`<div>`容器。这个HTML容器将用于显示网站上找到的所有图片，并让用户选择他们想要分享的图片。它将使用在`bookmarklet.css`样式表中定义的CSS样式。
- en: 'Edit the `bookmarklet.js` static file and add the following code highlighted
    in bold:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`bookmarklet.js`静态文件，并添加以下加粗的代码：
- en: '[PRE29]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'With this code, the `<body>` element of the DOM is retrieved and new HTML is
    added to it by modifying its property `innerHTML`. A new `<div>` element is added
    to the body of the page. The `<div>` container consists of the following elements:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这段代码，检索DOM的`<body>`元素，并通过修改其属性`innerHTML`向其中添加新的HTML。在页面主体中添加一个新的`<div>`元素。该`<div>`容器包含以下元素：
- en: A link to close the container defined with `<a href="#" id="close">&times;</a>`.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个使用`<a href="#" id="close">&times;</a>`定义的关闭容器链接。
- en: A title defined with `<h1>Select an image to bookmark:</h1>`.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`<h1>Select an image to bookmark:</h1>`定义的标题。
- en: A `<div>` element to list the images found on the site defined with `<div class="images"></div>`.
    This container is initially empty and will be filled with the images found on
    the site.
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个使用`<div class="images"></div>`定义的`<div>`元素，用于列出网站上找到的图片。此容器最初为空，并将填充网站上找到的图片。
- en: 'The HTML container, including the previously loaded CSS styles, will look like
    *Figure 6.9*:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 包括之前加载的CSS样式在内的HTML容器将看起来像*图6.9*：
- en: '![](img/B21088_06_09.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_09.png)'
- en: 'Figure 6.9: The image selection container'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.9：图片选择容器
- en: 'Now let’s implement a function to launch the bookmarklet. Edit the `bookmarklet.js`
    static file and add the following code at the bottom:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们实现一个启动书签脚本的函数。编辑`bookmarklet.js`静态文件，并在底部添加以下代码：
- en: '[PRE30]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'This is the `bookmarkletLaunch()` function. Before the definition of this function,
    the CSS for the bookmarklet is loaded and the HTML container is added to the DOM
    of the page. The `bookmarkletLaunch()` function works as follows:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这是`bookmarkletLaunch()`函数。在定义此函数之前，已加载书签脚本的CSS，并将HTML容器添加到页面的DOM中。`bookmarkletLaunch()`函数的工作方式如下：
- en: The bookmarklet’s main container is retrieved by getting the DOM element with
    the ID `bookmarklet` with `document.getElementById()`.
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用`document.getElementById()`获取具有ID `bookmarklet`的DOM元素来检索书签脚本的主体容器。
- en: The `bookmarklet` element is used to retrieve the child element with the class
    `images`. The `querySelector()` method allows you to retrieve DOM elements using
    CSS selectors. Selectors allow you to find DOM elements to which a set of CSS
    rules applies. You can find a list of CSS selectors at [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)
    and you can read more information about how to locate DOM elements using selectors
    at [https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors](https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors).
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `bookmarklet` 元素来检索具有类 `images` 的子元素。`querySelector()` 方法允许您使用 CSS 选择器检索
    DOM 元素。选择器允许您找到应用了一组 CSS 规则的 DOM 元素。您可以在 [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)
    找到 CSS 选择器的列表，您可以在 [https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors](https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors)
    上阅读有关如何使用选择器定位 DOM 元素的相关信息。
- en: The `images` container is cleared by setting its `innerHTML` attribute to an
    empty string and the bookmarklet is displayed by setting the `display` CSS property
    to `block`.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过将 `innerHTML` 属性设置为空字符串来清除 `images` 容器，并通过将 `display` CSS 属性设置为 `block` 来显示书签工具。
- en: The `#close` selector is used to find the DOM element with the ID `close`. A
    `click` event is attached to the element with the `addEventListener()` method.
    When users click the element, the bookmarklet’s main container is hidden by setting
    its `display` property to `none`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `#close` 选择器来查找具有 ID `close` 的 DOM 元素。使用 `addEventListener()` 方法将 `click`
    事件附加到该元素上。当用户点击该元素时，通过将 `display` 属性设置为 `none` 来隐藏书签工具的主要容器。
- en: The `bookmarkletLaunch()` function is executed after its definition.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`bookmarkletLaunch()` 函数在其定义之后执行。'
- en: 'After loading the CSS styles and the HTML container of the bookmarklet, you
    have to find image elements in the DOM of the current website. Images that have
    the minimum required dimension have to be added to the HTML container of the bookmarklet.
    Edit the `bookmarklet.js` static file and add the following code highlighted in
    bold to the bottom of the `bookmarklet()` function:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在加载了书签工具的 CSS 样式和 HTML 容器之后，您需要在当前网站的 DOM 中找到图像元素。具有最小所需尺寸的图像必须添加到书签工具的 HTML
    容器中。编辑 `bookmarklet.js` 静态文件，并将以下加粗的代码添加到 `bookmarklet()` 函数的底部：
- en: '[PRE31]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The preceding code uses the `img[src$=".jpg"]`, `img[src$=".jpeg"]`, and `img[src$=".png"]`
    selectors to find all `<img>` DOM elements whose `src` attribute finishes with
    `.jpg`, `.jpeg`, or, `.png`, respectively. Using these selectors with `document.querySelectorAll()`
    allows you to find all images in JPEG and PNG format displayed on the website.
    Iteration over the results is performed with the `forEach()` method. Small images
    are filtered out because we don’t consider them to be relevant. Only images with
    a size larger than the one specified with the `minWidth` and `minHeight` variables
    are used for the results. A new `<img>` element is created for each image found,
    where the `src` source URL attribute is copied from the original image and added
    to the `imagesFound` container.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用 `img[src$=".jpg"]`、`img[src$=".jpeg"]` 和 `img[src$=".png"]` 选择器来查找所有
    `<img>` DOM 元素，其 `src` 属性分别以 `.jpg`、`.jpeg` 或 `.png` 结尾。使用这些选择器与 `document.querySelectorAll()`
    结合，您可以在网站上找到所有显示的 JPEG 和 PNG 格式的图像。使用 `forEach()` 方法遍历结果。由于我们不认为小图像相关，因此会过滤掉它们。只有大于
    `minWidth` 和 `minHeight` 变量指定的尺寸的图像才用于结果。对于每个找到的图像，创建一个新的 `<img>` 元素，其中 `src`
    源 URL 属性从原始图像复制并添加到 `imagesFound` 容器中。
- en: For security reasons, your browser will prevent you from running the bookmarklet
    over HTTP on a site served through HTTPS. That’s the reason we keep using `RunServerPlus`
    to run the development server using an auto-generated TLS/SSL certificate. Remember
    that you learned how to run the development server through HTTPS in *Chapter 5,
    Implementing Social Authentication*.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 由于安全原因，您的浏览器将阻止您在通过 HTTPS 提供的网站上使用 HTTP 运行书签工具。这就是我们为什么继续使用 `RunServerPlus`
    来通过自动生成的 TLS/SSL 证书运行开发服务器的原因。记住，您在 *第 5 章，实现社交认证* 中学习了如何通过 HTTPS 运行开发服务器。
- en: In a production environment, a valid TLS/SSL certificate will be required. When
    you own a domain name, you can apply for a trusted **Certification Authority**
    (**CA**) to issue a TLS/SSL certificate for it so that browsers can verify its
    identity. If you want to obtain a trusted certificate for a real domain, you can
    use the *Let’s Encrypt* service. *Let’s Encrypt* is a non-profit CA that simplifies
    obtaining and renewing trusted TLS/SSL certificates for free. You can find more
    information at [https://letsencrypt.org](https://letsencrypt.org).
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产环境中，需要一个有效的TLS/SSL证书。当您拥有域名时，您可以申请一个受信任的**认证机构**（**CA**）为其颁发TLS/SSL证书，以便浏览器可以验证其身份。如果您想为真实域名获取一个受信任的证书，您可以使用*Let’s
    Encrypt*服务。*Let’s Encrypt*是一个非营利性CA，它简化了免费获取和更新受信任的TLS/SSL证书。您可以在[https://letsencrypt.org](https://letsencrypt.org)找到更多信息。
- en: 'Run the development server with the following command from the shell prompt:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 从壳式提示符中运行以下命令来启动开发服务器：
- en: '[PRE32]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Open `https://127.0.0.1:8000/account/` in your browser. Log in with an existing
    user, then click and drag the **BOOKMARK IT** button to the bookmarks bar of your
    browser, as follows:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`https://127.0.0.1:8000/account/`。使用现有用户登录，然后按照以下步骤点击并拖动**BOOKMARK
    IT**按钮到浏览器的书签栏：
- en: '![](img/B21088_06_10.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_10.png)'
- en: 'Figure 6.10: Adding the BOOKMARK IT button to the bookmarks bar'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.10：将**BOOKMARK IT**按钮添加到书签栏
- en: Open a website of your choice in your browser and click on the **Bookmark it**
    bookmarklet in the bookmarks bar. You will see that a new white overlay appears
    on the website, displaying all JPEG and PNG images found with dimensions higher
    than 250×250 pixels.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开您选择的网站，并点击书签栏中的**Bookmark it**快捷书签。您会看到网站上出现一个新的白色覆盖层，显示所有尺寸大于250×250像素的JPEG和PNG图像。
- en: '*Figure 6.11* shows the bookmarklet running on [https://amazon.com/](https://amazon.com/):'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.11* 展示了在[https://amazon.com/](https://amazon.com/)上运行的快捷书签：'
- en: '![](img/B21088_06_11.png)'
  id: totrans-212
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_11.png)'
- en: 'Figure 6.11: The bookmarklet loaded on amazon.com'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.11：在amazon.com上加载的快捷书签
- en: 'If the HTML container doesn’t appear, check the `RunServer` shell console log.
    If you see a MIME type error, it is most likely that your MIME map files are incorrect
    or need to be updated. You can apply the correct mapping for JavaScript and CSS
    files by adding the following lines to the `settings.py` file:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 如果HTML容器没有出现，请检查`RunServer`壳式控制台日志。如果您看到MIME类型错误，那么很可能是您的MIME映射文件不正确或需要更新。您可以通过在`settings.py`文件中添加以下行来为JavaScript和CSS文件应用正确的映射：
- en: '[PRE33]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The HTML container includes the images that can be bookmarked. We will now implement
    the functionality for users to click on the desired image to bookmark it.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: HTML容器包括可以保存的图像。我们现在将实现用户点击所需图像以保存它的功能。
- en: 'Edit the `js/bookmarklet.js` static file and add the following code at the
    bottom of the `bookmarklet()` function:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`js/bookmarklet.js`静态文件，并在`bookmarklet()`函数底部添加以下代码：
- en: '[PRE34]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'The preceding code works as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的工作原理如下：
- en: A `click()` event is attached to each image element within the `imagesFound`
    container.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`click()`事件附加到`imagesFound`容器内的每个图像元素上。
- en: When the user clicks on any of the images, the image element clicked is stored
    in the variable `imageSelected`.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户点击任何图像时，点击的图像元素被存储在变量`imageSelected`中。
- en: The bookmarklet is then hidden by setting its `display` property to `none`.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后通过将`display`属性设置为`none`来隐藏快捷书签。
- en: A new browser window is opened with the URL to bookmark a new image on the site.
    The content of the `<title>` element of the website is passed to the URL in the
    `title` `GET` parameter and the selected image URL is passed in the `url` parameter.
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 会打开一个新的浏览器窗口，其中包含用于在网站上保存新图像的URL。网站`<title>`元素的内容通过`title` `GET`参数传递到URL中，而选定的图像URL通过`url`参数传递。
- en: 'Open a new URL with your browser, for example, [https://commons.wikimedia.org/](https://commons.wikimedia.org/),
    as follows:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的浏览器打开一个新的URL，例如，[https://commons.wikimedia.org/](https://commons.wikimedia.org/)，如下所示：
- en: '![](img/B21088_06_12.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_12.png)'
- en: 'Figure 6.12: The Wikimedia Commons website'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.12：维基媒体共享资源网站
- en: '*Figures 6.12* to *6.15* image: *A flock of cranes (Grus grus) in Hula Valley,
    Northern Israel* by Tomere (Licence: Creative Commons Attribution-Share Alike
    4.0 International: https://creativecommons.org/licenses/by-sa/4.0/deed.en)'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.12*至*6.15*图像：*以色列北部的胡拉谷中的一群鹤（Grus grus）*，作者Tomere（许可：Creative Commons Attribution-Share
    Alike 4.0 国际：https://creativecommons.org/licenses/by-sa/4.0/deed.en）'
- en: 'Click on the **Bookmark it** bookmarklet to display the image selection overlay.
    You will see the image selection overlay like this:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**收藏它**书签工具以显示图片选择覆盖层。您将看到如下所示的图片选择覆盖层：
- en: '![](img/B21088_06_13.png)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_13.png)'
- en: 'Figure 6.13: The bookmarklet loaded on an external website'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13：在外部网站上加载的书签工具
- en: 'If you click on an image, you will be redirected to the image creation page,
    passing the title of the website and the URL of the selected image as `GET` parameters.
    The page will look as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您点击图片，您将被重定向到图片创建页面，传递网站的标题和所选图片的URL作为`GET`参数。页面将如下所示：
- en: '![](img/B21088_06_14.png)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_14.png)'
- en: 'Figure 6.14: The form to bookmark an image'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14：收藏图片的表单
- en: Congratulations! This is your first JavaScript bookmarklet, and it is fully
    integrated into your Django project. Next, we will create the detail view for
    images and implement the canonical URL for images.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！这是您的第一个JavaScript书签工具，它已完全集成到您的Django项目中。接下来，我们将为图片创建详细视图并实现图片的规范URL。
- en: Creating a detail view for images
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建图片的详细视图
- en: 'Let’s now create a simple detail view to display images that have been bookmarked
    on the site. Open the `views.py` file of the `images` application and add the
    following code to it:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建一个简单的详细视图来显示网站上已收藏的图片。打开`images`应用的`views.py`文件，并向其中添加以下代码：
- en: '[PRE35]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'This is a simple view to display an image. Edit the `urls.py` file of the `images`
    application and add the following URL pattern highlighted in bold:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的视图来显示图片。编辑`images`应用的`urls.py`文件，并添加以下加粗的URL模式：
- en: '[PRE36]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Edit the `models.py` file of the `images` application and add the `get_absolute_url()`
    method to the `Image` model, as follows:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`images`应用的`models.py`文件，并将`get_absolute_url()`方法添加到`Image`模型中，如下所示：
- en: '[PRE37]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Remember that the common pattern for providing canonical URLs for objects is
    to define a `get_absolute_url()` method in the model.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，为对象提供规范URL的常见模式是在模型中定义`get_absolute_url()`方法。
- en: 'Finally, create a template inside the `/templates/images/image/` template directory
    for the `images` application and name it `detail.html`. Add the following code
    to it:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在`/templates/images/image/`模板目录内为`images`应用创建一个模板，命名为`detail.html`。向其中添加以下代码：
- en: '[PRE38]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This is the template for displaying the detail view of a bookmarked image. We
    have used the `{% with %}` tag to create the `total_likes` variable with the result
    of a QuerySet that counts all user likes. By doing so, we avoid evaluating the
    same QuerySet twice (first to display the total number of likes, then to use the
    `pluralize` template filter). We have also included the image description and
    we have added a `{% for %}` loop to iterate over `image.users_like.all` to display
    all the users who like this image.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这是显示已收藏图片详细视图的模板。我们使用了`{% with %}`标签来创建`total_likes`变量，该变量包含一个查询集的结果，该查询集统计了所有用户的点赞数。通过这样做，我们避免了两次评估同一个查询集（第一次用于显示点赞总数，第二次用于使用`pluralize`模板过滤器）。我们还包含了图片描述，并添加了一个`{%
    for %}`循环来遍历`image.users_like.all`，以显示所有喜欢这张图片的用户。
- en: Whenever you need to repeat a query in your template, use the `{% with %}` template
    tag to prevent additional database queries.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 当您需要在模板中重复查询时，请使用`{% with %}`模板标签来防止额外的数据库查询。
- en: 'Now, open an external URL in your browser and use the bookmarklet to bookmark
    a new image. You will be redirected to the image detail page after you post the
    image. The page will include a success message, as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在您的浏览器中打开一个外部URL，并使用书签工具收藏一张新图片。发布图片后，您将被重定向到图片详细页面。页面将包含以下成功消息：
- en: '![](img/B21088_06_15.png)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_15.png)'
- en: 'Figure 6.15: The image detail page for the image bookmark'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15：图片书签的图片详细页面
- en: Great! You completed the bookmarklet functionality. Next, you will learn how
    to create thumbnails for images.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！您完成了书签工具的功能。接下来，您将学习如何为图片创建缩略图。
- en: Creating image thumbnails using easy-thumbnails
  id: totrans-251
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用easy-thumbnails创建图片缩略图
- en: We are displaying the original image on the detail page, but the dimensions
    of different images may vary considerably. The file size of some images may be
    very large, and loading them might take too long. The best way to display optimized
    images in a uniform manner is to generate thumbnails. A thumbnail is a small image
    representation of a larger image. Thumbnails will load faster in the browser and
    are a great way to homogenize images of very different sizes. We will use a Django
    application called `easy-thumbnails` to generate thumbnails for the images bookmarked
    by users.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在详细页面上显示原始图像，但不同图像的尺寸可能差异很大。某些图像的文件大小可能非常大，加载它们可能需要很长时间。以统一方式显示优化图像的最佳方法是生成缩略图。缩略图是较大图像的小型图像表示。缩略图在浏览器中加载更快，并且是统一非常不同尺寸图像的绝佳方式。我们将使用名为`easy-thumbnails`的Django应用程序为用户书签的图像生成缩略图。
- en: 'Open the terminal and install `easy-thumbnails` using the following command:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端，使用以下命令安装`easy-thumbnails`：
- en: '[PRE39]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Edit the `settings.py` file of the `bookmarks` project and add `easy_thumbnails`
    to the `INSTALLED_APPS` setting, as follows:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`bookmarks`项目的`settings.py`文件，并将`easy_thumbnails`添加到`INSTALLED_APPS`设置中，如下所示：
- en: '[PRE40]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Then, run the following command to sync the application with your database:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，运行以下命令以将应用程序与数据库同步：
- en: '[PRE41]'
  id: totrans-258
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'You will see an output that includes the following lines:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到包括以下行的输出：
- en: '[PRE42]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: The `easy-thumbnails` application offers you different ways to define image
    thumbnails. The application provides a `{% thumbnail %}` template tag to generate
    thumbnails in templates and a custom `ImageField` if you want to define thumbnails
    in your models. Let’s use the template tag approach.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`easy-thumbnails`应用程序提供了多种定义图像缩略图的方式。该应用程序提供了一个`{% thumbnail %}`模板标签，用于在模板中生成缩略图，以及一个自定义的`ImageField`，如果您想在模型中定义缩略图。让我们使用模板标签方法。'
- en: 'Edit the `images/image/detail.html` template and consider the following line:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`images/image/detail.html`模板并考虑以下行：
- en: '[PRE43]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'The following lines should replace the preceding one:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 以下行应替换前面的行：
- en: '[PRE44]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: We have defined a thumbnail with a fixed width of `300` pixels and a flexible
    height to maintain the aspect ratio by using the value `0`. The first time a user
    loads this page, a thumbnail image will be created. The thumbnail is stored in
    the same directory as the original file. The location is defined by the `MEDIA_ROOT`
    setting and the `upload_to` attribute of the `image` field of the `Image` model.
    The generated thumbnail will then be served in the following requests.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了一个宽度为`300`像素且高度灵活的缩略图，通过使用值`0`来保持宽高比。用户第一次加载此页面时，将创建一个缩略图图像。缩略图存储在原始文件相同的目录中。位置由`MEDIA_ROOT`设置和`Image`模型的`image`字段的`upload_to`属性定义。生成的缩略图将在以下请求中提供。
- en: 'Run the development server with the following command from the shell prompt:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 从shell提示符运行以下命令来启动开发服务器：
- en: '[PRE45]'
  id: totrans-268
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Access the image detail page for an existing image. The thumbnail will be generated
    and displayed on the site. Right-click on the image and open it in a new browser
    tab, as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 访问现有图像的详细页面。缩略图将被生成并在网站上显示。右键单击图像，在新浏览器标签页中打开，如下所示：
- en: '![](img/B21088_06_16.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_16.png)'
- en: 'Figure 6.16: Opening the image in a new browser tab'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.16：在新浏览器标签页中打开图像
- en: 'Check the URL of the generated image in your browser. It should look as follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览器中检查生成的图像的URL。它应该如下所示：
- en: '![](img/B21088_06_17.png)'
  id: totrans-273
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_17.png)'
- en: 'Figure 6.17: The URL of the generated image'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.17：生成的图像的URL
- en: The original filename is followed by additional details of the settings used
    to create the thumbnail. For a JPEG image, you will see a filename like `filename.jpg.300x0_q85.jpg`,
    where `300x0` indicates the size parameters used to generate the thumbnail, and
    `85` is the value for the default JPEG quality used by the library to generate
    the thumbnail.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 原始文件名后面跟着创建缩略图所使用的设置的其他详细信息。对于JPEG图像，您将看到一个类似`filename.jpg.300x0_q85.jpg`的文件名，其中`300x0`表示生成缩略图时使用的尺寸参数，而`85`是库生成缩略图时使用的默认JPEG质量值。
- en: 'You can use a different quality value using the `quality` parameter. To set
    the highest JPEG quality, you can use the value `100`, like this: `{% thumbnail
    image.image 300x0 quality=100 %}`. A higher quality will imply a larger file size.'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用不同的质量值，使用`quality`参数。要设置最高的JPEG质量，您可以使用值`100`，如下所示：`{% thumbnail image.image
    300x0 quality=100 %}`。更高的质量将意味着更大的文件大小。
- en: The `easy-thumbnails` application offers several options to customize your thumbnails,
    including cropping algorithms and different effects that can be applied. If you
    run into any issues generating thumbnails, you can add `THUMBNAIL_DEBUG = True`
    to the `settings.py` file to obtain the debug information. You can read the full
    documentation of `easy-thumbnails` at [https://easy-thumbnails.readthedocs.io/](https://easy-thumbnails.readthedocs.io/).
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`easy-thumbnails` 应用程序提供了几个选项来自定义您的缩略图，包括裁剪算法和可以应用的不同效果。如果您在生成缩略图时遇到任何问题，可以将
    `THUMBNAIL_DEBUG = True` 添加到 `settings.py` 文件中以获取调试信息。您可以在 [https://easy-thumbnails.readthedocs.io/](https://easy-thumbnails.readthedocs.io/)
    阅读有关 `easy-thumbnails` 的完整文档。'
- en: Adding asynchronous actions with JavaScript
  id: totrans-278
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 JavaScript 添加异步操作
- en: We are going to add a **like** button to the image detail page to let users
    click on it to like an image. When users click the *like* button, we will send
    an HTTP request to the web server using JavaScript. This will perform the *like*
    action without reloading the whole page. For this functionality, we will implement
    a view that allows users to like/unlike images.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 我们打算在图片详情页添加一个 **like** 按钮，让用户点击它来喜欢一张图片。当用户点击 *like* 按钮时，我们将使用 JavaScript 向网页服务器发送
    HTTP 请求。这将执行 *like* 操作而不会重新加载整个页面。为了实现这个功能，我们将实现一个允许用户喜欢/不喜欢图片的视图。
- en: The JavaScript **Fetch API** is the built-in way to make asynchronous HTTP requests
    to web servers from web browsers. By using the Fetch API, you can send and retrieve
    data from the web server without the need for a whole page refresh. The Fetch
    API was launched as a modern successor to the `XMLHttpRequest` (XHR) object that
    is built into the browser, used to make HTTP requests without reloading the page.
    The set of web development techniques to send and retrieve data from a web server
    asynchronously without reloading the page is also known as **AJAX**, which stands
    for **Asynchronous JavaScript and XML**. AJAX is a misleading name because AJAX
    requests can exchange data not only in XML format but also in formats such as
    JSON, HTML, and plain text. You might find references to the Fetch API and AJAX
    indistinctively on the internet.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 的 **Fetch API** 是从网页浏览器向网页服务器发送异步 HTTP 请求的内置方式。通过使用 Fetch API，您可以在不刷新整个页面的情况下发送和检索来自网页服务器的数据。Fetch
    API 作为浏览器内置的 `XMLHttpRequest` (XHR) 对象的现代替代品推出，该对象用于在不重新加载页面的情况下发送 HTTP 请求。用于在不重新加载页面的情况下异步发送和检索来自网页服务器数据的网页开发技术也被称为
    **AJAX**，代表 **Asynchronous JavaScript and XML**。AJAX 这个名字具有误导性，因为 AJAX 请求不仅可以交换
    XML 格式的数据，还可以交换 JSON、HTML 和纯文本等格式的数据。您可能会在互联网上找到对 Fetch API 和 AJAX 的混淆性引用。
- en: You can find information about the Fetch API at [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch).
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)
    找到有关 Fetch API 的信息。
- en: We will start by implementing the view to perform the *like* and *unlike* actions,
    and then we will add the JavaScript code to the related template to perform asynchronous
    HTTP requests.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先实现执行 *like* 和 *unlike* 操作的视图，然后我们将向相关的模板添加 JavaScript 代码以执行异步 HTTP 请求。
- en: 'Edit the `views.py` file of the `images` application and add the following
    code to it:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `images` 应用程序的 `views.py` 文件，并向其中添加以下代码：
- en: '[PRE46]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: We have used two decorators for the new view. The `login_required` decorator
    prevents users who are not logged in from accessing this view. The `require_POST`
    decorator returns an `HttpResponseNotAllowed` object (status code `405`) if the
    HTTP request is not done via `POST`. This way, you only allow `POST` requests
    for this view.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为新的视图使用了两个装饰器。`login_required` 装饰器阻止未登录的用户访问此视图。`require_POST` 装饰器如果 HTTP
    请求不是通过 `POST` 执行，则返回一个 `HttpResponseNotAllowed` 对象（状态码 `405`）。这样，您只为这个视图允许 `POST`
    请求。
- en: Django also provides a `require_GET` decorator to only allow `GET` requests
    and a `require_http_methods` decorator to which you can pass a list of allowed
    methods as an argument.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: Django 还提供了一个 `require_GET` 装饰器，仅允许 `GET` 请求，以及一个 `require_http_methods` 装饰器，您可以将允许的方法列表作为参数传递。
- en: 'This view expects the following `POST` parameters:'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 此视图期望以下 `POST` 参数：
- en: '`image_id`: The ID of the `Image` object on which the user is performing the
    action'
  id: totrans-288
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image_id`：用户执行操作时 `Image` 对象的 ID'
- en: '`action`: The action that the user wants to perform, which should be a string
    with the value `like` or `unlike`'
  id: totrans-289
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：用户想要执行的操作，应该是一个值为 `like` 或 `unlike` 的字符串'
- en: We have used the manager provided by Django for the `users_like` many-to-many
    field of the `Image` model in order to add or remove objects from the relationship
    using the `add()` or `remove()` methods. If the `add()` method is called passing
    an object that is already present in the related object set, it will not be duplicated.
    If the `remove()` method is called with an object that is not in the related object
    set, nothing will happen. Another useful method of many-to-many managers is `clear()`,
    which removes all objects from the related object set.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用了 Django 为 `Image` 模型的 `users_like` 多对多字段提供的管理器，以便使用 `add()` 或 `remove()`
    方法添加或删除关系中的对象。如果调用 `add()` 方法时传递的对象已经在相关对象集中存在，则不会重复。如果调用 `remove()` 方法时传递的对象不在相关对象集中，则不会发生任何操作。多对多管理器的另一个有用方法是
    `clear()`，它从相关对象集中删除所有对象。
- en: To generate the view response, we have used the `JsonResponse` class provided
    by Django, which returns an HTTP response with an `application/json` content type,
    converting the given object into a JSON output.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 为了生成视图响应，我们使用了 Django 提供的 `JsonResponse` 类，它返回一个带有 `application/json` 内容类型的
    HTTP 响应，将给定的对象转换为 JSON 输出。
- en: 'Edit the `urls.py` file of the `images` application and add the following URL
    pattern highlighted in bold:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `images` 应用程序的 `urls.py` 文件，并添加以下加粗的 URL 模式：
- en: '[PRE47]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Loading JavaScript on the DOM
  id: totrans-294
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 DOM 上加载 JavaScript
- en: We need to add JavaScript code to the image detail template. To use JavaScript
    in our templates, we will add a base wrapper in the `base.html` template of the
    project first.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在图像详情模板中添加 JavaScript 代码。为了在我们的模板中使用 JavaScript，我们首先在项目的 `base.html` 模板中添加一个基本包装器。
- en: 'Edit the `base.html` template of the `account` application and include the
    following code highlighted in bold before the closing `</body>` HTML tag:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `account` 应用程序的 `base.html` 模板，并在关闭 `</body>` HTML 标签之前包含以下加粗的代码：
- en: '[PRE48]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: We have added a `<script>` tag to include JavaScript code. The `document.addEventListener()`
    method is used to define a function that will be called when the given event is
    triggered. We pass the event name `DOMContentLoaded`, which fires when the initial
    HTML document has been completely loaded and the DOM hierarchy has been fully
    constructed. By using this event, we make sure the DOM is fully constructed before
    we interact with any HTML elements and we manipulate the DOM. The code within
    the function will only be executed once the DOM is ready.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个 `<script>` 标签来包含 JavaScript 代码。`document.addEventListener()` 方法用于定义当给定事件触发时将被调用的函数。我们传递事件名称
    `DOMContentLoaded`，它在初始 HTML 文档完全加载并且 DOM 层次结构已完全构建时触发。通过使用此事件，我们确保在交互任何 HTML
    元素和操作 DOM 之前，DOM 已完全构建。函数内的代码仅在 DOM 准备就绪后执行。
- en: Inside the document-ready handler, we have included a Django template block
    called `domready`. Any template that extends the `base.html` template can use
    this block to include specific JavaScript code to execute when the DOM is ready.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 在文档就绪处理程序内部，我们包含了一个名为 `domready` 的 Django 模板块。任何扩展 `base.html` 模板的模板都可以使用此块来包含在
    DOM 准备就绪时执行的特定 JavaScript 代码。
- en: Don’t get confused by the JavaScript code and Django template tags. The Django
    template language is rendered on the server side to generate the HTML document,
    and JavaScript is executed in the browser on the client side. In some cases, it
    is useful to generate JavaScript code dynamically using Django in order to use
    the results of QuerySets or server-side calculations to define variables in JavaScript.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 不要被 JavaScript 代码和 Django 模板标签搞混。Django 模板语言在服务器端渲染以生成 HTML 文档，而 JavaScript
    在客户端的浏览器中执行。在某些情况下，使用 Django 动态生成 JavaScript 代码是有用的，以便使用 QuerySets 或服务器端计算的结果在
    JavaScript 中定义变量。
- en: The examples in this chapter include JavaScript code in Django templates. The
    preferred method to add JavaScript code to your templates is by loading `.js`
    files, which are served as static files, especially if you are using large scripts.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的示例在 Django 模板中包含 JavaScript 代码。向模板添加 JavaScript 代码的首选方法是加载 `.js` 文件，这些文件作为静态文件提供，特别是如果你使用的是大型脚本。
- en: Cross-site request forgery for HTTP requests in JavaScript
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript 中 HTTP 请求的跨站请求伪造
- en: You learned about **cross-site request forgery** (**CSRF**) in *Chapter 2*,
    *Enhancing Your Blog with Advanced Features*. With CSRF protection active, Django
    looks for a CSRF token in all `POST` requests. When you submit forms, you can
    use the `{% csrf_token %}` template tag to send the token along with the form.
    HTTP requests made in JavaScript have to pass the CSRF token as well in every
    `POST` request.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 在*第2章*，*使用高级功能增强你的博客*中，你学习了**跨站请求伪造**（**CSRF**）。当CSRF保护激活时，Django会在所有`POST`请求中查找CSRF令牌。当你提交表单时，你可以使用`{%
    csrf_token %}`模板标签将令牌与表单一起发送。在JavaScript中执行的HTTP请求必须在每个`POST`请求中传递CSRF令牌。
- en: Django allows you to set a custom `X-CSRFToken` header in your HTTP requests
    with the value of the CSRF token.
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: Django允许你在HTTP请求中设置一个自定义的`X-CSRFToken`头，其值为CSRF令牌。
- en: To include the token in HTTP requests that originate from JavaScript, we will
    need to retrieve the CSRF token from the `csrftoken` cookie, which is set by Django
    if the CSRF protection is active. To handle cookies, we will use JavaScript Cookie.
    JavaScript Cookie is a lightweight JavaScript API for handling cookies. You can
    learn more about it at [https://github.com/js-cookie/js-cookie](https://github.com/js-cookie/js-cookie).
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 要在从JavaScript发起的HTTP请求中包含令牌，我们需要从`csrftoken`cookie中检索CSRF令牌，该cookie由Django在CSRF保护激活时设置。为了处理cookie，我们将使用JavaScript
    Cookie。JavaScript Cookie是一个用于处理cookie的轻量级JavaScript API。您可以在[https://github.com/js-cookie/js-cookie](https://github.com/js-cookie/js-cookie)了解更多信息。
- en: 'Edit the `base.html` template of the `account` application and add the following
    code highlighted in bold at the bottom of the `<body>` element like this:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`account`应用的`base.html`模板，并在`<body>`元素的底部添加以下加粗代码：
- en: '[PRE49]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We have implemented the following functionality:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经实现了以下功能：
- en: The JavaScript Cookie plugin is loaded from a public **Content Delivery Network**
    (**CDN**).
  id: totrans-309
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: JavaScript Cookie插件是从公共**内容分发网络**（**CDN**）加载的。
- en: The value of the `csrftoken` cookie is retrieved with `Cookies.get()` and stored
    in the JavaScript constant `csrftoken`.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`Cookies.get()`检索`csrftoken`cookie的值，并将其存储在JavaScript常量`csrftoken`中。
- en: We have to include the CSRF token in all JavaScript fetch requests that use
    unsafe HTTP methods, such as `POST` or `PUT`. We will later include the `csrftoken`
    constant in a custom HTTP header named `X-CSRFToken` when sending HTTP `POST`
    requests.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须在所有使用不安全HTTP方法（如`POST`或`PUT`）的JavaScript fetch请求中包含CSRF令牌。在发送HTTP `POST`请求时，我们将在自定义HTTP头`X-CSRFToken`中包含`csrftoken`常量。
- en: You can find more information about Django’s CSRF protection and AJAX at [https://docs.djangoproject.com/en/5.0/ref/csrf/#ajax](https://docs.djangoproject.com/en/5.0/ref/csrf/#ajax).
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在[https://docs.djangoproject.com/en/5.0/ref/csrf/#ajax](https://docs.djangoproject.com/en/5.0/ref/csrf/#ajax)找到有关Django
    CSRF保护和AJAX的更多信息。
- en: Next, we will implement the HTML and JavaScript code for users to like/unlike
    images.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将实现用户喜欢/取消喜欢图像的HTML和JavaScript代码。
- en: Performing HTTP requests with JavaScript
  id: totrans-314
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用JavaScript执行HTTP请求
- en: 'Edit the `images/image/detail.html` template and add the following code highlighted
    in bold:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`images/image/detail.html`模板，并添加以下加粗代码：
- en: '[PRE50]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In the preceding code, we have added another variable to the `{% with %}` template
    tag to store the results of the `image.users_like.all` query and prevent the query
    from being executed against the database multiple times. This variable is used
    to check whether the current user is in this list with `{% if request.user in
    users_like %}` and then with `{% if request.user not in users_like %}`. The same
    variable is then used to iterate over the users that like this image with `{%
    for user in users_like %}`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们向`{% with %}`模板标签添加了另一个变量来存储`image.users_like.all`查询的结果，以防止查询多次对数据库执行。该变量用于检查当前用户是否在这个列表中，使用`{%
    if request.user in users_like %}`和`{% if request.user not in users_like %}`。然后，使用相同的变量遍历喜欢该图像的用户，使用`{%
    for user in users_like %}`。
- en: 'We have added to this page the total number of users who like the image and
    have included a link for the user to like/unlike the image. The related object
    set, `users_like`, is used to check whether `request.user` is contained in the
    related object set, to display the text **Like** or **Unlike** based on the current
    relationship between the user and this image. We have added the following attributes
    to the `<a>` HTML link element:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将喜欢该图像的用户总数添加到该页面，并为用户添加了喜欢/取消喜欢图像的链接。相关的对象集`users_like`用于检查`request.user`是否包含在相关对象集中，根据用户与该图像的当前关系显示**喜欢**或**取消喜欢**文本。我们已向`<a>`HTML链接元素添加以下属性：
- en: '`data-id`: The ID of the image displayed.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-id`：显示的图像的 ID。'
- en: '`data-action`: The action to perform when the user clicks on the link. This
    can be either `like` or `unlike`.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`data-action`：用户点击链接时要执行的操作。这可以是 `like` 或 `unlike`。'
- en: Any attribute on any HTML element with a name that starts with `data-` is a
    data attribute. Data attributes are used to store custom data for your application.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 任何以 `data-` 开头的名称的 HTML 元素属性都是数据属性。数据属性用于存储应用程序的定制数据。
- en: 'We will send the value of the `data-id` and `data-action` attributes in the
    HTTP request to the `image_like` view. When a user clicks on the **like/unlike**
    link, we will need to perform the following actions in the browser:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 HTTP 请求中将 `data-id` 和 `data-action` 属性的值发送到 `image_like` 视图。当用户点击 **like/unlike**
    链接时，我们将在浏览器中执行以下操作：
- en: Send an HTTP `POST` request to the `image_like` view, passing the image `id`
    and the `action` parameters to it.
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `image_like` 视图发送 HTTP `POST` 请求，并将图像 `id` 和 `action` 参数传递给它。
- en: If the HTTP request is successful, update the `data-action` attribute of the
    `<a>` HTML element with the opposite action (`like` / `unlike`), and modify its
    display text accordingly.
  id: totrans-324
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 HTTP 请求成功，更新 `<a>` HTML 元素的 `data-action` 属性以使用相反的操作（`like` / `unlike`），并相应地修改其显示文本。
- en: Update the total number of likes displayed on the page.
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新页面上显示的点赞总数。
- en: 'Add the following `domready` block at the bottom of the `images/image/detail.html`
    template:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `images/image/detail.html` 模板的底部添加以下 `domready` 块：
- en: '[PRE51]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'The preceding code works as follows:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的工作原理如下：
- en: The `{% url %}` template tag is used to build the `images:like` URL. The generated
    URL is stored in the `url` JavaScript constant.
  id: totrans-329
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `{% url %}` 模板标签构建 `images:like` URL。生成的 URL 存储在 `url` JavaScript 常量中。
- en: 'An `options` object is created with the options that will be passed to the
    HTTP request with the Fetch API. These are:'
  id: totrans-330
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建了一个 `options` 对象，其中包含将传递给 Fetch API 的 HTTP 请求的选项。这些是：
- en: '`method`: The HTTP method to use. In this case, it’s `POST`.'
  id: totrans-331
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`method`：要使用的 HTTP 方法。在这种情况下，它是 `POST`。'
- en: '`headers`: Additional HTTP headers to include in the request. We include the
    `X-CSRFToken` header with the value of the `csrftoken` constant that we defined
    in the `base.html` template.'
  id: totrans-332
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`headers`：要包含在请求中的附加 HTTP 头。我们包含具有 `csrftoken` 常量值的 `X-CSRFToken` 头。'
- en: '`mode`: The mode of the HTTP request. We use `same-origin` to indicate the
    request is made to the same origin. You can find more information about modes
    at [https://developer.mozilla.org/en-US/docs/Web/API/Request/mode](https://developer.mozilla.org/en-US/docs/Web/API/Request/mode).'
  id: totrans-333
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`mode`：HTTP 请求的模式。我们使用 `same-origin` 来表示请求是针对同一源的。您可以在 [https://developer.mozilla.org/en-US/docs/Web/API/Request/mode](https://developer.mozilla.org/en-US/docs/Web/API/Request/mode)
    找到有关模式的更多信息。'
- en: The `a.like` selector is used to find all `<a>` elements of the HTML document
    with the `like` class using `document.querySelector()`.
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `a.like` 选择器通过 `document.querySelector()` 查找所有具有 `like` 类的 HTML 文档 `<a>`
    元素。
- en: An event listener is defined for the `click` event on the elements targeted
    with the selector. This function is executed every time the user clicks on the
    **like/unlike** link.
  id: totrans-335
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为使用选择器指定的元素定义了 `click` 事件的事件监听器。每次用户点击 **like/unlike** 链接时，都会执行此函数。
- en: Inside the handler function, `e.preventDefault()` is used to avoid the default
    behavior of the `<a>` element. This will prevent the default behavior of the link
    element, stopping the event propagation, and preventing the link from following
    the URL.
  id: totrans-336
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在处理函数内部，使用 `e.preventDefault()` 来避免 `<a>` 元素的默认行为。这将阻止链接元素的默认行为，停止事件传播，并防止链接跟随
    URL。
- en: A `likeButton` variable is used to store the reference to `this`, the element
    on which the event was triggered.
  id: totrans-337
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`likeButton` 变量用于存储对 `this` 的引用，即触发事件的元素。'
- en: 'Now we need to send the HTTP request using the Fetch API. Edit the `domready`
    block of the `images/image/detail.html` template and add the following code highlighted
    in bold:'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要使用 Fetch API 发送 HTTP 请求。编辑 `images/image/detail.html` 模板的 `domready` 块，并添加以下加粗的代码：
- en: '[PRE52]'
  id: totrans-339
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'The new code works as follows:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 新代码的工作原理如下：
- en: A `FormData` object is created to construct a set of key/value pairs representing
    form fields and their values. The object is stored in the `formData` variable.
  id: totrans-341
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `FormData` 对象来构建一组表示表单字段及其值的键/值对。该对象存储在 `formData` 变量中。
- en: The `id` and `action` parameters expected by the `image_like` Django view are
    added to the `formData` object. The values for these parameters are retrieved
    from the `likeButton` element clicked. The `data-id` and `data-action` attributes
    are accessed with `dataset.id` and `dataset.action`.
  id: totrans-342
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`image_like` Django 视图所期望的 `id` 和 `action` 参数被添加到 `formData` 对象中。这些参数的值是从点击的
    `likeButton` 元素中检索的。使用 `dataset.id` 和 `dataset.action` 访问 `data-id` 和 `data-action`
    属性。'
- en: A new `body` key is added to the `options` object that will be used for the
    HTTP request. The value for this key is the `formData` object.
  id: totrans-343
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在用于 HTTP 请求的 `options` 对象中添加了一个新的 `body` 键，其值是 `formData` 对象。
- en: The Fetch API is used by calling the `fetch()` function. The `url` variable
    defined previously is passed as the URL for the request, and the `options` object
    is passed as the options for the request.
  id: totrans-344
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过调用 `fetch()` 函数使用 Fetch API。将之前定义的 `url` 变量作为请求的 URL 传递，并将 `options` 对象作为请求的选项传递。
- en: The `fetch()` function returns a promise that resolves with a `Response` object,
    which is a representation of the HTTP response. The `.then()` method is used to
    define a handler for the promise. To extract the JSON body content, we use `response.json()`.
    You can learn more about the `Response` object at [https://developer.mozilla.org/en-US/docs/Web/API/Response](https://developer.mozilla.org/en-US/docs/Web/API/Response).
  id: totrans-345
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`fetch()` 函数返回一个解析为 `Response` 对象的承诺，`Response` 对象是 HTTP 响应的表示。使用 `.then()`
    方法定义承诺的处理程序。为了提取 JSON 主体内容，我们使用 `response.json()`。你可以在 [https://developer.mozilla.org/en-US/docs/Web/API/Response](https://developer.mozilla.org/en-US/docs/Web/API/Response)
    上了解更多关于 `Response` 对象的信息。'
- en: The `.then()` method is used again to define a handler for the data extracted
    to JSON. In this handler, the `status` attribute of the data received is used
    to check whether its value is `ok`.
  id: totrans-346
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`.then()` 方法再次被用来定义一个处理程序，用于处理提取到 JSON 的数据。在这个处理程序中，使用接收到的数据的 `status` 属性来检查其值是否为
    `ok`。'
- en: 'You added the functionality to send the HTTP request and handle the response.
    After a successful request, you need to change the button and its related action
    to the opposite: from *like* to *unlike*, or from *unlike* to *like*. By doing
    so, users are able to undo their action.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 你添加了发送 HTTP 请求和处理响应的功能。在请求成功后，你需要将按钮及其相关操作更改为相反的：从 **点赞** 到 **取消点赞**，或从 **取消点赞**
    到 **点赞**。通过这样做，用户可以撤销他们的操作。
- en: 'Edit the `domready` block of the `images/image/detail.html` template and add
    the following code highlighted in bold:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `images/image/detail.html` 模板的 `domready` 块，并添加以下加粗的代码：
- en: '[PRE53]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The preceding code works as follows:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码的工作原理如下：
- en: The previous action of the button is retrieved from the `data-action` attribute
    of the link and it is stored in the `previousAction` variable.
  id: totrans-351
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从链接的 `data-action` 属性中检索按钮的先前操作，并将其存储在 `previousAction` 变量中。
- en: The `data-action` attribute of the link and the link text are toggled. This
    allows users to undo their actions.
  id: totrans-352
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换链接的 `data-action` 属性和链接文本。这允许用户撤销他们的操作。
- en: The total like count is retrieved from the DOM by using the selector `span.count.total`
    and the value is parsed to an integer with `parseInt()`. The total like count
    is increased or decreased according to the action performed (*like* or *unlike*).
  id: totrans-353
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用选择器 `span.count.total` 从 DOM 中检索总点赞数，并使用 `parseInt()` 将其解析为整数。根据执行的操作（**点赞**
    或 **取消点赞**）增加或减少总点赞数。
- en: 'Open the image detail page in your browser for an image that you have uploaded.
    You should be able to see the following initial likes count and the **LIKE** button,
    as follows:'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开你上传的图片的详细页面。你应该能够看到以下初始点赞数和 **点赞** 按钮，如下所示：
- en: '![](img/B21088_06_18.png)'
  id: totrans-355
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_18.png)'
- en: 'Figure 6.18: The likes count and LIKE button in the image detail template'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18：图片详细模板中的点赞数和 **点赞** 按钮
- en: 'Click on the **LIKE** button. You will note that the total likes count increases
    by one and the button text changes to **UNLIKE**, as follows:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 点击 **点赞** 按钮。你会注意到总点赞数增加一个，按钮文本变为 **取消点赞**，如下所示：
- en: '![](img/B21088_06_19.png)'
  id: totrans-358
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_06_19.png)'
- en: 'Figure 6.19: The likes count and button after clicking the LIKE button'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19：点击 **点赞** 按钮后的点赞数和按钮
- en: If you click on the **UNLIKE** button, the action is performed, and then the
    button’s text changes back to **LIKE** and the total count changes accordingly.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你点击 **取消点赞** 按钮，将执行操作，然后按钮的文本变回 **点赞**，总计数相应地更改。
- en: When programming JavaScript, especially when performing AJAX requests, it is
    recommended to use a tool for debugging JavaScript and HTTP requests. Most modern
    browsers include developer tools to debug JavaScript. Usually, you can right-click
    anywhere on the website to open the contextual menu and click on **Inspect** or
    **Inspect Element** to access the web developer tools of your browser.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写JavaScript时，尤其是在执行AJAX请求时，建议使用一个用于调试JavaScript和HTTP请求的工具。大多数现代浏览器都包含用于调试JavaScript的开发者工具。通常，您可以在网站上任何地方右键单击以打开上下文菜单，然后点击**检查**或**检查元素**来访问您浏览器的网页开发者工具。
- en: In the next section, you will learn how to use asynchronous HTTP requests with
    JavaScript and Django to implement infinite scroll pagination.
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，您将学习如何使用JavaScript和Django的异步HTTP请求来实现无限滚动分页。
- en: Adding infinite scroll pagination to the image list
  id: totrans-363
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为图像列表添加无限滚动分页
- en: Next, we need to list all bookmarked images on the website. We will use JavaScript
    requests to build an infinite scroll functionality. Infinite scroll is achieved
    by loading the next results automatically when the user scrolls to the bottom
    of the page.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要列出网站上所有已标记的图片。我们将使用JavaScript请求来构建无限滚动功能。无限滚动是通过在用户滚动到页面底部时自动加载下一组结果来实现的。
- en: Let’s implement an image list view that will handle both standard browser requests
    and requests originating from JavaScript. When the user initially loads the image
    list page, we will display the first page of images. When they scroll to the bottom
    of the page, we will retrieve the following page of items with JavaScript and
    append it to the bottom of the main page.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们实现一个图像列表视图，该视图将处理标准浏览器请求和来自JavaScript的请求。当用户最初加载图像列表页面时，我们将显示第一页的图像。当他们滚动到页面底部时，我们将使用JavaScript检索下一页的项目并将其附加到主页的底部。
- en: 'The same view will handle both standard and AJAX infinite scroll pagination.
    Edit the `views.py` file of the `images` application and add the following code
    highlighted in bold:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 相同的视图将处理标准和AJAX无限滚动分页。编辑`images`应用的`views.py`文件，并添加以下加粗的代码：
- en: '[PRE54]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In this view, a QuerySet is created to retrieve all images from the database.
    Then, a `Paginator` object is created to paginate over the results, retrieving
    eight images per page. The `page` HTTP `GET` parameter is retrieved to get the
    requested page number. The `images_only` HTTP `GET` parameter is retrieved to
    know if the whole page has to be rendered or only the new images.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个视图中，创建了一个QuerySet来从数据库中检索所有图片。然后，创建了一个`Paginator`对象来对结果进行分页，每页检索八张图片。通过检索`page`
    HTTP `GET`参数来获取请求的页面编号。通过检索`images_only` HTTP `GET`参数来了解是否需要渲染整个页面或仅渲染新图片。
- en: We will render the whole page when it is requested by the browser. However,
    we will only render the HTML with new images for Fetch API requests, since we
    will be appending them to the existing HTML page.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 当浏览器请求时，我们将渲染整个页面。然而，对于Fetch API请求，我们只会渲染包含新图片的HTML，因为我们将会将它们附加到现有的HTML页面上。
- en: 'An `EmptyPage` exception will be triggered if the requested page is out of
    range. If this is the case and only images have to be rendered, an empty `HttpResponse`
    will be returned. This will allow you to stop the AJAX pagination on the client
    side when reaching the last page. The results are rendered using two different
    templates:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 如果请求的页面超出了范围，将会触发`EmptyPage`异常。如果这种情况发生，并且只需要渲染图片，将返回一个空的`HttpResponse`。这将允许您在到达最后一页时在客户端停止AJAX分页。结果使用两个不同的模板进行渲染：
- en: For JavaScript HTTP requests, which will include the `images_only` parameter,
    the `list_images.html` template will be rendered. This template will only contain
    the images of the requested page.
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于包含`images_only`参数的JavaScript HTTP请求，将渲染`list_images.html`模板。此模板将仅包含请求页面的图片。
- en: For browser requests, the `list.html` template will be rendered. This template
    will extend the `base.html` template to display the whole page and will include
    the `list_images.html` template to include the list of images.
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于浏览器请求，将渲染`list.html`模板。此模板将扩展`base.html`模板以显示整个页面，并将包含`list_images.html`模板以包含图像列表。
- en: 'Edit the `urls.py` file of the `images` application and add the following URL
    pattern highlighted in bold:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`images`应用的`urls.py`文件，并添加以下加粗的URL模式：
- en: '[PRE55]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Finally, you need to create the templates mentioned here. Inside the `images/image/`
    template directory, create a new template and name it `list_images.html`. Add
    the following code to it:'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您需要创建这里提到的模板。在 `images/image/` 模板目录内，创建一个新的模板并命名为 `list_images.html`。向其中添加以下代码：
- en: '[PRE56]'
  id: totrans-376
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The preceding template displays the list of images. You will use it to return
    results for AJAX requests. In this code, you iterate over images and generate
    a square thumbnail for each image. You normalize the size of the thumbnails to
    `300x300` pixels. You also use the `smart` cropping option. This option indicates
    that the image has to be incrementally cropped down to the requested size by removing
    slices from the edges with the least entropy.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 上述模板显示了图片列表。您将使用它来返回 AJAX 请求的结果。在此代码中，您遍历图片并为每张图片生成一个正方形缩略图。您将缩略图的大小标准化为 `300x300`
    像素。您还使用了 `smart` 裁剪选项。此选项表示图像必须通过从边缘移除具有最少熵的部分，逐步裁剪到请求的大小。
- en: 'Create another template in the same directory and name it `images/image/list.html`.
    Add the following code to it:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 在同一目录下创建另一个模板，并将其命名为 `images/image/list.html`。向其中添加以下代码：
- en: '[PRE57]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: The list template extends the `base.html` template. To avoid repeating code,
    you include the `images/image/list_images.html` template for displaying images.
    The `images/image/list.html` template will hold the JavaScript code for loading
    additional pages when scrolling to the bottom of the page.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 列表模板扩展了 `base.html` 模板。为了避免代码重复，您包括 `images/image/list_images.html` 模板以显示图片。`images/image/list.html`
    模板将包含在页面滚动到页面底部时加载额外页面的 JavaScript 代码。
- en: 'Edit the `images/image/list.html` template and add the following code highlighted
    in bold:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `images/image/list.html` 模板，并添加以下加粗的代码：
- en: '[PRE58]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'The preceding code provides the infinite scroll functionality. You include
    the JavaScript code in the `domready` block that you defined in the `base.html`
    template. The code is as follows:'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码提供了无限滚动功能。您需要在 `base.html` 模板中定义的 `domready` 块中包含 JavaScript 代码。代码如下：
- en: 'You define the following variables:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您定义以下变量：
- en: '`page`: Stores the current page number.'
  id: totrans-385
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`page`：存储当前页码。'
- en: '`empty_page`: Allows you to know whether the user is on the last page and retrieves
    an empty page. As soon as you get an empty page, you will stop sending additional
    HTTP requests because you will assume that there are no more results.'
  id: totrans-386
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`empty_page`：允许您知道用户是否在最后一页，并检索空页面。一旦您收到空页面，您将停止发送额外的 HTTP 请求，因为您将假设没有更多结果。'
- en: '`block_request`: Prevents you from sending additional requests while an HTTP
    request is in progress.'
  id: totrans-387
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`block_request`：在 HTTP 请求进行时阻止您发送额外的请求。'
- en: You use `window.addEventListener()` to capture the `scroll` event and to define
    a handler function for it.
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用 `window.addEventListener()` 捕获 `scroll` 事件并为它定义一个处理函数。
- en: You calculate the `margin` variable to get the difference between the total
    document height and the window inner height, because that’s the height of the
    remaining content for the user to scroll. You subtract a value of `200` from the
    result so that you load the next page when the user is closer than 200 pixels
    to the bottom of the page.
  id: totrans-389
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您计算 `margin` 变量以获取总文档高度与窗口内部高度之间的差值，因为那是用户可以滚动的剩余内容的高度。您从结果中减去 `200` 的值，以便当用户距离页面底部小于
    200 像素时加载下一页。
- en: 'Before sending an HTTP request, you check that:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在发送 HTTP 请求之前，您需要检查以下内容：
- en: The `window.pageYOffset` is higher than the calculated margin.
  id: totrans-391
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`window.pageYOffset` 的值高于计算出的边距。'
- en: The user didn’t get to the last page of results (`emptyPage` has to be `false`).
  id: totrans-392
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户没有到达结果页的最后一页（`emptyPage` 必须为 `false`）。
- en: There is no other ongoing HTTP request (`blockRequest` has to be `false`).
  id: totrans-393
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有其他正在进行的 HTTP 请求（`blockRequest` 必须为 `false`）。
- en: If the previous conditions are met, you set `blockRequest` to `true` to prevent
    the `scroll` event from triggering additional HTTP requests, and you increase
    the `page` counter by `1` to retrieve the next page.
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果满足上述条件，您将 `blockRequest` 设置为 `true` 以防止 `scroll` 事件触发额外的 HTTP 请求，并将 `page`
    计数器增加 `1` 以获取下一页。
- en: You use `fetch()` to send an HTTP `GET` request, setting the URL parameters
    `image_only=1` to retrieve only the HTML for images instead of the whole HTML
    page, and `page` for the requested page number.
  id: totrans-395
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您使用 `fetch()` 发送 HTTP `GET` 请求，设置 URL 参数 `image_only=1` 以获取图片的 HTML 而不是整个 HTML
    页面，以及 `page` 用于请求的页面编号。
- en: 'The body content is extracted from the HTTP response with `response.text()`
    and the HTML returned is treated accordingly:'
  id: totrans-396
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `response.text()` 从 HTTP 响应中提取正文内容，并相应地处理返回的 HTML：
- en: '**If the response has no content**: You get to the end of the results and there
    are no more pages to load. You set `emptyPage` to `true` to prevent additional
    HTTP requests.'
  id: totrans-397
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果响应没有内容**：你到达了结果的末尾，没有更多的页面可以加载。你将`emptyPage`设置为`true`以防止额外的HTTP请求。'
- en: '**If the response contains data**: You append the data to the HTML element
    with the `image-list` ID. The page content expands vertically, appending results
    when the user approaches the bottom of the page. You remove the lock for additional
    HTTP requests by setting `blockRequest` to `false`.'
  id: totrans-398
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**如果响应包含数据**：你将数据追加到具有`image-list` ID的HTML元素中。页面内容垂直扩展，当用户接近页面底部时追加结果。通过将`blockRequest`设置为`false`来移除对额外HTTP请求的锁定。'
- en: Below the event listener, you simulate an initial `scroll` event when the page
    is loaded. You create the event by creating a new `Event` object, and then you
    launch it with `window.dispatchEvent()`. By doing this, you ensure that the event
    is triggered if the initial content fits the window and has no scroll.
  id: totrans-399
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在事件监听器下方，当页面加载时，你模拟一个初始的`scroll`事件。你通过创建一个新的`Event`对象来创建事件，然后使用`window.dispatchEvent()`来触发它。这样做可以确保如果初始内容适合窗口且没有滚动，事件将被触发。
- en: 'Open `https://127.0.0.1:8000/images/` in your browser. You will see the list
    of images that you have bookmarked so far. It should look similar to this:'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开`https://127.0.0.1:8000/images/`。你会看到你迄今为止已书签的图片列表。它应该看起来像这样：
- en: '![](img/B21088_06_20.png)'
  id: totrans-401
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_20.png)'
- en: 'Figure 6.20: The image list page with infinite scroll pagination'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.20：具有无限滚动分页的图片列表页面
- en: '*Figure 6.19* image attributions:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '*图6.19* 图片归属：'
- en: '*Chick Corea* by ataelw (license: Creative Commons Attribution 2.0 Generic:
    https://creativecommons.org/licenses/by/2.0/)'
  id: totrans-404
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*奇克·科里亚* 由ataelw提供（许可：Creative Commons Attribution 2.0 Generic：https://creativecommons.org/licenses/by/2.0/）'
- en: '*Al Jarreau - Düsseldorf 1981* by Eddi Laumanns aka RX-Guru (license: Creative
    Commons Attribution 3.0 Unported: https://creativecommons.org/licenses/by/3.0/)'
  id: totrans-405
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*阿尔·贾雷奥 - 杜塞尔多夫1981* 由Eddi Laumanns（别名RX-Guru）提供（许可：Creative Commons Attribution
    3.0 Unported：https://creativecommons.org/licenses/by/3.0/）'
- en: '*Al Jarreau* by Kingkongphoto and www.celebrity-photos.com (license: Creative
    Commons Attribution-ShareAlike 2.0 Generic: https://creativecommons.org/licenses/by-sa/2.0/)'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*阿尔·贾雷奥* 由Kingkongphoto和www.celebrity-photos.com提供（许可：Creative Commons Attribution-ShareAlike
    2.0 Generic：https://creativecommons.org/licenses/by-sa/2.0/）'
- en: Scroll to the bottom of the page to load additional pages. Ensure that you have
    bookmarked more than eight images using the bookmarklet, because that’s the number
    of images you are displaying per page.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 滚动到页面底部以加载额外的页面。确保你已经使用书签工具书签了超过八张图片，因为这是你每页显示的图片数量。
- en: You can use your browser developer tools to track the AJAX requests. Usually,
    you can right-click anywhere on the website to open the contextual menu and click
    on **Inspect** or **Inspect Element** to access the web developer tools of your
    browser. Look for the panel for network requests.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用浏览器开发者工具来跟踪AJAX请求。通常，你可以在网站上任何地方右键点击以打开上下文菜单，然后点击**Inspect**或**Inspect
    Element**来访问浏览器的网络开发者工具。寻找网络请求的面板。
- en: 'Reload the page and scroll to the bottom of the page to load new pages. You
    will see the request for the first page and the AJAX requests for additional pages,
    like in *Figure 6.21*:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 重新加载页面并滚动到页面底部以加载新页面。你会看到第一页的请求和额外的页面AJAX请求，如*图6.21*所示：
- en: '![](img/B21088_06_21.png)'
  id: totrans-410
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_06_21.png)'
- en: 'Figure 6.21: HTTP requests registered in the developer tools of the browser'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.21：浏览器开发者工具中注册的HTTP请求
- en: 'In the shell where you are running Django, you will see the requests as well,
    like this:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 在你运行Django的shell中，你也会看到请求，如下所示：
- en: '[PRE59]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Finally, edit the `base.html` template of the `account` application and add
    the URL for the `images` item highlighted in bold:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，编辑`account`应用的`base.html`模板，并添加粗体显示的`images`项目的URL：
- en: '[PRE60]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Now you can access the image list from the main menu.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以从主菜单访问图片列表。
- en: Summary
  id: totrans-417
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you created models with many-to-many relationships and learned
    how to customize the behavior of forms. You built a JavaScript bookmarklet to
    share images from other websites on your site. This chapter has also covered the
    creation of image thumbnails using the `easy-thumbnails` application.
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你创建了具有多对多关系的模型，并学习了如何自定义表单的行为。你构建了一个JavaScript书签工具来分享来自其他网站的图片到你的网站上。本章还涵盖了使用`easy-thumbnails`应用程序创建图片缩略图的方法。
- en: Finally, you implemented AJAX views using the JavaScript Fetch API and added
    infinite scroll pagination to the image list view.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你使用JavaScript Fetch API实现了AJAX视图，并添加了无限滚动分页到图片列表视图。
- en: In the next chapter, you will learn how to build a follow system and an activity
    stream. You will work with generic relations, signals, and denormalization. You
    will also learn how to use Redis with Django to count image views and generate
    an image ranking.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  id: totrans-421
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter06](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter06)'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Database indexes: [https://docs.djangoproject.com/en/5.0/ref/models/options/#django.db.models.Options.indexes](https://docs.djangoproject.com/en/5.0/ref/models/options/#django.db.models.Options.indexes)'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Many-to-many relationships: [https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_many/](https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_many/)'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Requests HTTP library for Python: [https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_many/](https://docs.djangoproject.com/en/5.0/topics/db/examples/many_to_many/)'
  id: totrans-426
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pinterest Save extension: [https://help.pinterest.com/en/article/save-pins-with-the-pinterest-browser-button](https://help.pinterest.com/en/article/save-pins-with-the-pinterest-browser-button)'
  id: totrans-427
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Static content for the account application: [https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter06/bookmarks/images/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/main/Chapter06/bookmarks/images/static)'
  id: totrans-428
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'CSS selectors: [https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Selectors)'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Locating DOM elements using CSS selectors: [https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors](https://developer.mozilla.org/en-US/docs/Web/API/Document_object_model/Locating_DOM_elements_using_selectors)'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s Encrypt free automated certificate authority: [https://letsencrypt.org](https://letsencrypt.org)'
  id: totrans-431
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django `easy-thumbnails` app: [https://easy-thumbnails.readthedocs.io/](https://easy-thumbnails.readthedocs.io/)'
  id: totrans-432
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScript Fetch API usage: [https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch](https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API/Using_Fetch)'
  id: totrans-433
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScript Cookie library: [https://github.com/js-cookie/js-cookie](https://github.com/js-cookie/js-cookie)'
  id: totrans-434
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django’s CSRF protection and AJAX: [https://docs.djangoproject.com/en/5.0/ref/csrf/#ajax](https://docs.djangoproject.com/en/5.0/ref/csrf/#ajax)'
  id: totrans-435
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScript Fetch API Request mode: [https://developer.mozilla.org/en-US/docs/Web/API/Request/mode](https://developer.mozilla.org/en-US/docs/Web/API/Request/mode)'
  id: totrans-436
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScript Fetch API Response: [https://developer.mozilla.org/en-US/docs/Web/API/Response](https://developer.mozilla.org/en-US/docs/Web/API/Response)'
  id: totrans-437
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
