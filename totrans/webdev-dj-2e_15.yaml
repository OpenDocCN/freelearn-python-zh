- en: 15\. Django Third-Party Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces you to Django third-party libraries. You will configure
    your database connection using URLs with `dj-database-urls` and inspect and debug
    your application with the `django-crispy-forms`, you will enhance the look of
    your forms, as well as reduce the amount of code you have to write by using the
    `crispy` template tag. We will also cover the `django-allauth` library, which
    lets you authenticate users against third-party providers. In the final activity,
    we will enhance Bookr's forms with the use of `django-crispy-forms`.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Because Django has been around since 2007, there is a rich ecosystem of third-party
    libraries that can be plugged into an application to give it extra features. So
    far, we have learned a lot about Django and used many of its features, including
    database models, URL routing, templating, forms, and more. We used these Django
    tools directly to build a web app, but now we will look at how to leverage the
    work of others to quickly add even more advanced features to our own apps. We
    have alluded to apps for storing files, (in *Chapter 5*, *Serving Static Files*,
    we mentioned an app, `django-storages`, that can store our static files in a CDN),
    but in addition to file storage, we can also use them to plug into third-party
    authentication systems, integrate with payment gateways, customize how our settings
    are built, modify images, build forms more easily, debug our site, use different
    types of databases, and much more. Chances are, if you want to add a certain feature,
    an app exists for it.
  prefs: []
  type: TYPE_NORMAL
- en: We don't have space to cover every app in this chapter, so we'll just focus
    on four that provide useful features across many different types of apps. `django-configurations`
    allows you to configure your Django settings using classes and take advantage
    of inheritance to simplify settings for different environments. This works in
    tandem with `dj-database-urls` to specify your database connection setting using
    just a URL. The *Django Debug Toolbar* lets you get extra information to help
    with debugging, right in your browser. The last app we'll look at is `django-crispy-forms`,
    which provides extra CSS classes to make forms look nicer, as well as making them
    easier to configure using just Python code.
  prefs: []
  type: TYPE_NORMAL
- en: For each of these libraries, we will cover installation and basic setup and
    use, mostly as they apply to Bookr. They also have more configuration options
    to further customize to fit your application. Each of these apps can be installed
    with `pip`.
  prefs: []
  type: TYPE_NORMAL
- en: We will also briefly introduce `django-allauth`, which allows a Django application
    to authenticate users against third-party providers (such as Google, GitHub, Facebook,
    and Twitter). We won't cover its installation and setup in detail but will provide
    some examples to help you configure it.
  prefs: []
  type: TYPE_NORMAL
- en: Environment Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When we create a program, we often want the user to be able to configure some
    of its behavior. For example, say you have a program that connects to a database
    and saves all the records it finds into a file. Normally it would probably print
    out just a *success* message to the terminal, but you might also want to run it
    in *debug mode*, which makes it also print out all the SQL statements it is executing.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many ways of configuring a program like this. For example, you could
    have it read from a configuration file. But in some cases, the user may quickly
    want to run the Django server with a particular setting on (say, debug mode),
    and then run the server again with the same setting off. Having to change the
    configuration file each time can be inconvenient. In this case, we can read from
    an *environment variable*. Environment variables are key/value pairs that can
    be set in your operating system and then read by a program. There are several
    ways they can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: Your shell (terminal) can read variables from a profile script when it starts,
    then each program will have access to these variables.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set a variable inside a terminal and it will be made available to any
    programs that start subsequently. In Linux and macOS, this is done with the `export`
    command; Windows uses the `set` command. Any variables you set in this way override
    those in the profile script, but only for the current session. When you close
    the terminal, the variables are lost.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set environment variables at the same time as running a command in a
    terminal. These will only persist for the program being run, and they override
    exported environment variables and those read from a profile script.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can set environment variables inside a running program, and they will be
    available only inside the program (or to programs your program starts). Environment
    variables set in this way will override all the other methods we have just set.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These might sound complicated, but we will explain them with a short Python
    script and show how variables can be set in the last three ways (the first method
    depends on what shell you use). The script will also show how environment variables
    are read.
  prefs: []
  type: TYPE_NORMAL
- en: Environment variables are available in Python using the `os.environ` variable.
    This is a dictionary-like object that can be used to access environment variables
    by name. It is safest to access values using the `get` method just in case they
    are not set. It also provides a `setdefault` method, which allows setting a value
    only if it is not set (that is, it doesn't overwrite an existing key).
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the example Python script that reads environment variables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We then set up our shell by setting some variables. In Linux or macOS, we use
    `export` (note there is no output from these commands):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In Windows, we would use the `set` command in the command line as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In Linux and macOS, we can also provide environment variables by setting them
    before the command (the actual command is just `python3 env_example.py`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the above command will not work on Windows. For Windows, the environment
    variables must be set before execution and cannot be passed in at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output from this command is:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: When the script runs `os.environ.setdefault('UNSET_VAR', 'UNSET_VAR_VALUE')`,
    the value is set inside the script, since no value for `UNSET_VAR` was set by
    the shell. The value that is output is the one set by the script itself.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When `os.environ.setdefault('SET_VAR', 'SET_VAR_VALUE')` is executed, the value
    is not set since one was provided by the shell. This was set with the `export
    SET_VAR="Set Using Export"` command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The value for `HOME` was not set by any of the commands that were run – this
    is one provided by the shell. It is the user's home directory. This is just an
    example of an environment variable that a shell normally provides.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VAR1` was set by `export` and was not overridden when executing the script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VAR2` was set by `export` but was subsequently overridden when executing the script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VAR3` was only set when executing the script.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`VAR4` was never set – we use the `get` method to access it to avoid a `KeyError`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now that environment variables have been covered, we can return to discussing
    the changes that need to be made to `manage.py` to support `django-configurations`.
  prefs: []
  type: TYPE_NORMAL
- en: django-configurations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One of the main considerations when deploying a Django application to production
    is how to configure it. As you have seen throughout this book, the `settings.py`
    file is where all your Django configuration is defined. Even third-party apps
    have their configuration in this file. You have already seen this in *Chapter
    12*, *Building a REST API*, when working with the Django REST framework.
  prefs: []
  type: TYPE_NORMAL
- en: There are many ways to provide different configurations and switch between them
    in Django. If you have begun working on an existing application that already has
    a specific method of switching between configurations in development and production
    environments, then you should probably keep using that method.
  prefs: []
  type: TYPE_NORMAL
- en: When we release Bookr onto a product web server, in *Chapter 17*, *Deployment
    of a Django Application (Part 1 – Server Setup)*, we will need to switch to a
    production configuration, and that's when we will use `django-configurations`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install `django-configurations`, use `pip3` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output will be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '`django-configurations` changes your `settings.py` file so that all the settings are
    read from a class you define, which will be a subclass of `configurations.Configuration`.
    Instead of the settings being global variables inside `settings.py`, they will
    be attributes on the class you define. By using this class-based method, we can
    take advantage of object-oriented paradigms, most notably inheritance. Settings,
    defined in a class, can inherit settings in another class. For example, the production
    settings class can inherit the development settings class and just override some
    specific settings – such as forcing `DEBUG` to `False` in production.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can illustrate what needs to be done to the settings file by just showing
    the first few settings in the file. A standard Django `settings.py` file normally
    starts like this (comment lines have been removed):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: To convert the settings to `django-configurations`, first import `Configuration`
    from `configurations`. Then define a `Configuration` subclass. Finally, indent
    all the settings to be under the class. In PyCharm, this is as simple as selecting
    all the settings and pressing *Tab* to indent them all.
  prefs: []
  type: TYPE_NORMAL
- en: 'After doing this, your `settings.py` file will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: To have different configurations (different sets of settings), you can just
    extend your configuration classes and override the settings that should differ.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, one variable that needs overriding in production is `DEBUG`: it
    should be `False` (for security and performance reasons). A `Prod` class can be
    defined that extends `Dev` and sets `DEBUG`, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Of course, you can override other production settings too, not just `DEBUG`.
    Usually, for security, you would also redefine `SECRET_KEY` and `ALLOWED_HOSTS`;
    and to configure Django to use your production database, you'd set the `DATABASES`
    value too. Any Django setting can be configured as you choose.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you try to execute runserver (or other management commands) now, you will
    get an error because Django doesn''t know how to find the `settings.py` file when
    the settings files are laid out like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We need to make some changes to the `manage.py` file before it starts to work
    again. But before we make them, we'll briefly discuss environment variables, in
    case you haven't used them before.
  prefs: []
  type: TYPE_NORMAL
- en: manage.py changes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are two lines that need to be added/changed in `manage.py` to enable `django-configurations`.
    First, we need to define a default environment variable that tells Django Configuration
    which `Configuration` class it should load.
  prefs: []
  type: TYPE_NORMAL
- en: 'This line should be added in the `main()` function to set the default value
    for the `DJANGO_CONFIGURATION` environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: This sets the default to `Dev` – the name of the class we defined. As we saw
    in our example script, if this value is already defined, it won't be overwritten.
    This will allow us to switch between configurations using an environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'The second change is to swap the `execute_from_command_line` function with
    one that `django-configurations` provides. Consider the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This line is changed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'From now on, `manage.py` will work as it did before, except it now prints out
    which `Configuration` class it''s using when it starts (*Figure 15.1*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.1: django-configurations is using the configuration Dev'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.1: django-configurations is using the configuration Dev'
  prefs: []
  type: TYPE_NORMAL
- en: In the second line, you can see `django-configurations` output that is using
    the `Dev` class for settings.
  prefs: []
  type: TYPE_NORMAL
- en: Configuration from Environment Variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As well as switching between `Configuration` classes using environment variables,
    `django-configurations` allows us to give values for individual settings using
    environment variables. It provides `Value` classes that will automatically read
    values from the environment. We can define defaults if no values are provided.
    Since environment variables are always strings, the different `Value` classes
    are used to convert from a string to the specified type.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at this in practice with a few examples. We will allow `DEBUG`,
    `ALLOWED_HOSTS`, `TIME_ZONE`, and `SECRET_KEY` to be set with environment variables
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We''ll explain the settings one at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: In `Dev`, `DEBUG` is read from an environment variable and cast to a Boolean
    value. The values `yes`, `y`, `true`, and `1` become `True`; the values `no`,
    `n`, `false`, and `0` become `False`. This allows us to run with `DEBUG` off even
    on a development machine, which can be useful in some cases (for example, testing
    a custom exception page rather than Django's default one). In the `Prod` configuration,
    we don't want `DEBUG` to accidentally become `True`, so we set it statically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALLOWED_HOSTS` is required in production. It is a list of hosts for which
    Django should accept requests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `ListValue` class will convert a comma-separated string into a Python list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For example, the string `www.example.com,example.com` is converted to `["www.example.com",
    "example.com"]`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TIME_ZONE` accepts just a string value, so it is set using the `Value` class.
    This class just reads the environment variable and does not transform it at all.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECRET_KEY` is statically defined in the `Dev` configuration; it can''t be
    changed with an environment variable. In the `Prod` configuration, it is set with
    `SecretValue`. This is like `Value` in that it is just a string setting; however,
    it does not allow a default. If a default is set, then an exception is raised.
    This is to ensure you don''t ever put a secret value into `settings.py`, since
    it might be accidentally shared (for example, uploaded to GitHub). Note that since
    we do not use `SECRET_KEY` for `Dev` in production, we don''t care if it''s leaked.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, `django-configurations` expects the `DJANGO_` prefix for each environment
    variable. For example, to set `DEBUG`, use the `DJANGO_DEBUG` environment variable;
    to set `ALLOWED_HOSTS`, use `DJANGO_ALLOWED_HOSTS`, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've introduced `django-configurations` and the changes that need
    to be made to the project to support it, let's add it to Bookr and make those
    changes. In the next exercise, you will install and set up `django-configurations`
    in Bookr.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15.01: Django Configurations Setup'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will install `django-configurations` using `pip`, then
    update `settings.py` to add a `Dev` and `Prod` configuration. You''ll then make
    the necessary changes to `manage.py` to support the new configuration style, and
    test that everything is still working:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `django-configurations` using `pip3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The install process will run, and you should have output like *Figure 15.2*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.2: django-configurations installation with pip'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_02.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.2: django-configurations installation with pip'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In PyCharm, open `settings.py` inside the `bookr` package. Underneath the existing
    `os` import, import `Configuration` and `values` from `configurations`, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After the imports but before your first setting definition (the line that sets
    the `BASE_DIR` value), add a new `Configuration` subclass, called `Dev`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now we need to move all the existing settings, so they are attributes of the
    `Dev` class rather than global variables. In PyCharm, this is as simple as selecting
    all the settings, and then pressing the *Tab* key to indent them. After doing
    this, your settings should look as follows:![Figure 15.3: New Dev configuration'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_03.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.3: New Dev configuration'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After indenting the settings, we will change some of the settings to be read
    from environment variables. First, change `DEBUG` to be read as `BooleanValue`.
    It should default to `True`. Consider this line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And then change it to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will automatically read `DEBUG` from the `DJANGO_DEBUG` environment variable
    and convert it to a Boolean. If the environment variable is not set, then it will
    default to `True`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also convert `ALLOWED_HOSTS` to be read from an environment variable, using
    the `values.ListValue` class. It should default to `[]` (empty list). Consider
    the following line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And change it to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`ALLOWED_HOSTS` will be read from the `DJANGO_ALLOWED_HOSTS` environment variable,
    and default to an empty list.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Everything you have done so far has been adding/changing attributes on the
    `Dev` class. Now, at the end of the same file, add a `Prod` class that inherits
    from `Dev`. It should define two attributes, `DEBUG = True` and `SECRET_KEY =
    values.SecretValue()`. The completed class should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `settings.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we try to run any management command now, we will receive an error that `django-configurations`
    is not set up properly. We need to make some changes to `manage.py` to make it
    work again. Open `manage.py` in the `bookr` project directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Consider the line that reads as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Under it, add this line:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will set the default configuration to the `Dev` class. It can be overridden
    by setting the `DJANGO_CONFIGURATION` environment variable (for example, to `Prod`).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Two lines below the line from the previous step, you must already have the
    following `import` statement:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change this to:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Start the Django dev server. If it begins without error, you can be confident
    that the changes you made have worked. To be sure, check that the pages load in
    your browser. Open `http://127.0.0.1:8000/` and try browsing around the site.
    Everything should look and feel as it did before:![Figure 15.4: The Bookr site
    should look and feel as it did before'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_04.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.4: The Bookr site should look and feel as it did before'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we installed `django-configurations` and refactored our `settings.py`
    file to use its `Configuration` class to define our settings. We added `Dev` and
    `Prod` configurations and made `DEBUG`, `ALLOWED_HOSTS`, and `SECRET_KEY` settable
    with environment variables. Finally, we updated `manage.py` to use Django Configuration's
    `execute_from_command_line` function, which enabled the use of this new settings.py
    format.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will cover `dj-database-url`, a package that makes it
    possible to configure your Django database settings using URLs.
  prefs: []
  type: TYPE_NORMAL
- en: dj-database-url
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`dj-database-url` is another app that helps with the configuration of your
    Django application. Specifically, it allows you to set the database (your Django
    app connects to) using a URL instead of a dictionary of configuration values.
    As you can see in your existing `settings.py` file, the `DATABASES` setting contains
    a couple of items and gets more verbose when using a different database that has
    more configuration options (for username, password, and so on). We can instead
    set these from a URL, which can contain all these values.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The URL''s format will differ slightly depending on whether you are using a
    local SQLite database or a remote database server. To use SQLite on disk (as Bookr
    is currently), the URL is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Note there are three slashes present. This is because SQLite doesn''t have
    a hostname, so this is like a URL being like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: That is, the URL has a blank hostname. All three slashes are therefore together.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a URL for a remote database server, the format is usually like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'For example, to connect to a PostgreSQL database called `bookr_django` on the
    host, `db.example.com`, on port `5432`, with username `bookr` and password `b00ks`,
    the URL would be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that we''ve seen the format for URLs, let''s look at how we can actually
    use them in our `settings.py` file. First, `dj-database-url` must be installed
    using `pip3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now `dj_database_url` can be imported into `settings.py`, and the `dj_database_url.parse`
    method can be used to transform the URL into a dictionary that Django can use.
    We can use its return value to set the `default` (or other) item in the `DATABASES`
    dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Or, for our SQLite database, we can utilize the `BASE_DIR` setting as we are
    already, and include it in the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'After parsing, the `DATABASES` dictionary is similar to what we had defined
    before. It includes some redundant items that do not apply to an SQLite database
    (`USER`, `PASSWORD`, `HOST`, and so on), but Django will ignore them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This method of setting the database connection information is not that useful
    since we are still statically defining the data in `settings.py`. The only difference
    is we are using a URL instead of a dictionary. `dj-database-url` can also automatically
    read the URL from an environment variable. This will allow us to override these
    values by setting them in the environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'To read the data from the environment, use the dj_database_url.config function,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The URL is automatically read from the `DATABASE_URL` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can improve on this by also providing a `default` argument to the `config`
    function. This is the URL that will be used by default if one is not specified
    in an environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In this way, we can specify a default URL that can be overridden by an environment
    variable in production.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also specify the environment variable that the URL is read from by passing
    in the `env` argument – this is the first positional argument. In this way, you
    could read multiple URLs for different database settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `default` item's URL is read from the `DATABASE_URL` environment
    variable, and `secondary` is read from `DATABASE_URL_SECONDARY`.
  prefs: []
  type: TYPE_NORMAL
- en: '`django-configurations` also provides a config class that works in tandem with `dj_database_url:
    DatabaseURLValue`. This differs slightly from `dj_database_url.config` in that
    it generates the entire `DATABASES` dictionary including the `default` item. For
    example, consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'This code is the equivalent to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Do not write `DATABASES['default'] = values.DatabaseURLValue()` as your dictionary
    will be doubly nested.
  prefs: []
  type: TYPE_NORMAL
- en: If you need to specify multiple databases, you will need to fall back to `dj_database_url.config`
    directly rather than using `DatabaseURLValue`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Like other `values` classes, `DatabaseURLValue` takes a default value as its
    first argument. You might also want to use the `environment_prefix` argument and
    set it to `DJANGO` so that its environment variable being read is consistent in
    naming to the others. A full example of using `DatabaseURLValue` would therefore
    be like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: By setting the `environment_prefix` like this, we can set the database URL using the
    `DJANGO_DATABASE_URL` environment variable (rather than just `DATABASE_URL`).
    This means it is consistent with other environment variable settings that also
    start with `DJANGO`_, such as `DJANGO_DEBUG` or `DJANGO_ALLOWED_HOSTS`.
  prefs: []
  type: TYPE_NORMAL
- en: Note that even though we are not importing `dj-database-url` in `settings.py`,
    `django-configurations` uses it internally, so it still must be installed.
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will configure Bookr to use DatabaseURLValue to set
    its database configuration. It will be able to read from an environment variable
    and fall back to a default we specify.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15.02: dj-database-url and Setup'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will install `dj-database-url` using `pip3`. Then we will
    update Bookr''s `settings.py` to configure the `DATABASE` setting using a URL,
    which is read from an environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `dj-database-url` using `pip3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The install process will run, and you should have output similar to this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.5: dj-database-url installation with pip'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.5: dj-database-url installation with pip'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In PyCharm, open `settings.py` in the `bookr` package directory. Scroll down
    to find where the `DATABASES` attribute is being defined. Replace it with the
    `values.DatabaseURLValue` class. The first argument (default value) should be
    the URL to the SQLite database: `''sqlite:///{}/db.sqlite3''.format(BASE_DIR)`.
    Also pass in `environ_prefix`, set to `DJANGO`. After completing this step, you
    should be setting the attribute like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `settings.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server. As with *Exercise 15.01*, *Django Configurations
    Setup*, if it starts fine, you can be confident that your change was successful.
    To be sure, open `http://127.0.0.1:8000/` in a browser and check that everything
    looks and behaves as it did before. You should visit a page that queries from
    the database (such as the `Books List` page) and check that a list of books is displayed:![Figure
    15.6: Bookr pages with database queries still work'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_06.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.6: Bookr pages with database queries still work'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we updated our `settings.py` to determine its `DATABASES`
    setting from a URL specified in an environment variable. We used the `values.DatabaseURLValue`
    class to automatically read the value, and provided a default URL. We also set
    the `environ_prefix` argument to `DJANGO` so that the environment variable name
    is `DJANGO_DATABASE_URL`, which is consistent with other settings.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a tour of the Django Debug Toolbar, an app
    that helps you debug your Django applications through the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The Django Debug Toolbar
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Django Debug Toolbar is an app that displays debug information about a
    web page right in your browser. It includes information about what SQL commands
    were run to generate the page, the request and response headers, how long the
    page took to render, and more. These can be useful if:'
  prefs: []
  type: TYPE_NORMAL
- en: '*A page is taking a long time to load – maybe it is running too many database
    queries.* You can see if the same queries are being run multiple times, in which
    case you could consider caching. Otherwise, some queries may be sped up by adding
    an index to the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*You want to determine why a page is returning the wrong information.* Your
    browser may have sent headers you did not expect, or maybe some headers from Django
    are incorrect.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Your page is slow because it is spending time in non-database code* – you
    can profile the page to see what functions are taking the longest.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The page looks incorrect.* You can see what templates Django rendered. There
    might be a third-party template that is being rendered unexpectedly. You can also
    check all the settings that are being used (including the built-in Django ones
    that we are not setting). This can help to pinpoint a setting that is incorrect
    and causing the page to not behave correctly.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll explain how to use the Django Debug Toolbar to see this information.
    Before diving into how to set up the Django Debug Toolbar and how to use it, let''s
    take a quick look at it. The toolbar is shown on the right of the browser window
    and can be toggled open and closed to display information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.7: The Django Debug Toolbar closed'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.7: The Django Debug Toolbar closed'
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding figure shows the Django Debug Toolbar in its closed state. Notice
    the toggle bar in the top-right corner of the window. Clicking the toolbar opens
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8: The Django Debug Toolbar open'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.8: The Django Debug Toolbar open'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15.8* shows the Django Debug Toolbar open.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the Django Debug Toolbar is done using `pip`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then there are a few steps to set it up, mostly by making changes to `settings.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: Add `debug_toolbar` to the `INSTALLED_APPS` settings list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `debug_toolbar.middleware.DebugToolbarMiddleware` to the `MIDDLEWARE` settings
    list. It should be done as early as possible; for Bookr, it can be the first item
    in this list. This is the middleware that all requests and responses pass through.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `'127.0.0.1'` to the `INTERNAL_IPS` settings list (this setting may have
    to be created). The Django Debug Toolbar will only show for IP addresses listed here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Django Debug Toolbar URLs to the base `urls.py` file. We want to add
    this mapping only if we are in `DEBUG` mode:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the next exercise, we will go through these steps in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Once the Django Debug Toolbar is installed and set up, any page you visit will
    show the DjDT sidebar (you can open or close it using the DjDT menu). When it's
    open, you'll be able to see another set of sections that you can click on to get
    more information.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each panel has a checkbox next to it, this allows you to enable or disable
    the collection of that metric. Each metric that is collected will slightly slow
    down the page load (although, usually, this is not noticeable). If you find that
    one metric collection is slow, you can turn it off here:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll go through each panel. The first is `Versions`, which shows the version
    of Django running. You can click it to open a large `Versions` display, which
    will also show the version of Python and the Django Debug Toolbar (*Figure 15.9*):![Figure
    15.9: DjDT Versions panel (screenshot cropped for brevity)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.9: DjDT Versions panel (screenshot cropped for brevity)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The second panel is `Time`, which shows how long it took to process the request.
    It is broken down into system time and user time as well (*Figure 15.10*):![Figure
    15.10: DjDT Time panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.10: DjDT Time panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The differences between these are beyond the scope of this book but, basically,
    system time is time spent in the kernel (for example, doing network or file reading/writing)
    and user time is code that is outside the operating system kernel (this includes
    the code you've written in Django, Python, and so on).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also shown is time spent in the browser, such as the time taken to get the request
    and how long it took to render the page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The third panel, `Settings`, shows all the settings your application is using
    (*Figure 15.11*):![Figure 15.11: DjDT Settings panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.11: DjDT Settings panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is useful because it shows both your settings from `settings.py` and the
    default Django settings.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The fourth panel is `Headers` (*Figure 15.12*). It shows the headers of the
    request the browser made, and the response headers that Django has sent:![Figure
    15.12: DjDT Headers panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.12: DjDT Headers panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The fifth panel, `Request`, shows the view that generated the response, and
    the args and kwargs it was called with (*Figure 15.13*). You can also see the
    name of the URL used in its URL map:![Figure 15.13: DjDT Request panel (some panels
    not shown for brevity)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.13: DjDT Request panel (some panels not shown for brevity)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It also shows the request's cookies, information stored in the session (sessions
    were introduced in *Chapter 8*, *Media Serving and File Upload*) as well as the
    `request.GET` and `request.POST` data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The sixth panel, `SQL`, shows all the SQL database queries that were executing
    when building the response (Figure 15.14):![Figure 15.14: DjDT SQL panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_14.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.14: DjDT SQL panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can see how long each query took to execute and in what order they were
    executed. It also flags similar and duplicate queries so you can potentially refactor
    your code to remove them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each `SELECT` query displays two action buttons, `Sel`, short for select, and
    `Expl`, short for explain. These do not show up for `INSERT`, `UDPATE`, or `DELETE` queries.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `Sel` button shows the `SELECT` statement that was executed and all the
    data that was retrieved for the query (*Figure 15.15*):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.15: DjDT SQL Select panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_15.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.15: DjDT SQL Select panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `Expl` button shows the `EXPLAIN` query for the `SELECT` query (*Figure 15.16*):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.16: DjDT SQL Explain panel (some panels not shown for brevity)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.16: DjDT SQL Explain panel (some panels not shown for brevity)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`EXPLAIN` queries are beyond the scope of the book, but they basically show
    how the database tried to execute the `SELECT` query, for example, what database
    indexes were used. You might find that a query does not use an index and you can
    therefore get faster performance by adding one.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The seventh panel is `Static files`, and it shows you which static files were
    loaded in this request (*Figure 15.17*). It also shows you all the static files
    that are available and how they would be loaded (that is, which static file finder
    found them). The `Static files` panel''s information is like the information you
    can get from the `findstatic` management command:![Figure 15.17: DjDT Static panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.17: DjDT Static panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The eighth panel, `Templates`, shows information about the templates that were
    rendered (*Figure 15.18*):![Figure 15.18: DjDT Templates panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_18.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.18: DjDT Templates panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It shows the paths the templates were loaded from and the inheritance chain.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The ninth panel, `Cache`, shows information about data fetched from Django''s cache:![Figure
    15.19: DjDT Cache panel (some panels not shown for brevity)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.19: DjDT Cache panel (some panels not shown for brevity)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since we aren't using caching in Bookr, this section is blank. If we were, we
    would be able to see how many requests to the cache had been made, and how many
    of those requests were successful in retrieving items. We would also see how many
    items had been added to the cache. This can give you an idea about whether you
    are using the cache effectively or not. If you are adding a lot of items to the
    cache but not retrieving any, then you should reconsider what data you are caching.
    On the contrary, if you have a lot of `Cache misses` (a miss is when you request
    data that is not in the cache), then you should be caching more data than you
    are already.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The tenth panel is `Signals`, which shows information about Django signals
    (*Figure 15.20*):![Figure 15.20: DjDT Signals panel (some panels not shown for
    brevity)'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.20: DjDT Signals panel (some panels not shown for brevity)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While we don't cover signals in this book, they are like events that you can
    hook into to execute functions when Django does something; for example, if a user
    is created, send them a welcome email. This section shows which signals were sent
    and which functions received them.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The eleventh panel, `Logging`, shows log messages that were generated by your
    Django app (*Figure 15.21*):![Figure 15.21: DjDT Logging panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.21: DjDT Logging panel'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since no log messages were generated in this request, this panel is empty.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next option, `Intercept redirects`, is not a section with data. Instead,
    it lets you toggle redirect interception. If your view returns a redirect, it
    will not be followed. Instead, a page like *Figure 15.22* is displayed:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.22: A redirect that DjDT has intercepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_22.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.22: A redirect that DjDT has intercepted'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This allows you to open the Django Debug Toolbar for the view that generated
    the redirect – otherwise, you'd only be able to see the information for the view
    that you were redirected to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final panel is `Profiling`. This is off by default as profiling can slow
    down your response quite a lot. Once it is turned on, you must refresh the page
    to generate the profiling information (shown in *Figure 15.23*):![Figure 15.23:
    DjDT Profiling panel'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_23.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.23: DjDT Profiling panel'
  prefs: []
  type: TYPE_NORMAL
- en: 'The information shown here is a breakdown of how long each function call in
    your response took. The left of the page shows a stack trace of all the calls
    performed. On the right are columns with timing data. The columns are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**CumTime**: The cumulative amount of time spent in the function and any sub-functions
    it calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Count`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TotTime**: The amount of time spent in this function but not in any sub-function
    it calls'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Count`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calls**: The number of calls of this function'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This information can help you determine where to speed up your app. For example,
    it can be easier to speed up a function that is called 1,000 times by a small
    fraction, than to optimize a large function that is only called once. Any more
    in-depth tips on how to speed up your code are beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15.03: Setting Up the Django Debug Toolbar'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will add the Django Debug Toolbar settings by modifying
    the `INSTALLED_APPS`, `MIDDLEWARE`, and `INTERNAL_IPS` settings. Then you''ll
    add the `debug_toolbar.urls` map to the `bookr` package''s `urls.py`. Then you
    will load a page with the Django Debug Toolbar in a browser and use it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install the Django Debug Toolbar using `pip3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will allow Django to find the Django Debug Toolbar's static files.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add `debug_toolbar.middleware.DebugToolbarMiddleware` to the `MIDDLEWARE` setting
    – it should be the first item in the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will route requests and responses through `DebugToolbarMiddleware`, allowing
    the Django Debug Toolbar to inspect the request and insert its HTML into the response.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final setting to add is to add the address `127.0.0.1` to `INTERNAL_IPS`.
    You will not yet have an `INTERNAL_IPS` setting defined, so add this as a setting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will make the Django Debug Toolbar only show up on the developer's computer.
    You can now save `settings.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We now need to add the Django Debug Toolbar URLs. Open `urls.py` in the `bookr`
    package directory. We already have an `if` condition that checks for `DEBUG` mode
    then adds the media URL like so:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will also add an `include` of `debug_toolbar.urls` inside this `if` statement,
    however, we will add it to the start of `urlpatterns` rather than appending it
    to the end. Add this code inside the `if` statement:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `urls.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running and navigate to `http://127.0.0.1:8000`.
    You should see the Django Debug Toolbar open. If it is not open, click the `DjDT`
    toggle button at the top-right to open it:![Figure 15.25: DjDT toggle shown in
    the corner'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_25.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.25: DjDT toggle shown in the corner'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try going through some of the panels and visiting different pages to see what
    information you can find out. Try also turning on `Intercept redirects` and then
    create a new book review. After submitting the form, you should see the intercepted
    page rather than being redirected to the new review (*Figure 15.26*):![Figure
    15.26: The redirect intercept page after submitting a new review'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_26.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.26: The redirect intercept page after submitting a new review'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can then click the `Location` link to go to the page that it was being redirected
    to.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also try turning on `Profiling` and see which functions are being called
    a lot and which are taking up most of the rendering time.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are finished experimenting with the Django Debug Toolbar, turn off
    `Intercept redirects` and `Profiling`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, we installed and set up the Django Debug Toolbar by adding
    settings and URL maps. We then saw it in action and examined the useful information
    it can give us, including how to work with redirects and see profiling information.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the `django-crispy-forms` app, which will
    let us reduce the amount of code needed to write forms.
  prefs: []
  type: TYPE_NORMAL
- en: django-crispy-forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Bookr, we are using the Bootstrap CSS framework. It provides styles that
    can be applied to forms using CSS classes. Since Django is independent of Bootstrap,
    when we use Django forms, it does not even know that we are using Bootstrap and
    so has no idea of what classes to apply to form widgets.
  prefs: []
  type: TYPE_NORMAL
- en: '`django-crispy-forms` acts as an intermediary between Django Forms and Bootstrap
    forms. It can take a Django form and render it with the correct Bootstrap elements
    and classes. It not only supports Bootstrap but also other frameworks such as
    `crispy-forms-foundation`).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Its installation and setup are quite simple. Once again, it is installed with
    `pip3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then there are just a couple of settings changes. First, add `crispy_forms`
    to your `INSTALLED_APPS`. Then, you need to tell `django-crispy-forms` what framework
    you are using, so it loads the correct templates. This is done with the `CRISPY_TEMPLATE_PACK`
    setting. In our case, it should be set to `bootstrap4`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '`django-crispy-forms` has two main modes of operation, either as a filter or
    a template tag. The former is easier to drop into an existing template. The latter
    allows more configuration options and moves more of the HTML generation into the
    `Form` class. We''ll look at both of these in order.'
  prefs: []
  type: TYPE_NORMAL
- en: The crispy Filter
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first method of rendering a form with `django-crispy-forms` is by using
    the `crispy` template. First, the filter must be loaded in the template. The library
    name is `crispy_forms_tags`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, instead of rendering a form with the `as_p` method (or another method),
    use the `crispy` filter. Consider the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'And replace it with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Here''s a quick *before and after* showing the `Review Create` form. None of
    the rest of the HTML has been changed apart from the form rendering. *Figure 15.27*
    shows the standard Django form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.27: The Review Create form with default styling'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_27.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.27: The Review Create form with default styling'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15.28* shows the form after `django-crispy-forms` has added the Bootstrap
    classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.28: Review Create form with Bootstrap classes added by django-crispy-forms'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_28.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.28: Review Create form with Bootstrap classes added by django-crispy-forms'
  prefs: []
  type: TYPE_NORMAL
- en: When we integrate `django-crispy-forms` into Bookr, we will not use this method,
    however, it is worth knowing about because of how easy it is to drop it into your
    existing templates.
  prefs: []
  type: TYPE_NORMAL
- en: The crispy Template Tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The other method of rendering a form with `django-crispy-forms` is with the
    use of the `crispy` template tag. To use it, the `crispy_forms_tags` library must
    first be loaded into the template (as we did in the previous section). Then, the
    form is rendered like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'How does this differ from the `crispy` filter? The `crispy` template tag will
    also render the `<form>` element and `{% csrf_token %}` template tag for you.
    So, consider for example that you used it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The output for this would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: That is, the form and CSRF token fields are duplicated. In order to customize
    the `<form>` element that is generated, `django-crispy-forms` provides a `FormHelper`
    class that can be set as a `Form` instance's `helper` attribute. It is the `FormHelper`
    instance that the `crispy` template tag uses to determine what attributes the
    `<form>` should have.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at an `ExampleForm` with a helper added. First, import the required modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, define a form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'We could instantiate a `FormHelper` instance and then set it to the `form.helper`
    attribute (for example, in a view), but it''s usually more useful to just create
    and assign it inside the form''s `__init__` method. We haven''t created a form
    with an `__init__` method yet, but it''s no different from any other Python class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, we set the helper and the form_method for the helper (which is then rendered
    in the form HTML):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Other attributes can be set on the helper, such as `form_action`, `form_id`,
    and `form_class`. We don't need to use these in Bookr though. We also do not need
    to manually set the `enctype` on the form or its helper, as the `crispy` form
    tag will automatically set this to `multipart/form-data` if the form contains
    file upload fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we tried to render the form now, we wouldn''t be able to submit it as there''s
    no submit button (remember we added submit buttons to our forms manually, they
    are not part of the Django form). `django-crispy-forms` also includes layout helpers
    that can be added to the form. They will be rendered after the other fields. We
    can add a submit button like this – first, import the `Submit` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '`django-crispy-forms` does not properly support using a `<button>` input to
    submit a form, but for our purposes, an `<input type="submit">` is functionally
    identical.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We then instantiate it and add it to the helper''s inputs in a single line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The first argument to the `Submit` constructor is its *name*, and the second
    is its *label*.
  prefs: []
  type: TYPE_NORMAL
- en: '`django-crispy-forms` is aware that we are using Bootstrap and will automatically
    render the button with the `btn btn-primary` classes.'
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of using a crispy template tag and `FormHelper` is that it means
    there is only one place where attributes and the behavior of the form are defined.
    We are already defining all the form fields in a `Form` class; this allows us
    to define the other attributes of the form in the same place. We could change
    a form from a `GET` submission to a `POST` submission easily here. The `FormHelper`
    instance will then automatically know that it needs to add a CSRF token to its
    HTML output when rendered.
  prefs: []
  type: TYPE_NORMAL
- en: We'll put all this into practice in the next exercise, where you will install
    `django-crispy-forms` and then update `SearchForm` to utilize a form helper, then
    render it using the `crispy` template tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15.04: Using Django Crispy Forms with the SearchForm'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will install `django-crispy-forms`, then convert the
    `SearchForm` to be usable with the `crispy` template tag. This will be done by
    adding an `__init__` method and building a `FormHelper` instance inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `django-crispy-forms` using `pip3`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will allow Django to find the required templates.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'While in `settings.py`, add a new setting for `CRISPY_TEMPLATE_PACK` – its
    value should be `bootstrap4`. This should be added as an attribute on the `Dev` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This lets `django-crispy-forms` know that it should be using the templates designed
    for Bootstrap version 4 when rendering forms. You can now save and close `settings.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `reviews` app''s `forms.py` file. First, we need to add two imports
    to the top of the file: `FormHelper` from `crispy_forms.helper`, and `Submit`
    from `crispy_forms.layout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add an `__init__` method to `SearchForm`. It should accept `*args` and
    `**kwargs` as arguments, then call the super `__init__` method with them:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will simply pass through whatever arguments are provided to the superclass constructor.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Still inside the `__init__` method, set `self.helper` to an instance of `FormHelper`.
    Then set the helper''s `form_method` to `get`. Finally, create an instance of
    `Submit`, passing in an empty string as the name (first argument), and `Search`
    as the button label (second argument). Add this to the helper with the `add_input`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can save and close `forms.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `reviews` app''s `templates` directory, open `search-results.html`.
    At the start of the file, after the `extends` template tag, use a `load` template
    tag to load `crispy_forms_tags`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Locate the existing `<form>` in the template. It should look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can delete the entered `<form>` element and replace it with a `crispy`
    template tag:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will use the `django-crispy-forms` library to render the form, including
    the `<form>` element and submit button. After making this change, this portion
    of the template should look like *Figure 15.30*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.30: search-results.html after replacing <form> with crispy form
    renderer'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_30.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.30: search-results.html after replacing <form> with crispy form renderer'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now save `search-results.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running and go to `http://127.0.0.1:8000/book-search/`.
    You should see the book search form like in *Figure 15.31*:![Figure 15.31: Book
    search form rendered with django-crispy-forms'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_31.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.31: Book search form rendered with django-crispy-forms'
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to use the form in the same manner as you did before (*Figure 15.32*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.32: Performing a search with the updated search form'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_32.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.32: Performing a search with the updated search form'
  prefs: []
  type: TYPE_NORMAL
- en: Try viewing the source of the page in your web browser to see the rendered output.
    You will see that the `<form>` element has been rendered with the `method="get"`
    attribute, as we specified to the `FormHelper` in *step 5*. Notice also that `django-crispy-forms`
    has not inserted a CSRF token field – it knows that one is not required for a
    form submitted using `GET`.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we installed `django-crispy-forms` using `pip3` (`pip` for
    Windows) and then configured it in `settings.py` by adding it to `INSTALLED_APPS`
    and defining the `CRISPY_TEMPLATE_PACK` we wanted to use (in our case, `bootstrap4`).
    We then updated the `SearchForm` class to use a `FormHelper` instance to control
    the attributes on the form and added a submit button using the `Submit` class.
    Finally, we changed the `search-results.html` template to use the `crispy` template
    tag to render the form, which allowed us to remove the `<form>` element we were
    using before and simplify form generation by moving all the form-related code
    into Python code (instead of being partially in HTML and partially in Python).
  prefs: []
  type: TYPE_NORMAL
- en: django-allauth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When browsing websites, you have probably seen buttons that allow you to log
    in using another website''s credentials. For example, using your GitHub login:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.33: Sign In form with options to log in with Google or GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_33.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.33: Sign In form with options to log in with Google or GitHub'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we explain the process, let us introduce the terminology we will be
    using:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Requesting site**: The site the user is trying to log in to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication provider**: The third-party provider that the user is authenticating
    to (for example, Google, GitHub, and so on).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication application**: This is something the creators of the requesting
    site set up at the authentication provider. It determines what permissions the
    requesting site will have with the authentication provider. For example, the requesting
    application can get access to your GitHub username, but won''t have permission
    to write to your repositories. The user can stop the requesting site from accessing
    your information at the authentication provider by disabling access to the authentication
    application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The process is generally the same regardless of which third-party sign-in option
    you choose. First, you will be redirected to the authentication provider site
    and be asked to allow the authentication application to access your account (*Figure
    15.34*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.34: Authentication provider authorization screen'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_34.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.34: Authentication provider authorization screen'
  prefs: []
  type: TYPE_NORMAL
- en: 'After you authorize the authentication application, the authentication provider
    will redirect back to the requesting site. The URL that you are redirected to
    will contain a secret token that the requesting site can use to request your user
    information in the backend. This allows the requesting site to verify who you
    are by communicating directly with the authentication provider. After validating
    your identity using a token, the requesting site can redirect you to your content.
    This flow is illustrated in a sequence diagram in *Figure 15.35*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.35: Third-party authentication flow'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_35.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.35: Third-party authentication flow'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have introduced authenticating using a third-party service, we can
    discuss `django-allauth`. `django-allauth` is an app that easily plugs your Django
    application into a third-party authentication service, including Google, GitHub,
    Facebook, Twitter, and others. In fact, at the time of writing, `django-allauth`
    supports over 75 authentication providers.
  prefs: []
  type: TYPE_NORMAL
- en: The first time a user authenticates to your site, `django-allauth` will create
    a standard Django `User` instance for you. It also knows how to parse the callback/redirect
    URL that the authentication provider loads after the end user authorizes the authentication
    application.
  prefs: []
  type: TYPE_NORMAL
- en: '`django-allauth` adds three models to your application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SocialApplication`: This stores the information used to identify your authentication
    application. The information you enter will depend on the provider, who will give
    you a *client* ID, *secret* key, and (optionally) a *key*. Note that these are
    the names that `django-allauth` uses for these values and they will differ based
    on the provider. We will give some examples of these values later in this section.
    `SocialApplication` is the only one of the `django-allauth` models that you will
    create yourself, the others `django-allauth` creates automatically when a user
    authenticates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SocialApplicationToken`: This contains the values needed to identify a Django
    user to the authentication provider. It contains a *token* and (optionally) a
    *token secret*. It also contains a reference to the `SocialApplication` that created
    it and the `SocialAccount` to which it applies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SocialAccount`: This links a Django user to the provider (for example, Google
    or GitHub) and stores extra information that the provider may have given.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since there are so many authentication providers, we will not cover how to
    set them all up, but we will give a short instruction on setup and how to map
    the auth tokens from the providers to the right fields in a `SocialApplication`.
    We will do this for the two auth providers we have been mentioning throughout
    the chapter: Google and GitHub.'
  prefs: []
  type: TYPE_NORMAL
- en: django-allauth Installation and Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like the other apps in this chapter, `django-allauth` is installed with `pip3`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need a few settings changes. `django-allauth` requires the `django.contrib.sites`
    app to run, so it needs to be added to `INSTALLED_APPS`. Then a new setting needs
    to be added to define a `SITE_ID` for our site. We can just set this to `1` in
    our `settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to have a single Django project hosted on multiple hostnames
    and have it behave differently on each – but also have content shared across all
    the sites. We don't need to use the `SITE_ID` anywhere else in our project but
    one must be set here. You can read more about the `SITE_ID` settings at [https://docs.djangoproject.com/en/3.0/ref/contrib/sites/](https://docs.djangoproject.com/en/3.0/ref/contrib/sites/).
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to add `allauth` and `allauth.socialaccount` to `INSTALLED_APPS`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, each provider we want to support must also be added in the list of `INSTALLED_APPS`;
    for example, consider the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: 'After all this is done, we need to run the `migrate` management command, to
    create the `django-allauth` models:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is done, new social applications can be added through the Django
    Admin interface (*Figure 15.36*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.36: Adding a social application'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_36.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.36: Adding a social application'
  prefs: []
  type: TYPE_NORMAL
- en: To add a social application, select a `Provider` (this list will only show those
    in the `INSTALLED_APPS` list), enter a name (it can just be the same as the `Provider`),
    and enter the `Client ID` from the provider's website (we will go into detail
    on this soon). You may also need a `Secret key` and `Key`. Select the site it
    should apply to. (If you only have one `Site` instance, then its name does not
    matter, just select it. The site name can be updated in the `Sites` section of
    Django admin. You can also add more sites there.)
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at the tokens used by our three example providers.
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Auth Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new GitHub application can be set up under your GitHub profile. During development,
    your callback URL for the application should be set to `http://127.0.0.1:8000/accounts/github/login/callback/`
    and updated with the real hostname when you deploy to production. After creating
    the app, it will provide a `Client ID` and `Client Secret`. These are your `Client
    id` and `Secret key`, respectively, in `django-allauth`.
  prefs: []
  type: TYPE_NORMAL
- en: Google Auth Setup
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The creation of a Google application is done through your Google Developers
    console. The authorized redirect URI should be set to `http://127.0.0.1:8000/accounts/google/login/callback/`
    during development and updated after production deployment. The app's `Client
    ID` is also Client id in `django-allauth`, and the app's `Client secret` is the
    `Secret key`.
  prefs: []
  type: TYPE_NORMAL
- en: Initiating Authentication with django-allauth
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To initiate authentication through a third-party provider, you first need to
    add the `django-allauth` URLs in your URL maps. Somewhere inside your `urlpatterns`
    is one of your `urls.py` files, include `allauth.urls`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: You will then be able to initiate a login using URLs like `http://127.0.0.1:8000/allauth/github/login/?process=login`
    or `http://127.0.0.1:8000/allauth/google/login/?process=login`, and so on. django-allauth
    will handle all the redirects for you, then create/authenticate the Django user
    when they return to the site. You can have buttons on your login page with text
    such as Login with GitHub or Login with Google that link to these URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Other django-allauth Features
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other than authentication with third-party providers, `django-allauth` can also
    add some useful features that Django does not have built in. For example, you
    can configure it to require an email address for a user, and have the user verify
    their email address by clicking a confirmation link they receive before they log
    in, `django-allauth` can also handle generating a URL for a password reset that
    is emailed to the user. You can find the documentation for `django-allauth` that
    explains these features, and more, at [https://django-allauth.readthedocs.io/en/stable/overview.html](https://django-allauth.readthedocs.io/en/stable/overview.html).
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered the first four third-party apps in depth and given
    a brief overview of `django-allauth`, you can undertake the activity for this
    chapter. In this activity, you will refactor the `ModelForm` instances we are
    using to use the `CrispyFormHelper` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 15.01: Using FormHelper to Update Forms'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, we will update the `ModelForm` instances (`PublisherForm`,
    `ReviewForm`, and `BookMediaForm`) to use the `CrispyFormHelper` class. Using
    `FormHelper`, we can define the text of the `Submit` button inside the `Form`
    class itself. We can then move the `<form>` rendering logic out of the `instance-form.html`
    template and replace it with a `crispy` template tag.
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: Create an `InstanceForm` class that subclasses `forms.ModelForm`. This will
    be the base of the existing `ModelForm` classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `__init__` method of `InstanceForm`, set a `FormHelper` instance on `self`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `Submit` button to `FormHelper`. If the form is instantiated with an `instance`,
    then the button text should be `Save`, otherwise, it should be `Create`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update PublisherForm, ReviewForm, and BookMediaForm to extend from `InstanceForm`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `instance-form.html` template so that `form` is rendered using the
    `crispy` template tag. The rest of the `<form>` can be removed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `book_media` view, the `is_file_upload` context item is no longer required.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are finished, you should see the forms rendered with Bootstrap themes.
    *Figure 15.37* shows the `New Publisher` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.37: New Publisher page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_37.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.37: New Publisher page'
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15.38* shows the `New Review` page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.38: New Review form'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_38.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.38: New Review form'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the book media page is displayed in *Figure 15.39*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.39: Book media page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_39.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.39: Book media page'
  prefs: []
  type: TYPE_NORMAL
- en: You should notice the form still behaves fine and allows file uploads. `django-crispy-forms`
    has automatically added the `enctype="multipart/form-data"` attribute to `<form>`.
    You can verify this by viewing the page source.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced five third-party Django apps that can enhance
    your website. We installed and set up `django-configurations`, which allowed us
    to easily switch between different settings and change them using environment
    variables. `dj-database-url` also helped with settings, allowing us to make database
    settings changes using URLs. We saw how the Django Debug Toolbar could help us
    see what our app was doing and help us debug problems we were having with it.
    `django-crispy-forms` can not only render our forms using the Bootstrap CSS but
    also lets us save code by defining their behavior as part of the form class itself.
    We briefly looked at `django-allauth` and saw how it can be integrated into third-party
    authentication providers. In the activity for this chapter, we updated our `ModelForm`
    instances to use the `django-crispy-forms` `FormHelper` and remove some logic
    from the template by using the `crispy` template tag.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to integrate the React JavaScript framework
    into a Django application.
  prefs: []
  type: TYPE_NORMAL
