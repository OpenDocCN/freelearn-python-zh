- en: 15\. Django Third-Party Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15. Django第三方库
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter introduces you to Django third-party libraries. You will configure
    your database connection using URLs with `dj-database-urls` and inspect and debug
    your application with the `django-crispy-forms`, you will enhance the look of
    your forms, as well as reduce the amount of code you have to write by using the
    `crispy` template tag. We will also cover the `django-allauth` library, which
    lets you authenticate users against third-party providers. In the final activity,
    we will enhance Bookr's forms with the use of `django-crispy-forms`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍Django第三方库。您将使用`dj-database-urls`通过URL配置您的数据库连接，并使用`django-crispy-forms`检查和调试您的应用程序，您将增强表单的外观，并通过使用`crispy`模板标签减少您需要编写的代码量。我们还将介绍`django-allauth`库，它允许您使用第三方提供者对用户进行身份验证。在最后的活动中，我们将使用`django-crispy-forms`增强Bookr的表单。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Because Django has been around since 2007, there is a rich ecosystem of third-party
    libraries that can be plugged into an application to give it extra features. So
    far, we have learned a lot about Django and used many of its features, including
    database models, URL routing, templating, forms, and more. We used these Django
    tools directly to build a web app, but now we will look at how to leverage the
    work of others to quickly add even more advanced features to our own apps. We
    have alluded to apps for storing files, (in *Chapter 5*, *Serving Static Files*,
    we mentioned an app, `django-storages`, that can store our static files in a CDN),
    but in addition to file storage, we can also use them to plug into third-party
    authentication systems, integrate with payment gateways, customize how our settings
    are built, modify images, build forms more easily, debug our site, use different
    types of databases, and much more. Chances are, if you want to add a certain feature,
    an app exists for it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Django自2007年以来一直存在，因此有一个丰富的第三方库生态系统，可以将其连接到应用程序以提供额外功能。到目前为止，我们已经学到了很多关于Django的知识，并使用了其许多功能，包括数据库模型、URL路由、模板、表单等等。我们直接使用这些Django工具来构建Web应用程序，但现在我们将探讨如何利用他人的工作来快速为我们自己的应用程序添加更多高级功能。我们提到了用于存储文件的程序（在*第5章*，*服务静态文件*中，我们提到了一个程序，`django-storages`，可以将我们的静态文件存储在CDN上），但除了文件存储之外，我们还可以使用它们连接到第三方身份验证系统、集成支付网关、自定义设置构建方式、修改图像、更轻松地构建表单、调试我们的网站、使用不同类型的数据库等等。可能性很大，如果您想添加某个功能，可能已经存在一个应用程序可以做到这一点。
- en: We don't have space to cover every app in this chapter, so we'll just focus
    on four that provide useful features across many different types of apps. `django-configurations`
    allows you to configure your Django settings using classes and take advantage
    of inheritance to simplify settings for different environments. This works in
    tandem with `dj-database-urls` to specify your database connection setting using
    just a URL. The *Django Debug Toolbar* lets you get extra information to help
    with debugging, right in your browser. The last app we'll look at is `django-crispy-forms`,
    which provides extra CSS classes to make forms look nicer, as well as making them
    easier to configure using just Python code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Django自2007年以来一直存在，因此有一个丰富的第三方库生态系统，可以将其连接到应用程序以提供额外功能。到目前为止，我们已经学到了很多关于Django的知识，并使用了其许多功能，包括数据库模型、URL路由、模板、表单等等。我们直接使用这些Django工具来构建Web应用程序，但现在我们将探讨如何利用他人的工作来快速为我们自己的应用程序添加更多高级功能。我们提到了用于存储文件的程序（在*第5章*，*服务静态文件*中，我们提到了一个程序，`django-storages`，可以将我们的静态文件存储在CDN上），但除了文件存储之外，我们还可以使用它们连接到第三方身份验证系统、集成支付网关、自定义设置构建方式、修改图像、更轻松地构建表单、调试我们的网站、使用不同类型的数据库等等。可能性很大，如果您想添加某个功能，可能已经存在一个应用程序可以做到这一点。
- en: For each of these libraries, we will cover installation and basic setup and
    use, mostly as they apply to Bookr. They also have more configuration options
    to further customize to fit your application. Each of these apps can be installed
    with `pip`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些库中的每一个，我们将涵盖安装和基本设置以及使用方法，主要针对Bookr应用。它们还有更多的配置选项，以便进一步自定义以适应您的应用程序。这些应用程序都可以使用`pip`安装。
- en: We will also briefly introduce `django-allauth`, which allows a Django application
    to authenticate users against third-party providers (such as Google, GitHub, Facebook,
    and Twitter). We won't cover its installation and setup in detail but will provide
    some examples to help you configure it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将简要介绍`django-allauth`，它允许Django应用程序对第三方提供者（如Google、GitHub、Facebook和Twitter）进行用户身份验证。我们不会详细涵盖其安装和设置，但会提供一些示例来帮助您进行配置。
- en: Environment Variables
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境变量
- en: When we create a program, we often want the user to be able to configure some
    of its behavior. For example, say you have a program that connects to a database
    and saves all the records it finds into a file. Normally it would probably print
    out just a *success* message to the terminal, but you might also want to run it
    in *debug mode*, which makes it also print out all the SQL statements it is executing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个程序时，我们通常希望用户能够配置其行为的一些方面。例如，假设你有一个连接到数据库并将找到的所有记录保存到文件的程序。通常它可能只会向终端打印出
    *成功* 消息，但你可能还希望以 *调试模式* 运行它，这样它也会打印出它正在执行的 SQL 语句。
- en: 'There are many ways of configuring a program like this. For example, you could
    have it read from a configuration file. But in some cases, the user may quickly
    want to run the Django server with a particular setting on (say, debug mode),
    and then run the server again with the same setting off. Having to change the
    configuration file each time can be inconvenient. In this case, we can read from
    an *environment variable*. Environment variables are key/value pairs that can
    be set in your operating system and then read by a program. There are several
    ways they can be set:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 配置这样的程序有许多方法。例如，你可以让它从配置文件中读取。但在某些情况下，用户可能希望快速运行 Django 服务器并使用特定的设置（比如，调试模式），然后再关闭该设置重新运行服务器。每次都更改配置文件可能不太方便。在这种情况下，我们可以从
    *环境变量* 中读取。环境变量是在操作系统中设置的键/值对，然后程序可以读取它们。它们可以通过几种方式设置：
- en: Your shell (terminal) can read variables from a profile script when it starts,
    then each program will have access to these variables.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的 shell（终端）在启动时可以读取配置脚本中的变量，然后每个程序都将能够访问这些变量。
- en: You can set a variable inside a terminal and it will be made available to any
    programs that start subsequently. In Linux and macOS, this is done with the `export`
    command; Windows uses the `set` command. Any variables you set in this way override
    those in the profile script, but only for the current session. When you close
    the terminal, the variables are lost.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在终端内设置一个变量，然后它将对随后启动的任何程序可用。在 Linux 和 macOS 上，这通过 `export` 命令完成；Windows 使用
    `set` 命令。以这种方式设置的任何变量都将覆盖配置脚本中的变量，但仅限于当前会话。当你关闭终端时，变量就会丢失。
- en: You can set environment variables at the same time as running a command in a
    terminal. These will only persist for the program being run, and they override
    exported environment variables and those read from a profile script.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在终端运行命令的同时设置环境变量。这些变量将只对正在运行的程序持续存在，并且它们会覆盖已导出的环境变量和从配置脚本中读取的变量。
- en: You can set environment variables inside a running program, and they will be
    available only inside the program (or to programs your program starts). Environment
    variables set in this way will override all the other methods we have just set.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在运行中的程序内设置环境变量，并且它们只会在程序内部（或程序启动的程序）中可用。以这种方式设置的环境变量将覆盖我们刚刚设置的所有其他方法。
- en: These might sound complicated, but we will explain them with a short Python
    script and show how variables can be set in the last three ways (the first method
    depends on what shell you use). The script will also show how environment variables
    are read.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能听起来很复杂，但我们将通过一个简短的 Python 脚本来解释它们，并展示如何以最后三种方式（第一种方法取决于你使用的 shell）设置变量。脚本还将展示如何读取环境变量。
- en: Environment variables are available in Python using the `os.environ` variable.
    This is a dictionary-like object that can be used to access environment variables
    by name. It is safest to access values using the `get` method just in case they
    are not set. It also provides a `setdefault` method, which allows setting a value
    only if it is not set (that is, it doesn't overwrite an existing key).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，可以使用 `os.environ` 变量访问环境变量。这是一个类似于字典的对象，可以用来通过名称访问环境变量。最安全的方法是使用
    `get` 方法来访问值，以防它们未设置。它还提供了一个 `setdefault` 方法，允许只在未设置值的情况下设置值（即，它不会覆盖现有的键）。
- en: 'Here is the example Python script that reads environment variables:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个读取环境变量的示例 Python 脚本：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We then set up our shell by setting some variables. In Linux or macOS, we use
    `export` (note there is no output from these commands):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过设置一些变量来设置我们的 shell。在 Linux 或 macOS 上，我们使用 `export`（注意这些命令没有输出）：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In Windows, we would use the `set` command in the command line as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中，我们会在命令行中使用 `set` 命令如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In Linux and macOS, we can also provide environment variables by setting them
    before the command (the actual command is just `python3 env_example.py`):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 和 macOS 上，我们也可以通过在命令之前设置环境变量来提供环境变量（实际命令仅为 `python3 env_example.py`）：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the above command will not work on Windows. For Windows, the environment
    variables must be set before execution and cannot be passed in at the same time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，上述命令在 Windows 上将无法工作。对于 Windows，环境变量必须在执行之前设置，并且不能同时传递。
- en: 'The output from this command is:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the script runs `os.environ.setdefault('UNSET_VAR', 'UNSET_VAR_VALUE')`,
    the value is set inside the script, since no value for `UNSET_VAR` was set by
    the shell. The value that is output is the one set by the script itself.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当脚本运行 `os.environ.setdefault('UNSET_VAR', 'UNSET_VAR_VALUE')` 时，由于 shell 没有为
    `UNSET_VAR` 设置值，因此值是在脚本内部设置的。输出的值是脚本本身设置的值。
- en: When `os.environ.setdefault('SET_VAR', 'SET_VAR_VALUE')` is executed, the value
    is not set since one was provided by the shell. This was set with the `export
    SET_VAR="Set Using Export"` command.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当执行 `os.environ.setdefault('SET_VAR', 'SET_VAR_VALUE')` 时，由于 shell 已经提供了一个值，因此该值没有被设置。这是通过
    `export SET_VAR="Set Using Export"` 命令设置的。
- en: The value for `HOME` was not set by any of the commands that were run – this
    is one provided by the shell. It is the user's home directory. This is just an
    example of an environment variable that a shell normally provides.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOME` 的值没有被运行的任何命令设置——这是由 shell 提供的。它是用户的主目录。这只是一个示例，说明 shell 通常提供的环境变量。'
- en: '`VAR1` was set by `export` and was not overridden when executing the script.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VAR1` 是通过 `export` 设置的，在执行脚本时没有被覆盖。'
- en: '`VAR2` was set by `export` but was subsequently overridden when executing the script.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VAR2` 是通过 `export` 设置的，但在执行脚本时被覆盖了。'
- en: '`VAR3` was only set when executing the script.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VAR3` 仅在执行脚本时设置。'
- en: '`VAR4` was never set – we use the `get` method to access it to avoid a `KeyError`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VAR4` 从未设置——我们使用 `get` 方法来访问它以避免 `KeyError`。'
- en: Now that environment variables have been covered, we can return to discussing
    the changes that need to be made to `manage.py` to support `django-configurations`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经介绍了环境变量，我们可以回到讨论需要修改 `manage.py` 以支持 `django-configurations` 的更改。
- en: django-configurations
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: django-configurations
- en: One of the main considerations when deploying a Django application to production
    is how to configure it. As you have seen throughout this book, the `settings.py`
    file is where all your Django configuration is defined. Even third-party apps
    have their configuration in this file. You have already seen this in *Chapter
    12*, *Building a REST API*, when working with the Django REST framework.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Django 应用程序部署到生产环境时的主要考虑之一是如何配置它。正如您在本章中看到的，`settings.py` 文件是定义所有 Django 配置的地方。甚至第三方应用程序的配置也在这个文件中。您已经在
    *第 12 章*，*构建 REST API* 中看到过这一点，当时您正在使用 Django REST 框架。
- en: There are many ways to provide different configurations and switch between them
    in Django. If you have begun working on an existing application that already has
    a specific method of switching between configurations in development and production
    environments, then you should probably keep using that method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Django 中提供不同的配置并在它们之间切换有许多方法。如果您已经开始在一个已经存在并且已经具有在开发和生产环境中切换配置的特定方法的现有应用程序上工作，那么您可能应该继续使用该方法。
- en: When we release Bookr onto a product web server, in *Chapter 17*, *Deployment
    of a Django Application (Part 1 – Server Setup)*, we will need to switch to a
    production configuration, and that's when we will use `django-configurations`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 Bookr 部署到产品 web 服务器时，在 *第 17 章*，*Django 应用程序的部署（第 1 部分 – 服务器设置）* 中，我们需要切换到生产配置，那时我们将使用
    `django-configurations`。
- en: 'To install `django-configurations`, use `pip3` as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `django-configurations`，请使用以下 `pip3`：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，您可以在前面的命令中使用 `pip` 而不是 `pip3`。
- en: 'The output will be as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`django-configurations` changes your `settings.py` file so that all the settings are
    read from a class you define, which will be a subclass of `configurations.Configuration`.
    Instead of the settings being global variables inside `settings.py`, they will
    be attributes on the class you define. By using this class-based method, we can
    take advantage of object-oriented paradigms, most notably inheritance. Settings,
    defined in a class, can inherit settings in another class. For example, the production
    settings class can inherit the development settings class and just override some
    specific settings – such as forcing `DEBUG` to `False` in production.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-configurations`更改`settings.py`文件，使得所有设置都从您定义的类中读取，该类将是`configurations.Configuration`的子类。设置不再是`settings.py`内部的全局变量，而是您定义的类上的属性。通过使用基于类的这种方法，我们可以利用面向对象范式，特别是继承。在类中定义的设置可以继承另一个类中的设置。例如，生产设置类可以继承开发设置类，并仅覆盖一些特定的设置——例如在生产中强制`DEBUG`为`False`。'
- en: 'We can illustrate what needs to be done to the settings file by just showing
    the first few settings in the file. A standard Django `settings.py` file normally
    starts like this (comment lines have been removed):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过仅显示文件中的前几个设置来展示需要对设置文件进行的更改。标准的Django `settings.py`文件通常是这样开始的（已删除注释行）：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To convert the settings to `django-configurations`, first import `Configuration`
    from `configurations`. Then define a `Configuration` subclass. Finally, indent
    all the settings to be under the class. In PyCharm, this is as simple as selecting
    all the settings and pressing *Tab* to indent them all.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要将设置转换为`django-configurations`，首先从`configurations`导入`Configuration`。然后定义一个`Configuration`子类。最后，将所有要设置的设置缩进到类下。在PyCharm中，这就像选择所有设置并按*Tab*键将它们全部缩进一样简单。
- en: 'After doing this, your `settings.py` file will look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，您的`settings.py`文件将看起来像这样：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To have different configurations (different sets of settings), you can just
    extend your configuration classes and override the settings that should differ.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要有不同的配置（不同的设置集），您只需扩展您的配置类并覆盖应该不同的设置。
- en: 'For example, one variable that needs overriding in production is `DEBUG`: it
    should be `False` (for security and performance reasons). A `Prod` class can be
    defined that extends `Dev` and sets `DEBUG`, like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在生产环境中需要覆盖的一个变量是`DEBUG`：它应该是`False`（出于安全和性能原因）。可以定义一个扩展`Dev`并设置`DEBUG`的`Prod`类，如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Of course, you can override other production settings too, not just `DEBUG`.
    Usually, for security, you would also redefine `SECRET_KEY` and `ALLOWED_HOSTS`;
    and to configure Django to use your production database, you'd set the `DATABASES`
    value too. Any Django setting can be configured as you choose.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以覆盖其他生产设置，而不仅仅是`DEBUG`。通常，出于安全考虑，您还可能需要重新定义`SECRET_KEY`和`ALLOWED_HOSTS`；并且为了配置Django使用您的生产数据库，您还需要设置`DATABASES`值。任何Django设置都可以按您选择的方式进行配置。
- en: 'If you try to execute runserver (or other management commands) now, you will
    get an error because Django doesn''t know how to find the `settings.py` file when
    the settings files are laid out like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在尝试执行runserver（或其他管理命令），您将得到一个错误，因为Django不知道如何找到这样的`settings.py`文件：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We need to make some changes to the `manage.py` file before it starts to work
    again. But before we make them, we'll briefly discuss environment variables, in
    case you haven't used them before.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`manage.py`文件开始工作之前，我们需要对其进行一些更改。但在我们进行更改之前，我们将简要讨论环境变量，以防您之前没有使用过它们。
- en: manage.py changes
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: manage.py更改
- en: There are two lines that need to be added/changed in `manage.py` to enable `django-configurations`.
    First, we need to define a default environment variable that tells Django Configuration
    which `Configuration` class it should load.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`manage.py`中需要添加/更改两行以启用`django-configurations`。首先，我们需要定义一个默认环境变量，告诉Django
    Configuration它应该加载哪个`Configuration`类。
- en: 'This line should be added in the `main()` function to set the default value
    for the `DJANGO_CONFIGURATION` environment variable:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这行应该在`main()`函数中添加，以设置`DJANGO_CONFIGURATION`环境变量的默认值：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This sets the default to `Dev` – the name of the class we defined. As we saw
    in our example script, if this value is already defined, it won't be overwritten.
    This will allow us to switch between configurations using an environment variable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将默认设置为`Dev`——我们定义的类的名称。正如我们在示例脚本中看到的那样，如果这个值已经定义，它不会被覆盖。这将允许我们通过环境变量在配置之间切换。
- en: 'The second change is to swap the `execute_from_command_line` function with
    one that `django-configurations` provides. Consider the following line:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个更改是将 `execute_from_command_line` 函数与 `django-configurations` 提供的函数交换。考虑以下行：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This line is changed as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码的更改如下：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'From now on, `manage.py` will work as it did before, except it now prints out
    which `Configuration` class it''s using when it starts (*Figure 15.1*):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，`manage.py` 将像以前一样工作，只是在启动时它会打印出它正在使用的 `Configuration` 类 (*图15.1*)：
- en: '![Figure 15.1: django-configurations is using the configuration Dev'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.1：django-configurations 正在使用配置 Dev'
- en: '](img/B15509_15_01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_15_01.jpg)'
- en: 'Figure 15.1: django-configurations is using the configuration Dev'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：django-configurations 正在使用配置 Dev
- en: In the second line, you can see `django-configurations` output that is using
    the `Dev` class for settings.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行中，你可以看到 `django-configurations` 输出正在使用 `Dev` 类进行设置。
- en: Configuration from Environment Variables
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从环境变量配置
- en: As well as switching between `Configuration` classes using environment variables,
    `django-configurations` allows us to give values for individual settings using
    environment variables. It provides `Value` classes that will automatically read
    values from the environment. We can define defaults if no values are provided.
    Since environment variables are always strings, the different `Value` classes
    are used to convert from a string to the specified type.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用环境变量在 `Configuration` 类之间切换之外，`django-configurations` 还允许我们使用环境变量为单个设置提供值。它提供了
    `Value` 类，这些类将自动从环境读取值。如果没有提供值，我们可以定义默认值。由于环境变量始终是字符串，因此不同的 `Value` 类用于将字符串转换为指定的类型。
- en: 'Let''s look at this in practice with a few examples. We will allow `DEBUG`,
    `ALLOWED_HOSTS`, `TIME_ZONE`, and `SECRET_KEY` to be set with environment variables
    as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过几个示例来实际看看这个。我们将允许 `DEBUG`、`ALLOWED_HOSTS`、`TIME_ZONE` 和 `SECRET_KEY` 使用以下环境变量进行设置：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We''ll explain the settings one at a time:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐个解释设置：
- en: In `Dev`, `DEBUG` is read from an environment variable and cast to a Boolean
    value. The values `yes`, `y`, `true`, and `1` become `True`; the values `no`,
    `n`, `false`, and `0` become `False`. This allows us to run with `DEBUG` off even
    on a development machine, which can be useful in some cases (for example, testing
    a custom exception page rather than Django's default one). In the `Prod` configuration,
    we don't want `DEBUG` to accidentally become `True`, so we set it statically.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Dev` 中，`DEBUG` 从环境变量中读取并转换为布尔值。值 `yes`、`y`、`true` 和 `1` 转换为 `True`；值 `no`、`n`、`false`
    和 `0` 转换为 `False`。这允许我们在开发机器上关闭 `DEBUG`，这在某些情况下可能很有用（例如，测试自定义异常页面而不是Django的默认页面）。在
    `Prod` 配置中，我们不希望 `DEBUG` 不小心变为 `True`，因此我们将其静态设置。
- en: '`ALLOWED_HOSTS` is required in production. It is a list of hosts for which
    Django should accept requests.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALLOWED_HOSTS` 在生产中是必需的。它是Django应该接受请求的主机列表。'
- en: The `ListValue` class will convert a comma-separated string into a Python list.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListValue` 类将逗号分隔的字符串转换为Python列表。'
- en: For example, the string `www.example.com,example.com` is converted to `["www.example.com",
    "example.com"]`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，字符串 `www.example.com,example.com` 转换为 `["www.example.com", "example.com"]`
- en: '`TIME_ZONE` accepts just a string value, so it is set using the `Value` class.
    This class just reads the environment variable and does not transform it at all.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME_ZONE` 只接受字符串值，因此它使用 `Value` 类设置。这个类只是读取环境变量，并不对其进行任何转换。'
- en: '`SECRET_KEY` is statically defined in the `Dev` configuration; it can''t be
    changed with an environment variable. In the `Prod` configuration, it is set with
    `SecretValue`. This is like `Value` in that it is just a string setting; however,
    it does not allow a default. If a default is set, then an exception is raised.
    This is to ensure you don''t ever put a secret value into `settings.py`, since
    it might be accidentally shared (for example, uploaded to GitHub). Note that since
    we do not use `SECRET_KEY` for `Dev` in production, we don''t care if it''s leaked.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECRET_KEY` 在 `Dev` 配置中静态定义；它不能通过环境变量更改。在 `Prod` 配置中，它使用 `SecretValue` 设置。这类似于
    `Value`，因为它只是一个字符串设置；然而，它不允许设置默认值。如果设置了默认值，则会引发异常。这是为了确保你永远不会将秘密值放入 `settings.py`，因为它可能会意外共享（例如，上传到GitHub）。请注意，由于我们不在生产中使用
    `Dev` 的 `SECRET_KEY`，所以我们不关心它是否泄露。'
- en: By default, `django-configurations` expects the `DJANGO_` prefix for each environment
    variable. For example, to set `DEBUG`, use the `DJANGO_DEBUG` environment variable;
    to set `ALLOWED_HOSTS`, use `DJANGO_ALLOWED_HOSTS`, and so on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've introduced `django-configurations` and the changes that need
    to be made to the project to support it, let's add it to Bookr and make those
    changes. In the next exercise, you will install and set up `django-configurations`
    in Bookr.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15.01: Django Configurations Setup'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will install `django-configurations` using `pip`, then
    update `settings.py` to add a `Dev` and `Prod` configuration. You''ll then make
    the necessary changes to `manage.py` to support the new configuration style, and
    test that everything is still working:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `django-configurations` using `pip3`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The install process will run, and you should have output like *Figure 15.2*:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.2: django-configurations installation with pip'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_02.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.2: django-configurations installation with pip'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In PyCharm, open `settings.py` inside the `bookr` package. Underneath the existing
    `os` import, import `Configuration` and `values` from `configurations`, like this:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After the imports but before your first setting definition (the line that sets
    the `BASE_DIR` value), add a new `Configuration` subclass, called `Dev`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we need to move all the existing settings, so they are attributes of the
    `Dev` class rather than global variables. In PyCharm, this is as simple as selecting
    all the settings, and then pressing the *Tab* key to indent them. After doing
    this, your settings should look as follows:![Figure 15.3: New Dev configuration'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_03.jpg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.3: New Dev configuration'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After indenting the settings, we will change some of the settings to be read
    from environment variables. First, change `DEBUG` to be read as `BooleanValue`.
    It should default to `True`. Consider this line:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And then change it to this:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will automatically read `DEBUG` from the `DJANGO_DEBUG` environment variable
    and convert it to a Boolean. If the environment variable is not set, then it will
    default to `True`.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Also convert `ALLOWED_HOSTS` to be read from an environment variable, using
    the `values.ListValue` class. It should default to `[]` (empty list). Consider
    the following line:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And change it to this:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`ALLOWED_HOSTS` will be read from the `DJANGO_ALLOWED_HOSTS` environment variable,
    and default to an empty list.'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Everything you have done so far has been adding/changing attributes on the
    `Dev` class. Now, at the end of the same file, add a `Prod` class that inherits
    from `Dev`. It should define two attributes, `DEBUG = True` and `SECRET_KEY =
    values.SecretValue()`. The completed class should look like this:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save `settings.py`.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: If we try to run any management command now, we will receive an error that `django-configurations`
    is not set up properly. We need to make some changes to `manage.py` to make it
    work again. Open `manage.py` in the `bookr` project directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在尝试运行任何管理命令，我们将收到一个错误，表明`django-configurations`设置不正确。我们需要对`manage.py`做一些更改才能使其再次工作。在`bookr`项目目录中打开`manage.py`。
- en: 'Consider the line that reads as follows:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下行：
- en: '[PRE23]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Under it, add this line:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在它下面，添加以下行：
- en: '[PRE24]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will set the default configuration to the `Dev` class. It can be overridden
    by setting the `DJANGO_CONFIGURATION` environment variable (for example, to `Prod`).
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将默认配置设置为`Dev`类。它可以由设置`DJANGO_CONFIGURATION`环境变量来覆盖（例如，设置为`Prod`）。
- en: 'Two lines below the line from the previous step, you must already have the
    following `import` statement:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步的下一行，你已经有以下`import`语句：
- en: '[PRE25]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Change this to:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其更改为：
- en: '[PRE26]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Start the Django dev server. If it begins without error, you can be confident
    that the changes you made have worked. To be sure, check that the pages load in
    your browser. Open `http://127.0.0.1:8000/` and try browsing around the site.
    Everything should look and feel as it did before:![Figure 15.4: The Bookr site
    should look and feel as it did before'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Django开发服务器。如果它没有错误地开始，你可以确信你做的更改已经生效。为了确保这一点，检查页面是否在浏览器中加载。打开`http://127.0.0.1:8000/`并尝试浏览网站。一切应该看起来和感觉都像之前一样：![图15.4：Bookr网站应该看起来和感觉都像之前
- en: '](img/B15509_15_04.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_15_04.jpg)'
- en: 'Figure 15.4: The Bookr site should look and feel as it did before'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：Bookr网站应该看起来和感觉都像之前
- en: In this exercise, we installed `django-configurations` and refactored our `settings.py`
    file to use its `Configuration` class to define our settings. We added `Dev` and
    `Prod` configurations and made `DEBUG`, `ALLOWED_HOSTS`, and `SECRET_KEY` settable
    with environment variables. Finally, we updated `manage.py` to use Django Configuration's
    `execute_from_command_line` function, which enabled the use of this new settings.py
    format.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们安装了`django-configurations`并重构了我们的`settings.py`文件，使用其`Configuration`类来定义我们的设置。我们添加了`Dev`和`Prod`配置，并使`DEBUG`、`ALLOWED_HOSTS`和`SECRET_KEY`可以通过环境变量设置。最后，我们更新了`manage.py`以使用Django
    Configuration的`execute_from_command_line`函数，这使得使用新的`settings.py`格式成为可能。
- en: In the next section, we will cover `dj-database-url`, a package that makes it
    possible to configure your Django database settings using URLs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍`dj-database-url`，这是一个使您能够使用URL配置Django数据库设置的包。
- en: dj-database-url
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dj-database-url
- en: '`dj-database-url` is another app that helps with the configuration of your
    Django application. Specifically, it allows you to set the database (your Django
    app connects to) using a URL instead of a dictionary of configuration values.
    As you can see in your existing `settings.py` file, the `DATABASES` setting contains
    a couple of items and gets more verbose when using a different database that has
    more configuration options (for username, password, and so on). We can instead
    set these from a URL, which can contain all these values.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`dj-database-url`是另一个帮助配置Django应用程序的app。具体来说，它允许您使用URL而不是配置值的字典来设置数据库（您的Django应用程序连接到）。正如您在现有的`settings.py`文件中可以看到的，`DATABASES`设置包含几个条目，当使用具有更多配置选项的不同数据库（例如用户名、密码等）时，它会变得更加详细。我们可以从URL设置这些值，该URL可以包含所有这些值。'
- en: 'The URL''s format will differ slightly depending on whether you are using a
    local SQLite database or a remote database server. To use SQLite on disk (as Bookr
    is currently), the URL is like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您是使用本地SQLite数据库还是远程数据库服务器，URL的格式会有所不同。要使用磁盘上的SQLite（如Bookr目前所做的那样），URL是这样的：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Note there are three slashes present. This is because SQLite doesn''t have
    a hostname, so this is like a URL being like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里有三个斜杠。这是因为SQLite没有主机名，所以这就像一个URL是这样的：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That is, the URL has a blank hostname. All three slashes are therefore together.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 即，URL有一个空的主机名。因此，所有三个斜杠都在一起。
- en: 'To build a URL for a remote database server, the format is usually like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要为远程数据库服务器构建一个URL，其格式通常是这样的：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For example, to connect to a PostgreSQL database called `bookr_django` on the
    host, `db.example.com`, on port `5432`, with username `bookr` and password `b00ks`,
    the URL would be like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要连接到主机`db.example.com`上的名为`bookr_django`的PostgreSQL数据库，端口为`5432`，用户名为`bookr`，密码为`b00ks`，URL将是这样的：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that we''ve seen the format for URLs, let''s look at how we can actually
    use them in our `settings.py` file. First, `dj-database-url` must be installed
    using `pip3`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了 URL 的格式，让我们看看如何在 `settings.py` 文件中实际使用它们。首先，必须使用 `pip3` 安装 `dj-database-url`：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，你可以在前面的命令中使用 `pip` 而不是 `pip3`。
- en: 'The output is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now `dj_database_url` can be imported into `settings.py`, and the `dj_database_url.parse`
    method can be used to transform the URL into a dictionary that Django can use.
    We can use its return value to set the `default` (or other) item in the `DATABASES`
    dictionary:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以将 `dj_database_url` 导入到 `settings.py` 中，并使用 `dj_database_url.parse` 方法将
    URL 转换为 Django 可以使用的字典。我们可以使用它的返回值来设置 `DATABASES` 字典中的 `default`（或其它）项：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Or, for our SQLite database, we can utilize the `BASE_DIR` setting as we are
    already, and include it in the URL:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于我们的 SQLite 数据库，我们可以利用已经存在的 `BASE_DIR` 设置，并将其包含在 URL 中：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After parsing, the `DATABASES` dictionary is similar to what we had defined
    before. It includes some redundant items that do not apply to an SQLite database
    (`USER`, `PASSWORD`, `HOST`, and so on), but Django will ignore them:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 解析后，`DATABASES` 字典与我们之前定义的类似。它包括一些不适用于 SQLite 数据库的冗余项（如 `USER`、`PASSWORD`、`HOST`
    等），但 Django 会忽略它们：
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This method of setting the database connection information is not that useful
    since we are still statically defining the data in `settings.py`. The only difference
    is we are using a URL instead of a dictionary. `dj-database-url` can also automatically
    read the URL from an environment variable. This will allow us to override these
    values by setting them in the environment.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置数据库连接信息的方法并不那么有用，因为我们仍然在 `settings.py` 中静态定义数据。唯一的区别是我们使用 URL 而不是字典。`dj-database-url`
    还可以自动从环境变量中读取 URL。这将允许我们通过在环境中设置它们来覆盖这些值。
- en: 'To read the data from the environment, use the dj_database_url.config function,
    like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要从环境中读取数据，使用 dj_database_url.config 函数，如下所示：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The URL is automatically read from the `DATABASE_URL` environment variable.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: URL 会自动从 `DATABASE_URL` 环境变量中读取。
- en: 'We can improve on this by also providing a `default` argument to the `config`
    function. This is the URL that will be used by default if one is not specified
    in an environment variable:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向 `config` 函数提供 `default` 参数来改进这一点。这是在没有在环境变量中指定的情况下默认使用的 URL：
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In this way, we can specify a default URL that can be overridden by an environment
    variable in production.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，我们可以在生产环境中指定一个可以被环境变量覆盖的默认 URL。
- en: 'We can also specify the environment variable that the URL is read from by passing
    in the `env` argument – this is the first positional argument. In this way, you
    could read multiple URLs for different database settings:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过传递 `env` 参数来指定读取 URL 的环境变量——这是第一个位置参数。这样，你可以为不同的数据库设置读取多个 URL：
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this example, the `default` item's URL is read from the `DATABASE_URL` environment
    variable, and `secondary` is read from `DATABASE_URL_SECONDARY`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`default` 项的 URL 是从 `DATABASE_URL` 环境变量中读取的，而 `secondary` 是从 `DATABASE_URL_SECONDARY`
    中读取的。
- en: '`django-configurations` also provides a config class that works in tandem with `dj_database_url:
    DatabaseURLValue`. This differs slightly from `dj_database_url.config` in that
    it generates the entire `DATABASES` dictionary including the `default` item. For
    example, consider the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-configurations` 还提供了一个与 `dj_database_url: DatabaseURLValue` 协同工作的配置类。它与
    `dj_database_url.config` 略有不同，因为它生成包括 `default` 项在内的整个 `DATABASES` 字典。例如，考虑以下代码：'
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This code is the equivalent to the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码等同于以下代码：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Do not write `DATABASES['default'] = values.DatabaseURLValue()` as your dictionary
    will be doubly nested.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 不要这样写 `DATABASES['default'] = values.DatabaseURLValue()`，因为你的字典将会嵌套两层。
- en: If you need to specify multiple databases, you will need to fall back to `dj_database_url.config`
    directly rather than using `DatabaseURLValue`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要指定多个数据库，你需要直接回退到使用 `dj_database_url.config` 而不是使用 `DatabaseURLValue`。
- en: 'Like other `values` classes, `DatabaseURLValue` takes a default value as its
    first argument. You might also want to use the `environment_prefix` argument and
    set it to `DJANGO` so that its environment variable being read is consistent in
    naming to the others. A full example of using `DatabaseURLValue` would therefore
    be like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: By setting the `environment_prefix` like this, we can set the database URL using the
    `DJANGO_DATABASE_URL` environment variable (rather than just `DATABASE_URL`).
    This means it is consistent with other environment variable settings that also
    start with `DJANGO`_, such as `DJANGO_DEBUG` or `DJANGO_ALLOWED_HOSTS`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: Note that even though we are not importing `dj-database-url` in `settings.py`,
    `django-configurations` uses it internally, so it still must be installed.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: In the next exercise, we will configure Bookr to use DatabaseURLValue to set
    its database configuration. It will be able to read from an environment variable
    and fall back to a default we specify.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15.02: dj-database-url and Setup'
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will install `dj-database-url` using `pip3`. Then we will
    update Bookr''s `settings.py` to configure the `DATABASE` setting using a URL,
    which is read from an environment variable:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `dj-database-url` using `pip3`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The install process will run, and you should have output similar to this:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.5: dj-database-url installation with pip'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_05.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.5: dj-database-url installation with pip'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In PyCharm, open `settings.py` in the `bookr` package directory. Scroll down
    to find where the `DATABASES` attribute is being defined. Replace it with the
    `values.DatabaseURLValue` class. The first argument (default value) should be
    the URL to the SQLite database: `''sqlite:///{}/db.sqlite3''.format(BASE_DIR)`.
    Also pass in `environ_prefix`, set to `DJANGO`. After completing this step, you
    should be setting the attribute like this:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Save `settings.py`.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server. As with *Exercise 15.01*, *Django Configurations
    Setup*, if it starts fine, you can be confident that your change was successful.
    To be sure, open `http://127.0.0.1:8000/` in a browser and check that everything
    looks and behaves as it did before. You should visit a page that queries from
    the database (such as the `Books List` page) and check that a list of books is displayed:![Figure
    15.6: Bookr pages with database queries still work'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_06.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.6: Bookr pages with database queries still work'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we updated our `settings.py` to determine its `DATABASES`
    setting from a URL specified in an environment variable. We used the `values.DatabaseURLValue`
    class to automatically read the value, and provided a default URL. We also set
    the `environ_prefix` argument to `DJANGO` so that the environment variable name
    is `DJANGO_DATABASE_URL`, which is consistent with other settings.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will take a tour of the Django Debug Toolbar, an app
    that helps you debug your Django applications through the browser.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: The Django Debug Toolbar
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The Django Debug Toolbar is an app that displays debug information about a
    web page right in your browser. It includes information about what SQL commands
    were run to generate the page, the request and response headers, how long the
    page took to render, and more. These can be useful if:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '*A page is taking a long time to load – maybe it is running too many database
    queries.* You can see if the same queries are being run multiple times, in which
    case you could consider caching. Otherwise, some queries may be sped up by adding
    an index to the database.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*You want to determine why a page is returning the wrong information.* Your
    browser may have sent headers you did not expect, or maybe some headers from Django
    are incorrect.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Your page is slow because it is spending time in non-database code* – you
    can profile the page to see what functions are taking the longest.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*The page looks incorrect.* You can see what templates Django rendered. There
    might be a third-party template that is being rendered unexpectedly. You can also
    check all the settings that are being used (including the built-in Django ones
    that we are not setting). This can help to pinpoint a setting that is incorrect
    and causing the page to not behave correctly.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We''ll explain how to use the Django Debug Toolbar to see this information.
    Before diving into how to set up the Django Debug Toolbar and how to use it, let''s
    take a quick look at it. The toolbar is shown on the right of the browser window
    and can be toggled open and closed to display information:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.7: The Django Debug Toolbar closed'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_07.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.7: The Django Debug Toolbar closed'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding figure shows the Django Debug Toolbar in its closed state. Notice
    the toggle bar in the top-right corner of the window. Clicking the toolbar opens
    it:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8: The Django Debug Toolbar open'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_08.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.8: The Django Debug Toolbar open'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15.8* shows the Django Debug Toolbar open.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Installing the Django Debug Toolbar is done using `pip`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'Then there are a few steps to set it up, mostly by making changes to `settings.py`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: Add `debug_toolbar` to the `INSTALLED_APPS` settings list.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `debug_toolbar.middleware.DebugToolbarMiddleware` to the `MIDDLEWARE` settings
    list. It should be done as early as possible; for Bookr, it can be the first item
    in this list. This is the middleware that all requests and responses pass through.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `'127.0.0.1'` to the `INTERNAL_IPS` settings list (this setting may have
    to be created). The Django Debug Toolbar will only show for IP addresses listed here.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the Django Debug Toolbar URLs to the base `urls.py` file. We want to add
    this mapping only if we are in `DEBUG` mode:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In the next exercise, we will go through these steps in detail.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Once the Django Debug Toolbar is installed and set up, any page you visit will
    show the DjDT sidebar (you can open or close it using the DjDT menu). When it's
    open, you'll be able to see another set of sections that you can click on to get
    more information.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: 'Each panel has a checkbox next to it, this allows you to enable or disable
    the collection of that metric. Each metric that is collected will slightly slow
    down the page load (although, usually, this is not noticeable). If you find that
    one metric collection is slow, you can turn it off here:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'We''ll go through each panel. The first is `Versions`, which shows the version
    of Django running. You can click it to open a large `Versions` display, which
    will also show the version of Python and the Django Debug Toolbar (*Figure 15.9*):![Figure
    15.9: DjDT Versions panel (screenshot cropped for brevity)'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_09.jpg)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.9: DjDT Versions panel (screenshot cropped for brevity)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The second panel is `Time`, which shows how long it took to process the request.
    It is broken down into system time and user time as well (*Figure 15.10*):![Figure
    15.10: DjDT Time panel'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_10.jpg)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.10: DjDT Time panel'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The differences between these are beyond the scope of this book but, basically,
    system time is time spent in the kernel (for example, doing network or file reading/writing)
    and user time is code that is outside the operating system kernel (this includes
    the code you've written in Django, Python, and so on).
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also shown is time spent in the browser, such as the time taken to get the request
    and how long it took to render the page.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The third panel, `Settings`, shows all the settings your application is using
    (*Figure 15.11*):![Figure 15.11: DjDT Settings panel'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_11.jpg)'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.11: DjDT Settings panel'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is useful because it shows both your settings from `settings.py` and the
    default Django settings.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The fourth panel is `Headers` (*Figure 15.12*). It shows the headers of the
    request the browser made, and the response headers that Django has sent:![Figure
    15.12: DjDT Headers panel'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_12.jpg)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.12: DjDT Headers panel'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The fifth panel, `Request`, shows the view that generated the response, and
    the args and kwargs it was called with (*Figure 15.13*). You can also see the
    name of the URL used in its URL map:![Figure 15.13: DjDT Request panel (some panels
    not shown for brevity)'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_13.jpg)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.13: DjDT Request panel (some panels not shown for brevity)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It also shows the request's cookies, information stored in the session (sessions
    were introduced in *Chapter 8*, *Media Serving and File Upload*) as well as the
    `request.GET` and `request.POST` data.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The sixth panel, `SQL`, shows all the SQL database queries that were executing
    when building the response (Figure 15.14):![Figure 15.14: DjDT SQL panel'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_14.jpg)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.14: DjDT SQL panel'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can see how long each query took to execute and in what order they were
    executed. It also flags similar and duplicate queries so you can potentially refactor
    your code to remove them.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Each `SELECT` query displays two action buttons, `Sel`, short for select, and
    `Expl`, short for explain. These do not show up for `INSERT`, `UDPATE`, or `DELETE` queries.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `Sel` button shows the `SELECT` statement that was executed and all the
    data that was retrieved for the query (*Figure 15.15*):'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.15: DjDT SQL Select panel'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_15.jpg)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.15: DjDT SQL Select panel'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `Expl` button shows the `EXPLAIN` query for the `SELECT` query (*Figure 15.16*):'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.16: DjDT SQL Explain panel (some panels not shown for brevity)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_16.jpg)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.16: DjDT SQL Explain panel (some panels not shown for brevity)'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`EXPLAIN` queries are beyond the scope of the book, but they basically show
    how the database tried to execute the `SELECT` query, for example, what database
    indexes were used. You might find that a query does not use an index and you can
    therefore get faster performance by adding one.'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The seventh panel is `Static files`, and it shows you which static files were
    loaded in this request (*Figure 15.17*). It also shows you all the static files
    that are available and how they would be loaded (that is, which static file finder
    found them). The `Static files` panel''s information is like the information you
    can get from the `findstatic` management command:![Figure 15.17: DjDT Static panel'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_17.jpg)'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.17: DjDT Static panel'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The eighth panel, `Templates`, shows information about the templates that were
    rendered (*Figure 15.18*):![Figure 15.18: DjDT Templates panel'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_18.jpg)'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.18: DjDT Templates panel'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It shows the paths the templates were loaded from and the inheritance chain.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The ninth panel, `Cache`, shows information about data fetched from Django''s cache:![Figure
    15.19: DjDT Cache panel (some panels not shown for brevity)'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_19.jpg)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.19: DjDT Cache panel (some panels not shown for brevity)'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since we aren't using caching in Bookr, this section is blank. If we were, we
    would be able to see how many requests to the cache had been made, and how many
    of those requests were successful in retrieving items. We would also see how many
    items had been added to the cache. This can give you an idea about whether you
    are using the cache effectively or not. If you are adding a lot of items to the
    cache but not retrieving any, then you should reconsider what data you are caching.
    On the contrary, if you have a lot of `Cache misses` (a miss is when you request
    data that is not in the cache), then you should be caching more data than you
    are already.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The tenth panel is `Signals`, which shows information about Django signals
    (*Figure 15.20*):![Figure 15.20: DjDT Signals panel (some panels not shown for
    brevity)'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_20.jpg)'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.20: DjDT Signals panel (some panels not shown for brevity)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: While we don't cover signals in this book, they are like events that you can
    hook into to execute functions when Django does something; for example, if a user
    is created, send them a welcome email. This section shows which signals were sent
    and which functions received them.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The eleventh panel, `Logging`, shows log messages that were generated by your
    Django app (*Figure 15.21*):![Figure 15.21: DjDT Logging panel'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_21.jpg)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.21: DjDT Logging panel'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Since no log messages were generated in this request, this panel is empty.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The next option, `Intercept redirects`, is not a section with data. Instead,
    it lets you toggle redirect interception. If your view returns a redirect, it
    will not be followed. Instead, a page like *Figure 15.22* is displayed:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.22: A redirect that DjDT has intercepted'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_22.jpg)'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.22: A redirect that DjDT has intercepted'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This allows you to open the Django Debug Toolbar for the view that generated
    the redirect – otherwise, you'd only be able to see the information for the view
    that you were redirected to.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final panel is `Profiling`. This is off by default as profiling can slow
    down your response quite a lot. Once it is turned on, you must refresh the page
    to generate the profiling information (shown in *Figure 15.23*):![Figure 15.23:
    DjDT Profiling panel'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_23.jpg)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.23: DjDT Profiling panel'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: 'The information shown here is a breakdown of how long each function call in
    your response took. The left of the page shows a stack trace of all the calls
    performed. On the right are columns with timing data. The columns are:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '**CumTime**: The cumulative amount of time spent in the function and any sub-functions
    it calls'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Count`)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TotTime**: The amount of time spent in this function but not in any sub-function
    it calls'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Count`)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Calls**: The number of calls of this function'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This information can help you determine where to speed up your app. For example,
    it can be easier to speed up a function that is called 1,000 times by a small
    fraction, than to optimize a large function that is only called once. Any more
    in-depth tips on how to speed up your code are beyond the scope of this book.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15.03: Setting Up the Django Debug Toolbar'
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will add the Django Debug Toolbar settings by modifying
    the `INSTALLED_APPS`, `MIDDLEWARE`, and `INTERNAL_IPS` settings. Then you''ll
    add the `debug_toolbar.urls` map to the `bookr` package''s `urls.py`. Then you
    will load a page with the Django Debug Toolbar in a browser and use it:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install the Django Debug Toolbar using `pip3`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This will allow Django to find the Django Debug Toolbar's static files.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add `debug_toolbar.middleware.DebugToolbarMiddleware` to the `MIDDLEWARE` setting
    – it should be the first item in the list:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will route requests and responses through `DebugToolbarMiddleware`, allowing
    the Django Debug Toolbar to inspect the request and insert its HTML into the response.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The final setting to add is to add the address `127.0.0.1` to `INTERNAL_IPS`.
    You will not yet have an `INTERNAL_IPS` setting defined, so add this as a setting:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This will make the Django Debug Toolbar only show up on the developer's computer.
    You can now save `settings.py`.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We now need to add the Django Debug Toolbar URLs. Open `urls.py` in the `bookr`
    package directory. We already have an `if` condition that checks for `DEBUG` mode
    then adds the media URL like so:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We will also add an `include` of `debug_toolbar.urls` inside this `if` statement,
    however, we will add it to the start of `urlpatterns` rather than appending it
    to the end. Add this code inside the `if` statement:'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Save `urls.py`.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running and navigate to `http://127.0.0.1:8000`.
    You should see the Django Debug Toolbar open. If it is not open, click the `DjDT`
    toggle button at the top-right to open it:![Figure 15.25: DjDT toggle shown in
    the corner'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_25.jpg)'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.25: DjDT toggle shown in the corner'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Try going through some of the panels and visiting different pages to see what
    information you can find out. Try also turning on `Intercept redirects` and then
    create a new book review. After submitting the form, you should see the intercepted
    page rather than being redirected to the new review (*Figure 15.26*):![Figure
    15.26: The redirect intercept page after submitting a new review'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_26.jpg)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.26: The redirect intercept page after submitting a new review'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can then click the `Location` link to go to the page that it was being redirected
    to.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can also try turning on `Profiling` and see which functions are being called
    a lot and which are taking up most of the rendering time.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you are finished experimenting with the Django Debug Toolbar, turn off
    `Intercept redirects` and `Profiling`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, we installed and set up the Django Debug Toolbar by adding
    settings and URL maps. We then saw it in action and examined the useful information
    it can give us, including how to work with redirects and see profiling information.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at the `django-crispy-forms` app, which will
    let us reduce the amount of code needed to write forms.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: django-crispy-forms
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Bookr, we are using the Bootstrap CSS framework. It provides styles that
    can be applied to forms using CSS classes. Since Django is independent of Bootstrap,
    when we use Django forms, it does not even know that we are using Bootstrap and
    so has no idea of what classes to apply to form widgets.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: '`django-crispy-forms` acts as an intermediary between Django Forms and Bootstrap
    forms. It can take a Django form and render it with the correct Bootstrap elements
    and classes. It not only supports Bootstrap but also other frameworks such as
    `crispy-forms-foundation`).'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: 'Its installation and setup are quite simple. Once again, it is installed with
    `pip3`:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Then there are just a couple of settings changes. First, add `crispy_forms`
    to your `INSTALLED_APPS`. Then, you need to tell `django-crispy-forms` what framework
    you are using, so it loads the correct templates. This is done with the `CRISPY_TEMPLATE_PACK`
    setting. In our case, it should be set to `bootstrap4`:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`django-crispy-forms` has two main modes of operation, either as a filter or
    a template tag. The former is easier to drop into an existing template. The latter
    allows more configuration options and moves more of the HTML generation into the
    `Form` class. We''ll look at both of these in order.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: The crispy Filter
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first method of rendering a form with `django-crispy-forms` is by using
    the `crispy` template. First, the filter must be loaded in the template. The library
    name is `crispy_forms_tags`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, instead of rendering a form with the `as_p` method (or another method),
    use the `crispy` filter. Consider the following line:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'And replace it with this:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Here''s a quick *before and after* showing the `Review Create` form. None of
    the rest of the HTML has been changed apart from the form rendering. *Figure 15.27*
    shows the standard Django form:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.27: The Review Create form with default styling'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_27.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.27: The Review Create form with default styling'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15.28* shows the form after `django-crispy-forms` has added the Bootstrap
    classes:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.28: Review Create form with Bootstrap classes added by django-crispy-forms'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_28.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.28: Review Create form with Bootstrap classes added by django-crispy-forms'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: When we integrate `django-crispy-forms` into Bookr, we will not use this method,
    however, it is worth knowing about because of how easy it is to drop it into your
    existing templates.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: The crispy Template Tag
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The other method of rendering a form with `django-crispy-forms` is with the
    use of the `crispy` template tag. To use it, the `crispy_forms_tags` library must
    first be loaded into the template (as we did in the previous section). Then, the
    form is rendered like this:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'How does this differ from the `crispy` filter? The `crispy` template tag will
    also render the `<form>` element and `{% csrf_token %}` template tag for you.
    So, consider for example that you used it like this:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The output for this would be as follows:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: That is, the form and CSRF token fields are duplicated. In order to customize
    the `<form>` element that is generated, `django-crispy-forms` provides a `FormHelper`
    class that can be set as a `Form` instance's `helper` attribute. It is the `FormHelper`
    instance that the `crispy` template tag uses to determine what attributes the
    `<form>` should have.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at an `ExampleForm` with a helper added. First, import the required modules:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, define a form:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We could instantiate a `FormHelper` instance and then set it to the `form.helper`
    attribute (for example, in a view), but it''s usually more useful to just create
    and assign it inside the form''s `__init__` method. We haven''t created a form
    with an `__init__` method yet, but it''s no different from any other Python class:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next, we set the helper and the form_method for the helper (which is then rendered
    in the form HTML):'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Other attributes can be set on the helper, such as `form_action`, `form_id`,
    and `form_class`. We don't need to use these in Bookr though. We also do not need
    to manually set the `enctype` on the form or its helper, as the `crispy` form
    tag will automatically set this to `multipart/form-data` if the form contains
    file upload fields.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: 'If we tried to render the form now, we wouldn''t be able to submit it as there''s
    no submit button (remember we added submit buttons to our forms manually, they
    are not part of the Django form). `django-crispy-forms` also includes layout helpers
    that can be added to the form. They will be rendered after the other fields. We
    can add a submit button like this – first, import the `Submit` class:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Note
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '`django-crispy-forms` does not properly support using a `<button>` input to
    submit a form, but for our purposes, an `<input type="submit">` is functionally
    identical.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: 'We then instantiate it and add it to the helper''s inputs in a single line:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The first argument to the `Submit` constructor is its *name*, and the second
    is its *label*.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '`django-crispy-forms` is aware that we are using Bootstrap and will automatically
    render the button with the `btn btn-primary` classes.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: The advantage of using a crispy template tag and `FormHelper` is that it means
    there is only one place where attributes and the behavior of the form are defined.
    We are already defining all the form fields in a `Form` class; this allows us
    to define the other attributes of the form in the same place. We could change
    a form from a `GET` submission to a `POST` submission easily here. The `FormHelper`
    instance will then automatically know that it needs to add a CSRF token to its
    HTML output when rendered.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: We'll put all this into practice in the next exercise, where you will install
    `django-crispy-forms` and then update `SearchForm` to utilize a form helper, then
    render it using the `crispy` template tag.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 15.04: Using Django Crispy Forms with the SearchForm'
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will install `django-crispy-forms`, then convert the
    `SearchForm` to be usable with the `crispy` template tag. This will be done by
    adding an `__init__` method and building a `FormHelper` instance inside it:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `django-crispy-forms` using `pip3`:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This will allow Django to find the required templates.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'While in `settings.py`, add a new setting for `CRISPY_TEMPLATE_PACK` – its
    value should be `bootstrap4`. This should be added as an attribute on the `Dev` class:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This lets `django-crispy-forms` know that it should be using the templates designed
    for Bootstrap version 4 when rendering forms. You can now save and close `settings.py`.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `reviews` app''s `forms.py` file. First, we need to add two imports
    to the top of the file: `FormHelper` from `crispy_forms.helper`, and `Submit`
    from `crispy_forms.layout`:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Next, add an `__init__` method to `SearchForm`. It should accept `*args` and
    `**kwargs` as arguments, then call the super `__init__` method with them:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This will simply pass through whatever arguments are provided to the superclass constructor.
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Still inside the `__init__` method, set `self.helper` to an instance of `FormHelper`.
    Then set the helper''s `form_method` to `get`. Finally, create an instance of
    `Submit`, passing in an empty string as the name (first argument), and `Search`
    as the button label (second argument). Add this to the helper with the `add_input`
    method:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: You can save and close `forms.py`.
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In the `reviews` app''s `templates` directory, open `search-results.html`.
    At the start of the file, after the `extends` template tag, use a `load` template
    tag to load `crispy_forms_tags`:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Locate the existing `<form>` in the template. It should look like this:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You can delete the entered `<form>` element and replace it with a `crispy`
    template tag:'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'This will use the `django-crispy-forms` library to render the form, including
    the `<form>` element and submit button. After making this change, this portion
    of the template should look like *Figure 15.30*:'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 15.30: search-results.html after replacing <form> with crispy form
    renderer'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_15_30.jpg)'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.30: search-results.html after replacing <form> with crispy form renderer'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can now save `search-results.html`.
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running and go to `http://127.0.0.1:8000/book-search/`.
    You should see the book search form like in *Figure 15.31*:![Figure 15.31: Book
    search form rendered with django-crispy-forms'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_15_31.jpg)'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 15.31: Book search form rendered with django-crispy-forms'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: 'You should be able to use the form in the same manner as you did before (*Figure 15.32*):'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.32: Performing a search with the updated search form'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_32.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.32: Performing a search with the updated search form'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Try viewing the source of the page in your web browser to see the rendered output.
    You will see that the `<form>` element has been rendered with the `method="get"`
    attribute, as we specified to the `FormHelper` in *step 5*. Notice also that `django-crispy-forms`
    has not inserted a CSRF token field – it knows that one is not required for a
    form submitted using `GET`.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we installed `django-crispy-forms` using `pip3` (`pip` for
    Windows) and then configured it in `settings.py` by adding it to `INSTALLED_APPS`
    and defining the `CRISPY_TEMPLATE_PACK` we wanted to use (in our case, `bootstrap4`).
    We then updated the `SearchForm` class to use a `FormHelper` instance to control
    the attributes on the form and added a submit button using the `Submit` class.
    Finally, we changed the `search-results.html` template to use the `crispy` template
    tag to render the form, which allowed us to remove the `<form>` element we were
    using before and simplify form generation by moving all the form-related code
    into Python code (instead of being partially in HTML and partially in Python).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: django-allauth
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When browsing websites, you have probably seen buttons that allow you to log
    in using another website''s credentials. For example, using your GitHub login:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.33: Sign In form with options to log in with Google or GitHub'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_33.jpg)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.33: Sign In form with options to log in with Google or GitHub'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we explain the process, let us introduce the terminology we will be
    using:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: '**Requesting site**: The site the user is trying to log in to.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication provider**: The third-party provider that the user is authenticating
    to (for example, Google, GitHub, and so on).'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication application**: This is something the creators of the requesting
    site set up at the authentication provider. It determines what permissions the
    requesting site will have with the authentication provider. For example, the requesting
    application can get access to your GitHub username, but won''t have permission
    to write to your repositories. The user can stop the requesting site from accessing
    your information at the authentication provider by disabling access to the authentication
    application.'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The process is generally the same regardless of which third-party sign-in option
    you choose. First, you will be redirected to the authentication provider site
    and be asked to allow the authentication application to access your account (*Figure
    15.34*):'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.34: Authentication provider authorization screen'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_34.jpg)'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.34: Authentication provider authorization screen'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
- en: 'After you authorize the authentication application, the authentication provider
    will redirect back to the requesting site. The URL that you are redirected to
    will contain a secret token that the requesting site can use to request your user
    information in the backend. This allows the requesting site to verify who you
    are by communicating directly with the authentication provider. After validating
    your identity using a token, the requesting site can redirect you to your content.
    This flow is illustrated in a sequence diagram in *Figure 15.35*:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.35: Third-party authentication flow'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_35.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.35: Third-party authentication flow'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have introduced authenticating using a third-party service, we can
    discuss `django-allauth`. `django-allauth` is an app that easily plugs your Django
    application into a third-party authentication service, including Google, GitHub,
    Facebook, Twitter, and others. In fact, at the time of writing, `django-allauth`
    supports over 75 authentication providers.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: The first time a user authenticates to your site, `django-allauth` will create
    a standard Django `User` instance for you. It also knows how to parse the callback/redirect
    URL that the authentication provider loads after the end user authorizes the authentication
    application.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: '`django-allauth` adds three models to your application:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: '`SocialApplication`: This stores the information used to identify your authentication
    application. The information you enter will depend on the provider, who will give
    you a *client* ID, *secret* key, and (optionally) a *key*. Note that these are
    the names that `django-allauth` uses for these values and they will differ based
    on the provider. We will give some examples of these values later in this section.
    `SocialApplication` is the only one of the `django-allauth` models that you will
    create yourself, the others `django-allauth` creates automatically when a user
    authenticates.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SocialApplicationToken`: This contains the values needed to identify a Django
    user to the authentication provider. It contains a *token* and (optionally) a
    *token secret*. It also contains a reference to the `SocialApplication` that created
    it and the `SocialAccount` to which it applies.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SocialAccount`: This links a Django user to the provider (for example, Google
    or GitHub) and stores extra information that the provider may have given.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Since there are so many authentication providers, we will not cover how to
    set them all up, but we will give a short instruction on setup and how to map
    the auth tokens from the providers to the right fields in a `SocialApplication`.
    We will do this for the two auth providers we have been mentioning throughout
    the chapter: Google and GitHub.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: django-allauth Installation and Setup
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Like the other apps in this chapter, `django-allauth` is installed with `pip3`:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Note
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: 'We then need a few settings changes. `django-allauth` requires the `django.contrib.sites`
    app to run, so it needs to be added to `INSTALLED_APPS`. Then a new setting needs
    to be added to define a `SITE_ID` for our site. We can just set this to `1` in
    our `settings.py` file:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Note
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to have a single Django project hosted on multiple hostnames
    and have it behave differently on each – but also have content shared across all
    the sites. We don't need to use the `SITE_ID` anywhere else in our project but
    one must be set here. You can read more about the `SITE_ID` settings at [https://docs.djangoproject.com/en/3.0/ref/contrib/sites/](https://docs.djangoproject.com/en/3.0/ref/contrib/sites/).
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: 'We also need to add `allauth` and `allauth.socialaccount` to `INSTALLED_APPS`:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Then, each provider we want to support must also be added in the list of `INSTALLED_APPS`;
    for example, consider the following snippet:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'After all this is done, we need to run the `migrate` management command, to
    create the `django-allauth` models:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Once this is done, new social applications can be added through the Django
    Admin interface (*Figure 15.36*):'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.36: Adding a social application'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_36.jpg)'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.36: Adding a social application'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: To add a social application, select a `Provider` (this list will only show those
    in the `INSTALLED_APPS` list), enter a name (it can just be the same as the `Provider`),
    and enter the `Client ID` from the provider's website (we will go into detail
    on this soon). You may also need a `Secret key` and `Key`. Select the site it
    should apply to. (If you only have one `Site` instance, then its name does not
    matter, just select it. The site name can be updated in the `Sites` section of
    Django admin. You can also add more sites there.)
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: We will now look at the tokens used by our three example providers.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: GitHub Auth Setup
  id: totrans-448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A new GitHub application can be set up under your GitHub profile. During development,
    your callback URL for the application should be set to `http://127.0.0.1:8000/accounts/github/login/callback/`
    and updated with the real hostname when you deploy to production. After creating
    the app, it will provide a `Client ID` and `Client Secret`. These are your `Client
    id` and `Secret key`, respectively, in `django-allauth`.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: Google Auth Setup
  id: totrans-450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The creation of a Google application is done through your Google Developers
    console. The authorized redirect URI should be set to `http://127.0.0.1:8000/accounts/google/login/callback/`
    during development and updated after production deployment. The app's `Client
    ID` is also Client id in `django-allauth`, and the app's `Client secret` is the
    `Secret key`.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: Initiating Authentication with django-allauth
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To initiate authentication through a third-party provider, you first need to
    add the `django-allauth` URLs in your URL maps. Somewhere inside your `urlpatterns`
    is one of your `urls.py` files, include `allauth.urls`:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: You will then be able to initiate a login using URLs like `http://127.0.0.1:8000/allauth/github/login/?process=login`
    or `http://127.0.0.1:8000/allauth/google/login/?process=login`, and so on. django-allauth
    will handle all the redirects for you, then create/authenticate the Django user
    when they return to the site. You can have buttons on your login page with text
    such as Login with GitHub or Login with Google that link to these URLs.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: Other django-allauth Features
  id: totrans-456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other than authentication with third-party providers, `django-allauth` can also
    add some useful features that Django does not have built in. For example, you
    can configure it to require an email address for a user, and have the user verify
    their email address by clicking a confirmation link they receive before they log
    in, `django-allauth` can also handle generating a URL for a password reset that
    is emailed to the user. You can find the documentation for `django-allauth` that
    explains these features, and more, at [https://django-allauth.readthedocs.io/en/stable/overview.html](https://django-allauth.readthedocs.io/en/stable/overview.html).
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered the first four third-party apps in depth and given
    a brief overview of `django-allauth`, you can undertake the activity for this
    chapter. In this activity, you will refactor the `ModelForm` instances we are
    using to use the `CrispyFormHelper` class.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 15.01: Using FormHelper to Update Forms'
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, we will update the `ModelForm` instances (`PublisherForm`,
    `ReviewForm`, and `BookMediaForm`) to use the `CrispyFormHelper` class. Using
    `FormHelper`, we can define the text of the `Submit` button inside the `Form`
    class itself. We can then move the `<form>` rendering logic out of the `instance-form.html`
    template and replace it with a `crispy` template tag.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete the activity:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: Create an `InstanceForm` class that subclasses `forms.ModelForm`. This will
    be the base of the existing `ModelForm` classes.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `__init__` method of `InstanceForm`, set a `FormHelper` instance on `self`.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `Submit` button to `FormHelper`. If the form is instantiated with an `instance`,
    then the button text should be `Save`, otherwise, it should be `Create`.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update PublisherForm, ReviewForm, and BookMediaForm to extend from `InstanceForm`.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `instance-form.html` template so that `form` is rendered using the
    `crispy` template tag. The rest of the `<form>` can be removed.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `book_media` view, the `is_file_upload` context item is no longer required.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are finished, you should see the forms rendered with Bootstrap themes.
    *Figure 15.37* shows the `New Publisher` page:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.37: New Publisher page'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_37.jpg)'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.37: New Publisher page'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15.38* shows the `New Review` page:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.38: New Review form'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_38.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.38: New Review form'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the book media page is displayed in *Figure 15.39*:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.39: Book media page'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_39.jpg)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.39: Book media page'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: You should notice the form still behaves fine and allows file uploads. `django-crispy-forms`
    has automatically added the `enctype="multipart/form-data"` attribute to `<form>`.
    You can verify this by viewing the page source.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: Note
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-483
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced five third-party Django apps that can enhance
    your website. We installed and set up `django-configurations`, which allowed us
    to easily switch between different settings and change them using environment
    variables. `dj-database-url` also helped with settings, allowing us to make database
    settings changes using URLs. We saw how the Django Debug Toolbar could help us
    see what our app was doing and help us debug problems we were having with it.
    `django-crispy-forms` can not only render our forms using the Bootstrap CSS but
    also lets us save code by defining their behavior as part of the form class itself.
    We briefly looked at `django-allauth` and saw how it can be integrated into third-party
    authentication providers. In the activity for this chapter, we updated our `ModelForm`
    instances to use the `django-crispy-forms` `FormHelper` and remove some logic
    from the template by using the `crispy` template tag.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to integrate the React JavaScript framework
    into a Django application.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
