- en: 15\. Django Third-Party Libraries
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 15. Django第三方库
- en: Overview
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 概述
- en: This chapter introduces you to Django third-party libraries. You will configure
    your database connection using URLs with `dj-database-urls` and inspect and debug
    your application with the `django-crispy-forms`, you will enhance the look of
    your forms, as well as reduce the amount of code you have to write by using the
    `crispy` template tag. We will also cover the `django-allauth` library, which
    lets you authenticate users against third-party providers. In the final activity,
    we will enhance Bookr's forms with the use of `django-crispy-forms`.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章向您介绍Django第三方库。您将使用`dj-database-urls`通过URL配置您的数据库连接，并使用`django-crispy-forms`检查和调试您的应用程序，您将增强表单的外观，并通过使用`crispy`模板标签减少您需要编写的代码量。我们还将介绍`django-allauth`库，它允许您使用第三方提供者对用户进行身份验证。在最后的活动中，我们将使用`django-crispy-forms`增强Bookr的表单。
- en: Introduction
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Because Django has been around since 2007, there is a rich ecosystem of third-party
    libraries that can be plugged into an application to give it extra features. So
    far, we have learned a lot about Django and used many of its features, including
    database models, URL routing, templating, forms, and more. We used these Django
    tools directly to build a web app, but now we will look at how to leverage the
    work of others to quickly add even more advanced features to our own apps. We
    have alluded to apps for storing files, (in *Chapter 5*, *Serving Static Files*,
    we mentioned an app, `django-storages`, that can store our static files in a CDN),
    but in addition to file storage, we can also use them to plug into third-party
    authentication systems, integrate with payment gateways, customize how our settings
    are built, modify images, build forms more easily, debug our site, use different
    types of databases, and much more. Chances are, if you want to add a certain feature,
    an app exists for it.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Django自2007年以来一直存在，因此有一个丰富的第三方库生态系统，可以将其连接到应用程序以提供额外功能。到目前为止，我们已经学到了很多关于Django的知识，并使用了其许多功能，包括数据库模型、URL路由、模板、表单等等。我们直接使用这些Django工具来构建Web应用程序，但现在我们将探讨如何利用他人的工作来快速为我们自己的应用程序添加更多高级功能。我们提到了用于存储文件的程序（在*第5章*，*服务静态文件*中，我们提到了一个程序，`django-storages`，可以将我们的静态文件存储在CDN上），但除了文件存储之外，我们还可以使用它们连接到第三方身份验证系统、集成支付网关、自定义设置构建方式、修改图像、更轻松地构建表单、调试我们的网站、使用不同类型的数据库等等。可能性很大，如果您想添加某个功能，可能已经存在一个应用程序可以做到这一点。
- en: We don't have space to cover every app in this chapter, so we'll just focus
    on four that provide useful features across many different types of apps. `django-configurations`
    allows you to configure your Django settings using classes and take advantage
    of inheritance to simplify settings for different environments. This works in
    tandem with `dj-database-urls` to specify your database connection setting using
    just a URL. The *Django Debug Toolbar* lets you get extra information to help
    with debugging, right in your browser. The last app we'll look at is `django-crispy-forms`,
    which provides extra CSS classes to make forms look nicer, as well as making them
    easier to configure using just Python code.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Django自2007年以来一直存在，因此有一个丰富的第三方库生态系统，可以将其连接到应用程序以提供额外功能。到目前为止，我们已经学到了很多关于Django的知识，并使用了其许多功能，包括数据库模型、URL路由、模板、表单等等。我们直接使用这些Django工具来构建Web应用程序，但现在我们将探讨如何利用他人的工作来快速为我们自己的应用程序添加更多高级功能。我们提到了用于存储文件的程序（在*第5章*，*服务静态文件*中，我们提到了一个程序，`django-storages`，可以将我们的静态文件存储在CDN上），但除了文件存储之外，我们还可以使用它们连接到第三方身份验证系统、集成支付网关、自定义设置构建方式、修改图像、更轻松地构建表单、调试我们的网站、使用不同类型的数据库等等。可能性很大，如果您想添加某个功能，可能已经存在一个应用程序可以做到这一点。
- en: For each of these libraries, we will cover installation and basic setup and
    use, mostly as they apply to Bookr. They also have more configuration options
    to further customize to fit your application. Each of these apps can be installed
    with `pip`.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这些库中的每一个，我们将涵盖安装和基本设置以及使用方法，主要针对Bookr应用。它们还有更多的配置选项，以便进一步自定义以适应您的应用程序。这些应用程序都可以使用`pip`安装。
- en: We will also briefly introduce `django-allauth`, which allows a Django application
    to authenticate users against third-party providers (such as Google, GitHub, Facebook,
    and Twitter). We won't cover its installation and setup in detail but will provide
    some examples to help you configure it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将简要介绍`django-allauth`，它允许Django应用程序对第三方提供者（如Google、GitHub、Facebook和Twitter）进行用户身份验证。我们不会详细涵盖其安装和设置，但会提供一些示例来帮助您进行配置。
- en: Environment Variables
  id: totrans-8
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境变量
- en: When we create a program, we often want the user to be able to configure some
    of its behavior. For example, say you have a program that connects to a database
    and saves all the records it finds into a file. Normally it would probably print
    out just a *success* message to the terminal, but you might also want to run it
    in *debug mode*, which makes it also print out all the SQL statements it is executing.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个程序时，我们通常希望用户能够配置其行为的一些方面。例如，假设你有一个连接到数据库并将找到的所有记录保存到文件的程序。通常它可能只会向终端打印出
    *成功* 消息，但你可能还希望以 *调试模式* 运行它，这样它也会打印出它正在执行的 SQL 语句。
- en: 'There are many ways of configuring a program like this. For example, you could
    have it read from a configuration file. But in some cases, the user may quickly
    want to run the Django server with a particular setting on (say, debug mode),
    and then run the server again with the same setting off. Having to change the
    configuration file each time can be inconvenient. In this case, we can read from
    an *environment variable*. Environment variables are key/value pairs that can
    be set in your operating system and then read by a program. There are several
    ways they can be set:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 配置这样的程序有许多方法。例如，你可以让它从配置文件中读取。但在某些情况下，用户可能希望快速运行 Django 服务器并使用特定的设置（比如，调试模式），然后再关闭该设置重新运行服务器。每次都更改配置文件可能不太方便。在这种情况下，我们可以从
    *环境变量* 中读取。环境变量是在操作系统中设置的键/值对，然后程序可以读取它们。它们可以通过几种方式设置：
- en: Your shell (terminal) can read variables from a profile script when it starts,
    then each program will have access to these variables.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你的 shell（终端）在启动时可以读取配置脚本中的变量，然后每个程序都将能够访问这些变量。
- en: You can set a variable inside a terminal and it will be made available to any
    programs that start subsequently. In Linux and macOS, this is done with the `export`
    command; Windows uses the `set` command. Any variables you set in this way override
    those in the profile script, but only for the current session. When you close
    the terminal, the variables are lost.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在终端内设置一个变量，然后它将对随后启动的任何程序可用。在 Linux 和 macOS 上，这通过 `export` 命令完成；Windows 使用
    `set` 命令。以这种方式设置的任何变量都将覆盖配置脚本中的变量，但仅限于当前会话。当你关闭终端时，变量就会丢失。
- en: You can set environment variables at the same time as running a command in a
    terminal. These will only persist for the program being run, and they override
    exported environment variables and those read from a profile script.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在终端运行命令的同时设置环境变量。这些变量将只对正在运行的程序持续存在，并且它们会覆盖已导出的环境变量和从配置脚本中读取的变量。
- en: You can set environment variables inside a running program, and they will be
    available only inside the program (or to programs your program starts). Environment
    variables set in this way will override all the other methods we have just set.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你可以在运行中的程序内设置环境变量，并且它们只会在程序内部（或程序启动的程序）中可用。以这种方式设置的环境变量将覆盖我们刚刚设置的所有其他方法。
- en: These might sound complicated, but we will explain them with a short Python
    script and show how variables can be set in the last three ways (the first method
    depends on what shell you use). The script will also show how environment variables
    are read.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 这些可能听起来很复杂，但我们将通过一个简短的 Python 脚本来解释它们，并展示如何以最后三种方式（第一种方法取决于你使用的 shell）设置变量。脚本还将展示如何读取环境变量。
- en: Environment variables are available in Python using the `os.environ` variable.
    This is a dictionary-like object that can be used to access environment variables
    by name. It is safest to access values using the `get` method just in case they
    are not set. It also provides a `setdefault` method, which allows setting a value
    only if it is not set (that is, it doesn't overwrite an existing key).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，可以使用 `os.environ` 变量访问环境变量。这是一个类似于字典的对象，可以用来通过名称访问环境变量。最安全的方法是使用
    `get` 方法来访问值，以防它们未设置。它还提供了一个 `setdefault` 方法，允许只在未设置值的情况下设置值（即，它不会覆盖现有的键）。
- en: 'Here is the example Python script that reads environment variables:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个读取环境变量的示例 Python 脚本：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'We then set up our shell by setting some variables. In Linux or macOS, we use
    `export` (note there is no output from these commands):'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过设置一些变量来设置我们的 shell。在 Linux 或 macOS 上，我们使用 `export`（注意这些命令没有输出）：
- en: '[PRE1]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In Windows, we would use the `set` command in the command line as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 中，我们会在命令行中使用 `set` 命令如下：
- en: '[PRE2]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In Linux and macOS, we can also provide environment variables by setting them
    before the command (the actual command is just `python3 env_example.py`):'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Linux 和 macOS 上，我们也可以通过在命令之前设置环境变量来提供环境变量（实际命令仅为 `python3 env_example.py`）：
- en: '[PRE3]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Note
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the above command will not work on Windows. For Windows, the environment
    variables must be set before execution and cannot be passed in at the same time.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，上述命令在 Windows 上将无法工作。对于 Windows，环境变量必须在执行之前设置，并且不能同时传递。
- en: 'The output from this command is:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 该命令的输出如下：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: When the script runs `os.environ.setdefault('UNSET_VAR', 'UNSET_VAR_VALUE')`,
    the value is set inside the script, since no value for `UNSET_VAR` was set by
    the shell. The value that is output is the one set by the script itself.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当脚本运行 `os.environ.setdefault('UNSET_VAR', 'UNSET_VAR_VALUE')` 时，由于 shell 没有为
    `UNSET_VAR` 设置值，因此值是在脚本内部设置的。输出的值是脚本本身设置的值。
- en: When `os.environ.setdefault('SET_VAR', 'SET_VAR_VALUE')` is executed, the value
    is not set since one was provided by the shell. This was set with the `export
    SET_VAR="Set Using Export"` command.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当执行 `os.environ.setdefault('SET_VAR', 'SET_VAR_VALUE')` 时，由于 shell 已经提供了一个值，因此该值没有被设置。这是通过
    `export SET_VAR="Set Using Export"` 命令设置的。
- en: The value for `HOME` was not set by any of the commands that were run – this
    is one provided by the shell. It is the user's home directory. This is just an
    example of an environment variable that a shell normally provides.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOME` 的值没有被运行的任何命令设置——这是由 shell 提供的。它是用户的主目录。这只是一个示例，说明 shell 通常提供的环境变量。'
- en: '`VAR1` was set by `export` and was not overridden when executing the script.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VAR1` 是通过 `export` 设置的，在执行脚本时没有被覆盖。'
- en: '`VAR2` was set by `export` but was subsequently overridden when executing the script.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VAR2` 是通过 `export` 设置的，但在执行脚本时被覆盖了。'
- en: '`VAR3` was only set when executing the script.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VAR3` 仅在执行脚本时设置。'
- en: '`VAR4` was never set – we use the `get` method to access it to avoid a `KeyError`.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`VAR4` 从未设置——我们使用 `get` 方法来访问它以避免 `KeyError`。'
- en: Now that environment variables have been covered, we can return to discussing
    the changes that need to be made to `manage.py` to support `django-configurations`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经介绍了环境变量，我们可以回到讨论需要修改 `manage.py` 以支持 `django-configurations` 的更改。
- en: django-configurations
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: django-configurations
- en: One of the main considerations when deploying a Django application to production
    is how to configure it. As you have seen throughout this book, the `settings.py`
    file is where all your Django configuration is defined. Even third-party apps
    have their configuration in this file. You have already seen this in *Chapter
    12*, *Building a REST API*, when working with the Django REST framework.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 将 Django 应用程序部署到生产环境时的主要考虑之一是如何配置它。正如您在本章中看到的，`settings.py` 文件是定义所有 Django 配置的地方。甚至第三方应用程序的配置也在这个文件中。您已经在
    *第 12 章*，*构建 REST API* 中看到过这一点，当时您正在使用 Django REST 框架。
- en: There are many ways to provide different configurations and switch between them
    in Django. If you have begun working on an existing application that already has
    a specific method of switching between configurations in development and production
    environments, then you should probably keep using that method.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Django 中提供不同的配置并在它们之间切换有许多方法。如果您已经开始在一个已经存在并且已经具有在开发和生产环境中切换配置的特定方法的现有应用程序上工作，那么您可能应该继续使用该方法。
- en: When we release Bookr onto a product web server, in *Chapter 17*, *Deployment
    of a Django Application (Part 1 – Server Setup)*, we will need to switch to a
    production configuration, and that's when we will use `django-configurations`.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将 Bookr 部署到产品 web 服务器时，在 *第 17 章*，*Django 应用程序的部署（第 1 部分 – 服务器设置）* 中，我们需要切换到生产配置，那时我们将使用
    `django-configurations`。
- en: 'To install `django-configurations`, use `pip3` as follows:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装 `django-configurations`，请使用以下 `pip3`：
- en: '[PRE5]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Note
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，您可以在前面的命令中使用 `pip` 而不是 `pip3`。
- en: 'The output will be as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 输出将如下所示：
- en: '[PRE6]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '`django-configurations` changes your `settings.py` file so that all the settings are
    read from a class you define, which will be a subclass of `configurations.Configuration`.
    Instead of the settings being global variables inside `settings.py`, they will
    be attributes on the class you define. By using this class-based method, we can
    take advantage of object-oriented paradigms, most notably inheritance. Settings,
    defined in a class, can inherit settings in another class. For example, the production
    settings class can inherit the development settings class and just override some
    specific settings – such as forcing `DEBUG` to `False` in production.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-configurations`更改`settings.py`文件，使得所有设置都从您定义的类中读取，该类将是`configurations.Configuration`的子类。设置不再是`settings.py`内部的全局变量，而是您定义的类上的属性。通过使用基于类的这种方法，我们可以利用面向对象范式，特别是继承。在类中定义的设置可以继承另一个类中的设置。例如，生产设置类可以继承开发设置类，并仅覆盖一些特定的设置——例如在生产中强制`DEBUG`为`False`。'
- en: 'We can illustrate what needs to be done to the settings file by just showing
    the first few settings in the file. A standard Django `settings.py` file normally
    starts like this (comment lines have been removed):'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过仅显示文件中的前几个设置来展示需要对设置文件进行的更改。标准的Django `settings.py`文件通常是这样开始的（已删除注释行）：
- en: '[PRE7]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: To convert the settings to `django-configurations`, first import `Configuration`
    from `configurations`. Then define a `Configuration` subclass. Finally, indent
    all the settings to be under the class. In PyCharm, this is as simple as selecting
    all the settings and pressing *Tab* to indent them all.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 要将设置转换为`django-configurations`，首先从`configurations`导入`Configuration`。然后定义一个`Configuration`子类。最后，将所有要设置的设置缩进到类下。在PyCharm中，这就像选择所有设置并按*Tab*键将它们全部缩进一样简单。
- en: 'After doing this, your `settings.py` file will look like this:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，您的`settings.py`文件将看起来像这样：
- en: '[PRE8]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: To have different configurations (different sets of settings), you can just
    extend your configuration classes and override the settings that should differ.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 要有不同的配置（不同的设置集），您只需扩展您的配置类并覆盖应该不同的设置。
- en: 'For example, one variable that needs overriding in production is `DEBUG`: it
    should be `False` (for security and performance reasons). A `Prod` class can be
    defined that extends `Dev` and sets `DEBUG`, like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在生产环境中需要覆盖的一个变量是`DEBUG`：它应该是`False`（出于安全和性能原因）。可以定义一个扩展`Dev`并设置`DEBUG`的`Prod`类，如下所示：
- en: '[PRE9]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Of course, you can override other production settings too, not just `DEBUG`.
    Usually, for security, you would also redefine `SECRET_KEY` and `ALLOWED_HOSTS`;
    and to configure Django to use your production database, you'd set the `DATABASES`
    value too. Any Django setting can be configured as you choose.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，您也可以覆盖其他生产设置，而不仅仅是`DEBUG`。通常，出于安全考虑，您还可能需要重新定义`SECRET_KEY`和`ALLOWED_HOSTS`；并且为了配置Django使用您的生产数据库，您还需要设置`DATABASES`值。任何Django设置都可以按您选择的方式进行配置。
- en: 'If you try to execute runserver (or other management commands) now, you will
    get an error because Django doesn''t know how to find the `settings.py` file when
    the settings files are laid out like this:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在尝试执行runserver（或其他管理命令），您将得到一个错误，因为Django不知道如何找到这样的`settings.py`文件：
- en: '[PRE10]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We need to make some changes to the `manage.py` file before it starts to work
    again. But before we make them, we'll briefly discuss environment variables, in
    case you haven't used them before.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在`manage.py`文件开始工作之前，我们需要对其进行一些更改。但在我们进行更改之前，我们将简要讨论环境变量，以防您之前没有使用过它们。
- en: manage.py changes
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: manage.py更改
- en: There are two lines that need to be added/changed in `manage.py` to enable `django-configurations`.
    First, we need to define a default environment variable that tells Django Configuration
    which `Configuration` class it should load.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 在`manage.py`中需要添加/更改两行以启用`django-configurations`。首先，我们需要定义一个默认环境变量，告诉Django
    Configuration它应该加载哪个`Configuration`类。
- en: 'This line should be added in the `main()` function to set the default value
    for the `DJANGO_CONFIGURATION` environment variable:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这行应该在`main()`函数中添加，以设置`DJANGO_CONFIGURATION`环境变量的默认值：
- en: '[PRE11]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This sets the default to `Dev` – the name of the class we defined. As we saw
    in our example script, if this value is already defined, it won't be overwritten.
    This will allow us to switch between configurations using an environment variable.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这将默认设置为`Dev`——我们定义的类的名称。正如我们在示例脚本中看到的那样，如果这个值已经定义，它不会被覆盖。这将允许我们通过环境变量在配置之间切换。
- en: 'The second change is to swap the `execute_from_command_line` function with
    one that `django-configurations` provides. Consider the following line:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个更改是将 `execute_from_command_line` 函数与 `django-configurations` 提供的函数交换。考虑以下行：
- en: '[PRE12]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This line is changed as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码的更改如下：
- en: '[PRE13]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'From now on, `manage.py` will work as it did before, except it now prints out
    which `Configuration` class it''s using when it starts (*Figure 15.1*):'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，`manage.py` 将像以前一样工作，只是在启动时它会打印出它正在使用的 `Configuration` 类 (*图15.1*)：
- en: '![Figure 15.1: django-configurations is using the configuration Dev'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.1：django-configurations 正在使用配置 Dev'
- en: '](img/B15509_15_01.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_15_01.jpg)'
- en: 'Figure 15.1: django-configurations is using the configuration Dev'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.1：django-configurations 正在使用配置 Dev
- en: In the second line, you can see `django-configurations` output that is using
    the `Dev` class for settings.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二行中，你可以看到 `django-configurations` 输出正在使用 `Dev` 类进行设置。
- en: Configuration from Environment Variables
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从环境变量配置
- en: As well as switching between `Configuration` classes using environment variables,
    `django-configurations` allows us to give values for individual settings using
    environment variables. It provides `Value` classes that will automatically read
    values from the environment. We can define defaults if no values are provided.
    Since environment variables are always strings, the different `Value` classes
    are used to convert from a string to the specified type.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用环境变量在 `Configuration` 类之间切换之外，`django-configurations` 还允许我们使用环境变量为单个设置提供值。它提供了
    `Value` 类，这些类将自动从环境读取值。如果没有提供值，我们可以定义默认值。由于环境变量始终是字符串，因此不同的 `Value` 类用于将字符串转换为指定的类型。
- en: 'Let''s look at this in practice with a few examples. We will allow `DEBUG`,
    `ALLOWED_HOSTS`, `TIME_ZONE`, and `SECRET_KEY` to be set with environment variables
    as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过几个示例来实际看看这个。我们将允许 `DEBUG`、`ALLOWED_HOSTS`、`TIME_ZONE` 和 `SECRET_KEY` 使用以下环境变量进行设置：
- en: '[PRE14]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We''ll explain the settings one at a time:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将逐个解释设置：
- en: In `Dev`, `DEBUG` is read from an environment variable and cast to a Boolean
    value. The values `yes`, `y`, `true`, and `1` become `True`; the values `no`,
    `n`, `false`, and `0` become `False`. This allows us to run with `DEBUG` off even
    on a development machine, which can be useful in some cases (for example, testing
    a custom exception page rather than Django's default one). In the `Prod` configuration,
    we don't want `DEBUG` to accidentally become `True`, so we set it statically.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `Dev` 中，`DEBUG` 从环境变量中读取并转换为布尔值。值 `yes`、`y`、`true` 和 `1` 转换为 `True`；值 `no`、`n`、`false`
    和 `0` 转换为 `False`。这允许我们在开发机器上关闭 `DEBUG`，这在某些情况下可能很有用（例如，测试自定义异常页面而不是Django的默认页面）。在
    `Prod` 配置中，我们不希望 `DEBUG` 不小心变为 `True`，因此我们将其静态设置。
- en: '`ALLOWED_HOSTS` is required in production. It is a list of hosts for which
    Django should accept requests.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALLOWED_HOSTS` 在生产中是必需的。它是Django应该接受请求的主机列表。'
- en: The `ListValue` class will convert a comma-separated string into a Python list.
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListValue` 类将逗号分隔的字符串转换为Python列表。'
- en: For example, the string `www.example.com,example.com` is converted to `["www.example.com",
    "example.com"]`
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 例如，字符串 `www.example.com,example.com` 转换为 `["www.example.com", "example.com"]`
- en: '`TIME_ZONE` accepts just a string value, so it is set using the `Value` class.
    This class just reads the environment variable and does not transform it at all.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TIME_ZONE` 只接受字符串值，因此它使用 `Value` 类设置。这个类只是读取环境变量，并不对其进行任何转换。'
- en: '`SECRET_KEY` is statically defined in the `Dev` configuration; it can''t be
    changed with an environment variable. In the `Prod` configuration, it is set with
    `SecretValue`. This is like `Value` in that it is just a string setting; however,
    it does not allow a default. If a default is set, then an exception is raised.
    This is to ensure you don''t ever put a secret value into `settings.py`, since
    it might be accidentally shared (for example, uploaded to GitHub). Note that since
    we do not use `SECRET_KEY` for `Dev` in production, we don''t care if it''s leaked.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SECRET_KEY` 在 `Dev` 配置中静态定义；它不能通过环境变量更改。在 `Prod` 配置中，它使用 `SecretValue` 设置。这类似于
    `Value`，因为它只是一个字符串设置；然而，它不允许设置默认值。如果设置了默认值，则会引发异常。这是为了确保你永远不会将秘密值放入 `settings.py`，因为它可能会意外共享（例如，上传到GitHub）。请注意，由于我们不在生产中使用
    `Dev` 的 `SECRET_KEY`，所以我们不关心它是否泄露。'
- en: By default, `django-configurations` expects the `DJANGO_` prefix for each environment
    variable. For example, to set `DEBUG`, use the `DJANGO_DEBUG` environment variable;
    to set `ALLOWED_HOSTS`, use `DJANGO_ALLOWED_HOSTS`, and so on.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，`django-configurations`期望每个环境变量都有`DJANGO_`前缀。例如，要设置`DEBUG`，使用`DJANGO_DEBUG`环境变量；要设置`ALLOWED_HOSTS`，使用`DJANGO_ALLOWED_HOSTS`，依此类推。
- en: Now that we've introduced `django-configurations` and the changes that need
    to be made to the project to support it, let's add it to Bookr and make those
    changes. In the next exercise, you will install and set up `django-configurations`
    in Bookr.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了`django-configurations`以及需要对该项目进行的更改以支持它，让我们将其添加到Bookr并做出这些更改。在下一个练习中，你将在Bookr中安装和设置`django-configurations`。
- en: 'Exercise 15.01: Django Configurations Setup'
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.01：Django配置设置
- en: 'In this exercise, you will install `django-configurations` using `pip`, then
    update `settings.py` to add a `Dev` and `Prod` configuration. You''ll then make
    the necessary changes to `manage.py` to support the new configuration style, and
    test that everything is still working:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将使用`pip`安装`django-configurations`，然后更新`settings.py`以添加`Dev`和`Prod`配置。然后，你将对`manage.py`进行必要的更改以支持新的配置样式，并测试一切是否仍然正常工作：
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `django-configurations` using `pip3`:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，确保你已经激活了`bookr`虚拟环境，然后运行以下命令使用`pip3`安装`django-configurations`：
- en: '[PRE15]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Note
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 对于Windows，你可以在前面的命令中使用`pip`而不是`pip3`。
- en: 'The install process will run, and you should have output like *Figure 15.2*:'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装过程将运行，你应该会有像*图15.2*这样的输出：
- en: '![Figure 15.2: django-configurations installation with pip'
  id: totrans-94
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.2：使用pip安装django-configurations'
- en: '](img/B15509_15_02.jpg)'
  id: totrans-95
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_15_02.jpg)'
- en: 'Figure 15.2: django-configurations installation with pip'
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.2：使用pip安装django-configurations
- en: 'In PyCharm, open `settings.py` inside the `bookr` package. Underneath the existing
    `os` import, import `Configuration` and `values` from `configurations`, like this:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PyCharm中，打开`bookr`包内的`settings.py`。在现有的`os`导入下面，从`configurations`导入`Configuration`和`values`，如下所示：
- en: '[PRE16]'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'After the imports but before your first setting definition (the line that sets
    the `BASE_DIR` value), add a new `Configuration` subclass, called `Dev`:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入之后但在你的第一个设置定义之前（设置`BASE_DIR`值的行），添加一个新的`Configuration`子类，称为`Dev`：
- en: '[PRE17]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now we need to move all the existing settings, so they are attributes of the
    `Dev` class rather than global variables. In PyCharm, this is as simple as selecting
    all the settings, and then pressing the *Tab* key to indent them. After doing
    this, your settings should look as follows:![Figure 15.3: New Dev configuration'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要将所有现有的设置移动，使它们成为`Dev`类的属性而不是全局变量。在PyCharm中，这就像选择所有设置，然后按*Tab*键缩进它们一样简单。完成此操作后，你的设置应该如下所示：![图15.3：新的Dev配置
- en: '](img/B15509_15_03.jpg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_15_03.jpg)'
- en: 'Figure 15.3: New Dev configuration'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.3：新的Dev配置
- en: 'After indenting the settings, we will change some of the settings to be read
    from environment variables. First, change `DEBUG` to be read as `BooleanValue`.
    It should default to `True`. Consider this line:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在缩进设置后，我们将更改一些设置，使其从环境变量中读取。首先，将`DEBUG`更改为以`BooleanValue`读取。它应该默认为`True`。考虑以下行：
- en: '[PRE18]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'And then change it to this:'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其更改为：
- en: '[PRE19]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: This will automatically read `DEBUG` from the `DJANGO_DEBUG` environment variable
    and convert it to a Boolean. If the environment variable is not set, then it will
    default to `True`.
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将自动从`DJANGO_DEBUG`环境变量中读取`DEBUG`并将其转换为布尔值。如果环境变量未设置，则默认为`True`。
- en: 'Also convert `ALLOWED_HOSTS` to be read from an environment variable, using
    the `values.ListValue` class. It should default to `[]` (empty list). Consider
    the following line:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 还将`ALLOWED_HOSTS`转换为从环境变量中读取，使用`values.ListValue`类。它应该默认为`[]`（空列表）。考虑以下行：
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'And change it to this:'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 然后将其更改为：
- en: '[PRE21]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '`ALLOWED_HOSTS` will be read from the `DJANGO_ALLOWED_HOSTS` environment variable,
    and default to an empty list.'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ALLOWED_HOSTS`将从`DJANGO_ALLOWED_HOSTS`环境变量中读取，并默认为空列表。'
- en: 'Everything you have done so far has been adding/changing attributes on the
    `Dev` class. Now, at the end of the same file, add a `Prod` class that inherits
    from `Dev`. It should define two attributes, `DEBUG = True` and `SECRET_KEY =
    values.SecretValue()`. The completed class should look like this:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 到目前为止，你所做的一切都是在`Dev`类上添加/更改属性。现在，在同一文件的末尾，添加一个从`Dev`继承的`Prod`类。它应该定义两个属性，`DEBUG
    = True`和`SECRET_KEY = values.SecretValue()`。完成的类应该看起来像这样：
- en: '[PRE22]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Save `settings.py`.
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存`settings.py`。
- en: If we try to run any management command now, we will receive an error that `django-configurations`
    is not set up properly. We need to make some changes to `manage.py` to make it
    work again. Open `manage.py` in the `bookr` project directory.
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们现在尝试运行任何管理命令，我们将收到一个错误，表明`django-configurations`设置不正确。我们需要对`manage.py`做一些更改才能使其再次工作。在`bookr`项目目录中打开`manage.py`。
- en: 'Consider the line that reads as follows:'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 考虑以下行：
- en: '[PRE23]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Under it, add this line:'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在它下面，添加以下行：
- en: '[PRE24]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This will set the default configuration to the `Dev` class. It can be overridden
    by setting the `DJANGO_CONFIGURATION` environment variable (for example, to `Prod`).
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将默认配置设置为`Dev`类。它可以由设置`DJANGO_CONFIGURATION`环境变量来覆盖（例如，设置为`Prod`）。
- en: 'Two lines below the line from the previous step, you must already have the
    following `import` statement:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在上一步的下一行，你已经有以下`import`语句：
- en: '[PRE25]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Change this to:'
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 将其更改为：
- en: '[PRE26]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Start the Django dev server. If it begins without error, you can be confident
    that the changes you made have worked. To be sure, check that the pages load in
    your browser. Open `http://127.0.0.1:8000/` and try browsing around the site.
    Everything should look and feel as it did before:![Figure 15.4: The Bookr site
    should look and feel as it did before'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动Django开发服务器。如果它没有错误地开始，你可以确信你做的更改已经生效。为了确保这一点，检查页面是否在浏览器中加载。打开`http://127.0.0.1:8000/`并尝试浏览网站。一切应该看起来和感觉都像之前一样：![图15.4：Bookr网站应该看起来和感觉都像之前
- en: '](img/B15509_15_04.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_15_04.jpg)'
- en: 'Figure 15.4: The Bookr site should look and feel as it did before'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.4：Bookr网站应该看起来和感觉都像之前
- en: In this exercise, we installed `django-configurations` and refactored our `settings.py`
    file to use its `Configuration` class to define our settings. We added `Dev` and
    `Prod` configurations and made `DEBUG`, `ALLOWED_HOSTS`, and `SECRET_KEY` settable
    with environment variables. Finally, we updated `manage.py` to use Django Configuration's
    `execute_from_command_line` function, which enabled the use of this new settings.py
    format.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们安装了`django-configurations`并重构了我们的`settings.py`文件，使用其`Configuration`类来定义我们的设置。我们添加了`Dev`和`Prod`配置，并使`DEBUG`、`ALLOWED_HOSTS`和`SECRET_KEY`可以通过环境变量设置。最后，我们更新了`manage.py`以使用Django
    Configuration的`execute_from_command_line`函数，这使得使用新的`settings.py`格式成为可能。
- en: In the next section, we will cover `dj-database-url`, a package that makes it
    possible to configure your Django database settings using URLs.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍`dj-database-url`，这是一个使您能够使用URL配置Django数据库设置的包。
- en: dj-database-url
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: dj-database-url
- en: '`dj-database-url` is another app that helps with the configuration of your
    Django application. Specifically, it allows you to set the database (your Django
    app connects to) using a URL instead of a dictionary of configuration values.
    As you can see in your existing `settings.py` file, the `DATABASES` setting contains
    a couple of items and gets more verbose when using a different database that has
    more configuration options (for username, password, and so on). We can instead
    set these from a URL, which can contain all these values.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`dj-database-url`是另一个帮助配置Django应用程序的app。具体来说，它允许您使用URL而不是配置值的字典来设置数据库（您的Django应用程序连接到）。正如您在现有的`settings.py`文件中可以看到的，`DATABASES`设置包含几个条目，当使用具有更多配置选项的不同数据库（例如用户名、密码等）时，它会变得更加详细。我们可以从URL设置这些值，该URL可以包含所有这些值。'
- en: 'The URL''s format will differ slightly depending on whether you are using a
    local SQLite database or a remote database server. To use SQLite on disk (as Bookr
    is currently), the URL is like this:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您是使用本地SQLite数据库还是远程数据库服务器，URL的格式会有所不同。要使用磁盘上的SQLite（如Bookr目前所做的那样），URL是这样的：
- en: '[PRE27]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Note there are three slashes present. This is because SQLite doesn''t have
    a hostname, so this is like a URL being like this:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 注意这里有三个斜杠。这是因为SQLite没有主机名，所以这就像一个URL是这样的：
- en: '[PRE28]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: That is, the URL has a blank hostname. All three slashes are therefore together.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 即，URL有一个空的主机名。因此，所有三个斜杠都在一起。
- en: 'To build a URL for a remote database server, the format is usually like this:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要为远程数据库服务器构建一个URL，其格式通常是这样的：
- en: '[PRE29]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'For example, to connect to a PostgreSQL database called `bookr_django` on the
    host, `db.example.com`, on port `5432`, with username `bookr` and password `b00ks`,
    the URL would be like this:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，要连接到主机`db.example.com`上的名为`bookr_django`的PostgreSQL数据库，端口为`5432`，用户名为`bookr`，密码为`b00ks`，URL将是这样的：
- en: '[PRE30]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now that we''ve seen the format for URLs, let''s look at how we can actually
    use them in our `settings.py` file. First, `dj-database-url` must be installed
    using `pip3`:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经看到了 URL 的格式，让我们看看如何在 `settings.py` 文件中实际使用它们。首先，必须使用 `pip3` 安装 `dj-database-url`：
- en: '[PRE31]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Note
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，你可以在前面的命令中使用 `pip` 而不是 `pip3`。
- en: 'The output is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 输出如下：
- en: '[PRE32]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now `dj_database_url` can be imported into `settings.py`, and the `dj_database_url.parse`
    method can be used to transform the URL into a dictionary that Django can use.
    We can use its return value to set the `default` (or other) item in the `DATABASES`
    dictionary:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，可以将 `dj_database_url` 导入到 `settings.py` 中，并使用 `dj_database_url.parse` 方法将
    URL 转换为 Django 可以使用的字典。我们可以使用它的返回值来设置 `DATABASES` 字典中的 `default`（或其它）项：
- en: '[PRE33]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Or, for our SQLite database, we can utilize the `BASE_DIR` setting as we are
    already, and include it in the URL:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，对于我们的 SQLite 数据库，我们可以利用已经存在的 `BASE_DIR` 设置，并将其包含在 URL 中：
- en: '[PRE34]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'After parsing, the `DATABASES` dictionary is similar to what we had defined
    before. It includes some redundant items that do not apply to an SQLite database
    (`USER`, `PASSWORD`, `HOST`, and so on), but Django will ignore them:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 解析后，`DATABASES` 字典与我们之前定义的类似。它包括一些不适用于 SQLite 数据库的冗余项（如 `USER`、`PASSWORD`、`HOST`
    等），但 Django 会忽略它们：
- en: '[PRE35]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This method of setting the database connection information is not that useful
    since we are still statically defining the data in `settings.py`. The only difference
    is we are using a URL instead of a dictionary. `dj-database-url` can also automatically
    read the URL from an environment variable. This will allow us to override these
    values by setting them in the environment.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这种设置数据库连接信息的方法并不那么有用，因为我们仍然在 `settings.py` 中静态定义数据。唯一的区别是我们使用 URL 而不是字典。`dj-database-url`
    还可以自动从环境变量中读取 URL。这将允许我们通过在环境中设置它们来覆盖这些值。
- en: 'To read the data from the environment, use the dj_database_url.config function,
    like this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要从环境中读取数据，使用 dj_database_url.config 函数，如下所示：
- en: '[PRE36]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The URL is automatically read from the `DATABASE_URL` environment variable.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: URL 会自动从 `DATABASE_URL` 环境变量中读取。
- en: 'We can improve on this by also providing a `default` argument to the `config`
    function. This is the URL that will be used by default if one is not specified
    in an environment variable:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过向 `config` 函数提供 `default` 参数来改进这一点。这是在没有在环境变量中指定的情况下默认使用的 URL：
- en: '[PRE37]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In this way, we can specify a default URL that can be overridden by an environment
    variable in production.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式，我们可以在生产环境中指定一个可以被环境变量覆盖的默认 URL。
- en: 'We can also specify the environment variable that the URL is read from by passing
    in the `env` argument – this is the first positional argument. In this way, you
    could read multiple URLs for different database settings:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以通过传递 `env` 参数来指定读取 URL 的环境变量——这是第一个位置参数。这样，你可以为不同的数据库设置读取多个 URL：
- en: '[PRE38]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: In this example, the `default` item's URL is read from the `DATABASE_URL` environment
    variable, and `secondary` is read from `DATABASE_URL_SECONDARY`.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，`default` 项的 URL 是从 `DATABASE_URL` 环境变量中读取的，而 `secondary` 是从 `DATABASE_URL_SECONDARY`
    中读取的。
- en: '`django-configurations` also provides a config class that works in tandem with `dj_database_url:
    DatabaseURLValue`. This differs slightly from `dj_database_url.config` in that
    it generates the entire `DATABASES` dictionary including the `default` item. For
    example, consider the following code:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-configurations` 还提供了一个与 `dj_database_url: DatabaseURLValue` 协同工作的配置类。它与
    `dj_database_url.config` 略有不同，因为它生成包括 `default` 项在内的整个 `DATABASES` 字典。例如，考虑以下代码：'
- en: '[PRE39]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This code is the equivalent to the following:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码等同于以下代码：
- en: '[PRE40]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: Do not write `DATABASES['default'] = values.DatabaseURLValue()` as your dictionary
    will be doubly nested.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 不要这样写 `DATABASES['default'] = values.DatabaseURLValue()`，因为你的字典将会嵌套两层。
- en: If you need to specify multiple databases, you will need to fall back to `dj_database_url.config`
    directly rather than using `DatabaseURLValue`.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你需要指定多个数据库，你需要直接回退到使用 `dj_database_url.config` 而不是使用 `DatabaseURLValue`。
- en: 'Like other `values` classes, `DatabaseURLValue` takes a default value as its
    first argument. You might also want to use the `environment_prefix` argument and
    set it to `DJANGO` so that its environment variable being read is consistent in
    naming to the others. A full example of using `DatabaseURLValue` would therefore
    be like this:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他 `values` 类一样，`DatabaseURLValue` 将默认值作为其第一个参数。你可能还希望使用 `environment_prefix`
    参数并将其设置为 `DJANGO`，以便其环境变量名称与其他设置保持一致。因此，使用 `DatabaseURLValue` 的完整示例将如下所示：
- en: '[PRE41]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: By setting the `environment_prefix` like this, we can set the database URL using the
    `DJANGO_DATABASE_URL` environment variable (rather than just `DATABASE_URL`).
    This means it is consistent with other environment variable settings that also
    start with `DJANGO`_, such as `DJANGO_DEBUG` or `DJANGO_ALLOWED_HOSTS`.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样设置 `environment_prefix`，我们可以使用 `DJANGO_DATABASE_URL` 环境变量（而不是仅 `DATABASE_URL`）来设置数据库
    URL。这意味着它与以 `DJANGO` 开头的其他环境变量设置保持一致，例如 `DJANGO_DEBUG` 或 `DJANGO_ALLOWED_HOSTS`。
- en: Note that even though we are not importing `dj-database-url` in `settings.py`,
    `django-configurations` uses it internally, so it still must be installed.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，尽管我们没有在 `settings.py` 中导入 `dj-database-url`，但 `django-configurations` 会内部使用它，因此它仍然必须被安装。
- en: In the next exercise, we will configure Bookr to use DatabaseURLValue to set
    its database configuration. It will be able to read from an environment variable
    and fall back to a default we specify.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将配置 Bookr 以使用 DatabaseURLValue 来设置其数据库配置。它将能够从环境变量中读取，并在我们指定的默认值回退。
- en: 'Exercise 15.02: dj-database-url and Setup'
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.02：dj-database-url 和设置
- en: 'In this exercise, we will install `dj-database-url` using `pip3`. Then we will
    update Bookr''s `settings.py` to configure the `DATABASE` setting using a URL,
    which is read from an environment variable:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将使用 `pip3` 安装 `dj-database-url`。然后，我们将更新 Bookr 的 `settings.py` 文件以使用
    URL 配置 `DATABASE` 设置，该 URL 从环境变量中读取：
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `dj-database-url` using `pip3`:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，确保你已经激活了 `bookr` 虚拟环境，然后运行以下命令使用 `pip3` 安装 `dj-database-url`：
- en: '[PRE42]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The install process will run, and you should have output similar to this:'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装过程将运行，你应该有类似的输出：
- en: '![Figure 15.5: dj-database-url installation with pip'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 15.5：使用 pip 安装 dj-database-url](img/B15509_15_05.jpg)'
- en: '](img/B15509_15_05.jpg)'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_15_05.jpg)'
- en: 'Figure 15.5: dj-database-url installation with pip'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图 15.5：使用 pip 安装 dj-database-url
- en: 'In PyCharm, open `settings.py` in the `bookr` package directory. Scroll down
    to find where the `DATABASES` attribute is being defined. Replace it with the
    `values.DatabaseURLValue` class. The first argument (default value) should be
    the URL to the SQLite database: `''sqlite:///{}/db.sqlite3''.format(BASE_DIR)`.
    Also pass in `environ_prefix`, set to `DJANGO`. After completing this step, you
    should be setting the attribute like this:'
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyCharm 中，打开 `bookr` 包目录中的 `settings.py` 文件。向下滚动以找到定义 `DATABASES` 属性的位置。将其替换为
    `values.DatabaseURLValue` 类。第一个参数（默认值）应该是 SQLite 数据库的 URL：`'sqlite:///{}/db.sqlite3'.format(BASE_DIR)`。同时传递
    `environ_prefix`，设置为 `DJANGO`。完成此步骤后，你应该像这样设置属性：
- en: '[PRE43]'
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Save `settings.py`.
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存 `settings.py`。
- en: 'Start the Django dev server. As with *Exercise 15.01*, *Django Configurations
    Setup*, if it starts fine, you can be confident that your change was successful.
    To be sure, open `http://127.0.0.1:8000/` in a browser and check that everything
    looks and behaves as it did before. You should visit a page that queries from
    the database (such as the `Books List` page) and check that a list of books is displayed:![Figure
    15.6: Bookr pages with database queries still work'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Django 开发服务器。与 *练习 15.01*，*Django 配置设置* 一样，如果启动正常，你可以确信你的更改是成功的。为了确保，请在浏览器中打开
    `http://127.0.0.1:8000/` 并检查一切看起来和之前一样。你应该访问一个查询数据库的页面（例如 `Books List` 页面），并检查是否显示了一本书的列表：![图
    15.6：Bookr 页面中的数据库查询仍然有效](img/B15509_15_06.jpg)
- en: '](img/B15509_15_06.jpg)'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/B15509_15_06.jpg)'
- en: 'Figure 15.6: Bookr pages with database queries still work'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.6：Bookr 页面中的数据库查询仍然有效
- en: In this exercise, we updated our `settings.py` to determine its `DATABASES`
    setting from a URL specified in an environment variable. We used the `values.DatabaseURLValue`
    class to automatically read the value, and provided a default URL. We also set
    the `environ_prefix` argument to `DJANGO` so that the environment variable name
    is `DJANGO_DATABASE_URL`, which is consistent with other settings.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们更新了我们的 `settings.py` 文件，使其从环境变量中指定的 URL 确定其 `DATABASES` 设置。我们使用了 `values.DatabaseURLValue`
    类来自动读取值，并提供了默认 URL。我们还设置了 `environ_prefix` 参数为 `DJANGO`，以便环境变量名称为 `DJANGO_DATABASE_URL`，这与其他设置保持一致。
- en: In the next section, we will take a tour of the Django Debug Toolbar, an app
    that helps you debug your Django applications through the browser.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将游览Django调试工具栏，这是一个通过浏览器帮助你调试Django应用程序的应用程序。
- en: The Django Debug Toolbar
  id: totrans-192
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django调试工具栏
- en: 'The Django Debug Toolbar is an app that displays debug information about a
    web page right in your browser. It includes information about what SQL commands
    were run to generate the page, the request and response headers, how long the
    page took to render, and more. These can be useful if:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: Django调试工具栏是一个应用，它直接在你的浏览器中显示有关网页的调试信息。它包括有关生成页面的SQL命令、请求和响应头信息、页面渲染所需时间等信息。这些信息在以下情况下可能很有用：
- en: '*A page is taking a long time to load – maybe it is running too many database
    queries.* You can see if the same queries are being run multiple times, in which
    case you could consider caching. Otherwise, some queries may be sped up by adding
    an index to the database.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*页面加载时间过长 – 可能是因为运行了太多的数据库查询*。你可以查看是否运行了相同的查询多次，在这种情况下，你可以考虑使用缓存。否则，通过在数据库中添加索引，一些查询可能会加快速度。'
- en: '*You want to determine why a page is returning the wrong information.* Your
    browser may have sent headers you did not expect, or maybe some headers from Django
    are incorrect.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*你想要确定为什么页面返回错误信息*。你的浏览器可能发送了你没有预料到的头信息，或者可能是Django的一些头信息不正确。'
- en: '*Your page is slow because it is spending time in non-database code* – you
    can profile the page to see what functions are taking the longest.'
  id: totrans-196
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*你的页面运行缓慢，因为它在非数据库代码中花费了时间* – 你可以分析页面以查看哪些函数耗时最长。'
- en: '*The page looks incorrect.* You can see what templates Django rendered. There
    might be a third-party template that is being rendered unexpectedly. You can also
    check all the settings that are being used (including the built-in Django ones
    that we are not setting). This can help to pinpoint a setting that is incorrect
    and causing the page to not behave correctly.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*页面看起来不正确*。你可以看到Django渲染了哪些模板。可能有一个意外的第三方模板正在被渲染。你还可以检查所有正在使用的设置（包括我们未设置的内置Django设置）。这有助于确定错误的设置，导致页面行为不正确。'
- en: 'We''ll explain how to use the Django Debug Toolbar to see this information.
    Before diving into how to set up the Django Debug Toolbar and how to use it, let''s
    take a quick look at it. The toolbar is shown on the right of the browser window
    and can be toggled open and closed to display information:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将解释如何使用Django调试工具栏来查看这些信息。在深入探讨如何设置Django调试工具栏以及如何使用它之前，让我们快速看一下它。工具栏显示在浏览器窗口的右侧，可以切换打开和关闭以显示信息：
- en: '![Figure 15.7: The Django Debug Toolbar closed'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.7：Django调试工具栏已关闭'
- en: '](img/B15509_15_07.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_15_07.jpg)'
- en: 'Figure 15.7: The Django Debug Toolbar closed'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7：Django调试工具栏已关闭
- en: 'The preceding figure shows the Django Debug Toolbar in its closed state. Notice
    the toggle bar in the top-right corner of the window. Clicking the toolbar opens
    it:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的图显示了Django调试工具栏在关闭状态下的样子。注意窗口右上角的切换栏。点击工具栏可以打开它：
- en: '![Figure 15.8: The Django Debug Toolbar open'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.8：Django调试工具栏已打开'
- en: '](img/B15509_15_08.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_15_08.jpg)'
- en: 'Figure 15.8: The Django Debug Toolbar open'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8：Django调试工具栏已打开
- en: '*Figure 15.8* shows the Django Debug Toolbar open.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.8*显示了Django调试工具栏已打开。'
- en: 'Installing the Django Debug Toolbar is done using `pip`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`pip`安装Django调试工具栏：
- en: '[PRE44]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Note
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，你可以在前面的命令中使用`pip`而不是`pip3`。
- en: 'Then there are a few steps to set it up, mostly by making changes to `settings.py`:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 然后有一些步骤来设置它，主要是通过修改`settings.py`：
- en: Add `debug_toolbar` to the `INSTALLED_APPS` settings list.
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`debug_toolbar`添加到`INSTALLED_APPS`设置列表中。
- en: Add `debug_toolbar.middleware.DebugToolbarMiddleware` to the `MIDDLEWARE` settings
    list. It should be done as early as possible; for Bookr, it can be the first item
    in this list. This is the middleware that all requests and responses pass through.
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`debug_toolbar.middleware.DebugToolbarMiddleware`添加到`MIDDLEWARE`设置列表中。应尽可能早地进行此操作；对于Bookr，它可以是此列表中的第一项。这是所有请求和响应都必须通过的中介。
- en: Add `'127.0.0.1'` to the `INTERNAL_IPS` settings list (this setting may have
    to be created). The Django Debug Toolbar will only show for IP addresses listed here.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`'127.0.0.1'`添加到`INTERNAL_IPS`设置列表中（此设置可能需要创建）。Django调试工具栏将只显示在此列表中列出的IP地址。
- en: 'Add the Django Debug Toolbar URLs to the base `urls.py` file. We want to add
    this mapping only if we are in `DEBUG` mode:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Django调试工具栏的URL添加到基本`urls.py`文件中。我们只想在`DEBUG`模式下添加此映射：
- en: '[PRE45]'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In the next exercise, we will go through these steps in detail.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个练习中，我们将详细讲解这些步骤。
- en: Once the Django Debug Toolbar is installed and set up, any page you visit will
    show the DjDT sidebar (you can open or close it using the DjDT menu). When it's
    open, you'll be able to see another set of sections that you can click on to get
    more information.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装并设置了Django调试工具栏，您访问的任何页面都会显示DjDT侧边栏（您可以使用DjDT菜单打开或关闭它）。当它打开时，您将能够看到另一组可以点击以获取更多信息的部分。
- en: 'Each panel has a checkbox next to it, this allows you to enable or disable
    the collection of that metric. Each metric that is collected will slightly slow
    down the page load (although, usually, this is not noticeable). If you find that
    one metric collection is slow, you can turn it off here:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 每个面板旁边都有一个复选框，这允许您启用或禁用该指标的收集。收集的每个指标都会略微减慢页面加载速度（尽管通常这是不明显的感觉）。如果您发现某个指标的收集速度较慢，您可以在这里将其关闭：
- en: 'We''ll go through each panel. The first is `Versions`, which shows the version
    of Django running. You can click it to open a large `Versions` display, which
    will also show the version of Python and the Django Debug Toolbar (*Figure 15.9*):![Figure
    15.9: DjDT Versions panel (screenshot cropped for brevity)'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '我们将逐一介绍每个面板。第一个是`版本`，它显示了正在运行的Django版本。您可以点击它打开一个大的`版本`显示，它还将显示Python版本和Django调试工具栏（*图15.9*）：![图15.9:
    DjDT 版本面板（为了简洁，截图已裁剪）'
- en: '](img/B15509_15_09.jpg)'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_09.jpg)'
- en: 'Figure 15.9: DjDT Versions panel (screenshot cropped for brevity)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图15.9: DjDT 版本面板（为了简洁，截图已裁剪）'
- en: 'The second panel is `Time`, which shows how long it took to process the request.
    It is broken down into system time and user time as well (*Figure 15.10*):![Figure
    15.10: DjDT Time panel'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '第二个面板是`时间`，它显示了处理请求所需的时间。它被细分为系统时间和用户时间（*图15.10*）：![图15.10: DjDT 时间面板'
- en: '](img/B15509_15_10.jpg)'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_10.jpg)'
- en: 'Figure 15.10: DjDT Time panel'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图15.10: DjDT 时间面板'
- en: The differences between these are beyond the scope of this book but, basically,
    system time is time spent in the kernel (for example, doing network or file reading/writing)
    and user time is code that is outside the operating system kernel (this includes
    the code you've written in Django, Python, and so on).
  id: totrans-226
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这些设置之间的区别超出了本书的范围，但基本上，系统时间是花费在内核中的时间（例如，进行网络或文件读写操作），而用户时间是位于操作系统内核之外（这包括你在Django、Python等中编写的代码）。
- en: Also shown is time spent in the browser, such as the time taken to get the request
    and how long it took to render the page.
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 还显示了在浏览器中花费的时间，例如获取请求所需的时间和渲染页面所需的时间。
- en: 'The third panel, `Settings`, shows all the settings your application is using
    (*Figure 15.11*):![Figure 15.11: DjDT Settings panel'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '第三部分，`设置`，显示了应用程序使用的所有设置（*图15.11*）：![图15.11: DjDT 设置面板'
- en: '](img/B15509_15_11.jpg)'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_11.jpg)'
- en: 'Figure 15.11: DjDT Settings panel'
  id: totrans-230
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图15.11: DjDT 设置面板'
- en: This is useful because it shows both your settings from `settings.py` and the
    default Django settings.
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这很有用，因为它显示了来自`settings.py`的设置和默认的Django设置。
- en: 'The fourth panel is `Headers` (*Figure 15.12*). It shows the headers of the
    request the browser made, and the response headers that Django has sent:![Figure
    15.12: DjDT Headers panel'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '第四个面板是`标头`（*图15.12*）。它显示了浏览器发出的请求的标头以及Django发送的响应标头：![图15.12: DjDT 标头面板'
- en: '](img/B15509_15_12.jpg)'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_12.jpg)'
- en: 'Figure 15.12: DjDT Headers panel'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图15.12: DjDT 标头面板'
- en: 'The fifth panel, `Request`, shows the view that generated the response, and
    the args and kwargs it was called with (*Figure 15.13*). You can also see the
    name of the URL used in its URL map:![Figure 15.13: DjDT Request panel (some panels
    not shown for brevity)'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '第五部分，`请求`，显示了生成响应的视图以及调用时使用的参数和关键字参数（*图15.13*）。您还可以看到在其URL映射中使用的URL名称：![图15.13:
    DjDT 请求面板（为了简洁，一些面板未显示）'
- en: '](img/B15509_15_13.jpg)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_13.jpg)'
- en: 'Figure 15.13: DjDT Request panel (some panels not shown for brevity)'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图15.13: DjDT 请求面板（为了简洁，一些面板未显示）'
- en: It also shows the request's cookies, information stored in the session (sessions
    were introduced in *Chapter 8*, *Media Serving and File Upload*) as well as the
    `request.GET` and `request.POST` data.
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它还显示了请求的cookie、存储在会话中的信息（会话在*第8章*，*媒体服务和文件上传*中介绍）以及`request.GET`和`request.POST`数据。
- en: 'The sixth panel, `SQL`, shows all the SQL database queries that were executing
    when building the response (Figure 15.14):![Figure 15.14: DjDT SQL panel'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '第六部分，`SQL`，显示了在构建响应时正在执行的SQL数据库查询（图15.14）：![图15.14: DjDT SQL面板'
- en: '](img/B15509_15_14.jpg)'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_14.jpg)'
- en: 'Figure 15.14: DjDT SQL panel'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '图15.14: DjDT SQL面板'
- en: You can see how long each query took to execute and in what order they were
    executed. It also flags similar and duplicate queries so you can potentially refactor
    your code to remove them.
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以看到每个查询执行所需的时间以及它们的执行顺序。它还会标记相似和重复的查询，以便您可能重构代码以删除它们。
- en: Each `SELECT` query displays two action buttons, `Sel`, short for select, and
    `Expl`, short for explain. These do not show up for `INSERT`, `UDPATE`, or `DELETE` queries.
  id: totrans-243
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 每个`SELECT`查询显示两个操作按钮，`Sel`，代表选择，和`Expl`，代表解释。这些按钮对于`INSERT`、`UDPATE`或`DELETE`查询不会显示。
- en: 'The `Sel` button shows the `SELECT` statement that was executed and all the
    data that was retrieved for the query (*Figure 15.15*):'
  id: totrans-244
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “Sel”按钮显示了执行的`SELECT`语句以及查询检索的所有数据（*图15.15*）：
- en: '![Figure 15.15: DjDT SQL Select panel'
  id: totrans-245
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.15：DjDT SQL选择面板'
- en: '](img/B15509_15_15.jpg)'
  id: totrans-246
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_15.jpg]'
- en: 'Figure 15.15: DjDT SQL Select panel'
  id: totrans-247
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.15：DjDT SQL选择面板
- en: 'The `Expl` button shows the `EXPLAIN` query for the `SELECT` query (*Figure 15.16*):'
  id: totrans-248
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: “Expl”按钮显示了`SELECT`查询的`EXPLAIN`查询（*图15.16*）：
- en: '![Figure 15.16: DjDT SQL Explain panel (some panels not shown for brevity)'
  id: totrans-249
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.16：DjDT SQL解释面板（部分面板因简洁性未显示）]'
- en: '](img/B15509_15_16.jpg)'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_16.jpg]'
- en: 'Figure 15.16: DjDT SQL Explain panel (some panels not shown for brevity)'
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.16：DjDT SQL解释面板（部分面板因简洁性未显示）
- en: '`EXPLAIN` queries are beyond the scope of the book, but they basically show
    how the database tried to execute the `SELECT` query, for example, what database
    indexes were used. You might find that a query does not use an index and you can
    therefore get faster performance by adding one.'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`EXPLAIN`查询超出了本书的范围，但它们基本上显示了数据库如何尝试执行`SELECT`查询，例如，使用了哪些数据库索引。您可能会发现查询没有使用索引，因此您可以通过添加一个索引来获得更快的性能。'
- en: 'The seventh panel is `Static files`, and it shows you which static files were
    loaded in this request (*Figure 15.17*). It also shows you all the static files
    that are available and how they would be loaded (that is, which static file finder
    found them). The `Static files` panel''s information is like the information you
    can get from the `findstatic` management command:![Figure 15.17: DjDT Static panel'
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第七个面板是“静态文件”，显示了在此请求中加载的静态文件（*图15.17*）。它还显示了所有可用的静态文件以及它们如何被加载（即哪个静态文件查找器找到了它们）。静态文件面板的信息类似于您可以从`findstatic`管理命令中获得的信息：![图15.17：DjDT静态面板
- en: '](img/B15509_15_17.jpg)'
  id: totrans-254
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_17.jpg]'
- en: 'Figure 15.17: DjDT Static panel'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.17：DjDT静态面板
- en: 'The eighth panel, `Templates`, shows information about the templates that were
    rendered (*Figure 15.18*):![Figure 15.18: DjDT Templates panel'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第八个面板是“模板”，显示了已渲染的模板信息（*图15.18*）：![图15.18：DjDT模板面板
- en: '](img/B15509_15_18.jpg)'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_18.jpg]'
- en: 'Figure 15.18: DjDT Templates panel'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.18：DjDT模板面板
- en: It shows the paths the templates were loaded from and the inheritance chain.
  id: totrans-259
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 它显示了模板加载的路径和继承链。
- en: 'The ninth panel, `Cache`, shows information about data fetched from Django''s cache:![Figure
    15.19: DjDT Cache panel (some panels not shown for brevity)'
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第九个面板是“缓存”，显示了从Django缓存中检索的数据信息（*图15.19*）：![图15.19：DjDT缓存面板（部分面板因简洁性未显示）
- en: '](img/B15509_15_19.jpg)'
  id: totrans-261
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_19.jpg]'
- en: 'Figure 15.19: DjDT Cache panel (some panels not shown for brevity)'
  id: totrans-262
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.19：DjDT缓存面板（部分面板因简洁性未显示）
- en: Since we aren't using caching in Bookr, this section is blank. If we were, we
    would be able to see how many requests to the cache had been made, and how many
    of those requests were successful in retrieving items. We would also see how many
    items had been added to the cache. This can give you an idea about whether you
    are using the cache effectively or not. If you are adding a lot of items to the
    cache but not retrieving any, then you should reconsider what data you are caching.
    On the contrary, if you have a lot of `Cache misses` (a miss is when you request
    data that is not in the cache), then you should be caching more data than you
    are already.
  id: totrans-263
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于我们在Bookr中没有使用缓存，因此本节为空白。如果我们使用缓存，我们将能够看到对缓存发出的请求数量，以及成功检索到项目请求的数量。我们还将看到添加到缓存中的项目数量。这可以给您一个关于您是否有效地使用缓存的线索。如果您添加了大量项目到缓存但未检索任何内容，那么您应该重新考虑您要缓存的哪些数据。相反，如果您有很多“缓存未命中”（未命中是指请求不在缓存中的数据），那么您应该比现在缓存更多的数据。
- en: 'The tenth panel is `Signals`, which shows information about Django signals
    (*Figure 15.20*):![Figure 15.20: DjDT Signals panel (some panels not shown for
    brevity)'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第十个面板是“信号”，显示了有关Django信号的信息（*图15.20*）：![图15.20：DjDT信号面板（部分面板因简洁性未显示）
- en: '](img/B15509_15_20.jpg)'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_20.jpg]'
- en: 'Figure 15.20: DjDT Signals panel (some panels not shown for brevity)'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.20：DjDT信号面板（为简洁起见，一些面板未显示）
- en: While we don't cover signals in this book, they are like events that you can
    hook into to execute functions when Django does something; for example, if a user
    is created, send them a welcome email. This section shows which signals were sent
    and which functions received them.
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 尽管我们在这本书中没有涵盖信号，但它们类似于你可以挂钩的事件，当Django执行某些操作时可以执行函数；例如，如果创建了一个用户，可以发送欢迎邮件。本节显示了哪些信号被发送以及哪些函数接收了它们。
- en: 'The eleventh panel, `Logging`, shows log messages that were generated by your
    Django app (*Figure 15.21*):![Figure 15.21: DjDT Logging panel'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第十一个面板“日志”显示了由你的Django应用程序生成的日志消息（如图15.21所示）：![图15.21：DjDT日志面板
- en: '](img/B15509_15_21.jpg)'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_21.jpg](img/B15509_15_21.jpg)'
- en: 'Figure 15.21: DjDT Logging panel'
  id: totrans-270
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.21：DjDT日志面板
- en: Since no log messages were generated in this request, this panel is empty.
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 由于此请求没有生成日志消息，此面板为空。
- en: 'The next option, `Intercept redirects`, is not a section with data. Instead,
    it lets you toggle redirect interception. If your view returns a redirect, it
    will not be followed. Instead, a page like *Figure 15.22* is displayed:'
  id: totrans-272
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 下一个选项“拦截重定向”不是一个包含数据的部分。相反，它允许你切换重定向拦截。如果你的视图返回重定向，它将不会跟随。相反，会显示一个类似于*图15.22*的页面：
- en: '![Figure 15.22: A redirect that DjDT has intercepted'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.22：DjDT拦截的重定向'
- en: '](img/B15509_15_22.jpg)'
  id: totrans-274
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_22.jpg](img/B15509_15_22.jpg)'
- en: 'Figure 15.22: A redirect that DjDT has intercepted'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.22：DjDT拦截的重定向
- en: This allows you to open the Django Debug Toolbar for the view that generated
    the redirect – otherwise, you'd only be able to see the information for the view
    that you were redirected to.
  id: totrans-276
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这允许你为生成重定向的视图打开Django调试工具栏——否则，你只能看到你被重定向到的视图的信息。
- en: 'The final panel is `Profiling`. This is off by default as profiling can slow
    down your response quite a lot. Once it is turned on, you must refresh the page
    to generate the profiling information (shown in *Figure 15.23*):![Figure 15.23:
    DjDT Profiling panel'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后一个面板是“分析”。默认情况下它是关闭的，因为分析可能会大大减慢你的响应速度。一旦打开，你必须刷新页面以生成分析信息（如图15.23所示）：![图15.23：DjDT分析面板
- en: '](img/B15509_15_23.jpg)'
  id: totrans-278
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/B15509_15_23.jpg](img/B15509_15_23.jpg)'
- en: 'Figure 15.23: DjDT Profiling panel'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.23：DjDT分析面板
- en: 'The information shown here is a breakdown of how long each function call in
    your response took. The left of the page shows a stack trace of all the calls
    performed. On the right are columns with timing data. The columns are:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示的信息是关于你的响应中每个函数调用所花费时间的分解。页面左侧显示了所有执行的调用堆栈跟踪。右侧是包含时间数据的列。列包括：
- en: '**CumTime**: The cumulative amount of time spent in the function and any sub-functions
    it calls'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**CumTime**：在函数及其调用的任何子函数中花费的总时间'
- en: '`Count`)'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Count`)'
- en: '**TotTime**: The amount of time spent in this function but not in any sub-function
    it calls'
  id: totrans-283
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**TotTime**：在此函数中花费的时间（不包括它调用的任何子函数）'
- en: '`Count`)'
  id: totrans-284
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Count`)'
- en: '**Calls**: The number of calls of this function'
  id: totrans-285
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**调用次数**：此函数的调用次数'
- en: This information can help you determine where to speed up your app. For example,
    it can be easier to speed up a function that is called 1,000 times by a small
    fraction, than to optimize a large function that is only called once. Any more
    in-depth tips on how to speed up your code are beyond the scope of this book.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信息可以帮助你确定在哪里加快你的应用程序。例如，优化一个被调用1000次的小函数可能比优化一个只被调用一次的大函数更容易。关于如何加快代码的更深入的建议超出了本书的范围。
- en: 'Exercise 15.03: Setting Up the Django Debug Toolbar'
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习15.03：设置Django调试工具栏
- en: 'In this exercise, you will add the Django Debug Toolbar settings by modifying
    the `INSTALLED_APPS`, `MIDDLEWARE`, and `INTERNAL_IPS` settings. Then you''ll
    add the `debug_toolbar.urls` map to the `bookr` package''s `urls.py`. Then you
    will load a page with the Django Debug Toolbar in a browser and use it:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你将通过修改`INSTALLED_APPS`、`MIDDLEWARE`和`INTERNAL_IPS`设置来添加Django调试工具栏设置。然后你将添加`debug_toolbar.urls`映射到`bookr`包的`urls.py`。然后你将在浏览器中加载一个带有Django调试工具栏的页面并使用它：
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install the Django Debug Toolbar using `pip3`:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，确保您已激活了`bookr`虚拟环境，然后运行以下命令使用`pip3`安装Django调试工具栏：
- en: '[PRE46]'
  id: totrans-290
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This will allow Django to find the Django Debug Toolbar's static files.
  id: totrans-291
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许Django找到Django调试工具栏的静态文件。
- en: 'Add `debug_toolbar.middleware.DebugToolbarMiddleware` to the `MIDDLEWARE` setting
    – it should be the first item in the list:'
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`debug_toolbar.middleware.DebugToolbarMiddleware`添加到`MIDDLEWARE`设置中——它应该是列表中的第一项：
- en: '[PRE47]'
  id: totrans-293
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: This will route requests and responses through `DebugToolbarMiddleware`, allowing
    the Django Debug Toolbar to inspect the request and insert its HTML into the response.
  id: totrans-294
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将使请求和响应通过`DebugToolbarMiddleware`路由，允许Django调试工具栏检查请求并将其HTML插入到响应中。
- en: 'The final setting to add is to add the address `127.0.0.1` to `INTERNAL_IPS`.
    You will not yet have an `INTERNAL_IPS` setting defined, so add this as a setting:'
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 需要添加的最后一个设置是将地址`127.0.0.1`添加到`INTERNAL_IPS`。您可能还没有定义`INTERNAL_IPS`设置，所以添加如下设置：
- en: '[PRE48]'
  id: totrans-296
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This will make the Django Debug Toolbar only show up on the developer's computer.
    You can now save `settings.py`.
  id: totrans-297
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将使Django调试工具栏仅在开发者的计算机上显示。现在您可以保存`settings.py`。
- en: 'We now need to add the Django Debug Toolbar URLs. Open `urls.py` in the `bookr`
    package directory. We already have an `if` condition that checks for `DEBUG` mode
    then adds the media URL like so:'
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要添加Django调试工具栏的URL。在`bookr`包目录中打开`urls.py`。我们已经有了一个检查`DEBUG`模式的`if`条件，然后添加了媒体URL，如下所示：
- en: '[PRE49]'
  id: totrans-299
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'We will also add an `include` of `debug_toolbar.urls` inside this `if` statement,
    however, we will add it to the start of `urlpatterns` rather than appending it
    to the end. Add this code inside the `if` statement:'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 我们还将在这个`if`语句内添加`debug_toolbar.urls`的`include`，但是我们将将其添加到`urlpatterns`的开始处，而不是追加到末尾。在`if`语句内添加以下代码：
- en: '[PRE50]'
  id: totrans-301
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Save `urls.py`.
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 保存`urls.py`。
- en: 'Start the Django dev server if it is not already running and navigate to `http://127.0.0.1:8000`.
    You should see the Django Debug Toolbar open. If it is not open, click the `DjDT`
    toggle button at the top-right to open it:![Figure 15.25: DjDT toggle shown in
    the corner'
  id: totrans-303
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果Django开发服务器尚未运行，请启动它并导航到`http://127.0.0.1:8000`。您应该看到Django调试工具栏已打开。如果没有打开，请点击右上角的`DjDT`切换按钮打开它：![图15.25：DjDT切换按钮显示在角落
- en: '](img/B15509_15_25.jpg)'
  id: totrans-304
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_25.jpg)'
- en: 'Figure 15.25: DjDT toggle shown in the corner'
  id: totrans-305
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.25：DjDT切换按钮显示在角落
- en: 'Try going through some of the panels and visiting different pages to see what
    information you can find out. Try also turning on `Intercept redirects` and then
    create a new book review. After submitting the form, you should see the intercepted
    page rather than being redirected to the new review (*Figure 15.26*):![Figure
    15.26: The redirect intercept page after submitting a new review'
  id: totrans-306
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试浏览一些面板并访问不同的页面，看看您可以找到哪些信息。还可以尝试开启`拦截重定向`，然后创建一个新的书评。提交表单后，您应该看到被拦截的页面而不是被重定向到新的评论页面（*图15.26*）：![图15.26：提交新评论后的重定向拦截页面
- en: '](img/B15509_15_26.jpg)'
  id: totrans-307
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_26.jpg)'
- en: 'Figure 15.26: The redirect intercept page after submitting a new review'
  id: totrans-308
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.26：提交新评论后的重定向拦截页面
- en: You can then click the `Location` link to go to the page that it was being redirected
    to.
  id: totrans-309
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以点击`位置`链接跳转到它被重定向到的页面。
- en: You can also try turning on `Profiling` and see which functions are being called
    a lot and which are taking up most of the rendering time.
  id: totrans-310
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以尝试开启`性能分析`并查看哪些函数被频繁调用以及哪些函数占据了大部分渲染时间。
- en: Once you are finished experimenting with the Django Debug Toolbar, turn off
    `Intercept redirects` and `Profiling`.
  id: totrans-311
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦您完成对Django调试工具栏的实验，请关闭`拦截重定向`和`性能分析`。
- en: In this exercise, we installed and set up the Django Debug Toolbar by adding
    settings and URL maps. We then saw it in action and examined the useful information
    it can give us, including how to work with redirects and see profiling information.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们通过添加设置和URL映射来安装和设置Django调试工具栏。然后我们看到了它的实际应用，并检查了它可以给我们提供的有用信息，包括如何处理重定向和查看性能分析信息。
- en: In the next section, we will look at the `django-crispy-forms` app, which will
    let us reduce the amount of code needed to write forms.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将查看`django-crispy-forms`应用程序，它将使我们减少编写表单所需的代码量。
- en: django-crispy-forms
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: django-crispy-forms
- en: In Bookr, we are using the Bootstrap CSS framework. It provides styles that
    can be applied to forms using CSS classes. Since Django is independent of Bootstrap,
    when we use Django forms, it does not even know that we are using Bootstrap and
    so has no idea of what classes to apply to form widgets.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 在Bookr中，我们使用Bootstrap CSS框架。它提供了一些CSS类，可以应用于表单。由于Django独立于Bootstrap，当我们使用Django表单时，它甚至不知道我们正在使用Bootstrap，因此不知道应该将哪些类应用于表单小部件。
- en: '`django-crispy-forms` acts as an intermediary between Django Forms and Bootstrap
    forms. It can take a Django form and render it with the correct Bootstrap elements
    and classes. It not only supports Bootstrap but also other frameworks such as
    `crispy-forms-foundation`).'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-crispy-forms`在Django表单和Bootstrap表单之间充当中间件。它可以接受Django表单并将其渲染为正确的Bootstrap元素和类。它不仅支持Bootstrap，还支持其他框架，如`crispy-forms-foundation`）。'
- en: 'Its installation and setup are quite simple. Once again, it is installed with
    `pip3`:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 它的安装和设置相当简单。再次强调，它是通过`pip3`安装的：
- en: '[PRE51]'
  id: totrans-318
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Note
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 对于Windows，你可以在前面的命令中使用`pip`而不是`pip3`。
- en: 'Then there are just a couple of settings changes. First, add `crispy_forms`
    to your `INSTALLED_APPS`. Then, you need to tell `django-crispy-forms` what framework
    you are using, so it loads the correct templates. This is done with the `CRISPY_TEMPLATE_PACK`
    setting. In our case, it should be set to `bootstrap4`:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，只需进行几项设置更改。首先，将`crispy_forms`添加到你的`INSTALLED_APPS`中。然后，你需要告诉`django-crispy-forms`你正在使用哪个框架，以便它加载正确的模板。这是通过`CRISPY_TEMPLATE_PACK`设置完成的。在我们的例子中，它应该设置为`bootstrap4`：
- en: '[PRE52]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '`django-crispy-forms` has two main modes of operation, either as a filter or
    a template tag. The former is easier to drop into an existing template. The latter
    allows more configuration options and moves more of the HTML generation into the
    `Form` class. We''ll look at both of these in order.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-crispy-forms`有两种主要的工作模式，要么作为过滤器，要么作为模板标签。前者更容易插入到现有的模板中。后者提供了更多的配置选项，并将更多的HTML生成移动到`Form`类中。我们将依次查看这两种方法。'
- en: The crispy Filter
  id: totrans-324
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Crispy过滤器
- en: 'The first method of rendering a form with `django-crispy-forms` is by using
    the `crispy` template. First, the filter must be loaded in the template. The library
    name is `crispy_forms_tags`:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`django-crispy-forms`渲染表单的第一种方法是使用`crispy`模板。首先，必须在模板中加载过滤器。库的名称是`crispy_forms_tags`：
- en: '[PRE53]'
  id: totrans-326
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Then, instead of rendering a form with the `as_p` method (or another method),
    use the `crispy` filter. Consider the following line:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，不要使用`as_p`方法（或其他方法）来渲染表单，而是使用`crispy`过滤器。考虑以下行：
- en: '[PRE54]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'And replace it with this:'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 并将其替换为：
- en: '[PRE55]'
  id: totrans-330
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Here''s a quick *before and after* showing the `Review Create` form. None of
    the rest of the HTML has been changed apart from the form rendering. *Figure 15.27*
    shows the standard Django form:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个快速展示“创建回顾”表单的**前后对比**。除了表单的渲染之外，HTML的其他部分都没有改变。*图15.27*显示了标准的Django表单：
- en: '![Figure 15.27: The Review Create form with default styling'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.27：带有默认样式的创建回顾表单'
- en: '](img/B15509_15_27.jpg)'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.27：带有默认样式的创建回顾表单](img/B15509_15_27.jpg)'
- en: 'Figure 15.27: The Review Create form with default styling'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.27：带有默认样式的创建回顾表单
- en: '*Figure 15.28* shows the form after `django-crispy-forms` has added the Bootstrap
    classes:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '*图15.28*显示了在`django-crispy-forms`添加Bootstrap类之后的表单：'
- en: '![Figure 15.28: Review Create form with Bootstrap classes added by django-crispy-forms'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.28：通过django-crispy-forms添加Bootstrap类后的创建回顾表单'
- en: '](img/B15509_15_28.jpg)'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.28：通过django-crispy-forms添加Bootstrap类后的创建回顾表单](img/B15509_15_28.jpg)'
- en: 'Figure 15.28: Review Create form with Bootstrap classes added by django-crispy-forms'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.28：通过django-crispy-forms添加Bootstrap类后的创建回顾表单
- en: When we integrate `django-crispy-forms` into Bookr, we will not use this method,
    however, it is worth knowing about because of how easy it is to drop it into your
    existing templates.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们将`django-crispy-forms`集成到Bookr中时，我们不会使用这种方法，然而，由于它很容易插入到现有的模板中，所以了解这一点是很有价值的。
- en: The crispy Template Tag
  id: totrans-340
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Crispy模板标签
- en: 'The other method of rendering a form with `django-crispy-forms` is with the
    use of the `crispy` template tag. To use it, the `crispy_forms_tags` library must
    first be loaded into the template (as we did in the previous section). Then, the
    form is rendered like this:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`django-crispy-forms`渲染表单的另一种方法是使用`crispy`模板标签。要使用它，必须首先将`crispy_forms_tags`库加载到模板中（就像我们在上一节中所做的那样）。然后，表单可以这样渲染：
- en: '[PRE56]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'How does this differ from the `crispy` filter? The `crispy` template tag will
    also render the `<form>` element and `{% csrf_token %}` template tag for you.
    So, consider for example that you used it like this:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这与`crispy`过滤器有何不同？`crispy`模板标签也会为您渲染`<form>`元素和`{% csrf_token %}`模板标签。例如，你可以这样使用它：
- en: '[PRE57]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'The output for this would be as follows:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个输出，结果如下：
- en: '[PRE58]'
  id: totrans-346
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: That is, the form and CSRF token fields are duplicated. In order to customize
    the `<form>` element that is generated, `django-crispy-forms` provides a `FormHelper`
    class that can be set as a `Form` instance's `helper` attribute. It is the `FormHelper`
    instance that the `crispy` template tag uses to determine what attributes the
    `<form>` should have.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 即，表单和 CSRF 令牌字段被重复了。为了自定义生成的 `<form>` 元素，`django-crispy-forms` 提供了一个 `FormHelper`
    类，它可以被设置为 `Form` 实例的 `helper` 属性。它是 `FormHelper` 实例，`crispy` 模板标签使用它来确定 `<form>`
    应该具有哪些属性。
- en: 'Let us look at an `ExampleForm` with a helper added. First, import the required modules:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看添加了辅助器的 `ExampleForm`。首先，导入所需的模块：
- en: '[PRE59]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Next, define a form:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，定义一个表单：
- en: '[PRE60]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'We could instantiate a `FormHelper` instance and then set it to the `form.helper`
    attribute (for example, in a view), but it''s usually more useful to just create
    and assign it inside the form''s `__init__` method. We haven''t created a form
    with an `__init__` method yet, but it''s no different from any other Python class:'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以实例化一个 `FormHelper` 实例，然后将其设置为 `form.helper` 属性（例如，在一个视图中），但通常在表单的 `__init__`
    方法中创建和分配它更有用。我们还没有创建一个带有 `__init__` 方法的表单，但它与其他 Python 类没有区别：
- en: '[PRE61]'
  id: totrans-353
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Next, we set the helper and the form_method for the helper (which is then rendered
    in the form HTML):'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们设置辅助器和辅助器的 `form_method`（它随后将在表单 HTML 中渲染）：
- en: '[PRE62]'
  id: totrans-355
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Other attributes can be set on the helper, such as `form_action`, `form_id`,
    and `form_class`. We don't need to use these in Bookr though. We also do not need
    to manually set the `enctype` on the form or its helper, as the `crispy` form
    tag will automatically set this to `multipart/form-data` if the form contains
    file upload fields.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在辅助器上设置其他属性，例如 `form_action`、`form_id` 和 `form_class`。在 Bookr 中我们不需要使用这些。我们也不需要手动设置表单或其辅助器的
    `enctype`，因为 `crispy` 表单标签会自动将其设置为 `multipart/form-data`，如果表单包含文件上传字段。
- en: 'If we tried to render the form now, we wouldn''t be able to submit it as there''s
    no submit button (remember we added submit buttons to our forms manually, they
    are not part of the Django form). `django-crispy-forms` also includes layout helpers
    that can be added to the form. They will be rendered after the other fields. We
    can add a submit button like this – first, import the `Submit` class:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在尝试渲染表单，我们将无法提交它，因为没有提交按钮（记住我们手动添加了提交按钮到我们的表单中，它们不是 Django 表单的一部分）。`django-crispy-forms`
    还包括可以添加到表单中的布局辅助器。它们将在其他字段之后渲染。我们可以这样添加一个提交按钮——首先，导入 `Submit` 类：
- en: '[PRE63]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Note
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '`django-crispy-forms` does not properly support using a `<button>` input to
    submit a form, but for our purposes, an `<input type="submit">` is functionally
    identical.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-crispy-forms` 并不完全支持使用 `<button>` 输入来提交表单，但就我们的目的而言，`<input type="submit">`
    在功能上是相同的。'
- en: 'We then instantiate it and add it to the helper''s inputs in a single line:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 我们然后实例化它，并在一行中将其添加到辅助器的输入中：
- en: '[PRE64]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The first argument to the `Submit` constructor is its *name*, and the second
    is its *label*.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`Submit` 构造函数的第一个参数是其 *name*，第二个参数是其 *label*。'
- en: '`django-crispy-forms` is aware that we are using Bootstrap and will automatically
    render the button with the `btn btn-primary` classes.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-crispy-forms` 知道我们正在使用 Bootstrap，并将自动使用 `btn btn-primary` 类渲染按钮。'
- en: The advantage of using a crispy template tag and `FormHelper` is that it means
    there is only one place where attributes and the behavior of the form are defined.
    We are already defining all the form fields in a `Form` class; this allows us
    to define the other attributes of the form in the same place. We could change
    a form from a `GET` submission to a `POST` submission easily here. The `FormHelper`
    instance will then automatically know that it needs to add a CSRF token to its
    HTML output when rendered.
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 crispy 模板标签和 `FormHelper` 的优点是，这意味着只有一处定义了属性和表单的行为。我们已经在 `Form` 类中定义了所有表单字段；这允许我们在同一位置定义表单的其他属性。我们可以轻松地将表单从
    `GET` 提交更改为 `POST` 提交。然后，`FormHelper` 实例将自动知道在渲染时需要将其 CSRF 令牌添加到其 HTML 输出中。
- en: We'll put all this into practice in the next exercise, where you will install
    `django-crispy-forms` and then update `SearchForm` to utilize a form helper, then
    render it using the `crispy` template tag.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一个练习中将所有这些应用到实践中，在那里你将安装 `django-crispy-forms`，然后更新 `SearchForm` 以利用表单辅助器，然后使用
    `crispy` 模板标签渲染它。
- en: 'Exercise 15.04: Using Django Crispy Forms with the SearchForm'
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 练习 15.04：使用 Django Crispy Forms 与 SearchForm
- en: 'In this exercise, you will install `django-crispy-forms`, then convert the
    `SearchForm` to be usable with the `crispy` template tag. This will be done by
    adding an `__init__` method and building a `FormHelper` instance inside it:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，您将安装 `django-crispy-forms`，然后将 `SearchForm` 转换为可以使用 `crispy` 模板标签的形式。这将通过添加一个
    `__init__` 方法和在其中构建 `FormHelper` 实例来完成：
- en: 'In a terminal, make sure you have activated the `bookr` virtual environment,
    then run this command to install `django-crispy-forms` using `pip3`:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在终端中，确保您已经激活了 `bookr` 虚拟环境，然后运行此命令使用 `pip3` 安装 `django-crispy-forms`：
- en: '[PRE65]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: This will allow Django to find the required templates.
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将允许 Django 找到所需的模板。
- en: 'While in `settings.py`, add a new setting for `CRISPY_TEMPLATE_PACK` – its
    value should be `bootstrap4`. This should be added as an attribute on the `Dev` class:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `settings.py` 中，为 `CRISPY_TEMPLATE_PACK` 添加一个新的设置 - 其值应该是 `bootstrap4`。这应该作为
    `Dev` 类的一个属性添加：
- en: '[PRE66]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE66]'
- en: This lets `django-crispy-forms` know that it should be using the templates designed
    for Bootstrap version 4 when rendering forms. You can now save and close `settings.py`.
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这让 `django-crispy-forms` 知道在渲染表单时应该使用为 Bootstrap 版本 4 设计的模板。您现在可以保存并关闭 `settings.py`。
- en: 'Open the `reviews` app''s `forms.py` file. First, we need to add two imports
    to the top of the file: `FormHelper` from `crispy_forms.helper`, and `Submit`
    from `crispy_forms.layout`:'
  id: totrans-375
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `reviews` 应用的 `forms.py` 文件。首先，我们需要在文件顶部添加两个导入：从 `crispy_forms.helper` 导入
    `FormHelper`，从 `crispy_forms.layout` 导入 `Submit`：
- en: '[PRE67]'
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Next, add an `__init__` method to `SearchForm`. It should accept `*args` and
    `**kwargs` as arguments, then call the super `__init__` method with them:'
  id: totrans-377
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，向 `SearchForm` 添加一个 `__init__` 方法。它应该接受 `*args` 和 `**kwargs` 作为参数，然后使用它们调用超类的
    `__init__` 方法：
- en: '[PRE68]'
  id: totrans-378
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This will simply pass through whatever arguments are provided to the superclass constructor.
  id: totrans-379
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将简单地传递给超类构造函数提供的任何参数。
- en: 'Still inside the `__init__` method, set `self.helper` to an instance of `FormHelper`.
    Then set the helper''s `form_method` to `get`. Finally, create an instance of
    `Submit`, passing in an empty string as the name (first argument), and `Search`
    as the button label (second argument). Add this to the helper with the `add_input`
    method:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 仍然在 `__init__` 方法中，将 `self.helper` 设置为 `FormHelper` 的一个实例。然后设置 helper 的 `form_method`
    为 `get`。最后，创建一个 `Submit` 的实例，将空字符串作为名称（第一个参数），将 `Search` 作为按钮标签（第二个参数）。使用 `add_input`
    方法将此添加到 helper 中：
- en: '[PRE69]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: You can save and close `forms.py`.
  id: totrans-382
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在可以保存并关闭 `forms.py`。
- en: 'In the `reviews` app''s `templates` directory, open `search-results.html`.
    At the start of the file, after the `extends` template tag, use a `load` template
    tag to load `crispy_forms_tags`:'
  id: totrans-383
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `reviews` 应用程序的 `templates` 目录中，打开 `search-results.html` 文件。在文件开始处，在 `extends`
    模板标签之后，使用 `load` 模板标签加载 `crispy_forms_tags`：
- en: '[PRE70]'
  id: totrans-384
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'Locate the existing `<form>` in the template. It should look like this:'
  id: totrans-385
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模板中定位现有的 `<form>` 元素。它应该看起来像这样：
- en: '[PRE71]'
  id: totrans-386
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'You can delete the entered `<form>` element and replace it with a `crispy`
    template tag:'
  id: totrans-387
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您可以删除输入的 `<form>` 元素，并用 `crispy` 模板标签替换它：
- en: '[PRE72]'
  id: totrans-388
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'This will use the `django-crispy-forms` library to render the form, including
    the `<form>` element and submit button. After making this change, this portion
    of the template should look like *Figure 15.30*:'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这将使用 `django-crispy-forms` 库渲染表单，包括 `<form>` 元素和提交按钮。在此更改后，模板的这一部分应该看起来像 *图15.30*：
- en: '![Figure 15.30: search-results.html after replacing <form> with crispy form
    renderer'
  id: totrans-390
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.30：将 <form> 替换为 crispy 表单渲染器后的 search-results.html](img/B15509_15_30.jpg)'
- en: '](img/B15509_15_30.jpg)'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.32：使用更新后的搜索表单进行搜索](img/B15509_15_30.jpg)'
- en: 'Figure 15.30: search-results.html after replacing <form> with crispy form renderer'
  id: totrans-392
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 图15.30：将 <form> 替换为 crispy 表单渲染器后的 search-results.html
- en: You can now save `search-results.html`.
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 您现在可以保存 `search-results.html`。
- en: 'Start the Django dev server if it is not already running and go to `http://127.0.0.1:8000/book-search/`.
    You should see the book search form like in *Figure 15.31*:![Figure 15.31: Book
    search form rendered with django-crispy-forms'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果尚未运行，请启动 Django 开发服务器并转到 `http://127.0.0.1:8000/book-search/`。您应该看到与 *图15.31*
    一样的图书搜索表单：![图15.31：使用 django-crispy-forms 渲染的图书搜索表单](img/B15509_15_31.jpg)
- en: '](img/B15509_15_31.jpg)'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图15.31：与之前相同的方式使用表单](img/B15509_15_31.jpg)'
- en: 'Figure 15.31: Book search form rendered with django-crispy-forms'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.31：使用 django-crispy-forms 渲染的图书搜索表单
- en: 'You should be able to use the form in the same manner as you did before (*Figure 15.32*):'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该能够以与之前相同的方式使用该表单（*图15.32*）：
- en: '![Figure 15.32: Performing a search with the updated search form'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.32：使用更新后的搜索表单进行搜索](img/B15509_15_32.jpg)'
- en: '](img/B15509_15_32.jpg)'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.32：与之前相同的方式使用表单](img/B15509_15_32.jpg)'
- en: 'Figure 15.32: Performing a search with the updated search form'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.32：使用更新后的搜索表单进行搜索
- en: Try viewing the source of the page in your web browser to see the rendered output.
    You will see that the `<form>` element has been rendered with the `method="get"`
    attribute, as we specified to the `FormHelper` in *step 5*. Notice also that `django-crispy-forms`
    has not inserted a CSRF token field – it knows that one is not required for a
    form submitted using `GET`.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 尝试在您的网络浏览器中查看页面的源代码以查看渲染输出。您会看到`<form>`元素已使用`method="get"`属性渲染，正如我们在*步骤5*中指定给`FormHelper`的。注意，`django-crispy-forms`没有插入CSRF令牌字段——它知道在通过`GET`提交的表单中不需要。
- en: In this exercise, we installed `django-crispy-forms` using `pip3` (`pip` for
    Windows) and then configured it in `settings.py` by adding it to `INSTALLED_APPS`
    and defining the `CRISPY_TEMPLATE_PACK` we wanted to use (in our case, `bootstrap4`).
    We then updated the `SearchForm` class to use a `FormHelper` instance to control
    the attributes on the form and added a submit button using the `Submit` class.
    Finally, we changed the `search-results.html` template to use the `crispy` template
    tag to render the form, which allowed us to remove the `<form>` element we were
    using before and simplify form generation by moving all the form-related code
    into Python code (instead of being partially in HTML and partially in Python).
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们使用`pip3`（Windows上的`pip`）安装了`django-crispy-forms`，然后在`settings.py`中通过将其添加到`INSTALLED_APPS`并定义我们想要使用的`CRISPY_TEMPLATE_PACK`（在我们的情况下是`bootstrap4`）来配置它。然后，我们更新了`SearchForm`类，使用`FormHelper`实例来控制表单上的属性，并使用`Submit`类添加了一个提交按钮。最后，我们将`search-results.html`模板更改为使用`crispy`模板标签来渲染表单，这使得我们可以移除之前使用的`<form>`元素，并通过将所有与表单相关的代码移动到Python代码中（而不是部分在HTML中，部分在Python中）来简化表单生成。
- en: django-allauth
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: django-allauth
- en: 'When browsing websites, you have probably seen buttons that allow you to log
    in using another website''s credentials. For example, using your GitHub login:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 在浏览网站时，您可能已经看到了允许您使用其他网站的凭据登录的按钮。例如，使用您的GitHub登录：
- en: '![Figure 15.33: Sign In form with options to log in with Google or GitHub'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.33：带有使用Google或GitHub登录选项的登录表单'
- en: '](img/B15509_15_33.jpg)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_15_33.jpg)'
- en: 'Figure 15.33: Sign In form with options to log in with Google or GitHub'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.33：带有使用Google或GitHub登录选项的登录表单
- en: 'Before we explain the process, let us introduce the terminology we will be
    using:'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们解释这个过程之前，让我们介绍我们将要使用的术语：
- en: '**Requesting site**: The site the user is trying to log in to.'
  id: totrans-409
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**请求网站**：用户试图登录的网站。'
- en: '**Authentication provider**: The third-party provider that the user is authenticating
    to (for example, Google, GitHub, and so on).'
  id: totrans-410
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证提供者**：用户正在验证的第三方提供者（例如，Google、GitHub等）。'
- en: '**Authentication application**: This is something the creators of the requesting
    site set up at the authentication provider. It determines what permissions the
    requesting site will have with the authentication provider. For example, the requesting
    application can get access to your GitHub username, but won''t have permission
    to write to your repositories. The user can stop the requesting site from accessing
    your information at the authentication provider by disabling access to the authentication
    application.'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**身份验证应用程序**：这是请求网站创建者在身份验证提供者处设置的东西。它决定了请求网站将拥有哪些权限。例如，请求应用程序可以获取您的GitHub用户名，但不会获得写入您仓库的权限。用户可以通过禁用对身份验证应用程序的访问来阻止请求网站访问身份验证提供者中的信息。'
- en: 'The process is generally the same regardless of which third-party sign-in option
    you choose. First, you will be redirected to the authentication provider site
    and be asked to allow the authentication application to access your account (*Figure
    15.34*):'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 无论您选择哪种第三方登录选项，流程通常都是相同的。首先，您将被重定向到身份验证提供者网站，并要求允许身份验证应用程序访问您的账户（*图15.34*）：
- en: '![Figure 15.34: Authentication provider authorization screen'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '![图15.34：身份验证提供者授权屏幕'
- en: '](img/B15509_15_34.jpg)'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/B15509_15_34.jpg)'
- en: 'Figure 15.34: Authentication provider authorization screen'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.34：身份验证提供者授权屏幕
- en: 'After you authorize the authentication application, the authentication provider
    will redirect back to the requesting site. The URL that you are redirected to
    will contain a secret token that the requesting site can use to request your user
    information in the backend. This allows the requesting site to verify who you
    are by communicating directly with the authentication provider. After validating
    your identity using a token, the requesting site can redirect you to your content.
    This flow is illustrated in a sequence diagram in *Figure 15.35*:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在您授权身份验证应用程序后，身份验证提供者将重定向回请求的网站。您将被重定向到的 URL 将包含一个秘密令牌，请求的网站可以使用该令牌在后台请求您的用户信息。这允许请求的网站通过直接与身份验证提供者通信来验证您的身份。在验证您的身份后，请求的网站可以将其重定向到您的页面。此流程在
    *图 15.35* 中的序列图中表示：
- en: '![Figure 15.35: Third-party authentication flow'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.35：第三方身份验证流程'
- en: '](img/B15509_15_35.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 B15509_15_35.jpg](img/B15509_15_35.jpg)'
- en: 'Figure 15.35: Third-party authentication flow'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.35：第三方身份验证流程
- en: Now that we have introduced authenticating using a third-party service, we can
    discuss `django-allauth`. `django-allauth` is an app that easily plugs your Django
    application into a third-party authentication service, including Google, GitHub,
    Facebook, Twitter, and others. In fact, at the time of writing, `django-allauth`
    supports over 75 authentication providers.
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经介绍了使用第三方服务进行身份验证，我们可以讨论 `django-allauth`。`django-allauth` 是一个应用程序，它可以将您的
    Django 应用程序轻松地连接到第三方身份验证服务，包括 Google、GitHub、Facebook、Twitter 等。实际上，在撰写本文时，`django-allauth`
    支持超过 75 个身份验证提供者。
- en: The first time a user authenticates to your site, `django-allauth` will create
    a standard Django `User` instance for you. It also knows how to parse the callback/redirect
    URL that the authentication provider loads after the end user authorizes the authentication
    application.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户首次在您的网站上进行身份验证时，`django-allauth` 将为您创建一个标准的 Django `User` 实例。它还知道如何解析身份验证提供者在最终用户授权身份验证应用程序后加载的回调/重定向
    URL。
- en: '`django-allauth` adds three models to your application:'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`django-allauth` 为您的应用程序添加了三个模型：'
- en: '`SocialApplication`: This stores the information used to identify your authentication
    application. The information you enter will depend on the provider, who will give
    you a *client* ID, *secret* key, and (optionally) a *key*. Note that these are
    the names that `django-allauth` uses for these values and they will differ based
    on the provider. We will give some examples of these values later in this section.
    `SocialApplication` is the only one of the `django-allauth` models that you will
    create yourself, the others `django-allauth` creates automatically when a user
    authenticates.'
  id: totrans-423
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SocialApplication`：此模型存储用于识别您的身份验证应用程序的信息。您输入的信息将取决于提供者，提供者将为您提供 *客户端* ID、*密钥*
    和（可选的）一个 *密钥*。请注意，这些是 `django-allauth` 用于这些值的名称，并且它们将根据提供者而有所不同。我们将在本节稍后提供一些这些值的示例。`SocialApplication`
    是 `django-allauth` 模型中唯一一个您需要自己创建的，其他模型在用户进行身份验证时由 `django-allauth` 自动创建。'
- en: '`SocialApplicationToken`: This contains the values needed to identify a Django
    user to the authentication provider. It contains a *token* and (optionally) a
    *token secret*. It also contains a reference to the `SocialApplication` that created
    it and the `SocialAccount` to which it applies.'
  id: totrans-424
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SocialApplicationToken`：此模型包含用于将 Django 用户识别给身份验证提供者的值。它包含一个 *令牌* 和（可选的）一个
    *令牌密钥*。它还包含一个引用创建它的 `SocialApplication` 和它应用的 `SocialAccount`。'
- en: '`SocialAccount`: This links a Django user to the provider (for example, Google
    or GitHub) and stores extra information that the provider may have given.'
  id: totrans-425
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SocialAccount`：此模型将 Django 用户与提供者（例如，Google 或 GitHub）相关联，并存储提供者可能提供的额外信息。'
- en: 'Since there are so many authentication providers, we will not cover how to
    set them all up, but we will give a short instruction on setup and how to map
    the auth tokens from the providers to the right fields in a `SocialApplication`.
    We will do this for the two auth providers we have been mentioning throughout
    the chapter: Google and GitHub.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 由于存在如此多的身份验证提供者，我们不会涵盖如何设置它们的所有内容，但我们将提供简短的设置说明以及如何将提供者的身份验证令牌映射到 `SocialApplication`
    中的正确字段。我们将为此章节中提到的两个身份验证提供者进行此操作：Google 和 GitHub。
- en: django-allauth Installation and Setup
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: django-allauth 安装和设置
- en: 'Like the other apps in this chapter, `django-allauth` is installed with `pip3`:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 与本章中的其他应用程序一样，`django-allauth` 使用 `pip3` 进行安装：
- en: '[PRE73]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Note
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: For Windows, you can use `pip` instead of `pip3` in the preceding command.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 对于 Windows，您可以在前面的命令中使用 `pip` 而不是 `pip3`。
- en: 'We then need a few settings changes. `django-allauth` requires the `django.contrib.sites`
    app to run, so it needs to be added to `INSTALLED_APPS`. Then a new setting needs
    to be added to define a `SITE_ID` for our site. We can just set this to `1` in
    our `settings.py` file:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 我们接下来需要做一些设置更改。`django-allauth` 需要运行 `django.contrib.sites` 应用，因此需要将其添加到 `INSTALLED_APPS`。然后需要添加一个新的设置来定义我们站点的
    `SITE_ID`。我们可以在 `settings.py` 文件中将此设置为 `1`：
- en: '[PRE74]'
  id: totrans-433
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Note
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: It is possible to have a single Django project hosted on multiple hostnames
    and have it behave differently on each – but also have content shared across all
    the sites. We don't need to use the `SITE_ID` anywhere else in our project but
    one must be set here. You can read more about the `SITE_ID` settings at [https://docs.djangoproject.com/en/3.0/ref/contrib/sites/](https://docs.djangoproject.com/en/3.0/ref/contrib/sites/).
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 有可能将单个 Django 项目托管在多个主机名下，并且使其在每个主机名上表现不同——但也可以在所有站点之间共享内容。我们不需要在我们的项目中其他任何地方使用
    `SITE_ID`，但必须在此处设置。您可以在 [https://docs.djangoproject.com/en/3.0/ref/contrib/sites/](https://docs.djangoproject.com/en/3.0/ref/contrib/sites/)
    中了解更多关于 `SITE_ID` 设置的信息。
- en: 'We also need to add `allauth` and `allauth.socialaccount` to `INSTALLED_APPS`:'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还需要将 `allauth` 和 `allauth.socialaccount` 添加到 `INSTALLED_APPS`：
- en: '[PRE75]'
  id: totrans-437
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Then, each provider we want to support must also be added in the list of `INSTALLED_APPS`;
    for example, consider the following snippet:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们想要支持的每个提供者也必须添加到 `INSTALLED_APPS` 列表中；例如，考虑以下片段：
- en: '[PRE76]'
  id: totrans-439
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'After all this is done, we need to run the `migrate` management command, to
    create the `django-allauth` models:'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在完成所有这些之后，我们需要运行 `migrate` 管理命令，以创建 `django-allauth` 模型：
- en: '[PRE77]'
  id: totrans-441
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Once this is done, new social applications can be added through the Django
    Admin interface (*Figure 15.36*):'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，您可以通过 Django 管理界面添加新的社交应用（*图 15.36*）：
- en: '![Figure 15.36: Adding a social application'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 15.36：添加社交应用]'
- en: '](img/B15509_15_36.jpg)'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/B15509_15_36.jpg]'
- en: 'Figure 15.36: Adding a social application'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.36：添加社交应用
- en: To add a social application, select a `Provider` (this list will only show those
    in the `INSTALLED_APPS` list), enter a name (it can just be the same as the `Provider`),
    and enter the `Client ID` from the provider's website (we will go into detail
    on this soon). You may also need a `Secret key` and `Key`. Select the site it
    should apply to. (If you only have one `Site` instance, then its name does not
    matter, just select it. The site name can be updated in the `Sites` section of
    Django admin. You can also add more sites there.)
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加社交应用，选择一个 `Provider`（此列表将仅显示 `INSTALLED_APPS` 列表中的那些），输入一个名称（它可以与 `Provider`
    相同），并输入提供者网站上的 `Client ID`（我们很快会详细介绍这一点）。您可能还需要 `Secret key` 和 `Key`。选择它应该应用的站点。（如果您只有一个
    `Site` 实例，那么其名称无关紧要，只需选择它即可。站点名称可以在 Django 管理的 `Sites` 部分中更新。您也可以在那里添加更多站点。）
- en: We will now look at the tokens used by our three example providers.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将查看我们三个示例提供者使用的令牌。
- en: GitHub Auth Setup
  id: totrans-448
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GitHub 身份验证设置
- en: A new GitHub application can be set up under your GitHub profile. During development,
    your callback URL for the application should be set to `http://127.0.0.1:8000/accounts/github/login/callback/`
    and updated with the real hostname when you deploy to production. After creating
    the app, it will provide a `Client ID` and `Client Secret`. These are your `Client
    id` and `Secret key`, respectively, in `django-allauth`.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在您的 GitHub 个人资料下设置一个新的 GitHub 应用程序。在开发期间，您应用的回调 URL 应设置为 `http://127.0.0.1:8000/accounts/github/login/callback/`，并在您部署到生产时更新为真实的主机名。创建应用后，它将提供
    `Client ID` 和 `Client Secret`。这些就是 `django-allauth` 中的 `Client id` 和 `Secret key`。
- en: Google Auth Setup
  id: totrans-450
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Google 身份验证设置
- en: The creation of a Google application is done through your Google Developers
    console. The authorized redirect URI should be set to `http://127.0.0.1:8000/accounts/google/login/callback/`
    during development and updated after production deployment. The app's `Client
    ID` is also Client id in `django-allauth`, and the app's `Client secret` is the
    `Secret key`.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 创建 Google 应用程序是通过您的 Google 开发者控制台完成的。在开发期间，授权的重定向 URI 应设置为 `http://127.0.0.1:8000/accounts/google/login/callback/`，并在生产部署后更新。应用的
    `Client ID` 也是在 `django-allauth` 中的 Client id，而应用的 `Client secret` 是 `Secret key`。
- en: Initiating Authentication with django-allauth
  id: totrans-452
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 django-allauth 启动身份验证
- en: 'To initiate authentication through a third-party provider, you first need to
    add the `django-allauth` URLs in your URL maps. Somewhere inside your `urlpatterns`
    is one of your `urls.py` files, include `allauth.urls`:'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 要通过第三方提供者启动身份验证，您首先需要在您的 URL 映射中添加 `django-allauth` 的 URL。在您的 `urlpatterns`
    中的某个地方，有一个 `urls.py` 文件，包含 `allauth.urls`：
- en: '[PRE78]'
  id: totrans-454
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: You will then be able to initiate a login using URLs like `http://127.0.0.1:8000/allauth/github/login/?process=login`
    or `http://127.0.0.1:8000/allauth/google/login/?process=login`, and so on. django-allauth
    will handle all the redirects for you, then create/authenticate the Django user
    when they return to the site. You can have buttons on your login page with text
    such as Login with GitHub or Login with Google that link to these URLs.
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: Other django-allauth Features
  id: totrans-456
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Other than authentication with third-party providers, `django-allauth` can also
    add some useful features that Django does not have built in. For example, you
    can configure it to require an email address for a user, and have the user verify
    their email address by clicking a confirmation link they receive before they log
    in, `django-allauth` can also handle generating a URL for a password reset that
    is emailed to the user. You can find the documentation for `django-allauth` that
    explains these features, and more, at [https://django-allauth.readthedocs.io/en/stable/overview.html](https://django-allauth.readthedocs.io/en/stable/overview.html).
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have covered the first four third-party apps in depth and given
    a brief overview of `django-allauth`, you can undertake the activity for this
    chapter. In this activity, you will refactor the `ModelForm` instances we are
    using to use the `CrispyFormHelper` class.
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 15.01: Using FormHelper to Update Forms'
  id: totrans-459
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, we will update the `ModelForm` instances (`PublisherForm`,
    `ReviewForm`, and `BookMediaForm`) to use the `CrispyFormHelper` class. Using
    `FormHelper`, we can define the text of the `Submit` button inside the `Form`
    class itself. We can then move the `<form>` rendering logic out of the `instance-form.html`
    template and replace it with a `crispy` template tag.
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete the activity:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: Create an `InstanceForm` class that subclasses `forms.ModelForm`. This will
    be the base of the existing `ModelForm` classes.
  id: totrans-462
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `__init__` method of `InstanceForm`, set a `FormHelper` instance on `self`.
  id: totrans-463
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `Submit` button to `FormHelper`. If the form is instantiated with an `instance`,
    then the button text should be `Save`, otherwise, it should be `Create`.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update PublisherForm, ReviewForm, and BookMediaForm to extend from `InstanceForm`.
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Update the `instance-form.html` template so that `form` is rendered using the
    `crispy` template tag. The rest of the `<form>` can be removed.
  id: totrans-466
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In the `book_media` view, the `is_file_upload` context item is no longer required.
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When you are finished, you should see the forms rendered with Bootstrap themes.
    *Figure 15.37* shows the `New Publisher` page:'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.37: New Publisher page'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_37.jpg)'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.37: New Publisher page'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 15.38* shows the `New Review` page:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.38: New Review form'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_38.jpg)'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 15.38: New Review form'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the book media page is displayed in *Figure 15.39*:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.39: Book media page'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_15_39.jpg)'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/B15509_15_39.jpg)'
- en: 'Figure 15.39: Book media page'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.39：书籍媒体页面
- en: You should notice the form still behaves fine and allows file uploads. `django-crispy-forms`
    has automatically added the `enctype="multipart/form-data"` attribute to `<form>`.
    You can verify this by viewing the page source.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该注意到表单仍然表现良好，并允许文件上传。`django-crispy-forms` 已自动将 `enctype="multipart/form-data"`
    属性添加到 `<form>` 中。您可以通过查看页面源代码来验证这一点。
- en: Note
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以在 [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ) 找到。
- en: Summary
  id: totrans-483
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we introduced five third-party Django apps that can enhance
    your website. We installed and set up `django-configurations`, which allowed us
    to easily switch between different settings and change them using environment
    variables. `dj-database-url` also helped with settings, allowing us to make database
    settings changes using URLs. We saw how the Django Debug Toolbar could help us
    see what our app was doing and help us debug problems we were having with it.
    `django-crispy-forms` can not only render our forms using the Bootstrap CSS but
    also lets us save code by defining their behavior as part of the form class itself.
    We briefly looked at `django-allauth` and saw how it can be integrated into third-party
    authentication providers. In the activity for this chapter, we updated our `ModelForm`
    instances to use the `django-crispy-forms` `FormHelper` and remove some logic
    from the template by using the `crispy` template tag.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了五个可以增强您网站功能的第三方 Django 应用程序。我们安装并设置了 `django-configurations`，这使得我们能够轻松地在不同的设置之间切换，并使用环境变量来更改它们。`dj-database-url`
    也帮助处理设置，允许我们通过使用 URL 来进行数据库设置更改。我们看到了 Django 调试工具栏如何帮助我们了解我们的应用程序正在做什么，并帮助我们调试与之相关的问题。`django-crispy-forms`
    不仅可以使用 Bootstrap CSS 渲染我们的表单，还允许我们通过将它们的行性行为定义为表单类本身的一部分来节省代码。我们简要地了解了 `django-allauth`，并看到了它如何集成到第三方身份验证提供商中。在本章的活动部分，我们将我们的
    `ModelForm` 实例更新为使用 `django-crispy-forms` 的 `FormHelper`，并通过使用 `crispy` 模板标签从模板中移除一些逻辑。
- en: In the next chapter, we will look at how to integrate the React JavaScript framework
    into a Django application.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨如何将 React JavaScript 框架集成到 Django 应用程序中。
