- en: Chapter 10. Reporting Recipes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating PDF reports
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating PDF listings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating PDF labels, badges, and invoices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are many ways to generate PDF reports in web2py. One way is to use `ReportLab`,
    the state of the art library for PDF generation in Python. Another way is to generate
    **LaTeX**, and convert the output to PDF. This is probably the most powerful way
    to generate PDF, and web2py helps you by packaging `markmin2latex` and `markmin2pdf`
    in its `contrib` folder. Yet, both these approaches require mastering of third-party
    libraries and syntax. There is a third way described in this chapter: *convert
    HTML to PDF directly using the pyfpdf library, packaged with web2py*.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating PDF reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Who does not need to generate PDF reports, invoices, bills? web2py ships with
    the `pyfpdf` library, which provides conversion of HTML views into PDF, and can
    be used for this purpose. `pyfpdf` is still in infancy, and lacks some advanced
    features that can be found, for example in `reportlab`, yet it is more than appropriate
    for the average user.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can make a professional-looking business report just by using web2py HTML
    helpers, mixing headers, logos, charts, text, and tables. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating PDF reports](img/5467OS_10_41.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The main advantage of this method is that the same report can be rendered in
    a HTML view, or can be downloaded as PDF, with minimal effort.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we provide an example controller that generates a sample report, and
    then discuss its syntax and APIs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The key is in the lines that create and serialize the `pdf` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The `pdf` object can parse raw HTML and convert it to PDF. Here, `MyFPDF` extends
    `FPDF`, by defining its own header and footer.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines play the critical role of serializing HTML components created
    with helpers into PDF:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Internally, `PyFPDF` has a basic HTML renderer using Python `HTMLParser`. This
    reads the HTML code, and translates it to PDF instructions. Although it only supports
    basic rendering, it can be extended easily or mixed up with other PDF primitives.
  prefs: []
  type: TYPE_NORMAL
- en: Also, you can render basic HTML with `default.pdf` view included with last versions
    of web2py, as long you use simple and supported tags.
  prefs: []
  type: TYPE_NORMAL
- en: 'Look at the `PyFPDF` wiki documentation for more information and examples at
    the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/pyfpdf/wiki/Web2Py](http://code.google.com/p/pyfpdf/wiki/Web2Py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/pyfpdf/wiki/WriteHTML](http://code.google.com/p/pyfpdf/wiki/WriteHTML)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating PDF listings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As a follow-up to the previous recipe, we can create nice tables that automatically
    spread over several pages, with headers/footers, column/row highlights, and so
    on, in a very Pythonic way:'
  prefs: []
  type: TYPE_NORMAL
- en: You can see an example at [http://pyfpdf.googlecode.com/files/listing.pdf](http://pyfpdf.googlecode.com/files/listing.pdf).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is an example that more or less speaks for itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Creating pdf labels, badges, and invoices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to use the `pyfpdf` library to do simple conference badges
    and invoices, but can easily adapted to print labels (`Avery` or other formats),
    and other documents.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, you have to define two tables to hold templates and elements that will
    hold the values used to design the PDF.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a model, for example `models/plugin_fpdf_templates.py`, and add the
    following code to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then, in the controller, `badges.py`, add some functions to create the initial
    base label/badge. Easily copy the badges according to your label format, then,
    finally generate a PDF, based on some user data (which is `speakers):`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To check this example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Execute `create_label`, and record the value of `pdf_template _id` created
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `copy_labels` equal to the value in `base_pdf_template _id`, then execute
    it
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Set `speaker_badges` equal to `pdf_template_id`, then execute it
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The function should generate a PDF with the labels (badges) for the registered
    users of your application.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The sample badge has a background image as follows:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_10_42.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Then, it writes the text over it, filling the speaker name, the address, and
    so on. You can use a similar method to make attendance certificates and several
    reports like that.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For a more complex example, see the following invoice controller (you will
    need to import the invoice design; look at the `pyfpdf` application sample for
    a complete example):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is an example of the output:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_10_43.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PDF templates are predefined documents (such as invoices, tax forms, and so
    on), where each element (text, lines, barcodes, and so on) has a fixed position
    `(x1, y1, x2`, and `y2)`, style (font, size, and so on), and a default text.
  prefs: []
  type: TYPE_NORMAL
- en: These elements can act as placeholders, so the program can change the default
    text filling the document.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, the elements can be defined in a CSV file or in a database, so the user
    can easily adapt the form to his printing needs. **Template** is used like a `dict`,
    setting its items values with the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name:` This is the placeholder identification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type: T` stands for texts, `L` stands for lines, `I` stands for images, `B`
    stands for boxes, and `BC` stands for barcodes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`x1, y1, x2`, and `y2:` These are the top-left and bottom-right coordinates
    (in mm).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font:` This can take the following values&mdash;Arial, `Courier, Helvetica,
    Times, Symbol, ZapfDingbats`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size:` This is the text size in points, that is, 10'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`bold, italic`, and `underline:` This is the text style (non-empty to enable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`foreground, background:` These are text and fill colors, that is, `0xFFFFFF`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`align:` These are the text alignments, where `L` stands for left, `R` stands
    for right, and `C` stands for center'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text:` This is the default string that can be replaced at runtime'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`priority:` This specifies the `Z-Order`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Elements can be defined manually (just passing a `dict)`, or they can be read
    from a CSV sheet (using `parse_csv)`, or stored in a database, as shown in this
    example using the `pdf_element` table.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is a basic example to show badge generation using fill-in-the-blank PDF
    templates, but it can be used to make any custom repetitive design.
  prefs: []
  type: TYPE_NORMAL
- en: Also, there is a visual designer to drag-and-drop elements, graphically adjust
    their properties, and easily test them.
  prefs: []
  type: TYPE_NORMAL
- en: 'See PyFPDF wiki documentation for further information at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/pyfpdf/wiki/Web2Py](http://code.google.com/p/pyfpdf/wiki/Web2Py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/pyfpdf/wiki/Templates](http://code.google.com/p/pyfpdf/wiki/Templates)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
