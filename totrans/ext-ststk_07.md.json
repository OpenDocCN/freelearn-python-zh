["```py\nimport salt.client\nclient = salt.client.get_local_client(__opts__['conf_file'])\nminions = client.cmd('*', 'test.ping', timeout=__opts__['timeout'])\n```", "```py\nminions = client.cmd(\n    '*',  # The target to use\n    'test.ping',  # The command to issue\n    timeout=__opts__['timeout']  # How long to wait for a response\n)\n```", "```py\n'''\nScan Minions for various pieces of information\n\nThis file should be saved as salt/runners/scan.py\n'''\nimport salt.client\n\n__func_alias__ = {\n\t'up_': 'up'\n}\n\ndef up_():\n    '''\n    Return a list of minions which are responding\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n    minions = client.cmd('*', 'test.ping', timeout=__opts__['timeout'])\n    return sorted(minions.keys())\n```", "```py\n# salt-run scan.up\n- achatz\n- dufresne\n\n```", "```py\nimport salt.key\n\ndef down():\n    '''\n    Return a list of minions which are NOT responding\n    '''\n    minions = up_()\n    key = salt.key.Key(__opts__)\n    keys = key.list_keys()\n    return sorted(set(keys['minions']) â€“ set(minions))\n```", "```py\n# salt-run scan.down\n- adria\n- trotter\n\n```", "```py\ndef up_(tgt='*', tgt_type='glob'):\n    '''\n    Return a list of minions which are responding\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n    minions = client.cmd(\n        tgt,\n        'test.ping',\n        expr_form=tgt_type,\n        timeout=__opts__['timeout']\n    )\n    return sorted(minions.keys())\n\ndef down(tgt='*', tgt_type='glob'):\n    '''\n    Return a list of minions which are NOT responding\n    '''\n    minions = up_(tgt, tgt_type)\n\n    key = salt.key.Key(__opts__)\n    keys = key.list_keys()\n\n    return sorted(set(keys['minions']) - set(minions))\n```", "```py\n# salt '*' grains.item os\n\n```", "```py\n# salt '*' grains.item virtual\n\n```", "```py\n# salt '*' virt.is_hyper\n\n```", "```py\ndef hyper_os():\n    '''\n    Return a list of which operating system each hypervisor is running\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n    minions = client.cmd(\n        '*',\n        'virt.is_hyper',\n        timeout=__opts__['timeout']\n    )\n\n    hypers = []\n    for minion in minions:\n        if minions[minion] is True:\n            hypers.append(minion)\n\n    return client.cmd(\n        hypers,\n        'grains.item',\n        arg=('os',),\n        expr_form='list',\n        timeout=__opts__['timeout']\n    )\n```", "```py\n# salt-run scan.hyper_os\ndufresne:\n ----------\n os:\n Arch\n\n```", "```py\ndef hypers(client=None):\n    '''\n    Return a list of Minions that are running hypervisors\n    '''\n    if client is None:\n        client = salt.client.get_local_client(__opts__['conf_file'])\n\n    minions = client.cmd(\n        '*',\n        'virt.is_hyper',\n        timeout=__opts__['timeout']\n    )\n\n    hypers = []\n    for minion in minions:\n        if minions[minion] is True:\n            hypers.append(minion)\n\n    return hypers\n\ndef hyper_os():\n    '''\n    Return a list of which operating system each hypervisor is running\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n\n    return client.cmd(\n        hypers(client),\n        'grains.item',\n        arg=('os',),\n        expr_form='list',\n        timeout=__opts__['timeout']\n    )\n\ndef hyper_cmd(cmd, arg=None, kwarg=None):\n    '''\n    Execute an arbitrary command on Minions which run hypervisors\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n\n    if arg is None:\n        arg = []\n\n    if not isinstance(arg, list):\n        arg = [arg]\n\n    if kwarg is None:\n        kwarg = {}\n\n    return client.cmd(\n        hypers(client),\n        cmd,\n        arg=arg,\n        kwarg=kwarg,\n        expr_form='list',\n        timeout=__opts__['timeout']\n    )\n```", "```py\n# salt-run scan.hyper_cmd test.ping\n\n```", "```py\n# salt-run scan.hyper_cmd test.ping\n\n```", "```py\n# salt-run scan.hyper_cmd test.arg [one,two]\n\n```", "```py\n# salt-run scan.hyper_cmd test.arg one,two\n\n```", "```py\nsalt-run scan.hyper_cmd network.interface kwarg=\"{'iface':'wlp3s0'}\"\n\n```", "```py\ndef hyper_cmd(cmd, *arg, **kwarg):\n    '''\n    Execute an arbitrary command on Minions which run hypervisors\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n\n    return client.cmd(\n        hypers(client),\n        cmd,\n        arg=arg,\n        kwarg=kwarg,\n        expr_form='list',\n        timeout=__opts__['timeout']\n    )\n```", "```py\n# salt-run scan.hyper_cmd test.kwarg iface='wlp3s0'\n\n```", "```py\n'''\nScan Minions for various pieces of information\n\nThis file should be saved as salt/runners/scan.py\n'''\nimport salt.client\nimport salt.key\n\n__func_alias__ = {\n    'up_': 'up'\n}\n\ndef up_(tgt='*', tgt_type='glob'):\n    '''\n    Return a list of minions which are responding\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n    minions = client.cmd(\n        tgt,\n        'test.ping',\n        expr_form=tgt_type,\n        timeout=__opts__['timeout']\n    '''\n    Return a list of minions which are NOT responding\n    '''\n    minions = up_(tgt, tgt_type)\n\n    key = salt.key.Key(__opts__)\n    keys = key.list_keys()\n\n    return sorted(set(keys['minions']) - set(minions))\n\ndef hypers(client=None):\n    '''\n    Return a list of Minions that are running hypervisors\n    '''\n    if client is None:\n        client = salt.client.get_local_client(__opts__['conf_file'])\n\n    minions = client.cmd(\n        '*',\n        'virt.is_hyper',\n        timeout=__opts__['timeout']\n    )\n\n    hypers = []\n    for minion in minions:\n        if minions[minion] is True:\n            hypers.append(minion)\n\n    return hypers\n\ndef hyper_os():\n    '''\n    Return a list of which operating system each hypervisor is running\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n\n    return client.cmd(\n        hypers(client),\n        'grains.item',\n        arg=('os',),\n        expr_form='list',\n        timeout=__opts__['timeout']\n    )\n\ndef hyper_cmd(cmd, *arg, **kwarg):\n    '''\n    Execute an arbitrary command on Minions which run hypervisors\n    '''\n    client = salt.client.get_local_client(__opts__['conf_file'])\n\n    return client.cmd(\n        hypers(client),\n        cmd,\n        arg=arg,\n        kwarg=kwarg,\n        expr_form='list',\n        timeout=__opts__['timeout']\n    )\n```", "```py\n# salt-run scan.hyper_os\nException occurred in runner scan.hyper_os: Traceback (most recent call last):\n File \"/usr/lib/python2.7/site-packages/salt/client/mixins.py\", line 340, in low\n data['return'] = self.functions[fun](*args, **kwargs)\n File \"/usr/lib/python2.7/site-packages/salt/runners/scan.py\", line 68, in hyper_os\n hypers(client),\n File \"/usr/lib/python2.7/site-packages/salt/runners/scan.py\", line 50, in hypers\n timeout=__opts__['timeout']\n File \"/usr/lib/python2.7/site-packages/salt/client/__init__.py\", line 562, in cmd\n **kwargs)\n File \"/usr/lib/python2.7/site-packages/salt/client/__init__.py\", line 317, in run_job\n raise SaltClientError(general_exception)\nSaltClientError: Salt request timed out. The master is not responding. If this error persists after verifying the master is up, worker_threads may need to be increased.\n\n```"]