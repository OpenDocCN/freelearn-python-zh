["```py\npython -m unittest stock_alerter.tests.test_stock\npython -m unittest stock_alerter.tests.test_stock.StockTest\n\n```", "```py\ndef suite():\n    test_suite = unittest.TestSuite()\n    test_suite.addTest(StockTest(\"test_stock_update\"))\n    return test_suite\n```", "```py\nimport unittest\n\nfrom stock_alerter.tests import test_stock\n\nif __name__ == \"__main__\":\n    runner = unittest.TextTestRunner()\n    runner.run(test_stock.suite())\n```", "```py\n.\n------------------------\nRan 1 test in 0.000s\n\nOK\n\n```", "```py\ndef suite():\n    loader = unittest.TestLoader()\n    test_suite = unittest.TestSuite()\n    test_suite.addTest(StockTest(\"test_stock_update\"))\n    test_suite.addTest(\n        loader.loadTestsFromTestCase(StockCrossOverSignalTest))\n    return test_suite\n```", "```py\ndef load_tests(loader, tests, pattern):\n    suite = unittest.TestSuite()\n    suite.addTest(loader.loadTestsFromTestCase(StockTest))\n    if not sys.platform.startswith(\"win\"):\n        suite.addTest(\n            loader.loadTestsFromTestCase(StockCrossOverSignalTest))\n    return suite\n```", "```py\n@unittest.skip(\"skip this test for now\")\ndef test_stock_update(self):\n    self.goog.update(datetime(2014, 2, 12), price=10)\n    assert_that(self.goog.price, equal_to(10))\n```", "```py\n........................................................s..\n-------------------------------------------------------------\nRan 59 tests in 0.094s\n\nOK (skipped=1)\n\n```", "```py\ntest_stock_update (stock_alerter.tests.test_stock.StockTest) ... skipped 'skip this test for now'\n\n```", "```py\n@unittest.skipIf(sys.platform.startswith(\"win\"), \"skip on windows\")\ndef test_stock_price_should_give_the_latest_price(self):\n    self.goog.update(datetime(2014, 2, 12), price=10)\n    self.goog.update(datetime(2014, 2, 13), price=8.4)\n    self.assertAlmostEqual(8.4, self.goog.price, delta=0.0001)\n```", "```py\n@unittest.skipUnless(sys.platform.startswith(\"win\"), \"only run on windows\")\ndef test_price_is_the_latest_even_if_updates_are_made_out_of_order(self):\n    self.goog.update(datetime(2014, 2, 13), price=8)\n    self.goog.update(datetime(2014, 2, 12), price=10)\n    self.assertEqual(8, self.goog.price)\n```", "```py\ndef test_stock_update(self):\n    self.goog.update(datetime(2014, 2, 12), price=10)\n    self.assertEqual(10, self.goog.price)\n\ntest_stock_update.slow = True\ntest_stock_update.integration = True\ntest_stock_update.python = [\"2.6\", \"3.4\"]\n```", "```py\nnose2 --plugin=nose2.plugins.attrib -A \"integration\"\n\n```", "```py\nnose2 --plugin=nose2.plugins.attrib -A \"python=2.6\"\n\n```", "```py\nnose2 --plugin=nose2.plugins.attrib -A \"!slow\"\n\n```", "```py\nnose2 --plugin=nose2.plugins.attrib -E \"integration and '2.6' in python\"\n\n```", "```py\nimport unittest\n\nclass AttribLoader(unittest.TestLoader):\n    def __init__(self, attrib):\n        self.attrib = attrib\n\n    def loadTestsFromModule(self, module, use_load_tests=False):\n        return super().loadTestsFromModule(module, use_load_tests=False)\n\n    def getTestCaseNames(self, testCaseClass):\n        test_names = super().getTestCaseNames(testCaseClass)\n        filtered_test_names = [test\n                               for test in test_names\n                               if hasattr(getattr(testCaseClass, test), self.attrib)]\n        return filtered_test_names\n\nif __name__ == \"__main__\":\n    loader = AttribLoader(\"slow\")\n    test_suite = loader.discover(\".\")\n    runner = unittest.TextTestRunner()\n    runner.run(test_suite)\n```", "```py\nclass AlertTest(unittest.TestCase):\n    @unittest.expectedFailure\n    def test_action_is_executed_when_rule_matches(self):\n        goog = mock.MagicMock(spec=Stock)\n        goog.updated = Event()\n        goog.update.side_effect = \\\n            lambda date, value: goog.updated.fire(self)\n        exchange = {\"GOOG\": goog}\n        rule = mock.MagicMock(spec=PriceRule)\n        rule.matches.return_value = True\n        rule.depends_on.return_value = {\"GOOG\"}\n        action = mock.MagicMock()\n        alert = Alert(\"sample alert\", rule, action)\n        alert.connect(exchange)\n        exchange[\"GOOG\"].update(datetime(2014, 2, 10), 11)\n        action.execute.assert_called_with(\"sample alerts\")\n```", "```py\n......x....................................................\n------------------------------------------------------------\nRan 59 tests in 0.188s\n\nOK (expected failures=1)\n\n```", "```py\ntest_action_is_executed_when_rule_matches (stock_alerter.tests.test_alert.AlertTest) ... expected failure\n\n```", "```py\nfrom nose2.tools.params import params\n\ndef given_a_series_of_prices(stock, prices):\n    timestamps = [datetime(2014, 2, 10), datetime(2014, 2, 11),\n                  datetime(2014, 2, 12), datetime(2014, 2, 13)]\n    for timestamp, price in zip(timestamps, prices):\n        stock.update(timestamp, price)\n\n@params(\n    ([8, 10, 12], True),\n    ([8, 12, 10], False),\n    ([8, 10, 10], False)\n)\ndef test_stock_trends(prices, expected_output):\n    goog = Stock(\"GOOG\")\n    given_a_series_of_prices(goog, prices)\n    assert goog.is_increasing_trend() == expected_output\n```", "```py\nclass StockTrendTest(unittest.TestCase):\n    def given_a_series_of_prices(self, stock, prices):\n        timestamps = [datetime(2014, 2, 10), datetime(2014, 2, 11),\n                      datetime(2014, 2, 12), datetime(2014, 2, 13)]\n        for timestamp, price in zip(timestamps, prices):\n            stock.update(timestamp, price)\n\n    def test_stock_trends(self):\n        dataset = [\n            ([8, 10, 12], True),\n            ([8, 12, 10], False),\n            ([8, 10, 10], False)\n        ]\n        for data in dataset:\n            prices, output = data\n            with self.subTest(prices=prices, output=output):\n                goog = Stock(\"GOOG\")\n                self.given_a_series_of_prices(goog, prices)\n                self.assertEqual(output, goog.is_increasing_trend())\n```", "```py\n.\n------------------------\nRan 1 test in 0.000s\n\nOK\n\n```", "```py\nclass StockTrendTest(unittest.TestCase):\n    def given_a_series_of_prices(self, stock, prices):\n        timestamps = [datetime(2014, 2, 10), datetime(2014, 2, 11),\n                      datetime(2014, 2, 12), datetime(2014, 2, 13)]\n        for timestamp, price in zip(timestamps, prices):\n            stock.update(timestamp, price)\n\n    def test_stock_trends(self):\n        dataset = [\n            ([8, 10, 12], True),\n            ([8, 12, 10], True),\n            ([8, 10, 10], True)\n        ]\n        for data in dataset:\n            prices, output = data\n            with self.subTest(prices=prices, output=output):\n                goog = Stock(\"GOOG\")\n                self.given_a_series_of_prices(goog, prices)\n                self.assertEqual(output, goog.is_increasing_trend())\n```", "```py\n======================================================================\nFAIL: test_stock_trends (stock_alerter.tests.test_stock.StockTrendTest) (output=True, prices=[8, 12, 10])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"c:\\Projects\\tdd_with_python\\src\\stock_alerter\\tests\\test_stock.py\", line 78, in test_stock_trends\n self.assertEqual(output, goog.is_increasing_trend())\nAssertionError: True != False\n\n======================================================================\nFAIL: test_stock_trends (stock_alerter.tests.test_stock.StockTrendTest) (output=True, prices=[8, 10, 10])\n----------------------------------------------------------------------\nTraceback (most recent call last):\n File \"c:\\Projects\\tdd_with_python\\src\\stock_alerter\\tests\\test_stock.py\", line 78, in test_stock_trends\n self.assertEqual(output, goog.is_increasing_trend())\nAssertionError: True != False\n\n----------------------------------------------------------------------\nRan 1 test in 0.000s\n\nFAILED (failures=2)\n\n```", "```py\ndef test_action_doesnt_fire_if_rule_doesnt_match(self):\n    goog = Stock(\"GOOG\")\n    exchange = {\"GOOG\": goog}\n    rule = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n    rule_spy = mock.MagicMock(wraps=rule)\n    action = mock.MagicMock()\n    alert = Alert(\"sample alert\", rule_spy, action)\n    alert.connect(exchange)\n    alert.check_rule(goog)\n    rule_spy.matches.assert_called_with(exchange)\n    self.assertFalse(action.execute.called)\n```", "```py\ndef test_action_fires_when_rule_matches(self):\n    goog = Stock(\"GOOG\")\n    exchange = {\"GOOG\": goog}\n    rule = mock.MagicMock()\n    rule.matches.return_value = True\n    rule.depends_on.return_value = {\"GOOG\"}\n    action = mock.MagicMock()\n    alert = Alert(\"sample alert\", rule, action)\n    alert.connect(exchange)\n    goog.update(datetime(2014, 5, 14), 11)\n    rule.matches.assert_called_with(exchange)\n    self.assertTrue(action.execute.called)\n```", "```py\n>>> from unittest import mock\n>>> obj = mock.Mock()\n\n```", "```py\n>>> child_obj1 = obj.child1\n>>> child_obj2 = obj.child2\n\n```", "```py\n>>> child_obj1.method1()\n<Mock name='mock.child1.method1()' id='56161448'>\n>>> child_obj2.method1()\n<Mock name='mock.child2.method1()' id='56161672'>\n>>> child_obj2.method2()\n<Mock name='mock.child2.method2()' id='56162008'>\n>>> obj.method()\n<Mock name='mock.method()' id='56162232'>\n\n```", "```py\n>>> child_obj1.mock_calls\n[call.method1()]\n>>> child_obj2.mock_calls\n[call.method1(), call.method2()]\n\n```", "```py\n>>> obj.mock_calls\n[call.child1.method1(),\n call.child2.method1(),\n call.child2.method2(),\n call.method()]\n\n```", "```py\ndef test_action_fires_when_rule_matches(self):\n    goog = Stock(\"GOOG\")\n    exchange = {\"GOOG\": goog}\n    main_mock = mock.MagicMock()\n    rule = main_mock.rule\n    rule.matches.return_value = True\n    rule.depends_on.return_value = {\"GOOG\"}\n    action = main_mock.action\n    alert = Alert(\"sample alert\", rule, action)\n    alert.connect(exchange)\n    goog.update(datetime(2014, 5, 14), 11)\n    main_mock.assert_has_calls(\n        [mock.call.rule.matches(exchange),\n         mock.call.action.execute(\"sample alert\")])\n```", "```py\ndef test_action_fires_when_rule_matches(self):\n    goog = Stock(\"GOOG\")\n    exchange = {\"GOOG\": goog}\n    main_mock = mock.MagicMock()\n    rule = main_mock.rule\n    rule.matches.return_value = True\n    rule.depends_on.return_value = {\"GOOG\"}\n    action = main_mock.action\n    alert = Alert(\"sample alert\", rule, action)\n    alert.connect(exchange)\n    goog.update(datetime(2014, 5, 14), 11)\n    self.assertEqual([mock.call.rule.depends_on(),\n                      mock.call.rule.matches(exchange),\n                      mock.call.action.execute(\"sample alert\")],\n                     main_mock.mock_calls)\n```", "```py\nclass FileReader:\n    \"\"\"Reads a series of stock updates from a file\"\"\"\n    def __init__(self, filename):\n        self.filename = filename\n\n    def get_updates(self):\n        \"\"\"Returns the next update everytime the method is called\"\"\"\n\n        with open(self.filename, \"r\") as fp:\n            for line in fp:\n                symbol, time, price = line.split(\",\")\n                yield (symbol, datetime.strptime(time, \"%Y-%m-%dT%H:%M:%S.%f\"), int(price))\n```", "```py\nclass FileReaderTest(unittest.TestCase):\n    @mock.patch(\"builtins.open\",\n                mock.mock_open(read_data=\"\"\"\\\n                GOOG,2014-02-11T14:10:22.13,10\"\"\"))\n    def test_FileReader_returns_the_file_contents(self):\n        reader = FileReader(\"stocks.txt\")\n        updater = reader.get_updates()\n        update = next(updater)\n        self.assertEqual((\"GOOG\",\n                          datetime(2014, 2, 11, 14, 10, 22, 130000),\n                          10), update)\n```", "```py\nupdater = reader.get_updates()\n```", "```py\n>>> from unittest import mock\n>>> param = [\"abc\"]\n>>> obj = mock.Mock()\n>>> _ = obj(param)\n>>> param[0] = \"123\"\n\n>>> obj.assert_called_with([\"abc\"])\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"C:\\Python34\\lib\\unittest\\mock.py\", line 760, in assert_called_with\n raise AssertionError(_error_message()) from cause\nAssertionError: Expected call: mock(['abc'])\nActual call: mock(['123'])\n\n```", "```py\nAssertionError: Expected call: mock(['abc'])\nActual call: mock(['123'])\n\n```", "```py\n>>> param = [\"abc\"]\n>>> obj = mock.Mock()\n>>> _ = obj(param)\n\n```", "```py\n>>> from copy import deepcopy\n>>>\n>>> class CopyingMock(mock.MagicMock):\n...     def __call__(self, *args, **kwargs):\n...         args = deepcopy(args)\n...         kwargs = deepcopy(kwargs)\n...         return super().__call__(*args, **kwargs)\n\n```", "```py\n>>> param = [\"abc\"]\n>>> obj = CopyingMock()\n>>> _ = obj(param)\n>>> param[0] = \"123\"\n>>> obj.assert_called_with([\"abc\"])\n\n```", "```py\n>>> class MyObj:\n...     pass\n...\n>>> param = MyObj()\n>>> obj = CopyingMock()\n>>> _ = obj(param)\n\n>>> obj.assert_called_with(param)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"C:\\Python34\\lib\\unittest\\mock.py\", line 760, in assert_called_with\n raise AssertionError(_error_message()) from cause\nAssertionError: Expected call: mock(<__main__.MyObj object at 0x00000000026BAB70>)\nActual call: mock(<__main__.MyObj object at 0x00000000026A8E10>)\n\n```"]