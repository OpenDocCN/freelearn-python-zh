["```py\npython -m venv env/educa \n```", "```py\nsource env/educa/bin/activate \n```", "```py\n.\\env\\educa\\Scripts\\activate \n```", "```py\npython -m pip install Django~=5.0.4 \n```", "```py\npython -m pip install Pillow==10.3.0 \n```", "```py\ndjango-admin startproject educa \n```", "```py\ncd educa\ndjango-admin startapp courses \n```", "```py\nINSTALLED_APPS = [\n    **'courses.apps.CoursesConfig'****,**\n'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n] \n```", "```py\nMEDIA_URL = 'media/'\nMEDIA_ROOT = BASE_DIR / 'media' \n```", "```py\n**from** **django.conf** **import** **settings**\n**from** **django.conf.urls.static** **import** **static**\nfrom django.contrib import admin\nfrom django.urls import path\nurlpatterns = [\n    path('admin/', admin.site.urls),\n]\n**if** **settings.DEBUG:**\n **urlpatterns += static(**\n **settings.MEDIA_URL, document_root=settings.MEDIA_ROOT**\n **)** \n```", "```py\nSubject 1\n  Course 1\n    Module 1\n      Content 1 (image)\n      Content 2 (text)\n    Module 2\n      Content 3 (text)\n      Content 4 (file)\n      Content 5 (video)\n      ... \n```", "```py\n**from** **django.contrib.auth.models** **import** **User**\nfrom django.db import models\n**class****Subject****(models.Model):**\n **title = models.CharField(max_length=****200****)**\n **slug = models.SlugField(max_length=****200****, unique=****True****)**\n**class****Meta****:**\n **ordering = [****'title'****]**\n**def****__str__****(****self****):**\n**return** **self.title**\n**class****Course****(models.Model):**\n **owner = models.ForeignKey(**\n **User,**\n **related_name=****'****courses_created'****,**\n **on_delete=models.CASCADE**\n **)**\n **subject = models.ForeignKey(**\n **Subject,**\n **related_name=****'courses'****,**\n **on_delete=models.CASCADE**\n **)**\n **title = models.CharField(max_length=****200****)**\n **slug = models.SlugField(max_length=****200****, unique=****True****)**\n **overview = models.TextField()**\n **created = models.DateTimeField(auto_now_add=****True****)**\n**class****Meta****:**\n **ordering = [****'-created'****]**\n**def****__str__****(****self****):**\n**return** **self.title**\n**class****Module****(models.Model):**\n **course = models.ForeignKey(**\n **Course, related_name=****'modules'****, on_delete=models.CASCADE**\n **)**\n **title = models.CharField(max_length=****200****)**\n **description = models.TextField(blank=****True****)**\n**def****__str__****(****self****):**\n**return** **self.title** \n```", "```py\npython manage.py makemigrations \n```", "```py\nMigrations for 'courses':\n  courses/migrations/0001_initial.py:\n    - Create model Course\n    - Create model Module\n    - Create model Subject\n    - Add field subject to course \n```", "```py\npython manage.py migrate \n```", "```py\nApplying courses.0001_initial... OK \n```", "```py\nfrom django.contrib import admin\n**from** **.models** **import** **Subject, Course, Module**\n**@admin.register(****Subject****)**\n**class****SubjectAdmin****(admin.ModelAdmin):**\n **list_display = [****'title'****,** **'slug'****]**\n **prepopulated_fields = {****'slug'****: (****'title'****,)}**\n**class****ModuleInline****(admin.StackedInline):**\n **model = Module**\n**@admin.register(****Course****)**\n**class****CourseAdmin****(admin.ModelAdmin):**\n **list_display = [****'title'****,** **'subject'****,** **'created'****]**\n **list_filter = [****'created'****,** **'subject'****]**\n **search_fields = [****'title'****,** **'overview'****]**\n **prepopulated_fields = {****'slug'****: (****'title'****,)}**\n **inlines = [ModuleInline]** \n```", "```py\npython manage.py createsuperuser \n```", "```py\npython manage.py runserver \n```", "```py\npython manage.py dumpdata courses --indent=2 \n```", "```py\n[\n{\n  \"model\": \"courses.subject\",\n  \"pk\": 1,\n  \"fields\": {\n    \"title\": \"Mathematics\",\n    \"slug\": \"mathematics\"\n  }\n},\n{\n  \"model\": \"courses.subject\",\n  \"pk\": 2,\n  \"fields\": {\n    \"title\": \"Music\",\n    \"slug\": \"music\"\n  }\n},\n{\n  \"model\": \"courses.subject\",\n  \"pk\": 3,\n  \"fields\": {\n    \"title\": \"Physics\",\n    \"slug\": \"physics\"\n  }\n},\n{\n  \"model\": \"courses.subject\",\n  \"pk\": 4,\n  \"fields\": {\n    \"title\": \"Programming\",\n    \"slug\": \"programming\"\n  }\n}\n] \n```", "```py\nmkdir courses/fixtures\npython manage.py dumpdata courses --indent=2 --output=courses/fixtures/subjects.json \n```", "```py\npython manage.py loaddata subjects.json \n```", "```py\nfrom django.contrib.contenttypes.fields import GenericForeignKey\nfrom django.contrib.contenttypes.models import ContentType \n```", "```py\nclass Content(models.Model):\n    module = models.ForeignKey(\n        Module,\n        related_name='contents',\n        on_delete=models.CASCADE\n    )\n    content_type = models.ForeignKey(\n        ContentType,\n        on_delete=models.CASCADE\n    )\n    object_id = models.PositiveIntegerField()\n    item = GenericForeignKey('content_type', 'object_id') \n```", "```py\nfrom django.db import models\nclass BaseContent(models.Model):\n    title = models.CharField(max_length=100)\n    created = models.DateTimeField(auto_now_add=True)\n    class Meta:\n        abstract = True\nclass Text(BaseContent):\n    body = models.TextField() \n```", "```py\nfrom django.db import models\nclass BaseContent(models.Model):\n    title = models.CharField(max_length=100)\n    created = models.DateTimeField(auto_now_add=True)\nclass Text(BaseContent):\n    body = models.TextField() \n```", "```py\nfrom django.db import models\nfrom django.utils import timezone\nclass BaseContent(models.Model):\n    title = models.CharField(max_length=100)\n    created = models.DateTimeField(auto_now_add=True)\nclass OrderedContent(BaseContent):\n    class Meta:\n        proxy = True\n        ordering = ['created']\n    def created_delta(self):\n        return timezone.now() - self.created \n```", "```py\nclass ItemBase(models.Model):\n    owner = models.ForeignKey(User,\n        related_name='%(class)s_related',\n        on_delete=models.CASCADE\n    )\n    title = models.CharField(max_length=250)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    class Meta:\n        abstract = True\ndef __str__(self):\n        return self.title\nclass Text(ItemBase):\n    content = models.TextField()\nclass File(ItemBase):\n    file = models.FileField(upload_to='files')\nclass Image(ItemBase):\n    file = models.FileField(upload_to='images')\nclass Video(ItemBase):\n    url = models.URLField() \n```", "```py\ncontent_type = models.ForeignKey(\n        ContentType,\n        on_delete=models.CASCADE,\n **limit_choices_to={**\n**'model__in'****:(****'text'****,** **'video'****,** **'image'****,** **'file'****)**\n **}**\n    ) \n```", "```py\npython manage.py makemigrations \n```", "```py\nMigrations for 'courses':\n  courses/migrations/0002_video_text_image_file_content.py\n    - Create model Video\n    - Create model Text\n    - Create model Image\n    - Create model File\n    - Create model Content \n```", "```py\npython manage.py migrate \n```", "```py\nApplying courses.0002_video_text_image_file_content... OK \n```", "```py\nfrom django.core.exceptions import ObjectDoesNotExist\nfrom django.db import models\nclass OrderField(models.PositiveIntegerField):\n    def __init__(self, for_fields=None, *args, **kwargs):\n        self.for_fields = for_fields\n        super().__init__(*args, **kwargs)\n    def pre_save(self, model_instance, add):\n        if getattr(model_instance, self.attname) is None:\n            # no current value\ntry:\n                qs = self.model.objects.all()\n                if self.for_fields:\n                    # filter by objects with the same field values\n# for the fields in \"for_fields\"\n                    query = {\n                        field: getattr(model_instance, field)\n                        for field in self.for_fields\n                    }\n                    qs = qs.filter(**query)\n                # get the order of the last item\n                last_item = qs.latest(self.attname)\n                value = getattr(last_item, self.attname) + 1\nexcept ObjectDoesNotExist:\n                value = 0\nsetattr(model_instance, self.attname, value)\n            return value\n        else:\n            return super().pre_save(model_instance, add) \n```", "```py\n**from** **.fields** **import** **OrderField**\nclass Module(models.Model):\n    # ...\n **order = OrderField(blank=****True****, for_fields=[****'course'****])** \n```", "```py\nclass Module(models.Model):\n    # ...\ndef __str__(self):\n**return****f'****{self.order}****.** **{self.title}****'** \n```", "```py\nclass Content(models.Model):\n    # ...\n **order = OrderField(blank=****True****, for_fields=[****'module'****])** \n```", "```py\nclass Module(models.Model):\n    # ...\n**class****Meta****:**\n **ordering = [****'order'****]**\nclass Content(models.Model):\n    # ...\n**class****Meta****:**\n **ordering = [****'order'****]** \n```", "```py\nclass Module(models.Model):\n    course = models.ForeignKey(\n        Course, related_name='modules', on_delete=models.CASCADE\n    )\n    title = models.CharField(max_length=200)\n    description = models.TextField(blank=True)\n    order = OrderField(blank=True, for_fields=['course'])\n    class Meta:\n        ordering = ['order']\n    def __str__(self):\n        return f'{self.order}. {self.title}'\nclass Content(models.Model):\n    module = models.ForeignKey(\n        Module,\n        related_name='contents',\n        on_delete=models.CASCADE\n    )\n    content_type = models.ForeignKey(\n        ContentType,\n        on_delete=models.CASCADE,\n        limit_choices_to={\n            'model__in':('text', 'video', 'image', 'file')\n        }\n    )\n    object_id = models.PositiveIntegerField()\n    item = GenericForeignKey('content_type', 'object_id')\n    order = OrderField(blank=True, for_fields=['module'])\n    class Meta:\n            ordering = ['order'] \n```", "```py\npython manage.py makemigrations courses \n```", "```py\nIt is impossible to add a non-nullable field 'order' to content without specifying a default. This is because the database needs something to populate existing rows.\nPlease select a fix:\n 1) Provide a one-off default now (will be set on all existing rows with a null value for this column)\n 2) Quit and manually define a default value in models.py.\nSelect an option: \n```", "```py\nPlease enter the default value as valid Python.\nThe datetime and django.utils.timezone modules are available, so it is possible to provide e.g. timezone.now as a value.\nType 'exit' to exit this prompt\n>>> \n```", "```py\nMigrations for 'courses':\ncourses/migrations/0003_alter_content_options_alter_module_options_and_more.py\n    - Change Meta options on content\n    - Change Meta options on module\n    - Add field order to content\n    - Add field order to module \n```", "```py\npython manage.py migrate \n```", "```py\nApplying courses.0003_alter_content_options_alter_module_options_and_more... OK \n```", "```py\npython manage.py shell \n```", "```py\n>>> from django.contrib.auth.models import User\n>>> from courses.models import Subject, Course, Module\n>>> user = User.objects.last()\n>>> subject = Subject.objects.last()\n>>> c1 = Course.objects.create(subject=subject, owner=user, title='Course 1', slug='course1') \n```", "```py\n>>> m1 = Module.objects.create(course=c1, title='Module 1')\n>>> m1.order\n0 \n```", "```py\n>>> m2 = Module.objects.create(course=c1, title='Module 2')\n>>> m2.order\n1 \n```", "```py\n>>> m3 = Module.objects.create(course=c1, title='Module 3', order=5)\n>>> m3.order\n5 \n```", "```py\n>>> m4 = Module.objects.create(course=c1, title='Module 4')\n>>> m4.order\n6 \n```", "```py\n>>> c2 = Course.objects.create(subject=subject, title='Course 2', slug='course2', owner=user)\n>>> m5 = Module.objects.create(course=c2, title='Module 1')\n>>> m5.order\n0 \n```", "```py\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nfrom django.contrib import admin\n**from** **django.contrib.auth** **import** **views** **as** **auth_views**\nfrom django.urls import path\nurlpatterns = [\n **path(**\n**'accounts/login/'****, auth_views.LoginView.as_view(), name=****'login'**\n **),**\n **path(**\n**'accounts/logout/'****,**\n **auth_views.LogoutView.as_view(),**\n **name=****'logout'**\n **),**\n    path('admin/', admin.site.urls),\n]\nif settings.DEBUG:\n    urlpatterns += static(\n        settings.MEDIA_URL, document_root=settings.MEDIA_ROOT\n    ) \n```", "```py\ntemplates/\n    base.html\n    registration/\n        login.html\n        logged_out.html \n```", "```py\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n<meta charset=\"utf-8\" />\n<title>{% block title %}Educa{% endblock %}</title>\n<link href=\"{% static \"css/base.css\" %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"header\">\n<a href=\"/\" class=\"logo\">Educa</a>\n<ul class=\"menu\">\n        {% if request.user.is_authenticated %}\n          <li>\n<form action=\"{% url \"logout\" %}\" method=\"post\">\n<button type=\"submit\">Sign out</button>\n</form>\n</li>\n        {% else %}\n          <li><a href=\"{% url \"login\" %}\">Sign in</a></li>\n        {% endif %}\n      </ul>\n</div>\n<div id=\"content\">\n      {% block content %}\n      {% endblock %}\n    </div>\n<script>\n document.addEventListener('DOMContentLoaded', (event) => {\n // DOM loaded\n        {% block domready %}\n        {% endblock %}\n      })\n </script>\n</body>\n</html> \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Log-in{% endblock %}\n{% block content %}\n  <h1>Log-in</h1>\n<div class=\"module\">\n    {% if form.errors %}\n      <p>Your username and password didn't match. Please try again.</p>\n    {% else %}\n      <p>Please, use the following form to log-in:</p>\n    {% endif %}\n    <div class=\"login-form\">\n<form action=\"{% url 'login' %}\" method=\"post\">\n        {{ form.as_p }}\n        {% csrf_token %}\n        <input type=\"hidden\" name=\"next\" value=\"{{ next }}\" />\n<p><input type=\"submit\" value=\"Log-in\"></p>\n</form>\n</div>\n</div>\n{% endblock %} \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Logged out{% endblock %}\n{% block content %}\n  <h1>Logged out</h1>\n<div class=\"module\">\n<p>\n      You have been successfully logged out.\n      You can <a href=\"{% url \"login\" %}\">log-in again</a>.\n     </p>\n</div>\n{% endblock %} \n```", "```py\npython manage.py runserver \n```"]