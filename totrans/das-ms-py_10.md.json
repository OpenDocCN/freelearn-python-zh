["```py\nscheduler = rx.concurrency.AsyncIOScheduler ()  \n\n```", "```py\n      louder = rx.Observable.merge(elephant,\n      lion).select(sometimes_loud) \n\n```", "```py\n      out = rx.Observable.merge(fox, snake, louder)\n      .do_action(on_next = output) \n\n```", "```py\n      done = asyncio.Future() \n      out.subscribe(on_completed = (lambda:\n      done.set_result(True))) \n      return done \n\n```", "```py\nrx.Observable.create((lambda obs: obs.on_next('Hi!'))) \n\n```", "```py\nhelp(rx.Observable.select_many)  \n\n```", "```py\nhelp (rx.Observable.empty) \n\n```", "```py\nhelp (rx.Observable.return_value)  \n\n```", "```py\nhelp (rx.Observable.where)  \n\n```"]