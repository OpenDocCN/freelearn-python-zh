- en: Appendix A. Answers to Pop Quizes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – doctest syntax
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Test expression always start with `>>>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Continuation on lines always start with ...
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The expected output begins immediately after the expression, and continues until
    the next blank line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: By using the normalize whitespace directive.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: doctest ignores everything between the `Traceback (most recent last call)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All of the later code within the same text file can see the variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We care because tests are supposed to be isolated from each other, and if two
    tests use the same variable, they can influence each others' results.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can represent that section with an ellipsis(`...`) in the expected output.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – understanding units
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '3 units exist: `__init__`, `method1` and `method2`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Both `method1` and `method2` assume the correct operation of `__init__`, and
    additionally `method2` assumes the correct operation of `method1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tests for `method2` would need to use a fake `method1`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pop quiz – unit testing during design
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tests we're building now are the foundation of the whole development process.
    The choices we make here affect everything that comes after; it's important to
    do it right.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the people who write the specification aren't the same people who are writing
    the code, then it's important for the coders to start involving themselves as
    soon as possible, to keep the whole process within the bounds of what can usefully
    be done. If the specifiers are the coders, then the question is academic.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The big advantage is that the tests allow the code's interfaces to be test-driven,
    before the effort gets put into actually implementing them. The primary disadvantage
    is that the tests can lock in a design which might have benefitted from further
    evolution.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pop quiz – unit testing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The test should be written before the code that will be tested, based on the
    expectations for that code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: True.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tests should be run as often as possible. It is very useful to run the tests
    regularly while coding, as well as just before storing the code into a version
    control system.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You will spend most of you time using the output of the tests as a tool to guide
    you in finding and fixing errors in the code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 4
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – Mocker usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`IN`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pass `None` as the upper bound.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: It checks that the mocked objects were actually used in the way that we described.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – basic unittest knowledge
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_OL
  type: TYPE_PRE
- en: Use the `assertAlmostEqual` method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You would use `assertTrue` if none of the more specialized assertions suited
    your needs. You would use `fail` if you needed to express the conditions for test
    failure, so complex that they don't fit comfortably into a single Boolean expression.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pop quiz – text fixtures
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To provide each test with an identical, isolated environment.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `setUp` and/or `tearDown` methods to a `TestCase` subclass.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A test fixture can consist of either or both methods, so the answer is yes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – testing with Nose
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: put `processes=4` in your Nose configuration file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: add `--include="specs"` to the Nose command line.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`unit_tests`, `TestFiles`, and `test_files` will be recognized.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – test-driven development
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Because the testable specification didn't follow unit testing discipline, it
    didn't satisfy my need for unit tests. I had to write additional tests to fill
    that need. It's fine to do that, as long as I don't skimp on the real unit tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In no way. It's actually desirable to run your tests as often as possible.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You've lost the opportunity to give your code's planned interface a test drive
    before you set it in stone. You've lost the opportunity to write down your expectations
    without having them contaminated by the actual behavior of your first implementation.
    You've lost the opportunity to have the computer tell you what needs to be done
    to create a working implementation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – the Twill language
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whatever form was last touched by the `formvalue` command is submitted.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `notfind` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Twill will report that the entire script failed, and not execute any of the
    later commands.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pop quiz – browser methods
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The value you pass as a parameter is matched against the form's name, number,
    and ID.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `clicked` method moves the simulated input focus to a new control on the
    web page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `code` command checks the response code and raises an exception if it doesn't
    match an expected value. The `get_code` method simply returns the response code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – diagramming integration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Those units wouldn't exist within the same class if they weren't related to
    each other. By grouping them into their classes visually, we can take advantage
    of that relationship to make our diagrams more easily.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Usually, it saves us trouble later on. Things that are related to each other
    at one level are often part of the same thing at a higher level.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In testing, as in chemistry, it's important to change only one thing at a time.
    If we pull together more than two things in a single step, we've changed more
    than one thing, and so we can lose track of where any problems we find came from.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pop quiz – writing integration tests
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The ones in the smallest circles, especially if they don't have any lines pointing
    from themselves to other circles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Start from the smallest circles involving that code, and build up step by step
    until you're ready to integrate it with your earlier code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we were doing unit testing, even other instances of the same class were
    mocked; we were concerned that this code did what it was supposed to, without
    involving anything else. Now that we're doing integration testing, we need to
    test that instances of the same class interact correctly with each other, or with
    themselves when they're allowed to retain state from one operation to the next.
    The two kinds of tests cover different things, so it makes sense that we would
    need both.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A system test is the final stage of integration testing. It's a test that involves
    the whole code base.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Chapter 10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz – code coverage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It means that most of the code base was executed while running the tests.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: That would be a bad idea, because coverage doesn't tell you anything about the
    quality of your tests. It's for helping you find things that need to be tested,
    not for telling you whether your tests are any good.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The most useful information that the coverage report provides is the list of
    lines that weren't executed, because that's what allows you to know what new tests
    you might want to add.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pop quiz – version control hooks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It can ensure that your tests are executed frequently, and can make you immediately
    aware when you're checking in broken code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Don't make it impossible to check in broken code. Don't make version control
    hooks a matter of company policy.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In a centralized version control system, the hooks are usually under the control
    of a system administrator, and executed on a server. In a distributed version
    control system, the hooks are usually under the control of the user, and executed
    on the user's computer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
