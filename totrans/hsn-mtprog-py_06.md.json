["```py\nclass TestForType:  \n```", "```py\n    pass  \n```", "```py\ntype(TestForType)\n```", "```py\ntype\n```", "```py\ntype(int)\n```", "```py\ntype\n```", "```py\ntype(str)\n```", "```py\ntype\n```", "```py\ntype(object)\n```", "```py\ntype\n```", "```py\ntype(float)\n```", "```py\ntype\n```", "```py\ntype(list)\n```", "```py\ntype\n```", "```py\nclass ExampleMetaClass1(type):  \n```", "```py\n    def __new__(classitself, *args):  \n```", "```py\n        print('class itself: ', classitself)  \n```", "```py\n        print('Others: ', args)  \n```", "```py\n        return type.__new__(classitself, *args)  \n```", "```py\nclass ExampleClass1(metaclass = ExampleMetaClass1):      \n```", "```py\n    int1 = 123  \n```", "```py\n    str1 = 'test'  \n```", "```py\n    def test():  \n```", "```py\n        print('test')  \n```", "```py\nclass itself:  <class '__main__.ExampleMetaClass1'>\n```", "```py\nOthers:  ('ExampleClass1', (), {'__module__': '__main__', '__qualname__': 'ExampleClass1', 'int1': 123, 'str1': 'test', 'test': <function ExampleClass1.test at 0x00000194A377E1F0>})\n```", "```py\n    class ExampleMetaClass2(type):  \n        def __new__(classitself, classname, baseclasses, \n                    attributes):  \n            print('class itself: ', classitself)  \n            print('class name: ', classname)  \n            print('parent class list: ', baseclasses)  \n            print('attribute list: ', attributes)  \n            return type.__new__(classitself, classname, \n                baseclasses, attributes)  \n    ```", "```py\n    class ExampleParentClass1():      \n           def test1():  \n                print('parent1 - test1')  \n    class ExampleParentClass2():      \n           def test2():  \n                print('parent2 - test2')  \n    ```", "```py\n    class ExampleClass2(ExampleParentClass1,ExampleParentClass2, metaclass = ExampleMetaClass2):      \n        int1 = 123  \n        str1 = 'test'  \n\n        def test3():  \n            print('child1 - test3')  \n    ```", "```py\n    class itself:  <class '__main__.ExampleMetaClass2'>\n    class name:  ExampleClass2\n    parent class:  (<class '__main__.ExampleParentClass1'>, <class '__main__.ExampleParentClass2'>)\n    attributes:  {'__module__': '__main__', '__qualname__': 'ExampleClass2', 'int1': 123, 'str1': 'test', 'test3': <function ExampleClass2.test3 at 0x00000194A3994E50>}\n    ```", "```py\n    type(ExampleParentClass1)\n    type\n    type(ExampleParentClass2)\n    type\n    type(ExampleMetaClass2)\n    type\n    type(ExampleClass2)\n    __main__.ExampleMetaClass2\n    ```", "```py\n    class BranchMetaclass(type):  \n    ```", "```py\n        def __new__(classitself, classname, baseclasses, \n             attributes):  \n            import inspect  \n    ```", "```py\n         newattributes = {}  \n    ```", "```py\n    for attribute, value in attributes.items():  \n                if attribute.startswith(\"__\"):  \n                    newattributes[attribute] = value  \n                elif inspect.isfunction(value):  \n                    newattributes['branch' +\n                        attribute.title()] = value for a\n                        attribute, value in \n                        attributes.items():\n                if attribute.startswith(\"__\"):  \n                    newattributes[attribute] = value  \n                elif inspect.isfunction(value):  \n                    newattributes['branch' + \n                        attribute.title()] = value  \n    ```", "```py\n    else:  \n                    newattributes[attribute] = value  \n    ```", "```py\n                         return type.__new__(classitself, \n                             classname, baseclasses, \n                             newattributes) \n    ```", "```py\n    def buy_product(product,unit_price,quantity,statetax_rate,promotiontype):  \n            statetax_rate = statetax_rate          \n            initialprice = unit_price*quantity   \n            sales_price = initialprice + \n                initialprice*statetax_rate  \n            return sales_price, product,promotiontype  \n    ```", "```py\nclass Brooklyn(metaclass = BranchMetaclass):  \n    product_id = 100902  \n    product_name = 'Iphone X'  \n    product_category = 'Electronics'  \n    unit_price = 700  \n\n    def maintenance_cost(self,product_type, quantity):\n        self.product_type = product_type  \n        self.quantity = quantity  \n        cold_storage_cost = 100  \n        if (product_type == 'Electronics'):  \n            maintenance_cost = self.quantity * 0.25 + \n                cold_storage_cost      \n            return maintenance_cost  \n        else:  \n            return \"We don't stock this product\"  \n```", "```py\n    dir(Brooklyn)\n    ['__class__',\n     '__delattr__',\n     '__dict__',\n     ‚__dir__',\n     ‚__doc__',\n     ‚__eq__',\n     ‚__format__',\n     ‚__ge__',\n     ‚__getattribute__',\n     ‚__gt__',\n     ‚__hash__',\n     ‚__init__',\n     ‚__init_subclass__',\n     ‚__le__',\n     ‚__lt__',\n     ‚__module__',\n     ‚__ne__',\n     ‚__new__',\n     ‚__reduce__',\n     ‚__reduce_ex__',\n     ‚__repr__',\n     ‚__setattr__',\n     ‚__sizeof__',\n     ‚__str__',\n     ‚__subclasshook__',\n     ‚__weakref__',\n     'branchMaintenance_cost',\n     'product_category',\n     'product_id',\n     'product_name',\n     'unit_price']\n    ```", "```py\n    brooklyn = Brooklyn()\n    brooklyn.branchMaintenance_Cost('Electronics',10)\n    102.5\n    brooklyn.product_id\n    100902\n    brooklyn.product_name\n    'Iphone X'\n    brooklyn.product_type\n    'Electronics'\n    ```", "```py\nclass Queens(BranchMetaclass):  \n```", "```py\n    def maintenance_cost(product_type, quantity):  \n```", "```py\n        product_type = product_type  \n```", "```py\n        quantity = quantity  \n```", "```py\n        if (product_type == ‹FMCG›):  \n```", "```py\n            maintenance_cost = quantity * 0.05  \n```", "```py\n            return maintenance_cost  \n```", "```py\n        else:  \n```", "```py\n            return \"We don't stock this product\"  \n```", "```py\nqueens = Queens()\n```", "```py\nQueens.maintenance_cost('FMCG',120)\n```", "```py\n6.0\n```", "```py\nQueens.buy_product('Iphone',1000,1,0.04,None)\n```", "```py\n(1040.0, 'Iphone', None)\n```", "```py\nclass Queens(BranchMetaclass, metaclass = BranchMetaclass):  \n```", "```py\n    def maintenance_cost(product_type, quantity):  \n```", "```py\n        product_type = product_type  \n```", "```py\n        quantity = quantity  \n```", "```py\n        if (product_type == ‹FMCG›):  \n```", "```py\n            maintenance_cost = quantity * 0.05  \n```", "```py\n            return maintenance_cost  \n```", "```py\n        else:  \n```", "```py\n            return \"We don't stock this product\"  \n```", "```py\nQueens.branchMaintenance_Cost('FMCG',2340)\n```", "```py\n117.0\n```", "```py\nQueens.buy_product('Iphone',1500,1,0.043,None)\n```", "```py\n(1564.5, 'Iphone', None)\n```", "```py\nclass IncomeStatementMetaClass(type):  \n```", "```py\n    def __new__(classitself, classname, baseclasses, \n```", "```py\n                attributes):  \n```", "```py\n        newattributes = {}  \n```", "```py\n        for attribute, value in attributes.items():  \n```", "```py\n            if attribute.startswith(\"__\"):  \n```", "```py\n                newattributes[attribute] = value  \n```", "```py\n            elif («revenue» in attribute) or \\  \n```", "```py\n            (\"expense\" in attribute) or \\  \n```", "```py\n            (\"profit\" in attribute) or \\  \n```", "```py\n            (\"loss\" in attribute):  \n```", "```py\n                newattributes['IncomeStatement_' + \n```", "```py\n                    attribute.title()] = value  \n```", "```py\n            else:  \n```", "```py\n                newattributes[attribute] = value  \n```", "```py\n        return type.__new__(classitself, classname, \n```", "```py\n            baseclasses, newattributes)  \n```", "```py\nclass Malibu(metaclass = IncomeStatementMetaClass):  \n```", "```py\n    profit = 4354365  \n```", "```py\n    loss = 43000  \n```", "```py\n    assets = 15000  \n```", "```py\n    liabilities = 4000  \n```", "```py\n    def calc_revenue(quantity,unitsales_price):  \n```", "```py\n        totalrevenue = quantity * unitsales_price   \n```", "```py\n        return totalrevenue  \n```", "```py\n    def calc_expense(totalrevenue,netincome, netloss):  \n```", "```py\n        totalexpense = totalrevenue - (netincome + netloss)  \n```", "```py\n        return totalexpense    \n```", "```py\n    def calc_totalassets(cash,inventory,accountsreceivable):\n```", "```py\n        totalassets = cash + inventory + accountsreceivable  \n```", "```py\n        return totalassets  \n```", "```py\n    def calc_totalliabilities(debt,accruedexpense,\n```", "```py\n         accountspayable):  \n```", "```py\n        totalliabilities = debt + accruedexpense + \n```", "```py\n            accountspayable  \n```", "```py\n        return totalliabilities  \n```", "```py\nclass BalanceSheetMetaClass(type):  \n```", "```py\n    def __new__(classitself, classname, baseclasses, \n```", "```py\n                attributes):  \n```", "```py\n        newattributes = {}  \n```", "```py\n        for attribute, value in attributes.items():  \n```", "```py\n            if attribute.startswith(\"__\"):  \n```", "```py\n                newattributes[attribute] = value  \n```", "```py\n            elif («assets» in attribute) or \\  \n```", "```py\n            (\"liabilities\" in attribute) or \\  \n```", "```py\n            (\"goodwill\" in attribute) or \\  \n```", "```py\n            (\"cash\" in attribute):  \n```", "```py\n                newattributes['BalanceSheet_' + \n```", "```py\n                    attribute.title()] = value  \n```", "```py\n            else:  \n```", "```py\n                newattributes[attribute] = value  \n```", "```py\n        return type.__new__(classitself, classname, \n```", "```py\n            baseclasses, newattributes)  \n```", "```py\n    class California(metaclass = IncomeStatementMetaClass):  \n        profit = 4354365  \n        loss = 43000  \n        def calc_revenue(quantity,unitsales_price):  \n            totalrevenue = quantity * unitsaleprice   \n            return totalrevenue  \n\n        def calc_expense(totalrevenue,netincome, netloss):  \n            totalexpense = totalrevenue - (netincome + netloss)  \n            return totalexpense   \n    ```", "```py\n    class Pasadena(California,metaclass = BalanceSheetMetaClass):  \n        assets = 18000  \n        liabilities = 5000  \n        def calc_totalassets(cash,inventory,\n            accountsreceivable):  \n            totalassets = cash + inventory + \n                accountsreceivable  \n            return totalassets  \n\n        def calc_totalliabilities(debt,accruedexpense,\n            accountspayable):  \n            totalliabilities = debt + accruedexpense + \n                accountspayable  \n            return totalliabilities  \n    ```", "```py\n    class BalanceSheetMetaClass(IncomeStatementMetaClass):  \n        def __new__(classitself, classname, baseclasses, \n                    attributes):  \n            newattributes = {}  \n            for attribute, value in attributes.items():  \n                if attribute.startswith(\"__\"):  \n                    newattributes[attribute] = value  \n                elif («assets» in attribute) or \\  \n                (\"liabilities\" in attribute) or \\  \n                (\"goodwill\" in attribute) or \\  \n                (\"cash\" in attribute):  \n                    newattributes['BalanceSheet_' + \n                        attribute.title()] = value  \n                else:  \n                    newattributes[attribute] = value  \n            return type.__new__(classitself, classname, \n                baseclasses, newattributes)  \n    ```", "```py\n    class California(metaclass = IncomeStatementMetaClass):  \n        profit = 4354365  \n        loss = 43000  \n        def calc_revenue(quantity,unitsales_price):  \n            totalrevenue = quantity * unitsaleprice   \n            return totalrevenue  \n        def calc_expense(totalrevenue,netincome, netloss):  \n            totalexpense = totalrevenue - (netincome + \n                netloss)  \n            return totalexpense    \n    class Pasadena(California,metaclass = BalanceSheetMetaClass):  \n        assets = 18000  \n        liabilities = 5000  \n        def calc_totalassets(cash,inventory,\n            accountsreceivable):  \n            totalassets = cash + inventory + \n                accountsreceivable  \n            return totalassets  \n        def calc_totalliabilities(debt,accruedexpense,\n            accountspayable):  \n            totalliabilities = debt + accruedexpense + \n                accountspayable  \n            return totalliabilities  \n    ```", "```py\n    class SchemaMetaClass(type):  \n    ```", "```py\n        def __new__(classitself, classname, baseclasses, \n                    attributes):  \n\n            newattributes = {}  \n            for attribute, value in attributes.items():  \n                if attribute.startswith(\"__\"):  \n                    newattributes[attribute] = value \n    ```", "```py\n                elif type(value)==int or type(value)==float:  \n                    newattributes[attribute] = {}  \n                    newattributes[attribute]['ColumnName']\n                         = attribute.title()  \n                    newattributes[attribute]['Value'] \n                         = value  \n                    newattributes[attribute]['Type'] \n                         = 'NUMERIC'  \n                    newattributes[attribute]['Length'] = len(str(value))  \n    ```", "```py\n                elif type(value)==str:  \n                    newattributes[attribute] = {}  \n                    newattributes[attribute]['ColumnName']\n                         = attribute.title()  \n                    newattributes[attribute]['Value']\n                         = value  \n                    newattributes[attribute]['Type']\n                         = 'VARCHAR'  \n                    newattributes[attribute]['Length']\n                         = len(value)  \n    ```", "```py\n                elif type(value)==bool:  \n                    newattributes[attribute] = {}  \n                    newattributes[attribute]['ColumnName']\n                         = attribute.title()  \n                    newattributes[attribute]['Value']\n                         = value  \n                    newattributes[attribute]['Type']\n                         = 'BOOLEAN'  \n                    newattributes[attribute]['Length']\n                         = None  \n    ```", "```py\n                else:  \n                    newattributes[attribute] = value                  \n            return type.__new__(classitself, classname,\n                 baseclasses, newattributes)  \n    ```", "```py\n    class Arizona(metaclass = SchemaMetaClass):  \n        product_id = 200443  \n        product_name = 'Iphone'  \n        product_category = 'Electronics'  \n        sales_quantity = 2  \n        tax_rate = 0.05  \n        sales_price = 1200  \n        profit = 70  \n        loss = 0  \n        sales_margin = 0.1  \n        promotion = '20%Off'  \n        promotion_reason = 'New Year'    \n        in_stock = True  \n\n        def create_schema(self):  \n            import pandas as pd  \n            tableschema = pd.DataFrame([self.product_id,  \n                                      self.product_name,  \n                                  self.product_category,  \n                                    self.sales_quantity,  \n                                          self.tax_rate,  \n                                       self.sales_price,  \n                                            self.profit,  \n                                              self.loss,  \n                                      self.sales_margin,  \n                                         self.promotion,  \n                                  self.promotion_reason,  \n                                         self.in_stock])  \n            tableschema.drop(labels = ['Value'], axis = 1,\n                             inplace = True)  \n            return tableschema   \n    ```", "```py\n    objarizona = Arizona()  \n    objarizona.product_name  \n    'Iphone'\n    ```", "```py\n    objarizona = Arizona()\n    objarizona.product_name\n    {'ColumnName': 'Product_name',\n     'Value': 'Iphone',\n     'Type': 'VARCHAR',\n     'Length': 6}\n    ```", "```py\n    objarizona.product_category  \n\n    {'ColumnName': 'Product_category',  \n     'Value': 'Electronics',  \n     'Type': 'VARCHAR',  \n     'Length': 11}  \n\n    objarizona.sales_quantity  \n    {'ColumnName': 'Sales_quantity', 'Value': 2, 'Type': 'NUMERIC', 'Length': 1}  \n\n    objarizona.tax_rate  \n    {'ColumnName': 'Tax_rate', 'Value': 0.05, 'Type': 'NUMERIC', 'Length': 4}  \n    ```", "```py\n    objarizona.create_schema()\n    ```"]