["```py\n>>>from Tkinter import *\n\n```", "```py\n>>> import Tkinter\n>>>Tkinter._test()\n\n```", "```py\nfrom Tkinter import * \nroot = Tk()\nroot.mainloop()\n\n```", "```py\nfrom Tkinter import *\n\n```", "```py\nimport Tkinter\n\n```", "```py\nimport Tkinter as Tk \n\n```", "```py\nmywidget = Widget-name (its container window,**configuration options)\n```", "```py\nfrom Tkinter import *\nroot = Tk() \nmylabel = Label(root,text=\"I am a label widget\")    \nmybutton = Button(root,text=\"I am a button\")       \nmylabel.pack()\nmybutton.pack()\nroot.mainloop()\n```", "```py\nmylabel = Label(root,text=\"I am a label widget\")\nmylabel.pack()\n```", "```py\nLabel(root,text=\"I am a label widget\").pack()\n```", "```py\nmylabel = Label(â€¦).pack()\n```", "```py\nLabel(parent, text=\" Enter your Password:\") \nButton(parent, text=\"Search\")\nCheckbutton(parent, text='RememberMe', variable=v, value=True)\nEntry(parent, width=30)\nRadiobutton(parent, text=Male, variable=v, value=1)\nRadiobutton(parent, text=Female, variable=v, value=2)\nOptionMenu(parent, var, \"Select Country\", \"USA\", \"UK\", \"India\", Others\")\nScrollbar(parent, orient=VERTICAL, command=mytext.yview)\n\n```", "```py\nWidget-name (its container window, *configuration options)\n\n```", "```py\nmywidget = Widget-name (container, all widget-options)\n```", "```py\n    myframe = Frame(root)\n    myframe.pack()\n    ```", "```py\nwidget.configure(**options)\n```", "```py\nfrom Tkinter import *\nroot = Tk()\nButton(root, text=\"A\").pack(side=LEFT, expand=YES, fill=Y)\nButton(root, text=\"B\").pack(side=TOP, expand=YES, fill=BOTH)\nButton(root, text=\"C\").pack(side=RIGHT, expand=YES, fill=NONE, anchor=NE)\nButton(root, text=\"D\").pack(side=LEFT, expand=NO, fill=Y)\nButton(root, text=\"E\").pack(side=TOP, expand=NO, fill=BOTH)\nButton(root, text=\"F\").pack(side=RIGHT, expand=NO, fill=NONE)\nButton(root, text=\"G\").pack(side=BOTTOM, expand=YES, fill=Y)\nButton(root, text=\"H\").pack(side=TOP, expand=NO, fill=BOTH)\nButton(root, text=\"I\").pack(side=RIGHT, expand=NO)\nButton(root, text=\"J\").pack(anchor=SE)\nroot.mainloop()\n\n```", "```py\nfrom Tkinter import *\nroot = Tk()\nLabel(root, text=\"Username\").grid(row=0, sticky=W)\nLabel(root, text=\"Password\").grid(row=1, sticky=W)\nEntry(root).grid(row=0, column=1, sticky=E)\nEntry(root).grid(row=1, column=1, sticky=E)\nButton(root, text=\"Login\").grid(row=2, column=1, sticky=E)\nroot.mainloop()\n\n```", "```py\nfrom Tkinter import *\ntop = Tk()\ntop.title('Find & Replace')\n\nLabel(top,text=\"Find:\").grid(row=0, column=0, sticky='e')\nEntry(top).grid(row=0,column=1,padx=2,pady=2,sticky='we',columnspan=9)\n\nLabel(top, text=\"Replace:\").grid(row=1, column=0, sticky='e')\nEntry(top).grid(row=1,column=1,padx=2,pady=2,sticky='we',columnspan=9)\n\nButton(top, text=\"Find\").grid(row=0, column=10, sticky='ew', padx=2, pady=2)\nButton(top, text=\"Find All\").grid(row=1, column=10, sticky='ew', padx=2)\nButton(top, text=\"Replace\").grid(row=2, column=10, sticky='ew', padx=2)\nButton(top, text=\"Replace All\").grid(row=3, column=10, sticky='ew', padx=2)\n\nCheckbutton(top, text='Match whole word only').grid(row =2, column=1, columnspan=4, sticky='w')\nCheckbutton(top, text='Match Case').grid(row =3, column=1, columnspan=4, sticky='w')\nCheckbutton(top, text='Wrap around').grid(row =4, column=1, columnspan=4, sticky='w')\n\nLabel(top, text=\"Direction:\").grid(row=2, column=6, sticky='w')\nRadiobutton(top, text='Up', value=1).grid(row=3, column=6, columnspan=6, sticky='w')\nRadiobutton(top, text='Down', value=2).grid(row=3, column=7, columnspan=2, sticky='e')\n\ntop.mainloop()\n\n```", "```py\nw.columnconfigure(n, option=value, ...)  AND \nw.rowconfigure(N, option=value, ...)\n```", "```py\nw.columnconfigure(0, weight=2)\nw.columnconfigure(1, weight=3)\n```", "```py\nfrom Tkinter import *\nroot = Tk()\n# Absolute positioning\nButton(root,text=\"Absolute Placement\").place(x=20, y=10)\n# Relative positioning\nButton(root, text=\"Relative\").place(relx=0.8, rely=0.2, relwidth=0.5, width=10, anchor = NE)\nroot.mainloop()\n```", "```py\ndef my_callback ():\n  # do something\n  Button(root,text=\"Click\",command= my_callback) \n```", "```py\ndef my_callback (somearg):\n  #do something with argument\n  Button(root,text=\"Click\",command=lambda: my_callback ('some argument'))\n```", "```py\nlambda x: return x^2\n```", "```py\nwidget.bind(event, handler)\n```", "```py\nfrom Tkinter import *\nroot = Tk()\nLabel(root, text='Click at different\\n locations in the frame below').pack()\ndef mycallback(event):\n print dir(event) \n print \"you clicked at\", event.x, event.y\nmyframe = Frame(root, bg='khaki', width=130, height=80)\nmyframe.bind(\"<Button-1>\", mycallback) \nmyframe.pack()\nroot.mainloop()\n```", "```py\n['__doc__', '__module__', 'char', 'delta', 'height', 'keycode', 'keysym', 'keysym_num', 'num', 'send_event', 'serial', 'state', 'time', 'type', 'widget', 'width', 'x', 'x_root', 'y', 'y_root']\nYou clicked at 63 36.\n```", "```py\n<[event modifier-]...event type [-event detail]>\n\n```", "```py\nwidget.bind(\"<Button-1>\",callback)  #bind widget to left mouse click\nwidget.bind(\"<Button-2>\", callback) # bind to right mouse click\nwidget.bind(\"<Return>\", callback)# bind  to Return(Enter) Key \nwidget.bind(\"<FocusIn>\", callback) #bind  to  Focus in Event\nwidget.bind(\"<KeyPress-A>\", callback)# bind  to keypress A\nwidget.bind(\"<KeyPress-Caps_Lock>\", callback)# bind to CapsLockkeysym\nwidget.bind(\"<KeyPress-F1>\", callback)# bind widget to F1 keysym\nwidget.bind(\"<KeyPress-KP_5>\", callback)# bind to keypad number 5\nwidget.bind('<Motion>', callback) # bind to motion over widget\nwidget.bind(\"<Any-KeyPress>\", callback) # bind to any keypress\n\n```", "```py\n    w.bind_all(event, callback)\n    ```", "```py\n    root.bind_all('<F1>', show_help)\n    ```", "```py\n    w.bind_class(className, event, callback)\n    ```", "```py\n    myentry.bind_class('Entry', '<Control-V>', paste)\n    ```", "```py\nmystring = StringVar()\nticked_yes = BooleanVar()\noption1 = IntVar()\nvolume = DoubleVar()\n\n```", "```py\nEntry(root, textvariable = mystring) \nCheckbutton(root, text=\"Remember Me\", variable=ticked_yes)\nRadiobutton(root, text=\"Option1\", variable=option1, value=\"option1\") #radiobutton\nScale(root, label=\"Volume Control\", variable=volume, from =0, to=10) # slider\n\n```", "```py\nmyvar.set(\"Wassup Dude\") # setting  value of variable\nmyvar.get() # Assessing the value of variable from say a callback\n\n```", "```py\n    widget.unbind(event)\n    ```", "```py\n    entry.unbind('<Alt-Shift-5>')\n    root.unbind_all('<F1>')\n    root.unbind_class('Entry', '<KeyPress-Del>')\n    ```", "```py\n    widget.event_add('<<commit>>', '<F-9>')\n    ```", "```py\n    widget.bind('<<commit>>', callback)\n    ```", "```py\nmybutton = Button(parent, **configuration options) \n```", "```py\nmybutton.configure(**options)\n```", "```py\nwidget.configure( font= 'font family, fontsize, optional style modifiers like bold, italic, underline and overstrike')\n```", "```py\nwidget.configure (font='Times, 8')\nwidget.configure  (font = 'Helvetica 24 bold italic')\n```", "```py\nbutton.configure (borderwidth=5)\n```", "```py\nbutton.configure (relief='raised')\n```", "```py\nbutton.configure (cursor='cross')\n```", "```py\n*font: Arial 10\n*Label*font: Times 12 bold\n*background: AntiqueWhite1\n*Text*background: #454545\n*Button*foreground:gray55\n*Button*relief: raised\n*Button*width: 3\n```", "```py\nroot.option_readfile('optionDB.txt')\n```", "```py\nroot.title(\"title of my program\")\n\n```", "```py\nroot.geometry('142x280+150+200') \n\n```", "```py\nself.root.wm_iconbitmap('mynewicon.ico')\n\n```", "```py\nself.root.iconbitmap('mynewicon.ico ')\n\n```", "```py\nroot.overrideredirect(1)\n\n```", "```py\nfrom Tkinter import *\nroot = Tk()\n\n#demo of some important root methods\nroot.geometry('142x280+150+200') #specify root window size and position\nroot.title(\"Style Demo\") #specifying title of the program\nself.root.wm_iconbitmap('brush1.ico')#changing the default icon\n#root.overrideredirect(1) # remove the root border - uncomment #this line to see the difference\nroot.configure(background='#4D4D4D')#top level styling\n\n# connecting to the external styling optionDB.txt\nroot.option_readfile('optionDB.txt')\n\n#widget specific styling\nmytext = Text(root, background='#101010', foreground=\"#D6D6D6\", borderwidth=18, relief='sunken', width=16, height=5 )\nmytext.insert(END, \"Style is knowing \\nwho you are, what \\nyou want to say, \\nand not giving a \\ndamn.\")\nmytext.grid(row=0, column=0, columnspan=6, padx=5, pady=5)\n\n# all the below widgets derive their styling from optionDB.txt file\nButton(root, text='*' ).grid(row=1, column=1)\nButton(root, text='^' ).grid(row=1, column=2)\nButton(root, text='#' ).grid(row=1, column=3)\nButton(root, text='<' ).grid(row=2, column=1)\nButton(root, text='OK', cursor='target').grid(row=2, column=2)\nButton(root, text='>').grid(row=2, column=3)\nButton(root, text='+' ).grid(row=3, column=1)\nButton(root, text='v', font='Verdana 8').grid(row=3, column=2)\nButton(root, text='-' ).grid(row=3, column=3)\nfori in range(0,10,1):\n  Button(root, text=str(i) ).grid( column=3 if i%3==0  else (1 if i%3==1 else 2), row= 4 if i<=3  else (5 if i<=6 else 6))\n\n#styling with built-in bitmap images\nmybitmaps = ['info', 'error', 'hourglass', 'questhead', 'question', 'warning']\nfor i in mybitmaps:\n  Button(root, bitmap=i,  width=20,height=20).grid(row=(mybitmaps.index(i)+1), column=4,sticky='nw')\n\nroot.mainloop()\n```"]