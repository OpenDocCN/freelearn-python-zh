["```py\n(virtual_env) PS > python manage.py loaddata chapter_3\n```", "```py\n# /becoming_a_django_entdev/urls.py\n```", "```py\n...\n```", "```py\nurlpatterns = [\n```", "```py\n    path(\n```", "```py\n        '',   \n```", "```py\n        include(\n```", "```py\n            'becoming_a_django_entdev.chapter_9.urls'\n```", "```py\n        )\n```", "```py\n    ),\n```", "```py\n    path(\n```", "```py\n        '',   \n```", "```py\n        include(\n```", "```py\n            'becoming_a_django_entdev.chapter_8.urls'\n```", "```py\n        )\n```", "```py\n    ),\n```", "```py\n]\n```", "```py\n# /becoming_a_django_entdev/chapter_9/urls.py \n```", "```py\nfrom django.urls import path, register_converter\n```", "```py\nfrom django.views.generic import TemplateView\n```", "```py\nfrom ..chapter_4.converters import YearConverter \n```", "```py\nfrom ..chapter_4.views import (\n```", "```py\n    practice_year_view,\n```", "```py\n    VehicleView\n```", "```py\n)\n```", "```py\nregister_converter(YearConverter, 'year') \n```", "```py\nurlpatterns = [\n```", "```py\n    path(\n```", "```py\n        '',  \n```", "```py\n        TemplateView.as_view(\n```", "```py\n            template_name = 'chapter_9/index.html'\n```", "```py\n        )\n```", "```py\n    ),\n```", "```py\n    path(\n```", "```py\n        'my_year_path/<year:year>/',\n```", "```py\n        practice_year_view, \n```", "```py\n        name = 'year_url'\n```", "```py\n    ),\n```", "```py\n    path(\n```", "```py\n        'vehicle/<int:id>/',\n```", "```py\n        VehicleView.as_view(), \n```", "```py\n        name = 'vehicle-detail'\n```", "```py\n    ),\n```", "```py\n]\n```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    from django.test import SimpleTestCase\n    class TestingCalibrator(SimpleTestCase):\n        def setUp(self):\n            pass\n        def tearDown(self):\n            pass\n        def test_pass(self):\n            '''Checks if True == True, Value set to \n                True'''\n            self.assertTrue(True)\n        def test_fail(self):\n            '''Checks if False == False, Value set to \n                True'''\n            self.assertFalse(True)\n    ```", "```py\n    (virtual_env) PS > python manage.py test becoming_a_django_entdev.chapter_9\n    ```", "```py\nFound 2 test(s).\nSystem check identified no issues (0 silenced).\nF.\n======================================================\nFAIL: test_fail (becoming_a_django_entdev.chapter_9.tests.TestingCalibrator)\nChecks if False == False, Value set to True\n------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_9\\tests.py\", line 49, in test_fail\n    self.assertFalse(True)\nAssertionError: True is not false\n------------------------------------------------------\nRan 2 tests in 0.001s\nFAILED (failures=1)\nDestroying test database for alias 'default'...\n```", "```py\n    # /becoming_a_django_entdev/chapter_3/models.py\n    ...\n    MAKE_CHOICES = (\n        ...\n        (8, 'Jeep'),\n        ...\n    )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    from django.test import ..., TestCase\n    from djmoney.money import Money\n    from ..chapter_3.models import (\n        Engine,\n        Seller,\n        Vehicle,\n        VehicleModel\n    )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    class ModelUnitTestCase(TestCase):\n        def setUp(self):\n            model = VehicleModel.objects.create(\n                name = 'Grand Cherokee Laredo 4WD',\n                make = 8\n            )\n            engine = Engine.objects.create(\n                name = '3.6L FI FFV DO',\n                vehicle_model = model\n            )\n            vehicle = Vehicle.objects.create(\n                vin = 'aa890123456789012',\n                sold = False,\n                price = Money(39875, 'USD'),\n                make = 8,\n                vehicle_model = model,\n                engine = engine\n            )\n            seller = Seller.objects.create_user(\n                'test',\n                'testing@example.com',\n                'testpassword',\n                is_staff = True,\n                is_superuser = True,\n                is_active = True,\n                name = 'Chapter 9 Seller 1'\n            )\n            seller.vehicles.set([vehicle])\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    class ModelUnitTestCase(TestCase):\n        ...\n        def test_full_vehicle_name(self):\n            vehicle_1 = Vehicle.objects.get(\n                vin = 'aa890123456789012'\n            )\n            self.assertEqual(\n                vehicle_1.full_vehicle_name(),\n                'Jeep Grand Cherokee Laredo 4WD - 3.6L FI \n                    FFV DO'\n            )\n    ```", "```py\n    (virtual_env) PS > python manage.py test becoming_a_django_entdev.chapter_9\n    ```", "```py\nFound 1 test(s).\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n.\n------------------------------------------------------\nRan 1 test in 0.229s\nOK\nDestroying test database for alias 'default'...\n```", "```py\n    Found 1 test(s).\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    F\n    ======================================================\n    FAIL: test_full_vehicle_name \n    ------------------------------------------------------\n    Traceback (most recent call last):\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_9\\tests.py\", line 88, in test_full_vehicle_name\n        self.assertEqual(vehicle_1.full_vehicle_name(), 'Jeep Grand Cherokee Laredo 4WD - 3.6L FI FFV DO asdfasdfas') # Incorrect Value\n    AssertionError: 'Jeep Grand Cherokee Laredo 4WD - 3.6L FI FFV DO' != 'Jeep Grand Cherokee Laredo 4WD - 3.6L FI FFV DO asdfasdfas'\n    - Jeep Grand Cherokee Laredo 4WD - 3.6L FI FFV DO\n    + Jeep Grand Cherokee Laredo 4WD - 3.6L FI FFV DO asdfasdfas\n    ?                                                +++++++++++\n    ------------------------------------------------------\n    Ran 1 test in 0.227s\n    FAILED (failures=1)\n    Destroying test database for alias 'default'...\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    from django.contrib.auth.models import AnonymousUser\n    from django.test import ..., RequestFactory, TestCase\n    from ..chapter_4.views import practice_year_view\n    class YearRequestTestCase(TestCase):\n        def setUp(self):\n            self.factory = RequestFactory()\n        def test_methodbased(self):\n            request = self.factory.get(\n                '/my_year_path/2022/'\n            )\n            request.user = AnonymousUser()\n            response = practice_year_view(request, 2022)\n            self.assertEqual(response.status_code, 200)\n    ```", "```py\n    (virtual_env) PS > python manage.py test becoming_a_django_entdev.chapter_9\n    ```", "```py\nFound 1 test(s).\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\n.\n------------------------------------------------------\nRan 1 test in 0.003s\nOK\nDestroying test database for alias 'default'...\n```", "```py\nFound 1 test(s).\nCreating test database for alias 'default'...\nSystem check identified no issues (0 silenced).\nE\n======================================================\nERROR: test_methodbased (becoming_a_django_entdev.chapter_9.tests.YearRequestTestCase)\nChecks if the path http://localhost:8000/my_year_path/2022/ actually exists and returns a 200 response code (Valid)\n------------------------------------------------------\nTraceback (most recent call last):\n  File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_9\\tests.py\", line 115, in test_methodbased\n    response = practice_year_view(request, 12)\n  File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_4\\views.py\", line 37, in practice_year_view\n    raise Http404('Year Not Found: %s' % year)\ndjango.http.response.Http404: Year Not Found: 12\n------------------------------------------------------\nRan 1 test in 0.004s\nFAILED (errors=1)\nDestroying test database for alias 'default'...\n```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    from django.contrib.auth.models import AnonymousUser\n    from django.test import ..., RequestFactory, TestCase\n    from ..chapter_4.views import ..., VehicleView\n    class VehicleRequestTestCase(TestCase):\n        fixtures = ['chapter_3']\n        def setUp(self):\n            self.factory = RequestFactory()\n        def test_classbased(self):\n            request = self.factory.get('/vehicle/1/')\n            request.user = AnonymousUser()\n            response = VehicleView.as_view()(request, 1)\n            self.assertEqual(response.status_code, 200)\n    ```", "```py\n    (virtual_env) PS > python manage.py test becoming_a_django_entdev.chapter_9\n    ```", "```py\n    Found 1 test(s).\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    E\n    ======================================================\n    ERROR: test_classbased (becoming_a_django_entdev.chapter_9.tests.VehicleRequestTestCase)\n    Checks if the path http://localhost:8000/vehicle/1/ actually exists and returns a 200 response code (Valid)\n    ------------------------------------------------------\n    Traceback (most recent call last):\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_4\\views.py\", line 68, in get\n        vehicle = Vehicle.objects.get(id=id)\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\virtual_env\\lib\\site-packages\\django\\db\\models\\manager.py\", line 85, in manager_method\n        return getattr(self.get_queryset(), name)(*args, **kwargs)\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\virtual_env\\lib\\site-packages\\django\\db\\models\\query.py\", line 439, in get\n        raise self.model.DoesNotExist(\n    becoming_a_django_entdev.chapter_3.models.Vehicle.DoesNotExist: Vehicle matching query does not exist.\n    During handling of the above exception, another exception occurred:\n    Traceback (most recent call last):\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_9\\tests.py\", line 143, in test_classbased\n        response = VehicleView.as_view()(request, 99)\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\virtual_env\\lib\\site-packages\\django\\views\\generic\\base.py\", line 69, in view\n        return self.dispatch(request, *args, **kwargs)\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\virtual_env\\lib\\site-packages\\django\\views\\generic\\base.py\", line 101, in dispatch\n        return handler(request, *args, **kwargs)\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_4\\views.py\", line 70, in get\n        raise Http404('Vehicle ID Not Found: %s' % id)\n    django.http.response.Http404: Vehicle ID Not Found: 99\n    ------------------------------------------------------\n    Ran 1 test in 0.062s\n    FAILED (errors=1)\n    Destroying test database for alias 'default'...\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    from django.test import ..., Client, TestCase\n    from ..chapter_3.models import ..., Seller\n    class SellerClientTestCase(TestCase):\n        fixtures = ['chapter_3']\n        def setUp(self):\n            self.user = Seller.objects.get(id=1)\n            self.client = Client()\n            self.client.login(\n                username = self.user.username,\n                password = 'mynewpassword'\n            )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    class SellerClientTestCase(TestCase):\n        ...\n        def test_get(self):\n            response = self.client.get(\n                '/chapter-8/seller/1/'\n            )\n            self.assertEqual(response.status_code, 200)\n            seller = response.context['seller']\n    ```", "```py\n    (virtual_env) PS > python manage.py test becoming_a_django_entdev.chapter_9\n    ```", "```py\n    Found 1 test(s).\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    F\n    ======================================================\n    FAIL: test_get (becoming_a_django_entdev.chapter_9.tests.SellerClientTestCase) \n    Tests a custom-built REST-API Endpoint using the Client() class.\n    ------------------------------------------------------\n    Traceback (most recent call last):\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_9\\tests.py\", line 171, in test_get\n        self.assertEqual(response.status_code, 200)\n    AssertionError: 401 != 200\n    ------------------------------------------------------\n    Ran 1 test in 0.356s\n    FAILED (failures=1)\n    Destroying test database for alias 'default'...\n    ```", "```py\n    Found 1 test(s).\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    F\n    ======================================================\n    FAIL: test_get (becoming_a_django_entdev.chapter_9.tests.SellerClientTestCase)\n    Tests a custom-built REST-API Endpoint using the Client() class.\n    ------------------------------------------------------\n    Traceback (most recent call last):\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_9\\tests.py\", line 175, in test_get\n        self.assertEqual(seller.name, 'Test Biz Name1')\n    AssertionError: 'Test Biz Name' != 'Test Biz Name1'\n    - Test Biz Name\n    + Test Biz Name1\n    ?              +\n    ------------------------------------------------------\n    Ran 1 test in 0.561s\n    FAILED (failures=1)\n    Destroying test database for alias 'default'...\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    from rest_framework.test import APITestCase, APIClient\n    class EngineAPITestCase(APITestCase):\n        fixtures = ['chapter_3']\n        def setUp(self):\n            self.user = Seller.objects.get(id=1)\n            self.client = APIClient()\n            self.client.login(\n                username = self.user.username,\n                password = 'mynewpassword'\n            )\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    class EngineAPITestCase(APITestCase):\n        ...\n        def test_post(self):\n            response = self.client.post(\n                '/chapter-8/engines/',\n                {'name': 'New Engine'},\n                format = 'json'\n            )\n            self.assertEqual(response.status_code, 201)\n            self.assertEqual(response.data['name'], 'New \n                Engine')\n    ```", "```py\n    virtual_env) PS > python manage.py test becoming_a_django_entdev.chapter_9 \n    ```", "```py\n    Found 1 test(s).\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    F\n    ======================================================\n    FAIL: test_post (becoming_a_django_entdev.chapter_9.tests.EngineAPITestCase)\n    Checks if it returns a 201 response code (Created).\n    ------------------------------------------------------\n    Traceback (most recent call last):\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_9\\tests.py\", line 203, in test_post\n        self.assertEqual(response.status_code, 201)\n    AssertionError: 401 != 201\n    ------------------------------------------------------\n    Ran 1 test in 0.363s\n    FAILED (failures=1)\n    Destroying test database for alias 'default'...\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_9/tests.py\n    ...\n    from rest_framework.test import APITestCase, APIClient\n    class EngineAPITestCase(APITestCase):\n        ...\n        def test_put(self):\n            response = self.client.put(\n                '/chapter-8/engines/1/',\n                {'name': 'My Changed Engine Name'},\n                format = 'json'\n            )\n            self.assertEqual(response.status_code, 200)\n            self.assertEqual(\n                response.data['name'],\n                'My Changed Engine Name'\n            )\n    ```", "```py\n    (virtual_env) PS > python3 manage.py test becoming_a_django_entdev.chapter_9\n    ```", "```py\n    Found 2 test(s).\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    .F\n    ======================================================\n    FAIL: test_put (becoming_a_django_entdev.chapter_9.tests.EngineAPITestCase)\n    Checks if it returns a 200 response code (Success).\n    ------------------------------------------------------\n    Traceback (most recent call last):\n      File \"C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev\\becoming_a_django_entdev\\chapter_9\\tests.py\", line 219, in test_put\n        self.assertEqual(response.status_code, 200)\n    AssertionError: 404 != 200\n    ------------------------------------------------------\n    Ran 2 tests in 1.037s\n    FAILED (failures=1)\n    Destroying test database for alias 'default'...\n    ```", "```py\n    PS C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev> virtual_env/Scripts/activate\n    (virtual_env) PS > pip install django-debug-toolbar\n    ```", "```py\n    # /becoming_a_django_entdev/settings.py\n    ...\n    INSTALLED_APPS = [\n        ...\n        'debug_toolbar',\n        ...\n    ]\n    ```", "```py\n    # /becoming_a_django_entdev/settings.py\n    ...\n    MIDDLEWARE = [\n        'debug_toolbar.middleware.DebugToolbarMiddleware',\n        ...\n    ]\n    ...\n    ```", "```py\n    # /becoming_a_django_entdev/settings.py\n    ...\n    INTERNAL_IPS = [\n        '127.0.0.1',\n    ]\n    INSTALLED_APPS = [\n        ...\n        'django.contrib.staticfiles',\n        'debug_toolbar',\n        ...\n    ]\n    STATIC_URL = '/staticfiles/'\n    ...\n    ```", "```py\n    # /becoming_a_django_entdev/urls.py\n    ...\n    from django.urls import ..., include, re_path\n    ...\n    if settings.DEBUG:\n        ...\n        import debug_toolbar\n        urlpatterns = [\n            re_path(\n                r'^__debug__/', \n                include(debug_toolbar.urls)\n            ),\n        ] + urlpatterns\n    ```", "```py\n    # /becoming_a_django_entdev/settings.py\n    ...\n    def show_toolbar(request):\n        return True\n    if os.getenv('SHOW_TOOLBAR_CALLBACK') == 'True':\n        DEBUG_TOOLBAR_CONFIG = {\n            'SHOW_TOOLBAR_CALLBACK': show_toolbar,\n        }\n    ```", "```py\n    # .env\n    SHOW_TOOLBAR_CALLBACK=True\n    ```", "```py\n    PS C:\\Projects\\Packt\\Repo\\becoming_a_django_entdev> virtual_env/Scripts/activate\n    (virtual_env) PS > python3 manage.py runserver\n    ```", "```py\n    # /becoming_a_django_entdev/chapter_4/views.py\n    ...\n    import logging\n    def practice_year_view(request, year):\n        logger = logging.getLogger(__name__)\n        logger.setLevel(logging.INFO)\n        logger.info('The Requested Year Is: %s' % year)\n        ...\n    ```"]