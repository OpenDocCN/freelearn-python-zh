- en: Signals, Slots, and Event Handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters of this book, we covered the graphical components of
    the GUI application, along with an explanation of some additional functionality
    related to using data. However, the Qt library has a very important communicative
    component that realizes communication between the user and the application as
    a result of clicking buttons, hovering labels, dragging elements, selecting the
    options of the boxes, and many more choices as well. In [Chapter 10](fa7d3424-739c-4d6b-bb72-912bab24d02c.xhtml),
    *Graphics Representation*, we introduced the `QObject` class of the Qt library
    that realizes functionality and is one of the base classes that facilitates communication
    between objects. This behavior characterizes the main target of the GUI application
    and needs to be learned.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: The signals and slots mechanism
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Events and event handlers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signals and slots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Usually, the toolkits and frameworks that are used to develop graphical applications
    use mechanisms for communication known as **callbacks**. This method sends a callback
    pointer of some function to another function for the process that calls the callback
    if needed. The Qt library has an alternative to callbacks in the form of the signals
    and slots mechanism. This technique is used for communication between objects.
    The signal can be emitted by the object; for example, the button is clicked (signal)
    and calls the function (slot) in response to a particular signal.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can describe the signals and slots mechanism of the Qt library as follows:
    all the classes that inherit from the `QObject` class in the inheritance scheme
    can contain signals and slots. This mechanism is known as being **type-safe**. The signatures
    of a signal must match the signatures of the receiving slots, and they can take
    any number of arguments of any type and still be type-safe.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the basic signal/slot features are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A signal can be connected to many slots.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A slot can be connected to many signals.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A signal can be connected to another signal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A signal/slot connection can be synchronous (direct) or asynchronous (queued).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Signal/slot connections can be realized with threads.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, let's describe signal and slot components separately in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: Signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Signals can be defined as signal actions that are emitted by an object in order
    to implement a process to ensure a result. For example, when we click the button
    we want, the `clicked()`, `pressed()`, or `triggered()` signal will have a result
    in the application, such as a closed window, a change in color, an email being
    sent, and more. Signals are carried out by the public access functions related
    to the C++ language representation. In that case, when the signals are emitted,
    the slots that are connected to these signals are usually executed immediately
    as a normal function call.
  prefs: []
  type: TYPE_NORMAL
- en: 'The signals and slots mechanism is completely independent of the GUI event
    loop, and the code following the `emit` statement will be executed only when all
    slots have to be returned as results. In that case, when several slots are connected
    to the one signal, these slots will be executed one after the other, depending
    on how they have been connected. To use these signals, let''s describe the basics
    and create a new signal. As we mentioned earlier in [Chapter 4](56109505-f6a3-4d74-96cc-0618c27d0551.xhtml),
    *Getting Started with PyQt and PySide*, the signal declaration entails a number
    of differences between the PyQt5 and PySide2 bindings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, start from the `import` statement and add the following lines
    to the `utools.py` files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the case of the PyQt5 `import` statement, add this to the `utools.py` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of the PySide2 `import` statement, add this to the `utools.py` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the context of the application, we now have the imported unbound signals
    as class attributes. This unbound signal can retrieve the following parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The parameters are defined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`types`: The types that define the signature of this signal, such as `str`,
    `int`, `list`, or any Python-type object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of this signal as a keyword argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision`: The revision of the signal that is exported to QML as a keyword
    argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`arguments`: The sequence of the names of the arguments for this signal that
    are exported to QML.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To bind the signal, we need to reference this as an attribute of an instance
    of the class, and the Python bindings will automatically bind the instance to
    the signal in order to create a bound signal. We can do this by adding the following
    lines to the `UTools` class of the `u_tools.py` files. Add the bound signal to
    the class before the `__init__()` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This manner is not accidental and is recommended for the construction of signals
    in the application classes. Now, we can have the bound signal with an integer
    as the type parameter. The bound signal has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sig1.connect(object, type, no_receiver_check=bool)`: This creates a connection.
    The methods of this signal connection are defined as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`object`: The bound signal or slot as a Python callable that it is connected
    to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`: The type of connection (`QtCore.Qt.ConnectionType`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`no_receiver_check`: This suppresses the check that the underlying receiver
    instance still exists and delivers the signal anyway.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sig1.disconnect([object])`: This disconnects one or more slots from a signal.
    The method of the signal disconnection is defined as an `object`; this is the
    bound signal or slot that acts as a Python callable that it is connected to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sig1.emit(*args)`: This emits a signal where `*args` is an optional sequence
    of the arguments that will be passed to the slot.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Slots
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Slots can be defined as methods that will be processed when signals are emitted
    and they need to realize some functionality; for example, closing a window using
    the `close()` function, changing the color using the `setColor(QtGui.QColor("FFFFFF"))`
    property, or sending a message using the `sendmail()` function of the `smtplib`
    Python standard library module.
  prefs: []
  type: TYPE_NORMAL
- en: 'The difference between the slots and normal functions is that slots have a
    special feature in the sense that the signals can be connected to them. In other
    words, the signal defines that some function will be a slot. In actual fact, the
    slot can be any Python callable, but in some cases, we can explicitly define the
    slot and decorate the function. Connecting to the decorated Python method has
    some advantages in terms of memory usage. We can create a new slot as well as
    a new signal. For this, we need to add the following lines to the `import` statement
    of the `u_tools.py` files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of the PyQt5 `import` statement, add this to the `utools.py` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of the PySide2 `import` statement, add this to the `utools.py` file:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The `import` statements are also different. The `app_slot(types, name, result,
    revision)` parameter can be passed to the slot. Its functions can be defined as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`types`: The types that define the signature of this slot, such as `str`, `int`,
    `list`, or any Python-type object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: The name of this slot as a keyword argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`result`: The types of result that define the signature of this slot, such
    as `str`, `int`, `list`, or any Python-type object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`revision`: The revision of the slot that is exported to QML as a keyword argument.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'These slots are usually decorated in the following manner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Signal-slot connections
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we know, many GUI applications are built using the PyQt/PySide Python bindings
    of the Qt library. If we review the code of these applications, we will see a
    difference in style for the signal/slot connection constructions. We need to consider
    the available constructions in the application. The bound signals have `connect()`,
    `emit()`, and `disconnect()` methods, which provide the operations with signals
    and slots. The `signal()` attribute, which returns the macro signature of the
    signal, is also available.
  prefs: []
  type: TYPE_NORMAL
- en: connect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We can use the `triggered()` signal to connect selection options to the slots
    that provide some functionality for these options. The non-static connections
    have been used here. For demonstration purposes, however, static construction
    will also be used. Now, we need to look at the lines in the `UApp` class of the
    `u_app.py` files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s consider the lines that are related to the signals. The combobox of
    the application is used to select an option between `Text` and `Table`, and is
    constructed as non-static using the `activated()` signal, which signals and calls
    the slot when the option is activated by hovering and clicking with the mouse.
    The top-panel menus use the `triggered()` signals to connect to the related slots,
    and are also non-static. The `Ok` push button will use `clicked()` signals (a
    non-static construction) to call the lambda function. In other words, the non-static
    approach can be described using the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `object` is a widget or another signal, `signal` is an available signal
    or a constructed one, the `connect()` method connects to the slot, and `SLOT`
    is a function/method or Python callable. The `type` parameter describes the type
    of connection that will be used. The following types of connection are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.Qt.AutoConnection`—`0`: This is the default type. If the receiver of
    the signal is in the thread that emits the signal, `QtCore.Qt.DirectConnection`
    will be used. If the threads are different for the receiver and emitted signal,
    `QtCore.Qt.QueuedConnection` will be used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.DirectConnection`—`1`: This slot is invoked immediately and executed
    in the thread in the same way as the emitted signal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.QueuedConnection`—`2`: This slot is invoked when control returns
    to the event loop for the thread of the receiver, and is executed in the thread
    of the receiver.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.BlockingQueuedConnection`—`3`: This slot is invoked when control
    returns to the event loop for the thread of the receiver and is executed in the
    thread of the receiver, accompanied by blocking the signaling thread. This cannot
    be used if the threads of the emitted signal and receiver are the same.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.Qt.UniqueConnection`—`3`: A unique connection will be used, and another
    connection will fail if it already exists when the same signal is already connected
    to the same slot for the same pair of objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Constructions of the connections using the `QObject` class are also available with
    the following static methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: Here, `object` is a widget, signal, and more; `SIGNAL`, as `QtCore.SIGNAL ("signal_name()")`,
    is an available signal or a constructed one; and `SLOT` is a function/method or
    Python callable that also can be **`QtCore.SLOT ("slot_name()")`**. The `type`
    parameter describes the type of connection that will be used. The `connect` method
    is used as the static function from the `QObject` class of the `QtCore` module.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of the static function, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Here, `object1` (widget, signal, and so on) is a sender of the `QtCore.QObject`
    type, `SIGNAL` (`QtCore.SIGNAL ("signal_name()")`) is a signal of the `QtCore.QMetaMethod`
    type, `object2` (widget, signal, and so on) is a receiver of the `QtCore.QObject`
    type, `SLOT` (`QtCore.SLOT("slot_name()")`) is a function/method of the `QtCore.QMetaMethod`
    type, and `type` is the parameter of the connection that will be used.
  prefs: []
  type: TYPE_NORMAL
- en: In actual fact, static constructions with the `QObject` class are available
    with PySide and PySide2, or PyQt4\. The PyQt5 binding does not support these constructions
    and uses the new style of the signals and slots, which was described prior to
    these static methods. To avoid confusion and preserve the complexity of the material,
    we will not proceed in this way. In our application, we will use non-static methods
    to establish a connection between signals and slots.
  prefs: []
  type: TYPE_NORMAL
- en: emit
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some cases, it is necessary to emit a signal from the application when it's
    processing. The `emit()` method can execute the emission of the signal alongside
    some related data (optionally) to the receiver between connected signal/slot objects.
    This is very useful in an application that uses threads to normalize the execution
    of the process, which will be covered in detail in [Chapter 16](0e64461d-9420-4c73-9607-25e90f854793.xhtml),
    *Threading and Multiprocessing*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider an example related to the `emit()` method, where the application
    using these various data handling tools begins to work slowly. We will change
    the pandas tool functions that are used to open 1,000 rows, split this functionality
    using threads, and manipulate the 1,000,000 row/5 column table that will be written
    to file. For this, we need to open the `u_tools.py` files and add/change the following
    lines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we need to add the following lines to the `import` section of
    these files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the case of the PyQt5 `u_tools.py` file, add the following to the `import`
    section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the case of the PySide2 `u_tools.py` file, add the following to the `import`
    section:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Before the `UTools` class, we need to add the classes with threads that will
    read/write CSV files with pandas.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the `WPandas` class with the thread to write a CSV file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This class includes the `sig1` signal, which will emit the string with an error
    if it occurs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the `RPandas` class with the thread so that you can read CSV files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This class includes the `sig1` signal, which will emit the `DataFrame`, signed
    with the `object` type, with an error, if it exists, of the `string` type. The
    CSV file will be read in chunks that will be emitted in a loop instead of being
    read all at once. This is done because large-sized files are hard to read and
    problems may arise when the text is added to the text fields. Because we need
    to remember that the text edit field is part of another thread – that is, the
    main GUI thread of the application – each chunk includes 10,000 rows, but only
    9 rows of the chunk are displayed. This demonstrates the possibility to work with
    large datasets, because displaying all of this data in the application text fields
    can freeze the app.
  prefs: []
  type: TYPE_NORMAL
- en: In actual fact, this isn't needed because the user doesn't want to read all
    the rows of the file; they simply want to operate with this data and visualize
    it; that is key. All of the preceding threads retrieve the data outside the `on_source()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we need to continue adding/making changes to the `UTools` class of the `u_tools.py` files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add the following signals before the `__init__()` function of the `UTools`
    class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This creates the bound signals for communication between the functions of this
    class and threads. These signals will send lists with parameters to the threads.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to change the `pandas_write()` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are replacing the data and index variables in the function. This is
    optional, and shows that data will be in the range of 0-1,000,000 `data`, with
    a number of rows that equal the 1,000,000 `index`. When an instance of the thread
    is created, the `pandas_sig1` signal connects to the `on_source()` function of
    the thread, and then emits the list with data and parameters to the thread for
    processing.
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the `pandas_read()` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This function creates the instance of the thread, defines the reading parameters,
    such as filename, reader, and chunk size, connects to the `on_source()` function,
    and emits the parameter as the list. Starting the thread then returns this thread
    so that it can be freely used.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to change the `UApp` class of the `u_app.py` files. Let''s get
    started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the `data()` function where the CSV file is opened with pandas:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are adding the `sig1` signal of the thread that connects to the slot,
    as well as a nested `to_field()` function for appending chunks of the reading
    file to the text edit field of the application, or an error to the status bar.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `user_data4()` function now appears as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: These examples have demonstrated how we can connect the signals to the slots
    (application functions) and emit various data from/to threads and to/from functions.
  prefs: []
  type: TYPE_NORMAL
- en: disconnect
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The disconnect method for the signals is straightforward. In some cases, we
    need to disconnect the signal from a slot, and this is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Here, `object` is a widget or another signal, `signal` is a used signal, and
    has a `disconnect` method, and a `SLOT`, which is a function/method or Python
    callable that is connected to this signal.
  prefs: []
  type: TYPE_NORMAL
- en: This construction disconnects the signal from a connected slot. It should be
    noted that the construction needs to be the same as what was used with the signal
    connection.
  prefs: []
  type: TYPE_NORMAL
- en: Qt modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Qt library provides several classes to realize the additional functionality
    with signals and slots. These classes are **`QSignalBlocker`**, `QSignalMapper`,
    and `QSignalTransition`. All of these are available within the `QtCore` module.
  prefs: []
  type: TYPE_NORMAL
- en: QSignalBlocker
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes an exception-safe wrapper around the `blockSignals()` methods,
    which blocks the signals for an item. Usually, this class can be used instead
    of the `blockSignals()` methods. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `QSignalBlocker` class improves functionality by means of the following
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to changes in functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_blocker.reblock()`: This reblocks signals that were previously unblocked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_blocker.unblock()`: This restores the `signalsBlocked()` state to its
    pre-blocking state.'
  prefs: []
  type: TYPE_NORMAL
- en: QSignalMapper
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes the bundles of the signals from identifiable senders and
    provides a collection of signals. It re-emits them with `integer`, `string`, or
    `widget` parameters that correspond to the sender. The declaration syntax of this
    class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: The `QSignalMapper` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters/properties in relation
    to the signal mapper:'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.setMapping(QtCore.QObject, int)`: This sets the mapping for
    the case when the `map()` function is signaled from the sender (the first parameter);
    the signal mapped ID (the second parameter) will be emitted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.setMapping(QtCore.QObject, str)`: This sets the mapping for
    the case when the `map()` function is signaled from the sender (the first parameter);
    the signal mapped text (the second parameter) will be emitted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.setMapping(QtCore.QObject, object)`: This sets the mapping for
    the case when the `map()` function is signaled from the sender (the first parameter);
    the signal mapped object (the second parameter) will be emitted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.setMapping(QtCore.QObject, QtWidgets.QWidget)`: This sets the
    mapping for the case when the `map()` function is signaled from the sender (the
    first parameter); the signal mapped widget (the second parameter) will be emitted.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the return of the current values of
    the signal mapper, changes in functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.map()`: This emits signals based on an object that sends signals
    to it.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.map(QtCore.QObject)`: This emits signals based on the sender
    specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.mapping(int)`: This returns the sender of the `QtCore.QObject`
    type that is associated with the ID specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.mapping(str)`: This returns the sender of the `QtCore.QObject`
    type that is associated with the text specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.mapping(object)`: This returns the sender of the `QtCore.QObject`
    type that is associated with the object specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.mapping(QtWidgets.QWidget)`: This returns the sender of the
    `QtCore.QObject` type that is associated with the widget specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.removeMappings(QtCore.QObject)`: This removes mappings for the
    sender specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: signals
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The available signals of the `QSignalMapper` class are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.mapped(int)`: This signal is emitted when `map()` function is
    signaled from an object with the ID mapping set; the ID is passed in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.mapped(str)`: This signal is emitted when `map()` function is
    signaled from an object with the string mapping set; the text is passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.mapped(object)`: This signal is emitted when `map()` function is
    signaled from an object with the object mapping set; the object is passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_mapper.mapped(QtWidgets.QWidget)`: This signal is emitted when `map()` function is
    signaled from an object with the widget mapping set; the widget is passed in the
    parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: QSignalTransition
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes a signal transition. The class constructs the new signal
    transition with the source state, as defined in the parameter. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The `QSignalTransition` class improves functionality by means of the following
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters/properties in relation
    to the signal transition:'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_transit.setSenderObject(QtCore.QObject)`: This sets the sender, specified
    in the parameter, that will be associated with this signal''s transition.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_transit.setSignal(QtCore.QByteArray)`: This sets the signal, specified
    in the parameter, that will be associated with this signal''s transition.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the signal transition, changes in functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_transit.senderObject()`: This returns the sender of the `QtCore.QObject` type
    that is associated with this signal transition.'
  prefs: []
  type: TYPE_NORMAL
- en: '`signal_transit.signal()`: This returns the signal of the `QtCore.QByteArray`
    type that is associated with this signal transition.'
  prefs: []
  type: TYPE_NORMAL
- en: Events and event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A no less important aspect of the GUI application is the realization of events
    and event handlers. Events inform the application about things that have happened
    as a result of inside or outside activity associated with the application''s processes.
    In the Qt library, this behavior is characterized and realized by means of the
    Qt event system. Through this system, events are objects that are derived from
    the abstract `QEvent` class of the `QtCore` module. Events can be handled by any
    instance of the `QObject` subclass. Usually, the events are delivered by calling
    a virtual function – an event handler – that provides a convenient way to handle
    an event that''s related to the application. The event handlers usually look as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Here, it uses the `enterEvent()` method as an event handler. The Qt framework
    realizes event handlers for painting, resizing, sending, showing, dropping, the
    mouse, the keyboard, and more. The following section describes commonly used events
    and event handlers that can be realized in the GUI application.
  prefs: []
  type: TYPE_NORMAL
- en: QEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the base class of all event classes and provides realization of the
    event system with the functionality of the special event types. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: A full list of the available types that can be specified in the parameter can
    be found in the Qt documentation ([https://doc.qt.io](https://doc.qt.io/)). The
    `QEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to setting parameters/properties in relation to the event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.setAccepted(bool)`: If the parameter is `True`, this sets this event
    to an accepted state.'
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to the event states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.isAccepted()`: This returns `True` if this event is accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the event, changes in functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.accept()`: This sets the accept flag of the event object; this event
    will be accepted.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.ignore()`: This sets the ignore flag of the event object; this event
    will be ignored.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.registerEventType(int)`: This registers and returns a custom event type,
    with hints specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.spontaneous()`: This returns `True` if this is a system event (outside
    of the application).'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.type()`: This returns the type of event as a `QtCore.QEvent.Type` object.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: QEventLoop
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides functionality in terms of entering and leaving the event
    loop. The main event loop is realized when the application is started and moves
    to the infinite loop. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `QEventLoop` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`)  related to the event loop states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`event.isRunning()`: This returns `True` if this event loop is running, otherwise,
    it returns false.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the event loop, changes in functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.exec_(QtCore.QEventLoop.ProcessEventsFlags)`: This enters the event
    loop and begins processing in relation to the flags specified in the parameter.
    The flags that can be used are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEventLoop.AllEvents`: All events will be processed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`QtCore.QEventLoop.ExcludeUserInputEvents`**: Excludes user input events
    in processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEventLoop.ExcludeSocketNotifiers`: Excludes socket notifier events
    in processing.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEventLoop.WaitForMoreEvents`: Processing waits for events if no pending
    events are available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event_loop.exit(int)`: This exits the event loop with the return code that''s
    specified in the parameter. A return code of `0` indicates success; other non
    zero values indicate an error.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.processEvents(QtCore.QEventLoop.ProcessEventsFlags)`: This processes
    pending events that match flags specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.processEvents(QtCore.QEventLoop.ProcessEventsFlags, int)`: This
    processes pending events that match flags (the first parameter) for a maximum
    time (the second parameter) in milliseconds.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.quit()`: This quits the event loop normally, and is similar to
    the `event_loop.exit(0)` method.'
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.wakeUp()`: This wakes up the event loop.'
  prefs: []
  type: TYPE_NORMAL
- en: QChildEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes the events related to the child objects. The event is sent
    to the objects when children are added or removed. The declaration syntax of this
    class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The available types for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ChildAdded`: A child is added to the object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ChildRemoved`: A child is removed from the object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ChildPolished`: A child is polished.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QChildEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the event, changes in functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`child_event.added()`: This returns `True` if the type of this event is `ChildAdded`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`child_event.child()`: This returns a child object of the `QtCore.QObject`
    type that was added or removed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`child_event.polished()`: This returns `True` if the type of this event is
    `ChildPolished`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`child_event.removed()`: This returns `True` if the type of this event is `ChildRemoved`.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: QTimerEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class can realize the timer events that send events to the objects at
    regular intervals. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The unique ID of the timer is specified in the parameter of the event. The `QTimerEvent`
    class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to the returns of the current values of the event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`timer_event.timerId()`: This returns the unique ID of the timer.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: QActionEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides the events that appear when an action realized with the
    `QAction` class is added, removed, or changed. It is available with items that
    support action operations, such as `QMenu`. The declaration syntax of this class
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The first parameter is a type of event, the second is an action, and the third
    is the previous action that''s specified. The available types for this event are
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ActionChanged`: Action changed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ActionAdded`: Action added to the object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ActionRemoved`: Action removed from the object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QActionEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`action_event.action()`: This returns an added, changed, or removed action.'
  prefs: []
  type: TYPE_NORMAL
- en: '`action_event.before()`: If the type of action is `ActionAdded`, this returns
    the action that appeared previously.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: QDropEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides the events that appear when drag and drop actions are completed.
    It is available with items that support dragging operations such as `QWidget` and
    `QTextEdit`. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'For the construction of the drop event, the following parameters are used:'
  prefs: []
  type: TYPE_NORMAL
- en: Position (the first parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drop actions (the second parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MIME data (the third parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Button states (the fourth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard modifiers (the fifth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Type (the sixth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QDropEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to setting parameters/properties in relation to the
    drop event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.setDropAction(QtCore.Qt.DropAction)`: This sets the action, specified
    in the parameter, that will be used for this event.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the drop event, changes in functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.acceptProposedAction()`: This sets the drop action as the proposed
    action for this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.dropAction()`: This returns the action of the `QtCore.Qt.DropAction`
    type that is used with this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.keyboardModifiers()`: This returns keyboard modifiers of the `QtCore.Qt.KeyboardModifiers`
    type that are used with this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.mimeData()`: This returns MIME data of the `QtCore.QMimeData` type
    that is used with this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.mouseButtons()`: This returns the mouse buttons of the `QtCore.Qt.MouseButtons`
    type that are used with this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.pos()`: This returns the position of the `QtCore.QPoint` type where
    the drop was made.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.posF()`: This returns the position of the `QtCore.QPointF` type
    where the drop was made.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.possibleActions()`: This returns the possible drop actions of the
    `QtCore.Qt.DropActions` type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.proposedAction()`: This returns the proposed action of the `QtCore.Qt.DropAction`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`drop_event.source()`: This returns the source of the `QtCore.QObject` type
    that is used for drop event operations, such as a widget.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Event handlers of the `QDragEnterEvent`, `QDragMoveEvent`, and `QDragLeaveEvent`
    types, which improve the functionality of `QDropEvent`, are also available, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: QEnterEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events when the mouse cursor enters a widget, a window,
    or another GUI element/item. It is available with almost all items that support
    mouse cursor enter operations. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'In regard to the construction of the enter event, the following parameters
    are used:'
  prefs: []
  type: TYPE_NORMAL
- en: Local position (the first parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Window position (the second parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen position (the third parameter) of the mouse cursor relative to the receiving
    item.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QEnterEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the enter event, changes in functionality, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.globalPos()`: This returns the global position of the `QtCore.QPoint`
    type for the item when the enter event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.globalX()`: This returns the global x axis position of the mouse
    cursor on the item when the enter event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.globalY()`: This returns the global y axis position of the mouse
    cursor on the item when the enter event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.localPos()`: This returns the local position of the `QtCore.QPointF`
    type for the mouse cursor on the item when the enter event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.pos()`: This returns the position of the `QtCore.QPoint` type
    for the mouse cursor in global screen coordinates when the enter event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.screenPos()`: This returns the position of the `QtCore.QPointF`
    type for the mouse cursor on the screen when the enter event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.windowPos()`: This returns the position of the `QtCore.QPointF`
    type for the mouse cursor on the window when the enter event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.x()`: This returns the *x* position for the mouse cursor on the
    item when the enter event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`enter_event.y()`: This returns the *y* position for the mouse cursor on the
    item when the enter event occurs,'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'The leave event of the mouse cursor from the item can be realized as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: QFocusEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles the focus events of an item. These events appear when the
    keyboard input focus changes. It is available with widgets such as `QWidget`,
    which support keyboard focus operations. The declaration syntax of this class
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'In regard to the construction of the focus event, the type (the first parameter)
    of the event and the focus reason (the second parameter) are used. The available
    types for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.FocusIn`: This item gains keyboard focus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.FocusOut`: This item loses keyboard focus.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.FocusAboutToChange`: This item''s focus is about to change.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QFocusEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the focus event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`focus_event.gotFocus()`: This returns `True` if this event has a `FocusIn`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`focus_event.lostFocus()`: This returns `True` if this event has a `FocusOut`
    type.'
  prefs: []
  type: TYPE_NORMAL
- en: '`focus_event.reason()`: This returns the reason of the `QtCore.Qt.FocusReason`
    type for this focus event.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handlers for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: QKeyEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles the events that appear in relation to keyboard activity.
    It becomes available when you press the keys of the keyboard with widgets such
    as `QWidget`. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'In regard to the construction of the key event, the type (the first parameter),
    key (the second parameter), and keyboard modifiers (the third parameter) are used.
    The available types for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.KeyPress`: Presses a key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.KeyRelease`: Releases a key.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ShortcutOverride`: A key press in a child.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QKeyEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: is
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to the key event states:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.isAutoRepeat()`: This returns `True` if the key event comes from
    an auto-repeating key.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the key event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.count()`: This returns the number of keys that are available for
    this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.key()`: This returns the code of the key, corresponding to `QtCore.Qt.Key`,
    that was used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.matches(QtGui.QKeySequence.StandardKey)`: This returns `True` if
    the key event matches the standard key specified in the parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.modifiers()`: This returns the keyboard modifiers of the `QtCore.Qt.KeyboardModifiers` type
    for this key event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.nativeModifiers()`: This returns the native modifiers of this key
    event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.nativeScanCode()`: This returns the scan code of this key event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.nativeVirtualKey()`: This returns the virtual key of this key event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`key_event.text()`: This returns the text that''s generated with this key.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handlers for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: QMouseEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles the events that appear in tandem with mouse activity. It
    is available with almost all graphical items that can interact with the mouse.
    The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'In regard to the construction of the mouse event, the following parameters
    are used:'
  prefs: []
  type: TYPE_NORMAL
- en: Type (the first parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Local position (the second parameter) of the cursor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Window position (the third parameter) of the cursor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Screen position (the fourth parameter) of the cursor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The button (the fifth parameter) that caused the event.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Buttons (the sixth parameter) that describe the mouse/keyboard states.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The available types for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.MouseButtonPress`: Clicks the mouse button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.MouseButtonRelease`: Releases the mouse button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.MouseMove`: Moves the mouse over the item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.MouseButtonDblClick`: Double-clicks the mouse button.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QMouseEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to setting parameters/properties in relation to the mouse
    event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.setLocalPos(QtCore.QPointF)`: This sets the local position, specified
    in the parameter, for this mouse event.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the mouse event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.button()`: This returns the button of the `QtCore.Qt.MouseButton`
    type that causes this mouse event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.buttons()`: This returns the button state of the `QtCore.Qt.MouseButtons`
    type that was generated with this mouse event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.flags()`: This returns flags of the `QtCore.Qt.MouseEventFlags`
    type for this mouse event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.globalPos()`: This returns the global position of the `QtCore.QPoint`
    type for the mouse cursor when the event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.globalX()`: This returns the global *x* axis position for the
    mouse cursor when the mouse event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.globalY()`: This returns the global *y* axis position for the
    mouse cursor when the mouse event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.localPos()`: This returns the local position of the `QtCore.QPointF`
    type for the mouse cursor on the item when the mouse event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.pos()`: This returns the position of the `QtCore.QPoint` type
    for the mouse cursor in global screen coordinates when the mouse event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.screenPos()`: This returns the position of the `QtCore.QPointF`
    type for the mouse cursor on the screen when the mouse event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.windowPos()`: This returns the position of the `QtCore.QPointF`
    type for the mouse cursor on the window when the mouse event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.source()`: This returns the information of the `QtCore.Qt.MouseEventSource`
    type related to the mouse event source.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.x()`: This returns the *x* position for the mouse cursor on the
    item when the mouse event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.y()`: This returns the *y* position for the mouse cursor on the
    item when the mouse event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handlers for this event are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: QWheelEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events that appear when the mouse wheel is operated. These
    events are generated for mouse wheels and trackpad scroll gestures. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'In regard to the construction of the wheel event, the following parameters
    are used:'
  prefs: []
  type: TYPE_NORMAL
- en: The position (the first parameter) of the mouse cursor location.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The global position (the second parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pixel delta (the third parameter) or scrolling distance in pixels on the
    screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The angle delta (the fourth parameter) or wheel rotation distance.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The qt4 delta (the fifth parameter) monodirectional rotation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The qt4 orientation (the sixth parameter) monodirectional direction.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse states (the seventh parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard states (the eighth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scrolling phase (the ninth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source (the tenth parameter) of the mouse wheel or gesture.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The inversion (the eleventh parameter) option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QWheelEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the wheel event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.angleDelta()`: This returns the distance of the `QtCore.QPoint`
    type for the wheel''s rotation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.buttons()`: This returns the button state of the `QtCore.Qt.MouseButtons`
    type that was generated with this wheel event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.globalPos()`: This returns the global position of the `QtCore.QPoint`
    type of the pointer related to this wheel event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.globalPosF()`: This returns the global position of the `QtCore.QPointF`
    type of the pointer related to this wheel event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.globalX()`: This returns the global *x* axis position of the pointer
    related to this wheel event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.globalY()`: This returns the global *y* axis position of the pointer
    related to this wheel event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.inverted()`: This returns `True` if the delta values are inverted
    for this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.orientation()`: This returns the orientation of the `QtCore.Qt.Orientation`
    type for this wheel.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.phase()`: This returns the scrolling phase of this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.pixelDelta()`: This returns the pixel delta of the `QtCore.QPoint`
    type as the scrolling distance on screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.pos()`: This returns the position of the `QtCore.QPoint` type
    for the pointer related to the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.posF()`: This returns the position of the `QtCore.QPointF` type
    for the pointer related to the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.source()`: This returns the information of the `QtCore.Qt.MouseEventSource`
    type related to the wheel event source.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.x()`: This returns the *x* position for the pointer related to
    the item when the event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.y()`: This returns the *y* position for the pointer related to
    the item when the event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: QMoveEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events that appear in connection with the moving activity
    of the items. It is available with almost all graphical items where moving can
    be realized. The declaration syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: In regard to the construction of the move event, the new (the first parameter)
    and old (the second parameter) positions are used. The `QMoveEvent` class improves
    functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the move event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`move_event.oldPos()`: This returns the old position of the `QtCore.QPoint`
    type for the moving item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`move_event.pos()`: This returns the new position of the `QtCore.QPoint` type
    for the moving item.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: QPaintEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events to do with painting that relates to the items. It
    is available with almost all graphical items where painting can be operated. As
    we''ve described in previous chapters, all the graphical elements of the Qt library
    are painted and, therefore, the `paintEvent()` event handler can be used for updating
    the graphical representation of the items. The declaration syntax of this class
    is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: In regard to the construction of the paint event, the rectangle or region for
    painting that's specified in the parameter is used. The `QPaintEvent` class improves
    functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the paint event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`paint_event.rect()`: This returns the rectangle of the `QtCore.QRect` type
    that is used for the update.'
  prefs: []
  type: TYPE_NORMAL
- en: '`paint_event.region()`: This returns the rectangle of the `QtGui.QRegion` type
    that is used for the update.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: QResizeEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events that appear when we resize items. It is available
    with almost all graphical items where you can resize items. The declaration syntax
    of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In regard to the construction of the resizing event, the new size (the first
    parameter) and old size (the second parameter) are used. The `QResizeEvent` class
    improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the resizing event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resize_event.oldSize()`: This returns the old size of the `QtCore.QSize` type
    for the item being resized.'
  prefs: []
  type: TYPE_NORMAL
- en: '`resize_event.size()`: This returns the new size of the `QtCore.QSize` type
    for the item being resized.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: QTabletEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events related to tablet device functionality. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In regard to the construction of the tablet event, the following parameters
    are used:'
  prefs: []
  type: TYPE_NORMAL
- en: The type (the first parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The position (the second parameter) where the event occurred.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The global position (the third parameter) in absolute coordinates.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The device (the fourth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pointer type (the fifth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pressure (the sixth parameter) exerted on the device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *x* tilt (the seventh parameter) degree for this device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *y* tilt (the eighth parameter) degree for this device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tangential pressure (the ninth parameter) of the airbrush.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rotation (the tenth parameter) for this device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The*z* (the eleventh parameter) coordinate of the device.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key state (the twelfth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The unique ID (the thirteenth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The button (the fourteenth parameter) that caused the event.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The button (the fifteenth parameter) state at the time of the event.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QTabletEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the tablet event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.button()`: This returns the button of the `QtCore.Qt.MouseButton`
    type that causes this tablet event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.buttons()`: This returns the buttons state of the `QtCore.Qt.MouseButtons`
    type that was generated with this tablet event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.device()`: This returns the type of the device that generated
    this tablet event as `QtGui.QTabletEvent.TabletDevice`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.globalPos()`: This returns the global position of the `QtCore.QPoint`
    type of the device when the event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.globalPosF()`: This returns the global position of the **`QtCore.QPointF`**
    type of the device when the event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.globalX()`: This returns the global *x* axis position of the
    device when the tablet event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.globalY()`: This returns the global *y* axis position of the
    device when the tablet event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.hiResGlobalX()`: This returns the high-precision *x* position
    of this device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.hiResGlobalY()`: This returns the high-precision *y* position
    of this device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.pointerType()`: This returns the type of pointer as **`QtGui.QTabletEvent.PointerType`**,
    which generated this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.pos()`: This returns the position of the `QtCore.QPoint` type
    for the device related to the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.posF()`: This returns the position of the `QtCore.QPointF` type
    for the device related to the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.pressure()`: This returns the pressure for the device from `0.0`
    (stylus is not on the tablet) to `1.0` (stylus is on the tablet with maximum pressure).'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.rotation()`: This returns the rotation of the device in degrees,
    where `0` means that the tip of the stylus is pointing toward the top of the tablet,
    a positive value means that it is turned to the right, and a negative value means
    that it is turned to the left.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.tangentialPressure()`: This returns the tangential pressure for
    this device given by a finger wheel on an airbrush tool in the range of `-1.0`
    to `1.0`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.uniqueId()`: This returns the unique ID of this tablet device.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.xTilt()`: This returns the angle according to the *x* axis between
    the device and the perpendicular.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.yTilt()`: This returns the angle according to the *y* axis between
    the device and the perpendicular.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.x()`: This returns the *x* position for the device related to
    the item when the event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.y()`: This returns the *y* position for the device related to
    the item when the event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.z()`: This returns the *z* position according to the z axis for
    the device; for example, as represented by a wheel on a 4D mouse.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: QTouchEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events that appear when we move one or more touch points
    on a device that supports touch operations. These devices must have a touchscreen
    or trackpad. To make this functionality available, the widgets or graphical items
    need to have the `acceptTouchEvents` attribute set to `True`. The declaration
    syntax of this class is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'In regard to the construction of the touch event, the following parameters
    are used:'
  prefs: []
  type: TYPE_NORMAL
- en: The type (the first parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The device (the second parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard modifiers (the third parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touch point states (the fourth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touch points (the fifth parameter).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QTouchEvent` class improves functionality by means of the following functions.
  prefs: []
  type: TYPE_NORMAL
- en: set
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters/properties in relation
    to the touch event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setDevice(QtGui.QTouchDevice)`: This sets the device, specified
    in the parameter, that will be used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setTarget(QtCore.QObject)`: This sets the target (such as a widget),
    specified in the parameter, for this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setTouchPoints([QtGui.QTouchEvent.TouchPoint])`: This sets the
    touch points, specified in the parameter, for this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setTouchPointStates(QtCore.Qt.TouchPointStates)`: This sets the
    touch point states, specified in the parameter, for this event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setWindow(QtGui.QWindow)`: This sets the window, specified in
    the parameter, for this touch event.'
  prefs: []
  type: TYPE_NORMAL
- en: functional
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the touch event:'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.device()`: This returns a device of the `QtGui.QTouchDevice` type
    from which the touch event occurs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.target()`: This returns the target object of the `QtCore.QObject`
    type for the event that occurred.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.touchPoints()`: This returns a list of touch points for this touch
    event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.touchPointStates()`: This returns the touch point states of the
    **`QtCore.Qt.TouchPointStates`** type for this `touch` event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.window()`: This returns the window of the **`QtGui.QWindow`**
    type for the touch event that occurred.'
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Additional notations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Qt library has events that were not described here but that we will touch
    on briefly. Some of these classes, which realize the special or ordinary events,
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QDynamicPropertyChangeEvent`: For dynamic property change events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QCloseEvent`: For close events with the `closeEvent()` event handler.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QHideEvent`: For events related to hiding the widgets.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QShowEvent`: For the widget''s show events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QContextMenuEvent`: For context menu events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QExposeEvent`: For events exposed with the `exposeEvent()` event handler.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFileOpenEvent`: For events related to opening file operations.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QHelpEvent`: For events related to helpful information of the point
    in a widget.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QHoverEvent`: For mouse events related to hovering over an item with
    `QGraphicsItem`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QIconDragEvent`: For the main icon''s dragging events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QInputEvent`: For the user''s input events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QInputMethodEvent`: For input method events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QNativeGestureEvent`: For gesture events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QScrollEvent`: For scrolling events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QScrollPrepareEvent`: For scrolling preparation events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QShortcutEvent`: For key combination events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QStatusTipEvent`: For status bar events.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QWhatsThisClickedEvent`: For handling hyperlinks in a *What''s This?* text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QWindowStateChangeEvent`: For window state change events.'
  prefs: []
  type: TYPE_NORMAL
- en: The classes of the `QtWidgets` module, such as `QGestureEvent` and `QGraphicsSceneEvent`,
    can also be used.
  prefs: []
  type: TYPE_NORMAL
- en: Sending events
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within application development, there are instances when events may need to
    be sent. This can help us create more flexible functionality. To this end, static
    methods from the `QCoreApplication` class of the `QtCore` module can be used.
    The static methods can be implemented as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QCoreApplication.sendEvent(object, event)`: This is where the `sendEvent()`
    method immediately sends the event to the object. The `object` is a `QtCore.QObject`,
    such as a widget, button, or another item, and the `event` is a `QtCore.QEvent`,
    such as an enter event or a mouse event.'
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QCoreApplication.postEvent(object, event)`: This is where the `postEvent()`
    method adds the event to the queue. The `object` is a `QtCore.QObject`, such as
    a widget, button, or another item, and the `event` is a `QtCore.QEvent`, such
    as an enter event or a mouse event. This method can be used with the threads in
    the application.'
  prefs: []
  type: TYPE_NORMAL
- en: Events example
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate events and event handlers, let''s modernize our application.
    Usually, in the application, the event handlers that are available for the item
    are used. They handle some events and provide additional functionality. Here,
    we will cover the best way to add event handlers to the widget of the application.
    For this, we need to add/change some lines of the `UWid` class of both `u_style.py`
    files. Let''s get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, change the `__init__()` function of the `UWid` class by adding
    additional parameters for better functionality:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: This will be used for changing the parameters of the widget, depending on the
    widget's representation in the application, and is similar to the `UBut1` class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add the lines to the `__init__()` function of the `UWid` class,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Here, there is the option to set the fixed width/height, min/max width/height,
    background color, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add the `wid_style()` styling function to the `UWid` class,
    which will be used for the restyling of this widget, depending on the events that
    have occurred:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: This is an optional function and is used to reduce the number of lines of various
    events. Now, we need to add the event handlers that will be used to handle events
    for this widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `enterEvent()` handler to the `UWid` class for handling events related
    to the mouse cursor entering this widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the `leaveEvent()` handler to the `UWid` class for handling events
    related to the mouse cursor leaving this widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Now, if we run the `u_app.py` file, we will see the result. We can also add
    other event handlers by way of experimentation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter considered the main principles of signal functionality and commonly
    used events that can be handled in the GUI application. An understanding of these
    basics is very important because this represents the core functionality of any
    modern application. A lot of GUIs aren't very useful without these mechanisms. The
    last example that was provided in this chapter demonstrates styling the widget
    relative to the events that occurred. In this way, all of the styled elements
    that were implemented can be extended. This chapter is an introduction to the
    signals and events of the Qt library. The official documentation can consolidate
    your knowledge in this area.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover another important aspect of any application
    – the realization of the threads and processes.
  prefs: []
  type: TYPE_NORMAL
