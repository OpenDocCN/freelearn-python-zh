- en: Signals, Slots, and Event Handlers
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号、槽和事件处理器
- en: In the previous chapters of this book, we covered the graphical components of
    the GUI application, along with an explanation of some additional functionality
    related to using data. However, the Qt library has a very important communicative
    component that realizes communication between the user and the application as
    a result of clicking buttons, hovering labels, dragging elements, selecting the
    options of the boxes, and many more choices as well. In [Chapter 10](fa7d3424-739c-4d6b-bb72-912bab24d02c.xhtml),
    *Graphics Representation*, we introduced the `QObject` class of the Qt library
    that realizes functionality and is one of the base classes that facilitates communication
    between objects. This behavior characterizes the main target of the GUI application
    and needs to be learned.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的前几章中，我们介绍了GUI应用程序的图形组件，以及一些与使用数据相关的附加功能解释。然而，Qt库有一个非常重要的通信组件，它通过点击按钮、悬停标签、拖动元素、选择框选项等多种方式实现了用户与应用程序之间的通信。在[第10章](fa7d3424-739c-4d6b-bb72-912bab24d02c.xhtml)“图形表示”中，我们介绍了Qt库的`QObject`类，它实现了功能，并且是便于对象之间通信的基类之一。这种行为是GUI应用程序的主要目标，需要学习。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: The signals and slots mechanism
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号/槽机制
- en: Events and event handlers
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 事件和事件处理器
- en: Signals and slots
  id: totrans-5
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号和槽
- en: Usually, the toolkits and frameworks that are used to develop graphical applications
    use mechanisms for communication known as **callbacks**. This method sends a callback
    pointer of some function to another function for the process that calls the callback
    if needed. The Qt library has an alternative to callbacks in the form of the signals
    and slots mechanism. This technique is used for communication between objects.
    The signal can be emitted by the object; for example, the button is clicked (signal)
    and calls the function (slot) in response to a particular signal.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，用于开发图形应用程序的工具包和框架使用称为**回调**的通信机制。这种方法将某个函数的回调指针发送到另一个函数，以便在需要时调用回调过程。Qt库提供了回调的替代方案，即信号和槽机制。这种技术用于对象之间的通信。信号可以由对象发出；例如，按钮被点击（信号）并调用响应特定信号的函数（槽）。
- en: 'We can describe the signals and slots mechanism of the Qt library as follows:
    all the classes that inherit from the `QObject` class in the inheritance scheme
    can contain signals and slots. This mechanism is known as being **type-safe**. The signatures
    of a signal must match the signatures of the receiving slots, and they can take
    any number of arguments of any type and still be type-safe.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将Qt库的信号/槽机制描述如下：在继承方案中从`QObject`类继承的所有类都可以包含信号和槽。这种机制被称为**类型安全**。信号的定义必须与接收槽的签名相匹配，并且可以接受任何类型和数量的参数，同时仍然保持类型安全。
- en: 'Some of the basic signal/slot features are as follows:'
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 一些基本的信号/槽特性如下：
- en: A signal can be connected to many slots.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个信号可以连接到多个槽。
- en: A slot can be connected to many signals.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个槽可以连接到多个信号。
- en: A signal can be connected to another signal.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个信号可以连接到另一个信号。
- en: A signal/slot connection can be synchronous (direct) or asynchronous (queued).
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号/槽连接可以是同步（直接）或异步（排队）的。
- en: Signal/slot connections can be realized with threads.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 信号/槽连接可以通过线程实现。
- en: Now, let's describe signal and slot components separately in more detail.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们更详细地分别描述信号和槽组件。
- en: Signals
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: Signals can be defined as signal actions that are emitted by an object in order
    to implement a process to ensure a result. For example, when we click the button
    we want, the `clicked()`, `pressed()`, or `triggered()` signal will have a result
    in the application, such as a closed window, a change in color, an email being
    sent, and more. Signals are carried out by the public access functions related
    to the C++ language representation. In that case, when the signals are emitted,
    the slots that are connected to these signals are usually executed immediately
    as a normal function call.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 信号可以被定义为对象发出的信号动作，以实现确保结果的过程。例如，当我们点击想要的按钮时，`clicked()`、`pressed()`或`triggered()`信号将在应用程序中产生结果，例如关闭窗口、颜色变化、发送电子邮件等。信号通过与C++语言表示相关的公共访问函数执行。在这种情况下，当信号被发出时，连接到这些信号的槽通常会被立即作为正常函数调用执行。
- en: 'The signals and slots mechanism is completely independent of the GUI event
    loop, and the code following the `emit` statement will be executed only when all
    slots have to be returned as results. In that case, when several slots are connected
    to the one signal, these slots will be executed one after the other, depending
    on how they have been connected. To use these signals, let''s describe the basics
    and create a new signal. As we mentioned earlier in [Chapter 4](56109505-f6a3-4d74-96cc-0618c27d0551.xhtml),
    *Getting Started with PyQt and PySide*, the signal declaration entails a number
    of differences between the PyQt5 and PySide2 bindings:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 信号和槽机制完全独立于 GUI 事件循环，并且 `emit` 语句之后的代码仅在所有槽都必须作为结果返回时才会执行。在这种情况下，当多个槽连接到同一信号时，这些槽将根据它们连接的方式依次执行。要使用这些信号，让我们描述基本知识并创建一个新的信号。正如我们之前在
    [第 4 章](56109505-f6a3-4d74-96cc-0618c27d0551.xhtml) “PyQt 和 PySide 入门”中提到的，信号声明在
    PyQt5 和 PySide2 绑定之间存在一些差异：
- en: 'First of all, start from the `import` statement and add the following lines
    to the `utools.py` files:'
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，从 `import` 语句开始，并将以下行添加到 `utools.py` 文件中：
- en: 'In the case of the PyQt5 `import` statement, add this to the `utools.py` file:'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PyQt5 的 `import` 语句的情况下，将以下内容添加到 `utools.py` 文件中：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In the case of the PySide2 `import` statement, add this to the `utools.py` file:'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PySide2 的 `import` 语句的情况下，将以下内容添加到 `utools.py` 文件中：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'In the context of the application, we now have the imported unbound signals
    as class attributes. This unbound signal can retrieve the following parameters:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序的上下文中，我们现在有导入的未绑定信号作为类属性。此未绑定信号可以检索以下参数：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The parameters are defined as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 参数定义如下：
- en: '`types`: The types that define the signature of this signal, such as `str`,
    `int`, `list`, or any Python-type object.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`types`: 定义此信号签名的类型，例如 `str`、`int`、`list` 或任何 Python 类型对象。'
- en: '`name`: The name of this signal as a keyword argument.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 作为关键字参数的此信号的名称。'
- en: '`revision`: The revision of the signal that is exported to QML as a keyword
    argument.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`revision`: 作为关键字参数导出到 QML 的信号的修订版本。'
- en: '`arguments`: The sequence of the names of the arguments for this signal that
    are exported to QML.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`arguments`: 导出到 QML 的此信号参数名称的序列。'
- en: 'To bind the signal, we need to reference this as an attribute of an instance
    of the class, and the Python bindings will automatically bind the instance to
    the signal in order to create a bound signal. We can do this by adding the following
    lines to the `UTools` class of the `u_tools.py` files. Add the bound signal to
    the class before the `__init__()` function:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要绑定信号，我们需要将其引用为类实例的属性，Python 绑定将自动将实例绑定到信号以创建绑定信号。我们可以通过向 `u_tools.py` 文件中的
    `UTools` 类添加以下行来实现。在 `__init__()` 函数之前将绑定信号添加到类中：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This manner is not accidental and is recommended for the construction of signals
    in the application classes. Now, we can have the bound signal with an integer
    as the type parameter. The bound signal has the following methods:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方式并非偶然，并且建议在应用程序类中构建信号时使用。现在，我们可以将整数作为类型参数的绑定信号。绑定信号有以下方法：
- en: '`sig1.connect(object, type, no_receiver_check=bool)`: This creates a connection.
    The methods of this signal connection are defined as follows:'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sig1.connect(object, type, no_receiver_check=bool)`: 这将创建一个连接。此信号连接的方法定义如下：'
- en: '`object`: The bound signal or slot as a Python callable that it is connected
    to.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object`: 绑定的信号或槽，作为连接到它的 Python 可调用对象。'
- en: '`type`: The type of connection (`QtCore.Qt.ConnectionType`).'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`: 连接的类型 (`QtCore.Qt.ConnectionType`)。'
- en: '`no_receiver_check`: This suppresses the check that the underlying receiver
    instance still exists and delivers the signal anyway.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`no_receiver_check`: 这将抑制对底层接收器实例是否仍然存在的检查，并无论如何都传递信号。'
- en: '`sig1.disconnect([object])`: This disconnects one or more slots from a signal.
    The method of the signal disconnection is defined as an `object`; this is the
    bound signal or slot that acts as a Python callable that it is connected to.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sig1.disconnect([object])`: 这将从信号断开一个或多个槽。信号断开的方法定义为 `object`；这是作为 Python
    可调用对象连接到的绑定信号或槽。'
- en: '`sig1.emit(*args)`: This emits a signal where `*args` is an optional sequence
    of the arguments that will be passed to the slot.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sig1.emit(*args)`: 这会发出一个信号，其中 `*args` 是可选的参数序列，这些参数将被传递到槽中。'
- en: Slots
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 槽
- en: Slots can be defined as methods that will be processed when signals are emitted
    and they need to realize some functionality; for example, closing a window using
    the `close()` function, changing the color using the `setColor(QtGui.QColor("FFFFFF"))`
    property, or sending a message using the `sendmail()` function of the `smtplib`
    Python standard library module.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 槽可以定义为当信号发出时将处理的函数，并且它们需要实现某些功能；例如，使用 `close()` 函数关闭窗口，使用 `setColor(QtGui.QColor("FFFFFF"))`
    属性更改颜色，或使用 `smtplib` Python 标准库模块的 `sendmail()` 函数发送消息。
- en: 'The difference between the slots and normal functions is that slots have a
    special feature in the sense that the signals can be connected to them. In other
    words, the signal defines that some function will be a slot. In actual fact, the
    slot can be any Python callable, but in some cases, we can explicitly define the
    slot and decorate the function. Connecting to the decorated Python method has
    some advantages in terms of memory usage. We can create a new slot as well as
    a new signal. For this, we need to add the following lines to the `import` statement
    of the `u_tools.py` files:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 槽与普通函数之间的区别在于，槽在某种意义上具有特殊功能，信号可以连接到它们。换句话说，信号定义了某些函数将是槽。实际上，槽可以是任何 Python 可调用对象，但在某些情况下，我们可以显式定义槽并装饰函数。连接到装饰的
    Python 方法在内存使用方面有一些优势。我们还可以创建新的槽和新的信号。为此，我们需要将以下行添加到 `u_tools.py` 文件的 `import`
    语句中：
- en: 'In the case of the PyQt5 `import` statement, add this to the `utools.py` file:'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PyQt5 的 `import` 语句中，将以下内容添加到 `utools.py` 文件中：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In the case of the PySide2 `import` statement, add this to the `utools.py` file:'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 PySide2 的 `import` 语句中，将以下内容添加到 `utools.py` 文件中：
- en: '[PRE5]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The `import` statements are also different. The `app_slot(types, name, result,
    revision)` parameter can be passed to the slot. Its functions can be defined as
    follows:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`import` 语句也有所不同。`app_slot(types, name, result, revision)` 参数可以传递给槽。其函数可以定义如下：'
- en: '`types`: The types that define the signature of this slot, such as `str`, `int`,
    `list`, or any Python-type object.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`types`: 定义此槽签名类型的类型，例如 `str`、`int`、`list` 或任何 Python 类型对象。'
- en: '`name`: The name of this slot as a keyword argument.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 作为关键字参数的此槽的名称。'
- en: '`result`: The types of result that define the signature of this slot, such
    as `str`, `int`, `list`, or any Python-type object.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`result`: 定义此槽签名的结果类型，例如 `str`、`int`、`list` 或任何 Python 类型对象。'
- en: '`revision`: The revision of the slot that is exported to QML as a keyword argument.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`revision`: 作为关键字参数导出到 QML 的槽的版本。'
- en: 'These slots are usually decorated in the following manner:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些槽通常以以下方式装饰：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Signal-slot connections
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号-槽连接
- en: As we know, many GUI applications are built using the PyQt/PySide Python bindings
    of the Qt library. If we review the code of these applications, we will see a
    difference in style for the signal/slot connection constructions. We need to consider
    the available constructions in the application. The bound signals have `connect()`,
    `emit()`, and `disconnect()` methods, which provide the operations with signals
    and slots. The `signal()` attribute, which returns the macro signature of the
    signal, is also available.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所知，许多 GUI 应用程序都是使用 Qt 库的 PyQt/PySide Python 绑定构建的。如果我们审查这些应用程序的代码，我们将看到信号/槽连接构造的风格有所不同。我们需要考虑应用程序中可用的构造。已绑定的信号具有
    `connect()`、`emit()` 和 `disconnect()` 方法，它们提供了与信号和槽的操作。返回信号宏签名的 `signal()` 属性也是可用的。
- en: connect
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 连接
- en: 'We can use the `triggered()` signal to connect selection options to the slots
    that provide some functionality for these options. The non-static connections
    have been used here. For demonstration purposes, however, static construction
    will also be used. Now, we need to look at the lines in the `UApp` class of the
    `u_app.py` files:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `triggered()` 信号将选择选项连接到提供这些选项功能的槽。这里使用了非静态连接。然而，出于演示目的，也将使用静态构造。现在，我们需要查看
    `u_app.py` 文件中 `UApp` 类的行：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Let''s consider the lines that are related to the signals. The combobox of
    the application is used to select an option between `Text` and `Table`, and is
    constructed as non-static using the `activated()` signal, which signals and calls
    the slot when the option is activated by hovering and clicking with the mouse.
    The top-panel menus use the `triggered()` signals to connect to the related slots,
    and are also non-static. The `Ok` push button will use `clicked()` signals (a
    non-static construction) to call the lambda function. In other words, the non-static
    approach can be described using the following syntax:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑与信号相关的行。应用程序的组合框用于在`Text`和`Table`之间选择一个选项，并使用`activated()`信号以非静态方式构建，该信号在鼠标悬停和点击时激活选项，并调用槽。顶部面板菜单使用`triggered()`信号连接到相关槽，也是非静态的。`Ok`按钮将使用`clicked()`信号（非静态构建）来调用lambda函数。换句话说，非静态方法可以使用以下语法描述：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Here, `object` is a widget or another signal, `signal` is an available signal
    or a constructed one, the `connect()` method connects to the slot, and `SLOT`
    is a function/method or Python callable. The `type` parameter describes the type
    of connection that will be used. The following types of connection are available:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`object`是一个小部件或另一个信号，`signal`是一个可用的信号或构造的信号，`connect()`方法连接到槽，而`SLOT`是一个函数/方法或Python可调用对象。`type`参数描述了将要使用的连接类型。以下类型的连接可用：
- en: '`QtCore.Qt.AutoConnection`—`0`: This is the default type. If the receiver of
    the signal is in the thread that emits the signal, `QtCore.Qt.DirectConnection`
    will be used. If the threads are different for the receiver and emitted signal,
    `QtCore.Qt.QueuedConnection` will be used.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.AutoConnection`—`0`: 这是默认类型。如果信号的接收者在发出信号的线程中，将使用`QtCore.Qt.DirectConnection`。如果接收者和发出信号的线程不同，将使用`QtCore.Qt.QueuedConnection`。'
- en: '`QtCore.Qt.DirectConnection`—`1`: This slot is invoked immediately and executed
    in the thread in the same way as the emitted signal.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.DirectConnection`—`1`: 立即调用此槽，并以与发出信号相同的方式在相同线程中执行。'
- en: '`QtCore.Qt.QueuedConnection`—`2`: This slot is invoked when control returns
    to the event loop for the thread of the receiver, and is executed in the thread
    of the receiver.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.QueuedConnection`—`2`: 当控制返回接收者线程的事件循环时，将调用此槽，并在接收者线程中执行。'
- en: '`QtCore.Qt.BlockingQueuedConnection`—`3`: This slot is invoked when control
    returns to the event loop for the thread of the receiver and is executed in the
    thread of the receiver, accompanied by blocking the signaling thread. This cannot
    be used if the threads of the emitted signal and receiver are the same.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.BlockingQueuedConnection`—`3`: 当控制返回接收者线程的事件循环时，将调用此槽，并在接收者线程中执行，同时阻塞信号线程。如果发出信号和接收者的线程相同，则不能使用此方法。'
- en: '`QtCore.Qt.UniqueConnection`—`3`: A unique connection will be used, and another
    connection will fail if it already exists when the same signal is already connected
    to the same slot for the same pair of objects.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.Qt.UniqueConnection`—`3`: 将使用唯一连接，如果相同的信号已经连接到相同的小部件对上的相同槽，则另一个连接将失败。'
- en: 'Constructions of the connections using the `QObject` class are also available with
    the following static methods:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`QObject`类构建连接的方法也有以下静态方法：
- en: '[PRE9]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Here, `object` is a widget, signal, and more; `SIGNAL`, as `QtCore.SIGNAL ("signal_name()")`,
    is an available signal or a constructed one; and `SLOT` is a function/method or
    Python callable that also can be **`QtCore.SLOT ("slot_name()")`**. The `type`
    parameter describes the type of connection that will be used. The `connect` method
    is used as the static function from the `QObject` class of the `QtCore` module.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`object`是一个小部件、信号等；`SIGNAL`，作为`QtCore.SIGNAL ("signal_name()")`，是一个可用的信号或构造的信号；而`SLOT`是一个函数/方法或Python可调用对象，也可以是**`QtCore.SLOT
    ("slot_name()")`**。`type`参数描述了将要使用的连接类型。`connect`方法用作`QtCore`模块中`QObject`类的静态函数。
- en: 'In the case of the static function, we have the following:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在静态函数的情况下，我们有以下：
- en: '[PRE10]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Here, `object1` (widget, signal, and so on) is a sender of the `QtCore.QObject`
    type, `SIGNAL` (`QtCore.SIGNAL ("signal_name()")`) is a signal of the `QtCore.QMetaMethod`
    type, `object2` (widget, signal, and so on) is a receiver of the `QtCore.QObject`
    type, `SLOT` (`QtCore.SLOT("slot_name()")`) is a function/method of the `QtCore.QMetaMethod`
    type, and `type` is the parameter of the connection that will be used.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`object1`（小部件、信号等）是`QtCore.QObject`类型的发送者，`SIGNAL`（`QtCore.SIGNAL ("signal_name()")`）是`QtCore.QMetaMethod`类型的信号，`object2`（小部件、信号等）是`QtCore.QObject`类型的接收者，`SLOT`（`QtCore.SLOT("slot_name()")`）是`QtCore.QMetaMethod`类型的功能/方法，而`type`是连接将要使用的参数。
- en: In actual fact, static constructions with the `QObject` class are available
    with PySide and PySide2, or PyQt4\. The PyQt5 binding does not support these constructions
    and uses the new style of the signals and slots, which was described prior to
    these static methods. To avoid confusion and preserve the complexity of the material,
    we will not proceed in this way. In our application, we will use non-static methods
    to establish a connection between signals and slots.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，使用`QObject`类的静态构造在PySide和PySide2，或PyQt4中是可用的。PyQt5绑定不支持这些构造，并使用之前描述的新式的信号和槽。为了避免混淆并保持材料的复杂性，我们不会这样做。在我们的应用程序中，我们将使用非静态方法在信号和槽之间建立连接。
- en: emit
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: emit
- en: In some cases, it is necessary to emit a signal from the application when it's
    processing. The `emit()` method can execute the emission of the signal alongside
    some related data (optionally) to the receiver between connected signal/slot objects.
    This is very useful in an application that uses threads to normalize the execution
    of the process, which will be covered in detail in [Chapter 16](0e64461d-9420-4c73-9607-25e90f854793.xhtml),
    *Threading and Multiprocessing*.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，当应用程序正在处理时，需要从应用程序中发出信号。`emit()`方法可以在连接的信号/槽对象之间执行信号的发射，同时（可选地）向接收者发送一些相关数据。这对于使用线程来标准化过程执行的应用程序非常有用，这将在第16章[线程和多进程](0e64461d-9420-4c73-9607-25e90f854793.xhtml)中详细讨论。
- en: 'Let''s consider an example related to the `emit()` method, where the application
    using these various data handling tools begins to work slowly. We will change
    the pandas tool functions that are used to open 1,000 rows, split this functionality
    using threads, and manipulate the 1,000,000 row/5 column table that will be written
    to file. For this, we need to open the `u_tools.py` files and add/change the following
    lines:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑一个与`emit()`方法相关的例子，其中使用这些各种数据处理工具的应用程序开始变慢。我们将更改用于打开1,000行的pandas工具函数，使用线程来分割这个功能，并操作将要写入文件的1,000,000行/5列的表格。为此，我们需要打开`u_tools.py`文件并添加/更改以下行：
- en: 'First of all, we need to add the following lines to the `import` section of
    these files:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们需要将这些行添加到这些文件的`import`部分：
- en: 'In the case of the PyQt5 `u_tools.py` file, add the following to the `import`
    section:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PyQt5的`u_tools.py`文件的情况下，将以下内容添加到`import`部分：
- en: '[PRE11]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the case of the PySide2 `u_tools.py` file, add the following to the `import`
    section:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在PySide2的`u_tools.py`文件的情况下，将以下内容添加到`import`部分：
- en: '[PRE12]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Before the `UTools` class, we need to add the classes with threads that will
    read/write CSV files with pandas.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UTools`类之前，我们需要添加将使用pandas读取/写入CSV文件的线程类。
- en: 'Add the `WPandas` class with the thread to write a CSV file:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 添加带有线程的`WPandas`类以写入CSV文件：
- en: '[PRE13]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This class includes the `sig1` signal, which will emit the string with an error
    if it occurs.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类包括`sig1`信号，如果发生错误，将发出带有错误信息的字符串。
- en: 'Now, add the `RPandas` class with the thread so that you can read CSV files:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加带有线程的`RPandas`类以读取CSV文件：
- en: '[PRE14]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This class includes the `sig1` signal, which will emit the `DataFrame`, signed
    with the `object` type, with an error, if it exists, of the `string` type. The
    CSV file will be read in chunks that will be emitted in a loop instead of being
    read all at once. This is done because large-sized files are hard to read and
    problems may arise when the text is added to the text fields. Because we need
    to remember that the text edit field is part of another thread – that is, the
    main GUI thread of the application – each chunk includes 10,000 rows, but only
    9 rows of the chunk are displayed. This demonstrates the possibility to work with
    large datasets, because displaying all of this data in the application text fields
    can freeze the app.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 此类包括`sig1`信号，该信号将发出带有`object`类型的`DataFrame`，如果存在，则带有`string`类型的错误。CSV文件将分块读取，并在循环中发出，而不是一次性读取。这样做是因为大文件难以读取，当文本添加到文本字段时可能会出现问题。因为我们需要记住文本编辑字段是另一个线程的一部分——即应用程序的主GUI线程——每个块包含10,000行，但只显示块中的9行。这展示了处理大型数据集的可能性，因为将所有这些数据显示在应用程序的文本字段中可能会使应用程序冻结。
- en: In actual fact, this isn't needed because the user doesn't want to read all
    the rows of the file; they simply want to operate with this data and visualize
    it; that is key. All of the preceding threads retrieve the data outside the `on_source()`
    function.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，这并不需要，因为用户不想读取文件的所有行；他们只想操作这些数据并可视化它；这是关键。所有前面的线程都在`on_source()`函数外部检索数据。
- en: Now, we need to continue adding/making changes to the `UTools` class of the `u_tools.py` files.
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要继续添加/修改`u_tools.py`文件中的`UTools`类。
- en: 'Add the following signals before the `__init__()` function of the `UTools`
    class:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在`UTools`类的`__init__()`函数之前添加以下信号：
- en: '[PRE15]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This creates the bound signals for communication between the functions of this
    class and threads. These signals will send lists with parameters to the threads.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了类函数和线程之间的绑定信号，用于通信。这些信号将发送带有参数的列表到线程。
- en: 'Now, we need to change the `pandas_write()` function, as follows:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们需要更改`pandas_write()`函数，如下所示：
- en: '[PRE16]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Here, we are replacing the data and index variables in the function. This is
    optional, and shows that data will be in the range of 0-1,000,000 `data`, with
    a number of rows that equal the 1,000,000 `index`. When an instance of the thread
    is created, the `pandas_sig1` signal connects to the `on_source()` function of
    the thread, and then emits the list with data and parameters to the thread for
    processing.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们正在替换函数中的数据和索引变量。这是可选的，并表明数据将在0-1,000,000的`data`范围内，行数等于1,000,000的`index`。当创建线程实例时，`pandas_sig1`信号连接到线程的`on_source()`函数，然后向线程发出带有数据和参数的列表以进行处理。
- en: 'Change the `pandas_read()` function, as follows:'
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式更改`pandas_read()`函数：
- en: '[PRE17]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This function creates the instance of the thread, defines the reading parameters,
    such as filename, reader, and chunk size, connects to the `on_source()` function,
    and emits the parameter as the list. Starting the thread then returns this thread
    so that it can be freely used.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数创建线程实例，定义读取参数，例如文件名、读取器和块大小，连接到`on_source()`函数，并将参数作为列表发出。启动线程后返回此线程，以便可以自由使用。
- en: 'Now, we need to change the `UApp` class of the `u_app.py` files. Let''s get
    started:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要更改`u_app.py`文件中的`UApp`类。让我们开始吧：
- en: 'Change the `data()` function where the CSV file is opened with pandas:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在使用pandas打开CSV文件的`data()`函数中进行更改：
- en: '[PRE18]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we are adding the `sig1` signal of the thread that connects to the slot,
    as well as a nested `to_field()` function for appending chunks of the reading
    file to the text edit field of the application, or an error to the status bar.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们添加了线程的`sig1`信号，该信号连接到槽，以及一个嵌套的`to_field()`函数，用于将读取文件的块追加到应用程序的文本编辑字段，或将错误添加到状态栏。
- en: 'The `user_data4()` function now appears as follows:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`user_data4()`函数现在如下所示：'
- en: '[PRE19]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: These examples have demonstrated how we can connect the signals to the slots
    (application functions) and emit various data from/to threads and to/from functions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这些示例展示了我们如何将信号连接到槽（应用程序函数）以及从/到线程和从/到函数发出各种数据。
- en: disconnect
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 断开连接
- en: 'The disconnect method for the signals is straightforward. In some cases, we
    need to disconnect the signal from a slot, and this is done as follows:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 信号断开连接的方法很简单。在某些情况下，我们需要从槽断开信号的连接，这如下所示：
- en: '[PRE20]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Here, `object` is a widget or another signal, `signal` is a used signal, and
    has a `disconnect` method, and a `SLOT`, which is a function/method or Python
    callable that is connected to this signal.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`object`是一个控件或另一个信号，`signal`是一个使用的信号，具有`disconnect`方法，以及一个`SLOT`，这是一个连接到此信号的功能/方法或Python可调用对象。
- en: This construction disconnects the signal from a connected slot. It should be
    noted that the construction needs to be the same as what was used with the signal
    connection.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 这个构造函数断开了连接的槽的信号。需要注意的是，构造函数需要与信号连接时使用的相同。
- en: Qt modules
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt模块
- en: The Qt library provides several classes to realize the additional functionality
    with signals and slots. These classes are **`QSignalBlocker`**, `QSignalMapper`,
    and `QSignalTransition`. All of these are available within the `QtCore` module.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: Qt库提供了几个类来实现信号和槽的附加功能。这些类是**`QSignalBlocker`**、`QSignalMapper`和`QSignalTransition`。所有这些都在`QtCore`模块中可用。
- en: QSignalBlocker
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSignalBlocker
- en: 'This class realizes an exception-safe wrapper around the `blockSignals()` methods,
    which blocks the signals for an item. Usually, this class can be used instead
    of the `blockSignals()` methods. The declaration syntax of this class is as follows:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类实现了对`blockSignals()`方法的异常安全包装，该方法阻止了项的信号。通常，这个类可以用作`blockSignals()`方法的替代。这个类的声明语法如下：
- en: '[PRE21]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `QSignalBlocker` class improves functionality by means of the following
    functions.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSignalBlocker`类通过以下函数提高了功能。'
- en: functional
  id: totrans-117
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to changes in functionality:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与功能变化相关的函数。
- en: '`signal_blocker.reblock()`: This reblocks signals that were previously unblocked.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_blocker.reblock()`: 这重新阻止了之前取消阻止的信号。'
- en: '`signal_blocker.unblock()`: This restores the `signalsBlocked()` state to its
    pre-blocking state.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_blocker.unblock()`: 这将`signalsBlocked()`状态恢复到阻塞前的状态。'
- en: QSignalMapper
  id: totrans-121
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSignalMapper
- en: 'This class realizes the bundles of the signals from identifiable senders and
    provides a collection of signals. It re-emits them with `integer`, `string`, or
    `widget` parameters that correspond to the sender. The declaration syntax of this
    class is as follows:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这个类实现了从可识别的发送者发出的信号包，并提供了一组信号。它使用与发送者对应的`integer`、`string`或`widget`参数重新发出它们。这个类的声明语法如下：
- en: '[PRE22]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `QSignalMapper` class improves functionality by means of the following functions.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSignalMapper`类通过以下函数提高了功能。'
- en: set
  id: totrans-125
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'These are functions that are related to setting parameters/properties in relation
    to the signal mapper:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与信号映射器相关的设置参数/属性的函数。
- en: '`signal_mapper.setMapping(QtCore.QObject, int)`: This sets the mapping for
    the case when the `map()` function is signaled from the sender (the first parameter);
    the signal mapped ID (the second parameter) will be emitted.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.setMapping(QtCore.QObject, int)`: 这设置了当`map()`函数从发送者（第一个参数）发出信号时的映射；映射的信号ID（第二个参数）将被发出。'
- en: '`signal_mapper.setMapping(QtCore.QObject, str)`: This sets the mapping for
    the case when the `map()` function is signaled from the sender (the first parameter);
    the signal mapped text (the second parameter) will be emitted.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.setMapping(QtCore.QObject, str)`: 这设置了当`map()`函数从发送者（第一个参数）发出信号时的映射；映射的信号文本（第二个参数）将被发出。'
- en: '`signal_mapper.setMapping(QtCore.QObject, object)`: This sets the mapping for
    the case when the `map()` function is signaled from the sender (the first parameter);
    the signal mapped object (the second parameter) will be emitted.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.setMapping(QtCore.QObject, object)`: 这设置了当`map()`函数从发送者（第一个参数）发出信号时的映射；映射的信号对象（第二个参数）将被发出。'
- en: '`signal_mapper.setMapping(QtCore.QObject, QtWidgets.QWidget)`: This sets the
    mapping for the case when the `map()` function is signaled from the sender (the
    first parameter); the signal mapped widget (the second parameter) will be emitted.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.setMapping(QtCore.QObject, QtWidgets.QWidget)`: 这设置了当`map()`函数从发送者（第一个参数）发出信号时的映射；映射的信号控件（第二个参数）将被发出。'
- en: functional
  id: totrans-131
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: functional
- en: 'These are functions that are related to the return of the current values of
    the signal mapper, changes in functionality, and more:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与信号映射器当前值的返回、功能变化等相关的函数。
- en: '`signal_mapper.map()`: This emits signals based on an object that sends signals
    to it.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.map()`: 这根据向它发送信号的发送者对象发出信号。'
- en: '`signal_mapper.map(QtCore.QObject)`: This emits signals based on the sender
    specified in the parameter.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.map(QtCore.QObject)`: 这根据参数中指定的发送者发出信号。'
- en: '`signal_mapper.mapping(int)`: This returns the sender of the `QtCore.QObject`
    type that is associated with the ID specified in the parameter.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.mapping(int)`: 这返回与参数中指定的 ID 关联的 `QtCore.QObject` 类型的发送者。'
- en: '`signal_mapper.mapping(str)`: This returns the sender of the `QtCore.QObject`
    type that is associated with the text specified in the parameter.'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.mapping(str)`: 这返回与参数中指定的文本关联的 `QtCore.QObject` 类型的发送者。'
- en: '`signal_mapper.mapping(object)`: This returns the sender of the `QtCore.QObject`
    type that is associated with the object specified in the parameter.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.mapping(object)`: 这返回与参数中指定的对象关联的 `QtCore.QObject` 类型的发送者。'
- en: '`signal_mapper.mapping(QtWidgets.QWidget)`: This returns the sender of the
    `QtCore.QObject` type that is associated with the widget specified in the parameter.'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.mapping(QtWidgets.QWidget)`: 这返回与参数中指定的小部件关联的 `QtCore.QObject`
    类型的发送者。'
- en: '`signal_mapper.removeMappings(QtCore.QObject)`: This removes mappings for the
    sender specified in the parameter.'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.removeMappings(QtCore.QObject)`: 这移除参数中指定的发送者的映射。'
- en: signals
  id: totrans-140
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 信号
- en: 'The available signals of the `QSignalMapper` class are as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSignalMapper` 类的可用信号如下：'
- en: '`signal_mapper.mapped(int)`: This signal is emitted when `map()` function is
    signaled from an object with the ID mapping set; the ID is passed in the parameter.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.mapped(int)`: 当从具有 ID 映射设置的对象发出 `map()` 函数信号时，会发出此信号；ID 通过参数传递。'
- en: '`signal_mapper.mapped(str)`: This signal is emitted when `map()` function is
    signaled from an object with the string mapping set; the text is passed in the
    parameter.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.mapped(str)`: 当从具有字符串映射设置的对象发出 `map()` 函数信号时，会发出此信号；文本通过参数传递。'
- en: '`signal_mapper.mapped(object)`: This signal is emitted when `map()` function is
    signaled from an object with the object mapping set; the object is passed in the
    parameter.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.mapped(object)`: 当从具有对象映射设置的对象发出 `map()` 函数信号时，会发出此信号；对象通过参数传递。'
- en: '`signal_mapper.mapped(QtWidgets.QWidget)`: This signal is emitted when `map()` function is
    signaled from an object with the widget mapping set; the widget is passed in the
    parameter.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_mapper.mapped(QtWidgets.QWidget)`: 当从具有小部件映射设置的对象发出 `map()` 函数信号时，会发出此信号；小部件通过参数传递。'
- en: QSignalTransition
  id: totrans-146
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QSignalTransition
- en: 'This class realizes a signal transition. The class constructs the new signal
    transition with the source state, as defined in the parameter. The declaration
    syntax of this class is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 此类实现信号转换。该类使用参数中定义的源状态构建新的信号转换。此类的声明语法如下：
- en: '[PRE23]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `QSignalTransition` class improves functionality by means of the following
    functions.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '`QSignalTransition` 类通过以下函数改进了功能。'
- en: set
  id: totrans-150
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置
- en: 'These are functions that are related to setting parameters/properties in relation
    to the signal transition:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与信号转换相关联的参数/属性设置相关的函数：
- en: '`signal_transit.setSenderObject(QtCore.QObject)`: This sets the sender, specified
    in the parameter, that will be associated with this signal''s transition.'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_transit.setSenderObject(QtCore.QObject)`: 这设置参数中指定的将与该信号转换关联的发送者。'
- en: '`signal_transit.setSignal(QtCore.QByteArray)`: This sets the signal, specified
    in the parameter, that will be associated with this signal''s transition.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_transit.setSignal(QtCore.QByteArray)`: 这设置参数中指定的将与该信号转换关联的信号。'
- en: functional
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that are related to the returns of the current values of
    the signal transition, changes in functionality, and more:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与信号转换当前值返回、功能变化等相关联的函数：
- en: '`signal_transit.senderObject()`: This returns the sender of the `QtCore.QObject` type
    that is associated with this signal transition.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_transit.senderObject()`: 这返回与该信号转换关联的 `QtCore.QObject` 类型的发送者。'
- en: '`signal_transit.signal()`: This returns the signal of the `QtCore.QByteArray`
    type that is associated with this signal transition.'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '`signal_transit.signal()`: 这返回与该信号转换关联的 `QtCore.QByteArray` 类型的信号。'
- en: Events and event handlers
  id: totrans-158
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件和事件处理器
- en: 'A no less important aspect of the GUI application is the realization of events
    and event handlers. Events inform the application about things that have happened
    as a result of inside or outside activity associated with the application''s processes.
    In the Qt library, this behavior is characterized and realized by means of the
    Qt event system. Through this system, events are objects that are derived from
    the abstract `QEvent` class of the `QtCore` module. Events can be handled by any
    instance of the `QObject` subclass. Usually, the events are delivered by calling
    a virtual function – an event handler – that provides a convenient way to handle
    an event that''s related to the application. The event handlers usually look as
    follows:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Here, it uses the `enterEvent()` method as an event handler. The Qt framework
    realizes event handlers for painting, resizing, sending, showing, dropping, the
    mouse, the keyboard, and more. The following section describes commonly used events
    and event handlers that can be realized in the GUI application.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: QEvent
  id: totrans-162
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the base class of all event classes and provides realization of the
    event system with the functionality of the special event types. The declaration
    syntax of this class is as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: A full list of the available types that can be specified in the parameter can
    be found in the Qt documentation ([https://doc.qt.io](https://doc.qt.io/)). The
    `QEvent` class improves functionality by means of the following functions.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: set
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to setting parameters/properties in relation to the event:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '`event.setAccepted(bool)`: If the parameter is `True`, this sets this event
    to an accepted state.'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: is
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`) related to the event states:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: '`event.isAccepted()`: This returns `True` if this event is accepted.'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-172
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the event, changes in functionality, and more:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '`event.accept()`: This sets the accept flag of the event object; this event
    will be accepted.'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '`event.ignore()`: This sets the ignore flag of the event object; this event
    will be ignored.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: '`event.registerEventType(int)`: This registers and returns a custom event type,
    with hints specified in the parameter.'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '`event.spontaneous()`: This returns `True` if this is a system event (outside
    of the application).'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '`event.type()`: This returns the type of event as a `QtCore.QEvent.Type` object.'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: QEventLoop
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides functionality in terms of entering and leaving the event
    loop. The main event loop is realized when the application is started and moves
    to the infinite loop. The declaration syntax of this class is as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The `QEventLoop` class improves functionality by means of the following functions.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: is
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function returns a Boolean value (`bool`)  related to the event loop states:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '`event.isRunning()`: This returns `True` if this event loop is running, otherwise,
    it returns false.'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-189
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the event loop, changes in functionality, and more:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.exec_(QtCore.QEventLoop.ProcessEventsFlags)`: This enters the event
    loop and begins processing in relation to the flags specified in the parameter.
    The flags that can be used are as follows:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEventLoop.AllEvents`: All events will be processed.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**`QtCore.QEventLoop.ExcludeUserInputEvents`**: Excludes user input events
    in processing.'
  id: totrans-193
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEventLoop.ExcludeSocketNotifiers`: Excludes socket notifier events
    in processing.'
  id: totrans-194
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEventLoop.WaitForMoreEvents`: Processing waits for events if no pending
    events are available.'
  id: totrans-195
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`event_loop.exit(int)`: This exits the event loop with the return code that''s
    specified in the parameter. A return code of `0` indicates success; other non
    zero values indicate an error.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.processEvents(QtCore.QEventLoop.ProcessEventsFlags)`: This processes
    pending events that match flags specified in the parameter.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.processEvents(QtCore.QEventLoop.ProcessEventsFlags, int)`: This
    processes pending events that match flags (the first parameter) for a maximum
    time (the second parameter) in milliseconds.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.quit()`: This quits the event loop normally, and is similar to
    the `event_loop.exit(0)` method.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '`event_loop.wakeUp()`: This wakes up the event loop.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: QChildEvent
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes the events related to the child objects. The event is sent
    to the objects when children are added or removed. The declaration syntax of this
    class is as follows:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'The available types for this event are as follows:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ChildAdded`: A child is added to the object.'
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ChildRemoved`: A child is removed from the object.'
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.ChildPolished`: A child is polished.'
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QChildEvent` class improves functionality by means of the following functions.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-209
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the event, changes in functionality, and more:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '`child_event.added()`: This returns `True` if the type of this event is `ChildAdded`.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '`child_event.child()`: This returns a child object of the `QtCore.QObject`
    type that was added or removed.'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '`child_event.polished()`: This returns `True` if the type of this event is
    `ChildPolished`.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '`child_event.removed()`: This returns `True` if the type of this event is `ChildRemoved`.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: QTimerEvent
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class can realize the timer events that send events to the objects at
    regular intervals. The declaration syntax of this class is as follows:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-220
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The unique ID of the timer is specified in the parameter of the event. The `QTimerEvent`
    class improves functionality by means of the following functions.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to the returns of the current values of the event:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '`timer_event.timerId()`: This returns the unique ID of the timer.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: QActionEvent
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class provides the events that appear when an action realized with the
    `QAction` class is added, removed, or changed. It is available with items that
    support action operations, such as `QMenu`. The declaration syntax of this class
    is as follows:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了当使用 `QAction` 类实现动作添加、移除或更改时出现的事件。它适用于支持操作的项目，如 `QMenu`。此类的声明语法如下：
- en: '[PRE32]'
  id: totrans-230
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'The first parameter is a type of event, the second is an action, and the third
    is the previous action that''s specified. The available types for this event are
    as follows:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是事件类型，第二个是动作，第三个是指定的先前动作。此事件的可选类型如下：
- en: '`QtCore.QEvent.ActionChanged`: Action changed.'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.ActionChanged`: 动作已更改。'
- en: '`QtCore.QEvent.ActionAdded`: Action added to the object.'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.ActionAdded`: 向对象添加动作。'
- en: '`QtCore.QEvent.ActionRemoved`: Action removed from the object.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.ActionRemoved`: 从对象中移除动作。'
- en: The `QActionEvent` class improves functionality by means of the following functions.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`QActionEvent` 类通过以下函数改进了功能。'
- en: functional
  id: totrans-236
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the event:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前事件值的返回、功能变化等相关联的函数：
- en: '`action_event.action()`: This returns an added, changed, or removed action.'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: '`action_event.action()`: 这返回已添加、更改或移除的动作。'
- en: '`action_event.before()`: If the type of action is `ActionAdded`, this returns
    the action that appeared previously.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: '`action_event.before()`: 如果动作类型是 `ActionAdded`，则返回之前出现的动作。'
- en: event handlers
  id: totrans-240
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理器
- en: 'The handler for this event is as follows:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件的处理器如下：
- en: '[PRE33]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: QDropEvent
  id: totrans-243
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QDropEvent
- en: 'This class provides the events that appear when drag and drop actions are completed.
    It is available with items that support dragging operations such as `QWidget` and
    `QTextEdit`. The declaration syntax of this class is as follows:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 此类提供了当拖放操作完成时出现的事件。它适用于支持拖动操作的项目，如 `QWidget` 和 `QTextEdit`。此类的声明语法如下：
- en: '[PRE34]'
  id: totrans-245
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For the construction of the drop event, the following parameters are used:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 构建丢弃事件时使用以下参数：
- en: Position (the first parameter).
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位置（第一个参数）。
- en: Drop actions (the second parameter).
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 丢弃操作（第二个参数）。
- en: MIME data (the third parameter).
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MIME 数据（第三个参数）。
- en: Button states (the fourth parameter).
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 按钮状态（第四个参数）。
- en: Keyboard modifiers (the fifth parameter).
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 键盘修饰符（第五个参数）。
- en: Type (the sixth parameter).
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型（第六个参数）。
- en: The `QDropEvent` class improves functionality by means of the following functions.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`QDropEvent` 类通过以下函数改进了功能。'
- en: set
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: set
- en: 'This function is related to setting parameters/properties in relation to the
    drop event:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数与设置与丢弃事件相关的参数/属性有关：
- en: '`drop_event.setDropAction(QtCore.Qt.DropAction)`: This sets the action, specified
    in the parameter, that will be used for this event.'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.setDropAction(QtCore.Qt.DropAction)`: 这将设置参数中指定的动作，该动作将用于此事件。'
- en: functional
  id: totrans-257
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the drop event, changes in functionality, and more:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与丢弃事件当前值的返回、功能变化等相关联的函数：
- en: '`drop_event.acceptProposedAction()`: This sets the drop action as the proposed
    action for this event.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.acceptProposedAction()`: 这将设置丢弃操作为此事件的建议操作。'
- en: '`drop_event.dropAction()`: This returns the action of the `QtCore.Qt.DropAction`
    type that is used with this event.'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.dropAction()`: 这返回与此事件一起使用的 `QtCore.Qt.DropAction` 类型的动作。'
- en: '`drop_event.keyboardModifiers()`: This returns keyboard modifiers of the `QtCore.Qt.KeyboardModifiers`
    type that are used with this event.'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.keyboardModifiers()`: 这返回与此事件一起使用的 `QtCore.Qt.KeyboardModifiers`
    类型的键盘修饰符。'
- en: '`drop_event.mimeData()`: This returns MIME data of the `QtCore.QMimeData` type
    that is used with this event.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.mimeData()`: 这返回与此事件一起使用的 `QtCore.QMimeData` 类型的 MIME 数据。'
- en: '`drop_event.mouseButtons()`: This returns the mouse buttons of the `QtCore.Qt.MouseButtons`
    type that are used with this event.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.mouseButtons()`: 这返回与此事件一起使用的 `QtCore.Qt.MouseButtons` 类型的鼠标按钮。'
- en: '`drop_event.pos()`: This returns the position of the `QtCore.QPoint` type where
    the drop was made.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.pos()`: 这返回丢弃操作的 `QtCore.QPoint` 类型的位置。'
- en: '`drop_event.posF()`: This returns the position of the `QtCore.QPointF` type
    where the drop was made.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.posF()`: 这返回丢弃操作的 `QtCore.QPointF` 类型的位置。'
- en: '`drop_event.possibleActions()`: This returns the possible drop actions of the
    `QtCore.Qt.DropActions` type.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.possibleActions()`: 这返回 `QtCore.Qt.DropActions` 类型的可能丢弃操作。'
- en: '`drop_event.proposedAction()`: This returns the proposed action of the `QtCore.Qt.DropAction`
    type.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.proposedAction()`: 这返回 `QtCore.Qt.DropAction` 类型的建议动作。'
- en: '`drop_event.source()`: This returns the source of the `QtCore.QObject` type
    that is used for drop event operations, such as a widget.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`drop_event.source()`: 此函数返回用于拖放事件操作的`QtCore.QObject`类型源，例如小部件。'
- en: event handlers
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理程序
- en: 'The handler for this event is as follows:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件的处理程序如下：
- en: '[PRE35]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Event handlers of the `QDragEnterEvent`, `QDragMoveEvent`, and `QDragLeaveEvent`
    types, which improve the functionality of `QDropEvent`, are also available, as
    follows:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`QDragEnterEvent`、`QDragMoveEvent`和`QDragLeaveEvent`类型的事件处理程序，这些处理程序提高了`QDropEvent`的功能，如下所示：'
- en: '[PRE36]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: QEnterEvent
  id: totrans-274
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QEnterEvent
- en: 'This class handles events when the mouse cursor enters a widget, a window,
    or another GUI element/item. It is available with almost all items that support
    mouse cursor enter operations. The declaration syntax of this class is as follows:'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 此类处理鼠标光标进入小部件、窗口或其他GUI元素/项时的事件。它几乎适用于所有支持鼠标光标进入操作的项。此类声明的语法如下：
- en: '[PRE37]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'In regard to the construction of the enter event, the following parameters
    are used:'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 关于进入事件的构建，使用以下参数：
- en: Local position (the first parameter).
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本地位置（第一个参数）。
- en: Window position (the second parameter).
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口位置（第二个参数）。
- en: Screen position (the third parameter) of the mouse cursor relative to the receiving
    item.
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 鼠标光标相对于接收项的屏幕位置（第三个参数）。
- en: The `QEnterEvent` class improves functionality by means of the following functions.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`QEnterEvent`类通过以下函数提高功能。'
- en: functional
  id: totrans-282
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能性
- en: 'These are functions that are related to the returns of the current values of
    the enter event, changes in functionality, and more:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前进入事件值返回、功能变化等相关的函数：
- en: '`enter_event.globalPos()`: This returns the global position of the `QtCore.QPoint`
    type for the item when the enter event occurs.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.globalPos()`: 当进入事件发生时，此函数返回项的`QtCore.QPoint`类型全局位置。'
- en: '`enter_event.globalX()`: This returns the global x axis position of the mouse
    cursor on the item when the enter event occurs.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.globalX()`: 当进入事件发生时，此函数返回鼠标光标在项上的全局x轴位置。'
- en: '`enter_event.globalY()`: This returns the global y axis position of the mouse
    cursor on the item when the enter event occurs.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.globalY()`: 当进入事件发生时，此函数返回鼠标光标在项上的全局y轴位置。'
- en: '`enter_event.localPos()`: This returns the local position of the `QtCore.QPointF`
    type for the mouse cursor on the item when the enter event occurs.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.localPos()`: 当进入事件发生时，此函数返回鼠标光标在项上的`QtCore.QPointF`类型本地位置。'
- en: '`enter_event.pos()`: This returns the position of the `QtCore.QPoint` type
    for the mouse cursor in global screen coordinates when the enter event occurs.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.pos()`: 当进入事件发生时，此函数返回鼠标光标在全局屏幕坐标下的`QtCore.QPoint`类型位置。'
- en: '`enter_event.screenPos()`: This returns the position of the `QtCore.QPointF`
    type for the mouse cursor on the screen when the enter event occurs.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.screenPos()`: 当进入事件发生时，此函数返回鼠标光标在屏幕上的`QtCore.QPointF`类型位置。'
- en: '`enter_event.windowPos()`: This returns the position of the `QtCore.QPointF`
    type for the mouse cursor on the window when the enter event occurs.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.windowPos()`: 当进入事件发生时，此函数返回鼠标光标在窗口上的`QtCore.QPointF`类型位置。'
- en: '`enter_event.x()`: This returns the *x* position for the mouse cursor on the
    item when the enter event occurs.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.x()`: 当进入事件发生时，此函数返回鼠标光标在项上的*x*位置。'
- en: '`enter_event.y()`: This returns the *y* position for the mouse cursor on the
    item when the enter event occurs,'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`enter_event.y()`: 当进入事件发生时，此函数返回鼠标光标在项上的*y*位置，'
- en: event handlers
  id: totrans-293
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理程序
- en: 'The handler for this event is as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件的处理程序如下：
- en: '[PRE38]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'The leave event of the mouse cursor from the item can be realized as follows:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 鼠标光标从项中离开的事件可以如下实现：
- en: '[PRE39]'
  id: totrans-297
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: QFocusEvent
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QFocusEvent
- en: 'This class handles the focus events of an item. These events appear when the
    keyboard input focus changes. It is available with widgets such as `QWidget`,
    which support keyboard focus operations. The declaration syntax of this class
    is as follows:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 此类处理项的焦点事件。这些事件出现在键盘输入焦点变化时。它适用于支持键盘焦点操作的`QWidget`等小部件。此类声明的语法如下：
- en: '[PRE40]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'In regard to the construction of the focus event, the type (the first parameter)
    of the event and the focus reason (the second parameter) are used. The available
    types for this event are as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 关于焦点事件的构建，使用事件类型（第一个参数）和焦点原因（第二个参数）。此事件可用的类型如下：
- en: '`QtCore.QEvent.FocusIn`: This item gains keyboard focus.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.FocusIn`: 此项获得键盘焦点。'
- en: '`QtCore.QEvent.FocusOut`: This item loses keyboard focus.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.FocusOut`: 此项失去键盘焦点。'
- en: '`QtCore.QEvent.FocusAboutToChange`: This item''s focus is about to change.'
  id: totrans-304
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.FocusAboutToChange`: 此项的焦点即将改变。'
- en: The `QFocusEvent` class improves functionality by means of the following functions.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`QFocusEvent`类通过以下函数增强了功能。'
- en: functional
  id: totrans-306
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that are related to the returns of the current values of
    the focus event:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前焦点事件当前值相关的函数：
- en: '`focus_event.gotFocus()`: This returns `True` if this event has a `FocusIn`
    type.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`focus_event.gotFocus()`: 如果此事件具有`FocusIn`类型，则返回`True`。'
- en: '`focus_event.lostFocus()`: This returns `True` if this event has a `FocusOut`
    type.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`focus_event.lostFocus()`: 如果此事件具有`FocusOut`类型，则返回`True`。'
- en: '`focus_event.reason()`: This returns the reason of the `QtCore.Qt.FocusReason`
    type for this focus event.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`focus_event.reason()`: 返回此焦点事件的`QtCore.Qt.FocusReason`类型的理由。'
- en: event handlers
  id: totrans-311
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理器
- en: 'The handlers for this event are as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件的处理程序如下：
- en: '[PRE41]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: QKeyEvent
  id: totrans-314
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QKeyEvent
- en: 'This class handles the events that appear in relation to keyboard activity.
    It becomes available when you press the keys of the keyboard with widgets such
    as `QWidget`. The declaration syntax of this class is as follows:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 此类处理与键盘活动相关的事件。当您使用`QWidget`等小部件按下键盘键时，它变得可用。此类的声明语法如下：
- en: '[PRE42]'
  id: totrans-316
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In regard to the construction of the key event, the type (the first parameter),
    key (the second parameter), and keyboard modifiers (the third parameter) are used.
    The available types for this event are as follows:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 关于按键事件的构建，使用类型（第一个参数）、键（第二个参数）和键盘修饰符（第三个参数）。此事件可用的类型如下：
- en: '`QtCore.QEvent.KeyPress`: Presses a key.'
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.KeyPress`: 按下键。'
- en: '`QtCore.QEvent.KeyRelease`: Releases a key.'
  id: totrans-319
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.KeyRelease`: 释放键。'
- en: '`QtCore.QEvent.ShortcutOverride`: A key press in a child.'
  id: totrans-320
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`QtCore.QEvent.ShortcutOverride`: 子窗口中的按键。'
- en: The `QKeyEvent` class improves functionality by means of the following functions.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`QKeyEvent`类通过以下函数增强了功能。'
- en: is
  id: totrans-322
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 是
- en: 'This function returns a Boolean value (`bool`) related to the key event states:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回与按键事件状态相关的布尔值（`bool`）：
- en: '`key_event.isAutoRepeat()`: This returns `True` if the key event comes from
    an auto-repeating key.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.isAutoRepeat()`: 如果按键事件来自自动重复键，则返回`True`。'
- en: functional
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能
- en: 'These are functions that are related to the returns of the current values of
    the key event:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是与当前按键事件当前值相关的函数：
- en: '`key_event.count()`: This returns the number of keys that are available for
    this event.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.count()`: 返回此事件可用的键的数量。'
- en: '`key_event.key()`: This returns the code of the key, corresponding to `QtCore.Qt.Key`,
    that was used.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.key()`: 返回键的代码，对应于`QtCore.Qt.Key`。'
- en: '`key_event.matches(QtGui.QKeySequence.StandardKey)`: This returns `True` if
    the key event matches the standard key specified in the parameter.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.matches(QtGui.QKeySequence.StandardKey)`: 如果按键事件与参数中指定的标准键匹配，则返回`True`。'
- en: '`key_event.modifiers()`: This returns the keyboard modifiers of the `QtCore.Qt.KeyboardModifiers` type
    for this key event.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.modifiers()`: 返回此按键事件的`QtCore.Qt.KeyboardModifiers`类型的键盘修饰符。'
- en: '`key_event.nativeModifiers()`: This returns the native modifiers of this key
    event.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.nativeModifiers()`: 返回此按键事件的本地修饰符。'
- en: '`key_event.nativeScanCode()`: This returns the scan code of this key event.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.nativeScanCode()`: 返回此按键事件的扫描码。'
- en: '`key_event.nativeVirtualKey()`: This returns the virtual key of this key event.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.nativeVirtualKey()`: 返回此按键事件的虚拟键。'
- en: '`key_event.text()`: This returns the text that''s generated with this key.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`key_event.text()`: 返回由此键生成的文本。'
- en: event handlers
  id: totrans-335
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件处理器
- en: 'The handlers for this event are as follows:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 此事件的处理程序如下：
- en: '[PRE43]'
  id: totrans-337
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: QMouseEvent
  id: totrans-338
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: QMouseEvent
- en: 'This class handles the events that appear in tandem with mouse activity. It
    is available with almost all graphical items that can interact with the mouse.
    The declaration syntax of this class is as follows:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 此类处理与鼠标活动同时出现的事件。它几乎与所有可以与鼠标交互的图形项都可用。此类的声明语法如下：
- en: '[PRE44]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In regard to the construction of the mouse event, the following parameters
    are used:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 关于鼠标事件构建，使用以下参数：
- en: Type (the first parameter).
  id: totrans-342
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 类型（第一个参数）。
- en: Local position (the second parameter) of the cursor.
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光标局部位置（第二个参数）。
- en: Window position (the third parameter) of the cursor.
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光标窗口位置（第三个参数）。
- en: Screen position (the fourth parameter) of the cursor.
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 光标屏幕位置（第四个参数）。
- en: The button (the fifth parameter) that caused the event.
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导致事件的按钮（第五个参数）。
- en: Buttons (the sixth parameter) that describe the mouse/keyboard states.
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述鼠标/键盘状态的按钮（第六个参数）。
- en: 'The available types for this event are as follows:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.MouseButtonPress`: Clicks the mouse button.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.MouseButtonRelease`: Releases the mouse button.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.MouseMove`: Moves the mouse over the item.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`QtCore.QEvent.MouseButtonDblClick`: Double-clicks the mouse button.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QMouseEvent` class improves functionality by means of the following functions.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: set
  id: totrans-354
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This function is related to setting parameters/properties in relation to the mouse
    event:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.setLocalPos(QtCore.QPointF)`: This sets the local position, specified
    in the parameter, for this mouse event.'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-357
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the mouse event:'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.button()`: This returns the button of the `QtCore.Qt.MouseButton`
    type that causes this mouse event.'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.buttons()`: This returns the button state of the `QtCore.Qt.MouseButtons`
    type that was generated with this mouse event.'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.flags()`: This returns flags of the `QtCore.Qt.MouseEventFlags`
    type for this mouse event.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.globalPos()`: This returns the global position of the `QtCore.QPoint`
    type for the mouse cursor when the event occurs.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.globalX()`: This returns the global *x* axis position for the
    mouse cursor when the mouse event occurs.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.globalY()`: This returns the global *y* axis position for the
    mouse cursor when the mouse event occurs.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.localPos()`: This returns the local position of the `QtCore.QPointF`
    type for the mouse cursor on the item when the mouse event occurs.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.pos()`: This returns the position of the `QtCore.QPoint` type
    for the mouse cursor in global screen coordinates when the mouse event occurs.'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.screenPos()`: This returns the position of the `QtCore.QPointF`
    type for the mouse cursor on the screen when the mouse event occurs.'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.windowPos()`: This returns the position of the `QtCore.QPointF`
    type for the mouse cursor on the window when the mouse event occurs.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.source()`: This returns the information of the `QtCore.Qt.MouseEventSource`
    type related to the mouse event source.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.x()`: This returns the *x* position for the mouse cursor on the
    item when the mouse event occurs.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
- en: '`mouse_event.y()`: This returns the *y* position for the mouse cursor on the
    item when the mouse event occurs.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-372
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handlers for this event are as follows:'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: QWheelEvent
  id: totrans-375
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events that appear when the mouse wheel is operated. These
    events are generated for mouse wheels and trackpad scroll gestures. The declaration
    syntax of this class is as follows:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-377
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In regard to the construction of the wheel event, the following parameters
    are used:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: The position (the first parameter) of the mouse cursor location.
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The global position (the second parameter).
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pixel delta (the third parameter) or scrolling distance in pixels on the
    screen.
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The angle delta (the fourth parameter) or wheel rotation distance.
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The qt4 delta (the fifth parameter) monodirectional rotation.
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The qt4 orientation (the sixth parameter) monodirectional direction.
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mouse states (the seventh parameter).
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard states (the eighth parameter).
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The scrolling phase (the ninth parameter).
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The source (the tenth parameter) of the mouse wheel or gesture.
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The inversion (the eleventh parameter) option.
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QWheelEvent` class improves functionality by means of the following functions.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the wheel event:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.angleDelta()`: This returns the distance of the `QtCore.QPoint`
    type for the wheel''s rotation.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.buttons()`: This returns the button state of the `QtCore.Qt.MouseButtons`
    type that was generated with this wheel event.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.globalPos()`: This returns the global position of the `QtCore.QPoint`
    type of the pointer related to this wheel event.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.globalPosF()`: This returns the global position of the `QtCore.QPointF`
    type of the pointer related to this wheel event.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.globalX()`: This returns the global *x* axis position of the pointer
    related to this wheel event.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.globalY()`: This returns the global *y* axis position of the pointer
    related to this wheel event.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.inverted()`: This returns `True` if the delta values are inverted
    for this event.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.orientation()`: This returns the orientation of the `QtCore.Qt.Orientation`
    type for this wheel.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.phase()`: This returns the scrolling phase of this event.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.pixelDelta()`: This returns the pixel delta of the `QtCore.QPoint`
    type as the scrolling distance on screen.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.pos()`: This returns the position of the `QtCore.QPoint` type
    for the pointer related to the item.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.posF()`: This returns the position of the `QtCore.QPointF` type
    for the pointer related to the item.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.source()`: This returns the information of the `QtCore.Qt.MouseEventSource`
    type related to the wheel event source.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.x()`: This returns the *x* position for the pointer related to
    the item when the event occurs.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '`wheel_event.y()`: This returns the *y* position for the pointer related to
    the item when the event occurs.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-408
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-410
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: QMoveEvent
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events that appear in connection with the moving activity
    of the items. It is available with almost all graphical items where moving can
    be realized. The declaration syntax of this class is as follows:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: In regard to the construction of the move event, the new (the first parameter)
    and old (the second parameter) positions are used. The `QMoveEvent` class improves
    functionality by means of the following functions.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the move event:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '`move_event.oldPos()`: This returns the old position of the `QtCore.QPoint`
    type for the moving item.'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '`move_event.pos()`: This returns the new position of the `QtCore.QPoint` type
    for the moving item.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-419
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-421
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: QPaintEvent
  id: totrans-422
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events to do with painting that relates to the items. It
    is available with almost all graphical items where painting can be operated. As
    we''ve described in previous chapters, all the graphical elements of the Qt library
    are painted and, therefore, the `paintEvent()` event handler can be used for updating
    the graphical representation of the items. The declaration syntax of this class
    is as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: In regard to the construction of the paint event, the rectangle or region for
    painting that's specified in the parameter is used. The `QPaintEvent` class improves
    functionality by means of the following functions.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-426
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the paint event:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '`paint_event.rect()`: This returns the rectangle of the `QtCore.QRect` type
    that is used for the update.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '`paint_event.region()`: This returns the rectangle of the `QtGui.QRegion` type
    that is used for the update.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-430
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: QResizeEvent
  id: totrans-433
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events that appear when we resize items. It is available
    with almost all graphical items where you can resize items. The declaration syntax
    of this class is as follows:'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-435
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In regard to the construction of the resizing event, the new size (the first
    parameter) and old size (the second parameter) are used. The `QResizeEvent` class
    improves functionality by means of the following functions.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-437
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the resizing event:'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: '`resize_event.oldSize()`: This returns the old size of the `QtCore.QSize` type
    for the item being resized.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: '`resize_event.size()`: This returns the new size of the `QtCore.QSize` type
    for the item being resized.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-441
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-443
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: QTabletEvent
  id: totrans-444
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events related to tablet device functionality. The declaration
    syntax of this class is as follows:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'In regard to the construction of the tablet event, the following parameters
    are used:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: The type (the first parameter).
  id: totrans-448
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The position (the second parameter) where the event occurred.
  id: totrans-449
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The global position (the third parameter) in absolute coordinates.
  id: totrans-450
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The device (the fourth parameter).
  id: totrans-451
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pointer type (the fifth parameter).
  id: totrans-452
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pressure (the sixth parameter) exerted on the device.
  id: totrans-453
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *x* tilt (the seventh parameter) degree for this device.
  id: totrans-454
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *y* tilt (the eighth parameter) degree for this device.
  id: totrans-455
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The tangential pressure (the ninth parameter) of the airbrush.
  id: totrans-456
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The rotation (the tenth parameter) for this device.
  id: totrans-457
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The*z* (the eleventh parameter) coordinate of the device.
  id: totrans-458
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The key state (the twelfth parameter).
  id: totrans-459
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The unique ID (the thirteenth parameter).
  id: totrans-460
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The button (the fourteenth parameter) that caused the event.
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The button (the fifteenth parameter) state at the time of the event.
  id: totrans-462
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QTabletEvent` class improves functionality by means of the following functions.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the tablet event:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.button()`: This returns the button of the `QtCore.Qt.MouseButton`
    type that causes this tablet event.'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.buttons()`: This returns the buttons state of the `QtCore.Qt.MouseButtons`
    type that was generated with this tablet event.'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.device()`: This returns the type of the device that generated
    this tablet event as `QtGui.QTabletEvent.TabletDevice`.'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.globalPos()`: This returns the global position of the `QtCore.QPoint`
    type of the device when the event occurs.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.globalPosF()`: This returns the global position of the **`QtCore.QPointF`**
    type of the device when the event occurs.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.globalX()`: This returns the global *x* axis position of the
    device when the tablet event occurs.'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.globalY()`: This returns the global *y* axis position of the
    device when the tablet event occurs.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.hiResGlobalX()`: This returns the high-precision *x* position
    of this device.'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.hiResGlobalY()`: This returns the high-precision *y* position
    of this device.'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.pointerType()`: This returns the type of pointer as **`QtGui.QTabletEvent.PointerType`**,
    which generated this event.'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.pos()`: This returns the position of the `QtCore.QPoint` type
    for the device related to the item.'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.posF()`: This returns the position of the `QtCore.QPointF` type
    for the device related to the item.'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.pressure()`: This returns the pressure for the device from `0.0`
    (stylus is not on the tablet) to `1.0` (stylus is on the tablet with maximum pressure).'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.rotation()`: This returns the rotation of the device in degrees,
    where `0` means that the tip of the stylus is pointing toward the top of the tablet,
    a positive value means that it is turned to the right, and a negative value means
    that it is turned to the left.'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.tangentialPressure()`: This returns the tangential pressure for
    this device given by a finger wheel on an airbrush tool in the range of `-1.0`
    to `1.0`.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.uniqueId()`: This returns the unique ID of this tablet device.'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.xTilt()`: This returns the angle according to the *x* axis between
    the device and the perpendicular.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.yTilt()`: This returns the angle according to the *y* axis between
    the device and the perpendicular.'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.x()`: This returns the *x* position for the device related to
    the item when the event occurs.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.y()`: This returns the *y* position for the device related to
    the item when the event occurs.'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '`tablet_event.z()`: This returns the *z* position according to the z axis for
    the device; for example, as represented by a wheel on a 4D mouse.'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-487
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-489
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: QTouchEvent
  id: totrans-490
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class handles events that appear when we move one or more touch points
    on a device that supports touch operations. These devices must have a touchscreen
    or trackpad. To make this functionality available, the widgets or graphical items
    need to have the `acceptTouchEvents` attribute set to `True`. The declaration
    syntax of this class is as follows:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-492
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In regard to the construction of the touch event, the following parameters
    are used:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: The type (the first parameter).
  id: totrans-494
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The device (the second parameter).
  id: totrans-495
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keyboard modifiers (the third parameter).
  id: totrans-496
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touch point states (the fourth parameter).
  id: totrans-497
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Touch points (the fifth parameter).
  id: totrans-498
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `QTouchEvent` class improves functionality by means of the following functions.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: set
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to setting parameters/properties in relation
    to the touch event:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setDevice(QtGui.QTouchDevice)`: This sets the device, specified
    in the parameter, that will be used.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setTarget(QtCore.QObject)`: This sets the target (such as a widget),
    specified in the parameter, for this event.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setTouchPoints([QtGui.QTouchEvent.TouchPoint])`: This sets the
    touch points, specified in the parameter, for this event.'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setTouchPointStates(QtCore.Qt.TouchPointStates)`: This sets the
    touch point states, specified in the parameter, for this event.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.setWindow(QtGui.QWindow)`: This sets the window, specified in
    the parameter, for this touch event.'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-507
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are functions that are related to the returns of the current values of
    the touch event:'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.device()`: This returns a device of the `QtGui.QTouchDevice` type
    from which the touch event occurs.'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.target()`: This returns the target object of the `QtCore.QObject`
    type for the event that occurred.'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.touchPoints()`: This returns a list of touch points for this touch
    event.'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.touchPointStates()`: This returns the touch point states of the
    **`QtCore.Qt.TouchPointStates`** type for this `touch` event.'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: '`touch_event.window()`: This returns the window of the **`QtGui.QWindow`**
    type for the touch event that occurred.'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: event handlers
  id: totrans-514
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The handler for this event is as follows:'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-516
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Additional notations
  id: totrans-517
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Qt library has events that were not described here but that we will touch
    on briefly. Some of these classes, which realize the special or ordinary events,
    are as follows:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QDynamicPropertyChangeEvent`: For dynamic property change events.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QCloseEvent`: For close events with the `closeEvent()` event handler.'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QHideEvent`: For events related to hiding the widgets.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QShowEvent`: For the widget''s show events.'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QContextMenuEvent`: For context menu events.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QExposeEvent`: For events exposed with the `exposeEvent()` event handler.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QFileOpenEvent`: For events related to opening file operations.'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QHelpEvent`: For events related to helpful information of the point
    in a widget.'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QHoverEvent`: For mouse events related to hovering over an item with
    `QGraphicsItem`.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QIconDragEvent`: For the main icon''s dragging events.'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QInputEvent`: For the user''s input events.'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QInputMethodEvent`: For input method events.'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QNativeGestureEvent`: For gesture events.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QScrollEvent`: For scrolling events.'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QScrollPrepareEvent`: For scrolling preparation events.'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QShortcutEvent`: For key combination events.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QStatusTipEvent`: For status bar events.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QWhatsThisClickedEvent`: For handling hyperlinks in a *What''s This?* text.'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: '`QtGui.QWindowStateChangeEvent`: For window state change events.'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: The classes of the `QtWidgets` module, such as `QGestureEvent` and `QGraphicsSceneEvent`,
    can also be used.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: Sending events
  id: totrans-539
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Within application development, there are instances when events may need to
    be sent. This can help us create more flexible functionality. To this end, static
    methods from the `QCoreApplication` class of the `QtCore` module can be used.
    The static methods can be implemented as follows:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QCoreApplication.sendEvent(object, event)`: This is where the `sendEvent()`
    method immediately sends the event to the object. The `object` is a `QtCore.QObject`,
    such as a widget, button, or another item, and the `event` is a `QtCore.QEvent`,
    such as an enter event or a mouse event.'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
- en: '`QtCore.QCoreApplication.postEvent(object, event)`: This is where the `postEvent()`
    method adds the event to the queue. The `object` is a `QtCore.QObject`, such as
    a widget, button, or another item, and the `event` is a `QtCore.QEvent`, such
    as an enter event or a mouse event. This method can be used with the threads in
    the application.'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
- en: Events example
  id: totrans-543
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To demonstrate events and event handlers, let''s modernize our application.
    Usually, in the application, the event handlers that are available for the item
    are used. They handle some events and provide additional functionality. Here,
    we will cover the best way to add event handlers to the widget of the application.
    For this, we need to add/change some lines of the `UWid` class of both `u_style.py`
    files. Let''s get started:'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, change the `__init__()` function of the `UWid` class by adding
    additional parameters for better functionality:'
  id: totrans-545
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-546
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: This will be used for changing the parameters of the widget, depending on the
    widget's representation in the application, and is similar to the `UBut1` class.
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add the lines to the `__init__()` function of the `UWid` class,
    as follows:'
  id: totrans-548
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-549
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Here, there is the option to set the fixed width/height, min/max width/height,
    background color, and more.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to add the `wid_style()` styling function to the `UWid` class,
    which will be used for the restyling of this widget, depending on the events that
    have occurred:'
  id: totrans-551
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-552
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: This is an optional function and is used to reduce the number of lines of various
    events. Now, we need to add the event handlers that will be used to handle events
    for this widget.
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `enterEvent()` handler to the `UWid` class for handling events related
    to the mouse cursor entering this widget:'
  id: totrans-554
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'Then, add the `leaveEvent()` handler to the `UWid` class for handling events
    related to the mouse cursor leaving this widget:'
  id: totrans-556
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-557
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Now, if we run the `u_app.py` file, we will see the result. We can also add
    other event handlers by way of experimentation.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-559
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter considered the main principles of signal functionality and commonly
    used events that can be handled in the GUI application. An understanding of these
    basics is very important because this represents the core functionality of any
    modern application. A lot of GUIs aren't very useful without these mechanisms. The
    last example that was provided in this chapter demonstrates styling the widget
    relative to the events that occurred. In this way, all of the styled elements
    that were implemented can be extended. This chapter is an introduction to the
    signals and events of the Qt library. The official documentation can consolidate
    your knowledge in this area.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will cover another important aspect of any application
    – the realization of the threads and processes.
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
