- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Backend Views
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 后端视图
- en: In all previous chapters, you have seen the server and database side of Odoo.
    In this chapter, you will see the UI side of Odoo. You will learn how to create
    different types of views. Aside from the views, this chapter also covers other
    components, such as action buttons, menus, and widgets, which will help you make
    your application more user-friendly. After completing this chapter, you will be
    able to design the UI of an Odoo backend. Note that this chapter does not cover
    the website part of Odoo; we have a separate chapter (*14*) for that.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在所有前面的章节中，你已经看到了Odoo的服务器和数据库方面。在本章中，你将看到Odoo的用户界面（UI）方面。你将学习如何创建不同类型的视图。除了视图之外，本章还涵盖了其他组件，如操作按钮、菜单和小部件，这些将帮助你使你的应用程序更加用户友好。完成本章后，你将能够设计Odoo后端的UI。请注意，本章不涵盖Odoo的网站部分；我们有一个单独的章节（*14*）来介绍这部分内容。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Adding a menu item and window actions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加菜单项和窗口操作
- en: Having an action open a specific view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过操作打开特定视图
- en: Adding content and widgets to a form view
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将内容和小部件添加到表视图中
- en: Adding buttons to forms
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表单中添加按钮
- en: Passing parameters to forms and actions – Context
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将参数传递给表单和操作 – 上下文
- en: Defining filters on record lists – Domain
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在记录列表上定义过滤器 – 域
- en: Defining list views
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义列表视图
- en: Defining search views
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义搜索视图
- en: Adding a search filter side panel
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加搜索过滤器侧边栏
- en: Changing existing views – View inheritance
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改现有视图 – 视图继承
- en: Defining document-style forms
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义文档样式表单
- en: Dynamic form elements using attributes
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用属性动态表单元素
- en: Defining embedded views
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义嵌入式视图
- en: Displaying attachments on the side of the form view
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在表视图的侧边显示附件
- en: Defining kanban views
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义看板视图
- en: Showing kanban cards in columns according to their state
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据其状态在列中显示看板卡片
- en: Defining calendar views
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义日历视图
- en: Defining graph view and pivot view
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义图形视图和交叉视图
- en: Defining the cohort view
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义群体视图
- en: Defining the gantt view
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义甘特图视图
- en: Defining the activity view
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义活动视图
- en: Defining the map view
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义地图视图
- en: Technical requirements
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: Throughout this chapter, we will assume that you have a database with the base
    add-on installed and an empty Odoo add-on module where you can add XML code from
    the recipes to a data file referenced in the add-on’s manifest. Refer to [*Chapter
    3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo Add-On Modules*, for more
    information on how to activate changes in your add-on.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的整个过程中，我们将假设你有一个安装了基本附加组件的数据库和一个空的Odoo附加模块，你可以将食谱中的XML代码添加到附加模块清单中引用的数据文件中。有关如何在你的附加组件中激活更改的更多信息，请参阅[*第3章*](B20997_03.xhtml#_idTextAnchor083)，*创建Odoo附加模块*。
- en: The technical requirements for this chapter include an online Odoo platform.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括一个在线Odoo平台。
- en: All of the code used in this chapter can be downloaded from the GitHub repository
    at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter09).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从GitHub存储库中下载，网址为[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter09](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter09)。
- en: Adding a menu item and window actions
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加菜单项和窗口操作
- en: The most obvious way to make a new feature available to users is by adding a
    menu item. When you click on a **Menu** item, something happens. This recipe walks
    you through how to define that something.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 向用户提供新功能的明显方式是通过添加菜单项。当你点击一个**菜单**项时，会发生某些事情。这个食谱将指导你如何定义这件事。
- en: We will create a top-level menu and its sub-menu, which will open a list of
    all hostel rooms.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个顶级菜单及其子菜单，该菜单将打开所有宿舍房间列表。
- en: This can also be done using the **web user interface** through the **Settings**
    menu, but we prefer to use XML data files since this is what we’ll have to use
    when creating our add-on modules.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 这也可以通过**Web用户界面**通过**设置**菜单来完成，但我们更喜欢使用XML数据文件，因为这是我们创建我们的附加模块时必须使用的。
- en: Getting ready
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this recipe, we will need a module with a dependency on the `base` module,
    as the `my_hostel` module adds new models to the `hostel.room`. So, if you are
    using an existing module, please add the `base` dependency in the manifest. Alternatively,
    you can grab the initial module from [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter09/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter09/00_initial_module).
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们需要一个依赖于`base`模块的模块，因为`my_hostel`模块向`hostel.room`添加了新的模型。所以，如果你正在使用现有的模块，请在清单中添加`base`依赖。或者，你可以从[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter09/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter09/00_initial_module)获取初始模块。
- en: How to do it...
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In an XML data file of our add-on module, perform the following steps:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的附加模块的XML数据文件中执行以下步骤：
- en: 'Define an action to be executed:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义要执行的操作：
- en: '[PRE0]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create the top-level menu, which will be as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建顶级菜单，如下所示：
- en: '[PRE1]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Refer to our action in the menu:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在菜单中引用我们的操作：
- en: '[PRE2]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: If we now upgrade the module, we will see a top-level menu with the label **Hostel
    Room** that opens a sub-menu called **All Hostel Room**. Clicking on that menu
    item will open a list of all hostel rooms.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们现在升级模块，我们将看到一个带有**Hostel Room**标签的顶级菜单，它打开一个名为**All Hostel Room**的子菜单。点击该菜单项将打开所有宿舍房间的列表。
- en: How it works...
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The first XML element, `record model="ir.actions.act_window"`, declares a window
    action to display a list view with all the hostel rooms. We used the most important
    attributes:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个XML元素`record model="ir.actions.act_window"`声明了一个窗口操作，用于显示包含所有宿舍房间的列表视图。我们使用了最重要的属性：
- en: '`name`: To be used as the title for the views opened by the action.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 用来作为由动作打开的视图的标题。'
- en: '`res_model`: This is the model to be used. We are using `hostel.room`, where
    Odoo stores all `hostel room`.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res_model`：这是要使用的模型。我们使用`hostel.room`，这是Odoo存储所有`hostel room`的地方。'
- en: '`view_mode`: This lists the view types to make available. It is a comma-separated
    values file of the views type. The default value is `tree, form`, which makes
    a list and form view available. If you just want to show the calendar and form
    views, then the value of `view_mode` should be `calendar, form`. Other possible
    view choices are `kanban`, `graph`, `pivot`, `calendar`, and `cohort`. You will
    learn more about these views in forthcoming recipes.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_mode`：这列出了要提供的视图类型。它是一个以逗号分隔的视图类型文件。默认值是`tree, form`，这使得列表视图和表单视图可用。如果你只想显示日历和表单视图，那么`view_mode`的值应该是`calendar,
    form`。其他可能的视图选择是`kanban`、`graph`、`pivot`、`calendar`和`cohort`。你将在接下来的菜谱中了解更多关于这些视图的信息。'
- en: '`domain`: This is optional and allows you to set a filter on the records to
    be made available in the views. We will see all of these views in more detail
    in the *Defining filters on record lists – Domain* recipe of this chapter.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`: 这是可选的，允许你设置一个过滤器，以在视图中提供可用的记录。我们将在本章的*在记录列表上定义过滤器 – Domain*菜谱中更详细地了解所有这些视图。'
- en: '`context`: This can set values made available to the opened views, affecting
    their behavior. In our example, on new records, we want the room rank’s default
    value to be `1`. This will be covered in more depth in the *Passing parameters
    to forms and actions – Context* recipe of this chapter.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`: 这可以设置提供给打开的视图的值，影响它们的行为。在我们的例子中，对于新记录，我们希望房间等级的默认值为`1`。这将在本章的*向表单和动作传递参数
    – Context*菜谱中更深入地讨论。'
- en: '`limit`: This sets the default amount of records that can be seen on list views.
    In our example, we have given a limit of `20`, but if you don’t give a `limit`
    value, Odoo will use the default value of `80`.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`：这设置了在列表视图中可以看到的默认记录数量。在我们的例子中，我们给出了`20`的限制，但如果你不提供`limit`值，Odoo将使用默认值`80`。'
- en: 'Next, we create the menu item hierarchy from the top-level menu to the clickable
    end menu item. The most important attributes of the `menuitem` element are as
    follows:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们从顶级菜单创建到可点击的末级菜单项的菜单项层次结构。`menuitem`元素最重要的属性如下：
- en: '`name`: This is used as the text that the menu items display. If your menu
    item links to an action, you can leave this out because the action’s name will
    be used in that case.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这用于显示菜单项的文本。如果你的菜单项链接到操作，你可以省略它，因为在这种情况下将使用操作名称。'
- en: '`parent` (`parent_id` if using the `record` element): This is the XML ID that
    references the parent menu item. Items with no parents are top-level menus.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent` (`parent_id`如果使用`record`元素)：这是引用父菜单项的XML ID。没有父项的项目是顶级菜单。'
- en: '`action`: This is the XML ID that references the action to be called.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`: 这是引用要调用的操作的XML ID。'
- en: '`sequence`: This is used to order the sibling menu items.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sequence`: 这用于对同级菜单项进行排序。'
- en: '`groups` (`groups_id` with the `record` tag): This is an optional list of user
    groups that can access the menu item. If empty, it will be available to all users.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups` (`groups_id`与`record`标签): 这是一个可选的用户组列表，可以访问菜单项。如果为空，则对所有用户可用。'
- en: '`web_icon`: This option only works on the top-level menu. It will display an
    icon of your application in the Enterprise edition.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web_icon`: 此选项仅在顶级菜单上工作。它将在企业版中显示您的应用程序的图标。'
- en: 'Window actions automatically determine the view to be used by looking up views
    for the target model with the intended type (`form`, `tree`, and so on) and picking
    the one with the lowest sequence number. `ir.actions.act_window` and `menuitem`
    are convenient shortcut XML tags that hide what you’re actually doing. If you
    don’t want to use the shortcut XML tags, then you can create a record of the `ir.actions.act_window`
    and `ir.ui.menu` models via the `<record>` tag. For example, if you want to load
    `act_window` with `<record>`, you can do so as follows:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口操作会自动确定要使用的视图，通过查找目标模型的视图（`form`、`tree`等）并选择序列号最低的一个。`ir.actions.act_window`和`menuitem`是方便的快捷XML标签，隐藏了您实际正在做的事情。如果您不想使用快捷XML标签，则可以通过`<record>`标签创建`ir.actions.act_window`和`ir.ui.menu`模型的记录。例如，如果您想通过`<record>`加载`act_window`，可以这样做：
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: In the same way, you can create a `menuitem` instance through `<record>`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以同样的方式，您可以通过`<record>`创建一个`menuitem`实例。
- en: Important note
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Be aware that names used with the `menuitem` shortcut may not map to the field
    names that are used when using a `record` element; `parent` should be `parent_id`
    and `groups` should be `groups_id`.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，使用`menuitem`快捷方式时使用的名称可能不会映射到使用`record`元素时使用的字段名称；`parent`应该是`parent_id`，而`groups`应该是`groups_id`。
- en: To build the menu, the web client reads all the records from `ir.ui.menu` and
    infers their hierarchy from the `parent_id` field. The menus are also filtered
    based on user permissions to models and groups assigned to menus and actions.
    When a user clicks on a menu item, its `action` is executed.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 为了构建菜单，Web客户端读取`ir.ui.menu`中的所有记录，并从`parent_id`字段推断它们的层次结构。菜单也会根据用户对模型和分配给菜单和操作的组的权限进行过滤。当用户点击菜单项时，其`action`将被执行。
- en: There’s more…
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'Window actions also support a `target` attribute to specify how the view is
    to be presented. The possible choices are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口操作还支持一个`target`属性来指定视图的展示方式。可能的选项如下：
- en: '**current**: This is the default and opens the view in the web client’s main
    content area.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**current**: 这是默认选项，在Web客户端的主要内容区域打开视图。'
- en: '**new**: This opens the view in a popup.'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**new**: 这将在弹出窗口中打开视图。'
- en: '`current,` but it opens a form in edit mode and disables the **Action** menu.'
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`current,`但它以编辑模式打开表单并禁用**操作**菜单。'
- en: '**Fullscreen**: The action will cover the whole browser window, so this will
    overlay the menus, too. Sometimes, this is called **tablet mode**.'
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**全屏**: 该操作将覆盖整个浏览器窗口，因此也会覆盖菜单。有时，这被称为**平板模式**。'
- en: '**main**: This is like **current**, but it also clears out the breadcrumbs.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**main**: 这类似于**current**，但它还会清除面包屑。'
- en: 'There are also some additional attributes available for window actions that
    are not supported by the `ir.actions.act_window` shortcut tag. To use them, we
    must use the `record` element with the following fields:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 对于窗口操作，还有一些额外的属性，这些属性不支持`ir.actions.act_window`快捷标签。要使用它们，我们必须使用具有以下字段的`record`元素：
- en: '`res_id`: If opening a form, you can use it to open a specific record by setting
    its ID here. This can be useful for multi-step wizards or in cases when you have
    to view or edit a specific record frequently.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`res_id`: 如果打开表单，您可以通过在此处设置其ID来打开特定的记录。这在多步骤向导或您需要频繁查看或编辑特定记录的情况下非常有用。'
- en: '`search_view_id`: This specifies a specific search view to use for tree and
    graph views.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`search_view_id`: 这指定了用于树形视图和图形视图的特定搜索视图。'
- en: Keep in mind that the menu in the top left (or the apps icon in the Enterprise
    version) and the menu in the bar at the top are both made up of menu items. The
    only difference is that the items in the menu in the top left don’t have any parent
    menus, while the ones on the top bar have the respective menu items from the top
    bar as a parent. In the left bar, the hierarchical structure is more obvious.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，左上角的菜单（或企业版本中的应用程序图标）和顶部栏中的菜单都是由菜单项组成的。唯一的区别是左上角的菜单项没有父菜单，而顶部栏上的菜单项以顶部栏中的相应菜单项作为父菜单。在左侧栏中，层次结构更为明显。
- en: Additionally, bear in mind that for design reasons, the first-level menus will
    open the dropdown menu if your second-level menu has child menus. In any case,
    Odoo will open the first menu item’s action based on the sequence of child menu
    items.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请记住，出于设计原因，如果您的二级菜单有子菜单，则一级菜单将打开下拉菜单。在任何情况下，Odoo都将根据子菜单项的顺序打开第一个菜单项的动作。
- en: 'Refer to the following to learn more about menus and views:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 参考以下内容以了解更多关于菜单和视图的信息：
- en: The `ir.actions.act_window` action type is the most common action type, but
    a menu can refer to any type of action. Technically, it is the same if you link
    to a client action, a server action, or any other model defined in the `ir.actions.*`
    namespace. It just differs in what the backend makes of the action.
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ir.actions.act_window`动作类型是最常见的动作类型，但菜单可以引用任何类型的动作。技术上，如果你链接到客户端动作、服务器动作或`ir.actions.*`命名空间中定义的任何其他模型，都是相同的。它只是在后端对动作的处理上有所不同。'
- en: If you need just a tiny bit more flexibility in the concrete action to be called,
    look into server actions that return a window action. If you need complete flexibility,
    take a look at the client actions (`ir.actions.client`), which allow you to have
    a completely custom user interface. However, only do this as a last resort as
    you lose a lot of Odoo’s convenient helpers when using them.
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果你只需要在具体要调用的动作中获得一点更多的灵活性，请查看返回窗口动作的服务器动作。如果你需要完全的灵活性，请查看客户端动作（`ir.actions.client`），它允许你拥有完全定制的用户界面。然而，只有作为最后的手段才这样做，因为当你使用它们时，你会失去Odoo的许多方便的助手。
- en: See also
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For a detailed explanation of filters in all of the views, have a look at the
    *Defining filters on record lists – Domain* recipe in this chapter.
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要详细了解所有视图中的过滤器，请参阅本章中的*在记录列表上定义过滤器 – 域*配方。
- en: Having an action open a specific view
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过动作打开特定视图
- en: Window actions automatically determine the view to be used if none is given,
    but sometimes, we want an action to open a specific view.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口动作会自动确定要使用的视图，如果没有给出，但有时我们希望动作打开一个特定的视图。
- en: We will create a basic form view for the `hostel.room` model, and then we will
    create a new window action specifically to open that form view.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为`hostel.room`模型创建一个基本表单视图，然后我们将创建一个新的窗口动作，专门用于打开该表单视图。
- en: How to do it...
  id: totrans-86
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Define the `hostel room` minimal tree and form view:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义`hostel room`的最小树形和表单视图：
- en: '[PRE4]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Update the action from the *Adding a menu item and window action* recipe to
    use a new form view:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将从*添加菜单项和窗口动作*配方中的动作更新为使用新的表单视图：
- en: '[PRE5]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Now, if you open your menu and click on a **partner** in the list, you should
    see the very minimal form and tree that we just defined.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果你打开你的菜单并点击列表中的**合作伙伴**，你应该看到我们刚刚定义的非常简单的表单和树形视图。
- en: How it works...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This time, we used the generic XML code for any type of record, that is, the
    `record` element with the required `id` and `model` attributes. The `id` attribute
    on the `record` element is an arbitrary string that must be unique for your add-on.
    The `model` attribute refers to the name of the model you want to create. Given
    that we want to create a view, we need to create a record of the `ir.ui.view`
    model. Within this element, you set fields as defined in the model you chose through
    the `model` attribute. For `ir.ui.view`, the crucial fields are `model` and `arch`.
    The `model` field contains the model for which you want to define a view, while
    the `arch` field contains the definition of the view itself. We’ll come to its
    contents in a short while.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，我们使用了适用于任何类型记录的通用XML代码，即具有所需`id`和`model`属性的`record`元素。`record`元素上的`id`属性是一个任意字符串，它必须对于你的附加组件是唯一的。`model`属性指的是你想要创建的模型名称。鉴于我们想要创建一个视图，我们需要创建`ir.ui.view`模型的记录。在此元素内，你通过`model`属性设置模型中定义的字段。对于`ir.ui.view`，关键字段是`model`和`arch`。`model`字段包含你想要定义视图的模型，而`arch`字段包含视图本身的定义。我们稍后会介绍其内容。
- en: The `name` field, while not strictly necessary, is helpful when debugging problems
    with views. So, set it to a string that tells you what this view is intended to
    do. This field’s content is not shown to the user, so you can fill in any technical
    hints that you deem sensible. If you set nothing here, you’ll get a default name
    that contains the model name and view type.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`字段虽然不是必需的，但在调试视图问题时很有帮助。因此，将其设置为字符串，说明这个视图打算做什么。此字段的内容不会显示给用户，因此你可以填写任何你认为合理的技术提示。如果你在这里不设置任何内容，你将获得一个默认名称，其中包含模型名称和视图类型。'
- en: ir.actions.act_window.view
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ir.actions.act_window.view
- en: The second record we defined works in tandem with `act_window`, which we defined
    earlier in the *Adding a menu item and window action* recipe. We already know
    that by setting the `view_id` field there, we can select which view is used for
    the first view mode. However, given that we set the `view_mode` field to the `tree,
    form` view, `view_id` would have to pick a tree view, but we want to set the form
    view, which comes second here.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义的第二个记录与我们在*添加菜单项和窗口动作*菜谱中定义的`act_window`协同工作。我们已经知道，通过设置那里的`view_id`字段，我们可以选择用于第一个视图模式哪个视图。然而，鉴于我们设置了`view_mode`字段为`tree,
    form`视图，`view_id`必须选择树视图，但我们想设置的是第二个的表单视图。
- en: If you find yourself in a situation like this, use the `ir.actions.act_window.view`
    model, which gives you fine-grained control over which views to load for which
    view type. The first two fields defined here are examples of the generic way to
    refer to other objects; you keep the element’s body empty but add an attribute
    called `ref`, which contains the XML ID of the object you want to reference. So,
    what happens here is we refer to our action from the previous recipe in the `act_window_id`
    field and refer to the view we just created in the `view_id` field. Then, though
    not strictly necessary, we add a sequence number to position this view assignment
    relative to the other view assignments for the same action. This is only relevant
    if you assign views for different view modes by creating multiple `ir.actions.act_window.view`
    records.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你发现自己处于这种情况，请使用`ir.actions.act_window.view`模型，它允许你精细控制为哪种视图类型加载哪些视图。这里定义的前两个字段是引用其他对象的通用方式的示例；你保持元素的主体为空，但添加一个名为`ref`的属性，其中包含你要引用的对象的XML
    ID。因此，这里发生的情况是我们从上一个菜谱中的`act_window_id`字段引用我们的动作，并在`view_id`字段中引用我们刚刚创建的视图。然后，尽管不是必需的，我们添加一个序列号来定位这个视图分配相对于同一动作的其他视图分配的位置。这仅在你通过创建多个`ir.actions.act_window.view`记录为不同的视图模式分配视图时才有意义。
- en: Important note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Once you define the `ir.actions.act_window.view` records, they take precedence
    over what you filled in the action’s `view_mode` field. So, with the preceding
    records, you won’t see a list at all, but only a form. You should add another
    `ir.actions.act_window.view` record that points to a list view for the `hostel.room`
    model.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你定义了`ir.actions.act_window.view`记录，它们将优先于你在动作的`view_mode`字段中填写的内容。因此，使用前面的记录，你将看不到任何列表，而只有表单。你应该添加另一个指向`hostel.room`模型列表视图的`ir.actions.act_window.view`记录。
- en: There’s more...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: 'As we saw in the *Adding a menu item and window action* recipe, we can replace
    `act_window` with `<record>`. If you want to use a custom view, you can follow
    the given syntax:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在*添加菜单项和窗口动作*菜谱中看到的那样，我们可以用`<record>`替换`act_window`。如果你想使用自定义视图，你可以遵循给定的语法：
- en: '[PRE6]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This example is just an alternative to `act_window`. In the code base of Odoo,
    you will find both types of action.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这个例子只是`act_window`的另一种选择。在Odoo的代码库中，你可以找到这两种动作类型。
- en: Adding content and widgets to a form view
  id: totrans-104
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在表单视图中添加内容和小部件
- en: The preceding recipe showed how to pick a specific view for an action. Now,
    we’ll demonstrate how to make the form view more useful. In this recipe, we will
    use the **form view** that we defined earlier in the *Having an action open a
    specific view* recipe. In the form view, we will add the widgets and content.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的菜谱展示了如何为动作选择特定的视图。现在，我们将演示如何使表单视图更有用。在这个菜谱中，我们将使用我们在*有一个动作打开特定视图*菜谱中定义的**表单视图**。在表单视图中，我们将添加小部件和内容。
- en: How to do it...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Define the basic structure of the form view:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义表单视图的基本结构：
- en: '[PRE7]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'To add a head bar, which is usually used for action buttons and stage pipelines,
    add this inside the form:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加标题栏，通常用于动作按钮和阶段流程，请在表单内添加以下内容：
- en: '[PRE8]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add fields to the form, using `group` tags to organize them visually:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`group`标签组织表单字段：
- en: '[PRE9]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, the form should display a top bar with a button and two vertically aligned
    fields, as shown in the following screenshot:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，表单应该显示一个带有按钮和两个垂直对齐字段的顶部栏，如下面的截图所示：
- en: '![Figure 9.1 – Screenshot of the form view](img/B20997_09_1.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图9.1 – 表单视图的截图](img/B20997_09_1.jpg)'
- en: Figure 9.1 – Screenshot of the form view
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.1 – 表单视图的截图
- en: How it works...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We’ll look at the `arch` field of the `ir.ui.view` model first. First, note
    that views are defined in XML, so you need to pass the `type="xml"` attribute
    for the `arch` field; otherwise, the parser will be confused. It is also mandatory
    that your view definition contains well-formed XML; otherwise, you’ll get an error
    such as “Element odoo has extra content” when you upgrade/install the module.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先来看 `ir.ui.view` 模型的 `arch` 字段。首先，请注意，视图是在 XML 中定义的，因此你需要为 `arch` 字段传递 `type="xml"`
    属性；否则，解析器会感到困惑。此外，你的视图定义必须包含格式良好的 XML；否则，当你升级/安装模块时，你会得到一个错误，例如“元素 odoo 有额外内容”。
- en: We’ll now walk through the tags that we used previously and summarize the others
    that are available.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将遍历我们之前使用的标签，并总结其他可用的标签。
- en: form
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: form
- en: When you define a form view, it is mandatory that the first element within the
    `arch` field is a `form` element. This is used internally to derive the record’s
    `type` field.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 当你定义一个表单视图时，`arch` 字段中的第一个元素必须是 `form` 元素。这在内部用于推导记录的 `type` 字段。
- en: In addition to the following elements, you can use arbitrary HTML within the
    form tag. The algorithm has it that every element unknown to Odoo is considered
    plain HTML and is simply passed through to the browser. Be careful with that,
    as the HTML you fill in can interact with the HTML code the Odoo elements generate,
    which might distort the rendering.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除了以下元素之外，你还可以在表单标签中使用任意 HTML。算法规定，Odoo 未知的所有元素都被视为纯 HTML，并简单地传递给浏览器。请注意，你填入的
    HTML 可以与 Odoo 元素生成的 HTML 代码交互，这可能会扭曲渲染。
- en: header
  id: totrans-122
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: header
- en: This element is a container for elements that should be shown in a form’s header,
    which is rendered as a white bar. Usually, as in this example, you place action
    buttons here. Alternatively, if your model has a `state` field, you could opt
    for a **status bar**.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 此元素是用于在表单的标题中显示的元素的容器，标题以白色栏的形式渲染。通常，如本例所示，你在这里放置操作按钮。或者，如果你的模型有一个 `state` 字段，你也可以选择一个
    **状态栏**。
- en: button
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: button
- en: The `button` element is used to allow the user to trigger an action. Refer to
    the *Adding buttons to forms* recipe for details.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`button` 元素用于允许用户触发一个动作。有关详细信息，请参阅 *向表单添加按钮* 烹饪配方。'
- en: <group>
  id: totrans-126
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: <group>
- en: The `<group>` element is Odoo’s main element and is used for organizing content.
    Fields placed within a `<group>` element are rendered with their title, and all
    fields within the same group are aligned so that there’s also a visual indicator
    that they belong together. You can also nest `<group>` elements; this causes Odoo
    to render the contained fields in adjacent columns.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`<group>` 元素是 Odoo 的主要元素，用于组织内容。放置在 `<group>` 元素内的字段将带有它们的标题，并且同一组内的所有字段都将对齐，以便也有一个视觉指示器表明它们属于一起。你还可以嵌套
    `<group>` 元素；这将导致 Odoo 在相邻的列中渲染包含的字段。'
- en: In general, you should use the `<group>` mechanism to display all of your fields
    in the form view and only revert to the other elements, such as `<notebook>`,
    `<label>`, `<newline>`, and more, when necessary.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，你应该使用 `<group>` 机制来在表单视图中显示所有字段，只有在必要时才退回到其他元素，例如 `<notebook>`、`<label>`、`<newline>`
    以及更多。
- en: If you assign the `string` attribute to a group, its content will be rendered
    as a heading for the group.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将 `string` 属性分配给一个组，其内容将被渲染为该组的标题。
- en: You should develop the habit of assigning a name to every logical group of fields,
    too. This name is not visible to the user but is very helpful when we override
    views in the following recipes. Keep the name unique within the form definition
    to avoid confusion about which group you refer to. Don’t use the `string` attribute
    for this because the value of the string will eventually change because of translations.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你还应该养成给每个字段的逻辑组命名的好习惯。这个名称对用户是不可见的，但在我们接下来的配方中覆盖视图时非常有帮助。在表单定义中保持名称唯一，以避免混淆你指的是哪个组。不要使用
    `string` 属性，因为字符串的值最终会因为翻译而改变。
- en: field
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: field
- en: 'In order to actually show and manipulate data, your form view should contain
    some `field` elements. Here is an example:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实际显示和操作数据，你的表单视图应该包含一些 `field` 元素。以下是一个示例：
- en: '[PRE10]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: These have one mandatory attribute, called `name`, which refers to the field’s
    name in the model. Earlier, we offered the user the ability to edit the partner’s
    categories. If we only want to disable the editing feature on a field, we can
    set the `readonly` attribute to `1` or `True`. This attribute may actually contain
    a small subset of Python code, so `readonly="2>1"` will make the field read-only
    too. This also applies to the `invisible` attribute, for which you used to obtain
    a value that is read from the database but is not shown to the user. Later, we’ll
    take a look at which situations this can be used in.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这些有一个必填属性，称为`name`，它指的是模型中字段的名称。早些时候，我们向用户提供了编辑合作伙伴类别的功能。如果我们只想禁用字段的编辑功能，我们可以将`readonly`属性设置为`1`或`True`。此属性实际上可能包含一小部分Python代码，因此`readonly="2>1"`也会使字段变为只读。这也适用于`invisible`属性，您曾使用它来获取从数据库读取但不会显示给用户的值。稍后，我们将探讨这种用法可能适用的场景。
- en: You must have noticed the `widget` attribute in the `categories` field. This
    defines how the data in the field are supposed to be presented to the user. Every
    type of field has a standard widget, so you don’t have to explicitly choose a
    widget. However, several types provide multiple ways of representation, so you
    might opt for something other than the default. As a complete list of available
    widgets would exceed the scope of this recipe, consult **Odoo’s source code**
    to try them out. Take a look at [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS Website Development*, for details on how to make your own.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 您一定注意到了`categories`字段中的`widget`属性。这定义了字段中的数据应该如何呈现给用户。每种类型的字段都有一个标准小部件，因此您不必明确选择小部件。然而，几种类型提供了多种表示方式，因此您可能会选择除默认之外的其他方式。由于完整的可用小部件列表超出了本菜谱的范围，请查阅**Odoo的源代码**以尝试它们。查看[*第14章*](B20997_14.xhtml#_idTextAnchor734)，*CMS网站开发*，以了解如何制作自己的。
- en: <notebook> and <page>
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`<notebook>`和`<page>`'
- en: 'If your model has too many fields, then you can use the `<notebook>` and `<page>`
    tags to create tabs. Each `<page>` in the `<notebook>` tag will create a new tab,
    and the content inside the page will be the tab content. The following example
    will create two tabs with three fields in each tab:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的模型字段太多，则可以使用`<notebook>`和`<page>`标签来创建标签页。`<notebook>`标签中的每个`<page>`将创建一个新的标签页，页面内的内容将是标签页的内容。以下示例将创建两个标签页，每个标签页有三个字段：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: The `string` attribute in the `<page>` tag will be the name of the tab. You
    can only use `<page>` tags in the `<notebook>` tag, but in the `<page>` tag, you
    can use any other elements.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`<page>`标签中的`string`属性将是标签页的名称。您只能在`<notebook>`标签中使用`<page>`标签，但在`<page>`标签中，您可以使用任何其他元素。'
- en: General attributes
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 通用属性
- en: 'On most elements (this includes `group`, `field`, and `button`), you can set
    the `attributes` and `groups` attributes. Here is a small example:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数元素上（这包括`group`、`field`和`button`），您可以设置`attributes`和`groups`属性。以下是一个小示例：
- en: '[PRE12]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: While `attributes` are discussed in the *Dynamic form elements using attributes*
    recipe, the `groups` attribute gives you the possibility to show some elements
    only to members of certain groups. Simply put, the group’s full XML ID (separated
    by commas for multiple groups) is the attribute, and the element will be hidden
    for everyone who is not a member of at least one of the groups mentioned.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`attributes`在*使用属性动态表单元素*的菜谱中进行了讨论，但`groups`属性为您提供了仅向某些组的成员显示某些元素的可能性。简单来说，组的完整XML
    ID（多个组之间用逗号分隔）是该属性，并且对于不是至少属于上述提到的组之一的任何成员，该元素都将被隐藏。
- en: Other tags
  id: totrans-144
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 其他标签
- en: 'There are situations in which you might want to deviate from the strict layout
    groups prescribed. For example, if you want the `name` field of a record to be
    rendered as a heading, the field’s label will interfere with the appearance. In
    this case, don’t put your field into a `group` element but, instead, put it into
    a plain HTML `h1` element. Then, before the `h1` element, put a `label` element
    with the `for` attribute set to your `field name`:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候您可能希望偏离规定的严格布局组。例如，如果您想将记录的`name`字段渲染为标题，则字段的标签将干扰外观。在这种情况下，不要将字段放入`group`元素中，而是将其放入普通的HTML`h1`元素中。然后，在`h1`元素之前，放置一个`label`元素，并将`for`属性设置为您的`字段名称`：
- en: '[PRE13]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: This will be rendered with the field’s content as a big heading, but the field’s
    name will be written in a smaller type above the big heading. This is basically
    what the standard partner form does.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以字段内容作为大标题进行渲染，但字段名称将写在大标题上方的小字体中。这基本上是标准合作伙伴表单所做的事情。
- en: 'If you need a line break within a group, use the `newline` element. It’s always
    empty:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要在组内添加换行，请使用 `newline` 元素。它始终为空：
- en: '[PRE14]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Another useful element is `footer`. When you open a form as a popup, this is
    a good place to put the action buttons. It will be rendered as a separate bar
    too, analogous to the `header` element.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的元素是 `footer`。当您将表单作为弹出窗口打开时，这是一个放置操作按钮的好地方。它也将被渲染为一个单独的栏，类似于 `header`
    元素。
- en: 'The form view also has special widgets, such as `web_ribbon`. You can use it
    with the `<widget>` tag as follows:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 形式视图也包含特殊的部件，例如 `web_ribbon`。您可以使用 `<widget>` 标签如下使用它：
- en: '[PRE15]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You can use `attributes` to hide and show the ribbon based on a condition. Don’t
    worry if you are not aware of `attributes`. It will be covered in the *Dynamic
    form elements using attributes* recipe of this chapter.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用 `attributes` 根据条件隐藏和显示功能区。如果您不了解 `attributes`，请不要担心。它将在本章的 *使用属性动态创建表单元素*
    食谱中介绍。
- en: Important note
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Don’t address `string` attribute (or any other translated attribute, for that
    matter), as your view overrides will break for other languages because views are
    translated before inheritance is applied.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 不要指定 `string` 属性（或任何其他翻译属性），因为您的视图覆盖将因其他语言而中断，因为视图是在应用继承之前进行翻译的。
- en: There’s more…
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'Since form views are basically HTML with some extensions, Odoo also makes extensive
    use of CSS classes. Two very useful ones are `oe_read_only` and `oe_edit_only`.
    Elements with these classes will be visible only in **read-only mode** or **edit
    mode**, respectively. For example, to have the label visible only in edit mode,
    use the following:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 由于表单视图基本上是带有一些扩展的 HTML，Odoo 也广泛使用了 CSS 类。其中两个非常有用的是 `oe_read_only` 和 `oe_edit_only`。具有这些类的元素将仅在
    **只读模式** 或 **编辑模式** 中可见。例如，要使标签仅在编辑模式下可见，请使用以下代码：
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Another very useful class is `oe_inline`, which you can use on fields to make
    them render as an inline element to avoid causing unwanted line breaks. Use this
    class when you embed a field into text or other markup tags.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个非常有用的类是 `oe_inline`，您可以在字段上使用它，使它们渲染为内联元素，以避免造成不想要的换行。当您将字段嵌入文本或其他标记标签时，请使用此类。
- en: Furthermore, the `form` element can have the `create`, `edit`, and `delete`
    attributes. If you set one of these to `false`, the corresponding action ’on’t
    be available for this form. Without this being explicitly set, the availability
    of the action is inferred from the u’er’s permissions. Note that this is purely
    for straightening up the UI; ’on’t use this for security.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，`form` 元素可以有 `create`、`edit` 和 `delete` 属性。如果您将这些属性之一设置为 `false`，则相应的操作将不会对此表单可用。如果没有明确设置，操作的可用性将根据用户的权限推断。请注意，这纯粹是为了整理用户界面；不要用于安全。
- en: See also
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'The widgets and views already offer a lot of functionality, but sooner or later,
    you will have requirements that cannot be fulfilled with the existing widgets
    and views. Refer to the following recipes to create your own views and widgets:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 现有的部件和视图已经提供了很多功能，但迟早您会有一些无法用现有部件和视图满足的需求。请参考以下食谱来创建您自己的视图和部件：
- en: Refer to the *Adding buttons to forms* recipe in this chapter for more details
    about using the `button` element to trigger an action.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考本章中关于使用 `button` 元素触发操作的 *添加按钮到表单* 食谱以获取更多详细信息。
- en: To define your own widgets, refer to the *Creating custom widgets* recipe of
    [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861), *Web* *Client Development*.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要定义您自己的部件，请参考 [*第15章*](B20997_15.xhtml#_idTextAnchor861) 的 *创建自定义部件* 食谱，*Web客户端开发*。
- en: Refer to the *Creating a new view* recipe of [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861),
    *Web Client Development*, to create your own view.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请参考 [*第15章*](B20997_15.xhtml#_idTextAnchor861) 的 *创建新视图* 食谱，*Web客户端开发*，以创建您自己的视图。
- en: Adding buttons to forms
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加按钮到表单
- en: '`header` element.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '`header` 元素。'
- en: How to do it...
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Add a button that refers to an action:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 添加一个指向操作的按钮：
- en: '[PRE17]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The button’s `type` attribute determines the semantics of the other fields,
    so we’ll first take a look at the possible values:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 按钮的 `type` 属性决定了其他字段的语义，因此我们首先看看可能的值：
- en: '`action`: This makes the button call an action, as defined in the `ir.actions.*`
    namespace. The `name` attribute needs to contain the action’s database ID, which
    you can conveniently have Odoo look up with a Python-format string that contains
    the XML ID of the action in question.'
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`action`：这将使按钮调用在 `ir.actions.*` 命名空间中定义的操作。`name` 属性需要包含操作的数据库 ID，您可以使用包含操作的
    XML ID 的 Python 格式字符串方便地让 Odoo 查找。'
- en: '`object`: This calls a method from the current model. The `name` attribute
    contains the function’s name.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`object`：这调用当前模型中的一个方法。`name`属性包含函数的名称。'
- en: '`string`: The `string` attribute is used to assign the text the user sees.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`string`：`string`属性用于分配用户看到的文本。'
- en: There’s more...
  id: totrans-176
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Use the `btn-primary` CSS classes to render highlighted button and `btn-default`
    to render a normal button. This is commonly used for cancel buttons in wizards
    or to offer secondary actions in a visually unobtrusive way. Setting the `oe_link`
    class causes the button to look like a link. You can also use other bootstrap
    button classes to get different button colors.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`btn-primary` CSS类来渲染高亮按钮，使用`btn-default`来渲染普通按钮。这通常用于向导中的取消按钮或以视觉上不引人注目的方式提供次要操作。设置`oe_link`类会使按钮看起来像链接。您还可以使用其他Bootstrap按钮类来获取不同的按钮颜色。
- en: A call with a button of the **object** type can return a dictionary that describes
    an action, which will then be executed on the client side. This way, you can implement
    multiscreen wizards or just open another record.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一个带有**object**类型按钮的调用可以返回一个描述动作的字典，然后将在客户端执行。这样，您可以实现多屏幕向导或只是打开另一个记录。
- en: Important note
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that clicking on a button always causes the client to issue a `write` or
    `create` call before running the method.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，点击按钮总是导致客户端在运行方法之前发出`write`或`create`调用。
- en: You can also add content within the `button` tag by replacing the `string` attribute.
    This is commonly used in button boxes, as described in the *Document style* *forms*
    recipe.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以通过替换`string`属性在`button`标签内添加内容。这通常用于按钮框，如*文档风格* *表单*菜谱中所述。
- en: Passing parameters to forms and actions – context
  id: totrans-182
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向表单和动作传递参数 - 上下文
- en: Internally, every method in Odoo has access to a dictionary called **context**,
    which is propagated from every action to the methods involved in delivering that
    action. The UI also has access to it, and it can be modified in various ways by
    setting values in the context. In this recipe, we’ll explore some of the applications
    of this mechanism by toying with the language, default values, and implicit filters.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 在Odoo内部，每个方法都可以访问一个名为**context**的字典，这个字典从每个动作传播到执行该动作涉及的方法。UI也可以访问它，并且可以通过在上下文中设置值以各种方式修改它。在这个菜谱中，我们将通过玩弄语言、默认值和隐式过滤器来探索这个机制的一些应用。
- en: Getting ready
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: While not strictly necessary, this recipe will be more fun if you install the
    French language if you haven’t got this already. Consult [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595),
    *Internationalization*, for how to do this. If you have a French database, change
    `fr_FR` to some other language, e.g., `en_US` will do for English. Additionally,
    click on the **Active** button (changing to **Archive** when you hover over it)
    for one of the hostel rooms in order to archive it and verify that this partner
    doesn’t show up in the list anymore.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然不是严格必要的，但如果您还没有安装法语，安装法语会使这个菜谱更有趣。请参阅[*第11章*](B20997_11.xhtml#_idTextAnchor595)，*国际化*，了解如何进行此操作。如果您有法语数据库，将`fr_FR`更改为其他语言，例如，`en_US`适用于英语。此外，点击**激活**按钮（当您悬停时变为**存档**），以便存档一个宿舍房间并验证此合作伙伴不再出现在列表中。
- en: How to do it...
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Create a new action, very similar to the one from the *Adding a menu item and
    window* *action* recipe:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新的动作，非常类似于*添加菜单项和窗口*动作菜谱中的动作：
- en: '[PRE18]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Add a menu that calls this action. This is left as an exercise for the reader.
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个调用此动作的菜单。这留给读者作为练习。
- en: When you open this menu, the views will show up in French, and if you create
    a new partner, they will have French as their pre-selected language. A less obvious
    difference is that you will also see **deactivated (archived)** **partner records**.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当您打开此菜单时，视图将以法语显示，如果您创建一个新的合作伙伴，它们将法语作为预选语言。一个不那么明显的变化是，您还将看到**已停用（存档）**的**合作伙伴记录**。
- en: How it works...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The context dictionary is populated from several sources. First, some values
    from the current user’s record (`lang` and `tz` for the user’s language and the
    user’s time zone, respectively) are read. Then, we have some add-ons that add
    keys for their own purposes. Furthermore, the UI adds keys about which model and
    which record we’re busy using at the moment (`active_id`, `active_ids`, `active_model`).
    Moreover, as seen in the *Having an action open a specific view* recipe, we can
    add our own keys in actions. These are merged together and passed to the underlying
    server functions and the client-side UI.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文字典是从几个来源填充的。首先，读取当前用户记录的一些值（用户的语言和用户时区分别为`lang`和`tz`）。然后，我们有一些附加组件，它们为了自己的目的添加了键。此外，UI添加了关于我们目前正在使用的模型和记录的键（`active_id`、`active_ids`、`active_model`）。此外，如*通过打开特定视图执行操作*配方中所示，我们可以在操作中添加自己的键。这些被合并在一起，并传递给底层服务器函数和客户端UI。
- en: So, by setting the `lang` context key, we force the display language to be **French**.
    You will note that this doesn’t change the whole UI language; this is because
    only the list view that we open lies within the scope of this context. The rest
    of the UI was loaded already with another context that contained the user’s original
    language. However, if you open a record in this list view, it will be presented
    in French, too, and if you open a linked record on the form or press a button
    that executes an action, the language will be propagated, too.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，通过设置`lang`上下文键，我们强制显示语言为**法语**。你会注意到这不会改变整个UI语言；这是因为只有我们打开的列表视图位于这个上下文范围内。其余的UI已经用包含用户原始语言的另一个上下文加载。然而，如果你在这个列表视图中打开一个记录，它也会以法语呈现，如果你在表单上打开一个链接记录或按下执行操作的按钮，语言也会传播。
- en: 'By setting `default_lang`, we set a default value for every record created
    within the scope of this context. The general pattern is `default_$fieldname:
    my_default_value`, which enables you to set default values for newly created partners
    in this case. Given that our menu is about hostel rooms, we have added `default_room_rating:
    1` as the value for the `Hostel Average Rating` field by default. However, this
    is a model-wide default for `hostel.room`, so this wouldn’t have changed anything.
    For scalar fields, the syntax for this is the same as what you would write in
    Python code: `string` fields go in quotes, `number` fields stay as they are, and
    `Boolean` fields are either `True` or `False`. For relational fields, the syntax
    is slightly more complicated; refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319),
    *Managing Module Data*, to learn how to write them.'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '通过设置`default_lang`，我们为在这个上下文范围内创建的每个记录设置一个默认值。一般模式是`default_$fieldname: my_default_value`，这允许你为在这种情况下新创建的合作伙伴设置默认值。鉴于我们的菜单是关于旅舍房间，我们默认为`Hostel
    Average Rating`字段添加了`default_room_rating: 1`作为值。然而，这是一个针对`hostel.room`的全局默认值，所以这并没有改变任何事情。对于标量字段，语法与你在Python代码中写的相同：`string`字段用引号括起来，`number`字段保持原样，而`Boolean`字段是`True`或`False`。对于关系字段，语法稍微复杂一些；请参阅[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*，了解如何编写它们。'
- en: Important note
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Note that the default values set in the context override the default values
    set in the model definition, so you can have different default values in different
    situations.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，上下文中设置的默认值会覆盖模型定义中设置的默认值，因此你可以在不同情况下有不同的默认值。
- en: The last key is `active_test`, which has very special semantics. For every model
    that has a field called `active`, Odoo automatically filters out records where
    this field is `False`. This is why the partner from where you unchecked this field
    disappeared from the list. By setting this key, we can suppress this behavior.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个键是`active_test`，它具有非常特殊的语义。对于每个具有名为`active`的字段的模型，Odoo会自动过滤掉该字段为`False`的记录。这就是为什么你没有勾选此字段的合作伙伴从列表中消失的原因。通过设置此键，我们可以抑制这种行为。
- en: Important note
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This is useful for the UI in its own right but even more useful in your Python
    code when you need to ensure that an operation is applied to all the records,
    not just the active ones.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这对于UI本身很有用，但在你需要确保操作应用于所有记录，而不仅仅是活动记录时，在你的Python代码中更是非常有用。
- en: There’s more...
  id: totrans-200
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When defining a context, you have access to some variables, with the most important
    one being `uid`, which evaluates the current user’s ID. You’ll need this to set
    default filters (refer to the next recipe, *Defining filters on record lists –
    Domain*). Furthermore, you have access to the `context_today` function and the
    `current_date` variable, where the first is a `date` object that represents the
    current date, as seen from the user’s time zone, and the latter is the current
    date, as seen in UTC, formatted as `YYYY-MM-DD`. To set a default value for a
    `date` field to the current date, use `current_date`, and for default filters,
    use `context_today()`.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 当定义上下文时，你可以访问一些变量，其中最重要的一个是`uid`，它评估当前用户的ID。你需要这个来设置默认过滤器（请参考下一配方，*在记录列表上定义过滤器
    – 域*）。此外，你可以访问`context_today`函数和`current_date`变量，前者是一个`date`对象，代表从用户时区看当前日期，后者是UTC时间中的当前日期，格式为`YYYY-MM-DD`。要将`date`字段的默认值设置为当前日期，使用`current_date`，对于默认过滤器，使用`context_today()`。
- en: Furthermore, you can do some date calculations with a subset of Python’s `datetime`,
    `time`, and `relativedelta` classes.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，你可以使用Python的`datetime`、`time`和`relativedelta`类的一个子集进行一些日期计算。
- en: Important note
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Most of the domains are evaluated on the client side. The server-side domain
    evaluation is restricted for security reasons. When client-side evaluation was
    introduced, the best option in order to not break the whole system was to implement
    a part of Python in JavaScript. There is a small JavaScript Python interpreter
    built into Odoo that works well for simple expressions, and that is usually enough.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数域都是在客户端进行评估的。出于安全考虑，服务器端的域评估受到限制。当引入客户端评估时，为了避免整个系统崩溃，最佳选择是将Python的一部分实现为JavaScript。Odoo内置了一个小的JavaScript
    Python解释器，它对简单的表达式工作得很好，这通常就足够了。
- en: Beware of the use of the `context` variable in the `<record id="action_name"
    model="ir.actions.act_window.view">` shortcut. These are evaluated at installation
    time, which is nearly never what you want. If you need variables in your context,
    use the `<record />` syntax.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 警惕在`<record id="action_name" model="ir.actions.act_window.view">`快捷方式中使用`context`变量。这些是在安装时评估的，这几乎从来不是你想要的。如果你需要在你的上下文中使用变量，请使用`<record
    />`语法。
- en: We can also add different contexts for the buttons. It works the same way as
    how we added context keys to our action. This causes the function or action that
    the button calls to be run in the context given.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以为按钮添加不同的上下文。这和我们将上下文键添加到我们的操作的方式一样。这会导致按钮调用的函数或操作在给定的上下文中运行。
- en: 'Most form element attributes that are evaluated as Python also have access
    to the context dictionary. The `invisible` and `readonly` attributes are examples
    of these. So, in cases where you want an element to show up in a form sometimes
    but not at other times, set the `invisible` attribute to `context.get(''my_key'')`.
    For actions that lead to a case in which the field is supposed to be invisible,
    set the context key to `my_key: True`. This strategy enables you to adapt your
    form without having to rewrite it for different occasions.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '大多数作为Python评估的表单元素属性也都可以访问上下文字典。`invisible`和`readonly`属性就是这些属性的例子。因此，在你希望某个元素在某些时候显示在表单中，而在其他时候不显示的情况下，将`invisible`属性设置为`context.get(''my_key'')`。对于导致字段应该不可见的字段的情况，将上下文键设置为`my_key:
    True`。这种策略使你能够适应你的表单，而无需为不同场合重写它。'
- en: You can also set a context for relational fields, which influences how the field
    is loaded. By setting the `form_view_ref` or `tree_view_ref` keys to the full
    XML ID of a view, you can select a specific view for this field. This is necessary
    when you have multiple views of the same type for the same object. Without this
    key, you get the view with the lowest sequence number, which might not always
    be desirable.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以为关系字段设置上下文，这会影响字段如何加载。通过将`form_view_ref`或`tree_view_ref`键设置为视图的完整XML ID，你可以为这个字段选择一个特定的视图。当你对同一对象有多个相同类型的视图时，这是必要的。如果没有这个键，你会得到序列号最低的视图，这可能并不总是理想的。
- en: See also
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The context is also used to set a default search filter. You can learn more
    about the default search filter in the *Defining search views* recipe of this
    chapter.
  id: totrans-210
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 上下文还用于设置默认搜索过滤器。你可以通过本章的*定义搜索视图*配方了解更多关于默认搜索过滤器的内容。
- en: For more details on setting default recipes, refer to the next recipe, *Defining
    filters on record lists –* *Domain*.
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于设置默认配方的更多细节，请参考下一配方，*在记录列表上定义过滤器 – 域*。
- en: To learn how to install the French language, consult [*Chapter* *11*](B20997_11.xhtml#_idTextAnchor595),
    *Internationalization*.
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can refer to [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing
    Module Data* to learn how to write the syntax for relational fields.
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining filters on record lists – domain
  id: totrans-214
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve already seen an example of a domain in the first recipe of this chapter,
    which was `[('state', '=', 'draft')]`. Often, you need to display a subset of
    all available records from an action or allow only a subset of possible records
    to be the target of a `many2one` relation. The way to describe these filters in
    Odoo is by using domains. This recipe illustrates how to use a domain to display
    a selection of partners.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To display a subset of partners from your action, you need to perform the following
    steps:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Create an action for when “state” is set to “draft:”
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Add menus that call these actions. This is left as an exercise for the reader.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-221
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The simplest form of a domain is a list of three tuples that contain a field
    name (of the model in question) as `string` in the first element, an operator
    as `string` in the second element, and the value that the field is to be checked
    against as the third element. This is what we did before, and this is interpreted
    as, “*All those conditions have to apply to the records we’re interested in*.”
    This is actually a shortcut because the domains know the two prefix operators—`&`
    and `|`—where `&` is the default. So, in normalized form, the first domain will
    be written as follows:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'While these can be a bit hard to read for bigger expressions, the advantage
    of prefix operators is that their scope is rigidly defined, which saves you from
    having to worry about operator precedence and brackets. It’s always two expressions:
    the first `&` applies to `''&'',(''state'', ''='', ''draft'')`, with `(''room_rating'',
    ''&gt;'', ''0.0'')` as the first operand and `(''room_rating'', ''&gt;'', ''0.0'')`
    as the second. Then, we have the first operand and `(''room_rating'', ''&gt;'',
    ''0.0'')` as the second.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: In the second step, we have to write out the full form because we need the `|`
    operator.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, say we have a complex domain such as this: `[''|'',` `(''user_id'',`
    `''='', uid), ''&'', (''lang'', ''!='', ''fr_FR''), ''|'', (''phone'', ''='',
    False), (''email'', ''='', False)]`. See the following figure to learn about how
    this domain is evaluated:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.2 – The evaluation of a domain](img/B20997_09_2.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: Figure 9.2 – The evaluation of a domain
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: There is also a `!` operator for negation, but given logical equivalences and
    negated comparison operators such as `!=` and `not in`, it is not really necessary.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: Note that this is a unary prefix operator, so it only applies to the following
    expression in the domain and not to everything that follows.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Note that the right operand doesn’t need to be a fixed value when you write
    a domain for a window action or other client-side domains. You can use the same
    minimal Python as is used in the *Passing parameters to forms and actions – Context*
    recipe, so you can write filters such as **changed last week** or **my partners**.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-233
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The preceding domains work only for the fields of the model itself, while we
    often need to filter based on the properties of linked records. To do this, you
    can use the notation that’s also used in `@api.depends` definitions or related
    fields: create a dotted path from the current model to the model you want to filter
    for. To search partners that have a salesperson who is a member of a group starting
    with the letter `G`, you would use the `[(''user_id.groups_id.name'', ''=like'',
    ''G%'')]` domain. The path can be long, so you only have to be sure that there
    are relation fields between the current model and the model you want to filter
    for.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Operators
  id: totrans-235
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following table lists the available operators and their semantics:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 9.1 – Operators and their semantics](img/Table_011.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: Table 9.1 – Operators and their semantics
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Note that some of the operators work only with certain fields and values. For
    example, the domain `[('category_id', 'in', 1)]` is invalid and will generate
    an error, while the domain `[('category_id', 'in', [1])]` is valid.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: Pitfalls of searching using domains
  id: totrans-240
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This all works fine for traditional fields, but a notorious problem is searching
    for the value of a non-stored function field. People often omit the search function.
    This is simple enough to fix by providing the search function in your own code,
    as described in [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application
    Models*.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: Another issue that might baffle developers is Odoo’s behavior when searching
    through `one2many` or `many2many` fields with a negative operator. Imagine that
    you have a partner with the `A` tag, and you search for `[('category_id.name',
    '!=', 'B')]`. Your partner shows up in the result, and this is what you expected,
    but if you add the `B` tag to this partner, it still shows up in your results
    because, for the search algorithm, it is enough that there is one linked record
    (`A` in this case) that does not fulfill the criterion. Now, if you remove the
    `A` tag so that `B` is the only tag, the partner will be filtered out. If you
    also remove the `B` tag so that the partner has no tags, it is still filtered
    out because the conditions of the linked records presuppose the existence of this
    record. In other situations, though, this is the behavior you want, so it is not
    really an option to change the standard behavior. If you need a different behavior
    here, provide a search function that interprets the negation the way you need.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: People often forget that they are writing XML files when it comes to domains.
    You need to escape the less-than operator. Searching for records that have been
    created before the current day will have to be written as `[('create_date', '&lt;',
    current_date)]` in XML.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 人们经常忘记在处理域时他们正在编写XML文件。您需要转义小于运算符。搜索在当前日期之前创建的记录将必须以`[('create_date', '&lt;',
    current_date)]`的形式在XML中编写。
- en: Domains are used widely in Odoo. You will find them everywhere in Odoo; they
    are used for searching, filtering, security rules, search views, user actions,
    and more.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 域在Odoo中被广泛使用。您将在Odoo的每个地方找到它们；它们用于搜索、过滤、安全规则、搜索视图、用户动作等。
- en: If you ever need to manipulate a domain that you didn’t create programmatically,
    use the utility functions provided in `odoo.osv.expression`. The `is_leaf`, `normalize_domain`,
    `AND`, and `OR` functions will allow you to combine domains exactly the way that
    Odoo does. Don’t do this yourself because there are many corner cases that you
    have to take into account, and it is likely that you’ll overlook one.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您需要操作您没有以编程方式创建的域，请使用`odoo.osv.expression`中提供的实用函数。`is_leaf`、`normalize_domain`、`AND`和`OR`函数将允许您以Odoo的方式精确组合域。不要自己这样做，因为有许多您必须考虑的角落案例，您很可能会忽略其中一个。
- en: See also
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: For the standard application of domains, see the *Defining search* *views* recipe.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于域的标准应用，请参阅*定义搜索*视图的食谱。
- en: Defining list views
  id: totrans-249
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义列表视图
- en: After having spent quite some time on the form view, we’ll now take a quick
    look at how to define list views. Internally, these are called tree views in some
    places and list views in others, but given that there is another construction
    within the Odoo view framework called **tree**, we’ll stick to **list** here.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在花费了大量时间在表单视图之后，我们现在将快速看一下如何定义列表视图。在内部，这些在某些地方被称为树视图，在其他地方被称为列表视图，但鉴于Odoo视图框架中还有一个称为**tree**的结构，我们将坚持使用**列表**。
- en: How to do it...
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Define your list view:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义您的列表视图：
- en: '[PRE21]'
  id: totrans-253
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Register a tree view in the action that we created in the *Adding a menu item
    and window action* recipe of this chapter:'
  id: totrans-254
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在本章*添加菜单项和窗口动作*食谱中创建的动作中注册树视图：
- en: '[PRE22]'
  id: totrans-255
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Add menus that call these actions. This is left as an exercise for the reader.
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加调用这些动作的菜单。这留给读者作为练习。
- en: '**Install**/**Upgrade** the module. After that, you will see our tree view
    for the hostel room, and if you check it, it will show different row styles based
    on our conditions.'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装**/**升级**模块。之后，您将看到我们为宿舍房间创建的树视图，如果您检查它，它将根据我们的条件显示不同的行样式。'
- en: How it works...
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: You already know most of what happens here. We define a view, using the `tree`
    type this time, and attach it to our action with an `ir.actions.act_window.view`
    element. So, the only thing left to discuss is the `tree` element and its semantics.
    With a list, you don’t have many design choices, so the only valid children of
    this element are the `field` and `button` elements. You can also use some widgets
    in the list view; in our example, we have used the `many2one_avatar_user` widget.
    The tree view has the support of a special widget called `handle`. This is specific
    to list views. It is meant for integer fields and renders a drag handle that the
    user can use to drag a row to a different position in the list, thereby updating
    the field’s value. This is useful for sequence or priority fields.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经了解这里发生的大部分内容。我们定义了一个视图，这次使用的是`tree`类型，并将其与`ir.actions.act_window.view`元素关联起来。所以，唯一需要讨论的就是`tree`元素及其语义。在列表中，您没有太多设计选择，因此此元素的唯一有效子元素是`field`和`button`元素。您还可以在列表视图中使用一些小部件；在我们的例子中，我们使用了`many2one_avatar_user`小部件。树视图支持一个特殊的小部件，称为`handle`。这是针对列表视图的。它用于整数字段，并渲染一个用户可以用来将行拖动到列表中不同位置的拖动把手，从而更新字段的值。这对于序列或优先级字段非常有用。
- en: By using the `optional` attribute, you can show fields optionally. Adding the
    `optional` attribute to a field will allow the user to hide and show the column
    at any time from the UI. In our example, we have used it for the `country` and
    `state` fields.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`optional`属性，您可以可选地显示字段。将`optional`属性添加到字段将允许用户在任何时候从UI中隐藏和显示列。在我们的例子中，我们使用了它来为`country`和`state`字段。
- en: What is new here are the `decoration` attributes in the `tree` element. This
    contains rules as to which font and/or color is chosen for the row, given in the
    form of `decoration-$name="Python code"`. We made these invisible because we only
    need the data and don’t want to bother our users with the two extra columns. The
    possible classes are `decoration-bf` (bold) and `decoration-it` (italic), and
    the semantic bootstrap classes are `decoration-danger`, `decoration-info`, `decoration-muted`,
    `decoration-primary`, `decoration-success`, and `decoration-warning`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-262
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For numeric fields, you can add a `sum` attribute that causes this column to
    be summed up with the text you set in the attribute as a tooltip. Less common
    are the `avg`, `min`, and `max` attributes, which display the average, minimum,
    and maximum, respectively. Note that these four only work on the records that
    are currently visible, so you might want to adjust the action’s `limit` (covered
    earlier in the *Adding a menu item and window action* recipe) in order for the
    user to see all the records immediately.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: A very interesting attribute for the `tree` element is `editable`. If you set
    this to top or bottom, the list behaves entirely differently. Without it, clicking
    on a row opens a form view for the row. With it, clicking on a row makes it editable
    inline, with the visible fields rendered as form fields. This is particularly
    useful in embedded list views, which are discussed later in the *Defining embedded
    views* recipe of this chapter. The choice of top or bottom relates to whether
    new lines will be added to the top or bottom of the list.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: By default, records are ordered according to the `_order` property of the displayed
    model. The user can change the ordering by clicking on a column header, but you
    can also set a different initial order by setting the `default_order` property
    in the `tree` element. The syntax is the same as in `_order`.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: Ordering is often a source of frustration for new developers. As Odoo lets PostgreSQL
    do the work here, you can only order according to the fields that PostgreSQL knows
    about and only the fields that live in the same database table. So, if you want
    to order according to a function or a related field, ensure that you set `store=True`.
    If you need to order according to a field inherited from another model, declare
    a stored related field.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: The `create`, `edit`, and `delete` attributes of the `tree` element work the
    same as for the `form` element we described earlier in the *Adding content and
    widgets to a form view* recipe of this chapter. They also determine the available
    controls if the `editable` attribute is set.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Defining search views
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When opening your list view, you’ll notice the search field in the upper right.
    If you type something there, you will receive suggestions about what to search
    for, and there is also a set of predefined filters to choose from. This recipe
    will walk you through how to define these suggestions and options.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define your search view:'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Tell your action to use it:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: When you type something into the search bar now, you’ll be offered the ability
    to search for this term in the `name`, `room no`, and `state` fields. If your
    term happens to be a substring of a bank account number in your system, you’ll
    even be offered the option to search exactly for this bank account.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-277
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the case of `name`, we simply listed the field as the one to be offered to
    the user to search for. We left the semantics as the default, which is a substring
    search for character fields.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: For categories, we do something more interesting. By default, your search term
    is applied to a `many2many` field trigger called `name_search`, which would be
    a substring search in the category names in this case. However, depending on your
    category structure, it can be very convenient to search for partners who have
    the category you’re interested in or a child of it. Think of a main category,
    **newsletter subscribers**, with the subcategories **weekly newsletter**, **monthly
    newsletter**, and a couple of other newsletter types. Searching for **newsletter
    subscribers** with the preceding search view definition will give you everyone
    who is subscribed to any of those newsletters in one go, which is a lot more convenient
    than searching for every single type and combining the results.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: The `filter_domain` attribute can contain an arbitrary domain, so you’re not
    restricted to searching for the same field you named in the `name` attribute nor
    to using only one term. The `self` variable is what the user filled in and is
    also the only variable that you can use here.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s a more elaborate example from the default search view for hostel room:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This means that the user doesn’t have to think about what to search for. All
    they need to do is type in some letters, press *Enter*, and, with a bit of luck,
    one of the fields mentioned contains the string we’re looking for.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: For the `child_ids` field, we used another trick. The type of field not only
    decides the default way of searching for the user’s input but also defines the
    way in which Odoo presents the suggestions. Additionally, given that `many2one`
    fields are the only ones that offer auto-completion, we force Odoo to do that,
    even though `child_ids` is a `one2many` field, by setting the `widget` attribute.
    Without this, we will have to search in this field without suggestions for completion.
    The same applies to `many2many` fields.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: Note that every field with a `many2one` widget set will trigger a search on
    its model for every one of the user’s keystrokes; don’t use too many of them.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: You should also put the most-used fields on the top because the first field
    is what is searched for if the user just types something and presses *Enter*.
    The search bar can also be used with the keyboard; select a suggestion by pressing
    the down arrow and open the completion suggestion of `many2one` by pressing the
    right arrow. If you educate your users on this and pay attention to the sensible
    ordering of fields in the search view, this will be much more efficient than typing
    something first, grabbing the mouse, and selecting an option.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: The `filter` element creates a button that adds the content of the filter’s
    `domain` attribute to the search domain. You should add a logical internal `name`
    and a `string` attribute to describe the filter to your users.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: The `<group>` tag is used to provide a grouping option under the `country_id`
    field.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-290
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can group filters using the `group` tag, which causes them to be rendered
    slightly closer together than the other filters, but this has semantic implications,
    too. If you put multiple filters in the same group and activate more than one
    of them, their domains will be combined with the `|` operator, while the filters
    and fields not in the same group are combined with the `&` operator. Sometimes,
    you might want disjunction for your filters, which is where they filter for mutually
    exclusive sets, in which case, selecting both of them will always lead to an empty
    result set. Within the same group, you can achieve the same effect with the `separator`
    element.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: Note that if the user fills in multiple queries for the same field, they will
    be combined with `|`, too, so you don’t need to worry about that.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: Apart from the `field` attribute, the `filter` element can have a `context`
    attribute, whose content will be merged with the current context and eventually
    other context attributes in the search view. This is essential for views that
    support grouping (refer to the *Defining kanban view* and *Defining graph view*
    recipes) because the resulting context determines the field(s) to be grouped using
    the `group_by` key. We’ll look into the details of grouping in the appropriate
    recipes, but the context has other uses, too. For example, you can write a function
    field that returns different values depending on the context, and then you can
    change the values by activating a filter.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: 'The search view itself also responds to context keys. In a very similar way
    to default values when creating records, you can pass default values for a search
    view through the context. If we had set a context of `{''search_default_room_rating'':
    1}` in our previous action, the `room_rating` filter would have been pre-selected
    in the search view. This works only if the filter has a name, though, which is
    why you should always set it. To set defaults for fields in the search view, use
    `search_default_$fieldname`.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, the `field` and `filter` elements can have a `groups` property
    with the same semantics as in the form views in order to make the element only
    visible to certain groups.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For further details about manipulating the context, see the *Passing parameters
    to forms and actions –* *Context* recipe.
  id: totrans-298
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Users who speak languages with heavy use of diacritical marks will probably
    want to have Odoo search for `e`, `è`, `é`, and `ê` when filling in the `e` character.
    This is a configuration of the **PostgreSQL server** called **unaccent**, which
    Odoo has special support for, but this is outside the scope of this book. Refer
    to [https://www.postgresql.org/docs/10/unaccent.html](https://www.postgresql.org/docs/10/unaccent.html)
    for more information about unaccent.
  id: totrans-299
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a search filter side panel
  id: totrans-300
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo provides one more way to display search filters, which is a **search filter
    side panel**. This panel shows a list of filters on the side of the view. A search
    panel is very useful when search filters are used frequently by the end user.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-302
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The search panel is part of the search view. So, for this recipe, we will continue
    using the `my_module` add-on from the previous recipe. We will add our search
    panel to the previously designed search view.
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-304
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add `<searchpanel>` in the search view, as shown here:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-306
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Update the module to apply the modification. After the update, you will see
    the search panel on the left side of the view.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-308
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To add the search panel, you will need to use the `<searchpanel>` tag in the
    search view. To add your filter, you will need to add a field in the search panel.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: In our example, first, we added a `state` field. You also need to add an `icon`
    attribute to the field. This icon will be displayed before the title of the filter.
    Once you add the field to the search panel, it will display the title with an
    icon, and, below that, a list of all the users. Upon clicking on a user, the records
    in the list view will be filtered, and you will only see the contacts of the selected
    user. In this filter, only one item can be active, meaning once you click on another
    user’s filter, the previous user’s filter will be removed. If you want to activate
    multi-user filters, you can use the `select="multi"` attribute. If you use that
    attribute, you will find the checkbox for each filter option, and you will be
    able to activate multiple filters at a time. We have used the `select="multi"`
    attribute on the `state` filter. This will allow us to select and filter by multiple
    categories at once.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when you are using the side panel filter on `many2one` or `many2many`.
    If the relation model has too many records, only the **top 200 records** will
    be displayed to avoid performance issues.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-313
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to display search panel items in groups, you can use the `groupby`
    attribute on a field. For example, if you want to group a category based on its
    parent hierarchy, you can add the `groupby` attribute with the `parent_id` field,
    as can be seen here:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This will show the category filters grouped according to the parent category
    of the record.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: Changing existing views – view inheritance
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have ignored the existing views and declared completely new ones.
    While this is didactically sensible, you’ll rarely be in situations where you’ll
    want to define a new view for an existing model. Instead, you’ll want to slightly
    modify the existing views, be it to simply have them show a field that you added
    to the model in your add-on or to customize them according to your needs or your
    customers’ needs.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll change the default partner form to show the record’s last
    modification date and make the `mobile` field searchable by modifying the search
    view. Then, we’ll change the position of one column in the partners’ list view.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-320
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Inject the field into the default form view:'
  id: totrans-321
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-322
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the field to the default search view:'
  id: totrans-323
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-324
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the field to the default list view:'
  id: totrans-325
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-326
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: After updating your module, you should see the **Last updated on** field beneath
    the website field on the partner form. When you type something into the search
    box, it should suggest that you search for the partners on the mobile field, and
    in the partner’s list view, you will see that the order of the phone number and
    email has changed.
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-328
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we added a basic structure for form inheritance. The crucial field
    here is, as you’ve probably guessed, `inherit_id`. You need to pass the XML ID
    of the view you want to modify (inherit from) to it. The `arch` field contains
    instructions on how to modify the existing XML nodes within the view you’re inheriting
    from. You should actually think of the whole process as simple XML processing
    because all the semantic parts only come a lot later.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: 'The most canonical instruction within the `arch` field of an inherited view
    is the `field` element, which has the required attributes: `name` and `position`.
    As you can only have every field appear once in a form, the name already uniquely
    identifies a field. With the `position` attribute, we can place whatever we put
    within the field element, either `before`, `inside`, or `after` regarding the
    field we named. The default is `inside`, but for readability, you should always
    name the position you require. Remember that we’re not talking semantics here;
    this is about the position in the XML tree relative to the field we have named.
    How this will be rendered afterward is a completely different matter.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 2* demonstrates a different approach. The `xpath` element selects the
    first element that matches the XPath expression named in the `expr` attribute.
    Here, the `position` attribute tells the processor where to put the contents of
    the `xpath` element.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: If you want to create an XPath expression based on a CSS class, Odoo provides
    a special function called `hasclass`. For example, if you want to select a `<div>`
    element with the `test_class` CSS class, then the expression will be `expr="//div[hasclass('test_class')]"`.
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 3* shows how you can change the position of an element. This option was
    introduced in `phone` field so that it came after the `email` field using the
    `position=move` option.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: XPath might look somewhat scary, but it is a very efficient means of selecting
    the node you need to work on. Take the time to look through some simple expressions;
    it’s worth it. You’ll likely stumble upon the term **context node**, to which
    some expressions are relative. In Odoo’s view inheritance system, this is always
    the root element of the view you’re inheriting from.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: For all the other elements found in the `arch` field of an inheriting view,
    the processor looks for the first element with the same node name and matching
    attributes (with the attribute position excluded, as this is part of the instruction).
    Use this only in cases where it is very unlikely that this combination is not
    unique, such as a group element combined with a `name` attribute.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: Note that you can have as many instruction elements within the `arch` field
    as you need. We only used one per inherited view because there’s nothing else
    we want to change currently.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-339
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `position` attribute has two other possible values: `replace` and `attributes`.
    Using `replace` causes the selected element to be replaced with the content of
    the instruction element. Consequently, if you don’t have any content, the selected
    element can simply be removed. The preceding list or form view would cause the
    `state` field to be removed:'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-341
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Important note
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: Removing fields can cause other inheriting views to break and several other
    undesirable side effects, so avoid that if possible. If you really need to remove
    fields, do so in a view that comes late in the order of evaluation (refer to the
    next section, *Order of evaluation in view inheritance*, for more information).
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '`attributes` has very different semantics from the preceding examples. The
    processor expects the element to contain the `attribute` elements with a `name`
    attribute. These elements will then be used to set attributes for the selected
    element. If you want to heed the earlier warning, you should set the `invisible`
    attribute to `1` for the `state` field:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'An `attribute` node can have `add` and `remove` attributes, which, in turn,
    should contain the value to be removed from or added to the space-separated list.
    This is very useful for the `class` attribute, where you’d add a class (instead
    of overwriting the whole attribute) by using the following:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-347
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This code adds the `oe_inline` class to the `description` field. If the field
    already has a class attribute present, Odoo will join the value with the value
    of the `separator` attribute.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Order of evaluation in view inheritance
  id: totrans-349
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we currently have only one parent view and one inheriting view, we don’t
    run into any problems with conflicting view overrides. When you have installed
    a couple of modules, you’ll find a lot of overrides for the partner form. This
    is fine as long as they change different things in a view, but there are occasions
    where it is important to understand how overriding works in order to avoid conflicts.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: The direct descendants of a view are evaluated in ascending order of their `priority`
    field, so views with a lower priority are applied first. Every step of inheritance
    is applied to the result of the first, so if a view with priority `3` changes
    a field and another one with priority `5` removes it, this is fine. This does
    not work, however, if the priorities are reversed.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: You can also inherit an inheriting view itself from a view. In this case, the
    second-level inheriting view is applied to the result of the view it inherits
    from. So, if you have four views, `A`, `B`, `C`, and `D`, where `A` is a standalone
    form, `B` and `C` inherit from `A`, and `D` inherits from `B`, the order of evaluation
    is `A`, `B`, `D`, and `C`. Use this to enforce an order without having to rely
    on priorities; this is safer in general. If an inheriting view adds a field and
    you need to apply changes to this field, inherit from the inheriting view and
    not from the standalone one.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: This kind of inheritance always works on the complete XML tree from the original
    view, with modifications from the previous inheriting views applied.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: 'The following points provide information on some advanced tricks that are used
    to tweak the behavior of view inheritance:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: For inheriting views, a very useful and not very well-known field is `groups_id`.
    This field causes inheritance to take place only if the user requesting the parent
    view is a member of one of the groups mentioned there. This can save you a lot
    of work when adapting the user interface for different levels of access because,
    with inheritance, you can have more complex operations than just showing or not
    showing the elements based on group membership, as is possible with the `groups`
    attribute for form elements.
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can, for example, remove elements if the user is a member of a group (which
    is the inverse of what the `groups` attribute does). You can also carry out some
    elaborate tricks, such as adding attributes based on group membership. Think about
    simple things, such as making a field read-only for certain groups, or more interesting
    concepts, such as using different widgets for different groups.
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What was described in this recipe relates to the `mode` field of the original
    view being set to primary, while the inheriting views have the mode extension,
    which is the default. We will investigate the case in which the mode of an inheriting
    view is set to `primary` later, where the rules are slightly different.
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining document-style forms
  id: totrans-359
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we’ll review some design guidelines in order to present a uniform
    user experience.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-361
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Start your form with a `header` element:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'stat button, which will be used to show total Hostel Room and will redirect
    to hostel room:'
  id: totrans-364
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-366
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Add some prominent field(s):'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-368
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Add your content; you can use a notebook if there are a lot of fields:'
  id: totrans-369
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-370
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: </sheet>
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <div class="oe_chatter">
  id: totrans-372
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="message_follower_ids" widget="mail_followers"/>
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="message_ids" widget="mail_thread"/>
  id: totrans-374
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <field name="activity_ids" widget="mail_activity"/>
  id: totrans-375
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: </div>
  id: totrans-376
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-377
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Let’s have a look at how this recipe works.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-379
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The header should contain buttons that execute actions on the object that the
    user currently sees. Use the `btn-primary` class to make buttons visually stand
    out (in purple at the time of writing), which is a good way to guide the user
    regarding which is the most logical action to execute at the moment. Try to have
    all the highlighted buttons to the left of the non-highlighted buttons and hide
    the buttons that are not relevant in the current state (if applicable). If the
    model has a state, show it in the header using the `statusbar` widget. This will
    be rendered as right-aligned in the header.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: The `sheet` element is rendered as a stylized sheet, and the most important
    fields should be the first thing the user sees when looking at it. Use the `oe_title`
    classes to have them rendered in a prominent place (floating left with slightly
    adjusted font sizes at the time of writing).
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: If there are other records of interest concerning the record the user currently
    sees (such as the partner’s invoices on a partner form), put them in an element
    with the `oe_right` and `oe_button_box` classes; this aligns the buttons in it
    to the right. On the buttons themselves, use the `oe_stat_button` class to enforce
    a uniform rendering of the buttons. It’s also customary to assign an icon class
    from the `icon` attribute. You can learn more about Font Awesome at [https://fontawesome.com/v4.7.0/icons/](https://fontawesome.com/v4.7.0/icons/).
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `oe_chatter` class and `mail.thread` mixin. We will see this
    in detail in [*Chapter 23*](B20997_23.xhtml#_idTextAnchor1210), *Managing Emails*
    *in Odoo*.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Even if you do not like this layout, stick to the element and class names described
    here and adjust what you need with CSS and possibly JavaScript. This will make
    the user interface more compatible with existing add-ons and allow you to integrate
    better with core add-ons.
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-386
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To find out more about Font Awesome, go to [https://fontawesome.com/v4.7.0/icons/](https://fontawesome.com/v4.7.0/icons/).
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For more details on the `mail.thread` mixin, refer to [*Chapter 23*](B20997_23.xhtml#_idTextAnchor1210),
    *Managing Emails* *in Odoo*.
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dynamic form elements using attributes
  id: totrans-389
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have only looked into changing forms depending on the user’s groups
    (the `groups` attribute for elements and the `groups_id` field for inherited views)
    and nothing more. This recipe will show you how to modify the form view based
    on the value of the fields in it.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-391
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define an attribute called `attributes` on a form element:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-393
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Ensure that all the fields you refer to are available in your form:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-395
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This will make the `child_ids` field invisible if the `parent_id` is not `hostel
    room category`, and it will be required if it’s a hostel room category.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`invisible`, `required`, and `readonly` keys (all of which are optional). The
    values are domains that may refer to the fields that exist on the form (and really
    only those, so there are no dotted paths), and the whole dictionary is evaluated
    according to the rules for client-side Python, as described earlier in the *Passing
    parameters to forms and actions – Context* recipe of this chapter. So, for example,
    you can access the context in the right-hand operand.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-399
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While this mechanism is quite straightforward for scalar fields, it’s less obvious
    how to handle the `one2many` and `many2many` fields. In fact, in standard Odoo,
    you can’t do much with those fields within `[[6, False, []]]` as your right-hand
    operand.
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
- en: Defining embedded views
  id: totrans-401
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you show a `one2many` or a `many2many` field on a form, you don’t have
    much control over how it is rendered if you haven’t used one of the specialized
    widgets. Additionally, in the case of the `many2one` fields, it is sometimes desirable
    to be able to influence the way the linked record is opened. In this recipe, we’ll
    look at how to define private views for those fields.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-403
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define your field as usual, but don’t close the tag:'
  id: totrans-404
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-405
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Write the view definition(s) into the tag:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-407
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Close the tag:'
  id: totrans-408
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-409
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-410
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When Odoo loads a form view, it first checks whether the `relational` type fields
    have embedded views in the field, as outlined previously. Those embedded views
    can have the exact same elements as the views we defined before. Only if Odoo
    doesn’t find an embedded view of some type does it use the model’s default view
    of this type.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-412
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While embedded views might seem like a great feature, they complicate view inheritance
    a lot. For example, as soon as embedded views are involved, the field names are
    not guaranteed to be unique, and you’ll usually have to use some elaborate XPaths
    to select elements within an embedded view.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: So, in general, you should better define standalone views and use the `form_view_ref`
    and `tree_view_ref` keys, as described earlier in the *Having an action open a
    specific view* recipe of this chapter.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: Displaying attachments on the side of the form view
  id: totrans-415
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In some applications, such as invoicing, you need to fill in data based on a
    document. To ease the data-filling process, a new feature was added to Odoo version
    12 to display the document on the side of the form view.
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'In this recipe, we will learn how to display the form view and the document
    side by side:'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 9.3 – Cascading attachments and the form view](img/B20997_09_3.jpg)'
  id: totrans-418
  prefs: []
  type: TYPE_IMG
- en: Figure 9.3 – Cascading attachments and the form view
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: This feature is only meant for large displays (`>1534px`), so if you have a
    small viewport, this feature will be hidden. Internally, this feature uses some
    responsive utilities, so this feature only works in the **Enterprise** edition.
    However, you can still use this code in your module. Odoo will automatically handle
    this, so if the module is installed in the Enterprise edition, it will show the
    document, while in the Community edition, it will hide everything without any
    side effects.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-422
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will enable this feature to modify a form view for the `hostel.room.category`
    model, as follows:'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-424
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Update the module to apply the changes. You need to upload a PDF or image via
    the record chatter. When you upload it, Odoo will display the attachment on the
    side.
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-426
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This feature only works if your model has inherited the `mail.thread` model.
    To show the document on the side of any form view, you will need to add an empty
    `<div>` with the `o_attachment_preview` class before the chatter elements. That’s
    it; the documents attached in the chatter will be displayed on the side of the
    form view.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `pdf` and `image` documents will be displayed in ascending
    order by date. You can change this behavior by providing extra options, which
    include the following:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '`type`: You need to pass the list of document types you want to allow. Only
    two values are possible: `pdf` and `image`. For example, if you want to display
    only `pdf`-type images, you can pass `{''``type'': [''pdf'']}`.'
  id: totrans-429
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`order`: The possible values are `asc` and `desc`. These allow you to show
    documents in ascending order or descending order of the document creation date.'
  id: totrans-430
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-431
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In most cases, you want to display documents on the side of the initial state
    of any record. If you want to hide the attachment preview based on domain, you
    can use `attributes` on the `<div>` tag to hide the preview.
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following example: it will hide the PDF preview if the value
    of the `state` field is not `draft`:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: This is how you can hide attachments when they are not needed. Usually, this
    feature is used to fill data from PDFs and is only activated in draft mode.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: Defining kanban views
  id: totrans-436
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have presented you with a list of records that can be opened to show
    a form. While those lists are efficient when presenting a lot of information,
    they tend to be slightly boring, given the lack of design possibilities. In this
    recipe, we’ll take a look at **kanban views**, which allow us to present lists
    of records in a more appealing way.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-438
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define a view of the `kanban` type:'
  id: totrans-439
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-440
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'List the fields you’ll use in your view:'
  id: totrans-441
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-442
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Implement a design:'
  id: totrans-443
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-444
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Close all the tags:'
  id: totrans-445
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-446
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Add this view to one of your actions. This is left as an exercise for the reader.
    You will find a full working example in the GitHub example files: [https://github.com/PacktPublishing/Odoo-13-Development-Cookbook-Fourth-Edition/tree/master/Chapter09/15_kanban_view/my_module](https://github.com/PacktPublishing/Odoo-13-Development-Cookbook-Fourth-Edition/tree/master/Chapter09/15_kanban_view/my_module).'
  id: totrans-447
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-448
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to give a list of fields to load in *step 2* in order to be able to
    access them later. The content of the `templates` element must be a single `t`
    element with the `t-name` attribute set to `kanban-box`.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: What you write inside this element will be repeated for each record, with special
    semantics for `t` elements and `t-*` attributes. For details about this, refer
    to the *Using client-side QWeb templates* recipe from [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861),
    *Web Client Development* because, technically speaking, kanban views are just
    an application of QWeb templates.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: There are a few modifications that are particular to kanban views. You have
    access to the `read_only_mode`, `record`, and `widget` variables during evaluation.
    Fields can be accessed using `record.fieldname`, which is an object with the `value`
    and `raw_value` properties, where `value` is the field’s value that has been formatted
    in a way that is presentable to the user, and `raw_value` is the field’s value,
    as it comes from the database.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: '`many2many` fields make an exception here. You’ll only get an ID list through
    the `record` variable. For a user-readable representation, you must use the `field`
    element.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: Note the `type` attribute of the link at the top of the template. This attribute
    makes Odoo generate a link that opens the record in view mode (`type` attribute
    can also be `object` or `action`, which will render the links that call a function
    from the model or an action. In both cases, you need to supplement the attributes
    for buttons in form views, as outlined in the *Adding buttons to forms* recipe
    of this chapter. Instead of the `a` element, you can also use the `button` element;
    the `type` attribute has the same semantics here.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-455
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few more helper functions worth mentioning. If you need to generate
    a pseudo-random color for an element, use the `kanban_color(some_variable)` function,
    which will return a CSS class that sets the `background` and `color` properties.
    This is usually used in the `t-att-class` elements.
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: If you want to display an image stored in a binary field, use `kanban_image(modelname,
    fieldname, record.id.raw_value)`, which returns a data URI if you included the
    field in your fields list; the field is set, is a placeholder if the field is
    not set, or is a URL that makes Odoo stream the field’s contents if you didn’t
    include the field in your fields list. Do not include the field in the fields
    list if you need to display a lot of records simultaneously or if you expect very
    big images. Usually, you’d use this in a `t-att-src` attribute of an `img` element.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
- en: Doing design in kanban views can be a bit trying. What often works better is
    generating HTML using a function field of the HTML type and generating this HTML
    from a Qweb view. In this way, you’re still doing QWeb but doing so on the server
    side, which is a lot more convenient when you need to work on a lot of data.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-460
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To know more about template elements, refer to the *Using client-side QWeb templates*
    recipe from [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861), *Web* *Client Development*.
  id: totrans-461
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing kanban cards in columns according to their state
  id: totrans-462
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows you how to set up a kanban view where the user can drag and
    drop a record from one column to the other, thereby pushing the record in question
    into another state.
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-464
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: From now on, we’ll make use of the hostel module here, as this defines models
    that lend themselves better to date- and state-based views than those defined
    in the base module. So, before proceeding, add `base` to the dependencies list
    of your add-on.
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-466
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define a kanban view for the hostel room category:'
  id: totrans-467
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-468
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: Add a menu and an action using this view. This is left as an exercise for the
    reader.
  id: totrans-469
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-470
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kanban views support grouping, which allows you to display records that have
    a group field in common in the same column. This is commonly used for a `parent
    hotel room category` or `parent_id` field because it allows the user to change
    this field’s value for a record by simply dragging it into another column. Set
    the `default_group_by` attribute on the `kanban` element to the name of the field
    you want to group by in order to make use of this functionality.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: 'To control the behavior of kanban grouping, there are a few options available
    in Odoo:'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '`group_create`: This option is used to hide or show the `true`.'
  id: totrans-473
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_delete`: This option enables or disables the `true`.'
  id: totrans-474
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_edit`: This option enables or disables the `true`.'
  id: totrans-475
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`archivable`: This option enables or disables the option to archive and restore
    the records from the kanban group context menu. This only works if the `active`
    Boolean field is present in your model.'
  id: totrans-476
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quick_create`: With this option, you can create records directly from the
    kanban view.'
  id: totrans-477
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quick_create_view`: By default, the `quick_create` option displays only the
    name field in kanban. However, with the `quick_create_view` option, you can give
    the reference to the minimal form view so as to display it in kanban.'
  id: totrans-478
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`on_create`: If you don’t want to use `quick_create` when creating a new record
    and you don’t want to redirect the user to the form view either, you can give
    the reference of the wizard so that it will open the wizard when clicking the
    **Create** button.'
  id: totrans-479
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-480
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If not defined in the dedicated attribute, any search filter can add grouping
    by setting a context key named `group_by` to the field name(s) to group by.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
- en: Defining calendar views
  id: totrans-482
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe walks you through how to display and edit information about dates
    and duration in your records in a visual way.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-484
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a `calendar` view for the `hostel.room.category`
    model:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a `calendar` view:'
  id: totrans-486
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-487
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: Add menus and actions using this view. This is left as an exercise for the reader.
  id: totrans-488
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-489
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `calendar` view needs to pass the field names in the `date_start` and `date_stop`
    attributes to indicate which fields to look at when building the visual representation.
    Only use fields with the `Datetime` or `Date` type; other types of fields will
    not work and will instead generate an error. While `date_start` is required, you
    can leave out `date_stop` and set the `date_delay` attribute instead, which is
    expected to be a `Float` field that represents the duration in hours.
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: The `calendar` view allows you to give records that have the same value in a
    field the same (arbitrarily assigned) color. To use this functionality, set the
    `color` attribute to the name of the field you need. In our example, we can see
    at a glance which hostel room category belongs to the same hostel room category
    because we assigned `parent_id` as the field to determine the color groups.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: The fields you name in the `calendar` element’s body are shown within the block
    that represents the time interval covered, separated by commas.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-493
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `calendar` view has some other helpful attributes. If you want to open calendar
    entries in a popup instead of the standard form view, set `event_open_popup` to
    `1`. By default, you create a new entry by just filling in some text, which internally
    calls the model’s `name_create` function to actually create the record. If you
    want to disable this behavior, set `quick_add` to `0`.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: If your model covers a whole day, set `all_day` to a field’s name that is `true`
    if the record covers the whole day and `false` otherwise.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: Defining graph view and pivot view
  id: totrans-496
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we’ll take a look at Odoo’s business intelligence views. These
    are read-only views that are meant to present data.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-498
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’re still making use of the `hostel` module here. You can configure a graph
    and pivot views to get different statistics. For our example, we will focus on
    the assigned user. We will generate a graph and pivot view to see the users of
    the hostel room category. By the way, the end user can generate statistics of
    their choice by modifying the view options.
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-500
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define a graph view using bars:'
  id: totrans-501
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-502
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Define a pivot view:'
  id: totrans-503
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-504
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Add menus and actions using this view. This is left as an exercise for the reader.
  id: totrans-505
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If everything went well, you should see graphs that show how many parent hostel
    room categories are assigned to which hostel room categories and the state of
    those hostel room categories.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The graph view is declared with a root element, `graph`. The `type` attribute
    on a `graph` element determines the initial mode of a graph view. The possible
    values are `bar`, `line`, and `chart`, but `bar` is the default. The graph view
    is highly interactive, so the user can switch between the different modes and
    also add and remove fields. If you use `type="bar",`, you can also use `stacked="1"`
    to show a stacked bar chart during grouping.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
- en: The `field` elements tell Odoo what to display on which axis. For all graph
    modes, you need at least one field with the `row` type and one with the `measure`
    type to see anything useful. Fields of the `row` type determine the grouping,
    while those of the `measure` type stand for the value(s) to be shown. Line graphs
    only support one field of each type, while charts and bars handle two group fields
    with one measure nicely.
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
- en: Pivot views have their own root element, `pivot`. The pivot view supports an
    arbitrary amount of group and measure fields. Nothing will break if you switch
    to a mode that doesn’t support the number of groups and measures you defined;
    some fields will just be ignored, and the result might not be as interesting as
    it could be.
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-511
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For all graph types, `Datetime` fields are tricky to group because you’ll rarely
    encounter the same field value here. So, if you have a `Datetime` field of the
    `row` type, also specify the `interval` attribute with one of the following values:
    `day`, `week`, `month`, `quarter`, or `year`. This will cause the grouping to
    take place in the given interval.'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
- en: Grouping, like sorting, relies heavily on PostgreSQL. So, the rule applies here
    also that a field must live in the database and in the current table in order
    to be usable.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
- en: It is a common practice to define database views that collect all the data you
    need and define a model on top of this view in order to have all the necessary
    fields available.
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
- en: Depending on the complexity of your view and the grouping, building the graph
    can be quite an expensive exercise. Consider setting the `auto_search` attribute
    to `False` in these cases so that the user can first adjust all the parameters
    and only then trigger a search.
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
- en: The pivot table also supports grouping in columns. Use the `col` type for the
    fields you want to have there.
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
- en: Defining the cohort view
  id: totrans-518
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For the cohort analysis of records, the new cohort view was added in Odoo version
    12\. The cohort view is used to find out the life cycle of a record over a particular
    time span. With the cohort view, you can see the churn and retention rate of any
    object for a particular time.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-520
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `cohort` view is part of the `web_cohort` in the manifest file of your module.
    For our example, we will create a view to see the cohort analysis for hostel room
    category.
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-522
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add the `cohort` view for the `hostel.room.category`
    model:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
- en: 'Define a `cohort` view:'
  id: totrans-524
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-525
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Add menus and actions using this view. This is left as an exercise for the reader.
  id: totrans-526
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-527
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To create a cohort view, you need to provide `date_start` and `date_stop`. These
    will be used in the view to determine the time span of any record. For example,
    if you are managing a subscription of a service, the start date of the subscription
    will be `date_start` and the date when the subscription is going to expire will
    be `date_stop`.
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the `cohort` view will be displayed in the `retention` mode at
    intervals of a month. You can use the given options to obtain different behaviors
    in the `cohort` view:'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
- en: '`mode`: You can use cohort with two modes: `retention (default)` or `churn`.
    The `retention` mode starts at 100% and decreases with time, while the `churn`
    mode starts at 0% and increases with time.'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`timeline`: This option accepts two values: `forward (default)` or `backward`.
    In most cases, you need to use the forward timeline. However, if `date_start`
    is in the future, you will need to use the backward timeline. An example of when
    we would use the backward timeline would be for the registration of an event attendee
    where the event date is in the future, and the registration date is in the past.'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`interval`: By default, the cohort is grouped by month, but you can change
    this in the interval options. Other than months, the cohort also supports day,
    week, and year intervals.'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`measure`: Just like graph and pivot, measure is used to display the aggregated
    value of a given field. If no option is given, the cohort will display the count
    of records.'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the gantt view
  id: totrans-534
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo version 13 added a new `gantt` view with new options. The `gantt` view
    is useful for seeing overall progress and scheduling business processes. In this
    recipe, we will create a new `gantt` view and look at its options.
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-536
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `gantt` view is part of the Odoo Enterprise edition, so you can’t use it
    with the Community edition. If you are using the Enterprise edition, you need
    to add the `web_gantt` dependency in the manifest file of your module.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we will continue using the `my_hostel` module from the previous
    recipe. We will create a new `gantt` view for the hostel room category.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-539
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define a `gantt` view for the hostel room category model as follows:'
  id: totrans-540
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-541
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Add menus and actions using this view. This is left as an exercise for the reader.
  id: totrans-542
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install and update the module to apply the changes; after the update, you will
    see the `gantt` view on the hostel room category.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-544
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With the `gantt` view, you can display an overall schedule on one screen. In
    our example, we have created a `gantt` view for the hostel room category grouped
    by parent. Typically, you need two attributes to create a `gantt` view, `start_date`,
    and `stop_date`, but there are some other attributes that extend the functionality
    of the `gantt` view. Let’s see all the options:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '`start_date`: Defines the starting time of the `gantt` item. It must be a date
    or date-time field.'
  id: totrans-546
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_group_by`: Use this attribute if you want to group the `gantt` items
    based on field.'
  id: totrans-547
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`: This attribute is used to decide the color of a `gantt` item.'
  id: totrans-548
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`progress`: This attribute is used to indicate the progress of a `gantt` item.'
  id: totrans-549
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`decoration-*`: Decoration attributes are used to decide the color of a gantt
    item based on conditions. It can be used like this: `decoration-danger="state
    == ''lost''"`. Its other values are `decoration-success`, `decoration-info`, `decoration-warning`,
    and `decoration-secondary`.'
  id: totrans-550
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scales`: Use the `scales` attribute if you want to enable the `gantt` view
    only for a few scales. For example, if you only want day and week scales, you
    can use `scales="day,week"`.'
  id: totrans-551
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, `gantt` view items are resizable and draggable, but if you want
    to disable that, you can use the `edit="0"` attribute.
  id: totrans-552
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more...
  id: totrans-553
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you hover over a `gantt` view item, you will see the name and date for
    the item. If you want to customize that popup, you can define a `gantt` view definition
    like this:'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-555
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: Note that you will need to add the fields that you want to use in the template
    via the `<``field>` tag.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: Defining the activity view
  id: totrans-557
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Activities are an important part of Odoo apps. They are used to schedule to-do
    actions for different business objects. The `activity` view helps you to see the
    statuses and schedules of all activities on the model.
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-559
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example, we will continue using the `my_hostel` module from the previous
    recipe. We will create a new `activity` view for the hostel room category.
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-561
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define a `activity` view for the `hostel room category` model as follows:'
  id: totrans-562
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-563
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Add menus and actions using this view. This is left as an exercise for the reader.
  id: totrans-564
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-565
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `activity` view is simplistic; most of the things are managed automatically.
    You just have the option to customize the first column. To display your data in
    the first column, you need to create a QWeb template with the name `activity-box`,
    and that’s it; Odoo will manage the rest.
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: The `activity` view will display your template in the first column, and other
    columns will show the scheduled activities grouped by activity type.
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: Defining the map view
  id: totrans-568
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo version 13 adds a new view called a `map` view. As its name suggests, it
    is used to show a map with a marker. They are very useful for on-site services.
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-570
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In our example, we will continue using the `my_hostel` module from the previous
    recipe. We will create the new `map` view for the hostel room category. The `map`
    view is part of the `web_map` dependency in the manifest file of your module.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: Odoo uses the API from [https://www.mapbox.com/](https://www.mapbox.com/) to
    display maps in the view. In order to see the map in Odoo, you will need to generate
    the access token from the **mapbox**. Make sure you have generated an access token
    and set it in the Odoo configuration.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  id: totrans-573
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Define a `map` view for the hostel room category model as follows:'
  id: totrans-574
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-575
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: Add menus and actions using this view. This is left as an exercise for the reader.
  id: totrans-576
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-577
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Creating a map view is pretty simple; you just need a `many2one` field that
    refers to the `hostel.room.category` model. The `hostel.room.category` model has
    `address` fields, which are used by the map view to display the marker for the
    address. You will need to use the `res_partner` attribute to map the address for
    the `map` view. In our case, we have used the `parent_id` field as the hostel
    room category parent record set in the `parent_id` field.
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
