["```py\nfrom django.db.models import Count\nfrom .models import Subject\nclass CourseListView(TemplateResponseMixin, View):\n    model = Course\n    template_name = 'courses/course/list.html'\ndef get(self, request, subject=None):\n        subjects = Subject.objects.annotate(\n            total_courses=Count('courses')\n        )\n        courses = Course.objects.annotate(\n            total_modules=Count('modules')\n        )\n        if subject:\n            subject = get_object_or_404(Subject, slug=subject)\n            courses = courses.filter(subject=subject)\n        return self.render_to_response(\n            {\n                'subjects': subjects,\n                'subject': subject,\n                'courses': courses\n            }\n        ) \n```", "```py\nfrom django.views.generic.detail import DetailView\nclass CourseDetailView(DetailView):\n    model = Course\n    template_name = 'courses/course/detail.html' \n```", "```py\n**from** **courses.views** **import** **CourseListView**\nurlpatterns = [\n    # ...\n **path(****''****, CourseListView.as_view(), name=****'course_list'****),**\n] \n```", "```py\npath(\n    'subject/<slug:subject>/',\n    views.CourseListView.as_view(),\n    name='course_list_subject'\n),\npath(\n    '<slug:slug>/',\n    views.CourseDetailView.as_view(),\n    name='course_detail'\n), \n```", "```py\ncourse/\n    list.html\n    detail.html \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}\n  {% if subject %}\n    {{ subject.title }} courses\n  {% else %}\n    All courses\n  {% endif %}\n{% endblock %}\n{% block content %}\n  <h1>\n    {% if subject %}\n      {{ subject.title }} courses\n    {% else %}\n      All courses\n    {% endif %}\n  </h1>\n<div class=\"contents\">\n<h3>Subjects</h3>\n<ul id=\"modules\">\n<li {% if not subject %}class=\"selected\"{% endif %}>\n<a href=\"{% url \"course_list\" %}\">All</a>\n</li>\n      {% for s in subjects %}\n        <li {% if subject == s %}class=\"selected\"{% endif %}>\n<a href=\"{% url \"course_list_subject\" s.slug %}\">\n            {{ s.title }}\n            <br>\n<span>\n              {{ s.total_courses }} course{{ s.total_courses|pluralize }}\n            </span>\n</a>\n</li>\n      {% endfor %}\n    </ul>\n</div>\n<div class=\"module\">\n    {% for course in courses %}\n      {% with subject=course.subject %}\n        <h3>\n<a href=\"{% url \"course_detail\" course.slug %}\">\n            {{ course.title }}\n          </a>\n</h3>\n<p>\n<a href=\"{% url \"course_list_subject\" subject.slug %}\">{{ subject }}</a>.\n            {{ course.total_modules }} modules.\n            Instructor: {{ course.owner.get_full_name }}\n        </p>\n      {% endwith %}\n    {% endfor %}\n  </div>\n{% endblock %} \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}\n  {{ object.title }}\n{% endblock %}\n{% block content %}\n  {% with subject=object.subject %}\n    <h1>\n      {{ object.title }}\n    </h1>\n<div class=\"module\">\n<h2>Overview</h2>\n<p>\n<a href=\"{% url \"course_list_subject\" subject.slug %}\">\n        {{ subject.title }}</a>.\n        {{ object.modules.count }} modules.\n        Instructor: {{ object.owner.get_full_name }}\n      </p>\n      {{ object.overview|linebreaks }}\n    </div>\n  {% endwith %}\n{% endblock %} \n```", "```py\npython manage.py startapp students \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'students.apps.StudentsConfig'****,**\n] \n```", "```py\nfrom django.contrib.auth import authenticate, login\nfrom django.contrib.auth.forms import UserCreationForm\nfrom django.urls import reverse_lazy\nfrom django.views.generic.edit import CreateView\nclass StudentRegistrationView(CreateView):\n    template_name = 'students/student/registration.html'\n    form_class = UserCreationForm\n    success_url = reverse_lazy('student_course_list')\n    def form_valid(self, form):\n        result = super().form_valid(form)\n        cd = form.cleaned_data\n        user = authenticate(\n            username=cd['username'], password=cd['password1']\n        )\n        login(self.request, user)\n        return result \n```", "```py\nfrom django.urls import path\nfrom . import views\nurlpatterns = [\n    path(\n        'register/',\n        views.StudentRegistrationView.as_view(),\n        name='student_registration'\n    ),\n] \n```", "```py\nurlpatterns = [\n    # ...\n **path(****'students/'****, include(****'students.urls'****)),**\n] \n```", "```py\ntemplates/\n    students/\n        student/\n            registration.html \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}\n  Sign up\n{% endblock %}\n{% block content %}\n  <h1>\n    Sign up\n  </h1>\n<div class=\"module\">\n<p>Enter your details to create an account:</p>\n<form method=\"post\">\n      {{ form.as_p }}\n      {% csrf_token %}\n      <p><input type=\"submit\" value=\"Create my account\"></p>\n</form>\n</div>\n{% endblock %} \n```", "```py\nstudents = models.ManyToManyField(\n    User,\n    related_name='courses_joined',\n    blank=True\n) \n```", "```py\npython manage.py makemigrations \n```", "```py\nMigrations for 'courses':\n  courses/migrations/0004_course_students.py\n    - Add field students to course \n```", "```py\npython manage.py migrate \n```", "```py\nApplying courses.0004_course_students... OK \n```", "```py\nfrom django import forms\nfrom courses.models import Course\nclass CourseEnrollForm(forms.Form):\n    course = forms.ModelChoiceField(\n        queryset=Course.objects.none(),\n        widget=forms.HiddenInput\n    )\n    def __init__ (self, form):\n        super(CourseEnrollForm, self).__init__(*args, **kwargs)\n        self.fields['course'].queryset = Course.objects.all() \n```", "```py\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.views.generic.edit import FormView\nfrom .forms import CourseEnrollForm\nclass StudentEnrollCourseView(LoginRequiredMixin, FormView):\n    course = None\n    form_class = CourseEnrollForm\n    def form_valid(self, form):\n        self.course = form.cleaned_data['course']\n        self.course.students.add(self.request.user)\n        return super().form_valid(form)\n    def get_success_url(self):\n        return reverse_lazy(\n            'student_course_detail', args=[self.course.id]\n        ) \n```", "```py\npath(\n    'enroll-course/',\n    views.StudentEnrollCourseView.as_view(),\n    name='student_enroll_course'\n), \n```", "```py\n**from** **students.forms** **import** **CourseEnrollForm**\nclass CourseDetailView(DetailView):\n    model = Course\n    template_name = 'courses/course/detail.html'\n**def****get_context_data****(****self, **kwargs****):**\n **context =** **super****().get_context_data(**kwargs)**\n **context[****'enroll_form'****] = CourseEnrollForm(**\n **initial={****'course'****:self.****object****}**\n **)**\n**return** **context** \n```", "```py\n{{ object.overview|linebreaks }} \n```", "```py\n{{ object.overview|linebreaks }}\n**{%** **if** **request.user.is_authenticated %}**\n **<form action=****\"{% url \"****student_enroll_course****\" %}\"** **method=****\"post\"****>**\n **{{ enroll_form }}**\n **{% csrf_token %}**\n **<****input****type****=****\"submit\"** **value=****\"Enroll now\"****>**\n **</form>**\n**{%** **else** **%}**\n **<a href=****\"{% url \"****student_registration****\" %}\"****class****=****\"button\"****>**\n **Register to enroll**\n **</a>**\n**{% endif %}** \n```", "```py\nfrom django.views.generic.list import ListView\nfrom courses.models import Course\nclass StudentCourseListView(LoginRequiredMixin, ListView):\n    model = Course\n    template_name = 'students/course/list.html'\ndef get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(students__in=[self.request.user]) \n```", "```py\nfrom django.views.generic.detail import DetailView\nclass StudentCourseDetailView(LoginRequiredMixin, DetailView):\n    model = Course\n    template_name = 'students/course/detail.html'\ndef get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(students__in=[self.request.user])\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        # get course object\n        course = self.get_object()\n        if 'module_id' in self.kwargs:\n            # get current module\n            context['module'] = course.modules.get(\n                id=self.kwargs['module_id']\n            )\n        else:\n            # get first module\n            context['module'] = course.modules.all()[0]\n        return context \n```", "```py\npath(\n    'courses/',\n    views.StudentCourseListView.as_view(),\n    name='student_course_list'\n),\npath(\n    'course/<pk>/',\n    views.StudentCourseDetailView.as_view(),\n    name='student_course_detail'\n),\npath(\n    'course/<pk>/<module_id>/',\n    views.StudentCourseDetailView.as_view(),\n    name='student_course_detail_module'\n), \n```", "```py\ncourse/\n    detail.html\n    list.html \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}My courses{% endblock %}\n{% block content %}\n  <h1>My courses</h1>\n<div class=\"module\">\n    {% for course in object_list %}\n      <div class=\"course-info\">\n<h3>{{ course.title }}</h3>\n<p><a href=\"{% url \"student_course_detail\" course.id %}\">\n        Access contents</a></p>\n</div>\n    {% empty %}\n      <p>\n        You are not enrolled in any courses yet.\n        <a href=\"{% url \"course_list\" %}\">Browse courses</a>\n        to enroll in a course.\n      </p>\n    {% endfor %}\n  </div>\n{% endblock %} \n```", "```py\nfrom django.urls import reverse_lazy\nLOGIN_REDIRECT_URL = reverse_lazy('student_course_list') \n```", "```py\n{% extends \"base.html\" %}\n{% block title %}\n  {{ object.title }}\n{% endblock %}\n{% block content %}\n  <h1>\n    {{ module.title }}\n  </h1>\n<div class=\"contents\">\n<h3>Modules</h3>\n<ul id=\"modules\">\n      {% for m in object.modules.all %}\n        <li data-id=\"{{ m.id }}\" {% if m == module %}class=\"selected\"{% endif %}>\n<a href=\"{% url \"student_course_detail_module\" object.id m.id %}\">\n<span>\n              Module <span class=\"order\">{{ m.order|add:1 }}</span>\n</span>\n<br>\n            {{ m.title }}\n          </a>\n</li>\n      {% empty %}\n        <li>No modules yet.</li>\n      {% endfor %}\n    </ul>\n</div>\n<div class=\"module\">\n    {% for content in module.contents.all %}\n      {% with item=content.item %}\n        <h2>{{ item.title }}</h2>\n        {{ item.render }}\n      {% endwith %}\n    {% endfor %}\n  </div>\n{% endblock %} \n```", "```py\n**from** **django.template.loader** **import** **render_to_string**\nclass ItemBase(models.Model):\n    # ...\n**def****render****(****self****):**\n**return** **render_to_string(**\n**f'courses/content/****{self._meta.model_name}****.html'****,**\n **{****'item'****: self}**\n **)** \n```", "```py\ncontent/\n    text.html\n    file.html\n    image.html\n    video.html \n```", "```py\n{{ item.content|linebreaks }} \n```", "```py\n<p>\n<a href=\"{{ item.file.url }}\" class=\"button\">Download file</a>\n</p> \n```", "```py\n<p>\n<img src=\"img/{{ item.file.url }}\" alt=\"{{ item.title }}\">\n</p> \n```", "```py\npython -m pip install django-embed-video==1.4.9 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'embed_video'****,**\n] \n```", "```py\n{% load embed_video_tags %}\n{% video item.url \"small\" %} \n```", "```py\ndocker pull memcached:1.6.26 \n```", "```py\ndocker run -it --rm --name memcached -p 11211:11211 memcached:1.6.26 -m 64 \n```", "```py\npython -m pip install pymemcache==4.0.0 \n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': 'django.core.cache.backends.memcached.PyMemcacheCache',\n        'LOCATION': '127.0.0.1:11211',\n    }\n} \n```", "```py\nfrom django.core.cache import cache \n```", "```py\nfrom django.core.cache import caches\nmy_cache = caches['alias'] \n```", "```py\npython manage.py shell \n```", "```py\n>>> from django.core.cache import cache\n>>> cache.set('musician', 'Django Reinhardt', 20) \n```", "```py\n>>> cache.get('musician')\n'Django Reinhardt' \n```", "```py\n>>> cache.get('musician') \n```", "```py\n>>> from courses.models import Subject\n>>> subjects = Subject.objects.all()\n>>> cache.set('my_subjects', subjects) \n```", "```py\n>>> cache.get('my_subjects')\n<QuerySet [<Subject: Mathematics>, <Subject: Music>, <Subject: Physics>, <Subject: Programming>]> \n```", "```py\nfrom django.core.cache import cache \n```", "```py\nsubjects = Subject.objects.annotate(\n    total_courses=Count('courses')\n) \n```", "```py\n**subjects = cache.get(****'****all_subjects'****)**\n**if****not** **subjects:**\n    subjects = Subject.objects.annotate(\n        total_courses=Count('courses')\n    )\n **cache.****set****(****'all_subjects'****, subjects)** \n```", "```py\npython -m pip install django-debug-toolbar==4.3.0 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'debug_toolbar'****,**\n] \n```", "```py\nMIDDLEWARE = [\n**'debug_toolbar.middleware.DebugToolbarMiddleware'****,**\n'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] \n```", "```py\nINTERNAL_IPS = [\n    '127.0.0.1',\n] \n```", "```py\npath('__debug__/', include('debug_toolbar.urls')), \n```", "```py\nclass CourseListView(TemplateResponseMixin, View):\n    model = Course\n    template_name = 'courses/course/list.html'\ndef get(self, request, subject=None):\n        subjects = cache.get('all_subjects')\n        if not subjects:\n            subjects = Subject.objects.annotate(\n                total_courses=Count('courses')\n            )\n            cache.set('all_subjects', subjects)\n        **all_courses** = Course.objects.annotate(\n            total_modules=Count('modules')\n        )\n        if subject:\n            subject = get_object_or_404(Subject, slug=subject)\n **key =** **f'subject_****{subject.****id****}****_courses'**\n **courses = cache.get(key)**\n**if****not** **courses:**\n **courses = all_courses.****filter****(subject=subject)**\n **cache.****set****(key, courses)**\n**else****:**\n **courses = cache.get(****'all_courses'****)**\n**if****not** **courses:**\n **courses = all_courses**\n **cache.****set****(****'all_courses'****, courses)**\nreturn self.render_to_response(\n            {\n                'subjects': subjects,\n                'subject': subject,\n                'courses': courses\n            }\n        ) \n```", "```py\ncourses = cache.get('all_courses')\ncourses.filter(subject=subject) \n```", "```py\n{% cache 300 fragment_name %}\n    ...\n{% endcache %} \n```", "```py\n{% load cache %} \n```", "```py\n{% for content in module.contents.all %}\n  {% with item=content.item %}\n    <h2>{{ item.title }}</h2>\n    {{ item.render }}\n  {% endwith %}\n{% endfor %} \n```", "```py\n**{% cache** **600** **module_contents module %}**\n  {% for content in module.contents.all %}\n    {% with item=content.item %}\n      <h2>{{ item.title }}</h2>\n      {{ item.render }}\n    {% endwith %}\n  {% endfor %}\n**{% endcache %}** \n```", "```py\nfrom django.views.decorators.cache import cache_page \n```", "```py\npath(\n    'course/<pk>/',\n **cache_page(****60** ***** **15****)(**views.StudentCourseDetailView.as_view()**)**,\n    name='student_course_detail'\n),\npath(\n    'course/<pk>/<module_id>/',\n **cache_page(****60** ***** **15****)(**views.StudentCourseDetailView.as_view()**)**,\n    name='student_course_detail_module'\n), \n```", "```py\nMIDDLEWARE = [\n    'debug_toolbar.middleware.DebugToolbarMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n**'django.middleware.cache.UpdateCacheMiddleware'****,**\n'django.middleware.common.CommonMiddleware',\n**'django.middleware.cache.FetchFromCacheMiddleware'****,**\n'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] \n```", "```py\nCACHE_MIDDLEWARE_ALIAS = 'default'\nCACHE_MIDDLEWARE_SECONDS = 60 * 15 # 15 minutes\nCACHE_MIDDLEWARE_KEY_PREFIX = 'educa' \n```", "```py\nMIDDLEWARE = [\n    'debug_toolbar.middleware.DebugToolbarMiddleware',\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    **#** 'django.middleware.cache.UpdateCacheMiddleware',\n'django.middleware.common.CommonMiddleware',\n    **#** 'django.middleware.cache.FetchFromCacheMiddleware',\n'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n] \n```", "```py\npython -m pip install redis==5.0.4 \n```", "```py\nCACHES = {\n    'default': {\n        'BACKEND': **'django.core.cache.backends.redis.RedisCache'****,**\n'LOCATION': **'redis://127.0.0.1:6379'****,**\n    }\n} \n```", "```py\ndocker run -it --rm --name redis -p 6379:6379 redis:7.2.4 \n```", "```py\npython -m pip install django-redisboard==8.4.0 \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'redisboard'****,**\n] \n```", "```py\npython manage.py migrate redisboard \n```"]