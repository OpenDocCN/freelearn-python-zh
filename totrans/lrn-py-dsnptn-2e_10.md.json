["```py\nfrom abc import abstractmethod, ABCMeta\n\nclass State(metaclass=ABCMeta):\n\n    @abstractmethod\n    def Handle(self):\n        pass\n\nclass ConcreteStateB(State):\n    def Handle(self):\n        print(\"ConcreteStateB\")\n\nclass ConcreteStateA(State):\n    def Handle(self):\n        print(\"ConcreteStateA\")\n\nclass Context(State):\n\n    def __init__(self):\n        self.state = None\n\n    def getState(self):\n        return self.state\n\n    def setState(self, state):\n        self.state = state\n\n    def Handle(self):\n        self.state.Handle()\n\ncontext = Context()\nstateA = ConcreteStateA()\nstateB = ConcreteStateB()\n\ncontext.setState(stateA)\ncontext.Handle()\n```", "```py\nfrom abc import abstractmethod, ABCMeta\n\nclass State(metaclass=ABCMeta):\n\n    @abstractmethod\n    def doThis(self):\n        pass\n\nclass StartState (State):\n    def doThis(self):\n        print(\"TV Switching ON..\")\n\nclass StopState (State):\n    def doThis(self):\n        print(\"TV Switching OFF..\")\n\nclass TVContext(State):\n\n    def __init__(self):\n        self.state = None\n\n    def getState(self):\n        return self.state\n\n    def setState(self, state):\n        self.state = state\n\n    def doThis(self):\n        self.state.doThis()\n\ncontext = TVContext()\ncontext.getState()\nstart = StartState()\nstop = StopState()\n\ncontext.setState(stop)\ncontext.doThis()\n```", "```py\nclass ComputerState(object):\n    name = \"state\"\n    allowed = []\n\n    def switch(self, state):\n        if state.name in self.allowed:\n            print('Current:',self,' => switched to new state',state.name)\n            self.__class__ = state\n        else:\n            print('Current:',self,' => switching to',state.name,'not possible.')\n\n    def __str__(self):\n        return self.name\n```", "```py\nclass Off(ComputerState):\n    name = \"off\"\n    allowed = ['on']\n\nclass On(ComputerState):\n    name = \"on\"\n    allowed = ['off','suspend','hibernate']\n\nclass Suspend(ComputerState):\n    name = \"suspend\"\n    allowed = ['on']\n\nclass Hibernate(ComputerState):\n    name = \"hibernate\"\n    allowed = ['on']\n```", "```py\nclass Computer(object):\n    def __init__(self, model='HP'):\n        self.model = model\n        self.state = Off()\n\n    def change(self, state):\n        self.state.switch(state)\n```", "```py\nif __name__ == \"__main__\":\n    comp = Computer()\n    # Switch on\n    comp.change(On)\n    # Switch off\n    comp.change(Off)\n\n    # Switch on again\n    comp.change(On)\n    # Suspend\n    comp.change(Suspend)\n    # Try to hibernate - cannot!\n    comp.change(Hibernate)\n    # switch on back\n    comp.change(On)\n    # Finally off\n    comp.change(Off)\n```"]