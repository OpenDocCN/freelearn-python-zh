["```py\nsuper().__init__(root)\n```", "```py\n'Top Level Menu Name – Menu Item Name / Accelrator /Commandcallback/Underlinenumber'\n```", "```py\nmenu_items = (\n'File - &New/Ctrl+N/self.new_file, &Open/Ctrl+O/self.open_file',\n'Edit - Undo/Ctrl+Z/self.undo', \n'sep',\n'Options/Ctrl+T/self.options',\n'About - About//self.about'\n)\n```", "```py\ndef build_menu(self, menu_definition):\n  menu_bar = tk.Menu(self.root)\n  for definition in menu_definition:\n    menu = tk.Menu(menu_bar, tearoff=0)\n    top_level_menu, pull_down_menus = definition.split('-')\n    menu_items = map(str.strip, pull_down_menus.split(','))\n    for item in menu_items:\n      self._add_menu_command(menu, item)\n    menu_bar.add_cascade(label=top_level_menu, menu=menu)\n  self.root.config(menu=menu_bar)\n\ndef _add_menu_command(self, menu, item):\n  if item == 'sep':\n    menu.add_separator()\n  else:\n    menu_label, accelrator_key, command_callback =item.split('/')\n    try:\n      underline = menu_label.index('&')\n      menu_label = menu_label.replace('&', '', 1)\n    except ValueError:\n      underline = None\n    menu.add_command(label=menu_label,underline=underline, \n      accelerator=accelrator_key,\n        command=eval(command_callback))\n```", "```py\nimport framework\n\nclass PaintApplication(framework.Framework):\n\n  def __init__(self, root):\n    super().__init__(root)\n    self.create_gui()\n```", "```py\ndef create_gui(self):\n  self.create_menu()\n  self.create_top_bar()\n  self.create_tool_bar()\n  self.create_drawing_canvas()\n  self.bind_menu_accelrator_keys()\n```", "```py\non_new_file_menu_clicked()\non_save_menu_clicked()\non_save_as_menu_clicked()\non_close_menu_clicked()\non_canvas_zoom_out_menu_clicked()\non_canvas_zoom_in_menu_clicked()\non_undo_menu_clicked()\non_about_menu_clicked() \n```", "```py\nstart_x, start_y = 0, 0\nend_x, end_y = 0, 0\n```", "```py\n canvas_x = canvas.canvasx(event.x)\n canvas_y = canvas.canvasy(event.y) \n```", "```py\ndef bind_mouse(self):\n  self.canvas.bind(\"<Button-1>\", self.on_mouse_button_pressed)\n  self.canvas.bind( \"<Button1-Motion>\", \n                   self.on_mouse_button_pressed_motion)\n  self.canvas.bind( \"<Button1-ButtonRelease>\",  \n    self.on_mouse_button_released)\n  self.canvas.bind(\"<Motion>\", self.on_mouse_unpressed_motion)\n\n```", "```py\ndef on_mouse_button_pressed(self, event):\n  self.start_x = self.end_x = self.canvas.canvasx(event.x)\n  self.start_y = self.end_y = self.canvas.canvasy(event.y)\n  print(\"start_x, start_y = \", self.start_x, self.start_y)\n\ndef on_mouse_button_pressed_motion(self, event):\n  self.end_x = self.canvas.canvasx(event.x)\n  self.end_y = self.canvas.canvasy(event.y)\n\ndef on_mouse_button_released(self, event):\n  self.end_x = self.canvas.canvasx(event.x)\n  self.end_y = self.canvas.canvasy(event.y)\n  print(\"end_x, end_y = \", self.end_x, self.end_y)\n```", "```py\ntool_bar_functions = (\n \"draw_line\", \"draw_oval\", \"draw_rectangle\", \"draw_arc\",\n \"draw_triangle\", \"draw_star\", \"draw_irregular_line\",\n \"draw_super_shape\", \"draw_text\", \"delete_item\",\n \"fill_item\", \"duplicate_item\", \"move_to_top\",\n \"drag_item\", \"enlarge_item_size\", \"reduce_item_size\"\n )\n```", "```py\n getattr(self, self.toolbar_functions[index]) \n```", "```py\nselected_tool_bar_function = tool_bar_functions[0] \n```", "```py\ndef create_tool_bar_buttons(self):\n  for index, name in enumerate(self.tool_bar_functions):\n    icon = tk.PhotoImage(file='icons/' + name + '.gif')\n    self.button = tk.Button(self.tool_bar, image=icon, command=lambda\n index=index: self.on_tool_bar_button_clicked(index))\n    self.button.grid(row=index // 2, column=1 + index % 2, sticky='nsew')\n    self.button.image = icon\n```", "```py\ndef on_tool_bar_button_clicked(self, button_index):\n  self.selected_tool_bar_function = self.tool_bar_functions[button_index]\n  self.remove_options_from_top_bar()\n  self.display_options_in_the_top_bar()\n```", "```py\ndef remove_options_from_top_bar(self):\n  for child in self.top_bar.winfo_children():\n    child.destroy()\n```", "```py\ndef display_options_in_the_top_bar(self):\n  self.show_selected_tool_icon_in_top_bar(self.selected_tool_bar_function)\n```", "```py\ncanvas.create_rectangle(10, 10, 50, 50, tags=\"foo\")\ncanvas.itemconfig(item_specifier, tags=\"spam\")\ncanvas.addtag_withtag(\"spam\", \"baz\")\n```", "```py\ncanvas.itemconfig(item_specifier, tags=(\"tag_A\", \"tag_B\"))\n```", "```py\ncanvas.gettags(item_handle)\n```", "```py\ncanvas.find_withtag(\"spam\")\n```", "```py\ndef draw_line(self):\n  self.current_item = self.canvas.create_line(self.start_x, \n    self.start_y, self.end_x,                                \n      self.end_y, fill=self.fill, width=self.width, arrow=self.arrow, \n        dash=self.dash)\n```", "```py\ndef draw_oval(self):\n self.current_item = self.canvas.create_oval(self.start_x, \n   self.start_y, self.end_x,  \n     self.end_y, outline=self.outline, fill=self.fill,width=self.width)\n```", "```py\ndef draw_triangle(self):\n  dx = self.end_x - self.start_x\n  dy = self.end_y - self.start_y\n  z = complex(dx, dy)\n  radius, angle0 = cmath.polar(z)\n  edges = 3\n  points = list()\n  for edge in range(edges):\n    angle = angle0 + edge * (2 * math.pi) / edges\n    points.append(self.start_x + radius * math.cos(angle))\n    points.append(self.start_y + radius * math.sin(angle))\n  self.current_item = self.canvas.create_polygon(points, \n    outline=self.outline,  \n      fill=self.fill, width=self.width)\n```", "```py\nx = r*cosσ and y = r*sinσ \n```", "```py\nnumber_of_spokes = 5\n```", "```py\n\n def draw_star(self):\n   dx = self.end_x - self.start_x\n   dy = self.end_y - self.start_y\n   z = complex(dx, dy)\n   radius_out, angle0 = cmath.polar(z)\n   radius_in = radius_out / 2 # this is the spoke ratio\n   points = list()\n   for edge in range(self.number_of_spokes):\n      # outer circle angle\n      angle = angle0 + edge * (2 * math.pi) / self.number_of_spokes  \n      # x coordinate (outer circle)\n      points.append(self.start_x + radius_out * math.cos(angle)) \n      # y coordinate (outer circle)\n      points.append(self.start_y + radius_out * math.sin(angle)) \n      # inner circle angle\n      angle += math.pi / self.number_of_spokes\n      # x coordinate (inner circle)\n      points.append(self.start_x + radius_in * math.cos(angle))\n      # y coordinate (inner circle)\n      points.append(self.start_y + radius_in * math.sin(angle))\n   self.current_item = self.canvas.create_polygon(points, outline=self.outline, fill=self.fill, width=self.width)\n```", "```py\ndef execute_selected_method(self):\n  self.current_item = None\n  func = getattr(self, self.selected_tool_bar_function, \n    self.function_not_defined)\n  func()\n```", "```py\ndef function_not_defined(self):\n   pass\n```", "```py\ndef on_mouse_button_pressed_motion(self, event):\n  self.end_x = self.canvas.canvasx(event.x)\n  self.end_y = self.canvas.canvasy(event.y)\n  self.canvas.delete(self.current_item)\n  self.execute_selected_method()\n```", "```py\ndef create_color_palette(self):\n  self.color_palette = Canvas(self.tool_bar, height=55, width=55)\n  self.color_palette.grid(row=10, column=1, columnspan=2, pady=5, padx=3)\n  self.background_palette = self.color_palette.create_rectangle( 15, \n    15, 48, 48,       \n      outline=self.background, fill=self.background)\n  self.foreground_palette = self.color_palette.create_rectangle(\n    1, 1, 33, 33, outline=self.foreground, fill=self.foreground)\n  self.bind_color_palette()\n```", "```py\ndef bind_color_palette(self):\n   self.color_palette.tag_bind(self.background_palette, \n                              \"<Button-1>\", self.set_background_color)\n   self.color_palette.tag_bind(self.foreground_palette, \n                              \"<Button-1>\", self.set_foreground_color)\n```", "```py\ntag_bind(item, event=None, callback, add=None)\n```", "```py\nfrom tkinter import colorchooser\n```", "```py\ndef get_color_from_chooser(self, initial_color, color_type=\"a\"):\n  color = colorchooser.askcolor(color=initial_color, title=\"select {}            \n                                    color\".format(color_type))[-1]\n  if color:\n    return color\n  else:  # dialog has been cancelled\n    return initial_color\n```", "```py\n((217.84765625, 12.046875, 217.84765625), '#d90cd9') \n```", "```py\ndef set_foreground_color(self, event=None):\n  self.foreground = self.get_color_from_chooser(self.foreground, \n    \"foreground\")\n  self.color_palette.itemconfig(self.foreground_palette, width=0, \n    fill=self.foreground)\n\ndef set_background_color(self, event=None):\n  self.background = self.get_color_from_chooser( self.background,  \n    \"background\")\n  self.color_palette.itemconfig(self.background_palette, width=0, \n    fill=self.background)\n```", "```py\ndef create_current_coordinate_label(self):\n  self.current_coordinate_label = Label(self.tool_bar, text='x:0\\ny: 0 ')\n  self.current_coordinate_label.grid( row=13, column=1, columnspan=2, \n    pady=5, padx=1, sticky='w')\n\ndef show_current_coordinates(self, event=None):\n  x_coordinate = event.x\n  y_coordinate = event.y\n  coordinate_string = \"x:{0}\\ny:{1}\".format(x_coordinate, y_coordinate)\n  self.current_coordinate_label.config(text=coordinate_string)\n```", "```py\ndef on_mouse_unpressed_motion(self, event):\n self.show_current_coordinates(event)\n```", "```py\ndef display_options_in_the_top_bar(self):\n  self.show_selected_tool_icon_in_top_bar(self.selected_tool_bar_function)\n  options_function_name = \n    \"{}_options\".format(self.selected_tool_bar_function)\n  func = getattr(self, options_function_name, self.function_not_defined)\n  func()\n```", "```py\ndef create_fill_options_combobox(self):\n  Label(self.top_bar, text='Fill:').pack(side=\"left\")\n  self.fill_combobox = ttk.Combobox(self.top_bar, state='readonly', \n    width=5)\n  self.fill_combobox.pack(side=\"left\")\n  self.fill_combobox['values'] = ('none', 'fg', 'bg', 'black', 'white')\n  self.fill_combobox.bind('<<ComboboxSelected>>', self.set_fill)\n  self.fill_combobox.set(self.fill)\n```", "```py\ndef set_fill(self, event=None):\n  fill_color = self.fill_combobox.get()\n  if fill_color == 'none':\n    self.fill = '' # transparent\n  elif fill_color == 'fg':\n    self.fill = self.foreground\n  elif fill_color == 'bg':\n   self.fill = self.background\n  else:\n   self.fill = fill_color\n```", "```py\ndef draw_line_options(self):\n  self.create_fill_options_combobox()\n  self.create_width_options_combobox()\n  self.create_arrow_options_combobox()\n  self.create_dash_options_combobox() \n```", "```py\ndef try_to_set_fill_after_palette_change(self):\n  try:\n    self.set_fill()\n  except:\n    pass\n\ndef try_to_set_outline_after_palette_change(self):\n  try:\n   self.set_outline()\n  except:\n   pass\n\n```", "```py\nself.show_selected_tool_icon_in_top_bar(\"draw_line\")\nself.draw_line_options() \n```", "```py\ndef draw_irregular_line(self):\n self.current_item = self.canvas.create_line(\n   self.start_x, self.start_y, self.end_x, self.end_y, fill=self.fill, \n     width=self.width)\n self.canvas.bind(\"<B1-Motion>\", self.draw_irregular_line_update_x_y)\n\ndef draw_irregular_line_update_x_y(self, event=None):\n self.start_x, self.start_y = self.end_x, self.end_y\n self.end_x, self.end_y = event.x, event.y\n self.draw_irregular_line()\n```", "```py\ndef draw_irregular_line_options(self):\n  self.create_fill_options_combobox()\n  self.create_width_options_combobox() \n```", "```py\ndef get_super_shape_points(self, a, b, m, n1, n2, n3):\n  # https://en.wikipedia.org/wiki/Superformula\n  points = []\n  for i in self.float_range(0, 2 * math.pi, 0.01):\n   raux = (abs(1 / a * abs(math.cos(m * i / 4))) ** n2 + \\\n           abs(1 / b * abs(math.sin(m * i / 4))) ** n3)\n   r = abs(raux) ** (-1 / n1)\n   x = self.end_x + r * math.cos(i)\n   y = self.end_y + r * math.sin(i)\n   points.extend((x, y))\nreturn points\n```", "```py\ndef float_range(self, x, y, step):\n  while x < y:\n   yield x\n   x += step\n```", "```py\ndef draw_super_shape(self):\n  points = self.get_super_shape_points \n    (*super_shapes[self.selected_super_shape])\n  self.current_item = self.canvas.create_polygon(points, \n    outline=self.outline,  \n      fill=self.fill, width=self.width)\n```", "```py\nsuper_shapes = {\n \"shape A\": (1.5, 1.5, 5, 2, 7, 7),\n \"shape B\": (1.5, 1.5, 3, 5, 18, 18),\n \"shape C\": (1.4, 1.4, 4, 2, 4, 13),\n \"shape D\": (1.6, 1.6, 7, 3, 4, 17),\n \"shape E\": (1.9, 1.9, 7, 3, 6, 6),\n \"shape F\": (4, 4, 19, 9, 14, 11),\n \"shape G\": (12, 12, 1, 15, 20, 3),\n \"shape H\": (1.5, 1.5, 8, 1, 1, 8),\n \"shape I\": (1.2, 1.2, 8, 1, 5, 8),\n \"shape J\": (8, 8, 3, 6, 6, 6),\n \"shape K\": (8, 8, 2, 1, 1, 1),\n \"shape L\": (1.1, 1.1, 16, 0.5, 0.5, 16)\n }\n```", "```py\nselected_super_shape = \"shape A\" \n```", "```py\ndef create_super_shapes_options_combobox(self):\n  Label(self.top_bar, text='Select shape:').pack(side=\"left\")\n  self.super_shape_combobox = ttk.Combobox(self.top_bar, \n    state='readonly', width=8)\n  self.super_shape_combobox.pack(side=\"left\")\n  self.super_shape_combobox['values'] = sorted(tuple(shape for shape in  \n    super_shapes.keys()))\n  self.super_shape_combobox.bind('<<ComboboxSelected>>', \n    self.set_selected_super_shape)\n  self.super_shape_combobox.set(self.selected_super_shape)\n```", "```py\ndef set_selected_super_shape(self, event=None):\n  self.selected_super_shape = self.super_shape_combobox.get()\n```", "```py\ndef draw_super_shape_options(self):\n  self.create_super_shapes_options_combobox()\n  self.create_fill_options_combobox()\n  self.create_outline_options_combobox()\n  self.create_width_options_combobox()\n```", "```py\ndef draw_text_options(self):\n  Label(self.top_bar, text='Text:').pack(side=\"left\")\n  self.text_entry_widget = Entry(self.top_bar, width=20)\n  self.text_entry_widget.pack(side=\"left\")\n  Label(self.top_bar, text='Font size:').pack(side=\"left\")\n  self.font_size_spinbox = Spinbox(self.top_bar, from_=14, to=100, width=3)\n  self.font_size_spinbox.pack(side=\"left\")\n  self.create_fill_options_combobox()\n  self.create_text_button = Button(self.top_bar,                  \n    text=\"Go\", command=self.on_create_text_button_clicked)\n  self.create_text_button.pack(side=\"left\", padx=5)\n```", "```py\ndef on_create_text_button_clicked(self):\n  entered_text = self.text_entry_widget.get()\n  center_x = self.canvas.winfo_width()/2\n  center_y = self.canvas.winfo_height()/2\n  font_size = self.font_size_spinbox.get()\n  self.canvas.create_text(center_x, center_y, font=(\"\", font_size),   \n    text=entered_text, fill=self.fill)\n```", "```py\ndef delete_item(self):\n  self.current_item = None\n  self.canvas.delete(\"current\") \n```", "```py\ndef fill_item(self):\n  try:\n    self.canvas.itemconfig(\"current\", fill=self.fill, outline=self.outline)\n  except TclError:\n     self.canvas.itemconfig(\"current\", fill=self.fill)\n```", "```py\ndef fill_item_options(self):\n  self.create_fill_options_combobox()\n  self.create_outline_options_combobox()\n```", "```py\n{'outline': ('outline', '', '', 'black', 'red'), 'outlinestipple':\n ('outlinestipple', '', '', '', ''), 'activestipple':\n ('activestipple', '', '', '', ''), 'state': ('state', '', '',\n '', ''), 'offset': ('offset', '', '', '0,0', '0,0'),\n 'activefill': ('activefill', '', '', '', ''), 'disabledwidth':\n ('disabledwidth', '', '', '0.0', '0'), 'disabledoutlinestipple':\n ('disabledoutlinestipple', '', '', '', ''), 'outlineoffset':\n ('outlineoffset', '', '', '0,0', '0,0'), 'width': ('width', '',\n '', '1.0', '2.0'), 'disabledfill': ('disabledfill', '', '', '',\n ''), 'disabledoutline': ('disabledoutline', '', '', '', ''),\n 'dash': ('dash', '', '', '', ''), 'disableddash':\n ('disableddash', '', '', '', ''), 'disabledstipple':\n ('disabledstipple', '', '', '', ''), 'tags': ('tags', '', '',\n '', 'current'), 'stipple': ('stipple', '', '', '', ''),\n 'activewidth': ('activewidth', '', '', '0.0', '0.0'),\n 'activedash': ('activedash', '', '', '', ''), 'dashoffset':\n ('dashoffset', '', '', '0', '0'), 'activeoutlinestipple':\n ('activeoutlinestipple', '', '', '', ''), 'activeoutline':\n ('activeoutline', '', '', '', ''), 'fill': ('fill', '', '', '',\n 'red')}\n```", "```py\ndef get_all_configurations_for_item(self):\n  configuration_dict = {}\n  for key, value in self.canvas.itemconfig(\"current\").items():\n      if value[-1] and value[-1] not in [\"0\", \"0.0\", \"0,0\", \"current\"]:\n         configuration_dict[key] = value[-1]\n return configuration_dict\n```", "```py\ndef duplicate_item(self):\n  try:\n     function_name = \"create_\" + self.canvas.type(\"current\")\n  except TypeError:\n     return\n  coordinates = tuple(map(lambda i: i+10, self.canvas.coords(\"current\")))\n  configurations = self.get_all_configurations_for_item()\n   self.canvas_function_wrapper(function_name, coordinates, configurations)\n```", "```py\ndef canvas_function_wrapper(self, function_name, *arg, **kwargs):\n  func = getattr(self.canvas, function_name)\n  func(*arg, **kwargs) \n```", "```py\ncoordinates = tuple(map(lambda i: i+10, self.canvas.coords(\"current\")))\n```", "```py\ndef move_to_top(self):\n  self.current_item = None\n  self.canvas.tag_raise(\"current\")\n```", "```py\ndef drag_item(self):\n self.canvas.move(\"current\", self.end_x - self.start_x, self.end_y -  self.start_y)\n self.canvas.bind(\"<B1-Motion>\", self.drag_item_update_x_y)\n\ndef drag_item_update_x_y(self, event):\n self.start_x, self.start_y = self.end_x, self.end_y\n self.end_x, self.end_y = event.x, event.y\n self.drag_item()\n```", "```py\ndef enlarge_item_size(self):\n  self.current_item = None\n  if self.canvas.find_withtag(\"current\"):\n    self.canvas.scale(\"current\", self.end_x, self.end_y, 1.2, 1.2)\n    self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))\n\ndef reduce_item_size(self):\n  self.current_item = None\n  if self.canvas.find_withtag(\"current\"):\n    self.canvas.scale(\"current\", self.end_x, self.end_y, .8, .8)\n    self.canvas.config(scrollregion=self.canvas.bbox(tk.ALL))\n```", "```py\ndef on_new_file_menu_clicked(self, event=None):\n  self.start_new_project()\n\ndef start_new_project(self):\n  self.canvas.delete(ALL)\n  self.canvas.config(bg=\"#ffffff\")\n  self.root.title('untitled')\n```", "```py\ndef actual_save(self):\n  self.canvas.postscript(file=self.file_name, colormode='color')\n  self.root.title(self.file_name)\n```", "```py\ncanvas.find(\"all\") \n```", "```py\ndef on_undo_menu_clicked(self, event=None):\n   self.undo()\n\ndef undo(self):\n  items_stack = list(self.canvas.find(\"all\"))\n  try:\n    last_item_id = items_stack.pop()\n  except IndexError:\n    return\n  self.canvas.delete(last_item_id)\n\n```", "```py\nfind_closest(x, y, halo=None, start=None) \n```", "```py\nfind_overlapping(x1, y1, x2, y2) \n```", "```py\ndef canvas_zoom_in(self):\n  self.canvas.scale(\"all\", 0, 0, 1.2, 1.2)\n  self.canvas.config(scrollregion=self.canvas.bbox(ALL))\n```", "```py\n>>> import tkinter\n>>>  help(tkinter.Canvas)\n```"]