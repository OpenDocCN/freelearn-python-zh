["```py\nGET http://localhost:8000/competitions/ \n```", "```py\ncd ~/HillarDjangoREST/01/restful01\n```", "```py\ncd /d %USERPROFILE%\\HillarDjangoREST\\01\\restful01\n```", "```py\ncd /d $env:USERPROFILE\\HillarDjangoREST\\01\\restful01\n\n```", "```py\n    python manage.py startapp drones\n```", "```py\nfrom django.apps import AppConfig \n\nclass DronesConfig(AppConfig): \n    name = 'drones'\n```", "```py\n'toys.apps.ToysConfig', \n```", "```py\n'drones.apps.DronesConfig',\n```", "```py\nINSTALLED_APPS = [ \n    'django.contrib.admin', \n    'django.contrib.auth', \n    'django.contrib.contenttypes', \n    'django.contrib.sessions', \n    'django.contrib.messages', \n    'django.contrib.staticfiles', \n    # Django REST framework \n    'rest_framework', \n    # Drones application \n 'drones.apps.DronesConfig', \n] \n```", "```py\nfrom django.db import models \n\nclass DroneCategory(models.Model): \n    name = models.CharField(max_length=250) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name \n\nclass Drone(models.Model): \n    name = models.CharField(max_length=250) \n    drone_category = models.ForeignKey( \n        DroneCategory, \n        related_name='drones', \n        on_delete=models.CASCADE) \n    manufacturing_date = models.DateTimeField() \n    has_it_competed = models.BooleanField(default=False) \n    inserted_timestamp = models.DateTimeField(auto_now_add=True) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name \n\nclass Pilot(models.Model): \n    MALE = 'M' \n    FEMALE = 'F' \n    GENDER_CHOICES = ( \n        (MALE, 'Male'), \n        (FEMALE, 'Female'), \n    ) \n    name = models.CharField(max_length=150, blank=False, default='') \n    gender = models.CharField( \n        max_length=2, \n        choices=GENDER_CHOICES, \n        default=MALE, \n    ) \n    races_count = models.IntegerField() \n    inserted_timestamp = models.DateTimeField(auto_now_add=True) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name \n\nclass Competition(models.Model): \n    pilot = models.ForeignKey( \n        Pilot, \n        related_name='competitions', \n        on_delete=models.CASCADE) \n    drone = models.ForeignKey( \n        Drone, \n        on_delete=models.CASCADE) \n    distance_in_feet = models.IntegerField() \n    distance_achievement_date = models.DateTimeField() \n\n    class Meta: \n        # Order by distance in descending order \n        ordering = ('-distance_in_feet',)\n```", "```py\ndrone_category = models.ForeignKey( \n    DroneCategory,  \n    related_name='drones',  \n    on_delete=models.CASCADE) \n```", "```py\npilot = models.ForeignKey( \n    Pilot,  \n    related_name='competitions',  \n    on_delete=models.CASCADE) \n```", "```py\ndrone = models.ForeignKey( \n    Drone,  \n    on_delete=models.CASCADE) \n```", "```py\ncreatedb drones\n```", "```py\nsudo -u postgres createdb drones  \n```", "```py\npsql  \n```", "```py\nsudo -u postgres psql  \n```", "```py\nsudo -u psql \n```", "```py\nCREATE ROLE username WITH LOGIN PASSWORD 'password';\nGRANT ALL PRIVILEGES ON DATABASE drones TO username;\nALTER USER username CREATEDB;\n\\q  \n```", "```py\nCREATE ROLE\nGRANT\nALTER ROLE  \n```", "```py\nDATABASES = { \n    'default': { \n        'ENGINE': 'django.db.backends.sqlite3', \n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'), \n    } \n} \n```", "```py\nDATABASES = { \n    'default': { \n        'ENGINE': 'django.db.backends.postgresql', \n        # Replace drones with your desired database name \n        'NAME': 'drones', \n        # Replace username with your desired user name \n        'USER': 'username', \n        # Replace password with your desired password \n        'PASSWORD': 'password', \n        # Replace 127.0.0.1 with the PostgreSQL host \n        'HOST': '127.0.0.1', \n        # Replace 5432 with the PostgreSQL configured port \n        # in case you aren't using the default port \n        'PORT': '5432', \n    } \n}\n```", "```py\nfrom django.conf.urls import url, include \n\nurlpatterns = [ \n] \n```", "```py\nexport PATH=$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin  \n```", "```py\npip install psycopg2  \n```", "```py\nCollecting psycopg2\nInstalling collected packages: psycopg2\nSuccessfully installed psycopg2-2.7.3.2  \n```", "```py\npython manage.py makemigrations drones  \n```", "```py\nMigrations for 'drones':\ndrones/migrations/0001_initial.py\n- Create model Competition\n- Create model Drone\n- Create model DroneCategory\n- Create model Pilot\n- Add field drone_category to drone\n- Add field drone to competition\n- Add field pilot to competition \n```", "```py\n# -*- coding: utf-8 -*- \n# Generated by Django 1.11.5 on 2017-11-02 02:55 \nfrom __future__ import unicode_literals \n\nfrom django.db import migrations, models \nimport django.db.models.deletion \n\nclass Migration(migrations.Migration): \n\n    initial = True \n\n    dependencies = [ \n    ] \n\n    operations = [ \n        migrations.CreateModel( \n            name='Competition', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('distance_in_feet', models.IntegerField()), \n                ('distance_achievement_date', models.DateTimeField()), \n            ], \n            options={ \n                'ordering': ('-distance_in_feet',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='Drone', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('name', models.CharField(max_length=250)), \n                ('manufacturing_date', models.DateTimeField()), \n                ('has_it_competed', models.BooleanField(default=False)), \n                ('inserted_timestamp', models.DateTimeField(auto_now_add=True)), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='DroneCategory', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('name', models.CharField(max_length=250)), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='Pilot', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('name', models.CharField(default='', max_length=50)), \n                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=2)), \n                ('races_count', models.IntegerField()), \n                ('inserted_timestamp', models.DateTimeField(auto_now_add=True)), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n        migrations.AddField( \n            model_name='drone', \n            name='drone_category', \n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='drones', to='drones.DroneCategory'), \n        ), \n        migrations.AddField( \n            model_name='competition', \n            name='drone', \n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='drones.Drone'), \n        ), \n        migrations.AddField( \n            model_name='competition', \n            name='pilot', \n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='competitions', to='drones.Pilot'), \n        ), \n    ] \n```", "```py\npython manage.py migrate\n```", "```py\nOperations to perform:\nApply all migrations: admin, auth, contenttypes, drones, sessions\n    Running migrations:\n      Applying contenttypes.0001_initial... OK\n      Applying auth.0001_initial... OK\n      Applying admin.0001_initial... OK\n      Applying admin.0002_logentry_remove_auto_add... OK\n      Applying contenttypes.0002_remove_content_type_name... OK\n      Applying auth.0002_alter_permission_name_max_length... OK\n      Applying auth.0003_alter_user_email_max_length... OK\n      Applying auth.0004_alter_user_username_opts... OK\n      Applying auth.0005_alter_user_last_login_null... OK\n      Applying auth.0006_require_contenttypes_0002... OK\n      Applying auth.0007_alter_validators_add_error_messages... OK\n      Applying auth.0008_alter_user_username_max_length... OK\n      Applying drones.0001_initial... OK\n      Applying sessions.0001_initial... OK\n\n```", "```py\npsql --username=username --dbname=drones --command=\"\\dt\"\n```", "```py\n                       List of relations\n    Schema |            Name            | Type  |  Owner \n    --------+----------------------------+-------+----------\n     public | auth_group                 | table | username\n     public | auth_group_permissions     | table | username\n     public | auth_permission            | table | username\n     public | auth_user                  | table | username\n     public | auth_user_groups           | table | username\n     public | auth_user_user_permissions | table | username\n     public | django_admin_log           | table | username\n     public | django_content_type        | table | username\n     public | django_migrations          | table | username\n     public | django_session             | table | username\n     public | drones_competition         | table | username\n     public | drones_drone               | table | username\n     public | drones_dronecategory       | table | username\n     public | drones_pilot               | table | username\n    (14 rows)\n\n```", "```py\n    psql --username=username --dbname=drones --command=\"SELECT * FROM drones_dronecategory;\"\n    psql --username=username --dbname=drones --command=\"SELECT * FROM drones_drone;\"\n    psql --username=username --dbname=drones --command=\"SELECT * FROM drones_pilot;\"\n    psql --username=username --dbname=drones --command=\"SELECT * FROM drones_competition;\"\n```", "```py\nfrom rest_framework import serializers \nfrom drones.models import DroneCategory \nfrom drones.models import Drone \nfrom drones.models import Pilot \nfrom drones.models import Competition \nimport drones.views \n\nclass DroneCategorySerializer(serializers.HyperlinkedModelSerializer): \n    drones = serializers.HyperlinkedRelatedField( \n        many=True, \n        read_only=True, \n        view_name='drone-detail') \n\n    class Meta: \n        model = DroneCategory \n        fields = ( \n            'url', \n            'pk', \n            'name', \n            'drones') \n```", "```py\nclass DroneSerializer(serializers.HyperlinkedModelSerializer): \n    # Display the category name \n    drone_category = serializers.SlugRelatedField(queryset=DroneCategory.objects.all(), slug_field='name') \n\n    class Meta: \n        model = Drone \n        fields = ( \n            'url', \n            'name', \n            'drone_category', \n            'manufacturing_date', \n            'has_it_competed', \n            'inserted_timestamp') \n```", "```py\nclass CompetitionSerializer(serializers.HyperlinkedModelSerializer):\n    # Display all the details for the related drone\n    drone = DroneSerializer()\n    class Meta:\n        model = Competition\n        fields = (\n            'url',\n            'pk',\n            'distance_in_feet',\n            'distance_achievement_date',\n            'drone')\n```", "```py\nclass PilotSerializer(serializers.HyperlinkedModelSerializer): \n    competitions = CompetitionSerializer(many=True, read_only=True) \n    gender = serializers.ChoiceField( \n        choices=Pilot.GENDER_CHOICES) \n    gender_description = serializers.CharField( \n        source='get_gender_display',  \n        read_only=True) \n\n    class Meta: \n        model = Pilot \n        fields = ( \n            'url', \n            'name', \n            'gender', \n            'gender_description', \n            'races_count', \n            'inserted_timestamp', \n            'competitions') \n```", "```py\nclass PilotCompetitionSerializer(serializers.ModelSerializer): \n    # Display the pilot's name \n    pilot = serializers.SlugRelatedField(queryset=Pilot.objects.all(), slug_field='name') \n    # Display the drone's name \n    drone = serializers.SlugRelatedField(queryset=Drone.objects.all(), slug_field='name') \n\n    class Meta: \n        model = Competition \n        fields = ( \n            'url', \n            'pk', \n            'distance_in_feet', \n            'distance_achievement_date', \n            'pilot', \n            'drone') \n```", "```py\nclass ListCreateAPIView(mixins.ListModelMixin, \n                        mixins.CreateModelMixin, \n                        GenericAPIView): \n```", "```py\nclass RetrieveUpdateDestroyAPIView(mixins.RetrieveModelMixin, \n                                   mixins.UpdateModelMixin, \n                                   mixins.DestroyModelMixin, \n                                   GenericAPIView): \n```", "```py\nfrom django.shortcuts import render \nfrom rest_framework import generics \nfrom rest_framework.response import Response \nfrom rest_framework.reverse import reverse \nfrom drones.models import DroneCategory \nfrom drones.models import Drone \nfrom drones.models import Pilot \nfrom drones.models import Competition \nfrom drones.serializers import DroneCategorySerializer \nfrom drones.serializers import DroneSerializer \nfrom drones.serializers import PilotSerializer \nfrom drones.serializers import PilotCompetitionSerializer \n\nclass DroneCategoryList(generics.ListCreateAPIView): \n    queryset = DroneCategory.objects.all() \n    serializer_class = DroneCategorySerializer \n    name = 'dronecategory-list' \n\nclass DroneCategoryDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = DroneCategory.objects.all() \n    serializer_class = DroneCategorySerializer \n    name = 'dronecategory-detail' \n\nclass DroneList(generics.ListCreateAPIView): \n    queryset = Drone.objects.all() \n    serializer_class = DroneSerializer \n    name = 'drone-list' \n\nclass DroneDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Drone.objects.all() \n    serializer_class = DroneSerializer \n    name = 'drone-detail' \n\nclass PilotList(generics.ListCreateAPIView): \n    queryset = Pilot.objects.all() \n    serializer_class = PilotSerializer \n    name = 'pilot-list' \n\nclass PilotDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Pilot.objects.all() \n    serializer_class = PilotSerializer \n    name = 'pilot-detail' \n\nclass CompetitionList(generics.ListCreateAPIView): \n    queryset = Competition.objects.all() \n    serializer_class = PilotCompetitionSerializer \n    name = 'competition-list' \n\nclass CompetitionDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Competition.objects.all() \n    serializer_class = PilotCompetitionSerializer \n    name = 'competition-detail' \n```", "```py\nclass ApiRoot(generics.GenericAPIView): \n    name = 'api-root' \n    def get(self, request, *args, **kwargs): \n        return Response({ \n            'drone-categories': reverse(DroneCategoryList.name, request=request), \n            'drones': reverse(DroneList.name, request=request), \n            'pilots': reverse(PilotList.name, request=request), \n            'competitions': reverse(CompetitionList.name, request=request) \n            }) \n```", "```py\nfrom django.conf.urls import url \nfrom drones import views \n\nurlpatterns = [ \n    url(r'^drone-categories/$',  \n        views.DroneCategoryList.as_view(),  \n        name=views.DroneCategoryList.name), \n    url(r'^drone-categories/(?P<pk>[0-9]+)$',  \n        views.DroneCategoryDetail.as_view(), \n        name=views.DroneCategoryDetail.name), \n    url(r'^drones/$',  \n        views.DroneList.as_view(), \n        name=views.DroneList.name), \n    url(r'^drones/(?P<pk>[0-9]+)$',  \n        views.DroneDetail.as_view(), \n        name=views.DroneDetail.name), \n    url(r'^pilots/$',  \n        views.PilotList.as_view(), \n        name=views.PilotList.name), \n    url(r'^pilots/(?P<pk>[0-9]+)$',  \n        views.PilotDetail.as_view(), \n        name=views.PilotDetail.name), \n    url(r'^competitions/$',  \n        views.CompetitionList.as_view(), \n        name=views.CompetitionList.name), \n    url(r'^competitions/(?P<pk>[0-9]+)$',  \n        views.CompetitionDetail.as_view(), \n        name=views.CompetitionDetail.name), \n    url(r'^$', \n        views.ApiRoot.as_view(), \n        name=views.ApiRoot.name), \n    ]\n```", "```py\nfrom django.conf.urls import url, include\n\nurlpatterns = [\n    url(r'^', include('drones.urls')),\n]\n```", "```py\nhttp POST :8000/drone-categories/ name=\"Quadcopter\"\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Quadcopter\"}' localhost:8000/drone-categories/  \n```", "```py\n{\n    \"drones\": [], \n    \"name\": \"Quadcopter\", \n    \"pk\": 1, \n     \"url\": \"http://localhost:8000/drone-categories/1\"\n}\n```", "```py\n    http POST :8000/drones/ name=\"WonderDrone\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-07-20T02:02:00.716312Z\" has_it_competed=false \n    http POST :8000/drones/ name=\"Atom\" drone_category=\"Quadcopter\" manufacturing_date=\"2017-08-18T02:02:00.716312Z\" has_it_competed=false\n\n```", "```py\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"WonderDrone\", \"drone_category\":\"Quadcopter\", \"manufacturing_date\": \"2017-07-20T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Atom\", \"drone_category\":\"Quadcopter\", \"manufacturing_date\": \"2017-08-18T02:02:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n\n```", "```py\n    {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-03T01:58:49.135737Z\", \n    \"manufacturing_date\": \"2017-07-20T02:02:00.716312Z\", \n    \"name\": \"WonderDrone\", \n        \"url\": \"http://localhost:8000/drones/1\"\n    }\n    {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-03T01:59:31.108031Z\", \n    \"manufacturing_date\": \"2017-08-18T02:02:00.716312Z\", \n    \"name\": \"Atom\", \n        \"url\": \"http://localhost:8000/drones/2\"\n    }  \n```", "```py\nhttp :8000/drone-categories/1\n```", "```py\ncurl -iX GET localhost:8000/drone-categories/1  \n```", "```py\n    HTTP/1.0 200 OK\n    Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS\n    Content-Length: 154\n    Content-Type: application/json\n    Date: Fri, 03 Nov 2017 02:58:33 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n        \"drones\": [\n    \"http://localhost:8000/drones/2\", \n            \"http://localhost:8000/drones/1\"\n    ], \n    \"name\": \"Quadcopter\", \n    \"pk\": 1, \n        \"url\": \"http://localhost:8000/drone-categories/1\"\n    }  \n```", "```py\n    http POST :8000/drones/ name=\"Noisy Drone\" drone_category=\"Octocopter\" manufacturing_date=\"2017-10-23T02:03:00.716312Z\" has_it_competed=false   \n```", "```py\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Noisy Drone\", \"drone_category\":\"Octocopter\", \"manufacturing_date\": \"2017-10-23T02:03:00.716312Z\", \"has_it_competed\": \"false\"}' localhost:8000/drones/\n```", "```py\n    HTTP/1.0 400 Bad Request\n    Allow: GET, POST, HEAD, OPTIONS\n    Content-Length: 66\n    Content-Type: application/json\n    Date: Fri, 03 Nov 2017 03:15:07 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n        \"drone_category\": [\n            \"Object with name=Octocopter does not exist.\"\n        ]\n    }\n```", "```py\nhttp POST :8000/pilots/ name=\"Penelope Pitstop\" gender=\"F\" races_count=0\nhttp POST :8000/pilots/ name=\"Peter Perfect\" gender=\"M\" races_count=0 \n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Penelope Pitstop\", \"gender\":\"F\", \"races_count\": 0}' localhost:8000/pilots/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Peter Perfect\", \"gender\":\"M\", \"races_count\": 0}' localhost:8000/pilots/  \n```", "```py\n    {\n        \"url\": \"http://localhost:8000/pilots/1\",\n        \"name\": \"Penelope Pitstop\",\n        \"gender\": \"F\",\n        \"gender_description\": \"Female\",\n        \"races_count\": 0,\n    \"inserted_timestamp\":\"2017-11-03T03:22:36.399433Z\", \n        \"competitions\":[]\n    }\n    {\n        \"url\": \"http://localhost:8000/pilots/2\",\n        \"name\": \"Peter Perfect\",\n        \"gender\": \"M\",\n        \"gender_description\": \"Male\",\n        \"races_count\": 0,\n        \"inserted_timestamp\": \"2017-11-03T03:23:02.276186Z\",\n        \"competitions\": []\n    }\n```", "```py\n    http POST :8000/competitions/ distance_in_feet=800 distance_achievement_date=\"2017-10-20T05:03:20.776594Z\" pilot=\"Penelope Pitstop\" drone=\"Atom\"\n    http POST :8000/competitions/ distance_in_feet=2800 distance_achievement_date=\"2017-10-21T06:02:23.776594Z\" pilot=\"Penelope Pitstop\" drone=\"WonderDrone\"\n    http POST :8000/competitions/ distance_in_feet=790 distance_achievement_date=\"2017-10-20T05:43:20.776594Z\" pilot=\"Peter Perfect\" drone=\"Atom\"  \n```", "```py\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"distance_in_feet\":\"800\", \"distance_achievement_date\":\"2017-10-20T05:03:20.776594Z\", \"pilot\":\"Penelope Pitstop\", \"drone\":\"Atom\"}' localhost:8000/competitions/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"distance_in_feet\":\"2800\", \"distance_achievement_date\":\"2017-10-21T06:02:23.776594Z\", \"pilot\":\"Penelope Pitstop\", \"drone\":\"WonderDrone\"}' localhost:8000/competitions/\n    curl -iX POST -H \"Content-Type: application/json\" -d '{\"distance_in_feet\":\"790\", \"distance_achievement_date\":\"2017-10-20T05:43:20.776594Z\", \"pilot\":\"Peter Perfect\", \"drone\":\"Atom\"}' localhost:8000/competitions/  \n```", "```py\n    {\n    \"distance_achievement_date\": \"2017-10-20T05:03:20.776594Z\", \n    \"distance_in_feet\": 800, \n    \"drone\": \"Atom\", \n    \"pilot\": \"Penelope Pitstop\", \n    \"pk\": 1, \n        \"url\": \"http://localhost:8000/competitions/1\"\n    }\n    {\n    \"distance_achievement_date\": \"2017-10-21T06:02:23.776594Z\", \n    \"distance_in_feet\": 2800, \n    \"drone\": \"WonderDrone\", \n    \"pilot\": \"Penelope Pitstop\", \n    \"pk\": 2, \n        \"url\": \"http://localhost:8000/competitions/2\"\n    }\n    {\n    \"distance_achievement_date\": \"2017-10-20T05:43:20.776594Z\", \n    \"distance_in_feet\": 790, \n    \"drone\": \"Atom\", \n    \"pilot\": \"Peter Perfect\", \n    \"pk\": 3, \n        \"url\": \"http://localhost:8000/competitions/3\"\n    }\n```", "```py\n    http :8000/pilots/1\n```", "```py\n    curl -iX GET localhost:8000/Pilots/1\n```", "```py\n    HTTP/1.0 200 OK\n    Allow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS\n    Content-Length: 909\n    Content-Type: application/json\n    Date: Fri, 03 Nov 2017 04:40:43 GMT\n    Server: WSGIServer/0.2 CPython/3.6.2\n    Vary: Accept, Cookie\n    X-Frame-Options: SAMEORIGIN\n\n    {\n        \"competitions\": [\n            {\n    \"distance_achievement_date\": \"2017-10-\n                 21T06:02:23.776594Z\", \n    \"distance_in_feet\": 2800, \n                \"drone\": {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-\n                     03T01:58:49.135737Z\", \n    \"manufacturing_date\": \"2017-07-\n                     20T02:02:00.716312Z\", \n    \"name\": \"WonderDrone\", \n                    \"url\": \"http://localhost:8000/drones/1\"\n    }, \n    \"pk\": 2, \n                \"url\": \"http://localhost:8000/competitions/2\"\n    }, \n            {\n    \"distance_achievement_date\": \"2017-10-\n                  20T05:03:20.776594Z\", \n    \"distance_in_feet\": 800, \n                \"drone\": {\n    \"drone_category\": \"Quadcopter\", \n    \"has_it_competed\": false, \n    \"inserted_timestamp\": \"2017-11-\n                      03T01:59:31.108031Z\", \n    \"manufacturing_date\": \"2017-08-\n                     18T02:02:00.716312Z\", \n    \"name\": \"Atom\", \n                    \"url\": \"http://localhost:8000/drones/2\"\n    }, \n    \"pk\": 1, \n                \"url\": \"http://localhost:8000/competitions/1\"\n            }\n    ], \n    \"gender\": \"F\", \n    \"gender_description\": \"Female\", \n    \"inserted_timestamp\": \"2017-11-03T03:22:36.399433Z\", \n    \"name\": \"Penelope Pitstop\", \n    \"races_count\": 0, \n        \"url\": \"http://localhost:8000/pilots/1\"\n    }\n```"]