["```py\n{\n    \"links\": {\n        \"first\": \"http://localhost:5000/recipes?per_page=2&page=1\",\n        \"last\": \"http://localhost:5000/recipes?per_page=2&page=5\",\n        \"prev\": \"http://localhost:5000/recipes?per_page=2&page=1\",\n        \"next\": \"http://localhost:5000/recipes?per_page=2&page=3\"\n    },\n    \"page\": 2,\n    \"pages\": 5,\n    \"per_page\": 2,\n    \"total\": 9,\n    \"data\": [\n        {\n            \"data\": \"data\"\n        },\n        {\n            \"data\": \"data\"\n        }\n    ]\n}\n```", "```py\n    from flask import request\n    from marshmallow import Schema, fields\n    from urllib.parse import urlencode\n    ```", "```py\n    class PaginationSchema(Schema):\n        class Meta:\n            ordered = True\n        links = fields.Method(serialize='get_pagination_links')\n        page = fields.Integer(dump_only=True)\n        pages = fields.Integer(dump_only=True)\n        per_page = fields.Integer(dump_only=True)\n        total = fields.Integer(dump_only=True)\n    ```", "```py\n        @staticmethod\n        def get_url(page):\n            query_args = request.args.to_dict()\n            query_args['page'] = page\n            return '{}?{}'.format(request.base_url, urlencode(query_args))\n    ```", "```py\n        def get_pagination_links(self, paginated_objects):\n            pagination_links = {\n                'first': self.get_url(page=1),\n                'last': self.get_url(page=paginated_objects.pages)\n            }\n            if paginated_objects.has_prev:\n                pagination_links['prev'] = self.get_url(page=paginated_objects.prev_num)\n            if paginated_objects.has_next:\n                pagination_links['next'] = self.get_url(page=paginated_objects.next_num)\n            return pagination_links\n    ```", "```py\n    from schemas.pagination import PaginationSchema\n    ```", "```py\n        @post_dump(pass_many=True)\n        def wrap(self, data, many, **kwargs):\n            if many:\n                return {'data': data}\n            return data\n    ```", "```py\n    class RecipePaginationSchema(PaginationSchema):\n        data = fields.Nested(RecipeSchema, attribute='items', many=True)\n    ```", "```py\n    from sqlalchemy import asc, desc\n        @classmethod\n        def get_all_published(cls, page, per_page):\n            return cls.query.filter_by(is_publish=True).order_by(desc(cls.created_at)).paginate(page=page, per_page=per_page)\n    ```", "```py\n    from webargs import fields\n    from webargs.flaskparser import use_kwargs\n    from schemas.recipe import RecipeSchema, RecipePaginationSchema\n    ```", "```py\n    recipe_pagination_schema = RecipePaginationSchema()\n    ```", "```py\n    class RecipeListResource(Resource):\n            @use_kwargs({'page': fields.Int(missing=1),\n                               'per_page': fields.Int(missing=20)})\n        def get(self, page, per_page):\n            paginated_recipes = Recipe.get_all_published(page, per_page)\n            return recipe_pagination_schema.dump(paginated_recipes).data, HTTPStatus.OK\n    ```", "```py\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Vegetable Paella\" description=\"This is a lovely vegetable paella\" num_of_servings=5 cook_time=60 directions=\"This is how you make it\"\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Minestrone Soup\" description=\"This is a lovely minestrone soup\" num_of_servings=4 cook_time=60 directions=\"This is how you make it\"\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Thai Red Curry\" description=\"This is a lovely thai red curry\" \n    num_of_servings=4 cook_time=40 directions=\"This is how you make it\"\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Coconut Fried Rice\" description=\"This is a lovely coconut fried rice\" num_of_servings=2 cook_time=30 directions=\"This is how you make it\"\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Vegetable Fried Rice\" description=\"This is a lovely vegetable fried rice\" num_of_servings=2 cook_time=30 directions=\"This is how you make it\"\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Burrito Bowls\" description=\"This is a lovely coconut fried rice\" num_of_servings=5 cook_time=60 directions=\"This is how you make it\"\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Fresh Huevos Rancheros\" description=\"This is a lovely fresh huevos rancheros\" num_of_servings=4 cook_time=40 directions=\"This is how you make it\"\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Bean Enchiladas\" description=\"This is a lovely coconut fried rice\" num_of_servings=4 cook_time=60 directions=\"This is how you make it\"\n    ```", "```py\n    http PUT localhost:5000/recipes/6/publish \"Authorization: Bearer {token}\"\n    http PUT localhost:5000/recipes/7/publish \"Authorization: Bearer {token}\"\n    http PUT localhost:5000/recipes/8/publish \"Authorization: Bearer {token}\"\n    http PUT localhost:5000/recipes/9/publish \"Authorization: Bearer {token}\"\n    http PUT localhost:5000/recipes/10/publish \"Authorization: Bearer {token}\"\n    http PUT localhost:5000/recipes/11/publish \"Authorization: Bearer {token}\"\n    http PUT localhost:5000/recipes/12/publish \"Authorization: Bearer {token}\"\n    http PUT localhost:5000/recipes/13/publish \"Authorization: Bearer {token}\"\n    ```", "```py\n    from sqlalchemy import asc, desc, or_\n    ```", "```py\n      @classmethod\n        def get_all_published(cls, q, page, per_page):\n            keyword = '%{keyword}%'.format(keyword=q)\n            return cls.query.filter(or_(cls.name.ilike(keyword),\n                    cls.description.ilike(keyword)),\n                    cls.is_publish.is_(True)).\\\n                    order_by(desc(cls.created_at)).paginate(page=page, per_page=per_page)\n    ```", "```py\n    class RecipeListResource(Resource):\n        @use_kwargs({'q': fields.Str(missing='),\n                                       'page': fields.Int(missing=1),\n                                       'per_page': fields.Int(missing=20)})\n        def get(self, q, page, per_page):\n            paginated_recipes = Recipe.get_all_published(q, page, per_page)\n            return recipe_pagination_schema.dump(paginated_recipes).data, HTTPStatus.OK\n    ```", "```py\nImport asc        \n\nsort_logic_asc = asc(getattr(cls, sort))\ncls.query.filter(cls.is_publish=True).order_by(sort_logic_asc)\n```", "```py\nImport desc        \n\nsort_logic_desc = desc(getattr(cls, sort))\ncls.query.filter(cls.is_publish=True).order_by(sort_logic_desc)\n```", "```py\n    @use_kwargs({'q': fields.Str(missing='),\n                            'page': fields.Int(missing=1),\n                            'per_page': fields.Int(missing=20),\n                            'sort': fields.Str(missing='created_at'),\n                            'order': fields.Str(missing='desc')})\n    def get(self, q, page, per_page, sort, order):\n    ```", "```py\n            if sort not in ['created_at', 'cook_time', 'num_of_servings']:\n                sort = 'created_at'\n    ```", "```py\n            if order not in ['asc', 'desc']:\n                order = 'desc'\n    ```", "```py\n            paginated_recipes = Recipe.get_all_published(q, page, per_page, sort, order)\n    ```", "```py\n        @classmethod\n        def get_all_published(cls, q, page, per_page, sort, order):\n            keyword = '%{keyword}%'.format(keyword=q)\n            if order == 'asc':\n                sort_logic = asc(getattr(cls, sort))\n            else:\n                sort_logic = desc(getattr(cls, sort))\n            return cls.query.filter(or_(cls.name.ilike(keyword),\n                                        cls.description.ilike(keyword)),\n                                    cls.is_publish.is_(True)).\\\n                order_by(sort_logic).paginate(page=page, per_page=per_page)\n    ```"]