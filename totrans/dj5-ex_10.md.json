["```py\npython manage.py startapp coupons \n```", "```py\nINSTALLED_APPS = [\n    # ...\n**'coupons.apps.CouponsConfig'****,**\n] \n```", "```py\nfrom django.core.validators import MaxValueValidator, MinValueValidator\nfrom django.db import models\nclass Coupon(models.Model):\n    code = models.CharField(max_length=50, unique=True)\n    valid_from = models.DateTimeField()\n    valid_to = models.DateTimeField()\n    discount = models.IntegerField(\n        validators=[MinValueValidator(0), MaxValueValidator(100)],\n        help_text='Percentage value (0 to 100)'\n )\n    active = models.BooleanField()\n    def __str__(self):\n        return self.code \n```", "```py\npython manage.py makemigrations \n```", "```py\nMigrations for 'coupons':\n  coupons/migrations/0001_initial.py\n    - Create model Coupon \n```", "```py\npython manage.py migrate \n```", "```py\nApplying coupons.0001_initial... OK \n```", "```py\nfrom django.contrib import admin\nfrom .models import Coupon\n@admin.register(Coupon)\nclass CouponAdmin(admin.ModelAdmin):\n    list_display = [\n        'code',\n        'valid_from',\n        'valid_to',\n        'discount',\n        'active'\n ]\n    list_filter = ['active', 'valid_from', 'valid_to']\n    search_fields = ['code'] \n```", "```py\npython manage.py runserver \n```", "```py\nfrom django import forms\nclass CouponApplyForm(forms.Form):\n    code = forms.CharField() \n```", "```py\nfrom django.shortcuts import redirect\nfrom django.utils import timezone\nfrom django.views.decorators.http import require_POST\nfrom .forms import CouponApplyForm\nfrom .models import Coupon\n@require_POST\ndef coupon_apply(request):\n    now = timezone.now()\n    form = CouponApplyForm(request.POST)\n    if form.is_valid():\n        code = form.cleaned_data['code']\n        try:\n            coupon = Coupon.objects.get(\n                code__iexact=code,\n                valid_from__lte=now,\n                valid_to__gte=now,\n                active=True\n            )\n            request.session['coupon_id'] = coupon.id\nexcept Coupon.DoesNotExist:\n            request.session['coupon_id'] = None\nreturn redirect('cart:cart_detail') \n```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'coupons'\nurlpatterns = [\n    path('apply/', views.coupon_apply, name='apply'),\n] \n```", "```py\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('cart/', include('cart.urls', namespace='cart')),\n    path('orders/', include('orders.urls', namespace='orders')),\n    path('payment/', include('payment.urls', namespace='payment')),\n **path(****'coupons/'****, include(****'coupons.urls'****, namespace=****'coupons'****)),**\n    path('', include('shop.urls', namespace='shop')),\n] \n```", "```py\nfrom coupons.models import Coupon \n```", "```py\nclass Cart:\n    def __init__(self, request):\n        \"\"\"\n        Initialize the cart.\n        \"\"\"\n        self.session = request.session\n        cart = self.session.get(settings.CART_SESSION_ID)\n        if not cart:\n            # save an empty cart in the session\n            cart = self.session[settings.CART_SESSION_ID] = {}\n        self.cart = cart\n**# store current applied coupon**\n **self.coupon_id = self.session.get(****'coupon_id'****)** \n```", "```py\nclass Cart:\n    # ...\n **@property**\n**def****coupon****(****self****):**\n**if** **self.coupon_id:**\n**try****:**\n**return** **Coupon.objects.get(****id****=self.coupon_id)**\n**except** **Coupon.DoesNotExist:**\n**pass**\n**return****None**\n**def****get_discount****(****self****):**\n**if** **self.coupon:**\n**return** **(**\n **self.coupon.discount / Decimal(****100****)**\n **) * self.get_total_price()**\n**return** **Decimal(****0****)**\n**def****get_total_price_after_discount****(****self****):**\n**return** **self.get_total_price() - self.get_discount()** \n```", "```py\nfrom coupons.forms import CouponApplyForm \n```", "```py\ndef cart_detail(request):\n    cart = Cart(request)\n    for item in cart:\n        item['update_quantity_form'] = CartAddProductForm(\n            initial={'quantity': item['quantity'], 'override': True}\n        )\n **coupon_apply_form = CouponApplyForm()**\nreturn render(\n        request,\n        'cart/detail.html',\n        {\n            'cart': cart**,**\n**'coupon_apply_form'****: coupon_apply_form**\n        }\n    ) \n```", "```py\n<tr class=\"total\">\n  <td>Total</td>\n  <td colspan=\"4\"></td>\n  <td class=\"num\">${{ cart.get_total_price }}</td>\n</tr> \n```", "```py\n**{% if cart.coupon %}**\n**<****tr****class****=****\"subtotal\"****>**\n**<****td****>****Subtotal****</****td****>**\n**<****td****colspan****=****\"4\"****></****td****>**\n**<****td****class****=****\"num\"****>****${{ cart.get_total_price|floatformat:2 }}****</****td****>**\n**</****tr****>**\n**<****tr****>**\n**<****td****>**\n **\"{{ cart.coupon.code }}\" coupon**\n **({{ cart.coupon.discount }}% off)**\n**</****td****>**\n**<****td****colspan****=****\"4\"****></****td****>**\n**<****td****class****=****\"num neg\"****>**\n **- ${{ cart.get_discount|floatformat:2 }}**\n**</****td****>**\n**</****tr****>**\n**{% endif %}**\n<tr class=\"total\">\n<td>Total</td>\n<td colspan=\"4\"></td>\n<td class=\"num\">\n    ${{ cart.**get_total_price_after_discount|floatformat:2** }}\n  </td>\n</tr> \n```", "```py\n<p>Apply a coupon:</p>\n<form action=\"{% url \"coupons:apply\" %}\" method=\"post\">\n  {{ coupon_apply_form }}\n  <input type=\"submit\" value=\"Apply\">\n  {% csrf_token %}\n</form> \n```", "```py\n<ul>\n  {% for item in cart %}\n    <li>\n      {{ item.quantity }}x {{ item.product.name }}\n      <span>${{ item.total_price }}</span>\n</li>\n  {% endfor %}\n</ul> \n```", "```py\n<ul>\n  {% for item in cart %}\n    <li>\n      {{ item.quantity }}x {{ item.product.name }}\n      <span>${{ item.total_price|floatformat:2 }}</span>\n</li>\n  {% endfor %}\n **{% if cart.coupon %}**\n**<****li****>**\n **\"{{ cart.coupon.code }}\" ({{ cart.coupon.discount }}% off)**\n**<****span****class****=****\"neg\"****>****- ${{ cart.get_discount|floatformat:2 }}****</****span****>**\n**</****li****>**\n **{% endif %}**\n</ul> \n```", "```py\n<p>Total: ${{ cart.get_total_price }}</p> \n```", "```py\n<p>Total: ${{ cart.**get_total_price_after_discount|floatformat:2** }}</p> \n```", "```py\nfrom decimal import Decimal\nfrom django.core.validators import MaxValueValidator, MinValueValidator\nfrom coupons.models import Coupon \n```", "```py\nclass Order(models.Model):\n    # ...\n**coupon = models.ForeignKey(**\n **Coupon,**\n **related_name=****'orders'****,**\n **null=****True****,**\n **blank=****True****,**\n **on_delete=models.SET_NULL**\n **)**\n **discount = models.IntegerField(**\n **default=****0****,**\n **validators=[MinValueValidator(****0****), MaxValueValidator(****100****)]**\n **)** \n```", "```py\npython manage.py makemigrations \n```", "```py\nMigrations for 'orders':\n  orders/migrations/0003_order_coupon_order_discount.py\n    - Add field coupon to order\n    - Add field discount to order \n```", "```py\npython manage.py migrate orders \n```", "```py\nApplying orders.0003_order_coupon_order_discount... OK \n```", "```py\nclass Order(models.Model):\n    # ...\n**def****get_total_cost_before_discount****(****self****):**\n**return****sum****(item.get_cost()** **for** **item** **in** **self.items.****all****())**\n**def****get_discount****(****self****):**\n **total_cost = self.get_total_cost_before_discount()**\n**if** **self.discount:**\n**return** **total_cost * (self.discount / Decimal(****100****))**\n**return** **Decimal(****0****)** \n```", "```py\n def get_total_cost(self):\n **total_cost = self.get_total_cost_before_discount()**\n**return** **total_cost - self.get_discount()** \n```", "```py\ndef order_create(request):\n    cart = Cart(request)\n    if request.method == 'POST':\n        form = OrderCreateForm(request.POST)\n        if form.is_valid():\n            order = form.save(**commit=****False**)\n            **if** **cart.coupon:**\n **order.coupon = cart.coupon**\n **order.discount = cart.coupon.discount**\n **order.save()**\nfor item in cart:\n                OrderItem.objects.create(\n                    order=order,\n                    product=item['product'],\n                    price=item['price'],\n                    quantity=item['quantity']\n                )\n            # clear the cart\n            cart.clear()\n            # launch asynchronous task\n            order_created.delay(order.id)\n            # set the order in the session\n            request.session['order_id'] = order.id\n# redirect for payment\nreturn redirect('payment:process')\n    else:\n        form = OrderCreateForm()\n    return render(\n        request,\n        'orders/order/create.html',\n        {'cart': cart, 'form': form}\n    ) \n```", "```py\n<tr class=\"total\">\n<td>Total</td>\n<td colspan=\"4\"></td>\n<td class=\"num\">${{ order.get_total_cost }}</td>\n</tr> \n```", "```py\n**{% if order.coupon %}**\n**<****tr****class****=****\"subtotal\"****>**\n**<****td****>****Subtotal****</****td****>**\n**<****td****colspan****=****\"3\"****></****td****>**\n**<****td****class****=****\"num\"****>**\n **${{ order.get_total_cost_before_discount|floatformat:2 }}**\n**</****td****>**\n**</****tr****>**\n**<****tr****>**\n**<****td****>**\n **\"{{ order.coupon.code }}\" coupon**\n **({{ order.discount }}% off)**\n**</****td****>**\n**<****td****colspan****=****\"3\"****></****td****>**\n**<****td****class****=****\"****num neg\"****>**\n **- ${{ order.get_discount|floatformat:2 }}**\n**</****td****>**\n**</****tr****>**\n**{% endif %}**\n<tr class=\"total\">\n<td>Total</td>\n<td colspan=\"3\"></td>\n<td class=\"num\">\n    ${{ order.get_total_cost**|floatformat:2** }}\n  </td>\n</tr> \n```", "```py\npython manage.py runserver \n```", "```py\ndocker run -it --rm --name rabbitmq -p 5672:5672 -p 15672:15672 rabbitmq:3.13.1-management \n```", "```py\ncelery -A myshop worker -l info \n```", "```py\nstripe listen --forward-to localhost:8000/payment/webhook/ \n```", "```py\ndef payment_process(request):\n    order_id = request.session.get('order_id')\n    order = get_object_or_404(Order, id=order_id)\n    if request.method == 'POST':\n        success_url = request.build_absolute_uri(\n            reverse('payment:completed')\n        )\n        cancel_url = request.build_absolute_uri(\n            reverse('payment:canceled')\n        )\n        # Stripe checkout session data\n        session_data = {\n            'mode': 'payment',\n            'client_reference_id': order.id,\n            'success_url': success_url,\n            'cancel_url': cancel_url,\n            'line_items': []\n        }\n        # add order items to the Stripe checkout session\nfor item in order.items.all():\n            session_data['line_items'].append(\n                {\n                    'price_data': {\n                        'unit_amount': int(item.price * Decimal('100')),\n                        'currency': 'usd',\n                        'product_data': {\n                            'name': item.product.name,\n                        },\n                    },\n                    'quantity': item.quantity,\n                }\n            )\n**# Stripe coupon**\n**if** **order.coupon:**\n **stripe_coupon = stripe.Coupon.create(**\n **name=order.coupon.code,**\n **percent_off=order.discount,**\n **duration=****'once'**\n **)**\n **session_data[****'discounts'****] = [{****'coupon'****: stripe_coupon.****id****}]**\n# create Stripe checkout session\n        session = stripe.checkout.Session.create(**session_data)\n        # redirect to Stripe payment form\nreturn redirect(session.url, code=303)\n    else:\n        return render(request, 'payment/process.html', locals()) \n```", "```py\n...\n<table style=\"width:100%\">\n...\n<tbody>\n    {% for item in order.items.all %}\n      <tr class=\"row{% cycle \"1\" \"2\" %}\">\n<td>{{ item.product.name }}</td>\n<td class=\"num\">${{ item.price }}</td>\n<td class=\"num\">{{ item.quantity }}</td>\n<td class=\"num\">${{ item.get_cost }}</td>\n</tr>\n    {% endfor %}\n **{% if order.coupon %}**\n**<****tr****class****=****\"subtotal\"****>**\n**<****td****colspan****=****\"3\"****>****Subtotal****</****td****>**\n**<****td****class****=****\"num\"****>**\n **${{ order.get_total_cost_before_discount|floatformat:2 }}**\n**</****td****>**\n**</****tr****>**\n**<****tr****>**\n**<****td****colspan****=****\"3\"****>**\n **\"{{ order.coupon.code }}\" coupon**\n **({{ order.discount }}% off)**\n**</****td****>**\n**<****td****class****=****\"num neg\"****>**\n **- ${{ order.get_discount|floatformat:2 }}**\n**</****td****>**\n**</****tr****>**\n **{% endif %}**\n<tr class=\"total\">\n<td colspan=\"3\">Total</td>\n<td class=\"num\">\n        ${{ order.get_total_cost**|floatformat:2** }}\n      </td>\n</tr>\n</tbody>\n</table>\n... \n```", "```py\n...\n<table>\n<thead>\n<tr>\n<th>Product</th>\n<th>Price</th>\n<th>Quantity</th>\n<th>Cost</th>\n</tr>\n</thead>\n<tbody>\n    {% for item in order.items.all %}\n      <tr class=\"row{% cycle \"1\" \"2\" %}\">\n<td>{{ item.product.name }}</td>\n<td class=\"num\">${{ item.price }}</td>\n<td class=\"num\">{{ item.quantity }}</td>\n<td class=\"num\">${{ item.get_cost }}</td>\n</tr>\n    {% endfor %}\n **{% if order.coupon %}**\n**<****tr****class****=****\"subtotal\"****>**\n**<****td****colspan****=****\"3\"****>****Subtotal****</****td****>**\n**<****td****class****=****\"num\"****>**\n **${{ order.get_total_cost_before_discount|floatformat:2 }}**\n**</****td****>**\n**</****tr****>**\n**<****tr****>**\n**<****td****colspan****=****\"3\"****>**\n **\"{{ order.coupon.code }}\" coupon**\n **({{ order.discount }}% off)**\n**</****td****>**\n**<****td****class****=****\"num neg\"****>**\n **- ${{ order.get_discount|floatformat:2 }}**\n**</****td****>**\n**</****tr****>**\n **{% endif %}**\n<tr class=\"total\">\n<td colspan=\"3\">Total</td>\n<td class=\"num\">${{ order.get_total_cost**|floatformat:2** }}</td>\n</tr>\n</tbody>\n</table>\n... \n```", "```py\npython -m pip install redis==5.0.4 \n```", "```py\n# Redis settings\nREDIS_HOST = 'localhost'\nREDIS_PORT = 6379\nREDIS_DB = 1 \n```", "```py\nimport redis\nfrom django.conf import settings\nfrom .models import Product\n# connect to redis\nr = redis.Redis(\n    host=settings.REDIS_HOST,\n    port=settings.REDIS_PORT,\n    db=settings.REDIS_DB\n)\nclass Recommender:\n    def get_product_key(self, id):\n        return f'product:{id}:purchased_with'\ndef products_bought(self, products):\n        product_ids = [p.id for p in products]\n        for product_id in product_ids:\n            for with_id in product_ids:\n                # get the other products bought with each product\nif product_id != with_id:\n                    # increment score for product purchased together\n                    r.zincrby(\n                        self.get_product_key(product_id), 1, with_id\n                    ) \n```", "```py\ndef suggest_products_for(self, products, max_results=6):\n    product_ids = [p.id for p in products]\n    if len(products) == 1:\n        # only 1 product\n        suggestions = r.zrange(\n            self.get_product_key(product_ids[0]), 0, -1, desc=True\n )[:max_results]\n    else:\n        # generate a temporary key\n        flat_ids = ''.join([str(id) for id in product_ids])\n        tmp_key = f'tmp_{flat_ids}'\n# multiple products, combine scores of all products\n# store the resulting sorted set in a temporary key\n        keys = [self.get_product_key(id) for id in product_ids]\n        r.zunionstore(tmp_key, keys)\n        # remove ids for the products the recommendation is for\n        r.zrem(tmp_key, *product_ids)\n        # get the product ids by their score, descendant sort\n        suggestions = r.zrange(\n            tmp_key, 0, -1, desc=True\n )[:max_results]\n        # remove the temporary key\n        r.delete(tmp_key)\n    suggested_products_ids = [int(id) for id in suggestions]\n    # get suggested products and sort by order of appearance\n    suggested_products = list(\n        Product.objects.filter(id__in=suggested_products_ids)\n    )\n    suggested_products.sort(\n        key=lambda x: suggested_products_ids.index(x.id)\n    )\n    return suggested_products \n```", "```py\ndef clear_purchases(self):\n    for id in Product.objects.values_list('id', flat=True):\n        r.delete(self.get_product_key(id)) \n```", "```py\ndocker run -it --rm --name redis -p 6379:6379 redis:7.2.4 \n```", "```py\npython manage.py shell \n```", "```py\n>>> from shop.models import Product\n>>> black_tea = Product.objects.get(name='Black tea')\n>>> red_tea = Product.objects.get(name='Red tea')\n>>> green_tea = Product.objects.get(name='Green tea')\n>>> tea_powder = Product.objects.get(name='Tea powder') \n```", "```py\n>>> from shop.recommender import Recommender\n>>> r = Recommender()\n>>> r.products_bought([black_tea, red_tea])\n>>> r.products_bought([black_tea, green_tea])\n>>> r.products_bought([red_tea, black_tea, tea_powder])\n>>> r.products_bought([green_tea, tea_powder])\n>>> r.products_bought([black_tea, tea_powder])\n>>> r.products_bought([red_tea, green_tea]) \n```", "```py\nblack_tea:  red_tea (2), tea_powder (2), green_tea (1)\nred_tea:    black_tea (2), tea_powder (1), green_tea (1)\ngreen_tea:  black_tea (1), tea_powder (1), red_tea(1)\ntea_powder: black_tea (2), red_tea (1), green_tea (1) \n```", "```py\n>>> r.suggest_products_for([black_tea])\n[<Product: Tea powder>, <Product: Red tea>, <Product: Green tea>]\n>>> r.suggest_products_for([red_tea])\n[<Product: Black tea>, <Product: Tea powder>, <Product: Green tea>]\n>>> r.suggest_products_for([green_tea])\n[<Product: Black tea>, <Product: Tea powder>, <Product: Red tea>]\n>>> r.suggest_products_for([tea_powder])\n[<Product: Black tea>, <Product: Red tea>, <Product: Green tea>] \n```", "```py\n>>> r.suggest_products_for([black_tea, red_tea])\n[<Product: Tea powder>, <Product: Green tea>]\n>>> r.suggest_products_for([green_tea, red_tea])\n[<Product: Black tea>, <Product: Tea powder>]\n>>> r.suggest_products_for([tea_powder, black_tea])\n[<Product: Red tea>, <Product: Green tea>] \n```", "```py\n# ...\n**from** **shop.models** **import** **Product**\n**from** **shop.recommender** **import** **Recommender**\n@csrf_exempt\ndef stripe_webhook(request):\n    # ...\nif event.type == 'checkout.session.completed':\n        session = event.data.object\nif (\n            session.mode == 'payment'\nand session.payment_status == 'paid'\n        ):\n            try:\n                order = Order.objects.get(\n                    id=session.client_reference_id\n                )\n            except Order.DoesNotExist:\n                return HttpResponse(status=404)\n            # mark order as paid\n            order.paid = True\n# store Stripe payment ID\n            order.stripe_id = session.payment_intent\n            order.save()\n            **# save items bought for product recommendations**\n **product_ids = order.items.values_list(****'product_id'****)**\n **products = Product.objects.****filter****(id__in=product_ids)**\n **r = Recommender()**\n **r.products_bought(products)**\n# launch asynchronous task\n            payment_completed.delay(order.id)\n    return HttpResponse(status=200) \n```", "```py\n**from** **.recommender** **import** **Recommender**\ndef product_detail(request, id, slug):\n    product = get_object_or_404(\n        Product, id=id, slug=slug, available=True\n )\n    cart_product_form = CartAddProductForm()\n **r = Recommender()**\n **recommended_products = r.suggest_products_for([product],** **4****)**\nreturn render(\n        request,\n        'shop/product/detail.html',\n        {\n            'product': product,\n            'cart_product_form': cart_product_form**,**\n **'recommended_products'****: recommended_products**\n        }\n    ) \n```", "```py\n{% if recommended_products %}\n  <div class=\"recommendations\">\n<h3>People who bought this also bought</h3>\n    {% for p in recommended_products %}\n      <div class=\"item\">\n<a href=\"{{ p.get_absolute_url }}\">\n<img src=\"{% if p.image %}{{ p.image.url }}{% else %}\n          {% static  \"img/no_image.png\" %}{% endif %}\">\n</a>\n<p><a href=\"{{ p.get_absolute_url }}\">{{ p.name }}</a></p>\n</div>\n    {% endfor %}\n  </div>\n{% endif %} \n```", "```py\n**from** **shop.recommender** **import** **Recommender**\ndef cart_detail(request):\n    cart = Cart(request)\n    for item in cart:\n        item['update_quantity_form'] = CartAddProductForm(\n            initial={'quantity': item['quantity'], 'override': True}\n        )\n    coupon_apply_form = CouponApplyForm()\n **r = Recommender()**\n **cart_products = [item[****'product'****]** **for** **item** **in** **cart]**\n**if****(cart_products):**\n **recommended_products = r.suggest_products_for(**\n **cart_products, max_results=****4**\n**)**\n**else****:**\n **recommended_products = []**\nreturn render(\n        request,\n        'cart/detail.html',\n        {\n            'cart': cart,\n            'coupon_apply_form': coupon_apply_form**,**\n **'recommended_products'****: recommended_products})**\n        }\n    ) \n```", "```py\n{% if recommended_products %}\n  <div class=\"recommendations cart\">\n<h3>People who bought this also bought</h3>\n    {% for p in recommended_products %}\n      <div class=\"item\">\n<a href=\"{{ p.get_absolute_url }}\">\n<img src=\"{% if p.image %}{{ p.image.url }}{% else %}\n          {% static \"img/no_image.png\" %}{% endif %}\">\n</a>\n<p><a href=\"{{ p.get_absolute_url }}\">{{ p.name }}</a></p>\n</div>\n    {% endfor %}\n  </div>\n{% endif %} \n```"]