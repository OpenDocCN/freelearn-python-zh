- en: '17'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Going Live
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you built a real-time chat server for students using
    Django Channels. Now that you have created a fully functional e-learning platform,
    you need to set up a production environment so that it can be accessed over the
    internet. Until now, you have been working in a development environment, using
    the Django development server to run your site. In this chapter, you will learn
    how to set up a production environment that is able to serve your Django project
    in a secure and efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Django settings for multiple environments
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Docker Compose to run multiple services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up a web server with uWSGI and Django
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving PostgreSQL and Redis with Docker Compose
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Django system check framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving NGINX with Docker
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Serving static assets through NGINX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing connections through **Transport Layer Security** (**TLS**) / **Secure
    Sockets Layer** (**SSL**)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Daphne **Asynchronous Server Gateway Interface** (**ASGI**) server
    for Django Channels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom Django middleware
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing custom Django management commands
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In previous chapters, diagrams at the start represented views, templates, and
    end-to-end functionalities. This chapter, however, shifts focus to setting up
    a production environment. Instead, you will find specific diagrams to illustrate
    the environment setup throughout the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17).
  prefs: []
  type: TYPE_NORMAL
- en: All Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes along with this chapter. You can follow the
    instructions to install each Python module below or you can install all requirements
    at once with the `python -m pip install -r requirements.txt` command.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a production environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s time to deploy your Django project in a production environment. You will
    start by configuring Django settings for multiple environments, and then you will
    set up a production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Managing settings for multiple environments
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In real-world projects, you will have to deal with multiple environments. You
    will usually have at least a local environment for development and a production
    environment for serving your application. You could have other environments as
    well, such as testing or staging environments.
  prefs: []
  type: TYPE_NORMAL
- en: Some project settings will be common to all environments, but others will be
    specific to each environment. Usually, you will use a base file that defines common
    settings, and a settings file per environment that overrides any necessary settings
    and defines additional ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will manage the following environments:'
  prefs: []
  type: TYPE_NORMAL
- en: '`local`: The local environment to run the project on your machine'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prod`: The environment for deploying your project on a production server'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create a `settings/` directory next to the `settings.py` file of the `educa`
    project. Rename the `settings.py` file to `base.py` and move it into the new `settings/`
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following additional files inside the `settings/` folder so that
    the new directory looks as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'These files are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`base.py`: The base settings file, which contains common settings (previously
    `settings.py`)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`local.py`: Custom settings for your local environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`prod.py`: Custom settings for the production environment'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have moved the settings files to a directory one level below, so you need
    to update the `BASE_DIR` setting in the `settings/base.py` file to point to the
    main project directory.
  prefs: []
  type: TYPE_NORMAL
- en: When handling multiple environments, create a base settings file and a settings
    file for each environment. Environment settings files should inherit the common
    settings and override environment-specific settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings/base.py` file and replace the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the preceding line with the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You point to one directory above by adding `.parent` to the `BASE_DIR` path.
    Let’s configure the settings for the local environment.
  prefs: []
  type: TYPE_NORMAL
- en: Local environment settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Instead of using a default configuration for the `DEBUG` and `DATABASES` settings,
    you will define them for each environment explicitly. These settings will be environment
    specific. Edit the `educa/settings/local.py` file and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This is the settings file for your local environment. In this file, you import
    all settings defined in the `base.py` file, and you define the `DEBUG` and `DATABASES`
    settings for this environment. The `DEBUG` and `DATABASES` settings remain the
    same as you have been using for development.
  prefs: []
  type: TYPE_NORMAL
- en: Now, remove the `DATABASES` and `DEBUG` settings from the `base.py` settings
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django management commands won’t automatically detect the settings file to
    use because the project settings file is not the default `settings.py` file. When
    running management commands, you need to indicate the settings module that you
    want to use by adding a `--settings` option, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Next, we are going to validate the project and the local environment configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Running the local environment
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s run the local environment using the new settings structure. Make sure
    Redis is running or start the Redis Docker container in a shell with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following management command in another shell, from the project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Open `http://127.0.0.1:8000/` in your browser and check that the site loads
    correctly. You are now serving your site using the settings for the `local` environment.
  prefs: []
  type: TYPE_NORMAL
- en: 'If don’t want to pass the `--settings` option every time you run a management
    command, you can define the `DJANGO_SETTINGS_MODULE` environment variable. Django
    will use it to identify the settings module to use. If you are using Linux or
    macOS, you can define the environment variable by executing the following command
    in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Windows, you can execute the following command in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Any management command you execute after this will use the settings defined
    in the `DJANGO_SETTINGS_MODULE` environment variable.
  prefs: []
  type: TYPE_NORMAL
- en: Stop the Django development server from the shell by pressing the *Ctrl* + *C*
    keys and stop the Redis Docker container from the shell by also pressing the *Ctrl*
    + *C* keys.
  prefs: []
  type: TYPE_NORMAL
- en: The local environment works well. Let’s prepare the settings for the production
    environment.
  prefs: []
  type: TYPE_NORMAL
- en: Production environment settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s start by adding initial settings for the production environment. Edit
    the `educa/settings/prod.py` file and make it look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'These are the settings for the production environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DEBUG`: Setting `DEBUG` to `False` is necessary for any production environment.
    Failing to do so will result in the traceback information and sensitive configuration
    data being exposed to everyone.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ADMINS`: When `DEBUG` is `False` and a view raises an exception, all information
    will be sent by email to the people listed in the `ADMINS` setting. Make sure
    that you replace the name/email tuple with your own information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALLOWED_HOSTS`: For security reasons, Django will only allow the hosts included
    in this list to serve the project. For now, you allow all hosts by using the asterisk
    symbol, `*`. You will limit the hosts that can be used for serving the project
    later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DATABASES`: You keep the `default` database settings pointing to the SQLite
    database of your local environment. You will configure the production database
    later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Over the next sections of this chapter, you will complete the settings file
    for your production environment.
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully organized settings for handling multiple environments.
    Now, you will build a complete production environment by setting up different
    services with Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Using Docker Compose
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You initially used Docker in *Chapter 3*, *Extending Your Blog Application*,
    and you have been using Docker throughout this book to run containers for different
    services, such as PostgreSQL, Redis, and RabbitMQ.
  prefs: []
  type: TYPE_NORMAL
- en: Each Docker container combines application source code with operating system
    libraries and dependencies required to run the application. By using application
    containers, you can improve your application portability. For the production environment,
    we will use Docker Compose to build and run multiple Docker containers.
  prefs: []
  type: TYPE_NORMAL
- en: Docker Compose is a tool for defining and running multi-container applications.
    You can create a configuration file to define the different services and use a
    single command to start all services from your configuration. You can find information
    about Docker Compose at [https://docs.docker.com/compose/](https://docs.docker.com/compose/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For the production environment, you will create a distributed application that
    runs across multiple Docker containers. Each Docker container will run a different
    service. You will initially define the following three services and you will add
    additional services in the next sections:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Web service**: A web server to serve the Django project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Database service**: A database service to run PostgreSQL'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cache service**: A service to run Redis'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by installing Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Docker Compose via Docker Desktop
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can run Docker Compose on macOS, 64-bit Linux, and Windows. The fastest
    way to install Docker Compose is by installing Docker Desktop. The installation
    includes Docker Engine, the command-line interface, and Docker Compose.
  prefs: []
  type: TYPE_NORMAL
- en: Install Docker Desktop by following the instructions at [https://docs.docker.com/compose/install/compose-desktop/](https://docs.docker.com/compose/install/compose-desktop/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the Docker Desktop application and click on **Containers**. It will look
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.1: The Docker Desktop interface'
  prefs: []
  type: TYPE_NORMAL
- en: After installing Docker Compose, you need to create a Docker image for your
    Django project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Dockerfile
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to create a Docker image to run the Django project. A `Dockerfile`
    is a text file that contains the commands for Docker to assemble a Docker image.
    You will prepare a `Dockerfile` with the commands for building the Docker image
    for the Django project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to the `educa` project directory, create a new file and name it `Dockerfile`.
    Add the following code to the new file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This code performs the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: The Python `3.12.3` parent Docker image is used. You can find the official Python
    Docker image at [https://hub.docker.com/_/python](https://hub.docker.com/_/python).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following environment variables are set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PYTHONDONTWRITEBYTECODE`: This prevents Python from writing out `pyc` files.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '`PYTHONUNBUFFERED`: This ensures that the Python `stdout` and `stderr` streams
    are sent straight to the terminal without first being buffered.'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The `WORKDIR` command is used to define the working directory of the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `pip` package of the image is upgraded.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `requirements.txt` file is copied to the working directory (`.`) of the
    parent Python image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Python packages in `requirements.txt` are installed in the image using `pip`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Django project source code is copied from the local directory to the working
    directory (`.`) directory of the image.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this `Dockerfile`, you have defined how the Docker image that will serve
    Django will be assembled. You can find the `Dockerfile` reference at [https://docs.docker.com/reference/dockerfile/](https://docs.docker.com/reference/dockerfile/).
  prefs: []
  type: TYPE_NORMAL
- en: Adding the Python requirements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `requirements.txt` file is used in the `Dockerfile` you created to install
    all of the necessary Python packages for the project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to the `educa` project directory, create a new file and name it `requirements.txt`.
    You may have already created this file before and copied the content for the `requirements.txt`
    file from [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt).
    If you haven’t done so, add the following lines to the newly created `requirements.txt`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In addition to the Python packages that you installed in the previous chapters,
    the `requirements.txt` file includes the following packages:'
  prefs: []
  type: TYPE_NORMAL
- en: '`psycopg`: This is the PostgreSQL adapter. You will use PostgreSQL for the
    production environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uwsgi`: A WSGI web server. You will configure this web server later to serve
    Django in the production environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`python-decouple`: Package to load environment variables easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start by setting up the Docker application in Docker Compose. We will
    create a Docker Compose file with the definition for the web server, database,
    and Redis services.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a Docker Compose file
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To define the services that will run in different Docker containers, we will
    use a Docker Compose file. The Compose file is a text file in YAML format, defining
    services, networks, and data volumes for a Docker application. YAML is a human-readable
    data-serialization language. You can see an example of a YAML file at [https://yaml.org/](https://yaml.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next to the `educa` project directory, create a new file and name it `docker-compose.yml`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'In this file, you define a `web` service. The sections to define this service
    are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`build`: This defines the build requirements for a service container image.
    This can be a single string defining a context path, or a detailed build definition.
    You provide a relative path with a single dot (`.`) to point to the same directory
    where the Compose file is located. Docker Compose will look for a `Dockerfile`
    at this location. You can read more about the `build` section at [https://docs.docker.com/compose/compose-file/build/](https://docs.docker.com/compose/compose-file/build/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`command`: This overrides the default command of the container. You run the
    Django development server using the `runserver` management command. The project
    is served on host `0.0.0.0`, which is the default Docker IP, on port `8000`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restart`: This defines the restart policy for the container. Using `always`,
    the container is always restarted if it stops. This is useful for a production
    environment where you want to minimize downtime. You can read more about the restart
    policy at [https://docs.docker.com/config/containers/start-containers-automatically/](https://docs.docker.com/config/containers/start-containers-automatically/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`volumes`: Data in Docker containers is not permanent. Each Docker container
    has a virtual filesystem that is populated with the files of the image and that
    is destroyed when the container is stopped. Volumes are the preferred method to
    persist data generated and used by Docker containers. In this section, you mount
    the local . directory to the `/code` directory of the image. You can read more
    about Docker volumes at [https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ports`: This exposes container ports. Host port `8000` is mapped to container
    port `8000`, on which the Django development server is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`environment`: This defines environment variables. You set the `DJANGO_SETTINGS_MODULE`
    environment variable to use the production Django settings file `educa.settings.prod`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that in the Docker Compose file definition, you are using the Django development
    server to serve the application. The Django development server is not suitable
    for production use, so you will replace it later with a WSGI Python web server.
  prefs: []
  type: TYPE_NORMAL
- en: You can find information about the Docker Compose specification at [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/).
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, assuming your parent directory is named `Chapter17`, the file
    structure should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Open a shell in the parent directory, where the `docker-compose.yml` file is
    located, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'This will start the Docker app defined in the Docker Compose file. You will
    see an output that includes the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The Docker container for your Django project is running!
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://0.0.0.0:8000/admin/` with your browser. You should see the Django
    administration site login form. It should look like *Figure 17.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.2: The Django administration site login form with no CSS styles applied'
  prefs: []
  type: TYPE_NORMAL
- en: CSS styles are not loaded. You are using `DEBUG=False`, so URL patterns for
    serving static files are not being included in the main `urls.py` file of the
    project. Remember that the Django development server is not suitable for serving
    static files. You will configure a server for serving static files later in this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: If you access any other URL of your site, you might get an HTTP `500` error
    because you haven’t configured a database for the production environment yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the Docker Desktop app. You will see the following containers:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.3: The chapter17 application and the web-1 container in Docker Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: The `chapter17` Docker application is running and it has a single container
    named `web-1`, which is running on port `8000`. The name for the Docker application
    is generated dynamically using the name of the directory where the Docker Compose
    file is located, in this case, `chapter17`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Under **Images**, you will see the image built for the `web` service, as in
    *Figure 17.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.4: The chapter17 application and the web-1 container in Docker Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: The `chapter17-web` image has been built using the `Dockerfile` you defined
    earlier and is used by the `web-1` container.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you are going to add a PostgreSQL service and a Redis service to your
    Docker application.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the PostgreSQL service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, you have mostly used the SQLite database. SQLite is simple
    and quick to set up, but for a production environment, you will need a more powerful
    database, such as PostgreSQL, MySQL, or Oracle. You used Docker to install PostgreSQL
    in *Chapter 3*, *Extending Your Blog Application*. You can find information about
    the official PostgreSQL Docker image at [https://hub.docker.com/_/postgres](https://hub.docker.com/_/postgres).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and add the following lines highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'With these changes, you define a service named `db` with the following subsections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image`: The service uses the base `postgres` Docker image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restart`: The restart policy is set to `always`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`volumes`: You mount the `./data/db` directory to the image directory `/var/lib/postgresql/data`
    to persist the database so that data stored in the database is maintained after
    the Docker application is stopped. This will create the local `data/db/` path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`environment`: You use the `POSTGRES_DB` (database name), `POSTGRES_USER`,
    and `POSTGRES_PASSWORD` variables with default values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The definition for the `web` service now includes the PostgreSQL environment
    variables for Django. You create a service dependency using `depends_on` so that
    the `web` service is started after the `db` service. This will guarantee the order
    of the container initialization, but it won’t guarantee that PostgreSQL is fully
    initiated before the Django web server is started. To solve this, you need to
    use a script that will wait on the availability of the database host and its TCP
    port. Docker recommends that you use the `wait-for-it` tool to control container
    initialization.
  prefs: []
  type: TYPE_NORMAL
- en: 'Download the `wait-for-it.sh` bash script from [https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh](https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh)
    and save the file next to the `docker-compose.yml` file. Then, edit the `docker-compose.yml`
    file and modify the `web` service definition as follows. The new code is highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this service definition, you use the `wait-for-it.sh` bash script to wait
    for the `db` host to be ready and accept connections on port `5432`, the default
    port for PostgreSQL, before starting the Django development server. You can read
    more about the service startup order in Compose at [https://docs.docker.com/compose/startup-order/](https://docs.docker.com/compose/startup-order/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s edit the Django settings. Edit the `educa/settings/prod.py` file and
    add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'In the production settings file, you use the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ENGINE`: You use the Django database backend for PostgreSQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NAME`, `USER`, and `PASSWORD`: You use the `config()` function of `python-decouple`
    to retrieve the `POSTGRES_DB` (database name), `POSTGRES_USER`, and `POSTGRES_PASSWORD`
    environment variables. You have set these environment variables in the Docker
    Compose file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HOST`: You use `db`, which is the container hostname for the database service
    defined in the Docker Compose file. A container hostname defaults to the container’s
    ID in Docker. That’s why you use the `db` hostname.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PORT`: You use the `5432` value, which is the default port for PostgreSQL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The first execution after adding the `db` service to the Docker Compose file
    will take longer because PostgreSQL needs to initialize the database. The output
    will contain the following two lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Both the PostgreSQL database and the Django application are ready. The production
    database is empty, so you need to apply database migrations.
  prefs: []
  type: TYPE_NORMAL
- en: Applying database migrations and creating a superuser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Open a different shell in the parent directory, where the `docker-compose.yml`
    file is located, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `docker compose exec` command allows you to execute commands in the container.
    You use this command to execute the `migrate` management command in the `web`
    Docker container.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, create a superuser with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Migrations have been applied to the database and you have created a superuser.
    You can access `http://localhost:8000/admin/` with the superuser credentials.
    CSS styles still won’t load because you haven’t configured serving static files
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: You have defined services to serve Django and PostgreSQL using Docker Compose.
    Next, you will add a service to serve Redis in the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the Redis service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s add a Redis service to the Docker Compose file. For this purpose, you
    will use the official Redis Docker image. You can find information about the official
    Redis Docker image at [https://hub.docker.com/_/redis](https://hub.docker.com/_/redis).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and add the following lines highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the previous code, you define the `cache` service with the following subsections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image`: The service uses the base `redis` Docker image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restart`: The restart policy is set to `always`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`volumes`: You mount the `./data/cache` directory to the `/data` image directory
    where any Redis writes will be persisted. This will create the local `data/cache/`
    path.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the `web` service definition, you add the `cache` service as a dependency,
    so that the `web` service is started after the `cache` service. The Redis server
    initializes fast, so you don’t need to use the `wait-for-it` tool in this case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `educa/settings/prod.py` file and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In these settings, you use the `cache` hostname that is automatically generated
    by Docker Compose using the name of the `cache` service and port `6379` used by
    Redis. You modify the Django `CACHE` setting and the `CHANNEL_LAYERS` setting
    used by Channels to use the production Redis URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the Docker Desktop application. You should see now the `chapter17` Docker
    application running a container for each service defined in the Docker Compose
    file: `db`, `cache`, and `web`, as in *Figure 17.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.5: The chapter17 application with the db-1, web-1, and cache-1 containers
    in Docker Desktop'
  prefs: []
  type: TYPE_NORMAL
- en: You are still serving Django with the Django development server, which, as you
    know, is meant for development only and not optimized for production use. Let’s
    replace it with the WSGI Python web server.
  prefs: []
  type: TYPE_NORMAL
- en: Serving Django through WSGI and NGINX
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django’s primary deployment platform is WSGI. **WSGI** stands for **Web Server
    Gateway Interface** , and it is the standard for serving Python applications on
    the web.
  prefs: []
  type: TYPE_NORMAL
- en: When you generate a new project using the `startproject` command, Django creates
    a `wsgi.py` file inside your project directory. This file contains a WSGI application
    callable, which is an access point to your application.
  prefs: []
  type: TYPE_NORMAL
- en: WSGI is used for both running your project with the Django development server
    and deploying your application with the server of your choice in a production
    environment. You can learn more about WSGI at [https://wsgi.readthedocs.io/en/latest/](https://wsgi.readthedocs.io/en/latest/).
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections we will use **uWSGI**, an open source web server that
    implements the WSGI specification.
  prefs: []
  type: TYPE_NORMAL
- en: Using uWSGI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, you have been using the Django development server to run
    projects in your local environment. However, the development server is not designed
    for production use, and deploying your application in a production environment
    will require a standard web server.
  prefs: []
  type: TYPE_NORMAL
- en: uWSGI is an extremely fast Python application server. It communicates with your
    Python application using the WSGI specification. uWSGI translates web requests
    into a format that your Django project can process.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s configure uWSGI to serve the Django project. You already added `uwsgi==2.0.20`
    to the `requirements.txt` file of the project, so uWSGI is already being installed
    in the Docker image of the `web` service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and modify the `web` service definition
    as follows. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Make sure to remove the `ports` section. uWSGI will be reachable with a socket,
    so you don’t need to expose a port in the container.
  prefs: []
  type: TYPE_NORMAL
- en: The new `command` for the image runs `uwsgi` and passes the `/code/config/uwsgi/uwsgi.ini`
    configuration file to it. Let’s create the configuration file for uWSGI.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring uWSGI
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'uWSGI allows you to define a custom configuration in an `.ini` file. Next to
    the `docker-compose.yml` file, create the `config/uwsgi/uwsgi.ini` file path.
    Assuming your parent directory is named `Chapter17`, the file structure should
    look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `config/uwsgi/uwsgi.ini` file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `uwsgi.ini` file, you define the following options:'
  prefs: []
  type: TYPE_NORMAL
- en: '`socket`: This is the Unix/TCP socket to bind the server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chdir`: This is the path to your project directory, so that uWSGI changes
    to that directory before loading the Python application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module`: This is the WSGI module to use. You set this to the `application`
    callable contained in the `wsgi` module of your project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`master`: This enables the master process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chmod-socket`: These are the file permissions to apply to the socket file.
    In this case, you use `666` so that NGINX can read/write the socket.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uid`: This is the user ID of the process once it’s started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gid`: This is the group ID of the process once it’s started.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vacuum`: Using `true` instructs uWSGI to clean up any temporary files or UNIX
    sockets it creates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `socket` option is intended for communication with some kind of third-party
    router, such as NGINX. You are going to run uWSGI using a socket and you are going
    to configure NGINX as your web server, which will communicate with uWSGI through
    the socket.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the list of available uWSGI options at [https://uwsgi-docs.readthedocs.io/en/latest/Options.html](https://uwsgi-docs.readthedocs.io/en/latest/Options.html).
  prefs: []
  type: TYPE_NORMAL
- en: You will not be able to access your uWSGI instance from your browser now, since
    it’s running through a socket. To complete the environment, we will use NGINX
    in front of uWSGI, to manage HTTP requests and pass application requests to uWSGI
    through the socket. Let’s complete the production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Using NGINX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are serving a website, you have to serve dynamic content, but you also
    need to serve static files, such as CSS style sheets, JavaScript files, and images.
    While uWSGI is capable of serving static files, it adds unnecessary overhead to
    HTTP requests and, therefore, it is encouraged to set up a web server, such as
    NGINX, in front of it.
  prefs: []
  type: TYPE_NORMAL
- en: NGINX is a web server focused on high concurrency, performance, and low memory
    usage. NGINX also acts as a reverse proxy, receiving HTTP and WebSocket requests
    and routing them to different backends.
  prefs: []
  type: TYPE_NORMAL
- en: Generally, you will use a web server, such as NGINX, in front of uWSGI for serving
    static files efficiently, and you will forward dynamic requests to uWSGI workers.
    By using NGINX, you can also apply different rules and benefit from its reverse
    proxy capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: We will add the NGINX service to the Docker Compose file using the official
    NGINX Docker image. You can find information about the official NGINX Docker image
    at [https://hub.docker.com/_/nginx](https://hub.docker.com/_/nginx).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and add the following lines highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'You have added the definition for the `nginx` service with the following subsections:'
  prefs: []
  type: TYPE_NORMAL
- en: '`image`: The service uses the base `nginx` Docker image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restart`: The restart policy is set to `always`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`volumes`: You mount the `./config/nginx` volume to the `/etc/nginx/templates`
    directory of the Docker image. This is where NGINX will look for a default configuration
    template. You also mount the local directory `.` to the `/code` directory of the
    image, so that NGINX can have access to static files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ports`: You expose port `80`, which is mapped to container port `80`. This
    is the default port for HTTP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s configure the NGINX web server.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NGINX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the following file path highlighted in bold under the `config/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `nginx/default.conf.template` file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the basic configuration for NGINX. In this configuration, you set up
    an `upstream` component named `uwsgi_app`, which points to the socket created
    by uWSGI. You use the `server` block with the following configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: You tell NGINX to listen on port `80`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You set the server name to both `www.educaproject.com` and `educaproject.com`.
    NGINX will serve incoming requests for both domains.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You use `stderr` for the `error_log` directive to get error logs written to
    the standard error file. The second parameter determines the logging level. You
    use `warn` to get warnings and errors of higher severity.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You point `access_log` to the standard output with `/dev/stdout`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You specify that any request under the `/` path has to be routed with the `uwsgi_app`
    socket to uWSGI.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You include the default uWSGI configuration parameters that come with NGINX.
    These are located at `/etc/nginx/uwsgi_params`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NGINX is now configured. You can find the NGINX documentation at [https://nginx.org/en/docs/](https://nginx.org/en/docs/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Open the `http://localhost/` URL in your browser. It’s not necessary to add
    a port to the URL because you are accessing the host through the standard HTTP
    port `80`. You should see the course list page with no CSS styles, like *Figure
    17.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.6: The course list page served with NGINX and uWSGI'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the request/response cycle of the production environment
    that you have set up:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.7: The production environment request/response cycle'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following happens when the client browser sends an HTTP request:'
  prefs: []
  type: TYPE_NORMAL
- en: NGINX receives the HTTP request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NGINX delegates the request to uWSGI through a socket.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: uWSGI passes the request to Django for processing.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Django returns an HTTP response that is passed back to NGINX, which in turn
    passes it back to the client browser.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you check the Docker Desktop application, you should see that there are
    four containers running:'
  prefs: []
  type: TYPE_NORMAL
- en: The `db` service is running PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `cache` service is running Redis
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `web` service is running uWSGI and Django
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `nginx` service is running NGINX
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s continue with the production environment setup. Instead of accessing our
    project using `localhost`, we will configure the project to use the `educaproject.com`
    hostname.
  prefs: []
  type: TYPE_NORMAL
- en: Using a hostname
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will use the `educaproject.com` hostname for your site. Since you are using
    a sample domain name, you need to redirect it to your local host.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Linux or macOS, edit the `/etc/hosts` file and add the following
    line to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: If you are using Windows, edit the `C:\Windows\System32\drivers\etc` file and
    add the same line.
  prefs: []
  type: TYPE_NORMAL
- en: By doing so, you are routing the `educaproject.com` and `www.educaproject.com`
    hostnames to your local server. In a production server, you won’t need to do this,
    since you will have a fixed IP address and you will point your hostname to your
    server in your domain’s DNS configuration.
  prefs: []
  type: TYPE_NORMAL
- en: Open `http://educaproject.com/` in your browser. You should be able to see your
    site, still without any static assets loaded. Your production environment is almost
    ready.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can restrict the hosts that can serve your Django project. Edit the
    `educa/settings/prod.py` production settings file of your project and change the
    `ALLOWED_HOSTS` setting, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Django will only serve your application if it’s running under any of these hostnames.
    You can read more about the `ALLOWED_HOSTS` setting at [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts).
  prefs: []
  type: TYPE_NORMAL
- en: The production environment is almost ready. Let’s continue by configuring NGINX
    to serve static files.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static and media assets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: uWSGI is capable of serving static files flawlessly, but it is not as fast and
    effective as NGINX. For the best performance, you will use NGINX to serve static
    files in your production environment. You will set up NGINX to serve both the
    static files of your application (CSS style sheets, JavaScript files, and images)
    and media files uploaded by instructors for the course contents.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings/base.py` file and add the following line just below the
    `STATIC_URL` setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This is the root directory for all static files of the project. Next, you are
    going to collect the static files from the different Django applications into
    the common directory.
  prefs: []
  type: TYPE_NORMAL
- en: Collecting static files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each application in your Django project may contain static files in a `static/`
    directory. Django provides a command to collect static files from all applications
    into a single location. This simplifies the setup for serving static files in
    production. The `collectstatic` command collects the static files from all applications
    of the project into the path defined with the `STATIC_ROOT` setting.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Open another shell in the parent directory, where the `docker-compose.yml`
    file is located, and run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that you can alternatively run the following command in the shell, from
    the `educa/` project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Both commands will have the same effect since the base local directory is mounted
    to the Docker image. Django will ask whether you want to override any existing
    files in the root directory. Type `yes` and press *Enter*. You will see the following
    output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Files located under the `static/` directory of each application present in the
    `INSTALLED_APPS` setting have been copied to the global `/educa/static/` project
    directory.
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files with NGINX
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Edit the `config/nginx/default.conf.template` file and add the following lines
    highlighted in bold to the `server` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'These directives tell NGINX to serve static files located under the `/static/`
    and `/media/` paths directly. These paths are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/static/`: This corresponds to the path of the `STATIC_URL` setting. The target
    path corresponds to the value of the `STATIC_ROOT` setting. You use it to serve
    the static files of your application from the directory mounted to the NGINX Docker
    image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/media/`: This corresponds to the path of the `MEDIA_URL` setting, and its
    target path corresponds to the value of the `MEDIA_ROOT` setting. You use it to
    serve the media files uploaded to the course contents from the directory mounted
    to the NGINX Docker image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 17.8* shows the current setup of the production environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.8: The production environment request/response cycle, including static
    files'
  prefs: []
  type: TYPE_NORMAL
- en: Files under the `/static/` and `/media/` paths are now served by NGINX directly,
    instead of being forwarded to uWSGI. Requests to any other path are still passed
    by NGINX to uWSGI through the UNIX socket.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://educaproject.com/` in your browser. You should see the following
    screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.9: The course list page served with NGINX and uWSGI'
  prefs: []
  type: TYPE_NORMAL
- en: Static resources, such as CSS style sheets and images, are now loaded correctly.
    HTTP requests for static files are now being served by NGINX directly, instead
    of being forwarded to uWSGI.
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully configured NGINX for serving static files. Next, you are
    going to perform some checks on your Django project to validate it for a production
    environment and you are going to serve your site under HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: Securing your site with SSL/TLS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **TLS** protocol is the standard for serving websites through a secure connection.
    The TLS predecessor is SSL. Although SSL is now deprecated, in multiple libraries
    and online documentation, you will find references to both the terms TLS and SSL.
    It’s strongly encouraged that you serve your websites over HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you are going to check your Django project for any issues and
    validate it for a production deployment. You will also prepare the project to
    be served over HTTPS. Then, you are going to configure an SSL/TLS certificate
    in NGINX to serve your site securely.
  prefs: []
  type: TYPE_NORMAL
- en: Checking your project for production
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django includes a system check framework for validating your project at any
    time. The check framework inspects the applications installed in your Django project
    and detects common problems. Checks are triggered implicitly when you run management
    commands like `runserver` and `migrate`. However, you can trigger checks explicitly
    with the `check` management command.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Django’s system check framework at [https://docs.djangoproject.com/en/5.0/topics/checks/](https://docs.djangoproject.com/en/5.0/topics/checks/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s confirm that the check framework does not raise any issues for your project.
    Open the shell in the `educa` project directory and run the following command
    to check your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The system check framework didn’t identify any issues. If you use the `--deploy`
    option, the system check framework will perform additional checks that are relevant
    for a production deployment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the `educa` project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: The check framework has identified five issues (zero errors and five warnings).
    All warnings are related to security-related settings.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s address the `security.W009` issue. Edit the `educa/settings/base.py` file
    and modify the `SECRET_KEY` setting by removing the `django-insecure-` prefix
    and adding additional random characters to generate a string with at least 50
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: Run the `check` command again and verify that the `security.W009` issue is not
    raised anymore. The rest of the warnings are related to SSL/TLS configuration.
    We will address them next.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your Django project for SSL/TLS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django comes with specific settings for SSL/TLS support. You are going to edit
    the production settings to serve your site over HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `educa/settings/prod.py` settings file and add the following settings
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'These settings are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CSRF_COOKIE_SECURE`: Use a secure cookie for **cross-site request forgery**
    (**CSRF**) protection. With `True`, browsers will only transfer the cookie over
    HTTPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SESSION_COOKIE_SECURE`: Use a secure session cookie. With `True`, browsers
    will only transfer the cookie over HTTPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECURE_SSL_REDIRECT`: This indicates whether HTTP requests have to be redirected
    to HTTPS.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django will now redirect HTTP requests to HTTPS; session and CSRF cookies will
    be sent only over HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the main directory of your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Only one warning remains, `security.W004`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: This warning is related to the **HTTP Strict Transport Security** (**HSTS**)
    policy. The HSTS policy prevents users from bypassing warnings and connecting
    to a site with an expired, self-signed, or otherwise invalid SSL certificate.
    In the next section, we will use a self-signed certificate for our site, so we
    will ignore this warning.
  prefs: []
  type: TYPE_NORMAL
- en: When you own a real domain, you can apply for a trusted **Certificate Authority**
    (**CA**) to issue an SSL/TLS certificate for it, so that browsers can verify its
    identity. In that case, you can give a value to `SECURE_HSTS_SECONDS` higher than
    `0`, which is the default value. You can learn more about the HSTS policy at [https://docs.djangoproject.com/en/5.0/ref/middleware/#http-strict-transport-security](https://docs.djangoproject.com/en/5.0/ref/middleware/#http-strict-transport-security).
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully fixed the rest of the issues raised by the check framework.
    You can read more about the Django deployment checklist at [https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/](https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SSL/TLS certificate
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new directory inside the `educa` project directory and name it `ssl`.
    Then, generate an SSL/TLS certificate from the command line with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'This will generate a private key and a 2048-bit SSL/TLS certificate that is
    valid for 10 years. This certificate is issued for the `*.educaproject.com` hostname.
    This is a wildcard certificate; by using the * wildcard character in the domain
    name, the certificate can be used for any subdomain of `educaproject.com`, such
    as `www.educaproject.com` or `django.educaproject.com`. After generating the certificate,
    the `educa/ssl/` directory will contain two files: `educa.key` (the private key)
    and `educa.crt` (the certificate).'
  prefs: []
  type: TYPE_NORMAL
- en: You will need at least OpenSSL 1.1.1 or LibreSSL 3.1.0 to use the `-addext`
    option. You can check the OpenSSL location in your machine with the `which openssl`
    command and you can check the version with the `openssl version` command.
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can use the SSL/TLS certificate provided in the source code
    for this chapter. You will find the certificate at [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/educa/ssl/](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/educa/ssl/).
    Note that you should generate a private key and not use this certificate in production.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NGINX to use SSL/TLS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and add the following line highlighted in
    bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: The NGINX container host will be accessible through port `80` (HTTP) and port
    `443` (HTTPS). The host port `443` is mapped to the container port `443`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config/nginx/default.conf.template` file of the `educa` project and
    edit the `server` block to include SSL/TLS, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: With the preceding code, NGINX now listens both to HTTP over port `80` and HTTPS
    over port `443`. You indicate the path to the SSL/TLS certificate with `ssl_certificate`
    and the certificate key with `ssl_certificate_key`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `https://educaproject.com/` with your browser. You should see a warning
    message similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.10: An invalid certificate warning'
  prefs: []
  type: TYPE_NORMAL
- en: This screen might vary depending on your browser. It alerts you that your site
    is not using a trusted or valid certificate; the browser can’t verify the identity
    of your site. This is because you signed your own certificate instead of obtaining
    one from a trusted CA. When you own a real domain, you can apply for a trusted
    CA to issue an SSL/TLS certificate for it, so that browsers can verify its identity.
    If you want to obtain a trusted certificate for a real domain, you can refer to
    the Let’s Encrypt project created by the Linux Foundation. It is a nonprofit CA
    that simplifies obtaining and renewing trusted SSL/TLS certificates for free.
    You can find more information at [https://letsencrypt.org](https://letsencrypt.org).
  prefs: []
  type: TYPE_NORMAL
- en: Click on the link or button that provides additional information and choose
    to visit the website, ignoring warnings. The browser might ask you to add an exception
    for this certificate or verify that you trust it. If you are using Chrome, you
    might not see any option to proceed to the website. If this is the case, type
    `thisisunsafe` and press *Enter* directly in Chrome on the warning page. Chrome
    will then load the website. Note that you do this with your own issued certificate;
    don’t trust any unknown certificate or bypass the browser SSL/TLS certificate
    checks for other domains.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you access the site, the browser will display a lock icon next to the
    URL like *Figure 17.11*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.11: The browser address bar, including a secure connection padlock
    icon'
  prefs: []
  type: TYPE_NORMAL
- en: 'Other browsers might display a warning indicating that the certificate is not
    trusted, like *Figure 17.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.12: The browser address bar, including a warning message'
  prefs: []
  type: TYPE_NORMAL
- en: Your browser might mark the certificate as unsafe, but you are using it for
    testing purposes only. You are now serving your site securely over HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting HTTP traffic over to HTTPS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are redirecting HTTP requests to HTTPS with Django using the `SECURE_SSL_REDIRECT`
    setting. Any request using `http://` is redirected to the same URL using `https://`.
    However, this can be handled in a more efficient manner using NGINX.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config/nginx/default.conf.template` file and add the following lines
    highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: In this code, you remove the directive `listen 80;` from the original `server`
    block, so that the platform is only available over HTTPS (port `443`). On top
    of the original `server` block, you add an additional `server` block that only
    listens on port `80` and redirects all HTTP requests to HTTPS. To achieve this,
    you return an HTTP response code `301` (permanent redirect) that redirects to
    the `https://` version of the requested URL using the `$host` and `$request_uri`
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a shell in the parent directory, where the `docker-compose.yml` file is
    located, and run the following command to reload NGINX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This runs the `nginx -s reload` command in the `nginx` container. You are now
    redirecting all HTTP traffic to HTTPS using NGINX.
  prefs: []
  type: TYPE_NORMAL
- en: Your environment is now secured with TLS/SSL. To complete the production environment
    setup, the only remaining step is integrating Daphne to handle asynchronous requests,
    and get our course chat rooms running in production.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Daphne for Django Channels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 16*, *Building a Chat Server*, you used Django Channels to build
    a chat server using WebSockets and you used Daphne to serve asynchronous requests
    by replacing the standard Django `runserver` command. We will add Daphne to our
    production environment.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a new service in the Docker Compose file to run the Daphne web
    server.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and add the following lines inside the `services`
    block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'The `daphne` service definition is very similar to the `web` service. The image
    for the `daphne` service is also built with the `Dockerfile` you previously created
    for the `web` service. The main differences are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`working_dir` changes the working directory of the image to `/code/educa/`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`command` runs the `educa.asgi:application` application defined in the `educa/asgi.py`
    file with `daphne` in the `0.0.0.0` hostname and port `9001`. It also uses the
    `wait-for-it` bash script to wait for the PostgreSQL database to be ready before
    initializing the web server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since you are running Django on production, Django checks the `ALLOWED_HOSTS`
    when receiving HTTP requests. We will implement the same validation for WebSocket
    connections.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `educa/asgi.py` file of your project and add the following lines highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The Channels configuration is now ready for production.
  prefs: []
  type: TYPE_NORMAL
- en: Using secure connections for WebSockets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have configured NGINX to use secure connections with SSL/TLS. You need to
    change `ws` (WebSocket) connections to use the `wss` (WebSocket Secure) protocol
    now, in the same way that HTTP connections are now being served over HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `chat/room.html` template of the `chat` application and find the following
    line in the `domready` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace that line with the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: By using `wss://` instead of `ws://`, you are explicitly connecting to a secure
    WebSocket.
  prefs: []
  type: TYPE_NORMAL
- en: Including Daphne in the NGINX configuration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your production setup, you will run Daphne on a UNIX socket and use NGINX
    in front of it. NGINX will pass requests to Daphne based on the requested path.
    You will expose Daphne to NGINX through a UNIX socket interface, just like the
    uWSGI setup.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config/nginx/default.conf.template` file and make it look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: In this configuration, you set up a new upstream named `daphne`, which points
    to the `daphne` host and port `9001`. In the `server` block, you configure the
    `/ws/` location to forward requests to Daphne. You use the `proxy_pass` directive
    to pass requests to Daphne and you include some additional proxy directives.
  prefs: []
  type: TYPE_NORMAL
- en: With this configuration, NGINX will pass any URL request that starts with the
    `/ws/` prefix to Daphne and the rest to uWSGI, except for files under the `/static/`
    or `/media/` paths, which will be served directly by NGINX.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.13* shows the final production setup, including the Daphne server:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.13: The production environment request/response cycle, including
    Daphne'
  prefs: []
  type: TYPE_NORMAL
- en: NGINX runs in front of uWSGI and Daphne as a reverse proxy server. NGINX faces
    the web and passes requests to the application server (uWSGI or Daphne) based
    on their path prefix. Besides this, NGINX also serves static files and redirects
    non-secure requests to secure ones. This setup reduces downtime, consumes fewer
    server resources, and provides greater performance and security.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Use your browser to create a sample course with an instructor user, log in
    with a user who is enrolled in the course, and open `https://educaproject.com/chat/room/1/`
    with your browser. You should be able to send and receive messages like the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.14: Course chat room messages served with NGINX and Daphne'
  prefs: []
  type: TYPE_NORMAL
- en: Daphne is working correctly, and NGINX is passing WebSocket requests to it.
    All connections are secured with SSL/TLS.
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have built a custom production-ready stack using NGINX,
    uWSGI, and Daphne. You could do further optimization for additional performance
    and enhanced security through configuration settings in NGINX, uWSGI, and Daphne.
    However, this production setup is a great start!
  prefs: []
  type: TYPE_NORMAL
- en: You have used Docker Compose to define and run services in multiple containers.
    Note that you can use Docker Compose both for local development environments as
    well as production environments. You can find additional information on using
    Docker Compose in production at [https://docs.docker.com/compose/production/](https://docs.docker.com/compose/production/).
  prefs: []
  type: TYPE_NORMAL
- en: For more advanced production environments, you will need to dynamically distribute
    containers across a varying number of machines. For that, instead of Docker Compose,
    you will need an orchestrator like Docker Swarm mode or Kubernetes. You can find
    information about the Docker Swarm mode at [https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/),
    and about Kubernetes at [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/).
  prefs: []
  type: TYPE_NORMAL
- en: Note that managing systems and cloud infrastructure demands expertise in configuration,
    optimization, and security. To ensure a secure and efficient production environment,
    consider bringing a systems/DevOps expert on board or enhancing your own expertise
    in these areas.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a complete environment that processes HTTP requests in a performant
    manner, it’s a good time to dive into middleware for request/response processing
    across our application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom middleware
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You already know the `MIDDLEWARE` setting, which contains the middleware for
    your project. You can think of it as a low-level plugin system, allowing you to
    implement hooks that get executed in the request/response process. Each middleware
    is responsible for some specific action that will be executed for all HTTP requests
    or responses.
  prefs: []
  type: TYPE_NORMAL
- en: You should avoid adding expensive processing to middleware since they are executed
    in every single request.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.15* shows the middleware execution in Django:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.15: Middleware execution in Django'
  prefs: []
  type: TYPE_NORMAL
- en: When an HTTP request is received, middleware is executed in order of appearance
    in the `MIDDLEWARE` setting. When an HTTP response has been generated by Django,
    the response passes through all middleware back in reverse order.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.16* shows the execution order of the middleware components included
    in the `MIDDLEWARE` setting when creating a project with the `startproject` management
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.16: Execution order for default middleware components'
  prefs: []
  type: TYPE_NORMAL
- en: 'Middleware can be written as a function, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: A middleware factory is a callable that takes a `get_response` callable and
    returns middleware. The `middleware` callable takes a request and returns a response,
    just like a view. The `get_response` callable might be the next middleware in
    the chain or the actual view in the case of the last listed middleware.
  prefs: []
  type: TYPE_NORMAL
- en: If any middleware returns a response without calling its `get_response` callable,
    it short-circuits the process; no further middleware gets executed (nor does the
    view), and the response returns through the same layers that the request passed
    in through.
  prefs: []
  type: TYPE_NORMAL
- en: The order of middleware components in the `MIDDLEWARE` setting is very important
    because each component may depend on the data set in the request by other middleware
    components executed previously.
  prefs: []
  type: TYPE_NORMAL
- en: When adding a new middleware to the `MIDDLEWARE` setting, make sure to place
    it in the right position.
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about middleware at [https://docs.djangoproject.com/en/5.0/topics/http/middleware/](https://docs.djangoproject.com/en/5.0/topics/http/middleware/).
  prefs: []
  type: TYPE_NORMAL
- en: Creating subdomain middleware
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are going to create custom middleware to allow courses to be accessible
    through a custom subdomain. Each course detail URL, which looks like `https://educaproject.com/course/django/`,
    will also be accessible through the subdomain that makes use of the course slug,
    such as `https://django.educaproject.com/`. Users will be able to use the subdomain
    as a shortcut to access the course details. Any requests to subdomains will be
    redirected to each corresponding course detail URL.
  prefs: []
  type: TYPE_NORMAL
- en: Middleware can reside anywhere within your project. However, it’s recommended
    that you create a `middleware.py` file in your application directory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `courses` application directory and name it `middleware.py`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'When an HTTP request is received, you perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: You get the hostname that is being used in the request and divide it into parts.
    For example, if the user is accessing `mycourse.educaproject.com`, you generate
    the `['mycourse', 'educaproject', 'com']` list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You check whether the hostname includes a subdomain by checking whether the
    split generated more than two elements. If the hostname includes a subdomain,
    and this is not `www`, you try to get the course with the slug provided in the
    subdomain.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a course is not found, you raise an HTTP `404` exception. Otherwise, you
    redirect the browser to the course detail URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `settings/base.py` file of the project and add `''courses.middleware.subdomain_course_middleware''`
    at the bottom of the `MIDDLEWARE` list, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: The middleware will now be executed in every request.
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the hostnames allowed to serve your Django project are specified
    in the `ALLOWED_HOSTS` setting. Let’s change this setting so that any possible
    subdomain of `educaproject.com` is allowed to serve your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `educa/settings/prod.py` file and modify the `ALLOWED_HOSTS` setting,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: A value that begins with a period is used as a subdomain wildcard; `'.educaproject.com'`
    will match `educaproject.com` and any subdomain for this domain, for example,
    `course.educaproject.com` and `django.educaproject.com`.
  prefs: []
  type: TYPE_NORMAL
- en: Serving multiple subdomains with NGINX
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You need NGINX to be able to serve your site with any possible subdomain. Edit
    the `config/nginx/default.conf.template` file at these two occurrences:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace the occurences of the preceding line with the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'By using the asterisk, this rule applies to all subdomains of `educaproject.com`.
    In order to test your middleware locally, you need to add any subdomains you want
    to test to `/etc/hosts`. For testing the middleware with a `Course` object with
    the slug `django`, add the following line to your `/etc/hosts` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: Then, open `https://django.educaproject.com/` in your browser. The middleware
    will find the course by the subdomain and redirect your browser to `https://educaproject.com/course/django/`.
  prefs: []
  type: TYPE_NORMAL
- en: Your custom subdomain middleware is working!
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will delve into a final topic that is extremely useful for projects:
    automating tasks and making them available as commands.'
  prefs: []
  type: TYPE_NORMAL
- en: Implementing custom management commands
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django allows your applications to register custom management commands for the
    `manage.py` utility. For example, you used the `makemessages` and `compilemessages`
    management commands in *Chapter 11*, *Adding Internationalization to Your Shop*,
    to create and compile translation files.
  prefs: []
  type: TYPE_NORMAL
- en: A management command consists of a Python module containing a `Command` class
    that inherits from `django.core.management.base.BaseCommand` or one of its subclasses.
    You can create simple commands or make them take positional and optional arguments
    as input.
  prefs: []
  type: TYPE_NORMAL
- en: Django looks for management commands in the `management/commands/` directory
    for each active application in the `INSTALLED_APPS` setting. Each module found
    is registered as a management command named after it.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about custom management commands at [https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/](https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/).
  prefs: []
  type: TYPE_NORMAL
- en: You are going to create a custom management command to remind students to enroll
    in at least one course. The command will send an email reminder to users who have
    been registered for longer than a specified period and who aren’t enrolled in
    any course yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following file structure inside the `students` application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `enroll_reminder.py` file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: 'This is your `enroll_reminder` command. The preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Command` class inherits from `BaseCommand`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You include a `help` attribute. This attribute provides a short description
    of the command that is printed if you run the `python manage.py help enroll_reminder`
    command.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You use the `add_arguments()` method to add the `--days` named argument. This
    argument is used to specify the minimum number of days a user has to be registered,
    without having enrolled in any course, in order to receive the reminder.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `handle()` command contains the actual command. You get the `days` attribute
    parsed from the command line. If this is not set, you use `0`, so that a reminder
    is sent to all users that haven’t enrolled on a course, regardless of when they
    registered. You use the `timezone` utility provided by Django to retrieve the
    current timezone-aware date with `timezone.now().date()`. (You can set the timezone
    for your project with the `TIME_ZONE` setting.) You retrieve the users who have
    been registered for more than the specified days and are not enrolled in any courses
    yet. You achieve this by annotating the QuerySet with the total number of courses
    each user is enrolled in. You generate the reminder email for each user and append
    it to the `emails` list. Finally, you send the emails using the `send_mass_mail()`
    function, which is optimized to open a single SMTP connection for sending all
    emails, instead of opening one connection per email sent.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You have created your first management command. Open the shell and run your
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: 'If you don’t have a local SMTP server running, you can look at *Chapter 2*,
    *Enhancing Your Blog with Advanced Features*, where you configured the SMTP settings
    for your first Django project. Alternatively, you can add the following setting
    to the `base.py` file to make Django output emails to the standard output during
    development:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'Django also includes a utility to call management commands using Python. You
    can run management commands from your code as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Congratulations! You can now create custom management commands for your applications.
  prefs: []
  type: TYPE_NORMAL
- en: Django management commands can be scheduled to run automatically using tools
    like cron or Celery Beat. Cron is a time-based job scheduler in Unix-like operating
    systems that enables users to schedule scripts or commands to run at specified
    times and intervals. You can read more about cron at [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).
    On the other hand, Celery Beat is a scheduler that works with Celery to run functions
    at designated intervals. You can learn more about Celery Beat at [https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html](https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html).
    By using either cron or Celery Beat, you can ensure your tasks are executed regularly
    without manual intervention.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created a production environment using Docker Compose.
    You configured NGINX, uWSGI, and Daphne to serve your application in production.
    You secured your environment using SSL/TLS. You also implemented custom middleware
    and you learned how to create custom management commands.
  prefs: []
  type: TYPE_NORMAL
- en: You have reached the end of this book. Congratulations! You have learned the
    skills required to build successful web applications with Django. This book has
    guided you through the process of developing real-life projects and integrating
    Django with other technologies. Now, you are ready to create your own Django project,
    whether it is a simple prototype or a large-scale web application.
  prefs: []
  type: TYPE_NORMAL
- en: Good luck with your next Django adventure!
  prefs: []
  type: TYPE_NORMAL
- en: Expanding your project using AI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you are presented with a task to extend your project, accompanied
    by a sample prompt for ChatGPT to assist you. To engage with ChatGPT, visit [https://chat.openai.com/](https://chat.openai.com/).
    If this is your first interaction with ChatGPT, you can revisit the *Expanding
    your project using AI* section in *Chapter 3, Extending Your Blog Application*.
  prefs: []
  type: TYPE_NORMAL
- en: We have developed a comprehensive e-learning platform. However, when students
    are enrolled in multiple courses, each containing several modules, it can be challenging
    for them to remember where they last left off. To address this, let’s use ChatGPT
    in conjunction with Redis to store and retrieve each student’s progress within
    a course. For guidance, refer to the prompt provided at [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/prompts/task.md](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/prompts/task.md).
  prefs: []
  type: TYPE_NORMAL
- en: When you’re refining your Python code, ChatGPT can help you explore different
    refactoring strategies. Discuss your current approach, and ChatGPT can provide
    advice on making your code more Pythonic, utilizing principles like **don’t repeat
    yourself** (**DRY**) and modular design for cleaner, more maintainable code.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Compose overview: [https://docs.docker.com/compose/](https://docs.docker.com/compose/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing Docker Compose: [https://docs.docker.com/compose/install/compose-desktop/](https://docs.docker.com/compose/install/compose-desktop/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Python Docker image: [https://hub.docker.com/_/python](https://hub.docker.com/_/python)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dockerfile reference: [https://docs.docker.com/reference/dockerfile/](https://docs.docker.com/reference/dockerfile/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirements.txt` file for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'YAML file example: [https://yaml.org/](https://yaml.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dockerfile build` section: [https://docs.docker.com/compose/compose-file/build/](https://docs.docker.com/compose/compose-file/build/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker restart policy: [https://docs.docker.com/config/containers/start-containers-automatically/](https://docs.docker.com/config/containers/start-containers-automatically/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker volumes: [https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Compose specification: [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official PostgreSQL Docker image: [https://hub.docker.com/_/postgres](https://hub.docker.com/_/postgres)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wait-for-it.sh` bash script for Docker: [https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh](https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Service startup order in Compose: [https://docs.docker.com/compose/startup-order/](https://docs.docker.com/compose/startup-order/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Redis Docker image: [https://hub.docker.com/_/redis](https://hub.docker.com/_/redis)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WSGI documentation: [https://wsgi.readthedocs.io/en/latest/](https://wsgi.readthedocs.io/en/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List of uWSGI options: [https://uwsgi-docs.readthedocs.io/en/latest/Options.html](https://uwsgi-docs.readthedocs.io/en/latest/Options.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official NGINX Docker image: [https://hub.docker.com/_/nginx](https://hub.docker.com/_/nginx)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NGINX documentation: [https://nginx.org/en/docs/](https://nginx.org/en/docs/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALLOWED_HOSTS` setting: [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django’s system check framework: [https://docs.djangoproject.com/en/5.0/topics/checks/](https://docs.djangoproject.com/en/5.0/topics/checks/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTTP Strict Transport Security policy with Django: [https://docs.djangoproject.com/en/5.0/ref/middleware/#http-strict-transport-security](https://docs.djangoproject.com/en/5.0/ref/middleware/#http-strict-transport-security)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django deployment checklist: [https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/](https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Self-generated SSL/TLS certificate directory: [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/educa/ssl/](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/educa/ssl/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s Encrypt Certificate Authority: [https://letsencrypt.org/](https://letsencrypt.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using Docker Compose in production: [https://docs.docker.com/compose/production/](https://docs.docker.com/compose/production/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Swarm mode: [https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kubernetes: [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django middleware: [https://docs.djangoproject.com/en/5.0/topics/http/middleware/](https://docs.djangoproject.com/en/5.0/topics/http/middleware/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating custom management commands: [https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/](https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cron`: [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`celery beat`: [https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html](https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Django development experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more.Scan the QR code or visit the link
    to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/Django5ByExample](https://packt.link/Django5ByExample)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code287089408934129031.png)'
  prefs: []
  type: TYPE_IMG
