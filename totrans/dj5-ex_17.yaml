- en: '17'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '17'
- en: Going Live
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 上线
- en: In the previous chapter, you built a real-time chat server for students using
    Django Channels. Now that you have created a fully functional e-learning platform,
    you need to set up a production environment so that it can be accessed over the
    internet. Until now, you have been working in a development environment, using
    the Django development server to run your site. In this chapter, you will learn
    how to set up a production environment that is able to serve your Django project
    in a secure and efficient manner.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，您使用Django Channels为学生们构建了一个实时聊天服务器。现在，您已经创建了一个功能齐全的在线学习平台，您需要设置一个生产环境，以便它可以通过互联网访问。到目前为止，您一直在开发环境中工作，使用Django开发服务器运行您的网站。在本章中，您将学习如何设置一个能够以安全高效的方式服务Django项目的生产环境。
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Configuring Django settings for multiple environments
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为多个环境配置Django设置
- en: Using Docker Compose to run multiple services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Compose运行多个服务
- en: Setting up a web server with uWSGI and Django
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用uWSGI和Django设置Web服务器
- en: Serving PostgreSQL and Redis with Docker Compose
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker Compose服务PostgreSQL和Redis
- en: Using the Django system check framework
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django系统检查框架
- en: Serving NGINX with Docker
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Docker服务NGINX
- en: Serving static assets through NGINX
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过NGINX服务静态资源
- en: Securing connections through **Transport Layer Security** (**TLS**) / **Secure
    Sockets Layer** (**SSL**)
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过**传输层安全性**（**TLS**）/ **安全套接字层**（**SSL**）来保护连接
- en: Using the Daphne **Asynchronous Server Gateway Interface** (**ASGI**) server
    for Django Channels
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Daphne **异步服务器网关接口**（**ASGI**）服务器为Django Channels服务
- en: Creating a custom Django middleware
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义Django中间件
- en: Implementing custom Django management commands
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实现自定义Django管理命令
- en: In previous chapters, diagrams at the start represented views, templates, and
    end-to-end functionalities. This chapter, however, shifts focus to setting up
    a production environment. Instead, you will find specific diagrams to illustrate
    the environment setup throughout the chapter.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，开头的图表代表了视图、模板和端到端功能。然而，本章的重点转向了设置生产环境。相反，您将在本章中找到特定的图表来展示环境设置。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17)找到。
- en: All Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes along with this chapter. You can follow the
    instructions to install each Python module below or you can install all requirements
    at once with the `python -m pip install -r requirements.txt` command.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有Python模块都包含在本章源代码中的`requirements.txt`文件中。您可以根据以下说明安装每个Python模块，或者可以使用`python
    -m pip install -r requirements.txt`命令一次性安装所有依赖。
- en: Creating a production environment
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建生产环境
- en: It’s time to deploy your Django project in a production environment. You will
    start by configuring Django settings for multiple environments, and then you will
    set up a production environment.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候在生产环境中部署您的Django项目了。您将首先为多个环境配置Django设置，然后设置一个生产环境。
- en: Managing settings for multiple environments
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 管理多个环境的设置
- en: In real-world projects, you will have to deal with multiple environments. You
    will usually have at least a local environment for development and a production
    environment for serving your application. You could have other environments as
    well, such as testing or staging environments.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实世界的项目中，您将不得不处理多个环境。您通常至少需要一个用于开发的本地环境和一个用于服务应用程序的生产环境。您还可以有其他环境，例如测试或预发布环境。
- en: Some project settings will be common to all environments, but others will be
    specific to each environment. Usually, you will use a base file that defines common
    settings, and a settings file per environment that overrides any necessary settings
    and defines additional ones.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 一些项目设置将适用于所有环境，但其他设置将针对每个环境特定。通常，您将使用一个定义通用设置的基文件，以及每个环境的设置文件，该文件覆盖必要的设置并定义额外的设置。
- en: 'We will manage the following environments:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将管理以下环境：
- en: '`local`: The local environment to run the project on your machine'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local`：在您的机器上运行项目的本地环境'
- en: '`prod`: The environment for deploying your project on a production server'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prod`：将您的项目部署到生产服务器的环境'
- en: Create a `settings/` directory next to the `settings.py` file of the `educa`
    project. Rename the `settings.py` file to `base.py` and move it into the new `settings/`
    directory.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在`educa`项目的`settings.py`文件旁边创建一个`settings/`目录。将`settings.py`文件重命名为`base.py`并将其移动到新的`settings/`目录中。
- en: 'Create the following additional files inside the `settings/` folder so that
    the new directory looks as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`settings/`文件夹内创建以下附加文件，以便新的目录看起来如下：
- en: '[PRE0]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These files are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 这些文件如下：
- en: '`base.py`: The base settings file, which contains common settings (previously
    `settings.py`)'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`base.py`：基础设置文件，其中包含常用设置（之前为`settings.py`）'
- en: '`local.py`: Custom settings for your local environment'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`local.py`：本地环境的自定义设置'
- en: '`prod.py`: Custom settings for the production environment'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`prod.py`：生产环境的自定义设置'
- en: You have moved the settings files to a directory one level below, so you need
    to update the `BASE_DIR` setting in the `settings/base.py` file to point to the
    main project directory.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 您已将设置文件移动到一级以下的目录，因此您需要更新`settings/base.py`文件中的`BASE_DIR`设置以指向主项目目录。
- en: When handling multiple environments, create a base settings file and a settings
    file for each environment. Environment settings files should inherit the common
    settings and override environment-specific settings.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理多个环境时，创建一个基础设置文件和每个环境的设置文件。环境设置文件应继承常用设置并覆盖特定环境的设置。
- en: 'Edit the `settings/base.py` file and replace the following line:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`settings/base.py`文件并替换以下行：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Replace the preceding line with the following one:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将前面的行替换为以下一行：
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You point to one directory above by adding `.parent` to the `BASE_DIR` path.
    Let’s configure the settings for the local environment.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 您通过在`BASE_DIR`路径中添加`.parent`来指向一个目录以上。让我们配置本地环境的设置。
- en: Local environment settings
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地环境设置
- en: 'Instead of using a default configuration for the `DEBUG` and `DATABASES` settings,
    you will define them for each environment explicitly. These settings will be environment
    specific. Edit the `educa/settings/local.py` file and add the following lines:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`DEBUG`和`DATABASES`设置，您将明确为每个环境定义它们，而不是使用默认配置。这些设置将针对特定环境。编辑`educa/settings/local.py`文件并添加以下行：
- en: '[PRE3]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: This is the settings file for your local environment. In this file, you import
    all settings defined in the `base.py` file, and you define the `DEBUG` and `DATABASES`
    settings for this environment. The `DEBUG` and `DATABASES` settings remain the
    same as you have been using for development.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 这是您本地环境的设置文件。在此文件中，您导入在`base.py`文件中定义的所有设置，并为该环境定义`DEBUG`和`DATABASES`设置。`DEBUG`和`DATABASES`设置与您用于开发的设置相同。
- en: Now, remove the `DATABASES` and `DEBUG` settings from the `base.py` settings
    file.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，从`base.py`设置文件中删除`DATABASES`和`DEBUG`设置。
- en: 'Django management commands won’t automatically detect the settings file to
    use because the project settings file is not the default `settings.py` file. When
    running management commands, you need to indicate the settings module that you
    want to use by adding a `--settings` option, as follows:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: Django管理命令不会自动检测要使用的设置文件，因为项目设置文件不是默认的`settings.py`文件。在运行管理命令时，您需要通过添加`--settings`选项来指明您想要使用的设置模块，如下所示：
- en: '[PRE4]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Next, we are going to validate the project and the local environment configuration.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将验证项目和本地环境配置。
- en: Running the local environment
  id: totrans-48
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行本地环境
- en: 'Let’s run the local environment using the new settings structure. Make sure
    Redis is running or start the Redis Docker container in a shell with the following
    command:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用新的设置结构运行本地环境。请确保Redis正在运行或使用以下命令在shell中启动Redis Docker容器：
- en: '[PRE5]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Run the following management command in another shell, from the project directory:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在另一个shell中，从项目目录运行以下管理命令：
- en: '[PRE6]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Open `http://127.0.0.1:8000/` in your browser and check that the site loads
    correctly. You are now serving your site using the settings for the `local` environment.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在您的浏览器中打开`http://127.0.0.1:8000/`并检查网站是否正确加载。您现在正在使用`local`环境的设置来提供您的网站。
- en: 'If don’t want to pass the `--settings` option every time you run a management
    command, you can define the `DJANGO_SETTINGS_MODULE` environment variable. Django
    will use it to identify the settings module to use. If you are using Linux or
    macOS, you can define the environment variable by executing the following command
    in the shell:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您不想每次运行管理命令时都传递`--settings`选项，您可以定义`DJANGO_SETTINGS_MODULE`环境变量。Django将使用它来识别要使用的设置模块。如果您使用Linux或macOS，您可以在shell中执行以下命令来定义环境变量：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If you are using Windows, you can execute the following command in the shell:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用的是 Windows，你可以在 shell 中执行以下命令：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Any management command you execute after this will use the settings defined
    in the `DJANGO_SETTINGS_MODULE` environment variable.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在此之后执行的任何管理命令都将使用在 `DJANGO_SETTINGS_MODULE` 环境变量中定义的设置。
- en: Stop the Django development server from the shell by pressing the *Ctrl* + *C*
    keys and stop the Redis Docker container from the shell by also pressing the *Ctrl*
    + *C* keys.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl* + *C* 键从 shell 中停止 Django 开发服务器，并按同样方式按 *Ctrl* + *C* 键停止 Redis Docker
    容器。
- en: The local environment works well. Let’s prepare the settings for the production
    environment.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 本地环境运行良好。让我们为生产环境准备设置。
- en: Production environment settings
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 生产环境设置
- en: 'Let’s start by adding initial settings for the production environment. Edit
    the `educa/settings/prod.py` file and make it look as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从为生产环境添加初始设置开始。编辑 `educa/settings/prod.py` 文件，使其看起来如下所示：
- en: '[PRE9]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'These are the settings for the production environment:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是生产环境的设置：
- en: '`DEBUG`: Setting `DEBUG` to `False` is necessary for any production environment.
    Failing to do so will result in the traceback information and sensitive configuration
    data being exposed to everyone.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DEBUG`: 对于任何生产环境，将 `DEBUG` 设置为 `False` 是必要的。未能这样做会导致跟踪信息以及敏感的配置数据暴露给每个人。'
- en: '`ADMINS`: When `DEBUG` is `False` and a view raises an exception, all information
    will be sent by email to the people listed in the `ADMINS` setting. Make sure
    that you replace the name/email tuple with your own information.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ADMINS`: 当 `DEBUG` 为 `False` 并且一个视图引发异常时，所有信息将通过电子邮件发送到 `ADMINS` 设置中列出的人员。请确保用你自己的信息替换名称/电子邮件元组。'
- en: '`ALLOWED_HOSTS`: For security reasons, Django will only allow the hosts included
    in this list to serve the project. For now, you allow all hosts by using the asterisk
    symbol, `*`. You will limit the hosts that can be used for serving the project
    later.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ALLOWED_HOSTS`: 由于安全原因，Django 将只允许包含在此列表中的主机来服务项目。目前，你通过使用星号符号 `*` 允许所有主机。你将在稍后限制可用于服务项目的宿主机的数量。'
- en: '`DATABASES`: You keep the `default` database settings pointing to the SQLite
    database of your local environment. You will configure the production database
    later.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DATABASES`: 你保留 `default` 数据库设置，指向本地环境的 SQLite 数据库。你将在稍后配置生产数据库。'
- en: Over the next sections of this chapter, you will complete the settings file
    for your production environment.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章接下来的部分，你将完成生产环境的设置文件。
- en: You have successfully organized settings for handling multiple environments.
    Now, you will build a complete production environment by setting up different
    services with Docker.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经成功组织了处理多个环境的设置。现在，你将通过使用 Docker 设置不同的服务来构建一个完整的生产环境。
- en: Using Docker Compose
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Docker Compose
- en: You initially used Docker in *Chapter 3*, *Extending Your Blog Application*,
    and you have been using Docker throughout this book to run containers for different
    services, such as PostgreSQL, Redis, and RabbitMQ.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 你最初在 *第 3 章*，*扩展你的博客应用程序* 中使用了 Docker，并且你一直在使用 Docker 在这本书中运行不同服务的容器，例如 PostgreSQL、Redis
    和 RabbitMQ。
- en: Each Docker container combines application source code with operating system
    libraries and dependencies required to run the application. By using application
    containers, you can improve your application portability. For the production environment,
    we will use Docker Compose to build and run multiple Docker containers.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个 Docker 容器将应用程序源代码与运行应用程序所需的操作系统库和依赖项结合起来。通过使用应用程序容器，你可以提高应用程序的可移植性。对于生产环境，我们将使用
    Docker Compose 来构建和运行多个 Docker 容器。
- en: Docker Compose is a tool for defining and running multi-container applications.
    You can create a configuration file to define the different services and use a
    single command to start all services from your configuration. You can find information
    about Docker Compose at [https://docs.docker.com/compose/](https://docs.docker.com/compose/).
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Docker Compose 是一个用于定义和运行多容器应用程序的工具。你可以创建一个配置文件来定义不同的服务，并使用单个命令从你的配置中启动所有服务。你可以在
    [https://docs.docker.com/compose/](https://docs.docker.com/compose/) 找到有关 Docker
    Compose 的信息。
- en: 'For the production environment, you will create a distributed application that
    runs across multiple Docker containers. Each Docker container will run a different
    service. You will initially define the following three services and you will add
    additional services in the next sections:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 对于生产环境，你将创建一个在多个Docker容器中运行的分发应用程序。每个Docker容器将运行不同的服务。你将最初定义以下三个服务，你将在下一节中添加更多服务：
- en: '**Web service**: A web server to serve the Django project'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Web服务**：用于服务Django项目的Web服务器'
- en: '**Database service**: A database service to run PostgreSQL'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数据库服务**：运行PostgreSQL的数据库服务'
- en: '**Cache service**: A service to run Redis'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**缓存服务**：运行Redis的服务'
- en: Let’s start by installing Docker Compose.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从安装Docker Compose开始。
- en: Installing Docker Compose via Docker Desktop
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过Docker Desktop安装Docker Compose
- en: You can run Docker Compose on macOS, 64-bit Linux, and Windows. The fastest
    way to install Docker Compose is by installing Docker Desktop. The installation
    includes Docker Engine, the command-line interface, and Docker Compose.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在macOS、64位Linux和Windows上运行Docker Compose。安装Docker Compose最快的方式是通过安装Docker
    Desktop。安装包括Docker Engine、命令行界面和Docker Compose。
- en: Install Docker Desktop by following the instructions at [https://docs.docker.com/compose/install/compose-desktop/](https://docs.docker.com/compose/install/compose-desktop/).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下[https://docs.docker.com/compose/install/compose-desktop/](https://docs.docker.com/compose/install/compose-desktop/)中的说明安装Docker
    Desktop。
- en: 'Open the Docker Desktop application and click on **Containers**. It will look
    as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Docker Desktop应用程序，点击**容器**。它看起来如下：
- en: '![](img/B21088_17_01.png)'
  id: totrans-84
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_17_01.png)'
- en: 'Figure 17.1: The Docker Desktop interface'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.1：Docker Desktop界面
- en: After installing Docker Compose, you need to create a Docker image for your
    Django project.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 安装Docker Compose后，你需要为你的Django项目创建一个Docker镜像。
- en: Creating a Dockerfile
  id: totrans-87
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Dockerfile
- en: You need to create a Docker image to run the Django project. A `Dockerfile`
    is a text file that contains the commands for Docker to assemble a Docker image.
    You will prepare a `Dockerfile` with the commands for building the Docker image
    for the Django project.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要创建一个Docker镜像来运行Django项目。`Dockerfile`是一个包含Docker构建镜像命令的文本文件。你将准备一个包含构建Django项目Docker镜像命令的`Dockerfile`。
- en: 'Next to the `educa` project directory, create a new file and name it `Dockerfile`.
    Add the following code to the new file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在`educa`项目目录旁边，创建一个新文件并命名为`Dockerfile`。将以下代码添加到新文件中：
- en: '[PRE10]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This code performs the following tasks:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码执行以下任务：
- en: The Python `3.12.3` parent Docker image is used. You can find the official Python
    Docker image at [https://hub.docker.com/_/python](https://hub.docker.com/_/python).
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用Python `3.12.3`父级Docker镜像。你可以在[https://hub.docker.com/_/python](https://hub.docker.com/_/python)找到官方Python
    Docker镜像。
- en: 'The following environment variables are set:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 以下环境变量已设置：
- en: '`PYTHONDONTWRITEBYTECODE`: This prevents Python from writing out `pyc` files.'
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PYTHONDONTWRITEBYTECODE`：这防止Python写入`pyc`文件。'
- en: '`PYTHONUNBUFFERED`: This ensures that the Python `stdout` and `stderr` streams
    are sent straight to the terminal without first being buffered.'
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`PYTHONUNBUFFERED`：这确保Python的`stdout`和`stderr`流直接发送到终端，而无需先进行缓冲。'
- en: The `WORKDIR` command is used to define the working directory of the image.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`WORKDIR`命令来定义镜像的工作目录。
- en: The `pip` package of the image is upgraded.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 镜像中的`pip`包已升级。
- en: The `requirements.txt` file is copied to the working directory (`.`) of the
    parent Python image.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`requirements.txt`文件复制到父级Python镜像的工作目录（`.`）。
- en: The Python packages in `requirements.txt` are installed in the image using `pip`.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`pip`在镜像中安装`requirements.txt`中的Python包。
- en: The Django project source code is copied from the local directory to the working
    directory (`.`) directory of the image.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Django项目源代码从本地目录复制到镜像的工作目录（`.`）。
- en: With this `Dockerfile`, you have defined how the Docker image that will serve
    Django will be assembled. You can find the `Dockerfile` reference at [https://docs.docker.com/reference/dockerfile/](https://docs.docker.com/reference/dockerfile/).
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个`Dockerfile`，你已经定义了将用于服务Django的Docker镜像的构建方式。你可以在[https://docs.docker.com/reference/dockerfile/](https://docs.docker.com/reference/dockerfile/)找到`Dockerfile`的参考。
- en: Adding the Python requirements
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加Python需求
- en: A `requirements.txt` file is used in the `Dockerfile` you created to install
    all of the necessary Python packages for the project.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在你创建的`Dockerfile`中使用`requirements.txt`文件来安装项目所需的所有Python包。
- en: 'Next to the `educa` project directory, create a new file and name it `requirements.txt`.
    You may have already created this file before and copied the content for the `requirements.txt`
    file from [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt).
    If you haven’t done so, add the following lines to the newly created `requirements.txt`
    file:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `educa` 项目目录旁边，创建一个新文件并命名为 `requirements.txt`。你可能已经创建了此文件，并从 [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt)
    复制了 `requirements.txt` 文件的内容。如果没有这样做，请将以下行添加到新创建的 `requirements.txt` 文件中：
- en: '[PRE11]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In addition to the Python packages that you installed in the previous chapters,
    the `requirements.txt` file includes the following packages:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 除了你在前几章中安装的 Python 包之外，`requirements.txt` 文件还包括以下包：
- en: '`psycopg`: This is the PostgreSQL adapter. You will use PostgreSQL for the
    production environment.'
  id: totrans-107
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`psycopg`: 这是 PostgreSQL 适配器。你将在生产环境中使用 PostgreSQL。'
- en: '`uwsgi`: A WSGI web server. You will configure this web server later to serve
    Django in the production environment.'
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uwsgi`: 一个 WSGI 网络服务器。你将在稍后配置这个网络服务器以在生产环境中提供 Django 服务。'
- en: '`python-decouple`: Package to load environment variables easily.'
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`python-decouple`: 一个用于轻松加载环境变量的包。'
- en: Let’s start by setting up the Docker application in Docker Compose. We will
    create a Docker Compose file with the definition for the web server, database,
    and Redis services.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从设置 Docker Compose 中的 Docker 应用程序开始。我们将创建一个 Docker Compose 文件，其中包含网络服务器、数据库和
    Redis 服务的定义。
- en: Creating a Docker Compose file
  id: totrans-111
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Docker Compose 文件
- en: To define the services that will run in different Docker containers, we will
    use a Docker Compose file. The Compose file is a text file in YAML format, defining
    services, networks, and data volumes for a Docker application. YAML is a human-readable
    data-serialization language. You can see an example of a YAML file at [https://yaml.org/](https://yaml.org/).
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 为了定义将在不同的 Docker 容器中运行的服务，我们将使用 Docker Compose 文件。Compose 文件是一个 YAML 格式的文本文件，定义了
    Docker 应用程序的服务、网络和数据卷。YAML 是一种人类可读的数据序列化语言。你可以在 [https://yaml.org/](https://yaml.org/)
    看到一个 YAML 文件的示例。
- en: 'Next to the `educa` project directory, create a new file and name it `docker-compose.yml`.
    Add the following code to it:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `educa` 项目目录旁边，创建一个新文件并命名为 `docker-compose.yml`。向其中添加以下代码：
- en: '[PRE12]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'In this file, you define a `web` service. The sections to define this service
    are as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文件中，你定义了一个 `web` 服务。定义此服务的部分如下：
- en: '`build`: This defines the build requirements for a service container image.
    This can be a single string defining a context path, or a detailed build definition.
    You provide a relative path with a single dot (`.`) to point to the same directory
    where the Compose file is located. Docker Compose will look for a `Dockerfile`
    at this location. You can read more about the `build` section at [https://docs.docker.com/compose/compose-file/build/](https://docs.docker.com/compose/compose-file/build/).'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`build`: 这定义了服务容器镜像的构建要求。这可以是一个定义上下文路径的单个字符串，或者一个详细的构建定义。你提供一个以单个点 (`.`) 为相对路径，指向与
    Compose 文件相同的目录。Docker Compose 将在此位置查找 `Dockerfile`。你可以在 [https://docs.docker.com/compose/compose-file/build/](https://docs.docker.com/compose/compose-file/build/)
    了解更多关于 `build` 部分的信息。'
- en: '`command`: This overrides the default command of the container. You run the
    Django development server using the `runserver` management command. The project
    is served on host `0.0.0.0`, which is the default Docker IP, on port `8000`.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`command`: 这将覆盖容器的默认命令。你可以使用 `runserver` 管理命令来运行 Django 开发服务器。项目在主机 `0.0.0.0`
    上提供服务，这是默认的 Docker IP，端口为 `8000`。'
- en: '`restart`: This defines the restart policy for the container. Using `always`,
    the container is always restarted if it stops. This is useful for a production
    environment where you want to minimize downtime. You can read more about the restart
    policy at [https://docs.docker.com/config/containers/start-containers-automatically/](https://docs.docker.com/config/containers/start-containers-automatically/).'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restart`: 这定义了容器的重启策略。使用 `always`，如果容器停止，它将始终重启。这在需要最小化停机时间的生产环境中非常有用。你可以在
    [https://docs.docker.com/config/containers/start-containers-automatically/](https://docs.docker.com/config/containers/start-containers-automatically/)
    了解更多关于重启策略的信息。'
- en: '`volumes`: Data in Docker containers is not permanent. Each Docker container
    has a virtual filesystem that is populated with the files of the image and that
    is destroyed when the container is stopped. Volumes are the preferred method to
    persist data generated and used by Docker containers. In this section, you mount
    the local . directory to the `/code` directory of the image. You can read more
    about Docker volumes at [https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/).'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`卷`：Docker容器中的数据不是永久的。每个Docker容器都有一个虚拟文件系统，其中包含图像的文件，并在容器停止时被销毁。卷是持久化Docker容器生成和使用的数据的首选方法。在本节中，您将本地`.`目录挂载到图像的`/code`目录。您可以在[https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/)了解更多关于Docker卷的信息。'
- en: '`ports`: This exposes container ports. Host port `8000` is mapped to container
    port `8000`, on which the Django development server is running.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`端口`：这公开了容器端口。主机端口`8000`映射到容器端口`8000`，Django开发服务器正在该端口上运行。'
- en: '`environment`: This defines environment variables. You set the `DJANGO_SETTINGS_MODULE`
    environment variable to use the production Django settings file `educa.settings.prod`.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`环境变量`：这定义了环境变量。您将`DJANGO_SETTINGS_MODULE`环境变量设置为使用生产Django设置文件`educa.settings.prod`。'
- en: Note that in the Docker Compose file definition, you are using the Django development
    server to serve the application. The Django development server is not suitable
    for production use, so you will replace it later with a WSGI Python web server.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在Docker Compose文件定义中，您正在使用Django开发服务器来提供应用程序。Django开发服务器不适合生产使用，因此您稍后将用WSGI
    Python网络服务器替换它。
- en: You can find information about the Docker Compose specification at [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/).
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)找到有关Docker
    Compose规范的信息。
- en: 'At this point, assuming your parent directory is named `Chapter17`, the file
    structure should look as follows:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，假设您的父目录名为`Chapter17`，文件结构应如下所示：
- en: '[PRE13]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Open a shell in the parent directory, where the `docker-compose.yml` file is
    located, and run the following command:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在父目录中打开一个shell，其中包含`docker-compose.yml`文件，并运行以下命令：
- en: '[PRE14]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'This will start the Docker app defined in the Docker Compose file. You will
    see an output that includes the following lines:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将启动Docker Compose文件中定义的Docker应用程序。您将看到包括以下行的输出：
- en: '[PRE15]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The Docker container for your Django project is running!
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 您的Django项目容器正在运行！
- en: 'Open `http://0.0.0.0:8000/admin/` with your browser. You should see the Django
    administration site login form. It should look like *Figure 17.2*:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 使用您的浏览器打开`http://0.0.0.0:8000/admin/`。您应该看到Django管理网站的登录表单。它应该看起来像*图17.2*：
- en: '![](img/B21088_17_02.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_17_02.png)'
- en: 'Figure 17.2: The Django administration site login form with no CSS styles applied'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.2：未应用CSS样式的Django管理网站登录表单
- en: CSS styles are not loaded. You are using `DEBUG=False`, so URL patterns for
    serving static files are not being included in the main `urls.py` file of the
    project. Remember that the Django development server is not suitable for serving
    static files. You will configure a server for serving static files later in this
    chapter.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: CSS样式未加载。您正在使用`DEBUG=False`，因此URL模式未包含在项目的默认`urls.py`文件中。请记住，Django开发服务器不适合提供静态文件。您将在本章稍后配置一个用于提供静态文件的服务器。
- en: If you access any other URL of your site, you might get an HTTP `500` error
    because you haven’t configured a database for the production environment yet.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您访问您站点的任何其他URL，您可能会遇到HTTP `500`错误，因为您尚未为生产环境配置数据库。
- en: 'Take a look at the Docker Desktop app. You will see the following containers:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 查看Docker Desktop应用程序。您将看到以下容器：
- en: '![](img/B21088_17_03.png)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_17_03.png)'
- en: 'Figure 17.3: The chapter17 application and the web-1 container in Docker Desktop'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图17.3：Docker Desktop中的chapter17应用程序和web-1容器
- en: The `chapter17` Docker application is running and it has a single container
    named `web-1`, which is running on port `8000`. The name for the Docker application
    is generated dynamically using the name of the directory where the Docker Compose
    file is located, in this case, `chapter17`.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`chapter17` Docker应用程序正在运行，并且它有一个名为`web-1`的单个容器，该容器正在端口`8000`上运行。Docker应用程序的名称是动态生成的，使用Docker
    Compose文件所在的目录名称，在本例中为`chapter17`。'
- en: 'Under **Images**, you will see the image built for the `web` service, as in
    *Figure 17.4*:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在**图像**部分，您将看到为`web`服务构建的图像，如图*图17.4*所示：
- en: '![](img/B21088_17_04.png)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B21088_17_04.png)'
- en: 'Figure 17.4: The chapter17 application and the web-1 container in Docker Desktop'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 17.4：Docker Desktop 中的 chapter17 应用程序和 web-1 容器
- en: The `chapter17-web` image has been built using the `Dockerfile` you defined
    earlier and is used by the `web-1` container.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`chapter17-web` 镜像是使用您之前定义的 `Dockerfile` 构建的，并由 `web-1` 容器使用。'
- en: Next, you are going to add a PostgreSQL service and a Redis service to your
    Docker application.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您将向您的 Docker 应用程序添加一个 PostgreSQL 服务和一个 Redis 服务。
- en: Configuring the PostgreSQL service
  id: totrans-145
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 PostgreSQL 服务
- en: Throughout this book, you have mostly used the SQLite database. SQLite is simple
    and quick to set up, but for a production environment, you will need a more powerful
    database, such as PostgreSQL, MySQL, or Oracle. You used Docker to install PostgreSQL
    in *Chapter 3*, *Extending Your Blog Application*. You can find information about
    the official PostgreSQL Docker image at [https://hub.docker.com/_/postgres](https://hub.docker.com/_/postgres).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 在整本书中，您主要使用了 SQLite 数据库。SQLite 简单且快速设置，但对于生产环境，您将需要一个更强大的数据库，例如 PostgreSQL、MySQL
    或 Oracle。您在 *第 3 章*，*扩展您的博客应用程序* 中使用了 Docker 安装 PostgreSQL。您可以在 [https://hub.docker.com/_/postgres](https://hub.docker.com/_/postgres)
    找到有关官方 PostgreSQL Docker 镜像的信息。
- en: 'Edit the `docker-compose.yml` file and add the following lines highlighted
    in bold:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `docker-compose.yml` 文件，并添加以下加粗的行：
- en: '[PRE16]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'With these changes, you define a service named `db` with the following subsections:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这些更改，您定义了一个名为 `db` 的服务，以下是其子部分：
- en: '`image`: The service uses the base `postgres` Docker image.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`: 服务使用基于 `postgres` 的 Docker 镜像。'
- en: '`restart`: The restart policy is set to `always`.'
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restart`: 重启策略设置为 `always`。'
- en: '`volumes`: You mount the `./data/db` directory to the image directory `/var/lib/postgresql/data`
    to persist the database so that data stored in the database is maintained after
    the Docker application is stopped. This will create the local `data/db/` path.'
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volumes`: 您将 `./data/db` 目录挂载到镜像目录 `/var/lib/postgresql/data`，以持久化数据库，这样在
    Docker 应用程序停止后，存储在数据库中的数据将得到保留。这将创建本地的 `data/db/` 路径。'
- en: '`environment`: You use the `POSTGRES_DB` (database name), `POSTGRES_USER`,
    and `POSTGRES_PASSWORD` variables with default values.'
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`environment`: 您使用具有默认值的 `POSTGRES_DB`（数据库名称）、`POSTGRES_USER` 和 `POSTGRES_PASSWORD`
    变量。'
- en: The definition for the `web` service now includes the PostgreSQL environment
    variables for Django. You create a service dependency using `depends_on` so that
    the `web` service is started after the `db` service. This will guarantee the order
    of the container initialization, but it won’t guarantee that PostgreSQL is fully
    initiated before the Django web server is started. To solve this, you need to
    use a script that will wait on the availability of the database host and its TCP
    port. Docker recommends that you use the `wait-for-it` tool to control container
    initialization.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 现在对于 `web` 服务的定义包括了 Django 的 PostgreSQL 环境变量。您使用 `depends_on` 创建服务依赖，以便在 `db`
    服务启动后启动 `web` 服务。这将保证容器初始化的顺序，但不会保证在 Django 网络服务器启动之前 PostgreSQL 已经完全初始化。为了解决这个问题，您需要使用一个脚本等待数据库主机及其
    TCP 端口的可用性。Docker 推荐您使用 `wait-for-it` 工具来控制容器初始化。
- en: 'Download the `wait-for-it.sh` bash script from [https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh](https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh)
    and save the file next to the `docker-compose.yml` file. Then, edit the `docker-compose.yml`
    file and modify the `web` service definition as follows. The new code is highlighted
    in bold:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 从 [https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh](https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh)
    下载 `wait-for-it.sh` bash 脚本，并将其保存到 `docker-compose.yml` 文件旁边。然后，编辑 `docker-compose.yml`
    文件，并按如下方式修改 `web` 服务定义。新的代码已加粗：
- en: '[PRE17]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In this service definition, you use the `wait-for-it.sh` bash script to wait
    for the `db` host to be ready and accept connections on port `5432`, the default
    port for PostgreSQL, before starting the Django development server. You can read
    more about the service startup order in Compose at [https://docs.docker.com/compose/startup-order/](https://docs.docker.com/compose/startup-order/).
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个服务定义中，您使用 `wait-for-it.sh` bash 脚本等待 `db` 主机准备好并接受端口 `5432` 的连接，这是 PostgreSQL
    的默认端口，然后再启动 Django 开发服务器。您可以在 [https://docs.docker.com/compose/startup-order/](https://docs.docker.com/compose/startup-order/)
    中了解更多关于服务启动顺序的信息。
- en: 'Let’s edit the Django settings. Edit the `educa/settings/prod.py` file and
    add the following code highlighted in bold:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们编辑 Django 设置。编辑 `educa/settings/prod.py` 文件，并添加以下加粗的代码：
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'In the production settings file, you use the following settings:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在生产设置文件中，您使用以下设置：
- en: '`ENGINE`: You use the Django database backend for PostgreSQL.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ENGINE`: 你使用 Django 数据库后端用于 PostgreSQL。'
- en: '`NAME`, `USER`, and `PASSWORD`: You use the `config()` function of `python-decouple`
    to retrieve the `POSTGRES_DB` (database name), `POSTGRES_USER`, and `POSTGRES_PASSWORD`
    environment variables. You have set these environment variables in the Docker
    Compose file.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`NAME`, `USER`, 和 `PASSWORD`: 你使用 `python-decouple` 的 `config()` 函数检索 `POSTGRES_DB`（数据库名称）、`POSTGRES_USER`
    和 `POSTGRES_PASSWORD` 环境变量。你已在 Docker Compose 文件中设置了这些环境变量。'
- en: '`HOST`: You use `db`, which is the container hostname for the database service
    defined in the Docker Compose file. A container hostname defaults to the container’s
    ID in Docker. That’s why you use the `db` hostname.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HOST`: 你使用 `db`，这是 Docker Compose 文件中定义的数据库服务的容器主机名。容器主机名默认为 Docker 中的容器 ID。这就是为什么你使用
    `db` 主机名。'
- en: '`PORT`: You use the `5432` value, which is the default port for PostgreSQL.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PORT`: 你使用 `5432` 的值，这是 PostgreSQL 的默认端口。'
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl* + *C* 键或在 Docker Desktop 应用中点击停止按钮从 shell 中停止 Docker 应用。然后，使用以下命令再次启动
    Compose：
- en: '[PRE19]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The first execution after adding the `db` service to the Docker Compose file
    will take longer because PostgreSQL needs to initialize the database. The output
    will contain the following two lines:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在将 `db` 服务添加到 Docker Compose 文件后的第一次执行将花费更长的时间，因为 PostgreSQL 需要初始化数据库。输出将包含以下两行：
- en: '[PRE20]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Both the PostgreSQL database and the Django application are ready. The production
    database is empty, so you need to apply database migrations.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL 数据库和 Django 应用都已就绪。生产数据库为空，因此你需要应用数据库迁移。
- en: Applying database migrations and creating a superuser
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 应用数据库迁移并创建超级用户
- en: 'Open a different shell in the parent directory, where the `docker-compose.yml`
    file is located, and run the following command:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在父目录中打开另一个 shell，其中包含 `docker-compose.yml` 文件，并运行以下命令：
- en: '[PRE21]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: The `docker compose exec` command allows you to execute commands in the container.
    You use this command to execute the `migrate` management command in the `web`
    Docker container.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`docker compose exec` 命令允许你在容器中执行命令。你使用此命令在 `web` Docker 容器中执行 `migrate` 管理命令。'
- en: 'Finally, create a superuser with the following command:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，使用以下命令创建超级用户：
- en: '[PRE22]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Migrations have been applied to the database and you have created a superuser.
    You can access `http://localhost:8000/admin/` with the superuser credentials.
    CSS styles still won’t load because you haven’t configured serving static files
    yet.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '数据库已应用迁移，并且你已创建了一个超级用户。你可以使用超级用户凭据访问 `http://localhost:8000/admin/`。CSS 样式仍然无法加载，因为你还没有配置静态文件的提供。 '
- en: You have defined services to serve Django and PostgreSQL using Docker Compose.
    Next, you will add a service to serve Redis in the production environment.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经定义了使用 Docker Compose 服务的 Django 和 PostgreSQL。接下来，你将在生产环境中添加一个服务来提供 Redis。
- en: Configuring the Redis service
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 Redis 服务
- en: Let’s add a Redis service to the Docker Compose file. For this purpose, you
    will use the official Redis Docker image. You can find information about the official
    Redis Docker image at [https://hub.docker.com/_/redis](https://hub.docker.com/_/redis).
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们向 Docker Compose 文件中添加一个 Redis 服务。为此，你将使用官方的 Redis Docker 镜像。你可以在 [https://hub.docker.com/_/redis](https://hub.docker.com/_/redis)
    找到有关官方 Redis Docker 镜像的信息。
- en: 'Edit the `docker-compose.yml` file and add the following lines highlighted
    in bold:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `docker-compose.yml` 文件并添加以下加粗的行：
- en: '[PRE23]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the previous code, you define the `cache` service with the following subsections:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，你使用以下子部分定义了 `cache` 服务：
- en: '`image`: The service uses the base `redis` Docker image.'
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`: 该服务使用基于 `redis` 的 Docker 镜像。'
- en: '`restart`: The restart policy is set to `always`.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`restart`: 重启策略设置为 `always`。'
- en: '`volumes`: You mount the `./data/cache` directory to the `/data` image directory
    where any Redis writes will be persisted. This will create the local `data/cache/`
    path.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`volumes`: 你将 `./data/cache` 目录挂载到 `/data` 镜像目录，任何 Redis 写入都将持久化在这里。这将创建本地的
    `data/cache/` 路径。'
- en: In the `web` service definition, you add the `cache` service as a dependency,
    so that the `web` service is started after the `cache` service. The Redis server
    initializes fast, so you don’t need to use the `wait-for-it` tool in this case.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `web` 服务定义中，你添加了 `cache` 服务作为依赖项，这样 `web` 服务将在 `cache` 服务启动后启动。Redis 服务器初始化速度快，因此在这种情况下不需要使用
    `wait-for-it` 工具。
- en: 'Edit the `educa/settings/prod.py` file and add the following lines:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `educa/settings/prod.py` 文件并添加以下行：
- en: '[PRE24]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In these settings, you use the `cache` hostname that is automatically generated
    by Docker Compose using the name of the `cache` service and port `6379` used by
    Redis. You modify the Django `CACHE` setting and the `CHANNEL_LAYERS` setting
    used by Channels to use the production Redis URL.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Open the Docker Desktop application. You should see now the `chapter17` Docker
    application running a container for each service defined in the Docker Compose
    file: `db`, `cache`, and `web`, as in *Figure 17.4*:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_05.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.5: The chapter17 application with the db-1, web-1, and cache-1 containers
    in Docker Desktop'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: You are still serving Django with the Django development server, which, as you
    know, is meant for development only and not optimized for production use. Let’s
    replace it with the WSGI Python web server.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: Serving Django through WSGI and NGINX
  id: totrans-196
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django’s primary deployment platform is WSGI. **WSGI** stands for **Web Server
    Gateway Interface** , and it is the standard for serving Python applications on
    the web.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: When you generate a new project using the `startproject` command, Django creates
    a `wsgi.py` file inside your project directory. This file contains a WSGI application
    callable, which is an access point to your application.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: WSGI is used for both running your project with the Django development server
    and deploying your application with the server of your choice in a production
    environment. You can learn more about WSGI at [https://wsgi.readthedocs.io/en/latest/](https://wsgi.readthedocs.io/en/latest/).
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: In the following sections we will use **uWSGI**, an open source web server that
    implements the WSGI specification.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: Using uWSGI
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Throughout this book, you have been using the Django development server to run
    projects in your local environment. However, the development server is not designed
    for production use, and deploying your application in a production environment
    will require a standard web server.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: uWSGI is an extremely fast Python application server. It communicates with your
    Python application using the WSGI specification. uWSGI translates web requests
    into a format that your Django project can process.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: Let’s configure uWSGI to serve the Django project. You already added `uwsgi==2.0.20`
    to the `requirements.txt` file of the project, so uWSGI is already being installed
    in the Docker image of the `web` service.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and modify the `web` service definition
    as follows. The new code is highlighted in bold:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: Make sure to remove the `ports` section. uWSGI will be reachable with a socket,
    so you don’t need to expose a port in the container.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: The new `command` for the image runs `uwsgi` and passes the `/code/config/uwsgi/uwsgi.ini`
    configuration file to it. Let’s create the configuration file for uWSGI.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: Configuring uWSGI
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'uWSGI allows you to define a custom configuration in an `.ini` file. Next to
    the `docker-compose.yml` file, create the `config/uwsgi/uwsgi.ini` file path.
    Assuming your parent directory is named `Chapter17`, the file structure should
    look as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Edit the `config/uwsgi/uwsgi.ini` file and add the following code to it:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'In the `uwsgi.ini` file, you define the following options:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '`socket`: This is the Unix/TCP socket to bind the server.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chdir`: This is the path to your project directory, so that uWSGI changes
    to that directory before loading the Python application.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module`: This is the WSGI module to use. You set this to the `application`
    callable contained in the `wsgi` module of your project.'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`master`: This enables the master process.'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`chmod-socket`: These are the file permissions to apply to the socket file.
    In this case, you use `666` so that NGINX can read/write the socket.'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uid`: This is the user ID of the process once it’s started.'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`gid`: This is the group ID of the process once it’s started.'
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vacuum`: Using `true` instructs uWSGI to clean up any temporary files or UNIX
    sockets it creates.'
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `socket` option is intended for communication with some kind of third-party
    router, such as NGINX. You are going to run uWSGI using a socket and you are going
    to configure NGINX as your web server, which will communicate with uWSGI through
    the socket.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: You can find the list of available uWSGI options at [https://uwsgi-docs.readthedocs.io/en/latest/Options.html](https://uwsgi-docs.readthedocs.io/en/latest/Options.html).
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: You will not be able to access your uWSGI instance from your browser now, since
    it’s running through a socket. To complete the environment, we will use NGINX
    in front of uWSGI, to manage HTTP requests and pass application requests to uWSGI
    through the socket. Let’s complete the production environment.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: Using NGINX
  id: totrans-226
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you are serving a website, you have to serve dynamic content, but you also
    need to serve static files, such as CSS style sheets, JavaScript files, and images.
    While uWSGI is capable of serving static files, it adds unnecessary overhead to
    HTTP requests and, therefore, it is encouraged to set up a web server, such as
    NGINX, in front of it.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: NGINX is a web server focused on high concurrency, performance, and low memory
    usage. NGINX also acts as a reverse proxy, receiving HTTP and WebSocket requests
    and routing them to different backends.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: Generally, you will use a web server, such as NGINX, in front of uWSGI for serving
    static files efficiently, and you will forward dynamic requests to uWSGI workers.
    By using NGINX, you can also apply different rules and benefit from its reverse
    proxy capabilities.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: We will add the NGINX service to the Docker Compose file using the official
    NGINX Docker image. You can find information about the official NGINX Docker image
    at [https://hub.docker.com/_/nginx](https://hub.docker.com/_/nginx).
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and add the following lines highlighted
    in bold:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'You have added the definition for the `nginx` service with the following subsections:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '`image`: The service uses the base `nginx` Docker image.'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`restart`: The restart policy is set to `always`.'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`volumes`: You mount the `./config/nginx` volume to the `/etc/nginx/templates`
    directory of the Docker image. This is where NGINX will look for a default configuration
    template. You also mount the local directory `.` to the `/code` directory of the
    image, so that NGINX can have access to static files.'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ports`: You expose port `80`, which is mapped to container port `80`. This
    is the default port for HTTP.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s configure the NGINX web server.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NGINX
  id: totrans-239
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create the following file path highlighted in bold under the `config/` directory:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Edit the `nginx/default.conf.template` file and add the following code to it:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This is the basic configuration for NGINX. In this configuration, you set up
    an `upstream` component named `uwsgi_app`, which points to the socket created
    by uWSGI. You use the `server` block with the following configuration:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: You tell NGINX to listen on port `80`.
  id: totrans-245
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You set the server name to both `www.educaproject.com` and `educaproject.com`.
    NGINX will serve incoming requests for both domains.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You use `stderr` for the `error_log` directive to get error logs written to
    the standard error file. The second parameter determines the logging level. You
    use `warn` to get warnings and errors of higher severity.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You point `access_log` to the standard output with `/dev/stdout`.
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You specify that any request under the `/` path has to be routed with the `uwsgi_app`
    socket to uWSGI.
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You include the default uWSGI configuration parameters that come with NGINX.
    These are located at `/etc/nginx/uwsgi_params`.
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NGINX is now configured. You can find the NGINX documentation at [https://nginx.org/en/docs/](https://nginx.org/en/docs/).
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Open the `http://localhost/` URL in your browser. It’s not necessary to add
    a port to the URL because you are accessing the host through the standard HTTP
    port `80`. You should see the course list page with no CSS styles, like *Figure
    17.6*:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_06.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.6: The course list page served with NGINX and uWSGI'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: 'The following diagram shows the request/response cycle of the production environment
    that you have set up:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_07.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.7: The production environment request/response cycle'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: 'The following happens when the client browser sends an HTTP request:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: NGINX receives the HTTP request.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: NGINX delegates the request to uWSGI through a socket.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: uWSGI passes the request to Django for processing.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Django returns an HTTP response that is passed back to NGINX, which in turn
    passes it back to the client browser.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you check the Docker Desktop application, you should see that there are
    four containers running:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: The `db` service is running PostgreSQL
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `cache` service is running Redis
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `web` service is running uWSGI and Django
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `nginx` service is running NGINX
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s continue with the production environment setup. Instead of accessing our
    project using `localhost`, we will configure the project to use the `educaproject.com`
    hostname.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: Using a hostname
  id: totrans-271
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will use the `educaproject.com` hostname for your site. Since you are using
    a sample domain name, you need to redirect it to your local host.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are using Linux or macOS, edit the `/etc/hosts` file and add the following
    line to it:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: If you are using Windows, edit the `C:\Windows\System32\drivers\etc` file and
    add the same line.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
- en: By doing so, you are routing the `educaproject.com` and `www.educaproject.com`
    hostnames to your local server. In a production server, you won’t need to do this,
    since you will have a fixed IP address and you will point your hostname to your
    server in your domain’s DNS configuration.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Open `http://educaproject.com/` in your browser. You should be able to see your
    site, still without any static assets loaded. Your production environment is almost
    ready.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can restrict the hosts that can serve your Django project. Edit the
    `educa/settings/prod.py` production settings file of your project and change the
    `ALLOWED_HOSTS` setting, as follows:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Django will only serve your application if it’s running under any of these hostnames.
    You can read more about the `ALLOWED_HOSTS` setting at [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts).
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: The production environment is almost ready. Let’s continue by configuring NGINX
    to serve static files.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: Serving static and media assets
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: uWSGI is capable of serving static files flawlessly, but it is not as fast and
    effective as NGINX. For the best performance, you will use NGINX to serve static
    files in your production environment. You will set up NGINX to serve both the
    static files of your application (CSS style sheets, JavaScript files, and images)
    and media files uploaded by instructors for the course contents.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings/base.py` file and add the following line just below the
    `STATIC_URL` setting:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This is the root directory for all static files of the project. Next, you are
    going to collect the static files from the different Django applications into
    the common directory.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: Collecting static files
  id: totrans-287
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each application in your Django project may contain static files in a `static/`
    directory. Django provides a command to collect static files from all applications
    into a single location. This simplifies the setup for serving static files in
    production. The `collectstatic` command collects the static files from all applications
    of the project into the path defined with the `STATIC_ROOT` setting.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Open another shell in the parent directory, where the `docker-compose.yml`
    file is located, and run the following command:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Note that you can alternatively run the following command in the shell, from
    the `educa/` project directory:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Both commands will have the same effect since the base local directory is mounted
    to the Docker image. Django will ask whether you want to override any existing
    files in the root directory. Type `yes` and press *Enter*. You will see the following
    output:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Files located under the `static/` directory of each application present in the
    `INSTALLED_APPS` setting have been copied to the global `/educa/static/` project
    directory.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: Serving static files with NGINX
  id: totrans-298
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Edit the `config/nginx/default.conf.template` file and add the following lines
    highlighted in bold to the `server` block:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'These directives tell NGINX to serve static files located under the `/static/`
    and `/media/` paths directly. These paths are as follows:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`/static/`: This corresponds to the path of the `STATIC_URL` setting. The target
    path corresponds to the value of the `STATIC_ROOT` setting. You use it to serve
    the static files of your application from the directory mounted to the NGINX Docker
    image.'
  id: totrans-302
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/media/`: This corresponds to the path of the `MEDIA_URL` setting, and its
    target path corresponds to the value of the `MEDIA_ROOT` setting. You use it to
    serve the media files uploaded to the course contents from the directory mounted
    to the NGINX Docker image.'
  id: totrans-303
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Figure 17.8* shows the current setup of the production environment:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_08.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.8: The production environment request/response cycle, including static
    files'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: Files under the `/static/` and `/media/` paths are now served by NGINX directly,
    instead of being forwarded to uWSGI. Requests to any other path are still passed
    by NGINX to uWSGI through the UNIX socket.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-309
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Open `http://educaproject.com/` in your browser. You should see the following
    screen:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_09.png)'
  id: totrans-311
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.9: The course list page served with NGINX and uWSGI'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: Static resources, such as CSS style sheets and images, are now loaded correctly.
    HTTP requests for static files are now being served by NGINX directly, instead
    of being forwarded to uWSGI.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully configured NGINX for serving static files. Next, you are
    going to perform some checks on your Django project to validate it for a production
    environment and you are going to serve your site under HTTPS.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: Securing your site with SSL/TLS
  id: totrans-315
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The **TLS** protocol is the standard for serving websites through a secure connection.
    The TLS predecessor is SSL. Although SSL is now deprecated, in multiple libraries
    and online documentation, you will find references to both the terms TLS and SSL.
    It’s strongly encouraged that you serve your websites over HTTPS.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: In this section, you are going to check your Django project for any issues and
    validate it for a production deployment. You will also prepare the project to
    be served over HTTPS. Then, you are going to configure an SSL/TLS certificate
    in NGINX to serve your site securely.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: Checking your project for production
  id: totrans-318
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django includes a system check framework for validating your project at any
    time. The check framework inspects the applications installed in your Django project
    and detects common problems. Checks are triggered implicitly when you run management
    commands like `runserver` and `migrate`. However, you can trigger checks explicitly
    with the `check` management command.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about Django’s system check framework at [https://docs.djangoproject.com/en/5.0/topics/checks/](https://docs.djangoproject.com/en/5.0/topics/checks/).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s confirm that the check framework does not raise any issues for your project.
    Open the shell in the `educa` project directory and run the following command
    to check your project:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'You will see the following output:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The system check framework didn’t identify any issues. If you use the `--deploy`
    option, the system check framework will perform additional checks that are relevant
    for a production deployment.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the `educa` project directory:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'You will see an output like the following:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The check framework has identified five issues (zero errors and five warnings).
    All warnings are related to security-related settings.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: Let’s address the `security.W009` issue. Edit the `educa/settings/base.py` file
    and modify the `SECRET_KEY` setting by removing the `django-insecure-` prefix
    and adding additional random characters to generate a string with at least 50
    characters.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: Run the `check` command again and verify that the `security.W009` issue is not
    raised anymore. The rest of the warnings are related to SSL/TLS configuration.
    We will address them next.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: Configuring your Django project for SSL/TLS
  id: totrans-333
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django comes with specific settings for SSL/TLS support. You are going to edit
    the production settings to serve your site over HTTPS.
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `educa/settings/prod.py` settings file and add the following settings
    to it:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'These settings are as follows:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '`CSRF_COOKIE_SECURE`: Use a secure cookie for **cross-site request forgery**
    (**CSRF**) protection. With `True`, browsers will only transfer the cookie over
    HTTPS.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SESSION_COOKIE_SECURE`: Use a secure session cookie. With `True`, browsers
    will only transfer the cookie over HTTPS.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SECURE_SSL_REDIRECT`: This indicates whether HTTP requests have to be redirected
    to HTTPS.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django will now redirect HTTP requests to HTTPS; session and CSRF cookies will
    be sent only over HTTPS.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the main directory of your project:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Only one warning remains, `security.W004`:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: This warning is related to the **HTTP Strict Transport Security** (**HSTS**)
    policy. The HSTS policy prevents users from bypassing warnings and connecting
    to a site with an expired, self-signed, or otherwise invalid SSL certificate.
    In the next section, we will use a self-signed certificate for our site, so we
    will ignore this warning.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: When you own a real domain, you can apply for a trusted **Certificate Authority**
    (**CA**) to issue an SSL/TLS certificate for it, so that browsers can verify its
    identity. In that case, you can give a value to `SECURE_HSTS_SECONDS` higher than
    `0`, which is the default value. You can learn more about the HSTS policy at [https://docs.djangoproject.com/en/5.0/ref/middleware/#http-strict-transport-security](https://docs.djangoproject.com/en/5.0/ref/middleware/#http-strict-transport-security).
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully fixed the rest of the issues raised by the check framework.
    You can read more about the Django deployment checklist at [https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/](https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/).
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Creating an SSL/TLS certificate
  id: totrans-349
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a new directory inside the `educa` project directory and name it `ssl`.
    Then, generate an SSL/TLS certificate from the command line with the following
    command:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This will generate a private key and a 2048-bit SSL/TLS certificate that is
    valid for 10 years. This certificate is issued for the `*.educaproject.com` hostname.
    This is a wildcard certificate; by using the * wildcard character in the domain
    name, the certificate can be used for any subdomain of `educaproject.com`, such
    as `www.educaproject.com` or `django.educaproject.com`. After generating the certificate,
    the `educa/ssl/` directory will contain two files: `educa.key` (the private key)
    and `educa.crt` (the certificate).'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: You will need at least OpenSSL 1.1.1 or LibreSSL 3.1.0 to use the `-addext`
    option. You can check the OpenSSL location in your machine with the `which openssl`
    command and you can check the version with the `openssl version` command.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: Alternatively, you can use the SSL/TLS certificate provided in the source code
    for this chapter. You will find the certificate at [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/educa/ssl/](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/educa/ssl/).
    Note that you should generate a private key and not use this certificate in production.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: Configuring NGINX to use SSL/TLS
  id: totrans-355
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and add the following line highlighted in
    bold:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The NGINX container host will be accessible through port `80` (HTTP) and port
    `443` (HTTPS). The host port `443` is mapped to the container port `443`.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config/nginx/default.conf.template` file of the `educa` project and
    edit the `server` block to include SSL/TLS, as follows:'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: With the preceding code, NGINX now listens both to HTTP over port `80` and HTTPS
    over port `443`. You indicate the path to the SSL/TLS certificate with `ssl_certificate`
    and the certificate key with `ssl_certificate_key`.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Open `https://educaproject.com/` with your browser. You should see a warning
    message similar to the following one:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_10.png)'
  id: totrans-365
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.10: An invalid certificate warning'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: This screen might vary depending on your browser. It alerts you that your site
    is not using a trusted or valid certificate; the browser can’t verify the identity
    of your site. This is because you signed your own certificate instead of obtaining
    one from a trusted CA. When you own a real domain, you can apply for a trusted
    CA to issue an SSL/TLS certificate for it, so that browsers can verify its identity.
    If you want to obtain a trusted certificate for a real domain, you can refer to
    the Let’s Encrypt project created by the Linux Foundation. It is a nonprofit CA
    that simplifies obtaining and renewing trusted SSL/TLS certificates for free.
    You can find more information at [https://letsencrypt.org](https://letsencrypt.org).
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
- en: Click on the link or button that provides additional information and choose
    to visit the website, ignoring warnings. The browser might ask you to add an exception
    for this certificate or verify that you trust it. If you are using Chrome, you
    might not see any option to proceed to the website. If this is the case, type
    `thisisunsafe` and press *Enter* directly in Chrome on the warning page. Chrome
    will then load the website. Note that you do this with your own issued certificate;
    don’t trust any unknown certificate or bypass the browser SSL/TLS certificate
    checks for other domains.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'When you access the site, the browser will display a lock icon next to the
    URL like *Figure 17.11*:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_11.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.11: The browser address bar, including a secure connection padlock
    icon'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: 'Other browsers might display a warning indicating that the certificate is not
    trusted, like *Figure 17.12*:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_12.png)'
  id: totrans-373
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.12: The browser address bar, including a warning message'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: Your browser might mark the certificate as unsafe, but you are using it for
    testing purposes only. You are now serving your site securely over HTTPS.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: Redirecting HTTP traffic over to HTTPS
  id: totrans-376
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are redirecting HTTP requests to HTTPS with Django using the `SECURE_SSL_REDIRECT`
    setting. Any request using `http://` is redirected to the same URL using `https://`.
    However, this can be handled in a more efficient manner using NGINX.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config/nginx/default.conf.template` file and add the following lines
    highlighted in bold:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-379
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: In this code, you remove the directive `listen 80;` from the original `server`
    block, so that the platform is only available over HTTPS (port `443`). On top
    of the original `server` block, you add an additional `server` block that only
    listens on port `80` and redirects all HTTP requests to HTTPS. To achieve this,
    you return an HTTP response code `301` (permanent redirect) that redirects to
    the `https://` version of the requested URL using the `$host` and `$request_uri`
    variables.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: 'Open a shell in the parent directory, where the `docker-compose.yml` file is
    located, and run the following command to reload NGINX:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-382
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This runs the `nginx -s reload` command in the `nginx` container. You are now
    redirecting all HTTP traffic to HTTPS using NGINX.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: Your environment is now secured with TLS/SSL. To complete the production environment
    setup, the only remaining step is integrating Daphne to handle asynchronous requests,
    and get our course chat rooms running in production.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Configuring Daphne for Django Channels
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In *Chapter 16*, *Building a Chat Server*, you used Django Channels to build
    a chat server using WebSockets and you used Daphne to serve asynchronous requests
    by replacing the standard Django `runserver` command. We will add Daphne to our
    production environment.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a new service in the Docker Compose file to run the Daphne web
    server.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `docker-compose.yml` file and add the following lines inside the `services`
    block:'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The `daphne` service definition is very similar to the `web` service. The image
    for the `daphne` service is also built with the `Dockerfile` you previously created
    for the `web` service. The main differences are as follows:'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: '`working_dir` changes the working directory of the image to `/code/educa/`.'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`command` runs the `educa.asgi:application` application defined in the `educa/asgi.py`
    file with `daphne` in the `0.0.0.0` hostname and port `9001`. It also uses the
    `wait-for-it` bash script to wait for the PostgreSQL database to be ready before
    initializing the web server.'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since you are running Django on production, Django checks the `ALLOWED_HOSTS`
    when receiving HTTP requests. We will implement the same validation for WebSocket
    connections.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `educa/asgi.py` file of your project and add the following lines highlighted
    in bold:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The Channels configuration is now ready for production.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: Using secure connections for WebSockets
  id: totrans-397
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have configured NGINX to use secure connections with SSL/TLS. You need to
    change `ws` (WebSocket) connections to use the `wss` (WebSocket Secure) protocol
    now, in the same way that HTTP connections are now being served over HTTPS.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `chat/room.html` template of the `chat` application and find the following
    line in the `domready` block:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Replace that line with the following one:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: By using `wss://` instead of `ws://`, you are explicitly connecting to a secure
    WebSocket.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
- en: Including Daphne in the NGINX configuration
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In your production setup, you will run Daphne on a UNIX socket and use NGINX
    in front of it. NGINX will pass requests to Daphne based on the requested path.
    You will expose Daphne to NGINX through a UNIX socket interface, just like the
    uWSGI setup.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `config/nginx/default.conf.template` file and make it look as follows:'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: In this configuration, you set up a new upstream named `daphne`, which points
    to the `daphne` host and port `9001`. In the `server` block, you configure the
    `/ws/` location to forward requests to Daphne. You use the `proxy_pass` directive
    to pass requests to Daphne and you include some additional proxy directives.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: With this configuration, NGINX will pass any URL request that starts with the
    `/ws/` prefix to Daphne and the rest to uWSGI, except for files under the `/static/`
    or `/media/` paths, which will be served directly by NGINX.
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.13* shows the final production setup, including the Daphne server:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_13.png)'
  id: totrans-411
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.13: The production environment request/response cycle, including
    Daphne'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: NGINX runs in front of uWSGI and Daphne as a reverse proxy server. NGINX faces
    the web and passes requests to the application server (uWSGI or Daphne) based
    on their path prefix. Besides this, NGINX also serves static files and redirects
    non-secure requests to secure ones. This setup reduces downtime, consumes fewer
    server resources, and provides greater performance and security.
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Use your browser to create a sample course with an instructor user, log in
    with a user who is enrolled in the course, and open `https://educaproject.com/chat/room/1/`
    with your browser. You should be able to send and receive messages like the following
    example:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_14.png)'
  id: totrans-417
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.14: Course chat room messages served with NGINX and Daphne'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
- en: Daphne is working correctly, and NGINX is passing WebSocket requests to it.
    All connections are secured with SSL/TLS.
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have built a custom production-ready stack using NGINX,
    uWSGI, and Daphne. You could do further optimization for additional performance
    and enhanced security through configuration settings in NGINX, uWSGI, and Daphne.
    However, this production setup is a great start!
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
- en: You have used Docker Compose to define and run services in multiple containers.
    Note that you can use Docker Compose both for local development environments as
    well as production environments. You can find additional information on using
    Docker Compose in production at [https://docs.docker.com/compose/production/](https://docs.docker.com/compose/production/).
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: For more advanced production environments, you will need to dynamically distribute
    containers across a varying number of machines. For that, instead of Docker Compose,
    you will need an orchestrator like Docker Swarm mode or Kubernetes. You can find
    information about the Docker Swarm mode at [https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/),
    and about Kubernetes at [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/).
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
- en: Note that managing systems and cloud infrastructure demands expertise in configuration,
    optimization, and security. To ensure a secure and efficient production environment,
    consider bringing a systems/DevOps expert on board or enhancing your own expertise
    in these areas.
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have a complete environment that processes HTTP requests in a performant
    manner, it’s a good time to dive into middleware for request/response processing
    across our application.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: Creating a custom middleware
  id: totrans-425
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You already know the `MIDDLEWARE` setting, which contains the middleware for
    your project. You can think of it as a low-level plugin system, allowing you to
    implement hooks that get executed in the request/response process. Each middleware
    is responsible for some specific action that will be executed for all HTTP requests
    or responses.
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
- en: You should avoid adding expensive processing to middleware since they are executed
    in every single request.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.15* shows the middleware execution in Django:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_15.png)'
  id: totrans-429
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.15: Middleware execution in Django'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: When an HTTP request is received, middleware is executed in order of appearance
    in the `MIDDLEWARE` setting. When an HTTP response has been generated by Django,
    the response passes through all middleware back in reverse order.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 17.16* shows the execution order of the middleware components included
    in the `MIDDLEWARE` setting when creating a project with the `startproject` management
    command:'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_17_16.png)'
  id: totrans-433
  prefs: []
  type: TYPE_IMG
- en: 'Figure 17.16: Execution order for default middleware components'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
- en: 'Middleware can be written as a function, as follows:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: A middleware factory is a callable that takes a `get_response` callable and
    returns middleware. The `middleware` callable takes a request and returns a response,
    just like a view. The `get_response` callable might be the next middleware in
    the chain or the actual view in the case of the last listed middleware.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
- en: If any middleware returns a response without calling its `get_response` callable,
    it short-circuits the process; no further middleware gets executed (nor does the
    view), and the response returns through the same layers that the request passed
    in through.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
- en: The order of middleware components in the `MIDDLEWARE` setting is very important
    because each component may depend on the data set in the request by other middleware
    components executed previously.
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
- en: When adding a new middleware to the `MIDDLEWARE` setting, make sure to place
    it in the right position.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about middleware at [https://docs.djangoproject.com/en/5.0/topics/http/middleware/](https://docs.djangoproject.com/en/5.0/topics/http/middleware/).
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
- en: Creating subdomain middleware
  id: totrans-442
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You are going to create custom middleware to allow courses to be accessible
    through a custom subdomain. Each course detail URL, which looks like `https://educaproject.com/course/django/`,
    will also be accessible through the subdomain that makes use of the course slug,
    such as `https://django.educaproject.com/`. Users will be able to use the subdomain
    as a shortcut to access the course details. Any requests to subdomains will be
    redirected to each corresponding course detail URL.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
- en: Middleware can reside anywhere within your project. However, it’s recommended
    that you create a `middleware.py` file in your application directory.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `courses` application directory and name it `middleware.py`.
    Add the following code to it:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-446
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'When an HTTP request is received, you perform the following tasks:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: You get the hostname that is being used in the request and divide it into parts.
    For example, if the user is accessing `mycourse.educaproject.com`, you generate
    the `['mycourse', 'educaproject', 'com']` list.
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You check whether the hostname includes a subdomain by checking whether the
    split generated more than two elements. If the hostname includes a subdomain,
    and this is not `www`, you try to get the course with the slug provided in the
    subdomain.
  id: totrans-449
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a course is not found, you raise an HTTP `404` exception. Otherwise, you
    redirect the browser to the course detail URL.
  id: totrans-450
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `settings/base.py` file of the project and add `''courses.middleware.subdomain_course_middleware''`
    at the bottom of the `MIDDLEWARE` list, as follows:'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-452
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The middleware will now be executed in every request.
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: Remember that the hostnames allowed to serve your Django project are specified
    in the `ALLOWED_HOSTS` setting. Let’s change this setting so that any possible
    subdomain of `educaproject.com` is allowed to serve your application.
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `educa/settings/prod.py` file and modify the `ALLOWED_HOSTS` setting,
    as follows:'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-456
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: A value that begins with a period is used as a subdomain wildcard; `'.educaproject.com'`
    will match `educaproject.com` and any subdomain for this domain, for example,
    `course.educaproject.com` and `django.educaproject.com`.
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: Serving multiple subdomains with NGINX
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You need NGINX to be able to serve your site with any possible subdomain. Edit
    the `config/nginx/default.conf.template` file at these two occurrences:'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-460
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Replace the occurences of the preceding line with the following one:'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-462
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'By using the asterisk, this rule applies to all subdomains of `educaproject.com`.
    In order to test your middleware locally, you need to add any subdomains you want
    to test to `/etc/hosts`. For testing the middleware with a `Course` object with
    the slug `django`, add the following line to your `/etc/hosts` file:'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-464
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Stop the Docker application from the shell by pressing the *Ctrl* + *C* keys
    or using the stop button in the Docker Desktop app. Then, start Compose again
    with the following command:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Then, open `https://django.educaproject.com/` in your browser. The middleware
    will find the course by the subdomain and redirect your browser to `https://educaproject.com/course/django/`.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: Your custom subdomain middleware is working!
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will delve into a final topic that is extremely useful for projects:
    automating tasks and making them available as commands.'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: Implementing custom management commands
  id: totrans-470
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django allows your applications to register custom management commands for the
    `manage.py` utility. For example, you used the `makemessages` and `compilemessages`
    management commands in *Chapter 11*, *Adding Internationalization to Your Shop*,
    to create and compile translation files.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: A management command consists of a Python module containing a `Command` class
    that inherits from `django.core.management.base.BaseCommand` or one of its subclasses.
    You can create simple commands or make them take positional and optional arguments
    as input.
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: Django looks for management commands in the `management/commands/` directory
    for each active application in the `INSTALLED_APPS` setting. Each module found
    is registered as a management command named after it.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about custom management commands at [https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/](https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/).
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: You are going to create a custom management command to remind students to enroll
    in at least one course. The command will send an email reminder to users who have
    been registered for longer than a specified period and who aren’t enrolled in
    any course yet.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following file structure inside the `students` application directory:'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-477
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Edit the `enroll_reminder.py` file and add the following code to it:'
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-479
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'This is your `enroll_reminder` command. The preceding code is as follows:'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
- en: The `Command` class inherits from `BaseCommand`.
  id: totrans-481
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You include a `help` attribute. This attribute provides a short description
    of the command that is printed if you run the `python manage.py help enroll_reminder`
    command.
  id: totrans-482
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You use the `add_arguments()` method to add the `--days` named argument. This
    argument is used to specify the minimum number of days a user has to be registered,
    without having enrolled in any course, in order to receive the reminder.
  id: totrans-483
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `handle()` command contains the actual command. You get the `days` attribute
    parsed from the command line. If this is not set, you use `0`, so that a reminder
    is sent to all users that haven’t enrolled on a course, regardless of when they
    registered. You use the `timezone` utility provided by Django to retrieve the
    current timezone-aware date with `timezone.now().date()`. (You can set the timezone
    for your project with the `TIME_ZONE` setting.) You retrieve the users who have
    been registered for more than the specified days and are not enrolled in any courses
    yet. You achieve this by annotating the QuerySet with the total number of courses
    each user is enrolled in. You generate the reminder email for each user and append
    it to the `emails` list. Finally, you send the emails using the `send_mass_mail()`
    function, which is optimized to open a single SMTP connection for sending all
    emails, instead of opening one connection per email sent.
  id: totrans-484
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You have created your first management command. Open the shell and run your
    command:'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-486
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: 'If you don’t have a local SMTP server running, you can look at *Chapter 2*,
    *Enhancing Your Blog with Advanced Features*, where you configured the SMTP settings
    for your first Django project. Alternatively, you can add the following setting
    to the `base.py` file to make Django output emails to the standard output during
    development:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-488
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Django also includes a utility to call management commands using Python. You
    can run management commands from your code as follows:'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-490
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: Congratulations! You can now create custom management commands for your applications.
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: Django management commands can be scheduled to run automatically using tools
    like cron or Celery Beat. Cron is a time-based job scheduler in Unix-like operating
    systems that enables users to schedule scripts or commands to run at specified
    times and intervals. You can read more about cron at [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).
    On the other hand, Celery Beat is a scheduler that works with Celery to run functions
    at designated intervals. You can learn more about Celery Beat at [https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html](https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html).
    By using either cron or Celery Beat, you can ensure your tasks are executed regularly
    without manual intervention.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-493
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you created a production environment using Docker Compose.
    You configured NGINX, uWSGI, and Daphne to serve your application in production.
    You secured your environment using SSL/TLS. You also implemented custom middleware
    and you learned how to create custom management commands.
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: You have reached the end of this book. Congratulations! You have learned the
    skills required to build successful web applications with Django. This book has
    guided you through the process of developing real-life projects and integrating
    Django with other technologies. Now, you are ready to create your own Django project,
    whether it is a simple prototype or a large-scale web application.
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: Good luck with your next Django adventure!
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: Expanding your project using AI
  id: totrans-497
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you are presented with a task to extend your project, accompanied
    by a sample prompt for ChatGPT to assist you. To engage with ChatGPT, visit [https://chat.openai.com/](https://chat.openai.com/).
    If this is your first interaction with ChatGPT, you can revisit the *Expanding
    your project using AI* section in *Chapter 3, Extending Your Blog Application*.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: We have developed a comprehensive e-learning platform. However, when students
    are enrolled in multiple courses, each containing several modules, it can be challenging
    for them to remember where they last left off. To address this, let’s use ChatGPT
    in conjunction with Redis to store and retrieve each student’s progress within
    a course. For guidance, refer to the prompt provided at [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/prompts/task.md](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/prompts/task.md).
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: When you’re refining your Python code, ChatGPT can help you explore different
    refactoring strategies. Discuss your current approach, and ChatGPT can provide
    advice on making your code more Pythonic, utilizing principles like **don’t repeat
    yourself** (**DRY**) and modular design for cleaner, more maintainable code.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  id: totrans-501
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter17)'
  id: totrans-503
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Compose overview: [https://docs.docker.com/compose/](https://docs.docker.com/compose/)'
  id: totrans-504
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Installing Docker Compose: [https://docs.docker.com/compose/install/compose-desktop/](https://docs.docker.com/compose/install/compose-desktop/)'
  id: totrans-505
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Python Docker image: [https://hub.docker.com/_/python](https://hub.docker.com/_/python)'
  id: totrans-506
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Dockerfile reference: [https://docs.docker.com/reference/dockerfile/](https://docs.docker.com/reference/dockerfile/)'
  id: totrans-507
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirements.txt` file for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/requirements.txt)'
  id: totrans-508
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'YAML file example: [https://yaml.org/](https://yaml.org/)'
  id: totrans-509
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dockerfile build` section: [https://docs.docker.com/compose/compose-file/build/](https://docs.docker.com/compose/compose-file/build/)'
  id: totrans-510
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker restart policy: [https://docs.docker.com/config/containers/start-containers-automatically/](https://docs.docker.com/config/containers/start-containers-automatically/)'
  id: totrans-511
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker volumes: [https://docs.docker.com/storage/volumes/](https://docs.docker.com/storage/volumes/)'
  id: totrans-512
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Compose specification: [https://docs.docker.com/compose/compose-file/](https://docs.docker.com/compose/compose-file/)'
  id: totrans-513
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official PostgreSQL Docker image: [https://hub.docker.com/_/postgres](https://hub.docker.com/_/postgres)'
  id: totrans-514
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`wait-for-it.sh` bash script for Docker: [https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh](https://github.com/vishnubob/wait-for-it/blob/master/wait-for-it.sh)'
  id: totrans-515
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Service startup order in Compose: [https://docs.docker.com/compose/startup-order/](https://docs.docker.com/compose/startup-order/)'
  id: totrans-516
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official Redis Docker image: [https://hub.docker.com/_/redis](https://hub.docker.com/_/redis)'
  id: totrans-517
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'WSGI documentation: [https://wsgi.readthedocs.io/en/latest/](https://wsgi.readthedocs.io/en/latest/)'
  id: totrans-518
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List of uWSGI options: [https://uwsgi-docs.readthedocs.io/en/latest/Options.html](https://uwsgi-docs.readthedocs.io/en/latest/Options.html)'
  id: totrans-519
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Official NGINX Docker image: [https://hub.docker.com/_/nginx](https://hub.docker.com/_/nginx)'
  id: totrans-520
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'NGINX documentation: [https://nginx.org/en/docs/](https://nginx.org/en/docs/)'
  id: totrans-521
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ALLOWED_HOSTS` setting: [https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts](https://docs.djangoproject.com/en/5.0/ref/settings/#allowed-hosts)'
  id: totrans-522
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django’s system check framework: [https://docs.djangoproject.com/en/5.0/topics/checks/](https://docs.djangoproject.com/en/5.0/topics/checks/)'
  id: totrans-523
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTTP Strict Transport Security policy with Django: [https://docs.djangoproject.com/en/5.0/ref/middleware/#http-strict-transport-security](https://docs.djangoproject.com/en/5.0/ref/middleware/#http-strict-transport-security)'
  id: totrans-524
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django deployment checklist: [https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/](https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/)'
  id: totrans-525
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Self-generated SSL/TLS certificate directory: [https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/educa/ssl/](https://github.com/PacktPublishing/Django-5-by-example/blob/main/Chapter17/educa/ssl/)'
  id: totrans-526
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s Encrypt Certificate Authority: [https://letsencrypt.org/](https://letsencrypt.org/)'
  id: totrans-527
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using Docker Compose in production: [https://docs.docker.com/compose/production/](https://docs.docker.com/compose/production/)'
  id: totrans-528
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Docker Swarm mode: [https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/
    )'
  id: totrans-529
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Kubernetes: [https://kubernetes.io/docs/home/](https://kubernetes.io/docs/home/)'
  id: totrans-530
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django middleware: [https://docs.djangoproject.com/en/5.0/topics/http/middleware/](https://docs.djangoproject.com/en/5.0/topics/http/middleware/)'
  id: totrans-531
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating custom management commands: [https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/](https://docs.djangoproject.com/en/5.0/howto/custom-management-commands/)'
  id: totrans-532
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cron`: [https://en.wikipedia.org/wiki/Cron](https://en.wikipedia.org/wiki/Cron).'
  id: totrans-533
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`celery beat`: [https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html](https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html)'
  id: totrans-534
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join us on Discord!
  id: totrans-535
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Django development experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more.Scan the QR code or visit the link
    to join the community.
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/Django5ByExample](https://packt.link/Django5ByExample)'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code287089408934129031.png)'
  id: totrans-538
  prefs: []
  type: TYPE_IMG
