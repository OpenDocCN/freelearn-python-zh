- en: Implementing Databases
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All applications operate with data; this is the essence of any process in the
    world of technology. Reusable data storage provides great opportunities for operations,
    because if data stored from an application's previous operations is not used,
    an app will restart its processes each time it runs. In relation to the Qt app
    that we have been building in this book, on startup, the application will be empty
    and will not display any earlier information. In a sense, it is a pure real-time
    application, which can be used with web operations such as scraping, or for simple
    communication and monitoring. There is always a need to save something for use
    again later, however. The examples that were implemented in [Chapter 13](427e029e-38a6-4167-b146-402bd66ff25e.xhtml), *Creating
    Layouts*, are very primitive and don't allow us to reuse data in a more convenient
    way. This chapter will therefore introduce more convenient ways of reusing data.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we'll look at various instruments for working with various
    types of data storage, such as files, SQL, and NoSQL. These instruments will mostly be
    third-party packages, but whenever possible, Qt library based modules and classes
    will also be provided. This chapter does not cover the SQL language, as it is an
    implementation of the databases in the application.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Storage with files
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CSV
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQL
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: NoSQL
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Storage with files
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [Chapter 13](427e029e-38a6-4167-b146-402bd66ff25e.xhtml), *Creating Layouts*,
    we demonstrated how to save data to a text file and later reuse it in an ordinary
    task, such as saving color settings for an application. The Python standard library
    has some other tools for saving various information. Saving text files and retrieving
    strings from these files is a simple, but limited way, of doing this. In some
    cases, it's preferable to save objects and retrieve them for specific tasks. The
    Python standard library includes modules such as `pickle` and `shelve` that can
    help with the serialization and de-serialization of objects, and how to write
    and read them. With Python and the bindings of the Qt library, these modules can
    easily be implemented in our application. We will talk about this in the following
    section.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: The pickle module
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pickle` module of the Python standard library has binary protocols for
    serializing and de-serializing Python objects. This tool can save objects in a
    file that can be retrieved for various tasks in an application. Python objects
    that can be saved include lists, tuples, dictionaries, and more. Any Python objects
    can be saved to a file, but saving dictionaries, for example, allows us to use
    a data structure that has keys and values. Note that only pickleable objects of
    dicts, lists, tuples, and so on can be pickled. So, let''s add the `pickle` module
    functionality to our application with the following steps:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Create a `data/` folder in the `App/App_PySide2/` and `App/App_PyQt5/` directories.
    We need to add the following lines to the `u_tools.py` file, which will represent
    various methods for working with  data in the application. To use the `pickle`
    module in our application, we need to add a line with an import statement.
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App/App_PySide2/`和`App/App_PyQt5/`目录中创建一个`data/`文件夹。我们需要在`u_tools.py`文件中添加以下行，这些行将代表在应用程序中处理数据的各种方法。为了在我们的应用程序中使用`pickle`模块，我们需要添加一个带有导入语句的行。
- en: 'In the `import` section of the `u_tools.py` file, add the following statement:'
  id: totrans-13
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`u_tools.py`文件的`import`部分添加以下语句：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: This module includes the `dump()` and `load()` functions to serialize or de-serialize
    Python objects. These functions write the object to a file object and then load
    the object from a file.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块包括`dump()`和`load()`函数，用于序列化或反序列化Python对象。这些函数将对象写入文件对象，然后从文件中加载对象。
- en: 'Add the `pickle_dump()` function, which will serialize objects, to the `UTools`
    class of the `u_tools.py` file with the following code:'
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_tools.py`文件的`UTools`类中添加`pickle_dump()`函数，该函数用于序列化对象，代码如下：
- en: '[PRE1]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: This function will open the file in binary mode to write and dump the object,
    and will include parameters in relation to the relevant version of Python.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将以二进制模式打开文件进行写入并转储对象，并将与相关Python版本相关的参数包含在内。
- en: 'Now we need to add the `pickle_load()` function, which will de-serialize the
    object, to the `UTools` class, as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要添加`pickle_load()`函数，该函数将反序列化对象，添加到`UTools`类中，如下所示：
- en: '[PRE2]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: This function will open the file in binary mode for reading and will load the
    object from a file, with parameters related to the version of Python you are using.
    We now need to make some changes in the application files for easier opening and
    data-saving operations. Open the `u_window.py` file and add some lines to the
    top panel.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将以二进制模式打开文件进行读取，并从文件中加载对象，参数与您使用的Python版本相关。我们现在需要在应用程序文件中进行一些更改，以便更容易地进行打开和数据保存操作。打开`u_window.py`文件并在顶部面板中添加一些行。
- en: 'Add the following new selection options in the data section of the top panel:'
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在顶部面板的数据部分添加以下新的选择选项：
- en: '[PRE3]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: These additional selection options will be used later on in this chapter. We
    now need to change the `UApp` class of the `u_app.py` file to be able to use the
    dump and load operations.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 这些额外的选择选项将在本章的后续内容中使用。我们现在需要更改`u_app.py`文件中的`UApp`类，以便能够使用转储和加载操作。
- en: 'Now, insert the `Save` button in the `__init__()` function of the `UApp` class
    with a connection to the slots that will be used to save the data, as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在`UApp`类的`__init__()`函数中插入`Save`按钮，并将其连接到用于保存数据的槽，如下所示：
- en: '[PRE4]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: At the bottom of the `__init__()` function, we've added a variable with an empty
    string that will be used to save data if the tool has not been opened before.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`__init__()`函数的底部，我们添加了一个空字符串变量，如果工具之前未打开，将用于保存数据。
- en: 'Now add the `data()` function, which will be used to load the pickled objects,
    to the `UApp` class, as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加`data()`函数，该函数将用于加载序列化的对象，添加到`UApp`类中，如下所示：
- en: '[PRE5]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: The instruction of this function will use the function to load data from a file,
    or it will set an error to the status bar of the application. The loaded data
    will be appended to the `text edit` field.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数的说明将使用该函数从文件加载数据，或者将错误设置到应用程序的状态栏中。加载数据将被附加到`text edit`字段。
- en: 'Now add the following `save_data()` function:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加以下`save_data()`函数：
- en: '[PRE6]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: This function will provide saving operations to files, databases, and so on.
    It will also check whether the used line edit fields are empty, as well as calling
    the `user_data1()` function.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将为文件、数据库等提供保存操作。它还将检查所使用的行编辑字段是否为空，并调用`user_data1()`函数。
- en: 'Next, add the `user_data1()` function at the end of the `UApp` class, as follows:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，在`UApp`类的末尾添加`user_data1()`函数，如下所示：
- en: '[PRE7]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This function will use the `pickle_dump()` function of the `UTools` class to
    save data to a file. Also available in the `pickle` module are the `dumps()` and
    `loads()` functions, which return a byte object instead of writing it to a file
    and read the objects, respectively. Classes such as `pickle.Pickler()` and `pickle.Unpickler()`
    can be used to pickle and unpickle data. The Python standard library's `pickletools`
    module extends the `pickle` module's functionality with additional functions that
    analyze pickled data. The `pickle` module is very useful for tasks such as data
    persistence in machine learning models and implementing them in an application.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将使用 `UTools` 类的 `pickle_dump()` 函数将数据保存到文件。`pickle` 模块还提供 `dumps()` 和 `loads()`
    函数，分别返回字节对象而不是写入文件，并分别读取对象。可以使用 `pickle.Pickler()` 和 `pickle.Unpickler()` 类来序列化和反序列化数据。Python
    标准库的 `pickletools` 模块通过添加分析序列化数据的额外函数扩展了 `pickle` 模块的功能。`pickle` 模块对于数据持久化在机器学习模型中以及将这些模型实现为应用程序等任务非常有用。
- en: The shelve module
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`shelve` 模块'
- en: 'The `shelve` module creates dictionary-like objects using the `pickle` and `dbm` modules that
    can be saved in a file and opened accordingly. So, let''s add the `shelve_open()`
    function to the `UTools` class of the `u_tools.py` files:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '`shelve` 模块使用 `pickle` 和 `dbm` 模块创建类似字典的对象，这些对象可以保存到文件中并相应地打开。因此，让我们将 `shelve_open()`
    函数添加到 `u_tools.py` 文件中的 `UTools` 类：'
- en: 'First, add the following module to the import section of the `u_tools.py` file:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下模块添加到 `u_tools.py` 文件的导入部分：
- en: '[PRE8]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the `shelve_open()` function to the `UTools` class of the `u_tools.py`
    file, as follows:'
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `shelve_open()` 函数添加到 `u_tools.py` 文件中的 `UTools` 类，如下所示：
- en: '[PRE9]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This function will write and read the data to and from a database. The parameters
    can be specified by using this function in the application. In the `UApp` class
    of the `u_app.py` file, we now need to add the `shelve` tool to open and save
    files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将数据写入和从数据库中读取。可以通过在应用程序中使用此函数来指定参数。现在，在 `u_app.py` 文件中的 `UApp` 类中，我们需要添加
    `shelve` 工具以打开和保存文件。
- en: 'Add the `shelve` module functionality to the `data()` function of the `UApp`
    class, as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `shelve` 模块功能添加到 `UApp` 类的 `data()` 函数中，如下所示：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `shelve_open()` function of the `UTools` class will be used to connect to
    the database. The `get()` method will get the data from the specified field of
    the database.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`UTools` 类的 `shelve_open()` 函数将用于连接数据库。`get()` 方法将从数据库的指定字段获取数据。'
- en: 'Next, add the following option to the `save_data()` function:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下选项添加到 `save_data()` 函数中：
- en: '[PRE11]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This instruction will call the `user_data2()` function with the data specified
    in its parameters.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 此指令将使用其参数中指定的数据调用 `user_data2()` 函数。
- en: 'Now add the `user_data2()` function to the end of the `UApp` class, as follows:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将 `user_data2()` 函数添加到 `UApp` 类的末尾，如下所示：
- en: '[PRE12]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This function will write the data to the database.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将数据写入数据库。
- en: 'The object of the `shelve_open()` function provides methods that are similar
    to the following dictionary methods:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`shelve_open()` 函数的对象提供类似于以下字典方法的方法：'
- en: '`db.keys()`: This returns all the keys of an object.'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.keys()`：此操作返回对象的所有键。'
- en: '`db.values()`: This returns all the values of an object.'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.values()`：此操作返回对象的所有值。'
- en: '`db.items()`: This returns an iterable object with tuples, including key/value
    pairs.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.items()`：此操作返回包含键/值对的元组的可迭代对象。'
- en: '`db.get(key)`: This returns the value related to the key in a parameter.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.get(key)`：此操作返回与参数中的键相关联的值。'
- en: '`db.update({key: value})`: This adds elements to a database object.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db.update({key: value})`：此操作向数据库对象添加元素。'
- en: 'The following flags are also available:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 以下标志也可用：
- en: '`r`: Reading.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r`：只读。'
- en: '**`w`**: Reading and writing.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`w`**：读写。'
- en: '**`c`**: Reading and writing; if the file does not exist, it will be created
    (this is the default flag).'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**`c`**：读写；如果文件不存在，则创建（这是默认标志）。'
- en: '`n`: Reading and writing; if the file does not exist, it will be created; if
    the file exists, it will be rewritten.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n`：读写；如果文件不存在，则创建；如果文件存在，则重写。'
- en: As you can see, the `pickle` and `shelve` modules provide some convenient ways
    of organizing data. They are also useful in applications that work with machine
    learning algorithms. In reality, however, there may be tasks that require a broader
    approach and the need to use common tools and databases. In the following sections,
    we will try to describe these common tools.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，`pickle`和`shelve`模块提供了一些组织数据的方法。它们在处理机器学习算法的应用程序中也很有用。然而，实际上可能存在需要更广泛方法并使用常用工具和数据库的任务。在接下来的章节中，我们将尝试描述这些常用工具。
- en: CSV
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CSV
- en: A **Comma Separated Values** (**CSV**) file is a type of text file that uses
    a comma to separate values and stores data in a table as a plain text file. This
    is a very popular kind of file and is often used as a source of data in machine
    learning applications, and data science generally. CSV files allow us to create
    and operate with large datasets, which can often contain billions of values. The
    tables of data used with popular office applications such as Microsoft Excel and
    LibreOffice Calc appear in similar spreadsheets, and these applications can open
    CSV files, but the Python standard library has a module that creates and operates
    with CSV files. We'll also look at some special tools, such as pandas.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '**逗号分隔值**（**CSV**）文件是一种使用逗号分隔值并以纯文本文件形式存储数据的文本文件。这是一种非常流行的文件类型，通常用作机器学习和数据科学中数据源。CSV文件允许我们创建和操作大型数据集，这些数据集通常包含数十亿个值。与Microsoft
    Excel和LibreOffice Calc等流行办公应用程序一起使用的数据表以类似的电子表格形式出现，这些应用程序可以打开CSV文件，但Python标准库有一个用于创建和操作CSV文件的模块。我们还将探讨一些特殊工具，例如pandas。'
- en: The csv module
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: csv模块
- en: 'The Python standard library includes the `csv` module for manipulating CSV
    files. To show you how to use this module effectively, we''ll provide an example
    of writing and reading CSV files:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Python标准库包括用于操作CSV文件的`csv`模块。为了向您展示如何有效地使用此模块，我们将提供一个写入和读取CSV文件的示例：
- en: 'First, add the following lines to the `import` section of the `u_tools.py`
    file:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将以下行添加到`u_tools.py`文件的`import`部分：
- en: '[PRE13]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'After the `import` section, add the following path to this file:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`import`部分之后，将以下路径添加到该文件中：
- en: '[PRE14]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: With this line, we can get the directory path to the application file to the
    working directory of our application.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 这一行可以将应用程序文件所在的目录路径获取到我们应用程序的工作目录中。
- en: 'In the `UTools` class of the `u_tools.py` file, add the following functions,
    which will write and read CSV files:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_tools.py`文件中的`UTools`类中添加以下函数，这些函数将写入和读取CSV文件：
- en: '[PRE15]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The preceding functions will write data to the CSV file. If the specified file
    does not exist, the header will be added to the data.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数将数据写入CSV文件。如果指定的文件不存在，将添加标题到数据中。
- en: 'Now, add the following function to read CSV files:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，添加以下函数以读取CSV文件：
- en: '[PRE16]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This function will read a CSV file with the Python standard library's `csv` module
    and will return the `DictReader` object with data.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将使用Python标准库的`csv`模块读取CSV文件，并将包含数据的`DictReader`对象返回。
- en: 'In the `UApp` class of the `u_app.py` file, we now need to add the tool for
    opening and saving CSV files:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 在`u_app.py`文件中的`UApp`类中，我们现在需要添加打开和保存CSV文件的工具：
- en: 'First, add the **`csv`** module functionality to the `data()` function of the
    `UApp` class, as follows:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，将**`csv`**模块功能添加到`UApp`类的`data()`函数中，如下所示：
- en: '[PRE17]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This function will read the rows of the `DataReader` object that will be returned
    when the `csv_read()` function of the `UTools` class is called.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将读取当调用`UTools`类的`csv_read()`函数时返回的`DataReader`对象的行。
- en: 'Next, add the following instruction to the `save_data()` function:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下指令添加到`save_data()`函数中：
- en: '[PRE18]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This function will call the `user_data3()` function with the data specified
    in its parameters.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将使用其参数指定的数据调用`user_data3()`函数。
- en: 'Now add the `user_data3()` function to the end of the `UApp` class, as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在将`user_data3()`函数添加到`UApp`类的末尾，如下所示：
- en: '[PRE19]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The function will try to write the data to the CSV file. If the specified data
    exists in the file, this data will not be written. The preceding example shows
    us what is possible using Python's `csv` module for reading and writing CSV files,
    although some of these lines are optional and can be rewritten.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 函数将尝试将数据写入CSV文件。如果指定的数据已存在于文件中，则不会写入此数据。前面的示例展示了使用Python的`csv`模块进行读取和写入CSV文件所能实现的功能，尽管其中一些行是可选的，可以重写。
- en: There are, however, some lines we need to pay attention to. Lines with statements
    that pass exceptions are not recommended, because when errors occur, they will
    not provide us with any information about the error or tell us what happened.
    This can be solved by changing these lines in relation to Python 2.x/3.x. (As
    mentioned earlier, PyQt5 uses Python 3.x and PySide2 uses Python 2.x.)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，有一些行我们需要注意。包含传递异常语句的行是不推荐的，因为当出现错误时，它们不会给我们提供任何关于错误的信息，也不会告诉我们发生了什么。这可以通过更改与Python
    2.x/3.x相关的这些行来解决。（如前所述，PyQt5使用Python 3.x，而PySide2使用Python 2.x。）
- en: 'We can write the following lines for PyQt5 exception handling:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以添加以下几行用于PyQt5异常处理：
- en: '[PRE20]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The following lines are for PySide2 exception handling:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 以下几行是用于PySide2异常处理的：
- en: '[PRE21]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Note that more concrete exceptions, such as `FileNotFoundError` or `PermissionError`
    (3.x), can be used. The full list of built-in exceptions is available in the official
    Python documentation, and they are different for each Python version.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，可以使用更具体的异常，例如`FileNotFoundError`或`PermissionError`（3.x）。Python官方文档中提供了内置异常的完整列表，并且每个Python版本都有所不同。
- en: pandas
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pandas
- en: When working with CSV files in a professional sense, you should use the most
    popular toolset for working with data: **pandas**. This toolset allows us to handle
    large datasets, manipulate data, and analyze and represent data in almost any
    field of data science. This package, along with SciPy, NumPy, and Matplotlib,
    forms the basis of scientific Python. As mentioned in its official source, pandas
    is a library that provides high-performance, easy-to-use data structures and data
    analysis tools for the Python programming language. For more information on the
    wide functionality of the pandas library, visit [http://pandas.pydata.org/](http://pandas.pydata.org/).
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在专业处理CSV文件时，你应该使用最流行的数据处理工具集：**pandas**。这个工具集允许我们处理大型数据集，操作数据，并在数据科学的几乎所有领域分析和表示数据。此包与SciPy、NumPy和Matplotlib一起构成了科学Python的基础。如其在官方源中所述，pandas是一个为Python编程语言提供高性能、易于使用的数据结构和数据分析工具的库。有关pandas库的广泛功能信息，请访问[http://pandas.pydata.org/](http://pandas.pydata.org/)。
- en: 'We''ll now take a look at this great tool in action by using it with CSV files.
    pandas can be installed in the following way:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在将通过使用CSV文件来查看这个强大工具的实际应用。pandas可以通过以下方式安装：
- en: '[PRE22]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Note that the latest versions of Anaconda include pandas as the default installed
    package, as well as NumPy, SciPy, Matplotlib, scikit-learn, and many others.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Anaconda的最新版本将pandas作为默认安装的包，以及NumPy、SciPy、Matplotlib、scikit-learn和其他许多包。
- en: 'In this section, we will go through a short example of how to write and read
    files with pandas:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将通过一个简短的示例来介绍如何使用pandas编写和读取文件：
- en: 'After it has been installed, you need to import the pandas library. To do this,
    add the following `import` statement to the `u_tools.py` file:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装完成后，你需要导入pandas库。为此，将以下`import`语句添加到`u_tools.py`文件中：
- en: '[PRE23]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Next, add the `pandas_write()` function to the `UTools` class of the `u_tools.py`
    file, as follows:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将`pandas_write()`函数添加到`u_tools.py`文件中的`UTools`类中，如下所示：
- en: '[PRE24]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The preceding function can write data to various files, such as CSV, Excel,
    HTML, and JSON, depending on the specified filename and the extension (the type),
    and the type specified in the `writer` parameter.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的函数可以根据指定的文件名和扩展名（类型）以及`writer`参数中指定的类型，将数据写入各种文件，例如CSV、Excel、HTML和JSON。
- en: 'Now add the following `pandas_read()` function, which will read the file depending
    on the specified parameters:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在添加以下`pandas_read()`函数，该函数将根据指定的参数读取文件：
- en: '[PRE25]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This function can read data from various files, such as CSV, Excel, HTML, and
    JSON, depending on the specified filename and the extension (the type), and the
    type specified in the `reader` parameter.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数可以根据指定的文件名和扩展名（类型）以及`reader`参数中指定的类型，从各种文件中读取数据，例如CSV、Excel、HTML和JSON。
- en: 'In the `UApp` class of the `u_app.py` file, add the pandas tool for opening
    and saving files. Add the pandas functionality to the `data()` function of the
    `UApp` class, as follows:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_app.py`文件中的`UApp`类中，添加用于打开和保存文件的pandas工具。将pandas功能添加到`UApp`类的`data()`函数中，如下所示：
- en: '[PRE26]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: This instruction will call the function for reading CSV file with pandas. It
    will either append read data to the text field or display an error message in
    the status bar of the application.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此指令将调用使用pandas读取CSV文件的函数。它将要么将读取的数据追加到文本字段中，要么在应用程序的状态栏中显示错误消息。
- en: 'Next, add the following instruction to the `save_data()` function:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下指令添加到`save_data()`函数中：
- en: '[PRE27]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: This instruction will call the `user_data4()` function with the data specified
    in the parameters.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 此指令将使用参数中指定的数据调用`user_data4()`函数。
- en: 'Add the `user_data4()` function to the end of the `UApp` class, as follows:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`user_data4()`函数添加到`UApp`类的末尾，如下所示：
- en: '[PRE28]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: This function does not use the data retrieved in the parameters; instead, it
    uses the data generated with the `range()` function, which is used for each column
    in the table. We're now in a position to run the `u_app.py` file and take a look
    at the results. When the `Save` button is clicked, a file will be created with
    data. You can change the extension of the filename to `data/tests.xlsx` and change
    the writer to Excel as an experiment, if you wish. As you can see, this small
    amount of code provides a lot of functionality in comparison to our CSV example.
    Note that other functions, such as `to_html()`, are optional and simply demonstrate
    the functionality of the pandas library.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 此功能不使用在参数中检索到的数据；相反，它使用由`range()`函数生成的数据，该函数用于表中的每一列。我们现在可以运行`u_app.py`文件并查看结果。当点击`保存`按钮时，将创建一个包含数据的文件。如果您愿意，可以将文件名扩展名更改为`data/tests.xlsx`并将写入器更改为Excel进行实验。如您所见，与我们的CSV示例相比，这段少量代码提供了很多功能。请注意，其他函数，如`to_html()`，是可选的，仅用于展示pandas库的功能。
- en: Pandas is the recommended tool for data manipulation in applications because
    it has the widest toolset. On the other hand, the application can, unsurprisingly,
    often become slow. Importing pandas and writing the total number of values costs
    memory resources; in [Chapter 16](0e64461d-9420-4c73-9607-25e90f854793.xhtml),
    *Threading and Multiprocessing*, we will try to solve this problem.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: Pandas是应用程序中数据操作的首选工具，因为它拥有最广泛的工具集。另一方面，应用程序可能会变得很慢，这是意料之中的。导入pandas并写入值的总数会消耗内存资源；在[第16章](0e64461d-9420-4c73-9607-25e90f854793.xhtml)，*线程和进程*中，我们将尝试解决这个问题。
- en: SQL
  id: totrans-120
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQL
- en: In this section, we'll look at databases based on **Structured Query Language**
    (**SQL**). SQL is a domain-specific language that's used to manipulate databases
    by managing data in **Relational Database Management Systems** (**RDBMS**) and
    stream processing in **Relational** **Data Stream Management Systems** (**RDSMS**).
    We will not dive into SQL theory, as you can learn more about that by reading
    the relevant documentation. In this section, we will just cover the most valuable
    parts of GUI applications.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨基于**结构化查询语言**（**SQL**）的数据库。SQL是一种特定领域的语言，用于通过管理**关系数据库管理系统**（**RDBMS**）中的数据和处理**关系**
    **数据流管理系统**（**RDSMS**）中的流式处理来操纵数据库。我们不会深入探讨SQL理论，因为您可以通过阅读相关文档来了解更多。在本节中，我们将仅涵盖GUI应用程序中最有价值的内容。
- en: Databases, whether SQL or NoSQL-based, provide other approaches to storing data
    than previously discussed. In earlier examples, we have saved data to files and
    retrieved it by creating a data structure. However, using CSV files in this way
    is not always the most efficient approach. In some applications, we may require
    a database that is convenient and also provides management functionality. In other
    words, we need to create a SQL (or NoSQL) database for storing and managing data.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库，无论是基于SQL还是NoSQL，都提供了比之前讨论的存储数据的其他方法。在早期的例子中，我们已经将数据保存到文件中，并通过创建数据结构来检索它。然而，以这种方式使用CSV文件并不总是最有效的方法。在某些应用程序中，我们可能需要一个既方便又提供管理功能的数据库。换句话说，我们需要创建一个SQL（或NoSQL）数据库来存储和管理数据。
- en: In order to get the most out of this book, readers must have some basic knowledge
    of SQL and its main statements, such as `CREATE`, `INSERT`, `SELECT`, `UPDATE`,
    and `DELETE`. In the next section, we will start by looking at the main third-party
    SQL databases before moving on to discover what the Qt library makes possible.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 为了充分利用这本书，读者必须对SQL及其主要语句（如`CREATE`、`INSERT`、`SELECT`、`UPDATE`和`DELETE`）有一些基本了解。在下一节中，我们将首先查看主要的第三方SQL数据库，然后再探讨Qt库能做什么。
- en: SQLite
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite is an SQL database library that implements a small and fast SQL database
    engine using the C language. It is a straightforward database to use; its strengths
    are its simplicity and portability. This database can be easily implemented with
    applications for almost any device, and is the most widely used database in the
    world. Importantly, this database is also included in the Python standard library
    modules, and consequently can be used with PyQt and PySide bindings.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 是一个使用 C 语言实现的 SQL 数据库库，它实现了一个小型且快速的 SQL 数据库引擎。它是一个易于使用的数据库；其优势在于其简单性和可移植性。这个数据库可以轻松地与几乎任何设备的应用程序实现，并且是世界上使用最广泛的数据库。重要的是，这个数据库也包含在
    Python 标准库模块中，因此可以使用 PyQt 和 PySide 绑定。
- en: 'We don''t need to download it, install it, or go through a complicated process
    to start using this database; we just need to import it in a file, whenever we
    need it, with the following steps:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不需要下载它、安装它或通过复杂的过程来开始使用这个数据库；我们只需要在文件中导入它，无论何时需要，按照以下步骤：
- en: 'First, add the following line in the `u_defaults.py` file''s `import` section:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在 `u_defaults.py` 文件的 `import` 部分中添加以下行：
- en: '[PRE29]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Open the `u_defaults.py` file and add the following lines to create a database. After
    the `import` section, add the following path:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 `u_defaults.py` 文件，并在 `import` 部分之后添加以下路径以创建数据库：
- en: '[PRE30]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Then, after the function that writes colors to the file, add the following
    lines:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，在写入文件颜色的函数之后，添加以下行：
- en: '[PRE31]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Creating the connection to a database and its cursor, writing and executing
    an SQL query, and then closing the cursor with the database is a standard way
    of working with the SQL database.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 建立数据库及其游标的连接，编写并执行 SQL 查询，然后关闭游标与数据库的连接是使用 SQL 数据库的标准工作方式。
- en: Now, if we run the `u_app.py` file, the SQLite database with the table should
    exist and be ready to use. Note that the file of the database will be created
    in the `data/` folder of the application's directories.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们运行 `u_app.py` 文件，应该存在一个带有表的 SQLite 数据库，并准备好使用。请注意，数据库文件将创建在应用程序目录的 `data/`
    文件夹中。
- en: We now want to provide some operations to this database, such as inserting or
    selecting values.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在想为这个数据库提供一些操作，例如插入或选择值。
- en: 'So, in the `u_tools.py` files'' `import` section, add the following line:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 因此，在 `u_tools.py` 文件的 `import` 部分中添加以下行：
- en: '[PRE32]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add the following function, which will insert values into the database, to
    the `UTools` class of the `u_tools.py` file:'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下将值插入数据库的函数添加到 `u_tools.py` 文件的 `UTools` 类中：
- en: '[PRE33]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The preceding function realizes a connection to the SQLite database for inserting
    specified values.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数实现了向 SQLite 数据库插入指定值的连接。
- en: 'Next, add the function that will select values for the database, as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，添加以下函数以选择数据库的值：
- en: '[PRE34]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding function will select values from the database depending on the
    specific SQL query.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数将根据特定的 SQL 查询从数据库中选择值。
- en: 'In the `UApp` class of the `u_app.py` file, add the SQLite functionality for
    inserting or selecting database values to the `data()` function of the `UApp`
    class, as follows:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `u_app.py` 文件中的 `UApp` 类中，将插入或选择数据库值的 SQLite 功能添加到 `UApp` 类的 `data()` 函数中，如下所示：
- en: '[PRE35]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The preceding function will use the `sqlite_select()` function of the `UTools`
    class to select values from the database.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数将使用 `UTools` 类的 `sqlite_select()` 函数从数据库中选择值。
- en: 'Next, add the following code to the `save_data()` function:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，将以下代码添加到 `save_data()` 函数中：
- en: '[PRE36]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The preceding instruction will call the `user_data5()` function with the data
    specified in the parameters.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 上述指令将使用指定参数的数据调用 `user_data5()` 函数。
- en: 'Now add the `user_data5()` function to the end of the `UApp` class, as follows:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，将 `user_data5()` 函数添加到 `UApp` 类的末尾，如下所示：
- en: '[PRE37]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The preceding function will write the specified data to the SQLite database.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 上述函数将指定的数据写入 SQLite 数据库。
- en: We now know how to use the SQLite3 database in our application by inserting
    and selecting values. Note that some users may find SQLite less secure than other
    databases, but it also has a number of benefits. SQLite's flexibility, simplicity,
    and reliability, among other benefits means it is still recommended for use in
    applications.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在知道如何通过插入和选择值在我们的应用程序中使用 SQLite3 数据库。请注意，一些用户可能认为 SQLite 比其他数据库不太安全，但它也有许多优点。SQLite
    的灵活性、简单性和可靠性等优势意味着它仍然推荐用于应用程序。
- en: PostgreSQL
  id: totrans-154
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: PostgreSQL is a high-management relational database system and can be defined
    as an **Object-Relational Database Management System (ORDBMS)**. At the moment,
    it is the most commonly used database in cases related to big data and industrial
    tasks. As a database, PostgreSQL provides wide functionality. To implement this
    database in our application, we first need to download and install it to our remote
    or local device. PostgreSQL can be easily downloaded from the official source, [https://www.postgresql.org](https://www.postgresql.org),
    for any platform.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: PostgreSQL是一个高级管理的关联数据库系统，可以定义为**对象-关系数据库管理系统（ORDBMS）**。目前，它是大数据和工业任务相关案例中最常用的数据库。作为一个数据库，PostgreSQL提供了广泛的功能。为了将此数据库应用于我们的应用程序，我们首先需要将其下载并安装到我们的远程或本地设备上。PostgreSQL可以从官方源[https://www.postgresql.org](https://www.postgresql.org)轻松下载，适用于任何平台。
- en: 'To install this database, we need to follow the installation instructions and
    provide a password before it can connect. After everything is downloaded and installed,
    we need to configure PostgreSQL before we can begin using it. The following steps
    demonstrate how to do this:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 要安装此数据库，我们需要遵循安装说明，并在连接之前提供密码。下载和安装完成后，我们可以在使用它之前配置PostgreSQL。以下步骤演示了如何进行此操作：
- en: 'First, initialize the database cluster. To do this, open a command line or
    Terminal and change the current directory to the `data/` folder of the application
    directory, as follows:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，初始化数据库集群。为此，打开命令行或终端，并将当前目录更改为应用程序目录的`data/`文件夹，如下所示：
- en: '[PRE38]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Next, initialize the database cluster, as follows:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，初始化数据库集群，如下所示：
- en: '[PRE39]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'The database cluster will be initialized as a folder called `postgresdb`, or
    a place (a storage area on disk) where the database will be created. When initialization
    is complete, the following message should appear in the command-line or Terminal
    window:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 数据库集群将被初始化为一个名为`postgresdb`的文件夹，或者是一个位置（磁盘上的存储区域），其中将创建数据库。初始化完成后，以下消息应出现在命令行或终端窗口中：
- en: '[PRE40]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Now, start the server with a copy of the preceding line in the command line
    or Terminal:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，使用命令行或终端中的上一行副本启动服务器：
- en: '[PRE41]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'The result should look as follows:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该如下所示：
- en: '[PRE42]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We have now started the server and database cluster in the required directory.
    Note that we must start the server each time we want to use the database. After
    rebooting or reinstalling the operating system, this server can be stopped, so
    we need to enable the server to start automatically when the environment is started.
    You can find out how to do this by reading the official documentation or other
    third-party sources applicable to your operating system.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在已经在所需目录中启动了服务器和数据库集群。请注意，每次我们想要使用数据库时都必须启动服务器。在重新启动或重新安装操作系统后，此服务器可以停止，因此我们需要在环境启动时自动启动服务器。您可以通过阅读官方文档或适用于您操作系统的其他第三方资源来了解如何做到这一点。
- en: 'Now create the PostgreSQL database with the following command:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在用以下命令创建PostgreSQL数据库：
- en: '[PRE43]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Create a table in the database. To do this, open the following `psql` shell
    in the command line or Terminal:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据库中创建一个表。为此，在命令行或终端中打开以下`psql`外壳：
- en: '[PRE44]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Input the following SQL query for table creation:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入以下SQL查询以创建表：
- en: '[PRE45]'
  id: totrans-173
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The result should be as follows:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 结果应该是这样的：
- en: '[PRE46]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: So, we have now created a PostgreSQL database with a table for our application.
    PostgreSQL has various functionalities that give users the ability to configure
    and manage databases, such as `dropdb`, `dropuser`, and `psql` (command-line interface).
    These can all be found in the `bin/` folder of the PostgreSQL installation.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们现在已经创建了一个用于我们应用程序的PostgreSQL数据库和表。PostgreSQL具有各种功能，使用户能够配置和管理数据库，例如`dropdb`、`dropuser`和`psql`（命令行界面）。这些都可以在PostgreSQL安装的`bin/`文件夹中找到。
- en: 'The next step is to use this database in our application. The Python standard
    library doesn''t include PostgreSQL, so it needs to be downloaded and installed
    through a third-party package adapter, for example, `psycopg`. To do this, use
    the following command:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是将此数据库用于我们的应用程序。Python标准库不包括PostgreSQL，因此需要通过第三方包适配器下载和安装，例如`psycopg`。为此，请使用以下命令：
- en: '[PRE47]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'We can now use PostgreSQL with any Python-based application. To implement this
    functionality, add  the following lines to the `u_tools.py` files:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以使用PostgreSQL与任何基于Python的应用程序。要实现此功能，请将以下行添加到`u_tools.py`文件中：
- en: 'In the `u_tools.py` file, add the following import statement to the `import`
    section:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`u_tools.py`文件中，将以下导入语句添加到`import`部分：
- en: '[PRE48]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, in the `UTools` class of the `u_tools.py` file, add a function that inserts
    values into the PostgreSQL database, as follows:'
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: As you can see from the preceding example, SQL databases are very similar, and
    the function quickly realizes it's using a PostgreSQL database in the application.
    This function will insert values into the database.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function, which selects values from the PostgreSQL database:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: The preceding function will select values from the PostgreSQL database dependent
    on the specified SQL query.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `UApp` class of the `u_app.py` file, add the PostgreSQL tool for inserting
    and selecting database values. Add the PostgreSQL functionality to the `data()`
    function of the `UApp` class, as follows:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The preceding instruction uses the `psql_select()` function of the `UTools`
    class to select the data from the database and append it to the text edit field.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the `user_data6()` function to the `save_data()` function, as follows:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: The preceding instruction will call the `user_data6()` function with the specified
    parameters.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the `user_data6()` function to the end of the `UApp` class, as follows:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: The preceding instruction calls the `psql_insert()` function to insert user
    data into the database. The PostgreSQL database is now integrated and ready to
    use!
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: MySQL
  id: totrans-197
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The MySQL database requires special attention. MySQL is an open source RDBMS that
    combines the simplicity and reliability of SQLite with slightly less functionality
    than PostgreSQL. In addition, MySQL is a component of the **Linux-Apache-MySQL-Python|PHP|Perl
    (LAMP)** web application software stack, which is very important for development.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: Integrating this database in our application is very easy. We can either download
    and install a binary package of MySQL or a zipped archive. Using a binary package,
    we can easily install the database by following the instructions provided by the
    graphical installer. With a zipped archive, we need to use the documentation available
    at [https://www.mysql.com](https://www.mysql.com) and initialize the non-install
    MySQL package.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: 'Once everything is downloaded and installed, we can create a database with
    a table using the following steps:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'First, open a client console, enter the password for the root user, and type
    a SQL query similar to the following:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Now, pass the following command to check all available databases:'
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'The output of the preceding command is as follows:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/91b44329-db4e-46fe-b75f-b36a5bc8cbc5.png)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
- en: The preceding screenshot displays the databases available for us to use.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: We can now create a table for the `mysqldb` database, but we need to select
    the database first. Note that choosing to use the database is required before
    you can use it.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Input the following command:'
  id: totrans-209
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Create the query for adding a table to the database with the following code:'
  id: totrans-211
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Now, display the tables in the database with the following command:'
  id: totrans-213
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-214
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Check which user is connecting to the database with the following command:'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Like PostgreSQL, the Python standard library does not include MySQL—it needs
    to be downloaded and installed via a third-party package adapter such as PyMySQL.
    To do so, enter the following command on the command line or Terminal:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-218
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'Now we can start using the MySQL database with a Python-based application.
    We use the MySQL database in the `u_tools.py` file:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `u_tools.py` file, add the following `import` statement to the `import`
    section:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'As before, add the function that will insert values into the MySQL database
    table to the `UTools` class of the `u_tools.py` file, as follows:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: The preceding function will connect to the MySQL database and insert user data.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function, which will be used to select values from the MySQL
    database:'
  id: totrans-225
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: The preceding function will connect to and select user data from the MySQL database.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `UApp` class of the `u_app.py` file, add the MySQL tool for inserting
    and selecting database values. Add the MySQL functionality to the `data()` function
    of the `UApp` class, as follows:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The preceding instruction will use the `mysql_select()` function for reading
    user data from the database and append it to the text field.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following code to the `save_data()` function:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: The preceding instruction will call the `user_data7()`function with the specified
    user data in its parameters.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `user_data7()` function to the end of the `UApp` class, as follows:'
  id: totrans-234
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  id: totrans-235
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: The preceding instruction will use the `mysql_insert()` function of the `UTools`
    class to insert values into the MySQL database. The MySQL database operations are
    now available!
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Qt SQL
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the Qt library, the Qt SQL module provides SQL database integration with
    GUI applications. This module includes classes that realize the driver, API, and
    user interface layers for SQL databases. The driver-related classes that are currently
    available are `QSqlDriver`, `QSqlDriverCreatorBase`, and `QSqlResult`. For the
    API, there are classes such as `QSqlDatabase`, `QSqlQuery`, `QSqlField`, `QSqlIndex`,
    `QSqlRecord`, and `QSqlError`. Classes that implement the user interface layer
    include `QSqlQueryModel`, `QSqlTableModel`, and `QSqlRelationalTableModel`. To
    use this module in our application, we need to add the following lines to the
    `u_tools.py` files:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `import` section of the PyQt5 `u_tools.py` file:'
  id: totrans-239
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'Add the following code to the `import` section of the PySide2 `u_tools.py`
    file:'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Let's now look at some of the classes included in the `QtSql` module for working
    with SQL databases in our application.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: QSqlDatabase
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This class realizes the SQL API layer and creates connections to the databases
    in the application. The declaration syntax of this class is as follows:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  id: totrans-246
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The `QSqlDatabase` class improves functionality with the following functions.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: add
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `sql_db.addDatabase(str, str)` function adds the database to a list of connections,
    along with its driver type (the first parameter) and the connection name (the
    second parameter).
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'The driver types that can be specified for the database connection are as follows:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '`"QSQLITE"`: SQLite3 or above.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"QSQLITE2"`: SQLite2.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"QPSQL"`: PostgreSQL driver.'
  id: totrans-253
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"QMYSQL"`: MySQL driver.'
  id: totrans-254
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"QODBC"`: ODBC driver (includes Microsoft SQL Server).'
  id: totrans-255
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"QOCI"`: Oracle Call Interface driver.'
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"QDB2"`: IBM DB2.'
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"QIBASE"`: Borland InterBase driver.'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`"QTDS"`: Sybase Adaptive Server.'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: set
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following functions set the parameters and properties of the database connection:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.setConnectOptions(str)`: This sets the database-specific options specified
    in a parameter.'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.setDatabaseName(str)`: This sets the name of the database, specified
    in the parameter, of the database connection.'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.setHostName(str)`: This sets the hostname, as specified in the parameter.'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.setNumericalPrecisionPolicy(QtSql.QSql.NumericalPrecisionPolicy)`:
    This sets the numerical precision policy, as specified in the parameter.'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.setPassword(str)`: This sets the password, as specified in the parameter.'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.setPort(int)`: This sets the port, as specified in the parameter.'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.setUserName(str)`: This sets the username, as specified in the parameter.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: is
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following functions return a Boolean value (`bool`) related to the database''s
    connection state:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.isDriverAvailable(str)`: This returns `True` if the driver specified
    in the parameter is available.'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.isOpen()`: This returns `True` if this database connection is open;
    otherwise, it returns `False`.'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.isOpenError()`: This returns `True` if an error occurs when the database
    connection opens.'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.isValid()`: This returns `True` if the `QtSql.QSqlDatabase` object
    has a valid driver.'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-275
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following functions relate to the current values of the database connection,
    changes in functionality, and so on:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.cloneDatabase(QtSql.QSqlDatabase, str)`: This clones the database connection
    (the first parameter) and stores it as a connection name (the second parameter).'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.close()`: This closes this database connection.'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.commit()`: This commits a transaction to the database, such as `INSERT`
    operations.'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.connectionName()`: This returns the connection name of the database
    connection.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.connectionNames()`: This returns a list of the connection names of
    the database connection.'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.connectOptions()`: This returns the connection options that are used
    with the database connection.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.contains(str)`: This returns `True` if the list of connections contains
    the connection name specified in the parameter.'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.database(str, bool)`: This returns the database connection of the `QtSql.QSqlDatabase`
    type, with the connection name (the first parameter); if `open` (the second parameter)
    is `True`, the unopened database connection will open.'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.databaseName()`: This returns the name of the database for the database
    connection.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.driver()`: This returns the database driver of the `QtSql.QSqlDriver`
    type used for the database connection.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.driverName()`: This returns the name of the driver that is used for
    the database connection.'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.drivers()`: This returns the list of all available drivers.'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.exec_(str)`: This executes a SQL statement and returns an object of
    the `QtSql.QSqlQuery` type.'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.hostName()`: This returns the hostname of the database connection.'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.lastError()`: This returns the last error that occurred within the
    database.'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.numericalPrecisionPolicy()`: This returns the default precision policy
    of the `QtSql.QSql.NumericalPrecisionPolicy` type for the database connection.'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.open()`: This opens the database connection with the current connection
    values.'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.open(str, str)`: This opens the database connection with the specified username
    (the first parameter) and password (the second parameter).'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.password()`: This returns the password of the database connection.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.port()`: This returns the port of the database connection.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.primaryIndex(str)`: This returns the primary index for the table specified
    in the parameter.'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.record(str)`: This returns the record of the `QtSql.QSqlRecord` type,
    populated with the names of the fields in the table specified in the parameter.'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.registerSqlDriver(str, QtSql.QSqlDriverCreatorBase)`: This registers
    the SQL driver (the second parameter) with a name (the first parameter).'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.removeDatabase(str)`**:** This removes the database connection with
    the name specified in the parameter.'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.rollback()`: This rolls back database transactions.'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.tables(QtSql.QSql.TableType)`: This returns a list of the tables in
    the database used with the database connection.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.transaction()`: This begins a transaction with the database, such as
    inserting values.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_db.userName()`: This returns the username of the database connection.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: QSqlQuery
  id: totrans-305
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QSqlQuery` class executes SQL statements and database-specific commands
    related to operations with databases in the application.  The declaration syntax
    of this class is as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE70]'
  id: totrans-307
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: The `QSqlQuery` class improves functionality with the following functions.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: add
  id: totrans-309
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This `add` function adds SQL queries.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
- en: The  `sql_query.addBindValue(object, PySide2.QtSql.QSql.ParamType)` function
    adds the binding value (the first parameter) to the list of values, using the
    type (the second parameter).
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: set
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following functions set the parameters and properties of the SQL queries:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.setForwardOnly(bool)`: If this parameter is `True`, it sets forward-only
    mode.'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.setNumericalPrecisionPolicy(QtSql.QSql.NumericalPrecisionPolicy)`:
    This sets the numerical precision policy, specified in the parameter, that will
    be used for querying.'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: is
  id: totrans-316
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following functions return a Boolean value (`bool`) related to the SQL
    query''s state:'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.isActive()`: This returns `True` if the query is active.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.isForwardOnly()`: This returns `True` if the result set can only be
    scrolled in a forward direction.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.isNull(int)`: This returns `True` if the query is not active nor
    positioned on a valid record, if there is no field specified in the parameter,
    or if this field is `null`.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.isNull(str)`: This returns `True` if this query is not active, not
    positioned on a valid record, if there is no field with the name specified in
    the parameter, or if this field is `null`.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.isSelect()`: This returns `True` if the current query uses the SQL
    `SELECT` statement to retrieve values from the database.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.isValid()`: This returns `True` if this query is positioned on a
    valid record.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: functional
  id: totrans-324
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following functions relate to the current values of SQL queries, changes
    in functionality, and so on:'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.at()`: This returns the current internal position for the query.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.bindValue(str, object, QtSql.QSql.ParamType)`: This sets the placeholder
    (the first parameter) that will be bound to the value (the second parameter) in
    the statement, using the type (the third parameter).'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.bindValue(int, object, QtSql.QSql.ParamType)`: This sets the placeholder
    in the position (the first parameter) that will be bound to the value (the second
    parameter) in the statement, using the type (the third parameter).'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.boundValue(str)`: This returns the bound value for the placeholder
    specified in the parameter.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.boundValue(int)`: This returns the bound value for the placeholder
    at the position specified in the parameter.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.boundValues()`: This returns a dictionary with bound values.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.clear()`: This clears the results of the query.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.driver()`: This returns the database driver of the `QtSql.QSqlDriver`
    type that was used with the query.'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.exec_()`: This executes the prepared query statement and returns
    `True` if it was successful.'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.exec_(str)`: This executes the query statement specified in the
    parameter and returns `True` if it was successful.'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.execBatch(QtSql.QSqlQuery.BatchExecutionMode)`: This executes the
    query statement in a batch, with the execution mode specified in the parameter. The
    available modes include **`QtSql.QSqlQuery.ValuesAsRows`**—`0`, which updates
    multiple rows, and `QtSql.QSqlQuery.ValuesAsColumns`—`1`, which updates a single
    row.'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.executedQuery()`: This returns the last successfully executed query.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.finish()`: This function instructs that no more data will be fetched
    from a query until the query is  re-executed.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.first()`: This retrieves the first record in a  result, and positions
    the query on the retrieved record.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.last()`: This retrieves the last record in a result, and positions
    the query on the retrieved record.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.lastError()`: This returns the last error of the `QtSql.QSqlError`
    type that occurred with the query.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.lastInsertId()`: This returns the ID of the object for the last
    inserted row.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.lastQuery()`: This returns the text of the last query.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.next()`: This retrieves the next record in the result.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.nextResult()`: This discards the result set of a query, and if it''s
    available, it navigates to the next result.'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.numericalPrecisionPolicy()`: This returns the precision policy of
    the `QtSql.QSql.NumericalPrecisionPolicy` type that is currently used.'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.numRowsAffected()`: This returns the number of rows in relation
    to the result of the SQL statement.'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.prepare(str)`: This prepares the SQL query statement specified in
    the parameter for execution.'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.previous()`: This retrieves the previous record in the result.'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.record()`: This returns the record of the `QtSql.QSqlRecord` type
    that contains the field information for this query.'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.result()`: This returns the result of the `QtSql.QSqlResult` type
    related to the query.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.seek(int, bool)`: This retrieves the record at a specific index
    (the first parameter) in accordance with the second parameter.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.size()`: This returns the number of rows in the result.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.value(int)`: This returns the value of the field at the index specified
    in the parameter of the current record.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
- en: '`sql_query.value(str)`: This returns the value of field with the name specified
    in the parameter of the current record.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
- en: Qt SQL example
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s now take a look at an example of the `QtSql` module in action in our
    application. First, we need to open the `u_tools.py` files and add the following
    lines to them:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `QSqlDatabase`, which will open an existing database or create a new database
    if one doesn''t exist, to the `__init__()` function of the `UTools` class, as
    follows:'
  id: totrans-358
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE71]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The name of the database driver is defined in the `addDatabase()` method. Another
    driver can be used if available. This method sets the name and opens the database.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the function that will insert values into the opened SQLite database,
    as follows:'
  id: totrans-361
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The preceding function uses the **`QSqlQuery`** class to create the SQL query
    and bind user data by inserting values.
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following function, which will select values from the database:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: The preceding function will select the user data dependent on the query and
    return it.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `UApp` class of the `u_app.py` files, add the `QtSQL` tool for inserting
    and selecting database values. Add the `QtSql` module functionality to the `data()`
    function of the `UApp` class, as follows:'
  id: totrans-367
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  id: totrans-368
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: The preceding instruction uses the `sql_qt_select()` function to select user
    data from the database and append the returned result to the text field.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, add the following to the `save_data()` function:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  id: totrans-371
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: The preceding instruction calls the `user_data8()`function with the specified
    user data parameters.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the `user_data8()` function to the end of the `UApp` class, as follows:'
  id: totrans-373
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  id: totrans-374
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: The preceding function will call the `sql_qt_insert()` function of the `UTools`
    class to insert user data into the SQLite database. This example demonstrates
    the use of the `QtSql` module in practice. As you can see, it differs from standard
    third-party instruments, and this construction may be hard to understand. At the
    time of writing, by default, this module only has a `"QSQLITE"` driver, so others
    will need to be loaded and configured additionally. Whether you use this module
    instead of third-party database instruments is up to you.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
- en: NoSQL
  id: totrans-376
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NoSQL databases are other modern mechanisms for storing data. NoSQL is referred
    to as not-SQL, or not-relational, as data is modeled in a different way to the
    tabular relations in relational SQL databases. NoSQL databases are usually used
    in big data and real-time web applications. Another popular definition of NoSQL
    is *Not only SQL.* This means NoSQL databases can support SQL or sit alongside
    SQL databases.
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
- en: Implementing NoSQL databases in our application may simplify document storage
    and make data handling easier, so let's a look at some short examples of how to
    use the most popular NoSQL databases in the GUI.
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB
  id: totrans-379
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: MongoDB is an open source database for NoSQL document storage. This database
    records documents as a data structure with field/value pairs. These documents
    are similar to the JSON objects we created in the *pandas* section. MongoDB values
    include documents, arrays, and arrays of documents. To use MongoDB, you need to
    download and install it from the official source, [https://mongodb.com](https://mongodb.com),
    using the documentation provided. It is also recommended that you download and
    install the additional development tools available.
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to previous sections, create the `MongoDB_1/`  folder in both the `App/App_PySide2/data/`
    and `App/App_PyQt5/data/` directories, where the database will be located:'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: 'First, run a command similar to the following in your command line or Terminal,
    depending on your operating system:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  id: totrans-383
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Find the executable files, such as `mongod` (for Linux) or `mongod.exe` (for
    Windows), and run the following command:'
  id: totrans-384
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  id: totrans-385
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: 'To connect to MongoDB, use commands such as `mongo` or `mongo.exe` in the new
    command line or Terminal, as follows:'
  id: totrans-386
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE79]'
  id: totrans-387
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: 'An adapter is required for using MongoDB with Python; in this case, `pymongo`.
    Install the adapter with `pip`, as follows:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  id: totrans-389
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: Now we can use the MongoDB functionality with our application!
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s time to add some lines to the `u_tools.py` files:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `u_tools.py` files and add the following line to the `import` section:'
  id: totrans-392
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  id: totrans-393
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Add the following function to the `UTools` class of the `u_tools.py` files.
    This will insert values into the MongoDB database:'
  id: totrans-394
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  id: totrans-395
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: The preceding function creates a connection to the MongoDB database with the
    host and port specified.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the function that will be used to select values from MongoDB, as follows:'
  id: totrans-397
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE83]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: The name of the database in this example is specified as `'umongodb'`. This
    function returns all user data from within the database.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `UApp` class of the `u_app.py` files, add the MongoDB tool for inserting
    and selecting database values. Add the MongoDB functionality to the `data()` function
    of the `UApp` class, as follows:'
  id: totrans-400
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: The preceding instruction uses the `mongo_select()` function to read data from
    the database and append it to the text field.
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following to the `save_data()` function:'
  id: totrans-403
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: The `elif` instruction will use the `user_data9()` function with the specified
    parameters.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the `user_data9()` function to the end of the `UApp` class, as follows:'
  id: totrans-406
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE86]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: The preceding function will be used to insert data into the database. It is
    a simple, short, and basic example of the implementation of Mongo in our application.
    To learn about all the capabilities and advantages of MongoDB in more detail,
    it's recommended that you read Mongo's official documentation.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
- en: CouchDB
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Another popular type of NoSQL data storage is Apache CouchDB. This database
    uses mechanisms that are similar to the ones described in the previous section,
    but improves them with additional features. CouchDB is a modern tool for the web
    implementation of stored documents. If you're using the HTTP and JSON data formats,
    this database is the preferred choice.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
- en: To use this database in your application, you need to download and install it
    by following the instructions at [http://couchdb.apache.org/](http://couchdb.apache.org/) for
    the appropriate operating system. When everything that is required is installed
    and configured, it's time to start CouchDB. To configure and start this database,
    it is recommended that you use additional documentation from your operating system,
    because the steps required may be different.
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
- en: 'With CouchDB open, it''s time to enter `http://127.0.0.1:5984/_utils/` in the
    search line of the web browser. A page explaining Couch database management, with
    additional instructions, should appear. It''s now time to create a database called
    `u_couchdb` using the functionality of this web page. Once the database is created,
    you can create a document. To do this, click on the Create Document button on
    the web page and add the following lines:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE87]'
  id: totrans-413
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Note that `_id` will be different. When the document is created, the first
    record of the database should appear on the web page. To implement these operations
    with Python, additional instruments to connect to Couch Database are needed, for
    example, the `CouchDB` package. Install this using the following command with `pip`:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  id: totrans-415
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Now open the `u_tools.py` files and add some lines to realize the functionality
    in the application:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code to the `import` section of the `u_tools.py` file:'
  id: totrans-417
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE89]'
  id: totrans-418
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'Next, add the following function to the `UTools` class of the `u_tools.py`
    files:'
  id: totrans-419
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE90]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: The preceding function will connect to the database with the specified URL (host
    and port) and insert values into CouchDB.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the function that will be used to select values from the database,
    as follows:'
  id: totrans-422
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE91]'
  id: totrans-423
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: The preceding function will connect to the database, select the available values,
    and return data. In the `UApp` class of the `u_app.py` files, add the CouchDB
    tool for inserting and selecting database values.
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the CouchDB functionality to the `data()` function of the `UApp` class,
    as follows:'
  id: totrans-425
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE92]'
  id: totrans-426
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: The preceding instruction uses the `couch_select()` function of the `UTools`
    class to select the user data from CouchDB.
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following code to the `save_data()` function:'
  id: totrans-428
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE93]'
  id: totrans-429
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: The preceding instruction uses the `user_data10()` function with the specified
    user data parameters.
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the `user_data10()` function to the end of the `UApp` class, as follows:'
  id: totrans-431
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE94]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: The preceding function will call the `couch_insert()` function of the `UTools`
    class to insert the specified user data into the database. When the `u_app.py`
    files are run, you can communicate with CouchDB to insert values and select them
    in the documents, which will be represented on the web page of the Fauxton utility
    provided by the CouchDB functionality.
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-434
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter introduced the most important part of constructing an application—data
    manipulation. In this chapter, we also explained the first steps of handling data
    in an application. As we have outlined in this chapter, the construction of implementations
    are somewhat similar, and their use is optional, so we will now move forward and
    concentrate on extending the GUI application's functionality.
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will explain the communication mechanism between an application
    and its user. In the Qt library, this is done with signals, slots, and events.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
