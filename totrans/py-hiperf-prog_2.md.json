["```py\nIn [1]: import numpy as np\nIn [2]: a = np.array([0, 1, 2])\n```", "```py\nIn [3]: a.dtype\nOut[3]: dtype('int64')\n```", "```py\nIn [4]: a = np.array([1, 2, 3], dtype='float32')\nIn [5]: a.astype('float32')\nOut[5]: array([ 0.,  1.,  2.], dtype=float32)\n```", "```py\nIn [6]: a = np.array([[0, 1, 2], [3, 4, 5]])\nIn [7]: print(a)\nOut[7]: [[0 1 2][3 4 5]]\n```", "```py\nIn [7]: a.shape\nOut[7]: (2, 3)\n```", "```py\nIn [7]: a = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8,9, 10, 11, 12, 13, 14, 15])\nIn [7]: a.shape\nOut[7]: (16,)\nIn [8]: a.reshape(4, 4) # Equivalent: a.shape = (4, 4)\nOut[8]:\narray([[ 0,  1,  2,  3],[ 4,  5,  6,  7],[ 8,  9, 10, 11],[12, 13, 14, 15]])\n```", "```py\nIn [8]: np.zeros((3, 3))\nIn [9]: np.empty((3, 3))\nIn [10]: np.ones((3, 3), dtype='float32')\n```", "```py\nIn [11]: np.random.rand(3, 3)\n```", "```py\nIn [12]: np.zeros_like(a)\nIn [13]: np.empty_like(a)\nIn [14]: np.ones_like(a)\n```", "```py\nIn [15]: A = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8])\nIn [16]: A[0]\nOut[16]: 0\nIn [17]: [a for a in A]\nOut[17]: [0, 1, 2, 3, 4, 5, 6, 7, 8]\n```", "```py\nIn [18]: A = np.array([[0, 1, 2], [3, 4, 5], [6, 7, 8]])\nIn [19]: A[0]\nOut[19]: array([0, 1, 2])\n```", "```py\nIn [20]: A[0, 1]\nOut[20]: 1\n```", "```py\nIn [21]: A[0:2]\nOut[21]: array([[0, 1, 2],\n               [3, 4, 5]])\n```", "```py\nIn [22]: A[0:2, 0:2]\nOut[22]: array([[0, 1],\n                [3, 4]])\n```", "```py\nIn [23]: A[0, 1] = 8\nIn [24]: A[0:2, 0:2] = [[1, 1], [1, 1]]\n```", "```py\nIn [25]: a = np.array([1, 1, 1, 1])\nIn [26]: a_view = a[0:2]\nIn [27]: a_view[0] = 2\nIn [28]: print(a)\nOut[28]: [2 1 1 1]\n```", "```py\nIn [29]: r_i = np.random.rand(10, 2)\n```", "```py\nIn [30]: x_i = r_i[:, 0]\n```", "```py\nIn [31]: r_0 = r_i[0, :]\n```", "```py\nIn [32]: a = np.array([9, 8, 7, 6, 5, 4, 3, 2, 1, 0])\nIn [33]: idx = np.array([0, 2, 3])\nIn [34]: a[idx]\nOut[34]: array([9, 7, 6])\n```", "```py\nIn [35]: a = np.array([[0, 1, 2], [3, 4, 5],\n                       [6, 7, 8], [9, 10, 11]])\nIn [36]: idx1 = np.array([0, 1])\nIn [37]: idx2 = np.array([2, 3])\nIn [38]: a[idx1, idx2]\n```", "```py\n>>> a[np.array([0, 1])] # is equivalent to\n>>> a[[0, 1]]\n```", "```py\n>>> a[(0, 1)] # is equivalent to>>> a[0, 1]\n```", "```py\nIn [39]: idx1 = [[0, 1], [3, 2]]\nIn [40]: idx2 = [[0, 2], [1, 1]]\nIn [41]: a[idx1, idx2]\nOut[41]: array([[ 0,  5],[10,  7]])\n```", "```py\nIn [42]: r_i = np.random(10, 2)\nIn [43]: r_i[:, [0, 1]] = r_i[:, [1, 0]]\n```", "```py\nIn [44]: a = np.array([0, 1, 2, 3, 4, 5])\nIn [45]: mask = np.array([True, False, True, False, False, False])\nIn [46]: a[mask]\nOut[46]: array([0, 2])\n```", "```py\nIn [47]: r_i = np.random(100, 2)\nIn [48]: idx = np.arange(50) # integers 0 to 50\nIn [49]: %timeit np.take(r_i, idx, axis=0)\n1000000 loops, best of 3: 962 ns per loop\nIn [50]: %timeit r_i[idx]\n100000 loops, best of 3: 3.09 us per loop\n```", "```py\nIn [51]: idx = np.ones(100, dtype='bool') # all True values\nIn [52]: %timeit np.compress(idx, r_i, axis=0)\n1000000 loops, best of 3: 1.65 us per loop\nIn [53]: %timeit r_i[idx]\n100000 loops, best of 3: 5.47 us per loop\n```", "```py\nIn [54]: A = np.array([[1, 2], [3, 4]])\nIn [55]: B = np.array([[5, 6], [7, 8]])\nIn [56]: A * B\nOut[56]: array([[ 5, 12],[21, 32]])\n```", "```py\nIn [57]: A * 2\nOut[58]: array([[2, 4],\n                [6, 8]])\n```", "```py\n5, 10, 2\n```", "```py\n5, 10, 2\n5,  1, 2 → repeated\n- - - -\n5, 10, 2\n```", "```py\nIn [59]: A = np.random.rand(5, 10, 2)\nIn [60]: B = np.random.rand(5, 2)\nIn [61]: A * B[:, np.newaxis, :]\n```", "```py\na = [a1, a2, a3]\nb = [b1, b2, b3]\n```", "```py\na x b = a1*b1, a1*b2, a1*b3\n        a2*b1, a2*b2, a2*b3\n        a3*b1, a3*b2, a3*b3\n```", "```py\nAB = a[:, np.newaxis] * b[np.newaxis, :]\n```", "```py\nIn [59]: np.sqrt(np.array([4, 9, 16]))\nOut[59]: array([2., 3., 4.])\n```", "```py\nIn [60]: a = np.random.rand(5, 3)\nIn [61]: a > 0.5\nOut[61]: array([[ True, False,  True],[ True,  True,  True],[False,  True,  True],[ True,  True, False],[ True,  True, False]], dtype=bool)\n```", "```py\nIn [62]: a[a > 0.5]\nIn [63]: print(a[a>0.5])\n[ 0.9755  0.5977  0.8287  0.6214  0.5669  0.9553  0.58940.7196  0.9200  0.5781  0.8281 ]\n```", "```py\nIn [64]: a = np.random.rand(5, 3)\nIn [65]: a.sum(axis=0)\nOut[65]: array([ 2.7454,  2.5517,  2.0303])\nIn [66]: a.sum(axis=1)\nOut[66]: array([ 1.7498,  1.2491,  1.8151,  1.9320,  0.5814])\nIn [67]: a.sum() # With no argument operates on flattened array\nOut[67]: 7.3275\n```", "```py\nnorm = sqrt(x^2 + y^2)\n```", "```py\nIn [68]: r_i = np.random.rand(10, 2)\nIn [69]: norm = np.sqrt((r_i ** 2).sum(axis=1))\nIn [70]: print(norm)\n[ 0.7314  0.9050  0.5063  0.2553  0.0778   0.91431.3245  0.9486  1.010   1.0212]\n```", "```py\nfor i in range(nsteps):\n  for p in self.particles:\n\n    norm = (p.x**2 + p.y**2)**0.5\n    v_x = (-p.y)/norm\n    v_y = p.x/norm\n\n    d_x = timestep * p.ang_speed * v_x\n    d_y = timestep * p.ang_speed * v_y\n\n    p.x += d_x\n    p.y += d_y\n```", "```py\nr_i = np.array([[p.x, p.y] for p in self.particles])\nang_speed_i = np.array([p.ang_speed for p in self.particles])\n```", "```py\nv_x = -y / norm\nv_y = x / norm\n```", "```py\nnorm_i = ((r_i ** 2).sum(axis=1))**0.5\n```", "```py\nv_i = r_i[:, [1, 0]] / norm_i\nv_i[:, 0] *= -1\n```", "```py\nd_i = timestep * ang_speed_i[:, np.newaxis] * v_i\nr_i += d_i\n```", "```py\nfor i, p in enumerate(self.particles):\n  p.x, p.y = r_i[i]\n```", "```py\ndef evolve_numpy(self, dt):\n  timestep = 0.00001\n  nsteps = int(dt/timestep)\n\n  r_i = np.array([[p.x, p.y] for p in self.particles])\n  ang_speed_i = np.array([p.ang_speed for p in self.particles])\n\n  for i in range(nsteps):\n\n    norm_i = np.sqrt((r_i ** 2).sum(axis=1))\n    v_i = r_i[:, [1, 0]]\n    v_i[:, 0] *= -1\n    v_i /= norm_i[:, np.newaxis]\n    d_i = timestep * ang_speed_i[:, np.newaxis] * v_i\n    r_i += d_i\n\n    for i, p in enumerate(self.particles):\n      p.x, p.y = r_i[i]\n```", "```py\ndef benchmark(npart=100, method='python'):\n  particles = [Particle(uniform(-1.0, 1.0),uniform(-1.0, 1.0),uniform(-1.0, 1.0))for i in range(npart)]\n\n  simulator = ParticleSimulator(particles)\n\n  if method=='python':\n    simulator.evolve_python(0.1)\n\n  elif method == 'numpy':\n    simulator.evolve_numpy(0.1)\n```", "```py\nIn [1]: from simul import benchmark\nIn [2]: %timeit benchmark(100, 'python')\n1 loops, best of 3: 614 ms per loop\nIn [3]: %timeit benchmark(100, 'numpy')\n1 loops, best of 3: 415 ms per loop\n```", "```py\nIn [4]: %timeit benchmark(1000, 'python')\n1 loops, best of 3: 6.13 s per loop\nIn [5]: %timeit benchmark(1000, 'numpy')\n1 loops, best of 3: 852 ms per loop\n```", "```py\na = np.random.rand(10000)\nb = np.random.rand(10000)\nc = np.random.rand(10000)\nd = ne.evaluate('a + b * c')\n```", "```py\nx_ij = x_j - x_i\ny_ij = y_i - y_j\n```", "```py\nd_ij = sqrt(x_ij**2 + y_ij**2)\n```", "```py\nr = np.random.rand(10000, 2)\nr_i = r[:, np.newaxis]\nr_j = r[np.newaxis, :]\nr_ij = r_j – r_i\n```", "```py\nd_ij = np.sqrt((r_ij ** 2).sum(axis=2))\n```", "```py\nr = np.random(10000, 2)\nr_i = r[:, np.newaxis]\nr_j = r[np.newaxis, :]\n```", "```py\nd_ij = ne.evaluate('sum((r_j – r_i)**2, 2)')\nd_ij = ne.evaluate('sqrt(d_ij)')\n```", "```py\nfrom distance_matrix import (distance_matrix_numpy,\n                             distance_matrix_numexpr)\n%timeit distance_matrix_numpy(10000)\n1 loops, best of 3: 3.56 s per loop\n%timeit distance_matrix_numexpr(10000)\n1 loops, best of 3: 858 ms per loop\n```"]