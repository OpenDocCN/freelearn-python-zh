["```py\nhttp PATCH :8888/leds/1 brightness_level=255\n\n```", "```py\ncurl -iX PATCH -H \"Content-Type: application/json\" -d\n   '{\"brightness_level\":255}' :8888/leds/1\n\n```", "```py\nhttp PATCH :8888/leds/2 brightness_level=255\n\n```", "```py\ncurl -iX PATCH -H \"Content-Type: application/json\" -d\n   '{\"brightness_level\":255}' :8888/leds/2\n\n```", "```py\nI've started setting the Blue LED's brightness level\n\n```", "```py\nI've finished setting the Blue LED's brightness level\nI've started setting the White LED's brightness level\nI've finished setting the White LED's brightness level\n\n```", "```py\nimport status \nfrom datetime import date \nfrom tornado import web, escape, ioloop, httpclient, gen \nfrom concurrent.futures import ThreadPoolExecutor \nfrom tornado.concurrent import run_on_executor \nfrom drone import Altimeter, Drone, Hexacopter, LightEmittingDiode \n\nthread_pool = ThreadPoolExecutor() \ndrone = Drone() \n\n```", "```py\nclass AsyncHexacopterHandler(web.RequestHandler): \n    SUPPORTED_METHODS = (\"GET\", \"PATCH\") \n    HEXACOPTER_ID = 1 \n    _thread_pool = thread_pool\n @gen.coroutine \n    def get(self, id): \n        if int(id) is not self.__class__.HEXACOPTER_ID: \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            self.finish() \n            return \n        print(\"I've started retrieving hexacopter's status\") \n        hexacopter_status = yield self.retrieve_hexacopter_status() \n        print(\"I've finished retrieving hexacopter's status\") \n        response = {  \n            'speed': hexacopter_status.motor_speed, \n            'turned_on': hexacopter_status.turned_on, \n            } \n        self.set_status(status.HTTP_200_OK) \n        self.write(response) \n        self.finish()\n @run_on_executor(executor=\"_thread_pool\") \n    def retrieve_hexacopter_status(self): \n        return drone.hexacopter.get_hexacopter_status()\n @gen.coroutine \n    def patch(self, id): \n        if int(id) is not self.__class__.HEXACOPTER_ID: \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            self.finish() \n            return \n        request_data = escape.json_decode(self.request.body)  \n        if ('motor_speed' not in request_data.keys()) or \\ \n            (request_data['motor_speed'] is None): \n            self.set_status(status.HTTP_400_BAD_REQUEST) \n            self.finish() \n            return \n        try: \n            motor_speed = int(request_data['motor_speed']) \n            print(\"I've started setting the hexacopter's motor speed\") \n            hexacopter_status = yield\n            self.set_hexacopter_motor_speed(motor_speed) \n            print(\"I've finished setting the hexacopter's motor speed\") \n            response = {  \n                'speed': hexacopter_status.motor_speed, \n                'turned_on': hexacopter_status.turned_on, \n                } \n            self.set_status(status.HTTP_200_OK) \n            self.write(response) \n            self.finish() \n        except ValueError as e: \n            print(\"I've failed setting the hexacopter's motor speed\") \n            self.set_status(status.HTTP_400_BAD_REQUEST) \n            response = { \n                'error': e.args[0] \n                } \n            self.write(response) \n            self.finish()\n @run_on_executor(executor=\"_thread_pool\") \n    def set_hexacopter_motor_speed(self, motor_speed): \n        return drone.hexacopter.set_motor_speed(motor_speed)\n\n```", "```py\nhexacopter_status = yield self.retrieve_hexacopter_status() \n\n```", "```py\nhexacopter_status = yield self.retrieve_hexacopter_status() \n\n```", "```py\nhexacopter_status = yield self.set_hexacopter_motor_speed(motor_speed) \n\n```", "```py\nclass AsyncLedHandler(web.RequestHandler): \n    SUPPORTED_METHODS = (\"GET\", \"PATCH\") \n    _thread_pool = thread_pool\n @gen.coroutine \n    def get(self, id): \n        int_id = int(id) \n        if int_id not in drone.leds.keys(): \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            self.finish() \n            return \n        led = drone.leds[int_id] \n        print(\"I've started retrieving {0}'s status\".format(led.description)) \n        brightness_level = yield\n self.retrieve_led_brightness_level(led) \n        print(\"I've finished retrieving {0}'s status\".format(led.description)) \n        response = { \n            'id': led.identifier, \n            'description': led.description, \n            'brightness_level': brightness_level \n            } \n        self.set_status(status.HTTP_200_OK) \n        self.write(response) \n        self.finish() \n\n    @run_on_executor(executor=\"_thread_pool\") \n    def retrieve_led_brightness_level(self, led): \n        return led.get_brightness_level()\n @gen.coroutine \n    def patch(self, id): \n        int_id = int(id) \n        if int_id not in drone.leds.keys(): \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            self.finish() \n            return \n        led = drone.leds[int_id] \n        request_data = escape.json_decode(self.request.body)  \n        if ('brightness_level' not in request_data.keys()) or \\ \n            (request_data['brightness_level'] is None): \n            self.set_status(status.HTTP_400_BAD_REQUEST) \n            self.finish() \n            return \n        try: \n            brightness_level = int(request_data['brightness_level']) \n            print(\"I've started setting the {0}'s brightness\n            level\".format(led.description)) \n            yield self.set_led_brightness_level(led, brightness_level) \n            print(\"I've finished setting the {0}'s brightness\n            level\".format(led.description)) \n            response = { \n                'id': led.identifier, \n                'description': led.description, \n                'brightness_level': brightness_level \n                } \n            self.set_status(status.HTTP_200_OK) \n            self.write(response) \n            self.finish() \n        except ValueError as e: \n            print(\"I've failed setting the {0}'s brightness level\".format(led.description)) \n            self.set_status(status.HTTP_400_BAD_REQUEST) \n            response = { \n                'error': e.args[0] \n                } \n            self.write(response) \n            self.finish()\n @run_on_executor(executor=\"_thread_pool\") \n    def set_led_brightness_level(self, led, brightness_level): \n        return led.set_brightness_level(brightness_level)\n\n```", "```py\nbrightness_level = yield self.retrieve_led_brightness_level(led) \n\n```", "```py\nhexacopter_status = yield self.retrieve_hexacopter_status() \n\n```", "```py\nyield self.set_led_brightness_level(led, brightness_level) \n\n```", "```py\nclass AsyncAltimeterHandler(web.RequestHandler): \n    SUPPORTED_METHODS = (\"GET\") \n    ALTIMETER_ID = 1 \n    _thread_pool = thread_pool \n\n    @gen.coroutine \n    def get(self, id): \n        if int(id) is not self.__class__.ALTIMETER_ID: \n            self.set_status(status.HTTP_404_NOT_FOUND) \n            self.finish() \n            return \n        print(\"I've started retrieving the altitude\") \n        altitude = yield self.retrieve_altitude() \n        print(\"I've finished retrieving the altitude\") \n        response = {  \n            'altitude': altitude \n            } \n        self.set_status(status.HTTP_200_OK) \n        self.write(response) \n        self.finish()\n@run_on_executor(executor=\"_thread_pool\") \n    def retrieve_altitude(self): \n        return drone.altimeter.get_altitude()\n\n```", "```py\naltitude = yield self.retrieve_altitude() \n\n```", "```py\napplication = web.Application([ \n    (r\"/hexacopters/([0-9]+)\", AsyncHexacopterHandler), \n    (r\"/leds/([0-9]+)\", AsyncLedHandler), \n    (r\"/altimeters/([0-9]+)\", AsyncAltimeterHandler), \n],debug=True) \n\nif __name__ == \"__main__\": \n    port = 8888 \n    print(\"Listening at port {0}\".format(port)) \n    application.listen(port) \n    ioloop.IOLoop.instance().start() \n\n```", "```py\npython async_api.py\n\n```", "```py\nListening at port 8888\n\n```", "```py\nhttp PATCH :8888/leds/1 brightness_level=255\n\n```", "```py\ncurl -iX PATCH -H \"Content-Type: application/json\" -d \n    '{\"brightness_level\":255}' :8888/leds/1\n\n```", "```py\nhttp PATCH :8888/leds/2 brightness_level=255\n\n```", "```py\ncurl -iX PATCH -H \"Content-Type: application/json\" -d '{\"brightness_level\":255}' :8888/leds/2\n\n```", "```py\nI've started setting the Blue LED's brightness level\nI've started setting the White LED's brightness level\n\n```", "```py\nI've finished setting the Blue LED's brightness level\nI've finished setting the White LED's brightness level\n\n```", "```py\npip install nose2\n\n```", "```py\n\n    Collecting nose2\n    Collecting six>=1.1 (from nose2)\n      Downloading six-1.10.0-py2.py3-none-any.whl\n    Installing collected packages: six, nose2\n    Successfully installed nose2-0.6.5 six-1.10.0\n\n```", "```py\npip install cov-core\n\n```", "```py\nCollecting cov-core\nCollecting coverage>=3.6 (from cov-core)\nInstalling collected packages: coverage, cov-core\nSuccessfully installed cov-core-1.15.0 coverage-4.2\n\n```", "```py\nclass Application(web.Application): \n    def __init__(self, **kwargs): \n        handlers = [ \n            (r\"/hexacopters/([0-9]+)\", AsyncHexacopterHandler), \n            (r\"/leds/([0-9]+)\", AsyncLedHandler), \n            (r\"/altimeters/([0-9]+)\", AsyncAltimeterHandler), \n        ] \n        super(Application, self).__init__(handlers, **kwargs) \n\nif __name__ == \"__main__\": \n    application = Application() \n    application.listen(8888) \n    tornado_ioloop = ioloop.IOLoop.instance() \n    ioloop.PeriodicCallback(lambda: None, 500, tornado_ioloop).start() \n    tornado_ioloop.start() \n\n```", "```py\n[run] \ninclude = async_api.py, drone.py \n\n```", "```py\nimport unittest \nimport status \nimport json \nfrom tornado import ioloop, escape \nfrom tornado.testing import AsyncHTTPTestCase, gen_test, gen \nfrom async_api import Application \n\nclass TestHexacopter(AsyncHTTPTestCase): \n    def get_app(self): \n        self.app = Application(debug=False) \n        return self.app \n\n    def test_set_and_get_led_brightness_level(self): \n        \"\"\" \n        Ensure we can set and get the brightness levels for both LEDs \n        \"\"\" \n        patch_args_led_1 = {'brightness_level': 128} \n        patch_args_led_2 = {'brightness_level': 250} \n        patch_response_led_1 = self.fetch( \n            '/leds/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_1)) \n        patch_response_led_2 = self.fetch( \n            '/leds/2',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_2)) \n        self.assertEqual(patch_response_led_1.code, status.HTTP_200_OK) \n        self.assertEqual(patch_response_led_2.code, status.HTTP_200_OK) \n        get_response_led_1 = self.fetch( \n            '/leds/1', \n            method='GET') \n        get_response_led_2 = self.fetch( \n            '/leds/2', \n            method='GET') \n        self.assertEqual(get_response_led_1.code, status.HTTP_200_OK) \n        self.assertEqual(get_response_led_2.code, status.HTTP_200_OK) \n        get_response_led_1_data = escape.json_decode(get_response_led_1.body) \n        get_response_led_2_data = escape.json_decode(get_response_led_2.body) \n        self.assertTrue('brightness_level' in get_response_led_1_data.keys()) \n        self.assertTrue('brightness_level' in get_response_led_2_data.keys()) \n        self.assertEqual(get_response_led_1_data['brightness_level'],  \n                         patch_args_led_1['brightness_level']) \n        self.assertEqual(get_response_led_2_data['brightness_level'],  \n                         patch_args_led_2['brightness_level']) \n\n```", "```py\nnose2 -v --with-coverage\n\n```", "```py\ntest_set_and_get_led_brightness_level (test_hexacopter.TestHexacopter) ... \nI've started setting the Blue LED's brightness level\nI've finished setting the Blue LED's brightness level\nI've started setting the White LED's brightness level\nI've finished setting the White LED's brightness level\nI've started retrieving Blue LED's status\nI've finished retrieving Blue LED's status\nI've started retrieving White LED's status\nI've finished retrieving White LED's status\nok\n----------------------------------------------------------------\nRan 1 test in 1.311s\nOK\n----------- coverage: platform win32, python 3.5.2-final-0 -----\nName           Stmts   Miss  Cover\n----------------------------------\nasync_api.py     129     69    47%\ndrone.py          57     18    68%\n----------------------------------\nTOTAL            186     87    53%\n\n```", "```py\ncoverage report -m\n\n```", "```py\nName           Stmts   Miss  Cover   Missing\n--------------------------------------------\nasync_api.py     129     69    47%   137-150, 154, 158-187, 191, 202-204, 226-228, 233-235, 249-256, 270-282, 286, 311-315\ndrone.py          57     18    68%   11-12, 24, 27-34, 37, 40-41, 59, 61, 68-69\n--------------------------------------------\nTOTAL            186     87    53%\n\n```", "```py\ncoverage html\n\n```", "```py\n    def test_set_and_get_hexacopter_motor_speed(self): \n        \"\"\" \n        Ensure we can set and get the hexacopter's motor speed \n        \"\"\" \n        patch_args = {'motor_speed': 700} \n        patch_response = self.fetch( \n            '/hexacopters/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args)) \n        self.assertEqual(patch_response.code, status.HTTP_200_OK) \n        get_response = self.fetch( \n            '/hexacopters/1', \n            method='GET') \n        self.assertEqual(get_response.code, status.HTTP_200_OK) \n        get_response_data = escape.json_decode(get_response.body) \n        self.assertTrue('speed' in get_response_data.keys()) \n        self.assertTrue('turned_on' in get_response_data.keys()) \n        self.assertEqual(get_response_data['speed'],  \n                         patch_args['motor_speed']) \n        self.assertEqual(get_response_data['turned_on'],  \n                         True) \n\n    def test_get_altimeter_altitude(self): \n        \"\"\" \n        Ensure we can get the altimeter's altitude \n        \"\"\" \n        get_response = self.fetch( \n            '/altimeters/1', \n            method='GET') \n        self.assertEqual(get_response.code, status.HTTP_200_OK) \n        get_response_data = escape.json_decode(get_response.body) \n        self.assertTrue('altitude' in get_response_data.keys()) \n        self.assertGreaterEqual(get_response_data['altitude'],  \n                         0) \n        self.assertLessEqual(get_response_data['altitude'],  \n                         3000) \n\n```", "```py\nnose2 -v --with-coverage\n\n```", "```py\ntest_get_altimeter_altitude (test_hexacopter.TestHexacopter) ... \nI've started retrieving the altitude\nI've finished retrieving the altitude\nok\ntest_set_and_get_hexacopter_motor_speed (test_hexacopter.TestHexacopter) ... I've started setting the hexacopter's motor speed\nI've finished setting the hexacopter's motor speed\nI've started retrieving hexacopter's status\nI've finished retrieving hexacopter's status\nok\ntest_set_and_get_led_brightness_level (test_hexacopter.TestHexacopter) ... I've started setting the Blue LED's brightness level\nI've finished setting the Blue LED's brightness level\nI've started setting the White LED's brightness level\nI've finished setting the White LED's brightness level\nI've started retrieving Blue LED's status\nI've finished retrieving Blue LED's status\nI've started retrieving White LED's status\nI've finished retrieving White LED's status\nok\n--------------------------------------------------------------\nRan 3 tests in 2.282s\nOK\n----------- coverage: platform win32, python 3.5.2-final-0 ---\nName           Stmts   Miss  Cover\n----------------------------------\nasync_api.py     129     38    71%\ndrone.py          57      4    93%\n----------------------------------\nTOTAL            186     42    77%\n\n```", "```py\n    def test_set_invalid_brightness_level(self): \n        \"\"\" \n        Ensure we cannot set an invalid brightness level for a LED \n        \"\"\" \n        patch_args_led_1 = {'brightness_level': 256} \n        patch_response_led_1 = self.fetch( \n            '/leds/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_1)) \n        self.assertEqual(patch_response_led_1.code, status.HTTP_400_BAD_REQUEST) \n        patch_args_led_2 = {'brightness_level': -256} \n        patch_response_led_2 = self.fetch( \n            '/leds/2',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_2)) \n        self.assertEqual(patch_response_led_2.code, status.HTTP_400_BAD_REQUEST) \n        patch_response_led_3 = self.fetch( \n            '/leds/2',  \n            method='PATCH',  \n            body=json.dumps({})) \n        self.assertEqual(patch_response_led_3.code, status.HTTP_400_BAD_REQUEST) \n\n    def test_set_brightness_level_invalid_led_id(self): \n        \"\"\" \n        Ensure we cannot set the brightness level for an invalid LED id \n        \"\"\" \n        patch_args_led_1 = {'brightness_level': 128} \n        patch_response_led_1 = self.fetch( \n            '/leds/100',  \n            method='PATCH',  \n            body=json.dumps(patch_args_led_1)) \n        self.assertEqual(patch_response_led_1.code, status.HTTP_404_NOT_FOUND) \n\n    def test_get_brightness_level_invalid_led_id(self): \n        \"\"\" \n        Ensure we cannot get the brightness level for an invalid LED id \n        \"\"\" \n        patch_response_led_1 = self.fetch( \n            '/leds/100',  \n            method='GET') \n        self.assertEqual(patch_response_led_1.code, status.HTTP_404_NOT_FOUND) \n\n    def test_set_invalid_motor_speed(self): \n        \"\"\" \n        Ensure we cannot set an invalid motor speed for the hexacopter \n        \"\"\" \n        patch_args_hexacopter_1 = {'motor_speed': 89000} \n        patch_response_hexacopter_1 = self.fetch( \n            '/hexacopters/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args_hexacopter_1)) \n        self.assertEqual(patch_response_hexacopter_1.code,\n        status.HTTP_400_BAD_REQUEST) \n        patch_args_hexacopter_2 = {'motor_speed': -78600} \n        patch_response_hexacopter_2 = self.fetch( \n            '/hexacopters/1',  \n            method='PATCH',  \n            body=json.dumps(patch_args_hexacopter_2)) \n        self.assertEqual(patch_response_hexacopter_2.code,\n        status.HTTP_400_BAD_REQUEST) \n        patch_response_hexacopter_3 = self.fetch( \n            '/hexacopters/1',  \n            method='PATCH',  \n            body=json.dumps({})) \n        self.assertEqual(patch_response_hexacopter_3.code,\n        status.HTTP_400_BAD_REQUEST) \n\n    def test_set_motor_speed_invalid_hexacopter_id(self): \n        \"\"\" \n        Ensure we cannot set the motor speed for an invalid hexacopter id \n        \"\"\" \n        patch_args_hexacopter_1 = {'motor_speed': 128} \n        patch_response_hexacopter_1 = self.fetch( \n            '/hexacopters/100',  \n            method='PATCH',  \n            body=json.dumps(patch_args_hexacopter_1)) \n        self.assertEqual(patch_response_hexacopter_1.code,\n        status.HTTP_404_NOT_FOUND) \n\n    def test_get_motor_speed_invalid_hexacopter_id(self): \n        \"\"\" \n        Ensure we cannot get the motor speed for an invalid hexacopter id \n        \"\"\" \n        patch_response_hexacopter_1 = self.fetch( \n            '/hexacopters/5',  \n            method='GET') \n        self.assertEqual(patch_response_hexacopter_1.code,\n        status.HTTP_404_NOT_FOUND) \n\n    def test_get_altimeter_altitude_invalid_altimeter_id(self): \n        \"\"\" \n        Ensure we cannot get the altimeter's altitude for an invalid altimeter id \n        \"\"\" \n        get_response = self.fetch( \n            '/altimeters/5', \n            method='GET') \n        self.assertEqual(get_response.code, status.HTTP_404_NOT_FOUND) \n\n```", "```py\nnose2 -v --with-coverage\n\n```", "```py\nI've finished retrieving the altitude\nok\ntest_get_altimeter_altitude_invalid_altimeter_id (test_hexacopter.TestHexacopter) ... WARNING:tornado.access:404 GET /altimeters/5 (127.0.0.1) 1.00ms\nok\ntest_get_brightness_level_invalid_led_id (test_hexacopter.TestHexacopter) ... WARNING:tornado.access:404 GET /leds/100 (127.0.0.1) 2.01ms\nok\ntest_get_motor_speed_invalid_hexacopter_id (test_hexacopter.TestHexacopter) ... WARNING:tornado.access:404 GET /hexacopters/5 (127.0.0.1) 2.01ms\nok\ntest_set_and_get_hexacopter_motor_speed (test_hexacopter.TestHexacopter) ... I've started setting the hexacopter's motor speed\nI've finished setting the hexacopter's motor speed\nI've started retrieving hexacopter's status\nI've finished retrieving hexacopter's status\nok\ntest_set_and_get_led_brightness_level (test_hexacopter.TestHexacopter) ... I've started setting the Blue LED's brightness level\nI've finished setting the Blue LED's brightness level\nI've started setting the White LED's brightness level\nI've finished setting the White LED's brightness level\nI've started retrieving Blue LED's status\nI've finished retrieving Blue LED's status\nI've started retrieving White LED's status\nI've finished retrieving White LED's status\nok\ntest_set_brightness_level_invalid_led_id (test_hexacopter.TestHexacopter) ... WARNING:tornado.access:404 PATCH /leds/100 (127.0.0.1) 1.01ms\nok\ntest_set_invalid_brightness_level (test_hexacopter.TestHexacopter) ... I've started setting the Blue LED's brightness level\nI've failed setting the Blue LED's brightness level\nWARNING:tornado.access:400 PATCH /leds/1 (127.0.0.1) 13.51ms\nI've started setting the White LED's brightness level\nI've failed setting the White LED's brightness level\nWARNING:tornado.access:400 PATCH /leds/2 (127.0.0.1) 10.03ms\nWARNING:tornado.access:400 PATCH /leds/2 (127.0.0.1) 2.01ms\nok\ntest_set_invalid_motor_speed (test_hexacopter.TestHexacopter) ... I've started setting the hexacopter's motor speed\nI've failed setting the hexacopter's motor speed\nWARNING:tornado.access:400 PATCH /hexacopters/1 (127.0.0.1) 19.27ms\nI've started setting the hexacopter's motor speed\nI've failed setting the hexacopter's motor speed\nWARNING:tornado.access:400 PATCH /hexacopters/1 (127.0.0.1) 9.04ms\nWARNING:tornado.access:400 PATCH /hexacopters/1 (127.0.0.1) 1.00ms\nok\ntest_set_motor_speed_invalid_hexacopter_id (test_hexacopter.TestHexacopter) ... WARNING:tornado.access:404 PATCH /hexacopters/100 (127.0.0.1) 1.00ms\nok\n----------------------------------------------------------------------\nRan 10 tests in 5.905s\nOK\n----------- coverage: platform win32, python 3.5.2-final-0 -----------\nName           Stmts   Miss  Cover\n----------------------------------\nasync_api.py     129      5    96%\ndrone.py          57      0   100%\n----------------------------------\nTOTAL            186      5    97%\n\n```", "```py\npip freeze > requirements.txt\n\n```", "```py\ncov-core==1.15.0\ncoverage==4.2\nnose2==0.6.5\nsix==1.10.0\ntornado==4.4.1\n\n```"]