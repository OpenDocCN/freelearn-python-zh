["```py\ngraph = dict()\ngraph['A'] = ['B', 'C']\ngraph['B'] = ['E','C', 'A']\ngraph['C'] = ['A', 'B', 'E','F']\ngraph['E'] = ['B', 'C']\ngraph['F'] = ['C'] \n```", "```py\nmatrix_elements = sorted(graph.keys())\ncols = rows = len(matrix_elements) \n```", "```py\nadjacency_matrix = [[0 for x in range(rows)] for y in range(cols)]\nedges_list = [] \n```", "```py\nfor key in matrix_elements:\n    for neighbor in graph[key]:\n        edges_list.append((key, neighbor))\nprint(edges_list) \n```", "```py\n[('A', 'B'), ('A', 'C'), ('B', 'E'), ('B', 'C'), ('B', 'A'), ('C', 'A'), ('C', 'B'), ('C', 'E'), ('C', 'F'), ('E', 'B'), ('E', 'C'), ('F', 'C')] \n```", "```py\nfor edge in edges_list:\n    index_of_first_vertex = matrix_elements.index(edge[0])\n    index_of_second_vertex = matrix_elements.index(edge[1])\n    adjacency_matrix[index_of_first_vertex][index_of_second_vertex] = 1 \nprint(adjacency_matrix) \n```", "```py\n[0, 1, 1, 0, 0]\n[1, 0, 0, 1, 0]\n[1, 1, 0, 1, 1]\n[0, 1, 1, 0, 0]\n[0, 0, 1, 0, 0] \n```", "```py\ngraph = dict()\ngraph['A'] = ['B', 'G', 'D']\ngraph['B'] = ['A', 'F', 'E']\ngraph['C'] = ['F', 'H']\ngraph['D'] = ['F', 'A']\ngraph['E'] = ['B', 'G']\ngraph['F'] = ['B', 'D', 'C']\ngraph['G'] = ['A', 'E']\ngraph['H'] = ['C'] \n```", "```py\nfrom collections import deque\ndef breadth_first_search(graph, root):\n    visited_vertices = list()\n    graph_queue = deque([root])\n    visited_vertices.append(root)\n    node = root\n    while len(graph_queue) > 0:\n        node = graph_queue.popleft()\n        adj_nodes = graph[node]\n        remaining_elements = set(adj_nodes).difference(set(visited_vertices))\n        if len(remaining_elements) > 0:\n             for elem in sorted(remaining_elements):\n                 visited_vertices.append(elem)\n                 graph_queue.append(elem)\n    return visited_vertices \n```", "```py\nprint(breadth_first_search(graph, 'A')) \n```", "```py\n['A', 'B', 'D', 'G', 'E', 'F', 'C', 'H'] \n```", "```py\ngraph = dict()\ngraph['A'] = ['B', 'S']\ngraph['B'] = ['A']\ngraph['S'] = ['A','G','C']\ngraph['D'] = ['C']\ngraph['G'] = ['S','F','H']\ngraph['H'] = ['G','E']\ngraph['E'] = ['C','H']\ngraph['F'] = ['C','G']\ngraph['C'] = ['D','S','E','F'] \n```", "```py\ndef depth_first_search(graph, root):\n    visited_vertices = list()\n    graph_stack = list()\n    graph_stack.append(root)\n    node = root\n        while graph_stack: \n            if node not in visited_vertices: \n                visited_vertices.append(node) \n            adj_nodes = graph[node] \n            if set(adj_nodes).issubset(set(visited_vertices)): \n                graph_stack.pop() \n                if len(graph_stack) > 0: \n                    node = graph_stack[-1] \n                continue \n            else: \n                remaining_elements = set(adj_nodes).difference(set(visited_vertices)) \n            first_adj_node = sorted(remaining_elements)[0] \n            graph_stack.append(first_adj_node) \n            node = first_adj_node \n        return visited_vertices \n```", "```py\n if set(adj_nodes).issubset(set(visited_vertices)):\n        graph_stack.pop()\n        if len(graph_stack) > 0:\n            node = graph_stack[-1]\n        continue \n```", "```py\n first_adj_node = sorted(remaining_elements)[0]\n    graph_stack.append(first_adj_node)\n    node = first_adj_node \n```"]