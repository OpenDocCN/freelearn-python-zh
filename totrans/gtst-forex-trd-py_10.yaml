- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Types of Orders and Their Simulation in Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we considered a number of classical trading strategies
    usually employed in FX trading. All of them can be automated – that is, the decision
    to place a trade can be made based on quantitative data only, and placing a trade
    in the market can be done by an algorithm. So, we need now to find a proper way
    to place trades and control their execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'We already mentioned (see [*Chapter 1*](B19145_01.xhtml#_idTextAnchor014),
    *Developing Trading Strategies – Why They Are Different*) that any trade, manual
    or automated, can be placed in the market by using an order: an instruction to
    the broker (or any other intermediary) to buy or sell. What could be simpler?
    However, the reality is always more complex. You may want to trade at a certain
    price, no worse than a certain price, no more than a specified amount of pips
    (points) from a certain price, and so on. Besides that, in the real market, there
    is real liquidity, which is always very far from infinite, so you may have your
    orders rejected, filled partially, or executed at the *wrong* prices, and many
    more unexpected and undesired things may happen if you are not prepared.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, it’s time we learn about the main types of orders typically supported by
    most FX liquidity pools, consider the difference in execution depending on the
    order type, understand the choice of order types depending on the goal, and get
    prepared to outline the architecture of an order simulation engine, which imitates
    possible execution issues and, along with the trade logic, helps you test and
    improve your strategy to fit the real-life conditions before putting real money
    at stake.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Order ticket – what you send is what you get
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Market orders – the way to get maximum control over transactional risk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limit orders – guaranteed price, but not execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time in force – better control over execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Stop orders – maximum uncontrolled risk
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Compound orders
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Order ticket – what you send is what you get
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let’s start with drafting a prototype of a general order ticket – something
    that is sent to a trading venue.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, orders are sent either as FIX messages (see [*Chapter 4*](B19145_04.xhtml#_idTextAnchor073),
    *Trading Application – What’s Inside?*) or in JSON format according to the venue’s
    specifications. As we also noted in [*Chapter 4*](B19145_04.xhtml#_idTextAnchor073),
    every venue has its own data and ordering interfaces, but the core properties
    of an order always remain the same.
  prefs: []
  type: TYPE_NORMAL
- en: Actually, the list of these properties is quite logical. Let’s prepare an empty
    form and fill in its fields one by one.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, each order should go out with an ID. Otherwise, how do we or the trading
    venue refer to it? If we trade live, then the trading venue will generate an order
    ID that we receive, but if we run a backtest and want to modify orders that had
    been sent earlier, we need an internally generated order ID. Anyway, number one
    in our order form is **Order ID**:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF10.1 – The first attribute of an order is Order ID](img/B19145_10_01.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – The first attribute of an order is Order ID
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we need to let the venue know which market we want to trade in. As always,
    please keep in mind that every trading venue has its own specification. For example,
    EURUSD can be sent as *EURUSD*, *EUR/USD*, *eur-usd*, and so on. So, check the
    venue’s documentation before actually sending orders. Let’s add the second record
    to the order ticket – **Instrument ID**:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF10.2 – Instrument ID added](img/B19145_10_02.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – Instrument ID added
  prefs: []
  type: TYPE_NORMAL
- en: We also need to specify the amount we want to trade or the trading size. The
    trading size can be specified in lots (again, refer to the venue’s documentation
    regarding how much one lot is) or just in money.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, with LMAX, an order to buy 1 lot of EUR USD would mean buying
    1,000 euros and selling the respective amount of the US dollars, and with Interactive
    Brokers, an order to sell 100,000 USD JPY would mean actually selling 100,000
    USD and buying the respective amount of the Japanese yen. Be careful when specifying
    the order size! Now, our order ticket consists of three records:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF10.3 – Trading size specified in the order](img/B19145_10_03.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Trading size specified in the order
  prefs: []
  type: TYPE_NORMAL
- en: 'And of course, we should specify the side of the trade: whether we want to
    buy or sell. Some venues just use *BUY* and *SELL* specifiers, while others suggest
    using *BID* and *ASK* to denote the side, so as you can see, the advice to consult
    the venue’s documentation is the only stable thing in algo trading. All in all,
    now we have four records in the order ticket:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF10.4 – Specifying the side of the trade](img/B19145_10_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Specifying the side of the trade
  prefs: []
  type: TYPE_NORMAL
- en: 'Are we ready to go? Seems so, but not really. The trading venue expects a few
    other parameters of our trade to be specified: we should say *how* we want the
    order to be executed, *at which price*, and *when*. The first of these three extra
    parameters is called the order type, and we normally distinguish between *market
    orders*, *limit orders*, and *stop orders*. There are also so-called **compound**
    or **conditional orders**, which essentially are combinations of these basic three
    order types, but they are not supported by all venues. So we will consider in
    detail only the three main types of orders.'
  prefs: []
  type: TYPE_NORMAL
- en: Market orders – the way to get maximum control over transactional risk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let’s start with the most simplistic (at least at first glance) type of order:
    the market order. A **market order** is an order to buy or sell a certain amount
    of an asset at a **market price**. By market price, we normally assume the best
    bid or the best ask (see [*Chapter 3*](B19145_03.xhtml#_idTextAnchor044), *FX
    Market Overview from a Developer’s Standpoint,* for the explanation of the best
    bid and ask), and most trading strategy developers test their ideas using only
    the best bid/ask historical data. So, we can add another record to our order ticket
    prototype, and this record represents the order type:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF10.5 – Specifying the order type](img/B19145_10_05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – Specifying the order type
  prefs: []
  type: TYPE_NORMAL
- en: We already saw (see again [*Chapter 3*](B19145_03.xhtml#_idTextAnchor044), *FX
    Market Overview from a Developer’s Standpoint*) that liquidity may have a substantial
    impact on how orders are executed in reality and it is considered quite a frequent
    situation when a single large order may move the best bid or ask during its execution.
    So, it’s important to make sure that the order will be executed at a price closest
    to the last best bid or best ask seen in the order book immediately before sending
    the order to the market.
  prefs: []
  type: TYPE_NORMAL
- en: Using this order type makes sure that if the order is executed, then you get
    the exact amount of the traded asset specified in the order. At the same time,
    it doesn’t guarantee that the average execution price will be the same as the
    top of the book because this kind of execution method allows buying or selling
    up to the entire amount currently present in the order book.
  prefs: []
  type: TYPE_NORMAL
- en: For example, let’s have a look back at the example of an order book shown in
    [*Chapter 3*](B19145_03.xhtml#_idTextAnchor044) (*Figure 3**.1* in the *Exchange
    and order book* section). Imagine that we send a market order to buy 1,000 contracts.
    Will it be executed? Yes, because there are more than 1,000 contracts in the order
    book. But at which price will it be filled?
  prefs: []
  type: TYPE_NORMAL
- en: 'The order book at the moment of sending the order had 155 contracts at the
    best ask price (2,149.25), then 306 contracts at 2,149.50, then 291 contracts
    at 2,149.75, and 532 contracts at 2,150.0\. So our order will consume all liquidity
    from the first 3 price levels and 248 contracts from the 4th. The resulting average
    execution price can be calculated using the standard weighted average formula:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Formula_B19145_10_001.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, *P* means the weighted average price, *p* denotes the price in the order
    book, and *q* means the quantity, the number of contracts traded at the price,
    *p*. In our example, it will be about 2,149.658, which is quite far from 2,145.25,
    which used to be the best ask at the moment we fired our order.
  prefs: []
  type: TYPE_NORMAL
- en: The phenomenon of an order being executed at a worse market price or the process
    of filling the order in parts according to the present liquidity is called **slippage**.
  prefs: []
  type: TYPE_NORMAL
- en: So, market orders can be useful when we need to fill the exact trading size,
    but this also may lead to filling at a price worse than expected. Why then did
    we say that market orders are *the way to get maximum control over transactional
    risk* in the very title of this section?
  prefs: []
  type: TYPE_NORMAL
- en: The reason is that by using market orders, you can be as granular and as precise
    with the ordering as possible. Indeed, nothing prevents us from developing an
    algorithm that would first check the liquidity in the order book and then send
    orders only of the amount that would not destroy it. In case you need to fill
    an order with a large size (for example, you work for a financial institution),
    you can split this order into parts and send multiple market orders in sequence
    until the entire amount is filled – again, without disturbing the order book too
    much.
  prefs: []
  type: TYPE_NORMAL
- en: Another *benefit*, if I may say so, of using market orders is that this is the
    only type of order that is accepted by all trading venues without a single exception.
    Although we are going to consider orders of other types, such as limit and stop,
    remember that they are not always supported by the venue with which you plan to
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Possible execution issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides the liquidity and average price fills just discussed, the main issue
    with market orders is that such an order (if sent without a time-in-force specifier
    – see later in this chapter) will be executed at whatever price is currently present
    in the market. Yes, 99% of the time, it doesn’t cause real issues as the liquidity
    is quite sufficient, especially if you trade major currency pairs (those that
    constitute the US dollar index, see [*Chapter 9*](B19145_09.xhtml#_idTextAnchor152),
    *Trading Strategies and Their Core Elements*, the *Common FX benchmarks – US dollar
    index* section), but do you remember what happens around the time important economic
    news is released? Just have a quick look back at *Figure 6**.2* and *Figure 6**.4*
    in [*Chapter 6*](B19145_06.xhtml#_idTextAnchor101), *Basics of Fundamental Analysis
    and its Possible Use in FX Trading*, and refresh the US **non-farm payroll** (**NFP**)
    and UK GDP cases: the gaps or the distance in price between just adjacent ticks
    during such an event may reach dozens of pips.'
  prefs: []
  type: TYPE_NORMAL
- en: So, if we consider the US NFP case, and assume that you wanted to sell at 1.0230
    with a market order a second before the NFP was released, so the order most likely
    would have been executed at the first tick after the news release, which was at
    1.0210 – 20 pips away from the desired price!
  prefs: []
  type: TYPE_NORMAL
- en: 'Alright, seems like it’s more or less clear with market orders: we say *buy*
    or *sell* and get filled immediately (with or without liquidity-related issues).
    But what to do if we want to buy or sell *at a certain price*, or, to be even
    more precise, to get our order executed at no worse than a certain price? Well,
    here comes the limit order.'
  prefs: []
  type: TYPE_NORMAL
- en: Limit orders – guaranteed price, but not execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In general and brief, a **limit order** is an order to buy or sell the specified
    amount of the asset at the specified price or better.
  prefs: []
  type: TYPE_NORMAL
- en: What does *better* mean here?
  prefs: []
  type: TYPE_NORMAL
- en: This means that if I send a limit order to *buy* EURUSD at 1.0100, then any
    price *below* 1.0100 will match my order. On the contrary, if I send a limit order
    to *sell* EURUSD at 1.0100, then any price *above* this level will match. In other
    words, by using a limit order, I say that *I am ready to buy or sell at any price
    no worse than the one specified in* *the order*.
  prefs: []
  type: TYPE_NORMAL
- en: What happens if you send a limit order at a price that is better than the current
    market price? For example, a *buy limit* order at a price that is *below* the
    current ask? Well, it depends on the particular implementation of limit orders
    used by your broker or execution venue. If you trade at an exchange (for example,
    if you trade currency futures), then your order will be routed directly into the
    order book.
  prefs: []
  type: TYPE_NORMAL
- en: If you trade spot or forward contracts, then most likely, such an order will
    reside in the trading venue’s system until the market price touches the order
    level and then the order will be converted into a market order. If the market
    price never reaches the order level, the order may be canceled or may reside in
    the broker’s order book virtually forever (actually not forever, of course, every
    broker has their own rules on what to do with *forgotten* limit orders).
  prefs: []
  type: TYPE_NORMAL
- en: What happens if we send a limit buy order at a price that is worse than the
    current market price – for example, a *buy limit* order at a price that is *above*
    the current ask? In this case, the order will be executed immediately, and it
    will start absorbing the liquidity from the order book level by level, pushing
    the price higher and higher, but *this process will stop as soon as the limit
    price is hit*. Thus, a limit order sent at a price worse than the market can be
    considered a *market order* *with protection*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we know that besides market orders, we can use limit orders, and in case
    we use them, we should specify a new field in our order ticket prototype: *order
    price*.'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF10.6 – Price attribute added for stop and limit orders](img/B19145_10_06.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Price attribute added for stop and limit orders
  prefs: []
  type: TYPE_NORMAL
- en: So far, it looks like limit orders are the best to use in all situations, but
    is it really true? Of course, as there’s neither a free lunch nor a Holy Grail
    in trading, limit orders are no panacea to execution issues. Let’s take a deep
    dive into this domain, as execution issues with limit orders are far less obvious
    than those of market orders.
  prefs: []
  type: TYPE_NORMAL
- en: Possible execution issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'While the main execution issue with market orders is that they guarantee the
    execution itself but do not guarantee the execution price, the main issue with
    limit orders is exactly the opposite: a limit order guarantees the execution price
    (just by its definition) but does not guarantee the execution as such.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Indeed, let’s carefully consider both cases: if we send a limit order to be
    executed at a *better price* (that is, a *lower than the current price* for a
    *buy limit* and a *higher than the current price* for a *sell limit*) to an exchange,
    and if we send such an order to a broker or an ECN.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we work with an exchange, limit orders go straight into the order book (well,
    actually not really straight: first they pass the broker’s risk management systems
    that check whether you have sufficient margin to send such an order, but it doesn’t
    matter in the current context). However, we should remember that the order book
    is, in reality, two-dimensional (see *Figure 3**.2* in [*Chapter 3*](B19145_03.xhtml#_idTextAnchor044),
    *FX Market Overview from Developer’s Standpoint*, in the *Exchange and order book*
    section) and that our order will always be put at the end of the current order
    queue at the same price level. So, when the market price touches the order level,
    that is, someone actually traded at the order price, there is no guarantee that
    the size of that trade was sufficient to match all orders from the same price
    level – including ours.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: One of the most common mistakes during the research and development phase of
    an algo trading project is assuming that all limit orders are executed, even if
    their prices were touched by a single tick. This erroneous assumption often leads
    to the creation of various *Holy Grails* of trading that work only on paper.
  prefs: []
  type: TYPE_NORMAL
- en: If we trade with an FX broker or an ECN, then most likely, our limit order won’t
    go into any order book and no one will see it except for that same broker – until
    the market price reaches the order level. At this moment, the limit order is transformed
    into a market order and actually sent to the market. With this approach, we may
    suffer from the same disease as when trading with market orders – potentially,
    it could be executed at a price that is worse than the limit order price, which
    sounds exactly the opposite of the very definition of a limit order.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several workarounds for this issue, and most of these workarounds
    are implemented by execution venues. Most of them check the liquidity in the order
    book before actually sending the market order: if the order size exceeds the liquidity
    at the best bid/ask, then the order is executed only partially, up to the actual
    available amount. This way, the traditional behavior of a classical exchange order
    book is imitated.'
  prefs: []
  type: TYPE_NORMAL
- en: Sounds disappointing?
  prefs: []
  type: TYPE_NORMAL
- en: Well, in fact, some (not all, unfortunately) execution venues allow for somewhat
    greater control over the order execution. Checking the liquidity in the order
    book prior to sending an order is a good practice, but with some trading technology
    providers, we can also use special conditions, or specifiers, to control the order’s
    time in force.
  prefs: []
  type: TYPE_NORMAL
- en: Time in force – better control over execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The specifiers mentioned previously are normally called **time in force** conditions,
    although, as you will see a bit later in this chapter, for some of them, it is
    not really obvious or intuitive.
  prefs: []
  type: TYPE_NORMAL
- en: Important disambiguation
  prefs: []
  type: TYPE_NORMAL
- en: 'More often than not, these execution method specifiers are referred to as the
    **type of order**. This can be found not only in some brokers’ documentation but
    also in books on trading, and even academic research. So, be very careful when
    you encounter *type of order* or *time in force* in any documentation, and make
    sure you understand what exactly the author had in mind: the type of order as
    such (market, limit, stop, etc.), the time during which it is valid, or how the
    order should be executed liquidity-wise!'
  prefs: []
  type: TYPE_NORMAL
- en: In the following subsections, we will consider different order specifiers in
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Immediate or cancel
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'An **Immediate-or-Cancel** (**IOC**) instruction attached to a market order
    means: I want to buy or sell *at most* X euros, dollars, lots, contracts, whatever,
    at the market price (that is, current best bid/ask), but no worse than this price,
    and *I don’t care if I do not get the entire X euros, dollars, and so on, but
    only a smaller amount*. If there’s not sufficient liquidity to fill my order,
    then fill in what is available and cancel the rest.'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, *with IOC, I prioritize price* *over size*.
  prefs: []
  type: TYPE_NORMAL
- en: For example, I send an IOC market order to buy 1,000,000 EUR USD. The current
    ask price is 1.01234 and the currently available amount at ask is 500,000\. Then,
    I will get 500,000 EURUSD bought at 1.01234 and the rest of my order (another
    500,000) will be canceled.
  prefs: []
  type: TYPE_NORMAL
- en: Using IOC orders is probably the best way to prevent execution at an unwanted
    price, but you should remember that using it may lead to partial fills – so, your
    trading algorithm should somehow account for situations of this sort.
  prefs: []
  type: TYPE_NORMAL
- en: Fill or kill
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A **fill-or-kill** (**FOK**) instruction means: I want to buy or sell *exactly
    X* euros, dollars, lots, contracts, and so on *at the market price*, but if there
    is insufficient liquidity at the best bid/ask to fill the entire order, then do
    not execute this order at all (or *kill* the order).'
  prefs: []
  type: TYPE_NORMAL
- en: In other words, *with FOK, I prioritize the integrity of the order over* *its
    execution*.
  prefs: []
  type: TYPE_NORMAL
- en: In the same example, if I send a market buy FOK order for 1,000,000 EURUSD but
    there’s only 500,000 at the best ask, then the entire order will be killed (canceled)
    and no partial fill will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may wonder why both IOC and FOK are considered time-in-force specifiers:
    both assume immediate, instant execution of the order. Well, the answer is probably
    in the question: with IOC or FOK, we specify that the order should be executed
    *as quickly as possible*; this way, we specify its time in force.'
  prefs: []
  type: TYPE_NORMAL
- en: Most execution venues support IOC or FOK only for market orders, but there are
    some that allow adding IOC or FOK to limit orders as well. This makes sense because
    some execution venues just convert a limit order into a market one when the limit
    order’s price is touched by the market, so the market order’s time-in-force specifiers
    become absolutely valid in such a scenario.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, there are other time-in-force specifiers that give an order a much
    longer life than IOC or FOK. The most common are **good for a day** and **good**
    **till canceled**.
  prefs: []
  type: TYPE_NORMAL
- en: Good for a day (GTD) and good till canceled (GTC)
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Both specifiers assume that the order can be filled in parts and set the time
    frame during which it can be filled.
  prefs: []
  type: TYPE_NORMAL
- en: A GTD order tries to fill what is available at the best bid/ask and the remaining
    will reside in the venue’s order book till the end of the day (that is, 5 P.M.
    New York time in most cases). Any moment the price returns to the order level,
    another portion of the order is executed.
  prefs: []
  type: TYPE_NORMAL
- en: A GTC order behaves in a similar way, but there’s no explicitly specified time
    until which the order remains actual. The trader should take care of all GTC orders,
    manually or automatically.
  prefs: []
  type: TYPE_NORMAL
- en: In reality, both specifiers are used with limit orders and simply mean the time
    during which such an order will remain in force, because if we take all appropriate
    measures by checking the liquidity, then in most cases, a limit order will be
    executed instantly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we are familiar with time-in-force specifiers, it’s time to update
    our proposed order ticket structure:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF10.7 – Time in force attribute added](img/B19145_10_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.7 – Time in force attribute added
  prefs: []
  type: TYPE_NORMAL
- en: So far, we have discussed market (*I buy now*) and limit (*I buy at this price
    or better*) orders. But it would be quite logical to suppose that if we have an
    *at this price or better* order, then there should exist an *at this price or
    worse* order, wouldn’t it? Yes, such an order type does exist, and it’s called
    the stop order.
  prefs: []
  type: TYPE_NORMAL
- en: Stop orders – maximum uncontrolled risk
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Essentially, a **stop order** is an order to buy or sell the specified amount
    of the asset *at the specified price* *or worse*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You may ask at this point: why on Earth would I want to buy or sell at a price
    worse than I’d like to?'
  prefs: []
  type: TYPE_NORMAL
- en: 'The answer is very simple: both *better* and *worse* are just references to
    where the order price is relative to the current market price.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the current price of EURUSD is 0.99673 and I send a buy-stop
    order at 0.9989, then my order will be executed at any price equal to or greater
    than 0.9989\. Similar to limit orders, a stop order will reside in the broker’s
    order book until the market price touches the order price and then converted into
    a market order. Note that, unlike limit orders, stop orders are never sent to
    the order book immediately, even if you trade with an exchange. This is quite
    natural, in fact: if I send a limit order to the order book, then I improve the
    liquidity in the market as others may become my counterparties and then I become
    a liquidity provider to them in a certain sense. But if a stop order had been
    sent to an order book, it would just immediately match one of the limit orders
    there and move the price immediately by an unpredictable distance.'
  prefs: []
  type: TYPE_NORMAL
- en: Indeed, let’s consider an example. Say we have an order book for EURUSD and
    the current market price (best bid/ask) is 1.00000/1.00005\. There are some limit
    orders to buy at 0.99999, 0.99998, and so on, and some limit orders to sell at
    1.00006, 1.00007, and so on. Now, imagine someone sends a stop order to buy at
    1.0020 and this order is sent to the order book. Of course, sellers (those on
    the *ask* side) will be more than happy to sell at 1.0020 and not at 1.0010 or
    1.00008\. So, a stop order sent to the order book would trigger the order book
    level that is the most distant from the current best bid/ask, which is strictly
    opposite to the very idea of an order book.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Not all execution venues support stop orders. Many institutional liquidity pools
    support only market and limit orders (and some of them only market orders). So
    it’s always a good idea to emulate stop orders locally.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, going back to the question about the reason why we may want to use a stop
    order, now we understand that we can use it when we want to do one of these two
    actions:'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the market at a price that is greater than current if we want to buy,
    and at a price that is less than current if we want to sell.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exit a position when the price goes against it – that is, with a loss. It happens
    if the current price is less than the entry price for a long position (buy) or
    the current price is greater than the entry price for a short position (sell).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If we use a stop order to exit from a losing position, then it is called a **stop-loss
    order**.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Quite frequently, stop orders are confused with stop-loss orders. However, stop
    orders can be used to both enter and exit the market, while stop-loss orders are
    always used only to exit from a losing position. In other words, *stop order*
    is a term with a more broad sense that pertains to general trading, and *stop-loss*
    is a narrow term pertaining to just trade logic. From the trading venue’s standpoint,
    there is no difference between a stop order used to open a position or to close
    it, so *stop-loss* orders may be mentioned only in a particular broker’s documentation,
    not that of a trading venue.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we know that stop orders are somewhat *artificial* and actually executed
    as conditional market orders, we can understand the typical issues with their
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: Possible execution issues
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Of course, the main execution issue with stop orders is similar to that of
    market orders: the slippage with stop orders is potentially unlimited. If we send
    a buy-stop order, then it will be executed at any price equal to or greater than
    the order price. It is similar to a sell-stop order: it will be executed at any
    price equal to or less than the order price.'
  prefs: []
  type: TYPE_NORMAL
- en: Stop orders guarantee execution but do not guarantee the price – and in this
    sense, they are somewhat similar to market orders. Let’s go back again to *Figure
    6**.2* in [*Chapter 6*](B19145_06.xhtml#_idTextAnchor101), *Basics of Fundamental
    Analysis and its Possible Use in FX Trading*, which illustrates the sequence of
    ticks (trades) around the publication of US NFP data. Imagine we have a long position
    before the news and we set a protective stop (stop-loss) order at 1.02250\. With
    the very first tick after the news release, this stop order will be executed –
    but not at 1.02250\. It will be executed at the first available price, which would
    be 1.02100 or worse (lower).
  prefs: []
  type: TYPE_NORMAL
- en: Always remember that even if you placed a stop-loss order, it doesn’t mean that
    you limited your losses by the order’s price level. It can be executed way beyond
    the requested price, thus increasing the losses.
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth mentioning that some market makers offer *guaranteed stop-loss execution*.
    This means that during an event such as US NFP or a similar situation when the
    price may jump beyond the stop order price in one tick, they would still execute
    the order at the requested price, not the market price. Only market makers can
    do that as it is they who quote the market for you as the price taker. Of course,
    there’s no free lunch here either, so market makers ask for a premium for this
    service. Such a premium typically means a wider spread or a greater commission.
  prefs: []
  type: TYPE_NORMAL
- en: Does it make sense to use *guaranteed* stop-loss orders? Well, it depends on
    the trade logic of your model and its statistics. If you use stop orders as a
    regular means of exiting the position even in a *calm* market, then the answer
    is probably no because you will lose more in spreads and commissions. If you use
    them only as a protective measure against an unexpected disastrous market price
    movement, then the answer is probably yes, as such a disastrous movement can ruin
    your account in one tick – just recall the case of the Swiss National Bank unpegging
    the rate of CHF from the euro described in [*Chapter 9*](B19145_09.xhtml#_idTextAnchor152),
    *Trading Strategies and Their Core Elements*, in *Figure 9**.6*.
  prefs: []
  type: TYPE_NORMAL
- en: With all that in mind, stop orders kept at the broker are mostly used as protective
    stop-loss orders, which exit from a losing position and cut running losses. If
    your strategy logic assumes entering the market along with the price movement,
    which is typical for a breakout strategy, for example, then it’s always a better
    idea to emulate such a stop order locally and send it to the market as a market
    or even a limit order to prevent bad execution.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we can suggest the final draft of our general order ticket, which would
    support all three main types of orders (market, limit, and stop) and all the essential
    attributes required to send the order to a broker:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure \uFEFF10.8 – All types of orders are now supported in the order ticket](img/B19145_10_08.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 10.8 – All types of orders are now supported in the order ticket
  prefs: []
  type: TYPE_NORMAL
- en: 'Similar to limit orders, IOC and FOK are not used with stop orders, but GTD
    and GTC are. Besides that, some execution venues offer an additional condition
    to trigger a stop order, which is to convert a stop order into a market order:
    whether it’s triggered when the bid or the ask price hits the order level. However,
    this specifier is not common.'
  prefs: []
  type: TYPE_NORMAL
- en: Market, limit, and stop orders are de facto standard orders accepted by almost
    any trading venue. However, some venues offer other types of orders that are frequently
    referred to as compound orders, which we will explore in the next section. They
    are not common and not essential, but it’s worth at least knowing that they exist
    and how they work in very general terms.
  prefs: []
  type: TYPE_NORMAL
- en: Compound orders
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Compound orders** are those that assume a certain logical chain in their
    execution. That’s why they are also referred to as **conditional orders**. Strictly
    speaking, such an order is not a single order: it’s a sequence of orders that
    are triggered one by another.'
  prefs: []
  type: TYPE_NORMAL
- en: 'As the most common example, let’s consider a **stop-limit order**. Unlike stop
    or limit orders, it requires two prices to be specified: stop and limit. If such
    an order is sent to the execution venue, first, the venue’s matching engine waits
    till the stop price of the order is touched by the market (best bid/ask) price.
    After that, the order is executed using its limit price exactly like when executing
    a limit order. So, a stop limit order is a combination of both.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, if the current price of EUR USD is 1.01015 and I want to buy it
    at 1.0102, I can use a stop order to enter the market – but I remember that during
    the execution of a stop order, I can get a potentially unlimited slippage. Therefore,
    I send a stop limit order with two prices: a stop price of 1.0102 and a limit
    price of 1.01025\. Then, as soon as 1.0102 is touched by the market (this means
    that either ask or bid becomes equal or greater than 1.0102; see the explanation
    on special execution conditions for stop orders in the previous section), a limit-buy
    order at 1.01025 is actually executed. So, I will buy EURUSD at any price between
    1.0102 (the stop price) and 1.01025 (the limit price).'
  prefs: []
  type: TYPE_NORMAL
- en: It’s worth mentioning that stop-limit orders are used only to enter the market
    and never used as stop-loss orders. A stop-loss order must ensure the entire order
    size is filled, but a stop-limit order, like any limit order, cannot guarantee
    the execution of the entire order size.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, we are familiar with orders of the three main types, and we know in which
    cases we prefer to use market, stop and limit orders, and in which cases we’d
    rather avoid using them. Besides that, from previous chapters, we remember how
    to receive and handle market data, and how to use technical analysis, and we remember
    the key risks and have at least some ideas on how to mitigate them. So, we are
    ready for the final, ultimate job of any algo trader in the research and development
    phase: we are about to start drafting a trading application, something that will
    receive data, process it, generate trading signals, convert them into orders,
    send the order to the broker, process the broker’s response, and collect the trading
    statistics, which can ultimately prove or disprove the trading idea. This is what
    we are going to do in the next chapter.'
  prefs: []
  type: TYPE_NORMAL
