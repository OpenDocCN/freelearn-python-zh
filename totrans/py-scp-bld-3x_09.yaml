- en: '9'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '9'
- en: Animation Drivers
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 动画驱动器
- en: A **driver** is a function that controls the value of a property. It can take
    the value of other properties as input, creating a connection between two or more
    properties. For example, a driver might set the *X* location of an object based
    on the rotation of another object.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**驱动器**是一个控制属性值的函数。它可以以其他属性的值作为输入，从而在两个或多个属性之间建立连接。例如，一个驱动器可能会根据另一个物体的旋转设置物体的*X*位置。'
- en: Drivers are similar to animations, with which they share the update system and
    f-curve data but are way more flexible and can be combined with Python to create
    custom setups.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动器与动画类似，它们共享更新系统和f-curve数据，但更加灵活，并且可以与Python结合创建自定义设置。
- en: 'They are an essential part of technical animation and are used for creating
    simple controls or complex mechanics. Drivers don’t have a specific purpose: they
    are designed to create custom behaviors. For that reason, they are ubiquitous
    in rigging and help connect properties, even between entities of different types,
    such as objects and shaders.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 它们是技术动画的重要组成部分，用于创建简单的控制或复杂的机械。驱动器没有特定的用途：它们被设计来创建自定义行为。因此，它们在绑定中无处不在，有助于连接属性，甚至在不同类型的实体之间，如物体和着色器。
- en: In this chapter, you will learn how to create and test your Python drivers easily,
    as well as how to script their creation. Besides helping with automating rig mechanics,
    this knowledge will also make it easier for you to understand formulas and implement
    them in Blender.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何轻松创建和测试你的Python驱动器，以及如何脚本它们的创建。除了帮助自动化绑定机制外，这些知识还将使你更容易理解公式并在Blender中实现它们。
- en: 'This chapter will cover the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating drivers
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建驱动器
- en: Using Python expressions in drivers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在驱动器中使用Python表达式
- en: Scripting mathematic formulas
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 脚本数学公式
- en: Automating the driver setup
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动化驱动器设置
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: We will use Blender and **Visual Studio Code** in this chapter, but any IDE
    will do. The examples that were created for this chapter can be found at [https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch9](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch9).
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用Blender和**Visual Studio Code**，但任何IDE都可以。本章创建的示例可以在[https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch9](https://github.com/PacktPublishing/Python-Scripting-in-Blender/tree/main/ch9)找到。
- en: Creating drivers
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建驱动器
- en: 'The procedure for creating **drivers** is very similar to the one for creating
    animations. While the animation time is the only input of animation curves, drivers
    can depend on one or more of the following:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 创建驱动器的步骤与创建动画的步骤非常相似。虽然动画时间是动画曲线的唯一输入，但驱动器可以依赖于以下一个或多个：
- en: The result of Python expressions
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python表达式的结果
- en: Any property that can be animated
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 任何可以动画化的属性
- en: The transform channels of objects
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物体的变换通道
- en: The difference in rotations between objects
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物体之间旋转的差异
- en: The distance between objects
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 物体之间的距离
- en: When we create a driver, we must specify at least one input. In this section,
    we will learn how to set up a simple wheel by creating new drivers with the user
    interface.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们创建一个驱动器时，我们必须指定至少一个输入。在本节中，我们将学习如何通过创建新的驱动器并使用用户界面来设置一个简单的轮子。
- en: Creating quick drivers via the right-click menu
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过右键菜单创建快速驱动器
- en: There are a few shortcuts for creating drivers quickly.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 创建驱动器有一些快捷方式。
- en: 'Let’s take a look at an example to understand these shortcuts. Suppose that,
    to animate a wheel, we want an object’s **Location Y** to drive its **Rotation
    X** channel. We can set this up for Blender’s default cube:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来了解这些快捷方式。假设为了动画化一个轮子，我们想让一个物体的**位置 Y**驱动其**旋转 X**通道。我们可以为Blender的默认立方体设置这个：
- en: Open Blender or go back to the default scene via **File** | **New** | **General**.
  id: totrans-24
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Blender或通过**文件** | **新建** | **通用**返回默认场景。
- en: Select the default **Cube** to make it active.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择默认的**立方体**使其变为活动状态。
- en: Press *N* to display the Transform properties.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按*N*显示变换属性。
- en: '**Location Y** is our input. Rather than look for its data path, we will copy
    it to the clipboard:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '**位置 Y**是我们的输入。我们不会寻找它的数据路径，而是将其复制到剪贴板：'
- en: Right-click on **Location Y** to display the **Y:** menu.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**位置 Y**以显示**Y:** 菜单。
- en: From the menu, pick **Copy As** **New Driver**.
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择**复制为** **新驱动器**。
- en: 'The driver doesn’t exist yet, so we must create it for the property we want
    to affect:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动器尚不存在，因此我们必须为我们要影响的属性创建它：
- en: Right-click on **Rotation X** to display the **X:** menu.
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击**旋转 X**以显示**X:** 菜单。
- en: From the menu, pick **Paste Driver**.
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从菜单中选择 **粘贴驱动器**。
- en: 'The **Rotation X** channel will be colored purple, which is the color that’s
    used for driven properties. Moving the **Cube** object along its **Y**-axis will
    also make it roll:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**旋转 X** 通道将呈现紫色，这是用于驱动属性的颜色。沿着立方体的 **Y** 轴移动 **立方体** 对象也会使其滚动：'
- en: '![Figure 9.1: The Y location drives the X rotation](img/Figure_9.01_B18375.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.1：Y 位置驱动 X 旋转](img/Figure_9.01_B18375.jpg)'
- en: 'Figure 9.1: The Y location drives the X rotation'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.1：Y 位置驱动 X 旋转
- en: The driver that’s using `5` radians is equivalent to about `286` degrees of
    rotation, as reflected in the values we can see in *Figure 9**.1*.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `5` 弧度的驱动器相当于大约 `286` 度的旋转，正如我们在 *图 9**.1* 中可以看到的值所反映的那样。
- en: 'Switching **Rotation Unit** to **Radians**, as shown in *Figure 9**.2*, makes
    a one-to-one relationship between **Location Y** and **Rotation** **X** evident:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 将 **旋转单位** 切换到 **弧度**，如图 *图 9**.2* 所示，使 **位置 Y** 和 **旋转** **X** 之间的一对一关系变得明显：
- en: '![Figure 9.2: Location X and Rotation X display the same value using radians](img/Figure_9.02_B18375.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.2：位置 X 和旋转 X 使用弧度显示相同的值](img/Figure_9.02_B18375.jpg)'
- en: 'Figure 9.2: Location X and Rotation X display the same value using radians'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.2：位置 X 和旋转 X 使用弧度显示相同的值
- en: 'Even if the cube rolls when it is moved, it doesn’t look like a wheel: a wheel
    rotates the other way around. We can set that up using the **Drivers** **Editor**
    area.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 即使立方体在移动时滚动，它看起来也不像轮子：轮子是向相反方向旋转的。我们可以使用 **驱动器** **编辑器** 区域来设置这一点。
- en: Setting up a wheel with the Drivers Editor
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用驱动器编辑器设置轮子
- en: 'In the **Drivers Editor** area, we can display and edit the drivers of the
    objects present in the scene. It can be brought up following these steps:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 **驱动器编辑器** 区域，我们可以显示和编辑场景中存在的对象的驱动器。可以通过以下步骤打开：
- en: Right-click on a **Driven Property**.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击一个 **驱动属性**。
- en: Select **Open** **Drivers Editor**.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择 **打开** **驱动器编辑器**。
- en: 'It’s very similar to the **Graph Editor** area that we looked at in first *section*
    of [*Chapter 7*](B18375_07.xhtml#_idTextAnchor171), except it displays drivers
    rather than animation curves:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 它与我们在 [*第 7 章*](B18375_07.xhtml#_idTextAnchor171) 的第一 *部分* 中查看的 **图形编辑器** 区域非常相似，但它显示的是驱动器而不是动画曲线：
- en: '![Figure 9.3: The driver f-curve in the Drivers Editor area](img/Figure_9.03_B18375.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.3：驱动器编辑器区域中的驱动器 f 曲线](img/Figure_9.03_B18375.jpg)'
- en: 'Figure 9.3: The driver f-curve in the Drivers Editor area'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.3：驱动器编辑器区域中的驱动器 f 曲线
- en: We can get a better view of the curve by selecting **View** | **Frame All**
    from the **Drivers Editor** menu bar or pressing *Home* on the keyboard.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过从 **驱动器编辑器** 菜单栏选择 **视图** | **全部帧** 或按键盘上的 *Home* 键来选择更好地查看曲线。
- en: The default driver’s f-curve is the diagonal of the positive cartesian plane,
    with control points at coordinates (`0.0`, `0.0`) and (`1.0`, `1.0`). We can see
    that the result of the curve, displayed in the `5.0`, the same value as the **location**
    input variable.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的驱动器 f 曲线是正笛卡尔平面的对角线，控制点位于坐标 (`0.0`, `0.0`) 和 (`1.0`, `1.0`)。我们可以看到曲线的结果，显示在
    `5.0`，与 **位置** 输入变量的相同值。
- en: 'Since the rotation of a wheel is opposite to its motion, we need to invert
    that result by changing the curve. To do that, follow these steps:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 由于轮子的旋转方向与其运动方向相反，我们需要通过改变曲线来反转这个结果。为此，请按照以下步骤操作：
- en: In the **Drivers Editor** properties, select the **F-Curve** tab.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **驱动器编辑器** 属性中，选择 **F 曲线** 选项卡。
- en: Select the top-right point of the f-curve by left-clicking.
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过左键单击选择 f 曲线的右上角点。
- en: 'In the `1.0` to `-1.0`:'
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `1.0` 到 `-1.0`：
- en: '![Figure 9.4: The driver’s f-curve pointing downwards](img/Figure_9.04_B18375.jpg)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.4：驱动器的 f 曲线指向下方](img/Figure_9.04_B18375.jpg)'
- en: 'Figure 9.4: The driver’s f-curve pointing downwards'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.4：驱动器的 f 曲线指向下方
- en: 'Now, moving the cube over its **Y**-axis makes it roll in the right direction.
    If you look carefully, something will still be off: this driver is rolling slightly
    too slowly.'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将立方体沿其 **Y** 轴移动，使其向正确的方向滚动。如果你仔细观察，会发现仍然有问题：这个驱动器滚动得稍微慢了一些。
- en: The ratio between a circle of size 1 and the length it covers in one round is
    π, the mathematical constant pi, which is approximately 3.14.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 大小为 1 的圆的周长与其在一圈内覆盖的长度之比是 π，即数学常数 π，大约为 3.14。
- en: That distance only takes a half round to a wheel twice as large, like our default
    cube of size `2` x `2` x `2`, so typing `pi/2` in the `1.571`, a multiplier slightly
    faster than `1`. Translating the cube on its **Y**-axis now makes it roll like
    a wheel, albeit a square one.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 那个距离只需要半个圆周就能到达一个直径是轮子两倍的轮子，就像我们默认的 `2` x `2` x `2` 大小的立方体，所以在 `1.571` 中输入 `pi/2`，一个略快于
    `1` 的乘数。现在，将立方体沿其 **Y**-轴移动，它就像轮子一样滚动，尽管是正方形的。
- en: We used a division to get that result, but we can also use Python formulas in
    drivers. We can also create drivers by just typing a formula.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用除法得到那个结果，但也可以在驱动器中使用 Python 公式。我们也可以仅通过输入一个公式来创建驱动器。
- en: Creating driver expressions in properties
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在属性中创建驱动表达式
- en: 'A different type of driver, one that relies on Python math formulas, can be
    created by typing a hash symbol (`#`) in a property field. Here are the steps
    for creating a driver expression:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过在属性字段中输入一个哈希符号 (`#`) 创建一种不同类型的驱动器，它依赖于 Python 数学公式。以下是创建驱动表达式步骤：
- en: Open Blender or go back to the default scene via **File** | **New** | **General**.
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 Blender 或通过 **文件** | **新建** | **通用** 返回默认场景。
- en: Select the default cube to make it active.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择默认的立方体以使其处于活动状态。
- en: Left-click on the `rotation_euler.x` property to edit its value.
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 左键单击 `rotation_euler.x` 属性以编辑其值。
- en: 'Type `#sin(frame)` and press *Enter*:'
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `#sin(frame)` 并按 *Enter* 键：
- en: '![Figure 9\. 5: Typing Python expressions in object properties](img/Figure_9.05_B18375.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.5：在对象属性中输入 Python 表达式](img/Figure_9.05_B18375.jpg)'
- en: 'Figure 9\. 5: Typing Python expressions in object properties'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.5：在对象属性中输入 Python 表达式
- en: The expression we have just written is already active. If we start the playback
    by pressing the triangular **Play** button in the **media controls** area, or
    with *Alt* + *A*, the cube will jitter quickly on its **X**-axis.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚编写的表达式已经生效。如果我们通过按 **媒体控制** 区域中的三角形 **播放** 按钮或使用 *Alt* + *A* 来开始播放，立方体将在其
    **X**-轴上快速抖动。
- en: The `sin(frame)` expression depends on time, as animations do, but the value
    per frame is the output of a Python instruction, and we can enrich it for more
    complex results.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`sin(frame)` 表达式依赖于时间，就像动画一样，但每帧的值是 Python 指令的输出，我们可以用它来获得更复杂的结果。'
- en: In the next section, we will combine the `frame` variable, the `sin` function,
    and the driver inputs to create a procedural, parametric animation of a pendulum.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将结合 `frame` 变量、`sin` 函数和驱动输入来创建一个程序化、参数化的摆动动画。
- en: We DON’T want results!
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不想要结果！
- en: Omitting the `#` symbol will set the result of the expression rather than creating
    a driver. Typing `frame` sets the property to the numeric value of the current
    frame, such as `1` or `24`. If we type `#frame`, the value will change as we play
    the animation.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 省略 `#` 符号将设置表达式的结果而不是创建一个驱动器。输入 `frame` 将属性设置为当前帧的数值，例如 `1` 或 `24`。如果我们输入 `#frame`，值将随着动画的播放而改变。
- en: Driving a cyclic motion
  id: totrans-73
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 驾驶循环运动
- en: A pendulum is a weight suspended from a fixed point, free to swing back and
    forth. It has many real-life applications in time, gravity, and geographic measurements,
    while in 3D, an oscillating motion is used for displaying clock mechanisms, hanging
    props, and other cyclic motions. The trigonometric function **sine** is commonly
    used to simulate this kind of motion.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 摆锤是从固定点悬挂的重量，可以自由来回摆动。它在时间、重力和地理测量中有许多实际应用，而在 3D 中，振荡运动用于显示时钟机构、悬挂道具和其他循环运动。三角函数
    **正弦** 通常用于模拟这种运动。
- en: 'The `sin` function from the `math` module is the Python syntax for *sine*.
    We encountered *sine* in [*Chapter 7*](B18375_07.xhtml#_idTextAnchor171), where
    we used its inverse, *arcsine*, to orient objects using Python. Sine is a periodic
    wave function – it repeats itself at fixed intervals:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 来自 `math` 模块的 `sin` 函数是 Python 语法中的 *正弦*。我们在 [*第 7 章*](B18375_07.xhtml#_idTextAnchor171)
    中遇到了 *正弦*，我们使用它的反函数，*反正弦*，通过 Python 定位对象。正弦是一个周期性波函数——它在固定间隔内重复：
- en: '![Figure 9.6: The sine function](img/Figure_9.6_B18375.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.6：正弦函数](img/Figure_9.6_B18375.jpg)'
- en: 'Figure 9.6: The sine function'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.6：正弦函数
- en: Playing the animation will make the cube jitter very fast. To slow it down,
    we can click **Driven Property** and give the formula a slower pace.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 播放动画会使立方体非常快速地抖动。为了减慢它，我们可以点击 **驱动属性** 并给公式一个更慢的速度。
- en: For instance, we can change it to `sin(frame/10)` and it will slow down tenfold.
    Now, the cube rocks back and forth gently. We can do even better and set up a
    rotation pivot for a proper swing.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以将其更改为 `sin(frame/10)`，这将使速度减慢十倍。现在，立方体轻轻摇晃。我们可以做得更好，并为适当的摆动设置一个旋转支点。
- en: Changing the rotation pivot via constraints
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 通过约束更改旋转枢轴
- en: The easier way to affect an object’s pivot is by using **constraints**. We came
    across constraints in [*Chapter 4*](B18375_04.xhtml#_idTextAnchor075), and used
    them to change an object’s position without altering its transform properties.
    This time, we will use a **Pivot Constraint** to alter the center of rotation.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 影响对象枢轴的最简单方法是通过使用**约束**。我们在[*第4章*](B18375_04.xhtml#_idTextAnchor075)中遇到了约束，并使用它们在不改变对象的变换属性的情况下改变对象的位置。这次，我们将使用**枢轴约束**来改变旋转中心。
- en: Adding a Pivot Constraint in Blender
  id: totrans-82
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在Blender中添加枢轴约束
- en: 'A **Pivot Constraint** moves an object’s center of rotation to a different
    object’s position or specific coordinates. We are going to use an **Empty**, a
    Blender object that doesn’t contain any geometry:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '**枢轴约束**将对象的旋转中心移动到另一个对象的位置或特定的坐标。我们将使用一个**空对象**，这是一个不包含任何几何形状的Blender对象：'
- en: Add an empty to the scene via **Add** | **Empty** | **Plain Axes** from the
    **3D View** area. This object will be the new rotation pivot.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从**3D视图**区域选择**添加** | **空对象** | **平面坐标轴**将一个空对象添加到场景中。这个对象将成为新的旋转枢轴。
- en: Move this **Empty** somewhere above the **Cube** object so that it can act as
    a suspension point.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将这个**空对象**移动到**立方体**对象上方，使其可以作为悬挂点。
- en: 'Now, we can create the constraint:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以创建约束：
- en: Select the **Cube** object and reach its **Constraints** tab in the properties.
    It is marked with the icon of a connection rod.
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**立方体**对象，并在属性中的**约束**选项卡中找到它。它有一个连接杆的图标。
- en: 'Select **Pivot** from the **Add Object Constraint** drop-down. A new constraint
    will be created:'
  id: totrans-88
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**添加对象约束**下拉菜单中选择**枢轴**。将创建一个新的约束：
- en: '![Figure 9.7: Creating a Pivot Constraint](img/Figure_9.07_B18375.jpg)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![图9.7：创建枢轴约束](img/Figure_9.07_B18375.jpg)'
- en: 'Figure 9.7: Creating a Pivot Constraint'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.7：创建枢轴约束
- en: Click the **Target** field in the **Pivot Constraint** panel, and select **Empty**
    among the list of objects.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**枢轴约束**面板中点击**目标**字段，并在对象列表中选择**空对象**。
- en: Now, click the **Rotation Range** property and change it to **Always** so that
    rotations in all directions are affected.
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，点击**旋转范围**属性并将其更改为**始终**，以便所有方向的旋转都会受到影响。
- en: 'If we play the animation, the cube oscillates left and right:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们播放动画，立方体会左右摆动：
- en: '![Figure 9.8: The Pivot Constraint changing the rotation center of the Cube
    object](img/Figure_9.08_B18375.jpg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图9.8：枢轴约束改变立方体对象的旋转中心](img/Figure_9.08_B18375.jpg)'
- en: 'Figure 9.8: The Pivot Constraint changing the rotation center of the Cube object'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.8：枢轴约束改变立方体对象的旋转中心
- en: It starts to look like a pendulum, but the speed of a swinging motion should
    depend on the length of the cord, which we are not considering in our formula.
    To improve our driver, we must learn how the sine function works and how to control
    its period. Then, we must study pendulum physics and write an expression that
    takes the cord length into account.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 它开始看起来像是一个摆锤，但摆动的速度应该取决于绳子的长度，而这在我们的公式中并没有考虑。为了改进我们的驱动程序，我们必须了解正弦函数的工作原理以及如何控制其周期。然后，我们必须研究摆的物理，并编写一个考虑绳子长度的表达式。
- en: Controlling the period of the sin function
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制正弦函数的周期
- en: 'To have better control of the sine period, we need to observe its graph, as
    shown in *Figure 9**.9*. Its value is `0` at frame `0`, and after rising between
    frames `1` and `2`, it goes back to zero just a little bit after frame `3`:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了更好地控制正弦周期，我们需要观察其图形，如图*图9**.9*所示。它在帧`0`时值为`0`，在帧`1`和`2`之间上升后，在帧`3`之后稍微回到零：
- en: '![Figure 9.9: The sine function](img/Figure_9.9_B18375.jpg)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图9.9：正弦函数](img/Figure_9.9_B18375.jpg)'
- en: 'Figure 9.9: The sine function'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.9：正弦函数
- en: This happens because sine, an angle-related function, depends on the mathematical
    constant π, and its value is zero at points `3.14`, `6.28`, and so on. The relationship
    between angles and circles is due to how angles describe circular arcs.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为正弦，一个与角度相关的函数，依赖于数学常数π，其值在`3.14`、`6.28`等点为零。角度与圆之间的关系是由于角度如何描述圆弧。
- en: If the sine function repeats at every full circle, and a full circle measures
    2 * π radians, we can say that the period of the `sin(frame)` formula is `2 *`
    `pi` frames.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果正弦函数在每个完整圆周上重复，并且一个完整圆周为2 * π弧度，那么我们可以说`sin(frame)`公式的周期是`2 *` `pi`帧。
- en: 'By using `2 * pi` as an argument of `sin`, we get a formula whose period is
    just one frame:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将`2 * pi`作为`sin`函数的参数，我们得到一个周期正好为一帧的公式：
- en: '[PRE0]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The result of this formula is always `0`, but that’s more useful than it seems:
    dividing `frame * 2 * pi` by a specific number of frames, we can set how much
    it takes for the formula to repeat – that is, we now have control over the period.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这个公式的结果始终是`0`，但这比看起来更有用：将`frame * 2 * pi`除以特定的帧数，我们可以设置公式重复所需的时间——也就是说，我们现在可以控制周期。
- en: 'For instance, the result of the following formula repeats every 10 frames:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下公式的结果每10帧重复一次：
- en: '[PRE1]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Now, we can look up the pendulum formula and set up a physically correct oscillation.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以查找摆动公式并设置一个物理上正确的振荡。
- en: Implementing the pendulum equation
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 实现摆动方程
- en: 'According to Wikipedia ([en.wikipedia.org/wiki/Pendulum](https://en.wikipedia.org/wiki/Pendulum)),
    the period of a pendulum depends on the length of its cord, and is approximated
    with the following formula:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 根据维基百科([en.wikipedia.org/wiki/Pendulum](https://en.wikipedia.org/wiki/Pendulum))，摆动的周期取决于其绳索的长度，并使用以下公式进行近似：
- en: '*2π√(L/g)*'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '*2π√(L/g)*'
- en: 'It reads `2` times `pi` times the `length` over `gravity`. In Python, this
    looks as follows:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 它读取`2`乘以`pi`乘以`length`除以`gravity`。在Python中，它看起来如下：
- en: '[PRE2]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Here, `sqrt` is the square root operation and `9.8` is the gravity on Earth
    following the **International System of Units** (**SI**). The time unit is seconds
    in this system, so we need to express the formulas in our driver in seconds.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`sqrt`是平方根运算，`9.8`是按照**国际单位制**(**SI**)的地球重力。在这个系统中，时间单位是秒，因此我们需要在我们的驱动程序中用秒来表示公式。
- en: 'The expression for repeating `sin` in one frame was as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 在一帧中重复`sin`的表达式如下：
- en: '[PRE3]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'And since we need to apply a period in seconds, we divide that expression by
    the frames per second:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们需要以秒为单位应用周期，我们将该表达式除以每秒帧数：
- en: '[PRE4]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: This slows down our expression to a period of 1 second.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 这将我们的表达式减速到1秒的周期。
- en: We aim to end up with a period of `2 * pi * sqrt(length / 9.8)` seconds, so
    we divide the argument of `sin` by that amount.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的目标是得到`2 * pi * sqrt(length / 9.8)`秒的周期，因此我们将`sin`的参数除以这个值。
- en: 'After the division, we end up with a function of two variables, `fps` and `length`:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 除法后，我们得到一个关于两个变量`fps`和`length`的函数：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The value of `2 * pi / 2 *pi` is `1` and can be removed from the multiplication.
    Now, our formula looks much better:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`2 * pi / 2 *pi`的值是`1`，可以从乘法中删除。现在，我们的公式看起来好多了：'
- en: '[PRE6]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Typing it inside **Rotation X** creates a *driver*:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在**旋转X**中输入它创建一个*驱动程序*：
- en: '![Figure 9.10: Implementation of the pendulum formula](img/Figure_9.10_B18375.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图9.10：摆动公式的实现](img/Figure_9.10_B18375.jpg)'
- en: 'Figure 9.10: Implementation of the pendulum formula'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.10：摆动公式的实现
- en: The driver won’t work yet, though – the `frame` variable is already defined
    by Blender, but `length` and `fps` do not exist and cause an error. We need to
    add these two variables to the driver properties.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管如此，驱动程序还不能工作——`frame`变量已经被Blender定义，但`length`和`fps`不存在并导致错误。我们需要将这些两个变量添加到驱动程序属性中。
- en: Adding variables to drivers
  id: totrans-129
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 向驱动程序添加变量
- en: We could perform this operation in the **Drivers Editor** area we used in the
    *Creating drivers* section of this chapter, but since we don’t need to edit the
    *f-curve*, we can use a simpler interface.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在本章*创建驱动程序*部分的**驱动程序编辑器**区域执行此操作，但由于我们不需要编辑*f-curve*，我们可以使用一个更简单的界面。
- en: Displaying the Driven Property window
  id: totrans-131
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 显示驱动属性窗口
- en: The **Driven Property** window displays the details of a single driver. It is
    quick to access, and its content is the same as the **Drivers** tab in the **Drivers**
    **Editor** area.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**驱动属性**窗口显示单个驱动程序的详细信息。它访问快捷，其内容与**驱动程序**区域中的**驱动程序**标签页相同。'
- en: 'The steps for displaying and editing a driven property are as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 显示和编辑驱动属性的步骤如下：
- en: Right-click on a driven property.
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击一个驱动属性。
- en: Select **Edit Driver** from the context menu.
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从上下文菜单中选择**编辑驱动程序**。
- en: 'The **Driven Property** window recaps the path of the affected property, which
    **Type** of driver it is, if there are errors in the driver, and which variables
    have been created:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '**驱动属性**窗口总结了受影响属性的路径，它是哪种类型的驱动，如果驱动程序有错误，以及创建了哪些变量：'
- en: '![Figure 9.11: Properties of a scripted expression driver](img/Figure_9.11_B18375.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![图9.11：脚本表达式驱动程序的性质](img/Figure_9.11_B18375.jpg)'
- en: 'Figure 9.11: Properties of a scripted expression driver'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.11：脚本表达式驱动程序的性质
- en: At this stage, the driver type will be set to **Scripted Expression**; the **Expression**
    field contains our pendulum formula, while the error label informs us that something
    went wrong with the Python expression.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个阶段，驱动类型将被设置为**脚本表达式**；**表达式**字段包含我们的摆动公式，而错误标签会通知我们Python表达式出了问题。
- en: This error is caused by the missing `fps` and `length` variables. Adding them
    will fix it.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 这个错误是由缺少`fps`和`length`变量引起的。添加它们将修复它。
- en: Hold on to your window!
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 稍等一下你的窗口！
- en: '**Driven Property** is a popover window that disappears when the mouse pointer
    moves back outside of its borders. Don’t worry, though; every change will still
    be there when you open the window again.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '**驱动属性**是一个弹出窗口，当鼠标指针移回其边界之外时消失。不过，不用担心；每次更改都会在您再次打开窗口时仍然存在。'
- en: Getting the frame per seconds property
  id: totrans-143
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 获取每秒帧数属性
- en: 'Clicking the `var`, and it’s an **RNA property** variable – that is, it reads
    the value from another property in Blender. To get that value, we need to specify
    the following:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 点击`var`，它是一个**RNA属性**变量——也就是说，它从Blender中的另一个属性读取值。为了获取这个值，我们需要指定以下内容：
- en: The type of the entity (object, scene, action, and so on)
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体的类型（对象、场景、动作等）
- en: The name of the entity
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 实体的名称
- en: The name of the property
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 属性的名称
- en: 'These properties can be set in the **Variable** panel:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这些属性可以在**变量**面板中设置：
- en: '![Figure 9.12: A newly created variable](img/Figure_9.12_B18375.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![图9.12：一个新创建的变量](img/Figure_9.12_B18375.jpg)'
- en: 'Figure 9.12: A newly created variable'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.12：一个新创建的变量
- en: 'Here are the steps to get the **Frames Per Second** render setting of the scene
    through this variable:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这个变量获取场景的**每秒帧数**渲染设置的步骤如下：
- en: 'Select **Scene** from the property type list, which is displayed with the left
    button below the variable’s name:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从属性类型列表中选择**场景**，该列表显示在变量名称下方的左侧按钮：
- en: '![Figure 9.13: Setting the property variable type](img/Figure_9.13_B18375.jpg)'
  id: totrans-153
  prefs: []
  type: TYPE_IMG
  zh: '![图9.13：设置属性变量类型](img/Figure_9.13_B18375.jpg)'
- en: 'Figure 9.13: Setting the property variable type'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.13：设置属性变量类型
- en: A Blender file can contain more than one scene. We can display a list of them
    with the right list button and pick one. The name of the default scene is **Scene**.
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个Blender文件可以包含多个场景。我们可以通过右侧的列表按钮显示它们的列表并选择一个。默认场景的名称是**场景**。
- en: Now that a scene has been selected, another field, `render.fps` gets the frame
    per second, as set in the render settings.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在场景已被选择，另一个字段`render.fps`获取每秒帧数，如渲染设置中所设置。
- en: 'We must rename the variable from `var` to `fps` by clicking the current name
    just right of the genetic code (RNA) icon:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们必须通过点击位于遗传代码（RNA）图标右侧的当前名称将变量重命名为`fps`：
- en: '![Figure 9.14: The fps variable in the render settings](img/Figure_9.14_B18375.jpg)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
  zh: '![图9.14：渲染设置中的fps变量](img/Figure_9.14_B18375.jpg)'
- en: 'Figure 9.14: The fps variable in the render settings'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.14：渲染设置中的fps变量
- en: Now, the variable name matches the one used in the driver expression so that
    `frame/fps` is the time at the current frame, in seconds. This allows the next
    variable, `length`, to influence the period with a seconds-based formula.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，变量名称与驱动表达式中所使用的名称相匹配，因此`frame/fps`是当前帧的时间，以秒为单位。这允许下一个变量`length`通过基于秒的公式影响周期。
- en: Getting the pendulum length with a distance variable
  id: totrans-161
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用距离变量获取摆长
- en: 'There are four types of driver variables:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 有四种类型的驱动变量：
- en: '**Single Property**'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**单个属性**'
- en: '**Transform Channel**'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**变换通道**'
- en: '**Rotational Difference**'
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旋转差异**'
- en: '**Distance**'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**距离**'
- en: While the first two, **Single Property** and **Transform Channel**, depend on
    the value of a property, **Rotational Difference** and **Distance** result from
    the difference between the transformations of two objects.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 前两种，**单个属性**和**变换通道**依赖于属性值，而**旋转差异**和**距离**则是由两个对象的变换之间的差异产生的。
- en: 'In this case, the length of the cord is the distance between the driven object
    and its pivot – that is, between `length`:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，绳子的长度是驱动对象与其支点之间的距离——即`length`：
- en: Add a new variable by clicking the **+ Add Input** **Variable** button.
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过点击**+ 添加输入** **变量**按钮添加一个新变量。
- en: 'Click the RNA icon to change the type to **Distance**. The panel will change,
    allowing you to select two objects:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击RNA图标将类型更改为**距离**。面板将改变，允许您选择两个对象：
- en: '![Figure 9.15: Changing the variable type](img/Figure_9.15_B18375.jpg)'
  id: totrans-171
  prefs: []
  type: TYPE_IMG
  zh: '![图9.15：更改变量类型](img/Figure_9.15_B18375.jpg)'
- en: 'Figure 9.15: Changing the variable type'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 图9.15：更改变量类型
- en: 'Select `length`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择`length`：
- en: '![Figure 9.16: Variables settings for the pendulum driver](img/Figure_9.16_B18375.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.16：摆动驱动器的变量设置](img/Figure_9.16_B18375.jpg)'
- en: 'Figure 9.16: Variables settings for the pendulum driver'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.16：摆动驱动器的变量设置
- en: Moving the **Empty** or **Cube** object closer to each other while the animation
    plays makes the swing becomes faster, while setting them apart slows them down.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在动画播放时将 **Empty** 或 **Cube** 对象移近，会使摆动变快，而将它们分开则会减慢摆动。
- en: 'The maximum value of sin is `1`, which, converted from *radians*, gives us
    the maximum angle reached by this driver:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 正弦函数的最大值是 `1`，将其从 *弧度* 转换后，给出了此驱动器达到的最大角度：
- en: '[PRE7]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This value is the amplitude of the oscillation. The amplitude of a pendulum
    depends on its initial position. In real life, the amplitude decreases progressively
    because of the friction of air, until the pendulum reaches its resting position
    and stops. We are not implementing air drag in our driver, but we can still add
    a control to influence the amplitude of the motion.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这个值是振动的振幅。摆的振幅取决于其初始位置。在现实生活中，由于空气的摩擦，振幅会逐渐减小，直到摆达到其静止位置并停止。我们不在驱动器中实现空气阻力，但我们仍然可以添加一个控件来影响运动振幅。
- en: Controlling the amplitude
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 控制振幅
- en: While the term **amplitude** has a specific meaning when dealing with wave graphs,
    for our goal, we can consider it a multiplier of motion.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 当处理波形图时，**振幅** 这个术语有特定的含义，但对于我们的目标，我们可以将其视为运动的乘数。
- en: Since we are programming for animation, it’s more important for our amplitude
    control to make sense visually rather than physically.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在为动画编程，我们的振幅控制在视觉上比在物理上更重要。
- en: Adding a custom property
  id: totrans-183
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 添加自定义属性
- en: We already control the pivot’s position with an object of the **empty** type.
    Since moving **Empty** already alters the periodic motion, we can add a new property
    to it, to control the amplitude of the oscillation. This way, we can affect the
    behavior of the pendulum by selecting a single object.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经使用 **empty** 类型的对象控制了支点的位置。由于移动 **Empty** 已经改变了周期性运动，我们可以在它上面添加一个新的属性来控制振幅。这样，我们可以通过选择单个对象来影响摆的行为。
- en: 'The procedure for adding a property to an object is as follows:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 向对象添加属性的过程如下：
- en: Select the **Empty** object that we are using as a pivot.
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择我们用作支点的 **Empty** 对象。
- en: In the **Object Properties** panel, find the **Custom** **Properties** section.
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **对象属性** 面板中，找到 **自定义** **属性** 部分。
- en: 'Click the **+ New** button to add a property. It will be named **prop** by
    default:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **+ 新建** 按钮添加属性。它将默认命名为 **prop**：
- en: '![Figure 9.17: Adding custom properties to the active object](img/Figure_9.17_B18375.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.17：向活动对象添加自定义属性](img/Figure_9.17_B18375.jpg)'
- en: 'Figure 9.17: Adding custom properties to the active object'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.17：向活动对象添加自定义属性
- en: Click the cog icon and change **Property Name** to **amplitude**.
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击齿轮图标并将 **属性名称** 更改为 **amplitude**。
- en: Right-click on the value (the default, `1.00`, is good) and select **Copy**
    **Data Path**.
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击值（默认值 `1.00` 是好的）并选择 **复制** **数据路径**。
- en: This copies the path of the property to the clipboard. This will be useful when
    we add the next driver variable.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 这将属性路径复制到剪贴板。这将在我们添加下一个驱动器变量时很有用。
- en: Using custom properties in drivers
  id: totrans-194
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 在驱动器中使用自定义属性
- en: 'Multiplying the driver expression by the `amp` variable affects its result
    and allows us to modulate its amplitude. To do that, follow these steps:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 将驱动器表达式乘以 `amp` 变量会影响其结果，并允许我们调节其振幅。要这样做，请按照以下步骤操作：
- en: Select the oscillating **Cube**.
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择摆动的 **Cube**。
- en: Right-click on the driven rotation channel and select **Edit Driver** to bring
    up the **Driven** **Property** editor.
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击驱动旋转通道并选择 **编辑驱动器** 以打开 **驱动** **属性** 编辑器。
- en: Click `amp`.
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `amp`。
- en: Click the **Prop:** field on the right and pick **Empty** as the property object.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击右侧的 **Prop:** 字段，并将属性对象选择为 **Empty**。
- en: 'Click the `["amplitude"]`. The square brackets are part of the *custom properties*
    Python path:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 `["amplitude"]`。方括号是 *自定义属性* Python 路径的一部分：
- en: '![Figure 9.18: Custom property as a driver variable](img/Figure_9.18_B18375.jpg)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图 9.18：自定义属性作为驱动变量](img/Figure_9.18_B18375.jpg)'
- en: 'Figure 9.18: Custom property as a driver variable'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图 9.18：自定义属性作为驱动变量
- en: 'We could just add `* amp` to the driver expression, but we can do even better:
    since the driver affects a rotation, we can add `pi` to the multiplication too:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在驱动器表达式中直接添加 `* amp`，但我们可以做得更好：因为驱动器影响旋转，我们还可以在乘法中添加 `pi`：
- en: '[PRE8]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The `sin` function oscillates between `-1.0` and `1.0`, so the result of our
    driver when `1.0` ranges between `-pi` to `pi`.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`sin`函数在`-1.0`和`1.0`之间振荡，因此当`1.0`时，我们的驱动程序的结果在`-pi`到`pi`之间。'
- en: 'Keeping in mind that a full circle arc measures `2 * pi`, it’s fair to expect
    a value of `pi` to describe a half-circle rotation in radians. If we play the
    animation now, we’ll see the pendulum oscillate up to its vertical direction –
    that is, rotate half circle to the left, go back, and then rotate half circle
    to the right: an amplitude of `1.0` makes the pendulum describe a full circle.'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，完整圆弧的周长是`2 * pi`，因此期望一个`pi`值来描述半圆旋转的弧度是合理的。如果我们现在播放动画，我们会看到摆动振荡到其垂直方向——也就是说，向左旋转半圆，然后返回，再向右旋转半圆：`1.0`的振幅使摆动描述一个完整圆。
- en: 'If we select the `0.5`, the pendulum will swing through a half-circle arc.
    An amplitude equal to `0.25` gives better results: a 45-degree maximum rotation
    on each side; a value of `0.0` would stop the pendulum.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们选择`0.5`，摆动将通过半圆弧。振幅等于`0.25`会得到更好的结果：每侧的最大旋转角度为45度；`0.0`的值将停止摆动。
- en: A control ranging from `0.0` for a still pendulum to `1.0` for an entire rotation
    has an immediate meaning to animators and 3D users because it allows them to set
    up the fraction of the circle that they wish by changing the amplitude.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 从`0.0`（静止的摆）到`1.0`（整个旋转）的控制对动画师和3D用户来说有直接的意义，因为它允许他们通过改变振幅来设置他们想要的圆周分数。
- en: We used a Python formula in our driver, but we created the entire setup manually.
    In the next section, we will write a Python add-on to automate this procedure.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在我们的驱动程序中使用了Python公式，但我们手动创建了整个设置。在下一节中，我们将编写一个Python附加组件来自动化此过程。
- en: Writing the pendulum add-on
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写摆动附加组件
- en: Using what we have learned so far, we can write an add-on that sets up a pendulum
    for the active object.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 使用我们迄今为止所学到的知识，我们可以编写一个设置活动对象摆的附加组件。
- en: We will start with the steps from [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049),
    and create a `.py` file for our add-on.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从[*第3章*](B18375_03.xhtml#_idTextAnchor049)中的步骤开始，并为我们的附加组件创建一个`.py`文件。
- en: Setting the environment
  id: totrans-213
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置环境
- en: 'Let’s create a folder for [*Chapter 9*](B18375_09.xhtml#_idTextAnchor226) in
    our `ch9` folder as the **Scripts Folder** property and restart the application.
    We can create our new files and folder in our IDE (VS Code in this book) so that
    we can start editing:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在`ch9`文件夹中为[*第9章*](B18375_09.xhtml#_idTextAnchor226)创建一个文件夹作为**脚本文件夹**属性，并重新启动应用程序。我们可以在我们的IDE（本书中的VS
    Code）中创建我们的新文件和文件夹，这样我们就可以开始编辑：
- en: Select `PythonScriptingBlender/ch9/addons` in **VS Code**.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**VS Code**中选择`PythonScriptingBlender/ch9/addons`。
- en: Create a new file by clicking the **New** **File** icon.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**新建文件**图标创建一个新文件。
- en: Name the new file `pendulum.py`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新文件命名为`pendulum.py`。
- en: Open the file by double-clicking it.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击文件以打开它。
- en: 'We can now add the standard elements of most add-ons:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以添加大多数附加组件的标准元素：
- en: Add-on information
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 附加组件信息
- en: The `Operator` class
  id: totrans-221
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Operator`类'
- en: The menu function
  id: totrans-222
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 菜单函数
- en: Registration functions
  id: totrans-223
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 注册函数
- en: Next, we’ll learn how to write this information.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习如何编写这些信息。
- en: Writing the information
  id: totrans-225
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写信息
- en: 'As usual, the information about our add-on goes into the `bl_info` dictionary:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，关于我们的附加组件的信息将放入`bl_info`字典中：
- en: '[PRE9]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This dictionary is just for Blender to display the add-on’s name and description
    in the list. The next step is writing the `Operator` class.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 这个字典只是为了Blender在列表中显示附加组件的名称和描述。下一步是编写`Operator`类。
- en: Writing the Operator class
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写Operator类
- en: 'The `Operator` class carries on the actual work. We derive `bpy.types.Operator`
    and fill in the information in the static section of the class:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '`Operator`类执行实际工作。我们派生`bpy.types.Operator`并在类的静态部分填写信息：'
- en: '[PRE10]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '`bl_idname` starts with `object.` so that it will be added to the `bpy.ops.object`
    operators. We are doing that because everything we do in this operator affects
    the scene at the object level.'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '`bl_idname`以`object.`开头，因此它将被添加到`bpy.ops.object`操作符中。我们这样做是因为我们在操作符中做的所有事情都会影响对象级别的场景。'
- en: 'Now, we must add the oscillation parameters to the static attributes:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们必须将振荡参数添加到静态属性中：
- en: '[PRE11]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'They will determine the `amplitude` and `length` variables of the motion. By
    using `''REGISTER''` and `''UNDO''` as `bl_options`, the operator will allow live
    changes:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 它们将确定运动的`振幅`和`长度`变量。通过使用`'REGISTER'`和`'UNDO'`作为`bl_options`，操作符将允许实时更改：
- en: '[PRE12]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Now, it’s the `poll` method’s turn, where the conditions for running the operator
    are checked. It must return `True` if there is an active object. We can use the
    `bool` function to convert `context.object` on the fly:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，轮到`poll`方法了，在这里检查运行操作的条件。如果有活动对象，它必须返回`True`。我们可以使用`bool`函数即时转换`context.object`：
- en: '[PRE13]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Finally, we have the `execute` method. It performs all the operations from
    the previous section of this chapter:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们有`execute`方法。它执行本章前一部分的所有操作：
- en: Creates the pivot object
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建枢轴对象
- en: Adds a custom property for the amplitude
  id: totrans-241
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加一个用于振幅的自定义属性
- en: Creates a driver with the pendulum formula and variables
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用单摆公式和变量创建驱动器
- en: 'At the start of the function, we store the active object in the `ob` variable,
    then create a new object that will be the pivot. In [*Chapter 2*](B18375_02.xhtml#_idTextAnchor033),
    we learned that new objects can be created in two steps:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数开始时，我们将活动对象存储在`ob`变量中，然后创建一个新对象，该对象将是枢轴。在[*第2章*](B18375_02.xhtml#_idTextAnchor033)中，我们了解到新对象可以分两步创建：
- en: Get a new object via `bpy.data.objects.new`.
  id: totrans-244
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过`bpy.data.objects.new`获取新对象。
- en: Link the object to a `Collection` present in the scene.
  id: totrans-245
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将对象链接到场景中存在的`Collection`。
- en: 'We will use `context.collection` and link the pivot to the active collection:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用`context.collection`并将枢轴链接到活动集合：
- en: '[PRE14]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Using `None` as the second argument of `new` creates a transform with no geometry
    data – that is, an `matrix_world`. The pivot should be placed above the active
    object, and since `location` is stored in the fourth column of the transform matrix,
    we can raise the value of `[2][3]`):'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`None`作为`new`的第二个参数创建一个没有几何数据变换——即`matrix_world`。枢轴应该放置在活动对象上方，因为`location`存储在变换矩阵的第四列，我们可以提高`[2][3]`的值）：
- en: '[PRE15]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Now, it’s time for the custom properties. We have seen how the data path to
    our *amplitude* property was `["amplitude"]`. That’s because Python’s access to
    custom properties follows the same syntax as Python dictionaries.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候添加自定义属性了。我们已经看到，我们的`*振幅*`属性的数据路径是`["振幅"]`。这是因为Python对自定义属性的访问遵循与Python字典相同的语法。
- en: 'In Python dictionaries, the `dictionary["new_key"] = new_value` syntax adds
    a new item. Likewise, the Python code for creating the `amplitude` float property
    and assigning it the value of the operator’s parameter of the same name is as
    follows:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python字典中，`dictionary["new_key"] = new_value`语法添加了一个新项。同样，创建`振幅`浮点属性并将其分配给操作员同名参数的Python代码如下：
- en: '[PRE16]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '`amplitude` will now appear under our pivot object. We will use that later
    in the driver. For now, we will add a **Pivot Constraint** to the active object:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '`振幅`现在将出现在我们的枢轴对象下。我们将在驱动器中使用它。现在，我们将向活动对象添加一个**枢轴约束**：'
- en: '[PRE17]'
  id: totrans-254
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Now, it’s time to create our driver. Drivers, as objects, are slightly more
    complex than constraints as they contain other entities, such as the f-curve,
    and are part of the animation data. So, rather than using the `drivers.new` method
    from `animation_data`, we will resort to the `driver_add` method of the object,
    which sets up all the requirements. It returns the driver curve:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，是时候创建我们的驱动器了。驱动器作为对象，比约束稍微复杂一些，因为它们包含其他实体，例如f曲线，并且是动画数据的一部分。因此，我们不会使用来自`animation_data`的`drivers.new`方法，而是求助于对象的`driver_add`方法，该方法设置所有要求。它返回驱动曲线：
- en: '[PRE18]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Who drives the driver?
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 谁是驱动器的驱动者？
- en: The `driver_add` method returns the f-curve rather than the driver itself. The
    actual driver can be accessed via the `curve.driver` attribute. This makes it
    easier to access the new curve, but it would have been reasonable to expect that
    `driver_add` would return the driver instead.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '`driver_add`方法返回f曲线而不是驱动器本身。实际的驱动器可以通过`curve.driver`属性访问。这使得访问新曲线变得更容易，但可以合理地期望`driver_add`返回驱动器。'
- en: 'Our driver uses a Python expression, so must we set the `type` and `expression`
    attributes:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的驱动器使用Python表达式，因此我们必须设置`type`和`expression`属性：
- en: '[PRE19]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The `fps`, `length`, and `amp` variables can be added using `variables.new`.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`variables.new`添加`fps`、`length`和`amp`变量。
- en: 'Once we’ve created a variable, we can set its targets. The current `render.fps`
    property of `context.scene`, so it’s only one target. We will set the variable
    type to a single property and fill `id_type`, `id`, and `data_path` of `targets[0]`:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们创建了一个变量，我们就可以设置其目标。当前`context.scene.render.fps`属性是`render.fps`，所以只有一个目标。我们将变量类型设置为单个属性，并填写`targets[0]`的`id_type`、`id`和`data_path`：
- en: '[PRE20]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Our pendulum length is the distance between `pivot` and `ob`, so it has two
    targets:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的单摆长度是`pivot`和`ob`之间的距离，因此它有两个目标：
- en: '[PRE21]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Finally, we can look at the amplitude. It’s a custom property of the pivot
    and the variable is of the `''SINGLE_PROP''` type, but this time, `id_type` is
    a Blender object. Once the driver setup is complete, we can exit the function
    by returning the `''``FINISHED''` state:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们可以看看振幅。它是枢轴的一个自定义属性，变量类型为`'SINGLE_PROP'`，但这次，`id_type`是Blender对象。一旦驱动器设置完成，我们可以通过返回`'``FINISHED'`状态来退出函数：
- en: '[PRE22]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The `ObjectPendulum` class is complete as it now covers the entire setup process.
    As usual, we must also add an entry to one of the Blender menus to make it easier
    to launch.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`ObjectPendulum`类现在已经完整，因为它现在涵盖了整个设置过程。像往常一样，我们还必须将其添加到Blender的一个菜单中，以便更容易启动。'
- en: Writing the menu and registering the class
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 编写菜单和注册类
- en: 'In [*Chapter 3*](B18375_03.xhtml#_idTextAnchor049), we learned that we can
    add our items to menus by writing a menu function. The argument self and context
    are, respectively, the menu instance and the application context. We must add
    the operator’s `bl_idname` to the menu’s `layout`:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B18375_03.xhtml#_idTextAnchor049)，我们学习了我们可以通过编写菜单函数将我们的条目添加到菜单中。self和context参数分别是菜单实例和应用上下文。我们必须将操作员的`bl_idname`添加到菜单的`layout`中：
- en: '[PRE23]'
  id: totrans-271
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Then, in the register function, we must add `menu_func` to one of Blender’s
    menus. In this example, we will use the right-click menu that’s available in object
    mode. We learned how to look for menu class names in [*Chapter 8*](B18375_08.xhtml#_idTextAnchor206),
    and the object context menu class is `VIEW3D_MT_object_context_menu`. We must
    also register the operator class, `ObjectPendulum`:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在注册函数中，我们必须将`menu_func`添加到Blender的一个菜单中。在这个例子中，我们将使用对象模式中可用的右键单击菜单。我们在[*第8章*](B18375_08.xhtml#_idTextAnchor206)中学习了如何查找菜单类名，对象上下文菜单类是`VIEW3D_MT_object_context_menu`。我们还必须注册操作员类`ObjectPendulum`：
- en: '[PRE24]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This adds our new functionality to Blender when the **Object Pendulum** add-on
    is enabled. Of course, we must reverse those operations to clean up our add-on
    elements when it is disabled:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 当**对象摆锤**附加组件启用时，这为我们添加了新的功能。当然，当它被禁用时，我们必须撤销这些操作来清理我们的附加组件元素：
- en: '[PRE25]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Now that our add-on is ready, the steps for setting up a pendulum instantly
    are as follows:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们这个附加组件已经准备好了，设置摆锤的步骤如下：
- en: In **Object Mode**, select an object to make it active.
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**对象模式**下，选择一个对象使其变为活动状态。
- en: Right-click and choose **Make Pendulum** to invoke the add-on.
  id: totrans-278
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键单击并选择**创建摆锤**来调用附加组件。
- en: Set values for `length` and `amplitude` in the operator properties.
  id: totrans-279
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在操作员属性中设置`length`和`amplitude`的值。
- en: Writing this add-on put many of the techniques you learned in the previous chapters
    to use. Drivers are a very creative area of scripting, and this was just a taste
    of what we can do with them.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 编写这个附加组件将使你在前几章中学到的许多技术得以应用。驱动器是脚本编写的一个非常富有创造性的领域，而这只是我们能够用它们做到的一小部分。
- en: Summary
  id: totrans-281
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Drivers are powerful tools that sit at a crossroads between animation, rigging,
    and programming. On one hand, they can contain Python expressions and implement
    custom mechanics on their own, while on the other hand, the entire driver setup
    process can be automated via scripting.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 驱动器是位于动画、绑定和编程交叉路口的强大工具。一方面，它们可以包含Python表达式并自行实现自定义机制，另一方面，整个驱动器设置过程可以通过脚本自动化。
- en: The tool we wrote in this chapter is a small **auto-rig** that replicates the
    same mechanism, with editable parameters, on any Blender object.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中我们编写的工具是一个小的**自动绑定**工具，它可以在任何Blender对象上复制相同的机制，并具有可编辑的参数。
- en: The ability to combine drivers, constraints, and custom properties, as well
    as automate the whole procedure, is an essential part of 3D production as it allows
    non-technical users to carry on with technical tasks.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 能够结合驱动器、约束和自定义属性，以及自动化整个流程，是3D制作的一个基本部分，因为它允许非技术用户继续进行技术任务。
- en: As a plus, by using Python, we converted a formula from physics into a working
    driver expression, a task that can sometimes be intimidating but can be carried
    out with observation and a little ingenuity.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 作为额外的好处，通过使用Python，我们将一个物理公式转换成了一个可工作的驱动器表达式，这项任务有时可能会让人感到害怕，但可以通过观察和一点独创性来完成。
- en: This topic ends our tour of the animation system. In the next chapter, [*Chapter
    10*](B18375_10.xhtml#_idTextAnchor247), we will learn how our operators can interact
    with the user and listen to events.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题结束了我们对动画系统的探索。在下一章[*第10章*](B18375_10.xhtml#_idTextAnchor247)，我们将学习我们的操作员如何与用户交互并监听事件。
- en: Questions
  id: totrans-287
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What color is used for driven properties in the interface?
  id: totrans-288
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接口上用于驱动属性的颜色是什么？
- en: Can we set keyframes for purple properties?
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能否为紫色属性设置关键帧？
- en: Can a metric property, such as **Location**, drive an angular property, such
    as **Rotation**?
  id: totrans-290
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个度量属性，例如**位置**，能否驱动一个角属性，例如**旋转**？
- en: Can we change the ratio between the driving and driven properties?
  id: totrans-291
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能否改变驱动属性和被驱动属性之间的比率？
- en: Can we type Python expressions when we set values in the interface?
  id: totrans-292
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们在界面中设置值时，能否输入Python表达式？
- en: How do we tell Blender that the expressions we have typed should be a driver?
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何告诉Blender我们输入的表达式应该是一个驱动器？
- en: How do we edit a driver property in the user interface? Is there only one way?
  id: totrans-294
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们如何在用户界面中编辑驱动器属性？是否只有一种方法？
- en: Can we add custom properties to an object and use them to control other objects?
  id: totrans-295
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们能否向对象添加自定义属性并使用它们来控制其他对象？
- en: In Python, can we create new drivers using the `collection.new` method, as we
    do with constraints? If yes, why do we use `object.driver_add` instead?
  id: totrans-296
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Python中，我们能否使用`collection.new`方法创建新的驱动器，就像我们使用约束一样？如果可以，为什么我们使用`object.driver_add`而不是其他方法？
- en: Why is the `targets` attribute of driver variables a list? Which type of variable
    has more than one target?
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为什么驱动器变量的`targets`属性是一个列表？哪种类型的变量有多个目标？
