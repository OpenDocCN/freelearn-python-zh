["```py\nfrom passlib.context import CryptContext\nfrom fastapi.security import HTTPBasicCredentials\nfrom fastapi.security import HTTPBasic\nfrom secrets import compare_digest\nfrom models.data.sqlalchemy_models import Login\ncrypt_context = CryptContext(schemes=[\"sha256_crypt\", \n                    \"md5_crypt\"])\nhttp_basic = HTTPBasic()\n```", "```py\ndef verify_password(plain_password, hashed_password):\n    return crypt_context.verify(plain_password, \n        hashed_password)\ndef authenticate(credentials: HTTPBasicCredentials, \n         account:Login):\n    try:\n        is_username = compare_digest(credentials.username,\n             account.username)\n        is_password = compare_digest(credentials.password, \n             account.username)\n        verified_password = \n             verify_password(credentials.password, \n                   account.passphrase)\n        return (verified_password and is_username and \n               is_password)\n    except Exception as e:\n        return False\n```", "```py\nfrom fastapi import APIRouter, Depends, HTTPException\nfrom fastapi.security import HTTPBasicCredentials\nfrom security.secure import authenticate, \n            get_password_hash, http_basic\nrouter = APIRouter()\n@router.get(\"/login\")\ndef login(credentials: HTTPBasicCredentials = \n     Depends(http_basic), sess:Session = Depends(sess_db)):\n\n    loginrepo = LoginRepository(sess)\n    account = loginrepo.get_all_login_username(\n                     credentials.username)\n    if authenticate(credentials, account) and \n            not account == None:\n        return account\n    else:\n        raise HTTPException(\n            status_code=400, \n               detail=\"Incorrect credentials\")\n\n@router.get(\"/login/users/list\")\ndef list_all_login(credentials: HTTPBasicCredentials = \n     Depends(http_basic), sess:Session = Depends(sess_db)):\n    loginrepo = LoginRepository(sess)\n    users = loginrepo.get_all_login()\n    return jsonable_encoder(users)\n```", "```py\nINFO: 127.0.0.1:53150 - \"GET /ch07/login/users/list HTTP/1.1\" 200 OK\n```", "```py\nfrom base64 import urlsafe_b64encode\nh = urlsafe_b64encode(b\"sjctrags:sjctrags\")\n```", "```py\n[CREDENTIALS]\nUSERNAME=sjctrags\nPASSWORD=sjctrags\n```", "```py\nimport os\nfrom configparser import ConfigParser\ndef build_map():\n    env = os.getenv(\"ENV\", \".config\")\n    if env == \".config\":\n        config = ConfigParser()\n        config.read(\".config\")\n        config = config[\"CREDENTIALS\"]\n    else:\n        config = {\n            \"USERNAME\": os.getenv(\"USERNAME\", \"guest\"),\n            \"PASSWORD\": os.getenv(\"PASSWORD\", \"guest\"),\n        }\n    return config\n```", "```py\nfrom fastapi import Security, HTTPException, status\nfrom fastapi.security import HTTPAuthorizationCredentials\nfrom fastapi.security import HTTPDigest\nfrom secrets import compare_digest\nfrom base64 import standard_b64encode\nhttp_digest = HTTPDigest()\ndef authenticate(credentials: \n    HTTPAuthorizationCredentials = Security(http_digest)):\n\n    hashed_credentials = credentials.credentials\n    config = build_map()\n    expected_credentials = standard_b64encode(\n        bytes(f\"{config['USERNAME']}:{config['PASSWORD']}\",\n           encoding=\"UTF-8\")\n    )\n    is_credentials = compare_digest(\n          bytes(hashed_credentials, encoding=\"UTF-8\"),\n               expected_credentials)\n\n    if not is_credentials:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Incorrect digest token\",\n            headers={\"WWW-Authenticate\": \"Digest\"},\n        )\n```", "```py\nfrom security.secure import authenticate\n@router.get(\"/login\", dependencies=[Depends(authenticate)])\ndef login(sess:Session = Depends(sess_db)):\n    return {\"success\": \"true\"}\n\n@router.get(\"/login/users/list\",   \n      dependencies=[Depends(authenticate)])\ndef list_all_login(sess:Session = Depends(sess_db)):\n    loginrepo = LoginRepository(sess)\n    users = loginrepo.get_all_login()\n    return jsonable_encoder(users)\n```", "```py\ncurl --request GET --url http://localhost:8000/ch07/login --header \"accept: application/json\"                  --header \"Authorization: Digest c2pjdHJhZ3M6c2pjdHJhZ3M=\" --header \"Content-Type: application/json\"\n```", "```py\npip install python-multipart\n```", "```py\nfrom fastapi.security import OAuth2PasswordBearer\nfrom sqlalchemy.orm import Session\nfrom repository.login import LoginRepository\nfrom db_config.sqlalchemy_connect import sess_db\noauth2_scheme = \n    OAuth2PasswordBearer(tokenUrl=\"ch07/login/token\")\ndef get_current_user(token: str = Depends(oauth2_scheme), \n           sess:Session = Depends(sess_db) ):\n    loginrepo = LoginRepository(sess)\n    user = loginrepo.get_all_login_username(token)\n    if user == None:\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Invalid authentication credentials\",\n            headers={\"WWW-Authenticate\": \"Bearer\"},\n        )\n    return user\n```", "```py\nfrom sqlalchemy.orm import Session\nfrom db_config.sqlalchemy_connect import sess_db\nfrom repository.login import LoginRepository\nfrom fastapi.security import OAuth2PasswordRequestForm\nfrom security.secure import get_current_user, authenticate\n@router.post(\"/login/token\")\ndef login(form_data: OAuth2PasswordRequestForm = Depends(),\n             sess:Session = Depends(sess_db)):\n    username = form_data.username\n    password = form_data.password\n    loginrepo = LoginRepository(sess)\n    account = loginrepo.get_all_login_username(username)\n    if authenticate(username, password, account) and \n              not account == None:\n        return {\"access_token\": form_data.username, \n                  \"token_type\": \"bearer\"}\n    else:\n        raise HTTPException(\n            status_code=400, \n               detail=\"Incorrect username or password\")\n```", "```py\n@router.post(\"/auctions/add\")\ndef add_auction(req: AuctionsReq, \n      current_user: Login = Depends(get_current_user), \n      sess:Session = Depends(sess_db)): \n    auc_dict = req.dict(exclude_unset=True)\n    repo:AuctionsRepository = AuctionsRepository(sess)\n    auction = Auctions(**auc_dict)\n    result = repo.insert_auction(auction)\n    if result == True:\n        return auction\n    else: \n        return JSONResponse(content=\n         {'message':'create auction problem encountered'}, \n            status_code=500)  \n```", "```py\nopenssl rand -hex 32\n```", "```py\nfrom jose import jwt, JWTError\nfrom datetime import datetime, timedelta\nSECRET_KEY = \"tbWivbkVxfsuTxCP8A+Xg67LcmjXXl/sszHXwH+TX9w=\"\nALGORITHM = \"HS256\"\nACCESS_TOKEN_EXPIRE_MINUTES = 30\ndef create_access_token(data: dict, \n           expires_after: timedelta):\n    plain_text = data.copy()\n    expire = datetime.utcnow() + expires_after\n    plain_text.update({\"exp\": expire})\n    encoded_jwt = jwt.encode(plain_text, SECRET_KEY, \n            algorithm=ALGORITHM)\n    return encoded_jwt\n```", "```py\n@router.post(\"/login/token\")\ndef login(form_data: OAuth2PasswordRequestForm = Depends(),\n          sess:Session = Depends(sess_db)):\n    username = form_data.username\n    password = form_data.password\n    loginrepo = LoginRepository(sess)\n    account = loginrepo.get_all_login_username(username)\n    if authenticate(username, password, account):\n        access_token = create_access_token(\n          data={\"sub\": username}, \n           expires_after=timedelta(\n              minutes=ACCESS_TOKEN_EXPIRE_MINUTES))\n        return {\"access_token\": access_token, \n             \"token_type\": \"bearer\"}\n    else:\n        raise HTTPException(\n            status_code=400, \n            detail=\"Incorrect username or password\")\n```", "```py\nfrom models.request.tokens import TokenData\nfrom fastapi.security import OAuth2PasswordBearer\nfrom jose import jwt, JWTError\nfrom models.data.sqlalchemy_models import Login\nfrom sqlalchemy.orm import Session\nfrom db_config.sqlalchemy_connect import sess_db\nfrom repository.login import LoginRepository\nfrom datetime import datetime, timedelta\noauth2_scheme = \n     OAuth2PasswordBearer(tokenUrl=\"ch07/login/token\")\ndef get_current_user(token: str = Depends(oauth2_scheme),\n    sess:Session = Depends(sess_db)):\n    credentials_exception = HTTPException(\n        status_code=status.HTTP_401_UNAUTHORIZED,\n        detail=\"Could not validate credentials\",\n        headers={\"WWW-Authenticate\": \"Bearer\"}\n    )\n    try:\n        payload = jwt.decode(token, SECRET_KEY, \n           algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_data = TokenData(username=username)\n    except JWTError:\n        raise credentials_exception\n\n    loginrepo = LoginRepository(sess)\n    user = \n      loginrepo.get_all_login_username(token_data.username)\n    if user is None:\n        raise credentials_exception\n    return user\n```", "```py\nclass OAuth2PasswordBearerScopes(OAuth2):\n    def __init__(\n        self,\n        tokenUrl: str,\n        scheme_name: str = None,\n        scopes: dict = None,\n        auto_error: bool = True,\n\n    ):\n    if not scopes:\n         scopes = {}\n    flows = OAuthFlowsModel(\n       password={\"tokenUrl\": tokenUrl, \"scopes\": scopes})\n    super().__init__(flows=flows, \n       scheme_name=scheme_name, auto_error=auto_error)\n    async def __call__(self, request: Request) -> \n             Optional[str]:\n        header_authorization: str = \n              request.headers.get(\"Authorization\")\n        … … … … … …\n        return param\n```", "```py\noauth2_scheme = OAuth2PasswordBearerScopes(\n    tokenUrl=\"/ch07/login/token\",\n    scopes={\"admin_read\": \n              \"admin role that has read only role\",\n            \"admin_write\":\n              \"admin role that has write only role\",\n            \"bidder_read\":\n              \"customer role that has read only role\",\n            \"bidder_write\":\n              \"customer role that has write only role\",\n            \"auction_read\":\n              \"buyer role that has read only role\",\n            \"auction_write\":\n              \"buyer role that has write only role\",\n            \"user\":\"valid user of the application\",\n            \"guest\":\"visitor of the site\"},\n)\n```", "```py\n@router.post(\"/login/token\")\ndef login(form_data: OAuth2PasswordRequestForm = Depends(),\n         sess:Session = Depends(sess_db)):\n    username = form_data.username\n    password = form_data.password\n    loginrepo = LoginRepository(sess)\n    account = loginrepo.get_all_login_username(username)\n    if authenticate(username, password, account):\n        access_token = create_access_token(\n            data={\"sub\": username, \"scopes\": \n              form_data.scopes},  \n               expires_delta=timedelta(\n               minutes=ACCESS_TOKEN_EXPIRE_MINUTES))\n        return {\"access_token\": access_token, \n                \"token_type\": \"bearer\"}\n    else:\n        raise HTTPException(\n            status_code=400, \n            detail=\"Incorrect username or password\")\n```", "```py\nfrom fastapi.security import SecurityScopes\n@router.patch(\"/profile/update\")\ndef update_profile(id:int, req: ProfileReq, \n    current_user: Login = Security(get_current_valid_user, \n        scopes=[\"bidder_write\", \"buyer_write\"]), \n    sess:Session = Depends(sess_db)): \n    … … … … … …\n    if result: \n        return JSONResponse(content=\n         {'message':'profile updated successfully'}, \n              status_code=201)\n    else: \n        return JSONResponse(content=\n           {'message':'update profile error'}, \n               status_code=500)\n```", "```py\ndef get_current_valid_user(current_user: \n   Login = Security(get_current_user, scopes=[\"user\"])):\n    if current_user == None:\n        raise HTTPException(status_code=400, \n           detail=\"Invalid user\")\n    return current_user\n```", "```py\ndef get_current_user(security_scopes: SecurityScopes, \n      token: str = Depends(oauth2_scheme), \n           sess:Session = Depends(sess_db)):\n    if security_scopes.scopes:\n        authenticate_value = \n          f'Bearer scope=\"{security_scopes.scope_str}\"'\n    else:\n        authenticate_value = f\"Bearer\" \n    … … … … … …\n    try:\n        payload = jwt.decode(token, SECRET_KEY, \n                   algorithms=[ALGORITHM])\n        username: str = payload.get(\"sub\")\n        if username is None:\n            raise credentials_exception\n        token_scopes = payload.get(\"scopes\", [])\n        token_data = TokenData(scopes=token_scopes, \n               username=username)\n    except JWTError:\n        raise credentials_exception\n    … … … … … …\n    for scope in security_scopes.scopes:\n        if scope not in token_data.scopes:\n            raise HTTPException(\n                status_code=status.HTTP_401_UNAUTHORIZED,\n                detail=\"Not enough permissions\",\n                headers={\"WWW-Authenticate\": \n                    authenticate_value},\n            )\n    return user\n```", "```py\nfrom fastapi.security import OAuth2AuthorizationCodeBearer\noauth2_scheme = OAuth2AuthorizationCodeBearer(\n    authorizationUrl='ch07/oauth2/authorize',\n    tokenUrl=\"ch07/login/token\",  \n    scopes={\"admin_read\": \"admin … read only role\",\n            \"admin_write\":\"admin … write only role\",\n            … … … … … …\n            \"guest\":\"visitor of the site\"},\n    )\n```", "```py\n@router.get(\"/oauth2/authorize\")\ndef authorizationUrl(state:str, client_id: str, \n       redirect_uri: str, scope: str, response_type: str, \n       sess:Session = Depends(sess_db)):\n\n    global state_server\n    state_server = state\n\n    loginrepo = LoginRepository(sess)\n    account = loginrepo.get_all_login_username(client_id)\n    auth_code = f\"{account.username}:{account.password}\n                    :{scope}\"\n    if authenticate(account.username, \n              account.password, account):\n        return RedirectResponse(url=redirect_uri \n          + \"?code=\" + auth_code \n          + \"&grant_type=\" + response_type\n          + \"&redirect_uri=\" + redirect_uri \n          + \"&state=\" + state)\n    else:\n        raise HTTPException(status_code=400, \n               detail=\"Invalid account\")\n```", "```py\n@router.post(\"/login/token\")\ndef access_token(code: str = Form(...), \n  grant_type:str = Form(...), redirect_uri:str = Form(...), \n  sess:Session = Depends(sess_db)):\n    access_token_expires = \n       timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)\n\n    code_data = code.split(':')\n    scopes = code_data[2].split(\"+\")\n    password = code_data[1]\n    username = code_data[0]\n\n    loginrepo = LoginRepository(sess)\n    account = loginrepo.get_all_login_username(username)\n    if authenticate(username, password, account):\n        access_token = create_access_token(\n            data={\"sub\": username, \"scopes\": scopes},\n            expires_delta=access_token_expires,\n        )\n\n        global state_server\n        state = state_server\n        return {\n            \"access_token\": access_token,\n            \"expires_in\": access_token_expires,\n            \"token_type\": \"Bearer\",\n            \"userid\": username,\n            \"state\": state,\n            \"scope\": \"SCOPE\"\n        }\n    else:\n        raise HTTPException(\n            status_code=400, \n             detail=\"Incorrect credentials\")\n```", "```py\nimport hashlib\nimport os\nimport urllib.parse as parse\n@router.get(\"/auth/login\")\ndef login_keycloak() -> RedirectResponse:\n    config = set_up()\n    state = hashlib.sha256(os.urandom(32)).hexdigest()\n\n    AUTH_BASE_URL = f\"{config['KEYCLOAK_BASE_URL']}\n     /auth/realms/AuctionRealm/protocol/\n         openid-connect/auth\"\n    AUTH_URL = AUTH_BASE_URL + \n     '?{}'.format(parse.urlencode({\n        'client_id': config[\"CLIENT_ID\"],\n        'redirect_uri': config[\"REDIRECT_URI\"],\n        'state': state,\n        'response_type': 'code'\n    }))\n    response = RedirectResponse(AUTH_URL)\n    response.set_cookie(key=\"AUTH_STATE\", value=state)\n    return response\n```", "```py\n{\"access_token\":\"eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkI iA6ICJJMFR3YVhiZnh0MVNQSnNzVTByQ09hMzVDaTdZNDkzUnJIeDJTM3paa0V VIn0.eyJleHAiOjE2NDU0MTgzNTAsImlhdCI6MTY0NTQxNzQ1MCwiYXV0aF90a W1lIjoxNjQ1NDE3NDM3LCJqdGkiOiI4YTQzMjBmYi0xMzg5LTQ2NzU……………………………2YTU2In0.UktwOX7H2ZdoyP1VZ5V2MXUX2Gj41D2cuusvwEZXBtVMvnoTDh KJgN8XWL7P3ozv4A1ZlBmy4NX1HHjPbSGsp2cvkAWwlyXmhyUzfQslf8Su00-4 e9FR4i4rOQtNQfqHM7cLhrzr3-od-uyj1m9KsrpbqdLvPEl3KZnmOfFbTwUXfE 9YclBFa8zwytEWb4qvLvKrA6nPv7maF2_MagMD_0Mh9t95N9_aY9dfquS9tcEV Whr3d9B3ZxyOtjO8WiQSJyjLCT7IW1hesa8RL3WsiG3QQQ4nUKVHhnciK8efRm XeaY6iZ_-8jm-mqMBxw00-jchJE8hMtLUPQTMIK0eopA\",\"expires_in\":900,\"refresh_expires_in\":1800,\"refresh_token\":\"eyJhbGciOiJIUzI1NiIs InR5cCIgOiAiSldUIiwia2lkIiA6ICJhNmVmZGQ0OS0yZDIxLTQ0NjQtOGUyOC0 4ZWJkMjdiZjFmOTkifQ.eyJleHAiOjE2NDU0MTkyNTAsImlhdCI6MTY0NTQxNzQ 1MCwianRpIjoiMzRiZmMzMmYtYjAzYi00MDM3LTk5YzMt………………………zc2lvbl9z dGF0ZSI6ImM1NTE3ZDIwLTMzMTgtNDFlMi1hNTlkLWU2MGRiOWM1NmE1NiIsIn Njb3BlIjoiYWRtaW46d3JpdGUgYWRtaW46cmVhZCB1c2VyIiwic2lkIjoiYzU1 MTdkMjAtMzMxOC00MWUyLWE1OWQtZTYwZGI5YzU2YTU2In0.xYYQPr8dm7_o1G KplnS5cWmLbpJTCBDfm1WwZLBhM6k\",\"token_type\":\"Bearer\",\"not-before-policy\":0,\"session_state\":\"c5517d20-3318-41e2-a59d-e60d b9c56a56\",\"scope\":\"admin:write admin:read user\"}\n```", "```py\nfrom jwt.algorithms import RSAAlgorithm\nfrom urllib.request import urlopen\nimport jwt\ndef get_current_user(security_scopes: SecurityScopes, \n        token: str = Depends(token_auth_scheme)):\n    token = token.credentials\n    config = set_up()\n    jsonurl = urlopen(f'{config[\"KEYCLOAK_BASE_URL\"]}\n        /auth/realms/AuctionRealm/protocol\n        /openid-connect/certs')\n    jwks = json.loads(jsonurl.read())\n    unverified_header = jwt.get_unverified_header(token)\n\n    rsa_key = {}\n    for key in jwks[\"keys\"]:\n        if key[\"kid\"] == unverified_header[\"kid\"]:\n            rsa_key = {\n                \"kty\": key[\"kty\"],\n                \"kid\": key[\"kid\"],\n                \"use\": key[\"use\"],\n                \"n\": key[\"n\"],\n                \"e\": key[\"e\"]\n            }\n\n    if rsa_key:\n        try:\n                public_key = RSAAlgorithm.from_jwk(rsa_key)\n                payload = jwt.decode(\n                    token,\n                    public_key,\n                    algorithms=config[\"ALGORITHMS\"],\n                    options=dict(\n                           verify_aud=False,\n                           verify_sub=False,\n                           verify_exp=False,\n                     )\n                )\n    … … … … … …\n    token_scopes = payload.get(\"scope\", \"\").split()\n\n    for scope in security_scopes.scopes:\n        if scope not in token_scopes:\n            raise AuthError(\n               {\n                 \"code\": \"Unauthorized\",\n                 \"description\": Invalid Keycloak details,\n               },403,\n            )\n    return payload\n```", "```py\ncurl --request POST                                      --url https://dev-fastapi1.us.auth0.com/oauth/token   --header\n'content-type: application/json'              --data \"{\"client_id\":\"KjdwFzHrOLXC3IKe kw8t6YhX4xUV1ZNd\",   \"client_secret\":\"_KyPEUOB7DA5Z3mmRXpnqWA3EXfrjLw2R5SoUW7m1wLMj7 KoElMyDLiZU8SgMQYr\",\"audience\":\"https://fastapi.auction.com/\",\"grant_type\":\"client_credentials\"}\"\n```", "```py\ncurl --location --request POST \"https://dev-5180227.okta.com/oauth2/default/v1/token?grant_type=client_credentials&client_id=0oa3tvejee5UPt7QZ5d7&client_secret=LA4WP8lACWKu4Ke9fReol0fNSUvxsxTvGLZdDS5-\"   --header \"Content-Type: application/x-www-form-urlencoded\"\n```", "```py\nclass UsernameAuthBackend(AuthenticationBackend):\n    def __init__(self, username): \n        self.username = username    \n\n    async def authenticate(self, request):\n        if \"Authorization\" not in request.headers:\n            return\n        auth = request.headers[\"Authorization\"]\n        try:\n            scheme, username = auth.split()\n            if scheme.lower().strip() != 'bearer'.strip():\n                return\n        except:\n            raise AuthenticationError(\n             'Invalid basic auth credentials')\n        if not username == self.username:\n            return\n\n        return AuthCredentials([\"authenticated\"]), \n             SimpleUser(username)\n```", "```py\nfrom security.secure import UsernameAuthBackend\nfrom starlette.middleware import Middleware\nfrom starlette.middleware.authentication import \n    AuthenticationMiddleware\nmiddleware = [Middleware(AuthenticationMiddleware, \n    backend=UsernameAuthBackend(\"sjctrags\"))]\napp = FastAPI(middleware=middleware)\n```"]