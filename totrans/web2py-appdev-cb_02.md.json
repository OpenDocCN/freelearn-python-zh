["```py\nfrom gluon.storage import Storage\nsettings = Storage()\n\nsettings.production = False\n\nif settings.production:\n\tsettings.db_uri = 'sqlite://production.sqlite'\n\tsettings.migrate = False\nelse:\n\tsettings.db_uri = 'sqlite://development.sqlite'\n\tsettings.migrate = True\n\nsettings.title = request.application\nsettings.subtitle = 'write something here'\nsettings.author = 'you'\nsettings.author_email = 'you@example.come'\nsettings.keywords = ''\nsettings.description = ''\nsettings.layout_theme = 'Default'\nsettings.security_key = 'a098c897-724b-4e05-b2d8-8ee993385ae6'\nsettings.email_server = 'localhost'\nsettings.email_sender = 'you@example.com'\nsettings.email_login = ''\nsettings.login_method = 'local'\nsettings.login_config = ''\n\n```", "```py\nfrom gluon.tools import *\n\ndb = DAL(settings.db_uri)\nif settings.db_uri.startswith('gae'):\n\tsession.connect(request, response, db = db)\n\nmail = Mail() \t\t\t# mailer\nauth = Auth(db) \t\t# authentication/authorization\ncrud = Crud(db) \t\t# for CRUD helpers using auth\nservice = Service() \t# for json, xml, jsonrpc, xmlrpc, amfrpc\nplugins = PluginManager()\n\n# enable generic views for all actions for testing purpose\nresponse.generic_patterns = ['*']\n\nmail.settings.server = settings.email_server\nmail.settings.sender = settings.email_sender\nmail.settings.login = settings.email_login\nauth.settings.hmac_key = settings.security_key\n\n# add any extra fields you may want to add to auth_user\nauth.settings.extra_fields['auth_user'] = []\n\n# user username as well as email\nauth.define_tables(migrate=settings.migrate,username=True)\nauth.settings.mailer = mail\nauth.settings.registration_requires_verification = False\nauth.settings.registration_requires_approval = False\n\nauth.messages.verify_email = 'Click on the link http://' \\\n\t+ request.env.http_host + URL('default','user',\n\targs=['verify_email']) \\\n\t+ '/%(key)s to verify your email'\n\nauth.settings.reset_password_requires_verification = True\n\nauth.messages.reset_password = 'Click on the link http://' \\\n\t+ request.env.http_host + URL('default','user',\n\targs=['reset_password']) \\\n\t+ '/%(key)s to reset your password'\n\nif settings.login_method=='janrain':\n\tfrom gluon.contrib.login_methods.rpx_account import RPXAccount\n\tauth.settings.actions_disabled=['register', 'change_password',\n\t\t'request_reset_password']\n\tauth.settings.login_form = RPXAccount(request,\n\t\tapi_key = settings.login_config.split(':')[-1],\n\t\tdomain = settings.login_config.split(':')[0],\n\t\turl = \"http://%s/%s/default/user/login\" % \\\n\t\t(request.env.http_host, request.application))\n\n```", "```py\ncd applications/app\ntar zcvf ../../welcome.w2p *\n\n```", "```py\n    # in file: models/db_custom.py\n\n    db.define_table('company',\n    \tField('name', notnull=True, unique=True),\n    \tformat='%(name)s')\n\n    db.define_table('contact',\n    \tField('name', notnull=True),\n    \tField('company', 'reference company'),\n    \tField('picture', 'upload'),\n    \tField('email', requires=IS_EMAIL()),\n    \tField('phone_number', requires=IS_MATCH('[\\d\\-\\(\\) ]+')),\n    \tField('address'),\n    \tformat='%(name)s')\n\n    db.define_table('log',\n    \tField('body', 'text',notnull=True),\n    \tField('posted_on', 'datetime'),\n    \tField('contact', 'reference contact'))\n\n    ```", "```py\n    # in file: controllers/default.py\n\n    def index():\n    \treturn locals()\n\n    def companies():\n    \tcompanies = db(db.company).select(orderby=db.company.name)\n    \treturn locals()\n\n    def contacts():\n    \tcompany = db.company(request.args(0)) or\n    \t\tredirect(URL('companies'))\n    \tcontacts = db(db.contact.company==company.id).select(\n    \t\torderby=db.contact.name)\n    \treturn locals()\n\n    @auth.requires_login()\n    def company_create():\n    \tform = crud.create(db.company, next='companies')\n    \treturn locals()\n\n    @auth.requires_login()\n    def company_edit():\n    \tcompany = db.company(request.args(0)) or\n    \t\tredirect(URL('companies'))\n    \tform = crud.update(db.company, company, next='companies')\n    \treturn locals()\n\n    @auth.requires_login()\n    def contact_create():\n    \tdb.contact.company.default = request.args(0)\n    \tform = crud.create(db.contact, next='companies')\n    \treturn locals()\n\n    @auth.requires_login()\n    def contact_edit():\n    \tcontact = db.contact(request.args(0)) or\n    \t\tredirect(URL('companies'))\n    \tform = crud.update(db.contact, contact, next='companies')\n    \treturn locals()\n\n    @auth.requires_login()\n    def contact_logs():\n    \tcontact = db.contact(request.args(0)) or\n    \t\tredirect(URL('companies'))\n    \tdb.log.contact.default = contact.id\n    \tdb.log.contact.readable = False\n    \tdb.log.contact.writable = False\n    \tdb.log.posted_on.default = request.now\n    \tdb.log.posted_on.readable = False\n    \tdb.log.posted_on.writable = False\n    \tform = crud.create(db.log)\n    \tlogs = db(\n    \t\tdb.log.contact==contact.id).select(orderby=db.log.posted_on)\n    \treturn locals()\n\n    def download(): return response.download(request, db)\n\n    def user(): return dict(form=auth())\n\n    ```", "```py\n    response.menu = [['Companies', False, URL('default',\n    \t'companies')]]\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Companies</h2>\n    <table>\n    \t{{for company in companies:}}\n    \t<tr>\n    \t\t<td>{{=A(company.name, _href=URL('contacts',\n    \t\t\targs=company.id))}}</td>\n    \t\t<td>{{=A('edit', _href=URL('company_edit',\n    \t\t\targs=company.id))}}</td>\n    \t</tr>\n    \t{{pass}}\n    \t<tr>\n    \t\t<td>{{=A('add company', _href=URL('company_create'))}}</td>\n    \t</tr>\n    </table>\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Contacts at {{=company.name}}</h2>\n    <table>\n    \t{{for contact in contacts:}}\n    \t<tr>\n    \t\t<td>{{=A(contact.name, _href=URL('contact_logs',\n    \t\t\targs=contact.id))}}</td>\n    \t\t<td>{{=A('edit', _href=URL('contact_edit',\n    \t\t\targs=contact.id))}}</td>\n    \t</tr>\n    \t{{pass}}\n    \t<tr>\n    \t\t<td>{{=A('add contact', _href=URL('contact_create',\n    \t\t\targs=company.id))}}</td>\n    \t</tr>\n    </table>\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>New company</h2>\n    {{=form}}\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>New contact</h2>\n    {{=form}}\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Edit company</h2>\n    {{=form}}\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Edit contact</h2>\n    {{=form}}\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Logs for contact {{=contact.name}}</h2>\n    <table>\n    \t{{for log in logs:}}\n    \t<tr>\n    \t\t<td>{{=log.posted_on}}</td>\n    \t\t<td>{{=MARKMIN(log.body)}}</td>\n    \t</tr>\n    \t{{pass}}\n    \t<tr>\n    \t\t<td></td>\n    \t\t<td>{{=form}}</td>\n    \t</tr>\n    </table>\n\n    ```", "```py\n# in file: models/db_reddit.py\ndb.define_table('category',\n\tField('name' ,notnull=True, unique=True),\n\tformat='%(name)s')\n\ndb.define_table('news',\n\tField('title', notnull=True),\n\tField('link', requires=IS_URL()),\n\tField('category', 'reference category', readable=False,\n\t\twritable=False),\n\tField('votes', 'integer', readable=False, writable=False),\n\tField('posted_on', 'datetime', readable=False, writable=False),\n\tField('posted_by', 'reference auth_user', readable=False, writable=False),\n\tformat='%(title)s')\n\ndb.define_table('comment',\n\tField('news', 'reference news', readable=False, writable=False),\n\tField('body', 'text', notnull=True),\n\tField('posted_on', 'datetime', readable=False, writable=False),\n\tField('posted_by', 'reference auth_user', readable=False,\n\t\twritable=False))\n\ndb.define_table('vote',\n\tField('news', 'reference news'),\n\tField('value', 'integer'),\n\tField('posted_on', 'datetime', readable=False, writable=False),\n\tField('posted_by', 'reference auth_user', readable=False,\n\t\twritable=False))\n\n```", "```py\n    def index():\n    \treturn locals()\n\n    def categories():\n    \tcategories = db(db.category).select(orderby=db.category.name)\n    \treturn locals()\n\n    def news():\n    \tcategory = db.category(request.args(0)) or\n    \t\tredirect(URL('categories'))\n    \tnews = db(db.news.category==category.id).select(\n    \t\torderby=~db.news.votes, limitby=(0, 25))\n    \treturn locals()\n\n    @auth.requires_membership('manager')\n    def category_create():\n    \tform = crud.create(db.category, next='categories')\n    \treturn locals()\n\n    @auth.requires_membership('manager')\n    def category_edit():\n    \tcategory = db.category(request.args(0)) or\n    \t\tredirect(URL('categories'))\n    \tform = crud.update(db.category, category, next='categories')\n    \treturn locals()\n\n    @auth.requires_login()\n    def news_create():\n    \tdb.news.category.default = request.args(0)\n    \tdb.news.votes.default = 0\n    \tform = crud.create(db.news, next='news_comments/[id]')\n    \treturn locals()\n\n    @auth.requires_login()\n    def news_edit():\n    \tnews = db.news(request.args(0)) or redirect(URL('categories'))\n    \tif not news.posted_by==auth.user.id:\n    \t\tredirect(URL('not_authorized'))\n    \tform = crud.update(db.news, category, next='news_comments/[id]')\n    \treturn locals()\n\n    def news_comments():\n    \tnews = db.news(request.args(0)) or redirect(URL('categories'))\n    \tif auth.user:\n    \t\tdb.comment.news.default = news.id\n    \t\tdb.comment.posted_on.default = request.now\n    \t\tdb.comment.posted_by.default = auth.user.id\n    \t\tform = crud.create(db.comment)\n    \tcomments = db(db.comment.news==news.id).select(\n    \t\torderby=db.comment.posted_on)\n    \treturn locals()\n\n    @auth.requires_login()\n    def vote():\n    \tif not request.env.request_method=='POST': raise HTTP(400)\n    \tnews_id, mode = request.args(0), request.args(1)\n    \tnews = db.news(id=news_id)\n    \tvote = db.vote(posted_by=auth.user.id, news=news_id)\n    \tvotes = news.votes\n    \tvalue = (mode=='plus') and +1 or -1\n    \tif vote and value*vote.value==1:\n    \t\tmessage = 'you voted already'\n    \telse:\n    \t\tif vote:\n    \t\t\tvotes += value - vote.value\n    \t\t\tvote.update_record(value=value)\n    \t\telse:\n    \t\t\tvotes += value\n    \t\t\tdb.vote.insert(value=value, posted_by=auth.user.id,\n    \t\t\t\tposted_on=request.now, news=news_id)\n    \t\t\tnews.update_record(votes=votes)\n    \t\t\tmessage = 'vote recorded'\n    \t\treturn \"jQuery('#votes').html('%s');jQuery('.flash').\\\n    \t\t\thtml('%s').slideDown();\" % (votes, message)\n\n    ```", "```py\n    # in file: models/menu.py\"\n    categories = db(db.category).select(orderby=db.category.name,\n    \tcache=(cache.ram, 60))\n    response.menu = [(c.name, False, URL('default', 'news',\n    \targs=c.id)) for c in categories]\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Categories</h2>\n    <table>\n    \t{{for category in categories:}}\n    \t<tr>\n    \t\t<td>{{=A(category.name, _href=URL('news',\n    \t\t\targs=category.id))}}</td>\n    \t\t<td>{{=A('edit', _href=URL('category_edit',\n    \t\t\targs=category.id))}}\n    \t\t</td>\n    \t</tr>\n    \t{{pass}}\n    \t<tr>\n    \t\t<td>{{=A('add category', _href=URL('category_create'))}}</td>\n    \t</tr>\n    </table>\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>News at {{=category.name}}</h2>\n    <table>\n    \t{{for news in news:}}\n    \t<tr>\n    \t\t<td>{{=A(news.title, _href=news.link)}}</td>\n    \t\t<td>{{=A('comments', _href=URL('news_comments',\n    \t\t\targs=news.id))}}\n    \t\t</td>\n    \t\t<td>{{=A('edit', _href=URL('news_edit', args=news.id))}}</td>\n    \t</tr>\n    \t{{pass}}\n    \t<tr>\n    \t\t<td>{{=A('post news item', _href=URL('news_create',\n    \t\t\targs=category.id))}}\n    \t\t</td>\n    \t\t<td></td>\n    \t</tr>\n    </table>\n\n    ```", "```py\n        {{extend 'layout.html'}}\n        <h2>New category</h2>\n        {{=form}}\n\n        ```", "```py\n        {{extend 'layout.html'}}\n        <h2>Post news item</h2>\n        {{=form}}\n\n        ```", "```py\n        {{extend 'layout.html'}}\n        <h2>Edit category</h2>\n        {{=form}}\n\n        ```", "```py\n        {{extend 'layout.html'}}\n        <h2>Edit news item</h2>\n        {{=form}}\n\n        ```", "```py\n        {{extend 'layout.html'}}\n        <h2>Comments for {{=A(news.title, _href=news.link)}}</h2>\n        {{if auth.user:}}\n        \t<span id=\"votes\">{{=news.votes}}</span>\n        \t<button id=\"plus\"\n        \t\tonclick=\"ajax('{{=URL('vote', args=(news.id, 'plus'))}}', [], ':eval')\">\n        \t\tplus\n        \t</button>\n\n        \t<button id=\"minus\"\n        \t\tonclick=\"ajax('{{=URL('vote', args=(news.id, 'minus'))}}', [],\n        \t\t':eval')\">\n        \t\tminus\n        \t</button>\n        \t{{=form}}\n        {{pass}}\n        <table>\n        \t{{for comment in comments:}}\n        \t<tr>\n        \t\t<td>{{=comment.posted_on}}</td>\n        \t\t<td>{{=comment.posted_by.first_name}} says </td>\n        \t\t<td>{{=MARKMIN(comment.body)}}</td>\n        \t</tr>\n        {{pass}}\n        </table>\n\n        ```", "```py\n        <button id=\"plus\"\n        \tonclick=\"ajax('{{=URL('vote', args=(news.id, 'plus'))}}', [],\n        \t':eval')\">\n        \tplus\n        </button>\n\n        ```", "```py\n        def vote():\n        \t...\n        \treturn\n        \t\t\"jQuery('#votes').html('%s');jQuery('.flash').\n        \t\thtml('%s').slideDown();\" % (votes, message)\n\n        ```", "```py\n    <span id=\"votes\">{{=news.votes}}</span>\n\n    ```", "```py\n    # in file: models:\n\n    # a table to store posted messages\n    db.define_table('post',\n    \tField('body', 'text', requires=IS_NOT_EMPTY(), label='What is on\n    \t\tyour mind?'),\n    \tField('posted_on', 'datetime', readable=False, writable=False),\n    \tField('posted_by', 'reference auth_user', readable=False,\n    \t\twritable=False))\n\n    # a table to link two people\n    db.define_table('link',\n    \tField('source', 'reference auth_user'),\n    \tField('target', 'reference auth_user'),\n    \tField('accepted', 'boolean', default=False))\n\n    # and define some global variables that will make code more\n    compact\n\n    User, Link, Post = db.auth_user, db.link, db.post\n    me, a0, a1 = auth.user_id, request.args(0), request.args(1)\n    myfriends = db(Link.source==me)(Link.accepted==True)\n    alphabetical = User.first_name|User.last_name\n    def name_of(user): return '%(first_name)s %(last_name)s' % user\n\n    ```", "```py\n    {{=name_of(user)}}\n\n    ```", "```py\n    # in file: controllers/default.py\n    def index():\n    \tif auth.user: redirect(URL('home'))\n    \treturn locals()\n\n    def user():\n    \treturn dict(form=auth())\n\n    def download():\n    \treturn response.download(request, db)\n\n    def call():\n    \tsession.forget()\n    \treturn service()\n\n    # our home page, will show our posts and posts by friends\n    @auth.requires_login()\n    def home():\n    \tPost.posted_by.default = me\n    \tPost.posted_on.default = request.now\n    \tcrud.settings.formstyle = 'table2cols'\n    \tform = crud.create(Post)\n    \tfriends = [me]+[row.target for row in\n    \t\tmyfriends.select(Link.target)]\n    \tposts = db(Post.posted_by.belongs(friends))\\\n    \t\t.select(orderby=~Post.posted_on, limitby=(0, 100))\n    \treturn locals()\n\n    # our wall will show our profile and our own posts\n    @auth.requires_login()\n    def wall():\n    \tuser = User(a0 or me)\n    \tif not user or not (user.id==me or \\\n    \t\tmyfriends(Link.target==user.id).count()):\n    \t\tredirect(URL('home'))\n    \tposts = db(Post.posted_by==user.id)\\\n    \t\t.select(orderby=~Post.posted_on, limitby=(0, 100))\n    \treturn locals()\n\n    # a page for searching friends and requesting friendship\n    @auth.requires_login()\n    def search():\n    \tform = SQLFORM.factory(Field('name', requires=IS_NOT_EMPTY()))\n    \tif form.accepts(request):\n    \t\ttokens = form.vars.name.split()\n    \t\tquery = reduce(lambda a,b:a&b,\n    \t\t[User.first_name.contains(k)|User.last_name.contains(k) \\\n    \t\tfor k in tokens])\n    \t\t\tpeople = db(query).select(orderby=alphabetical)\n    \t\telse:\n    \t\t\tpeople = []\n    \treturn locals()\n\n    # a page for accepting and denying friendship requests\n    @auth.requires_login()\n    def friends():\n    \tfriends = db(User.id==Link.source)(Link.target==me)\\\n    \t\t.select(orderby=alphabetical)\n    \trequests = db(User.id==Link.target)(Link.source==me)\\\n    \t\t.select(orderby=alphabetical)\n    \treturn locals()\n\n    # this is the Ajax callback\n    @auth.requires_login()\n    def friendship():\n    \t\"\"\"Ajax callback!\"\"\"\n    \tif request.env.request_method != 'POST': raise HTTP(400)\n    \tif a0=='request' and not Link(source=a1, target=me):\n    \t\t# insert a new friendship request\n    \t\tLink.insert(source=me, target=a1)\n    \telif a0=='accept':\n    \t\t# accept an existing friendship request\n    \t\tdb(Link.target==me)(Link.source==a1).update(accepted=True)\n    \tif not db(Link.source==me)(Link.target==a1).count():\n    \t\tLink.insert(source=me, target=a1)\n    \telif a0=='deny':\n    \t\t# deny an existing friendship request\n    \t\tdb(Link.target==me)(Link.source==a1).delete()\n    \telif a0=='remove':\n    \t\t# delete a previous friendship request\n    \t\tdb(Link.source==me)(Link.target==a1).delete()\n\n    ```", "```py\n    # in file: models/menu.py\n    response.menu = [\n    \t(T('Home'), False, URL('default', 'home')),\n    \t(T('Wall'), False, URL('default', 'wall')),\n    \t(T('Friends'), False, URL('default', 'friends')),\n    \t(T('Search'), False, URL('default', 'search')),\n    ]\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    {{=form}}\n    <script>jQuery('textarea').css('width','600px').\n    \tcss('height','50px');</script>\n    {{for post in posts:}}\n    <div style=\"background: #f0f0f0; margin-bottom: 5px; padding:\n    \t8px;\">\n    \t<h3>{{=name_of(post.posted_by)}} on {{=post.posted_on}}:</h3>\n    \t{{=MARKMIN(post.body)}}\n    </div>\n    {{pass}}\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Profile</h2>\n    {{=crud.read(db.auth_user, user)}}\n    <h2>Messages</h2>\n    {{for post in posts:}}\n    <div style=\"background: #f0f0f0; margin-bottom: 5px; padding:\n    \t8px;\">\n    \t<h3>{{=name_of(post.posted_by)}} on {{=post.posted_on}}:</h3>\n    \t{{=MARKMIN(post.body)}}\n    </div>\n    {{pass}}\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Search for friends</h2>\n    {{=form}}\n    {{if people:}}\n    <h3>Results</h3>\n    <table>\n    \t{{for user in people:}}\n    \t<td>\n    \t\t{{=A(name_of(user), _href=URL('wall', args=user.id))}}\n    \t</td>\n    \t<td>\n    \t\t<button onclick=\"ajax(\n    \t\t\t'{{=URL('friendship', args=('request', user.id))}}',\n    \t\t\t[], null);\n    \t\t\tjQuery(this).parent().html('pending')\">\n    \t\t\trequest friendship\n    \t\t</button>\n    \t</td>\n    \t{{pass}}\n    </table>\n    {{pass}}\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h2>Friendship Offered</h2>\n    <table>\n    \t{{for friend in friends:}}\n    \t<tr>\n    \t\t<td>\n    \t\t\t{{=A(name_of(friend.auth_user), _href=URL('wall', args=friend.auth_user.id))}}\n    \t\t</td>\n    \t\t<td>\n    \t\t\t{{if friend.link.accepted:}}accepted{{else:}}\n    \t\t\t\t<button onclick=\"ajax(\n    \t\t\t\t\t'{{=URL('friendship', args=('accept',\n    \t\t\t\t\tfriend.auth_user.id))}}',\n    \t\t\t\t\t[], null);\n    \t\t\t\t\tjQuery(this).parent().html('accepted')\">\n    \t\t\t\t\taccept\n    \t\t\t\t</button>\n    \t\t\t{{pass}}\n    \t\t</td>\n    \t\t<td>\n    \t\t\t<button onclick=\"ajax(\n    \t\t\t\t'{{=URL('friendship', args=('deny',\n    \t\t\t\tfriend.auth_user.id))}}',\n    \t\t\t\t[], null);\n    \t\t\t\tjQuery(this).parent().html('denied')\">\n    \t\t\t\tdeny\n    \t\t\t</button>\n    \t\t</td>\n    \t</tr>\n    \t{{pass}}\n    </table>\n    <h2>Friendship Requested</h2>\n    <table>\n    \t{{for friend in requests:}}\n    \t<tr>\n    \t\t<td>\n    \t\t\t{{=A(name_of(friend.auth_user), _href=URL('wall',\n    \t\t\t\targs=friend.auth_user.id))}}\n    \t\t</td>\n    \t\t<td>\n    \t\t\t{{if friend.link.accepted:}}accepted{{else:}}\n    pending{{pass}}\n    \t\t</td>\n    \t\t<td>\n    \t\t\t<button onclick=\"ajax(\n    \t\t\t\t'{{=URL('friendship', args=('deny',\n    \t\t\t\tfriend.auth_user.id))}}',\n    \t\t\t\t[], null);\n    \t\t\t\tjQuery(this).parent().html('removed')\">\n    \t\t\t\tremove\n    \t\t\t</button>\n    \t\t</td>\n    \t</tr>\n    \t{{pass}}\n    </table>\n\n    ```", "```py\nform = crud.update(db.mytable, myrecord,\n\tonaccept=crud.archive,\n\tdeletable=False)\n\n```", "```py\ndb.define_table('mytable_archive',\n\tField('current_record', db.mytable),\n\tdb.mytable)\n\n```", "```py\ndb.define_table('mytable',\n\t...\n\tauth.signature)\n\n```", "```py\nField('is_active', 'boolean', default=True),\nField('created_on', 'datetime', default=request.now,\n\twritable=False, readable=False),\nField('created_by', db.auth_user, default=auth.user_id, writable=False, readable=False),\nField('modified_on', 'datetime',\n\tupdate=default.now, default=request.now,\n\twritable=False, readable=False),\nField('modified_by', db.table_user,\n\tdefault=auth.user_id, update=auth.user_id,\n\twritable=False, readable=False)\n\n```", "```py\ndb.mytable.is_active==True\n\n```", "```py\n    page.html\n    image.png\n\n    ```", "```py\n    controllers/legacy.py\n    views/legacy/page.html\n    static/image.png\n\n    ```", "```py\n    def page(): return dict()\n\n    ```", "```py\n    <img src=\"img/{{=URL('static', 'image.png')}}\"/>\n\n    ```", "```py\ndef about(): return dict()\n\n```", "```py\n    LANGUAGES = ('en', 'es', 'pt', 'fr', 'hi', 'hu', 'it', 'pl', 'ru')\n    FLATPAGES_ADMIN = 'you@example.com'\n    DEFAULT_FLATPAGE_VIEW = \"flatpage.html\"\n    db.define_table('flatpage',\n    \tField('title', notnull=True),\n    \tField('subtitle', notnull=True),\n    \tField('c', label='controller'),\n    \tField('f', label='function'),\n    \tField('args', label='arguments'),\n    \tField('view', default=DEFAULT_FLATPAGE_VIEW),\n    \tField('lang', requires=IS_IN_SET(LANGUAGES), default='en'),\n    \tField('body', 'text', default=''),\n    \tauth.signature,\n    )\n\n    ```", "```py\n    if not db(db.flatpage).count():\n    \tdb.flatpage.insert(title=\"Home\", subtitle=\"Main Index\",\n    \t\tc=\"default\", f='index', body=\"<h3>Hello world!</h3>\")\n    \tdb.flatpage.insert(title=\"About us\", subtitle=\"The company\",\n    \t\tc=\"company\", f='about_us', body=\"<h3>My company!</h3>\")\n    \tdb.flatpage.insert(title=\"Mision & Vision\", subtitle=\"The company\",\n    \t\tc=\"company\", f='mision_vision', body=\"<h3> Our vision is...</h3>\")\n    \tdb.flatpage.insert(title=\"Our Team\", subtitle=\"Who we are\",\n    \t\tc=\"company\", f='our_team', body=\"<h1>We are...</h3>\") db.flatpage.insert(title=\"Contact Us\", subtitle=\"Where we are\", c=\"company\", f='contact_us', body=\"<h3>Contact form:...</h3>\")\n\n    ```", "```py\n    Home: Hello world\n    About Us\n    \tThe Company : My company!\n    Mission & Vision: Our vision is...\n    Our Team: We are...\n    Contact Us: Contact Form:...\n\n    ```", "```py\n    def flatpage():\n    \t# define languages that don't need translation:\n    \tT.current_languages = ['en', 'en-en']\n\n    \t# select user specified language (via session or browser config)\n    \tif session.lang:\n    \t\tlang = session.lang\n    \telif T.accepted_language is not None:\n    \t\tlang = T.accepted_language[:2]\n    \telse:\n    \t\tlang = \"en\"\n    \t\tT.force(lang)\n\n    title = subtitle = body = \"\"\n    flatpage_id = None\n    form = ''\n    view = DEFAULT_FLATPAGE_VIEW\n\n    if request.vars and auth.user and\n    \tauth.user.email==FLATPAGES_ADMIN:\n    \t# create a form to edit the page:\n    \trecord = db.flatpage(request.get_vars.id)\n    \tform = SQLFORM(db.flatpage, record)\n    if form.accepts(request, session):\n    \tresponse.flash = T(\"Page saved\")\n    elif form.errors:\n    \tresponse.flash = T(\"Errors!\")\n    else:\n    \tresponse.flash = T(\"Edit Page\")\n\n    if not form:\n    \t# search flatpage according to the current request\n    \tquery = db.flatpage.c==request.controller\n    \tquery &= db.flatpage.f==request.function\n    if request.args:\n    \tquery &= db.flatpage.args==request.args(0)\n    else:\n    \tquery &= (db.flatpage.args==None)|(db.flatpage.args=='')\n    \tquery &= db.flatpage.lang==lang\n    \t# execute the query, fetch one record (if any)\n    \tflatpage =\n    \t\tdb(query).select(orderby=~db.flatpage.created_on,\n    \tlimitby=(0, 1), cache=(cache.ram, 60)).first()\n    if flatpage:\n    \tflatpage_id = flatpage.id\n    \ttitle = flatpage.title\n    \tsubtitle = flatpage.subtitle\n    \tbody = flatpage.body\n    \tview = flatpage.view\n    else:\n    \tresponse.flash = T(\"Page Not Found!\")\n    if auth.user and auth.user.email==FLATPAGES_ADMIN:\n    \t# if user is authenticated, show edit button:\n    \tform = A(T('edit'),\n    \t\t_href=URL(vars=dict(id=flatpage_id)))\n\n    # render the page:\n    response.title = title\n    response.subtitle = subtitle\n    response.view = view\n    body = XML(body)\n    return dict(body=body, form=form)\n\n    ```", "```py\n    {{extend 'layout.html'}}\n    <h1>{{=response.title}}</h1>\n    <h2>{{=response.subtitle}}</h2>\n    {{=form}}\n    {{=body}}\n\n    ```", "```py\n    def index(): return flatpage()\n\n    ```", "```py\n    def about_us(): return flatpage()\n    def mision_vision(): return flatpage()\n    def our_team(): return flatpage()\n\n    ```", "```py\n    <div id=\"header\"> <!-- header and login nav -->\n    \t{{block header}} <!-- this is default header -->\n    \t{{try:}}{{=auth.navbar(action=URL('default',\n    \t\t'user'))}}{{except:pass}}\n    \t<h1>\n    \t\t<span id=\"appname\">\n    \t\t\t{{=request.application.capitalize()}}\n    \t\t</span>\n    \t\tApp\n    \t</h1>\n    \t<div style=\"clear: both;\"></div><!-- Clear the divs -->\n    \t{{end}}\n    </div><!-- header -->\n\n    ```", "```py\n    {{try:}}{{=auth.navbar(action=URL('default',\n    \t'user'))}}{{except:pass}}\n\n    ```", "```py\n    <h1>\n    \t<span id=\"appname\">\n    \t\t{{=request.application.capitalize()}}\n    \t</span>\n    \tApp\n    </h1>\n\n    ```", "```py\n    {{=IMG(_src=URL('static', 'images/mylogoapp.png'), _style=\"width:\n    \t100%;\")}}\n\n    ```", "```py\n    <div id=\"header\"> <!-- header and login nav -->\n    \t{{block header}} <!-- this is default header -->\n    \t{{try:}}{{=auth.navbar(action=URL('default',\n    \t\t'user'))}}{{except:pass}}\n    \t{{=IMG(_src=URL('static', 'images/mylogoapp.png'))}}\n    \t<div style=\"clear: both;\"></div><!-- Clear the divs -->\n    \t{{end}}\n    </div><!-- header -->\n\n    ```", "```py\n    {{=A(IMG(_src=URL('static', 'images/mylogoapp.png')),\n    \t_href=URL('default', 'index'))}}\n\n    ```", "```py\nresponse.menu = [\n\t('Home', URL()==URL('default', 'home'), URL('default', 'home'),\n\t\t[]),\n\t('Search', URL()==URL('default', 'search'), URL('default',\n\t\t'search'), []),\n]\n\n```", "```py\n    response.menu = [\n    \t('Home', URL()==URL('default', 'home'), URL('default', 'home'),\n    \t\t[]),\n    \t('Search', False, None,\n    \t\t[\n    \t\t\t('Local', URL()==URL('default', 'search'), URL('default',\n    \t\t\t\t'search')),\n    \t\t\t('Google', False, 'http://google.com'),\n    \t\t\t('Bing', False, 'http://bing.com'),\n    \t\t]\n    \t),\n    ]\n\n    ```", "```py\n    response.menu = [\n    \t(T('Home'), URL()==URL('default', 'home'), URL('default',\n    \t\t'home'), []),\n    ]\n\n    ```", "```py\n    response.menu = [\n    \t('Home', False, URL('default', 'home'), []),\n    \t\t...]\n\n    ```", "```py\n    response.menu = [\n    \t(A('Home', _href=URL('default', 'home')), False, None, []),\n    \t\t...]\n\n    ```", "```py\n    response.menu = [\n    \t(A(IMG(_src=URL('static', 'home.png'), _href=URL('default',\n    \t\t'home'))), False, None, []),\n    \t\t\t...\n    ]\n\n    ```", "```py\n    response.menu = [\n    \t(SPAN(IMG(_src=URL('static', 'home.png')),\t\n    \t\tA('home', _href=URL('default', 'home'))), False, None, []),\n    \t\t\t...\n    ]\n\n    ```", "```py\n    def item(name):\n    \treturn SPAN(IMG(_src=URL('static', name+'.png')), A(name,\n    \t_href=URL('default', name)))\n\n    response.menu = [\n    \t(item(home), False, None, []),\n    \t...\n\n    ```", "```py\n    db.define_table('navbar',\n    \tField(\"title\", \"string\"),\n    \tField(\"url\", \"string\", requires=IS_EMPTY_OR(IS_URL())),\n    \tField(\"c\", label=\"Controller\"),\n    \tField(\"f\", label=\"Function\"),\n    \tField(\"args\", label=\"Arguments\"),\n    \tField(\"sortable\", \"integer\"),\n    \tField(\"parent_id\", \"reference navbar\"),\n    \tformat=\"%(title)s\",\n    )\n\n    ```", "```py\n    if not db(db.navbar).count():\n    \t# create default index entry:\n    \thome_id = db.navbar.insert(title=\"Home\", c=\"default\")\n\n    \t# create a \"Company\" leaf with typical options:\n    \tcompany_id = db.navbar.insert(title=\"Company\", c=\"company\")\n    \tdb.navbar.insert(title=\"About Us\", f='about_us',\n    \t\tparent_id=company_id)\n    \tdb.navbar.insert(title=\"Mision & Vision\", f='mision_vision',\n    \t\tparent_id=company_id)\n    \tdb.navbar.insert(title=\"Our Team\", f='our_team',\n    \t\tparent_id=company_id)\n\n    \tproducts_id = db.navbar.insert(title=\"Products\", c=\"products\")\n    \t# Add some \"Computers models\" to products entry:\n    \tcomputers_id = db.navbar.insert(title=\"Computers\",\n    \t\tf='computers', parent_id=products_id)\n    \tfor model in 'basic', 'pro', 'gamer':\n    \t\tdb.navbar.insert(title=\"Model %s\" % model, args=model,\n    \t\t\tparent_id=computers_id)\n\n    ```", "```py\n    Home\n    Company\n    \tAbout Us\n    \tMission & Vision\n    \tOur Team\n    Products\n    \tComputers\n    \t\tModel basic\n    \t\tModel pro\n    \t\tModel gamer\n\n    ```", "```py\n    def get_sub_menus(parent_id, default_c=None, default_f=None):\n    \tchildren = db(db.navbar.parent_id==parent_id)\n    \tfor menu_entry in children.select(orderby=db.navbar.sortable):\n    \t\t# get action or use defaults:\n    \t\tc = menu_entry.c or default_c\n    \t\tf = menu_entry.f or default_f\n    \t# is this entry selected? (current page)\n    \tsel = (request.controller==c and request.function==f and\n    \t\t(request.args and request.args==menu_entry.args or True))\n    \t# return each menu item\n    \tyield (T(menu_entry.title),\n    \tsel, menu_entry.url or URL(c, f, args=menu_entry.args),\n    \tget_sub_menus(menu_entry.id, c, f)\n    )\n\n    ```", "```py\n    response.menu = get_sub_menus(parent_id=None)\n\n    ```", "```py\n    response.menu = cache.ram('navbar_menu', lambda:\n    \tget_sub_menus(parent_id=None), time_expire=60)\n\n    ```", "```py\n{{=MENU(response.menu, _class='sf-menu')}}\n\n```", "```py\nT.set_current_languages('en', 'en-en')\n\n```", "```py\nT.force('it-it')\n\n```", "```py\n    if 'all_lang' in request.cookies and not\n    \t(request.cookies['all_lang'] is None):\n    \tT.force(request.cookies['all_lang'].value)\n\n    ```", "```py\n    <span>\n    \t<script>\n    \t\tfunction set_lang(lang) {\n    \t\t\tvar date = new Date();\n    \t\t\tcookieDate=date.setTime(date.getTime()+(100*24*60*60*1000));\n    \t\t\tdocument.cookie='all_lang='+lang+';expires='+cookieDate+';\n    \t\t\t\tpath=/{{=request.application}}';\n    \t\t\twindow.location.reload();\n    \t\t};\n    \t</script>\n    \t<select name=\"adminlanguage\"\n    \t\tonchange=\"set_lang(jQuery(this).val())\">\n    \t\t{{for language in T.get_possible_languages():}}\n    \t\t<option {{=T.accepted_language==language and 'selected' or\n    \t\t\t''}}>\n    \t\t\t{{=T(language)}}\n    \t\t</option>\n    \t\t{{pass}}\n    \t</select>\n    </span>\n\n    ```", "```py\n    <span>\n    \t<script>\n    \t\tfunction set_lang(lang) {\n    \t\t\tvar date = new Date();\n    \t\t\tcookieDate=date.setTime(date.getTime()+(100*24*60*60*1000));\n    \t\t\tdocument.cookie='all_lang='+lang+';expires='+cookieDate+';\n    \t\t\t\tpath=/{{=request.application}}';\n    \t\t\twindow.location.reload();\n    \t\t\treturn false;\n    \t\t};\n    \t</script>\n    \t\t{{for language in T.get_possible_languages():}} {{if not T.accepted_language==language:}}\n    \t\t\t<a href=\"#\" onclick=\"set_lang('{{=language}}')\">\n    \t\t\t\t{{=T(language)}}\n    \t\t\t</a>\n    \t\t\t{{else:}}{{=T(language)}}{{pass}}{{pass}}\n    \t</select>\n    </span>\n\n    ```", "```py\npath=/{{=request.application}}\n\n```", "```py\npath=/\n\n```", "```py\ndb.define_table('mytable',\n\tField('name'),\n\tField('quantity','integer'))\n\n```", "```py\n    def index():\n    \t\"index will load the list and the create/edit forms as\n    \tcomponents\"\n    \treturn dict()\n\n    def list_items():\n    \t\"\"\" shows a list of items that were created\n    \teach items is clickable and can be edited \"\"\"\n       rows = db(db.mytable.id>0).select()\n    \treturn dict(rows=rows)\n\n    def edit_item():\n    \t\"\"\" return a creation form if no item is specified,\n    \treturn an edit form if the item is known \"\"\"\n    \tdef display_changed(data):\n    \t\tresponse.ajax = \\\n    \t\t'web2py_component(\"%s\",\"show_itemlist\")' % URL('showitems')\n    \tform = crud.update(db.mytable,\n    \t\trequest.args(0),onaccept=display_changed)\n    \treturn form\n\n    ```", "```py\n    {{=LOAD('default', 'list_items', ajax = True, target =\n    'showitems')}}\n    {{=A('create',component=URL('edit_item'),target='placeholder')}}\n    <div id=\"placeholder\"></div>\n\n    ```", "```py\n    <ul>\n    \t{{for item in rows:}}\n    \t\t{{=LI(A('edit %s' % item.name,\n    \t\t\tcomponent=URL('edit_item',args=item.id),\n    \t\t\ttarget='placeholder'))}}\n    \t{{pass}}\n    </ul>\n\n    ```", "```py\nExpires: Thu, 27 May 2010 05:06:44 GMT\nPragma: no-cache\nCache-Control: no-store, no-cache, must-revalidate, post-check=0,\npre-check=0\n\n```", "```py\n    Last-Modified: Tue, 04 May 2010 19:41:16 GMT\n\n    ```", "```py\n    Expires removed\n    Pragma removed\n    Cache-control removed\n\n    ```", "```py\n    def fast_download():\n    \tfilename = request.args(0)\n    \tif not qualify_for_fast_download(filename)\n    \t\treturn download()\n    \telse:\n    \t\tdel response.headers['Cache-Control']\n    \t\tdel response.headers['Pragma']\n    \t\tdel response.headers['Expires']\n    \t\tfilepath = os.path.join(request.folder, 'uploads', filename)\n    \t\tresponse.headers['Last-Modified'] = \\\n    \t\t\ttime.strftime(\"%a, %d %b %Y %H:%M:%S +0000\",\n    \t\t\ttime.localtime(os.path.getmtime(filename)))\n    \t\treturn response.stream(open(filepath, 'rb'))\n\n    ```", "```py\n    qualify_for_fast_download(filename)\n\n    ```", "```py\n    URL('fast_download', args='filename')\n\n    ```", "```py\nAliasMatch ^/([^/]+)/static/(mytable\\.myfield.*) \\\n\t/home/www-data/web2py/applications/$1/static/$2\n<Directory /home/www-data/web2py/applications/*/static/>\n\tOptions -Indexes\n\tOrder Allow,Deny\n\tAllow from all\n</Directory>\n\n```"]