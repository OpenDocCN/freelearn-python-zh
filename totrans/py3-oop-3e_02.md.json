["```py\nclass MyFirstClass: \n    pass \n```", "```py\n>>> a = MyFirstClass()\n>>> b = MyFirstClass()\n>>> print(a)\n<__main__.MyFirstClass object at 0xb7b7faec>\n>>> print(b)\n<__main__.MyFirstClass object at 0xb7b7fbac>\n>>>  \n```", "```py\nclass Point: \n    pass \n\np1 = Point() \np2 = Point() \n\np1.x = 5 \np1.y = 4 \n\np2.x = 3 \np2.y = 6 \n\nprint(p1.x, p1.y) \nprint(p2.x, p2.y) \n```", "```py\n5 4\n3 6\n```", "```py\nclass Point: \n def reset(self): \n        self.x = 0 \n        self.y = 0 \n\np = Point() \np.reset() \nprint(p.x, p.y) \n```", "```py\n0 0  \n```", "```py\n>>> p = Point() \n>>> Point.reset(p) \n>>> print(p.x, p.y) \n```", "```py\n>>> class Point:\n... def reset():\n... pass\n...\n>>> p = Point()\n>>> p.reset()\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nTypeError: reset() takes 0 positional arguments but 1 was given\n```", "```py\nimport math\n\nclass Point:\n def move(self, x, y):\n        self.x = x\n        self.y = y\n\n    def reset(self):\n        self.move(0, 0)\n\n def calculate_distance(self, other_point):\n        return math.sqrt(\n            (self.x - other_point.x) ** 2\n            + (self.y - other_point.y) ** 2\n        )\n\n# how to use it:\npoint1 = Point()\npoint2 = Point()\n\npoint1.reset()\npoint2.move(5, 0)\nprint(point2.calculate_distance(point1))\nassert point2.calculate_distance(point1) == point1.calculate_distance(\n    point2\n)\npoint1.move(3, 4)\nprint(point1.calculate_distance(point2))\nprint(point1.calculate_distance(point1))\n```", "```py\n5.0\n4.47213595499958\n0.0  \n```", "```py\n>>> point = Point()\n>>> point.x = 5\n>>> print(point.x)\n5\n>>> print(point.y)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nAttributeError: 'Point' object has no attribute 'y' \n```", "```py\nclass Point: \n def __init__(self, x, y): \n        self.move(x, y) \n\n    def move(self, x, y): \n        self.x = x \n        self.y = y \n\n    def reset(self): \n        self.move(0, 0) \n\n# Constructing a Point \npoint = Point(3, 5) \nprint(point.x, point.y) \n```", "```py\nclass Point: \n    def __init__(self, x=0, y=0): \n        self.move(x, y) \n```", "```py\nimport math\n\nclass Point:\n    \"Represents a point in two-dimensional geometric coordinates\"\n\n    def __init__(self, x=0, y=0):\n        \"\"\"Initialize the position of a new point. The x and y\n           coordinates can be specified. If they are not, the\n           point defaults to the origin.\"\"\"\n        self.move(x, y)\n\n    def move(self, x, y):\n        \"Move the point to a new location in 2D space.\"\n        self.x = x\n        self.y = y\n\n    def reset(self):\n        \"Reset the point back to the geometric origin: 0, 0\"\n        self.move(0, 0)\n\n    def calculate_distance(self, other_point):\n        \"\"\"Calculate the distance from this point to a second\n        point passed as a parameter.\n\n        This function uses the Pythagorean Theorem to calculate\n        the distance between the two points. The distance is\n        returned as a float.\"\"\"\n\n        return math.sqrt(\n            (self.x - other_point.x) ** 2\n            + (self.y - other_point.y) ** 2\n        )\n```", "```py\nimport database \ndb = database.Database() \n# Do queries on db \n```", "```py\nfrom database import Database \ndb = Database() \n# Do queries on db \n```", "```py\nfrom database import Database as DB \ndb = DB() \n# Do queries on db \n```", "```py\nfrom database import Database, Query \n```", "```py\nfrom database import * \n```", "```py\nparent_directory/ \n    main.py \n    ecommerce/ \n        __init__.py \n        database.py \n        products.py \n        payments/ \n            __init__.py \n            square.py \n            stripe.py \n```", "```py\nimport ecommerce.products \nproduct = ecommerce.products.Product() \n\n//or\n\nfrom ecommerce.products import Product \nproduct = Product() \n\n//or\n\nfrom ecommerce import products \nproduct = products.Product() \n```", "```py\nfrom .database import Database \n```", "```py\nfrom ..database import Database \n```", "```py\nfrom ..contact.email import send_mail \n```", "```py\nfrom .database import db \n```", "```py\nfrom ecommerce import db \n```", "```py\nclass Database: \n    # the database implementation \n    pass \n\ndatabase = Database() \n```", "```py\nfrom ecommerce.database import database \n```", "```py\nclass Database: \n    # the database implementation \n    pass \n\ndatabase = None \n\ndef initialize_database(): \n    global database \n    database = Database() \n```", "```py\nclass UsefulClass:\n    \"\"\"This class might be useful to other modules.\"\"\"\n\n    pass\n\ndef main():\n    \"\"\"Creates a useful class and does something with it for our module.\"\"\"\n    useful = UsefulClass()\n    print(useful)\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\ndef format_string(string, formatter=None):\n    \"\"\"Format a string using the formatter object, which \n    is expected to have a format() method that accepts \n    a string.\"\"\"\n\n    class DefaultFormatter:\n        \"\"\"Format a string in title case.\"\"\"\n\n        def format(self, string):\n            return str(string).title()\n\n    if not formatter:\n        formatter = DefaultFormatter()\n\n    return formatter.format(string)\n\nhello_string = \"hello world, how are you today?\"\nprint(\" input: \" + hello_string)\nprint(\"output: \" + format_string(hello_string))\n```", "```py\n input: hello world, how are you today?\noutput: Hello World, How Are You Today?\n```", "```py\nclass SecretString:\n    \"\"\"A not-at-all secure way to store a secret string.\"\"\"\n\n    def __init__(self, plain_string, pass_phrase):\n self.__plain_string = plain_string\n self.__pass_phrase = pass_phrase\n\n    def decrypt(self, pass_phrase):\n        \"\"\"Only show the string if the pass_phrase is correct.\"\"\"\n if pass_phrase == self.__pass_phrase:\n return self.__plain_string\n        else:\n            return \"\"\n```", "```py\n>>> secret_string = SecretString(\"ACME: Top Secret\", \"antwerp\")\n>>> print(secret_string.decrypt(\"antwerp\"))\nACME: Top Secret\n>>> print(secret_string.__plain_string)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nAttributeError: 'SecretString' object has no attribute\n'__plain_string'  \n```", "```py\n>>> print(secret_string._SecretString__plain_string)\nACME: Top Secret  \n```", "```py\n$python -m ensurepip  \n```", "```py\n$pip install requests  \n```", "```py\ncd project_directory\npython -m venv env\nsource env/bin/activate  # on Linux or macOS\nenv/bin/activate.bat     # on Windows  \n```", "```py\nparent_directory/ \n    notebook.py \n    menu.py \n    command_option.py \n```", "```py\nimport datetime\n\n# Store the next available id for all new notes\nlast_id = 0\n\nclass Note:\n    \"\"\"Represent a note in the notebook. Match against a\n    string in searches and store tags for each note.\"\"\"\n\n    def __init__(self, memo, tags=\"\"):\n        \"\"\"initialize a note with memo and optional\n        space-separated tags. Automatically set the note's\n        creation date and a unique id.\"\"\"\n        self.memo = memo\n        self.tags = tags\n        self.creation_date = datetime.date.today()\n        global last_id\n        last_id += 1\n        self.id = last_id\n\n    def match(self, filter):\n        \"\"\"Determine if this note matches the filter\n        text. Return True if it matches, False otherwise.\n\n        Search is case sensitive and matches both text and\n        tags.\"\"\"\n        return filter in self.memo or filter in self.tags\n```", "```py\n>>> from notebook import Note\n>>> n1 = Note(\"hello first\")\n>>> n2 = Note(\"hello again\")\n>>> n1.id\n1\n>>> n2.id\n2\n>>> n1.match('hello')\nTrue\n>>> n2.match('second')\nFalse  \n```", "```py\nclass Notebook:\n    \"\"\"Represent a collection of notes that can be tagged,\n    modified, and searched.\"\"\"\n\n    def __init__(self):\n        \"\"\"Initialize a notebook with an empty list.\"\"\"\n        self.notes = []\n\n    def new_note(self, memo, tags=\"\"):\n        \"\"\"Create a new note and add it to the list.\"\"\"\n        self.notes.append(Note(memo, tags))\n\n    def modify_memo(self, note_id, memo):\n        \"\"\"Find the note with the given id and change its\n        memo to the given value.\"\"\"\n        for note in self.notes:\n            if note.id == note_id:\n                note.memo = memo\n                break\n\n    def modify_tags(self, note_id, tags):\n        \"\"\"Find the note with the given id and change its\n        tags to the given value.\"\"\"\n        for note in self.notes:\n            if note.id == note_id:\n                note.tags = tags\n                break\n\n    def search(self, filter):\n        \"\"\"Find all notes that match the given filter\n        string.\"\"\"\n        return [note for note in self.notes if note.match(filter)]\n```", "```py\n>>> from notebook import Note, Notebook\n>>> n = Notebook()\n>>> n.new_note(\"hello world\")\n>>> n.new_note(\"hello again\")\n>>> n.notes\n[<notebook.Note object at 0xb730a78c>, <notebook.Note object at 0xb73103ac>]\n>>> n.notes[0].id\n1\n>>> n.notes[1].id\n2\n>>> n.notes[0].memo\n'hello world'\n>>> n.search(\"hello\")\n[<notebook.Note object at 0xb730a78c>, <notebook.Note object at 0xb73103ac>]\n>>> n.search(\"world\")\n[<notebook.Note object at 0xb730a78c>]\n>>> n.modify_memo(1, \"hi world\")\n>>> n.notes[0].memo\n'hi world'  \n```", "```py\n    def _find_note(self, note_id):\n        \"\"\"Locate the note with the given id.\"\"\"\n        for note in self.notes:\n            if note.id == note_id:\n                return note\n        return None\n\n    def modify_memo(self, note_id, memo):\n        \"\"\"Find the note with the given id and change its\n        memo to the given value.\"\"\"\n        self._find_note(note_id).memo = memo\n\n    def modify_tags(self, note_id, tags):\n        \"\"\"Find the note with the given id and change its\n        tags to the given value.\"\"\"\n        self._find_note(note_id).tags = tags\n```", "```py\nimport sys\nfrom notebook import Notebook\n\nclass Menu:\n    \"\"\"Display a menu and respond to choices when run.\"\"\"\n\n    def __init__(self):\n        self.notebook = Notebook()\n        self.choices = {\n            \"1\": self.show_notes,\n            \"2\": self.search_notes,\n            \"3\": self.add_note,\n            \"4\": self.modify_note,\n            \"5\": self.quit,\n        }\n\n    def display_menu(self):\n        print(\n            \"\"\"\nNotebook Menu\n\n1\\. Show all Notes\n2\\. Search Notes\n3\\. Add Note\n4\\. Modify Note\n5\\. Quit\n\"\"\"\n        )\n\n    def run(self):\n        \"\"\"Display the menu and respond to choices.\"\"\"\n        while True:\n            self.display_menu()\n            choice = input(\"Enter an option: \")\n            action = self.choices.get(choice)\n            if action:\n                action()\n            else:\n                print(\"{0} is not a valid choice\".format(choice))\n\n    def show_notes(self, notes=None):\n        if not notes:\n            notes = self.notebook.notes\n        for note in notes:\n            print(\"{0}: {1}\\n{2}\".format(note.id, note.tags, note.memo))\n\n    def search_notes(self):\n        filter = input(\"Search for: \")\n        notes = self.notebook.search(filter)\n        self.show_notes(notes)\n\n    def add_note(self):\n        memo = input(\"Enter a memo: \")\n        self.notebook.new_note(memo)\n        print(\"Your note has been added.\")\n\n    def modify_note(self):\n        id = input(\"Enter a note id: \")\n        memo = input(\"Enter a memo: \")\n        tags = input(\"Enter tags: \")\n        if memo:\n            self.notebook.modify_memo(id, memo)\n        if tags:\n            self.notebook.modify_tags(id, tags)\n\n    def quit(self):\n        print(\"Thank you for using your notebook today.\")\n        sys.exit(0)\n\nif __name__ == \"__main__\":\n    Menu().run()\n```", "```py\n    def _find_note(self, note_id):\n        \"\"\"Locate the note with the given id.\"\"\"\n        for note in self.notes:\n            if str(note.id) == str(note_id):\n                return note\n        return None\n```", "```py\n    def modify_memo(self, note_id, memo):\n        \"\"\"Find the note with the given id and change its\n        memo to the given value.\"\"\"\n        note = self._find_note(note_id)\n        if note:\n            note.memo = memo\n            return True\n        return False\n```"]