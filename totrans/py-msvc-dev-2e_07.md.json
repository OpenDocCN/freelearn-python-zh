["```py\n$ sudo certbot --nginx\nNo names were found in your configuration files. Please enter in your domain\nname(s) (comma and/or space separated)  (Enter 'c' to cancel): certbot-test.mydomain.org\nRequesting a certificate for certbot-test.mydomain.org\nPerforming the following challenges:\nhttp-01 challenge for certbot-test.mydomain.org\nWaiting for verification...\nCleaning up challenges\nDeploying Certificate to VirtualHost /etc/nginx/sites-enabled/default\nRedirecting all traffic on port 80 to ssl in /etc/nginx/sites-enabled/default\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\nCongratulations! You have successfully enabled https://certbot-test.mydomain.org\n- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - \nnginx configuration, we see the parts that certbot has added in order to secure the web service:\n```", "```py\nlisten [::]:443 ssl ipv6only=on; # managed by Certbot\nlisten 443 ssl; # managed by Certbot\nssl_certificate /etc/letsencrypt/live/certbot-test.mydomain.org/fullchain.pem; # managed by Certbot\nssl_certificate_key /etc/letsencrypt/live/certbot-test.mydomain.org/privkey.pem; # managed by Certbot\ninclude /etc/letsencrypt/options-ssl-nginx.conf; # managed by Certbot\nssl_dhparam /etc/letsencrypt/ssl-dhparams.pem; # managed by Certbot \n```", "```py\n$ sudo openssl x509 -in /etc/letsencrypt/live/certbot-test.mydomain.org/fullchain.pem  -text -noout\nCertificate:\n\tData:\n  \tVersion: 3 (0x2)\n  \tSerial Number:\n    \t04:92:e3:37:a4:83:77:4f:b9:d7:5c:62:24:74:7e:a4:5a:e0\n  \tSignature Algorithm: sha256WithRSAEncryption\n  \tIssuer: C = US, O = Let's Encrypt, CN = R3\n  \tValidity\n    \tNot Before: Mar 13 14:43:12 2021 GMT\n    \tNot After : Jun 11 14:43:12 2021 GMT\n  \tSubject: CN = certbot-test.mydomain.org\n... \n```", "```py\n$ openssl s_client -connect localhost:443\nCONNECTED(00000003)\nCan't use SSL_get_servername\ndepth=2 O = Digital Signature Trust Co., CN = DST Root CA X3\nverify return:1\ndepth=1 C = US, O = Let's Encrypt, CN = R3\nverify return:1\ndepth=0 CN = certbot-test.mydomain.org\nverify return:1\n---\nCertificate chain\n 0 s:CN = certbot-test.mydomain.org\n i:C = US, O = Let's Encrypt, CN = R3\n 1 s:C = US, O = Let's Encrypt, CN = R3\n i:O = Digital Signature Trust Co., CN = DST Root CA X3\n---\nServer certificate\n-----BEGIN CERTIFICATE-----\nMII  \n# A really long certificate has been removed here\n-----END CERTIFICATE-----\nsubject=CN = certbot-test.mydomain.org\nissuer=C = US, O = Let's Encrypt, CN = R3\n---\nNew, TLSv1.3, Cipher is TLS_AES_256_GCM_SHA384\nServer public key is 2048 bit\nSecure Renegotiation IS NOT supported\nCompression: NONE\nExpansion: NONE\nNo ALPN negotiated\nEarly data was not sent\nVerify return code: 0 (ok)\n--- \n```", "```py\neyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\n.\neyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNpbW9uIEZyYXNlciIsIm lhdCI6MTYxNjQ0NzM1OH0\n.\nK4ONCpK9XKtc4s56YCC-13L0JgWohZr5J61jrbZnt1M \n```", "```py\n>>> import base64\n>>> def decode(data):\n... # adding extra = for padding if needed\n... pad = len(data) % 4\n... if pad > 0:\n...     data += \"=\" * (4 - pad)\n... return base64.urlsafe_b64decode(data)\n...\n>>> decode(\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9\")\nb'{\"alg\":\"HS256\",\"typ\":\"JWT\"}'\n>>> import base64 \n>>> decode(\"eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IlNpbW9uIEZyYXNlciIsImlhdC I6MTYxNjQ0NzM1OH0\")\nb'{\"sub\":\"1234567890\",\"name\":\"Simon Fraser\",\"iat\":1616447358}'\n>>> decode(\"K4ONCpK9XKtc4s56YCC-13L0JgWohZr5J61jrbZnt1M\")\nb\"+\\x83\\x8d\\n\\x92\\xbd\\\\\\xab\\\\\\xe2\\xcez` \\xbe\\xd7r\\xf4&\\x05\\xa8\\x85\\x9a\\xf9'\\xadc\\xad\\xb6g\\xb7S\" \n```", "```py\n{\"typ\": \"JWT\",  \"alg\": \"HS256\"} \n```", "```py\n{\n  \"iss\": \"https://tokendealer.mydomain.org\", \n  \"aud\": \"mydomain.org\", \n  \"iat\": 1616447358, \n  \"nbt\": 1616447358, \n  \"exp\": 1616533757, \n  \"user_id\": 1234\n} \n```", "```py\n>>> import jwt\n>>>  def create_token(alg=\"HS256\", secret=\"secret\", data=None):\n        return jwt.encode(data, secret, algorithm=alg)\n...\n>>>\n>>> def read_token(token, secret=\"secret\", algs=[\"HS256\"]):\n...  return jwt.decode(token, secret, algorithms=algs)\n...\n>>>  token = create_token(data={\"some\": \"data\", \"inthe\": \"token\"})\n>>> print(token)\neyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzb21lIjoiZGF0YSIsImludGhlIjoidG9rZW4ifQ.vMHiSS_vk-Z3gMMxcM22Ssjk3vW3aSmJXQ8YCSCwFu4\n>>> print(read_token(token))\n{'some': 'data', 'inthe': 'token'} \n```", "```py\nopenssl x509 -pubkey -noout -in cert.pem  > pubkey.pem \n```", "```py\n import jwt\n  with open(\"pubkey.pem\") as f:\n    PUBKEY = f.read()\n  with open(\"privkey.pem\") as f:\n    PRIVKEY = f.read()\n  def create_token(**data):\n    return jwt.encode(data, PRIVKEY, algorithm=\"RS512\")\n  def read_token(token):\n    return jwt.decode(token, PUBKEY, algorithms=\"RS512\")\n  token = create_token(some=\"data\", inthe=\"token\")\n  print(token)\n  read = read_token(token)\n  print(read) \n```", "```py\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzUxMiJ9.eyJzb21lIjoiZGF0YSIsImludGh lIjoidG9rZW4ifQ.gi5p3k4PAErw8KKrghRjsi8g1IXnflivXiwwaZdFEh84zvgw9RJRa 50uJe778A1CBelnmo2iapSWOQ9Mq5U6gpv4VxoVYv6QR2zFNO13GB_tce6xQ OhjpAd-hRxouy3Ozj4oNmvwLpCT5dYPsCvIiuYrLt4ScK5S3q3a0Ny64VXy 3CcISNkyjs7fnxyMMkCMZq65Z7jOncf1RXpzNNIt546aJGsCcpCPGHR1cRj uvV_uxPAMd-dfy2d5AfiCXOgvmwQhNdaxYIM0gPgz9_yHPzgaPjtgYoJMc9iK ZdOLz2-8pLc1D3r_uP3P-4mfxP7mOhQHYBrY9nv5MTSwFC3JDA\n{'some': 'data', 'inthe': 'token'} \n```", "```py\n@app.route(\"/oauth/token\", methods=[\"POST\"])\nasync def create_token():\n    with open(current_app.config[\"PRIVATE_KEY_PATH\"]) as f:\n        key = f.read().strip()\n    try:\n        data = await request.form\n        if data.get(\"grant_type\") != \"client_credentials\":\n            return bad_request(f\"Wrong grant_type {data.get('grant_type')}\")\n\n        client_id = data.get(\"client_id\")\n        client_secret = data.get(\"client_secret\")\n        aud = data.get(\"audience\", \"\")\n\n        if not is_authorized_app(client_id, client_secret):\n            return abort(401)\n\n        now = int(time.time())\n\n        token = {\n            \"iss\": current_app.config[\"TOKENDEALER_URL\"],\n            \"aud\": aud,\n            \"iat\": now,\n            \"exp\": now + 3600 * 24,\n        }\n        token = jwt.encode(token, key, algorithm=\"RS512\")\n        return {\"access_token\": token}\n    except Exception as e:\n        return bad_request(\"Unable to create a token\") \n```", "```py\n@app.route(\"/.well-known/jwks.json\")\nasync def _jwks():\n    \"\"\"Returns the public key in the Json Web Key Set (JWKS) format\"\"\"\n    with open(current_app.config[\"PUBLIC_KEY_PATH\"]) as f:\n        key = f.read().strip()\n    data = {\n        \"alg\": \"RS512\",\n        \"e\": \"AQAB\",\n        \"n\": key,\n        \"kty\": \"RSA\",\n        \"use\": \"sig\",\n    }\n\n    return jsonify({\"keys\": [data]}) \n```", "```py\n@app.route(\"/verify_token\", methods=[\"POST\"])\nasync def verify_token():\n    with open(current_app.config[\"PUBLIC_KEY_PATH\"]) as f:\n        key = f.read()\n    try:\n        input_data = await request.form\n        token = input_data[\"access_token\"]\n        audience = input_data.get(\"audience\", \"\")\n        return jwt.decode(token, key, algorithms=[\"RS512\"], audience=audience)\n    except Exception as e:\n        return bad_request(\"Unable to verify the token\") \n```", "```py\n# fetch_token.py\nimport requests\nTOKENDEALER_SERVER = \"http://localhost:5000\"\nSECRET = \"f0fdeb1f1584fd5431c4250b2e859457\"\ndef get_token():\n    data = {\n        \"client_id\": \"worker1\",\n        \"client_secret\": secret,\n        \"audience\": \"jeeves.domain\",\n        \"grant_type\": \"client_credentials\",\n    }\n    headers = {\"Content-Type\": \"application/x-www-form-urlencoded\"}\n    url = tokendealer_server + \"/oauth/token\"\n    response = requests.post(url, data=data, headers=headers)\n    return response.json()[\"access_token\"] \n```", "```py\n# auth_caller.py\n_TOKEN = None\ndef get_auth_header(new=False):\n    global _TOKEN\n    if _TOKEN is None or new:\n        _TOKEN = get_token()\n    return \"Bearer \" + _TOKEN\n_dataservice = \"http://localhost:5001\"\ndef _call_service(endpoint, token):\n    # not using session and other tools, to simplify the code\n    url = _dataservice + \"/\" + endpoint\n    headers = {\"Authorization\": token}\n    return requests.get(url, headers=headers)\ndef call_data_service(endpoint):\n    token = get_auth_header()\n    response = _call_service(endpoint, token)\n    if response.status_code == 401:\n        # the token might be revoked, let's try with a fresh one\n        token = get_auth_header(new=True)\n        response = _call_service(endpoint, token)\n    return response \n```", "```py\nimport pymysql \nconnection = pymysql.connect(host='localhost', db='book') \ndef get_user(user_id): \n    query = f\"select * from user where id = {user_id}\"\n        with connection.cursor() as cursor: \n        cursor.execute(query) \n        result = cursor.fetchone() \n        return result \n```", "```py\n'1'; insert into user(id, firstname, lastname, password) values (999, 'pwnd', 'yup', 'somehashedpassword') \n```", "```py\nselect * from user where id = '1'\ninsert into user(id, firstname, lastname, password) values (999, 'pwnd', 'yup', 'somehashedpassword') \n```", "```py\ndef get_user(user_id): \n    query = 'select * from user where id = %s' \n        with connection.cursor() as cursor: \n        cursor.execute(query, (user_id,)) \n        result = cursor.fetchone() \n        return result \n```", "```py\nfrom quart import Quart, request, render_template_string\napp = Quart(__name__)\nSECRET = \"oh no!\"\n_TEMPLATE = \"\"\"\n    Hello %s\n    Welcome to my API!\n    \"\"\"\nclass Extra:\n    def __init__(self, data):\n    self.data = data\n@app.route(\"/\")\nasync def my_microservice():\n    user_id = request.args.get(\"user_id\", \"Anonymous\")\n    tmpl = _TEMPLATE % user_id\n    return await render_template_string(tmpl, extra=Extra(\"something\"))\napp.run() \n```", "```py\n# Here we URL encode the following:\n# http://localhost:5000/?user_id={{extra.__class__.__init__.__globals__[\"SECRET\"]}} \n$ curl http://localhost:5000/?user_id=%7B%7Bextra.__class__.__init__.__globals__%5B%22SECRET%22%5D%7D%7D\nHello oh no!\nWelcome to my API! \n```", "```py\n@app.route('/login') \ndef login(): \n    from_url = request.args.get('from_url', '/') \n    # do some authentication \n    return redirect(from_url) \n```", "```py\n# quart_after_response.py\nfrom quart import Quart, redirect\nfrom quart.helpers import make_response\nfrom urllib.parse import urlparse\napp = Quart(__name__)\n@app.route(\"/api\")\nasync def my_microservice():\n    return redirect(\"https://github.com:443/\")\n# domain:port\nSAFE_DOMAINS = [\"github.com:443\", \"google.com:443\"]\n@app.after_request\nasync def check_redirect(response):\n    if response.status_code != 302:\n        return response\n    url = urlparse(response.location)\n    netloc = url.netloc\n    if netloc not in SAFE_DOMAINS:\n        # not using abort() here or it'll break the hook\n        return await make_response(\"Forbidden\", 403)\n    return response\nif __name__ == \"__main__\":\n    app.run(debug=True) \n```", "```py\n$ lua \nLua 5.4.2  Copyright (C) 1994-2020 Lua.org, PUC-Rio\n> io.write(\"Hello world\\n\")\nHello world\nfile (0x7f5a66f316a0)\n> mytable = {}\n> mytable[\"user\"] = \"simon\"\n> = mytable[\"user\"]\nsimon\n> = string.upper(mytable[\"user\"])\nSIMON\n> \n```", "```py\n# resty.conf\ndaemon off;\nworker_processes  1;\nerror_log /dev/stdout info;\nevents {\nworker_connections  1024;\n}\nhttp {\n  access_log /dev/stdout;\n  server {\n    listen   8888;\n    server_name  localhost;\n    location / {\n      proxy_pass http://localhost:5000;\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    }\n   }\n  } \n```", "```py\n$ openresty -p $(pwd) -c resty.conf\n2021/07/03 16:11:08 [notice] 44691#12779096: using the \"kqueue\" event method\n2021/07/03 16:11:08 [warn] 44691#12779096: 1024 worker_connections exceed open file resource limit: 256\nnginx: [warn] 1024 worker_connections exceed open file resource limit: 256\n2021/07/03 16:11:08 [notice] 44691#12779096: openresty/1.19.3.2\n2021/07/03 16:11:08 [notice] 44691#12779096: built by clang 12.0.0 (clang-1200.0.32.2)\n2021/07/03 16:11:08 [notice] 44691#12779096: OS: Darwin 19.6.0\n2021/07/03 16:11:08 [notice] 44691#12779096: hw.ncpu: 12\n2021/07/03 16:11:08 [notice] 44691#12779096: net.inet.tcp.sendspace: 131072\n2021/07/03 16:11:08 [notice] 44691#12779096: kern.ipc.somaxconn: 128\n2021/07/03 16:11:08 [notice] 44691#12779096: getrlimit(RLIMIT_NOFILE): 256:9223372036854775807\n2021/07/03 16:11:08 [notice] 44691#12779096: start worker processes\n2021/07/03 16:11:08 [notice] 44691#12779096: start worker process 44692 \n```", "```py\n# resty_limiting.conf\ndaemon off;\nworker_processes  1;\nerror_log /dev/stdout info;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    lua_shared_dict my_limit_req_store 100m;\n\n    server {\n        listen   8888;\n        server_name  localhost;\n        access_log /dev/stdout;\n        location / {\n            access_by_lua_block {\n                local limit_req = require \"resty.limit.req\"\n                local lim, err = limit_req.new(\"my_limit_req_store\", 200, 100)\n                local key = ngx.var.binary_remote_addr\n                local delay, err = lim:incoming(key, true)\n                if not delay then\n                    if err == \"rejected\" then\n                        return ngx.exit(503)\n                    end\n                    ngx.log(ngx.ERR, \"failed to limit req: \", err)\n                    return ngx.exit(500)\n                end\n\n                if delay >= 0.001 then\n                    local excess = err\n                    ngx.sleep(delay)\n                end\n            }\n            proxy_pass http://localhost:5000;\n            proxy_set_header Host $host;\n            proxy_set_header X-Real-IP $remote_addr;\n            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n        }\n    }\n} \n```"]