- en: '18'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Automated Test Cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When it comes to developing large applications, using automated test cases
    is good practice to improve the reliability of your module. This makes your module
    more robust. Every year, Odoo releases a new version of its software, and automated
    test cases are very helpful in detecting regression in your application, which
    may have been caused by a version upgrade. Luckily, any Odoo framework comes with
    different automated testing utilities. Odoo includes the following three main
    types of tests:'
  prefs: []
  type: TYPE_NORMAL
- en: '**A Python test case**: Used to test Python business logic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A JavaScript QUnit test**: Used to test JavaScript implementation in Odoo'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Tours**: An integration test to check that Python and JavaScript work with
    each other properly'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Python test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tagged Python test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Headless Chrome for client-side test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding client-side QUnit test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding tour test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running client-side test cases from the UI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging client-side test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generating videos/screenshots for failed test cases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Populating random data for testing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will look at all the test cases in detail. In order to
    cover all of the test cases in a single module, we have created a small module.
    Its Python definition is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The Python code given here will help us to write test cases for Python business
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: For JavaScript test cases, we have added the `int_color` widget from the *Creating
    custom widgets* recipe in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861), *Web*
    *Client Development*.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can grab this initial module from the GitHub repository of this room at
    the following link: [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter18/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter18/00_initial_module).'
  prefs: []
  type: TYPE_NORMAL
- en: Adding Python test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python test cases are used to check the correctness of business logic. In [*Chapter
    5*](B20997_05.xhtml#_idTextAnchor238), *Basic Server-Side Development*, you saw
    how you can modify the business logic of our existing app. This makes it even
    more important, as customization might break the app’s functionality. In this
    chapter, we will write a test case to validate the business logic to change a
    hostel room’s state.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will use the `my_hostel` module from the `Chapter18/00_initial_module` directory
    of the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add Python test cases to the `my_hostel` module:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new file, `tests/__init__.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `tests/test_hostel_room_state.py` file, and then add the test case, as
    follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run the test cases, start the Odoo server with the following option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, check the server log. You will find the following logs if our test cases
    ran successfully:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You will see the `ERROR` log instead of `INFO` if a test case fails or there
    is an error.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Odoo, Python test cases are added to the `tests/` directory of the module.
    Odoo will automatically identify this directory and run the test under the folder.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*You also need to list your test case files in* `tests/__init__.py.` *If you
    don’t do that, that test case will* *not execute.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo uses Python’s `unittest` for Python test cases. To learn more about `unittest`,
    refer to [https://docs.python.org/3.5/library/unittest.html](https://docs.python.org/3.5/library/unittest.html).
    Odoo provides the following helper classes:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Common` class: This class provides common methods and setup for test cases.
    It includes functionalities such as creating and managing database transactions
    during the tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `SavepointCase` class: This extends the Common class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `SavepointCase` provides additional features to handle savepoints during
    tests. This is useful when you want to roll back the changes made to the database
    during a test, ensuring that each test starts with a clean state,
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `TransactionCase` class: This class extends `SavepointCase` and provides
    transaction-related functionality. It helps to manage database transactions during
    the tests.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `HttpCase` class: This class is used to test HTTP requests and responses.
    It allows you to simulate HTTP requests and test the responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `BaseCase` class: This is a base class for various test cases in Odoo.
    It provides common functionality that can be reused in different test scenarios,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `SingleTransactionCase` class: This class extends `TransactionCase` and
    ensures that each test case is executed within a single database transaction.
    This can be useful in scenarios where you want to isolate tests completely from
    each other.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `FormCase` class: This class is used to test form views and their interactions.
    It provides methods to simulate user interactions with form views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `FunctionCase` class: This class is designed to test server-side Python
    functions. It helps in testing various functions and methods within the Odoo framework,
    wrapped over `unittest`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These classes simplify the process of developing test cases. In our case, we
    have used `TransactionCase`. Now, `TransactionCase` runs each test case method
    in a different transaction. Once a test case method runs successfully, a transaction
    is automatically rolled back. This means the next test case will not have any
    modification made by the previous test case.
  prefs: []
  type: TYPE_NORMAL
- en: The class method starts from `test_` and is considered a test case. In our example,
    we have added two test cases. This checks the methods that change the hostel room’s
    state. The `self.assertEqual` method (`assertEqual()` in Python) is a `unittest`
    library function that is used in unit testing to check the equality of two values.
    This function will take three parameters as input and return a Boolean value,
    depending upon the `assert` condition. If both input values are equal `assertEqual()`
    will return `true` else return `false`) is used to check whether the test case
    runs successfully. We have checked the hostel room state after performing operations
    on the hostel room’s record. So, if the developer makes a mistake and the method
    does not change states as expected, the test case will fail.
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: '*Note that the* `setUp()` *method will automatically call for every test case
    we run, so, in this recipe, we have added two test cases so that* `setUp()` *will
    call twice. As per the code in this recipe, there will only be one record of the
    hostel room present during testing because, with* `TransactionCase`*, the transaction
    is rolled back with every* *test case.*'
  prefs: []
  type: TYPE_NORMAL
- en: In Python, a docstring is a string literal that occurs as the first statement
    in a module, function, class, or method definition. Docstrings are used to provide
    documentation about what a piece of code does. They serve as a form of inline
    documentation that can be accessed using various tools, such as the `help()` function..
    This can be very helpful to check the status of a particular test case.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The test suite provides the following additional test utility classes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SingleTransactionCase`: Test cases generated through this class will run all
    cases in a single transaction, so changes made from one test case will be available
    in a second test case. In this way, the transaction begins with the first test
    method and is only rolled back at the end of the last test case.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SavepointCase`: This is the same as `SingleTransactionCase`, but in this case,
    test methods run inside a rolled-back save point, instead of having all test methods
    in a single transaction. This is used to create large test cases and make them
    faster, by generating test data only once. Here, we use the `setUpClass()` method
    to generate the initial test data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running tagged Python test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you run the Odoo server with the `--test-enabled` module name, the test
    cases run immediately after the module is installed. If you want to run a test
    case after the installation of all the modules, or if you just want to run a test
    case for only one module, a `tagged()` decorator is the answer.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll show you how to utilize this decorator specifically for
    shaping test cases. It’s important to note that this decorator only applies to
    classes; it doesn’t affect functions or methods. Tags can be modified by adding
    a minus (-) sign as a prefix, which removes them instead of adding or selecting
    them. For example, if you want to prevent your test from being executed by default,
    you can remove the standard tag.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will use the `my_hostel` module from the last recipe. We
    will modify the sequence of the test case.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add tags to the Python test cases:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `tagged()` decorator (such as the following) to the test class to run
    it after the installation of all modules:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After that, run the test case as follows, just like before:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, check the server log. This time, you will see our test case log after
    the following logs, meaning that our test cases were run after all of the modules
    were installed, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In these logs, the first line shows that nine modules were loaded. The second
    line shows that all requested modules and their dependencies were installed successfully,
    and the third line shows that it will start running the test cases that are tagged
    as `post_install`.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, all of the test cases are tagged with `standard`, `at_install`,
    and the current module’s technical name (in our case, the technical name is `my_hostel`).
    Consequently, if you do not use a `tagged()` decorator, your test case will have
    these three tags.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we want to run the test case after installing all of the modules.
    To do so, we have added a `tagged()` decorator to the `TestHostelRoomState` class.
    By default, the test case has the `at_install` tag. Because of this tag, your
    test case will run immediately after the module is installed; it will not wait
    for other modules to be installed. We don’t want this, so to remove the `at_install`
    tag, we have added `-at_install` to the tagged function. The tags that are prefixed
    by `-` will remove that tag.
  prefs: []
  type: TYPE_NORMAL
- en: By adding `-at_install` to the `tagged()` function, we stopped the test case
    execution after the module installation. As we haven’t specified any other tag
    in this, the test case won’t run.
  prefs: []
  type: TYPE_NORMAL
- en: So, we have added a `post_install` tag. This tag specifies that the test case
    needs to be run after the installation of all modules is completed.
  prefs: []
  type: TYPE_NORMAL
- en: 'As you have seen, all test cases are tagged with the `standard` tag, by default.
    Odoo will run all of the test cases tagged with the `standard` tag, in case you
    don’t want to run the specific test case all of the time and only want to run
    it when it is requested. To do so, you need to remove the `standard` tag by adding
    `-standard` to the `tagged()` decorator, and you need to add a custom tag like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'All of the non-standard test cases will not run with the `--test-enable` option.
    To run the preceding test case, you need to use the `--test-tags` option, as follows
    (note that, here, we do not need to pass the `--test-enable` option explicitly):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'During the development of the test case, it is important to run the test case
    for just one module. By default, the technical name of the module is added as
    a tag, so you can use the module’s technical name with the `--test-tags` option.
    For example, if you want to run test cases for the `my_hostel` module, then you
    can run the server like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The command given here will run the test case in the `my_hostel` module, but
    it will still decide the sequence based on the `at_install` and `post_install`
    options.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up Headless Chrome for client-side test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo employs Headless Chrome to execute JavaScript and tour test cases, facilitating
    the simulation of end-user environments. Headless Chrome, devoid of the complete
    UI, enables seamless execution of JavaScript test cases, ensuring a consistent
    testing environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You will need to install Chrome to enable a JavaScript test case. For the development
    of the modules, we will mostly use the desktop OS. Consequently, if you have a
    Chrome browser installed on your system, then there is no need to install it separately.
    You can run client-side test cases with desktop Chrome. Make sure that you have
    a Chrome version higher than Chrome 59\. Odoo also supports the Chromium browser.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Headless Chrome client-side test cases work fine with macOS and Linux, but Odoo
    does not support Headless Chrome test cases on Windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'The situation changes slightly when you want to run test cases on the production
    server or Server OS. Server OS does not have a GUI, so you need to install Chrome
    differently. If you are using a Debian-based OS, you can install Chromium with
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: '*Ubuntu 22.04 Server Edition has not enabled the* `universe` *repository by
    default. So, it’s possible that installing* `chromium-browser` *will show an installation
    candidate error. To fix this error, enable the* `universe` *repository with the
    following command –* `sudo` `add-apt-repository universe`*.*'
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo also uses `websocket-client` Python library. To install it, use the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now, your system is ready to run client-side test cases.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo uses Headless Chrome for JavaScript test cases. The reason behind this
    is that it runs test cases in the background, so it can be run on Server OS, too.
    Headless Chrome prefers to run the Chrome browser in the background, without opening
    a GUI browser. Odoo opens a Chrome tab in the background and starts running the
    test cases in it. It also uses **jQuery’s** **QUnit** for JavaScript test cases.
    In the next few recipes, we will create a QUnit test case for our custom JavaScript
    widgets.
  prefs: []
  type: TYPE_NORMAL
- en: For test cases, Odoo opens Headless Chrome in a separate process, so to find
    out the status of a test case running in that process, the Odoo server uses WebSockets.
    The `websocket-client` Python library is used to manage WebSockets to communicate
    with Chrome from the Odoo server.
  prefs: []
  type: TYPE_NORMAL
- en: Adding client-side QUnit test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building new fields or views is very simple in Odoo. In just a few lines of
    XML, you can define a new view. However, under the hood, it uses a lot of JavaScript.
    Modifying/adding new features on the client side is complex, and it might break
    a few things. Most client-side issues go unnoticed, as most errors are only displayed
    in the console. So, QUnit test cases are used in Odoo to check the correctness
    of different JavaScript components.
  prefs: []
  type: TYPE_NORMAL
- en: QUnit is a JavaScript testing framework primarily used for client-side testing.
    It’s commonly associated with testing JavaScript code in web applications, particularly
    for frontend development. QUnit is often used to test the logic and behavior of
    JavaScript functions, modules, and components in a web browser environment.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will continue using the `my_hostel` module from the previous
    recipe. We will add a QUnit test case for the `int_color` widget.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add JavaScript test cases to the `int_color` widget:'
  prefs: []
  type: TYPE_NORMAL
- en: We have already implemented a widget for `int_color` using JavaScript in our
    module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add `/static/tests/colorpicker_tests.js` with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a `beforeEach` function to load the data field-wise before applying
    the test case:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `QUnit` test case for the color picker field, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following code to `__manifest__.py` to register it in the test suite:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To run this test case, start your server with the following command in the
    Terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'To check that the tests have run successfully, search for the following log:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In Odoo, JavaScript test cases are added to the `/static/tests/` directory.
    In *step 1*, we added a `colorpicker_test.js` file for the test case. In that
    file, we imported the registry for use in `serviceRegistry` and `setupViewRegistries`
    and`makeView` from test helpers. `makeView` is imported because we created the
    `int_color` widget for the form view, so to test the widget, we will need the
    form view.
  prefs: []
  type: TYPE_NORMAL
- en: '`@web/../tests/helpers/utils` will provide us with the test utilities we require
    to build the JavaScript test cases. If you don’t know how JavaScript import works,
    refer to the *Extending CSS and JavaScript for the website* recipe in [*Chapter
    14*](B20997_14.xhtml#_idTextAnchor734), *CMS* *Website Development*.'
  prefs: []
  type: TYPE_NORMAL
- en: Odoo client-side test cases are built with the QUnit framework, which is the
    jQuery framework for the JavaScript unit test case. Refer to [https://qunitjs.com/](https://qunitjs.com/)
    to learn more about this. The `beforeEach` function is called before running the
    test cases, and this helps to initialize the test data. The reference of the `beforeEach`
    function is provided by the QUnit framework itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'We initialized some data in the `beforeEach` function. Let’s see how that data
    is used in the test case. The client-side test case runs in an isolated (mock)
    environment, and it doesn’t make a connection to the database, so for these test
    cases, we need to create test data. Internally, Odoo creates the mock server to
    mimic the `serverData` property as the database. Consequently, in `beforeEach`,
    we initialized our test data in the `serverData` property. The keys in the `serverData`
    property are considered a table, and the values contain information about the
    fields and the table rows. The `fields` key is used to define table fields, and
    the `records` key is used for the table rows. In our example, we added a `room`
    table with three fields – `name(char)`, `room_no(char)`, and `color(integer)`.
    Note that, here, you can use any Odoo fields, even relational fields – for example,
    `{string: "M2o Field", type: "many2one", relation: ''partner''}`. We also added
    two room records with the `records` key.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, we added the test cases with the `QUnit.test` function. The first argument
    in the function is `string` to describe the test case. The second argument is
    the function to which you need to add code for the test cases. This function is
    called from the QUnit framework, and it passes the assert utilities as the argument.
    In our example, we passed the number of expected test cases in the `assert.expect`
    function. We are adding two test cases, so we passed `2`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We want to add to the test case the `int_color` widget in the editable form
    view, so we created the editable form view with `makeView`. The `makeView` function
    accepts different arguments, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`resModel` is the name of the model for which the given view is created. All
    of the models are listed in the `resModel` as properties. We want to create a
    view for the room model, so in our example, we used the room as a model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serverData` is the record that we are going to use in the view. The views
    key from `serverData` is the definition of the view you want to create. Because
    we want to test the `int_color` widget, we passed the view definition with the
    widget. Note that you can only use the fields that are defined in the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Type`: The type of view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: After creating the form view with the `int_color` widget, we added two test
    cases. The first one is used to check the number of color pills on the UI, and
    the second test case is used to check that the pill is activated correctly after
    the click. We have the `strictEqual` function from the asserted utility of the
    QUnit framework. The `strictEqual` function passes the test case if the first
    two arguments match. If they do not match, it will fail the test case.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a few more assert functions available for QUnit test cases, such as
    `assert.deepEqual`, `assert.ok`, and `assert.notOk`. To learn more about QUnit,
    refer to its documentation at [https://qunitjs.com/](https://qunitjs.com/).
  prefs: []
  type: TYPE_NORMAL
- en: Adding tour test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now seen the Python and JavaScript test cases. Both of these work in
    an isolated environment, and they don’t interact with each other. To test integration
    between JavaScript and Python code, tour test cases are used.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will continue using the `my_hostel` module from the previous
    recipe. We will add a tour test case to check the flow of the room model. Also,
    make sure you have installed the `web_tour` module or have added the `web_tour`
    module dependency to the manifest.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a tour test case for `rooms`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `/static/src/js/my_hostel_tour.js` file, and then add a tour as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add steps for the test tour:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `my_hostel_tour.js` file to the test assets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `/tests/test_tour.py` file, and run the tour through `HttpCase`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In order to run test cases, start the Odoo server with the following option:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, check the server log. Here, you will find the following logs if our test
    cases ran successfully:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to create tour test cases, you need to create the UI tour first. If
    you want to learn more about UI tours, refer to the *Improve onboarding with tours*
    recipe in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861), *Web* *Client Development*.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we registered a new tour with the name `hostel_tour`. This tour
    is exactly like the tour we created in the *Improve onboarding with tours* recipe
    in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861). In *step 2*, we added the
    steps for the tours.
  prefs: []
  type: TYPE_NORMAL
- en: Here, we have two main changes compared to the onboarding tour. First, we added
    a `test=true` parameter for the tour definition; second, we added one extra property,
    `run`. In the `run` function, you have to write the logic to perform the operation
    that is normally done by the user. For example, in the fourth step of the tour,
    we ask the user to enter the room title.
  prefs: []
  type: TYPE_NORMAL
- en: 'To automate this step, we added a `run` function to set the value in the `title`
    field. The `run` function passes the action utility as the parameter. This provides
    some shortcuts to perform basic actions. The most important ones are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`actions.click(element)` is used to click on a given element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actions.dblclick(element)` is used to double-click on a given element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actions.tripleclick(element)` is used to triple-click on a given element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actions.text(string)` is used to set the input values.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actions.drag_and_drop(to, element)` is used to drag and drop an element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actions.keydown(keyCodes, element)` is used to trigger particular keyboard
    events on an element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`actions.auto()` is the default action. When you don’t pass the `run` function
    in the tour step, `actions.auto()` is performed. This usually clicks on the trigger
    element of the tour step. The only exception here is an input element. If the
    trigger element is `input`, the tour will set the default value, `Test`, in the
    input. That is why we don’t need to add `run` functions to all of the steps.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Alternatively, you can perform whole actions manually if default actions are
    not enough. In the next tour step, we want to set a value for the color picker.
    Note that we used the manual action because default values won’t help here. Consequently,
    we added the `run` method with the basic jQuery code to click on the third pill
    of the color picker. Here, you will find the trigger element with the `this.$anchor`
    property.
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, registered tours are displayed to the end user to improve the onboarding
    experience. In order to run them as a test case, you need to run them in Headless
    Chrome. To do so, you need to use the `HttpCase` Python test case. This provides
    the `browser_js` method, which opens the URL and executes the command passed as
    the second parameter. You can run the tour manually, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In our example, we passed the name of the tour as the argument in the `browser_js`
    method. The next parameter is used to wait for a given object to be ready before
    performing the first command. The last parameter in the `browser_js()` method
    is the name of the user. This username will be used to create a new test environment,
    and all of the test actions will be performed on behalf of this user.
  prefs: []
  type: TYPE_NORMAL
- en: Running client-side test cases from the UI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo provides a way to run client-side test cases from the UI. By running the
    test case from the UI, you will be able to see each step of the test case in action.
    This way, you can verify that the UI test case works exactly as you wanted.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can run both the `QUnit` test case and the tours test case from the UI.
    It is not possible to run Python test cases from the UI, as it runs on the server
    side. In order to see the options to run test cases from the UI, you need to enable
    developer mode.
  prefs: []
  type: TYPE_NORMAL
- en: Running QUnit test cases from the UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Click on the bug icon to open the drop-down menu, as shown in the following
    figure. Click on the **Run JS** **Tests** option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.1 – The option to run test cases](img/B20997_18_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18.1 – The option to run test cases
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open the QUnit suite, and it will start running the test cases one
    by one, as shown in the following screenshot. By default, it will only show the
    failed test cases. To show all the passed test cases, uncheck the **Hide passed
    tests** checkbox, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.2 – The results of the QUnit test cases](img/B20997_18_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18.2 – The results of the QUnit test cases
  prefs: []
  type: TYPE_NORMAL
- en: Running tours from the UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Click on the bug icon to open the drop-down menu, as shown in the following
    screenshot, and then click on **Start Tour**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.3 – The option to run tour test cases](img/B20997_18_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18.3 – The option to run tour test cases
  prefs: []
  type: TYPE_NORMAL
- en: 'This will open a dialog with a list of registered tours, as you can see in
    the following screenshot. Click on the play button on the side to run the tour:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.4 – A list of tour test cases](img/B20997_18_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18.4 – A list of tour test cases
  prefs: []
  type: TYPE_NORMAL
- en: The test tours only display in a list if you have enabled test assets mode.
    If you can’t find the `hostel_tour` tour in the list, make sure you have activated
    test assets mode.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The UI for QUnit is provided by the QUnit framework itself. Here, you can filter
    the test cases for the modules. You can even run a test case for just one module.
    With the UI, you can see the progress of each test case, and you can drill down
    to each step of the test case. Internally, Odoo just opens the same URL in Headless
    Chrome.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the **Run tours** option will display the list of available tours.
    By clicking on the play button on the list, you can run the tour. Note that when
    the tour runs via the command-line options, it runs in the rolled-back transaction,
    so changes made through the tour are rolled back after the tour is successful.
    However, when the tour runs from the UI, it works just as though a user was operating
    it, meaning changes made from the tour are not rolled back and stay there, so
    use this option carefully.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging client-side test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developing complex client-side test cases can be a headache. In this recipe,
    you will learn how you can debug the client-side test cases in Odoo. Instead of
    running all of the test cases, we will run just the one. Additionally, we will
    display the UI of the test case.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will continue using the `my_hostel` module from the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to run a test case in debug mode:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `/static/tests/colorpicker_test.js` file and update and add the `makeView`
    function, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check the `target` parameter in the `containtsN` function, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open developer mode and open the drop-down menu by clicking on the bug icon
    on the top menu, and then click on **Run JS Tests**. This will open the QUnit
    suite:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.5 – The option to run test cases](img/B20997_18_05.gif)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18.5 – The option to run test cases
  prefs: []
  type: TYPE_NORMAL
- en: This will run only one test case, which is our color picker test case.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 18.6 – Color picker test case](img/B20997_18_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 18.6 – Color picker test case
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we replaced `QUnit.test` with `QUnit.only`. This will run this
    test case only. During the development of the test case, this can be time-saving.
    Note that using `QUnit.only` will stop the test case from running via the command-line
    options. This can only be used for debugging or testing, and it can only work
    when you open the test case from the UI, so don’t forget to replace it with `QUnit.test`
    after the development.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our QUnit test case example, we created the form view to test the `int_color`
    widget. If you run the QUnit test cases from the UI, you will find that you are
    not able to see the created form views in the UI. From the UI of the QUnit suite,
    you are only able to see the logs. This makes developing a QUnit test case very
    difficult. To solve this issue, the `debug` parameter is used in the `makeView`
    function. In *step 2*, we added `debug: true` in the `makeView` function. This
    will display the test form view in the browser. Here, you will be able to locate
    **Document Object Model** (**DOM**) elements via the browser debugger.'
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: '*At the end of the test case, we destroy the view through the* `destroy()`
    *method. If you have destroyed the view, then you won’t be able to see the form
    view in the UI, so in order to see it in the browser, remove that line during
    development. This will help you debug the* *test case.*'
  prefs: []
  type: TYPE_NORMAL
- en: Running QUnit test cases in debug mode helps you develop test cases very easily
    and quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Generating videos/screenshots for failed test cases
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo uses Headless Chrome, which opens new possibilities. Starting from Odoo
    12, you can record videos of the failed test cases, and you can take screenshots
    of them as well.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Recording a video for a test case requires an `ffmpeg` package:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To install this, you need to execute the following command in the terminal
    (note that this command only works on a Debian-based OS):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To generate a video or screenshot, you will need to provide a directory location
    to store the video or screenshots.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you want to generate a screencast (video) of a test case, use the `--screencasts`
    command, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: ./odoo-bin -c server.conf -i my_hostel --test-enable --screenshots=/home/pga/odoo_test/
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to generate screenshots/screencasts for failed test cases, you need
    to run the server with the path to save the video or image files. When you run
    the test cases, and if a test case fails, Odoo will save a screenshot/video of
    the failed test case in the given directory.
  prefs: []
  type: TYPE_NORMAL
- en: To generate a video of a test case, Odoo uses the `ffmpeg` package. If you haven’t
    installed this package on the server, then it will only save a screenshot of a
    failed test case. After installing the package, you will be able to see the `mp4`
    file of any failed test case.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Generating videos for test cases can consume more space on disks, so use this
    option with caution and only when it is really necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that screenshots and videos are only generated for failed test
    cases, so if you want to test them, you need to write a test case that fails.
  prefs: []
  type: TYPE_NORMAL
- en: Populating random data for testing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have seen test cases that have been used to detect errors or bugs
    in business logic. However, at times, we need to test our development with large
    amounts of data. Generating large amounts of data can be a tedious job. Odoo provides
    a set of tools that helps you generate a lot of random data for your model. In
    this recipe, we will use the `populate` command to generate test data for the
    `hostel.room` and `hostel.room.member` models.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will continue using the `my_hostel` module from the previous
    recipe. We will add the `_populate_factories` method, which will be used to generate
    test data.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to generate data for the `hostel.room` model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `populate` folder to the `my_hostel` module. Also, add an `__init__.py`
    file with this content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `my_hostel/populate/hostel_data.py` file, and then add this code to generate
    the hostel room’s data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run this command to generate the hostel’s data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will generate 100 units of data for the hostel rooms. After generating
    the data, the process will be terminated. To see the hostel room’s data, run the
    command without the `populate` parameters.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we added the `populate` folder to the `my_hostel` module. This
    folder contains the code to populate the test data.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we added code to populate the room data. To generate random data,
    the `_populate_factories` method was used. The `_populate_factories` method returns
    factories for model fields, which will be used to generate random data. The `hostel.room`
    model has the required `name` and `room_no` fields, so in our example, we returned
    the generator for those fields. This generator will be used to generate random
    data for the `hostel room` record. We used the `populate.constant` generator for
    the name field; this will generate different names when we iterate during data
    generation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Just like `populate.constant`, Odoo provides several other generators to populate
    data; here is a list of those generators:'
  prefs: []
  type: TYPE_NORMAL
- en: '`populate.randomize(list)` will return a random element from the given list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate.cartesian(list)` is just like `randomize()`, but it will try to include
    all the values from the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate.iterate(list)` will iterate over a given list, and once all the elements
    are iterated, it will return based on `randomize` or random elements.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate.constant(str)` is used to generate formatted strings. You can also
    pass the `formatter` parameter to format values. By default, the formatter is
    a string-format function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate.compute(function)` is used when you want to compute a value based
    on your function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`populate.randint(a,` `b)` is used to generate a random number between the
    `a` and `b` parameters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These generators can be used to generate test data of your choice.
  prefs: []
  type: TYPE_NORMAL
- en: Another important attribute is `_populate_sizes`. It is used to define the number
    of records you want to generate based on the `--size` parameter. Its value always
    depends on the business object.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we generated a data hostel room model. To populate test data, you
    will need to use the `--size` and `--model` parameters. Internally, Odoo uses
    the `_populate` method to generate random records. The `_populate` method itself
    uses the `_populate_factories` method to get random data for records. The `_populate`
    method will generate data for the models given in the `--model` parameter, and
    the amount of test data will be based on the `_populate_sizes` attribute of the
    model. Based on our example, if we use `–-size=medium`, the data for 100 hostel
    rooms will be generated.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you run the `populate` command multiple times, the data will be generated
    multiple times as well. It’s important to use this carefully; if you run the command
    in a production database, it will generate test data in the production database
    itself. This is something you want to avoid.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'At times, you might like to generate relational data too. For example, with
    rooms, you might also want to create member records. To manage such records, you
    can use the `_populate_dependencies` attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'This will populate the data for dependencies before populating the current
    model. Once that is done, you can access the populated data via the `populated_models`
    registry:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding line will give you the list of companies that are populated before
    generating test data for the current model.
  prefs: []
  type: TYPE_NORMAL
