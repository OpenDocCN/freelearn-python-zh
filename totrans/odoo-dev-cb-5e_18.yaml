- en: '18'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '18'
- en: Automated Test Cases
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动化测试用例
- en: 'When it comes to developing large applications, using automated test cases
    is good practice to improve the reliability of your module. This makes your module
    more robust. Every year, Odoo releases a new version of its software, and automated
    test cases are very helpful in detecting regression in your application, which
    may have been caused by a version upgrade. Luckily, any Odoo framework comes with
    different automated testing utilities. Odoo includes the following three main
    types of tests:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到开发大型应用程序时，使用自动化测试用例是提高您模块可靠性的良好实践。这使得您的模块更加健壮。每年，Odoo都会发布其软件的新版本，自动化测试用例在检测应用程序中的回归（可能由版本升级引起）方面非常有帮助。幸运的是，任何Odoo框架都附带不同的自动化测试工具。Odoo包括以下三种主要的测试类型：
- en: '**A Python test case**: Used to test Python business logic'
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个Python测试用例**：用于测试Python业务逻辑'
- en: '**A JavaScript QUnit test**: Used to test JavaScript implementation in Odoo'
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**一个JavaScript QUnit测试**：用于测试Odoo中的JavaScript实现'
- en: '**Tours**: An integration test to check that Python and JavaScript work with
    each other properly'
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**旅游**：一个集成测试，用于检查Python和JavaScript是否能够正确地协同工作'
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下配方：
- en: Adding Python test cases
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加Python测试用例
- en: Running tagged Python test cases
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 运行标记的Python测试用例
- en: Setting up Headless Chrome for client-side test cases
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为客户端测试用例设置无头Chrome
- en: Adding client-side QUnit test cases
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加客户端QUnit测试用例
- en: Adding tour test cases
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加旅游测试用例
- en: Running client-side test cases from the UI
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从UI运行客户端测试用例
- en: Debugging client-side test cases
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试客户端测试用例
- en: Generating videos/screenshots for failed test cases
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为失败的测试用例生成视频/屏幕截图
- en: Populating random data for testing
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为测试填充随机数据
- en: Technical requirements
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'In this chapter, we will look at all the test cases in detail. In order to
    cover all of the test cases in a single module, we have created a small module.
    Its Python definition is as follows:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将详细查看所有测试用例。为了在一个模块中涵盖所有测试用例，我们创建了一个小型模块。其Python定义如下：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The Python code given here will help us to write test cases for Python business
    cases.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 这里给出的Python代码将帮助我们编写Python业务案例的测试用例。
- en: For JavaScript test cases, we have added the `int_color` widget from the *Creating
    custom widgets* recipe in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861), *Web*
    *Client Development*.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于JavaScript测试用例，我们从[*第15章*](B20997_15.xhtml#_idTextAnchor861)中“创建自定义小部件”的配方中添加了`int_color`小部件，*Web*
    *客户端开发*。
- en: 'You can grab this initial module from the GitHub repository of this room at
    the following link: [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter18/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter18/00_initial_module).'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下链接获取此初始模块：[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter18/00_initial_module](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter18/00_initial_module)。
- en: Adding Python test cases
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加Python测试用例
- en: Python test cases are used to check the correctness of business logic. In [*Chapter
    5*](B20997_05.xhtml#_idTextAnchor238), *Basic Server-Side Development*, you saw
    how you can modify the business logic of our existing app. This makes it even
    more important, as customization might break the app’s functionality. In this
    chapter, we will write a test case to validate the business logic to change a
    hostel room’s state.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Python测试用例用于检查业务逻辑的正确性。在[*第5章*](B20997_05.xhtml#_idTextAnchor238)“基本服务器端开发”中，您看到了如何修改现有应用程序的业务逻辑。由于定制可能会破坏应用程序的功能，这使得这一点尤为重要。在本章中，我们将编写一个测试用例来验证更改宿舍房间状态的业务逻辑。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will use the `my_hostel` module from the `Chapter18/00_initial_module` directory
    of the GitHub repository.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用GitHub仓库中`Chapter18/00_initial_module`目录下的`my_hostel`模块。
- en: How to do it...
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to add Python test cases to the `my_hostel` module:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将Python测试用例添加到`my_hostel`模块中：
- en: 'Add a new file, `tests/__init__.py`, as follows:'
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新文件，`tests/__init__.py`，如下所示：
- en: '[PRE1]'
  id: totrans-29
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add a `tests/test_hostel_room_state.py` file, and then add the test case, as
    follows:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`tests/test_hostel_room_state.py`文件，然后添加测试用例，如下所示：
- en: '[PRE2]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'To run the test cases, start the Odoo server with the following option:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要运行测试用例，请使用以下选项启动Odoo服务器：
- en: '[PRE3]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, check the server log. You will find the following logs if our test cases
    ran successfully:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，检查服务器日志。如果我们的测试用例运行成功，您将找到以下日志：
- en: '[PRE4]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You will see the `ERROR` log instead of `INFO` if a test case fails or there
    is an error.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 如果测试用例失败或出现错误，你将看到 `ERROR` 日志而不是 `INFO`。
- en: How it works...
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In Odoo, Python test cases are added to the `tests/` directory of the module.
    Odoo will automatically identify this directory and run the test under the folder.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 中，Python 测试用例被添加到模块的 `tests/` 目录中。Odoo 将自动识别此目录并在该文件夹下运行测试。
- en: Note
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*You also need to list your test case files in* `tests/__init__.py.` *If you
    don’t do that, that test case will* *not execute.*'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 你还需要在 `tests/__init__.py` 中列出你的测试用例文件。如果你不这样做，该测试用例将不会执行。
- en: 'Odoo uses Python’s `unittest` for Python test cases. To learn more about `unittest`,
    refer to [https://docs.python.org/3.5/library/unittest.html](https://docs.python.org/3.5/library/unittest.html).
    Odoo provides the following helper classes:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 使用 Python 的 `unittest` 进行 Python 测试用例。要了解更多关于 `unittest` 的信息，请参阅 [https://docs.python.org/3.5/library/unittest.html](https://docs.python.org/3.5/library/unittest.html)。Odoo
    提供以下辅助类：
- en: 'The `Common` class: This class provides common methods and setup for test cases.
    It includes functionalities such as creating and managing database transactions
    during the tests.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Common` 类：这个类提供了测试用例的公共方法和设置。它包括在测试期间创建和管理数据库事务等功能。'
- en: 'The `SavepointCase` class: This extends the Common class.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SavepointCase` 类：这个类扩展了 Common 类。'
- en: The `SavepointCase` provides additional features to handle savepoints during
    tests. This is useful when you want to roll back the changes made to the database
    during a test, ensuring that each test starts with a clean state,
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SavepointCase` 在测试期间提供了处理保存点的额外功能。当你想在测试期间回滚对数据库所做的更改，确保每个测试从一个干净的状态开始时，这非常有用，'
- en: 'The `TransactionCase` class: This class extends `SavepointCase` and provides
    transaction-related functionality. It helps to manage database transactions during
    the tests.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TransactionCase` 类：这个类扩展了 `SavepointCase` 并提供了事务相关的功能。它有助于在测试期间管理数据库事务。'
- en: 'The `HttpCase` class: This class is used to test HTTP requests and responses.
    It allows you to simulate HTTP requests and test the responses.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`HttpCase` 类：这个类用于测试 HTTP 请求和响应。它允许你模拟 HTTP 请求并测试响应。'
- en: 'The `BaseCase` class: This is a base class for various test cases in Odoo.
    It provides common functionality that can be reused in different test scenarios,'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`BaseCase` 类：这是 Odoo 中各种测试用例的基类。它提供了在不同测试场景中可重用的公共功能，'
- en: 'The `SingleTransactionCase` class: This class extends `TransactionCase` and
    ensures that each test case is executed within a single database transaction.
    This can be useful in scenarios where you want to isolate tests completely from
    each other.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SingleTransactionCase` 类：这个类扩展了 `TransactionCase` 并确保每个测试用例都在单个数据库事务中执行。这在需要完全隔离测试的场景中非常有用。'
- en: 'The `FormCase` class: This class is used to test form views and their interactions.
    It provides methods to simulate user interactions with form views.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FormCase` 类：这个类用于测试表单视图及其交互。它提供了模拟用户与表单视图交互的方法。'
- en: 'The `FunctionCase` class: This class is designed to test server-side Python
    functions. It helps in testing various functions and methods within the Odoo framework,
    wrapped over `unittest`.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FunctionCase` 类：这个类旨在测试服务器端 Python 函数。它有助于在 Odoo 框架中测试各种函数和方法，并包装在 `unittest`
    中。'
- en: These classes simplify the process of developing test cases. In our case, we
    have used `TransactionCase`. Now, `TransactionCase` runs each test case method
    in a different transaction. Once a test case method runs successfully, a transaction
    is automatically rolled back. This means the next test case will not have any
    modification made by the previous test case.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 这些类简化了开发测试用例的过程。在我们的案例中，我们使用了 `TransactionCase`。现在，`TransactionCase` 在不同的事务中运行每个测试用例方法。一旦一个测试用例方法成功运行，事务将自动回滚。这意味着下一个测试用例将不会受到前一个测试用例所做的任何修改。
- en: The class method starts from `test_` and is considered a test case. In our example,
    we have added two test cases. This checks the methods that change the hostel room’s
    state. The `self.assertEqual` method (`assertEqual()` in Python) is a `unittest`
    library function that is used in unit testing to check the equality of two values.
    This function will take three parameters as input and return a Boolean value,
    depending upon the `assert` condition. If both input values are equal `assertEqual()`
    will return `true` else return `false`) is used to check whether the test case
    runs successfully. We have checked the hostel room state after performing operations
    on the hostel room’s record. So, if the developer makes a mistake and the method
    does not change states as expected, the test case will fail.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 类方法从`test_`开始，被视为测试用例。在我们的例子中，我们添加了两个测试用例。这检查了改变宿舍房间状态的函数。`self.assertEqual`方法（Python中的`assertEqual()`）是`unittest`库中的一个函数，用于单元测试中检查两个值的相等性。这个函数将接受三个参数作为输入，并返回一个布尔值，取决于`assert`条件。如果两个输入值相等，`assertEqual()`将返回`true`，否则返回`false`）用于检查测试用例是否成功运行。我们在对宿舍房间记录执行操作后检查了宿舍房间的状态。因此，如果开发者犯了一个错误，并且方法没有按预期改变状态，测试用例将失败。
- en: Important information
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: '*Note that the* `setUp()` *method will automatically call for every test case
    we run, so, in this recipe, we have added two test cases so that* `setUp()` *will
    call twice. As per the code in this recipe, there will only be one record of the
    hostel room present during testing because, with* `TransactionCase`*, the transaction
    is rolled back with every* *test case.*'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '*请注意，* `setUp()` *方法将自动为每个运行的测试用例调用，因此，在这个菜谱中，我们添加了两个测试用例，以便* `setUp()` *将调用两次。根据这个菜谱中的代码，测试期间只会有一条宿舍房间记录，因为，在*
    `TransactionCase`* 中，每个测试用例都会回滚事务。'
- en: In Python, a docstring is a string literal that occurs as the first statement
    in a module, function, class, or method definition. Docstrings are used to provide
    documentation about what a piece of code does. They serve as a form of inline
    documentation that can be accessed using various tools, such as the `help()` function..
    This can be very helpful to check the status of a particular test case.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，文档字符串（docstring）是一种字符串字面量，它出现在模块、函数、类或方法定义的第一行。文档字符串用于提供关于代码片段功能的文档。它们作为内联文档的一种形式，可以使用各种工具访问，例如`help()`函数。这可以帮助检查特定测试用例的状态。
- en: There’s more...
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The test suite provides the following additional test utility classes:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 测试套件提供了以下额外的测试实用类：
- en: '`SingleTransactionCase`: Test cases generated through this class will run all
    cases in a single transaction, so changes made from one test case will be available
    in a second test case. In this way, the transaction begins with the first test
    method and is only rolled back at the end of the last test case.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SingleTransactionCase`：通过这个类生成的测试用例将在单个事务中运行所有用例，因此一个测试用例所做的更改将在第二个测试用例中可用。这样，事务从第一个测试方法开始，只在最后一个测试用例结束时回滚。'
- en: '`SavepointCase`: This is the same as `SingleTransactionCase`, but in this case,
    test methods run inside a rolled-back save point, instead of having all test methods
    in a single transaction. This is used to create large test cases and make them
    faster, by generating test data only once. Here, we use the `setUpClass()` method
    to generate the initial test data.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SavepointCase`：这与`SingleTransactionCase`相同，但在这个情况下，测试方法是在回滚的保存点内运行的，而不是在单个事务中运行所有测试方法。这是通过只生成一次测试数据来创建大型测试用例并使其更快的方法。在这里，我们使用`setUpClass()`方法生成初始测试数据。'
- en: Running tagged Python test cases
  id: totrans-60
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运行标记的Python测试用例
- en: When you run the Odoo server with the `--test-enabled` module name, the test
    cases run immediately after the module is installed. If you want to run a test
    case after the installation of all the modules, or if you just want to run a test
    case for only one module, a `tagged()` decorator is the answer.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`--test-enabled`模块名称运行Odoo服务器时，测试用例将在模块安装后立即运行。如果您想在所有模块安装后运行测试用例，或者如果您只想为单个模块运行测试用例，`tagged()`装饰器就是答案。
- en: In this recipe, we’ll show you how to utilize this decorator specifically for
    shaping test cases. It’s important to note that this decorator only applies to
    classes; it doesn’t affect functions or methods. Tags can be modified by adding
    a minus (-) sign as a prefix, which removes them instead of adding or selecting
    them. For example, if you want to prevent your test from being executed by default,
    you can remove the standard tag.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将向您展示如何具体使用这个装饰器来塑造测试用例。需要注意的是，这个装饰器仅适用于类；它不会影响函数或方法。可以通过添加一个前缀减号（-）来修改标签，这将移除它们而不是添加或选择它们。例如，如果您想防止默认执行您的测试，您可以移除标准标签。
- en: Getting ready
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will use the `my_hostel` module from the last recipe. We
    will modify the sequence of the test case.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用上一道菜谱中的`my_hostel`模块。我们将修改测试用例的顺序。
- en: How to do it...
  id: totrans-65
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to add tags to the Python test cases:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为Python测试用例添加标签：
- en: 'Add a `tagged()` decorator (such as the following) to the test class to run
    it after the installation of all modules:'
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`tagged()`装饰器（如下所示）添加到测试类中，以便在所有模块安装后运行它：
- en: '[PRE5]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'After that, run the test case as follows, just like before:'
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 之后，按照以下方式运行测试用例，就像之前一样：
- en: '[PRE6]'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Now, check the server log. This time, you will see our test case log after
    the following logs, meaning that our test cases were run after all of the modules
    were installed, as follows:'
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，检查服务器日志。这次，您将在以下日志之后看到我们的测试用例日志，这意味着我们的测试用例是在所有模块安装之后运行的，如下所示：
- en: '[PRE7]'
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: In these logs, the first line shows that nine modules were loaded. The second
    line shows that all requested modules and their dependencies were installed successfully,
    and the third line shows that it will start running the test cases that are tagged
    as `post_install`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些日志中，第一行显示加载了九个模块。第二行显示所有请求的模块及其依赖项都安装成功，第三行显示将开始运行标记为`post_install`的测试用例。
- en: How it works...
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: By default, all of the test cases are tagged with `standard`, `at_install`,
    and the current module’s technical name (in our case, the technical name is `my_hostel`).
    Consequently, if you do not use a `tagged()` decorator, your test case will have
    these three tags.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，所有测试用例都带有`standard`、`at_install`和当前模块的技术名称（在我们的案例中，技术名称是`my_hostel`）。因此，如果您不使用`tagged()`装饰器，您的测试用例将具有这三个标签。
- en: In our case, we want to run the test case after installing all of the modules.
    To do so, we have added a `tagged()` decorator to the `TestHostelRoomState` class.
    By default, the test case has the `at_install` tag. Because of this tag, your
    test case will run immediately after the module is installed; it will not wait
    for other modules to be installed. We don’t want this, so to remove the `at_install`
    tag, we have added `-at_install` to the tagged function. The tags that are prefixed
    by `-` will remove that tag.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们希望在安装所有模块后运行测试用例。为此，我们在`TestHostelRoomState`类中添加了一个`tagged()`装饰器。默认情况下，测试用例具有`at_install`标签。因为这个标签，您的测试用例将在模块安装后立即运行；它不会等待其他模块安装。我们不希望这样，所以为了移除`at_install`标签，我们在标记函数中添加了`-at_install`。以`-`为前缀的标签将移除该标签。
- en: By adding `-at_install` to the `tagged()` function, we stopped the test case
    execution after the module installation. As we haven’t specified any other tag
    in this, the test case won’t run.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 通过在`tagged()`函数中添加`-at_install`，我们停止了模块安装后的测试用例执行。由于我们没有在此指定任何其他标签，因此测试用例不会运行。
- en: So, we have added a `post_install` tag. This tag specifies that the test case
    needs to be run after the installation of all modules is completed.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们添加了一个`post_install`标签。这个标签指定了在所有模块安装完成后需要运行测试用例。
- en: 'As you have seen, all test cases are tagged with the `standard` tag, by default.
    Odoo will run all of the test cases tagged with the `standard` tag, in case you
    don’t want to run the specific test case all of the time and only want to run
    it when it is requested. To do so, you need to remove the `standard` tag by adding
    `-standard` to the `tagged()` decorator, and you need to add a custom tag like
    this:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您所看到的，所有测试用例默认都带有`standard`标签。Odoo将在您不希望始终运行特定测试用例而只想在请求时运行它的情况下，运行所有带有`standard`标签的测试用例。为此，您需要通过在`tagged()`装饰器中添加`-standard`来移除`standard`标签，并需要添加一个自定义标签，如下所示：
- en: '[PRE8]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'All of the non-standard test cases will not run with the `--test-enable` option.
    To run the preceding test case, you need to use the `--test-tags` option, as follows
    (note that, here, we do not need to pass the `--test-enable` option explicitly):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 所有非标准测试用例都不会在`--test-enable`选项下运行。要运行前面的测试用例，您需要使用`--test-tags`选项，如下所示（注意，在这里，我们不需要显式传递`--test-enable`选项）：
- en: '[PRE9]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: There’s more...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'During the development of the test case, it is important to run the test case
    for just one module. By default, the technical name of the module is added as
    a tag, so you can use the module’s technical name with the `--test-tags` option.
    For example, if you want to run test cases for the `my_hostel` module, then you
    can run the server like this:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 在测试用例的开发过程中，运行单个模块的测试用例非常重要。默认情况下，模块的技术名称会被添加为标签，因此您可以使用模块的技术名称与`--test-tags`选项一起使用。例如，如果您想为`my_hostel`模块运行测试用例，那么您可以像这样运行服务器：
- en: '[PRE10]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The command given here will run the test case in the `my_hostel` module, but
    it will still decide the sequence based on the `at_install` and `post_install`
    options.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这里给出的命令将在`my_hostel`模块中运行测试用例，但它仍然会根据`at_install`和`post_install`选项来决定顺序。
- en: Setting up Headless Chrome for client-side test cases
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置客户端测试用例的无头Chrome
- en: Odoo employs Headless Chrome to execute JavaScript and tour test cases, facilitating
    the simulation of end-user environments. Headless Chrome, devoid of the complete
    UI, enables seamless execution of JavaScript test cases, ensuring a consistent
    testing environment.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo使用无头Chrome来执行JavaScript和巡检测试用例，便于模拟最终用户环境。无头Chrome没有完整的UI，使得JavaScript测试用例的执行无缝，确保了测试环境的连贯性。
- en: How to do it...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: You will need to install Chrome to enable a JavaScript test case. For the development
    of the modules, we will mostly use the desktop OS. Consequently, if you have a
    Chrome browser installed on your system, then there is no need to install it separately.
    You can run client-side test cases with desktop Chrome. Make sure that you have
    a Chrome version higher than Chrome 59\. Odoo also supports the Chromium browser.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要安装Chrome以启用JavaScript测试用例。在模块的开发中，我们将主要使用桌面操作系统。因此，如果您在系统上安装了Chrome浏览器，那么就没有必要单独安装它。您可以使用桌面Chrome运行客户端测试用例。请确保您的Chrome版本高于Chrome
    59。Odoo还支持Chromium浏览器。
- en: Note
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Headless Chrome client-side test cases work fine with macOS and Linux, but Odoo
    does not support Headless Chrome test cases on Windows.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 无头Chrome客户端测试用例在macOS和Linux上运行良好，但Odoo不支持Windows上的无头Chrome测试用例。
- en: 'The situation changes slightly when you want to run test cases on the production
    server or Server OS. Server OS does not have a GUI, so you need to install Chrome
    differently. If you are using a Debian-based OS, you can install Chromium with
    the following command:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当您想在生产服务器或服务器操作系统上运行测试用例时，情况会有所变化。服务器操作系统没有GUI，因此您需要以不同的方式安装Chrome。如果您使用的是基于Debian的操作系统，可以使用以下命令安装Chromium：
- en: '[PRE11]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Important information
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: '*Ubuntu 22.04 Server Edition has not enabled the* `universe` *repository by
    default. So, it’s possible that installing* `chromium-browser` *will show an installation
    candidate error. To fix this error, enable the* `universe` *repository with the
    following command –* `sudo` `add-apt-repository universe`*.*'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '*Ubuntu 22.04服务器版默认未启用* `universe` *仓库。因此，安装* `chromium-browser` *可能会显示安装候选错误。要修复此错误，请使用以下命令启用`universe`仓库
    –* `sudo` `add-apt-repository universe`*.*'
- en: 'Odoo also uses `websocket-client` Python library. To install it, use the following
    command:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo还使用`websocket-client` Python库。要安装它，请使用以下命令：
- en: '[PRE12]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now, your system is ready to run client-side test cases.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您的系统已准备好运行客户端测试用例。
- en: How it works...
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Odoo uses Headless Chrome for JavaScript test cases. The reason behind this
    is that it runs test cases in the background, so it can be run on Server OS, too.
    Headless Chrome prefers to run the Chrome browser in the background, without opening
    a GUI browser. Odoo opens a Chrome tab in the background and starts running the
    test cases in it. It also uses **jQuery’s** **QUnit** for JavaScript test cases.
    In the next few recipes, we will create a QUnit test case for our custom JavaScript
    widgets.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo使用无头Chrome进行JavaScript测试用例。这样做的原因是它在后台运行测试用例，因此也可以在服务器操作系统上运行。无头Chrome更喜欢在后台运行Chrome浏览器，而不打开GUI浏览器。Odoo在后台打开一个Chrome标签页并开始在其中运行测试用例。它还使用**jQuery**的**QUnit**进行JavaScript测试用例。在接下来的几个菜谱中，我们将为我们的自定义JavaScript小部件创建一个QUnit测试用例。
- en: For test cases, Odoo opens Headless Chrome in a separate process, so to find
    out the status of a test case running in that process, the Odoo server uses WebSockets.
    The `websocket-client` Python library is used to manage WebSockets to communicate
    with Chrome from the Odoo server.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 对于测试用例，Odoo 在一个单独的进程中打开 Headless Chrome，因此要找出在该进程中运行的测试用例的状态，Odoo 服务器使用 WebSockets。`websocket-client`
    Python 库用于管理 WebSockets，以便从 Odoo 服务器与 Chrome 进行通信。
- en: Adding client-side QUnit test cases
  id: totrans-103
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加客户端 QUnit 测试用例
- en: Building new fields or views is very simple in Odoo. In just a few lines of
    XML, you can define a new view. However, under the hood, it uses a lot of JavaScript.
    Modifying/adding new features on the client side is complex, and it might break
    a few things. Most client-side issues go unnoticed, as most errors are only displayed
    in the console. So, QUnit test cases are used in Odoo to check the correctness
    of different JavaScript components.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 中构建新的字段或视图非常简单。只需几行 XML，您就可以定义一个新的视图。然而，在底层，它使用了大量的 JavaScript。在客户端修改/添加新功能是复杂的，可能会破坏一些东西。大多数客户端问题都未被注意到，因为大多数错误只会在控制台中显示。因此，Odoo
    使用 QUnit 测试用例来检查不同 JavaScript 组件的正确性。
- en: QUnit is a JavaScript testing framework primarily used for client-side testing.
    It’s commonly associated with testing JavaScript code in web applications, particularly
    for frontend development. QUnit is often used to test the logic and behavior of
    JavaScript functions, modules, and components in a web browser environment.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit 是一个主要用于客户端测试的 JavaScript 测试框架。它通常与测试 Web 应用程序中的 JavaScript 代码相关联，尤其是用于前端开发。QUnit
    通常用于测试在浏览器环境中 JavaScript 函数、模块和组件的逻辑和行为。
- en: Getting ready
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will continue using the `my_hostel` module from the previous
    recipe. We will add a QUnit test case for the `int_color` widget.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将继续使用前一个菜谱中的 `my_hostel` 模块。我们将为 `int_color` 小部件添加一个 QUnit 测试用例。
- en: How to do it...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to add JavaScript test cases to the `int_color` widget:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将 JavaScript 测试用例添加到 `int_color` 小部件：
- en: We have already implemented a widget for `int_color` using JavaScript in our
    module.
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已经在我们的模块中使用了 JavaScript 实现了 `int_color` 小部件。
- en: 'Add `/static/tests/colorpicker_tests.js` with the following code:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `/static/tests/colorpicker_tests.js` 中：
- en: 'Create a `beforeEach` function to load the data field-wise before applying
    the test case:'
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个 `beforeEach` 函数，在应用测试用例之前按字段加载数据：
- en: '[PRE13]'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add a `QUnit` test case for the color picker field, like this:'
  id: totrans-114
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为颜色选择器字段添加一个 `QUnit` 测试用例，如下所示：
- en: '[PRE14]'
  id: totrans-115
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Add the following code to `__manifest__.py` to register it in the test suite:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到 `__manifest__.py` 中以将其注册到测试套件中：
- en: '[PRE15]'
  id: totrans-117
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To run this test case, start your server with the following command in the
    Terminal:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此测试用例，请在终端中使用以下命令启动您的服务器：
- en: '[PRE16]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'To check that the tests have run successfully, search for the following log:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查测试是否成功运行，搜索以下日志：
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: How it works...
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In Odoo, JavaScript test cases are added to the `/static/tests/` directory.
    In *step 1*, we added a `colorpicker_test.js` file for the test case. In that
    file, we imported the registry for use in `serviceRegistry` and `setupViewRegistries`
    and`makeView` from test helpers. `makeView` is imported because we created the
    `int_color` widget for the form view, so to test the widget, we will need the
    form view.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 中，JavaScript 测试用例被添加到 `/static/tests/` 目录。在 *步骤 1* 中，我们添加了一个 `colorpicker_test.js`
    文件用于测试用例。在该文件中，我们导入了用于 `serviceRegistry` 和 `setupViewRegistries` 以及 `makeView`
    的注册表，因为我们在表单视图中创建了 `int_color` 小部件，所以为了测试小部件，我们需要表单视图。
- en: '`@web/../tests/helpers/utils` will provide us with the test utilities we require
    to build the JavaScript test cases. If you don’t know how JavaScript import works,
    refer to the *Extending CSS and JavaScript for the website* recipe in [*Chapter
    14*](B20997_14.xhtml#_idTextAnchor734), *CMS* *Website Development*.'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`@web/../tests/helpers/utils` 将为我们提供构建 JavaScript 测试用例所需的测试工具。如果您不了解 JavaScript
    的导入方式，请参考 [*第 14 章*](B20997_14.xhtml#_idTextAnchor734) 中的 *扩展 CSS 和 JavaScript
    以用于网站* 菜谱，*CMS* *网站开发*。'
- en: Odoo client-side test cases are built with the QUnit framework, which is the
    jQuery framework for the JavaScript unit test case. Refer to [https://qunitjs.com/](https://qunitjs.com/)
    to learn more about this. The `beforeEach` function is called before running the
    test cases, and this helps to initialize the test data. The reference of the `beforeEach`
    function is provided by the QUnit framework itself.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo客户端测试用例是用QUnit框架构建的，这是JavaScript单元测试用例的jQuery框架。有关更多信息，请参阅[https://qunitjs.com/](https://qunitjs.com/)。`beforeEach`函数在运行测试用例之前被调用，这有助于初始化测试数据。`beforeEach`函数的引用由QUnit框架本身提供。
- en: 'We initialized some data in the `beforeEach` function. Let’s see how that data
    is used in the test case. The client-side test case runs in an isolated (mock)
    environment, and it doesn’t make a connection to the database, so for these test
    cases, we need to create test data. Internally, Odoo creates the mock server to
    mimic the `serverData` property as the database. Consequently, in `beforeEach`,
    we initialized our test data in the `serverData` property. The keys in the `serverData`
    property are considered a table, and the values contain information about the
    fields and the table rows. The `fields` key is used to define table fields, and
    the `records` key is used for the table rows. In our example, we added a `room`
    table with three fields – `name(char)`, `room_no(char)`, and `color(integer)`.
    Note that, here, you can use any Odoo fields, even relational fields – for example,
    `{string: "M2o Field", type: "many2one", relation: ''partner''}`. We also added
    two room records with the `records` key.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '我们在`beforeEach`函数中初始化了一些数据。让我们看看这些数据如何在测试用例中使用。客户端测试用例在隔离（模拟）环境中运行，并且它不会连接到数据库，因此对于这些测试用例，我们需要创建测试数据。内部，Odoo创建模拟服务器来模拟`serverData`属性作为数据库。因此，在`beforeEach`中，我们在`serverData`属性中初始化了我们的测试数据。`serverData`属性中的键被视为一个表，值包含有关字段和表行的信息。`fields`键用于定义表字段，`records`键用于表行。在我们的例子中，我们添加了一个包含三个字段（`name(char)`、`room_no(char)`和`color(integer)`）的`room`表。请注意，在这里，您可以使用任何Odoo字段，甚至是关系字段——例如，`{string:
    "M2o Field", type: "many2one", relation: ''partner''}`。我们还使用`records`键添加了两个房间记录。'
- en: Then, we added the test cases with the `QUnit.test` function. The first argument
    in the function is `string` to describe the test case. The second argument is
    the function to which you need to add code for the test cases. This function is
    called from the QUnit framework, and it passes the assert utilities as the argument.
    In our example, we passed the number of expected test cases in the `assert.expect`
    function. We are adding two test cases, so we passed `2`.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用`QUnit.test`函数添加了测试用例。函数中的第一个参数是`string`，用于描述测试用例。第二个参数是需要添加测试用例代码的函数。此函数由QUnit框架调用，并传递断言实用工具作为参数。在我们的例子中，我们在`assert.expect`函数中传递了期望的测试用例数量。我们添加了两个测试用例，因此我们传递了`2`。
- en: 'We want to add to the test case the `int_color` widget in the editable form
    view, so we created the editable form view with `makeView`. The `makeView` function
    accepts different arguments, as follows:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想在可编辑表单视图中添加`int_color`小部件到测试用例中，因此我们使用`makeView`创建了可编辑表单视图。`makeView`函数接受不同的参数，如下所示：
- en: '`resModel` is the name of the model for which the given view is created. All
    of the models are listed in the `resModel` as properties. We want to create a
    view for the room model, so in our example, we used the room as a model.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`resModel`是给定视图创建的模型的名称。所有模型都在`resModel`中以属性的形式列出。我们想为房间模型创建一个视图，所以在我们的例子中，我们使用了房间作为模型。'
- en: '`serverData` is the record that we are going to use in the view. The views
    key from `serverData` is the definition of the view you want to create. Because
    we want to test the `int_color` widget, we passed the view definition with the
    widget. Note that you can only use the fields that are defined in the model.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`serverData`是我们将在视图中使用的记录。`serverData`中的视图键是您想要创建的视图的定义。因为我们想测试`int_color`小部件，所以我们通过小部件传递了视图定义。请注意，您只能使用在模型中定义的字段。'
- en: '`Type`: The type of view.'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Type`：视图的类型。'
- en: After creating the form view with the `int_color` widget, we added two test
    cases. The first one is used to check the number of color pills on the UI, and
    the second test case is used to check that the pill is activated correctly after
    the click. We have the `strictEqual` function from the asserted utility of the
    QUnit framework. The `strictEqual` function passes the test case if the first
    two arguments match. If they do not match, it will fail the test case.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用`int_color`小部件创建表单视图后，我们添加了两个测试用例。第一个用例用于检查UI上的颜色药丸数量，第二个测试用例用于检查点击后药丸是否正确激活。我们有来自QUnit框架断言实用工具的`strictEqual`函数。如果前两个参数匹配，`strictEqual`函数将通过测试用例。如果不匹配，它将使测试用例失败。
- en: There’s more...
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: There are a few more assert functions available for QUnit test cases, such as
    `assert.deepEqual`, `assert.ok`, and `assert.notOk`. To learn more about QUnit,
    refer to its documentation at [https://qunitjs.com/](https://qunitjs.com/).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于QUnit测试用例，还有一些其他的断言函数可用，例如`assert.deepEqual`、`assert.ok`和`assert.notOk`。要了解更多关于QUnit的信息，请参考其文档[https://qunitjs.com/](https://qunitjs.com/)。
- en: Adding tour test cases
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加游览测试用例
- en: You have now seen the Python and JavaScript test cases. Both of these work in
    an isolated environment, and they don’t interact with each other. To test integration
    between JavaScript and Python code, tour test cases are used.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在已经看到了Python和JavaScript测试用例。这两个都在隔离环境中工作，并且它们之间不交互。为了测试JavaScript和Python代码之间的集成，使用游览测试用例。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will continue using the `my_hostel` module from the previous
    recipe. We will add a tour test case to check the flow of the room model. Also,
    make sure you have installed the `web_tour` module or have added the `web_tour`
    module dependency to the manifest.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将继续使用之前配方中的`my_hostel`模块。我们将添加一个游览测试用例来检查房间模型的流程。同时，请确保你已经安装了`web_tour`模块，或者已经将`web_tour`模块依赖项添加到清单中。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to add a tour test case for `rooms`:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为`rooms`添加游览测试用例：
- en: 'Add a `/static/src/js/my_hostel_tour.js` file, and then add a tour as follows:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`/static/src/js/my_hostel_tour.js`文件，然后添加如下所示的游览：
- en: '[PRE18]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Add steps for the test tour:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为测试游览添加步骤：
- en: '[PRE19]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the `my_hostel_tour.js` file to the test assets:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`my_hostel_tour.js`文件添加到测试资源中：
- en: '[PRE20]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a `/tests/test_tour.py` file, and run the tour through `HttpCase`, as follows:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个`/tests/test_tour.py`文件，并通过`HttpCase`运行游览，如下所示：
- en: '[PRE21]'
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'In order to run test cases, start the Odoo server with the following option:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 为了运行测试用例，使用以下选项启动Odoo服务器：
- en: '[PRE22]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Now, check the server log. Here, you will find the following logs if our test
    cases ran successfully:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，检查服务器日志。如果我们的测试用例运行成功，你将在这里找到以下日志：
- en: '[PRE23]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: How it works...
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to create tour test cases, you need to create the UI tour first. If
    you want to learn more about UI tours, refer to the *Improve onboarding with tours*
    recipe in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861), *Web* *Client Development*.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了创建游览测试用例，你需要首先创建UI游览。如果你想了解更多关于UI游览的信息，请参考[*第15章*](B20997_15.xhtml#_idTextAnchor861)中的*使用游览改进欢迎流程*配方，*Web客户端开发*。
- en: In *step 1*, we registered a new tour with the name `hostel_tour`. This tour
    is exactly like the tour we created in the *Improve onboarding with tours* recipe
    in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861). In *step 2*, we added the
    steps for the tours.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*中，我们注册了一个名为`hostel_tour`的新游览。这个游览与我们在[*第15章*](B20997_15.xhtml#_idTextAnchor861)中的*使用游览改进欢迎流程*配方中创建的游览完全一样。在*步骤2*中，我们添加了游览的步骤。
- en: Here, we have two main changes compared to the onboarding tour. First, we added
    a `test=true` parameter for the tour definition; second, we added one extra property,
    `run`. In the `run` function, you have to write the logic to perform the operation
    that is normally done by the user. For example, in the fourth step of the tour,
    we ask the user to enter the room title.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，与欢迎游览相比，我们有两个主要的变化。首先，我们在游览定义中添加了一个`test=true`参数；其次，我们添加了一个额外的属性，`run`。在`run`函数中，你必须编写执行通常由用户完成的操作的逻辑。例如，在游览的第四步中，我们要求用户输入房间标题。
- en: 'To automate this step, we added a `run` function to set the value in the `title`
    field. The `run` function passes the action utility as the parameter. This provides
    some shortcuts to perform basic actions. The most important ones are as follows:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 为了自动化这一步骤，我们添加了一个`run`函数来设置`title`字段的值。`run`函数将动作实用工具作为参数传递。这提供了一些执行基本操作的快捷方式。其中最重要的如下：
- en: '`actions.click(element)` is used to click on a given element.'
  id: totrans-158
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions.click(element)`用于点击指定的元素。'
- en: '`actions.dblclick(element)` is used to double-click on a given element.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions.dblclick(element)`用于在给定元素上执行双击操作。'
- en: '`actions.tripleclick(element)` is used to triple-click on a given element.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions.tripleclick(element)`用于在给定元素上执行三击操作。'
- en: '`actions.text(string)` is used to set the input values.'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions.text(string)`用于设置输入值。'
- en: '`actions.drag_and_drop(to, element)` is used to drag and drop an element.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions.drag_and_drop(to, element)`用于拖放元素。'
- en: '`actions.keydown(keyCodes, element)` is used to trigger particular keyboard
    events on an element.'
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions.keydown(keyCodes, element)`用于在元素上触发特定的键盘事件。'
- en: '`actions.auto()` is the default action. When you don’t pass the `run` function
    in the tour step, `actions.auto()` is performed. This usually clicks on the trigger
    element of the tour step. The only exception here is an input element. If the
    trigger element is `input`, the tour will set the default value, `Test`, in the
    input. That is why we don’t need to add `run` functions to all of the steps.'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`actions.auto()`是默认操作。当您在巡游步骤中不传递`run`函数时，将执行`actions.auto()`。这通常点击巡游步骤的触发元素。唯一的例外是输入元素。如果触发元素是`input`，巡游将在输入中设置默认值`Test`。这就是为什么我们不需要在所有步骤中添加`run`函数。'
- en: Alternatively, you can perform whole actions manually if default actions are
    not enough. In the next tour step, we want to set a value for the color picker.
    Note that we used the manual action because default values won’t help here. Consequently,
    we added the `run` method with the basic jQuery code to click on the third pill
    of the color picker. Here, you will find the trigger element with the `this.$anchor`
    property.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果默认操作不够用，您可以手动执行整个操作。在下一个巡游步骤中，我们想要为颜色选择器设置一个值。请注意，我们使用了手动操作，因为默认值在这里没有帮助。因此，我们添加了带有基本jQuery代码的`run`方法来点击颜色选择器的第三个药丸。在这里，您将找到具有`this.$anchor`属性的触发元素。
- en: 'By default, registered tours are displayed to the end user to improve the onboarding
    experience. In order to run them as a test case, you need to run them in Headless
    Chrome. To do so, you need to use the `HttpCase` Python test case. This provides
    the `browser_js` method, which opens the URL and executes the command passed as
    the second parameter. You can run the tour manually, like this:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，注册的巡游会显示给最终用户，以改善入职体验。为了将它们作为测试用例运行，您需要在无头Chrome中运行它们。为此，您需要使用`HttpCase`
    Python测试用例。这提供了`browser_js`方法，它打开URL并执行作为第二个参数传递的命令。您可以手动运行巡游，如下所示：
- en: '[PRE24]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In our example, we passed the name of the tour as the argument in the `browser_js`
    method. The next parameter is used to wait for a given object to be ready before
    performing the first command. The last parameter in the `browser_js()` method
    is the name of the user. This username will be used to create a new test environment,
    and all of the test actions will be performed on behalf of this user.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们将巡游的名称作为`browser_js`方法中的参数传递。下一个参数用于在执行第一个命令之前等待给定对象就绪。`browser_js()`方法中的最后一个参数是用户名。此用户名将用于创建新的测试环境，并且所有测试操作都将代表此用户执行。
- en: Running client-side test cases from the UI
  id: totrans-169
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从UI运行客户端测试用例
- en: Odoo provides a way to run client-side test cases from the UI. By running the
    test case from the UI, you will be able to see each step of the test case in action.
    This way, you can verify that the UI test case works exactly as you wanted.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo提供了一种从UI运行客户端测试用例的方法。通过从UI运行测试用例，您将能够看到测试用例的每个步骤的实际操作。这样，您可以验证UI测试用例是否完全按照您期望的方式工作。
- en: How to do it...
  id: totrans-171
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: You can run both the `QUnit` test case and the tours test case from the UI.
    It is not possible to run Python test cases from the UI, as it runs on the server
    side. In order to see the options to run test cases from the UI, you need to enable
    developer mode.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从UI运行`QUnit`测试用例和巡游测试用例。由于Python测试用例在服务器端运行，因此无法从UI运行。为了看到从UI运行测试用例的选项，您需要启用开发者模式。
- en: Running QUnit test cases from the UI
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从UI运行QUnit测试用例
- en: 'Click on the bug icon to open the drop-down menu, as shown in the following
    figure. Click on the **Run JS** **Tests** option:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 点击bug图标以打开下拉菜单，如图所示。点击**运行JS测试**选项：
- en: '![Figure 18.1 – The option to run test cases](img/B20997_18_01.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图18.1 – 运行测试用例的选项](img/B20997_18_01.jpg)'
- en: Figure 18.1 – The option to run test cases
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.1 – 运行测试用例的选项
- en: 'This will open the QUnit suite, and it will start running the test cases one
    by one, as shown in the following screenshot. By default, it will only show the
    failed test cases. To show all the passed test cases, uncheck the **Hide passed
    tests** checkbox, as shown in the following screenshot:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开QUnit套件，并开始逐个运行测试用例，如下面的屏幕截图所示。默认情况下，它只会显示失败的测试用例。要显示所有通过测试用例，取消选中**隐藏通过测试**复选框，如下面的屏幕截图所示：
- en: '![Figure 18.2 – The results of the QUnit test cases](img/B20997_18_02.jpg)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![图18.2 – QUnit测试用例的结果](img/B20997_18_02.jpg)'
- en: Figure 18.2 – The results of the QUnit test cases
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.2 – QUnit测试用例的结果
- en: Running tours from the UI
  id: totrans-180
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 从UI运行导游
- en: 'Click on the bug icon to open the drop-down menu, as shown in the following
    screenshot, and then click on **Start Tour**:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 点击bug图标以打开下拉菜单，如以下屏幕截图所示，然后点击**开始导游**：
- en: '![Figure 18.3 – The option to run tour test cases](img/B20997_18_03.jpg)'
  id: totrans-182
  prefs: []
  type: TYPE_IMG
  zh: '![图18.3 – 运行所有测试用例的选项](img/B20997_18_03.jpg)'
- en: Figure 18.3 – The option to run tour test cases
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.3 – 运行导游测试用例的选项
- en: 'This will open a dialog with a list of registered tours, as you can see in
    the following screenshot. Click on the play button on the side to run the tour:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开一个包含已注册导游列表的对话框，如以下屏幕截图所示。点击旁边的播放按钮以运行导游：
- en: '![Figure 18.4 – A list of tour test cases](img/B20997_18_04.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![图18.4 – 导游测试用例列表](img/B20997_18_04.jpg)'
- en: Figure 18.4 – A list of tour test cases
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.4 – 导游测试用例列表
- en: The test tours only display in a list if you have enabled test assets mode.
    If you can’t find the `hostel_tour` tour in the list, make sure you have activated
    test assets mode.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已启用测试资产模式，测试导游才会以列表形式显示。如果您在列表中找不到`hostel_tour`导游，请确保您已激活测试资产模式。
- en: How it works...
  id: totrans-188
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The UI for QUnit is provided by the QUnit framework itself. Here, you can filter
    the test cases for the modules. You can even run a test case for just one module.
    With the UI, you can see the progress of each test case, and you can drill down
    to each step of the test case. Internally, Odoo just opens the same URL in Headless
    Chrome.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: QUnit的UI由QUnit框架本身提供。在这里，您可以筛选模块的测试用例。您甚至可以为单个模块运行测试用例。通过UI，您可以查看每个测试用例的进度，并且可以深入到测试用例的每个步骤。内部，Odoo只是打开相同的URL在Headless
    Chrome中。
- en: Clicking on the **Run tours** option will display the list of available tours.
    By clicking on the play button on the list, you can run the tour. Note that when
    the tour runs via the command-line options, it runs in the rolled-back transaction,
    so changes made through the tour are rolled back after the tour is successful.
    However, when the tour runs from the UI, it works just as though a user was operating
    it, meaning changes made from the tour are not rolled back and stay there, so
    use this option carefully.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 点击**运行导游**选项将显示可用导游的列表。通过点击列表上的播放按钮，您可以运行导游。请注意，当导游通过命令行选项运行时，它将在回滚事务中运行，因此导游期间所做的更改将在导游成功后回滚。然而，当导游从UI运行时，它就像用户操作一样工作，这意味着导游所做的更改不会回滚并保留在那里，因此请谨慎使用此选项。
- en: Debugging client-side test cases
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试客户端测试用例
- en: Developing complex client-side test cases can be a headache. In this recipe,
    you will learn how you can debug the client-side test cases in Odoo. Instead of
    running all of the test cases, we will run just the one. Additionally, we will
    display the UI of the test case.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 开发复杂的客户端测试用例可能会很头疼。在这个菜谱中，您将学习如何在Odoo中调试客户端测试用例。我们不会运行所有测试用例，而只会运行一个。此外，我们还将显示测试用例的UI。
- en: Getting ready
  id: totrans-193
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will continue using the `my_hostel` module from the previous
    recipe.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将继续使用前一个菜谱中的`my_hostel`模块。
- en: How to do it...
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'Follow these steps to run a test case in debug mode:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤以调试模式运行测试用例：
- en: 'Open the `/static/tests/colorpicker_test.js` file and update and add the `makeView`
    function, like this:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开`/static/tests/colorpicker_test.js`文件，并更新和添加`makeView`函数，如下所示：
- en: '[PRE25]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Check the `target` parameter in the `containtsN` function, as follows:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查`containtsN`函数中的`target`参数，如下所示：
- en: '[PRE26]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Open developer mode and open the drop-down menu by clicking on the bug icon
    on the top menu, and then click on **Run JS Tests**. This will open the QUnit
    suite:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 打开开发者模式，点击顶部菜单中的bug图标以打开下拉菜单，然后点击**运行JS测试**。这将打开QUnit套件：
- en: '![Figure 18.5 – The option to run test cases](img/B20997_18_05.gif)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
  zh: '![图18.5 – 运行测试用例的选项](img/B20997_18_05.gif)'
- en: Figure 18.5 – The option to run test cases
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 图18.5 – 运行测试用例的选项
- en: This will run only one test case, which is our color picker test case.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 这将只运行一个测试用例，即我们的颜色选择器测试用例。
- en: '![Figure 18.6 – Color picker test case](img/B20997_18_06.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
  zh: '![图 18.6 – 颜色选择器测试用例](img/B20997_18_06.jpg)'
- en: Figure 18.6 – Color picker test case
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 图 18.6 – 颜色选择器测试用例
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we replaced `QUnit.test` with `QUnit.only`. This will run this
    test case only. During the development of the test case, this can be time-saving.
    Note that using `QUnit.only` will stop the test case from running via the command-line
    options. This can only be used for debugging or testing, and it can only work
    when you open the test case from the UI, so don’t forget to replace it with `QUnit.test`
    after the development.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，我们将`QUnit.test`替换为`QUnit.only`。这将只运行此测试用例。在测试用例的开发过程中，这可以节省时间。请注意，使用`QUnit.only`将阻止通过命令行选项运行测试用例。这只能在调试或测试时使用，并且只能在您从UI打开测试用例时使用，所以开发完成后别忘了将其替换回`QUnit.test`。
- en: 'In our QUnit test case example, we created the form view to test the `int_color`
    widget. If you run the QUnit test cases from the UI, you will find that you are
    not able to see the created form views in the UI. From the UI of the QUnit suite,
    you are only able to see the logs. This makes developing a QUnit test case very
    difficult. To solve this issue, the `debug` parameter is used in the `makeView`
    function. In *step 2*, we added `debug: true` in the `makeView` function. This
    will display the test form view in the browser. Here, you will be able to locate
    **Document Object Model** (**DOM**) elements via the browser debugger.'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '在我们的QUnit测试用例示例中，我们创建了表单视图来测试`int_color`小部件。如果您从UI运行QUnit测试用例，您会发现您无法在UI中看到创建的表单视图。从QUnit套件的UI中，您只能看到日志。这使得开发QUnit测试用例变得非常困难。为了解决这个问题，我们在`makeView`函数中使用了`debug`参数。在*步骤
    2*中，我们在`makeView`函数中添加了`debug: true`。这将显示测试表单视图在浏览器中。在这里，您可以通过浏览器调试器定位**文档对象模型**（**DOM**）元素。 '
- en: Warning
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '*At the end of the test case, we destroy the view through the* `destroy()`
    *method. If you have destroyed the view, then you won’t be able to see the form
    view in the UI, so in order to see it in the browser, remove that line during
    development. This will help you debug the* *test case.*'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: '*在测试用例结束时，我们通过`destroy()`方法销毁视图。如果您已经销毁了视图，那么您将无法在UI中看到表单视图，因此为了在浏览器中看到它，在开发期间请删除该行。这将帮助您调试测试用例。*'
- en: Running QUnit test cases in debug mode helps you develop test cases very easily
    and quickly.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下运行QUnit测试用例可以帮助您非常容易和快速地开发测试用例。
- en: Generating videos/screenshots for failed test cases
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为失败的测试用例生成视频/截图
- en: Odoo uses Headless Chrome, which opens new possibilities. Starting from Odoo
    12, you can record videos of the failed test cases, and you can take screenshots
    of them as well.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo使用无头Chrome，这开辟了新的可能性。从Odoo 12开始，您可以录制失败的测试用例的视频，也可以为它们截图。
- en: How to do it...
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Recording a video for a test case requires an `ffmpeg` package:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试用例录制视频需要`ffmpeg`包：
- en: 'To install this, you need to execute the following command in the terminal
    (note that this command only works on a Debian-based OS):'
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要安装此功能，您需要在终端中执行以下命令（请注意，此命令仅在基于Debian的操作系统上有效）：
- en: '[PRE27]'
  id: totrans-218
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: To generate a video or screenshot, you will need to provide a directory location
    to store the video or screenshots.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要生成视频或截图，您需要提供一个目录位置来存储视频或截图。
- en: 'If you want to generate a screencast (video) of a test case, use the `--screencasts`
    command, like this:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想生成测试用例的屏幕录像（视频），请使用`--screencasts`命令，如下所示：
- en: '[PRE28]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: ./odoo-bin -c server.conf -i my_hostel --test-enable --screenshots=/home/pga/odoo_test/
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: ./odoo-bin -c server.conf -i my_hostel --test-enable --screenshots=/home/pga/odoo_test/
- en: '[PRE29]'
  id: totrans-223
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: How it works...
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In order to generate screenshots/screencasts for failed test cases, you need
    to run the server with the path to save the video or image files. When you run
    the test cases, and if a test case fails, Odoo will save a screenshot/video of
    the failed test case in the given directory.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 为了为失败的测试用例生成截图/屏幕录像，您需要运行服务器，指定保存视频或图像文件的路径。当您运行测试用例时，如果测试用例失败，Odoo将在指定的目录中保存失败的测试用例的截图/视频。
- en: To generate a video of a test case, Odoo uses the `ffmpeg` package. If you haven’t
    installed this package on the server, then it will only save a screenshot of a
    failed test case. After installing the package, you will be able to see the `mp4`
    file of any failed test case.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 要生成测试用例的视频，Odoo使用`ffmpeg`包。如果您尚未在服务器上安装此包，那么它将只保存失败的测试用例的截图。安装包后，您将能够看到任何失败的测试用例的`mp4`文件。
- en: Note
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Generating videos for test cases can consume more space on disks, so use this
    option with caution and only when it is really necessary.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 为测试用例生成视频可能会消耗更多的磁盘空间，因此请谨慎使用此选项，并且仅在真正需要时使用。
- en: Keep in mind that screenshots and videos are only generated for failed test
    cases, so if you want to test them, you need to write a test case that fails.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，截图和视频仅用于失败的测试用例，因此如果你想测试它们，你需要编写一个失败的测试用例。
- en: Populating random data for testing
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为测试填充随机数据
- en: So far, we have seen test cases that have been used to detect errors or bugs
    in business logic. However, at times, we need to test our development with large
    amounts of data. Generating large amounts of data can be a tedious job. Odoo provides
    a set of tools that helps you generate a lot of random data for your model. In
    this recipe, we will use the `populate` command to generate test data for the
    `hostel.room` and `hostel.room.member` models.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经看到了用于检测业务逻辑中错误或错误的测试用例。然而，有时我们需要用大量数据来测试我们的开发。生成大量数据可能是一项繁琐的工作。Odoo
    提供了一套工具，可以帮助你为你的模型生成大量的随机数据。在这个菜谱中，我们将使用 `populate` 命令为 `hostel.room` 和 `hostel.room.member`
    模型生成测试数据。
- en: Getting ready
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will continue using the `my_hostel` module from the previous
    recipe. We will add the `_populate_factories` method, which will be used to generate
    test data.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将继续使用前一个菜谱中的 `my_hostel` 模块。我们将添加 `_populate_factories` 方法，该方法将用于生成测试数据。
- en: How to do it...
  id: totrans-234
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to generate data for the `hostel.room` model:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤为 `hostel.room` 模型生成数据：
- en: 'Add a `populate` folder to the `my_hostel` module. Also, add an `__init__.py`
    file with this content:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `populate` 文件夹添加到 `my_hostel` 模块中。同时，添加一个 `__init__.py` 文件，内容如下：
- en: '[PRE30]'
  id: totrans-237
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add a `my_hostel/populate/hostel_data.py` file, and then add this code to generate
    the hostel room’s data:'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个 `my_hostel/populate/hostel_data.py` 文件，然后添加以下代码以生成宿舍房间的数据：
- en: '[PRE31]'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Run this command to generate the hostel’s data:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行此命令以生成宿舍的数据：
- en: '[PRE32]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: This will generate 100 units of data for the hostel rooms. After generating
    the data, the process will be terminated. To see the hostel room’s data, run the
    command without the `populate` parameters.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为宿舍房间生成 100 个数据单位。生成数据后，进程将终止。要查看宿舍房间的数据，请运行不带 `populate` 参数的命令。
- en: How it works...
  id: totrans-243
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we added the `populate` folder to the `my_hostel` module. This
    folder contains the code to populate the test data.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们将 `populate` 文件夹添加到 `my_hostel` 模块中。此文件夹包含填充测试数据的代码。
- en: In *step 2*, we added code to populate the room data. To generate random data,
    the `_populate_factories` method was used. The `_populate_factories` method returns
    factories for model fields, which will be used to generate random data. The `hostel.room`
    model has the required `name` and `room_no` fields, so in our example, we returned
    the generator for those fields. This generator will be used to generate random
    data for the `hostel room` record. We used the `populate.constant` generator for
    the name field; this will generate different names when we iterate during data
    generation.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们添加了填充房间数据的代码。为了生成随机数据，使用了 `_populate_factories` 方法。`_populate_factories`
    方法返回用于模型字段的生成器，这些生成器将被用于生成随机数据。`hostel.room` 模型有必需的 `name` 和 `room_no` 字段，因此在我们的示例中，我们返回了这些字段的生成器。这个生成器将被用于生成
    `hostel room` 记录的随机数据。我们使用了 `populate.constant` 生成器来生成名称字段；这将在我们迭代数据生成时生成不同的名称。
- en: 'Just like `populate.constant`, Odoo provides several other generators to populate
    data; here is a list of those generators:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 `populate.constant` 一样，Odoo 提供了几个其他生成器来填充数据；以下是这些生成器的列表：
- en: '`populate.randomize(list)` will return a random element from the given list.'
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate.randomize(list)` 将从给定的列表中返回一个随机元素。'
- en: '`populate.cartesian(list)` is just like `randomize()`, but it will try to include
    all the values from the list.'
  id: totrans-248
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate.cartesian(list)` 与 `randomize()` 类似，但它将尝试包含列表中的所有值。'
- en: '`populate.iterate(list)` will iterate over a given list, and once all the elements
    are iterated, it will return based on `randomize` or random elements.'
  id: totrans-249
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate.iterate(list)` 将遍历给定的列表，一旦所有元素都被遍历，它将根据 `randomize` 或随机元素返回。'
- en: '`populate.constant(str)` is used to generate formatted strings. You can also
    pass the `formatter` parameter to format values. By default, the formatter is
    a string-format function.'
  id: totrans-250
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate.constant(str)` 用于生成格式化的字符串。你也可以传递 `formatter` 参数来格式化值。默认情况下，格式化器是一个字符串格式化函数。'
- en: '`populate.compute(function)` is used when you want to compute a value based
    on your function.'
  id: totrans-251
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当你想根据你的函数计算一个值时，使用 `populate.compute(function)`。
- en: '`populate.randint(a,` `b)` is used to generate a random number between the
    `a` and `b` parameters.'
  id: totrans-252
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`populate.randint(a,` `b)` 用于生成介于 `a` 和 `b` 参数之间的随机数。'
- en: These generators can be used to generate test data of your choice.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这些生成器可以用来生成你所需的选择的测试数据。
- en: Another important attribute is `_populate_sizes`. It is used to define the number
    of records you want to generate based on the `--size` parameter. Its value always
    depends on the business object.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的属性是 `_populate_sizes`。它用于根据 `--size` 参数定义你想要生成的记录数量。它的值始终取决于业务对象。
- en: In *step 3*, we generated a data hostel room model. To populate test data, you
    will need to use the `--size` and `--model` parameters. Internally, Odoo uses
    the `_populate` method to generate random records. The `_populate` method itself
    uses the `_populate_factories` method to get random data for records. The `_populate`
    method will generate data for the models given in the `--model` parameter, and
    the amount of test data will be based on the `_populate_sizes` attribute of the
    model. Based on our example, if we use `–-size=medium`, the data for 100 hostel
    rooms will be generated.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 中，我们生成了一个数据宿舍房间模型。为了填充测试数据，你需要使用 `--size` 和 `--model` 参数。内部，Odoo 使用
    `_populate` 方法来生成随机记录。`_populate` 方法本身使用 `_populate_factories` 方法来获取记录的随机数据。`_populate`
    方法将为 `--model` 参数中给出的模型生成数据，测试数据的数量将基于模型中 `_populate_sizes` 属性的值。根据我们的示例，如果我们使用
    `–-size=medium`，将生成 100 个宿舍房间的数据。
- en: Note
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: If you run the `populate` command multiple times, the data will be generated
    multiple times as well. It’s important to use this carefully; if you run the command
    in a production database, it will generate test data in the production database
    itself. This is something you want to avoid.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你多次运行 `populate` 命令，数据也将多次生成。小心使用这一点很重要；如果你在生产数据库中运行该命令，它将在生产数据库本身中生成测试数据。这是你想要避免的事情。
- en: There’s more…
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'At times, you might like to generate relational data too. For example, with
    rooms, you might also want to create member records. To manage such records, you
    can use the `_populate_dependencies` attribute:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能还想生成关系型数据。例如，对于房间，你可能还想要创建成员记录。为了管理这些记录，你可以使用 `_populate_dependencies`
    属性：
- en: '[PRE33]'
  id: totrans-260
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'This will populate the data for dependencies before populating the current
    model. Once that is done, you can access the populated data via the `populated_models`
    registry:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在填充当前模型的数据之前填充依赖数据。一旦完成，你可以通过 `populated_models` 注册表访问已填充的数据：
- en: '[PRE34]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding line will give you the list of companies that are populated before
    generating test data for the current model.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 上一行将给出在为当前模型生成测试数据之前已填充的公司列表。
