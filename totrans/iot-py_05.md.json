["```py\nimport mraa\nimport time\nfrom datetime import date\n\nclass PushButton:\n    def __init__(self, pin, pull_up=True):\n        self.pin = pin\n        self.pull_up = pull_up\n        self.gpio = mraa.Gpio(pin)\n        self.gpio.dir(mraa.DIR_IN)\n\n    @property\n    def is_pressed(self):\n        push_button_status = self.gpio.read()\n        if self.pull_up:\n            # Pull-up resistor connected\n            return push_button_status == 0\n        else:\n            # Pull-down resistor connected\n            return push_button_status == 1\n\n    @property\n    def is_released(self):\n        return not self.is_pressed\n```", "```py\nif __name__ == \"__main__\":\n    s1_push_button = PushButton(1)\n    s2_push_button = PushButton(0)\n    while True:\n        # Check whether the S1 pushbutton is pressed\n        if s1_push_button.is_pressed:\n            print(\"You are pressing S1.\")\n        # Check whether the S2 pushbutton is pressed\n        if s2_push_button.is_pressed:\n            print(\"You are pressing S2.\")\n        # Sleep 500 milliseconds (0.5 seconds)\n        time.sleep(0.5)\n```", "```py\npython iot_python_chapter_05_01.py\n```", "```py\nYou are pressing S1.\nYou are pressing S2.\nYou are pressing S1.\nYou are pressing S2.\n```", "```py\nclass BoardInteraction:\n    # The Red LED is connected to pin ~6\n    red_led = AnalogLed(6, 'Red')\n    # The Green LED is connected to Pin ~5\n    green_led = AnalogLed(5, 'Green')\n    # The Blue LED is connected to Pin ~3\n    blue_led = AnalogLed(3, 'Blue')\n # The push button to reset colors\n reset_push_button = PushButton(1)\n # The push button to set colors to their maximum brightness\n max_brightness_push_button = PushButton(0)\n\n @classmethod\n def set_min_brightness(cls):\n cls.red_led.set_brightness(0)\n cls.green_led.set_brightness(0)\n cls.blue_led.set_brightness(0)\n\n @classmethod\n def set_max_brightness(cls):\n cls.red_led.set_brightness(255)\n cls.green_led.set_brightness(255)\n cls.blue_led.set_brightness(255)\n\n @classmethod\n def check_push_buttons_callback(cls):\n # Check whether the reset push button is pressed\n if cls.reset_push_button.is_pressed:\n print(\"You are pressing the reset pushbutton.\")\n cls.set_min_brightness()\n\n # Check whether the maximum brightness push button is pressed\n if cls.max_brightness_push_button.is_pressed:\n print(\"You are pressing the maximum brightness pushbutton.\")\n cls.set_max_brightness()\n\n```", "```py\nclass PutMinBrightnessHandler(tornado.web.RequestHandler):\n    def put(self):\n        BoardInteraction.set_min_brightness()\n        response = dict(\n            red=BoardInteraction.red_led.brightness_value,\n            green=BoardInteraction.green_led.brightness_value,\n            blue=BoardInteraction.blue_led.brightness_value)\n        self.write(response)\n\nclass PutMaxBrightnessHandler(tornado.web.RequestHandler):\n    def put(self):\n        BoardInteraction.set_max_brightness()\n        response = dict(\n            red=BoardInteraction.red_led.brightness_value,\n            green=BoardInteraction.green_led.brightness_value,\n            blue=BoardInteraction.blue_led.brightness_value)\n        self.write(response)\n```", "```py\napplication = tornado.web.Application([\n    (r\"/putredbrightness/([0-9]+)\", PutRedBrightnessHandler),\n    (r\"/putgreenbrightness/([0-9]+)\", PutGreenBrightnessHandler),\n    (r\"/putbluebrightness/([0-9]+)\", PutBlueBrightnessHandler),\n    (r\"/putrgbbrightness/r([0-9]+)g([0-9]+)b([0-9]+)\",\n     PutRGBBrightnessHandler),\n (r\"/putminbrightness\", PutMinBrightnessHandler),\n (r\"/putmaxbrightness\", PutMaxBrightnessHandler),\n    (r\"/getredbrightness\", GetRedBrightnessHandler),\n    (r\"/getgreenbrightness\", GetGreenBrightnessHandler),\n    (r\"/getbluebrightness\", GetBlueBrightnessHandler),\n    (r\"/version\", VersionHandler)])\n```", "```py\nif __name__ == \"__main__\":\n    print(\"Listening at port 8888\")\n    application.listen(8888)\n ioloop = tornado.ioloop.IOLoop.instance()\n periodic_callback = tornado.ioloop.PeriodicCallback(BoardInteraction.check_push_buttons_callback, 500, ioloop)\n periodic_callback.start()\n ioloop.start()\n\n```", "```py\npython iot_python_chapter_05_02.py\n```", "```py\nYou are pressing the maximum brightness pushbutton.\nRed LED connected to PWM Pin #6 set to brightness 255.\nGreen LED connected to PWM Pin #5 set to brightness 255.\nBlue LED connected to PWM Pin #3 set to brightness 255.\n```", "```py\nYou are pressing the reset pushbutton.\nRed LED connected to PWM Pin #6 set to brightness 0.\nGreen LED connected to PWM Pin #5 set to brightness 0.\nBlue LED connected to PWM Pin #3 set to brightness 0.\n```", "```py\nPUT http://192.168.1.107:8888/putmaxbrightness\n\n```", "```py\n{\n    \"blue\": 255, \n    \"green\": 255, \n    \"red\": 255\n}\n```", "```py\nPUT http://192.168.1.107:8888/putminbrightness\n\n```", "```py\n{\n    \"blue\": 0, \n    \"green\": 0, \n    \"red\": 0\n}\n```", "```py\nGET http://192.168.1.107:8888/getredbrightness\nGET http://192.168.1.107:8888/getgreenbrightness\nGET http://192.168.1.107:8888/getbluebrightness\n\n```", "```py\nhttp –b GET http://192.168.1.107:8888/getredbrightness\nhttp –b GET http://192.168.1.107:8888/getgreenbrightness\nhttp –b GET http://192.168.1.107:8888/getbluebrightness\n```", "```py\n{\n    \"red\": 255\n}\n{\n    \"green\": 255\n}\n{\n    \"blue\": 255\n}\n```", "```py\nfrom wiringx86 import GPIOGalileoGen2 as GPIO\n\nclass PushButton:\n    def __init__(self, pin, pull_up=True):\n        self.pin = pin\n        self.pull_up = pull_up\n self.gpio = Board.gpio\n pin_mode = self.gpio.INPUT_PULLUP if pull_up else self.gpio.INPUT_PULLDOWN\n self.gpio.pinMode(pin, pin_mode)\n\n    @property\n    def is_pressed(self):\n push_button_status = self.gpio.digitalRead(self.pin)\n        if self.pull_up:\n            # Pull-up resistor connected\n            return push_button_status == 0\n        else:\n            # Pull-down resistor connected\n            return push_button_status == 1\n\n    @property\n    def is_released(self):\n        return not self.is_pressed\n```", "```py\npython iot_python_chapter_05_03.py\n```", "```py\nimport mraa\nimport time\nfrom datetime import date\n\nclass PushButtonWithInterrupt:\n    def __init__(self, pin, pyfunc, args, pull_up=True):\n        self.pin = pin\n        self.pull_up = pull_up\n        self.gpio = mraa.Gpio(pin)\n        self.gpio.dir(mraa.DIR_IN)\n        mode = mraa.EDGE_FALLING if pull_up else mraa.EDGE_RISING\n        result = self.gpio.isr(mode, pyfunc, args)\n        if result != mraa.SUCCESS:\n            raise Exception(\"I could not configure ISR on pin {0}\".format(pin))\n\n    def __del__(self):\n        self.gpio.isrExit()\n```", "```py\nclass BoardInteraction:\n    # The Red LED is connected to pin ~6\n    red_led = AnalogLed(6, 'Red')\n    # The Green LED is connected to Pin ~5\n    green_led = AnalogLed(5, 'Green')\n    # The Blue LED is connected to Pin ~3\n    blue_led = AnalogLed(3, 'Blue')\n # The push button to reset colors\n reset_push_button = PushButtonWithInterrupt(11, set_min_brightness_callback, set_min_brightness_callback)\n # The push button to set colors to their maximum brightness\n max_brightness_push_button = PushButtonWithInterrupt(10, set_max_brightness_callback, set_max_brightness_callback)\n\n```", "```py\ndef set_max_brightness_callback(args):\n    print(\"You have pressed the maximum brightness pushbutton.\")\n    BoardInteraction.set_max_brightness()\n\ndef set_min_brightness_callback(args):\n    print(\"You have pressed the reset pushbutton.\")\n    BoardInteraction.set_min_brightness()\n```", "```py\nif __name__ == \"__main__\":\n    print(\"Listening at port 8888\")\n    application.listen(8888)\n    ioloop = tornado.ioloop.IOLoop.instance()\n    ioloop.start()\n```", "```py\npython iot_python_chapter_05_04.py\n```", "```py\nYou are pressing the maximum brightness pushbutton.\nRed LED connected to PWM Pin #6 set to brightness 255.\nGreen LED connected to PWM Pin #5 set to brightness 255.\nBlue LED connected to PWM Pin #3 set to brightness 255.\n```", "```py\nYou are pressing the reset pushbutton.\nRed LED connected to PWM Pin #6 set to brightness 0.\nGreen LED connected to PWM Pin #5 set to brightness 0.\nBlue LED connected to PWM Pin #3 set to brightness 0.\n```"]