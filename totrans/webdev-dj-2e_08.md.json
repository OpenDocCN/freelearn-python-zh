["```py\nfrom django.conf import settings\nfrom django.conf.urls.static import static\nurlpatterns = [\n    # your existing URL maps\n] \nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL,\\\n                          document_root=settings.MEDIA_ROOT)\n```", "```py\n    django-admin.py startproject media_project\n    ```", "```py\n    python3 manage.py startapp media_example\n    ```", "```py\n    import os\n    ```", "```py\n    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n    ```", "```py\n    MEDIA_URL = '/media/'\n    ```", "```py\n    STATIC_URL = '/static/'\n    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n    settings.py should look like this: http://packt.live/34RdhU1.\n    ```", "```py\n    from django.contrib import admin\n    from django.urls import path\n    from django.conf import settings\n    from django.conf.urls.static import static\n    urlpatterns = [path('admin/', admin.site.urls),]\n    ```", "```py\n    if settings.DEBUG:\n        urlpatterns += static(settings.MEDIA_URL,\\\n                              document_root=settings.MEDIA_ROOT)\n    ```", "```py\nfrom django.conf import settings\ndef my_view(request):\n    return render(request, \"template.html\",\\\n                  {\"MEDIA_URL\": settings.MEDIA_URL,\\\n                   \"username\": \"admin\"})\n```", "```py\ndef media(request):\n    \"\"\"\n    Add media-related context variables to the context.\n    \"\"\"\n    return {'MEDIA_URL': settings.MEDIA_URL}\n```", "```py\nreturn render(request, \"template.html\", {\"username\": \"admin\"})\n```", "```py\n{{ MEDIA_URL }}\n```", "```py\n<img src=\"img/image.jpg\">\n```", "```py\nfrom reviews.models import Review\ndef latest_reviews(request):\n    return {\"latest_reviews\": \\\n             Review.objects.order_by('-date_created')[:5]}.\n```", "```py\n    INSTALLED_APPS = [# other apps truncated for brevity\\\n        'media_example']\n    ```", "```py\n    'django.template.context_processors.media'\n    ```", "```py\n    TEMPLATES = \\\n    [{'BACKEND': 'django.template.backends.django.DjangoTemplates',\n      'DIRS': [],\n      'APP_DIRS': True,\n      'OPTIONS': {'context_processors': \\\n                  ['django.template.context_processors.debug',\\\n                   'django.template.context_processors.request',\\\n                   'django.contrib.auth.context_processors.auth',\\\n                   'django.contrib.messages.context_processors.messages',\\\n                   'django.template.context_processors.media'\\\n                ],\\\n            },\\\n        },\\\n    ]\n    ```", "```py\n    def media_example(request):\n        return render(request, \"media-example.html\")\n    ```", "```py\n    import media_example.views\n    ```", "```py\n    path('media-example/', media_example.views.media_example)\n    ```", "```py\n    from django.conf.urls.static import static\n    import media_example.views\n    urlpatterns = [path('admin/', admin.site.urls),\\\n                   path('media-example/', \\\n                        media_example.views.media_example)]\n    if settings.DEBUG:\n        urlpatterns += static(settings.MEDIA_URL,\\\n                              document_root=settings.MEDIA_ROOT)\n    ```", "```py\n    <body>\n        / between MEDIA_URL and the filename – this is because we already added a trailing slash when we defined it in settings.py. You can save the file. The complete file will look like this: http://packt.live/3nYTvgF. \n    ```", "```py\n<form method=\"post\" enctype=\"multipart/form-data\">\n```", "```py\n<input type=\"file\" name=\"file-upload-name\">\n```", "```py\ncontent = request.FILES[\"file-upload-name\"].read()\n```", "```py\nwith open(\"/path/to/output.jpg\", \"wb+\") as output_file:\n    uploaded_file = request.FILES[\"file-upload-name\"]\n    for chunk in uploaded_file.chunks():\n        output_file.write(chunk)\n```", "```py\ndef save_file_upload(upload, save_path):\n    with open(save_path, \"wb+\") as output_file:\n        for chunk in upload.chunks():\n            output_file.write(chunk)\n```", "```py\nuploaded_file = request.FILES[\"file-upload-name\"]\nsave_file_upload(uploaded_file, \"/path/to/output.jpg\")\n```", "```py\nupload = request.FILES[\"file-upload-name\"]\nsize = upload.size\nname = upload.name\ncontent_type = upload.content_type\ncharset = upload.charset\n```", "```py\n    >>> import mimetypes\n    >>> mimetypes.guess_type('file.jpg')\n    ('image/jpeg', None)\n    >>> mimetypes.guess_type('text.html')\n    ('text/html', None)\n    >>> mimetypes.guess_type('unknownfile.abc')\n    (None, None)\n    >>> mimetypes.guess_type('archive.tar.gz')\n    ('application/x-tar', 'gzip')\n    ```", "```py\n    upload = request.FILES[\"file-upload-name\"]\n    mimetype, encoding = mimetypes.guess_type(upload.name)\n    if mimetype != upload.content_type:\n        raise TypeError(\"Mimetype doesn't match file extension.\")\n    ```", "```py\n    upload = request.FILES[\"field_name\"]\n    mimetype = magic.from_buffer(upload.read(2048), mime=True)\n    ```", "```py\n    </head>\n    <body>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n    </form>\n    </body>\n    ```", "```py\n    <input type=\"file\" name=\"file_upload\">\n    ```", "```py\n    <button type=\"submit\">Submit</button>\n    ```", "```py\n    <body>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            <input type=\"file\" name=\"file_upload\">\n            <button type=\"submit\">Submit</button>\n        </form>\n    </body>\n    ```", "```py\n    from django.conf import settings\n    ```", "```py\n    import os\n    ```", "```py\n    def media_example(request):\n        if request.method == 'POST':\n            …\n    ```", "```py\n    def media_example(request):\n        if request.method == 'POST':\n    request.FILES dictionary, using the key that matches the name given to the file input (in our case, this is file_upload). You can save and close views.py. It should now look like this: [http://packt.live/37TwxSr](http://packt.live/37TwxSr). \n    ```", "```py\nfrom django import forms\nclass ExampleForm(forms.Form):\n    file_upload = forms.FileField()\n```", "```py\ndef view(request):\n    if request.method == \"POST\":\n        # instantiate the form with POST data and files\n        form = ExampleForm(request.POST, request.FILES)\n        if form.is_valid():\n            # process the form and save files\n            return redirect(\"success-url\")\n    else:\n        # instantiate an empty form as we've seen before\n        form = ExampleForm()\n    # render a template, the same as for other forms\n    return render(request, \"template.html\", {\"form\": form})\n```", "```py\nif form.is_valid():\n    save_file_upload(\"/path/to/save.jpg\", \\\n                     request.FILES[\"file_upload\"])\n    return redirect(\"/success-url/\")\n```", "```py\nif form.is_valid():\n    save_file_upload(\"/path/to/save.jpg\", \\\n                     form.cleaned_data[\"file_upload\"])\n    return redirect(\"/success-url/\")\n```", "```py\n    from django import forms\n    ```", "```py\n    class UploadForm(forms.Form):\n        file_upload = forms.FileField()\n    ```", "```py\n    from .forms import UploadForm\n    ```", "```py\n    form = UploadForm(request.POST, request.FILES)\n    ```", "```py\n    if form.is_valid():\n        save_path = os.path.join\\\n                    (settings.MEDIA_ROOT, \\\n                     request.FILES[\"file_upload\"].name)\n        with open(save_path, \"wb\") as output_file:\n            for chunk in request.FILES[\"file_upload\"].chunks():\n                output_file.write(chunk)\n    ```", "```py\n    if form.is_valid():\n        save_path = os.path.join\\\n                    (settings.MEDIA_ROOT,\\\n                     form.cleaned_data[\"file_upload\"].name)\n        with open(save_path, \"wb\") as output_file:\n            for chunk in form.cleaned_data[\"file_upload\"].chunks():\n                output_file.write(chunk)\n    ```", "```py\n    if request.method == 'POST':\n        …\n    else:\n        form = UploadForm()\n    ```", "```py\n    return render(request, \"media-example.html\", \\\n                  {\"form\": form})\n    ```", "```py\n    <body>\n        <form method=\"post\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">Submit</button>\n        </form>\n    </body>\n    ```", "```py\nfrom PIL import Image\n```", "```py\nclass ExampleForm(forms.Form):\n    picture = ImageField()\n```", "```py\nif form.is_valid():\n    picture_field = form.cleaned_data[\"picture\"]\n```", "```py\nimage = picture_field.image\n```", "```py\nw = image.width  # an integer, e.g. 600\nh = image.height  # also an integer, e.g. 420\n# the format of the image as a string, e.g. \"PNG\"\nf = image.format\n```", "```py\nimage.getdata()\n```", "```py\nfrom PIL import Image\nimage = Image.open(picture_field)\n```", "```py\nfrom PIL import Image\nsize = 50, 50  # a tuple of width, height to resize to\nimage = Image.open(image_field)  # open the image as before\nimage.thumbnail(size)  # perform the resize\n```", "```py\nimage.save(\"path/to/file.jpg\")\n```", "```py\nimage.save(\"path/to/file.png\", \"JPEG\")\n```", "```py\n    class UploadForm(forms.Form):\n        file_upload = forms.forms.py file should look like this: http://packt.live/2KAootD. \n    ```", "```py\n    pip3 install pillow\n    ```", "```py\n    from PIL import Image\n    ```", "```py\n    image = Image.open(form.cleaned_data[\"file_upload\"])\n    image.thumbnail((50, 50))\n    image.save(save_path)\n    ```", "```py\nimport os.path\nfrom django.conf import settings\nfrom django.http import FileResponse\nfrom django.core.exceptions import PermissionDenied\ndef download_view(request, relative_path):\n    if request.user.is_anonymous:\n        raise PermissionDenied\n    full_path = os.path.join(settings.MEDIA_ROOT, \\\n                             \"protected\", relative_path)\n    file_handle = open(full_path, \"rb\")\n    return FileResponse(file_handle)\n# Django sends the file then closes the handle\n```", "```py\nurlpatterns = [\n    …\n    path(\"downloads/<path:relative_path>\", views.download_view)]\n```", "```py\nclass ExampleModel(models.Model):\n    file_field = models.FileField(upload_to=\"files/\")\n```", "```py\nimport pathlib\nclass ExampleModel(models.Model):\n    file_field = models.FileField(upload_to=pathlib.Path(\"files/\"))\n```", "```py\nclass ExampleModel(models.Model):\n    file_field = models.FileField(upload_to=\"files/%Y/%m/%d/\")\n```", "```py\ndef user_grouped_file_path(instance, filename):\n    return \"{}/{}/{}/{}\".format(instance.username, \\\n                                filename[0].lower(), \\\n                                filename[1].lower(), filename)\n```", "```py\nclass ExampleModel(models.Model):\n    file_field = models.FileField\\\n                 (upload_to=user_grouped_file_path)\n    username = models.CharField(unique=True)\n```", "```py\nclass ExampleModel(models.Model):\n    file_field = models.FileField(upload_to=\"files/\")\ndef view(request):\n    if request.method == \"POST\":\n        m = ExampleModel()  # Create a new ExampleModel instance\n        m.file_field = request.FILES[\"uploaded_file\"]\n        m.save()\n    return render(request, \"template.html\")\n```", "```py\nclass ExampleForm(forms.Form):\n    uploaded_file = forms.FileField()\ndef view(request, model_pk):\n    form = ExampleForm(request.POST, request.FILES)\n    if form.is_valid():    \n        # Get an existing model instance\n        m = ExampleModel.object.get(pk=model_pk)\n        # store the uploaded file on the instance\n        m.file_field = form.cleaned_data[\"uploaded_file\"]\n        m.save()\n    return render(request, \"template.html\")\n```", "```py\nclass ExampleModel(models.Model):\n    image = models.ImageField(upload_to=\"images/%Y/%m/%d/\", \\\n                              height_field=\"image_height\",\\\n                              width_field=\"image_width\")\n    image_height = models.IntegerField()\n    image_width = models.IntegerField()\n```", "```py\nstorage_engine = CustomStorageEngine()\nclass ExampleModel(models.Model):\n    image_field = ImageField(storage=storage_engine)\n```", "```py\nm = ExampleModel.object.get(pk=model_pk)\n```", "```py\ndata = m.file_field.read()\n```", "```py\nwith m.file_field.open(\"wb\") as f:\n    chunk = f.write(b\"test\")  # write bytes to the file\n```", "```py\nfor chunk in m.file_field.chunks():\n    # assume this method is defined somewhere\n    write_chunk(open_file, chunk)\n```", "```py\nopen(m.file_field.path)\n```", "```py\ndef download_view(request, model_pk):\n    if request.user.is_anonymous:\n        raise PermissionDenied\n    m = ExampleModel.objects.get(pk=model_pk)\n    # Django sends the file then closes the handle\n    return FileResponse(m.file_field.open())  \n```", "```py\nm.file_field = request.FILES[\"file_upload\"]\n```", "```py\n# Don't do this\nm.file_field = open(\"/path/to/file.txt\", \"rb\")  \n```", "```py\nm.file_field = \"new file content\"  # Don't do this\n```", "```py\nf = open(\"/path/to/file.txt\", \"rb\")\nfile_wrapper = File(f)\n```", "```py\nstring_content = ContentFile(\"A string value\")\nbytes_content = ContentField(b\"A bytes value\")\n```", "```py\nm = ExampleModel.objects.first()\nwith open(\"/path/to/file.txt\") as f:\n    file_wrapper = File(f)\n    m.file_field.save(\"file.txt\", f)\n```", "```py\nimage = Image.open(request.FILES[\"image_field\"])\nimage.thumbnail((150, 150))\n# save thumbnail to temp location\nimage.save(\"/tmp/thumbnail.jpg\")\nwith open(\"/tmp/thumbnail.jpg\", \"rb\") as f:\n    image_wrapper = File(f)\n    m.image_field.save(\"thumbnail.jpg\", image_wrapper)\nos.unlink(\"/tmp/thumbnail.jpg\")  # clean up temp file\n```", "```py\nfrom io import BytesIO\nfrom PIL import Image\nfrom django.core.files.images import ImageFile\ndef index(request, pk):\n    # trim out logic for checking if method is POST\n    # get a model instance, or create a new one\n    m = ExampleModel.objects.get(pk=pk)  \n\n    # store the uploaded image in a variable for shorter code\n    uploaded_image = request.FILES[\"image_field\"]\n    # load a PIL image instance from the uploaded file\n    image = Image.open(uploaded)\n    # perform the image resize\n    image.thumbnail((150, 150))\n    # Create a BytesIO file-like object to store\n    image_data = BytesIO()\n    # Write the Image data back out to the BytesIO object\n    # Retain the existing format from the uploaded image\n    image.save(fp=image_data, uploaded_image.format)\n    # Wrap the BytesIO containing the image data\n    image_file = ImageFile(image_data)\n    # Save the wrapped image file data with the original name\n    m.image_field.save(uploaded_image.name, image_file)\n    # this also saves the model instance\n    return redirect(\"/success-url/\")\n```", "```py\ninstance = ExampleModel.objects.first()\nurl = instance.file_field.url  # Get the URL\n```", "```py\n<img src=\"img/{{ instance.file_field.url }}\">\n```", "```py\n    class ExampleModel(models.Model):\n        image_field = models.ImageField(upload_to=\"images/\")\n        file_field = models.FileField(upload_to=\"files/\")\n    ```", "```py\n    python3 manage.py makemigrations\n    (bookr)$ python3 manage.py makemigrations\n    Migrations for 'media_example':\n      media_example/migrations/0001_initial.py\n        - Create model ExampleModel\n    ```", "```py\n    python3 manage.py migrate\n    ```", "```py\n    (bookr)$ python3 manage.py migrate\n    Operations to perform:\n      Apply all migrations: admin, auth, contenttypes, reviews, sessions\n    Running migrations:\n      # output trimmed for brevity\n       Applying media_example.0001_initial... OK\n    ```", "```py\n    class UploadForm(forms.Form):\n        image_upload = forms.ImageField()\n        file_upload = forms.FileField()\n    ```", "```py\n    from .models import ExampleModel\n    ```", "```py\n    import os\n    from PIL import Image\n    from django.conf import settings\n    ```", "```py\n    def media_example(request):\n        instance = None\n    ```", "```py\n    instance = ExampleModel()\n    instance.image_field = form.cleaned_data[\"image_upload\"]\n    instance.file_field = form.cleaned_data[\"file_upload\"]\n    instance.save()\n    ```", "```py\n    return render(request, \"media-example.html\", \\\n                  {\"form\": form, \"instance\": instance})\n    ```", "```py\n    {% if instance %}\n        <img src=\"img/{{ instance.image_field.url }}\">\n    {% endif %}\n    ```", "```py\nclass ExampleForm(forms.Form):\n    uploaded_file = forms.FileField()\n    uploaded_image = forms.ImageField()\n```", "```py\ndef view(request):\n    form = ExampleForm(request.POST, request.FILES)\n    if form.is_valid():\n        m = ExampleModel()\n        m.file_field = form.cleaned_data[\"uploaded_file\"]\n        m.image_field = forms.cleaned_data[\"uploaded_image\"]\n        m.save()\n    return render(request, \"template.html\")  \n```", "```py\nm.image_field = forms.cleaned_data[\"uploaded_file\"]\n```", "```py\nclass ExampleModelForm(forms.Model):\n    class Meta:\n        model = ExampleModel\n        # The same ExampleModel class we've seen previously\n        fields = \"__all__\"\ndef view(request):\n    if request.method == \"POST\":\n        form = ExampleModelForm(request.POST, request.FILES)\n        form.save()\n        return redirect(\"/success-page\")\n    else:\n        form = ExampleModelForm()\n    return (request, \"template.html\", {\"form\": form})\n```", "```py\ndef view(request):\n    if request.method == \"POST\":\n        form = ExampleModelForm(request.POST, request.FILES)\n        m = form.save(False)\n        # Set arbitrary value on the model instance before save\n        m.attribute = \"value\"\n        # save the model instance, also write the files to disk\n        m.save()\n        return redirect(\"/success-page/\")\n    else:\n        form = ExampleModelForm()\n    return (request, \"template.html\", {\"form\": form})\n```", "```py\n    from .models import ExampleModel\n    ```", "```py\n    class UploadForm(forms.ModelForm):\n        class Meta:\n            model = ExampleModel\n            fields = \"__all__\"\n    ```", "```py\n    from .models import ExampleModel\n    ```", "```py\n    instance = form.save()\n    ```"]