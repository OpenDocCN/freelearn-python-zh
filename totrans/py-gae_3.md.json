["```py\npip install GoogleAppEngineCloudStorageClient -t <app_root>\n\n```", "```py\nsvn checkout http://appengine-gcs- client.googlecode.com/svn/trunk/python gcs-client\n\n```", "```py\npython -c\"import cloudstorage\"\n\n```", "```py\n<div class=\"form-group\">\n  <label for=\"uploaded_file\">Attached file:</label>\n  <input type=\"file\" id=\"uploaded_file\" name=\"uploaded_file\">\n</div>\n```", "```py\nfrom google.appengine.api import app_identity\nimport cloudstorage\nimport mimetypes\n```", "```py\ndef post(self):\n    user = users.get_current_user()\n    if user is None:\n        self.error(401)\n\n    bucket_name = app_identity.get_default_gcs_bucket_name()\n    uploaded_file = self.request.POST.get('uploaded_file')\n    file_name = getattr(uploaded_file, 'filename', None)\n    file_content = getattr(uploaded_file, 'file', None)\n    real_path = ''\n    if file_name and file_content:\n        content_t = mimetypes.guess_type(file_name)[0]\n        real_path = os.path.join('/', bucket_name, user.user_id(),\n                                 file_name)\n\n        with cloudstorage.open(real_path, 'w',\n                               content_type=content_t) as f:\n            f.write(file_content.read())\n\n    self._create_note(user, file_name)\n\n    logout_url = users.create_logout_url(self.request.uri)\n    template_context = {\n        'user': user.nickname(),\n        'logout_url': logout_url,\n    }\n    self.response.out.write(\n        self._render_template('main.html', template_context))\n```", "```py\nclass Note(ndb.Model):\n    title = ndb.StringProperty()\n    content = ndb.TextProperty(required=True)\n    date_created = ndb.DateTimeProperty(auto_now_add=True)\n    checklist_items = ndb.KeyProperty(\"CheckListItem\",\n                                      repeated=True)\n    files = ndb.StringProperty(repeated=True)\n\n    @classmethod\n    def owner_query(cls, parent_key):\n        return cls.query(ancestor=parent_key).order(\n            -cls.date_created)\n```", "```py\n@ndb.transactional\ndef _create_note(self, user, file_name):\n    note = Note(parent=ndb.Key(\"User\", user.nickname()),\n                title=self.request.get('title'),\n                content=self.request.get('content'))\n    note.put()\n\n    item_titles = self.request.get('checklist_items').split(',')\n    for item_title in item_titles:\n        item = CheckListItem(parent=note.key, title=item_title)\n        item.put()\n        note.checklist_items.append(item.key)\n\n    if file_name:\n       note.files.append(file_name)\n\n   note.put()\n```", "```py\nclass MediaHandler(webapp2.RequestHandler):\n    def get(self, file_name):\n        user = users.get_current_user()\n        bucket_name = app_identity.get_default_gcs_bucket_name()\n        content_t = mimetypes.guess_type(file_name)[0]\n        real_path = os.path.join('/', bucket_name, user.user_id(),\n                                 file_name)\n\n        try:\n            with cloudstorage.open(real_path, 'r') as f:\n                self.response.headers.add_header('Content-Type',\n                                                 content_t)\n                self.response.out.write(f.read())\n        except cloudstorage.errors.NotFoundError:\n            self.abort(404)\n```", "```py\napp = webapp2.WSGIApplication([\n    (r'/', MainHandler),\n    (r'/media/(?P<file_name>[\\w.]{0,256})', MediaHandler),\n], debug=True)\n```", "```py\n{% if note.files %}\n<ul>\n  {% for file in note.files %}\n  <li class=\"file\"><a href=\"/media/{{ file }}\">{{ file }}</a></li>\n  {% endfor %}\n</ul>\n{% endif %}\n```", "```py\ndiv.note > ul > li.file {\n    border: 0;\n    background: #0070B3;\n}\n\nli.file > a {\n    color: white;\n    text-decoration: none;\n}\n```", "```py\nfrom google.appengine.api import images\nfrom google.appengine.ext import blobstore\n```", "```py\ndef _get_urls_for(self, file_name):\n    user = users.get_current_user()\n    if user is None:\n        return\n\n    bucket_name = app_identity.get_default_gcs_bucket_name()\n    path = os.path.join('/', bucket_name, user.user_id(),\n                        file_name)\n    real_path = '/gs' + path\n    key = blobstore.create_gs_key(real_path)\n    url = images.get_serving_url(key, size=0)\n    thumbnail_url = images.get_serving_url(key, size=150,\n                                           crop=True)\n    return url, thumbnail_url\n```", "```py\nclass NoteFile(ndb.Model):\n    name = ndb.StringProperty()\n    url = ndb.StringProperty()\n    thumbnail_url = ndb.StringProperty()\n    full_path = ndb.StringProperty()\n```", "```py\nclass Note(ndb.Model):\n    title = ndb.StringProperty()\n    content = ndb.TextProperty(required=True)\n    date_created = ndb.DateTimeProperty(auto_now_add=True)\n    checklist_items = ndb.KeyProperty(\"CheckListItem\",\n                                      repeated=True)\n    files = ndb.KeyProperty(\"NoteFile\",\n                            repeated=True)\n\n    @classmethod\n    def owner_query(cls, parent_key):\n        return cls.query(ancestor=parent_key).order(\n            -cls.date_created)\n```", "```py\n@ndb.transactional\ndef _create_note(self, user, file_name, file_path):\n    note = Note(parent=ndb.Key(\"User\", user.nickname()),\n                title=self.request.get('title'),\n                content=self.request.get('content'))\n    note.put()\n\n    item_titles = self.request.get('checklist_items').split(',')\n    for item_title in item_titles:\n        item = CheckListItem(parent=note.key, title=item_title)\n        item.put()\n        note.checklist_items.append(item.key)\n\n    if file_name and file_path:\n        url, thumbnail_url = self._get_urls_for(file_name)\n\n        f = NoteFile(parent=note.key, name=file_name,\n                     url=url, thumbnail_url=thumbnail_url,\n                     full_path=file_path)\n        f.put()\n        note.files.append(f.key)\n\n        note.put()\n```", "```py\nself._create_note(user, file_name, real_path)\n```", "```py\n{% if note.files %}\n<ul>\n  {% for file in note.files %}\n  <li class=\"file\">\n    <a href=\"{{ file.get().url }}\">\n      <img src=\"img/{{ file.get().thumbnail_url }}\">\n    </a>\n  </li>\n  {% endfor %}\n</ul>\n{% endif %}\n```", "```py\nwith cloudstorage.open(real_path, 'w', content_type=content_t,\n                      options={'x-goog-acl': 'public-read'}) as f:\n    f.write(file_content.read())\n```", "```py\ndef _get_urls_for(self, file_name):\n    user = users.get_current_user()\n    if user is None:\n        return\n\n    bucket_name = app_identity.get_default_gcs_bucket_name()\n    path = os.path.join('/', bucket_name, user.user_id(),\n                        file_name)\n    real_path = '/gs' + path\n    key = blobstore.create_gs_key(real_path)\n    try:\n        url = images.get_serving_url(key, size=0)\n        thumbnail_url = images.get_serving_url(key, size=150,\n                                               crop=True)\n    except images.TransformationError, images.NotImageError:\n        url = \"http://storage.googleapis.com{}\".format(path)\n        thumbnail_url = None\n\n    return url, thumbnail_url\n```", "```py\n{% if note.files %}\n<ul>\n  {% for file in note.files %}\n  {% if file.get().thumbnail_url %}\n  <li class=\"file\">\n    <a href=\"{{ file.get().url }}\">\n      <img src=\"img/{{ file.get().thumbnail_url }}\">\n    </a>\n  </li>\n  {% else %}\n  <li class=\"file\">\n    <a href=\"{{ file.get().url }}\">{{ file.get().name }}</a>\n  </li>\n  {% endif %}\n  {% endfor %}\n</ul>\n{% endif %}\n```", "```py\nclass ShrinkHandler(webapp2.RequestHandler):\n    def _shrink_note(self, note):\n        for file_key in note.files:\n            file = file_key.get()\n            try:\n                with cloudstorage.open(file.full_path) as f:\n                    image = images.Image(f.read())\n                    image.resize(640)\n                    new_image_data = image.execute_transforms()\n\n                content_t = images_formats.get(str(image.format))\n                with cloudstorage.open(file.full_path, 'w',\n                                     content_type=content_t) as f:\n                    f.write(new_image_data)\n\n            except images.NotImageError:\n                pass\n\n    def get(self):\n        user = users.get_current_user()\n        if user is None:\n            login_url = users.create_login_url(self.request.uri)\n            return self.redirect(login_url)\n\n        ancestor_key = ndb.Key(\"User\", user.nickname())\n        notes = Note.owner_query(ancestor_key).fetch()\n\n        for note in notes:\n            self._shrink_note(note)\n\n        self.response.write('Done.')\n```", "```py\nimages_formats = {\n    '0': 'image/png',\n    '1': 'image/jpeg',\n    '2': 'image/webp',\n    '-1': 'image/bmp',\n    '-2': 'image/gif',\n    '-3': 'image/ico',\n    '-4': 'image/tiff',\n}\n```", "```py\napp = webapp2.WSGIApplication([\n    (r'/', MainHandler),\n    (r'/media/(?P<file_name>[\\w.]{0,256})', MediaHandler),\n    (r'/shrink', ShrinkHandler),\n], debug=True)\n```", "```py\n<h1>Welcome to Notes!</h1>\n\n<ul class=\"menu\">\n  <li>Hello, <b>{{ user }}</b></li>\n  <li><a href=\"{{ logout_url }}\">Logout</a></li>\n  <li><a href=\"/shrink\">Shrink images</a></li>\n</ul>\n\n<form action=\"\" method=\"post\" enctype=\"multipart/form-data\">\n```", "```py\nul.menu > li {\n    display: inline;\n    padding: 5px;\n    border-left: 1px solid;\n}\n\nul.menu > li > a {\n    text-decoration: none;\n}\n```", "```py\nfrom google.appengine.api import taskqueue\n```", "```py\ndef post(self):\n    if not 'X-AppEngine-TaskName' in self.request.headers:\n        self.error(403)\n\n    user_email = self.request.get('user_email')\n    user = users.User(user_email)\n\n    ancestor_key = ndb.Key(\"User\", user.nickname())\n    notes = Note.owner_query(ancestor_key).fetch()\n\n    for note in notes:\n        self._shrink_note(note)\n```", "```py\ndef get(self):\n    user = users.get_current_user()\n    if user is None:\n        login_url = users.create_login_url(self.request.uri)\n        return self.redirect(login_url)\n\n    taskqueue.add(url='/shrink',\n                  params={'user_email': user.email()})\n    self.response.write('Task successfully added to the queue.')\n```", "```py\nclass ShrinkCronJob(ShrinkHandler):\n    def post(self):\n        self.abort(405, headers=[('Allow', 'GET')])\n\n    def get(self):\n        if 'X-AppEngine-Cron' not in self.request.headers:\n            self.error(403)\n\n        notes = Note.query().fetch()\n        for note in notes:\n            self._shrink_note(note)\n```", "```py\napp = webapp2.WSGIApplication([\n    (r'/', MainHandler),\n    (r'/media/(?P<file_name>[\\w.]{0,256})', MediaHandler),\n    (r'/shrink', ShrinkHandler),\n    (r'/shrink_all', ShrinkCronJob),\n], debug=True)\n```", "```py\ncron:\n- description: shrink images in the GCS\n  url: /shrink_all\n  schedule: every day 00:00\n```", "```py\nfrom google.appengine.api import mail\n```", "```py\nsender_address = \"Notes Team <notes@example.com>\"\nsubject = \"Shrink complete!\"\nbody = \"We shrunk all the images attached to your notes!\"\nmail.send_mail(sender_address, user_email, subject, body)\n```", "```py\ninbound_services:\n- mail\n```", "```py\nfrom google.appengine.ext.webapp import mail_handlers\nimport re\n```", "```py\nclass CreateNoteHandler(mail_handlers.InboundMailHandler):\n    def receive(self, mail_message):\n        email_pattern = re.compile(\n            r'([\\w\\-\\.]+@(\\w[\\w\\-]+\\.)+[\\w\\-]+)')\n        match = email_pattern.findall(mail_message.sender)\n        email_addr = match[0][0] if match else ''\n\n        try:\n            user = users.User(email_addr)\n            user = self._reload_user(user)\n        except users.UserNotFoundError:\n            return self.error(403)\n\n        title = mail_message.subject\n        content = ''\n        for content_t, body in mail_message.bodies('text/plain'):\n            content += body.decode()\n\n        attachments = getattr(mail_message, 'attachments', None)\n\n        self._create_note(user, title, content, attachments)\n```", "```py\ndef _reload_user(self, user_instance):\n    key = UserLoader(user=user_instance).put()\n    key.delete(use_datastore=False)\n    u_loader = UserLoader.query(\n        UserLoader.user == user_instance).get()\n    return UserLoader.user\n```", "```py\nclass UserLoader(ndb.Model):\n    user = ndb.UserProperty()\n```", "```py\n@ndb.transactional\ndef _create_note(self, user, title, content, attachments):\n\n    note = Note(parent=ndb.Key(\"User\", user.nickname()),\n                title=title,\n                content=content)\n    note.put()\n\n    if attachments:\n        bucket_name = app_identity.get_default_gcs_bucket_name()\n        for file_name, file_content in attachments:\n            content_t = mimetypes.guess_type(file_name)[0]\n            real_path = os.path.join('/', bucket_name,\n                                     user.user_id(), file_name)\n\n            with cloudstorage.open(real_path, 'w',\n                    content_type=content_t,\n                    options={'x-goog-acl': 'public-read'}) as f:\n                f.write(file_content.decode())\n\n            key = blobstore.create_gs_key('/gs' + real_path)\n            try:\n                url = images.get_serving_url(key, size=0)\n                thumbnail_url = images.get_serving_url(key,\n                    size=150, crop=True)\n            except images.TransformationError,\n                   images.NotImageError:\n                url = \"http://storage.googleapis.com{}\".format(\n                    real_path)\n                thumbnail_url = None\n\n            f = NoteFile(parent=note.key, name=file_name,\n                         url=url, thumbnail_url=thumbnail_url,\n                         full_path=real_path)\n            f.put()\n            note.files.append(f.key)\n\n        note.put()\n```", "```py\napp = webapp2.WSGIApplication([\n    (r'/', MainHandler),\n    (r'/media/(?P<file_name>[\\w.]{0,256})', MediaHandler),\n    (r'/shrink', ShrinkHandler),\n    (r'/shrink_all', ShrinkCronJob),\n    (r'/_ah/mail/<appid>\\.appspotmail\\.com', CreateNoteHandler),\n], debug=True)\n```"]