["```py\nimport RPi.GPIO as GPIO\nimport time\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(14,GPIO.OUT)\n\npwm = GPIO.PWM(14, 50)\npwm.start(0)\n\nwhile 1:\n\n        pwm.ChangeDutyCycle(2.5)\n        time.sleep(2)\n\n        pwm.ChangeDutyCycle(5)\n        time.sleep(2)\n\n        pwm.ChangeDutyCycle(7.5)\n        time.sleep(2)\n\n        pwm.ChangeDutyCycle(10)\n        time.sleep(2)\n\n        pwm.ChangeDutyCycle(12.5)\n        time.sleep(2)\n```", "```py\npwm = GPIO.PWM(14, 50)\npwm.start(0)\n```", "```py\n        pwm.ChangeDutyCycle(2.5)\n        time.sleep(2)\n\n        pwm.ChangeDutyCycle(5)\n        time.sleep(2)\n\n        pwm.ChangeDutyCycle(7.5)\n        time.sleep(2)\n\n        pwm.ChangeDutyCycle(10)\n        time.sleep(2)\n\n        pwm.ChangeDutyCycle(12.5)\n        time.sleep(2)\n```", "```py\nimport RPi.GPIO as GPIO\nimport time\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(14,GPIO.OUT)\n\npwm = GPIO.PWM(14, 50)\npwm.start(0)\n\ni=2.5\nj=12.5\n\nwhile 1:\n        while i<=12.5:\n                pwm.ChangeDutyCycle(i)\n                time.sleep(0.1)\n                i = i + 0.1\n\n        while j>=2.5:\n                pwm.ChangeDutyCycle(j)\n                time.sleep(0.1)\n                j = j - 0.1\n```", "```py\n        while i<=12.5:\n                pwm.ChangeDutyCycle(i)\n                time.sleep(0.1)\n                i = i + 0.1\n```", "```py\nmyList = [14,35,108,64,9]\n```", "```py\nprint myList[2] \n```", "```py\nprint myList[-1] \n```", "```py\nmyList.append(45)\n```", "```py\nmyList = [14,35,108,64,9, 45]\n```", "```py\nmyList.insert(3,23)\n```", "```py\nmyList = [14,35,108,23,64,9,45]\n```", "```py\ndel myList[2]\n```", "```py\nmyList = [14,35,108,64,9,45]\n```", "```py\nmyList.remove(9)\n```", "```py\nimport RPi.GPIO as GPIO\nimport time\nimport Adafruit_ADS1x15\n\nadc = Adafruit_ADS1x15.ADS1115()\nGAIN = 1\n\nadc.start_adc(0, gain=GAIN)\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(14,GPIO.OUT)\nGPIO.setwarnings(False)\n\nservo = GPIO.PWM(14, 50)\n\nservo.start(0)\n\nDef Distance():\n    D_value = adc0.get_last_result()\n    D =    (1.0 / (F_value / 13.15)) - 0.35\n    Return D\n\nj=12.5\nk=2.5\ni=0\n\ndistLR=[] \ndistRL=[]\n\nwhile True:\n        while k<=12.5:\n                servo.ChangeDutyCycle(k)\n                time.sleep(.1)\n                distLR.insert(i,Distance())\n                k = k + 2.5\n                i = i + 1\n        print distLR\n\n        i=0\n        k=0\n\n        del distLR[:]\n\n        while j>=2.5:\n                servo.ChangeDutyCycle(j)\n                time.sleep(.1)\n                j = j - 2.5\n                distRL.insert(i,Distance())\n                i = i + 1\n\n        print distRL\n\n        i=0\n        k=2.5\n        j=12.5\n\n       del distRL[:]\n```", "```py\nDef Distance():\n    D_value = adc0.get_last_result()\n    D =    (1.0 / (F_value / 13.15)) - 0.35\n    Return D\n```", "```py\ndistLR=[] \ndistRL=[]\n```", "```py\n\n        while k<=12.5:\n                servo.ChangeDutyCycle(k)\n                time.sleep(.1)\n                distLR.insert(i,Distance())\n                k = k + 1\n                i = i + 1\n        print distLR\n```", "```py\n        i=0\n        k=0\n```", "```py\n        del distLR[:]\n```", "```py\n while j>=2.5:\n                servo.ChangeDutyCycle(j)\n                time.sleep(.1)\n                j = j - 2.5\n                distRL.insert(i,Distance())\n                i = i + 1\n\n        print distRL\n```", "```py\n   i=0\n        k=2.5\n        j=12.5\n\n       del distRL[:]\n```", "```py\nimport RPi.GPIO as GPIO\nimport time\nimport Adafruit_ADS1x15\n\nadc0 = Adafruit_ADS1x15.ADS1115()\nGAIN = 1\nadc0.start_adc(0, gain=GAIN)\n\nGPIO.setmode(GPIO.BCM)\nGPIO.setup(14,GPIO.OUT)\n\nservo = GPIO.PWM(14, 50)\nservo.start(0)\n\ndef Distance():\n    D_value = adc0.get_last_result()\n    D =    (1.0 / (F_value / 13.15)) - 0.35\n    Return D\n\nGPIO.setup(20,GPIO.OUT)\nGPIO.setup(21,GPIO.OUT)\nGPIO.setup(23,GPIO.OUT)\nGPIO.setup(24,GPIO.OUT)\n\nLForward = GPIO.PWM(20, 50)\nLReverse = GPIO.PWM(21, 50)\nRForward = GPIO.PWM(23,50)\nRReverse = GPIO.PWM(24,50)\n\ndef stop():\n    LForward.changeDutyCycle(0)\n    LReverse.changeDutyCycle(0)\n    RForward.changeDutyCycle(0)\n    RReverse.changeDutyCycle(0)\n\ndef direction(index):\n\n if index == 0 :\n    LForward.changeDutyCycle(0)\n    LReverse.changeDutyCycle(30)\n    RForward.changeDutyCycle(30)\n    RReverse.changeDutyCycle(0)\n\nelif index == 1\n\n    LForward.changeDutyCycle(20)\n    LReverse.changeDutyCycle(0)\n    RForward.changeDutyCycle(50)\n    RReverse.changeDutyCycle(0)\n\n elif index == 2 :\n\n    LForward.changeDutyCycle(50)\n    LReverse.changeDutyCycle(0)\n    RForward.changeDutyCycle(50)\n    RReverse.changeDutyCycle(0)\n\nelif index == 3 :\n\n    LForward.changeDutyCycle(50)\n    LReverse.changeDutyCycle(0)\n    RForward.changeDutyCycle(20)\n    RReverse.changeDutyCycle(0)\n\n elif index == 4 :\n\n    LForward.changeDutyCycle(20)\n    LReverse.changeDutyCycle(0)\n    RForward.changeDutyCycle(0)\n    RReverse.changeDutyCycle(20)\n\n else:\n stop()\n\nj=12.5\nk=2.5\ni=0\n\ndist1=[]\ndist2=[]\n\nwhile True:\n\n    while k<=12.5:\n    servo.ChangeDutyCycle(k)\n    time.sleep(.2)\n    dist1.insert(i,Distance())\n    k = k + 2.5\n    i = i + 1\n\n print dist1\n\n i=0\n k=2\n\n max_dist1 = max(dist1)\n max_dist1_index = dist1.index(max_dist1)\n\n direction(max_dist1_index)\n\n del dist1[:]\n\n print max_dist1\n print max_dist1_index\n\n while j>=2.5:\n    servo.ChangeDutyCycle(j)\n    time.sleep(.2)\n     j = j - 2.5\n     dist2.insert(i,Distance())\n    i = i + 1\n\nprint dist2\n\ni=0\nj=12\n\n max_dist2 = max(dist2)\n max_dist2_index = dist2.index(max_dist2)\n\n direction(max_dist2_index)\n\n del dist2[:]\n\n print max_dist2\n print max_dist2_index\n```", "```py\nLForward = GPIO.PWM(20, 50)\nLReverse = GPIO.PWM(21, 50)\nRForward = GPIO.PWM(23,50)\nRReverse = GPIO.PWM(24,50)\n```", "```py\ndef direction(index):\n\n if index == 0 :\n    LForward.changeDutyCycle(0)\n    LReverse.changeDutyCycle(30)\n    RForward.changeDutyCycle(30)\n    RReverse.changeDutyCycle(0)\n\nelif index == 1\n    LForward.changeDutyCycle(20)\n    LReverse.changeDutyCycle(0)\n    RForward.changeDutyCycle(50)\n    RReverse.changeDutyCycle(0)\n```", "```py\nmax_dist1 = max(dist1)\n```", "```py\nmax_dist1_index = dist1.index(max_dist1)\n```", "```py\n direction(max_dist1_index)\n```"]