["```py\npython manage.py test\n```", "```py\nassert 1 == 1\n```", "```py\n    import unittest\n    ```", "```py\n    class TestMyModule(unittest.TestCase):\n        def test_method_a(self):\n            assert <expression>\n    ```", "```py\n    python manage.py test\n    ```", "```py\n    from django.test import TestCase\n    ```", "```py\n    class TestSimpleComponent(TestCase):\n        def test_basic_sum(self):\n            assert 1+1 == 2\n    ```", "```py\n    python manage.py test\n    ```", "```py\n    % ./manage.py test\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    .\n    ----------------------------------------------------------------------\n    Ran 1 test in 0.001s\n    OK\n    Destroying test database for alias 'default'...\n    ```", "```py\n        assert 1+1 == 3\n    ```", "```py\n    python manage.py test\n    ```", "```py\nassert 1+1 == 2\n```", "```py\nclass MyTestCase(unittest.TestCase):\n    def setUp(self):\n        # Do some initialization work\n    def test_method_a(self):\n        # code for testing method A\n    def test_method_b(self):\n        # code for testing method B\n```", "```py\nclass MyTestCase(unittest.TestCase):\n    def setUp(self):\n        # Do some initialization work\n    def test_method_a(self):\n        # code for testing method A\n    def test_method_b(self):\n        # code for testing method B\n    def tearDown(self):\n        # perform cleanup\n```", "```py\n    python manage.py startapp bookr_test\n    ```", "```py\n    INSTALLED_APPS = [….,\\\n                      ….,\\\n                      'bookr_test']\n    ```", "```py\n    from django.db import models\n    class Publisher(models.Model):\n        \"\"\"A company that publishes books.\"\"\"\n        name = models.CharField\\\n               (max_length=50,\\\n                help_text=\"The name of the Publisher.\")\n        website = models.URLField\\\n                  (help_text=\"The Publisher's website.\")\n        email = models.EmailField\\\n                (help_text=\"The Publisher's email address.\")\n        def __str__(self):\n            return self.name\n    ```", "```py\n    class Publisher(models.Model)\n    ```", "```py\n    python manage.py makemigrations\n    python manage.py migrate\n    ```", "```py\n    from django.test import TestCase\n    from .models import Publisher\n    class TestPublisherModel(TestCase):\n        \"\"\"Test the publisher model.\"\"\"\n        def setUp(self):\n            self.p = Publisher(name='Packt', \\\n                               website='www.packt.com', \\\n                               email='contact@packt.com')\n        def test_create_publisher(self):\n            self.assertIsInstance(self.p, Publisher)\n        def test_str_representation(self):\n            self.assertEquals(str(self.p), \"Packt\")\n    ```", "```py\n    class TestPublisherModel(TestCase):\n    ```", "```py\n    def setUp(self):\n        self.p = Publisher(name='Packt', \\\n                           website='www.packt.com', \\\n                           email='contact@packt.com')\n    ```", "```py\n        def test_create_publisher(self):\n            self.assertIsInstance(self.p, Publisher)\n    ```", "```py\n    def test_str_representation(self):\n        self.assertEquals(str(self.p), \"Packt\")\n    ```", "```py\n    python manage.py test\n    ```", "```py\n    % python manage.py test\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    ..\n    ----------------------------------------------------------------------\n    Ran 2 tests in 0.002s\n    OK\n    Destroying test database for alias 'default'...\n    ```", "```py\n\"Destroying test database for alias 'default'...\"\n```", "```py\nfrom django.test import Client\nc = Client()\n```", "```py\nresponse = c.get('/welcome')\n```", "```py\n    from django.http import HttpResponse\n    def greeting_view(request):\n        \"\"\"Greet the user.\"\"\"\n        return HttpResponse(\"Hey there, welcome to Bookr!\")\\\n                           (\"Your one stop place\")\\\n                           (\"to review books.\")\n    ```", "```py\n    from django.urls import path\n    from . import views\n    urlpatterns = [greeting_view to the 'test/greeting' endpoint for the application by setting the path in the urlpatterns list.\n    ```", "```py\n    urlpatterns = [….,\\\n                   ….,\\\n                   urls.py file should look like this now: http://packt.live/3nF8Sdb.\n    ```", "```py\n    python manage.py runserver localhost:8080\n    ```", "```py\n    Hey there, welcome to Bookr! Your one stop place to review books.\n    ```", "```py\n    from django.test import TestCase, Client\n    class TestGreetingView(TestCase):\n        \"\"\"Test the greeting view.\"\"\"\n        def setUp(self):\n            self.client = Client()\n        def test_greeting_view(self):\n            response = self.client.get('/test/greeting')\n            self.assertEquals(response.status_code, 200)\n    ```", "```py\n    from django.test import TestCase, Client\n    ```", "```py\n    class TestGreetingView(TestCase):\n    ```", "```py\n    response = self.client.get('/test/greeting')\n    ```", "```py\n    self.assertEquals(response.status_code, 200)\n    ```", "```py\n    python manage.py test\n    ```", "```py\n    % python manage.py test\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    ...\n    ----------------------------------------------------------------------\n    Ran 3 tests in 0.006s\n    OK\n    Destroying test database for alias 'default'...\n    ```", "```py\nlogin = self.client.login(username='testuser', password='testpassword')\n```", "```py\n    from django.http import HttpResponse\n    from django.contrib.auth.decorators import login_required\n    ```", "```py\n    @login_required\n    def greeting_view_user(request):\n        \"\"\"Greeting view for the user.\"\"\"\n        user = request.user\n        return HttpResponse(\"Welcome to Bookr! {username}\"\\\n                            .format(username=user))\n    ```", "```py\n    from django.urls import path\n    from . import views\n    urlpatterns = [greeting_view_user to the 'test/greet_user' endpoint for the application by setting the path in the urlpatterns list. If you have followed the previous exercises, this URL should already be set up for detection in the project and no further steps are required to configure the URL mapping.\n    ```", "```py\n    python manage.py runserver localhost:8080\n    ```", "```py\n    from django.contrib.auth.models import User\n    class TestLoggedInGreetingView(TestCase):\n        \"\"\"Test the greeting view for the authenticated users.\"\"\"\n        def setUp(self):\n            test_user = User.objects.create_user\\\n                        (username='testuser', \\\n                         password='test@#628password')\n            test_user.save()\n            self.client = Client()\n        def test_user_greeting_not_authenticated(self):\n            response = self.client.get('/test/greet_user')\n            self.assertEquals(response.status_code, 302)\n        def test_user_authenticated(self):\n            login = self.client.login\\\n                    (username='testuser', \\\n                     password='test@#628password')\n            response = self.client.get('/test/greet_user')\n            self.assertEquals(response.status_code, 200)\n    ```", "```py\n    from django.test import TestCase, Client\n    ```", "```py\n    from django.contrib.auth.models import User\n    ```", "```py\n    test_user = User.objects.create_user\\\n                (username='testuser', \\\n                 password='test@#628password')\n    test_user.save()\n    self.client = Client()\n    ```", "```py\n    def test_user_greeting_not_authenticated(self):\n        response = self.client.get('/test/greet_user')\n        self.assertEquals(response.status_code, 302)\n    ```", "```py\n    login = self.client.login\\\n            (username='testuser', \\\n             password='test@#628password')\n    ```", "```py\n    response = self.client.get('/test/greet_user')\n    self.assertEquals(response.status_code, 200)\n    ```", "```py\n    python manage.py test\n    ```", "```py\n    % python manage.py test\n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    .....\n    ----------------------------------------------------------------------\n    Ran 5 tests in 0.366s\n    OK\n    Destroying test database for alias 'default'...\n    ```", "```py\nfactory = RequestFactory()\n```", "```py\n    @login_required\n    def greeting_view_user(request):\n        \"\"\"Greeting view for the user.\"\"\"\n        user = request.user\n        return HttpResponse(\"Welcome to Bookr! {username}\"\\\n                            .format(username=user))\n    ```", "```py\n    from django.test import RequestFactory\n    ```", "```py\n    from django.contrib.auth.models import AnonymousUser\n    from .views import greeting_view_user\n    ```", "```py\n    def setUp(self):\n        self.test_user = User.objects.create_user\\\n                         (username='testuser', \\\n                          password='test@#628password')\n        self.test_user.save()\n        self.factory = RequestFactory()\n    ```", "```py\n    def test_user_greeting_not_authenticated(self):\n        request = self.factory.get('/test/greet_user')\n        request.user = AnonymousUser()\n        response = greeting_view_user(request)\n        self.assertEquals(response.status_code, 302)\n    ```", "```py\n    request.user = AnonymousUser()\n    ```", "```py\n    response = greeting_view_user(request)\n    ```", "```py\n    self.assertEquals(response.status_code, 302)\n    ```", "```py\n    def test_user_authenticated(self):\n        request = self.factory.get('/test/greet_user')\n        request.user = self.test_user\n        response = greeting_view_user(request)\n        self.assertEquals(response.status_code, 200)\n    ```", "```py\n    request.user = self.test_user\n    ```", "```py\n    python manage.py test\n    ```", "```py\n    % python manage.py test   \n    Creating test database for alias 'default'...\n    System check identified no issues (0 silenced).\n    ......\n    ----------------------------------------------------------------------\n    Ran 6 tests in 0.248s\n    OK\n    Destroying test database for alias 'default'...\n    ```", "```py\nresponse = ExampleClassView.as_view()(request)\n```", "```py\n    mkdir tests\n    ```", "```py\n    touch __init__.py\n    ```", "```py\npython manage.py test\n```"]