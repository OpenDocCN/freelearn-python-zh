- en: Chapter 9. Model-View-Controller – Compound Patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we started with an introduction to Template Method
    design pattern, in which subclasses redefine the concrete steps of the algorithm,
    thus achieving flexibility and code reuse. You learned about the Template Method
    and how it is used to construct the algorithm with a sequence of steps. We discussed
    the UML diagram, its pros and cons, learned more about it in the FAQ section,
    and summarized the discussion at the end of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will talk about Compound patterns. We will get introduced
    to the **Model-View-Controller** (**MVC**) design pattern and discuss how it is
    used in software application development. We will work with a sample use case
    and implement it in Python v3.5.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will cover the following topics in brief in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Compound patterns and the Model-View-Controller
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The MVC pattern and its UML diagram
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A real-world use case with the Python v3.5 code implementation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC pattern—pros and cons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequently asked questions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, we will summarize the entire discussion—consider
    this as a takeaway.
  prefs: []
  type: TYPE_NORMAL
- en: An introduction to Compound patterns
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Throughout this book, we explored various design patterns. As we saw, design
    patterns are classified under three main categories: structural, creational, and
    behavioral design patterns. You also learned about each of these with examples.'
  prefs: []
  type: TYPE_NORMAL
- en: However, in software implementation, patterns don't work in isolation. Every
    software design or solution is not implemented with just one design pattern. Actually,
    patterns are often used together and combined to achieve a given design solution.
    As GoF defines, "*a compound pattern combines two or more patterns into a solution
    that solves a recurring or general problem*." A Compound pattern is not a set
    of patterns working together; it is a general solution to a problem.
  prefs: []
  type: TYPE_NORMAL
- en: We're now going to look at the Model-View-Controller Compound pattern. It's
    the best example of Compound patterns and has been used in many design solutions
    over the years.
  prefs: []
  type: TYPE_NORMAL
- en: The Model-View-Controller pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'MVC is a software pattern to implement user interfaces and an architecture
    that can be easily modified and maintained. Essentially, the MVC pattern talks
    about separating the application into three essential parts: model, view, and
    controller. These three parts are interconnected and help in separating the ways
    in which information is represented to the way information is presented.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This is how the MVC pattern works: the model represents the data and business
    logic (how information is stored and queried), view is nothing but the representation
    (how it is presented) of the data, and controller is the glue between the two,
    the one that directs the model and view to behave in a certain way based on what
    a user needs. Interestingly, the view and controller are dependent on the model
    but not the other way round. This is primarily because a user is concerned about
    the data. Models can be worked with independently and this is the key aspect of
    the MVC pattern.'
  prefs: []
  type: TYPE_NORMAL
- en: Consider the case of a website. This is one of the classical examples to describe
    the MVC pattern. What happens on a website? You click on a button, a few operations
    happen, and you get to see what you desired. How does this happen?
  prefs: []
  type: TYPE_NORMAL
- en: You are the user and you interact with the view. The view is the web page that
    is presented to you. You click on the buttons on the view and it tells the controller
    what needs to be done.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers take the input from the view and send it to the model. The model
    gets manipulated based on the actions done by the user.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controllers can also ask the view to change based on the action it receives
    from the user, such as changing the buttons, presenting additional UI elements,
    and so on.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The model notifies the change in state to the view. This can be based on a few
    internal changes or external triggers such as clicking on a button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The view then displays the state that it gets directly from the model. For example,
    if a user logs in to the website, he/she might be presented with a dashboard view
    (post login). All the details that need to be populated on the dashboard are given
    by the model to the view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The MVC design pattern works with the following terms—Model, View, Controller
    and the Client:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Model**: This declares a class to store and manipulate data'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View**: This declares a class to build user interfaces and data displays'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Controller**: This declares a class that connects the model and view'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**User**: This declares a class that requests for certain results based on
    certain actions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following image explains the flow of the MVC pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '![The Model-View-Controller pattern](img/00031.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'To talk about the MVC pattern in software development terminologies, let''s
    look into the main classes involved in the MVC pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: The `model` class is used to define all the operations that happen on the data
    (such as create, modify, and delete) and provides methods on how to use the data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `view` class is a representation of the user interface. It will have methods
    that help us build web or GUI interfaces based on the context and need of the
    application. It should not contain any logic of its own and just display the data
    that it receives.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `controller` class is used to receive data from the request and send it
    to other parts of the system. It has methods that are used to route requests.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The MVC pattern is used in the following cases:'
  prefs: []
  type: TYPE_NORMAL
- en: When there is a need to change the presentation without changes in the business
    logic
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple controllers can be used to work with multiple views to change the representation
    on the user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once again, the model can be changed without changes in the view as they can
    work independently of each other
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In short, the main intention of the MVC pattern is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Keeping the data and presentation of the data separate.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Easy maintenance of the class and implementation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Flexibility to change the way in which data is stored and displayed. Both are
    independent and hence have the flexibility to change.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at the model, view, and controller in detail as covered in *Learning
    Python Design Patterns*, *Gennadiy Zlobin*, *Packt Publishing* as well.
  prefs: []
  type: TYPE_NORMAL
- en: Model – knowledge of the application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Model is the cornerstone of an application because it is independent of the
    view and controller. The view and controller in turn are dependent on the model.
  prefs: []
  type: TYPE_NORMAL
- en: Model also provides data that is requested by the client. Typically, in applications,
    the model is represented by the database tables that store and return information.
    Model has state and methods to change states but is not aware of how the data
    would be seen by the client.
  prefs: []
  type: TYPE_NORMAL
- en: It is critical that the model stays consistent across multiple operations; otherwise,
    the client may get corrupted or display stale data, which is completely undesirable.
  prefs: []
  type: TYPE_NORMAL
- en: As the model is completely independent, developers working on this piece can
    focus on maintenance without the need for the latest view changes.
  prefs: []
  type: TYPE_NORMAL
- en: View – the appearance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view is a representation of data on the interface that the client sees.
    The view can be developed independently but should not contain any complex logic.
    Logic should still reside in the controller or model.
  prefs: []
  type: TYPE_NORMAL
- en: In today's world, views need to be flexible enough and should cater to multiple
    platforms such as desktop, mobiles, tables, and multiple screen sizes.
  prefs: []
  type: TYPE_NORMAL
- en: Views should avoid interacting directly with the databases and rely on models
    to get the required data.
  prefs: []
  type: TYPE_NORMAL
- en: Controller – the glue
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The controller, as the name suggests, controls the interaction of the user on
    the interface. When the user clicks on certain elements on the interface, based
    on the interaction (button click or touch), the controller makes a call to the
    model that in turn creates, updates, or deletes the data.
  prefs: []
  type: TYPE_NORMAL
- en: Controllers also pass the data to the view that renders the information for
    the user to view on the interface.
  prefs: []
  type: TYPE_NORMAL
- en: The Controller shouldn't make database calls or get involved in presenting the
    data. The controller should act as the glue between the model and view and be
    as thin as possible.
  prefs: []
  type: TYPE_NORMAL
- en: Let's now get into action and develop one sample app. The Python code shown
    next implements the MVC design pattern. Consider that we want to develop an application
    that tells a user about the marketing services delivered by a cloud company, which
    include e-mail, SMS, and voice facilities.
  prefs: []
  type: TYPE_NORMAL
- en: We first develop the `model` class (Model) that defines the services provided
    by the product, namely, e-mail, SMS, and voice. Each of these services have designated
    rates, such as 1,000 e-mails would charge the client $2, and for 1,000 messages,
    the charges are $10, and $15 for 1,000 voice messages. Thus, the model represents
    the data about the product services and prices.
  prefs: []
  type: TYPE_NORMAL
- en: We then define the `view` class (View) that provides a method to present the
    information back to the client. The methods are `list_services()` and `list_pricing()`;
    as the name suggests, one method is used to print the services offered by the
    product and the other is to list the pricing for the services.
  prefs: []
  type: TYPE_NORMAL
- en: We then define the `Controller` class that defines two methods, `get_services()`
    and `get_pricing()`. Each of these methods queries the model and gets the data.
    The data is then fed to the view and thus presented to the client.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Client` class instantiates the controller. The `controller` object is
    used to call appropriate methods based on the client''s request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Controller – the glue](img/00032.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A UML class diagram for the MVC design pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's now understand more about the MVC pattern with the help of the following
    UML diagram.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we discussed in the previous sections, the MVC pattern has the following
    main participants: the `Model`, `View`, and `Controller` class.'
  prefs: []
  type: TYPE_NORMAL
- en: '![A UML class diagram for the MVC design pattern](img/00033.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the UML diagram, we can see three main classes in this pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Model` class: This defines the business logic or operations attached to
    certain tasks from the client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `View` class: This defines the view or representation that is viewed by
    the client. The model presents the data to the view based on the business logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `Controller` class: This is essentially an interface that is between the
    view and model. When the client takes certain actions, the controller directs
    the query from the view to model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a code example to understand the pattern with all the participants
    involved:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A UML class diagram for the MVC design pattern](img/00034.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: The MVC pattern in the real world
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our good old web application frameworks are based on the philosophies of MVC.
    Take the example of Django or Rails (Ruby): they structure their projects in the
    Model-View-Controller format except that it is represented as **MTV** (**Model**,
    **Template**, **View**) where the model is the database, templates are the views,
    and controllers are the views/routes.'
  prefs: []
  type: TYPE_NORMAL
- en: As an example, let's take up the Tornado web application framework ([http://www.tornadoweb.org/en/stable/](http://www.tornadoweb.org/en/stable/))
    to develop a single-page app. This application is used to manage a user's tasks
    and the user has permissions to add tasks, update tasks, and delete tasks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the design considerations:'
  prefs: []
  type: TYPE_NORMAL
- en: Let's start with the controllers first. In Tornado, controllers have been defined
    as views/app routes. We need to define multiple views such as listing the tasks,
    creating new tasks, closing the tasks, and handling an operation if a request
    could not be served.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should also define models, the database operations to list, create, or delete
    the tasks.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, the views are represented by templates in Tornado. Based on our app,
    we would need a template to show tasks, create or delete tasks, and also a template
    if a URL is not found.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the following modules for this application:'
  prefs: []
  type: TYPE_NORMAL
- en: Torando==4.3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SQLite3==2.6.0
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s start by importing the Python modules in our app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The following code represents the database operations, essentially, the models
    in MVC. In Tornado, DB operations are performed under different handlers. Handlers
    perform operations on the DB based on the route requested by the user in the web
    app. Here, we talk about the four handlers that we have created in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`IndexHandler`: This returns all the tasks that are stored in the database.
    It returns a dictionary with key tasks. It performs the `SELECT` database operation
    to get these tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`NewHandler`: As the name suggests, this is useful to add new tasks. It checks
    whether there is a `POST` call to create a new task and does an `INSERT` operation
    in the DB.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`UpdateHandler`: This is useful in marking a task as complete or reopening
    a given task. In this case, the `UPDATE` database operation occurs to set a task
    with the status as open/closed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DeleteHandler`: This deletes a given task from the database. Once deleted,
    the task is no more visible in the list of tasks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We have also developed an `_execute()` method that takes a SQLite query as
    an input and performs the required DB operation. The `_execute()` method does
    the following operations on the SQLite DB:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a SQLite DB connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting the cursor object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the cursor object to make a transaction
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Committing the query
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Closing the connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at the handlers in the Python implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you look up these methods, you''ll notice something called `self.render()`.
    This essentially represents the views in MVC (templates in the Tornado framework).
    We have three main templates:'
  prefs: []
  type: TYPE_NORMAL
- en: '`index.html`: This is a template to list all the tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`new.html`: This is the view to create a new task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base.html`: This is the base template from which other templates are inherited'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In Tornado, we also have the application routes that are controllers in MVC.
    We have four application routes in this example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/`: This is the route to list all the tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/todo/new`: This is the route to create new tasks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/todo/update`: This is the route to update the task status to open/closed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/todo/delete`: This is the route to delete a completed task'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code example is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We also have application settings and can start the HTTP web server to run
    the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'When we run the Python program:'
  prefs: []
  type: TYPE_NORMAL
- en: The server gets started and runs on port `5000`. The appropriate views, templates,
    and controllers have been configured.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On browsing `http://localhost:5000/`, we can see the list of tasks. the following
    screenshot shows the output in the browser:![Modules](img/00035.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also add a new task. Once you click on **add**, a new task gets added.
    In the following screenshot, a new task `Write the New Chapter` is added and listed
    in the task list:![Modules](img/00036.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When we enter the new task and click on the ADD button, the task gets added
    to the list of existing tasks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Modules](img/00037.jpeg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: We can close tasks from the UI as well. For example, we update the **Cook food**
    task and the list gets updated. We can reopen the task if we choose to:![Modules](img/00038.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We can also delete a task. In this case, we delete the first task, **New Task**,
    and the task list will get updated to remove the task:![Modules](img/00039.jpeg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Benefits of the MVC pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following are the benefits of the MVC pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: 'With MVC, developers can split the software application into three major parts:
    model, view, and controller. This helps in achieving easy maintenance, enforcing
    loose coupling, and decreasing complexity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC allows independent changes on the frontend without any, or very few, changes
    on the backend logic, and so the development efforts can still run independently.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On similar lines, models or business logic can be changed without any changes
    in the view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additionally, the controller can be changed without any impact on views or models.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MVC also helps in hiring people with specific capabilities such as platform
    engineers and UI engineers who can work independently in their field of expertise.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Frequently asked questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1\. Isn't MVC a pattern? Why is it called a Compound pattern?
  prefs: []
  type: TYPE_NORMAL
- en: 'A: Compound patterns are essentially groups of patterns put together to solve
    large design problems in software application development. The MVC pattern is
    the most popular and widely used Compound pattern. As it is so widely used and
    reliable, it is treated as a pattern itself.'
  prefs: []
  type: TYPE_NORMAL
- en: Q2\. Is MVC used only in websites?
  prefs: []
  type: TYPE_NORMAL
- en: 'A: No, a website is the best example to describe MVC. However, MVC can be used
    in multiple areas such as GUI applications or any other place where you need loose
    coupling and splitting of components in an independent way. Typical examples of
    MVC include blogs, movie database applications, and video streaming web apps.
    While MVC is useful in many places, it''s overkill if you use it for the landing
    pages, marketing content, or quick single-page applications.'
  prefs: []
  type: TYPE_NORMAL
- en: Q3\. Can multiple views work with multiple models?
  prefs: []
  type: TYPE_NORMAL
- en: 'A: Yes, often you''d end up in a situation where the data needs to be collated
    from multiple models and presented in one view. One-to-one mapping is rare in
    today''s web app world.'
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We began the chapter by understanding Compound patterns and looked at the Model-View-Controller
    pattern and how it is effectively used in software architecture. We then looked
    at how the MVC pattern is used to ensure loose coupling and maintain a multilayer
    framework for independent task development.
  prefs: []
  type: TYPE_NORMAL
- en: You also learned the pattern with a UML diagram and sample code implementation
    in Python v3.5 along with the explanation. We also covered a section on FAQs that
    would help you get more ideas on the pattern and its possible advantages/disadvantages.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will talk about the Anti patterns. See you there!
  prefs: []
  type: TYPE_NORMAL
