["```py\nconfig t\nlogging host 192.168.255.250 transport tcp port 514\nlogging buffered informational\nexit\n```", "```py\nR2#show logging\nSyslog logging: enabled (11 messages dropped, 0 messages rate-limited,\n 0 flushes, 0 overruns, xml disabled, filtering disabled)\n Console logging: level debugging, 26 messages logged, xml disabled,\n filtering disabled\n Monitor logging: level debugging, 0 messages logged, xml disabled,\n filtering disabled\n Buffer logging: level informational, 7 messages logged, xml disabled,\n filtering disabled\n Logging Exception size (4096 bytes)\n Count and timestamp logging messages: disabled\nNo active filter modules.\n Trap logging: level informational, 30 message lines logged\n Logging to 192.168.255.250(global) (tcp port 514,audit disabled, link up), 30 message lines logged, xml disabled,\n filtering disabled\nLog Buffer (4096 bytes):\n*Mar  1 01:02:04.223: %SYS-5-CONFIG_I: Configured from console by console\n*Mar  1 01:02:10.275: %SYS-6-LOGGINGHOST_STARTSTOP: Logging to host 192.168.255.250 started - reconnection\n*Mar  1 01:02:32.179: %LINK-5-CHANGED: Interface Loopback0, changed state to administratively down\n*Mar  1 01:02:33.179: %LINEPROTO-5-UPDOWN: Line protocol on Interface Loopback0, changed state to down\n*Mar  1 01:02:39.303: %SYS-5-CONFIG_I: Configured from console by console\n*Mar  1 01:02:39.647: %LINK-3-UPDOWN: Interface Loopback0, changed state to up\n*Mar  1 01:02:40.647: %LINEPROTO-5-UPDOWN: Line protocol on Interface Loopback0, changed state to up\n\n```", "```py\nhost=\"192.168.255.248\" \"Interface Loopback0, changed state to down\"\n```", "```py\nimport requests\nimport json\nfrom xml.dom import minidom\n\nusername=\"admin\"\npassword=\"admin\"\n\n### For generating the session key ####\nurl = 'https://localhost:8089/services/auth/login'\nheaders = {'Content-Type': 'application/json'}\ndata={\"username\":username,\"password\":password}\nrequests.packages.urllib3.disable_warnings()\nr = requests.get(url, auth=(username, password), data=data, headers=headers,verify=False)\nsessionkey = minidom.parseString(r.text).getElementsByTagName('sessionKey')[0].childNodes[0].nodeValue\n\n#### For executing the query using the generated sessionkey\nheaders={\"Authorization\":\"Splunk \"+sessionkey}\ndata={\"search\":'search host=\"192.168.255.248\" \"Interface Loopback0, changed state to down\"',\"output_mode\":\"json\"}\nr=requests.post('https://localhost:8089/servicesNS/admin/search/search/jobs/export',data=data , headers=headers,verify=False);\nprint (r.text)\n```", "```py\n{\"search\":'search host=\"192.168.255.248\" \"Interface Loopback0, changed state to down\"'}\n```", "```py\nSearch='search host=\"192.168.255.248\" \"Interface Loopback0, changed state to down\"'\n```", "```py\nfrom netmiko import ConnectHandler\nimport time\n\ndef pushbgpconfig(routerip,remoteip,localas,remoteas,newconfig=\"false\"):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"\"\n    cmds=\"router bgp \"+localas\n    cmds=cmds+\"\\n neighbor \"+remoteip+\" remote-as \"+remoteas\n    xcheck=device.send_config_set(cmds)\n    print (xcheck)\n    outputx=device.send_command(\"wr mem\")\n    print (outputx)\n    device.disconnect()\n\ndef validatebgp(routerip,remoteip):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"show ip bgp neighbors \"+remoteip+\" | include BGP state\"\n    outputx=device.send_command(cmds)\n    if (\"Established\" in outputx):\n        print (\"Remote IP \"+remoteip+\" on local router \"+routerip+\" is in ESTABLISHED state\")\n    else:\n        print (\"Remote IP \"+remoteip+\" on local router \"+routerip+\" is NOT IN ESTABLISHED state\")\n    device.disconnect()\n\npushbgpconfig(\"192.168.255.249\",\"192.168.255.248\",\"200\",\"200\")\n### we give some time for bgp to establish\nprint (\"Now sleeping for 5 seconds....\")\ntime.sleep(5) # 5 seconds\nvalidatebgp(\"192.168.255.249\",\"192.168.255.248\")\n```", "```py\nfrom netmiko import ConnectHandler\nimport time\ndef pushbgpconfig(routerip,remoteip,localas,remoteas,newconfig=\"false\"):\n uname=\"cisco\"\n passwd=\"cisco\"\n device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n cmds=\"\"\n cmds=\"router bgp \"+localas\n cmds=cmds+\"\\n neighbor \"+remoteip+\" remote-as \"+remoteas\n xcheck=device.send_config_set(cmds)\n print (xcheck)\n outputx=device.send_command(\"wr mem\")\n print (outputx)\n device.disconnect()\ndef validatebgp(routerip,remoteip):\n uname=\"cisco\"\n passwd=\"cisco\"\n device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n cmds=\"show ip bgp neighbors \"+remoteip+\" | include BGP state\"\n outputx=device.send_command(cmds)\n if (\"Established\" in outputx):\n print (\"Remote IP \"+remoteip+\" on local router \"+routerip+\" is in ESTABLISHED state\")\n else:\n print (\"Remote IP \"+remoteip+\" on local router \"+routerip+\" is NOT IN ESTABLISHED state\")\n device.disconnect()\n\npushbgpconfig(\"192.168.255.249\",\"192.168.255.248\",\"200\",\"400\")\n### we give some time for bgp to establish\nprint (\"Now sleeping for 5 seconds....\")\ntime.sleep(5) # 5 seconds\nvalidatebgp(\"192.168.255.249\",\"192.168.255.248\")\n```", "```py\nfrom netmiko import ConnectHandler\nimport itertools\n\nclass linecheck:\n    def __init__(self):\n        self.state = 0\n    def __call__(self, line):\n        if line and not line[0].isspace():\n            self.state += 1\n        return self.state\n\ndef getbgpipaddress(routerip):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"show running-config\"\n    outputx=device.send_command(cmds)\n    device.disconnect()\n    for _, group in itertools.groupby(outputx.splitlines(), key=linecheck()):\n        templist=list(group)\n        if (len(templist) == 1):\n            if \"!\" in str(templist):\n                continue \n        print(templist)\n\ngetbgpipaddress(\"192.168.255.249\")\n```", "```py\nfrom netmiko import ConnectHandler\nimport itertools\nimport re\n\nclass linecheck:\n    def __init__(self):\n        self.state = 0\n    def __call__(self, line):\n        if line and not line[0].isspace():\n            self.state += 1\n        return self.state\n\ndef getbgpipaddress(routerip):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"show running-config\"\n    outputx=device.send_command(cmds)\n    device.disconnect()\n    for _, group in itertools.groupby(outputx.splitlines(), key=linecheck()):\n        templist=list(group)\n        if (len(templist) == 1):\n            if \"!\" in str(templist):\n                continue \n        if \"router bgp\" in str(templist):\n            for line in templist:\n                if (\"neighbor \" in line):\n                    remoteip=re.search(\"\\d+.\\d+.\\d+.\\d+\",line)\n                    print (\"Remote ip: \"+remoteip.group(0))\n\ngetbgpipaddress(\"192.168.255.249\")\n```", "```py\npip install cymruwhois\n```", "```py\nimport socket\n\ndef getfromhostname(hostname):\n    print (\"AS info for hostname :\"+hostname)\n    ip = socket.gethostbyname(hostname)\n    from cymruwhois import Client\n    c=Client()\n    r=c.lookup(ip)\n    print (r.asn)\n    print (r.owner)\n\ndef getfromip(ip):\n    print (\"AS info for IP : \"+ip)\n    from cymruwhois import Client\n    c=Client()\n    r=c.lookup(ip)\n    print (r.asn)\n    print (r.owner)\n\ngetfromhostname(\"google.com\")\ngetfromip(\"107.155.8.0\")\n```", "```py\nfrom netmiko import ConnectHandler\nimport time\n\ndef apvlanpush(routerip,switchport):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"interface \"+switchport\n    cmds=cmds+\"\\nswitchport mode trunk\\nswitchport trunk encapsulation dot1q\\n\"\n    cmds=cmds+ \"switchport trunk native vlan 10\\nswitchport trunk allowed vlan add 10,100,200\\nno shut\\n\"\n    xcheck=device.send_config_set(cmds)\n    print (xcheck)\n    device.disconnect()\n\ndef validateswitchport(routerip,switchport):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"show interface \"+switchport+\" switchport \"\n    outputx=device.send_command(cmds)\n    print (outputx)\n    device.disconnect()\n\napvlanpush(\"192.168.255.245\",\"FastEthernet2/0\")\ntime.sleep(5) # 5 seconds\nvalidateswitchport(\"192.168.255.245\",\"FastEthernet2/0\")\n\n```", "```py\nfrom netmiko import ConnectHandler\nimport time\n\ndef apvlanpush(routerip,switchport):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"interface \"+switchport\n    cmds=cmds+\"\\nswitchport mode trunk\\nswitchport trunk encapsulation dot1q\\n\"\n    cmds=cmds+ \"switchport trunk native vlan 10\\nswitchport trunk allowed vlan add 10,100,200\\nno shut\\n\"\n    xcheck=device.send_config_set(cmds)\n    print (xcheck)\n    device.disconnect()\n\ndef validateswitchport(routerip,switchport):\n    print (\"\\nValidating switchport....\"+switchport)\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"show interface \"+switchport+\" switchport \"\n    outputx=device.send_command(cmds)\n    print (outputx)\n    outputx=outputx.split(\"\\n\")\n    for line in outputx:\n        if (\"Trunking Native Mode VLAN: 10\" in line):\n            changenativevlan(routerip,switchport,\"20\")\n    device.disconnect()\n\ndef changenativevlan(routerip,switchport,nativevlan):\n    print (\"\\nNow changing native VLAN on switchport\",switchport)\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"interface \"+switchport\n    cmds=cmds+\"\\nswitchport trunk native vlan \"+nativevlan+\"\\n\"\n    xcheck=device.send_config_set(cmds)\n    print (xcheck)\n    validateswitchport(routerip,switchport)\n    device.disconnect()\n\napvlanpush(\"192.168.255.245\",\"FastEthernet2/0\")\ntime.sleep(5) # 5 seconds\nvalidateswitchport(\"192.168.255.245\",\"FastEthernet2/0\")\n```", "```py\nfrom netmiko import ConnectHandler\nimport time\n\ndef ipphoneconfig(routerip,switchport):\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"interface \"+switchport\n    cmds=cmds+\"\\nswitchport mode access\\nswitchport access vlan 100\\n\"\n    cmds=cmds+ \"switchport voice vlan 200\\nspanning-tree portfast\\nno shut\\n\"\n    xcheck=device.send_config_set(cmds)\n    print (xcheck)\n    device.disconnect()\n\ndef validateswitchport(routerip,switchport):\n    print (\"\\nValidating switchport....\"+switchport)\n    uname=\"cisco\"\n    passwd=\"cisco\"\n    device = ConnectHandler(device_type='cisco_ios', ip=routerip, username=uname, password=passwd)\n    cmds=\"show interface \"+switchport+\" switchport \"\n    outputx=device.send_command(cmds)\n    print (outputx)\n    outputx=outputx.split(\"\\n\")\n    for line in outputx:\n        if (\"Trunking Native Mode VLAN: 10\" in line):\n            changenativevlan(routerip,switchport,\"20\")\n    device.disconnect()\n\nipphoneconfig(\"192.168.255.245\",\"FastEthernet2/5\")\ntime.sleep(5) # 5 seconds\nvalidateswitchport(\"192.168.255.245\",\"FastEthernet2/5\")\n\n```", "```py\n>>> from pynetgear import Netgear, Device\n>>> netgear = Netgear(\"myrouterpassword\", \"192.168.100.1\",\"admin\",\"80\")\n>>> for i in netgear.get_attached_devices():\n  print (i)\n```", "```py\n>>> netgear.get_attached_devices()\n[Device(signal=3, ip='192.168.100.4', name='ANDROID-12345', mac='xx:xx:xx:xx:xx:xx', type='wireless', link_rate=72), Device(signal=None, ip='192.168.100.55', name='ANDROID-678910', mac='yy:yy:yy:yy:yy:yy', type='wireless', link_rate=72), Device(signal=None, ip='192.168.100.10', name='mylaptop', mac='zz:zz:zz:zz:zz:zz', type='wireless', link_rate=520)]\n```", "```py\nfrom orionsdk import SwisClient\n\nnpm_server = 'mysolarwindsserver'\nusername = \"test\"\npassword = \"test\"\n\nverify = False\nif not verify:\n    from requests.packages.urllib3.exceptions import InsecureRequestWarning\n    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)\n\nswis = SwisClient(npm_server, username, password)\n\nprint(\"My IPAM test:\")\nresults=swis.query(\"SELECT TOP 1 Status, DisplayName FROM IPAM.IPNode WHERE Status=2\")\nprint (results)\n\n### for a formatted printing\nfor row in results['results']:\n print(\"Avaliable: {DisplayName}\".format(**row))\n\n```", "```py\n SELECT TOP 1 Status, DisplayName FROM IPAM.IPNode  WHERE Status=2 \n```", "```py\n<!DOCTYPE html>\n\n<html >\n<head>\n         <script>\n             function checkme() {\n        var a=document.forms[\"search\"][\"cmds\"].value;\n        var b=document.forms[\"search\"][\"searchbox\"].value;\n        var c=document.forms[\"search\"][\"prepost\"].value;\n        var d=document.forms[\"search\"][\"changeid\"].value;\n        if (a==null || a==\"\")\n        {\n          alert(\"Please Fill All Fields\");\n          return false;\n        }\n        if (b==null || b==\"\")\n        {\n          alert(\"Please Fill All Fields\");\n          return false;\n        }\n        if (c==null || c==\"\")\n        {\n          alert(\"Please Fill All Fields\");\n          return false;\n        }\n        if (d==null || d==\"\")\n        {\n          alert(\"Please Fill All Fields\");\n          return false;\n        }\n                 document.getElementById(\"mypoint\").style.display = \"inline\";\n             }\n</script>\n</head>\n<body>\n<h2> Pre/Post check selection </h2>\n<form name=\"search\" action=\"checks.py\" method=\"post\" onsubmit=\"return checkme()\">\nHost IP: (Multiple IPs seperated by comma)<br><input type=\"text\" name=\"searchbox\" size='80' required>\n<p></p>\nCommands (Select):\n<br>\n<select name=\"cmds\" multiple style=\"width:200px;height:200px;\" required>\n  <option value=\"show version\">show version</option>\n  <option value=\"show ip int brief\">show ip int brief</option>\n  <option value=\"show interface description\">show interface description</option>\n  <option value=\"show clock\">show clock</option>\n  <option value=\"show log\">show log (last 100)</option>\n  <option value=\"show run\">show run</option>\n  <option value=\"show ip bgp summary\">show ip bgp summary</option>\n  <option value=\"show ip route\">show ip route</option>\n  <option value=\"show ip route summary\">show ip route summary</option>\n  <option value=\"show ip ospf\">show ip ospf</option>\n  <option value=\"show interfaces status\">show interfaces status</option>\n\n</select>\n<p></p>\nMantainence ID: <input type=\"text\" name=\"changeid\" required>\n<p></p>\nPre/Post: <br>\n<input type=\"radio\" name=\"prepost\" value=\"pre\" checked> Precheck<br>\n<input type=\"radio\" name=\"prepost\" value=\"post\"> Postcheck<br>\n<p></p>\n<input type=\"submit\" value=\"Submit\">\n<br><br><br>\n</form> \n<p><label id=\"mypoint\" style=\"display: none;background-color: yellow;\"><b>Please be Patient.... Gathering results!!!</b></label></p>\n</body>\n</html>\n```", "```py\n#!/usr/bin/env python\nimport cgi\nimport paramiko\nimport time\nimport re\nimport sys\nimport os\nimport requests\nimport urllib\nimport datetime\nfrom datetime import datetime\nfrom threading import Thread\nfrom random import randrange\n\nform = cgi.FieldStorage()\nsearchterm = form.getvalue('searchbox')\ncmds = form.getvalue('cmds')\nchangeid = form.getvalue('changeid')\nprepost=form.getvalue('prepost')\nsearchterm=searchterm.split(\",\")\nxval=\"\"\nxval=datetime.now().strftime(\"%Y-%m-%d_%H_%M_%S\")\n\nreturns = {}\ndef getoutput(devip,cmd):\n    try:\n        output=\"\"\n        mpath=\"C:/iistest/logs/\"\n        fname=changeid+\"_\"+devip+\"_\"+prepost+\"_\"+xval+\".txt\"\n        fopen=open(mpath+fname,\"w\")\n        remote_conn_pre = paramiko.SSHClient()\n        remote_conn_pre.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n        remote_conn_pre.connect(devip, username='cisco', password='cisco', look_for_keys=False, allow_agent=False)\n        remote_conn = remote_conn_pre.invoke_shell()\n        remote_conn.settimeout(60)\n        command=cmd\n        remote_conn.send(command+\"\\n\")\n        time.sleep(15)\n        output=(remote_conn.recv(250000)).decode()\n        fopen.write(output)\n        remote_conn.close()\n        fopen.close()\n        returns[devip]=(\"Success: <a href='http://localhost/test/logs/\"+fname+\"' target='_blank'>\"+fname +\"</a> Created\")\n    except:\n        returns[devip]=\"Error. Unable to fetch details\"\n\ntry:\n    xtmp=\"\"\n    cmdval=\"terminal length 0\\n\"\n    if (str(cmds).count(\"show\") > 1):\n        for cmdvalue in cmds:\n            if (\"show\" in cmdvalue):\n                if (\"show log\" in cmdvalue):\n                    cmdvalue=\"terminal shell\\nshow log | tail 100\"\n                cmdval=cmdval+cmdvalue+\"\\n\\n\"\n    else:\n        if (\"show\" in cmds):\n            if (\"show log\" in cmds):\n                cmds=\"terminal shell\\nshow log | tail 100\"\n            cmdval=cmdval+cmds+\"\\n\\n\"\n    threads_imagex= []\n    for devip in searchterm:\n        devip=devip.strip()\n        t = Thread(target=getoutput, args=(devip,cmdval,))\n        t.start()\n        time.sleep(randrange(1,2,1)/20)\n        threads_imagex.append(t)\n\n    for t in threads_imagex:\n        t.join()\n\n    print(\"Content-type: text/html\")\n    print()\n    xval=\"\"\n    for key in returns:\n        print (\"<b>\"+key+\"</b>:\"+returns[key]+\"<br>\")\n\n    print (\"<br>Next step: <a href='http://localhost/test/selectfiles.aspx'> Click here to compare files </a>\")\n    print (\"<br>Next step: <a href='http://localhost/test/prepostcheck.html'> Click here to perform pre/post check </a>\")\n\nexcept:\n    print(\"Content-type: text/html\")\n    print()\n    print(\"Error fetching details. Need manual validation\")\n    print (\"<br>Next step: <a href='http://localhost/test/selectfiles.aspx'> Click here to compare files </a>\")\n    print (\"<br>Next step: <a href='http://localhost/test/prepostcheck.html'> Click here to perform pre/post check </a>\")\n```", "```py\nform = cgi.FieldStorage()\nsearchterm = form.getvalue('searchbox')\ncmds = form.getvalue('cmds')\nchangeid = form.getvalue('changeid')\nprepost=form.getvalue('prepost')\n```", "```py\n#xval=datetime.now().strftime(\"%Y-%m-%d_%H_%M_%S\")\n#and\n#fname=changeid+\"_\"+devip+\"_\"+prepost+\"_\"+xval+\".txt\"\n```", "```py\n<%@ Page Language=\"VB\" AutoEventWireup=\"false\" CodeFile=\"selectfiles.aspx.vb\" Inherits=\"selectfiles\" %>\n\n<!DOCTYPE html>\n\n<html >\n<head runat=\"server\">\n    <title></title>\n</head>\n<body>\n    <form id=\"form1\" method=\"post\" action=\"comparefiles.aspx\" >\n    <div>\n    <%response.write(xmystring.tostring())%>\n    </div>\n         <input type=\"submit\" value=\"Submit\">\n    </form>\n  <br><br><br>\n</body>\n</html>\n```", "```py\nImports System.IO\nPartial Class selectfiles\n    Inherits System.Web.UI.Page\n    Public xmystring As New StringBuilder()\n  Public tableval As New Hashtable\n    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load\n        Dim precheck As New List(Of String)\n        Dim postcheck As New List(Of String)\n        Dim prename = New SortedList\n        Dim postname = New SortedList\n        Dim infoReader As System.IO.FileInfo\n    Dim rval as Integer\n    rval=0\n\n        xmystring.Clear()\n        Dim xval As String\n    Dim di As New DirectoryInfo(\"C:\\iistest\\logs\\\")\n    Dim lFiles As FileInfo() = di.GetFiles(\"*.txt\")\n    Dim fi As System.IO.FileSystemInfo\n    Dim files() As String = IO.Directory.GetFiles(\"C:\\iistest\\logs\\\", \"*.txt\", SearchOption.TopDirectoryOnly)\n    xmystring.Append(\"<head><style type='text/css'>a:hover{background:blue;color:yellow;}</style></head>\")\n        xmystring.Append(\"<fieldset style='float: left;width: 49%;display: inline-block;box-sizing: border-box;'>\")\n        xmystring.Append(\"<legend>Pre check files (Sorted by Last Modified Date)</legend>\")\n\n         For Each fi In lFiles\n      rval=rval+1\n      tableval.add(fi.LastWriteTime.ToString()+rval.tostring(),fi.Name)\n            'infoReader = My.Computer.FileSystem.GetFileInfo(file)\n            If (fi.Name.Contains(\"pre\")) Then\n                precheck.Add(fi.LastWriteTime.ToString()+rval.tostring()) \n            Else\n                postcheck.Add(fi.LastWriteTime.ToString()+rval.tostring())\n            End If\n        Next\n        precheck.Sort()\n        postcheck.Sort()\n\n        xval = \"\"\n        Dim prekey As ICollection = prename.Keys\n        Dim postkey As ICollection = postname.Keys\n        Dim dev As String\n    Dim fnameval as String\n        For Each dev In precheck\n            infoReader = My.Computer.FileSystem.GetFileInfo(tableval(dev))\n      fnameval=\"http://localhost/test/logs/\"+Path.GetFileName(tableval(dev))\n            xval = \"<input type = 'radio' name='prechecklist' value='C:\\iistest\\logs\\\" + tableval(dev) + \"' required><a href='\" & fnameval & \"' target='blank'>\" & tableval(dev) & \"</a> ( <b>\" & dev.Substring(0,dev.LastIndexOf(\"M\")).Trim() + \"M</b>)<br>\"\n\n      xmystring.Append(xval)\n        Next\n    xmystring.Append(\"</fieldset>\")\n           xmystring.Append(\"<fieldset style='float: right;width: 49%;display: inline-block;box-sizing: border-box;'>\")\n        xmystring.Append(\"<legend>Post check files (Sorted by Last Modified Date)</legend>\")\n              For Each dev In postcheck\n      fnameval=\"http://localhost/test/logs/\"+tableval(dev)\n            xval = \"<input type = 'radio' name='postchecklist' value='C:\\iistest\\logs\\\" + tableval(dev) + \"' required><a href='\" & fnameval & \"' target='blank'>\" & tableval(dev) & \"</a> ( <b>\" & dev.Substring(0,dev.LastIndexOf(\"M\")).Trim() + \"M</b>)<br>\"\n            xmystring.Append(xval)\n        Next\n        xmystring.Append(\"</fieldset>\")\n\n    End Sub\nEnd Class\n```", "```py\n<%@ Page Language=\"VB\" AutoEventWireup=\"false\" CodeFile=\"comparefiles.aspx.vb\" Inherits=\"comparefiles\" %>\n\n<!DOCTYPE html>\n\n<html >\n<head>\n  <meta charset=\"utf-8\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge,chrome=1\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"diffview.css\"/>\n  <script type=\"text/javascript\" src=\"img/diffview.js\"></script>\n  <script type=\"text/javascript\" src=\"img/difflib.js\"></script>\n<style type=\"text/css\">\nbody {\n  font-size: 12px;\n  font-family: Sans-Serif;\n}\nh2 {\n  margin: 0.5em 0 0.1em;\n  text-align: center;\n}\n.top {\n  text-align: center;\n}\n.textInput {\n  display: block;\n  width: 49%;\n  float: left;\n}\ntextarea {\n  width:100%;\n  height:300px;\n}\nlabel:hover {\n  text-decoration: underline;\n  cursor: pointer;\n}\n.spacer {\n  margin-left: 10px;\n}\n.viewType {\n  font-size: 16px;\n  clear: both;\n  text-align: center;\n  padding: 1em;\n}\n#diffoutput {\n  width: 100%;\n}\n</style>\n\n<script type=\"text/javascript\">\n\nfunction diffUsingJS(viewType) {\n  \"use strict\";\n  var byId = function (id) { return document.getElementById(id); },\n    base = difflib.stringAsLines(byId(\"baseText\").value),\n    newtxt = difflib.stringAsLines(byId(\"newText\").value),\n    sm = new difflib.SequenceMatcher(base, newtxt),\n    opcodes = sm.get_opcodes(),\n    diffoutputdiv = byId(\"diffoutput\"),\n    contextSize = byId(\"contextSize\").value;\n\n  diffoutputdiv.innerHTML = \"\";\n  contextSize = contextSize || null;\n\n  diffoutputdiv.appendChild(diffview.buildView({\n    baseTextLines: base,\n    newTextLines: newtxt,\n    opcodes: opcodes,\n    baseTextName: \"Base Text\",\n    newTextName: \"New Text\",\n    contextSize: contextSize,\n    viewType: viewType\n  }));\n}\n\n</script>\n</head>\n<body>\n  <div class=\"top\">\n    <strong>Context size (optional):</strong> <input type=\"text\" id=\"contextSize\" value=\"\" />\n  </div>\n  <div class=\"textInput\">\n    <h2>Pre check</h2>\n    <textarea id=\"baseText\" runat=\"server\" readonly></textarea>\n  </div>\n  <div class=\"textInput spacer\">\n    <h2>Post check</h2>\n    <textarea id=\"newText\" runat=\"server\" readonly></textarea>\n  </div>\n    <% Response.Write(xmystring.ToString()) %>\n  <div class=\"viewType\">\n    <input type=\"radio\" name=\"_viewtype\" id=\"sidebyside\" onclick=\"diffUsingJS(0);\" /> <label for=\"sidebyside\">Side by Side Diff</label>\n    &nbsp; &amp;amp;amp;nbsp;\n    <input type=\"radio\" name=\"_viewtype\" id=\"inline\" onclick=\"diffUsingJS(1);\" /> <label for=\"inline\">Inline Diff</label>\n  </div>\n  <div id=\"diffoutput\"> </div>\n\n</body>\n</html>\n```", "```py\nImports System.IO\n\nPartial Class comparefiles\n    Inherits System.Web.UI.Page\n    Public xmystring As New StringBuilder()\n\n    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load\n        Dim fp As StreamReader\n        Dim precheck As New List(Of String)\n        Dim postcheck As New List(Of String)\n        xmystring.Clear()\n        Dim prefile As String\n        Dim postfile As String\n        prefile = Request.Form(\"prechecklist\")\n        postfile = Request.Form(\"postchecklist\")\n        fp = File.OpenText(prefile)\n        baseText.InnerText = fp.ReadToEnd()\n        fp = File.OpenText(postfile)\n        newText.InnerText = fp.ReadToEnd()\n        fp.Close()\n\n    End Sub\n\nEnd Class\n```"]