["```py\n$ curl -IL http://google.com\n\nHTTP/1.1 301 Moved Permanently\n\nLocation: http://www.google.com/\n\nContent-Type: text/html; charset=UTF-8\n\nDate: Tue, 09 Mar 2021 20:39:09 GMT\n\nExpires: Thu, 08 Apr 2021 20:39:09 GMT\n\nCache-Control: public, max-age=2592000\n\nServer: gws\n\nContent-Length: 219\n\nX-XSS-Protection: 0\n\nX-Frame-Options: SAMEORIGIN\n\nHTTP/1.1 200 OK\n\nContent-Type: text/html; charset=ISO-8859-1\n\nP3P: CP=\"This is not a P3P policy! See g.co/p3phelp for more info.\"\n\nDate: Tue, 09 Mar 2021 20:39:09 GMT\n\nServer: gws\n\nX-XSS-Protection: 0\n\nX-Frame-Options: SAMEORIGIN\n\nTransfer-Encoding: chunked\n\nExpires: Tue, 09 Mar 2021 20:39:09 GMT\n\nCache-Control: private\n\nSet-Cookie: NID=211=V-jsXV6z9PIpszplstSzABT9mOSk7wyucnPzeCz-TUSfOH9_F-07V6-fJ5t9L2eeS1WI-p2G_1_zKa2Tl6nztNH-ur0xF4yIk7iT5CxCTSDsjAaasn4c6mfp3fyYXMp7q1wA2qgmT_hlYScdeAMFkgXt1KaMFKIYmp0RGvpJ-jc; expires=Wed, 08-Sep-2021 20:39:09 GMT; path=/; domain=.google.com; HttpOnly \n```", "```py\nGAME START\n\n> (GAME 1)\n\nGAME 1 COIN_TOSS GUESS HEAD\n\nGAME 1 COIN_TOSS TOSS\n\nGAME 1 COIN_TOSS RESULT\n\n> (TAILS, INCORRECT)\n\nGAME 1 COIN_TOSS GUESS HEAD\n\nGAME 1 COIN_TOSS TOSS\n\nGAME 1 COIN_TOSS RESULT\n\n> (HEAD, CORRECT)\n\nGAME 1 READ\n\n> (ROUND 2, 1 CORRECT, IN PROCESS)\n\nGAME 1 COIN_TOSS GUESS HEAD\n\nGAME 1 COIN_TOSS TOSS\n\nGAME 1 COIN_TOSS RESULT\n\n> (HEAD, CORRECT)\n\nGAME 1 READ\n\n> (ROUND 3, 2 CORRECT, YOU WIN) \n```", "```py\nGET /books/1\n\nHTTP/1.1 200 OK\n\nContent-Type: application/json\n\n{\"name\": \"Frankenstein\", \"author\": \"Mary Shelley\", \"cover\": \"http://library.lbr/books/1/cover\"} \n```", "```py\nPUT /books/1\n\nContent-Type: application/json\n\n{\"name\": \"Frankenstein or The Modern Prometheus\", \"author\": \"Mary Shelley\"}\n\nHTTP/1.1 200 OK\n\nContent-Type: application/json\n\n{\"name\": \"Frankenstein or The Modern Prometheus\", \"author\": \"Mary Shelley\", \"cover\": \"http://library.com/books/1/cover\"} \n```", "```py\nGET /books/1/cover\n\nHTTP/1.1 200 OK\n\nContent-Type: image/png\n\n... \n```", "```py\n{\n\n    \"message\": \"Field 'address' is unknown\"\n\n} \n```", "```py\npen = Pen()\n\npen.open()\n\npen.write(\"Something\")\n\npen.close() \n```", "```py\n# Create a new pen with id 1\n\nPOST /pens\n\n# Create a new open pen for pen 1\n\nPOST /pens/1/open\n\n# Update the new open text for the open pen 1\n\nPUT /pens/1/open/1/text\n\n# Delete the open pen, closing the pen\n\nDELETE /pens/1/open/1 \n```", "```py\n# Return every pen in the system\n\nGET /pens/search\n\n# Return only red pens\n\nGET /pens/search?color=red\n\n# Return only red pens, sorted by creation date\n\nGET /pens/search?color=red&sort=creation_date \n```", "```py\n# Return only first 10 elements\n\nGET /pens/search?page=1&size=10 \n```", "```py\n{\n\n    \"next\": \"http://pens.pns/pens/search?page=2&size=10\",\n\n    \"previous\": null,\n\n    \"result\": [\n\n        # elements\n\n    ]\n\n} \n```", "```py\n# Obtain first page\n\nGET /pens/search?page=1&size=10&sort=name\n\n# Create a new resource that is added to the first page\n\nPOST /pens\n\n# Obtain second page\n\nGET /pens/search?page=2&size=10&sort=name \n```", "```py\nGET    /pens\n\nPOST   /pens\n\nPOST   /pens/<pen_id>/open\n\nPUT    /pens/<pen_id>/open/<open_pen_id>/text\n\nDELETE /pens/<pen_id>/open/<open_pen_id>\n\nGET    /pens/search \n```", "```py\nGET    /pens\n\nPOST   /pens\n\nGET    /pens/<pen_id> \n\nDELETE /pens/<pen_id> ←\n\nPOST   /pens/<pen_id>/open\n\nGET    /pens/<pen_id>/open/<open_pen_id> ←\n\nPUT    /pens/<pen_id>/open/<open_pen_id> ←\n\nDELETE /pens/<pen_id>/open/<open_pen_id>\n\nGET    /pens/search \n```", "```py\n    {\n\n        \"name\": <pen name>,\n\n        \"color\": (black|blue|red)\n\n    } \n    ```", "```py\n    400 Bad Request \n    ```", "```py\n    {\n\n        \"name\": <pen name>,\n\n        \"color\": (black|blue|red)\n\n        } \n    ```", "```py\n    404 Not Found \n\n    The pen ID is not found. \n    ```", "```py\nopenapi: 3.0.0\n\ninfo:\n\n  version: \"1.0.0\"\n\n  title: \"Swagger Pens\"\n\npaths:\n\n  /pens:\n\n    post:\n\n      tags:\n\n      - \"pens\"\n\n      summary: \"Add a new pen\"\n\n      requestBody:\n\n        description: \"Pen object that needs to be added to the store\"\n\n        required: true\n\n        content:\n\n          application/json:\n\n            schema:\n\n              $ref: \"#/components/schemas/Pen\"\n\n      responses:\n\n        \"201\":\n\n          description: \"Created\"\n\n        \"400\":\n\n          description: \"Invalid input\"\n\n  /pens/{pen_id}:\n\n    get:\n\n      tags:\n\n      - \"pens\"\n\n      summary: \"Retrieve an existing pen\"\n\n      parameters:\n\n      - name: \"pen_id\"\n\n        in: path\n\n        description: \"Pen ID\"\n\n        required: true\n\n        schema:\n\n          type: integer\n\n          format: int64\n\n      responses:\n\n        \"200\":\n\n          description: \"OK\"\n\n          content:\n\n            application/json:\n\n              schema:\n\n                $ref: \"#/components/schemas/Pen\"\n\n        \"404\":\n\n          description: \"Not Found\"\n\ncomponents:\n\n  schemas:\n\n    Pen:\n\n      type: \"object\"\n\n      properties:\n\n        name:\n\n          type: \"string\"\n\n        color:\n\n          type: \"string\"\n\n          enum:\n\n            - black\n\n            - blue\n\n            - red \n```", "```py\nGET https://myservice.com/login\n\n    Return a page with a form to initiate the login with authorizer.com\n\nFollow the flow in the external authorize until login, with something like.\n\nPOST https://authorizer.com/authorize\n\n  grant_type=authorization_code\n\n  redirect_uri=https://myservice.com/redirect\n\n  user=myuser\n\n  password=mypassword\n\n    Return 302 Found to https://myservice.com/redirect?code=XXXXX\n\nGET https://myservice.com/redirect?code=XXXXX\n\n-> Login into the system and set proper cookie, \n\n   return 302 to https://myservice.com \n```", "```py\nPOST /token HTTP/1.1\n\n  grant_type=authorization_code\n\n  &client_id=XXXX\n\n  &client_secret=YYYY\n\n    Returns a JSON body with\n\n    {\n\n  \"access_token\":\"ZZZZ\",\n\n  \"token_type\":\"bearer\",\n\n  \"expires_in\":86400,\n\n}\n\nMake new requests setting the header\n\nAuthorization: \"Bearer ZZZZ\" \n```", "```py\n$ pip install PyJWT \n```", "```py\n>>> import jwt\n\n>>> token = jwt.encode({\"user_id\": \"1234\"}, \"secret\", algorithm=\"HS256\")\n\n>>> token\n\n'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiMTIzNCJ9.vFn0prsLvRu00Kgy6M8s6S2Ddnuvz-FgtQ7nWz6NoC0' \n```", "```py\n>>> jwt.decode(token,\"secret\", algorithms=['HS256'])\n\n{'user_id': '1234'}\n\n>>> jwt.decode(token,\"badsecret\", algorithms=['HS256'])\n\nTraceback (most recent call last):\n\n …\n\n  jwt.exceptions.InvalidSignatureError: Signature verification failed \n```", "```py\nPOST   /api/token\n\nDELETE /api/token\n\nGET    /api/user/<username>\n\nGET    /api/user/<username>/collection\n\nPOST   /api/user/<username>/collection\n\nGET    /api/user/<username>/collection/<micropost_id>\n\nPUT    /api/user/<username>/collection/<micropost_id>\n\nPATCH  /api/user/<username>/collection/<micropost_id>\n\nDELETE /api/user/<username>/collection/<micropost_id>\n\nGET    /api/user/<username>/timeline\n\nGET    /api/user/<username>/following\n\nPOST   /api/user/<username>/following\n\nDELETE /api/user/<username>/following/<username>\n\nGET    /api/user/<username>/followers\n\nGET    /api/search \n```", "```py\n    {  \n\n     \"grant_type\": \"authorization_code\"\n\n        \"client_id\": <client id>,\n\n        \"client_secret\": <client secret>\n\n    } \n    ```", "```py\n    {\n\n      \"access_token\": <access token>,\n\n      \"token_type\":\"bearer\",\n\n      \"expires_in\":86400,\n\n    } \n    ```", "```py\n    400 Bad Request Incorrect body.\n\n    400 Bad Request Bad credentials. \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being properly authenticated. \n    ```", "```py\n    size Page size.\n\n    page Page number. \n    ```", "```py\n    {\n\n        \"username\": <username>,\n\n        \"collection\": /users/<username>/collection,\n\n    } \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    404 Not Found Username does not exist. \n    ```", "```py\n    {\n\n        \"next\": <next page or null>,\n\n        \"previous\": <previous page or null>,\n\n        \"result\": [\n\n            {\n\n                \"id\": <micropost id>,\n\n                \"href\": <micropost url>,\n\n                \"user\": <user url>,\n\n                \"text\": <Micropost text>,\n\n                \"timestamp\": <timestamp for micropost in ISO 8601>\n\n            },\n\n            ...\n\n        ]\n\n    } \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    404 Not Found Username does not exist. \n    ```", "```py\n    {\n\n        \"text\": <Micropost text>,\n\n        \"referenced\": <optional username of referenced user>\n\n    } \n    ```", "```py\n    400 Bad Request Incorrect body.\n\n    400 Bad Request Invalid text (for example, more than 255 characters).\n\n    400 Bad Request Referenced user not found.\n\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    403 Forbidden Trying to create a micropost of a different user to the one logged in. \n    ```", "```py\n     {\n\n                \"id\": <micropost id>,\n\n                \"href\": <micropost url>,\n\n                \"user\": <user url>,\n\n                \"text\": <Micropost text>,\n\n                \"timestamp\": <timestamp for micropost in ISO 8601>,\n\n          \"referenced\": <optional username of referenced user>\n\n            } \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    404 Not Found Username does not exist.\n\n    404 Not Found Micropost ID does not exist. \n    ```", "```py\n     {\n\n                \"text\": <Micropost text>,\n\n          \"referenced\": <optional username of referenced user>\n\n            } \n    ```", "```py\n    400 Bad Request Incorrect body.\n\n    400 Bad Request Invalid text (for example, more than 255 characters).\n\n    400 Bad Request Referenced user not found.\n\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    403 Forbidden Trying to update a micropost of a different user to the one logged in.\n\n    404 Not Found Username does not exist.\n\n    404 Not Found Micropost ID does not exist. \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    403 Forbidden Trying to delete a micropost of a different user to the one logged in.\n\n    404 Not Found Username does not exist.\n\n    404 Not Found Micropost ID does not exist. \n    ```", "```py\n    {\n\n        \"next\": <next page or null>,\n\n        \"previous\": <previous page or null>,\n\n        \"result\": [\n\n            {\n\n                \"id\": <micropost id>,\n\n                \"href\": <micropost url>,\n\n                \"user\": <user url>,\n\n                \"text\": <Micropost text>,\n\n                \"timestamp\": <timestamp for micropost in ISO 8601>,\n\n                \"referenced\": <optional username of referenced user>\n\n            },\n\n            ...\n\n        ]\n\n    } \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    404 Not Found Username does not exist. \n    ```", "```py\n    {\n\n        \"next\": <next page or null>,\n\n        \"previous\": <previous page or null>,\n\n        \"result\": [\n\n            {\n\n                \"username\": <username>,\n\n                \"collection\": /users/<username>/collection,\n\n            },\n\n            ...\n\n        ]\n\n    } \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    404 Not Found Username does not exist. \n    ```", "```py\n    {    \n\n        \"username\": <username>\n\n    } \n    ```", "```py\n    400 Bad Request The username to follow is incorrect or does not exist.\n\n    400 Bad Request Bad body.\n\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    404 Not Found Username does not exist. \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    403 Forbidden Trying to stop following a user who is not the authenticated one.\n\n    404 Not Found Username to stop following does not exist. \n    ```", "```py\n    {\n\n        \"next\": <next page or null>,\n\n        \"previous\": <previous page or null>,\n\n        \"result\": [\n\n            {\n\n                \"username\": <username>,\n\n                \"collection\": /users/<username>/collection,\n\n            },\n\n            ...\n\n        ]\n\n    } \n    ```", "```py\n    401 Unauthorized Trying to access this URI without being authenticated.\n\n    404 Not Found Username does not exist. \n    ```", "```py\n    username: Optional username to search. Partial matches will be returned.\n\n    text: Mandatory text to search, with a minimum of three characters. Partial matches will be returned. \n    ```", "```py\n    {\n\n        \"next\": <next page or null>,\n\n        \"previous\": <previous page or null>,\n\n        \"result\": [\n\n            {\n\n                \"id\": <micropost id>,\n\n                \"href\": <micropost url>,\n\n                \"user\": <user url>,\n\n                \"text\": <Micropost text>,\n\n                \"timestamp\": <timestamp for micropost in ISO 8601>,\n\n                \"referenced\": <optional username of referenced user>\n\n            },\n\n        ]\n\n    } \n    ```", "```py\n    400 Bad Request No mandatory query parameters.\n\n    400 Bad Request Incorrect value in query parameters.\n\n    401 Unauthorized Trying to access this URI without being authenticated. \n    ```"]