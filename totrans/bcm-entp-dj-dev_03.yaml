- en: '*Chapter 2*: Project Configuration'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第二章*: 项目配置'
- en: Source code is considered the meat and bones, or the framing of a home, in any
    software. In this chapter, we will build a project that contains the files where
    the source code lives. We will discuss several tools that will come in handy when
    developers are working directly with their source code. When working with Django,
    while any tool can be used to edit the source code, some tools are more productive
    than others. In this chapter, we will explore some of the countless tools that
    exist and discuss why an **Integrated Development Environment** (**IDE**) might
    also be used.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 源代码在任何软件中都被认为是肉和骨头，或者说是房屋的框架。在本章中，我们将构建一个包含源代码所在文件的工程。我们将讨论一些在开发者直接与源代码工作时会派上用场的工具。当使用
    Django 时，虽然任何工具都可以用来编辑源代码，但有些工具比其他工具更高效。在本章中，我们将探索一些无数的现有工具，并讨论为什么**集成开发环境**（**IDE**）也可能被使用。
- en: We'll also learn about the importance of working with the Django `settings.py`
    file(s) of a project. Of course, software also requires a database to store and
    retrieve data entered and created by its users, and we will install a local and
    remote database for each environment of a project. We will go over the various
    database types that are available and then focus on the most popular type to use
    for the examples throughout this book. It is not required to use the same database
    type that we will be using, but you might encounter slight variations if you use
    a different one; proceed with caution. Reading this chapter is crucial before
    going through the rest of the book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将了解与项目中的 Django `settings.py` 文件（夹）一起工作的意义。当然，软件还需要一个数据库来存储和检索用户输入和创建的数据，我们将为项目的每个环境安装本地和远程数据库。我们将介绍可用的各种数据库类型，然后专注于本书中示例所使用的最流行的类型。不需要使用我们将要使用的相同数据库类型，但如果您使用不同的类型，可能会遇到一些细微的差异；请谨慎行事。在阅读本书的其余部分之前，阅读本章至关重要。
- en: 'In this chapter, we will cover how to do the following:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下内容：
- en: Choosing developmental tools
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 选择开发工具
- en: Starting a project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 启动项目
- en: Creating a virtual environment
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建虚拟环境
- en: Project configuration
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 项目配置
- en: Using basic database settings
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用基本数据库设置
- en: Preparing PostgreSQL for Heroku
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Heroku 准备 PostgreSQL
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'To work with the code in this chapter, the following tools will need to be
    installed on your local machine:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 要在本章中处理代码，以下工具需要在您的本地机器上安装：
- en: Python version 3.9 – used as the underlying programming language for the project
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 版本 3.9 – 作为项目的底层编程语言
- en: Django version 4.0 – used as the backend framework of the project
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Django 版本 4.0 – 作为项目的后端框架
- en: pip package manager – used to manage third-party Python/Django packages
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: pip 软件包管理器 – 用于管理第三方 Python/Django 软件包
- en: Next, you will need a way to edit the code that we will be writing in this chapter
    and throughout the rest of this book. The first section of this chapter will provide
    you with several development tool choices from text editors to IDEs. The same
    IDE will be used to demonstrate a few actions but it is not necessary to use the
    same tool. You are welcome to use any IDE you like or use no IDE at all, using
    the terminal or command-line window instead. A database will also be required,
    and the third section of this chapter will provide several options to choose from.
    Any database type will work with your project and configuration examples will
    be provided, but only PostgreSQL will be used to work with our project and Heroku.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，您需要一种方法来编辑本章以及本书其余部分中将要编写的代码。本章的第一部分将向您提供从文本编辑器到 IDE 的几个开发工具选择。相同的 IDE 将用于演示一些操作，但并不需要使用相同的工具。您可以使用您喜欢的任何
    IDE，或者根本不使用 IDE，而是使用终端或命令行窗口。还需要一个数据库，本章的第三部分将提供几个选项供您选择。任何数据库类型都可以与您的项目一起工作，并将提供配置示例，但我们将仅使用
    PostgreSQL 来与我们的项目和 Heroku 一起工作。
- en: 'This book will focus on the concepts of Django and enterprise development,
    instead of guiding you through how to use Git operations. For a crash course on
    how to use Git operations, you can watch the video found here: [https://www.packtpub.com/product/git-and-github-the-complete-git-and-github-course-video/9781800204003](https://www.packtpub.com/product/git-and-github-the-complete-git-and-github-course-video/9781800204003).'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本书将专注于Django和企业开发的概念，而不是指导您如何使用Git操作。如果您想快速学习如何使用Git操作，可以观看以下视频：[https://www.packtpub.com/product/git-and-github-the-complete-git-and-github-course-video/9781800204003](https://www.packtpub.com/product/git-and-github-the-complete-git-and-github-course-video/9781800204003)。
- en: 'All of the code created in this chapter can be found in the GitHub repository
    for this book: [https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer](https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer).
    The code used throughout this chapter will relate to every file in the core of
    the project. In every chapter, starting from [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, code related to a particular chapter will
    reside in its own Django app folder. Refer to the subsection of this chapter titled
    *Creating a Django app* to learn more about what that means.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中创建的所有代码都可以在本书的GitHub仓库中找到：[https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer](https://github.com/PacktPublishing/Becoming-an-Enterprise-Django-Developer)。本章中使用的代码将与项目的核心中的每个文件相关。从[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)“模型、关系和继承”开始，每一章的代码都将位于其自己的Django应用文件夹中。请参阅本章标题为“创建Django应用”的小节，以了解更多相关信息。
- en: 'Check out the following video to see the *Code in Action*: [https://bit.ly/3NqNuFG](https://bit.ly/3NqNuFG)'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 查看以下视频以查看*代码的实际应用*：[https://bit.ly/3NqNuFG](https://bit.ly/3NqNuFG)
- en: Choosing development tools
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择开发工具
- en: Configuring our project refers to how we will structure and arrange the files
    that make up an application. This also refers to how we share those files within
    a collaborative team. Some tools create files that can be shared among your team
    members, such as preconfigured settings related to development and debugging features.
    These files are sometimes referred to as configuration or solution files. This
    means you can preconfigure a set of development tools to help get your team up
    to speed quickly. Making sure that all members use similar tools makes debugging
    and looking at code that is not written by you much easier. This consistency also
    makes verbal and written communication among members of your team more efficient
    when synchronizing workflows.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 配置我们的项目指的是我们将如何构建和安排构成应用程序的文件。这也指的是我们如何在协作团队中共享这些文件。一些工具可以创建可以在团队成员之间共享的文件，例如与开发和调试功能相关的预配置设置。这些文件有时被称为配置或解决方案文件。这意味着您可以预先配置一组开发工具，以帮助团队快速上手。确保所有成员使用类似工具可以使调试和查看非自己编写的代码变得容易得多。这种一致性也使得团队成员在同步工作流程时的口头和书面沟通更加高效。
- en: While there are benefits to sharing project configuration files, it is also
    not necessary for everyone on your team to be using the same tools. In fact, it's
    even possible to create many different configuration files for a variety of development
    tools all included in the same repository, giving your developers a multitude
    of preconfigured project files to choose from. Even if we provide configuration
    files in a repository, a developer can still use a basic text editor with the
    terminal or command-line window to make edits and run the project locally. Let's
    compare several of these text editor tools and discuss some of the benefits that
    they provide. Then, we will discuss what IDEs are and how they differ from text
    editors.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然共享项目配置文件有其好处，但并不是团队中的每个人都必须使用相同的工具。实际上，甚至可以在同一个仓库中创建多种不同配置文件，以适应各种开发工具，为开发者提供多种预配置的项目文件供选择。即使我们在仓库中提供了配置文件，开发者仍然可以使用基本的文本编辑器，通过终端或命令行窗口进行编辑并本地运行项目。让我们比较几种这些文本编辑器工具，并讨论它们提供的某些好处。然后，我们将讨论IDE是什么以及它们与文本编辑器的区别。
- en: Text editors
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文本编辑器
- en: A **text editor** is quite simply exactly what it sounds like, a means to edit
    text, or in our case, source code. Text editors are sometimes referred to as lightweight
    IDEs, given the number of features that some of these popular editors come packed
    with.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**文本编辑器**非常简单，正如其名称所示，是一种编辑文本的方式，或者在我们的情况下，是源代码。由于一些流行编辑器包含了许多功能，因此有时将这些编辑器称为轻量级IDE。'
- en: 'Likely, what are considered the three most popular text editors today are the
    following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 很可能，今天被认为最流行的三个文本编辑器如下：
- en: '**Atom**'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Atom**'
- en: '**Notepad++**'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Notepad++**'
- en: '**Sublime Text**'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Sublime Text**'
- en: Atom
  id: totrans-28
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Atom
- en: Atom is intended to be a fully editable and customizable text editor. The tool's
    official website uses the term *hackable* when describing their software. This
    editor allows you to install packages that help enhance your code-writing abilities.
    It has smart code auto-completion and code styling to let you type less and see
    more. This tool has a built-in file browser that allows you to find and replace
    code in the folders and files that you choose to search through. Atom also works
    on all three major operating systems, Windows, Mac, and Linux. It is free to use
    and also open source, allowing you to modify the editor's source code itself.
    To download Atom and start using it today, visit [https://atom.io/](https://atom.io/).
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Atom旨在成为一个完全可编辑和可定制的文本编辑器。该工具的官方网站在描述他们的软件时使用了“可黑客化”这个术语。此编辑器允许您安装帮助增强您代码编写能力的包。它具有智能代码自动完成和代码样式，让您输入更少，看到更多。此工具具有内置的文件浏览器，允许您在您选择的文件夹和文件中查找和替换代码。Atom也适用于所有三个主要操作系统，Windows、Mac和Linux。它是免费使用的，也是开源的，允许您修改编辑器的源代码。要下载Atom并开始使用它，请访问[https://atom.io/](https://atom.io/)。
- en: Notepad++
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Notepad++
- en: Notepad++ is another free and open source editor that comes with a stylish code
    syntax highlighter and provides code auto-completion suggestions. It was built
    to work with and run a vast number of different programming languages. It even
    lets you write macros and run custom scripts directly from the editor. Like Atom,
    it also has the capability of installing plugins. It's really lightweight and
    can be a nice editor to set as the default for your operating system. To download
    Notepad++, visit [https://notepad-plus-plus.org/downloads/](https://notepad-plus-plus.org/downloads/).
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: Notepad++是另一个免费的开源编辑器，它配备了时尚的代码语法高亮显示器，并提供代码自动完成建议。它是为了与运行大量不同的编程语言而构建的。它甚至允许您直接从编辑器编写宏和运行自定义脚本。像Atom一样，它也有安装插件的能力。它非常轻量级，可以设置为操作系统的默认编辑器。要下载Notepad++，请访问[https://notepad-plus-plus.org/downloads/](https://notepad-plus-plus.org/downloads/)。
- en: Sublime Text
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Sublime Text
- en: Sublime Text is another popular choice. This editor allows you to create project
    files and includes features to build a wide variety of programming languages.
    One cool feature is how it will use your `<script type="text/javascript"></script>`
    that lives inside of a `.html` document to be styled and displayed differently
    from the HTML found in that same file.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime Text是另一个受欢迎的选择。此编辑器允许您创建项目文件，并包括构建各种编程语言的功能。一个酷炫的功能是它将使用您在`.html`文档内部存在的`<script
    type="text/javascript"></script>`来以不同的方式样式化和显示，与该文件中找到的HTML不同。
- en: Another application in the Sublime family is called Sublime Merge, which is
    a simple way to merge code and perform Git operations. My favorite feature is
    using it to view history states and commit logs. Sublime Text is free to evaluate
    for a certain amount of time but eventually, it will prompt you to purchase a
    license after the trial period is over. To get started with Sublime Text, visit
    [https://www.sublimetext.com/](https://www.sublimetext.com/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Sublime家族中的另一个应用称为Sublime Merge，它是一种简单的方式来合并代码并执行Git操作。我最喜欢的功能是使用它来查看历史状态和提交日志。Sublime
    Text可以免费评估一段时间，但最终，在试用期满后，它会提示您购买许可证。要开始使用Sublime Text，请访问[https://www.sublimetext.com/](https://www.sublimetext.com/)。
- en: There are dozens, if not hundreds, of other text editors to choose from that
    were not mentioned in this chapter. Don't limit yourself to only the popular choices
    provided and feel free to explore many other tools. The number of features and
    capabilities that some text editors provide can sometimes be referred to as a
    lightweight IDE; let's discuss what an IDE is next.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 如果不是几十个，也有可能是数百个其他文本编辑器可以选择，但本章没有提及。不要将自己限制在提供的流行选择中，并自由探索许多其他工具。一些文本编辑器提供的功能和能力有时可以被称为轻量级IDE；接下来让我们讨论一下什么是IDE。
- en: Integrated development environments
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成开发环境
- en: An IDE is what we call software that combines many different programming tools
    into one single desktop application that a developer can use to build other applications.
    It is a development tool that your team can use and benefit from to stay productive.
    IDEs primarily consist of a way to view and edit source code, automate local build
    processes, and provide ways to help you debug and analyze your code. The tool
    contains ways to style and format code, show you errors as you type, and provide
    code completion suggestions to reduce keystrokes as you work. These environments
    also provide ways to search other code files contained in your project and push
    or deploy your code to external repositories. For example, the Sourcetree app
    that was mentioned in [*Chapter 1*](B17243_01_ePub.xhtml#_idTextAnchor015), *Undertaking
    a Colossal Project*, would no longer be needed if you are using an IDE that has
    Git features built into it.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: IDE是我们所说的将许多不同的编程工具组合成一个单一的桌面应用程序的软件，开发者可以使用它来构建其他应用程序。它是你的团队可以使用并从中受益以保持生产力的开发工具。IDE主要包含一种查看和编辑源代码的方式，自动化本地构建过程，并提供帮助你调试和分析代码的方式。该工具包含样式化和格式化代码的方式，在你键入时显示错误，并提供代码完成建议以减少你工作时的按键次数。这些环境还提供了搜索项目中包含的其他代码文件的方式，以及将你的代码推送到外部仓库的方式。例如，如果使用具有内置Git功能的IDE，那么在[*第1章*](B17243_01_ePub.xhtml#_idTextAnchor015)中提到的Sourcetree应用程序将不再需要。
- en: The same applies to a text editor choice that also has Git features included.
    Similar to some of the text editors with fancy features, IDEs will create common
    configuration files that can be shared with your team. Some of these files we
    don't want to share, such as files that store breakpoints and other local debugging
    settings specific to that developer and local instance only. However, sharing
    configuration settings with your team allows members to get their IDEs up and
    running on their machines much easier and quicker, with all of the tools ready
    or almost ready to use.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 同样适用于具有Git功能的文本编辑器选择。类似于一些具有花哨功能的文本编辑器，IDE将创建可以与你的团队共享的常见配置文件。其中一些文件我们不想共享，例如存储断点和其他仅针对该开发者和本地实例的特定本地调试设置的文件。然而，与你的团队共享配置设置可以让成员们更容易、更快地将他们的IDE设置在他们的机器上，所有工具都准备好了或几乎准备好了可以使用。
- en: A simple text editor is really all you need. A project could start out this
    way and then your team could introduce the use of an IDE later on. Sometimes,
    when using an IDE, you can structure your project files in subdirectories that
    would otherwise not exist. If you already know your team will need the productivity
    tools from the get-go, you can start out with an IDE and create a project through
    the IDE itself, letting the IDE structure your files in a way that is natural
    to that IDE. It's sometimes easier this way because some IDEs may configure your
    file structures slightly differently than what would otherwise be created by using
    just the Django `startproject` command from a terminal or command-line window.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的文本编辑器就足够了。一个项目可以从这种方式开始，然后你的团队可以在之后引入IDE的使用。有时，在使用IDE时，你可以在子目录中组织你的项目文件，这些目录在其他情况下可能不存在。如果你已经知道你的团队从一开始就需要这些生产力工具，你可以从IDE开始，并通过IDE本身创建项目，让IDE以对IDE自然的方式组织你的文件。这种方式有时更容易，因为一些IDE可能配置的文件结构可能与你仅使用终端或命令行窗口中的Django
    `startproject`命令创建的结构略有不同。
- en: Let's discuss some of the popular IDE choices that developers use with Django
    today and then settle upon one of these choices to demonstrate the concept of
    using an IDE. This chapter will demonstrate working with Django management commands
    both in the IDE and the terminal to showcase the benefits of using one versus
    the other. For every action demonstrated using the IDE in this chapter, the command-line-driven
    command equivalent of that action will also be provided. This will also allow
    you to bypass the IDE altogether if you wish to do so. Moving forward, all future
    chapters will only provide the standard command-line-driven Django management
    commands and continuing to use the IDE will be optional.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一下开发者今天与Django一起使用的流行IDE选择，然后从中选择一个来展示使用IDE的概念。本章将展示在IDE和终端中与Django管理命令一起工作的方法，以展示使用一个与另一个相比的优势。在本章中，使用IDE演示的每个操作，都将提供该操作的命令行驱动的命令等效。这将还允许你在需要时完全绕过IDE。从现在开始，所有未来的章节都只提供标准的命令行驱动的Django管理命令，继续使用IDE将是可选的。
- en: PyDev with Eclipse
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyDev with Eclipse
- en: '**PyDev** is actually a plugin for the **Eclipse IDE** but it can also be used
    as a standalone IDE. PyDev can be downloaded and installed directly by itself
    because it will come preinstalled with **LiClipse**, a lightweight version of
    the Eclipse IDE. The Eclipse IDE is a fully integrated development experience.
    It allows the debugging of code in a variety of ways. Profiling is just one of
    those ways, which is a tool that helps the developer understand the timing of
    events, memory usage, disk usage, or any other diagnostics. The term CPU Profiler
    is often used to discuss tools that can help you find out what specific process
    is bogging down your system. It will tell you things such as how long it was hanging
    for and give you an idea as to how to fix it. All of the bells and whistles that
    come with all of the text editors I mentioned previously also come with Eclipse.
    PyDev has a vast library of packages to choose from for many different languages
    that exist today. Eclipse and PyDev both work on all standard operating systems
    today, such as Windows, Mac, and Linux. To download Eclipse, visit [https://www.eclipseclp.org/download.html](https://www.eclipseclp.org/download.html).'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyDev** 实际上是一个针对 **Eclipse IDE** 的插件，但它也可以作为一个独立的 IDE 使用。PyDev 可以直接下载并安装，因为它会预装
    **LiClipse**，这是 Eclipse IDE 的轻量级版本。Eclipse IDE 提供了一个完全集成的开发体验。它允许以多种方式调试代码。性能分析只是其中之一，这是一种帮助开发者理解事件时间、内存使用、磁盘使用或其他诊断的工具。CPU
    性能分析器这个术语常用于讨论可以帮助你找出哪个特定进程拖累了系统的工具。它会告诉你它挂起的时间有多长，并给你一些关于如何修复它的想法。所有之前提到的文本编辑器都附带在
    Eclipse 中。PyDev 拥有大量的库，可供选择用于今天存在的许多不同语言。Eclipse 和 PyDev 都支持所有主流操作系统，如 Windows、Mac
    和 Linux。要下载 Eclipse，请访问 [https://www.eclipseclp.org/download.html](https://www.eclipseclp.org/download.html)。'
- en: Eclipse and PyDev are both free to use and are both open source licenses, allowing
    you to modify the IDE software itself. The Eclipse IDE is a bit more difficult
    to install than other desktop applications today. Its installers require a good
    deal of reading before you know how to get started with installing it. Eclipse
    also requires **Java** to be installed and running on your machine. Java is a
    high-level programming language and a computing platform that is usually not required
    to work with Django and Python unless you are working with Eclipse. For this reason,
    we will not be using this IDE in this chapter. To download PyDev, visit [https://www.pydev.org/download.html](https://www.pydev.org/download.html).
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: Eclipse 和 PyDev 都是免费使用的，并且都是开源许可，允许你修改 IDE 软件。与今天的其他桌面应用程序相比，Eclipse IDE 的安装稍微困难一些。它的安装程序需要你阅读很多内容，才能知道如何开始安装它。Eclipse
    还需要你的机器上安装并运行 **Java**。Java 是一种高级编程语言和计算平台，通常不需要与 Django 和 Python 一起工作，除非你正在使用
    Eclipse。因此，我们不会在本章中使用这个 IDE。要下载 PyDev，请访问 [https://www.pydev.org/download.html](https://www.pydev.org/download.html)。
- en: PyCharm
  id: totrans-44
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PyCharm
- en: '**PyCharm** is likely the most popular choice among Python and Django developers
    today. It is easy to use and much easier to install than PyDev by using a simple
    executable file available for Windows, Mac, or Linux machines. It comes with a
    free community version as well as a paid professional version. The paid version
    offers many more features and provides more specialized scientific and web development
    tools, such as advanced database integration and database development, directly
    from within the IDE, as well as other debugging and profiling tools. The free
    community version is enough for most Django developers to get by on. This version
    allows developers to work with Django project integrations and run virtual environments
    while connecting to remote Git repositories. To download and install PyCharm,
    visit [https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/).'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**PyCharm** 可能是当今 Python 和 Django 开发者中最受欢迎的选择。它易于使用，比 PyDev 更容易安装，因为它提供了适用于
    Windows、Mac 或 Linux 机器的简单可执行文件。它还提供了免费社区版和付费专业版。付费版提供了更多功能，并提供了更多专业的科学和 Web 开发工具，例如直接在
    IDE 中进行高级数据库集成和数据库开发，以及其他调试和性能分析工具。免费社区版对于大多数 Django 开发者来说已经足够了。这个版本允许开发者与 Django
    项目集成，并在连接到远程 Git 仓库的同时运行虚拟环境。要下载和安装 PyCharm，请访问 [https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/)。'
- en: While this is likely the most popular IDE among Django developers, Visual Studio
    is likely the most popular IDE among developers of any language or framework.
    For this reason, we will use Visual Studio to demonstrate the examples throughout
    this chapter.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这可能是 Django 开发者中最受欢迎的 IDE，但 Visual Studio 可能是任何语言或框架开发者中最受欢迎的 IDE。因此，我们将使用
    Visual Studio 在本章中演示示例。
- en: Visual Studio
  id: totrans-47
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Visual Studio
- en: '**Visual Studio** has been a very popular tool of choice among many .NET, C#,
    C++, and other developers for over 20 years now. It''s a very robust IDE that
    comes packed with all of the tools that you can think of and then more. It comes
    in many different varieties and flavors, and for years it was only available for
    a price. Then, around 2013, Microsoft started offering the Visual Studio Community
    Edition for free to the public. A drawback for some was that Visual Studio was
    only available on Windows platforms until the year 2017, when it became available
    on Mac platforms. Currently, Linux is not supported. However, Visual Studio Code,
    a lightweight IDE, is available on all three platforms, Windows, Mac, and Linux.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio** 已经是许多 .NET、C#、C++ 和其他开发者过去20多年来的首选工具。它是一个非常强大的 IDE，内置了您能想到的所有工具，甚至更多。它有多种不同的版本和风味，并且多年来它只以付费形式提供。然后，大约在2013年，微软开始向公众免费提供
    Visual Studio Community Edition。对于一些人来说，缺点是 Visual Studio 直到2017年才在 Mac 平台上可用，在此之前它只适用于
    Windows 平台。目前，Linux 平台不受支持。然而，轻量级的 IDE Visual Studio Code 可在 Windows、Mac 和 Linux
    三种平台上使用。'
- en: '**Visual Studio Code** has likely become the most popular tool of all time
    among any type of developer. Both Visual Studio and Visual Studio Code support
    using Python and Django. Upon installing either of these tools, you will need
    to select related Python/Django packages that will be included in your installation
    or install them separately. For those of you working on a Linux machine, or if
    you just don''t want to use an IDE, refer to the management commands provided
    after the IDE demonstration of each action involved in creating a project. If
    you are on a Windows or Mac system and wish to follow along using an IDE, download
    the **Visual Studio 2019 – Community Edition** installer found here: [https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/).
    Make sure, during your installation, that you select any Python development extensions
    that it offers, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '**Visual Studio Code** 可能已经成为史上最受欢迎的开发者工具。Visual Studio 和 Visual Studio Code
    都支持使用 Python 和 Django。在安装这些工具中的任何一个之后，您需要选择要包含在安装中的相关 Python/Django 软件包，或者单独安装它们。对于在
    Linux 机器上工作或不想使用 IDE 的您，请参考每个创建项目涉及的动作的 IDE 展示之后的管理命令。如果您在 Windows 或 Mac 系统上，并希望使用
    IDE 进行操作，请下载此处提供的 **Visual Studio 2019 – 社区版** 安装程序：[https://visualstudio.microsoft.com/downloads/](https://visualstudio.microsoft.com/downloads/)。在安装过程中，请确保选择它提供的任何
    Python 开发扩展，如下面的截图所示：'
- en: '![Figure 2.1 – Visual Studio – Python development extension'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.1 – Visual Studio – Python开发扩展'
- en: '](img/Figure_2.01_B17243.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.01_B17243.jpg)'
- en: Figure 2.1 – Visual Studio – Python development extension
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.1 – Visual Studio – Python开发扩展
- en: You might find other useful tools under the **Individual components** tab of
    this interface. Include any other tools that you would like to include before
    proceeding with your installation. Now that we have **Visual Studio 2019 – Community
    Edition** installed, let's build a solution file for a project that can be shared
    with other developers in a repository.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在该界面的 **单独组件** 选项卡下找到其他有用的工具。在继续安装之前，包括您想要包含的任何其他工具。现在我们已经安装了 **Visual Studio
    2019 – 社区版**，让我们为可以在仓库中与其他开发者共享的项目构建一个解决方案文件。
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: While Visual Studio 2019 is the latest product available from Microsoft, Visual
    Studio 2022 will be released about the same time this book will be published.
    If you are using the newer version of Visual Studio, you should be able to perform
    all of the same actions as depicted in this chapter. The screenshots of the Visual
    Studio IDE may not appear exactly the same and some code adjustments might also
    be necessary.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然 Visual Studio 2019 是微软提供的最新产品，但 Visual Studio 2022 将在本书出版时大约同期发布。如果您使用的是较新版本的
    Visual Studio，您应该能够执行本章中描述的所有相同操作。Visual Studio IDE 的截图可能不会完全相同，并且可能还需要进行一些代码调整。
- en: Starting a project
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开始一个项目
- en: There are two ways to start a project and this chapter will allow you to choose
    which method you want to follow. We encourage you to use the IDE as becoming proficient
    with using this tool in your team will be beneficial in the long run. However,
    if your team is using an IDE other than Visual Studio or you are only using a
    text editor to work with your code, the command-line equivalent of performing
    each step is also provided to allow anyone to work through this chapter. All other
    chapters in this book will focus on code only, which can be used with or without
    an IDE.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种启动项目的方式，本章将允许你选择想要遵循的方法。我们鼓励你使用IDE，因为熟练使用这个工具对你的团队来说在长远来看是有益的。然而，如果你的团队使用的是除Visual
    Studio之外的IDE，或者你只使用文本编辑器与代码一起工作，每个步骤的命令行等效操作也提供给了任何人，以便他们可以完成本章。本书中的其他所有章节都将仅关注代码，这些代码可以与或无需IDE一起使用。
- en: Using the IDE
  id: totrans-58
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用IDE
- en: 'Open the Visual Studio IDE and select `django` keyword and in the list of results,
    select **Blank Django Web Project**, as depicted here:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 打开Visual Studio IDE，选择`django`关键词，并在结果列表中选择**空白Django Web项目**，如图所示：
- en: '![Figure 2.2 – Visual Studio – Create a new project'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.2 – Visual Studio – Create a new project'
- en: '](img/Figure_2.02_B17243.jpg)'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.02_B17243.jpg]'
- en: Figure 2.2 – Visual Studio – Create a new project
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2.2 – Visual Studio – Create a new project
- en: 'On the next screen, enter `becoming_a_django_entdev` for `manage.py` file,
    known as the root of a project. It will make using things such as the terminal
    that is provided within the IDE just a little easier:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一屏中，输入`becoming_a_django_entdev`作为`manage.py`文件，这是项目的根目录。这将使使用IDE内提供的终端等工具变得稍微容易一些：
- en: '![Figure 2.3 – Visual Studio – Creating a Django project'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 2.3 – Visual Studio – Creating a Django project'
- en: '](img/Figure_2.03_B17243.jpg)'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_2.03_B17243.jpg]'
- en: Figure 2.3 – Visual Studio – Creating a Django project
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 2.3 – Visual Studio – Creating a Django project
- en: Note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: When using the Visual Studio IDE to create a project, the files found in the
    `/becoming_a_django_entdev/becoming_a_django_entdev/` folder, such as the `settings.py`
    and `urls.py` files, are automatically generated using Django 2.1.2\. These files
    will still work when used with later versions of Django. Additionally, when we
    get to the *Creating a virtual environment* section of this chapter, we will actually
    be installing the Django 4.0 package, which is the version used throughout this
    book. Even though version 2.1.2 was used to initially create some of the project
    files, the project will always use version 4.0 and run successfully. When using
    the terminal or command-line window to create a project, this scenario will not
    occur. Later, in [*Chapter 9*](B17243_09_ePub.xhtml#_idTextAnchor272), *Django
    Testing*, you will learn how to verify what version is actually installed and
    being used.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用Visual Studio IDE创建项目时，位于`/becoming_a_django_entdev/becoming_a_django_entdev/`文件夹中的文件，例如`settings.py`和`urls.py`文件，将自动使用Django
    2.1.2版本生成。这些文件在使用Django的后续版本时仍然有效。此外，当我们进入本章的*创建虚拟环境*部分时，我们将实际安装Django 4.0包，这是本书中使用的版本。尽管最初创建一些项目文件时使用了2.1.2版本，但项目将始终使用4.0版本并成功运行。当使用终端或命令行窗口创建项目时，这种情况不会发生。稍后，在[*第9章*](B17243_09_ePub.xhtml#_idTextAnchor272)
    *Django测试*中，你将学习如何验证实际安装和使用的版本。
- en: Using the command line
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行
- en: The Django terminal or command-line window equivalent of starting a Django project
    is the `startproject` command. There are two ways to create a project using this
    command. The first method is to create your project using the version of Django
    that was installed on your machine globally and then build your virtual environment
    next.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: Django终端或命令行窗口启动Django项目的等效命令是`startproject`。使用此命令创建项目有两种方式。第一种方法是使用您机器上全局安装的Django版本创建项目，然后接下来构建您的虚拟环境。
- en: The other way is to create your virtual environment first and then activate
    your environment, install the version of Django that you desire, and then build
    your project using the version of Django that was installed in your virtual environment.
    What the IDE did for us was create a project first using a version of Django that
    the IDE provides, and then when we created the virtual environment, the version
    of Django was updated to the version specified in the `requirements.txt` file.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方式是首先创建虚拟环境，然后激活你的环境，安装你想要的Django版本，然后使用虚拟环境中安装的Django版本构建项目。IDE为我们做的第一件事是使用IDE提供的Django版本创建项目，然后当我们创建虚拟环境时，Django的版本更新到了`requirements.txt`文件中指定的版本。
- en: When a package gets updated in the virtual environment, the old version gets
    uninstalled and the new version gets installed fresh. For this exercise, we will
    uninstall any version of Django that may exist globally, then install the latest
    version available when this book was written. Then, we will create the virtual
    environment using the command line in the next section, following along as close
    as we can to the examples provided using the IDE.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 当虚拟环境中某个包更新时，旧版本会被卸载，新版本会被全新安装。为了这个练习，我们将卸载可能存在的任何版本的Django，然后安装本书编写时最新的版本。然后，我们将在下一节使用命令行创建虚拟环境，尽可能接近使用IDE提供的示例。
- en: 'Follow these steps to create your project files:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建您的项目文件：
- en: 'Open your terminal or command-line window and navigate to your local repository
    folder created in [*Chapter 1*](B17243_01_ePub.xhtml#_idTextAnchor015), *Undertaking
    a Colossal Project*. Make sure you are not in a virtual environment at this time.
    Then, execute the following commands to uninstall any existing versions of Django
    and then install the proper version of Django that we will be using globally on
    your machine:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端或命令行窗口，导航到在[*第1章*](B17243_01_ePub.xhtml#_idTextAnchor015)“承担一个巨大的项目”中创建的本地仓库文件夹。确保您此时不在虚拟环境中。然后，执行以下命令以卸载任何现有的Django版本，然后安装我们将要在机器上全局使用的正确版本的Django：
- en: '[PRE0]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Execute the Django command that will create a project and all of the core files
    necessary to work with Django, based on Django version 4.0\. We will name this
    project the same as in the IDE example: `becoming_a_django_entdev`. The `startproject`
    command creates a `manage.py`, `wsgi.py`, and `asgi.py` file and several other
    boilerplate files that serve as the foundation of all Django projects. The `becoming_a_django_entdev`
    option is the name of the project and the folder that a project will be placed
    in. Execute the following command to create the project:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行基于Django 4.0版本的Django命令，该命令将创建一个项目以及所有必要的核心文件，以便与Django一起工作。我们将把这个项目命名为与IDE示例中相同：`becoming_a_django_entdev`。`startproject`命令创建一个`manage.py`、`wsgi.py`、`asgi.py`文件以及几个其他作为所有Django项目基础的样板文件。`becoming_a_django_entdev`选项是项目的名称和项目将被放置的文件夹名称。执行以下命令以创建项目：
- en: '[PRE1]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The preceding is a friendly command that has been tested and proven to work
    on a Windows machine. Traditionally, developers would use the following command
    to start a project; however, this command does not work on a Windows operating
    system:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的命令是一个经过测试并证明在Windows机器上可以正常工作的友好命令。传统上，开发者会使用以下命令来启动项目；然而，这个命令在Windows操作系统上无法工作：
- en: '[PRE2]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Next, let's create and configure a virtual environment, which is needed to work
    with any third-party packages included in a project.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建和配置一个虚拟环境，这对于使用项目中包含的任何第三方包是必需的。
- en: Creating a virtual environment
  id: totrans-81
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建虚拟环境
- en: 'We should not have a virtual environment for our project at this time. If you
    do have one, go ahead and disregard it and create a new one for this next exercise.
    Whether you created a project using the Visual Studio IDE or by using the Django
    commands from a terminal or command-line window in the previous exercises, the
    file structure in your repository should look like the following tree structure:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 目前我们不应该为我们的项目有一个虚拟环境。如果您已经有了，请继续并忽略它，为这个接下来的练习创建一个新的虚拟环境。无论您是使用Visual Studio
    IDE创建项目，还是在前面的练习中使用终端或命令行窗口中的Django命令，您的仓库中的文件结构应该看起来像以下树结构：
- en: '`├── .git`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── .git`'
- en: '`├── readme.md`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── readme.md`'
- en: '`├── requirements.txt`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── requirements.txt`'
- en: '`├── becoming_a_django_entdev`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── becoming_a_django_entdev`'
- en: '`│ ├── .vs`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── .vs`'
- en: '`│ ├── becoming_a_django_entdev.sln`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── becoming_a_django_entdev.sln`'
- en: '`│ ├── db.sqlite3`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── db.sqlite3`'
- en: '`│ ├── manage.py`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── manage.py`'
- en: '`│ ├── obj`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── obj`'
- en: '`│ ├── requirements.txt`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── requirements.txt`'
- en: '`│ ├── staticfiles`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── staticfiles`'
- en: '`│ └── becoming_a_django_entdev`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── becoming_a_django_entdev`'
- en: '`│ ├── __init__.py`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── __init__.py`'
- en: '`│ ├── asgi.py`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── asgi.py`'
- en: '`│ ├── settings.py`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── settings.py`'
- en: '`│ ├── urls.py`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── urls.py`'
- en: '`│ └── wsgi.py`'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── wsgi.py`'
- en: 'We now have two `requirements.txt` files and two folders called `/becoming_a_django_entdev/becoming_a_django_entdev/`,
    where various files reside. We will leave the folder structure the way it is now
    and configure additional settings later to allow Heroku to work with this folder
    structure. We are doing this because creating a project through the IDE will only
    produce this result, and note that other IDEs or even lightweight IDE text editors
    may create folder structures that even vary from the preceding tree. If you decide
    to use the Django commands to create a new project, you do have the option to
    specify an additional option to prevent creating your project in a subdirectory.
    This would put the `manage.py` file in the same directory as the root of a repository
    and result in only one `requirements.txt` file. Doing that would require using
    the following command example:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们有两个 `requirements.txt` 文件和两个名为 `/becoming_a_django_entdev/becoming_a_django_entdev/`
    的文件夹，其中存放着各种文件。我们将保持文件夹结构不变，稍后配置额外的设置以允许 Heroku 与此文件夹结构协同工作。我们这样做是因为通过 IDE 创建项目只会产生这种结果，请注意，其他
    IDE 或甚至轻量级 IDE 文本编辑器可能创建的文件夹结构可能与前面的树形结构不同。如果您决定使用 Django 命令创建新项目，您确实有选项指定一个额外的选项以防止在子目录中创建项目。这将把
    `manage.py` 文件放在存储库根目录中，并导致只有一个 `requirements.txt` 文件。这样做将需要使用以下命令示例：
- en: '[PRE3]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Here, we add the additional`./` option at the end of the preceding command,
    which states to put the project in the folder that we are located in now. Without
    this option, an additional subfolder would have been created by default, naming
    that folder the same as the name provided for the project name. However, doing
    this would result in no solution file and now no way to run the project through
    the Visual Studio IDE. Since the objective of this chapter is to demonstrate the
    use of an IDE, this is the reason we are keeping the preceding tree structure.
    There are alternative options to doing this, which would lead you down the path
    in Visual Studio of creating a new project using the `requirements.txt` file in
    the root of our repository to work with this configuration.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在前面的命令末尾添加了额外的 `./` 选项，表示将项目放在我们现在所在的文件夹中。如果没有这个选项，默认情况下将创建一个额外的子文件夹，文件夹名称与提供的项目名称相同。然而，这样做将导致没有解决方案文件，现在也没有通过
    Visual Studio IDE 运行项目的方法。由于本章的目标是演示 IDE 的使用，这就是我们保持前面树形结构的原因。还有其他选项可以做到这一点，这将引导您在
    Visual Studio 中使用存储库根目录中的 `requirements.txt` 文件创建新项目以使用此配置。
- en: We will discuss doing that next.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在下一节讨论如何做。
- en: Configuring the requirements.txt file(s)
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 requirements.txt 文件
- en: In the same folder that the `manage.py` file is located in, Visual Studio created
    for us a `requirements.txt` file. In [*Chapter 1*](B17243_01_ePub.xhtml#_idTextAnchor015),
    *Undertaking a Colossal Project*, we already created a blank `requirements.txt`
    file just so that we can satisfy the needs of Heroku during deployment to each
    environment that we created. If the `requirements.txt` file in the root of the
    repository does not exist, Heroku will fail to deploy. Heroku needs that copy
    in order to identify a project as a Python project; that's just how their test
    scripts have been written to work. This is why we now have two `requirements.txt`
    files to work with. The other file, nested one folder down in `/becoming_a_django_entdev/`,
    is needed to enable all of the features and services that the Visual Studio IDE
    offers us. This `requirements.txt` file is where we will write all of our required
    dependencies.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `manage.py` 文件所在的同一文件夹中，Visual Studio 为我们创建了一个 `requirements.txt` 文件。在 [*第
    1 章*](B17243_01_ePub.xhtml#_idTextAnchor015)，*承担一个庞大的项目*，我们已经创建了一个空的 `requirements.txt`
    文件，只是为了满足 Heroku 在部署到我们创建的每个环境时的需求。如果存储库根目录中没有 `requirements.txt` 文件，Heroku 将无法部署。Heroku
    需要这个副本来识别一个项目为 Python 项目；这正是他们的测试脚本编写的方式。这就是我们现在有两个 `requirements.txt` 文件可以工作的原因。另一个文件位于
    `/becoming_a_django_entdev/` 中的一级文件夹内，这是为了启用 Visual Studio IDE 提供的所有功能和服务。这个 `requirements.txt`
    文件是我们将写入所有必需依赖的地方。
- en: 'In the `requirements.txt` file found in the root of your local repository,
    which is the same folder that your `.git` folder is located in, add the following
    code:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在您本地存储库根目录中的 `requirements.txt` 文件中，该文件夹与您的 `.git` 文件夹位于同一位置，添加以下代码：
- en: '[PRE4]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'The preceding code declares the path to the `requirements.txt` file nested
    in what we will call the root of our project from now on, `/becoming_a_django_entdev/`.
    Open the `requirements.txt` file in the root of your project, which is also the
    same folder that the `manage.py` file resides in, and then add the following items:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码声明了 `requirements.txt` 文件的位置，该文件嵌套在我们现在将称之为项目根目录的 `/becoming_a_django_entdev/`
    中。在你的项目根目录中打开 `requirements.txt` 文件，该目录也是 `manage.py` 文件所在的同一文件夹，然后添加以下项：
- en: '[PRE7]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '[PRE10]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Make sure each item is located on its own line. Any packages that are required
    for your project will always be put in this file. You can get even more modular
    and add other imports to these files, for what is called `-r becoming_a_django_entdev/requirements.txt`
    to specify the path of the file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 确保每个项目都位于单独的一行上。你项目所需的任何包都将始终放在这个文件中。你可以更加模块化，将这些文件添加到其他导入中，称为 `-r becoming_a_django_entdev/requirements.txt`
    以指定文件路径。
- en: In the preceding example, the `~=` operator is used and indicates greater than
    or equal to the version number specified. For example, it will provide Django
    in the version 4.0 range, meaning it will go to 4.0.9 if that exists but it will
    not provide 4.1 or higher. It will only provide the highest version of the 4.0.X
    range. The `==` operator would mean to include the package that matches the exact
    version number specified. Not denoting any version at all means it will grab the
    latest version that exists for that package at the time of installation, re-installation,
    or when an upgrade is performed. Anything you would find in the PyPI package library
    can be placed in this file, requiring that it be installed in your virtual environment.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，使用了 `~=` 操作符，表示大于或等于指定的版本号。例如，它将提供 4.0 版本的 Django，这意味着如果存在 4.0.9 版本，它将使用该版本，但不会提供
    4.1 或更高版本。它只会提供 4.0.X 范围的最高版本。`==` 操作符表示包含与指定确切版本号匹配的包。完全不指定版本意味着它将抓取安装、重新安装或升级时存在的该包的最新版本。你可以在
    PyPI 包库中找到的任何内容都可以放在这个文件中，要求它必须安装在你的虚拟环境中。
- en: The `django` package is the most important as it is the basis of the framework
    we are using. The `django-heroku` package is a package created by Heroku that
    includes a series of other packages that Heroku itself depends on. Those Heroku
    dependencies will be automatically installed for you when the parent package is
    installed. The other packages listed previously will be used in the next sections
    to help us configure a project properly for how we will be using Django throughout
    the rest of this book.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`django` 包是最重要的，因为它是我们使用框架的基础。`django-heroku` 包是由 Heroku 创建的包，它包含了一系列 Heroku
    本身依赖的其他包。当父包安装时，这些 Heroku 依赖项将自动为你安装。之前列出的其他包将在下一节中使用，以帮助我们正确配置项目，以便我们在本书的其余部分使用
    Django。'
- en: Now that we have defined a number of packages to install into a virtual environment,
    let's create our virtual environment using the Visual Studio IDE.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经定义了要安装到虚拟环境中的多个包，让我们使用 Visual Studio IDE 创建我们的虚拟环境。
- en: Using the IDE
  id: totrans-127
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 IDE
- en: For those of you who wish to use the command line instead, skip ahead to the
    subsection titled *Using the command line*.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些希望使用命令行的人来说，请跳转到标题为 *使用命令行* 的子节。
- en: 'Within your Visual Studio IDE, navigate to the **Solution Explorer** section
    of your IDE, right-click where it says **Python Environments**, and then select
    **Add Environment**. The window that opens is shown here:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 Visual Studio IDE 中，导航到 IDE 的 **解决方案资源管理器** 部分，右键单击 **Python 环境**，然后选择 **添加环境**。打开的窗口如下所示：
- en: '![Figure 2.4 – Visual Studio – Add environment'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.4 – Visual Studio – 添加环境'
- en: '](img/Figure_2.04_B17243.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 2.04_B17243.jpg](img/Figure_2.04_B17243.jpg)'
- en: Figure 2.4 – Visual Studio – Add environment
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.4 – Visual Studio – 添加环境
- en: 'When the window pops up, enter `virtual_env` as the name of your virtual environment
    and choose your base interpreter. This name can be anything you choose but name
    it `virtual_env` to be consistent with the examples throughout this book. Python
    version 3.9 was chosen as the base interpreter at the time of creating this exercise.
    The location is very important, where it asks whether you want to `requirements.txt`
    file that lives in the same folder as your `manage.py` file. Changing this location
    may break some of the features of using your IDE, such as operations that work
    with your virtual environment, and lead you to experience unresolved import issues.
    Unresolved imports may allow your project to still run, but code highlighting
    and formatting will often break. You should now see your virtual environment in
    your **Solution Explorer** and your **Python Environments** window within your
    IDE, as depicted here:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 当窗口弹出时，将虚拟环境名称输入为 `virtual_env` 并选择您的基解释器。这个名字可以是您选择的任何名字，但为了与本书中的示例保持一致，请命名为
    `virtual_env`。在创建此练习时选择了Python版本 3.9 作为基解释器。位置非常重要，因为它会询问您是否想要 `requirements.txt`
    文件与您的 `manage.py` 文件位于同一文件夹中。更改此位置可能会破坏使用您的IDE的一些功能，例如与您的虚拟环境一起工作的操作，并导致您遇到未解决的导入问题。未解决的导入可能会允许您的项目仍然运行，但代码高亮和格式化通常会中断。现在您应该在您的**解决方案资源管理器**和IDE中的**Python环境**窗口中看到您的虚拟环境，如图所示：
- en: '![Figure 2.5 – Visual Studio – virtual environment a success'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.5 – Visual Studio – 虚拟环境成功'
- en: '](img/Figure_2.05_B17243.jpg)'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 2.05_B17243.jpg]'
- en: Figure 2.5 – Visual Studio – virtual environment a success
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.5 – Visual Studio – 虚拟环境成功
- en: If you did want to install packages later, for instance, if someone added a
    package to the `requirements.txt` file 2 months from now, a developer could right-click
    on the virtual environment in the **Solution Explorer** and then select **Install
    from requirements.txt**. Visual Studio will then update any versions and install
    any missing packages. Visual Studio and pip do not usually remove unused packages;
    you may have to manually uninstall a package if you are experiencing conflicts.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您以后想安装包，例如，如果有人在2个月后将包添加到 `requirements.txt` 文件中，开发者可以在**解决方案资源管理器**中右键单击虚拟环境，然后选择**从
    requirements.txt 安装**。Visual Studio将更新任何版本并安装任何缺失的包。Visual Studio和pip通常不会删除未使用的包；如果您遇到冲突，可能需要手动卸载包。
- en: Running/activating the project
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行/激活项目
- en: 'By now, everything we did should allow us to run a project locally because
    Visual Studio did a lot of the heavy lifting for us. If you decided not to use
    the IDE, you cannot currently run your project and would have to work through
    most of this chapter before achieving this result. In either scenario, you will
    not currently be able to run your project on Heroku. Using the **Play/Run Web
    Server** button found at the top of the IDE, select your desired browser, if it
    provides a dropdown of choices, and then press play, as depicted in the following
    screenshot:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们所做的一切都应该允许我们在本地运行项目，因为Visual Studio为我们做了很多繁重的工作。如果您决定不使用IDE，您目前无法运行您的项目，并且必须在本章的大部分内容中工作才能达到这个结果。在任何情况下，您目前都无法在Heroku上运行您的项目。使用IDE顶部的**Play/Run
    Web Server**按钮，选择您想要的浏览器（如果它提供了选择下拉菜单），然后按播放，如以下截图所示：
- en: '![Figure 2.6 – Visual Studio – run project'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.6 – Visual Studio – 运行项目'
- en: '](img/Figure_2.06_B17243.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片 2.06_B17243.jpg]'
- en: Figure 2.6 – Visual Studio – run project
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.6 – Visual Studio – 运行项目
- en: When play is pressed, a command window will open where you can watch any console
    messages being printed to the screen and a new tab in the browser chosen will
    also open. The address in the address bar will point to `http://localhost:#####/`
    and your project should now be running successfully. The port number will usually
    be a random number. Visual Studio uses a port that it determines is currently
    unused on your machine and that is also not a default or reserved port, such as
    `8000`. This is a built-in feature of Visual Studio for people who run multiple
    projects side by side, as I often find myself doing.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当按下“播放”按钮时，将打开一个命令窗口，您可以在其中查看打印到屏幕上的任何控制台消息，并且浏览器中选中的新标签页也将打开。地址栏中的地址将指向 `http://localhost:#####/`，并且您的项目现在应该正在成功运行。端口号通常是一个随机数字。Visual
    Studio使用的是它在您的机器上当前未使用的端口号，并且也不是默认或保留端口号，例如 `8000`。这是Visual Studio为同时运行多个项目的人提供的内置功能，因为我经常发现自己这样做。
- en: If you do not see this button, you can add it to your toolbar by right-clicking
    a blank space in the toolbar area of Visual Studio. In the dropdown that appears,
    select **Standard** from the list of choices. If you select **Python** from this
    list, you can include tools that work with your virtual environment directly from
    your toolbar.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您看不到此按钮，您可以通过在Visual Studio工具栏区域的空白处右键单击来将其添加到工具栏。在出现的下拉菜单中，从选择列表中选择**标准**。如果您从列表中选择**Python**，您可以直接从工具栏中使用与虚拟环境一起工作的工具。
- en: 'Along with the command-line window that opens up, the browser you selected
    will also open with a new tab pointing to `http://127.0.0.1:#####/`, where `#####`
    is the random port that Visual Studio used. Here, you will see the iconic landing
    page for a successful Django installation, as depicted in the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 除了打开的命令行窗口外，您选择的浏览器也会在新标签页中打开，指向`http://127.0.0.1:#####/`，其中`#####`是Visual Studio使用的随机端口。在这里，您将看到成功安装Django的标志性登录页面，如下面的截图所示：
- en: '![Figure 2.7 – Django installation success'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.7 – Django安装成功'
- en: '](img/Figure_2.07_B17243.jpg)'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.07_B17243.jpg)'
- en: Figure 2.7 – Django installation success
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.7 – Django安装成功
- en: To use the standard port `8000` with the play button in Visual Studio, pointing
    to `http://localhost:8000/`, follow the steps in the next subsection.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Visual Studio中使用标准端口`8000`并指向`http://localhost:8000/`的播放按钮，请按照下一小节的步骤操作。
- en: Manually setting a port
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动设置端口
- en: We can specify the port number very easily in Visual Studio to control which
    port each project is using. On the **Project** tab at the top of your IDE, select
    **becoming_a_django_entdev Properties** from the dropdown that appears. On the
    tab that opens in your editor, click on the **Debug** tab inside and specify the
    port number in the field titled **Port Number**.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在Visual Studio中非常容易地指定端口号，以控制每个项目使用哪个端口。在IDE顶部的**项目**选项卡中，从下拉菜单中选择**成为Django企业开发者属性**。在打开的编辑器选项卡中，点击内部的**调试**选项卡，并在标题为**端口号**的字段中指定端口号。
- en: Next, we'll see how to create a virtual environment using the command line.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将看到如何使用命令行创建虚拟环境。
- en: Using the command line
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用命令行
- en: For many of you who prefer the terminal or command-line window, a popular module
    used to create virtual environments that is available for Windows, Mac, and Linux
    is called `venv`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多更喜欢终端或命令行窗口的您，一个流行的模块，可用于在Windows、Mac和Linux上创建虚拟环境，称为`venv`。
- en: 'Follow these steps to create your virtual environment:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建您的虚拟环境：
- en: Open up your terminal or command-line window and navigate to the local Git repository
    that we created in [*Chapter 1*](B17243_01_ePub.xhtml#_idTextAnchor015), *Undertaking
    a Colossal Project*.
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的终端或命令行窗口，导航到我们在[*第1章*](B17243_01_ePub.xhtml#_idTextAnchor015)“承担一个巨大项目”中创建的本地Git仓库。
- en: 'Navigate into your first folder called `becoming_a_django_entdev`. This folder
    should already exist and be populated with files created when using the command
    line or IDE to start a project earlier in this chapter:'
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导航到您第一个名为`becoming_a_django_entdev`的文件夹。这个文件夹应该已经存在，并且包含在您使用命令行或IDE在此章早期启动项目时创建的文件：
- en: '[PRE19]'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'In this directory, the same directory that the `manage.py` file lives in, run
    the following command to create a virtual environment called `virtual_env`:'
  id: totrans-159
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此目录中，即`manage.py`文件所在的目录，运行以下命令以创建一个名为`virtual_env`的虚拟环境：
- en: '[PRE20]'
  id: totrans-160
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'The `venv` module should come standard with all Python installations, but if
    you have problems running this command on any of the three major platforms, visit
    the documentation found here to help you debug the issue: [https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html).'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '`venv`模块应该与所有Python安装一起提供，但如果您在三个主要平台上运行此命令时遇到问题，请访问以下文档以帮助您调试问题：[https://docs.python.org/3/library/venv.html](https://docs.python.org/3/library/venv.html)。'
- en: 'For Windows, activate your virtual environment:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Windows，激活您的虚拟环境：
- en: '[PRE21]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Mac and Linux users should jump to the *Activating the virtual environment*
    subsection to learn how to activate a virtual environment on those platforms.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Mac和Linux用户应跳转到*激活虚拟环境*小节，了解如何在那些平台上激活虚拟环境。
- en: 'Next, install the packages defined in the `requirements.txt` file found in
    the root of a project, where the `manage.py` file lives, by running the following
    command:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，通过运行以下命令安装项目根目录中`requirements.txt`文件定义的包，其中`manage.py`文件位于：
- en: '[PRE22]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'An alternative method to creating a virtual environment on Windows, Mac, and
    Linux is using `virtualenv`, as shown:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在Windows、Mac和Linux上创建虚拟环境的另一种方法是使用`virtualenv`，如下所示：
- en: '[PRE23]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: Now that we have created a virtual environment for our project, let's activate
    that virtual environment and run the project next.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为我们的项目创建了一个虚拟环境，让我们激活这个虚拟环境并运行项目。
- en: Activating the virtual environment
  id: totrans-170
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活虚拟环境
- en: Instead of using the IDE, we can activate a virtual environment and run a project
    directly from the command line. If you already activated your virtual environment
    in the previous subsection, you can skip this subsection. The following are examples
    that show how to activate your virtual environment for each major platform (Windows,
    Mac, and Linux).
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以不使用IDE，而是激活一个虚拟环境，直接从命令行运行项目。如果您已经在上一小节中激活了虚拟环境，您可以跳过这一小节。以下是一些示例，展示了如何为每个主要平台（Windows、Mac和Linux）激活虚拟环境：
- en: 'Follow these steps to activate your virtual environment:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤激活您的虚拟环境：
- en: 'For Windows users, navigate into the root of your project, where the `manage.py`
    file is located, and then activate your virtual environment by using the following
    command:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于Windows用户，导航到项目的根目录，其中包含`manage.py`文件，然后使用以下命令激活您的虚拟环境：
- en: '[PRE24]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Mac and Linux users will need to run the following command instead:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Mac和Linux用户需要运行以下命令：
- en: '[PRE25]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'If successful, you will now see the following prompt in your terminal, waiting
    for the next command to be executed from within your virtual environment:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，您现在将在终端中看到以下提示，等待在虚拟环境中执行下一个命令：
- en: '[PRE26]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can only execute standard Django management commands when your virtual environment
    is activated.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 只有在激活了虚拟环境后，您才能执行标准的Django管理命令。
- en: Note
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'From now on, the preceding example will be depicted as the following in order
    to save space, remove clutter, and prevent confusion when providing terminal or
    command-line examples from within an active virtual environment:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，为了节省空间、去除杂乱和防止在提供活动虚拟环境中的终端或命令行示例时产生混淆，以下示例将按照以下方式展示：
- en: '`(virtual_env) PS >`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`(virtual_env) PS >`'
- en: Now that the virtual environment is activated, let's run our project.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在虚拟环境已经激活，让我们运行我们的项目。
- en: Running the project
  id: totrans-184
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 运行项目
- en: If you decided to create your project using the command line and not the Visual
    Studio IDE, you will not currently be able to run your project. This is because
    Visual Studio created a local SQLite database, made any necessary migrations,
    and migrated them automatically for every package that we included in the `requirements.txt`
    file. For reference, the command to run your project is shown in the following
    code snippet. You will have to work through the exercises found in the *PostgreSQL*
    section of this chapter to configure your database before successfully executing
    the following command. You can come back to this section after having done that.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您决定使用命令行而不是Visual Studio IDE来创建项目，您目前将无法运行项目。这是因为Visual Studio创建了一个本地SQLite数据库，对任何必要的迁移进行了处理，并自动为我们在`requirements.txt`文件中包含的每个包进行了迁移。作为参考，运行项目的命令如下所示。您需要完成本章*PostgreSQL*部分中的练习来配置数据库，然后才能成功执行以下命令。完成这些操作后，您可以回到这一节。
- en: 'Making sure you are still in the same folder as the `manage.py` file and that
    your virtual environment is active, execute the `runserver` command shown here:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您仍然位于与`manage.py`文件相同的文件夹中，并且您的虚拟环境处于激活状态，然后执行以下`runserver`命令：
- en: '[PRE27]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'If this was successful, you will then see the following information printed
    in your terminal. Whenever you load a page and your project is running, you will
    see all messages that get printed to the screen in this terminal:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果运行成功，您将在终端中看到以下信息。每次您加载页面并且项目正在运行时，您都会在这个终端中看到所有打印到屏幕上的消息：
- en: '[PRE28]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: Manually setting a port
  id: totrans-190
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 手动设置端口号
- en: 'Manually specifying a port number is easy using the terminal or command-line
    window. However, this must be done every time we run the project, unlike in the
    IDE where we set it in the configuration of the project within the IDE. The following
    example adds a port number option to the same `runserver` command used in the
    previous section, stating to use port `8000` to run the project:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 使用终端或命令行窗口手动指定端口号很简单。然而，每次我们运行项目时都必须这样做，这与在IDE中设置项目配置不同。以下示例将端口号选项添加到上一节中使用的相同`runserver`命令，指定使用端口号`8000`来运行项目：
- en: '[PRE29]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Project configuration
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目配置
- en: All projects need configuring in some way to work with all of the packages and
    hosts that are involved. We will take the project that we just created and configure
    files such as `settings.py`, `.env`, `procfile`, and `.gitignore`. Take the `settings.py`
    file—this file or files will store all of the global constants that are used throughout
    the code of your project. When packages are used, they usually provide a way to
    customize the behavior of that package from within the main settings file. Other
    files, such as `.env` and `procfile`, will be used to prevent deployment issues
    when working with Heroku as the host. Currently, we would not be able to deploy
    successfully to the Heroku environment as we have created the project files. Work
    through the following configuration sections before attempting a successful deployment.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 所有项目都需要以某种方式配置，以便与所有涉及的包和主机一起工作。我们将使用我们刚刚创建的项目，并配置 `settings.py`、`.env`、`procfile`
    和 `.gitignore` 等文件。以 `settings.py` 文件为例——此文件或文件将存储项目中使用的所有全局常量。当使用包时，它们通常提供一种方式，可以从主设置文件中自定义该包的行为。其他文件，如
    `.env` 和 `procfile`，将用于防止在与 Heroku 作为主机工作时出现部署问题。目前，由于我们创建了项目文件，我们无法成功部署到 Heroku
    环境。在尝试成功部署之前，请先完成以下配置部分。
- en: Django settings.py file
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django settings.py 文件
- en: In the `settings.py` file that was automatically generated for us when we created
    a project, we need to add settings specific to our project.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们创建项目时自动为我们生成的 `settings.py` 文件中，我们需要添加特定于我们项目的设置。
- en: 'Follow these steps to configure your project settings:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置您的项目设置：
- en: 'At the top of the `settings.py` file, add `import django_heroku` just below
    the first two imports that exist. Also, add `import dotenv` and `dj_database_url`.
    These two packages will be used to establish a database connection. The top of
    your `settings.py` file should look as in the following example:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `settings.py` 文件的顶部，在存在的前两个导入下面添加 `import django_heroku`。还要添加 `import dotenv`
    和 `dj_database_url`。这两个包将用于建立数据库连接。您的 `settings.py` 文件顶部应类似于以下示例：
- en: '[PRE30]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Note, that some systems may display `from pathlib import Path` at the top of
    their files instead of `import os` and `import posixpath`.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，某些系统可能在其文件顶部显示 `from pathlib import Path` 而不是 `import os` 和 `import posixpath`。
- en: 'At the bottom of the `settings.py` file, add the following code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `settings.py` 文件的底部，添加以下代码：
- en: '[PRE31]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: This statement will import Heroku-specific settings from the `django_heroku`
    package.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 此声明将从 `django_heroku` 包导入特定的 Heroku 设置。
- en: 'In order for your DNS to work properly, you will need to tell Django that you
    are allowing a host to gain access to this site. This is a built-in security feature
    of Django that is intended to block common `ALLOWED_HOSTS` should look similar
    to the following example:'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使您的 DNS 正确工作，您需要告诉 Django 您允许主机访问此站点。这是 Django 的内置安全功能，旨在阻止常见的 `ALLOWED_HOSTS`，应类似于以下示例：
- en: '[PRE32]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Some options that are available include a wildcard such as the asterisk character
    (`*`), which will allow anything. However, this is not considered a best practice
    and is extremely insecure. If a domain starts with a single period, like the second
    entry of the following example, it will also act as a wildcard, allowing all subdomains
    of the corresponding parent domain. Use these wildcard options with caution if
    you decide to use them at all:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的选项包括通配符，如星号字符（`*`），这将允许任何内容。然而，这并不被视为最佳实践，并且非常不安全。如果一个域名以单个点开始，就像以下示例中的第二个条目，它也将作为通配符，允许所有对应父域的子域。如果您决定使用这些通配符选项，请谨慎使用：
- en: '[PRE33]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Starting with Django 3.2, we have to add a variable to the settings file named
    `DEFAULT_AUTO_FIELD`. Prior to this version of Django, this was not necessary.
    This setting tells Django how to process and handle all primary keys of objects.
    Without this setting, we would otherwise have to add a field called `id = models.AutoField(primary_key=True)`
    to every model class that we created. Since this is a daunting task, we can avoid
    it altogether by using the following example, placed anywhere in our `settings.py`
    file:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 Django 3.2 版本开始，我们必须在设置文件中添加一个名为 `DEFAULT_AUTO_FIELD` 的变量。在此版本之前，这并不是必要的。此设置告诉
    Django 如何处理和处理所有对象的全部主键。如果没有此设置，我们否则必须为每个我们创建的模型类添加一个名为 `id = models.AutoField(primary_key=True)`
    的字段。由于这是一项艰巨的任务，我们可以通过在 `settings.py` 文件的任何位置放置以下示例来避免它：
- en: '[PRE34]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: For now, let's just leave the default `DATABASES = {...}` setting as it is.
    In the *Preparing PostgreSQL for Heroku* section of this chapter, we will discuss
    changing this setting for our particular use case. Other examples will be provided
    for all the supported database types, providing a quick reference when working
    on a project that does not follow along with every example in this book.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们只需保留默认的 `DATABASES = {...}` 设置。在本章的 *为 Heroku 准备 PostgreSQL* 部分，我们将讨论根据我们的特定用途更改此设置。还将提供所有支持数据库类型的示例，以便在处理不遵循本书中每个示例的项目时提供快速参考。
- en: Let's create our environment files next.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建我们的环境文件。
- en: Creating an environment file
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建环境文件
- en: Heroku will use an environment file called `.env` to store environment-related
    variables that are used when running a project in each environment. We use this
    to tell Heroku things such as what database is being used for each environment
    or if debug should be turned on/off. Heroku recommends that we use SQLite locally
    for a Django/PostgreSQL setup but not in their environment apps. It can be configured
    to use PostgreSQL locally, which we will demonstrate near the end of this chapter.
    Even if you are using SQLite3 locally, you still need to install the PostgreSQL
    software suite on your machine in order for the drivers to work with all of your
    remote connections. We will need to walk through the rest of configuring a project
    before we can discuss setting up PostgreSQL for use locally.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 将使用名为 `.env` 的环境文件来存储在各个环境中运行项目时使用的环境相关变量。我们使用它来告诉 Heroku诸如每个环境使用什么数据库或是否应该开启/关闭调试等信息。Heroku
    建议我们在本地使用 SQLite，但在他们的环境应用中不使用。它可以在本地配置为使用 PostgreSQL，我们将在本章末尾进行演示。即使您在本地使用 SQLite3，您仍然需要在您的机器上安装
    PostgreSQL 软件套件，以便驱动程序可以与所有远程连接一起工作。在我们讨论在本地设置 PostgreSQL 之前，我们需要完成配置项目的其余部分。
- en: Local variables
  id: totrans-214
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地变量
- en: 'To create your local variables, follow these steps:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建您的本地变量，请按照以下步骤操作：
- en: 'Run the following command from your project''s root directory, where your `manage.py`
    file exists:'
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从您的项目根目录运行以下命令，其中包含您的 `manage.py` 文件：
- en: '[PRE35]'
  id: totrans-217
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: The `echo` statement is used to create a new file called `.env` with a single
    line of content, that content being `DATABASE_URL=sqlite:///db.sqlite3`.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`echo` 语句用于创建一个名为 `.env` 的新文件，其中包含一行内容，即 `DATABASE_URL=sqlite:///db.sqlite3`。'
- en: 'Windows users might experience an error message such as `UnicodeDecodeError:
    ''utf-8'' codec can''t decode byte 0xff in position 0: invalid start byte` when
    trying to run the preceding command. There is an encoding issue that often arises
    on Windows machines that triggers this kind of error. To overcome this, open your
    `.env` file in Notepad++, go to the **Encoding** dropdown, select **UTF-8** from
    the list of choices, and then save. If that fails, which is possible, just delete
    the file and recreate it from scratch using Notepad++ to create the file, using
    the proper encoding.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 'Windows 用户在尝试运行上述命令时可能会遇到类似 `UnicodeDecodeError: ''utf-8'' codec can''t decode
    byte 0xff in position 0: invalid start byte` 的错误消息。这是在 Windows 机器上经常出现的问题，会导致此类错误。为了克服这个问题，请使用
    Notepad++ 打开您的 `.env` 文件，转到 **编码** 下拉菜单，从选择列表中选择 **UTF-8**，然后保存。如果这失败了，这是可能的，只需删除文件并使用
    Notepad++ 从头开始重新创建它，使用正确的编码创建文件。'
- en: 'Whichever way this file was created, make sure the following line of code is
    in your local `.env` file:'
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 无论此文件是如何创建的，请确保以下代码行存在于您的本地 `.env` 文件中：
- en: '[PRE36]'
  id: totrans-221
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: The code we placed in this file points to the location of your SQLite3 database
    file called `db.spqlite3`. If you didn't use the Visual Studio IDE to create your
    project, this file will not exist yet and your project will not currently run.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 我们放置在此文件中的代码指向名为 `db.spqlite3` 的 SQLite3 数据库文件的位置。如果您没有使用 Visual Studio IDE
    创建项目，此文件尚不存在，并且您的项目目前无法运行。
- en: 'We can also add other variables to this file, and then access those variables
    using the `python-dotenv` package in the `settings.py` file. To access these variables,
    we have to load the `.env` file in the `settings.py` file using the following
    example:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以向此文件添加其他变量，然后使用 `settings.py` 文件中的 `python-dotenv` 包来访问这些变量。要访问这些变量，我们必须使用以下示例在
    `settings.py` 文件中加载 `.env` 文件：
- en: '[PRE37]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: Place the highlighted code somewhere near the top of the `settings.py` file,
    just below the existing `BASE_DIR` variable. In this example, we also replaced
    the string value of the `SECRET_KEY` variable with `os.getenv('SECRET_KEY'), with`
    `os.getenv()` we can access any variable found in the `.env` file.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 将高亮代码放置在`settings.py`文件顶部附近，位于现有的`BASE_DIR`变量下方。在此示例中，我们还用`os.getenv('SECRET_KEY'),`替换了`SECRET_KEY`变量的字符串值，通过`os.getenv()`我们可以访问`.env`文件中找到的任何变量。
- en: 'We need to add the string value of the `SECRET_KEY` variable that was in the
    `settings.py` file to the `.env` file in order for our project to work locally.
    Write your variable using the following example, without quotation marks for any
    string values found in this file:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使我们的项目在本地运行，我们需要将`settings.py`文件中`SECRET_KEY`变量的字符串值添加到`.env`文件中。使用以下示例编写您的变量，不要在此文件中为任何字符串值添加引号：
- en: '[PRE38]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: That's it, our local variables are now configured. Let's configure our remote
    variables next.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们的本地变量现在已配置。接下来，让我们配置我们的远程变量。
- en: Remote variables
  id: totrans-229
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程变量
- en: Remote variables are the same local `.env` variables that we created, now with
    values that pertain to each remote environment. Since we will be ignoring the
    `.env` file in our repository, which we will discuss in the subsection titled
    *Creating a .gitignore file*, we need to manually create the `SECRET_KEY` variable
    inside of the `.env` file for each Heroku environment that exists. Since Heroku
    already created these `.env` files for us, we will just use this as an opportunity
    to add the variables that are needed. These steps can also be used at any time
    during the SDLC to add variables as they are needed.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 远程变量与我们在本地创建的`.env`变量相同，但现在具有与每个远程环境相关的值。由于我们将在我们的仓库中忽略`.env`文件，我们将在名为“创建.gitignore文件”的子节中讨论这一点，因此我们需要为每个存在的Heroku环境手动在`.env`文件中创建`SECRET_KEY`变量。由于Heroku已经为我们创建了这些`.env`文件，我们将借此机会添加所需的变量。这些步骤也可以在任何时候在SDLC（软件开发生命周期）中根据需要添加变量。
- en: 'To add your remote variables, use the Heroku **Command-Line Interface** (**CLI**)
    to log into your Heroku account and replace the app name provided in the following
    code block with your Heroku app name:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加您的远程变量，请使用Heroku**命令行界面**（**CLI**）登录您的Heroku账户，并将以下代码块中提供的应用程序名称替换为您的Heroku应用程序名称：
- en: '[PRE39]'
  id: totrans-232
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: In the preceding code, one example is provided for each of the three environments
    that exist. Execute them one at a time for each of your environments.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，为存在的三个环境中的每一个提供了一个示例。为每个环境逐个执行它们。
- en: It is best to provide a different `SECRET_KEY` value for each environment. In
    [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077), *Models, Relations, and
    Inheritance*, after we discuss working with the Django shell in the subsection
    titled *Generating a SECRET_KEY variable*, we will explore how to generate a `SECRET_KEY`
    variable in a safer way. Adding that `SECRET_KEY` variable to each Heroku environment
    will still be done as in this section.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 最好为每个环境提供一个不同的`SECRET_KEY`值。在[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)，“模型、关系和继承”一节中，我们在名为“生成`SECRET_KEY`变量”的子节中讨论了与Django
    shell一起工作后，将探讨如何以更安全的方式生成`SECRET_KEY`变量。将此`SECRET_KEY`变量添加到每个Heroku环境中的操作仍将如本节所述进行。
- en: Next, let's create a **Procfile**, short for **process file**.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们创建一个**Procfile**，即**进程文件**。
- en: Creating a Procfile
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建Procfile
- en: A `procfile` located in the root of a repository, where the `.git` folder is
    located. This file tells Heroku where the rest of your project's files live, specifically,
    the location of the `wsgi.py` or `asgi.py` file inside of the `procfile` file,
    using standard Python path syntax. The `wsgi.py` file is commonly found in the
    `project_name` folder of any Django project, upon creation; that folder is found
    in the same folder that the `manage.py` file resides in. If you wanted to use
    an asynchronous server gateway interface, you would specify the location of the
    `asgi.py` file instead.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 存储在仓库根目录（`.git`文件夹所在位置）的`procfile`。此文件告诉Heroku其余项目文件的存放位置，具体来说，是`procfile`文件内`wsgi.py`或`asgi.py`文件的存放位置，使用标准的Python路径语法。`wsgi.py`文件通常位于任何Django项目的`project_name`文件夹中，创建时；该文件夹位于`manage.py`文件所在的同一文件夹中。如果您想使用异步服务器网关接口，则应指定`asgi.py`文件的存放位置。
- en: 'Hypothetically speaking, if the `manage.py` file and the Django project folder
    lived in the same folder as the root of a repository, we would include the following
    path inside of that procfile:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 假设`manage.py`文件和Django项目文件夹与仓库的根目录位于同一文件夹中，我们将在该procfile中包含以下路径：
- en: '[PRE40]'
  id: totrans-239
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'Our project files are nested one level deep in the `/becoming_a_django_entdev/`
    folder, as was done using the IDE or when using the `startproject` command to
    create a project earlier in this chapter. If we tried to add this directory using
    standard Python path syntax, we would have problems during deployment to Heroku.
    Instead, in one line of code, tell Heroku to change directory first and then execute
    the preceding command, using the following code example:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的项目文件嵌套在 `/becoming_a_django_entdev/` 文件夹中一层，就像在 IDE 中操作或在本书早期使用 `startproject`
    命令创建项目时那样。如果我们尝试使用标准的 Python 路径语法添加此目录，我们将在部署到 Heroku 时遇到问题。相反，在一行代码中，告诉 Heroku
    首先更改目录，然后执行前面的命令，使用以下代码示例：
- en: '[PRE42]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: '[PRE43]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: Please use the second example. Only use the first example if you have structured
    your project to live in the root of your repository and are likely not using Heroku
    as your host. Heroku will also fail to deploy without the `--log-file –` parameter
    shown previously. With the `log` parameter, you may read deployment errors from
    within your Heroku dashboard for each app.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 请使用第二个示例。只有当你已经将你的项目结构设置为存储在仓库的根目录，并且不太可能使用 Heroku 作为你的主机时，才使用第一个示例。如果没有之前显示的
    `--log-file –` 参数，Heroku 也无法部署。使用 `log` 参数，你可以从每个应用的 Heroku 仪表板中读取部署错误。
- en: Next, we need to control how the static files are managed when Django is used
    with Heroku.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要控制当 Django 与 Heroku 一起使用时如何管理静态文件。
- en: Django static files
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django 静态文件
- en: Traditionally, we do not need to modify the settings files to allow Django to
    work with static files in a project. In our case, we will need to add to the settings
    that exist in order for Heroku to work with them. Heroku uses a package called
    `whitenoise`, installed in the `requirements.txt` file, to work with your static
    files. These are files such as a `.css`, `.js`, image, or font files that are
    found in any Django app's `static` folder.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 传统上，我们不需要修改设置文件以允许 Django 在项目中使用静态文件。在我们的情况下，我们需要添加到现有的设置中，以便 Heroku 能够与它们一起工作。Heroku
    使用一个名为 `whitenoise` 的包来处理你的静态文件，该包在 `requirements.txt` 文件中安装。这些文件是 `.css`、`.js`、图像或字体文件，它们位于任何
    Django 应用程序的 `static` 文件夹中。
- en: 'Follow these steps to configure your project to work with the `whitenoise`
    package:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置你的项目以使用 `whitenoise` 包：
- en: 'Add the following line to the `MIDDLEWARE` setting found in your `settings.py`
    file. Add it below any item that already exists in that list:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下行添加到你的 `settings.py` 文件中找到的 `MIDDLEWARE` 设置。添加到该列表中任何现有项的下方：
- en: '[PRE44]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Heroku will also need us to add a variable called `STATICFILES_STORAGE`. Add
    this variable to your `settings.py` file just above your `STATIC_URL` and `STATIC_ROOT`
    variables, as shown:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Heroku 还需要我们添加一个名为 `STATICFILES_STORAGE` 的变量。将此变量添加到你的 `settings.py` 文件中，位于你的
    `STATIC_URL` 和 `STATIC_ROOT` 变量之上，如下所示：
- en: '[PRE45]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: Change the value of your `STATIC_URL` and `STATIC_ROOT` variables to equal what
    is shown in the preceding code, if your value has not already changed.
  id: totrans-253
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果你的值尚未更改，将你的 `STATIC_URL` 和 `STATIC_ROOT` 变量的值更改为前面代码中显示的值。
- en: Our static files should now be wired up properly. At this point in time, we
    have configured everything locally in order to successfully deploy to any of our
    remote Heroku environments.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 我们静态文件现在应该已经正确连接。到目前为止，我们已经在本地配置了一切，以便成功部署到我们的任何远程 Heroku 环境。
- en: Note
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: In Django, when a project is run locally, with `DEBUG = False`, static files
    will fail to load even if they appear in your remote environments. The reason
    why this happens is that the server is usually configured to handle how it serves
    up your static files versus Django controlling that, similar to how Heroku uses
    the `whitenoise` package to serve up its static files. The `whitenoise` package
    is also used to serve up static files locally when `DEBUG` is set to `False`.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Django 中，当项目在本地运行时，如果 `DEBUG = False`，即使静态文件出现在你的远程环境中，它们也无法加载。这种情况发生的原因是服务器通常配置为处理如何提供你的静态文件，而不是
    Django 控制这一点，类似于 Heroku 使用 `whitenoise` 包来提供其静态文件的方式。当 `DEBUG` 设置为 `False` 时，`whitenoise`
    包也用于在本地提供静态文件。
- en: Let's wire up our media files next.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们接下来连接我们的媒体文件。
- en: Django media files
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django 媒体文件
- en: 'Similar to the static files, media file paths need to be configured in order
    to work with the `whitenoise` package and Heroku. Media files are considered anything
    that the user uploads to your system, such as an image, audio file, or another
    document. The two variables, `MEDIA_URL` and `MEDIA_ROOT`, are defined in Django
    by default as empty strings; we just need to set their values to point to the
    media folder that we want to place them in. In addition to these settings, additional
    steps may also be necessary to work with Heroku and media files. Please refer
    to the detailed Python guide found here to learn more: [https://devcenter.heroku.com/articles/s3-upload-python](https://devcenter.heroku.com/articles/s3-upload-python).'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 与静态文件类似，媒体文件路径需要配置，以便与 `whitenoise` 包和 Heroku 一起使用。媒体文件被认为是用户上传到你的系统中的任何内容，例如图片、音频文件或另一个文档。这两个变量，`MEDIA_URL`
    和 `MEDIA_ROOT`，在 Django 中默认定义为空字符串；我们只需设置它们的值，指向我们想要放置它们的媒体文件夹。除了这些设置之外，还可能需要额外的步骤才能与
    Heroku 和媒体文件一起使用。请参考这里找到的详细 Python 指南以了解更多信息：[https://devcenter.heroku.com/articles/s3-upload-python](https://devcenter.heroku.com/articles/s3-upload-python)。
- en: 'To define your media-related variables, in your `settings.py` file, just below
    your `STATIC_URL` and `STATIC_ROOT` variables, include the following two variables:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 要定义你的媒体相关变量，在你的 `settings.py` 文件中，在 `STATIC_URL` 和 `STATIC_ROOT` 变量下方，包括以下两个变量：
- en: '[PRE46]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: '[PRE47]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: '[PRE48]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: '[PRE49]'
  id: totrans-264
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: '[PRE50]'
  id: totrans-265
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: '[PRE51]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: That's it, this is all that we need to configure in our `settings.py` file to
    wire up static and media files. In [*Chapter 4*](B17243_04_ePub.xhtml#_idTextAnchor116),
    *URLs, Views, and Templates*, in the subsection titled *Function – static()*,
    we will need to configure additional URL patterns before these are considered
    fully integrated into our project.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了，这就是我们需要在我们的 `settings.py` 文件中配置的，以连接静态和媒体文件。在 [*第 4 章*](B17243_04_ePub.xhtml#_idTextAnchor116)
    的 *URLs, Views, and Templates* 小节中，标题为 *Function – static()* 的部分，我们将在这些内容完全集成到我们的项目中之前，需要配置额外的
    URL 模式。
- en: Before we attempt to deploy, we need to create the `.gitignore` file, which
    was mentioned earlier, as well as working through the *Preparing PostgreSQL for
    Heroku* section of this chapter.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们尝试部署之前，我们需要创建前面提到的 `.gitignore` 文件，以及完成本章的 *为 Heroku 准备 PostgreSQL* 部分的操作。
- en: Creating a .gitignore file
  id: totrans-269
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个 .gitignore 文件
- en: The last file that we want to create before we deploy is a `.gitignore` file
    so that we can share only what we want and leave out things like all of those
    bulky files that are now seen in the `virtual_env` and `.vs` folders. This file
    will be used to ensure we don't accidentally push any unwanted code to our remote
    repositories. Once a file has been pushed to a repository, it will always be tracked
    until it has been deleted; so, we want to make sure we do this first. It's a good
    idea to also ignore the `.suo` files created by Visual Studio. These files contain
    user-specific information, such as breakpoint and debugger watches. You will also
    want to ignore any `build`, `bin`, and `log` files that do not need to be shared
    with other developers. This is also where we will define a pattern to ignore the
    `.env` file, which defines the environment-specific variables. We will be creating
    the `.env` files in development, staging, and production soon when we get to the
    *PostgreSQL* subsection of this chapter, which will be needed to successfully
    deploy.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署之前，我们想要创建的最后一个文件是一个 `.gitignore` 文件，这样我们就可以只分享我们想要分享的内容，并排除像现在在 `virtual_env`
    和 `.vs` 文件夹中看到的那些庞大的文件。这个文件将用于确保我们不会意外地将任何不想要的代码推送到我们的远程仓库。一旦文件被推送到仓库，它将始终被跟踪，直到它被删除；因此，我们想要确保我们首先这样做。忽略由
    Visual Studio 创建的 `.suo` 文件也是一个好主意。这些文件包含用户特定的信息，例如断点和调试器监视器。你还会想要忽略任何不需要与其他开发者共享的
    `build`、`bin` 和 `log` 文件。这也是我们将定义一个模式来忽略定义环境特定变量的 `.env` 文件的地方。当我们到达本章的 *PostgreSQL*
    小节时，我们将很快创建开发、预发布和生产的 `.env` 文件，这是成功部署所必需的。
- en: 'Create a file called `.gitignore` in the root of your repository, where your
    `.git` folder resides. Then, add the items shown here. They will serve as your
    ignore patterns:'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的仓库根目录中创建一个名为 `.gitignore` 的文件，其中你的 `.git` 文件夹位于。然后，添加这里显示的项目。它们将作为你的忽略模式：
- en: '[PRE52]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: '[PRE53]'
  id: totrans-273
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: '[PRE54]'
  id: totrans-274
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: '[PRE55]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: '[PRE56]'
  id: totrans-276
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: '[PRE57]'
  id: totrans-277
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: '[PRE58]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: '[PRE59]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: '[PRE60]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: '[PRE61]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: '[PRE62]'
  id: totrans-282
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: '[PRE63]'
  id: totrans-283
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: '[PRE64]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: '[PRE65]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: '[PRE66]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: '[PRE67]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: '[PRE68]'
  id: totrans-288
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: '[PRE69]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: '[PRE70]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: '[PRE71]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: '[PRE72]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: '[PRE73]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: These are just a few examples that relate to our specific Heroku/Django and
    Visual Studio configuration. Your `.gitignore` file can contain many more ignore
    patterns. In the source code provided with this book, many other ignore patterns
    have been provided as examples, broken down into categories that you are welcome
    to use if you need to.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 这些只是与我们的特定 Heroku/Django 和 Visual Studio 配置相关的几个示例。您的 `.gitignore` 文件可以包含更多的忽略模式。在这本书提供的源代码中，已经提供了许多其他忽略模式的示例，并按类别划分，如果您需要，欢迎使用。
- en: Ignore patterns accept wildcards such as the asterisk (`*`) that is used in
    the preceding examples. They also accept an exclude operator denoted by the exclamation
    mark (`!`) symbol. The`!gitkeep.txt` pattern is commonly used in situations where
    an empty folder is needed to live in a repository, such as the media folder. Git
    will automatically ignore a folder if nothing exists inside of it; if we place
    a `gitkeep.txt` file inside that media folder, we can get around this dilemma
    when ignoring everything within that folder. The media folder is used for user-generated
    content but we do not want to track files that get placed inside of it. Some of
    these empty folders are actually needed to prevent errors during runtime, such
    as when uploading an image to the system and the media folder does not exist yet.
    Sometimes, this can prevent a fresh clone of a repository from running properly
    for the first time altogether, depending on the existence of that folder.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 忽略模式接受通配符，例如前面示例中使用的星号（`*`）。它们还接受一个排除操作符，用感叹号（`!`）符号表示。`!gitkeep.txt` 模式在需要空文件夹存在于仓库中的情况下常用，例如媒体文件夹。如果文件夹内没有任何内容，Git
    会自动忽略该文件夹；如果我们把一个 `gitkeep.txt` 文件放在那个媒体文件夹里，我们就可以绕过忽略该文件夹内所有内容的困境。媒体文件夹用于用户生成的内容，但我们不希望跟踪放入其中的文件。实际上，一些空文件夹是必需的，以防止运行时出错，例如当上传图片到系统而媒体文件夹尚未存在时。有时，这甚至可以防止一个仓库的新克隆版本在第一次运行时完全无法正常运行，这取决于该文件夹的存在与否。
- en: You may now push your code to development, staging, or production as you see
    fit. Just be aware of what remote environment and branch you are pushing to or
    pulling from, when you perform your Git operations. When this is done, you can
    visit your Heroku dashboard as was discussed in [*Chapter 1*](B17243_01_ePub.xhtml#_idTextAnchor015),
    *Undertaking a Colossal Project*, to see whether a deployment was successful,
    and if not, read the logs to see why it failed.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在可以根据需要将代码推送到开发、预发布或生产环境。只需在执行 Git 操作时注意您正在推送到或从哪个远程环境和分支，当完成这些操作后，您可以访问之前讨论过的
    Heroku 仪表板[*第 1 章*](B17243_01_ePub.xhtml#_idTextAnchor015)，*承担一个巨大的项目*，以查看部署是否成功，如果不成功，请查看日志以了解失败的原因。
- en: Creating a Django app
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建 Django 应用
- en: In Django, the entire set of files from the folder where your `manage.py` file
    is located is considered your project. Your project can contain many apps, where
    an **app** in Django is considered a process that does something within your project,
    such as logging, trivia, or record keeping, to name a few processes. They can
    also be something simple, such as a special form field or an event listener that
    comes from a PyPI package, where that particular package is essentially considered
    a Django app that we are installing.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Django 中，您的 `manage.py` 文件所在的文件夹中的所有文件集被认为是您的项目。您的项目可以包含许多应用，其中 Django 中的
    **应用** 被视为在项目中执行某些操作的过程，例如日志记录、琐事或记录保存，仅举几个例子。它们也可以是简单的东西，例如来自 PyPI 包的特殊表单字段或事件监听器，其中该特定包基本上被视为我们正在安装的
    Django 应用。
- en: Apps are where we write models, views, test cases, forms, admin classes, HTML
    templates, and static files pertinent to that app. Apps are also where the bulk
    of the code in a project will exist. They are also designed to be modular where
    an app can be shared in many projects if we want to. Next, we will create an app
    for ourselves and call it `chapter_2`. Every upcoming chapter will follow the
    same app naming convention. We will attempt to organize apps by the content of
    each chapter in this book. Some chapters may involve every file of the project,
    which is the case for this chapter of this book. This is because, in this chapter,
    we are working with the global files of a project. Choose the route you would
    like to use to create your app, whether that is using the IDE or the command-line-driven
    approach.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 应用是我们编写模型、视图、测试用例、表单、管理类、HTML 模板和与该应用相关的静态文件的地方。应用也是项目中大部分代码存在的地方。它们也被设计成模块化的，如果我们想的话，一个应用可以在多个项目中共享。接下来，我们将为自己创建一个应用，并将其命名为
    `chapter_2`。每一章都将遵循相同的命名约定。我们将尝试根据本书每一章的内容来组织应用。有些章节可能涉及项目中的每个文件，本书的这一章就是这样。这是因为在本章中，我们正在处理项目的全局文件。选择您想要使用的创建应用的方法，无论是使用
    IDE 还是命令行驱动的方法。
- en: Using the IDE
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用 IDE
- en: 'To create an app easily, right-click the name of your project in the `chapter_2`,
    as shown here:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 要轻松创建应用，请在此处右键单击 `chapter_2` 中的项目名称，如图所示：
- en: '![Figure 2.8 – Visual Studio – adding app'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.8 – Visual Studio – 添加应用'
- en: '](img/Figure_2.08_B17243.jpg)'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.08_B17243.jpg)'
- en: Figure 2.8 – Visual Studio – adding app
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.8 – Visual Studio – 添加应用
- en: In Visual Studio, you can select any folder or subfolder within your project
    to create a Django app in. Just right-click the folder you want to create that
    app in instead of the one described previously if you wish to structure your project
    in a different way.
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Visual Studio 中，您可以选择项目中的任何文件夹或子文件夹来创建 Django 应用。如果您希望以不同的方式组织项目结构，只需右键单击您想要创建该应用的文件夹，而不是之前描述的文件夹。
- en: Note
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Visual Studio will install apps using the version of Django that was installed
    or updated in the virtual environment. There is no special version 2.1.2 use case
    like before when we created a project through the IDE; the version of the app
    files to be installed will be Django 4.0\. Also note that you can create an app
    using the IDE in any directory found in your project root. You are not limited
    to installing them in the directory used in this exercise.
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: Visual Studio 将使用虚拟环境中安装或更新的 Django 版本来安装应用。没有像之前通过 IDE 创建项目时那样的特殊版本 2.1.2 用例；要安装的应用文件版本将是
    Django 4.0。此外，请注意，您可以使用 IDE 在项目根目录中的任何目录中创建应用。您不必将它们安装在本练习中使用的目录中。
- en: Let's create a Django app using the command line next.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用命令行创建一个 Django 应用。
- en: Using the command line
  id: totrans-309
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用命令行
- en: 'To create a Django app using the command line, you first need to create the
    folder structure for that new app. Here, we want it to mimic exactly how the IDE
    created its folder structure in the previous exercise, to make sure each approach
    produces the same results and works with the rest of the book. From the same folder
    that the `manage.py` file lives in, make sure your virtual environment is activated
    and run the following create folder command. Then, execute the traditional `startapp`
    command shown after, to create the app called `chapter_2`:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用命令行创建 Django 应用，您首先需要为新应用创建文件夹结构。在这里，我们希望它完全模仿之前练习中 IDE 创建的文件夹结构，以确保每种方法都能产生相同的结果，并与本书的其他部分协同工作。从
    `manage.py` 文件所在的同一文件夹开始，确保您的虚拟环境已激活，并运行以下创建文件夹命令。然后，执行下面的传统 `startapp` 命令，以创建名为
    `chapter_2` 的应用：
- en: '[PRE74]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: In the preceding examples, we first created the `chapter_2` folder with the
    `mkdir` command and then executed the `startapp` command. We also provided a parameter
    that designates the folder that the app will be installed into, the same folder
    that Visual Studio placed it in for us. Again, you are not limited to installing
    apps in this directory— adjust where needed throughout this book if you created
    your folder structure in a different way.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们首先使用 `mkdir` 命令创建了 `chapter_2` 文件夹，然后执行了 `startapp` 命令。我们还提供了一个参数，指定了应用将被安装到的文件夹，也就是
    Visual Studio 为我们放置的同一个文件夹。再次强调，您不必将应用安装在这个目录中——如果您以不同的方式创建了文件夹结构，在整个书籍中根据需要调整即可。
- en: Activating a new Django app
  id: totrans-313
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 激活新的 Django 应用
- en: Once a Django app has been created, it will not automatically work in your project
    until you actually include it as an installed application within Django.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: Django应用创建后，除非你将其作为已安装的应用包含在Django中，否则它不会自动在你的项目中工作。
- en: 'To activate your app, follow these steps:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 要激活你的应用，请按照以下步骤操作：
- en: 'All Django apps must be included in the `INSTALLED_APPS` list. Add your chapter
    app, as shown:'
  id: totrans-316
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 所有Django应用都必须包含在`INSTALLED_APPS`列表中。添加你的章节应用，如下所示：
- en: '[PRE75]'
  id: totrans-317
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Sometimes, it is necessary to tell Django where to look for your app in your
    directory tree. In the `apps.py` file of the app you just created, you can specify
    the location of your app using standard Python path syntax. Modify the value of
    the `name =` variable in the following example:'
  id: totrans-318
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 有时候，有必要告诉Django在你的目录树中查找你的应用的位置。在你刚刚创建的应用的`apps.py`文件中，你可以使用标准的Python路径语法指定你的应用的位置。修改以下示例中`name
    =`变量的值：
- en: '[PRE76]'
  id: totrans-319
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: Note that you will have to do this for all future chapter apps that you create.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，你必须为所有未来创建的章节应用都这样做。
- en: 'The project''s file structure should now look like the following tree, with
    the highlighted items being the additions that we have made since we began configuring
    the virtual environment:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 项目文件结构现在应该看起来像以下树，其中突出显示的项目是我们从开始配置虚拟环境以来所做的添加：
- en: '`├── .git`'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── .git`'
- en: '`├── .gitignore`'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── .gitignore`'
- en: '`├── procfile`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── procfile`'
- en: '`├── requirements.txt`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── requirements.txt`'
- en: '`├── readme.md`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── readme.md`'
- en: '`├── becoming_a_django_entdev`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`├── becoming_a_django_entdev`'
- en: '`│ ├── .vs`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── .vs`'
- en: '`│ ├── becoming_a_django_entdev.sln`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── becoming_a_django_entdev.sln`'
- en: '`│ ├── db.sqlite3`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── db.sqlite3`'
- en: '`│ ├── manage.py`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── manage.py`'
- en: '`│ ├── media`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── media`'
- en: '`│ ├── obj`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── obj`'
- en: '`│ ├── requirements.txt`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── requirements.txt`'
- en: '`│ ├── virtual_env`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── virtual_env`'
- en: '`│ ├── staticfiles`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── staticfiles`'
- en: '`│ └── becoming_a_django_entdev`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── becoming_a_django_entdev`'
- en: '`│ ├── chapter_2`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── chapter_2`'
- en: '`│ ├── __init__.py`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── __init__.py`'
- en: '`│ ├── asgi.py`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── asgi.py`'
- en: '`│ ├── settings.py`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── settings.py`'
- en: '`│ ├── urls.py`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ ├── urls.py`'
- en: '`│ └── wsgi.py`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`│ └── wsgi.py`'
- en: Next, let's discuss the different types of databases supported by Django.
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们讨论Django支持的不同类型的数据库。
- en: Using basic database settings
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用基本的数据库设置
- en: A website by itself is far from useful without a database to talk to; this is
    why the Visual Studio IDE comes with a lightweight and portable SQLite3 database.
    Visual Studio will create a file called `db.sqlite3` in the same folder as your
    `manage.py` file whenever the `startproject` command is executed. If you created
    your project using the terminal or command-line window, then you will not have
    a SQLite database that is used in the following configuration examples, and if
    you attempt to run your project without this database, it will fail. This is one
    of the five standard database types that Django directly supports. Database types
    other than the five types that Django directly supports can also be used. We will
    also provide an example of how to configure other types of databases, such as
    the Microsoft SQL Server database. Types that are not any of the five standard
    types will require using a different engine than the engines that Django provides,
    which means you will need to find a PyPI package to install or write your own
    for the database type that you are supporting.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 一个网站本身如果没有数据库与之交互就远远不够有用；这就是为什么Visual Studio IDE附带了一个轻量级且便携的SQLite3数据库。每当执行`startproject`命令时，Visual
    Studio都会在`manage.py`文件所在的同一文件夹中创建一个名为`db.sqlite3`的文件。如果你使用终端或命令行窗口创建了项目，那么你将不会在下面的配置示例中使用SQLite数据库，如果你尝试在没有此数据库的情况下运行项目，它将失败。这是Django直接支持的五种标准数据库类型之一。除了Django直接支持的五种类型之外，还可以使用其他数据库类型。我们还将提供一个如何配置其他类型数据库的示例，例如Microsoft
    SQL Server数据库。不属于五种标准类型的类型将需要使用Django提供的引擎之外的引擎，这意味着你需要找到一个PyPI包来安装或为你要支持的数据库类型编写自己的。
- en: 'The five standard Django database types are as follows:'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: Django的五种标准数据库类型如下：
- en: '**SQLite**'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**SQLite**'
- en: '**MySQL**'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MySQL**'
- en: '**MariaDB**'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**MariaDB**'
- en: '**Oracle**'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Oracle**'
- en: '**PostgreSQL**'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PostgreSQL**'
- en: The following examples will help you to configure an existing database of your
    choice. The last example, PostgreSQL, will be the type used when moving forward
    with the examples of this chapter. You may use any type for the remaining chapters
    of this book. There is more to using a database, such as creating tables and performing
    queries, that will be discussed in the chapters to come. These examples relate
    to settings written just to establish a working connection to your database, whether
    that connection is local or remote.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例将帮助您配置您选择的现有数据库。最后一个示例，PostgreSQL，将是本章后续示例中使用的类型。您可以使用本书剩余章节中的任何类型。使用数据库还有更多内容，例如创建表和执行查询，这些内容将在后续章节中讨论。这些示例仅涉及为建立与数据库的连接而编写的设置，无论该连接是本地还是远程。
- en: SQLite
  id: totrans-354
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQLite
- en: SQLite is a **Relational Database Management System** (**RDBMS**) based on the
    C language. It is extremely lightweight and portable and is sometimes referred
    to as the *on-disk* method of choice when it comes to database management. This
    is the method of choice to get a *proof-of-concept* project up and running in
    a very short amount of time. This database type can even be shared on drives and
    repositories for quick transportation and portability of the project and its data.
    This is not recommended if security is as important to you as it should be.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: SQLite 是一种基于 C 语言的 **关系数据库管理系统**（**RDBMS**）。它非常轻量级且易于携带，在数据库管理方面有时被称为首选的 *磁盘存储*
    方法。这是在极短的时间内将 *概念验证* 项目启动起来的首选方法。这种数据库类型甚至可以在驱动器和存储库中共享，以便快速传输和携带项目及其数据。如果安全性对您来说和它应有的重要性一样重要，则不建议这样做。
- en: There are a lot of problems with using this database type in real-world applications
    and in combination with Heroku like we are doing to host the app. You may find
    that you can get it to work in a remote Heroku environment momentarily. However,
    each deployment of your app throughout its life cycle will result in the complete
    loss of data. For this reason, we will have to deviate from the standard database
    that comes with Django and rely on a more robust database system for our environment
    instead.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 在实际应用中使用此数据库类型以及与 Heroku（如我们用于托管应用程序的方式）结合使用时，存在许多问题。您可能会发现您可以在远程 Heroku 环境中暂时使其工作。然而，在应用程序的生命周期中，每次部署都会导致数据的完全丢失。因此，我们将不得不偏离
    Django 附带的标准数据库，并依赖我们环境中更健壮的数据库系统。
- en: 'A standard SQLite3 database configuration will look like the following example:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 一个标准的 SQLite3 数据库配置示例如下：
- en: '[PRE77]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: '[PRE78]'
  id: totrans-359
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: '[PRE79]'
  id: totrans-360
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: '[PRE80]'
  id: totrans-361
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: '[PRE81]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: '[PRE82]'
  id: totrans-363
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: '[PRE83]'
  id: totrans-364
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: '[PRE84]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: Add additional `default` parameters as needed.
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 根据需要添加额外的 `default` 参数。
- en: MySQL
  id: totrans-367
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MySQL
- en: MySQL is a more robust SQL RDBMS. It is open source and, just like SQLite, it
    is compatible with Windows, Mac, and Linux systems. It is made to work as a client-server
    model, meaning the software is installed on the client's machine in order to perform
    request operations that the server side will listen to and respond to. MySQL has
    become one of the most popular and most used database types of all time, especially
    if you consider all the other database choices that were built using a fork of
    MySQL.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL 是一种更健壮的 SQL RDBMS。它是开源的，就像 SQLite 一样，它与 Windows、Mac 和 Linux 系统兼容。它被设计成作为客户端-服务器模型工作，这意味着软件安装在客户端机器上以执行服务器端将监听并响应的请求操作。MySQL
    已经成为有史以来最受欢迎和最常用的数据库类型之一，尤其是如果您考虑了所有使用 MySQL 分支构建的其他数据库选择。
- en: 'Follow these steps to configure your MySQL database connection:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置您的 MySQL 数据库连接：
- en: 'A standard connection to a MySQL database would look like the following example:'
  id: totrans-370
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一个标准的 MySQL 数据库连接示例如下：
- en: '[PRE85]'
  id: totrans-371
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'In order for this database type to work, you also need to install the following
    package and include it in your `requirements.txt` file:'
  id: totrans-372
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使这种数据库类型正常工作，您还需要安装以下包并将其包含在您的 `requirements.txt` 文件中：
- en: '[PRE86]'
  id: totrans-373
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE86]'
- en: Adjust your default parameters as needed for your project.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 根据您的项目需要调整默认参数。
- en: MariaDB
  id: totrans-375
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: MariaDB
- en: MariaDB is actually a fork of MySQL; it is a community-developed version that
    evolved over time into what it is today. Technical support is available for both
    the MariaDB and MySQL database types. With both being open source, there is also
    a lot of information and resources available online for free. MariaDB is not used
    as much as MySQL but it is still very popular. Since MariaDB is essentially just
    another MySQL installation, the `ENGINE` in the `DATABASES` configuration of your
    `settings.py` file will be the same as the example in the previous subsection,
    titled *MySQL*. Both will also require that you install the same `mysqlclient`
    package and include it in your `requirements.txt` file.
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: MariaDB 实际上是 MySQL 的一个分支；它是一个社区开发的版本，随着时间的推移发展成现在的样子。MariaDB 和 MySQL 数据库类型都提供技术支持。由于两者都是开源的，因此在线上也有大量的信息和资源免费提供。尽管
    MariaDB 的使用不如 MySQL 那么广泛，但它仍然非常受欢迎。由于 MariaDB 实质上只是另一个 MySQL 安装，因此你的 `settings.py`
    文件中 `DATABASES` 配置的 `ENGINE` 将与上一小节中标题为 *MySQL* 的示例相同。两者也将需要你安装相同的 `mysqlclient`
    包，并将其包含在 `requirements.txt` 文件中。
- en: Oracle
  id: totrans-377
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Oracle
- en: '**Oracle Database** is a multimodel, object-relational database management
    system created by Oracle. It''s primarily used for **Online Transaction Processing**
    (**OLTP**) and **data warehousing**. This database is a bit more complicated in
    terms of its use and capabilities compared to other web development databases.
    It is intended for enterprise grid computing, which is a method of grouping a
    series of network computers to act as one larger virtual super-computer. Oracle
    has developed a database specifically to be used in network cluster configurations
    such as these. It''s considered one of the most complex and robust database systems
    that exist today and is beyond the scope of this book. Much of the code in this
    book can still be used with this database type but some alterations may be necessary.'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '**Oracle 数据库**是由 Oracle 创建的多模型、对象关系型数据库管理系统。它主要用于**在线事务处理**（**OLTP**）和**数据仓库**。与其他网络开发数据库相比，这个数据库在使用和功能方面要复杂一些。它旨在用于企业网格计算，这是一种将一系列网络计算机组合起来作为一台更大的虚拟超级计算机的方法。Oracle
    开发了一个数据库专门用于这些网络集群配置。它被认为是当今最复杂和最健壮的数据库系统之一，超出了本书的范围。本书中的大部分代码仍然可以与这种数据库类型一起使用，但可能需要进行一些修改。'
- en: 'Follow these steps to configure your Oracle database connection:'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置你的 Oracle 数据库连接：
- en: 'A typical Oracle database connection can be established using the following
    example:'
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用以下示例建立典型的 Oracle 数据库连接：
- en: '[PRE87]'
  id: totrans-381
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'The Oracle database type also requires installing the following package and
    including it in the `requirements.txt` file:'
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Oracle 数据库类型还需要安装以下包，并将其包含在 `requirements.txt` 文件中：
- en: '[PRE88]'
  id: totrans-383
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'Oracle also requires following additional setup and configuration steps and
    they provide directions on their website here: [https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html](https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html).'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: Oracle 还需要遵循额外的设置和配置步骤，并且它们在其网站上提供了指导：[https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html](https://cx-oracle.readthedocs.io/en/latest/user_guide/installation.html)。
- en: SQL Server
  id: totrans-385
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: SQL Server
- en: This is the one database type that is not one of the five standard types supported
    by Django that we will provide an example of. Developed by Microsoft, the Microsoft
    SQL Server database type is also a fork of MySQL and is widely used in Microsoft
    enterprise database systems today. Many systems today rely on this database type,
    which is often used in combination with Azure-hosted apps.
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种 Django 支持的五种标准数据库类型之外的数据库类型，我们将提供一个示例。由微软开发的微软 SQL Server 数据库类型也是 MySQL
    的一个分支，并且目前在微软的企业数据库系统中得到广泛应用。许多系统今天都依赖于这种数据库类型，它通常与 Azure 托管的应用程序结合使用。
- en: 'Follow these steps to configure your Microsoft SQL Server database connection:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤配置你的微软 SQL Server 数据库连接：
- en: 'A Microsoft SQL Server database type can be established using the following
    connection settings:'
  id: totrans-388
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 可以使用以下连接设置建立微软 SQL Server 数据库类型：
- en: '[PRE89]'
  id: totrans-389
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE89]'
- en: 'This database type also requires installing the following packages and including
    them in your `requirements.txt` file. Depending on your setup, you may only need
    one or two of the following three packages; however, adding all three will not
    hurt either:'
  id: totrans-390
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此数据库类型还需要安装以下包，并将它们包含在你的 `requirements.txt` 文件中。根据你的设置，你可能只需要以下三个包中的一个或两个；然而，添加所有三个也不会有害：
- en: '[PRE90]'
  id: totrans-391
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE90]'
- en: Next, we will be installing the type used throughout the rest of this book,
    PostgreSQL.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将安装本书其余部分使用的类型，即 PostgreSQL。
- en: PostgreSQL
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PostgreSQL
- en: '**PostgreSQL** has become the go-to database of choice for most Django developers
    when there is no specific reason to use any of the other choices. It is considered
    an RDBMS, which is a common tool for storing object-oriented data in tables that
    relate to other tables, known as objects. Its primary features includes **ANSI
    SQL Compliance** and extensibility, meaning it is a database type built with the
    idea of people being able to build onto it. It will run on every major operating
    system, such as Windows, Mac, and Linux, making it versatile.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '**PostgreSQL**已成为大多数Django开发者首选的数据库，除非有特定原因需要使用其他选择。它被认为是一种关系型数据库管理系统（RDBMS），这是一种在相关表中存储面向对象数据的常用工具，这些表被称为对象。其主要特性包括**ANSI
    SQL兼容性**和可扩展性，这意味着它是一种旨在让人们能够扩展的数据库类型。它将在每个主要操作系统上运行，如Windows、Mac和Linux，使其具有多功能性。'
- en: Standard PostgreSQL settings.py
  id: totrans-395
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 标准PostgreSQL settings.py
- en: If you are working with a normal Django project outside of Heroku, configure
    your PostgreSQL database connection.
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在与Heroku之外的正常Django项目工作，请配置您的PostgreSQL数据库连接。
- en: 'Add the following settings to your `settings.py` file:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下设置添加到您的`settings.py`文件中：
- en: '[PRE91]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: '[PRE92]'
  id: totrans-399
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: '[PRE93]'
  id: totrans-400
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: '[PRE94]'
  id: totrans-401
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: '[PRE95]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE95]'
- en: '[PRE96]'
  id: totrans-403
  prefs: []
  type: TYPE_PRE
  zh: '[PRE96]'
- en: '[PRE97]'
  id: totrans-404
  prefs: []
  type: TYPE_PRE
  zh: '[PRE97]'
- en: '[PRE98]'
  id: totrans-405
  prefs: []
  type: TYPE_PRE
  zh: '[PRE98]'
- en: '[PRE99]'
  id: totrans-406
  prefs: []
  type: TYPE_PRE
  zh: '[PRE99]'
- en: '[PRE100]'
  id: totrans-407
  prefs: []
  type: TYPE_PRE
  zh: '[PRE100]'
- en: '[PRE101]'
  id: totrans-408
  prefs: []
  type: TYPE_PRE
  zh: '[PRE101]'
- en: '[PRE102]'
  id: totrans-409
  prefs: []
  type: TYPE_PRE
  zh: '[PRE102]'
- en: Since we are working with Heroku, we cannot use the preceding settings even
    though we are still using PostgreSQL for each remote Heroku environment. The next
    section will provide us with the settings and tools specific to a Heroku environment,
    as well as providing the rest of the instructions on how to use PostgreSQL locally.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们正在使用Heroku，尽管我们仍然在每个远程Heroku环境中使用PostgreSQL，但我们不能使用前面的设置。下一节将为我们提供特定于Heroku环境的设置和工具，以及如何在本地上使用PostgreSQL的其余说明。
- en: Preparing PostgreSQL for Heroku
  id: totrans-411
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为Heroku准备PostgreSQL
- en: This section is dedicated to actually configuring each of your environments,
    whether using an IDE or command-line window or terminal. To install and use PostgreSQL,
    we will need to install it locally and then again in each of our remote environments.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 本节专门用于配置每个环境，无论您是使用IDE、命令行窗口还是终端。要安装和使用PostgreSQL，我们需要在本地安装它，然后在每个远程环境中再次安装。
- en: Installing PostgreSQL
  id: totrans-413
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装PostgreSQL
- en: This section will guide you through installing the PostgreSQL software needed
    on your local and remote machines.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 本节将指导您在本地和远程机器上安装所需的PostgreSQL软件。
- en: Local installation
  id: totrans-415
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 本地安装
- en: 'To use PostgreSQL, we will need to install a suite of software and drivers
    on each of our machines. In the Heroku dashboards, we will need to include add-ons
    to get PostgreSQL installed in those environments. To install it on your development
    machine, you can choose to download the installer for your platform directly from
    the publisher''s website, found here: [https://www.postgresql.org/download/](https://www.postgresql.org/download/).
    During installation, make note of the port that you set, the password that you
    create, and whether it asks you to add anything to your environment PATH variables,
    do so! It is always easier to check/enable these options during installation versus
    manually configuring them later.'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用PostgreSQL，我们需要在每台机器上安装一系列软件和驱动程序。在Heroku仪表板中，我们需要包括附加组件以在这些环境中安装PostgreSQL。要在您的开发机器上安装它，您可以选择直接从出版商的网站下载您平台的安装程序，网站地址为：[https://www.postgresql.org/download/](https://www.postgresql.org/download/)。在安装过程中，请注意您设置的端口号、创建的密码以及是否要求您将任何内容添加到环境PATH变量中，请这样做！与手动配置相比，在安装期间检查/启用这些选项总是更容易。
- en: 'During installation, the installer will ask whether you want to install any
    development tools, such as database command-line tools or a database management
    tool. Select **PgAdmin** during the installation of your PostgreSQL drivers; we
    will be using this tool to demonstrate several examples in this chapter. The PgAdmin
    management tool is used to access and view the database table structures and the
    data within them. PgAdmin is also compatible with every major operating system,
    and it can be downloaded and installed separately from the PostgreSQL installation;
    it can be found on their website here: [https://www.pgadmin.org/download/](https://www.pgadmin.org/download/).'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装过程中，安装程序将询问您是否想要安装任何开发工具，例如数据库命令行工具或数据库管理工具。在安装您的PostgreSQL驱动程序时选择**PgAdmin**；我们将使用此工具在本章中演示几个示例。PgAdmin管理工具用于访问和查看数据库表结构及其中的数据。PgAdmin也与每个主要操作系统兼容，并且可以从PostgreSQL安装中单独下载和安装；您可以在他们的网站上找到它：[https://www.pgadmin.org/download/](https://www.pgadmin.org/download/)。
- en: 'In the `.env` file found in the local repository that we created earlier, replace
    `DATABASE_URL=sqlite:///db.sqlite3` with the following value:'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前创建的本地存储库中找到的`.env`文件中，将`DATABASE_URL=sqlite:///db.sqlite3`替换为以下值：
- en: '[PRE103]'
  id: totrans-419
  prefs: []
  type: TYPE_PRE
  zh: '[PRE103]'
- en: '[PRE104]'
  id: totrans-420
  prefs: []
  type: TYPE_PRE
  zh: '[PRE104]'
- en: Replace the `your_password` placeholder with the password that you entered during
    your installation of PostgreSQL and PgAdmin. Replace any other placeholders as
    needed. The username is usually `postgres` by default, but this can be changed
    to something else during installation. We will need to work with a database management
    tool, PgAdmin, to create a local database before we can actually run the project
    now. Even if you used the Visual Studio IDE earlier to create your project, it
    will now be broken.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 将`your_password`占位符替换为您在安装PostgreSQL和PgAdmin时输入的密码。如有需要，替换任何其他占位符。默认情况下，用户名通常是`postgres`，但在安装过程中可以更改为其他名称。在我们可以实际运行项目之前，我们需要使用数据库管理工具PgAdmin创建本地数据库。即使您之前使用Visual
    Studio IDE创建项目，现在也会出现错误。
- en: There is a file called `example.env` provided with the code of this book that
    you can use as a reference to make sure your file consists of the proper settings
    for our software stack.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 本书代码附带了一个名为`example.env`的文件，您可以将其用作参考，以确保您的文件包含适合我们软件堆栈的正确设置。
- en: Remote installation – Heroku dashboard
  id: totrans-423
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程安装 – Heroku仪表板
- en: 'In Heroku, we have to add PostgreSQL one at a time to all three of our remote
    environments. There are two ways to do this: through the Heroku dashboard or the
    Heroku CLI. We will demonstrate both ways. Navigate to the Heroku dashboard, found
    here: [https://dashboard.heroku.com/apps](https://dashboard.heroku.com/apps).
    We should see all three environments, also known as Heroku apps. Click on each
    app and navigate to the `Heroku Postgres` into the search field provided. Next,
    it will ask you what plan to choose; you can use the free plan called **Hobby-Dev**,
    which is what will be used for the demonstrations in this book. Later, you can
    decide whether upgrading and paying for a new plan is what you need. For more
    technical needs, these plans include support for increased traffic, the number
    of connections at one time, the amount of RAM, encryption measures, added security,
    and so much more. Visit their plans page found here to learn more about what they
    offer: [https://elements.heroku.com/addons/heroku-postgresql](https://elements.heroku.com/addons/heroku-postgresql).'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 在Heroku中，我们必须逐个将PostgreSQL添加到我们所有的三个远程环境中。有两种方法可以做到这一点：通过Heroku仪表板或Heroku CLI。我们将演示这两种方法。导航到以下位置的Heroku仪表板：[https://dashboard.heroku.com/apps](https://dashboard.heroku.com/apps)。我们应该看到所有三个环境，也称为Heroku应用。点击每个应用，并在提供的搜索字段中导航到`Heroku
    Postgres`。接下来，它将询问您选择哪种计划；您可以使用名为**Hobby-Dev**的免费计划，这是本书演示中将要使用的计划。稍后，您可以决定是否升级并支付新的计划费用。对于更技术性的需求，这些计划包括增加流量支持、同时连接数、RAM量、加密措施、增加安全性以及更多。您可以访问他们的计划页面了解更多他们提供的内容：[https://elements.heroku.com/addons/heroku-postgresql](https://elements.heroku.com/addons/heroku-postgresql)。
- en: 'If successful, you will see that Heroku automatically created a **DATABASE_URL**
    configuration variable for us. This variable can be found in your Heroku dashboard
    by going to the **Settings** tab, then scrolling down on the page, under **Config
    Vars**, and it can be found after clicking **Reveal Config Vars**. The following
    screenshot also shows us that the same **SECRET_KEY** variable that we created
    using the CLI earlier in this chapter can also be found here. Any other sensitive
    environment variables can be created the same way and found here. Clicking the
    **Add** button eliminates the need to use the CLI to create an environment variable
    operation:'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，您将看到Heroku为我们自动创建了一个**DATABASE_URL**配置变量。您可以通过转到**设置**选项卡，然后在页面下方滚动到**配置变量**下找到这个变量。点击**显示配置变量**后，它也会出现。以下截图还显示，我们之前在本章中使用的CLI创建的相同**SECRET_KEY**变量也可以在这里找到。任何其他敏感的环境变量都可以以相同的方式创建并在这里找到。点击**添加**按钮可以消除使用CLI创建环境变量操作的需求：
- en: '![Figure 2.9 – Heroku – DATABASE_URL'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.9 – Heroku – DATABASE_URL'
- en: '](img/Figure_2.09_B17243.jpg)'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.09_B17243.jpg)'
- en: Figure 2.9 – Heroku – DATABASE_URL
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.9 – Heroku – DATABASE_URL
- en: Let's walk through installing PostgreSQL with the Heroku CLI instead of the
    Heroku dashboard next.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过使用Heroku CLI而不是Heroku仪表板来安装PostgreSQL。
- en: Remote installation – Heroku CLI
  id: totrans-430
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 远程安装 – Heroku CLI
- en: 'Using the Heroku CLI, we first need to log into our account in the terminal
    or command-line window. The following examples show how to install PostgreSQL
    on each of our remote environments, starting with production:'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Heroku CLI，我们首先需要在终端或命令行窗口中登录我们的账户。以下示例显示了如何在我们的每个远程环境中安装 PostgreSQL，从生产环境开始：
- en: '[PRE105]'
  id: totrans-432
  prefs: []
  type: TYPE_PRE
  zh: '[PRE105]'
- en: 'We have to specify the randomly generated app name that Heroku gave us when
    we created these environments. If we need to specify the version of PostgreSQL
    that we want to use, we can do that with the following example. Without specifying
    a version number, the latest version available will be used:'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须指定 Heroku 在我们创建这些环境时为我们生成的随机应用名称。如果我们需要指定我们想要使用的 PostgreSQL 版本，我们可以使用以下示例。如果不指定版本号，将使用可用的最新版本：
- en: '[PRE106]'
  id: totrans-434
  prefs: []
  type: TYPE_PRE
  zh: '[PRE106]'
- en: 'Instead of going to your Heroku dashboard to view these variables, executing
    the following commands will also display a list of the variables that exist for
    each environment. Replace the app name for each of the following examples with
    your Heroku app name:'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是去您的 Heroku 仪表板查看这些变量，执行以下命令也会显示每个环境存在的变量列表。将以下示例中的每个应用名称替换为您自己的 Heroku 应用名称：
- en: '[PRE107]'
  id: totrans-436
  prefs: []
  type: TYPE_PRE
  zh: '[PRE107]'
- en: Using the PgAdmin tool
  id: totrans-437
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 PgAdmin 工具
- en: PgAdmin is the database management tool that we are going to use to manage all
    local and remote databases, as well as creating the local database that we need
    to connect to. This tool should have been installed earlier in the *Installing
    PostgreSQL* subsection. If it has not been installed, please revisit that subsection
    for more information.
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: PgAdmin 是我们将要使用的数据库管理工具，用于管理所有本地和远程数据库，以及创建我们需要连接的本地数据库。这个工具应该在 *安装 PostgreSQL*
    子节中更早地安装过。如果没有安装，请重新查看该子节以获取更多信息。
- en: Creating a local database
  id: totrans-439
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建本地数据库
- en: Within the `postgres`. The database name I have given to my local database is
    `local_postgresql` when referenced in code examples later.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `postgres`。在代码示例中引用我的本地数据库时，我给定的数据库名称是 `local_postgresql`。
- en: '![Figure 2.10 – PgAdmin – creating a local database'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.10 – PgAdmin – 创建本地数据库'
- en: '](img/Figure_2.10_B17243.jpg)'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.10_B17243.jpg)'
- en: Figure 2.10 – PgAdmin – creating a local database
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.10 – PgAdmin – 创建本地数据库
- en: Next, we will connect to a remote database.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将连接到远程数据库。
- en: Connecting to a remote database
  id: totrans-445
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接到远程数据库
- en: For each remote database, we need to add a new server connection inside of the
    PgAdmin tool.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个远程数据库，我们都需要在 PgAdmin 工具中添加一个新的服务器连接。
- en: 'Follow these steps to connect to a remote database:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤连接到远程数据库：
- en: 'Start by gathering some information from your Heroku account first. In your
    Heroku dashboard, under each Heroku app, navigate to the **Resources** tab and,
    under **Add-ons**, click on the **opens in a new tab** icon, as depicted in the
    following screenshot:'
  id: totrans-448
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先从您的 Heroku 账户收集一些信息。在您的 Heroku 仪表板中，在每个 Heroku 应用下，导航到 **资源** 选项卡，并在 **附加组件**
    下，点击如下截图所示的 **在新标签页中打开** 图标：
- en: '![Figure 2.11 – Heroku – opening a database in a new tab'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.11 – Heroku – 在新标签页中打开数据库'
- en: '](img/Figure_2.11_B17243.jpg)'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.11_B17243.jpg)'
- en: Figure 2.11 – Heroku – opening a database in a new tab
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.11 – Heroku – 在新标签页中打开数据库
- en: 'In the new browser tab that opens, navigate to the **Settings** tab and make
    note of the information that is provided. The highlighted fields in the following
    screenshot are the important pieces that we will need to establish a connection
    inside the PgAdmin tool. Make note of them:'
  id: totrans-452
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新打开的浏览器标签页中，导航到 **设置** 选项卡，并记下提供的信息。以下截图中的高亮字段是我们将在 PgAdmin 工具内部建立连接所需的重要信息。请记下它们：
- en: '![Figure 2.12 – Heroku – database information'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.12 – Heroku – 数据库信息'
- en: '](img/Figure_2.12_B17243.jpg)'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.12_B17243.jpg)'
- en: Figure 2.12 – Heroku – database information
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.12 – Heroku – 数据库信息
- en: 'Open PgAdmin and from the top navigation bar of this app, under the **Object**
    tab, select **Create** | **Server**. In the window that opens, under the **General**
    tab, enter any name of your choice. This is to name your server connections for
    local reference only. Name them so that you know which environment is which, as
    shown in the following screenshot:'
  id: totrans-456
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开 PgAdmin，并从该应用的顶部导航栏中，在 **对象** 选项卡下，选择 **创建** | **服务器**。在打开的窗口中，在 **常规** 选项卡下，输入您选择的任何名称。这是为了仅用于本地参考来命名您的服务器连接。命名它们，以便您知道哪个环境是哪个，如下面的截图所示：
- en: '![Figure 2.13 – PgAdmin – Create - Server'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.13 – PgAdmin – 创建 - 服务器'
- en: '](img/Figure_2.13_B17243.jpg)'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.13_B17243.jpg)'
- en: Figure 2.13 – PgAdmin – Create - Server
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.13 – PgAdmin – 创建 - 服务器
- en: 'This task only creates your server connection inside the PgAdmin tool; it is
    not creating the database server itself. Using the information that was found
    previously in *Figure 2.12*, under the **Connection** tab, fill in the corresponding
    fields, as highlighted in the following screenshot:'
  id: totrans-460
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此任务仅在PgAdmin工具中创建您的服务器连接；它并不是创建数据库服务器本身。使用在*图2.12*中找到的信息，在**连接**选项卡下填写相应的字段，如下面的截图所示：
- en: '![Figure 2.14 – PgAdmin – creating a server connection'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.14 – PgAdmin – 创建服务器连接'
- en: '](img/Figure_2.14_B17243.jpg)'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.14_B17243.jpg)'
- en: Figure 2.14 – PgAdmin – creating a server connection
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.14 – PgAdmin – 创建服务器连接
- en: Replace the value in the field labeled **Maintenance database** with the database
    name provided by Heroku; do the same for **Username**.
  id: totrans-464
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将标记为**维护数据库**的字段中的值替换为Heroku提供的数据库名称；对**用户名**也做同样的操作。
- en: 'If successful, you will now see your new server connection in the **Browser**
    panel of the **PgAdmin** app. The **Browser** panel is often found on the left-hand
    side of the PgAdmin program. Since we are using the free plan called **Hobby-Dev**,
    we will see dozens and dozens of other databases in this list. All but one will
    be grayed out, just like in the following screenshot:'
  id: totrans-465
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果成功，您现在将在**PgAdmin**应用的**浏览器**面板中看到您的新服务器连接。**浏览器**面板通常位于PgAdmin程序的左侧。由于我们使用的是名为**Hobby-Dev**的免费计划，我们将在这个列表中看到成百上千的其他数据库。除了一个之外，所有其他数据库都将被灰色显示，就像以下截图所示：
- en: '![Figure 2.15 – PgAdmin – viewing tables'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: '![图2.15 – PgAdmin – 查看表'
- en: '](img/Figure_2.15_B17243.jpg)'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_2.15_B17243.jpg)'
- en: Figure 2.15 – PgAdmin – viewing tables
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: 图2.15 – PgAdmin – 查看表
- en: The one database that is colored is your database name, displayed in *Figure
    2.12*. Expand your database and you should be able to gain access; attempting
    to open any other database will result in **permission denied**. You can avoid
    a shared plan like this by purchasing a dedicated database hosting plan that Heroku
    does offer, which is much more secure.
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 在*图2.12*中标记为颜色的数据库就是您的数据库名称，如*图2.12*所示。展开您的数据库，您应该能够访问；尝试打开任何其他数据库将导致**权限被拒绝**。您可以通过购买Heroku提供的专用数据库托管计划来避免这种共享计划，这要安全得多。
- en: Now, push your file changes to your Git development repository and you should
    see a successful deployment to your Heroku app.
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，将您的文件更改推送到您的Git开发仓库，您应该会看到您的Heroku应用成功部署。
- en: Next, we will adjust our environment connection settings for use with PostgreSQL
    locally.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将调整我们的环境连接设置以在本地使用PostgreSQL。
- en: Environment connection settings
  id: totrans-472
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 环境连接设置
- en: For our Heroku configuration, we need to define a default database using the
    following example, in your `settings.py` file, instead of using a standard PostgreSQL
    connection setting.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的Heroku配置，我们需要在`settings.py`文件中使用以下示例定义一个默认数据库，而不是使用标准的PostgreSQL连接设置。
- en: 'To configure PostgreSQL for use with Heroku and local use, follow these steps:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 要为Heroku和本地使用配置PostgreSQL，请按照以下步骤操作：
- en: 'Change your `DATABASES` variable to use the code shown here:'
  id: totrans-475
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将您的`DATABASES`变量更改为使用以下代码：
- en: '[PRE108]'
  id: totrans-476
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE108]'
- en: You can also increase the length of time allowed for established database connections
    to exist by adjusting the value of `conn_max_age`. The default value is `600`
    seconds, which equates to 10 minutes. Since the `dj_database_url` module will
    try to log into Heroku using a `settings.py` file.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以通过调整`conn_max_age`的值来增加已建立数据库连接允许存在的时长。默认值是`600`秒，相当于10分钟。由于`dj_database_url`模块将尝试使用`settings.py`文件登录Heroku。
- en: 'Place the following code under the `django_heroku.settings(locals())` line
    that we placed at the bottom of this file earlier; it should look like the following
    example:'
  id: totrans-478
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在我们之前在这个文件底部放置的`django_heroku.settings(locals())`行下面放置以下代码；它应该看起来像以下示例：
- en: '[PRE109]'
  id: totrans-479
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE109]'
- en: That's it. Let's build our initial table structures locally next.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 就这些了。让我们接下来在本地构建初始表结构。
- en: Building initial table structures
  id: totrans-481
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 构建初始表结构
- en: Next, we need to create the table structures that relate to the models within
    a project and any third-party packages that we installed. These operations can
    be performed using the Visual Studio IDE or through a terminal or command-line
    window. Choose your method from the following.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要创建与项目中的模型和任何第三方包相关的表结构。这些操作可以使用Visual Studio IDE或通过终端或命令行窗口执行。从以下选项中选择您的方法。
- en: Using the IDE
  id: totrans-483
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用IDE
- en: 'In your IDE, you need to perform three actions: make migrations, migrate, and
    create a superuser, in that order. Within the Visual Studio IDE, go to your **Solution
    Explorer** and right-click on your project name. In the menu that pops up, under
    **Python**, select **Django Make Migrations** and then **Django Migrate…**, as
    shown in the following screenshot. Then, select the **Django Create Superuser**
    operation:'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的 IDE 中，你需要执行三个操作：创建迁移、迁移和创建超级用户，按照这个顺序。在 Visual Studio IDE 中，转到你的 **解决方案资源管理器**，然后右键单击你的项目名称。在弹出的菜单中，在
    **Python** 下选择 **Django 创建迁移**，然后选择 **Django 迁移…**，如图所示。然后，选择 **Django 创建超级用户**
    操作：
- en: '![Figure 2.16 – Visual Studio – manage.py commands'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.16 – Visual Studio – manage.py 命令](img/Figure_2.16_B17243.jpg)'
- en: '](img/Figure_2.16_B17243.jpg)'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 2.16 – Visual Studio – manage.py 命令](img/Figure_2.16_B17243.jpg)'
- en: Figure 2.16 – Visual Studio – manage.py commands
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 图 2.16 – Visual Studio – manage.py 命令
- en: Next, we will use the command-line-driven approach.
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将使用命令行驱动的方法。
- en: Commands – makemigrations and migrate
  id: totrans-489
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令 – makemigrations 和 migrate
- en: 'If you are not using an IDE or decide to run your project outside of the IDE,
    these commands are for you. Make sure you have activated your virtual environment
    and you are in the same directory as your `manage.py` file. Using the terminal
    or command-line window, create your table structures in your local database by
    using the following two examples:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有使用 IDE 或者决定在 IDE 之外运行你的项目，这些命令就是为你准备的。确保你已经激活了你的虚拟环境，并且你位于与你的 `manage.py`
    文件相同的目录中。使用终端或命令行窗口，通过以下两个示例在你的本地数据库中创建你的表结构：
- en: '[PRE110]'
  id: totrans-491
  prefs: []
  type: TYPE_PRE
  zh: '[PRE110]'
- en: Since we have not created any models yet, these two commands will only create
    the default `User` `Auth` and other Django management models that come as standard
    with all Django installations.
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们还没有创建任何模型，这两个命令将只创建默认的 `User` `Auth` 和其他所有 Django 安装的标准 Django 管理模型。
- en: Command – createsuperuser
  id: totrans-493
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 命令 – createsuperuser
- en: 'The first time we create database tables, we are required to create a superuser
    so that we can access the admin panel successfully. Additional users can be created
    from within the Django admin panel itself or by executing the command again, as
    shown in the following code snippet. Run this command now to create a superuser:'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: 第一次创建数据库表时，我们需要创建一个超级用户，这样我们才能成功访问管理面板。额外的用户可以在 Django 管理面板内部创建，或者通过再次执行以下代码片段中的命令来创建。现在运行此命令以创建超级用户：
- en: '[PRE111]'
  id: totrans-495
  prefs: []
  type: TYPE_PRE
  zh: '[PRE111]'
- en: Next, when you are prompted to do so, enter the username, email address, and
    password that it will ask you to provide. Remember this information as you will
    need it to access the Django admin site, introduced in [*Chapter 6*](B17243_06_ePub.xhtml#_idTextAnchor190),
    *Exploring the Django Admin Site*.
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，当被提示这样做时，输入它要求你提供的用户名、电子邮件地址和密码。记住这些信息，因为你将需要它们来访问在 [*第 6 章*](B17243_06_ePub.xhtml#_idTextAnchor190)
    中介绍的 Django 管理站点，*探索 Django 管理站点*。
- en: Remote data migrations
  id: totrans-497
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 远程数据迁移
- en: Performing **remote data migrations** means running the same migration commands
    that we executed for a local database except on each remote database.
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: 执行 **远程数据迁移**意味着运行与我们为本地数据库执行的相同迁移命令，但针对每个远程数据库。
- en: 'To run the migration commands manually for each of the remote environments
    that we created, we need to activate the **Bash shell** for each one first. Follow
    these steps to do that:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 为了手动为每个我们创建的远程环境运行迁移命令，我们首先需要为每个环境激活 **Bash shell**。按照以下步骤进行操作：
- en: 'Log into your Heroku account and then execute each of the following commands,
    one at a time, for each environment that exists. Note that after each shell that
    is started, you should follow these steps before starting the next shell:'
  id: totrans-500
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录你的 Heroku 账户，然后逐个执行以下命令，每个环境一次。注意，在启动每个 shell 之后，你应该遵循以下步骤，然后再启动下一个 shell：
- en: '[PRE112]'
  id: totrans-501
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE112]'
- en: 'For each environment that you activated a Bash shell for, once it has finished
    loading, you will see your command line now starts with the dollar sign character
    (`$`). You will also notice that no matter what directory you were in before,
    it will put you in the same directory that your `.git` folder lives in now. Navigate
    to where your `manage.py` file is located using the `cd` command and then run
    the following migration commands just like we did for a local database:'
  id: totrans-502
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于每个你为它激活了 Bash shell 的环境，一旦它加载完成，你会看到你的命令行现在以美元符号字符（`$`）开头。你也会注意到，无论你之前在哪个目录中，它都会把你带到你的
    `.git` 文件夹现在所在的目录。使用 `cd` 命令导航到你的 `manage.py` 文件所在的位置，然后运行以下迁移命令，就像我们为本地数据库所做的那样：
- en: '[PRE113]'
  id: totrans-503
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE113]'
- en: Type `exit` and wait for it to escape each shell and proceed to the next environment.
  id: totrans-504
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `exit` 并等待它从每个 shell 中退出，然后进入下一个环境。
- en: Keep in mind that all these commands do is migrate your table structures; they
    don't actually migrate data found within those tables.
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，所有这些命令所做的只是迁移您的表结构；它们实际上并没有迁移那些表中的数据。
- en: Next, we will practice using the push/pull operations provided by Heroku to
    migrate data and table structures for us, eliminating the need to run these commands
    from within the Bash shell.
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将练习使用Heroku提供的推送/拉取操作来迁移数据和表结构，从而无需在Bash shell中运行这些命令。
- en: Heroku database push/pull operations
  id: totrans-507
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heroku数据库推送/拉取操作
- en: Heroku has built-in functionality to push and pull data to and from the database
    indicated. These commands will allow us to merge data and table structures. With
    this, we can run the `makemigrations` and `migrate` commands locally, populate
    our database with sample data, and then push it to our other environments, eliminating
    the need to run these commands individually on each remote environment. You should
    be very cautious of performing these tasks as it is entirely possible to override
    or experience a complete loss of data when the wrong operation is executed. The
    good news is that whenever any of these commands are executed, Heroku will automatically
    generate a data backup of the current state of your database before any action
    is performed, allowing you to reverse any action that has been done.
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku内置了将数据推送到和从指定数据库的功能。这些命令将允许我们合并数据和表结构。有了这个，我们可以在本地运行`makemigrations`和`migrate`命令，用示例数据填充我们的数据库，然后将它推送到我们的其他环境，从而无需在每个远程环境中单独运行这些命令。您应该非常小心地执行这些任务，因为执行错误的操作时，完全有可能覆盖或完全丢失数据。好消息是，每当执行这些命令时，Heroku都会自动生成数据库当前状态的数据备份，让您能够撤销任何已执行的操作。
- en: 'Follow these steps to perform your operations:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行您的操作：
- en: To visibly see the changes that are happening, navigate to the `push` or `pull`
    operation that includes adding or removing tables.
  id: totrans-510
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要直观地看到正在发生的变化，请导航到包含添加或删除表的`push`或`pull`操作。
- en: 'Using the information that we gathered from the page in *Figure 2.12*, execute
    the following command to push your database, including a parameter to indicate
    which environment we are pushing to:'
  id: totrans-511
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们从*图2.12*页面收集的信息，执行以下命令以推送您的数据库，包括一个参数来指示我们正在推送到的环境：
- en: '[PRE114]'
  id: totrans-512
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE114]'
- en: Make sure you use the username and password that were specified when creating
    your local PostgreSQL database. Replace `postgresql-tetrahedral-62413` with the
    contents of label number `--app` parameter. `local_postgresql` is the name I used
    for my local database.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您使用的是创建本地PostgreSQL数据库时指定的用户名和密码。将`postgresql-tetrahedral-62413`替换为`--app`参数标签的内容。`local_postgresql`是我为我的本地数据库使用的名称。
- en: You should now be able to see a total of 10 tables in the `Auth` and Django
    management tables that were created when we first ran the migration commands locally.
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在应该能够看到`Auth`和Django管理表中有总共10个表，这些表是在我们首次在本地运行迁移命令时创建的。
- en: Note for Windows users
  id: totrans-515
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Windows用户注意事项
- en: 'Windows users might have difficulty executing the preceding command. Make sure
    the path to your `bin` folder is included in your Windows environment variables
    settings. That folder is usually found at `C:\Program Files\PostgreSQL\##\bin`
    on a Windows 10 installation, where `##` is the numeric version number of PostgreSQL
    that is installed on your machine. This will get the `heroku pg:` command and
    the `psql` command to work from within your CLI. A restart of your CLI or operating
    system is usually recommended after making changes to your environment variables.
    The following commands will set variables that are used during the time that your
    CLI terminal window is open. Running them together on one line in Windows will
    usually give you errors. When these variables are set and your window remains
    open, you will be able to run your `push` or `pull` commands as you need them:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: Windows用户可能难以执行前面的命令。请确保您的Windows环境变量设置中包含了`bin`文件夹的路径。该文件夹通常位于Windows 10安装的`C:\Program
    Files\PostgreSQL\##\bin`，其中`##`是您机器上安装的PostgreSQL的数字版本号。这将使`heroku pg:`命令和`psql`命令在您的CLI中正常工作。在更改环境变量后，通常建议重启您的CLI或操作系统。以下命令将在您的CLI终端窗口打开期间设置变量。在Windows中将它们一起运行在一行上通常会导致错误。当这些变量设置好并且您的窗口保持打开状态时，您将能够根据需要运行您的`push`或`pull`命令：
- en: '[PRE115]'
  id: totrans-517
  prefs: []
  type: TYPE_PRE
  zh: '[PRE115]'
- en: 'If we wanted to pull data instead of push data, that command is just as simple
    as changing `push` to `pull`, as depicted in the following example:'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想要拉取数据而不是推送数据，那么这个命令与将`push`改为`pull`一样简单，如下面的示例所示：
- en: '[PRE116]'
  id: totrans-519
  prefs: []
  type: TYPE_PRE
  zh: '[PRE116]'
- en: 'For a complete guide on how to use Heroku command-line operations pertaining
    to PostgreSQL, view their knowledge base article here: [https://devcenter.heroku.com/articles/heroku-postgresql](https://devcenter.heroku.com/articles/heroku-postgresql).'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看有关如何使用Heroku命令行操作针对PostgreSQL的完整指南，请查看他们的知识库文章：[https://devcenter.heroku.com/articles/heroku-postgresql](https://devcenter.heroku.com/articles/heroku-postgresql)。
- en: Summary
  id: totrans-521
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: 'By now, we have done a lot of work but we still haven''t really begun building
    any Django apps for a project yet. All of the work done up until now can be thought
    of as the preliminary work necessary before handing over a project to the development
    team. Two methods of creating a project have been provided: one method using a
    tool to help streamline production, called an IDE, and another method using commands
    in a terminal or command-line window. We are tracking a solution file in the repository
    so that we can share it within a team but we are not tracking personal settings
    and debug files that are automatically created when running a project. Developers
    who are not using an IDE can still work with the code base even when sharing project
    configuration files with those who are using an IDE. After we did that, we configured
    Django to work with the host provider Heroku on both the project level and the
    database level. Finally, we activated tools that allow developers to view and
    edit data inside of a local or remote database.'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经做了很多工作，但我们还没有真正开始为项目构建任何Django应用。到目前为止所做的一切工作都可以被视为在将项目交给开发团队之前必要的初步工作。已经提供了两种创建项目的方法：一种方法使用一个工具来帮助简化生产，称为IDE，另一种方法使用终端或命令行窗口中的命令。我们在仓库中跟踪一个解决方案文件，以便我们可以在团队内部共享它，但我们不会跟踪在运行项目时自动创建的个人设置和调试文件。即使与使用IDE的人共享项目配置文件，不使用IDE的开发者仍然可以与代码库一起工作。在那之后，我们在项目级别和数据库级别配置了Django以与主机提供商Heroku一起工作。最后，我们激活了允许开发者在本地或远程数据库中查看和编辑数据的工具。
- en: You can now hand this solution over to your team and begin delegating tasks
    to each member within that team. In the next chapter, we will start creating models
    that build tables inside a database. These models can be thought of as the elements
    that construct the rest of the chapters after [*Chapter 3*](B17243_03_ePub.xhtml#_idTextAnchor077),
    *Models, Relations, and Inheritance*, in this book.
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以将这个解决方案交给你的团队，并开始将任务委派给该团队中的每个成员。在下一章中，我们将开始创建在数据库内部构建表的模型。这些模型可以被视为在本书中[*第3章*](B17243_03_ePub.xhtml#_idTextAnchor077)，“模型、关系和继承”之后构建其余章节的元素。
