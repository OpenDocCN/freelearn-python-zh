["```py\n    from m5stack import *\n    from m5ui import *\n    from uiflow import *\n    from m5mqtt import M5mqtt\n    import time\n    rgb.setColorAll(0x000000)\n    def cb_IoTAlarm(topic_data):\n        if topic_data == 'motion':\n            rgb.setColorAll(0xff0000)\n            wait(5)\n        rgb.setColorAll(0x00cccc)\n    def buttonA_pressFor():\n        m5mqtt.publish(str('IoTAlarm'), str('buzzer'), 0)\n    btnA.pressFor(1, buttonA_pressFor)\n    m5mqtt = M5mqtt(\n        'IoTMatrix',\n        'broker.mqtthq.com',\n        1883,\n        '',\n        '',\n        300\n    )\n    m5mqtt.subscribe(str('IoTAlarm'), cb_IoTAlarm)\n    rgb.setColorAll(0x00cccc)\n    m5mqtt.start()\n    ```", "```py\n    cb_IoTAlarm(topic_data). This does the following:1.  Checks if the incoming message under the `IoTAlarm` topic is `motion`.2.  If `motion` is received, the RGB LED color is set to red (`0xff0000`) for 5 seconds.3.  Afterward, the RGB LED color is reset to a cyan color (`0x00cccc`).\n    ```", "```py\n    m5mqtt.subscribe(str('IoTAlarm'), cb_IoTAlarm)\n    ```", "```py\n    rgb.setColorAll(0x00cccc)\n    ```", "```py\n    m5mqtt.start()\n    ```", "```py\n    from machine import Pin, PWM\n    import utime\n    BUZZER_PIN = 16\n    buzzer = PWM(Pin(BUZZER_PIN))\n    def play_notes(\n        notes = [\n            (330, 0.5),  # E4 for 0.5 seconds\n            (262, 0.5),  # C4 for 0.5 seconds\n            (330, 0.5),  # E4 for 0.5 seconds\n            (392, 0.5),  # G4 for 0.5 seconds\n            (349, 0.5),  # F4 for 0.5 seconds\n            (262, 1),  # C4 for 0.5 seconds\n        ]\n        ):\n        for freq, duration in notes:\n            buzzer.freq(freq)\n            buzzer.duty_u16(32768)\n            utime.sleep(duration)\n        buzzer.duty_u16(0)\n    ```", "```py\n    from machine import Pin, I2C\n    import utime\n    import network\n    from umqtt.simple import MQTTClient\n    from buzzer import play_notes\n    import ssd1306\n    import _thread\n    ```", "```py\n    SSID = \"MyWiFiNetwork\"\n    WIFI_PASSWORD = \"xxxxxxxxxxxxx\"\n    led = machine.Pin(15, machine.Pin.OUT)\n    button = Pin(0, Pin.IN, Pin.PULL_UP)\n    switch = Pin(1, Pin.IN, Pin.PULL_UP)\n    previous_switch_state = switch.value()\n    MQTT_SERVER = \"codfish.rmq.cloudamqp.com\"\n    MQTT_PORT = 1883\n    USERNAME = \"xxxxxx\"\n    PASSWORD = \"xxxxxx\"\n    DEVICE_ID = \"IoTAlarmSystem\"\n    last_message = \"\"\n    i2c = I2C(0, scl=Pin(9), sda=Pin(8))\n    display = ssd1306.SSD1306_I2C(128, 64, i2c)\n    mqtt_client = None\n    ```", "```py\n    def on_message_received(topic, msg):\n        global last_message\n        print(\"Received:\", topic, msg)\n        if topic == b\"IoTAlarm\":\n            last_message = msg.decode()\n            if msg == b\"buzzer\":\n                play_notes()\n    ```", "```py\n    def connect_wifi():\n        wlan = network.WLAN(network.STA_IF)\n        wlan.active(True)\n        if not wlan.isconnected():\n            print('Connecting to WiFi...')\n            wlan.connect(SSID, WIFI_PASSWORD)\n            while not wlan.isconnected():\n                led.on()\n                utime.sleep(0.5)\n                led.off()\n                utime.sleep(0.5)\n            led.on()\n            print('WiFi connected, IP:', wlan.ifconfig()[0])\n    ```", "```py\n    def connect_mqtt():\n        global mqtt_client\n        while mqtt_client is None:\n            try:\n                print('Trying to connect to MQTT Server...')\n                mqtt_client = MQTTClient(\n                    DEVICE_ID, MQTT_SERVER, MQTT_PORT,\n                    USERNAME, PASSWORD\n                )\n                mqtt_client.set_callback(\n                              on_message_received)\n                mqtt_client.connect()\n                mqtt_client.subscribe(b\"IoTAlarm\")\n                print('MQTT connection established and subscribed to IoTAlarm')\n            except:\n                mqtt_client = None\n                print('Failed to connect, retrying...')\n                utime.sleep(5)\n    ```", "```py\n    def display_status():\n        global last_message\n        is_armed = False\n        while True:\n            display.fill(0)\n            if mqtt_client:\n                msg = \"MQTT Connected\"\n            else:\n                msg = \"MQTT waiting\"\n            display.text(msg, 0, 0)\n            if last_message == \"arm\":\n                is_armed = True\n            elif last_message == \"disarm\":\n                is_armed = False\n            if is_armed:\n                display.text(\"Status: Armed\", 0, 20)\n            else:\n                display.text(\"Status: Disarmed\", 0, 20)\n            display.text(\"Msg: \" + last_message, 0, 40)\n            display.show()\n            utime.sleep(5)\n    ```", "```py\n    def main():\n        global last_message, previous_switch_state\n        connect_wifi()\n        connect_mqtt()\n        button_start_time = None\n    ```", "```py\n        while True:\n            if button.value() == 0:\n                if button_start_time is None:\n                    button_start_time = utime.ticks_ms()\n            else:\n                if button_start_time is not None:\n                    button_elapsed_time = utime.ticks_diff(utime.ticks_ms(), button_start_time)\n                    if button_elapsed_time >= 1000:\n                        mqtt_client.publish(\n                            b\"IoTAlarm\",\n                            b\"arm\"\n                        )\n                        last_message = \"arm\"\n                    button_start_time = None\n            current_switch_state = switch.value()\n    ```", "```py\n    if current_switch_state != previous_switch_state:\n                mqtt_client.publish(\n                    b\"IoTAlarm\",\n                    b\"disarm\"\n                )\n                last_message = \"disarm\"\n            previous_switch_state = current_switch_state\n            try:\n                mqtt_client.check_msg()\n            except Exception as e:\n                print(\"Error checking MQTT message:\", str(e))\n                utime.sleep(5)\n            utime.sleep(0.1)\n    ```", "```py\n    _thread.start_new_thread(display_status, ())\n    ```", "```py\n    main()\n    ```"]