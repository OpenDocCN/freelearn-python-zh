["```py\n$ brew install httpd\n```", "```py\n$ sudo apt update\n$ sudo apt install python3-dev\n$ sudo apt install apache2 apache2-dev\n```", "```py\n$ pip install mod_wsgi\n```", "```py\nfrom my_app import app as application\n```", "```py\n$ mod_wsgi-express start-server wsgi.py --processes 4\n```", "```py\n$ sudo apt-get install nginx\n$ pip install pyuwsgi\n```", "```py\n    from my_app import app as application\n    ```", "```py\n    [uwsgi]\n    ```", "```py\n    http-socket    = :9090\n    ```", "```py\n    wsgi-file = /home/ubuntu/cookbook3/Chapter-11/wsgi.py\n    ```", "```py\n    processes   = 3\n    ```", "```py\n$ uwsgi --ini uwsgi.ini\n```", "```py\n    server {\n    ```", "```py\n      location / {\n    ```", "```py\n        include uwsgi_params;\n    ```", "```py\n        uwsgi_pass 0.0.0.0:9090;\n    ```", "```py\n      }\n    ```", "```py\n      location /static/uploads/ {\n    ```", "```py\n        alias /home/ubuntu/cookbook3/Chapter-\n    ```", "```py\n          11/flask_test_uploads/;\n    ```", "```py\n      }\n    ```", "```py\n    }\n    ```", "```py\n    $ sudo ln -s ~/cookbook3/Chapter-11/nginx-wsgi.conf /etc/nginx/sites-enabled/\n    ```", "```py\n    $ sudo unlink /etc/nginx/sites-enabled/default\n    ```", "```py\n    $ sudo systemctl reload nginx.service\n    ```", "```py\n$ pip install gunicorn\n$ pip install supervisor\n```", "```py\n    $ gunicorn -w 4 -b 0.0.0.0:8000 my_app:app\n    ```", "```py\n    $ mkdir etc\n    ```", "```py\n    $ echo_supervisord_conf > etc/supervisord.conf\n    ```", "```py\n    [program:flask_catalog]\n    ```", "```py\n    command=<path to virtual environment>/bin/gunicorn -w\n    ```", "```py\n      4 -b 0.0.0.0:8000 my_app:app\n    ```", "```py\n    directory=<path to application directory>\n    ```", "```py\n    user=someuser # some user with relevant permissions\n    ```", "```py\n    autostart=true\n    ```", "```py\n    autorestart=true\n    ```", "```py\n    stdout_logfile=/tmp/app.log\n    ```", "```py\n    stderr_logfile=/tmp/error.log\n    ```", "```py\n    $ supervisord\n    ```", "```py\n$ supervisorctl status\nflask_catalog           RUNNING   pid 112039, uptime 0:00:06\n```", "```py\n$ supervisorctl restart all\n```", "```py\n$ supervisorctl restart flask_catalog\n```", "```py\n$ pip install tornado\n```", "```py\nfrom tornado.wsgi import WSGIContainer\nfrom tornado.httpserver import HTTPServer\nfrom tornado.ioloop import IOLoop\nfrom my_app import app\nhttp_server = HTTPServer(WSGIContainer(app))\nhttp_server.listen(8000)\nIOLoop.instance().start()\n```", "```py\n$ python tornado_server.py\n```", "```py\n$ pip install boto3\n```", "```py\n        app.config['AWS_ACCESS_KEY'] = 'AWS Access Key'\n    ```", "```py\n        app.config['AWS_SECRET_KEY'] = 'AWS Secret Key'\n    ```", "```py\n        app.config['AWS_BUCKET'] = 'Name of AWS Bucket'\n    ```", "```py\n    import boto3\n    ```", "```py\nimage.save(os.path.join(current_app.config['UPLOAD_FOL\n  DER'], filename))\n```", "```py\n            session = boto3.Session(\n                aws_access_key_id=current_app\n                  .config['AWS_ACCESS_KEY'],\n                aws_secret_access_key=current_app\n                  .config['AWS_SECRET_KEY']\n            )\n            s3 = session.resource('s3')\n            bucket = s3.Bucket(current_app\n              .config['AWS_BUCKET'])\n            if bucket not in list(s3.buckets.all()):\n                bucket = s3.create_bucket(\n                    Bucket=current_app\n                      .config['AWS_BUCKET'],\n                    CreateBucketConfiguration={\n                        'LocationConstraint':\n                          'ap-south-1'\n                    },\n                )\n            bucket.upload_fileobj(\n                image, filename,\n                ExtraArgs={'ACL': 'public-read'})\n```", "```py\n        <img src=\"img/pre>\n\n    ```", "```py\n\n    ```", "```py\n\n    ```", "```py\n$ pip install newrelic\n```", "```py\n$ newrelic-admin generate-config <LICENSE-KEY> newrelic.ini\n```", "```py\n$ newrelic-admin validate-config newrelic.ini\n```", "```py\nimport newrelic.agent\nnewrelic.agent.initialize('newrelic.ini')\n```", "```py\n    $ pip install ddtrace\n    ```", "```py\n    $ DD_SERVICE=\"<your service name>\" DD_ENV=\"<your environment name>\" ddtrace-run python run.py\n    ```", "```py\n$ DD_SERVICE=\"flask-cookbook\" DD_ENV=\"stage\" DD_REMOTE_CONFIGURATION_ENABLED=false ddtrace-run python run.py\n```"]