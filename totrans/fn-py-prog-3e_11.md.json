["```py\n>>> from itertools import starmap, zip_longest \n>>> d = starmap(pow, zip_longest([], range(4), fillvalue=60)) \n>>> list(d) \n[1, 60, 3600, 216000]\n```", "```py\n>>> p = (3, 8, 29, 44) \n>>> pi = sum(starmap(truediv, zip(p, d))) \n>>> pi \n3.1415925925925925\n```", "```py\n>>> pi = sum(map(truediv, p, d)) \n>>> pi \n3.1415925925925925\n```", "```py\ndef semifact(n: int) -> int: \n    match n: \n        case 0 | 1: \n            return 1 \n        case 2: \n            return 2 \n        case _: \n            return semifact(n-2)*n\n```", "```py\n>>> from Chapter06.ch06_ex1 import fact \n>>> from itertools import count, takewhile \n>>> num = map(fact, count()) \n>>> den = map(semifact, (2*n+1 for n in count())) \n\n>>> terms = takewhile( \n... lambda t: t > 1E-10, map(truediv, num, den)) \n\n>>> round(float(2*sum(terms)), 8) \n3.14159265\n```", "```py\nsum = functools.partial(functools.reduce, operator.add)\n```", "```py\nprod = functools.partial(functools.reduce, operator.mul)\n```", "```py\nfact = lambda n: 1 if n < 2 else n * prod(range(1, n))\n```", "```py\nfrom bs4 import BeautifulSoup  # type: ignore[import] \nimport urllib.request \nfrom collections.abc import Iterator \n\ndef html_data_iter(url: str) -> Iterator[str]: \n    with urllib.request.urlopen(url) as page: \n        soup = BeautifulSoup(page.read(), ’html.parser’) \n        data = soup.html.body.table.table \n        for subtable in data.table: \n            for c in subtable.children: \n                yield c.text\n```", "```py\n>>> s7 = html_data_iter(\"http://www.tylervigen.com/view_correlation?id=7\")\n```", "```py\n>>> from toolz.itertoolz import partition, interleave \n\n>>> data_iter = partition(3, interleave(partition(12, s7))) \n>>> data = list(data_iter) \n\n>>> from pprint import pprint \n>>> pprint(data) \n[(’’, \n  ’Per capita consumption of cheese (US)Pounds (USDA)’, \n  ’Number of people who died by becoming tangled in their bedsheets Deaths (US) ’ \n  ’(CDC)’), \n (’2000’, ’29.8’, ’327’), \n (’2001’, ’30.1’, ’456’), \n (’2002’, ’30.5’, ’509’), \n (’2003’, ’30.6’, ’497’), \n (’2004’, ’31.3’, ’596’), \n (’2005’, ’31.7’, ’573’), \n (’2006’, ’32.6’, ’661’), \n (’2007’, ’33.1’, ’741’), \n (’2008’, ’32.7’, ’809’), \n (’2009’, ’32.8’, ’717’), \n (’’, ’’, ’’)]\n```", "```py\nfrom toolz.itertoolz import cons, drop  # type: ignore[import] \nfrom toolz.recipes import partitionby  # type: ignore[import] \n\nROW_COUNT = 0 \n\ndef row_counter(item: str) -> int: \n    global ROW_COUNT \n    rc = ROW_COUNT \n    if item == \"\": ROW_COUNT += 1 \n    return rc\n```", "```py\n>>> year_fixup = cons(\"year\", drop(1, s7)) \n>>> year, series_1, series_2, extra = list(partitionby(row_counter, year_fixup)) \n>>> data = list(zip(year, series_1, series_2)) \n\n>>> from pprint import pprint \n>>> pprint(data) \n[(’year’, \n  ’Per capita consumption of cheese (US)Pounds (USDA)’, \n  ’Number of people who died by becoming tangled in their bedsheets Deaths (US) ’ \n  ’(CDC)’), \n (’2000’, ’29.8’, ’327’), \n (’2001’, ’30.1’, ’456’), \n (’2002’, ’30.5’, ’509’), \n (’2003’, ’30.6’, ’497’), \n (’2004’, ’31.3’, ’596’), \n (’2005’, ’31.7’, ’573’), \n (’2006’, ’32.6’, ’661’), \n (’2007’, ’33.1’, ’741’), \n (’2008’, ’32.7’, ’809’), \n (’2009’, ’32.8’, ’717’), \n (’’, ’’, ’’)]\n```", "```py\nfrom toolz.itertoolz import cons, drop \nfrom toolz.recipes import partitionby \n\ndef make_samples(source: list[str]) -> list[dict[str, float]]: \n    # Drop the first \"\" and prepend \"year\" \n    year_fixup = cons(\"year\", drop(1, source)) \n    # Restructure to 12 groups of 3 \n    year, series_1, series_2, extra = list(partitionby(row_counter, year_fixup)) \n    # Drop the first and the (empty) last \n    samples = [ \n        {\"year\": int(year), \"series_1\": float(series_1), \"series_2\": float(series_2)} \n        for year, series_1, series_2 in drop(1, zip(year, series_1, series_2)) \n        if year \n    ] \n    return samples\n```", "```py\n>>> from toolz.dicttoolz import get_in \n>>> from Chapter04.ch04_ex4 import corr \n\n>>> samples = make_samples(s7) \n>>> s_1 = [get_in([’series_1’], s) for s in samples] \n>>> s_2 = [get_in([’series_2’], s) for s in samples] \n>>> round(corr(s_1, s_2), 6) \n0.947091\n```", "```py\n>>> from toolz.functoolz import curry \n>>> def some_model(a: float, b: float, x: float) -> float: \n...     return x**a * b \n\n>>> curried_model = curry(some_model) \n>>> cm_a = curried_model(1.0134) \n>>> cm_ab = cm_a(0.7724) \n>>> expected = cm_ab(1500) \n>>> round(expected, 2) \n1277.89\n```", "```py\n>>> from toolz.itertoolz import interleave, partition, drop \n>>> from toolz.functoolz import compose, curry \n>>> steps = [ \n...     curry(partition, 3), \n...     interleave, \n...     curry(partition, 12), \n... ] \n>>> xform = compose(*steps) \n>>> data = list(xform(s7)) \n\n>>> from pprint import pprint \n>>> pprint(data)  # doctest+ ELLIPSIS \n[(’’, \n  ’Per capita consumption of cheese (US) Pounds (USDA)’, \n  ’Number of people who died by becoming tangled in their bedsheets Deaths (US) ’ \n  ’(CDC)’), \n (’2000’, ’29.8’, ’327’), \n... \n (’2009’, ’32.8’, ’717’), \n (’’, ’’, ’’)]\n```", "```py\n>>> from toolz.itertoolz import interleave, partition, drop \n>>> from toolz.functoolz import pipe, curry \n\n>>> data_iter = pipe(s7, curry(partition, 12), interleave, curry(partition, 3)) \n>>> data = list(data_iter) \n\n>>> from pprint import pprint \n>>> pprint(data)  # doctext: +ELLIPSIS \n[(’’, \n  ’Per capita consumption of cheese (US Pounds (USDA)’, \n  ’Number of people who died by becoming tangled in their bedsheets Deaths (US) ’ \n  ’(CDC)’), \n (’2000’, ’29.8’, ’327’), \n... \n (’2009’, ’32.8’, ’717’), \n (’’, ’’, ’’)]\n```", "```py\nclass CountEndingItems: \n    def __init__(self, ending_test_function: Callable[[Any], bool]) -> None: \n      ... \n    def __call__(self, row: Any) -> int: \n      ... \n    def reset(self) -> None: \n      ...\n```"]