["```py\ntype error interface {\n    Error() string\n}\n```", "```py\nfunc divide(q int, d int) (int, error) {\n    if d == 0 {\n        return 0, errors.New(\"division by zero not valid\")\n    }\n    return q / d, nil\n}\n```", "```py\nfunc divide(q int, d int) (int, error) {\n    if d == 0 {\n        return 0, fmt.Errorf(\"divided by zero not valid\")\n    }\n    return q / d, nil\n}\n```", "```py\nfunc findNameCount(text string) (string, int, error) {\n    if len(text) < 5 {\n        return \"\", 0, fmt.Errorf(\"text too small\")\n    }\n    . . .\n}\n```", "```py\nfunc divide(q int, d int) (int, error) {\n    if d == 0 {\n        return 0, fmt.Errorf(\"%d can't be divided by zero\", q)\n    }\n    return q / d, nil\n}\n```", "```py\nfunc connect(host string, conf ssh.ClientConfig) error {\n    conn, err := ssh.Dial(\"tcp\", host+\":22\", conf)\n    if err != nil {\n        return fmt.Errorf(\"ssh.Dial: %v\", err)\n    }\n    . . .\n```", "```py\nfunc moveFile(srcFile, dstFile string) error {\n    src, err := os.Open(srcFile)\n    if err != nil {\n        return fmt.Errorf(\"os.Open: %v\", err)\n    }\n    dst, err := os.Create(dstFile)\n    if err != nil {\n        return fmt.Errorf(\"os.Create: %v\", err)\n    }\n    _, err = io.Copy(dst, src)\n    if err != nil {\n        return fmt.Errorf(\"io.Copy: %v\", err)\n    }\n    dst.Close()\n    src.Close()\n    err = os.Remove(srcFile)\n    if err != nil {\n        return fmt.Errorf(\"os.Remove: %v\", err)\n    }\n    return nil\n}\n```", "```py\nfunc moveFile(srcFile, dstFile string) error {\n    src, err := os.Open(srcFile)\n    if err != nil {\n        return fmt.Errorf(\"os.Open: %v\", err)\n    }\n    defer src.Close()\n    dst, err := os.Create(dstFile)\n    if err != nil {\n        return fmt.Errorf(\"os.Create: %v\", err)\n    }\n    defer dst.Close()\n    _, err = io.Copy(dst, src)\n    if err != nil {\n        return fmt.Errorf(\"io.Copy: %v\", err)\n    }\n    err = os.Remove(srcFile)\n    if err != nil {\n        return fmt.Errorf(\"os.Remove: %v\", err)\n    }\n    return nil\n}\n```", "```py\nimport (\n    \"fmt\"\n    \"math\"\n)\nfunc squareRoot(value float64) float64 {\n    if value < 0 {\n        panic(\"negative values are not allowed\")\n    }\n    return math.Sqrt(value)\n}\nfunc main() {\n    fmt.Println(squareRoot(-2))\n    fmt.Println(\"done\")\n}\n```", "```py\n$ go run panic-example.go\npanic: negative values are not allowed\ngoroutine 1 [running]:\nmain.squareRoot(...)\n    Dev/Chapter07/Go/panic-example.go:10\nmain.main()\n    Dev/Chapter07/Go/panic-example.go:17 +0x45\nexit status 2\n```", "```py\nfunc squareRoot(value float64) float64 {\n    defer fmt.Println(\"ending the function\")\n    if value < 0 {\n        panic(\"negative values are not allowed\")\n    }\n    return math.Sqrt(value)\n}\n```", "```py\n$ go run panic-example.go\nending the function\npanic: negative values are not allowed\ngoroutine 1 [running]:\nmain.squareRoot(…)\n    Dev/Chapter07/Go/panic-example.go:10\nmain.main()\n    Dev/Chapter07/Go/panic-example.go:17 +0x45\nexit status 2\n```", "```py\nimport \"fmt\"\nfunc divide(q, d int) int {\n    fmt.Println(\"Dividing it now\")\n    return q / d\n}\nfunc main() {\n    fmt.Println(\"the division is:\", divide(4, 0))\n}\n```", "```py\n$ go run division-by-zero-panic.go\nDividing it now\npanic: runtime error: integer divide by zero\ngoroutine 1 [running]:\nmain.divide(...)\n    Dev/Chapter07/Go/division-by-zero-panic.go:7\nmain.main()\n    Dev/Chapter07/Go/division-by-zero-panic.go:11 +0x85\nexit status 2\n```", "```py\nimport \"fmt\"\nfunc divide(q, d int) int {\n    fmt.Println(\"Dividing it now\")\n    return q / d\n}\nfunc main() {\n    defer func() {\n        if r := recover(); r != nil {\n            fmt.Println(\"Got a panic:\", r)\n        }\n    }()\n    fmt.Println(\"the division is:\", divide(4, 0))\n}\n```", "```py\n$ go run division-by-zero-panic-recover.go\nDividing it now\nGot a panic: runtime error: integer divide by zero\n```", "```py\ndef division(q, d):\n    return q/d\nprint(division(1, 0))\n```", "```py\n$ python catching-division-by-zero-exception.py\nTraceback (most recent call last):\n  File \"Chapter07/Python/catching-division-by-zero-exception.py\", line 7, in <module>\n    print(division(1, 0))\n  File \"Chapter07/Python/catching-division-by-zero-exception.py\", line 4, in division\n    return q/d\nZeroDivisionError: division by zero\n```", "```py\ndef division(q, d):\n    return q/d\ntry:\n    print(division(1, 0))\nexcept ZeroDivisionError:\n    print(\"Error: We should not divide by zero\")\n```", "```py\n$ python catching-division-by-zero-exception.py\nError: We should not divide by zero\n```", "```py\ndef division(q, d):\n    return q/d\ntry:\n    result = division(10, 1)\nexcept ZeroDivisionError:\n    print(\"Error: We should not divide by zero\")\nelse:\n    print(\"Division succeded, result is:\", result)\nfinally:\n    print(\"done\")\n```", "```py\n$ python catch-else-finally-division-by-zero.py\nDivision succeded, result is: 10.0\ndone\n```", "```py\nBaseException -> Exception -> ArithmeticError-> ZeroDivisionError\n```", "```py\nimport (\n    \"log\"\n    \"os/user\"\n)\nfunc main() {\n    user, err := user.Current()\n    if err != nil {\n        log.Fatalf(\"Failed with error: %v\", err)\n    }\n    log.Printf(\"Current user is %s\", user.Username)\n}\n```", "```py\n% go run standard-logging.go\n2022/11/08 18:53:24 Current user is claus\n```", "```py\nimport (\n    \"log\"\n    \"os\"\n)\nvar criticalLog, errorLog, warnLog, infoLog, debugLog *log.Logger\nfunc init() {\n    file, err := os.Create(\"log-file.txt\")\n    if err != nil {\n        log.Fatal(err)\n    }\n    flags := log.Ldate | log.Ltime\n    criticalLog = log.New(file, \"CRITICAL: \", flags)\n    errorLog = log.New(file, \"ERROR: \", flags)\n    warnLog = log.New(file, \"WARNING: \", flags)\n    infoLog = log.New(file, \"INFO: \", flags)\n    debugLog = log.New(file, \"DEBUG: \", flags)\n}\nfunc main() {\n    infoLog.Print(\"That is a milestone\")\n    errorLog.Print(\"Got an error here\")\n    debugLog.Print(\"Extra information for a debug\")\n    warnLog.Print(\"You should be warned about this\")\n}\n```", "```py\nimport (\n    log \"github.com/sirupsen/logrus\"\n)\nfunc init() {\n    log.SetFormatter(&log.TextFormatter{\n        DisableColors: true,\n        FullTimestamp: true,\n    })\n    log.SetLevel(log.ErrorLevel)\n}\nfunc main() {\n    log.Debug(\"Debug is suppressed in error level\")\n    log.Info(\"This info won't show in error level\")\n    log.Error(\"Got an error here\")\n}\n```", "```py\n% go run logrus-logging.go\ntime=\"2022-11-09T11:16:48-03:00\" level=error msg=\"Got an error here\"\n```", "```py\nimport logging\n    logging.basicConfig(\n        filename='file-log.txt',\n        level=logging.ERROR,\n        format='%(asctime)s.%(msecs)03d %(levelname)s: %(message)s',\n        datefmt='%Y-%m-%d %H:%M:%S',\n)\nlogging.debug(\"This won't show, level is set to info\")\nlogging.info(\"Info is not that important as well\")\nlogging.warning(\"Warning will not show as well\")\nlogging.error(\"This is an error\")\n```", "```py\n2022-11-09 14:48:52.920 ERROR: This is an error\n```", "```py\nfrom loguru import logger\nlogger.add(\n    \"file-log-{time}.txt\",\n    rotation=\"1 MB\",\n    colorize=False,\n    level=\"ERROR\",\n)\nlogger.debug(\"That's not going to show\")\nlogger.warning(\"This will not show\")\nlogger.error(\"Got an error\")\n```", "```py\n% cat file-log-2022-11-09_15-53-58_056790.txt\n2022-11-09 15:53:58.063 | ERROR    | __main__:<module>:13 - Got an error\n```"]