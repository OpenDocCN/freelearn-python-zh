["```py\n/Users/slott/Documents/Writing/Python Cookbook/src/ch11/recipe_01.py\n```", "```py\n>>> from pathlib import Path\n```", "```py\n>>> from argparse import Namespace \n\n>>> options = Namespace( \n\n...     input=’/path/to/some/file.csv’, \n\n...     file1=’data/ch11_file1.yaml’, \n\n...     file2=’data/ch11_file2.yaml’, \n\n... ) \n```", "```py\n    >>> input_path = Path(options.input) \n\n    >>> input_path \n\n    PosixPath(’/path/to/some/file.csv’)\n    ```", "```py\n    >>> output_path = input_path.with_suffix(’.out’) \n\n    >>> output_path \n\n    PosixPath(’/path/to/some/file.out’)\n    ```", "```py\n    >>> input_path = Path(options.input)\n    ```", "```py\n    >>> input_directory = input_path.parent \n\n    >>> input_stem = input_path.stem\n    ```", "```py\n    >>> output_stem_pass = f\"{input_stem}_pass\" \n\n    >>> output_stem_pass \n\n    ’file_pass’\n    ```", "```py\n    >>> output_path = ( \n\n    ...     input_directory / output_stem_pass \n\n    ... ).with_suffix(’.csv’) \n\n    >>> output_path \n\n    PosixPath(’/path/to/some/file_pass.csv’)\n    ```", "```py\n    >>> file1_path = Path(options.file1) \n\n    >>> file2_path = Path(options.file2)\n    ```", "```py\n    >>> file1_path.stat().st_mtime \n\n    1572806032.0 \n\n    >>> file2_path.stat().st_mtime \n\n    1572806131.0\n    ```", "```py\n>>> import datetime \n\n>>> mtime_1 = file1_path.stat().st_mtime \n\n>>> datetime.datetime.fromtimestamp(mtime_1) \n\ndatetime.datetime(2019, 11, 3, 13, 33, 52)\n```", "```py\n    >>> directory_path = Path(options.file1).parent \n\n    >>> directory_path \n\n    PosixPath(’data’)\n    ```", "```py\n    >>> from pprint import pprint \n\n    >>> pprint(sorted(directory_path.glob(\"*.csv\"))) \n\n    [PosixPath(’data/binned.csv’),\n    ```", "```py\nfrom dataclasses import dataclass, asdict, fields \n\n@dataclass \n\nclass Quotient: \n\n    numerator: int \n\n    denominator: int \n```", "```py\nimport csv \n\nfrom collections.abc import Iterable \n\nfrom pathlib import Path \n\ndef save_data( \n\n    output_path: Path, data: Iterable[Quotient] \n\n) -> None: \n\n    with output_path.open(\"w\", newline=\"\") as output_file: \n\n        headers = [f.name for f in fields(Quotient)] \n\n        writer = csv.DictWriter(output_file, headers) \n\n        writer.writeheader() \n\n        for q in data: \n\n            writer.writerow(asdict(q))\n```", "```py\n        ext = output_path.suffix \n\n        output_new_path = output_path.with_suffix(f’{ext}.new’) \n\n        save_data(output_new_path, data)\n    ```", "```py\n        output_old_path = output_path.with_suffix(f’{ext}.old’) \n\n        output_old_path.unlink(missing_ok=True)\n    ```", "```py\n        try: \n\n            output_path.rename(output_old_path) \n\n        except FileNotFoundError as ex: \n\n            # No previous file. That’s okay. \n\n            pass\n    ```", "```py\n        try: \n\n            output_new_path.rename(output_path) \n\n        except IOError as ex: \n\n            # Possible recovery... \n\n            output_old_path.rename(output_path)\n    ```", "```py\nlat,lon,date,time \n\n32.8321666666667,-79.9338333333333,2012-11-27,09:15:00 \n\n31.6714833333333,-80.93325,2012-11-28,00:00:00 \n\n30.7171666666667,-81.5525,2012-11-28,11:35:00\n```", "```py\n    import csv \n\n    from pathlib import Path\n    ```", "```py\n    def raw(data_path: Path) -> None:\n    ```", "```py\n        with data_path.open() as data_file: \n\n            data_reader = csv.DictReader(data_file)\n    ```", "```py\n            for row in data_reader: \n\n                print(row)\n    ```", "```py\n{’lat’: ’32.8321666666667’, ’lon’: ’-79.9338333333333’, ’date’: ’2012-11-27’, ’time’: ’09:15:00’}\n```", "```py\nlan,lon,date,time,notes \n\n32.832,-79.934,2012-11-27,09:15:00,\"breezy, rainy\" \n\n31.671,-80.933,2012-11-28,00:00:00,\"blowing \"\"like stink\"\"\"\n```", "```py\nimport datetime \n\nfrom typing import TypeAlias, Any \n\nRaw: TypeAlias = dict[str, Any] \n\nWaypoint: TypeAlias = dict[str, Any]\n```", "```py\ndef clean_row( \n\n    source_row: Raw \n\n) -> Waypoint: \n\n    ts_date = datetime.datetime.strptime( \n\n        source_row[\"date\"], \"%Y-%m-%d\").date() \n\n    ts_time = datetime.datetime.strptime( \n\n        source_row[\"time\"], \"%H:%M:%S\").time() \n\n    return dict( \n\n        date=source_row[\"date\"], \n\n        time=source_row[\"time\"], \n\n        lat=source_row[\"lat\"], \n\n        lon=source_row[\"lon\"], \n\n        lat_lon=( \n\n            float(source_row[\"lat\"]), \n\n            float(source_row[\"lon\"]) \n\n        ), \n\n        ts_date=ts_date, \n\n        ts_time=ts_time, \n\n        timestamp = datetime.datetime.combine( \n\n            ts_date, ts_time \n\n        ) \n\n    )\n```", "```py\ndef cleanse(reader: csv.DictReader[str]) -> Iterator[Waypoint]: \n\n    for row in reader: \n\n        yield clean_row(row)\n```", "```py\ndef display_clean(data_path: Path) -> None: \n\n    with data_path.open() as data_file: \n\n        data_reader = csv.DictReader(data_file) \n\n        clean_data_reader = cleanse(data_reader) \n\n        for row in clean_data_reader: \n\n            pprint(row)\n```", "```py\n>>> data = Path(\"data\") / \"waypoints.csv\" \n\n>>> display_clean(data) \n\n{’date’: ’2012-11-27’, \n\n ’lat’: ’32.8321666666667’, \n\n ’lat_lon’: (32.8321666666667, -79.9338333333333), \n\n ’lon’: ’-79.9338333333333’, \n\n ’time’: ’09:15:00’, \n\n ’timestamp’: datetime.datetime(2012, 11, 27, 9, 15), \n\n ’ts_date’: datetime.date(2012, 11, 27), \n\n ’ts_time’: datetime.time(9, 15)} \n\n...\n```", "```py\nlat,lon,date,time \n\n32.8321666666667,-79.9338333333333,2012-11-27,09:15:00 \n\n31.6714833333333,-80.93325,2012-11-28,00:00:00 \n\n30.7171666666667,-81.5525,2012-11-28,11:35:00\n```", "```py\n    from dataclasses import dataclass, field \n\n    import datetime \n\n    from collections.abc import Iterator\n    ```", "```py\n    @dataclass \n\n    class RawRow: \n\n        date: str \n\n        time: str \n\n        lat: str \n\n        lon: str \n    ```", "```py\n    @dataclass \n\n    class Waypoint: \n\n        raw: RawRow \n\n        lat_lon: tuple[float, float] = field(init=False) \n\n        ts_date: datetime.date = field(init=False) \n\n        ts_time: datetime.time = field(init=False) \n\n        timestamp: datetime.datetime = field(init=False)\n    ```", "```py\n     def __post_init__(self) -> None: \n\n            self.ts_date = datetime.datetime.strptime( \n\n                self.raw.date, \"%Y-%m-%d\" \n\n            ).date() \n\n            self.ts_time = datetime.datetime.strptime( \n\n                self.raw.time, \"%H:%M:%S\" \n\n            ).time() \n\n            self.lat_lon = ( \n\n                float(self.raw.lat), \n\n                float(self.raw.lon) \n\n            ) \n\n            self.timestamp = datetime.datetime.combine( \n\n                self.ts_date, self.ts_time \n\n            )\n    ```", "```py\n    def waypoint_iter(reader: csv.DictReader[str]) -> Iterator[Waypoint]: \n\n        for row in reader: \n\n            raw = RawRow(**row) \n\n            yield Waypoint(raw)\n    ```", "```py\ndef display(data_path: Path) -> None: \n\n    with data_path.open() as data_file: \n\n        data_reader = csv.DictReader(data_file) \n\n        for waypoint in waypoint_iter(data_reader): \n\n            pprint(waypoint)\n```", "```py\n@dataclass \n\nclass RawRow_HeaderV2: \n\n    date: str \n\n    time: str \n\n    lat: str \n\n    lon: str \n\n    @classmethod \n\n    def from_csv(cls, csv_row: dict[str, str]) -> \"RawRow_HeaderV2\": \n\n        return RawRow_HeaderV2( \n\n            date = csv_row[’Date of Travel (YYYY-MM-DD)’], \n\n            time = csv_row[’Arrival Time (HH:MM:SS)’], \n\n            lat = csv_row[’Latitude (degrees N)’], \n\n            lon = csv_row[’Logitude (degrees W)’],\n```", "```py\nRaw: TypeAlias = RawRow | RawRow_HeaderV2\n```", "```py\n[2016-05-08 11:08:18,651] INFO in ch09_r09: Sample Message One \n\n[2016-05-08 11:08:18,651] DEBUG in ch09_r09: Debugging \n\n[2016-05-08 11:08:18,652] WARNING in ch09_r09: Something might have gone wrong\n```", "```py\nimport re \n\npattern_text = ( \n\n    r\"\\[(?P<date>.*?)]\\s+\" \n\n    r\"(?P<level>\\w+)\\s+\" \n\n    r\"in\\s+(?P<module>\\S+?)\" \n\n    r\":\\s+(?P<message>.+)\" \n\n    ) \n\npattern = re.compile(pattern_text, re.X)\n```", "```py\n>>> sample_data = ’[2016-05-08 11:08:18,651] INFO in ch10_r09: Sample Message One’ \n\n>>> match = pattern.match(sample_data) \n\n>>> match.groups() \n\n(’2016-05-08 11:08:18,651’, ’INFO’, ’ch10_r09’, ’Sample Message One’) \n\n>>> match.groupdict() \n\n{’date’: ’2016-05-08 11:08:18,651’, ’level’: ’INFO’, ’module’: ’ch10_r09’, ’message’: ’Sample Message One’}\n```", "```py\n    import re \n\n    pattern_text = ( \n\n        r\"\\[(?P<date>.*?)]\\s+\" \n\n        r\"(?P<level>\\w+)\\s+\" \n\n        r\"in\\s+(?P<module>\\S+?)\" \n\n        r\":\\s+(?P<message>.+)\" \n\n        ) \n\n    pattern = re.compile(pattern_text, re.X) \n    ```", "```py\n    from typing import NamedTuple \n\n    class LogLine(NamedTuple): \n\n        date: str \n\n        level: str \n\n        module: str \n\n        message: str\n    ```", "```py\n    def log_parser(source_line: str) -> LogLine:\n    ```", "```py\n        if match := pattern.match(source_line):\n    ```", "```py\n            data = match.groupdict() \n\n            return LogLine(**data)\n    ```", "```py\n        raise ValueError(f\"Unexpected input {source_line=}\")\n    ```", "```py\n    >>> from pathlib import Path \n\n    >>> from pprint import pprint\n    ```", "```py\n    >>> data_path = Path(\"data\") / \"sample.log\"\n    ```", "```py\n    >>> with data_path.open() as data_file: \n\n    ...     data_reader = map(log_parser, data_file)\n    ```", "```py\n    ...     for row in data_reader: \n\n    ...         pprint(row)\n    ```", "```py\nLogLine(date=’2016-06-15 17:57:54,715’, level=’INFO’, module=’ch09_r10’, message=’Sample Message One’) \n\nLogLine(date=’2016-06-15 17:57:54,715’, level=’DEBUG’, module=’ch09_r10’, message=’Debugging’) \n\nLogLine(date=’2016-06-15 17:57:54,715’, level=’WARNING’, module=’ch09_r10’, message=’Something might have gone wrong’)\n```", "```py\nimport csv \n\ndef copy(data_path: Path) -> None: \n\n    target_path = data_path.with_suffix(\".csv\") \n\n    with target_path.open(\"w\", newline=\"\") as target_file: \n\n        writer = csv.DictWriter(target_file, LogLine._fields) \n\n        writer.writeheader() \n\n        with data_path.open() as data_file: \n\n            reader = map(log_parser, data_file) \n\n            writer.writerows(row._asdict() for row in reader)\n```", "```py\ndate,level,module,message \n\n\"2016-06-15 17:57:54,715\",INFO,ch09_r10,Sample Message One \n\n\"2016-06-15 17:57:54,715\",DEBUG,ch09_r10,Debugging \n\n\"2016-06-15 17:57:54,715\",WARNING,ch09_r10,Something might have gone wrong\n```", "```py\n(cookbook3) % python -m pip install pyyaml\n```", "```py\n{ \n\n  \"teams\": [ \n\n    { \n\n      \"name\": \"Abu Dhabi Ocean Racing\", \n\n      \"position\": [ \n\n        1, \n\n        3, \n\n        2, \n\n        2, \n\n        1, \n\n        2, \n\n        5, \n\n        3, \n\n        5 \n\n      ] \n\n    }, \n\n... \n\n  ], \n\n  \"legs\": [ \n\n    \"ALICANTE - CAPE TOWN\", \n\n    \"CAPE TOWN - ABU DHABI\", \n\n    \"ABU DHABI - SANYA\", \n\n    \"SANYA - AUCKLAND\", \n\n    \"AUCKLAND - ITAJA\\u00cd\", \n\n    \"ITAJA\\u00cd - NEWPORT\", \n\n    \"NEWPORT - LISBON\", \n\n    \"LISBON - LORIENT\", \n\n    \"LORIENT - GOTHENBURG\" \n\n  ] \n\n}\n```", "```py\n    import json \n\n    from pathlib import Path\n    ```", "```py\n    def race_summary(source_path: Path) -> None: \n    ```", "```py\n        document = json.loads(source_path.read_text())\n    ```", "```py\n        for n, leg in enumerate(document[’legs’]): \n\n            print(leg) \n\n            for team_finishes in document[’teams’]: \n\n                print( \n\n                    team_finishes[’name’], \n\n                    team_finishes[’position’][n])\n    ```", "```py\n>>> document[’teams’][6][’name’] \n\n’Team Vestas Wind’\n```", "```py\n>>> document[’legs’][5] \n\n’ITAJA - NEWPORT’\n```", "```py\ndef default_date(object: Any) -> Any: \n\n    match object: \n\n        case datetime.datetime(): \n\n            return {\"$date$\": object.isoformat()} \n\n    return object\n```", "```py\n>>> example_date = datetime.datetime(2014, 6, 7, 8, 9, 10) \n\n>>> document = {’date’: example_date} \n\n>>> print( \n\n...     json.dumps(document, default=default_date, indent=2) \n\n... ) \n\n{ \n\n  \"date\": { \n\n    \"$date$\": \"2014-06-07T08:09:10\" \n\n  } \n\n}\n```", "```py\ndef as_date(object: dict[str, Any]) -> Any: \n\n    if {’$date$’} == set(object.keys()): \n\n        return datetime.datetime.fromisoformat(object[’$date$’]) \n\n    return object\n```", "```py\n>>> source = ’’’{\"date\": {\"$date$\": \"2014-06-07T08:09:10\"}}’’’ \n\n>>> json.loads(source, object_hook=as_date) \n\n{’date’: datetime.datetime(2014, 6, 7, 8, 9, 10)}\n```", "```py\n<team><name>Team SCA</name><position>...</position></team>\n```", "```py\n<?xml version=\"1.0\"?> \n\n<results> \n\n    <teams> \n\n        <team> \n\n            <name> \n\n                Abu Dhabi Ocean Racing \n\n            </name> \n\n            <position> \n\n                <leg n=\"1\"> \n\n                    1 \n\n                </leg> \n\n               ... \n\n            </position> \n\n            ... \n\n        </team> \n\n        ... \n\n   </teams> \n\n    <legs> \n\n        <leg n=\"1\"> \n\n            ALICANTE - CAPE TOWN \n\n        </leg> \n\n        ... \n\n    </legs> \n\n</results>\n```", "```py\n<p> \n\nThis has <strong>mixed</strong> content. \n\n</p>\n```", "```py\n    import xml.etree.ElementTree as XML \n\n    from pathlib import Path \n\n    from typing import cast\n    ```", "```py\n    def race_summary(source_path: Path) -> None:\n    ```", "```py\n        source_text = source_path.read_text(encoding=’UTF-8’) \n\n        document = XML.fromstring(source_text)\n    ```", "```py\n        legs = cast(XML.Element, document.find(’legs’)) \n\n        teams = cast(XML.Element, document.find(’teams’)) \n\n        for leg in legs.findall(’leg’): \n\n            print(cast(str, leg.text).strip()) \n\n            n = leg.attrib[’n’] \n\n            for team in teams.findall(’team’): \n\n                position_leg = cast(XML.Element, \n\n                    team.find(f\"position/leg[@n=’{n}’]\")) \n\n                name = cast(XML.Element, team.find(’name’)) \n\n                print( \n\n                    cast(str, name.text).strip(), \n\n                    cast(str, position_leg.text).strip() \n\n                )\n    ```", "```py\n    <leg n=\"1\">ALICANTE - CAPE TOWN</leg>\n    ```", "```py\n<name>Team SCA</name> \n\n<position>...</position>\n```", "```py\n>>> for tag in document.findall(’teams/team/name’): \n\n...     print(tag.text.strip()) \n\nAbu Dhabi Ocean Racing \n\nTeam Brunel \n\nDongfeng Race Team \n\nMAPFRE \n\nTeam Alvimedica \n\nTeam SCA \n\nTeam Vestas Wind\n```", "```py\n(cookbook3) % python -m pip install beautifulsoup4\n```", "```py\n<html> \n\n<head>...</head> \n\n<body>...</body> \n\n</html>\n```", "```py\n<table> \n\n   <thead> \n\n      ... \n\n   </thead> \n\n   <tbody> \n\n       ... \n\n   </tbody> \n\n</table>\n```", "```py\n<th tooltipster data=\"<strong>ALICANTE - CAPE TOWN</strong>\" data-theme=\"tooltipster-shadow\" data-htmlcontent=\"true\" data-position=\"top\"> \n\nLEG 1</th>\n```", "```py\n<tr class=\"ranking-item\"> \n\n   <td class=\"ranking-position\">3</td> \n\n   <td class=\"ranking-avatar\"><img src=\"img/...\"></td> \n\n   <td class=\"ranking-team\"> Dongfeng Race Team</td> \n\n   <td class=\"ranking-number\">2</td> \n\n   <td class=\"ranking-number\">2</td> \n\n   <td class=\"ranking-number\">1</td> \n\n   <td class=\"ranking-number\">3</td> \n\n   <td class=\"ranking-number\" tooltipster \n\n   data=\"<center><strong>RETIRED</strong><br> Click for more info</center>\" data-theme=\"tooltipster-3\" \n\n   data-position=\"bottom\" data-htmlcontent=\"true\"> \n\n   <a href=\"/en/news/8674_Dongfeng-Race-Team-breaks-mast-crew-safe.html\" \n\n   target=\"_blank\">8</a> \n\n   <div class=\"status-dot dot-3\"></div></td> \n\n   ... more columns ... \n\n</tr>\n```", "```py\n    from bs4 import BeautifulSoup \n\n    from pathlib import Path \n\n    from typing import Any\n    ```", "```py\n    def race_extract(source_path: Path) -> dict[str, Any]:\n    ```", "```py\n        with source_path.open(encoding=\"utf8\") as source_file: \n\n            soup = BeautifulSoup(source_file, \"html.parser\")\n    ```", "```py\n        thead_row = soup.table.thead.tr  # type: ignore [union-attr]\n    ```", "```py\n        legs: list[tuple[str, str | None]] = [] \n\n        for tag in thead_row.find_all(\"th\"): # type: ignore [union-attr] \n\n            leg_description = ( \n\n                tag.string, tag.attrs.get(\"data\") \n\n            ) \n\n            legs.append(leg_description)\n    ```", "```py\n        tbody = soup.table.tbody # type: ignore [union-attr]\n    ```", "```py\n        teams: list[dict[str, Any]] = [] \n\n        for row in tbody.find_all(\"tr\"): # type: ignore [union-attr] \n\n            team: dict[str, Any] = { \n\n                \"name\": None, \n\n                \"position\": []} \n\n            for col in row.find_all(\"td\"): \n\n                if \"ranking-team\" in col.attrs.get(\"class\"): \n\n                    team[\"name\"] = col.string \n\n                elif ( \n\n                        \"ranking-number\" in col.attrs.get(\"class\") \n\n                    ): \n\n                    team[\"position\"].append(col.string) \n\n                elif \"data\" in col.attrs: \n\n                    # Complicated explanation with nested HTML \n\n                    # print(col.attrs, col.string) \n\n                    pass \n\n            teams.append(team)\n    ```", "```py\n        document = { \n\n            \"legs\": legs, \n\n            \"teams\": teams, \n\n        } \n\n        return document\n    ```", "```py\n>>> source_path = Path(\"data\") / \"Volvo Ocean Race.html\" \n\n>>> race_extract(source_path) \n\n{’legs’: [(None, None), \n\n          (’LEG 1’, ’<strong>ALICANTE - CAPE TOWN’), \n\n          (’LEG 2’, ’<strong>CAPE TOWN - ABU DHABI</strong>’), \n\n          (’LEG 3’, ’<strong>ABU DHABI - SANYA</strong>’), \n\n          (’LEG 4’, ’<strong>SANYA - AUCKLAND</strong>’), \n\n          (’LEG 5’, ’<strong>AUCKLAND - ITAJA</strong>’), \n\n          (’LEG 6’, ’<strong>ITAJA - NEWPORT</strong>’), \n\n          (’LEG 7’, ’<strong>NEWPORT - LISBON</strong>’), \n\n          (’LEG 8’, ’<strong>LISBON - LORIENT</strong>’), \n\n          (’LEG 9’, ’<strong>LORIENT - GOTHENBURG</strong>’), \n\n          (’TOTAL’, None)], \n\n ’teams’: [ \n\n    {’name’: ’Abu Dhabi Ocean Racing’, \n\n     ’position’: [’1’, ’3’, \n\n              ’2’, ’2’, \n\n              ’1’, ’2’,\n```", "```py\n {’name’: ’Team Vestas Wind’, \n\n     ’position’: [’4’, \n\n                None, \n\n                None, \n\n                None, \n\n                None, \n\n                None, \n\n                None, \n\n                ’2’, \n\n                ’6’, \n\n                ’60’]}]}\n```", "```py\n>>> ranking_table = soup.find(’table’, class_=\"ranking-list\")\n```"]