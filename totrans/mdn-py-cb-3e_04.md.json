["```py\n    def confirm() -> bool: \n\n        yes = {\"yes\", \"y\"} \n\n        no = {\"no\", \"n\"} \n\n        while (answer := input(\"Confirm: \")).lower() not in (yes | no): \n\n            print(\"Please respond with yes or no\") \n\n        return answer in yes\n    ```", "```py\n    >>> month_name_list = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \n\n    ... \"May\", \"Jun\", \"Jul\", \"Aug\", \n\n    ... \"Sep\", \"Oct\", \"Nov\", \"Dec\"] \n\n    >>> month_name_list[8] \n\n    ’Sep’ \n\n    >>> month_name_list.index(\"Feb\") \n\n    1\n    ```", "```py\n>>> from pathlib import Path \n\n>>> home = Path.cwd() / \"data\" \n\n>>> for path in sorted(home.glob(’*.csv’)): \n\n...     print(path.stat().st_size, path.name) \n\n260 binned.csv \n\n250 ch14_r03.csv \n\n2060 ch14_r04.csv \n\n45 craps.csv \n\n225 fuel.csv \n\n156 fuel2.csv \n\n28 output.csv \n\n19760 output_0.csv \n\n19860 output_1.csv \n\n19645 output_2.csv \n\n19971 output_3.csv \n\n19588 output_4.csv \n\n...\n```", "```py\n    >>> file_sizes = []\n    ```", "```py\n    >>> home = Path.cwd() / \"data\" \n\n    >>> for path in sorted(home.glob(’*.csv’)): \n\n    ...     file_sizes.append(path.stat().st_size) \n\n    >>> print(file_sizes) \n\n    [260, 250, 2060, 45, 225, 156, 28, 19760, 19860, 19645, 19971, 19588, 19999, 20000, 20035, 19739, 19941, 215, 412, 28, 166, 0, 1810, 0, 0, 16437, 20295] \n\n    >>> print(sum(file_sizes)) \n\n    240925\n    ```", "```py\n    [... for path in home.glob(’*.csv’)]\n    ```", "```py\n    [path.stat().st_size \n\n      for path in home.glob(’*.csv’)]\n    ```", "```py\n>>> [path.stat().st_size \n\n...     for path in sorted(home.glob(’*.csv’))] \n\n[260, 250, 2060, 45, 225, 156, 28, 19760, 19860, 19645, 19971, 19588, 19999, 20000, 20035, 19739, 19941, 215, 412, 28, 166, 0, 1810, 0, 0, 16437, 20295]\n```", "```py\n>>> sieve = [True for i in range(100)]\n```", "```py\n>>> sieve[0] = sieve[1] = False \n\n>>> for p in range(100): \n\n...     if sieve[p]: \n\n...         for n in range(p*2, 100, p): \n\n...             sieve[n] = False \n\n>>> prime = [p for p in range(100) if sieve[p]]\n```", "```py\n>>> sizes = list(path.stat().st_size \n\n...     for path in home.glob(’*.csv’)) \n\n>>> sum(sizes) \n\n240925 \n\n>>> max(sizes) \n\n20295 \n\n>>> min(sizes) \n\n0 \n\n>>> from statistics import mean \n\n>>> round(mean(sizes), 3) \n\n8923.148\n```", "```py\n>>> sizes.index(min(sizes)) \n\n1\n```", "```py\n>>> home = Path.cwd() / \"src\" \n\n>>> ch3 = list(path.stat().st_size \n\n...     for path in home.glob(’ch03/*.py’)) \n\n>>> ch4 = list(path.stat().st_size \n\n...     for path in home.glob(’ch04/*.py’)) \n\n>>> len(ch3) \n\n16 \n\n>>> len(ch4) \n\n6 \n\n>>> final = ch3 + ch4 \n\n>>> len(final) \n\n22 \n\n>>> sum(final) \n\n34853\n```", "```py\n>>> p = [3, 5, 11, 13] \n\n>>> p.insert(0, 2) \n\n>>> p \n\n[2, 3, 5, 11, 13] \n\n>>> p.insert(3, 7) \n\n>>> p \n\n[2, 3, 5, 7, 11, 13]\n```", "```py\nimport csv \n\nfrom pathlib import Path \n\ndef get_fuel_use(path: Path) -> list[list[str]]: \n\n    with path.open() as source_file: \n\n        reader = csv.reader(source_file) \n\n        log_rows = list(reader) \n\n    return log_rows\n```", "```py\n>>> log_rows[0] \n\n[’date’, ’engine on’, ’fuel height’] \n\n>>> log_rows[-1] \n\n[’’, \"choppy -- anchor in jackson’s creek\", ’’] \n```", "```py\n    >>> head, tail = log_rows[:4], log_rows[4:] \n\n    >>> head[0] \n\n    [’date’, ’engine on’, ’fuel height’] \n\n    >>> head[-1] \n\n    [’’, ’’, ’’] \n\n    >>> tail[0] \n\n    [’10/25/13’, ’08:24:00 AM’, ’29’] \n\n    >>> tail[-1] \n\n    [’’, \"choppy -- anchor in jackson’s creek\", ’’]\n    ```", "```py\n    >>> pprint(tail[0::3], width=64) \n\n    [[’10/25/13’, ’08:24:00 AM’, ’29’], \n\n     [’10/26/13’, ’09:12:00 AM’, ’27’]]\n    ```", "```py\n    >>> pprint(tail[1::3], width=48) \n\n    [[’’, ’01:15:00 PM’, ’27’], \n\n     [’’, ’06:25:00 PM’, ’22’]]\n    ```", "```py\n    >>> paired_rows = list(zip(tail[0::3], tail[1::3])) \n\n    >>> pprint(paired_rows) \n\n    [([’10/25/13’, ’08:24:00 AM’, ’29’], [’’, ’01:15:00 PM’, ’27’]), \n\n     ([’10/26/13’, ’09:12:00 AM’, ’27’], [’’, ’06:25:00 PM’, ’22’])]\n    ```", "```py\n     >>> paired_rows = list(zip(tail[0::3], tail[1::3])) \n\n    >>> combined = [a+b for a, b in paired_rows] \n\n    >>> pprint(combined) \n\n    [[’10/25/13’, ’08:24:00 AM’, ’29’, ’’, ’01:15:00 PM’, ’27’], \n\n     [’10/26/13’, ’09:12:00 AM’, ’27’, ’’, ’06:25:00 PM’, ’22’]]\n    ```", "```py\n>>> del log_rows[:4] \n\n>>> log_rows[0] \n\n[’10/25/13’, ’08:24:00 AM’, ’29’] \n\n>>> log_rows[-1] \n\n[’’, \"choppy -- anchor in jackson’s creek\", ’’] \n```", "```py\n >>> row = [’10/25/13’, ’08:24:00 AM’, ’29’, ’’, ’01:15:00 PM’, ’27’]\n```", "```py\n>>> row.remove(’’) \n\n>>> row \n\n[’10/25/13’, ’08:24:00 AM’, ’29’, ’01:15:00 PM’, ’27’]\n```", "```py\na = [’some’, ’data’] \n\na = a.remove(’data’)\n```", "```py\n>>> row = [’10/25/13’, ’08:24:00 AM’, ’29’, ’’, ’01:15:00 PM’, ’27’]\n```", "```py\n>>> target_position = row.index(’’) \n\n>>> target_position \n\n3 \n\n>>> row.pop(target_position) \n\n’’ \n\n>>> row \n\n[’10/25/13’, ’08:24:00 AM’, ’29’, ’01:15:00 PM’, ’27’]\n```", "```py\n>>> row = [’10/25/13’, ’08:24:00 AM’, ’29’, ’’, ’01:15:00 PM’, ’27’] \n\n>>> target_position = row.index(’’) \n\n>>> target_position \n\n3\n```", "```py\n>>> row[3:4] = [] \n\n>>> row \n\n[’10/25/13’, ’08:24:00 AM’, ’29’, ’01:15:00 PM’, ’27’]\n```", "```py\n>>> row = [’’, ’06:25:00 PM’, ’22’] \n\n>>> del row[3] \n\nTraceback (most recent call last): \n\n... \n\nIndexError: list assignment index out of range\n```", "```py\n>>> data_items = [1, 1, 2, 3, 5, 8, 10, \n\n... 13, 21, 34, 36, 55] \n\n>>> for f in data_items: \n\n...     if f % 2 == 0: \n\n...         data_items.remove(f) \n\n>>> data_items \n\n[1, 1, 3, 5, 10, 13, 21, 36, 55]\n```", "```py\n    >>> for f in data_items[:]: \n\n    ...     if f % 2 == 0: \n\n    ...         data_items.remove(f)\n    ```", "```py\n    >>> position = 0 \n\n    >>> while position != len(data_items): \n\n    ...     f = data_items[position] \n\n    ...     if f % 2 == 0: \n\n    ...         data_items.remove(f) \n\n    ...     else: \n\n    ...         position += 1\n    ```", "```py\n(’ Brick_Red’, (198, 45, 66)), \n\n(’ color1’, (198.00, 100.50, 45.00)), \n\n(’ color2’, (198.00, 45.00, 142.50)), \n\n]\n```", "```py\ndef hexify(r: float, g: float, b: float) -> str: \n\n    return f’#{int(r) << 16 | int(g) << 8 | int(b):06X}’\n```", "```py\n>>> hexify(198, 45, 66) \n\n’#C62D42’\n```", "```py\ndef source_to_hex_0(src): \n\n    return [ \n\n        (n, hexify(*color)) for n, color in src \n\n    ]\n```", "```py\n    ColorCode = tuple[str, str] \n\n    ColorCodeList = list[ColorCode] \n    ```", "```py\n    from typing import Union \n\n    RGB_I = tuple[int, int, int] \n\n    RGB_F = tuple[float, float, float] \n\n    ColorRGB = tuple[str, Union[RGB_I, RGB_F]] \n\n    ColorRGBList = list[ColorRGB]\n    ```", "```py\n    def source_to_hex(src: ColorRGBList) -> ColorCodeList: \n        return [ \n\n            (n, hexify(*color)) for n, color in src \n\n        ]\n    ```", "```py\nlist[tuple[str, Union[tuple[int, int, int], tuple[float, float, float]]]]\n```", "```py\n>>> week = 13 \n\n>>> day = 2 \n\n>>> hour = 7 \n\n>>> minute = 53 \n\n>>> second = 19 \n\n>>> t_s = (((week*7+day)*24+hour)*60+minute)*60+second \n\n>>> t_s \n\n8063599\n```", "```py\n>>> t_s = 8063599 \n\n>>> fields = [] \n\n>>> for base in 60, 60, 24, 7: \n\n...     t_s, f = divmod(t_s, base) \n\n...     fields.append(f) \n\n>>> fields.append(t_s) \n\n>>> fields \n\n[19, 53, 7, 2, 13]\n```", "```py\n>>> fields_copy1 = fields.copy() \n\n>>> fields_copy1.reverse() \n\n>>> fields_copy1 \n\n[13, 2, 7, 53, 19]\n```", "```py\n>>> fields_copy2 = fields[::-1] \n\n>>> fields_copy2 \n\n[13, 2, 7, 53, 19]\n```", "```py\n>>> fields_copy3 = list(reversed(fields)) \n\n>>> fields_copy3 \n\n[13, 2, 7, 53, 19]\n```", "```py\n>>> a = \"string\" \n\n>>> hash(a) \n\n... # doctest: +SKIP \n\n4964286962312962439 \n\n>>> b = [\"list\", \"of\", \"strings\"] \n\n>>> hash(b) \n\nTraceback (most recent call last): \n\n... \n\nTypeError: unhashable type: ’list’\n```", "```py\n>>> import_details = [ \n\n... (’Chapter_12.ch12_r01’, [’typing’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r02’, [’typing’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r03’, [’typing’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r04’, [’typing’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r05’, [’typing’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r06’, [’typing’, ’textwrap’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r07’, [’typing’, ’Chapter_12.ch12_r06’, ’Chapter_12.ch12_r05’, ’concurrent’]), \n\n... (’Chapter_12.ch12_r08’, [’typing’, ’argparse’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r09’, [’typing’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r10’, [’typing’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r11’, [’typing’, ’pathlib’]), \n\n... (’Chapter_12.ch12_r12’, [’typing’, ’argparse’])\n```", "```py\n     >>> all_imports = set()\n    ```", "```py\n     >>> for item, import_list in import_details: \n\n    ...     for name in import_list: \n\n    ...         all_imports.add(name) \n\n    >>> all_imports == {’Chapter_12.ch12_r06’, ’textwrap’, \n\n    ...     ’Chapter_12.ch12_r05’, ’pathlib’, ’concurrent’, \n\n    ...     ’argparse’, ’typing’} \n\n    True\n    ```", "```py\n    >>> {} \n\n    {}\n    ```", "```py\n    >>> {... \n\n    ...     for item, import_list in import_details \n\n    ...         for name in import_list \n\n    ... } \n\n    {Ellipsis}\n    ```", "```py\n    >>> names = {name \n\n    ...     for item, import_list in import_details \n\n    ...         for name in import_list} \n\n    >>> names ==  {’Chapter_12.ch12_r06’, ’Chapter_12.ch12_r05’, \n\n    ...     ’typing’, ’concurrent’, ’argparse’, ’textwrap’, ’pathlib’} \n\n    True\n    ```", "```py\n>>> import sys \n\n>>> v1 = 7 \n\n>>> v2 = 7+sys.hash_info.modulus \n\n>>> v1 \n\n7 \n\n>>> v2 \n\n2305843009213693958 \n\n>>> hash(v1) \n\n7 \n\n>>> hash(v2) \n\n7\n```", "```py\n>>> collection = {1} \n\n>>> collection \n\n{1} \n\n>>> item = 3 \n\n>>> collection.union({item}) \n\n{1, 3} \n\n>>> collection \n\n{1}\n```", "```py\n>>> collection = collection | {item} \n\n>>> collection \n\n{1, 3} \n```", "```py\n>>> collection.update({4}) \n\n>>> collection \n\n{1, 3, 4}\n```", "```py\n>>> log = \"\"\" \n\n... [2016-03-05T09:29:31-05:00] INFO: Processing ruby_block[print IP] action run (@recipe_files::/home/slott/ch4/deploy.rb line 9) \n\n... [2016-03-05T09:29:31-05:00] INFO: Installed IP: 111.222.111.222 \n\n... [2016-03-05T09:29:31-05:00] INFO: ruby_block[print IP] called \n\n...\n```", "```py\n\n... (Skipping some details)\n```", "```py\n ... \"\"\"\n```", "```py\n>>> import re \n\n>>> pattern = re.compile(r\"IP: \\d+\\.\\d+\\.\\d+\\.\\d+\") \n\n>>> matches = set(pattern.findall(log)) \n\n>>> matches \n\n{’IP: 111.222.111.222’}\n```", "```py\n    >>> to_be_ignored = {’IP: 0.0.0.0’, ’IP: 1.2.3.4’}\n    ```", "```py\n    >>> matches = {’IP: 111.222.111.222’, ’IP: 1.2.3.4’} \n    ```", "```py\n    >>> matches - to_be_ignored \n\n    {’IP: 111.222.111.222’} \n\n    >>> matches.difference(to_be_ignored) \n\n    {’IP: 111.222.111.222’}\n    ```", "```py\n>>> valid_matches = matches - to_be_ignored \n\n>>> valid_matches \n\n{’IP: 111.222.111.222’}\n```", "```py\n>>> valid_matches = matches.copy() \n\n>>> valid_matches.difference_update(to_be_ignored) \n\n>>> valid_matches \n\n{’IP: 111.222.111.222’}\n```", "```py\n>>> valid_matches = matches.copy() \n\n>>> for item in to_be_ignored: \n\n...     if item in valid_matches: \n\n...         valid_matches.remove(item) \n\n>>> valid_matches \n\n{’IP: 111.222.111.222’}\n```", "```py\nimport random \n\nclass Die(str, Enum): \n\n    d_1 = \"\\u2680\" \n\n    d_2 = \"\\u2681\" \n\n    d_3 = \"\\u2682\" \n\n    d_4 = \"\\u2683\" \n\n    d_5 = \"\\u2684\" \n\n    d_6 = \"\\u2685\" \n\ndef zonk(n: int = 6) -> tuple[Die, ...]: \n\n    faces = list(Die) \n\n    return tuple(random.choice(faces) for _ in range(n))\n```", "```py\n>>> zonk() \n\n(<Die.d_6: ’’>, <Die.d_1: ’’>, <Die.d_1: ’’>, \n\n <Die.d_6: ’’>, <Die.d_3: ’’>, <Die.d_2: ’’>)\n```", "```py\n    import collections \n\n    def eval_zonk_6(hand: tuple[Die, ...]) -> str: \n\n        assert len(hand) == 6, \"Only works for 6-dice zonk.\" \n\n        unique: set[Die] = set(hand)\n    ```", "```py\n     faces = list(Die) \n\n        small_straights = [ \n\n            set(faces[:-1]), set(faces[1:]) \n\n        ]\n    ```", "```py\n     if len(unique) == 6: \n\n            return \"large straight\" \n\n        elif len(unique) == 5 and unique in small_straights: \n\n            return \"small straight\" \n\n        elif len(unique) == 2: \n\n            return \"three of a kind\" \n\n        elif len(unique) == 1: \n\n            return \"six of a kind\"\n    ```", "```py\n     elif len(unique) in {3, 4}: \n\n            # 4 unique: wwwxyz (good) or wwxxyz (bad) \n\n            # 3 unique: xxxxyz, xxxyyz (good) or xxyyzz (bad) \n\n            frequencies: set[int] = set( \n\n                collections.Counter(hand).values())\n    ```", "```py\n     if 3 in frequencies or 4 in frequencies: \n\n                return \"three of a kind\" \n\n            elif Die.d_1 in unique: \n\n                return \"ace\" \n    ```", "```py\n     return \"Zonk!\"\n    ```"]