- en: Chapter 3. Look and Feel Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will customize our GUI using Python 3:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating message boxes – information, warning, and error
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create independent message boxes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to create the title of a tkinter window form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing the icon of the main root window
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using a spin box control
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Relief, sunken, and raised appearance of widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating tooltips using Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use the canvas widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will customize some of the widgets in our GUI by changing
    some of their properties. We are also introducing a few new widgets tkinter offers
    us.
  prefs: []
  type: TYPE_NORMAL
- en: The *Creating tooltips using Python* recipe will create a ToolTip OOP-style
    class, which will be a part of the one single Python module we have been using
    up to now.
  prefs: []
  type: TYPE_NORMAL
- en: Creating message boxes – information, warning, and error
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A message box is a pop-up window that gives feedback to the user. It can be
    informational, hinting at potential problems, and even catastrophic errors.
  prefs: []
  type: TYPE_NORMAL
- en: Using Python to create message boxes is very easy.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add functionality to the **Help** | **About** menu item we created in
    the previous recipe. The typical feedback to the user when clicking the **Help**
    | **About** menu in most applications is informational. We start with this information
    and then vary the design pattern to show warnings and errors.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add the following line of code to the top of the module where the import statements
    live:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Next, we will create a callback function that will display a message box. We
    have to locate the code of the callback above the code where we attach the callback
    to the menu item, because this is still procedural and not OOP code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add this code just above the lines where we create the help menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Clicking **Help** | **About** now causes the following pop-up window to appear:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Let''s transform this code into a warning message box pop-up window instead.
    Comment out the previous line and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Running the above code will now result in the following slightly modified message
    box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Displaying an error message box is simple and usually warns the user of a serious
    problem. As above, so below. Comment out and add this code, as we have done here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have added another callback function and attached it as a delegate to handle
    the click event. Now, when we click the **Help** | **About** menu, an action takes
    place. We are creating and displaying the most common pop-up message box dialogs.
    They are modal, so the user can't use the GUI until they click the **OK** button.
  prefs: []
  type: TYPE_NORMAL
- en: In the first example we display an information box, as can be seen by the icon
    to the left of it. Next, we create warning and error message boxes that automatically
    change the icon associated with the pop-up. All we have to do is specify which
    mBox we want to display.
  prefs: []
  type: TYPE_NORMAL
- en: There are different message boxes that display more than one **OK** button and
    we can program our responses according to the user's selection.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is a simple example that illustrates this technique:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Running this GUI code results in a pop-up whose user response can be used to
    branch on the answer of this event-driven GUI loop by saving it in the `answer`
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04829_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The console output using Eclipse shows that clicking the **Yes** button results
    in the Boolean value of `True` being assigned to the `answer` variable.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04829_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'For example, we could use the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: How to create independent message boxes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create our tkinter message boxes as stand-alone top-level
    GUI windows.
  prefs: []
  type: TYPE_NORMAL
- en: We will first notice that, by doing so, we end up with an extra window so we
    will explore ways to hide this window.
  prefs: []
  type: TYPE_NORMAL
- en: In the previous recipe, we invoked tkinter message boxes via our **Help** |
    **About** menu from our main GUI form.
  prefs: []
  type: TYPE_NORMAL
- en: So why would we wish to create an independent message box?
  prefs: []
  type: TYPE_NORMAL
- en: One reason is that we might customize our message boxes and reuse them in several
    of our GUIs. Instead of having to copy and paste the same code into every Python
    GUI we design, we can factor it out of our main GUI code. This can create a small
    reusable component, which we can then import into different Python GUIs.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have already created the title of a message box in the previous recipe. We
    will not reuse the code from the previous recipe, but instead we will build a
    new GUI in very few lines of Python code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can create a simple message box like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in these two windows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This does not look like what we had in mind. Now we have two windows, one undesired
    and the second having its text displayed as its title.
  prefs: []
  type: TYPE_NORMAL
- en: Oops.
  prefs: []
  type: TYPE_NORMAL
- en: Let's fix this now. We can change the Python code by adding a single or double
    quote, followed by a comma.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The first parameter is the title and the second is the text displayed in the
    pop-up message box. By adding an empty pair of single or double quotes followed
    by a comma, we can move our text from the title into the pop-up message box.
  prefs: []
  type: TYPE_NORMAL
- en: We still need a title and we definitely want to get rid of this unnecessary
    second window.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In languages like C#, the same phenomenon of a second window appears. It is
    basically a DOS-style debug window. Many programmers seem not to mind having this
    extra window floating around. I personally find it distasteful from a GUI programming
    perspective. We will remove it next.
  prefs: []
  type: TYPE_NORMAL
- en: The second window is caused by a Windows event loop. We can get rid of it by
    suppressing it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now we have only one window. The `withdraw()` function removes the debug window
    we are not interested in having floating around.
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In order to add a title, all we have to do is place some string into our empty
    first argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Now our dialog has a title:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are passing more arguments into the tkinter constructor of the message box
    to add a title to the window form and display the text in the message box, instead
    of displaying it as its title. This happens due to the position of the arguments
    we are passing. If we leave out an empty quote or double quote, then the message
    box widget takes the first position of the arguments as the title, not the text
    to be displayed within the message box. By passing an empty quote followed by
    a comma, we change where the message box displays the text we are passing into
    the function.
  prefs: []
  type: TYPE_NORMAL
- en: We suppress the second pop-op window that automatically gets created by the
    tkinter message box widget by calling the `withdraw()` method on our main root
    window.
  prefs: []
  type: TYPE_NORMAL
- en: How to create the title of a tkinter window form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The principle of changing the title of a tkinter main root window is the same
    as was discussed in the previous recipe. We just pass in a string as the first
    argument to the constructor of the widget.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of a pop-up dialog window, we create the main root window and give it
    a title.
  prefs: []
  type: TYPE_NORMAL
- en: The GUI displayed in this recipe is the code from the previous chapter. It does
    not build upon the previous recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following code creates the main window and adds a title to it. We have already
    done this in previous recipes. Here, we just focus on this aspect of our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This gives a title to the main root window by using the built-in tkinter `title`
    property. After we create a `Tk()` instance we can use all of the built-in tkinter
    properties to customize our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the icon of the main root window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One way to customize our GUI is to give it a different icon than the default
    icon that ships out of the box with tkinter. Here is how we do this.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are improving our GUI from the previous recipe. We will use an icon that
    ships with Python but you can use any icon you find useful. Make sure you have
    the full path to where the icon lives in your code, or you might get errors.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While it might seem a little bit confusing which recipe of the last chapter
    this recipe refers to, the best approach is to just download the code for this
    book and then step through the code to understand it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Place the following code somewhere above the main event loop. The example uses
    the path where I installed Python 3.4\. You might have to adjust it to match your
    installation directory.
  prefs: []
  type: TYPE_NORMAL
- en: Notice how the "feather" default icon in the top-left corner of the GUI changed.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is another property that ships with tkinter, which ships with Python 3.x.
    `iconbitmap`, is the property we are using to change the icon of our main root
    window form by passing in the absolute (hard-coded) path to an icon. This overrides
    tkinter's default icon, replacing it with our icon of choice.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Using "r" in the string of the absolute path in the code above escapes the backslashes,
    so instead of writing `C:\\` we can use the "raw" string, which lets us write
    the more natural single backslash `C:\`. This is a neat trick Python has created
    for us.
  prefs: []
  type: TYPE_NORMAL
- en: Using a spin box control
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will use a `Spinbox` widget and we will also bind the *Enter*
    key on the keyboard to one of our widgets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are using our tabbed GUI and will add a `Spinbox` widget above the `ScrolledText`
    control. This simply requires us to increment the `ScrolledText` row value by
    one and to insert our new `Spinbox` control in the row above the `Entry` widget.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, we add the `Spinbox` control. Place the following code above the `ScrolledText`
    widget:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This will modify our GUI, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_03_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we will reduce the size of the `Spinbox` widget.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_03_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Next, we add another property to customize our widget further, `bd` is a short-hand
    notation for the `borderwidth` property.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_03_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here, we add functionality to the widget by creating a callback and linking
    it to the control.
  prefs: []
  type: TYPE_NORMAL
- en: This will print the selection of the Spinbox into `ScrolledText` as well as
    onto stdout. The variable named `scr` is our reference to the `ScrolledText` widget.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_03_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Instead of using a range, we can also specify a set of values.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'This will create the following GUI output:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_03_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Notice how, in the first screenshot, our new `Spinbox` control defaulted to
    a width of 20, pushing out the column width of all controls in this column. This
    is not what we want. We gave the widget a range from 0 to 10 and it defaults to
    show the `to=10` value, which is the highest value. If we try to reverse the `from_/to`
    range from 10 to 0, tkinter does not like it. Do try this out for yourself.
  prefs: []
  type: TYPE_NORMAL
- en: In the second screenshot, we reduced the width of the `Spinbox` control, which
    aligned it in the center of the column.
  prefs: []
  type: TYPE_NORMAL
- en: In the third screenshot, we added the `borderwidth` property of the Spinbox,
    which automatically made the entire `Spinbox` appear no longer flat but three-dimensional.
  prefs: []
  type: TYPE_NORMAL
- en: In the fourth screenshot, we added a callback function to display the number
    chosen in the `ScrolledText` widget and print it to the standard out-stream. We
    added "\n" to print on new lines. Notice how the default value does not get printed.
    It is only when we click the control that the callback function gets called. By
    clicking the up arrow with the default of 10, we can print the "10" value.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we restrict the values available to a hard-coded set. This could also
    be read in from a data source (for example, a text or XML file).
  prefs: []
  type: TYPE_NORMAL
- en: Relief, sunken, and raised appearance of widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We can control the appearance of our `Spinbox` widgets by a property that makes
    them look either in relief, sunken, or in a raised format.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will add one more `Spinbox` control to demonstrate the available appearances
    of widgets using the relief property of the `Spinbox` control.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, let's increase the `borderwidth` to distinguish our second `Spinbox`
    from the first `Spinbox`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/B04829_03_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Both of our Spinbox widgets above have the same relief style. The only difference
    is that our new widget to the right of the first Spinbox has a much larger border
    width.
  prefs: []
  type: TYPE_NORMAL
- en: In our code, we did not specify which relief property to use, so the relief
    defaulted to tk.SUNKEN.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are the available relief property options that can be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '| tk.SUNKEN | tk.RAISED | tk.FLAT | tk.GROOVE | tk.RIDGE |'
  prefs: []
  type: TYPE_TB
- en: By assigning the different available options to the `relief` property, we can
    create different appearances for this widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Assigning the tk.RIDGE relief and reducing the border width to the same value
    as our first Spinbox widget results in the following GUI:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/B04829_03_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we created a second `Spinbox` aligned in the second column (index ==
    1). It defaults to `SUNKEN`, so it looks similar to our first `Spinbox`. We distinguished
    the two widgets by increasing the border width of the second control (the one
    to the right).
  prefs: []
  type: TYPE_NORMAL
- en: Next, we implicitly set the relief property of the Spinbox widget. We made the
    border width the same as our first Spinbox because, by giving it a different relief,
    the differences became visible without having to change any other properties.
  prefs: []
  type: TYPE_NORMAL
- en: Creating tooltips using Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe will show us how to create ToolTips. When the user hovers the mouse
    over a widget, additional information will be available in the form of a ToolTip.
  prefs: []
  type: TYPE_NORMAL
- en: We will code this additional information into our GUI.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We are adding more useful functionality to our GUI. Surprisingly, adding a ToolTip
    to our controls should be simple, but it is not as simple as we wish it to be.
  prefs: []
  type: TYPE_NORMAL
- en: In order to achieve this desired functionality, we will place our ToolTip code
    into its own OOP class.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Add this class just below the import statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In an **object-oriented programming** (**OOP**) approach we create a new class
    in our Python module. Python allows us to place more than one class into the same
    Python module and it also enables us to "mix-and-match" classes and regular functions
    in the same module.
  prefs: []
  type: TYPE_NORMAL
- en: The code above is doing exactly this.
  prefs: []
  type: TYPE_NORMAL
- en: The `ToolTip` class is a Python class and in order to use it, we have to instantiate
    it.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with OOP programming, "instantiating an object to create
    an instance of the class" may sound rather boring.
  prefs: []
  type: TYPE_NORMAL
- en: The principle is quite simple and very similar to creating a Python function
    via a `def` statement and then later in the code actually calling this function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In a very similar manner, we first create a blueprint of a class and simply
    assign it to a variable by adding parentheses to the name of the class as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The above code prints out a memory address and also shows that our variable
    now has a reference to this class instance.
  prefs: []
  type: TYPE_NORMAL
- en: The cool thing about OOP is that we can create many instances of the same class.
  prefs: []
  type: TYPE_NORMAL
- en: In our preceding code, we declare a Python class and explicitly make it inherit
    from the object that is the foundation of all Python classes. We can also leave
    it out as we have done in the `AClass` code example because it is the default
    for all Python classes.
  prefs: []
  type: TYPE_NORMAL
- en: After all of the necessary tooltip creation code that occurs within the `ToolTip`
    class, we next switch over to non-OOP Python programming by creating a function
    just below it.
  prefs: []
  type: TYPE_NORMAL
- en: We define the function `createToolTip()` and it expects one of our GUI widgets
    to be passed in as an argument so we can display a ToolTip when we hover our mouse
    over this control.
  prefs: []
  type: TYPE_NORMAL
- en: The `createToolTip()` function actually creates a new instance of our `ToolTip`
    class for every widget we call it for.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can add a tooltip for our Spinbox widget, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: As well as for all of our other GUI widgets in the very same manner. We just
    have to pass in the parent of the widget we wish to have a tooltip displaying
    some extra information. For our ScrolledText widget we made the variable `scr`
    point to it so this is what we pass into the constructor of our ToolTip creation
    function.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is the beginning of OOP programming in this book. This might appear a little
    bit advanced, but do not worry, we will explain everything and it actually does
    work!
  prefs: []
  type: TYPE_NORMAL
- en: Well, running this code actually does NOT work or make any difference as of
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code just below the creation of the spinner:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Now, when we hover the mouse over the spinner widget, we get a tooltip, providing
    additional information to the user.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04829_03_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: We are calling the function that creates the tooltip, and then we pass in a
    reference to the widget and the text we wish to display when we hover the mouse
    over the widget.
  prefs: []
  type: TYPE_NORMAL
- en: The rest of the recipes in this book will use OOP when it makes sense. Here,
    we show the simplest OOP example possible. As a default, every Python class we
    create inherits from the `object` base class. Python, being the pragmatic programming
    language that it truly is, simplifies the class creation process.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write this syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also simplify it by leaving the default base class out:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In this same pattern, we can inherit and expand any tkinter class.
  prefs: []
  type: TYPE_NORMAL
- en: How to use the canvas widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe shows how to add dramatic color effects to our GUI by using the
    tkinter canvas widget.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will improve our previous code and the look of our GUI by adding some more
    colors to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will create a third tab in our GUI in order to isolate our new code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create the new third tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Next, we use another built-in widget of tkinter, the canvas. A lot of people
    like this widget because it has powerful capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows the result created by running the preceding code
    and clicking on the new **Tab 3**. It really is orange and blue when you run the
    code. In this non-colored book, this might not be so visually obvious, but those
    colors are true; you can trust me on this.
  prefs: []
  type: TYPE_NORMAL
- en: You can check out the graphing and drawing capabilities by searching online.
    I will not go deeper into this widget in this book (but it is very cool).
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04829_03_20.jpg)'
  prefs: []
  type: TYPE_IMG
