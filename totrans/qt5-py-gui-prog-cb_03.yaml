- en: Chapter 3. Look and Feel Customization
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章. 外观和感觉自定义
- en: 'In this chapter, we will customize our GUI using Python 3:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用 Python 3 来定制我们的图形用户界面：
- en: Creating message boxes – information, warning, and error
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建消息框 – 信息、警告和错误
- en: How to create independent message boxes
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建独立的消息框
- en: How to create the title of a tkinter window form
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建tkinter窗口的标题
- en: Changing the icon of the main root window
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更改主根窗口的图标
- en: Using a spin box control
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用旋转框控件
- en: Relief, sunken, and raised appearance of widgets
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 小部件的缓解、凹陷和凸起外观
- en: Creating tooltips using Python
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 创建工具提示
- en: How to use the canvas widget
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何使用画布小部件
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we will customize some of the widgets in our GUI by changing
    some of their properties. We are also introducing a few new widgets tkinter offers
    us.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将通过更改一些属性来定制我们GUI中的某些小部件。同时，我们还将介绍一些tkinter为我们提供的新小部件。
- en: The *Creating tooltips using Python* recipe will create a ToolTip OOP-style
    class, which will be a part of the one single Python module we have been using
    up to now.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*使用Python创建工具提示* 的配方将创建一个 OOP 风格的工具提示类，这将是我们迄今为止一直使用的单个 Python 模块的一部分。'
- en: Creating message boxes – information, warning, and error
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建消息框 – 信息、警告和错误
- en: A message box is a pop-up window that gives feedback to the user. It can be
    informational, hinting at potential problems, and even catastrophic errors.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 消息框是一种弹出窗口，用于向用户反馈信息。它可以提供信息性内容，暗示潜在问题，甚至可能显示灾难性错误。
- en: Using Python to create message boxes is very easy.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 创建消息框非常简单。
- en: Getting ready
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will add functionality to the **Help** | **About** menu item we created in
    the previous recipe. The typical feedback to the user when clicking the **Help**
    | **About** menu in most applications is informational. We start with this information
    and then vary the design pattern to show warnings and errors.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在前一个菜谱中创建的**帮助** | **关于**菜单项中添加功能。在大多数应用程序中，当点击**帮助** | **关于**菜单时，用户通常会收到信息反馈。我们从这个信息开始，然后改变设计模式以显示警告和错误。
- en: How to do it...
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Add the following line of code to the top of the module where the import statements
    live:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码行添加到包含导入语句的模块顶部：
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Next, we will create a callback function that will display a message box. We
    have to locate the code of the callback above the code where we attach the callback
    to the menu item, because this is still procedural and not OOP code.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将创建一个回调函数来显示一个消息框。我们必须将回调函数的代码放在我们将回调附加到菜单项的代码之上，因为这部分代码仍然是过程式代码，而不是面向对象的代码。
- en: 'Add this code just above the lines where we create the help menu:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建帮助菜单的行上方添加此代码：
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Clicking **Help** | **About** now causes the following pop-up window to appear:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在点击**帮助** | **关于**将显示以下弹出窗口：
- en: '![How to do it...](img/B04829_03_01.jpg)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_01.jpg)'
- en: 'Let''s transform this code into a warning message box pop-up window instead.
    Comment out the previous line and add the following code:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们将这段代码转换为一个警告信息弹窗。注释掉上一行，并添加以下代码：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Running the above code will now result in the following slightly modified message
    box:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 运行上述代码现在将导致以下略微修改的消息框：
- en: '![How to do it...](img/B04829_03_02.jpg)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_02.jpg)'
- en: 'Displaying an error message box is simple and usually warns the user of a serious
    problem. As above, so below. Comment out and add this code, as we have done here:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 显示错误信息框很简单，通常它会警告用户存在一个严重问题。正如上面所说，下面也是如此。注释掉并添加以下代码，就像我们在这里所做的那样：
- en: '[PRE3]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '![How to do it...](img/B04829_03_03.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_03.jpg)'
- en: How it works...
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We have added another callback function and attached it as a delegate to handle
    the click event. Now, when we click the **Help** | **About** menu, an action takes
    place. We are creating and displaying the most common pop-up message box dialogs.
    They are modal, so the user can't use the GUI until they click the **OK** button.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了另一个回调函数，并将其作为代理附加以处理点击事件。现在，当我们点击**帮助** | **关于**菜单时，将执行一个操作。我们正在创建并显示最常见的弹出消息框对话框。它们是模态的，因此用户在点击**确定**按钮之前无法使用GUI。
- en: In the first example we display an information box, as can be seen by the icon
    to the left of it. Next, we create warning and error message boxes that automatically
    change the icon associated with the pop-up. All we have to do is specify which
    mBox we want to display.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一个例子中，我们展示了一个信息框，如它左侧的图标所示。接下来，我们创建了警告和错误信息框，这些信息框会自动更改与弹出窗口关联的图标。我们只需指定要显示哪个mBox即可。
- en: There are different message boxes that display more than one **OK** button and
    we can program our responses according to the user's selection.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 有不同的消息框显示多个**确定**按钮，并且我们可以根据用户的选取编程我们的响应。
- en: 'The following is a simple example that illustrates this technique:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个简单示例，说明了这项技术：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Running this GUI code results in a pop-up whose user response can be used to
    branch on the answer of this event-driven GUI loop by saving it in the `answer`
    variable.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运行此GUI代码将弹出一个窗口，用户对该窗口的响应可以用来根据此事件驱动GUI循环的答案进行分支，并将其保存在`answer`变量中。
- en: '![How it works...](img/B04829_03_04.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04829_03_04.jpg)'
- en: The console output using Eclipse shows that clicking the **Yes** button results
    in the Boolean value of `True` being assigned to the `answer` variable.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Eclipse 的控制台输出显示，点击 **是** 按钮会将布尔值 `True` 赋值给 `answer` 变量。
- en: '![How it works...](img/B04829_03_05.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04829_03_05.jpg)'
- en: 'For example, we could use the following code:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们可以使用以下代码：
- en: '[PRE5]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: How to create independent message boxes
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建独立的消息框
- en: In this recipe, we will create our tkinter message boxes as stand-alone top-level
    GUI windows.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将创建我们的tkinter消息框作为独立的顶层GUI窗口。
- en: We will first notice that, by doing so, we end up with an extra window so we
    will explore ways to hide this window.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先会注意到，这样做会导致多出一个窗口，因此我们将探讨隐藏这个窗口的方法。
- en: In the previous recipe, we invoked tkinter message boxes via our **Help** |
    **About** menu from our main GUI form.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个菜谱中，我们通过主GUI表单的**帮助** | **关于**菜单调用了tkinter消息框。
- en: So why would we wish to create an independent message box?
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 那么我们为什么想要创建一个独立的消息框呢？
- en: One reason is that we might customize our message boxes and reuse them in several
    of our GUIs. Instead of having to copy and paste the same code into every Python
    GUI we design, we can factor it out of our main GUI code. This can create a small
    reusable component, which we can then import into different Python GUIs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 一个原因是，我们可能会自定义我们的消息框并在多个GUI中重复使用它们。我们不必在设计的每个Python GUI中复制和粘贴相同的代码，而是可以将这部分代码从主GUI代码中提取出来。这样就可以创建一个小的可重复使用的组件，然后我们可以将其导入到不同的Python
    GUI中。
- en: Getting ready
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We have already created the title of a message box in the previous recipe. We
    will not reuse the code from the previous recipe, but instead we will build a
    new GUI in very few lines of Python code.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经在之前的菜谱中创建了消息框的标题。我们不会重用之前的代码，而是将通过非常少的Python代码行来构建一个新的GUI。
- en: How to do it...
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We can create a simple message box like this:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以创建一个简单的消息框，如下所示：
- en: '[PRE6]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This will result in these two windows:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致出现这两个窗口：
- en: '![How to do it...](img/B04829_03_06.jpg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_06.jpg)'
- en: This does not look like what we had in mind. Now we have two windows, one undesired
    and the second having its text displayed as its title.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这看起来并不像我们想象中的样子。现在我们有两个窗口，一个是未期望的，另一个的文本显示为其标题。
- en: Oops.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 哎呀。
- en: Let's fix this now. We can change the Python code by adding a single or double
    quote, followed by a comma.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们立即解决这个问题。我们可以通过添加一个单引号或双引号，然后跟一个逗号来修改 Python 代码。
- en: '[PRE7]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '![How to do it...](img/B04829_03_07.jpg)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_07.jpg)'
- en: The first parameter is the title and the second is the text displayed in the
    pop-up message box. By adding an empty pair of single or double quotes followed
    by a comma, we can move our text from the title into the pop-up message box.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个参数是标题，第二个参数是在弹出消息框中显示的文本。通过添加一个空的单引号或双引号对，后面跟着一个逗号，我们可以将我们的文本从标题移动到弹出消息框中。
- en: We still need a title and we definitely want to get rid of this unnecessary
    second window.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然需要一个标题，我们肯定想摆脱这个不必要的第二个窗口。
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: In languages like C#, the same phenomenon of a second window appears. It is
    basically a DOS-style debug window. Many programmers seem not to mind having this
    extra window floating around. I personally find it distasteful from a GUI programming
    perspective. We will remove it next.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在像C#这样的语言中，也会出现第二个窗口的现象。这基本上是一个DOS风格的调试窗口。许多程序员似乎并不介意有这样一个额外的窗口漂浮在周围。我个人从GUI编程的角度来看，觉得这很令人不快。我们将在下一版本中移除它。
- en: The second window is caused by a Windows event loop. We can get rid of it by
    suppressing it.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个窗口是由 Windows 事件循环引起的。我们可以通过抑制它来消除它。
- en: 'Add the following code:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 添加以下代码：
- en: '[PRE8]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Now we have only one window. The `withdraw()` function removes the debug window
    we are not interested in having floating around.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们只有一个窗口。`withdraw()` 函数移除了我们不希望漂浮在周围的调试窗口。
- en: '![How to do it...](img/B04829_03_08.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_08.jpg)'
- en: In order to add a title, all we have to do is place some string into our empty
    first argument.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 为了添加标题，我们只需在我们的空第一个参数中放入一些字符串即可。
- en: 'For example:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 例如：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now our dialog has a title:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们的对话有一个标题：
- en: '![How to do it...](img/B04829_03_09.jpg)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_09.jpg)'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: We are passing more arguments into the tkinter constructor of the message box
    to add a title to the window form and display the text in the message box, instead
    of displaying it as its title. This happens due to the position of the arguments
    we are passing. If we leave out an empty quote or double quote, then the message
    box widget takes the first position of the arguments as the title, not the text
    to be displayed within the message box. By passing an empty quote followed by
    a comma, we change where the message box displays the text we are passing into
    the function.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们向消息框的tkinter构造函数传递了更多的参数，以在窗口表单中添加标题并显示消息框中的文本，而不是将其显示为标题。这是由于我们传递参数的位置造成的。如果我们省略一个空引号或双引号，那么消息框小部件将参数的第一个位置作为标题，而不是消息框内要显示的文本。通过传递一个空引号后跟一个逗号，我们改变了消息框显示我们传递给函数的文本的位置。
- en: We suppress the second pop-op window that automatically gets created by the
    tkinter message box widget by calling the `withdraw()` method on our main root
    window.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过在主根窗口上调用`withdraw()`方法来抑制由tkinter消息框小部件自动创建的第二个弹出窗口。
- en: How to create the title of a tkinter window form
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何创建tkinter窗口的标题
- en: The principle of changing the title of a tkinter main root window is the same
    as was discussed in the previous recipe. We just pass in a string as the first
    argument to the constructor of the widget.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 改变 tkinter 主根窗口标题的原则与之前讨论的食谱相同。我们只需将一个字符串作为第一个参数传递给小部件的构造函数。
- en: Getting ready
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: Instead of a pop-up dialog window, we create the main root window and give it
    a title.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 不同于弹出对话框，我们创建主根窗口并给它一个标题。
- en: The GUI displayed in this recipe is the code from the previous chapter. It does
    not build upon the previous recipe in this chapter.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中显示的GUI是上一章的代码。它并不基于本章之前的食谱构建。
- en: How to do it...
  id: totrans-85
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: The following code creates the main window and adds a title to it. We have already
    done this in previous recipes. Here, we just focus on this aspect of our GUI.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码创建主窗口并为其添加标题。我们已经在之前的菜谱中做过这个操作。在这里，我们只关注我们GUI的这个方面。
- en: '[PRE10]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '![How to do it...](img/B04829_03_10.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_10.jpg)'
- en: How it works...
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This gives a title to the main root window by using the built-in tkinter `title`
    property. After we create a `Tk()` instance we can use all of the built-in tkinter
    properties to customize our GUI.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过使用内置的tkinter `title` 属性为主要的根窗口提供了一个标题。在我们创建一个 `Tk()` 实例之后，我们可以使用所有内置的tkinter属性来自定义我们的GUI。
- en: Changing the icon of the main root window
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更改主根窗口的图标
- en: One way to customize our GUI is to give it a different icon than the default
    icon that ships out of the box with tkinter. Here is how we do this.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 修改我们的GUI的一种方法是为它提供一个不同于tkinter默认图标的不同图标。以下是我们的操作步骤。
- en: Getting ready
  id: totrans-93
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We are improving our GUI from the previous recipe. We will use an icon that
    ships with Python but you can use any icon you find useful. Make sure you have
    the full path to where the icon lives in your code, or you might get errors.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在改进之前的GUI。我们将使用随Python一起提供的图标，但你也可以使用任何你认为有用的图标。确保你有图标所在位置的完整路径，否则可能会出现错误。
- en: Note
  id: totrans-95
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: While it might seem a little bit confusing which recipe of the last chapter
    this recipe refers to, the best approach is to just download the code for this
    book and then step through the code to understand it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然可能有点令人困惑，不知道这个菜谱指的是上一章的哪个菜谱，但最好的方法就是直接下载这本书的代码，然后逐步阅读代码来理解它。
- en: How to do it...
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Place the following code somewhere above the main event loop. The example uses
    the path where I installed Python 3.4\. You might have to adjust it to match your
    installation directory.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 将以下代码放置在主事件循环上方某处。示例使用的是我安装Python 3.4的路径。你可能需要调整它以匹配你的安装目录。
- en: Notice how the "feather" default icon in the top-left corner of the GUI changed.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 注意到GUI左上角的默认“羽毛”图标已发生变化。
- en: '[PRE11]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '![How to do it...](img/B04829_03_11.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_11.jpg)'
- en: How it works...
  id: totrans-102
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is another property that ships with tkinter, which ships with Python 3.x.
    `iconbitmap`, is the property we are using to change the icon of our main root
    window form by passing in the absolute (hard-coded) path to an icon. This overrides
    tkinter's default icon, replacing it with our icon of choice.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这是tkinter自带的一个属性，tkinter是Python 3.x的一部分。`iconbitmap`是我们要使用的属性，通过传入一个图标文件的绝对（硬编码）路径来改变我们主根窗口的图标。这会覆盖tkinter的默认图标，用我们选择的图标替换它。
- en: Note
  id: totrans-104
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意事项
- en: Using "r" in the string of the absolute path in the code above escapes the backslashes,
    so instead of writing `C:\\` we can use the "raw" string, which lets us write
    the more natural single backslash `C:\`. This is a neat trick Python has created
    for us.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在上述代码的绝对路径字符串中使用 "r" 可以转义反斜杠，因此我们不必写 `C:\\`，而是可以使用“原始”字符串，这样我们就可以写出更自然的单个反斜杠
    `C:\`。这是 Python 为我们创造的一个巧妙技巧。
- en: Using a spin box control
  id: totrans-106
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用旋转框控件
- en: In this recipe, we will use a `Spinbox` widget and we will also bind the *Enter*
    key on the keyboard to one of our widgets.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将使用一个`Spinbox`小部件，并且还将把键盘上的*Enter*键绑定到我们的小部件之一。
- en: Getting ready
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We are using our tabbed GUI and will add a `Spinbox` widget above the `ScrolledText`
    control. This simply requires us to increment the `ScrolledText` row value by
    one and to insert our new `Spinbox` control in the row above the `Entry` widget.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用我们的标签式GUI，并将一个`Spinbox`小部件添加到`ScrolledText`控件上方。这仅仅需要我们将`ScrolledText`的行值增加一个，并在`Entry`小部件的上方插入我们的新`Spinbox`控件。
- en: How to do it...
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First, we add the `Spinbox` control. Place the following code above the `ScrolledText`
    widget:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们添加`Spinbox`控件。将以下代码放置在`ScrolledText`小部件之上：
- en: '[PRE12]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'This will modify our GUI, as shown:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 这将修改我们的图形用户界面，如下所示：
- en: '![How to do it...](img/B04829_03_12.jpg)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_12.jpg)'
- en: Next, we will reduce the size of the `Spinbox` widget.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将减小`Spinbox`小部件的大小。
- en: '[PRE13]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '![How to do it...](img/B04829_03_13.jpg)'
  id: totrans-117
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_13.jpg)'
- en: Next, we add another property to customize our widget further, `bd` is a short-hand
    notation for the `borderwidth` property.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们添加另一个属性以进一步自定义我们的小部件，`bd` 是 `borderwidth` 属性的简写表示。
- en: '[PRE14]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '![How to do it...](img/B04829_03_14.jpg)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_14.jpg)'
- en: Here, we add functionality to the widget by creating a callback and linking
    it to the control.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们通过创建一个回调并将其链接到控件来为小部件添加功能。
- en: This will print the selection of the Spinbox into `ScrolledText` as well as
    onto stdout. The variable named `scr` is our reference to the `ScrolledText` widget.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把 Spinbox 的选择打印到 `ScrolledText` 中，以及输出到 stdout。名为 `scr` 的变量是我们对 `ScrolledText`
    小部件的引用。
- en: '[PRE15]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![How to do it...](img/B04829_03_15.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_15.jpg)'
- en: Instead of using a range, we can also specify a set of values.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以指定一组值，而不是使用一个范围。
- en: '[PRE16]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'This will create the following GUI output:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建以下GUI输出：
- en: '![How to do it...](img/B04829_03_16.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_16.jpg)'
- en: How it works...
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Notice how, in the first screenshot, our new `Spinbox` control defaulted to
    a width of 20, pushing out the column width of all controls in this column. This
    is not what we want. We gave the widget a range from 0 to 10 and it defaults to
    show the `to=10` value, which is the highest value. If we try to reverse the `from_/to`
    range from 10 to 0, tkinter does not like it. Do try this out for yourself.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在第一张截图里，我们新的`Spinbox`控件默认宽度为20，这导致该列中所有控件的列宽都被推宽了。这并不是我们想要的效果。我们给小部件设置了从0到10的范围，但它默认显示`to=10`的值，这是最大值。如果我们尝试将`from_/to`范围从10反转到0，tkinter并不喜欢这样做。请亲自尝试一下。
- en: In the second screenshot, we reduced the width of the `Spinbox` control, which
    aligned it in the center of the column.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二张截图，我们减小了`Spinbox`控制条的宽度，使其与列的中心对齐。
- en: In the third screenshot, we added the `borderwidth` property of the Spinbox,
    which automatically made the entire `Spinbox` appear no longer flat but three-dimensional.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在第三张截图，我们添加了 Spinbox 的 `borderwidth` 属性，这使得整个 `Spinbox` 自动呈现出不再扁平而是三维的效果。
- en: In the fourth screenshot, we added a callback function to display the number
    chosen in the `ScrolledText` widget and print it to the standard out-stream. We
    added "\n" to print on new lines. Notice how the default value does not get printed.
    It is only when we click the control that the callback function gets called. By
    clicking the up arrow with the default of 10, we can print the "10" value.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在第四张截图，我们添加了一个回调函数来显示在`ScrolledText`小部件中选择的数字，并将其打印到标准输出流。我们添加了"\n"来换行打印。注意默认值并没有被打印出来。只有当我们点击控件时，回调函数才会被调用。通过点击带有默认值10的上箭头，我们可以打印出"10"这个值。
- en: Lastly, we restrict the values available to a hard-coded set. This could also
    be read in from a data source (for example, a text or XML file).
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将可用的值限制在一个硬编码的集合中。这些值也可以从数据源（例如，一个文本或XML文件）中读取。
- en: Relief, sunken, and raised appearance of widgets
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 小部件的缓解、凹陷和凸起外观
- en: We can control the appearance of our `Spinbox` widgets by a property that makes
    them look either in relief, sunken, or in a raised format.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过一个属性来控制我们的`Spinbox`小部件的外观，使其看起来是凸起的、凹进的，或者以提升格式显示。
- en: Getting ready
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will add one more `Spinbox` control to demonstrate the available appearances
    of widgets using the relief property of the `Spinbox` control.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个额外的`Spinbox`控件来演示使用`Spinbox`控件的浮雕属性所能提供的控件外观。
- en: How to do it...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: First, let's increase the `borderwidth` to distinguish our second `Spinbox`
    from the first `Spinbox`.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们将`borderwidth`增加，以便区分我们的第二个`Spinbox`和第一个`Spinbox`。
- en: '[PRE17]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '![How to do it...](img/B04829_03_17.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_17.jpg)'
- en: Both of our Spinbox widgets above have the same relief style. The only difference
    is that our new widget to the right of the first Spinbox has a much larger border
    width.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们上面的两个 Spinbox 小部件具有相同的浮雕样式。唯一的区别是，位于第一个 Spinbox 右侧的新部件具有更大的边框宽度。
- en: In our code, we did not specify which relief property to use, so the relief
    defaulted to tk.SUNKEN.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的代码中，我们没有指定使用哪种缓解属性，因此缓解默认为 tk.SUNKEN。
- en: 'Here are the available relief property options that can be set:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是可以设置的可用缓解属性选项：
- en: '| tk.SUNKEN | tk.RAISED | tk.FLAT | tk.GROOVE | tk.RIDGE |'
  id: totrans-146
  prefs: []
  type: TYPE_TB
- en: By assigning the different available options to the `relief` property, we can
    create different appearances for this widget.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将不同的可用选项分配给`relief`属性，我们可以为这个小部件创建不同的外观。
- en: 'Assigning the tk.RIDGE relief and reducing the border width to the same value
    as our first Spinbox widget results in the following GUI:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 将 tk.RIDGE 风格应用于边框并使边框宽度与我们的第一个 Spinbox 小部件相同，结果得到以下 GUI：
- en: '![How to do it...](img/B04829_03_18.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
  zh: '![如何做...](img/B04829_03_18.jpg)'
- en: How it works...
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: First, we created a second `Spinbox` aligned in the second column (index ==
    1). It defaults to `SUNKEN`, so it looks similar to our first `Spinbox`. We distinguished
    the two widgets by increasing the border width of the second control (the one
    to the right).
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们在第二列（索引 == 1）创建了一个第二个 `Spinbox`。它默认为 `SUNKEN`，因此看起来与我们的第一个 `Spinbox` 类似。我们通过增加第二个控件（右侧的控件）的边框宽度来区分这两个小部件。
- en: Next, we implicitly set the relief property of the Spinbox widget. We made the
    border width the same as our first Spinbox because, by giving it a different relief,
    the differences became visible without having to change any other properties.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们隐式地设置了 Spinbox 小部件的凹凸属性。我们将边框宽度设置为与我们的第一个 Spinbox 相同，因为通过给它不同的凹凸效果，差异在没有改变其他任何属性的情况下就变得明显了。
- en: Creating tooltips using Python
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 创建工具提示
- en: This recipe will show us how to create ToolTips. When the user hovers the mouse
    over a widget, additional information will be available in the form of a ToolTip.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱将向我们展示如何创建工具提示。当用户将鼠标悬停在控件上时，将以工具提示的形式提供额外的信息。
- en: We will code this additional information into our GUI.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将把这个额外信息编码到我们的图形用户界面中。
- en: Getting ready
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We are adding more useful functionality to our GUI. Surprisingly, adding a ToolTip
    to our controls should be simple, but it is not as simple as we wish it to be.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在为我们的图形用户界面添加更多有用的功能。令人惊讶的是，给我们的控件添加工具提示应该很简单，但实际上并没有我们希望的那样简单。
- en: In order to achieve this desired functionality, we will place our ToolTip code
    into its own OOP class.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 为了实现这个期望的功能，我们将把我们的工具提示代码放入它自己的面向对象（OOP）类中。
- en: How to do it...
  id: totrans-159
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Add this class just below the import statements:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在导入语句下方添加此类：
- en: '[PRE18]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In an **object-oriented programming** (**OOP**) approach we create a new class
    in our Python module. Python allows us to place more than one class into the same
    Python module and it also enables us to "mix-and-match" classes and regular functions
    in the same module.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在面向对象编程（**OOP**）方法中，我们在 Python 模块中创建一个新的类。Python 允许我们在同一个 Python 模块中放置多个类，并且它还使我们能够在同一个模块中“混合匹配”类和常规函数。
- en: The code above is doing exactly this.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 上面的代码正是这样做的。
- en: The `ToolTip` class is a Python class and in order to use it, we have to instantiate
    it.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`ToolTip`类是一个Python类，为了使用它，我们必须实例化它。'
- en: If you are not familiar with OOP programming, "instantiating an object to create
    an instance of the class" may sound rather boring.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对面向对象编程（OOP）不熟悉，"实例化一个对象以创建类的实例"可能听起来相当无聊。
- en: The principle is quite simple and very similar to creating a Python function
    via a `def` statement and then later in the code actually calling this function.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 原理非常简单，非常类似于通过`def`语句创建一个Python函数，然后在代码的后续部分实际调用这个函数。
- en: 'In a very similar manner, we first create a blueprint of a class and simply
    assign it to a variable by adding parentheses to the name of the class as follows:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 以非常相似的方式，我们首先创建一个类的蓝图，并通过在类名后添加括号将其简单地分配给一个变量，如下所示：
- en: '[PRE19]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The above code prints out a memory address and also shows that our variable
    now has a reference to this class instance.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码打印出一个内存地址，同时也显示我们的变量现在对这个类实例有一个引用。
- en: The cool thing about OOP is that we can create many instances of the same class.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 面向对象编程（OOP）的酷之处在于我们可以创建同一类的多个实例。
- en: In our preceding code, we declare a Python class and explicitly make it inherit
    from the object that is the foundation of all Python classes. We can also leave
    it out as we have done in the `AClass` code example because it is the default
    for all Python classes.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们之前的代码中，我们声明了一个Python类，并明确使其继承自所有Python类的基础对象。我们也可以像在`AClass`代码示例中所做的那样省略它，因为这是所有Python类的默认设置。
- en: After all of the necessary tooltip creation code that occurs within the `ToolTip`
    class, we next switch over to non-OOP Python programming by creating a function
    just below it.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在`ToolTip`类中完成所有必要的提示信息创建代码之后，我们接下来通过创建一个位于其下方的函数来转向非面向对象的Python编程。
- en: We define the function `createToolTip()` and it expects one of our GUI widgets
    to be passed in as an argument so we can display a ToolTip when we hover our mouse
    over this control.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了函数 `createToolTip()`，它期望传入我们 GUI 小部件中的一个作为参数，这样我们就可以在鼠标悬停在此控件上时显示工具提示。
- en: The `createToolTip()` function actually creates a new instance of our `ToolTip`
    class for every widget we call it for.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '`createToolTip()` 函数实际上为每个我们调用它的小部件创建我们 `ToolTip` 类的新实例。'
- en: 'We can add a tooltip for our Spinbox widget, like this:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以为我们的 Spinbox 小部件添加一个工具提示，如下所示：
- en: '[PRE20]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: As well as for all of our other GUI widgets in the very same manner. We just
    have to pass in the parent of the widget we wish to have a tooltip displaying
    some extra information. For our ScrolledText widget we made the variable `scr`
    point to it so this is what we pass into the constructor of our ToolTip creation
    function.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 以及以完全相同的方式处理我们所有的其他GUI小部件。我们只需传入我们希望显示额外信息的工具提示的父小部件。对于我们的ScrolledText小部件，我们让变量`scr`指向它，因此这就是我们传递给我们的工具提示创建函数构造函数的内容。
- en: '[PRE21]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-179
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: This is the beginning of OOP programming in this book. This might appear a little
    bit advanced, but do not worry, we will explain everything and it actually does
    work!
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这本书中面向对象编程（OOP）的开始。这可能会显得有些高级，但请不要担心，我们会解释一切，实际上它确实可行！
- en: Well, running this code actually does NOT work or make any difference as of
    yet.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，运行这段代码实际上目前还没有起作用或者产生任何变化。
- en: 'Add the following code just below the creation of the spinner:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建旋转器的下方添加以下代码：
- en: '[PRE22]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Now, when we hover the mouse over the spinner widget, we get a tooltip, providing
    additional information to the user.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，当我们将鼠标悬停在旋转控件上时，我们会看到一个工具提示，为用户提供额外的信息。
- en: '![How it works...](img/B04829_03_19.jpg)'
  id: totrans-185
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04829_03_19.jpg)'
- en: We are calling the function that creates the tooltip, and then we pass in a
    reference to the widget and the text we wish to display when we hover the mouse
    over the widget.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在调用创建工具提示的函数，然后我们传递一个对小部件的引用以及当我们将鼠标悬停在工具上时要显示的文本。
- en: The rest of the recipes in this book will use OOP when it makes sense. Here,
    we show the simplest OOP example possible. As a default, every Python class we
    create inherits from the `object` base class. Python, being the pragmatic programming
    language that it truly is, simplifies the class creation process.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'We can write this syntax:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以写出这个语法：
- en: '[PRE23]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We can also simplify it by leaving the default base class out:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过省略默认基类来简化它：
- en: '[PRE24]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In this same pattern, we can inherit and expand any tkinter class.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个相同的模式中，我们可以继承和扩展任何tkinter类。
- en: How to use the canvas widget
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 如何使用画布小部件
- en: This recipe shows how to add dramatic color effects to our GUI by using the
    tkinter canvas widget.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-195
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备就绪
- en: We will improve our previous code and the look of our GUI by adding some more
    colors to it.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will create a third tab in our GUI in order to isolate our new code.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the code to create the new third tab:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Next, we use another built-in widget of tkinter, the canvas. A lot of people
    like this widget because it has powerful capabilities.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: How it works...
  id: totrans-203
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The following screenshot shows the result created by running the preceding code
    and clicking on the new **Tab 3**. It really is orange and blue when you run the
    code. In this non-colored book, this might not be so visually obvious, but those
    colors are true; you can trust me on this.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: You can check out the graphing and drawing capabilities by searching online.
    I will not go deeper into this widget in this book (but it is very cool).
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04829_03_20.jpg)'
  id: totrans-206
  prefs: []
  type: TYPE_IMG
