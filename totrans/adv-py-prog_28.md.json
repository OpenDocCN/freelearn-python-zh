["```py\nclass RenameFile:\n     def __init__(self, src, dest):  \n         self.src = src\n         self.dest = dest\n```", "```py\n    def execute(self):  \n        if verbose:  \n            print(f\"[renaming '{self.src}' to \\\n              '{self.dest}']\")  \n        os.rename(self.src, self.dest)\n```", "```py\n    def undo(self):  \n        if verbose:  \n            print(f\"[renaming '{self.dest}' back to \\\n              '{self.src}']\")  \n        os.rename(self.dest, self.src)\n```", "```py\ndef delete_file(path):\n    if verbose:\n        print(f\"deleting file {path}\")\n    os.remove(path)\n```", "```py\nclass CreateFile:\n\n    def __init__(self, path, txt='hello world\\n'):  \n        self.path = path \n        self.txt = txt\n```", "```py\n    def execute(self):  \n        if verbose:  \n            print(f\"[creating file '{self.path}']\")  \n        with open(self.path, mode='w', encoding='utf-8') \\\n           as out_file:  \n            out_file.write(self.txt)\n```", "```py\n    def undo(self):  \n        delete_file(self.path)\n```", "```py\nclass ReadFile:\n\n     def __init__(self, path):  \n         self.path = path\n\n     def execute(self):  \n         if verbose:  \n             print(f\"[reading file '{self.path}']\")  \n         with open(self.path, mode='r', encoding='utf-8') \\\n           as in_file:  \n             print(in_file.read(), end='')\n```", "```py\ndef main():\n     orig_name, new_name = 'file1', 'file2'\n     commands = (\n         CreateFile(orig_name),\n         ReadFile(orig_name),  \n         RenameFile(orig_name, new_name)\n     )\n\n     [c.execute() for c in commands]\n```", "```py\nanswer = input('reverse the executed commands? [y/n] ')  \n\nif answer not in 'yY':\n   print(f\"the result is {new_name}\")  \n   exit()  \n\nfor c in reversed(commands):  \n   try:  \n   c.undo()  \nexcept AttributeError as e:  \n    print(\"Error\", str(e))\n```", "```py\n[creating file 'file1']\n[reading file 'file1']\nhello world\n[renaming 'file1' to 'file2']\nreverse the executed commands? [y/n] y\n[renaming 'file2' back to 'file1']\nError 'ReadFile' object has no attribute 'undo'\ndeleting file file1\n```", "```py\n[creating file 'file1']\n[reading file 'file1']\nhello world\n[renaming 'file1' to 'file2']\nreverse the executed commands? [y/n] n\nthe result is file2\n```", "```py\nimport os  \nverbose = True  \nclass CreateFile:\n    def undo(self):  \n        try:\n            delete_file(self.path)\n        except:\n            print('delete action not successful...')\n            print('... file was probably already deleted.')\n\ndef main():\n    orig_name = 'file1'  \n    df=delete_file  \n    commands = [CreateFile(orig_name),] \n    commands.append(df)  \n\n    for c in commands:  \n        try:  \n            c.execute()  \n        except AttributeError as e:  \n            df(orig_name)  \n\n    for c in reversed(commands):  \n        try:  \n            c.undo()  \n        except AttributeError as e:  \n            pass\n\nif __name__ == \"__main__\":  \n    main()\n```", "```py\n[creating file 'file1']\ndeleting file file1...\ndeleting file file1...\ndelete action not successful...\n... file was probably already deleted.\n```"]