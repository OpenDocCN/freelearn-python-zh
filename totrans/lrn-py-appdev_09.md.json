["```py\n$ pip install numpy \n\n```", "```py\n>>> import numpy as np \n\n```", "```py\n>>> import numpy as np \n>>> x = np.array([2, 4]) \n>>> x \narray([2, 4])\n\n```", "```py\n>>> x[0] \n2 \n>>> x[0]=8 \n>>> x \narray([8, 4]) \n\n```", "```py\n>>> x.shape \n(2,)\n\n```", "```py\n>>> p = np.array([[4, 8], [10, 20]]) \n>>> p \narray([[ 4,  8], \n [10, 20]]) \n>>> p.ndim\n2\n>>> p.shape \n(2, 2)\n\n```", "```py\n>>> a = np.arange(10) \n>>> a \narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) \n\n```", "```py\n>>> import numpy as np \n>>> x = np.array([2, 4]) \n>>> y = np.array([2, 4]) \n\n```", "```py\n>>> x - y \narray([0, 0]) \n>>> x + y \narray([4, 8]) \n>>> x*y \narray([ 4, 16]) \n\n```", "```py\n>>> x.dot(y) \n20 \n\n```", "```py\n>>> x2 = np.array([[2, 4], [6, 8]]) \n>>> y2 = np.array([[2, 4], [1, 2]]) \n>>> x2*y2 \narray([[ 4, 16], \n [ 6, 16]]) \n>>> x2.dot(y2) \narray([[ 8, 16], \n [20, 40]])\n\n```", "```py\n>>> b = np.arange(5) \n>>> b \narray([0, 1, 2, 3, 4]) \n\n```", "```py\n>>> b[2] \n2 \n\n```", "```py\n>>> p = np.array([[2,2], [4,4]]) \n>>> p \narray([[2, 2], \n [4, 4]]) \n>>> p[0] \narray([2, 2]) \n\n```", "```py\n>>> p[0][1] \n2\n\n```", "```py\n>>> b[0:2] \narray([0, 1]) \n\n```", "```py\n>>> b[1:3] \narray([1, 2]) \n\n```", "```py\n>>> z2 = np.array([[2, 4, 6, 8], [1, 5, 7, 9], [3, 3, 3, 3], [4, 4, 9, 4]]) \n>>> z2 \narray([[2, 4, 6, 8], \n [1, 5, 7, 9], \n [3, 3, 3, 3], \n [4, 4, 9, 4]]) \n>>> z2.shape \n(4, 4) \n\n```", "```py\n>>> z2[0:1, :] \narray([[2, 4, 6, 8]]) \n\n```", "```py\n>>> z2[:, 0:1] \narray([[2], \n [1], \n [3], \n [4]]) \n\n```", "```py\n>>> z2[0:2, 0:2] \narray([[2, 4], \n [1, 5]])\n\n```", "```py\n>>> p0 = np.array([10]) \n>>> p1 = np.array([[1, 2], [3,4]]) \n\n```", "```py\n>>> p0.shape \n(1,) \n>>> p1.shape \n(2,2) \n\n```", "```py\n>>> p0*p1 \narray([[10, 20], \n [30, 40]]) \n\n```", "```py\n>>> x = np.array([2, 4]) \n>>> x_list = x.tolist() \n>>> x_list \n[2, 4]\n\n```", "```py\n>>> x = np.arange(9) \n>>> x \narray([0, 1, 2, 3, 4, 5, 6, 7, 8]) \n>>> x.shape \n(9,) \n\n```", "```py\n>>> np.reshape(x, (3,3)) \narray([[0, 1, 2], \n [3, 4, 5], \n [6, 7, 8]]) \n\n```", "```py\n>>> np.random.uniform(0.0, 2.0, size=3) \narray([ 0.24061728,  0.66123504,  1.86137435]) \n>>> np.random.uniform(0.0, 2.0, size=4) \narray([ 1.81382452,  1.20355728,  1.07085075,  0.9653697 ]) \n\n```", "```py\n>>> np.random.uniform(0.0, 2.0, size=(2,2)) \narray([[  1.02970767e+00,   4.48798719e-02], \n [  5.20609066e-04,   6.10167655e-01]]) \n\n```", "```py\n>>> x = np.array((1, 2, 3, 4)) \n>>> y = np.array((10, 20, 30, 40)) \n\n```", "```py\npoints = [ [1,10], [2,20], [3, 30], [4, 40]] \n```", "```py\n>>> points = np.dstack((x,y)) \n>>> points \narray([[[ 1, 10], \n [ 2, 20], \n [ 3, 30], \n [ 4, 40]]]) \n\n```", "```py\n>>> points.ndim \n3 \n\n```", "```py\n>>> points.shape \n(1, 4, 2) \n\n```", "```py\nnumpy.einsum(subscripts, *operands)\n```", "```py\n>>> import numpy as np \n>>> a = np.array([2, 2]) \n>>> b = np.array([4, 4]) \n>>> np.einsum('i,i', a, b) \n16 \n\n```", "```py\n>>> np.inner(a,b) \n16 \n\n```", "```py\n>>> a2 = np.array([[1,1], [2, 2]]) \n>>> b2 = np.array([[4,4], [6, 6]]) \n>>> np.einsum('ij,jk', a2, b2) \narray([[10, 10], \n [20, 20]]) \n\n```", "```py\n>>> np.dot(a2, b2) \narray([[10, 10], \n [20, 20]])\n\n```", "```py\n>>> p1 = np.array([0,2]) \n>>> center = np.array([0, 0]) \n>>> d = p1 - center \n>>> d \narray([0, 2]) \n>>> np.einsum('i,i', d, d) \n4 \n\n```", "```py\n>>> points = np.array([[0,2], [0,4], [2, 2], [4, 4]]) \n>>> center = np.array([0,0]) \n\n```", "```py\n>>> diffs = points - center \n>>> diffs.shape \n(4, 2) \n>>> diffs \narray([[0, 2], \n [0, 4], \n [2, 2], \n [4, 4]]) \n\n```", "```py\n>>> np.einsum('...i,...i', diffs, diffs) \narray([ 4, 16,  8, 32]) \n\n```", "```py\n>>>  np.einsum('i,i', d, d) \n\n```", "```py\n>>> diffs \narray([[0, 2], \n [0, 4], \n [2, 2], \n [4, 4]]) \n\n```", "```py\n>>> np.einsum('ij,ij->i', diffs, diffs) \narray([ 4, 16,  8, 32]) \n\n```", "```py\nimport numpy as np\n```", "```py\n$ python goldhunt_pass4.py\n\n```", "```py\ntwo_pi = 2*np.pi \n```", "```py\n$ python goldhunt_pass5.py\n\n```", "```py\ncollected_coins = [(x_list[i], y_list[i]) \n                    for i, d in enumerate(dist_sq_list) \n                    if d <= search_radius_square]\n```", "```py\n$ python  pool_example.py \n\n```", "```py\nCurrent process: ForkPoolWorker-1 , Input Number: 2 \nCurrent process: ForkPoolWorker-2 , Input Number: 4 \nCurrent process: ForkPoolWorker-2 , Input Number: 6 \nCurrent process: ForkPoolWorker-1 , Input Number: 8 \nOutput: [20, 40, 60, 80] \n\n```", "```py\n$ python goldhunt_pass6_parallel.py\n\n```", "```py\nresults = pool.starmap_async(self.find_coins, \n                               zip(itertools.repeat(x_list), \n                                   itertools.repeat(y_list), \n                                   x_centers, \n                                   circle_numbers))\n```"]