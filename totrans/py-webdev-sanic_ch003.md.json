["```py\n$ pip install --user pdm\n```", "```py\n    $ mkdir booktracker\n    $ cd booktracker\n    $ pdm init\n    ```", "```py\n    $ pdm add sanic\n    ```", "```py\n    $ python\n    >>> import sanic\n    >>> sanic.__file__\n    '/path/to/booktracker/__pypackages__/3.9/lib/sanic/__init__.py'\n    ```", "```py\n$ sanic -v\nSanic 21.3.4\n```", "```py\n$ sanic -h\nusage: sanic [-h] [-H HOST] [-p PORT] [-u UNIX] [--cert CERT] [--key KEY] [-w WORKERS] [--debug] [--access-logs | --no-access-logs] [-v] module\n                 Sanic\n         Build Fast. Run Fast.\npositional arguments:\n  module                path to your Sanic app. Example: path.to.server:app\noptional arguments:\n  -h, --help            show this help message and exit\n  -H HOST, --host HOST  host address [default 127.0.0.1]\n  -p PORT, --port PORT  port to serve on [default 8000]\n  -u UNIX, --unix UNIX  location of unix socket\n  --cert CERT           location of certificate for SSL\n  --key KEY             location of keyfile for SSL.\n  -w WORKERS, --workers WORKERS\n                        number of worker processes [default 1]\n  --debug\n  --access-logs         display access logs\n  --no-access-logs      no display access logs\n  -v, --version         show program's version number and exit\n```", "```py\n$ sanic src.server:app -p 7777 --debug --workers=2\n```", "```py\napp = Sanic(\"BookTracker\")\n```", "```py\nfrom app import app\n```", "```py\n>>> import datetime\n>>> datetime(2021, 1, 1)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nTypeError: 'module' object is not callable\n```", "```py\nsessions = set()\n@app.route(\"/login\")\nasync def login(request):\n    new_session = await create_session(request)\n    sessions.add(new_session)\n```", "```py\n./booktracker\n├── controllers\n│   ├── book.py\n│   └── author.py\n├── models\n│   ├── book.py\n│   └── author.py\n├── views\n│   ├── static\n│   └── templates\n└── services\n```", "```py\n./booktracker\n└── domains\n    ├── author\n    │   ├── view.py\n    │   └── model.py\n    ├── book\n    │   ├── view.py\n    │   └── model.py\n    └── universal\n        └── middleware.py\n```", "```py\n./booktracker\n├── blueprints\n│   ├── author\n│   │   ├── view.py\n│   │   └── model.py\n│   └── book\n│       ├── view.py\n│       └── model.py\n├── middleware\n│   └── thing.py\n├── common\n│   ├── utilities\n│   └── base\n└── server.py\n```", "```py\n@app.on_request\nasync def extract_user(request):\n    user = await get_user_from_request(request)\n    request.ctx.user = user\n```", "```py\nfrom some.location import app\n@app.route(\"/my/stuff\")\nasync def stuff_handler(...):\n    ...\n@app.route(\"/my/profile\")\nasync def profile_handler(...):\n    ...\n```", "```py\n# server.py\nfrom user import *\napp = Sanic(...)\n# user.py\nfrom server import app\n@app.route(\"/user\")\n...\n```", "```py\nfrom sanic import Blueprint\nbp = Blueprint(\"MyInfo\", url_prefix=\"/my\")\n@bp.route(\"/stuff\")\nasync def stuff_handler(...):\n    ...\n@bp.route(\"/profile\")\nasync def profile_handler(...):\n    ...\n```", "```py\n# server.py\nfrom user import bp as user_bp\napp = Sanic(...)\napp.blueprint(user_bp)\n```", "```py\nfrom sanic import Sanic, Blueprint\napp = Sanic(\"MyApp\")\nbp = Blueprint(\"MyBrokenBp\")\napp.blueprint(bp)\n@bp.route(\"/oops\")\n```", "```py\nfrom myinfo import bp as myinfo_bp\nfrom somethingelse import bp as somethingelse_bp\nfrom sanic import Blueprint\nbp = Blueprint.group(myinfo_bp, somethingelse_bp, url_prefix=\"/api\")\n```", "```py\n./booktracker\n└── blueprints\n    ├── author\n    │   └── view.py\n    └── book\n        └── view.py\n```", "```py\n└── blueprints\n    ├── author\n    │   └── view.py\n    ├── book\n    │   └── view.py\n    └── book_v2\n        └── view.py\n```", "```py\n└── blueprints\n    ├── v1\n    │   ├── author\n    │   │   └── view.py\n    │   ├── book\n    │   │   └── view.py\n    │   └── group.py\n    └── v2\n        ├── book\n        │   └── view.py\n        └── group.py\n```", "```py\n# ./blurprints/v2/group.py\nfrom .book.view import bp as book_bp\nfrom sanic import Blueprint\ngroup = Blueprint.group(book_bp, version=2)\n```", "```py\napp = Sanic(__file__)\n```", "```py\napp = Sanic.get_app()\n@app.before_server_start\nasync def setup_db_pool(app, _):\n    ...\n```", "```py\napp = Sanic(__file__)\nfrom .services.db import *\n```", "```py\n# ./startup.py\nfrom .server import app\nfrom .services.db import *\n```", "```py\nsanic startup:app\n```", "```py\n# ./utilities/app_factory.py\nfrom typing import Optional, Sequence\nfrom sanic import Sanic\nfrom importlib import import_module\nDEFAULT_BLUEPRINTS = [\n    \"src.blueprints.v1.book.view\",\n    \"src.blueprints.v1.author.view\",\n    \"src.blueprints.v2.group\",\n]\ndef create_app(\n    init_blueprints: Optional[Sequence[str]] = None,\n) -> Sanic:\n    app = Sanic(\"BookTracker\")\n    if not init_blueprints:\n        init_blueprints = DEFAULT_BLUEPRINTS\n    for module_name in init_blueprints:\n        module = import_module(module_name)\n        app.blueprint(getattr(module, \"bp\"))\n    return app\nfrom .utilities.app_factory import create_app\napp = create_app()\n```", "```py\n# ./utilities/autodiscovery.py\nfrom importlib import import_module\nfrom inspect import getmembers\nfrom types import ModuleType\nfrom typing import Union\nfrom sanic.blueprints import Blueprint\ndef autodiscover(app, *module_names: Union[str, ModuleType]) -> None:\n    mod = app.__module__\n    blueprints = set()\n    def _find_bps(module: ModuleType) -> None:\n        nonlocal blueprints\n        for _, member in getmembers(module):\n            if isinstance(member, Blueprint):\n                blueprints.add(member)\n    for module in module_names:\n        if isinstance(module, str):\n            module = import_module(module, mod)\n        _find_bps(module)\n    for bp in blueprints:\n        app.blueprint(bp)\n```", "```py\nfrom typing import Optional, Sequence\nfrom sanic import Sanic\nfrom .autodiscovery import autodiscover\nDEFAULT_BLUEPRINTS = [\n    \"src.blueprints.v1.book.view\",\n    \"src.blueprints.v1.author.view\",\n    \"src.blueprints.v2.group\",\n]\ndef create_app(\n    init_blueprints: Optional[Sequence[str]] = None,\n) -> Sanic:\n    app = Sanic(\"BookTracker\")\n    if not init_blueprints:\n        init_blueprints = DEFAULT_BLUEPRINTS\n    autodiscover(app, *init_blueprints)\n    return app\n```", "```py\nfrom .utilities.app_factory import create_app\nfrom sanic.log import logger\napp = create_app()\n@app.main_process_start\ndef display_routes(app, _):\n    logger.info(\"Registered routes:\")\n    for route in app.router.routes:\n        logger.info(f\"> /{route.path}\")\n```", "```py\n$ sanic src.server:app -p 7777 --debug --workers=2\n```", "```py\n[2021-05-30 11:34:54 +0300] [36571] [INFO] Goin' Fast @ http://127.0.0.1:7777\n[2021-05-30 11:34:54 +0300] [36571] [INFO] Registered routes:\n[2021-05-30 11:34:54 +0300] [36571] [INFO] > /v2/book\n[2021-05-30 11:34:54 +0300] [36571] [INFO] > /book\n[2021-05-30 11:34:54 +0300] [36571] [INFO] > /author\n[2021-05-30 11:34:54 +0300] [36572] [INFO] Starting worker [36572]\n[2021-05-30 11:34:54 +0300] [36573] [INFO] Starting worker [36573]\n```"]