["```py\n# Correct prefetching\ndef compute_method(self):\n    for rec in self:\n        print(rec.name)\n```", "```py\n# Incorrect prefetching\ndef some_action(self):\n    record_ids = []\n    self.env.cr.execute(\"some query to fetch record id\")\n    for rec in self.env.cr.fetchall():\n        record = self.env['res.partner'].browse(rec[0])\n        print(record.name)\n```", "```py\n# Correct prefetching\ndef some_action(self):\n    record_ids = []\n    self.env.cr.execute(\"some query to fetch record id\")\n    record_ids = [ rec[0] for rec in self.env.cr.fetchall() ]\n    recordset = self.env['res.partner'].browse(record_ids)\n    for record_id in recordset:\n        print(record.name)\n```", "```py\nrecs = [r for r in recordset r.id not in [1,2,4,10]]\n```", "```py\nfor record in recordset: # recordset with 10 records\n    record.name # Prefetch data of all 10 records in the first loop\n    record.email # data of email will be served from the cache.\n```", "```py\nrecordset = ... # assume recordset has 10 records.\nrecordset1 = recordset[:5].with_prefetch(recordset._ids)\nrecordset2 = recordset[5:].with_prefetch(recordset._ids)\nself.env.cr.execute(\"select id from sale_order limit 10\")\nrecord_ids = [rec[0] for rec in self.env.cr.fetchall()]\nrecordset = self.env['sale.order'].browse(record_ids)\nrecordset1 = recordset[:5]\nfor rec in recordset1:\n   print(rec.name)  # Prefetch name of all 5 records in the first loop\n   print(rec.attention)  # Prefetch attention of all 5 records in the first loop\nrecordset2 = recordset[5:].with_prefetch(recordset._ids)\nfor rec in recordset1:\n   print(rec.name)  # Prefetch name of all 10 records in the first loop\n   print(rec.attention)  # Prefetch attention of all 10 records in the first loop\n```", "```py\nfrom odoo import tools\n```", "```py\n@tools.ormcache('mode')\ndef fetch_mode_data(self, mode):\n    # some calculations\n    return result\n```", "```py\n@tools.ormcache('self.env.uid', 'mode')\ndef fetch_data(self, mode):\n    # some calculations\n    return result\n```", "```py\n@tools.ormcache_context('mode', keys=('website_id','lang'))\ndef fetch_data(self, mode):\n    # some calculations\n    return result\n```", "```py\n@tools.ormcache_multi('mode', multi='ids')\ndef fetch_data(self, mode, ids):\n    result = {}\n    for i in ids:\n        data = ... # some calculation based on ids\n        result[i] = data\n    return result\n```", "```py\nself.env[model_name].clear_caches()\n```", "```py\nkill -SIGUSR1 <pid>\nkill -SIGUSR1 496\n```", "```py\n> 2023-10-18 09:22:49,350 496 INFO odoo-book-17.0 odoo.tools.cache:      1 entries,     31 hit,      1 miss,      0 err, 96.9% ratio, for ir.actions.act_window._existing\n> 2023-10-18 09:22:49,350 496 INFO odoo-book-17.0 odoo.tools.cache:      1 entries,      1 hit,      1 miss,      0 err, 50.0% ratio, for ir.actions.actions.get_bindings\n> 2023-10-18 09:22:49,350 496 INFO odoo-book-17.0 odoo.tools.cache:      4 entries,      1 hit,      9 miss,      0 err, 10.0% ratio, for ir.config_parameter._get_param\n```", "```py\nclass HostelStudent(models.Model):\n    _name = \"hostel.student\"\n    _description = \"Hostel Student Information\"\n    _inherit = [\"image.mixin\"]\n```", "```py\n<field name=\"image_1920\" widget=\"image\"\n       options=\"{'preview_image': 'image_128'}\" />\n```", "```py\nimage_1500 = fields.Image(\"Image 1500\", max_width=1500, max_height=1500)\n```", "```py\n    # in res.partner model\n    so_count = fields.Integer(compute='_compute_so_count', string='Sale order count')\n    def _compute_so_count(self):\n        sale_orders = self.env['sale.order'].search(domain=[('partner_id', 'in', self.ids)])\n        for partner in self:\n            partner.so_count = len(sale_orders.filtered(lambda so: so.partner_id.id == partner.id))\n    ```", "```py\n    # in res.partner model\n    so_count = fields.Integer(compute='_compute_so_count', string='Sale order count')\n    def _compute_so_count(self):\n        sale_data = self.env['sale.order'].read_group(\n            domain=[('partner_id', 'in', self.ids)],\n            fields=['partner_id'], groupby=['partner_id'])\n        mapped_data = dict([(m['partner_id'][0], m['partner_id_count']) for m in sale_data])\n        for partner in self:\n            partner.so_count = mapped_data[partner.id]\n    ```", "```py\ndef read_group(self, domain, fields, groupby, offset=0, limit=None, orderby=False, lazy=True):\n```", "```py\n    self.env['sale.order'].read_group([], ['partner_id', 'amount_total:avg'], ['partner_id'])\n    ```", "```py\n    self.env['sale.order'].read_group([], ['partner_id', 'total:sum(amount_total)', 'avg_total:avg(amount_total)'], ['partner_id'])\n    ```", "```py\nself.env['sale.order'].read_group([], ['total:sum(amount_total)'], ['order_date:month'])\n```", "```py\nvals = [{\n    'name': \"Room A-101\",\n    'room_no': 101,\n    'floor_no': 1,\n    'student_per_room': 2,\n}, {\n    'name': \"Room A-102\",\n    'room_no': 102,\n    'floor_no': 1,\n    'student_per_room': 3,\n}, {\n    'name': \"Room B-201\",\n    'room_no': 201,\n    'floor_no': 2,\n    'student_per_room': 3,\n}]\nself.env['hostel.room'].create(vals)\n```", "```py\n# Example 1\ndata = {...}\nfor record in recordset:\n    record.write(data)\n# Example 2\ndata = {...}\nrecordset.write(data)\n```", "```py\nrecordset.name= 'Admin'\nrecordset.email= 'admin@example.com'\nrecordset.name= 'Administrator'\nrecordset.email= 'admin-2@example.com'\n```", "```py\nrecordset.name= 'Admin'\nrecordset.email= 'admin@example.com'\nrecordset.flush()\nrecordset.name= 'Administrator'\nrecordset.email= 'admin-2@example.com'\n```", "```py\n# incorrect usage\nrecordset.name= 'Admin'\nrecordset.email= 'admin@example.com'\n# correct usage\nrecordset.write({'name': 'Admin', 'email'= 'admin@example.com'})\n```", "```py\n    self.flush()\n    self._cr.execute(\"SELECT id, name, room_no, floor_no  FROM hostel_room WHERE name ilike %s\", ('%Room A-%',))\n    data = self._cr.fetchall()\n    print(data)\n    ```", "```py\n    dictfetchall() method. Take a look at the following example:\n\n    ```", "```py\n\n    Here is the output:\n\n    ```", "```py\n\n    ```", "```py\n# very bad, SQL injection possible\nself.env.cr.execute('SELECT id, name FROM hostel_room WHERE name ilike + search_keyword + ';')\n# good\nself.env.cr.execute('SELECT id, name FROM hostel_room WHERE name ilike %s ';', (search_keyword,))\n```", "```py\nclass SQLCollector(Collector):\n   \"\"\"\n   Saves all executed queries in the current thread with the call stack.\n   \"\"\"\n   name = 'sql'\n```", "```py\nclass PeriodicCollector(Collector):\n   \"\"\"\n   Record execution frames asynchronously at most every `interval` seconds.\n   :param interval (float): time to wait in seconds between two samples.\n   \"\"\"\n   name = 'traces_async'\n```", "```py\nclass QwebCollector(Collector):\n   \"\"\"\n   Record qweb execution with directive trace.\n   \"\"\"\n   name = 'qweb'\n```", "```py\nclass SyncCollector(Collector):\n   \"\"\"\n   Record complete execution synchronously.\n   Note that --limit-memory-hard may need to be increased when launching Odoo.\n   \"\"\"\n   name = 'traces_sync'\n```"]