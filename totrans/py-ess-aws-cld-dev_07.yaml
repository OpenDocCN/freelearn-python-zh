- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Monitoring Applications via CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn about one of the important AWS services,
    CloudWatch. CloudWatch is a serverless service that allows you to collect and
    monitor application logs within AWS. It has extensive integrations with most AWS
    services. When you start using any AWS service, it helps to observe an application
    via CloudWatch tools.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is CloudWatch?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting Lambda Logs via CloudWatch
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudWatch logs Insights
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: CloudWatch alarms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is CloudWatch?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When you deploy any application, it is important to track that it meets the
    set expectations regarding availability, performance, and stability. It is possible
    an issue may have occurred in the application. It’s important to note that some
    of the AWS services could be down or run incorrectly. This is a very bad experience
    from a customer’s point of view, and it would be better to observe these issues
    before the customer finds out. If you service an application via AWS, you need
    to use CloudWatch to monitor your applications to observe how they behave.
  prefs: []
  type: TYPE_NORMAL
- en: 'CloudWatch is a monitoring service in AWS; it provides different features to
    observe an application. The features of CloudWatch are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Collecting and storing logs from AWS services such as Lambda and EC2.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing a dashboard to monitor metrics and logs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to create an alarm. For example, if an application has consumed
    significant memory on a server, you can create an alarm in order to be notified.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The ability to correlate different metrics. For example, you can aggregate EC2
    memory logs and CPU logs to have a better overall view of a situation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The detection of anomalous behavior with the machine learning-based CloudWatch
    anomaly detection feature.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collecting Lambda logs via CloudWatch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this topic, we are going to deploy a simple Python function in order to
    investigate logs via the CloudWatch service. Let’s do so step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a Lambda function in AWS. In [*Chapter 3*](B19195_03.xhtml#_idTextAnchor002),
    where we covered Lambda, the basic steps of the Lambda deployment were explained.
    Hence, here, we will provide a summary of the Lambda steps. The name of the Lambda
    function is `TestLogs`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.01_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Creating a Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'The Lambda function creates a basic template, like the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.02_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – The Lambda template
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the following code block to the handler:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`os` will import the operating system module; hence, you can see the environment
    variables via the logging print (`os.environ`) variable. Once we add the code
    block, Lambda code should be seen as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.03_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Lambda with logs
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, click the **Deploy** button to deploy the latest changes to Lambda and
    click the **Test** button. After testing the Lambda function, you are able to
    see the execution results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.04_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – The execution results
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the CloudWatch service to investigate the logs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the CloudWatch service from AWS Management Console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.05_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – The CloudWatch service
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Log groups** under the **Logs** dropdown in the left pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.06_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.6 – The CloudWatch log group
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click **Log groups**, you will see a list. This list represents the
    running AWS services that create a log. In this list, find the Lambda function
    that you run:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.07_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – Log list
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **/aws/lambda/TestLogs**. The new page consists of the logs that Lambda
    creates. You can see a log stream. When the Lambda function runs, the logs are
    created in this list. At the beginning of the list, you can see the most up-to-date
    logs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.08_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.8 – The log page for Lambda
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s click the latest link under **Log stream**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.09_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.9 – Log stream
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the link, you can see the detailed logs that Lambda creates:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.10_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.10 – Lambda logs
  prefs: []
  type: TYPE_NORMAL
- en: 'This list shows a summary view of the log. When you click the down arrow to
    the left, the panel will open and you can investigate the detailed logs. In Lambda,
    we have logged the operating system variables for Lambda. Hence, you will see
    some details for that, such as region, memory size, and language:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.11_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.11 – Log details
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You are able to investigate Lambda logs via the CloudWatch
    service. It is simple to use CloudWatch to investigate a log for any AWS service.
    In the next topic, we will learn some tricks regarding filtering logs.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch Log Insights
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this topic, we will take a look at **Log Insights**. If you have massive
    lines of logs, it is not easy to search and find the respective log that you are
    searching for. For this use case, Log Insights comes into play. CloudWatch Log
    Insights allows you to search logs with the filtering feature. Let’s see how Log
    Insights helps us to search logs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Log Insights** under the **Logs** dropdown in the left pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.12_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.12 – Log Insights
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the log that you want to investigate. In the previous example, we ran
    the TestLogs Lambda function, and I am also selecting that one here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.13_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.13 – The Log Insights window
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you select it, you can see the default query:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.14_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.14 – The Log Insights filter
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the `fields` represents the columns that will be listed, whereas the
    `sort` keyword indicates the sorting method, and you can see only 20 records with
    the `limit` keyword:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.15_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.15 – Logs
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add one more filter to search for a keyword within the message. You can
    use the following query format:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'With this query, we search for logs that contain `AWS_DEFAULT_REGION`. Paste
    that and click **Run query** again. After running the query, you will see that
    the message lines are reduced:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.16_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.16 – Filtered logs
  prefs: []
  type: TYPE_NORMAL
- en: 'When you expand the message, you will find what you searched for – in this
    case, `AWS_DEFAULT_REGION`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.17_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.17 – Detailed logs
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, Log Insights is very helpful to search and filter logs within
    a massive log block. In the next topic, we will take a look at how to create an
    alarm.
  prefs: []
  type: TYPE_NORMAL
- en: CloudWatch alarms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS has more than 100 services, and it is not easy to control the behavior of
    all the services. You need to be informed if some AWS services achieve a specific
    metric. In [*Chapter 4*](B19195_04.xhtml#_idTextAnchor006), we covered how to
    create a server with an EC2 service. For example, you define a server for an EC2
    service, and sometimes, its CPU usage is more than 90%, causing some performance
    problems. Another example would be to add a notification if you exceed a specific
    cost in AWS. For these kinds of scenarios, you can define a metric, and if the
    metric is reached, you will be notified via email.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this topic, we are going to create an alarm to notify us if AWS cost exceeds
    $10 in a month. Let’s implement the application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **In alarm** under the **Alarms** dropdown in the **CloudWatch** pane:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.18_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.18 – In alarm
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Create Alarm**. You can click either the button to the right or the
    one at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.19_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.19 – Creating an alarm
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Select** **metric** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.20_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.20 – Select metric
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click the **Select metric** button, you will be able to see a list
    of categories with which to narrow down your metric:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.21_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.21 – Metric types
  prefs: []
  type: TYPE_NORMAL
- en: 'In this list, you can see different types of metrics. **Billing** allows you
    to define cost-related metrics, while **Lambda** allows you to define Lambda-related
    metrics. In this example, we are going to define a monthly budget for our AWS
    account. The aim is to receive an alarm if our monthly cost exceeds a specific
    threshold:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Billing** from the categories:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.22_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.22 – The Billing category
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Total Estimated Charge**. The intention is to define a metric if your
    total monthly AWS cost exceeds a target budget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.23_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.23 – Total Estimated Change
  prefs: []
  type: TYPE_NORMAL
- en: 'From the list, select **USD** and click **Select metric**. The currency type
    may vary, depending on your AWS account:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.24_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.24 – The currency type
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, go to the **Define the threshold value** field. For this
    example, I added **10**, which means that if the total cost is greater than $10
    for a month, an alarm will be activated. In this panel, you can also change the
    currency type, calculation type, and so on. In this case, the most important value
    is defining the target budget to receive an alarm. After you have done that, click
    the **Next** button:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_7.25_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.25 – Threshold value
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next panel, we are going to define the alarm endpoint. In this case,
    we have selected the **Create new topic** radio button. **Simple Notification
    Service** (**SNS**) is used to communicate between services and end users. This
    is a choice under **Send a notification to the following SNS**. Once we select
    **Create new topic**, we can define an email address in the **Email endpoints
    that will receive the notification…** section. SNS is an access point to filter
    messages in order to send them to different subscribers such as Lambda or email.
    You can keep the topic name as is; it is the same as the SNS topic name. When
    completed, click **Create topic**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.26_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.26 – Receiver
  prefs: []
  type: TYPE_NORMAL
- en: 'After **Create topic** is clicked, AWS will create an endpoint in order to
    send an email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.27_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.27 – Creating an endpoint
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have an endpoint, and you can proceed by clicking the **Next** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to define the alarm name. In this case, I named it `BillingAlarmGreaterThan10`,
    since it sends an alarm if the billing cost goes above than $10:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.28_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.28 – Naming the alarm
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to review the input and click **Create alarm**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.29_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.29 – Creating the alarm
  prefs: []
  type: TYPE_NORMAL
- en: 'If you successfully create the alarm, you will be redirected to the **Alarm**
    list to see the alarm that you created. We can see the alarm as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_7.30_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.30 – The billing alarm type
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we have created an alarm. An alarm is useful if we need to create
    a notification for the AWS service behaviors. This example will send a notification
    if, for example, we reach the defined cost limit.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the AWS CloudWatch service and how to investigate
    service logs in AWS. CloudWatch is very useful for logging; it also allows you
    to define some metrics and alarms to monitor services. In the following chapter,
    we will take a look at database operations within AWS.
  prefs: []
  type: TYPE_NORMAL
