["```py\n#!/usr/bin/python\n# -*- coding: utf-8 -*\n# Python standard library imports\nimport os.path\nimport time\n###############################################################\nCherryPylibrary, working of#The unique module to be imported to use cherrypy\n###############################################################\nimport cherrypy\n# CherryPy needs an absolute path when dealing with static data\n_curdir = os.path.join(os.getcwd(), os.path.dirname(__file__))\n###############################################################\n# We will keep our notes into a global list\n# Please not that it is hazardous to use a simple list here\n# since we will run the application in a multi-threaded environment\n# which will not protect the access to this list\n# In a more realistic application we would need either to use a\n# thread safe object or to manually protect from concurrent access\n# to this list\n###############################################################\n_notes = []\n###############################################################\n# A few HTML templates\n###############################################################\n_header = \"\"\"\n<html>\n<head>\n<title>Random notes</<title>\n<link rel=\"stylesheet\" type=\"text/css\" href=\"/style.css\"></link>\n</head>\n<body>\n<div class=\"container\">\"\"\"\n_footer = \"\"\"\n</div>\n</body>\n</html>\"\"\"\n_note_form = \"\"\"\n<div class=\"form\">\n<form method=\"post\" action=\"post\" class=\"form\">\n<input type=\"text\" value=\"Your note here...\" name=\"text\"\nsize=\"60\"></input>\n<input type=\"submit\" value=\"Add\"></input>\n</form>\n</div>\"\"\"\n_author_form = \"\"\"\nCherryPylibrary, working of<div class=\"form\">\n<form method=\"post\" action=\"set\">\n<input type=\"text\" name=\"name\"></input>\n<input type=\"submit\" value=\"Switch\"></input>\n</form>\n</div>\"\"\"\n_note_view = \"\"\"\n<br />\n<div>\n%s\n<div class=\"info\">%s - %s <a href=\"/note/%d\">(%d)</a></div>\n</div>\"\"\"\n###############################################################\n# Our only domain object (sometimes referred as to a Model)\n###############################################################\nclass Note(object):\ndef __init__(self, author, note):\nself.id = None\nself.author = author\nself.note = note\nself.timestamp = time.gmtime(time.time())\ndef __str__(self):\nreturn self.note\n###############################################################\n# The main entry point of the Note application\n###############################################################\nclass NoteApp:\n\"\"\"\nThe base application which will be hosted by CherryPy\n\"\"\"\n# Here we tell CherryPy we will enable the session\n# from this level of the tree of published objects\n# as well as its sub-levels\n_cp_config = { 'tools.sessions.on': True }\ndef _render_note(self, note):\n\"\"\"Helper to render a note into HTML\"\"\"\nreturn _note_view % (note, note.author,\ntime.strftime(\"%a, %d %b %Y %H:%M:%S\",\nnote.timestamp),\nnote.id, note.id)\n@cherrypy.expose\ndef index(self):\n# Retrieve the author stored in the current session\n# None if not defined\nauthor = cherrypy.session.get('author', None)\npage = [_header]\nif author:\npage.append(\"\"\"\n<div><span>Hello %s, please leave us a note.\n<a href=\"author\">Switch identity</a>.</span></div>\"\"\"\n%(author,))\npage.append(_note_form)\nelse:\npage.append(\"\"\"<div><a href=\"author\">Set your\nidentity</a></span></div>\"\"\")\nnotes = _notes[:]\nCherryPylibrary, working ofnotes.reverse()\nfor note in notes:\npage.append(self._render_note(note))\npage.append(_footer)\n# Returns to the CherryPy server the page to render\nreturn page\n@cherrypy.expose\ndef note(self, id):\n# Retrieve the note attached to the given id\ntry:\nnote = _notes[int(id)]\nexcept:\n# If the ID was not valid, let's tell the\n# client we did not find it\nraise cherrypy.NotFound\nreturn [_header, self._render_note(note), _footer]\n@cherrypy.expose\ndef post(self, text):\nauthor = cherrypy.session.get('author', None)\n# Here if the author was not in the session\n# we redirect the client to the author form\nif not author:\nraise cherrypy.HTTPRedirect('/author')\nnote = Note(author, text)\n_notes.append(note)\nnote.id = _notes.index(note)\nraise cherrypy.HTTPRedirect('/')\nclass Author(object):\n@cherrypy.expose\ndef index(self):\nreturn [_header, _author_form, _footer]\n@cherrypy.expose\ndef set(self, name):\ncherrypy.session['author'] = name\nreturn [_header, \"\"\"\nHi %s. You can now leave <a href=\"/\" title=\"Home\">notes</a>.\n\"\"\" % (name,), _footer]\nif __name__ == '__main__':\n# Define the global configuration settings of CherryPy\nglobal_conf = {\n'global': { 'engine.autoreload.on': False,\n'server.socket_host': 'localhost',\n'server.socket_port': 8080,\n}}\napplication_conf = {\n'/style.css': {\n'tools.staticfile.on': True,\n'tools.staticfile.filename': os.path.join(_curdir,\n'style.css'),\n}\n}\n# Update the global CherryPy configuration\nCherryPylibrary, working ofcherrypy.config.update(global_conf)\n# Create an instance of the application\nnote_app = NoteApp()\n# attach an instance of the Author class to the main application\nnote_app.author = Author()\n# mount the application on the '/' base path\ncherrypy.tree.mount(note_app, '/', config = application_conf)\n# Start the CherryPy HTTP server\ncherrypy.server.quickstart()\n# Start the CherryPy engine\ncherrypy.engine.start()\n\n```", "```py\nhtml, body {\nbackground-color: #DEDEDE;\npadding: 0px;\nmarging: 0px;\nheight: 100%;\n}\n.container {\nborder-color: #A1A1A1;\nborder-style: solid;\nborder-width: 1px;\nbackground-color: #FFF;\nmargin: 10px 150px 10px 150px;\nheight: 100%;\n}\na:link {\ntext-decoration: none;\ncolor: #A1A1A1;\n}\na:visited {\ntext-decoration: none;\ncolor: #A1A1A1;\n}\na:hover {\ntext-decoration: underline;\n}\ninput {\nCherryPylibrary, working ofborder: 1px solid #A1A1A1;\n}\n.form {\nmargin: 5px 5px 5px 5px;\n}\n.info {\nfont-size: 70%;\ncolor: #A1A1A1;\n}\n\n```", "```py\ncherrypy.server.quickstart()\n\n```", "```py\ncherrypy.engine.start()\n\n```", "```py\nglobal_conf = {\n'global': {\n'server.socket_host': 'localhost',\n'server.socket_port': 8080,\n},\n}\napplication_conf = {\n'/style.css': {\n'tools.staticfile.on': True,\n'tools.staticfile.filename': os.path.join(_curdir,\n'style.css'),\n}\n}\n\n```", "```py\n[global]\nserver.socket_host=\"localhost\"\nCherryPyconfiguringserver.socket_port=8080\n[/style.css]\ntools.staticfile.on=True\ntools.staticfile.filename=\"/full/path/to.style.css\"\n\n```", "```py\ncherrypy.config.update(conf)\n\n```", "```py\ncherrypy.config.update('/path/to/the/config/file')\n\n```", "```py\ncherrypy.tree.mount(application_instance, script_name, config=conf)\n\n```", "```py\ncherrypy.tree.mount(application_instance, script_name,\nconfig='/path/to/config/file')\n\n```", "```py\nimport cherrypy\nclass Root:\n_cp_config = {'tools.gzip.on': True}\n@cherrypy.expose\nCherryPyconfiguringdef index(self):\nreturn \"welcome\"\n@cherrypy.expose\ndef default(self, *args, **kwargs):\nreturn \"oops\"\n@cherrypy.expose\n# this next line is useless because we have set the class\n# attribute _cp_config but shows you how to configure a tool\n# using its decorator. We will explain more in the next\n# chapters.\n@cherrypy.tools.gzip()\ndef echo(self, msg):\nreturn msg\n@cherrypy.expose\ndef hello(self):\nreturn \"there\"\nhello._cp_config = {'tools.gzip.on': False}\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\ncherrypy.tree.mount(Root(), '/')\ncherrypy.server.quickstart()\ncherrypy.engine.start()\n\n```", "```py\nroot = Blog()\nroot.admin = Admin()\ncherrypy.tree.mount(root, '/blog')\n\n```", "```py\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn self.dosome()\ndef dosome(self):\nreturn \"hello there\"\ncherrypy.tree.mount(Root(), '/')\n\n```", "```py\n[global]\nserver.environment = \"production\"\nengine.autoreload_on = True\nengine.autoreload_frequency = 5\n\n```", "```py\ns = 'GET /note/1 HTTP/1.1' # no query string\nr = http.parse_request_line(s) # r is now ('GET', '/note/1', '',\n'HTTP/1.1')\ns = 'GET /note?id=1 HTTP/1.1' # query string is id=1\nr = http.parse_request_line(s) # r is now ('GET', '/note', 'id=1',\n'HTTP/1.1')\nhttp.parseQueryString(r[2]) # returns {'id': '1'}\nProvide a clean interface to HTTP headers:\nFor example, say you have the following Accept header value:\naccept_value = \"text/xml,application/xml,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5\"\nvalues = http.header_elements('accept', accept_value)\nprint values[0].value, values[0].qvalue # will print text/html 1.0\n\n```", "```py\nimport cherrypy\nfrom cherrypy import _cptools\nclass Root(_cptools.XMLRPCController):\n@cherrypy.expose\ndef echo(self, message):\nreturn message\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/xmlrpc')\n\n```", "```py\nimport xmlrpclib\nproxy = xmlrpclib.ServerProxy('http://localhost:8080/xmlrpc/')\nproxy.echo('hello') # will return 'hello'\n\n```", "```py\nconf = {'/': {\n'tools.encode.on': True,\n'tools.encode.encoding': 'ISO-8859-1'\n}\n}\ncherrypy.tree.mount(Root(), '/', config=conf)\n\n```", "```py\n@cherrypy.expose\n@cherrypy.tools.encode(encoding='ISO 8859-1')\ndef index(self)\nreturn \"Et voil√†\"\n\n```", "```py\ndef index(self):\ncherrypy.tools.accept.callable(media='text/html')\n\n```", "```py\nimport cherrypy\nclass Root:\n@cherrypy.expose\ndef index(self):\nraise NotImplementedError, \"This is an error...\"\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\ncherrypy.HTTPError(error_code, [error_message])\n\n```", "```py\nimport cherrypy\nclass Root:\n@cherrypy.expose\ndef index(self):\nraise cherrypy.HTTPError(401, 'You are not authorized to \\\naccess this resource')\nif __name__ == '__main__':\nCherryPyerror handlingcherrypy.quickstart(Root(), '/')\n\n```", "```py\nHTTP/1.x 401 Unauthorized\nDate: Wed, 14 Feb 2007 11:41:55 GMT\nContent-Length: 744\nContent-Type: text/html\nServer: CherryPy/3.0.1alpha\n\n```", "```py\nimport cherrypy\nclass Root:\nCherryPyerror handling@cherrypy.expose\ndef index(self):\n# shortcut to cherrypy.HTTPError(404)\nraise cherrypy.NotFound\nif __name__ == '__main__':\nCherryPyexception handlingconf = {'global':{'request.show_tracebacks':False}}\ncherrypy.config.update(conf)\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nimport cherrypy\nclass Root:\n# Uncomment this line to use this template for this level of the\n# tree as well as its sub-levels\n#_cp_config = {'error_page.404': 'notfound.html'}\n@cherrypy.expose\ndef index(self):\nCherryPyexception handlingraise cherrypy.NotFound\n# Uncomment this line to tell CherryPy to use that html page only\nCherryPyerror handling# for this page handler. The other page handlers will use\n# the default CherryPy layout\n# index._cp_config = {'error_page.404': 'notfound.html'}\nif __name__ == '__main__':\n# Globally set the new layout for an HTTP 404 error code\ncherrypy.config.update({'global':{'error_page.404': 'notfound.html' }})\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\n<html>\n<head><title>Clearly not around here</title></head>\n<body>\n<p>Well sorry but couldn't find the requested resource.</p>\n</body>\n</html>\n\n```"]