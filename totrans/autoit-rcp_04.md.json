["```py\nvirtualenv ~/book/ch05/\nsource ~/book/ch05/\npip install flask\nCollecting flask==0.10.1\n Downloading Flask-0.10.1.tar.gz (544kB)\n 100% |████████████████████████████████| 544kB 774kB/s \nCollecting Werkzeug>=0.7 (from flask==0.10.1)\n Downloading Werkzeug-0.11.10-py2.py3-none-any.whl (306kB)\n 100% |████████████████████████████████| 307kB 1.5MB/s \nCollecting Jinja2>=2.4 (from flask==0.10.1)\n Downloading Jinja2-2.8-py2.py3-none-any.whl (263kB)\n 100% |████████████████████████████████| 266kB 2.4MB/s \nCollecting itsdangerous>=0.21 (from flask==0.10.1)\n Downloading itsdangerous-0.24.tar.gz (46kB)\n 100% |████████████████████████████████| 49kB 6.2MB/s \nCollecting MarkupSafe (from Jinja2>=2.4->flask==0.10.1)\n Downloading MarkupSafe-0.23.tar.gz\nBuilding wheels for collected packages: flask, itsdangerous, MarkupSafe\n Running setup.py bdist_wheel for flask\n Stored in directory: /Users/chetan/Library/Caches/pip/wheels/b6/09/65/5fcf16f74f334a215447c26769e291c41883862fe0dc7c1430\n Running setup.py bdist_wheel for itsdangerous\n Stored in directory: /Users/chetan/Library/Caches/pip/wheels/fc/a8/66/24d655233c757e178d45dea2de22a04c6d92766abfb741129a\n Running setup.py bdist_wheel for MarkupSafe\n Stored in directory: /Users/chetan/Library/Caches/pip/wheels/a3/fa/dc/0198eed9ad95489b8a4f45d14dd5d2aee3f8984e46862c5748\nSuccessfully built flask itsdangerous MarkupSafe\nInstalling collected packages: Werkzeug, MarkupSafe, Jinja2, itsdangerous, flask\nSuccessfully installed Jinja2-2.8 MarkupSafe-0.23 Werkzeug-0.11.10 flask-0.10.1 itsdangerous-0.24\n\n```", "```py\npip install Twilio\nCollecting twilio\n Downloading twilio-5.4.0.tar.gz (193kB)\n 100% |████████████████████████████████| 196kB 2.2MB/s \nCollecting httplib2>=0.7 (from twilio)\n Downloading httplib2-0.9.2.zip (210kB)\n 100% |████████████████████████████████| 212kB 2.0MB/s \nCollecting six (from twilio)\n Downloading six-1.10.0-py2.py3-none-any.whl\nCollecting pytz (from twilio)\n Downloading pytz-2016.6.1-py2.py3-none-any.whl (481kB)\n 100% |████████████████████████████████| 483kB 1.0MB/s \nBuilding wheels for collected packages: twilio, httplib2\n Running setup.py bdist_wheel for twilio\n Stored in directory: /Users/chetan/Library/Caches/pip/wheels/91/16/85/2ea21326cf1aad3e32f88d9e81723088e1e43ceb9eac935a9b\n Running setup.py bdist_wheel for httplib2\n Stored in directory: /Users/chetan/Library/Caches/pip/wheels/c7/67/60/e0be8ccfc1e08f8ff1f50d99ea5378e204580ea77b0169fb55\nSuccessfully built twilio httplib2\nInstalling collected packages: httplib2, six, pytz, twilio\nSuccessfully installed httplib2-0.9.2 pytz-2016.6.1 six-1.10.0 twilio-5.4.0\n\n```", "```py\n            TWILIO_ACCOUNT_SID = 'Account SID' \n            TWILIO_AUTH_TOKEN = 'Auth Token' \n            CALLERID = '+Rented Number' \n            MYNUMBER = '+Your Number' \n\n    ```", "```py\n            import config \n            from flask import Flask \n            from twilio.rest import TwilioRestClient \n\n            app = Flask(__name__) \n            client = TwilioRestClient(config.TWILIO_ACCOUNT_SID, \n                                      config.TWILIO_AUTH_TOKEN) \n\n            message = client.messages.create( \n                to=config.MYNUMBER, \n                from_=config.CALLERID, \n                body=\"Hey, this is cool!\") \n\n    ```", "```py\n./ngrok http 5000\n\n```", "```py\n            from flask import Flask\n            import twilio.twiml\n            app = Flask(__name__)\n            @app.route(\"/insms\", methods=['GET', 'POST'])\n            def respond_sms():\n                resp = twilio.twiml.Response()\n                resp.message(\"Thanks for your query. We will\n                              get back to you soon\")\n            return str(resp)\n            if __name__ == \"__main__\":\n            app.run(debug=True)\n    ```", "```py\n     python recv_sms.py\n\n    ```", "```py\n     ./ngrok http 5000\n\n    ```", "```py\n        from flask import Flask, request \n        import twilio.twiml \n\n        class Pizza: \n            def __init__(self): \n                self.status = None \n\n            def setStatus(self, status): \n                self.status = status \n\n            def getStatus(self): \n                return self.status \n\n         app = Flask(__name__) \n        @app.route(\"/insms\", methods=['GET', 'POST']) \n        def respond_sms(): \n            content = request.POST['Body'] \n            resp = twilio.twiml.Response() \n            if content == 'ORDER': \n                resp.message(\"Thanks! We're already on your order!\") \n                pizza = Pizza() \n                pizza.setStatus('complete') \n                return str(resp) \n\n            if content == 'STATUS': \n                pizza = Pizza() \n                status = pizza.getStatus() \n                if status == 'complete': \n                    resp.message(\"Your order is ready!\") \n                    return str(resp) \n                else: \n                    resp.message(\"Sorry! could not locate your order!\") \n                    return str(resp) \n\n                else: \n                    resp.message(\"Sorry! Wrong selection\") \n                    return str(resp)         \n\n        if __name__ == \"__main__\": \n                app.run(debug=True) \n\n```", "```py\n            TWILIO_ACCOUNT_SID = '<Account SID>' \n            TWILIO_AUTH_TOKEN = '<Auth Token>' \n            CALLERID = '<Rented Number>' \n            MYNUMBER = '<Number to call>'   \n\n    ```", "```py\n            import config \n            from flask import Flask, Response, request \n            from twilio import twiml \n            from twilio.rest import TwilioRestClient \n\n            app = Flask(__name__) \n            client = TwilioRestClient(config.TWILIO_ACCOUNT_SID, \n                                      config.TWILIO_AUTH_TOKEN) \n\n            @app.route('/call', methods=['POST']) \n            def outbound_call(): \n                response = twiml.Response() \n                call = client.calls.create( \n                    to=config.MYNUMBER, \n                    from_=config.CALLERID, \n                    record='true', \n                ) \n                return Response(str(response), 200,\n            mimetype=\"application/xml\") \n\n            if __name__ == '__main__': \n            app.run(debug=True) \n\n    ```", "```py\n     python voice_outbound.py\n\n    ```", "```py\n     ./ngrok http 5000\n\n    ```", "```py\n            import config \n            from flask import Flask, Response, request \n            from twilio import twiml \n            from twilio.rest import TwilioRestClient \n\n            app = Flask(__name__) \n            client = TwilioRestClient(config.TWILIO_ACCOUNT_SID, \n                                      config.TWILIO_AUTH_TOKEN) \n\n            @app.route('/call', methods=['POST']) \n            def outbound_call(): \n                response = twiml.Response() \n                call = client.calls.create( \n                    to=config.MYNUMBER, \n                    from_=config.CALLERID, \n                    record='true', \n                    url=config.BASE_URL + '/answer_url', \n                ) \n                return Response(str(response), 200,\n                                mimetype=\"application/xml\") \n\n            @app.route('/answer_url', methods=['POST']) \n            def answer_url(): \n                response = twiml.Response() \n                response.addSay(\"Hey! You are awesome. Thanks for answering.\") \n                return Response(str(response), 200,\n                                mimetype=\"application/xml\") \n\n            if __name__ == '__main__': \n                app.run(debug=True) \n\n    ```", "```py\n            * Detected change in '/Users/chetan/book/ch05/app.py',\n              reloading \n            * Restarting with stat \n            * Debugger is active! \n            * Debugger pin code: 608-057-122 \n\n            127.0.0.1 - - [16/Jul/2016 21:35:14] \"POST \n                           /call HTTP/1.1\" 200 - \n            127.0.0.1 - - [16/Jul/2016 21:35:22] \"POST \n                           /answer_url HTTP/1.1\" 200 - \n\n    ```", "```py\n            <?xml version=\"1.0\" encoding=\"UTF-8\"?> <Response>\n            <Say>Hey! You are awesome. Thanks for answering</Say>\n            </Response> \n\n    ```", "```py\n            from flask import Flask, Response, request \n            from twilio import twiml \n            from twilio.rest import TwilioRestClient \n\n            app = Flask(__name__) \n            client = TwilioRestClient(config.TWILIO_ACCOUNT_SID, \n                                      config.TWILIO_AUTH_TOKEN) \n\n            @app.route('/incall', methods=['POST']) \n            def inbound_call(): \n                response = twiml.Response() \n                response.addSay(\"Thanks for calling our customer \n                                 service.\" \"Please hold while we \n                                 connect you to our advisors.\") \n                return Response(str(response), 200,\n                                mimetype=\"application/xml\") \n\n            if __name__ == '__main__': \n                app.run(debug=True) \n\n    ```", "```py\n     python voice_outbound.py\n\n    ```", "```py\n     ./ngrok http 5000\n\n    ```", "```py\n        import config \n        from flask import Flask, Response, request \n        from twilio import twiml \n        from twilio.rest import TwilioRestClient \n\n        app = Flask(__name__) \n        client = TwilioRestClient(config.TWILIO_ACCOUNT_SID, \n                                  config.TWILIO_AUTH_TOKEN) \n\n        @app.route('/call', methods=['POST']) \n        def inbound_call(): \n            call_sid = request.form['CallSid'] \n            response = twiml.Response() \n            response.dial().conference(call_sid) \n            call = client.calls.create(to=config.MYNUMBER, \n                                       from_=config.CALLERID, \n                                       url=config.BASE_URL + \n                                       '/conference/' + call_sid) \n            return Response(str(response), 200,\n                            mimetype=\"application/xml\") \n\n        @app.route('/conference/<conference_name>', \n                    methods=['GET', 'POST']) \n        def conference_line(conference_name): \n            response = twiml.Response() \n        response.dial(hangupOnStar=True).conference(\n                          conference_name) \n            return Response(str(response), 200,\n                            mimetype=\"application/xml\") \n\n        if __name__ == '__main__': \n            app.run(debug=True) \n\n```"]