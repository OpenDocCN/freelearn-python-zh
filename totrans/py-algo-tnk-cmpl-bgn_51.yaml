- en: Chapter 35
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第35章
- en: User-Defined Subprograms
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的子程序
- en: 35.1 Subprograms that Return Values
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.1 返回值的子程序
- en: In Python and many other computer languages, a subprogram that returns values
    is called a function. There are two categories of functions in Python. There are
    the built-in functions, such as int(), float(), and there are the user-defined
    functions, those that you can personally write and use in your own programs.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python和许多其他计算机语言中，返回值的子程序称为函数。Python中有两种函数类别。有内置函数，如int()、float()，还有用户定义函数，即你可以亲自编写并在自己的程序中使用它们。
- en: The general form of a Python function that returns one or more values is shown
    here.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 返回一个或多个值的Python函数的一般形式如下所示。
- en: 'def name([arg1, arg2, arg3, …]):'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 'def name([arg1, arg2, arg3, …]):'
- en: A statement or block of statements
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: return value1 [, value2, value3, … ]
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: return value1 [, value2, value3, … ]
- en: where
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►name is the name of the function.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: ►name 是函数的名称。
- en: ►arg1, arg2, arg3, … is a list of arguments (variables, lists etc.) used to
    pass values from the caller to the function. There can be as many arguments as
    you need.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: ►arg1、arg2、arg3、… 是参数（变量、列表等）的列表，用于从调用者传递值到函数。可以有你需要那么多参数。
- en: ►value1, value2, value3, … are the values returned to the caller. They can be
    constant values, variables, expressions, or even data structures.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ►value1, value2, value3, … 是返回给调用者的值。它们可以是常量值、变量、表达式，甚至是数据结构。
- en: '![](img/notice.jpg)Note that arguments are optional; that is, a function may
    contain no arguments.'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，参数是可选的；也就是说，一个函数可能不包含任何参数。'
- en: '![](img/notice.jpg)In [Section 5.4](chapter05.html#toc_4) you learned about
    the rules that must be followed when assigning names to variables. Assigning names
    to subprograms follows exactly the same rules!'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在[第5.4节](chapter05.html#toc_4)中，你学习了在给变量命名时必须遵循的规则。给子程序命名遵循完全相同的规则！'
- en: The function name can be likened to a box (see Figure 35–1) which contains a
    statement or block of statements. It accepts the arguments arg1, arg2, arg3, …
    as input values and returns value1, value2, value3, … as output values.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 函数名称可以比作一个盒子（见图35–1），其中包含一个语句或语句块。它接受arg1、arg2、arg3、…作为输入值，并返回value1、value2、value3、…作为输出值。
- en: '![Image](img/chapter35-01.png)'
  id: totrans-15
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter35-01.png)'
- en: Figure 35–1 A function can be likened to a box
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 图35–1 函数可以比作一个盒子
- en: For example, the next function accepts two numbers through the arguments num1
    and num2, then calculates their sum and returns the result.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下一个函数通过参数num1和num2接受两个数字，然后计算它们的和并返回结果。
- en: 'def getSum(num1, num2):'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'def getSum(num1, num2):'
- en: result = num1 + num2
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: result = num1 + num2
- en: return result
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: return result
- en: Of course, this can also be written as
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，这也可以写成
- en: 'def getSum(num1, num2):'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'def getSum(num1, num2):'
- en: return num1 + num2
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: return num1 + num2
- en: The next function calculates the sum and the difference of two numbers, and
    returns the results.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个函数计算两个数字的和与差，并返回结果。
- en: 'def getSumDif(num1, num2):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'def getSumDif(num1, num2):'
- en: s = num1 + num2
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: s = num1 + num2
- en: d = num1 - num2
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: d = num1 - num2
- en: return s, d
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: return s, d
- en: 35.2 How to Make a Call to a Function
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.2 如何调用函数
- en: 'Every call to a function is as follows: you write the name of the function
    followed by a list of arguments (if required), either within a statement that
    assigns the function''s returned value to a variable or directly within an expression.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 每次调用函数都是这样的：你写下函数的名称，后面跟着一个参数列表（如果需要），要么在一个将函数返回值分配给变量的语句中，要么直接在表达式中。
- en: Let's see some examples. The following function accepts a numeric value through
    the argument num and returns the result of that value raised to the power of three.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些例子。以下函数通过参数num接受一个数值，然后返回该数值的三次幂的结果。
- en: 'def cube(num):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 'def cube(num):'
- en: result = num ** 3
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: result = num ** 3
- en: return result
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: return result
- en: Now, suppose that you want to calculate a result of the following expression
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设你想计算以下表达式的结果
- en: .![Image](img/chapter35-02.png)
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter35-02.png)
- en: You can either assign the returned value from the function cube() to a variable,
    as shown here
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将函数cube()返回的值分配给一个变量，如下所示
- en: x = float(input())
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: cb = cube(x)            #Assign the returned value to a variable
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: cb = cube(x)            #将返回的值分配给变量
- en: y = cb + 1 / x          #and use that variable
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: y = cb + 1 / x          #并使用该变量
- en: print(y)
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: or you can call the function directly in an expression,
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你可以在表达式中直接调用函数，
- en: x = float(input())
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: 'y = cube(x) + 1 / x     #Call the function directly in an expression'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'y = cube(x) + 1 / x     #直接在表达式中调用函数'
- en: print(y)
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: or you can even call the function directly in a print() statement.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 或者你甚至可以直接在print()语句中调用函数。
- en: x = float(input())
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: print(cube(x) + 1 / x)  #Call the function directly in a print() statement
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: print(立方(x) + 1 / x)  #直接在print()语句中调用函数
- en: '![](img/notice.jpg)User-defined functions can be called just like the built-in
    functions of Python.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)用户定义的函数可以像Python的内置函数一样调用。'
- en: Now let's see another example. The next Python program defines the function
    getMessage() and then the main code calls it. The returned value is assigned to
    variable a.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在让我们看看另一个例子。下一个Python程序定义了函数getMessage()，然后主代码调用它。返回值被分配给变量a。
- en: '![](img/my_exercise_header.png) file_35.2a'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.2a'
- en: '#Define the function'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '#定义函数'
- en: 'def getMessage():'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 'def 获取消息():'
- en: msg = "Hello Zeus"
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: msg = "你好，宙斯"
- en: return msg
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 返回消息
- en: '#Main code starts here'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: print("Hi there!")
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: print("你好！")
- en: a = getMessage()
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: a = 获取消息()
- en: print(a)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: If you run this program, the following messages are displayed.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个程序，将显示以下消息。
- en: .![Image](img/chapter35-03.png)
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter35-03.png)
- en: '![](img/notice.jpg)A function does not execute immediately when a program starts
    running. The first statement that actually executes in the last example is the
    statement print("Hi there!").'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)函数在程序开始运行时不会立即执行。在上一个例子中，实际执行的第一个语句是print("你好！")。'
- en: You can pass (send) values to a function, as long as at least one argument exists
    within the function's parentheses. In the next example, the function display()
    is called three times but each time a different value is passed through the argument
    color.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以向函数传递（发送）值，只要函数的括号内至少有一个参数存在。在下一个例子中，函数display()被调用了三次，但每次通过参数颜色传递了不同的值。
- en: '![](img/my_exercise_header.png) file_35.2b'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.2b'
- en: '#Define the function'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '#定义函数'
- en: 'def display(color):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'def 显示(颜色):'
- en: msg = "There is " + color + " in the rainbow"
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: msg = "彩虹中有" + 颜色 + "的"
- en: return msg
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 返回消息
- en: '#Main code starts here'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: print(display("red"))
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: print(显示("红色"))
- en: print(display("yellow"))
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: print(显示("黄色"))
- en: print(display("blue"))
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: print(显示("蓝色"))
- en: If you run this program, the following messages are displayed.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个程序，将显示以下消息。
- en: '![Image](img/chapter35-04.png)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter35-04.png)'
- en: In the next example, two values must be passed to function display().
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个例子中，必须向函数display()传递两个值。
- en: '![](img/my_exercise_header.png) file_35.2c'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.2c'
- en: 'def display(color, exists):'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'def 显示(颜色, exists):'
- en: neg = ""
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: neg = ""
- en: 'if not exists:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 'if not exists:'
- en: neg = "n't any"
  id: totrans-80
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: neg = "n't any"
- en: return "There is" + neg + " " + color + " in the rainbow"
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: return "There is" + neg + " " + 颜色 + " in the rainbow"
- en: '#Main code starts here'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: print(display("red", True))
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: print(显示("红色", True))
- en: print(display("yellow", True))
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: print(显示("黄色", True))
- en: print(display("black", False))
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: print(显示("黑色", False))
- en: If you run this program the following messages are displayed.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你运行这个程序，将显示以下消息。
- en: '![Image](img/chapter35-05.png)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter35-05.png)'
- en: '![](img/notice.jpg)In Python, you must place your subprograms above your main
    code. In other computer languages, such as Java or PHP, you can place your subprograms
    either above or below your main code. Even then, however, most programmers prefer
    to have all subprograms on the top for better observation.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在Python中，你必须将你的子程序放在你的主代码之上。在其他计算机语言中，例如Java或PHP，你可以将你的子程序放在主代码之上或之下。即使如此，然而，大多数程序员更喜欢将所有子程序放在顶部，以便更好地观察。'
- en: As already mentioned, a function in Python can return more than one value. The
    next example prompts the user to enter their first and last name, and it then
    displays them.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 正如之前提到的，Python中的函数可以返回多个值。下一个例子提示用户输入他们的名字和姓氏，然后显示它们。
- en: '![](img/my_exercise_header.png) file_35.2d'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.2d'
- en: '#Define the function'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '#定义函数'
- en: 'def getFullname():'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'def 获取全名():'
- en: 'firstName = input("Enter first name: ")'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'firstName = input("输入名字: ")'
- en: 'lastName = input("Enter last name: ")'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 'lastName = input("输入姓氏: ")'
- en: return firstName, lastName
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: return firstName, lastName
- en: '#Main code starts here'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: fname, lname = getFullname()
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: fname, lname = 获取全名()
- en: print("First name:", fname)
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: print("名字:", fname)
- en: print("Last name:", lname)
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: print("姓氏:", lname)
- en: 35.3 Subprograms that Return no Values
  id: totrans-100
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.3 不返回值的子程序
- en: In computer science, a subprogram that returns no values can be known as a procedure,
    subprocedure, subroutine, void function, void method, and more. In Python, the
    preferred term is usually void function.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，不返回值的子程序可以被称为过程、子过程、子程序、空函数、空方法等。在Python中，通常首选的术语是空函数。
- en: The general form of a Python void function is
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: Python空函数的一般形式是
- en: 'def name([arg1, arg2, arg3, …]):'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'def name([arg1, arg2, arg3, …]):'
- en: A statement or block of statements
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 一个语句或语句块
- en: where
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: where
- en: ►name is the name of the void function.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: ►name 是空函数的名称。
- en: ►arg1, arg2, arg3, … is a list of arguments (variables, lists etc.) used to
    pass values from the caller to the void function. There can be as many arguments
    as you want.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: ►arg1, arg2, arg3, … 是用于从调用者传递值到空函数的参数（变量、列表等）列表。可以有任意多的参数。
- en: '![](img/notice.jpg)Note that arguments are optional; that is, a void function
    may contain no arguments.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，参数是可选的；也就是说，空函数可以不包含任何参数。'
- en: For example, the next void function accepts two numbers through the arguments
    num1 and num2, then calculates their sum and finally displays the result.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，下一个空函数通过参数 num1 和 num2 接收两个数字，然后计算它们的和，最后显示结果。
- en: 'def displaySum(num1, num2):'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'def displaySum(num1, num2):'
- en: result = num1 + num2
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: result = num1 + num2
- en: print(result)
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: print(result)
- en: 35.4 How to Make a Call to a void Function
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.4 如何调用空函数
- en: You can make a call to a void function by just writing its name. The next example
    defines the void function displayLine() and the main code calls the void function
    whenever it needs to display a horizontal line.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过仅写出其名称来调用空函数。下一个示例定义了空函数 displayLine() 和主代码在需要显示水平线时调用空函数。
- en: '![](img/my_exercise_header.png) file_35.4a'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.4a'
- en: '#Define the void function'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '#定义空函数'
- en: 'def displayLine():'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'def displayLine():'
- en: print("-----------------------------")
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: print("-----------------------------")
- en: '#Main code starts here'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: print("Hello there!")
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello there!")
- en: displayLine()
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: displayLine()
- en: print("How do you do?")
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: print("How do you do?")
- en: displayLine()
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: displayLine()
- en: print("What is your name?")
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: print("What is your name?")
- en: displayLine()
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: displayLine()
- en: You can pass (send) values to a void function, as long as at least one argument
    exists within void function's parentheses. In the next example, the void function
    displayLine() is called three times but each time a different value is passed
    through the variable length, resulting in three printed lines of different length.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以向空函数传递（发送）值，只要在空函数的括号内至少存在一个参数。在下一个示例中，空函数 displayLine() 被调用了三次，但每次通过变量 length
    传递了不同的值，结果打印了三条不同长度的线条。
- en: '![](img/my_exercise_header.png) file_35.4b'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.4b'
- en: 'def displayLine(length):'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'def displayLine(length):'
- en: print("-" * length)
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: print("-" * length)
- en: '#Main code starts here'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: print("Hello there!")
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello there!")
- en: displayLine(12)
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: displayLine(12)
- en: print("How do you do?")
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: print("How do you do?")
- en: displayLine(14)
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: displayLine(14)
- en: print("What is your name?")
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: print("What is your name?")
- en: displayLine(18)
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: displayLine(18)
- en: '![](img/remember.jpg)Since the void function displayLine() returns no value,
    the following line of code is wrong. You cannot assign the void function to a
    variable because there isn''t any returned value!'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)由于空函数 displayLine() 不返回任何值，以下代码行是错误的。您不能将空函数赋值给变量，因为没有返回值！'
- en: y = display_line(12)
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: y = display_line(12)
- en: Also, you cannot call it within a statement. The following line of code is also
    wrong.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，您不能在语句中调用它。以下代码行也是错误的。
- en: print("Hello there!\n", display_line(12))
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello there!\n", display_line(12))
- en: 35.5 Formal and Actual Arguments
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.5 形式参数和实际参数
- en: Each function (or void function) contains an argument list called a formal argument
    list. As already stated, arguments in this list are optional; the formal argument
    list may contain no arguments, one argument, or more than one argument.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 每个函数（或空函数）都包含一个称为形式参数列表的参数列表。如前所述，此列表中的参数是可选的；形式参数列表可以不包含任何参数，包含一个参数，或包含多个参数。
- en: When a subprogram (function, or void function) is called, an argument list may
    be passed to the subprogram. This list is called an actual argument list.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用子程序（函数或空函数）时，可以向子程序传递一个参数列表。此列表称为实际参数列表。
- en: In the next example, the formal arguments (variables) n1 and n2 constitute the
    formal argument list whereas the formal arguments (variables) x and y, as well
    as formal arguments (expressions) x + y and y / 2, constitute the actual argument
    lists.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个示例中，形式参数（变量）n1 和 n2 构成形式参数列表，而形式参数（变量）x 和 y，以及形式参数（表达式）x + y 和 y / 2，构成实际参数列表。
- en: '![](img/my_exercise_header.png) file_35.5'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.5'
- en: '#Define the function multiply().'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '#定义函数 multiply()。'
- en: '#The two arguments n1 and n2 are called formal arguments.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '#n1 和 n2 这两个参数被称为形式参数。'
- en: 'def multiply(  n1, n2  ):      [[More…]](more.html#more_35_5_1)'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: def multiply(  n1, n2  ):    [[更多…]](more.html#more_35_5_1)
- en: result = n1 * n2
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: result = n1 * n2
- en: return result
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: return result
- en: '#Main code starts here'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: x = float(input())
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: y = float(input())
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: y = float(input())
- en: '#Call the function multiply().'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '#调用multiply()函数。'
- en: '#The two arguments x and y are called actual arguments.'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '#两个参数x和y被称为实际参数。'
- en: w = multiply(  x, y  )      [[More…]](more.html#more_35_5_2)
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: w = multiply( x, y )      [[更多…]](more.html#more_35_5_2)
- en: print(w)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: print(w)
- en: '#Call the function multiply().'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '#调用multiply()函数。'
- en: '#The two arguments x + y and y / 2 are called actual arguments.'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '#两个参数x + y和y / 2被称为实际参数。'
- en: print(multiply(  x + 2, y / 2  ))     [[More…]](more.html#more_35_5_3)
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: print(multiply( x + 2, y / 2 ))     [[更多…]](more.html#more_35_5_3)
- en: '![](img/notice.jpg)Note that there is a one-to-one correspondence between the
    formal and the actual arguments. In the first call, the value of the actual argument
    x is passed to the formal argument n1, and the value of actual argument y is passed
    to the formal argument n2\. In the second call, the value of the actual argument
    (the result of the expression) x + 2 is passed to the formal argument n1, and
    the value of the actual argument (the result of the expression) y / 2 is passed
    to the formal argument n2.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意形式参数和实际参数之间存在一对一的对应关系。在第一次调用中，实际参数x的值传递给形式参数n1，实际参数y的值传递给形式参数n2。在第二次调用中，实际参数（表达式结果）x
    + 2的值传递给形式参数n1，实际参数（表达式结果）y / 2的值传递给形式参数n2。'
- en: 35.6 How Does a Function Execute?
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.6 函数是如何执行的？
- en: 'When the main code calls a function the following steps are performed:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 当主代码调用函数时，以下步骤被执行：
- en: ►The execution of the statements of the main code is interrupted.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: ►主代码的语句执行被中断。
- en: ►The values of the variables or the result of the expressions that exist in
    the actual argument list are passed (assigned) to the corresponding arguments
    (variables) in the formal argument list, and the flow of execution goes to where
    the function is written.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: ►变量值或实际参数列表中存在的表达式的结果被传递（分配）到形式参数列表中对应的参数（变量）中，执行流程转到函数定义的位置。
- en: ►The statements of the function are executed.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ►函数的语句被执行。
- en: ►When the flow of execution reaches a return statement, one or more values are
    returned from the function to the main code and the flow of execution continues
    from where it was before calling the function.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ►当执行流程到达返回语句时，一个或多个值从函数返回到主代码，执行流程从调用函数之前的位置继续。
- en: In the next Python program, the function maximum() accepts two arguments (numeric
    values) and returns the greater of the two values.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个Python程序中，函数maximum()接受两个参数（数值）并返回两个值中较大的一个。
- en: '![](img/my_exercise_header.png) file_35.6'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.6'
- en: 'def maximum(val1, val2):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'def maximum(val1, val2):'
- en: m = val1
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: m = val1
- en: 'if val2 > m:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 'if val2 > m:'
- en: m = val2
  id: totrans-173
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: m = val2
- en: return m
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: return m
- en: '#Main code starts here'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: a = float(input())
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: b = float(input())
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: b = float(input())
- en: maxim = maximum(a, b)
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: maxim = maximum(a, b)
- en: print(maxim)
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: print(maxim)
- en: When the Python program starts running, the first statement executed is the
    statement a = float(input()) (this is considered the first statement of the program).
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当Python程序开始运行时，第一条执行的语句是a = float(input())（这被认为是程序的第一条语句）。
- en: Below is a trace table that shows the exact flow of execution, how the values
    of the variables a and b are passed from the main code to the function, and how
    the function returns its result. Suppose the user enters the values 3 and 8.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一个跟踪表，显示了执行流程的确切流程，变量a和b的值是如何从主代码传递到函数中，以及函数是如何返回其结果的。假设用户输入的值是3和8。
- en: '| Step | Statements of the Main Code | a | b | maxim |'
  id: totrans-182
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 主代码的语句 | a | b | maxim |'
- en: '| 1 | a = float(input()) | 3.0 | ? | ? |'
  id: totrans-183
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = float(input()) | 3.0 | ? | ? |'
- en: '| 2 | b = float(input()) | 3.0 | 8.0 | ? |'
  id: totrans-184
  prefs: []
  type: TYPE_TB
  zh: '| 2 | b = float(input()) | 3.0 | 8.0 | ? |'
- en: '| 3 | maxim = maximum(a, b) |   |   |   |'
  id: totrans-185
  prefs: []
  type: TYPE_TB
  zh: '| 3 | maxim = maximum(a, b) |   |   |   |'
- en: When the call to the function maximum() is made, the execution of the statements
    of the main code is interrupted, the values of the variables a and b are passed
    (assigned, if you prefer) to the corresponding formal arguments (variables) val1
    and val2, and the flow of execution goes to where the function is written. Then
    the statements of the function are executed.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用函数maximum()时，主代码的语句执行被中断，变量a和b的值被传递（分配，如果你愿意）到相应的形式参数（变量）val1和val2，执行流程转到函数定义的位置。然后执行函数的语句。
- en: '| Step | Statements of Function maximum() | val1 | val2 | m |'
  id: totrans-187
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 函数maximum()的语句 | val1 | val2 | m |'
- en: '| 4 | m = val1 | 3.0 | 8.0 | 3.0 |'
  id: totrans-188
  prefs: []
  type: TYPE_TB
  zh: '| 4 | m = val1 | 3.0 | 8.0 | 3.0 |'
- en: '| 5 | if val2 > m: | This evaluates to True |'
  id: totrans-189
  prefs: []
  type: TYPE_TB
  zh: '| 5 | if val2 > m: | This evaluates to True |'
- en: '| 6 | m = val2 | 3.0 | 8.0 | 8.0 |'
  id: totrans-190
  prefs: []
  type: TYPE_TB
  zh: '| 6 | m = val2 | 3.0 | 8.0 | 8.0 |'
- en: '| 7 | return m |   |   |   |'
  id: totrans-191
  prefs: []
  type: TYPE_TB
- en: When the flow of execution reaches the return statement, the value 8 is returned
    from the function to the main code (and assigned to the variable maxim) and the
    flow of execution continues from where it was before calling the function. The
    main code displays the value of 8 on the user's screen.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statements of the Main Code | a | b | maxim |'
  id: totrans-193
  prefs: []
  type: TYPE_TB
- en: '| 8 | print(maxim) | 3.0 | 8.0 | 8.0 |'
  id: totrans-194
  prefs: []
  type: TYPE_TB
- en: Exercise 35.6-1 Back to Basics – Calculating the Sum of Two Numbers
  id: totrans-195
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named total that accepts two numeric values through its
    formal argument list and then calculates and returns their sum.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that lets the user
    enter two numbers and then displays their sum. Next, create a trace table to determine
    the values of the variables in each step of the Python program for two different
    executions.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 2, 4; and (ii) 10, 20.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise you need to write a function that accepts two values from the
    caller (this is the main code) and then calculates and returns their sum. The
    solution is shown here.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.6-1'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'def total(a, b):'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: s = a + b
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: return s
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: num1 = float(input())
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: num2 = float(input())
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: result = total(num1, num2)
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: print("The sum of", num1, "+", num2, "is", result)
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create the corresponding trace tables. Since you have become more
    experienced with them, the column “Notes” has been removed.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input values of 2, 4, the trace table looks like this.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Main Code | Function total() |'
  id: totrans-213
  prefs: []
  type: TYPE_TB
- en: '| num1 | num2 | result | a | b | s |'
  id: totrans-214
  prefs: []
  type: TYPE_TB
- en: '| 1 | num1 = float(input()) | 2.0 | ? | ? |   |   |   |'
  id: totrans-215
  prefs: []
  type: TYPE_TB
- en: '| 2 | num2 = float(input()) | 2.0 | 4.0 | ? |   |   |   |'
  id: totrans-216
  prefs: []
  type: TYPE_TB
- en: '| 3 | result = total(num1, num2) |   |   |   | 2.0 | 4.0 | ? |'
  id: totrans-217
  prefs: []
  type: TYPE_TB
- en: '| 4 | s = a + b |   |   |   | 2.0 | 4.0 | 6.0 |'
  id: totrans-218
  prefs: []
  type: TYPE_TB
- en: '| 5 | return s | 2.0 | 4.0 | 6.0 |   |   |   |'
  id: totrans-219
  prefs: []
  type: TYPE_TB
- en: '| 6 | print("The sum of… | It displays: The sum of 2.0 + 4.0 is 6.0 |'
  id: totrans-220
  prefs: []
  type: TYPE_TB
- en: ii)For the input values of 10, 20, the trace table looks like this.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Main Code | Function total() |'
  id: totrans-222
  prefs: []
  type: TYPE_TB
- en: '| num1 | num2 | result | a | b | s |'
  id: totrans-223
  prefs: []
  type: TYPE_TB
- en: '| 1 | num1 = float(input()) | 10.0 | ? | ? |   |   |   |'
  id: totrans-224
  prefs: []
  type: TYPE_TB
- en: '| 2 | num2 = float(input()) | 10.0 | 20.0 | ? |   |   |   |'
  id: totrans-225
  prefs: []
  type: TYPE_TB
- en: '| 3 | result = total(num1, num2) |   |   |   | 10.0 | 20.0 | ? |'
  id: totrans-226
  prefs: []
  type: TYPE_TB
- en: '| 4 | s = a + b |   |   |   | 10.0 | 20.0 | 30.0 |'
  id: totrans-227
  prefs: []
  type: TYPE_TB
- en: '| 5 | return s | 10.0 | 20.0 | 30.0 |   |   |   |'
  id: totrans-228
  prefs: []
  type: TYPE_TB
- en: '| 6 | print("The sum of… | It displays: The sum of 10.0 + 20.0 is 30.0 |'
  id: totrans-229
  prefs: []
  type: TYPE_TB
- en: Exercise 35.6-2 Calculating the Sum of Two Numbers Using Fewer Lines of Code!
  id: totrans-230
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Rewrite the Python program of the previous exercise using fewer lines of code.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: The solution is shown here.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.6-2'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: 'def total(a, b):'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: return a + b
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: num1 = float(input())
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: num2 = float(input())
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: print("The sum of", num1, "+", num2, "is", total(num1, num2))
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: Contrary to the solution of the previous exercise, in this method total(), the
    sum is not assigned to variable s but is directly calculated and returned. Furthermore,
    in this main code, the returned value in not assigned to a variable but is directly
    displayed.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 与前一个练习的解决方案相反，在这个方法total()中，总和不是分配给变量s，而是直接计算并返回。此外，在这个主代码中，返回的值不是分配给变量，而是直接显示。
- en: '![](img/remember.jpg)User-defined functions can be called just like the built-in
    functions of Python.'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)用户定义的函数可以像Python的内置函数一样调用。'
- en: 35.7 How Does a void Function Execute?
  id: totrans-243
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.7 如何执行空函数？
- en: 'When the main code calls a void function, the following steps are performed:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 当主代码调用空函数时，执行以下步骤：
- en: ►The execution of the statements of the main code is interrupted.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: ►主代码的语句执行被中断。
- en: ►The values of the variables or the result of the expressions that exist in
    the actual argument list are passed (assigned) to the corresponding arguments
    (variables) in the formal argument list and the flow of execution goes to where
    the void function is written.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: ►实际参数列表中存在的变量值或表达式的结果被传递（分配）到形式参数列表中相应的参数（变量）中，执行流程转到空函数的编写处。
- en: ►The statements of the void function are executed.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: ►空函数的语句被执行。
- en: ►When the flow of execution reaches the end of the void function, the flow of
    execution continues from where it was before calling the void function.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: ►当执行流程达到空函数的末尾时，执行流程从调用空函数之前的位置继续。
- en: In the next Python program, the void function minimum() accepts three arguments
    (numeric values) through its formal argument list and displays the lowest value.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一个Python程序中，空函数minimum()通过其形式参数列表接受三个参数（数值）并显示最小值。
- en: '![](img/my_exercise_header.png) file_35.7'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.7'
- en: 'def minimum(val1, val2, val3):'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 'def minimum(val1, val2, val3):'
- en: minim = val1
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: minim = val1
- en: 'if val2 < minim:'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 'if val2 < minim:'
- en: minim = val2
  id: totrans-254
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: minim = val2
- en: 'if val3 < minim:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'if val3 < minim:'
- en: minim = val3
  id: totrans-256
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: minim = val3
- en: print(minim)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: print(minim)
- en: '#Main code starts here'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '#主代码从这里开始'
- en: a = float(input())
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: b = float(input())
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: b = float(input())
- en: c = float(input())
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: c = float(input())
- en: minimum(a, b, c)
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: minimum(a, b, c)
- en: print("The end")
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: print("The end")
- en: When the Python program starts running, the first statement executed is the
    statement a = float(input()) (this is considered the first statement of the program).
    Suppose the user enters the values 9, 6, and 8.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 当Python程序开始运行时，首先执行的是语句a = float(input())（这被认为是程序的第一条语句）。假设用户输入的值是9、6和8。
- en: '| Step | Statements of the Main Code | a | b | c |'
  id: totrans-265
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 主代码的语句 | a | b | c |'
- en: '| 1 | a = float(input()) | 9.0 | ? | ? |'
  id: totrans-266
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = float(input()) | 9.0 | ? | ? |'
- en: '| 2 | b = float(input()) | 9.0 | 6.0 | ? |'
  id: totrans-267
  prefs: []
  type: TYPE_TB
  zh: '| 2 | b = float(input()) | 9.0 | 6.0 | ? |'
- en: '| 3 | c = float(input()) | 9.0 | 6.0 | 8.0 |'
  id: totrans-268
  prefs: []
  type: TYPE_TB
  zh: '| 3 | c = float(input()) | 9.0 | 6.0 | 8.0 |'
- en: '| 4 | minimum(a, b, c) |   |   |   |'
  id: totrans-269
  prefs: []
  type: TYPE_TB
  zh: '| 4 | minimum(a, b, c) |   |   |   |'
- en: When a call to the void function minimum() is made, the execution of the statements
    of the main code is interrupted, the values of the variables a, b, and c are passed
    (assigned) to the corresponding formal arguments (variables) val1, val2, and val3,
    and the statements of the void function are executed.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 当调用空函数minimum()时，主代码的语句执行被中断，变量a、b和c的值被传递（分配）到相应的形式参数（变量）val1、val2和val3，然后执行空函数的语句。
- en: '| Step | Statements of void Function minimum() | val1 | val2 | val3 | minim
    |'
  id: totrans-271
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 空函数minimum()的语句 | val1 | val2 | val3 | minim |'
- en: '| 5 | minim = val1 | 9.0 | 6.0 | 8.0 | 9.0 |'
  id: totrans-272
  prefs: []
  type: TYPE_TB
  zh: '| 5 | minim = val1 | 9.0 | 6.0 | 8.0 | 9.0 |'
- en: '| 6 | if val2 < minim: | This evaluates to True |'
  id: totrans-273
  prefs: []
  type: TYPE_TB
  zh: '| 6 | if val2 < minim: | 这评估为True |'
- en: '| 7 | minim = val2 | 9.0 | 6.0 | 8.0 | 6.0 |'
  id: totrans-274
  prefs: []
  type: TYPE_TB
  zh: '| 7 | minim = val2 | 9.0 | 6.0 | 8.0 | 6.0 |'
- en: '| 8 | if val3 < minim: | This evaluates to False |'
  id: totrans-275
  prefs: []
  type: TYPE_TB
  zh: '| 8 | if val3 < minim: | 这评估为False |'
- en: '| 9 | print(minim) | It displays: 6.0 |'
  id: totrans-276
  prefs: []
  type: TYPE_TB
  zh: '| 9 | print(minim) | 它显示：6.0 |'
- en: When the flow of execution reaches the end of the void function the flow of
    execution simply continues from where it was before calling the void function.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 当执行流程达到空函数的末尾时，执行流程简单地从调用空函数之前的位置继续。
- en: '| Step | Statements of the Main Code | a | b | c |'
  id: totrans-278
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 主代码的语句 | a | b | c |'
- en: '| 10 | print("The end") | It displays: The end |'
  id: totrans-279
  prefs: []
  type: TYPE_TB
  zh: '| 10 | print("The end") | 它显示：The end |'
- en: '![](img/notice.jpg)Note that between step 9 and step 10, no values are returned
    from the void function to the main code.'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意在步骤9和步骤10之间，从空函数中没有返回任何值到主代码。'
- en: Exercise 35.7-1 Back to Basics – Displaying the Absolute Value of a Number
  id: totrans-281
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习35.7-1 回归基础 – 显示一个数的绝对值
- en: 'Do the following:'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: i)Write a subprogram named displayAbs that accepts a numeric value through its
    formal argument list and then displays its absolute value. Do not use the built-in
    abs() function of Python.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为displayAbs的子程序，它通过形式参数列表接受一个数值，然后显示其绝对值。不要使用Python的内置abs()函数。
- en: ii)Using the subprogram cited above, write a Python program that lets the user
    enter a number and then displays its absolute value followed by the user-provided
    value. Next, create a trace table to determine the values of the variables in
    each step of the Python program for two different executions.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个Python程序，允许用户输入一个数字，然后显示其绝对值，接着显示用户提供的值。接下来，创建跟踪表以确定Python程序两次不同执行中每个步骤的变量值。
- en: 'The input values for the two executions are: (i) 5, and (ii) −5.'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 两次执行的输入值分别为：(i) 5，和(ii) −5。
- en: Solution
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: In this exercise you need to write a void function that accepts a value from
    the caller (this is the main code) and then calculates and displays its absolute
    value. The solution is shown here.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你需要编写一个无返回值函数，该函数接受调用者传递的值（这是主代码部分）然后计算并显示其绝对值。解决方案如下所示。
- en: '![](img/my_exercise_header.png) file_35.7-1'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_35.7-1'
- en: 'def displayAbs(n):'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 'def displayAbs(n):'
- en: 'if n < 0:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 'if n < 0:'
- en: n = (-1) * n
  id: totrans-291
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: n = (-1) * n
- en: print(n)
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: print(n)
- en: '#Main code starts here'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '# 主代码从这里开始'
- en: a = float(input())
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: displayAbs(a)      #This displays the absolute value of the user-provided number.
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: displayAbs(a)      # 这显示用户提供的数字的绝对值。
- en: 'print(a)           #This displays the user-provided number.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(a)           # 这显示用户提供的数字。'
- en: Now, let's create the corresponding trace tables.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们创建相应的跟踪表。
- en: i)For the input value of 5, the trace table looks like this.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: i)对于输入值5，跟踪表如下所示。
- en: '| Step | Statement | Main Code | void Function displayAbs() |'
  id: totrans-299
  prefs: []
  type: TYPE_TB
  zh: 9)以下语句是一个有效的Python语句。
- en: '| a | n |'
  id: totrans-300
  prefs: []
  type: TYPE_TB
  zh: '| a | n |'
- en: '| 1 | a = float(input()) | 5.0 |   |'
  id: totrans-301
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = float(input()) | 5.0 |   |'
- en: '| 2 | displayAbs(a) |   | 5.0 |'
  id: totrans-302
  prefs: []
  type: TYPE_TB
  zh: '| 2 | displayAbs(a) |   | 5.0 |'
- en: '| 3 | if n < 0: | This evaluates to False |'
  id: totrans-303
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if n < 0: | 这评估为False |'
- en: '| 4 | print(n) | It displays: 5.0 |'
  id: totrans-304
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 主代码 | 无返回值函数displayAbs() |'
- en: '| 5 | print(a) | It displays: 5.0 |'
  id: totrans-305
  prefs: []
  type: TYPE_TB
  zh: '| 5 | print(a) | 它显示：5.0 |'
- en: ii)For the input value of −5, the trace table looks like this.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: ii)对于输入值−5，跟踪表如下所示。
- en: '| Step | Statement | Main Code | void Function displayAbs() |'
  id: totrans-307
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 主代码 | 无返回值函数displayAbs() |'
- en: '| a | n |'
  id: totrans-308
  prefs: []
  type: TYPE_TB
  zh: '| a | n |'
- en: '| 1 | a = float(input()) | −5.0 |   |'
  id: totrans-309
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = float(input()) | −5.0 |   |'
- en: '| 2 | displayAbs(a) |   | −5.0 |'
  id: totrans-310
  prefs: []
  type: TYPE_TB
  zh: '| 2 | displayAbs(a) |   | −5.0 |'
- en: '| 3 | if n < 0: | This evaluates to True |'
  id: totrans-311
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if n < 0: | 这评估为True |'
- en: '| 4 | n = (‑1) * n |   | 5.0 |'
  id: totrans-312
  prefs: []
  type: TYPE_TB
  zh: 4 | n = (−1) * n |   | 5.0 |
- en: '| 5 | print(n) | It displays: 5.0 |'
  id: totrans-313
  prefs: []
  type: TYPE_TB
  zh: '| 5 | print(n) | 它显示：5.0 |'
- en: '| 6 | print(a) | It displays: −5.0 |'
  id: totrans-314
  prefs: []
  type: TYPE_TB
  zh: '| 6 | print(a) | 它显示：−5.0 |'
- en: '![](img/notice.jpg)Note that at step 5 the variable n of the void function
    contains the value 5.0 but when the flow of execution returns to the main code
    at step 6, the variable a of the main code still contains the value −5.0\. Actually,
    the value of variable a of the main code had never changed!'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意，在第5步中，无返回值函数的变量n包含值5.0，但当执行流程在第6步返回主代码时，主代码中的变量a仍然包含值−5.0。实际上，主代码中变量a的值从未改变过！'
- en: '35.8 Review Questions: True/False'
  id: totrans-316
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.8 复习问题：对/错
- en: Choose true or false for each of the following statements.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择对或错。
- en: 1)There are two categories of subprograms that return values in Python.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 1)Python中有两种子程序类别，它们返回值。
- en: 2)The variables that are used to pass values to a function are called arguments.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 2)用于将值传递给函数的变量被称为参数。
- en: 3)The function int() is a user-defined function.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 3)int()函数是一个用户定义的函数。
- en: 4)Every call to a user-defined function is made in the same way as a call to
    the built-in functions of Python.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 4)对用户定义函数的每次调用都与对Python内置函数的调用方式相同。
- en: 5)There can be as many arguments as you wish in a function's formal argument
    list.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 5)函数的形式参数列表可以有任意多个参数。
- en: 6)In a function, the formal argument list must contain at least one argument.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 6)在函数中，形式参数列表必须至少包含一个参数。
- en: 7)In a function, the formal argument list is optional.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 7)在函数中，形式参数列表是可选的。
- en: 8)A function cannot return a list.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 8)函数不能返回一个列表。
- en: 9)The following statement is a valid Python statement.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '| 步骤 | 语句 | 主代码 | 无返回值函数displayAbs() |'
- en: return x + 1
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: return x + 1
- en: 10)A formal argument can be an expression.
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 10)形式参数可以是一个表达式。
- en: 11)An actual argument can be an expression.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: 11)实际参数可以是一个表达式。
- en: 12)A function can have no arguments in the actual argument list.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 12)在Python中，函数可以没有实际参数列表中的参数。
- en: 13)The next statement calls the function cubeRoot() three times.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 13)接下来的语句调用了三次cubeRoot()函数。
- en: cb = cubeRoot(x) + cubeRoot(x) / 2 + cubeRoot(x) / 3
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: cb = cubeRoot(x) + cubeRoot(x) / 2 + cubeRoot(x) / 3
- en: 14)The following code fragment displays exactly the same value as the statement
    print(cubeRoot(x)+5)
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 14)下面的代码片段显示的值与语句print(cubeRoot(x)+5)完全相同
- en: cb = cubeRoot(x)
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: cb = cubeRoot(x)
- en: y = cb + 5
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: y = cb + 5
- en: print(y)
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 15)A function must always include a return statement whereas a void function
    mustn't.
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 15)一个函数必须始终包含一个返回语句，而void函数则不必。
- en: 16)The name play-the-guitar can be a valid function name.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 16)play-the-guitar可以是一个有效的函数名。
- en: 17)In Python, you can place your functions either above or below your main code.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 17)在Python中，你可以将你的函数放在主代码的上方或下方。
- en: 18)When the main code calls a function, the execution of the statements of the
    main code is interrupted.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 18)当主代码调用函数时，主代码的语句执行被中断。
- en: 19)In general, it is possible for a function to return no values to the caller.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 19)一般来说，一个函数可以不向调用者返回任何值。
- en: 20)The function abs() is a built-in function of Python.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 20)函数abs()是Python的一个内置函数。
- en: 21)The following code fragment displays the value 0.5.
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 21)下面的代码片段显示的值是0.5。
- en: 'def divide(b, a):'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 'def divide(b, a):'
- en: return a / b
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: return a / b
- en: a = 10.0
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: a = 10.0
- en: b = 5.0
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: b = 5.0
- en: print(divide(a, b))
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: print(divide(a, b))
- en: 22)In computer science, a subprogram that returns no result is known as a void
    function.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 22)在计算机科学中，一个不返回结果的子程序被称为void函数。
- en: 23)In Python, you can call a void function by writing its name followed by an
    opening and closing parenthesis.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 23)在Python中，你可以通过写出其名称后跟一个开括号和一个闭括号来调用void函数。
- en: 24)In a void function call made in the main code, the variables used within
    the actual argument list must be variables from the main code.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 24)在主代码中进行的void函数调用中，实际参数列表中使用的变量必须是主代码中的变量。
- en: 25)In a void function call, only variables can be used within the actual argument
    list.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 25)在void函数调用中，实际参数列表中只能使用变量。
- en: 26)In a void function, all formal arguments must have different names.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 26)在void函数中，所有形式参数必须有不同的名字。
- en: 27)A void function must always include at least one argument in its formal argument
    list.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 27)一个void函数必须在其形式参数列表中至少包含一个参数。
- en: 28)There is a one-to-one correspondence between the formal and the actual arguments.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 28)形式参数和实际参数之间存在一一对应关系。
- en: 29)You can call a void function within a statement.
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 29)你可以在一个语句中调用一个void函数。
- en: 30)When the flow of execution reaches the end of a void function, the flow of
    execution continues from where it was before calling the void function.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 30)当执行流程到达void函数的末尾时，执行流程从调用void函数之前的位置继续。
- en: 31)A void function returns no values to the caller.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 31)一个void函数不会向调用者返回任何值。
- en: 32)It is possible for a void function to accept no values from the caller.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 32)void函数可以不接受任何值从调用者那里。
- en: 33)A call to a void function is made differently from a call to a function.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 33)调用void函数的方式与调用函数的方式不同。
- en: 34)In the following Python program the first statement that executes is the
    statement print("Hello Aphrodite!").
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 34)在下面的Python程序中，首先执行的是打印语句print("Hello Aphrodite!").
- en: 'def message():'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 'def message():'
- en: print("Hello Aphrodite!")
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hello Aphrodite!")
- en: print("Hi there!")
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: print("Hi there!")
- en: message()
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: message()
- en: 35.9 Review Exercises
  id: totrans-366
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 35.9 复习练习
- en: Complete the following exercises.
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)The following function contains some errors. Can you spot them?
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 1)以下函数包含一些错误。你能找出它们吗？
- en: def findMax(a, b)
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: def findMax(a, b)
- en: 'if a > b:'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > b:'
- en: maximum = a
  id: totrans-371
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: maximum = a
- en: 'else:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: maximum = b
  id: totrans-373
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: maximum = b
- en: 2)Create a trace table to determine the values of the variables in each step
    of the following Python program.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 2)创建一个跟踪表，以确定在以下Python程序每一步中变量的值。
- en: 'def sumDigits(a):'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 'def sumDigits(a):'
- en: d1 = a % 10
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: d1 = a % 10
- en: d2 = a // 10
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: d2 = a // 10
- en: return d1 + d2
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: return d1 + d2
- en: s = 0
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(25, 28):'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(25, 28):'
- en: s += sumDigits(i)
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: s += sumDigits(i)
- en: print(s)
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 3)Create a trace table to determine the values of the variables in each step
    of the following Python program.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 3)创建一个跟踪表，以确定在以下Python程序每一步中变量的值。
- en: 'def sss(a):'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 'def sss(a):'
- en: total = 0
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for k in range(1, a + 1):'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: 'for k in range(1, a + 1):'
- en: total += k
  id: totrans-387
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: total += k
- en: return total
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: return total
- en: i = 1
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: s = 0
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'while i < 6:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < 6:'
- en: 'if i % 2 == 1:'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i % 2 == 1:'
- en: s += 1
  id: totrans-393
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s += 1
- en: 'else:'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: s += sss(i)
  id: totrans-395
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s += sss(i)
- en: i += 1
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(s)
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 4)Create a trace table to determine the values of the variables in each step
    of the following Python program when the value 12 is entered.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 4)创建一个跟踪表，以确定在输入值为12时，以下Python程序每一步中变量的值。
- en: 'def customDiv(b, d):'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 'def customDiv(b, d):'
- en: return (b + d) // 2
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: return (b + d) // 2
- en: k = int(input())
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: k = int(input())
- en: m = 2
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: m = 2
- en: a = 1
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: a = 1
- en: 'while a < 6:'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 'while a < 6:'
- en: 'if k % m != 0:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 'if k % m != 0:'
- en: x = customDiv(a, m)
  id: totrans-406
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = customDiv(a, m)
- en: 'else:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x = a + m + customDiv(m, a)
  id: totrans-408
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = a + m + customDiv(m, a)
- en: print(m, a, x)
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: print(m, a, x)
- en: a += 2
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: a += 2
- en: m += 1
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: m += 1
- en: 5)Create a trace table to determine the values of the variables in each step
    of the following Python program when the values 3, 7, 9, 2, and 4 are entered.
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 5)创建一个跟踪表，以确定当输入值3、7、9、2和4时，以下Python程序每一步中变量的值。
- en: 'def display(a):'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: 'def display(a):'
- en: 'if a % 2 == 0:'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a % 2 == 0:'
- en: print(a, "is even")
  id: totrans-415
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a, "是偶数")
- en: 'else:'
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(a, "is odd")
  id: totrans-417
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a, "是奇数")
- en: 'for i in range(5):'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(5):'
- en: x = int(input())
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: display(x)
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: display(x)
- en: 6)Create a trace table to determine the values of the variables in each step
    of the following Python program.
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 6)创建一个跟踪表，以确定以下Python程序每一步中变量的值。
- en: 'def division(a, b):'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 'def division(a, b):'
- en: b = b // a
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: b = b // a
- en: print(a * b)
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: print(a * b)
- en: x = 20
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: x = 20
- en: y = 30
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: y = 30
- en: 'while x % y < 30:'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: 'while x % y < 30:'
- en: division(y, x)
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: division(y, x)
- en: x = 4 * y
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: x = 4 * y
- en: y += 1
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: y += 1
- en: 7)Create a trace table to determine the values of the variables in each step
    of the following Python program when the values 2, 3, and 4 are entered.
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: 7)创建一个跟踪表，以确定当输入值2、3和4时，以下Python程序每一步中变量的值。
- en: 'def calculate(n):'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: 'def calculate(n):'
- en: s = 0
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for j in range(2, 2 * n + 2, 2):'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(2, 2 * n + 2, 2):'
- en: s = s + j ** 2
  id: totrans-435
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s = s + j ** 2
- en: print(s)
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 'for i in range(3):'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):'
- en: m = int(input())
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: m = int(input())
- en: calculate(m)
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: calculate(m)
- en: 8)Write a subprogram that accepts three numbers through its formal argument
    list and then returns their sum.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: 8)编写一个子程序，它通过形式参数列表接受三个数字，然后返回它们的总和。
- en: 9)Write a subprogram that accepts four numbers through its formal argument list
    and then returns their average.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: 9)编写一个子程序，它通过形式参数列表接受四个数字，然后返回它们的平均值。
- en: 10)Write a subprogram that accepts three numbers through its formal argument
    list and then returns the greatest value. Try not to use the max() function of
    Python.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 10)编写一个子程序，它通过形式参数列表接受三个数字，然后返回最大值。尽量不使用Python的max()函数。
- en: 11)Write a subprogram that accepts five numbers through its formal argument
    list and then displays the greatest value.
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 11)编写一个子程序，它通过形式参数列表接受五个数字，然后显示最大值。
- en: 12)Write a subprogram named myRound that accepts a real through its formal argument
    list and returns it rounded to two decimal places. Try not to use the round()
    function of Python.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 12)编写一个名为myRound的子程序，它通过形式参数列表接受一个实数，并将其四舍五入到两位小数。尽量不使用Python的round()函数。
- en: '13)Do the following:'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: 13)执行以下操作：
- en: i)Write a subprogram named findMin that accepts two numbers through its formal
    argument list and returns the lowest one. Try not to use the min() function of
    Python.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为findMin的子程序，它通过形式参数列表接受两个数字，并返回较小的一个。尽量不使用Python的min()函数。
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter four numbers and then displays the lowest one.
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个Python程序，提示用户输入四个数字，然后显示最小的数字。
- en: '14)Do the following:'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 14)执行以下操作：
- en: i)Write a subprogram named KelvinToFahrenheit that accepts a temperature in
    degrees Kelvin through its formal argument list and returns its degrees Fahrenheit
    equivalent.
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为KelvinToFahrenheit的子程序，它通过形式参数列表接受开尔文温度，并返回其华氏度等效值。
- en: ii)Write a subprogram named KelvinToCelsius that accepts a temperature in degrees
    Kelvin through its formal argument list and returns its degrees Celsius equivalent.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为KelvinToCelsius的子程序，它通过形式参数列表接受开尔文温度，并返回其摄氏度等效值。
- en: iii)Using the subprograms cited above, write a Python program that prompts the
    user to enter a temperature in degrees Kelvin and then displays its degrees Fahrenheit
    and its degrees Celsius equivalent.
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: iii)使用上述子程序，编写一个Python程序，提示用户输入开尔文温度，然后显示其华氏度和摄氏度等效值。
- en: It is given that
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: 已知
- en: Fahrenheit = 1.8 ∙ Kelvin − 459.67
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: 华氏度 = 1.8 ∙ 开尔文 − 459.67
- en: and
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: 和
- en: Celsius = Kelvin − 273.15
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 摄氏度 = 开尔文 − 273.15
- en: 15)The Body Mass Index (BMI) is often used to determine whether a person is
    overweight or underweight for their height. The formula used to calculate the
    BMI is
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: 15)身体质量指数（BMI）常用于确定一个人的体重是否超重或偏轻。计算BMI使用的公式是
- en: .![Image](img/chapter10-08.png)
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter10-08.png)
- en: 'Do the following:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: i)Write a subprogram named bmi that accepts a weight and a height through its
    formal argument list and then returns an action (a message) according to the following
    table.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为bmi的子程序，它通过形式参数列表接受体重和身高，然后根据以下表格返回一个动作（消息）。
- en: '| BMI | Action |'
  id: totrans-460
  prefs: []
  type: TYPE_TB
  zh: '| BMI | 动作 |'
- en: '| BMI < 16 | You must add weight. |'
  id: totrans-461
  prefs: []
  type: TYPE_TB
  zh: '| BMI < 16 | 您必须增加体重。 |'
- en: '| 16 ≤ BMI < 18.5 | You should add some weight. |'
  id: totrans-462
  prefs: []
  type: TYPE_TB
  zh: '| 16 ≤ BMI < 18.5 | 您应该增加一些体重。 |'
- en: '| 18.5 ≤ BMI < 25 | Maintain your weight. |'
  id: totrans-463
  prefs: []
  type: TYPE_TB
  zh: '| 18.5 ≤ BMI < 25 | 保持您的体重。 |'
- en: '| 25 ≤ BMI < 30 | You should lose some weight. |'
  id: totrans-464
  prefs: []
  type: TYPE_TB
  zh: '| 25 ≤ BMI < 30 | 您应该减掉一些体重。 |'
- en: '| 30 ≤ BMI | You must lose weight. |'
  id: totrans-465
  prefs: []
  type: TYPE_TB
  zh: '| 30 ≤ BMI | 您必须减肥。 |'
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter their weight (in pounds), age (in years), and height (in inches),
    and then displays the corresponding message. Using a loop control structure, the
    program must also validate data input and display an error message when the user
    enters
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个Python程序，提示用户输入他们的体重（磅）、年龄（年）和身高（英寸），然后显示相应的消息。使用循环控制结构，程序还必须验证数据输入，并在用户输入
- en: a)any negative value for weight
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: a)体重的任何负值
- en: b)any value less than 18 for age
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
  zh: b)年龄小于18岁的任何值
- en: c)any negative value for height
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: c)身高的任何负值
- en: '16)Do the following:'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: 16)执行以下操作：
- en: i)Write a subprogram named numOfDays that accepts a year and a month (1 ‐ 12)
    through its formal argument list and then displays the number of days in that
    month. Take special care when a year is a leap year; that is, a year in which
    February has 29 instead of 28 days.
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为numOfDays的子程序，该子程序通过其形式参数列表接受一个年份和一个月（1 - 12），然后显示该月的天数。当年份是闰年时，要特别注意；即二月有29天而不是28天。
- en: 'Hint: A year is a leap year when it is exactly divisible by 4 and not by 100,
    or when it is exactly divisible by 400.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：如果一个年份能被4整除但不能被100整除，或者能被400整除，那么这个年份就是闰年。
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter a year and then displays the number of the days in each month of
    that year.
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个Python程序，提示用户输入一个年份，然后显示该年每个月的天数。
- en: '17)Do the following:'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: 17)执行以下操作：
- en: i)Write a subprogram named numOfDays that accepts a year and a month (1 ‐ 12)
    through its formal argument list and then returns the number of days in that month.
    Take special care when a year is a leap year, as you did in the previous exercise.
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为numOfDays的子程序，该子程序通过其形式参数列表接受一个年份和一个月（1 - 12），然后返回该月的天数。当年份是闰年时，要特别注意，就像你在上一个练习中所做的那样。
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter a year and two months (1 ‐ 12). The program must then calculate
    and display the total number of days that occur between the first day of the first
    month, and the last day of the second month.
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: ii)使用上述子程序，编写一个Python程序，提示用户输入一个年份和两个月（1 - 12）。然后程序必须计算并显示从第一个月的第一天到第二个月的最后一天之间的总天数。
- en: '18)Do the following:'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: 18)执行以下操作：
- en: i)Write a subprogram named displayMenu that displays the following menu.
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: i)编写一个名为displayMenu的子程序，显示以下菜单。
- en: 1)Convert meters to miles
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将米转换为英里
- en: 2)Convert miles to meters
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将英里转换为米
- en: 3)Exit
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: 3)退出
- en: ii)Write a subprogram named metersToMiles that accepts a value in meters through
    its formal argument list and then displays the message “XX meters equals YY miles”
    where XX and YY must be replaced by actual values.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: ii)编写一个名为metersToMiles的子程序，该子程序通过其形式参数列表接受米值，然后显示消息“XX米等于YY英里”，其中XX和YY必须替换为实际值。
- en: iii)Write a subprogram named milesToMeters that accepts a value in miles through
    its formal argument list and then displays the message “YY miles equals XX meters”
    where XX and YY must be replaced by actual values.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: iii)编写一个名为milesToMeters的子程序，该子程序通过其形式参数列表接受英里值，然后显示消息“YY英里等于XX米”，其中XX和YY必须替换为实际值。
- en: iv)Using the subprograms cited above, write a Python program that displays the
    previously mentioned menu and prompts the user to enter a choice (of 1, 2, or
    3) and a distance. The program must then calculate and display the required value.
    The process must repeat as many times as the user wishes.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: iv)使用上述子程序，编写一个Python程序，显示前面提到的菜单，并提示用户输入一个选择（1、2或3）和一个距离。然后程序必须计算并显示所需值。该过程必须根据用户的意愿重复进行。
- en: It is given that 1 mile = 1609.344 meters.
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: 已知1英里等于1609.344米。
- en: 19)The LAV Cell Phone Company charges customers a basic rate of $10 per month,
    and additional rates are charged based on the total number of seconds a customer
    talks on their cell phone within the month. Use the rates shown in the following
    table.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 19)LAV手机公司每月向客户收取10美元的基本费用，并根据客户在一个月内使用手机通话的总秒数收取额外费用。使用以下表格中的费率。
- en: '| Number of Seconds a Customer Talks on their Cell Phone | Additional Rates
    (in USD per second) |'
  id: totrans-487
  prefs: []
  type: TYPE_TB
  zh: '| 客户在手机上通话的秒数 | 额外费用（每秒美元） |'
- en: '| 1 ‐ 600 | Free of charge |'
  id: totrans-488
  prefs: []
  type: TYPE_TB
  zh: '| 1 - 600 | 免费 |'
- en: '| 601 ‐ 1200 | $0.01 |'
  id: totrans-489
  prefs: []
  type: TYPE_TB
  zh: '| 601 - 1200 | $0.01 |'
- en: '| 1201 and above | $0.02 |'
  id: totrans-490
  prefs: []
  type: TYPE_TB
  zh: '| 1201 及以上 | $0.02 |'
- en: 'Do the following:'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下操作：
- en: i)Write a subprogram named amountToPay that accepts a number in seconds through
    its formal argument list and then displays the total amount to pay. Please note
    that the rates are progressive. Moreover, federal, state, and local taxes add
    a total of 11% to each bill
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: i) 编写一个名为amountToPay的子程序，它通过形式参数列表接受秒数，然后显示应付的总金额。请注意，费率是递增的。此外，联邦、州和地方税将总计11%的税额加到每一张账单上
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter the number of seconds they talk on the cell phone and then displays
    the total amount to pay.
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: ii) 使用上述子程序，编写一个Python程序，提示用户输入他们在手机上通话的秒数，然后显示应付的总金额。
