- en: Chapter 35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: User-Defined Subprograms
  prefs: []
  type: TYPE_NORMAL
- en: 35.1 Subprograms that Return Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Python and many other computer languages, a subprogram that returns values
    is called a function. There are two categories of functions in Python. There are
    the built-in functions, such as int(), float(), and there are the user-defined
    functions, those that you can personally write and use in your own programs.
  prefs: []
  type: TYPE_NORMAL
- en: The general form of a Python function that returns one or more values is shown
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 'def name([arg1, arg2, arg3, …]):'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: return value1 [, value2, value3, … ]
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►name is the name of the function.
  prefs: []
  type: TYPE_NORMAL
- en: ►arg1, arg2, arg3, … is a list of arguments (variables, lists etc.) used to
    pass values from the caller to the function. There can be as many arguments as
    you need.
  prefs: []
  type: TYPE_NORMAL
- en: ►value1, value2, value3, … are the values returned to the caller. They can be
    constant values, variables, expressions, or even data structures.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that arguments are optional; that is, a function may
    contain no arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In [Section 5.4](chapter05.html#toc_4) you learned about
    the rules that must be followed when assigning names to variables. Assigning names
    to subprograms follows exactly the same rules!'
  prefs: []
  type: TYPE_NORMAL
- en: The function name can be likened to a box (see Figure 35–1) which contains a
    statement or block of statements. It accepts the arguments arg1, arg2, arg3, …
    as input values and returns value1, value2, value3, … as output values.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter35-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 35–1 A function can be likened to a box
  prefs: []
  type: TYPE_NORMAL
- en: For example, the next function accepts two numbers through the arguments num1
    and num2, then calculates their sum and returns the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'def getSum(num1, num2):'
  prefs: []
  type: TYPE_NORMAL
- en: result = num1 + num2
  prefs: []
  type: TYPE_NORMAL
- en: return result
  prefs: []
  type: TYPE_NORMAL
- en: Of course, this can also be written as
  prefs: []
  type: TYPE_NORMAL
- en: 'def getSum(num1, num2):'
  prefs: []
  type: TYPE_NORMAL
- en: return num1 + num2
  prefs: []
  type: TYPE_NORMAL
- en: The next function calculates the sum and the difference of two numbers, and
    returns the results.
  prefs: []
  type: TYPE_NORMAL
- en: 'def getSumDif(num1, num2):'
  prefs: []
  type: TYPE_NORMAL
- en: s = num1 + num2
  prefs: []
  type: TYPE_NORMAL
- en: d = num1 - num2
  prefs: []
  type: TYPE_NORMAL
- en: return s, d
  prefs: []
  type: TYPE_NORMAL
- en: 35.2 How to Make a Call to a Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Every call to a function is as follows: you write the name of the function
    followed by a list of arguments (if required), either within a statement that
    assigns the function''s returned value to a variable or directly within an expression.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's see some examples. The following function accepts a numeric value through
    the argument num and returns the result of that value raised to the power of three.
  prefs: []
  type: TYPE_NORMAL
- en: 'def cube(num):'
  prefs: []
  type: TYPE_NORMAL
- en: result = num ** 3
  prefs: []
  type: TYPE_NORMAL
- en: return result
  prefs: []
  type: TYPE_NORMAL
- en: Now, suppose that you want to calculate a result of the following expression
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter35-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: You can either assign the returned value from the function cube() to a variable,
    as shown here
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: cb = cube(x)            #Assign the returned value to a variable
  prefs: []
  type: TYPE_NORMAL
- en: y = cb + 1 / x          #and use that variable
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: or you can call the function directly in an expression,
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'y = cube(x) + 1 / x     #Call the function directly in an expression'
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: or you can even call the function directly in a print() statement.
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: print(cube(x) + 1 / x)  #Call the function directly in a print() statement
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)User-defined functions can be called just like the built-in
    functions of Python.'
  prefs: []
  type: TYPE_NORMAL
- en: Now let's see another example. The next Python program defines the function
    getMessage() and then the main code calls it. The returned value is assigned to
    variable a.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.2a'
  prefs: []
  type: TYPE_NORMAL
- en: '#Define the function'
  prefs: []
  type: TYPE_NORMAL
- en: 'def getMessage():'
  prefs: []
  type: TYPE_NORMAL
- en: msg = "Hello Zeus"
  prefs: []
  type: TYPE_NORMAL
- en: return msg
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hi there!")
  prefs: []
  type: TYPE_NORMAL
- en: a = getMessage()
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: If you run this program, the following messages are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter35-03.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A function does not execute immediately when a program starts
    running. The first statement that actually executes in the last example is the
    statement print("Hi there!").'
  prefs: []
  type: TYPE_NORMAL
- en: You can pass (send) values to a function, as long as at least one argument exists
    within the function's parentheses. In the next example, the function display()
    is called three times but each time a different value is passed through the argument
    color.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.2b'
  prefs: []
  type: TYPE_NORMAL
- en: '#Define the function'
  prefs: []
  type: TYPE_NORMAL
- en: 'def display(color):'
  prefs: []
  type: TYPE_NORMAL
- en: msg = "There is " + color + " in the rainbow"
  prefs: []
  type: TYPE_NORMAL
- en: return msg
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: print(display("red"))
  prefs: []
  type: TYPE_NORMAL
- en: print(display("yellow"))
  prefs: []
  type: TYPE_NORMAL
- en: print(display("blue"))
  prefs: []
  type: TYPE_NORMAL
- en: If you run this program, the following messages are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter35-04.png)'
  prefs: []
  type: TYPE_IMG
- en: In the next example, two values must be passed to function display().
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.2c'
  prefs: []
  type: TYPE_NORMAL
- en: 'def display(color, exists):'
  prefs: []
  type: TYPE_NORMAL
- en: neg = ""
  prefs: []
  type: TYPE_NORMAL
- en: 'if not exists:'
  prefs: []
  type: TYPE_NORMAL
- en: neg = "n't any"
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return "There is" + neg + " " + color + " in the rainbow"
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: print(display("red", True))
  prefs: []
  type: TYPE_NORMAL
- en: print(display("yellow", True))
  prefs: []
  type: TYPE_NORMAL
- en: print(display("black", False))
  prefs: []
  type: TYPE_NORMAL
- en: If you run this program the following messages are displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter35-05.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)In Python, you must place your subprograms above your main
    code. In other computer languages, such as Java or PHP, you can place your subprograms
    either above or below your main code. Even then, however, most programmers prefer
    to have all subprograms on the top for better observation.'
  prefs: []
  type: TYPE_NORMAL
- en: As already mentioned, a function in Python can return more than one value. The
    next example prompts the user to enter their first and last name, and it then
    displays them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.2d'
  prefs: []
  type: TYPE_NORMAL
- en: '#Define the function'
  prefs: []
  type: TYPE_NORMAL
- en: 'def getFullname():'
  prefs: []
  type: TYPE_NORMAL
- en: 'firstName = input("Enter first name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'lastName = input("Enter last name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: return firstName, lastName
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: fname, lname = getFullname()
  prefs: []
  type: TYPE_NORMAL
- en: print("First name:", fname)
  prefs: []
  type: TYPE_NORMAL
- en: print("Last name:", lname)
  prefs: []
  type: TYPE_NORMAL
- en: 35.3 Subprograms that Return no Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In computer science, a subprogram that returns no values can be known as a procedure,
    subprocedure, subroutine, void function, void method, and more. In Python, the
    preferred term is usually void function.
  prefs: []
  type: TYPE_NORMAL
- en: The general form of a Python void function is
  prefs: []
  type: TYPE_NORMAL
- en: 'def name([arg1, arg2, arg3, …]):'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►name is the name of the void function.
  prefs: []
  type: TYPE_NORMAL
- en: ►arg1, arg2, arg3, … is a list of arguments (variables, lists etc.) used to
    pass values from the caller to the void function. There can be as many arguments
    as you want.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that arguments are optional; that is, a void function
    may contain no arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, the next void function accepts two numbers through the arguments
    num1 and num2, then calculates their sum and finally displays the result.
  prefs: []
  type: TYPE_NORMAL
- en: 'def displaySum(num1, num2):'
  prefs: []
  type: TYPE_NORMAL
- en: result = num1 + num2
  prefs: []
  type: TYPE_NORMAL
- en: print(result)
  prefs: []
  type: TYPE_NORMAL
- en: 35.4 How to Make a Call to a void Function
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can make a call to a void function by just writing its name. The next example
    defines the void function displayLine() and the main code calls the void function
    whenever it needs to display a horizontal line.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.4a'
  prefs: []
  type: TYPE_NORMAL
- en: '#Define the void function'
  prefs: []
  type: TYPE_NORMAL
- en: 'def displayLine():'
  prefs: []
  type: TYPE_NORMAL
- en: print("-----------------------------")
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello there!")
  prefs: []
  type: TYPE_NORMAL
- en: displayLine()
  prefs: []
  type: TYPE_NORMAL
- en: print("How do you do?")
  prefs: []
  type: TYPE_NORMAL
- en: displayLine()
  prefs: []
  type: TYPE_NORMAL
- en: print("What is your name?")
  prefs: []
  type: TYPE_NORMAL
- en: displayLine()
  prefs: []
  type: TYPE_NORMAL
- en: You can pass (send) values to a void function, as long as at least one argument
    exists within void function's parentheses. In the next example, the void function
    displayLine() is called three times but each time a different value is passed
    through the variable length, resulting in three printed lines of different length.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.4b'
  prefs: []
  type: TYPE_NORMAL
- en: 'def displayLine(length):'
  prefs: []
  type: TYPE_NORMAL
- en: print("-" * length)
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello there!")
  prefs: []
  type: TYPE_NORMAL
- en: displayLine(12)
  prefs: []
  type: TYPE_NORMAL
- en: print("How do you do?")
  prefs: []
  type: TYPE_NORMAL
- en: displayLine(14)
  prefs: []
  type: TYPE_NORMAL
- en: print("What is your name?")
  prefs: []
  type: TYPE_NORMAL
- en: displayLine(18)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)Since the void function displayLine() returns no value,
    the following line of code is wrong. You cannot assign the void function to a
    variable because there isn''t any returned value!'
  prefs: []
  type: TYPE_NORMAL
- en: y = display_line(12)
  prefs: []
  type: TYPE_NORMAL
- en: Also, you cannot call it within a statement. The following line of code is also
    wrong.
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello there!\n", display_line(12))
  prefs: []
  type: TYPE_NORMAL
- en: 35.5 Formal and Actual Arguments
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Each function (or void function) contains an argument list called a formal argument
    list. As already stated, arguments in this list are optional; the formal argument
    list may contain no arguments, one argument, or more than one argument.
  prefs: []
  type: TYPE_NORMAL
- en: When a subprogram (function, or void function) is called, an argument list may
    be passed to the subprogram. This list is called an actual argument list.
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the formal arguments (variables) n1 and n2 constitute the
    formal argument list whereas the formal arguments (variables) x and y, as well
    as formal arguments (expressions) x + y and y / 2, constitute the actual argument
    lists.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.5'
  prefs: []
  type: TYPE_NORMAL
- en: '#Define the function multiply().'
  prefs: []
  type: TYPE_NORMAL
- en: '#The two arguments n1 and n2 are called formal arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: 'def multiply(  n1, n2  ):      [[More…]](more.html#more_35_5_1)'
  prefs: []
  type: TYPE_NORMAL
- en: result = n1 * n2
  prefs: []
  type: TYPE_NORMAL
- en: return result
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: '#Call the function multiply().'
  prefs: []
  type: TYPE_NORMAL
- en: '#The two arguments x and y are called actual arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: w = multiply(  x, y  )      [[More…]](more.html#more_35_5_2)
  prefs: []
  type: TYPE_NORMAL
- en: print(w)
  prefs: []
  type: TYPE_NORMAL
- en: '#Call the function multiply().'
  prefs: []
  type: TYPE_NORMAL
- en: '#The two arguments x + y and y / 2 are called actual arguments.'
  prefs: []
  type: TYPE_NORMAL
- en: print(multiply(  x + 2, y / 2  ))     [[More…]](more.html#more_35_5_3)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that there is a one-to-one correspondence between the
    formal and the actual arguments. In the first call, the value of the actual argument
    x is passed to the formal argument n1, and the value of actual argument y is passed
    to the formal argument n2\. In the second call, the value of the actual argument
    (the result of the expression) x + 2 is passed to the formal argument n1, and
    the value of the actual argument (the result of the expression) y / 2 is passed
    to the formal argument n2.'
  prefs: []
  type: TYPE_NORMAL
- en: 35.6 How Does a Function Execute?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the main code calls a function the following steps are performed:'
  prefs: []
  type: TYPE_NORMAL
- en: ►The execution of the statements of the main code is interrupted.
  prefs: []
  type: TYPE_NORMAL
- en: ►The values of the variables or the result of the expressions that exist in
    the actual argument list are passed (assigned) to the corresponding arguments
    (variables) in the formal argument list, and the flow of execution goes to where
    the function is written.
  prefs: []
  type: TYPE_NORMAL
- en: ►The statements of the function are executed.
  prefs: []
  type: TYPE_NORMAL
- en: ►When the flow of execution reaches a return statement, one or more values are
    returned from the function to the main code and the flow of execution continues
    from where it was before calling the function.
  prefs: []
  type: TYPE_NORMAL
- en: In the next Python program, the function maximum() accepts two arguments (numeric
    values) and returns the greater of the two values.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.6'
  prefs: []
  type: TYPE_NORMAL
- en: 'def maximum(val1, val2):'
  prefs: []
  type: TYPE_NORMAL
- en: m = val1
  prefs: []
  type: TYPE_NORMAL
- en: 'if val2 > m:'
  prefs: []
  type: TYPE_NORMAL
- en: m = val2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return m
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: maxim = maximum(a, b)
  prefs: []
  type: TYPE_NORMAL
- en: print(maxim)
  prefs: []
  type: TYPE_NORMAL
- en: When the Python program starts running, the first statement executed is the
    statement a = float(input()) (this is considered the first statement of the program).
  prefs: []
  type: TYPE_NORMAL
- en: Below is a trace table that shows the exact flow of execution, how the values
    of the variables a and b are passed from the main code to the function, and how
    the function returns its result. Suppose the user enters the values 3 and 8.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statements of the Main Code | a | b | maxim |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = float(input()) | 3.0 | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b = float(input()) | 3.0 | 8.0 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | maxim = maximum(a, b) |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: When the call to the function maximum() is made, the execution of the statements
    of the main code is interrupted, the values of the variables a and b are passed
    (assigned, if you prefer) to the corresponding formal arguments (variables) val1
    and val2, and the flow of execution goes to where the function is written. Then
    the statements of the function are executed.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statements of Function maximum() | val1 | val2 | m |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | m = val1 | 3.0 | 8.0 | 3.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | if val2 > m: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | m = val2 | 3.0 | 8.0 | 8.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | return m |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: When the flow of execution reaches the return statement, the value 8 is returned
    from the function to the main code (and assigned to the variable maxim) and the
    flow of execution continues from where it was before calling the function. The
    main code displays the value of 8 on the user's screen.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statements of the Main Code | a | b | maxim |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | print(maxim) | 3.0 | 8.0 | 8.0 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 35.6-1 Back to Basics – Calculating the Sum of Two Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named total that accepts two numeric values through its
    formal argument list and then calculates and returns their sum.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that lets the user
    enter two numbers and then displays their sum. Next, create a trace table to determine
    the values of the variables in each step of the Python program for two different
    executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 2, 4; and (ii) 10, 20.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise you need to write a function that accepts two values from the
    caller (this is the main code) and then calculates and returns their sum. The
    solution is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.6-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'def total(a, b):'
  prefs: []
  type: TYPE_NORMAL
- en: s = a + b
  prefs: []
  type: TYPE_NORMAL
- en: return s
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: num1 = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: num2 = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: result = total(num1, num2)
  prefs: []
  type: TYPE_NORMAL
- en: print("The sum of", num1, "+", num2, "is", result)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create the corresponding trace tables. Since you have become more
    experienced with them, the column “Notes” has been removed.
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input values of 2, 4, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Main Code | Function total() |'
  prefs: []
  type: TYPE_TB
- en: '| num1 | num2 | result | a | b | s |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | num1 = float(input()) | 2.0 | ? | ? |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | num2 = float(input()) | 2.0 | 4.0 | ? |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | result = total(num1, num2) |   |   |   | 2.0 | 4.0 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | s = a + b |   |   |   | 2.0 | 4.0 | 6.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | return s | 2.0 | 4.0 | 6.0 |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print("The sum of… | It displays: The sum of 2.0 + 4.0 is 6.0 |'
  prefs: []
  type: TYPE_TB
- en: ii)For the input values of 10, 20, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Main Code | Function total() |'
  prefs: []
  type: TYPE_TB
- en: '| num1 | num2 | result | a | b | s |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | num1 = float(input()) | 10.0 | ? | ? |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | num2 = float(input()) | 10.0 | 20.0 | ? |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | result = total(num1, num2) |   |   |   | 10.0 | 20.0 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | s = a + b |   |   |   | 10.0 | 20.0 | 30.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | return s | 10.0 | 20.0 | 30.0 |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print("The sum of… | It displays: The sum of 10.0 + 20.0 is 30.0 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 35.6-2 Calculating the Sum of Two Numbers Using Fewer Lines of Code!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Rewrite the Python program of the previous exercise using fewer lines of code.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The solution is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.6-2'
  prefs: []
  type: TYPE_NORMAL
- en: 'def total(a, b):'
  prefs: []
  type: TYPE_NORMAL
- en: return a + b
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: num1 = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: num2 = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: print("The sum of", num1, "+", num2, "is", total(num1, num2))
  prefs: []
  type: TYPE_NORMAL
- en: Contrary to the solution of the previous exercise, in this method total(), the
    sum is not assigned to variable s but is directly calculated and returned. Furthermore,
    in this main code, the returned value in not assigned to a variable but is directly
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)User-defined functions can be called just like the built-in
    functions of Python.'
  prefs: []
  type: TYPE_NORMAL
- en: 35.7 How Does a void Function Execute?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When the main code calls a void function, the following steps are performed:'
  prefs: []
  type: TYPE_NORMAL
- en: ►The execution of the statements of the main code is interrupted.
  prefs: []
  type: TYPE_NORMAL
- en: ►The values of the variables or the result of the expressions that exist in
    the actual argument list are passed (assigned) to the corresponding arguments
    (variables) in the formal argument list and the flow of execution goes to where
    the void function is written.
  prefs: []
  type: TYPE_NORMAL
- en: ►The statements of the void function are executed.
  prefs: []
  type: TYPE_NORMAL
- en: ►When the flow of execution reaches the end of the void function, the flow of
    execution continues from where it was before calling the void function.
  prefs: []
  type: TYPE_NORMAL
- en: In the next Python program, the void function minimum() accepts three arguments
    (numeric values) through its formal argument list and displays the lowest value.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.7'
  prefs: []
  type: TYPE_NORMAL
- en: 'def minimum(val1, val2, val3):'
  prefs: []
  type: TYPE_NORMAL
- en: minim = val1
  prefs: []
  type: TYPE_NORMAL
- en: 'if val2 < minim:'
  prefs: []
  type: TYPE_NORMAL
- en: minim = val2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if val3 < minim:'
  prefs: []
  type: TYPE_NORMAL
- en: minim = val3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(minim)
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: c = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: minimum(a, b, c)
  prefs: []
  type: TYPE_NORMAL
- en: print("The end")
  prefs: []
  type: TYPE_NORMAL
- en: When the Python program starts running, the first statement executed is the
    statement a = float(input()) (this is considered the first statement of the program).
    Suppose the user enters the values 9, 6, and 8.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statements of the Main Code | a | b | c |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = float(input()) | 9.0 | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | b = float(input()) | 9.0 | 6.0 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | c = float(input()) | 9.0 | 6.0 | 8.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | minimum(a, b, c) |   |   |   |'
  prefs: []
  type: TYPE_TB
- en: When a call to the void function minimum() is made, the execution of the statements
    of the main code is interrupted, the values of the variables a, b, and c are passed
    (assigned) to the corresponding formal arguments (variables) val1, val2, and val3,
    and the statements of the void function are executed.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statements of void Function minimum() | val1 | val2 | val3 | minim
    |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | minim = val1 | 9.0 | 6.0 | 8.0 | 9.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | if val2 < minim: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | minim = val2 | 9.0 | 6.0 | 8.0 | 6.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | if val3 < minim: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | print(minim) | It displays: 6.0 |'
  prefs: []
  type: TYPE_TB
- en: When the flow of execution reaches the end of the void function the flow of
    execution simply continues from where it was before calling the void function.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statements of the Main Code | a | b | c |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | print("The end") | It displays: The end |'
  prefs: []
  type: TYPE_TB
- en: '![](img/notice.jpg)Note that between step 9 and step 10, no values are returned
    from the void function to the main code.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 35.7-1 Back to Basics – Displaying the Absolute Value of a Number
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named displayAbs that accepts a numeric value through its
    formal argument list and then displays its absolute value. Do not use the built-in
    abs() function of Python.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that lets the user
    enter a number and then displays its absolute value followed by the user-provided
    value. Next, create a trace table to determine the values of the variables in
    each step of the Python program for two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 5, and (ii) −5.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise you need to write a void function that accepts a value from
    the caller (this is the main code) and then calculates and displays its absolute
    value. The solution is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_35.7-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'def displayAbs(n):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if n < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: n = (-1) * n
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(n)
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: displayAbs(a)      #This displays the absolute value of the user-provided number.
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)           #This displays the user-provided number.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's create the corresponding trace tables.
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input value of 5, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Main Code | void Function displayAbs() |'
  prefs: []
  type: TYPE_TB
- en: '| a | n |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = float(input()) | 5.0 |   |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | displayAbs(a) |   | 5.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if n < 0: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | print(n) | It displays: 5.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(a) | It displays: 5.0 |'
  prefs: []
  type: TYPE_TB
- en: ii)For the input value of −5, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Main Code | void Function displayAbs() |'
  prefs: []
  type: TYPE_TB
- en: '| a | n |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = float(input()) | −5.0 |   |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | displayAbs(a) |   | −5.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if n < 0: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | n = (‑1) * n |   | 5.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(n) | It displays: 5.0 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(a) | It displays: −5.0 |'
  prefs: []
  type: TYPE_TB
- en: '![](img/notice.jpg)Note that at step 5 the variable n of the void function
    contains the value 5.0 but when the flow of execution returns to the main code
    at step 6, the variable a of the main code still contains the value −5.0\. Actually,
    the value of variable a of the main code had never changed!'
  prefs: []
  type: TYPE_NORMAL
- en: '35.8 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)There are two categories of subprograms that return values in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 2)The variables that are used to pass values to a function are called arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 3)The function int() is a user-defined function.
  prefs: []
  type: TYPE_NORMAL
- en: 4)Every call to a user-defined function is made in the same way as a call to
    the built-in functions of Python.
  prefs: []
  type: TYPE_NORMAL
- en: 5)There can be as many arguments as you wish in a function's formal argument
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 6)In a function, the formal argument list must contain at least one argument.
  prefs: []
  type: TYPE_NORMAL
- en: 7)In a function, the formal argument list is optional.
  prefs: []
  type: TYPE_NORMAL
- en: 8)A function cannot return a list.
  prefs: []
  type: TYPE_NORMAL
- en: 9)The following statement is a valid Python statement.
  prefs: []
  type: TYPE_NORMAL
- en: return x + 1
  prefs: []
  type: TYPE_NORMAL
- en: 10)A formal argument can be an expression.
  prefs: []
  type: TYPE_NORMAL
- en: 11)An actual argument can be an expression.
  prefs: []
  type: TYPE_NORMAL
- en: 12)A function can have no arguments in the actual argument list.
  prefs: []
  type: TYPE_NORMAL
- en: 13)The next statement calls the function cubeRoot() three times.
  prefs: []
  type: TYPE_NORMAL
- en: cb = cubeRoot(x) + cubeRoot(x) / 2 + cubeRoot(x) / 3
  prefs: []
  type: TYPE_NORMAL
- en: 14)The following code fragment displays exactly the same value as the statement
    print(cubeRoot(x)+5)
  prefs: []
  type: TYPE_NORMAL
- en: cb = cubeRoot(x)
  prefs: []
  type: TYPE_NORMAL
- en: y = cb + 5
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 15)A function must always include a return statement whereas a void function
    mustn't.
  prefs: []
  type: TYPE_NORMAL
- en: 16)The name play-the-guitar can be a valid function name.
  prefs: []
  type: TYPE_NORMAL
- en: 17)In Python, you can place your functions either above or below your main code.
  prefs: []
  type: TYPE_NORMAL
- en: 18)When the main code calls a function, the execution of the statements of the
    main code is interrupted.
  prefs: []
  type: TYPE_NORMAL
- en: 19)In general, it is possible for a function to return no values to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: 20)The function abs() is a built-in function of Python.
  prefs: []
  type: TYPE_NORMAL
- en: 21)The following code fragment displays the value 0.5.
  prefs: []
  type: TYPE_NORMAL
- en: 'def divide(b, a):'
  prefs: []
  type: TYPE_NORMAL
- en: return a / b
  prefs: []
  type: TYPE_NORMAL
- en: a = 10.0
  prefs: []
  type: TYPE_NORMAL
- en: b = 5.0
  prefs: []
  type: TYPE_NORMAL
- en: print(divide(a, b))
  prefs: []
  type: TYPE_NORMAL
- en: 22)In computer science, a subprogram that returns no result is known as a void
    function.
  prefs: []
  type: TYPE_NORMAL
- en: 23)In Python, you can call a void function by writing its name followed by an
    opening and closing parenthesis.
  prefs: []
  type: TYPE_NORMAL
- en: 24)In a void function call made in the main code, the variables used within
    the actual argument list must be variables from the main code.
  prefs: []
  type: TYPE_NORMAL
- en: 25)In a void function call, only variables can be used within the actual argument
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 26)In a void function, all formal arguments must have different names.
  prefs: []
  type: TYPE_NORMAL
- en: 27)A void function must always include at least one argument in its formal argument
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 28)There is a one-to-one correspondence between the formal and the actual arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 29)You can call a void function within a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 30)When the flow of execution reaches the end of a void function, the flow of
    execution continues from where it was before calling the void function.
  prefs: []
  type: TYPE_NORMAL
- en: 31)A void function returns no values to the caller.
  prefs: []
  type: TYPE_NORMAL
- en: 32)It is possible for a void function to accept no values from the caller.
  prefs: []
  type: TYPE_NORMAL
- en: 33)A call to a void function is made differently from a call to a function.
  prefs: []
  type: TYPE_NORMAL
- en: 34)In the following Python program the first statement that executes is the
    statement print("Hello Aphrodite!").
  prefs: []
  type: TYPE_NORMAL
- en: 'def message():'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Aphrodite!")
  prefs: []
  type: TYPE_NORMAL
- en: print("Hi there!")
  prefs: []
  type: TYPE_NORMAL
- en: message()
  prefs: []
  type: TYPE_NORMAL
- en: 35.9 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The following function contains some errors. Can you spot them?
  prefs: []
  type: TYPE_NORMAL
- en: def findMax(a, b)
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > b:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = a
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = b
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'def sumDigits(a):'
  prefs: []
  type: TYPE_NORMAL
- en: d1 = a % 10
  prefs: []
  type: TYPE_NORMAL
- en: d2 = a // 10
  prefs: []
  type: TYPE_NORMAL
- en: return d1 + d2
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(25, 28):'
  prefs: []
  type: TYPE_NORMAL
- en: s += sumDigits(i)
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'def sss(a):'
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(1, a + 1):'
  prefs: []
  type: TYPE_NORMAL
- en: total += k
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: return total
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 6:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if i % 2 == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: s += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: s += sss(i)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Create a trace table to determine the values of the variables in each step
    of the following Python program when the value 12 is entered.
  prefs: []
  type: TYPE_NORMAL
- en: 'def customDiv(b, d):'
  prefs: []
  type: TYPE_NORMAL
- en: return (b + d) // 2
  prefs: []
  type: TYPE_NORMAL
- en: k = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: m = 2
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while a < 6:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if k % m != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: x = customDiv(a, m)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x = a + m + customDiv(m, a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(m, a, x)
  prefs: []
  type: TYPE_NORMAL
- en: a += 2
  prefs: []
  type: TYPE_NORMAL
- en: m += 1
  prefs: []
  type: TYPE_NORMAL
- en: 5)Create a trace table to determine the values of the variables in each step
    of the following Python program when the values 3, 7, 9, 2, and 4 are entered.
  prefs: []
  type: TYPE_NORMAL
- en: 'def display(a):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a, "is even")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a, "is odd")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'for i in range(5):'
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: display(x)
  prefs: []
  type: TYPE_NORMAL
- en: 6)Create a trace table to determine the values of the variables in each step
    of the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 'def division(a, b):'
  prefs: []
  type: TYPE_NORMAL
- en: b = b // a
  prefs: []
  type: TYPE_NORMAL
- en: print(a * b)
  prefs: []
  type: TYPE_NORMAL
- en: x = 20
  prefs: []
  type: TYPE_NORMAL
- en: y = 30
  prefs: []
  type: TYPE_NORMAL
- en: 'while x % y < 30:'
  prefs: []
  type: TYPE_NORMAL
- en: division(y, x)
  prefs: []
  type: TYPE_NORMAL
- en: x = 4 * y
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: 7)Create a trace table to determine the values of the variables in each step
    of the following Python program when the values 2, 3, and 4 are entered.
  prefs: []
  type: TYPE_NORMAL
- en: 'def calculate(n):'
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(2, 2 * n + 2, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + j ** 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: m = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: calculate(m)
  prefs: []
  type: TYPE_NORMAL
- en: 8)Write a subprogram that accepts three numbers through its formal argument
    list and then returns their sum.
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a subprogram that accepts four numbers through its formal argument list
    and then returns their average.
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a subprogram that accepts three numbers through its formal argument
    list and then returns the greatest value. Try not to use the max() function of
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: 11)Write a subprogram that accepts five numbers through its formal argument
    list and then displays the greatest value.
  prefs: []
  type: TYPE_NORMAL
- en: 12)Write a subprogram named myRound that accepts a real through its formal argument
    list and returns it rounded to two decimal places. Try not to use the round()
    function of Python.
  prefs: []
  type: TYPE_NORMAL
- en: '13)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named findMin that accepts two numbers through its formal
    argument list and returns the lowest one. Try not to use the min() function of
    Python.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter four numbers and then displays the lowest one.
  prefs: []
  type: TYPE_NORMAL
- en: '14)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named KelvinToFahrenheit that accepts a temperature in
    degrees Kelvin through its formal argument list and returns its degrees Fahrenheit
    equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named KelvinToCelsius that accepts a temperature in degrees
    Kelvin through its formal argument list and returns its degrees Celsius equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Using the subprograms cited above, write a Python program that prompts the
    user to enter a temperature in degrees Kelvin and then displays its degrees Fahrenheit
    and its degrees Celsius equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: It is given that
  prefs: []
  type: TYPE_NORMAL
- en: Fahrenheit = 1.8 ∙ Kelvin − 459.67
  prefs: []
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: Celsius = Kelvin − 273.15
  prefs: []
  type: TYPE_NORMAL
- en: 15)The Body Mass Index (BMI) is often used to determine whether a person is
    overweight or underweight for their height. The formula used to calculate the
    BMI is
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter10-08.png)
  prefs: []
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named bmi that accepts a weight and a height through its
    formal argument list and then returns an action (a message) according to the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| BMI | Action |'
  prefs: []
  type: TYPE_TB
- en: '| BMI < 16 | You must add weight. |'
  prefs: []
  type: TYPE_TB
- en: '| 16 ≤ BMI < 18.5 | You should add some weight. |'
  prefs: []
  type: TYPE_TB
- en: '| 18.5 ≤ BMI < 25 | Maintain your weight. |'
  prefs: []
  type: TYPE_TB
- en: '| 25 ≤ BMI < 30 | You should lose some weight. |'
  prefs: []
  type: TYPE_TB
- en: '| 30 ≤ BMI | You must lose weight. |'
  prefs: []
  type: TYPE_TB
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter their weight (in pounds), age (in years), and height (in inches),
    and then displays the corresponding message. Using a loop control structure, the
    program must also validate data input and display an error message when the user
    enters
  prefs: []
  type: TYPE_NORMAL
- en: a)any negative value for weight
  prefs: []
  type: TYPE_NORMAL
- en: b)any value less than 18 for age
  prefs: []
  type: TYPE_NORMAL
- en: c)any negative value for height
  prefs: []
  type: TYPE_NORMAL
- en: '16)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named numOfDays that accepts a year and a month (1 ‐ 12)
    through its formal argument list and then displays the number of days in that
    month. Take special care when a year is a leap year; that is, a year in which
    February has 29 instead of 28 days.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: A year is a leap year when it is exactly divisible by 4 and not by 100,
    or when it is exactly divisible by 400.'
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter a year and then displays the number of the days in each month of
    that year.
  prefs: []
  type: TYPE_NORMAL
- en: '17)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named numOfDays that accepts a year and a month (1 ‐ 12)
    through its formal argument list and then returns the number of days in that month.
    Take special care when a year is a leap year, as you did in the previous exercise.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter a year and two months (1 ‐ 12). The program must then calculate
    and display the total number of days that occur between the first day of the first
    month, and the last day of the second month.
  prefs: []
  type: TYPE_NORMAL
- en: '18)Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named displayMenu that displays the following menu.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Convert meters to miles
  prefs: []
  type: TYPE_NORMAL
- en: 2)Convert miles to meters
  prefs: []
  type: TYPE_NORMAL
- en: 3)Exit
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named metersToMiles that accepts a value in meters through
    its formal argument list and then displays the message “XX meters equals YY miles”
    where XX and YY must be replaced by actual values.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Write a subprogram named milesToMeters that accepts a value in miles through
    its formal argument list and then displays the message “YY miles equals XX meters”
    where XX and YY must be replaced by actual values.
  prefs: []
  type: TYPE_NORMAL
- en: iv)Using the subprograms cited above, write a Python program that displays the
    previously mentioned menu and prompts the user to enter a choice (of 1, 2, or
    3) and a distance. The program must then calculate and display the required value.
    The process must repeat as many times as the user wishes.
  prefs: []
  type: TYPE_NORMAL
- en: It is given that 1 mile = 1609.344 meters.
  prefs: []
  type: TYPE_NORMAL
- en: 19)The LAV Cell Phone Company charges customers a basic rate of $10 per month,
    and additional rates are charged based on the total number of seconds a customer
    talks on their cell phone within the month. Use the rates shown in the following
    table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Number of Seconds a Customer Talks on their Cell Phone | Additional Rates
    (in USD per second) |'
  prefs: []
  type: TYPE_TB
- en: '| 1 ‐ 600 | Free of charge |'
  prefs: []
  type: TYPE_TB
- en: '| 601 ‐ 1200 | $0.01 |'
  prefs: []
  type: TYPE_TB
- en: '| 1201 and above | $0.02 |'
  prefs: []
  type: TYPE_TB
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named amountToPay that accepts a number in seconds through
    its formal argument list and then displays the total amount to pay. Please note
    that the rates are progressive. Moreover, federal, state, and local taxes add
    a total of 11% to each bill
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that prompts the
    user to enter the number of seconds they talk on the cell phone and then displays
    the total amount to pay.
  prefs: []
  type: TYPE_NORMAL
