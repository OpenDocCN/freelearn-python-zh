["```py\nfrom datetime import datetimeclass Speaker(db.Model):\n    __tablename__ = 'speakers'\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100), nullable=False)\n    email = db.Column(db.String(100), nullable=False)\n    company = db.Column(db.String(100), nullable=False)\n    position = db.Column(db.String(100), nullable=False)\n    bio = db.Column(db.String(200), nullable=False)\n    speaker_avatar = db.Column(db.String(100),\n        nullable=True)\n    created_at = db.Column(db.DateTime,\n        default=datetime.utcnow)\n    updated_at = db.Column(db.DateTime,\n        default=datetime.utcnow, onupdate=datetime.utcnow)\n    def __repr__(self):\n        return f'<Speaker {self.name}>'\n    def serialize(self):\n        return {\n            'id': self.id,\n            'name': self.name,\n            'email': self.email,\n            'company': self.company,\n            'position': self.position,\n            'bio': self.bio,\n            'speaker_avatar': self.speaker_avatar,\n            'created_at': self.created_at.isoformat(),\n            'updated_at': self.updated_at.isoformat()\n        }\n```", "```py\n@app.route('/api/v1/speakers', methods=['GET'])def get_speakers():\n    speakers = Speaker.query.all()\n    if not speakers:\n        return jsonify({\"error\": \"No speakers found\"}), 404\n    return jsonify([speaker.serialize() for speaker in\n        speakers]), 200\n```", "```py\nconst router = createBrowserRouter([  {\n    path: \"/admin\",\n    element: <AdminPage/>,\n    children: [\n      {\n        path: \"/admin/dashboard\",\n        element: <Dashboard />,\n      },\n      {\n        path: \"/admin/speakers\",\n        element: <Speakers />,\n      },\n      {\n        path: \"/admin/venues\",\n        element: <Venues />,\n      },\n      {\n        path: \"/admin/events\",\n        element: <Events />,\n      },\n      {\n        path: \"/admin/schedules\",\n        element: <Schedules />,\n      },\n      {\n        path: \"/admin/sponsors\",\n        element: <Sponsors />,\n      },\n    ],\n  },\n]);\n```", "```py\nimport React from \"react\";import { Outlet } from \"react-router-dom\";\nimport Sidebar from\n    \"../../../components/admin/Sidebar/Sidebar\";\nimport './AdminPage.css'\nconst AdminPage = () => {\n    return (\n        <div className=\"container\">\n            <div><Navbar/></div>\n            <div><Outlet /></div>\n        </div>\n    );\n};\nexport default AdminPage;\n```", "```py\nimport axios from 'axios';const API_URL = 'http://localhost:5000/api/v1';\n// Function to handle errors\nconst handleErrors = (error) => {\n    if (error.response) {\n    // The request was made and the server responded with a\n       status code\n    console.error('API Error:', error.response.status,\n        error.response.data);\n    } else if (error.request) {\n    // The request was made but no response was received\n    console.error('API Error: No response received',\n        error.request);\n    } else {\n    // Something else happened while making the request\n    console.error('API Error:', error.message);\n    }\n    throw error;\n};\n// Function to set headers with Content-Type:\n   application/json\nconst setHeaders = () => {\n    axios.defaults.headers.common['Content-Type'] =\n        'application/json';\n};\n// Function to get speakers\nexport const getSpeakers = async () => {\n    try {\n        setHeaders();\n        const response =\n            await axios.get(`${API_URL}/speakers`);\n        return response.data;\n    } catch (error) {\n        handleErrors(error);\n    }\n};\n```", "```py\nimport React, { useEffect, useState } from 'react';import { getSpeakers } from\n    '../../../services/SpeakersAPI';\nconst ViewSpeakers = () => {\n    const [speakers, setSpeakers] = useState([]);\n    const [isLoading, setIsLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const fetchSpeakers = async () => {\n        try {\n            const speakerData = await getSpeakers();\n            setSpeakers(speakerData);\n            setIsLoading(false);\n        } catch (error) {\n            setError(error.message);\n            setIsLoading(false);\n        }\n    };\n    useEffect(() => {\n        fetchSpeakers();\n    }, []);\n```", "```py\n    @app.route('/api/v1/speakers', methods=['POST'])    def add_speaker():\n        data = request.get_json()\n        name = data.get('name')\n        email = data.get('email')\n        company = data.get('company')\n        position = data.get('position')\n        bio = data.get('bio')\n        avatar = request.files.get('speaker_avatar')\n        # Save the uploaded avatar\n        if avatar and allowed_file(avatar.filename):\n            filename = secure_filename(avatar.filename)\n            avatar.save(os.path.join(app.config[\n                'UPLOAD_FOLDER'], filename))\n        else:\n            filename = 'default-avatar.jpg'\n        if not name or not email or not company or not\n            position or not bio:\n            return jsonify({\"error\": \"All fields are\n                required\"}), 400\n        existing_speaker =\n            Speaker.query.filter_by(email=email).first()\n        if existing_speaker:\n            return jsonify({\"error\": \"Speaker with that\n                email already exists\"}), 409\n        speaker = Speaker(name=name, email=email,\n            company=company, position=position, bio=bio,\n                speaker_avatar=avatar)\n        db.session.add(speaker)\n        db.session.commit()\n        return jsonify(speaker.serialize()), 201\n  # Function to check if the file extension is allowed\n    def allowed_file(filename):\n        return '.' in filename and \\\n            filename.rsplit('.', 1)[1].lower(\n            ) in app.config['ALLOWED_EXTENSIONS']\n```", "```py\n// API function to add a speakerexport const addSpeaker = (speakerData) => {\n    const url = `${API_URL}/speakers`;\n    return axios\n        .post(url, speakerData, { headers: addHeaders() })\n        .then((response) => response.data)\n        .catch(handleErrors);\n};\n```", "```py\nimport React, { useState } from 'react';import { addSpeaker } from\n    '../../../services/SpeakersAPI'LP;\nimport { useNavigate } from 'react-router-dom';\nconst CreateSpeaker = () => {\n    const [name, setName] = useState('');\n{/* Rest of inputs states */}\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [successMessage, setSuccessMessage] =\n        useState('');\n    const navigate = useNavigate();\n    const handleSubmit = async (event) => {\n        event.preventDefault();\n        setIsLoading(true);\n        setError(null);\n        try {\n            ...\n            await addSpeaker(formData);\n            setIsLoading(false);\n            // Reset the form fields\n            setName('');\n            setEmail('');\n            setCompany('');\n            setPosition('');\n            setBio('');\n            setAvatar(null);\n            // Display a success message\n            ...\n        )}\n        </div>\n    );\n};\nexport default CreateSpeaker;\n```", "```py\nfrom flask import jsonify, requestfrom werkzeug.utils import secure_filename\n@app.route('/api/v1/speakers/<int:speaker_id>',\n    methods=['PUT'])\ndef update_speaker(speaker_id):\n    data = request.get_json()\n    name = data.get('name')\n    email = data.get('email')\n    company = data.get('company')\n    position = data.get('position')\n    bio = data.get('bio')\n    avatar = request.files.get('speaker_avatar')\n    speaker = Speaker.query.get(speaker_id)\n    if not speaker:\n        return jsonify({\"error\": \"Speaker not found\"}), 404\n    if not all([name, email, company, position, bio]):\n        return jsonify({\"error\": \"All fields are\n            required\"}), 400\n    if email != speaker.email:\n        existing_speaker =\n            Speaker.query.filter_by(email=email).first()\n```", "```py\nimport React, { useState, useEffect } from 'react';import { updateSpeaker } from\n    '../../../services/SpeakersAPI';\nimport { useNavigate } from 'react-router-dom';\nconst UpdateSpeaker = ({ speakerId }) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [company, setCompany] = useState('');\n    const [position, setPosition] = useState('');\n    const [bio, setBio] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    const [successMessage, setSuccessMessage] =\n        useState('');\n    const navigate=useNavigate();\n    useEffect(() => {\n        // Fetch the speaker data based on speakerId\n        fetchSpeaker();\n    }, [speakerId]);\n    const fetchSpeaker = async () => {\n        try {\n            // Fetch the speaker data from the backend\n                based on speakerId\n            const speakerData =\n                await getSpeaker(speakerId);\n            setName(speakerData.name);\n            setEmail(speakerData.email);\n            setCompany(speakerData.company);\n            setPosition(speakerData.position);\n            setBio(speakerData.bio);\n        } catch (error) {\n            setError(error.message);\n        }\n    };\n{/* The rest of the code snippet can be found on GitHub */}\n```", "```py\n// API function to update a speakerexport const updateSpeaker = (speakerId, speakerData) => {\n    const url = `${API_URL}/speakers/${speakerId}`;\n    return axios\n        .put(url, speakerData, { headers: addHeaders() })\n        .then((response) => response.data)\n        .catch(handleErrors);\n};\n```", "```py\n@app.route('/api/v1/speakers/<int:speaker_id>',    methods=['DELETE'])\ndef delete_speaker(speaker_id):\n    speaker = Speaker.query.get_or_404(speaker_id)\n    if not current_user.has_permission(\"delete_speaker\"):\n        abort(http.Forbidden(\"You do not have permission to\n            delete this speaker\"))\n    events =\n        Event.query.filter_by(speaker_id=speaker_id).all()\n    if events:\n        abort(http.Conflict(\"This speaker has associated\n            events, please delete them first\"))\n    try:\n        if speaker.speaker_avatar:\n            speaker_avatar.delete(speaker.speaker_avatar)\n        with db.session.begin():\n            db.session.delete(speaker)\n    except Exception:\n        abort(http.InternalServerError(\"Error while\n            deleting speaker\"))\n    return jsonify({\"message\": \"Speaker deleted\n        successfully\"}), http.OK\n```", "```py\nimport React, { useState, useEffect } from \"react\";import { useParams, useNavigate } from \"react-router-dom\";\nimport { deleteSpeaker } from \"./api/SpeakersAPI\";\nconst DeleteSpeaker = () => {\n    const { speakerId } = useParams();\n    const navigate = useNavigate();\n    const [error, setError] = useState(\"\");\n    const [isLoading, setIsLoading] = useState(false);\n    const handleDelete = async () => {\n        try {\n            setIsLoading(true);\n            await deleteSpeaker(speakerId);\n            setIsLoading(false);\n            navigate(\"/speakers\"); // Redirect to speakers\n                                      list after successful\n                                      deletion\n        } catch (err) {\n            setIsLoading(false);\n            setError(\"Failed to delete speaker.\");\n        }\n    };\n    useEffect(() => {\n        return () => {\n            // Clear error message on component unmount\n            setError(\"\");\n        };\n    }, []);\n    return (\n        <div>\n            {error && <p className=\"error\">{error}</p>}\n            <p>Are you sure you want to delete this\n                speaker?</p>\n            <button onClick={handleDelete}\n                disabled={isLoading}>\n                {isLoading ? \"Deleting...\" : \"Delete\n                Speaker\"}\n            </button>\n        </div>\n    );\n};\nexport default DeleteSpeaker;\n```", "```py\n// API function to delete a speakerexport const deleteSpeaker = async (speakerId) => {\n    const url = `/api/v1/speakers/${speakerId}`;\n    try {\n        const speakerResponse = await axios.get(url);\n        const speaker = speakerResponse.data;\n        if (!speaker) {\n            throw new Error(\"Speaker not found\");\n        }\n      const eventsResponse = await\n          axios.get(`/api/v1/events?speakerId=${speakerId}`\n          );\n      const events = eventsResponse.data;\n      if (events.length > 0) {\n        throw new Error(\"This speaker has associated\n            events, please delete them first\");\n      }\n      await axios.delete(url);\n      return speaker;\n    } catch (err) {\n        if (err.response) {\n            const { status, data } = err.response;\n            throw new Error(`${status}: ${data.error}`);\n        } else if (err.request) {\n            throw new Error('Error: No response received\n                from server');\n        } else {\n            throw new Error(err.message);\n        }\n    }\n};\n```", "```py\nfrom flask_sqlalchemy import Pagination@app.route('/api/v1/speakers', methods=['GET'])\ndef get_speakers():\n    page = request.args.get('page', 1, type=int)\n    per_page = request.args.get('per_page', 10, type=int)\n    speakers = Speaker.query.paginate(page, per_page,\n        False)\n    if not speakers.items:\n        return jsonify({\"error\": \"No speakers found\"}), 404\n    return jsonify({\n        'speakers': [speaker.serialize() for speaker in\n            speakers.items],\n        'total_pages': speakers.pages,\n        'total_items': speakers.total\n    }), 200\n```", "```py\nimport React, { useState, useEffect } from 'react';import { getSpeakers } from\n    '../../../services/SpeakersAPI';\nconst ViewSpeakers = () => {\n    const [speakers, setSpeakers] = useState([]);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [speakersPerPage] = useState(10);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState(null);\n    useEffect(() => {\n        fetchSpeakers();\n    }, []);\n};\nexport default ViewSpeakers;\n```"]