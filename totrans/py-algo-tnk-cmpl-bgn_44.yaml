- en: Chapter 30
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第30章
- en: One-Dimensional Lists and Dictionaries
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 一维列表和字典
- en: 30.1 Introduction
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.1 简介
- en: Variables are a good way to store values in memory but they have one limitation—they
    can hold only one value at a time. There are many cases, however, where a program
    needs to keep a large amount of data in memory, and variables are not the best
    choice.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 变量是存储内存中的值的好方法，但它们有一个限制——一次只能存储一个值。然而，有许多情况下，程序需要将大量数据存储在内存中，而变量并不是最佳选择。
- en: 'For example, consider the following exercise:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下练习：
- en: Write a Python program that lets the user enter three numbers. It then displays
    them sorted in ascending order.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，让用户输入三个数字。然后按升序显示它们。
- en: Consider the following code fragment. It lets the user enter the three numbers.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下代码片段。它允许用户输入三个数字。
- en: 'for i in range(3):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):'
- en: number = float(input())
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: number = float(input())
- en: When the loop finally finishes iterating, the variable number contains only
    that last number that was provided. Unfortunately, all the previous two numbers
    have been lost! Using this code fragment, it is not quite possible to display
    them sorted in ascending order.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 当循环最终完成迭代时，变量number只包含最后提供的那个数字。不幸的是，前两个数字已经丢失了！使用此代码片段，几乎不可能按升序显示它们。
- en: One possible solution would be to use three individual variables, as follows.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 一个可能的解决方案是使用三个单独的变量，如下所示。
- en: num1 = float(input())
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: num1 = float(input())
- en: num2 = float(input())
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: num2 = float(input())
- en: num3 = float(input())
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: num3 = float(input())
- en: 'if num1 <= num2 <= num3:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'if num1 <= num2 <= num3:'
- en: print(num1, num2, num3)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: print(num1, num2, num3)
- en: 'elif num1 <= num3 <= num2:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif num1 <= num3 <= num2:'
- en: print(num1, num3, num2)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: print(num1, num3, num2)
- en: 'elif num2 <= num1 <= num3:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif num2 <= num1 <= num3:'
- en: print(num2, num1, num3)
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: print(num2, num1, num3)
- en: 'elif num2 <= num3 <= num1:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif num2 <= num3 <= num1:'
- en: print(num2, num3, num1)
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: print(num2, num3, num1)
- en: 'elif num3 <= num1 <= num2:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif num3 <= num1 <= num2:'
- en: print(num3, num1, num2)
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: print(num3, num1, num2)
- en: 'else:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(num3, num2, num1)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: print(num3, num2, num1)
- en: Not a perfect solution, but it works! However, what if the wording of this exercise
    asked the user to enter 1,000 numbers instead of three? Think about it! Can you
    write a similar Python program for all those numbers? Of course not! Fortunately,
    there are data structures!
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个完美的解决方案，但它有效！然而，如果这个练习的措辞要求用户输入1000个数字而不是三个呢？想想看！你能为所有这些数字编写类似的Python程序吗？当然不能！幸运的是，有数据结构！
- en: '![](img/notice.jpg)In computer science, a data structure is a collection of
    data organized so that you can perform operations on it in the most effective
    way.'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)在计算机科学中，数据结构是一组组织良好的数据，以便以最有效的方式对其执行操作。'
- en: There are several data structures available in Python, such as lists, tuples,
    dictionaries, sets, frozensets, and strings. Yes, you heard that right! Since
    a string is a collection of alphanumeric characters, it is considered a data structure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Python中有几种数据结构可用，如列表、元组、字典、集合、冻结集合和字符串。是的，你听对了！由于字符串是一组字母数字字符的集合，它被视为数据结构。
- en: Beyond strings (for which you have already learned enough), lists and dictionaries
    are the most commonly used data structures in Python. The following chapters will
    analyze both of them.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 除了字符串（你已经学得足够多了）之外，列表和字典是Python中最常用的数据结构。以下章节将分析这两个。
- en: 30.2 What is a List?
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.2 列表是什么？
- en: A list is a type of data structure that can hold multiple values under one common
    name. It can be thought of as a collection of elements where each element is assigned
    a unique number known as an index position, or simply an index. Lists are mutable
    (changeable), which means that once a list is created, the values of its elements
    can be changed, and new elements can be added to or removed from the list.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是一种数据结构类型，可以在一个共同的名称下存储多个值。它可以被视为一个元素集合，其中每个元素都分配了一个唯一的数字，称为索引位置，或简单地称为索引。列表是可变的（可更改的），这意味着一旦创建列表，其元素的值就可以更改，并且可以向列表中添加新元素或从列表中删除元素。
- en: '![](img/notice.jpg)Lists in computer science resemble the matrices used in
    mathematics. A mathematical matrix is a collection of numbers or other mathematical
    objects, arranged in rows and columns.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)计算机科学中的列表类似于数学中使用的矩阵。数学矩阵是一组数字或其他数学对象，按行和列排列。'
- en: '![](img/notice.jpg)In many computer languages, such as Java, C++, and C# (to
    name a few), there are no lists. These languages support another kind of data
    structure that is called an “array”. Lists, however, are more powerful than arrays.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在许多计算机语言中，例如Java、C++和C#（仅举几个例子），没有列表。这些语言支持另一种称为“数组”的数据结构。然而，列表比数组更强大。'
- en: '![](img/notice.jpg)There are one-dimensional and multidimensional lists. A
    multidimensional list can be two-dimensional, three-dimensional, four-dimensional,
    and so on.'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)存在一维和多维列表。多维列表可以是二维的、三维的、四维的，等等。'
- en: One-Dimensional Lists
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一维列表
- en: The following example presents a one-dimensional list that holds the grades
    of six students. The name of the list is grades. For your convenience, the corresponding
    index is written above each element. By default, in Python, index numbering always
    starts at zero.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了一个一维列表，该列表包含了六个学生的成绩。列表的名称是grades。为了方便起见，每个元素上对应着相应的索引。默认情况下，在Python中，索引编号总是从零开始。
- en: '![Image](img/chapter30-01.png)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-01.png)'
- en: '![](img/remember.jpg)Since index numbering starts at zero, the index of the
    last element of a list is 1 less than the total number of elements in the list.
    In the list grades, the index of the last element is 5 while the total number
    of elements is 6.'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)由于索引编号从零开始，列表中最后一个元素的索引比列表中元素的总数少1。在grades列表中，最后一个元素的索引是5，而元素总数是6。'
- en: You can think of a list as if it were six individual variables—grades0, grades1,
    grades2, ... grades5—with each variable holding the grade of one student. The
    advantage of the list, however, is that it can hold multiple values under one
    common name.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以将列表想象成六个单独的变量——grades0、grades1、grades2、... grades5，每个变量都保存一个学生的成绩。然而，列表的优势在于它可以在一个共同的名称下保存多个值。
- en: Two-Dimensional Lists
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 二维列表
- en: In general, multidimensional lists are useful for working with multiple sets
    of data. For example, suppose you want to hold the daily high temperatures for
    California for the four weeks of April. One approach would be to use four one-dimensional
    lists, one for each week. Furthermore, each list would have seven elements, one
    for each day of the week, as follows.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，多维列表适用于处理多组数据。例如，假设你想要保存加利福尼亚州4月四周的每日最高气温。一种方法就是使用四个一维列表，每个列表代表一周。此外，每个列表将包含七个元素，每个元素代表一周中的某一天，如下所示。
- en: '![Image](img/chapter30-02.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-02.png)'
- en: However, this approach is a bit awkward because you would have to process each
    list separately. A better approach would be to use a two-dimensional list with
    four rows (one for each week) and seven columns (one for each day of the week),
    as follows.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这种方法有点笨拙，因为你必须分别处理每个列表。更好的方法是将一个二维列表使用四行（每行代表一周）和七列（每列代表一周中的某一天），如下所示。
- en: '![Image](img/chapter30-03.png)'
  id: totrans-44
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-03.png)'
- en: Three-Dimensional Lists
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 三维列表
- en: The next example shows a three-dimensional list that holds the daily high temperatures
    for California for the four weeks of April for the years 2013 and 2014.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例展示了一个三维列表，该列表包含了2013年和2014年4月四周内加利福尼亚州的每日最高气温。
- en: '![Image](img/chapter30-04.png)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-04.png)'
- en: '![](img/notice.jpg)Note that four-dimensional, five-dimensional, or even one-hundred–dimensional
    lists can exist. However, experience shows that the maximum list dimension that
    you will need in your life as a programmer is probably two or three.'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，四维、五维甚至一百维的列表都可以存在。然而，经验表明，作为程序员，你一生中可能需要的最大列表维度可能是两维或三维。'
- en: Exercise 30.2-1 Designing a List
  id: totrans-49
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.2-1 设计列表
- en: Design a list that can hold the ages of 8 people, and then add some typical
    values to the list.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个可以保存8个人年龄的列表，并向列表中添加一些典型值。
- en: Solution
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This is an easy one. All you have to do is design a list with 8 elements (indexes
    0 to 7). It can be a list with either one row or one column, as follows.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个简单的问题。你所要做的就是设计一个包含8个元素（索引0到7）的列表。它可以是一个只有一行或一列的列表，如下所示。
- en: '![Image](img/chapter30-05.png)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-05.png)'
- en: Keep in mind, however, that there are no lists with one row or one column in
    Python. These concepts may exist in mathematical matrices (or in your imagination!)
    but not in Python. The lists in Python are one-dimensional—end of story! If you
    want to visualize them having one row or one column, that is up to you.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，请记住，Python中没有一行或一列的列表。这些概念可能存在于数学矩阵中（或者在你的想象中！）但不在Python中。Python中的列表是一维的——这就是全部！如果你想要可视化它们有一行或一列，那取决于你。
- en: Exercise 30.2-2 Designing Lists
  id: totrans-55
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.2-2 设计列表
- en: Design the necessary lists to hold the names and the ages of seven people, and
    then add some typical values to the lists.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 设计必要的列表来存储七个人的姓名和年龄，然后向列表中添加一些典型值。
- en: Solution
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: This exercise can be implemented with two lists. Let's design them with one
    column each.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 这个练习可以用两个列表来实现。让我们设计它们，每个列表有一列。
- en: '![Image](img/chapter30-06.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-06.png)'
- en: As you can see, there is a one-to-one correspondence between the elements in
    the list names and those in the list ages. The first of the seven people is John
    Thompson, and he is 17 year old. The name “John Thompson” is stored at index 0
    of the list names, and at exactly the same index in the list ages, his age is
    stored. The next person's name (Ava Miller) and her age (25) are stored at index
    1 of the lists names, and ages, respectively, and so on.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，列表名称中的元素与列表年龄中的元素之间存在一一对应关系。这七个人中的第一个是约翰·汤普森，他17岁。名称“约翰·汤普森”存储在列表名称的索引0处，而在列表年龄的相同索引处存储了他的年龄。下一个人的姓名（艾娃·米勒）和她的年龄（25岁）分别存储在列表名称和年龄的索引1处，以此类推。
- en: Exercise 30.2-3 Designing Lists
  id: totrans-61
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.2-3 设计列表
- en: Design the necessary lists to hold the names of ten people as well as the average
    weight (in pounds) of each person for January, February, and March. Then add some
    typical values to the lists.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 设计必要的列表来存储十个人的姓名以及每个人一月份、二月份和三月份的平均体重（以磅为单位）。然后向列表中添加一些典型值。
- en: Solution
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In this exercise, you need a one-dimensional list for names, and a two-dimensional
    list for people's weights, having a one-to-one correspondence between their elements.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你需要一个一维列表来存储姓名，以及一个二维列表来存储人们的体重，它们的元素之间存在一一对应关系。
- en: '![Image](img/chapter30-07.png)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-07.png)'
- en: 30.3 Creating One-Dimensional Lists in Python
  id: totrans-66
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.3 在Python中创建一维列表
- en: Python has many ways to create a list and add elements (and values) to it. Depending
    on the given problem, it's up to you which one to use.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python有许多创建列表并向其中添加元素（和值）的方法。根据给定的问题，取决于你选择哪一种。
- en: Let's try to create the following list using the most common approaches.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用最常见的方法来创建以下列表。
- en: '![Image](img/chapter30-08.png)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-08.png)'
- en: First approach
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: To create a list and directly assign values to its elements, you can use the
    next Python statement, given in general form.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个列表并直接向其元素分配值，你可以使用以下Python语句，以通用形式给出。
- en: list_name = [ value0, value1, value2, …, valueM ]
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: list_name = [ value0, value1, value2, …, valueM ]
- en: where
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►list_name is the name of the list.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: ►list_name是列表的名称。
- en: ►value0, value1, value2, … , valueM are the values of the list elements.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: ►value0, value1, value2, … , valueM是列表元素的值。
- en: 'For this approach, you can create the list ages using the following statement:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这种方法，你可以使用以下语句来创建列表ages：
- en: ages = [12, 25, 9, 11]
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: ages = [12, 25, 9, 11]
- en: '![](img/notice.jpg)Indexes are set automatically. The value 12 is assigned
    to the element at index position 0, value 25 is assigned to the element at index
    position 1, and so on. Index numbering always starts at zero by default.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)索引是自动设置的。值12被分配给索引位置0的元素，值25被分配给索引位置1的元素，依此类推。默认情况下，索引编号总是从零开始。'
- en: '![](img/notice.jpg)In [Section 5.4](chapter05.html#toc_4) you learned about
    the rules that must be followed when assigning names to variables. Assigning names
    to lists follows exactly the same rules!'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)在[第5.4节](chapter05.html#toc_4)中，你学习了在给变量命名时必须遵循的规则。给列表命名遵循完全相同的规则！'
- en: Second approach
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: 'You can create a list of size empty elements in Python using the following
    statement given in general form:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用以下通用形式的语句在Python中创建一个大小为空元素的列表：
- en: list_name = [None] * size
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: list_name = [None] * size
- en: where size can be any positive integer value, or it can even be a variable that
    contains any positive integer value.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 其中size可以是任何正整数值，甚至可以是包含任何正整数值的变量。
- en: The next statement creates the list ages with 4 empty elements.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个语句创建了包含4个空元素的列表ages。
- en: ages = [None] * 4
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: ages = [None] * 4
- en: '![](img/notice.jpg)The statement ages = [None] * 4 reserves four locations
    in main memory (RAM).'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)语句ages = [None] * 4在主内存（RAM）中保留了四个位置。'
- en: 'To assign a value to a list element, you can use the following statement, given
    in general form:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要将值赋给列表元素，你可以使用以下语句，以一般形式给出：
- en: list_name[index] = value
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: list_name[index] = value
- en: where index is the index position of the element in the list.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 其中index是列表中元素的索引位置。
- en: The next code fragment creates the list ages (reserving four locations in main
    memory) and then assigns values to its elements.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段创建列表ages（在主内存中保留四个位置），然后为其元素赋值。
- en: ages = [None] * 4
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: ages = [None] * 4
- en: ages[0] = 12
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: ages[0] = 12
- en: ages[1] = 25
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: ages[1] = 25
- en: ages[2] = 9
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: ages[2] = 9
- en: ages[3] = 11
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: ages[3] = 11
- en: '![](img/notice.jpg)The size of the list ages is 4.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)列表ages的大小是4。'
- en: Of course, instead of using constant values for index, you can also use variables
    or expressions, as follows.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，除了使用常量值作为索引外，你还可以使用变量或表达式，如下所示。
- en: ages = [None] * 4
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: ages = [None] * 4
- en: k = 0
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: k = 0
- en: ages[k] = 12
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: ages[k] = 12
- en: ages[k + 1] = 25
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: ages[k + 1] = 25
- en: ages[k + 2] = 9
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: ages[k + 2] = 9
- en: ages[k + 3] = 11
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: ages[k + 3] = 11
- en: Third approach
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法
- en: In this approach, you can create a totally empty list (without elements) and
    then add elements (and values) to it using the append() method, as shown in the
    following Python statements, given in general form.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种方法中，你可以创建一个完全空的列表（没有元素），然后使用append()方法向其中添加元素（和值），如下面的Python语句所示，以一般形式给出。
- en: list_name = []
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: list_name = []
- en: list_name.append(value0)
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.append(value0)
- en: list_name.append(value1)
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.append(value1)
- en: list_name.append(value2)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.append(value2)
- en: …
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: list_name.append(valueM)
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: list_name.append(valueM)
- en: 'Using this approach, you can create the list ages using the following code
    fragment:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，你可以使用以下代码片段创建名为ages的列表：
- en: ages = []
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: ages = []
- en: ages.append(12)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ages.append(12)
- en: ages.append(25)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: ages.append(25)
- en: ages.append(9)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: ages.append(9)
- en: ages.append(11)
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: ages.append(11)
- en: '![](img/notice.jpg)Note that in this approach as well, index numbering starts
    at zero by default, meaning that the value 12 is stored at index position 0, the
    value 25 at index position 1 and so forth.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，在这种方法中，默认情况下索引编号从零开始，这意味着值12存储在索引位置0，值25存储在索引位置1，依此类推。'
- en: '![](img/notice.jpg)The statement ages = [] does not reserve any locations in
    main memory (RAM). It just states that the list ages is ready to accept new elements.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)语句ages = []不会在主内存（RAM）中保留任何位置。它只是声明列表ages已准备好接受新元素。'
- en: 30.4 How to Get Values from a One-Dimensional List
  id: totrans-120
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.4 如何从一个一维列表中获取值
- en: Getting values from a list is just a matter of pointing to a specific element.
    Each element of a one-dimensional list can be uniquely identified using an index.
    The following code fragment creates a list and displays “A+” (without the double
    quotes) on the screen.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 从列表中获取值只是指向一个特定元素的问题。一维列表中的每个元素都可以使用索引唯一标识。以下代码片段创建了一个列表，并在屏幕上显示“A+”（不带双引号）。
- en: grades = ["B+", "A+", "A", "C-"]
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: grades = ["B+", "A+", "A", "C-"]
- en: print(grades[1])
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: print(grades[1])
- en: Of course, instead of using constant values for index, you can also use variables
    or expressions. The following example creates a list and displays “Aphrodite and
    Hera” (without the double quotes) on the screen.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，除了使用常量值作为索引外，你还可以使用变量或表达式。以下示例创建了一个列表，并在屏幕上显示“Aphrodite and Hera”（不带双引号）。
- en: gods = ["Zeus", "Ares", "Hera", "Aphrodite", "Hermes"]
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: gods = ["Zeus", "Ares", "Hera", "Aphrodite", "Hermes"]
- en: k = 2
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: k = 2
- en: print(gods[k + 1], "and", gods[k])
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: print(gods[k + 1], "and", gods[k])
- en: A negative index accesses an element by starting to count from the end of the
    list. In the following list grades, the index position of each element (using
    negative indexes) is as follows.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 一个负索引从列表的末尾开始计数，访问一个元素。在以下列表grades中，每个元素（使用负索引）的索引位置如下。
- en: '![Image](img/chapter30-09.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-09.png)'
- en: The following example
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例
- en: grades = ["B+", "A+", "A", "C-"]
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: grades = ["B+", "A+", "A", "C-"]
- en: print(grades[-1] , "and", grades[-3])
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: print(grades[-1] , "and", grades[-3])
- en: displays “C− and A+” (without the double quotes) on the screen.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 在屏幕上显示“C− and A+”（不带双引号）。
- en: If you wish to display all the elements of a list, you can do the following
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望显示列表中的所有元素，你可以这样做
- en: grades = ["B+", "A+", "A", "C-"]
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: grades = ["B+", "A+", "A", "C-"]
- en: 'print(grades)        #It displays: [''B+'', ''A+'', ''A'', ''C-'']'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(grades) # 显示: [''B+'', ''A+'', ''A'', ''C-'']'
- en: '![](img/remember.jpg)In Python, you can define a string using either single
    or double quotes.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)在Python中，你可以使用单引号或双引号定义字符串。'
- en: Just like in strings, you can get a subset of a list, called a “slice”, as shown
    here.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在字符串中一样，你可以获取列表的子集，称为“切片”，如下所示。
- en: grades = ["B+", "A+", "A", "C-"]
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: grades = ["B+", "A+", "A", "C-"]
- en: 'print(grades[1:3])        #It displays: ["A+", "A"]'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(grades[1:3])        #It displays: ["A+", "A"]'
- en: '![](img/notice.jpg)Slicing in Python is a mechanism to select a range of elements
    from a list (or from a sequence, in general).'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)Python 中的切片是一种从列表（或一般序列）中选择元素范围的机制。'
- en: The slicing mechanism can also have a third argument, called step, as shown
    here.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 切片机制还可以有一个第三个参数，称为步长，如下所示。
- en: grades = ["B+", "A+", "A", "C-", "A-", "B-", "C", "B", "C+"]
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: grades = ["B+", "A+", "A", "C-", "A-", "B-", "C", "B", "C+"]
- en: 'print(grades[1:7:2])        #It displays: [''A+'', ''C-'', ''B-'']'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(grades[1:7:2])        #It displays: [''A+'', ''C-'', ''B-'']'
- en: A negative step returns a subset of a list in reverse order
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 负步长返回列表的逆序子集
- en: gods = ["Ares", "Hera", "Aphrodite", "Hermes"]
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: gods = ["Ares", "Hera", "Aphrodite", "Hermes"]
- en: 'print(gods[2:0:-1])   #It displays: [''Aphrodite'', ''Hera'']'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(gods[2:0:-1])   #It displays: [''Aphrodite'', ''Hera'']'
- en: 'print(gods[::-1])     #It displays: [''Hermes'', ''Aphrodite'', ''Hera'', ''Ares'']'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(gods[::-1])     #It displays: [''Hermes'', ''Aphrodite'', ''Hera'', ''Ares'']'
- en: '![](img/remember.jpg)The slicing mechanism uses the notation'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)切片机制使用以下记法'
- en: 'list[[beginIndex] : [endIndex] [: step]]'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'list[[beginIndex] : [endIndex] [: step]]'
- en: and returns a portion of list. Specifically, it returns the sublist starting
    from position beginIndex and running up to, but not including, position endIndex
    or up to the end of list, whichever comes first. Both arguments beginIndex and
    endIndex are optional. If beginIndex is omitted, the sublist starting from position
    0 and running up to, but not including, position endIndex is returned. If endIndex
    is omitted, the sublist starting from position beginIndex until the end of list
    is returned. The last argument step is optional as well. If omitted, its default
    value is 1\. If supplied, it defines the number of elements you want to move forward
    after each element is retrieved from the original list.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: and returns a portion of list. Specifically, it returns the sublist starting
    from position beginIndex and running up to, but not including, position endIndex
    or up to the end of list, whichever comes first. Both arguments beginIndex and
    endIndex are optional. If beginIndex is omitted, the sublist starting from position
    0 and running up to, but not including, position endIndex is returned. If endIndex
    is omitted, the sublist starting from position beginIndex until the end of list
    is returned. The last argument step is optional as well. If omitted, its default
    value is 1\. If supplied, it defines the number of elements you want to move forward
    after each element is retrieved from the original list.
- en: Exercise 30.4-1 Creating the Trace Table
  id: totrans-152
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 30.4-1 创建跟踪表
- en: Create the trace table for the next code fragment.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: Create the trace table for the next code fragment.
- en: a = [None] * 4
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: a = [None] * 4
- en: a[3] = 9
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: a[3] = 9
- en: x = 0
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: x = 0
- en: a[x] = a[3] + 4
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: a[x] = a[3] + 4
- en: a[x + 1] = a[x] * 3
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: a[x + 1] = a[x] * 3
- en: x += 1
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: x += 1
- en: a[x + 2] = a[x - 1]
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: a[x + 2] = a[x - 1]
- en: a[2] = a[1] + 5
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: a[2] = a[1] + 5
- en: a[3] = a[3] + 1
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: a[3] = a[3] + 1
- en: Solution
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: Don't forget that you can manipulate each element of a list as if it were a
    variable. Thus, when you create a trace table for a Python program that uses lists,
    you can have one column for each element as follows.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 不要忘记，你可以像操作变量一样操作列表中的每个元素。因此，当你为使用列表的 Python 程序创建跟踪表时，你可以为每个元素设置一列，如下所示。
- en: '| Step | Statement | Notes | x | a[0] | a[1] | a[2] | a[3] |'
  id: totrans-165
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | x | a[0] | a[1] | a[2] | a[3] |'
- en: '| 1 | a = [None] * 4 | This creates list a with no values in it | ? | ? | ?
    | ? | ? |'
  id: totrans-166
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = [None] * 4 | This creates list a with no values in it | ? | ? | ?
    | ? | ? |'
- en: '| 2 | a[3] = 9 |   | ? | ? | ? | ? | 9 |'
  id: totrans-167
  prefs: []
  type: TYPE_TB
  zh: '| 2 | a[3] = 9 |   | ? | ? | ? | ? | 9 |'
- en: '| 3 | x = 0 |   | 0 | ? | ? | ? | 9 |'
  id: totrans-168
  prefs: []
  type: TYPE_TB
  zh: '| 3 | x = 0 |   | 0 | ? | ? | ? | 9 |'
- en: '| 4 | a[x] = a[3] + 4 |   | 0 | 13 | ? | ? | 9 |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 4 | a[x] = a[3] + 4 |   | 0 | 13 | ? | ? | 9 |'
- en: '| 5 | a[x + 1] = a[x] * 3 |   | 0 | 13 | 39 | ? | 9 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 5 | a[x + 1] = a[x] * 3 |   | 0 | 13 | 39 | ? | 9 |'
- en: '| 6 | x += 1 |   | 1 | 13 | 39 | ? | 9 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 6 | x += 1 |   | 1 | 13 | 39 | ? | 9 |'
- en: '| 7 | a[x + 2] = a[x − 1] |   | 1 | 13 | 39 | ? | 13 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 7 | a[x + 2] = a[x − 1] |   | 1 | 13 | 39 | ? | 13 |'
- en: '| 8 | a[2] = a[1] + 5 |   | 1 | 13 | 39 | 44 | 13 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 8 | a[2] = a[1] + 5 |   | 1 | 13 | 39 | 44 | 13 |'
- en: '| 9 | a[3] = a[3] + 1 |   | 1 | 13 | 39 | 44 | 14 |'
  id: totrans-174
  prefs: []
  type: TYPE_TB
  zh: '| 9 | a[3] = a[3] + 1 |   | 1 | 13 | 39 | 44 | 14 |'
- en: Exercise 30.4-2 Using a Non-Existing Index
  id: totrans-175
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 30.4-2 使用不存在的索引
- en: Which properties of an algorithm are not satisfied by the following Python program?
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Python 程序不满足算法的哪些属性？
- en: grades = ["B+", "A+", "A", "C-"]
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: grades = ["B+", "A+", "A", "C-"]
- en: print(grades[100])
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: print(grades[100])
- en: Solution
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: 'Two properties are not satisfied by this Python program. The first one is obvious:
    there is no data input. The second one is the property of definiteness. You must
    never reference a non-existing element of a list. In this exercise, since there
    is no element at index position 100, the last statement throws a runtime error.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 该 Python 程序不满足两个属性。第一个属性很明显：没有数据输入。第二个属性是确定性属性。你永远不要引用列表中不存在的元素。在这个练习中，由于索引位置
    100 没有元素，最后一个语句抛出了运行时错误。
- en: 30.5 How to Alter the Value of a List Element
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.5 如何更改列表元素的值
- en: To alter the value of an existing list element is a piece of cake. All you need
    to do is use the appropriate index and assign a new value to that element. The
    example that follows shows exactly this.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: '#Create a list'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: tribes = ["Navajo", "Cherokee", "Sioux"]
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'print(tribes)    #It displays: [''Navajo'', ''Cherokee'', ''Sioux'']'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '#Alter the value of an existing element'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: tribes[1] = "Apache"
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'print(tribes)    #It displays: [''Navajo'', ''Apache'', ''Sioux'']'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 30.6 How to Iterate Through a One-Dimensional List
  id: totrans-189
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now comes the interesting part. A program can iterate through the elements of
    a list using a loop control structure (usually a for-loop). There are two approaches
    you can use to iterate through a one-dimensional list.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: This approach refers to each list element using its index. Following is a code
    fragment, written in general form
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'for index in range(size):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: process structure_name[index]
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: in which, process is any Python statement or block of statements that processes
    one element of the list structure_name at each iteration.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program displays all elements of the list gods, one at
    each iteration.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: gods = ["Zeus", "Ares", "Hera", "Aphrodite", "Hermes"]
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(5):'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: print(gods[i])
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The name of the variable i is not binding. You can use any
    variable name you want, such as index, ind, j, and many more.'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that since the list gods contains five elements, the
    for-loop must iterate from 0 to 4 and not from 1 to 5\. This is because the indexes
    of the four elements are 0, 1, 2, 3, and 4, correspondingly.'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Since lists are mutable, you can use a loop control structure to alter all or
    some of its values. The following code fragment doubles the values of some elements
    of the list b.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: b = [80, 65, 60, 72, 30, 40]
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: b[i] = b[i] * 2
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: This approach is very simple but not as flexible as the previous one. There
    are cases where it cannot be used, as you will see below. Following is a code
    fragment, written in general form
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in structure_name:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: process element
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: in which process is any Python statement or block of statements that processes
    one element of the list structure_name at each iteration.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program, displays all elements of the list grades, one
    at each iteration.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: grades = ["B+", "A+", "A", "C-"]
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'for grade in grades:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: print(grade)
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In the first iteration, the value of the first element is
    assigned to variable grade. In the second iteration, the value of the second element
    is assigned to variable grade and so on!'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program displays all elements of the list gods, one at
    each iteration, in reverse order.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: gods = ["Hera", "Zeus", "Ares", "Aphrodite", "Hermes"]
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'for god in gods[::-1]:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: print(god)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'Keep in mind, though, that this approach cannot be used to alter the values
    of the elements in a list. For example, if you want to double the values of all
    elements in the list numbers, you cannot do the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: numbers = [5, 10, 3, 2]
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: numbers = [5, 10, 3, 2]
- en: 'for number in numbers:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 'for number in numbers:'
- en: number = number * 2
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: number = number * 2
- en: '![](img/notice.jpg)number is a simple variable where, at each iteration, each
    successive value of the list numbers is assigned to. However, the opposite never
    happens! The value of number is never assigned back to any element!'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)number是一个简单的变量，在每次迭代中，列表numbers的后续值被分配给它。然而，情况相反！number的值永远不会分配回任何元素！'
- en: '![](img/notice.jpg)If you want to alter the values of the elements in a list,
    you should use the first approach.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)如果你想改变列表中元素的价值，你应该使用第一种方法。'
- en: Exercise 30.6-1 Finding the Sum
  id: totrans-226
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.6-1 求和
- en: Write a Python program that creates a list with the following values
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，创建一个包含以下值的列表
- en: 56, 12, 33, 8, 3, 2, 98
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 56, 12, 33, 8, 3, 2, 98
- en: and then calculates and displays their sum.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 然后计算并显示它们的总和。
- en: Solution
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: You learned two approaches to iterate through the list elements. Let's use both
    approaches and see the differences. You will find an extra third approach below,
    which is the Pythonic way to calculate the sum of the elements of a one-dimensional
    list.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你学习了两种遍历列表元素的方法。让我们使用这两种方法并看看它们的区别。下面你会发现一个额外的第三种方法，这是计算一维列表元素总和的Pythonic方式。
- en: First approach
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: The solution is as follows.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案如下。
- en: '![](img/my_exercise_header.png) file_30.6-1a'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.6-1a'
- en: values = [56, 12, 33, 8, 3, 2, 98]
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: values = [56, 12, 33, 8, 3, 2, 98]
- en: total = 0
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(7):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(7):'
- en: total += values[i]  #This is equivalent to total = total + values[i]
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 'total += values[i]    #这相当于total = total + values[i]'
- en: print(total)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Second approach
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: The solution is as follows.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案如下。
- en: '![](img/my_exercise_header.png) file_30.6-1b'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.6-1b'
- en: values = [56, 12, 33, 8, 3, 2, 98]
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: values = [56, 12, 33, 8, 3, 2, 98]
- en: total = 0
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for value in values:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 'for value in values:'
- en: total += value
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: total += value
- en: print(total)
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: Third approach
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法
- en: This approach uses no loop structures. It just uses the fsum() function of the
    math module.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法不使用任何循环结构。它只是使用了math模块中的fsum()函数。
- en: '![](img/my_exercise_header.png) file_30.6-1c'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.6-1c'
- en: from math import fsum
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: from math import fsum
- en: values = [56, 12, 33, 8, 3, 2, 98]
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: values = [56, 12, 33, 8, 3, 2, 98]
- en: total = fsum(values)
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: total = fsum(values)
- en: print(total)
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: print(total)
- en: '![](img/notice.jpg)If you don''t remember anything about the fsum() function,
    refresh your memory by re-reading [Section 11.2](chapter11.html#toc_2).'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)如果你对fsum()函数没有任何印象，可以通过重新阅读[第11.2节](chapter11.html#toc_2)来刷新你的记忆。'
- en: 30.7 How to Add User-Entered Values to a One-Dimensional List
  id: totrans-256
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.7 如何将用户输入的值添加到一维列表中
- en: There is nothing new here. Instead of reading a value from the keyboard and
    assigning that value to a variable, you can directly assign that value to a specific
    list element. The next code fragment prompts the user to enter the names of four
    people, and assigns them to the elements at index positions 0, 1, 2, and 3, of
    the list names.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这里没有什么新的内容。不是从键盘读取一个值并将其分配给一个变量，你可以直接将那个值分配给特定的列表元素。下一个代码片段提示用户输入四个人的姓名，并将它们分配给names列表的索引位置0、1、2和3。
- en: names = [None] * 4    #Pre-reserve 4 locations in main memory (RAM)
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 'names = [None] * 4    #在主存（RAM）中预保留4个位置'
- en: 'names[0] = input("Enter name No 1: ")'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[0] = input("输入姓名编号 1: ")'
- en: 'names[1] = input("Enter name No 2: ")'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[1] = input("输入姓名编号 2: ")'
- en: 'names[2] = input("Enter name No 3: ")'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[2] = input("输入姓名编号 3: ")'
- en: 'names[3] = input("Enter name No 4: ")'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[3] = input("输入姓名编号 4: ")'
- en: Using a for-loop, this code fragment can equivalently be written as
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 使用for循环，这段代码可以等价地写成
- en: ELEMENTS = 4
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 4
- en: 'names = [None] * ELEMENTS   #Pre-reserve 4 locations in main memory (RAM)'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 'names = [None] * ELEMENTS    #在主存（RAM）中预保留4个位置'
- en: 'for i in range(ELEMENTS):'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'names[i] = input("Enter name No " + str(i + 1)  + ": ")'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 'names[i] = input("输入姓名编号 " + str(i + 1) + ": ")'
- en: You can, of course, do the same, using the append() method instead, as shown
    in the code fragment that follows.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 你当然也可以这样做，使用append()方法代替，如下面的代码片段所示。
- en: ELEMENTS = 4
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 4
- en: names = []    #Create a totally empty list
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 'names = []    #创建一个完全空的列表'
- en: 'for i in range(ELEMENTS):'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'name = input("Enter name No " + str(i + 1)  + ": ")'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 'name = input("输入姓名编号 " + str(i + 1) + ": ")'
- en: names.append(name)
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: names.append(name)
- en: '![](img/remember.jpg)When the append() method is used, elements are appended
    to a list (added at the end of the list).'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)当使用append()方法时，元素会被添加到列表中（添加到列表的末尾）。'
- en: '![](img/notice.jpg)A very good tactic for dealing with list sizes is to use
    constants. However, unlike some other programming languages (such as C# or C++),
    Python does not inherently support constants. Instead, you can use a variable
    to achieve similar results. It is advisable, though, to use only uppercase letters.
    This helps you to visually distinguish those variables that are used as constants
    from regular variables.'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)处理列表大小的一个非常好的策略是使用常量。然而，与一些其他编程语言（如C#或C++）不同，Python本身不支持常量。相反，你可以使用变量来实现类似的结果。不过，建议只使用大写字母。这有助于你从视觉上区分用作常量的变量和普通变量。'
- en: Exercise 30.7-1 Displaying Words in Reverse Order
  id: totrans-276
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.7-1 以逆序显示单词
- en: Write a Python program that lets the user enter 20 words. The program must then
    display them in the exact reverse of the order in which they were provided.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，让用户输入20个单词。程序必须然后以它们提供的顺序的逆序显示它们。
- en: Solution
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Lists are perfect for problems like this one. The following is an appropriate
    solution.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 列表非常适合这类问题。以下是一个合适的解决方案。
- en: '![](img/my_exercise_header.png) file_30.7-1a'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_30.7-1a'
- en: 'words = [None] * 20   #Pre-reserve 20 locations in main memory (RAM)'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 'words = [None] * 20    #在主内存（RAM）中预保留20个位置'
- en: 'for i in range(20):'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(20):'
- en: words[i] = input()
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: words[i] = input()
- en: 'for i in range(19, -1, -1):'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(19, -1, -1):'
- en: print(words[i])
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: print(words[i])
- en: '![](img/remember.jpg)Since index numbering starts at zero, the index of the
    last list element is 1 less than the total number of elements in the list.'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '![记住](img/remember.jpg)由于索引编号从零开始，列表中最后一个元素的索引比列表中元素的总数少1。'
- en: Keep in mind that in Python you can iterate in reverse order through the list
    elements using the slicing mechanism and a value of −1 for step. The following
    program creates a totally empty list and then uses the append() method to add
    elements to the list. Finally, the slicing mechanism is used to display them in
    the exact reverse of the order in which they were provided.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，在Python中，你可以使用切片机制和步长为-1来以逆序遍历列表元素。以下程序创建了一个完全空的列表，然后使用append()方法向列表中添加元素。最后，使用切片机制以它们提供的顺序的相反顺序显示它们。
- en: '![](img/my_exercise_header.png) file_30.7-1b'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_30.7-1b'
- en: 'words = []   #Create a totally empty list'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 'words = []    #创建一个完全空的列表'
- en: 'for i in range(20):'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(20):'
- en: words.append(input())
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: words.append(input())
- en: 'for word in words[::-1]:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 'for word in words[::-1]:'
- en: print(word)
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: print(word)
- en: '![](img/notice.jpg)Sometimes the wording of an exercise may say nothing about
    using a data structure. However, this doesn''t mean that you can''t use one. Use
    data structures (lists, tuples, dictionaries etc.) whenever you find them necessary.'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)有时练习的措辞可能没有提到使用数据结构。然而，这并不意味着你不能使用它。当你发现需要时，请使用数据结构（列表、元组、字典等）。'
- en: '![](img/notice.jpg)A “tuple” is almost identical to a list. The main difference
    is that tuples are immutable (unchangeable).'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)一个“元组”几乎与列表相同。主要区别是元组是不可变的（不可更改的）。'
- en: '![](img/notice.jpg)An “immutable” data structure is a structure in which the
    value of its elements cannot be changed once the data structure is created. Obviously,
    you cannot add new elements to an immutable data structure or remove existing
    elements from it.'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)一个“不可变”的数据结构是在数据结构创建后其元素值不能改变的结构。显然，你无法向不可变数据结构中添加新元素或从其中删除现有元素。'
- en: Exercise 30.7-2 Displaying Positive Numbers in Reverse Order
  id: totrans-297
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.7-2 以逆序显示正数
- en: Write a Python program that lets the user enter 100 numbers into a list. It
    then displays only the positive ones in the exact reverse of the order in which
    they were provided.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，让用户输入100个数字到一个列表中。然后，它只显示提供的顺序的逆序中的正数。
- en: Solution
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: In this exercise, the program must accept all values from the user and store
    them into a list. However, within the for-loop that is responsible for displaying
    the list elements, a nested decision control structure must check for and display
    only the positive values. The solution is as follows.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，程序必须接受用户的所有值并将它们存储到一个列表中。然而，在负责显示列表元素的for循环中，一个嵌套的决策控制结构必须检查并显示仅有的正数。解决方案如下。
- en: '![](img/my_exercise_header.png) file_30.7-2'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_30.7-2'
- en: ELEMENTS = 100
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 100
- en: values = [None] * ELEMENTS
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: values = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: values[i] = float(input())
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: values[i] = float(input())
- en: 'for value in values[::-1]:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 'for value in values[::-1]:'
- en: 'if value > 0:'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: 'if value > 0:'
- en: print(value)
  id: totrans-308
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(value)
- en: '![](img/remember.jpg)Unlike some other programming languages (such as C# or
    C++), Python does not inherently support constants. Instead, you can use a variable
    to achieve similar results. It is advisable, though, to use only uppercase letters.
    This helps you to visually distinguish those variables that are used as constants
    from regular variables.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)与一些其他编程语言（如C#或C++）不同，Python本身不支持常量。相反，您可以使用变量来实现类似的结果。不过，建议只使用大写字母。这有助于您在视觉上区分用作常量的变量和普通变量。'
- en: Exercise 30.7-3 Finding the Average Value
  id: totrans-310
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.7-3 查找平均值
- en: Write a Python program that prompts the user to enter 20 numbers into a list.
    It then displays a message only when their average value is less than 10.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入20个数字到一个列表中。然后，只有在它们的平均值小于10时才显示一条消息。
- en: Solution
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: To find the average value of the user-provided numbers the program must first
    find their sum and then divide that sum by 20\. Once the average value is found,
    the program must check whether to display the corresponding message.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 为了找到用户提供的数字的平均值，程序必须首先找到它们的总和，然后将该总和除以20。一旦找到平均值，程序必须检查是否显示相应的消息。
- en: '![](img/my_exercise_header.png) file_30.7-3a'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-3a'
- en: ELEMENTS = 20
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 20
- en: values = [None] * ELEMENTS
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: values = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'values[i] = float(input("Enter a value: "))'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 'values[i] = float(input("Enter a value: "))'
- en: '#Accumulate values in total'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '#Accumulate values in total'
- en: total = 0
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: 'for i in range(ELEMENTS):'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: total += values[i]
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: total += values[i]
- en: average = total / ELEMENTS
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: average = total / ELEMENTS
- en: 'if average < 10:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 'if average < 10:'
- en: print("Average value is less than 10")
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: print("Average value is less than 10")
- en: If you are wondering whether or not this exercise could have been solved using
    just one for-loop, the answer is “yes”. An alternative solution is presented next.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道这个练习是否可以用一个循环解决，答案是“可以”。下面将提供一个替代解决方案。
- en: '![](img/my_exercise_header.png) file_30.7-3b'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-3b'
- en: ELEMENTS = 20
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 20
- en: total = 0
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: total = 0
- en: values = [None] * ELEMENTS
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: values = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'values[i] = float(input("Enter a value: "))'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 'values[i] = float(input("Enter a value: "))'
- en: total += values[i]
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: total += values[i]
- en: average = total / ELEMENTS
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: average = total / ELEMENTS
- en: 'if average < 10:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 'if average < 10:'
- en: print("Average value is less than 10")
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: print("Average value is less than 10")
- en: But let's clarify something! Even though many processes can be performed inside
    just one for-loop, it is simpler to carry out each individual process in a separate
    for-loop. This is probably not so efficient but, since you are still a novice
    programmer, try to adopt this programming style just for now. Later, when you
    have the experience and become a Python guru, you will be able to “merge” many
    processes in just one for-loop!
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 但让我们澄清一下！尽管许多过程可以在一个循环中完成，但将每个单独的过程在一个单独的循环中执行会更简单。这可能不是那么高效，但既然你还是一个新手程序员，试着先采用这种编程风格。以后，当你有了经验并成为Python大师时，你将能够“合并”一个循环中的许多过程！
- en: Now, let's see a more Pythonic approach using the fsum() function.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看使用fsum()函数的更Pythonic的方法。
- en: '![](img/my_exercise_header.png) file_30.7-3c'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-3c'
- en: from math import fsum
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: from math import fsum
- en: ELEMENTS = 20
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 20
- en: values = []
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: values = []
- en: 'for i in range(ELEMENTS):'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'values.append(float(input("Enter a value: ")))'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 'values.append(float(input("Enter a value: ")))'
- en: 'if fsum(values) / ELEMENTS < 10:'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 'if fsum(values) / ELEMENTS < 10:'
- en: print("Average value is less than 10")
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: print("Average value is less than 10")
- en: Exercise 30.7-4 Displaying Reals Only
  id: totrans-347
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.7-4 仅显示实数
- en: Write a Python program that prompts the user to enter 10 numeric values into
    a list. The program must then display the indexes of the elements that contain
    reals.
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入10个数值到一个列表中。然后，程序必须显示包含实数的元素的索引。
- en: Solution
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In [Exercise 22.1-1](chapter22.html#toc_2) you learned how to check whether
    or not, a number is an integer. Accordingly, to check whether or not, a number
    is a real (float), you can use the Boolean expression
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在[练习22.1-1](chapter22.html#toc_2)中，你学习了如何检查一个数是否为整数。相应地，要检查一个数是否为实数（浮点数），可以使用布尔表达式
- en: number != int(number)
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: number != int(number)
- en: The solution is as follows.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案如下。
- en: '![](img/my_exercise_header.png) file_30.7-4'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-4'
- en: ELEMENTS = 10
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 10
- en: b = [None] * ELEMENTS
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: b = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'b[i] = float(input("Enter a value for element " + str(i) + ": "))'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 'b[i] = float(input("Enter a value for element " + str(i) + ": "))'
- en: 'for i in range(ELEMENTS):'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'if b[i] != int(b[i]):'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 'if b[i] != int(b[i]):'
- en: print("A real found at index:", i)
  id: totrans-360
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("A real found at index:", i)
- en: Exercise 30.7-5 Displaying Elements with Odd-Numbered Indexes
  id: totrans-361
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 30.7-5 显示奇数索引的元素
- en: Write a Python program that prompts the user to enter 8 numeric values into
    a list. The program must then display the elements with odd-numbered indexes (that
    is, indexes 1, 3, 5, and 7).
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户将8个数值输入到一个列表中。然后程序必须显示奇数索引的元素（即索引1、3、5和7）。
- en: Solution
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Following is one possible solution.
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可能的解决方案。
- en: '![](img/my_exercise_header.png) file_30.7-5a'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-5a'
- en: ELEMENTS = 8
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 8
- en: values = [None] * ELEMENTS
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: values = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'values[i] = float(input("Enter a value for element " + str(i) + ": "))'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 'values[i] = float(input("请输入元素 " + str(i) + " 的值: "))'
- en: '#Display the elements with odd-numbered indexes'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示奇数索引的元素'
- en: 'for i in range(ELEMENTS):'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'if i % 2 != 0:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 'if i % 2 != 0:'
- en: print(values[i])
  id: totrans-373
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(values[i])
- en: However, you know that only the values in odd-numbered index positions must
    be displayed. Therefore, the for-loop that is responsible for displaying the elements
    of the list, instead of starting counting from 0 and using a step of +1, it can
    start counting from 1 and use a step of +2\. This modification decreases the number
    of iterations by half. The modified Python program follows.
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你知道只有奇数索引位置的值需要显示。因此，负责显示列表元素的for循环，而不是从0开始计数并使用步长+1，可以从1开始计数并使用步长+2。这种修改将迭代次数减半。修改后的Python程序如下。
- en: '![](img/my_exercise_header.png) file_30.7-5b'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-5b'
- en: ELEMENTS = 8
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 8
- en: values = [None] * ELEMENTS
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: values = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'values[i] = float(input("Enter a value for element " + str(i) + ": "))'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: 'values[i] = float(input("请输入元素 " + str(i) + " 的值: "))'
- en: '#Display the elements with odd-numbered indexes'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示奇数索引的元素'
- en: 'for i in range(1, ELEMENTS, 2):         #Start from 1 and increment by 2'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, ELEMENTS, 2):         # 从1开始，每次增加2'
- en: print(values[i])
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: print(values[i])
- en: As already stated, in Python you can iterate through the list elements using
    the slicing mechanism. In the following program the slicing mechanism is used
    to display only the elements with odd-numbered indexes.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在Python中，你可以使用切片机制遍历列表元素。在以下程序中，切片机制用于仅显示奇数索引的元素。
- en: '![](img/my_exercise_header.png) file_30.7-5c'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-5c'
- en: ELEMENTS = 8
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 8
- en: values = [None] * ELEMENTS
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: values = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: 'values[i] = float(input("Enter a value for element " + str(i) + ": "))'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 'values[i] = float(input("请输入元素 " + str(i) + " 的值: "))'
- en: '#Display the elements with odd-numbered indexes'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '# 显示奇数索引的元素'
- en: 'for value in values[1::2]:      #Start from 1 and increment by 2'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 'for value in values[1::2]:      # 从1开始，每次增加2'
- en: print(value)
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: print(value)
- en: Exercise 30.7-6 Displaying Even Numbers in Odd–Numbered Index Positions
  id: totrans-392
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 30.7-6 在奇数索引位置显示偶数
- en: Write a Python program that lets the user enter 100 integers into a list and
    then displays any even values that are stored in odd–numbered index positions.
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，允许用户输入100个整数到一个列表中，然后显示存储在奇数索引位置的任何偶数值。
- en: Solution
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Following is one possible solution.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个可能的解决方案。
- en: '![](img/my_exercise_header.png) file_30.7-6a'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-6a'
- en: ELEMENTS = 100
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 100
- en: values = [None] * ELEMENTS
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: values = [None] * ELEMENTS
- en: 'for i in range(ELEMENTS):'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: values[i] = int(input())
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: values[i] = int(input())
- en: 'for i in range(1, ELEMENTS, 2):      #Start from 1 and increment by 2'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, ELEMENTS, 2):      # 从1开始，每次增加2'
- en: 'if values[i] % 2 == 0:'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: 'if values[i] % 2 == 0:'
- en: print(values[i])
  id: totrans-403
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(values[i])
- en: However, a more Pythonic way is to use the slicing mechanism as shown here.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，一种更Pythonic的方法是使用此处所示的切片机制。
- en: '![](img/my_exercise_header.png) file_30.7-6b'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.7-6b'
- en: ELEMENTS = 100
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: ELEMENTS = 100
- en: values = []
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: values = []
- en: 'for i in range(ELEMENTS):'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(ELEMENTS):'
- en: values.append(int(input()))
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: values.append(int(input()))
- en: 'for value in values[1::2]:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 'for value in values[1::2]:'
- en: 'if value % 2 == 0:'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: 'if value % 2 == 0:'
- en: print(value)
  id: totrans-412
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(value)
- en: 30.8 More about the Concatenation and Repetition Operators
  id: totrans-413
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.8 关于连接和重复操作符的更多内容
- en: In [Section 7.5](chapter07.html#toc_7), you learned how to concatenate and how
    to repeat strings using the string operators ( + ) and ( * ) correspondingly.
    The same operators, as well as their corresponding assignment operators ( += )
    and ( *= ), can also be used in lists. To be more specific, the concatenation
    operator ( + ) and the concatenation assignment operator ( += ) can be used to
    join two (or more) lists, whereas the repetition operator ( * ) and the repetition
    assignment operator ( *= ) can be used to repeat the same list multiple times.
    Let's see some examples.
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第7.5节](chapter07.html#toc_7)中，你学习了如何使用字符串运算符（+）和（*）相应地连接和重复字符串。相同的运算符以及它们对应的赋值运算符（+=）和（*=）也可以用于列表。更具体地说，连接运算符（+）和连接赋值运算符（+=）可以用来连接两个（或更多）列表，而重复运算符（*）和重复赋值运算符（*=）可以用来重复相同的列表多次。让我们看一些例子。
- en: The following code fragment creates list x, which, in the end, contains the
    values [1, 2, 3, 4, 5, 6].
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段创建列表x，最终包含的值[1, 2, 3, 4, 5, 6]。
- en: a = [1, 2]
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: a = [1, 2]
- en: b = [3, 4]
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: b = [3, 4]
- en: x = a + b    #List x contains the values [1, 2, 3, 4]
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = a + b   # 列表x包含的值[1, 2, 3, 4]'
- en: x += [5, 6]  #List x contains the values [1, 2, 3, 4, 5, 6]
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 'x += [5, 6]   # 列表x包含的值[1, 2, 3, 4, 5, 6]'
- en: 'You have already used the repetition operator ( * ) in [Section 30.3](#toc_6)
    to create a list with empty elements using the following statement given in general
    form:'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: 你已经在[第30.3节](#toc_6)中使用了重复运算符（*）来创建一个使用以下一般形式给出的语句的空元素列表：
- en: list_name = [None] * size
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: list_name = [None] * size
- en: What this statement actually did was to repeat a list of one empty element (this
    is the [None] list) size times. For example, the following code fragment iterates
    the list [None] 3 times.
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: 这个语句实际上所做的就是重复一个只有一个空元素（这是大小为[None]的列表）的列表大小次。例如，以下代码片段迭代列表[None] 3次。
- en: 'x = [None] * 3   #List x contains the values [None, None, None]'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = [None] * 3   # 列表x包含的值[None, None, None]'
- en: The following code fragment creates list x, which, in the end, contains the
    values [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6].
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段创建列表x，最终包含的值[5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6]。
- en: 'x = [5, 6] * 2   #List x contains the values [5, 6, 5, 6]'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = [5, 6] * 2   # 列表x包含的值[5, 6, 5, 6]'
- en: 'x *= 3   #List x contains the values [5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6]'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 'x *= 3   # 列表x包含的值[5, 6, 5, 6, 5, 6, 5, 6, 5, 6, 5, 6]'
- en: 30.9 What is a Dictionary?
  id: totrans-427
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.9 什么是字典？
- en: In computer science, the main difference between a dictionary and a list is
    that the dictionary elements can be uniquely identified using a key and not necessarily
    an integer value. Each key of a dictionary is associated (or mapped, if you prefer)
    to an element. The keys of a dictionary can be of type string, integer, float,
    or tuple.
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 在计算机科学中，字典和列表之间的主要区别在于，字典元素可以通过键唯一标识，而不一定是整数值。字典的每个键都与一个元素相关联（或者如果你愿意，可以映射）。字典的键可以是字符串、整数、浮点数或元组。
- en: The following example presents a dictionary that holds the names of a family.
    The name of the dictionary is family and the corresponding keys are written above
    each element.
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了一个包含家庭成员名称的字典。字典的名称是family，相应的键写在每个元素上方。
- en: '![Image](img/chapter30-10.png)'
  id: totrans-430
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-10.png)'
- en: '![](img/notice.jpg)The keys of dictionary elements must be unique within the
    dictionary. This means that in the dictionary family, for example, you cannot
    have two keys named father.'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)字典元素的键必须在字典内是唯一的。这意味着在字典家族中，例如，你不能有两个名为father的键。'
- en: '![](img/notice.jpg)The values of dictionary elements can be of any type.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)字典元素的值可以是任何类型。'
- en: 30.10 Creating Dictionaries in Python
  id: totrans-433
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.10 在Python中创建字典
- en: Let's try to create the following dictionary using the most common approaches.
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们尝试使用最常见的方法来创建以下字典。
- en: '![Image](img/chapter30-11.png)'
  id: totrans-435
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter30-11.png)'
- en: First approach
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 首次方法
- en: To create a dictionary and directly assign values to its elements, you can use
    the next Python statement, given in general form.
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个字典并直接为其元素赋值，可以使用以下Python语句，以一般形式给出。
- en: 'dict_name = {key0: value0, key1: value1, key2: value2, …, keyM: valueM }'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: 'dict_name = {key0: value0, key1: value1, key2: value2, …, keyM: valueM }'
- en: where
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: 其中
- en: ►dict_name is the name of the dictionary.
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: ►dict_name 是字典的名称。
- en: ►key0, key1, key2, … , keyM are the keys of the dictionary elements.
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: ►key0, key1, key2, … , keyM 是字典元素的键。
- en: ►value0, value1, value2, … , valueM are the values of the dictionary elements.
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: ►value0, value1, value2, … , valueM 是字典元素的值。
- en: 'Using this approach, the dictionary pupil can be created using the following
    statement:'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这种方法，可以使用以下语句创建字典pupil：
- en: 'pupil = {"firstName": "Ann", "lastName": "Fox", "age": 8, "class": "2nd"}'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Each key is separated from its value by a colon ( : ), the
    elements are separated by commas, and everything is enclosed within curly brackets
    { }.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In [Section 5.4](chapter05.html#toc_4) you learned about
    the rules that must be followed when assigning names to variables. Assigning names
    to dictionaries follows exactly the same rules!'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, you can create a totally empty dictionary using the following
    statement, given in general form
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
- en: dict_name = {}
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
- en: and then add an element (key-value), as shown in the following Python statement,
    given in general form.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
- en: dict_name[key] = value
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
- en: 'Using this approach, the dictionary pupil can be created using the following
    code fragment:'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
- en: pupil = {}
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
- en: pupil["firstName"] = "Ann"
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
- en: pupil["lastName"] = "Fox"
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
- en: pupil["age"] = 8
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
- en: pupil["class"] = "2nd"
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
- en: 30.11 How to Get a Value from a Dictionary
  id: totrans-458
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To get the value of a specific dictionary element, you must point to that element
    using its corresponding key. The following code fragment creates a dictionary,
    and then displays “Ares is the God of War”, without the double quotes, on the
    screen.
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
- en: olympians = {
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
- en: '"Zeus": "King of the Gods",'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
- en: '"Hera": "Goddess of Marriage",'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
- en: '"Ares": "God of War",'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
- en: '"Poseidon": "God of the Sea",'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
- en: '"Demeter": "Goddess of the Harvest",'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
- en: '"Artemis": "Goddess of the Hunt",'
  id: totrans-466
  prefs: []
  type: TYPE_NORMAL
- en: '"Apollo": "God of Music and Medicine",'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
- en: '"Aphrodite": "Goddess of Love and Beauty",'
  id: totrans-468
  prefs: []
  type: TYPE_NORMAL
- en: '"Hermes": "Messenger of the Gods",'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
- en: '"Athena": "Goddess of Wisdom",'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
- en: '"Hephaistos": "God of Fire and the Forge",'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
- en: '"Dionysus": "God of the Wine"'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
- en: print("Ares is the", olympians["Ares"])
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Only keys can be used to access an element. This means that
    olympians["Ares"] correctly returns “God of War” but olympians["God of War"] cannot
    return “Ares”.'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 30.11-1 Roman Numerals to Numbers
  id: totrans-476
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Roman numerals are shown in the following table.
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
- en: '| Number | Roman Numeral |'
  id: totrans-478
  prefs: []
  type: TYPE_TB
- en: '| 1 | I |'
  id: totrans-479
  prefs: []
  type: TYPE_TB
- en: '| 2 | II |'
  id: totrans-480
  prefs: []
  type: TYPE_TB
- en: '| 3 | III |'
  id: totrans-481
  prefs: []
  type: TYPE_TB
- en: '| 4 | IV |'
  id: totrans-482
  prefs: []
  type: TYPE_TB
- en: '| 5 | V |'
  id: totrans-483
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter a Roman numeral between
    I and V, and then displays the corresponding number. Assume that the user enters
    a valid value.
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
- en: The obvious solution would be the use of a multiple-alternative decision structure,
    similar to the one shown in the code fragment that follows.
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
- en: if romanNumeral == "I"
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
- en: number = 1
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
- en: elif romanNumeral == "II"
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
- en: number = 2
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
- en: elif romanNumeral == "III"
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
- en: number = 3
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
- en: elif romanNumeral == "IV"
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
- en: number = 4
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
- en: elif romanNumeral == "V"
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
- en: number = 5
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
- en: However, this approach is quite lengthy, and it could become even more extensive
    if you want to expand your program to work with additional Roman numerals. Therefore,
    armed with knowledge about dictionaries, you can employ a more efficient approach,
    as demonstrated in the code fragment that follows.
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
- en: 'roman2number = {"I": 1, "II": 2, "III": 3, "IV": 4, "V": 5}'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
- en: number = roman2number[romanNumeral]
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this exercise is as follows.
  id: totrans-500
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_30.11-1'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_30.11-1'
- en: 'roman2number = {"I": 1, "II": 2, "III": 3, "IV": 4, "V": 5}'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: 'roman2number = {"I": 1, "II": 2, "III": 3, "IV": 4, "V": 5}'
- en: 'romanNumeral = input("Enter a Roman numeral: ")'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: 'romanNumeral = input("Enter a Roman numeral: ")'
- en: number = roman2number[romanNumeral]
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: number = roman2number[romanNumeral]
- en: print(romanNumeral + ":", number)
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: print(romanNumeral + ":", number)
- en: Exercise 30.11-2 Using a Non-Existing Key in Dictionaries
  id: totrans-506
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.11-2 在字典中使用不存在的键
- en: What is wrong in the following Python program?
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Python程序有什么问题？
- en: 'family = {"father": "John", "mother": "Maria", "son": "George"}'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: 'family = {"father": "John", "mother": "Maria", "son": "George"}'
- en: print(family["daughter"])
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: print(family["daughter"])
- en: Solution
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: Similar to lists, this code does not satisfy the property of definiteness. You
    must never reference a non-existing dictionary element. Since there is no key
    “daughter”, the last statement throws a runtime error.
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: 与列表类似，这段代码不满足确定性属性。你永远不要引用一个不存在的字典元素。由于没有键“daughter”，最后一行会抛出一个运行时错误。
- en: 30.12 How to Alter the Value of a Dictionary Element
  id: totrans-512
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.12 如何修改字典元素的值
- en: To alter the value of an existing dictionary element you need to use the appropriate
    key and assign a new value to that element. The example that follows shows exactly
    this.
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: 要修改现有字典元素的值，你需要使用适当的关键字并将新值赋给该元素。下面的例子正好展示了这一点。
- en: '#Create a dictionary'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '#创建一个字典'
- en: 'tribes = {"Indian": "Navajo", "African": "Zulu"}'
  id: totrans-515
  prefs: []
  type: TYPE_NORMAL
  zh: 'tribes = {"Indian": "Navajo", "African": "Zulu"}'
- en: 'print(tribes) #It displays: {''Indian'': ''Navajo'', ''African'': ''Zulu''}'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(tribes) #它显示: {''Indian'': ''Navajo'', ''African'': ''Zulu''}'
- en: '#Alter the value of an existing element'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '#修改现有元素的值'
- en: tribes["Indian"] = "Apache"
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: tribes["Indian"] = "Apache"
- en: 'print(tribes) #It displays: {''Indian'': ''Apache'', ''African'': ''Zulu''}'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 'print(tribes) #它显示: {''Indian'': ''Apache'', ''African'': ''Zulu''}'
- en: Exercise 30.12-1 Assigning a Value to a Non-Existing Key
  id: totrans-520
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习30.12-1 向不存在的键赋值
- en: Is there anything wrong in the following code fragment?
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段有什么问题？
- en: 'tribes = {0: "Navajo", 1: "Cherokee", 2: "Sioux"}'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 'tribes = {0: "Navajo", 1: "Cherokee", 2: "Sioux"}'
- en: tribes[3] = "Apache"
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: tribes[3] = "Apache"
- en: Solution
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: No, this time there is absolutely nothing wrong in this code fragment. At first
    glance, you might have thought that the last statement tries to alter the value
    of a non-existing key and it will throw an error. This is not true for Python's
    dictionaries, though. Since tribes is a dictionary and key “3” does not exist,
    the last statement adds a brand new fourth element to the dictionary!
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 不，这次代码片段中绝对没有任何错误。乍一看，你可能以为最后一行尝试修改一个不存在的键的值，这将引发错误。然而，对于Python字典来说并非如此。因为`tribes`是一个字典，键“3”不存在，所以最后一行向字典中添加了一个全新的第四个元素！
- en: '![](img/remember.jpg)The keys of a dictionary can be of type string, integer,
    float, or tuple.'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)字典的键可以是字符串、整数、浮点数或元组。'
- en: Keep in mind though, if tribes were actually a list, the last statement would
    certainly throw an error. Take a look at the following code fragment
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然如此，但如果`tribes`实际上是一个列表，最后一行肯定会引发错误。看看下面的代码片段
- en: tribes = ["Navajo", "Cherokee", "Sioux"]
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: tribes = ["Navajo", "Cherokee", "Sioux"]
- en: tribes[3] = "Apache"
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: tribes[3] = "Apache"
- en: In this example, since tribes is a list and index 3 does not exist, the last
    statement tries to alter the value of a non-existing element and obviously throws
    an error!
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，由于`tribes`是一个列表，索引3不存在，所以最后一行尝试修改一个不存在的元素的值，显然会引发错误！
- en: 30.13 How to Iterate Through a Dictionary
  id: totrans-531
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 30.13 如何遍历字典
- en: To iterate through the elements of a dictionary you can use a for-loop. There
    are two approaches actually. Let's study them both!
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 要遍历字典的元素，你可以使用for循环。实际上有两种方法。让我们研究一下这两种方法！
- en: First approach
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: Following is a code fragment, written in general form
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个通用形式的代码片段
- en: 'for key in structure_name:'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: 'for key in structure_name:'
- en: process structure_name[key]
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: process structure_name[key]
- en: in which process is any Python statement or block of statements that processes
    one element of the dictionary structure_name at each iteration.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: 在哪个过程中，任何Python语句或语句块都会在每次迭代中处理`structure_name`字典的一个元素。
- en: The following Python program displays the letters A, B, C, and D, and their
    corresponding Morse^([[23]](footnotes.html#Endnote_23)) code.
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Python程序显示了字母A、B、C和D及其对应的摩尔斯电码。
- en: 'morseCode = {"A": ".-", "B": "-...", "C": "-.-.", "D": "-.."}'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: 'morseCode = {"A": ".-", "B": "-...", "C": "-.-.", "D": "-.."}'
- en: 'for letter in morseCode:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 'for letter in morseCode:'
- en: print(letter, morseCode[letter])
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: print(letter, morseCode[letter])
- en: The next example gives a bonus of $2000 to each employee of a computer software
    company!
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个示例给计算机软件公司的每位员工额外奖励$2000！
- en: salaries = {
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: salaries = {
- en: '"Project Manager": 83000,'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
- en: '"Software Engineer": 81000,'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
- en: '"Network Engineer": 64000,'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
- en: '"Systems Administrator": 61000,'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
- en: '"Software Developer": 70000'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
- en: 'for title in salaries:'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
- en: salaries[title] += 2000
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
- en: Following is a code fragment, written in general form
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
- en: 'for key, value in structure_name.items():'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
- en: process key, value
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
- en: in which process is any Python statement or block of statements that processes
    one element of the dictionary structure_name at each iteration.
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program displays all elements of the dictionary grades,
    one at each iteration.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
- en: 'grades = {"John": "B+", "George": "A+", "Maria": "A", "Helen": "A-"}'
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
- en: 'for name, grade in grades.items():'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
- en: print(name, "got", grade)
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
- en: 'Unfortunately, this approach cannot be used to alter the values of the elements
    of a dictionary. For example, if you want to double the values of all elements
    of the dictionary salaries, you cannot do the following:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
- en: salaries = {
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
- en: '"Project Manager": 83000,'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
- en: '"Software Engineer": 81000,'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
- en: '"Network Engineer": 64000,'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '"Systems Administrator": 61000,'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
- en: '"Software Developer": 70000'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
- en: 'for title, salary in salaries.items():'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
- en: salary *= 2
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)salary is a simple variable that, at each iteration, each
    successive value of the dictionary salaries is assigned to. However, the opposite
    never happens! The value of salary is never assigned back to any element!'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)If you want to alter the values of the elements of a dictionary,
    you should use the first approach.'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: 30.14 More about the Membership Operators
  id: totrans-573
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In [Section 15.5](chapter15.html#toc_7), you learned about Python's membership
    operators in and not in. You can, as well, use the same operators to evaluate
    whether or not an operand exists in a specified data structure. Let's see some
    examples.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: The following example displays “It exists!”
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: x = [1, 2, 3, 4, 5, 6]
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: 'if 3 in x:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: print("It exists!")
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: The following example looks for “George” in list y.
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: y = ["John", "Maria", "Anna", "George", "Tes"]
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: 'if "George" in y:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: print("I found George!!!!")
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the in operator checks whether an operand exists
    in a data structure. It cannot find the index position where the operand is found!'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: The following example prompts the user to enter a name and then checks whether
    it does not exist in the list y.
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: y = ["John", "Maria", "Anna", "George", "Tes"]
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: 'name = input("Enter a name to search: ")'
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: 'if name not in y:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
- en: print(name, "not found!!!!")
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
- en: The following example checks whether key “Son” exists in dictionary family.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: 'family = {"Father": "John", "Mother": "Maria", "Son": "George"}'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: 'if "Son" in family:'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: print("Key 'Son' found!")
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: '30.15 Review Questions: True/False'
  id: totrans-593
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: 1)Lists are structures that can hold multiple values.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: 2)List elements are located in main memory (RAM).
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
- en: 3)There can be only one-dimensional and two-dimensional lists.
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
- en: 4)There cannot be four-dimensional lists.
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
- en: 5)A list is called “multidimensional” because it can hold values of different
    types.
  id: totrans-599
  prefs: []
  type: TYPE_NORMAL
- en: 6)Each list element has a unique non-negative index.
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
- en: 7)There can be two identical keys within a dictionary.
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
- en: 8)In lists, index numbering always starts at zero by default.
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
- en: 9)The index of the last list element is equal to the total number of its elements.
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
- en: 10)A two-hundred–dimensional list can exist.
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
- en: 11)The next statement contains a syntax error.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: studentNames = None * 10
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: 12)In a Python program, two lists cannot have the same name.
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: 13)The next statement is syntactically correct.
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: 'student = {"firstName": "Ann" - "lastName": "Fox" - "age": 8}'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: 14)In a Python program, two lists cannot have the same number of elements.
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: 15)You cannot use a variable as an index in a list.
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: 16)You can use a mathematical expression as an index in a list.
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
- en: 17)You cannot use a variable as a key in a dictionary.
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: 18)The following code fragment throws no errors.
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
- en: a = "a"
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: 'fruits = {"o": "Orange", "a": "Apple", "w": "Watermelon"}'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
- en: print(fruits[a])
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
- en: 19)If you use a variable as an index in a list, this variable must contain an
    integer value.
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
- en: 20)In order to calculate the sum of 20 numeric user-provided values, you must
    use a list.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
- en: 21)You can let the user enter a value into list b using the statement b[k] =
    input()
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
- en: 22)The following statement creates a one-dimensional list of two empty elements.
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
- en: names = [None] * 3
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
- en: 23)The following code fragment assigns the value 10 to the element at index
    7.
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
- en: values[5] = 7
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
- en: values[values[5]] = 10
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
- en: 24)The following code fragment assigns the value “Sally” without the double
    quotes to the element at index 2.
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
- en: names = [None] * 3
  id: totrans-627
  prefs: []
  type: TYPE_NORMAL
- en: names[2] = "John"
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
- en: names[1] = "George"
  id: totrans-629
  prefs: []
  type: TYPE_NORMAL
- en: names[0] = "Sally"
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
- en: 25)The following statement assigns the value “Sally” without the double quotes
    to the element at index 2.
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
- en: names = ["John", "George", "Sally"]
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
- en: 26)The following code fragment displays “Sally”, without the double quotes,
    on the screen.
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
- en: names = [None] * 3
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
- en: k = 0
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
- en: names[k] = "John"
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
- en: k += 1
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
- en: names[k] = "George"
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
- en: k += 1
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
- en: names[k] = "Sally"
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
- en: k -= 1
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
- en: print(names[k])
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
- en: 27)The following code fragment is syntactically correct.
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
- en: names = ["John", "George", "Sally"]
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
- en: print(names[])
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
- en: 28)The following code fragment displays “Maria”, without the double quotes,
    on the screen.
  id: totrans-646
  prefs: []
  type: TYPE_NORMAL
- en: from math import pi
  id: totrans-647
  prefs: []
  type: TYPE_NORMAL
- en: names = ["John", "George", "Sally", "Maria"]
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
- en: print(names[int(pi)])
  id: totrans-649
  prefs: []
  type: TYPE_NORMAL
- en: 29)The following code fragment satisfies the property of definiteness.
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
- en: grades = ["B+", "A+", "A"]
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
- en: print(grades[3])
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
- en: 30)The following code fragment satisfies the property of definiteness.
  id: totrans-653
  prefs: []
  type: TYPE_NORMAL
- en: v = [1, 3, 2, 9]
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
- en: print(v[v[v[0]]])
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
- en: 31)The following code fragment displays the value of 1 on the screen.
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
- en: v = [1, 3, 2, 0]
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
- en: print(v[v[v[v[0]]]])
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
- en: 32)The following code fragment displays all the elements of the list names.
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
- en: names = ["John", "George", "Sally", "Maria"]
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
- en: i = i
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 4:'
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i])
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
- en: i += 1
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
- en: 33)The following code fragment satisfies the property of definiteness.
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
- en: names = ["John", "George", "Sally", "Maria"]
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2, 5):'
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i])
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
- en: 34)The following code fragment lets the user enter 100 values into list b.
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(100):'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
- en: b[i] = input()
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
- en: 35)If list b contains 30 elements (arithmetic values), the following code fragment
    doubles the values of all of its elements.
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(29, -1, -1):'
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
- en: b[i] = b[i] * 2
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
- en: 36)It is possible to use a for-loop to double the values of some of the elements
    of a list.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
- en: 37)If list b contains 30 elements, the following code fragment displays all
    of them.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
- en: 'for element in b[0:29]:'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
- en: print(element)
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
- en: 38)If b is a dictionary, the following code fragment displays all of its elements.
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
- en: 'for key, element in b:'
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
- en: print(element)
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
- en: 39)The following code fragment throws an error.
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
- en: fruits = {
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
- en: '"O": "Orange",'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
- en: '"A": "Apple",'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
- en: '"W": "Watermelon"'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
- en: print(fruits["Orange"])
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
- en: '30.16 Review Questions: Multiple Choice'
  id: totrans-689
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
- en: 1)The following statement
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
- en: lastNames = [NONE] * 5
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
- en: a)contains a logic error.
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
- en: b)contains a syntax error.
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
- en: c)is a correct statement.
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
- en: 2)The following code fragment
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
- en: x = 5
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
- en: values[x / 2] = 10
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
- en: a)does not satisfy the property of definiteness.
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
- en: b)does not satisfy the property of finiteness.
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
- en: c)does not satisfy the property of effectiveness.
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
- en: 3)If variable x contains the value 4, the following statement
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
- en: values[x + 1] = 5
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
- en: a)assigns the value 4 to the element at index 5.
  id: totrans-706
  prefs: []
  type: TYPE_NORMAL
- en: b)assigns the value 5 to the element at index 4.
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
- en: c)assigns the value 5 to the element at index 5.
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
- en: 4)The following statement
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
- en: values = []
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
- en: values.append(5)
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
- en: a)assigns the value 5 to the element at index 1.
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
- en: b)assigns the value 5 to the element at index 0.
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
- en: c)does not satisfy the property of definiteness.
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following code fragment
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
- en: values[0] = 1
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
- en: values[values[0]] = 2
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
- en: values[values[1]] = 3
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
- en: values[values[2]] = 4
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
- en: a)assigns the value 4 to the element at index 3.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
- en: b)assigns the value 3 to the element at index 2.
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
- en: c)assigns the value 2 to the element at index 1.
  id: totrans-724
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
- en: 6)If list values contains numeric values, the following statement
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
- en: print(values[values[1] − values[1 % 2]] − values[int(1/2)])
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
- en: a)does not satisfy the property of definiteness.
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
- en: b)always displays 0.
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
- en: c)always displays 1.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
- en: 7)You can iterate through a one-dimensional list with a for-loop that uses
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
- en: a)variable i as a counter.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
- en: b)variable j as a counter.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
- en: c)variable k as a counter.
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
- en: d)any variable as a counter.
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following code fragment
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
- en: names = ["George", "John", "Maria", "Sally"]
  id: totrans-739
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3, 0, -1):'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
- en: print(names[i])
  id: totrans-741
  prefs: []
  type: TYPE_NORMAL
- en: a)displays all names in ascending order.
  id: totrans-742
  prefs: []
  type: TYPE_NORMAL
- en: b)displays some names in ascending order.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
- en: c)displays all names in descending order.
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
- en: d)displays some names in descending order.
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
- en: 9)The following code fragment
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
- en: fruits = ["apple", "orange", "onion", "watermelon"]
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
- en: print(fruits[1])
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
- en: 'a)displays: "orange"'
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
- en: 'b)displays: apple'
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
- en: 'c)displays: orange'
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
- en: d)throws an error because onion is not a fruit!
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
- en: 10)If list b contains 30 elements (arithmetic values), the following code fragment
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(29, 0, -1):'
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
- en: b[i] = b[i] * 2
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
- en: a)doubles the values of some of its elements.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
- en: b)doubles the values of all of its elements.
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
- en: 11)The following code fragment
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
- en: 'struct = {"firstName": "George", "lastName": "Miles", "age": 28}'
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
- en: 'for a, b in struct.items():'
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
- en: print(b)
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
- en: a)displays all the keys of the dictionary elements.
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
- en: b)displays all the values of the dictionary elements.
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
- en: c)displays all the key-value pairs of the dictionary elements.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
- en: 12)The following code fragment
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
- en: 'struct = {"firstName": "George", "lastName": "Miles", "age": 28}'
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
- en: 'for x in struct:'
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
- en: a)displays all the keys of the dictionary elements.
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
- en: b)displays all the values of the dictionary elements.
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
- en: c)displays all the key-value pairs of the dictionary elements.
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
- en: 13)The following code fragment
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
- en: 'tribes = {0: "Navajo", 1: "Cherokee", 2: "Sioux", 3: "Apache"}'
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(4):'
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
- en: print(tribes[i])
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
- en: a)displays all the keys of the dictionary elements.
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
- en: b)displays all the values of the dictionary elements.
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
- en: c)displays all the key-value pairs of the dictionary elements.
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
- en: 14)The following code fragment
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
- en: 'tribes = {"tribeA": "Navajo", "tribeB": "Cherokee", "tribeC": "Sioux"}'
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
- en: 'for x in tribes:'
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
- en: tribes[x] = tribes[x].upper()
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
- en: a)converts all the keys of the dictionary elements to uppercase.
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
- en: b)converts all the values of the dictionary elements to uppercase.
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
- en: c)convert all the key-value pairs of the dictionary elements to uppercase.
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
- en: 30.17 Review Exercises
  id: totrans-793
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
- en: 1)Design a data structure to hold the weights (in pounds) of five people, and
    then add some typical values to the structure.
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
- en: 2)Design the necessary data structures to hold the names and the weights (in
    pounds) of seven people, and then add some typical values to the structures.
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
- en: 3)Design the necessary data structures to hold the names of five lakes as well
    as the average area (in square miles) of each lake in June, July, and August.
    Then add some typical values to the structures.
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
- en: 4)Design a data structure to hold the three dimensions (width, height, and depth
    in inches) of 10 boxes. Then add some typical values to the structure.
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
- en: 5)Design the necessary data structures to hold the names of eight lakes as well
    as the average area (in square miles) and maximum depth (in feet) of each lake.
    Then add some typical values to the structures.
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
- en: 6)Design the necessary data structures to hold the names of four lakes as well
    as their average areas (in square miles) for the first week of June, the first
    week of July, and the first week of August.
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
- en: 7)Create the trace table for the following code fragment.
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
- en: a = [None] * 3
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
- en: a[2] = 1
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
- en: a[x + a[2]] = 4
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
- en: a[x] = a[x + 1] * 4
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
- en: 8)Create the trace table for the following code fragment.
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
- en: a = [None] * 5
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
- en: a[1] = 5
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
- en: a[x] = 4
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0]] = a[x + 1] % 3
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0] / 2] = 10
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
- en: x += 2
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
- en: a[x + 1] = a[x] + 9
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
- en: 9)Create the trace table for the following code fragment for three different
    executions.
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 3, (ii) 4, and (iii) 1.'
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
- en: a = [None] * 4
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
- en: a[1] = int(input())
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
- en: a[x] = 3
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0]] = a[x + 1] % 2
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0] % 2] = 10
  id: totrans-823
  prefs: []
  type: TYPE_NORMAL
- en: x += 1
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
- en: a[x + 1] = a[x] + 9
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
- en: 10)Create the trace table for the following code fragment for three different
    executions.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 100, (ii) 108, and (iii)
    1.'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
- en: a = [None] * 4
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
- en: a[1] = int(input())
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
- en: x = 0
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
- en: a[x] = 3
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0]] = a[x + 1] % 10
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
- en: 'if a[3] > 5:'
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
- en: a[a[0] % 2] = 9
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
- en: x += 1
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
- en: a[x + 1] = a[x] + 9
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
- en: a[2] = 3
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
- en: 11)Fill in the gaps in the following trace table. In steps 6 and 7, fill in
    the name of a variable; for all other cases, fill in constant values, arithmetic,
    or comparison operators.
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | x | y | a[0] | a[1] | a[2] |'
  id: totrans-840
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = [None] * 3 | ? | ? | ? | ? | ? |'
  id: totrans-841
  prefs: []
  type: TYPE_TB
- en: '| 2 | x = …… | 4 | ? | ? | ? | ? |'
  id: totrans-842
  prefs: []
  type: TYPE_TB
- en: '| 3 | y = x ‑ …… | 4 | 3 | ? | ? | ? |'
  id: totrans-843
  prefs: []
  type: TYPE_TB
- en: '| 4, 5 | if x …… y:     a[0] = ……'
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
- en: else
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
- en: a[0] = y | 4 | 3 | 1 | ? | ? |
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
- en: '| 6 | a[1] = …… + 3 | 4 | 3 | 1 | 7 | ? |'
  id: totrans-847
  prefs: []
  type: TYPE_TB
- en: '| 7 | y = …… ‑ 1 | 4 | 2 | 1 | 7 | ? |'
  id: totrans-848
  prefs: []
  type: TYPE_TB
- en: '| 8 | a[y] = (x + 5) …… 2 | 4 | 2 | 1 | 7 | 1 |'
  id: totrans-849
  prefs: []
  type: TYPE_TB
- en: 12)Create the trace table for the following code fragment.
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: a = [17, 12, 45, 12, 12, 49]
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(6):'
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: 'if a[i] == 12:'
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: a[i] -= 1
  id: totrans-854
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: a[i] += 1
  id: totrans-856
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 13)Create the trace table for the following code fragment.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: a = [10, 15, 12, 23, 22, 19]
  id: totrans-858
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 5):'
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: a[i] = a[i + 1] + a[i - 1]
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: 14)Try, without using a trace table, to determine the values that are displayed
    when the following code fragment is executed.
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: tribes = {
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: '"Indian-1": "Navajo",'
  id: totrans-863
  prefs: []
  type: TYPE_NORMAL
- en: '"Indian-2": "Cherokee",'
  id: totrans-864
  prefs: []
  type: TYPE_NORMAL
- en: '"Indian-3" : "Sioux",'
  id: totrans-865
  prefs: []
  type: TYPE_NORMAL
- en: '"African-1": "Zulu",'
  id: totrans-866
  prefs: []
  type: TYPE_NORMAL
- en: '"African-2": "Maasai",'
  id: totrans-867
  prefs: []
  type: TYPE_NORMAL
- en: '"African-3": "Yoruba"'
  id: totrans-868
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: 'for x, y in tribes.items():'
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: 'if x[:6] == "Indian":'
  id: totrans-871
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  id: totrans-872
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 15)Write a Python program that lets the user enter 100 numbers into a list and
    then displays these values raised to the power of three.
  id: totrans-873
  prefs: []
  type: TYPE_NORMAL
- en: 16)Write a Python program that lets the user enter 80 numbers into a list. Then,
    the program must raise the list values to the power of two, and finally display
    them in the exact reverse of the order in which they were provided.
  id: totrans-874
  prefs: []
  type: TYPE_NORMAL
- en: 17)Write a Python program that lets the user enter 90 integers into a list and
    then displays those that are exactly divisible by 5 in the exact reverse of the
    order in which they were provided.
  id: totrans-875
  prefs: []
  type: TYPE_NORMAL
- en: 18)Write a Python program that lets the user enter 50 integers into a list and
    then displays those that are even or greater than 10.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: 19)Write a Python program that lets the user enter 30 numbers into a list and
    then calculates and displays the sum of those that are positive.
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: 20)Write a Python program that lets the user enter 50 integers into a list and
    then calculates and displays the sum of those that have two digits.
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: All two-digit integers are between 10 and 99.'
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: 21)Write a Python program that lets the user enter 40 numbers into a list and
    then calculates and displays the sum of the positive numbers and the sum of the
    negative ones.
  id: totrans-880
  prefs: []
  type: TYPE_NORMAL
- en: 22)Write a Python program that lets the user enter 20 numbers into a list and
    then calculates and displays their average value.
  id: totrans-881
  prefs: []
  type: TYPE_NORMAL
- en: 23)Write a Python program that prompts the user to enter 50 integer values into
    a list. It then displays the indexes of the elements that contain values lower
    than 20.
  id: totrans-882
  prefs: []
  type: TYPE_NORMAL
- en: 24)Write a Python program that prompts the user to enter 60 numeric values into
    a list. It then displays the elements with even-numbered indexes (that is, indexes
    0, 2, 4, 6, and so on).
  id: totrans-883
  prefs: []
  type: TYPE_NORMAL
- en: 25)Write a Python program that prompts the user to enter 20 numeric values into
    into a list. It then calculates and displays the sum of the elements that have
    even indexes.
  id: totrans-884
  prefs: []
  type: TYPE_NORMAL
- en: 26)Write a code fragment in Python that creates the following list of 100 elements.
  id: totrans-885
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter30-12.png)
  id: totrans-886
  prefs: []
  type: TYPE_NORMAL
- en: 27)Write a code fragment in Python that creates the following list of 100 elements.
  id: totrans-887
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter30-13.png)
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: 28)Write a Python program that prompts the user to enter an integer N and then
    creates and displays the following list of N elements. Using a loop control structure,
    the program must also validate data input and display an error message when the
    user enters any value less than 1.
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter30-14.png)
  id: totrans-890
  prefs: []
  type: TYPE_NORMAL
- en: 29)Write a Python program that prompts the user to enter 10 numeric values into
    a list and then displays the indexes of the elements that contain integers.
  id: totrans-891
  prefs: []
  type: TYPE_NORMAL
- en: 30)Write a Python program that prompts the user to enter 50 numeric values into
    a list and then counts and displays the total number of negative elements.
  id: totrans-892
  prefs: []
  type: TYPE_NORMAL
- en: 31)Write a Python program that prompts the user to enter 50 words into a list
    and then displays those that contain at least 10 characters.
  id: totrans-893
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the len() function.'
  id: totrans-894
  prefs: []
  type: TYPE_NORMAL
- en: 32)Write a Python program that lets the user enter 30 words into a list. It
    then displays those words that have less than 5 characters, then those that have
    less than 10 characters, and finally those that have less than 20 characters.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Try to display the words using two for-loops nested one within the other.'
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: 33)Write a Python program that prompts the user to enter 40 words into a list
    and then displays those that contain the letter “w” at least twice.
  id: totrans-897
  prefs: []
  type: TYPE_NORMAL
- en: 34)Roman numerals are shown in the following table.
  id: totrans-898
  prefs: []
  type: TYPE_NORMAL
- en: '| Digit | Roman Numeral (Tens digits) | Roman Numeral (Ones digits) |'
  id: totrans-899
  prefs: []
  type: TYPE_TB
- en: '| 1 | X | I |'
  id: totrans-900
  prefs: []
  type: TYPE_TB
- en: '| 2 | XX | I |'
  id: totrans-901
  prefs: []
  type: TYPE_TB
- en: '| 3 | XXX | III |'
  id: totrans-902
  prefs: []
  type: TYPE_TB
- en: '| 4 | XL | IV |'
  id: totrans-903
  prefs: []
  type: TYPE_TB
- en: '| 5 | L | V |'
  id: totrans-904
  prefs: []
  type: TYPE_TB
- en: '| 6 | LX | VI |'
  id: totrans-905
  prefs: []
  type: TYPE_TB
- en: '| 7 | LXX | VII |'
  id: totrans-906
  prefs: []
  type: TYPE_TB
- en: '| 8 | LXXX | VIII |'
  id: totrans-907
  prefs: []
  type: TYPE_TB
- en: '| 9 | XC | IX |'
  id: totrans-908
  prefs: []
  type: TYPE_TB
- en: Each Roman numeral is a combination of tens and ones digits. For example, the
    Roman numeral representation of the number 45 is XLV (4 tens represented by XL
    and 5 ones represented by V). Write a Python program that prompts the user to
    enter an integer between 1 and 99 and displays the corresponding Roman numeral.
    Assume that the user enters a valid value.
  id: totrans-909
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Avoid checking each integer individually, as this would require a multiple-alternative
    decision structure with 99 cases. Try to find a more efficient and clever approach
    instead!'
  id: totrans-910
  prefs: []
  type: TYPE_NORMAL
