["```py\ntozo\n└── frontend\n    └── src\n        └── components\n```", "```py\n{\n  ...,\n  \"proxy\": \"http://localhost:5050\"\n}\n```", "```py\n{\n  \"compilerOptions\": {\n    \"baseUrl\": \"./\",\n    ...\n  }\n}\n```", "```py\nnpm install --save-dev eslint-import-resolver-typescript\n```", "```py\n\"eslintConfig\": {\n  \"extends\": [...],\n  \"settings\": {\n    \"import/resolver\": {\n      \"typescript\": {}\n    }\n  }\n}\n```", "```py\nnpm install @mui/material @mui/icons-material @mui/lab @emotion/react @emotion/styled \n```", "```py\nnpm install @fontsource/roboto\n```", "```py\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\n```", "```py\nimport { useMemo } from \"react\";\nimport { PaletteMode } from \"@mui/material\";\nimport CssBaseline from \"@mui/material/CssBaseline\";\nimport useMediaQuery from \"@mui/material/useMediaQuery\";\nimport { createTheme, ThemeProvider as MuiThemeProvider } from \"@mui/material/styles\";\ninterface IProps {\n  children: React.ReactNode;\n}\nconst ThemeProvider = ({ children }: IProps) => {\n  const prefersDarkMode = useMediaQuery(\"(prefers-color-scheme:     dark)\"); \n  const theme = useMemo(\n    () => {\n      const palette = { \n        mode: (prefersDarkMode ? \"dark\" : \"light\") as           PaletteMode,\n      }; \n      return createTheme({ palette }); \n    }, \n    [prefersDarkMode] \n  );\n  return (\n    <MuiThemeProvider theme={theme}>\n      <CssBaseline enableColorScheme />\n      { children }\n    </MuiThemeProvider>\n  );\n};\nexport default ThemeProvider;\n```", "```py\nimport ThemeProvider from \"src/ThemeProvider\";\nconst App = () => {\n  return (\n    <ThemeProvider>\n    </ThemeProvider>\n  );\n}\n```", "```py\nimport React from \"react\";\nimport { render } from \"@testing-library/react\";\nimport App from \"./App\";\ntest(\"renders the app\", () => {\n  render(<App />);\n});\n```", "```py\nimport Container from \"@mui/material/Container\";\nconst App = () => {\n  return (\n    <ThemeProvider>\n      <Container maxWidth=\"md\">\n      </Container>\n    </ThemeProvider>\n  );\n}\n```", "```py\nnpm install react-helmet-async\n```", "```py\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nconst App = () => {\n  return (\n    <HelmetProvider>\n      <Helmet>\n        <title>Tozo</title>\n      </Helmet>\n      <ThemeProvider>\n        <Container maxWidth=\"md\">\n        </Container>\n      </ThemeProvider> \n    </HelmetProvider>\n  );\n}\n```", "```py\nimport Typography from \"@mui/material/Typography\";\nimport { Helmet } from \"react-helmet-async\";\ninterface IProps {\n  title: string;\n}\nconst Title = ({ title }: IProps) => (\n  <>\n    <Helmet>\n      <title>Tozo | {title}</title>\n    </Helmet>\n    <Typography component=\"h1\" variant=\"h5\">{title}    </Typography>\n  </>\n);\nexport default Title;\n```", "```py\nimport { createContext, useState } from \"react\";\n\ninterface IAuth {\n  authenticated: boolean;\n  setAuthenticated: (value: boolean) => void;\n}\n\nexport const AuthContext = createContext<IAuth>({\n  authenticated: true,\n  setAuthenticated: (value: boolean) => {},\n});\n\ninterface IProps {\n  children?: React.ReactNode;\n}\n\nexport const AuthContextProvider = ({ children }: IProps) => {\n  const [authenticated, setAuthenticated] = useState(true);\n\n  return (\n    <AuthContext.Provider \n      value={{ authenticated, setAuthenticated }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n};\n```", "```py\nimport { AuthContextProvider } from \"src/AuthContext\";\n\nconst App = () => {\n  return (\n    <AuthContextProvider>\n      <HelmetProvider>\n        <Helmet>\n          <title>Tozo</title>\n        </Helmet>\n        <ThemeProvider>\n          <Container maxWidth=\"md\">\n          </Container>\n        </ThemeProvider> \n      </HelmetProvider>\n    </AuthContextProvider>\n  );\n}\n```", "```py\nimport { AuthContext } from \"src/AuthContext\";\nconst { authenticated } = React.useContext(AuthContext);\n```", "```py\nnpm install react-router-dom\n```", "```py\nimport { BrowserRouter, Routes } from \"react-router-dom\";\nconst Router = () => (\n  <BrowserRouter>\n    <Routes>\n      {/* Place routes here */}\n    </Routes>\n  </BrowserRouter>\n); \nexport default Router;\n```", "```py\nimport Router from \"src/Router\";\n\nconst App = () => {\n  return (\n    <AuthContextProvider>\n      <HelmetProvider>\n        <Helmet>\n          <title>Tozo</title>\n        </Helmet>\n        <ThemeProvider>\n          <Container maxWidth=\"md\">\n            <Router />\n          </Container>\n        </ThemeProvider> \n      </HelmetProvider>\n    </AuthContextProvider>\n  );\n}\n```", "```py\nimport { useContext } from \"react\";\nimport { Navigate, useLocation } from \"react-router-dom\";\nimport { AuthContext } from \"src/AuthContext\";\ninterface IProps {\n  children: React.ReactNode;\n}\nconst RequireAuth = ({ children }: IProps) => {\n  const { authenticated } = useContext(AuthContext);\n  const location = useLocation();\n  if (authenticated) {\n    return <>{children}</>;\n  } else {\n    return <Navigate state={{ from: location }} to=\"/login/\" />;\n  }\n};\nexport default RequireAuth;\n```", "```py\n<Route \n  element={<RequireAuth><Page /></RequireAuth>} \n  path= \"/private/\" \n/>\n```", "```py\nimport { useEffect } from \"react\";\nimport { useLocation } from \"react-router\";\n\nconst ScrollToTop = () => {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n};\n\nexport default ScrollToTop;\n```", "```py\nimport ScrollToTop from \"src/components/ScrollToTop\";\n\nconst Router = () => (\n  <BrowserRouter>\n    <ScrollToTop />\n    <Routes>\n      {/* Place routes here */}\n    </Routes>\n  </BrowserRouter>\n);\n```", "```py\nwindow.scrollTo = (x, y) => {\n  document.documentElement.scrollTop = y;\n}\n```", "```py\nnpm install formik yup\n```", "```py\nimport { FieldMetaProps } from \"formik\";\nimport React from \"react\";\nexport const combineHelperText = <T, >(\n    helperText: React.ReactNode | string | undefined, \n    meta: FieldMetaProps<T>,\n) => {\n  if (Boolean(meta.error) && meta.touched) {\n    if (typeof helperText === \"string\") {\n      return `${meta.error}. ${helperText ?? \"\"}`;\n    } else {\n      return (<>{meta.error}. {helperText}</>);\n    }\n  } else {\n    return helperText;\n  }\n}\n```", "```py\nimport Checkbox from \"@mui/material/Checkbox\";\nimport FormControl from \"@mui/material/FormControl\";\nimport FormControlLabel from \"@mui/material/FormControlLabel\";\nimport FormHelperText from \"@mui/material/FormHelperText\";\nimport { FieldHookConfig, useField } from \"formik\";\nimport { combineHelperText } from \"src/utils\";\n\ntype IProps = FieldHookConfig<boolean> & {\n  fullWidth?: boolean;\n  helperText?: string;\n  label: string;\n  required?: boolean;\n};\n\nconst CheckboxField = (props: IProps) => {\n  const [field, meta] = useField<boolean>(props);\n\n  return (\n    <FormControl\n      component=\"fieldset\"\n      error={Boolean(meta.error) && meta.touched}\n      fullWidth={props.fullWidth}\n      margin=\"normal\"\n      required={props.required}\n    >\n      <FormControlLabel\n        control={<Checkbox {...field} checked={field.value} />}\n        label={props.label}\n      />\n      <FormHelperText>\n        {combineHelperText(props.helperText, meta)}\n      </FormHelperText>\n    </FormControl>\n  );\n};\n\nexport default CheckboxField;\n```", "```py\nnpm install @mui/x-date-pickers date-fns\n```", "```py\nimport TextField, { TextFieldProps } from \"@mui/material/TextField\";\nimport { AdapterDateFns } from \"@mui/x-date-pickers/AdapterDateFns\";\nimport { DatePicker } from \"@mui/x-date-pickers/DatePicker\";\nimport { LocalizationProvider } from \"@mui/x-date-pickers/LocalizationProvider\";\nimport { FieldHookConfig, useField } from \"formik\";\nimport { combineHelperText } from \"src/utils\";\n\nconst DateField = (\n  props: FieldHookConfig<Date | null> & TextFieldProps\n) => {\n  const [field, meta, helpers] = useField<Date | null>(props);\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <DatePicker\n        label={props.label}\n        value={field.value}\n        onChange={(newValue) => helpers.setValue(newValue)}\n        renderInput={(params) => (\n          <TextField \n            fullWidth={props.fullWidth}\n            {...params} \n            helperText={combineHelperText(props.helperText, meta)} \n          />\n        )}\n      />\n    </LocalizationProvider>\n  );\n}; \nexport default DateField;\n```", "```py\nimport TextField, { TextFieldProps } from \"@mui/material/TextField\";\nimport { FieldHookConfig, useField } from \"formik\";\nimport { combineHelperText } from \"src/utils\";\n\nconst EmailField = (props: FieldHookConfig<string> & TextFieldProps) => {\n  const [field, meta] = useField<string>(props);\n  return (\n    <TextField\n      {...props}\n      autoComplete=\"email\"\n      error={Boolean(meta.error) && meta.touched}\n      helperText={combineHelperText(props.helperText, meta)}\n      margin=\"normal\"\n      type=\"email\"\n      {...field}\n    />\n  );\n};\n\nexport default EmailField;\n```", "```py\nimport MUITextField, { TextFieldProps } from \"@mui/material/TextField\";\nimport { FieldHookConfig, useField } from \"formik\";\nimport { combineHelperText } from \"src/utils\";\n\nconst TextField = (props: FieldHookConfig<string> & TextFieldProps) => {\n  const [field, meta] = useField<string>(props);\n  return (\n    <MUITextField\n      {...props}\n      error={Boolean(meta.error) && meta.touched}\n      helperText={combineHelperText(props.helperText, meta)}\n      margin=\"normal\"\n      type=\"text\"\n      {...field}\n    />\n  );\n};\n\nexport default TextField;\n```", "```py\nimport IconButton from \"@mui/material/IconButton\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport TextField, { TextFieldProps } from \"@mui/material/TextField\";\nimport Visibility from \"@mui/icons-material/Visibility\";\nimport VisibilityOff from \"@mui/icons-material/VisibilityOff\";\nimport { FieldHookConfig, useField } from \"formik\";\nimport { useState } from \"react\";\nimport { combineHelperText } from \"src/utils\";\n\nconst PasswordField = (props: FieldHookConfig<string> & TextFieldProps) => {\n  const [field, meta] = useField<string>(props);\n  const [showPassword, setShowPassword] = useState(false);\n\n  return (\n    <TextField\n      {...props}\n      InputProps={{\n        endAdornment: (\n          <InputAdornment position=\"end\">\n            <IconButton\n              onClick={() => setShowPassword((value) =>                 !value)}\n              tabIndex={-1}\n            >\n              {showPassword ? <Visibility /> :                 <VisibilityOff />}\n            </IconButton>\n          </InputAdornment>\n        ),\n      }}\n      error={Boolean(meta.error) && meta.touched}\n      helperText={combineHelperText(props.helperText, meta)}\n      margin=\"normal\"\n      type={showPassword ? \"text\" : \"password\"}\n      {...field}\n    />\n  );\n};\n\nexport default PasswordField;\n```", "```py\nnpm install zxcvbn \nnpm install --save-dev @types/zxcvbn\n```", "```py\nconst scoreToDisplay = (score: number) => {\n  let progressColor = \"other.red\";\n  let helperText = \"Weak\";\n  switch (score) {\n    case 25:\n      progressColor = \"other.pink\";\n      break;\n    case 50:\n      progressColor = \"other.orange\";\n      break;\n    case 75:\n      progressColor = \"other.yellow\";\n      helperText = \"Good\";\n      break;\n    case 100:\n      progressColor = \"other.green\";\n      helperText = \"Strong\";\n      break;\n  }\n  return [progressColor, helperText];\n};\n```", "```py\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport { TextFieldProps } from \"@mui/material/TextField\";\nimport { FieldHookConfig, useField } from \"formik\";\nimport zxcvbn from \"zxcvbn\";\nimport PasswordField from \"src/components/PasswordField\";\nconst PasswordWithStrengthField = (\n  props: FieldHookConfig<string> & TextFieldProps,\n) => {\n  const [field] = useField<string>(props);\n  const result = zxcvbn(field.value ?? \"\");\n  const score = (result.score * 100) / 4;\n  const [progressColor, helperText] = scoreToDisplay(score);\n  return (\n    <>\n      <PasswordField {...props} helperText={helperText} />\n      <LinearProgress\n        sx={{\n          \"& .MuiLinearProgress-barColorPrimary\": {\n            backgroundColor: progressColor,\n          },\n          backgroundColor: \"action.selected\",\n          margin: \"0 4px 24px 4px\",\n        }}\n        value={score}\n        variant=\"determinate\"\n      />\n    </>\n  );\n};\nexport default PasswordWithStrengthField;\n```", "```py\nimport { TextFieldProps } from \"@mui/material/TextField\"; \nimport { lazy, Suspense } from \"react\";\nimport { FieldHookConfig } from \"formik\";\nimport PasswordField from \"src/components/PasswordField\";\nconst PasswordWithStrengthField = lazy( \n  () => import(\"src/components/PasswordWithStrengthField\"), \n);\nconst LazyPasswordWithStrengthField = (\n  props: FieldHookConfig<string> & TextFieldProps, \n) => (\n  <Suspense fallback={<PasswordField {...props} />}>\n    <PasswordWithStrengthField {...props} />\n  </Suspense>\n);\nexport default LazyPasswordWithStrengthField;\n```", "```py\nimport Button from \"@mui/material/Button\"; \nimport LoadingButton from \"@mui/lab/LoadingButton\"; \nimport Stack from \"@mui/material/Stack\";\nimport { Link } from \"react-router-dom\";\ninterface ILink {\n  label: string;\n  to: string;\n  state?: any;\n}\ninterface IProps {\n  disabled: boolean;\n  isSubmitting: boolean;\n  label: string;\n  links?: ILink[];\n}\nconst FormActions = ({ disabled, isSubmitting, label, links }: IProps) => (\n  <Stack direction=\"row\" spacing={1} sx={{ marginTop: 2 }}>\n    <LoadingButton\n      disabled={disabled}\n      loading={isSubmitting}\n      type=\"submit\"\n      variant=\"contained\"\n    > \n      {label}\n    </LoadingButton> \n    {(links ?? []).map(({ label, to, state }) => (\n      <Button \n        component={Link}\n        key={to}\n        state={state}\n        to={to}\n        variant=\"outlined\" \n      >\n        {label}\n      </Button>\n    ))}\n  </Stack>\n);\nexport default FormActions;\n```", "```py\nimport { formatISO } from \"date-fns\";\nimport * as yup from \"yup\";\nconst todoSchema = yup.object({\n  complete: yup.boolean().required(),\n  due: yup.date().nullable(),\n  id: yup.number().required().positive().integer(),\n  task: yup.string().trim().min(1).defined().strict(true), \n});\nexport class Todo {\n  complete: boolean;\n  due: Date | null;\n  id: number;\n  task: string;\n\n  constructor(data: any) {\n    const validatedData = todoSchema.validateSync(data);  \n    this.complete = validatedData.complete;\n    this.due = validatedData.due ?? null;\n    this.id = validatedData.id;\n    this.task = validatedData.task;\n  }\n\n  toJSON(): any {\n    return {\n      complete: this.complete,\n      due:\n        this.due !== null\n          ? formatISO(this.due, { representation: \"date\" })\n          : null,\n      id: this.id,\n      task: this.task,\n    };\n  }\n}\n```", "```py\nnpm install axios\n```", "```py\nnpm install @tanstack/react-query\n```", "```py\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nconst queryClient = new QueryClient();\n\nconst App => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthContextProvider>\n        <HelmetProvider>\n          <Helmet>\n            <title>Tozo</title>\n          </Helmet>\n          <ThemeProvider>\n            <Container maxWidth=\"md\">\n              <Router />\n            </Container>\n          </ThemeProvider> \n        </HelmetProvider>\n      </AuthContextProvider>\n    </QueryClientProvider>\n  );\n};\n```", "```py\nimport axios, { AxiosError } from \"axios\";\nimport { useContext } from \"react\";\nimport {\n  QueryFunction,\n  QueryFunctionContext,\n  QueryKey,\n  useQuery as useReactQuery,\n  UseQueryOptions,\n  UseQueryResult,\n} from \"@tanstack/react-query\";\n\nimport { AuthContext } from \"src/AuthContext\";\n\nconst MAX_FAILURES = 2;\n\nexport function useQuery<\n  TQueryFnData = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey,\n>(\n  queryKey: TQueryKey,\n  queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n  options?: UseQueryOptions<TQueryFnData, AxiosError, TData, TQueryKey>,\n): UseQueryResult<TData, AxiosError> {\n  const { setAuthenticated } = useContext(AuthContext);\n\n  return useReactQuery<TQueryFnData, AxiosError, TData, TQueryKey>(\n    queryKey,\n    async (context: QueryFunctionContext<TQueryKey>) => {\n      try {\n        return await queryFn(context);\n      } catch (error) {\n        if (axios.isAxiosError(error) && error.response?.status === 401) {\n          setAuthenticated(false);\n        }\n        throw error;\n      }\n    },\n    {\n      retry: (failureCount: number, error: AxiosError) =>\n        failureCount < MAX_FAILURES &&\n        (!error.response || error.response.status >= 500),\n      ...options,\n    },\n  );\n}\n```", "```py\nimport {\n  MutationFunction,\n  useMutation as useReactMutation,\n  UseMutationOptions,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nexport function useMutation<\n  TData = unknown,\n  TVariables = void,\n  TContext = unknown,\n>(\n  mutationFn: MutationFunction<TData, TVariables>,\n  options?: UseMutationOptions<TData, AxiosError, TVariables, TContext>,\n): UseMutationResult<TData, AxiosError, TVariables, TContext> {\n  const { setAuthenticated } = useContext(AuthContext);\n\n  return useReactMutation<TData, AxiosError, TVariables, TContext>(\n    async (variables: TVariables) => {\n      try {\n        return await mutationFn(variables);\n      } catch (error) {\n        if (axios.isAxiosError(error) && error.response?.status === 401) {\n          setAuthenticated(false);\n        }\n        throw error;\n      }\n    },\n    {\n      retry: (failureCount: number, error: AxiosError) =>\n        failureCount < MAX_FAILURES &&\n        (!error.response || error.response.status >= 500),\n      ...options,\n    },\n  );\n}\n```", "```py\nimport { useQuery } from \"src/queries\";\nconst Component = () => {\n  const { data } = useQuery(\n    [\"key\"], \n    async () => {\n      const response = await axios.get<any>(\"/\");\n      return response.data;\n    },\n  );\n  return (<>{ data }</>);\n};\n```", "```py\nimport { AlertColor } from \"@mui/material/Alert\";\nimport React, { createContext, useState } from \"react\";\n\nexport interface IToast {\n  category?: AlertColor;\n  key: number;\n  message: string;\n}\n\ninterface IToastContext {\n  addToast: (message: string, category: AlertColor | undefined) => void;\n  setToasts: React.Dispatch<React.SetStateAction<IToast[]>>;\n  toasts: IToast[];\n}\n\nexport const ToastContext = createContext<IToastContext>({\n  addToast: () => {},\n  setToasts: () => {},\n  toasts: [],\n});\n\ninterface IProps {\n  children?: React.ReactNode;\n}\n\nexport const ToastContextProvider = ({ children }: IProps) => {\n  const [toasts, setToasts] = useState<IToast[]>([]);\n\n  const addToast = (\n    message: string,\n    category: AlertColor | undefined = undefined,\n  ) => {\n    setToasts((prev) => [\n      ...prev,\n      {\n        category,\n        key: new Date().getTime(),\n        message,\n      },\n    ]);\n  };\n\n  return (\n    <ToastContext.Provider value={{ addToast, setToasts, toasts }}>\n      {children}\n    </ToastContext.Provider>\n  );\n};\n```", "```py\nimport { ToastContextProvider } from \"src/ToastContext\";\n\nconst App = () => {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <AuthContextProvider>\n        <HelmetProvider>\n          <Helmet>\n            <title>Tozo</title>\n          </Helmet>\n          <ThemeProvider>\n            <ToastContextProvider>\n              <Container maxWidth=\"md\">\n                <Router />\n              </Container>\n            </ToastContextProvider>\n          </ThemeProvider> \n        </HelmetProvider>\n      </AuthContextProvider>\n    </QueryClientProvider>\n  );\n}\n```", "```py\nimport Alert from \"@mui/material/Alert\"; \nimport Snackbar from \"@mui/material/Snackbar\";\nimport React, { useContext, useEffect, useState } from \"react\";\n\nimport { ToastContext, IToast } from \"src/ToastContext\";\n\nconst Toasts = () => {\n  const { toasts, setToasts } = useContext(ToastContext);\n  const [open, setOpen] = useState(false);\n  const [currentToast, setCurrentToast] = useState<IToast | undefined>();\n\n  useEffect(() => {\n    if (!open && toasts.length) {\n      setCurrentToast(toasts[0]);\n      setToasts((prev) => prev.slice(1));\n      setOpen(true);\n    }\n  }, [open, setCurrentToast, setOpen, setToasts, toasts]);\n\n  const onClose = (\n    event?: React.SyntheticEvent | Event, reason?: string\n  ) => {\n    if (reason !== \"clickaway\") {\n      setOpen(false);\n    }\n  };\n\n  return (\n    <Snackbar\n      anchorOrigin={{\n        horizontal: \"center\",\n        vertical: \"top\",\n      }}\n      autoHideDuration={6000}\n      key={currentToast?.key}\n      onClose={onClose}\n      open={open}\n      TransitionProps={{\n        onExited: () => setCurrentToast(undefined),\n      }}\n    >\n      <Alert\n        onClose={onClose}\n        severity={currentToast?.category}\n      >\n        {currentToast?.message}\n      </Alert>\n    </Snackbar>\n  );\n};\n\nexport default Toasts;\n```", "```py\nimport \"@fontsource/roboto/300.css\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\nimport Container from \"@mui/material/Container\";\nimport { HelmetProvider } from \"react-helmet-async\";\nimport { QueryClient, QueryClientProvider } from \"@tanstack/react-query\";\nimport { AuthContextProvider } from \"src/AuthContext\";\nimport Toasts from \"src/components/Toasts\";\nimport Router from \"src/Router\";\nimport ThemeProvider from \"src/ThemeProvider\";\nimport { ToastContextProvider } from \"src/ToastContext\";\nconst queryClient = new QueryClient();\nconst App = () => (\n  <QueryClientProvider client={queryClient}>\n    <AuthContextProvider>\n      <HelmetProvider>\n        <ThemeProvider>\n          <ToastContextProvider>\n            <Container maxWidth=\"md\">\n              <Toasts />\n              <Router />\n            </Container>\n          </ToastContextProvider>\n        </ThemeProvider>\n      </HelmetProvider>\n    </AuthContextProvider>\n  </QueryClientProvider>\n);\nexport default App;\n```"]