- en: Chapter 7. Django CMS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 7 章 Django CMS
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Creating templates for Django CMS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为 Django CMS 创建模板
- en: Structuring the page menu
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 构建页面菜单
- en: Converting an app to a CMS app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将应用转换为 CMS 应用
- en: Attaching your own navigation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加自己的导航
- en: Writing your own CMS plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写自己的 CMS 插件
- en: Adding new fields to the CMS page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向 CMS 页面添加新字段
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: Django CMS is an open source content management system that is based on Django
    and created by Divio AG, Switzerland. Django CMS takes care of a website's structure,
    provides navigation menus, makes it easy to edit page content in the frontend,
    and supports multiple languages in a website. You can also extend it according
    to your needs using the provided hooks. To create a website, you need to create
    a hierarchical structure of the pages, where each page has a template. Templates
    have placeholders that can be assigned different plugins with the content. Using
    special template tags, the menus can be generated out of the hierarchical page
    structure. The CMS takes care of URL mapping to specific pages.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Django CMS 是一个基于 Django 的开源内容管理系统，由瑞士的 Divio AG 创建。Django CMS 负责网站的架构，提供导航菜单，使在前端编辑页面内容变得容易，并支持网站的多语言。你还可以使用提供的钩子根据需要扩展它。要创建网站，你需要创建页面的层次结构，其中每个页面都有一个模板。模板有占位符，可以分配不同的插件来包含内容。使用特殊的模板标签，可以从层次页面结构生成菜单。CMS
    负责将 URL 映射到特定页面。
- en: In this chapter, we will look at Django CMS 3.1 from a developer's perspective.
    We will see what is necessary for the templates to function and take a look at
    the possible page structure for header and footer navigation. You will also learn
    how to attach the URL rules of an app to a CMS page tree node. Then, we will attach
    the custom navigation to the page menu and create our own CMS content plugins.
    Finally, you will learn how to add new fields to the CMS pages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将从开发者的角度查看 Django CMS 3.1。我们将了解模板正常运行所必需的内容，并查看头部和尾部导航的可能页面结构。你还将学习如何将应用的
    URL 规则附加到 CMS 页面树节点。然后，我们将自定义导航附加到页面菜单并创建我们自己的 CMS 内容插件。最后，你将学习如何向 CMS 页面添加新字段。
- en: Although in this book, I won't guide you through all the bits and pieces of
    using Django CMS; by the end of this chapter, you will be aware of its purpose
    and use. The rest can be learned from the official documentation at [http://docs.django-cms.org/en/develop/](http://docs.django-cms.org/en/develop/)
    and by trying out the frontend user interface of the CMS.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管在这本书中，我不会引导你了解使用 Django CMS 的所有细节；但到本章结束时，你将了解其目的和使用方法。其余内容可以通过官方文档在 [http://docs.django-cms.org/en/develop/](http://docs.django-cms.org/en/develop/)
    学习，也可以通过尝试 CMS 的前端用户界面来学习。
- en: Creating templates for Django CMS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为 Django CMS 创建模板
- en: For every page in your page structure, you need to choose a template from the
    list of templates that are defined in the settings. In this recipe, we will look
    at the minimum requirements for these templates.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 对于你页面结构中的每一页，你需要从在设置中定义的模板列表中选择一个模板。在这个菜谱中，我们将查看这些模板的最小要求。
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'If you want to start a new Django CMS project, execute the following commands
    in a virtual environment and answer all the prompted questions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要启动一个新的 Django CMS 项目，请在虚拟环境中执行以下命令并回答所有提示的问题：
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `project/myproject` is the path where the project will be created and
    `myproject` is the project name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`project/myproject` 是项目将被创建的路径，而 `myproject` 是项目名称。
- en: On the other hand, if you want to integrate Django CMS in an existing project,
    check the official documentation at [http://docs.django-cms.org/en/latest/how_to/install.html](http://docs.django-cms.org/en/latest/how_to/install.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果你想在现有项目中集成 Django CMS，请查看官方文档 [http://docs.django-cms.org/en/latest/how_to/install.html](http://docs.django-cms.org/en/latest/how_to/install.html)。
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will update the Bootstrap-powered `base.html` template so that it contains
    everything that Django CMS needs. Then, we will create and register two templates,
    `default.html` and `start.html`, to choose from for CMS pages:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更新由 Bootstrap 驱动的 `base.html` 模板，使其包含 Django CMS 所需的所有内容。然后，我们将创建并注册两个模板，`default.html`
    和 `start.html`，供 CMS 页面选择：
- en: 'First of all, we will update the base template that we created in the *Arranging
    the base.html template* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*, as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们将更新在[第4章](ch04.html "第4章。模板和JavaScript") *安排base.html模板*食谱中创建的基本模板，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we will create a `cms` directory under `templates` and add two templates
    for CMS pages: `default.html` for normal pages and `start.html` for the home page,
    as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将在`templates`目录下创建一个`cms`目录，并为CMS页面添加两个模板：`default.html`用于普通页面，`start.html`用于主页，如下所示：
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Lastly, we will set the paths of these two templates in the settings, as shown
    in the following:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将设置这两个模板的路径，如下所示：
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As usual, the `base.html` template is the main template that is extended by
    all the other templates. In this template, Django CMS uses the `{% render_block
    %}` template tag from the `django-sekizai` module to inject CSS and JavaScript
    in the templates that create a toolbar and other administration widgets in the
    frontend. We will insert the `{% cms_toolbar %}` template tag at the beginning
    of the `<body>` section—that's where the toolbar will be placed. We will use the
    `{% show_menu_below_id %}` template tag to render the header and footer menus
    from the specific page menu trees. Also, we will use the `{% language_chooser
    %}` template tag to render the language chooser that switches to the same page
    in different languages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如往常一样，`base.html`模板是所有其他模板扩展的主要模板。在这个模板中，Django CMS使用来自`django-sekizai`模块的`{%
    render_block %}`模板标签在创建前端工具栏和其他管理小部件的模板中注入CSS和JavaScript。我们将在`<body>`部分的开始处插入`{%
    cms_toolbar %}`模板标签——这就是工具栏将被放置的位置。我们将使用`{% show_menu_below_id %}`模板标签从特定的页面菜单树渲染头部和底部菜单。此外，我们还将使用`{%
    language_chooser %}`模板标签渲染语言选择器，该选择器可以在不同语言中切换到同一页面。
- en: The `default.html` and `start.html` templates that are defined in the `CMS_TEMPLATES`
    setting will be available as a choice when creating a CMS page. In these templates,
    for each area that needs to have dynamically entered content, add a `{% placeholder
    %}` template tag when you need page-specific content or `{% static_placeholder
    %}` when you need the content that is shared among different pages. Logged-in
    administrators can add content plugins to the placeholders when they switch from
    the **Live** mode to the **Draft** mode in the CMS toolbar and switch to the **Structure**
    section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在`CMS_TEMPLATES`设置中定义的`default.html`和`start.html`模板，在创建CMS页面时将作为选择项可用。在这些模板中，对于需要动态输入内容的每个区域，当需要页面特定内容时，添加`{%
    placeholder %}`模板标签；当需要在不同页面间共享的内容时，添加`{% static_placeholder %}`模板标签。登录管理员可以在CMS工具栏从**实时**模式切换到**草稿**模式，并切换到**结构**部分时，向占位符添加内容插件。
- en: See also
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Arranging the base.html template* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第4章](ch04.html "第4章。模板和JavaScript") *安排base.html模板*食谱'
- en: The *Structuring the page menu* recipe
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*页面菜单结构化*食谱'
- en: Structuring the page menu
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 页面菜单结构化
- en: In this recipe, we will discuss some guidelines about defining the tree structures
    for the pages of your website.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，我们将讨论一些关于定义您网站页面树结构的指南。
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'It is good practice to set the available languages for your website before
    creating the structure of your pages (although the Django CMS database structure
    also allows you to add new languages later). Besides `LANGUAGES`, make sure that
    you have `CMS_LANGUAGES` set in your settings. The `CMS_LANGUAGES` setting defines
    which languages should be active for each Django site, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建您页面结构之前设置网站可用的语言是一种良好的做法（尽管Django CMS数据库结构也允许您稍后添加新语言）。除了`LANGUAGES`之外，请确保您在设置中已设置`CMS_LANGUAGES`。`CMS_LANGUAGES`设置定义了每个Django站点应激活哪些语言，如下所示：
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: The page navigation is set in tree structures. The first tree is the main tree
    and, contrary to the other trees, the root node of the main tree is not reflected
    in the URL structure. The root node of this tree is the home page of the website.
    Usually, this page has a specific template, where you add the content aggregated
    from different apps; for example, a slideshow, actual news, newly registered users,
    latest tweets, or other latest or featured objects. For a convenient way to render
    items from different apps, check the *Creating a template tag to a QuerySet in
    a template* recipe in [Chapter 5](ch05.html "Chapter 5. Custom Template Filters
    and Tags"), *Custom Template Filters and Tags*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 页面导航是在树结构中设置的。第一棵树是主树，与其他树不同，主树的根节点不会反映在URL结构中。这个树的根节点是网站的首页。通常，这个页面有一个特定的模板，你在其中添加从不同应用程序聚合的内容；例如，幻灯片、实际新闻、新注册用户、最新推文或其他最新或特色对象。为了方便地从不同的应用程序渲染项目，请查看第5章
    *在模板中创建一个模板标签到QuerySet* 菜单中的 *自定义模板过滤器和标签*。
- en: If your website has multiple navigations such as a top, meta, and footer navigation,
    give an ID to the root node of each tree in the **Advanced** settings of the page.
    This ID will be used in the base template by the `{% show_menu_below_id %}` template
    tag. You can read more about this and other menu-related template tags in the
    official documentation at [http://docs.django-cms.org/en/latest/reference/navigation.html](http://docs.django-cms.org/en/latest/reference/navigation.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网站有多个导航，如顶部、元和页脚导航，请在页面的 **高级** 设置中为每个树的根节点分配一个ID。这个ID将在基础模板中通过 `{% show_menu_below_id
    %}` 模板标签使用。你可以在官方文档中了解更多关于此和其他与菜单相关的模板标签的信息，请参阅 [http://docs.django-cms.org/en/latest/reference/navigation.html](http://docs.django-cms.org/en/latest/reference/navigation.html)。
- en: The first tree defines the main structure of the website. If you want a page
    under the root-level URL, for example, `/en/search/` but not `/en/meta/search/`,
    put this page under the home page. If you don't want a page to be shown in the
    menu as it will be linked from an icon or widget, just hide it from the menu.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一棵树定义了网站的主结构。如果你想将页面放在根级URL下，例如，`/en/search/` 但不是 `/en/meta/search/`，请将此页面放在主页下。如果你不希望页面在菜单中显示，因为它将通过图标或小部件链接，只需将其从菜单中隐藏。
- en: The footer navigation usually shows different items than the top navigation
    with some of the items being repeated, for example, the page for developers will
    be shown only in the footer; whereas, the page for news will be shown in both
    header and footer. For all the repeated items, just create a page with the **Redirect**
    setting in the advanced settings of the page and set it to the original page in
    the main tree. By default, when you create a secondary tree structure, all pages
    under the root of that tree will include the slug of the root page in their URL
    paths. If you want to skip the slug of the root in the URL path, you will need
    to set the **Overwrite URL** setting in the advanced settings of the page. For
    example, the developers page should be under `/en/developers/` and not `/en/secondary/developers/`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 页脚导航通常显示与顶部导航不同的项目，其中一些项目被重复，例如，开发者页面仅在页脚中显示；而新闻页面将在页眉和页脚中显示。对于所有重复的项目，只需在页面的高级设置中创建一个带有
    **重定向** 设置的页面，并将其设置为在主树中的原始页面。默认情况下，当你创建一个二级树结构时，该树根下的所有页面都将包括根页面的slug在它们的URL路径中。如果你想跳过URL路径中的根页面的slug，你需要在页面的高级设置中设置
    **覆盖URL** 设置。例如，开发者页面应该在 `/en/developers/` 下，而不是 `/en/secondary/developers/`。
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'Finally, your page structure will look similar to the following image (of course,
    the page structure can be much more complex too):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你的页面结构将类似于以下图像（当然，页面结构也可以更复杂）：
- en: '![How it works...](img/B04912_07_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_07_01.jpg)'
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a template tag to load a QuerySet in a template* recipe in [Chapter
    5](ch05.html "Chapter 5. Custom Template Filters and Tags"), *Custom Template
    Filters and Tags*
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第5章 *自定义模板过滤器和标签* 的 *在模板中创建一个模板标签来加载QuerySet* 菜单中，*自定义模板过滤器和标签*
- en: The *Creating templates for Django CMS* recipe
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为Django CMS创建模板* 菜单'
- en: The *Attaching your own navigation* recipe
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*附加您自己的导航* 菜单'
- en: Converting an app to a CMS app
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序转换为CMS应用程序
- en: The simplest Django CMS website will have the whole page tree created using
    administration interface. However, for real-world cases, you will probably need
    to show forms or lists of objects under some page nodes. If you have created an
    app that is responsible for some type of objects in your website, such as `movies`,
    you can easily convert it to a Django CMS app and attach it to one of the pages.
    This will ensure that the root URL of the app is translatable and the menu item
    is highlighted when selected. In this recipe, we will convert the `movies` app
    to a CMS app.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 简单的Django CMS网站将使用管理界面创建整个页面树。然而，对于现实世界的案例，您可能需要在某些页面节点下显示表单或对象列表。如果您已经创建了一个负责您网站中某些类型对象的应用，例如`movies`，您可以轻松地将它转换为Django
    CMS应用并将其附加到一个页面上。这将确保应用的根URL是可翻译的，并且在选择菜单项时菜单项会被突出显示。在本教程中，我们将把`movies`应用转换为CMS应用。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `movies` app that we created in the *Filtering object lists*
    recipe in [Chapter 3](ch03.html "Chapter 3. Forms and Views"), *Forms and Views*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从在[第3章](ch03.html "第3章。表单和视图")的*过滤对象列表*教程中创建的`movies`应用开始，*表单和视图*。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to convert a usual `movies` Django app to a Django CMS app:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤将常规`movies`Django应用转换为Django CMS应用：
- en: 'First of all, remove or comment out the inclusion of the URL configuration
    of the app as it will be included by an apphook in Django CMS, as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，删除或注释掉应用的URL配置的包含，因为它将由Django CMS中的apphook包含，如下所示：
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a `cms_app.py` file in the `movies` directory and create `MoviesApphook`
    there, as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`movies`目录下创建一个`cms_app.py`文件，并在其中创建`MoviesApphook`，如下所示：
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Set the newly created apphook in the settings, as shown in the following:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置中设置新创建的apphook，如下所示：
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, in all the movie templates, change the first line to extend from the
    template of the current CMS page instead of `base.html`, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，在所有电影模板中，将第一行改为从当前CMS页面的模板扩展，而不是`base.html`，如下所示：
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Apphooks are the interfaces that join the URL configuration of apps to the CMS
    pages. Apphooks need to extend from `CMSApp`. To define the name, which will be
    shown in the **Application** selection list under the **Advanced** settings of
    a page, put the path of the apphook in the `CMS_APPHOOKS` project setting and
    restart the web server; the apphook will appear as one of the applications in
    the advanced page settings. After selecting an application for a page, you need
    to restart the server for the URLs to take effect.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Apphooks是连接应用URL配置到CMS页面的接口。Apphooks需要从`CMSApp`扩展。为了定义将在页面**高级**设置下的**应用**选择列表中显示的名称，将apphook的路径放入`CMS_APPHOOKS`项目设置中，并重新启动Web服务器；apphook将作为高级页面设置中的一个应用出现。在选择页面应用后，您需要重新启动服务器以使URL生效。
- en: The templates of the app should extend the page template if you want them to
    contain the placeholders or attributes of the page, for example, the `title` or
    the `description` meta tag.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您希望应用的模板包含页面的占位符或属性，例如`title`或`description`元标签，则应用的模板应该扩展页面模板。
- en: See also
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Filtering object lists* recipe in [Chapter 3](ch03.html "Chapter 3. Forms
    and Views"), *Forms and Views*
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第3章](ch03.html "第3章。表单和视图")的*过滤对象列表*教程中，*表单和视图*的*过滤对象列表*教程
- en: The *Attaching your own navigation* recipe
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*附加自己的导航*教程'
- en: Attaching your own navigation
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 附加自己的导航
- en: Once you have an app hooked in the CMS pages, all the URL paths under the page
    node will be controlled by the `urls.py` file of the app. To add some menu items
    under this page, you need to add a dynamical branch of navigation to the page
    tree. In this recipe, we will improve the `movies` app and add new navigation
    items under the **Movies** page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您的应用被钩接到CMS页面，该页面节点下的所有URL路径将由该应用的`urls.py`文件控制。要在该页面下添加一些菜单项，您需要向页面树中添加一个动态的导航分支。在本教程中，我们将改进`movies`应用，并在**电影**页面下添加新的导航项。
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Let''s say that we have a URL configuration for different lists of movies:
    editor''s picks, commercial movies, and independent movies, as shown in the following
    code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们有一个针对不同电影列表的URL配置：编辑精选、商业电影和独立电影，如下面的代码所示：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these two steps to attach the **Editor''s Picks**, **Commercial Movies**,
    and **Independent Movies** menu choices to the navigational menu under the **Movies**
    page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下两个步骤将**编辑精选**、**商业电影**和**独立电影**菜单选项附加到**电影**页面下的导航菜单：
- en: 'Create the `menu.py` file in the `movies` app and add the following `MoviesMenu`
    class, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`movies`应用中创建一个`menu.py`文件，并添加以下`MoviesMenu`类，如下所示：
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Restart the web server and then edit the **Advanced** settings of the **Movies**
    page and select **Movies Menu** for the **Attached** menu setting.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动Web服务器，然后编辑**电影**页面的**高级**设置，并选择**附加**菜单设置中的**电影菜单**。
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'In the frontend, you will see the new menu items attached to the **Movies**
    page, as shown in the following image:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端，您将看到附加到**电影**页面的新菜单项，如下面的图片所示：
- en: '![How it works...](img/B04912_07_02.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B04912_07_02.jpg)'
- en: 'Dynamic menus that are attachable to pages need to extend `CMSAttachMenu`,
    define the name by which they will be selected, and define the `get_nodes()` method
    that returns a list of `NavigationNode` objects. The `NavigationNode` class takes
    at least three parameters: the title of the menu item, the URL path of the menu
    item, and the ID of the node. The IDs can be chosen freely with the only requirement
    being that they have to be unique among this attached menu. The other optional
    parameters are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 可附加到页面的动态菜单需要扩展`CMSAttachMenu`，定义它们将被选中的名称，并定义返回`NavigationNode`对象列表的`get_nodes()`方法。`NavigationNode`类至少需要三个参数：菜单项的标题、菜单项的URL路径和节点的ID。ID可以自由选择，唯一的要求是它们必须在这个附加菜单中是唯一的。其他可选参数如下：
- en: '`parent_id`: This is the ID of the parent node if you want to create a hierarchical
    dynamical menu'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent_id`：如果您想创建一个层次动态菜单，这是父节点的ID'
- en: '`parent_namespace`: This is the name of another menu if this node is to be
    attached to a different menu tree, for example, the name of this menu is "`MoviesMenu`"'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`parent_namespace`：如果这个节点要附加到不同的菜单树，这是另一个菜单的名称，例如，这个菜单的名称是"`MoviesMenu`"'
- en: '`attr`: This is a dictionary of the additional attributes that can be used
    in a template or menu modifier'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`attr`：这是一个字典，包含可以在模板或菜单修改器中使用的附加属性'
- en: '`visible`: This sets whether or not the menu item should be visible'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`visible`：这设置菜单项是否可见'
- en: For other examples of attachable menus, refer to the official documentation
    at [https://django-cms.readthedocs.org/en/latest/how_to/menus.html](https://django-cms.readthedocs.org/en/latest/how_to/menus.html).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他可附加菜单的示例，请参考官方文档中的[https://django-cms.readthedocs.org/en/latest/how_to/menus.html](https://django-cms.readthedocs.org/en/latest/how_to/menus.html)。
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Structuring the page menu* recipe
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*结构化页面菜单*菜谱'
- en: The *Converting an app to a CMS app* recipe
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*将应用转换为CMS应用*菜谱'
- en: Writing your own CMS plugin
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写自己的CMS插件
- en: Django CMS comes with a lot of content plugins that can be used in template
    placeholders, such as the text, flash, picture, and Google map plugins. However,
    for more structured and better styled content, you will need your own custom plugins,
    which are not too difficult to implement. In this recipe, we will see how to create
    a new plugin and have a custom layout for its data, depending on the chosen template
    of the page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: Django CMS自带许多内容插件，可以在模板占位符中使用，例如文本、Flash、图片和谷歌地图插件。然而，为了获得更结构化和更好的样式内容，你需要自己的自定义插件，这并不太难实现。在这个菜谱中，我们将看到如何创建一个新的插件，并为其数据创建一个自定义布局，这取决于页面选择的模板。
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's create an `editorial` app and mention it in the `INSTALLED_APPS` setting.
    Also, we will need the `cms/magazine.html` template that was created and mentioned
    in the `CMS_TEMPLATES` setting; you can simply duplicate the `cms/default.html`
    template for this.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个`editorial`应用，并在`INSTALLED_APPS`设置中提及它。此外，我们还需要`cms/magazine.html`模板，该模板已在`CMS_TEMPLATES`设置中创建和提及；您可以简单地复制`cms/default.html`模板来完成此操作。
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'To create the `EditorialContent` plugin, follow these steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建`EditorialContent`插件，请按照以下步骤操作：
- en: 'In the `models.py` file of the newly created app, add the `EditorialContent`
    model extending from `CMSPlugin`. The `EditorialContent` model will have the following
    fields: title, subtitle, description, website, image, image caption, and a CSS
    class:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在新创建的应用的`models.py`文件中，添加一个继承自`CMSPlugin`的`EditorialContent`模型。`EditorialContent`模型将包含以下字段：标题、副标题、描述、网站、图片、图片标题以及一个CSS类：
- en: '[PRE11]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the same app, create a `cms_plugins.py` file and add a `EditorialContentPlugin`
    class extending `CMSPluginBase`. This class is a little bit like `ModelAdmin`—it
    defines the appearance of administration settings for the plugin:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一个应用中，创建一个`cms_plugins.py`文件，并添加一个继承自`CMSPluginBase`的`EditorialContentPlugin`类。这个类有点像`ModelAdmin`——它定义了插件的行政设置的外观：
- en: '[PRE12]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To specify which plugins go to which placeholders, you have to define the `CMS_PLACEHOLDER_CONF`
    setting. You can also define the extra context for the templates of the plugins
    that are rendered in a specific placeholder. Let''s allow `EditorialContentPlugin`
    for the `main_content` placeholder and set the `editorial_content_template` context
    variable for the `main_content` placeholder in the `cms/magazine.html` template,
    as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要指定哪些插件放入哪些占位符，你必须定义`CMS_PLACEHOLDER_CONF`设置。你还可以为在特定占位符中渲染的插件的模板定义额外的上下文。让我们允许`EditorialContentPlugin`用于`main_content`占位符，并在`cms/magazine.html`模板中为`main_content`占位符设置`editorial_content_template`上下文变量，如下所示：
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we will create two templates. One of them will be the `editorial_content.html`
    template. It checks whether the `editorial_content_template` context variable
    exists. If the variable exists, it is included. Otherwise, it shows the default
    layout for editorial content:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将创建两个模板。其中一个将是`editorial_content.html`模板。它检查`editorial_content_template`上下文变量是否存在。如果变量存在，则包含它。否则，显示编辑内容的默认布局：
- en: '[PRE14]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The second template is a specific template for the `EditorialContent` plugin
    in the `cms/magazine.html` template. There''s nothing too fancy here, just an
    additional Bootstrap-specific `well` CSS class for the container to make the plugin
    stand out:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 第二个模板是`cms/magazine.html`模板中`EditorialContent`插件的特定模板。这里没有什么特别之处，只是为容器添加了一个额外的
    Bootstrap 特定的`well` CSS 类，使插件更加突出：
- en: '[PRE15]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you go to the **Draft** mode of any CMS page and switch to the **Structure**
    section, you can add the **Editorial Content** plugin to a placeholder. The content
    of this plugin will be rendered with a specified template and it can also be customized,
    depending on the template of the page where the plugin is chosen. For example,
    choose the `cms/magazine.html` template for the **News** page and then add the
    **Editorial Content** plugin. The **News** page will look similar to the following
    screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你进入任何 CMS 页面的**草稿**模式并切换到**结构**部分，你可以在占位符中添加**编辑内容**插件。此插件的内容将使用指定的模板进行渲染，并且可以根据插件选择的页面模板进行自定义。例如，为**新闻**页面选择`cms/magazine.html`模板，然后添加**编辑内容**插件。**新闻**页面将类似于以下截图：
- en: '![How it works...](img/B04912_07_03.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B04912_07_03.jpg)'
- en: Here, the **Test Title** with an image and description is the custom plugin
    inserted in the `main_content` placeholder in the `magazine.html` page template.
    If the page template was different, the plugin would be rendered without the Bootstrap-specific
    `well` CSS class; therefore, it would not have a gray background.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，带有图片和描述的**测试标题**是插入到`magazine.html`页面模板中的`main_content`占位符中的自定义插件。如果页面模板不同，插件将不会渲染具有
    Bootstrap 特定的`well` CSS 类；因此，它不会有灰色背景。
- en: See also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating templates for Django CMS* recipe
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为 Django CMS 创建模板* 食谱'
- en: The *Structuring the page menu* recipe
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*结构化页面菜单* 食谱'
- en: Adding new fields to the CMS page
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向 CMS 页面添加新字段
- en: CMS pages have several multilingual fields such as title, slug, menu title,
    page title, description meta tag, and overwrite URL. They also have several common
    nonlanguage-specific fields such as template, ID used in template tags, attached
    application, and attached menu. However, that might not be enough for more complex
    websites. Thankfully, Django CMS features a manageable mechanism to add new database
    fields for CMS pages. In this recipe, you will see how to add fields for the CSS
    classes for the navigational menu items and page body.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: CMS 页面有多个多语言字段，如标题、别名、菜单标题、页面标题、描述元标签和覆盖 URL。它们还有几个常见的非语言特定字段，如模板、在模板标签中使用的
    ID、附加应用和附加菜单。然而，这可能对于更复杂的网站来说还不够。幸运的是，Django CMS 提供了一种可管理的机制来为 CMS 页面添加新的数据库字段。在本食谱中，你将了解如何为导航菜单项和页面主体的
    CSS 类添加字段。
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's create the `cms_extensions` app and put it under `INSTALLED_APPS` in the
    settings.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建`cms_extensions`应用并将其放在设置中的`INSTALLED_APPS`下。
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To create a CMS page extension with the CSS class fields for the navigational
    menu items and page body, follow these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建具有导航菜单项和页面主体 CSS 类字段的 CMS 页面扩展，请按照以下步骤操作：
- en: 'In the `models.py` file, create a `CSSExtension` class extending `PageExtension`
    and put fields for the menu item''s CSS class and `<body>` CSS class, as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`models.py`文件中，创建一个扩展`PageExtension`的`CSSExtension`类，并为菜单项的 CSS 类和`<body>`
    CSS 类添加字段，如下所示：
- en: '[PRE16]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `admin.py` file, let''s add administration options for the `CSSExtension`
    model that we just created:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `admin.py` 文件中，让我们为刚刚创建的 `CSSExtension` 模型添加管理选项：
- en: '[PRE17]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we need to show the CSS extension in the toolbar for each page. This
    can be done by putting the following code in the `cms_toolbar.py` file of the
    app:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要在每个页面的工具栏中显示 CSS 扩展。这可以通过在应用的 `cms_toolbar.py` 文件中放置以下代码来完成：
- en: '[PRE18]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This code checks whether the user has the permission to change the current page,
    and if so, it loads the page menu from the current toolbar and adds a new menu
    item, CSS, with the link to create or edit `CSSExtension`.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此代码检查用户是否有更改当前页面的权限，如果有，它将从当前工具栏加载页面菜单，并添加一个新的菜单项，CSS，带有创建或编辑 `CSSExtension`
    的链接。
- en: 'As we want to access the CSS extension in the navigation menu in order to attach
    a CSS class, we need to create a menu modifier in the `menu.py` file of the same
    app:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们想在导航菜单中访问 CSS 扩展以附加 CSS 类，我们需要在相同应用的 `menu.py` 文件中创建一个菜单修改器：
- en: '[PRE19]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we will add the body CSS class to the `<body>` element in the `base.html`
    template, as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将把主体 CSS 类添加到 `base.html` 模板中的 `<body>` 元素，如下所示：
- en: '[PRE20]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Lastly, we will modify the `menu.html` file, which is the default template
    for the navigation menu, and add the menu item''s CSS class as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将修改 `menu.html` 文件，这是导航菜单的默认模板，并添加菜单项的 CSS 类，如下所示：
- en: '[PRE21]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `PageExtension` class is a model mixin with a one-to-one relationship with
    the `Page` model. To be able to administrate the custom extension model in Django
    CMS, there is a specific `PageExtensionAdmin` class to extend. Then, in the `cms_toolbar.py`
    file, we will create the `CSSExtensionToolbar` class, inheriting from the `CMSToolbar`
    class, to create an item in the Django CMS toolbar. In the `populate()` method,
    we will perform the general routine to check the page permissions and then we
    will add a CSS menu item to the toolbar.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageExtension` 类是一个与 `Page` 模型具有一对一关系的模型混入。为了能够在 Django CMS 中管理自定义扩展模型，有一个特定的
    `PageExtensionAdmin` 类可以扩展。然后，在 `cms_toolbar.py` 文件中，我们将创建 `CSSExtensionToolbar`
    类，继承自 `CMSToolbar` 类，以在 Django CMS 工具栏中创建一个项。在 `populate()` 方法中，我们将执行常规的检查页面权限的流程，然后我们将向工具栏中添加一个
    CSS 菜单项。'
- en: 'If the administrator has the permission to edit the page, then they will see
    a **CSS** option in the toolbar under the **Page** menu item, as shown in the
    following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果管理员有编辑页面的权限，那么他们将在 **页面** 菜单项下看到工具栏中的 **CSS** 选项，如下面的截图所示：
- en: '![How it works...](img/B04912_07_04.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B04912_07_04.jpg)'
- en: 'When the administrator clicks on the new **CSS** menu item, a pop-up window
    opens and they can select the **CSS** classes for the navigation menu item and
    body, as shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当管理员点击新的 **CSS** 菜单项时，会弹出一个窗口，他们可以从中选择导航菜单项和主体的 **CSS** 类，如下面的截图所示：
- en: '![How it works...](img/B04912_07_05.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B04912_07_05.jpg)'
- en: 'To show a specific CSS class from the `Page` extension in the navigation menu,
    we need to attach the `CSSExtension` object to the navigation items accordingly.
    Then, these objects can be accessed in the `menu.html` template as `{{ child.cssextension
    }}`. In the end, you will have some navigation menu items highlighted, such as
    the **Music** item shown here (depending on your CSS):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要在导航菜单中显示来自 `Page` 扩展的特定 CSS 类，我们需要相应地将 `CSSExtension` 对象附加到导航项上。然后，这些对象可以在
    `menu.html` 模板中以 `{{ child.cssextension }}` 的形式访问。最后，你将有一些导航菜单项被突出显示，例如这里显示的 **音乐**
    项（取决于你的 CSS）：
- en: '![How it works...](img/B04912_07_06.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B04912_07_06.jpg)'
- en: To show a specific CSS class for `<body>` of the current page is much simpler.
    We can use `{{ request.current_page.cssextension.body_css_class }}` right away.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 显示当前页面 `<body>` 的特定 CSS 类要简单得多。我们可以立即使用 `{{ request.current_page.cssextension.body_css_class
    }}`。
- en: See also
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating templates for Django CMS* recipe
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为 Django CMS 创建模板* 的食谱'
