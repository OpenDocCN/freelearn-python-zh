- en: Chapter 7. Django CMS
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Creating templates for Django CMS
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring the page menu
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting an app to a CMS app
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attaching your own navigation
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your own CMS plugin
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new fields to the CMS page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django CMS is an open source content management system that is based on Django
    and created by Divio AG, Switzerland. Django CMS takes care of a website's structure,
    provides navigation menus, makes it easy to edit page content in the frontend,
    and supports multiple languages in a website. You can also extend it according
    to your needs using the provided hooks. To create a website, you need to create
    a hierarchical structure of the pages, where each page has a template. Templates
    have placeholders that can be assigned different plugins with the content. Using
    special template tags, the menus can be generated out of the hierarchical page
    structure. The CMS takes care of URL mapping to specific pages.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will look at Django CMS 3.1 from a developer's perspective.
    We will see what is necessary for the templates to function and take a look at
    the possible page structure for header and footer navigation. You will also learn
    how to attach the URL rules of an app to a CMS page tree node. Then, we will attach
    the custom navigation to the page menu and create our own CMS content plugins.
    Finally, you will learn how to add new fields to the CMS pages.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: Although in this book, I won't guide you through all the bits and pieces of
    using Django CMS; by the end of this chapter, you will be aware of its purpose
    and use. The rest can be learned from the official documentation at [http://docs.django-cms.org/en/develop/](http://docs.django-cms.org/en/develop/)
    and by trying out the frontend user interface of the CMS.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Creating templates for Django CMS
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: For every page in your page structure, you need to choose a template from the
    list of templates that are defined in the settings. In this recipe, we will look
    at the minimum requirements for these templates.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to start a new Django CMS project, execute the following commands
    in a virtual environment and answer all the prompted questions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-16
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Here, `project/myproject` is the path where the project will be created and
    `myproject` is the project name.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if you want to integrate Django CMS in an existing project,
    check the official documentation at [http://docs.django-cms.org/en/latest/how_to/install.html](http://docs.django-cms.org/en/latest/how_to/install.html).
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will update the Bootstrap-powered `base.html` template so that it contains
    everything that Django CMS needs. Then, we will create and register two templates,
    `default.html` and `start.html`, to choose from for CMS pages:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we will update the base template that we created in the *Arranging
    the base.html template* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*, as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-22
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Then, we will create a `cms` directory under `templates` and add two templates
    for CMS pages: `default.html` for normal pages and `start.html` for the home page,
    as follows:'
  id: totrans-23
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-24
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Lastly, we will set the paths of these two templates in the settings, as shown
    in the following:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How it works...
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As usual, the `base.html` template is the main template that is extended by
    all the other templates. In this template, Django CMS uses the `{% render_block
    %}` template tag from the `django-sekizai` module to inject CSS and JavaScript
    in the templates that create a toolbar and other administration widgets in the
    frontend. We will insert the `{% cms_toolbar %}` template tag at the beginning
    of the `<body>` section—that's where the toolbar will be placed. We will use the
    `{% show_menu_below_id %}` template tag to render the header and footer menus
    from the specific page menu trees. Also, we will use the `{% language_chooser
    %}` template tag to render the language chooser that switches to the same page
    in different languages.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The `default.html` and `start.html` templates that are defined in the `CMS_TEMPLATES`
    setting will be available as a choice when creating a CMS page. In these templates,
    for each area that needs to have dynamically entered content, add a `{% placeholder
    %}` template tag when you need page-specific content or `{% static_placeholder
    %}` when you need the content that is shared among different pages. Logged-in
    administrators can add content plugins to the placeholders when they switch from
    the **Live** mode to the **Draft** mode in the CMS toolbar and switch to the **Structure**
    section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Arranging the base.html template* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Structuring the page menu* recipe
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structuring the page menu
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will discuss some guidelines about defining the tree structures
    for the pages of your website.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'It is good practice to set the available languages for your website before
    creating the structure of your pages (although the Django CMS database structure
    also allows you to add new languages later). Besides `LANGUAGES`, make sure that
    you have `CMS_LANGUAGES` set in your settings. The `CMS_LANGUAGES` setting defines
    which languages should be active for each Django site, as follows:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How to do it...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The page navigation is set in tree structures. The first tree is the main tree
    and, contrary to the other trees, the root node of the main tree is not reflected
    in the URL structure. The root node of this tree is the home page of the website.
    Usually, this page has a specific template, where you add the content aggregated
    from different apps; for example, a slideshow, actual news, newly registered users,
    latest tweets, or other latest or featured objects. For a convenient way to render
    items from different apps, check the *Creating a template tag to a QuerySet in
    a template* recipe in [Chapter 5](ch05.html "Chapter 5. Custom Template Filters
    and Tags"), *Custom Template Filters and Tags*.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 页面导航是在树结构中设置的。第一棵树是主树，与其他树不同，主树的根节点不会反映在URL结构中。这个树的根节点是网站的首页。通常，这个页面有一个特定的模板，你在其中添加从不同应用程序聚合的内容；例如，幻灯片、实际新闻、新注册用户、最新推文或其他最新或特色对象。为了方便地从不同的应用程序渲染项目，请查看第5章
    *在模板中创建一个模板标签到QuerySet* 菜单中的 *自定义模板过滤器和标签*。
- en: If your website has multiple navigations such as a top, meta, and footer navigation,
    give an ID to the root node of each tree in the **Advanced** settings of the page.
    This ID will be used in the base template by the `{% show_menu_below_id %}` template
    tag. You can read more about this and other menu-related template tags in the
    official documentation at [http://docs.django-cms.org/en/latest/reference/navigation.html](http://docs.django-cms.org/en/latest/reference/navigation.html).
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你的网站有多个导航，如顶部、元和页脚导航，请在页面的 **高级** 设置中为每个树的根节点分配一个ID。这个ID将在基础模板中通过 `{% show_menu_below_id
    %}` 模板标签使用。你可以在官方文档中了解更多关于此和其他与菜单相关的模板标签的信息，请参阅 [http://docs.django-cms.org/en/latest/reference/navigation.html](http://docs.django-cms.org/en/latest/reference/navigation.html)。
- en: The first tree defines the main structure of the website. If you want a page
    under the root-level URL, for example, `/en/search/` but not `/en/meta/search/`,
    put this page under the home page. If you don't want a page to be shown in the
    menu as it will be linked from an icon or widget, just hide it from the menu.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 第一棵树定义了网站的主结构。如果你想将页面放在根级URL下，例如，`/en/search/` 但不是 `/en/meta/search/`，请将此页面放在主页下。如果你不希望页面在菜单中显示，因为它将通过图标或小部件链接，只需将其从菜单中隐藏。
- en: The footer navigation usually shows different items than the top navigation
    with some of the items being repeated, for example, the page for developers will
    be shown only in the footer; whereas, the page for news will be shown in both
    header and footer. For all the repeated items, just create a page with the **Redirect**
    setting in the advanced settings of the page and set it to the original page in
    the main tree. By default, when you create a secondary tree structure, all pages
    under the root of that tree will include the slug of the root page in their URL
    paths. If you want to skip the slug of the root in the URL path, you will need
    to set the **Overwrite URL** setting in the advanced settings of the page. For
    example, the developers page should be under `/en/developers/` and not `/en/secondary/developers/`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 页脚导航通常显示与顶部导航不同的项目，其中一些项目被重复，例如，开发者页面仅在页脚中显示；而新闻页面将在页眉和页脚中显示。对于所有重复的项目，只需在页面的高级设置中创建一个带有
    **重定向** 设置的页面，并将其设置为在主树中的原始页面。默认情况下，当你创建一个二级树结构时，该树根下的所有页面都将包括根页面的slug在它们的URL路径中。如果你想跳过URL路径中的根页面的slug，你需要在页面的高级设置中设置
    **覆盖URL** 设置。例如，开发者页面应该在 `/en/developers/` 下，而不是 `/en/secondary/developers/`。
- en: How it works...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'Finally, your page structure will look similar to the following image (of course,
    the page structure can be much more complex too):'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，你的页面结构将类似于以下图像（当然，页面结构也可以更复杂）：
- en: '![How it works...](img/B04912_07_01.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_07_01.jpg)'
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating a template tag to load a QuerySet in a template* recipe in [Chapter
    5](ch05.html "Chapter 5. Custom Template Filters and Tags"), *Custom Template
    Filters and Tags*
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在第5章 *自定义模板过滤器和标签* 的 *在模板中创建一个模板标签来加载QuerySet* 菜单中，*自定义模板过滤器和标签*
- en: The *Creating templates for Django CMS* recipe
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为Django CMS创建模板* 菜单'
- en: The *Attaching your own navigation* recipe
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*附加您自己的导航* 菜单'
- en: Converting an app to a CMS app
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将应用程序转换为CMS应用程序
- en: The simplest Django CMS website will have the whole page tree created using
    administration interface. However, for real-world cases, you will probably need
    to show forms or lists of objects under some page nodes. If you have created an
    app that is responsible for some type of objects in your website, such as `movies`,
    you can easily convert it to a Django CMS app and attach it to one of the pages.
    This will ensure that the root URL of the app is translatable and the menu item
    is highlighted when selected. In this recipe, we will convert the `movies` app
    to a CMS app.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the `movies` app that we created in the *Filtering object lists*
    recipe in [Chapter 3](ch03.html "Chapter 3. Forms and Views"), *Forms and Views*.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to convert a usual `movies` Django app to a Django CMS app:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, remove or comment out the inclusion of the URL configuration
    of the app as it will be included by an apphook in Django CMS, as follows:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Create a `cms_app.py` file in the `movies` directory and create `MoviesApphook`
    there, as follows:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Set the newly created apphook in the settings, as shown in the following:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Finally, in all the movie templates, change the first line to extend from the
    template of the current CMS page instead of `base.html`, as follows:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How it works...
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apphooks are the interfaces that join the URL configuration of apps to the CMS
    pages. Apphooks need to extend from `CMSApp`. To define the name, which will be
    shown in the **Application** selection list under the **Advanced** settings of
    a page, put the path of the apphook in the `CMS_APPHOOKS` project setting and
    restart the web server; the apphook will appear as one of the applications in
    the advanced page settings. After selecting an application for a page, you need
    to restart the server for the URLs to take effect.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: The templates of the app should extend the page template if you want them to
    contain the placeholders or attributes of the page, for example, the `title` or
    the `description` meta tag.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Filtering object lists* recipe in [Chapter 3](ch03.html "Chapter 3. Forms
    and Views"), *Forms and Views*
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Attaching your own navigation* recipe
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Attaching your own navigation
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Once you have an app hooked in the CMS pages, all the URL paths under the page
    node will be controlled by the `urls.py` file of the app. To add some menu items
    under this page, you need to add a dynamical branch of navigation to the page
    tree. In this recipe, we will improve the `movies` app and add new navigation
    items under the **Movies** page.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s say that we have a URL configuration for different lists of movies:
    editor''s picks, commercial movies, and independent movies, as shown in the following
    code:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: How to do it...
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these two steps to attach the **Editor''s Picks**, **Commercial Movies**,
    and **Independent Movies** menu choices to the navigational menu under the **Movies**
    page:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `menu.py` file in the `movies` app and add the following `MoviesMenu`
    class, as follows:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Restart the web server and then edit the **Advanced** settings of the **Movies**
    page and select **Movies Menu** for the **Attached** menu setting.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the frontend, you will see the new menu items attached to the **Movies**
    page, as shown in the following image:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_07_02.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
- en: 'Dynamic menus that are attachable to pages need to extend `CMSAttachMenu`,
    define the name by which they will be selected, and define the `get_nodes()` method
    that returns a list of `NavigationNode` objects. The `NavigationNode` class takes
    at least three parameters: the title of the menu item, the URL path of the menu
    item, and the ID of the node. The IDs can be chosen freely with the only requirement
    being that they have to be unique among this attached menu. The other optional
    parameters are as follows:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: '`parent_id`: This is the ID of the parent node if you want to create a hierarchical
    dynamical menu'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent_namespace`: This is the name of another menu if this node is to be
    attached to a different menu tree, for example, the name of this menu is "`MoviesMenu`"'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`attr`: This is a dictionary of the additional attributes that can be used
    in a template or menu modifier'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`visible`: This sets whether or not the menu item should be visible'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For other examples of attachable menus, refer to the official documentation
    at [https://django-cms.readthedocs.org/en/latest/how_to/menus.html](https://django-cms.readthedocs.org/en/latest/how_to/menus.html).
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Structuring the page menu* recipe
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Converting an app to a CMS app* recipe
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing your own CMS plugin
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django CMS comes with a lot of content plugins that can be used in template
    placeholders, such as the text, flash, picture, and Google map plugins. However,
    for more structured and better styled content, you will need your own custom plugins,
    which are not too difficult to implement. In this recipe, we will see how to create
    a new plugin and have a custom layout for its data, depending on the chosen template
    of the page.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create an `editorial` app and mention it in the `INSTALLED_APPS` setting.
    Also, we will need the `cms/magazine.html` template that was created and mentioned
    in the `CMS_TEMPLATES` setting; you can simply duplicate the `cms/default.html`
    template for this.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create the `EditorialContent` plugin, follow these steps:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `models.py` file of the newly created app, add the `EditorialContent`
    model extending from `CMSPlugin`. The `EditorialContent` model will have the following
    fields: title, subtitle, description, website, image, image caption, and a CSS
    class:'
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'In the same app, create a `cms_plugins.py` file and add a `EditorialContentPlugin`
    class extending `CMSPluginBase`. This class is a little bit like `ModelAdmin`—it
    defines the appearance of administration settings for the plugin:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-101
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To specify which plugins go to which placeholders, you have to define the `CMS_PLACEHOLDER_CONF`
    setting. You can also define the extra context for the templates of the plugins
    that are rendered in a specific placeholder. Let''s allow `EditorialContentPlugin`
    for the `main_content` placeholder and set the `editorial_content_template` context
    variable for the `main_content` placeholder in the `cms/magazine.html` template,
    as follows:'
  id: totrans-102
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we will create two templates. One of them will be the `editorial_content.html`
    template. It checks whether the `editorial_content_template` context variable
    exists. If the variable exists, it is included. Otherwise, it shows the default
    layout for editorial content:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The second template is a specific template for the `EditorialContent` plugin
    in the `cms/magazine.html` template. There''s nothing too fancy here, just an
    additional Bootstrap-specific `well` CSS class for the container to make the plugin
    stand out:'
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: How it works...
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you go to the **Draft** mode of any CMS page and switch to the **Structure**
    section, you can add the **Editorial Content** plugin to a placeholder. The content
    of this plugin will be rendered with a specified template and it can also be customized,
    depending on the template of the page where the plugin is chosen. For example,
    choose the `cms/magazine.html` template for the **News** page and then add the
    **Editorial Content** plugin. The **News** page will look similar to the following
    screenshot:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_07_03.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
- en: Here, the **Test Title** with an image and description is the custom plugin
    inserted in the `main_content` placeholder in the `magazine.html` page template.
    If the page template was different, the plugin would be rendered without the Bootstrap-specific
    `well` CSS class; therefore, it would not have a gray background.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating templates for Django CMS* recipe
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Structuring the page menu* recipe
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding new fields to the CMS page
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: CMS pages have several multilingual fields such as title, slug, menu title,
    page title, description meta tag, and overwrite URL. They also have several common
    nonlanguage-specific fields such as template, ID used in template tags, attached
    application, and attached menu. However, that might not be enough for more complex
    websites. Thankfully, Django CMS features a manageable mechanism to add new database
    fields for CMS pages. In this recipe, you will see how to add fields for the CSS
    classes for the navigational menu items and page body.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-117
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's create the `cms_extensions` app and put it under `INSTALLED_APPS` in the
    settings.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a CMS page extension with the CSS class fields for the navigational
    menu items and page body, follow these steps:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `models.py` file, create a `CSSExtension` class extending `PageExtension`
    and put fields for the menu item''s CSS class and `<body>` CSS class, as follows:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the `admin.py` file, let''s add administration options for the `CSSExtension`
    model that we just created:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `admin.py` 文件中，让我们为刚刚创建的 `CSSExtension` 模型添加管理选项：
- en: '[PRE17]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, we need to show the CSS extension in the toolbar for each page. This
    can be done by putting the following code in the `cms_toolbar.py` file of the
    app:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要在每个页面的工具栏中显示 CSS 扩展。这可以通过在应用的 `cms_toolbar.py` 文件中放置以下代码来完成：
- en: '[PRE18]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: This code checks whether the user has the permission to change the current page,
    and if so, it loads the page menu from the current toolbar and adds a new menu
    item, CSS, with the link to create or edit `CSSExtension`.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此代码检查用户是否有更改当前页面的权限，如果有，它将从当前工具栏加载页面菜单，并添加一个新的菜单项，CSS，带有创建或编辑 `CSSExtension`
    的链接。
- en: 'As we want to access the CSS extension in the navigation menu in order to attach
    a CSS class, we need to create a menu modifier in the `menu.py` file of the same
    app:'
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于我们想在导航菜单中访问 CSS 扩展以附加 CSS 类，我们需要在相同应用的 `menu.py` 文件中创建一个菜单修改器：
- en: '[PRE19]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, we will add the body CSS class to the `<body>` element in the `base.html`
    template, as follows:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将把主体 CSS 类添加到 `base.html` 模板中的 `<body>` 元素，如下所示：
- en: '[PRE20]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Lastly, we will modify the `menu.html` file, which is the default template
    for the navigation menu, and add the menu item''s CSS class as follows:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们将修改 `menu.html` 文件，这是导航菜单的默认模板，并添加菜单项的 CSS 类，如下所示：
- en: '[PRE21]'
  id: totrans-133
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: How it works...
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The `PageExtension` class is a model mixin with a one-to-one relationship with
    the `Page` model. To be able to administrate the custom extension model in Django
    CMS, there is a specific `PageExtensionAdmin` class to extend. Then, in the `cms_toolbar.py`
    file, we will create the `CSSExtensionToolbar` class, inheriting from the `CMSToolbar`
    class, to create an item in the Django CMS toolbar. In the `populate()` method,
    we will perform the general routine to check the page permissions and then we
    will add a CSS menu item to the toolbar.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`PageExtension` 类是一个与 `Page` 模型具有一对一关系的模型混入。为了能够在 Django CMS 中管理自定义扩展模型，有一个特定的
    `PageExtensionAdmin` 类可以扩展。然后，在 `cms_toolbar.py` 文件中，我们将创建 `CSSExtensionToolbar`
    类，继承自 `CMSToolbar` 类，以在 Django CMS 工具栏中创建一个项。在 `populate()` 方法中，我们将执行常规的检查页面权限的流程，然后我们将向工具栏中添加一个
    CSS 菜单项。'
- en: 'If the administrator has the permission to edit the page, then they will see
    a **CSS** option in the toolbar under the **Page** menu item, as shown in the
    following screenshot:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 如果管理员有编辑页面的权限，那么他们将在 **页面** 菜单项下看到工具栏中的 **CSS** 选项，如下面的截图所示：
- en: '![How it works...](img/B04912_07_04.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B04912_07_04.jpg)'
- en: 'When the administrator clicks on the new **CSS** menu item, a pop-up window
    opens and they can select the **CSS** classes for the navigation menu item and
    body, as shown in the following screenshot:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 当管理员点击新的 **CSS** 菜单项时，会弹出一个窗口，他们可以从中选择导航菜单项和主体的 **CSS** 类，如下面的截图所示：
- en: '![How it works...](img/B04912_07_05.jpg)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B04912_07_05.jpg)'
- en: 'To show a specific CSS class from the `Page` extension in the navigation menu,
    we need to attach the `CSSExtension` object to the navigation items accordingly.
    Then, these objects can be accessed in the `menu.html` template as `{{ child.cssextension
    }}`. In the end, you will have some navigation menu items highlighted, such as
    the **Music** item shown here (depending on your CSS):'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 要在导航菜单中显示来自 `Page` 扩展的特定 CSS 类，我们需要相应地将 `CSSExtension` 对象附加到导航项上。然后，这些对象可以在
    `menu.html` 模板中以 `{{ child.cssextension }}` 的形式访问。最后，你将有一些导航菜单项被突出显示，例如这里显示的 **音乐**
    项（取决于你的 CSS）：
- en: '![How it works...](img/B04912_07_06.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![它是如何工作的...](img/B04912_07_06.jpg)'
- en: To show a specific CSS class for `<body>` of the current page is much simpler.
    We can use `{{ request.current_page.cssextension.body_css_class }}` right away.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 显示当前页面 `<body>` 的特定 CSS 类要简单得多。我们可以立即使用 `{{ request.current_page.cssextension.body_css_class
    }}`。
- en: See also
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Creating templates for Django CMS* recipe
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*为 Django CMS 创建模板* 的食谱'
