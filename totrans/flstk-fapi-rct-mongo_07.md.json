["```py\n    fastapi==0.111.0\n    motor==3.4.0\n    uvicorn==0.29.0\n    pydantic-settings==2.2.1\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    #models.py\n    from typing import Optional, Annotated, List\n    from pydantic import BaseModel, ConfigDict, Field, BeforeValidator, field_validator\n    PyObjectId = Annotated[str, BeforeValidator(str)]\n    ```", "```py\n    class CarModel(BaseModel):\n        id: Optional[PyObjectId] = Field(\n           alias=\"_id\", default=None)\n        brand: str = Field(...)\n        make: str = Field(...)\n        year: int = Field(..., gt=1970, lt=2025)\n        cm3: int = Field(..., gt=0, lt=5000)\n        km: int = Field(..., gt=0, lt=500000)\n        price: int = Field(..., gt=0, lt=100000)\n    ```", "```py\n    @field_validator(\"brand\")\n    @classmethod\n    def check_brand_case(cls, v: str) -> str:\n        return v.title()\n    @field_validator(\"make\")\n    @classmethod\n    def check_make_case(cls, v: str) -> str:\n        return v.title()\n    ```", "```py\n    model_config = ConfigDict(\n        populate_by_name=True,\n        arbitrary_types_allowed=True,\n        json_schema_extra={\n            \"example\": {\n                \"brand\": \"Ford\",\n                \"make\": \"Fiesta\",\n                \"year\": 2019,\n                \"cm3\": 1500,\n                \"km\": 120000,\n                \"price\": 10000,\n            }\n        },\n    )\n    ```", "```py\n    test_car = CarModel(\n        brand=\"ford\", make=\"fiesta\", year=2019, cm3=1500, km=120000, price=10000\n    )\n    print(test_car.model_dump())\n    ```", "```py\n    python models.py\n    {'id': None, 'brand': 'Ford', 'make': 'Fiesta', 'year': 2019, 'cm3': 1500, 'km': 120000, 'price': 10000}.\n    ```", "```py\n    class UpdateCarModel(BaseModel):\n        brand: Optional[str] = Field(...)\n        make: Optional[str] = Field(...)\n        year: Optional[int] = Field(..., gt=1970, lt=2025)\n        cm3: Optional[int] = Field(..., gt=0, lt=5000)\n        km: Optional[int] = Field(..., gt=0, lt=500 * 1000)\n        price: Optional[int] = Field(..., gt=0, lt=100 * 1000)\n    ```", "```py\n    class CarCollection(BaseModel):\n        cars: List[CarModel]\n    ```", "```py\n    from models import CarCollection, CarModel\n    test_car_1 = CarModel(\n        brand=\"ford\", make=\"fiesta\", year=2019, cm3=1500, km=120000, price=10000\n    )\n    test_car_2 = CarModel(\n        brand=\"fiat\", make=\"stilo\", year=2003, cm3=1600, km=320000, price=3000\n    )\n    car_list = CarCollection(cars=[test_car_1, test_car_2])\n    print(car_list.model_dump())\n    ```", "```py\n    {'cars': [{'id': None, 'brand': 'Ford', 'make': 'Fiesta', 'year': 2019, 'cm3': 1500, 'km': 120000, 'price': 10000}, {'id': None, 'brand': 'Fiat', 'make': 'Stilo', 'year': 2003, 'cm3': 1600, 'km': 320000, 'price': 3000}]}\n    ```", "```py\n    DB_URL=mongodb+srv://<USERNAME>:<PASSWORD>@cluster0.fkm24.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\n    DB_NAME=carBackend\n    ```", "```py\n    __pycache__/\n    .env\n    venv/\n    ```", "```py\n    git init\n    git add .\n    git commit -m \"initial commit\"\n    ```", "```py\n    from typing import Optional\n    from pydantic_settings import BaseSettings, SettingsConfigDict\n    class BaseConfig(BaseSettings):\n        DB_URL: Optional[str]\n        DB_NAME: Optional[str]\n        model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n    ```", "```py\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/\")\n    async def get_root():\n        return {\"Message\": \"Root working\"}\n    ```", "```py\n    uvicorn app:app\n    ```", "```py\n    from contextlib import asynccontextmanager\n    from fastapi import FastAPI\n    @asynccontextmanager\n    async def lifespan(app: FastAPI):\n        print(\"Starting up!\")\n        yield\n        print(\"Shutting down!\")\n    app = FastAPI(lifespan=lifespan)\n    @app.get(\"/\")\n    async def get_root():\n        return {\"Message\": \"Root working!\"}\n    ```", "```py\n    from fastapi import FastAPI\n    from motor import motor_asyncio\n    from config import BaseConfig\n    settings = BaseConfig()\n    async def lifespan(app: FastAPI):\n        app.client = motor_asyncio.AsyncIOMotorClient(settings.DB_URL)\n        app.db = app.client[settings.DB_NAME]\n        try:\n            app.client.admin.command(\"ping\")\n            print(\"Pinged your deployment. You have successfully connected to MongoDB!\")\n            print(\"Mongo address:\", settings.DB_URL)\n        except Exception as e:\n            print(e)\n        yield\n        app.client.close()\n    app = FastAPI(lifespan=lifespan)\n    @app.get(\"/\")\n    async def get_root():\n        return {\"Message\": \"Root working!\"}\n    ```", "```py\n    INFO:     Started server process [28228]\n    INFO:     Waiting for application startup.\n    Pinged your deployment. You have successfully connected to MongoDB!\n    Mongo address: <your connection string>\n    INFO:     Application startup complete.\n    INFO:     Uvicorn running on http://127.0.0.1:8000 (Press\n    ```", "```py\n    from fastapi import APIRouter, Body, Request, status\n    from models import CarModel\n    router = APIRouter()\n    ```", "```py\n    from fastapi import FastAPI, status\n    from fastapi.middleware.cors import CORSMiddleware\n    from motor import motor_asyncio\n    from fastapi.exceptions import RequestValidationError\n    from fastapi.responses import JSONResponse\n    from fastapi.encoders import jsonable_encoder\n    from collections import defaultdict\n    from config import BaseConfig\n    from routers.cars import router as cars_router\n    from routers.users import router as users_router\n    settings = BaseConfig()\n    async def lifespan(app: FastAPI):\n        app.client = motor_asyncio.AsyncIOMotorClient(settings.DB_URL)\n        app.db = app.client[settings.DB_NAME]\n        try:\n            app.client.admin.command(\"ping\")\n            print(\"Pinged your deployment. You have successfully connected to MongoDB!\")\n        except Exception as e:\n            print(e)\n        yield\n        app. client.close()\n    app = FastAPI(lifespan=lifespan)\n    app.include_router(cars_router, prefix=\"/cars\", tags=[\"cars\"])\n    @app.get(\"/\")\n    async def get_root():\n        return {\"Message\": \"Root working!\"}\n    ```", "```py\n@router.post(\n    \"/\",\n    response_description=\"Add new car\",\n    response_model=CarModel,\n    status_code=status.HTTP_201_CREATED,\n    response_model_by_alias=False,\n)\nasync def add_car(request: Request, car: CarModel = Body(...)):\n    cars = request.app.db[\"cars\"]\n    document = car.model_dump(\n        by_alias=True, exclude=[\"id\"])\n    inserted = await cars.insert_one(document)\n    return await cars.find_one({\"_id\": inserted.inserted_id})\n```", "```py\nuvicorn app:app\n```", "```py\nhttp POST http://127.0.0.1:8000/cars/ brand=\"KIA\" make=\"Ceed\" year=2015 price=2000 km=100000 cm3=1500\n```", "```py\nHTTP/1.1 201 Created\ncontent-length: 109\ncontent-type: application/json\ndate: Sun, 12 May 2024 15:29:45 GMT\nserver: uvicorn\n{\n    \"brand\": \"Kia\",\n    \"cm3\": 1500,\n    \"id\": \"6640e06ad82a890d261a8a40\",\n    \"km\": 100000,\n    \"make\": \"Ceed\",\n    \"price\": 2000,\n    \"year\": 2015\n}\n```", "```py\n    @router.get(\n        \"/\",\n        response_description=\"List all cars\",\n        response_model=CarCollection,\n        response_model_by_alias=False,\n    )\n    async def list_cars(request: Request):\n        cars = request.app.db[\"cars\"]\n        results = []\n        cursor = cars.find()\n        async for document in cursor:\n            results.append(document)\n        return CarCollection(cars=results)\n    ```", "```py\n    http http://127.0.0.1:8000/cars/\n    ```", "```py\n    return CarCollection(\n        cars=await cars.find().to_list(1000)\n        )\n    ```", "```py\n    @router.get(\n        \"/{id}\",\n        response_description=\"Get a single car by ID\",\n        response_model=CarModel,\n        response_model_by_alias=False,\n    )\n    async def show_car(id: str, request: Request):\n        cars = request.app.db[\"cars\"]\n        try:\n            id = ObjectId(id)\n        except Exception:\n            raise HTTPException(status_code=404, detail=f\"Car {id} not found\")\n        if (car := await cars.find_one({\"_id\": ObjectId(id)})) is not None:\n            return car\n        raise HTTPException(status_code=404, detail=f\"Car with {id} not found\")\n    ```", "```py\nhttp http://127.0.0.1:8000/cars/6640e06ad82a890d261a8a40\n```", "```py\nasync def update_car(\n    id: str,\n    request: Request,\n    user=Depends(auth_handler.auth_wrapper),\n    car: UpdateCarModel = Body(...),\n):\n    try:\n        id = ObjectId(id)\n    except Exception:\n        raise HTTPException(status_code=404, detail=f\"Car {id} not found\")\n    car = {\n        k: v\n        for k, v in car.model_dump(by_alias=True).items()\n        if v is not None and k != \"_id\"\n    }\n```", "```py\n    if len(car) >= 1:\n        cars = request.app.db[\"cars\"]\n        update_result = await cars.find_one_and_update(\n            {\"_id\": ObjectId(id)},\n            {\"$set\": car},\n            return_document=ReturnDocument.AFTER,\n        )\n        if update_result is not None:\n            return update_result\n        else:\n            raise HTTPException(status_code=404, detail=f\"Car {id} not found\")\n```", "```py\n    if (existing_car := await cars.find_one({\"_id\": id})) is not None:\n        return existing_car\n    raise HTTPException(status_code=404, detail=f\"Car {id} not found\")\n```", "```py\n@router.delete(\"/{id}\", response_description=\"Delete a car\")\nasync def delete_car(\n    id: str, request: Request, user=Depends(auth_handler.auth_wrapper)\n):\n    try:\n        id = ObjectId(id)\n    except Exception:\n        raise HTTPException(status_code=404, detail=f\"Car {id} not found\")\n    cars = request.app.db[\"cars\"]\n    delete_result = await cars.delete_one({\"_id\": id})\n    if delete_result.deleted_count == 1:\n        return Response(status_code=status.HTTP_204_NO_CONTENT)\n    raise HTTPException(status_code=404, detail=f\"Car with {id} not found\")\n```", "```py\nclass CarCollectionPagination(CarCollection):\n    page: int = Field(ge=1, default=1)\n    has_more: bool\n```", "```py\nCARS_PER_PAGE = 10\n```", "```py\n@router.get(\n    \"/\",\n    response_description=\"List all cars, paginated\",\n    response_model=CarCollectionPagination,\n    response_model_by_alias=False,\n)\nasync def list_cars(\n    request: Request,\n    page: int = 1,\n    limit: int = CARS_PER_PAGE,\n):\n    cars = request.app.db[\"cars\"]\n    results = []\n```", "```py\ncursor = cars.find().sort(\"companyName\").limit(limit).skip((page - 1) * limit)\n    total_documents = await cars.count_documents({})\n    has_more = total_documents > limit * page\n    async for document in cursor:\n        results.append(document)\n    return CarCollectionPagination(cars=results, page=page, has_more=has_more)\n```", "```py\nhttp http://127.0.0.1:8000/cars/?page=12\n```", "```py\n{\n    \"has_more\": false,\n    \"page\": 12\n}\n```", "```py\nDB_URL=mongodb+srv://xxxxxx:xxxxxxxx@cluster0.fkm24.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0\nDB_NAME=carBackend\nCLOUDINARY_SECRET_KEY=xxxxxxxxxxxxxxxx\nCLOUDINARY_API_KEY=xxxxxxxxxx\nCLOUDINARY_CLOUD_NAME=xxxxxxxx\n```", "```py\nfrom typing import Optional\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\nclass BaseConfig(BaseSettings):\n    DB_URL: Optional[str]\n    DB_NAME: Optional[str]\n    CLOUDINARY_SECRET_KEY: Optional[str]\n    CLOUDINARY_API_KEY: Optional[str]\n    CLOUDINARY_CLOUD_NAME: Optional[str]\n    model_config = SettingsConfigDict(env_file=\".env\", extra=\"ignore\")\n```", "```py\npip install cloudinary\n```", "```py\nfastapi==0.111.0\nmotor==3.4.0\nuvicorn==0.29.0\nhttpie==3.2.2\ncloudinary==1.40.0\npydantic-settings==2.2.1\n```", "```py\n    # add the picture file\n        picture_url: Optional[str] = Field(None)\n    ```", "```py\n    import cloudinary\n    from cloudinary import uploader  # noqa: F401\n    ```", "```py\n    from bson import ObjectId\n    from fastapi import (\n        APIRouter,\n        Body,\n        File,\n        Form,\n        HTTPException,\n        Request,\n        UploadFile,\n        status,\n    )\n    from fastapi.responses import Response\n    from pymongo import ReturnDocument\n    import cloudinary\n    from cloudinary import uploader  # noqa: F401\n    from config import BaseConfig\n    from models import CarCollectionPagination, CarModel, UpdateCarModel\n    settings = BaseConfig()\n    router = APIRouter()\n    CARS_PER_PAGE = 10\n    cloudinary.config(\n        cloud_name=settings.CLOUDINARY_CLOUD_NAME,\n        api_key=settings.CLOUDINARY_API_KEY,\n        api_secret=settings.CLOUDINARY_SECRET_KEY,\n    )\n    ```", "```py\n    @router.post(\n        \"/\",\n        response_description=\"Add new car with picture\",\n        response_model=CarModel,\n        status_code=status.HTTP_201_CREATED,\n    )\n    async def add_car_with_picture(\n        request: Request,\n        brand: str = Form(\"brand\"),\n        make: str = Form(\"make\"),\n        year: int = Form(\"year\"),\n        cm3: int = Form(\"cm3\"),\n        km: int = Form(\"km\"),\n        price: int = Form(\"price\"),\n        picture: UploadFile = File(\"picture\"),\n    ):\n    ```", "```py\n        cloudinary_image = cloudinary.uploader.upload(\n            picture.file, crop=\"fill\", width=800\n        )\n        picture_url = cloudinary_image[\"url\"]\n    ```", "```py\n    car = CarModel(\n        brand=brand,\n        make=make,\n        year=year,\n        cm3=cm3,\n        km=km,\n        price=price,\n        picture_url=picture_url,\n    )\n    cars = request.app.db[\"cars\"]\n    document = car.model_dump(by_alias=True, exclude=[\"id\"])\n    inserted = await cars.insert_one(document)\n    return await cars.find_one({\"_id\": inserted.inserted_id})\n```", "```py\nhttp --form POST 127.0.0.1:8000/cars brand=\"Ford\" make=\"Focus\" year=2000 cm3=1500 price=12000 km=23000 picture=\"ford.jpg\"\n```", "```py\n    from datetime import datetime\n    import jwt\n    from fastapi import HTTPException, Security\n    from fastapi.security import HTTPAuthorizationCredentials, HTTPBearer\n    from passlib.context import CryptContext\n    ```", "```py\n    class AuthHandler:\n        security = HTTPBearer()\n        pwd_context = CryptContext(\n            schemes=[\"bcrypt\"], deprecated=\"auto\"\n        )\n        secret = \"FARMSTACKsecretString\"\n        def get_password_hash(self, password):\n            return self.pwd_context.hash(password)\n        def verify_password(\n            self, plain_password, hashed_password\n        ):\n            return self.pwd_context.verify(\n                plain_password, hashed_password\n            )\n        def encode_token(self, user_id, username):\n            payload = {\n                \"exp\": datetime.datetime.now(\n                    datetime.timezone.utc)\n                + datetime.timedelta(minutes=30),\n                \"iat\": datetime.datetime.now(datetime.timezone.utc),\n                \"sub\": {\n                    \"user_id\": user_id,\n                     \"username\": username},\n            }\n            return jwt.encode(payload, self.secret, algorithm=\"HS256\")\n        def decode_token(self, token):\n    try:\n        payload = jwt.decode(\n            token, self.secret, algorithms=[\"HS256\"]\n        )\n        return payload[\"sub\"]\n    except jwt.ExpiredSignatureError:\n        raise HTTPException(\n            status_code=401,\n            detail=\"Signature has expired\"\n        )\n    except jwt.InvalidTokenError:\n        raise HTTPException(\n            status_code=401,\n            detail=\"Invalid token\"\n        )\n    ```", "```py\n        def auth_wrapper(\n            self,\n            auth: HTTPAuthorizationCredentials =\n                Security(security)\n        ):\n            return self.decode_token(auth.credentials)\n    ```", "```py\n    class CarModel(BaseModel):\n        id: Optional[PyObjectId] = Field(alias=\"_id\", default=None)\n        brand: str = Field(...)\n        make: str = Field(...)\n        year: int = Field(..., gt=1970, lt=2025)\n        cm3: int = Field(..., gt=0, lt=5000)\n        km: int = Field(..., gt=0, lt=500 * 1000)\n        price: int = Field(..., gt=0, lt=100000)\n        user_id: str = Field(...)\n        picture_url: Optional[str] = Field(None)\n    ```", "```py\n    class UserModel(BaseModel):\n        id: Optional[PyObjectId] = Field(alias=\"_id\", default=None)\n        username: str = Field(..., min_length=3, max_length=15)\n        password: str = Field(...)\n    class LoginModel(BaseModel):\n        username: str = Field(...)\n        password: str = Field(...)\n    class CurrentUserModel(BaseModel):\n        id: PyObjectId = Field(alias=\"_id\", default=None)\n        username: str = Field(..., min_length=3, max_length=15)\n    ```", "```py\nfrom bson import ObjectId\nfrom fastapi import APIRouter, Body, Depends, HTTPException, Request, Response\nfrom fastapi.responses import JSONResponse\nfrom authentication import AuthHandler\nfrom models import CurrentUserModel, LoginModel, UserModel\nrouter = APIRouter()\nauth_handler = AuthHandler()\n```", "```py\n@router.post(\"/register\", response_description=\"Register user\")\nasync def register(request: Request, newUser: LoginModel = Body(...)) -> UserModel:\n    users = request.app.db[\"users\"]\n    # hash the password before inserting it into MongoDB\n    newUser.password = auth_handler.get_password_hash(newUser.password)\n    newUser = newUser.model_dump()\n    # check existing user or email 409 Conflict:\n    if (\n        existing_username := await users.find_one({\"username\": newUser[\"username\"]})\n        is not None\n    ):\n        raise HTTPException(\n            status_code=409,\n            detail=f\"User with username {newUser['username']} already exists\",\n        )\n    new_user = await users.insert_one(newUser)\n    created_user = await users.find_one({\"_id\": new_user.inserted_id})\n    return created_user\n```", "```py\n@router.post(\"/login\", response_description=\"Login user\")\nasync def login(request: Request, loginUser: LoginModel = Body(...)) -> str:\n    users = request.app.db[\"users\"]\n    user = await users.find_one({\"username\": loginUser.username})\n    if (user is None) or (\n        not auth_handler.verify_password(loginUser.password, user[\"password\"])\n    ):\n        raise HTTPException(status_code=401, detail=\"Invalid username and/or password\")\n    token = auth_handler.encode_token(str(user[\"_id\"]), user[\"username\"])\n    Wrong indentation. check and replace with:\nresponse = JSONResponse(\n    content={\n        \"token\": token,\n        \"username\": user[\"username\"]\n    }\n)\n    return response\n```", "```py\n@router.get(\n    \"/me\",\n    response_description=\"Logged in user data\",\n    response_ model=CurrentUserModel\n)\nasync def me(\n    request: Request,\n    response: Response,\n    user_data=Depends(auth_handler.auth_wrapper)\n):\n    users = request.app.db[\"users\"]\n    currentUser = await users.find_one(\n        {\"_id\": ObjectId(user_data[\"user_id\"])}\n    )\n    return currentUser\n```", "```py\napp.include_router(\n    cars_router, prefix=\"/cars\", tags=[\"cars\"]\n    )\napp.include_router(\n    users_router, prefix=\"/users\", tags=[\"users\"]\n    )\n```", "```py\n@router.post(\n    \"/\",\n    response_description=\"Add new car with picture\",\n    response_model=CarModel,\n    status_code=status.HTTP_201_CREATED,\n)\nasync def add_car_with_picture(\n    request: Request,\n    brand: str = Form(\"brand\"),\n    make: str = Form(\"make\"),\n    year: int = Form(\"year\"),\n    cm3: int = Form(\"cm3\"),\n    km: int = Form(\"km\"),\n    price: int = Form(\"price\"),\n    picture: UploadFile = File(\"picture\"),\n    user: str =Depends(auth_handler.auth_wrapper),\n):\n```", "```py\ncloudinary_image = cloudinary.uploader.upload(\n    picture.file, folder=\"FARM2\", crop=\"fill\", width=800\n)\npicture_url = cloudinary_image[\"url\"]\ncar = CarModel(\n    brand=brand,\n    make=make,\n    year=year,\n    cm3=cm3,\n    km=km,\n    price=price,\n    picture_url=picture_url,\n    user_id=user[\"user_id\"],\n)\ncars = request.app.db[\"cars\"]\ndocument = car.model_dump(by_alias=True, exclude=[\"id\"])\ninserted = await cars.insert_one(document)\nreturn await cars.find_one({\"_id\": inserted.inserted_id})\n```", "```py\nfrom fastapi.middleware.cors import CORSMiddleware\n```", "```py\napp = FastAPI(lifespan=lifespan)\napp.add_middleware(\n    CORSMiddleware,\n    allow_origins=[\"*\"],\n    allow_credentials=True,\n    allow_methods=[\"*\"],\n    allow_headers=[\"*\"],\n)\n```", "```py\n    git add .\n    git commit -m \"ready for deployment\"\n    ```", "```py\n        pip install -r requirements.txt\n        ```", "```py\n        uvicorn app:app --host 0.0.0.0 --port 80\n        ```"]