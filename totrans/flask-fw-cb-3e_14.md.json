["```py\n$ pip install elasticsearch\n```", "```py\n$ bin/elasticsearch\n```", "```py\n    from elasticsearch import Elasticsearch\n    ```", "```py\n    es = Elasticsearch(\n    ```", "```py\n        'https://192.168.1.6:9200/',\n    ```", "```py\n        ca_certs='Users/apple/workspace/elasticsearch-\n    ```", "```py\n          8.6.2/config/certs/http_ca.crt',\n    ```", "```py\n        verify_certs=False,\n    ```", "```py\n        basic_auth=(\"elastic\", '8oJ7C3U8ipo0PE+-n1Ff')\n    ```", "```py\n    )\n    ```", "```py\n    es.indices.create(index='catalog', ignore=400)\n    ```", "```py\n    from my_app import es\n    ```", "```py\n    class Product(db.Model):\n    ```", "```py\n        def add_index_to_es(self):\n    ```", "```py\n            es.index(index='catalog', document={\n    ```", "```py\n                'name': self.name,\n    ```", "```py\n                'category': self.category.name\n    ```", "```py\n            }, id=self.id)\n    ```", "```py\n            es.indices.refresh(index='catalog')\n    ```", "```py\n    class Category(db.Model):\n    ```", "```py\n        def add_index_to_es(self):\n    ```", "```py\n            es.index('catalog', document={\n    ```", "```py\n                'name': self.name,\n    ```", "```py\n            }, id=self.id)\n    ```", "```py\n            es.indices.refresh(index='catalog')\n    ```", "```py\n    from my_app import es\n    ```", "```py\n    @catalog.route('/product-create', methods=['GET',\n    ```", "```py\n      'POST'])\n    ```", "```py\n    def create_product():\n    ```", "```py\n    #... normal product creation logic … #\n    ```", "```py\n            db.session.commit()\n    ```", "```py\n            product.add_index_to_es()\n    ```", "```py\n    #... normal post product creation logic … #\n    ```", "```py\n    @catalog.route('/product-search-es')\n    ```", "```py\n    @catalog.route('/product-search-es/<int:page>')\n    ```", "```py\n    def product_search_es(page=1):\n    ```", "```py\n        q = request.args.get('q')\n    ```", "```py\n        products = es.search(index=\"catalog\", query={\n    ```", "```py\n            \"query_string\": {\n    ```", "```py\n                \"query\": '*' + q + '*'\n    ```", "```py\n            }\n    ```", "```py\n        })\n    ```", "```py\n        return products['hits']\n    ```", "```py\n{\n  \"hits\": [\n    {\n      \"_id\": \"5\",\n      \"_index\": \"catalog\",\n      \"_score\": 1.0,\n      \"_source\": {\n        \"category\": \"Phones\",\n        \"name\": \"iPhone 14\"\n      }\n    },\n    {\n      \"_id\": \"6\",\n      \"_index\": \"catalog\",\n      \"_score\": 1.0,\n      \"_source\": {\n        \"category\": \"Phones\",\n        \"name\": \"Motorola razr\"\n      }\n    }\n  ],\n  \"max_score\": 1.0,\n  \"total\": {\n    \"relation\": \"eq\",\n    \"value\": 2\n  }\n}\n```", "```py\n    from blinker import Namespace\n    ```", "```py\n    catalog_signals = Namespace()\n    ```", "```py\n    product_created = catalog_signals.signal('product-\n    ```", "```py\n      created')\n    ```", "```py\n    category_created = catalog_signals.signal('category-\n    ```", "```py\n      created')\n    ```", "```py\n    def add_product_index_to_es(sender, product):\n    ```", "```py\n        es.index(index='catalog', document={\n    ```", "```py\n            'name': product.name,\n    ```", "```py\n            'category': product.category.name\n    ```", "```py\n        }, id=product.id)\n    ```", "```py\n        es.indices.refresh(index='catalog')\n    ```", "```py\n    product_created.connect(add_product_index_to_es, app)\n    ```", "```py\n    def add_category_index_to_es(sender, category):\n    ```", "```py\n        es.index(index='catalog', document={\n    ```", "```py\n            'name': category.name,\n    ```", "```py\n        }, id=category.id)\n    ```", "```py\n        es.indices.refresh('catalog')\n    ```", "```py\n    category_created.connect(add_category_index_to_es,\n    ```", "```py\n      app)\n    ```", "```py\n    From my_app.catalog.models import product_created,\n    ```", "```py\n      category_created\n    ```", "```py\n    @catalog.route('/product-create', methods=['GET',\n    ```", "```py\n      'POST'])\n    ```", "```py\n    def create_product():\n    ```", "```py\n        #... normal product creation logic … #\n    ```", "```py\n            db.session.commit()\n    ```", "```py\n            product_created.send(app, product=product)\n    ```", "```py\n        #... normal post product creation logic … #\n    ```", "```py\n$ pip install flask-caching\n```", "```py\n    from flask_caching import Cache\n    ```", "```py\n    cache = Cache(app, config={'CACHE_TYPE': 'simple'})\n    ```", "```py\n    @catalog.route('/categories')\n    ```", "```py\n    @cache.cached(timeout=120)\n    ```", "```py\n    def categories():\n    ```", "```py\n        categories = Category.query.all()\n    ```", "```py\n        return render_template('categories.html',\n    ```", "```py\n          categories=categories)\n    ```", "```py\n@catalog.route('/product/<id>')\n@cache.memoize(120)\ndef product(id):\n    product = Product.query.get_or_404(id)\n    return render_template('product.html', product=product)\n```", "```py\n$ pip install Flask-Mail\n```", "```py\nfrom flask_mail import Mail\napp.config['MAIL_SERVER'] = 'smtp.gmail.com'\napp.config['MAIL_PORT'] = 587\napp.config['MAIL_USE_TLS'] = True\napp.config['MAIL_USERNAME'] = 'gmail_username'\napp.config['MAIL_PASSWORD'] = 'gmail_password'\napp.config['MAIL_DEFAULT_SENDER'] = ('Sender name', 'sender\n  email')\nmail = Mail(app)\n```", "```py\nfrom my_app import mail\nfrom flask_mail import Message\n@catalog.route('/category-create', methods=['POST',])\ndef create_category():\n    # ... Create a category ... #\n    message = Message(\n        \"New category added\",\n        recipients=['shalabh7777@gmail.com']\n    )\n    message.body = 'New category \"%s\" has been created'\n      % category.name\n    message.html = render_template(\n        \"category-create-email-html.html\",\n        category=category\n    )\n    mail.send(message)\n    # ... Rest of the process ... #\n```", "```py\n>>> requests.post('http://127.0.0.1:5000/category-create', data={'name': 'Headphone'})\n```", "```py\nA new category has been added to the catalog.\nThe name of the category is {{ category.name }}.\nClick on the URL below to access the same:\n{{ url_for('catalog.category', id=category.id, _external =\n  True) }}\nThis is an automated email. Do not reply to it.\n```", "```py\n<p>A new category has been added to the catalog.</p>\n<p>The name of the category is <a href=\"{{\n  url_for('catalog.category', id=category.id, _external =\n  True) }}\">\n      <h2>{{ category.name }}</h2>\n    </a>.\n</p>\n<p>This is an automated email. Do not reply to it.</p>\n```", "```py\n    message.body = render_template(\n        \"category-create-email-text.html\",\n        category=category\n    )\n    message.html = render_template(\n        \"category-create-email-html.html\",\n        category=category\n    )\n```", "```py\nfrom threading import Thread\ndef send_mail(message):\n    with app.app_context():\n        mail.send(message)\n# Replace the line below in create_category()\n# mail.send(message)\n# by\nt = Thread(target=send_mail, args=(message,))\nt.start()\n```", "```py\n$ pip install celery\n```", "```py\n    from celery import Celery\n    ```", "```py\n    app.config['SERVER_NAME'] = '127.0.0.1:5000'\n    ```", "```py\n    app.config.update(\n    ```", "```py\n        CELERY_BROKER_URL='redis://127.0.0.1:6379',\n    ```", "```py\n        CELERY_RESULT_BACKEND='redis://127.0.0.1:6379'\n    ```", "```py\n    )\n    ```", "```py\n    def make_celery(app):\n    ```", "```py\n        celery = Celery(\n    ```", "```py\n            app.import_name,\n    ```", "```py\n              broker=app.config['CELERY_BROKER_URL']\n    ```", "```py\n        )\n    ```", "```py\n        celery.conf.update(app.config)\n    ```", "```py\n        TaskBase = celery.Task\n    ```", "```py\n        class ContextTask(TaskBase):\n    ```", "```py\n            abstract = True\n    ```", "```py\n            def __call__(self, *args, **kwargs):\n    ```", "```py\n                with app.app_context():\n    ```", "```py\n                    return TaskBase.__call__(self, *args,\n    ```", "```py\n                      **kwargs)\n    ```", "```py\n        celery.Task = ContextTask\n    ```", "```py\n        return celery\n    ```", "```py\n    celery = make_celery(app)\n    ```", "```py\n    $ celery --app=my_app.celery worker -l INFO\n    ```", "```py\n    from my_app import db, app, es, cache, mail, celery\n    ```", "```py\n    @celery.task()\n    ```", "```py\n    def send_mail(category_id, category_name):\n    ```", "```py\n        with app.app_context():\n    ```", "```py\n            category = Category(category_name)\n    ```", "```py\n            category.id = category_id\n    ```", "```py\n            message = Message(\n    ```", "```py\n                \"New category added\",\n    ```", "```py\n                recipients=['some-receiver@domain.com']\n    ```", "```py\n            )\n    ```", "```py\n            message.body = render_template(\n    ```", "```py\n                \"category-create-email-text.html\",\n    ```", "```py\n                category=category\n    ```", "```py\n            )\n    ```", "```py\n            message.html = render_template(\n    ```", "```py\n                \"category-create-email-html.html\",\n    ```", "```py\n                category=category\n    ```", "```py\n            )\n    ```", "```py\n            mail.send(message)\n    ```", "```py\n    # Add this line wherever the email needs to be sent\n    ```", "```py\n      send_mail.apply_async(args=[category.id,\n    ```", "```py\n      category.name])\n    ```", "```py\n[2023-03-22 15:24:21,838: INFO/MainProcess] Task my_app.catalog.views.send_mail[1e869100-5bee-4d99-a4cc-6a3dca92e120] received\n[2023-03-22 15:24:25,927: INFO/ForkPoolWorker-8] Task my_app.catalog.views.send_mail[1e869100-5bee-4d99-a4cc-6a3dca92e120] succeeded in 4.086294061969966s: None\n```"]