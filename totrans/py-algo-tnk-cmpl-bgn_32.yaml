- en: Chapter 22
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第22章
- en: More with Decision Control Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于决策控制结构的内容
- en: 22.1 Simple Exercises with Decision Control Structures
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.1 使用决策控制结构的简单练习
- en: Exercise 22.1-1 Is it an Integer?
  id: totrans-3
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.1-1 它是一个整数吗？
- en: Write a Python program that prompts the user to enter a number and then displays
    a message indicating whether the data type of this number is integer or real.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入一个数字，然后显示一条消息，指出这个数字的数据类型是整数还是实数。
- en: Solution
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: It is well known that a number is considered an integer when it contains no
    fractional part. In Python, you can use the int() function to get the integer
    portion of any real number. If the user-provided number is equal to its integer
    portion, then the number is considered an integer.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 人们都知道，一个数如果没有小数部分，那么它就是一个整数。在Python中，你可以使用int()函数来获取任何实数的整数部分。如果用户提供的数字等于它的整数部分，那么这个数就被认为是整数。
- en: For example, if the user enters the number 7, this number and its integer portion,
    int(7), are equal.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，如果用户输入数字7，这个数字和它的整数部分int(7)是相等的。
- en: On the other hand, if the user enters the number 7.3, this number and its integer
    portion, int(7.3), are not equal.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，如果用户输入数字7.3，这个数字和它的整数部分int(7.3)是不相等的。
- en: The Python program is as follows.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.1-1'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.1-1'
- en: 'x = float(input("Enter a number: "))'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input("请输入一个数字："))
- en: 'if x == int(x):'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x == int(x):'
- en: print(x, "is integer")
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, "是整数")
- en: 'else:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(x, "is real")
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, "是实数")
- en: '![](img/notice.jpg)Note that the function float() is used in the data input
    stage. This is necessary in order to allow the user to enter either an integer
    or a float.'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)请注意，在数据输入阶段使用了float()函数。这是必要的，以便允许用户输入整数或浮点数。'
- en: Exercise 22.1-2 Validating Data Input and Finding Odd and Even Numbers
  id: totrans-17
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.1-2 验证数据输入并找出奇数和偶数
- en: Design a flowchart and write the corresponding Python program that prompts the
    user to enter a non-negative integer, and then displays a message indicating whether
    this number is even; it must display “Odd” otherwise. Moreover, if the user enters
    a negative value or a float, an error message must be displayed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的Python程序，提示用户输入一个非负整数，然后显示一条消息，指出这个数是偶数；如果不是，则显示“Odd”。此外，如果用户输入负值或浮点数，必须显示错误信息。
- en: (This exercise gives you some practice in working with data validation).
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: （这个练习让你在数据验证方面有所练习）。
- en: Solution
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: Data validation is the process of restricting data input, forcing the user to
    enter only valid values.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 数据验证是限制数据输入的过程，迫使用户只能输入有效的值。
- en: In this exercise, you need to prompt the user to enter a non-negative integer
    and display an error message when they enter either a negative value or a float.
    The flowchart that solves this exercise given in general form is as follows.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你需要提示用户输入一个非负整数，如果他们输入负值或浮点数，则显示错误信息。解决这个练习的一般形式的流程图如下。
- en: '![Image](img/chapter22-01.png)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-01.png)'
- en: The following decision control structure is taken from [Exercise 17.1-4](chapter17.html#toc_5).
    It tests whether variable x is even or odd.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 以下决策控制结构来自[练习17.1-4](chapter17.html#toc_5)。它测试变量x是偶数还是奇数。
- en: '![Image](img/chapter22-02.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-02.png)'
- en: After combining both flowcharts, the final flowchart looks like this.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 将两个流程图合并后，最终的流程图如下所示。
- en: '![Image](img/chapter22-03.png)'
  id: totrans-27
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-03.png)'
- en: The Python program is shown here.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.1-2a'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.1-2a'
- en: 'x = float(input("Enter an integer: "))'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input("请输入一个整数："))
- en: 'if x < 0 or x != int(x):'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x < 0 or x != int(x):'
- en: print("Invalid Number")
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: print("Invalid Number")
- en: 'else:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if x % 2 == 0:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x % 2 == 0:'
- en: print("Even")
  id: totrans-35
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Even")
- en: 'else:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Odd")
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Odd")
- en: Instead of using nested decision structures, you can alternatively use a multiple-alternative
    decision structure, as shown here.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 除了使用嵌套决策结构外，你还可以使用多选决策结构，如下所示。
- en: '![](img/my_exercise_header.png) file_22.1-2b'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.1-2b'
- en: 'x = float(input("Enter an integer: "))'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input("请输入一个整数："))
- en: 'if x < 0 or x != int(x):'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x < 0 or x != int(x):'
- en: print("Invalid Number")
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: print("Invalid Number")
- en: 'elif x % 2 == 0:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x % 2 == 0:'
- en: print("Even")
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: print("Even")
- en: 'else:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Odd")
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: print("Odd")
- en: Exercise 22.1-3 Where is the Tollkeeper?
  id: totrans-47
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.1-3 收费员在哪里？
- en: In a toll gate, there is an automatic system that recognizes whether the passing
    vehicle is a motorcycle, a car, or a truck. Write a Python program that lets the
    user enter the type of the vehicle (M for motorcycle, C for car, and T for truck)
    and then displays the corresponding amount of money the driver must pay according
    to the following table.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在收费站，有一个自动系统可以识别通过的车辆是摩托车、汽车还是卡车。编写一个Python程序，让用户输入车辆的类型（M表示摩托车，C表示汽车，T表示卡车），然后根据以下表格显示司机必须支付的费用。
- en: '| Vehicle Type | Amount to Pay |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| Vehicle Type | Amount to Pay |'
- en: '| Motorcycle | $1 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| Motorcycle | $1 |'
- en: '| Car | $2 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| Car | $2 |'
- en: '| Track | $4 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| Track | $4 |'
- en: The program must function properly even when characters are entered in lowercase.
    For example, the program must function properly either for “M” or “m”. However,
    if the user enters a character other than M, C, or T (uppercase or lowercase),
    an error message must be displayed.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 程序必须能够在输入小写字母时正常工作。例如，程序必须对“M”或“m”都正常工作。然而，如果用户输入的字符不是M、C或T（无论是大写还是小写），必须显示错误信息。
- en: (Some more practice with data validation!)
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: (Some more practice with data validation!)
- en: Solution
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: The solution to this problem is quite simple. The only thing that needs attention
    is that the user may enter the uppercase letters M, C, or T, or the lowercase
    letters m, c, or t. The program needs to accept both. To handle this, you can
    convert the user's input to uppercase using the upper() method. Then you need
    to check only for the M, C, or T characters in uppercase.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个问题的解决方案相当简单。唯一需要注意的事情是用户可能会输入大写字母M、C或T，或者小写字母m、c或t。程序需要接受这两种情况。为了处理这种情况，你可以使用upper()方法将用户的输入转换为大写。然后你需要检查大写的M、C或T字符。
- en: The Python program is shown here.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了Python程序。
- en: '![](img/my_exercise_header.png) file_22.1-3a'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.1-3a'
- en: v = input().upper()
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: v = input().upper()
- en: 'if v not in ["M", "C", "T"]:   #You need to check only for capital M, C, and
    T'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'if v not in ["M", "C", "T"]:    #只需检查大写M、C和T'
- en: print("Invalid vehicle")
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: print("Invalid vehicle")
- en: 'elif v == "M":'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif v == "M":'
- en: print("You need to pay $1")
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: print("You need to pay $1")
- en: 'elif v == "C":'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif v == "C":'
- en: print("You need to pay $2")
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: print("You need to pay $2")
- en: 'elif v == "T":'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif v == "T":'
- en: print("You need to pay $4")
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: print("You need to pay $4")
- en: '![](img/notice.jpg)Note how Python converts the user''s input to uppercase.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)注意Python如何将用户的输入转换为大写。'
- en: However, this exercise can be solved slightly more efficiently, if you move
    the first case of the multiple-alternative decision structure to the end, as shown
    here.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，如果你将多分支决策结构中的第一个情况移动到最后，就像这里所示，这个练习可以稍微高效地解决。
- en: '![](img/my_exercise_header.png) file_22.1-3b'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.1-3b'
- en: v = input().upper()
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: v = input().upper()
- en: 'if v == "M":'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 'if v == "M":'
- en: print("You need to pay $1")
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: print("You need to pay $1")
- en: 'elif v == "C":'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif v == "C":'
- en: print("You need to pay $2")
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: print("You need to pay $2")
- en: 'elif v == "T":'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif v == "T":'
- en: print("You need to pay $4")
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: print("You need to pay $4")
- en: 'else:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Invalid vehicle")
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: print("Invalid vehicle")
- en: Exercise 22.1-4 The Most Scientific Calculator Ever!
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: Exercise 22.1-4 The Most Scientific Calculator Ever!
- en: Write a Python that emulates the way an electronic calculator functions. The
    program must first prompt the user to enter a number, then the type of operation
    (+, −, *, /), and finally a second number. Subsequently, the program must perform
    the chosen operation and display the result. However, if the user enters an operand
    other than +, −, *, or /, an error message must be displayed.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序来模拟电子计算器的功能。程序必须首先提示用户输入一个数字，然后输入操作类型（+、−、*、/），最后输入第二个数字。随后，程序必须执行所选操作并显示结果。然而，如果用户输入的操作数不是+、−、*或/，必须显示错误信息。
- en: Solution
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: The only thing that you need to take care of in this exercise is the possibility
    the user could enter zero for the divisor (the second number). As you know from
    mathematics, division by zero is not possible.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你需要注意的唯一事情是用户可能会输入除数（第二个数字）为零的可能性。正如你所知，从数学的角度来看，除以零是不可能的。
- en: The following Python program uses the multiple-alternative decision structure
    to check the type of operation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 以下Python程序使用多分支决策结构来检查操作类型。
- en: '![](img/my_exercise_header.png) file_22.1-4'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.1-4'
- en: 'a = float(input("Enter 1st number: "))'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'a = float(input("Enter 1st number: "))'
- en: 'op = input("Enter type of operation: ")   #Variable op is of type string'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'op = input("Enter type of operation: ")    #变量op是字符串类型'
- en: 'b = float(input("Enter 2nd number: "))'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 'b = float(input("Enter 2nd number: "))'
- en: 'if op == "+":'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 'if op == "+":'
- en: print(a + b)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: print(a + b)
- en: 'elif op == "-":'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif op == "-":'
- en: print(a - b)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: print(a - b)
- en: 'elif op == "*":'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif op == "*":'
- en: print(a * b)
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: print(a * b)
- en: 'elif op == "/":'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif op == "/":'
- en: 'if b == 0:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 'if b == 0:'
- en: 'print("Error: Division by zero")'
  id: totrans-97
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'print("Error: Division by zero")'
- en: 'else:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print(a / b)
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(a / b)
- en: 'else:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'print("Error: Invalid operand")'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("Error: Invalid operand")'
- en: Exercise 22.1-5 Converting Gallons to Liters, and Vice Versa
  id: totrans-102
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 22.1-5 将加仑转换为升，反之亦然
- en: 'Write a Python program that displays the following menu:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个 Python 程序，显示以下菜单：
- en: 1)Convert gallons to liters
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将加仑转换为升
- en: 2)Convert liters to gallons
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将升转换为加仑
- en: The program must then prompt the user to enter a choice (of 1 or 2) and a quantity,
    and subsequently calculate and display the required value. It is given that
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 程序必须提示用户输入一个选择（1 或 2）和数量，然后计算并显示所需值。已知
- en: 1 gallon = 3.785 liters
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 1 加仑 = 3.785 升
- en: Solution
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The Python program is shown here.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Python 程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.1-5'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.1-5'
- en: COEFFICIENT = 3.785
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: COEFFICIENT = 3.785
- en: 'print("1: Gallons to liters")'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("1: Gallons to liters")'
- en: 'print("2: Liters to gallons")'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("2: Liters to gallons")'
- en: 'choice = int(input("Enter choice: "))'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 'choice = int(input("Enter choice: "))'
- en: 'quantity = float(input("Enter quantity: "))'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 'quantity = float(input("Enter quantity: "))'
- en: 'if choice == 1:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'if choice == 1:'
- en: result = quantity * COEFFICIENT
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: result = quantity * COEFFICIENT
- en: print(quantity, "gallons =", result, "liters")
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: print(quantity, "gallons =", result, "liters")
- en: 'else:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: result = quantity / COEFFICIENT
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: result = quantity / COEFFICIENT
- en: print(quantity, "liters =", result, "gallons")
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: print(quantity, "liters =", result, "gallons")
- en: Exercise 22.1-6 Converting Gallons to Liters, and Vice Versa (with Data Validation)
  id: totrans-122
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 22.1-6 将加仑转换为升，反之亦然（带有数据验证）
- en: Rewrite the Python program of the previous exercise to validate the data input.
    A different error message for each type of input error must be displayed when
    the user enters a choice other than 1 or 2, or a negative gas quantity.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 将上一个练习的 Python 程序重写为验证数据输入。当用户输入的选择不是 1 或 2，或输入的汽油数量为负数时，必须显示不同类型的输入错误消息。
- en: Solution
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The following Python program, given in general form, solves this exercise. It
    prompts the user to enter a choice. If the choice is invalid, it displays an error
    message; otherwise, it prompts the user to enter a quantity. However, if the quantity
    entered is invalid too, it displays another error message; otherwise it proceeds
    to data conversion, depending on the user's choice.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下 Python 程序以通用形式给出，用于解决此练习。它提示用户输入一个选择。如果选择无效，则显示错误消息；否则，它提示用户输入数量。然而，如果输入的数量也无效，则显示另一个错误消息；否则，它根据用户的选择进行数据转换。
- en: '![](img/my_exercise_header.png) Main Code'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) 主代码'
- en: COEFFICIENT = 3.785
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: COEFFICIENT = 3.785
- en: 'print("1: Gallons to liters")'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("1: Gallons to liters")'
- en: 'print("2: Liters to gallons")'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("2: Liters to gallons")'
- en: 'choice = int(input("Enter choice: "))'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'choice = int(input("Enter choice: "))'
- en: 'if choice not in [1, 2]:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 'if choice not in [1, 2]:'
- en: print("Wrong choice!")
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: print("Wrong choice!")
- en: 'else:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'quantity = float(input("Enter quantity: "))'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 'quantity = float(input("Enter quantity: "))'
- en: 'if quantity < 0:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 'if quantity < 0:'
- en: print("Invalid quantity!")
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Invalid quantity!")
- en: 'else:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'Code Fragment 1: Convert gallons to liters or liters to gallons depending on
    user’s choice.'
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 代码片段 1：根据用户选择将加仑转换为升或升转换为加仑。
- en: Code Fragment 1 shown below is taken from the previous exercise ([Exercise 22.1-5](#toc_6)).
    It converts gallons to liters, or liters to gallons, depending on the user's choice.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段 1 是从上一个练习（[练习 22.1-5](#toc_6)）中提取的。它根据用户的选择将加仑转换为升，或将升转换为加仑。
- en: '![](img/my_exercise_header.png) Code Fragment 1'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) 代码片段 1'
- en: 'if choice == 1:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 'if choice == 1:'
- en: result = quantity * COEFFICIENT
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: result = quantity * COEFFICIENT
- en: print(quantity, "gallons =", result, "liters")
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: print(quantity, "gallons =", result, "liters")
- en: 'else:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: result = quantity / COEFFICIENT
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: result = quantity / COEFFICIENT
- en: print(quantity, "liters =", result, "gallons")
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: print(quantity, "liters =", result, "gallons")
- en: After embedding Code Fragment 1 in Main Code, the final Python program becomes
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码片段 1 嵌入主代码后，最终的 Python 程序变为
- en: '![](img/my_exercise_header.png) file_22.1-6'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.1-6'
- en: COEFFICIENT = 3.785
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: COEFFICIENT = 3.785
- en: 'print("1: Gallons to liters")'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("1: Gallons to liters")'
- en: 'print("2: Liters to gallons")'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 'print("2: Liters to gallons")'
- en: 'choice = int(input("Enter choice: "))'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 'choice = int(input("Enter choice: "))'
- en: 'if choice not in [1, 2]:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 'if choice not in [1, 2]:'
- en: print("Wrong choice!")
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: print("Wrong choice!")
- en: 'else:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'quantity = float(input("Enter quantity: "))'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 'quantity = float(input("Enter quantity: "))'
- en: 'if quantity < 0:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'if quantity < 0:'
- en: print("Invalid quantity!")
  id: totrans-158
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Invalid quantity!")
- en: 'else:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: if choice == 1:                           [[More…]](more.html#more_22_1_6_1)
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if choice == 1:                           [[更多…]](more.html#more_22_1_6_1)
- en: result = quantity * COEFFICIENT
  id: totrans-161
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: result = quantity * COEFFICIENT
- en: print(quantity, "gallons =", result, "liters")
  id: totrans-162
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(quantity, "gallons =", result, "liters")
- en: 'else:'
  id: totrans-163
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'else:'
- en: result = quantity / COEFFICIENT
  id: totrans-164
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: result = quantity / COEFFICIENT
- en: print(quantity, "liters =", result, "gallons")
  id: totrans-165
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(quantity, "升 =", result, "加仑")
- en: 22.2 Finding Minimum and Maximum Values with Decision Control Structures
  id: totrans-166
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.2 使用决策控制结构查找最小值和最大值
- en: Suppose there are some men and you want to find the lightest one. Let's say
    that each one of them comes by and tells you his weight. What you must do is,
    memorize the weight of the first man that has come by and for each new man, you
    have to compare his weight with the one that you keep memorized. If he is heavier,
    you ignore his weight. However, if he is lighter, you need to forget the previous
    weight and memorize the new one. The same procedure continues until all the men
    have come by.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 假设有一些人，你想找到最轻的那个人。假设他们一个接一个地来告诉你他们的体重。你必须做的是，记住第一个来的人的体重，对于每个新来的人，你必须将他/她的体重与你记住的体重进行比较。如果他/她更重，你忽略他的体重。然而，如果他/她更轻，你需要忘记之前的体重并记住新的体重。同样的程序会继续进行，直到所有的人都来过。
- en: Let's ask four men to come by in a random order. Assume that their weights,
    in order of appearance, are 165, 170, 160, and 180 pounds.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们随机让四个人来。假设他们的体重，按出现的顺序，是165磅、170磅、160磅和180磅。
- en: '| Procedure | Value of Variable minimum in Your Mind! |'
  id: totrans-169
  prefs: []
  type: TYPE_TB
  zh: '| 程序 | 你心中变量minimum的值！ |'
- en: '| The first man comes by. He weighs 165 pounds. Keep his weight in your mind
    (imagine a variable in your mind named minimum). | minimum = 165 |'
  id: totrans-170
  prefs: []
  type: TYPE_TB
  zh: '| 第一个人来了。他重165磅。记住他的体重（想象一个名为minimum的变量）。 | minimum = 165 |'
- en: '| The second man comes by. He weighs 170 pounds. He does not weigh less than
    the weight you are keeping in variable minimum, so you must ignore his weight.
    Variable minimum in your mind still contains the value 165. | minimum = 165 |'
  id: totrans-171
  prefs: []
  type: TYPE_TB
  zh: '| 第二个人来了。他重170磅。他的体重不比你保存在变量minimum中的重量轻，所以你必须忽略他的体重。你心中的变量minimum仍然包含值165。
    | minimum = 165 |'
- en: '| The third man comes by. He weighs 160 pounds, which is less than the weight
    you are keeping in variable minimum, so you must forget the previous value and
    keep the value 160 in variable minimum. | minimum = 160 |'
  id: totrans-172
  prefs: []
  type: TYPE_TB
  zh: '| 第三个人来了。他重160磅，这个重量小于你保存在变量minimum中的重量，所以你必须忘记之前的值，并将变量minimum中的值保持为160。 |
    minimum = 160 |'
- en: '| The fourth man comes by. He weighs 180 pounds. He does not weigh less than
    the weight you are keeping in variable minimum, so you must ignore his weight.
    Variable minimum still contains the value 160. | minimum = 160 |'
  id: totrans-173
  prefs: []
  type: TYPE_TB
  zh: '| 第四个人来了。他重180磅。他的体重不比你保存在变量minimum中的重量轻，所以你必须忽略他的体重。你心中的变量minimum仍然包含值160。
    | minimum = 160 |'
- en: When the procedure finishes, the variable minimum in your mind contains the
    weight of the lightest man!
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当程序完成时，你心中的变量minimum包含了最轻人的体重！
- en: Following are the flowchart and the corresponding Python program that prompts
    the user to enter the weight of four men and then finds and displays the lightest
    weight.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是流程图和相应的Python程序，该程序提示用户输入四个人的体重，然后找到并显示最轻的体重。
- en: .![Image](img/chapter22-04.png)
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: .![图像](img/chapter22-04.png)
- en: '![](img/my_exercise_header.png) file_22.2'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '![我的练习标题](img/my_exercise_header.png) file_22.2'
- en: print("Enter the weight of four men:")
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: print("请输入四个人的体重：")
- en: w1 = int(input())
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: w1 = int(input())
- en: w2 = int(input())
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: w2 = int(input())
- en: w3 = int(input())
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: w3 = int(input())
- en: w4 = int(input())
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: w4 = int(input())
- en: '#Memorize the weight of the first man'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '#记住第一个人的体重'
- en: minimum = w1
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: minimum = w1
- en: '#If second man is lighter, forget previous'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '#如果第二个人更轻，忘记之前的值'
- en: '#value and memorize his weight'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '#记住第一个人的体重'
- en: 'if w2 < minimum:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 'if w2 < minimum:'
- en: minimum = w2
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: minimum = w2
- en: '#If third man is lighter, forget previous'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: '#如果第三个人更轻，忘记之前的值'
- en: '#value and memorize his weight'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '#记住第一个人的体重'
- en: 'if w3 < minimum:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 'if w3 < minimum:'
- en: minimum = w3
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: minimum = w3
- en: '#If fourth man is lighter, forget previous'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '#如果第四个人更轻，忘记之前的值'
- en: '#value and memorize his weight'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: '#记住第一个人的体重'
- en: 'if w4 < minimum:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 'if w4 < minimum:'
- en: minimum = w4
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: minimum = w4
- en: print(minimum)
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: print(minimum)
- en: '![](img/notice.jpg)Note that this program is trying to find out the lowest
    value and not which variable this value was actually assigned to.'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)请注意，这个程序试图找出最低值，而不是这个值实际分配给了哪个变量。'
- en: '![](img/notice.jpg)You can find the maximum instead of the minimum value by
    simply replacing the “less than” with a “greater than” operator in all Boolean
    expressions.'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '![注意](img/notice.jpg)你可以通过将所有布尔表达式中的“小于”运算符替换为“大于”运算符来找到最大值而不是最小值。'
- en: Exercise 22.2-1 Finding the Name of the Heaviest Person
  id: totrans-200
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.2-1 找到最重的人的名字
- en: Write a Python program that prompts the user to enter the weights and the names
    of three people and then displays the name and the weight of the heaviest person.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入三个人的体重和姓名，然后显示最重的人的姓名和体重。
- en: Solution
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: In this exercise, along with the maximum weight, you need to store in another
    variable the name of the person who actually has that weight. The Python program
    is shown here.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，除了最大体重外，还需要将实际拥有该体重的人的名字存储在另一个变量中。Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.2-1'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.2-1'
- en: 'w1 = int(input("Enter the weight of the 1st person: "))'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: w1 = int(input("输入第一个人的体重："))
- en: 'n1 = input("Enter the name of the 1st person: ")'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: n1 = input("输入第一个人的名字：")
- en: 'w2 = int(input("Enter the weight of the 2nd person: "))'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: w2 = int(input("输入第二个人的体重："))
- en: 'n2 = input("Enter the name of the 2nd person: ")'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: n2 = input("输入第二个人的名字：")
- en: 'w3 = int(input("Enter the weight of the 3rd person: "))'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: w3 = int(input("输入第三个人的体重："))
- en: 'n3 = input("Enter the name of the 3rd person: ")'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: n3 = input("输入第三个人的名字：")
- en: maximum = w1    #Memorize the weight
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = w1    #记住体重
- en: mName = n1      #and the name of the first person.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: mName = n1      #以及第一个人的名字。
- en: 'if w2 > maximum:    #If second person is heavier, forget previous values, and'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 'if w2 > maximum:    #如果第二个人更重，则忽略之前的值，并'
- en: maximum = w2    #memorize the weight
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = w2    #记住体重
- en: mName = n2      #and the name of the second person.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: mName = n2      #以及第二个人的名字。
- en: 'if w3 > maximum:    #If third person is heavier, forget previous values, and'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 'if w3 > maximum:    #如果第三个人更重，则忽略之前的值，并'
- en: maximum = w3    #memorize the weight
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: maximum = w3    #记住体重
- en: mName = n3      #and the name of the third person.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: mName = n3      #以及第三个人的名字。
- en: print("The heaviest person is", mName)
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: print("体重最重的人是", mName)
- en: print("Their weight is", maximum)
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: print("他们的体重是", maximum)
- en: '![](img/notice.jpg)In case the two heaviest people happen to have the same
    weight, the name of the first one in order is found and displayed.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)如果两个体重最重的人恰好体重相同，则找到并显示第一个人的名字。'
- en: 22.3 Decision Control Structures in Solving Mathematical Problems
  id: totrans-222
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.3 决策控制结构在解决数学问题中的应用
- en: Exercise 22.3-1 Finding the Value of y
  id: totrans-223
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.3-1 求y的值
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the value of y (if possible) in the following formula.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的Python程序，以找到并显示以下公式的y值（如果可能）。
- en: .![Image](img/chapter22-05.png)
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter22-05.png)
- en: Solution
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In this exercise, it's crucial to prevent the user from entering values of 0
    or 4, as they result in a zero denominator. Therefore, the program needs to take
    these restrictions into consideration. The flowchart is shown here.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，防止用户输入0或4的值至关重要，因为这些值会导致分母为零。因此，程序需要考虑这些限制。流程图如下所示。
- en: '![Image](img/chapter22-06.png)'
  id: totrans-228
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-06.png)'
- en: and the Python program is shown here.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 以及Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.3-1'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.3-1'
- en: x = float(input())
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: 'if x == 0 or x == 4:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x == 0 or x == 4:'
- en: 'print("Error: Division by zero!")'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: print("错误：除以零！")
- en: 'else:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = (5 + x) / x + (x + 9) / (x - 4)
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: y = (5 + x) / x + (x + 9) / (x - 4)
- en: print(y)
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: Exercise 22.3-2 Finding the Values of y
  id: totrans-237
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.3-2 求y的值
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the values of y (if possible) in the following formula.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的Python程序，以找到并显示以下公式的y值（如果可能）。
- en: .![Image](img/chapter22-07.png)
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter22-07.png)
- en: Solution
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The formula has two different results.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 该公式有两个不同的结果。
- en: ►When x is greater than or equal to zero, the value of y in ![Image](img/chapter22-08.png)
    can be found following the method shown in the previous exercise.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: ►当x大于或等于零时，![Image](img/chapter22-08.png)中y的值可以按照前一个练习中所示的方法找到。
- en: ►However, for an x less than zero, a small detail can save you some lines of
    code. Upon closer examination, it's evident that there are no restrictions on
    the fraction ![Image](img/chapter22-09.png) because x can never be +5; thus, the
    denominator will never be zero. This is because in the given formula x is less
    than zero!
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: ►然而，对于小于零的x，一个小的细节可以节省你一些代码行。仔细观察后，很明显，分数![Image](img/chapter22-09.png)没有限制，因为x永远不会是+5；因此，分母永远不会为零。这是因为给定的公式中x小于零！
- en: The flowchart is shown here.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图如下所示。
- en: '![Image](img/chapter22-10.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-10.png)'
- en: The Python program is shown here.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 该Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.3-2'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.3-2'
- en: x = float(input())
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: 'if x >= 0:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x >= 0:'
- en: 'if x == 0 or x == 3:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x == 0 or x == 3:'
- en: 'print("Error: Division by zero!")'
  id: totrans-251
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("错误：除以零！")
- en: 'else:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = (7 + x) / (x - 3) + (3 - x) / x
  id: totrans-253
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = (7 + x) / (x - 3) + (3 - x) / x
- en: print(y)
  id: totrans-254
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(y)
- en: 'else:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = 40 * x / (x - 5) + 3
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: y = 40 * x / (x - 5) + 3
- en: print(y)
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: Exercise 22.3-3 Solving the Linear Equation ax + b = 0
  id: totrans-258
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.3-3 解线性方程ax + b = 0
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the root of the linear equation
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的Python程序，以找到并显示线性方程的根
- en: ax + b = 0
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: ax + b = 0
- en: Solution
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In the equation ax + b = 0, the coefficients a and b are known real numbers,
    and x represents an unknown quantity to be found. Because x is raised to the first
    power, this equation is classified as a first-degree equation, also known as a
    linear equation.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在方程ax + b = 0中，系数a和b是已知的实数，x代表要找到的未知量。因为x是一次幂，所以这个方程被归类为一次方程，也称为线性方程。
- en: The root of the equation is the value of x for which this equation is satisfied;
    that is, the left side of the equality ax + b equals zero.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 方程的根是满足这个方程的x的值；也就是说，等式ax + b的左边等于零。
- en: In this exercise, the user must enter values for coefficients a and b, and the
    program must find the value of x for which ax + b equals zero.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，用户必须输入系数a和b的值，程序必须找到使得ax + b等于零的x的值。
- en: 'The equation ax + b = 0, when solved for x, becomes x = −b / a. Depending on
    the user''s entered data, three possible situations can arise:'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 当解方程ax + b = 0时，对于x的解变为x = −b / a。根据用户输入的数据，可能出现三种可能的情况：
- en: i)The user might enter the value 0 for coefficient a and a non-zero value for
    coefficient b. In this situation, the result of x = −b / a is undefined. The division
    by zero, as you already know from mathematics, cannot be performed.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: i)用户可能输入系数a的值为0，而系数b的值为非零值。在这种情况下，x = −b / a的结果是未定义的。正如您从数学中已经知道的，除以零是无法进行的。
- en: ii)The user might enter the value 0 for both coefficients a and b. In this situation,
    the result of x = −b / a has no defined value, and it is called an indeterminate
    form.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: ii)用户可能输入系数a和b的值都为0。在这种情况下，x = −b / a的结果没有定义的值，这被称为不定形式。
- en: iii)The user might enter any other pair of values.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: iii)用户可能输入任何其他一对值。
- en: These three situations and the resulting paths are represented below with the
    use of a multiple-alternative decision structure.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 下面使用多重选择决策结构表示这三种情况和相应的路径。
- en: '![Image](img/chapter22-11.png)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter22-11.png)'
- en: '![Image](img/chapter22-12.png)'
  id: totrans-271
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter22-12.png)'
- en: The Python program is shown here.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了Python程序。
- en: '![](img/my_exercise_header.png) file_22.3-3'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.3-3'
- en: print("Enter values for coefficients a and b")
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入系数a和b的值")
- en: a, b = float(input()), float(input())
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: a, b = float(input()), float(input())
- en: 'if a != 0:'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a != 0:'
- en: x = -b / a
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: x = -b / a
- en: print(x)
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: print(x)
- en: 'elif b != 0:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif b != 0:'
- en: print("Undefined")
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: print("未定义")
- en: 'else:'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Indeterminate form")
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: print("不定形式")
- en: Exercise 22.3-4 Solving the Quadratic Equation ax² + bx + c = 0
  id: totrans-283
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.3-4 解二次方程ax² + bx + c = 0
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the roots of the quadratic equation
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的Python程序，以找到并显示二次方程的根
- en: ax² + bx + c = 0
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: ax² + bx + c = 0
- en: Solution
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: In the equation ax² + bx + c = 0, the coefficients a, b, and c are known real
    numbers, and x represents an unknown quantity to be found. Because x is raised
    to the second power, this equation is classified as a second-degree equation,
    also known as a quadratic equation.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在方程ax² + bx + c = 0中，系数a、b和c是已知的实数，x代表要找到的未知量。因为x是平方的，所以这个方程被归类为二次方程，也称为二次方程。
- en: The roots of the equation are the values of x, for which this equation is satisfied;
    that is, the left side of the equality ax² + bx + c equals zero.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 方程的根是满足这个方程的x的值；也就是说，等式ax² + bx + c的左边等于零。
- en: In this exercise, the user must enter values for coefficients a, b, and c, and
    the program must find the value(s) of x for which ax² + bx + c  equals zero.
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，用户必须输入系数a、b和c的值，程序必须找到使得ax² + bx + c等于零的x的值。
- en: This problem can be divided into two individual subproblems depending on the
    value of coefficient a.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 根据系数a的值，这个问题可以分为两个独立的子问题。
- en: i)If coefficient a is not equal to zero, the roots of the equation can be found
    using the discriminant D. Please note that the solution to this exercise presented
    below finds no complex roots when D < 0; this is beyond the scope of this book.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: i)如果系数a不等于零，可以使用判别式D找到方程的根。请注意，下面这个练习的解决方案在D < 0时找不到复数根；这超出了本书的范围。
- en: ii)If coefficient a is equal to zero, the equation becomes a linear equation,
    bx + c = 0, for which the solution was provided in the previous exercise ([Exercise
    22.3-3](#toc_13)).
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: ii)如果系数 a 等于零，方程变为线性方程 bx + c = 0，其解已在之前的练习中提供（[练习 22.3-3](#toc_13)）。
- en: All necessary paths are shown here.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 所有必要的路径都显示在此处。
- en: '![Image](img/chapter22-13.png)'
  id: totrans-294
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-13.png)'
- en: '![](img/notice.jpg)The path on the right (a = 0) is the solution to the linear
    equation bx + c = 0.'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)右侧路径（a = 0）是线性方程 bx + c = 0 的解。'
- en: Using this diagram you can design the following flowchart.
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 使用此图可以设计以下流程图。
- en: '![Image](img/chapter22-14.png)'
  id: totrans-297
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-14.png)'
- en: The Python program is shown here.
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: The Python program is shown here.
- en: '![](img/my_exercise_header.png) file_22.3-4'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.3-4'
- en: from math import sqrt
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: from math import sqrt
- en: print("Enter values for coefficients a, b and c")
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入系数 a，b 和 c 的值")
- en: a, b, c = float(input()), float(input()), float(input())
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: a, b, c = float(input()), float(input()), float(input())
- en: 'if a != 0:'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a != 0:'
- en: D = b ** 2 - 4 * a * c
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: D = b ** 2 - 4 * a * c
- en: 'if D >= 0:'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: 'if D >= 0:'
- en: 'if D > 0:'
  id: totrans-306
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'if D > 0:'
- en: x1 = (-b + sqrt(D)) / (2 * a)
  id: totrans-307
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x1 = (-b + sqrt(D)) / (2 * a)
- en: x2 = (-b - sqrt(D)) / (2 * a)
  id: totrans-308
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x2 = (-b - sqrt(D)) / (2 * a)
- en: print("Roots:", x1, ",", x2)
  id: totrans-309
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Roots:", x1, ",", x2)
- en: 'else:'
  id: totrans-310
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'else:'
- en: x = -b / (2 * a)
  id: totrans-311
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = -b / (2 * a)
- en: print("One double root:", x)
  id: totrans-312
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("One double root:", x)
- en: 'else:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Complex Roots")
  id: totrans-314
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Complex Roots")
- en: 'else:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if b != 0:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 'if b != 0:'
- en: x = -c / b
  id: totrans-317
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = -c / b
- en: print("Root:", x)
  id: totrans-318
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Root:", x)
- en: 'elif c != 0:'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif c != 0:'
- en: print("Undefined")
  id: totrans-320
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Undefined")
- en: 'else:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Indeterminate form")
  id: totrans-322
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Indeterminate form")
- en: 22.4 Exercises with Series of Consecutive Ranges of Values
  id: totrans-323
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.4 使用连续值范围的练习
- en: As you have already seen, in many problems the value of a variable or the result
    of an expression can define which statement or block of statements must be executed.
    In the exercises that follow, you will learn how to test if a value or the result
    of an expression belongs within a specific range of values (from a series of consecutive
    ranges of values).
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您已经看到的，在许多问题中，变量的值或表达式的结果可以定义必须执行哪个语句或语句块。在接下来的练习中，您将学习如何测试一个值或表达式的结果是否属于特定的值范围（一系列连续的值范围）。
- en: Suppose that you want to display a message indicating the types of clothes a
    woman might wear at different temperatures.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您想显示一条消息，指示女性在不同温度下可能穿的衣服类型。
- en: '| Outdoor Temperature (in degrees Fahrenheit) | Types of Clothes a Woman Might
    Wear |'
  id: totrans-326
  prefs: []
  type: TYPE_TB
  zh: '| 室外温度（华氏度） | 女性可能穿的衣服类型 |'
- en: '| Temperature < 45 | Sweater, coat, jeans, shirt, shoes |'
  id: totrans-327
  prefs: []
  type: TYPE_TB
  zh: '| 温度 < 45 | 毛衣，大衣，牛仔裤，衬衫，鞋子 |'
- en: '| 45 ≤ Temperature < 65 | Sweater, jeans, jacket, shoes |'
  id: totrans-328
  prefs: []
  type: TYPE_TB
  zh: '| 45 ≤ 温度 < 65 | 毛衣，牛仔裤，夹克，鞋子 |'
- en: '| 65 ≤ Temperature < 75 | Capris, shorts, t‑shirt, tank top, flip flops, athletic
    shoes |'
  id: totrans-329
  prefs: []
  type: TYPE_TB
  zh: '| 65 ≤ 温度 < 75 | 七分裤，短裤，T恤，无袖衫，人字拖，运动鞋 |'
- en: '| 75 ≤ Temperature | Shorts, t‑shirt, tank top, skort, skirt, flip flops |'
  id: totrans-330
  prefs: []
  type: TYPE_TB
  zh: '| 75 ≤ 温度 | 短裤，T恤，无袖衫，半身裙，裙子，人字拖 |'
- en: At first glance, single-alternative decision structures might seem like the
    logical choice. While not incorrect, a more in-depth analysis reveals that each
    condition is interdependent, meaning that when one of these evaluates to True,
    none of the others should be evaluated. You need to select just one alternative
    from a set of possibilities.
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 初看起来，单分支决策结构可能似乎是逻辑选择。虽然并不错误，但更深入的分析揭示，每个条件都是相互依赖的，这意味着当其中一个评估为 True 时，其他都不应该被评估。您需要从一组可能性中选择一个替代方案。
- en: To solve this type of exercise, you can use a multiple-alternative decision
    structure or nested decision control structures. However, the former is the best
    choice, as it is more convenient and increases readability, as you can see in
    the code fragment that follows.
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: 解决此类练习，您可以使用多分支决策结构或嵌套决策控制结构。然而，前者是最佳选择，因为它更方便，并且可以提高可读性，正如您在下面的代码片段中可以看到。
- en: 'if temperature < 45:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: 'if 温度 < 45:'
- en: print("Sweater, coat, jeans, shirt, shoes")
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: print("毛衣，大衣，牛仔裤，衬衫，鞋子")
- en: 'elif temperature >= 45 and temperature < 65:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 温度 >= 45 且 温度 < 65:'
- en: print("Sweater, jeans, jacket, shoes")
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: print("毛衣，牛仔裤，夹克，鞋子")
- en: 'elif temperature >= 65 and temperature < 75:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 温度 >= 65 且 温度 < 75:'
- en: print("Capris, shorts, t-shirt, tank top, flip flops, athletic shoes")
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: print("七分裤，短裤，T恤，无袖衫，人字拖，运动鞋")
- en: 'elif temperature >= 75:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif 温度 >= 75:'
- en: print("Shorts, t-shirt, tank top, skort, skirt, flip flops")
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: print("短裤，T恤，无袖衫，半身裙，裙子，人字拖")
- en: However, upon closer examination, it becomes apparent that all the underlined
    Boolean expressions are not actually required. For example, if the first Boolean
    expression (temperature < 45) evaluates to False, the flow of execution continues
    to evaluate the second Boolean expression. In this step, however, variable temperature
    is definitely greater than or equal to 45 because of the first Boolean expression,
    which has already evaluated to False. Therefore, the Boolean expression temperature
    >= 45, when evaluated, is certainly True and thus can be omitted. The same logic
    applies to all cases; you can omit all the underlined Boolean expressions. The
    final code fragment is shown here, with all unnecessary evaluations removed.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，仔细检查后，很明显所有下划线的布尔表达式实际上并不需要。例如，如果第一个布尔表达式（temperature < 45）评估为False，则执行流程将继续评估第二个布尔表达式。然而，由于第一个布尔表达式已经评估为False，变量temperature肯定大于或等于45。因此，当评估布尔表达式temperature
    >= 45时，肯定为True，因此可以省略。相同的逻辑适用于所有情况；可以省略所有下划线的布尔表达式。最终的代码片段如下，已移除所有不必要的评估。
- en: 'if temperature < 45:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 'if temperature < 45:'
- en: print("Sweater, coat, jeans, shirt, shoes")
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: print("毛衣，外套，牛仔裤，衬衫，鞋子")
- en: 'elif temperature < 65:'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif temperature < 65:'
- en: print("Sweater, jeans, jacket, shoes")
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: print("毛衣，牛仔裤，夹克，鞋子")
- en: 'elif temperature < 75:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif temperature < 75:'
- en: print("Capris, shorts, t-shirt, tank top, flip flops, athletic shoes")
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: print("七分裤，短裤，T恤，无袖衫，人字拖，运动鞋")
- en: 'else:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Shorts, t-shirt, tank top, skort, skirt, flip flops")
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: print("短裤，T恤，无袖衫，半身裙，裙子，人字拖")
- en: Exercise 22.4-1 Calculating the Discount
  id: totrans-350
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 22.4-1 计算折扣
- en: A customer receives a discount based on the total amount of their order. If
    the total amount ordered is less than $30, no discount is given. If the total
    amount is equal to or greater than $30 and less than $70, a discount of 5% is
    applied. If the total amount is equal to or greater than $70 and less than $150,
    a discount of 10% is applied. If the total amount is $150 or more, the customer
    receives a discount of 20%. Write a Python program that prompts the user to enter
    the total amount of their order and then calculates and displays the applied discount
    rate, the discount amount in dollars, and the final after-discount amount. Assume
    that the user enters a non-negative value for the amount.
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: 根据客户订单的总金额，客户将获得相应的折扣。如果订单总金额少于30美元，则不提供折扣。如果订单总金额等于或大于30美元且小于70美元，则应用5%的折扣。如果订单总金额等于或大于70美元且小于150美元，则应用10%的折扣。如果订单总金额为150美元或更多，则客户将获得20%的折扣。编写一个Python程序，提示用户输入订单总金额，然后计算并显示应用的折扣率、折扣金额（美元）和折扣后的最终金额。假设用户输入的金额为非负值。
- en: Solution
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The following table summarizes the various discounts that are offered.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 以下表格总结了提供的各种折扣。
- en: '| Range | Discount |'
  id: totrans-354
  prefs: []
  type: TYPE_TB
  zh: '| 范围 | 折扣 |'
- en: '| amount < $30 | 0% |'
  id: totrans-355
  prefs: []
  type: TYPE_TB
  zh: '| amount < $30 | 0% |'
- en: '| $30 ≤ amount < $70 | 5% |'
  id: totrans-356
  prefs: []
  type: TYPE_TB
  zh: '| $30 ≤ amount < $70 | 5% |'
- en: '| $70 ≤ amount < $150 | 10% |'
  id: totrans-357
  prefs: []
  type: TYPE_TB
  zh: '| $70 ≤ amount < $150 | 10% |'
- en: '| $150 ≤ amount | 20% |'
  id: totrans-358
  prefs: []
  type: TYPE_TB
  zh: '| $150 ≤ amount | 20% |'
- en: The Python program is as follows.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: Python程序如下。
- en: '![](img/my_exercise_header.png) file_22.4-1a'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.4-1a'
- en: 'amount = float(input("Enter total amount: "))'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 'amount = float(input("输入总金额: "))'
- en: 'if amount < 30:'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: 'if amount < 30:'
- en: discount = 0
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 0
- en: 'elif amount >= 30 and amount < 70:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount >= 30 and amount < 70:'
- en: discount = 5
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 5
- en: 'elif amount >= 70 and amount < 150:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount >= 70 and amount < 150:'
- en: discount = 10
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 10
- en: 'elif amount >= 150:'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount >= 150:'
- en: discount = 20
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 20
- en: discountAmount = amount * discount / 100
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: discountAmount = amount * discount / 100
- en: finalAmount = amount - discountAmount
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: finalAmount = amount - discountAmount
- en: print("You got a discount of ", discount, "%", sep = "")
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: print("您获得了", discount, "%的折扣", sep = "")
- en: print("You saved $", discountAmount, sep = "")
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: print("您节省了 $", discountAmount, sep = "")
- en: print("You must pay $", finalAmount, sep = "")
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: print("您必须支付 $", finalAmount, sep = "")
- en: However, since it is given that the user enters valid values and not negative
    ones, all the underlined Boolean expressions are not actually required. The final
    Python program is shown here, with all unnecessary evaluations removed.
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，由于已知用户输入的是有效值而非负值，因此所有下划线的布尔表达式实际上并不需要。最终的Python程序如下，已移除所有不必要的评估。
- en: '![](img/my_exercise_header.png) file_22.4-1b'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.4-1b'
- en: 'amount = float(input("Enter total amount: "))'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: 'amount = float(input("输入总金额: "))'
- en: 'if amount < 30:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 'if amount < 30:'
- en: discount = 0
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 0
- en: 'elif amount < 70:'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount < 70:'
- en: discount = 5
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 5
- en: 'elif amount < 150:'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount < 150:'
- en: discount = 10
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 10
- en: 'else:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: discount = 20
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 20
- en: discountAmount = amount * discount / 100
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: discountAmount = amount * discount / 100
- en: finalAmount = amount - discountAmount
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: finalAmount = amount - discountAmount
- en: print("You got a discount of ", discount, "%", sep = "")
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: print("您获得了", discount, "%的折扣", sep = "")
- en: print("You saved $", discountAmount, sep = "")
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: print("您节省了$", discountAmount, sep = "")
- en: print("You must pay $", finalAmount, sep = "")
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: print("您必须支付$", finalAmount, sep = "")
- en: Exercise 22.4-2 Validating Data Input and Calculating the Discount
  id: totrans-391
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.4-2 验证数据输入和计算折扣
- en: Rewrite the Python program of the previous exercise to validate the data input.
    An error message must be displayed when the user enters a negative value.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 将之前练习的Python程序重写为验证数据输入。当用户输入负值时，必须显示错误信息。
- en: Solution
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: The Python program that solves this exercise, given in general form, is as follows.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 解决这个练习的Python程序以一般形式给出如下。
- en: '![](img/my_exercise_header.png) Main Code'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) 主代码'
- en: 'amount = float(input("Enter total amount: "))'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: 'amount = float(input("输入总金额: "))'
- en: 'if amount < 0:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 'if amount < 0:'
- en: print("Entered value is negative")
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入的值是负数")
- en: 'else:'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'Code Fragment 1: Calculate and display the applied discount rate, the discount
    amount and the final after-discount amount.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段1：计算并显示应用的折扣率、折扣金额和折扣后的最终金额。
- en: Code Fragment 1 that follows is taken from the previous exercise ([Exercise
    22.4-1](#toc_16)). It calculates and displays the applied discount rate, the discount
    amount in dollars, and the final after-discount amount.
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段1来自之前的练习([练习22.4-1](#toc_16))。它计算并显示应用的折扣率、折扣金额（美元）以及折扣后的最终金额。
- en: '![](img/my_exercise_header.png) Code Fragment 1'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) 代码片段1'
- en: 'if amount < 30:'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 'if amount < 30:'
- en: discount = 0
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 0
- en: 'elif amount < 70:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount < 70:'
- en: discount = 5
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 5
- en: 'elif amount < 150:'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount < 150:'
- en: discount = 10
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 10
- en: 'else:'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: discount = 20
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: discount = 20
- en: discountAmount = amount * discount / 100
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: discountAmount = amount * discount / 100
- en: finalAmount = amount - discountAmount
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: finalAmount = amount - discountAmount
- en: print("You got a discount of ", discount, "%", sep = "")
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: print("您获得了", discount, "%的折扣", sep = "")
- en: print("You saved $", discountAmount, sep = "")
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: print("您节省了$", discountAmount, sep = "")
- en: print("You must pay $", finalAmount, sep = "")
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: print("您必须支付$", finalAmount, sep = "")
- en: After embedding Code Fragment 1 in Main Code, the final Python program becomes
  id: totrans-416
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码片段1嵌入主代码后，最终的Python程序变为
- en: '![](img/my_exercise_header.png) file_22.4-2'
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.4-2'
- en: 'amount = float(input("Enter total amount: "))'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: 'amount = float(input("输入总金额: "))'
- en: 'if amount < 0:'
  id: totrans-419
  prefs: []
  type: TYPE_NORMAL
  zh: 'if amount < 0:'
- en: print("Entered value is negative")
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: print("输入的值是负数")
- en: 'else:'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: if amount < 30:                                 [[More…]](more.html#more_22_4_2_1)
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: if amount < 30:                                 [[更多…]](more.html#more_22_4_2_1)
- en: discount = 0
  id: totrans-423
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: discount = 0
- en: 'elif amount < 70:'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount < 70:'
- en: discount = 5
  id: totrans-425
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: discount = 5
- en: 'elif amount < 150:'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif amount < 150:'
- en: discount = 10
  id: totrans-427
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: discount = 10
- en: 'else:'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: discount = 20
  id: totrans-429
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: discount = 20
- en: discountAmount = amount * discount / 100
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: discountAmount = amount * discount / 100
- en: finalAmount = amount - discountAmount
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: finalAmount = amount - discountAmount
- en: print("You got a discount of ", discount, "%", sep = "")
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: print("您获得了", discount, "%的折扣", sep = "")
- en: print("You saved $", discountAmount, sep = "")
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: print("您节省了$", discountAmount, sep = "")
- en: print("You must pay $", finalAmount, sep = "")
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: print("您必须支付$", finalAmount, sep = "")
- en: Exercise 22.4-3 Sending a Parcel
  id: totrans-435
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.4-3 发送包裹
- en: In a post office, the shipping cost for sending a medium parcel depends on its
    weight and whether its destination is inside or outside the country. Shipping
    costs are calculated according to the following table.
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: 在邮局，发送中等包裹的运费取决于其重量以及目的地是否在国内。运费根据以下表格计算。
- en: '| Parcel''s Weight (in lb) | Destination Inside the Country (in USD per lb)
    | Destination Outside the Country (in USD) |'
  id: totrans-437
  prefs: []
  type: TYPE_TB
  zh: '| 包裹重量（磅） | 国内目的地（每磅美元） | 国外目的地（美元） |'
- en: '| weight ≤ 1 | $0.010 | $10 |'
  id: totrans-438
  prefs: []
  type: TYPE_TB
  zh: '| weight ≤ 1 | $0.010 | $10 |'
- en: '| 1 < weight ≤ 2 | $0.013 | $20 |'
  id: totrans-439
  prefs: []
  type: TYPE_TB
  zh: '| 1 < weight ≤ 2 | $0.013 | $20 |'
- en: '| 2 < weight ≤ 4 | $0.015 | $50 |'
  id: totrans-440
  prefs: []
  type: TYPE_TB
  zh: '| 2 < weight ≤ 4 | $0.015 | $50 |'
- en: '| 4 < weight | $0.020 | $60 |'
  id: totrans-441
  prefs: []
  type: TYPE_TB
  zh: '| 4 < weight | $0.020 | $60 |'
- en: 'Design a flowchart and write the corresponding Python program that prompts
    the user to enter the weight of a parcel and its destination (I: inside the country,
    O: outside the country) and then calculates and displays the shipping cost.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的Python程序，提示用户输入包裹的重量及其目的地（I：国内，O：国外）然后计算并显示运费。
- en: Solution
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: The following flowchart, given in general form, solves this exercise.
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图以一般形式给出，解决了这个练习。
- en: '![Image](img/chapter22-15.png)'
  id: totrans-445
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/chapter22-15.png)'
- en: Now you need two multiple-alternative decision structures to calculate the shipping
    cost for parcels sent inside and outside the country. These are shown in the respective
    left and right flowchart fragments below.
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你需要两个多分支决策结构来计算国内和国内外的包裹的运费。这些分别显示在下方的左侧和右侧流程图片段中。
- en: '![Image](img/chapter22-16.png)'
  id: totrans-447
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-16.png)'
- en: After combining these two flowcharts with the previous one, the final flowchart
    becomes
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: 将这两个流程图与之前的流程图合并后，最终的流程图变为
- en: '![Image](img/chapter22-17.png)'
  id: totrans-449
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-17.png)'
- en: The corresponding Python program is shown here.
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 相应的 Python 程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.4-3'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.4-3'
- en: 'print("Enter weight & destination: ")'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: print("请输入重量和目的地：")
- en: weight = float(input())
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: weight = float(input())
- en: dest = input()
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: dest = input()
- en: 'if dest.upper() == "I":'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: 'if dest.upper() == "I":'
- en: if weight <= 1:    [[More…]](more.html#more_22_4_3_1)
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: if weight <= 1:    [[更多…]](more.html#more_22_4_3_1)
- en: cost = weight * 0.010
  id: totrans-457
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cost = weight * 0.010
- en: 'elif weight <= 2:'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif weight <= 2:'
- en: cost = weight * 0.013
  id: totrans-459
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cost = weight * 0.013
- en: 'elif weight <= 4:'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif weight <= 4:'
- en: cost = weight * 0.015
  id: totrans-461
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cost = weight * 0.015
- en: 'else:'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: cost = weight * 0.020
  id: totrans-463
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cost = weight * 0.020
- en: 'else:'
  id: totrans-464
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: if weight <= 1:    [[More…]](more.html#more_22_4_3_2)
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: if weight <= 1:    [[更多…]](more.html#more_22_4_3_2)
- en: cost = 10
  id: totrans-466
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cost = 10
- en: 'elif weight <= 2:'
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif weight <= 2:'
- en: cost = 20
  id: totrans-468
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cost = 20
- en: 'elif weight <= 4:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif weight <= 4:'
- en: cost = 50
  id: totrans-470
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cost = 50
- en: 'else:'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: cost = 60
  id: totrans-472
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: cost = 60
- en: print("Shipping cost:", cost)
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: print("运费：", cost)
- en: '![](img/notice.jpg)A user may enter the letter I (for destination) in lowercase
    or uppercase. The method upper() ensures that the program executes properly for
    both cases.'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)用户可以以小写或大写形式输入字母 I（表示目的地）。upper() 方法确保程序在两种情况下都能正确执行。'
- en: Exercise 22.4-4 Finding the Values of y
  id: totrans-475
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 22.4-4 求解 y 的值
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the values of y (if possible) in the following formula
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的 Python 程序，以找到并显示以下公式的 y 值（如果可能）。
- en: '![Image](img/chapter22-18.png)'
  id: totrans-477
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-18.png)'
- en: Solution
  id: totrans-478
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: 'In this exercise, there are two restrictions on the fractions:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，对分数有两个限制：
- en: ►In fraction ![Image](img/chapter22-19.png), the value of x cannot be −1.
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: ►在分数 ![Image](img/chapter22-19.png) 中，x 的值不能为 −1。
- en: ►In fraction ![Image](img/chapter22-20.png), the value of x cannot be +9.
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: ►在分数 ![Image](img/chapter22-20.png) 中，x 的值不能为 +9。
- en: For all other fractions, it's impossible for the denominators to be set to zero
    because of the range in which x belongs.
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: 对于所有其他分数，由于 x 所属的范围，分母不可能设置为 0。
- en: The Python program is shown here.
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: Python 程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.4-4a'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.4-4a'
- en: 'x = float(input("Enter a value for x: "))'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input("请输入 x 的值："))
- en: 'if x > -5 and x <= 0:'
  id: totrans-486
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x > -5 and x <= 0:'
- en: if x != -1:                   [[More…]](more.html#more_22_4_4_a1)
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: if x != -1:                   [[更多…]](more.html#more_22_4_4_a1)
- en: y = x / (x - 3) + (8 + x) / (x + 1)
  id: totrans-488
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = x / (x - 3) + (8 + x) / (x + 1)
- en: print(y)
  id: totrans-489
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(y)
- en: 'else:'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Invalid value")
  id: totrans-491
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("无效值")
- en: 'elif x > 0 and x <= 6:'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x > 0 and x <= 6:'
- en: y = 40 * x / (x - 8)        [[More…]](more.html#more_22_4_4_a2)
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: y = 40 * x / (x - 8)        [[更多…]](more.html#more_22_4_4_a2)
- en: print(y)
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: 'elif x > 6 and x <= 20:'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x > 6 and x <= 20:'
- en: if x != 9:             [[More…]](more.html#more_22_4_4_a3)
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: if x != 9:             [[更多…]](more.html#more_22_4_4_a3)
- en: y = 3 * x / (x - 9)
  id: totrans-497
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 3 * x / (x - 9)
- en: print(y)
  id: totrans-498
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(y)
- en: 'else:'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Invalid value")
  id: totrans-500
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("无效值")
- en: 'else:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = abs(x)      [[More…]](more.html#more_22_4_4_a4)
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: y = abs(x)      [[更多…]](more.html#more_22_4_4_a4)
- en: print(y)
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: If you are wondering whether you can remove all print(y) statements and instead
    have a single print(y) statement at the end of the program, the answer is “no”.
    Since there are paths that do not include that statement, you must include it
    in every required path. However, by making a slight modification to the code and
    checking for invalid values at the beginning, you can have the opportunity to
    move the print(y) statement to the end of all paths. The modified Python program
    is shown here.
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想知道是否可以移除所有的 print(y) 语句，并在程序末尾只保留一个 print(y) 语句，答案是“不可以”。由于存在不包含该语句的路径，你必须在每个必要的路径中都包含它。然而，通过稍微修改代码并在开始时检查无效值，你可以有机会将
    print(y) 语句移动到所有路径的末尾。修改后的 Python 程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.4-4b'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.4-4b'
- en: 'x = float(input("Enter a value for x: "))'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input("请输入 x 的值："))
- en: 'if x == -1 or x == 9:'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x == -1 or x == 9:'
- en: print("Invalid value")
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: print("无效值")
- en: 'else:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if x > -5 and x <= 0:'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x > -5 and x <= 0:'
- en: y = x / (x - 3) + (8 + x) / (x + 1)
  id: totrans-511
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = x / (x - 3) + (8 + x) / (x + 1)
- en: 'elif x > 0 and x <= 6:'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x > 0 and x <= 6:'
- en: y = 40 * x / (x - 8)
  id: totrans-513
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 40 * x / (x - 8)
- en: 'elif x > 6 and x <= 20:'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x > 6 and x <= 20:'
- en: y = 3 * x / (x - 9)
  id: totrans-515
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 3 * x / (x - 9)
- en: 'else:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = abs(x)
  id: totrans-517
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = abs(x)
- en: print(y)
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: Now, you might be wondering if the underlined Boolean expressions are redundant,
    right? Suppose you do remove them, and the user enters a value of −20 for x. The
    flow of execution would then reach the Boolean expression x <= 0, which would
    evaluate to True. This means that the fraction ![Image](img/chapter22-21.png)
    would be calculated instead of the absolute value of x.
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可能想知道下划线的布尔表达式是否是多余的，对吧？假设你移除了它们，并且用户输入了x的值为-20。执行流程随后会到达布尔表达式x <= 0，这将评估为True。这意味着将计算![Image](img/chapter22-21.png)的分数而不是x的绝对值。
- en: To be able to remove the underlined Boolean expressions, you need to make a
    slight modification to the code. The key here is to first examine the case of
    the absolute value of x. Following that, you can find a proposed solution below.
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: 为了能够移除下划线的布尔表达式，你需要对代码进行轻微的修改。关键在于首先检查x的绝对值的情况。在此之后，你可以找到一个提出的解决方案。
- en: '![](img/my_exercise_header.png) file_22.4-4c'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.4-4c'
- en: 'x = float(input("Enter a value for x: "))'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: 'x = float(input("Enter a value for x: "))'
- en: 'if x == -1 or x == 9:'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x == -1 or x == 9:'
- en: print("Invalid value")
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: print("Invalid value")
- en: 'else:'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if x <= -5 or x > 20:'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x <= -5 or x > 20:'
- en: y = abs(x)
  id: totrans-527
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = abs(x)
- en: 'elif x <= 0:'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x <= 0:'
- en: y = x / (x - 3) + (8 + x) / (x + 1)
  id: totrans-529
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = x / (x - 3) + (8 + x) / (x + 1)
- en: 'elif x <= 6:'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x <= 6:'
- en: y = 40 * x / (x - 8)
  id: totrans-531
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 40 * x / (x - 8)
- en: 'else:'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y = 3 * x / (x - 9)
  id: totrans-533
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 3 * x / (x - 9)
- en: print(y)
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: print(y)
- en: '![](img/notice.jpg)It is obvious that one problem can have many solutions.
    It is up to you to find the optimal one!'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)显然，一个问题可以有多个解决方案。取决于你找到最优解！'
- en: Exercise 22.4-5 Progressive Rates and Electricity Consumption
  id: totrans-536
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 22.4-5 递增费率和电力消耗
- en: The LAV Electricity Company charges subscribers for their electricity consumption
    according to the following table (monthly rates for domestic accounts). Assume
    that all extra charges such as transmission service charges and distribution charges
    are all included.
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: LAV电力公司根据以下表格（家庭账户的月度费率）向用户收取电费。假设所有额外费用，如传输服务费和分配费都已包括在内。
- en: '| Kilowatt‑hours (kWh) | USD per kWh |'
  id: totrans-538
  prefs: []
  type: TYPE_TB
  zh: '| 千瓦时（kWh）| 美元/千瓦时 |'
- en: '| kWh ≤ 500 | $0.10 |'
  id: totrans-539
  prefs: []
  type: TYPE_TB
  zh: '| 千瓦时（kWh）≤ 500 | 美元/千瓦时 $0.10 |'
- en: '| 501 ≤ kWh ≤ 2000 | $0.25 |'
  id: totrans-540
  prefs: []
  type: TYPE_TB
  zh: '| 501 ≤ kWh ≤ 2000 | 美元/千瓦时 $0.25 |'
- en: '| 2001 ≤ kWh ≤ 4500 | $0.40 |'
  id: totrans-541
  prefs: []
  type: TYPE_TB
  zh: '| 2001 ≤ kWh ≤ 4500 | 美元/千瓦时 $0.40 |'
- en: '| 4501 ≤ kWh | $0.60 |'
  id: totrans-542
  prefs: []
  type: TYPE_TB
  zh: '| 4501 ≤ kWh | 美元/千瓦时 $0.60 |'
- en: Write a Python program that prompts the user to enter the total number of kWh
    consumed and then calculates and displays the total amount to pay.
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入消耗的总千瓦时数，然后计算并显示应付的总金额。
- en: Please note that the rates are progressive.
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，费率是递增的。
- en: Solution
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: The term progressive rates means that when a customer consumes, for example,
    2200 kWh, not all of the kilowatt-hours are charged at $0.40\. The first 500 kWh
    are charged at $0.10, the next 1500 kWh are charged at $0.25 and only the last
    200 kWh are charged at $0.40\. Thus, the customer must pay
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: 递增费率这个术语意味着当客户消耗，例如，2200千瓦时时，并不是所有的千瓦时都按$0.40收费。前500千瓦时按$0.10收费，接下来的1500千瓦时按$0.25收费，只有最后的200千瓦时按$0.40收费。因此，客户必须支付
- en: 500 × $0.10 + 1500 × $0.25 + 200 × $0.40 = $505
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: 500 × $0.10 + 1500 × $0.25 + 200 × $0.40 = $505
- en: Applying the same logic, the total amount to be paid when the customer consumes,
    say, 4800 kWh can be calculated as follows. The first 500 kWh are charged at $0.10,
    the next 1500 kWh are charged at $0.25, the next 2500 kWh are charged at 0.40,
    and only the last 300 kWh are charged at $0.60\. Thus, the customer must pay
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: 应用相同的逻辑，当客户消耗，比如说，4800千瓦时时，应付的总金额可以按以下方式计算。前500千瓦时按$0.10收费，接下来的1500千瓦时按$0.25收费，接下来的2500千瓦时按0.40收费，只有最后300千瓦时按$0.60收费。因此，客户必须支付
- en: 500 × $0.10 + 1500 × $0.25 + 2500 × $0.40 + 300 × $0.60 = $1605
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: 500 × $0.10 + 1500 × $0.25 + 2500 × $0.40 + 300 × $0.60 = $1605
- en: The following diagram can help you fully understand how to calculate the total
    amount to pay when the rates are progressive.
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: 下面的图表可以帮助你完全理解如何在费率递增时计算应付的总金额。
- en: '![Image](img/chapter22-22.png)'
  id: totrans-551
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-22.png)'
- en: The Python program is shown here.
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: 这里展示了Python程序。
- en: '![](img/my_exercise_header.png) file_22.4-5'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.4-5'
- en: 'kwh = int(input("Enter number of Kilowatt-hours consumed: "))'
  id: totrans-554
  prefs: []
  type: TYPE_NORMAL
  zh: 'kwh = int(input("Enter number of Kilowatt-hours consumed: "))'
- en: 'if kwh <= 500:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 'if kwh <= 500:'
- en: t = kwh * 0.10
  id: totrans-556
  prefs: []
  type: TYPE_NORMAL
  zh: t = kwh * 0.10
- en: 'elif kwh <= 2000:'
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif kwh <= 2000:'
- en: t = 500 * 0.10 + (kwh - 500) * 0.25
  id: totrans-558
  prefs: []
  type: TYPE_NORMAL
  zh: t = 500 * 0.10 + (kwh - 500) * 0.25
- en: 'elif kwh <= 4500:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif kwh <= 4500:'
- en: t = 500 * 0.10 + 1500 * 0.25 + (kwh - 2000) * 0.40
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: t = 500 * 0.10 + 1500 * 0.25 + (kwh - 2000) * 0.40
- en: 'else:'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: t = 500 * 0.10 + 1500 * 0.25 + 2500 * 0.4 + (kwh - 4500) * 0.60
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: t = 500 * 0.10 + 1500 * 0.25 + 2500 * 0.4 + (kwh - 4500) * 0.60
- en: print("Total amount to pay:", t)
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: print("Total amount to pay:", t)
- en: Exercise 22.4-6 Progressive Rates and Text Messaging Services
  id: totrans-564
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The LAV Cell Phone Company charges customers a basic rate of $8 per month to
    send text messages. Additional rates are charged based on the total number of
    text messages sent, as shown in the following table.
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
- en: '| Number of Text Messages Sent | USD per text message |'
  id: totrans-566
  prefs: []
  type: TYPE_TB
- en: '| Up to 50 | Free of charge |'
  id: totrans-567
  prefs: []
  type: TYPE_TB
- en: '| 51 ‐ 150 | $0.05 |'
  id: totrans-568
  prefs: []
  type: TYPE_TB
- en: '| 151 and above | $0.10 |'
  id: totrans-569
  prefs: []
  type: TYPE_TB
- en: Federal, state, and local taxes add a total of 10% to each bill.
  id: totrans-570
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter the number of text messages
    sent and then calculates and displays the total amount to pay.
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the rates are progressive.
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is presented here.
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-6'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
- en: 'count = int(input("Enter number of text messages sent: "))'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
- en: 'if count <= 50:'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
- en: extra = 0
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
- en: 'elif count <= 150:'
  id: totrans-579
  prefs: []
  type: TYPE_NORMAL
- en: extra = (count - 50) * 0.05
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
- en: extra = 100 * 0.05 + (count - 150) * 0.10
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
- en: 'totalWithoutTaxes = 8 + extra         #Add basic rate of $8'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
- en: taxes = totalWithoutTaxes * 10 / 100  #Calculate the total taxes
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
- en: 'total = totalWithoutTaxes + taxes     #Calculate the total amount to pay'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
- en: print("Total amount to pay:", total)
  id: totrans-586
  prefs: []
  type: TYPE_NORMAL
- en: 22.5 Exercises of a General Nature with Decision Control Structures
  id: totrans-587
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exercise 22.5-1 Finding a Leap Year
  id: totrans-588
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a year and then displays
    a message indicating whether it is a leap year; otherwise the message “Not a leap
    year” must be displayed. Moreover, if the user enters a year less than 1582, an
    error message must be displayed.
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
- en: (Note that this involves data validation!)
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the Gregorian calendar, which was first introduced in 1582, a
    year is a leap year when at least one of the following conditions is met:'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
- en: '1^(st) Condition: The year is exactly divisible by 4, and not by 100.'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
- en: '2^(nd) Condition: The year is exactly divisible by 400.'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
- en: In the following table, some years are not leap years because neither of the
    two conditions evaluates to True.
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
- en: '| Year | Leap Year | Conditions |'
  id: totrans-596
  prefs: []
  type: TYPE_TB
- en: '| 1600 | Yes | 2nd Condition is True. It is exactly divisible by 400 |'
  id: totrans-597
  prefs: []
  type: TYPE_TB
- en: '| 1900 | No | Both conditions are False. |'
  id: totrans-598
  prefs: []
  type: TYPE_TB
- en: '| 1904 | Yes | 1st Condition is True. It is exactly divisible by 4, and not
    by 100 |'
  id: totrans-599
  prefs: []
  type: TYPE_TB
- en: '| 1905 | No | Both conditions are False. |'
  id: totrans-600
  prefs: []
  type: TYPE_TB
- en: '| 2000 | Yes | 2nd Condition is True. It is exactly divisible by 400 |'
  id: totrans-601
  prefs: []
  type: TYPE_TB
- en: '| 2002 | No | Both conditions are False. |'
  id: totrans-602
  prefs: []
  type: TYPE_TB
- en: '| 2004 | Yes | 1st Condition is True. It is exactly divisible by 4, and not
    by 100 |'
  id: totrans-603
  prefs: []
  type: TYPE_TB
- en: '| 2024 | Yes | 1st Condition is True. It is exactly divisible by 4, and not
    by 100 |'
  id: totrans-604
  prefs: []
  type: TYPE_TB
- en: The Python program is shown here.
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.5-1'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
- en: 'y = int(input("Enter a year: "))'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
- en: 'if y < 1582:'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
- en: print("Error! The year cannot be less than 1582")
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
- en: 'if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
- en: print("Leap year!")
  id: totrans-612
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
- en: print("Not a leap year")
  id: totrans-614
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The and operator has a higher precedence than the or operator.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.5-2 Displaying the Days of the Month
  id: totrans-616
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a year and a month and
    then displays how many days are in that month. The program needs to take into
    consideration the leap years. In case of a leap year, February has 29 instead
    of 28 days. Moreover, if the user enters a year less than 1582, an error message
    must be displayed.
  id: totrans-617
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入一个年份和一个月份，然后显示该月有多少天。程序需要考虑闰年。如果是闰年，二月有29天而不是28天。此外，如果用户输入的年份小于1582，必须显示错误消息。
- en: Solution
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: The following Python program, given in general form, solves this exercise.
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: 给定的以下Python程序以一般形式解决了这个练习。
- en: '![](img/my_exercise_header.png) Main Code'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) 主代码'
- en: 'y = int(input("Enter a year: "))'
  id: totrans-621
  prefs: []
  type: TYPE_NORMAL
  zh: 'y = int(input("Enter a year: "))'
- en: 'if y < 1582:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y < 1582:'
- en: print("Error! The year cannot be less than 1582")
  id: totrans-623
  prefs: []
  type: TYPE_NORMAL
  zh: print("Error! The year cannot be less than 1582")
- en: 'else:'
  id: totrans-624
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'm = int(input("Enter a month (1 - 12): "))'
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 'm = int(input("Enter a month (1 - 12): "))'
- en: 'if m == 2:'
  id: totrans-626
  prefs: []
  type: TYPE_NORMAL
  zh: 'if m == 2:'
- en: 'Code Fragment 1: Check whether the year (in variable y) is a leap year and
    display how many days are in February.'
  id: totrans-627
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 代码片段1：检查变量y表示的年份是否为闰年，并显示二月有多少天。
- en: 'elif m in [4, 6, 9, 11]:'
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif m in [4, 6, 9, 11]:'
- en: print("This month has 30 days")
  id: totrans-629
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("This month has 30 days")
- en: 'else:'
  id: totrans-630
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("This month has 31 days")
  id: totrans-631
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("This month has 31 days")
- en: Code Fragment 1, shown here, checks whether the year (in variable y) is a leap
    year and displays how many days are in February.
  id: totrans-632
  prefs: []
  type: TYPE_NORMAL
  zh: 代码片段1，在此处显示，检查变量y表示的年份是否为闰年，并显示二月有多少天。
- en: '![](img/my_exercise_header.png) Code Fragment 1'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) 代码片段1'
- en: 'if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:'
  id: totrans-634
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:'
- en: print("This month has 29 days")
  id: totrans-635
  prefs: []
  type: TYPE_NORMAL
  zh: print("This month has 29 days")
- en: 'else:'
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("This month has 28 days ")
  id: totrans-637
  prefs: []
  type: TYPE_NORMAL
  zh: print("This month has 28 days ")
- en: After embedding Code Fragment 1 in Main Code, the final Python program becomes
  id: totrans-638
  prefs: []
  type: TYPE_NORMAL
  zh: 在将代码片段1嵌入主代码后，最终的Python程序变为
- en: '![](img/my_exercise_header.png) file_22.5-2'
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 'sentence = input("Enter a sentence: ")'
- en: 'y = int(input("Enter a year: "))'
  id: totrans-640
  prefs: []
  type: TYPE_NORMAL
  zh: 'y = int(input("Enter a year: "))'
- en: 'if y < 1582:'
  id: totrans-641
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y < 1582:'
- en: print("Error! The year cannot be less than 1582")
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: print("Error! The year cannot be less than 1582")
- en: 'else:'
  id: totrans-643
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'm = int(input("Enter a month (1 - 12): "))'
  id: totrans-644
  prefs: []
  type: TYPE_NORMAL
  zh: 'm = int(input("Enter a month (1 - 12): "))'
- en: 'if m == 2:'
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: 'if m == 2:'
- en: if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:   [[More…]](more.html#more_22_5_2_1)
  id: totrans-646
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:   [[更多…]](more.html#more_22_5_2_1)
- en: print("This month has 29 days")
  id: totrans-647
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("This month has 29 days")
- en: 'else:'
  id: totrans-648
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("This month has 28 days ")
  id: totrans-649
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("This month has 28 days ")
- en: 'elif m in [4, 6, 9, 11]:'
  id: totrans-650
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif m in [4, 6, 9, 11]:'
- en: print("This month has 30 days")
  id: totrans-651
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("This month has 30 days")
- en: 'else:'
  id: totrans-652
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("This month has 31 days")
  id: totrans-653
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("This month has 31 days")
- en: Exercise 22.5-3 Checking for Proper Capitalization and Punctuation
  id: totrans-654
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.5-3 检查正确的首字母大写和标点符号
- en: Write a Python program that prompts the user to enter a sentence and then checks
    it for proper capitalization and punctuation. The program must determine if the
    string begins with an uppercase letter and ends with a punctuation mark (check
    only for periods, question marks, and exclamation marks).
  id: totrans-655
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入一个句子，然后检查其正确的首字母大写和标点符号。程序必须确定字符串是否以大写字母开头并以标点符号结尾（仅检查句号、问号和感叹号）。
- en: Solution
  id: totrans-656
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: In this exercise you need to isolate the first and the last character of the
    string. As you already know, you can access any individual character of a string
    using substring notation. You can use index 0 to access the first character, index
    1 to access the second character, and so on. On the other hand, you can use index
    −1 to access the last character, index −2 to access the last but one character
    and so on.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，你需要隔离字符串的第一个和最后一个字符。正如你所知，你可以使用子串表示法访问字符串中的任何单个字符。你可以使用索引0来访问第一个字符，索引1来访问第二个字符，依此类推。另一方面，你可以使用索引-1来访问最后一个字符，索引-2来访问倒数第二个字符，依此类推。
- en: Thus, you can isolate the first character of string sentence using the following
    Python statement
  id: totrans-658
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，你可以使用以下Python语句隔离字符串sentence的第一个字符
- en: firstChar = sentence[0]
  id: totrans-659
  prefs: []
  type: TYPE_NORMAL
  zh: firstChar = sentence[0]
- en: and the last character using the following Python statement
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 并且使用以下Python语句获取最后一个字符
- en: lastChar = sentence[−1]
  id: totrans-661
  prefs: []
  type: TYPE_NORMAL
  zh: lastChar = sentence[−1]
- en: The Python program is shown here.
  id: totrans-662
  prefs: []
  type: TYPE_NORMAL
  zh: 此处显示了Python程序。
- en: '![](img/my_exercise_header.png) file_22.5-3a'
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.5-3a'
- en: 'sentence = input("Enter a sentence: ")'
  id: totrans-664
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.5-2'
- en: firstChar = sentence[0]  #Get first character
  id: totrans-665
  prefs: []
  type: TYPE_NORMAL
  zh: firstChar = sentence[0]  #Get first character
- en: lastChar = sentence[-1]  #Get last character
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: lastChar = sentence[-1]  #Get last character
- en: sentenceIsOkay = True
  id: totrans-667
  prefs: []
  type: TYPE_NORMAL
  zh: sentenceIsOkay = True
- en: 'if firstChar != firstChar.upper():'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 'if firstChar != firstChar.upper():'
- en: sentenceIsOkay = False
  id: totrans-669
  prefs: []
  type: TYPE_NORMAL
  zh: sentenceIsOkay = False
- en: 'elif lastChar not in [".", "?", "!"]:'
  id: totrans-670
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif lastChar not in [".", "?", "!"]:'
- en: sentenceIsOkay = False
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: sentenceIsOkay = False
- en: 'if sentenceIsOkay == True:'
  id: totrans-672
  prefs: []
  type: TYPE_NORMAL
  zh: 'if sentenceIsOkay == True:'
- en: print("Sentence is okay!")
  id: totrans-673
  prefs: []
  type: TYPE_NORMAL
  zh: print("句子正确！")
- en: In the beginning, the program assumes that the sentence is okay (sentenceIsOkay
    = True). Then, it checks for proper capitalization and proper punctuation and
    if it finds something wrong, it assigns the value False to the variable sentenceIsOkay.
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始时，程序假设句子是正确的（sentenceIsOkay = True）。然后，它检查正确的首字母大写和正确的标点符号，如果发现有问题，它将False赋值给变量sentenceIsOkay。
- en: Another more Pythonic way, however, is shown here.
  id: totrans-675
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，另一种更Pythonic的方法如下所示。
- en: '![](img/my_exercise_header.png) file_22.5-3b'
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.5-3b'
- en: 'sentence = input("Enter a sentence: ")'
  id: totrans-677
  prefs: []
  type: TYPE_NORMAL
  zh: sentence = input("输入一个句子：")
- en: 'if sentence[0] == sentence[0].upper() and sentence[-1] in [".", "?", "!"]:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 'if sentence[0] == sentence[0].upper() and sentence[-1] in [".", "?", "!"]:'
- en: print("Sentence is okay!")
  id: totrans-679
  prefs: []
  type: TYPE_NORMAL
  zh: print("句子正确！")
- en: Exercise 22.5-4 Is the Number a Palindrome?
  id: totrans-680
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习22.5-4 判断数字是否为回文？
- en: A palindrome is a number that remains the same after reversing its digits. For
    example, the number 13631 is a palindrome. Write a Python program that lets the
    user enter a five-digit integer and tests whether or not this number is a palindrome.
    Moreover, a different error message for each type of input error must be displayed
    when the user enters a float, or any integer with either less than or more than
    five digits.
  id: totrans-681
  prefs: []
  type: TYPE_NORMAL
  zh: 回文是一个在反转其位数后仍然相同的数字。例如，数字13631是一个回文。编写一个Python程序，让用户输入一个五位数整数，并测试这个数字是否是回文。此外，当用户输入浮点数或任何少于或超过五位数的整数时，必须显示不同类型的输入错误的不同错误消息。
- en: (Note that this involves data validation!)
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: （注意，这涉及到数据验证！）
- en: Solution
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: 解决方案
- en: There are actually three different approaches! The first one splits the number's
    digits into five different variables while the second and the third ones handle
    the number as if it were a string. Let's analyze them all!
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上存在三种不同的方法！第一种方法将数字的位数分成五个不同的变量，而第二种和第三种方法将数字作为字符串处理。让我们分析一下它们所有！
- en: First approach
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法
- en: To test if the user enters a palindrome number, you need to split its digits
    into five different variables as you learned in [Chapter 13](chapter13.html).
    Then, you can check whether the 1^(st) digit is equal to the 5^(th) digit and
    the 2^(nd) digit is equal to the 4^(th) digit. If this evaluates to True, the
    number is a palindrome.
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试用户是否输入了回文数，你需要将其位数分成五个不同的变量，就像你在[第13章](chapter13.html)中学到的那样。然后，你可以检查第一个数字是否等于第五个数字，第二个数字是否等于第四个数字。如果这个条件评估为True，则该数字是回文。
- en: To validate data input, you need to check whether the user has entered a five-digit
    number. Keep in mind that all five-digit numbers are in the range of 10000 to
    99999\. Therefore, you can just restrict the data input to within this range.
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: 为了验证数据输入，你需要检查用户是否输入了一个五位数。请记住，所有五位数都在10000到99999的范围内。因此，你只需将数据输入限制在这个范围内即可。
- en: In order to display many different error messages, the best practice is to use
    a multiple-alternative decision structure which first checks data input validity
    for all cases, and then tries to solve the required problem. For example, if you
    need to check for various errors, you can do something like the following.
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: 为了显示许多不同的错误消息，最佳实践是使用多重选择决策结构，首先检查所有情况下的数据输入有效性，然后尝试解决所需的问题。例如，如果你需要检查各种错误，你可以做如下操作。
- en: '![Image](img/chapter22-23.png)'
  id: totrans-689
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter22-23.png)'
- en: The final Python program is shown here.
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是将x的位数分成5个不同变量的Python程序。
- en: '![](img/my_exercise_header.png) file_22.5-4a'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.5-4a'
- en: x = float(input())
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: 'if x != int(x):'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x != int(x):'
- en: print("You entered a float")
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: print("您输入了浮点数")
- en: 'elif x < 10000:'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x < 10000:'
- en: print("You entered less than five digits")
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: print("您输入了少于五位数的数字")
- en: 'elif x > 99999:'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x > 99999:'
- en: print("You entered more than five digits")
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: print("您输入了超过五位数的数字")
- en: 'else:'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: '#Split the digits of x into 5 different variables'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '# 将x的位数分成5个不同的变量'
- en: digit1, r = divmod(x, 10000)
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: digit1, r = divmod(x, 10000)
- en: digit2, r = divmod(r, 1000)
  id: totrans-702
  prefs: []
  type: TYPE_NORMAL
  zh: digit2, r = divmod(r, 1000)
- en: digit3, r = divmod(r, 100)
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: digit3, r = divmod(r, 100)
- en: digit4, digit5 = divmod(r, 10)
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: digit4, digit5 = divmod(r, 10)
- en: 'if digit1 == digit5 and digit2 == digit4:'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: 'if digit1 == digit5 and digit2 == digit4:'
- en: print("Palindrome")
  id: totrans-706
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("是回文")
- en: 'else:'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Not palindrome")
  id: totrans-708
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("不是回文")
- en: Second approach
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法
- en: This approach handles the number as if it were a string. It compares the first
    character to the last one and the second character to the last but one. If they
    are equal, it means that the number is a palindrome. The Python program is shown
    here.
  id: totrans-710
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法将数字视为字符串。它将第一个字符与最后一个字符进行比较，将第二个字符与倒数第二个字符进行比较。如果它们相等，则意味着该数字是回文。Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.5-4b'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.5-4b'
- en: x = float(input())
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: 'if x != int(x):'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x != int(x):'
- en: print("You entered a float")
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: print("你输入了一个浮点数")
- en: 'elif x < 10000:'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x < 10000:'
- en: print("You entered less than five digits")
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: print("你输入的数字少于五位")
- en: 'elif x > 99999:'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x > 99999:'
- en: print("You entered more than five digits")
  id: totrans-718
  prefs: []
  type: TYPE_NORMAL
  zh: print("你输入的数字超过五位")
- en: 'else:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: xStr = str(int(x))
  id: totrans-720
  prefs: []
  type: TYPE_NORMAL
  zh: xStr = str(int(x))
- en: 'if xStr[0] == xStr[-1] and xStr[1] == xStr[-2]:'
  id: totrans-721
  prefs: []
  type: TYPE_NORMAL
  zh: 'if xStr[0] == xStr[-1] and xStr[1] == xStr[-2]:'
- en: print("Palindrome")
  id: totrans-722
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("回文")
- en: 'else:'
  id: totrans-723
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Not palindrome")
  id: totrans-724
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("不是回文")
- en: Third approach
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 第三种方法
- en: This approach also handles the number as if it were a string. It reverses it
    using slicing and compares the initial string to the reversed one. If they are
    equal, it means that the number is a palindrome. The Python program is shown here.
  id: totrans-726
  prefs: []
  type: TYPE_NORMAL
  zh: 这种方法也将数字视为字符串。它使用切片将其反转，并将初始字符串与反转后的字符串进行比较。如果它们相等，则意味着该数字是回文。Python程序如下所示。
- en: '![](img/my_exercise_header.png) file_22.5-4c'
  id: totrans-727
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_22.5-4c'
- en: x = float(input())
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: x = float(input())
- en: 'if x != int(x):'
  id: totrans-729
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x != int(x):'
- en: print("You entered a float")
  id: totrans-730
  prefs: []
  type: TYPE_NORMAL
  zh: print("你输入了一个浮点数")
- en: 'elif x < 10000:'
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x < 10000:'
- en: print("You entered less than five digits")
  id: totrans-732
  prefs: []
  type: TYPE_NORMAL
  zh: print("你输入的数字少于五位")
- en: 'elif x > 99999:'
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif x > 99999:'
- en: print("You entered more than five digits")
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: print("你输入的数字超过五位")
- en: 'else:'
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: xStr = str(int(x))
  id: totrans-736
  prefs: []
  type: TYPE_NORMAL
  zh: xStr = str(int(x))
- en: xReversed = xStr[::-1]
  id: totrans-737
  prefs: []
  type: TYPE_NORMAL
  zh: xReversed = xStr[::-1]
- en: 'if str(int(x)) == xReversed:'
  id: totrans-738
  prefs: []
  type: TYPE_NORMAL
  zh: 'if str(int(x)) == xReversed:'
- en: print("Palindrome")
  id: totrans-739
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("回文")
- en: 'else:'
  id: totrans-740
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Not palindrome")
  id: totrans-741
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("不是回文")
- en: 22.6 Boolean Expressions Reference and Handy Tips
  id: totrans-742
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.6 布尔表达式参考和实用技巧
- en: This section summarizes all the Boolean expressions that you've encountered
    on your journey with Python so far, along with additional expressions and useful
    tips. Whether you're a beginner or a seasoned programmer, these expressions and
    tips will serve as valuable tools in your coding arsenal. Keep them close, because
    you never know when they'll come in handy. For some of them, two or more approaches
    to achieve the desired result are provided.
  id: totrans-743
  prefs: []
  type: TYPE_NORMAL
  zh: 本节总结了你在使用Python的过程中遇到的所有布尔表达式，以及额外的表达式和有用的提示。无论你是初学者还是有经验的程序员，这些表达式和提示都将作为你编程工具箱中的宝贵工具。请保留它们，因为你不清楚何时会派上用场。对于其中的一些，提供了两种或多种实现所需结果的方法。
- en: 1)How to check if number in x is between A and B
  id: totrans-744
  prefs: []
  type: TYPE_NORMAL
  zh: 1)如何检查x中的数字是否在A和B之间
- en: ►x >= A and x <= B
  id: totrans-745
  prefs: []
  type: TYPE_NORMAL
  zh: ►x >= A and x <= B
- en: ►A <= x <= B
  id: totrans-746
  prefs: []
  type: TYPE_NORMAL
  zh: ►A <= x <= B
- en: 2)How to check if number in x is not between A and B
  id: totrans-747
  prefs: []
  type: TYPE_NORMAL
  zh: 2)如何检查x中的数字是否不在A和B之间
- en: ►not(x >= A and x <= B)
  id: totrans-748
  prefs: []
  type: TYPE_NORMAL
  zh: ►not(x >= A and x <= B)
- en: ►not(A <= x <= B)
  id: totrans-749
  prefs: []
  type: TYPE_NORMAL
  zh: ►not(A <= x <= B)
- en: ►x < A or x > B
  id: totrans-750
  prefs: []
  type: TYPE_NORMAL
  zh: ►x < A or x > B
- en: 3)How to check if x is either equal to A, B, or C
  id: totrans-751
  prefs: []
  type: TYPE_NORMAL
  zh: 3)如何检查x是否等于A、B或C
- en: ►x == A or x == B or x == C
  id: totrans-752
  prefs: []
  type: TYPE_NORMAL
  zh: ►x == A or x == B or x == C
- en: ►x in [A, B, C]
  id: totrans-753
  prefs: []
  type: TYPE_NORMAL
  zh: ►x in [A, B, C]
- en: 4)How to check if x is neither equal to A, nor B, nor C
  id: totrans-754
  prefs: []
  type: TYPE_NORMAL
  zh: 4)如何检查x是否既不等于A，也不等于B，也不等于C
- en: ►x != A and x != B and x != C
  id: totrans-755
  prefs: []
  type: TYPE_NORMAL
  zh: ►x != A and x != B and x != C
- en: ►not(x == A or x == B or x == C)
  id: totrans-756
  prefs: []
  type: TYPE_NORMAL
  zh: ►not(x == A or x == B or x == C)
- en: ►x not in [A, B, C]
  id: totrans-757
  prefs: []
  type: TYPE_NORMAL
  zh: ►x not in [A, B, C]
- en: 5)How to check if x contains an integer. Please note that variable x must be
    of type float.
  id: totrans-758
  prefs: []
  type: TYPE_NORMAL
  zh: 5)如何检查x是否包含整数。请注意，变量x必须是浮点类型。
- en: ►x == int(x)
  id: totrans-759
  prefs: []
  type: TYPE_NORMAL
  zh: ►x == int(x)
- en: 6)How to check if x contains a float.
  id: totrans-760
  prefs: []
  type: TYPE_NORMAL
  zh: 6)如何检查x是否包含浮点数。
- en: ►x != int(x)
  id: totrans-761
  prefs: []
  type: TYPE_NORMAL
  zh: ►x != int(x)
- en: 7)How to check if x contains an even number.
  id: totrans-762
  prefs: []
  type: TYPE_NORMAL
  zh: 7)如何检查x是否包含偶数。
- en: ►x % 2 == 0
  id: totrans-763
  prefs: []
  type: TYPE_NORMAL
  zh: ►x % 2 == 0
- en: ►x % 2 != 1
  id: totrans-764
  prefs: []
  type: TYPE_NORMAL
  zh: ►x % 2 != 1
- en: ►not(x % 2 == 1)
  id: totrans-765
  prefs: []
  type: TYPE_NORMAL
  zh: ►not(x % 2 == 1)
- en: ►not(x % 2 != 0)
  id: totrans-766
  prefs: []
  type: TYPE_NORMAL
  zh: ►not(x % 2 != 0)
- en: 8)How to check if x contains an odd number.
  id: totrans-767
  prefs: []
  type: TYPE_NORMAL
  zh: 8)如何检查x是否包含奇数。
- en: ►x % 2 == 1
  id: totrans-768
  prefs: []
  type: TYPE_NORMAL
  zh: ►x % 2 == 1
- en: ►x % 2 != 0
  id: totrans-769
  prefs: []
  type: TYPE_NORMAL
  zh: ►x % 2 != 0
- en: ►not(x % 2 == 0)
  id: totrans-770
  prefs: []
  type: TYPE_NORMAL
  zh: ►not(x % 2 == 0)
- en: ►not(x % 2 != 1)
  id: totrans-771
  prefs: []
  type: TYPE_NORMAL
  zh: ►not(x % 2 != 1)
- en: 9)How to check if x is an integer multiple of y
  id: totrans-772
  prefs: []
  type: TYPE_NORMAL
  zh: 9)如何检查x是否是y的整数倍
- en: ►x % y == 0
  id: totrans-773
  prefs: []
  type: TYPE_NORMAL
  zh: ►x % y == 0
- en: 10)How to isolate the decimal part of a real number
  id: totrans-774
  prefs: []
  type: TYPE_NORMAL
  zh: 10)如何提取实数的整数部分
- en: ►x - int(x)
  id: totrans-775
  prefs: []
  type: TYPE_NORMAL
  zh: ►x - int(x)
- en: 11)How to isolate the first decimal digit of a real number
  id: totrans-776
  prefs: []
  type: TYPE_NORMAL
  zh: 11)如何提取实数的第一个小数位
- en: ►int(x * 10) % 10
  id: totrans-777
  prefs: []
  type: TYPE_NORMAL
  zh: ►int(x * 10) % 10
- en: 12)How to isolate the second decimal digit of a real number
  id: totrans-778
  prefs: []
  type: TYPE_NORMAL
  zh: 12)如何提取实数的第二个小数位
- en: ►int(x * 100) % 10
  id: totrans-779
  prefs: []
  type: TYPE_NORMAL
  zh: ►int(x * 100) % 10
- en: 13)How to isolate the N^(th) decimal digit of a real number
  id: totrans-780
  prefs: []
  type: TYPE_NORMAL
  zh: 13)如何提取实数的第N位小数
- en: ►int(x * 10 ** N) % 10
  id: totrans-781
  prefs: []
  type: TYPE_NORMAL
  zh: ►int(x * 10 ** N) % 10
- en: 14)How to isolate the last digit of an integer
  id: totrans-782
  prefs: []
  type: TYPE_NORMAL
  zh: 14)如何提取整数的最后一位
- en: ►x % 10
  id: totrans-783
  prefs: []
  type: TYPE_NORMAL
  zh: ►x % 10
- en: 15)How to isolate the second to last digit of an integer
  id: totrans-784
  prefs: []
  type: TYPE_NORMAL
  zh: 15)如何提取一个整数的倒数第二位
- en: ►x // 10 % 10
  id: totrans-785
  prefs: []
  type: TYPE_NORMAL
  zh: ►x // 10 % 10
- en: 16)How to isolate the N^(th) to last digit of an integer
  id: totrans-786
  prefs: []
  type: TYPE_NORMAL
  zh: 16)如何提取一个整数的第N个到最后一个数字
- en: ►x // 10 ** N % 10
  id: totrans-787
  prefs: []
  type: TYPE_NORMAL
  zh: ►x // 10 ** N % 10
- en: 17)How to check if a word/sentence starts with the letter “B”
  id: totrans-788
  prefs: []
  type: TYPE_NORMAL
  zh: 17)如何检查一个单词/句子是否以字母“B”开头
- en: ►x[0] == "B"
  id: totrans-789
  prefs: []
  type: TYPE_NORMAL
  zh: ►x[0] == "B"
- en: 18)How to check if a word/sentence ends with a period “.”
  id: totrans-790
  prefs: []
  type: TYPE_NORMAL
  zh: 18)如何检查一个单词/句子是否以句号“.”结尾
- en: ►x[len(x) - 1] == "."
  id: totrans-791
  prefs: []
  type: TYPE_NORMAL
  zh: ►x[len(x) - 1] == "."
- en: ►x[-1] == "."
  id: totrans-792
  prefs: []
  type: TYPE_NORMAL
  zh: ►x[-1] == "."
- en: 19)How to find the middle number among three numbers x, y, and z
  id: totrans-793
  prefs: []
  type: TYPE_NORMAL
  zh: 19)如何找出三个数字x、y和z中的中间数
- en: ►x + y + z - minimum - maximum
  id: totrans-794
  prefs: []
  type: TYPE_NORMAL
  zh: ►x + y + z - 最小值 - 最大值
- en: 20)How to find the sum of the two smallest numbers among three numbers x, y,
    and z
  id: totrans-795
  prefs: []
  type: TYPE_NORMAL
  zh: 20)如何找出三个数字x、y和z中最小的两个数的和
- en: ►x + y + z - maximum
  id: totrans-796
  prefs: []
  type: TYPE_NORMAL
  zh: ►x + y + z - 最大值
- en: 21)How to find the sum of the two greatest numbers among three numbers x, y,
    and z
  id: totrans-797
  prefs: []
  type: TYPE_NORMAL
  zh: 21)如何找出三个数字x、y和z中最大的两个数的和
- en: ►x + y + z - minimum
  id: totrans-798
  prefs: []
  type: TYPE_NORMAL
  zh: ►x + y + z - 最小值
- en: 22)How to find the sum of the three middle numbers among five numbers x, y,
    z, w, and u
  id: totrans-799
  prefs: []
  type: TYPE_NORMAL
  zh: 22)如何找出五个数字x、y、z、w和u中三个中间数的和
- en: ►x + y + z + w + u – minimum - maximum
  id: totrans-800
  prefs: []
  type: TYPE_NORMAL
  zh: ►x + y + z + w + u – 最小值 - 最大值
- en: 23)How to check if the distance between two numbers is greater than NUMBER
  id: totrans-801
  prefs: []
  type: TYPE_NORMAL
  zh: 23)如何检查两个数字之间的距离是否大于数字
- en: ►abs(x - y) > NUMBER
  id: totrans-802
  prefs: []
  type: TYPE_NORMAL
  zh: ►|x - y| > 数字
- en: 24)How to check if positive integer has three digits
  id: totrans-803
  prefs: []
  type: TYPE_NORMAL
  zh: 24)如何检查一个正整数是否有三位数
- en: ►x >= 100 and x <= 999
  id: totrans-804
  prefs: []
  type: TYPE_NORMAL
  zh: ►x >= 100 且 x <= 999
- en: ►100 <= x <= 999
  id: totrans-805
  prefs: []
  type: TYPE_NORMAL
  zh: ►100 <= x <= 999
- en: ►len(str(x)) == 3
  id: totrans-806
  prefs: []
  type: TYPE_NORMAL
  zh: ►len(str(x)) == 3
- en: 25)How to check if an integer has three digits
  id: totrans-807
  prefs: []
  type: TYPE_NORMAL
  zh: 25)如何检查一个整数是否有三位数
- en: ►abs(x) >= 100 and abs(x) <= 999
  id: totrans-808
  prefs: []
  type: TYPE_NORMAL
  zh: ►|x| >= 100 且 |x| <= 999
- en: ►100 <= abs(x) <= 999
  id: totrans-809
  prefs: []
  type: TYPE_NORMAL
  zh: ►100 <= |x| <= 999
- en: ►len(str(abs(x))) == 3
  id: totrans-810
  prefs: []
  type: TYPE_NORMAL
  zh: ►len(str(abs(x))) == 3
- en: 26)How to check if a positive integer has four digits and starts with 5
  id: totrans-811
  prefs: []
  type: TYPE_NORMAL
  zh: 26)如何检查一个正整数有四位数字且以5开头
- en: ►x >= 5000 and x <= 5999
  id: totrans-812
  prefs: []
  type: TYPE_NORMAL
  zh: ►x >= 5000 且 x <= 5999
- en: 27)How to check if two numbers have the same sign
  id: totrans-813
  prefs: []
  type: TYPE_NORMAL
  zh: 27)如何检查两个数是否有相同的符号
- en: ►x > 0 and y > 0 or x < 0 and y < 0
  id: totrans-814
  prefs: []
  type: TYPE_NORMAL
  zh: ►x > 0 且 y > 0 或 x < 0 且 y < 0
- en: ►x * y > 0
  id: totrans-815
  prefs: []
  type: TYPE_NORMAL
  zh: ►x * y > 0
- en: 28)How to check if both numbers are either even or odd
  id: totrans-816
  prefs: []
  type: TYPE_NORMAL
  zh: 28)如何检查两个数要么都是偶数，要么都是奇数
- en: ►x % 2 == 0 and y % 2 == 0 or x % 2 == 1 and y % 2 == 1
  id: totrans-817
  prefs: []
  type: TYPE_NORMAL
  zh: ►x % 2 == 0 且 y % 2 == 0 或 x % 2 == 1 且 y % 2 == 1
- en: ►x % 2 == y % 2
  id: totrans-818
  prefs: []
  type: TYPE_NORMAL
  zh: ►x % 2 == y % 2
- en: 29)How to check if exactly one of the two conditions BE1 or BE2 is True, but
    not both (Exclusive OR operation)
  id: totrans-819
  prefs: []
  type: TYPE_NORMAL
  zh: 29)如何检查两个条件BE1或BE2中恰好有一个为真，但不是两个都为真（异或操作）
- en: ►BE1 and not(BE2) or BE2 and not(BE1)
  id: totrans-820
  prefs: []
  type: TYPE_NORMAL
  zh: ►BE1 and not(BE2) 或 BE2 and not(BE1)
- en: 30)How to check if the year in y is a leap year
  id: totrans-821
  prefs: []
  type: TYPE_NORMAL
  zh: 30)如何检查y年是否为闰年
- en: ►y % 4 == 0 and y % 100 != 0 or y % 400 == 0
  id: totrans-822
  prefs: []
  type: TYPE_NORMAL
  zh: ►y % 4 == 0 且 y % 100 != 0 或 y % 400 == 0
- en: 22.7 Review Exercises
  id: totrans-823
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 22.7 复习练习
- en: Complete the following exercises.
  id: totrans-824
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Write a Python program that prompts the user to enter a numeric value and
    then calculates and displays its square root. Moreover, an error message must
    be displayed when the user enters a negative value.
  id: totrans-825
  prefs: []
  type: TYPE_NORMAL
  zh: 1)编写一个Python程序，提示用户输入一个数值，然后计算并显示其平方根。此外，当用户输入负值时，必须显示错误消息。
- en: 2)Design a flowchart that lets the user enter an integer and, if its last digit
    is equal to 5, a message “Last digit equal to 5” is displayed; otherwise, a message
    “Nothing special” is displayed. Moreover, if the user enters a negative value,
    an error message must be displayed.
  id: totrans-826
  prefs: []
  type: TYPE_NORMAL
  zh: 2)设计一个流程图，允许用户输入一个整数，如果其最后一位数字等于5，则显示消息“最后一位数字等于5”；否则，显示消息“无特殊”。此外，如果用户输入负值，必须显示错误消息。
- en: 'Hint: You can isolate the last digit of any integer using a modulus 10 operation.'
  id: totrans-827
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：您可以使用取模10操作来提取任何整数的最后一位数字。
- en: 3)Design a flowchart and write the corresponding Python program that lets the
    user enter two integers and then displays a message indicating whether at least
    one integer is odd; otherwise, a message “Nothing special” is displayed. Moreover,
    if the user enters negative values, an error message must be displayed.
  id: totrans-828
  prefs: []
  type: TYPE_NORMAL
  zh: 3)设计一个流程图并编写相应的Python程序，允许用户输入两个整数，然后显示一个消息，指出至少有一个整数是奇数；否则，显示消息“无特殊”。此外，如果用户输入负值，必须显示错误消息。
- en: 4)Design a flowchart and write the corresponding Python program that prompts
    the user to enter an integer, and then displays a message indicating whether this
    number is even; it must display “Odd” otherwise. Moreover, a different error message
    for each type of input error must be displayed when the user enters a negative
    value or a float.
  id: totrans-829
  prefs: []
  type: TYPE_NORMAL
  zh: 4)设计一个流程图并编写相应的Python程序，提示用户输入一个整数，然后显示一个消息，指出该数是否为偶数；否则，显示“奇数”。此外，当用户输入负值或浮点数时，必须显示不同类型的输入错误消息。
- en: 5)Design a flowchart and write the corresponding Python program that prompts
    the user to enter an integer and then displays a message indicating whether this
    number is exactly divisible by 3 and by 4; otherwise the message “NN is not what
    you are looking for!” must be displayed (where NN is the user-provided number).
    For example, 12 is exactly divisible by 3 and by 4\. Moreover, an error message
    must be displayed when the user enters a negative value or a float.
  id: totrans-830
  prefs: []
  type: TYPE_NORMAL
  zh: 5)设计一个流程图，并编写相应的Python程序，提示用户输入一个整数，然后显示一条消息，指出这个数是否可以被3和4整除；否则必须显示消息“NN不是你要找的！”（其中NN是用户提供的数字）。例如，12可以被3和4整除。此外，当用户输入负值或浮点数时，必须显示错误消息。
- en: 6)Design a flowchart and write the corresponding Python program that lets the
    user enter two integers and then displays a message indicating whether both numbers
    are exactly divisible by 3 and by 4; otherwise the message “X and Y are not what
    you are looking for!” must be displayed (where X and Y are the user-provided numbers).
    Moreover, a different error message for each type of input error for each integer
    must be displayed when the user enters negative values or floats.
  id: totrans-831
  prefs: []
  type: TYPE_NORMAL
  zh: 6)设计一个流程图，并编写相应的Python程序，允许用户输入两个整数，然后显示一条消息，指出这两个数是否都能被3和4整除；否则必须显示消息“X和Y不是你要找的！”（其中X和Y是用户提供的数字）。此外，当用户输入负值或浮点数时，必须为每个整数显示不同类型的输入错误消息。
- en: '7)Write a Python program that displays the following menu:'
  id: totrans-832
  prefs: []
  type: TYPE_NORMAL
  zh: 7)编写一个Python程序，显示以下菜单：
- en: 1)Convert Kelvin to Fahrenheit
  id: totrans-833
  prefs: []
  type: TYPE_NORMAL
  zh: 1)将开尔文温度转换为华氏温度
- en: 2)Convert Fahrenheit to Kelvin
  id: totrans-834
  prefs: []
  type: TYPE_NORMAL
  zh: 2)将华氏温度转换为开尔文
- en: 3)Convert Fahrenheit to Celsius
  id: totrans-835
  prefs: []
  type: TYPE_NORMAL
  zh: 3)将华氏温度转换为摄氏温度
- en: 4)Convert Celsius to Fahrenheit
  id: totrans-836
  prefs: []
  type: TYPE_NORMAL
  zh: 4)将摄氏温度转换为华氏温度
- en: The program must then prompt the user to enter a choice (of 1, 2, 3, or 4) and
    a temperature value, and subsequently calculate and display the required value.
    Moreover, a different error message for each type of input error must be displayed
    when the user enters a choice other than 1, 2, 3, or 4, or a temperature value
    lower than absolute zero^([[17]](footnotes.html#Endnote_17)).
  id: totrans-837
  prefs: []
  type: TYPE_NORMAL
  zh: 程序必须然后提示用户输入一个选择（1，2，3或4）和一个温度值，然后计算并显示所需值。此外，当用户输入的选择不是1，2，3或4，或温度值低于绝对零时，必须显示不同类型的输入错误消息（绝对零的脚注^([[17]](footnotes.html#Endnote_17))）。
- en: It is given that
  id: totrans-838
  prefs: []
  type: TYPE_NORMAL
  zh: 已知
- en: 1.8 × Kelvin = Fahrenheit + 459.67
  id: totrans-839
  prefs: []
  type: TYPE_NORMAL
  zh: 1.8 × 开尔文 = 华氏温度 + 459.67
- en: and
  id: totrans-840
  prefs: []
  type: TYPE_NORMAL
  zh: and
- en: .![Image](img/chapter22-24.png)
  id: totrans-841
  prefs: []
  type: TYPE_NORMAL
  zh: .![图片](img/chapter22-24.png)
- en: '8)Write a Python program that emulates the way an electronic calculator functions.
    The program must first prompt the user to enter an integer, then the type of operation
    (+, −, *, /, DIV, MOD, POWER), and finally a second integer. Subsequently, the
    program must perform the chosen operation and display the result. For instance,
    if the user enters the values 13, +, and 2, the program must display the following
    message:'
  id: totrans-842
  prefs: []
  type: TYPE_NORMAL
  zh: 8)编写一个Python程序，模拟电子计算器的功能。程序必须首先提示用户输入一个整数，然后输入操作类型（+，−，*，/，DIV，MOD，POWER），最后输入第二个整数。随后，程序必须执行所选操作并显示结果。例如，如果用户输入的值是13，+，和2，程序必须显示以下消息：
- en: The result of 13 + 2 equals 15
  id: totrans-843
  prefs: []
  type: TYPE_NORMAL
  zh: 13 + 2的结果等于15
- en: Make your program accept the type of operation in all possible forms such as
    “Div”, “DIV”, “div”, or even “DiV”. In case of a division by zero, the message
    “Infinite” must be displayed.
  id: totrans-844
  prefs: []
  type: TYPE_NORMAL
  zh: 程序应接受所有可能的操作类型，如“Div”，“DIV”，“div”，甚至“DiV”。在除以零的情况下，必须显示“无穷大”的消息。
- en: 9)Rewrite the Python program of the previous exercise to validate the data input.
    If the user enters an input other than +, −, *, /, DIV, MOD, POWER, an error message
    must be displayed.
  id: totrans-845
  prefs: []
  type: TYPE_NORMAL
  zh: 9)将之前练习中的Python程序重写为验证数据输入。如果用户输入的不是+，−，*，/，DIV，MOD，POWER，必须显示错误消息。
- en: 10)Write a Python program that prompts the user to enter the names and the ages
    of three people and then displays the names of the youngest person and the oldest
    person.
  id: totrans-846
  prefs: []
  type: TYPE_NORMAL
  zh: 10)编写一个Python程序，提示用户输入三个人的姓名和年龄，然后显示最年轻的人和最年长的人的姓名。
- en: 11)In a song contest, each artist is scored for their performance by five judges.
    However, according to the rules of this contest, the total score is calculated
    after excluding the highest and lowest scores. Write a Python program that prompts
    the user to enter the name of the artist and the score they receive from each
    judge. The program must then display the name of the artist along with their total
    score.
  id: totrans-847
  prefs: []
  type: TYPE_NORMAL
- en: 12)Write a Python program that prompts the user to enter the ages of three people
    and then finds and displays the age in the middle.
  id: totrans-848
  prefs: []
  type: TYPE_NORMAL
- en: 13)Write a Python program that prompts the user to enter the names and the ages
    of three people and then displays the name of the youngest person or the oldest
    person, depending on which one is closer to the third age in the middle.
  id: totrans-849
  prefs: []
  type: TYPE_NORMAL
- en: '14)An online bookstore applies the following sales policy: Buy 3 books and
    pay for the 2 most expensive ones. Write a Python program that lets the user enter
    the prices and titles of three books. It must then display the amount the customer
    needs to pay, as well as the title and price of the book that was provided for
    free.'
  id: totrans-850
  prefs: []
  type: TYPE_NORMAL
- en: 15)Design a flowchart and write the corresponding Python program that finds
    and displays the value of y (if possible) in the following formula.
  id: totrans-851
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter22-25.png)
  id: totrans-852
  prefs: []
  type: TYPE_NORMAL
- en: 16)Design a flowchart and write the corresponding Python program that finds
    and displays the values of y (if possible) in the following formula.
  id: totrans-853
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter22-26.png)
  id: totrans-854
  prefs: []
  type: TYPE_NORMAL
- en: 17)Rewrite the Python program of [Exercise 22.3-2](#toc_12), using a multiple-alternative
    decision structure.
  id: totrans-855
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Negate the Boolean expression x >= 0 in the outer dual-alternative decision
    structure and switch its two paths.'
  id: totrans-856
  prefs: []
  type: TYPE_NORMAL
- en: 18)Write a Python program that finds and displays the values of y (if possible)
    in the following formula.
  id: totrans-857
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-27.png)'
  id: totrans-858
  prefs: []
  type: TYPE_IMG
- en: 19)A positive integer is called an Armstrong number when the sum of the cubes
    of its digits is equal to the number itself. The number 371 is such a number,
    since 3³ + 7³ + 1³ = 371\. Write a Python program that lets the user enter a three-digit
    integer and then displays a message indicating whether or not the user-provided
    number is an Armstrong one. Moreover, a different error message for each type
    of input error must be displayed when the user enters a float or any number other
    than a three-digit one.
  id: totrans-859
  prefs: []
  type: TYPE_NORMAL
- en: 20)Write a Python program that prompts the user to enter a day (1 ‐ 31), a month
    (1 ‐ 12), and a year and then finds and displays how many days are left until
    the end of that month. The program must take into consideration the leap years.
    In the case of a leap year, February has 29 instead of 28 days.
  id: totrans-860
  prefs: []
  type: TYPE_NORMAL
- en: 21)Write a Python program that lets the user enter a word of six letters and
    then displays a message indicating whether or not every second letter is capitalized.
    The word “AtHeNa” is such a word, but it can be also provided as “aThEnA”.
  id: totrans-861
  prefs: []
  type: TYPE_NORMAL
- en: 22)An online book store sells e-books for $10 each. Quantity discounts are given
    according to the following table.
  id: totrans-862
  prefs: []
  type: TYPE_NORMAL
- en: '| Quantity | Discount |'
  id: totrans-863
  prefs: []
  type: TYPE_TB
- en: '| 3 ‐ 5 | 10% |'
  id: totrans-864
  prefs: []
  type: TYPE_TB
- en: '| 6 ‐ 9 | 15% |'
  id: totrans-865
  prefs: []
  type: TYPE_TB
- en: '| 10 ‐ 13 | 20% |'
  id: totrans-866
  prefs: []
  type: TYPE_TB
- en: '| 14 ‐ 19 | 27% |'
  id: totrans-867
  prefs: []
  type: TYPE_TB
- en: '| 20 or more | 30% |'
  id: totrans-868
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter the total number of e-books
    purchased and then displays the amount of discount, and the total amount of the
    purchase after the discount. Assume that the user enters valid values.
  id: totrans-869
  prefs: []
  type: TYPE_NORMAL
- en: 23)In a supermarket, the discount that a customer receives based on the before-tax
    amount of their order is presented in the following table.
  id: totrans-870
  prefs: []
  type: TYPE_NORMAL
- en: '| Range | Discount |'
  id: totrans-871
  prefs: []
  type: TYPE_TB
- en: '| amount < $50 | 0% |'
  id: totrans-872
  prefs: []
  type: TYPE_TB
- en: '| $50 ≤ amount < $100 | 1% |'
  id: totrans-873
  prefs: []
  type: TYPE_TB
- en: '| $100 ≤ amount < $250 | 2% |'
  id: totrans-874
  prefs: []
  type: TYPE_TB
- en: '| $250 ≤ amount | 3% |'
  id: totrans-875
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter the before-tax amount
    of their order and then calculates and displays the discount amount that customers
    receive (if any). A VAT (Value Added Tax) of 19% must be added in the end. Moreover,
    an error message must be displayed when the user enters a negative value.
  id: totrans-876
  prefs: []
  type: TYPE_NORMAL
- en: 24)The Body Mass Index (BMI) is often used to determine whether an adult person
    is overweight or underweight for their height. The formula used to calculate the
    BMI of an adult person is
  id: totrans-877
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter10-08.png)
  id: totrans-878
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter their age, weight (in
    pounds) and height (in inches) and then displays a description according to the
    following table.
  id: totrans-879
  prefs: []
  type: TYPE_NORMAL
- en: '| Body Mass Index | Description |'
  id: totrans-880
  prefs: []
  type: TYPE_TB
- en: '| BMI < 15 | Very severely underweight |'
  id: totrans-881
  prefs: []
  type: TYPE_TB
- en: '| 15.0 ≤ BMI < 16.0 | Severely underweight |'
  id: totrans-882
  prefs: []
  type: TYPE_TB
- en: '| 16.0 ≤ BMI < 18.5 | Underweight |'
  id: totrans-883
  prefs: []
  type: TYPE_TB
- en: '| 18.5 ≤ BMI < 25 | Normal |'
  id: totrans-884
  prefs: []
  type: TYPE_TB
- en: '| 25.0 ≤ BMI < 30.0 | Overweight |'
  id: totrans-885
  prefs: []
  type: TYPE_TB
- en: '| 30.0 ≤ BMI < 35.0 | Severely overweight |'
  id: totrans-886
  prefs: []
  type: TYPE_TB
- en: '| 35.0 ≤ BMI | Very severely overweight |'
  id: totrans-887
  prefs: []
  type: TYPE_TB
- en: The message “Invalid age” must be displayed when the user enters an age less
    than 18.
  id: totrans-888
  prefs: []
  type: TYPE_NORMAL
- en: 25)The LAV Water Company charges for subscribers' water consumption according
    to the following table (monthly rates for domestic accounts).
  id: totrans-889
  prefs: []
  type: TYPE_NORMAL
- en: '| Water Consumption (cubic feet) | USD per cubic foot |'
  id: totrans-890
  prefs: []
  type: TYPE_TB
- en: '| consumption ≤ 10 | $3 |'
  id: totrans-891
  prefs: []
  type: TYPE_TB
- en: '| 11 ≤ consumption ≤ 20 | $5 |'
  id: totrans-892
  prefs: []
  type: TYPE_TB
- en: '| 21 ≤ consumption ≤ 35 | $7 |'
  id: totrans-893
  prefs: []
  type: TYPE_TB
- en: '| 36 ≤ consumption | $9 |'
  id: totrans-894
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter the total amount of water
    consumed (in cubic feet) and then calculates and displays the total amount to
    pay. Please note that the rates are progressive. Federal, state, and local taxes
    add a total of 10% to each bill. Moreover, an error message must be displayed
    when the user enters a negative value.
  id: totrans-895
  prefs: []
  type: TYPE_NORMAL
- en: 26)Write a Python program that prompts the user to enter their taxable income
    and the number of their children and then calculates the total tax to pay according
    to the following table. However, total tax is reduced by 2% when the user has
    at least one child. Please note that the rates are progressive.
  id: totrans-896
  prefs: []
  type: TYPE_NORMAL
- en: '| Taxable Income (USD) | Tax Rate |'
  id: totrans-897
  prefs: []
  type: TYPE_TB
- en: '| income ≤ 8000 | 10% |'
  id: totrans-898
  prefs: []
  type: TYPE_TB
- en: '| 8000 < income ≤ 30000 | 15% |'
  id: totrans-899
  prefs: []
  type: TYPE_TB
- en: '| 30000 < income ≤ 70000 | 25% |'
  id: totrans-900
  prefs: []
  type: TYPE_TB
- en: '| 70000 < income | 30% |'
  id: totrans-901
  prefs: []
  type: TYPE_TB
- en: 27)The Beaufort scale is an empirical measure that relates wind speed to observed
    conditions on land or at sea. Write a Python program that prompts the user to
    enter the wind speed and then displays the corresponding Beaufort number and description
    according to the following table. An additional message “It's Fishing Day!!!”
    must be displayed when wind speed is 3 Beaufort or less. Moreover, an error message
    must be displayed when the user enters a negative value.
  id: totrans-902
  prefs: []
  type: TYPE_NORMAL
- en: '| Wind Speed (miles per hour) | Beaufort Number | Description |'
  id: totrans-903
  prefs: []
  type: TYPE_TB
- en: '| wind speed < 1 | 0 | Calm |'
  id: totrans-904
  prefs: []
  type: TYPE_TB
- en: '| 1 ≤ wind speed < 4 | 1 | Light air |'
  id: totrans-905
  prefs: []
  type: TYPE_TB
- en: '| 4 ≤ wind speed < 8 | 2 | Light breeze |'
  id: totrans-906
  prefs: []
  type: TYPE_TB
- en: '| 8 ≤ wind speed < 13 | 3 | Gentle breeze |'
  id: totrans-907
  prefs: []
  type: TYPE_TB
- en: '| 13 ≤ wind speed < 18 | 4 | Moderate breeze |'
  id: totrans-908
  prefs: []
  type: TYPE_TB
- en: '| 18 ≤ wind speed < 25 | 5 | Fresh breeze |'
  id: totrans-909
  prefs: []
  type: TYPE_TB
- en: '| 25 ≤ wind speed < 31 | 6 | Strong breeze |'
  id: totrans-910
  prefs: []
  type: TYPE_TB
- en: '| 31 ≤ wind speed < 39 | 7 | Moderate gale |'
  id: totrans-911
  prefs: []
  type: TYPE_TB
- en: '| 39 ≤ wind speed < 47 | 8 | Gale |'
  id: totrans-912
  prefs: []
  type: TYPE_TB
- en: '| 47 ≤ wind speed < 55 | 9 | Strong gale |'
  id: totrans-913
  prefs: []
  type: TYPE_TB
- en: '| 55 ≤ wind speed < 64 | 10 | Storm |'
  id: totrans-914
  prefs: []
  type: TYPE_TB
- en: '| 64 ≤ wind speed < 74 | 11 | Violent storm |'
  id: totrans-915
  prefs: []
  type: TYPE_TB
- en: '| 74 ≤ wind speed | 12 | Hurricane force |'
  id: totrans-916
  prefs: []
  type: TYPE_TB
