- en: Chapter 22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More with Decision Control Structures
  prefs: []
  type: TYPE_NORMAL
- en: 22.1 Simple Exercises with Decision Control Structures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exercise 22.1-1 Is it an Integer?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a number and then displays
    a message indicating whether the data type of this number is integer or real.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: It is well known that a number is considered an integer when it contains no
    fractional part. In Python, you can use the int() function to get the integer
    portion of any real number. If the user-provided number is equal to its integer
    portion, then the number is considered an integer.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the user enters the number 7, this number and its integer portion,
    int(7), are equal.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, if the user enters the number 7.3, this number and its integer
    portion, int(7.3), are not equal.
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.1-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter a number: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == int(x):'
  prefs: []
  type: TYPE_NORMAL
- en: print(x, "is integer")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(x, "is real")
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the function float() is used in the data input
    stage. This is necessary in order to allow the user to enter either an integer
    or a float.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.1-2 Validating Data Input and Finding Odd and Even Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that prompts the
    user to enter a non-negative integer, and then displays a message indicating whether
    this number is even; it must display “Odd” otherwise. Moreover, if the user enters
    a negative value or a float, an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: (This exercise gives you some practice in working with data validation).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Data validation is the process of restricting data input, forcing the user to
    enter only valid values.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you need to prompt the user to enter a non-negative integer
    and display an error message when they enter either a negative value or a float.
    The flowchart that solves this exercise given in general form is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The following decision control structure is taken from [Exercise 17.1-4](chapter17.html#toc_5).
    It tests whether variable x is even or odd.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-02.png)'
  prefs: []
  type: TYPE_IMG
- en: After combining both flowcharts, the final flowchart looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.1-2a'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter an integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 0 or x != int(x):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid Number")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Even")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Odd")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Instead of using nested decision structures, you can alternatively use a multiple-alternative
    decision structure, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.1-2b'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter an integer: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 0 or x != int(x):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid Number")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x % 2 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Even")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Odd")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.1-3 Where is the Tollkeeper?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In a toll gate, there is an automatic system that recognizes whether the passing
    vehicle is a motorcycle, a car, or a truck. Write a Python program that lets the
    user enter the type of the vehicle (M for motorcycle, C for car, and T for truck)
    and then displays the corresponding amount of money the driver must pay according
    to the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Vehicle Type | Amount to Pay |'
  prefs: []
  type: TYPE_TB
- en: '| Motorcycle | $1 |'
  prefs: []
  type: TYPE_TB
- en: '| Car | $2 |'
  prefs: []
  type: TYPE_TB
- en: '| Track | $4 |'
  prefs: []
  type: TYPE_TB
- en: The program must function properly even when characters are entered in lowercase.
    For example, the program must function properly either for “M” or “m”. However,
    if the user enters a character other than M, C, or T (uppercase or lowercase),
    an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: (Some more practice with data validation!)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this problem is quite simple. The only thing that needs attention
    is that the user may enter the uppercase letters M, C, or T, or the lowercase
    letters m, c, or t. The program needs to accept both. To handle this, you can
    convert the user's input to uppercase using the upper() method. Then you need
    to check only for the M, C, or T characters in uppercase.
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.1-3a'
  prefs: []
  type: TYPE_NORMAL
- en: v = input().upper()
  prefs: []
  type: TYPE_NORMAL
- en: 'if v not in ["M", "C", "T"]:   #You need to check only for capital M, C, and
    T'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid vehicle")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif v == "M":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You need to pay $1")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif v == "C":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You need to pay $2")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif v == "T":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You need to pay $4")
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note how Python converts the user''s input to uppercase.'
  prefs: []
  type: TYPE_NORMAL
- en: However, this exercise can be solved slightly more efficiently, if you move
    the first case of the multiple-alternative decision structure to the end, as shown
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.1-3b'
  prefs: []
  type: TYPE_NORMAL
- en: v = input().upper()
  prefs: []
  type: TYPE_NORMAL
- en: 'if v == "M":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You need to pay $1")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif v == "C":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You need to pay $2")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif v == "T":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You need to pay $4")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid vehicle")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.1-4 The Most Scientific Calculator Ever!
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python that emulates the way an electronic calculator functions. The
    program must first prompt the user to enter a number, then the type of operation
    (+, −, *, /), and finally a second number. Subsequently, the program must perform
    the chosen operation and display the result. However, if the user enters an operand
    other than +, −, *, or /, an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The only thing that you need to take care of in this exercise is the possibility
    the user could enter zero for the divisor (the second number). As you know from
    mathematics, division by zero is not possible.
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program uses the multiple-alternative decision structure
    to check the type of operation.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.1-4'
  prefs: []
  type: TYPE_NORMAL
- en: 'a = float(input("Enter 1st number: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'op = input("Enter type of operation: ")   #Variable op is of type string'
  prefs: []
  type: TYPE_NORMAL
- en: 'b = float(input("Enter 2nd number: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if op == "+":'
  prefs: []
  type: TYPE_NORMAL
- en: print(a + b)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif op == "-":'
  prefs: []
  type: TYPE_NORMAL
- en: print(a - b)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif op == "*":'
  prefs: []
  type: TYPE_NORMAL
- en: print(a * b)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif op == "/":'
  prefs: []
  type: TYPE_NORMAL
- en: 'if b == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Error: Division by zero")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print(a / b)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Error: Invalid operand")'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.1-5 Converting Gallons to Liters, and Vice Versa
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Write a Python program that displays the following menu:'
  prefs: []
  type: TYPE_NORMAL
- en: 1)Convert gallons to liters
  prefs: []
  type: TYPE_NORMAL
- en: 2)Convert liters to gallons
  prefs: []
  type: TYPE_NORMAL
- en: The program must then prompt the user to enter a choice (of 1 or 2) and a quantity,
    and subsequently calculate and display the required value. It is given that
  prefs: []
  type: TYPE_NORMAL
- en: 1 gallon = 3.785 liters
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.1-5'
  prefs: []
  type: TYPE_NORMAL
- en: COEFFICIENT = 3.785
  prefs: []
  type: TYPE_NORMAL
- en: 'print("1: Gallons to liters")'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("2: Liters to gallons")'
  prefs: []
  type: TYPE_NORMAL
- en: 'choice = int(input("Enter choice: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity = float(input("Enter quantity: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if choice == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: result = quantity * COEFFICIENT
  prefs: []
  type: TYPE_NORMAL
- en: print(quantity, "gallons =", result, "liters")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: result = quantity / COEFFICIENT
  prefs: []
  type: TYPE_NORMAL
- en: print(quantity, "liters =", result, "gallons")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.1-6 Converting Gallons to Liters, and Vice Versa (with Data Validation)
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Rewrite the Python program of the previous exercise to validate the data input.
    A different error message for each type of input error must be displayed when
    the user enters a choice other than 1 or 2, or a negative gas quantity.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program, given in general form, solves this exercise. It
    prompts the user to enter a choice. If the choice is invalid, it displays an error
    message; otherwise, it prompts the user to enter a quantity. However, if the quantity
    entered is invalid too, it displays another error message; otherwise it proceeds
    to data conversion, depending on the user's choice.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) Main Code'
  prefs: []
  type: TYPE_NORMAL
- en: COEFFICIENT = 3.785
  prefs: []
  type: TYPE_NORMAL
- en: 'print("1: Gallons to liters")'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("2: Liters to gallons")'
  prefs: []
  type: TYPE_NORMAL
- en: 'choice = int(input("Enter choice: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if choice not in [1, 2]:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Wrong choice!")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity = float(input("Enter quantity: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if quantity < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid quantity!")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code Fragment 1: Convert gallons to liters or liters to gallons depending on
    user’s choice.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Code Fragment 1 shown below is taken from the previous exercise ([Exercise 22.1-5](#toc_6)).
    It converts gallons to liters, or liters to gallons, depending on the user's choice.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) Code Fragment 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'if choice == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: result = quantity * COEFFICIENT
  prefs: []
  type: TYPE_NORMAL
- en: print(quantity, "gallons =", result, "liters")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: result = quantity / COEFFICIENT
  prefs: []
  type: TYPE_NORMAL
- en: print(quantity, "liters =", result, "gallons")
  prefs: []
  type: TYPE_NORMAL
- en: After embedding Code Fragment 1 in Main Code, the final Python program becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.1-6'
  prefs: []
  type: TYPE_NORMAL
- en: COEFFICIENT = 3.785
  prefs: []
  type: TYPE_NORMAL
- en: 'print("1: Gallons to liters")'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("2: Liters to gallons")'
  prefs: []
  type: TYPE_NORMAL
- en: 'choice = int(input("Enter choice: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if choice not in [1, 2]:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Wrong choice!")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'quantity = float(input("Enter quantity: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if quantity < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid quantity!")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: if choice == 1:                           [[More…]](more.html#more_22_1_6_1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: result = quantity * COEFFICIENT
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(quantity, "gallons =", result, "liters")
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: result = quantity / COEFFICIENT
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(quantity, "liters =", result, "gallons")
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 22.2 Finding Minimum and Maximum Values with Decision Control Structures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Suppose there are some men and you want to find the lightest one. Let's say
    that each one of them comes by and tells you his weight. What you must do is,
    memorize the weight of the first man that has come by and for each new man, you
    have to compare his weight with the one that you keep memorized. If he is heavier,
    you ignore his weight. However, if he is lighter, you need to forget the previous
    weight and memorize the new one. The same procedure continues until all the men
    have come by.
  prefs: []
  type: TYPE_NORMAL
- en: Let's ask four men to come by in a random order. Assume that their weights,
    in order of appearance, are 165, 170, 160, and 180 pounds.
  prefs: []
  type: TYPE_NORMAL
- en: '| Procedure | Value of Variable minimum in Your Mind! |'
  prefs: []
  type: TYPE_TB
- en: '| The first man comes by. He weighs 165 pounds. Keep his weight in your mind
    (imagine a variable in your mind named minimum). | minimum = 165 |'
  prefs: []
  type: TYPE_TB
- en: '| The second man comes by. He weighs 170 pounds. He does not weigh less than
    the weight you are keeping in variable minimum, so you must ignore his weight.
    Variable minimum in your mind still contains the value 165. | minimum = 165 |'
  prefs: []
  type: TYPE_TB
- en: '| The third man comes by. He weighs 160 pounds, which is less than the weight
    you are keeping in variable minimum, so you must forget the previous value and
    keep the value 160 in variable minimum. | minimum = 160 |'
  prefs: []
  type: TYPE_TB
- en: '| The fourth man comes by. He weighs 180 pounds. He does not weigh less than
    the weight you are keeping in variable minimum, so you must ignore his weight.
    Variable minimum still contains the value 160. | minimum = 160 |'
  prefs: []
  type: TYPE_TB
- en: When the procedure finishes, the variable minimum in your mind contains the
    weight of the lightest man!
  prefs: []
  type: TYPE_NORMAL
- en: Following are the flowchart and the corresponding Python program that prompts
    the user to enter the weight of four men and then finds and displays the lightest
    weight.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter22-04.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.2'
  prefs: []
  type: TYPE_NORMAL
- en: print("Enter the weight of four men:")
  prefs: []
  type: TYPE_NORMAL
- en: w1 = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: w2 = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: w3 = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: w4 = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: '#Memorize the weight of the first man'
  prefs: []
  type: TYPE_NORMAL
- en: minimum = w1
  prefs: []
  type: TYPE_NORMAL
- en: '#If second man is lighter, forget previous'
  prefs: []
  type: TYPE_NORMAL
- en: '#value and memorize his weight'
  prefs: []
  type: TYPE_NORMAL
- en: 'if w2 < minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: minimum = w2
  prefs: []
  type: TYPE_NORMAL
- en: '#If third man is lighter, forget previous'
  prefs: []
  type: TYPE_NORMAL
- en: '#value and memorize his weight'
  prefs: []
  type: TYPE_NORMAL
- en: 'if w3 < minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: minimum = w3
  prefs: []
  type: TYPE_NORMAL
- en: '#If fourth man is lighter, forget previous'
  prefs: []
  type: TYPE_NORMAL
- en: '#value and memorize his weight'
  prefs: []
  type: TYPE_NORMAL
- en: 'if w4 < minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: minimum = w4
  prefs: []
  type: TYPE_NORMAL
- en: print(minimum)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that this program is trying to find out the lowest
    value and not which variable this value was actually assigned to.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)You can find the maximum instead of the minimum value by
    simply replacing the “less than” with a “greater than” operator in all Boolean
    expressions.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.2-1 Finding the Name of the Heaviest Person
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter the weights and the names
    of three people and then displays the name and the weight of the heaviest person.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, along with the maximum weight, you need to store in another
    variable the name of the person who actually has that weight. The Python program
    is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.2-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'w1 = int(input("Enter the weight of the 1st person: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'n1 = input("Enter the name of the 1st person: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'w2 = int(input("Enter the weight of the 2nd person: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'n2 = input("Enter the name of the 2nd person: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'w3 = int(input("Enter the weight of the 3rd person: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'n3 = input("Enter the name of the 3rd person: ")'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = w1    #Memorize the weight
  prefs: []
  type: TYPE_NORMAL
- en: mName = n1      #and the name of the first person.
  prefs: []
  type: TYPE_NORMAL
- en: 'if w2 > maximum:    #If second person is heavier, forget previous values, and'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = w2    #memorize the weight
  prefs: []
  type: TYPE_NORMAL
- en: mName = n2      #and the name of the second person.
  prefs: []
  type: TYPE_NORMAL
- en: 'if w3 > maximum:    #If third person is heavier, forget previous values, and'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = w3    #memorize the weight
  prefs: []
  type: TYPE_NORMAL
- en: mName = n3      #and the name of the third person.
  prefs: []
  type: TYPE_NORMAL
- en: print("The heaviest person is", mName)
  prefs: []
  type: TYPE_NORMAL
- en: print("Their weight is", maximum)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In case the two heaviest people happen to have the same
    weight, the name of the first one in order is found and displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: 22.3 Decision Control Structures in Solving Mathematical Problems
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exercise 22.3-1 Finding the Value of y
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the value of y (if possible) in the following formula.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter22-05.png)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, it's crucial to prevent the user from entering values of 0
    or 4, as they result in a zero denominator. Therefore, the program needs to take
    these restrictions into consideration. The flowchart is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-06.png)'
  prefs: []
  type: TYPE_IMG
- en: and the Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.3-1'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == 0 or x == 4:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Error: Division by zero!")'
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = (5 + x) / x + (x + 9) / (x - 4)
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.3-2 Finding the Values of y
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the values of y (if possible) in the following formula.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter22-07.png)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The formula has two different results.
  prefs: []
  type: TYPE_NORMAL
- en: ►When x is greater than or equal to zero, the value of y in ![Image](img/chapter22-08.png)
    can be found following the method shown in the previous exercise.
  prefs: []
  type: TYPE_NORMAL
- en: ►However, for an x less than zero, a small detail can save you some lines of
    code. Upon closer examination, it's evident that there are no restrictions on
    the fraction ![Image](img/chapter22-09.png) because x can never be +5; thus, the
    denominator will never be zero. This is because in the given formula x is less
    than zero!
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-10.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.3-2'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x >= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == 0 or x == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Error: Division by zero!")'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = (7 + x) / (x - 3) + (3 - x) / x
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(y)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 40 * x / (x - 5) + 3
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.3-3 Solving the Linear Equation ax + b = 0
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the root of the linear equation
  prefs: []
  type: TYPE_NORMAL
- en: ax + b = 0
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In the equation ax + b = 0, the coefficients a and b are known real numbers,
    and x represents an unknown quantity to be found. Because x is raised to the first
    power, this equation is classified as a first-degree equation, also known as a
    linear equation.
  prefs: []
  type: TYPE_NORMAL
- en: The root of the equation is the value of x for which this equation is satisfied;
    that is, the left side of the equality ax + b equals zero.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, the user must enter values for coefficients a and b, and the
    program must find the value of x for which ax + b equals zero.
  prefs: []
  type: TYPE_NORMAL
- en: 'The equation ax + b = 0, when solved for x, becomes x = −b / a. Depending on
    the user''s entered data, three possible situations can arise:'
  prefs: []
  type: TYPE_NORMAL
- en: i)The user might enter the value 0 for coefficient a and a non-zero value for
    coefficient b. In this situation, the result of x = −b / a is undefined. The division
    by zero, as you already know from mathematics, cannot be performed.
  prefs: []
  type: TYPE_NORMAL
- en: ii)The user might enter the value 0 for both coefficients a and b. In this situation,
    the result of x = −b / a has no defined value, and it is called an indeterminate
    form.
  prefs: []
  type: TYPE_NORMAL
- en: iii)The user might enter any other pair of values.
  prefs: []
  type: TYPE_NORMAL
- en: These three situations and the resulting paths are represented below with the
    use of a multiple-alternative decision structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-11.png)'
  prefs: []
  type: TYPE_IMG
- en: '![Image](img/chapter22-12.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.3-3'
  prefs: []
  type: TYPE_NORMAL
- en: print("Enter values for coefficients a and b")
  prefs: []
  type: TYPE_NORMAL
- en: a, b = float(input()), float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: x = -b / a
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif b != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Undefined")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Indeterminate form")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.3-4 Solving the Quadratic Equation ax² + bx + c = 0
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the roots of the quadratic equation
  prefs: []
  type: TYPE_NORMAL
- en: ax² + bx + c = 0
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In the equation ax² + bx + c = 0, the coefficients a, b, and c are known real
    numbers, and x represents an unknown quantity to be found. Because x is raised
    to the second power, this equation is classified as a second-degree equation,
    also known as a quadratic equation.
  prefs: []
  type: TYPE_NORMAL
- en: The roots of the equation are the values of x, for which this equation is satisfied;
    that is, the left side of the equality ax² + bx + c equals zero.
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, the user must enter values for coefficients a, b, and c, and
    the program must find the value(s) of x for which ax² + bx + c  equals zero.
  prefs: []
  type: TYPE_NORMAL
- en: This problem can be divided into two individual subproblems depending on the
    value of coefficient a.
  prefs: []
  type: TYPE_NORMAL
- en: i)If coefficient a is not equal to zero, the roots of the equation can be found
    using the discriminant D. Please note that the solution to this exercise presented
    below finds no complex roots when D < 0; this is beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: ii)If coefficient a is equal to zero, the equation becomes a linear equation,
    bx + c = 0, for which the solution was provided in the previous exercise ([Exercise
    22.3-3](#toc_13)).
  prefs: []
  type: TYPE_NORMAL
- en: All necessary paths are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-13.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)The path on the right (a = 0) is the solution to the linear
    equation bx + c = 0.'
  prefs: []
  type: TYPE_NORMAL
- en: Using this diagram you can design the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-14.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.3-4'
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: print("Enter values for coefficients a, b and c")
  prefs: []
  type: TYPE_NORMAL
- en: a, b, c = float(input()), float(input()), float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: D = b ** 2 - 4 * a * c
  prefs: []
  type: TYPE_NORMAL
- en: 'if D >= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if D > 0:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x1 = (-b + sqrt(D)) / (2 * a)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: x2 = (-b - sqrt(D)) / (2 * a)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Roots:", x1, ",", x2)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x = -b / (2 * a)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("One double root:", x)
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Complex Roots")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if b != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: x = -c / b
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Root:", x)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif c != 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Undefined")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Indeterminate form")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 22.4 Exercises with Series of Consecutive Ranges of Values
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As you have already seen, in many problems the value of a variable or the result
    of an expression can define which statement or block of statements must be executed.
    In the exercises that follow, you will learn how to test if a value or the result
    of an expression belongs within a specific range of values (from a series of consecutive
    ranges of values).
  prefs: []
  type: TYPE_NORMAL
- en: Suppose that you want to display a message indicating the types of clothes a
    woman might wear at different temperatures.
  prefs: []
  type: TYPE_NORMAL
- en: '| Outdoor Temperature (in degrees Fahrenheit) | Types of Clothes a Woman Might
    Wear |'
  prefs: []
  type: TYPE_TB
- en: '| Temperature < 45 | Sweater, coat, jeans, shirt, shoes |'
  prefs: []
  type: TYPE_TB
- en: '| 45 ≤ Temperature < 65 | Sweater, jeans, jacket, shoes |'
  prefs: []
  type: TYPE_TB
- en: '| 65 ≤ Temperature < 75 | Capris, shorts, t‑shirt, tank top, flip flops, athletic
    shoes |'
  prefs: []
  type: TYPE_TB
- en: '| 75 ≤ Temperature | Shorts, t‑shirt, tank top, skort, skirt, flip flops |'
  prefs: []
  type: TYPE_TB
- en: At first glance, single-alternative decision structures might seem like the
    logical choice. While not incorrect, a more in-depth analysis reveals that each
    condition is interdependent, meaning that when one of these evaluates to True,
    none of the others should be evaluated. You need to select just one alternative
    from a set of possibilities.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this type of exercise, you can use a multiple-alternative decision
    structure or nested decision control structures. However, the former is the best
    choice, as it is more convenient and increases readability, as you can see in
    the code fragment that follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'if temperature < 45:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Sweater, coat, jeans, shirt, shoes")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif temperature >= 45 and temperature < 65:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Sweater, jeans, jacket, shoes")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif temperature >= 65 and temperature < 75:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Capris, shorts, t-shirt, tank top, flip flops, athletic shoes")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif temperature >= 75:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Shorts, t-shirt, tank top, skort, skirt, flip flops")
  prefs: []
  type: TYPE_NORMAL
- en: However, upon closer examination, it becomes apparent that all the underlined
    Boolean expressions are not actually required. For example, if the first Boolean
    expression (temperature < 45) evaluates to False, the flow of execution continues
    to evaluate the second Boolean expression. In this step, however, variable temperature
    is definitely greater than or equal to 45 because of the first Boolean expression,
    which has already evaluated to False. Therefore, the Boolean expression temperature
    >= 45, when evaluated, is certainly True and thus can be omitted. The same logic
    applies to all cases; you can omit all the underlined Boolean expressions. The
    final code fragment is shown here, with all unnecessary evaluations removed.
  prefs: []
  type: TYPE_NORMAL
- en: 'if temperature < 45:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Sweater, coat, jeans, shirt, shoes")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif temperature < 65:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Sweater, jeans, jacket, shoes")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif temperature < 75:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Capris, shorts, t-shirt, tank top, flip flops, athletic shoes")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Shorts, t-shirt, tank top, skort, skirt, flip flops")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.4-1 Calculating the Discount
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A customer receives a discount based on the total amount of their order. If
    the total amount ordered is less than $30, no discount is given. If the total
    amount is equal to or greater than $30 and less than $70, a discount of 5% is
    applied. If the total amount is equal to or greater than $70 and less than $150,
    a discount of 10% is applied. If the total amount is $150 or more, the customer
    receives a discount of 20%. Write a Python program that prompts the user to enter
    the total amount of their order and then calculates and displays the applied discount
    rate, the discount amount in dollars, and the final after-discount amount. Assume
    that the user enters a non-negative value for the amount.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The following table summarizes the various discounts that are offered.
  prefs: []
  type: TYPE_NORMAL
- en: '| Range | Discount |'
  prefs: []
  type: TYPE_TB
- en: '| amount < $30 | 0% |'
  prefs: []
  type: TYPE_TB
- en: '| $30 ≤ amount < $70 | 5% |'
  prefs: []
  type: TYPE_TB
- en: '| $70 ≤ amount < $150 | 10% |'
  prefs: []
  type: TYPE_TB
- en: '| $150 ≤ amount | 20% |'
  prefs: []
  type: TYPE_TB
- en: The Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-1a'
  prefs: []
  type: TYPE_NORMAL
- en: 'amount = float(input("Enter total amount: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if amount < 30:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'elif amount >= 30 and amount < 70:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'elif amount >= 70 and amount < 150:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'elif amount >= 150:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 20
  prefs: []
  type: TYPE_NORMAL
- en: discountAmount = amount * discount / 100
  prefs: []
  type: TYPE_NORMAL
- en: finalAmount = amount - discountAmount
  prefs: []
  type: TYPE_NORMAL
- en: print("You got a discount of ", discount, "%", sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: print("You saved $", discountAmount, sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: print("You must pay $", finalAmount, sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: However, since it is given that the user enters valid values and not negative
    ones, all the underlined Boolean expressions are not actually required. The final
    Python program is shown here, with all unnecessary evaluations removed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-1b'
  prefs: []
  type: TYPE_NORMAL
- en: 'amount = float(input("Enter total amount: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if amount < 30:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'elif amount < 70:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'elif amount < 150:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 20
  prefs: []
  type: TYPE_NORMAL
- en: discountAmount = amount * discount / 100
  prefs: []
  type: TYPE_NORMAL
- en: finalAmount = amount - discountAmount
  prefs: []
  type: TYPE_NORMAL
- en: print("You got a discount of ", discount, "%", sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: print("You saved $", discountAmount, sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: print("You must pay $", finalAmount, sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.4-2 Validating Data Input and Calculating the Discount
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Rewrite the Python program of the previous exercise to validate the data input.
    An error message must be displayed when the user enters a negative value.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The Python program that solves this exercise, given in general form, is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) Main Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'amount = float(input("Enter total amount: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if amount < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Entered value is negative")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code Fragment 1: Calculate and display the applied discount rate, the discount
    amount and the final after-discount amount.'
  prefs: []
  type: TYPE_NORMAL
- en: Code Fragment 1 that follows is taken from the previous exercise ([Exercise
    22.4-1](#toc_16)). It calculates and displays the applied discount rate, the discount
    amount in dollars, and the final after-discount amount.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) Code Fragment 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'if amount < 30:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'elif amount < 70:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'elif amount < 150:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 20
  prefs: []
  type: TYPE_NORMAL
- en: discountAmount = amount * discount / 100
  prefs: []
  type: TYPE_NORMAL
- en: finalAmount = amount - discountAmount
  prefs: []
  type: TYPE_NORMAL
- en: print("You got a discount of ", discount, "%", sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: print("You saved $", discountAmount, sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: print("You must pay $", finalAmount, sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: After embedding Code Fragment 1 in Main Code, the final Python program becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-2'
  prefs: []
  type: TYPE_NORMAL
- en: 'amount = float(input("Enter total amount: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if amount < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Entered value is negative")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: if amount < 30:                                 [[More…]](more.html#more_22_4_2_1)
  prefs: []
  type: TYPE_NORMAL
- en: discount = 0
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif amount < 70:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif amount < 150:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: discount = 20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: discountAmount = amount * discount / 100
  prefs: []
  type: TYPE_NORMAL
- en: finalAmount = amount - discountAmount
  prefs: []
  type: TYPE_NORMAL
- en: print("You got a discount of ", discount, "%", sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: print("You saved $", discountAmount, sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: print("You must pay $", finalAmount, sep = "")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.4-3 Sending a Parcel
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In a post office, the shipping cost for sending a medium parcel depends on its
    weight and whether its destination is inside or outside the country. Shipping
    costs are calculated according to the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Parcel''s Weight (in lb) | Destination Inside the Country (in USD per lb)
    | Destination Outside the Country (in USD) |'
  prefs: []
  type: TYPE_TB
- en: '| weight ≤ 1 | $0.010 | $10 |'
  prefs: []
  type: TYPE_TB
- en: '| 1 < weight ≤ 2 | $0.013 | $20 |'
  prefs: []
  type: TYPE_TB
- en: '| 2 < weight ≤ 4 | $0.015 | $50 |'
  prefs: []
  type: TYPE_TB
- en: '| 4 < weight | $0.020 | $60 |'
  prefs: []
  type: TYPE_TB
- en: 'Design a flowchart and write the corresponding Python program that prompts
    the user to enter the weight of a parcel and its destination (I: inside the country,
    O: outside the country) and then calculates and displays the shipping cost.'
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The following flowchart, given in general form, solves this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-15.png)'
  prefs: []
  type: TYPE_IMG
- en: Now you need two multiple-alternative decision structures to calculate the shipping
    cost for parcels sent inside and outside the country. These are shown in the respective
    left and right flowchart fragments below.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-16.png)'
  prefs: []
  type: TYPE_IMG
- en: After combining these two flowcharts with the previous one, the final flowchart
    becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-17.png)'
  prefs: []
  type: TYPE_IMG
- en: The corresponding Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-3'
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Enter weight & destination: ")'
  prefs: []
  type: TYPE_NORMAL
- en: weight = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: dest = input()
  prefs: []
  type: TYPE_NORMAL
- en: 'if dest.upper() == "I":'
  prefs: []
  type: TYPE_NORMAL
- en: if weight <= 1:    [[More…]](more.html#more_22_4_3_1)
  prefs: []
  type: TYPE_NORMAL
- en: cost = weight * 0.010
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif weight <= 2:'
  prefs: []
  type: TYPE_NORMAL
- en: cost = weight * 0.013
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif weight <= 4:'
  prefs: []
  type: TYPE_NORMAL
- en: cost = weight * 0.015
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: cost = weight * 0.020
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: if weight <= 1:    [[More…]](more.html#more_22_4_3_2)
  prefs: []
  type: TYPE_NORMAL
- en: cost = 10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif weight <= 2:'
  prefs: []
  type: TYPE_NORMAL
- en: cost = 20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif weight <= 4:'
  prefs: []
  type: TYPE_NORMAL
- en: cost = 50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: cost = 60
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Shipping cost:", cost)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A user may enter the letter I (for destination) in lowercase
    or uppercase. The method upper() ensures that the program executes properly for
    both cases.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.4-4 Finding the Values of y
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that finds and
    displays the values of y (if possible) in the following formula
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-18.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: 'In this exercise, there are two restrictions on the fractions:'
  prefs: []
  type: TYPE_NORMAL
- en: ►In fraction ![Image](img/chapter22-19.png), the value of x cannot be −1.
  prefs: []
  type: TYPE_NORMAL
- en: ►In fraction ![Image](img/chapter22-20.png), the value of x cannot be +9.
  prefs: []
  type: TYPE_NORMAL
- en: For all other fractions, it's impossible for the denominators to be set to zero
    because of the range in which x belongs.
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-4a'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter a value for x: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > -5 and x <= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: if x != -1:                   [[More…]](more.html#more_22_4_4_a1)
  prefs: []
  type: TYPE_NORMAL
- en: y = x / (x - 3) + (8 + x) / (x + 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(y)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid value")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x > 0 and x <= 6:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 40 * x / (x - 8)        [[More…]](more.html#more_22_4_4_a2)
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x > 6 and x <= 20:'
  prefs: []
  type: TYPE_NORMAL
- en: if x != 9:             [[More…]](more.html#more_22_4_4_a3)
  prefs: []
  type: TYPE_NORMAL
- en: y = 3 * x / (x - 9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(y)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid value")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = abs(x)      [[More…]](more.html#more_22_4_4_a4)
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: If you are wondering whether you can remove all print(y) statements and instead
    have a single print(y) statement at the end of the program, the answer is “no”.
    Since there are paths that do not include that statement, you must include it
    in every required path. However, by making a slight modification to the code and
    checking for invalid values at the beginning, you can have the opportunity to
    move the print(y) statement to the end of all paths. The modified Python program
    is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-4b'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter a value for x: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == -1 or x == 9:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid value")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > -5 and x <= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: y = x / (x - 3) + (8 + x) / (x + 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x > 0 and x <= 6:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 40 * x / (x - 8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x > 6 and x <= 20:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 3 * x / (x - 9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = abs(x)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: Now, you might be wondering if the underlined Boolean expressions are redundant,
    right? Suppose you do remove them, and the user enters a value of −20 for x. The
    flow of execution would then reach the Boolean expression x <= 0, which would
    evaluate to True. This means that the fraction ![Image](img/chapter22-21.png)
    would be calculated instead of the absolute value of x.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to remove the underlined Boolean expressions, you need to make a
    slight modification to the code. The key here is to first examine the case of
    the absolute value of x. Following that, you can find a proposed solution below.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-4c'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = float(input("Enter a value for x: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == -1 or x == 9:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid value")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x <= -5 or x > 20:'
  prefs: []
  type: TYPE_NORMAL
- en: y = abs(x)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x <= 0:'
  prefs: []
  type: TYPE_NORMAL
- en: y = x / (x - 3) + (8 + x) / (x + 1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x <= 6:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 40 * x / (x - 8)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 3 * x / (x - 9)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)It is obvious that one problem can have many solutions.
    It is up to you to find the optimal one!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.4-5 Progressive Rates and Electricity Consumption
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The LAV Electricity Company charges subscribers for their electricity consumption
    according to the following table (monthly rates for domestic accounts). Assume
    that all extra charges such as transmission service charges and distribution charges
    are all included.
  prefs: []
  type: TYPE_NORMAL
- en: '| Kilowatt‑hours (kWh) | USD per kWh |'
  prefs: []
  type: TYPE_TB
- en: '| kWh ≤ 500 | $0.10 |'
  prefs: []
  type: TYPE_TB
- en: '| 501 ≤ kWh ≤ 2000 | $0.25 |'
  prefs: []
  type: TYPE_TB
- en: '| 2001 ≤ kWh ≤ 4500 | $0.40 |'
  prefs: []
  type: TYPE_TB
- en: '| 4501 ≤ kWh | $0.60 |'
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter the total number of kWh
    consumed and then calculates and displays the total amount to pay.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the rates are progressive.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The term progressive rates means that when a customer consumes, for example,
    2200 kWh, not all of the kilowatt-hours are charged at $0.40\. The first 500 kWh
    are charged at $0.10, the next 1500 kWh are charged at $0.25 and only the last
    200 kWh are charged at $0.40\. Thus, the customer must pay
  prefs: []
  type: TYPE_NORMAL
- en: 500 × $0.10 + 1500 × $0.25 + 200 × $0.40 = $505
  prefs: []
  type: TYPE_NORMAL
- en: Applying the same logic, the total amount to be paid when the customer consumes,
    say, 4800 kWh can be calculated as follows. The first 500 kWh are charged at $0.10,
    the next 1500 kWh are charged at $0.25, the next 2500 kWh are charged at 0.40,
    and only the last 300 kWh are charged at $0.60\. Thus, the customer must pay
  prefs: []
  type: TYPE_NORMAL
- en: 500 × $0.10 + 1500 × $0.25 + 2500 × $0.40 + 300 × $0.60 = $1605
  prefs: []
  type: TYPE_NORMAL
- en: The following diagram can help you fully understand how to calculate the total
    amount to pay when the rates are progressive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-22.png)'
  prefs: []
  type: TYPE_IMG
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-5'
  prefs: []
  type: TYPE_NORMAL
- en: 'kwh = int(input("Enter number of Kilowatt-hours consumed: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if kwh <= 500:'
  prefs: []
  type: TYPE_NORMAL
- en: t = kwh * 0.10
  prefs: []
  type: TYPE_NORMAL
- en: 'elif kwh <= 2000:'
  prefs: []
  type: TYPE_NORMAL
- en: t = 500 * 0.10 + (kwh - 500) * 0.25
  prefs: []
  type: TYPE_NORMAL
- en: 'elif kwh <= 4500:'
  prefs: []
  type: TYPE_NORMAL
- en: t = 500 * 0.10 + 1500 * 0.25 + (kwh - 2000) * 0.40
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: t = 500 * 0.10 + 1500 * 0.25 + 2500 * 0.4 + (kwh - 4500) * 0.60
  prefs: []
  type: TYPE_NORMAL
- en: print("Total amount to pay:", t)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.4-6 Progressive Rates and Text Messaging Services
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: The LAV Cell Phone Company charges customers a basic rate of $8 per month to
    send text messages. Additional rates are charged based on the total number of
    text messages sent, as shown in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Number of Text Messages Sent | USD per text message |'
  prefs: []
  type: TYPE_TB
- en: '| Up to 50 | Free of charge |'
  prefs: []
  type: TYPE_TB
- en: '| 51 ‐ 150 | $0.05 |'
  prefs: []
  type: TYPE_TB
- en: '| 151 and above | $0.10 |'
  prefs: []
  type: TYPE_TB
- en: Federal, state, and local taxes add a total of 10% to each bill.
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter the number of text messages
    sent and then calculates and displays the total amount to pay.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the rates are progressive.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is presented here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.4-6'
  prefs: []
  type: TYPE_NORMAL
- en: 'count = int(input("Enter number of text messages sent: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if count <= 50:'
  prefs: []
  type: TYPE_NORMAL
- en: extra = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'elif count <= 150:'
  prefs: []
  type: TYPE_NORMAL
- en: extra = (count - 50) * 0.05
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: extra = 100 * 0.05 + (count - 150) * 0.10
  prefs: []
  type: TYPE_NORMAL
- en: 'totalWithoutTaxes = 8 + extra         #Add basic rate of $8'
  prefs: []
  type: TYPE_NORMAL
- en: taxes = totalWithoutTaxes * 10 / 100  #Calculate the total taxes
  prefs: []
  type: TYPE_NORMAL
- en: 'total = totalWithoutTaxes + taxes     #Calculate the total amount to pay'
  prefs: []
  type: TYPE_NORMAL
- en: print("Total amount to pay:", total)
  prefs: []
  type: TYPE_NORMAL
- en: 22.5 Exercises of a General Nature with Decision Control Structures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exercise 22.5-1 Finding a Leap Year
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a year and then displays
    a message indicating whether it is a leap year; otherwise the message “Not a leap
    year” must be displayed. Moreover, if the user enters a year less than 1582, an
    error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: (Note that this involves data validation!)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: 'According to the Gregorian calendar, which was first introduced in 1582, a
    year is a leap year when at least one of the following conditions is met:'
  prefs: []
  type: TYPE_NORMAL
- en: '1^(st) Condition: The year is exactly divisible by 4, and not by 100.'
  prefs: []
  type: TYPE_NORMAL
- en: '2^(nd) Condition: The year is exactly divisible by 400.'
  prefs: []
  type: TYPE_NORMAL
- en: In the following table, some years are not leap years because neither of the
    two conditions evaluates to True.
  prefs: []
  type: TYPE_NORMAL
- en: '| Year | Leap Year | Conditions |'
  prefs: []
  type: TYPE_TB
- en: '| 1600 | Yes | 2nd Condition is True. It is exactly divisible by 400 |'
  prefs: []
  type: TYPE_TB
- en: '| 1900 | No | Both conditions are False. |'
  prefs: []
  type: TYPE_TB
- en: '| 1904 | Yes | 1st Condition is True. It is exactly divisible by 4, and not
    by 100 |'
  prefs: []
  type: TYPE_TB
- en: '| 1905 | No | Both conditions are False. |'
  prefs: []
  type: TYPE_TB
- en: '| 2000 | Yes | 2nd Condition is True. It is exactly divisible by 400 |'
  prefs: []
  type: TYPE_TB
- en: '| 2002 | No | Both conditions are False. |'
  prefs: []
  type: TYPE_TB
- en: '| 2004 | Yes | 1st Condition is True. It is exactly divisible by 4, and not
    by 100 |'
  prefs: []
  type: TYPE_TB
- en: '| 2024 | Yes | 1st Condition is True. It is exactly divisible by 4, and not
    by 100 |'
  prefs: []
  type: TYPE_TB
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.5-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'y = int(input("Enter a year: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y < 1582:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Error! The year cannot be less than 1582")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Leap year!")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Not a leap year")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The and operator has a higher precedence than the or operator.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.5-2 Displaying the Days of the Month
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a year and a month and
    then displays how many days are in that month. The program needs to take into
    consideration the leap years. In case of a leap year, February has 29 instead
    of 28 days. Moreover, if the user enters a year less than 1582, an error message
    must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The following Python program, given in general form, solves this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) Main Code'
  prefs: []
  type: TYPE_NORMAL
- en: 'y = int(input("Enter a year: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y < 1582:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Error! The year cannot be less than 1582")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'm = int(input("Enter a month (1 - 12): "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if m == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Code Fragment 1: Check whether the year (in variable y) is a leap year and
    display how many days are in February.'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif m in [4, 6, 9, 11]:'
  prefs: []
  type: TYPE_NORMAL
- en: print("This month has 30 days")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("This month has 31 days")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Code Fragment 1, shown here, checks whether the year (in variable y) is a leap
    year and displays how many days are in February.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) Code Fragment 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("This month has 29 days")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("This month has 28 days ")
  prefs: []
  type: TYPE_NORMAL
- en: After embedding Code Fragment 1 in Main Code, the final Python program becomes
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.5-2'
  prefs: []
  type: TYPE_NORMAL
- en: 'y = int(input("Enter a year: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y < 1582:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Error! The year cannot be less than 1582")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'm = int(input("Enter a month (1 - 12): "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if m == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: if y % 4 == 0 and y % 100 != 0 or y % 400 == 0:   [[More…]](more.html#more_22_5_2_1)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("This month has 29 days")
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("This month has 28 days ")
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif m in [4, 6, 9, 11]:'
  prefs: []
  type: TYPE_NORMAL
- en: print("This month has 30 days")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("This month has 31 days")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Exercise 22.5-3 Checking for Proper Capitalization and Punctuation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter a sentence and then checks
    it for proper capitalization and punctuation. The program must determine if the
    string begins with an uppercase letter and ends with a punctuation mark (check
    only for periods, question marks, and exclamation marks).
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise you need to isolate the first and the last character of the
    string. As you already know, you can access any individual character of a string
    using substring notation. You can use index 0 to access the first character, index
    1 to access the second character, and so on. On the other hand, you can use index
    −1 to access the last character, index −2 to access the last but one character
    and so on.
  prefs: []
  type: TYPE_NORMAL
- en: Thus, you can isolate the first character of string sentence using the following
    Python statement
  prefs: []
  type: TYPE_NORMAL
- en: firstChar = sentence[0]
  prefs: []
  type: TYPE_NORMAL
- en: and the last character using the following Python statement
  prefs: []
  type: TYPE_NORMAL
- en: lastChar = sentence[−1]
  prefs: []
  type: TYPE_NORMAL
- en: The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.5-3a'
  prefs: []
  type: TYPE_NORMAL
- en: 'sentence = input("Enter a sentence: ")'
  prefs: []
  type: TYPE_NORMAL
- en: firstChar = sentence[0]  #Get first character
  prefs: []
  type: TYPE_NORMAL
- en: lastChar = sentence[-1]  #Get last character
  prefs: []
  type: TYPE_NORMAL
- en: sentenceIsOkay = True
  prefs: []
  type: TYPE_NORMAL
- en: 'if firstChar != firstChar.upper():'
  prefs: []
  type: TYPE_NORMAL
- en: sentenceIsOkay = False
  prefs: []
  type: TYPE_NORMAL
- en: 'elif lastChar not in [".", "?", "!"]:'
  prefs: []
  type: TYPE_NORMAL
- en: sentenceIsOkay = False
  prefs: []
  type: TYPE_NORMAL
- en: 'if sentenceIsOkay == True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Sentence is okay!")
  prefs: []
  type: TYPE_NORMAL
- en: In the beginning, the program assumes that the sentence is okay (sentenceIsOkay
    = True). Then, it checks for proper capitalization and proper punctuation and
    if it finds something wrong, it assigns the value False to the variable sentenceIsOkay.
  prefs: []
  type: TYPE_NORMAL
- en: Another more Pythonic way, however, is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.5-3b'
  prefs: []
  type: TYPE_NORMAL
- en: 'sentence = input("Enter a sentence: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'if sentence[0] == sentence[0].upper() and sentence[-1] in [".", "?", "!"]:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Sentence is okay!")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 22.5-4 Is the Number a Palindrome?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A palindrome is a number that remains the same after reversing its digits. For
    example, the number 13631 is a palindrome. Write a Python program that lets the
    user enter a five-digit integer and tests whether or not this number is a palindrome.
    Moreover, a different error message for each type of input error must be displayed
    when the user enters a float, or any integer with either less than or more than
    five digits.
  prefs: []
  type: TYPE_NORMAL
- en: (Note that this involves data validation!)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: There are actually three different approaches! The first one splits the number's
    digits into five different variables while the second and the third ones handle
    the number as if it were a string. Let's analyze them all!
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: To test if the user enters a palindrome number, you need to split its digits
    into five different variables as you learned in [Chapter 13](chapter13.html).
    Then, you can check whether the 1^(st) digit is equal to the 5^(th) digit and
    the 2^(nd) digit is equal to the 4^(th) digit. If this evaluates to True, the
    number is a palindrome.
  prefs: []
  type: TYPE_NORMAL
- en: To validate data input, you need to check whether the user has entered a five-digit
    number. Keep in mind that all five-digit numbers are in the range of 10000 to
    99999\. Therefore, you can just restrict the data input to within this range.
  prefs: []
  type: TYPE_NORMAL
- en: In order to display many different error messages, the best practice is to use
    a multiple-alternative decision structure which first checks data input validity
    for all cases, and then tries to solve the required problem. For example, if you
    need to check for various errors, you can do something like the following.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-23.png)'
  prefs: []
  type: TYPE_IMG
- en: The final Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.5-4a'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x != int(x):'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered a float")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x < 10000:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered less than five digits")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x > 99999:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered more than five digits")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: '#Split the digits of x into 5 different variables'
  prefs: []
  type: TYPE_NORMAL
- en: digit1, r = divmod(x, 10000)
  prefs: []
  type: TYPE_NORMAL
- en: digit2, r = divmod(r, 1000)
  prefs: []
  type: TYPE_NORMAL
- en: digit3, r = divmod(r, 100)
  prefs: []
  type: TYPE_NORMAL
- en: digit4, digit5 = divmod(r, 10)
  prefs: []
  type: TYPE_NORMAL
- en: 'if digit1 == digit5 and digit2 == digit4:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Palindrome")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Not palindrome")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: This approach handles the number as if it were a string. It compares the first
    character to the last one and the second character to the last but one. If they
    are equal, it means that the number is a palindrome. The Python program is shown
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.5-4b'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x != int(x):'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered a float")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x < 10000:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered less than five digits")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x > 99999:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered more than five digits")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: xStr = str(int(x))
  prefs: []
  type: TYPE_NORMAL
- en: 'if xStr[0] == xStr[-1] and xStr[1] == xStr[-2]:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Palindrome")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Not palindrome")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Third approach
  prefs: []
  type: TYPE_NORMAL
- en: This approach also handles the number as if it were a string. It reverses it
    using slicing and compares the initial string to the reversed one. If they are
    equal, it means that the number is a palindrome. The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_22.5-4c'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x != int(x):'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered a float")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x < 10000:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered less than five digits")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif x > 99999:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You entered more than five digits")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: xStr = str(int(x))
  prefs: []
  type: TYPE_NORMAL
- en: xReversed = xStr[::-1]
  prefs: []
  type: TYPE_NORMAL
- en: 'if str(int(x)) == xReversed:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Palindrome")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Not palindrome")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 22.6 Boolean Expressions Reference and Handy Tips
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section summarizes all the Boolean expressions that you've encountered
    on your journey with Python so far, along with additional expressions and useful
    tips. Whether you're a beginner or a seasoned programmer, these expressions and
    tips will serve as valuable tools in your coding arsenal. Keep them close, because
    you never know when they'll come in handy. For some of them, two or more approaches
    to achieve the desired result are provided.
  prefs: []
  type: TYPE_NORMAL
- en: 1)How to check if number in x is between A and B
  prefs: []
  type: TYPE_NORMAL
- en: ►x >= A and x <= B
  prefs: []
  type: TYPE_NORMAL
- en: ►A <= x <= B
  prefs: []
  type: TYPE_NORMAL
- en: 2)How to check if number in x is not between A and B
  prefs: []
  type: TYPE_NORMAL
- en: ►not(x >= A and x <= B)
  prefs: []
  type: TYPE_NORMAL
- en: ►not(A <= x <= B)
  prefs: []
  type: TYPE_NORMAL
- en: ►x < A or x > B
  prefs: []
  type: TYPE_NORMAL
- en: 3)How to check if x is either equal to A, B, or C
  prefs: []
  type: TYPE_NORMAL
- en: ►x == A or x == B or x == C
  prefs: []
  type: TYPE_NORMAL
- en: ►x in [A, B, C]
  prefs: []
  type: TYPE_NORMAL
- en: 4)How to check if x is neither equal to A, nor B, nor C
  prefs: []
  type: TYPE_NORMAL
- en: ►x != A and x != B and x != C
  prefs: []
  type: TYPE_NORMAL
- en: ►not(x == A or x == B or x == C)
  prefs: []
  type: TYPE_NORMAL
- en: ►x not in [A, B, C]
  prefs: []
  type: TYPE_NORMAL
- en: 5)How to check if x contains an integer. Please note that variable x must be
    of type float.
  prefs: []
  type: TYPE_NORMAL
- en: ►x == int(x)
  prefs: []
  type: TYPE_NORMAL
- en: 6)How to check if x contains a float.
  prefs: []
  type: TYPE_NORMAL
- en: ►x != int(x)
  prefs: []
  type: TYPE_NORMAL
- en: 7)How to check if x contains an even number.
  prefs: []
  type: TYPE_NORMAL
- en: ►x % 2 == 0
  prefs: []
  type: TYPE_NORMAL
- en: ►x % 2 != 1
  prefs: []
  type: TYPE_NORMAL
- en: ►not(x % 2 == 1)
  prefs: []
  type: TYPE_NORMAL
- en: ►not(x % 2 != 0)
  prefs: []
  type: TYPE_NORMAL
- en: 8)How to check if x contains an odd number.
  prefs: []
  type: TYPE_NORMAL
- en: ►x % 2 == 1
  prefs: []
  type: TYPE_NORMAL
- en: ►x % 2 != 0
  prefs: []
  type: TYPE_NORMAL
- en: ►not(x % 2 == 0)
  prefs: []
  type: TYPE_NORMAL
- en: ►not(x % 2 != 1)
  prefs: []
  type: TYPE_NORMAL
- en: 9)How to check if x is an integer multiple of y
  prefs: []
  type: TYPE_NORMAL
- en: ►x % y == 0
  prefs: []
  type: TYPE_NORMAL
- en: 10)How to isolate the decimal part of a real number
  prefs: []
  type: TYPE_NORMAL
- en: ►x - int(x)
  prefs: []
  type: TYPE_NORMAL
- en: 11)How to isolate the first decimal digit of a real number
  prefs: []
  type: TYPE_NORMAL
- en: ►int(x * 10) % 10
  prefs: []
  type: TYPE_NORMAL
- en: 12)How to isolate the second decimal digit of a real number
  prefs: []
  type: TYPE_NORMAL
- en: ►int(x * 100) % 10
  prefs: []
  type: TYPE_NORMAL
- en: 13)How to isolate the N^(th) decimal digit of a real number
  prefs: []
  type: TYPE_NORMAL
- en: ►int(x * 10 ** N) % 10
  prefs: []
  type: TYPE_NORMAL
- en: 14)How to isolate the last digit of an integer
  prefs: []
  type: TYPE_NORMAL
- en: ►x % 10
  prefs: []
  type: TYPE_NORMAL
- en: 15)How to isolate the second to last digit of an integer
  prefs: []
  type: TYPE_NORMAL
- en: ►x // 10 % 10
  prefs: []
  type: TYPE_NORMAL
- en: 16)How to isolate the N^(th) to last digit of an integer
  prefs: []
  type: TYPE_NORMAL
- en: ►x // 10 ** N % 10
  prefs: []
  type: TYPE_NORMAL
- en: 17)How to check if a word/sentence starts with the letter “B”
  prefs: []
  type: TYPE_NORMAL
- en: ►x[0] == "B"
  prefs: []
  type: TYPE_NORMAL
- en: 18)How to check if a word/sentence ends with a period “.”
  prefs: []
  type: TYPE_NORMAL
- en: ►x[len(x) - 1] == "."
  prefs: []
  type: TYPE_NORMAL
- en: ►x[-1] == "."
  prefs: []
  type: TYPE_NORMAL
- en: 19)How to find the middle number among three numbers x, y, and z
  prefs: []
  type: TYPE_NORMAL
- en: ►x + y + z - minimum - maximum
  prefs: []
  type: TYPE_NORMAL
- en: 20)How to find the sum of the two smallest numbers among three numbers x, y,
    and z
  prefs: []
  type: TYPE_NORMAL
- en: ►x + y + z - maximum
  prefs: []
  type: TYPE_NORMAL
- en: 21)How to find the sum of the two greatest numbers among three numbers x, y,
    and z
  prefs: []
  type: TYPE_NORMAL
- en: ►x + y + z - minimum
  prefs: []
  type: TYPE_NORMAL
- en: 22)How to find the sum of the three middle numbers among five numbers x, y,
    z, w, and u
  prefs: []
  type: TYPE_NORMAL
- en: ►x + y + z + w + u – minimum - maximum
  prefs: []
  type: TYPE_NORMAL
- en: 23)How to check if the distance between two numbers is greater than NUMBER
  prefs: []
  type: TYPE_NORMAL
- en: ►abs(x - y) > NUMBER
  prefs: []
  type: TYPE_NORMAL
- en: 24)How to check if positive integer has three digits
  prefs: []
  type: TYPE_NORMAL
- en: ►x >= 100 and x <= 999
  prefs: []
  type: TYPE_NORMAL
- en: ►100 <= x <= 999
  prefs: []
  type: TYPE_NORMAL
- en: ►len(str(x)) == 3
  prefs: []
  type: TYPE_NORMAL
- en: 25)How to check if an integer has three digits
  prefs: []
  type: TYPE_NORMAL
- en: ►abs(x) >= 100 and abs(x) <= 999
  prefs: []
  type: TYPE_NORMAL
- en: ►100 <= abs(x) <= 999
  prefs: []
  type: TYPE_NORMAL
- en: ►len(str(abs(x))) == 3
  prefs: []
  type: TYPE_NORMAL
- en: 26)How to check if a positive integer has four digits and starts with 5
  prefs: []
  type: TYPE_NORMAL
- en: ►x >= 5000 and x <= 5999
  prefs: []
  type: TYPE_NORMAL
- en: 27)How to check if two numbers have the same sign
  prefs: []
  type: TYPE_NORMAL
- en: ►x > 0 and y > 0 or x < 0 and y < 0
  prefs: []
  type: TYPE_NORMAL
- en: ►x * y > 0
  prefs: []
  type: TYPE_NORMAL
- en: 28)How to check if both numbers are either even or odd
  prefs: []
  type: TYPE_NORMAL
- en: ►x % 2 == 0 and y % 2 == 0 or x % 2 == 1 and y % 2 == 1
  prefs: []
  type: TYPE_NORMAL
- en: ►x % 2 == y % 2
  prefs: []
  type: TYPE_NORMAL
- en: 29)How to check if exactly one of the two conditions BE1 or BE2 is True, but
    not both (Exclusive OR operation)
  prefs: []
  type: TYPE_NORMAL
- en: ►BE1 and not(BE2) or BE2 and not(BE1)
  prefs: []
  type: TYPE_NORMAL
- en: 30)How to check if the year in y is a leap year
  prefs: []
  type: TYPE_NORMAL
- en: ►y % 4 == 0 and y % 100 != 0 or y % 400 == 0
  prefs: []
  type: TYPE_NORMAL
- en: 22.7 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Write a Python program that prompts the user to enter a numeric value and
    then calculates and displays its square root. Moreover, an error message must
    be displayed when the user enters a negative value.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Design a flowchart that lets the user enter an integer and, if its last digit
    is equal to 5, a message “Last digit equal to 5” is displayed; otherwise, a message
    “Nothing special” is displayed. Moreover, if the user enters a negative value,
    an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: You can isolate the last digit of any integer using a modulus 10 operation.'
  prefs: []
  type: TYPE_NORMAL
- en: 3)Design a flowchart and write the corresponding Python program that lets the
    user enter two integers and then displays a message indicating whether at least
    one integer is odd; otherwise, a message “Nothing special” is displayed. Moreover,
    if the user enters negative values, an error message must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 4)Design a flowchart and write the corresponding Python program that prompts
    the user to enter an integer, and then displays a message indicating whether this
    number is even; it must display “Odd” otherwise. Moreover, a different error message
    for each type of input error must be displayed when the user enters a negative
    value or a float.
  prefs: []
  type: TYPE_NORMAL
- en: 5)Design a flowchart and write the corresponding Python program that prompts
    the user to enter an integer and then displays a message indicating whether this
    number is exactly divisible by 3 and by 4; otherwise the message “NN is not what
    you are looking for!” must be displayed (where NN is the user-provided number).
    For example, 12 is exactly divisible by 3 and by 4\. Moreover, an error message
    must be displayed when the user enters a negative value or a float.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Design a flowchart and write the corresponding Python program that lets the
    user enter two integers and then displays a message indicating whether both numbers
    are exactly divisible by 3 and by 4; otherwise the message “X and Y are not what
    you are looking for!” must be displayed (where X and Y are the user-provided numbers).
    Moreover, a different error message for each type of input error for each integer
    must be displayed when the user enters negative values or floats.
  prefs: []
  type: TYPE_NORMAL
- en: '7)Write a Python program that displays the following menu:'
  prefs: []
  type: TYPE_NORMAL
- en: 1)Convert Kelvin to Fahrenheit
  prefs: []
  type: TYPE_NORMAL
- en: 2)Convert Fahrenheit to Kelvin
  prefs: []
  type: TYPE_NORMAL
- en: 3)Convert Fahrenheit to Celsius
  prefs: []
  type: TYPE_NORMAL
- en: 4)Convert Celsius to Fahrenheit
  prefs: []
  type: TYPE_NORMAL
- en: The program must then prompt the user to enter a choice (of 1, 2, 3, or 4) and
    a temperature value, and subsequently calculate and display the required value.
    Moreover, a different error message for each type of input error must be displayed
    when the user enters a choice other than 1, 2, 3, or 4, or a temperature value
    lower than absolute zero^([[17]](footnotes.html#Endnote_17)).
  prefs: []
  type: TYPE_NORMAL
- en: It is given that
  prefs: []
  type: TYPE_NORMAL
- en: 1.8 × Kelvin = Fahrenheit + 459.67
  prefs: []
  type: TYPE_NORMAL
- en: and
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter22-24.png)
  prefs: []
  type: TYPE_NORMAL
- en: '8)Write a Python program that emulates the way an electronic calculator functions.
    The program must first prompt the user to enter an integer, then the type of operation
    (+, −, *, /, DIV, MOD, POWER), and finally a second integer. Subsequently, the
    program must perform the chosen operation and display the result. For instance,
    if the user enters the values 13, +, and 2, the program must display the following
    message:'
  prefs: []
  type: TYPE_NORMAL
- en: The result of 13 + 2 equals 15
  prefs: []
  type: TYPE_NORMAL
- en: Make your program accept the type of operation in all possible forms such as
    “Div”, “DIV”, “div”, or even “DiV”. In case of a division by zero, the message
    “Infinite” must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 9)Rewrite the Python program of the previous exercise to validate the data input.
    If the user enters an input other than +, −, *, /, DIV, MOD, POWER, an error message
    must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a Python program that prompts the user to enter the names and the ages
    of three people and then displays the names of the youngest person and the oldest
    person.
  prefs: []
  type: TYPE_NORMAL
- en: 11)In a song contest, each artist is scored for their performance by five judges.
    However, according to the rules of this contest, the total score is calculated
    after excluding the highest and lowest scores. Write a Python program that prompts
    the user to enter the name of the artist and the score they receive from each
    judge. The program must then display the name of the artist along with their total
    score.
  prefs: []
  type: TYPE_NORMAL
- en: 12)Write a Python program that prompts the user to enter the ages of three people
    and then finds and displays the age in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: 13)Write a Python program that prompts the user to enter the names and the ages
    of three people and then displays the name of the youngest person or the oldest
    person, depending on which one is closer to the third age in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: '14)An online bookstore applies the following sales policy: Buy 3 books and
    pay for the 2 most expensive ones. Write a Python program that lets the user enter
    the prices and titles of three books. It must then display the amount the customer
    needs to pay, as well as the title and price of the book that was provided for
    free.'
  prefs: []
  type: TYPE_NORMAL
- en: 15)Design a flowchart and write the corresponding Python program that finds
    and displays the value of y (if possible) in the following formula.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter22-25.png)
  prefs: []
  type: TYPE_NORMAL
- en: 16)Design a flowchart and write the corresponding Python program that finds
    and displays the values of y (if possible) in the following formula.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter22-26.png)
  prefs: []
  type: TYPE_NORMAL
- en: 17)Rewrite the Python program of [Exercise 22.3-2](#toc_12), using a multiple-alternative
    decision structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Negate the Boolean expression x >= 0 in the outer dual-alternative decision
    structure and switch its two paths.'
  prefs: []
  type: TYPE_NORMAL
- en: 18)Write a Python program that finds and displays the values of y (if possible)
    in the following formula.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter22-27.png)'
  prefs: []
  type: TYPE_IMG
- en: 19)A positive integer is called an Armstrong number when the sum of the cubes
    of its digits is equal to the number itself. The number 371 is such a number,
    since 3³ + 7³ + 1³ = 371\. Write a Python program that lets the user enter a three-digit
    integer and then displays a message indicating whether or not the user-provided
    number is an Armstrong one. Moreover, a different error message for each type
    of input error must be displayed when the user enters a float or any number other
    than a three-digit one.
  prefs: []
  type: TYPE_NORMAL
- en: 20)Write a Python program that prompts the user to enter a day (1 ‐ 31), a month
    (1 ‐ 12), and a year and then finds and displays how many days are left until
    the end of that month. The program must take into consideration the leap years.
    In the case of a leap year, February has 29 instead of 28 days.
  prefs: []
  type: TYPE_NORMAL
- en: 21)Write a Python program that lets the user enter a word of six letters and
    then displays a message indicating whether or not every second letter is capitalized.
    The word “AtHeNa” is such a word, but it can be also provided as “aThEnA”.
  prefs: []
  type: TYPE_NORMAL
- en: 22)An online book store sells e-books for $10 each. Quantity discounts are given
    according to the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Quantity | Discount |'
  prefs: []
  type: TYPE_TB
- en: '| 3 ‐ 5 | 10% |'
  prefs: []
  type: TYPE_TB
- en: '| 6 ‐ 9 | 15% |'
  prefs: []
  type: TYPE_TB
- en: '| 10 ‐ 13 | 20% |'
  prefs: []
  type: TYPE_TB
- en: '| 14 ‐ 19 | 27% |'
  prefs: []
  type: TYPE_TB
- en: '| 20 or more | 30% |'
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter the total number of e-books
    purchased and then displays the amount of discount, and the total amount of the
    purchase after the discount. Assume that the user enters valid values.
  prefs: []
  type: TYPE_NORMAL
- en: 23)In a supermarket, the discount that a customer receives based on the before-tax
    amount of their order is presented in the following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Range | Discount |'
  prefs: []
  type: TYPE_TB
- en: '| amount < $50 | 0% |'
  prefs: []
  type: TYPE_TB
- en: '| $50 ≤ amount < $100 | 1% |'
  prefs: []
  type: TYPE_TB
- en: '| $100 ≤ amount < $250 | 2% |'
  prefs: []
  type: TYPE_TB
- en: '| $250 ≤ amount | 3% |'
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter the before-tax amount
    of their order and then calculates and displays the discount amount that customers
    receive (if any). A VAT (Value Added Tax) of 19% must be added in the end. Moreover,
    an error message must be displayed when the user enters a negative value.
  prefs: []
  type: TYPE_NORMAL
- en: 24)The Body Mass Index (BMI) is often used to determine whether an adult person
    is overweight or underweight for their height. The formula used to calculate the
    BMI of an adult person is
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter10-08.png)
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter their age, weight (in
    pounds) and height (in inches) and then displays a description according to the
    following table.
  prefs: []
  type: TYPE_NORMAL
- en: '| Body Mass Index | Description |'
  prefs: []
  type: TYPE_TB
- en: '| BMI < 15 | Very severely underweight |'
  prefs: []
  type: TYPE_TB
- en: '| 15.0 ≤ BMI < 16.0 | Severely underweight |'
  prefs: []
  type: TYPE_TB
- en: '| 16.0 ≤ BMI < 18.5 | Underweight |'
  prefs: []
  type: TYPE_TB
- en: '| 18.5 ≤ BMI < 25 | Normal |'
  prefs: []
  type: TYPE_TB
- en: '| 25.0 ≤ BMI < 30.0 | Overweight |'
  prefs: []
  type: TYPE_TB
- en: '| 30.0 ≤ BMI < 35.0 | Severely overweight |'
  prefs: []
  type: TYPE_TB
- en: '| 35.0 ≤ BMI | Very severely overweight |'
  prefs: []
  type: TYPE_TB
- en: The message “Invalid age” must be displayed when the user enters an age less
    than 18.
  prefs: []
  type: TYPE_NORMAL
- en: 25)The LAV Water Company charges for subscribers' water consumption according
    to the following table (monthly rates for domestic accounts).
  prefs: []
  type: TYPE_NORMAL
- en: '| Water Consumption (cubic feet) | USD per cubic foot |'
  prefs: []
  type: TYPE_TB
- en: '| consumption ≤ 10 | $3 |'
  prefs: []
  type: TYPE_TB
- en: '| 11 ≤ consumption ≤ 20 | $5 |'
  prefs: []
  type: TYPE_TB
- en: '| 21 ≤ consumption ≤ 35 | $7 |'
  prefs: []
  type: TYPE_TB
- en: '| 36 ≤ consumption | $9 |'
  prefs: []
  type: TYPE_TB
- en: Write a Python program that prompts the user to enter the total amount of water
    consumed (in cubic feet) and then calculates and displays the total amount to
    pay. Please note that the rates are progressive. Federal, state, and local taxes
    add a total of 10% to each bill. Moreover, an error message must be displayed
    when the user enters a negative value.
  prefs: []
  type: TYPE_NORMAL
- en: 26)Write a Python program that prompts the user to enter their taxable income
    and the number of their children and then calculates the total tax to pay according
    to the following table. However, total tax is reduced by 2% when the user has
    at least one child. Please note that the rates are progressive.
  prefs: []
  type: TYPE_NORMAL
- en: '| Taxable Income (USD) | Tax Rate |'
  prefs: []
  type: TYPE_TB
- en: '| income ≤ 8000 | 10% |'
  prefs: []
  type: TYPE_TB
- en: '| 8000 < income ≤ 30000 | 15% |'
  prefs: []
  type: TYPE_TB
- en: '| 30000 < income ≤ 70000 | 25% |'
  prefs: []
  type: TYPE_TB
- en: '| 70000 < income | 30% |'
  prefs: []
  type: TYPE_TB
- en: 27)The Beaufort scale is an empirical measure that relates wind speed to observed
    conditions on land or at sea. Write a Python program that prompts the user to
    enter the wind speed and then displays the corresponding Beaufort number and description
    according to the following table. An additional message “It's Fishing Day!!!”
    must be displayed when wind speed is 3 Beaufort or less. Moreover, an error message
    must be displayed when the user enters a negative value.
  prefs: []
  type: TYPE_NORMAL
- en: '| Wind Speed (miles per hour) | Beaufort Number | Description |'
  prefs: []
  type: TYPE_TB
- en: '| wind speed < 1 | 0 | Calm |'
  prefs: []
  type: TYPE_TB
- en: '| 1 ≤ wind speed < 4 | 1 | Light air |'
  prefs: []
  type: TYPE_TB
- en: '| 4 ≤ wind speed < 8 | 2 | Light breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 8 ≤ wind speed < 13 | 3 | Gentle breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 13 ≤ wind speed < 18 | 4 | Moderate breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 18 ≤ wind speed < 25 | 5 | Fresh breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 25 ≤ wind speed < 31 | 6 | Strong breeze |'
  prefs: []
  type: TYPE_TB
- en: '| 31 ≤ wind speed < 39 | 7 | Moderate gale |'
  prefs: []
  type: TYPE_TB
- en: '| 39 ≤ wind speed < 47 | 8 | Gale |'
  prefs: []
  type: TYPE_TB
- en: '| 47 ≤ wind speed < 55 | 9 | Strong gale |'
  prefs: []
  type: TYPE_TB
- en: '| 55 ≤ wind speed < 64 | 10 | Storm |'
  prefs: []
  type: TYPE_TB
- en: '| 64 ≤ wind speed < 74 | 11 | Violent storm |'
  prefs: []
  type: TYPE_TB
- en: '| 74 ≤ wind speed | 12 | Hurricane force |'
  prefs: []
  type: TYPE_TB
