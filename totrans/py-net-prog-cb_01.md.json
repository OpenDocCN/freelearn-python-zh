["```py\n~$ python \nPython 2.7.1+ (r271:86832, Apr 11 2011, 18:05:24) \n[GCC 4.5.2] on linux2 \nType \"help\", \"copyright\", \"credits\" or \"license\" for more information. >>> \n\n```", "```py\n>>> import socket\n\n```", "```py\n>>> host_name = socket.gethostname()\n>>> print \"Host name: %s\" %host_name\nHost name: debian6\n>>> print \"IP address: %s\" %socket.gethostbyname(host_name)\nIP address: 127.0.1.1\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter -1 \n# This program is optimized for Python 2.7\\. It may run on any\n# other Python version with/without modifications.\n\nimport socket\n\ndef print_machine_info():\n    host_name = socket.gethostname()\n    ip_address = socket.gethostbyname(host_name)\n    print \"Host name: %s\" % host_name\n    print \"IP address: %s\" % ip_address\n\nif __name__ == '__main__':\n    print_machine_info()\n```", "```py\n$ python 1_1_local_machine_info.py\n\n```", "```py\nHost name: debian6\nIP address: 127.0.0.1\n\n```", "```py\ngethostname(...)\n gethostname() -> string \n Return the current host name. \n\ngethostbyname(...) \n gethostbyname(host) -> address \n Return the IP address (a string of the form '255.255.255.255') for a host.\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 1\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport socket\n\ndef get_remote_machine_info():\n    remote_host = 'www.python.org'\n    try:\n        print \"IP address: %s\" %socket.gethostbyname(remote_host)\n    except socket.error, err_msg:\n        print \"%s: %s\" %(remote_host, err_msg)\n\nif __name__ == '__main__':\n    get_remote_machine_info()\n```", "```py\n$ python 1_2_remote_machine_info.py \nIP address of www.python.org: 82.94.164.162\n\n```", "```py\n$ python 1_2_remote_machine_info.py \nwww.pytgo.org: [Errno -5] No address associated with hostname\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 1\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport socket\nfrom binascii import hexlify\n\ndef convert_ip4_address():\n    for ip_addr in ['127.0.0.1', '192.168.0.1']:\n        packed_ip_addr = socket.inet_aton(ip_addr)\n        unpacked_ip_addr = socket.inet_ntoa(packed_ip_addr)\n        print \"IP Address: %s => Packed: %s, Unpacked: %s\"\\\n\t %(ip_addr, hexlify(packed_ip_addr), unpacked_ip_addr)\n\nif __name__ == '__main__':\n    convert_ip4_address()\n```", "```py\n$ python 1_3_ip4_address_conversion.py \n\nIP Address: 127.0.0.1 => Packed: 7f000001, Unpacked: 127.0.0.1\nIP Address: 192.168.0.1 => Packed: c0a80001, Unpacked: 192.168.0.1\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter -  1\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport socket\n\ndef find_service_name():\n    protocolname = 'tcp'\n    for port in [80, 25]:\n        print \"Port: %s => service name: %s\" %(port, socket.getservbyport(port, protocolname))\n    print \"Port: %s => service name: %s\" %(53, socket.getservbyport(53, 'udp'))\n\nif __name__ == '__main__':\n    find_service_name()\n```", "```py\n$ python 1_4_finding_service_name.py \n\nPort: 80 => service name: http\nPort: 25 => service name: smtp\nPort: 53 => service name: domain\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - \n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\nimport socket\ndef convert_integer():\n    data = 1234\n    # 32-bit\n    print \"Original: %s => Long  host byte order: %s, Network byte order: %s\"\\\n    %(data, socket.ntohl(data), socket.htonl(data))\n    # 16-bit\n    print \"Original: %s => Short  host byte order: %s, Network byte order: %s\"\\\n    %(data, socket.ntohs(data), socket.htons(data))\nif __name__ == '__main__':\n    convert_integer()\n```", "```py\n$ python 1_5_integer_conversion.py \nOriginal: 1234 => Long  host byte order: 3523477504, Network byte order: 3523477504\nOriginal: 1234 => Short  host byte order: 53764, Network byte order: 53764\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 1\n# This program is optimized for Python 2.7\\. It may run on any   \n# other Python version with/without modifications\n\nimport socket\n\ndef test_socket_timeout():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    print \"Default socket timeout: %s\" %s.gettimeout()\n    s.settimeout(100)\n    print \"Current socket timeout: %s\" %s.gettimeout()    \n\nif __name__ == '__main__':\n    test_socket_timeout()\n```", "```py\n$ python 1_6_socket_timeout.py \nDefault socket timeout: None\nCurrent socket timeout: 100.0\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 1\n# This program is optimized for Python 2.7\\. It may run on any   \n# other Python version with/without modifications.\n\nimport sys\nimport socket\nimport argparse \n\ndef main():\n    # setup argument parsing\n    parser = argparse.ArgumentParser(description='Socket Error Examples')\n    parser.add_argument('--host', action=\"store\", dest=\"host\", required=False)\n    parser.add_argument('--port', action=\"store\", dest=\"port\", type=int, required=False)\n    parser.add_argument('--file', action=\"store\", dest=\"file\", required=False)\n    given_args = parser.parse_args()\n    host = given_args.host\n    port = given_args.port\n    filename = given_args.file\n\n    # First try-except block -- create socket \n    try:\n        s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    except socket.error, e:\n        print \"Error creating socket: %s\" % e\n        sys.exit(1)\n\n    # Second try-except block -- connect to given host/port\n    try:\n        s.connect((host, port))\n    except socket.gaierror, e:\n        print \"Address-related error connecting to server: %s\" % e\n        sys.exit(1)\n    except socket.error, e:\n        print \"Connection error: %s\" % e\n        sys.exit(1)\n\n    # Third try-except block -- sending data\n    try:\n        s.sendall(\"GET %s HTTP/1.0\\r\\n\\r\\n\" % filename)\n    except socket.error, e:\n        print \"Error sending data: %s\" % e\n        sys.exit(1)\n\n    while 1:\n        # Fourth tr-except block -- waiting to receive data from remote host\n        try:\n            buf = s.recv(2048)\n        except socket.error, e:\n            print \"Error receiving data: %s\" % e\n            sys.exit(1)\n        if not len(buf):\n            break\n        # write the received data\n        sys.stdout.write(buf) \n\nif __name__ == '__main__':\n    main()\n```", "```py\n$ python 1_7_socket_errors.py –host=<HOST> --port=<PORT> --file=<FILE>\n\n```", "```py\n$ python 1_7_socket_errors.py --host=www.pytgo.org --port=8080 --file=1_7_socket_errors.py \nAddress-related error connecting to server: [Errno -5] No address associated with hostname\n\n```", "```py\n$ python 1_7_socket_errors.py --host=www.python.org --port=8080 --file=1_7_socket_errors.py \n\n```", "```py\nConnection error: [Errno 110] Connection timed out\n\n```", "```py\n$ python 1_7_socket_errors.py --host=www.python.org --port=80 --file=1_7_socket_errors.py\n\nHTTP/1.1 404 Not found\nServer: Varnish\nRetry-After: 0\ncontent-type: text/html\nContent-Length: 77\nAccept-Ranges: bytes\nDate: Thu, 20 Feb 2014 12:14:01 GMT\nVia: 1.1 varnish\nAge: 0\nConnection: close\n\n<html>\n<head>\n<title> </title>\n</head>\n<body>\nunknown domain: </body></html>\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 1\n# This program is optimized for Python 2.7\\. It may run on any\n# other Python version with/without modifications\n\nimport socket\n\nSEND_BUF_SIZE = 4096\nRECV_BUF_SIZE = 4096\n\ndef modify_buff_size():\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM )\n\n    # Get the size of the socket's send buffer\n    bufsize = sock.getsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF)\n    print \"Buffer size [Before]:%d\" %bufsize\n\n    sock.setsockopt(socket.SOL_TCP, socket.TCP_NODELAY, 1)\n    sock.setsockopt(\n            socket.SOL_SOCKET,\n            socket.SO_SNDBUF,\n            SEND_BUF_SIZE)\n    sock.setsockopt(\n            socket.SOL_SOCKET,\n            socket.SO_RCVBUF,\n            RECV_BUF_SIZE)\n    bufsize = sock.getsockopt(socket.SOL_SOCKET, socket.SO_SNDBUF)\n    print \"Buffer size [After]:%d\" %bufsize\n\nif __name__ == '__main__':\n    modify_buff_size()\n```", "```py\n$ python 1_8_modify_buff_size.py \nBuffer size [Before]:16384\nBuffer size [After]:8192\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 1\n# This program is optimized for Python 2.7\\. It may run on any\n# other Python version with/without modifications\n\nimport socket\n\ndef test_socket_modes():\n    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    s.setblocking(1)\n    s.settimeout(0.5)\n    s.bind((\"127.0.0.1\", 0))\n\n    socket_address = s.getsockname()\n    print \"Trivial Server launched on socket: %s\" %str(socket_address)\n    while(1):\n        s.listen(1)\n\nif __name__ == '__main__':\n    test_socket_modes()\n```", "```py\n$ python 1_9_socket_modes.py \nTrivial Server launched on socket: ('127.0.0.1', 51410)\n\n```", "```py\nTraceback (most recent call last):\n File \"1_10_reuse_socket_address.py\", line 40, in <module>\n reuse_socket_addr()\n File \"1_10_reuse_socket_address.py\", line 25, in reuse_socket_addr\n srv.bind( ('', local_port) )\n File \"<string>\", line 1, in bind\nsocket.error: [Errno 98] Address already in use\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 1\n# This program is optimized for Python 2.7\\. It may run on any\n# other Python version with/without modifications\n\nimport socket\nimport sys\n\ndef reuse_socket_addr():\n    sock = socket.socket( socket.AF_INET, socket.SOCK_STREAM )\n\n    # Get the old state of the SO_REUSEADDR option\n    old_state = sock.getsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR )\n    print \"Old sock state: %s\" %old_state\n\n    # Enable the SO_REUSEADDR option\n    sock.setsockopt( socket.SOL_SOCKET, socket.SO_REUSEADDR, 1 )\n    new_state = sock.getsockopt( socket.SOL_SOCKET, socket.SO_REUSEADDR )\n    print \"New sock state: %s\" %new_state\n\n    local_port = 8282\n\n    srv = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    srv.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    srv.bind( ('', local_port) )\n    srv.listen(1)\n    print (\"Listening on port: %s \" %local_port)\n    while True:\n        try:\n            connection, addr = srv.accept()\n            print 'Connected by %s:%s' % (addr[0], addr[1])\n        except KeyboardInterrupt:\n            break\n        except socket.error, msg:\n            print '%s' % (msg,)\n\nif __name__ == '__main__':\n    reuse_socket_e addr()\n```", "```py\n$ python 1_10_reuse_socket_address.py \nOld sock state: 0\nNew sock state: 1\nListening on port: 8282 \n\n```", "```py\n$ pip install ntplib\n\n```", "```py\n #!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 1\n# This program is optimized for Python 2.7\\. It may run on any\n# other Python version with/without modifications\n\nimport ntplib\nfrom time import ctime\n\ndef print_time():\n    ntp_client = ntplib.NTPClient()\n    response = ntp_client.request('pool.ntp.org')\n    print ctime(response.tx_time)\n\nif __name__ == '__main__':\n    print_time()\n```", "```py\n$ python 1_11_print_machine_time.py \nThu Mar 5 14:02:58 2012\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 1\n# This program is optimized for Python 2.7\\. It may run on any\n# other Python version with/without modifications\nimport socket\nimport struct\nimport sys\nimport time\n\nNTP_SERVER = \"0.uk.pool.ntp.org\"\nTIME1970 = 2208988800L\n\ndef sntp_client():\n    client = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\n    data = '\\x1b' + 47 * '\\0'\n    client.sendto(data, (NTP_SERVER, 123))\n    data, address = client.recvfrom( 1024 )\n    if data:\n        print 'Response received from:', address\n    t = struct.unpack( '!12I', data )[10]\n    t -= TIME1970\n    print '\\tTime=%s' % time.ctime(t)\n\nif __name__ == '__main__':\n    sntp_client()\n```", "```py\n$ python 1_12_sntp_client.py \nResponse received from: ('87.117.251.2', 123) \n Time=Tue Feb 25 14:49:38 2014 \n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 1\n# This program is optimized for Python 2.7\\. It may run on any\n# other Python version with/without modifications.\n\nimport socket\nimport sys\nimport argparse\n\nhost = 'localhost'\ndata_payload = 2048\nbacklog = 5 \n\ndef echo_server(port):\n    \"\"\" A simple echo server \"\"\"\n    # Create a TCP socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # Enable reuse address/port \n    sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n    # Bind the socket to the port\n    server_address = (host, port)\n    print \"Starting up echo server  on %s port %s\" % server_address\n    sock.bind(server_address)\n    # Listen to clients, backlog argument specifies the max no. of queued connections\n    sock.listen(backlog) \n    while True: \n        print \"Waiting to receive message from client\"\n        client, address = sock.accept() \n        data = client.recv(data_payload) \n        if data:\n            print \"Data: %s\" %data\n            client.send(data)\n            print \"sent %s bytes back to %s\" % (data, address)\n        # end connection\n        client.close() \n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Socket Server Example')\n    parser.add_argument('--port', action=\"store\", dest=\"port\", type=int, required=True)\n    given_args = parser.parse_args() \n    port = given_args.port\n    echo_server(port)\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter – 1\n# This program is optimized for Python 2.7\\. It may run on any\n# other Python version with/without modifications.\n\nimport socket\nimport sys\n\nimport argparse\n\nhost = 'localhost'\n\ndef echo_client(port):\n    \"\"\" A simple echo client \"\"\"\n    # Create a TCP/IP socket\n    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    # Connect the socket to the server\n    server_address = (host, port)\n    print \"Connecting to %s port %s\" % server_address\n    sock.connect(server_address)\n\n    # Send data\n    try:\n        # Send data\n        message = \"Test message. This will be echoed\"\n        print \"Sending %s\" % message\n        sock.sendall(message)\n        # Look for the response\n        amount_received = 0\n        amount_expected = len(message)\n        while amount_received < amount_expected:\n            data = sock.recv(16)\n            amount_received += len(data)\n            print \"Received: %s\" % data\n    except socket.errno, e:\n        print \"Socket error: %s\" %str(e)\n    except Exception, e:\n        print \"Other exception: %s\" %str(e)\n    finally:\n        print \"Closing connection to the server\"\n        sock.close()\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Socket Server Example')\n    parser.add_argument('--port', action=\"store\", dest=\"port\", type=int, required=True)\n    given_args = parser.parse_args() \n    port = given_args.port\n    echo_client(port)\n```", "```py\n$ python 1_13a_echo_server.py --port=9900 \nStarting up echo server  on localhost port 9900 \n\nWaiting to receive message from client \n\n```", "```py\n$ python 1_13b_echo_client.py --port=9900 \nConnecting to localhost port 9900 \nSending Test message. This will be echoed \nReceived: Test message. Th \nReceived: is will be echoe \nReceived: d \nClosing connection to the server\n\n```", "```py\nData: Test message. This will be echoed \nsent Test message. This will be echoed bytes back to ('127.0.0.1', 42961) \nWaiting to receive message from client\n\n```"]