["```py\njava –jar selenium-server-standalone-2.41.0.jar\n\n```", "```py\ndesired_caps = {}\ndesired_caps['platform'] = 'WINDOWS'\ndesired_caps['browserName'] = 'firefox'\n```", "```py\nself.driver = webdriver.Remote('http://192.168.1.103:4444/wd/hub', desired_caps)\n```", "```py\nimport unittest\nfrom selenium import webdriver\n\nclass SearchProducts(unittest.TestCase):\n    def setUp(self):\n\n        desired_caps = {}\n        desired_caps['platform'] = 'WINDOWS'\n        desired_caps['browserName'] = 'firefox'\n\n        self.driver = \\\n            webdriver.Remote('http://192.168.1.102:4444/wd/hub',desired_caps)\n        self.driver.get('http://demo.magentocommerce.com/')\n        self.driver.implicitly_wait(30)\n        self.driver.maximize_window()\n\n    def testSearchByCategory(self):\n\n        # get the search textbox\n        self.search_field = self.driver.find_element_by_name('q')\n        self.search_field.clear()\n\n        # enter search keyword and submit\n        self.search_field.send_keys('phones')\n        self.search_field.submit()\n\n        # get all the anchor elements which have product names # displayed currently on result page using # find_elements_by_xpath method\n        products = self.driver\\\n            .find_elements_by_xpath('//h2[@class=\\'product-name\\']/a')\n\n        # check count of products shown in results\n        self.assertEqual(2, len(products))\n\n    def tearDown(self):\n        # close the browser window\n        self.driver.quit()\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\njava -Dwebdriver.ie.driver=\"C:\\SeDrivers\\IEDriverServer.exe\" -jar selenium-server-standalone-2.41.0.jar\n\n```", "```py\njava -Dwebdriver.ie.driver=\"C:\\SeDrivers\\IEDriverServer.exe\" -Dwebdriver.chrome.driver=\"C:\\SeDrivers\\chromedriver.exe\" -jar selenium-server-standalone-2.41.0.jar\n\n```", "```py\njava -jar selenium-server-standalone-2.25.0.jar -port 4444 -role hub\n\n```", "```py\njava -Dwebdriver.ie.driver=\"C:\\SeDrivers\\IEDriverServer.exe\" -jar selenium-server-standalone-2.41.0.jar -role webdriver -browser \"browserName=internet explorer,version=10,maxinstance=1,platform=WINDOWS\" -hubHost 192.168.1.103 –port 5555\n\n```", "```py\n{\n  \"class\": \"org.openqa.grid.common.RegistrationRequest\",\n  \"capabilities\": [\n   {\n   \"seleniumProtocol\": \"WebDriver\",\n   \"browserName\": \"internet explorer\",\n   \"version\": \"10\",\n   \"maxInstances\": 1,\n   \"platform\" : \"WINDOWS\"\n   }\n  ],\n  \"configuration\": {\n   \"port\": 5555,\n   \"register\": true,\n   \"host\": \"192.168.1.103\",\n   \"proxy\": \"org.openqa.grid.selenium.proxy.\n   DefaultRemoteProxy\",\n   \"maxSession\": 2,\n   \"hubHost\": \"192.168.1.100\",\n   \"role\": \"webdriver\",\n   \"registerCycle\": 5000,\n   \"hub\": \"http://192.168.1.100:4444/grid/register\",\n   \"hubPort\": 4444,\n   \"remoteHost\": \"http://192.168.1.102:5555\"\n  }\n}\n```", "```py\njava -Dwebdriver.ie.driver=\"C:\\SeDrivers\\IEDriverServer.exe\"-jar selenium-server-standalone-2.41.0.jar -role webdriver -nodeConfig selenium-node-win-ie10.cfg.json\n\n```", "```py\njava -jar selenium-server-standalone-2.41.0.jar -role webdriver -browser \"browserName=firefox,version=27,maxinstance=2,platform=WINDOWS\" -hubHost localhost –port 6666\n\n```", "```py\njava -Dwebdriver.chrome.driver=\"C:\\SeDrivers\\chromedriver.exe\" -jar selenium-server-standalone-2.41.0.jar -role webdriver -browser \"browserName=chrome,version=35,maxinstance=2,platform=WINDOWS\" -hubHost localhost -port 7777\n\n```", "```py\njava -jar selenium-server-standalone-2.41.0.jar -role webdriver -browser \"browserName=safari,version=7,maxinstance=1,platform=MAC\" -hubHost 192.168.1.104 -port 8888\n\n```", "```py\n    python grid_test.py WINDOWS chrome\n\n    ```", "```py\n    python grid_test.py MAC safari\n\n    ```", "```py\n    class SearchProducts(unittest.TestCase):\n\n        PLATFORM = 'WINDOWS'\n        BROWSER = 'firefox'\n    ```", "```py\n    desired_caps = {}\n    desired_caps['platform'] = self.PLATFORM\n    desired_caps['browserName'] = self.BROWSER\n    ```", "```py\n    if __name__ == '__main__':\n        if len(sys.argv) > 1:\n            SearchProducts.BROWSER = sys.argv.pop()\n            SearchProducts.PLATFORM = sys.argv.pop()\n        unittest.main()\n    ```", "```py\n    import sys\n    import unittest\n    from selenium import webdriver\n\n    class SearchProducts(unittest.TestCase):\n\n        PLATFORM = 'WINDOWS'\n        BROWSER = 'firefox'\n\n        def setUp(self):\n\n            desired_caps = {}\n            desired_caps['platform'] = self.PLATFORM\n            desired_caps['browserName'] = self.BROWSER\n\n            self.driver = \\\n                webdriver.Remote('http://192.168.1.104:4444/wd/hub',desired_caps)\n            self.driver.get('http://demo.magentocommerce.com/')\n            self.driver.implicitly_wait(30)\n            self.driver.maximize_window()\n        def testSearchByCategory(self):\n\n            # get the search textbox\n            self.search_field = self.driver.find_element_by_name('q')\n            self.search_field.clear()\n\n            # enter search keyword and submit\n            self.search_field.send_keys('phones')\n            self.search_field.submit()\n\n            # get all the anchor elements which have product names # displayed currently on result page using # find_elements_by_xpath method\n            products = self.driver.\\\n                find_elements_by_xpath('//h2[@class=\\'product-name\\']/a')\n\n            # check count of products shown in results\n            self.assertEqual(2, len(products))\n\n        def tearDown(self):\n            # close the browser window\n            self.driver.quit()\n\n    if __name__ == '__main__':\n        if len(sys.argv) > 1:\n            SearchProducts.BROWSER = sys.argv.pop()\n            SearchProducts.PLATFORM = sys.argv.pop()\n        unittest.main(verbosity=2)\n    ```", "```py\n    python grid_test.py MAC safari\n\n    ```", "```py\n    import sys\n    import unittest\n    from selenium import webdriver\n\n    class SearchProducts(unittest.TestCase):\n\n        PLATFORM = 'WINDOWS'\n        BROWSER = 'phantomjs'\n        SAUCE_USERNAME = 'upgundecha'\n        SUACE_KEY = 'c6e7132c-ae27-4217-b6fa-3cf7df0a7281'\n\n        def setUp(self):\n\n            desired_caps = {}\n            desired_caps['platform'] = self.PLATFORM\n            desired_caps['browserName'] = self.BROWSER\n\n            sauce_string = self.SAUCE_USERNAME + ':' + self.SUACE_KEY\n\n            self.driver = \\\n                webdriver.Remote('http://' + sauce_string + '@ondemand.saucelabs.com:80/wd/hub', desired_caps)\n            self.driver.get('http://demo.magentocommerce.com/')\n            self.driver.implicitly_wait(30)\n            self.driver.maximize_window()\n\n        def testSearchByCategory(self):\n\n            # get the search textbox\n            self.search_field = self.driver.find_element_by_name('q')\n            self.search_field.clear()\n\n            # enter search keyword and submit\n            self.search_field.send_keys('phones')\n            self.search_field.submit()\n\n            # get all the anchor elements which have product names # displayed currently on result page using # find_elements_by_xpath method\n            products = self.driver.\\\n                find_elements_by_xpath('//h2[@class=\\'product-name\\']/a')\n\n            # check count of products shown in results\n            self.assertEqual(2, len(products))\n\n        def tearDown(self):\n            # close the browser window\n            self.driver.quit()\n\n    if __name__ == '__main__':\n        if len(sys.argv) > 1:\n            SearchProducts.BROWSER = sys.argv.pop()\n            SearchProducts.PLATFORM = sys.argv.pop()\n        unittest.main(verbosity=2)\n    ```", "```py\n    python sauce_test.py \"OS X 10.9\" \"Safari\"\n\n    ```"]