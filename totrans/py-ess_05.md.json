["```py\n>>> red_violet= (192, 68, 143)\n>>> bool(red_violet)\nTrue\n>>> empty = ()\n>>> type(empty)\n<class 'tuple'>\n>>> bool(empty)\nFalse\n```", "```py\nfor input from some_file:\n    if not input.strip(): continue\n```", "```py\n>>> \"11\" < \"2\"\nTrue\n```", "```py\n5 > a >= 0\n```", "```py\n>>> a=1\n>>> b=(a/105)*3*5*7\n>>> a == b\nFalse\n>>> abs(a-b)\n2.220446049250313e-16\n```", "```py\n>>> a = 3.14\n>>> b = 3.14\n>>> a == b\nTrue\n>>> a is b\nFalse\n```", "```py\n>>> id(a)\n4298491200\n>>> id(b)\n4298491224\n```", "```py\n>>> hash(12)\n12\n>>> hash(12*2**61)\n12\n```", "```py\nselection = \"yankee\" if wind < 15 else \"stays'l\"\n```", "```py\nvalid= line and line[0] != \"#\"\n```", "```py\n>>> not 12\nFalse\n```", "```py\n>>> total= 0\n>>> count= 0\n>>> average = total != 0 and total/count\n>>> average\nFalse\n```", "```py\n>>> 0 and 12\n0\n>>> () and \"non-false\"\n()\n>>> 12 and ()\n()\n```", "```py\nx = parameter or 42\n```", "```py\nx = 42 if parameter is None else parameter\n```", "```py\nif abs(a-b) < Îµ:\n    print(\"{a} \\N{ALMOST EQUAL TO} {b}\".format(a=a, b=b))\n```", "```py\nif count == 0:\n    print(\"Insufficient Data\")\nelse:\n    print(\"Mean = {0:.2f}\".format(total/count))\n```", "```py\nif y % 400 == 0:\n    leap = True\nelif y % 100 == 0:\n    leap = False\nelif y % 4 == 0:\n    leap = True\nelse:\n    leap = False\n```", "```py\nif y % 400 == 0:\n    leap = True\nelif y % 400 != 0 and y % 100 == 0:\n    leap = False\nelif y % 400 != 0 and y % 100 != 0 and y % 4 == 0:\n    leap = True\nelif y % 400 != 0 and y % 100 != 0 and y % 4 != 0:\n    leap = False\nelse:\n    raise Exception(\"Logic Error\")\n```", "```py\nif happy_path(x):\n    # nothing special required\nelse:\n    some_special_processing(x)\n# Processing Continues\n```", "```py\nif not happy_path(x):\n    some_special_processing(x)\n```", "```py\nif happy_path(x):\n    pass # nothing special required\nelse:\n    some_special_processing(x)\n# Processing Continues\n```", "```py\nassert a > b >= 0\n```", "```py\nassert a > b >= 0, \"a={0} and b={1}\".format(a, b)\n```", "```py\nif not a:\n    print(\"a could be None\")\n```", "```py\nif a is None:\n    print(\"a is None\")\n```"]