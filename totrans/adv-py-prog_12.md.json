["```py\npip install numpy\n```", "```py\nconda install numpy\n```", "```py\n>>> import cv2\n>>> print(cv2.__version__)\n4.5.2\n```", "```py\nimport cv2\nim = cv2.imread('input/ship.jpg')\ncv2.imshow('Test', im)\ncv2.waitKey(0) # press any key to move forward here\nprint(im)\nprint('Type:', type(im))\nprint('Shape:', im.shape)\nprint('Top-left pixel:', im[0, 0])\nprint('Done.')\n```", "```py\n> python example1.py\n[[[199 136 86]\n  [199 136 86]\n  [199 136 86]\n  ..., \n  [198 140 81]\n  [197 139 80]\n  [201 143 84]]\n[...Truncated for readability...]\n [[ 56 23 4]\n  [ 59 26 7]\n  [ 60 27 7]\n  ..., \n  [ 79 43 7]\n  [ 80 44 8]\n  [ 75 39 3]]]\nType: <class 'numpy.ndarray'>\nShape: (1118, 1577, 3)\nTop-left pixel: [199 136 86]\nDone.\n```", "```py\nimport cv2\nim = cv2.imread('input/ship.jpg')\ngray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\ncv2.imshow('Grayscale', gray_im)\ncv2.waitKey(0) # press any key to move forward here\nprint(gray_im)\nprint('Type:', type(gray_im))\nprint('Shape:', gray_im.shape)\ncv2.imwrite('output/gray_ship.jpg', gray_im)\nprint('Done.')\n```", "```py\n> python example2.py\n[[128 128 128 ..., 129 128 132]\n [125 125 125 ..., 129 128 130]\n [124 125 125 ..., 129 129 130]\n ..., \n [ 20 21 20 ..., 38 39 37]\n [ 19 22 21 ..., 41 42 37]\n [ 21 24 25 ..., 36 37 32]]\nType: <class 'numpy.ndarray'>\nShape: (1118, 1577)\nDone.\n```", "```py\nimport cv2\nim = cv2.imread('input/ship.jpg')\ngray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\nret, custom_thresh_im = cv2.threshold(gray_im, 127, 255, \\\n  cv2.THRESH_BINARY)\ncv2.imwrite('output/custom_thresh_ship.jpg', \\\n  custom_thresh_im)\nprint('Done.')\n```", "```py\nimport cv2\nim = cv2.imread('input/ship.jpg')\nim = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\nmean_thresh_im = cv2.adaptiveThreshold(im, 255, \n  cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, 11, 2)\ncv2.imwrite('output/mean_thresh_ship.jpg', mean_thresh_im)\ngauss_thresh_im = cv2.adaptiveThreshold(im, 255, \n  cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)\ncv2.imwrite('output/gauss_thresh_ship.jpg', \\\n  gauss_thresh_im)\nprint('Done.')\n```", "```py\nfrom multiprocessing import Pool\nimport cv2\n\nimport sys\nfrom timeit import default_timer as timer\n\nTHRESH_METHOD = cv2.ADAPTIVE_THRESH_GAUSSIAN_C\nINPUT_PATH = 'input/large_input/'\nOUTPUT_PATH = 'output/large_output/'\n\nn = 20\nnames = ['ship_%i_%i.jpg' % (i, j) for i in range(n) \\\nfor j in range(n)]\n\ndef process_threshold(im, output_name, thresh_method):\n    gray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n    thresh_im = cv2.adaptiveThreshold(\n      gray_im, 255, thresh_method, \\\n        cv2.THRESH_BINARY, 11, 2\n    )\n\n    cv2.imwrite(OUTPUT_PATH + output_name, thresh_im)\n\nif __name__ == '__main__':\n\n    for n_processes in range(1, 7):\n        start = timer()\n\n        with Pool(n_processes) as p:\n            p.starmap(\n              process_threshold, \n              [(\n                cv2.imread(INPUT_PATH + name), \\\n                name,THRESH_METHOD) \n                  for name in names\n              ],\n            )\n\n        print('Took %.4f seconds with %i process(es). \\\n              ' % (timer() - start, n_processes))\n\n    print('Done.')\n```", "```py\n> python example5.py\nTook 0.6590 seconds with 1 process(es).\nTook 0.3190 seconds with 2 process(es).\nTook 0.3227 seconds with 3 process(es).\nTook 0.3360 seconds with 4 process(es).\nTook 0.3338 seconds with 5 process(es).\nTook 0.3319 seconds with 6 process(es).\nDone.\n```", "```py\nwith Pool(n_processes) as p:\n    p.starmap(process_threshold, [(\n        cv2.imread(INPUT_PATH + name), \\\n          name,THRESH_METHOD)\n         for name in names])\n```", "```py\nfrom multiprocessing import Pool\nimport cv2\n\nimport sys\nfrom functools import partial\nfrom timeit import default_timer as timer\n\nTHRESH_METHOD = cv2.ADAPTIVE_THRESH_GAUSSIAN_C\nINPUT_PATH = 'input/large_input/'\nOUTPUT_PATH = 'output/large_output/'\n\nn = 20\nnames = ['ship_%i_%i.jpg' % (i, j) for i in range(n) for \\\n  j in range(n)]\n\ndef process_threshold(name, thresh_method):\n    im = cv2.imread(INPUT_PATH + name)\n    gray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n    thresh_im = cv2.adaptiveThreshold( \\\n      gray_im, 255, thresh_method, cv2.THRESH_BINARY, 11, 2 \\\n     )\n\n    cv2.imwrite(OUTPUT_PATH + name, thresh_im)\n\nif __name__ == '__main__':\n\n    for n_processes in range(1, 7):\n        start = timer()\n\n        with Pool(n_processes) as p:\n            p.map(partial(process_threshold, \\\n              thresh_method=THRESH_METHOD), names)\n\n        print('Took %.4f seconds with %i process(es).' % \\\n          (timer() - start, n_processes))\n\n    print('Done.')\n```", "```py\n> python example6.py\nTook 0.5300 seconds with 1 process(es).\nTook 0.4133 seconds with 2 process(es).\nTook 0.2154 seconds with 3 process(es).\nTook 0.2147 seconds with 4 process(es).\nTook 0.2213 seconds with 5 process(es).\nTook 0.2329 seconds with 6 process(es).\nDone.\n```", "```py\nimport cv2\n\nface_cascade = cv2.CascadeClassifier \\\n  ('input/haarcascade_frontalface_default.xml')\n\nfor filename in ['obama1.jpeg', 'obama2.jpg']:\n    im = cv2.imread('input/' + filename)\n    gray_im = cv2.cvtColor(im, cv2.COLOR_BGR2GRAY)\n    faces = face_cascade.detectMultiScale(im)\n\n    for (x, y, w, h) in faces:\n        cv2.rectangle(im, (x, y), (x + w, y + h), \\\n          (0, 255, 0), 2)\n\n    cv2.imshow('%i face(s) found' % len(faces), im)\n    cv2.waitKey(0)\n\nprint('Done.')\n```", "```py\nfaces = face_cascade.detectMultiScale(im, scaleFactor=1.2)\n```"]