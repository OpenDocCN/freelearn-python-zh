- en: Chapter 6. Using Third-party Libraries
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregating feeds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying Tweets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Plotting with matplotlib
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending PluginWiki with an RSS widget
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The power of Python comes form the plethora of **third-party libraries** available.
    The goal of this chapter is not to discuss the APIs of these third-party libraries,
    as the task would be monumental. The goal, instead, is to show you the proper
    way to do it by customizing logging, to detect possible problems, by creating
    your own APIs in the model files, and packaging the new interface as a plugin.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing logging
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python's logging capabilities are powerful and flexible, but can be complicated
    to implement effectively. Moreover, logging in web2py introduces a new problem
    set. This recipe offers an approach for effective logging in web2py, leveraging
    Python's native logging functionality.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python''s native logging framework uses a logger-handler combination, whereby
    one or more loggers each logs to one or more handlers. The logging framework uses
    a singleton model for its loggers, so that the following line of code returns
    a single global `Logger` instance by that name, instantiating it only on first
    access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: By default, a Python process starts out with a single root, `logger (name ==
    ")`, with a single handler logging to `stdout`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Logging in web2py involves some new issues, which are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring and controlling logging at the application level
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a logger once and only once
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implementing a simple syntax for logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python's native logging framework already maintains a global set of named loggers
    per process. But in web2py, since the applications run within the same process,
    loggers are shared across applications. We need a different solution, if we want
    to configure and control loggers on an application-specific basis.
  prefs: []
  type: TYPE_NORMAL
- en: An easy way to create application-specific loggers is by including the application
    name in the name of the logger.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: This can be done, for example, in a model file. The same code used across multiple
    applications will now return separate loggers for each application.
  prefs: []
  type: TYPE_NORMAL
- en: We want to be able to configure a logger once on start-up. However, when accessing
    a named logger, Python doesn't provide a way to check if the logger already exists.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest way to ensure whether a logger is configured only once or not,
    is to check if it has any handlers, which is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Notice that if `loggername` is empty, you need to retrieve Python's root logger.
    The default root logger already has a handler associated with it, so you would
    check for a handler count of `1`. The root logger can't be made application-specific.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, we don't want to have to call `get_configured_logger` every time
    we make a log entry. Instead, we can make a global assignment once in the model,
    and use it throughout our application. The assignment will be executed every time
    you use the logger in your controller, but instantiation and configuration will
    only happen at the first access.
  prefs: []
  type: TYPE_NORMAL
- en: 'So finally, just place this code in a model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Use it in your controllers as in the following examples:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What can we do with a custom application-level logger? We can, for example,
    re-program logging on Google App Engine, so that messages go in a datastore table.
    Here is how we can do it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'You can read more on the subject at the following URLs:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://docs.python.org/library/logging.html](http://docs.python.org/library/logging.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://github.com/apptactic/apptactic-python/blob/master/logging/custom_handlers.py](http://github.com/apptactic/apptactic-python/blob/master/logging/custom_handlers.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Aggregating feeds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will build an RSS feed aggregator using **feedparser** and
    **rss2**. We call it **Planet Web2py**, because it will filter the rss items,
    based on the string `web2py`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `models/db_feed.py`, with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Then in `controllers/default.py`, add a planet function that renders a basic
    page by fetching all feeds with `feedparser:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Before you can use this function, you will need to add some feed URLs in `db.feed`,
    for example, using `appadmin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sample RSS feeds about web2py are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://reingart.blogspot.com/feeds/posts/default/-/web2py](http://reingart.blogspot.com/feeds/posts/default/-/web2py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://web2py.wordpress.com/feed/](http://web2py.wordpress.com/feed/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.web2pyslices.com/main/slices/get_latest.rss](http://www.web2pyslices.com/main/slices/get_latest.rss)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://martin.tecnodoc.com.ar/myblog/default/feed_articles.rss](http://martin.tecnodoc.com.ar/myblog/default/feed_articles.rss)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A working example of web2py sample planet can be found at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://www.web2py.com.ar/planet/](http://www.web2py.com.ar/planet/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Full source code of complete examples (planet-web2py) is published at the Google
    code project, available at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://code.google.com/p/planet-web2py/](http://code.google.com/p/planet-web2py/)'
  prefs: []
  type: TYPE_NORMAL
- en: That application stores `rss` feed entries, to speed-up aggregation, and refresh
    feeds periodically.
  prefs: []
  type: TYPE_NORMAL
- en: Displaying Tweets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe we will show how to display recent tweets using `simplejson`,
    and fetch the tool included with web2py.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, create a `models/0.py` file to store the basic configuration, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In `controllers/default.py`, add a Twitter function that renders a basic page
    section by fetching all tweets with the fetch tool, and parse it with `simplejson:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create a view for the twitter component in views/default/twitter.load where
    we will render each tweet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, in `default/index.html`, add the section using LOAD (jQuery) to load
    the tweets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can use CSS styles to enhance the tweets section. Create a `static/css/tweets.css`
    file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the CSS file to the response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You can further customize this recipe with the following attributes that this
    tweeter API returns for each tweet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`iso_language_code`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_user_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_user_id_str`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile_image_url_https`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_user_id_str`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`text`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_user_name`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_reply_to_status_id_str`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`profile_image_url`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id''`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_user`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`source`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`in_reply_to_status_id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id_str''`,'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_user`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`from_user_id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`to_user_id`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`geo`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`created_at`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`metadata`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that in this recipe we are using a cache to speed-up the page load
    (15 minutes = 60*15). If you need to change it, modify @cache(…,time_expire=…)
  prefs: []
  type: TYPE_NORMAL
- en: Plotting with matplotlib
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Matplotlib** is a state-of-the-art plotting library for Python. Some examples
    of what it can do can be found at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://matplotlib.sourceforge.net/gallery.html](http://matplotlib.sourceforge.net/gallery.html)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Matplotlib can be used in the following two models:'
  prefs: []
  type: TYPE_NORMAL
- en: PyLab (a Matlab compatibility mode)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More pythonic APIs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Most of the documentation uses PyLab, and that is a problem, because PyLab shares
    a global state and it does not work well with web applications. We will need to
    use the more pythonic APIs.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Matplotlib has many backends that can be used to print in a GUI or to a file.
  prefs: []
  type: TYPE_NORMAL
- en: In order to use matplotlib in web applications, we need to instruct it to generate
    plots in real time, print them into a memory-mapped file, and stream the content
    of the file to the page visitor.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we show a utility function to plot datasets of the form:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a `models/matplotlib.py` file, containing the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can now try it, using the following actions in your controller:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`http://.../test_images`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://.../a_plot.png`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`http://.../a_histogram.png`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you visit `test_images`, it generates an HTML that includes the plots
    as images:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Each of these URLs calls the myplot function in `models/matplotlib.py`. The
    plot function generates a figure containing one subplot (a set of X-Y axes). It
    then draws on the subplot called `ax` (connects the dots when `mode="plot"`, and
    draws histograms when `mode="hist")`, and prints the figure to a memory-mapped
    canvas called **stream**. It then reads the binary data from the stream and returns
    it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the example, the critical functions are `ax.plot` and `ax.hist`, which draw
    on the axes in the subplot. You can now create more plotting functions by copying
    the provided `myplot` function, by renaming it, and by replacing `ax.plot` or
    `ax.hist` with other functions for scatter plots, error bars, and so on. Now,
    it should be straightforward from the matplotlib documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Extending PluginWiki with an RSS widget
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**PluginWiki** is the most complex of the web2py plugins. It adds a lot of
    capabilities; in particular, it adds a CMS to your application, and defines widgets
    that can be embedded in the CMS pages as well as your own views. This plugin can
    be extended, and here we show you how to add a new widget.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For more information about plugin-wiki, see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[http://web2py.com/examples/default/download](http://web2py.com/examples/default/download)'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a file named `models/plugin_wiki_rss.py`, and add the following code
    to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can include this widget in the PluginWiki CMS pages, using the following
    syntax:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also include it in any web2py page using the following syntax:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'web2py user, **Bogdan**, has made some changes to this plugin to make it slicker,
    by using jQuery UI, which comes with PluginWiki. Here is the improved plugin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This modified version of the script does not use helpers, but raw html for speed,
    is CSS friendly, and uses a dialog pop-up for entry details.
  prefs: []
  type: TYPE_NORMAL
