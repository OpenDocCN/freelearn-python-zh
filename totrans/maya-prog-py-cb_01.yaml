- en: Chapter 1. Getting Started with Maya
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 开始使用Maya
- en: 'This chapter will cover everything you need to get the most out of the rest
    of the book, as well as give you a feel for the differences between MEL and Python,
    as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖您从本书其余部分获得最大收益所需的所有内容，并让您对MEL和Python之间的差异有所了解，如下所示：
- en: Using the script editor to investigate functionality
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用脚本编辑器来调查功能
- en: Running code from the script editor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从脚本编辑器运行代码
- en: Importing Maya's built-in Python functionality
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 导入Maya的内置Python功能
- en: Accessing documentation for a specific command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 访问特定命令的文档
- en: Understanding Create, Query, and Edit flags
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解创建、查询和编辑标志
- en: Adding custom folders to your script path
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将自定义文件夹添加到您的脚本路径
- en: Writing and running an external script
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写和运行外部脚本
- en: Calling a MEL script with Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Python调用MEL脚本
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: In this chapter, we'll cover the basics of scripting with Maya and Python. If
    you've been scripting for Maya for a while, a lot of what's covered will likely
    be familiar. If you're new to Maya scripting, this chapter will get you set up
    with everything you'll need to know to get the most out of the rest of the book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍使用Maya和Python进行脚本编写的基础知识。如果您已经为Maya编写了一段时间的脚本，那么本章中涵盖的内容可能很多都是您熟悉的。如果您是Maya脚本编写的新手，本章将帮助您了解完成本书其余部分所需的所有知识。
- en: Using the script editor to investigate functionality
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用脚本编辑器来调查功能
- en: The script editor is your primary tool in order to learn about Maya's script-based
    functionality, as well as a great place to test small snippets of code outside
    a full script. One of the most useful aspects of the script editor is that it
    will show you the commands that correspond to the actions that you take within
    Maya's interface.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本编辑器是您了解Maya基于脚本的功能的主要工具，同时也是测试完整脚本之外的小段代码的好地方。脚本编辑器最有用的一个方面是，它会显示您在Maya界面中执行的操作对应的命令。
- en: 'This is one of the best ways to learn about the commands involved in your day-to-day
    Maya tasks. For example, let''s use it to find out how to make a polygonal cube
    with **Maya Embedded Language** (**MEL**):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 这是了解您日常Maya任务中涉及的命令的最好方法之一。例如，让我们用它来找出如何使用**Maya嵌入式语言**（**MEL**）制作多边形立方体：
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: Open the script editor by going to **Windows** | **General Editors** | **Script
    Editor**.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过转到**窗口** | **通用编辑器** | **脚本编辑器**来打开脚本编辑器。
- en: You'll likely note that there is a lot of text already displayed, even if you've
    only recently opened Maya. To make things easier to see, go to **Edit** | **Clear
    History** from within the **Script Editor** window's menu.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您可能会注意到，即使您最近才打开Maya，显示的文本也已经很多。为了使内容更容易查看，请从**脚本编辑器**窗口的菜单中选择**编辑** | **清除历史记录**。
- en: Now try making a polygon cube by holding down space to bring up the hotbox and
    going to **Create** | **Polygon Primitives** | **Cube**.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在尝试通过按住空格键打开热键框，然后转到**创建** | **多边形原形** | **立方体**来制作一个多边形立方体。
- en: Use the interactive creation tool to specify the poly cube's dimensions.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用交互式创建工具来指定多边形立方体的尺寸。
- en: 'Observe the output in the top half of the script editor. You should see something
    like the following:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 观察脚本编辑器上半部分的结果。您应该看到如下内容：
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The output that Maya provides is presented as the MEL commands that correspond
    to the action that you've just taken. That can be a great way to find out which
    commands you'll need to use in your own scripts. In this case, it's the `polyCube`
    command, which will create a polygonal cube. Every command in Maya comes in two
    flavors—the MEL version and the corresponding Python command.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Maya提供的输出以MEL命令的形式呈现，这些命令对应于您刚刚执行的操作。这可以是一个很好的方法来找出您在自己的脚本中需要使用哪些命令。在这种情况下，是`polyCube`命令，它将创建一个多边形立方体。Maya中的每个命令都有两种形式——MEL版本和相应的Python命令。
- en: 'The script editor shows you commands in MEL syntax, which tends to take the
    form of:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本编辑器以MEL语法显示命令，通常呈现如下形式：
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The MEL syntax borrows a lot from batch scripting wherein it relies on strings
    of option names (generally referred to as "flags") and corresponding values. The
    corresponding Python command generally has the following syntax:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: MEL语法借鉴了批处理脚本，其中它依赖于选项名称（通常称为“标志”）及其对应值的字符串。相应的Python命令通常具有以下语法：
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, the MEL and Python versions are fairly similar, but with some
    key differences:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，MEL和Python版本相当相似，但有一些关键差异：
- en: In the MEL version, flag names are indicated with a dash, and their values follow
    directly after, whereas in Python, options are given with the "optionName=value"
    syntax
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MEL版本中，标志名用破折号表示，其值直接跟在后面，而在Python中，选项使用“optionName=value”语法
- en: Python encloses all the flags in parentheses, whereas MEL does not
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python将所有标志括在括号中，而MEL则不这样做
- en: MEL requires a semicolon (;) at the end of each line, whereas Python does not
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MEL需要在每一行的末尾使用分号（;），而Python则不需要
- en: Another big difference between MEL and Python is how they treat whitespace characters
    (spaces, tabs, and newlines). MEL, like most languages, doesn't care about whitespace;
    statements are terminated with semicolons, and blocks of code are defined with
    matched sets of curly brackets.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: MEL和Python之间另一个很大的区别是它们处理空白字符（空格、制表符和换行符）的方式。MEL，像大多数语言一样，不关心空白字符；语句以分号结束，代码块由匹配的括号对定义。
- en: Python, however, uses whitespace characters to control program flow. This is
    often one of the strangest things about Python to people who are new to the language,
    but not to programming. In Python, blocks of code are defined by indentation.
    You can use either tabs or spaces, but the key thing is that you're consistent.
    In Python, every time you increase the number of tabs (or spaces) at the start
    of a line, it's equivalent to adding an opening curly bracket, and every time
    you decrease that number, it's equivalent to a closing curly bracket. This can
    often be confusing, as the structure of your program is defined by characters
    that may not actually be visible. If you're new to Python and having trouble keeping
    track of your whitespace, you might want to change your editor settings to display
    whitespace characters. Most programmer-friendly text editors include such an option,
    and it can be a big help.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Python使用空白字符来控制程序流程。这对于初学者来说可能是Python最奇怪的地方之一，但对于编程新手来说则不然。在Python中，代码块是通过缩进来定义的。你可以使用制表符或空格，但关键是要保持一致。在Python中，每次你在行首增加制表符（或空格）的数量，就相当于添加了一个开括号，每次减少这个数量，就相当于添加了一个闭括号。这通常会很令人困惑，因为你的程序结构是由可能实际上看不见的字符定义的。如果你是Python新手并且难以跟踪你的空白字符，你可能想要更改你的编辑器设置以显示空白字符。大多数程序员友好的文本编辑器都包括这样的选项，这可以大有帮助。
- en: The specific list of options for each command can be found in the built-in Python
    documentation, accessible from within Maya by going to **Help** | **Python Command
    Reference**. For most commands, you'll find a long list of options.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令的具体选项列表可以在内置的Python文档中找到，通过在Maya中转到**帮助** | **Python命令参考**可以访问。对于大多数命令，你都会找到一个长长的选项列表。
- en: To make things even more complicated, every option has both a short name and
    a long name. For example, the polyCube allows you to specify the number of subdivisions
    along the X axis. You can use either the long name, "subdivisionsX" or the short
    name, "sx" to set it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使事情更加复杂，每个选项都有短名和长名。例如，polyCube允许你指定X轴上的细分数量。你可以使用长名“subdivisionsX”或短名“sx”来设置它。
- en: For example, all of the following will result in the creation of a 1x1x1 polygonal
    cube with five subdivisions along the X-axis.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下所有操作都将导致创建一个1x1x1的多边形立方体，X轴上有五个细分。
- en: 'The MEL versions are:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: MEL的版本有：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Python versions are:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Python的版本有：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Feel free to use either the short or long version for your arguments. You can
    also mix and match, using short names for some arguments and long names for others.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随意使用短版本或长版本来指定你的参数。你也可以混合使用，为一些参数使用短名，为其他参数使用长名。
- en: In practice, it's generally best to use short names for common arguments (ones
    that you're likely to remember) and long names for more obscure / more rarely
    used arguments. Remember that just because your code seems completely sensible
    to you right now, it may look confusing when you revisit it 6 months (or 6 years!)
    from now. Make it easy for your future self by using long names (and including
    comments) when necessary.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，通常最好为常见的参数（你可能会记住的参数）使用短名，为不太常见/较少使用的参数使用长名。记住，尽管你的代码现在看起来完全合理，但当你6个月（或6年！）后再次查看时，它可能看起来很混乱。通过在必要时使用长名（并包括注释）来简化你未来的工作。
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You may be wondering why Maya offers two different methods for scripting, MEL
    and Python. That's a simple case of backwards compatibility. MEL came first and
    was available in Maya long before Python support was added. Back then, you had
    to use MEL for day-to-day tasks, and if that couldn't provide you with what you
    needed, you had to dive into the C++ API (which was quite involved and hard to
    work with on non-Windows systems). Python unites both approaches, but MEL is still
    supported to allow older scripts to work. It's also possible that you might get
    better performance with MEL than with Python, as the Python functionality is a
    wrapper around MEL. Python is a much nicer language to work with though, so it's
    generally a worthwhile trade-off.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能想知道为什么 Maya 提供了两种不同的脚本编写方法，MEL 和 Python。这是一个简单的向后兼容性问题。MEL 是第一个出现的，在 Python
    支持添加到 Maya 之前就已经可用。当时，你必须使用 MEL 来完成日常任务，如果 MEL 不能满足你的需求，你必须深入研究 C++ API（这在非 Windows
    系统上相当复杂且难以操作）。Python 统一了这两种方法，但 MEL 仍然得到支持，以便旧脚本可以继续使用。也有可能你使用 MEL 的性能会比 Python
    更好，因为 Python 功能是 MEL 的包装器。尽管如此，Python 是一个更易于工作的语言，所以这通常是一个值得的权衡。
- en: Note that the script editor doesn't (by default) show you everything that you
    do. Under normal circumstances, Maya shows you a slightly filtered output based
    on what you are most likely to be interested in. This is usually a good thing,
    but there are times when you'll want to disable it. To show *all* the output,
    go to the script editor and select **History** | **Echo all Commands**. This will
    cause Maya to output *everything* to the script editor. This generally means much,
    much more output than you want, but can sometimes be helpful. In practice, you'll
    generally want to leave that option off except when you're trying to replicate
    a given piece of functionality in a script, and the default output isn't giving
    you any insight into what Maya is doing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，脚本编辑器默认不会显示你做的所有操作。在正常情况下，Maya 会根据你最可能感兴趣的内容显示稍微过滤后的输出。这通常是好事，但有时你可能希望禁用它。要显示
    *所有* 输出，转到脚本编辑器并选择 **历史** | **回显所有命令**。这将导致 Maya 将 *所有* 输出都发送到脚本编辑器。这通常意味着比你想看到的输出多得多，但有时可能很有帮助。在实践中，你通常希望在尝试在脚本中复制特定功能时才开启这个选项，并且默认输出没有给你任何关于
    Maya 正在做什么的洞察。
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'If you have Maya setup to use interactive mode for the creation of primitive
    shapes, you must have seen the following in the output presented in the Script
    Editor:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经将 Maya 设置为使用交互模式来创建原始形状，你一定在脚本编辑器中看到以下输出：
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Contexts are an alternative way of getting input from the user, and we'll have
    more to say about them in [Chapter 10](ch10.html "Chapter 10. Advanced Topics"),
    *Advanced Topics*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 上下文是获取用户输入的另一种方式，我们将在 [第 10 章](ch10.html "第 10 章。高级主题")，*高级主题* 中有更多关于它们的讨论。
- en: Running code from the script editor
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从脚本编辑器运行代码
- en: Not only is the Script Editor a great way to see which commands correspond to
    the actions you take in Maya's UI, but it is also a convenient way to write small
    bits of code. While you will certainly want to use a text editor to write your
    scripts, it is still important to be comfortable using the script editor to run
    small sections of code, either to test it out before inclusion in a larger script
    or to get more information about the current scene.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本编辑器不仅是一个查看与你在 Maya UI 中采取的操作对应的命令的好方法，而且也是一个方便地编写小段代码的方式。虽然你当然会想使用文本编辑器来编写你的脚本，但仍然重要的是要熟悉使用脚本编辑器来运行小段代码，无论是为了在将其包含到更大的脚本之前测试它，还是为了获取有关当前场景的更多信息。
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Make sure that you have the script editor open and that you've switched to the
    Python tab in the input (bottom) section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 确保脚本编辑器已打开，并且你已经切换到输入（底部）部分的 Python 选项卡。
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'Type the following into the input section:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 在输入部分输入以下内容：
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once you've done that, execute it by either pressing the Execute button at the
    top of the Script Editor or just by pressing *Control* + *Enter*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦完成，可以通过在脚本编辑器顶部点击执行按钮，或者直接按 *Control* + *Enter* 来执行它。
- en: Your code will disappear from the input section, a new polygon cube will be
    created, and the results will be pasted into the output ("History") section of
    the script editor.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你的代码将从输入部分消失，一个新的多边形立方体将被创建，结果将被粘贴到脚本编辑器的输出（“历史”）部分。
- en: To keep your code from disappearing automatically, highlight it first with Command-A
    (to select everything), then press *Command* + *Enter*. This will cause Maya to
    run just the selected code without clearing out the input section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止你的代码自动消失，首先使用 Command-A（选择所有内容）将其突出显示，然后按 *Command* + *Enter*。这将导致 Maya
    只运行所选代码而不清除输入部分。
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Although the `polyCube` command does the actual work, we have to first import
    the Maya library for Python before we can use it. To do this, we have to first
    use `import maya.cmds`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然`polyCube`命令实际执行工作，但我们必须首先导入 Maya 的 Python 库，然后才能使用它。为此，我们必须首先使用 `import maya.cmds`。
- en: The script editor is a great way to try out small snippets of code, but the
    fact that successful code is deleted can get rather frustrating. For any real
    script development, you'll want to use a programmer-friendly text editor.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本编辑器是尝试小段代码的好方法，但成功的代码被删除的事实可能会相当令人沮丧。对于任何真正的脚本开发，你将想要使用一个程序员友好的文本编辑器。
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: One handy thing about the script editor is that you can save code from the editor
    to the shelf. To do this, enter some code into the input section, then go to **File**
    | **Save Script to Shelf...** from the **Script Editor** menu. Maya will ask you
    to provide a name for the script and then (after a bit of time), a new button
    will appear in the "Custom" shelf. Pressing that button will execute the corresponding
    code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本编辑器的一个方便之处在于，你可以将编辑器中的代码保存到架子上。为此，在输入部分输入一些代码，然后从 **脚本编辑器** 菜单中选择 **文件** |
    **保存脚本到架子上...**。Maya 将要求你为脚本提供名称，然后（经过一段时间后），在 "自定义" 架子上将出现一个新按钮。按下该按钮将执行相应的代码。
- en: Although most of your scripting work will involve writing separate scripts,
    it can sometimes be useful to copy-paste commands from the history (top) section
    of the Script Editor to the input (bottom) section and save it all to the shelf.
    This is a bit like recording an action in Photoshop and can be a quick and dirty
    way to create a new shortcut for commonly used functionality.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你的大多数脚本工作将涉及编写单独的脚本，但有时从脚本编辑器的历史（顶部）部分复制粘贴命令到输入（底部）部分并将它们全部保存到架子上是有用的。这有点像在
    Photoshop 中录制动作，可以是一种快速而简单的方法来为常用功能创建新的快捷方式。
- en: Importing Maya's built-in Python functionality
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导入 Maya 的内置 Python 功能
- en: Python is a really useful language, but it doesn't actually offer that much
    out of the box other than some basic commands for manipulating simple data. In
    order to do truly interesting things, you'll generally need to extend Python's
    built-in functionality with one or more libraries, including the one that provides
    access to Maya's functionality.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种非常有用的语言，但它实际上并没有提供很多开箱即用的功能，除了一些用于操作简单数据的基本命令。为了真正做一些有趣的事情，你通常需要通过一个或多个库来扩展
    Python 的内置功能，包括提供访问 Maya 功能的库。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First, let''s import the main Maya scripting library for Python, `maya.cmds`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们导入 Python 的主要 Maya 脚本库 `maya.cmds`：
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we''ve done that, we can use `cmds` instead of `maya.cmds`. For example,
    if we have this code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们做了这件事，我们就可以使用 `cmds` 而不是 `maya.cmds`。例如，如果我们有这段代码：
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can instead use the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以改用以下方法：
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That might seem like a minor change, but in the course of a full script, it
    can save you a great deal of typing. Less typing means fewer typos, so it's well
    worth doing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能看起来像是一个微小的变化，但在整个脚本的过程中，它可以为你节省大量的输入。输入越少，错误就越少，所以这样做是非常值得的。
- en: 'Now that we''ve done this, let''s see what cmds has to offer by listing its
    contents. Python offers a handy way to display the contents of any object via
    the `dir()` command. Let''s use that to get a list of all the commands in `maya.cmds`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经做了这件事，让我们看看 `cmds` 提供了什么，通过列出其内容。Python 提供了一种方便的方法来通过 `dir()` 命令显示任何对象的内容。让我们使用它来获取
    `maya.cmds` 中所有命令的列表：
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the preceding code, and you'll see a long list of everything defined in
    the maya.cmds library. This will be an extensive list, indeed. Most of the commands
    you'll see are covered in the official docs, but it's good to know how to use
    dir to investigate a given library.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码，你会看到一个长长的列表，列出了 `maya.cmds` 库中定义的所有内容。这确实是一个很长的列表。你将看到的多数命令都在官方文档中有介绍，但了解如何使用
    dir 来调查特定的库是很好的。
- en: 'You can also use dir to investigate a specific command. For example, try the
    following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以使用 dir 来调查特定的命令。例如，尝试以下代码：
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the preceding code, and you'll see all of the properties for the polyCube
    command itself. However, the results will likely look a bit odd in that none of
    them have anything to do with generating a polygonal cube. That's because `maya.cmds.[commandName]`
    is a built-in function. So, if you use `dir()` to investigate it further, you'll
    just see the capabilities that are common to Python functions. For details on
    the specifics of a command, consult the built-in documentation for Maya's commands,
    which can be accessed by going to **Help** | **Maya Scripting Reference** | **Python
    Command Reference**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 运行前面的代码，你会看到 polyCube 命令本身的全部属性。然而，结果可能会看起来有点奇怪，因为它们都与生成多边形立方体无关。这是因为 `maya.cmds.[commandName]`
    是一个内置函数。所以，如果你使用 `dir()` 进一步调查它，你只会看到与 Python 函数共有的功能。有关命令的详细信息，请参阅 Maya 命令的内置文档，可以通过访问
    **帮助** | **Maya 脚本参考** | **Python 命令参考** 来获取。
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Like any other specific subdomain of Python functionality, the commands that
    expose Maya's toolset to Python are part of a library. In order to make use of
    them, you have to first import the library. Virtually, every script you write
    will require the "maya.cmds" library, and you will likely need to include additional
    libraries occasionally for additional capabilities, such as communicating with
    a webserver or reading in a particular file format.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 就像 Python 功能的任何其他特定子领域一样，暴露 Maya 工具集给 Python 的命令是库的一部分。为了使用它们，你必须首先导入库。几乎你写的每个脚本都将需要“maya.cmds”库，并且你可能会偶尔需要包含额外的库以获得额外的功能，例如与
    web 服务器通信或读取特定的文件格式。
- en: 'Although you could just leave it at `import maya.cmds`, that would require
    a lot of additional typing. By using the `import [library] as [shortName]` syntax,
    you can tell Python to use a custom name as an alias for `maya.cmds`. You could
    use almost any name you want (`import maya.cmds as MyUncleFred` would work just
    fine), but in practice, you want to use something both short and descriptive.
    You''ll also want to make sure that you don''t overwrite any of Python''s built-in
    libraries. For example, you *could* do the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然你可以直接使用 `import maya.cmds`，但这会需要输入很多额外的字符。通过使用 `import [library] as [shortName]`
    语法，你可以告诉 Python 使用一个自定义名称作为 `maya.cmds` 的别名。你可以使用几乎任何你想要的名字（例如 `import maya.cmds
    as MyUncleFred` 也可以正常工作），但在实践中，你希望使用既简短又具有描述性的名称。同时，你还需要确保不要覆盖 Python 的任何内置库。例如，你可以这样做：
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This would rename `maya.cmds` as math and cause trouble if you wanted to use
    any of the functions defined in the math library. Don't do that.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这会将 `maya.cmds` 重命名为 math，如果你想要使用数学库中定义的任何函数，这将会造成麻烦。不要这样做。
- en: For the sake of this book and consistency with Maya's documentation, we will
    be using "cmds" as the shorthand for "maya.cmds".
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了这本书的连贯性和与 Maya 文档的一致性，我们将使用“cmds”作为“maya.cmds”的简称。
- en: There's more...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: The maya.cmds library is only one of several libraries that can be used to interface
    Maya with Python. One of the great things about Python support in Maya is that
    the old way of doing things, where there was both MEL (for day-to-day tasks) and
    the C++ API (for larger scale plugins), is unified under the banner of Python.
    The `maya.cmds` library handles the MEL component, but for functions previously
    accessed through the C++ API, you'll want to use maya.OpenMaya instead.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: maya.cmds 库只是可以用来将 Maya 与 Python 交互的几个库之一。Python 在 Maya 中的支持有一个很好的特点，那就是将旧的方法（既有用于日常任务的
    MEL，也有用于更大规模插件的 C++ API）统一在 Python 的旗帜下。`maya.cmds` 库处理 MEL 组件，但对于之前通过 C++ API
    访问的函数，你将想要使用 maya.OpenMaya。
- en: It (maya.cmds) is a lightweight wrapper around the MEL commands that many Maya
    users have grown accustomed to, and it has the benefit of being officially supported
    by Autodesk. However, it is not the only way to access MEL commands. There is
    also a third-party library, PyMEL (accessed by importing `pymel.core`). PyMEL
    has the benefit of being more "Pythonic" and offering nicer syntax, but is not
    directly supported by Autodesk. It also introduces additional layers of abstraction
    on top of the built-in functionality, which can lead to poorer performance.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 它（maya.cmds）是围绕许多 Maya 用户已经习惯的 MEL 命令的一个轻量级包装器，并且它有一个好处，那就是由 Autodesk 正式支持。然而，这并不是访问
    MEL 命令的唯一方式。还有一个第三方库 PyMEL（通过导入 `pymel.core` 访问）。PyMEL 的好处是更加“Pythonic”并提供更简洁的语法，但它不是由
    Autodesk 直接支持的。它还在内置功能之上引入了额外的抽象层，这可能会导致性能下降。
- en: Accessing documentation for a specific command
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问特定命令的文档
- en: Maya is a complex tool, and it offers a wide range of functionality, all of
    it with corresponding commands that can be invoked via scripts. Each command has
    its own set of arguments, ranging from easily understood to quite cryptic.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Maya是一个复杂的工具，它提供了一系列丰富的功能，每个功能都有相应的命令，可以通过脚本调用。每个命令都有自己的参数集，从易于理解到相当晦涩。
- en: When writing scripts for Maya (and as with any other kind of programming), it
    is vital to be able to find the appropriate documentation and to understand how
    to make sense of it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写Maya脚本（以及任何其他类型的编程）时，能够找到适当的文档并理解如何理解它至关重要。
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: Let's say that we want more information on a specific command, say the command
    to create a polygonal cube.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要有关特定命令的更多信息，比如创建多边形立方体的命令。
- en: One way to view the help for the command is to use Maya's web-based command
    help, available by going to **Help** | **Python Command Reference** from within
    Maya. From there, you can either click on the "Polygons" subsection or use the
    search box.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 查看命令帮助的一种方法是通过Maya的基于Web的命令帮助，您可以通过在Maya中转到**帮助** | **Python命令参考**来访问它。从那里，您可以点击“多边形”子部分或使用搜索框。
- en: There are a couple of other ways to get to the documentation for a command,
    though. You can also go directly to the documentation for a command from the Script
    Editor window. First, execute the corresponding action using Maya's interface,
    such as invoking the hotbox and choosing **Create** | **Polygon Primitives** |
    **Cube**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 获取命令文档的另一种方法。您也可以直接从脚本编辑器窗口访问命令的文档。首先，使用Maya的界面执行相应的操作，例如调用热键并选择**创建** | **多边形原语**
    | **立方体**。
- en: That will cause the corresponding MEL command to be displayed in the output
    section of the **Script Editor**, in this case, "polyCube". From within the script
    editor, highlight the relevant line, and go to **Help** | **Help on Selected Command**.
    This will bring up a browser window with the documentation for that command. Note
    that it will default to the MEL version of the command; for the Python version,
    click on the "Python" link in the top-right corner of the window.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在**脚本编辑器**的输出部分显示相应的MEL命令，在本例中为“polyCube”。在脚本编辑器中，突出显示相关行，然后转到**帮助** | **所选命令的帮助**。这将打开一个浏览器窗口，显示该命令的文档。请注意，它将默认显示命令的MEL版本；对于Python版本，请点击窗口右上角的“Python”链接。
- en: 'Finally, you can retrieve information about a command via Python directly using
    the help command. Try running the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，您可以通过Python直接使用帮助命令检索有关命令的信息。尝试运行以下命令：
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will result in a list of the flags available for the given command, as
    well as the type of value that Maya expects for each, such as:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成一个列表，列出给定命令可用的标志，以及Maya期望每个标志的值类型，例如：
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This means that there is a flag named "sx" or "subdivisionsX" that expects an
    integer value.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这意味着有一个名为“sx”或“subdivisionsX”的标志，它期望一个整数值。
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: For the most part, you'll want just the Python command reference open in a browser
    window while you work on developing your scripts. Good reference documents are
    key to writing good software, and you should get used to just keeping the references
    close at hand.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 在您开发脚本时，您可能只想在浏览器窗口中打开Python命令参考。好的参考文档对于编写好的软件至关重要，您应该习惯于随时将参考文档放在手边。
- en: There's more...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also use the help command to invoke the web-based documentation for
    a given command directly, such as:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以使用帮助命令直接调用给定命令的基于Web的文档，例如：
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This would bring up the web page containing the documentation for the Python
    version of the polyCube command. That's definitely a clunky way to access the
    help, but might be useful if you wanted to give the users of your script an easy
    way to refer to relevant documentation directly from your script's user interface.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 这将打开包含polyCube命令Python版本文档的网页。这绝对是一种访问帮助的笨拙方式，但如果您想为脚本用户提供一种直接从脚本的用户界面引用相关文档的简单方法，这可能是有用的。
- en: Understanding Create, Query, and Edit flags
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解创建、查询和编辑标志
- en: One thing that is a bit strange about Maya scripting is that the same command
    can be used in up to three different ways—create, query, and edit modes—with the
    specifics varying for each of the command flags. This is a byproduct of the fact
    that the Python functionality is a wrapper around the older MEL-based scripting
    system, and it can seem a bit confusing when you're getting started. Nevertheless,
    it is important to understand the differences between the three modes and how
    to use them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 Maya 脚本的一个有点奇怪的地方是，同一个命令可以用多达三种不同的方式使用——创建、查询和编辑模式，具体细节因每个命令标志而异。这是由于 Python
    功能性是围绕较老的基于 MEL 的脚本系统的一个包装，当你刚开始时可能会觉得有点困惑。尽管如此，了解三种模式之间的区别以及如何使用它们是很重要的。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Open up the Python command reference by going to **Help** | **Python Command
    Reference** and navigate to the documentation for the polyCube command.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 通过访问 **帮助** | **Python 命令参考** 打开 Python 命令参考，并导航到 polyCube 命令的文档。
- en: Also, be sure to have the script editor open in Maya and be in the Python tab.
    Alternatively, you can run the example commands Maya's command line; just make
    sure that you're running in Python mode rather than MEL (click on **MEL** to switch
    to Python and **Python** to switch back to MEL).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保在 Maya 中打开脚本编辑器并处于 Python 选项卡。或者，你可以通过 Maya 的命令行运行示例命令；只需确保你在 Python 模式下运行而不是
    MEL（点击 **MEL** 切换到 Python，点击 **Python** 返回 MEL）。
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'First off, take a look at the Properties column. You''ll see that every flag
    has some combination of "C", "E", "Q", and "M" listed. Those refer to the different
    ways in which a command can be run and have the following meanings:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，看一下属性列。你会看到每个标志都列出了 "C"、"E"、"Q" 和 "M" 的某种组合。这些指的是命令可以运行的不同方式，并具有以下含义：
- en: '**C**: "Create" flag is only relevant when first running the command, such
    as when you initially create a polygonal primitive'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**C**: "创建"标志仅在首次运行命令时相关，例如在最初创建多边形原形时'
- en: '**Q**: "Query" flag can be queried after the command has been run and can be
    used to retrieve information about something in the scene'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Q**: "查询"标志在命令执行后可以查询，可以用来检索场景中某物的信息'
- en: '**E**: "Edit" flag can be edited after the fact'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**E**: "编辑"标志可以在事后编辑'
- en: '**M**: "Multiple" flag can be used more than once in a single instance of the
    command (to create specify multiple points when creating a curve, for example)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**M**: "多重"标志可以在命令的单个实例中使用多次（例如，在创建曲线时指定多个点）'
- en: For many flags, you'll see a full complement of create, query, and edit, but
    there are generally at least a few flags that aren't accessible for one or more
    of the modes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 对于许多标志，你会看到创建、查询和编辑的全套功能，但通常至少有几个标志在一种或多种模式下不可访问。
- en: Let's see how create, edit, and query play out in the case of the polyCube command.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看创建、编辑和查询在 polyCube 命令中的表现。
- en: 'First off, let''s make a new cube and store the result in a variable, so we
    can make use of it later:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个新的立方体并将结果存储在一个变量中，这样我们以后就可以使用它：
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s change something about the cube, post-creation by using the edit
    mode:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们通过使用编辑模式来改变创建后的立方体的某些属性：
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will cause the cube that we created with the first command to be altered
    from the default (no subdivisions in the *x* axis) to having five.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致我们使用第一个命令创建的立方体从默认状态（在 *x* 轴上没有细分）变为有五个细分。
- en: 'Now, let''s use the query mode to store the new number of divisions to a variable:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们使用查询模式将新的细分数量存储到一个变量中：
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You should see "5.0" as the output. Note that even though the number of divisions
    of a polygonal cube must be an integer value, Maya is displaying it as "5.0".
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该看到输出为 "5.0"。请注意，尽管多边形立方体的细分数量必须是整数，但 Maya 显示的是 "5.0"。
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'The important thing to note for the query and edit modes is that you run the
    command as you normally would (`cmds.polyCube`, for example), but with the following
    three key differences:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于查询和编辑模式，需要注意的是，你像平常一样运行命令（例如 `cmds.polyCube`），但有以下三个关键区别：
- en: The inclusion of the name of the object as the first argument. This can either
    be the name directly as a string `("pCube1"`, for example), or a variable.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将对象名称作为第一个参数包含在内。这可以是直接作为字符串的名称 `("pCube1"，例如)`，或者是一个变量。
- en: The inclusion of either `edit=True` or `query=True` as an argument.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `edit=True` 或 `query=True` 作为参数包含在内。
- en: Additional arguments, with the specifics based on whether you're running the
    command in the query or edit mode.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 额外的参数，具体取决于你是在查询模式还是编辑模式下运行命令。
- en: For the edit mode, you'll want to specify the name of the property you want
    to change, along with the new value. For the query mode, you'll want to just include
    the name of the property and "=True". Think of this as saying that it is `True`
    that you want to know the value of the property. Note that you can only query
    a single flag at a time. If you need to query multiple values, run the command
    multiple times, changing the flag you pass in.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 对于编辑模式，你需要指定你想要更改的属性名称以及新的值。对于查询模式，你只需要包含属性名称和 "=True"。想象一下，你是在说你想知道属性的值是 `True`。请注意，你一次只能查询一个标志。如果你需要查询多个值，请多次运行命令，每次更改传递的标志。
- en: There's more...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: Although many of the most-used properties can be used in all three modes, there
    are numerous examples of ones that cannot be, mainly because it wouldn't make
    sense to do so. For example, it's perfectly reasonable to set construction history
    on or off when creating a new object, and it's certainly reasonable to query that
    after the fact, but what would it mean to use the edit mode to enable construction
    history on an object that didn't already have it? That would require rebuilding
    the history of the object, which may have been manipulated in various ways since
    it was created. As a result, the "constructionHistory" (or "ch") flag only offers
    the Create and Query options.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管许多最常用的属性可以在所有三种模式下使用，但有许多例子表明它们不能，主要是因为这样做没有意义。例如，在创建新对象时设置或关闭构造历史记录是完全合理的，并且在事后查询它也是合理的，但使用编辑模式来启用没有构造历史记录的对象的构造历史记录意味着什么？这将需要重建对象的整个历史，该对象自创建以来可能已经被以各种方式操作过。因此，"constructionHistory"（或"ch"）标志只提供创建和查询选项。
- en: You might think that this is all a bit clunky, and if all we wanted to do was
    set the number of subdivisions for a newly created cube, you would be correct.
    However, it's important to understand the different command modes, both to get
    information after the fact and because it's an important part of building user
    interface elements and getting information from them.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会觉得这有点笨拙，如果我们只是想设置新创建的立方体的细分数量，你是对的。然而，了解不同的命令模式很重要，这不仅是为了事后获取信息，而且因为它是构建用户界面元素和从它们获取信息的重要部分。
- en: See also
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: We'll be making the extensive use of the Query mode to retrieve information
    from user interface elements throughout the rest of the book, starting in [Chapter
    2](ch02.html "Chapter 2. Creating User Interfaces"), *Creating User Interfaces*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本书的其余部分广泛使用查询模式来从用户界面元素中检索信息，从[第2章](ch02.html "第2章。创建用户界面") *创建用户界面* 开始。
- en: Adding custom folders to your script path
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 将自定义文件夹添加到你的脚本路径
- en: In order to write reusable scripts, you'll want to save your scripts to external
    files, and in order to do *that*, you'll need to make sure that Maya knows where
    they are.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 为了编写可重用的脚本，你需要将你的脚本保存到外部文件中，而为了做到这一点，你需要确保Maya知道它们的位置。
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到...
- en: 'Maya maintains a list of locations to search for scripts, used when you use
    the import (Python) or source (MEL) commands. If you want to see the full list,
    you can do so with the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: Maya维护一个搜索脚本的位置列表，用于你在使用导入（Python）或源（MEL）命令时。如果你想查看完整的列表，你可以使用以下代码：
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will provide you with a list of paths, including the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 这将为你提供一个路径列表，包括以下内容：
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Saving your scripts to any of those folders will allow Maya to find them. If
    you're fine with saving all of your scripts to one of those folders, that's totally
    fine.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的脚本保存到这些文件夹中的任何一个，Maya都可以找到它们。如果你愿意将所有脚本保存到这些文件夹中的任何一个，那是完全可以的。
- en: 'However, you might want to add additional folders to the list. For example,
    you might want to save your scripts in a folder within the my `Documents` directory,
    maybe something like:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你可能想要将额外的文件夹添加到列表中。例如，你可能想在 `我的文档` 目录中的一个文件夹中保存你的脚本，可能像这样：
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Note that this is a typical example on Macintosh. On a Windows machine, it
    would look more like:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这是一个典型的Macintosh示例。在Windows机器上，它看起来可能更像是：
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Either way, we'll need to tell Maya to look there to find scripts to execute.
    There are a few ways we could do it, but in keeping with the theme of the book,
    we'll do it using Python.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 无论哪种方式，我们都需要告诉Maya去那里查找要执行的脚本。我们可以有几种方法来做这件事，但本着本书的主题，我们将使用Python来完成。
- en: 'Run the following code in the script editor:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在脚本编辑器中运行以下代码：
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is done by replacing `/Users/adrian/Documents/MayaScripting/examples` with
    whatever folder you want to use.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过将 `/Users/adrian/Documents/MayaScripting/examples` 替换为你想要使用的任何文件夹来完成。
- en: Once you've done this, you'll be able to import scripts stored in that directory
    as well. However, having to enter the preceding code every time you launch Maya
    would be quite frustrating. Luckily, Maya provides a way for us to execute custom
    Python code on a startup.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 完成此操作后，你将能够导入该目录中存储的脚本。然而，每次启动 Maya 都必须输入前面的代码会相当令人沮丧。幸运的是，Maya 提供了一种方法，让我们在启动时执行自定义
    Python 代码。
- en: 'To make the code execute every time Maya opens, save it to a file named `userSetup.py`
    and save it to the following location for a Mac:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要使代码在 Maya 打开时执行，将其保存为名为 `userSetup.py` 的文件，并将其保存到以下位置（对于 Mac）：
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Or for Windows, you can save it to:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 或者对于 Windows，你可以保存到以下位置：
- en: '[PRE25]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: All of the code contained in `userSetup.py` will be run every time Maya starts
    up.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '`userSetup.py` 中包含的所有代码将在 Maya 启动时运行。'
- en: While the base list of paths that Maya will search for scripts is not altered
    by the above, it will cause Maya to add your custom folder to the list every time
    it starts up, which in practice amounts to the same thing.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然上述操作不会改变 Maya 搜索脚本的基路径列表，但它会在 Maya 启动时将你的自定义文件夹添加到列表中，这在实际操作中效果相同。
- en: There's more...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can also add to your paths by creating the Maya.env file and saving it
    to the following location (on a Mac machine):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 你还可以通过创建 Maya.env 文件并将其保存到以下位置（在 Mac 机器上）来添加到你的路径中：
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: or
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE27]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'On a Windows machine, save it to:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 机器上，保存到以下位置：
- en: '[PRE28]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: or
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 或者
- en: '[PRE29]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For the specifics of the `Maya.env` file syntax, consult Maya's documentation.
    However, editing `Maya.env` can lead to crashes and system instability if you're
    not careful, so I recommend relying on `userSetup.py` instead.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 关于 `Maya.env` 文件语法的具体信息，请参阅 Maya 的文档。然而，如果不小心编辑 `Maya.env`，可能会导致崩溃和系统不稳定，所以我建议依靠
    `userSetup.py`。
- en: Writing and running an external script
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写和运行外部脚本
- en: In this recipe, we'll be writing and running our first actual script as an external
    Python file.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们将编写和运行我们的第一个实际脚本，作为一个外部 Python 文件。
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: The Script Editor window is a bit of a misnomer. Although it's a great way to
    test out short snippets of code, it's awkward to use for any kind of real script
    development. For this, you'll want to have a programmer-friendly text editor setup.
    There are a ton of options out there, and if you're reading this book, you likely
    already have one that you like to use. Whatever it is, make sure that it's geared
    towards writing code, and it saves files in plain text.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 脚本编辑器窗口有点名不副实。虽然它是测试短代码片段的好方法，但对于任何类型的真实脚本开发来说都有些笨拙。为此，你需要有一个面向程序员的文本编辑器设置。市面上有很多选择，如果你正在阅读这本书，你很可能已经有一个你喜欢的编辑器了。无论是什么，确保它是面向编写代码的，并且以纯文本格式保存文件。
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'First off, we''ll need a script. Create a new file in your editor and add the
    following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们需要一个脚本。在你的编辑器中创建一个新文件，并添加以下代码：
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now save the script as `myScript.py`. Once you''ve done that, switch back to
    Maya and run the following from either the script editor or the command line:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 现在将脚本保存为 `myScript.py`。完成此操作后，切换回 Maya，并从脚本编辑器或命令行运行以下内容：
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will cause Maya to read in the file, and you''ll see the following in
    the script editor output:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致 Maya 读取该文件，你将在脚本编辑器输出中看到以下内容：
- en: '[PRE32]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: What you will not see, however, is a new cube. That's because the real functionality
    of our (simple) script is defined within a function named "makeObject".
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，你将看不到一个新的立方体。这是因为我们（简单）脚本的实际功能是在名为 "makeObject" 的函数中定义的。
- en: 'Maya treats each Python file that you import as its own module, with the name
    of the file providing the name of the module. Once we''ve imported a file, we
    can invoke functions within it by calling [moduleName].[function name]. For the
    earlier-mentioned example, this would mean:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: Maya 将你导入的每个 Python 文件视为其自己的模块，文件名即为模块名。一旦我们导入了一个文件，我们就可以通过调用 [moduleName].[function
    name] 来调用其中的函数。对于前面提到的示例，这意味着：
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run it, and you should see a newly minted cube show up, and "Made a cube!" in
    the output of the Script Editor.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 运行它，你应该会看到一个新创建的立方体出现在脚本编辑器的输出中，以及 "Made a cube!"。
- en: 'Now, let''s try changing our script. First, delete the cube we just made, then
    switch over to your text editor, and change the script to the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们尝试修改我们的脚本。首先，删除我们刚刚创建的立方体，然后切换到你的文本编辑器，并将脚本更改为以下内容：
- en: '[PRE34]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Switch back to Maya and run the script again with:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 切换回 Maya，再次使用以下命令运行脚本：
- en: '[PRE35]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You''ll see that rather than having a nice sphere, we still ended up with a
    cube. That''s because when you ask Maya to execute a script that it has already
    executed, it will default to rerunning the same code that it ran previously. In
    order to ensure that we get the latest, greatest version of our script, we''ll
    need to first run the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 你会发现，尽管我们想要一个漂亮的球体，但最终我们还是得到了一个立方体。那是因为当你要求 Maya 执行它已经执行过的脚本时，它将默认重新运行之前运行的相同代码。为了确保我们得到最新的脚本版本，我们首先需要运行以下代码：
- en: '[PRE36]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will force Maya to reload the file. Note that the argument to reload isn't
    the file name itself (`myScript.py` in this case), but rather the name of the
    module that the file defines ("myScript").
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 这将强制 Maya 重新加载文件。请注意，重新加载的参数不是文件名本身（在这种情况下是 `myScript.py`），而是该文件定义的模块名（"myScript"）。
- en: 'Once you''ve done this, you can once again try:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，你再次尝试：
- en: '[PRE37]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This time, you'll see a proper polygonal sphere, just as we intended.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 这次，你会看到一个正确的多边形球体，正如我们预期的。
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: It may seem like an unnecessary extra step to both import the script and call
    one of its functions, and you can indeed have the script automatically execute
    code (as demonstrated by the call to print("Imported Script!"). However, it's
    much better practice to wrap all of your functionality in functions, as it makes
    large scripts much easier to work with.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 似乎导入脚本并调用其函数是一个不必要的额外步骤，你确实可以让脚本自动执行代码（如通过调用 print("Imported Script!") 所演示的）。然而，将所有功能封装在函数中是一种更好的实践，因为它使得处理大型脚本变得更加容易。
- en: 'If you have functionality that you want to execute every time the script is
    run, it is best to define a function with a name like "main" and have the last
    line of your script invoke it. Take a look at the following example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你希望在脚本每次运行时都执行某些功能，最好定义一个名为 "main" 的函数，并在脚本的最后一行调用它。看看以下示例：
- en: '[PRE38]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This would define the `makeObject()` function, then (on the last line of the
    script) cause it to be executed.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 这将定义 `makeObject()` 函数，然后在脚本的最后一行执行它。
- en: 'When working on a script, it can get really tedious to reload, import, and
    run the script each time. An easy way to get around that is to enter the following
    into the script editor:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写脚本时，每次都需要重新加载、导入和运行脚本会变得非常繁琐。一个简单的方法是将以下内容输入到脚本编辑器中：
- en: '[PRE39]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Once you've done that, use **File** | **Save Script to Shelf...** to give yourself
    a button to easily rerun the latest version of your script. Note that the preceding
    code contains both import and reload. That's to make sure that the code will work
    both the first time you run it as well as successive times. The "import" command
    is there to ensure the module has been loaded at least once (necessary for a new
    script, or upon restarting Maya), and the "reload" command is there to ensure
    that what we're running is the latest version (necessary if we've made changes
    to the script with Maya still up).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些操作后，使用 **文件** | **保存脚本到架...** 来为自己提供一个按钮，以便轻松重新运行脚本的最新版本。请注意，前面的代码中既包含了导入也包含了重新加载。这是为了确保代码在第一次运行以及后续运行时都能正常工作。"导入"
    命令确保模块至少被加载过一次（对于新脚本或在重启 Maya 时是必要的），而 "重新加载" 命令确保我们运行的是最新版本（如果我们已经对脚本进行了修改且 Maya
    仍在运行）。
- en: There's more...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'If you have a script that defines a lot of functionality, and you don''t want
    to constantly type out the module name, you can use the same trick we used with
    `maya.cmds` to shorten things a bit. Namely, you can use the "as" syntax to provide
    a shorter name. For example, I could have done the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你有一个定义了大量功能的脚本，并且你不想每次都输入模块名，你可以使用我们用于 `maya.cmds` 的相同技巧来简化一些。具体来说，你可以使用 "as"
    语法来提供一个更短的名字。例如，我可能做过以下操作：
- en: '[PRE40]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This would have exactly the same effect.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 这将产生完全相同的效果。
- en: Calling a MEL script with Python
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 调用 MEL 脚本
- en: Maya offers two different languages with which to create custom functionality
    via scripting—both Maya Embedded Language (MEL) scripts and Python. In practice,
    you'll only want to use one, and of the two, Python offers a much better and more
    flexible experience.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: Maya 提供了两种不同的语言，可以通过脚本创建自定义功能——即 Maya 内嵌语言（MEL）脚本和 Python。在实践中，你只会想使用其中一种，而在两种中，Python
    提供了更好、更灵活的体验。
- en: However, it is not uncommon to have legacy scripts that were written back before
    Maya added Python functionality. While the "right" solution would be to rewrite
    the scripts using Python, there's not always enough time to do so. In those cases,
    it can sometimes be helpful to be able to call out to legacy, MEL-based functionality
    from within your Python scripts.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，拥有在Maya添加Python功能之前编写的遗留脚本并不罕见。虽然“正确”的解决方案是使用Python重写这些脚本，但并不总是有足够的时间这样做。在这些情况下，有时能够从Python脚本中调用遗留的、基于MEL的功能会很有帮助。
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Although Python is definitely the better way to create new functionality, it
    may sometimes be the case that you have older scripts that were written in MEL
    that you would like to incorporate.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python无疑是创建新功能更好的方式，但有时您可能有一些用MEL编写的旧脚本，您希望将其结合进来。
- en: The best option is to rewrite the script in Python, but if the script is complex
    or you don't have time, it may be easier to just invoke the MEL functionality
    from within a Python script. This way, you can incorporate legacy functionality
    without completely reinventing the wheel.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 最佳选择是将脚本重写为Python，但如果脚本复杂或您没有时间，可能更容易在Python脚本中调用MEL功能。这样，您可以在不重新发明轮子的同时结合遗留功能。
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'For this recipe, you''ll need the MEL script. If you don''t have one handy,
    open up a new file and enter the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，您需要MEL脚本。如果您没有现成的，打开一个新文件并输入以下内容：
- en: '[PRE41]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Save this as `myMELScript.mel` in your `maya/scripts` directory. Although we
    won't be going into the details of MEL, do note that the file has the same name
    as the function that we're defining. Most MEL scripts will follow that convention.
    Also note the inclusion of semicolons after the end of each line. Although Python
    doesn't require them, MEL (and many other languages) does.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 将此保存为`myMELScript.mel`到您的`maya/scripts`目录中。虽然我们不会深入探讨MEL的细节，但请注意，文件名与我们要定义的函数同名。大多数MEL脚本都会遵循这个约定。还要注意，在每行末尾包含分号。虽然Python不需要它们，但MEL（以及许多其他语言）需要。
- en: 'Once you have that, create a new file and name it `runMEL.py`. Enter the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您有了这个，创建一个新文件并将其命名为`runMEL.py`。输入以下内容：
- en: '[PRE42]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Save the script and run it with:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 保存脚本并使用以下命令运行：
- en: '[PRE43]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Because the last line of our script invokes the runMEL command, it will automatically
    take effect. You should see a new cube, as well as the following output in the
    Script Editor:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 因为我们的脚本最后一行调用了runMEL命令，它将自动生效。您应该在脚本编辑器中看到一个新的立方体，以及以下输出：
- en: '[PRE44]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'In this example, we imported both maya.cmds and maya.mel. The maya.mel library
    provides support to interface Python with MEL, with one of its most useful commands
    being the eval function, which takes an arbitrary string and attempts to run it
    as an MEL command. In the earlier example, we do that twice, with the first command
    being:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们导入了`maya.cmds`和`maya.mel`。`maya.mel`库提供了将Python与MEL接口的支持，其中最有用的命令之一是eval函数，它接受任意字符串并尝试将其作为MEL命令运行。在先前的例子中，我们这样做两次，第一个命令是：
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The source command does the same thing as reload, in that it ensures that Maya
    will reread the entire source file, rather than rerunning a potentially outdated
    version. This shouldn't matter because it's only necessary if you're making changes
    to the MEL script (and hopefully you're not doing that, use Python instead!) but
    it's a good thing to include just in case.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 源命令与重新加载执行相同的功能，即确保Maya将重新读取整个源文件，而不是重新运行可能过时的版本。这通常不会有什么影响，因为只有在您正在修改MEL脚本时才需要这样做（而且希望您不会这样做，最好使用Python！），但以防万一，包含它是好事。
- en: 'Once we''ve done this, we actually run the MEL script with:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们这样做，我们实际上会使用以下命令运行MEL脚本：
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
