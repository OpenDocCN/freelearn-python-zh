- en: Chapter 1. Getting Started with Maya
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This chapter will cover everything you need to get the most out of the rest
    of the book, as well as give you a feel for the differences between MEL and Python,
    as follows:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: Using the script editor to investigate functionality
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running code from the script editor
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing Maya's built-in Python functionality
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing documentation for a specific command
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding Create, Query, and Edit flags
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding custom folders to your script path
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing and running an external script
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Calling a MEL script with Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we'll cover the basics of scripting with Maya and Python. If
    you've been scripting for Maya for a while, a lot of what's covered will likely
    be familiar. If you're new to Maya scripting, this chapter will get you set up
    with everything you'll need to know to get the most out of the rest of the book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: Using the script editor to investigate functionality
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The script editor is your primary tool in order to learn about Maya's script-based
    functionality, as well as a great place to test small snippets of code outside
    a full script. One of the most useful aspects of the script editor is that it
    will show you the commands that correspond to the actions that you take within
    Maya's interface.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: 'This is one of the best ways to learn about the commands involved in your day-to-day
    Maya tasks. For example, let''s use it to find out how to make a polygonal cube
    with **Maya Embedded Language** (**MEL**):'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the script editor by going to **Windows** | **General Editors** | **Script
    Editor**.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You'll likely note that there is a lot of text already displayed, even if you've
    only recently opened Maya. To make things easier to see, go to **Edit** | **Clear
    History** from within the **Script Editor** window's menu.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now try making a polygon cube by holding down space to bring up the hotbox and
    going to **Create** | **Polygon Primitives** | **Cube**.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use the interactive creation tool to specify the poly cube's dimensions.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Observe the output in the top half of the script editor. You should see something
    like the following:'
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-21
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How it works...
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The output that Maya provides is presented as the MEL commands that correspond
    to the action that you've just taken. That can be a great way to find out which
    commands you'll need to use in your own scripts. In this case, it's the `polyCube`
    command, which will create a polygonal cube. Every command in Maya comes in two
    flavors—the MEL version and the corresponding Python command.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: 'The script editor shows you commands in MEL syntax, which tends to take the
    form of:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The MEL syntax borrows a lot from batch scripting wherein it relies on strings
    of option names (generally referred to as "flags") and corresponding values. The
    corresponding Python command generally has the following syntax:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'As you can see, the MEL and Python versions are fairly similar, but with some
    key differences:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: In the MEL version, flag names are indicated with a dash, and their values follow
    directly after, whereas in Python, options are given with the "optionName=value"
    syntax
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MEL版本中，标志名用破折号表示，其值直接跟在后面，而在Python中，选项使用“optionName=value”语法
- en: Python encloses all the flags in parentheses, whereas MEL does not
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python将所有标志括在括号中，而MEL则不这样做
- en: MEL requires a semicolon (;) at the end of each line, whereas Python does not
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MEL需要在每一行的末尾使用分号（;），而Python则不需要
- en: Another big difference between MEL and Python is how they treat whitespace characters
    (spaces, tabs, and newlines). MEL, like most languages, doesn't care about whitespace;
    statements are terminated with semicolons, and blocks of code are defined with
    matched sets of curly brackets.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: MEL和Python之间另一个很大的区别是它们处理空白字符（空格、制表符和换行符）的方式。MEL，像大多数语言一样，不关心空白字符；语句以分号结束，代码块由匹配的括号对定义。
- en: Python, however, uses whitespace characters to control program flow. This is
    often one of the strangest things about Python to people who are new to the language,
    but not to programming. In Python, blocks of code are defined by indentation.
    You can use either tabs or spaces, but the key thing is that you're consistent.
    In Python, every time you increase the number of tabs (or spaces) at the start
    of a line, it's equivalent to adding an opening curly bracket, and every time
    you decrease that number, it's equivalent to a closing curly bracket. This can
    often be confusing, as the structure of your program is defined by characters
    that may not actually be visible. If you're new to Python and having trouble keeping
    track of your whitespace, you might want to change your editor settings to display
    whitespace characters. Most programmer-friendly text editors include such an option,
    and it can be a big help.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，Python使用空白字符来控制程序流程。这对于初学者来说可能是Python最奇怪的地方之一，但对于编程新手来说则不然。在Python中，代码块是通过缩进来定义的。你可以使用制表符或空格，但关键是要保持一致。在Python中，每次你在行首增加制表符（或空格）的数量，就相当于添加了一个开括号，每次减少这个数量，就相当于添加了一个闭括号。这通常会很令人困惑，因为你的程序结构是由可能实际上看不见的字符定义的。如果你是Python新手并且难以跟踪你的空白字符，你可能想要更改你的编辑器设置以显示空白字符。大多数程序员友好的文本编辑器都包括这样的选项，这可以大有帮助。
- en: The specific list of options for each command can be found in the built-in Python
    documentation, accessible from within Maya by going to **Help** | **Python Command
    Reference**. For most commands, you'll find a long list of options.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 每个命令的具体选项列表可以在内置的Python文档中找到，通过在Maya中转到**帮助** | **Python命令参考**可以访问。对于大多数命令，你都会找到一个长长的选项列表。
- en: To make things even more complicated, every option has both a short name and
    a long name. For example, the polyCube allows you to specify the number of subdivisions
    along the X axis. You can use either the long name, "subdivisionsX" or the short
    name, "sx" to set it.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 要使事情更加复杂，每个选项都有短名和长名。例如，polyCube允许你指定X轴上的细分数量。你可以使用长名“subdivisionsX”或短名“sx”来设置它。
- en: For example, all of the following will result in the creation of a 1x1x1 polygonal
    cube with five subdivisions along the X-axis.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下所有操作都将导致创建一个1x1x1的多边形立方体，X轴上有五个细分。
- en: 'The MEL versions are:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: MEL的版本有：
- en: '[PRE3]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The Python versions are:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: Python的版本有：
- en: '[PRE4]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Feel free to use either the short or long version for your arguments. You can
    also mix and match, using short names for some arguments and long names for others.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 随意使用短版本或长版本来指定你的参数。你也可以混合使用，为一些参数使用短名，为其他参数使用长名。
- en: In practice, it's generally best to use short names for common arguments (ones
    that you're likely to remember) and long names for more obscure / more rarely
    used arguments. Remember that just because your code seems completely sensible
    to you right now, it may look confusing when you revisit it 6 months (or 6 years!)
    from now. Make it easy for your future self by using long names (and including
    comments) when necessary.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在实践中，通常最好为常见的参数（你可能会记住的参数）使用短名，为不太常见/较少使用的参数使用长名。记住，尽管你的代码现在看起来完全合理，但当你6个月（或6年！）后再次查看时，它可能看起来很混乱。通过在必要时使用长名（并包括注释）来简化你未来的工作。
- en: There's more...
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: You may be wondering why Maya offers two different methods for scripting, MEL
    and Python. That's a simple case of backwards compatibility. MEL came first and
    was available in Maya long before Python support was added. Back then, you had
    to use MEL for day-to-day tasks, and if that couldn't provide you with what you
    needed, you had to dive into the C++ API (which was quite involved and hard to
    work with on non-Windows systems). Python unites both approaches, but MEL is still
    supported to allow older scripts to work. It's also possible that you might get
    better performance with MEL than with Python, as the Python functionality is a
    wrapper around MEL. Python is a much nicer language to work with though, so it's
    generally a worthwhile trade-off.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: Note that the script editor doesn't (by default) show you everything that you
    do. Under normal circumstances, Maya shows you a slightly filtered output based
    on what you are most likely to be interested in. This is usually a good thing,
    but there are times when you'll want to disable it. To show *all* the output,
    go to the script editor and select **History** | **Echo all Commands**. This will
    cause Maya to output *everything* to the script editor. This generally means much,
    much more output than you want, but can sometimes be helpful. In practice, you'll
    generally want to leave that option off except when you're trying to replicate
    a given piece of functionality in a script, and the default output isn't giving
    you any insight into what Maya is doing.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have Maya setup to use interactive mode for the creation of primitive
    shapes, you must have seen the following in the output presented in the Script
    Editor:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Contexts are an alternative way of getting input from the user, and we'll have
    more to say about them in [Chapter 10](ch10.html "Chapter 10. Advanced Topics"),
    *Advanced Topics*.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Running code from the script editor
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Not only is the Script Editor a great way to see which commands correspond to
    the actions you take in Maya's UI, but it is also a convenient way to write small
    bits of code. While you will certainly want to use a text editor to write your
    scripts, it is still important to be comfortable using the script editor to run
    small sections of code, either to test it out before inclusion in a larger script
    or to get more information about the current scene.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure that you have the script editor open and that you've switched to the
    Python tab in the input (bottom) section.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-54
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Type the following into the input section:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Once you've done that, execute it by either pressing the Execute button at the
    top of the Script Editor or just by pressing *Control* + *Enter*.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: Your code will disappear from the input section, a new polygon cube will be
    created, and the results will be pasted into the output ("History") section of
    the script editor.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: To keep your code from disappearing automatically, highlight it first with Command-A
    (to select everything), then press *Command* + *Enter*. This will cause Maya to
    run just the selected code without clearing out the input section.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although the `polyCube` command does the actual work, we have to first import
    the Maya library for Python before we can use it. To do this, we have to first
    use `import maya.cmds`.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: The script editor is a great way to try out small snippets of code, but the
    fact that successful code is deleted can get rather frustrating. For any real
    script development, you'll want to use a programmer-friendly text editor.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One handy thing about the script editor is that you can save code from the editor
    to the shelf. To do this, enter some code into the input section, then go to **File**
    | **Save Script to Shelf...** from the **Script Editor** menu. Maya will ask you
    to provide a name for the script and then (after a bit of time), a new button
    will appear in the "Custom" shelf. Pressing that button will execute the corresponding
    code.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Although most of your scripting work will involve writing separate scripts,
    it can sometimes be useful to copy-paste commands from the history (top) section
    of the Script Editor to the input (bottom) section and save it all to the shelf.
    This is a bit like recording an action in Photoshop and can be a quick and dirty
    way to create a new shortcut for commonly used functionality.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: Importing Maya's built-in Python functionality
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python is a really useful language, but it doesn't actually offer that much
    out of the box other than some basic commands for manipulating simple data. In
    order to do truly interesting things, you'll generally need to extend Python's
    built-in functionality with one or more libraries, including the one that provides
    access to Maya's functionality.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s import the main Maya scripting library for Python, `maya.cmds`:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Once we''ve done that, we can use `cmds` instead of `maya.cmds`. For example,
    if we have this code:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We can instead use the following:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: That might seem like a minor change, but in the course of a full script, it
    can save you a great deal of typing. Less typing means fewer typos, so it's well
    worth doing.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: 'Now that we''ve done this, let''s see what cmds has to offer by listing its
    contents. Python offers a handy way to display the contents of any object via
    the `dir()` command. Let''s use that to get a list of all the commands in `maya.cmds`:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Run the preceding code, and you'll see a long list of everything defined in
    the maya.cmds library. This will be an extensive list, indeed. Most of the commands
    you'll see are covered in the official docs, but it's good to know how to use
    dir to investigate a given library.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also use dir to investigate a specific command. For example, try the
    following code:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Run the preceding code, and you'll see all of the properties for the polyCube
    command itself. However, the results will likely look a bit odd in that none of
    them have anything to do with generating a polygonal cube. That's because `maya.cmds.[commandName]`
    is a built-in function. So, if you use `dir()` to investigate it further, you'll
    just see the capabilities that are common to Python functions. For details on
    the specifics of a command, consult the built-in documentation for Maya's commands,
    which can be accessed by going to **Help** | **Maya Scripting Reference** | **Python
    Command Reference**.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like any other specific subdomain of Python functionality, the commands that
    expose Maya's toolset to Python are part of a library. In order to make use of
    them, you have to first import the library. Virtually, every script you write
    will require the "maya.cmds" library, and you will likely need to include additional
    libraries occasionally for additional capabilities, such as communicating with
    a webserver or reading in a particular file format.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: 'Although you could just leave it at `import maya.cmds`, that would require
    a lot of additional typing. By using the `import [library] as [shortName]` syntax,
    you can tell Python to use a custom name as an alias for `maya.cmds`. You could
    use almost any name you want (`import maya.cmds as MyUncleFred` would work just
    fine), but in practice, you want to use something both short and descriptive.
    You''ll also want to make sure that you don''t overwrite any of Python''s built-in
    libraries. For example, you *could* do the following:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This would rename `maya.cmds` as math and cause trouble if you wanted to use
    any of the functions defined in the math library. Don't do that.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: For the sake of this book and consistency with Maya's documentation, we will
    be using "cmds" as the shorthand for "maya.cmds".
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The maya.cmds library is only one of several libraries that can be used to interface
    Maya with Python. One of the great things about Python support in Maya is that
    the old way of doing things, where there was both MEL (for day-to-day tasks) and
    the C++ API (for larger scale plugins), is unified under the banner of Python.
    The `maya.cmds` library handles the MEL component, but for functions previously
    accessed through the C++ API, you'll want to use maya.OpenMaya instead.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: It (maya.cmds) is a lightweight wrapper around the MEL commands that many Maya
    users have grown accustomed to, and it has the benefit of being officially supported
    by Autodesk. However, it is not the only way to access MEL commands. There is
    also a third-party library, PyMEL (accessed by importing `pymel.core`). PyMEL
    has the benefit of being more "Pythonic" and offering nicer syntax, but is not
    directly supported by Autodesk. It also introduces additional layers of abstraction
    on top of the built-in functionality, which can lead to poorer performance.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Accessing documentation for a specific command
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maya is a complex tool, and it offers a wide range of functionality, all of
    it with corresponding commands that can be invoked via scripts. Each command has
    its own set of arguments, ranging from easily understood to quite cryptic.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: When writing scripts for Maya (and as with any other kind of programming), it
    is vital to be able to find the appropriate documentation and to understand how
    to make sense of it.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's say that we want more information on a specific command, say the command
    to create a polygonal cube.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: One way to view the help for the command is to use Maya's web-based command
    help, available by going to **Help** | **Python Command Reference** from within
    Maya. From there, you can either click on the "Polygons" subsection or use the
    search box.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: There are a couple of other ways to get to the documentation for a command,
    though. You can also go directly to the documentation for a command from the Script
    Editor window. First, execute the corresponding action using Maya's interface,
    such as invoking the hotbox and choosing **Create** | **Polygon Primitives** |
    **Cube**.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: That will cause the corresponding MEL command to be displayed in the output
    section of the **Script Editor**, in this case, "polyCube". From within the script
    editor, highlight the relevant line, and go to **Help** | **Help on Selected Command**.
    This will bring up a browser window with the documentation for that command. Note
    that it will default to the MEL version of the command; for the Python version,
    click on the "Python" link in the top-right corner of the window.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can retrieve information about a command via Python directly using
    the help command. Try running the following:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This will result in a list of the flags available for the given command, as
    well as the type of value that Maya expects for each, such as:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This means that there is a flag named "sx" or "subdivisionsX" that expects an
    integer value.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For the most part, you'll want just the Python command reference open in a browser
    window while you work on developing your scripts. Good reference documents are
    key to writing good software, and you should get used to just keeping the references
    close at hand.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also use the help command to invoke the web-based documentation for
    a given command directly, such as:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This would bring up the web page containing the documentation for the Python
    version of the polyCube command. That's definitely a clunky way to access the
    help, but might be useful if you wanted to give the users of your script an easy
    way to refer to relevant documentation directly from your script's user interface.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: Understanding Create, Query, and Edit flags
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One thing that is a bit strange about Maya scripting is that the same command
    can be used in up to three different ways—create, query, and edit modes—with the
    specifics varying for each of the command flags. This is a byproduct of the fact
    that the Python functionality is a wrapper around the older MEL-based scripting
    system, and it can seem a bit confusing when you're getting started. Nevertheless,
    it is important to understand the differences between the three modes and how
    to use them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open up the Python command reference by going to **Help** | **Python Command
    Reference** and navigate to the documentation for the polyCube command.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: Also, be sure to have the script editor open in Maya and be in the Python tab.
    Alternatively, you can run the example commands Maya's command line; just make
    sure that you're running in Python mode rather than MEL (click on **MEL** to switch
    to Python and **Python** to switch back to MEL).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First off, take a look at the Properties column. You''ll see that every flag
    has some combination of "C", "E", "Q", and "M" listed. Those refer to the different
    ways in which a command can be run and have the following meanings:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '**C**: "Create" flag is only relevant when first running the command, such
    as when you initially create a polygonal primitive'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Q**: "Query" flag can be queried after the command has been run and can be
    used to retrieve information about something in the scene'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**E**: "Edit" flag can be edited after the fact'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**M**: "Multiple" flag can be used more than once in a single instance of the
    command (to create specify multiple points when creating a curve, for example)'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For many flags, you'll see a full complement of create, query, and edit, but
    there are generally at least a few flags that aren't accessible for one or more
    of the modes.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how create, edit, and query play out in the case of the polyCube command.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: 'First off, let''s make a new cube and store the result in a variable, so we
    can make use of it later:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Now, let''s change something about the cube, post-creation by using the edit
    mode:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This will cause the cube that we created with the first command to be altered
    from the default (no subdivisions in the *x* axis) to having five.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s use the query mode to store the new number of divisions to a variable:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: You should see "5.0" as the output. Note that even though the number of divisions
    of a polygonal cube must be an integer value, Maya is displaying it as "5.0".
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The important thing to note for the query and edit modes is that you run the
    command as you normally would (`cmds.polyCube`, for example), but with the following
    three key differences:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: The inclusion of the name of the object as the first argument. This can either
    be the name directly as a string `("pCube1"`, for example), or a variable.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The inclusion of either `edit=True` or `query=True` as an argument.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Additional arguments, with the specifics based on whether you're running the
    command in the query or edit mode.
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the edit mode, you'll want to specify the name of the property you want
    to change, along with the new value. For the query mode, you'll want to just include
    the name of the property and "=True". Think of this as saying that it is `True`
    that you want to know the value of the property. Note that you can only query
    a single flag at a time. If you need to query multiple values, run the command
    multiple times, changing the flag you pass in.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although many of the most-used properties can be used in all three modes, there
    are numerous examples of ones that cannot be, mainly because it wouldn't make
    sense to do so. For example, it's perfectly reasonable to set construction history
    on or off when creating a new object, and it's certainly reasonable to query that
    after the fact, but what would it mean to use the edit mode to enable construction
    history on an object that didn't already have it? That would require rebuilding
    the history of the object, which may have been manipulated in various ways since
    it was created. As a result, the "constructionHistory" (or "ch") flag only offers
    the Create and Query options.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: You might think that this is all a bit clunky, and if all we wanted to do was
    set the number of subdivisions for a newly created cube, you would be correct.
    However, it's important to understand the different command modes, both to get
    information after the fact and because it's an important part of building user
    interface elements and getting information from them.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: See also
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We'll be making the extensive use of the Query mode to retrieve information
    from user interface elements throughout the rest of the book, starting in [Chapter
    2](ch02.html "Chapter 2. Creating User Interfaces"), *Creating User Interfaces*.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: Adding custom folders to your script path
  id: totrans-142
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In order to write reusable scripts, you'll want to save your scripts to external
    files, and in order to do *that*, you'll need to make sure that Maya knows where
    they are.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Maya maintains a list of locations to search for scripts, used when you use
    the import (Python) or source (MEL) commands. If you want to see the full list,
    you can do so with the following code:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'This will provide you with a list of paths, including the following:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Saving your scripts to any of those folders will allow Maya to find them. If
    you're fine with saving all of your scripts to one of those folders, that's totally
    fine.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: 'However, you might want to add additional folders to the list. For example,
    you might want to save your scripts in a folder within the my `Documents` directory,
    maybe something like:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Note that this is a typical example on Macintosh. On a Windows machine, it
    would look more like:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Either way, we'll need to tell Maya to look there to find scripts to execute.
    There are a few ways we could do it, but in keeping with the theme of the book,
    we'll do it using Python.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following code in the script editor:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: This is done by replacing `/Users/adrian/Documents/MayaScripting/examples` with
    whatever folder you want to use.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: Once you've done this, you'll be able to import scripts stored in that directory
    as well. However, having to enter the preceding code every time you launch Maya
    would be quite frustrating. Luckily, Maya provides a way for us to execute custom
    Python code on a startup.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'To make the code execute every time Maya opens, save it to a file named `userSetup.py`
    and save it to the following location for a Mac:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Or for Windows, you can save it to:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: How it works...
  id: totrans-163
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All of the code contained in `userSetup.py` will be run every time Maya starts
    up.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: While the base list of paths that Maya will search for scripts is not altered
    by the above, it will cause Maya to add your custom folder to the list every time
    it starts up, which in practice amounts to the same thing.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can also add to your paths by creating the Maya.env file and saving it
    to the following location (on a Mac machine):'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: or
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'On a Windows machine, save it to:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: or
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: For the specifics of the `Maya.env` file syntax, consult Maya's documentation.
    However, editing `Maya.env` can lead to crashes and system instability if you're
    not careful, so I recommend relying on `userSetup.py` instead.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Writing and running an external script
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we'll be writing and running our first actual script as an external
    Python file.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Script Editor window is a bit of a misnomer. Although it's a great way to
    test out short snippets of code, it's awkward to use for any kind of real script
    development. For this, you'll want to have a programmer-friendly text editor setup.
    There are a ton of options out there, and if you're reading this book, you likely
    already have one that you like to use. Whatever it is, make sure that it's geared
    towards writing code, and it saves files in plain text.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First off, we''ll need a script. Create a new file in your editor and add the
    following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Now save the script as `myScript.py`. Once you''ve done that, switch back to
    Maya and run the following from either the script editor or the command line:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'This will cause Maya to read in the file, and you''ll see the following in
    the script editor output:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: What you will not see, however, is a new cube. That's because the real functionality
    of our (simple) script is defined within a function named "makeObject".
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: 'Maya treats each Python file that you import as its own module, with the name
    of the file providing the name of the module. Once we''ve imported a file, we
    can invoke functions within it by calling [moduleName].[function name]. For the
    earlier-mentioned example, this would mean:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: Run it, and you should see a newly minted cube show up, and "Made a cube!" in
    the output of the Script Editor.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s try changing our script. First, delete the cube we just made, then
    switch over to your text editor, and change the script to the following:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Switch back to Maya and run the script again with:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'You''ll see that rather than having a nice sphere, we still ended up with a
    cube. That''s because when you ask Maya to execute a script that it has already
    executed, it will default to rerunning the same code that it ran previously. In
    order to ensure that we get the latest, greatest version of our script, we''ll
    need to first run the following:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This will force Maya to reload the file. Note that the argument to reload isn't
    the file name itself (`myScript.py` in this case), but rather the name of the
    module that the file defines ("myScript").
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you''ve done this, you can once again try:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-199
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: This time, you'll see a proper polygonal sphere, just as we intended.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It may seem like an unnecessary extra step to both import the script and call
    one of its functions, and you can indeed have the script automatically execute
    code (as demonstrated by the call to print("Imported Script!"). However, it's
    much better practice to wrap all of your functionality in functions, as it makes
    large scripts much easier to work with.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have functionality that you want to execute every time the script is
    run, it is best to define a function with a name like "main" and have the last
    line of your script invoke it. Take a look at the following example:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: This would define the `makeObject()` function, then (on the last line of the
    script) cause it to be executed.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'When working on a script, it can get really tedious to reload, import, and
    run the script each time. An easy way to get around that is to enter the following
    into the script editor:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: Once you've done that, use **File** | **Save Script to Shelf...** to give yourself
    a button to easily rerun the latest version of your script. Note that the preceding
    code contains both import and reload. That's to make sure that the code will work
    both the first time you run it as well as successive times. The "import" command
    is there to ensure the module has been loaded at least once (necessary for a new
    script, or upon restarting Maya), and the "reload" command is there to ensure
    that what we're running is the latest version (necessary if we've made changes
    to the script with Maya still up).
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have a script that defines a lot of functionality, and you don''t want
    to constantly type out the module name, you can use the same trick we used with
    `maya.cmds` to shorten things a bit. Namely, you can use the "as" syntax to provide
    a shorter name. For example, I could have done the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This would have exactly the same effect.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: Calling a MEL script with Python
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Maya offers two different languages with which to create custom functionality
    via scripting—both Maya Embedded Language (MEL) scripts and Python. In practice,
    you'll only want to use one, and of the two, Python offers a much better and more
    flexible experience.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: However, it is not uncommon to have legacy scripts that were written back before
    Maya added Python functionality. While the "right" solution would be to rewrite
    the scripts using Python, there's not always enough time to do so. In those cases,
    it can sometimes be helpful to be able to call out to legacy, MEL-based functionality
    from within your Python scripts.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although Python is definitely the better way to create new functionality, it
    may sometimes be the case that you have older scripts that were written in MEL
    that you would like to incorporate.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: The best option is to rewrite the script in Python, but if the script is complex
    or you don't have time, it may be easier to just invoke the MEL functionality
    from within a Python script. This way, you can incorporate legacy functionality
    without completely reinventing the wheel.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For this recipe, you''ll need the MEL script. If you don''t have one handy,
    open up a new file and enter the following:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Save this as `myMELScript.mel` in your `maya/scripts` directory. Although we
    won't be going into the details of MEL, do note that the file has the same name
    as the function that we're defining. Most MEL scripts will follow that convention.
    Also note the inclusion of semicolons after the end of each line. Although Python
    doesn't require them, MEL (and many other languages) does.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have that, create a new file and name it `runMEL.py`. Enter the following:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'Save the script and run it with:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Because the last line of our script invokes the runMEL command, it will automatically
    take effect. You should see a new cube, as well as the following output in the
    Script Editor:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: How it works...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we imported both maya.cmds and maya.mel. The maya.mel library
    provides support to interface Python with MEL, with one of its most useful commands
    being the eval function, which takes an arbitrary string and attempts to run it
    as an MEL command. In the earlier example, we do that twice, with the first command
    being:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: The source command does the same thing as reload, in that it ensures that Maya
    will reread the entire source file, rather than rerunning a potentially outdated
    version. This shouldn't matter because it's only necessary if you're making changes
    to the MEL script (and hopefully you're not doing that, use Python instead!) but
    it's a good thing to include just in case.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'Once we''ve done this, we actually run the MEL script with:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
