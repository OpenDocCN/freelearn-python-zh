- en: '1'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First Steps with FastAPI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Welcome to the exciting world of **FastAPI**, a modern, high-performance framework
    for building APIs and web applications in **Python**. This first chapter is your
    gateway to understanding and harnessing the power of FastAPI. Here, you’ll take
    your initial steps into setting up your development environment, creating your
    very first FastAPI project, and exploring its fundamental concepts.
  prefs: []
  type: TYPE_NORMAL
- en: FastAPI stands out for its speed, ease of use, and comprehensive documentation,
    making it a preferred choice for developers looking to build scalable and efficient
    web applications. In this chapter, you’ll practically engage in setting up FastAPI,
    learning how to navigate its architecture, and understanding its core components.
    You’ll gain hands-on experience by defining simple API endpoints, handling HTTP
    methods, and learning about request and response handling. These foundational
    skills are crucial for any developer stepping into the world of modern web development
    with FastAPI.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a solid understanding of FastAPI’s
    basic structure and capabilities. You’ll be able to set up a new project, define
    API endpoints, and have a grasp on handling data with FastAPI. This knowledge
    sets the stage for more advanced topics and complex applications you’ll encounter
    as you progress through the book.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’re going to cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your development environment
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new FastAPI project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding FastAPI basics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining your first API endpoint
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with path and query parameters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining and using request and response models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling errors and exceptions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each recipe is designed to provide you with practical knowledge and direct experience,
    ensuring that by the end of this chapter, you’ll be well equipped to start building
    your own FastAPI applications.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To embark on your journey with FastAPI, you’ll need to set up an environment
    that supports Python development and FastAPI’s functionalities. Here’s a list
    of the technical requirements and installations needed for this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python**: FastAPI is built on Python, so you’ll need a Python version compatible
    with your FastAPI version. You can download the latest version of it from [python.org](http://python.org).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pip`, Python’s package manager. You can do it by running `pip install fastapi`
    from the command terminal.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pip` `install uvicorn`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Integrated development environment (IDE)**: An IDE such as **Visual Studio
    Code** (**VS Code**), PyCharm, or any other IDE that supports Python development
    will be necessary for writing and testing your code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Postman or Swagger UI**: For testing API endpoints. FastAPI automatically
    generates and hosts Swagger UI, so you can use it right out of the box.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git**: Version control is essential, and Git is a widely used system. If
    not already installed, you can get it from [git-scm.com](http://git-scm.com).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**GitHub account**: A GitHub account is required to access the code repositories.
    Sign up at [github.com](http://github.com) if you haven’t already.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The code used in the chapter is available on GitHub at the following address:
    [https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter01](https://github.com/PacktPublishing/FastAPI-Cookbook/tree/main/Chapter01).
    You can clone or download the repository at [https://github.com/PacktPublishing/FastAPI-Cookbook](https://github.com/PacktPublishing/FastAPI-Cookbook)
    to follow along on your local machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your development environment
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This recipe, dedicated to setting up your development environment, is a critical
    foundation for any successful project in web development. Here, you’ll learn how
    to install and configure all the essential tools needed to start building with
    FastAPI.
  prefs: []
  type: TYPE_NORMAL
- en: We begin by guiding you through the installation of Python, the core language
    behind FastAPI. Next, we’ll move on to installing FastAPI itself, along with Uvicorn,
    a lightning-fast ASGI server, which serves as the bedrock for running your FastAPI
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up an IDE is our next stop. Whether you prefer VS Code, PyCharm, or
    any other Python-friendly IDE, we’ll provide tips to make your development process
    smoother and more efficient.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we’ll introduce you to Git and GitHub – indispensable tools for version
    control and collaboration in modern software development. Understanding how to
    use these tools will not only help you manage your code effectively but also open
    doors to the vast world of community-driven development and resources.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FastAPI works with Python, so you need to check your Python version before using
    it. This is an important step for setting up FastAPI. We will guide you through
    how to install it.
  prefs: []
  type: TYPE_NORMAL
- en: Windows installation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'If you work on Windows, follow these steps to install Python:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Visit the official Python website: [python.org](http://python.org).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Download the latest version of Python or any other version higher than 3.9.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Run the installer. Ensure to check the box that says **Add Python to PATH**
    before clicking **Install Now**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After the installation, open Command Prompt and type `python --version` to confirm
    the installation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: macOS/Linux installation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: macOS usually comes with Python pre-installed; however, it might not be the
    latest version.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use `Homebrew` (a package manager for macOS). To install it, open the
    terminal and run it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can install Python – still from the terminal – with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux, you can install Python using the package manager by running the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: That’s all you need to install Python on macOS and Linux systems.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the installation
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'You can then check that Python is correctly installed by running the following
    command in the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'If you installed it on Linux, the binary command is `python3`, so you can check
    that Python is correctly installed by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Once Python is installed, we want to make sure that the Python’s package manager
    is correctly installed. It comes with Python’s installation, and it’s called `pip`.
  prefs: []
  type: TYPE_NORMAL
- en: 'From a terminal window, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'On Linux, run the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Once Python is installed on your computer, you can now consider installing FastAPI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When you have Python and `pip` ready, we can continue with installing FastAPI,
    the IDE. Then, we will configure Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will do it by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Installing FastAPI and Uvicorn
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up your IDE (VS Code or PyCharm)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Setting up Git and GitHub to track your project
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Installing FastAPI and Uvicorn
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: With Python set up, the next step is installing FastAPI and Uvicorn. FastAPI
    is the framework we’ll use to build our applications, and Uvicorn is an ASGI server
    that runs and serves our FastAPI applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open your command-line interface and install FastAPI and Uvicorn together by
    running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: This command installs FastAPI along with its recommended dependencies, including
    Uvicorn.
  prefs: []
  type: TYPE_NORMAL
- en: To verify the installation, you can simply run `uvicorn --version` from the
    terminal.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your IDE
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choosing the right IDE is a crucial step in your FastAPI journey. An IDE is
    more than just a text editor; it’s a space where you write, debug, and test your
    code.
  prefs: []
  type: TYPE_NORMAL
- en: A good IDE can significantly enhance your coding experience and productivity.
    For FastAPI development and Python in general, two popular choices are VS Code
    and PyCharm.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**VS Code** is a free, open source, lightweight IDE with powerful features.
    It offers excellent Python support and is highly customizable.'
  prefs: []
  type: TYPE_NORMAL
- en: You can download and install VS Code from the official website (`code.visualstudio.com`).
    The installation is quite straightforward. Once installed, open VS Code, go to
    `python`. Install the Microsoft version, and that is it.
  prefs: []
  type: TYPE_NORMAL
- en: PyCharm
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: '**PyCharm**, created by JetBrains, is specifically tailored for Python development.
    It offers a broad range of tools for professional developers, including excellent
    support for web development frameworks such as FastAPI.'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can choose between a Community free edition and a Professional paid version.
    For the scope of the book, the Community Edition is largely sufficient, and it
    can be downloaded on the JetBrains website: [https://www.jetbrains.com/pycharm/download/](https://www.jetbrains.com/pycharm/download/).'
  prefs: []
  type: TYPE_NORMAL
- en: For PyCharm as well, the installation is straightforward.
  prefs: []
  type: TYPE_NORMAL
- en: Enhancing your development experience
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'For both IDEs – and if you use another of your choice – make sure to leverage
    basic perks to improve your experience as a developer and be more efficient. Here
    is a short checklist that I use when I approach a new IDE environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Code completion and analysis**: Good IDEs provide intelligent code completion,
    error highlighting, and fixes, which are invaluable for efficient development'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugging tools**: Utilize debugging features provided by the IDE to diagnose
    and resolve issues in your code'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Version control integration**: A good IDE offers support for Git, simplifying
    code change tracking and repository management'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Customization**: Customize your IDE by adjusting themes, key binding, and
    settings to match your workflow, making your development experience as comfortable
    and productive as possible'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Git and GitHub
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Version control is an essential aspect of software development. Git, coupled
    with GitHub, forms a powerful toolset for tracking changes, collaborating, and
    maintaining the history of your projects. You can download the Git installer from
    the official website [git-scm.com](http://git-scm.com) and install it.
  prefs: []
  type: TYPE_NORMAL
- en: 'After installation, configure Git with your username and email using the following
    commands in the command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: GitHub is the platform chosen to store code examples used in the book. Sign
    up for a GitHub account at [github.com](http://github.com) if you don’t already
    have one.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new FastAPI project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Setting up a well-organized project structure is crucial for maintaining a clean
    code base, especially as your application grows and evolves. This recipe will
    guide you on how to create your first basic FastAPI project. A structured project
    simplifies navigation, debugging, and collaboration. For FastAPI, following best
    practices in structuring can significantly enhance scalability and maintainability.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All you need to do to follow the recipe is make sure that you have your development
    environment set up.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We begin by making a project folder named `fastapi_start` that we’ll use as
    the root project folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the terminal at the root project folder level, we’ll set up our virtual
    environment by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you need to activate the environment. If you are on Mac or Linux, run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, you can install the `fastapi` package with `uvicorn` in your environment
    by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This file is where your FastAPI application begins. Start by writing the import
    of the `FastAPI` module. Then, create an instance of the `FastAPI` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This instance houses the code of your application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, define your first route. Routes in FastAPI are like signposts that direct
    requests to the appropriate function. Start with a simple route that returns a
    greeting to the world:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You’ve just created the code for your first FastAPI application.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you want to track the project, you can set up Git as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In your project’s root directory, open a terminal or Command Prompt and run
    the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add your files with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, commit them using the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And that's it. You are now tracking your project with Git.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A well-structured project is not just about neatness; it’s about creating a
    sustainable and scalable environment where your application can grow and evolve.
    In FastAPI, this means organizing your project in a way that separates different
    aspects of your application logically and efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no unique and perfect structure for a FastAPI project; however, a
    common approach is to divide your project into several key directories:'
  prefs: []
  type: TYPE_NORMAL
- en: '`/src`: This is where your primary application code lives. Inside `/src`, you
    might have subdirectories for different modules of your application. For instance,
    you could have a `models` directory for your database models, a `routes` directory
    for your FastAPI routes, and a `services` directory for business logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/tests`: Keeping your tests separate from your application code is a good
    practice. It makes it easier to manage them and ensures that your production builds
    don’t include test code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/docs`: Documentation is crucial for any project. Whether it’s API documentation,
    installation guides, or usage instructions, having a dedicated directory for documentation
    helps maintain clarity.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can find detailed information on how to manage virtual environments with
    `venv` at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Creation of virtual* *environments*: [https://docs.python.org/3/library/venv.xhtml](https://docs.python.org/3/library/venv.xhtml)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To brush up your knowledge with Git and get familiar with adding, staging and
    commiting operations, have a look at this guide:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Git simple* *guide*: [https://rogerdudler.github.io/git-guide/](https://rogerdudler.github.io/git-guide/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding FastAPI basics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we embark on our journey with FastAPI, it’s essential to build a solid foundation.
    FastAPI isn’t just another web framework; it’s a powerful tool designed to make
    your life as a developer easier, your applications faster, and your code more
    robust and maintainable.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we’ll demystify the core concepts of FastAPI, delve into its
    unique features such as asynchronous programming, and guide you through creating
    and organizing your first endpoints. By the end of the recipe, you’ll have your
    first FastAPI server up and running – a milestone that marks the beginning of
    an exciting journey in modern web development.
  prefs: []
  type: TYPE_NORMAL
- en: FastAPI is a modern, fast web framework for building APIs with Python based
    on standard Python type hints.
  prefs: []
  type: TYPE_NORMAL
- en: 'Key features that define FastAPI are the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Speed**: It’s one of the fastest frameworks for building APIs in Python,
    thanks to its underlying Starlette framework for web parts and Pydantic for data
    handling'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ease of use**: FastAPI is designed to be easy to use, with intuitive coding
    that accelerates your development time'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic documentation**: With FastAPI, the API documentation is generated
    automatically, a feature that is both a time-saver and a boon for developers'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will now explore how to use those features effectively with some general
    guidance.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will go through the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Applying asynchronous programming to our existing endpoints to improve time
    efficiency
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring routers and endpoints to better organize large code bases
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running your first FastAPI server with a basic configuration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the automatic documentation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Applying asynchronous programming
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: One of the most powerful features of FastAPI is its support for asynchronous
    programming. This allows your applications to handle more requests simultaneously,
    making them more efficient. Asynchronous programming is a style of concurrent
    programming in which tasks are executed without blocking the execution of other
    tasks, improving the overall performance of your application. To integrate asynchronous
    programming smoothly, FastAPI leverages the `async`/`await` syntax ([https://fastapi.tiangolo.com/async/](https://fastapi.tiangolo.com/async/))
    and automatically integrates asynchronous functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, the `read_root()` function in `main.py` from the previous code snippet
    in the *Creating a new FastAPI project* recipe can be written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the behavior of the code will be exactly the same as before.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring routers and endpoints
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In FastAPI, organizing your code into routers and endpoints is a fundamental
    practice. This organization helps in making your code cleaner and more modular.
  prefs: []
  type: TYPE_NORMAL
- en: Endpoints
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Endpoints are the points at which API interactions happen. In FastAPI, an endpoint
    is created by decorating a function with an HTTP method, such as `@app.get("/")`.
  prefs: []
  type: TYPE_NORMAL
- en: This signifies a `GET` request to the root of your application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In this snippet, we define an endpoint for the root URL (`"/"`). When a `GET`
    request is made to this URL, the `read_root` function is invoked, returning a
    JSON response.
  prefs: []
  type: TYPE_NORMAL
- en: Routers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: When we need to handle multiple endpoints that are in different files, we can
    benefit from using routers. Routers assist us in grouping our endpoints into different
    modules, which makes our code base easier to maintain and understand. For example,
    we could use one router for operations related to users and another for operations
    related to products.
  prefs: []
  type: TYPE_NORMAL
- en: 'To define a router, first create a new file in the `fastapi_start` folder called
    `router_example.py`. Then, create the router as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now reuse it and attach the router to the FastAPI server instance in
    `main.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You now have the code to run the server that includes the router for the `GET
    /items` endpoint importer from another module.
  prefs: []
  type: TYPE_NORMAL
- en: Running your first FastAPI server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To run your FastAPI application, you need to point Uvicorn to your app instance.
    If your file is named `main.py` and your FastAPI instance is called `app`, you
    can start your server like this at the `fastapi_start` folder level:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: The `--reload` flag makes the server restart after code changes, making it ideal
    for development.
  prefs: []
  type: TYPE_NORMAL
- en: Once the server is running, you can access your API at `http://127.0.0.1:8000`.
    If you visit this URL in your browser, you’ll see the JSON response from the `"/"`
    endpoint we have just created.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the automatic documentation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'One of the most exciting features of FastAPI is its automatic documentation.
    When you run your FastAPI application, two documentation interfaces are automatically
    generated: **Swagger UI** and **Redoc**.'
  prefs: []
  type: TYPE_NORMAL
- en: You can access these at `http://127.0.0.1:8000/docs` for Swagger UI and `http://127.0.0.1:8000/redoc`
    for Redoc.
  prefs: []
  type: TYPE_NORMAL
- en: These interfaces provide an interactive way to explore your API and test its
    functionality.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can discover more about what we covered in the recipe at the following
    links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*First* *Steps*: [https://fastapi.tiangolo.com/tutorial/first-steps/](https://fastapi.tiangolo.com/tutorial/first-steps/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Docs* *URLs*: [https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls](https://fastapi.tiangolo.com/tutorial/metadata/#docs-urls)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Concurrency and async /* *await*: [https://fastapi.tiangolo.com/async/](https://fastapi.tiangolo.com/async/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining your first API endpoint
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have a fundamental grasp of FastAPI and your development environment
    is all set up, it’s time to take the next thrilling step: creating your first
    API endpoint.'
  prefs: []
  type: TYPE_NORMAL
- en: This is where the real magic of FastAPI begins to shine. You’ll see how effortlessly
    you can build a functional API endpoint, ready to respond to HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, you will create a basic draft of a backend service for a bookstore.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Make sure you know how to start a basic FastAPI project from the *Creating a
    new FastAPI* *project* recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In the realm of web APIs, the `GET` request is perhaps the most common. It’s
    used to retrieve data from the server. In FastAPI, handling a `GET` request is
    simple and intuitive. Let’s create a basic `GET` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: 'Imagine you’re building an API for a bookstore. Your first endpoint will provide
    information about a book when given its ID. Here’s how you do it:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new `bookstore` folder that will contain the code you are going to
    write.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create in it a `main.py` file containing the server instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, the `@app.get("/books/{book_id}")` decorator
    tells FastAPI that this function will respond to `GET` requests at the `/books/{book_id}`
    path. `{book_id}` in the path is a path parameter, which you can use to pass values
    dynamically. FastAPI automatically extracts the `book_id` parameter and passes
    it to your function.
  prefs: []
  type: TYPE_NORMAL
- en: Type hints and automatic data validation
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice the use of type hints (`book_id: int`). FastAPI uses these hints to
    perform data validation. If a request is made with a non-integer `book_id` parameter,
    FastAPI automatically sends a helpful error response.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With your `GET` endpoint defined, run your FastAPI application using Uvicorn,
    just as you did previously:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: On the terminal, you can read the message logs describing that the server is
    running on port `8000`.
  prefs: []
  type: TYPE_NORMAL
- en: One of FastAPI’s most beloved features is its automatic generation of interactive
    API documentation using Swagger UI. This tool allows you to test your API endpoints
    directly from your browser without writing any additional code, and you can directly
    check the presence of the newly created endpoint in it.
  prefs: []
  type: TYPE_NORMAL
- en: Using Swagger UI
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To test your new `GET` endpoint, navigate to `http://127.0.0.1:8000/docs` in
    your browser. This URL brings up the Swagger UI documentation for your FastAPI
    application. Here, you’ll see your `/books/{book_id}` endpoint listed. Click on
    it, and you’ll be able to execute a test request right from the interface. Try
    inputting a book ID and see the response your API generates.
  prefs: []
  type: TYPE_NORMAL
- en: Postman – a versatile alternative
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While Swagger UI is convenient for quick tests, you might want to use a more
    robust tool such as Postman for more complex scenarios. Postman is an API client
    that lets you build, test, and document your APIs more extensively.
  prefs: []
  type: TYPE_NORMAL
- en: To use Postman, download and install it from Postman’s website ([https://www.postman.com/downloads/](https://www.postman.com/downloads/)).
  prefs: []
  type: TYPE_NORMAL
- en: Once installed, create a new request. Set the method to `GET` and the request
    URL to your FastAPI endpoint, `http://127.0.0.1:8000/books/1`. Hit **Send**, and
    Postman will display the response from your FastAPI server.
  prefs: []
  type: TYPE_NORMAL
- en: Working with path and query parameters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the most crucial aspects of API development is handling parameters. Parameters
    allow your API to accept input from users, making your endpoints dynamic and responsive.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will explore how to capture and handle path, query parameters,
    and test them efficiently, enhancing the flexibility and functionality of your
    FastAPI applications.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To follow the recipe, make sure you know how to create a basic endpoint from
    the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Path parameters are parts of the URL that are expected to change. For instance,
    in an endpoint such as `/books/{book_id}`, `book_id` is a path parameter. FastAPI
    allows you to capture these parameters effortlessly and use them in your function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s expand our bookstore API with a new endpoint that uses path parameters.
    This time, we’ll create a route to get information about a specific author:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The name will not change; however, the `author_id` value will be the one provided
    by the query request.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Query parameters are used to refine or customize the response of an API endpoint.
    They can be included in the URL after a question mark (`?`). For instance, `/books?genre=fiction&year=2010`
    might return only books that fall under the fiction genre released in 2010.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Let’s add query parameters to our existing endpoint. Suppose we want to allow
    users to filter books by their publication year:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, `year` is an optional query parameter. By assigning `None` as a default
    value, we make it optional. If a year is specified, the endpoint returns books
    from that year; otherwise, it returns all books.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise
  prefs: []
  type: TYPE_NORMAL
- en: Using the `APIRouter` class, refactor each endpoint in a separate file and add
    the route to the FastAPI server.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, from the command terminal, spin up the server with Uvicorn by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: Testing endpoints with path parameters can be done using Swagger UI or Postman,
    similar to how we tested our basic `GET` endpoint.
  prefs: []
  type: TYPE_NORMAL
- en: In Swagger UI, at `http://localhost:8000/docs`, navigate to your `/authors/{author_id}`
    endpoint. You’ll notice that it prompts you to enter an `author_id` value before
    you can try it out. Enter a valid integer and execute the request. You should
    see a response with the author’s information.
  prefs: []
  type: TYPE_NORMAL
- en: The `GET /books` endpoint will now show an optional field for the `year` query
    parameter. You can test it by entering different years and observing the varying
    responses.
  prefs: []
  type: TYPE_NORMAL
- en: If you use Postman instead, create a new `GET` request with the `http://127.0.0.1:8000/authors/1`
    URL. Sending this request should yield a similar response.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Postman, append the query parameter to the URL like so: `http://127.0.0.1:8000/books?year=2021`.
    Sending this request should return books published in the year 2021.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can find more about path and query parameters in the FastAPI official documentation
    at the following links:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Path* *Parameters*: [https://fastapi.tiangolo.com/tutorial/path-params/](https://fastapi.tiangolo.com/tutorial/path-params/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Query* *Parameters*: [https://fastapi.tiangolo.com/tutorial/query-params/](https://fastapi.tiangolo.com/tutorial/query-params/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining and using request and response models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the world of API development, data handling is a critical aspect that determines
    the robustness and reliability of your application. FastAPI simplifies this process
    through its seamless integration with **Pydantic**, a data validation and settings
    management library using Python type annotations. The recipe will show you how
    to define and use request and response models in FastAPI, ensuring your data is
    well structured, validated, and clearly defined.
  prefs: []
  type: TYPE_NORMAL
- en: Pydantic models are a powerful feature for data validation and conversion. They
    allow you to define the structure, type, and constraints of the data your application
    handles, both for incoming requests and outgoing responses.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will see how to use Pydantic to ensure that your data conforms
    to the specified schema, providing an automatic layer of safety and clarity.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe requires you to know how to set up a basic endpoint in FastAPI.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will break the process into the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the model
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Defining the request body
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Validating request data
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Managing response formats
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Creating the model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Let’s create a Pydantic `BaseModel` class for our bookstore application in a
    new file called `models.py`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose we want to have a model for a book that includes the title, author,
    and publication year:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, `Book` is a Pydantic `BaseModel` class with three fields: `title`, `author`,
    and `year`. Each field is typed, ensuring that any data conforming to this model
    will have these attributes with the specified data types.'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the request body
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In FastAPI, Pydantic models are not just for validation. They also serve as
    the request body. Let’s add an endpoint to our application where users can add
    new books:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: In this endpoint, when a user sends a `POST` request to the `/book` endpoint
    with JSON data, FastAPI automatically parses and validates it against the `Book`
    model. If the data is invalid, the user gets an automatic error response.
  prefs: []
  type: TYPE_NORMAL
- en: Validating request data
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Pydantic offers advanced validation features. For instance, you can add regex
    validations, default values, and more:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'For an exhaustive list of validation features, have a look at Pydantic’s official
    documentation: [https://docs.pydantic.dev/latest/concepts/fields/](https://docs.pydantic.dev/latest/concepts/fields/).'
  prefs: []
  type: TYPE_NORMAL
- en: Next, you can proceed to manage the response format.
  prefs: []
  type: TYPE_NORMAL
- en: Managing response formats
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: FastAPI allows you to define response models explicitly, ensuring that the data
    returned by your API matches a specific schema. This can be particularly useful
    for filtering out sensitive data or restructuring the response.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, let’s say you want the `/allbooks` `GET` endpoint to return a
    list of books, but only with their titles and authors, omitting the publication
    year. In `main.py`, add the following accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, the `-> list[BookResponse]` function type hint tells FastAPI to use the
    `BookResponse` model for responses, ensuring that only the title and author fields
    are included in the response JSON. Alternatively, you can specify the response
    type in the endpoint decorator’s arguments as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The `response_model` argument takes priority and can be used instead of the
    type hint to resolve type checker issues that may occur.
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the documentation at `http://127.0.0.1:8000/docs`. Unroll the `/allbooks`
    endpoint details, and you will notice the example value response based on the
    schema as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: By mastering Pydantic models in FastAPI, you are now capable of handling complex
    data structures with ease and precision. You’ve learned to define request bodies
    and manage response formats, ensuring data consistency and integrity throughout
    your application.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Pydantic** is a standalone project largely used for data validation in Python
    with many more features than what the recipe has shown. Feel free to have a look
    at the official documentation at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Pydantic*: [https://docs.pydantic.dev/latest/](https://docs.pydantic.dev/latest/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see more on response model usage at the FastAPI official documentation
    link:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Response Model - Return* *Type*: [https://fastapi.tiangolo.com/tutorial/response-model/](https://fastapi.tiangolo.com/tutorial/response-model/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handling errors and exceptions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Error handling is an essential aspect of developing robust and reliable web
    applications. In FastAPI, managing errors and exceptions is not just about catching
    unexpected issues but also about proactively designing your application to respond
    to various error scenarios gracefully.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe will guide you through custom error handling, validating data and
    handling exceptions, and testing these scenarios to ensure your FastAPI applications
    are resilient and user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: FastAPI provides built-in support for handling exceptions and errors.
  prefs: []
  type: TYPE_NORMAL
- en: When an error occurs, FastAPI returns a JSON response containing details about
    the error, which is very useful for debugging. However, there are situations where
    you might want to customize these error responses for better user experience or
    security.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s create a custom error handler that catches a specific type of error and
    returns a custom response. For instance, if a requested resource is not found,
    you might want to return a more friendly error message.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do it, in the `main.py` file, add the following code accordingly:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In this example, the `http_exception_handler` function will be used to handle
    `HTTPException` errors. Whenever an `HTTPException` error is raised anywhere in
    your application, FastAPI will use this handler to return a custom response.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can test the response by creating a new endpoint that raises an HTTP exception:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The endpoint will explicitly throw the HTTP error response to showcase the customized
    message defined in the previous step.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, spin the server from the command line with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"message": "Oops! Something went wrong"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: import json
  prefs: []
  type: TYPE_NORMAL
- en: from fastapi import Request, status
  prefs: []
  type: TYPE_NORMAL
- en: from fastapi.exceptions import RequestValidationError
  prefs: []
  type: TYPE_NORMAL
- en: from fastapi.responses import PlainTextResponse
  prefs: []
  type: TYPE_NORMAL
- en: '@app.exception_handler(RequestValidationError)'
  prefs: []
  type: TYPE_NORMAL
- en: async def validation_exception_handler(
  prefs: []
  type: TYPE_NORMAL
- en: 'request: Request,'
  prefs: []
  type: TYPE_NORMAL
- en: 'exc: RequestValidationError'
  prefs: []
  type: TYPE_NORMAL
- en: '):'
  prefs: []
  type: TYPE_NORMAL
- en: return PlainTextResponse(
  prefs: []
  type: TYPE_NORMAL
- en: '"This is a plain text response:"'
  prefs: []
  type: TYPE_NORMAL
- en: f" \n{json.dumps(exc.errors(), indent=2)}",
  prefs: []
  type: TYPE_NORMAL
- en: status_code=status.HTTP_400_BAD_REQUEST,
  prefs: []
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'This is a plain text response:'
  prefs: []
  type: TYPE_NORMAL
- en: '['
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"type": "string_type",'
  prefs: []
  type: TYPE_NORMAL
- en: '"loc": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"body",'
  prefs: []
  type: TYPE_NORMAL
- en: '"author"'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"msg": "Input should be a valid string",'
  prefs: []
  type: TYPE_NORMAL
- en: '"input": 3,'
  prefs: []
  type: TYPE_NORMAL
- en: '"url": "https://errors.pydantic.dev/2.5/v/string_type"'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: '"type": "greater_than",'
  prefs: []
  type: TYPE_NORMAL
- en: '"loc": ['
  prefs: []
  type: TYPE_NORMAL
- en: '"body",'
  prefs: []
  type: TYPE_NORMAL
- en: '"year"'
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: '"msg": "Input should be greater than 1900",'
  prefs: []
  type: TYPE_NORMAL
- en: '"input": 0,'
  prefs: []
  type: TYPE_NORMAL
- en: '"ctx": {'
  prefs: []
  type: TYPE_NORMAL
- en: '"gt": 1900'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '"url": "https://errors.pydantic.dev/2.5/v/greater_than"'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: ']'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
