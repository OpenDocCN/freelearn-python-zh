["```py\n$ tree -a api_code\napi_code\n├── .env.example\n├── api\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── config.py\n│   ├── crud.py\n│   ├── database.py\n│   ├── deps.py\n│   ├── models.py\n│   ├── schemas.py\n│   ├── stations.py\n│   ├── tickets.py\n│   ├── trains.py\n│   ├── users.py\n│   └── util.py\n├── dummy_data.py\n├── main.py\n├── queries.md\n└── train.db \n```", "```py\n# api_code/api/models.py\nimport hashlib\nimport os\nimport secrets\nfrom enum import StrEnum, auto\nfrom sqlalchemy import (\n    DateTime,\n    Enum,\n    ForeignKey,\n    Unicode,\n)\nfrom sqlalchemy.orm import mapped_column, relationship, Mapped\nfrom .database import Base\nUNICODE_LEN = 128\nSALT_LEN = 64\n# Enums\nclass Classes(StrEnum):\n    first = auto()\n    second = auto()\nclass Roles(StrEnum):\n    admin = auto()\n    passenger = auto() \n```", "```py\n# api_code/api/models.py\nclass Station(Base):\n    __tablename__ = \"station\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    code: Mapped[str] = mapped_column(\n        Unicode(UNICODE_LEN), unique=True\n    )\n    country: Mapped[str] = mapped_column(Unicode(UNICODE_LEN))\n    city: Mapped[str] = mapped_column(Unicode(UNICODE_LEN))\n    departures: Mapped[list[\"Train\"]] = relationship(\n        foreign_keys=\"[Train.station_from_id]\",\n        back_populates=\"station_from\",\n    )\n    arrivals: Mapped[list[\"Train\"]] = relationship(\n        foreign_keys=\"[Train.station_to_id]\",\n        back_populates=\"station_to\",\n    )\n    def __repr__(self):\n        return f\"<{self.code}: id={self.id} city={self.city}>\"\n    __str__ = __repr__ \n```", "```py\n# api_code/api/models.py\nclass Train(Base):\n    __tablename__ = \"train\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    name: Mapped[str] = mapped_column(Unicode(UNICODE_LEN))\n    station_from_id: Mapped[int] = mapped_column(\n        ForeignKey(\"station.id\")\n    )\n    station_from: Mapped[\"Station\"] = relationship(\n        foreign_keys=[station_from_id],\n        back_populates=\"departures\",\n    )\n    station_to_id: Mapped[int] = mapped_column(\n        ForeignKey(\"station.id\")\n    )\n    station_to: Mapped[\"Station\"] = relationship(\n        foreign_keys=[station_to_id],\n        back_populates=\"arrivals\",\n    )\n    departs_at: Mapped[DateTime] = mapped_column(\n        DateTime(timezone=True)\n    )\n    arrives_at: Mapped[DateTime] = mapped_column(\n        DateTime(timezone=True)\n    )\n    first_class: Mapped[int] = mapped_column(default=0)\n    second_class: Mapped[int] = mapped_column(default=0)\n    seats_per_car: Mapped[int] = mapped_column(default=0)\n    tickets: Mapped[list[\"Ticket\"]] = relationship(\n        back_populates=\"train\"\n    )\n    def __repr__(self):\n        return f\"<{self.name}: id={self.id}>\"\n    __str__ = __repr__ \n```", "```py\n# api_code/api/models.py\nclass Ticket(Base):\n    __tablename__ = \"ticket\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    created_at: Mapped[DateTime] = mapped_column(\n        DateTime(timezone=True)\n    )\n    user_id: Mapped[int] = mapped_column(ForeignKey(\"user.id\"))\n    user: Mapped[\"User\"] = relationship(\n        foreign_keys=[user_id], back_populates=\"tickets\"\n    )\n    train_id: Mapped[int] = mapped_column(ForeignKey(\"train.id\"))\n    train: Mapped[\"Train\"] = relationship(\n        foreign_keys=[train_id], back_populates=\"tickets\"\n    )\n    price: Mapped[float] = mapped_column(default=0)\n    car_class: Mapped[Enum] = mapped_column(Enum(Classes))\n    def __repr__(self):\n        return (\n            f\"<id={self.id} user={self.user} train={self.train}>\"\n        )\n    __str__ = __repr__ \n```", "```py\n# api_code/api/models.py\nclass User(Base):\n    __tablename__ = \"user\"\n    pwd_separator = \"#\"\n    id: Mapped[int] = mapped_column(primary_key=True)\n    full_name: Mapped[str] = mapped_column(\n        Unicode(UNICODE_LEN), nullable=False\n    )\n    email: Mapped[str] = mapped_column(\n        Unicode(2 * UNICODE_LEN), unique=True\n    )\n    password: Mapped[str] = mapped_column(\n        Unicode(2 * UNICODE_LEN)\n    )\n    role: Mapped[Enum] = mapped_column(Enum(Roles))\n    tickets: Mapped[list[\"Ticket\"]] = relationship(\n        back_populates=\"user\"\n    )\n    def is_valid_password(self, password: str):\n        \"\"\"Tell if password matches the one stored in DB.\"\"\"\n        salt, stored_hash = self.password.split(\n            self.pwd_separator\n        )\n        _, computed_hash = _hash(\n            password=password, salt=bytes.fromhex(salt)\n        )\n        return secrets.compare_digest(stored_hash, computed_hash)\n    @classmethod\n    def hash_password(cls, password: str, salt: bytes = None):\n        salt, hashed = _hash(password=password, salt=salt)\n        return f\"{salt}{cls.pwd_separator}{hashed}\"\n    def __repr__(self):\n        return (\n            f\"<{self.full_name}: id={self.id} \"\n            f\"role={self.role.name}>\"\n        )\n    __str__ = __repr__ \n```", "```py\n# api_code/main.py\nfrom api import admin, config, stations, tickets, trains, users\nfrom fastapi import FastAPI\nsettings = config.Settings()\napp = FastAPI()\napp.include_router(admin.router)\napp.include_router(stations.router)\napp.include_router(trains.router)\napp.include_router(users.router)\napp.include_router(tickets.router)\n@app.get(\"/\")\ndef root():\n    return {\n        \"message\": (\n            f\"Welcome to version {settings.api_version} \"\n            f\"of our API\"\n        )\n    } \n```", "```py\n# api_code/api/config.py\nfrom pydantic_settings import BaseSettings, SettingsConfigDict\nclass Settings(BaseSettings):\n    model_config = SettingsConfigDict(env_file=\".env\")\n    secret_key: str\n    debug: bool\n    api_version: str \n```", "```py\n# api_code/.env\nSECRET_KEY=\"018ea65f62337ed59567a794b19dcaf8\"\nDEBUG=false\nAPI_VERSION=2.0.0 \n```", "```py\n# api_code/api/stations.py\nfrom typing import Optional\nfrom fastapi import (\n    APIRouter,\n    Depends,\n    HTTPException,\n    Response,\n    status,\n)\nfrom sqlalchemy.orm import Session\nfrom . import crud\nfrom .deps import get_db\nfrom .schemas import Station, StationCreate, StationUpdate, Train\nrouter = APIRouter(prefix=\"/stations\")\n@router.get(\"\", tags=[\"Stations\"])\ndef get_stations(\n    db: Session = Depends(get_db), code: Optional[str] = None\n) -> list[Station]:\n    return crud.get_stations(db=db, code=code) \n```", "```py\n# api_code/api/crud.py\nfrom datetime import UTC, datetime\nfrom sqlalchemy import delete, select, update\nfrom sqlalchemy.orm import Session, aliased\nfrom . import models, schemas\ndef get_stations(db: Session, code: str | None = None):\n    stm = select(models.Station)\n    if code is not None:\n        stm = stm.where(models.Station.code.ilike(code))\n    return db.scalars(stm).all() \n```", "```py\n$ uvicorn main:app --reload \n```", "```py\n$ http http://localhost:8000/stations\nHTTP/1.1 200 OK\ncontent-length: 702\ncontent-type: application/json\ndate: Thu, 04 Apr 2024 09:46:29 GMT\nserver: uvicorn\n[\n    {\n        \"city\": \"Rome\",\n        \"code\": \"ROM\",\n        \"country\": \"Italy\",\n        \"id\": 0\n    },\n    {\n        \"city\": \"Paris\",\n        \"code\": \"PAR\",\n        \"country\": \"France\",\n        \"id\": 1\n    },\n    ... some stations omitted ...\n    {\n        \"city\": \"Sofia\",\n        \"code\": \"SFA\",\n        \"country\": \"Bulgaria\",\n        \"id\": 11\n    }\n] \n```", "```py\n$ http http://localhost:8000/stations?code=LDN \n```", "```py\n$ http http://localhost:8000/stations?code=LDN\nHTTP/1.1 200 OK\n...\n[\n    {\n        \"city\": \"London\",\n        \"code\": \"LDN\",\n        \"country\": \"UK\",\n        \"id\": 2\n    }\n] \n```", "```py\n# api_code/api/stations.py\n@router.get(\"/{station_id}\", tags=[\"Stations\"])\ndef get_station(\n    station_id: int, db: Session = Depends(get_db)\n) -> Station:\n    db_station = crud.get_station(db=db, station_id=station_id)\n    if db_station is None:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Station {station_id} not found.\",\n        )\n    return db_station \n```", "```py\n$ http http://localhost:8000/stations/3\nHTTP/1.1 200 OK\n...\n{\n    \"city\": \"Kyiv\",\n    \"code\": \"KYV\",\n    \"country\": \"Ukraine\",\n    \"id\": 3\n} \n```", "```py\n$ http http://localhost:8000/stations/kyiv\nHTTP/1.1 422 Unprocessable Entity\n...\n{\n    \"detail\": [\n        {\n            \"input\": \"kyiv\",\n            \"loc\": [\n                \"path\",\n                \"station_id\"\n            ],\n            \"msg\": \"Input should be a valid integer, …\",\n            \"type\": \"int_parsing\",\n            \"url\": \"https://errors.pydantic.dev/2.6/v/int_parsing\"\n        }\n    ]\n} \n```", "```py\n$ http http://localhost:8000/stations/100\nHTTP/1.1 404 Not Found\n...\n{\n    \"detail\": \"Station 100 not found.\"\n} \n```", "```py\n# api_code/api/stations.py\n@router.post(\n    \"\",\n    status_code=status.HTTP_201_CREATED,\n    tags=[\"Stations\"],\n)\ndef create_station(\n    station: StationCreate, db: Session = Depends(get_db)\n) -> Station:\n    db_station = crud.get_station_by_code(\n        db=db, code=station.code\n    )\n    if db_station:\n        raise HTTPException(\n            status_code=400,\n            detail=f\"Station {station.code} already exists.\",\n        )\n    return crud.create_station(db=db, station=station) \n```", "```py\n# api_code/api/schemas.py\nfrom pydantic import BaseModel, ConfigDict\nclass StationBase(BaseModel):\n    code: str\n    country: str\n    city: str\nclass Station(StationBase):\n    model_config = ConfigDict(from_attributes=True)\n    id: int\nclass StationCreate(StationBase):\n    pass \n```", "```py\n# api_code/api/crud.py\ndef get_station_by_code(db: Session, code: str):\n    return db.scalar(\n        select(models.Station).where(\n            models.Station.code.ilike(code)\n        )\n    )\ndef create_station(\n    db: Session,\n    station: schemas.StationCreate,\n):\n    db_station = models.Station(**station.model_dump())\n    db.add(db_station)\n    db.commit()\n    return db_station \n```", "```py\n$ http POST http://localhost:8000/stations \\\ncode=TMP country=Temporary-Country city=tmp-city\nHTTP/1.1 201 Created\n...\n{\n    \"city\": \"tmp-city\",\n    \"code\": \"TMP\",\n    \"country\": \"Temporary-Country\",\n    \"id\": 12\n} \n```", "```py\n$ http POST http://localhost:8000/stations \\\ncountry=Another-Country city=another-city\nHTTP/1.1 422 Unprocessable Entity\n...\n{\n    \"detail\": [\n        {\n            \"input\": {\n                \"city\": \"another-city\",\n                \"country\": \"Another-Country\"\n            },\n            \"loc\": [\n                \"body\",\n                \"code\"\n            ],\n            \"msg\": \"Field required\",\n            \"type\": \"missing\",\n            \"url\": \"https://errors.pydantic.dev/2.6/v/missing\"\n        }\n    ]\n} \n```", "```py\n# api_code/api/stations.py\n@router.put(\"/{station_id}\", tags=[\"Stations\"])\ndef update_station(\n    station_id: int,\n    station: StationUpdate,\n    db: Session = Depends(get_db),\n):\n    db_station = crud.get_station(db=db, station_id=station_id)\n    if db_station is None:\n        raise HTTPException(\n            status_code=404,\n            detail=f\"Station {station_id} not found.\",\n        )\n    else:\n        crud.update_station(\n            db=db, station=station, station_id=station_id\n        )\n        return Response(status_code=status.HTTP_204_NO_CONTENT) \n```", "```py\n# api_code/api/schemas.py\nfrom typing import Optional\nclass StationUpdate(StationBase):\n    code: Optional[str] = None\n    country: Optional[str] = None\n    city: Optional[str] = None \n```", "```py\n# api_code/api/crud.py\ndef update_station(\n    db: Session, station: schemas.StationUpdate, station_id: int\n):\n    stm = (\n        update(models.Station)\n        .where(models.Station.id == station_id)\n        .values(station.model_dump(exclude_unset=True))\n    )\n    result = db.execute(stm)\n    db.commit()\n    return result.rowcount \n```", "```py\n$ http PUT http://localhost:8000/stations/12 \\\ncode=SMC country=Some-Country city=Some-city\nHTTP/1.1 204 No Content\n... \n```", "```py\n$ http http://localhost:8000/stations/12\nHTTP/1.1 200 OK\n...\n{\n    \"city\": \"Some-city\",\n    \"code\": \"SMC\",\n    \"country\": \"Some-Country\",\n    \"id\": 12\n} \n```", "```py\n$ http PUT http://localhost:8000/stations/12 code=xxx\nHTTP/1.1 204 No Content\n... \n```", "```py\n$ http http://localhost:8000/stations/12\nHTTP/1.1 200 OK\n...\n{\n    \"city\": \"Some-city\",\n    \"code\": \"xxx\",\n    \"country\": \"Some-Country\",\n    \"id\": 12\n} \n```", "```py\n# api_code/api/stations.py\n@router.delete(\"/{station_id}\", tags=[\"Stations\"])\ndef delete_station(\n    station_id: int, db: Session = Depends(get_db)\n):\n    row_count = crud.delete_station(db=db, station_id=station_id)\n    if row_count:\n        return Response(status_code=status.HTTP_204_NO_CONTENT)\n    return Response(status_code=status.HTTP_404_NOT_FOUND) \n```", "```py\n# api_code/api/crud.py\ndef delete_station(db: Session, station_id: int):\n    stm = delete(models.Station).where(\n        models.Station.id == station_id\n    )\n    result = db.execute(stm)\n    db.commit()\n    return result.rowcount \n```", "```py\n$ http DELETE http://localhost:8000/stations/12\nHTTP/1.1 204 No Content\n... \n```", "```py\n$ http DELETE http://localhost:8000/stations/12\nHTTP/1.1 404 Not Found\n... \n```", "```py\n# api_code/api/users.py\nfrom .util import InvalidToken, create_token, extract_payload\n@router.post(\"/authenticate\", tags=[\"Auth\"])\ndef authenticate(\n    auth: Auth,\n    db: Session = Depends(get_db),\n    settings: Settings = Depends(get_settings),\n):\n    db_user = crud.get_user_by_email(db=db, email=auth.email)\n    if db_user is None:\n        raise HTTPException(\n            status_code=status.HTTP_404_NOT_FOUND,\n            detail=f\"User {auth.email} not found.\",\n        )\n    if not db_user.is_valid_password(auth.password):\n        raise HTTPException(\n            status_code=status.HTTP_401_UNAUTHORIZED,\n            detail=\"Wrong username/password.\",\n        )\n    payload = {\n        \"email\": auth.email,\n        \"role\": db_user.role.value,\n    }\n    return create_token(payload, settings.secret_key) \n```", "```py\n# api_code/api/schemas.py\nclass Auth(BaseModel):\n    email: str\n    password: str \n```", "```py\n$ http POST http://localhost:8000/users/authenticate \\\nemail=\"fabrizio.romano@example.com\" password=\"f4bPassword\"\nHTTP/1.1 200 OK\n...\n\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9....01GK4QyzZje8NKMzBBVckc\" \n```", "```py\n# api_code/api/admin.py\nfrom .util import is_admin\nrouter = APIRouter(prefix=\"/admin\")\ndef ensure_admin(settings: Settings, authorization: str):\n    if not is_admin(\n        settings=settings, authorization=authorization\n    ):\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN,\n            detail=\"You must be admin to access this endpoint.\",\n        )\n@router.delete(\"/stations/{station_id}\", tags=[\"Admin\"])\ndef admin_delete_station(\n    station_id: int,\n    authorization: Optional[str] = Header(None),\n    settings: Settings = Depends(get_settings),\n    db: Session = Depends(get_db),\n):\n    ensure_admin(settings, authorization)\n    row_count = crud.delete_station(db=db, station_id=station_id)\n    if row_count:\n        return Response(status_code=status.HTTP_204_NO_CONTENT)\n    return Response(status_code=status.HTTP_404_NOT_FOUND) \n```"]