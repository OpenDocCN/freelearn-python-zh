- en: Chapter 11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Manipulating Numbers
  prefs: []
  type: TYPE_NORMAL
- en: 11.1 Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Just like every high-level programming language, Python provides many ready-to-use
    functions and methods (called subprograms) that you can use whenever and wherever
    you wish.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A “subprogram” is simply a group of statements packaged
    as a single unit. Each subprogram has a descriptive name and performs a specific
    task.'
  prefs: []
  type: TYPE_NORMAL
- en: To better understand functions and methods, let's take Heron's^([[11]](footnotes.html#Endnote_11))
    iterative formula that calculates the square root of a positive number.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter11-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►y is the number for which you want to find the square root
  prefs: []
  type: TYPE_NORMAL
- en: ►x[n] is the n-th iteration value of the square root of y
  prefs: []
  type: TYPE_NORMAL
- en: You might feel a bit frustrated right now. You could think that you should write
    a program to calculate Heron's formula to find the square root of a number, but
    this is not true! At present, no one calculates the square root of a number this
    way. Fortunately, Python includes a function for that purpose! This function,
    actually a small subprogram, has been given the name sqrt, and all you have to
    do is call it by its name, and it will do the job for you. The sqrt function probably
    uses Heron's iterative formula or perhaps a formula from another ancient or modern
    mathematician. The truth is that you don't really care! What really matters is
    that sqrt gives you the right result! An example is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = sqrt(x)
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The function sqrt() is defined in module math. It is not
    accessible directly in Python, so you need to import it from the math module.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A “module” in Python is nothing more than a file that contains
    many ready-to-use functions (or methods). Python incorporates quite a lot such
    modules, but, if you wish to use a function included in one of those modules,
    you need to import it from that module into your program.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Even though Python supports many mathematical functions (and methods), this
    chapter covers only those absolutely necessary for this book''s purpose. However,
    if you need even more information you can visit one of the following addresses:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://tinyurl.com/4s8y2frk](https://tinyurl.com/4s8y2frk)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://docs.python.org/3.13/library/math.html](https://docs.python.org/3.13/library/math.html)'
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter11-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Mathematical subprograms are used whenever you need to perform
    math calculations, such as finding the square root, sine, cosine, absolute value,
    and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: 11.2 Useful Mathematical Functions (Subprograms), and More
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Absolute value
  prefs: []
  type: TYPE_NORMAL
- en: abs(number)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the absolute value of number.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2a'
  prefs: []
  type: TYPE_NORMAL
- en: a = -5
  prefs: []
  type: TYPE_NORMAL
- en: b = abs(a)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(abs(a))           #It displays: 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(b)                #It displays: 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(abs(-5.2))        #It displays: 5.2'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(abs(5.2))         #It displays: 5.2'
  prefs: []
  type: TYPE_NORMAL
- en: Pi
  prefs: []
  type: TYPE_NORMAL
- en: pi
  prefs: []
  type: TYPE_NORMAL
- en: This contains the value of π.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2b'
  prefs: []
  type: TYPE_NORMAL
- en: from math import pi
  prefs: []
  type: TYPE_NORMAL
- en: 'print(pi)    #It displays: 3.141592653589793'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that pi is neither a function nor a method. Therefore,
    you must not put parentheses at the end.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg) is defined in module math. It is not accessible directly
    in Python, so you need to import it from the math module.'
  prefs: []
  type: TYPE_NORMAL
- en: Sine
  prefs: []
  type: TYPE_NORMAL
- en: sin(number)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the sine of number. The value of number must be expressed
    in radians. You can multiply  by pi / 180 to convert degrees to radians.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2c'
  prefs: []
  type: TYPE_NORMAL
- en: from math import sin, pi
  prefs: []
  type: TYPE_NORMAL
- en: 'a = sin(3 * pi / 2)       #Sine of 3π/2 radians'
  prefs: []
  type: TYPE_NORMAL
- en: 'b = sin(270 * pi / 180)   #Sine of 270 degrees'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a, b)               #It displays: -1.0  -1.0'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The function sin() is defined in module math. It is not
    accessible directly in Python, so you need to import it from the math module.'
  prefs: []
  type: TYPE_NORMAL
- en: Cosine
  prefs: []
  type: TYPE_NORMAL
- en: cos(number)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the cosine of number. The value of number must be expressed
    in radians. You can multiply by pi / 180 to convert degrees to radians.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2d'
  prefs: []
  type: TYPE_NORMAL
- en: from math import cos, pi
  prefs: []
  type: TYPE_NORMAL
- en: 'a = cos(2 * pi)           #Cosine of 2π radians'
  prefs: []
  type: TYPE_NORMAL
- en: 'b = cos(360 * pi / 180)   #Cosine of 360 degrees'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a, b)               #It displays: 1.0  1.0'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The function cos() is defined in module math. It is not
    accessible directly in Python, so you need to import it from the math module.'
  prefs: []
  type: TYPE_NORMAL
- en: Tangent
  prefs: []
  type: TYPE_NORMAL
- en: tan(number)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the tangent of number. The value of number must be expressed
    in radians. You can multiply by pi / 180 to convert degrees to radians.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2e'
  prefs: []
  type: TYPE_NORMAL
- en: from math import tan ,pi
  prefs: []
  type: TYPE_NORMAL
- en: 'a = tan(10 * pi / 180)   #Tangent of 10 degrees'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(a)                 #It displays: 0.176326980708'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The function tan() is defined in module math. It is not
    accessible directly in Python, so you need to import it from the math module.'
  prefs: []
  type: TYPE_NORMAL
- en: Quotient and remainder of integer division
  prefs: []
  type: TYPE_NORMAL
- en: divmod(number1, number2)
  prefs: []
  type: TYPE_NORMAL
- en: 'This function returns two values, and these are:'
  prefs: []
  type: TYPE_NORMAL
- en: ►the quotient of the integer division of number1 and number2; and
  prefs: []
  type: TYPE_NORMAL
- en: ►the remainder of the integer division of number1 and number2
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2f'
  prefs: []
  type: TYPE_NORMAL
- en: c, d = divmod(13, 4)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(c, d, sep = ", ")   #It displays: 3, 1'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)It is possible in Python for a function or a method to return
    two or more values.'
  prefs: []
  type: TYPE_NORMAL
- en: Integer value
  prefs: []
  type: TYPE_NORMAL
- en: int(value)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the number in value as integer, that is, the integer portion
    of value. If value contains a fractional part, that part is lost during conversion.
  prefs: []
  type: TYPE_NORMAL
- en: In case value contains a string representation of an integer, it returns its
    numeric equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2g'
  prefs: []
  type: TYPE_NORMAL
- en: a = 5.4
  prefs: []
  type: TYPE_NORMAL
- en: 'print(int(a))            #It displays: 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(int(34))           #It displays: 34'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(int(34.9))         #It displays: 34'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(int(-34.999))      #It displays: -34'
  prefs: []
  type: TYPE_NORMAL
- en: s1 = "5"
  prefs: []
  type: TYPE_NORMAL
- en: s2 = "3"
  prefs: []
  type: TYPE_NORMAL
- en: k = int(s1)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(k)                 #It displays: 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(int(s2))           #It displays: 3'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(s1 + s2)           #It displays: 53'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(k + int(s2))       #It displays: 8'
  prefs: []
  type: TYPE_NORMAL
- en: Real value
  prefs: []
  type: TYPE_NORMAL
- en: float(value)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the number in value as float (real).
  prefs: []
  type: TYPE_NORMAL
- en: In case value contains a string representation of an integer or a float (real),
    it returns its numeric equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2h'
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'print(float(a))          #It displays: 5.0'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(float(34))         #It displays: 34.0'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(float(-34))        #It displays: -34.0'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(float(34.9))       #It displays: 34.9'
  prefs: []
  type: TYPE_NORMAL
- en: s1 = "6"
  prefs: []
  type: TYPE_NORMAL
- en: s2 = "3.4"
  prefs: []
  type: TYPE_NORMAL
- en: x = float(s1)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(x)                  #It displays: 6.0'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(float(s2))          #It displays: 3.4'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(s1 + s2)            #It displays: 63.4'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(x + float(s2))      #It displays: 9.4'
  prefs: []
  type: TYPE_NORMAL
- en: Range
  prefs: []
  type: TYPE_NORMAL
- en: range([initial_value,] final_value [, step])
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a sequence of integers between initial_value and final_value
    - 1\. The argument initial_value is optional. If omitted, its default value is
    0\. The argument step is the difference between each number in the sequence. This
    argument is also optional. If omitted, its default value is 1.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that initial_value, final_value, and step must be integers.
    Negative values are also permitted!'
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2i'
  prefs: []
  type: TYPE_NORMAL
- en: '#Assign the sequence 1, 2, 3, 4, 5 to x'
  prefs: []
  type: TYPE_NORMAL
- en: x = range(1, 6)
  prefs: []
  type: TYPE_NORMAL
- en: '#Assign the sequence 0, 1, 2, 3, 4, 5 to y'
  prefs: []
  type: TYPE_NORMAL
- en: y = range(6)
  prefs: []
  type: TYPE_NORMAL
- en: '#Assign the sequence 0, 10, 20, 30, 40 to w'
  prefs: []
  type: TYPE_NORMAL
- en: w = range(0, 50, 10)
  prefs: []
  type: TYPE_NORMAL
- en: '#Assign the sequence 100, 95, 90, 85 to z'
  prefs: []
  type: TYPE_NORMAL
- en: z = range(100, 80, -5)
  prefs: []
  type: TYPE_NORMAL
- en: Random
  prefs: []
  type: TYPE_NORMAL
- en: randrange([minimum_value,] maximum_value [, step])
  prefs: []
  type: TYPE_NORMAL
- en: This function returns a random integer from a given range. The arguments of
    randrange() follow the same logic as those of function range().
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2j'
  prefs: []
  type: TYPE_NORMAL
- en: from random import randrange
  prefs: []
  type: TYPE_NORMAL
- en: '#Display a random integer between 10 and 100'
  prefs: []
  type: TYPE_NORMAL
- en: print(randrange(10, 101))
  prefs: []
  type: TYPE_NORMAL
- en: '#Assign a random integer between 0 and 10 to variable y and display it'
  prefs: []
  type: TYPE_NORMAL
- en: y = randrange(11)
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: '#Display a random integer between -20 and 20'
  prefs: []
  type: TYPE_NORMAL
- en: print(randrange(-20, 21))
  prefs: []
  type: TYPE_NORMAL
- en: '#Display a random odd integer between 1 and 99'
  prefs: []
  type: TYPE_NORMAL
- en: print(randrange(1, 99, 2))
  prefs: []
  type: TYPE_NORMAL
- en: '#Display a random even integer between 0 and 100'
  prefs: []
  type: TYPE_NORMAL
- en: print(randrange(0, 100, 2))
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Random numbers are widely used in computer games. For example,
    an “enemy” may show up at a random time or move in random directions. Also, random
    numbers are used in simulation programs, in statistical programs, in computer
    security to encrypt data, and so on.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The function randrange() is defined in module random. It
    is not accessible directly in Python, so you need to import it from the random
    module.'
  prefs: []
  type: TYPE_NORMAL
- en: Round
  prefs: []
  type: TYPE_NORMAL
- en: round(number)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the closest integer of number.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2k'
  prefs: []
  type: TYPE_NORMAL
- en: a = 5.9
  prefs: []
  type: TYPE_NORMAL
- en: 'print(round(a))                     #It displays: 6'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(round(5.4))                   #It displays: 5'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you need the rounded value of number to a specified precision, you can use
    the following formula:'
  prefs: []
  type: TYPE_NORMAL
- en: round(number * 10 ** precision) / 10 ** precision
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2l'
  prefs: []
  type: TYPE_NORMAL
- en: a = 5.312
  prefs: []
  type: TYPE_NORMAL
- en: y = round(a * 10 ** 2) / 10 ** 2
  prefs: []
  type: TYPE_NORMAL
- en: 'print(y)                            #It displays: 5.31'
  prefs: []
  type: TYPE_NORMAL
- en: a = 5.315
  prefs: []
  type: TYPE_NORMAL
- en: y = round(a * 10 ** 2) / 10 ** 2
  prefs: []
  type: TYPE_NORMAL
- en: 'print(y)                            #It displays: 5.32'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(round(2.3447 * 10 ** 3) / 10 * 10 ** 3)  #It displays: 2.345'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(round(2.3447 * 1000) / 1000)  #It displays: 2.345'
  prefs: []
  type: TYPE_NORMAL
- en: Square root
  prefs: []
  type: TYPE_NORMAL
- en: sqrt(number)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the square root of number, where number can be a positive
    value or zero.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2m'
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: 'print(sqrt(9))             #It displays: 3.0'
  prefs: []
  type: TYPE_NORMAL
- en: 'print(sqrt(2))             #It displays: 1.4142135623730951'
  prefs: []
  type: TYPE_NORMAL
- en: x = sqrt(8)
  prefs: []
  type: TYPE_NORMAL
- en: 'print(x)                   #It displays: 2.8284271247461903'
  prefs: []
  type: TYPE_NORMAL
- en: y = round(sqrt(8))
  prefs: []
  type: TYPE_NORMAL
- en: 'print(y)                   #It displays: 3'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The function sqrt() is defined in module math. It is not
    accessible directly in Python, so you need to import it from the math module.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note how the function sqrt() is nested within the function
    round(). The result of the inner (nested) function (or functions) is used as an
    argument for the outer function. This is a writing style that most programmers
    prefer to follow because it helps to save a lot of code lines. Of course, if you
    nest too many functions, no one will be able to understand your code. A nesting
    of up to four levels is quite acceptable.'
  prefs: []
  type: TYPE_NORMAL
- en: Sum
  prefs: []
  type: TYPE_NORMAL
- en: fsum(sequence)
  prefs: []
  type: TYPE_NORMAL
- en: This function returns the sum of the elements of sequence.
  prefs: []
  type: TYPE_NORMAL
- en: Example
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2n'
  prefs: []
  type: TYPE_NORMAL
- en: from math import fsum
  prefs: []
  type: TYPE_NORMAL
- en: seq = [5.5, 6.3, 2]      #Assign a sequence of numbers to seq
  prefs: []
  type: TYPE_NORMAL
- en: 'print(fsum(seq))         #It displays: 13.8'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The function fsum() is defined in module math. It is not
    accessible directly in Python, so you need to import it from the math module.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 11.2-1 Calculating the Distance Between Two Points
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter the coordinates (x, y)
    of two points and then calculates the straight line distance between them. The
    required formula is
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter11-03.png)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, you need to use the function sqrt(), which returns the square
    root of a number.
  prefs: []
  type: TYPE_NORMAL
- en: To simplify things, the terms (x[1] - x[2])² and (y[1] - y[2])² are calculated
    individually and the results are assigned to two temporary variables. The Python
    program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2-1a'
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: print("Enter coordinates for point A:")
  prefs: []
  type: TYPE_NORMAL
- en: x1, y1 = float(input()), float(input())
  prefs: []
  type: TYPE_NORMAL
- en: print("Enter coordinates for point B:")
  prefs: []
  type: TYPE_NORMAL
- en: x2, y2 = float(input()), float(input())
  prefs: []
  type: TYPE_NORMAL
- en: xTemp = (x1 - x2) ** 2
  prefs: []
  type: TYPE_NORMAL
- en: yTemp = (y1 - y2) ** 2
  prefs: []
  type: TYPE_NORMAL
- en: d = sqrt(xTemp + yTemp)
  prefs: []
  type: TYPE_NORMAL
- en: print("Distance between points:", d)
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see another approach. It is actually possible to perform all operations
    within the function call. Doing that, the result of the operations will be used
    as an argument for the function. This is a writing style that most programmers
    prefer to follow because it can save a lot of variables and code lines. The Python
    program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2-1b'
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: print("Enter coordinates for point A:")
  prefs: []
  type: TYPE_NORMAL
- en: x1, y1 = float(input()), float(input())
  prefs: []
  type: TYPE_NORMAL
- en: print("Enter coordinates for point B:")
  prefs: []
  type: TYPE_NORMAL
- en: x2, y2 = float(input()), float(input())
  prefs: []
  type: TYPE_NORMAL
- en: d = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)
  prefs: []
  type: TYPE_NORMAL
- en: print("Distance between points:", d)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 11.2-2 How Far Did the Car Travel?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: A car starts from rest and moves with a constant acceleration along a straight
    horizontal road for a specified distance. Write a Python program that prompts
    the user to enter the acceleration and the distance the car traveled and then
    calculates the time traveled. The required formula is
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter10-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►S is the distance the car traveled, in meters (m)
  prefs: []
  type: TYPE_NORMAL
- en: ►u[o] is the initial velocity (speed) of the car, in meters per second (m/sec)
  prefs: []
  type: TYPE_NORMAL
- en: ►t is the time the car traveled, in seconds (sec)
  prefs: []
  type: TYPE_NORMAL
- en: ►a is the acceleration, in meters per second² (m/sec²)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Since the car starts from rest, the initial velocity (speed) u[0] is zero. Thus,
    the formula becomes
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter10-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: Now, if you solve for time, the final formula becomes
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter11-04.png)
  prefs: []
  type: TYPE_NORMAL
- en: In Python, you can use the function sqrt(), which returns the square root of
    a number.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_11.2-2'
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: 'a = float(input("Enter acceleration: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'S = float(input("Enter distance traveled: "))'
  prefs: []
  type: TYPE_NORMAL
- en: t = sqrt(2 * S / a)
  prefs: []
  type: TYPE_NORMAL
- en: print("Your car traveled for", t, "seconds")
  prefs: []
  type: TYPE_NORMAL
- en: '11.3 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)In general, functions are small subprograms that solve small problems.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Every programmer must use Heron's iterative formula to calculate the square
    root of a positive number.
  prefs: []
  type: TYPE_NORMAL
- en: 3)The abs() function returns the absolute position of an item.
  prefs: []
  type: TYPE_NORMAL
- en: 4)The statement int(3.59) returns a result of 3.6.
  prefs: []
  type: TYPE_NORMAL
- en: 5)The statement y = int("two") is a valid Python statement.
  prefs: []
  type: TYPE_NORMAL
- en: 6)The statement y = int("2") is a valid Python statement.
  prefs: []
  type: TYPE_NORMAL
- en: 7)The statement int(3) returns a result of 3.0.
  prefs: []
  type: TYPE_NORMAL
- en: 8)The statement float(3) returns a result of 3.0.
  prefs: []
  type: TYPE_NORMAL
- en: 9)The statement y = float("3.14") is not a valid Python statement.
  prefs: []
  type: TYPE_NORMAL
- en: 10)The value of pi in the math module is equal to 3.14.
  prefs: []
  type: TYPE_NORMAL
- en: 11)The randrange() function can return negative random numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 12)There is a 50% possibility that the statement y = randrange(0, 2) will assign
    a value of 1 to variable y.
  prefs: []
  type: TYPE_NORMAL
- en: 13)The statement round(3.59) returns a result of 4.
  prefs: []
  type: TYPE_NORMAL
- en: 14)To calculate the sine of 90 degrees, you have to write y = sin(pi / 2)
  prefs: []
  type: TYPE_NORMAL
- en: 15)The statement y = sqrt(−2) is valid.
  prefs: []
  type: TYPE_NORMAL
- en: 16)The following code fragment satisfies the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: a, b = float(input()), float(input())
  prefs: []
  type: TYPE_NORMAL
- en: x = a * sqrt(b)
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: '11.4 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)What is the value of the variable y when the statement y = abs(+5.2) is executed?
  prefs: []
  type: TYPE_NORMAL
- en: a)−5.2
  prefs: []
  type: TYPE_NORMAL
- en: b)−5
  prefs: []
  type: TYPE_NORMAL
- en: c)0.2
  prefs: []
  type: TYPE_NORMAL
- en: d)5.2
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 2)Which of the following calculates the sine of 180 degrees?
  prefs: []
  type: TYPE_NORMAL
- en: a)sin(180)
  prefs: []
  type: TYPE_NORMAL
- en: b)sin(pi)
  prefs: []
  type: TYPE_NORMAL
- en: c)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)What is the value of the variable y when the statement y = int(5 / 2) is executed?
  prefs: []
  type: TYPE_NORMAL
- en: a)2.5
  prefs: []
  type: TYPE_NORMAL
- en: b)3
  prefs: []
  type: TYPE_NORMAL
- en: c)2
  prefs: []
  type: TYPE_NORMAL
- en: d)0.5
  prefs: []
  type: TYPE_NORMAL
- en: 4)What is the value of the variable y when the statement y = sqrt(4) ** 2 is
    executed?
  prefs: []
  type: TYPE_NORMAL
- en: a)4
  prefs: []
  type: TYPE_NORMAL
- en: b)2
  prefs: []
  type: TYPE_NORMAL
- en: c)8
  prefs: []
  type: TYPE_NORMAL
- en: d)16
  prefs: []
  type: TYPE_NORMAL
- en: 5)What is the value of the variable y when the statement y = round(5.2) / 2
    is executed?
  prefs: []
  type: TYPE_NORMAL
- en: a)2
  prefs: []
  type: TYPE_NORMAL
- en: b)2.5
  prefs: []
  type: TYPE_NORMAL
- en: c)2.6
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 11.5 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create a trace table to determine the values of the variables in each step
    of the Python program for two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) 9, and (ii) 4.'
  prefs: []
  type: TYPE_NORMAL
- en: from math import sqrt
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: a += 6 / sqrt(a) * 2 + 20.4
  prefs: []
  type: TYPE_NORMAL
- en: b = round(a) % 4
  prefs: []
  type: TYPE_NORMAL
- en: c = b % 3
  prefs: []
  type: TYPE_NORMAL
- en: print(a, ",", b, ",", c)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the Python program for two different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the two executions are: (i) −2, and (ii) −3'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = abs(a) % 4 + a ** 4
  prefs: []
  type: TYPE_NORMAL
- en: c = b % 5
  prefs: []
  type: TYPE_NORMAL
- en: print(b, ",", c)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Write a Python program that prompts the user to enter an angle θ in radians
    and then calculates and displays the angle in degrees. It is given that 2π = 360^ο.
  prefs: []
  type: TYPE_NORMAL
- en: 4)Write a Python program that prompts the user to enter the two right angle
    sides A and B of a right-angled triangle and then calculates its hypotenuse. It
    is known from the Pythagorean^([[12]](footnotes.html#Endnote_12)) theorem that
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter11-05.png)
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that prompts the user to enter the angle θ (in degrees)
    of a right-angled triangle and the length of its adjacent side, and then calculates
    the length of the opposite side. It is known that
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter11-06.png)
  prefs: []
  type: TYPE_NORMAL
