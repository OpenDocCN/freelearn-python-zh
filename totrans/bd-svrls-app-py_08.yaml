- en: Deploying a Lambda Function with SAM
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, we have learned about Lambda functions and how to build them. We have
    learned that a Lambda function has a definite set of triggers that would trigger
    the function to carry out a particular task. The task is written as a Python module
    and the script is what we call a function. We have also learned about the different
    settings of Lambda functions, which include its core settings and also other settings,
    such as security and network.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: There is also another alternative to creating and deploying Lambda functions,
    which is the **AWS Serverless Application Model** (**AWS SAM**). This format is
    based on the concept of **infrastructure as code**. This concept is inspired by
    **AWS CloudFormation**, which is a form of infrastructure as code.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: 'We will be learning about AWS CloudFormation and using that knowledge to understand
    and build AWS SAM models for creating Lambda functions. We will be covering the
    following concepts in this chapter:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: Deploying Lambda functions
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using CloudFormation for serverless services
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Deploying with SAM
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding security in SAM
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to SAM
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we will learn about SAM, which will help us build and deploy
    serverless functions:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: 'As mentioned earlier, SAM is about writing infrastructure as code. So, this
    is what a Lambda function would be described as in SAM:'
  id: totrans-10
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'In this block of code, we enter the details—the name of the function, and the
    URI of the S3 bucket where our code package is hosted. In the same way that we
    named the index and the handler in our Lambda settings, we need to enter those
    details here, too. The `index.handler` is the file in which our function code
    is located. The `Handler` is the name of the function in which our Lambda logic
    is written. Also, the `Runtime` is user-defined. You can select from all the available
    languages that are supported by AWS Lambda. The scope of this book is limited
    to the Python language, so we will stick to either of the available Python versions:'
  id: totrans-12
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/00258.jpeg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
- en: 'We can also add environment variables, as shown here, in our Lambda function,
    too. These can be very easily edited and configured just as we add, update, and/or
    delete code, which is an added advantage of the infrastructure as code style of
    building infrastructures:'
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The preceding SAM code invokes two Lambda functions that point to an AWS `DynamoDB`
    table. The entire SAM code is an application that consists of a couple of Lambda
    functions. You need to enter the necessary details for making this work. The `Runtime`
    needs to be updated with either of the available Python runtimes. The corresponding
    policy for dealing with the `DynamoDB` tables needs to be updated in the `Policies`
    section. The `CodeUri` section needs to be updated with the S3 URI of the code
    package.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'It is to be noted that the meta information should always be included for all
    SAM, which includes the `AWSTemplateFormatVersion` and `Transform`. This would
    tell `CloudFormation` that the code you have written is an AWS SAM code and a
    serverless application. The two lines are as follows:'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应注意，对于所有 SAM，应始终包含元信息，包括 `AWSTemplateFormatVersion` 和 `Transform`。这将告诉 `CloudFormation`
    您编写的代码是 AWS SAM 代码和无服务器应用程序。这两行如下：
- en: '[PRE2]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'If your serverless function needs to access a single table of `DynamoDB`, you
    can start by creating a `DynamoDB` table via your SAM function itself using the
    `SimpleTable` attribute. This can be done as follows:'
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您的无服务器函数需要访问 `DynamoDB` 的单个表，您可以通过使用 SAM 函数本身的 `SimpleTable` 属性创建一个 `DynamoDB`
    表来开始。这可以按以下方式完成：
- en: '[PRE3]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Now, we will learn how to create a Lambda function with a trigger. As we are
    already using `DynamoDB` for the examples, we will use the same as a trigger in
    this step. The SAM code for this would look as follows:'
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将学习如何创建一个具有触发器的 Lambda 函数。由于我们已经在示例中使用了 `DynamoDB`，因此我们将在此步骤中使用相同的 `DynamoDB`
    作为触发器。此 SAM 代码将如下所示：
- en: '[PRE4]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: CloudFormation for serverless services
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 服务器无服务 CloudFormation
- en: 'In this section, we will learn how CloudFormation can be used to build and
    deploy Lambda functions. We will do the following:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何使用 CloudFormation 构建和部署 Lambda 函数。我们将执行以下操作：
- en: 'We will write a CloudFormation template for a Lambda function that periodically
    pings a website and gives an error if there is any failure in the process. The
    CloudFormation template for this is as follows:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将编写一个 CloudFormation 模板，用于创建一个 Lambda 函数，该函数会定期ping一个网站，并在过程中出现任何失败时返回错误。此
    CloudFormation 模板的格式如下：
- en: '[PRE5]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'There is a lot of syntax in this CloudFormation snippet. We will now try to
    understand it in a bit more detail:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个 CloudFormation 片段中有许多语法。我们现在将更详细地尝试理解它：
- en: 'In the first three lines that contain the meta details of the Lambda function,
    we have the following line—`Transform: ''AWS::Serverless-2016-10-31''`. This line
    is used to define the resources that a user will be using/accessing, through a
    CloudFormation template. As we are using a Lambda function, we have specified
    it as `Serverless`.'
  id: totrans-28
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在包含 Lambda 函数元详细信息的头三行中，我们有以下行——“`Transform: ''AWS::Serverless-2016-10-31''”。此行用于定义用户将通过
    CloudFormation 模板使用/访问的资源。由于我们使用 Lambda 函数，我们将其指定为 `Serverless`。'
- en: We have also defined the memory size that our function will be using. It is
    similar to how we learned to view and change the memory settings in the Lambda's
    console.
  id: totrans-29
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还定义了我们的函数将使用的内存大小。这与我们在 Lambda 控制台中查看和更改内存设置的方式类似。
- en: '`Timeout` is the amount of time the Lambda function can keep retrying before
    considering the attempt as a failure.'
  id: totrans-30
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`Timeout` 是 Lambda 函数在将尝试视为失败之前可以持续重试的时间量。'
- en: You can also see that we have added environment variables to our Lambda function
    that will be stored in the Lambda container and used when needed by the system.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以看到，我们已经为我们的 Lambda 函数添加了环境变量，这些变量将被存储在 Lambda 容器中，并在系统需要时使用。
- en: Deploying with SAM
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 SAM 部署
- en: 'In this section, we will learn how to deploy the SAM applications. We have
    already learned what SAM applications and code look like, so we will learn how
    to deploy them via AWS CloudFormation:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将学习如何部署 SAM 应用程序。我们已经学习了 SAM 应用程序和代码的样子，所以我们将学习如何通过 AWS CloudFormation
    部署它们：
- en: 'Firstly, let''s set up our local environment for deployment purposes, and then
    start by installing `awscli` from `pip`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们为部署目的设置我们的本地环境，然后从 `pip` 开始安装 `awscli`：
- en: '![](img/00259.jpeg)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00259.jpeg)'
- en: 'Next, you will need to configure your AWS environment using your credentials:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，您需要使用您的凭证配置您的 AWS 环境：
- en: '![](img/00260.jpeg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![](img/00260.jpeg)'
- en: 'You will need to enter the following details to make sure your AWS environment
    is successfully configured:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您需要输入以下详细信息以确保您的 AWS 环境配置成功：
- en: Your AWS Access Key
  id: totrans-39
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的 AWS 访问密钥
- en: Your AWS Secret Key
  id: totrans-40
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的 AWS 密钥
- en: The default region in which you want to operate
  id: totrans-41
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望操作的默认区域
- en: The default output format in which you want your data
  id: totrans-42
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您希望数据输出的默认格式
- en: Now, let's try to deploy a simple `Hello World` Lambda application via SAM.
    We will have two code files for this. One is the Python file and the other is
    the template `yaml` file.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们尝试通过 SAM 部署一个简单的 `Hello World` Lambda 应用程序。为此，我们将有两个代码文件。一个是 Python 文件，另一个是模板
    `yaml` 文件。
- en: 'We will use the default `Hello World` example for Python, as we are trying
    to understand how SAM deployments work instead of stressing too much about the
    code for now. The Python script will be as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将使用默认的 Python `Hello World` 示例，因为我们现在试图理解 SAM 部署的工作原理，而不是过于关注代码。Python 脚本如下：
- en: '[PRE6]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will use a basic template `yaml` file for the SAM function too, whose only
    job is to define its meta information and to run the Python script that is mentioned
    previously. The template `yaml` file will look like this:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们也将为 SAM 函数使用一个基本的模板 `yaml` 文件，它的唯一任务是定义其元信息以及运行之前提到的 Python 脚本。这个模板 `yaml`
    文件看起来是这样的：
- en: '[PRE7]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Now, we will package the SAM template we just created, using the command line.
    The instructions for packaging the code are as follows:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将使用命令行打包我们刚刚创建的 SAM 模板。打包代码的说明如下：
- en: '[PRE8]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'You get the following output:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 你将得到以下输出：
- en: '![](img/00261.jpeg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00261.jpeg)'
- en: 'This will create an output `yaml` file that needs to be deployed, as mentioned
    in the preceding trace. The `output.yaml` file looks like this:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将创建一个需要部署的输出 `yaml` 文件，正如前面跟踪中提到的。`output.yaml` 文件看起来是这样的：
- en: '[PRE9]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Now, as we have packaged the SAM template, we will now deploy it. We will use
    the instructions shown in the trace when we did the packaging for the deployment
    process. The instructions for deployment are as follows:'
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，随着我们已经打包了 SAM 模板，我们将现在部署它。我们将使用在打包时显示的说明进行部署过程。部署说明如下：
- en: '[PRE10]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This will give you the following output:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将给出以下输出：
- en: '![](img/00262.jpeg)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00262.jpeg)'
- en: 'We can head over to the CloudFormation console to look at the template we just
    deployed. The deployed template will look something like this:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们可以转到 CloudFormation 控制台查看我们刚刚部署的模板。部署的模板看起来可能如下所示：
- en: '![](img/00263.jpeg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00263.jpeg)'
- en: 'In the Template tab shown here, we can see both the original template and the
    processed template. The original template can be seen by selecting the first radio
    button:'
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这里显示的模板选项卡中，我们可以看到原始模板和已处理的模板。通过选择第一个单选按钮可以看到原始模板：
- en: '![](img/00264.jpeg)'
  id: totrans-61
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00264.jpeg)'
- en: 'The processed template can be seen by selecting the second radio button under
    the Template tab at the bottom:'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过在底部的模板选项卡下选择第二个单选按钮，我们可以看到已处理的模板：
- en: '![](img/00265.jpeg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00265.jpeg)'
- en: 'If we head over to the Lambda console, we will see the newly created Lambda
    function via SAM with the corresponding name given:'
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们转到 Lambda 控制台，我们将看到通过 SAM 创建的新 Lambda 函数，并带有相应的名称：
- en: '![](img/00266.jpeg)'
  id: totrans-65
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00266.jpeg)'
- en: 'Clicking on the Functions will give us more information about it. It also mentions
    the SAM template and the CloudFormation template from which it was created:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击函数将给我们更多关于它的信息。它还提到了创建它的 SAM 模板和 CloudFormation 模板：
- en: '![](img/00267.jpeg)'
  id: totrans-67
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00267.jpeg)'
- en: 'Let''s create basic tests for the Lambda function. The test creation console
    can be opened by clicking on the Test button:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为 Lambda 函数创建基本的测试。可以通过点击 Test 按钮打开测试创建控制台：
- en: '![](img/00268.jpeg)'
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00268.jpeg)'
- en: 'Now, once the tests have been created, you can again click on the Test button.
    This will run the testing with the updated test cases. The logs from a successful
    run will look like this:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，一旦创建了测试，你还可以再次点击 Test 按钮。这将使用更新的测试用例运行测试。成功的运行日志将看起来像这样：
- en: '![](img/00269.jpeg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00269.jpeg)'
- en: 'Now, let''s go through each component of the Lambda function properly. The
    Configuration shows the triggers and the logging settings of our Lambda function.
    We are logging into the CloudWatch service of AWS:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，让我们正确地逐一介绍 Lambda 函数的各个组件。配置显示了我们的 Lambda 函数的触发器和日志设置。我们正在登录到 AWS 的 CloudWatch
    服务：
- en: '![](img/00270.jpeg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00270.jpeg)'
- en: 'We can also see the invocation metrics in the Monitoring option in the Lambda
    console. We can see exactly one Lambda invocation:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还可以在 Lambda 控制台的监控选项中看到调用指标。我们可以看到精确的一个 Lambda 调用：
- en: '![](img/00271.jpeg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00271.jpeg)'
- en: 'You can see the code files in the Function code section. You can see the folder
    structure in the left-hand corner of the interactive code editor that contains
    both the `template.yaml` file and the function code:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以在函数代码部分看到代码文件。你可以在交互式代码编辑器的左侧看到文件夹结构，其中包含 `template.yaml` 文件和函数代码：
- en: '![](img/00272.jpeg)'
  id: totrans-77
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00272.jpeg)'
- en: And further below, you can see the pre-existing environment variable named `lambda:createdBy`, and
    also the timeout setting we mentioned in our template.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此之下，你可以看到预先存在的环境变量名为 `lambda:createdBy`，以及我们在模板中提到的超时设置。
- en: Understanding security in SAM
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解 SAM 中的安全性
- en: 'So far, we have learned how to write, build, package, and deploy Lambda functions
    using the SAM. We will now understand how security works inside them:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经学习了如何使用SAM编写、构建、打包和部署Lambda函数。现在我们将了解它们内部的安全机制：
- en: 'You can scroll to the bottom of the Lambda console to see the network and security
    settings, where the VPC and the subnet details are mentioned:'
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你可以滚动到Lambda控制台的底部，以查看网络和安全设置，其中提到了VPC和子网详情：
- en: '![](img/00273.jpeg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00273.jpeg)'
- en: 'Now, we will add in the network settings, which include the security groups
    and the subnet IDs:'
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，我们将添加网络设置，包括安全组和子网ID：
- en: '[PRE11]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Now, package and deploy the newly updated SAM template like we did in the previous
    section:'
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，就像我们在上一节中所做的那样，打包和部署新更新的SAM模板：
- en: '![](img/00274.jpeg)'
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00274.jpeg)'
- en: 'Now you will see the corresponding network and security settings, once you
    have packaged and deployed the CloudFormation template after the corresponding
    edits. The Network section looks as follows:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在你将看到相应的网络和安全设置，一旦你在进行相应的编辑后打包和部署了CloudFormation模板。网络部分看起来如下：
- en: '![](img/00275.jpeg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00275.jpeg)'
- en: 'You can also see the inbound rules of your corresponding security groups that
    are linked with the VPC in your Network settings:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以在你的网络设置中看到与你的VPC关联的对应安全组的入站规则：
- en: '![](img/00276.jpeg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00276.jpeg)'
- en: 'You can also see the completed CloudFormation template in your console with
    the updated network and security settings, which means that deployment has been
    successful:'
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以在你的控制台中看到带有更新后的网络和安全设置的完成CloudFormation模板，这意味着部署已成功：
- en: '![](img/00277.jpeg)'
  id: totrans-92
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00277.jpeg)'
- en: 'You can also see the original template under the Templates option in the bottom
    corner of the console:'
  id: totrans-93
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你还可以在控制台底部的模板选项中看到原始模板：
- en: '![](img/00278.jpeg)'
  id: totrans-94
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00278.jpeg)'
- en: 'The processed template can be found by selecting the View processed template
    option beside the original template option at the bottom of the console:'
  id: totrans-95
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 处理后的模板可以通过在控制台底部的原始模板选项旁边选择“查看处理后的模板”选项来找到：
- en: '![](img/00279.jpeg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/00279.jpeg)'
- en: Summary
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to deploy Lambda functions as infrastructure
    as code via SAM, which is a new way of writing and deploying Lambda functions.
    This makes it easier to integrate with other IaaS services, such as CloudFormation.
    We also learned about the AWS CloudFormation service, which is the service that
    allows and facilitates infrastructure as code. We also learned how security works
    inside SAM code and how to configure VPC and subnet settings.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何通过SAM将Lambda函数作为基础设施代码进行部署，这是一种编写和部署Lambda函数的新方法。这使得它更容易与其他IaaS服务集成，例如CloudFormation。我们还学习了AWS
    CloudFormation服务，这是一种允许并促进基础设施代码化的服务。我们还学习了如何在SAM代码内部工作安全以及如何配置VPC和子网设置。
- en: In the next chapter, you will be introduced to Microsoft Azure functions, along
    with configuring and understanding the components of the tool.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，你将介绍Microsoft Azure函数，以及配置和理解该工具的组件。
