- en: Part IV
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Ongoing operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Our work with an architecture is not finished when a system is up and running.
    A working application requires ongoing maintenance and effort to keep it running
    successfully.
  prefs: []
  type: TYPE_NORMAL
- en: Systems will be in a maintenance phase during the longest part of their life
    cycles. This phase is where we add features, detect and fix defects, and analyze
    the system's behavior to prevent problems.
  prefs: []
  type: TYPE_NORMAL
- en: 'To be able to do that successfully, we need to have tools to cover two basic
    elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Observability*: This is the capability of knowing what''s going on in a live
    system. Low-observability systems are difficult or even impossible to understand,
    which makes it difficult to know if there are problems or work out the cause of
    those problems. In high-observability systems, it''s easy to infer the internal
    state and the events flowing inside the system, which allows for easy detection
    of the critical structures where problems are being generated.The main tools for
    observing systems are **logs** and **metrics**, which are used in conjunction
    to allow us to understand the system and analyze its behavior.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Observability is a property of the system itself. Typically, monitoring is the
    action of obtaining information about the current or past state of the system.
    It's all a bit of a naming debate, but technically, you *monitor* the system to
    collect the *observable* parts of it.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '*Analysis*: To detect problems in more controlled situations, we have two important
    tools, **debugging** and **profiling**. The first is a staple of the development
    process, working step by step through code to understand how a piece of code works
    and ascertain why it''s doing what it is doing. Profiling is instrumenting the
    code to show how it works and, specifically, determine which parts take the most
    time to execute, to allow you to act on them and improve their performance.These
    two tools work complementarily with one another and allow us to fix and improve
    different kinds of problems after they''ve been detected.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this section, we will also talk about the challenge of making changes while
    the system is in operation. The only constant in software is change, and balancing
    existing systems with new functionalities is a critical ability. Part of this
    task is to coordinate between different teams so they are aware of the implications
    of their changes and can work as a single unit.
  prefs: []
  type: TYPE_NORMAL
- en: 'This section comprises of the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: Logging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Metrics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Profiling
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Ongoing architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start by understanding how to use logs for monitoring.
  prefs: []
  type: TYPE_NORMAL
