- en: '13'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a Content Management System
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you created the application models for the e-learning
    platform and learned how to create and apply data fixtures for models. You created
    a custom model field to order objects and implemented user authentication.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to build the functionality for instructors
    to create courses and manage the contents of those courses in a versatile and
    efficient manner.
  prefs: []
  type: TYPE_NORMAL
- en: You will be introduced to class-based views, which offer a new perspective to
    build your application compared to the function-based views you have built in
    previous examples. You will also explore code reusability and modularity through
    the use of mixins, which are techniques that you can apply in future projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a **content management system** (**CMS**) using class-based views and
    mixins
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build formsets and model formsets to edit course modules and module contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Manage groups and permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement a drag-and-drop functionality to reorder modules and content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Figure 13.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_13_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.1: Diagram of functionalities built in Chapter 13'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will implement different class-based views. You will create
    the mixin classes `OwnerMixin`, `OwnerEditMixin`, and `OwnerCourseMixin`, which
    will contain common functionality that you will reuse in other classes. You will
    create **CRUD** (**Create**, **Read**, **Update**, **Delete**) views for the `Course`
    model by implementing `ManageCourseListView` to list courses, `CourseCreateView`
    to create courses, `CourseUpdateView` to update courses, and `CourseDeleteView`
    to delete courses. You will build the `CourseModuleUpdateView` view to add/edit/delete
    course modules and `ModuleContentListView` to list the module’s contents. You
    will also implement `ContentCreateUpdateView` to create and update course contents
    and `ContentDeleteView` to delete contents. You will finally implement a drag-and-drop
    functionality to reorder course modules and contents using the `ModuleOrderView`
    and `ContentOrderView` views, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Note that all views that inherit the mixin `OwnerCourseMixin` redirect the user
    back to the `ManageCourseListView` view after a successful action. These redirects
    have not been added to the diagram for simplicity.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13).
  prefs: []
  type: TYPE_NORMAL
- en: All Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that comes along with this chapter. You can follow the
    instructions to install each Python module below or you can install all the requirements
    at once with the command `python -m pip install -r requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a CMS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now that you have created a versatile data model, you are going to build the
    CMS. The CMS will allow instructors to create courses and manage their content.
    You need to provide the following functionality:'
  prefs: []
  type: TYPE_NORMAL
- en: List the courses created by the instructor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create, edit, and delete courses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add modules to a course and reorder them
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add different types of content to each module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Reorder course modules and content
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s start with the basic CRUD views.
  prefs: []
  type: TYPE_NORMAL
- en: Creating class-based views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You are going to build views to create, edit, and delete courses. You will
    use class-based views for this. Edit the `views.py` file of the `courses` application
    and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: This is the `ManageCourseListView` view. It inherits from Django’s generic `ListView`.
    You override the `get_queryset()` method of the view to retrieve only courses
    created by the current user. To prevent users from editing, updating, or deleting
    courses they didn’t create, you will also need to override the `get_queryset()`
    method in the create, update, and delete views. When you need to provide a specific
    behavior for several class-based views, it is recommended that you use *mixins*.
  prefs: []
  type: TYPE_NORMAL
- en: Using mixins for class-based views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Mixins are a special kind of multiple inheritance for a class. If you are new
    to mixins in Python, all you need to understand is that they are a type of class
    designed to supply methods to other classes but aren’t intended to be used independently.
    This allows you to develop shared functionalities that can be incorporated into
    various classes in a modular manner, simply by having those classes inherit from
    mixins. The concept is similar to a base class but you can use multiple mixins
    to extend the functionality of a given class.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two main situations for using mixins:'
  prefs: []
  type: TYPE_NORMAL
- en: You want to provide multiple optional features for a class
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You want to use a particular feature in several classes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django comes with several mixins that provide additional functionality to your
    class-based views. You can learn more about mixins at [https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/](https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/).
  prefs: []
  type: TYPE_NORMAL
- en: 'You are going to implement a common behavior for multiple views in mixin classes
    and use it for the course views. Edit the `views.py` file of the `courses` application
    and modify it as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In this code, you create the `OwnerMixin` and `OwnerEditMixin` mixins. You will
    use these mixins together with the `ListView`, `CreateView`, `UpdateView`, and
    `DeleteView` views provided by Django. `OwnerMixin` implements the `get_queryset()`
    method, which is used by the views to get the base QuerySet. Your mixin will override
    this method to filter objects by the `owner` attribute to retrieve objects that
    belong to the current user (`request.user`).
  prefs: []
  type: TYPE_NORMAL
- en: '`OwnerEditMixin` implements the `form_valid()` method, which is used by views
    that use Django’s `ModelFormMixin` mixin – that is, views with forms or model
    forms such as `CreateView` – and `UpdateView`. `form_valid()` is executed when
    the submitted form is valid.'
  prefs: []
  type: TYPE_NORMAL
- en: The default behavior for this method is saving the instance (for model forms)
    and redirecting the user to `success_url`. You override this method to automatically
    set the current user in the `owner` attribute of the object being saved. By doing
    so, you set the owner for an object automatically when it is saved.
  prefs: []
  type: TYPE_NORMAL
- en: Your `OwnerMixin` class can be used for views that interact with any model that
    contains an `owner` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also define an `OwnerCourseMixin` class that inherits `OwnerMixin` and
    provides the following attributes for child views:'
  prefs: []
  type: TYPE_NORMAL
- en: '`model`: The model used for QuerySets; it is used by all views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields`: The fields of the model to build the model form of the `CreateView`
    and `UpdateView` views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`success_url`: Used by `CreateView`, `UpdateView`, and `DeleteView` to redirect
    the user after the form is successfully submitted or the object is deleted. You
    use a URL with the name `manage_course_list`, which you are going to create later.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You define an `OwnerCourseEditMixin` mixin with the following attribute:'
  prefs: []
  type: TYPE_NORMAL
- en: '`template_name`: The template you will use for the `CreateView` and `UpdateView`
    views.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, you create the following views that subclass `OwnerCourseMixin`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ManageCourseListView`: Lists the courses created by the user. It inherits
    from `OwnerCourseMixin` and `ListView`. It defines a specific `template_name`
    attribute for a template to list courses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CourseCreateView`: Uses a model form to create a new `Course` object. It uses
    the fields defined in `OwnerCourseMixin` to build a model form and also subclasses
    `CreateView`. It uses the template defined in `OwnerCourseEditMixin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CourseUpdateView`: Allows the editing of an existing `Course` object. It uses
    the fields defined in `OwnerCourseMixin` to build a model form and also subclasses
    `UpdateView`. It uses the template defined in `OwnerCourseEditMixin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CourseDeleteView`: Inherits from `OwnerCourseMixin` and the generic `DeleteView`.
    It defines a specific `template_name` attribute for a template to confirm the
    course deletion.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You have created the basic views to manage courses. While you have implemented
    CRUD views on your own, the third-party application Neapolitan allows you to implement
    the standard list, detail, create, and delete views within a single view. You
    can learn more about Neapolitan at [https://github.com/carltongibson/neapolitan](https://github.com/carltongibson/neapolitan).
  prefs: []
  type: TYPE_NORMAL
- en: Next, you are going to use Django authentication groups and permissions to limit
    access to these views.
  prefs: []
  type: TYPE_NORMAL
- en: Working with groups and permissions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Currently, any user can access the views to manage courses. You want to restrict
    these views so that only instructors have permission to create and manage courses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django’s authentication framework includes a permission system. By default,
    Django generates four permissions for each model in the installed applications:
    `add`, `view`, `change`, and `delete`. These permissions correspond to the actions
    of creating new instances, viewing existing ones, editing, and deleting instances
    of a model.'
  prefs: []
  type: TYPE_NORMAL
- en: Permissions can be assigned directly to individual users or groups of users.
    This approach simplifies user management by grouping permissions and enhances
    the security of your application.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to create a group for instructor users and assign permissions
    to create, update, and delete courses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the development server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/admin/auth/group/add/` in your browser to create
    a new `Group` object. Add the name `Instructors` and choose all permissions of
    the `courses` application, except those of the `Subject` model, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_13_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.2: The Instructors group permissions'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there are four different permissions for each model: *can view*,
    *can add*, *can change*, and *can delete*. After choosing permissions for this
    group, click the **SAVE** button.'
  prefs: []
  type: TYPE_NORMAL
- en: Django creates permissions for models automatically but you can also create
    custom permissions. You will learn how to create custom permissions in *Chapter
    15,* *Building an API*. You can read more about adding custom permissions at [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/admin/auth/user/add/` and create a new user. Edit
    the user and add it to the **Instructors** group, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_13_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.3: User group selection'
  prefs: []
  type: TYPE_NORMAL
- en: Users inherit the permissions of the groups they belong to, but you can also
    add individual permissions to a single user using the administration site. Users
    that have `is_superuser` set to `True` have all permissions automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you will apply permissions in practice by incorporating them into our
    views.
  prefs: []
  type: TYPE_NORMAL
- en: Restricting access to class-based views
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You are going to restrict access to the views so that only users with the appropriate
    permissions can add, change, or delete `Course` objects. You are going to use
    the following two mixins provided by `django.contrib.auth` to limit access to
    views:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LoginRequiredMixin`: Replicates the `login_required` decorator’s functionality.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PermissionRequiredMixin`: Grants access to the view to users with a specific
    permission. Remember that superusers automatically have all permissions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `courses` application and add the following
    import:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Make `OwnerCourseMixin` inherit `LoginRequiredMixin` and `PermissionRequiredMixin`,
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add a `permission_required` attribute to the course views, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '`PermissionRequiredMixin` checks that the user accessing the view has the permission
    specified in the `permission_required` attribute. Your views are now only accessible
    to users with the proper permissions.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create URLs for these views. Create a new file inside the `courses` application
    directory and name it `urls.py`. Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: These are the URL patterns for the list, create, edit, and delete course views.
    The `pk` parameter refers to the primary key field. Remember that **pk is short
    for primary key**. Every Django model has a field that serves as its primary key.
    By default, the primary key is the automatically generated `id` field. The Django
    generic views for single objects retrieve an object by its `pk` field. Edit the
    main `urls.py` file of the `educa` project and include the URL patterns of the
    `courses` application, as follows.
  prefs: []
  type: TYPE_NORMAL
- en: 'New code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You need to create the templates for these views. Create the following directories
    and files inside the `templates/` directory of the `courses` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `courses/manage/course/list.html` template and add the following code
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This is the template for the `ManageCourseListView` view. In this template,
    you list the courses created by the current user. You include links to edit or
    delete each course and a link to create new courses.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the development server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/accounts/login/?next=/course/mine/` in your browser
    and log in with a user belonging to the `Instructors` group. After logging in,
    you will be redirected to the `http://127.0.0.1:8000/course/mine/` URL and you
    should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B21088_13_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.4: The instructor courses page with no courses'
  prefs: []
  type: TYPE_NORMAL
- en: This page will display all courses created by the current user.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the template that displays the form for the create and update
    course views. Edit the `courses/manage/course/form.html` template and write the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `form.html` template is used for both the `CourseCreateView` and `CourseUpdateView`
    views. In this template, you check whether an `object` variable is in the context.
    If `object` exists in the context, you know that you are updating an existing
    course and you use it in the page title. Otherwise, you are creating a new `Course`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/course/mine/` in your browser and click the **CREATE
    NEW COURSE** button. You will see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_13_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.5: The form to create a new course'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the form and click the **SAVE COURSE** button. The course will be saved
    and you will be redirected to the course list page. It should look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B21088_13_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.6: The instructor courses page with one course'
  prefs: []
  type: TYPE_NORMAL
- en: Then, click the **Edit** link for the course you have just created. You will
    see the form again but, this time, you are editing an existing `Course` object
    instead of creating one.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, edit the `courses/manage/course/delete.html` template and add the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is the template for the `CourseDeleteView` view. This view inherits from
    `DeleteView`, provided by Django, which expects user confirmation to delete an
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the course list in the browser and click the **Delete** link of your course.
    You should see the following confirmation page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message  Description
    automatically generated](img/B21088_13_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.7: The Delete course confirmation page'
  prefs: []
  type: TYPE_NORMAL
- en: Click the **CONFIRM** button. The course will be deleted and you will be redirected
    to the course list page again.
  prefs: []
  type: TYPE_NORMAL
- en: Instructors can now create, edit, and delete courses. Next, you need to provide
    them with a CMS to add course modules and their contents. You will start by managing
    course modules.
  prefs: []
  type: TYPE_NORMAL
- en: Managing course modules and their contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You are going to build a system to manage course modules and their contents.
    You will need to build forms that can be used for managing multiple modules per
    course and different types of content for each module. Both modules and their
    contents will have to follow a specific order and you should be able to reorder
    them using the CMS.
  prefs: []
  type: TYPE_NORMAL
- en: Using formsets for course modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django comes with an abstraction layer to work with multiple forms on the same
    page. These groups of forms are known as *formsets*. Formsets manage multiple
    instances of a certain `Form` or `ModelForm`. All forms are submitted at once
    and the formset takes care of the initial number of forms to display, limiting
    the maximum number of forms that can be submitted and validating all the forms.
  prefs: []
  type: TYPE_NORMAL
- en: Formsets include an `is_valid()` method to validate all forms at once. You can
    also provide initial data for the forms and specify how many additional empty
    forms to display. You can learn more about formsets at [https://docs.djangoproject.com/en/5.0/topics/forms/formsets/](https://docs.djangoproject.com/en/5.0/topics/forms/formsets/)
    and about model formsets at [https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets](https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets).
  prefs: []
  type: TYPE_NORMAL
- en: 'Since a course is divided into a variable number of modules, it makes sense
    to use formsets to manage them. Create a `forms.py` file in the `courses` application
    directory and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: This is the `ModuleFormSet` formset. You build it using the `inlineformset_factory()`
    function provided by Django. Inline formsets are a small abstraction on top of
    formsets that simplify working with related objects. This function allows you
    to build a model formset dynamically for the `Module` objects related to a `Course`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'You use the following parameters to build the formset:'
  prefs: []
  type: TYPE_NORMAL
- en: '`fields`: The fields that will be included in each form of the formset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`extra`: Allows you to set the number of empty extra forms to display in the
    formset.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`can_delete`: If you set this to `True`, Django will include a Boolean field
    for each form that will be rendered as a checkbox input. It allows you to mark
    the objects that you want to delete.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `courses` application and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CourseModuleUpdateView` view handles the formset to add, update, and delete
    modules for a specific course. This view inherits from the following mixins and
    views:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TemplateResponseMixin`: This mixin takes charge of rendering templates and
    returning an HTTP response. It requires a `template_name` attribute that indicates
    the template to be rendered and provides the `render_to_response()` method to
    pass it a context and render the template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`View`: The basic class-based view provided by Django.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In this view, you implement the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_formset()`: You define this method to avoid repeating the code to build
    the formset. You create a `ModuleFormSet` object for the given `Course` object
    with optional data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dispatch()`: This method is provided by the `View` class. It takes an HTTP
    request and its parameters and attempts to delegate to a lowercase method that
    matches the HTTP method used. A `GET` request is delegated to the `get()` method
    and a `POST` request to `post()`, respectively. In this method, you use the `get_object_or_404()`
    shortcut function to get the `Course` object for the given `id` parameter that
    belongs to the current user. You include this code in the `dispatch()` method
    because you need to retrieve the course for both `GET` and `POST` requests. You
    save it into the `course` attribute of the view to make it accessible to other
    methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get()`: Executed for `GET` requests. You build an empty `ModuleFormSet` formset
    and render it to the template together with the current `Course` object, using
    the `render_to_response()` method provided by `TemplateResponseMixin`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post()`: Executed for `POST` requests. In this method, you perform the following
    actions:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You build a `ModuleFormSet` instance using the submitted data.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: You execute the `is_valid()` method of the formset to validate all of its forms.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: If the formset is valid, you save it by calling the `save()` method. At this
    point, any changes made, such as adding, updating, or marking modules for deletion,
    are applied to the database. Then, you redirect users to the `manage_course_list`
    URL. If the formset is not valid, you render the template to display any errors
    instead.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL pattern to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new directory inside the `courses/manage/` template directory and
    name it `module`. Create a `courses/manage/module/formset.html` template and add
    the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this template, you create a `<form>` HTML element in which you include `formset`.
    You also include the management form for the formset with the variable `{{ formset.management_form
    }}`. The management form includes hidden fields to control the initial, total,
    minimum, and maximum number of forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `courses/manage/course/list.html` template and add the following link
    for the `course_module_update` URL below the course **Edit** and **Delete** links:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You have included the link to edit the course modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/course/mine/` in your browser. Create a course
    and click the **Edit modules** link for it. You should see a formset, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_13_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.8: The course edit page, including the formset for course modules'
  prefs: []
  type: TYPE_NORMAL
- en: The formset includes a form for each `Module` object contained in the course.
    After these, two empty extra forms are displayed because you set `extra=2` for
    `ModuleFormSet`. When you save the formset, Django will include another two extra
    fields to add new modules.
  prefs: []
  type: TYPE_NORMAL
- en: You can see that formsets are incredibly useful for managing multiple instances
    of forms on a single page. Formsets simplify the process of collecting and validating
    data from sets of similar forms efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: After understanding how formsets work, you will explore advanced form capabilities
    by creating forms dynamically that adapt to the various types of content that
    will be added to course modules.
  prefs: []
  type: TYPE_NORMAL
- en: Adding content to course modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, you need a way to add content to course modules. You have four different
    types of content: text, video, image, and file. You could consider creating four
    different views to create content, with one form for each model. However, you
    are going to take a more versatile approach and create a view that handles creating
    or updating the objects of any content model. You will build the form for this
    view dynamically, according to the type of content the instructor wants to add
    to the course: `Text`, `Video`, `Image`, or `File`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `courses` application and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the first part of `ContentCreateUpdateView`. It will allow you to create
    and update different models’ contents. This view defines the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get_model()`: Here, you check that the given model name is one of the four
    content models: `Text`, `Video`, `Image`, or `File`. Then, you use Django’s `apps`
    module to obtain the actual class for the given model name. If the given model
    name is not one of the valid ones, you return `None`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_form()`: You build a dynamic form using the `modelform_factory()` function
    of the form’s framework. Since you are going to build a form for the `Text`, `Video`,
    `Image`, and `File` models, you use the `exclude` parameter to specify the common
    fields to exclude from the form and let all other attributes be included automatically.
    By doing so, you don’t have to know which fields to include depending on the model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dispatch()`: This receives the following URL parameters and stores the corresponding
    module, model, and content object as class attributes:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module_id`: The ID for the module that the content is/will be associated with.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_name`: The model name of the content to create/update.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`id`: The ID of the object that is being updated. It’s `None` to create new
    objects.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Add the following `get()` and `post()` methods to `ContentCreateUpdateView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'These methods are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`get()`: Executed when a `GET` request is received. You build the model form
    for the `Text`, `Video`, `Image`, or `File` instance that is being updated. Otherwise,
    you pass no instance to create a new object since `self.obj` is `None` if no ID
    is provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`post()`: Executed when a `POST` request is received. You build the model form,
    passing any submitted data and files to it. Then, you validate it. If the form
    is valid, you create a new object and assign `request.user` as its owner before
    saving it to the database. You check for the `id` parameter. If no ID is provided,
    you know the user is creating a new object instead of updating an existing one.
    If this is a new object, you create a `content` object for the given module and
    associate the new content with it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL patterns to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The new URL patterns are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`module_content_create`: To create new text, video, image, or file objects
    and add them to a module. It includes the `module_id` and `model_name` parameters.
    The first one allows you to link the new content object to the given module. The
    latter specifies the content model for which to build the form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`module_content_update`: To update an existing text, video, image, or file
    object. It includes the `module_id` and `model_name` parameters and an `id` parameter
    to identify the content that is being updated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Create a new directory inside the `courses/manage/` template directory and
    name it `content`. Create the template `courses/manage/content/form.html` and
    add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This is the template for the `ContentCreateUpdateView` view. In this template,
    you check whether an `object` variable is in the context. If `object` exists in
    the context, you are updating an existing object. Otherwise, you are creating
    a new object.
  prefs: []
  type: TYPE_NORMAL
- en: You include `enctype="multipart/form-data"` in the `<form>` HTML element because
    the form contains a file upload for the `File` and `Image` content models.
  prefs: []
  type: TYPE_NORMAL
- en: Run the development server, open `http://127.0.0.1:8000/course/mine/`, click
    **Edit modules** for an existing course, and create a module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, open the Python shell with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Obtain the ID of the most recently created module, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the development server and open `http://127.0.0.1:8000/course/module/6/content/image/create/`
    in your browser, replacing the module ID with the one you obtained before. You
    will see the form to create an `Image` object, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_13_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.9: The course Add new content form'
  prefs: []
  type: TYPE_NORMAL
- en: Don’t submit the form yet. If you try to do so, it will fail because you haven’t
    defined the `module_content_list` URL yet. You are going to create it in a bit.
  prefs: []
  type: TYPE_NORMAL
- en: 'You also need a view for deleting content. Edit the `views.py` file of the
    `courses` application and add the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The `ContentDeleteView` class retrieves the `content` object with the given
    ID. It deletes the related `Text`, `Video`, `Image`, or `File` object. Finally,
    it deletes the `content` object and redirects the user to the `module_content_list`
    URL to list the other contents of the module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL pattern to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Now, instructors can create, update, and delete content easily. The approach
    you have learned in this section is very useful for managing forms with diverse
    data in a generic manner. This method can be applied in other situations where
    a flexible solution is needed to handle data inputs.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we are going to create the views and templates to display
    course modules and contents.
  prefs: []
  type: TYPE_NORMAL
- en: Managing modules and their contents
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You have built views to create, edit, and delete course modules and their contents.
    Next, you need a view to display all modules for a course and list the contents
    of a specific module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `courses` application and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: This is the `ModuleContentListView` view. This view gets the `Module` object
    with the given ID that belongs to the current user and renders a template with
    the given module.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file of the `courses` application and add the following
    URL pattern to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new template inside the `templates/courses/manage/module/` directory
    and name it `content_list.html`. Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Make sure that no template tag is split over multiple lines; the Django template
    engine expects the tags to be clearly defined and uninterrupted.
  prefs: []
  type: TYPE_NORMAL
- en: This is the template that displays all modules for a course and the contents
    of the selected module. You iterate over the course modules to display them in
    a sidebar. You iterate over a module’s contents and access `content.item` to get
    the related `Text`, `Video`, `Image`, or `File` object. You also include links
    to create new text, video, image, or file content.
  prefs: []
  type: TYPE_NORMAL
- en: 'You want to know which type of object each of the `item` objects is: `Text`,
    `Video`, `Image`, or `File`. You need the model name to build the URL to edit
    the object. Besides this, you could display each item in the template differently
    based on the type of content it is. You can get the model name for an object from
    the model’s `Meta` class by accessing the object’s `_meta` attribute. However,
    Django doesn’t allow you to access variables or attributes starting with an underscore
    in templates to prevent retrieving private attributes or calling private methods.
    You can solve this by writing a custom template filter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following file structure inside the `courses` application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `course.py` module and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: This is the `model_name` template filter. You can apply it in templates as `object|model_name`
    to get the model name for an object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `templates/courses/manage/module/content_list.html` template and add
    the following line below the `{% extends %}` template tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'This will load the `course` template tags. Then, find the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace them with the following ones:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, you display the item model name in the template and also
    use the model name to build the link to edit the object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `courses/manage/course/list.html` template and add a link to the `module_content_list`
    URL, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The new link allows users to access the contents of the first module of the
    course if there are any.
  prefs: []
  type: TYPE_NORMAL
- en: 'Stop the development server and run it again using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: By stopping and running the development server, you make sure that the `course`
    template tags file gets loaded.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/course/mine/` and click the **Manage contents**
    link for a course that contains at least one module. You will see a page like
    the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_13_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.10: The page to manage course module contents'
  prefs: []
  type: TYPE_NORMAL
- en: When you click on a module in the left sidebar, its contents are displayed in
    the main area. The template also includes links to add new text, video, image,
    or file content for the module being displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a couple of different types of content to the module and look at the result.
    Module contents will appear below **Module contents**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_13_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.11: Managing different module contents'
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will allow course instructors to reorder modules and module contents
    with a simple drag-and-drop functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Reordering modules and their contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will implement a JavaScript drag-and-drop functionality to let course instructors
    reorder the modules of a course by dragging them. Drag-and-drop enhances the user
    interface, offering a natural way to reorder elements that is more intuitive than
    using numbers or clicking buttons. It is also a time-saver for course instructors,
    who will be able to reorganize course modules and their contents easily.
  prefs: []
  type: TYPE_NORMAL
- en: To implement this feature, we will use the HTML5 Sortable library, which simplifies
    the process of creating sortable lists using the native HTML5 Drag and Drop API.
  prefs: []
  type: TYPE_NORMAL
- en: When users finish dragging a module, you will use the JavaScript Fetch API to
    send an asynchronous HTTP request to the server that stores the new module order.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more information about the HTML5 Drag and Drop API at [https://www.w3schools.com/html/html5_draganddrop.asp](https://www.w3schools.com/html/html5_draganddrop.asp).
    You can find examples built with the HTML5 Sortable library at [https://lukasoppermann.github.io/html5sortable/](https://lukasoppermann.github.io/html5sortable/).
    Documentation for the HTML5 Sortable library is available at [https://github.com/lukasoppermann/html5sortable](https://github.com/lukasoppermann/html5sortable).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s implement the views to update the order of course modules and module contents.
  prefs: []
  type: TYPE_NORMAL
- en: Using mixins from django-braces
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`django-braces` is a third-party module that contains a collection of generic
    mixins for Django. These mixins provide additional features for class-based views
    that are useful for various common scenarios. You can see a list of all mixins
    provided by `django-braces` at [https://django-braces.readthedocs.io/](https://django-braces.readthedocs.io/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'You will use the following mixins of `django-braces`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`CsrfExemptMixin`: Used to avoid checking the **cross-site request forgery**
    (**CSRF**) token in the `POST` requests. You need this to perform AJAX `POST`
    requests without the need to pass a `csrf_token`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`JsonRequestResponseMixin`: Parses the request data as JSON and also serializes
    the response as JSON and returns an HTTP response with the `application/json`
    content type.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Install `django-braces` via `pip` using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'You need a view that receives the new order of module IDs encoded in JSON and
    updates the order accordingly. Edit the `views.py` file of the `courses` application
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: This is the `ModuleOrderView` view, which allows you to update the order of
    course modules.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can build a similar view to order a module’s contents. Add the following
    code to the `views.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, edit the `urls.py` file of the `courses` application and add the following
    URL patterns to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: Finally, you need to implement the drag-and-drop functionality in the template.
    We will use the HTML5 Sortable library, which simplifies the creation of sortable
    elements using the standard HTML Drag and Drop API. There are other JavaScript
    libraries that will allow you to achieve the same, but we chose HTML5 Sortable
    because it is lightweight and leverages the native HTML5 Drag and Drop API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `base.html` template located in the `templates/` directory of the
    `courses` application and add the following block highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This new block named `include_js` will allow you to insert JavaScript files
    into any template that extends the `base.html` template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, edit the `courses/manage/module/content_list.html` template and add the
    following code highlighted in bold to the bottom of the template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: In this code, you load the HTML5 Sortable library from a public **content delivery
    network** (**CDN**). Remember you loaded a JavaScript library from a CDN before
    in *Chapter 6,* *Sharing Content on Your Website*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the following `domready` block highlighted in bold to the `courses/manage/module/content_list.html`
    template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In these new lines, you add JavaScript code to the `{% block domready %}` block
    that was defined in the event listener for the `DOMContentLoaded` event in the
    `base.html` template. This guarantees that your JavaScript code will be executed
    once the page has been loaded. With this code, you define the options for the
    HTTP request to reorder modules that you will implement next. You will send a
    `POST` request using the Fetch API to update the module order. The `module_order`
    URL path is built and stored in the JavaScript constant `moduleOrderUrl`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following code highlighted in bold to the `domready` block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: In the new code, you define a `sortable` element for the HTML element with `id="modules"`,
    which is the module list in the sidebar. Remember that you use a CSS selector
    `#` to select the element with the given `id`. When you start dragging an item,
    the HTML5 Sortable library creates a placeholder item so that you can easily see
    where the element will be placed.
  prefs: []
  type: TYPE_NORMAL
- en: You set the `forcePlacehoderSize` option to `true`, to force the placeholder
    element to have a height, and you use `placeholderClass` to define the CSS class
    for the placeholder element. You use the class named `placeholder` that is defined
    in the `css/base.css` static file loaded in the `base.html` template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/course/mine/` in your browser and click on **Manage
    contents** for any course. Now, you can drag and drop the course modules in the
    left sidebar, as in *Figure 13.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_13_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.12: Reordering modules with the drag-and-drop functionality'
  prefs: []
  type: TYPE_NORMAL
- en: While you drag the element, you will see the placeholder item created by the
    Sortable library, which has a dashed-line border. The placeholder element allows
    you to identify the position in which the dragged element will be dropped.
  prefs: []
  type: TYPE_NORMAL
- en: When you drag a module to a different position, you need to send an HTTP request
    to the server to store the new order. This can be done by attaching an event handler
    to the sortable element and sending a request to the server using the JavaScript
    Fetch API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `domready` block of the `courses/manage/module/content_list.html`
    template and add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'In the new code, an event listener is created for the `sortupdate` event of
    the sortable element. The `sortupdate` event is triggered when an element is dropped
    in a different position. The following tasks are performed in the event function:'
  prefs: []
  type: TYPE_NORMAL
- en: An empty `modulesOrder` dictionary is created. The keys for this dictionary
    will be the module IDs, and the values will contain the index of each module.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The list elements of the `#modules` HTML element are selected with `document.querySelectorAll()`,
    using the `#modules li` CSS selector.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`forEach()` is used to iterate over each list element.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The new index for each module is stored in the `modulesOrder` dictionary. The
    ID of each module is retrieved from the HTML `data-id` attribute by accessing
    `module.dataset.id`. You use the ID as the key of the `modulesOrder` dictionary
    and the new index of the module as the value.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The order displayed for each module is updated by selecting the element with
    the `order` CSS class. Since the index is zero-based and we want to display a
    one-based index, we add `1` to `index`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A key named `body` is added to the `options` dictionary with the new order contained
    in `modulesOrder`. The `JSON.stringify()` method converts the JavaScript object
    into a JSON string. This is the body for the HTTP request to update the module
    order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Fetch API is used by creating a `fetch()` HTTP request to update the module
    order. The `ModuleOrderView` view that corresponds to the `module_order` URL takes
    care of updating the order of the modules.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can now drag and drop modules. When you finish dragging a module, an HTTP
    request is sent to the `module_order` URL to update the order of the modules.
    If you refresh the page, the latest module order will be kept because it was updated
    in the database. *Figure 13.13* shows a different order for the modules in the
    sidebar after sorting them using drag and drop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_13_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.13: New order for modules after reordering them with drag and drop'
  prefs: []
  type: TYPE_NORMAL
- en: If you run into any issues, remember to use your browser’s developer tools to
    debug JavaScript and HTTP requests. Usually, you can right-click anywhere on the
    website to open the contextual menu and click on **Inspect** or **Inspect Element**
    to access the web developer tools of your browser.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s add the same drag-and-drop functionality to allow course instructors to
    sort module contents as well.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `domready` block of the `courses/manage/module/content_list.html`
    template and add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In this case, you use the `content_order` URL instead of `module_order` and
    build the `sortable` functionality on the HTML element with the ID `module-contents`.
    The functionality is mainly the same as for ordering course modules. In this case,
    you don’t need to update the numbering of the contents because they don’t include
    any visible index.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you can drag and drop both modules and module contents, as in *Figure
    13.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_13_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 13.14: Reordering module contents with the drag-and-drop functionality'
  prefs: []
  type: TYPE_NORMAL
- en: Great! You built a very versatile CMS for the course instructors.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use class-based views and mixins to create
    a CMS. You acquired knowledge about reusability and modularity that you can apply
    to your future applications. You also worked with groups and permissions to restrict
    access to your views, gaining insights into security and how to control actions
    on data. You learned how to use formsets and model formsets to manage course modules
    and their content in a flexible manner. You also built a drag-and-drop functionality
    with JavaScript to reorder course modules and their contents with an improved
    user interface.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will create a student registration system and manage
    student enrollment in courses. You will also learn how to render different types
    of content and improve the performance of your application by caching content
    using Django’s cache framework.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter13)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django mixins documentation: [https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/](https://docs.djangoproject.com/en/5.0/topics/class-based-views/mixins/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Neapolitan package to create CRUD views: [https://github.com/carltongibson/neapolitan](https://github.com/carltongibson/neapolitan)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Creating custom permissions: [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#custom-permissions)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django formsets: [https://docs.djangoproject.com/en/5.0/topics/forms/formsets/](https://docs.djangoproject.com/en/5.0/topics/forms/formsets/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django model formsets: [https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets](https://docs.djangoproject.com/en/5.0/topics/forms/modelforms/#model-formsets)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML5 Drag and Drop API: [https://www.w3schools.com/html/html5_draganddrop.asp](https://www.w3schools.com/html/html5_draganddrop.asp)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML5 Sortable library documentation: [https://github.com/lukasoppermann/html5sortable](https://github.com/lukasoppermann/html5sortable)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTML5 Sortable library examples: [https://lukasoppermann.github.io/html5sortable](https://lukasoppermann.github.io/html5sortable)/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`django-braces` documentation: [https://django-braces.readthedocs.io/](https://django-braces.readthedocs.io/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
