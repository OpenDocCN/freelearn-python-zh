- en: Chapter 3. Calculate This!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you learned about the uses of variables, different
    data types, and functions. You created your own function and learned how to get
    basic information from a user with the `raw_input()` function. Using these building
    blocks, you can begin to design basic programs.
  prefs: []
  type: TYPE_NORMAL
- en: The first program we make will be a five-function calculator that calculates
    two numbers as input. The calculator will help us learn to understand the mathematical
    functions that are a part of Python, which will be useful for our game at the
    end of the book. In addition to this, this calculator will form the foundation
    for a more complex calculator in [Chapter 5](ch05.html "Chapter 5. Loops and Logic"),
    *Loops and Logic*.
  prefs: []
  type: TYPE_NORMAL
- en: The calculator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first calculator was invented in 1966 at Texas Instruments ([http://www.ti.com/corp/docs/company/history/timeline/eps/1960/docs/67-handheld_calc_invented.htm](http://www.ti.com/corp/docs/company/history/timeline/eps/1960/docs/67-handheld_calc_invented.htm))
    and was able to do addition, subtraction, multiplication, and division. The calculator
    had eighteen keys and could display twelve numbers on the screen. While it doesn't
    seem like much at first, especially compared to the technology we now enjoy, there
    is quite a lot of code and decision making that go into the operations that a
    basic calculator performs.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we want to figure out how something works, we need to break it down into
    smaller parts. Let''s take a look at how the calculator adds numbers together:'
  prefs: []
  type: TYPE_NORMAL
- en: First, the calculator needs power.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user enters the first number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user presses an operation key (*+*, *-*, ***, or */*).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user enters a second number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The user presses the *=* key.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then, an answer is printed to the screen.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On a basic calculator, the computer does not keep all of the numbers on the
    screen. The computer must store the first number that the user entered in its
    memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will run our first calculator program inside of the terminal/command prompt,
    so there are other things we must consider in addition to how the numbers will
    be stored. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: How will we prompt the user to get the information that we need?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens if the user enters a text string instead of integers or floats?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What happens if the user enters numbers as a string instead of as integers or
    floats?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are just some of the logical questions that need to be considered as we
    plan how to write our own calculator program. Can you think of any other problems
    that need to be solved?
  prefs: []
  type: TYPE_NORMAL
- en: Basic functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We learned at the beginning of this chapter that the first electronic calculator
    had four basic functions: addition, subtraction, multiplication, and division.
    We will be working on programming each of these functions, and we will also learn
    a fifth mathematical function that we can program for our calculator called modulo.'
  prefs: []
  type: TYPE_NORMAL
- en: Through the beginning of this chapter, we will use the `addition()` function
    as our example. Once we have created and tested an `addition()` function that
    does what we want it to, we will then build our other functions.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s return to our example of the addition function in [Chapter 2](ch02.html
    "Chapter 2. Variables, Functions, and Users"), *Variables, Functions, and Users*.
    Recall how we programmed this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Basic functions](img/B04681_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The addition function in the preceding screenshot does perform proper addition
    and prints the answer. However, there are problems with designing an `addition()`
    function this way. One problem is that the program can only add the same two numbers
    over and over again. Another problem is that, in this program, we are only using
    one mathematical operation (addition). This `addition()` function is too inflexible
    on its own; we need to design a function that is more user friendly.
  prefs: []
  type: TYPE_NORMAL
- en: To design a better mathematical function, we need to solve the problem of user-inputs
    by letting the user change the numbers in the calculation. We also need to design
    a calculator where the user has mathematical functions other than addition that
    can be performed.
  prefs: []
  type: TYPE_NORMAL
- en: Operations on two numbers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to use the `raw_input()` function that we learned about in [Chapter
    2](ch02.html "Chapter 2. Variables, Functions, and Users"), *Variables, Functions,
    and Users*. Recall that from this chapter, we cannot perform addition on two strings.
    In fact, we cannot perform any kind of mathematical operations on strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code asks for user input and stores the input in the computer
    as strings. Type the following code in your Python shell to take a look at the
    results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'What happens when you call the `addition()` function? If you call the `addition()`
    function, you will see that the addition has *NOT* happened. This program just
    prints the two numbers together, side by side, in the order that they were entered
    by the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Operations on two numbers](img/B04681_03_12_replace.jpg)'
  prefs: []
  type: TYPE_IMG
- en: While putting information side by side is useful to combine words into a phrase
    or sentence, it is not very helpful in performing calculations with numbers, as
    we discovered in [Chapter 2](ch02.html "Chapter 2. Variables, Functions, and Users"),
    *Variables, Functions, and Users*. Instead, you will want to convert the user's
    answer to a number so that you can perform mathematical operations on the numbers.
    To convert the `input()` function to a number, you will use `int()` or the `float()`
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Convert data into numbers – int() and float()
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to change the user data entered in the `raw_input()` function from
    a string to a number, we need to use the whole-number-integer, `int()`, or floating-point-number,
    `float()`, functions to make the computer interpret the answer as a number.
  prefs: []
  type: TYPE_NORMAL
- en: Floating point to whole number conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'To try an example, type the following in your Python shell, and pay attention
    to the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, with `44.5`, you should notice that the `int()` function
    rounds up the number to `44`, while the `float()` function keeps the number at
    `44.5`. This is because `int()` likes whole numbers and rounds numbers down automatically.
    Take a look at this screenshot from the Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Floating point to whole number conversion](img/B04681_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Whole number to floating point conversion
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now, try the reverse. Convert a whole number into an integer and a float using
    this code in your Python shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding sample code, you see that the `int()` function keeps the number
    at `24`, while the `float()` function adds a decimal place to the number, making
    it print as `24.0`. This is because float is designed to deal with numbers and
    their decimal places. You can see the results in this screenshot of the Python
    shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Whole number to floating point conversion](img/B04681_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Text strings fail in int() and float()
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you try to enter a text string into the `int()` or `float()` functions,
    you will get an error. In fact, you will only be able to type the first line of
    these two lines into your Python shell. This will immediately evaluate the `int(''hello'')`
    code as an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This happens because `int()` and `float()` apply specifically to numbers and
    do not deal with things that cannot be changed into numbers. In the following
    screenshot, notice that the Python shell returns something called a traceback
    with three lines of error code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text strings fail in int() and float()](img/B04681_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We will switch between using `int()` and `float()` throughout the book so that
    you become used to using both functions:'
  prefs: []
  type: TYPE_NORMAL
- en: '`int()`: This function converts data into a whole number'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`float()`: This function converts data into a number with decimal places'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that we know about converting strings into numbers, let''s rewrite our
    addition function, get input from the user, and convert the input into decimal
    numbers using the `float()` function. You can copy this code directly into your
    text editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'In the following screenshot, you see the Python shell with the addition function
    defined. You also see that when the addition function is called, each `raw_input`
    line is printed and the user answers by typing in a number. The first and second
    input have been converted into integers, so when the answer is added together
    you will notice that the output is now correct according to the standard rules
    of addition:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text strings fail in int() and float()](img/B04681_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Creating our first calculator file
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s save your work before we continue. Open your text editor and make a
    file called `first_calc.py`, then type the addition function that you just made
    into that file. Make sure you save the file in your work folder that you made
    on your desktop back in [Chapter 1](ch01.html "Chapter 1. Welcome! Let''s Get
    Started"), *Welcome! Let''s Get Started*. It is important to keep your work organized
    so that you can run your code to test it and show it off:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Creating our first calculator file](img/B04681_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: New functions – subtraction, multiplication, and division
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have created an `addition()` function that accepts data from the
    user and converts it into numbers, we are ready to create functions for subtraction,
    multiplication, and division.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are coming back to this after a break, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open your Python shell so that you can test your code as you write.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, open your text editor (jEdit in Mac/Linux and Notepad ++ in Windows).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have both windows open on your desktop as you program.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you successfully write and test a line or a few lines of code in the Python
    shell, copy the lines into your text editor and then *Save Your Work* to the `first_calc.py`
    file that you created earlier in this chapter.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Save your work early and as often as you can! Avoid being upset by accidentally
    erasing your code!
  prefs: []
  type: TYPE_NORMAL
- en: Subtraction
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'For the next part of our calculator, we will make our subtraction function.
    We will follow the same prompts as we used for the addition function to create
    a second function that performs subtraction. In your Python shell, try these steps
    to create the subtraction function:'
  prefs: []
  type: TYPE_NORMAL
- en: Type `def` to start your function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Name your function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add proper syntax, which is parenthesis `()` and `:`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tab the remaining lines in four spaces each.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request the first number from the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Request the second number from the user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Print the output using the minus (`-`) symbol for subtraction.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have tried creating this function in the Python shell, try calling
    the function using this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'If the function call works, then you can type your code into your code file
    exactly as it appears in your Python shell. If your `subtraction()` function does
    not run, make sure you did not make any errors when typing your code in the shell.
    Double-check your code and rerun it until it is smooth. If you are stuck, you
    can copy the lines of the following code into your Python shell; they will perform
    subtraction on two integers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have tested your code in the shell, you can then type it into your
    text editor. Remember to save your work in your `first_calc.py` file. Your `first_calc.py`
    file should now look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Subtraction](img/B04681_03_08_Revised.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Multiplication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By now, you might have observed a pattern in our functions. The multiplication
    function will follow the same format and logic rules as the addition and subtraction
    functions. You can continue to ask the user to enter each number, and then the
    computer will perform a proper calculation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is for the multiplication function. You can copy it directly,
    but it is a better idea to try to create the multiplication function on your own.
    If you try to create your function, you will know how well you have learned the
    way to create a function. When you are ready, you will see this code for the multiplication
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have tested your code in your Python shell, remember to type the function
    in your text editor and save your work in your `first_calc.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Multiplication](img/B04681_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Division
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Division is the final basic operation that we will program for our first calculator
    program. As with multiplication, you have already done most of the work for the
    division part of the calculator. See if you can recall how to create a division
    function from scratch. Once you have tested your code, compare it to the following
    code and see if it matches up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Once you have tested your code, remember to save your work in your `first_calc.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Division](img/B04681_03_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Finding a remainder – modulo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Modulo can seem like a strange concept. In fact, unless you are a programmer,
    it is likely that you have never heard of modulo. Modulo is a mathematical function
    that allows us to do a division problem but only return the remainder. Why is
    this even useful? Why is it a good idea, and why should we care?
  prefs: []
  type: TYPE_NORMAL
- en: 'Usually, we want to know the entire answer to a division problem—the quotient
    and the remainder. There are times, though, when we will only want to know the
    remainder of the division problem. We will only care about what is leftover. Modulo
    is like a monster eating our dessert: we give the monster numbers to divide, and
    it just gives us leftovers.'
  prefs: []
  type: TYPE_NORMAL
- en: While modulo is not especially useful in the world of school arithmetic, it
    can be very useful in moving objects in a game. So, it is good for us to build
    a modulo function and learn how modulo works.
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a modulo function, you will need to get user input, just like all
    of the other functions you made. Then, you will call the modulo function. The
    symbol for modulo is `%` You can place the modulo operator where you would normally
    place the division sign. Copy the following code in your Python shell as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '![Finding a remainder – modulo](img/B04681_03_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, you can see how we added the modulo function to
    the other functions. If you still find modulo confusing, don't worry right away.
    Just know that it might come up as you are designing games, and you can check
    back here, as well as do an Internet, search to better understand modulo.
  prefs: []
  type: TYPE_NORMAL
- en: Running your program
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To run your program, enter your command line or terminal window and type the
    following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Your program should run through addition, subtraction, multiplication, division,
    and modulo, and print answers to the user for each set of numbers that they enter.
    If there are errors when the program runs, the error messages from your computer
    will usually tell you that something is wrong. The error message will even tell
    you what line of code in your file has the problem so that it is easier to debug
    (find and fix errors in) your code.
  prefs: []
  type: TYPE_NORMAL
- en: A quick task for you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1\. What kind of data does the `input()` function return?
  prefs: []
  type: TYPE_NORMAL
- en: Elements
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Decimals
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Strings
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Integers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. What does the `int()` function do?
  prefs: []
  type: TYPE_NORMAL
- en: Changes data to whole numbers
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changes data to a string
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Does nothing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Changes a function into a different function
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. How is the `float()` function different from the `int()` function?
  prefs: []
  type: TYPE_NORMAL
- en: They are not different, they do the same thing
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `float()` function deals with strings only
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `float()` function converts data into floating point numbers only
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`float()` converts words into numbers'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. If you make a function called `addition()` in your Python shell, how do
    you run that addition function to test it?
  prefs: []
  type: TYPE_NORMAL
- en: Type addition in your Python shell
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type def addition in your Python shell
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `addition()` in your Python shell
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `addition()` in your Python shell
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have read this chapter, you hopefully have a calculator program
    that you can run! This program is more interactive and can do more things than
    your first program, so you should share this program with your family and friends
    to show them how you have improved your skills.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about how decisions are made, and we will
    improve our calculator program by teaching it how to let a user choose which operation
    to perform as well as how many operands (numbers) to enter. We are going to get
    into things that are a bit more complicated, but we will go through them step
    by step so that you can understand each piece of what we are doing.
  prefs: []
  type: TYPE_NORMAL
