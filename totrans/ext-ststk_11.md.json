["```py\n'''\nProvide authentication using an authentication web service. This service\nmust be configured with an API ID and API key in the master configuration.\n\nwebauth:\n  apiid: 0123456789\n  apikey: abcdef0123456789abcdef0123456789\n\nThis file should be saved as salt/auth/webauth.py\n'''\nimport json\nimport base64\nimport urllib\nimport salt.utils.http\n\ndef auth(username, password):\n    '''\n    Authenticate using an external web authentication service\n    '''\n    apiid = __opts__.get('webauth', {}).get('apiid', None)\n    apikey = __opts__.get('webauth', {}).get('apikey', None)\n    url = 'https://api.example.com/v1/checkauth'\n\n    username = urllib.quote(username)\n    password = urllib.quote(password)\n    data = {\n        'type': 'basic',\n        'value': base64.b64encode('{0}:{1}'.format(username, password))\n    }\n\n    result = salt.utils.http.query(\n        path,\n        method='POST',\n        username=apiid,\n        password=apikey,\n        data=json.dumps(data),\n        status=True,\n        opts=__opts__,\n    )\n    if result.get('status', 403) == 200:\n        return True\n\n    return False\n```", "```py\n    apiid = __opts__.get('webauth', {}).get('apiid', None)\n    apikey = __opts__.get('webauth', {}).get('apikey', None)\n    url = 'https://api.example.com/v1/checkauth'\n```", "```py\n    username = urllib.quote(username)\n    password = urllib.quote(password)\n    data = {\n        'type': 'basic',\n        'value': base64.b64encode('{0}:{1}'.format(username, password))\n    }\n```", "```py\n    result = salt.utils.http.query(\n        path,\n        method='POST',\n        username=apiid,\n        password=apikey,\n        data=json.dumps(data),\n        status=True,\n        opts=__opts__,\n    )\n```", "```py\n   if result.get('status', 403) == 200:\n        return True\n\n    return False\n```", "```py\nexternal_auth:\n  pam:\n    moe:\n      - .*\n      - '@runner'\n      - '@wheel'\n    larry:\n      - test.*\n      - disk.*\n      - network.*\n      - '@runner'\n      - '@wheel'\n  webauth:\n    shemp:\n      - test.*\n      - network.*\n      - '@runner'\n      - '@wheel'\n```", "```py\nsalt --auth=webauth --username=larry --password=123pass '*' test.ping\n\n```", "```py\nrest_cherrypy:\n  port: 8080\n  host: 127.0.0.1\n  debug: True\n  disable_ssl: True\n```", "```py\n# salt-master -l debug\n# salt-api -l debug\n\n```", "```py\n# curl localhost:8080/run \\\n -H 'Accept: application/json' \\\n -d username=larry \\\n -d password=123pass \\\n -d eauth=pam \\\n -d client=local \\\n -d tgt='*' \\\n -d fun='test.ping'\n\n```", "```py\n{\"return\": [{\"dufresne\": true}]}\n```", "```py\n<h2>401 Unauthorized</h2>\n<p>No permission -- see authorization schemes</p>\n```", "```py\n[WARNING ] Authentication failure of type \"eauth\" occurred for user larry.\n```", "```py\n127.0.0.1 - - [26/Jan/2016:08:25:32] \"POST /run HTTP/1.1\" 401 1214 \"\" \"curl/7.46.0\"\n[INFO    ] 127.0.0.1 - - [26/Jan/2016:08:25:32] \"POST /run HTTP/1.1\" 401 1214 \"\" \"curl/7.46.0\"\n\n```", "```py\n'''\nShow information about runners on the Master\n\nThis file should be saved as salt/wheel/runners.py\n'''\nimport salt.runner\n\ndef list_functions():\n    '''\n    List the functions for all runner modules.\n    '''\n    run_ = salt.runner.Runner(__opts__)\n    return sorted(run_.functions)\n```", "```py\n# curl localhost:8080/run \\\n -H 'Accept: application/json' \\\n -d username=larry \\\n -d password=123pass \\\n -d eauth=pam \\\n -d client=wheel \\\n -d fun='runners.list_functions'\n\n```", "```py\n\"return\": [{\"tag\": \"salt/wheel/20160126084725920013\", \"data\": {\"jid\": \"20160126084725920013\", \"return\": [\"manage.alived\", \"manage.allowed\", \"manage.bootstrap\", \"manage.bootstrap_psexec\", \"manage.down\", \"manage.get_stats\", \"manage.joined\", \"manage.key_regen\", \"manage.lane_stats\", \"manage.list_not_state\", \"manage.list_state\", \"manage.not_alived\", \"manage.not_allowed\", \"manage.not_joined\", \"manage.not_present\", \"manage.not_reaped\", \"manage.present\", \"manage.reaped\", \"manage.road_stats\", \"manage.safe_accept\", \"manage.status\", \"manage.tagify\", \"manage.up\", \"manage.versions\"], \"success\": true, \"_stamp\": \"2016-01-26T15:47:25.974625\", \"tag\": \"salt/wheel/20160126084725920013\", \"user\": \"larry\", \"fun\": \"wheel.runners.list_functions\"}}]}\n```", "```py\nfrom salt.utils.doc import strip_rst as _strip_rst\n\ndef doc():\n    '''\n    Return the docstrings for all runners.\n    '''\n    run_ = salt.runner.Runner(__opts__)\n    docs = {}\n    for fun in run_.functions:\n        docs[fun] = run_.functions[fun].__doc__\n    return _strip_rst(docs)\n```", "```py\n__func_alias__ = {\n    'list_': 'list'\n}\n\ndef list_():\n    '''\n    List the runners loaded on the minion\n    '''\n    run_ = salt.runner.Runner(__opts__)\n    runners = set()\n    for func in run_.functions:\n        comps = func.split('.')\n        if len(comps) < 2:\n            continue\n        runners.add(comps[0])\n    return sorted(runners)\n```", "```py\n'''\nShow information about runners on the Master\n\nThis file should be saved as salt/wheel/runners.py\n'''\nimport salt.runner\nfrom salt.utils.doc import strip_rst as _strip_rst\n\n__func_alias__ = {\n    'list_': 'list'\n}\n\ndef doc():\n    '''\n    Return the docstrings for all runners.\n    '''\n    run_ = salt.runner.Runner(__opts__)\n    docs = {}\n    for fun in run_.functions:\n        docs[fun] = run_.functions[fun].__doc__\n    return _strip_rst(docs)\n\ndef list_():\n    '''\n    List the runners loaded on the minion\n    '''\n    run_ = salt.runner.Runner(__opts__)\n    runners = set()\n    for func in run_.functions:\n        comps = func.split('.')\n        if len(comps) < 2:\n            continue\n        runners.add(comps[0])\n    return sorted(runners)\n\ndef list_functions():\n    '''\n    List the functions for all runner modules.\n    '''\n    run_ = salt.runner.Runner(__opts__)\n    return sorted(run_.functions)\n```", "```py\n# curl localhost:8080/run \\\n -H 'Accept: application/json' \\\n -d username=larry \\\n -d password=123pass \\\n -d eauth=pam \\\n -d client=wheel \\\n -d fun='runners.list'\n\n```", "```py\n# This reactor should be saved as /srv/reactor/test_delete.sls\ntest_delete_minion:\n  wheel.key.delete:\n    - match: data['bad_minion']\n```", "```py\nreactor:\n  - 'user/minon/delete/*':\n    - '/srv/reactor/test_delete.sls'\n```", "```py\n# touch /etc/salt/pki/master/minions/ronald\n\n```", "```py\n# salt myminion event.fire_master '{\"bad_minion\":\"ronald\"}' 'user/minion/delete/ronald'\n\n```", "```py\n# salt-key -L\n\n```", "```py\n# curl localhost:8080/run \\\n -H 'Accept: application/json' \\\n -d username=larry \\\n -d password=123pass \\\n -d eauth=pam \\\n -d client=wheel \\\n -d fun='key.list' \\\n -d match='ronald'\n{\"return\": [{\"tag\": \"salt/wheel/20160126091522567932\", \"data\": {\"jid\": \"20160126091522567932\", \"return\": {}, \"success\": true, \"_stamp\": \"2016-01-26T16:15:22.576966\", \"tag\": \"salt/wheel/20160126091522567932\", \"user\": \"larry\", \"fun\": \"wheel.key.list\"}}]}\n\n```", "```py\n    __salt__['disk.usage']()\n    __salt__['cmd.run']('ls -l /')\n    __salt__['cmd.run']('dir c:\\\\')\n    ```", "```py\n    # salt-call --local --skip-grains test.ping\n\n    ```", "```py\n    # salt-call --local test.ping\n\n    ```", "```py\nsalt/cloud/<minion_id>/<operation>\n```", "```py\nsalt/cloud/<minion_id>/creating\nsalt/cloud/<minion_id>/created\n```", "```py\nsalt/cloud/<minion_id>/deleting\nsalt/cloud/<minion_id>/deleted\n```", "```py\nsync_minion:\n  cmd.saltutil.sync_all:\n    - tgt: data['id']\n```", "```py\n__salt__['event.fire_master'](data_dict, some_tag)\n```", "```py\nimport os.path\nimport salt.utils.event\nimport salt.syspaths\nsock_dir = os.path.join(salt.syspaths.SOCK_DIR, 'master')\ntransport = __opts__.get('transport', 'zeromq')\nevent = salt.utils.event.get_event(\n    'master',\n    sock_dir,\n    transport,\n    listen=False,\n)\nevent.fire_event(data_dict, some_tag)\n```", "```py\n# salt-run state.event pretty=True\n```", "```py\n    # salt --versions-report\n\n    ```", "```py\n    # salt-cloud --versions-report\n\n    ```", "```py\n#salt\n\n```", "```py\n$ cd /path/to/salt\n$ pylint --rcfile=.pylintrc\n\n```", "```py\n    $ git clone git@github.com:mygithubuser/salt.git\n\n    ```", "```py\n    $ git clone https://github.com/mygithubuser/salt.git\n\n    ```", "```py\n    $ git remote add upstream https://github.com/saltstack/salt.git\n\n    ```", "```py\n    $ git checkout -b newfeature\n\n    ```", "```py\n    $ git checkout develop\n    $ git fetch upstream\n    $ git pull upstream develop\n    $ git checkout newfeature\n    $ git rebase develop\n\n    ```", "```py\n    $ git push origin newfeature\n\n    ```", "```py\n$ git checkout 2015.8\n\n```", "```py\n$ git push origin newfeature\n\n```"]