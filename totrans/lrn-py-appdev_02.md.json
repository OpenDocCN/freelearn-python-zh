["```py\n$ python ch01_ex03.py\n\n```", "```py\n>>> raise AssertionError(\"some error message\")\n\n```", "```py\nTraceback (most recent call last): \n File \"<stdin>\", line 1, in <module> \nAssertionError :  some error message\n\n```", "```py\n$ python finally_example1.py \nEnter a number: -1\nUh oh..Assertion Error. \nDo some special cleanup \n\n```", "```py\n$ python attackoftheorcs_v1_1.py\n\n```", "```py\nassert (self.health_meter + heal_by  <= self.max_hp)\n```", "```py\n>>> class GameUnitError(Exception):\n...     pass\n... \n>>>\n\n```", "```py\n>>> raise GameUnitError(\"ERROR: some problem with game unit\")\n\n```", "```py\n>>> raise GameUnitError(\"ERROR: some problem with game unit\")\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n__main__.GameUnitError: ERROR: some problem with game unit\n\n```", "```py\n    from gameuniterror import GameUnitError\n    ```", "```py\n$ python heal_exception_example.py\n\n```", "```py\nself.error_dict = { \n    'health_meter_problem':\"ERROR: Health meter problem!\"}\n```", "```py\n$ python heal_exception_example.py \nCreating a Knight..\nHealth: Sir Bar: 10\nhealth_meter > max_hp!\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nERROR: Health Meter Problem\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nHealth: Sir Bar: 110\n\n```", "```py\nclass HutNumberGreaterThanFiveError(HutError): pass\nclass NegativeHutNumberError(HutError): pass \n```"]