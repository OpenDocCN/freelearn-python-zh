- en: Chapter 2. The Singleton Design Pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we explored design patterns and their classifications.
    As we are aware, design patterns can be classified under three main categories:
    structural, behavioral, and creational patterns.'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will go through the Singleton design pattern—one of the
    simplest and well-known Creational design patterns used in application development.
    This chapter will give you a brief introduction to the Singleton pattern, take
    you through a real-world example where this pattern can be used, and explain it
    in detail with the help of Python implementations. You will learn about the Monostate
    (or Borg) design pattern that is a variant of the Singleton design pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics in brief:'
  prefs: []
  type: TYPE_NORMAL
- en: An understanding of the Singleton design pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A real-world example of the Singleton pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Singleton pattern implementation in Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Monostate (Borg) pattern
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At the end of the chapter, we have a short summary on Singletons. This will
    help you think independently about some of the aspects of the Singleton design
    pattern.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the Singleton design pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Singleton provides you with a mechanism to have one, and only one, object of
    a given type and provides a global point of access. Hence, Singletons are typically
    used in cases such as logging or database operations, printer spoolers, and many
    others, where there is a need to have only one instance that is available across
    the application to avoid conflicting requests on the same resource. For example,
    we may want to use one database object to perform operations on the DB to maintain
    data consistency or one object of the logging class across multiple services to
    dump log messages in a particular log file sequentially.
  prefs: []
  type: TYPE_NORMAL
- en: 'In brief, the intentions of the Singleton design pattern are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Ensuring that one and only one object of the class gets created
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing an access point for an object that is global to the program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controlling concurrent access to resources that are shared
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is the UML diagram for Singleton:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Understanding the Singleton design pattern](img/00003.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: A simple way of implementing Singleton is by making the constructor private
    and creating a static method that does the object initialization. This way, one
    object gets created on the first call and the class returns the same object thereafter.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, we will implement it in a different way as there's no option to create
    private constructors. Let's take a look at how Singletons are implemented in the
    Python language.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing a classical Singleton in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here is a sample code of the Singleton pattern in Python v3.5\. In this example,
    we will do two major things:'
  prefs: []
  type: TYPE_NORMAL
- en: We will allow the creation of only one instance of the `Singleton` class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If an instance exists, we will serve the same object again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code shows this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: override the `__new__` method (Python's special method to instantiate objects)
    to control the object creation. The s object gets created with the `__new__` method,
    but before this, it checks whether the object already exists. The `hasattr` method
    (Python's special method to know if an object has a certain property) is used
    to see if the `cls` object has the instance property, which checks whether the
    class already has an object. Till the time the `s1` object is requested, `hasattr()`
    detects that an object already exists and hence `s1` allocates the existing object
    instance (located at `0x102078ba8`).
  prefs: []
  type: TYPE_NORMAL
- en: Lazy instantiation in the Singleton pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One of the use cases for the Singleton pattern is lazy instantiation. For example,
    in the case of module imports, we may accidently create an object even when it's
    not needed. Lazy instantiation makes sure that the object gets created when it's
    actually needed. Consider lazy instantiation as the way to work with reduced resources
    and create them only when needed.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code example, when we say `s=Singleton()`, it calls the `__init__`
    method but no new object gets created. However, actual object creation happens
    when we call `Singleton.getInstance()`. This is how lazy instantiation is achieved.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Module-level Singletons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All modules are Singletons by default because of Python''s importing behavior.
    Python works in the following way:'
  prefs: []
  type: TYPE_NORMAL
- en: Checks whether a Python module has been imported.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If imported, returns the object for the module. If not imported, imports and
    instantiates it.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: So when a module gets imported, it is initialized. However, when the same module
    is imported again, it's not initialized again, which relates to the Singleton
    behavior of having only one object and returning the same object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Monostate Singleton pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We discussed the Gang of Four and their book in [Chapter 1](part0015_split_000.html#E9OE1-5ae934a69a004514b92177e2702ed0a9
    "Chapter 1. Introduction to Design Patterns"), *Introduction to Design Patterns*.
    GoF's Singleton design pattern says that there should be one and only one object
    of a class. However, as per Alex Martelli, typically what a programmer needs is
    to have instances sharing the same state. He suggests that developers should be
    bothered about the state and behavior rather than the identity. As the concept
    is based on all objects sharing the same state, it is also known as the Monostate
    pattern.
  prefs: []
  type: TYPE_NORMAL
- en: 'The Monostate pattern can be achieved in a very simple way in Python. In the
    following code, we assign the `__dict__` variable (a special variable of Python)
    with the `__shared_state` class variable. Python uses `__dict__` to store the
    state of every object of a class. In the following code, we intentionally assign
    `__shared_state` to all the created instances. So when we create two instances,
    `''b''` and `''b1''`, we get two different objects unlike Singleton where we have
    just one object. However, the object states, `b.__dict__` and `b1.__dict__` are
    the same. Now, even if the object variable `x` changes for object `b`, the change
    is copied over to the `__dict__` variable that is shared by all objects and even
    `b1` gets this change of the `x` setting from one to four:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Another way to implement the Borg pattern is by tweaking the `__new__` method
    itself. As we know, the `__new__` method is responsible for the creation of the
    object instance:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Singletons and metaclasses
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's start with a brief introduction to metaclasses. A metaclass is a class
    of a class, which means that the class is an instance of its metaclass. With metaclasses,
    programmers get an opportunity to create classes of their own type from the predefined
    Python classes. For instance, if you have an object, `MyClass`, you can create
    a metaclass, `MyKls`, that redefines the behavior of `MyClass` to the way that
    you need. Let's understand them in detail.
  prefs: []
  type: TYPE_NORMAL
- en: In Python, everything is an object. If we say `a=5`, then `type(a)` returns
    `<type 'int'>`, which means `a` is of the int type. However, `type(int)` returns
    `<type 'type'>`, which suggests the presence of a metaclass as int is a class
    of the `type` type.
  prefs: []
  type: TYPE_NORMAL
- en: 'The definition of class is decided by its metaclass, so when we create a class
    with `class A`, Python creates it by `A = type(name, bases, dict)`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the name of the class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`base`: This is the base class'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`dict`: This is the attribute variable'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, if a class has a predefined metaclass (by the name of `MetaKls`), Python
    creates the class by `A = MetaKls(name, bases, dict)`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at a sample metaclass implementation in Python 3.5:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the output of the preceding code:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Singletons and metaclasses](img/00006.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Python's special `__call__` method gets called when an object needs to be created
    for an already existing class. In this code, when we instantiate the `int` class
    with `int(4,5)`, the `__call__` method of the `MyInt` metaclass gets called, which
    means that the metaclass now controls the instantiation of the object. Wow, isn't
    this great?!
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding philosophy is used in the Singleton design pattern as well. As
    the metaclass has more control over class creation and object instantiation, it
    can be used to create Singletons. (Note: To control the creation and initialization
    of a class, metaclasses override the `__new__` and `__init__` method.)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The Singleton implementation with metclasses can be explained better with the
    following example code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: A real-world scenario – the Singleton pattern, part 1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a practical use case, we will look at a database application to show the
    use of Singletons. Consider an example of a cloud service that involves multiple
    read and write operations on the database. The complete cloud service is split
    across multiple services that perform database operations. An action on the UI
    (web app) internally will call an API, which eventually results in a DB operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'It''s clear that the shared resource across different services is the database
    itself. So, if we need to design the cloud service better, the following points
    must be taken care of:'
  prefs: []
  type: TYPE_NORMAL
- en: Consistency across operations in the database—one operation shouldn't result
    in conflicts with other operations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Memory and CPU utilization should be optimal for the handling of multiple operations
    on the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A sample Python implementation is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code is given here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A real-world scenario – the Singleton pattern, part 1](img/00007.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: 'In the preceding code, we can see following points being covered:'
  prefs: []
  type: TYPE_NORMAL
- en: We created a metaclass by the name of `MetaSingleton`. Like we explained in
    the previous section, the special `__call__` method of Python is used in the metaclass
    to create a Singleton.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The `database` class is decorated by the `MetaSingleton` class and starts acting
    like a Singleton. So, when the `database` class is instantiated, it creates only
    one object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the web app wants to perform certain operations on the DB, it instantiates
    the database class multiple times, but only one object gets created. As there
    is only one object, calls to the database are synchronized. Additionally, this
    is inexpensive on system resources and we can avoid the situation of memory or
    CPU resource.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Consider that instead of having one webapp, we have a clustered setup with multiple
    web apps but only one DB. Now, this is not a good situation for Singletons because,
    with every web app addition, a new Singleton gets created and a new object gets
    added that queries the database. This results in unsynchronized database operations
    and is heavy on resources. In such cases, database connection pooling is better
    than implementing Singletons.
  prefs: []
  type: TYPE_NORMAL
- en: A real-world scenario – the Singleton pattern, part 2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's consider another scenario where we implement health check services (such
    as Nagios) for our infrastructure. We create the `HealthCheck` class, which is
    implemented as a Singleton. We also maintain a list of servers against which the
    health check needs to run. If a server is removed from this list, the health check
    software should detect it and remove it from the servers configured to check.
  prefs: []
  type: TYPE_NORMAL
- en: In the following code, the `hc1` and `hc2` objects are the same as the class
    in Singleton.
  prefs: []
  type: TYPE_NORMAL
- en: Servers are added to the infrastructure for the health check with the `addServer()`
    method. First, the iteration of the health check runs against these servers. The
    `changeServer()` method removes the last server and adds a new one to the infrastructure
    scheduled for the health check. So, when the health check runs in the second iteration,
    it picks up the changed list of servers.
  prefs: []
  type: TYPE_NORMAL
- en: 'All this is possible with Singletons. When the servers get added or removed,
    the health check must be the same object that has the knowledge of the changes
    made to the infrastructure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A real-world scenario – the Singleton pattern, part 2](img/00008.jpeg)'
  prefs: []
  type: TYPE_IMG
- en: Drawbacks of the Singleton pattern
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'While Singletons are used in multiple places to good effect, there can be a
    few gotchas with this pattern. As Singletons have a global point of access, the
    following issues can occur:'
  prefs: []
  type: TYPE_NORMAL
- en: Global variables can be changed by mistake at one place and, as the developer
    may think that they have remained unchanged, the variables get used elsewhere
    in the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Multiple references may get created to the same object. As Singleton creates
    only one object, multiple references can get created at this point to the same
    object.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All classes that are dependent on global variables get tightly coupled as a
    change to the global data by one class can inadvertently impact the other class.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As part of this chapter, you learned a lot on Singletons. Here are a few points
    that we should remember about Singletons:'
  prefs: []
  type: TYPE_NORMAL
- en: There are many real-world applications where we need to create only one object,
    such as thread pools, caches, dialog boxes, registry settings, and so on. If we
    create multiple instances for each of these applications, it will result in the
    overuse of resources. Singletons work very well in such situations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Singleton; a time-tested and proven method of presenting a global point of access
    without many downsides.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Of course, there are a few downsides; Singletons can have an inadvertent impact
    working with global variables or instantiating classes that are resource-intensive
    but end up not utilizing them.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the Singleton design pattern and the context
    in which it's used. We understood that Singletons are used when there is a need
    to have only one object for a class.
  prefs: []
  type: TYPE_NORMAL
- en: We also looked at various ways in which Singletons can be implemented in Python.
    The classical implementation allowed multiple instantiation attempts but returned
    the same object.
  prefs: []
  type: TYPE_NORMAL
- en: We also discussed the Borg or Monostate pattern, which is a variation of the
    Singleton pattern. Borg allows the creation of multiple objects that share the
    same state unlike the single pattern described by GoF.
  prefs: []
  type: TYPE_NORMAL
- en: We went on to explore the webapp application where Singleton can be applied
    for consistent database operations across multiple services.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we also looked at situations where Singletons can go wrong and what
    situations developers need to avoid.
  prefs: []
  type: TYPE_NORMAL
- en: At the end of this chapter, we're now comfortable enough to take the next step
    and study other creational patterns and benefit from them.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll take a look at another creational pattern and the
    Factory design pattern. We'll cover the `Factory` method and Abstract Factory
    patterns and understand them in the Python implementation.
  prefs: []
  type: TYPE_NORMAL
