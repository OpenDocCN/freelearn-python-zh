["```py\nPython: Object.location\nbpy.data.objects['Cube'].location[0]\n```", "```py\n>>> bpy.data.objects['Cube'].location[0]\n0.0\n```", "```py\nbpy.data.objects['Cube'].location[0]  # X axis\nbpy.data.objects['Cube'].location[1]  # Y axis\nbpy.data.objects['Cube'].location[2]  # Z axis\n```", "```py\n    >>> print(\"Line One\")\n    ```", "```py\nif True:\n    print('Line One')\n    print('Line Two')\n```", "```py\n>>> if True:\n...     print('Line One')\n...\nLine One\n>>>     print('Line Two')\n  File \"<blender_console>\", line 1\n    print(\"Line Two\")\nIndentationError: unexpected indent\n```", "```py\nif True:\n    print('Line One')\n    #\n    print('Line Two')\n```", "```py\nmy_vector = Vector([1.0, 2.0, 3.0])\n```", "```py\ndel my_vector\n```", "```py\nbpy.ops.object.delete()\n```", "```py\nfrom mathutils import Vector\nmy_vector = Vector([1.0, 2.0, 3.0])\n```", "```py\nimport bpy\nfrom bpy import data as D\nfrom bpy import context as C\n...\n```", "```py\n    >>> len(bpy.data.objects)\n    ```", "```py\n    3\n    ```", "```py\n>>> bpy.data.objects[0]\nbpy.data.objects['Camera']\n>>> bpy.data.objects[1]\nbpy.data.objects['Cube']\n>>> bpy.data.objects[2]\nbpy.data.objects['Light']\n```", "```py\n>>> bpy.data.objects['Camera']\nbpy.data.objects['Camera']\n>>> bpy.data.objects['Cube']\nbpy.data.objects['Cube']\n>>> bpy.data.objects['Light']\nbpy.data.objects['Light']\n```", "```py\nimport bpy\nfor ob in bpy.data.objects:\n    print(ob.name, ob.type)\n```", "```py\nimport bpy\nfor i, ob in enumerate(bpy.data.objects):\n    print(i, ob.name, ob.type)\n```", "```py\n0 Camera CAMERA\n1 Cube MESH\n2 Light LIGHT\n```", "```py\nimport bpy\nbpy.data.objects[0].name ='z' + bpy.data.objects[0].name\n```", "```py\nimport bpy\nfor ob in bpy.data.objects:\n    ob.name ='z' + ob.name\n```", "```py\nimport bpy\nfor ob in list(bpy.data.objects):\n    ob.name = 'z' + ob.name\n```", "```py\nfor name in bpy.data.objects.keys():\n    print(name)\n```", "```py\nfor ob in bpy.data.objects.values():\n    print(ob.name, ob.type)\n```", "```py\nfor name, ob in bpy.data.objects.items():\n    print(name, ob.type)\n```", "```py\n>>> bpy.data.objects.new(\nnew()\nBlendDataObjects.new(name, object_data)\nAdd a new object to the main database\n```", "```py\nimport bpy\nmy_empty = bpy.data.objects.new('My Empty', None)\nprint('New Empty created:', my_empty)\n```", "```py\n>>> bpy.data.collections['Collection']\n```", "```py\nbpy.data.collections['Collection'].objects.link(my_empty)\n```", "```py\nbpy.data.objects.remove(my_empty)\n```", "```py\ncollection = bpy.data.collections['Collection']\ncollection.objects.unlink(bpy.data.objects['Cube'])\n```", "```py\nimport bpy\nnew_scene = bpy.data.scenes.new('My Scene')\nprint('New scene created:', new_scene.name)\n```", "```py\nimport bpy\nnew_scene = bpy.data.scenes.new('Another Scene')\nbpy.context.window.scene = new_scene\n```", "```py\nprint('The current scene is', bpy.context.scene.name)\n```", "```py\nimport bpy\nnew_layer = bpy.context.scene.view_layers.new('My Layer')\nprint('New layer created:', new_layer.name)\nbpy.context.window.view_layer = new_layer\nprint('Current layer:', bpy.context.view_layer.name)\n```", "```py\nimport bpy\nnew_layer = bpy.context.scene.view_layers.new('Another Layer')\nprint('New layer created:', new_layer.name)\nnew_scene = bpy.data.scenes.new('Another Scene')\nbpy.context.window.scene = new_scene\n# NOTE: the following line will not work\nbpy.context.window.view_layer = new_layer\nprint('Current layer:', bpy.context.view_layer.name)\n```", "```py\nbpy.context.object  # read only\nbpy.context.active_object  # read only, same as above\nbpy.context.view_layer.objects.active  # can be set\n```", "```py\nimport bpy\nview_layer = bpy.context.view_layer\nview_layer.objects.active = bpy.data.objects['Camera']\n```", "```py\n>>> bpy.context.selected_objects\n[bpy.data.objects['Cube'], bpy.data.objects['Light'], bpy.data.objects['Camera']]\n```", "```py\nimport bpy\nfor ob in bpy.context.selected_objects:\n    if ob is bpy.context.object:\n        print(ob.name, 'is active, skipping')\n        continue\n    print(ob.name, 'is selected')\n```", "```py\nCube is active, skipping\nLight is selected\nCamera is selected\n```", "```py\nbpy.context.view_layer.objects.active = None\n```", "```py\nis_sel = bpy.context.object in bpy.context.selected_objects\n```", "```py\nis_sel = bpy.context.object.select_get()\n```", "```py\n>>> bpy.context.object.select_set(\n```", "```py\nselect_set()\nObject.select_set(state, view_layer=None)\nSelect or deselect the object. The selection state is per view layer\n```", "```py\nimport bpy\nfor ob in bpy.context.selected_objects:\nob.select_set(False)\n```", "```py\nimport bpy\nm_layer = bpy.context.scene.view_layers.new('Sel_Mesh')\nc_layer = bpy.context.scene.view_layers.new('Sel_Cam')\nfor ob in bpy.data.objects:\n    ob.select_set(ob.type == 'MESH', view_layer=m_layer)\n    ob.select_set(ob.type == 'CAMERA', view_layer=c_layer)\n```"]