- en: Basic Switching
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It must have been an epic journey so far! Recollect the time when you would
    have started reading this book, did you ever imagine that things could be this
    simple? It is worth noting that everything starts off very simple and, slowly
    and steadily, with the need for more sophisticated systems, the complexity of
    the technology also increases. Go back to the time when personal computing was
    not really a thing. It was only used in business and companies such as IBM were
    only servicing business clients. At that time, people who wanted a personal computer
    had only one option. They needed to build it from scratch, and to be honest, a
    lot of people used to do that. It really wasn't that hard either at least from
    my perspective. But, in contrast to that time, think about what they have become
    right now. Ever thought of building a computer at home? By building, I mean designing
    everything and not just assembly of the CPU. It is not very easy.
  prefs: []
  type: TYPE_NORMAL
- en: What I am trying to tell you here is that there was a time when computers were
    exotic; they were not very common, and they had very limited functionalities.
    However, with time and the brains of people, such as Steve Jobs, Bill Gates, and
    Hewlett and Packard, computers became more user-friendly, more easily available,
    and a desirable commodity. Think of the same thing with robots. They are expensive;
    for most people, there is not much they can do with them and also they are rare
    in the public space. But, as you have learned, it is not very hard to build a
    robot for our personal use, and with some tweaking here and there and with inventive
    minds such as yours, things can be taken in an altogether different direction.
    You could be the next Steve Jobs or Bill Gates. All we need is zeal, passion,
    and out-of-the-box thinking. You may be ridiculed for your vision. But do remember
    every inventor has been called mad at some point in time. So the next time someone
    calls you mad, you can be very sure that you are progressing!
  prefs: []
  type: TYPE_NORMAL
- en: Well, I'm quite sure that, if you are a robotic enthusiast, then you must have
    seen the movie *Iron Man*. If you haven't seen it yet, then take a break from
    reading this book and go ahead and open Netflix and see that movie.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once I saw that movie, there were two main things that I wanted to build: one,
    the suit of Iron Man and other his personal assistant Jarvis, who takes care of
    all his needs. Though suits seem to be something that I may have to work on for
    a while, but, by that time, you can go ahead and build the personal assistant
    for yourself.'
  prefs: []
  type: TYPE_NORMAL
- en: Imagine your home doing things for itself. How cool would it be? It knows what
    you like, what time you wake up, when you come back home, and, based on that,
    it automatically does things for you. Best of all, it would not be something you
    buy off the shelf, rather you would be making it with your own hands.
  prefs: []
  type: TYPE_NORMAL
- en: Before you do any of this, I must tell you that you will be dealing with high
    voltages and considerable currents. Electricity is no joke, and you must take
    care at all times and wear all the safety equipment. If you are not sure of it,
    then it would be a good idea to get an electrician to help you. Before you touch
    or open any of the electrical boards, make sure that you are wearing non-conductive
    shoes; also inspect whether the tools such as screwdrivers, pliers, nose pliers,
    cutters, and other tools are well insulated and in good condition. It is a good
    idea to wear gloves for added safety. If you are under 18, then you must have
    an adult with you all times to help you.
  prefs: []
  type: TYPE_NORMAL
- en: Now that that's said, let's get started and see what we have got here.
  prefs: []
  type: TYPE_NORMAL
- en: Making Jarvis wake you up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, this one is very interesting, as you all know our human body is programmed
    in a certain way. Hence, we react to different stimuli in a very known way. Like
    when it gets dark, our brain produces hormones that trigger sleep. Once the sunlight
    falls on our eyes, we tend to wake up. Well, at least this should be the case!
    In recent times, our lifestyle has changed enormously, which has started to defy
    this cycle. That's why, we are seeing more and more cases of insomnia. Waking
    up by an alarm is certainly not natural. Hence, you are never happy listening
    to an alarm in the morning, even if it has your favorite song as its tone. Our
    sleep cycle is supposed to be synchronized with the sunlight, but nowadays hardly
    anyone wakes up by this method. So, in this chapter, let's first make a smart
    alarm that will replicate the natural way we wake up.
  prefs: []
  type: TYPE_NORMAL
- en: Working with relay and PIR sensor
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'As we are dealing with high voltage and higher currents, we would be using
    a relay. To do this, connect the wires as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/36131dfd-1664-4c69-a41c-d24fcd7961bf.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are done connecting it, upload the following code and let''s see what
    happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: OK, then it is a fairly simple code with not much explanation needed. We have
    done a very similar code before as well. Do you remember when? It was in the first
    few chapters when we were making a gardening robot where we had to fetch water
    to the plants at a certain time. All it is doing at this time is to check the
    time and whether the time is `06` hours and the minute is less than `20`. That
    is, the light would be switched on between 07:00 hours to 07:19 hours. Thereafter,
    it would switch off.
  prefs: []
  type: TYPE_NORMAL
- en: Making the alarm irritating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: But there is a problem. The problem is that the lights will be switched on and,
    no matter whether you get up, the light would automatically switch itself off
    within 20 minutes. That is a bit of problem because not every time will you wake
    up in just 20 minutes. So, in that case, what should we do? The first thing we
    need to do is to detect whether you have woken up. This is very simple and not
    much needs to be told here. If you wake up in the morning, it is very certain
    that you will move out of the bed. Once you do, we can detect the motion that
    can tell our automated system whether you have really woken up.
  prefs: []
  type: TYPE_NORMAL
- en: Now, what we can do here is something very simple. We can detect your motion,
    and based on that detection, we can be decisive on whether you have really woken
    up. This doesn't seem much of a task. All we need to do is to add a motion detection
    sensor. For this purpose, we can use a PIR sensor, which can tell us whether the
    motion has been detected. So, let's go ahead, add another layer of sensor on top
    of our system, and see what happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'So, first, connect the circuit as follows. While mounting the PIR sensor, do
    make sure that it is facing the bed and detecting any motion on and around it.
    Once the PIR is set up, wire the sensors as shown in the following diagram and
    see what happens:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4bb15b13-8f6e-4d8e-80b2-748bb3a86720.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once done, then go ahead and write the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'OK, let''s see what we have done. The code is extremely simple, but we had
    a small twist in it, that is,  `Irritation_Flag`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Now this variable works something like a snooze button. As we know, when we
    wake up sometimes, or in fact, most of the time, we again go back to sleep only
    to wake up much later to realize that we are late. To prevent this, we have this
    `Irritation_flag`, and what this basically would be used for is to detect the
    number of times you have performed the action to stop the alarm. How it would
    be used we will see later:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'In this line, we are simply comparing time values by hours and minutes. If
    the hours is `07` and minutes are fewer than or equal to `15`, then the lights
    would be switched off. There is also a condition that says `Irritation_Flag >
    0` as we have already declared in the beginning that the value of `Irritation_flag
    = 3`; hence, initially this condition will always be true. The last condition
    is `GPIO.input(PIR) == 0`; which means that the condition will only be satisfied
    when the PIR has not detected any motion. In very simple words, the alarm will
    go off every time between 07:00 and 07:15 if the PIR does not detect any motion:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: In this part of the program, the condition will only be true if the hours or `H`
    is equal to `7` and when the PIR is detecting some motion. Hence, every time when
    the time is between 07:00 and 07:59 and whenever the motion is detected, the condition
    will be true. Once true, the program will first switch off the light using the
    line `GPIO.output*LIGHT,GPIO.LOW`. Once it is turned off, it waits for `10` seconds
    using `time.sleep(10)`. Once the time is over, it will implement the following
    operation: `Irritation_Flag - Irritation_Flag - 1`. Now what it does is that it
    decrements the value of `Irritation_Flag` by `1` every time it detects a motion.
    So the first time a motion happens, the value of `Irritation_Flag` would be `2`;
    thereafter, it would be `1`, and finally, it would be `0`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look at the previous part of the code, you will be able to make out
    that the light would be switched on if the value of `Irritation_Flag` was greater
    than `0`. So if you want to turn off the light, you would have to move at least
    three times. Why three times? Because then the code `Irritation_Flag = Irritation
    - 1` would be executed three times so as to make the value get down to `0`, which
    obviously makes the condition `GPIO.input(PIR) > 0` false:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s say even after of all this, you still do not wake up. Then what
    should happen? We have something special for you here. Now, instead of an `if`
    condition, we have a `for` loop. What this will check for is that the time should
    be `07` hours, and minutes should be greater than `15`, `Irritation_Flag > 0`,
    and obviously no motion is being detected. Till the time all of these are true,
    the light would be switched on thereafter for `5` seconds, it would be kept switched
    on using the `time.sleep(5)`. The lights would be again switched on. Now this
    will keep on happening till the time the conditions are true or in other words,
    till the time is between 07:15 and 07:59. `Irritation)_Flag > 0`, that is, the
    motion is not detected for three times and there is no motion detected. Till that
    time, the for loop would keep on the switch on and off of the light in action. Due
    to frequent biking of light, there is a very higher chance of you waking up. This
    may be very effective, but surely not the most convenient. Well, however inconvenient
    it is, it will still be better than the conventional alarm:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: We have the entire light-based alarm ready for us to wake us up every morning.
    However, there is a problem. Once it is turned off, the value of `Irritation_Flag`
    will be `0`. Once it is turned to `0`, then no matter what the time is, the light
    would never start up. Hence, to make sure that the alarm is always operational
    at the same time every single day, we would need to set the value of the flag
    to any number more than `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Now in the preceding line, if `H != '07'`, then the `Irritation_flag` would
    be `3`. That is whenever the time is anything other than `07` hours, then the
    value of `Irritation_Flag` would be `3`.
  prefs: []
  type: TYPE_NORMAL
- en: It was simple, wasn't it? But I'm sure that it would do a good job to make sure
    you wake up on time.
  prefs: []
  type: TYPE_NORMAL
- en: Making it even more irritating
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Can you completely rely on the preceding system? If you really have control
    over your morning emotions of not getting out of the bed, then, yes, sure you
    can. But for those who just love to be in bed and sleep again after hitting the
    snooze button, then I am sure you would be able to find a way to switch off the
    light without properly waking up. So as in the code, the light would switch off
    whenever the motion was detected three times. But the motion can be anything.
    You can simply wave your hand while still being in the bed, and the system would
    detect it as a motion, which would defy the whole purpose. So what should we do
    now?
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a solution for it! We can use a way by which we can be sure that you
    have to get out of bed. For this very purpose, we will be using our IR proximity
    sensor, which we have used earlier in our projects, and based on the distance
    reading of the sensor, we can detect whether you have gone past any specific area.
    This can be really interesting as you can fit this sensor pointing away from the
    bed or maybe on the gate of the bathroom, and till the time, you do not cross
    that specific line. The system would not switch off the alarm. So let''s see how
    we would do it. First, connect the hardware, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c11c43ee-bf9a-4804-85d7-b468c85fb178.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Once you are done with the diagram, go ahead and upload the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Mind blown? This code seems quite complex, having conditions inside conditions
    and again some more conditions. Say hello to robotics! These conditions make up
    a lot of robot's programming. A robot has to see continuously what is happening
    around and make decisions according to it. It's also the way humans work, don't
    we?
  prefs: []
  type: TYPE_NORMAL
- en: 'So, that being said, let''s see what we are actually doing here. Most of the
    code is pretty much the same as the last one. The main difference comes somewhere
    around the middle of the programming section:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We are switching on the lights as soon as the time is between 07:00 and 07:15:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the hour of `07` whenever the PIR sensor is triggered or in other words,
    the PIR sensor detects any motion, then it will do a set of activities inside
    the `if` condition, which includes noting down the time by the function `datetime.datetime.now().strftime('%M')`
    and then storing it down in a variable named `M_snooze`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next line, we are taking the value of that minute stored in `M_snooze`
    and adding another `5` minutes to it. So the value of `M_snooze` is now incremented
    by `5`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, in the same `if` condition that we used previously, we have placed a `for`
    loop, which looks like this: `for M <= M_snooze`. But what does this mean? Here,
    what we are doing is pretty simple. The program inside the `for` loop will keep
    on running and will stay in the loop till the time the condition that we have
    stated is true. Now, the condition here states that till the time `M` is smaller
    or equal to `M_snooze`, the condition will stay true. As you have learned earlier, `M`
    is the current minute value and `M_snooze` is the value of `M` at the time of
    starting of this loop, which is incremented by `5`. Hence, the loop would be true
    for `5` minutes from the time of starting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Now, this is the most interesting part of the program. Till the time, the `for`
    loop `for M <= M_snooze` is true, the preceding lines of code will run. Let's
    see what it is doing. In the line, `F-value = adc0.get_last_result()`, it is taking
    the value of the IR proximity sensor and storing it in `F_value`. Thereafter,
    in the line `F1 = (1.0/(F_value/13.15))-0.35`, we are simply calculating the distance
    in centimeters. We have already studied how this is happening, so not much explanation
    needs to be done here. The value of distance is stored in a variable named `F1`.
    Thereafter, using the function `time.sleep(0.1)`, we are pausing the program for
    `0.1` seconds. Thereafter, we are again repeating the same task again; that is,
    we are again taking the value of distance. But this time, the distance value calculated
    is stored in an another variable named `F2`. Finally, after all of this is done,
    we are calculating `F_final`, which is `F_final = F1 - F2`. So we are simply calculating
    the difference in distance between the first and the second reading. But, you
    must be asking why are we doing this. What good does it do?
  prefs: []
  type: TYPE_NORMAL
- en: Well, as you remember, we have placed the IR proximity sensor in front of our
    bathroom gate. Now, if no one is passing in front of it, the value will remain
    fairly constant. But whenever a person passes through it, there will be a change
    in distance. So if there is a change in the overall distance from first to last
    reading, then we can say that someone has passed through the IR sensor.
  prefs: []
  type: TYPE_NORMAL
- en: 'That is pretty cool, but why don''t we simply keep a threshold value like we
    have done previously? The answer to this is simple. That is because if you need
    to change the position of the sensor, then you again need to recalibrate the sensor
    according to the position. So this is a simple yet robust solution that can be
    used anywhere:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: Now we have got the reading, which can tell us whether a person has passed in
    front of it. But this data will not be useful until we put it somewhere.
  prefs: []
  type: TYPE_NORMAL
- en: So, here in the condition `if F_final > 10`, whenever the distance change is
    more than `10` cm, then the condition would be true and the line `Irritation_flag`
    would be set to `1`.
  prefs: []
  type: TYPE_NORMAL
- en: If you go back to the previous lines, then you will be able to make out that
    the lights will only be on when the time is between 07:00 and 07:15 and the `Irritation_flag`
    must be `0`. As with this condition, we have set a part of the condition false
    by making the `Irritation_flag = 1`; hence, the program to switch on the lights
    will not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let''s look back and see what we have done so far:'
  prefs: []
  type: TYPE_NORMAL
- en: Whenever the time is 07:00–07:15, the lights would be switched on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a movement is detected, then the lights would be switched off
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A condition will be true for another five minutes, which will wait for detection
    of human motion through the IR proximity sensor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If a person crosses that within five minutes, then the alarm would be deactivated
    or else the alarm will again start to switch on the light
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Pretty cool, huh? That being said, let''s add another added functionality from
    the previous program:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'You know what this does. If you do not move around in the first `15` minutes,
    that is from 07:00 to 07:15, then it will start blinking the lights every five
    seconds, forcing you to wake up:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we use the condition `if H != '07':`. So, whenever the value of `H`
    is anything other than `07`, then the condition would be true, and this will reset
    the `Irritation_flag` to `0`. By now, you know what turning  `Irritation_flag` to
    `0` does.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So, finally, we have made our first mini Jarvis, which wakes you up in the morning
    and even irritates you if you don't wake up on time. I hope you have really enjoyed
    this chapter by learning about two-motion sensors and their application in automating
    the electrical appliance. So, go ahead and try one at home, modify the code according
    to your needs, and bring out some really cool stuff. Next up, we will make our
    Jarvis do some more cool stuff, and we will cover some more exciting stuff on
    human detection.
  prefs: []
  type: TYPE_NORMAL
