- en: Basic Switching
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本开关
- en: It must have been an epic journey so far! Recollect the time when you would
    have started reading this book, did you ever imagine that things could be this
    simple? It is worth noting that everything starts off very simple and, slowly
    and steadily, with the need for more sophisticated systems, the complexity of
    the technology also increases. Go back to the time when personal computing was
    not really a thing. It was only used in business and companies such as IBM were
    only servicing business clients. At that time, people who wanted a personal computer
    had only one option. They needed to build it from scratch, and to be honest, a
    lot of people used to do that. It really wasn't that hard either at least from
    my perspective. But, in contrast to that time, think about what they have become
    right now. Ever thought of building a computer at home? By building, I mean designing
    everything and not just assembly of the CPU. It is not very easy.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，这一定是一次史诗般的旅程！回想一下你开始阅读这本书的时候，你是否曾想过事情可以这么简单？值得注意的是，一切都是从非常简单开始的，随着对更复杂系统的需求逐渐增加，技术的复杂性也在稳步上升。回到个人计算机还不是主流的时代。那时，个人计算机仅用于商业，像IBM这样的公司只为商业客户提供服务。在那个时代，想要个人计算机的人只有一个选择，那就是从头开始自己组装。说实话，至少从我的角度来看，这并不难。但是，与那个时代相比，想想现在它们变成了什么样子。你有没有想过在家里组装一台电脑？这里的“组装”是指设计一切，而不仅仅是CPU的组装。这并不容易。
- en: What I am trying to tell you here is that there was a time when computers were
    exotic; they were not very common, and they had very limited functionalities.
    However, with time and the brains of people, such as Steve Jobs, Bill Gates, and
    Hewlett and Packard, computers became more user-friendly, more easily available,
    and a desirable commodity. Think of the same thing with robots. They are expensive;
    for most people, there is not much they can do with them and also they are rare
    in the public space. But, as you have learned, it is not very hard to build a
    robot for our personal use, and with some tweaking here and there and with inventive
    minds such as yours, things can be taken in an altogether different direction.
    You could be the next Steve Jobs or Bill Gates. All we need is zeal, passion,
    and out-of-the-box thinking. You may be ridiculed for your vision. But do remember
    every inventor has been called mad at some point in time. So the next time someone
    calls you mad, you can be very sure that you are progressing!
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我在这里试图告诉你的是，曾经计算机是稀有的；它们并不常见，而且功能非常有限。然而，随着时间的推移和像史蒂夫·乔布斯、比尔·盖茨、惠普的休利特和帕卡德这样的人的智慧，计算机变得更加用户友好，更容易获得，成为一种受欢迎的商品。想想机器人也是一样。它们很贵；对于大多数人来说，他们用不上它们，而且在公共场合也很少见。但是，正如你所学的，为个人使用组装一台机器人并不难，再加上一些调整和像你这样的创新思维，事情可以朝着完全不同的方向发展。你可能会成为下一个史蒂夫·乔布斯或比尔·盖茨。我们需要的只是热情、激情和跳出思维定势。你可能会因为你的愿景而受到嘲笑。但请记住，每个发明家在某个时候都被认为是疯狂的。所以下次有人说你疯狂时，你可以非常确信你在进步！
- en: Well, I'm quite sure that, if you are a robotic enthusiast, then you must have
    seen the movie *Iron Man*. If you haven't seen it yet, then take a break from
    reading this book and go ahead and open Netflix and see that movie.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，我相当确信，如果你是一个机器人爱好者，那么你一定看过电影《钢铁侠》。如果你还没有看过，那么请从阅读这本书中休息一下，打开Netflix看看这部电影。
- en: 'Once I saw that movie, there were two main things that I wanted to build: one,
    the suit of Iron Man and other his personal assistant Jarvis, who takes care of
    all his needs. Though suits seem to be something that I may have to work on for
    a while, but, by that time, you can go ahead and build the personal assistant
    for yourself.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 看过那部电影后，我有两个主要的东西想要建造：一个是钢铁侠的战衣，另一个是他的个人助理贾维斯，他会照顾他所有的需求。虽然战衣似乎是我可能需要一段时间才能完成的工作，但到那时，你可以继续为自己建造个人助理。
- en: Imagine your home doing things for itself. How cool would it be? It knows what
    you like, what time you wake up, when you come back home, and, based on that,
    it automatically does things for you. Best of all, it would not be something you
    buy off the shelf, rather you would be making it with your own hands.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下你的家能自己做事。那会多么酷啊？它会知道你喜欢什么，你什么时候起床，你什么时候回家，然后根据这些信息，它会自动为你做事。最好的是，这不会是你在货架上买来的东西，而是你亲手制作的。
- en: Before you do any of this, I must tell you that you will be dealing with high
    voltages and considerable currents. Electricity is no joke, and you must take
    care at all times and wear all the safety equipment. If you are not sure of it,
    then it would be a good idea to get an electrician to help you. Before you touch
    or open any of the electrical boards, make sure that you are wearing non-conductive
    shoes; also inspect whether the tools such as screwdrivers, pliers, nose pliers,
    cutters, and other tools are well insulated and in good condition. It is a good
    idea to wear gloves for added safety. If you are under 18, then you must have
    an adult with you all times to help you.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在你做任何这些之前，我必须告诉你，你将处理高压和相当大的电流。电不是玩笑，你必须时刻小心，并穿戴所有安全装备。如果你对此不确定，那么找电工帮忙是个好主意。在你触摸或打开任何电气板之前，确保你穿着非导电鞋；同时检查螺丝刀、钳子、鼻钳、剪刀和其他工具是否绝缘良好且状况良好。戴上手套以增加安全性是个好主意。如果你未满18岁，那么你必须有成年人在场帮助你。
- en: Now that that's said, let's get started and see what we have got here.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 现在既然已经说到了这一点，让我们开始并看看我们有什么。
- en: Making Jarvis wake you up
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让Jarvis叫醒你
- en: Now, this one is very interesting, as you all know our human body is programmed
    in a certain way. Hence, we react to different stimuli in a very known way. Like
    when it gets dark, our brain produces hormones that trigger sleep. Once the sunlight
    falls on our eyes, we tend to wake up. Well, at least this should be the case!
    In recent times, our lifestyle has changed enormously, which has started to defy
    this cycle. That's why, we are seeing more and more cases of insomnia. Waking
    up by an alarm is certainly not natural. Hence, you are never happy listening
    to an alarm in the morning, even if it has your favorite song as its tone. Our
    sleep cycle is supposed to be synchronized with the sunlight, but nowadays hardly
    anyone wakes up by this method. So, in this chapter, let's first make a smart
    alarm that will replicate the natural way we wake up.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个话题非常有趣，因为你们都知道，我们的身体是以某种方式编程的。因此，我们对不同的刺激以非常已知的方式做出反应。比如当变暗时，我们的大脑会产生激素引发睡眠。一旦阳光照到我们的眼睛，我们就会醒来。至少这应该是这种情况！近年来，我们的生活方式发生了巨大的变化，这已经开始挑战这个周期。这就是为什么我们看到了越来越多的失眠病例。被闹钟叫醒当然不是自然的。因此，你永远不会喜欢早上听到闹钟的声音，即使它的音调是你的最爱。我们的睡眠周期本应与阳光同步，但如今几乎没有人通过这种方法醒来。所以，在这一章中，让我们首先制作一个智能闹钟，它将模仿我们自然醒来的方式。
- en: Working with relay and PIR sensor
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用继电器和PIR传感器工作
- en: 'As we are dealing with high voltage and higher currents, we would be using
    a relay. To do this, connect the wires as follows:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们处理的是高压和更高的电流，我们将使用继电器。为此，按照以下方式连接电线：
- en: '![](img/36131dfd-1664-4c69-a41c-d24fcd7961bf.png)'
  id: totrans-12
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/36131dfd-1664-4c69-a41c-d24fcd7961bf.png)'
- en: 'Once you are done connecting it, upload the following code and let''s see what
    happens:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你连接好，上传以下代码，让我们看看会发生什么：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: OK, then it is a fairly simple code with not much explanation needed. We have
    done a very similar code before as well. Do you remember when? It was in the first
    few chapters when we were making a gardening robot where we had to fetch water
    to the plants at a certain time. All it is doing at this time is to check the
    time and whether the time is `06` hours and the minute is less than `20`. That
    is, the light would be switched on between 07:00 hours to 07:19 hours. Thereafter,
    it would switch off.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，那么这是一个相当简单的代码，不需要太多解释。我们之前也做过一个非常类似的代码。你还记得是哪次吗？那是在前几章，我们制作一个园艺机器人时，我们需要在特定时间给植物浇水。现在它所做的一切就是检查时间，看是否是`06`小时且分钟数小于`20`。也就是说，灯光会在07:00到07:19之间打开。之后，它会关闭。
- en: Making the alarm irritating
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 制作一个令人烦恼的闹钟
- en: But there is a problem. The problem is that the lights will be switched on and,
    no matter whether you get up, the light would automatically switch itself off
    within 20 minutes. That is a bit of problem because not every time will you wake
    up in just 20 minutes. So, in that case, what should we do? The first thing we
    need to do is to detect whether you have woken up. This is very simple and not
    much needs to be told here. If you wake up in the morning, it is very certain
    that you will move out of the bed. Once you do, we can detect the motion that
    can tell our automated system whether you have really woken up.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但这里有一个问题。问题是灯光会被打开，无论你是否起床，灯光都会在20分钟内自动关闭。这有点问题，因为并不是每次你醒来都是在20分钟内。所以，在这种情况下，我们应该怎么做？我们首先需要做的是检测你是否醒了。这很简单，这里不需要多说什么。如果你早上醒来，你一定会离开床。一旦你这样做，我们就可以检测到运动，这可以告诉我们自动系统你是否真的醒了。
- en: Now, what we can do here is something very simple. We can detect your motion,
    and based on that detection, we can be decisive on whether you have really woken
    up. This doesn't seem much of a task. All we need to do is to add a motion detection
    sensor. For this purpose, we can use a PIR sensor, which can tell us whether the
    motion has been detected. So, let's go ahead, add another layer of sensor on top
    of our system, and see what happens.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们在这里可以做的事情非常简单。我们可以检测你的运动，并根据这个检测，我们可以决定你是否真的醒了。这似乎不是一个很大的任务。我们唯一需要做的就是添加一个运动检测传感器。为此，我们可以使用PIR传感器，它可以告诉我们是否检测到了运动。所以，让我们继续，在我们的系统上添加另一层传感器，看看会发生什么。
- en: 'So, first, connect the circuit as follows. While mounting the PIR sensor, do
    make sure that it is facing the bed and detecting any motion on and around it.
    Once the PIR is set up, wire the sensors as shown in the following diagram and
    see what happens:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，首先，按照以下方式连接电路。在安装PIR传感器时，一定要确保它面向床，并检测其上和周围的任何运动。一旦PIR设置好，按照以下图示连接传感器，看看会发生什么：
- en: '![](img/4bb15b13-8f6e-4d8e-80b2-748bb3a86720.png)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![](img/4bb15b13-8f6e-4d8e-80b2-748bb3a86720.png)'
- en: 'Once done, then go ahead and write the following code:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 完成后，继续编写以下代码：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'OK, let''s see what we have done. The code is extremely simple, but we had
    a small twist in it, that is,  `Irritation_Flag`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 好的，让我们看看我们做了什么。代码非常简单，但其中有一个小转折，那就是`Irritation_Flag`：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Now this variable works something like a snooze button. As we know, when we
    wake up sometimes, or in fact, most of the time, we again go back to sleep only
    to wake up much later to realize that we are late. To prevent this, we have this
    `Irritation_flag`, and what this basically would be used for is to detect the
    number of times you have performed the action to stop the alarm. How it would
    be used we will see later:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 现在这个变量就像一个闹钟的“再睡五分钟”按钮。众所周知，当我们醒来时，有时，实际上，大多数时候，我们又会回到床上，然后醒来得晚些时候才意识到自己迟到了。为了防止这种情况，我们有了这个`Irritation_flag`，这个基本上会被用来检测你停止闹钟所执行动作的次数。我们稍后会看到它是如何被使用的：
- en: '[PRE3]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In this line, we are simply comparing time values by hours and minutes. If
    the hours is `07` and minutes are fewer than or equal to `15`, then the lights
    would be switched off. There is also a condition that says `Irritation_Flag >
    0` as we have already declared in the beginning that the value of `Irritation_flag
    = 3`; hence, initially this condition will always be true. The last condition
    is `GPIO.input(PIR) == 0`; which means that the condition will only be satisfied
    when the PIR has not detected any motion. In very simple words, the alarm will
    go off every time between 07:00 and 07:15 if the PIR does not detect any motion:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一行，我们只是在比较小时和分钟的时间值。如果小时是`07`，分钟少于或等于`15`，那么灯光就会关闭。还有一个条件说`Irritation_Flag
    > 0`，正如我们在一开始已经声明的，`Irritation_flag = 3`；因此，最初这个条件总是为真。最后一个条件是`GPIO.input(PIR)
    == 0`；这意味着只有当PIR没有检测到任何运动时，条件才会满足。用非常简单的话说，如果PIR没有检测到任何运动，闹钟将在每天早上07:00到07:15之间响起：
- en: '[PRE4]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: In this part of the program, the condition will only be true if the hours or `H`
    is equal to `7` and when the PIR is detecting some motion. Hence, every time when
    the time is between 07:00 and 07:59 and whenever the motion is detected, the condition
    will be true. Once true, the program will first switch off the light using the
    line `GPIO.output*LIGHT,GPIO.LOW`. Once it is turned off, it waits for `10` seconds
    using `time.sleep(10)`. Once the time is over, it will implement the following
    operation: `Irritation_Flag - Irritation_Flag - 1`. Now what it does is that it
    decrements the value of `Irritation_Flag` by `1` every time it detects a motion.
    So the first time a motion happens, the value of `Irritation_Flag` would be `2`;
    thereafter, it would be `1`, and finally, it would be `0`.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序的部分，只有当小时或`H`等于`7`，并且PIR检测到一些运动时，条件才会成立。因此，每次时间在07:00和07:59之间，并且检测到运动时，条件都会成立。一旦成立，程序会首先使用`GPIO.output(LIGHT,GPIO.LOW)`这行代码关闭灯。一旦关闭，它会使用`time.sleep(10)`等待`10`秒。时间过后，它会执行以下操作：`Irritation_Flag
    - Irritation_Flag - 1`。现在它所做的就是每次检测到运动时，将`Irritation_Flag`的值减`1`。所以第一次发生运动时，`Irritation_Flag`的值会是`2`；之后，它会变成`1`，最后变成`0`。
- en: 'If you look at the previous part of the code, you will be able to make out
    that the light would be switched on if the value of `Irritation_Flag` was greater
    than `0`. So if you want to turn off the light, you would have to move at least
    three times. Why three times? Because then the code `Irritation_Flag = Irritation
    - 1` would be executed three times so as to make the value get down to `0`, which
    obviously makes the condition `GPIO.input(PIR) > 0` false:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看代码的前一部分，你会注意到，如果`Irritation_Flag`的值大于`0`，灯就会亮。所以如果你想关灯，你必须至少移动三次。为什么是三次？因为这样代码`Irritation_Flag
    = Irritation - 1`就会执行三次，使得值降到`0`，这显然使得条件`GPIO.input(PIR) > 0`变为假：
- en: '[PRE5]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Now, let''s say even after of all this, you still do not wake up. Then what
    should happen? We have something special for you here. Now, instead of an `if`
    condition, we have a `for` loop. What this will check for is that the time should
    be `07` hours, and minutes should be greater than `15`, `Irritation_Flag > 0`,
    and obviously no motion is being detected. Till the time all of these are true,
    the light would be switched on thereafter for `5` seconds, it would be kept switched
    on using the `time.sleep(5)`. The lights would be again switched on. Now this
    will keep on happening till the time the conditions are true or in other words,
    till the time is between 07:15 and 07:59. `Irritation)_Flag > 0`, that is, the
    motion is not detected for three times and there is no motion detected. Till that
    time, the for loop would keep on the switch on and off of the light in action. Due
    to frequent biking of light, there is a very higher chance of you waking up. This
    may be very effective, but surely not the most convenient. Well, however inconvenient
    it is, it will still be better than the conventional alarm:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，假设即使经历了所有这些，你仍然没有醒来。那么会发生什么？这里我们为你准备了一些特别的东西。现在，我们不再使用`if`条件，而是使用一个`for`循环。这个循环会检查时间是否是`07`小时，分钟是否大于`15`，`Irritation_Flag
    > 0`，以及显然没有检测到运动。只要所有这些条件都成立，灯就会在之后打开`5`秒，使用`time.sleep(5)`保持打开状态。灯会再次打开。现在，这会一直发生，直到条件成立，换句话说，直到时间在07:15和07:59之间。`Irritation_Flag
    > 0`，也就是说，没有检测到三次运动，也没有检测到运动。在那之前，for循环会一直执行开关灯的动作。由于灯光频繁闪烁，你醒来的可能性非常高。这可能非常有效，但肯定不是最方便的。好吧，不管多么不方便，它仍然会比传统的闹钟好：
- en: '[PRE6]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We have the entire light-based alarm ready for us to wake us up every morning.
    However, there is a problem. Once it is turned off, the value of `Irritation_Flag`
    will be `0`. Once it is turned to `0`, then no matter what the time is, the light
    would never start up. Hence, to make sure that the alarm is always operational
    at the same time every single day, we would need to set the value of the flag
    to any number more than `0`.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经准备好了整个基于灯光的闹钟，每天早上叫我们起床。然而，有一个问题。一旦它关闭，`Irritation_Flag`的值就会变成`0`。一旦变成`0`，无论时间是什么，灯都不会启动。因此，为了确保闹钟每天在相同的时间始终可用，我们需要将标志的值设置为任何大于`0`的数字。
- en: Now in the preceding line, if `H != '07'`, then the `Irritation_flag` would
    be `3`. That is whenever the time is anything other than `07` hours, then the
    value of `Irritation_Flag` would be `3`.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 现在在上一行，如果`H != '07'`，那么`Irritation_flag`的值会是`3`。也就是说，当时间不是`07`小时时，`Irritation_Flag`的值会是`3`。
- en: It was simple, wasn't it? But I'm sure that it would do a good job to make sure
    you wake up on time.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 这很简单，不是吗？但我确信这会很好地确保你按时醒来。
- en: Making it even more irritating
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让它变得更加令人烦恼
- en: Can you completely rely on the preceding system? If you really have control
    over your morning emotions of not getting out of the bed, then, yes, sure you
    can. But for those who just love to be in bed and sleep again after hitting the
    snooze button, then I am sure you would be able to find a way to switch off the
    light without properly waking up. So as in the code, the light would switch off
    whenever the motion was detected three times. But the motion can be anything.
    You can simply wave your hand while still being in the bed, and the system would
    detect it as a motion, which would defy the whole purpose. So what should we do
    now?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以完全依赖前面的系统吗？如果你真的能控制你早上不想起床的情绪，那么，当然可以。但对于那些喜欢在按下闹钟按钮后再次回到床上睡觉的人来说，我确信你一定能找到一种方法在不完全醒来时关闭灯光。所以，在代码中，灯光会在检测到三次运动时关闭。但运动可以是任何东西。你可以在床上挥手，系统会将其检测为运动，这会违背整个目的。那么我们现在应该怎么做呢？
- en: 'We have a solution for it! We can use a way by which we can be sure that you
    have to get out of bed. For this very purpose, we will be using our IR proximity
    sensor, which we have used earlier in our projects, and based on the distance
    reading of the sensor, we can detect whether you have gone past any specific area.
    This can be really interesting as you can fit this sensor pointing away from the
    bed or maybe on the gate of the bathroom, and till the time, you do not cross
    that specific line. The system would not switch off the alarm. So let''s see how
    we would do it. First, connect the hardware, as shown in the following diagram:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有解决这个问题的方案！我们可以使用一种方法来确保你必须起床。为此，我们将使用我们的红外接近传感器，这是我们之前在项目中使用过的，根据传感器的距离读数，我们可以检测你是否经过任何特定区域。这真的很有趣，因为你可以将这个传感器指向远离床的位置，或者也许放在浴室的门上，直到你不过那个特定的线。系统不会关闭闹钟。那么，让我们看看我们将如何做到这一点。首先，连接硬件，如下面的图所示：
- en: '![](img/c11c43ee-bf9a-4804-85d7-b468c85fb178.png)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![](img/c11c43ee-bf9a-4804-85d7-b468c85fb178.png)'
- en: 'Once you are done with the diagram, go ahead and upload the following code:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你完成了图示，继续上传以下代码：
- en: '[PRE7]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Mind blown? This code seems quite complex, having conditions inside conditions
    and again some more conditions. Say hello to robotics! These conditions make up
    a lot of robot's programming. A robot has to see continuously what is happening
    around and make decisions according to it. It's also the way humans work, don't
    we?
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 头脑风暴？这段代码看起来相当复杂，有条件嵌套在条件中，还有一些更多的条件。向机器人技术问好！这些条件构成了许多机器人编程的基础。机器人必须持续观察周围发生的事情，并根据它做出决策。这也是人类工作的方式，不是吗？
- en: 'So, that being said, let''s see what we are actually doing here. Most of the
    code is pretty much the same as the last one. The main difference comes somewhere
    around the middle of the programming section:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，既然已经说到了这里，让我们看看我们实际上在这里做了什么。大部分代码与上一个版本几乎相同。主要区别出现在编程部分的中间：
- en: '[PRE8]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We are switching on the lights as soon as the time is between 07:00 and 07:15:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当时间在07:00到07:15之间时，我们立即打开灯光：
- en: '[PRE9]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In the hour of `07` whenever the PIR sensor is triggered or in other words,
    the PIR sensor detects any motion, then it will do a set of activities inside
    the `if` condition, which includes noting down the time by the function `datetime.datetime.now().strftime('%M')`
    and then storing it down in a variable named `M_snooze`.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在`07`点，当PIR传感器被触发，换句话说，PIR传感器检测到任何运动时，它将在`if`条件内执行一系列活动，包括通过`datetime.datetime.now().strftime('%M')`函数记录时间，并将其存储在名为`M_snooze`的变量中。
- en: 'In the next line, we are taking the value of that minute stored in `M_snooze`
    and adding another `5` minutes to it. So the value of `M_snooze` is now incremented
    by `5`:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一行，我们正在取存储在`M_snooze`中的那个分钟的值，并给它加上另一个`5`分钟。所以`M_snooze`的值现在增加了`5`：
- en: '[PRE10]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Now, in the same `if` condition that we used previously, we have placed a `for`
    loop, which looks like this: `for M <= M_snooze`. But what does this mean? Here,
    what we are doing is pretty simple. The program inside the `for` loop will keep
    on running and will stay in the loop till the time the condition that we have
    stated is true. Now, the condition here states that till the time `M` is smaller
    or equal to `M_snooze`, the condition will stay true. As you have learned earlier, `M`
    is the current minute value and `M_snooze` is the value of `M` at the time of
    starting of this loop, which is incremented by `5`. Hence, the loop would be true
    for `5` minutes from the time of starting:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在之前使用的相同`if`条件中，我们放置了一个`for`循环，看起来是这样的：`for M <= M_snooze`。但这意味着什么呢？在这里，我们所做的是相当简单的。`for`循环内的程序将一直运行，并保持在循环中，直到我们声明的条件为真。现在，这里的条件表明，直到`M`小于或等于`M_snooze`时，条件将保持为真。正如你之前学到的，`M`是当前分钟值，而`M_snooze`是循环开始时`M`的值，它增加了`5`。因此，从开始时起，循环将保持为真`5`分钟：
- en: '[PRE11]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Now, this is the most interesting part of the program. Till the time, the `for`
    loop `for M <= M_snooze` is true, the preceding lines of code will run. Let's
    see what it is doing. In the line, `F-value = adc0.get_last_result()`, it is taking
    the value of the IR proximity sensor and storing it in `F_value`. Thereafter,
    in the line `F1 = (1.0/(F_value/13.15))-0.35`, we are simply calculating the distance
    in centimeters. We have already studied how this is happening, so not much explanation
    needs to be done here. The value of distance is stored in a variable named `F1`.
    Thereafter, using the function `time.sleep(0.1)`, we are pausing the program for
    `0.1` seconds. Thereafter, we are again repeating the same task again; that is,
    we are again taking the value of distance. But this time, the distance value calculated
    is stored in an another variable named `F2`. Finally, after all of this is done,
    we are calculating `F_final`, which is `F_final = F1 - F2`. So we are simply calculating
    the difference in distance between the first and the second reading. But, you
    must be asking why are we doing this. What good does it do?
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这是程序中最有趣的部分。直到`for`循环`for M <= M_snooze`为真时，前面的代码行才会运行。让我们看看它在做什么。在`F-value
    = adc0.get_last_result()`这一行，它正在获取红外接近传感器的值并将其存储在`F_value`中。之后，在`F1 = (1.0/(F_value/13.15))-0.35`这一行，我们只是在计算厘米单位的距离。我们已经研究了这是如何发生的，所以这里不需要太多解释。距离的值存储在一个名为`F1`的变量中。之后，使用`time.sleep(0.1)`函数，我们暂停程序`0.1`秒。然后，我们再次重复相同的任务；也就是说，我们再次获取距离值。但这次，计算出的距离值存储在另一个名为`F2`的变量中。最后，完成所有这些后，我们计算`F_final`，即`F_final
    = F1 - F2`。所以我们只是在计算第一次和第二次读数之间的距离差。但是，你可能想知道我们为什么要这样做。这有什么好处呢？
- en: Well, as you remember, we have placed the IR proximity sensor in front of our
    bathroom gate. Now, if no one is passing in front of it, the value will remain
    fairly constant. But whenever a person passes through it, there will be a change
    in distance. So if there is a change in the overall distance from first to last
    reading, then we can say that someone has passed through the IR sensor.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 好吧，正如你所记得的，我们已经将红外接近传感器放置在了浴室门的前面。现在，如果没有人经过它前面，数值将保持相对稳定。但是，每当有人经过时，距离就会发生变化。所以，如果从第一次读到最后的整体距离发生变化，那么我们就可以说有人穿过了红外传感器。
- en: 'That is pretty cool, but why don''t we simply keep a threshold value like we
    have done previously? The answer to this is simple. That is because if you need
    to change the position of the sensor, then you again need to recalibrate the sensor
    according to the position. So this is a simple yet robust solution that can be
    used anywhere:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 这听起来很酷，但为什么我们不简单地像之前那样设置一个阈值值呢？这个答案很简单。那是因为如果你需要改变传感器的位置，那么你还需要根据位置重新校准传感器。所以这是一个简单而稳健的解决方案，可以在任何地方使用：
- en: '[PRE12]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Now we have got the reading, which can tell us whether a person has passed in
    front of it. But this data will not be useful until we put it somewhere.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经得到了可以告诉我们是否有人经过它的读数。但除非我们将这些数据放在某个地方，否则这些数据将没有用处。
- en: So, here in the condition `if F_final > 10`, whenever the distance change is
    more than `10` cm, then the condition would be true and the line `Irritation_flag`
    would be set to `1`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，在这里的条件`if F_final > 10`中，每当距离变化超过`10`厘米时，条件就会为真，并将`Irritation_flag`设置为`1`。
- en: If you go back to the previous lines, then you will be able to make out that
    the lights will only be on when the time is between 07:00 and 07:15 and the `Irritation_flag`
    must be `0`. As with this condition, we have set a part of the condition false
    by making the `Irritation_flag = 1`; hence, the program to switch on the lights
    will not work.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你回顾前面的行，你会发现灯光只有在时间在07:00到07:15之间，并且`Irritation_flag`必须为`0`时才会亮。正如这个条件一样，我们通过将`Irritation_flag`设置为`1`来使条件的一部分变为假；因此，打开灯光的程序将不会工作。
- en: 'Now, let''s look back and see what we have done so far:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们回顾一下到目前为止我们做了什么：
- en: Whenever the time is 07:00–07:15, the lights would be switched on
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当时间是07:00到07:15时，灯光将被打开
- en: If a movement is detected, then the lights would be switched off
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果检测到运动，那么灯光将被关闭
- en: A condition will be true for another five minutes, which will wait for detection
    of human motion through the IR proximity sensor
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 另一个条件将在五分钟内为真，它将等待通过红外接近传感器检测到人体运动
- en: If a person crosses that within five minutes, then the alarm would be deactivated
    or else the alarm will again start to switch on the light
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果有人在五分钟内穿过那里，那么警报将被解除，否则警报将再次开始切换灯光
- en: 'Pretty cool, huh? That being said, let''s add another added functionality from
    the previous program:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 真的很酷，对吧？话虽如此，让我们添加另一个来自上一个程序的功能：
- en: '[PRE13]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'You know what this does. If you do not move around in the first `15` minutes,
    that is from 07:00 to 07:15, then it will start blinking the lights every five
    seconds, forcing you to wake up:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道这是做什么的。如果你在前`15`分钟内没有移动，也就是从07:00到07:15，那么它将每五秒闪烁灯光，迫使你醒来：
- en: '[PRE14]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Finally, we use the condition `if H != '07':`. So, whenever the value of `H`
    is anything other than `07`, then the condition would be true, and this will reset
    the `Irritation_flag` to `0`. By now, you know what turning  `Irritation_flag` to
    `0` does.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们使用条件`if H != '07':`。所以，每当`H`的值不是`07`时，条件就为真，这将重置`Irritation_flag`为`0`。到现在为止，你知道将`Irritation_flag`设置为`0`会做什么。
- en: Summary
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: So, finally, we have made our first mini Jarvis, which wakes you up in the morning
    and even irritates you if you don't wake up on time. I hope you have really enjoyed
    this chapter by learning about two-motion sensors and their application in automating
    the electrical appliance. So, go ahead and try one at home, modify the code according
    to your needs, and bring out some really cool stuff. Next up, we will make our
    Jarvis do some more cool stuff, and we will cover some more exciting stuff on
    human detection.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，最终，我们制作了我们的第一个迷你Jarvis，它会在早上叫醒你，如果你没有按时醒来，甚至会让你感到烦躁。我希望你通过学习两个运动传感器及其在自动化家用电器中的应用，真正享受了这一章节。所以，继续前进，在家尝试一个，根据你的需求修改代码，并创造出一些真正酷的东西。接下来，我们将让我们的Jarvis做更多酷的事情，我们还将涵盖更多关于人体检测的激动人心的内容。
