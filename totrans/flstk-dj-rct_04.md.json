["```py\nfrom django.db import models\nfrom core.abstract.models import AbstractModel, AbstractManager\nclass CommentManager(AbstractManager):\n    pass\nclass Comment(AbstractModel):\n    post = models.ForeignKey(\"core_post.Post\",\n                              on_delete=models.PROTECT)\n    author = models.ForeignKey(\"core_user.User\",\n                                on_delete=models.PROTECT)\n    body = models.TextField()\n    edited = models.BooleanField(default=False)\n    objects = CommentManager()\n    def __str__(self):\n        return self.author.name\n```", "```py\nPython 3.10.2 (main, Jan 15 2022, 18:02:07) [GCC 9.3.0] on linux\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n(InteractiveConsole)\n>>> from core.comment.models import Comment\n>>> from core.post.models import Post\n>>> from core.user.models import User\n```", "```py\n>>> user = User.objects.first()\n>>> post = Post.objects.first()\n>>> comment_data = {\"post\": post, \"author\": user, \"body\": \"A comment.\"}\n```", "```py\n>>> comment = Comment.objects.create(**comment_data)\n>>> comment\n<Comment: Dingo Dog>\n>>> comment.body\n'A comment.'\n```", "```py\nfrom rest_framework import serializers\nfrom rest_framework.exceptions import ValidationError\nfrom core.abstract.serializers import AbstractSerializer\nfrom core.user.models import User\nfrom core.user.serializers import UserSerializer\nfrom core.comment.models import Comment\nfrom core.post.models import Post\n```", "```py\n...\nclass CommentSerializer(AbstractSerializer):\n   author = serializers.SlugRelatedField(\n     queryset=User.objects.all(), slug_field='public_id')\n   post = serializers.SlugRelatedField(\n     queryset=Post.objects.all(), slug_field='public_id')\n   def to_representation(self, instance):\n       rep = super().to_representation(instance)\n       author =\n        User.objects.get_object_by_public_id(rep[\"author\"])\n       rep[\"author\"] = UserSerializer(author).data\n       return rep\n   class Meta:\n       model = Comment\n       # List of all the fields that can be included in a\n       # request or a response\n       fields = ['id', 'post', 'author', 'body', 'edited',\n                 'created', 'updated']\n       read_only_fields = [\"edited\"]\n```", "```py\nfrom django.http.response import Http404\nfrom rest_framework.response import Response\nfrom rest_framework import status\nfrom core.abstract.viewsets import AbstractViewSet\nfrom core.comment.models import Comment\nfrom core.comment.serializers import CommentSerializer\nfrom core.auth.permissions import UserPermission\nclass CommentViewSet(AbstractViewSet):\n   http_method_names = ('post', 'get', 'put', 'delete')\n   permission_classes = (UserPermission,)\n   serializer_class = CommentSerializer\n...\n```", "```py\npip install drf-nested-routers\n```", "```py\nfrom rest_framework_nested import routers\n...\nrouter = routers.SimpleRouter()\n…\n```", "```py\n    ...\n    ```", "```py\n    # ##################################################################### #\n    ```", "```py\n    # ################### POST                       ###################### #\n    ```", "```py\n    # ##################################################################### #\n    ```", "```py\n    router.register(r'post', PostViewSet, basename='post')\n    ```", "```py\n    posts_router = routers.NestedSimpleRouter(router, r'post', lookup='post')\n    ```", "```py\n    …\n    ```", "```py\n...\n# ##################################################################### #\n# ################### POST                       ###################### #\n# ##################################################################### #\nrouter.register(r'post', PostViewSet, basename='post')\nposts_router = routers.NestedSimpleRouter(router, r'post', lookup='post')\nposts_router.register(r'comment', CommentViewSet, basename='post-comment')\nurlpatterns = [\n   *router.urls,\n   *posts_router.urls\n]\n...\n```", "```py\n...\nclass CommentViewSet(AbstractViewSet):\n...\n   def get_queryset(self):\n       if self.request.user.is_superuser:\n           return Comment.objects.all()\n       post_pk = self.kwargs['post_pk']\n       if post_pk is None:\n           return Http404\n       queryset = Comment.objects.filter(\n         post__public_id=post_pk)\n       return queryset\n```", "```py\n...\nclass CommentViewSet(AbstractViewSet):\n...\n   def get_object(self):\n       obj = Comment.objects.get_object_by_public_id(\n         self.kwargs['pk'])\n       self.check_object_permissions(self.request,\n                                     obj)\n       return obj\n...\n```", "```py\n...\nclass CommentViewSet(AbstractViewSet):\n...\n   def create(self, request, *args, **kwargs):\n       serializer =\n         self.get_serializer(data=request.data)\n       serializer.is_valid(raise_exception=True)\n       self.perform_create(serializer)\n       return Response(serializer.data,\n                       status=status.HTTP_201_CREATED)\n```", "```py\n{\n    \"author\": \"61c5a1ecb9f5439b810224d2af148a23\",\n    \"body\": \"Hey! I like your post.\",\n    \"post\": \"e2401ac4b29243e6913bd2d4e0944862\"\n}\n```", "```py\n...\nclass CommentViewSet(AbstractViewSet):\n   http_method_names = ('post', 'get', 'put',\n                        'delete')\n...\n```", "```py\n...\ndef validate_post(self, value):\n   if self.instance:\n       return self.instance.post\n   return value\n...\n```", "```py\n...\nclass CommentSerializer(AbstractSerializer):\n   ...\n   def update(self, instance, validated_data):\n       if not instance.edited:\n           validated_data['edited'] = True\n       instance = super().update(instance,\n                                 validated_data)\n       return instance\n…\n```", "```py\n    {\n    ```", "```py\n        \"author\": \"61c5a1ecb9f5439b810224d2af148a23\",\n    ```", "```py\n        \"body\": \"A simple comment edited\",\n    ```", "```py\n        \"post\": \"e2401ac4b29243e6913bd2d4e0944862\"\n    ```", "```py\n    }\n    ```", "```py\n...\nclass CommentViewSet(AbstractViewSet):\n   http_method_names = ('post', 'get', 'put',\n                        'delete')\n…\n```", "```py\n...\ndef has_object_permission(self, request, view, obj):\n...\n   if view.basename in [\"post-comment\"]:\n       if request.method in ['DELETE']:\n           return bool(request.user.is_superuser or\n                       request.user in [obj.author,\n                       obj.post.author])\n       return bool(request.user and\n                   request.user.is_authenticated)\n…\n```"]