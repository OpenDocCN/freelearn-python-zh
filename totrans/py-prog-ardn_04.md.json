["```py\n    from pyfirmata import Arduino\n    ```", "```py\n    from pyfirmata import ArduinoMega\n    ```", "```py\n    port = '/dev/cu.usbmodemfa1331'\n    ```", "```py\n    port = 'COM3'\n    ```", "```py\n    port = '/dev/ttyACM0'\n    ```", "```py\n    board = Arduino(port)\n    ```", "```py\n    board = ArduinoMega(port)\n    ```", "```py\n    from time import sleep\n    sleep(1)\n    ```", "```py\n    arduino = {\n        'digital' : tuple(x for x in range(14)),\n        'analog' : tuple(x for x in range(6)),\n        'pwm' : (3, 5, 6, 9, 10, 11),\n        'use_ports' : True,\n        'disabled' : (0, 1) # Rx, Tx, Crystal\n    }\n    ```", "```py\n    nano = {\n        'digital' : tuple(x for x in range(14)),\n        'analog' : tuple(x for x in range(8)),\n        'pwm' : (3, 5, 6, 9, 10, 11),\n        'use_ports' : True,\n        'disabled' : (0, 1) # Rx, Tx, Crystal\n    }\n    ```", "```py\n    board.setup_layout(nano)\n    ```", "```py\nfrom pyfirmata import Arduino\nfrom pyfirmata import INPUT, OUTPUT, PWM\n\n# Setting up Arduino board\nport = '/dev/cu.usbmodemfa1331'\nboard = Arduino(port)\n\n# Assigning modes to digital pins\nboard.digital[13].mode = OUTPUT\nboard.analog[0].mode = INPUT\n```", "```py\nboard.digital[3].mode = PWM\nboard.digital[10].mode = SERVO\n```", "```py\nfrom pyfirmata import Arduino\nport = '/dev/cu.usbmodemfa1311'\nboard = Arduino(port)\n\n# pin mode assignment\nledPin = board.get_pin('d:13:o')\n```", "```py\nboard.analog[3].enable_reporting()\n```", "```py\nboard.analog[3].disable_reporting()\n```", "```py\nfrom pyfirmata import Arduino, util\n# Setting up the Arduino board\nport = 'COM3'\nboard = Arduino(port)\nsleep(5)\n\n# Start Iterator to avoid serial overflow\nit = util.Iterator(board)\nit.start()\n```", "```py\nboard.digital[pin].mode = OUTPUT\nboard.digital[pin].write(1)\n```", "```py\nledPin = board.get_pin('d:13:o')\nledPin.write(1)\n```", "```py\nboard.digital[pin].mode = PWM\nboard.digital[pin].write(0.5)\n```", "```py\npwmPin = board.get_pin('d:13:p')\npwmPin.write(0.5)\n```", "```py\nboard.digital[pin].mode = SERVO\nboard.digital[pin].write(90)\n```", "```py\nboard.digital[pin].read()\n```", "```py\n    board.get_firmata_version()\n    ```", "```py\n    board.exit()\n    ```", "```py\nfrom pyfirmata import Arduino, util\nfrom time import sleep\nimport os\n```", "```py\nport = 'COM3'\nboard = Arduino(port)\nsleep(5)\nit = util.Iterator(board)\nit.start()\n```", "```py\na0 = board.get_pin('a:0:i')\n```", "```py\ntry:\n  while True:\n    p = a0.read()\n    print p\nexcept KeyboardInterrupt:\n  board.exit()\n  os._exit()\n```", "```py\ndef buzzerPattern(pin, recurrence, pattern):\n  pattern1 = [0.8, 0.2]\n  pattern2 = [0.2, 0.8]\n  flag = True\n  for i in range(recurrence):\n    if pattern == 1:\n      p = pattern1\n    elif pattern == 2:\n      p = pattern2\n    else:\n      print \"Please enter valid pattern. 1 or 2.\"\n      exit\n    for delay in p:\n      if flag is True:\n        board.digital[pin].write(1)\n        flag = False\n        sleep(delay)\n      else:\n        board.digital[pin].write(0)\n        flag = True\n        sleep(delay)\n  board.digital[pin].write(0)\n  board.exit()\n```", "```py\nfrom pyfirmata import Arduino\nfrom time import sleep\n\nport = '/dev/cu.usbmodemfa1331'\nboard = Arduino(port)\nsleep(5)\n\nbuzzerPattern(2, 10, 1)\n```", "```py\ndef dcMotorControl(r, deltaT):\n  pwmPin.write(r/100.00)\n  sleep(deltaT)\n  pwmPin.write(0)\n```", "```py\n# Set mode of pin 3 as PWM\npwmPin = board.get_pin('d:3:p')\n```", "```py\ntry:\n  while True:\n    r = input(\"Enter value to set motor speed: \")\n    if (r > 100) or (r <= 0):\n      print \"Enter appropriate value.\"\n      board.exit()\n      break\n    t = input(\"How long? (seconds)\")\n    dcMotorControl(r, t)\nexcept KeyboardInterrupt:\n  board.exit()\n  os._exit\n```", "```py\nfrom pyfirmata import Arduino, INPUT, PWM\nfrom time import sleep\nimport random\n\nport = '/dev/cu.usbmodemfa1311'\nboard = Arduino(port)\nsleep(5)\n```", "```py\npin = 11\nboard.digital[pin].mode = PWM\n```", "```py\nfor i in range(0, 99):\n  r = random.randint(1, 100)\n  board.digital[pin].write(r / 100.00)\n  sleep(0.1)\n```", "```py\nboard.digital[pin].write(0)\nboard.exit()\n```", "```py\nfor i in range(0, 99):\n  board.digital[pin].write(i / 100.00)\n  sleep(0.1)\n```", "```py\nfrom pyfirmata import Arduino, SERVO\nfrom time import sleep\n\n# Setting up the Arduino board\nport = 'COM5'\nboard = Arduino(port)\n# Need to give some time to pyFirmata and Arduino to synchronize\nsleep(5)\n```", "```py\n# Set mode of the pin 13 as SERVO\npin = 13\nboard.digital[pin].mode = SERVO\n```", "```py\n# Custom angle to set Servo motor angle\ndef setServoAngle(pin, angle):\n  board.digital[pin].write(angle)\n  sleep(0.015)\n```", "```py\n# Testing the function by rotating motor in both direction\nwhile True:\n  for i in range(0, 180):\n    setServoAngle(pin, i)\n  for i in range(180, 1, -1):\n    setServoAngle(pin, i)\n\n  # Continue or break the testing process\n  i = raw_input(\"Enter 'y' to continue or Enter to quit): \")\n  if i == 'y':\n    pass\n  else:\n    board.exit()\n    break\n```", "```py\n#include <Wire.h>\n```", "```py\nWire.beginTransmission(0x48);\nWire.write(0);\nWire.endTransmission();\n```", "```py\n#include <Wire.h>\nint partAddress = 0x48;\n\nvoid setup(){\n  Serial.begin(9600);\n  Wire.begin();\n}\n\nvoid loop(){\n\n  Wire.requestFrom(partAddress,2);\n  byte MSB = Wire.read();\n  byte LSB = Wire.read();\n\n  int TemperatureData = ((MSB << 8) | LSB) >> 4;\n\n  float celsius = TemperatureData*0.0625;\n  Serial.print(\"Celsius: \");\n  Serial.println(celsius);\n\n  float fahrenheit = (1.8 * celsius) + 32;\n  Serial.print(\"Fahrenheit: \");\n  Serial.println(fahrenheit);\n\n  delay(500);\n}\n```", "```py\n#include <Wire.h>\n#include <BH1750.h>\n\nBH1750 lightMeter;\n\nvoid setup(){\n  Serial.begin(9600);\n  lightMeter.begin();\n  Serial.println(\"Running...\");\n}\n\nvoid loop() {\n  uint16_t lux = lightMeter.readLightLevel();\n  Serial.print(\"Light: \");\n  Serial.print(lux);\n  Serial.println(\" lx\");\n  delay(1000);\n}\n```", "```py\n    C:\\> easy_install.exe pymata\n\n    ```", "```py\n    $ sudo pip install pymata\n\n    ```", "```py\n    >>> import PyMata\n\n    ```", "```py\nimport time\nfrom PyMata.pymata import PyMata\n\n#Initialize Arduino using port name\nport = PyMata(\"COM5\")\n\n#Configure I2C pin\nport.i2c_config(0, port.ANALOG, 4, 5)\n\n# One shot read asking peripheral to send 2 bytes\nport.i2c_read(0x48, 0, 2, port.I2C_READ)\n# Wait for peripheral to send the data\ntime.sleep(3)\n\n# Read from the peripheral\ndata = port.i2c_get_read_data(0x48)\n\n# Obtain temperature from received data\nTemperatureSum = (data[1] << 8 | data[2]) >> 4\n\ncelsius = TemperatureSum * 0.0625\nprint celsius\n\nfahrenheit = (1.8 * celsius) + 32\nprint fahrenheit\n\nfirmata.close()\n```", "```py\nimport time\nfrom PyMata.pymata import PyMata\n\nport = PyMata(\"COM5\")\nport.i2c_config(0, port.ANALOG, 4, 5)\n\n# Request BH1750 to send 2 bytes\nport.i2c_read(0x23, 0, 2, port.I2C_READ)\n# Wait for BH1750 to send the data\ntime.sleep(3)\n\n# Read data from BH1750\ndata = port.i2c_get_read_data(0x23)\n\n# Obtain lux values from received data\nLuxSum = (data[1] << 8 | data[2]) >> 4\n\nlux = LuxSum/1.2\nprint str(lux) + ' lux'\n\nfirmata.close()\n```", "```py\nimport serial\nport = serial.Serial('COM5',9600, timeout=1)\n```", "```py\nline = port.readline()\n```", "```py\nport.flushInput()\n```", "```py\nport.close()\n```"]