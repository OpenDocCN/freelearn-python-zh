- en: <st c="0">5</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Working with Models</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="21">Storing data in a database is a common practice in most web applications.</st>
    <st c="96">In a Django project, it involves working with Django models.</st> <st
    c="157">In this chapter, we will create a database model (for example, a movie)
    and Django will turn this model into a database table for us.</st> <st c="291">We
    will also explore a powerful built-in admin interface that provides a visual way
    of managing all aspects of a Django project, such as users and making changes
    to</st> <st c="456">model data.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="467">In this chapter, we will cover the</st> <st c="503">following topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="520">Creating our</st> <st c="534">first model</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="545">Installing Pillow</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="563">Managing migrations</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="583">Accessing the Django</st> <st c="605">admin interface</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="620">Configuring</st> <st c="633">image upload</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="645">Serving</st> <st c="654">stored images</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="667">Adding a movie model</st> <st c="689">to admin</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="697">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="720">In this chapter, we will be using Python 3.10+.</st> <st c="769">Additionally,
    we will be using the</st> **<st c="804">VS Code</st>** <st c="811">editor in this
    book, which you can download</st> <st c="856">from</st> [<st c="861">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="891">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="892">The code for this chapter is located</st> <st c="930">at</st> [<st
    c="933">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter05/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter05/moviesstore)<st
    c="1041">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1042">The CiA video for this chapter can be found</st> <st c="1087">at</st>
    [<st c="1090">https://packt.link/HEeUM</st>](https://packt.link/HEeUM)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1114">Creating our first model</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1139">A</st> **<st c="1142">Django model</st>** <st c="1154">is a Python
    class that represents a database table.</st> <st c="1207">Models are used to define
    the structure and behavior of the data that will be stored in the database.</st>
    <st c="1309">Each model class typically corresponds to a single database table,
    and each instance of the class represents a specific row in that table.</st> <st
    c="1448">More information about Django models</st> <st c="1484">can be found</st>
    <st c="1498">here:</st> [<st c="1504">https://docs.djangoproject.com/en/5.0/topics/db/models/.</st>](https://docs.djangoproject.com/en/5.0/topics/db/models/)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1560">We can create models such as Movie, Review, and Order, and Django
    turns these models into a database table</st> <st c="1668">for us.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1675">Here are the Django</st> <st c="1695">model basics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1709">Each model is a class that</st> <st c="1737">extends</st> `<st
    c="1745">django.db.models.Model</st>`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1767">Each model attribute represents a</st> <st c="1802">database column</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1817">With all of this, Django provides us</st> <st c="1855">with a set
    of useful methods to</st> **<st c="1887">create, update, read, and delete</st>**
    <st c="1919">(</st>**<st c="1921">CRUD</st>**<st c="1925">) model information
    from</st> <st c="1951">a database</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1961">Creating a Movie model</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="1984">Our first model will be a Movie.</st> <st c="2018">We can create
    models in each of the project apps.</st> <st c="2068">Movie seems to be more related
    to the</st> `<st c="2106">movies</st>` <st c="2112">app, so we will create the</st>
    `<st c="2140">Movie</st>` <st c="2145">model there.</st> <st c="2159">In</st>
    `<st c="2162">/movies</st>`<st c="2169">, we</st> <st c="2174">have the</st> `<st
    c="2183">models.py</st>` <st c="2192">file, where we create our models for the</st>
    `<st c="2234">movies</st>` <st c="2240">app.</st> <st c="2246">Open that file
    and place the following lines</st> <st c="2291">of code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="2610">Let’s explain the</st> <st c="2629">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2643">First, we import</st> <st c="2660">the</st> `<st c="2665">models</st>`
    <st c="2671">module, which provides various classes and utilities for defining</st>
    <st c="2738">database models.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2754">Next, we define a Python class named</st> `<st c="2792">Movie</st>`<st
    c="2797">, which inherits from</st> `<st c="2819">models.Model</st>`<st c="2831">.
    This means that</st> `<st c="2849">Movie</st>` <st c="2854">is a Django</st> <st
    c="2867">model class.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2879">Inside the</st> `<st c="2891">Movie</st>` <st c="2896">class, we
    define</st> <st c="2914">several fields:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="2929">id</st>`<st c="2932">: This is an</st> `<st c="2946">AutoField</st>`
    <st c="2955">value that automatically increments its value for each new record
    that’s added to the database.</st> <st c="3052">The</st> `<st c="3056">primary_key=True</st>`
    <st c="3072">parameter specifies that this field is the primary key for the table,
    uniquely identifying</st> <st c="3164">each record.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3176">name</st>`<st c="3181">: This is a</st> `<st c="3194">CharField</st>`
    <st c="3203">value that represents a string field with a maximum length of 255
    characters.</st> <st c="3282">It stores the name of</st> <st c="3304">the movie.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3314">price</st>`<st c="3320">: This is an</st> `<st c="3334">IntegerField</st>`
    <st c="3346">value that stores integer values.</st> <st c="3381">It represents
    the price of</st> <st c="3408">the movie.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3418">description</st>`<st c="3430">: This is a</st> `<st c="3443">TextField</st>`
    <st c="3452">value that represents a text field with no specified maximum length.</st>
    <st c="3522">It stores a textual description of</st> <st c="3557">the movie.</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="3567">image</st>`<st c="3573">: This is an</st> `<st c="3587">ImageField</st>`
    <st c="3597">value that stores image files.</st> <st c="3629">The</st> `<st c="3633">upload_to</st>`
    <st c="3642">parameter specifies the directory where uploaded images will be stored.</st>
    <st c="3715">In this case, uploaded images will be stored in the</st> `<st c="3767">movie_images/</st>`
    <st c="3780">directory within the media directory of the Django project.</st>
    <st c="3841">The media directory is used to store user-uploaded files, such as
    images, documents, or other media files.</st> <st c="3948">This directory is specified
    in your Django project’s settings (we will configure it later in</st> <st c="4041">this
    chapter).</st>'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="4055">__str__</st>`<st c="4063">: This is a special method in Python
    classes that returns a string representation of an object.</st> <st c="4160">It
    concatenates the movie’s</st> `<st c="4188">id</st>` <st c="4190">value (converted
    into a string) with a hyphen and the movie’s name.</st> <st c="4259">This method
    will be useful when we display movies in the Django admin</st> <st c="4329">panel
    later.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="4341">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4346">Django provides many other model</st> <st c="4379">fields to support
    common types, such as dates, integers, and emails.</st> <st c="4449">To have complete
    documentation of the kinds of types and how</st> <st c="4509">to use them, refer
    to the</st> `<st c="4536">Model</st>` <st c="4541">field reference in the Django</st>
    <st c="4572">documentation (</st>[<st c="4587">https://docs.djangoproject.com/en/5.0/ref/models/fields/</st>](https://docs.djangoproject.com/en/5.0/ref/models/fields/)<st
    c="4644">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4647">Installing Pillow</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="4665">Because we’re using</st> <st c="4686">images, we need</st> <st
    c="4701">to install Pillow (</st>[<st c="4721">https://pypi.org/project/pillow/</st>](https://pypi.org/project/pillow/)<st
    c="4754">), which adds image-processing capabilities to our</st> <st c="4806">Python
    interpreter.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4825">In the Terminal, stop the server and do</st> <st c="4866">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4880">For macOS, run the</st> <st c="4900">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="4938">For Windows, run the</st> <st c="4960">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="4997">Now that Pillow has been installed, let’s learn how to manage</st>
    <st c="5060">Django migrations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5078">Managing migrations</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**<st c="5098">Django migrations</st>** <st c="5116">is a feature of Django
    that allows</st> <st c="5151">you to manage changes to your database schema –
    that is, changes to the structure of your database tables and the data within
    them – over time, as your Django</st> <st c="5311">project evolves.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5327">When you define models in Django, you’re essentially defining the
    structure of your database tables.</st> <st c="5429">However, as your project
    grows and changes, you might need to make alterations to these models, such as
    adding new fields, removing fields, or modifying existing fields.</st> <st c="5599">Django
    migrations provide a way to propagate these changes to your database schema in
    a controlled and consistent manner (as a version</st> <st c="5734">control system).</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5750">To work with migrations, we must apply</st> <st c="5789">the default
    migrations, create custom migrations, and apply</st> <st c="5850">custom migrations.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5868">Applying the default migrations</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5900">Currently, note a message</st> <st c="5926">in the Terminal when
    you run</st> <st c="5956">the server:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6164">As per the message instructions, stop the server and do the following
    (remember to be located in the</st> `<st c="6266">moviesstore</st>` <st c="6277">folder
    that contains the</st> `<st c="6303">manage.py</st>` <st c="6312">file):</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6319">For macOS, run the</st> <st c="6339">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="6383">For Windows, run the</st> <st c="6405">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="6448">The</st> `<st c="6453">migrate</st>` <st c="6460">command creates
    an initial database based on Django’s default settings.</st> <st c="6533">Note
    that there is a</st> `<st c="6554">db.sqlite3</st>` <st c="6564">file in the project
    root folder.</st> <st c="6598">This file represents our SQLite database.</st>
    <st c="6640">It’s created the first time we run</st> `<st c="6675">migrate</st>`
    <st c="6682">or</st> `<st c="6686">runserver</st>`<st c="6695">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6696">In the previous case, the</st> `<st c="6723">migrate</st>` <st
    c="6730">command applied 18 default migrations (as shown in</st> *<st c="6782">Figure
    5</st>**<st c="6790">.1</st>*<st c="6792">).</st> <st c="6796">Those migrations
    were defined by some default Django apps –</st> `<st c="6856">admin</st>`<st c="6861">,</st>
    `<st c="6863">auth</st>`<st c="6867">,</st> `<st c="6869">contenttypes</st>`<st
    c="6881">, and</st> `<st c="6887">sessions</st>`<st c="6895">. These apps are
    loaded in the</st> `<st c="6926">INSTALLED_APPS</st>` <st c="6940">variable in
    the</st> `<st c="6957">moviesstore/settings.py</st>` <st c="6980">file.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6986">So, the</st> `<st c="6995">migrate</st>` <st c="7002">command runs
    the migrations of all the installed apps.</st> <st c="7058">Note that</st> `<st
    c="7068">INSTALLED_APPS</st>` <st c="7082">also loads the</st> `<st c="7098">movies</st>`
    <st c="7104">app.</st> <st c="7110">However, no migrations were applied for the</st>
    `<st c="7154">movies</st>` <st c="7160">app.</st> <st c="7166">This is because
    we haven’t generated the migrations for the</st> `<st c="7226">movies</st>` <st
    c="7232">app:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.1 – Applying default Django migrations](img/B22457_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7850">Figure 5.1 – Applying default Django migrations</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7897">Creating custom migrations</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7924">Currently, we’ve defined</st> <st c="7949">a</st> `<st c="7952">Movie</st>`
    <st c="7957">model inside the</st> `<st c="7975">movies</st>` <st c="7981">app.</st>
    <st c="7987">Based on that model, we can create our own migrations.</st> <st c="8042">To
    create the migrations for the</st> `<st c="8075">movies</st>` <st c="8081">app,
    we need to run the</st> `<st c="8106">makemigrations</st>` <st c="8120">command
    in</st> <st c="8132">the terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8145">For macOS, run the</st> <st c="8165">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="8216">For Windows, run the</st> <st c="8238">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="8288">The previous command creates migration files based on the models
    that we’ve defined in our Django apps (see</st> *<st c="8397">Figure 5</st>**<st
    c="8405">.2</st>*<st c="8407">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.2 – Executing the makemigrations command](img/B22457_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8462">Figure 5.2 – Executing the makemigrations command</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8511">The migrations are stored in the corresponding app-level</st> `<st
    c="8569">migrations</st>` <st c="8579">folder.</st> <st c="8588">For now, we have
    only defined the</st> `<st c="8622">Movie</st>` <st c="8627">model inside the</st>
    `<st c="8645">movies</st>` <st c="8651">app.</st> <st c="8657">So, this command
    generates the migration file for the</st> `<st c="8711">Movie</st>` <st c="8716">model
    inside the</st> `<st c="8734">movies/migrations/</st>` <st c="8752">folder (see</st>
    *<st c="8765">Figure 5</st>**<st c="8773">.3</st>*<st c="8775">):</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.3 – Generated migrations for the movies app](img/B22457_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="8883">Figure 5.3 – Generated migrations for the movies app</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8935">If we change the</st> `<st c="8953">Movie</st>` <st c="8958">model
    or create new models, we need to execute the</st> `<st c="9010">makemigrations</st>`
    <st c="9024">command again.</st> <st c="9040">This command will create new migration
    files that will serve as a version control</st> <st c="9121">of our</st> <st c="9129">database
    schema.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9145">Note that the migration file was created, but the database hasn’t
    been</st> <st c="9217">updated yet.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9229">Applying custom migrations</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="9256">After running</st> `<st c="9271">makemigrations</st>`<st c="9285">,
    you typically need</st> <st c="9305">to run</st> `<st c="9313">migrate</st>` <st
    c="9320">to apply those migrations to the database and make the corresponding
    changes.</st> <st c="9399">Now, execute the following in</st> <st c="9429">the
    Terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9442">For macOS, run the</st> <st c="9462">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="9506">For Windows, run the</st> <st c="9528">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="9571">As shown in</st> *<st c="9584">Figure 5</st>**<st c="9592">.4</st>*<st
    c="9594">, we applied the</st> `<st c="9611">movies</st>` <st c="9617">app migrations:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.4 – Applying the movies app migrations](img/B22457_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9778">Figure 5.4 – Applying the movies app migrations</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9825">In summary, each time you make changes to a model file, you have
    to do</st> <st c="9897">the following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9911">For macOS, run the</st> <st c="9931">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="10008">For Windows, run the</st> <st c="10030">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="10105">But how do we access our database</st> <st c="10139">and view
    what’s inside?</st> <st c="10164">For that, we use a powerful tool in Django called
    the admin interface.</st> <st c="10235">We’ll discuss this in the</st> <st c="10261">next
    section.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10274">Accessing the Django admin interface</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="10311">To access</st> <st c="10322">our database, we have to go into
    the Django admin interface.</st> <st c="10383">Remember that there is an</st>
    `<st c="10409">admin</st>` <st c="10414">path</st> <st c="10420">in</st> `<st
    c="10423">/moviesstore/urls.py</st>`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <st c="10568">If you go to</st> `<st c="10582">localhost:8000/admin</st>`<st
    c="10602">, you’ll be taken to the admin site, as shown in</st> *<st c="10651">Figure
    5</st>**<st c="10659">.5</st>*<st c="10661">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.5 – Admin page](img/B22457_05_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="10768">Figure 5.5 – Admin page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10791">Django has a powerful built-in admin interface that provides a
    visual way of managing all aspects of a Django project – for example, users, movies,</st>
    <st c="10940">and more.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10949">With what username</st> <st c="10968">and password do we log in
    to the admin interface?</st> <st c="11019">For this, we have to create a superuser
    in</st> <st c="11062">the Terminal.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11075">Creating a superuser</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11096">Let’s create a superuser</st> <st c="11121">to access the admin
    panel.</st> <st c="11149">In the Terminal, stop the server and do</st> <st c="11189">the
    following:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11203">For macOS, run the</st> <st c="11223">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="11275">For Windows, run the</st> <st c="11297">following command:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="11348">You will then be asked to specify a username, email, and password.</st>
    <st c="11416">Note that anyone can access the admin path on your site, so make
    sure that your password is something secure.</st> <st c="11526">After creating</st>
    <st c="11540">the superuser, you should get a message like this from</st> <st
    c="11596">the Terminal:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11641">Restoring your superuser password</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11675">If you wish to change your password</st> <st c="11711">later,
    you can run the</st> <st c="11735">following commands:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11754">Here’s the command</st> <st c="11774">for macOS:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="11828">Here’s the command</st> <st c="11848">for Windows:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="11903">Accessing the admin panel</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="11929">Now, start the server again and log in to admin</st> <st c="11977">with
    the username you just created, as shown in</st> *<st c="12026">Figure 5</st>**<st
    c="12034">.6</st>*<st c="12036">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.6 – Site administration page](img/B22457_05_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12280">Figure 5.6 – Site administration page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12317">Under</st> **<st c="12324">Users</st>**<st c="12329">, you’ll
    see the user you’ve just created, as shown in</st> *<st c="12384">Figure 5</st>**<st
    c="12392">.7</st>*<st c="12394">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.7 – The Users admin page](img/B22457_05_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12681">Figure 5.7 – The Users admin page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12714">You can add</st> <st c="12727">additional user accounts here for</st>
    <st c="12761">your team.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12771">Currently, our</st> `<st c="12787">Movie</st>` <st c="12792">model
    doesn’t show up in admin.</st> <st c="12825">We need to explicitly tell Django
    what to display in it.</st> <st c="12882">Before adding our</st> `<st c="12900">Movie</st>`
    <st c="12905">model in admin, let’s configure our project so that images can</st>
    <st c="12969">be uploaded.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12981">Configuring image upload</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="13006">We have to configure</st> <st c="13027">where we wish to store
    our images when we add them.</st> <st c="13080">First, in</st> `<st c="13090">/moviesstore/settings.py</st>`<st
    c="13114">, add the following in bold at the end of</st> <st c="13156">the file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: <st c="13233">Let’s explain the</st> <st c="13252">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '`<st c="13266">MEDIA_ROOT</st>`<st c="13277">: This variable specifies the
    filesystem path to the directory where uploaded media files will be stored.</st>
    <st c="13384">Here,</st> `<st c="13390">BASE_DIR</st>` <st c="13398">is a variable
    that represents the base directory of the Django project, and</st> `<st c="13475">''media''</st>`
    <st c="13482">is the subdirectory within</st> `<st c="13510">BASE_DIR</st>` <st
    c="13518">where media files will be stored.</st> <st c="13553">So,</st> `<st c="13557">MEDIA_ROOT</st>`
    <st c="13567">will be set to a path</st> <st c="13590">like</st> `<st c="13595">/your_project_folder/media</st>`<st
    c="13621">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="13622">MEDIA_URL</st>`<st c="13632">: This variable specifies the URL
    prefix that will be used to serve media files from the web server.</st> <st c="13734">In
    this code, it’s set to</st> `<st c="13760">''/media/''</st>`<st c="13769">, meaning
    that media files uploaded to the Django application will be accessible via URLs
    starting with</st> `<st c="13873">/media/</st>`<st c="13880">. For example, if
    you upload an image named</st> `<st c="13924">example.jpg</st>`<st c="13935">,
    it might be accessible at a URL</st> <st c="13969">like</st> <st c="13974">http://localhost:8000/media/example.jpg</st><st
    c="14013">.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="14014">With that, the server has been configured</st> <st c="14056">for
    image upload.</st> <st c="14075">So, let’s learn how to serve</st> <st c="14104">those
    images.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14117">Serving the stored images</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="14143">Next, to enable the</st> <st c="14164">server to serve the stored
    images, we have to modify the</st> `<st c="14221">/moviesstore/urls.py</st>` <st
    c="14241">file and add the following</st> <st c="14269">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: from django.contrib import admin <st c="15266">from .models import Movie</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="15392">/admin</st>. The <st c="15404">Movie</st> model will now appear
    (as shown in *<st c="15445">Figure 5</st>**<st c="15453">.8</st>*):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 5.8 – Admin page with movies available](img/B22457_05_08.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="15629">Figure 5.8 – Admin page with movies available</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="15674">Try adding a</st> `<st c="15688">movie</st>` <st c="15693">object
    by clicking</st> **<st c="15713">+Add</st>**<st c="15717">. You</st> <st c="15722">will
    be brought</st> <st c="15738">to the</st> **<st c="15746">Add movie</st>** <st
    c="15755">form, as shown in</st> *<st c="15774">Figure 5</st>**<st c="15782">.9</st>*<st
    c="15784">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.9 – The Add movie form](img/B22457_05_09.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="16083">Figure 5.9 – The Add movie form</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="16114">Try adding a movie and hit</st> **<st c="16142">Save</st>**<st
    c="16146">. Your movie object will be saved to the database and reflected in the
    admin page, as shown in</st> *<st c="16241">Figure 5</st>**<st c="16249">.10</st>*<st
    c="16252">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.10 – Movies admin page](img/B22457_05_10.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="16399">Figure 5.10 – Movies admin page</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="16430">Note that the admin panel shows the movie’s information as a combination
    of the movie’s ID with a hyphen and the movie’s name.</st> <st c="16558">That’s
    because we defined the</st> `<st c="16588">Movie</st>` <st c="16593">model’s</st>
    `<st c="16602">__str__</st>` <st c="16609">method to work</st> <st c="16625">like
    that.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="16635">You can also see</st> <st c="16652">the movie</st> <st c="16662">image
    in</st> `<st c="16672">/moviesstore/media/movie_images/<image file>.jpg</st>`<st
    c="16720">.</st> *<st c="16722">Figure 5</st>**<st c="16730">.11</st>* <st c="16733">shows
    an image called</st> `<st c="16756">inception.jpg</st>` <st c="16769">stored in
    the</st> <st c="16784">previous folder:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 5.11 – Location of stored movie images](img/B22457_05_11.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="16917">Figure 5.11 – Location of stored movie images</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="16962">Whenever you upload a movie image, it will be stored in the previous
    folder.</st> <st c="17040">With that, we’ve configured</st> <st c="17067">our
    project so that it can store</st> <st c="17100">and</st> <st c="17105">serve images.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="17118">Summary</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="17126">Models are essential for working with databases in Django.</st>
    <st c="17186">In this chapter, we learned about the fundamentals of Django models
    and created a</st> `<st c="17268">Movie</st>` <st c="17273">model.</st> <st c="17281">We
    also learned how to use the Django admin interface and how to create movies.</st>
    <st c="17361">In the next chapter, we’ll learn how to extract and display the
    movies stored in our database on</st> <st c="17458">our site.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
