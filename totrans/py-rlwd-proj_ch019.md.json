["```py\n% python src/summarize.py -o summary/series_1/2023/03 data/clean/Series_1.ndj\n```", "```py\nfrom collections.abc import Iterator, Callable\nimport json\nfrom pathlib import Path\nfrom typing import TypeAlias\n\nfrom analysis_model import Sample\n\nExtractor: TypeAlias = Callable[[Sample], float]\n\ndef attr_iter(some_path: Path, extractor: Extractor) -> Iterator[float]:\n    with some_path.open() as source:\n        for line in source:\n            document = Sample(**json.loads(line))\n            yield extractor(document)\n\ndef x_values(some_path: Path) -> list[float]:\n    return list(attr_iter(some_path, lambda sample: sample.x))\n```", "```py\n[identification]\n    date = \"2023-03-27T10:04:00\"\n[creator]\n    title = \"Some Summary App\"\n    version = 4.2\n[source]\n    title = \"Anscombe’s Quartet\"\n    path = \"data/clean/Series_1.ndj\"\n[x.location]\n    mean = 9.0\n[x.spread]\n    variance = 11.0\n[y.location]\n    mean = 7.5\n[y.spread]\n    variance = 4.125\n```", "```py\nFeature: Summarize an Anscombe Quartet Series.\n\nScenario: When requested, the application creates a TOML summary of a series.\n  Given the \"clean/series_1.ndj\" file exists\n  When we run command \"python src/summarize.py \\\n        -o summary/series_1/2023/03 data/clean/Series_\\1.ndj\"\n  Then the \"summary/series_1/2023/03/summary.toml\" file exists\n  And the value of \"summary[’creator’][’title’]\" is \"Anscombe Summary App\"\n  And the value of \"summary[’source’][’path’]\" is \"data/clean/Series_1.ndj\"\n  And the value of \"summary[’x’][’location’][’mean’]\" is \"9.0\"\n```", "```py\nfrom pytest import fixture\nfrom unittest.mock import Mock, call, sentinel\nimport summary_app\n\n@fixture\ndef mocked_mean(monkeypatch):\n    mean = Mock(\n        return_value=sentinel.MEAN\n    )\n    monkeypatch.setattr(summary_app, ’mean’, mean)\n    return mean\n\n@fixture\ndef mocked_variance(monkeypatch):\n    variance = Mock(\n        return_value=sentinel.VARIANCE\n    )\n    monkeypatch.setattr(summary_app, ’variance’, variance)\n    return variance\n\ndef test_var_summary(mocked_mean, mocked_variance):\n    sample_data = sentinel.SAMPLE\n    result = summary_app.variable_summary(sample_data)\n    assert result == {\n        \"location\": {\"mean\": sentinel.MEAN},\n        \"spread\": {\"variance\": sentinel.VARIANCE},\n    }\n    assert mocked_mean.mock_calls == [call(sample_data)]\n    assert mocked_variance.mock_calls == [call(sample_data)]\n```", "```py\n# Summary of {{ summary[’source’][’name’] }}\n\nCreated {{ summary[’identification’][’date’] }}\n\nSome interesting notes about the project...\n\n## X-Variable\n\nSome interesting notes about this variable...\n\nMean = {{ summary[’x’][’location’][’mean’] }}\n\netc.\n```", "```py\npandoc -s --toc -c pandoc.css summary_report.md -o summary_report.html\n```"]