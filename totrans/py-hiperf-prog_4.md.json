["```py\nimport multiprocessing\nimport time\n\nclass Process(multiprocessing.Process):\n    def __init__(self, id):\n        super(Process, self).__init__()\n        self.id = id\n\n    def run(self):\n        time.sleep(1)\n        print(\"I'm the process with id: {}\".format(self.id))\n```", "```py\nif __name__ == '__main__':\n    p = Process(0)\n    p.start()\n\n```", "```py\n if __name__ == '__main__':\n    p = Process(0)\n    p.start()\n    p.join()\n\n```", "```py\nif __name__ == '__main__':\n    processes = Process(1), Process(2), Process(3), Process(4)\n    [p.start() for p in processes]\n```", "```py\npool = multiprocessing.Pool()\npool = multiprocessing.Pool(processes=4)\n```", "```py\ndef square(x):\n    return x * x\n\ninputs = [0, 1, 2, 3, 4]\noutputs = pool.map(square, inputs)\n\n```", "```py\noutputs_async = pool.map_async(square, inputs)\noutputs = outputs_async.get()\n\n```", "```py\nresults_async = [pool.apply_async(square, i) for i in range(100))]\nresults = [r.get() for r in results_async]\n```", "```py\nhits/total = area_circle/area_square = pi/4\npi = 4 * hits/total\n```", "```py\nimport random\n\nsamples = 1000000\nhits = 0\n\nfor i in range(samples):\n    x = random.uniform(-1.0, 1.0)\n    y = random.uniform(-1.0, 1.0)\n\n    if x**2 + y**2 <= 1:\n        hits += 1\n\npi = 4.0 * hits/samples\n```", "```py\ndef sample():\n    x = random.uniform(-1.0, 1.0)\n    y = random.uniform(-1.0, 1.0)\n\n    if x**2 + y**2 <= 1:\n        return 1\n    else:\n        return 0\n\npool = multiprocessing.Pool()\nresults_async = [pool.apply_async(sample) for i in range(samples)]\nhits = sum(r.get() for r in results_async)\n```", "```py\n$ time python -c 'import pi; pi.pi_serial()'\nreal    0m0.734s\nuser    0m0.731s\nsys    0m0.004s\n$ time python -c 'import pi; pi.pi_apply_async()'\nreal    1m36.989s\nuser    1m55.984s\nsys    0m50.386\n\n```", "```py\ndef sample_multiple(samples_partial):\n return sum(sample() for i in range(samples_partial))\n\nntasks = 10\nchunk_size = int(samples/ntasks)\npool = multiprocessing.Pool()\nresults_async = [pool.apply_async(sample_multiple, chunk_size)\n for i in range(ntasks)]\nhits = sum(r.get() for r in results_async)\n```", "```py\n$ time python -c 'import pi; pi.pi_apply_async_chunked()'\nreal    0m0.325s\nuser    0m0.816s\nsys    0m0.008s\n\n```", "```py\nshared_variable = multiprocessing.Value('f')\nshared_variable.value = 0\n```", "```py\nclass Process(multiprocessing.Process):\n\n    def __init__(self, counter):\n        super(Process, self).__init__()\n        self.counter = counter\n\n    def run(self):\n        for i in range(1000):\n            self.counter.value += 1\n\n```", "```py\ndef main():\n    counter = multiprocessing.Value('i', lock=True)\n    counter.value = 0\n\n    processes = [Process(counter) for i in range(4)]\n    [p.start() for p in processes]\n    [p.join() for p in processes] # processes are done\n    print(counter.value)\nmain()\n```", "```py\nlock = multiprocessing.Lock()\n\nclass Process(multiprocessing.Process):\n\n    def __init__(self, counter):\n        super(Process, self).__init__()\n        self.counter = counter\n\n    def run(self):\n        for i in range(1000):\n            with lock: # acquire the lock\n self.counter.value += 1\n # release the lock\n\n```", "```py\n$ ipcluster start\n\n```", "```py\nIn [1]: from IPython.parallel import Client\nIn [2]: rc = Client()\n```", "```py\nIn [3]: rc.ids\nOut[4]: [0, 1, 2, 3]\n```", "```py\nIn [5]: dview = rc[0] # Select the first engine\nIn [6]: dview = rc[::2] # Select every other engine\nIn [7]: dview = rc[:] # Selects all the engines\nIn [8]: dview = rc.direct_view('all') # Alternative\n```", "```py\nIn [9]: dview.execute('a = 1')\n```", "```py\nIn [10]: dview.pull('a').get() # equivalent: dview['a']\nOut[10]: [1, 1, 1, 1]\nIn [11]: dview.push({'a': 2}) # equivalent: dview['a'] = 2\n```", "```py\nIn [12]: res = dview.execute('a = *__*') # Invalid\nIn [13]: res.get()\n[0:execute]:\n  File \"<ipython-input-3-945a473d5cbb>\", line 1\n    a = *__*\n        ^\nSyntaxError: invalid syntax\n\n[1:execute]:\n  File \"<ipython-input-3-945a473d5cbb>\", line 1\n    a = *__*\n        ^\nSyntaxError: invalid syntax\n[2: execute]:\n...\n```", "```py\nwith dview.sync_imports():\n    import numpy\n# The syntax import _ as _ is not supported\n```", "```py\nIn [14]: a = range(100)\nIn [15]: def square(x): return x * x\nIn [16]: result_async = dview.map(square, a)\nIn [17]: result = result_async.get()\n```", "```py\nIn [18]: @dview.parallel()\n    ...: def square(x):\n    ...:     return x * x\nIn [19]: square.map(range(100))\n```", "```py\nIn [20]: def square(x):\n            return x * x\nIn [21]: result_async = dview.apply(square, 2)\nIn [22]: result_async.get()\nOut[22]: [4, 4, 4, 4]\n```", "```py\nIn [23]: @dview.remote()\n    ...: def square(x):\n    ...:     return x * x\n    ...:\nIn [24]: square(2)\nOut[24]: [4, 4, 4, 4]\n```", "```py\nIn [25]: dview.scatter('a', [0, 1, 2, 3])\nIn [26]: dview['a']\nOut[26]: [[0], [1], [2], [3]]\n```", "```py\nIn [13]: dview.scatter('a', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\nIn [14]: dview['a']\nOut[14]: [[0, 1, 2], [3, 4, 5], [6, 7, 8], [9, 10]]\n```", "```py\nIn [17]: dview.gather('a').get()\nOut[17]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n```", "```py\nfrom random import uniform\nfrom simul import Particle\nfrom IPython.parallel import Client\n\nparticles = [Particle(uniform(-1.0, 1.0),\n                      uniform(-1.0, 1.0),\n                      uniform(-1.0, 1.0)) for i in range(10000)]\nrc = Client()\ndview = rc[:]\n```", "```py\ndview.scatter('particle_chunk', particles, block=True)\n\ndview.execute('from simul import ParticleSimulator')\ndview.execute('simulator = ParticleSimulator(particle_chunk)')\ndview.execute('simulator.evolve_cython(0.1)')\n\nparticles = dview.gather('particle_chunk', block=True)\n```", "```py\nIn [1]: from simul import benchmark\nIn [2]: from simul_parallel import scatter_gather\nIn [5]: %timeit benchmark(10000, 'cython')\n1 loops, best of 3: 1.34 s per loop\nIn [6]: %timeit scatter_gather(10000)\n1 loops, best of 3: 720 ms per loop\n```", "```py\nIn [1]: from IPython.parallel import Client\nIn [2]: rc = Client()\nIn [3]: tview = rc.load_balanced_view()\n```", "```py\nIn [4]: dview = rc[:]\nIn [5]: tview = rc.load_balanced_view()\nIn [6]: def square(x):\n   ...:     return x * x\n   ...:\nIn [7]: dview.apply(square, 2).get()\nOut[7]: [4, 4, 4, 4]\nIn [8]: tview.apply(square, 2).get()\nOut[8]: 4\n```", "```py\nimport numpy as np\n\ndef square_serial(double[:] inp):\n    cdef int i, size\n    cdef double[:] out\n    size = inp.shape[0]\n    out_np = np.empty(size, 'double')\n    out = out_np\n\n    for i in range(size):\n        out[i] = inp[i]*inp[i]\n\n    return out_np  \n```", "```py\nwith nogil:\n    for i in prange(size):\n        out[i] = inp[i]*inp[i]\n```", "```py\nfor i in prange(size, nogil=True):\n    out[i] = inp[i]*inp[i]\n```", "```py\nfor i in prange(size, nogil=True):\n    out[i] = inp[i]*inp[i]\n    with gil: \n x = 0 # Python assignment\n\n```", "```py\nfrom distutils.core import setup\nfrom distutils.extension import Extension\nfrom Cython.Build import cythonize\n\nhello_parallel = Extension('hello_parallel',\n ['hello_parallel.pyx'],\n extra_compile_args=['-fopenmp'],\n extra_link_args=['-fopenmp'])\n\nsetup(\n   name='Hello',\n   ext_modules = cythonize(['cevolve.pyx', hello_parallel]),\n)\n```", "```py\ndef c_evolve(double[:, :] r_i,double[:] ang_speed_i,\n             double timestep,int nsteps):\n\n    # cdef declarations\n\n    for i in range(nsteps):\n        for j in range(nparticles):\n            # loop body\n```", "```py\n  for j in range(nparticles):\n        for i in range(nsteps):\n\n            # loop body\n```", "```py\nfor j in prange(nparticles, nogil=True)\n\n```", "```py\nIn [3]: %timeit benchmark(10000, 'openmp')\n1 loops, best of 3: 599 ms per loop\nIn [4]: %timeit benchmark(10000, 'cython')\n1 loops, best of 3: 1.35 s per loop\n```"]