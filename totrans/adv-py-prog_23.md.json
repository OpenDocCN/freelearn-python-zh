["```py\ndef number_sum(n): \n    '''Returns the sum of the first n numbers''' \n    assert(n >= 0), 'n must be >= 0' \n\n    if n == 0:\n        return 0\n    else:\n        return n + number_sum(n-1)  \n\nif __name__ == '__main__': \n    from timeit import Timer \n    t = Timer('number_sum(30)', 'from __main__ import \\\n       number_sum')\n    print('Time: ', t.timeit())\n```", "```py\nTime:  3.023907012\n```", "```py\nsum_cache = {0:0}\n\ndef number_sum(n): \n    '''Returns the sum of the first n numbers''' \n    assert(n >= 0), 'n must be >= 0'\n\n    if n in sum_cache:\n        return sum_cache[n]\n    res = n + number_sum(n-1)\n    # Add the value to the cache\n    sum_cache[n] = res\n    return res\n\nif __name__ == '__main__': \n    from timeit import Timer \n    t = Timer('number_sum(300)', 'from __main__ import \\\n      number_sum')\n    print('Time: ', t.timeit())\n```", "```py\nTime:  0.12304591899999999\n```", "```py\ncache_fib = {0:0, 1:1} \n\ndef fibonacci(n): \n    '''Returns the suite of Fibonacci numbers''' \n    assert(n >= 0), 'n must be >= 0' \n\n    if n in cache_fib: \n        return cache_fib[n] \n    res = fibonacci(n-1) + fibonacci(n-2) \n    cache_fib[n] = res \n    return res\n```", "```py\nimport functools \n\ndef memoize(fn): \n    cache = dict() \n\n    @functools.wraps(fn) \n    def memoizer(*args): \n        if args not in cache: \n            cache[args] = fn(*args) \n        return cache[args] \n\n    return memoizer\n```", "```py\n@memoize \ndef number_sum(n): \n    '''Returns the sum of the first n numbers''' \n    assert(n >= 0), 'n must be >= 0' \n    if n == 0:\n        return 0\n    else:\n        return n + number_sum(n-1)\n\n@memoize \ndef fibonacci(n): \n    '''Returns the suite of Fibonacci numbers''' \n    assert(n >= 0), 'n must be >= 0'\n    if n in (0, 1):\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n```", "```py\ndef main():\n    from timeit import Timer\n    to_execute = [\n        (number_sum, \n         Timer('number_sum(300)', 'from __main__ import \\\n           number_sum')),\n        (fibonacci, \n         Timer('fibonacci(100)', 'from __main__ import \\\n           fibonacci'))    \n    ]\n\n    for item in to_execute:\n        fn = item[0]\n        print(f'Function \"{fn.__name__}\": {fn.__doc__}')\n        t = item[1]\n        print(f'Time: {t.timeit()}')\n        print()\nif __name__ == '__main__': \n    main()\n```", "```py\nFunction \"number_sum\": Returns the sum of the first n \nnumbers\nTime: 0.152614356\nFunction \"fibonacci\": Returns the suite of Fibonacci \nnumbers\nTime: 0.142395913\n```"]