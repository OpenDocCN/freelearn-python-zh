- en: Chapter 2. Building Your First Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Improving the scaffolding application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a simple contacts application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Reddit clone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a Facebook clone
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `crud.archive`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting an existing static site into a web2py application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating semi-static pages (flatpages)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding your custom logo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating menus and submenus
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing menus with icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a navigation bar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using cookies to set the language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing modular applications
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Speeding up downloads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have web2py installed and running, you are ready to start building
    your first application. The recipes in this chapter will provide examples of complete
    applications, comprising models, views, and controllers. They range from simple
    **contacts** applications to a more complex **Facebook** clone. Other recipes
    in this chapter will show you how to solve some recurrent problems that new users
    typically encounter, from adding a logo to creating a navigation bar.
  prefs: []
  type: TYPE_NORMAL
- en: Improving the scaffolding application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we discuss how to create your own scaffolding application and
    add your own configuration file. The **scaffolding application** is the collection
    of files that come with any new web2py application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The scaffolding app includes several files. One of them is `models/db.py`,
    which imports four classes from `gluon.tools` (Mail, `Auth, Crud`, and `Service)`,
    and defines the following global objects: `db, mail, auth, crud`, and `service`.'
  prefs: []
  type: TYPE_NORMAL
- en: The scaffolding application also defines tables required by the `auth` object,
    such as `db.auth_user`.
  prefs: []
  type: TYPE_NORMAL
- en: The default scaffolding application is designed to minimize the number of files,
    not to be modular. In particular, the model file, `db.py`, contains the configuration,
    which in a production environment, is best kept in separate files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we suggest creating a configuration file, `models/0.py`, that contains
    something like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'We also modify `models/db.py`, so that it uses the information from the configuration
    file, and it defines the `auth_user` table explicitly (this makes it easier to
    add custom fields):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally, after a web2py installation or upgrade, the welcome application is
    tar-gzipped into `welcome.w2p`, and is used as the scaffolding application. You
    can create your own scaffolding application from an existing application using
    the following commands from a `bash` shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The web2py wizard uses a similar approach, and creates a similar `0.py` configuration
    file. You can add more settings to the `0.py` file as needed.
  prefs: []
  type: TYPE_NORMAL
- en: The `0.py` file may contain sensitive information, such as the `security_key`
    used to encrypt passwords, the `email_login` containing the password of your smtp
    account, and the `login_config` with your Janrain password ([http://www.janrain.com/](http://www.janrain.com/)).
    You may want to write this sensitive information in a read-only file outside the
    web2py tree, and read them from your `0.py` instead of hardcoding them. In this
    way, if you choose to commit your application to a version-control system, you
    will not be committing the sensitive information.
  prefs: []
  type: TYPE_NORMAL
- en: The scaffolding application includes other files that you may want to customize,
    including `views/layout.html` and `views/default/users.html`. Some of them are
    the subject of upcoming recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Building a simple contacts application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you start designing a new web2py application, you go through three phases
    that are characterized by looking for the answer to the following three questions:'
  prefs: []
  type: TYPE_NORMAL
- en: What data should the application store?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which pages should be presented to the visitors?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How should the page content, for each page, be presented?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The answer to these three questions is implemented in the **models**, the **controllers**,
    and the **views** respectively.
  prefs: []
  type: TYPE_NORMAL
- en: It is important for a good application design to try answering those questions
    exactly in this order, and as accurately as possible. Such answers can later be
    revised, and more tables, more pages, and more bells and whistles can be added
    in an iterative fashion. A good web2py application is designed in such a way that
    you can change the table definitions (add and remove fields), add pages, and change
    page views, without breaking the application.
  prefs: []
  type: TYPE_NORMAL
- en: A distinctive feature of web2py is that everything has a default. This means
    you can work on the first of those three steps without the need to write code
    for the second and third step. Similarly, you can work on the second step without
    the need to code for the third. At each step, you will be able to immediately
    see the result of your work; thanks to `appadmin` (the default database administrative
    interface) and generic views (every action has a view by default, until you write
    a custom one).
  prefs: []
  type: TYPE_NORMAL
- en: Here we consider, as a first example, an application to manage our business
    contacts, a CRM. We will call it `Contacts`. The application needs to maintain
    a list of companies, and a list of people who work at those companies.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all we create the model.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this step we identify which tables are needed and their fields. For each
    field, we determine whether they:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Must contain unique values (`unique=True`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Contain empty values (`notnull=True`)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are references (contain a list of a record in another table)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Are used to represent a record (format attribute)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: From now on, we will assume we are working with a copy of the default scaffolding
    application, and we only describe the code that needs to be added or replaced.
    In particular, we will assume the default `views/layout.html and models/db.py.`
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Here is a possible model representing the data we need to store in `models/db_contacts.py:`
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Of course, a more complex data representation is possible. You may want to allow,
    for example, multiple users for the system, allow the same person to work for
    multiple companies, and keep track of changes in time. Here, we will keep it simple.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The name of this file is important. In particular, models are executed in alphabetical
    order, and this one must follow db.py.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'After this file has been created, you can try it by visiting the following
    url: [http://127.0.0.1:8000/contacts/appadmin](http://127.0.0.1:8000/contacts/appadmin),
    to access the web2py database administrative interface, `appadmin`. Without any
    controller or view, it provides a way to insert, select, update, and delete records.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we are ready to build the controller. We need to identify which pages are
    required by the application. This depends on the required workflow. At a minimum
    we need the following pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An index page (the home page)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page to list all companies
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page that lists all contacts for one selected company
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page to create a company
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page to edit/delete a company
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page to create a contact
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page to edit/delete a contact
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page that allows to read the information about one contact and the communication
    logs, as well as add a new communication log
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Such pages can be implemented as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Make sure that you do not delete the existing `user, download`, and `service`
    functions in the scaffolding `default.py`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Notice how all pages are built using the same ingredients: **select queries**
    and **crud forms**. You rarely need anything else.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Also notice the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Some pages require a `request.args(0)` argument (a company ID for contacts and
    `company_edit`, a contact ID for `contact_edit`, and `contact_logs)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All selects have an `orderby` argument.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All crud forms have a next argument that determines the redirection after form
    submission.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: All actions return `locals()`, which is a Python dictionary containing the local
    variables defined in the function. This is a shortcut. It is of course possible
    to return a dictionary with any subset of `locals()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`contact_create` sets a default value for the new contact company to the value
    passed as `args(0)`.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `contacts_logs` retrieves past logs after processing `crud.create` for a
    new log entry. This avoid unnecessarily reloading of the page, when a new log
    is inserted.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this point our application is fully functional, although the look-and-feel
    and navigation can be improved.:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You can create a new company at: `http://127.0.0.1:8000/contacts/default/company_create`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can list all companies at: `http://127.0.0.1:8000/contacts/default/companies`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can edit company `#1` at: `http://127.0.0.1:8000/contacts/default/company_edit/1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can create a new contact at: `http://127.0.0.1:8000/contacts/default/contact_create`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can list all contacts for company `#1` at: `http://127.0.0.1:8000/contacts/default/contacts/1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can edit contact `#1` at: `http://127.0.0.1:8000/contacts/default/contact_edit/1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'And you can access the communication log for contact `#1` at: `http://127.0.0.1:8000/contacts/default/contact_logs/1`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should also edit the `models/menu.py` file, and replace the content with
    the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The application now works, but we can improve it by designing a better look
    and feel for the actions. That's done in the views.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Create and edit file `views/default/companies.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how this page looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Create and edit file `views/default/contacts.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how this page looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_17.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Create and edit file `views/default/company_create.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create and edit file `views/default/contact_create.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create and edit file: `views/default/company_edit.html:`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create and edit file `views/default/contact_edit.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Create and edit file `views/default/contact_logs.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how this page looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Notice that in the last view, we used the function `MARKMIN` to render the
    content of the `db.log.body`, using the `MARKMIN` markup. This allows embedding
    links, images, anchors, font formatting information, and tables in the logs. For
    details about the `MARKMIN` syntax we refer to: [http://web2py.com/examples/static/markmin.html](http://web2py.com/examples/static/markmin.html).'
  prefs: []
  type: TYPE_NORMAL
- en: Building a Reddit clone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Here we show how to build an application to post and rank links to online news
    items, similar to the [http://www.reddit.com/](http://www.reddit.com/) website.
    The links are organized into categories, and users can post, vote, and comment
    on them. As in the previous recipe, the code only shows additions or changes to
    the default scaffolding application. We will call our application `reddit`.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we will not support threaded comments (as in the actual [http://www.reddit.com/](http://www.reddit.com/)
    website), because it would be an unnecessary complication. We will discuss threaded
    comments in a subsequent recipe.
  prefs: []
  type: TYPE_NORMAL
- en: We will follow the same steps discussed in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This application is very similar to the `contacts` of the previous recipe. In
    fact, the data model is almost identical, provided that we map table `company`
    into a table `category`, and table `contact` into a table `news`. The main differences
    are that news items do not have a `name`, but they have a `title` and a `link`
    instead. Moreover, `news` items must be sorted by user votes, and not alphabetically.
    We also need to add a mechanism to allow users to vote, record votes, and prevent
    double counting. We need an extra table for this. We will also not deal with pagination,
    since this is discussed in a separate recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the complete model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: As discussed previously, many of the needed actions are equivalent to the `contacts`
    application of the previous recipe. In particular, we need actions to list categories,
    to list news for a given category, to create and edit categories, to create and
    edit news, to list comments, and vote for `news` items.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Most of these actions are very standard, and composed of the usual `select`
    and `crud` forms.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We used two types of decorators to make sure that only logged-in users can
    edit content, and only managers can create and edit categories. You can use `appadmin`
    to create a `manager` group and give membership to users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_19.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'The only special action is the last `vote`. The vote action is designed to
    be an Ajax callback. To avoid indirect reference attacks, the first line makes
    sure the action is called with a `POST` request. Then we parse the request args:
    it expects a news ID as `args(0)`, and plus or minus as `args(0)`, depending on
    whether we want to vote the news item up or down. If we vote up (`plus`), it creates
    a new db.vote entry with value equal to `+1`. If we vote down (`minus`), it creates
    a new `db.vote` entry with value equal to `-1`. The action also checks whether
    we voted already. We are allowed to change our vote, but not to vote twice.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: This action returns a JavaScript string that updates the votes HTML element
    with the latest vote count, and flashes a new message. The last line of the action
    is tightly coupled with the view that will perform the Ajax call (views/default/news_comments.html).
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'We also want to list all possible categories in the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we need to create the following views:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`views/default/categories.html:`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`views/default/news.html:`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how this page looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_20.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: '`views/default/category_create.html:`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`views/default/news_create.html:`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`views/default/category_edit.html:`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`views/default/categories.html:`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: '`views/default/news_comments.html:`'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice the code:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'On clicking, it performs an Ajax request that records our vote. The return
    value of the Ajax request is evaluated (`:eval`). The URL(`vote`) returns a JavaScript
    code that will be evaluated:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
- en: 'In particular, it will alter the content of the following code, and flash a
    new message (slidedown):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is how this page looks:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_21.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Building a Facebook clone
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: At its fundamental level, Facebook handles friendship relations between users,
    and allows friends to see each other's posts. Users can register, log in, search
    for other users, request friendship, and accept friendship. When a user posts
    a message, the post will be visible on the wall (web page) of all his/her friends.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the real Facebook application is quite complex, and our version is
    greatly simplified, but it captures the most important features. In particular,
    we will omit the ability to attach comments after posts, and we will omit e-mail
    notification features. We will also omit the code to handle photos, videos, and
    chat. We are only interested in the friendship relations and display wall posts,
    based on friendship. We will call our application `friends`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The core of our design is a table to link two people: a `source` and a `target`
    of a friendship relation. The friendship relation is requested by a `source`,
    and must be approved by a `target`. When approved, the `source` user can see the
    posts and profile info of the `target`. While the real Facebook friendship relations
    are bi-directional (although friends can be hidden/blocked), in our case we assume
    unidirectional friendship (two users must give friendship to each other to see
    each other''s posts).'
  prefs: []
  type: TYPE_NORMAL
- en: 'The model is therefore quite simple, and we only need two tables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The last five lines define various shortcuts that will make our controllers
    and views more compact. For example, they allow the user to use User instead of
    `db.user`, and `orderby=alphabetical` instead of the more verbose equivalent.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: myfriends is the set of people that have accepted our friendship, which means
    we can see their posts.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The following list line allows us to print the first name followed by last
    name of a user, given a user object or a user reference:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We are going to need the following pages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An **index** page that, if we are logged in, redirects to our home page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A **private** home page that shows our messages, the posts of our friends, and
    allows us to post a new post
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page to search for new friends by name
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A page to check who our current friends are, check pending friend requests,
    and approve or deny friendship
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: A wall page to see the status of one particular friend (or our own)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We also need a callback action to implement to allow users to **request** friendship,
    to **accept** friendship, to **deny** a friendship request, and to **cancel**
    a previous request for friendship. We implement these through a single Ajax callback
    in a function called `friendship:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We also include the **home, wall, friends**, and **search** pages in the menu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Most of the views are straightforward.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here is `views/default/home.html:`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice the jQuery script that resizes the input message box, and the use of
    MARKMIN for rendering message markup.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here is `views/default/wall.html`, which is very similar to the previous view
    (the difference is that there is no form, and the posts are relative to a single
    user, specified by `request.args(0)):`
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is what this page looks like:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Here is `views/default/search.html:`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is what this page looks like:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Notice how the buttons perform Ajax calls to `request` friendship to `user.id`.
    Upon click, the button is replaced by a message that says pending.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Below is `views/default/friends.html`. It lists current friends and pending
    friendship requests:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here is what this page looks like:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![How to do it...](img/5467OS_02_24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This view displays two tables: a list of friendships **offered** to us (by
    accepting, we give them the permission to see our profile and posts), and friendship
    **requests** that we sent (people we want to see profile and posts of). For each
    user in the first table, there are two buttons. A button that performs an Ajax
    call to **accept** a pending friendship request, and a button to **deny** friendship.
    For each user in the second table, there is a column that informs us of whether
    our request was accepted, and a column with a button to cancel the friendship
    relation (whether pending or established).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice how `{{=name_of(user)}}` and `{{=name_of(message.posted_by)}}` require
    a database lookup. Our application can be sped up by caching the output of this
    function.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Using crud.archive
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we discuss how to create full versioning for records in any
    application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you have any table, for example, `db.mytable`, that needs versioning, and
    you use `crud.update`, you can store a full revision history for your records,
    by passing `onaccept=crud.archive` to `crud.update`. Here is an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`crud.archive` will create a hidden table `db.mytable_archive`, and store the
    old record, before update, in the newly created table, including a reference to
    the current record.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Normally, this new table is hidden and only visible to web2py internals, but
    you can have access to it by defining it explicitly in the model. If the original
    table was called `db.mytable`, the archive table must be called `db.mytable_archive`
    (postfix the original one with `_archive)`, and it must extend the original table
    with a reference field called `current_record`. Here is a concrete example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: For a different table, just replace `mytable` with the actual table name. Everything
    else stays the same.
  prefs: []
  type: TYPE_NORMAL
- en: Notice such table includes all fields of `db.mytable` plus one `current_record`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's take a look at other features of `crud.archive`.
  prefs: []
  type: TYPE_NORMAL
- en: Timestamping the stored record
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`crud.archive` does not timestamp the stored record, unless your original table
    has a timestamp and signature. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'By adding `auth.signature` to the table, we are adding the following fields:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: You can also do this manually (without `auth.signature)`, and give any name
    to the signature and timestamp fields. `crud.archive` handles them transparently.
    They are filled by the `SQLFORM.accepts` function.
  prefs: []
  type: TYPE_NORMAL
- en: Storing the history of each record
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The main idea behind `crud.archive` is that of storing the history of each record
    that is edited, and storing previous revisions in a separate table. This allows
    you to edit the record without breaking references to it. Moreover, if you alter
    (migrate) the original table, the archive table will migrate as well. The only
    catch is that deleting a record in the original table will cause a cascade delete
    in the archive table, and the entire previous history for the record is deleted.
    Hence, probably, you do not want to ever delete records, but just make them **disabled**,
    by unchecking the `is_active` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'You will also have to change the query in some `select` statements to hide
    records that are disabled, by filtering records with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Converting an existing static site into a web2py application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We will assume that you have a collection of static HTML files, CSS files,
    JavaScript files, and images in one folder, and that you wish to turn them into
    a web2py application. There are two ways to do it: a naive way, in which existing
    HTML files continue to be treated as static, and a more complex way, in which
    HTML files are associated to controller actions, so that one can add some dynamic
    content later on.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A naive way consists simply of creating a new web2py application (or using an
    existing one), and using a static folder. For example, create a new application
    called `app`, and copy the entire directory structure of your existing site under
    `applications/app/static/`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In this way, a static file, `applications/app/static/example.html` can be accessed
    at the URL: `http://127.0.0.1:8000/app/static/example.html.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'While this process does not break relative URLs (URLs that do not start with
    a forward slash), such as: `<a href="../path/to/example2.html">click me</a>`,
    it may break absolute URLs (which start with a forward slash) such as: `<a href="/path/to/example2.html">click
    me</a>.`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: This is not a web2py-specific problem, but rather an indication of poor design
    of those HTML files, since the absolute links break every time the folder structure
    is moved into another folder.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The proper way to solve this problem, in case it occurs, consists of replacing
    all absolute URLS with relative ones. Here is an example.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If a file, `static/path1/example1.html`, contains a link like `<a href="/path/to/example2.html">click
    me</a>`, and the file `example2.html`, appears under `static/path2/example2.html`,
    then the link should be replaced by `<a href="../path2/example2.html">click me</a>.`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Here the ../ moves out of the `static/path`1 folder into the static folder,
    and the rest of the path (`path2/example2.html`) correctly identifies the desired
    file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A simple search for `href, src`, and `url` should allow you to locate all the
    URLS in the HTML, CSS, and JavaScript files. All the URLS starting with a `/`
    need to be fixed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A more sophisticated approach consists of moving all images, movies, CSS, and
    JavaScript files into the static folder, and converting HTML files into views.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We proceed in five steps:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: We move all static files (except those ending in `html)` to the application
    `static/` folder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We create a new controller (for example, one called `controllers/legacy.py)`,
    and a new `views` folder (for example `views/legacy)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We move all the HTML files (for example, `page.html)` under the new views folder.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: For each `view` file, we create a controller action with the same name returning
    `dict()`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: We replace all internal links and references with `URL(...)`.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s consider a concrete example consisting of the following files:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, page.html contains <img src="img/image.png" />. We end up with the following
    file structure in our web2py application folder:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, legacy.py contains
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: and <img src="img/image.png"/> in page.html is replaced by
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The page is now accessible at the following URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '`http://127.0.0.1:8000/app/legacy/page.html`.'
  prefs: []
  type: TYPE_NORMAL
- en: Creating semi-static pages (flatpages)
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Any web application contains pages that are static, and whose content does not
    change very often. They are called **flatpages**. They can be handled by embedding
    a CMS into the application (for example `plugin_wiki)` or using the explicit mechanism
    described in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of flatpages are:'
  prefs: []
  type: TYPE_NORMAL
- en: Basic home and indexes
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: About us
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: License and disclaimer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With web2py, for these pages, we could set up simple controllers such as:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: And you can then code the page in the view directly, or store the page content
    in the database. This second approach is better, because it would allow easy in-place
    user editing, multiple-language internationalization support, log change history
    for audits, and much more.
  prefs: []
  type: TYPE_NORMAL
- en: The idea of this recipe is to store the flatpages in the database, and display
    them according the user request (controller, function, args, preferred language,
    and so on.)
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, define a flatpage table to store the page contents, create a file in
    models called `flatpages.py`, and add the following definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The fields are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`title:` This is the main title'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subtitle:` This is the optional subtitle'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c:` This is the controller for who this page belongs to (see URL helper)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`f:` This is the function for who this page belongs to (see URL helper)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args:` This is the string argument to add several pages to a function (see
    URL helper)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang:` This is the language to match user preferences'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body:` This is the the page HTML body'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Notice that the `FLATPAGES_ADMIN` will be used to limit the edit access to the
    flatpages. This variable contains the e-mail of the user that will be allowed
    to edit.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'At this point, you should be able to populate this table using the `appadmin`
    administrative interface, or you can do it programmatically, that is, creating
    a `setup_flatpage` function in a controller, such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This example page will look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To be able to render a page, add to the previously created file `models/flatpage.py`
    the following function flatpage:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Checks user language preferences (or session setting)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks action URL (according to request controller, function, and args)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Fetches stored flatpage
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Renders the page HTML
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the user `FLATPAGES_ADMIN` is logged in, the function flatpage:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: Prepares/processes an `SQLFORM` if editing the page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Or shows an **EDIT** button to edit the page
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Finally, you should create a `flatpage.html` view, so that web2py can render
    the page, for example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The placeholders are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`form:` This is the edit `FORM` (or the link to edit)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body:` These are the actual page contents (stored in the database as HTML)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To tell web2py to show a flatpage in the desired controller (that is, `index`
    in `default.py)`, write the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will render the flatpage for the home page.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`company.py` sample controller will look as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: When you go to `default/index.php` or `company/about_us`, you should get a flatpage
    with an `EDIT` button, if you are logged in.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Remember that, for performance reasons, flatpages are cached. So, changes may
    not be seen immediately (you can change this by clearing the cache or removing
    the cache parameter at the database query).
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With web2py, you can completely choose what content will be displayed, what
    view will be used, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, when web2py executes your controller, the function `flatpage()`
    will try to fetch the stored page in the database according the request variables.
  prefs: []
  type: TYPE_NORMAL
- en: An `SQLFORM` will be rendered if the **Edit** button is pressed, to allow page
    editing by normal authenticated users. Page updates are inserted, so you'll get
    a history of page changes. It shows the latest record of the page, trying to match
    the preferred language (for example, use `session.lang = 'es'` to change the language).
  prefs: []
  type: TYPE_NORMAL
- en: You can add a `view` field to flatpage table, so you could have multiple views
    to show this kind of content. You can even add a `format` field, so that you can
    render the page body in other markup languages other than HTML (wiki, ReST, and
    so on).
  prefs: []
  type: TYPE_NORMAL
- en: Adding your custom logo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to change the default logo that came with web2py, and add our logo
    instead. We need an image editor; use your preferred one, or use the ones that
    come with the operating system. Paint, GIMP, or Photoshop are appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding your custom logo](img/5467OS_02_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is the look of the default application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding your custom logo](img/5467OS_02_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is the result of customizing the logo.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we need to create a new application. You can do that through the `admin`
    application. Choose **Create a new application**, and name it. The name of my
    application is `changelogo`. By default, the new application is a copy of the
    `welcome` scaffolding application. Now, if you run your application, you will
    see at the top of the application the title of your application followed by the
    word `App`, in my case `changelogoApp`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Fire up your image editor, and make your logo, if you are going to start a new
    one. Choose a pixel dimension, according to the layout you are using. I chose
    a dimension of `300x90` pixels for my new logo. When you finish editing it, save
    it in PNG or JPEG format. Name it (for example, `mylogoapp.png)`, and copy to
    the `static/images` directory inside your application.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The next step is to edit `views/layout.html` of your application. You can use
    the admin or your own editor. Scroll down to the header section looking for the
    following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Let me explain the code a bit.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The following code prints the user actions, such as login, register, and lost-password:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The following code prints the application name followed by `App:`
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We need to change this to show the new logo. We will replace the <h1>... </h1>
    with the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will print the logo image instead of the title.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The header section now looks as follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Finally, it's a good practice that the logo links to the main page, so we will
    make a link to `default/index:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating menus and submenus
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'web2py handles menus in a transparent way, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: A list of menu items is stored, by convention, in `response.menu`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The menu is embedded in a view with `{{=MENU(response.menu)}}`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can have more than one menu in different places of the same view, or in
    different views. The value of `response.menu` is a list of menu items. Normally,
    each menu item is a list of tuple containing the following elements: **title,
    status, link**, and **submenu**.'
  prefs: []
  type: TYPE_NORMAL
- en: Where title is the title of the menu, status is a Boolean that can be used to
    determine whether the menu link is the current page, link is the link to be redirected
    to when selecting the menu item, and submenu is a list of menu items.
  prefs: []
  type: TYPE_NORMAL
- en: Here is an example of code that one would normally put in the file `models/menu.py:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: The condition we used as the second argument checks whether the current page
    `URL()` is the page linked.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Submenus can easily be built explicitly, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The parent of a submenu may or may not have a link. In this example, we moved
    the link from `Search` to its `Local` submenu item. It is good practice to internationalize
    the menu titles.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: It is also important to specify the controller name (`default` in the example)
    for each link; otherwise, menus break when there are multiple controllers (and
    that is almost always the case; think of `appadmin)`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Customizing menus with icons
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, you want to customize a menu item more than the usual syntax seems
    to allow, for example, by adding icons to your menu items. This recipe shows you
    how.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The first thing to realize is that the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Is equivalent to the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Here, A is the anchor (link) helper. You can use the latter syntax, and you
    can replace the A helper with any other combination of helpers. For example:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Or:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can create functions that build your menu items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Creating a navigation bar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: web2py includes built-in support for menus, rendering using basic Python structures.
    In most cases, this is enough, but for more complex menus, it is difficult to
    maintain them using Python code exclusively. This recipe shows how to make a more
    dynamic menu, storing the menu entries in the database, and building the menu
    tree automatically.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'First, let''s define a navigation bar table to store the menu entries. Create
    a file in `models` called `navbar.py`, and add the following definition:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The fields are:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`title:` This is the text shown to the user'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`url:` This is the optional URL to link to'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c:` This is the controller to build a link (see URL helper)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`f:` This is the function to build a link (see URL helper)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`args:` This is the string argument to build a link (see URL helper)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sortable:` This is a numeric value to sort the entries'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`parent_id:` This is the reference (`navbar.id`) of the higher-level menu ancestor
    (whose item is a submenu)'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'At this point, you should be able to populate this table using the `appadmin`
    administrative interface, or you can do it programmatically by creating a `setup_navbar`
    function in a controller, such as the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This example menu looks like the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Each top-level menu links to a specific controller, second-level submenus link
    to functions on that controller, and third-level entries supply arguments to those
    functions (note that you can use the same defaults for URL parameters c and f,
    which will be used hierarchically, using the inherited value).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Now, to show the menu, add to the previously created file `navbar.py` in `models`
    the following functions of `get_sub_menus:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This function recursively builds the Python structure needed to render the
    menu in the HTML page, and does the following:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Fetches the `navbar` menu entries for the solicited level
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Checks action destination or uses defaults (for `URL` helper)
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Calculates if this entry is the current selected one
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Makes and gives back the item to be used with the `MENU` helper
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'To tell web2py to build the menu, use the following in the same `navbar` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will build the menu each time a page is viewed.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'If you have a complex menu that doesn''t change often, you can reuse it several
    times, using a cache to keep it in memory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The menu is usually rendered in a page with the `MENU` helper that interprets
    this structure (see `views, layout.html):`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: Using cookies to set the language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By default, web2py determines the preferred user language from the **HTTP Accept-
    Language header**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of the normal workflow:'
  prefs: []
  type: TYPE_NORMAL
- en: A user sets the browser preferences to `en` (English), `en-us` (English spoken
    in US), and `fr-fr` (French spoken in France)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When visiting our website, the browser sends the list of accepted languages
    in the HTTP header `Accept-Language`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web2py parses the HTTP headers, validates the `Accept-Language` list, and loops
    over its languages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: web2py stops looping when a language appears in `T.current_languages`, or when
    a corresponding language file (for example `fr-fr.py)` is found in the language
    subfolder of the request application (`applications/app/languages`)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If web2py stops looping because a language, for example `en-en`, appears in
    `T.current_languages`, it means that the language does not need translation. If,
    instead, web2py stops looping because a language file if found, that language
    file will be used for translation. If neither of the two conditions are met for
    all of the languages in `Accept-Language`, there is no translation.
  prefs: []
  type: TYPE_NORMAL
- en: Normally, this selection is performed by web2py before calling the application
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Within the application code (for example, in a model), you can override default
    settings. You can change the list of current languages:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: 'You can also force web2py to pick a language from a different list than the
    one provided in the HTTP header:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: Often, you do not want the web application to rely on the browser to determine
    the language preference, but you want to ask the visitor explicitly through buttons,
    links, or a drop-down box. When this happens, the application needs to remember
    the selection as the user browses through the application pages.
  prefs: []
  type: TYPE_NORMAL
- en: If the application requires a login, this preference can be stored in the user
    profile, for example, in a custom field of the `auth_user` table.
  prefs: []
  type: TYPE_NORMAL
- en: But not all applications require a login, and often, the language preference
    is expressed before registration. A convenient and transparent way to set and
    remember the language that does not require a database, is to store the preference
    in a cookie. This can be achieved in the following way.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Create a `model` file, for example `0_select_language.py`, that contains the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Insert the following somewhere in `views/layout.html:`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous code produces a select-language drop-down box, listing all languages
    for which web2py can find a translation file. When the value of the drop-down
    box changes, it forces a reload of the page. Upon reload, the code sets a cookie
    called `all_lang` that contains the selected language. When another page is loaded,
    if the code above finds the cookie, it uses the information in the cookie to choose
    and force the language selection.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The same can be achieved more explicitly using links instead of a drop-down
    box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This solution works even if the application does not use sessions.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Notice that the name of the language is itself translated, that is `{{=T(language)}}`,
    because it should be listed in the current selected language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also notice the following string is inside the cookie, which makes sure the
    preference applies only to the current application. This line is interpreted by
    the client-side, and may need to be changed, if custom URLs are enabled through
    routes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, a simple solution is to replace it with the following, and the
    preference will apply to all the applications under the same web2py installation,
    regardless of the URL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: Designing modular applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will show you how to create a modular application using web2py
    components.
  prefs: []
  type: TYPE_NORMAL
- en: In particular, we will consider, as an example, an application that will allow
    you to create items, list items, and have the list updated dynamically when new
    items are created/updated.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will consider the scaffolding application with the following additional model
    `models/db_items.py:`
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: Notice that there is nothing specific about this table or its field structure,
    but we will use the `db.mytable` in the following example.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In `controllers/default.py`, create a base action to load the components in
    the view and the controllers, to actually list and edit items:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the view `views/default/index.html`, just load the component to list the
    items and link the edit function (using a placeholder that will be used to insert
    the form to create or edit items):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the view `views/default/list_items.html`, each item on the item list will
    load the specified URL into the `div` with the ID `placeholder`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: A view for the action `edit_item` is not necessary, since it returns a helper,
    not a dict.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The view index loads a list of items through Ajax into `div#showitems`. It also
    displays a link and a `div#placeholder`. Clicking on the link causes an Ajax request
    to `edit_item`, without `args` to return a `create form` that is rendered inside
    `div#placeholder`. The list also contains a link to `edit_item`, which also displays
    an `update form` into the `div#placeholder`. The form is not just displayed tharough
    Ajax. The component is always loaded by clicking an `A(...,component=URL(...),target="placeholder")`.
  prefs: []
  type: TYPE_NORMAL
- en: This ensures that the component is loaded through Ajax, and the forms in the
    component will be submitted through Ajax, thus refreshing the component only.
    Any form submission will return a `response.ajax`, which refreshes the other component
    `div@list_items`.
  prefs: []
  type: TYPE_NORMAL
- en: Notice that all the logic is generated at the server-side, translated under
    the hood in the JS code that is embedded in the page, and executed at the client-side.
    Clicking on a link causes a form to be displayed. Submitting a form causes a form
    to be processed, and, if accepted, the list of items is refreshed.
  prefs: []
  type: TYPE_NORMAL
- en: Speeding up downloads
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By default, the download function in the scaffolding controller sets the following
    HTTP response headers, preventing client-side caching:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: This may be good for some dynamic content, but, for example, a client browsing
    a site with several non static images, will see how each image loads every time
    the page is shown, slowing down navigation.
  prefs: []
  type: TYPE_NORMAL
- en: Caching download with the `@cache` decorator does not help, because caching
    would be done at server-side, while we want client-side caching.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, the download function also performs some authorization checks, which,
    in some cases, are not necessary, and therefore cause an unwanted slow-down.
  prefs: []
  type: TYPE_NORMAL
- en: A better approach consists of using a custom download function, which allows
    client-side caching, and skips authorization.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to write a custom download function. We could edit the scaffolding one,
    but it's preferable to simply add another one that is call `fast_download`, so
    we will have the choice to use one or the other in different parts of our application.
  prefs: []
  type: TYPE_NORMAL
- en: 'First of all, we want our application to return the following HTTP header:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'But omit these ones:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This can be done by explicitly removing the unwanted headers before streaming
    back the file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Notice that `response.stream` will handle `Range requests` and `If-Modified-Since`
    for you. Also notice that such an action could be used to download more files
    than it is intended to, so we insert a check, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We leave this for you to implement.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: It will check if this function can be used, or the normal download function
    should be used.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'In your view, remember to make URLs using `fast_download` instead of download:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If the filename you want to make sure `fast-download` is stored in an **upload**
    type field, for example, `mytable.myfield`, then you can configure your web server
    to serve it directly, and by-pass web2py completely. For example, if you are using
    Apache:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: This works, because all filenames stored in `mytable.myfield` are renamed by
    web2py upon upload, and their names start with `mytable.myfield`.
  prefs: []
  type: TYPE_NORMAL
