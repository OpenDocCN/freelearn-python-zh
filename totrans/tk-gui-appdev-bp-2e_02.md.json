["```py\nfrom tkinter import Tk\nroot = Tk()\n# all our code goes here\nroot.mainloop()\n```", "```py\nimport tkinter as tk\n```", "```py\nfrom tkinter import Tk\n```", "```py\nfrom tkinter import *\n```", "```py\nmy_menu = Menu(parent, **options)\n```", "```py\n# Adding Menubar in the widget\nmenu_bar = Menu(root)\nfile_menu = Menu(menu_bar, tearoff=0)\n# all file menu-items will be added here next\nmenu_bar.add_cascade(label='File', menu=file_menu)\nroot.config(menu=menu_bar)\n```", "```py\nPROGRAM_NAME = \" Footprint Editor \"\n```", "```py\nroot.title(PROGRAM_NAME)\n```", "```py\nmy_menu.add_command(label=\"Menu Item Label\", accelerator='KeyBoard Shortcut', compound='left', image=my_image, underline=0, command=callback)\n```", "```py\nedit_menu.add_command(label=\"Undo\", accelerator='Ctrl + Z', compound='left', image=undo_icon, command=undo_callback)\n```", "```py\nfile_menu.add_command(label=\"New\", accelerator='Ctrl+N', compound='left', image=new_file_icon, underline=0, command=new_file)\n```", "```py\nshortcut_bar = Frame(root, height=25, background='light sea green')\nshortcut_bar.pack(expand='no', fill='x')\nline_number_bar = Text(root, width=4, padx=3, takefocus=0, border=0, background='khaki', state='disabled', wrap='none')\nline_number_bar.pack(side='left', fill='y')\n```", "```py\ncontent_text = Text(root, wrap='word')\ncontent_text.pack(expand='yes', fill='both')\nscroll_bar = Scrollbar(content_text)\ncontent_text.configure(yscrollcommand=scroll_bar.set)\nscroll_bar.config(command=content_text.yview)\nscroll_bar.pack(side='right', fill='y')\n```", "```py\nview_menu.add_checkbutton(label=\"Show Line Number\", variable=show_line_no)\nview_menu.add_cascade(label=\"Themes\", menu=themes_menu)\nthemes_menu.add_radiobutton(label=\"Default\", variable=theme_name)\n```", "```py\nwidget.event_generate(sequence, **kw)\n```", "```py\ncontent_text.event_generate(\"<<Cut>>\")\n```", "```py\ndef cut():\n  content_text.event_generate(\"<<Cut>>\")\n```", "```py\nedit_menu.add_command(label='Cut', accelerator='Ctrl+X', compound='left', image=cut_icon, command=cut)\n```", "```py\ncontent_text = Text(root, wrap='word', undo=1)\n```", "```py\ncontent_text.bind('<Control-y>', redo) # handling Ctrl + small-case y\ncontent_text.bind('<Control-Y>', redo) # handling Ctrl + upper-case y\n```", "```py\ndef redo(event=None):\n  content_text.event_generate(\"<<Redo>>\")\n  return 'break'\n```", "```py\nmy_text.tag_add('sel', '1.0', 'end') # add SEL tag from start(1.0) to end\nmy_text.tag_add('danger', \"insert linestart\", \"insert lineend+1c\")\nmy_text.tag_remove('danger', 1.0, \"end\")\nmy_text.tag_config('danger', background=red)\nmy_text.tag_config('outdated', overstrike=1)\n```", "```py\n>>> import Tkinter\n>>> help(Tkinter.Text)\n```", "```py\ndef select_all(event=None):\n  content_text.tag_add('sel', '1.0', 'end')\n  return \"break\"\n```", "```py\nedit_menu.add_command(label='Select All', underline=7, accelerator='Ctrl+A', command=select_all)\n```", "```py\ncontent_text.bind('<Control-A>', select_all)\ncontent_text.bind('<Control-a>', select_all)\n```", "```py\nsearch(pattern, startindex, stopindex=None, forwards=None, backwards=None, exact=None, regexp=None, nocase=None, count=None)\n```", "```py\nedit_menu.add_command(label='Find',underline= 0, accelerator='Ctrl+F', command=find_text)\n```", "```py\ncontent_text.bind('<Control-f>', find_text)\ncontent_text.bind('<Control-F>', find_text) \n```", "```py\ndef find_text(event=None):\n    search_toplevel = Toplevel(root)\n    search_toplevel.title('Find Text')\n    search_toplevel.transient(root)\n    Label(search_toplevel, text=\"Find All:\").grid(row=0, \n                                      column=0,sticky='e')\n    search_entry_widget = Entry(search_toplevel, width=25)\n    search_entry_widget.grid(row=0, column=1, padx=2, pady=2, \n    sticky='we')\n    search_entry_widget.focus_set()\n    ignore_case_value = IntVar()\n    .... more code here to crate checkbox and button \n    def close_search_window():\n       content_text.tag_remove('match', '1.0', END)\n       search_toplevel.destroy()\n       search_toplevel.protocol('WM_DELETE_WINDOW', \n       close_search_window)\n       return \"break\"\n```", "```py\ndef search_output(needle, if_ignore_case, content_text,\n search_toplevel, search_box):\n content_text.tag_remove('match', '1.0', END)\n matches_found = 0\n if needle:\n   start_pos = '1.0'\n   while True:\n      start_pos = content_text.search(needle, start_pos,\n           nocase=if_ignore_case, stopindex=END)\n      if not start_pos:\n           break\n      end_pos = '{}+{}c'.format(start_pos, len(needle))\n      content_text.tag_add('match', start_pos, end_pos)\n      matches_found += 1\n      start_pos = end_pos\n   content_text.tag_config('match', foreground='red', background='yellow')\n search_box.focus_set()\n search_toplevel.title('{} matches found'.format(matches_found))\n```", "```py\n      search(pattern, index, stopindex=None, forwards=None,\n      backwards=None, exact=None, regexp=None, nocase=None, count=None)\n```", "```py\nsearch_toplevel.transient(root)\n```", "```py\nimport tkinter.filedialog\n```", "```py\nfile_object = tkinter.filedialog.askopenfile(mode='r')\n```", "```py\nmy_file_name = tkinter.filedialog.askopenfilename()\n```", "```py\nimport tkinter.filedialog\nimport os # for handling file operations\n```", "```py\nfile_name = None\n```", "```py\ndef open_file(event=None):\n   input_file_name = \n     tkinter.filedialog.askopenfilename(defaultextension=\".txt\", \n       filetypes=[(\"All Files\", \"*.*\"),(\"Text Documents\", \"*.txt\")])\n   if input_file_name:\n     global file_name\n     file_name = input_file_name\n     root.title('{} - {}'.format(os.path.basename(file_name),PROGRAM_NAME))\n     content_text.delete(1.0, END)\n     with open(file_name) as _file:\n       content_text.insert(1.0, _file.read())\n     on_content_changed()\n```", "```py\nfile_menu.add_command(label='Open', accelerator='Ctrl+O', compound='left', image=open_file_icon, underline =0, command=open_file)\n```", "```py\ndef save(event=None):\n global file_name\n if not file_name:\n    save_as()\n else:\n    write_to_file(file_name)\n return \"break\"\n\ndef save_as(event=None):\n input_file_name = tkinter.filedialog.asksaveasfilename\n   (defaultextension=\".txt\", filetypes=[(\"All Files\", \"*.*\"),\n   (\"Text Documents\", \"*.txt\")])\n if input_file_name:\n     global file_name\n     file_name = input_file_name\n     write_to_file(file_name)\n    root.title('{} - {}'.format(os.path.basename(file_name),PROGRAM_NAME))\n return \"break\"\n\ndef write_to_file(file_name):\n    try:\n      content = content_text.get(1.0, 'end')\n      with open(file_name, 'w') as the_file:\n        the_file.write(content)\n    except IOError:\n      pass  \n      # pass for now but we show some warning - we do this in next section\n```", "```py\nfile_menu.add_command(label='Save', accelerator='Ctrl+S',  compound='left', image=save_file_icon,underline=0, command= save)\nfile_menu.add_command(label='Save as',    accelerator='Shift+Ctrl+S', command= save_as)\n```", "```py\ndef new_file(event=None):\n   root.title(\"Untitled\")\n   global file_name\n   file_name = None\n   content_text.delete(1.0,END) \n```", "```py\nfile_menu.add_command(label='New', accelerator='Ctrl+N', compound='left', image=new_file_icon, underline=0, command=new_file)\n```", "```py\ncontent_text.bind('<Control-N>', new_file)\ncontent_text.bind('<Control-n>', new_file)\ncontent_text.bind('<Control-O>', open_file)\ncontent_text.bind('<Control-o>', open_file)\ncontent_text.bind('<Control-S>', save)\ncontent_text.bind('<Control-s>',save)\n```", "```py\nimport tkinter.messagebox \n```", "```py\n import tkinter.messagebox as tmb\n tmb.showinfo(title=\"Show Info\", message=\"This is FYI\")\n tmb.showwarning(title=\"Show Warning\", message=\"Don't be silly\")\n tmb.showerror(title=\"Show Error\", message=\"It leaked\")\n tmb.askquestion(title=\"Ask Question\", message=\"Can you read this?\")\n tmb.askokcancel(title=\"Ask OK Cancel\", message=\"Say Ok or Cancel?\")\n tmb.askyesno(title=\"Ask Yes-No\", message=\"Say yes or no?\")\n tmb.askyesnocancel(title=\"Yes-No-Cancel\", message=\"Say yes no cancel\")\n tmb.askretrycancel(title=\"Ask Retry Cancel\", message=\"Retry or what?\")\n```", "```py\ndef display_about_messagebox(event=None):\n     tkinter.messagebox.showinfo(\"About\", \"{}{}\".format(PROGRAM_NAME,                     \n       \"\\nTkinter GUI Application\\n Development Blueprints\"))\n\ndef display_help_messagebox(event=None):\n     tkinter.messagebox.showinfo(\"Help\", \"Help Book: \\nTkinter GUI                           \n       Application\\n Development Blueprints\", icon='question')\n```", "```py\nabout_menu.add_command(label='About', command=display_about_messagebox)\nabout_menu.add_command(label='Help', command=display_help_messagebox)\n```", "```py\ndef exit_editor(event=None):\n       if tkinter.messagebox.askokcancel(\"Quit?\", \"Really quit?\"):\n            root.destroy() \n```", "```py\nroot.protocol('WM_DELETE_WINDOW', exit_editor)\n```", "```py\nfile_menu.add_command(label='Exit', accelerator='Alt+F4', command= exit_editor)\nabout_menu.add_command(label='About', command = display_about_messagebox)\nabout_menu.add_command(label='Help', command = display_help_messagebox)\n```", "```py\ncontent_text.bind('<KeyPress-F1>', display_help_messagebox) \n```", "```py\nicons = ('new_file', 'open_file', 'save', 'cut', 'copy', 'paste', 'undo', 'redo', 'find_text')\nfor i, icon in enumerate(icons):\n   tool_bar_icon = PhotoImage(file='icons/{}.gif'.format(icon))\n   cmd = eval(icon)\n   tool_bar = Button(shortcut_bar, image=tool_bar_icon, command=cmd)\n   tool_bar.image = tool_bar_icon\n   tool_bar.pack(side='left')\n```", "```py\ndef on_content_changed(event=None):\n     update_line_numbers() \n```", "```py\ncontent_text.bind('<Any-KeyPress>', on_content_changed) \n```", "```py\ndef get_line_numbers():\n  output = ''\n  if show_line_number.get():\n    row, col = content_text.index(\"end\").split('.')\n    for i in range(1, int(row)):\n      output += str(i)+ '\\n'\n  return output \n```", "```py\ndef update_line_numbers(event = None):\n   line_numbers = get_line_numbers()\n   line_number_bar.config(state='normal')\n   line_number_bar.delete('1.0', 'end')\n   line_number_bar.insert('1.0', line_numbers)\n   line_number_bar.config(state='disabled')\n```", "```py\nto_highlight_line = BooleanVar()\nview_menu.add_checkbutton(label='Highlight Current Line', onvalue=1, offvalue=0,     variable=to_highlight_line, command=toggle_highlight)\n```", "```py\ndef highlight_line(interval=100):\n   content_text.tag_remove(\"active_line\", 1.0, \"end\")\n   content_text.tag_add(\"active_line\", \n                     \"insert linestart\", \"insert lineend+1c\")                                                                               \n   content_text.after(interval, toggle_highlight)\n\ndef undo_highlight():\n   content_text.tag_remove(\"active_line\", 1.0, \"end\")\n\ndef toggle_highlight(event=None):\n   if to_highlight_line.get():\n      highlight_line()\n    else:\n      undo_highlight()\n\n```", "```py\ncontent_text.tag_configure('active_line', background='ivory2')\n```", "```py\ncursor_info_bar = Label(content_text, text='Line: 1 | Column: 1')\ncursor_info_bar.pack(expand=NO, fill=None, side=RIGHT, anchor='se')\n```", "```py\ndef on_content_changed(event=None):\n update_line_numbers()\n update_cursor_info_bar()\n\ndef show_cursor_info_bar():\n show_cursor_info_checked = show_cursor_info.get()\n if show_cursor_info_checked:\n   cursor_info_bar.pack(expand='no', fill=None, side='right', anchor='se')\n else:\n   cursor_info_bar.pack_forget()\n\ndef update_cursor_info_bar(event=None):\n row, col = content_text.index(INSERT).split('.')\n line_num, col_num = str(int(row)), str(int(col)+1) # col starts at 0\n infotext = \"Line: {0} | Column: {1}\".format(line_num, col_num)\n cursor_info_bar.config(text=infotext)\n```", "```py\nview_menu.add_checkbutton(label='Show Cursor Location at Bottom',\n                 variable=show_cursor_info, command=show_cursor_info_bar)\n```", "```py\ncolor_schemes = {\n'Default': '#000000.#FFFFFF',\n'Greygarious':'#83406A.#D1D4D1',\n'Aquamarine': '#5B8340.#D1E7E0',\n'Bold Beige': '#4B4620.#FFF0E1',\n'Cobalt Blue':'#ffffBB.#3333aa',\n'Olive Green': '#D1E7E0.#5B8340',\n'Night Mode': '#FFFFFF.#000000',\n}\n```", "```py\ndef change_theme(event=None):\n   selected_theme = theme_choice.get()\n   fg_bg_colors = color_schemes.get(selected_theme)\n   foreground_color, background_color = fg_bg_colors.split('.')\n   content_text.config(background=background_color, fg=foreground_color)\n```", "```py\npopup_menu = Menu(content_text)\nfor i in ('cut', 'copy', 'paste', 'undo', 'redo'):\n      cmd = eval(i)\n     popup_menu.add_command(label=i, compound='left', command=cmd)\n     popup_menu.add_separator()\npopup_menu.add_command(label='Select All',underline=7, command=select_all)\n```", "```py\ncontent_text.bind('<Button-3>', show_popup_menu)\n```", "```py\ndef show_popup_menu(event):\n  popup_menu.tk_popup(event.x_root, event.y_root)\n```"]