["```py\n#PowerShell code\n$value=5\n$value=\"hello\"\nwrite-host $value\nwrite-host $value.gettype()\n#This is remark\n#A variable in powershell is declared with '$' sign in front.\n# The gettype() function in powershell is used to get the type of variable.\n\n```", "```py\nif <condition>:     \nperform action\nelse:   \nperform action2\n```", "```py\n#PowerShell sample code:\n$marks=85\nif ($marks -le 45)\n{\n    write-host \"Grade C\"\n}\nelseif (($marks -gt 45) -and ($marks -le 75))\n{\n    write-host \"Grade B\"\n}\nelseif ($marks -gt 75)\n{\n    write-host \"Grade A\"\n}\nelse\n{\n    write-host \"Unable to determine\"\n}\n```", "```py\nfor <incremental variable> in final value:\n  statements\n```", "```py\n#PowerShell sample code:\n$countries=\"India\",\"UK\",\"USA\",\"France\"\nforeach ($country in $countries)\n{\n    write-host ($country+\" is good\")\n}\n```", "```py\n for country in countries:\n     if 'UK' in country:\n         break\n     else:\n         print (country)\n```", "```py\nwhile True:\n     perform instructions\n     if condition():\n       break\n```", "```py\ncountryname=input(\"Enter country name:\")\ncountryname=countryname.lower()\nlastcharacter=countryname.strip()[-1]\nif 'a' in lastcharacter:\n    print (\"Vowel found\")\nelif 'e' in lastcharacter:\n    print (\"Vowel found\")\nelif 'i' in lastcharacter:\n    print (\"Vowel found\")\nelif 'o' in lastcharacter:\n    print (\"Vowel found\")\nelif 'u' in lastcharacter:\n    print (\"Vowel found\")\nelse:\n    print (\"No vowel found\")\n```", "```py\n#PowerShell sample code\n$countryname=read-host \"Enter country name\" \n$countryname=$countryname.tolower()\n$lastcharacter=$countryname[-1]\nif ($lastcharacter -contains 'a')\n{\n    write-host \"Vowel found\"\n}\nelseif ($lastcharacter -contains 'e')\n{\n    write-host \"Vowel found\"\n}\nelseif ($lastcharacter -contains 'i')\n{\n    write-host \"Vowel found\"\n}\nelseif ($lastcharacter -contains '0')\n{\n    write-host \"Vowel found\"\n}\nelseif ($lastcharacter -contains 'u')\n{\n    write-host \"Vowel found\"\n}\nelse\n{\nwrite-host \"No vowel found\"\n}\n```", "```py\ndef checkgreaternumber(number1,number2):\n    if number1 > number2:\n      print (\"Greater number is \",number1)\n    else:\n     print (\"Greater number is\",number2)\ncheckgreaternumber(2,4)\ncheckgreaternumber(3,1)\n```", "```py\n#PowerShell sample code\nfunction checkgreaternumber($number1,$number2)\n{\n    if ($number1 -gt $number2)\n    {\n        write-host (\"Greater number is \"+$number1)\n    }\n    else\n    {\n        write-host (\"Greater number is \"+$number2)\n    }\n}\n\ncheckgreaternumber 2 4\ncheckgreaternumber 3 1\n```", "```py\ndef checkgreaternumber(number1,number2):\n    if number1 > number2:\n      return number1\n    else:\n     return number2\n\nprint (\"My greater number in 2 and 4 is \",checkgreaternumber(2,4))\nprint (\"My greater number in 3 and 1 is \",checkgreaternumber(3,1))\n```", "```py\n#PowerShell sample code\nfunction checkgreaternumber($number1,$number2)\n{\n    if ($number1 -gt $number2)\n    {\n        return $number1\n    }\n    else\n    {\n        return $number2\n    }\n}\n\nwrite-host (\"My greater number in 2 and 4 is \",(checkgreaternumber 2 4))\nwrite-host (\"My greater number in 3 and 1 is \",(checkgreaternumber 3 1))\n```", "```py\ndef checkgreaternumber(number1,number2=5):\n    if number1 > number2:\n      return number1\n    else:\n     return number2\nprint (\"Greater value is\",checkgreaternumber(3))\nprint (\"Greater value is\",checkgreaternumber(6))\nprint (\"Greater value is\",checkgreaternumber(1,4))\n```", "```py\nglobalval=6\n\ndef checkglobalvalue():\n    return globalval\n\ndef localvariablevalue():\n    globalval=8\n    return globalval\n\nprint (\"This is global value\",checkglobalvalue())\nprint (\"This is global value\",globalval)\nprint (\"This is local value\",localvariablevalue())\nprint (\"This is global value\",globalval)\n```", "```py\nimport sys\nprint (\"Total output is \")\nprint (int(sys.argv[1])+int(sys.argv[2]))\n```", "```py\npython checkargs.py 5 6\n```", "```py\nTotal output is\n11\n```", "```py\n#PowerShell sample code\n$myvalue=$args[0]\nwrite-host (\"Argument passed to PowerShell is \"+$myvalue)\n```", "```py\neasy_install <name of module>\n```", "```py\neasy_install netmiko\n```", "```py\npip install <name of module>\n```", "```py\npip install netmiko\n```", "```py\nimport datetime\nfrom threading import Thread\n\ndef checksequential():\n    for x in range(1,10):\n        print (datetime.datetime.now().time())\n\ndef checkparallel():\n    print (str(datetime.datetime.now().time())+\"\\n\")\n\nchecksequential()\nprint (\"\\nNow printing parallel threads\\n\")\nthreads = []\nfor x in range(1,10):\n    t = Thread(target=checkparallel)\n    t.start()\n    threads.append(t)\n\nfor t in threads:\n    t.join()\n```", "```py\n#PowerShell sample code\nGet-Job  #This get the current running threads or Jobs in PowerShell\nRemove-Job -Force * # This commands closes forcible all the previous threads\n\n$Scriptblock = {\n      Param (\n         [string]$ipaddress\n      )\n    if (Test-Connection $ipaddress -quiet)\n    { \n        return (\"Ping for \"+$ipaddress+\" is successful\")\n     }\n    else\n    {\n       return (\"Ping for \"+$ipaddress+\" FAILED\") \n    }\n   }\n\n$iplist=\"4.4.4.4\",\"8.8.8.8\",\"10.10.10.10\",\"20.20.20.20\",\"4.2.2.2\"\n\nforeach ($ip in $iplist)\n{\n    Start-Job -ScriptBlock $Scriptblock -ArgumentList $ip | Out-Null\n    #The above command is used to invoke the $scriptblock in a multithread\n}\n\n#Following logic waits for all the threads or Jobs to get completed\nWhile (@(Get-Job | Where { $_.State -eq \"Running\" }).Count -ne 0)\n  { # Write-Host \"Waiting for background jobs...\"\n     Start-Sleep -Seconds 1\n  }\n\n#Following logic is used to print all the values that are returned by each thread and then remove the thread # #or job from memory\nForEach ($Job in (Get-Job)) {\n  Receive-Job $Job\n  Remove-Job $Job\n  }\n```", "```py\nfrom netmiko import ConnectHandler\n\ndevice = ConnectHandler(device_type='cisco_ios', ip='192.168.255.249', username='cisco', password='cisco')\noutput = device.send_command(\"show version\")\nprint (output)\ndevice.disconnect()\n```", "```py\nfrom netmiko import ConnectHandler\n\nprint (\"Before config push\")\ndevice = ConnectHandler(device_type='cisco_ios', ip='192.168.255.249', username='cisco', password='cisco')\noutput = device.send_command(\"show running-config interface fastEthernet 0/0\")\nprint (output)\n\nconfigcmds=[\"interface fastEthernet 0/0\", \"description my test\"]\ndevice.send_config_set(configcmds)\n\nprint (\"After config push\")\noutput = device.send_command(\"show running-config interface fastEthernet 0/0\")\nprint (output)\n\ndevice.disconnect()\n```", "```py\ndevice.send_command(\"write memory\")\n```", "```py\nfrom netmiko import ConnectHandler\n\ndevice = ConnectHandler(device_type='cisco_ios', ip='192.168.255.249', username='cisco', password='cisco')\n\ndef task1():\n    output = device.send_command(\"show version\")\n    print (output)\n    output= device.send_command(\"show ip int brief\")\n    print (output)\n    output= device.send_command(\"show clock\")\n    print (output)\n    output= device.send_command(\"show running-config | in username\")\n    output=output.splitlines()\n    for item in output:\n        if (\"username\" in item):\n            item=item.split(\" \")\n            print (\"username configured: \",item[1])\n\ndef task2():\n    global device\n    configcmds=[\"username test privilege 15 secret test\"]\n    device.send_config_set(configcmds)\n    output= device.send_command(\"show running-config | in username\")\n    output=output.splitlines()\n    for item in output:\n        if (\"username\" in item):\n            item=item.split(\" \")\n            print (\"username configured: \",item[1])\n    device.disconnect()\n    try:\n        device = ConnectHandler(device_type='cisco_ios', ip='192.168.255.249', username='test', password='test')\n        print (\"Authenticated successfully with username test\")\n        device.disconnect()\n    except:\n        print (\"Unable to authenticate with username test\")\n\ndef task3():\n    device = ConnectHandler(device_type='cisco_ios', ip='192.168.255.249', username='test', password='test')\n    output= device.send_command(\"show running-config | in username\")\n    output=output.splitlines()\n    for item in output:\n        if (\"username\" in item):\n            if (\"test\" not in item):\n                item=item.split(\" \")\n                cmd=\"no username \"+item[1]\n                outputnew=device.send_config_set(cmd)\n    output= device.send_command(\"show running-config | in username\")\n    output=output.splitlines()\n    for item in output:\n        if (\"username\" in item):\n            item=item.split(\" \")\n            print (\"username configured: \",item[1])\n\n    device.disconnect()\n\n#Call task1 by writing task1()\n#task1()\n#Call task2 by writing task2()\n#task2()\n#Call task3 by writing task3()\n#task3()\n```"]