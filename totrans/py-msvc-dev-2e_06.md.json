["```py\n# clientsession.py\nimport asyncio\nimport aiohttp\n\nasync def make_request(url):\n    headers = {\n        \"Content-Type\": \"application/json\",\n    }\n    async with aiohttp.ClientSession(headers=headers) as session:\n        async with session.get(url) as response:\n            print(await response.text())\n\nurl = \"http://localhost:5000/api\"\nloop = asyncio.get_event_loop()\nloop.run_until_complete(make_request(url)) \n```", "```py\nconn = aiohttp.TCPConnector(limit=300, limit_per_host=10)\nsession = aiohttp.ClientSession(connector=conn) \n```", "```py\n# clientsession_list.py\nimport asyncio\nimport aiohttp\nasync def make_request(url, session, semaphore):\n    async with semaphore, session.get(url) as response:\n        print(f\"Fetching {url}\")\n        await asyncio.sleep(1)  # Pretend there is real work happening\n        return await response.text()\nasync def organise_requests(url_list):\n    semaphore = asyncio.Semaphore(3)\n    tasks = list()\n    async with aiohttp.ClientSession() as session:\n        for url in url_list:\n            tasks.append(make_request(url, session, semaphore))\n        await asyncio.gather(*tasks)\n\nurls = [\n    \"https://www.google.com\",\n    \"https://developer.mozilla.org/en-US/\",\n    \"https://www.packtpub.com/\",\n    \"https://aws.amazon.com/\",\n]\nloop = asyncio.get_event_loop()\nloop.run_until_complete(organise_requests(urls)) \n```", "```py\nimport os\ndef create_app(name=__name__, blueprints=None, settings=None):\n    app = Quart(name)\n    app.config[\"REMOTE_URL\"] = os.environ.get(\"OTHER_SERVICE_URL\", \"https://default.url/here\") \n```", "```py\n$ etcdctl put myservice/production/rabbitmq/url https://my.rabbitmq.url/\nOK\n$ etcdctl get myservice/production/rabbitmq/url\nmyservice/production/rabbitmq/url\nhttps://my.rabbitmq.url/ \n```", "```py\n# quart_etag.py\nfrom datetime import datetime\nfrom quart import Quart, Response, abort, jsonify, request\napp = Quart(__name__)\ndef _time2etag():\n    return datetime.now().isoformat()\n_USERS = {\"1\": {\"name\": \"Simon\", \"modified\": _time2etag()}}\n@app.route(\"/api/user/<user_id>\")\nasync def get_user(user_id):\n    if user_id not in _USERS:\n        return abort(404)\n    user = _USERS[user_id]\n    # returning 304 if If-None-Match matches\n    if user[\"modified\"] in request.if_none_match:\n        return Response(\"Not modified\", status=304)\n    resp = jsonify(user)\n    # setting the ETag\n    resp.set_etag(user[\"modified\"])\n    return resp\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\n$ curl -v http://127.0.0.1:5000/api/user/1\n*   Trying 127.0.0.1...\n...\n< HTTP/1.1 200\n< content-type: application/json\n< content-length: 56\n< etag: \"2021-06-29T21:32:25.685907\"\n< date: Tue, 29 Jun 2021 20:32:30 GMT\n< server: hypercorn-h11\n<\n* Connection #0 to host 127.0.0.1 left intact\n{\"modified\":\"2021-06-29T21:32:25.685907\",\"name\":\"Simon\"}\n $ curl -v -H 'If-None-Match: 2021-06-29T21:32:25.685907' http://127.0.0.1:5000/api/user/1\n...\n< HTTP/1.1 304\n... \n```", "```py\nhttp { \n    gzip  on; \n    gzip_types application/json; \n    gzip_proxied      any; \n    gzip_vary on; \n    server { \n        listen       80; \n        server_name  localhost; \n\n        location / {  \n            proxy_pass http://localhost:5000; \n        } \n    } \n```", "```py\n$ curl http://localhost:8080/api -H \"Accept-Encoding: gzip\" \n<some binary output> \n```", "```py\nimport asyncio\nimport aiohttp\nasync def make_request():\n    url = \"http://127.0.0.1:5000/api\"\n    headers = {\n        \"Accept-Encoding\": \"gzip\",\n    }\n    async with aiohttp.ClientSession(headers=headers) as session:\n        async with session.get(url) as response:\n            print(await response.text())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(make_request()) \n```", "```py\nimport asyncio\nimport gzip\nimport json\nimport aiohttp\nasync def make_request():\n    url = \"http://127.0.0.1:8080/api_post\"\n    headers = {\n        \"Content-Encoding\": \"gzip\",\n    }\n    data = {\"Hello\": \"World!\", \"result\": \"OK\"}\n    data = bytes(json.dumps(data), \"utf8\")\n    data = gzip.compress(data)\n    async with aiohttp.ClientSession(headers=headers) as session:\n        async with session.post(url, data=data) as response:\n            print(await response.text())\nloop = asyncio.get_event_loop()\nloop.run_until_complete(make_request()) \n```", "```py\nsyntax = \"proto2\";\npackage tutorial; \nmessage Person { \n  required string name = 1; \n  required int32 id = 2; \n  optional string email = 3; \n  enum PhoneType { \n    MOBILE = 0; \n    HOME = 1; \n    WORK = 2; \n  } \n  message PhoneNumber { \n    required string number = 1; \n    optional PhoneType type = 2 [default = HOME]; \n  } \n  repeated PhoneNumber phones = 4; \n} \nmessage AddressBook { \n  repeated Person people = 1; \n} \n```", "```py\n>>> import msgpack\n>>> data = {\"this\": \"is\", \"some\": \"data\"}\n>>> msgpack.packb(data, use_bin_type=True)\nb'\\x82\\xa4this\\xa2is\\xa4some\\xa4data'\n>>> msgpack.unpackb(msgpack.packb(data, use_bin_type=True))\n{'this': 'is', 'some': 'data'} \n```", "```py\n>>> sys.getsizeof(json.dumps(data))\n35602\n>>> sys.getsizeof(msgpack.packb(data))\n30777\n>>> sys.getsizeof(gzip.compress(bytes(json.dumps(data), 'utf8')))\n3138\n>>> sys.getsizeof(gzip.compress(msgpack.packb(data)))\n3174 \n```", "```py\n$ rabbitmqadmin declare exchange name=incoming type=topic \nexchange declared \n\n$ rabbitmqadmin declare queue name=playstore \nqueue declared \n\n$ rabbitmqadmin declare queue name=notifications\nqueue declared \n\n$ rabbitmqadmin declare binding source=\"incoming\" destination_type=\"queue\" destination=\"playstore\" routing_key=\"publish.playstore\" \nbinding declared \n\n$ rabbitmqadmin declare binding source=\"incoming\" destination_type=\"queue\" destination=\"notifications\" routing_key=\"publish.*\" \nbinding declared \n```", "```py\nfrom pika import BlockingConnection, BasicProperties\n# assuming there's a working local RabbitMQ server with a working # guest/guest account\ndef message(topic, message):\n    connection = BlockingConnection()\n    try:\n        channel = connection.channel()\n        props = BasicProperties(content_type=\"text/plain\", delivery_mode=1)\n        channel.basic_publish(\"incoming\", topic, message, props)\n    finally:\n        connection.close()\nmessage(\"publish.playstore\", \"We are publishing an Android App!\")\nmessage(\"publish.newsletter\", \"We are publishing a newsletter!\") \n```", "```py\nimport pika\ndef on_message(channel, method_frame, header_frame, body):\n    print(f\"Now publishing to the play store: {body}!\")\n    channel.basic_ack(delivery_tag=method_frame.delivery_tag)\nconnection = pika.BlockingConnection()\nchannel = connection.channel()\nchannel.basic_consume(\"playstore\", on_message)\ntry:\n    channel.start_consuming()\nexcept KeyboardInterrupt:\n    channel.stop_consuming()\nconnection.close() \n```", "```py\n$ python ./playstore_receiver.py\nNow publishing to the play store: b'We are publishing an Android App!'!\n$ python ./publish_receiver.py\nWe have some news! b'We are publishing an Android App!'!\nWe have some news! b'We are publishing a newsletter!'! \n```", "```py\n# test_aiohttp_fixture.py\nimport asyncio\nimport aiohttp\nimport pytest\nfrom aioresponses import aioresponses\n@pytest.fixture\ndef mock_aioresponse():\n    with aioresponses() as m:\n        yield m\n@pytest.mark.asyncio\nasync def test_ctx(mock_aioresponse):\n    async with aiohttp.ClientSession() as session:\n        mock_aioresponse.get(\"http://test.example.com\", payload={\"foo\": \"bar\"})\n        resp = await session.get(\"http://test.example.com\")\n        data = await resp.json()\n    assert {\"foo\": \"bar\"} == data \n```", "```py\n---\nopenapi: \"3.0.0\"\ninfo:\n  title: Data Service\n  description: returns info about users\n  license:\n    name: APLv2\n    url: https://www.apache.org/licenses/LICENSE-2.0.html\n  version: 0.1.0\nbasePath: /api\npaths:\n  /user_ids:\n    get:\n      operationId: getUserIds\n      description: Returns a list of ids\n      produces:\n        - application/json\n      responses:\n        '200':\n          description: List of Ids\n          schema:\n            type: array\n            items:\n              type: integer \n```"]