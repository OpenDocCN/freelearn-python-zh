- en: The Qt Quick Library
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Quick库
- en: In this chapter, we will continue with our implementation of the QML GUI and
    we will describe the more detailed Qt Quick library – the main tool for working
    with QML in Qt. By using the Qt Quick module, designers and developers can easily
    build fluid animated UIs in QML, and have the option of connecting these UIs to
    any backend C++ libraries. Qt Quick allows developers to create highly performant,
    fluidly animated, and visually appealing applications.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续我们的QML GUI实现，并描述更详细的Qt Quick库——在Qt中处理QML的主要工具。通过使用Qt Quick模块，设计师和开发者可以轻松地在QML中构建流畅的动画UI，并可以选择将这些UI连接到任何后端C++库。Qt
    Quick允许开发者创建高性能、流畅动画和视觉吸引力的应用程序。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下主题：
- en: Introduction to the Qt Quick module
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt Quick模块简介
- en: The window submodule
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 窗口子模块
- en: Controls
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控件
- en: Layouts
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 布局
- en: Introduction to the Qt Quick module
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Quick模块简介
- en: In the Qt framework, the Qt Quick module allows us to work with and implement
    QML with user-created applications. Qt Quick is the main module in the Qt framework
    for working with UIs and infrastructures with QML. This module expands Qt's functionality
    and makes some additions.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在Qt框架中，Qt Quick模块允许我们使用用户创建的应用程序与QML一起工作和实现。Qt Quick是Qt框架中用于处理UI和QML基础设施的主要模块。此模块扩展了Qt的功能并添加了一些功能。
- en: Basic types
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本类型
- en: 'In addition to the default QML types, the Qt Quick module provides the following
    types:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认的QML类型外，Qt Quick模块还提供了以下类型：
- en: '`date`: Date values'
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`date`: 日期值'
- en: '`point`: Values with `x` and `y` attributes'
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`point`: 具有x和y属性的值'
- en: '`rect`: Values with `x`, `y`, `width`, and `height` attributes'
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rect`: 具有x、y、width和height属性的值'
- en: '`size`: Values with `width` and `height` attributes'
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`: 具有width和height属性的值'
- en: '`color`: ARGB color values'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`color`: ARGB颜色值'
- en: '`font`: Font values with the properties of `QFont`'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`font`: 具有QFont属性的字体值'
- en: '`matrix4x4`: A 4-row and 4-column matrix'
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`matrix4x4`: 一个4行4列的矩阵'
- en: '`quaternion`: A scalar with `x`, `y`, and `z` attributes'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quaternion`: 具有x、y和z属性的标量'
- en: '`vector2d`: A 2D vector with `x` and `y` attributes'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vector2d`: 具有x和y属性的2D向量'
- en: '`vector3d`: A 3D vector with `x`, `y`, and `z` attributes'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vector3d`: 具有x、y和z属性的3D向量'
- en: '`vector4d`: A 4D vector with `x`, `y`, `z`, and `w` attributes'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vector4d`: 具有x、y、z和w属性的4D向量'
- en: Qt Quick types
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Quick类型
- en: 'In [Chapter 2](e8aa0a88-3426-4280-86f9-8d39cf7f6391.xhtml), *An Overview of
    QML*, we described the most popular Qt Quick types for creating a GUI. A full
    list of these types is available in the official documentation: [https://doc.qt.io/qt-5.9/qtquick-qmlmodule.html](https://doc.qt.io/qt-5.9/qtquick-qmlmodule.html). Let''s
    look at some of the most useful types that we haven''t covered yet:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在[第2章](e8aa0a88-3426-4280-86f9-8d39cf7f6391.xhtml)“QML概述”中，我们描述了创建GUI最流行的Qt
    Quick类型。这些类型的完整列表可在官方文档中找到：[https://doc.qt.io/qt-5.9/qtquick-qmlmodule.html](https://doc.qt.io/qt-5.9/qtquick-qmlmodule.html)。让我们看看一些我们尚未介绍的最有用的类型：
- en: '`Canvas`: This provides a 2D canvas item that enables drawing using JavaScript
    to create figures and other visual objects.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Canvas`: 这提供了一个2D画布项，可以使用JavaScript进行绘图，以创建图形和其他视觉对象。'
- en: '`Context2D`: This provides a 2D context for shapes on a `Canvas` item'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Context2D`: 这为`Canvas`项上的形状提供2D上下文。'
- en: '`AnimatedImage`: This plays animations stored as series of images containing a
    series of frames.'
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AnimatedImage`: 这播放存储为一系列图像的动画，其中包含一系列帧。'
- en: '`Drag`: This specifies drag and drop events for items.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Drag`: 这指定了项目的拖放事件。'
- en: '`DropArea`: This specifies drag and drop handling in an area.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`DropArea`: 这指定了区域内的拖放处理。'
- en: '`KeyEvent`: This provides information about key events.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`KeyEvent`: 这提供了关于按键事件的信息。'
- en: '`MouseEvent`: This allows you to handle mouse events.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MouseEvent`: 这允许你处理鼠标事件。'
- en: '`WheelEvent`: Mouse wheel events.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`WheelEvent`: 鼠标滚轮事件。'
- en: '`Flickable`: Flicked surfaces.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Flickable`: 滑动表面。'
- en: '`Flipable`: Flipped surfaces.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Flipable`: 翻转表面。'
- en: '`FocusScope`: Explicitly creates a focus scope.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FocusScope`: 明确创建一个焦点域。'
- en: '`GridView`: Model grid view of the items.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GridView`: 项目的模型网格视图。'
- en: '`Image`: Displays an image.'
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Image`: 显示图像。'
- en: '`ListView`: Model list view.'
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ListView`: 模型列表视图。'
- en: '`Loader`: Dynamic loading of a subtree from a URL.'
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Loader`: 从URL动态加载子树。'
- en: '`MultiPointTouchArea`: Used to handle multiple touch points.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`MultiPointTouchArea`: 用于处理多个触摸点。'
- en: '`Column`: Used to position items in columns.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Column`: 用于在列中定位项目。'
- en: '`Flow`: Used to position items such as words on a page.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Flow`: 用于定位页面上的项目，如文字。'
- en: '`Positioner`: Attached properties that show where an item exists.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Positioner`: 显示项目存在位置的附加属性。'
- en: '`Row`: Used to position items in row form.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Row`: 用于以行形式定位项目。'
- en: '`Repeater`: Used to create a number of item-based components.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Repeater`: 用于创建基于项目的多个组件。'
- en: '`ShaderEffect`: Used to add shaders to a rectangle.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ShaderEffect`: 用于向矩形添加着色器。'
- en: '`GridMesh`: A mesh with vertices arranged in a grid.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`GridMesh`: 一个顶点排列成网格的网格。'
- en: '`TextEdit`: A multiline text field.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextEdit`: 一个多行文本字段。'
- en: '`Matrix4x4`: A 4 x 4 transformation matrix for an item.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Matrix4x4`: 项目的4 x 4变换矩阵。'
- en: '`Rotation`: Used to rotate an item.'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Rotation`: 用于旋转一个项目。'
- en: '`Scale`: An item will scale.'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Scale`: 项目将进行缩放。'
- en: '`Translate`: Used to move an item without changing its `x` or `y` properties.'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Translate`: 用于移动一个项目，而不改变其`x`或`y`属性。'
- en: '`FontLoader`: Used to load fonts by name or URL.'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FontLoader`: 用于通过名称或URL加载字体。'
- en: '`FontMetrics`: Metrics for a font.'
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`FontMetrics`: 字体的度量信息。'
- en: Qt Quick submodules
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt Quick 子模块
- en: 'The Qt Quick library includes additional modules with types. Some of them will
    be described in detail in this chapter. This is a list of the sub-modules:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Qt Quick库包括包含类型的附加模块。其中一些将在本章中详细描述。以下是子模块列表：
- en: '`XmlListModel`: Provides types for creating models from XML data.'
  id: totrans-56
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`XmlListModel`: 提供从XML数据创建模型的数据类型。'
- en: '`LocalStorage`: A JavaScript interface for a SQLite database.'
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LocalStorage`: 一个用于SQLite数据库的JavaScript接口。'
- en: '`Particles`: A particle system for QML applications.'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Particles`: QML应用程序的粒子系统。'
- en: '`Window`: Types for creating top-level windows and accessing screen information.'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Window`: 用于创建顶级窗口和访问屏幕信息的数据类型。'
- en: '`Dialogs`: Used to create and interact with system dialogs.'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Dialogs`: 用于创建和交互系统对话框。'
- en: '`Controls`: Reusable UI components (such as buttons, checkboxes, labels, and
    more).'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Controls`: 可重用的UI组件（如按钮、复选框、标签等）。'
- en: '`Layouts`: Used to arrange items.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Layouts`: 用于排列项目。'
- en: '`Tests`: Used to test QML applications.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Tests`: 用于测试QML应用程序。'
- en: In this chapter, we'll focus on the important types and submodules that are
    used in GUI development. For complete information, it is recommended that you
    visit the Qt Quick documentation ([https://doc.qt.io/qt-5/qtquick-index.html](https://doc.qt.io/qt-5/qtquick-index.html)).
    In [Chapter 2](e8aa0a88-3426-4280-86f9-8d39cf7f6391.xhtml), *An Overview of QML*,
    some of the types and modules were implemented with examples, and were described
    in detail. Let's do the same here.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将重点关注在GUI开发中使用的 重要类型和子模块。要获取完整信息，建议您访问Qt Quick文档（[https://doc.qt.io/qt-5/qtquick-index.html](https://doc.qt.io/qt-5/qtquick-index.html)）。在[第2章](e8aa0a88-3426-4280-86f9-8d39cf7f6391.xhtml)“QML概述”中，一些类型和模块通过示例实现，并进行了详细描述。让我们在这里做同样的事情。
- en: The window module
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 窗口模块
- en: 'This module provides types that you can use when you''re creating top-level
    windows, screen information, and window events, such as when a window closes.
    To use this module, use the following `import` statement:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供在创建顶级窗口、屏幕信息和窗口事件（例如窗口关闭时）时可以使用的类型。要使用此模块，请使用以下`import`语句：
- en: '[PRE0]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We'll go through these types in the following sections.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下章节中介绍这些类型。
- en: Screen
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 屏幕
- en: 'This type provides information about the displayed screen, item, or window.
    The properties are as follows:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型提供有关显示的屏幕、项目或窗口的信息。属性如下：
- en: '`desktopAvailableHeight`**:** This integer is the available height of the desktop
    resolution in pixels.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`desktopAvailableHeight`**:** 这个整数表示桌面分辨率的可用高度（以像素为单位）。'
- en: '`desktopAvailableWidth`**:** This integer is the available width of the desktop
    resolution in pixels.'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`desktopAvailableWidth`**:** 这个整数表示桌面分辨率的可用宽度（以像素为单位）。'
- en: '`devicePixelRatio`**:** This `real` number is the ratio of physical pixels
    and device-independent pixels. The value is `1.0` with normal displays and `2.0`
    on Apple''s retina displays.'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`devicePixelRatio`**:** 这是一个`real`数，表示物理像素和设备无关像素的比率。在正常显示中值为`1.0`，在苹果的视网膜显示中为`2.0`。'
- en: '`width`**:** This integer is the width of the screen in pixels.'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: '`width`**:** 这个整数表示屏幕的宽度（以像素为单位）。'
- en: '`height`**:** This integer is the height of the screen in pixels.'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`height`**:** 这个整数表示屏幕的高度（以像素为单位）。'
- en: '`name`**:** This string is the name of the screen.'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`name`**:** 这个字符串是屏幕的名称。'
- en: '`orientation`**:** This is the orientation of the screen (using the accelerometer).'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`orientation`**:** 这是屏幕的方向（使用加速度计）。'
- en: '`orientationUpdateMask`**:** This contains the update mask for the orientation.'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`orientationUpdateMask`**:** 这包含方向的更新掩码。'
- en: '`primaryOrientation`**:** The primary orientation of the screen can be `Qt.PortraitOrientation`
    or `Qt.LandscapeOrientation`, depending on the height and width of the screen.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '`primaryOrientation`**:** 屏幕的主要方向可以是`Qt.PortraitOrientation`或`Qt.LandscapeOrientation`，具体取决于屏幕的高度和宽度。'
- en: '`pixelDensity`**:** This `real` number is the number of physical pixels per
    millimeter.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`pixelDensity`**:** 这个`real`数字是每毫米的物理像素数。'
- en: '`virtualX`**:** This integer is the *x* coordinate of the screen related to
    the virtual desktop.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualX`**:** 这个整数是屏幕与虚拟桌面相关的*x*坐标。'
- en: '`virtualY`**:** This integer is the *y* coordinate of the screen related to
    the virtual desktop.'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '`virtualY`**:** 这个整数是屏幕与虚拟桌面相关的*y*坐标。'
- en: 'The following method is available:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法可用：
- en: '`angleBetween(a, b)`: This returns the rotation angle between the `a` (the
    first parameter) and `b` (the second parameter) angles in degrees.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`angleBetween(a, b)`: 这返回`a`（第一个参数）和`b`（第二个参数）角度之间的旋转角度（以度为单位）。'
- en: 'Let''s make our QML app with a size that depends on the screen resolution of
    the device. To do this, open the `u_qml.qml` file and change the `UQml.Window`
    width and height properties with the following lines as screen type values:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个大小取决于设备屏幕分辨率的QML应用程序。为此，打开`u_qml.qml`文件，并使用以下行将`UQml.Window`的宽度和高度属性更改为屏幕类型值：
- en: '[PRE1]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The application's window will have the `width` and `height` properties that
    are available for the device that's being used.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序的窗口将具有`width`和`height`属性，这些属性适用于正在使用的设备。
- en: CloseEvent
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CloseEvent
- en: 'This type notifies you that a window is about to be closed by the windowing
    system. It has the following property:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型通知您，窗口即将由窗口系统关闭。它具有以下属性：
- en: '`accepted`: This can be `true` or `false`, and allows the user to close the
    window (the default is `true`).'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`accepted`: 这可以是`true`或`false`，并允许用户关闭窗口（默认为`true`）。'
- en: Window
  id: totrans-91
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Window
- en: 'This creates a new top-level window for the GUI application, which can consist
    of elements and items. The available properties of this type are as follows:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这为GUI应用程序创建了一个新的顶级窗口，该窗口可以包含元素和项目。此类型可用的属性如下：
- en: '`width`: This integer sets the width of the window in pixels.'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`width`: 这个整数设置窗口的像素宽度。'
- en: '`height`: This integer sets the height of the window in pixels.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`height`: 这个整数设置窗口的像素高度。'
- en: '`maximumWidth`**:** This integer sets the maximum width of the window that
    will be available.'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumWidth`**:** 这个整数设置窗口将可用的最大宽度。'
- en: '`maximumHeight`**:** This integer sets the maximum height of the window that
    will be available.'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumHeight`**:** 这个整数设置窗口将可用的最大高度。'
- en: '`minimumWidth`**:** This integer sets the minimum width of the window that
    will be available.'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumWidth`**:** 这个整数设置窗口将可用的最小宽度。'
- en: '`minimumHeight`**:** This integer sets the minimum height of the window that
    will be available.'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumHeight`**:** 这个整数设置窗口将可用的最小高度。'
- en: '`x`**:** This integer is the position of the window on the *x* axis.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`x`**:** 这个整数是窗口在*x*轴上的位置。'
- en: '`y`**:** This integer is the position of the window on the *y* axis.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '`y`**:** 这个整数是窗口在*y*轴上的位置。'
- en: '`opacity`**:** This `real` number sets the opacity of the window. The value
    ranges from `0.0` to `1.0`, where  `0.0` is fully transparent and `1.0` is fully
    opaque.'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`opacity`**:** 这个`real`数字设置窗口的不透明度。值范围从`0.0`到`1.0`，其中`0.0`是完全透明的，`1.0`是完全不透明的。'
- en: '`title`**:** This `string` sets the title of the window.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`title`**:** 这个`string`设置窗口的标题。'
- en: '`visible`**:** This can be `true` or `false`. If it''s `true`, the window will
    be visible, and if it''s `false`, the window will be invisible (the default is
    `true`).'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '`visible`**:** 这可以是`true`或`false`。如果是`true`，则窗口将是可见的；如果是`false`，则窗口将不可见（默认为`true`）。'
- en: '`visibility`**: **This sets the screen-occupation state of the window as `normal`,
    `minimized`, `maximized`, or `fullscreen`.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`visibility`**: **这设置窗口的屏幕占用状态为`normal`、`minimized`、`maximized`或`fullscreen`。'
- en: '`color`**:** This sets the background color of the window.'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: '`color`**:** 这设置窗口的背景颜色。'
- en: '`modality`**:** This sets the window as modal (the default is `QtCore.Qt.NonModal`).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '`modality`**:** 这会将窗口设置为模态（默认为`QtCore.Qt.NonModal`）。'
- en: '`screen`**:** This sets the associated window for this window.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '`screen`**:** 这设置与此窗口关联的窗口。'
- en: '`active`**:** This can be `true` or `false`, and sets the status of the window.'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '`active`**:** 这可以是`true`或`false`，并设置窗口的状态。'
- en: '`activeFocusItem`**:** This is the item that currently has active focus; it''s
    null if there is no item with active focus.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusItem`**:** 这是当前具有活动焦点的项目；如果没有项目具有活动焦点，则为null。'
- en: '`contentItem`**:** This is the invisible root `Item` of the scene.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentItem`**:** 这是场景的无形根`Item`。'
- en: '`contentOrientation`**:** The hint to the window manager for additional content.'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentOrientation`**:** 这是对窗口管理器的额外内容的提示。'
- en: '`data`**:** This is a list, and allows us to mix visual objects, resources,
    and other windows.'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '`data`**:** 这是一个列表，允许我们混合视觉对象、资源和其他窗口。'
- en: '`flags`**:** These are the available flags for this window.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`flags`**:** 这些是此窗口可用的标志。'
- en: 'The window type provides the following properties:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 窗口类型提供了以下属性：
- en: '`Window.window`**:** The `Window` type – the item''s window that''s used.'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window.window`**:** `Window`类型 - 用于项目的窗口。'
- en: '`Window.width`: This integer is the width of the item''s window.'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window.width`: 此整数是项目窗口的宽度。'
- en: '`Window.height`**:** This integer is the height of the item''s window.'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window.height`**:** 此整数是项目窗口的高度。'
- en: '`Window.visibility`**:** This window will be shown in the windowing system,
    such as `normal`, `fullscreen`, and more.'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window.visibility`**:** 此窗口将在窗口系统中显示，例如`normal`、`fullscreen`等。'
- en: '`Window.active`: This can be `true` or `false`, and shows whether the window
    is active.'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window.active`: 这可以是`true`或`false`，表示窗口是否处于活动状态。'
- en: '`Window.activeFocusItem`: This shows which item currently has active focus.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window.activeFocusItem`: 这显示当前哪个项目具有活动焦点。'
- en: '`Window.contentItem`: This is the invisible root item of the scene.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '`Window.contentItem`: 这是场景的无形根项目。'
- en: 'This type has one signal:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型有一个信号：
- en: '`closing(CloseEvent close)`: This is emitted when the window tries to close.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '`closing(CloseEvent close)`: 当窗口尝试关闭时发出。'
- en: 'The type also has the following methods:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 类型还具有以下方法：
- en: '`alert(int)`: Causes an alert.'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`alert(int)`: 引发一个警告。'
- en: '`close()`: Closes the window.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '`close()`: 关闭窗口。'
- en: '`hide()`: Hides the window.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`hide()`: 隐藏窗口。'
- en: '`lower()`: Lowers the window.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '`lower()`: 降低窗口。'
- en: '`raise()`: Raises the window.'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`raise()`: 提升窗口。'
- en: '`requestActivate()`: Requests the window to be activated.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '`requestActivate()`: 请求窗口被激活。'
- en: '`show()`: Shows the window.'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '`show()`: 显示窗口。'
- en: '`showFullScreen()`: Shows the window in fullscreen mode.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '`showFullScreen()`: 以全屏模式显示窗口。'
- en: '`showMaximized()`: Shows the window in maximized mode.'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: '`showMaximized()`: 以最大化模式显示窗口。'
- en: '`showMinimized()`: Shows the window in minimized mode.'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`showMinimized()`: 以最小化模式显示窗口。'
- en: '`showNormal()`: Shows the window in normal mode.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`showNormal()`: 以正常模式显示窗口。'
- en: We can try to change/add properties in the `u_qml.qml` file in the `UQml.Window`
    section and look at the results.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`UQml.Window`部分的`u_qml.qml`文件中尝试更改/添加属性，并查看结果。
- en: Controls
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Controls
- en: 'The `QtQuick.Controls` module allows us to use a wide set of reusable UI elements
    to construct the functionality of the application. The `import` statement that
    you need to be able to use types from this module is as follows:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtQuick.Controls`模块允许我们使用一组可重用的UI元素来构建应用程序的功能。您需要以下`import`语句才能使用此模块的类型：'
- en: '[PRE2]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the next section, we'll go through the types this module provides.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将介绍此模块提供的类型。
- en: ApplicationWindow
  id: totrans-141
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ApplicationWindow
- en: 'This type implements a simple top-level application window with the following
    properties:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型实现了一个具有以下属性的简单顶级应用程序窗口：
- en: '`contentItem`: This is the area between `ToolBar` and `StatusBar`.'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentItem`: 这是`ToolBar`和`StatusBar`之间的区域。'
- en: '`menuBar`**:** This sets the menu bar of the application window.'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`menuBar`**:** 这设置应用程序窗口的菜单栏。'
- en: '`toolBar`**:** This sets the toolbar of the app.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '`toolBar`**:** 这设置应用程序的工具栏。'
- en: '`statusBar`**:** This item sets the status bar.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`statusBar`**:** 此项目设置状态栏。'
- en: '`style`**:** This component is used to style the app.'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件用于设置应用程序的样式。'
- en: 'Let''s take a look at the following example:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: 'Create a file called `UAppwin.qml` in the `qmls/` directory and add the following
    lines:'
  id: totrans-149
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`qmls/`目录中创建一个名为`UAppwin.qml`的文件，并添加以下行：
- en: '[PRE3]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: The width and height of the application window will be dependent on the resolution
    of the device. Also, the created `bars/` directory inside the `qmls/` folder will
    be used to import this application's menus and status bars.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序窗口的宽度和高度将取决于设备的分辨率。此外，在`qmls/`文件夹内创建的`bars/`目录将用于导入此应用程序的菜单和状态栏。
- en: 'Add the bar to the bottom of the application window:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将条带到应用程序窗口的底部添加：
- en: '[PRE4]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `id` of the tab bar and the `width` of the application window are specified.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 标签栏的`id`和应用程序窗口的`width`被指定。
- en: 'Then, add the `StackLayout` class with `UAppItems`:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加带有`UAppItems`的`StackLayout`类：
- en: '[PRE5]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will add the application items that will be used with the stacked layout
    representation.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将添加用于堆叠布局表示的应用程序项目。
- en: 'Add the status bar for the application window at the bottom of the `UAppwin.qml`
    file:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UAppwin.qml`文件的底部添加应用程序窗口的状态栏：
- en: '[PRE6]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The `StatusBar` class uses `Label` for the text and `style` for the gradient
    colors.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`StatusBar`类使用`Label`进行文本和`style`进行渐变颜色。'
- en: 'Now, we need to create a directory called `bars/`inside `qmls/`, which will
    be used for elements of the application window, such as the tab bar, the menu,
    and the status bar. Let''s implement the following steps:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们需要在`qmls/`目录内创建一个名为`bars/`的目录，该目录将用于应用程序窗口的元素，例如标签栏、菜单和状态栏。让我们执行以下步骤：
- en: 'Create the `MBar.qml` file in the `bars/` folder with the following lines:'
  id: totrans-162
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bars/`文件夹中创建一个名为`MBar.qml`的文件，并包含以下行：
- en: '[PRE7]'
  id: totrans-163
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: For each menu section, we need to add the `MenuItem` with text.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个菜单部分，我们需要添加带有文本的`MenuItem`：
- en: 'Create a file called `TBar.qml` for the toolbar of the application inside the
    `bars/` directory:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bars/`目录内创建一个名为`TBar.qml`的文件，用于应用程序的工具栏：
- en: '[PRE8]'
  id: totrans-166
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: For each toolbar item, a tool button is used with an icon that is available
    in the `Icons/` folder, which is in the `bars/` directory. The tool buttons are
    arranged with a row layout.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个工具栏项目，使用`Icons/`文件夹中可用的图标创建一个工具按钮，该文件夹位于`bars/`目录中。工具按钮以行布局排列。
- en: 'Create the central element, or `TabBar`, inside the `TaBar.qml`filein the `bars/`
    directory:'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`bars/`目录内的`TaBar.qml`文件中创建中心元素，或`TabBar`：
- en: '[PRE9]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This `TabBar` will use several tabs in the application. These tabs are added
    in the `model` property. Each tab uses a tab button with model data text. The
    `Repeater` type is used to repeat the `TabButton` type for each element of the
    model. To use this tab bar with our application, we need to add some objects,
    such as items, images, videos, and animations.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 此`TabBar`将在应用程序中使用几个标签。这些标签添加在`model`属性中。每个标签使用带有模型数据文本的标签按钮。`Repeater`类型用于重复`TabButton`类型以重复模型中的每个元素。为了使用此标签栏与我们的应用程序，我们需要添加一些对象，例如项目、图像、视频和动画。
- en: 'Create a file inside the `qmls/` directory called `UAppItems.qml` (similar
    to `UItems.qml`) to implement the animated objects with the application window:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`qmls/`目录内创建一个名为`UAppItems.qml`的文件（类似于`UItems.qml`），以实现带有应用程序窗口的动画对象：
- en: '[PRE10]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The `GridLayout` positions the items.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '`GridLayout`定位项目。'
- en: 'Add the first glow rectangle to the bottom of this `GridLayout`:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个发光矩形添加到`GridLayout`的底部：
- en: '[PRE11]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In this rectangle, the layout properties for each side margin are specified.
    This will be used for the space between the elements.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在此矩形中，指定了每侧边距的布局属性。这将用于元素之间的空间。
- en: 'Add the `function` to the first rectangle:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`function`添加到第一个矩形：
- en: '[PRE12]'
  id: totrans-178
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This function returns a list of colors, depending on the colors that are passed
    as parameters.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数返回一个颜色列表，取决于作为参数传递的颜色。
- en: 'Add the handlers and `MouseArea` to the first grid layout''s element:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将处理程序和`MouseArea`添加到第一个网格布局的元素：
- en: '[PRE13]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The `onAcolored` handler calls the `onAcolor` function and changes the properties
    of the first rectangle correspondingly.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '`onAcolored`处理程序调用`onAcolor`函数，并相应地更改第一个矩形的属性。'
- en: 'Add the second glow rectangle to the bottom of the `GridLayout`:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个发光矩形添加到`GridLayout`的底部：
- en: '[PRE14]'
  id: totrans-184
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The second rectangle uses similar properties to the first.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个矩形使用与第一个类似的属性。
- en: 'Then, add the sequential animations to the second rectangle:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将连续动画添加到第二个矩形中：
- en: '[PRE15]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: These animations are used to animate the color changes of the rectangle's glow
    and text glow colors.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 这些动画用于动画矩形发光和文本发光颜色的颜色变化。
- en: 'Add the third element to the tab of the application window:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个元素添加到应用程序窗口的标签中：
- en: '[PRE16]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This tab element is similar to the other element in this tab.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 此标签元素与该标签中的其他元素类似。
- en: 'Add parallel animations to the third element (the glow rectangle) of the tab:'
  id: totrans-192
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向标签的第三个元素（发光矩形）添加并行动画：
- en: '[PRE17]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This type uses the `PropertyAnimation` type to make changes to different properties
    in parallel.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型使用`PropertyAnimation`类型来并行更改不同的属性。
- en: 'Now we need to make some changes in the `URectGlow.qml` file:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要在`URectGlow.qml`文件中进行一些更改：
- en: 'Add new properties to the `URectGlow.qml` file:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向`URectGlow.qml`文件添加新属性：
- en: '[PRE18]'
  id: totrans-197
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Here, we've added custom properties to the glow rectangle, which can be changed
    in any place, and that will reimplement this object in the application.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们已向发光矩形添加了自定义属性，可以在任何地方更改，这将重新实现此对象在应用程序中。
- en: 'Now we need to change all the related properties of `URectGlow.qml` so that
    they''re the custom properties:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要更改`URectGlow.qml`的所有相关属性，以便它们成为自定义属性：
- en: '[PRE19]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Change the properties to the values of the custom properties to reimplement
    them in the application.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 将属性更改为自定义属性的值，以在应用程序中重新实现它们。
- en: 'For the application to work properly, it is recommended that you add the following
    lines to each rectangular glow element of the app:'
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了使应用程序正常工作，建议您将以下行添加到应用程序的每个矩形发光元素中：
- en: '[PRE20]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: We have changed the properties of the rectangles to the new, custom-created
    ones.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已将矩形的属性更改为新创建的自定义属性。
- en: 'To show this result, we can run this app by adding the following lines to the
    `u_qml.qml` file, somewhere before the rectangle, with `id: rect1`:'
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '要显示此结果，我们可以在`u_qml.qml`文件中添加以下行，在矩形之前某处，使用`id: rect1`：'
- en: '[PRE21]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The preceding line will add the demonstration of the application window to
    the main window application. Run the `u_qml.qml` file with the `u_app.py` Python file.
    You will see the application window with bars, a menu, and animated items:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 前一行将演示应用程序窗口添加到主窗口应用程序中。使用`u_app.py` Python文件运行`u_qml.qml`文件。您将看到带有条形、菜单和动画项的应用程序窗口：
- en: '![](img/47d7a8e6-f9ff-4b7d-8364-6069d23cd368.png)'
  id: totrans-208
  prefs: []
  type: TYPE_IMG
  zh: '![](img/47d7a8e6-f9ff-4b7d-8364-6069d23cd368.png)'
- en: The application window has a top panel, tool bar, central widget, and status
    bar. The buttons of the central widget provide animation effects.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序窗口有一个顶部面板、工具栏、中央小部件和状态栏。中央小部件的按钮提供动画效果。
- en: Button
  id: totrans-210
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Button
- en: 'The most popular type in GUIs is the button. This is a push button with a text
    label. You will need the following `import` statement:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 在GUI中最受欢迎的类型是按钮。这是一个带有文本标签的推按钮。您需要以下`import`语句：
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'It has the following properties:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`action`: This is an associated button action, such as text or a tooltip.'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '`action`: 这是一个关联的按钮动作，例如文本或工具提示。'
- en: '`checkable`**:** This can be `true` or `false`. If it''s `true`, the button
    will be checkable, that is, it remains pushed when the user pushes this button
    (the default is `false`).'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkable`**:** 这可以是`true`或`false`。如果是`true`，按钮将是可检查的，即当用户按下此按钮时它将保持按下状态（默认为`false`）。'
- en: '`checked`**:** This can be `true` or `false`. If it''s `true`, the button will
    be checked (the default is `false`). It''s available only if `checkable` is set
    to `true`.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`checked`**:** 这可以是`true`或`false`。如果是`true`，按钮将被选中（默认为`false`）。仅在`checkable`设置为`true`时可用。'
- en: '`exclusiveGroup`**:** This determines whether the button belongs to a group.'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: '`exclusiveGroup`**:** 这确定按钮是否属于一个组。'
- en: '`hovered`**:** This can be `true` or `false`, and states whether the button
    is being hovered.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: '`hovered`**:** 这可以是`true`或`false`，并指示按钮是否正在悬停。'
- en: '`iconName`**:** This `string` is the theme name of the image source.'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`iconName`**:** 这是一个`string`，是图像源的主题名称。'
- en: '`iconSource`**:** This is a URL. The button will have an icon image from the
    provided URL.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '`iconSource`**:** 这是一个URL。按钮将使用提供的URL中的图标图像。'
- en: '`isDefault`**:** This can be `true` or `false`. This button will be the default,
    or will be clicked on when the *Enter* key is pressed.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: '`isDefault`**:** 这可以是`true`或`false`。此按钮将是默认按钮，或当按下*Enter*键时将被点击。'
- en: '`menu`**:** This provides a drop-down menu for this button.'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: '`menu`**:** 这为按钮提供了一个下拉菜单。'
- en: '`pressed`**:** This can be `true` or `false`. If it''s `true`, the button has
    been pressed.'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '`pressed`**:** 这可以是`true`或`false`。如果是`true`，按钮已被按下。'
- en: '`style`**:** This component is for the style of the button, such as `ButtonStyle`.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 这个组件用于按钮的样式，例如`ButtonStyle`。'
- en: '`text`**:** This `string` sets the text to the button.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: '`text`**:** 这是一个`string`，将文本设置到按钮上。'
- en: '`tooltip`: This `string` sets a tooltip to the button.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`tooltip`: 这是一个`string`，为按钮设置工具提示。'
- en: 'It also has the following signal:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 它还具有以下信号：
- en: '`clicked()`: This is emitted when the button is clicked on.'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '`clicked()`: 当按钮被点击时发出。'
- en: ButtonStyle
  id: totrans-229
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ButtonStyle
- en: 'The `ButtonStyle` type can be used to style the button. You will need the following `import`
    statement:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用`ButtonStyle`类型来样式化按钮。您需要以下`import`语句：
- en: '[PRE23]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'It has the following properties:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`background`**:** This component is used for the background styling of the
    button.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`background`**:** 这个组件用于按钮的背景样式。'
- en: '`control`**:** This is the button of the `Button` QML type with the style that
    will be attached to this button.'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: '`control`**:** 这是`Button` QML类型的按钮，它将附加到该按钮上的样式。'
- en: '`label`**:** This component is used to style the label of this button.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '`label`**:** 这个组件用于样式化此按钮的标签。'
- en: 'Let''s have a look at the following example:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看以下示例：
- en: 'Modify the `UButton.qml` file:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改`UButton.qml`文件：
- en: '[PRE24]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: This is a standard push button, with specified custom properties for colors,
    glow radius, spread, and text.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个标准的推按钮，具有指定的自定义属性，如颜色、发光半径、扩散和文本。
- en: 'Add the `style` property to the button using the `ButtonStyle` type:'
  id: totrans-240
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`ButtonStyle`类型将`style`属性添加到按钮中：
- en: '[PRE25]'
  id: totrans-241
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Here, we've styled the button with the `ButtonStyle` type and the property background,
    which will use the button's custom properties. Now we need to add some lines to
    the `u_qml.qml` file.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用`ButtonStyle`类型和背景属性来设置按钮样式，这将使用按钮的自定义属性。现在我们需要向`u_qml.qml`文件中添加一些行。
- en: 'In the importing section, add the controls and the styles of the controls that
    can be used with buttons and other related elements:'
  id: totrans-243
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入部分，添加可以与按钮和其他相关元素一起使用的控件和控件样式：
- en: '[PRE26]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The versions of the imported elements can vary, depending on the Qt library
    version you are using.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 导入元素的版本可能因你使用的Qt库版本而异。
- en: 'Add the first button inside the rectangle with `id: rect2`:'
  id: totrans-246
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '在具有`id: rect2`的矩形内添加第一个按钮：'
- en: '[PRE27]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, we are using different types of signal handlers in the mouse area of the
    button.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们在按钮的鼠标区域使用不同类型的信号处理器。
- en: 'Add the second button after the first:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个按钮之后添加第二个按钮：
- en: '[PRE28]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `tooltip` property, as specified in this button, will provide the tooltip
    with the used action.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如此按钮中指定的`tooltip`属性将提供使用动作的提示信息。
- en: 'Add the sequential animations to the second button, at the bottom:'
  id: totrans-252
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第二个按钮的底部添加顺序动画：
- en: '[PRE29]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: This is used to realize the hover and blinking effects with animations.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于通过动画实现悬停和闪烁效果。
- en: 'Add the `MouseArea` type to the second button:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MouseArea`类型添加到第二个按钮：
- en: '[PRE30]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: These signal handlers are used to handle events such as enter cursor in the
    area, exit cursor from the area, and clicks.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这些信号处理器用于处理诸如光标进入区域、光标从区域退出以及点击等事件。
- en: 'Now add the third button after the second button:'
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在在第二个按钮之后添加第三个按钮：
- en: '[PRE31]'
  id: totrans-259
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Clicking on this button will show animated rectangles in the application window.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 点击此按钮将在应用程序窗口中显示动画矩形。
- en: 'Add the `MouseArea` type and the `onClicked` handler to the third button:'
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MouseArea`类型和`onClicked`处理器添加到第三个按钮：
- en: '[PRE32]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `onClicked` handler uses JavaScript instructions to make  `main_item` and
    `grid1` visible/invisible in the first rectangle of the application window.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '`onClicked`处理器使用JavaScript指令使应用程序窗口的第一个矩形中的`main_item`和`grid1`可见/不可见。'
- en: 'Now we need to cut the `Grid` from the `u_qml.qml` file, create a file called `UGrid.qml`
    in the `qmls/` directory, paste the `Grid` to this file, and rebuild the lines
    of code with the `GridLayout`:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们需要从`u_qml.qml`文件中剪切`Grid`，在`qmls/`目录中创建一个名为`UGrid.qml`的文件，将`Grid`粘贴到该文件中，并使用`GridLayout`重建代码行。
- en: 'Change the `Grid` elements positioning to the `GridLayout` construction:'
  id: totrans-265
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`Grid`元素的定位更改为`GridLayout`构建。
- en: '[PRE33]'
  id: totrans-266
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: This is the construction of the items that was used before we used `GridLayout`
    positioning.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这是我们在使用`GridLayout`定位之前使用的项目构建。
- en: 'Add the first rectangle with a glow effect to the `UGrid.qml` file:'
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将具有发光效果的第一个矩形添加到`UGrid.qml`文件中：
- en: '[PRE34]'
  id: totrans-269
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The custom and layout properties are added to this rectangle.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 将自定义和布局属性添加到这个矩形中。
- en: 'Add the `MouseArea` and `RotationAnimator` QML types to the first rectangle:'
  id: totrans-271
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MouseArea`和`RotationAnimator` QML类型添加到第一个矩形中：
- en: '[PRE35]'
  id: totrans-272
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: This animator will rotate the item with the specified `id` property clockwise
    by `360` degrees, with a speed dependent on the `duration` property. The animation
    will be infinite.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 此动画器将以`360`度顺时针旋转具有指定`id`属性的项目，速度取决于`duration`属性。动画将是无限的。
- en: 'Add the second rectangle to the `UGrid.qml` file:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个矩形添加到`UGrid.qml`文件中：
- en: '[PRE36]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: This is the second rectangle with `id` and `Layout` properties.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 这是具有`id`和`Layout`属性的第二个矩形。
- en: 'Add the `MouseArea` and `RotationAnimator` types to the bottom of the second
    rectangle:'
  id: totrans-277
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MouseArea`和`RotationAnimator`类型添加到第二个矩形的底部：
- en: '[PRE37]'
  id: totrans-278
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: The `duration` property of this `RotationAnimator` is less than it was in the
    first rectangle, and so this circle will be rotated faster.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 这个`RotationAnimator`的`duration`属性比第一个矩形中的要小，因此这个圆圈将旋转得更快。
- en: 'Add the third rectangle to the `UGrid.qml` file:'
  id: totrans-280
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第三个矩形添加到`UGrid.qml`文件中：
- en: '[PRE38]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'This is the third rectangle with a glow effect, an `id: g7` property, and `Layout` properties
    that fill the width and height.'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '这是第三个带有发光效果的矩形，具有`id: g7`属性和填充宽度和高度的`Layout`属性。'
- en: 'Add the `MouseArea` and `RotationAnimator` to the third rectangle:'
  id: totrans-283
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`MouseArea`和`RotationAnimator`添加到第三个矩形中：
- en: '[PRE39]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: This `RotationAnimator` will rotate the target circle faster than the previous
    two.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 此`RotationAnimator`将比前两个旋转目标圆圈更快。
- en: 'Finally, add the fourth rectangle to the application:'
  id: totrans-286
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将第四个矩形添加到应用程序中：
- en: '[PRE40]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: This rectangle uses a named color, `grey`, for the `txtglow` property of the
    rectangle.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 这个矩形使用命名颜色`grey`为矩形的`txtglow`属性。
- en: 'Finally, for the last rectangle, add the `MouseArea` and `RotationAnimator`
    types:'
  id: totrans-289
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，对于最后一个矩形，添加 `MouseArea` 和 `RotationAnimator` 类型：
- en: '[PRE41]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: This animator will rotate the target circle at a faster speed than the previous
    circles. These examples demonstrate the principles of creating and styling buttons
    with the `Button`, `Rectangle`, and `MouseArea` QML types.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 此动画器将以比前一个圆圈更快的速度旋转目标圆圈。以下示例演示了使用 `Button`、`Rectangle` 和 `MouseArea` QML 类型创建和设置按钮样式的原理。
- en: 'Practicing with this code may help you to understand these basics. Finally,
    to implement the button in the application, let''s change the `u_qml.qml` file:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用此代码进行练习，可以帮助你理解这些基础知识。最后，为了在应用程序中实现按钮，让我们更改 `u_qml.qml` 文件：
- en: 'Add/change the `UAppwin`, `UItem`, and `UGrid` properties to/in the application:'
  id: totrans-293
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `UAppwin`、`UItem` 和 `UGrid` 属性添加/设置到应用程序中：
- en: '[PRE42]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'The visible properties of `UItem` and `UAppwin` are set to false. By default,
    `UGrid` will be visible with circles and glow rectangles. Now we can run the application,
    and we''ll see the following result:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `UItem` 和 `UAppwin` 的可见属性设置为 `false`。默认情况下，`UGrid` 将带有圆圈和发光矩形可见。现在我们可以运行应用程序，我们将看到以下结果：
- en: '![](img/be574969-e353-48ec-9131-e7dc738b98a7.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![](img/be574969-e353-48ec-9131-e7dc738b98a7.png)'
- en: If we push these buttons, the related circle will rotate, and if we push them
    again, the related circle will stop.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们按下这些按钮，相关的圆圈将旋转，如果我们再次按下，相关的圆圈将停止。
- en: CheckBox
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: CheckBox
- en: 'The `CheckBox` button allows the user to select one or more options. A `CheckBox` button
    can be toggled to check an option, or it can be unchecked, and it consists of
    a checkbox and a text label. You need the following `import` statement for this
    type:'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`CheckBox` 按钮允许用户选择一个或多个选项。复选框按钮可以切换以选中选项，也可以取消选中，它由复选框和文本标签组成。为此类型需要以下 `import`
    语句：'
- en: '[PRE43]'
  id: totrans-300
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'It has the following properties:'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`checked`**:** This can be `true` or `false`. It is `true` if the checkbox
    is checked.'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`checked`**:** 这可以是 `true` 或 `false`。如果复选框被选中，则为 `true`。'
- en: '`pressed`**:** This can be `true` or `false`. It is `true` if the checkbox
    is checked.'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`pressed`**:** 这可以是 `true` 或 `false`。如果复选框被选中，则为 `true`。'
- en: '`hovered`**:** This can be `true` or `false`. It is `true` if the checkbox
    is hovered over by the mouse pointer.'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`hovered`**:** 这可以是 `true` 或 `false`。如果鼠标指针悬停在复选框上，则为 `true`。'
- en: '`partiallyCheckedEnabled` **:** This can be `true` or `false`. It makes the
    `Qt.PartiallyChecked` state available.'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`partiallyCheckedEnabled` **:** 这可以是 `true` 或 `false`。它使得 `Qt.PartiallyChecked`
    状态可用。'
- en: '`text`**:** This is a `string` that sets the text that will be displayed near
    the checkbox.'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`text`**:** 这是一个 `string`，用于设置将显示在复选框附近的文本。'
- en: '`tooltip`**:** This is a `string` that sets a tooltip to this button.'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`tooltip`**:** 这是一个 `string`，用于为此按钮设置工具提示。'
- en: '`checkedState`**:** This is an integer that sets the current state for the
    button. `1` means checked, `0` means unchecked, and `2` means partially checked.'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`checkedState`**:** 这是一个整数，用于设置按钮的当前状态。`1` 表示选中，`0` 表示未选中，`2` 表示部分选中。'
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. The checkbox will
    be focused when pressed.'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnPress`**:** 这可以是 `true` 或 `false`。当按下时，复选框将被聚焦。'
- en: '`exclusiveGroup`**:** This sets the group that the checkbox will belong to.'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`exclusiveGroup`**:** 这将设置复选框所属的组。'
- en: '`style`**:** This component provides styling for this button, such as the `CheckBoxStyle`
    type. The `CheckBoxStyle` type includes `background`, `control`, `indicator`,
    `label`, and `spacing` properties.'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件为此按钮提供样式，例如 `CheckBoxStyle` 类型。`CheckBoxStyle` 类型包括 `background`、`control`、`indicator`、`label`
    和 `spacing` 属性。'
- en: ComboBox
  id: totrans-312
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ComboBox
- en: 'This type allows users to choose from multiple options of a drop-down list
    or implement the model in order to represent a `ComboBox`. Use the following `import`
    statement:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型允许用户从下拉列表的多个选项中进行选择或实现模型以表示 `ComboBox`。使用以下 `import` 语句：
- en: '[PRE44]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'It has the following properties:'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`count`**:** This is an integer, and is the number of items in the combo box.'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`count`**:** 这是一个整数，表示组合框中的项目数量。'
- en: '`currentIndex`**:** This is an integer, and is the index of the selected item
    in the combo box.'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentIndex`**:** 这是一个整数，表示组合框中选中项的索引。'
- en: '`currentText`**:** This is a `string` that sets the text of the selected item.'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentText`**:** 这是一个 `string`，用于设置选中项的文本。'
- en: '`pressed`**:** This can be `true` or `false`. It will be `true` if the `ComboBox`
    is pressed.'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`pressed`**:** 这可以是 `true` 或 `false`。如果 `ComboBox` 被按下，则为 `true`。'
- en: '`hovered`**:** This can be `true` or `false`. It will be `true` if the box
    is hovered over by the mouse pointer.'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`hovered`**:** 这可以是 `true` 或 `false`。如果鼠标指针悬停在框上，则为 `true`。'
- en: '`editable`**:** This can be `true` or `false`. It will make the text inside the
    combo box editable.'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`editable`**:** 这可以是`true`或`false`。它将使组合框内的文本可编辑。'
- en: '`editText`**:** This is a `string` that represents the text in the editable
    `ComboBox`, which can be edited.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: '`editText`**:** 这是一个表示可编辑`ComboBox`中文本的`string`，可以对其进行编辑。'
- en: '`selectByMouse`**:** This can be `true` or `false`, and provides you with the
    ability to select the text in the editable `ComboBox` using the mouse.'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectByMouse`**:** 这可以是`true`或`false`，它为你提供了使用鼠标选择可编辑`ComboBox`中文本的能力。'
- en: '`menu`**:** This component sets a menu so that you can work with text selections,
    such as the `menu` type component.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`menu`**:** 此组件设置一个菜单，以便你可以处理文本选择，例如`menu`类型组件。'
- en: '`model`**:** This will be used to implement the `ComboBox`.'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`model`**:** 这将用于实现`ComboBox`。'
- en: '`inputMethodComposing`**:** This can be `true` or `false`. If it''s `true`,
    the editable `ComboBox` has partial text input from an input method.'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMethodComposing`**:** 这可以是`true`或`false`。如果为`true`，可编辑的`ComboBox`有来自输入方法的文本输入。'
- en: '`inputMethodHints`**:** This `enumeration` sets hints for the input about the
    expected content, such as `Qt.ImhHiddenText`, which will be a password field,
    or `Qt.ImhDate`, which will be a date field.'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMethodHints`**:** 这个`enumeration`为输入设置了有关预期内容的提示，例如`Qt.ImhHiddenText`，这将是一个密码字段，或者`Qt.ImhDate`，这将是一个日期字段。'
- en: '`acceptableInput`**:** This can be `true` or `false`. If `true`, the editable
    text field contains acceptable text.'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`acceptableInput`**:** 这可以是`true`或`false`。如果为`true`，可编辑文本字段包含可接受的文本。'
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. The `ComboBox` will
    be focused when pressed.'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnPress`**:** 这可以是`true`或`false`。按下时，`ComboBox`将被聚焦。'
- en: '`textRole`**:** This is a `string` that can be put as a model role for the
    `ComboBox`.'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`textRole`**:** 这是一个可以作为`ComboBox`模型角色的`string`。'
- en: '`validator`**:** This sets a text validator for the editable `ComboBox`.'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`validator`**:** 这为可编辑的`ComboBox`设置了一个文本验证器。'
- en: '`style`**:** This component is used of the styling for the `ComboBox`, such
    as the `ComboBoxStyle` type. `ComboBoxStyle` has the `background`, `control`,
    `dropDownButtonWidth`, `font`, `label`, `renderType`, `selectedTextColor`, `selectionColor`,
    and `textColor` properties.'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件用于`ComboBox`的样式，例如`ComboBoxStyle`类型。`ComboBoxStyle`具有`background`、`control`、`dropDownButtonWidth`、`font`、`label`、`renderType`、`selectedTextColor`、`selectionColor`和`textColor`属性。'
- en: RadioButton
  id: totrans-333
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: RadioButton
- en: 'This type of button provides a choice between different options, and only one
    can be checked at a time. This button consists of the radio button control and
    the text label. You need the following `import` statement:'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: 此类按钮提供在不同选项之间的选择，并且一次只能选择一个。此按钮由单选按钮控件和文本标签组成。你需要以下`import`语句：
- en: '[PRE45]'
  id: totrans-335
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'It has the following properties:'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`checked`**:** This can be `true` or `false`. It''s `true` if the radio button
    is checked.'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '`checked`**:** 这可以是`true`或`false`。如果单选按钮被选中，则为`true`。'
- en: '`pressed`**:** This can be `true` or `false`. It''s `true` if the button is
    pressed.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`pressed`**:** 这可以是`true`或`false`。如果按钮被按下，则为`true`。'
- en: '`hovered`**:** This can be `true` or `false`. It''s `true` if the button is
    hovered over by the mouse pointer.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`hovered`**:** 这可以是`true`或`false`。如果鼠标指针悬停在按钮上，则为`true`。'
- en: '`text`**:** This is a `string` that sets the text that will be displayed near
    the radio button.'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`text`**:** 这是一个设置靠近单选按钮显示的文本的`string`。'
- en: '`tooltip`**:** This is a `string` that sets the tooltip for this button.'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`tooltip`**:** 这是一个设置此按钮提示的`string`。'
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. The radio button will
    be focused when pressed.'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnPress`**:** 这可以是`true`或`false`。按下时，单选按钮将被聚焦。'
- en: '`exclusiveGroup`**:** This is the group that the button will belong to.'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`exclusiveGroup`**:** 这是按钮所属的组。'
- en: '`style`**:** This component provides styling for the button, such as the `RadioButtonStyle`
    type. The `background`, `control`, `indicator`, `label`, and `spacing` properties
    are available in the `RadioButtonStyle` type.'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件为按钮提供样式，例如`RadioButtonStyle`类型。在`RadioButtonStyle`类型中，`background`、`control`、`indicator`、`label`和`spacing`属性可用。'
- en: TextField
  id: totrans-345
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TextField
- en: These elements provide the functionality to work with and visualize text data.
    The user can paste, copy, edit, and insert text from a file or input text manually,
    or use another operation related to the text in the text field. In the `QtQuick`
    module, the `TextArea` and `TextField` types are available for these tasks.
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 这些元素提供了处理和可视化文本数据的功能。用户可以从文件粘贴、复制、编辑和手动插入文本，或者使用与文本字段中的文本相关的其他操作。在`QtQuick`模块中，`TextArea`和`TextField`类型可用于这些任务。
- en: TextArea
  id: totrans-347
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TextArea
- en: 'This type allows lines of editable formatted text. We need to use the following `import`
    statement:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型允许编辑格式化的文本行。我们需要使用以下`import`语句：
- en: '[PRE46]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'It has the following properties:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`text`**:** This is a `string` that will be displayed in the text area.'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`text`**:** 这是一个将在文本区域中显示的`string`。'
- en: '`textFormat`**:** This `enumeration` is the type of text field that will be
    provided with this `TextArea`. It can be `TextEdit.AutoText`, which will automatically
    determine whether the text will be either plain or rich text; `TextEdit.PlainText`,
    where the text will be plain; and `TextEdit.RichText`, which will make rich text.'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '`textFormat`**:** 这个`enumeration`是`TextArea`将提供的文本字段类型。它可以是指定文本将自动确定是纯文本还是富文本的`TextEdit.AutoText`；`TextEdit.PlainText`，其中文本将是纯文本；以及`TextEdit.RichText`，这将使文本成为富文本。'
- en: '`textDocument`**:** The `textDocument` property exposes the `QQuickTextDocument` class.'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: '`textDocument`**:** `textDocument`属性公开了`QQuickTextDocument`类。'
- en: '**`baseUrl`:** This specifies a base URL that will be used to resolve relative
    URLs within the text.'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '**`baseUrl`:** 这指定了一个基础URL，该URL将用于解析文本中的相对URL。'
- en: '**`hoveredLink`:** This is a link `string`. When hovered over by a mouse, you
    can see that a link has been embedded in the text.'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '**`hoveredLink`:** 这是一个链接`string`。当鼠标悬停时，可以看到文本中已嵌入链接。'
- en: '**`wrapMode`:** This `enumeration` provides a wrapping of the text related
    to the width of the text area. The available flags are as follows:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '**`wrapMode`:** 这个`enumeration`提供了与文本区域宽度相关的文本换行。可用的标志如下：'
- en: '`TextEdit.NoWrap`: Wrapping will not be available.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextEdit.NoWrap`: 将不可用换行。'
- en: '`TextEdit.WordWrap`: Text wrapping by the words (the default).'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextEdit.WordWrap`: 按单词进行文本换行（默认）。'
- en: '`TextEdit.WrapAnywhere`: Text will be wrapped anywhere.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextEdit.WrapAnywhere`: 文本将在任何地方换行。'
- en: '`TextEdit.Wrap`: If possible, the text will be wrapped by words, or if the
    line of the text is long and has no spaces, it will be wrapped at an appropriate
    point on the line.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextEdit.Wrap`: 如果可能，文本将按单词换行，或者如果文本行长且没有空格，则将在行的适当位置换行。'
- en: '`length`**:** This is an integer that returns the number of plain text characters
    in the text area.'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`length`**:** 这是一个整数，表示文本区域中纯文本字符的数量。'
- en: '`lineCount`**:** This is an integer that returns the number of lines in the
    text.'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`lineCount`**:** 这是一个整数，表示文本中的行数。'
- en: '`inputMethodComposing`**:** This can be `true` or `false`. If `true`, the text
    area will have partial text input from an input method.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMethodComposing`**:** 这可以是`true`或`false`。如果为`true`，则文本区域将具有来自输入方法的文本输入。'
- en: '`inputMethodHints`**:** This `enumeration` provides the types of the input
    methods that can be implemented with text area flags such as `Qt.ImhHiddenText`
    for the passwords.'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMethodHints`**:** 这个`enumeration`提供了可以与文本区域标志（如`Qt.ImhHiddenText`用于密码）一起实现的输入方法类型。'
- en: '`readOnly`**:** This can be `true` or `false`. If `true`, the text area will
    be read-only.'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`readOnly`**:** 这可以是`true`或`false`。如果为`true`，则文本区域将是只读的。'
- en: '`selectByKeyboard`**:** This can be `true` or `false`, and if `true`, it allows
    users to select text with the keyboard (the default is `true`).'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectByKeyboard`**:** 这可以是`true`或`false`，如果为`true`，则允许用户使用键盘选择文本（默认为`true`）。'
- en: '`selectByMouse`**:** This can be `true` or `false`, and if `true`, it allows
    users to select text with the mouse (the default is `true`).'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectByMouse`**:** 这可以是`true`或`false`，如果为`true`，则允许用户使用鼠标选择文本（默认为`true`）。'
- en: '`selectedText`**:** This is a `string` of the currently selected text.'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectedText`**:** 这是一个表示当前选中文本的`string`。'
- en: '`selectionStart`**:** This is an integer for the position of the cursor before
    the first character in the selection.'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectionStart`**:** 这是一个整数，表示光标在选中文本第一个字符前的位置。'
- en: '`selectionEnd`**:** This is an integer for the position of the cursor after
    the last character in the selection.'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectionEnd`**:** 这是一个整数，表示光标在选中文本最后一个字符后的位置。'
- en: '`canPaste`**:** This can be `true` or `false`, and returns `true` if the content
    in the clipboard can be pasted into the text area.'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`canPaste`**:** 这可以是`true`或`false`，如果剪贴板中的内容可以粘贴到文本区域中，则返回`true`。'
- en: '`canRedo`**:** This can be `true` or `false`, and returns `true` if the text
    was edited and can be redone.'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`canRedo`**:** 这可以是`true`或`false`，如果文本已被编辑并且可以重做，则返回`true`。'
- en: '`canUndo`**:** This can be `true` or `false`, and returns `true` if the text
    was edited and can be undone.'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`canUndo`**:** 这可以是`true`或`false`，如果文本已被编辑并且可以撤销，则返回`true`。'
- en: '`cursorPosition`**:** This is an integer for the position of the cursor in
    the text area.'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`cursorPosition`**:** 这是一个整数，表示光标在文本区域中的位置。'
- en: '`cursorRectangle`**:** This is the rectangle where the text cursor is rendered
    within this text area.'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`cursorRectangle`**:** 这是文本光标在文本区域中渲染的矩形。'
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. If `true`, the text
    area will be focused when pressed.'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnPress`**:** 这可以是 `true` 或 `false`。如果为 `true`，则在按下时文本区域将被聚焦。'
- en: '`backgroundVisible`**:** This can be `true` or `false`, and if `true`, the
    background is filled (the default is `true`).'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`backgroundVisible`**:** 这可以是 `true` 或 `false`，如果为 `true`，则背景被填充（默认为 `true`）。'
- en: '`tabChangesFocus`**:** This can be `true` or `false`. This property determines
    whether tab changes focus, or is accepted as input (the default is `false`).'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`tabChangesFocus`**:** 这可以是 `true` 或 `false`。此属性确定制表符是否改变焦点，或作为输入接受（默认为 `false`）。'
- en: '`effectiveHorizontalAlignment`**:** This `enumeration` is for the effective
    horizontal alignment of the text.'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`effectiveHorizontalAlignment`**:** 这个 `枚举` 是文本的有效水平对齐。'
- en: '`horizontalAlignment`**:** This `enumeration` sets the alignment of the text,
    such as `TextEdit.AlignHCenter`.'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`horizontalAlignment`**:** 这个 `枚举` 设置文本的对齐方式，例如 `TextEdit.AlignHCenter`。'
- en: '`verticalAlignment`**:** This `enumeration` sets the alignment of the text,
    such as `TextEdit.AlignTop`, `TextEdit.AlignVCenter` (the default), or `TextEdit.AlignBottom`.'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`verticalAlignment`**:** 这个 `枚举` 设置文本的对齐方式，例如 `TextEdit.AlignTop`、`TextEdit.AlignVCenter`（默认）或
    `TextEdit.AlignBottom`。'
- en: '`textMargin`**:** This defines the margins (in pixels) around the text in the
    text area.'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`textMargin`**:** 这定义了文本区域周围（以像素为单位）的边距。'
- en: '`textColor`**:** This is the color of the text in the area.'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`textColor`**:** 这是区域中文本的颜色。'
- en: '`font`**:** This is the font of the text.'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`font`**:** 这是文本的字体。'
- en: '`menu`**:** This component is the edit menu for working with text selection.'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`menu`**:** 这个组件是用于处理文本选择的编辑菜单。'
- en: '`style`**:** This component provides styling for the text area, such as the
    `TextAreaStyle` type. The properties in `TextAreaStyle` are `backgroundColor`,
    `control`, `renderType`, `font`, `selectedTextColor`, `selectionColor`, `textColor`,
    and `textMargin`.'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 这个组件为文本区域提供样式，例如 `TextAreaStyle` 类型。`TextAreaStyle` 中的属性有 `backgroundColor`、`control`、`renderType`、`font`、`selectedTextColor`、`selectionColor`、`textColor`
    和 `textMargin`。'
- en: 'The following signals are available:'
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 以下信号可用：
- en: '`editingFinished()`: This will be emitted when the area loses focus. The handler
    is `onEditingFinished`.'
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: '`editingFinished()`: 当区域失去焦点时，这将发出。处理程序是 `onEditingFinished`。'
- en: '`linkActivated(string link)`: This will be emitted when the user clicks on
    a link in the text. The handler is `onLinkActivated`.'
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkActivated(string link)`: 当用户在文本中点击链接时，这将发出。处理程序是 `onLinkActivated`。'
- en: '`linkHovered(string link)`: This will be emitted when a link is hovered over
    in the text. The handler is `onLinkHovered`.'
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: '`linkHovered(string link)`: 当文本中的链接被悬停时，这将发出。处理程序是 `onLinkHovered`。'
- en: 'The following are its methods:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是其方法：
- en: '`append(string text)`: This adds the `string` as a new line at the end of the
    text.'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: '`append(string text)`: 这将在文本末尾添加一个新的 `string` 行。'
- en: '`copy()`: This copies the selected text to the clipboard.'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy()`: 这将选定的文本复制到剪贴板。'
- en: '`cut()`: This cuts the selected text to the clipboard.'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '`cut()`: 这将选定的文本剪切到剪贴板。'
- en: '`paste()`: This inserts the selected text from the clipboard to the text area.'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '`paste()`: 这将剪贴板中选定的文本插入到文本区域。'
- en: '`deselect()`: This removes the text selection.'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '`deselect()`: 这将移除文本选择。'
- en: '`getFormattedText(int start, int end)`: This returns the text with formatting
    between the start and end positions.'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: '`getFormattedText(int start, int end)`: 这将在起始和结束位置之间返回带有格式的文本。'
- en: '`getText(int start, int end)`: This returns the text without formatting between
    the start and end positions.'
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: '`getText(int start, int end)`: 这将在起始和结束位置之间返回未格式化的文本。'
- en: '`insert(int position, string text)`: This inserts the text to the position
    in the text area.'
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: '`insert(int position, string text)`: 这将在文本区域的指定位置插入文本。'
- en: '`isRightToLeft(int start, int end)`: This is `true` if the direction of the
    text between the start/end positions is right to left.'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: '`isRightToLeft(int start, int end)`: 如果起始/结束位置之间的文本方向是从右到左，则为 `true`。'
- en: '`moveCursorSelection(int position, mode=TextEdit.SelectCharacters)`: This moves
    the cursor to the specified position and updates the mode parameter.'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveCursorSelection(int position, mode=TextEdit.SelectCharacters)`: 这将光标移动到指定的位置并更新模式参数。'
- en: '`positionToRectangle(position)`: This returns the rectangle at the position
    in the text.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '`positionToRectangle(position)`: 这将在文本的位置返回矩形。'
- en: '`undo()`: If available, this undoes the last edit action of the text.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '`undo()`: 如果可用，这将撤销文本的最后一个编辑操作。'
- en: '`redo()`: If available, this redoes the last edit action of the text.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '`redo()`: 如果可用，这将重做文本的最后一个编辑操作。'
- en: '`remove(int start, int end)`: This removes the text between the start/end positions.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove(int start, int end)`: 这将删除起始/结束位置之间的文本。'
- en: '`select(int start, int end)`: This selects the text between the start/end positions.'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '`select(int start, int end)`: 这将选择从起始/结束位置之间的文本。'
- en: '`selectAll()`: This selects all the text of the text area.'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectAll()`: 这将选择文本区域中的所有文本。'
- en: '`selectWord()`: This selects the word that is closest to the current cursor
    position.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectWord()`: 这将选择距离当前光标位置最近的单词。'
- en: TextField
  id: totrans-409
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TextField
- en: 'This type provides a single line of editable plain text. The `TextField` type
    requires the following `import` statement:'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型提供一行可编辑的纯文本。`TextField`类型需要以下`import`语句：
- en: '[PRE47]'
  id: totrans-411
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'It has the following properties:'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: 它具有以下属性：
- en: '`text`**:** This is a `string` that will be displayed in the text field.'
  id: totrans-413
  prefs: []
  type: TYPE_NORMAL
  zh: '`text`**:** 这是在文本字段中显示的`string`。'
- en: '`displayText`**:** This is a `string` of text that''s displayed in the text
    field.'
  id: totrans-414
  prefs: []
  type: TYPE_NORMAL
  zh: '`displayText`**:** 这是在文本字段中显示的文本的`string`。'
- en: '`echoMode`**:** This `enumeration` sets how text will be displayed. The available
    modes are as follows:'
  id: totrans-415
  prefs: []
  type: TYPE_NORMAL
  zh: '`echoMode`**:** 这个`enumeration`设置文本的显示方式。可用的模式如下：'
- en: '`TextInput.Normal`: This is for normal text.'
  id: totrans-416
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextInput.Normal`: 这用于普通文本。'
- en: '`TextInput.Password`: This is for password text.'
  id: totrans-417
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextInput.Password`: 这用于密码文本。'
- en: '`TextInput.NoEcho`: This is for text that is not displayed.'
  id: totrans-418
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextInput.NoEcho`: 这用于不显示的文本。'
- en: '`TextInput.PasswordEchoOnEdit`: This is for text that will be displayed as
    normal while editing, otherwise, the characters will be shown as asterisks.'
  id: totrans-419
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`TextInput.PasswordEchoOnEdit`: 这用于在编辑时显示为普通文本，否则字符将以星号形式显示。'
- en: '`placeholderText`**:** This `string` is the text that will be displayed when
    text field is empty.'
  id: totrans-420
  prefs: []
  type: TYPE_NORMAL
  zh: '`placeholderText`**:** 这是一个`string`，当文本字段为空时将显示此文本。'
- en: '`length`**:** This is an integer that returns the number of plain text characters
    in the text field.'
  id: totrans-421
  prefs: []
  type: TYPE_NORMAL
  zh: '`length`**:** 这是一个整数，返回文本字段中纯文本字符的数量。'
- en: '`maximumLength`**:** This is an integer that is the maximum length of the text
    in the text field.'
  id: totrans-422
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumLength`**:** 这是一个整数，表示文本字段中文本的最大长度。'
- en: '`inputMask`**:** This is a `string` of an input mask on the `TextField`, and
    restricts the allowable text inputs.'
  id: totrans-423
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMask`**:** 这是一个`string`，表示`TextField`上的输入掩码，并限制允许的文本输入。'
- en: '`inputMethodComposing`**:** This can be `true` or `false`. The text field will
    have partial text input from an input method.'
  id: totrans-424
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMethodComposing`**:** 这可以是`true`或`false`。文本字段将具有来自输入方法的文本输入。'
- en: '`inputMethodHints`**:** This `enumeration` provides the types of input methods
    that can be implemented with the text field, with flags such as `Qt.ImhHiddenText`
    for the passwords.'
  id: totrans-425
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMethodHints`**:** 这个`enumeration`提供了可以使用文本字段实现的输入方法类型，例如密码的`Qt.ImhHiddenText`标志。'
- en: '`readOnly`**:** This can be `true` or `false`. If `true`, the text field will
    be read-only.'
  id: totrans-426
  prefs: []
  type: TYPE_NORMAL
  zh: '`readOnly`**:** 这可以是`true`或`false`。如果为`true`，则文本字段将是只读的。'
- en: '`selectByMouse`**:** This can be `true` or `false`, and if `true`, it allows
    us to select text with the mouse (the default is `true`).'
  id: totrans-427
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectByMouse`**:** 这可以是`true`或`false`，如果为`true`，则允许我们使用鼠标选择文本（默认为`true`）。'
- en: '`selectedText`**:** This is a `string` of the currently selected text.'
  id: totrans-428
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectedText`**:** 这是当前选中文本的`string`。'
- en: '`selectionStart`**:** This is the integer for the position of the cursor before
    the first character in the selection.'
  id: totrans-429
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectionStart`**:** 这是选中区域中第一个字符之前的光标位置的整数。'
- en: '`selectionEnd`**:** This is the integer for the position of the cursor after
    the last character in the selection.'
  id: totrans-430
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectionEnd`**:** 这是选中区域中最后一个字符之后的光标位置的整数。'
- en: '`canPaste`**:** This can be `true` or `false`, and returns `true` if the content
    on the clipboard can be pasted into the text field.'
  id: totrans-431
  prefs: []
  type: TYPE_NORMAL
  zh: '`canPaste`**:** 这可以是`true`或`false`，如果剪贴板上的内容可以粘贴到文本字段中，则返回`true`。'
- en: '`canRedo`**:** This can be `true` or `false`, and returns `true` if the text
    was edited and can be redone.'
  id: totrans-432
  prefs: []
  type: TYPE_NORMAL
  zh: '`canRedo`**:** 这可以是`true`或`false`，如果文本已被编辑且可以重做，则返回`true`。'
- en: '`canUndo`**:** This can be `true` or `false`, and returns `true` if the text
    was edited and can be undone.'
  id: totrans-433
  prefs: []
  type: TYPE_NORMAL
  zh: '`canUndo`**:** 这可以是`true`或`false`，如果文本已被编辑且可以撤销，则返回`true`。'
- en: '`cursorPosition`**:** This is an integer of the position of the cursor in the
    text field.'
  id: totrans-434
  prefs: []
  type: TYPE_NORMAL
  zh: '`cursorPosition`**:** 这是文本字段中光标位置的整数。'
- en: '`cursorRectangle`**:** This is the rectangle where the text cursor is rendered
    within the text field.'
  id: totrans-435
  prefs: []
  type: TYPE_NORMAL
  zh: '`cursorRectangle`**:** 这是文本字段中渲染文本光标的矩形。'
- en: '`activeFocusOnPress`**:** This can be `true` or `false`, and if `true`, the
    text field will be focused when pressed.'
  id: totrans-436
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnPress`**:** 这可以是`true`或`false`，如果为`true`，则在按下时文本字段将被聚焦。'
- en: '`acceptableInput`**:** This can be `true` or `false`, and returns `true` if
    the text is acceptable.'
  id: totrans-437
  prefs: []
  type: TYPE_NORMAL
  zh: '`acceptableInput`**:** 这可以是`true`或`false`，如果文本是可接受的则返回`true`。'
- en: '`hovered`**:** This can be `true` or `false`, depending on whether the text
    field is hovered over or not.'
  id: totrans-438
  prefs: []
  type: TYPE_NORMAL
  zh: '`hovered`**:** 这可以是`true`或`false`，取决于文本字段是否被悬停。'
- en: '`effectiveHorizontalAlignment`**:** This `enumeration` is the effective horizontal
    alignment of the text.'
  id: totrans-439
  prefs: []
  type: TYPE_NORMAL
  zh: '`effectiveHorizontalAlignment`**:** 此`枚举`是文本的有效水平对齐方式。'
- en: '`horizontalAlignment`**:** This `enumeration` sets the alignment of the text,
    such as `TextInput.AlignHCenter`.'
  id: totrans-440
  prefs: []
  type: TYPE_NORMAL
  zh: '`horizontalAlignment`**:** 此`枚举`设置文本的对齐方式，例如`TextInput.AlignHCenter`。'
- en: '`verticalAlignment`**:** This `enumeration` sets the alignment of the text,
    such as `TextInput.AlignTop`, `TextInput.AlignVCenter` (the default), and `TextInput.AlignBottom`.'
  id: totrans-441
  prefs: []
  type: TYPE_NORMAL
  zh: '`verticalAlignment`**:** 此`枚举`设置文本的对齐方式，例如`TextInput.AlignTop`、`TextInput.AlignVCenter`（默认值）和`TextInput.AlignBottom`。'
- en: '`textColor`**:** This is the color of the text in the area.'
  id: totrans-442
  prefs: []
  type: TYPE_NORMAL
  zh: '`textColor`**:** 这是文本区域中的文本颜色。'
- en: '`font`**:** This is the font of the text.'
  id: totrans-443
  prefs: []
  type: TYPE_NORMAL
  zh: '`font`**:** 这是文本的字体。'
- en: '`menu`**:** This component is the edit menu for working with the text selection.'
  id: totrans-444
  prefs: []
  type: TYPE_NORMAL
  zh: '`menu`**:** 这是用于处理文本选择的编辑菜单组件。'
- en: '`validator`**:** This sets a validator on the `TextField`. The supported validators
    are `IntValidator`, `DoubleValidator`, and `RegExpValidator`.'
  id: totrans-445
  prefs: []
  type: TYPE_NORMAL
  zh: '`validator`**:** 这会在`TextField`上设置验证器。支持的验证器有`IntValidator`、`DoubleValidator`和`RegExpValidator`。'
- en: '`style`**:** This component provides styling for the text field, such as the
    `TextFieldStyle` type. In this type, the `background`, `control`, `passwordCharacter`,
    `placeholderTextColor`, `renderType`, `font`, `selectedTextColor`, `selectionColor`,
    and `textColor` properties are available.'
  id: totrans-446
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件为文本字段提供样式，例如`TextFieldStyle`类型。在此类型中，有`background`、`control`、`passwordCharacter`、`placeholderTextColor`、`renderType`、`font`、`selectedTextColor`、`selectionColor`和`textColor`属性。'
- en: 'These signals are available:'
  id: totrans-447
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的信号有：
- en: '`editingFinished()`: This is emitted when the field loses focus. The handler
    is `onEditingFinished`.'
  id: totrans-448
  prefs: []
  type: TYPE_NORMAL
  zh: '`editingFinished()`: 当字段失去焦点时发出此信号。处理程序是`onEditingFinished`。'
- en: '`accepted()`: This is emitted when the *return* or *Enter* key is pressed.'
  id: totrans-449
  prefs: []
  type: TYPE_NORMAL
  zh: '`accepted()`: 当按下*回车*或*Enter*键时发出此信号。'
- en: 'The following methods are available:'
  id: totrans-450
  prefs: []
  type: TYPE_NORMAL
  zh: 以下方法可用：
- en: '`copy()`: This copies the selected text to the clipboard.'
  id: totrans-451
  prefs: []
  type: TYPE_NORMAL
  zh: '`copy()`: 这会将选定的文本复制到剪贴板。'
- en: '`cut()`: This cuts the selected text to the clipboard.'
  id: totrans-452
  prefs: []
  type: TYPE_NORMAL
  zh: '`cut()`: 这会将选定的文本剪切到剪贴板。'
- en: '`paste()`: This inserts the selected text from the clipboard to the text field.'
  id: totrans-453
  prefs: []
  type: TYPE_NORMAL
  zh: '`paste()`: 这会将剪贴板中的选定文本插入到文本字段中。'
- en: '`deselect()`: This removes the text selection.'
  id: totrans-454
  prefs: []
  type: TYPE_NORMAL
  zh: '`deselect()`: 这会移除文本选择。'
- en: '`getText(int start, int end)`: This returns the text without formatting between
    the start and end positions.'
  id: totrans-455
  prefs: []
  type: TYPE_NORMAL
  zh: '`getText(int start, int end)`: 这返回起始和结束位置之间的无格式文本。'
- en: '`insert(int position, string text)`: This inserts the text in the specified
    position in the text field.'
  id: totrans-456
  prefs: []
  type: TYPE_NORMAL
  zh: '`insert(int position, string text)`: 这会在文本字段中指定的位置插入文本。'
- en: '`isRightToLeft(int start, int end)`: This is `true` if the direction of the
    text between the start/end positions is right to left.'
  id: totrans-457
  prefs: []
  type: TYPE_NORMAL
  zh: '`isRightToLeft(int start, int end)`: 如果起始/结束位置之间的文本方向是从右到左，则返回`true`。'
- en: '`undo()`: If this is available, it undoes the last edit action of the text.'
  id: totrans-458
  prefs: []
  type: TYPE_NORMAL
  zh: '`undo()`: 如果可用，则撤销文本的最后一个编辑操作。'
- en: '`redo()`: If this is available, it redoes the last edit action of the text.'
  id: totrans-459
  prefs: []
  type: TYPE_NORMAL
  zh: '`redo()`: 如果可用，则重做文本的最后一个编辑操作。'
- en: '`remove(int start, int end)`: This removes the text between the start/end positions.'
  id: totrans-460
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove(int start, int end)`: 这会删除起始/结束位置之间的文本。'
- en: '`select(int start, int end)`: This selects the text between the start/end positions.'
  id: totrans-461
  prefs: []
  type: TYPE_NORMAL
  zh: '`select(int start, int end)`: 这会选中起始/结束位置之间的文本。'
- en: '`selectAll()`: This selects all the text in the text field.'
  id: totrans-462
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectAll()`: 这会选中文本字段中的所有文本。'
- en: '`selectWord()`: This selects the word that is closest to the current cursor
    position.'
  id: totrans-463
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectWord()`: 这会选中距离当前光标位置最近的单词。'
- en: Navigation
  id: totrans-464
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 导航
- en: 'The `QtQuick.Controls` module has an instrument for constructing navigation
    tools inside GUI applications. The `import` statement for these types is as follows:'
  id: totrans-465
  prefs: []
  type: TYPE_NORMAL
  zh: '`QtQuick.Controls`模块提供了一个用于在GUI应用程序内部构建导航工具的仪器。这些类型的`import`语句如下：'
- en: '[PRE48]'
  id: totrans-466
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: It can be implemented with the types that are mentioned in the following sections.
  id: totrans-467
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以使用以下章节中提到的类型实现。
- en: ScrollView
  id: totrans-468
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ScrollView
- en: 'This type provides scrolling within another item. It allows us to scroll the
    item if its height and width are more than the main window, and it adds scroll
    bars. The `ScrollView` type has the following properties:'
  id: totrans-469
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型提供在另一个项目内的滚动。如果项目的高度和宽度超过主窗口，它允许我们滚动该项目，并添加滚动条。`ScrollView`类型具有以下属性：
- en: '`contentItem`**:** This is the content item for this scroll.'
  id: totrans-470
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentItem`**:** 这是此滚动的项目。'
- en: '`flickableItem`**:** This is the flickable item for this scroll.'
  id: totrans-471
  prefs: []
  type: TYPE_NORMAL
  zh: '`flickableItem`**:** 这是此滚动视图的可轻扫项目。'
- en: '`frameVisible`**:** This can be `true` or `false`. When `true`, the scroll
    view will render the frame around its content.'
  id: totrans-472
  prefs: []
  type: TYPE_NORMAL
  zh: '`frameVisible`**:** 这可以是 `true` 或 `false`。当为 `true` 时，滚动视图将渲染其内容周围的框架。'
- en: '`highlightOnFocus`**:** This can be `true` or `false`. If `true`, it will highlight
    around the frame when it has input focus.'
  id: totrans-473
  prefs: []
  type: TYPE_NORMAL
  zh: '`highlightOnFocus`**:** 这可以是 `true` 或 `false`。如果为 `true`，则当它具有输入焦点时，将在框架周围突出显示。'
- en: '`horizontalScrollBarPolicy`**:** This `enumeration` is the policy for the horizontal
    scroll bar, such as `Qt.ScrollBarAsNeeded`, `Qt.ScrollBarAlwaysOff`, and `Qt.ScrollBarAlwaysOn`.'
  id: totrans-474
  prefs: []
  type: TYPE_NORMAL
  zh: '`horizontalScrollBarPolicy`**:** 这是一个用于水平滚动条的 `enumeration`，例如 `Qt.ScrollBarAsNeeded`、`Qt.ScrollBarAlwaysOff`
    和 `Qt.ScrollBarAlwaysOn`。'
- en: '`verticalScrollBarPolicy`**:** This `enumeration` is the policy for the vertical
    scroll bar with the same modes as horizontal.'
  id: totrans-475
  prefs: []
  type: TYPE_NORMAL
  zh: '`verticalScrollBarPolicy`**:** 这是一个与水平滚动条相同模式的 `enumeration`。'
- en: '`viewport`**:** This is the size of the viewport, and tells us how much of
    the content area is visible relative to the window.'
  id: totrans-476
  prefs: []
  type: TYPE_NORMAL
  zh: '`viewport`**:** 这是视口的大小，并告诉我们内容区域相对于窗口的可见程度。'
- en: '`style`**:** This component provides styling for the scroll, such as the `ScrollViewStyle`
    type. In the type, the `control`, `corner`, `decrementControl`, `frame`, `handle`,
    `handleOverlap`, `incrementControl`, `minimumHandleLength`, `scrollBarBackground`,
    `scrollToClickedPosition`, and `transientScrollBars` properties are available.'
  id: totrans-477
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件为滚动提供样式，例如 `ScrollViewStyle` 类型。在此类型中，有 `control`、`corner`、`decrementControl`、`frame`、`handle`、`handleOverlap`、`incrementControl`、`minimumHandleLength`、`scrollBarBackground`、`scrollToClickedPosition`
    和 `transientScrollBars` 属性。'
- en: SplitView
  id: totrans-478
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SplitView
- en: 'This is a QML type for a draggable splitter for horizontal or vertical layouts.
    This type has the following properties:'
  id: totrans-479
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个用于水平或垂直布局的可拖动分隔符的 QML 类型。此类型具有以下属性：
- en: '`handleDelegate`**:** This component is the delegate between each child item.
    It has properties such as `styleData.index`, `styleData.hovered`, `styleData.pressed`,
    and `styleData.resizing`.'
  id: totrans-480
  prefs: []
  type: TYPE_NORMAL
  zh: '`handleDelegate`**:** 这是每个子项目之间的委托组件。它具有 `styleData.index`、`styleData.hovered`、`styleData.pressed`
    和 `styleData.resizing` 等属性。'
- en: '`orientation`**:** This is an integer that can have a `Qt.Horizontal` (the
    default) or `Qt.Vertical` orientation of the scroll view.'
  id: totrans-481
  prefs: []
  type: TYPE_NORMAL
  zh: '`orientation`**:** 这是一个整数，可以具有 `Qt.Horizontal`（默认）或 `Qt.Vertical` 的滚动视图方向。'
- en: '`resizing`**:** This can be `true` or `false`. It will return `true` if an
    item of the scroll view is resized by dragging the splitter handles onto it.'
  id: totrans-482
  prefs: []
  type: TYPE_NORMAL
  zh: '`resizing`**:** 这可以是 `true` 或 `false`。如果通过将分隔符手柄拖动到滚动视图的项目上对其进行调整大小，它将返回 `true`。'
- en: 'It has the following methods:'
  id: totrans-483
  prefs: []
  type: TYPE_NORMAL
  zh: 它有以下方法：
- en: '`addItem(Item item)`: This adds items to the end of the scroll view.'
  id: totrans-484
  prefs: []
  type: TYPE_NORMAL
  zh: '`addItem(Item item)`: 这会将项目添加到滚动视图的末尾。'
- en: '`removeItem(Item item)`: This removes items from the scroll view.'
  id: totrans-485
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeItem(Item item)`: 这将从滚动视图中删除项目。'
- en: StackView
  id: totrans-486
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: StackView
- en: 'This type constructs a stack-based navigation model. It has the following properties:'
  id: totrans-487
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型构建了一个基于堆栈的导航模型。它具有以下属性：
- en: '`busy`**:** This can be `true` or `false`. It will return `true` if the transition
    is running.'
  id: totrans-488
  prefs: []
  type: TYPE_NORMAL
  zh: '`busy`**:** 这可以是 `true` 或 `false`。如果过渡正在运行，它将返回 `true`。'
- en: '`currentItem`**:** This gets the top-most item in the stack.'
  id: totrans-489
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentItem`**:** 这获取堆栈中最顶部的项目。'
- en: '`delegate`**:** The `StackViewDelegate` is a transition that will be used for
    pushing and popping items with this stack view.'
  id: totrans-490
  prefs: []
  type: TYPE_NORMAL
  zh: '`delegate`**:** `StackViewDelegate` 是用于使用此堆栈视图推送和弹出项目的过渡。'
- en: '`depth`**:** This is an integer of the number of items in the stack.'
  id: totrans-491
  prefs: []
  type: TYPE_NORMAL
  zh: '`depth`**:** 这是一个表示堆栈中项目数量的整数。'
- en: '`initialItem`**:** This is the first item that will be shown in the stack.'
  id: totrans-492
  prefs: []
  type: TYPE_NORMAL
  zh: '`initialItem`**:** 这是将显示在堆栈中的第一个项目。'
- en: 'It has the following methods:'
  id: totrans-493
  prefs: []
  type: TYPE_NORMAL
  zh: 它有以下方法：
- en: '`clear()`: This removes all the items from the stack.'
  id: totrans-494
  prefs: []
  type: TYPE_NORMAL
  zh: '`clear()`: 这将从堆栈中删除所有项目。'
- en: '`completeTransition()`: This immediately completes the running transition.'
  id: totrans-495
  prefs: []
  type: TYPE_NORMAL
  zh: '`completeTransition()`: 这立即完成正在运行的过渡。'
- en: '`find(function, bool onlySearchLoadedItems=false)`: This finds the item inside
    this stack.'
  id: totrans-496
  prefs: []
  type: TYPE_NORMAL
  zh: '`find(function, bool onlySearchLoadedItems=false)`: 这在此堆栈中查找项目。'
- en: '`get(int index, bool dontLoad=false)`: This returns the item of the stack that
    has the specified index.'
  id: totrans-497
  prefs: []
  type: TYPE_NORMAL
  zh: '`get(int index, bool dontLoad=false)`: 这将返回具有指定索引的堆栈项目。'
- en: '`pop(Item item=undefined)`: This pops items off the stack.'
  id: totrans-498
  prefs: []
  type: TYPE_NORMAL
  zh: '`pop(Item item=undefined)`: 这将从堆栈中弹出项目。'
- en: '`push(Item item)`: This pushes items to the stack.'
  id: totrans-499
  prefs: []
  type: TYPE_NORMAL
  zh: '`push(Item item)`: 这会将项目推送到堆栈。'
- en: TabView
  id: totrans-500
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TabView
- en: 'This type allows you to select one of the multiple stacked items and imply
    the tab-based navigation model. It has the following properties:'
  id: totrans-501
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型允许您从多个堆叠项中选择一个，并暗示基于标签的导航模型。它具有以下属性：
- en: '`contentItem`**:** This is the content item of the tab view.'
  id: totrans-502
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentItem`**:** 这是标签视图的内容项。'
- en: '`count`**:** This integer is the count of the current tab.'
  id: totrans-503
  prefs: []
  type: TYPE_NORMAL
  zh: '`count`**:** 这个整数表示当前标签的数量。'
- en: '`currentIndex`**:** This integer is the index of the current tab.'
  id: totrans-504
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentIndex`**:** 这个整数表示当前标签的索引。'
- en: '`frameVisible`**:** This can be `true` or `false`. If it''s `true`, the tab
    frame around the content will be visible.'
  id: totrans-505
  prefs: []
  type: TYPE_NORMAL
  zh: '`frameVisible`**:** 这可以是`true`或`false`。如果是`true`，则内容周围的标签框架将可见。'
- en: '`tabPosition`**:** This integer is the position of the tab controls, such as
    `Qt.TopEdge` (the default) or `Qt.BottomEdge`.'
  id: totrans-506
  prefs: []
  type: TYPE_NORMAL
  zh: '`tabPosition`**:** 这个整数表示标签控件的位置，例如`Qt.TopEdge`（默认值）或`Qt.BottomEdge`。'
- en: '`tabsVisible`**:** This can be `true` or `false`. If it''s `true`, the tab
    bar will be visible.'
  id: totrans-507
  prefs: []
  type: TYPE_NORMAL
  zh: '`tabsVisible`**:** 这可以是`true`或`false`。如果是`true`，则标签栏将可见。'
- en: '`style`**:** This component provides styling for the tab view, such as the
    `TabViewStyle` type. This type provides the `control`, `frame`, `frameOverlap`,
    `leftCorner`, `rightCorner`, `tab`, `tabBar`, `tabOverlap`, `tabsAlignment`, and
    `tabsMovable` properties.'
  id: totrans-508
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 该组件为标签视图提供样式，例如`TabViewStyle`类型。此类型提供了`control`、`frame`、`frameOverlap`、`leftCorner`、`rightCorner`、`tab`、`tabBar`、`tabOverlap`、`tabsAlignment`和`tabsMovable`属性。'
- en: 'It has the following methods:'
  id: totrans-509
  prefs: []
  type: TYPE_NORMAL
  zh: 它有以下方法：
- en: '`addTab(string title, Component component)`: This adds a new tab.'
  id: totrans-510
  prefs: []
  type: TYPE_NORMAL
  zh: '`addTab(string title, Component component)`: 这将添加一个新的标签。'
- en: '`getTab(int index)`: This returns the tab by its index.'
  id: totrans-511
  prefs: []
  type: TYPE_NORMAL
  zh: '`getTab(int index)`: 这通过其索引返回标签。'
- en: '`insertTab(int index, string title, Component component)`: This inserts a new
    tab at the given index.'
  id: totrans-512
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertTab(int index, string title, Component component)`: 这将在指定的索引处插入一个新的标签。'
- en: '`moveTab(int from, int to)`: This moves the tab from one index to another.'
  id: totrans-513
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveTab(int from, int to)`: 这将标签从一个索引移动到另一个索引。'
- en: '`removeTab(int index)`: This removes and destroys the tab at the index provided.'
  id: totrans-514
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeTab(int index)`: 这将移除并销毁在提供的索引处的标签。'
- en: TableView
  id: totrans-515
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: TableView
- en: 'This type implements a table in the GUI application. In addition to the `ListView`,
    scroll bars, header sections, and styling are available. This type has the following
    properties:'
  id: totrans-516
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型在GUI应用程序中实现了一个表格。除了`ListView`、滚动条、标题部分和样式外，还有其他功能。此类型具有以下属性：
- en: '`columnCount`**:** This integer is the number of columns in the table.'
  id: totrans-517
  prefs: []
  type: TYPE_NORMAL
  zh: '`columnCount`**:** 这个整数表示表格中的列数。'
- en: '`rowCount`: This integer is the number of rows in the table.'
  id: totrans-518
  prefs: []
  type: TYPE_NORMAL
  zh: '`rowCount`: 这个整数表示表格中的行数。'
- en: '`contentFooter`**:** This component is the content of the footer of the table.'
  id: totrans-519
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentFooter`**:** 该组件是表格页脚的内容。'
- en: '`contentHeader`**:** This component is the content of the header of the table.'
  id: totrans-520
  prefs: []
  type: TYPE_NORMAL
  zh: '`contentHeader`**:** 这是表格标题的内容组件。'
- en: '`currentRow`**:** This integer is the current index of the row in the table.'
  id: totrans-521
  prefs: []
  type: TYPE_NORMAL
  zh: '`currentRow`**:** 这个整数表示表格中行的当前索引。'
- en: '`alternatingRowColors`**:** This can be `true` or `false`. If it''s `true`
    (the default), the colors of the rows will alternate.'
  id: totrans-522
  prefs: []
  type: TYPE_NORMAL
  zh: '`alternatingRowColors`**:** 这可以是`true`或`false`。如果是`true`（默认值），则行的颜色将交替。'
- en: '`backgroundVisible`**:** This can be `true` or `false`. If it''s `true` (the
    default), the background will be filled.'
  id: totrans-523
  prefs: []
  type: TYPE_NORMAL
  zh: '`backgroundVisible`**:** 这可以是`true`或`false`。如果是`true`（默认值），则背景将被填充。'
- en: '`frameVisible`**:** This can be `true` or `false`. If it''s `true` (the default),
    it will render a frame around its content.'
  id: totrans-524
  prefs: []
  type: TYPE_NORMAL
  zh: '`frameVisible`**:** 这可以是`true`或`false`。如果是`true`（默认值），它将在其内容周围渲染一个框架。'
- en: '`headerVisible`**:** This can be `true` or `false`. If it''s `true` (the default),
    the header will be visible.'
  id: totrans-525
  prefs: []
  type: TYPE_NORMAL
  zh: '`headerVisible`**:** 这可以是`true`或`false`。如果是`true`（默认值），则标题将可见。'
- en: '`headerDelegate`**:** This component defines a delegate to draw a header.'
  id: totrans-526
  prefs: []
  type: TYPE_NORMAL
  zh: '`headerDelegate`**:** 该组件定义了一个用于绘制标题的委托。'
- en: '`itemDelegate`**:** This component defines a delegate to draw a cell.'
  id: totrans-527
  prefs: []
  type: TYPE_NORMAL
  zh: '`itemDelegate`**:** 该组件定义了一个用于绘制单元格的委托。'
- en: '`rowDelegate`**:** This component defines a delegate to draw a row.'
  id: totrans-528
  prefs: []
  type: TYPE_NORMAL
  zh: '`rowDelegate`**:** 该组件定义了一个用于绘制行的委托。'
- en: '`model`**:** This is the model for the table.'
  id: totrans-529
  prefs: []
  type: TYPE_NORMAL
  zh: '`model`**:** 这是表格的模型。'
- en: '`section.property`**:** This is a `string` for the name of the property and
    is the basis of each section.'
  id: totrans-530
  prefs: []
  type: TYPE_NORMAL
  zh: '`section.property`**:** 这是一个表示属性名称的`string`，是每个部分的基础。'
- en: '`section.criteria`**:** This `enumeration` is the criteria for forming each
    section, such as `ViewSection.FullString` (the default) or `ViewSection.FirstCharacter`.'
  id: totrans-531
  prefs: []
  type: TYPE_NORMAL
  zh: '`section.criteria`**:** 这是一个枚举，表示形成每个部分的准则，例如`ViewSection.FullString`（默认值）或`ViewSection.FirstCharacter`。'
- en: '`section.delegate`**:** This component is the delegate component for each section.'
  id: totrans-532
  prefs: []
  type: TYPE_NORMAL
  zh: '`section.delegate`**:** 这是每个部分的委托组件。'
- en: '`section.labelPositioning`**:** This `enumeration` is the positioning of the
    labels for the sections, such as `ViewSection.InlineLabels` (the default), `ViewSection.CurrentLabelAtStart`,
    and `ViewSection.NextLabelAtEnd`.'
  id: totrans-533
  prefs: []
  type: TYPE_NORMAL
  zh: '`section.labelPositioning`**:** 这是一个枚举，用于设置节标签的位置，例如`ViewSection.InlineLabels`（默认）、`ViewSection.CurrentLabelAtStart`和`ViewSection.NextLabelAtEnd`。'
- en: '`sortIndicatorColumn`**:** This integer is the index of the current sort column.'
  id: totrans-534
  prefs: []
  type: TYPE_NORMAL
  zh: '`sortIndicatorColumn`**:** 这个整数是当前排序列的索引。'
- en: '`sortIndicatorOrder`**:** This integer sets the sorting order of the indicator,
    such as `Qt.AscendingOrder` (the default) and `Qt.DescendingOrder`.'
  id: totrans-535
  prefs: []
  type: TYPE_NORMAL
  zh: '`sortIndicatorOrder`**:** 这个整数设置指示器的排序顺序，例如`Qt.AscendingOrder`（默认）和`Qt.DescendingOrder`。'
- en: '`sortIndicatorVisible`**:** This can be `true` or `false`. If `true`, the sort
    indicator will be visible.'
  id: totrans-536
  prefs: []
  type: TYPE_NORMAL
  zh: '`sortIndicatorVisible`**:** 这可以是`true`或`false`。如果为`true`，则排序指示器将可见。'
- en: '**`selection`:** This is the current row selection of the table.'
  id: totrans-537
  prefs: []
  type: TYPE_NORMAL
  zh: '**`selection`:** 这是表格当前行选择。'
- en: '`selectionMode`**:** This integer is the mode of the user selection, such as
    `SelectionMode.NoSelection`, `SelectionMode.SingleSelection` (the default), `SelectionMode.MultiSelection`,
    `SelectionMode.ExtendedSelection`, and `SelectionMode.ContiguousSelection`.'
  id: totrans-538
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectionMode`**:** 这是一个整数，表示用户选择的模式，例如`SelectionMode.NoSelection`、`SelectionMode.SingleSelection`（默认）、`SelectionMode.MultiSelection`、`SelectionMode.ExtendedSelection`和`SelectionMode.ContiguousSelection`。'
- en: '**`style`:** This component provides styling for the table, such as the `TableViewStyle`
    type. This type provides the `activateItemOnSingleClick`, `alternateBackgroundColor`,
    `backgroundColor`, `highlightedTextColor`, and `textColor` properties.'
  id: totrans-539
  prefs: []
  type: TYPE_NORMAL
  zh: '**`style`:** 此组件为表格提供样式，例如`TableViewStyle`类型。此类型提供`activateItemOnSingleClick`、`alternateBackgroundColor`、`backgroundColor`、`highlightedTextColor`和`textColor`属性。'
- en: 'It has the following signals:'
  id: totrans-540
  prefs: []
  type: TYPE_NORMAL
  zh: 它有以下信号：
- en: '`activated(int row)`: This is emitted when an item is activated by the mouse
    or keyboard. The handler is `onActivated`.'
  id: totrans-541
  prefs: []
  type: TYPE_NORMAL
  zh: '`activated(int row)`: 当鼠标或键盘激活一个项目时发出。处理程序是`onActivated`。'
- en: '`clicked(int row)`: This is emitted when a row is clicked on. The handler is
    `onClicked`.'
  id: totrans-542
  prefs: []
  type: TYPE_NORMAL
  zh: '`clicked(int row)`: 当点击行时发出。处理程序是`onClicked`。'
- en: '`doubleClicked(int row)`: This is emitted when a row is double-clicked. The
    handler is `onDoubleClicked`.'
  id: totrans-543
  prefs: []
  type: TYPE_NORMAL
  zh: '`doubleClicked(int row)`: 当双击行时发出。处理程序是`onDoubleClicked`。'
- en: '`pressAndHold(int row)`: This is emitted when a row is pressed and held. The
    handler is `onPressAndHold`.'
  id: totrans-544
  prefs: []
  type: TYPE_NORMAL
  zh: '`pressAndHold(int row)`: 当按住行时发出。处理程序是`onPressAndHold`。'
- en: 'It has the following methods:'
  id: totrans-545
  prefs: []
  type: TYPE_NORMAL
  zh: 它有以下方法：
- en: '`addColumn(object column)`: The column will be added.'
  id: totrans-546
  prefs: []
  type: TYPE_NORMAL
  zh: '`addColumn(object column)`: 将列添加。'
- en: '`getColumn(int index)`**:** This returns the column at the specified index.'
  id: totrans-547
  prefs: []
  type: TYPE_NORMAL
  zh: '`getColumn(int index)`**:** 这返回指定索引的列。'
- en: '`insertColumn(int index, object column)`: This inserts a column into the table.'
  id: totrans-548
  prefs: []
  type: TYPE_NORMAL
  zh: '`insertColumn(int index, object column)`: 在表中插入一列。'
- en: '`moveColumn(int from, int to)`: This moves the column from the specified index
    to another index.'
  id: totrans-549
  prefs: []
  type: TYPE_NORMAL
  zh: '`moveColumn(int from, int to)`: 将列从指定的索引移动到另一个索引。'
- en: '`positionViewAtRow(int row, PositionMode mode)`: This is the position of the
    view in the specified row defined by the mode, such as `ListView.Beginning`, `ListView.Center`,
    `ListView.End`, `ListView.Visible`, or `ListView.Contain`.'
  id: totrans-550
  prefs: []
  type: TYPE_NORMAL
  zh: '`positionViewAtRow(int row, PositionMode mode)`: 这是根据模式在指定行中定义的视图位置，例如`ListView.Beginning`、`ListView.Center`、`ListView.End`、`ListView.Visible`或`ListView.Contain`。'
- en: '`removeColumn(int index)`: This removes and destroys the column in the table
    by the index.'
  id: totrans-551
  prefs: []
  type: TYPE_NORMAL
  zh: '`removeColumn(int index)`: 通过索引删除并销毁表中的列。'
- en: '`resizeColumnsToContents()`: This resizes the column according to the content.'
  id: totrans-552
  prefs: []
  type: TYPE_NORMAL
  zh: '`resizeColumnsToContents()`: 根据内容调整列的大小。'
- en: '`rowAt(int x, int y)`: This returns the index of the row by its `x` and `y`
    coordinates.'
  id: totrans-553
  prefs: []
  type: TYPE_NORMAL
  zh: '`rowAt(int x, int y)`: 通过其`x`和`y`坐标返回行的索引。'
- en: Additional tools
  id: totrans-554
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他工具
- en: 'In the `QtQuick.Controls` module, useful types are available that can be implemented
    in GUI applications. All of these types require the following `import` statement:'
  id: totrans-555
  prefs: []
  type: TYPE_NORMAL
  zh: 在`QtQuick.Controls`模块中，提供了可用于实现GUI应用程序的有用类型。所有这些类型都需要以下`import`语句：
- en: '[PRE49]'
  id: totrans-556
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: Let's go through all of these types in detail.
  id: totrans-557
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细地通过所有这些类型。
- en: Calendar
  id: totrans-558
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 日历
- en: 'This type provides the calendar widget, and has the following properties:'
  id: totrans-559
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型提供日历小部件，并具有以下属性：
- en: '`dayOfWeekFormat`**:** This integer is the format for when the days of the
    week are displayed.'
  id: totrans-560
  prefs: []
  type: TYPE_NORMAL
  zh: '`dayOfWeekFormat`**:** 这个整数是显示星期几的格式。'
- en: '`frameVisible`**:** This can be `true` or `false`. If `true`, the frame surrounding
    the calendar will be visible.'
  id: totrans-561
  prefs: []
  type: TYPE_NORMAL
  zh: '`frameVisible`**:** 这可以是`true`或`false`。如果为`true`，则围绕日历的框架将可见。'
- en: '`minimumDate`**:** This is the earliest date that the calendar will accept.'
  id: totrans-562
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumDate`**:** 这是日历将接受的最早日期。'
- en: '`maximumDate`**:** This is the latest date that the calendar will accept.'
  id: totrans-563
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumDate`**:** 这是日历将接受的最新日期。'
- en: '`navigationBarVisible`**:** This can be `true` or `false`. If `true`, the navigation
    bar will be visible.'
  id: totrans-564
  prefs: []
  type: TYPE_NORMAL
  zh: '`navigationBarVisible`**:** 这可以是`true`或`false`。如果为`true`，则导航栏将可见。'
- en: '`selectedDate`**:** This is the date that was selected by the user.'
  id: totrans-565
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectedDate`**:** 这是用户选择的日期。'
- en: '`visibleMonth`**:** This integer is the month from `0` to `11` that will be
    shown on the calendar.'
  id: totrans-566
  prefs: []
  type: TYPE_NORMAL
  zh: '`visibleMonth`**:** 这是一个整数，表示日历上显示的月份（从`0`到`11`）。'
- en: '`visibleYear`**:** This integer is the year that will be shown.'
  id: totrans-567
  prefs: []
  type: TYPE_NORMAL
  zh: '`visibleYear`**:** 这是一个整数，表示将显示的年份。'
- en: '`weekNumbersVisible`**:** This can be `true` or `false`. If `true`, the week numbers
    will be visible (the default is `false`).'
  id: totrans-568
  prefs: []
  type: TYPE_NORMAL
  zh: '`weekNumbersVisible`**:** 这可以是`true`或`false`。如果为`true`，则周数将可见（默认为`false`）。'
- en: '**`style`:** This component provides styling of the calendar with the `CalendarStyle`
    type. With the `CalendarStyle` type, the `background`, `control`, `dayDelegate`,
    `dayOfWeekDelegate`, `gridColor`, `gridVisible`, `navigationBar`, and `weekNumberDelegate`
    properties are available.'
  id: totrans-569
  prefs: []
  type: TYPE_NORMAL
  zh: '**`style`:** 此组件使用`CalendarStyle`类型为日历提供样式。使用`CalendarStyle`类型，`background`、`control`、`dayDelegate`、`dayOfWeekDelegate`、`gridColor`、`gridVisible`、`navigationBar`和`weekNumberDelegate`属性可用。'
- en: ProgressBar
  id: totrans-570
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: ProgressBar
- en: 'This provides a visualized element showing the progress of an operation in
    the GUI. It has the following properties:'
  id: totrans-571
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一个可视化的元素，用于显示GUI中操作的进度。它具有以下属性：
- en: '`value`**:** This is the current value of the progress bar.'
  id: totrans-572
  prefs: []
  type: TYPE_NORMAL
  zh: '`value`**:** 这是进度条当前值。'
- en: '`minimumValue`**:** This is the minimum value of the progress.'
  id: totrans-573
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumValue`**:** 这是进度条的最低值。'
- en: '`maximumValue`**:** This is the maximum value of the progress.'
  id: totrans-574
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumValue`**:** 这是进度条的最大值。'
- en: '`indeterminate`**:** This can be `true` or `false`. If `true`, the progress
    will be animated as busy (the default is `false`).'
  id: totrans-575
  prefs: []
  type: TYPE_NORMAL
  zh: '`indeterminate`**:** 这可以是`true`或`false`。如果为`true`，则进度将以忙碌状态动画显示（默认为`false`）。'
- en: '`orientation`**:** This integer is the horizontal or vertical orientation of
    the progress bar (the default is `Qt.Horizontal`).'
  id: totrans-576
  prefs: []
  type: TYPE_NORMAL
  zh: '`orientation`**:** 这是一个整数，表示进度条的水平和垂直方向（默认为`Qt.Horizontal`）。'
- en: '`hovered`**:** This can be `true` or `false`. If `true`, this progress bar
    is being hovered over.'
  id: totrans-577
  prefs: []
  type: TYPE_NORMAL
  zh: '`hovered`**:** 这可以是`true`或`false`。如果为`true`，则此进度条正在被悬停。'
- en: '`style`**:** This component provides styles for the progress bar with the `ProgressBarStyle`
    type. This type has the `background`, `control`, `currentProgress`, `panel`, and
    `progress` properties.'
  id: totrans-578
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件使用`ProgressBarStyle`类型为进度条提供样式。此类型具有`background`、`control`、`currentProgress`、`panel`和`progress`属性。'
- en: Switch
  id: totrans-579
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Switch
- en: 'This type implements a toggle button, which can be switched or have a checked
    or unchecked state. Its properties are as follows:'
  id: totrans-580
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型实现了一个切换按钮，可以切换或具有选中或未选中的状态。其属性如下：
- en: '`checked`**:** This can be `true` or `false`. It is `true` if the toggle button
    is checked.'
  id: totrans-581
  prefs: []
  type: TYPE_NORMAL
  zh: '`checked`**:** 这可以是`true`或`false`。如果切换按钮被选中，则为`true`。'
- en: '`pressed`**:** This can be `true` or `false`. It is `true` if the toggle button
    is pressed.'
  id: totrans-582
  prefs: []
  type: TYPE_NORMAL
  zh: '`pressed`**:** 这可以是`true`或`false`。如果切换按钮被按下，则为`true`。'
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. If `true`, the switch
    will be focused when pressed.'
  id: totrans-583
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnPress`**:** 这可以是`true`或`false`。如果为`true`，则按下时切换将获得焦点。'
- en: '`exclusiveGroup`**:** This is the group that the toggle button will belong
    to.'
  id: totrans-584
  prefs: []
  type: TYPE_NORMAL
  zh: '`exclusiveGroup`**:** 这是切换按钮所属的组。'
- en: '`style`**:** This component provides styling for this button with the `SwitchStyle`
    type. In this type, the `groove` and `handle` properties are available. `groove` can
    implement an item, such as a rectangle.'
  id: totrans-585
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件使用`SwitchStyle`类型为此按钮提供样式。在此类型中，`groove`和`handle`属性可用。`groove`可以实现一个项目，例如矩形。'
- en: Slider
  id: totrans-586
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Slider
- en: 'This is used to provide a sliding handle that can be moved horizontally or
    vertically. The properties are as follows:'
  id: totrans-587
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于提供一个可以水平或垂直移动的滑动手柄。属性如下：
- en: '`value`**:** This is the current value of the slider (the default is `0.0`).'
  id: totrans-588
  prefs: []
  type: TYPE_NORMAL
  zh: '`value`**:** 这是滑块的当前值（默认为`0.0`）。'
- en: '`minimumValue`**:** This is the minimum value of the slider (the default is
    `0.0`).'
  id: totrans-589
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumValue`**:** 这是滑块的最低值（默认为`0.0`）。'
- en: '`maximumValue`**:** This is the maximum value of the slider (the default is
    `1.0`).'
  id: totrans-590
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumValue`**:** 这是滑块的最大值（默认为`1.0`）。'
- en: '`stepSize`**:** This is the slider step size. The default value, `0.0`, indicates
    a continuous range.'
  id: totrans-591
  prefs: []
  type: TYPE_NORMAL
  zh: '`stepSize`**:** 这是滑块的步长。默认值`0.0`表示连续范围。'
- en: '`tickmarksEnabled`**:** This can be `true` or `false`. If it''s `true`, the
    slider will display tickmarks.'
  id: totrans-592
  prefs: []
  type: TYPE_NORMAL
  zh: '`tickmarksEnabled`**:** 这可以是`true`或`false`。如果是`true`，则滑块将显示刻度。'
- en: '`updateValueWhileDragging`**:** This can be `true` or `false`. If it''s `true`,
    the current value will be updated by moving the slider handle. Otherwise, it will
    be updated when it has been released.'
  id: totrans-593
  prefs: []
  type: TYPE_NORMAL
  zh: '`updateValueWhileDragging`**:** 这可以是`true`或`false`。如果是`true`，则通过移动滑块手柄更新当前值。否则，它将在释放时更新。'
- en: '`orientation`**:** This integer is the horizontal or vertical orientation of
    the slider (the default is `Qt.Horizontal`)'
  id: totrans-594
  prefs: []
  type: TYPE_NORMAL
  zh: '`orientation`**:** 这个整数是滑块的横向或纵向方向（默认为`Qt.Horizontal`）。'
- en: '`hovered`**:** This can be `true` or `false`. If `true`, this slider handle
    is being hovered over.'
  id: totrans-595
  prefs: []
  type: TYPE_NORMAL
  zh: '`hovered`**:** 这可以是`true`或`false`。如果`true`，则此滑块手柄正在被悬停。'
- en: '`pressed`**:** This can be `true` or `false`. It returns `true` if the slider
    handle is pressed.'
  id: totrans-596
  prefs: []
  type: TYPE_NORMAL
  zh: '`pressed`**:** 这可以是`true`或`false`。如果滑块手柄被按下，则返回`true`。'
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. If `true`, the slider
    will be focused when pressed.'
  id: totrans-597
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnPress`**:** 这可以是`true`或`false`。如果`true`，则当按下时滑块将被聚焦。'
- en: '`style`**:** This component styles the slider with the `SliderStyle` type.
    In this type, the `control`, `groove`, `handle`, `panel`, and `tickmarks` properties
    are available.'
  id: totrans-598
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件使用`SliderStyle`类型为滑块设置样式。在此类型中，有`control`、`groove`、`handle`、`panel`和`tickmarks`属性可用。'
- en: SpinBox
  id: totrans-599
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SpinBox
- en: 'This type allows the user to choose a value by clicking the up and down buttons
    or by typing in a value. The properties of this type are as follows:'
  id: totrans-600
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型允许用户通过点击上下按钮或输入值来选择一个值。此类型的属性如下：
- en: '`value`**:** This is the current value of the spin box (the default is `0.0`).'
  id: totrans-601
  prefs: []
  type: TYPE_NORMAL
  zh: '`value`**:** 这是微调框的当前值（默认为`0.0`）。'
- en: '`minimumValue`**:** This is the minimum value of the range in the spin box
    (the default is `0.0`).'
  id: totrans-602
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumValue`**:** 这是微调框范围内最小值（默认为`0.0`）。'
- en: '`maximumValue`**:** This is the maximum value of the range in the spin box
    (the default is `1.0`).'
  id: totrans-603
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumValue`**:** 这是微调框范围内最大值（默认为`1.0`）。'
- en: '`stepSize`**:** This is the step that will be incremented or decremented when
    the up/down button is pressed.'
  id: totrans-604
  prefs: []
  type: TYPE_NORMAL
  zh: '`stepSize`**:** 这是按下上下按钮时将增加或减少的步长。'
- en: '`prefix`**:** This is a `string` that adds a prefix for this value, such as
    `$`.'
  id: totrans-605
  prefs: []
  type: TYPE_NORMAL
  zh: '`prefix`**:** 这是一个`string`，为该值添加前缀，例如`$`。'
- en: '`suffix`**:** This is a `string` that adds a suffix for this value, such as
    `ms`.'
  id: totrans-606
  prefs: []
  type: TYPE_NORMAL
  zh: '`suffix`**:** 这是一个`string`，为该值添加后缀，例如`ms`。'
- en: '`decimals`**:** This integer is the number of decimals of the spin box (the
    default is `0`).'
  id: totrans-607
  prefs: []
  type: TYPE_NORMAL
  zh: '`decimals`**:** 这个整数是微调框的小数位数（默认为`0`）。'
- en: '`inputMethodComposing`**:** This can be `true` or `false`. The spin box has
    partial text input from an input method.'
  id: totrans-608
  prefs: []
  type: TYPE_NORMAL
  zh: '`inputMethodComposing`**:** 这可以是`true`或`false`。微调框可以部分输入来自输入法的内容。'
- en: '`cursorPosition`**:** This is the integer position of the cursor in the spin
    box.'
  id: totrans-609
  prefs: []
  type: TYPE_NORMAL
  zh: '`cursorPosition`**:** 这是微调框中光标的整数位置。'
- en: '`selectByMouse`**:** This can be `true` or `false`. The values of the spin
    box can be selected by the mouse (the default is `true`).'
  id: totrans-610
  prefs: []
  type: TYPE_NORMAL
  zh: '`selectByMouse`**:** 这可以是`true`或`false`。微调框的值可以通过鼠标选择（默认为`true`）。'
- en: '`hovered`**:** This can be `true` or `false`, and is `true` if the spin box
    is being hovered over.'
  id: totrans-611
  prefs: []
  type: TYPE_NORMAL
  zh: '`hovered`**:** 这可以是`true`或`false`，如果微调框正在被悬停，则为`true`。'
- en: '`horizontalAlignment`**:** This integer value will align the box with a `Qt.AlignLeft`,
    `Qt.AlignHCenter`, or `Qt.AlignRight` alignment.'
  id: totrans-612
  prefs: []
  type: TYPE_NORMAL
  zh: '`horizontalAlignment`**:** 这个整数值将使框与`Qt.AlignLeft`、`Qt.AlignHCenter`或`Qt.AlignRight`对齐。'
- en: '`font`**:** This sets the font for the spin box values.'
  id: totrans-613
  prefs: []
  type: TYPE_NORMAL
  zh: '`font`**:** 这为微调框的值设置字体。'
- en: '`activeFocusOnPress`**:** This can be `true` or `false`, and if `true`, the
    spin box will be focused when pressed.'
  id: totrans-614
  prefs: []
  type: TYPE_NORMAL
  zh: '`activeFocusOnPress`**:** 这可以是`true`或`false`，如果`true`，则当按下时微调框将被聚焦。'
- en: '`menu`**:** This component sets the menu for working with text selection with
    the menu type.'
  id: totrans-615
  prefs: []
  type: TYPE_NORMAL
  zh: '`menu`**:** 此组件使用菜单类型设置用于文本选择的菜单。'
- en: '**`style`:** This component provides spin box styling with the `SpinBoxStyle`
    type. This type has the `background,` `control`, `decrementControl`, `incrementControl`,
    `horizontalAlignment`, `font`, `renderType`, `selectedTextColor`, `selectionColor`,
    and `textColor` properties.'
  id: totrans-616
  prefs: []
  type: TYPE_NORMAL
  zh: '**`style`:** 此组件使用`SpinBoxStyle`类型提供微调框样式。此类型具有`background`、`control`、`decrementControl`、`incrementControl`、`horizontalAlignment`、`font`、`renderType`、`selectedTextColor`、`selectionColor`和`textColor`属性。'
- en: BusyIndicator
  id: totrans-617
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BusyIndicator
- en: 'This type provides an indication of the progress of an operation, such as loading,
    downloading, and installing. It''s used to inform the user about operation progress
    with a graphical element. This type has two properties:'
  id: totrans-618
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型提供了对操作进度的指示，例如加载、下载和安装。它用于通过图形元素通知用户操作进度。此类型有两个属性：
- en: '`running`**:** This can be `true` or `false`. The element will indicate that
    an activity is taking place (the default is `true`).'
  id: totrans-619
  prefs: []
  type: TYPE_NORMAL
  zh: '`running`**:** 这可以是`true`或`false`。该元素将指示活动正在进行（默认为`true`）。'
- en: '`style`**:** This component provides styling for this indicator with the `BusyIndicatorStyle`
    type by using the `control` and `indicator` properties.'
  id: totrans-620
  prefs: []
  type: TYPE_NORMAL
  zh: '`style`**:** 此组件通过使用`control`和`indicator`属性，使用`BusyIndicatorStyle`类型为此指示器提供样式。'
- en: Controls implementation
  id: totrans-621
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 控件实现
- en: 'Let''s implement some of the controls we described in this chapter in our application. Create
    a file called `USplit.qml`in the `qmls/` directory and write the following lines:'
  id: totrans-622
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在本章中描述的一些控件在我们的应用程序中实现。在`qmls/`目录下创建一个名为`USplit.qml`的文件，并写入以下行：
- en: 'Add `SplitView` to the parent `Item`:'
  id: totrans-623
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`SplitView`添加到父`Item`：
- en: '[PRE50]'
  id: totrans-624
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: This realizes the split view of the buttons for the text and table windows.
  id: totrans-625
  prefs: []
  type: TYPE_NORMAL
  zh: 这实现了文本和表格窗口的按钮分割视图。
- en: 'Add the first rectangle as a `SplitView` element:'
  id: totrans-626
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第一个矩形作为`SplitView`元素添加：
- en: '[PRE51]'
  id: totrans-627
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: If this rectangle is clicked on, a window with various text fields will be displayed.
  id: totrans-628
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击此矩形，将显示包含各种文本字段的窗口。
- en: 'Add the second rectangle to the `USplit.qml` file:'
  id: totrans-629
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将第二个矩形添加到`USplit.qml`文件中：
- en: '[PRE52]'
  id: totrans-630
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'If the second rectangle is clicked on, the window with a table will be displayed
    in the application. We can see a similar result by running the application. The
    split view with the `Texts` and `Table` options is displayed in the bottom-right
    corner of the application window:'
  id: totrans-631
  prefs: []
  type: TYPE_NORMAL
  zh: 如果单击第二个矩形，应用程序中将显示包含表格的窗口。我们可以通过运行应用程序看到类似的结果。`Texts`和`Table`选项的分割视图显示在应用程序窗口的右下角：
- en: '![](img/db3fda66-66fe-4525-b89d-8081ce497737.png)'
  id: totrans-632
  prefs: []
  type: TYPE_IMG
  zh: '![](img/db3fda66-66fe-4525-b89d-8081ce497737.png)'
- en: 'Now, let''s create a `UTexts.qml` file in the `qmls/` directory to demonstrate
    the text fields and additional components:'
  id: totrans-633
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们在`qmls/`目录中创建一个`UTexts.qml`文件来演示文本字段和附加组件：
- en: 'Add the `GridLayout` to the `UTexts.qml` file:'
  id: totrans-634
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`GridLayout`添加到`UTexts.qml`文件中：
- en: '[PRE53]'
  id: totrans-635
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: Dialogs are used to implement the font and color dialog windows in the application.
    The elements will be arranged with the grid layout positioning mechanism.
  id: totrans-636
  prefs: []
  type: TYPE_NORMAL
  zh: 对话框用于在应用程序中实现字体和颜色对话框窗口。元素将使用网格布局定位机制排列。
- en: 'Add the `TextArea` to the `GridLayout`:'
  id: totrans-637
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`TextArea`添加到`GridLayout`中：
- en: '[PRE54]'
  id: totrans-638
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: This sets the properties for the text area, such as `font.pixelSize`, `textColor`,
    and `textMargin`.
  id: totrans-639
  prefs: []
  type: TYPE_NORMAL
  zh: 这设置了文本区域的属性，例如`font.pixelSize`、`textColor`和`textMargin`。
- en: 'Add the `Calendar` after the `TextArea` class:'
  id: totrans-640
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`TextArea`类之后添加`Calendar`：
- en: '[PRE55]'
  id: totrans-641
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: The calendar will be displayed in the top-right corner of the application window.
  id: totrans-642
  prefs: []
  type: TYPE_NORMAL
  zh: 日历将在应用程序窗口的右上角显示。
- en: 'Then, add the `Slider` component:'
  id: totrans-643
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加`Slider`组件：
- en: '[PRE56]'
  id: totrans-644
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: The `Slider` will increase or decrease the size of the text area.
  id: totrans-645
  prefs: []
  type: TYPE_NORMAL
  zh: '`Slider`将增加或减少文本区域的大小。'
- en: 'Add the `ComboBox` after the `Slider`:'
  id: totrans-646
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Slider`之后添加`ComboBox`：
- en: '[PRE57]'
  id: totrans-647
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: This combobox allows the static dialog windows to change the color and font
    in the text area.
  id: totrans-648
  prefs: []
  type: TYPE_NORMAL
  zh: 此组合框允许静态对话框窗口在文本区域中更改颜色和字体。
- en: 'Then, add the radio buttons:'
  id: totrans-649
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加单选按钮：
- en: '[PRE58]'
  id: totrans-650
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: The `ExclusiveGroup` type groups these radio buttons with the possibility to
    make only one choice.
  id: totrans-651
  prefs: []
  type: TYPE_NORMAL
  zh: '`ExclusiveGroup`类型将这些单选按钮分组，并允许只进行一个选择。'
- en: 'Add the check boxes to the application, arranged with the `GridLayout`:'
  id: totrans-652
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将复选框添加到应用程序中，并使用`GridLayout`排列：
- en: '[PRE59]'
  id: totrans-653
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: These checkboxes allow the selection of various date implementations in the
    text area field. One option, or all options together, can be selected.
  id: totrans-654
  prefs: []
  type: TYPE_NORMAL
  zh: 这些复选框允许在文本区域字段中选择各种日期实现。可以选择一个选项，或同时选择所有选项。
- en: 'Then, add the single-line `TextField`:'
  id: totrans-655
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，添加单行`TextField`：
- en: '[PRE60]'
  id: totrans-656
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: In this text field, the total number of characters in the text area will be
    displayed.
  id: totrans-657
  prefs: []
  type: TYPE_NORMAL
  zh: 在此文本字段中，将显示文本区域中的字符总数。
- en: 'Add the `Rectangle` item that will represent the main button in this window:'
  id: totrans-658
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加代表此窗口主按钮的`Rectangle`项：
- en: '[PRE61]'
  id: totrans-659
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: This custom rectangle uses the `Text` type for the text on this button; the
    `BusyIndicator`, which will indicate that a process is in progress; and `Timer`,
    which sets the `interval`.
  id: totrans-660
  prefs: []
  type: TYPE_NORMAL
  zh: 此自定义矩形使用`Text`类型为此按钮上的文本；`BusyIndicator`，它将指示进程正在进行；以及`Timer`，它设置`interval`。
- en: 'Now we need to add a JavaScript function to this `Rectangle` item:'
  id: totrans-661
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在我们需要向此`Rectangle`项添加一个JavaScript函数：
- en: '[PRE62]'
  id: totrans-662
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: This JavaScript function will manipulate the data and set the result to the
    text area.
  id: totrans-663
  prefs: []
  type: TYPE_NORMAL
  zh: 此JavaScript函数将操作数据并将结果设置到文本区域。
- en: 'Finally, add the `MouseArea` type to this rectangle:'
  id: totrans-664
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将`MouseArea`类型添加到此矩形中：
- en: '[PRE63]'
  id: totrans-665
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This mouse area will be used with the rectangle to realize the click and hover
    effects. Now we can start the application. To do this, choose the `Texts` option
    in the bottom-right corner, and see a result similar to this:'
  id: totrans-666
  prefs: []
  type: TYPE_NORMAL
  zh: 这个鼠标区域将与矩形一起使用，以实现点击和悬停效果。现在我们可以启动应用程序。为此，请在右下角选择`Texts`选项，并看到类似以下的结果：
- en: '![](img/2a6026a3-2779-4a34-b97c-d5d982320ed8.png)'
  id: totrans-667
  prefs: []
  type: TYPE_IMG
  zh: '![](img/2a6026a3-2779-4a34-b97c-d5d982320ed8.png)'
- en: 'Now we can create a `UTable.qml` file in the same directory so that we can
    implement a simple table in the GUI application:'
  id: totrans-668
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以在同一目录下创建一个`UTable.qml`文件，以便我们可以在GUI应用程序中实现一个简单的表格：
- en: 'Add a table view to the `UTable.qml` file:'
  id: totrans-669
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将表格视图添加到`UTable.qml`文件中：
- en: '[PRE64]'
  id: totrans-670
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: The `TableView` QML type creates a table in the application. The `TableViewColumn`
    types are used for columns in this table and have title and role properties.
  id: totrans-671
  prefs: []
  type: TYPE_NORMAL
  zh: '`TableView` QML类型在应用程序中创建一个表格。`TableViewColumn`类型用于此表格的列，并具有标题和角色属性。'
- en: 'Add the `style` and `model` properties to the table:'
  id: totrans-672
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`style`和`model`属性添加到表格中：
- en: '[PRE65]'
  id: totrans-673
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The data in this table is realized with the `model` property of the `TableView`
    type. The `ListModel` type contains the `ListElement` types with specified data
    for titles related to each cell. The table looks like this:'
  id: totrans-674
  prefs: []
  type: TYPE_NORMAL
  zh: 此表格中的数据是通过`TableView`类型的`model`属性实现的。`ListModel`类型包含具有指定数据的`ListElement`类型，这些数据与每个单元格相关的标题相关。表格看起来如下所示：
- en: '![](img/cf808d1a-1fda-4961-bbba-ced50c8fca07.png)'
  id: totrans-675
  prefs: []
  type: TYPE_IMG
  zh: '![](img/cf808d1a-1fda-4961-bbba-ced50c8fca07.png)'
- en: We have three columns with data for each cell of the table.
  id: totrans-676
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有三个列，每个单元格都有数据。
- en: Layouts
  id: totrans-677
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: 'If we run the application and try to resize the window with controls such as
    a fullscreen button or with the mouse, we will get some unresizable views. This
    may be because of unresizable items, or because the positions of some of the items
    will not fit the application. One of the causes of this is that the items and
    elements have a fixed position and size. The `Layouts` submodule of `QtQuick`
    tries to solve these problems. This submodule is used to arrange items in a UI.
    Also, `Layouts` QML types resize their items, which makes them well-suited to
    application views. With the help of the `Layouts` submodule, all the items will
    be rearranged in relation to window resizing. At the end of this chapter, we will
    describe how to arrange GUI items with the layouts representation. The Qt Quick
    `Layouts` submodule has the following `import` statement:'
  id: totrans-678
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们运行应用程序并尝试使用全屏按钮或鼠标等控件调整窗口大小，我们将得到一些不可调整大小的视图。这可能是由于不可调整大小的项目，或者因为某些项目的位置可能不适合应用程序。其中一个原因是项目和元素具有固定的位置和大小。`QtQuick`的`Layouts`子模块试图解决这些问题。此子模块用于在UI中排列项目。此外，`Layouts`
    QML类型调整其项目的大小，这使得它们非常适合应用程序视图。借助`Layouts`子模块，所有项目都将根据窗口大小调整而重新排列。在本章末尾，我们将描述如何使用布局表示法排列GUI项目。Qt
    Quick的`Layouts`子模块具有以下`import`语句：
- en: '[PRE66]'
  id: totrans-679
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: Let's go through the types that can be used to provide layout arrangement for
    items.
  id: totrans-680
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看可以用于为项目提供布局排列的类型。
- en: Layout
  id: totrans-681
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布局
- en: 'The basic QML type for the grid/row/column layouts has the following properties
    that can be used in layout construction:'
  id: totrans-682
  prefs: []
  type: TYPE_NORMAL
  zh: 网格/行/列布局的基本QML类型具有以下属性，可用于布局构造：
- en: '`column`**:** This is an integer that specifies the column position of the
    item in the layout.'
  id: totrans-683
  prefs: []
  type: TYPE_NORMAL
  zh: '`column`**:** 这是一个整数，用于指定项目在布局中的列位置。'
- en: '`row`**:** This is an integer that specifies the row position of the item in
    the layout.'
  id: totrans-684
  prefs: []
  type: TYPE_NORMAL
  zh: '`row`**:** 这是一个整数，用于指定项目在布局中的行位置。'
- en: '`columnSpan`**:** This integer is the number of columns occupied by the item.'
  id: totrans-685
  prefs: []
  type: TYPE_NORMAL
  zh: '`columnSpan`**:** 这个整数是项目占用的列数。'
- en: '`rowSpan`**:** This integer is the number of rows occupied by the item.'
  id: totrans-686
  prefs: []
  type: TYPE_NORMAL
  zh: '`rowSpan`**:** 这个整数是项目占用的行数。'
- en: '`fillWidth`**:** This can be `true` or `false`. If `true`, the item will have
    the full width of the occupied cell in the layout.'
  id: totrans-687
  prefs: []
  type: TYPE_NORMAL
  zh: '`fillWidth`**:** 这可以是`true`或`false`。如果为`true`，则项目将具有布局中占用单元格的完整宽度。'
- en: '`fillHeight`**:** This can be `true` or `false`. If `true`, the item will have
    the full available height of the cell in the layout.'
  id: totrans-688
  prefs: []
  type: TYPE_NORMAL
  zh: '`fillHeight`**:** 这可以是`true`或`false`。如果为`true`，则项目将具有布局中单元格的完整可用高度。'
- en: '`maximumWidth`**:** This sets the maximum available width for an item in the
    cell of the layout.'
  id: totrans-689
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumWidth`**:** 这设置了单元格中项目的最大可用宽度。'
- en: '`maximumHeight`**:** This sets the maximum available height for an item.'
  id: totrans-690
  prefs: []
  type: TYPE_NORMAL
  zh: '`maximumHeight`**:** 这设置了单元格中项目的最大可用高度。'
- en: '`minimumWidth`**:** This sets the minimum available width for an item in the
    cell of the layout.'
  id: totrans-691
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumWidth`**:** 这设置了布局单元格中项目可用的最小宽度。'
- en: '`minimumHeight`**:** This sets the minimum available height for an item.'
  id: totrans-692
  prefs: []
  type: TYPE_NORMAL
  zh: '`minimumHeight`**:** 这设置了项目可用的最小高度。'
- en: '`preferredWidth`**:** This is the preferred width of an item in a layout. By
    default, it is set to `-1` or to the `implicitWidth` of an item. It is related
    to some items that have a natural size, such as images and text.'
  id: totrans-693
  prefs: []
  type: TYPE_NORMAL
  zh: '`preferredWidth`**:** 这是布局中项目首选的宽度。默认设置为`-1`或项目的`implicitWidth`。它与一些具有自然大小的项目相关，如图像和文本。'
- en: '`preferredHeight`**:** This is the preferred width of an item in a layout (the
    default is `-1`).'
  id: totrans-694
  prefs: []
  type: TYPE_NORMAL
  zh: '`preferredHeight`**:** 这是布局中项目首选的宽度（默认为`-1`）。'
- en: '`margins`**:** This sets the margins on all sides outside the item in the layout.'
  id: totrans-695
  prefs: []
  type: TYPE_NORMAL
  zh: '`margins`**:** 这设置了布局中项目外所有边的边距。'
- en: '`topMargin`**:** This sets the top margin outside of the item.'
  id: totrans-696
  prefs: []
  type: TYPE_NORMAL
  zh: '`topMargin`**:** 这设置了项目外的顶部边距。'
- en: '`leftMargin`**:** This sets the left margin outside of the item.'
  id: totrans-697
  prefs: []
  type: TYPE_NORMAL
  zh: '`leftMargin`**:** 这设置了项目外的左边距。'
- en: '`bottomMargin`**:** This is the bottom margin outside of the item in the layout.'
  id: totrans-698
  prefs: []
  type: TYPE_NORMAL
  zh: '`bottomMargin`**:** 这是布局中项目外的底部边距。'
- en: '`rightMargin`**:** This is the right margin outside of the item.'
  id: totrans-699
  prefs: []
  type: TYPE_NORMAL
  zh: '`rightMargin`**:** 这是项目外的右边距。'
- en: '`alignment`**:** The alignment of the item inside the layout cell.'
  id: totrans-700
  prefs: []
  type: TYPE_NORMAL
  zh: '`alignment`**:** 布局单元格内项目的对齐方式。'
- en: 'These properties are used inside the item declaration with the following example
    syntax: `Layout.fillWidth: true`.'
  id: totrans-701
  prefs: []
  type: TYPE_NORMAL
  zh: '这些属性在项目声明中使用，以下是一个示例语法：`Layout.fillWidth: true`。'
- en: ColumnLayout
  id: totrans-702
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列布局
- en: 'This type arranges items by columns. It has two properties:'
  id: totrans-703
  prefs: []
  type: TYPE_NORMAL
  zh: 此类型按列排列项。它有两个属性：
- en: '`layoutDirection`**:** This `enumeration` is the direction of the items in
    the layout (the default is `Qt.LeftToRight`). `Qt.RightToLeft` can be used as
    well.'
  id: totrans-704
  prefs: []
  type: TYPE_NORMAL
  zh: '`layoutDirection`**:** 这个`枚举`是布局中项目的方向（默认是`Qt.LeftToRight`）。也可以使用`Qt.RightToLeft`。'
- en: '`spacing`**:** This is the spacing between each cell in the column (the default
    is `5`).'
  id: totrans-705
  prefs: []
  type: TYPE_NORMAL
  zh: '`spacing`**:** 这是列中每个单元格之间的间距（默认为`5`）。'
- en: RowLayout
  id: totrans-706
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 行布局
- en: 'This QML type will arrange the items in the layout by rows. It has two properties:'
  id: totrans-707
  prefs: []
  type: TYPE_NORMAL
  zh: 此QML类型将按行排列布局中的项。它有两个属性：
- en: '`layoutDirection`**:** This `enumeration` is the direction of the items in
    the layout (the default is `Qt.LeftToRight`). `Qt.RightToLeft` can be used as
    well.'
  id: totrans-708
  prefs: []
  type: TYPE_NORMAL
  zh: '`layoutDirection`**:** 这个`枚举`是布局中项目的方向（默认是`Qt.LeftToRight`）。也可以使用`Qt.RightToLeft`。'
- en: '`spacing`**:** This is the spacing between each cell in the row (the default
    is `5`).'
  id: totrans-709
  prefs: []
  type: TYPE_NORMAL
  zh: '`spacing`**:** 这是行中每个单元格之间的间距（默认为`5`）。'
- en: GridLayout
  id: totrans-710
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网格布局
- en: 'This is the most highly recommended type of layout implementation. It arranges
    items in the grid by the row/column position of the element. This type has the
    following properties. Note that these properties are not attached, and can be
    used just inside the `GridLayout` declaration (not inside the item of the layout):'
  id: totrans-711
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最推荐的布局实现类型。它通过元素的行/列位置来排列网格中的项。此类型具有以下属性。请注意，这些属性不是附加的，可以直接在`GridLayout`声明中使用（而不是在布局项中使用）：
- en: '`columns`**:** This integer is the column limit. It specifies the number of
    columns that will be used for the item''s position in the layout.'
  id: totrans-712
  prefs: []
  type: TYPE_NORMAL
  zh: '`columns`**:** 这个整数是列限制。它指定了在布局中用于项目位置的列数。'
- en: '`rows`**:** This integer is the row limit for positioned items.'
  id: totrans-713
  prefs: []
  type: TYPE_NORMAL
  zh: '`rows`**:** 这个整数是定位项的行限制。'
- en: '`columnSpacing`**:** This is the spacing between each column in the layout.'
  id: totrans-714
  prefs: []
  type: TYPE_NORMAL
  zh: '`columnSpacing`**:** 这是布局中每列之间的间距。'
- en: '`rowSpacing`**:** This is the spacing between each row.'
  id: totrans-715
  prefs: []
  type: TYPE_NORMAL
  zh: '`rowSpacing`**:** 这是每行之间的间距。'
- en: '`flow`**:** This `enumeration` is the flow direction of items that do not have
    an explicit position in the layout. The default is `GridLayout.LeftToRight`. `GridLayout.TopToBottom`
    can also be used.'
  id: totrans-716
  prefs: []
  type: TYPE_NORMAL
  zh: '`flow`**:** 这个`枚举`是布局中未明确指定位置的项目流方向。默认是`GridLayout.LeftToRight`。也可以使用`GridLayout.TopToBottom`。'
- en: '`layoutDirection`**:** This `enumeration` is the direction of the items in
    the layout. The default is `Qt.LeftToRight`. `Qt.RightToLeft` can also be used.'
  id: totrans-717
  prefs: []
  type: TYPE_NORMAL
  zh: '`layoutDirection`**:** 这个`枚举`是布局中项目的方向。默认是`Qt.LeftToRight`。也可以使用`Qt.RightToLeft`。'
- en: Completing layouts
  id: totrans-718
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 完成布局
- en: 'In order to demonstrate the layout construction advantages as opposed to using
    fixed positioning, let''s rebuild the `u_qml.qml` file, which consists of the
    fixed size of elements, with an implementation of the `GridLayout`:'
  id: totrans-719
  prefs: []
  type: TYPE_NORMAL
  zh: 为了展示与使用固定定位相比布局构造的优势，让我们重新构建`u_qml.qml`文件，该文件由固定大小的元素组成，并使用`GridLayout`实现：
- en: 'Add the `GridLayout` to the `u_qml.qml`file:'
  id: totrans-720
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`GridLayout`添加到`u_qml.qml`文件中：
- en: '[PRE67]'
  id: totrans-721
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: This is the `GridLayout` for the arrangement of `rect1` in the application.
  id: totrans-722
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用中 `rect1` 排布的 `GridLayout`。
- en: 'After the first `GridLayout`, add the second `GridLayout`:'
  id: totrans-723
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在第一个 `GridLayout` 之后，添加第二个 `GridLayout`：
- en: '[PRE68]'
  id: totrans-724
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: This is the `GridLayout` for the arrangement of `rect2` in the application.
  id: totrans-725
  prefs: []
  type: TYPE_NORMAL
  zh: 这是应用中 `rect2` 排布的 `GridLayout`。
- en: 'Add the `GridLayout` for the buttons of the second rectangle:'
  id: totrans-726
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为第二个矩形的按钮添加 `GridLayout`：
- en: '[PRE69]'
  id: totrans-727
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: The buttons of the right panel will be arranged with `GridLayout` positioning.
  id: totrans-728
  prefs: []
  type: TYPE_NORMAL
  zh: 右侧面板的按钮将使用 `GridLayout` 定位排列。
- en: 'Complete this file by adding some properties to the `SplitView`:'
  id: totrans-729
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过向 `SplitView` 添加一些属性来完成此文件：
- en: '[PRE70]'
  id: totrans-730
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: This `SplitView` will be arranged in the button's grid layout of the second
    rectangle. Now we can run the `u_app.py` file and check that it is right. The
    full examples are available in the GitHub repository of this book.
  id: totrans-731
  prefs: []
  type: TYPE_NORMAL
  zh: 此 `SplitView` 将排列在第二个矩形的按钮网格布局中。现在我们可以运行 `u_app.py` 文件并检查它是否正确。完整的示例可在本书的 GitHub
    仓库中找到。
- en: Summary
  id: totrans-732
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we covered the `QtQuick` module—the basic library for working
    with QML in the Qt framework. We learned about important concepts, such as layouts,
    controls, and some additional fields. For detailed information, you must go through
    the official documentation.
  id: totrans-733
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 `QtQuick` 模块——在 Qt 框架中处理 QML 的基本库。我们学习了重要概念，如布局、控件和一些附加字段。对于详细信息，你必须查阅官方文档。
- en: Now we will interrupt the exploration of QML and move on to the next stage and
    use the graphical Qt library with Python bindings, which is the main target of
    this book.
  id: totrans-734
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将中断对 QML 的探索，进入下一阶段，并使用具有 Python 绑定的图形 Qt 库，这是本书的主要目标。
- en: In the next chapter, we will learn about Python-related libraries, such as PyQt
    and PySide. This will give us practical experience with Python, and we will use
    all of the best things from Qt.
  id: totrans-735
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习与 Python 相关的库，如 PyQt 和 PySide。这将给我们带来 Python 的实践经验，我们将使用 Qt 中的所有最佳功能。
