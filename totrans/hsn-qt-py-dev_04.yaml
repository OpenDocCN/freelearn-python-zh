- en: The Qt Quick Library
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will continue with our implementation of the QML GUI and
    we will describe the more detailed Qt Quick library – the main tool for working
    with QML in Qt. By using the Qt Quick module, designers and developers can easily
    build fluid animated UIs in QML, and have the option of connecting these UIs to
    any backend C++ libraries. Qt Quick allows developers to create highly performant,
    fluidly animated, and visually appealing applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introduction to the Qt Quick module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The window submodule
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Controls
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction to the Qt Quick module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the Qt framework, the Qt Quick module allows us to work with and implement
    QML with user-created applications. Qt Quick is the main module in the Qt framework
    for working with UIs and infrastructures with QML. This module expands Qt's functionality
    and makes some additions.
  prefs: []
  type: TYPE_NORMAL
- en: Basic types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In addition to the default QML types, the Qt Quick module provides the following
    types:'
  prefs: []
  type: TYPE_NORMAL
- en: '`date`: Date values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`point`: Values with `x` and `y` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rect`: Values with `x`, `y`, `width`, and `height` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`size`: Values with `width` and `height` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`color`: ARGB color values'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`font`: Font values with the properties of `QFont`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`matrix4x4`: A 4-row and 4-column matrix'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quaternion`: A scalar with `x`, `y`, and `z` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vector2d`: A 2D vector with `x` and `y` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vector3d`: A 3D vector with `x`, `y`, and `z` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vector4d`: A 4D vector with `x`, `y`, `z`, and `w` attributes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Quick types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In [Chapter 2](e8aa0a88-3426-4280-86f9-8d39cf7f6391.xhtml), *An Overview of
    QML*, we described the most popular Qt Quick types for creating a GUI. A full
    list of these types is available in the official documentation: [https://doc.qt.io/qt-5.9/qtquick-qmlmodule.html](https://doc.qt.io/qt-5.9/qtquick-qmlmodule.html). Let''s
    look at some of the most useful types that we haven''t covered yet:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Canvas`: This provides a 2D canvas item that enables drawing using JavaScript
    to create figures and other visual objects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Context2D`: This provides a 2D context for shapes on a `Canvas` item'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`AnimatedImage`: This plays animations stored as series of images containing a
    series of frames.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Drag`: This specifies drag and drop events for items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DropArea`: This specifies drag and drop handling in an area.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`KeyEvent`: This provides information about key events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MouseEvent`: This allows you to handle mouse events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WheelEvent`: Mouse wheel events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Flickable`: Flicked surfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Flipable`: Flipped surfaces.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FocusScope`: Explicitly creates a focus scope.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GridView`: Model grid view of the items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Image`: Displays an image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ListView`: Model list view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Loader`: Dynamic loading of a subtree from a URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`MultiPointTouchArea`: Used to handle multiple touch points.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Column`: Used to position items in columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Flow`: Used to position items such as words on a page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Positioner`: Attached properties that show where an item exists.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Row`: Used to position items in row form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Repeater`: Used to create a number of item-based components.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ShaderEffect`: Used to add shaders to a rectangle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`GridMesh`: A mesh with vertices arranged in a grid.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextEdit`: A multiline text field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Matrix4x4`: A 4 x 4 transformation matrix for an item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Rotation`: Used to rotate an item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Scale`: An item will scale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Translate`: Used to move an item without changing its `x` or `y` properties.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FontLoader`: Used to load fonts by name or URL.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`FontMetrics`: Metrics for a font.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Qt Quick submodules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Qt Quick library includes additional modules with types. Some of them will
    be described in detail in this chapter. This is a list of the sub-modules:'
  prefs: []
  type: TYPE_NORMAL
- en: '`XmlListModel`: Provides types for creating models from XML data.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LocalStorage`: A JavaScript interface for a SQLite database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Particles`: A particle system for QML applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Window`: Types for creating top-level windows and accessing screen information.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dialogs`: Used to create and interact with system dialogs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Controls`: Reusable UI components (such as buttons, checkboxes, labels, and
    more).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Layouts`: Used to arrange items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Tests`: Used to test QML applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this chapter, we'll focus on the important types and submodules that are
    used in GUI development. For complete information, it is recommended that you
    visit the Qt Quick documentation ([https://doc.qt.io/qt-5/qtquick-index.html](https://doc.qt.io/qt-5/qtquick-index.html)).
    In [Chapter 2](e8aa0a88-3426-4280-86f9-8d39cf7f6391.xhtml), *An Overview of QML*,
    some of the types and modules were implemented with examples, and were described
    in detail. Let's do the same here.
  prefs: []
  type: TYPE_NORMAL
- en: The window module
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This module provides types that you can use when you''re creating top-level
    windows, screen information, and window events, such as when a window closes.
    To use this module, use the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: We'll go through these types in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Screen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type provides information about the displayed screen, item, or window.
    The properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`desktopAvailableHeight`**:** This integer is the available height of the desktop
    resolution in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`desktopAvailableWidth`**:** This integer is the available width of the desktop
    resolution in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`devicePixelRatio`**:** This `real` number is the ratio of physical pixels
    and device-independent pixels. The value is `1.0` with normal displays and `2.0`
    on Apple''s retina displays.'
  prefs: []
  type: TYPE_NORMAL
- en: '`width`**:** This integer is the width of the screen in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`height`**:** This integer is the height of the screen in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`**:** This string is the name of the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`orientation`**:** This is the orientation of the screen (using the accelerometer).'
  prefs: []
  type: TYPE_NORMAL
- en: '`orientationUpdateMask`**:** This contains the update mask for the orientation.'
  prefs: []
  type: TYPE_NORMAL
- en: '`primaryOrientation`**:** The primary orientation of the screen can be `Qt.PortraitOrientation`
    or `Qt.LandscapeOrientation`, depending on the height and width of the screen.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pixelDensity`**:** This `real` number is the number of physical pixels per
    millimeter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`virtualX`**:** This integer is the *x* coordinate of the screen related to
    the virtual desktop.'
  prefs: []
  type: TYPE_NORMAL
- en: '`virtualY`**:** This integer is the *y* coordinate of the screen related to
    the virtual desktop.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following method is available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`angleBetween(a, b)`: This returns the rotation angle between the `a` (the
    first parameter) and `b` (the second parameter) angles in degrees.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make our QML app with a size that depends on the screen resolution of
    the device. To do this, open the `u_qml.qml` file and change the `UQml.Window`
    width and height properties with the following lines as screen type values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The application's window will have the `width` and `height` properties that
    are available for the device that's being used.
  prefs: []
  type: TYPE_NORMAL
- en: CloseEvent
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type notifies you that a window is about to be closed by the windowing
    system. It has the following property:'
  prefs: []
  type: TYPE_NORMAL
- en: '`accepted`: This can be `true` or `false`, and allows the user to close the
    window (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: Window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This creates a new top-level window for the GUI application, which can consist
    of elements and items. The available properties of this type are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`width`: This integer sets the width of the window in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`height`: This integer sets the height of the window in pixels.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumWidth`**:** This integer sets the maximum width of the window that
    will be available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumHeight`**:** This integer sets the maximum height of the window that
    will be available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumWidth`**:** This integer sets the minimum width of the window that
    will be available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumHeight`**:** This integer sets the minimum height of the window that
    will be available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`x`**:** This integer is the position of the window on the *x* axis.'
  prefs: []
  type: TYPE_NORMAL
- en: '`y`**:** This integer is the position of the window on the *y* axis.'
  prefs: []
  type: TYPE_NORMAL
- en: '`opacity`**:** This `real` number sets the opacity of the window. The value
    ranges from `0.0` to `1.0`, where  `0.0` is fully transparent and `1.0` is fully
    opaque.'
  prefs: []
  type: TYPE_NORMAL
- en: '`title`**:** This `string` sets the title of the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`visible`**:** This can be `true` or `false`. If it''s `true`, the window will
    be visible, and if it''s `false`, the window will be invisible (the default is
    `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`visibility`**: **This sets the screen-occupation state of the window as `normal`,
    `minimized`, `maximized`, or `fullscreen`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`color`**:** This sets the background color of the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`modality`**:** This sets the window as modal (the default is `QtCore.Qt.NonModal`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`screen`**:** This sets the associated window for this window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`active`**:** This can be `true` or `false`, and sets the status of the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusItem`**:** This is the item that currently has active focus; it''s
    null if there is no item with active focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentItem`**:** This is the invisible root `Item` of the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentOrientation`**:** The hint to the window manager for additional content.'
  prefs: []
  type: TYPE_NORMAL
- en: '`data`**:** This is a list, and allows us to mix visual objects, resources,
    and other windows.'
  prefs: []
  type: TYPE_NORMAL
- en: '`flags`**:** These are the available flags for this window.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The window type provides the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Window.window`**:** The `Window` type – the item''s window that''s used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Window.width`: This integer is the width of the item''s window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Window.height`**:** This integer is the height of the item''s window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Window.visibility`**:** This window will be shown in the windowing system,
    such as `normal`, `fullscreen`, and more.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Window.active`: This can be `true` or `false`, and shows whether the window
    is active.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Window.activeFocusItem`: This shows which item currently has active focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`Window.contentItem`: This is the invisible root item of the scene.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This type has one signal:'
  prefs: []
  type: TYPE_NORMAL
- en: '`closing(CloseEvent close)`: This is emitted when the window tries to close.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The type also has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alert(int)`: Causes an alert.'
  prefs: []
  type: TYPE_NORMAL
- en: '`close()`: Closes the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hide()`: Hides the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`lower()`: Lowers the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`raise()`: Raises the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`requestActivate()`: Requests the window to be activated.'
  prefs: []
  type: TYPE_NORMAL
- en: '`show()`: Shows the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`showFullScreen()`: Shows the window in fullscreen mode.'
  prefs: []
  type: TYPE_NORMAL
- en: '`showMaximized()`: Shows the window in maximized mode.'
  prefs: []
  type: TYPE_NORMAL
- en: '`showMinimized()`: Shows the window in minimized mode.'
  prefs: []
  type: TYPE_NORMAL
- en: '`showNormal()`: Shows the window in normal mode.'
  prefs: []
  type: TYPE_NORMAL
- en: We can try to change/add properties in the `u_qml.qml` file in the `UQml.Window`
    section and look at the results.
  prefs: []
  type: TYPE_NORMAL
- en: Controls
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QtQuick.Controls` module allows us to use a wide set of reusable UI elements
    to construct the functionality of the application. The `import` statement that
    you need to be able to use types from this module is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, we'll go through the types this module provides.
  prefs: []
  type: TYPE_NORMAL
- en: ApplicationWindow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type implements a simple top-level application window with the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentItem`: This is the area between `ToolBar` and `StatusBar`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`menuBar`**:** This sets the menu bar of the application window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`toolBar`**:** This sets the toolbar of the app.'
  prefs: []
  type: TYPE_NORMAL
- en: '`statusBar`**:** This item sets the status bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component is used to style the app.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `UAppwin.qml` in the `qmls/` directory and add the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The width and height of the application window will be dependent on the resolution
    of the device. Also, the created `bars/` directory inside the `qmls/` folder will
    be used to import this application's menus and status bars.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the bar to the bottom of the application window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `id` of the tab bar and the `width` of the application window are specified.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the `StackLayout` class with `UAppItems`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: This will add the application items that will be used with the stacked layout
    representation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the status bar for the application window at the bottom of the `UAppwin.qml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The `StatusBar` class uses `Label` for the text and `style` for the gradient
    colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to create a directory called `bars/`inside `qmls/`, which will
    be used for elements of the application window, such as the tab bar, the menu,
    and the status bar. Let''s implement the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `MBar.qml` file in the `bars/` folder with the following lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: For each menu section, we need to add the `MenuItem` with text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file called `TBar.qml` for the toolbar of the application inside the
    `bars/` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: For each toolbar item, a tool button is used with an icon that is available
    in the `Icons/` folder, which is in the `bars/` directory. The tool buttons are
    arranged with a row layout.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the central element, or `TabBar`, inside the `TaBar.qml`filein the `bars/`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This `TabBar` will use several tabs in the application. These tabs are added
    in the `model` property. Each tab uses a tab button with model data text. The
    `Repeater` type is used to repeat the `TabButton` type for each element of the
    model. To use this tab bar with our application, we need to add some objects,
    such as items, images, videos, and animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file inside the `qmls/` directory called `UAppItems.qml` (similar
    to `UItems.qml`) to implement the animated objects with the application window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The `GridLayout` positions the items.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the first glow rectangle to the bottom of this `GridLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: In this rectangle, the layout properties for each side margin are specified.
    This will be used for the space between the elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `function` to the first rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This function returns a list of colors, depending on the colors that are passed
    as parameters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the handlers and `MouseArea` to the first grid layout''s element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The `onAcolored` handler calls the `onAcolor` function and changes the properties
    of the first rectangle correspondingly.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the second glow rectangle to the bottom of the `GridLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: The second rectangle uses similar properties to the first.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the sequential animations to the second rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: These animations are used to animate the color changes of the rectangle's glow
    and text glow colors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the third element to the tab of the application window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: This tab element is similar to the other element in this tab.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add parallel animations to the third element (the glow rectangle) of the tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: This type uses the `PropertyAnimation` type to make changes to different properties
    in parallel.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to make some changes in the `URectGlow.qml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add new properties to the `URectGlow.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've added custom properties to the glow rectangle, which can be changed
    in any place, and that will reimplement this object in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to change all the related properties of `URectGlow.qml` so that
    they''re the custom properties:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Change the properties to the values of the custom properties to reimplement
    them in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the application to work properly, it is recommended that you add the following
    lines to each rectangular glow element of the app:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: We have changed the properties of the rectangles to the new, custom-created
    ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'To show this result, we can run this app by adding the following lines to the
    `u_qml.qml` file, somewhere before the rectangle, with `id: rect1`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding line will add the demonstration of the application window to
    the main window application. Run the `u_qml.qml` file with the `u_app.py` Python file.
    You will see the application window with bars, a menu, and animated items:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/47d7a8e6-f9ff-4b7d-8364-6069d23cd368.png)'
  prefs: []
  type: TYPE_IMG
- en: The application window has a top panel, tool bar, central widget, and status
    bar. The buttons of the central widget provide animation effects.
  prefs: []
  type: TYPE_NORMAL
- en: Button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The most popular type in GUIs is the button. This is a push button with a text
    label. You will need the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`action`: This is an associated button action, such as text or a tooltip.'
  prefs: []
  type: TYPE_NORMAL
- en: '`checkable`**:** This can be `true` or `false`. If it''s `true`, the button
    will be checkable, that is, it remains pushed when the user pushes this button
    (the default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`checked`**:** This can be `true` or `false`. If it''s `true`, the button will
    be checked (the default is `false`). It''s available only if `checkable` is set
    to `true`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`exclusiveGroup`**:** This determines whether the button belongs to a group.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hovered`**:** This can be `true` or `false`, and states whether the button
    is being hovered.'
  prefs: []
  type: TYPE_NORMAL
- en: '`iconName`**:** This `string` is the theme name of the image source.'
  prefs: []
  type: TYPE_NORMAL
- en: '`iconSource`**:** This is a URL. The button will have an icon image from the
    provided URL.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isDefault`**:** This can be `true` or `false`. This button will be the default,
    or will be clicked on when the *Enter* key is pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`menu`**:** This provides a drop-down menu for this button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pressed`**:** This can be `true` or `false`. If it''s `true`, the button has
    been pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component is for the style of the button, such as `ButtonStyle`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text`**:** This `string` sets the text to the button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tooltip`: This `string` sets a tooltip to the button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It also has the following signal:'
  prefs: []
  type: TYPE_NORMAL
- en: '`clicked()`: This is emitted when the button is clicked on.'
  prefs: []
  type: TYPE_NORMAL
- en: ButtonStyle
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `ButtonStyle` type can be used to style the button. You will need the following `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`background`**:** This component is used for the background styling of the
    button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`control`**:** This is the button of the `Button` QML type with the style that
    will be attached to this button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`label`**:** This component is used to style the label of this button.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Modify the `UButton.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: This is a standard push button, with specified custom properties for colors,
    glow radius, spread, and text.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `style` property to the button using the `ButtonStyle` type:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: Here, we've styled the button with the `ButtonStyle` type and the property background,
    which will use the button's custom properties. Now we need to add some lines to
    the `u_qml.qml` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the importing section, add the controls and the styles of the controls that
    can be used with buttons and other related elements:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The versions of the imported elements can vary, depending on the Qt library
    version you are using.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the first button inside the rectangle with `id: rect2`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here, we are using different types of signal handlers in the mouse area of the
    button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the second button after the first:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `tooltip` property, as specified in this button, will provide the tooltip
    with the used action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the sequential animations to the second button, at the bottom:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: This is used to realize the hover and blinking effects with animations.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MouseArea` type to the second button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: These signal handlers are used to handle events such as enter cursor in the
    area, exit cursor from the area, and clicks.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now add the third button after the second button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: Clicking on this button will show animated rectangles in the application window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MouseArea` type and the `onClicked` handler to the third button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `onClicked` handler uses JavaScript instructions to make  `main_item` and
    `grid1` visible/invisible in the first rectangle of the application window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to cut the `Grid` from the `u_qml.qml` file, create a file called `UGrid.qml`
    in the `qmls/` directory, paste the `Grid` to this file, and rebuild the lines
    of code with the `GridLayout`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Change the `Grid` elements positioning to the `GridLayout` construction:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: This is the construction of the items that was used before we used `GridLayout`
    positioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the first rectangle with a glow effect to the `UGrid.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The custom and layout properties are added to this rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MouseArea` and `RotationAnimator` QML types to the first rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: This animator will rotate the item with the specified `id` property clockwise
    by `360` degrees, with a speed dependent on the `duration` property. The animation
    will be infinite.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the second rectangle to the `UGrid.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This is the second rectangle with `id` and `Layout` properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MouseArea` and `RotationAnimator` types to the bottom of the second
    rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `duration` property of this `RotationAnimator` is less than it was in the
    first rectangle, and so this circle will be rotated faster.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the third rectangle to the `UGrid.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the third rectangle with a glow effect, an `id: g7` property, and `Layout` properties
    that fill the width and height.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `MouseArea` and `RotationAnimator` to the third rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: This `RotationAnimator` will rotate the target circle faster than the previous
    two.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the fourth rectangle to the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: This rectangle uses a named color, `grey`, for the `txtglow` property of the
    rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, for the last rectangle, add the `MouseArea` and `RotationAnimator`
    types:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: This animator will rotate the target circle at a faster speed than the previous
    circles. These examples demonstrate the principles of creating and styling buttons
    with the `Button`, `Rectangle`, and `MouseArea` QML types.
  prefs: []
  type: TYPE_NORMAL
- en: 'Practicing with this code may help you to understand these basics. Finally,
    to implement the button in the application, let''s change the `u_qml.qml` file:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add/change the `UAppwin`, `UItem`, and `UGrid` properties to/in the application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'The visible properties of `UItem` and `UAppwin` are set to false. By default,
    `UGrid` will be visible with circles and glow rectangles. Now we can run the application,
    and we''ll see the following result:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/be574969-e353-48ec-9131-e7dc738b98a7.png)'
  prefs: []
  type: TYPE_IMG
- en: If we push these buttons, the related circle will rotate, and if we push them
    again, the related circle will stop.
  prefs: []
  type: TYPE_NORMAL
- en: CheckBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `CheckBox` button allows the user to select one or more options. A `CheckBox` button
    can be toggled to check an option, or it can be unchecked, and it consists of
    a checkbox and a text label. You need the following `import` statement for this
    type:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`checked`**:** This can be `true` or `false`. It is `true` if the checkbox
    is checked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pressed`**:** This can be `true` or `false`. It is `true` if the checkbox
    is checked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hovered`**:** This can be `true` or `false`. It is `true` if the checkbox
    is hovered over by the mouse pointer.'
  prefs: []
  type: TYPE_NORMAL
- en: '`partiallyCheckedEnabled` **:** This can be `true` or `false`. It makes the
    `Qt.PartiallyChecked` state available.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text`**:** This is a `string` that sets the text that will be displayed near
    the checkbox.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tooltip`**:** This is a `string` that sets a tooltip to this button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`checkedState`**:** This is an integer that sets the current state for the
    button. `1` means checked, `0` means unchecked, and `2` means partially checked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. The checkbox will
    be focused when pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`exclusiveGroup`**:** This sets the group that the checkbox will belong to.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styling for this button, such as the `CheckBoxStyle`
    type. The `CheckBoxStyle` type includes `background`, `control`, `indicator`,
    `label`, and `spacing` properties.'
  prefs: []
  type: TYPE_NORMAL
- en: ComboBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type allows users to choose from multiple options of a drop-down list
    or implement the model in order to represent a `ComboBox`. Use the following `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count`**:** This is an integer, and is the number of items in the combo box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`currentIndex`**:** This is an integer, and is the index of the selected item
    in the combo box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`currentText`**:** This is a `string` that sets the text of the selected item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pressed`**:** This can be `true` or `false`. It will be `true` if the `ComboBox`
    is pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hovered`**:** This can be `true` or `false`. It will be `true` if the box
    is hovered over by the mouse pointer.'
  prefs: []
  type: TYPE_NORMAL
- en: '`editable`**:** This can be `true` or `false`. It will make the text inside the
    combo box editable.'
  prefs: []
  type: TYPE_NORMAL
- en: '`editText`**:** This is a `string` that represents the text in the editable
    `ComboBox`, which can be edited.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectByMouse`**:** This can be `true` or `false`, and provides you with the
    ability to select the text in the editable `ComboBox` using the mouse.'
  prefs: []
  type: TYPE_NORMAL
- en: '`menu`**:** This component sets a menu so that you can work with text selections,
    such as the `menu` type component.'
  prefs: []
  type: TYPE_NORMAL
- en: '`model`**:** This will be used to implement the `ComboBox`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMethodComposing`**:** This can be `true` or `false`. If it''s `true`,
    the editable `ComboBox` has partial text input from an input method.'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMethodHints`**:** This `enumeration` sets hints for the input about the
    expected content, such as `Qt.ImhHiddenText`, which will be a password field,
    or `Qt.ImhDate`, which will be a date field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`acceptableInput`**:** This can be `true` or `false`. If `true`, the editable
    text field contains acceptable text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. The `ComboBox` will
    be focused when pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`textRole`**:** This is a `string` that can be put as a model role for the
    `ComboBox`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`validator`**:** This sets a text validator for the editable `ComboBox`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component is used of the styling for the `ComboBox`, such
    as the `ComboBoxStyle` type. `ComboBoxStyle` has the `background`, `control`,
    `dropDownButtonWidth`, `font`, `label`, `renderType`, `selectedTextColor`, `selectionColor`,
    and `textColor` properties.'
  prefs: []
  type: TYPE_NORMAL
- en: RadioButton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type of button provides a choice between different options, and only one
    can be checked at a time. This button consists of the radio button control and
    the text label. You need the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`checked`**:** This can be `true` or `false`. It''s `true` if the radio button
    is checked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pressed`**:** This can be `true` or `false`. It''s `true` if the button is
    pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hovered`**:** This can be `true` or `false`. It''s `true` if the button is
    hovered over by the mouse pointer.'
  prefs: []
  type: TYPE_NORMAL
- en: '`text`**:** This is a `string` that sets the text that will be displayed near
    the radio button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tooltip`**:** This is a `string` that sets the tooltip for this button.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. The radio button will
    be focused when pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`exclusiveGroup`**:** This is the group that the button will belong to.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styling for the button, such as the `RadioButtonStyle`
    type. The `background`, `control`, `indicator`, `label`, and `spacing` properties
    are available in the `RadioButtonStyle` type.'
  prefs: []
  type: TYPE_NORMAL
- en: TextField
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: These elements provide the functionality to work with and visualize text data.
    The user can paste, copy, edit, and insert text from a file or input text manually,
    or use another operation related to the text in the text field. In the `QtQuick`
    module, the `TextArea` and `TextField` types are available for these tasks.
  prefs: []
  type: TYPE_NORMAL
- en: TextArea
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type allows lines of editable formatted text. We need to use the following `import`
    statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text`**:** This is a `string` that will be displayed in the text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`textFormat`**:** This `enumeration` is the type of text field that will be
    provided with this `TextArea`. It can be `TextEdit.AutoText`, which will automatically
    determine whether the text will be either plain or rich text; `TextEdit.PlainText`,
    where the text will be plain; and `TextEdit.RichText`, which will make rich text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`textDocument`**:** The `textDocument` property exposes the `QQuickTextDocument` class.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`baseUrl`:** This specifies a base URL that will be used to resolve relative
    URLs within the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`hoveredLink`:** This is a link `string`. When hovered over by a mouse, you
    can see that a link has been embedded in the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`wrapMode`:** This `enumeration` provides a wrapping of the text related
    to the width of the text area. The available flags are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TextEdit.NoWrap`: Wrapping will not be available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextEdit.WordWrap`: Text wrapping by the words (the default).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextEdit.WrapAnywhere`: Text will be wrapped anywhere.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextEdit.Wrap`: If possible, the text will be wrapped by words, or if the
    line of the text is long and has no spaces, it will be wrapped at an appropriate
    point on the line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`length`**:** This is an integer that returns the number of plain text characters
    in the text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`lineCount`**:** This is an integer that returns the number of lines in the
    text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMethodComposing`**:** This can be `true` or `false`. If `true`, the text
    area will have partial text input from an input method.'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMethodHints`**:** This `enumeration` provides the types of the input
    methods that can be implemented with text area flags such as `Qt.ImhHiddenText`
    for the passwords.'
  prefs: []
  type: TYPE_NORMAL
- en: '`readOnly`**:** This can be `true` or `false`. If `true`, the text area will
    be read-only.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectByKeyboard`**:** This can be `true` or `false`, and if `true`, it allows
    users to select text with the keyboard (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectByMouse`**:** This can be `true` or `false`, and if `true`, it allows
    users to select text with the mouse (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectedText`**:** This is a `string` of the currently selected text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectionStart`**:** This is an integer for the position of the cursor before
    the first character in the selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectionEnd`**:** This is an integer for the position of the cursor after
    the last character in the selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`canPaste`**:** This can be `true` or `false`, and returns `true` if the content
    in the clipboard can be pasted into the text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`canRedo`**:** This can be `true` or `false`, and returns `true` if the text
    was edited and can be redone.'
  prefs: []
  type: TYPE_NORMAL
- en: '`canUndo`**:** This can be `true` or `false`, and returns `true` if the text
    was edited and can be undone.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursorPosition`**:** This is an integer for the position of the cursor in
    the text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursorRectangle`**:** This is the rectangle where the text cursor is rendered
    within this text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. If `true`, the text
    area will be focused when pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`backgroundVisible`**:** This can be `true` or `false`, and if `true`, the
    background is filled (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`tabChangesFocus`**:** This can be `true` or `false`. This property determines
    whether tab changes focus, or is accepted as input (the default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`effectiveHorizontalAlignment`**:** This `enumeration` is for the effective
    horizontal alignment of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`horizontalAlignment`**:** This `enumeration` sets the alignment of the text,
    such as `TextEdit.AlignHCenter`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`verticalAlignment`**:** This `enumeration` sets the alignment of the text,
    such as `TextEdit.AlignTop`, `TextEdit.AlignVCenter` (the default), or `TextEdit.AlignBottom`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`textMargin`**:** This defines the margins (in pixels) around the text in the
    text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`textColor`**:** This is the color of the text in the area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font`**:** This is the font of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`menu`**:** This component is the edit menu for working with text selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styling for the text area, such as the
    `TextAreaStyle` type. The properties in `TextAreaStyle` are `backgroundColor`,
    `control`, `renderType`, `font`, `selectedTextColor`, `selectionColor`, `textColor`,
    and `textMargin`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following signals are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`editingFinished()`: This will be emitted when the area loses focus. The handler
    is `onEditingFinished`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`linkActivated(string link)`: This will be emitted when the user clicks on
    a link in the text. The handler is `onLinkActivated`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`linkHovered(string link)`: This will be emitted when a link is hovered over
    in the text. The handler is `onLinkHovered`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are its methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`append(string text)`: This adds the `string` as a new line at the end of the
    text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`copy()`: This copies the selected text to the clipboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cut()`: This cuts the selected text to the clipboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '`paste()`: This inserts the selected text from the clipboard to the text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`deselect()`: This removes the text selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`getFormattedText(int start, int end)`: This returns the text with formatting
    between the start and end positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`getText(int start, int end)`: This returns the text without formatting between
    the start and end positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`insert(int position, string text)`: This inserts the text to the position
    in the text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isRightToLeft(int start, int end)`: This is `true` if the direction of the
    text between the start/end positions is right to left.'
  prefs: []
  type: TYPE_NORMAL
- en: '`moveCursorSelection(int position, mode=TextEdit.SelectCharacters)`: This moves
    the cursor to the specified position and updates the mode parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: '`positionToRectangle(position)`: This returns the rectangle at the position
    in the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`undo()`: If available, this undoes the last edit action of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`redo()`: If available, this redoes the last edit action of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`remove(int start, int end)`: This removes the text between the start/end positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`select(int start, int end)`: This selects the text between the start/end positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectAll()`: This selects all the text of the text area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectWord()`: This selects the word that is closest to the current cursor
    position.'
  prefs: []
  type: TYPE_NORMAL
- en: TextField
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type provides a single line of editable plain text. The `TextField` type
    requires the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`text`**:** This is a `string` that will be displayed in the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`displayText`**:** This is a `string` of text that''s displayed in the text
    field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`echoMode`**:** This `enumeration` sets how text will be displayed. The available
    modes are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`TextInput.Normal`: This is for normal text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextInput.Password`: This is for password text.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextInput.NoEcho`: This is for text that is not displayed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TextInput.PasswordEchoOnEdit`: This is for text that will be displayed as
    normal while editing, otherwise, the characters will be shown as asterisks.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`placeholderText`**:** This `string` is the text that will be displayed when
    text field is empty.'
  prefs: []
  type: TYPE_NORMAL
- en: '`length`**:** This is an integer that returns the number of plain text characters
    in the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumLength`**:** This is an integer that is the maximum length of the text
    in the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMask`**:** This is a `string` of an input mask on the `TextField`, and
    restricts the allowable text inputs.'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMethodComposing`**:** This can be `true` or `false`. The text field will
    have partial text input from an input method.'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMethodHints`**:** This `enumeration` provides the types of input methods
    that can be implemented with the text field, with flags such as `Qt.ImhHiddenText`
    for the passwords.'
  prefs: []
  type: TYPE_NORMAL
- en: '`readOnly`**:** This can be `true` or `false`. If `true`, the text field will
    be read-only.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectByMouse`**:** This can be `true` or `false`, and if `true`, it allows
    us to select text with the mouse (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectedText`**:** This is a `string` of the currently selected text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectionStart`**:** This is the integer for the position of the cursor before
    the first character in the selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectionEnd`**:** This is the integer for the position of the cursor after
    the last character in the selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`canPaste`**:** This can be `true` or `false`, and returns `true` if the content
    on the clipboard can be pasted into the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`canRedo`**:** This can be `true` or `false`, and returns `true` if the text
    was edited and can be redone.'
  prefs: []
  type: TYPE_NORMAL
- en: '`canUndo`**:** This can be `true` or `false`, and returns `true` if the text
    was edited and can be undone.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursorPosition`**:** This is an integer of the position of the cursor in the
    text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursorRectangle`**:** This is the rectangle where the text cursor is rendered
    within the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnPress`**:** This can be `true` or `false`, and if `true`, the
    text field will be focused when pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`acceptableInput`**:** This can be `true` or `false`, and returns `true` if
    the text is acceptable.'
  prefs: []
  type: TYPE_NORMAL
- en: '`hovered`**:** This can be `true` or `false`, depending on whether the text
    field is hovered over or not.'
  prefs: []
  type: TYPE_NORMAL
- en: '`effectiveHorizontalAlignment`**:** This `enumeration` is the effective horizontal
    alignment of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`horizontalAlignment`**:** This `enumeration` sets the alignment of the text,
    such as `TextInput.AlignHCenter`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`verticalAlignment`**:** This `enumeration` sets the alignment of the text,
    such as `TextInput.AlignTop`, `TextInput.AlignVCenter` (the default), and `TextInput.AlignBottom`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`textColor`**:** This is the color of the text in the area.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font`**:** This is the font of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`menu`**:** This component is the edit menu for working with the text selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`validator`**:** This sets a validator on the `TextField`. The supported validators
    are `IntValidator`, `DoubleValidator`, and `RegExpValidator`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styling for the text field, such as the
    `TextFieldStyle` type. In this type, the `background`, `control`, `passwordCharacter`,
    `placeholderTextColor`, `renderType`, `font`, `selectedTextColor`, `selectionColor`,
    and `textColor` properties are available.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These signals are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`editingFinished()`: This is emitted when the field loses focus. The handler
    is `onEditingFinished`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`accepted()`: This is emitted when the *return* or *Enter* key is pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following methods are available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`copy()`: This copies the selected text to the clipboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cut()`: This cuts the selected text to the clipboard.'
  prefs: []
  type: TYPE_NORMAL
- en: '`paste()`: This inserts the selected text from the clipboard to the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`deselect()`: This removes the text selection.'
  prefs: []
  type: TYPE_NORMAL
- en: '`getText(int start, int end)`: This returns the text without formatting between
    the start and end positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`insert(int position, string text)`: This inserts the text in the specified
    position in the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`isRightToLeft(int start, int end)`: This is `true` if the direction of the
    text between the start/end positions is right to left.'
  prefs: []
  type: TYPE_NORMAL
- en: '`undo()`: If this is available, it undoes the last edit action of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`redo()`: If this is available, it redoes the last edit action of the text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`remove(int start, int end)`: This removes the text between the start/end positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`select(int start, int end)`: This selects the text between the start/end positions.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectAll()`: This selects all the text in the text field.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectWord()`: This selects the word that is closest to the current cursor
    position.'
  prefs: []
  type: TYPE_NORMAL
- en: Navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `QtQuick.Controls` module has an instrument for constructing navigation
    tools inside GUI applications. The `import` statement for these types is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: It can be implemented with the types that are mentioned in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: ScrollView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type provides scrolling within another item. It allows us to scroll the
    item if its height and width are more than the main window, and it adds scroll
    bars. The `ScrollView` type has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentItem`**:** This is the content item for this scroll.'
  prefs: []
  type: TYPE_NORMAL
- en: '`flickableItem`**:** This is the flickable item for this scroll.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frameVisible`**:** This can be `true` or `false`. When `true`, the scroll
    view will render the frame around its content.'
  prefs: []
  type: TYPE_NORMAL
- en: '`highlightOnFocus`**:** This can be `true` or `false`. If `true`, it will highlight
    around the frame when it has input focus.'
  prefs: []
  type: TYPE_NORMAL
- en: '`horizontalScrollBarPolicy`**:** This `enumeration` is the policy for the horizontal
    scroll bar, such as `Qt.ScrollBarAsNeeded`, `Qt.ScrollBarAlwaysOff`, and `Qt.ScrollBarAlwaysOn`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`verticalScrollBarPolicy`**:** This `enumeration` is the policy for the vertical
    scroll bar with the same modes as horizontal.'
  prefs: []
  type: TYPE_NORMAL
- en: '`viewport`**:** This is the size of the viewport, and tells us how much of
    the content area is visible relative to the window.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styling for the scroll, such as the `ScrollViewStyle`
    type. In the type, the `control`, `corner`, `decrementControl`, `frame`, `handle`,
    `handleOverlap`, `incrementControl`, `minimumHandleLength`, `scrollBarBackground`,
    `scrollToClickedPosition`, and `transientScrollBars` properties are available.'
  prefs: []
  type: TYPE_NORMAL
- en: SplitView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is a QML type for a draggable splitter for horizontal or vertical layouts.
    This type has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`handleDelegate`**:** This component is the delegate between each child item.
    It has properties such as `styleData.index`, `styleData.hovered`, `styleData.pressed`,
    and `styleData.resizing`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`orientation`**:** This is an integer that can have a `Qt.Horizontal` (the
    default) or `Qt.Vertical` orientation of the scroll view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`resizing`**:** This can be `true` or `false`. It will return `true` if an
    item of the scroll view is resized by dragging the splitter handles onto it.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addItem(Item item)`: This adds items to the end of the scroll view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeItem(Item item)`: This removes items from the scroll view.'
  prefs: []
  type: TYPE_NORMAL
- en: StackView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type constructs a stack-based navigation model. It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`busy`**:** This can be `true` or `false`. It will return `true` if the transition
    is running.'
  prefs: []
  type: TYPE_NORMAL
- en: '`currentItem`**:** This gets the top-most item in the stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '`delegate`**:** The `StackViewDelegate` is a transition that will be used for
    pushing and popping items with this stack view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`depth`**:** This is an integer of the number of items in the stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '`initialItem`**:** This is the first item that will be shown in the stack.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`clear()`: This removes all the items from the stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '`completeTransition()`: This immediately completes the running transition.'
  prefs: []
  type: TYPE_NORMAL
- en: '`find(function, bool onlySearchLoadedItems=false)`: This finds the item inside
    this stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '`get(int index, bool dontLoad=false)`: This returns the item of the stack that
    has the specified index.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pop(Item item=undefined)`: This pops items off the stack.'
  prefs: []
  type: TYPE_NORMAL
- en: '`push(Item item)`: This pushes items to the stack.'
  prefs: []
  type: TYPE_NORMAL
- en: TabView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type allows you to select one of the multiple stacked items and imply
    the tab-based navigation model. It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentItem`**:** This is the content item of the tab view.'
  prefs: []
  type: TYPE_NORMAL
- en: '`count`**:** This integer is the count of the current tab.'
  prefs: []
  type: TYPE_NORMAL
- en: '`currentIndex`**:** This integer is the index of the current tab.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frameVisible`**:** This can be `true` or `false`. If it''s `true`, the tab
    frame around the content will be visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tabPosition`**:** This integer is the position of the tab controls, such as
    `Qt.TopEdge` (the default) or `Qt.BottomEdge`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tabsVisible`**:** This can be `true` or `false`. If it''s `true`, the tab
    bar will be visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styling for the tab view, such as the
    `TabViewStyle` type. This type provides the `control`, `frame`, `frameOverlap`,
    `leftCorner`, `rightCorner`, `tab`, `tabBar`, `tabOverlap`, `tabsAlignment`, and
    `tabsMovable` properties.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addTab(string title, Component component)`: This adds a new tab.'
  prefs: []
  type: TYPE_NORMAL
- en: '`getTab(int index)`: This returns the tab by its index.'
  prefs: []
  type: TYPE_NORMAL
- en: '`insertTab(int index, string title, Component component)`: This inserts a new
    tab at the given index.'
  prefs: []
  type: TYPE_NORMAL
- en: '`moveTab(int from, int to)`: This moves the tab from one index to another.'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeTab(int index)`: This removes and destroys the tab at the index provided.'
  prefs: []
  type: TYPE_NORMAL
- en: TableView
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type implements a table in the GUI application. In addition to the `ListView`,
    scroll bars, header sections, and styling are available. This type has the following
    properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`columnCount`**:** This integer is the number of columns in the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rowCount`: This integer is the number of rows in the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentFooter`**:** This component is the content of the footer of the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`contentHeader`**:** This component is the content of the header of the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`currentRow`**:** This integer is the current index of the row in the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`alternatingRowColors`**:** This can be `true` or `false`. If it''s `true`
    (the default), the colors of the rows will alternate.'
  prefs: []
  type: TYPE_NORMAL
- en: '`backgroundVisible`**:** This can be `true` or `false`. If it''s `true` (the
    default), the background will be filled.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frameVisible`**:** This can be `true` or `false`. If it''s `true` (the default),
    it will render a frame around its content.'
  prefs: []
  type: TYPE_NORMAL
- en: '`headerVisible`**:** This can be `true` or `false`. If it''s `true` (the default),
    the header will be visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`headerDelegate`**:** This component defines a delegate to draw a header.'
  prefs: []
  type: TYPE_NORMAL
- en: '`itemDelegate`**:** This component defines a delegate to draw a cell.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rowDelegate`**:** This component defines a delegate to draw a row.'
  prefs: []
  type: TYPE_NORMAL
- en: '`model`**:** This is the model for the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`section.property`**:** This is a `string` for the name of the property and
    is the basis of each section.'
  prefs: []
  type: TYPE_NORMAL
- en: '`section.criteria`**:** This `enumeration` is the criteria for forming each
    section, such as `ViewSection.FullString` (the default) or `ViewSection.FirstCharacter`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`section.delegate`**:** This component is the delegate component for each section.'
  prefs: []
  type: TYPE_NORMAL
- en: '`section.labelPositioning`**:** This `enumeration` is the positioning of the
    labels for the sections, such as `ViewSection.InlineLabels` (the default), `ViewSection.CurrentLabelAtStart`,
    and `ViewSection.NextLabelAtEnd`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sortIndicatorColumn`**:** This integer is the index of the current sort column.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sortIndicatorOrder`**:** This integer sets the sorting order of the indicator,
    such as `Qt.AscendingOrder` (the default) and `Qt.DescendingOrder`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`sortIndicatorVisible`**:** This can be `true` or `false`. If `true`, the sort
    indicator will be visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`selection`:** This is the current row selection of the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectionMode`**:** This integer is the mode of the user selection, such as
    `SelectionMode.NoSelection`, `SelectionMode.SingleSelection` (the default), `SelectionMode.MultiSelection`,
    `SelectionMode.ExtendedSelection`, and `SelectionMode.ContiguousSelection`.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`style`:** This component provides styling for the table, such as the `TableViewStyle`
    type. This type provides the `activateItemOnSingleClick`, `alternateBackgroundColor`,
    `backgroundColor`, `highlightedTextColor`, and `textColor` properties.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It has the following signals:'
  prefs: []
  type: TYPE_NORMAL
- en: '`activated(int row)`: This is emitted when an item is activated by the mouse
    or keyboard. The handler is `onActivated`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`clicked(int row)`: This is emitted when a row is clicked on. The handler is
    `onClicked`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`doubleClicked(int row)`: This is emitted when a row is double-clicked. The
    handler is `onDoubleClicked`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pressAndHold(int row)`: This is emitted when a row is pressed and held. The
    handler is `onPressAndHold`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It has the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`addColumn(object column)`: The column will be added.'
  prefs: []
  type: TYPE_NORMAL
- en: '`getColumn(int index)`**:** This returns the column at the specified index.'
  prefs: []
  type: TYPE_NORMAL
- en: '`insertColumn(int index, object column)`: This inserts a column into the table.'
  prefs: []
  type: TYPE_NORMAL
- en: '`moveColumn(int from, int to)`: This moves the column from the specified index
    to another index.'
  prefs: []
  type: TYPE_NORMAL
- en: '`positionViewAtRow(int row, PositionMode mode)`: This is the position of the
    view in the specified row defined by the mode, such as `ListView.Beginning`, `ListView.Center`,
    `ListView.End`, `ListView.Visible`, or `ListView.Contain`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`removeColumn(int index)`: This removes and destroys the column in the table
    by the index.'
  prefs: []
  type: TYPE_NORMAL
- en: '`resizeColumnsToContents()`: This resizes the column according to the content.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rowAt(int x, int y)`: This returns the index of the row by its `x` and `y`
    coordinates.'
  prefs: []
  type: TYPE_NORMAL
- en: Additional tools
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the `QtQuick.Controls` module, useful types are available that can be implemented
    in GUI applications. All of these types require the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: Let's go through all of these types in detail.
  prefs: []
  type: TYPE_NORMAL
- en: Calendar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type provides the calendar widget, and has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`dayOfWeekFormat`**:** This integer is the format for when the days of the
    week are displayed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`frameVisible`**:** This can be `true` or `false`. If `true`, the frame surrounding
    the calendar will be visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumDate`**:** This is the earliest date that the calendar will accept.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumDate`**:** This is the latest date that the calendar will accept.'
  prefs: []
  type: TYPE_NORMAL
- en: '`navigationBarVisible`**:** This can be `true` or `false`. If `true`, the navigation
    bar will be visible.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectedDate`**:** This is the date that was selected by the user.'
  prefs: []
  type: TYPE_NORMAL
- en: '`visibleMonth`**:** This integer is the month from `0` to `11` that will be
    shown on the calendar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`visibleYear`**:** This integer is the year that will be shown.'
  prefs: []
  type: TYPE_NORMAL
- en: '`weekNumbersVisible`**:** This can be `true` or `false`. If `true`, the week numbers
    will be visible (the default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: '**`style`:** This component provides styling of the calendar with the `CalendarStyle`
    type. With the `CalendarStyle` type, the `background`, `control`, `dayDelegate`,
    `dayOfWeekDelegate`, `gridColor`, `gridVisible`, `navigationBar`, and `weekNumberDelegate`
    properties are available.'
  prefs: []
  type: TYPE_NORMAL
- en: ProgressBar
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This provides a visualized element showing the progress of an operation in
    the GUI. It has the following properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`**:** This is the current value of the progress bar.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumValue`**:** This is the minimum value of the progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumValue`**:** This is the maximum value of the progress.'
  prefs: []
  type: TYPE_NORMAL
- en: '`indeterminate`**:** This can be `true` or `false`. If `true`, the progress
    will be animated as busy (the default is `false`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`orientation`**:** This integer is the horizontal or vertical orientation of
    the progress bar (the default is `Qt.Horizontal`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`hovered`**:** This can be `true` or `false`. If `true`, this progress bar
    is being hovered over.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styles for the progress bar with the `ProgressBarStyle`
    type. This type has the `background`, `control`, `currentProgress`, `panel`, and
    `progress` properties.'
  prefs: []
  type: TYPE_NORMAL
- en: Switch
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type implements a toggle button, which can be switched or have a checked
    or unchecked state. Its properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`checked`**:** This can be `true` or `false`. It is `true` if the toggle button
    is checked.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pressed`**:** This can be `true` or `false`. It is `true` if the toggle button
    is pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. If `true`, the switch
    will be focused when pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`exclusiveGroup`**:** This is the group that the toggle button will belong
    to.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styling for this button with the `SwitchStyle`
    type. In this type, the `groove` and `handle` properties are available. `groove` can
    implement an item, such as a rectangle.'
  prefs: []
  type: TYPE_NORMAL
- en: Slider
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is used to provide a sliding handle that can be moved horizontally or
    vertically. The properties are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`**:** This is the current value of the slider (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumValue`**:** This is the minimum value of the slider (the default is
    `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumValue`**:** This is the maximum value of the slider (the default is
    `1.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`stepSize`**:** This is the slider step size. The default value, `0.0`, indicates
    a continuous range.'
  prefs: []
  type: TYPE_NORMAL
- en: '`tickmarksEnabled`**:** This can be `true` or `false`. If it''s `true`, the
    slider will display tickmarks.'
  prefs: []
  type: TYPE_NORMAL
- en: '`updateValueWhileDragging`**:** This can be `true` or `false`. If it''s `true`,
    the current value will be updated by moving the slider handle. Otherwise, it will
    be updated when it has been released.'
  prefs: []
  type: TYPE_NORMAL
- en: '`orientation`**:** This integer is the horizontal or vertical orientation of
    the slider (the default is `Qt.Horizontal`)'
  prefs: []
  type: TYPE_NORMAL
- en: '`hovered`**:** This can be `true` or `false`. If `true`, this slider handle
    is being hovered over.'
  prefs: []
  type: TYPE_NORMAL
- en: '`pressed`**:** This can be `true` or `false`. It returns `true` if the slider
    handle is pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnPress`**:** This can be `true` or `false`. If `true`, the slider
    will be focused when pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component styles the slider with the `SliderStyle` type.
    In this type, the `control`, `groove`, `handle`, `panel`, and `tickmarks` properties
    are available.'
  prefs: []
  type: TYPE_NORMAL
- en: SpinBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type allows the user to choose a value by clicking the up and down buttons
    or by typing in a value. The properties of this type are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`value`**:** This is the current value of the spin box (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumValue`**:** This is the minimum value of the range in the spin box
    (the default is `0.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumValue`**:** This is the maximum value of the range in the spin box
    (the default is `1.0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`stepSize`**:** This is the step that will be incremented or decremented when
    the up/down button is pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`prefix`**:** This is a `string` that adds a prefix for this value, such as
    `$`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`suffix`**:** This is a `string` that adds a suffix for this value, such as
    `ms`.'
  prefs: []
  type: TYPE_NORMAL
- en: '`decimals`**:** This integer is the number of decimals of the spin box (the
    default is `0`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`inputMethodComposing`**:** This can be `true` or `false`. The spin box has
    partial text input from an input method.'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursorPosition`**:** This is the integer position of the cursor in the spin
    box.'
  prefs: []
  type: TYPE_NORMAL
- en: '`selectByMouse`**:** This can be `true` or `false`. The values of the spin
    box can be selected by the mouse (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`hovered`**:** This can be `true` or `false`, and is `true` if the spin box
    is being hovered over.'
  prefs: []
  type: TYPE_NORMAL
- en: '`horizontalAlignment`**:** This integer value will align the box with a `Qt.AlignLeft`,
    `Qt.AlignHCenter`, or `Qt.AlignRight` alignment.'
  prefs: []
  type: TYPE_NORMAL
- en: '`font`**:** This sets the font for the spin box values.'
  prefs: []
  type: TYPE_NORMAL
- en: '`activeFocusOnPress`**:** This can be `true` or `false`, and if `true`, the
    spin box will be focused when pressed.'
  prefs: []
  type: TYPE_NORMAL
- en: '`menu`**:** This component sets the menu for working with text selection with
    the menu type.'
  prefs: []
  type: TYPE_NORMAL
- en: '**`style`:** This component provides spin box styling with the `SpinBoxStyle`
    type. This type has the `background,` `control`, `decrementControl`, `incrementControl`,
    `horizontalAlignment`, `font`, `renderType`, `selectedTextColor`, `selectionColor`,
    and `textColor` properties.'
  prefs: []
  type: TYPE_NORMAL
- en: BusyIndicator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type provides an indication of the progress of an operation, such as loading,
    downloading, and installing. It''s used to inform the user about operation progress
    with a graphical element. This type has two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`running`**:** This can be `true` or `false`. The element will indicate that
    an activity is taking place (the default is `true`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`style`**:** This component provides styling for this indicator with the `BusyIndicatorStyle`
    type by using the `control` and `indicator` properties.'
  prefs: []
  type: TYPE_NORMAL
- en: Controls implementation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s implement some of the controls we described in this chapter in our application. Create
    a file called `USplit.qml`in the `qmls/` directory and write the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `SplitView` to the parent `Item`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: This realizes the split view of the buttons for the text and table windows.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the first rectangle as a `SplitView` element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: If this rectangle is clicked on, a window with various text fields will be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the second rectangle to the `USplit.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'If the second rectangle is clicked on, the window with a table will be displayed
    in the application. We can see a similar result by running the application. The
    split view with the `Texts` and `Table` options is displayed in the bottom-right
    corner of the application window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/db3fda66-66fe-4525-b89d-8081ce497737.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, let''s create a `UTexts.qml` file in the `qmls/` directory to demonstrate
    the text fields and additional components:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `GridLayout` to the `UTexts.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: Dialogs are used to implement the font and color dialog windows in the application.
    The elements will be arranged with the grid layout positioning mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `TextArea` to the `GridLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: This sets the properties for the text area, such as `font.pixelSize`, `textColor`,
    and `textMargin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `Calendar` after the `TextArea` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: The calendar will be displayed in the top-right corner of the application window.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the `Slider` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: The `Slider` will increase or decrease the size of the text area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `ComboBox` after the `Slider`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: This combobox allows the static dialog windows to change the color and font
    in the text area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the radio buttons:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The `ExclusiveGroup` type groups these radio buttons with the possibility to
    make only one choice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the check boxes to the application, arranged with the `GridLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: These checkboxes allow the selection of various date implementations in the
    text area field. One option, or all options together, can be selected.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, add the single-line `TextField`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: In this text field, the total number of characters in the text area will be
    displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `Rectangle` item that will represent the main button in this window:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: This custom rectangle uses the `Text` type for the text on this button; the
    `BusyIndicator`, which will indicate that a process is in progress; and `Timer`,
    which sets the `interval`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we need to add a JavaScript function to this `Rectangle` item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: This JavaScript function will manipulate the data and set the result to the
    text area.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the `MouseArea` type to this rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'This mouse area will be used with the rectangle to realize the click and hover
    effects. Now we can start the application. To do this, choose the `Texts` option
    in the bottom-right corner, and see a result similar to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a6026a3-2779-4a34-b97c-d5d982320ed8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we can create a `UTable.qml` file in the same directory so that we can
    implement a simple table in the GUI application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a table view to the `UTable.qml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The `TableView` QML type creates a table in the application. The `TableViewColumn`
    types are used for columns in this table and have title and role properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `style` and `model` properties to the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'The data in this table is realized with the `model` property of the `TableView`
    type. The `ListModel` type contains the `ListElement` types with specified data
    for titles related to each cell. The table looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/cf808d1a-1fda-4961-bbba-ced50c8fca07.png)'
  prefs: []
  type: TYPE_IMG
- en: We have three columns with data for each cell of the table.
  prefs: []
  type: TYPE_NORMAL
- en: Layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we run the application and try to resize the window with controls such as
    a fullscreen button or with the mouse, we will get some unresizable views. This
    may be because of unresizable items, or because the positions of some of the items
    will not fit the application. One of the causes of this is that the items and
    elements have a fixed position and size. The `Layouts` submodule of `QtQuick`
    tries to solve these problems. This submodule is used to arrange items in a UI.
    Also, `Layouts` QML types resize their items, which makes them well-suited to
    application views. With the help of the `Layouts` submodule, all the items will
    be rearranged in relation to window resizing. At the end of this chapter, we will
    describe how to arrange GUI items with the layouts representation. The Qt Quick
    `Layouts` submodule has the following `import` statement:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: Let's go through the types that can be used to provide layout arrangement for
    items.
  prefs: []
  type: TYPE_NORMAL
- en: Layout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The basic QML type for the grid/row/column layouts has the following properties
    that can be used in layout construction:'
  prefs: []
  type: TYPE_NORMAL
- en: '`column`**:** This is an integer that specifies the column position of the
    item in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`row`**:** This is an integer that specifies the row position of the item in
    the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`columnSpan`**:** This integer is the number of columns occupied by the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rowSpan`**:** This integer is the number of rows occupied by the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`fillWidth`**:** This can be `true` or `false`. If `true`, the item will have
    the full width of the occupied cell in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`fillHeight`**:** This can be `true` or `false`. If `true`, the item will have
    the full available height of the cell in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumWidth`**:** This sets the maximum available width for an item in the
    cell of the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`maximumHeight`**:** This sets the maximum available height for an item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumWidth`**:** This sets the minimum available width for an item in the
    cell of the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`minimumHeight`**:** This sets the minimum available height for an item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`preferredWidth`**:** This is the preferred width of an item in a layout. By
    default, it is set to `-1` or to the `implicitWidth` of an item. It is related
    to some items that have a natural size, such as images and text.'
  prefs: []
  type: TYPE_NORMAL
- en: '`preferredHeight`**:** This is the preferred width of an item in a layout (the
    default is `-1`).'
  prefs: []
  type: TYPE_NORMAL
- en: '`margins`**:** This sets the margins on all sides outside the item in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`topMargin`**:** This sets the top margin outside of the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`leftMargin`**:** This sets the left margin outside of the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`bottomMargin`**:** This is the bottom margin outside of the item in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rightMargin`**:** This is the right margin outside of the item.'
  prefs: []
  type: TYPE_NORMAL
- en: '`alignment`**:** The alignment of the item inside the layout cell.'
  prefs: []
  type: TYPE_NORMAL
- en: 'These properties are used inside the item declaration with the following example
    syntax: `Layout.fillWidth: true`.'
  prefs: []
  type: TYPE_NORMAL
- en: ColumnLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This type arranges items by columns. It has two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`layoutDirection`**:** This `enumeration` is the direction of the items in
    the layout (the default is `Qt.LeftToRight`). `Qt.RightToLeft` can be used as
    well.'
  prefs: []
  type: TYPE_NORMAL
- en: '`spacing`**:** This is the spacing between each cell in the column (the default
    is `5`).'
  prefs: []
  type: TYPE_NORMAL
- en: RowLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This QML type will arrange the items in the layout by rows. It has two properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '`layoutDirection`**:** This `enumeration` is the direction of the items in
    the layout (the default is `Qt.LeftToRight`). `Qt.RightToLeft` can be used as
    well.'
  prefs: []
  type: TYPE_NORMAL
- en: '`spacing`**:** This is the spacing between each cell in the row (the default
    is `5`).'
  prefs: []
  type: TYPE_NORMAL
- en: GridLayout
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is the most highly recommended type of layout implementation. It arranges
    items in the grid by the row/column position of the element. This type has the
    following properties. Note that these properties are not attached, and can be
    used just inside the `GridLayout` declaration (not inside the item of the layout):'
  prefs: []
  type: TYPE_NORMAL
- en: '`columns`**:** This integer is the column limit. It specifies the number of
    columns that will be used for the item''s position in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rows`**:** This integer is the row limit for positioned items.'
  prefs: []
  type: TYPE_NORMAL
- en: '`columnSpacing`**:** This is the spacing between each column in the layout.'
  prefs: []
  type: TYPE_NORMAL
- en: '`rowSpacing`**:** This is the spacing between each row.'
  prefs: []
  type: TYPE_NORMAL
- en: '`flow`**:** This `enumeration` is the flow direction of items that do not have
    an explicit position in the layout. The default is `GridLayout.LeftToRight`. `GridLayout.TopToBottom`
    can also be used.'
  prefs: []
  type: TYPE_NORMAL
- en: '`layoutDirection`**:** This `enumeration` is the direction of the items in
    the layout. The default is `Qt.LeftToRight`. `Qt.RightToLeft` can also be used.'
  prefs: []
  type: TYPE_NORMAL
- en: Completing layouts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to demonstrate the layout construction advantages as opposed to using
    fixed positioning, let''s rebuild the `u_qml.qml` file, which consists of the
    fixed size of elements, with an implementation of the `GridLayout`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `GridLayout` to the `u_qml.qml`file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: This is the `GridLayout` for the arrangement of `rect1` in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the first `GridLayout`, add the second `GridLayout`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: This is the `GridLayout` for the arrangement of `rect2` in the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `GridLayout` for the buttons of the second rectangle:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: The buttons of the right panel will be arranged with `GridLayout` positioning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Complete this file by adding some properties to the `SplitView`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: This `SplitView` will be arranged in the button's grid layout of the second
    rectangle. Now we can run the `u_app.py` file and check that it is right. The
    full examples are available in the GitHub repository of this book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we covered the `QtQuick` module—the basic library for working
    with QML in the Qt framework. We learned about important concepts, such as layouts,
    controls, and some additional fields. For detailed information, you must go through
    the official documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Now we will interrupt the exploration of QML and move on to the next stage and
    use the graphical Qt library with Python bindings, which is the main target of
    this book.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will learn about Python-related libraries, such as PyQt
    and PySide. This will give us practical experience with Python, and we will use
    all of the best things from Qt.
  prefs: []
  type: TYPE_NORMAL
