["```py\nimport cv2 \nimport numpy as np \n```", "```py\nfrontalface_cascade= cv2.CascadeClassifier('haarcascade_frontalface_alt.xml') \n```", "```py\nif frontalface_cascade.empty(): \n  raiseIOError('Unable to load the face cascade classifier xml file') \n```", "```py\ncapture = cv2.VideoCapture(0) \n```", "```py\nscale_factor = 0.5 \n```", "```py\n# Loop until you hit the Esc key \nwhile True: \n```", "```py\n  ret, frame = capture.read() \n  frame = cv2.resize(frame, None, fx=scale_factor, fy=scale_factor,  \n            interpolation=cv2.INTER_AREA) \n```", "```py\n  gray_image = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY) \n```", "```py\n  face_rectangle = frontalface_cascade.detectMultiScale(gray_image, 1.3, 5)\n```", "```py\n  for (x,y,w,h) in face_rectangle: \n    cv2.rectangle(frame, (x,y), (x+w,y+h), (0,255,0), 3) \n```", "```py\n    cv2.imshow('Face Detector', frame) \n```", "```py\n  a = cv2.waitKey(1) \n  if a == 10: \n    break \n```", "```py\ncapture.release() \ncv2.destroyAllWindows() \n```", "```py\nimport cv2 \nimport numpy as np   \nfrom sklearn import preprocessing \n```", "```py\nclass LabelEncoding(object): \n  # Method to encode labels from words to numbers \n  def encoding_labels(self, label_wordings): \n    self.le = preprocessing.LabelEncoder() \n    self.le.fit(label_wordings) \n```", "```py\n  def word_to_number(self, label_wordings): \n    return int(self.le.transform([label_wordings])[0]) \n```", "```py\n  def number_to_word(self, label_number): \n    return self.le.inverse_transform([label_number])[0] \n```", "```py\ndef getting_images_and_labels(path_input): \n  label_wordings = [] \n```", "```py\n  for roots, dirs, files in os.walk(path_input): \n    for fname in (x for x in files if x.endswith('.jpg')): \n      fpath = os.path.join(roots, fname) \n      label_wordings.append(fpath.split('/')[-2])\n```", "```py\n  images = [] \n  le = LabelEncoding() \n  le.encoding_labels(label_wordings) \n  labels = [] \n  # Parse the input directory \n  for roots, dirs, files in os.walk(path_input): \n    for fname in (x for x in files if x.endswith('.jpg')): \n      fpath = os.path.join(roots, fname) \n```", "```py\n      img = cv2.imread(fpath, 0)  \n```", "```py\n      names = fpath.split('/')[-2] \n```", "```py\n      face = faceCascade.detectMultiScale(img, 1.1, 2, minSize=(100,100)) \n```", "```py\n      for (x, y, w, h) in face: \n        images.append(img[y:y+h, x:x+w]) \n        labels.append(le.word_to_number(names)) \n  return images, labels, le \nif __name__=='__main__': \n  path_cascade = \"haarcascade_frontalface_alt.xml\" \n  train_img_path = 'faces_dataset/train' \n  path_img_test = 'faces_dataset/test' \n```", "```py\n  faceCascade = cv2.CascadeClassifier(path_cascade) \n```", "```py\n  face_recognizer = cv2.createLBPHFaceRecognizer()\n```", "```py\n  imgs, labels, le = getting_images_and_labels(train_img_path) \n```", "```py\n  print \"nTraining...\" \n  face_recognizer.train(imgs, np.array(labels)) \n```", "```py\n  print 'nPerforming prediction on test images...' \n  flag_stop = False \n  for roots, dirs, files in os.walk(path_img_test): \n    for fname in (x for x in files if x.endswith('.jpg')): \n      fpath = os.path.join(roots, fname) \n```", "```py\n      predicting_img = cv2.imread(fpath, 0) \n            # Detect faces \n      face = faceCascade.detectMultiScale(predicting_img, 1.1,  \n                    2, minSize=(100,100)) \n            # Iterate through face rectangles \n      for (x, y, w, h) in face: \n        # Predict the output \n        index_predicted, config = face_recognizer.predict( \npredicting_img[y:y+h, x:x+w]) \n        # Convert to word label \n        person_predicted = le.number_to_word(index_predicted) \n        # Overlay text on the output image and display it \n        cv2.putText(predicting_img, 'Prediction: ' +  person_predicted,  \n                        (10,60), cv2.FONT_HERSHEY_SIMPLEX, 2, (255,255,255), 6) \n        cv2.imshow(\"Recognizing face\", predicting_img) \n      a = cv2.waitKey(0) \n      if a == 27: \n        flag = True \n        break \n    if flag_stop: \n      break \n```"]