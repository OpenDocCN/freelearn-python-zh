["```py\n    $ grep -nr \"location=\" . \n    ./core.py:13: location=current_location, \n    ```", "```py\n    $ grep -nr \"location =\" .\n    ./core.py:10: current_location = get_location() \n    ```", "```py\nType: method_descriptor \n```", "```py\n    >>> d = {}\n    >>> d.update({1: \"one\", 2: \"two\"})\n    >>> d\n    {1: \"one\", 2: 'two'} \n    ```", "```py\n    >>> d.update([(3, \"three\"), (4, \"four\")])\n    >>> d\n    {1: 'one', 2: 'two', 3: 'three', 4: 'four'} \n    ```", "```py\n    >>> d.update(five=5)\n    >>> d\n    {1: 'one', 2: 'two', 3: 'three', 4: 'four', 'five': 5} \n    ```", "```py\n>>> def my_function():\n        \"\"\"Run some computation\"\"\"\n        return None\n     ...\n>>> my_function.__doc__  # or help(my_function)\n 'Run some computation' \n```", "```py\n@dataclass\nclass Point\n    lat: float\n    long: float\n\ndef locate(latitude: float, longitude: float) -> Point:\n    \"\"\"Find an object in the map by its coordinates\"\"\" \n```", "```py\ndef launch_task(delay_in_seconds):\n    ... \n```", "```py\nSeconds = float\ndef launch_task(delay: Seconds):\n    ... \n```", "```py\n>>> locate.__annotations__\n{'latitude': <class 'float'>, 'longitude': <class 'float'>, 'return': <class 'Point'>} \n```", "```py\ndef process_clients(clients: list):\n    ... \n```", "```py\ndef process_clients(clients: list[tuple[int, str]]):\n    ... \n```", "```py\nfrom typing import Tuple\nClient = Tuple[int, str]\ndef process_clients(clients: list[Client]):\n    ... \n```", "```py\nfrom dataclasses import dataclass\n@dataclass\nclass Point:\n    lat: float\n    long: float \n```", "```py\n>>> Point.__annotations__\n{'lat': <class 'float'>, 'long': <class 'float'>}\n>>> Point(1, 2)\nPoint(lat=1, long=2) \n```", "```py\ndef data_from_response(response: dict) -> dict:\n    if response[\"status\"] != 200:\n        raise ValueError\n    return {\"data\": response[\"payload\"]} \n```", "```py\ndef data_from_response(response: dict) -> dict:\n    \"\"\"If the response is OK, return its payload.\n\n    - response: A dict like::\n\n    {\n        \"status\": 200, # <int>\n        \"timestamp\": \"....\", # ISO format string of the current\n        date time\n        \"payload\": { ... } # dict with the returned data\n    }\n\n    - Returns a dictionary like::\n\n    {\"data\": { .. } }\n\n    - Raises:\n    - ValueError if the HTTP status is != 200\n    \"\"\"\n    if response[\"status\"] != 200:\n        raise ValueError\n    return {\"data\": response[\"payload\"]} \n```", "```py\n$ pip install mypy \n```", "```py\ntype_to_ignore = \"something\" # type: ignore \n```", "```py\ndef broadcast_notification(\n    message: str, \n    relevant_user_emails: Iterable[str]\n):\n    for email in relevant_user_emails:\n        logger.info(\"Sending %r to %r\", message, email) \n```", "```py\nbroadcast_notification(\"welcome\", \"user1@domain.com\") \n```", "```py\n$ mypy <file-name>\nerror: Argument 2 to \"broadcast_notification\" has incompatible type \"str\"; expected \"Union[List[str], Tuple[str]]\" \n```", "```py\nFile \"...\", line 22, in <module>: Function broadcast_notification was called with the wrong arguments [wrong-arg-types]\n         Expected: (message, relevant_user_emails: Union[List[str], Tuple[str]])\n  Actually passed: (message, relevant_user_emails: str) \n```", "```py\n$ pip install pylint \n```", "```py\n [DESIGN]\n    disable=missing-function-docstring \n```", "```py\ndef my_function(name):\n    \"\"\"\n    >>> my_function('black')\n    'received Black'\n    \"\"\"\n    return 'received {0}'.format(name.title()) \n```", "```py\nblack -l 79 *.py \n```", "```py\ndef my_function(name):\n    \"\"\"\n    >>> my_function('black')\n    'received Black'\n    \"\"\"\n    return \"received {0}\".format(name.title()) \n```", "```py\n.PHONY: typehint\ntypehint:\n\tmypy --ignore-missing-imports src/\n.PHONY: test\ntest:\n\tpytest tests/\n.PHONY: lint\nlint:\n\tpylint src/\n.PHONY: checklist\nchecklist: lint typehint test\n.PHONY: black\nblack:\n\tblack -l 79 *.py\n.PHONY: clean\nclean:\n\tfind . -type f -name \"*.pyc\" | xargs rm -fr\n\tfind . -type d -name __pycache__ | xargs rm -fr \n```", "```py\nmake checklist \n```"]