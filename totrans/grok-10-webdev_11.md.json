["```py\ninstall_requires=['setuptools',\n'grok',\n'grokui.admin',\n'z3c.testsetup',\n'megrok.form',\n'SQLAlchemy',\n# Add extra requirements here\n],\n\n```", "```py\n$ bin/buildout \n\n```", "```py\n$ bin/python-console \n\n```", "```py\n>>> from sqlalchemy import create_engine\n>>> engine = create_engine('sqlite:///:memory:',echo=True) \n\n```", "```py\n>>> from sqlalchemy import Column, Integer, String\n>>> from sqlalchemy.ext.declarative import declarative_base\n>>> Base = declarative_base() \n\n```", "```py\n>>> class User(Base):\n... __tablename__ = 'users'\n... id = Column(Integer, primary_key=True)\n... name = Column(String)\n... realname = Column(String)\n... role = Column(String)\n... password = Column(String)\n... def __init__(self, name, real_name, role, password):\n... self.name = name\n... self.real_name = real_name\n... self.role = role\n... self.password = password \n\n```", "```py\n>>> metadata = Base.metadata\n>>> metadata.create_all(engine)\n2009-06-30 03:25:36,368 INFO sqlalchemy.engine.base.Engine.0x...5ecL PRAGMA table_info(\"users\")\n2009-06-30 03:25:36,368 INFO sqlalchemy.engine.base.Engine.0x...5ecL ()\n2009-06-30 03:25:36,381 INFO sqlalchemy.engine.base.Engine.0x...5ecL\nCREATE TABLE users (\nid INTEGER NOT NULL,\nname VARCHAR,\nrealname VARCHAR,\nrole VARCHAR,\npassword VARCHAR,\nPRIMARY KEY (id)\n) \n\n```", "```py\n>>> from sqlalchemy.orm import sessionmaker\n>>> Session = sessionmaker(bind=engine)\n>>> session = Session() \n\n```", "```py\n>>> grok_user = User('grok','Grok the Caveman','todo.ProjectMember','secret')\n>>> session.add(grok_user) \n\n```", "```py\n>>> session.commit()\n2009-06-30 03:30:28,873 INFO sqlalchemy.engine.base.Engine.0x...5ecL BEGIN\n2009-06-30 03:30:28,874 INFO sqlalchemy.engine.base.Engine.0x...5ecL INSERT INTO users (name, realname, role, password) VALUES (?, ?, ?, ?)\n2009-06-30 03:30:28,874 INFO sqlalchemy.engine.base.Engine.0x...5ecL ['grok', None, 'todo.ProjectMember', 'secret']\n2009-06-30 03:30:28,875 INFO sqlalchemy.engine.base.Engine.0x...5ecL COMMIT \n\n```", "```py\n>>> for user in session.query(User):\n... print user.name, user.real_name\n...\n2009-06-30 03:32:18,286 INFO sqlalchemy.engine.base.Engine.0x...5ecL BEGIN\n2009-06-30 03:32:18,287 INFO sqlalchemy.engine.base.Engine.0x...5ecL SELECT users.id AS users_id, users.name AS users_name, users.realname AS users_realname, users.role AS users_role, users.password AS users_password\nFROM users\n2009-06-30 03:32:18,288 INFO sqlalchemy.engine.base.Engine.0x...5ecL []\ngrok Grok the Caveman \n\n```", "```py\n>>> session.close() \n\n```", "```py\nfrom sqlalchemy import create_engine\nfrom sqlalchemy import Column, Integer, String\nfrom sqlalchemy.ext.declarative import declarative_base\nfrom sqlalchemy.orm import sessionmaker\nengine = create_engine('sqlite:///todo.db',echo=True)\nBase = declarative_base()\nSession = sessionmaker(bind=engine)\n\n```", "```py\nClass UserFolder(grok.Container):\npass\n\n```", "```py\nclass Account(Base):\n__tablename__ = 'users'\nid = Column(Integer, primary_key=True)\nname = Column(String)\nreal_name = Column(String)\nrole = Column(String)\npassword = Column(String)\ndef __init__(self, name, password, real_name, role):\nself.name = name\nself.real_name = real_name\nself.role = role\nself.setPassword(password)\ndef setPassword(self, password):\npasswordmanager = component.getUtility(IPasswordManager, 'SHA1')\nself.password = passwordmanager.encodePassword(password)\ndef checkPassword(self, password):\npasswordmanager = component.getUtility(IPasswordManager, 'SHA1')\nrelational databaserelational databaseAccount class definition, modifyingreturn passwordmanager.checkPassword(self.password, password)\n\n```", "```py\nclass UserAuthenticatorPlugin(grok.LocalUtility):\ngrok.implements(IAuthenticatorPlugin)\ngrok.name('users')\ndef __init__(self):\nmetadata = Base.metadata\nmetadata.create_all(engine)\n\n```", "```py\ndef getAccount(self, login):\nsession = Session()\nresult = session.query(Account).filter_by(name=login).first()\nreturn result\n\n```", "```py\ndef addUser(self, username, password, real_name, role):\nsession = Session()\nresult = session.query(Account).filter_by(| name=username).first()\nif result is None:\nuser = Account(username, password, real_name, role)\nsession.add(user)\nsession.commit()\nrole_manager = IPrincipalRoleManager(grok.getSite())\nif role==u'Project Manager':\nrole_manager.assignRoleToPrincipal( 'todo.ProjectManager',username)\nelif role==u'Application Manager':\nrole_manager.assignRoleToPrincipal( 'todo.AppManager',username)\nelse:\nrole_manager.assignRoleToPrincipal( 'todo.ProjectMember',username)\n\n```", "```py\ndef deleteUser(self, username):\nsession = Session()\nresult = session.query(Account).filter_by( name=username).first()\nif result is not None:\nsession.delete(result)\nsession.commit()\n\n```", "```py\ndef listUsers(self):\nsession = Session()\nresults = session.query(Account).all()\nreturn results\n\n```", "```py\ninstall_requires=['setuptools',\n'grok',\n'grokui.admin',\n'z3c.testsetup',\n'megrok.form',\n'SQLAlchemy',\n'zope.sqlalchemy',\n# Add extra requirements here\n],\n\n```", "```py\nfrom sqlalchemy.orm import scoped_session\nfrom zope.sqlalchemy import ZopeTransactionExtension\n\n```", "```py\nSession = scoped_session(sessionmaker(bind=engine, extension=ZopeTransactionExtension()))\n\n```", "```py\ndef addUser(self, username, password, real_name, role):\nsession = Session()\nresult = session.query(Account).filter_by( name=username).first()\nif result is None:\nuser = Account(username, password, real_name, role)\nsession.add(user)\nrole_manager = IPrincipalRoleManager(grok.getSite())\nif role==u'Project Manager':\nrole_manager.assignRoleToPrincipal( 'todo.ProjectManager',username)\nelif role==u'Application Manager':\nrole_manager.assignRoleToPrincipal( 'todo.AppManager',username)\nelse:\nrole_manager.assignRoleToPrincipal( 'todo.ProjectMember',username)\n\n```", "```py\nfrom sqlalchemy import Column, ForeignKey\nfrom sqlalchemy.types import Integer, String\nfrom sqlalchemy.orm import relation\nfrom megrok.rdb import rdb\n\n```", "```py\nmetadata = rdb.MetaData()\n\n```", "```py\nclass TodoLists(rdb.Container):\npass\nclass Project(rdb.Model):\nid = Column(Integer, primary_key=True)\ntitle = Column(String(50))\nkind = Column(String(50))\ndescription = Column(String(140))\ntodolists = relation('TodoList', backref='project', collection_class=TodoLists)\nclass TodoList(rdb.Model):\nid = Column(Integer, primary_key=True)\ntitle = Column(String(50))\ndescription = Column(String(140))\nproject = Column('project_id', Integer, ForeignKey('project.id'))\n\n```", "```py\nsession = rdb.Session()\nproject_x = Project(title='Project X',kind='personal', description='My secret project')\nsession.add(project_x)\n\n```", "```py\nplanning = TodoList(title='Planning',description='Define steps for master plan')\nexecution = TodoList(title='Execution',description='Perform plan flawlessly')\nworld_domination = TodoList(title='World Domination', description='Things to do after conquering the world')\n\n```", "```py\nproject_x.todolists.set(planning)\nproject_x.todolists.set(execution)\nproject_x.todolists.set(world_domination)\n\n```"]