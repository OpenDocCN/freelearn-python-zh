- en: '*Appendix A*: How to Translate the Pseudocode into Real Code'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*附录A*：如何将伪代码转换为真实代码'
- en: The code examples in this book have, for the most part, been written using pseudocode,
    as the aim of the book is to give you an understanding of what programming is,
    rather than focusing on any particular language.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 本书中的代码示例大部分都是使用伪代码编写的，因为本书的目的是让你了解什么是编程，而不是专注于任何特定的语言。
- en: To be able to write code, you will need to use a real language, and here we
    will look at some of the more popular ones and see how the code used in this book
    would translate into these languages.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 要能够编写代码，你需要使用一种真正的语言，在这里我们将探讨一些更流行的语言，并看看这本书中使用的代码如何翻译成这些语言。
- en: 'The languages we will look at are as follows:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将查看的语言如下：
- en: C++
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++
- en: C#
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C#
- en: Java
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Java
- en: JavaScript
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript
- en: PHP
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: PHP
- en: Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python
- en: For each language, we will start with a short introduction.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每种语言，我们将从一个简短的介绍开始。
- en: You will not be able to start to write your very own programs just from these
    short examples, but you will get a feel for these languages, and maybe seeing
    them like this will help you decide what language you want to learn first.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 你不能仅仅从这些简短的示例中开始编写你自己的程序，但你将感受到这些语言，也许以这种方式看到它们将帮助你决定你想先学习哪种语言。
- en: Before we look at the different languages, we will have a couple of pseudocode
    examples. These examples will then be translated into the preceding six languages.
    So, let's begin!
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们查看不同的语言之前，我们将有几个伪代码示例。然后，这些示例将被翻译成前面的六种语言。所以，让我们开始吧！
- en: The pseudocode examples
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 伪代码示例
- en: In this section, we will look into a few code examples for pseudocode.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看一些伪代码的代码示例。
- en: Hello world in pseudocode
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪代码中的Hello World
- en: The first example will be a short program that just prints **Hello, World!**
    to the screen.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个示例将是一个简短的程序，它只是将**Hello, World!**打印到屏幕上。
- en: 'In our pseudocode, it will look like this:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的伪代码中，它将看起来像这样：
- en: '[PRE0]'
  id: totrans-18
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Variables declaration in pseudocode
  id: totrans-19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪代码中的变量声明
- en: 'In this example, we will create a couple of variables. The first one will store
    an integer. The second one will store the value from the first one but converted
    into a string:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建几个变量。第一个将存储一个整数。第二个将存储第一个变量的值，但将其转换为字符串：
- en: '[PRE1]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The for loop in pseudocode
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪代码中的for循环
- en: 'In this example, we will have a `for` loop that iterates 10 times and prints
    the values `0` to `9`:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将有一个`for`循环，它迭代10次并打印值`0`到`9`：
- en: '[PRE2]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Functions in pseudocode
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪代码中的函数
- en: In this example, we will create a small function that will accept three integers
    as arguments. The function should then return the largest of them. We will also
    call the function and display the result.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将创建一个小函数，该函数将接受三个整数作为参数。然后，该函数应该返回它们中的最大值。我们还将调用该函数并显示结果。
- en: In the function, we first check whether the first argument is larger than the
    two others. If it is, we have found the largest value, and we return it.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在函数中，我们首先检查第一个参数是否大于另外两个参数。如果是，我们就找到了最大值，并返回它。
- en: As we do a return as soon as we find the largest value, we will not need to
    use any `else` statements in this program as a return will exit the function immediately.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们一旦找到最大值就立即返回，因此在这个程序中我们不需要使用任何`else`语句，因为返回会立即退出函数。
- en: 'We will, therefore, only need to compare the second argument with the third.
    If the second is larger than the third, we return it; otherwise, we will return
    the third argument as it must be the largest value. This is shown with the following
    code:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们只需要将第二个参数与第三个参数进行比较。如果第二个参数大于第三个参数，我们就返回它；否则，我们将返回第三个参数，因为它必须是最大的值。这可以通过以下代码展示：
- en: '[PRE3]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: while loops, user input, if, and for loops in pseudocode
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: while循环、伪代码中的用户输入、if语句和for循环
- en: In this example, we will illustrate several concepts at the same time.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将同时说明几个概念。
- en: This program will ask the user to enter numbers, as many as they want. They
    can stop entering new values by entering a negative number. All values, except
    the final negative one, will be stored in a dynamic array.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 此程序将要求用户输入数字，数量不限。他们可以通过输入一个负数来停止输入新值。所有值（除了最后的负数）都将存储在一个动态数组中。
- en: 'Before the program exists, we will print all the values that we have stored
    with the following code block:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 在程序退出之前，我们将使用以下代码块打印出我们存储的所有值：
- en: '[PRE4]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'From the preceding code, we see that:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们可以看到：
- en: 'First, we create a dynamic array. Remember that this is a list in which we
    can add and remove values during the program execution; that is, it is not a fixed-size
    array for which we will need to define how many items we want to store in it:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，我们创建一个动态数组。记住，这是一个在程序执行期间可以添加和删除值的列表；也就是说，它不是一个固定大小的数组，我们需要定义要存储其中的项目数量：
- en: We will then enter a `while` loop, and inside it, ask the user for a number.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将进入一个`while`循环，并在其中要求用户输入一个数字。
- en: We will add the entered number to the dynamic array and will keep doing that
    until the user enters a negative number. This negative number should not be added
    to the array, but instead, it will act as an indication that the user is done
    entering numbers so we can exit the loop.
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将把输入的数字添加到动态数组中，并且会一直这样做，直到用户输入一个负数。这个负数不应该添加到数组中，而应该作为用户完成输入数字的指示，这样我们就可以退出循环。
- en: C++
  id: totrans-40
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++
- en: C++ was developed by Bjarne Stroustrup, a Danish computer scientist, and he
    initially called it C with Classes. The work began in 1979, and he wanted to create
    a language that had the power of the C programming language and the object-oriented
    features he had been exposed to when programming for his Ph.D. thesis.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: C++是由丹麦计算机科学家Bjarne Stroustrup开发的，他最初将其称为C with Classes。这项工作始于1979年，他希望创建一种语言，它具有C编程语言的力量以及他在为博士论文编程时接触到的面向对象特性。
- en: In 1982, he renamed the language C++, where the two addition operators are a
    reference to the ++ operator in C, which increments a variable by one. The idea
    is that C++ is C with one thing added, and that thing is object-orientation.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 1982年，他将语言重命名为C++，其中两个加号运算符是对C中的++运算符的引用，该运算符将变量增加一。这种想法是C++是C加上一个特性，而这个特性就是面向对象。
- en: The first commercial release of the language was in 1985.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 该语言的第一版商业发布是在1985年。
- en: C++ is a general-purpose compiled programming language that is often used in
    situations requiring high execution speed, where the programmer is in control
    over how data is stored and managed in the computer's memory.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: C++是一种通用编译型编程语言，常用于需要高执行速度的情况，程序员可以控制数据在计算机内存中的存储和管理。
- en: 'Here are some quick facts about it:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 下面是一些关于它的快速事实：
- en: '**Name**: C++'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：C++'
- en: '**Designed by**: Bjarne Stroustrup'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计者**：Bjarne Stroustrup'
- en: '**First public release**: 1985'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首次公开发布**：1985'
- en: '**Paradigm**: Multi-paradigm, procedural, functional, object-oriented, generic'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范式**：多范式、过程式、函数式、面向对象、泛型'
- en: '**Typing**: Static'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：静态'
- en: '`.cpp`, `.h`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.cpp`, `.h`'
- en: Hello world in C++
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C++中的“Hello world”
- en: All applications that are written in C++ need to have a function called `main`
    that will act as the starting point for program execution.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 所有用C++编写的应用程序都需要有一个名为`main`的函数，该函数将作为程序执行的开始点。
- en: The output is shown to the console window by using what is known as an output
    stream. The language provides a ready-made object from the `ostream` class for
    this purpose, called `cout`. The language also provides a function (this type
    of function is known as a manipulator function in C++) called `endl`, which will
    add a newline character to the output stream. Data is sent to the output stream
    using the `<<` operator.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 输出是通过使用所谓的输出流显示到控制台窗口的。该语言提供了一个来自`ostream`类的现成对象用于此目的，称为`cout`。该语言还提供了一个函数（这种类型的函数在C++中被称为操纵函数），称为`endl`，它将在输出流中添加一个换行符。数据是通过使用`<<`运算符发送到输出流的。
- en: The `std::` part in front of `cout` and `endl` indicates that these two are
    defined in the standard namespace of the language.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`cout`和`endl`前面的`std::`部分表示这两个是在语言的标准命名空间中定义的。'
- en: As the `main` function in C++ should return an integer value that indicates
    the result of the execution, we return `0`, which is the value representing success.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 由于C++中的`main`函数应该返回一个整数值，表示执行的结果，所以我们返回`0`，这是表示成功的值。
- en: 'Note that all non-compound statements in C++ end with a semicolon, as follows:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，C++中所有非复合语句都以分号结尾，如下所示：
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Variable declaration in C++
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C++中的变量声明
- en: As C++ is a statically typed language, we must specify what data type a variable
    can use. After that, this will be the only data type this variable can handle.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 由于C++是一种静态类型语言，我们必须指定变量可以使用的数据类型。之后，这将是这个变量唯一可以处理的数据类型。
- en: Strings in C++ are defined in a class, and to be able to use that class, we
    must include `string`, as we do in the first line.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: C++中的字符串是在一个类中定义的，为了能够使用这个类，我们必须包含`string`，就像我们在第一行所做的那样。
- en: Inside the main function, we first declare our integer variable. We specify
    that the type is an integer with `int`.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在`main`函数内部，我们首先声明我们的整数变量。我们指定类型为整数，使用`int`。
- en: Then, we want to convert our integer into a string. We can do that with the
    help of a function called `to_string`. It is defined in the standard namespace
    and must be preceded by `std::`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们希望将我们的整数转换为字符串。我们可以通过一个名为`to_string`的函数来完成这个任务。它定义在标准命名空间中，并且必须用`std::`前缀。
- en: 'When declaring the type for the `string` variable, we must also state that
    the `string` class is located in the standard namespace:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当声明`string`变量的类型时，我们必须同时声明`string`类位于标准命名空间中：
- en: '[PRE6]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can, if we want to, simplify this program and let the compiler figure out
    what type the variables will have. The `auto` keyword will help us with this.
    As we are assigning a value to the variables as we create them, they will be of
    the same type as the data we assign to them. Refer to the following code:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想简化这个程序并让编译器确定变量的类型，我们可以这样做。`auto`关键字将帮助我们完成这个任务。由于我们在创建变量时为其赋值，所以它们的类型将与我们分配给它们的数据相同。请参考以下代码：
- en: '[PRE7]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The for loop in C++
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C++中的`for`循环
- en: 'C++ uses the C style of `for` loops. It has three sections, separated by a
    semicolon, as shown here:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: C++使用C风格的`for`循环。它有三个部分，由分号分隔，如下所示：
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'From the preceding code, we see the following:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的代码中，我们可以看到以下内容：
- en: The first section will initialize the loop variable to its starting value; in
    our case, that will be `0`.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一部分将初始化循环变量为其起始值；在我们的例子中，那将是`0`。
- en: The next section is the condition that will tell us for how long the `for` loop
    will run; in our case, that is as long as the variable is less than 10.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一节将告诉我们`for`循环将运行多长时间的条件；在我们的例子中，这意味着只要变量小于10。
- en: The final section is how the variable will change in each iteration. We are
    using the `++` operator here so that the variable will increase by one each iteration.
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后的部分是变量在每次迭代中如何变化。我们在这里使用`++`运算符，以便变量每次迭代增加一。
- en: Inside the loop, we will print the value of the loop variable.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，我们将打印循环变量的值。
- en: Functions in C++
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C++中的函数
- en: A function in C++ must first state its return type – that is, what data type
    the function returns. We must also specify the type each argument has. In our
    case, we will pass in three integers, and as the function will return one of them,
    the return type will also be an integer.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: C++中的函数必须首先声明其返回类型——也就是说，函数返回什么数据类型。我们还必须指定每个参数的类型。在我们的例子中，我们将传递三个整数，因为函数将返回其中的一个，所以返回类型也将是整数。
- en: 'Note that in C++, the `&&` symbols means `and`:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在C++中，`&&`符号表示`and`：
- en: '[PRE9]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: while loops, user input, if statements, and foreach loops in C++
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C++中的while循环、用户输入、if语句和foreach循环
- en: 'We need to use a dynamic data structure so we can add as many values as we
    like while the program is running. One such option we have in C++ is to use a
    class called `vector`. This class is created such that it can hold data of any
    type, and that is why we have `int` between `<` and `>` in the declaration. Let''s
    see how this works:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用动态数据结构，这样我们就可以在程序运行时添加尽可能多的值。在C++中，我们有这样一个选项，就是使用一个名为`vector`的类。这个类被创建成可以存储任何类型的数据，这就是为什么我们在声明中在`<`和`>`之间有`int`。让我们看看它是如何工作的：
- en: As with so many other things, the `vector` class needs to be specified as belonging
    to the standard namespace with `std::`.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 就像许多其他事情一样，`vector`类需要用`std::`指定为属于标准命名空间。
- en: Next, we declare the integer variable that will accept the input. We will set
    it to `0` for now. We need that value on the next line when we enter our `while`
    loop. As the loop iterates, as long as `input_value` is equal to or greater than
    `0`, we must set it to a value within that range.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们声明一个整数变量，它将接受输入。我们目前将其设置为`0`。当我们进入`while`循环时，我们需要这个值在下一行。当循环迭代时，只要`input_value`等于或大于`0`，我们必须将其设置在该范围内的一个值。
- en: Inside the loop, we print a message to the user that we require a value. To
    get input from the user, we use `cin`, which works a bit like `cout` but in reverse.
    Instead of sending things to the screen, it accepts things from the keyboard.
    Usually, when we talk about `cout` and `cin`, we don't say that the output goes
    to the screen and the input comes from the keyboard, as these can be remapped
    to be other things such as files. Instead, we say that `cout` goes to the standard
    output, which is usually the screen, and `cin` reads from the standard input,
    which is usually the keyboard.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环内部，我们向用户打印一条消息，说明我们需要一个值。要从用户那里获取输入，我们使用`cin`，它的工作方式有点像`cout`，但方向相反。它不是将事物发送到屏幕，而是从键盘接受事物。通常，当我们谈论`cout`和`cin`时，我们不会说输出会显示在屏幕上，输入来自键盘，因为这些可以重新映射为其他事物，如文件。相反，我们说`cout`发送到标准输出，通常是屏幕，而`cin`从标准输入读取，通常是键盘。
- en: When we have the input, we check whether it is `0` or a positive value. These
    are the only ones that we want to store in our vector. If it is, we use a method
    called `push_back` on our vector, which will insert the current value into the
    vector at the end.
  id: totrans-85
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们获得输入时，我们会检查它是否为`0`或正值。这是我们想要存储在我们向量中的唯一值。如果是的话，我们就在我们的向量上使用一个名为`push_back`的方法，它将当前值插入到向量的末尾。
- en: 'This will continue until the user enters a negative value. Then, we exit the
    `while` loop and enter something that is called a `for` loop in C++. It is like
    a `foreach` loop in that it will iterate through all the items we have in the
    vector. The current item will be stored in the variable value, and inside the
    loop, we print it. The code for it is here:'
  id: totrans-86
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将继续，直到用户输入一个负值。然后，我们退出`while`循环，进入C++中称为`for`循环的东西。它类似于`foreach`循环，因为它将遍历我们在向量中的所有项目。当前项将被存储在变量value中，并在循环内部打印它。它的代码如下：
- en: '[PRE10]'
  id: totrans-87
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: C#
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C#
- en: C#, pronounced like the musical note with the same name, is a language developed
    by Microsoft and was first released in 2000 as a part of the company's .NET initiative.
    The language was designed by Anders Hejlsberg, a Danish software engineer, who
    first called it **Cool** (for **C-like Object-Oriented Language**). Microsoft
    renamed it before its first official release for copyright reasons.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: C#，发音类似于同名音乐符号，是由微软开发的一种语言，并于2000年作为公司.NET计划的一部分首次发布。该语言由丹麦软件工程师Anders Hejlsberg设计，最初将其命名为**Cool**（代表**C-like
    Object-Oriented Language**）。由于版权原因，微软在首次正式发布之前将其更名为C#。
- en: The language is designed to be a simple, modern, and object-oriented programming
    language. The language is primarily used within Microsoft's .NET Framework.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 该语言被设计成一种简单、现代且面向对象的编程语言。该语言主要用于微软的.NET框架中。
- en: Note that all non-compound statements in C# end with a semicolon.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，C#中所有非复合语句都以分号结尾。
- en: 'Here are some quick facts:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些快速事实：
- en: '**Name**: C#'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：C#'
- en: '**Designed by**: Anders Hejlsberg, Microsoft'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计者**：Anders Hejlsberg，微软'
- en: '**First public release**: 2000'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首次公开发布**：2000'
- en: '**Paradigm**: Object-oriented, generic, imperative, structured, functional'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范式**：面向对象、泛型、命令式、结构化、函数式'
- en: '**Typing**: Static'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：静态'
- en: '`.cs`'
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.cs`'
- en: Hello world in C#
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C#中的“Hello world”
- en: All programs written in C# must exist within a class, and one class in our project
    must have a method called `Main` that will be the starting point for the program
    execution. It should also be noted that all C# applications should exist within
    a project.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 所有用C#编写的程序都必须存在于一个类中，并且我们项目中的一个类必须有一个名为`Main`的方法，它将是程序执行的开始点。还应注意的是，所有C#应用程序都应该存在于一个项目中。
- en: The first thing we should note is that the first thing we see on the line containing
    the `Main` method header is the `static` keyword. Declaring a method as `static`
    means that it can execute without the need to create an object of the class it
    is defined in. Simply put, this means that the `Main` method can be executed as
    a function; that is all we need to know at this point.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先应该注意的是，在包含`Main`方法头部的行上，我们看到的是`static`关键字。将方法声明为`static`意味着它可以不创建定义在其内的类的对象而执行。简单来说，这意味着`Main`方法可以作为函数执行；这一点我们现在需要知道的就是这些。
- en: '`Console` is a class that handles all the input and output for console applications
    in C#. A console application is a program that does not have a graphical user
    interface. All input and output is done through a console or terminal window,
    using just text.'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: '`Console`是一个类，它处理C#控制台应用程序的所有输入和输出。控制台应用程序是一个没有图形用户界面的程序。所有输入和输出都通过控制台或终端窗口进行，仅使用文本。'
- en: 'Inside the `Console` class, there is another static method called `WriteLine`.
    Here we can see that a `static` method can be called using the class name. This
    method, `WriteLine`, will output whatever we send to the console window. Refer
    to the following code:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在`Console`类内部，还有一个名为`WriteLine`的静态方法。在这里我们可以看到，一个`static`方法可以通过类名来调用。这个`WriteLine`方法将输出我们发送到控制台窗口的任何内容。参考以下代码：
- en: '[PRE11]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Variable declaration in C#
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C#中的变量声明
- en: As C# is a statically typed language, we must specify what data type a variable
    can use. After that, this will be the only data type this variable can handle.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 由于C#是一种静态类型语言，我们必须指定一个变量可以使用的数据类型。在那之后，这个变量就只能处理这种数据类型。
- en: We declare the `myIntValue` variable as an integer using `int`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`int`声明`myIntValue`变量为一个整数。
- en: 'In C#, `int` is not just a primitive data type, as in many other languages.
    It is something called a `struct`. A `struct` is, in a way, the same thing as
    a class. This `struct` will inherit things from a class called `Object`, and this
    class defines a method called `ToString` that we can use to convert the integer
    into a string:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，`int`不仅仅是一个基本数据类型，就像在许多其他语言中一样。它是一种称为`struct`的东西。在某种程度上，`struct`与类是相同的东西。这个`struct`将从名为`Object`的类中继承一些东西，这个类定义了一个名为`ToString`的方法，我们可以使用这个方法将整数转换为字符串：
- en: '[PRE12]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can simplify this program by letting the compiler figure out what data type
    the variables will have. As we are assigning a value to them as we declare them,
    the compiler will create them as that data type. We do this with the help of the
    `var` keyword:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过让编译器确定变量的数据类型来简化这个程序。因为我们是在声明它们的同时给它们赋值，编译器将根据这个数据类型创建它们。我们通过`var`关键字来完成这个操作：
- en: '[PRE13]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The for loop in C#
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C#中的for循环
- en: 'C# uses the C-style of `for` loop. It has three sections, separated by a semicolon:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: C#使用C风格的`for`循环。它有三个部分，由分号分隔：
- en: The first section will initialize the loop variable to its starting value; in
    our case, that will be `0`.
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个部分将初始化循环变量为其起始值；在我们的例子中，那将是`0`。
- en: The next section is the condition that will tell us for how long the `for` loop
    will run; in our case, that is as long as the variable is less than 10\.
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个部分是告诉`for`循环将运行多长时间的条件；在我们的例子中，那就是变量小于10\。
- en: The final section is how the variable will change in each iteration. We are
    using the `++` operator here so that the variable will increase by one each iteration.
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后一个部分是变量在每次迭代中如何变化。我们在这里使用`++`运算符，使得变量在每次迭代中增加一。
- en: 'Inside the loop, we will print the value of the loop variable:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，我们将打印循环变量的值：
- en: '[PRE14]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Functions in C#
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C#中的函数
- en: The first thing we should note is that in C#, there are no functions as all
    code must be defined within a class, and functions that are declared inside a
    class are called **methods**. They do behave like normal functions, though.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先应该注意的是，在C#中，没有函数，因为所有代码都必须定义在一个类中，并且定义在类内部的函数被称为**方法**。尽管如此，它们的行为与普通函数相似。
- en: As we saw in earlier examples, if we want to call a method without having an
    object of this class, the method must be declared `static`, and that is the first
    thing we see on the line where we declare the function.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的例子中所看到的，如果我们想调用一个方法而不需要这个类的对象，那么这个方法必须被声明为`static`，这是我们声明函数时看到的第一个东西。
- en: In C#, we must also specify what data type a method will return. That is why
    it says `int` in front of the method name. It will return an integer as we pass
    in three integers, and it will return the largest of the three. As we can see,
    we must also state the data type for each of the arguments.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在C#中，我们还必须指定一个方法将返回什么数据类型。这就是为什么在方法名前面有`int`的原因。当我们传入三个整数时，它将返回一个整数，并且它将返回这三个数中的最大值。正如我们所看到的，我们还必须为每个参数指定数据类型。
- en: 'Note that in C#, the `&&` symbols means `and`. Refer to the following code:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在C#中，`&&`符号表示`and`。参考以下代码：
- en: '[PRE15]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: while loops, user input, if statements, and foreach loops in C#
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: C#中的while循环、用户输入、if语句和foreach循环
- en: 'We need to use a dynamic data structure so we can add as many values as we
    like while the program is running. One such option we have in C# is to use a class
    called `List`:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个动态数据结构，这样我们就可以在程序运行时添加尽可能多的值。在C#中，我们有这样一个选项，就是使用一个名为`List`的类：
- en: This class is created so a list can hold data of any type, and that is why we
    have `int` between `<` and `>` in the declaration.
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这个类被创建出来，以便一个列表可以持有任何类型的数据，这就是为什么我们在声明中在`<`和`>`之间有`int`。
- en: Next, we declare the integer variable that will accept the input. We set it
    to `0` for now. We need that value on the next line when we enter our `while`
    loop. As the loop iterates as long as `inputValue` is equal to or greater than
    `0`, we must set it to a value within that range.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接下来，我们声明一个整数变量，它将接受输入。我们目前将其设置为`0`。当我们进入`while`循环时，我们需要这个值在下一行。由于循环在`inputValue`等于或大于`0`时迭代，我们必须将其设置在该范围内的一个值。
- en: Inside the loop, we print a message to the user that we want a value. To get
    input from the user, we use the `ReadLine` method that is located in the `Console`
    class. The value we get from `ReadLine` is a string. That is why we use the `Int32.Parse`
    method. It will convert whatever the user enters into an integer.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在循环内部，我们向用户打印一条消息，表示我们想要一个值。要从用户那里获取输入，我们使用位于`Console`类中的`ReadLine`方法。我们从`ReadLine`获得的是一个字符串。这就是为什么我们使用`Int32.Parse`方法的原因。它将用户输入的任何内容转换为整数。
- en: When we have the input, we check whether it is `0` or a positive value. It is
    only `0` values that we want to store in our list. If it is, we use a method call
    `Add` on our list, which will insert the current value into the list at the end.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当我们获得输入时，我们检查它是否为`0`或正值。我们只想在我们的列表中存储`0`值。如果是，我们就在我们的列表上使用名为`Add`的方法调用，它将当前值插入列表的末尾。
- en: This will continue until the user enters a negative value. Then, we exit the
    `while` loop and enter a `foreach` loop, which will iterate through all the items
    in the list.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 这将继续，直到用户输入一个负值。然后，我们退出`while`循环，进入一个`foreach`循环，该循环将遍历列表中的所有项。
- en: 'The current item will be stored in the variable value, and inside the loop,
    we print it:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 当前项将被存储在名为`value`的变量中，并在循环内部打印它：
- en: '[PRE16]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Java
  id: totrans-134
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Java
- en: Work on the Java programming language started in 1991, and the design goals
    were to create a simple, object-oriented language with a syntax that was familiar
    to existing programmers.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: Java编程语言的工作始于1991年，设计目标是创建一个简单、面向对象的、语法对现有程序员熟悉的语言。
- en: James Gosling was the leading designer behind the language, and he initially
    named it Oak, as an oak tree was growing outside his window. For copyright reasons,
    it was later renamed Java after the Java coffee.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: James Gosling是该语言的主要设计者，最初将其命名为Oak，因为一棵橡树正在他窗户外生长。由于版权原因，后来将其更名为Java，以纪念Java咖啡。
- en: An essential concept in the design of the language was to let programmers write
    once and run anywhere, abbreviated to *WORA*. The idea is that an application
    written in Java can run on most platforms without any modification or recompilation.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 语言设计中的一个基本概念是让程序员一次编写，到处运行，简称*WORA*。这个想法是，用Java编写的应用程序可以在大多数平台上运行，无需任何修改或重新编译。
- en: The portability was achieved by letting the Java source code compile into an
    intermediate representation, called *Java byte code*, instead of platform-specific
    machine code. The byte code is then executed by a virtual machine that is written
    for the hardware hosting the application.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 通过让Java源代码编译成一个中间表示形式，称为*Java字节码*，而不是特定平台的机器码，实现了可移植性。然后，由为托管应用程序的硬件编写的虚拟机执行这些字节码。
- en: 'Here are some quick facts about it:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些关于它的快速事实：
- en: '**Name**: Java'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：Java'
- en: '**Designed by**: James Gosling, Sun Microsystems'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计者**：James Gosling，Sun Microsystems'
- en: '**First public release**: 1995'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首次公开发布**：1995年'
- en: '**Paradigm**: Multi-paradigm, object-oriented, generic, imperative'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范式**：多范式、面向对象、泛型、命令式'
- en: '**Typing**: Static'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：静态'
- en: '`.java`, `.jar`'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.java`，`.jar`'
- en: Hello world in Java
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的“Hello World”
- en: Java requires all code to be written within a class, and all applications need
    one class that has a method called `main`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: Java要求所有代码都必须在类内部编写，并且所有应用程序都需要一个名为`main`的方法的类。
- en: One peculiarity of Java is that every class must be written in a source code
    file that has the same name as the class. As the class in this example is named
    `Hello`, it must be saved in a file called `Hello.java`.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: Java的一个特点是每个类都必须在一个与类同名的源代码文件中编写。由于这个例子中的类名为`Hello`，它必须保存在一个名为`Hello.java`的文件中。
- en: To print something to a console window, we will be using `System.out.println`.
    Now, `System` is a class that, among other things, handles input and output. Inside
    the `System` class, an output stream is defined, called `out`, and this stream
    has a method named `println`, which prints the data passed to it and terminates
    by inserting a newline character at the end of the stream.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要将内容打印到控制台窗口，我们将使用`System.out.println`。现在，`System`是一个类，它处理输入和输出等操作。在`System`类内部，定义了一个输出流，称为`out`，这个流有一个名为`println`的方法，它将打印传递给它的数据，并在流的末尾插入一个换行符。
- en: 'Note that all non-compound statements in Java end with a semicolon:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，Java中所有非复合语句都以分号结束：
- en: '[PRE17]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Variable declaration in Java
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的变量声明
- en: As Java is a statically typed language, we must specify what data type a variable
    can use. After that, this will be the only data type this variable can handle.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Java是一种静态类型语言，我们必须指定一个变量可以使用的数据类型。之后，这将是这个变量唯一可以处理的数据类型。
- en: We first declare our integer variable using `int`.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先使用`int`声明我们的整数变量。
- en: 'All primitive data types have a class representation in Java. We can use the
    `Integer` class to convert our integer to a string. We do that by calling a static
    method in the `Integer` class and passing the integer value we want to be converted
    to it:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 所有原始数据类型在Java中都有一个类表示。我们可以使用`Integer`类将我们的整数转换为字符串。我们通过调用`Integer`类中的一个静态方法并传递我们想要转换的整数值来实现这一点：
- en: '[PRE18]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Java does not have a feature for automatic type deduction, like the `auto` and
    `var` keywords we find in C++ and C#.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Java没有像C++和C#中的`auto`和`var`关键字那样的自动类型推断功能。
- en: The for loop in Java
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的for循环
- en: Java uses the C-style of `for` loops. It has three sections, separated by semicolons.
    The first section will initialize the loop variable to its starting value; in
    our case, that will be 0\. The next section is the condition that will tell us
    for how long the `for` loop will run; in our case, that is as long as the variable
    is less than 10\. The final section is how the variable will change in each iteration.
    We are using the ++ operator here, so that the variable will increase by one each
    iteration.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: Java使用C风格的`for`循环。它有三个部分，由分号分隔。第一个部分将循环变量初始化为其起始值；在我们的例子中，那将是0。下一个部分是条件，它将告诉我们`for`循环将运行多长时间；在我们的例子中，只要变量小于10。最后一个部分是变量在每次迭代中如何变化。我们在这里使用`++`运算符，所以变量在每次迭代中都会增加1。
- en: 'Inside the loop, we will print the value of the loop variable:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，我们将打印循环变量的值：
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Functions in Java
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的函数
- en: The first thing we should note is that in Java, there are no functions as all
    code must be defined within a class, and functions that are declared inside a
    class are called methods. They do behave like normal functions, though.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先应该注意的是，在Java中，没有函数，因为所有代码都必须在类中定义，类内声明的函数被称为方法。尽管如此，它们的行为与普通函数类似。
- en: As we saw in earlier examples, if we want to call a method without having an
    object of this class, the method must be declared as `static`, and that is the
    first thing we see on the line where we declare the function.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在前面的示例中看到的，如果我们想在没有这个类的对象的情况下调用一个方法，那么这个方法必须被声明为`static`，这是我们声明函数时看到的第一个东西。
- en: In Java, we must also specify what data type a method will return. That is why
    it says `int` in front of the method name. It will return an integer as we pass
    in three integers, and it will return the largest of the three. As we can see,
    we must also state the data type for each of the arguments.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，我们还必须指定一个方法将返回什么数据类型。这就是为什么在方法名前面有`int`。它将返回一个整数，因为我们传递了三个整数，并且它将返回这三个数中的最大值。正如我们所看到的，我们必须为每个参数指定数据类型。
- en: 'Note that in Java, the `&&` symbols means `and`:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在Java中，`&&`符号表示`and`：
- en: '[PRE20]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: while loops, user input, if statements, and foreach loops in Java
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的while循环、用户输入、if语句和foreach循环
- en: 'We need to use a dynamic data structure so that we can add as many values as
    we like while the program is running. One such option we have in Java is to use
    a class called `ArrayList`:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要使用一个动态数据结构，这样我们就可以在程序运行时添加尽可能多的值。在Java中，我们有这样一个选项，就是使用一个名为`ArrayList`的类：
- en: This class is created so a list can hold data of any type, and that is why we
    have `Integer` between `<` and `>` in the declaration. In Java, we cannot use
    a primitive data type as the type to store in the list. Instead, we use the class
    representation of `int`, which is `Integer`.
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个类被创建出来，以便列表可以存储任何类型的数据，这就是为什么我们在声明中在`<`和`>`之间有`Integer`。在Java中，我们不能使用原始数据类型作为存储在列表中的类型。相反，我们使用`int`的类表示形式，即`Integer`。
- en: Next, we declare the integer variable that will accept the input. We set it
    to `0` for now. We need that value on the next line when we enter our `while`
    loop. As the loop iterates as long as `inputValue` is equal to or greater than
    0, we must set it to a value within that range.
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们声明一个整数变量，它将接受输入。我们目前将其设置为`0`。当我们进入`while`循环时，我们需要这个值。当循环迭代时，只要`inputValue`等于或大于0，我们必须将其设置在该范围内的一个值。
- en: Java does not have a built-in method for user input, so we need to create an
    object from a class called `BufferedReader` that can handle the input. We call
    this object `reader`.
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java没有内置的用户输入方法，因此我们需要从名为`BufferedReader`的类中创建一个对象来处理输入。我们称这个对象为`reader`。
- en: Inside the loop, we print a message to the user that we want a value. To get
    input from the user, we use our `reader` object and its `readLine` method. The
    value we get from `readLine` is a string. That is why we use the `Integer.parseInt`
    method. It will convert whatever the user enters into an integer.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在循环内部，我们向用户打印一条消息，表示我们想要一个值。为了从用户那里获取输入，我们使用我们的`reader`对象及其`readLine`方法。我们从`readLine`获取的值是一个字符串。这就是为什么我们使用`Integer.parseInt`方法。它将用户输入的任何内容转换为整数。
- en: When we have the input, we check whether it is `0` or a positive value. It is
    only `0` values that we want to store in our list. If it is, we use a method called
    `add` on our list that will insert the current value into the list at the end.
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当我们获得输入时，我们会检查它是否为`0`或正值。我们只想在我们的列表中存储`0`值。如果是，我们将在我们的列表上使用一个名为`add`的方法，该方法将当前值插入列表的末尾。
- en: Java will force us to handle the event of the user entering something other
    than a number. If they do, we will get an exception when we try to convert the
    string to a number. That is why we need the `try` block with a `catch` statement.
    If the user enters anything other than numbers, we will enter the `catch` statement.
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Java将强制我们处理用户输入非数字的情况。如果他们这样做，当我们尝试将字符串转换为数字时，我们会得到一个异常。这就是为什么我们需要带有`catch`语句的`try`块。如果用户输入的不是数字，我们将进入`catch`语句。
- en: 'This will continue until the user enters a negative value. Then, we exit the
    `while` loop and enter a `for` loop that will iterate through all the items in
    the list. The current item will be stored in the `value` variable, and inside
    the loop, we print it:'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这将继续，直到用户输入一个负值。然后，我们退出`while`循环，进入一个`for`循环，该循环将遍历列表中的所有项目。当前的项目将被存储在`value`变量中，在循环内部，我们打印它：
- en: '[PRE21]'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: JavaScript
  id: totrans-178
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: JavaScript
- en: In the early years of the World Wide Web, there was only one web browser with
    support for a graphical user interface, namely Mosaic, released in 1993\. The
    lead developers of Mosaic soon started the Netscape corporation and released a
    more polished browser called Netscape Navigator in 1994.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在万维网的早期几年，只有一个支持图形用户界面的网络浏览器，即1993年发布的Mosaic。Mosaic的主要开发者很快成立了Netscape公司，并在1994年发布了一个更精致的浏览器，名为Netscape
    Navigator。
- en: The web was a very different place in these early years, and web pages could
    only display static content. Netscape wanted to change this and decided to add
    a scripting language to its Navigator. At first, they looked at two options for
    how to achieve this. One was to collaborate with Sun Microsystems and use the
    Java programming language. The other option was to let the newly hired Brendan
    Eich embed the Scheme programming language into the browser.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在这些早期年份，网络是一个完全不同的地方，网页只能显示静态内容。Netscape希望改变这一点，并决定在其Navigator中添加一种脚本语言。最初，他们考虑了两种实现这一目标的方法。一种是与Sun
    Microsystems合作并使用Java编程语言。另一种选择是让新聘用的布伦丹·艾奇将Scheme编程语言嵌入到浏览器中。
- en: The decision was a compromise between the two. Brendan Eich was tasked with
    creating a new language, but its syntax should be closely related to Java and
    less like Scheme. The language was first named LiveScript, and that was the name
    it was released under in 1995\.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这个决定是在两者之间做出的妥协。布伦丹·艾奇被委以创建一种新语言的任务，但其语法应与Java紧密相关，而不太像Scheme。这种语言最初被命名为LiveScript，这也是它在1995年发布的名称。
- en: As Java was the brand new language at the time, the name was changed to JavaScript
    so it could get more attention. The similarity in names between the two languages
    has led to much confusion over the years, especially among people not so familiar
    with programming.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Java在当时是一种全新的语言，因此将其名称更改为JavaScript，以便它能得到更多的关注。这两个语言名称之间的相似性导致了多年来许多混淆，尤其是在不太熟悉编程的人中。
- en: 'Here are some quick facts about JavaScript:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是关于JavaScript的一些快速事实：
- en: '**Name**: JavaScript'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**: JavaScript'
- en: '**Designed by**: Brendan Eich'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计者**: 布伦丹·艾奇'
- en: '**First public release**: 1995'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首次公开发布**: 1995年'
- en: '**Paradigm**: Event-driven, functional, imperative'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范式**: 事件驱动、函数式、命令式'
- en: '**Typing**: Dynamic'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**: 动态'
- en: '`.js`'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.js`'
- en: Hello world in JavaScript
  id: totrans-190
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript中的“Hello World”
- en: The first thing we should note about JavaScript is that it is designed to have
    its programs executed within a web browser. You can run JavaScript applications
    in a console window, but to be able to do that, we will need a JavaScript engine
    that can execute the code for us. One such engine is Node.js, which can be downloaded
    for free from [https://nodejs.org](https://nodejs.org).
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该注意的第一件事是，JavaScript被设计为在其程序在网页浏览器中执行。你可以在控制台窗口中运行JavaScript应用程序，但要能够做到这一点，我们需要一个可以为我们执行代码的JavaScript引擎。其中一个这样的引擎是Node.js，可以从[https://nodejs.org](https://nodejs.org)免费下载。
- en: JavaScript is a scripting language, so we will not need to put our code within
    any particular function or class.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript是一种脚本语言，因此我们不需要将代码放在任何特定的函数或类中。
- en: In JavaScript, we can use the `console` object to output data. It is usually
    used to print data to a web browser's debugging console, but if we use Node.js
    to execute that application, the output will be printed to the console window.
    The `console` object has a method called `log` that will output anything we pass
    to it.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，我们可以使用`console`对象来输出数据。它通常用于将数据打印到网页浏览器的调试控制台，但如果我们使用Node.js来执行该应用程序，输出将打印到控制台窗口。`console`对象有一个名为`log`的方法，可以输出我们传递给它的任何内容。
- en: 'Note that all non-compound statements in JavaScript end with a semicolon:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，JavaScript中所有非复合语句都以分号结尾：
- en: '[PRE22]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Variable declaration in JavaScript
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript中的变量声明
- en: JavaScript does not have a specific data type for integers. Instead, it has
    a data type called `Number` that handles both integer and floating-point numbers.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript没有为整数指定特定的数据类型。相反，它有一个名为`Number`的数据类型，可以处理整数和浮点数。
- en: We declare variables either by using the older `var` keyword or the newer `let`.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过使用较旧的`var`关键字或较新的`let`来声明变量。
- en: As JavaScript is dynamically typed, we will not need to specify what type a
    variable will use. This will be inferred automatically when we assign a value
    to it.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript是动态类型的，我们不需要指定变量将使用什么类型。当我们给它赋值时，类型会被自动推断。
- en: 'Converting a number into a string can be done with a method in the `Number`
    class called `toString`. As our variable, `myIntValue`, is an object from the
    `Number` class, it has such a method. Note that we are passing the value `10`
    to the `toString` method. This is the base we want the number to be in. We want
    a decimal number, so we pass `10`. This is done as follows:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过`Number`类中的`toString`方法将数字转换为字符串。由于我们的变量`myIntValue`是`Number`类的一个对象，它具有这样的方法。注意，我们将值`10`传递给`toString`方法。这是我们希望数字所在的基数。我们想要一个十进制数，所以传递`10`。操作如下：
- en: '[PRE23]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The for loop in JavaScript
  id: totrans-202
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript中的for循环
- en: 'JavaScript uses the C style of `for` loops. It has three sections, separated
    by semicolons:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript使用C风格的`for`循环。它有三个部分，由分号分隔：
- en: The first section will initialize the loop variable to its starting value; in
    our case, that will be `0`.
  id: totrans-204
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个部分将初始化循环变量为其起始值；在我们的例子中，那将是`0`。
- en: The next section is the condition that will tell us for how long the `for` loop
    will run; in our case, that is as long as the variable is less than `10`.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下一个部分是条件，它将告诉我们`for`循环将运行多长时间；在我们的例子中，只要变量小于`10`。
- en: The final section is how the variable will change in each iteration. We are
    using the `++` operator here, so that the variable will increase by one each iteration.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后的部分是变量在每次迭代中如何变化。在这里我们使用`++`运算符，这样变量在每次迭代中都会增加一。
- en: 'Inside the loop, we will print the value of the loop variable:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，我们将打印循环变量的值：
- en: '[PRE24]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Functions in JavaScript
  id: totrans-209
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JavaScript中的函数
- en: As JavaScript is dynamically typed, we will not need to specify any data type
    for the return value of the function or for the arguments as we need to do in
    C++, C#, and Java.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 由于JavaScript是动态类型的，我们不需要指定函数的返回值或参数的数据类型，就像在C++、C#和Java中需要做的那样。
- en: We use the `function` keyword to define that this is a function.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`function`关键字来定义这是一个函数。
- en: 'Note that in JavaScript, the `&&` symbols mean `and`:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在JavaScript中，`&&`符号表示“和”：
- en: '[PRE25]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: while loops, user input, if statements, and foreach loops in Java
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java中的while循环、用户输入、if语句和foreach循环
- en: First of all, we must note that this example will not do JavaScript justice,
    as JavaScript is not created to write applications like this one. This has to
    do with JavaScript being designed to run within a web browser and not as console
    applications.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们必须注意，这个例子并不能真正体现JavaScript的优势，因为JavaScript并不是为了编写这样的应用程序而设计的。这与JavaScript被设计为在网页浏览器中运行，而不是作为控制台应用程序有关。
- en: In JavaScript, things are often done asynchronously. That is, the program code
    will not run in sequence as we are used to in most other languages and situations.
    If we try to implement this program in the same way as the pseudocode version
    and the version written for all other languages, we will see that it goes into
    an endless loop just asking us to enter a value, over and over again.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在JavaScript中，事情通常是以异步方式完成的。也就是说，程序代码不会像我们在大多数其他语言和情况下所习惯的那样按顺序执行。如果我们尝试以伪代码版本和为所有其他语言编写的版本相同的方式实现这个程序，我们会看到它进入了一个无休止的循环，不断地要求我们输入一个值，一次又一次。
- en: This program is somewhat complicated, so let's not go into too much detail.
    The first lines are there to create something that will handle the input. At the
    heart of it is a function called `question` that will return a `promise` object.
    A `promise` object is something that promises to give us a value at some point
    in the future. To be able to use this `promise`, it must be called from a function,
    and that function must be declared as `async`. This means that this function can
    use the `promise` (to simplify things somewhat).
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 这个程序有些复杂，所以我们就不深入细节了。前几行是为了创建一些处理输入的东西。其核心是一个名为`question`的函数，它将返回一个`promise`对象。`promise`对象是承诺在未来的某个时刻给我们一个值的东西。为了能够使用这个`promise`，它必须从一个函数中调用，并且这个函数必须声明为`async`。这意味着这个函数可以使用`promise`（为了简化事情）。
- en: 'This function does not have a name, but as you can see, it is surrounded by
    parentheses and has two empty parentheses at the very end. This construct will
    make this function execute immediately:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数没有名字，但正如你所看到的，它被括号包围，并且在最后有两个空括号。这个结构将使这个函数立即执行：
- en: Inside this function, we create a dynamic array called `values`. We will initialize
    it to be empty, as we don't have any values to store in it yet.
  id: totrans-219
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个函数内部，我们创建了一个名为`values`的动态数组。我们将它初始化为空，因为我们还没有任何值要存储在其中。
- en: Next, we find the variable we will use for our input. We set this to `0` so
    that when we come to the `while` loop on the next line, we will enter the loop.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们找到我们将用于输入的变量。我们将这个值设置为`0`，这样当我们来到下一行的`while`循环时，我们会进入循环。
- en: On the next line, we will use all the code we see at the top of the program,
    which handles the user input. We say that we `await` the `question` function.
    The `await` keyword will let the application go and do some other things if it
    needs to, but when we get a value entered by the user, we will come back here
    and resume execution. That is a short description of how asynchronous calls work.
    This is an advanced topic, so if this code confuses you, no problem.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一行，我们将使用程序顶部看到的所有代码，这些代码处理用户输入。我们说我们`await``question`函数。`await`关键字将允许应用程序去做其他事情，如果需要的话，但当我们得到用户输入的值时，我们会回到这里并继续执行。这是异步调用工作原理的简要描述。这是一个高级话题，所以如果这段代码让你感到困惑，没问题。
- en: If the value entered is greater than or equal to `0`, we push this value to
    the back of our array.
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果输入的值大于或等于`0`，我们将这个值推送到数组的末尾。
- en: 'When the user enters a negative number, we exit the `while` loop and enter
    a `for` loop that will iterate as many times as there are items in the array.
    The `pos` variable will have an index value, `0` the first time, `1` the second
    time, and so on. When we want to print the values inside the loop, we can use
    this value as an index into the array, so that we get the first value the first
    time, the second time, and so on. Refer to the following code:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户输入一个负数时，我们将退出`while`循环，并进入一个`for`循环，该循环将迭代数组中的所有项目。`pos`变量将有一个索引值，第一次是`0`，第二次是`1`，以此类推。当我们想要在循环中打印值时，我们可以使用这个值作为数组的索引，这样我们就能在第一次得到第一个值，第二次得到第二个值，依此类推。请参考以下代码：
- en: '[PRE26]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: PHP
  id: totrans-225
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: PHP
- en: In 1994, Rasmus Lerdorf, a Danish-Canadian programmer, wrote several **Common
    Gate Interface** (**CGI**) programs in C. CGI is an interface specification that
    will let web servers execute programs that can generate dynamic web content. Lerdorf
    created this for his private web page and extended and added functionality to
    handle web forms and database communication. He named the project **Personal Home
    Page/Forms Interpreter**, abbreviated to **PHP/FI**.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在1994年，丹麦-加拿大程序员拉斯马斯·勒尔多夫（Rasmus Lerdorf）用C语言编写了几个**通用网关接口**（**CGI**）程序。CGI是一个接口规范，它将允许Web服务器执行可以生成动态Web内容的程序。勒尔多夫为他的私人网页创建了它，并扩展并添加了处理Web表单和数据库通信的功能。他将这个项目命名为**个人主页/表单解释器**，简称**PHP/FI**。
- en: Lerdorf has later admitted that he never intended to create a new programming
    language, but the project got a life of its own, and a development team was formed,
    and in 1997 PHP/FI 2 was released.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: Lerdorf 后来承认他从未打算创建一种新的编程语言，但这个项目获得了自己的生命力，并组建了一个开发团队，1997 年发布了 PHP/FI 2。
- en: The language is primarily used on web servers to create dynamic web content.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 该语言主要用于在 Web 服务器上创建动态网页内容。
- en: 'Here are some quick facts on it:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 关于它的快速事实如下：
- en: '**Name**: PHP'
  id: totrans-230
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：PHP'
- en: '**Designed by**: Rasmus Lerdorf'
  id: totrans-231
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计者**：Rasmus Lerdorf'
- en: '**First public release**: 1995'
  id: totrans-232
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首次公开发布**：1995'
- en: '**Paradigm**: Imperative, functional, object-oriented, procedural'
  id: totrans-233
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范式**：命令式、函数式、面向对象、过程式'
- en: '**Typing**: Dynamic'
  id: totrans-234
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：动态'
- en: '`.php`'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.php`'
- en: Hello world in PHP
  id: totrans-236
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP 中的“Hello World”
- en: 'The primary use of PHP is to run alongside a web server, and applications written
    in PHP will most often be used to produce dynamic web content. But we can run
    PHP applications as standalone console applications if we download the PHP executable
    from [https://php.net](https://php.net):'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 的主要用途是与 Web 服务器一起运行，用 PHP 编写的应用程序通常用于生成动态网页内容。但如果我们从 [https://php.net](https://php.net)
    下载 PHP 可执行文件，我们也可以作为独立的控制台应用程序运行 PHP 应用程序：
- en: As PHP code can be written in the same document as HTML code, all PHP source
    code that we write must be within `php` tags. The opening tag is `<?php` and the
    closing tag is `?>`.
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 PHP 代码可以与 HTML 代码在同一文档中编写，因此我们编写的所有 PHP 源代码都必须在 `php` 标签内。起始标签是 `<?php`，结束标签是
    `?>`。
- en: We use `echo` to display our message in the console window. You will not need
    to use any parentheses with `echo`, as it is not a function but a language construct.
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们使用 `echo` 在控制台窗口中显示我们的消息。您不需要在 `echo` 中使用任何括号，因为它不是一个函数，而是一种语言结构。
- en: 'Note that all non-compound statements in PHP end with a semicolon:'
  id: totrans-240
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，PHP 中所有非复合语句都以分号结束：
- en: '[PRE27]'
  id: totrans-241
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Variable declaration in PHP
  id: totrans-242
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP 中的变量声明
- en: As PHP is a dynamically typed language, we will not need to provide any implicit
    information on what data type to use when we declare variables. The variable type
    will be deducted automatically for us, and the type we end up with depends on
    what we assign to the variable.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 PHP 是动态类型语言，当我们声明变量时，我们不需要提供任何关于使用哪种数据类型的隐式信息。变量类型将自动为我们推导出来，最终类型取决于我们分配给变量的内容。
- en: An oddity that PHP has inherited from the language Perl is that all variable
    names must start with a dollar sign. In Perl, this had a meaning as different
    signs identified different types, but PHP only has the dollar sign for all types.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 从语言 Perl 继承的一个奇特之处在于，所有变量名都必须以美元符号开头。在 Perl 中，不同的符号有不同的意义，但 PHP 只有一个美元符号用于所有类型。
- en: Let's try this. We first assign the value `10` to our `$myIintValue` variable.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们试试这个。我们首先将值 `10` 赋给我们的 `$myIintValue` 变量。
- en: 'To convert this integer into a string, we will use a `strval` function and
    pass the integer to it. This will convert this value into a string, as shown here:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 要将这个整数转换为字符串，我们将使用 `strval` 函数并将整数传递给它。这将把此值转换为字符串，如下所示：
- en: '[PRE28]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The for loop in PHP
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP 中的 for 循环
- en: PHP uses the C style of `for` loops. It has three sections, separated by semicolons.
    The first section will initialize the loop variable to its starting value; in
    our case, that will be `0`. The next section is the condition that will tell us
    for how long the `for` loop will run; in our case, that is as long as the variable
    is less than 10\. The final section is how the variable will change in each iteration.
    We are using the `++` operator here so that the variable will increase by one
    each iteration.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 使用 C 风格的 `for` 循环。它有三个部分，由分号分隔。第一个部分将循环变量初始化为其起始值；在我们的例子中，那将是 `0`。下一个部分是条件，它将告诉我们
    `for` 循环将运行多长时间；在我们的例子中，只要变量小于 10。最后一个部分是变量在每次迭代中如何变化。我们在这里使用 `++` 运算符，以便变量在每次迭代中增加一。
- en: Inside the loop, we will print the value of the loop variable.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，我们将打印循环变量的值。
- en: 'As `echo` in PHP will not provide any newline character, we will need to append
    it after our loop variable in each iteration. We can concatenate the value of
    the loop variable and the newline character (`\n`) by inserting a period between
    the two:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 PHP 中的 `echo` 不会提供任何换行符，我们将在每次迭代后在我们的循环变量后附加它。我们可以通过在两个值之间插入一个点来连接循环变量的值和换行符
    (`\n`)：
- en: '[PRE29]'
  id: totrans-252
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Functions in PHP
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP 中的函数
- en: As PHP is dynamically typed, we will not need to specify any data type for the
    return value of the function or for the arguments as we need to do in C++, C#,
    and Java.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 PHP 是动态类型，我们不需要为函数的返回值或参数指定任何数据类型，就像在 C++、C# 和 Java 中需要做的那样。
- en: We use the `function` keyword to define that this is a function.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用`function`关键字来定义这是一个函数。
- en: 'Note that in PHP, the `&&` symbols mean `and`:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，在PHP中，`&&`符号表示`and`：
- en: '[PRE30]'
  id: totrans-257
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: while loops, user input, if statements, and foreach loops in PHP
  id: totrans-258
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP中的while循环、用户输入、if语句和foreach循环
- en: 'In PHP, we can create a dynamic array by using `array()`. An array in PHP is
    not an array but an ordered map, in other languages known as a dictionary or an
    associative array. But for this application, this does not matter:'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 在PHP中，我们可以通过使用`array()`来创建动态数组。在PHP中，数组不是一个数组，而是一个有序映射，在其他语言中称为字典或关联数组。但在这个应用中，这并不重要：
- en: After the array is created, we declare the input variable that will hold the
    values the user enters. We set it to `0`, so when we come to the `while` loop
    on the next line, we will enter the loop.
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建数组之后，我们声明一个输入变量，它将保存用户输入的值。我们将其设置为`0`，这样当我们来到下一行的`while`循环时，我们将进入循环。
- en: Next, we will use `readline` to get a value from the user. We can pass a string
    to `readline`, and that string will be printed to the screen as a prompt to the
    user. This way, we will not have a separate line that prints this message.
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将使用`readline`从用户那里获取一个值。我们可以向`readline`传递一个字符串，该字符串将作为提示打印到屏幕上。这样，我们就不需要单独一行来打印这个消息。
- en: The value we get from `readline` will be a string, so we use `intval` to convert
    it to an integer.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`readline`获取的值将是一个字符串，因此我们使用`intval`将其转换为整数。
- en: Next, we check whether the value is greater than or equal to `0`. If it is,
    we will use the `array_push` function. This function takes two arguments. The
    first one is the array into which we want to push a value, and the second argument
    is the value we want to be pushed.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们检查该值是否大于或等于`0`。如果是，我们将使用`array_push`函数。这个函数接受两个参数。第一个参数是我们想要推送值的数组，第二个参数是我们想要推送的值。
- en: When the user enters a negative number, we will exit the `while` loop and enter
    a `foreach` loop that will print all the values the user entered. If you compare
    this program with the ones written for the other languages, you will see that
    the array and the variable have switched placed in PHP compared to the others.
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当用户输入一个负数时，我们将退出`while`循环并进入一个`foreach`循环，该循环将打印用户输入的所有值。如果您将此程序与其他语言编写的程序进行比较，您会发现与PHP相比，数组和变量在位置上有所交换。
- en: 'Inside the `foreach` loop, we print the values to the console:'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在`foreach`循环内部，我们将值打印到控制台：
- en: '[PRE31]'
  id: totrans-266
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Python
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python
- en: Python was designed and created in the late 1980s by the Dutch programmer Guido
    van Rossum as a successor to the ABC language. The main design philosophy behind
    the language is code readability.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: Python是在20世纪80年代末由荷兰程序员吉多·范罗苏姆设计的，作为ABC语言的继承者。该语言背后的主要设计理念是代码可读性。
- en: While developing the language, van Rossum enjoyed the British comedy group Monty
    Python and decided to name his new language after them.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发语言的过程中，范罗苏姆喜欢英国喜剧团体蒙提·派森，并决定以他们的名字来命名他的新语言。
- en: The popularity of the language has grown exponentially over the last few years,
    and it is now ranked as one of the most popular languages out there.
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去几年中，该语言的普及率呈指数级增长，现在它被列为最受欢迎的语言之一。
- en: It is a general-purpose language that can be used for most types of applications.
    The common uses for the language include the development of web applications and
    use in data science. As it is considered one of the easiest programming languages
    to learn for beginner programmers, it is often used as an introductory language.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 它是一种通用语言，可用于大多数类型的应用。该语言的常见用途包括开发Web应用程序和在数据科学中的应用。由于它被认为是最容易学习的编程语言之一，因此它经常被用作入门语言。
- en: 'Here are some quick facts about it:'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: 关于它的几个快速事实：
- en: '**Name**: Python'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**名称**：Python'
- en: '**Designed by**: Guido van Rossum'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**设计者**：吉多·范罗苏姆'
- en: '**First public release**: 1990'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**首次公开发布**：1990年'
- en: '**Paradigm**: Multi-paradigm, functional, imperative, object-oriented, structured'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**范式**：多范式、函数式、命令式、面向对象、结构化'
- en: '**Typing**: Dynamic'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类型**：动态'
- en: '`.py`'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`.py`'
- en: Hello world in Python
  id: totrans-279
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的“Hello world”
- en: 'As Python is a scripting language, we will not need to put our code within
    any special function or class. To print a message to the console window, we will
    just use the `print` function and pass whatever we want to print to it:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python是一种脚本语言，我们不需要将代码放在任何特殊函数或类中。要向控制台窗口打印消息，我们只需使用`print`函数并将我们想要打印的内容传递给它：
- en: '[PRE32]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: Declaring variables in Python
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Python中声明变量
- en: As Python is a dynamically typed language, we will not need to provide any information
    on what type our variables will use. That will be deducted automatically for us
    when we assign a value to the variable.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python是一种动态类型语言，我们不需要提供任何关于我们的变量将使用什么类型的信息。当我们给变量赋值时，类型会自动为我们推导出来。
- en: To declare an integer variable, we just assign an integer to it.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 要声明一个整数变量，我们只需给它赋一个整数。
- en: 'To convert this integer to a string, we can use a class called `str` and pass
    the integer to it. As everything in Python is an object, this will return a new
    string object to us:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 将这个整数转换为字符串，我们可以使用一个名为 `str` 的类，并将整数传递给它。由于Python中的一切都是对象，这将返回一个新的字符串对象给我们：
- en: '[PRE33]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The for loop in Python
  id: totrans-287
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的for循环
- en: When it comes to `for` loops, Python will be different from all the other languages
    we look at here. It does not implement a `for` loop that uses the C-style format.
    A `for` loop in Python will iterate over a sequence of some sort. As we don't
    have any sequence, we can use something called `range`. Now, `range` looks like
    a function, but in reality, it is something that is called a `10`, at the first
    iteration, it will generate the value `0`. In the next iteration, the generated
    value will be `1`, and so on up to `9`.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到 `for` 循环时，Python将与其他所有我们在这里考虑的语言不同。它不实现使用C样式格式的 `for` 循环。Python中的 `for`
    循环将遍历某种类型的序列。由于我们没有序列，我们可以使用一个叫做 `range` 的东西。现在，`range` 看起来像是一个函数，但实际上它是一个叫做 `10`
    的东西，在第一次迭代时，它将生成值 `0`。在下一个迭代中，生成的值将是 `1`，以此类推，直到 `9`。
- en: 'Also, note that Python does not use braces to indicate a compound statement,
    as we can see in this `for` statement. Instead, the content of the `for` loop
    is indented with four spaces. Also, note the colon as the last character on the
    first line. It is an indication that the next line should be indented:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 还要注意，Python不使用大括号来表示复合语句，就像我们在 `for` 语句中看到的那样。相反，`for` 循环的内容用四个空格缩进。还要注意，冒号是第一行的最后一个字符。它是表示下一行应该缩进的指示：
- en: '[PRE34]'
  id: totrans-290
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Functions in Python
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的函数
- en: As Python is dynamically typed, we will not need to specify any data type for
    the return value of the function or for the arguments as we need to do in C++,
    C#, and Java.
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Python是动态类型的，我们不需要为函数的返回值或参数指定任何数据类型，就像在C++、C#和Java中需要做的那样。
- en: 'We use the `def` keyword to define that this is a function:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用 `def` 关键字来定义这是一个函数：
- en: '[PRE35]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: while loops, user input, if statements, and foreach loops in Python
  id: totrans-295
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python中的while循环、用户输入、if语句和foreach循环
- en: 'In Python, we can use a list to store the values the user enters. A list in
    Python is dynamic, so it can grow as the user enters new values:'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中，我们可以使用列表来存储用户输入的值。Python中的列表是动态的，因此它可以随着用户输入新值而增长：
- en: We declare the list and make it empty, to start with.
  id: totrans-297
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们声明列表并将其初始化为空，以便开始。
- en: Next, we declare the variable we will use for the user input and set it to `0`.
    The reason we use zero is so that when we come to the line with the `while` loop,
    we want the condition to be true. It will be true if the `input_value` variable
    is `0` or greater.
  id: totrans-298
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们声明用于用户输入的变量并将其设置为 `0`。我们使用零的原因是，当我们到达 `while` 循环的行时，我们希望条件为真。如果 `input_value`
    变量是 `0` 或更大，则条件为真。
- en: Inside the `while` loop, we will use the `input` function to let the user enter
    values. The `input` function lets us pass a string to it, and that string will
    be displayed to the user. This takes away the need we have in some other languages
    to actually print this message first and then get the user input.
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `while` 循环内部，我们将使用 `input` 函数让用户输入值。`input` 函数允许我们向它传递一个字符串，该字符串将被显示给用户。这消除了在某些其他语言中我们需要先打印这条消息然后再获取用户输入的需求。
- en: The value we get from the `input` function is a string, so we need to convert
    it to `int`. We do that by passing the entered string to `int()`. This will create
    an integer with the value entered.
  id: totrans-300
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 `input` 函数获取的值是一个字符串，因此我们需要将其转换为 `int`。我们通过将输入的字符串传递给 `int()` 来做到这一点。这将创建一个具有输入值的整数。
- en: Next, we check whether the entered value is greater than or equal to `0`. If
    it is, we will append it to our list.
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们检查输入的值是否大于或等于 `0`。如果是，我们将它追加到我们的列表中。
- en: 'When the user enters a negative number, we will exit the `while` loop and continue
    to a `for` loop. `for` loops in Python always work like `foreach` loops. A `for`
    loop wants a sequence, and it will go through all the values of that sequence.
    Our list is such a sequence, so we will get one item each time we iterate, and
    we can now print that item value, as shown here:'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 当用户输入一个负数时，我们将退出`while`循环并继续到`for`循环。Python中的`for`循环总是像`foreach`循环一样工作。`for`循环需要一个序列，并且它会遍历该序列的所有值。我们的列表就是这样一种序列，因此我们每次迭代时都会得到一个项目，现在我们可以打印出这个项目的值，如下所示：
- en: '[PRE36]'
  id: totrans-303
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
