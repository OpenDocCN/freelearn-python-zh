- en: '*Appendix A*: How to Translate the Pseudocode into Real Code'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The code examples in this book have, for the most part, been written using pseudocode,
    as the aim of the book is to give you an understanding of what programming is,
    rather than focusing on any particular language.
  prefs: []
  type: TYPE_NORMAL
- en: To be able to write code, you will need to use a real language, and here we
    will look at some of the more popular ones and see how the code used in this book
    would translate into these languages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The languages we will look at are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: C++
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Java
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For each language, we will start with a short introduction.
  prefs: []
  type: TYPE_NORMAL
- en: You will not be able to start to write your very own programs just from these
    short examples, but you will get a feel for these languages, and maybe seeing
    them like this will help you decide what language you want to learn first.
  prefs: []
  type: TYPE_NORMAL
- en: Before we look at the different languages, we will have a couple of pseudocode
    examples. These examples will then be translated into the preceding six languages.
    So, let's begin!
  prefs: []
  type: TYPE_NORMAL
- en: The pseudocode examples
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will look into a few code examples for pseudocode.
  prefs: []
  type: TYPE_NORMAL
- en: Hello world in pseudocode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first example will be a short program that just prints **Hello, World!**
    to the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our pseudocode, it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Variables declaration in pseudocode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will create a couple of variables. The first one will store
    an integer. The second one will store the value from the first one but converted
    into a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The for loop in pseudocode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this example, we will have a `for` loop that iterates 10 times and prints
    the values `0` to `9`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Functions in pseudocode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will create a small function that will accept three integers
    as arguments. The function should then return the largest of them. We will also
    call the function and display the result.
  prefs: []
  type: TYPE_NORMAL
- en: In the function, we first check whether the first argument is larger than the
    two others. If it is, we have found the largest value, and we return it.
  prefs: []
  type: TYPE_NORMAL
- en: As we do a return as soon as we find the largest value, we will not need to
    use any `else` statements in this program as a return will exit the function immediately.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will, therefore, only need to compare the second argument with the third.
    If the second is larger than the third, we return it; otherwise, we will return
    the third argument as it must be the largest value. This is shown with the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: while loops, user input, if, and for loops in pseudocode
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this example, we will illustrate several concepts at the same time.
  prefs: []
  type: TYPE_NORMAL
- en: This program will ask the user to enter numbers, as many as they want. They
    can stop entering new values by entering a negative number. All values, except
    the final negative one, will be stored in a dynamic array.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before the program exists, we will print all the values that we have stored
    with the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code, we see that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we create a dynamic array. Remember that this is a list in which we
    can add and remove values during the program execution; that is, it is not a fixed-size
    array for which we will need to define how many items we want to store in it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will then enter a `while` loop, and inside it, ask the user for a number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will add the entered number to the dynamic array and will keep doing that
    until the user enters a negative number. This negative number should not be added
    to the array, but instead, it will act as an indication that the user is done
    entering numbers so we can exit the loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: C++
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C++ was developed by Bjarne Stroustrup, a Danish computer scientist, and he
    initially called it C with Classes. The work began in 1979, and he wanted to create
    a language that had the power of the C programming language and the object-oriented
    features he had been exposed to when programming for his Ph.D. thesis.
  prefs: []
  type: TYPE_NORMAL
- en: In 1982, he renamed the language C++, where the two addition operators are a
    reference to the ++ operator in C, which increments a variable by one. The idea
    is that C++ is C with one thing added, and that thing is object-orientation.
  prefs: []
  type: TYPE_NORMAL
- en: The first commercial release of the language was in 1985.
  prefs: []
  type: TYPE_NORMAL
- en: C++ is a general-purpose compiled programming language that is often used in
    situations requiring high execution speed, where the programmer is in control
    over how data is stored and managed in the computer's memory.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some quick facts about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: C++'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designed by**: Bjarne Stroustrup'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First public release**: 1985'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paradigm**: Multi-paradigm, procedural, functional, object-oriented, generic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typing**: Static'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.cpp`, `.h`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello world in C++
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All applications that are written in C++ need to have a function called `main`
    that will act as the starting point for program execution.
  prefs: []
  type: TYPE_NORMAL
- en: The output is shown to the console window by using what is known as an output
    stream. The language provides a ready-made object from the `ostream` class for
    this purpose, called `cout`. The language also provides a function (this type
    of function is known as a manipulator function in C++) called `endl`, which will
    add a newline character to the output stream. Data is sent to the output stream
    using the `<<` operator.
  prefs: []
  type: TYPE_NORMAL
- en: The `std::` part in front of `cout` and `endl` indicates that these two are
    defined in the standard namespace of the language.
  prefs: []
  type: TYPE_NORMAL
- en: As the `main` function in C++ should return an integer value that indicates
    the result of the execution, we return `0`, which is the value representing success.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that all non-compound statements in C++ end with a semicolon, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: Variable declaration in C++
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As C++ is a statically typed language, we must specify what data type a variable
    can use. After that, this will be the only data type this variable can handle.
  prefs: []
  type: TYPE_NORMAL
- en: Strings in C++ are defined in a class, and to be able to use that class, we
    must include `string`, as we do in the first line.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the main function, we first declare our integer variable. We specify
    that the type is an integer with `int`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we want to convert our integer into a string. We can do that with the
    help of a function called `to_string`. It is defined in the standard namespace
    and must be preceded by `std::`.
  prefs: []
  type: TYPE_NORMAL
- en: 'When declaring the type for the `string` variable, we must also state that
    the `string` class is located in the standard namespace:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'We can, if we want to, simplify this program and let the compiler figure out
    what type the variables will have. The `auto` keyword will help us with this.
    As we are assigning a value to the variables as we create them, they will be of
    the same type as the data we assign to them. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The for loop in C++
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'C++ uses the C style of `for` loops. It has three sections, separated by a
    semicolon, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'From the preceding code, we see the following:'
  prefs: []
  type: TYPE_NORMAL
- en: The first section will initialize the loop variable to its starting value; in
    our case, that will be `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next section is the condition that will tell us for how long the `for` loop
    will run; in our case, that is as long as the variable is less than 10.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final section is how the variable will change in each iteration. We are
    using the `++` operator here so that the variable will increase by one each iteration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the loop, we will print the value of the loop variable.
  prefs: []
  type: TYPE_NORMAL
- en: Functions in C++
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A function in C++ must first state its return type – that is, what data type
    the function returns. We must also specify the type each argument has. In our
    case, we will pass in three integers, and as the function will return one of them,
    the return type will also be an integer.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in C++, the `&&` symbols means `and`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: while loops, user input, if statements, and foreach loops in C++
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to use a dynamic data structure so we can add as many values as we
    like while the program is running. One such option we have in C++ is to use a
    class called `vector`. This class is created such that it can hold data of any
    type, and that is why we have `int` between `<` and `>` in the declaration. Let''s
    see how this works:'
  prefs: []
  type: TYPE_NORMAL
- en: As with so many other things, the `vector` class needs to be specified as belonging
    to the standard namespace with `std::`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we declare the integer variable that will accept the input. We will set
    it to `0` for now. We need that value on the next line when we enter our `while`
    loop. As the loop iterates, as long as `input_value` is equal to or greater than
    `0`, we must set it to a value within that range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the loop, we print a message to the user that we require a value. To
    get input from the user, we use `cin`, which works a bit like `cout` but in reverse.
    Instead of sending things to the screen, it accepts things from the keyboard.
    Usually, when we talk about `cout` and `cin`, we don't say that the output goes
    to the screen and the input comes from the keyboard, as these can be remapped
    to be other things such as files. Instead, we say that `cout` goes to the standard
    output, which is usually the screen, and `cin` reads from the standard input,
    which is usually the keyboard.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we have the input, we check whether it is `0` or a positive value. These
    are the only ones that we want to store in our vector. If it is, we use a method
    called `push_back` on our vector, which will insert the current value into the
    vector at the end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will continue until the user enters a negative value. Then, we exit the
    `while` loop and enter something that is called a `for` loop in C++. It is like
    a `foreach` loop in that it will iterate through all the items we have in the
    vector. The current item will be stored in the variable value, and inside the
    loop, we print it. The code for it is here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: C#
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: C#, pronounced like the musical note with the same name, is a language developed
    by Microsoft and was first released in 2000 as a part of the company's .NET initiative.
    The language was designed by Anders Hejlsberg, a Danish software engineer, who
    first called it **Cool** (for **C-like Object-Oriented Language**). Microsoft
    renamed it before its first official release for copyright reasons.
  prefs: []
  type: TYPE_NORMAL
- en: The language is designed to be a simple, modern, and object-oriented programming
    language. The language is primarily used within Microsoft's .NET Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Note that all non-compound statements in C# end with a semicolon.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some quick facts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: C#'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designed by**: Anders Hejlsberg, Microsoft'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First public release**: 2000'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paradigm**: Object-oriented, generic, imperative, structured, functional'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typing**: Static'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.cs`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello world in C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All programs written in C# must exist within a class, and one class in our project
    must have a method called `Main` that will be the starting point for the program
    execution. It should also be noted that all C# applications should exist within
    a project.
  prefs: []
  type: TYPE_NORMAL
- en: The first thing we should note is that the first thing we see on the line containing
    the `Main` method header is the `static` keyword. Declaring a method as `static`
    means that it can execute without the need to create an object of the class it
    is defined in. Simply put, this means that the `Main` method can be executed as
    a function; that is all we need to know at this point.
  prefs: []
  type: TYPE_NORMAL
- en: '`Console` is a class that handles all the input and output for console applications
    in C#. A console application is a program that does not have a graphical user
    interface. All input and output is done through a console or terminal window,
    using just text.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `Console` class, there is another static method called `WriteLine`.
    Here we can see that a `static` method can be called using the class name. This
    method, `WriteLine`, will output whatever we send to the console window. Refer
    to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: Variable declaration in C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As C# is a statically typed language, we must specify what data type a variable
    can use. After that, this will be the only data type this variable can handle.
  prefs: []
  type: TYPE_NORMAL
- en: We declare the `myIntValue` variable as an integer using `int`.
  prefs: []
  type: TYPE_NORMAL
- en: 'In C#, `int` is not just a primitive data type, as in many other languages.
    It is something called a `struct`. A `struct` is, in a way, the same thing as
    a class. This `struct` will inherit things from a class called `Object`, and this
    class defines a method called `ToString` that we can use to convert the integer
    into a string:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can simplify this program by letting the compiler figure out what data type
    the variables will have. As we are assigning a value to them as we declare them,
    the compiler will create them as that data type. We do this with the help of the
    `var` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: The for loop in C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'C# uses the C-style of `for` loop. It has three sections, separated by a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: The first section will initialize the loop variable to its starting value; in
    our case, that will be `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next section is the condition that will tell us for how long the `for` loop
    will run; in our case, that is as long as the variable is less than 10\.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final section is how the variable will change in each iteration. We are
    using the `++` operator here so that the variable will increase by one each iteration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inside the loop, we will print the value of the loop variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Functions in C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we should note is that in C#, there are no functions as all
    code must be defined within a class, and functions that are declared inside a
    class are called **methods**. They do behave like normal functions, though.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in earlier examples, if we want to call a method without having an
    object of this class, the method must be declared `static`, and that is the first
    thing we see on the line where we declare the function.
  prefs: []
  type: TYPE_NORMAL
- en: In C#, we must also specify what data type a method will return. That is why
    it says `int` in front of the method name. It will return an integer as we pass
    in three integers, and it will return the largest of the three. As we can see,
    we must also state the data type for each of the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in C#, the `&&` symbols means `and`. Refer to the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: while loops, user input, if statements, and foreach loops in C#
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to use a dynamic data structure so we can add as many values as we
    like while the program is running. One such option we have in C# is to use a class
    called `List`:'
  prefs: []
  type: TYPE_NORMAL
- en: This class is created so a list can hold data of any type, and that is why we
    have `int` between `<` and `>` in the declaration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we declare the integer variable that will accept the input. We set it
    to `0` for now. We need that value on the next line when we enter our `while`
    loop. As the loop iterates as long as `inputValue` is equal to or greater than
    `0`, we must set it to a value within that range.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inside the loop, we print a message to the user that we want a value. To get
    input from the user, we use the `ReadLine` method that is located in the `Console`
    class. The value we get from `ReadLine` is a string. That is why we use the `Int32.Parse`
    method. It will convert whatever the user enters into an integer.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When we have the input, we check whether it is `0` or a positive value. It is
    only `0` values that we want to store in our list. If it is, we use a method call
    `Add` on our list, which will insert the current value into the list at the end.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This will continue until the user enters a negative value. Then, we exit the
    `while` loop and enter a `foreach` loop, which will iterate through all the items
    in the list.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The current item will be stored in the variable value, and inside the loop,
    we print it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Java
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Work on the Java programming language started in 1991, and the design goals
    were to create a simple, object-oriented language with a syntax that was familiar
    to existing programmers.
  prefs: []
  type: TYPE_NORMAL
- en: James Gosling was the leading designer behind the language, and he initially
    named it Oak, as an oak tree was growing outside his window. For copyright reasons,
    it was later renamed Java after the Java coffee.
  prefs: []
  type: TYPE_NORMAL
- en: An essential concept in the design of the language was to let programmers write
    once and run anywhere, abbreviated to *WORA*. The idea is that an application
    written in Java can run on most platforms without any modification or recompilation.
  prefs: []
  type: TYPE_NORMAL
- en: The portability was achieved by letting the Java source code compile into an
    intermediate representation, called *Java byte code*, instead of platform-specific
    machine code. The byte code is then executed by a virtual machine that is written
    for the hardware hosting the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some quick facts about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Java'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designed by**: James Gosling, Sun Microsystems'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First public release**: 1995'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paradigm**: Multi-paradigm, object-oriented, generic, imperative'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typing**: Static'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.java`, `.jar`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello world in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java requires all code to be written within a class, and all applications need
    one class that has a method called `main`.
  prefs: []
  type: TYPE_NORMAL
- en: One peculiarity of Java is that every class must be written in a source code
    file that has the same name as the class. As the class in this example is named
    `Hello`, it must be saved in a file called `Hello.java`.
  prefs: []
  type: TYPE_NORMAL
- en: To print something to a console window, we will be using `System.out.println`.
    Now, `System` is a class that, among other things, handles input and output. Inside
    the `System` class, an output stream is defined, called `out`, and this stream
    has a method named `println`, which prints the data passed to it and terminates
    by inserting a newline character at the end of the stream.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that all non-compound statements in Java end with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Variable declaration in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Java is a statically typed language, we must specify what data type a variable
    can use. After that, this will be the only data type this variable can handle.
  prefs: []
  type: TYPE_NORMAL
- en: We first declare our integer variable using `int`.
  prefs: []
  type: TYPE_NORMAL
- en: 'All primitive data types have a class representation in Java. We can use the
    `Integer` class to convert our integer to a string. We do that by calling a static
    method in the `Integer` class and passing the integer value we want to be converted
    to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Java does not have a feature for automatic type deduction, like the `auto` and
    `var` keywords we find in C++ and C#.
  prefs: []
  type: TYPE_NORMAL
- en: The for loop in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Java uses the C-style of `for` loops. It has three sections, separated by semicolons.
    The first section will initialize the loop variable to its starting value; in
    our case, that will be 0\. The next section is the condition that will tell us
    for how long the `for` loop will run; in our case, that is as long as the variable
    is less than 10\. The final section is how the variable will change in each iteration.
    We are using the ++ operator here, so that the variable will increase by one each
    iteration.
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the loop, we will print the value of the loop variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Functions in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we should note is that in Java, there are no functions as all
    code must be defined within a class, and functions that are declared inside a
    class are called methods. They do behave like normal functions, though.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in earlier examples, if we want to call a method without having an
    object of this class, the method must be declared as `static`, and that is the
    first thing we see on the line where we declare the function.
  prefs: []
  type: TYPE_NORMAL
- en: In Java, we must also specify what data type a method will return. That is why
    it says `int` in front of the method name. It will return an integer as we pass
    in three integers, and it will return the largest of the three. As we can see,
    we must also state the data type for each of the arguments.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in Java, the `&&` symbols means `and`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: while loops, user input, if statements, and foreach loops in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to use a dynamic data structure so that we can add as many values as
    we like while the program is running. One such option we have in Java is to use
    a class called `ArrayList`:'
  prefs: []
  type: TYPE_NORMAL
- en: This class is created so a list can hold data of any type, and that is why we
    have `Integer` between `<` and `>` in the declaration. In Java, we cannot use
    a primitive data type as the type to store in the list. Instead, we use the class
    representation of `int`, which is `Integer`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we declare the integer variable that will accept the input. We set it
    to `0` for now. We need that value on the next line when we enter our `while`
    loop. As the loop iterates as long as `inputValue` is equal to or greater than
    0, we must set it to a value within that range.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java does not have a built-in method for user input, so we need to create an
    object from a class called `BufferedReader` that can handle the input. We call
    this object `reader`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the loop, we print a message to the user that we want a value. To get
    input from the user, we use our `reader` object and its `readLine` method. The
    value we get from `readLine` is a string. That is why we use the `Integer.parseInt`
    method. It will convert whatever the user enters into an integer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When we have the input, we check whether it is `0` or a positive value. It is
    only `0` values that we want to store in our list. If it is, we use a method called
    `add` on our list that will insert the current value into the list at the end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Java will force us to handle the event of the user entering something other
    than a number. If they do, we will get an exception when we try to convert the
    string to a number. That is why we need the `try` block with a `catch` statement.
    If the user enters anything other than numbers, we will enter the `catch` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This will continue until the user enters a negative value. Then, we exit the
    `while` loop and enter a `for` loop that will iterate through all the items in
    the list. The current item will be stored in the `value` variable, and inside
    the loop, we print it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the early years of the World Wide Web, there was only one web browser with
    support for a graphical user interface, namely Mosaic, released in 1993\. The
    lead developers of Mosaic soon started the Netscape corporation and released a
    more polished browser called Netscape Navigator in 1994.
  prefs: []
  type: TYPE_NORMAL
- en: The web was a very different place in these early years, and web pages could
    only display static content. Netscape wanted to change this and decided to add
    a scripting language to its Navigator. At first, they looked at two options for
    how to achieve this. One was to collaborate with Sun Microsystems and use the
    Java programming language. The other option was to let the newly hired Brendan
    Eich embed the Scheme programming language into the browser.
  prefs: []
  type: TYPE_NORMAL
- en: The decision was a compromise between the two. Brendan Eich was tasked with
    creating a new language, but its syntax should be closely related to Java and
    less like Scheme. The language was first named LiveScript, and that was the name
    it was released under in 1995\.
  prefs: []
  type: TYPE_NORMAL
- en: As Java was the brand new language at the time, the name was changed to JavaScript
    so it could get more attention. The similarity in names between the two languages
    has led to much confusion over the years, especially among people not so familiar
    with programming.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some quick facts about JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: JavaScript'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designed by**: Brendan Eich'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First public release**: 1995'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paradigm**: Event-driven, functional, imperative'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typing**: Dynamic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.js`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello world in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we should note about JavaScript is that it is designed to have
    its programs executed within a web browser. You can run JavaScript applications
    in a console window, but to be able to do that, we will need a JavaScript engine
    that can execute the code for us. One such engine is Node.js, which can be downloaded
    for free from [https://nodejs.org](https://nodejs.org).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript is a scripting language, so we will not need to put our code within
    any particular function or class.
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript, we can use the `console` object to output data. It is usually
    used to print data to a web browser's debugging console, but if we use Node.js
    to execute that application, the output will be printed to the console window.
    The `console` object has a method called `log` that will output anything we pass
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that all non-compound statements in JavaScript end with a semicolon:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: Variable declaration in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: JavaScript does not have a specific data type for integers. Instead, it has
    a data type called `Number` that handles both integer and floating-point numbers.
  prefs: []
  type: TYPE_NORMAL
- en: We declare variables either by using the older `var` keyword or the newer `let`.
  prefs: []
  type: TYPE_NORMAL
- en: As JavaScript is dynamically typed, we will not need to specify what type a
    variable will use. This will be inferred automatically when we assign a value
    to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Converting a number into a string can be done with a method in the `Number`
    class called `toString`. As our variable, `myIntValue`, is an object from the
    `Number` class, it has such a method. Note that we are passing the value `10`
    to the `toString` method. This is the base we want the number to be in. We want
    a decimal number, so we pass `10`. This is done as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: The for loop in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'JavaScript uses the C style of `for` loops. It has three sections, separated
    by semicolons:'
  prefs: []
  type: TYPE_NORMAL
- en: The first section will initialize the loop variable to its starting value; in
    our case, that will be `0`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The next section is the condition that will tell us for how long the `for` loop
    will run; in our case, that is as long as the variable is less than `10`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The final section is how the variable will change in each iteration. We are
    using the `++` operator here, so that the variable will increase by one each iteration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inside the loop, we will print the value of the loop variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Functions in JavaScript
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As JavaScript is dynamically typed, we will not need to specify any data type
    for the return value of the function or for the arguments as we need to do in
    C++, C#, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `function` keyword to define that this is a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in JavaScript, the `&&` symbols mean `and`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: while loops, user input, if statements, and foreach loops in Java
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First of all, we must note that this example will not do JavaScript justice,
    as JavaScript is not created to write applications like this one. This has to
    do with JavaScript being designed to run within a web browser and not as console
    applications.
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript, things are often done asynchronously. That is, the program code
    will not run in sequence as we are used to in most other languages and situations.
    If we try to implement this program in the same way as the pseudocode version
    and the version written for all other languages, we will see that it goes into
    an endless loop just asking us to enter a value, over and over again.
  prefs: []
  type: TYPE_NORMAL
- en: This program is somewhat complicated, so let's not go into too much detail.
    The first lines are there to create something that will handle the input. At the
    heart of it is a function called `question` that will return a `promise` object.
    A `promise` object is something that promises to give us a value at some point
    in the future. To be able to use this `promise`, it must be called from a function,
    and that function must be declared as `async`. This means that this function can
    use the `promise` (to simplify things somewhat).
  prefs: []
  type: TYPE_NORMAL
- en: 'This function does not have a name, but as you can see, it is surrounded by
    parentheses and has two empty parentheses at the very end. This construct will
    make this function execute immediately:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside this function, we create a dynamic array called `values`. We will initialize
    it to be empty, as we don't have any values to store in it yet.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we find the variable we will use for our input. We set this to `0` so
    that when we come to the `while` loop on the next line, we will enter the loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On the next line, we will use all the code we see at the top of the program,
    which handles the user input. We say that we `await` the `question` function.
    The `await` keyword will let the application go and do some other things if it
    needs to, but when we get a value entered by the user, we will come back here
    and resume execution. That is a short description of how asynchronous calls work.
    This is an advanced topic, so if this code confuses you, no problem.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the value entered is greater than or equal to `0`, we push this value to
    the back of our array.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the user enters a negative number, we exit the `while` loop and enter
    a `for` loop that will iterate as many times as there are items in the array.
    The `pos` variable will have an index value, `0` the first time, `1` the second
    time, and so on. When we want to print the values inside the loop, we can use
    this value as an index into the array, so that we get the first value the first
    time, the second time, and so on. Refer to the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: PHP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 1994, Rasmus Lerdorf, a Danish-Canadian programmer, wrote several **Common
    Gate Interface** (**CGI**) programs in C. CGI is an interface specification that
    will let web servers execute programs that can generate dynamic web content. Lerdorf
    created this for his private web page and extended and added functionality to
    handle web forms and database communication. He named the project **Personal Home
    Page/Forms Interpreter**, abbreviated to **PHP/FI**.
  prefs: []
  type: TYPE_NORMAL
- en: Lerdorf has later admitted that he never intended to create a new programming
    language, but the project got a life of its own, and a development team was formed,
    and in 1997 PHP/FI 2 was released.
  prefs: []
  type: TYPE_NORMAL
- en: The language is primarily used on web servers to create dynamic web content.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some quick facts on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: PHP'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designed by**: Rasmus Lerdorf'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First public release**: 1995'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paradigm**: Imperative, functional, object-oriented, procedural'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typing**: Dynamic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.php`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello world in PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The primary use of PHP is to run alongside a web server, and applications written
    in PHP will most often be used to produce dynamic web content. But we can run
    PHP applications as standalone console applications if we download the PHP executable
    from [https://php.net](https://php.net):'
  prefs: []
  type: TYPE_NORMAL
- en: As PHP code can be written in the same document as HTML code, all PHP source
    code that we write must be within `php` tags. The opening tag is `<?php` and the
    closing tag is `?>`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We use `echo` to display our message in the console window. You will not need
    to use any parentheses with `echo`, as it is not a function but a language construct.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Note that all non-compound statements in PHP end with a semicolon:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Variable declaration in PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As PHP is a dynamically typed language, we will not need to provide any implicit
    information on what data type to use when we declare variables. The variable type
    will be deducted automatically for us, and the type we end up with depends on
    what we assign to the variable.
  prefs: []
  type: TYPE_NORMAL
- en: An oddity that PHP has inherited from the language Perl is that all variable
    names must start with a dollar sign. In Perl, this had a meaning as different
    signs identified different types, but PHP only has the dollar sign for all types.
  prefs: []
  type: TYPE_NORMAL
- en: Let's try this. We first assign the value `10` to our `$myIintValue` variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert this integer into a string, we will use a `strval` function and
    pass the integer to it. This will convert this value into a string, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The for loop in PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP uses the C style of `for` loops. It has three sections, separated by semicolons.
    The first section will initialize the loop variable to its starting value; in
    our case, that will be `0`. The next section is the condition that will tell us
    for how long the `for` loop will run; in our case, that is as long as the variable
    is less than 10\. The final section is how the variable will change in each iteration.
    We are using the `++` operator here so that the variable will increase by one
    each iteration.
  prefs: []
  type: TYPE_NORMAL
- en: Inside the loop, we will print the value of the loop variable.
  prefs: []
  type: TYPE_NORMAL
- en: 'As `echo` in PHP will not provide any newline character, we will need to append
    it after our loop variable in each iteration. We can concatenate the value of
    the loop variable and the newline character (`\n`) by inserting a period between
    the two:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: Functions in PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As PHP is dynamically typed, we will not need to specify any data type for the
    return value of the function or for the arguments as we need to do in C++, C#,
    and Java.
  prefs: []
  type: TYPE_NORMAL
- en: We use the `function` keyword to define that this is a function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that in PHP, the `&&` symbols mean `and`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: while loops, user input, if statements, and foreach loops in PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In PHP, we can create a dynamic array by using `array()`. An array in PHP is
    not an array but an ordered map, in other languages known as a dictionary or an
    associative array. But for this application, this does not matter:'
  prefs: []
  type: TYPE_NORMAL
- en: After the array is created, we declare the input variable that will hold the
    values the user enters. We set it to `0`, so when we come to the `while` loop
    on the next line, we will enter the loop.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we will use `readline` to get a value from the user. We can pass a string
    to `readline`, and that string will be printed to the screen as a prompt to the
    user. This way, we will not have a separate line that prints this message.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The value we get from `readline` will be a string, so we use `intval` to convert
    it to an integer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we check whether the value is greater than or equal to `0`. If it is,
    we will use the `array_push` function. This function takes two arguments. The
    first one is the array into which we want to push a value, and the second argument
    is the value we want to be pushed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the user enters a negative number, we will exit the `while` loop and enter
    a `foreach` loop that will print all the values the user entered. If you compare
    this program with the ones written for the other languages, you will see that
    the array and the variable have switched placed in PHP compared to the others.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `foreach` loop, we print the values to the console:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python was designed and created in the late 1980s by the Dutch programmer Guido
    van Rossum as a successor to the ABC language. The main design philosophy behind
    the language is code readability.
  prefs: []
  type: TYPE_NORMAL
- en: While developing the language, van Rossum enjoyed the British comedy group Monty
    Python and decided to name his new language after them.
  prefs: []
  type: TYPE_NORMAL
- en: The popularity of the language has grown exponentially over the last few years,
    and it is now ranked as one of the most popular languages out there.
  prefs: []
  type: TYPE_NORMAL
- en: It is a general-purpose language that can be used for most types of applications.
    The common uses for the language include the development of web applications and
    use in data science. As it is considered one of the easiest programming languages
    to learn for beginner programmers, it is often used as an introductory language.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some quick facts about it:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: Python'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Designed by**: Guido van Rossum'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**First public release**: 1990'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Paradigm**: Multi-paradigm, functional, imperative, object-oriented, structured'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Typing**: Dynamic'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hello world in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As Python is a scripting language, we will not need to put our code within
    any special function or class. To print a message to the console window, we will
    just use the `print` function and pass whatever we want to print to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: Declaring variables in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Python is a dynamically typed language, we will not need to provide any information
    on what type our variables will use. That will be deducted automatically for us
    when we assign a value to the variable.
  prefs: []
  type: TYPE_NORMAL
- en: To declare an integer variable, we just assign an integer to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'To convert this integer to a string, we can use a class called `str` and pass
    the integer to it. As everything in Python is an object, this will return a new
    string object to us:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The for loop in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When it comes to `for` loops, Python will be different from all the other languages
    we look at here. It does not implement a `for` loop that uses the C-style format.
    A `for` loop in Python will iterate over a sequence of some sort. As we don't
    have any sequence, we can use something called `range`. Now, `range` looks like
    a function, but in reality, it is something that is called a `10`, at the first
    iteration, it will generate the value `0`. In the next iteration, the generated
    value will be `1`, and so on up to `9`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, note that Python does not use braces to indicate a compound statement,
    as we can see in this `for` statement. Instead, the content of the `for` loop
    is indented with four spaces. Also, note the colon as the last character on the
    first line. It is an indication that the next line should be indented:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: Functions in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As Python is dynamically typed, we will not need to specify any data type for
    the return value of the function or for the arguments as we need to do in C++,
    C#, and Java.
  prefs: []
  type: TYPE_NORMAL
- en: 'We use the `def` keyword to define that this is a function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: while loops, user input, if statements, and foreach loops in Python
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In Python, we can use a list to store the values the user enters. A list in
    Python is dynamic, so it can grow as the user enters new values:'
  prefs: []
  type: TYPE_NORMAL
- en: We declare the list and make it empty, to start with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we declare the variable we will use for the user input and set it to `0`.
    The reason we use zero is so that when we come to the line with the `while` loop,
    we want the condition to be true. It will be true if the `input_value` variable
    is `0` or greater.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the `while` loop, we will use the `input` function to let the user enter
    values. The `input` function lets us pass a string to it, and that string will
    be displayed to the user. This takes away the need we have in some other languages
    to actually print this message first and then get the user input.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The value we get from the `input` function is a string, so we need to convert
    it to `int`. We do that by passing the entered string to `int()`. This will create
    an integer with the value entered.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, we check whether the entered value is greater than or equal to `0`. If
    it is, we will append it to our list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When the user enters a negative number, we will exit the `while` loop and continue
    to a `for` loop. `for` loops in Python always work like `foreach` loops. A `for`
    loop wants a sequence, and it will go through all the values of that sequence.
    Our list is such a sequence, so we will get one item each time we iterate, and
    we can now print that item value, as shown here:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
