- en: Chapter 5. Storing Data in Google Cloud SQL
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第5章。在Google Cloud SQL中存储数据
- en: 'Google Cloud SQL is a MySQL database server instance that lives in the Google
    cloud infrastructure; it can be used from outside Google Cloud Platform within
    applications that don''t run on the App Engine platform. We will learn how to
    use it both ways: by adding code to our Notes application and creating a standalone
    script that runs on our workstation.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Google Cloud SQL是一个位于Google云基础设施中的MySQL数据库服务器实例；它可以在不运行在App Engine平台的应用程序中从Google
    Cloud Platform外部使用。我们将学习两种使用方法：通过向我们的笔记应用程序添加代码以及创建一个在我们工作站上运行的独立脚本。
- en: Google offers two billing plans for Cloud SQL, **Packages** and **Per Use**,
    without providing any free tier. This means we have to pay to execute the code
    in this chapter, though choosing the Per Use plan and running the instance for
    the sole purpose of going through the chapter should be extremely cheap.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Google为Cloud SQL提供两种计费计划，**套餐**和**按使用量计费**，不提供任何免费层。这意味着我们必须为执行本章中的代码付费，尽管选择按使用量计费计划并且仅为了通过本章而运行实例应该非常便宜。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: How to create, configure, and run a Cloud SQL instance
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何创建、配置和运行一个Cloud SQL实例
- en: How to manage a running instance
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何管理正在运行的实例
- en: How to use Cloud SQL from App Engine
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从App Engine使用Cloud SQL
- en: How to use Cloud SQL from outside App Engine
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如何从App Engine外部使用Cloud SQL
- en: Creating a Cloud SQL instance
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个Cloud SQL实例
- en: We will make heavy use of Developer Console throughout this chapter, and we
    start by creating an instance of a Cloud SQL database. As we already know from
    [Chapter 1](ch01.html "Chapter 1. Getting Started"), *Getting Started*, even if
    we created our Notes application from App Engine Admin Console, we should have
    a corresponding project on Developer Console.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在本章中大量使用开发者控制台，我们首先创建一个Cloud SQL数据库的实例。正如我们从[第1章](ch01.html "第1章。入门")，“入门”中已经知道的那样，即使我们从App
    Engine管理员控制台创建了我们的笔记应用程序，我们也应该在开发者控制台中有一个对应的项目。
- en: Note
  id: totrans-10
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: At this point, we must have enabled the billing feature for our project to access
    all the Cloud-SQL-related functionalities from within Developer Console.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们必须为我们的项目启用计费功能，以便从开发者控制台中访问所有与Cloud-SQL相关的功能。
- en: 'From Developer Console, once our project is selected, we have to perform the
    following:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 从开发者控制台，一旦我们选择了项目，我们必须执行以下操作：
- en: Click the **Cloud SQL** item under the **Storage** section on the left-hand
    side menu.
  id: totrans-13
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击左侧菜单中的**存储**部分下的**Cloud SQL**项。
- en: Push the **Create an instance** button.
  id: totrans-14
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建实例**按钮。
- en: Provide a name for the database instance, for example, **myfirst**; the name
    of the instance must be unique within a project and will be always combined with
    the project name.
  id: totrans-15
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为数据库实例提供一个名称，例如，**myfirst**；实例的名称必须在项目内是唯一的，并且将始终与项目名称结合使用。
- en: Select **REGION**, the same as the location of the App Engine application (most
    likely **United States**).
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**区域**，与App Engine应用程序的位置相同（最可能是**美国**）。
- en: Select a tier for the instance; we can safely use the cheapest tier for the
    purpose of this chapter, the one labeled **D0**.
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为实例选择一个层级；为了本章的目的，我们可以安全地使用最便宜的层级，标记为**D0**。
- en: Click on the **Save** button.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**保存**按钮。
- en: 'The following screenshot shows Developer Console:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了开发者控制台：
- en: '![Creating a Cloud SQL instance](img/8194OS_05_01.jpg)'
  id: totrans-20
  prefs: []
  type: TYPE_IMG
  zh: '![创建一个Cloud SQL实例](img/8194OS_05_01.jpg)'
- en: The creation process for our Cloud SQL instance will immediately start. In a
    few minutes, the status of the instance will become runnable, which means that
    we can start the instance whenever we need it. We're not charged of any fee while
    the instance is in the runnable state.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 我们Cloud SQL实例的创建过程将立即开始。几分钟内，实例的状态将变为可运行状态，这意味着我们可以随时启动实例。在实例处于可运行状态时，我们不收取任何费用。
- en: Configuring access
  id: totrans-22
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置访问
- en: Before using our database instance, we should configure access permissions and
    credentials to control who can perform connections to the database and how. There
    are two levels of access control, one at the Cloud Platform level and another
    at the database level. The first level authorizes access to the Cloud SQL instance
    from client applications, either from the App Engine infrastructure by checking
    the application ID, or from a remote node on the Internet by checking the source
    IP address. The second level is the MySQL privilege system that is responsible
    for authentication of users and associate them with privileges on databases, such
    as the ability to perform the `SELECT`, `INSERT`, `UPDATE` or `DELETE` operation.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用我们的数据库实例之前，我们应该配置访问权限和凭证，以控制谁可以执行到数据库的连接以及如何进行。存在两个级别的访问控制，一个在云平台级别，另一个在数据库级别。第一级授权客户端应用程序访问云SQL实例，无论是通过检查应用程序ID从App
    Engine基础设施，还是通过检查源IP地址从互联网上的远程节点。第二级是MySQL权限系统，负责用户的身份验证并将他们与数据库的权限相关联，例如执行`SELECT`、`INSERT`、`UPDATE`或`DELETE`操作。
- en: 'If we created the Cloud SQL instance from within our project settings in Developer
    Console, our App Engine application is already authorized to connect to the database.
    To double-check, on Developer Console we have to:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在开发者控制台的项目设置中创建了云SQL实例，我们的App Engine应用程序已经授权连接到数据库。为了双重检查，在开发者控制台中我们必须：
- en: Click on **Cloud SQL** menu item.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**云SQL**菜单项。
- en: Click on the instance ID.
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击实例ID。
- en: Open the **Access Control** tab.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开**访问控制**选项卡。
- en: Under the **Authorized App Engine Applications** label, we can see whether our
    application ID is listed.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在**授权App Engine应用程序**标签下，我们可以查看我们的应用程序ID是否已列出。
- en: While we are on that page, we can set up the access for our local machine; this
    is needed to perform administrative tasks such as adding users and databases using
    any MySQL client. We first need to assign an IP address for our instance so that
    we can reach it from outside the Cloud Platform infrastructure; click the **Add
    new** link, next to the **IP Addresses** label and wait for the address to be
    assigned to our instance.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在该页面上时，我们可以为我们的本地机器设置访问权限；这是执行添加用户和数据库等管理任务所需的，可以使用任何MySQL客户端。我们首先需要为我们的实例分配一个IP地址，以便我们可以从云平台基础设施外部访问它；点击**添加新链接**，位于**IP地址**标签旁边，并等待地址分配给我们的实例。
- en: Note
  id: totrans-30
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: When we request an IP address for Cloud SQL instances, we should be aware that
    we will be charged for the time we use this address while instances are not running.
    To lower costs, we can release the IP address as soon as we don't need it.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们请求云SQL实例的IP地址时，我们应该意识到，在实例未运行时使用此地址的时间将会产生费用。为了降低成本，我们可以在不需要时立即释放IP地址。
- en: 'When we connect from our local machine to the Cloud SQL instance, we are obviously
    outside the App Engine infrastructure, so we have to add our public IP address
    to the list of the hosts allowed to access from the Internet. For this, we need
    to perform the following:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们从我们的本地机器连接到云SQL实例时，显然我们处于App Engine基础设施之外，因此我们必须将我们的公网IP地址添加到允许从互联网访问的主机列表中。为此，我们需要执行以下操作：
- en: Get our public IP address; we can use Google for this by hitting this [https://www.google.com/#q=my-ip](https://www.google.com/#q=my-ip)
    URL.
  id: totrans-33
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取我们的公网IP地址；我们可以通过访问这个[https://www.google.com/#q=my-ip](https://www.google.com/#q=my-ip)
    URL来使用Google进行此操作。
- en: Click on the **Add new** link next to the **Authorized Networks** label.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**授权网络**标签旁边的**添加新链接**。
- en: Fill out the form with our public IP address.
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用我们的公网IP地址填写表格。
- en: Click on the **Add** button.
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加**按钮。
- en: 'The following screenshot shows Developer Console:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了开发者控制台：
- en: '![Configuring access](img/8194OS_05_02.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![配置访问](img/8194OS_05_02.jpg)'
- en: From now on, we can connect to our Cloud SQL instance using the MySQL command
    line client, for instance, from our laptop. For the first level of the access
    control system, that's enough for now; we can proceed to configuring the second
    level.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，我们可以使用MySQL命令行客户端连接到我们的云SQL实例，例如从我们的笔记本电脑。对于访问控制系统的第一级，目前这已经足够了；我们可以继续配置第二级。
- en: Setting the root password
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置root密码
- en: 'The first step to take full control of our Cloud SQL instance is setting a
    password for the MySQL `root` user; to do this, perform the following:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 要完全控制我们的云SQL实例，第一步是为MySQL的`root`用户设置密码；为此，请执行以下操作：
- en: On Developer Console, we go to the **ACCESS CONTROL** tab page.
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在开发者控制台中，我们转到**访问控制**选项卡。
- en: Fill the field under the **Set Root Password** section with the desired password.
  id: totrans-43
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**设置Root密码**部分下填写所需的密码。
- en: Click on the **Set** button.
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**设置**按钮。
- en: In the next paragraph, we will see how to connect to the instance as a `root`
    user and perform the administrative tasks we need to complete before using the
    instance from within our Notes application.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一段中，我们将看到如何以`root`用户身份连接到实例，并执行在使用我们的Notes应用程序内部使用实例之前需要完成的行政任务。
- en: Connecting to the instance with the MySQL console
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用MySQL控制台连接到实例
- en: To interact with our Cloud SQL instance, we will use the MySQL command line
    client, which is available for all the platforms supported by App Engine, even
    if we can use any client we feel more comfortable with. The client is usually
    shipped together with most MySQL server installation packages; besides having
    the MySQL client tool installed, it is advisable to install MySQL and have a local
    server running so that we can work with it instead of the production instance
    while developing applications. We will get back to this soon in this chapter.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要与我们的Cloud SQL实例交互，我们将使用MySQL命令行客户端，该客户端适用于App Engine支持的所有平台，即使我们可以使用任何我们更熟悉的客户端。客户端通常与大多数MySQL服务器安装包一起提供；除了安装MySQL客户端工具外，建议安装MySQL并运行本地服务器，这样我们就可以在开发应用程序时使用它而不是生产实例。我们将在本章中很快回到这一点。
- en: Creating the notes database
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建notes数据库
- en: 'The first task we need to perform is creating a new database on the Cloud SQL
    instance; we will use this to store data from our Notes application. To connect
    to the instance, we issue the following from the command line:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要执行的第一项任务是创建Cloud SQL实例上的新数据库；我们将使用它来存储我们的Notes应用程序中的数据。要连接到实例，我们从命令行发出以下指令：
- en: '[PRE0]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'After inserting the password for the `root` user, we should get into the MySQL
    monitor and see an output similar to the following:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在插入`root`用户的密码后，我们应该进入MySQL监控器，并看到以下类似的输出：
- en: '[PRE1]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If we successfully managed to get to the prompt, we can create a database named
    `notes` by issuing the following instructions:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们成功管理到提示符，我们可以通过以下指令创建一个名为`notes`的数据库：
- en: '[PRE2]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The output of the command should be very similar to the previous command in
    the case of success; we can now proceed to creating a dedicated database user
    we will use to perform connections from our Notes application.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果成功，命令的输出应该与前一个命令非常相似；我们现在可以继续创建一个专门的数据库用户，我们将使用它从我们的Notes应用程序进行连接。
- en: Creating a dedicated user
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建专用用户
- en: 'The `root` user in a MySQL installation has unlimited privileges and it is
    a good security practice to avoid connecting to the server with the `superuser`
    credentials. For this reason, we create a dedicated user that we will use to make
    connections from our Notes application and that is able to operate exclusively
    on the `notes` database. Before proceeding, we remove the anonymous localhost
    access provided by default in Cloud SQL instances; this is a good security practice
    and avoids the anonymous user to shadow regular users when MySQL checks for user
    permissions. From the client, we issue the statement:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: MySQL安装中的`root`用户具有无限权限，避免使用`superuser`凭据连接到服务器是一种良好的安全实践。因此，我们创建一个专用用户，我们将使用它从我们的Notes应用程序进行连接，并且能够专门在`notes`数据库上操作。在继续之前，我们删除Cloud
    SQL实例默认提供的匿名localhost访问；这是一种良好的安全实践，避免了当MySQL检查用户权限时匿名用户会掩盖普通用户。从客户端，我们发出以下语句：
- en: '[PRE3]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'We then proceed creating a regular user:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我们继续创建一个普通用户：
- en: '[PRE4]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Of course, we should pick up a stronger password; anyway, we have just created
    a new user named `notes` who will be able to perform connections from any host
    (notice the `%` character that is a wildcard matching any host). For convenience,
    we grant to the `notes` user any privilege on the `notes` database:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我们应该选择一个更强的密码；无论如何，我们刚刚创建了一个名为`notes`的新用户，该用户将能够从任何主机进行连接（注意`%`字符是一个通配符，匹配任何主机）。为了方便，我们授予`notes`用户对`notes`数据库的任何权限：
- en: '[PRE5]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We finally make MySQL server reload all the updated privileges with the following
    statement:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最终使用以下语句让MySQL服务器重新加载所有更新的权限：
- en: '[PRE6]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We can now disconnect from the server, ending the current session with the
    `\q` command and try to reconnect using the `notes` user:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以断开与服务器的连接，使用`\q`命令结束当前会话，并尝试使用`notes`用户重新连接：
- en: '[PRE7]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'We should establish a connection with the MySQL monitor without errors, and
    then we can check whether we can actually access the `notes` database:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们应该无错误地与MySQL监控器建立连接，然后我们可以检查我们是否真的可以访问`notes`数据库：
- en: '[PRE8]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: We can now proceed with creating tables for storing data in our Notes application.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以继续创建用于存储 Notes 应用程序数据的表。
- en: Creating tables
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建表
- en: 'Suppose we want to log users activities and store this information on a database
    so that we can use them later for, let''s say, business intelligence analysis.
    Using Datastore for this purpose is not a good idea for at least two reasons:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要记录用户活动并将这些信息存储在数据库中，以便我们可以在以后用于，比如说，商业智能分析。使用 Datastore 来实现这个目的至少有两个原因是不好的：
- en: We will likely end with writing a lot of data, thus we cannot use too many indexes
    and we might have to refrain from using grouped entities.
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可能会写入大量数据，因此我们无法使用太多索引，我们可能不得不避免使用分组实体。
- en: We will require another App Engine application to retrieve and analyze data
    because we cannot access Datastore from outside the platform.
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将需要一个额外的 App Engine 应用程序来检索和分析数据，因为我们无法从平台外部访问 Datastore。
- en: 'Cloud SQL can solve both the issues above, respectively:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud SQL 可以分别解决上述两个问题：
- en: Writing limits for Cloud SQL are far more loose than Datastore.
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Cloud SQL 的写入限制比 Datastore 更宽松。
- en: We can connect to the Cloud SQL instance from an external application and access
    data.
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们可以从外部应用程序连接到 Cloud SQL 实例并访问数据。
- en: 'We can now start defining the data we want to log; for a simple usage analysis,
    we can save the user identifier, the type of operation performed, and the date
    and time of such an operation. Once connected to the server with the MySQL client,
    we can issue the `CREATE` statement:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始定义我们想要记录的数据；对于简单的使用分析，我们可以保存用户标识符、执行的操作类型以及此类操作的日期和时间。一旦通过 MySQL 客户端连接到服务器，我们就可以发出
    `CREATE` 语句：
- en: '[PRE9]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'If the query succeeded, we should see something like this output:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 如果查询成功，我们应该看到类似以下输出：
- en: '[PRE10]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'The SQL statement creates a relation or table named `ops` inside the `notes`
    database. The table has 4 columns:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: SQL 语句在 `notes` 数据库内部创建了一个名为 `ops` 的关系或表。该表有 4 个列：
- en: '**The** `id` **column** This contains integer values that increment automatically
    every time a new row is inserted; this is the primary key.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“id”** 列 This 包含自动递增的整数值，每次插入新行时都会增加；这是主键。'
- en: '**The** `user_id` **column**: This holds the user identifier provided by App
    Engine, which is usually 56 characters long; we set 128 as the length so that
    we have room if the length grows.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“user_id”** 列：这包含 App Engine 提供的用户标识符，通常长度为 56 个字符；我们将其设置为 128 个字符的长度，以便在长度增加时有空间。'
- en: '**The** `operation` **column**: This is to store the type of operation logged;
    16 characters should be more than enough.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“operation”** 列：这是为了存储记录的操作类型；16个字符应该足够了。'
- en: '**The** `date` **column**: This holds the date and time when operation was
    logged.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**“date”** 列：这包含记录操作时的日期和时间。'
- en: Connecting to the instance from our application
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从我们的应用程序连接到实例
- en: 'To connect with Cloud SQL instances from our Python code, we use the `MySQLdb`
    package, which is a MySQL driver that implements the Python Database API as described
    in the **PEP 249** document. To install the package, we can use `pip`; from the
    command line, we issue the following command:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 要从我们的 Python 代码连接到 Cloud SQL 实例，我们使用 `MySQLdb` 包，这是一个实现了 Python 数据库 API 的 MySQL
    驱动程序，如 **PEP 249** 文档所述。要安装该包，我们可以使用 `pip`；从命令行，我们发出以下命令：
- en: '[PRE11]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We don''t specify the `-t` option as we did when installing GCS Client Library
    in [Chapter 3](ch03.html "Chapter 3. Storing and Processing Users'' Data"), *Storing
    and Processing Users'' Data* because the `MySQLdb` package is included in App
    Engine Python Runtime Environment on the production servers and we don''t need
    to upload it during deployment. Instead, we list the package in the `libraries`
    section of the `app.yaml` file:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有指定 `-t` 选项，就像在[第3章](ch03.html "第3章。存储和处理用户数据")中安装 GCS 客户端库时做的那样，*存储和处理用户数据*，因为
    `MySQLdb` 包已包含在生产服务器的 App Engine Python 运行时环境中，我们不需要在部署期间上传它。相反，我们在 `app.yaml`
    文件的 `libraries` 部分列出该包：
- en: '[PRE12]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'A simple test to check if the database connection is working correctly consists
    of retrieving and logging the Cloud SQL version number. We add a function to the
    `utils.py` module to retrieve a connection to the database. We first need to import
    the `MySQLdb` package at the top of our `utils.py` module along with the `os`
    module:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 一个简单的测试来检查数据库连接是否正确工作，包括检索和记录 Cloud SQL 版本号。我们在 `utils.py` 模块中添加了一个函数来获取数据库连接。我们首先需要在
    `utils.py` 模块的顶部导入 `MySQLdb` 包以及 `os` 模块：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Then, we add the following function:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们添加以下函数：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The function returns a connection to the database. We retrieve all the information
    to perform the connection accessing some environment variables so that they are
    easily available from any point in our codebase. To define environment variables,
    we just have to add this at the bottom of our `app.yaml` file:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数返回数据库连接。我们通过访问一些环境变量来检索所有信息以执行连接，这样它们就可以从我们的代码库中的任何位置轻松访问。要定义环境变量，我们只需在`app.yaml`文件的底部添加以下内容：
- en: '[PRE15]'
  id: totrans-96
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'We can use the database connection to get the MySQL version in the `get()`
    method of the `MainHandler` class in the `main.py` module. We first import the
    `get_cloudsql_db()` method and the `logging` module:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用数据库连接来获取`main.py`模块中`MainHandler`类的`get()`方法中的MySQL版本。我们首先导入`get_cloudsql_db()`方法和`logging`模块：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'We modify the `get()` method as follows:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 我们按照以下方式修改`get()`方法：
- en: '[PRE17]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We can run the Notes application with the local development server and access
    the main page with our browser; if everything is okay, we should see a message
    in the log console (or in your shell if you launched the `dev_appserver.py` server
    from there) similar to this:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用本地开发服务器运行Notes应用程序，并用我们的浏览器访问主页；如果一切正常，我们应该在日志控制台（或者如果你从那里启动了`dev_appserver.py`服务器，在你的shell中）看到类似以下的消息：
- en: '[PRE18]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'So far so good, but if we try to deploy the application on App Engine, the
    result will be an error page with this error:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止一切顺利，但如果我们尝试在App Engine上部署应用程序，结果将是一个包含以下错误信息的错误页面：
- en: '**OperationalError: (2004, "Can''t create TCP/IP socket (-1)")**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**OperationalError: (2004, "Can''t create TCP/IP socket (-1)")**'
- en: This is because we are trying to access the Cloud SQL instance using a TCP/IP
    socket, which is perfectly fine if we connect from outside App Engine; due to
    the runtime environment networking restriction though, if we connect from an App
    Engine application, we have to use a Unix socket instead.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这是因为我们正在尝试使用TCP/IP套接字访问Cloud SQL实例，如果我们从App Engine外部连接，这是完全正常的；但由于运行时环境网络限制，如果我们从App
    Engine应用程序连接，我们必须使用Unix套接字。
- en: 'We can change the connection string in the `utils.py` module as follows:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式更改`utils.py`模块中的连接字符串：
- en: '[PRE19]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We need to define an additional environment variable named `CLOUD_SQL_INSTANCE_ID`
    in our `app.yaml` file:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要在`app.yaml`文件中定义一个名为`CLOUD_SQL_INSTANCE_ID`的附加环境变量：
- en: '[PRE20]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If we try to deploy this version of the application, we''ll notice this actually
    works on App Engine but it won''t work on the local environment server anymore.
    To avoid changing the code in the `get_cloudsql_db()` function every time we switch
    from development to production, we can provide a method that detects automatically
    whether an application is running locally or on the App Engine servers. In the
    `utils.py` module, we add the following:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试部署这个应用程序版本，我们会注意到它实际上在App Engine上运行正常，但在本地环境服务器上不再工作。为了避免每次从开发模式切换到生产模式时都修改`get_cloudsql_db()`函数中的代码，我们可以提供一个自动检测应用程序是本地运行还是运行在App
    Engine服务器上的方法。在`utils.py`模块中，我们添加以下代码：
- en: '[PRE21]'
  id: totrans-111
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'This function simply returns the `True` parameter if the application is running
    on App Engine and the `False` parameter otherwise. We can use the function in
    the `get_cloudsql_db()` function in this manner:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数简单地返回如果应用程序在App Engine上运行则返回`True`参数，否则返回`False`参数。我们可以以这种方式在`get_cloudsql_db()`函数中使用该函数：
- en: '[PRE22]'
  id: totrans-113
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: The function will always return the right database connection for the environment
    our application is running on.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 该函数将始终返回应用程序运行的环境的正确数据库连接。
- en: Loading and saving data
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加载数据和保存数据
- en: 'Now that we know how to connect to a Cloud SQL instance from our App Engine
    application, it''s time to learn how to write and read data from the database.
    We already created a table called `ops`, and we will use it to store information
    about user operations. We will log the following events:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经知道如何从我们的App Engine应用程序连接到Cloud SQL实例，是时候学习如何从数据库中写入和读取数据了。我们已创建了一个名为`ops`的表，我们将使用它来存储有关用户操作的信息。我们将记录以下事件：
- en: A user has created a note
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用户创建了一个笔记
- en: A user has added a file
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用户添加了一个文件
- en: A user has performed a shrink operation
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用户执行了收缩操作
- en: 'We have to assign a text code to each of the operation types we want to log.
    To do so, we can use a simple Python class that works as an enumeration. In the
    `utils.py` module, we add the following code:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们必须为想要记录的操作类型分配一个文本代码。为此，我们可以使用一个简单的Python类，它作为一个枚举。在`utils.py`模块中，我们添加以下代码：
- en: '[PRE23]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will see how to use it in a moment. We now provide a `log_operation()` method
    in the `utils.py` module that we will use to log operations in the Cloud SQL database.
    We will call this function within the Notes code passing along the user who actually
    performed the operation, the appropriate operation type, and the date and time
    of the operation. The code is the following:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 我们稍后将看到如何使用它。现在，我们在`utils.py`模块中提供了一个`log_operation()`方法，我们将使用它来记录Cloud SQL数据库中的操作。我们将在Notes代码中调用此函数，传递实际执行操作的用户的用户名、适当的操作类型以及操作日期和时间。代码如下：
- en: '[PRE24]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We first retrieve a valid database connection, and then we get a cursor object
    by calling the `cursor()` method on the connection object. By calling the `execute()`
    method on the cursor object, we can issue SQL statements contained in the string
    we pass as a parameter. In this case, we insert a new row in the `ops` table,
    persisting the user identifier, the string corresponding to the operation type,
    and the date and time when the operation was performed. We finally commit the
    transaction and close the connection.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先检索一个有效的数据库连接，然后通过在连接对象上调用`cursor()`方法来获取一个游标对象。通过在游标对象上调用`execute()`方法，我们可以发出我们传递为参数的字符串中包含的SQL语句。在这种情况下，我们在`ops`表中插入一个新行，持久化用户标识符、对应操作类型的字符串以及操作执行的日期和时间。最后，我们提交事务并关闭连接。
- en: 'We can call the `log_operation()` method from the `main.py` module at various
    points in the code:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在`main.py`模块中的代码的多个位置调用`log_operation()`方法：
- en: 'In the `post()` method of the `MainHandler` class:'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`MainHandler`类的`post()`方法中：
- en: '[PRE25]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'In the `get()` method of the `ShrinkHandler` class:'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`ShrinkHandler`类的`get()`方法中：
- en: '[PRE26]'
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'In the `receive()` method of the `CreateNoteHandler` class:'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`CreateNoteHandler`类的`receive()`方法中：
- en: '[PRE27]'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Notice that by passing the date and time to the `log_operation()` method, we
    can record the actual time at which the user performs the operation instead of
    the time at which the function code was executed; this can be useful if we need
    to be punctual but the function is added to a task queue and executed at a later
    time.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，通过将日期和时间传递给`log_operation()`方法，我们可以记录用户执行操作的实际时间，而不是函数代码执行的时间；如果我们需要准时但函数被添加到任务队列并在稍后执行，这可能很有用。
- en: 'From now on, when someone uses our Notes application, we will collect usage
    information about that user. We can access this information from the Notes application
    itself or another application on App Engine that is authorized to access the same
    Cloud SQL instance; otherwise, we can use a pure Python application that runs
    on our workstation or another remote server to access and process data whenever
    needed. For example, we create an application in an `analyze.py` module outside
    the App Engine project `root` (so that we can avoid uploading the file during
    deployment). The code is as follows:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 从现在起，当有人使用我们的Notes应用程序时，我们将收集有关该用户的用法信息。我们可以从Notes应用程序本身或另一个有权访问同一Cloud SQL实例的应用程序中访问这些信息；否则，我们可以使用一个在我们在工作站或另一个远程服务器上运行的纯Python应用程序来访问和处理所需的数据。例如，我们在App
    Engine项目`root`之外创建一个名为`analyze.py`的应用程序（这样我们就可以在部署时避免上传文件）。代码如下：
- en: '[PRE28]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can run the script from the command line at any time using the following
    line of command:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用以下命令行在任何时候从命令行运行脚本：
- en: '[PRE29]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: Back to the code; in the `main()` method, we first get a connection to the database
    through a TCP/IP socket using the public IP of the instance. Then, we get a cursor
    object and perform the first query that counts the number of users we consider
    active, namely users who performed at least one kind of operation in the past
    month. As this is a count query, we expect only one row as result. In this case,
    we can call the `fetchone()` method of the cursor object; this method returns
    a tuple that contains one value that we get by index and store it in the `users`
    variable that we print on the standard output. With the same strategy, we retrieve
    and print to the standard output the number of operations globally performed in
    the last hour and the total number of shrinking operations.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 回到代码；在`main()`方法中，我们首先通过实例的公网IP使用TCP/IP套接字连接到数据库。然后，我们获取一个游标对象并执行第一个查询，该查询统计我们认为活跃的用户数量，即在过去一个月内至少执行过一种操作的用户。由于这是一个计数查询，我们期望只有一个结果行。在这种情况下，我们可以调用游标对象的`fetchone()`方法；该方法返回一个包含一个值的元组，我们通过索引获取该值并将其存储在`users`变量中，我们在标准输出上打印这个变量。使用相同的策略，我们从标准输出检索并打印过去一小时全局执行的操作数量以及总压缩操作数量。
- en: This is just a simple example but it shows how easy it can be to get usage metrics
    for our web applications extracting data from a Cloud SQL instance with any Python
    program running outside App Engine.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这只是一个简单的例子，但它展示了如何容易地从Cloud SQL实例中提取数据来为我们的Web应用程序获取使用度量，使用运行在App Engine外部的任何Python程序。
- en: Using the local MySQL installation for development
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用本地MySQL安装进行开发
- en: There are several reasons why we wouldn't want to work with a Cloud SQL instance
    while running our application locally in the development server. We might notice
    major slowdowns because every time we connect to a Cloud SQL instance, we perform
    a socket connection to a remote host that can be very far from us. Moreover, regardless
    of the Cloud SQL tier we choose, we always pay something for using the service
    and we might not want to use it while experimenting on the local development server.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 有几个原因说明为什么我们不想在本地开发服务器上运行应用程序时与Cloud SQL实例一起工作。我们可能会注意到严重的减速，因为每次我们连接到Cloud
    SQL实例时，我们都会与一个可能非常遥远的远程主机进行套接字连接。此外，无论我们选择哪个Cloud SQL层，我们都会为使用该服务付费，而我们可能不想在本地开发服务器上进行实验时使用它。
- en: Fortunately, we can leverage the fact that, in the end, a Cloud SQL instance
    is nothing more than a MySQL database when our code talks to it. We can then install
    a local instance of a MySQL server and work with this.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，当我们的代码与之交互时，Cloud SQL实例最终不过是一个MySQL数据库。因此，我们可以安装一个本地的MySQL服务器实例并与之工作。
- en: 'We install and start the local server and perform the same operations we did
    on the Cloud SQL instance:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们安装并启动本地服务器，并执行我们在Cloud SQL实例上所做的相同操作：
- en: Connect with the MySQL client.
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用MySQL客户端进行连接。
- en: Create the `notes` database.
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`notes`数据库。
- en: Create the `notes` users and give them privileges on the `notes` database.
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`notes`用户并授予他们在`notes`数据库上的权限。
- en: Reload database privileges.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新加载数据库权限。
- en: Create the `ops` table.
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`ops`表。
- en: 'At this point, all we have to do is change the `CLOUD_SQL_IP` environment variable
    in our `app.yaml` file so that it points to `localhost` variable:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们只需更改我们的`app.yaml`文件中的`CLOUD_SQL_IP`环境变量，使其指向`localhost`变量：
- en: '[PRE30]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: We can now start using the local instance, avoiding network lags and costs.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以开始使用本地实例，避免网络延迟和成本。
- en: Summary
  id: totrans-151
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we put into action Cloud SQL, the scalable database service
    offered by Google Cloud Platform. Cloud SQL is more than a MySQL instance; it
    is a flexible and scalable relational database server that we can use to store
    and retrieve data from our App Engine applications as well as from external services
    and applications.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将使用由Google Cloud Platform提供的可扩展数据库服务Cloud SQL。Cloud SQL不仅仅是一个MySQL实例；它是一个灵活且可扩展的关系型数据库服务器，我们可以用它来存储和检索来自我们的App
    Engine应用程序以及外部服务和应用程序的数据。
- en: Even if Cloud Datastore is the go-to solution when we have to deal with lot
    of data in our highly trafficked web applications, in this chapter, you learned
    how convenient it can be to have a relational database to store some data without
    hitting on the limits Datastore imposes to write operations. Being able to access
    that data from outside App Engine is a big plus and we have seen a simple yet
    effective use case, which we couldn't have implemented using Datastore.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 即使当我们在高流量Web应用程序中处理大量数据时，Cloud Datastore是首选解决方案，但在本章中，你了解到拥有一个关系型数据库来存储一些数据是多么方便，而无需触及Datastore对写操作施加的限制。能够从App
    Engine外部访问这些数据是一个很大的优势，我们已经看到了一个简单而有效的用例，而这使用Datastore是无法实现的。
- en: In the next chapter, we will add new features to our Notes application; we will
    make the application real time using Channel API to push data from the server
    to the clients connected.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将向我们的笔记应用程序添加新功能；我们将使用Channel API使应用程序实时，将数据从服务器推送到连接的客户端。
