["```py\n    a=10; b=20 \n    def my_function(): \n        global a \n        a=11; b=21 \n    my_function() \n    print(a) #prints 11 \n    print(b) #prints 20\n\n```", "```py\n    x='one' \n    if x==0:  \n        print('False') \n    elif x==1: \n        print('True') \n    else: print('Something else') \n    #prints 'Something else' \n\n```", "```py\n    if a== b: #a and b have the same value \n\n    if a is b: # if a and b are the same object \n    if type(a) is type(b): # a and b are the same type \n\n```", "```py\n    def f1(x): return x*2 \n    def f2(x): return x*4 \n\n    lst = [] \n    for i in range(16): \n        lst.append(f1(f2(i))) \n\n    print(lst) \n\n    print([f1(x)  for x in range(64) if x in [f2(j) for j in range(16)]]) \n\n```", "```py\n    def greeting(language): \n    if language== 'eng': \n             return 'hello world' \n       if language  == 'fr' \n             return 'Bonjour le monde' \n       else: return 'language not supported' \n\n```", "```py\n    # compares the running time of a list compared to a generator \n    import time \n    #generator function creates an iterator of odd numbers between n and m \n    def oddGen(n, m):         \n        while n < m: \n            yield n \n            n += 2 \n    #builds a list of odd numbers between n and m \n    def oddLst(n,m): \n        lst=[] \n        while n<m: \n            lst.append(n) \n            n +=2 \n        return lst \n    #the time it takes to perform sum on an iterator    \n    t1=time.time() \n    sum(oddGen(1,1000000)) \n    print(\"Time to sum an iterator: %f\" % (time.time() - t1)) \n\n    #the time it takes to build and sum a list \n    t1=time.time() \n    sum(oddLst(1,1000000)) \n    print(\"Time to build and sum a list: %f\" % (time.time() - t1))      \n\n```", "```py\n    for i in oddcount(1,10):print(i) \n\n```", "```py\n    class Employee(object): \n        numEmployee = 0 \n        def __init__(self, name, rate): \n            self.owed = 0         \n            self.name = name \n            self.rate=rate \n            Employee.numEmployee += 1 \n\n        def __del__(self): \n            Employee.numEmployee -= 1 \n\n        def hours(self, numHours): \n            self.owed += numHours * self.rate \n            return(\"%.2f hours worked\" % numHours) \n\n        def pay(self):                 \n            self.owed = 0 \n            return(\"payed %s \" % self.name) \n\n```", "```py\n    class my_class(): \n        def __init__(self, greet): \n            self.greet = greet \n        def __repr__(self): \n            return 'a custom object (%r)' % (self.greet) \n\n```", "```py\n    class specialEmployee(Employee): \n        def hours(self, numHours): \n            self.owed += numHours * self.rate * 2 \n            return(\"%.2f hours worked\" % numHours)    \n\n```", "```py\n    class specialEmployee(Employee): \n        def __init__(self,name,rate, bonus): \n            Employee.__init__(self, name, rate) #calls the base classes \n            self.bonus = bonus \n\n        def hours(self, numHours): \n            self.owed += numHours * self.rate + self.bonus  \n            return(\"%.2f hours worked\" % numHours)      \n\n```", "```py\n    class Aexp(object): \n        base=2 \n        @classmethod \n        def exp(cls,x): \n            return(cls.base**x) \n\n    class Bexp(Aexp): \n            base=3 \n\n```", "```py\n    class Bexp(Aexp): \n        __base=3 \n        def __exp(self): \n            return(x**cls.base)     \n\n```"]