["```py\nfrom fastapi import FastAPI\napp = FastAPI(title=\"FastAPI Live Application\")\n@app.get(\"/\")\ndef read_root():\n    return {\"Hello\": \"World\"}\n```", "```py\n$ pip install \"fastapi~=0.111.0\"\n```", "```py\n$ pip install fastapi --upgrade\n```", "```py\n$ fastapi dev\n```", "```py\nINFO    Using path app\\main.py\n```", "```py\n╭─ Python module file ─╮\n│                      │\n│   main.py            │\n│                      │\n╰──────────────────────╯\nINFO    Importing module main\nINFO    Found importable FastAPI app\n╭─ Importable FastAPI app ─╮\n│                          │\n│  from main import app    │\n│                          │\n╰──────────────────────────╯\nINFO    Using import string main:app\n```", "```py\n╭────────── FastAPI CLI - Development mode ───────────╮\n│                                                     │\n│  Serving at: http://127.0.0.1:8000                  │\n│                                                     │\n│  API docs: http://127.0.0.1:8000/docs               │\n│                                                     │\n│  Running in development mode, for production use:   │\n│                                                     │\n│  fastapi run                                        │\n│                                                     │\n╰─────────────────────────────────────────────────────╯\n```", "```py\n$ fastapi run\n```", "```py\n$ fastapi run --help\n```", "```py\n$ fastapi run\n```", "```py\n$ uvicorn app.main:app --host 0.0.0.0\n```", "```py\n$ mkcert\n```", "```py\n    $ mkcert -install\n    The local CA is now installed in the system trust store! ⚡\n    ```", "```py\n    example.com+5-key.pem for the key and example.com+5.pem for the certificate.\n    ```", "```py\n    $ uvicorn app.main:app --port 443  \\\n    --ssl-keyfile example.com+5-key.pem \\\n    --ssl-certfile example.com+5.pem\n    ```", "```py\nfrom fastapi import FastAPI\nfrom fastapi.middleware.httpsredirect import (\n    HTTPSRedirectMiddleware,\n)\napp = FastAPI(title=\"FastAPI Live Application\")\napp.add_middleware(HTTPSRedirectMiddleware)\n# rest of the module\n```", "```py\n$ docker images\n```", "```py\nFROM python:3.10\n```", "```py\nWORKDIR /code\n```", "```py\nCOPY ./requirements.txt /code/requirements.txt\nRUN pip install --no-cache-dir -r /code/requirements.txt\n```", "```py\nCOPY ./app /code/app\n```", "```py\nCMD [\"fastapi\", \"run\", \"app/main.py\", \"--port\", \"80\"]\n```", "```py\n$ docker build -f Dockerfile.dev -t live-application .\n```", "```py\n$ docker images live-application\n```", "```py\nREPOSITORY      TAG    IMAGE ID    CREATED        SIZE\nlive-application latest  7ada80a535c2 43 seconds ago 1.06GB\n```", "```py\n$ docker run -p 8000:80 live-application\n```", "```py\n$ docker ps -a\n```", "```py\nimport logging\nfrom os import getpid\n# rest of the module\nlogger = logging.getLogger(\"uvicorn\")\n# rest of the module\n@app.get(\"/\")\ndef read_root():\n    logger.info(f\"Processd by worker {getpid()}\")\n    return {\"Hello\": \"World\"}\n```", "```py\nfastapi\ngunicorn instead of uvicorn to run the server.\nIf you are on Linux or macOS, you simply install `gunicorn` in your environment like this:\n\n```", "```py\n\n Then, run the server with four workers with the following command:\n\n```", "```py\n\n If you are on Windows, we will use Docker. In the `Dockerfile.dev` file, add the new `CMD` instruction below the existing one, which will be ignored:\n\n```", "```py\n\n Then, build the Docker image with the following:\n\n```", "```py\n\n Next, run the container from the image:\n\n```", "```py\n\n The `-i` parameter allows you to run the container in interactive mode to see the logs.\nAfter the server is running, open the browser on `http://localhost:8000/docs` and use the interactive documentation to make calls. On the terminal output, you will notice different PIDs that vary for each call.\nThis shows that Gunicorn can distribute the load among different processes, and you can take advantage of multiple CPU cores.\nYou have learned how to run a FastAPI app with Gunicorn and multiple workers, which can improve the performance and scalability of your web service. You can experiment with different settings and options to find the optimal configuration for your needs.\nImportant note\nYou can run multiple workers with Uvicorn as well. However, Uvicorn’s worker process management is not as advanced as Gunicorn’s at the moment.\nThere’s more…\nOne of the benefits of running Gunicorn with multiple workers is that it can handle more concurrent requests and improve the performance and availability of the web application. However, there are also some challenges and trade-offs that come with this approach.\nFor example, when using multiple workers, each worker process has its own memory space and cannot share data with other workers. This means that any stateful components of the application, such as caches or sessions, need to be stored in a centralized or distributed service, such as Redis or Memcached. Moreover, multiple workers may increase resource consumption and the risk of contention on the server machine, especially if the application is CPU-intensive or input/output-bound. Therefore, it is important to choose the optimal number of workers based on the characteristics of the application and the available resources.\nA common heuristic is to use the formula *workers = (2 x cores) + 1*, where *cores* means the number of CPU cores on the server. However, this may not be suitable for all scenarios and may require some experimentation and fine-tuning.\nSee also\nYou can discover more about Gunicorn in the official documentation at this link: \n\n*   *gunicorn:* [https://gunicorn.org/](https://gunicorn.org/)\n\nAlso, you can have a look at the page in the FastAPI documentation dedicated to server workers:\n\n*   *Server Workers – Gunicorn with* *Uvicorn:* [https://fastapi.tiangolo.com/deployment/server-workers/](https://fastapi.tiangolo.com/deployment/server-workers/)\n\nDeploying your FastAPI application on the cloud\nDeploying your FastAPI application on the cloud is an essential step to make it accessible to users worldwide. In this recipe, we will demonstrate how to deploy a FastAPI application on Railway.\nRailway is a versatile and user-friendly platform that enables developers to deploy, manage, and scale their applications with ease. By the end of the recipe, you will have a FastAPI application running on Railway, ready to serve users on the internet.\nGetting started\nBefore we begin, ensure that you have already set up an application, as we will be deploying it on the cloud. The recipe will be applied to our `Live Application`, the basic application created in the *Running the server with the FastAPI* *CLI* recipe.\nAlso, put the project folder on GitHub, since it will be used as a reference for the deployment.\nYou will also need to set up an account at [https://railway.app](https://railway.app). The creation is straightforward, and you can use your GitHub account as well. When you sign up, you will receive a $5 credit, which is more than enough to cover the recipe.\nHow to do it…\nWe will demonstrate how to deploy the application on Railway through the following steps:\n\n1.  Create the configuration file.\n2.  Connect the Git repository.\n3.  Configure the deployment.\n\n    Although we will demonstrate it specifically for Railway, these steps are also common for other cloud services.\n\nCreating the configuration file\nEvery deployment tool requires a configuration file that contains specifications for the deployment. To deploy on Railway, under our project root folder, let’s create a file called `Procfile`. The file content will be as follows:\n\n```", "```py\n\n Remember to push the file to the GitHub repository hosting your project to be visible to Railway.\nConnecting the Git repository\nOnce the configuration file is set up, log in to Railway ([https://railway.app/login](https://railway.app/login)) with your account and you will be redirected to your dashboard ([https://railway.app/dashboard](https://railway.app/dashboard)).\nThen, click on the `FastAPI-Cookbook` repository ([https://github.com/PacktPublishing/FastAPI-Cookbook](https://github.com/PacktPublishing/FastAPI-Cookbook)), you can select it.\nThen select `profound-enchantment`.\nOnce finished, the *deployment* icon will appear on the project dashboard. By default, the deployment takes the name of the chosen GitHub repository. In my case, it’s `FastAPI-Cookbook`.\nConfiguring the deployment\nWhen you click on the *deployment* icon, you can see a warning indicating that the deployment has failed. To resolve this, we need to add some parameters.\nClick on the *deployment* icon, which will open a window on the left. Then, click on the **Settings** tab. This will display a list of configurations with sections such as **Source**, **Networking**, **Build**, and **Deploy**.\nBegin with the `FastAPI-Cookbook` repository or if your project’s root directory is not the repository root, click on **Add Root Directory** under the **Source** repository specification and enter the path.\nFor the `FastAPI-Cookbook` repository, the path will be `/Chapter12/live_application`. After adding the path, click on the *save* icon.\nLeave the branch selected as **main**.\nMoving on to the `fastapi-cookbook-production.up.railway.app`. You will have a slightly different domain.\nLeave the remaining settings as they are.\nAt the top left of the screen, you will see a text bar with the text **Apply 2 changes** with a **Deploy** button. Click on it to apply the modification we have done.\nAfter the deployment process is complete, your application will begin to handle live web traffic. The public address is defined in the **Networking** section of the **Settings** panel.\nOpen the address in a new browser tab, and check the response. You should see the implemented response:\n\n```", "```py\n\n In your web browser’s address bar, you can see a *lock* icon, which indicates that the connection is secure and has a certificate. Usually, when you expose your service to the web, the hosting platform provides you with certificates.\nYou have just deployed your FastAPI application to be accessible on the World Wide Web. Now, users from all over the world can access your service.\nThere’s more…\nTo deploy your service, Railway creates an image and then a container to run your service. You can specify a custom image with a Dockerfile and it will be automatically detected.\nSee also\nYou can discover more about Railway services on the official documentation website: \n\n*   *Railway* *Docs:* [https://docs.railway.app/](https://docs.railway.app/)\n\nYou can check the official FastAPI template used for Railway at this link: \n\n*   *FastAPI* *Example:* [https://github.com/railwayapp-templates/fastapi](https://github.com/railwayapp-templates/fastapi)\n\nFastAPI is one of the fastest-growing production applications, especially on the major public cloud service providers. That’s why you can find extensive documentation on how to use it:\nFor **Google Cloud Platform** (**GCP**), you can follow the article at the link: \n\n*   *Deploying FastAPI app with Google Cloud Run* article at the following link: [https://dev.to/0xnari/deploying-fastapi-app-with-google-cloud-run-13f3](https://dev.to/0xnari/deploying-fastapi-app-with-google-cloud-run-13f3)\n\nFor **Amazon Web Services** (**AWS**), check this Medium article:\n\n*   *Deploy FastAPI on AWS* *EC2*: [https://medium.com/@shreyash966977/deploy-fastapi-on-aws-ec2-quick-and-easy-steps-954d4a1e4742](https://medium.com/@shreyash966977/deploy-fastapi-on-aws-ec2-quick-and-easy-steps-954d4a1e4742)\n\nFor Microsoft Azure, you can check the official documentation page:\n\n*   *Using FastAPI Framework with Azure* *Functions*: [https://learn.microsoft.com/en-us/samples/azure-samples/fastapi-on-azure-functions/fastapi-on-azure-functions/](https://learn.microsoft.com/en-us/samples/azure-samples/fastapi-on-azure-functions/fastapi-on-azure-functions/)\n\nOn the FastAPI website, you can check other examples for other cloud providers at the following link:\n\n*   *Deploy FastAPI on Cloud* *Providers*: [https://fastapi.tiangolo.com/deployment/cloud/](https://fastapi.tiangolo.com/deployment/cloud/)\n\nA useful tool is the Porter platform, which allows you to deploy your applications on different cloud services such as AWS, GCP, and Azure from one centralized platform. Have a look at this link:\n\n*   *Deploy a FastAPI* *app:* [https://docs.porter.run/guides/fastapi/deploy-fastapi](https://docs.porter.run/guides/fastapi/deploy-fastapi)\n\nShipping FastAPI applications with Hatch\nPackaging and shipping a FastAPI application as a distributable package are essential for deploying and sharing your application efficiently.\n**Hatch** is a modern Python project management tool that simplifies the packaging, versioning, and distribution process. In this recipe, we’ll explore how to use Hatch to build and ship a package containing a FastAPI application. This will ensure that your application is portable, easy to install, and maintainable, making it easier to deploy and share with others.\nGetting ready\nHatch facilitates the use of multiple virtual environments for our project. It uses the `venv` package under the hood.\nTo run the recipe, you need to install Hatch on your local machine. The installation process may vary depending on your operating system. Detailed instructions can be found on the official documentation page: [https://hatch.pypa.io/1.9/install/](https://hatch.pypa.io/1.9/install/).\nOnce the installation is complete, verify that it has been correctly installed by running the following from the command-line terminal:\n\n```", "```py\n\n You should have the version printed on the output like this:\n\n```", "```py\n\n Make sure that you installed a version higher than `1.11.1`. We can then start creating our package.\nHow to do it…\nWe divide the process of shipping our FastAPI package into five steps:\n\n1.  Initialize the project.\n2.  Install dependencies.\n3.  Create the app.\n4.  Build the distribution.\n5.  Test the package.\n\nLet’s start building our package.\nInitializing the project\nWe start by creating our project by bootstrapping the structure. Let’s call our application `FCA`, which stands for **FastAPI Cookbook Application**. Let’s bootstrap our project by running the following command:\n\n```", "```py\n\n The command will create a project bootstrap under the `fca-server` folder as follows:\n\n```", "```py\n\n We can then directly use a virtual environment by entering the `fca-server` directory and running the following:\n\n```", "```py\n\n The command will automatically create a default virtual environment and activate it. You will see your command-line terminal with a prepend value, `(fca-server)`, like so:\n\n```", "```py\n\n Verify that the environment is correctly activated by checking the Python executable. You do it by running the following:\n\n```", "```py\n\n The executable should come from the virtual environment called `fca-server`, which will present a path such as `<virtual` `environment locations>\\fca-server\\Scripts\\python`.\nThis will give you information on the virtual environment that you can also provide to your **integrated development environment** (**IDE**) to work with the code.\nYou can exit from the shell by typing `exit` in the terminal. Also, you can run commands in the virtual environment without spawning the shell. For example, you can check the Python executable of the default environment by running the following:\n\n```", "```py\n\n We can now proceed to install the package dependencies in our environment.\nInstalling dependencies\nNow that you have created a virtual environment, let’s add the `fastapi` dependency to our project. We can do it by modifying the `pyproject.toml` file. Add it in the `dependencies` field under the `[project]` section like so:\n\n```", "```py\n\n Next time you spawn a shell, the dependencies will synchronized and the `fastapi` package will be installed.\nLet’s see, for example, whether the `fastapi` command works by running the following:\n\n```", "```py\n\n If you see the help documentation of the command, the dependency has been added correctly.\nCreating the app\nNow that we have the environment with the `fastapi` package installed, we can develop our application.\nLet’s create the `main.py` module under the `src/fca_server` folder and initialize the `APIRouter` object with one endpoint like this:\n\n```", "```py\n\n Then, let’s import the router into the `src/fca_server.__init__.py` file as follows:\n\n```", "```py\n\n This will allow us to directly import the router from the `fca_server` package from an external project.\nBuilding the distribution\nNow that we have finalized the package, let’s leverage Hatch to build the package distribution.\nWe will generate the package in the form of a `.tar.gz` file by running the following:\n\n```", "```py\n\n It will generate the `fca_server-0.0.1.tar.gz` file placed outside of the project in a `dist` folder. We will then use the file in an external project.\nTesting the package\nNext, we will make a different project that uses the `fca_server` package we made.\nCreate an `import-fca-server` folder outside of the `fca-server` folder for the package and use it as the project root folder.\nIn the folder, make a local virtual environment with `venv` by running the following:\n\n```", "```py\n\n Activate the environment. On Linux or macOS, type the following:\n\n```", "```py\n\n On Windows, type this instead:\n\n```", "```py\n\n Install the `fca_server` package with `pip`:\n\n```", "```py\n\n Use the path where the `fca_server-0.0.1.tar.gz` file is.\nNow, try to import the package.\nMake a `main.py` file and import the router from the `fca_server` package:\n\n```", "```py\n\n Run the server from the command line:\n\n```", "```py\n\n Go to the interactive documentation at `http://localhost:8000/docs` and see the endpoint in the external package. You have just created a custom package and imported it into another project.\nYou have learned how to use Hatch to create and manage your Python projects with ease. This is a powerful tool that can save you time and effort and help you write better code. Now, you can experiment with different options and features of Hatch and see what else you can do with it.\nThere’s more…\nHatch is a versatile packaging system for Python that allows you to create scripts and multiple environments for your projects.\nWith Hatch, you can also customize the location of the virtual environment files, such as whether you want them to be centralized or in the project folder. You can specify this option in the `config.toml` file, which contains the configuration settings for Hatch.\nTo find the location of the `config.toml` file, you can run the following command in your terminal:\n\n```", "```py\n\n Hatch also lets you create the build of your package in a wheel format, which is a binary distribution format that is more efficient and compatible than the traditional source distribution.\nMoreover, you can publish your package directly to the **Python Package Index** (**PyPI**), where other users can find and install it. Hatch makes it easy to share your code with the world.\nSee also\nYou can find more information about Hatch in the official documentation at \n\n*   *Hatch*: [https://hatch.pypa.io/latest/](https://hatch.pypa.io/latest/)\n\nWe learned how to create a project bootstrap, but with Hatch, you can also initialize an existing project. Check out the documentation page: \n\n*   *Existing project:* https://hatch.pypa.io/1.9/intro/#existing-project \n\nOne of the greatest advantages of using Hatch is the flexibility of running the project for several virtual environments. Check more on the documentation page: \n\n*   *Environments:* [https://hatch.pypa.io/1.9/environment/](https://hatch.pypa.io/1.9/environment/)\n\nThe `pyproject.toml` file is a configuration file for Python projects, introduced in `PEP 518` ([https://peps.python.org/pep-0518/](https://peps.python.org/pep-0518/)). It aims to standardize and simplify the configuration of Python projects by providing a single place to specify build system requirements and other project metadata. It is used by other build tools. You can have a look at the Python Package User Guide page at the following link: \n\n*   *Writing your* *pyproject.toml:* [https://packaging.python.org/en/latest/guides/writing-pyproject-toml/](https://packaging.python.org/en/latest/guides/writing-pyproject-toml/)\n\nYou can see more on how to manage Python dependencies on this page: \n\n*   *Dependency* *configuration:* [https://hatch.pypa.io/dev/config/dependency/](https://hatch.pypa.io/dev/config/dependency/)\n\n```"]