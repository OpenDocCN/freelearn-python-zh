["```py\npip install virtualenv\n\n```", "```py\nmkdir django_notes && cd django_notes\n\n```", "```py\nvirtualenv .\n\n```", "```py\nsource ./bin/activate\n\n```", "```py\nScripts\\activate\n\n```", "```py\ndeactivate\n\n```", "```py\n/path/to/appengine/sdk # /usr/local/google_appengine on Mac OS X\nimport dev_appserver; dev_appserver.fix_sys_path()\n```", "```py\nsource bin/activate\npython -c\"import google\"\n\n```", "```py\npip install django -t <app_root>\n\n```", "```py\n/path/to/appengine/sdk # /usr/local/google_appengine on Mac OS X\nimport dev_appserver; dev_appserver.fix_sys_path()\nimport sys; sys.path.insert(1, '/path/to/application/root')\n```", "```py\npython -c\"import django; print django.get_version()\"\n\n```", "```py\ndjango/bin/django-admin.py startproject notes\n\n```", "```py\napplication: the_registered_application_ID\nversion: 2\nruntime: python27\napi_version: 1\nthreadsafe: yes\n\nhandlers:\n- url: /static\n  static_dir: static\n\n- url: /.*\n  script: notes.wsgi.application\n```", "```py\npip install MySQL-python\n\n```", "```py\nlibraries:\n- name: MySQLdb\n  version: \"latest\"\n```", "```py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),\n    }\n}\n```", "```py\nimport os\n\ndef on_appengine():\n    return os.getenv('SERVER_SOFTWARE', '').startswith('Google App Engine')\n```", "```py\n# Database\n# https://docs.djangoproject.com/en/1.7/ref/settings/#databases\n\nfrom .utils import on_appengine\n\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'NAME': 'notes',\n        'USER': 'notes',\n        'PASSWORD': 'notes_password',\n    }\n}\nif on_appengine():\n    DATABASES['default']['HOST'] = '/cloudsql/my-project-id:myfirst'\nelse:\n    DATABASES['default']['HOST'] = '<instance_ip>'\n```", "```py\npython manage.py <command>\n```", "```py\npython manage.py\n```", "```py\npython manage.py migrate\n\n```", "```py\nOperations to perform:\n Apply all migrations: admin, contenttypes, auth, sessions\nRunning migrations:\n Applying contenttypes.0001_initial... OK\n Applying auth.0001_initial... OK\n Applying admin.0001_initial... OK\n Applying sessions.0001_initial... OK\n\n```", "```py\npython manage.py createsuperuser\n\n```", "```py\npython manage.py startapp core\n\n```", "```py\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    'core',\n)\n```", "```py\npython manage.py shell\n\n```", "```py\n>>> from django.apps import apps\n>>> apps.get_app_config('core').verbose_name\n'Core'\n>>> apps.get_app_config('core').path\nu'/opt/projects/django_notes/notes/core'\n\n```", "```py\nfrom django.shortcuts import render\nfrom django import get_version\n\ndef home(request):\n    context = {'django_version': get_version()}\n    return render(request, 'core/main.html', context)\n```", "```py\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title>Notes</title>\n\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/notes.css\">\n</head>\n<body>\n  <div class=\"container\">\n\n    <h1>Welcome to Notes!</h1>\n    <h5>Built with Django {{ django_version }}.</h5>\n\n    <ul class=\"menu\">\n      <li>Hello, <b>{{ user }}</b></li>\n    </ul>\n\n    <form action=\"\" method=\"post\" enctype=\"multipart/form-data\">\n      <legend>Add a new note</legend>\n      <div class=\"form-group\">\n        <label>Title: <input type=\"text\" id=\"title\" name=\"title\"/>\n        </label>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"content\">Content:</label>\n        <textarea id=\"content\" name=\"content\"></textarea>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"checklist_items\">Checklist items:</label>\n        <input type=\"text\" id=\"checklist_items\" name=\"checklist_items\"\n               placeholder=\"comma,separated,values\"/>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"uploaded_file\">Attached file:</label>\n        <input type=\"file\" id=\"uploaded_file\" name=\"uploaded_file\">\n      </div>\n      <div class=\"form-group\">\n        <button type=\"submit\">Save note</button>\n      </div>\n    </form>\n  </div>\n\n</body>\n</html>\n```", "```py\nfrom django.conf.urls import patterns, include, url\n\nurlpatterns = patterns('',\n    url(r'^$', 'core.views.home', name='home'),\n)\n```", "```py\nINSTALLED_APPS = (\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n\n    'core',\n)\n```", "```py\nfrom django.contrib.auth import views as auth_views\n\nurlpatterns = patterns('',\n    url(r'^$', 'notes.views.home', name='home'),\n    url(r'^accounts/login/$', auth_views.login),\n    url(r'^accounts/logout/$', auth_views.logout),\n)\n```", "```py\n<!DOCTYPE html>\n<html>\n<head lang=\"en\">\n  <meta charset=\"UTF-8\">\n  <title>Notes</title>\n\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/static/css/notes.css\">\n</head>\n<body>\n  <div class=\"container\">\n    <form action=\"{% url 'django.contrib.auth.views.login' %}\" method=\"post\">\n      {% csrf_token %}\n      <legend>You must login to use Notes</legend>\n      <div class=\"form-group\">\n        <label for=\"username\">Username:</label>\n        <input type=\"text\" id=\"username\" name=\"username\"/>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"password\">Password:</label>\n        <input type=\"password\" id=\"password\" name=\"password\"/>\n      </div>\n      <div class=\"form-group\">\n        <button type=\"submit\">Login</button>\n      </div>\n      <input type=\"hidden\" name=\"next\" value=\"{{ next }}\" />\n    </form>\n  </div>\n</body>\n</html>\n```", "```py\nfrom django.contrib.auth.decorators import login_required\n\n@login_required()\ndef home(request):\n    context = {'django_version': get_version()}\n    return render(request, 'core/main.html', context)\n```", "```py\n<ul class=\"menu\">\n  <li>Hello, <b>{{ user }}</b></li>\n  <li>\n    <a href=\"{% url 'django.contrib.auth.views.logout' %}\">Logout</a>\n  </li>\n</ul>\n```", "```py\nfrom django.db import models\nfrom django.contrib.auth.models import User\n\nclass Note(models.Model):\n    title = models.CharField(max_length=10)\n    content = models.TextField(blank=False)\n    date_created = models.DateTimeField(auto_now_add=True)\n    owner = models.ForeignKey(User)\n\nclass CheckListItem(models.Model):\n    title = models.CharField(max_length=100)\n    checked = models.BooleanField(default=False)\n    note = models.ForeignKey('Note', related_name='checklist_items')\n```", "```py\npython manage.py makemigrations core\n\n```", "```py\nMigrations for 'core':\n 0001_initial.py:\n - Create model CheckListItem\n - Create model Note\n - Add field note to checklistitem\n\n```", "```py\npython manage.py migrate core\n\n```", "```py\nOperations to perform:\n Apply all migrations: core\nRunning migrations:\n Applying core.0001_initial... OK\n\n```", "```py\npython manage.py sqlmigrate core 0001_initial\n\n```", "```py\nclass Note(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField(blank=False)\n    date_created = models.DateTimeField(auto_now_add=True)\n```", "```py\npython manage.py makemigrations core\n\n```", "```py\nMigrations for 'core':\n 0002_auto_20141101_1128.py:\n - Alter field title on note\n\n```", "```py\npython manage.py migrate core\n\n```", "```py\nfrom django import forms\nfrom .models import Note\n\nclass NoteForm(forms.ModelForm):\n    class Meta:\n        model = Note\n        exclude = ['id', 'date_created', 'owner']\n```", "```py\nfrom django.http import HttpResponseRedirect\nfrom django.core.urlresolvers import reverse\nfrom .forms import NoteForm\n\n@login_required()\ndef home(request):\n    user = request.user\n    if request.method == \"POST\":\n        f = NoteForm(request.POST)\n        if f.is_valid():\n            note = f.save(commit=False)\n            note.owner = user\n            note.save()\n            return HttpResponseRedirect(reverse('home'))\n\n    else:\n        f = NoteForm()\n\n    context = {\n        'django_version': get_version(),\n        'form': f,\n        'notes': Note.objects.filter(owner=user).order_by('-id'),\n    }\n    return render(request, 'core/main.html', context)\n```", "```py\n<form method=\"post\" action=\"\" enctype=\"multipart/form-data\">\n  <legend>Add a new note</legend>\n\n  {# Show visible fields #}\n  {% for field in form.visible_fields %}\n  <div class=\"form-group\">\n    {{ field.errors }}\n    {{ field.label_tag }}\n    {{ field }}\n  </div>\n  {% endfor %}\n\n  {# Include hidden fields #}\n  {% for hidden in form.hidden_fields %}\n  {{ hidden }}\n  {% endfor %}\n\n  {% csrf_token %}\n  <div class=\"form-group\">\n    <button type=\"submit\">Save note</button>\n  </div>\n</form>\n```", "```py\n{% for note in notes %}\n<div class=\"note\">\n  <h4>{{ note.title }}</h4>\n  <p class=\"note-content\">{{ note.content }}</p>\n  {% if note.checklist_items %}\n  <ul>\n    {% for item in note.checklist_items.all %}\n    <li class=\"{%if item.checked%}checked{%endif%}\">\n      <a href=\"#\">{{item.title}}</a>\n    </li>\n    {% endfor %}\n  </ul>\n  {% endif %}\n</div>\n{% endfor %}\n```", "```py\nclass NoteForm(forms.ModelForm):\n    cl_items = forms.CharField(required=False,\n        label=\"Checklist Items\",\n        widget=forms.TextInput(attrs={\n            'placeholder': 'comma,separated,values'\n        }))\n\n    class Meta:\n        model = Note\n        exclude = ['id', 'date_created', 'owner']\n```", "```py\n@login_required()\ndef home(request):\n    user = request.user\n    if request.method == \"POST\":\n        f = NoteForm(request.POST)\n        if f.is_valid():\n            note = f.save(commit=False)\n            note.owner = user\n            note.save()\n            for item in f.cleaned_data['cl_items'].split(','):\n                CheckListItem.objects.create(title=item,\n                                             note=note)\n            return HttpResponseRedirect(reverse('home'))\n```", "```py\nclass GoogleCloudStorage(Storage):\n    def __init__(self):\n        try:\n            cloudstorage.validate_bucket_name(\n                settings.BUCKET_NAME)\n        except ValueError:\n            raise ImproperlyConfigured(\n                \"Please specify a valid value for BUCKET_NAME\")\n        self._bucket = '/' + settings.BUCKET_NAME\n```", "```py\n    def _open(self, name, mode='rb'):\n        return cloudstorage.open(self.path(name), 'r')\n\n    def _save(self, name, content):\n        realname = self.path(name)\n        content_t = mimetypes.guess_type(realname)[0]\n        with cloudstorage.open(realname, 'w',\n                               content_type=content_t,\n                               options={\n                                   'x-goog-acl': 'public-read'\n                               }) as f:\n            f.write(content.read())\n        return os.path.join(self._bucket, realname)\n\n    def delete(self, name):\n        try:\n            cloudstorage.delete(self.path(name))\n        except cloudstorage.NotFoundError:\n            pass\n\n    def exists(self, name):\n        try:\n            cloudstorage.stat(self.path(name))\n            return True\n        except cloudstorage.NotFoundError:\n            return False\n\n    def listdir(self, name):\n        return [], [obj.filename for obj in\n                    cloudstorage.listbucket(self.path(name))]\n\n    def size(self, name):\n        filestat = cloudstorage.stat(self.path(name))\n        return filestat.st_size\n\n    def url(self, name):\n        key = blobstore.create_gs_key('/gs' + name)\n        return images.get_serving_url(key)\n```", "```py\n    def path(self, name):\n        if not name:\n            raise SuspiciousOperation(\n                \"Attempted access to '%s' denied.\" % name)\n        return os.path.join(self._bucket, os.path.normpath(name))\n\n    def created_time(self, name):\n        filestat = cloudstorage.stat(self.path(name))\n        creation_date = timezone.datetime.fromtimestamp(\n            filestat.st_ctime)\n        return timezone.make_aware(creation_date,\n            timezone.get_current_timezone())\n```", "```py\nDEFAULT_FILE_STORAGE = 'core.storage.GoogleCloudStorage'\nBUCKET_NAME = '<your_bucket_name>'\n```", "```py\nclass Note(models.Model):\n    title = models.CharField(max_length=100)\n    content = models.TextField(blank=False)\n    date_created = models.DateTimeField(auto_now_add=True)\n    owner = models.ForeignKey(User)\n    attach = models.FileField(blank=True, null=True)\n    thumbnail_url = models.CharField(max_length=255, blank=True, null=True)\n```", "```py\n    class Meta:\n        model = Note\n        exclude = ['id', 'date_created', 'owner', 'thumbnail_url']\n```", "```py\nfrom .storage import GoogleCloudStorage\nfrom google.appengine.api import images\nfrom google.appengine.ext import blobstore\n\n@login_required()\ndef home(request):\n    user = request.user\n    if request.method == \"POST\":\n        f = NoteForm(request.POST, request.FILES)\n        if f.is_valid():\n            note = f.save(commit=False)\n            note.owner = user\n            if f.cleaned_data['attach']:\n                try:\n                    s = GoogleCloudStorage()\n                    path = '/gs' + s.path(f.cleaned_data['attach'].name)\n                    key = blobstore.create_gs_key(path)\n                    note.thumbnail_url = images.get_serving_url(key, size=150, crop=True)\n                except images.TransformationError, images.NotImageError:\n                    pass\n            note.save()\n            for item in f.cleaned_data['cl_items'].split(','):\n                CheckListItem.objects.create(title=item, note=note)\n            return HttpResponseRedirect(reverse('home'))\n```", "```py\n<h4>{{ note.title }}</h4>\n<p class=\"note-content\">{{ note.content }}</p>\n{% if note.attach %}\n<ul>\n  {% if note.thumbnail_url %}\n  <li class=\"file\">\n    <a href=\"{{ note.attach.url }}\">\n      <img src=\"img/{{ note.thumbnail_url }}\">\n    </a>\n  </li>\n  {% else %}\n  <li class=\"file\">\n    <a href=\"{{ note.attach.url }}\">{{ note.attach.name }}</a>\n  </li>\n  {% endif %}\n</ul>\n{% endif %}\n```"]