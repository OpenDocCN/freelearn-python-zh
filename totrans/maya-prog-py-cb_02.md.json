["```py\nimport maya.cmds as cmds\n\ndef showUI():\n    myWin = cmds.window(title=\"Simple Window\", widthHeight=(300, 200))\n    cmds.columnLayout()\n    cmds.text(label=\"Hello, Maya!\")\n\n    cmds.showWindow(myWin)\n\nshowUI()\n```", "```py\nmyWin = cmds.window(title=\"Simple Window\", widthHeight=(300, 200))\n```", "```py\ncmds.columnLayout()\n```", "```py\ncmds.text(label=\"Hello, Maya!\")\n```", "```py\ncmds.showWindow(myWin)\n```", "```py\n    if (cmds.window(\"ahExampleWindow\", exists=True)):\n        cmds.deleteUI(\"ahExampleWindow\")\n```", "```py\nmyWin = cmds.window(\"ahExampleWindow\", title=\"Simple Window\", widthHeight=(300, 200))\n```", "```py\nimport maya.cmds as cmds\ndef buttonFunction(args):\n    cmds.polyCube()\n\ndef showUI():\n    myWin = cmds.window(title=\"Button Example\", widthHeight=(200, 200))\n    cmds.columnLayout()\n    cmds.button(label=\"Make Cube\", command=buttonFunction)\n    cmds.showWindow(myWin)\nshowUI()\n```", "```py\ndef buttonFunction(*args):\n    cmds.polyCube()\n```", "```py\ndef buttonFunction():\n    cmds.polyCube()\n```", "```py\n# Error: buttonFunction() takes no arguments (1 given)\n```", "```py\ndef showUI():\n    myWin = cmds.window(title=\"Button Example\", widthHeight=(200, 200))\n    cmds.columnLayout()\n```", "```py\n    cmds.button(label=\"Make Cube\", command=buttonFunction)\n```", "```py\n    cmds.button(label=\"Make Cube\", command=buttonFunction())    # (usually) a bad idea\n```", "```py\n    cmds.showWindow(myWin)\n```", "```py\nmyButton = cmds.button(label=\"Not Yet\", enable=False)\n```", "```py\ncmds.button(myButton, edit=True, enable=True)\n```", "```py\nimport maya.cmds as cmds\n\nglobal sphereCountField\nglobal sphereRadiusField\n\ndef showUI():\n    global sphereCountField\n    global sphereRadiusField\n\n    myWin = cmds.window(title=\"Make Spheres\", widthHeight=(300, 200))\n    cmds.columnLayout()\n    sphereCountField = cmds.intField(minValue=1)\n    sphereRadiusField = cmds.floatField(minValue=0.5)\n    cmds.button(label=\"Make Spheres\", command=makeSpheres)\n    cmds.showWindow(myWin)\n\ndef makeSpheres(*args):\n    global sphereCountField\n    global sphereRadiusField\n\n    numSpheres = cmds.intField(sphereCountField, query=True, value=True)\n    myRadius = cmds.floatField(sphereRadiusField, query=True, value=True)\n\n    for i in range(numSpheres):\n        cmds.polySphere(radius=myRadius)\n        cmds.move((i * myRadius * 2.2), 0, 0)\n\nshowUI()\n```", "```py\nimport maya.cmds as cmds\n\nsphereCountField\nsphereRadiusField\n```", "```py\ndef showUI():\n    global sphereCountField\n    global sphereRadiusField\n```", "```py\n    myWin = cmds.window(title=\"Make Spheres\", widthHeight=(300, 200))\n    cmds.columnLayout()\n```", "```py\n    sphereCountField = cmds.intField(minValue=1)\n```", "```py\nsphereRadiusField = cmds.floatField(minValue=0.5)\n```", "```py\ndef makeSpheres(*args):\n    global sphereCountField\n    global sphereRadiusField\n```", "```py\nnumSpheres = cmds.intField(sphereCountField, query=True, value=True)\nmyRadius = cmds.floatField(sphereRadiusField, query=True, value=True)\n```", "```py\nglobal numSpheres = cmds.intField(sphereCountField, query=True, value=True)\n```", "```py\n    for i in range(numSpheres):\n        cmds.polySphere(radius=myRadius)\n        cmds.move((i * myRadius * 2.2), 0, 0)\n```", "```py\nimport maya.cmds as cmds\n\nclass SpheresClass:\n\n    def __init__(self):\n        self.win = cmds.window(title=\"Make Spheres\", widthHeight=(300,200))\n        cmds.columnLayout()\n        self.numSpheres = cmds.intField(minValue=1)\n        cmds.button(label=\"Make Spheres\", command=self.makeSpheres)\n        cmds.showWindow(self.win)\n\n    def makeSpheres(self, *args):\n        number = cmds.intField(self.numSpheres, query=True, value=True)\n        for i in range(0,number):\n            cmds.polySphere()\n            cmds.move(i*2.2, 0, 0)\n\nSpheresClass()\n```", "```py\nclass SpheresClass:\n```", "```py\nmyResult = myFunction()   # run a function and store the result in myResult\nmyInstance = MyClass()\t#   create a new instance of the MyClass class and name it\n# myInstance\n```", "```py\n        self.numSpheres = cmds.intField(minValue=1)\n```", "```py\ncmds.button(label=\"Make Spheres\", command=self.makeSpheres)\n```", "```py\n    def makeSpheres(self, *args):\n```", "```py\nnumber = cmds.intField(self.numSpheres, query=True, value=True)\nfor i in range(0,number):\n    cmds.polySphere()\n    cmds.move(i*2.2, 0, 0)\n```", "```py\nSpheresClass()\n```", "```py\nimport maya.cmds as cmds\n\nclass NestedLayouts:\n\n    def __init__(self):\n        self.win = cmds.window(title=\"Nested Layouts\", widthHeight=(300,200))\n        cmds.columnLayout()\n\n        cmds.rowLayout(numberOfColumns=2)\n        cmds.text(label=\"Input One:\")\n        self.inputOne = cmds.intField()\n        cmds.setParent(\"..\")\n\n        cmds.rowLayout(numberOfColumns=2)\n        cmds.text(label=\"Input Two:\")\n        self.inputTwo = cmds.intField()\n        cmds.setParent(\"..\")\n\n        cmds.showWindow(self.win)\n\nNestedLayouts()\n```", "```py\n    cmds.columnLayout()\n\n    cmds.rowLayout(numberOfColumns=2)\n```", "```py\n        cmds.text(label=\"Input One:\")\n        self.inputOne = cmds.intField()\n```", "```py\n# Error: RuntimeError: file /nestedLayouts.py line 13: Too many children in layout: rowLayout21\n```", "```py\n        cmds.setParent(\"..\")\n```", "```py\ncmds.setParent(\"..\") # move one level up the UI hierarchy\n\ncmds.rowLayout(numberOfColumns=2)  # add a second rowLayout\ncmds.text(label=\"Input Two:\")      # add a text control to the row\nself.inputTwo = cmds.intField()    # add an intField to the row\n```", "```py\n    def addLabeledIntField(self, labelText):\n        cmds.rowLayout(numberOfColumns=2)\n        cmds.text(label=labelText)\n        newField = cmds.intField()\n        cmds.setParent(\"..\")\n        return newField\n```", "```py\n    def __init__(self):\n        self.win = cmds.window(title=\"Nested Layouts\", widthHeight=(300,200))\n        cmds.columnLayout()\n\n        self.inputThree = self.addLabeledIntField(\"Input Three\")\n        self.inputFour = self.addLabeledIntField(\"Input Four\")\n\n        cmds.showWindow(self.win)\n```", "```py\nimport maya.cmds as cmds\n\nclass TabExample:\n\n    def __init__(self):\n        self.win = cmds.window(title=\"Tabbed Layout\", widthHeight=(300, 300))\n\n        self.tabs = cmds.tabLayout()\n\n        # add first tab\n        firstTab = cmds.columnLayout()\n        cmds.tabLayout(self.tabs, edit=True, tabLabel=[firstTab, 'Simple Tab'])\n        cmds.button(label=\"Button\")\n        cmds.setParent(\"..\")\n\n        # add second tab, and setup scrolling\n        newLayout = cmds.scrollLayout()\n        cmds.tabLayout(self.tabs, edit=True, tabLabel=[newLayout, 'Scrolling Tab'])\n        cmds.columnLayout()\n\n        for i in range(20):\n            cmds.button(label=\"Button \" + str(i+1))\n\n        cmds.setParent(\"..\")\n        cmds.setParent(\"..\")\n\n        cmds.showWindow(self.win)\n\nTabExample()\n```", "```py\nself.tabs = cmds.tabLayout()\n```", "```py\nfirstTab = cmds.columnLayout()\n```", "```py\ncmds.tabLayout(self.tabs, edit=True, tabLabel=[firstTab, 'Simple Tab'])\n```", "```py\ncmds.button(label=\"Button\")\n```", "```py\ncmds.setParent(\"..\")\n```", "```py\nnewLayout = cmds.scrollLayout()\n```", "```py\ncmds.tabLayout(self.tabs, edit=True, tabLabel=[newLayout, 'Scrolling Tab'])\n```", "```py\n    cmds.columnLayout()\n\n    for i in range(20):\n        cmds.button(label=\"Button \" + str(i+1))\n```", "```py\n    cmds.setParent(\"..\")\n    cmds.setParent(\"..\")\n```", "```py\ncurrTab = cmds.tabLayout(self.tabs, query=True, selectTabIndex=True)\n```", "```py\ncmds.tabLayout(self.tabs, edit=True, selectTabIndex=2)\n```", "```py\nimport maya.cmds as cmds\n\nclass CustomMenu:\n\n    def __init__(self):\n        self.win = cmds.window(title=\"Menu Example\", menuBar=True, widthHeight=(300,200))\n\n        fileMenu = cmds.menu(label=\"File\")\n        loadOption = cmds.menuItem(label=\"Load\")\n        saveOption = cmds.menuItem(label=\"Save\")\n        cmds.setParent(\"..\")\n\n        objectsMenu = cmds.menu(label=\"Objects\")\n        sphereOption = cmds.menuItem(label=\"Make Sphere\")\n        cubeOption = cmds.menuItem(label=\"Make Cube\")\n        cmds.setParent(\"..\")\n\n        cmds.columnLayout()\n        cmds.text(label=\"Put the rest of your interface here\")\n\n        cmds.showWindow(self.win)\n\nCustomMenu()\n```", "```py\n    def __init__(self):\n\n        # set up the window and add any additional menu items\n        # before the Objects menu \n\n        objectsMenu = cmds.menu(label=\"Objects\")\n        sphereOption = cmds.menuItem(label=\"Make Sphere\", command=self.makeSphere)\n        cubeOption = cmds.menuItem(label=\"Make Cube\", command=self.makeCube)\n        cmds.setParent(\"..\")\n\n        # continue with the rest of the interface, and end with\n        # cmds.showWindow()\n\n    def makeSphere(self, *args):\n        cmds.polySphere()\n\n    def makeCube(self, *args):\n        cmds.polyCube()\n```", "```py\n        self.menu = cmds.menu(label=\"Objects\")\n        sphereCommandMI = cmds.menuItem(label=\"Make a Sphere\", command=self.myCommand)\n        sphereCommandMIOption = cmds.menuItem(optionBox=True, command=self.myCommandOptions)\n```", "```py\npromptInput = cmds.promptDialog(title=\"Sphere Radius\",   message='Specify Radius:', button=['OK', 'CANCEL'], defaultButton='OK', cancelButton='CANCEL', dismissString='CANCEL')\n```", "```py\nif (promptInput == 'OK'):\n```", "```py\n        if (promptInput == 'OK'):\n            radiusInput = cmds.promptDialog(query=True, text=True)\n            self.makeSphere(radiusInput)\n```", "```py\n    def myCommand(self, *args):\n        self.makeSphere(1)\n\n    def myCommandOptions(self, *args):\n        promptInput = cmds.promptDialog(title=\"Sphere Radius\", message='Specify Radius:', button=['OK', 'CANCEL'], defaultButton='OK', cancelButton='CANCEL', dismissString='CANCEL')\n\n        if (promptInput == 'OK'):\n            radiusInput = cmds.promptDialog(query=True, text=True)\n            self.makeSphere(radiusInput)\n\n    def makeSphere(self, sphereRadius):\n        cmds.polySphere(radius=sphereRadius)\n```"]