["```py\n    $ curl --request PUT --data \"0,10\" --header \"X-ApiKey: <Your_API_key\" https://api.xively.com/v2/feeds/<Your_Feed_ID>.csv\n\n    ```", "```py\n    #define APIKEY        \"<Your-API-key>\"\n    #define FEEDID         <Your-feed-ID>\n    #define USERAGENT      \"<Your-project-name>\"\n    ```", "```py\n    byte mac[] = {0x90, 0xA2, 0xDA, 0x0D, 0x3F, 0x62};\n    IPAddress ip(10,0,0,75);\n    ```", "```py\n    //IPAddress server(216,52,233,122);\n    char server[] = \"api.xively.com\";\n    ```", "```py\n    // here's the actual content of the PUT request:\n    client.print(\"HumidityRaw,\");\n    client.println(thisData);\n    ```", "```py\n    char xivelyKey[] = \"<Your-API-key>\";\n    char ledId[] = \"LED\";\n    ```", "```py\n    XivelyDatastream datastreams[] = {\n      XivelyDatastream(ledId, strlen(ledId), DATASTREAM_FLOAT),\n    };\n    ```", "```py\n    XivelyFeed feed(<Your-feed-ID>, datastreams, 1);\n    ```", "```py\n    Serial.print(\"LED value is: \");\n    Serial.println(feed[0].getFloat());\n\n    if (feed[0].getFloat() >= 1){\n       digitalWrite(ledPin, HIGH);\n    }\n       else{\n       digitalWrite(ledPin, LOW);\n    }\n    ```", "```py\nchar ledId[] = \"LED\";\nchar humidityId[] = \"HumidityRaw\";\nchar pirId[] = \"MotionRaw\";\n\nint ledPin = 2;\nint pirPin = 3;\n\nXivelyDatastream datastreamU[] = {\n  XivelyDatastream(humidityId, strlen(humidityId), DATASTREAM_FLOAT),\n  XivelyDatastream(pirId, strlen(pirId), DATASTREAM_FLOAT),\n};\n\nXivelyDatastream datastreamD[] = {\n  XivelyDatastream(ledId, strlen(ledId), DATASTREAM_FLOAT),\n};\n\nXivelyFeed feedU(<Your-feed-ID>, datastreamU, 2);\nXivelyFeed feedD(<Your-feed-ID>, datastreamD, 1);\n```", "```py\nint retD = xivelyclient.get(feedD, xivelyKey);\nSerial.print(\"xivelyclient.get returned \");\n```", "```py\nint humidityValue = analogRead(A0);\ndatastreamU[0].setFloat(humidityValue);\nint pirValue = digitalRead(pirPin);\ndatastreamU[1].setFloat(pirValue);\n\nint retU = xivelyclient.put(feedU, xivelyKey);\nSerial.print(\"xivelyclient.put returned \");\n```", "```py\n$ sudo pip install xively-python\n\n```", "```py\nFEED_ID = \"<Your-feed-ID>\"\nAPI_KEY = \"<Your-API-key>\"\n```", "```py\napi = xively.XivelyAPIClient(API_KEY)\nfeed = api.feeds.get(FEED_ID)\n```", "```py\ntry:\n  datastream = feed.datastreams.get(\"Random\")\nexcept HTTPError as e:\n  print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n  datastream = feed.datastreams.create(\"Random\", tags=\"python\")\n  print \"Creating 'Random' datastream\"\n```", "```py\ndatastream.current_value = randomValue\ndatastream.at = datetime.datetime.utcnow()\ndatastream.update()\n```", "```py\n$ python uploadBasicXively.py\n\n```", "```py\nsubmit_form = form.Form(\n        form.Textbox('Channel', description = 'Channel'),\n        form.Textbox('Value', description = 'Value'),\n        form.Button('submit', type=\"submit\", description='submit')\n        )\n```", "```py\ntry:\n  datastream = feed.datastreams.get(\"Random\")\nexcept HTTPError as e:\n  print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n  print \"Requested channel doesn't exist\"\n```", "```py\nlatestValue = datastream.current_value\n```", "```py\n$ chmod 400 test.pem\n\n```", "```py\n$ ssh –i <key-name>.pem ubuntu@<public-IP>\n\n```", "```py\n$ sudo apt-get update\n$ sudo apt-get upgrade\n\n```", "```py\n$ sudo apt-get install python-setuptools\n\n```", "```py\n$ sudo apt-get install mosquitto*\n\n```", "```py\n$ sudo easy_install pip\n$ sudo pip install paho_mqtt\n\n```", "```py\n$ sudo pip install web.py\n\n```", "```py\n$ mosquitto_pub -h <Public-IP> -t test -m 3\n\n```", "```py\n$ mosquitto_sub -h <Public-IP> -t test\n\n```", "```py\n    $ cd /etc/mosquitto\n    $ sudo nano passwd\n\n    ```", "```py\n    user:password\n    ```", "```py\n    $ sudo nano mosquitto.conf\n\n    ```", "```py\n    password_file /etc/mosquitto/passwd\n    ```", "```py\n    $ sudo service mosquitto restart\n\n    ```", "```py\n    $ mosquitto_pub -u user -P password -h <Public-Ip> -t test -m 3\n\n    ```", "```py\n    $ mosquitto_sub -u user -P password -h <Public-Ip> -t test\n\n    ```", "```py\n$ ssh –i <key-name>.pem ubuntu@<public-ip>\n$ cd ~\n\n```", "```py\n$ mkdir project\n\n```", "```py\n$ scp -v -i test.pem -r <project-folder-path> ubuntu@<your-ec2-static-ip>:~/project\n\n```", "```py\n$ cd project\n\n```"]