- en: '12'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '12'
- en: Azure Cloud Networking
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure云网络
- en: As we saw in *Chapter 11*, *AWS Cloud Networking*, cloud-based networking helps
    us connect our organization’s cloud-based resources. A **virtual** **network**
    (**VNet**) can be used to segment and secure our virtual machines. It can also
    connect our on-premise resources to the cloud. As the first pioneer in this space,
    AWS is often regarded as the market leader, with the biggest market share. In
    this chapter, we will look at another important public cloud provider, Microsoft
    Azure, focusing on their cloud-based network products.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在第11章“AWS云网络”中看到的，基于云的网络帮助我们连接我们组织的基于云的资源。一个**虚拟** **网络**（**VNet**）可以用来分割和保障我们的虚拟机。它还可以将我们的本地资源连接到云中。作为这一领域的先驱，AWS通常被视为市场领导者，拥有最大的市场份额。在本章中，我们将探讨另一个重要的公共云提供商，Microsoft
    Azure，重点关注他们的基于云的网络产品。
- en: Microsoft Azure originally started as a project codenamed “Project Red Dog”
    in 2008 and was publicly released on February 1, 2010\. At the time, it was named
    “Windows Azure” before being renamed “Microsoft Azure” in 2014\. Since AWS released
    its first product, S3, in 2006, it essentially had a 6-year lead over Microsoft
    Azure. Attempting to catch up with AWS was no small task, even for a company with
    Microsoft’s vast amount of resources. At the same time, Microsoft has its unique
    competitive advantages from years of successful products and relationships with
    its enterprise customer base.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Microsoft Azure最初于2008年以“Project Red Dog”的代号启动，并于2010年2月1日公开发布。当时，它被称为“Windows
    Azure”，后来在2014年更名为“Microsoft Azure”。自从AWS在2006年发布了其第一个产品S3以来，它实际上领先于Microsoft
    Azure 6年。对于拥有Microsoft庞大资源的公司来说，试图赶上AWS并非易事。同时，Microsoft凭借其多年的成功产品和与企业客户群的关系，拥有独特的竞争优势。
- en: As Azure focuses on leveraging the existing Microsoft product offerings and
    customer relationships, there are some important implications regarding Azure
    cloud networking. For example, one of the main drivers for a customer to establish
    an ExpressRoute connection with Azure, their AWS Direct Connect equivalent, might
    be a better experience with Office 365\. Another example might be that the customer
    already has a service-level agreement with Microsoft that can be extended to Azure.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 由于Azure专注于利用现有的Microsoft产品和服务以及客户关系，因此Azure云网络有一些重要的含义。例如，客户建立与Azure的ExpressRoute连接（他们的AWS
    Direct Connect等效服务）的主要驱动因素之一可能是Office 365的更好体验。另一个例子可能是客户已经与Microsoft签订了服务级别协议，该协议可以扩展到Azure。
- en: In this chapter, we will discuss the networking services offered by Azure and
    how we can use Python to work with them. Since we already introduced some of the
    cloud networking concepts in the last chapter, we will draw on those lessons,
    comparing AWS and Azure networking when applicable.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论Azure提供的网络服务以及如何使用Python与之交互。由于我们在上一章中介绍了一些云网络概念，我们将借鉴那些经验，在适用的情况下比较AWS和Azure的网络。
- en: 'In particular, we will discuss:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，我们将讨论以下内容：
- en: The Azure setup and a networking overview.
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure的设置和网络概述。
- en: Azure **virtual networks** (in the form of VNets). An Azure VNet is similar
    to an AWS VPC. It provides customers with a private network in the Azure cloud.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure **虚拟网络**（形式为VNets）。Azure VNet类似于AWS VPC，它为用户提供了一个在Azure云中的私有网络。
- en: ExpressRoute and VPNs.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ExpressRoute和VPN。
- en: Azure Network Load Balancers.
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Azure网络负载均衡器。
- en: Other Azure network services.
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他Azure网络服务。
- en: We already learned many of the important cloud networking concepts in the last
    chapter. Let’s leverage that knowledge and start by comparing the services offered
    by Azure and AWS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在上一个章节中已经学习了众多重要的云网络概念。现在，让我们利用这些知识，首先比较一下Azure和AWS提供的服务。
- en: Azure and AWS network service comparison
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure和AWS网络服务比较
- en: When Azure launched, they were more focused on **Software-as-a-Service** (**SaaS**)
    and **Platform-as-a-Service** (**PaaS**), with less of a focus on **Infrastructure-as-a-Service**
    (**IaaS**). For SaaS and PaaS, the networking services at the lower layers are
    often abstracted away from the user. For example, the SaaS offering of Office
    365 is often offered as a remotely hosted endpoint that can be reached over the
    public internet. The PaaS offering of building web applications using Azure App
    Service is often done via a fully managed process, via popular frameworks such
    as .NET or Node.js.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Azure 推出时，他们更专注于 **软件即服务**（**SaaS**）和 **平台即服务**（**PaaS**），对 **基础设施即服务**（**IaaS**）的关注较少。对于
    SaaS 和 PaaS，底层网络服务通常被抽象化，远离用户。例如，Office 365 的 SaaS 提供通常作为一个可以通过公共互联网访问的远程托管端点提供。使用
    Azure App Service 构建网络应用程序的 PaaS 提供通常通过完全管理的流程完成，通过流行的框架如 .NET 或 Node.js。
- en: The IaaS offering, on the other hand, requires us to build our infrastructure
    in the Azure cloud. As the undisputed leader in the space, much of the target
    audience already has experience with AWS. To help with the transition, Azure provides
    an “AWS to Azure Service Comparison” ([https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services](https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services))
    on their website. This is a handy page that I often visit when I am confused about
    the equivalent Azure offering in comparison to AWS, especially when the service
    name is not directly illustrative of the service it provides. (I mean, can you
    tell what SageMaker is from looking at the name? I rest my case.)
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 相反，IaaS 提供的服务需要我们在 Azure 云中构建我们的基础设施。作为该领域的无可争议的领导者，大部分目标受众已经对 AWS 有所了解。为了帮助过渡，Azure
    在其网站上提供了一个“AWS 到 Azure 服务比较”（[https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services](https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services)）。这是一个方便的页面，当我对于与
    AWS 相比，Azure 的等效服务感到困惑时，我经常访问这个页面，尤其是当服务名称没有直接说明服务内容时。（我的意思是，你能从 SageMaker 的名称中看出它是什么吗？我不再争辩了。）
- en: I often use this page for competitive analysis as well. For example, when I
    need to compare the cost of a dedicated connection with AWS and Azure, I start
    with this page to verify that the equivalent service of AWS Direct Connect is
    Azure ExpressRoute, then use the link to get more details about the service.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我经常使用这个页面进行竞争分析。例如，当我需要比较 AWS 和 Azure 专用连接的成本时，我会从这个页面开始，验证 AWS Direct Connect
    的等效服务是 Azure ExpressRoute，然后通过链接获取更多关于该服务的详细信息。
- en: If we scroll down on the page to the **Networking** section, we can see that
    Azure offers many similar products to AWS, such as VNet, VPN Gateway, and Load
    Balancer. Some of the services may have different names, such as Route 53 and
    Azure DNS, but the underlying services are the same.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们滚动到页面上的 **网络** 部分，我们可以看到 Azure 提供了许多与 AWS 相似的产品，例如 VNet、VPN 网关和负载均衡器。一些服务可能有不同的名称，例如
    Route 53 和 Azure DNS，但底层服务是相同的。
- en: '![Table  Description automatically generated](img/B18403_12_01.png)'
  id: totrans-18
  prefs: []
  type: TYPE_IMG
  zh: '![表格描述自动生成](img/B18403_12_01.png)'
- en: 'Figure 12.1: Azure networking services (source: https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services)'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.1：Azure 网络服务（来源：https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services）
- en: There are some feature differences between Azure and AWS networking products.
    For example, for global traffic load balancing using DNS, AWS uses the same Route
    53 product, while Azure breaks it into a separate product called Traffic Manager.
    When we dig deeper into the products, some differences might make a difference
    depending on usage. For example, Azure Load Balancer, by default, allows session
    affinity, a.k.a. a sticky session, whereas the AWS load balancer needs to be configured
    explicitly.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 和 AWS 网络产品之间有一些功能差异。例如，在全局流量负载均衡使用 DNS 方面，AWS 使用相同的 Route 53 产品，而 Azure
    则将其拆分为一个名为 Traffic Manager 的独立产品。当我们深入到产品中时，一些差异可能会根据使用情况而有所不同。例如，Azure 负载均衡器默认允许会话亲和性，也就是所谓的粘性会话，而
    AWS 负载均衡器则需要显式配置。
- en: But for the most part, the high-level network products and services from Azure
    are similar to what we learned from AWS. This is the good news. The bad news is
    that just because the features are the same, it does not mean we can have a 1:1
    overlay between the two.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 但大部分情况下，Azure 的高级网络产品和服务的确与我们在 AWS 中学到的相似。这是好消息。坏消息是，尽管功能相同，但这并不意味着我们可以在两者之间实现
    1:1 的映射。
- en: The building tools are different, and the implementation details can sometimes
    throw off someone new to the Azure platform. We will point out some of the differences
    when we discuss the products in the following sections. Let’s begin by talking
    about the setup process for Azure.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 构建工具不同，对于刚接触Azure平台的人来说，实现细节有时可能会让人感到困惑。在接下来的章节中讨论产品时，我们将指出一些差异。让我们先从Azure的设置过程开始谈。
- en: Azure setup
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure设置
- en: 'Setting up an Azure account is straightforward. Just like AWS, there are many
    services and incentives that Azure offers to attract users in the highly competitive
    public cloud market. Please check out the [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)
    page for the latest offerings. At the time of writing, Azure is offering many
    popular services free for 12 months and 40+ other services as always free:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 设置Azure账户非常简单。就像AWS一样，Azure提供了许多服务和激励措施来吸引在高度竞争的公共云市场中用户。请查看[https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)页面了解最新的服务。在撰写本文时，Azure提供许多流行的服务免费12个月，以及40多个其他服务始终免费：
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B18403_12_02.png)'
  id: totrans-25
  prefs: []
  type: TYPE_IMG
  zh: '![计算机的截图  描述自动生成，中等置信度](img/B18403_12_02.png)'
- en: 'Figure 12.2: Azure portal (source: https://azure.microsoft.com/en-us/free/)'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.2：Azure门户（来源：https://azure.microsoft.com/en-us/free/）
- en: 'After the account is created, we can see the services available on the Azure
    portal at [https://portal.azure.com](https://portal.azure.com):'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 账户创建后，我们可以在Azure门户[https://portal.azure.com](https://portal.azure.com)上查看可用的服务：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_03.png)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  描述自动生成](img/B18403_12_03.png)'
- en: 'Figure 12.3: Azure services'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.3：Azure服务
- en: The web pages might change by the time you read this chapter. They are generally
    intuitive navigation changes that are easy to maneuver, even if they look a little
    different.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 当你阅读这一章时，网页可能会有所变化。这些变化通常是直观的导航更改，即使它们看起来有些不同，也很容易操作。
- en: 'Before any service can be launched, however, we will need to provide a payment
    method. This is done by adding a subscription service:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在启动任何服务之前，我们都需要提供一个支付方式。这是通过添加订阅服务来完成的：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_04.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  描述自动生成](img/B18403_12_04.png)'
- en: 'Figure 12.4: Azure subscriptions'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.4：Azure订阅
- en: I would recommend adding a pay-as-you-go plan, which has no upfront costs and
    no long-term commitment, but we also have the option to purchase various levels
    of support with the subscription plan.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议添加按量付费计划，这种计划没有前期成本，也没有长期承诺，但我们也有选择通过订阅计划购买各种级别支持的权利。
- en: Once the subscription is added, we can start looking at the various ways to
    administer and build in the Azure cloud, as detailed in the following section.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦添加了订阅，我们就可以开始查看在Azure云中管理和构建的各种方法，具体细节将在下一节中详细说明。
- en: Azure administration and APIs
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure管理和API
- en: 'The Azure portal is the sleekest and most modern portal of the top public cloud
    providers, including AWS and Google Cloud. We can change the settings of the portal
    from the settings icon on the top management bar, including the language and region:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Azure门户是顶级公共云提供商（包括AWS和Google Cloud）中最简洁、最现代的门户。我们可以通过顶部管理栏上的设置图标更改门户设置，包括语言和区域：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_05.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  描述自动生成](img/B18403_12_05.png)'
- en: 'Figure 12.5: Azure portal in different languages'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.5：不同语言的Azure门户
- en: 'There are many ways to manage Azure services: the portal, the Azure CLI, RESTful
    APIs, and the various client libraries. Besides the point-and-click management
    interface, the Azure portal also provides a handy shell called Azure Cloud Shell.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 管理Azure服务有许多方法：门户、Azure CLI、RESTful API以及各种客户端库。除了点对点的管理界面外，Azure门户还提供了一个方便的shell，称为Azure
    Cloud Shell。
- en: 'It can be launched from the top right-hand corner of the portal:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 它可以从门户的右上角启动：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_06.png)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  描述自动生成](img/B18403_12_06.png)'
- en: 'Figure 12.6: Azure Cloud Shell'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.6：Azure Cloud Shell
- en: 'When it is launched for the first time, you will be asked to pick between **Bash**
    and **PowerShell**. The shell interface can be switched later, but they cannot
    run simultaneously:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当它首次启动时，您将被要求在 **Bash** 和 **PowerShell** 之间进行选择。shell 接口可以在以后切换，但它们不能同时运行：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_07.png)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_12_07.png)'
- en: 'Figure 12.7: Azure Cloud Shell with PowerShell'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.7：Azure 云 Shell 与 PowerShell
- en: 'My personal preference is the **Bash** shell, which allows me to use the pre-installed
    Azure CLI and Python SDK:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 我个人的偏好是 **Bash** shell，它允许我使用预安装的 Azure CLI 和 Python SDK：
- en: '![Text  Description automatically generated](img/B18403_12_08.png)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B18403_12_08.png)'
- en: 'Figure 12.8: Azure AZ tool and Python in Cloud Shell'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.8：Azure AZ 工具和 Cloud Shell 中的 Python
- en: 'Cloud Shell is very handy because it is browser-based and thus accessible from
    virtually anywhere. It is assigned per unique user account and automatically authenticated
    with each session, so we do not need to worry about generating a separate key
    for it. But since we will be using the Azure CLI quite often, let’s install a
    local copy on the management host:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Cloud Shell 非常方便，因为它基于浏览器，因此可以从几乎任何地方访问。它按唯一用户账户分配，并且每个会话都会自动进行身份验证，所以我们不需要担心为它生成单独的密钥。但是，由于我们将会经常使用
    Azure CLI，让我们在管理主机上安装一个本地副本：
- en: '[PRE0]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Let’s also install the Azure Python SDK on our management host. Starting with
    version 5.0.0, the Azure Python SDK requires us to install service-specific packages
    listed at [https://aka.ms/azsdk/python/all](https://aka.ms/azsdk/python/all):'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们还在我们的管理主机上安装 Azure Python SDK。从版本 5.0.0 开始，Azure Python SDK 要求我们安装列在 [https://aka.ms/azsdk/python/all](https://aka.ms/azsdk/python/all)
    的服务特定包：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The Azure for Python Developers page, [https://docs.microsoft.com/en-us/azure/python/](https://docs.microsoft.com/en-us/azure/python/),
    is an all-inclusive resource for getting started with Azure using Python. The
    Azure SDK for Python page, [https://learn.microsoft.com/en-us/azure/developer/python/sdk/azure-sdk-overview](https://learn.microsoft.com/en-us/azure/developer/python/sdk/azure-sdk-overview),
    provides detailed documentation on using the Python libraries for Azure resource
    management.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: Azure for Python 开发者页面，[https://docs.microsoft.com/en-us/azure/python/](https://docs.microsoft.com/en-us/azure/python/)，是使用
    Python 开始 Azure 的全面资源。Azure SDK for Python 页面，[https://learn.microsoft.com/en-us/azure/developer/python/sdk/azure-sdk-overview](https://learn.microsoft.com/en-us/azure/developer/python/sdk/azure-sdk-overview)，提供了使用
    Python 库进行 Azure 资源管理的详细文档。
- en: We are now ready to take a look at some of the service principles of Azure and
    launch our Azure services.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在可以查看一些 Azure 的服务原则，并启动我们的 Azure 服务。
- en: Azure service principals
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Azure 服务主体
- en: 'Azure uses the concept of service principal objects for automated tools. The
    network security best practice of least privilege grants any person or tool just
    enough access to perform their job and no more. An Azure service principal restricts
    resources and the level of access based on roles. To get started, we will use
    the role automatically created for us by the Azure CLI and use the Python SDK
    to test the authentication. Use the `az` `login` command to receive a token:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: Azure 使用服务主体对象的概念用于自动化工具。网络安全最佳实践中的最小权限原则授予任何人员或工具仅足够执行其工作而不更多的访问权限。Azure 服务主体根据角色限制资源和访问级别。要开始，我们将使用
    Azure CLI 自动为我们创建的角色，并使用 Python SDK 进行身份验证测试。使用 `az` `login` 命令接收令牌：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Follow the URL and paste in the code you see on the command line and authenticate
    with the Azure account we created earlier:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 按照URL粘贴你在命令行中看到的代码，并使用我们之前创建的 Azure 账户进行身份验证：
- en: '![Text  Description automatically generated](img/B18403_12_09.png)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成](img/B18403_12_09.png)'
- en: 'Figure 12.9: Azure Cross-platform Command Line Interface'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 12.9：Azure 跨平台命令行界面
- en: 'We can create the credential file in `json` format and move that to the Azure
    directory. The Azure directory was created when we installed the Azure CLI tool:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 `json` 格式中创建凭证文件，并将其移动到 Azure 目录。Azure 目录是在我们安装 Azure CLI 工具时创建的：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Let’s secure the credential file and export it as an environment variable:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们保护凭证文件并将其导出为环境变量：
- en: '[PRE4]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We will also export the various credentials into our environment:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将各种凭证导出到我们的环境中：
- en: '[PRE5]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'We will grant role access to the subscription:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将授予订阅的角色访问权限：
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: For more information on Azure RBAC, visit [https://learn.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli](https://learn.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli).
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有关Azure RBAC的更多信息，请访问[https://learn.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli](https://learn.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli)。
- en: 'If we browse to the **Access control** section in the portal (**Home -> Subscriptions
    -> Pay-As-You-Go -> Access control**), we will be able to see the newly created
    role:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在门户中浏览到**访问控制**部分（**主页 -> 订阅 -> 按需付费 -> 访问控制**），我们将能够看到新创建的角色：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_10.png)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B18403_12_10.png)'
- en: 'Figure 12.10: Azure pay-as-you-go IAM'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.10：Azure按需付费IAM
- en: There are many example codes for using Python SDK to manage a network using
    the Azure Python SDK on the GitHub page, [https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/network](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/network).
    The *Getting Started Guide*, [https://learn.microsoft.com/en-us/samples/azure-samples/azure-samples-python-management/network/](https://learn.microsoft.com/en-us/samples/azure-samples/azure-samples-python-management/network/),
    can also be useful.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在GitHub页面上有许多使用Azure Python SDK管理网络的示例代码，[https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/network](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/network)。*入门指南*，[https://learn.microsoft.com/en-us/samples/azure-samples/azure-samples-python-management/network/](https://learn.microsoft.com/en-us/samples/azure-samples/azure-samples-python-management/network/)，也可能很有用。
- en: 'We will use a simple Python script, `Chapter12_1_auth.py`, to import the library
    for client authentication and network management:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用一个简单的Python脚本，`Chapter12_1_auth.py`，来导入客户端身份验证和网络管理的库：
- en: '[PRE7]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'If the file executes without an error, we have successfully authenticated with
    the Python SDK client:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如果文件在没有错误的情况下执行，则表示我们已成功使用Python SDK客户端进行身份验证：
- en: '[PRE8]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: While reading the Azure documentation, you may have noticed a combination of
    PowerShell and Python. In the next section, let’s briefly consider the relationship
    between Python and PowerShell.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在阅读Azure文档时，你可能已经注意到了PowerShell和Python的结合。在下一节中，我们将简要考虑Python和PowerShell之间的关系。
- en: Python versus PowerShell
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python与PowerShell
- en: There are many programming languages and frameworks that Microsoft has either
    developed from the ground up or has implemented major dialects for, including
    C#, .NET, and PowerShell. It is no surprise that .NET (with C#) and PowerShell
    are somewhat first-class citizens in Azure. In much of the Azure documentation,
    you will find direct references to PowerShell examples. There are often opinionated
    discussions on the web forums on which tool, Python or PowerShell, is better suited
    to managing Azure resources.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 微软已经从头开发或实现了包括C#、.NET和PowerShell在内的许多编程语言和框架，因此.NET（与C#）和PowerShell在Azure中享有某种程度的一等公民地位并不令人惊讶。在Azure的大部分文档中，你都会找到直接引用PowerShell示例的内容。在网络上，关于哪个工具（Python或PowerShell）更适合管理Azure资源的讨论往往带有主观意见。
- en: As of July 2019, we can also run PowerShell Core on the Linux and macOS operating
    systems in the preview release, [https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux?view=powershell-6](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.3&viewFallbackFrom=powershell-6).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 截至2019年7月，我们还可以在预览版中在Linux和macOS操作系统上运行PowerShell Core，[https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux?view=powershell-6](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.3&viewFallbackFrom=powershell-6)。
- en: We will not get into a debate on language superiority. I do not mind using PowerShell
    when required – I find it easy and intuitive – and I agree that sometimes the
    Python SDK lags behind PowerShell in implementing the latest Azure features. But
    since Python is at least part of the reason you picked up this book, we will stick
    to the Python SDK and the Azure CLI for our examples.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会就语言优越性进行辩论。当需要时，我不介意使用PowerShell——我发现它既简单又直观——并且我同意有时Python SDK在实现最新的Azure功能方面落后于PowerShell。但既然Python至少是您选择这本书的部分原因，我们将坚持使用Python
    SDK和Azure CLI作为我们的示例。
- en: 'Initially, the Azure CLI was offered as PowerShell modules for Windows and
    the Node.js-based CLI for other platforms. But as the tool has grown in popularity,
    it is now a wrapper around the Azure Python SDK, as explained in this article
    on *Python.org*: [https://www.python.org/success-stories/building-an-open-source-and-cross-platform-azure-cli-with-python/](https://www.python.org/success-stories/building-an-open-source-and-cross-platform-azure-cli-with-python/).'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 最初，Azure CLI是以Windows的PowerShell模块和其他平台的基于Node.js的CLI的形式提供的。但随着该工具的普及，它现在是一个围绕Azure
    Python SDK的包装器，如*Python.org*上的这篇文章所述：[https://www.python.org/success-stories/building-an-open-source-and-cross-platform-azure-cli-with-python/](https://www.python.org/success-stories/building-an-open-source-and-cross-platform-azure-cli-with-python/)。
- en: In the remaining sections of this chapter, when we are introducing a feature
    or concept, we will oftentimes turn to the Azure CLI for demonstration purposes.
    Rest assured that if something is available as an Azure CLI command, it is available
    in the Python SDK if we need to directly code it in Python.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章剩余的部分，当我们介绍一个功能或概念时，我们通常会转向Azure CLI进行演示。请放心，如果某个功能可以作为Azure CLI命令使用，那么如果我们需要直接用Python编写代码，它也将在Python
    SDK中可用。
- en: Having covered Azure administration and the associated APIs, let’s move on to
    discussing Azure global infrastructure.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 在介绍了Azure管理和相关的API之后，让我们继续讨论Azure全球基础设施。
- en: Azure global infrastructure
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure全球基础设施
- en: 'Similar to AWS, an Azure global infrastructure consists of regions, **Availability
    Zones** (**AZs**), and edge locations. At the time of writing, Azure has 60+ regions
    and more than 200+ physical data centers, as illustrated on the product page ([https://azure.microsoft.com/en-us/global-infrastructure/](https://azure.microsoft.com/en-us/global-infrastructure/)):'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 与AWS类似，Azure全球基础设施由地区、**可用区域（AZs**）和边缘位置组成。在撰写本文时，Azure拥有60多个地区和200多个以上的物理数据中心，如产品页面所示（[https://azure.microsoft.com/en-us/global-infrastructure/](https://azure.microsoft.com/en-us/global-infrastructure/))）：
- en: '![](img/B18403_12_11.png)'
  id: totrans-89
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18403_12_11.png)'
- en: 'Figure 12.11: Azure global infrastructure (source: https://azure.microsoft.com/en-us/global-infrastructure/)'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.11：Azure全球基础设施（来源：https://azure.microsoft.com/en-us/global-infrastructure/）
- en: Like AWS, Azure products are offered via regions, so we need to check service
    availability and pricing based on regions. We can also build redundancy into the
    service by building the service in multiple AZs. However, unlike AWS, not all
    Azure regions have AZs, and not all Azure products support them. In fact, Azure
    did not announce the general availability of AZs until 2018, and they are only
    offered in select regions.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 与AWS一样，Azure产品通过地区提供，因此我们需要根据地区检查服务可用性和定价。我们还可以通过在多个AZs中构建服务来在服务中构建冗余。然而，与AWS不同，并非所有Azure地区都有AZs，也并非所有Azure产品都支持它们。实际上，Azure直到2018年才宣布AZs的通用可用性，并且它们只在选定地区提供。
- en: This is something to be aware of when picking our region. I recommend picking
    regions with AZs such as West US 2, Central US, and East US 1.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在选择我们的地区时，这一点需要我们注意。我建议选择带有AZs的地区，例如西US 2、中US和东US 1。
- en: If we build in a region without AZs, we will need to replicate the service across
    different regions, typically in the same geography. We will discuss Azure geography
    next.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在没有可用区域（AZs）的地区进行建设，我们就需要在不同的地区复制该服务，通常是在同一地理区域内。我们将在下一节讨论Azure地理区域。
- en: On the Azure global infrastructure page, the regions with Availability Zones
    are marked with a star in the middle.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在Azure全球基础设施页面上，带有可用区域的地区中间有一个星号标记。
- en: Unlike AWS, Azure regions are also organized into a higher-order category of
    geographies. A geography is a discrete market, typically containing one or more
    regions. Besides lower latency and better network connectivity, replicating the
    service and data across regions in the same geography is necessary for government
    compliance. An example of replication across regions would be the regions of Germany.
    If we needed to launch services for the German market, the government mandates
    strict data sovereignty within the border, but none of the German regions have
    Availability Zones. We would need to replicate the data between different regions
    in the same geography, that is, Germany North, Germany Northeast, Germany West
    Central, and so on.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 与AWS不同，Azure区域也组织成更高层次的地理分类。地理是一个独立的市场，通常包含一个或多个区域。除了低延迟和更好的网络连接外，跨同一地理区域内区域复制服务和数据对于政府合规性也是必要的。跨区域复制的例子是德国的区域。如果我们需要为德国市场推出服务，政府要求在边境内实施严格的数据主权，但德国没有区域有可用区。我们需要在同一地理区域内不同区域之间复制数据，即德国北部、德国东北部、德国西中部等等。
- en: As a rule of thumb, I typically prefer regions that have Availability Zones
    to keep things similar across different cloud providers. Once we have determined
    the region that best fits our use case, we are ready to build our VNet in Azure.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，我通常更喜欢有可用区的区域，以保持不同云服务提供商之间的相似性。一旦我们确定了最适合我们用例的区域，我们就可以在Azure中构建我们的VNet。
- en: Azure virtual networks
  id: totrans-97
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Azure虚拟网络
- en: When we wear the network engineer hat in the Azure cloud, **Azure virtual networks**
    (**VNets**) are where we spend most of our time. Similar to a traditional network
    that we would build in our data center, they are the fundamental building blocks
    for our private networks in Azure. We will use a VNet to allow our VMs to communicate
    with each other, with the internet, and with our on-premise network through a
    VPN or ExpressRoute.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在Azure云中戴上网络工程师的帽子时，**Azure虚拟网络（VNets**）是我们花费大部分时间的地方。与传统网络类似，我们在数据中心构建的传统网络，它们是我们Azure中私有网络的基本构建块。我们将使用VNet来允许我们的虚拟机相互通信，与互联网，以及通过VPN或ExpressRoute与我们的本地网络通信。
- en: 'Let’s begin by building our first VNet using the portal. We will start by browsing
    the **virtual network page** via **Create a Resource -> Networking -> Virtual
    network**:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从使用门户构建我们的第一个VNet开始。我们将首先通过**创建资源 -> 网络 -> 虚拟网络**浏览**虚拟网络页面**：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_12.png)'
  id: totrans-100
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成描述](img/B18403_12_12.png)'
- en: 'Figure 12.12: Azure VNet'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.12：Azure VNet
- en: Each VNet is scoped to a single region and we can create multiple subnets per
    VNet. As we will see later, multiple VNets in different regions can connect to
    each other via VNet peering.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 每个VNet都限于单个区域，并且我们可以在每个VNet中创建多个子网。正如我们稍后将会看到的，不同区域的多个VNet可以通过VNet对等连接到彼此。
- en: 'From the VNet creation page, we will create our first network with the following
    credentials:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 从VNet创建页面，我们将使用以下凭据创建我们的第一个网络：
- en: '[PRE9]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here is a screenshot of the necessary fields. If there are any missing fields
    that are required, they will be highlighted in red. Click on **Create** when finished:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是必要的字段的截图。如果有任何缺失的必填字段，它们将以红色突出显示。完成时点击**创建**：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_13.png)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件，自动生成描述](img/B18403_12_13.png)'
- en: 'Figure 12.13: Azure VNet creation'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.13：Azure VNet创建
- en: 'Once the resource is created, we can navigate to it via **Home -> Resource
    groups -> Mastering-Python-Networking**:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 资源创建完成后，我们可以通过**主页 -> 资源组 -> Mastering-Python-Networking**导航到它：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_14.png)'
  id: totrans-109
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，自动生成描述](img/B18403_12_14.png)'
- en: 'Figure 12.14: Azure VNet overview'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.14：Azure VNet概述
- en: Congratulations, we just created our first VNet in the Azure cloud! Our network
    needs to communicate with the outside world to be useful. We will look at how
    we can do that in the next section.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜，我们刚刚在Azure云中创建了我们的第一个VNet！我们的网络需要与外界通信才能发挥作用。我们将在下一节中探讨如何做到这一点。
- en: Internet access
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 互联网访问
- en: By default, all resources within a VNet can carry out outbound communication
    with the internet; we do not need to add a NAT gateway as we do in AWS. For inbound
    communication, we will need to assign a public IP directly to the VM or use a
    load balancer with a public IP. To see this working, we will create VMs within
    our network.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，VNet内的所有资源都可以与互联网进行出站通信；我们不需要像在AWS中那样添加NAT网关。对于入站通信，我们需要直接将公网IP分配给虚拟机或使用带有公网IP的负载均衡器。为了看到这个功能的工作情况，我们将在我们的网络中创建虚拟机。
- en: We can create our first VM from **Home -> Resource groups -> Mastering-Python-Networking
    -> New -> Create a virtual machine:**
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从**主页 -> 资源组 -> Mastering-Python-Networking -> 新建 -> 创建虚拟机**创建我们的第一个虚拟机：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_15.png)'
  id: totrans-115
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、应用程序  自动生成的描述](img/B18403_12_15.png)'
- en: 'Figure 12.15: Azure creating a VM'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.15：Azure创建虚拟机
- en: 'I will pick **Ubuntu Server 22.04 LTS** as the VM and use the name `myMPN-VM1`
    when prompted. I will pick the region `West US 2`. We can choose password authentication
    or an SSH public key as the authentication method and allow an SSH inbound connection.
    Since we are using it for testing, we can pick the smallest instance in the B-Series
    to minimize our cost:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我将选择**Ubuntu Server 22.04 LTS**作为虚拟机，并在提示时使用名称`myMPN-VM1`。我将选择区域`West US 2`。我们可以选择密码认证或SSH公钥作为认证方法，并允许SSH入站连接。由于我们正在对其进行测试，我们可以选择B系列中最小的实例以最小化我们的成本：
- en: '![Table  Description automatically generated](img/B18403_12_16.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![表格  自动生成的描述](img/B18403_12_16.png)'
- en: 'Figure 12.16: Azure compute B-Series'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.16：Azure计算B系列
- en: 'We can leave the other options as their default settings, pick a small disk
    size, and check **delete with VM**. We will put the VM into the subnet that we
    created, as well as assigning a new public IP:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将其他选项保留为默认设置，选择较小的磁盘大小，并勾选**与虚拟机一起删除**。我们将虚拟机放入我们创建的子网中，并分配一个新的公网IP：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_17.png)'
  id: totrans-121
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B18403_12_17.png)'
- en: 'Figure 12.17: Azure network interface'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.17：Azure网络接口
- en: After the VM is provisioned, we can `ssh` to the machine with the public IP
    and the user we created. The VM has only one interface that is within our private
    subnet; it is also mapped to the public IP that Azure automatically assigned.
    This public-to-private IP translation is done automatically by Azure.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机配置完成后，我们可以使用公网IP和创建的用户名`ssh`登录到该机器。虚拟机只有一个接口，位于我们的私有子网内；它也被映射到Azure自动分配的公网IP。这种公网到私网IP的转换由Azure自动完成。
- en: '[PRE10]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can repeat the same process to create a second VM named `myMPN-VM2`. The
    VM can be configured with `SSH` inbound access but no public IP:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以重复相同的步骤创建第二个名为`myMPN-VM2`的虚拟机。虚拟机可以配置为具有`SSH`入站访问，但没有公网IP：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_18.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B18403_12_18.png)'
- en: 'Figure 12.18: Azure VM IP addresses'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.18：Azure虚拟机IP地址
- en: 'After the VM creation, we can `ssh` to `myMPN-VM2` from `myMPN-VM1` with the
    private IP:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建虚拟机之后，我们可以从`myMPN-VM1`使用私网IP`ssh`连接到`myMPN-VM2`。
- en: '[PRE11]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We can test the internet connection by trying to access the `apt` package update
    repositories:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过尝试访问`apt`软件包更新仓库来测试互联网连接：
- en: '[PRE12]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: With our VM inside of VNet able to access the internet, we can create additional
    network resources for our network.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在VNet内部，我们的虚拟机可以访问互联网，我们可以为我们的网络创建额外的网络资源。
- en: Network resource creation
  id: totrans-133
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 网络资源创建
- en: 'Let’s look at an example of using the Python SDK to create network resources.
    In the following example, `Chapter12_2_network_resources.py`, we will use the
    `subnet.create_or_update` API to create a new `192.168.0.128/25` subnet in the
    VNet:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看使用Python SDK创建网络资源的示例。在下面的示例中，`Chapter12_2_network_resources.py`，我们将使用`subnet.create_or_update`
    API在VNet中创建一个新的`192.168.0.128/25`子网：
- en: '[PRE13]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will receive the following creation result message when we execute the script:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 执行脚本时，我们将收到以下创建结果消息：
- en: '[PRE14]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The new subnet can also be seen on the portal:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 新子网也可以在门户中看到：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_19.png)'
  id: totrans-139
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序、电子邮件  自动生成的描述](img/B18403_12_19.png)'
- en: 'Figure 12.19: Azure VNet subnets'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 图12.19：Azure VNet子网
- en: For more examples of using the Python SDK, check out [https://github.com/Azure-Samples/azure-samples-python-management](https://github.com/Azure-Samples/azure-samples-python-management).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: If we create a VM within the new subnet, even across subnet boundaries, the
    hosts in the same VNet can reach each other with the same implicit router we saw
    with AWS.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: There are additional VNet services available to us when we need to interact
    with other Azure services. Let’s take a look.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: VNet service endpoints
  id: totrans-144
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VNet service endpoints can extend the VNet to other Azure services over a direct
    connection. This allows traffic from the VNet to the Azure service to remain on
    the Azure network. Service endpoints need to be configured with an identified
    service within the region of the VNet.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 'They can be configured via the portal with restrictions to the service and
    subnet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18403_12_20.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.20: Azure service endpoints'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: Strictly speaking, we do not need to create VNet service endpoints when we need
    to have the VMs in the VNet communicate with the service. Each VM can access the
    service through the public IP mapped, and we can use network rules to permit only
    the necessary IPs. However, using the VNet service endpoints allows us to access
    the resources using the private IP within Azure without the traffic traversing
    the public internet.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: VNet peering
  id: totrans-150
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned at the beginning of the section, each VNet is limited to a region.
    For region-to-region VNet connectivity, we can leverage VNet peering. Let’s use
    the following two functions in `Chapter11_3_vnet.py` to create a VNet in the `US-East`
    region:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: To allow VNet peering, we need to peer bi-directionally from both VNets. Since
    we have been using the Python SDK up to this point, for learning purposes, let’s
    look at an example with the Azure CLI.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'We will grab the VNet name and ID from the `az network vnet list` command:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Let’s check the existing VNet peering for our `West US 2` VNet:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'We will execute the peering from the `West US` to `East US` VNet, then repeat
    in the reverse direction:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Now if we run the check again, we will be able to see the VNet successfully
    peered:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'We can also verify the peering on the Azure portal:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_21.png)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.21: Azure VNet peering'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have several hosts, subnets, VNets, and VNet peering in our setup,
    we should look at how routing is done in Azure. That is what we will do in the
    next section.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: VNet routing
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a network engineer, implicit routes added by the cloud provider have always
    been a bit uncomfortable for me. In traditional networking, we need to cable up
    the network, assign IP addresses, configure routing, implement security, and make
    sure everything works. It can sometimes be complex, but every packet and route
    is accounted for. For virtual networks in the cloud, the underlay network is already
    completed by Azure and some network configuration on the overlay network needs
    to happen automatically for the host to work at launch time, as we saw earlier.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: Azure VNet routing is a bit different from AWS. In the AWS chapter, we saw the
    routing table implemented at the VPC network layer. But if we browse to the Azure
    VNet setting on the portal, we will not find a routing table assigned to the VNet.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'If we drill deeper into the **subnet setting**, we will see a routing table
    drop-down menu, but the value it is displaying is **None**:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_22.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.22: Azure subnet routing table'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'How can we have an empty routing table with the hosts in that subnet able to
    reach the internet? Where can we see the routes configured by Azure VNet? The
    routing has been implemented at the host and NIC levels. We can see it via **All
    services -> Virtual Machines -> myNPM-VM1 -> Networking (left panel) -> Topology
    (top panel)**:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B18403_12_23.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.23: Azure network topology'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: The network is being shown on the NIC level with each NIC attached to a VNet
    subnet on the north side and other resources such as VM, **Network Security Group**
    (**NSG**), and IP on the south side. The resources are dynamic; at the time of
    the screen capture, I only had `myMPN-VM1` running, therefore it is the only one
    with a VM and IP address attached, while the other VMs only have NSGs attached.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: We will cover NSG in the next section.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on the NIC, **mympn-vm1655** in our topology, we can see the settings
    associated with the NIC. Under the **Support + troubleshooting** section, we will
    find the **Effective routes** link, where we can see the current routing associated
    with the NIC:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, table  Description automatically generated](img/B18403_12_24.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.24: Azure VNet effective routes'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to automate the process, we can use the Azure CLI to find the NIC
    name and then show the routing table:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Great! That was one mystery solved, but what are those next hops in the routing
    table? We can reference the VNet traffic routing document: [https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview).
    A few important notes:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: If the source indicates that the route is **Default**, these are system routes
    that cannot be removed but can be overwritten with custom routes.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VNet next hops are the routes within the custom VNet. In our case, this is the
    `192.168.0.0/23` network, not just the subnet.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic routed to the **None** next hop type is dropped, similar to the **Null**
    interface routes.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **VNetGlobalPeering** next hop type is what was created when we established
    VNet peering with other VNets.
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **VirtualNetworkServiceEndpoint** next hop type was created when we enabled
    service endpoints in our VNet. The public IP is managed by Azure and changes from
    time to time.
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How do we override the default routes? We can create a route table and associate
    it with subnets. Azure selects the routes with the following priority:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: User-defined route
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BGP route (from a Site-to-Site VPN or ExpressRoute)
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System route
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can create a route table in the **Networking** section:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_25.png)'
  id: totrans-193
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.25: Azure VNet route tables'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create a route table, create a route within the table, and associate
    the route table with a subnet via the Azure CLI:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Let’s take a look at the primary security measure in VNet: NSGs.'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: Network security groups
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VNet security is primarily implemented by NSGs. Just like traditional access
    lists or firewall rules, we need to think of network security rules in a single
    direction at a time. For example, if we want to have host `A`, in `subnet 1` communicate
    freely with host `B` in `subnet 2` over port `80`, we need to implement the necessary
    rules for both inbound and outbound directions for both hosts.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: As we saw from previous examples, an NSG can be associated with the NIC or the
    subnet, so we also need to think in terms of security layers. Generally speaking,
    we should implement the more restrictive rules at the host level while the more
    relaxed rules are applied at the subnet level. This is similar to traditional
    networking.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'When we created our VMs, we set a permit rule for SSH TCP port `22` inbound.
    Let’s take a look at the security group that was created for our first VM, **myMPN-VM1-nsg**:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_26.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.26: Azure VNet NSG'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few things worth pointing out:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: The priority level of system-implemented rules is high, at 65,000 and above.
  id: totrans-205
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, virtual networks can freely communicate with each other in both
    directions.
  id: totrans-206
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, internal hosts are allowed internet access.
  id: totrans-207
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s implement an inbound rule on the existing NSG group from the portal:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_27.png)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.27: Azure security rule'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create a new security group and rules via the Azure CLI:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  id: totrans-212
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can see the new rules that were created as well as the default rules:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_28.png)'
  id: totrans-214
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.28: Azure security rules'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step would be to bind this NSG to a subnet:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'In the next two sections, we will look at the two primary ways to extend Azure
    virtual networks to our on-premises data center: Azure VPN and Azure ExpressRoute.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: Azure VPNs
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the network continues to grow, there might come a time when we need to connect
    the Azure VNet to our on-premise location. A VPN gateway is a type of VNet gateway
    that can encrypt the traffic between a VNet and our on-premise network and remote
    clients. Each VNet can only have one VPN gateway, but multiple connections can
    be built on the same VPN gateway.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'More information about Azure VPN gateways can be found at this link: [https://docs.microsoft.com/en-us/azure/vpn-gateway/](https://docs.microsoft.com/en-us/azure/vpn-gateway/).'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'VPN gateways are actually VMs themselves, configured with encryption and routing
    services, but cannot be directly configured by the user. Azure provides a list
    of SKUs based on the type of tunnel, number of concurrent connections, and total
    throughput ([https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-gateway-settings#gwsku](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-gateway-settings#gwsku)):'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_29.png)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.29: Azure VPN gateway SKUs (source: https://docs.microsoft.com/en-us/azure/vpn-gateway/point-to-site-about)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see from the preceding table, the Azure VPN is divided into two different
    categories: **Point-to-Site (P2S)** VPN and **Site-to-Site (S2S)** VPN. The P2S
    VPN allows secure connections from an individual client computer, mainly used
    by telecommuters. The encryption method can be SSTP, IKEv2, or OpenVPN connection.
    When picking the type of VPN Gateway SKU for P2S, we will want to focus on the
    second and third columns on the SKU chart for the number of connections.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'For a client-based VPN, we can use either SSTP or IKEv2 as the tunneling protocol:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_12_30.png)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.30: Azure Site-to-Site VPN gateway (source: https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpngateways)'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides client-based VPNs, another type of VPN connection is a Site-to-Site
    or multi-site VPN connection. The encryption method will be IPSec over IKE and
    a public IP will be required for both Azure and the on-premise network, as illustrated
    by the following diagram:'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated with medium confidence](img/B18403_12_31.png)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.31: Azure client VPN gateway (source: https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpngateways)'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: A full example of creating an S2S or P2S VPN is more than what we can cover
    in this section. Azure provides tutorials for S2S ([https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal)),
    as well as P2S VPN ([https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal)).
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are pretty straightforward for engineers who have configured VPN
    services before. The only point that may be a bit confusing and is not called
    out in the document is the fact that the VPN gateway device should live in a dedicated
    gateway subnet within the VNet with a `/27` IP block assigned:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_32.png)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.32: Azure VPN gateway subnet'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: A growing list of validated Azure VPN devices can be found at [https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-devices](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-devices),
    with links to their respective configuration guides.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: Azure ExpressRoute
  id: totrans-237
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When organizations need to extend an Azure VNet to on-premises sites, it makes
    sense to start with a VPN connection. However, as the connection takes on more
    mission-critical traffic, the organization might want a more stable and reliable
    connection. Similar to AWS Direct Connect, Azure offers ExpressRoute as a private
    connection facilitated by a connectivity provider. As we can see from the diagram,
    our network is connected to Azure’s partner edge network before it is transitioned
    to Azure’s edge network:'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_12_33.png)'
  id: totrans-239
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.33: Azure ExpressRoute circuits (source: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-introduction)'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of ExpressRoute include:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: More reliable since it does not traverse through the public internet.
  id: totrans-242
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A faster connection with lower latency since a private connection is likely
    to have fewer hops between on-premise equipment to Azure.
  id: totrans-243
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better security measures since it is a private connection, especially if a company
    relies on Microsoft services such as Office 365.
  id: totrans-244
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages of ExpressRoute can be:'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: More difficulty setting up, both in terms of business and technical requirements.
  id: totrans-246
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Higher cost commitment upfront, since the port charge and connection charges
    are often fixed. Some of the costs can be offset by a reduction in internet costs
    if it replaces a VPN connection. However, the total cost of ownership is typically
    higher with ExpressRoute.
  id: totrans-247
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more detailed overview of ExpressRoute can be found at [https://docs.microsoft.com/en-us/azure/expressroute/expressroute-introduction](https://docs.microsoft.com/en-us/azure/expressroute/expressroute-introduction).
    One of the biggest differences from AWS Direct Connect is the fact that ExpressRoute
    can offer connections across regions in geography. There is also a premium add-on
    that allows global connectivity to Microsoft services as well as QoS support for
    Skype for Business.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: Similar to Direct Connect, ExpressRoute requires the user to connect to Azure
    with a partner or meet Azure at a certain designated location with ExpressRoute
    Direct (yes, the term is confusing). This is typically the biggest hurdle for
    enterprises to get over since they will need to either build their data center
    at one of the Azure locations, connect with a carrier (MPLS VPN), or work with
    a broker as a go-between for connection. These options typically require business
    contracts, longer-term commitments, and committed monthly costs.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: To start, my recommendation would be similar to in *Chapter 11*, *AWS Cloud
    Networking*, which is to use an existing carrier broker for connection to a carrier
    hotel. From the carrier hotel, either directly connect to Azure or use an intermediary
    such as Equinix FABRIC ([https://www.equinix.com/interconnection-services/equinix-fabric](https://www.equinix.com/interconnection-services/equinix-fabric)
    ).
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how we can distribute incoming traffic
    efficiently when our service grows beyond just a single server.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: Azure network load balancers
  id: totrans-252
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure offers load balancers in both the basic and standard SKU. When we discuss
    the load balancer in this section, we are referring to the Layer 4 TCP and UDP
    load distribution service instead of the Application Gateway Load Balancer ([https://azure.microsoft.com/en-us/services/application-gateway/](https://azure.microsoft.com/en-us/services/application-gateway/)),
    which is a layer-7 load-balancing solution.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'The typical deployment model is usually a one- or two-layer load distribution
    for an inbound connection from the internet:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_12_34.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.34: Azure Load Balancer (source: https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview)'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: The load balancer hashes the incoming connection on a 5-tuple hash (source and
    destination IP, source and destination port, and protocol) and distributes the
    flow to one or more destinations. The Standard Load Balancer SKU is a superset
    of the basic SKU, therefore new designs should adopt the Standard Load Balancer.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: As with AWS, Azure is constantly innovating with new network services. We have
    covered the foundational services in this chapter; let’s take a look at some of
    the other notable services.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: Other Azure network services
  id: totrans-259
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of the other Azure network services that we should be aware of are:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: '**DNS services**: Azure has a suite of DNS services ([https://docs.microsoft.com/en-us/azure/dns/dns-overview](https://docs.microsoft.com/en-us/azure/dns/dns-overview)),
    both public and private. It can be used for geographical load balancing for network
    services.'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container networking**: Azure has been making a push toward containers in
    recent years. More information about Azure network capabilities for containers
    can be found at [https://docs.microsoft.com/en-us/azure/virtual-network/container-networking-overview](https://docs.microsoft.com/en-us/azure/virtual-network/container-networking-overview).'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VNet TAP**: Azure VNet TAP allows you to continuously stream your VM network
    traffic to a network packet collector or analytical tool ([https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-tap-overview](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-tap-overview)).'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed Denial of Service Protection**: Azure DDoS protection provides
    defense against DDoS attacks ([https://docs.microsoft.com/en-us/azure/virtual-network/ddos-protection-overview](https://docs.microsoft.com/en-us/azure/virtual-network/ddos-protection-overview)).'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure network services are a big part of the Azure cloud family and continue
    to grow at a fast rate. We have only covered a portion of the services in this
    chapter, but hopefully, it has given you a good foundation from which to begin
    to explore other services.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-266
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at the various Azure cloud network services.
    We discussed the Azure global network and various aspects of virtual networks.
    We used both the Azure CLI and the Python SDK to create, update, and manage those
    network services. When we need to extend Azure services to an on-premise data
    center, we can use either VPN or ExpressRoute for connectivity. We also briefly
    looked at various Azure network products and services.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will revisit the data analysis pipeline with an all-in-one
    stack: the Elastic Stack.'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: Join our book community
  id: totrans-269
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join our community for this book – where you can share feedback, ask questions
    to the author, and learn about new releases – follow the QR code below:'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/networkautomationcommunity](https://packt.link/networkautomationcommunity)'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2903617220506617062.png)'
  id: totrans-272
  prefs: []
  type: TYPE_IMG
