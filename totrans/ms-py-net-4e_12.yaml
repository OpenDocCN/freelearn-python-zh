- en: '12'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure Cloud Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we saw in *Chapter 11*, *AWS Cloud Networking*, cloud-based networking helps
    us connect our organization’s cloud-based resources. A **virtual** **network**
    (**VNet**) can be used to segment and secure our virtual machines. It can also
    connect our on-premise resources to the cloud. As the first pioneer in this space,
    AWS is often regarded as the market leader, with the biggest market share. In
    this chapter, we will look at another important public cloud provider, Microsoft
    Azure, focusing on their cloud-based network products.
  prefs: []
  type: TYPE_NORMAL
- en: Microsoft Azure originally started as a project codenamed “Project Red Dog”
    in 2008 and was publicly released on February 1, 2010\. At the time, it was named
    “Windows Azure” before being renamed “Microsoft Azure” in 2014\. Since AWS released
    its first product, S3, in 2006, it essentially had a 6-year lead over Microsoft
    Azure. Attempting to catch up with AWS was no small task, even for a company with
    Microsoft’s vast amount of resources. At the same time, Microsoft has its unique
    competitive advantages from years of successful products and relationships with
    its enterprise customer base.
  prefs: []
  type: TYPE_NORMAL
- en: As Azure focuses on leveraging the existing Microsoft product offerings and
    customer relationships, there are some important implications regarding Azure
    cloud networking. For example, one of the main drivers for a customer to establish
    an ExpressRoute connection with Azure, their AWS Direct Connect equivalent, might
    be a better experience with Office 365\. Another example might be that the customer
    already has a service-level agreement with Microsoft that can be extended to Azure.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the networking services offered by Azure and
    how we can use Python to work with them. Since we already introduced some of the
    cloud networking concepts in the last chapter, we will draw on those lessons,
    comparing AWS and Azure networking when applicable.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, we will discuss:'
  prefs: []
  type: TYPE_NORMAL
- en: The Azure setup and a networking overview.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure **virtual networks** (in the form of VNets). An Azure VNet is similar
    to an AWS VPC. It provides customers with a private network in the Azure cloud.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ExpressRoute and VPNs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure Network Load Balancers.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other Azure network services.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We already learned many of the important cloud networking concepts in the last
    chapter. Let’s leverage that knowledge and start by comparing the services offered
    by Azure and AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Azure and AWS network service comparison
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When Azure launched, they were more focused on **Software-as-a-Service** (**SaaS**)
    and **Platform-as-a-Service** (**PaaS**), with less of a focus on **Infrastructure-as-a-Service**
    (**IaaS**). For SaaS and PaaS, the networking services at the lower layers are
    often abstracted away from the user. For example, the SaaS offering of Office
    365 is often offered as a remotely hosted endpoint that can be reached over the
    public internet. The PaaS offering of building web applications using Azure App
    Service is often done via a fully managed process, via popular frameworks such
    as .NET or Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: The IaaS offering, on the other hand, requires us to build our infrastructure
    in the Azure cloud. As the undisputed leader in the space, much of the target
    audience already has experience with AWS. To help with the transition, Azure provides
    an “AWS to Azure Service Comparison” ([https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services](https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services))
    on their website. This is a handy page that I often visit when I am confused about
    the equivalent Azure offering in comparison to AWS, especially when the service
    name is not directly illustrative of the service it provides. (I mean, can you
    tell what SageMaker is from looking at the name? I rest my case.)
  prefs: []
  type: TYPE_NORMAL
- en: I often use this page for competitive analysis as well. For example, when I
    need to compare the cost of a dedicated connection with AWS and Azure, I start
    with this page to verify that the equivalent service of AWS Direct Connect is
    Azure ExpressRoute, then use the link to get more details about the service.
  prefs: []
  type: TYPE_NORMAL
- en: If we scroll down on the page to the **Networking** section, we can see that
    Azure offers many similar products to AWS, such as VNet, VPN Gateway, and Load
    Balancer. Some of the services may have different names, such as Route 53 and
    Azure DNS, but the underlying services are the same.
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.1: Azure networking services (source: https://docs.microsoft.com/en-us/azure/architecture/aws-professional/services)'
  prefs: []
  type: TYPE_NORMAL
- en: There are some feature differences between Azure and AWS networking products.
    For example, for global traffic load balancing using DNS, AWS uses the same Route
    53 product, while Azure breaks it into a separate product called Traffic Manager.
    When we dig deeper into the products, some differences might make a difference
    depending on usage. For example, Azure Load Balancer, by default, allows session
    affinity, a.k.a. a sticky session, whereas the AWS load balancer needs to be configured
    explicitly.
  prefs: []
  type: TYPE_NORMAL
- en: But for the most part, the high-level network products and services from Azure
    are similar to what we learned from AWS. This is the good news. The bad news is
    that just because the features are the same, it does not mean we can have a 1:1
    overlay between the two.
  prefs: []
  type: TYPE_NORMAL
- en: The building tools are different, and the implementation details can sometimes
    throw off someone new to the Azure platform. We will point out some of the differences
    when we discuss the products in the following sections. Let’s begin by talking
    about the setup process for Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Azure setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Setting up an Azure account is straightforward. Just like AWS, there are many
    services and incentives that Azure offers to attract users in the highly competitive
    public cloud market. Please check out the [https://azure.microsoft.com/en-us/free/](https://azure.microsoft.com/en-us/free/)
    page for the latest offerings. At the time of writing, Azure is offering many
    popular services free for 12 months and 40+ other services as always free:'
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B18403_12_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.2: Azure portal (source: https://azure.microsoft.com/en-us/free/)'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the account is created, we can see the services available on the Azure
    portal at [https://portal.azure.com](https://portal.azure.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.3: Azure services'
  prefs: []
  type: TYPE_NORMAL
- en: The web pages might change by the time you read this chapter. They are generally
    intuitive navigation changes that are easy to maneuver, even if they look a little
    different.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before any service can be launched, however, we will need to provide a payment
    method. This is done by adding a subscription service:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.4: Azure subscriptions'
  prefs: []
  type: TYPE_NORMAL
- en: I would recommend adding a pay-as-you-go plan, which has no upfront costs and
    no long-term commitment, but we also have the option to purchase various levels
    of support with the subscription plan.
  prefs: []
  type: TYPE_NORMAL
- en: Once the subscription is added, we can start looking at the various ways to
    administer and build in the Azure cloud, as detailed in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Azure administration and APIs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Azure portal is the sleekest and most modern portal of the top public cloud
    providers, including AWS and Google Cloud. We can change the settings of the portal
    from the settings icon on the top management bar, including the language and region:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.5: Azure portal in different languages'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many ways to manage Azure services: the portal, the Azure CLI, RESTful
    APIs, and the various client libraries. Besides the point-and-click management
    interface, the Azure portal also provides a handy shell called Azure Cloud Shell.'
  prefs: []
  type: TYPE_NORMAL
- en: 'It can be launched from the top right-hand corner of the portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.6: Azure Cloud Shell'
  prefs: []
  type: TYPE_NORMAL
- en: 'When it is launched for the first time, you will be asked to pick between **Bash**
    and **PowerShell**. The shell interface can be switched later, but they cannot
    run simultaneously:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.7: Azure Cloud Shell with PowerShell'
  prefs: []
  type: TYPE_NORMAL
- en: 'My personal preference is the **Bash** shell, which allows me to use the pre-installed
    Azure CLI and Python SDK:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18403_12_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.8: Azure AZ tool and Python in Cloud Shell'
  prefs: []
  type: TYPE_NORMAL
- en: 'Cloud Shell is very handy because it is browser-based and thus accessible from
    virtually anywhere. It is assigned per unique user account and automatically authenticated
    with each session, so we do not need to worry about generating a separate key
    for it. But since we will be using the Azure CLI quite often, let’s install a
    local copy on the management host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s also install the Azure Python SDK on our management host. Starting with
    version 5.0.0, the Azure Python SDK requires us to install service-specific packages
    listed at [https://aka.ms/azsdk/python/all](https://aka.ms/azsdk/python/all):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Azure for Python Developers page, [https://docs.microsoft.com/en-us/azure/python/](https://docs.microsoft.com/en-us/azure/python/),
    is an all-inclusive resource for getting started with Azure using Python. The
    Azure SDK for Python page, [https://learn.microsoft.com/en-us/azure/developer/python/sdk/azure-sdk-overview](https://learn.microsoft.com/en-us/azure/developer/python/sdk/azure-sdk-overview),
    provides detailed documentation on using the Python libraries for Azure resource
    management.
  prefs: []
  type: TYPE_NORMAL
- en: We are now ready to take a look at some of the service principles of Azure and
    launch our Azure services.
  prefs: []
  type: TYPE_NORMAL
- en: Azure service principals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Azure uses the concept of service principal objects for automated tools. The
    network security best practice of least privilege grants any person or tool just
    enough access to perform their job and no more. An Azure service principal restricts
    resources and the level of access based on roles. To get started, we will use
    the role automatically created for us by the Azure CLI and use the Python SDK
    to test the authentication. Use the `az` `login` command to receive a token:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Follow the URL and paste in the code you see on the command line and authenticate
    with the Azure account we created earlier:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated](img/B18403_12_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.9: Azure Cross-platform Command Line Interface'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can create the credential file in `json` format and move that to the Azure
    directory. The Azure directory was created when we installed the Azure CLI tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s secure the credential file and export it as an environment variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also export the various credentials into our environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'We will grant role access to the subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: For more information on Azure RBAC, visit [https://learn.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli](https://learn.microsoft.com/en-us/cli/azure/create-an-azure-service-principal-azure-cli).
  prefs: []
  type: TYPE_NORMAL
- en: 'If we browse to the **Access control** section in the portal (**Home -> Subscriptions
    -> Pay-As-You-Go -> Access control**), we will be able to see the newly created
    role:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.10: Azure pay-as-you-go IAM'
  prefs: []
  type: TYPE_NORMAL
- en: There are many example codes for using Python SDK to manage a network using
    the Azure Python SDK on the GitHub page, [https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/network](https://github.com/Azure-Samples/azure-samples-python-management/tree/main/samples/network).
    The *Getting Started Guide*, [https://learn.microsoft.com/en-us/samples/azure-samples/azure-samples-python-management/network/](https://learn.microsoft.com/en-us/samples/azure-samples/azure-samples-python-management/network/),
    can also be useful.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use a simple Python script, `Chapter12_1_auth.py`, to import the library
    for client authentication and network management:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'If the file executes without an error, we have successfully authenticated with
    the Python SDK client:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: While reading the Azure documentation, you may have noticed a combination of
    PowerShell and Python. In the next section, let’s briefly consider the relationship
    between Python and PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: Python versus PowerShell
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are many programming languages and frameworks that Microsoft has either
    developed from the ground up or has implemented major dialects for, including
    C#, .NET, and PowerShell. It is no surprise that .NET (with C#) and PowerShell
    are somewhat first-class citizens in Azure. In much of the Azure documentation,
    you will find direct references to PowerShell examples. There are often opinionated
    discussions on the web forums on which tool, Python or PowerShell, is better suited
    to managing Azure resources.
  prefs: []
  type: TYPE_NORMAL
- en: As of July 2019, we can also run PowerShell Core on the Linux and macOS operating
    systems in the preview release, [https://docs.microsoft.com/en-us/powershell/scripting/install/installing-powershell-core-on-linux?view=powershell-6](https://learn.microsoft.com/en-us/powershell/scripting/install/installing-powershell-on-linux?view=powershell-7.3&viewFallbackFrom=powershell-6).
  prefs: []
  type: TYPE_NORMAL
- en: We will not get into a debate on language superiority. I do not mind using PowerShell
    when required – I find it easy and intuitive – and I agree that sometimes the
    Python SDK lags behind PowerShell in implementing the latest Azure features. But
    since Python is at least part of the reason you picked up this book, we will stick
    to the Python SDK and the Azure CLI for our examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Initially, the Azure CLI was offered as PowerShell modules for Windows and
    the Node.js-based CLI for other platforms. But as the tool has grown in popularity,
    it is now a wrapper around the Azure Python SDK, as explained in this article
    on *Python.org*: [https://www.python.org/success-stories/building-an-open-source-and-cross-platform-azure-cli-with-python/](https://www.python.org/success-stories/building-an-open-source-and-cross-platform-azure-cli-with-python/).'
  prefs: []
  type: TYPE_NORMAL
- en: In the remaining sections of this chapter, when we are introducing a feature
    or concept, we will oftentimes turn to the Azure CLI for demonstration purposes.
    Rest assured that if something is available as an Azure CLI command, it is available
    in the Python SDK if we need to directly code it in Python.
  prefs: []
  type: TYPE_NORMAL
- en: Having covered Azure administration and the associated APIs, let’s move on to
    discussing Azure global infrastructure.
  prefs: []
  type: TYPE_NORMAL
- en: Azure global infrastructure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Similar to AWS, an Azure global infrastructure consists of regions, **Availability
    Zones** (**AZs**), and edge locations. At the time of writing, Azure has 60+ regions
    and more than 200+ physical data centers, as illustrated on the product page ([https://azure.microsoft.com/en-us/global-infrastructure/](https://azure.microsoft.com/en-us/global-infrastructure/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18403_12_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.11: Azure global infrastructure (source: https://azure.microsoft.com/en-us/global-infrastructure/)'
  prefs: []
  type: TYPE_NORMAL
- en: Like AWS, Azure products are offered via regions, so we need to check service
    availability and pricing based on regions. We can also build redundancy into the
    service by building the service in multiple AZs. However, unlike AWS, not all
    Azure regions have AZs, and not all Azure products support them. In fact, Azure
    did not announce the general availability of AZs until 2018, and they are only
    offered in select regions.
  prefs: []
  type: TYPE_NORMAL
- en: This is something to be aware of when picking our region. I recommend picking
    regions with AZs such as West US 2, Central US, and East US 1.
  prefs: []
  type: TYPE_NORMAL
- en: If we build in a region without AZs, we will need to replicate the service across
    different regions, typically in the same geography. We will discuss Azure geography
    next.
  prefs: []
  type: TYPE_NORMAL
- en: On the Azure global infrastructure page, the regions with Availability Zones
    are marked with a star in the middle.
  prefs: []
  type: TYPE_NORMAL
- en: Unlike AWS, Azure regions are also organized into a higher-order category of
    geographies. A geography is a discrete market, typically containing one or more
    regions. Besides lower latency and better network connectivity, replicating the
    service and data across regions in the same geography is necessary for government
    compliance. An example of replication across regions would be the regions of Germany.
    If we needed to launch services for the German market, the government mandates
    strict data sovereignty within the border, but none of the German regions have
    Availability Zones. We would need to replicate the data between different regions
    in the same geography, that is, Germany North, Germany Northeast, Germany West
    Central, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: As a rule of thumb, I typically prefer regions that have Availability Zones
    to keep things similar across different cloud providers. Once we have determined
    the region that best fits our use case, we are ready to build our VNet in Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Azure virtual networks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we wear the network engineer hat in the Azure cloud, **Azure virtual networks**
    (**VNets**) are where we spend most of our time. Similar to a traditional network
    that we would build in our data center, they are the fundamental building blocks
    for our private networks in Azure. We will use a VNet to allow our VMs to communicate
    with each other, with the internet, and with our on-premise network through a
    VPN or ExpressRoute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s begin by building our first VNet using the portal. We will start by browsing
    the **virtual network page** via **Create a Resource -> Networking -> Virtual
    network**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.12: Azure VNet'
  prefs: []
  type: TYPE_NORMAL
- en: Each VNet is scoped to a single region and we can create multiple subnets per
    VNet. As we will see later, multiple VNets in different regions can connect to
    each other via VNet peering.
  prefs: []
  type: TYPE_NORMAL
- en: 'From the VNet creation page, we will create our first network with the following
    credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is a screenshot of the necessary fields. If there are any missing fields
    that are required, they will be highlighted in red. Click on **Create** when finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.13: Azure VNet creation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the resource is created, we can navigate to it via **Home -> Resource
    groups -> Mastering-Python-Networking**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.14: Azure VNet overview'
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations, we just created our first VNet in the Azure cloud! Our network
    needs to communicate with the outside world to be useful. We will look at how
    we can do that in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Internet access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By default, all resources within a VNet can carry out outbound communication
    with the internet; we do not need to add a NAT gateway as we do in AWS. For inbound
    communication, we will need to assign a public IP directly to the VM or use a
    load balancer with a public IP. To see this working, we will create VMs within
    our network.
  prefs: []
  type: TYPE_NORMAL
- en: We can create our first VM from **Home -> Resource groups -> Mastering-Python-Networking
    -> New -> Create a virtual machine:**
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.15: Azure creating a VM'
  prefs: []
  type: TYPE_NORMAL
- en: 'I will pick **Ubuntu Server 22.04 LTS** as the VM and use the name `myMPN-VM1`
    when prompted. I will pick the region `West US 2`. We can choose password authentication
    or an SSH public key as the authentication method and allow an SSH inbound connection.
    Since we are using it for testing, we can pick the smallest instance in the B-Series
    to minimize our cost:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.16: Azure compute B-Series'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can leave the other options as their default settings, pick a small disk
    size, and check **delete with VM**. We will put the VM into the subnet that we
    created, as well as assigning a new public IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.17: Azure network interface'
  prefs: []
  type: TYPE_NORMAL
- en: After the VM is provisioned, we can `ssh` to the machine with the public IP
    and the user we created. The VM has only one interface that is within our private
    subnet; it is also mapped to the public IP that Azure automatically assigned.
    This public-to-private IP translation is done automatically by Azure.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can repeat the same process to create a second VM named `myMPN-VM2`. The
    VM can be configured with `SSH` inbound access but no public IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.18: Azure VM IP addresses'
  prefs: []
  type: TYPE_NORMAL
- en: 'After the VM creation, we can `ssh` to `myMPN-VM2` from `myMPN-VM1` with the
    private IP:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We can test the internet connection by trying to access the `apt` package update
    repositories:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: With our VM inside of VNet able to access the internet, we can create additional
    network resources for our network.
  prefs: []
  type: TYPE_NORMAL
- en: Network resource creation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at an example of using the Python SDK to create network resources.
    In the following example, `Chapter12_2_network_resources.py`, we will use the
    `subnet.create_or_update` API to create a new `192.168.0.128/25` subnet in the
    VNet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We will receive the following creation result message when we execute the script:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The new subnet can also be seen on the portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.19: Azure VNet subnets'
  prefs: []
  type: TYPE_NORMAL
- en: For more examples of using the Python SDK, check out [https://github.com/Azure-Samples/azure-samples-python-management](https://github.com/Azure-Samples/azure-samples-python-management).
  prefs: []
  type: TYPE_NORMAL
- en: If we create a VM within the new subnet, even across subnet boundaries, the
    hosts in the same VNet can reach each other with the same implicit router we saw
    with AWS.
  prefs: []
  type: TYPE_NORMAL
- en: There are additional VNet services available to us when we need to interact
    with other Azure services. Let’s take a look.
  prefs: []
  type: TYPE_NORMAL
- en: VNet service endpoints
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VNet service endpoints can extend the VNet to other Azure services over a direct
    connection. This allows traffic from the VNet to the Azure service to remain on
    the Azure network. Service endpoints need to be configured with an identified
    service within the region of the VNet.
  prefs: []
  type: TYPE_NORMAL
- en: 'They can be configured via the portal with restrictions to the service and
    subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18403_12_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.20: Azure service endpoints'
  prefs: []
  type: TYPE_NORMAL
- en: Strictly speaking, we do not need to create VNet service endpoints when we need
    to have the VMs in the VNet communicate with the service. Each VM can access the
    service through the public IP mapped, and we can use network rules to permit only
    the necessary IPs. However, using the VNet service endpoints allows us to access
    the resources using the private IP within Azure without the traffic traversing
    the public internet.
  prefs: []
  type: TYPE_NORMAL
- en: VNet peering
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As mentioned at the beginning of the section, each VNet is limited to a region.
    For region-to-region VNet connectivity, we can leverage VNet peering. Let’s use
    the following two functions in `Chapter11_3_vnet.py` to create a VNet in the `US-East`
    region:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: To allow VNet peering, we need to peer bi-directionally from both VNets. Since
    we have been using the Python SDK up to this point, for learning purposes, let’s
    look at an example with the Azure CLI.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will grab the VNet name and ID from the `az network vnet list` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s check the existing VNet peering for our `West US 2` VNet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'We will execute the peering from the `West US` to `East US` VNet, then repeat
    in the reverse direction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Now if we run the check again, we will be able to see the VNet successfully
    peered:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also verify the peering on the Azure portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.21: Azure VNet peering'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have several hosts, subnets, VNets, and VNet peering in our setup,
    we should look at how routing is done in Azure. That is what we will do in the
    next section.
  prefs: []
  type: TYPE_NORMAL
- en: VNet routing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As a network engineer, implicit routes added by the cloud provider have always
    been a bit uncomfortable for me. In traditional networking, we need to cable up
    the network, assign IP addresses, configure routing, implement security, and make
    sure everything works. It can sometimes be complex, but every packet and route
    is accounted for. For virtual networks in the cloud, the underlay network is already
    completed by Azure and some network configuration on the overlay network needs
    to happen automatically for the host to work at launch time, as we saw earlier.
  prefs: []
  type: TYPE_NORMAL
- en: Azure VNet routing is a bit different from AWS. In the AWS chapter, we saw the
    routing table implemented at the VPC network layer. But if we browse to the Azure
    VNet setting on the portal, we will not find a routing table assigned to the VNet.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we drill deeper into the **subnet setting**, we will see a routing table
    drop-down menu, but the value it is displaying is **None**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_12_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.22: Azure subnet routing table'
  prefs: []
  type: TYPE_NORMAL
- en: 'How can we have an empty routing table with the hosts in that subnet able to
    reach the internet? Where can we see the routes configured by Azure VNet? The
    routing has been implemented at the host and NIC levels. We can see it via **All
    services -> Virtual Machines -> myNPM-VM1 -> Networking (left panel) -> Topology
    (top panel)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B18403_12_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.23: Azure network topology'
  prefs: []
  type: TYPE_NORMAL
- en: The network is being shown on the NIC level with each NIC attached to a VNet
    subnet on the north side and other resources such as VM, **Network Security Group**
    (**NSG**), and IP on the south side. The resources are dynamic; at the time of
    the screen capture, I only had `myMPN-VM1` running, therefore it is the only one
    with a VM and IP address attached, while the other VMs only have NSGs attached.
  prefs: []
  type: TYPE_NORMAL
- en: We will cover NSG in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we click on the NIC, **mympn-vm1655** in our topology, we can see the settings
    associated with the NIC. Under the **Support + troubleshooting** section, we will
    find the **Effective routes** link, where we can see the current routing associated
    with the NIC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, table  Description automatically generated](img/B18403_12_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.24: Azure VNet effective routes'
  prefs: []
  type: TYPE_NORMAL
- en: 'If we want to automate the process, we can use the Azure CLI to find the NIC
    name and then show the routing table:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! That was one mystery solved, but what are those next hops in the routing
    table? We can reference the VNet traffic routing document: [https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-networks-udr-overview).
    A few important notes:'
  prefs: []
  type: TYPE_NORMAL
- en: If the source indicates that the route is **Default**, these are system routes
    that cannot be removed but can be overwritten with custom routes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: VNet next hops are the routes within the custom VNet. In our case, this is the
    `192.168.0.0/23` network, not just the subnet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Traffic routed to the **None** next hop type is dropped, similar to the **Null**
    interface routes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **VNetGlobalPeering** next hop type is what was created when we established
    VNet peering with other VNets.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **VirtualNetworkServiceEndpoint** next hop type was created when we enabled
    service endpoints in our VNet. The public IP is managed by Azure and changes from
    time to time.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How do we override the default routes? We can create a route table and associate
    it with subnets. Azure selects the routes with the following priority:'
  prefs: []
  type: TYPE_NORMAL
- en: User-defined route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: BGP route (from a Site-to-Site VPN or ExpressRoute)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: System route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can create a route table in the **Networking** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.25: Azure VNet route tables'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create a route table, create a route within the table, and associate
    the route table with a subnet via the Azure CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at the primary security measure in VNet: NSGs.'
  prefs: []
  type: TYPE_NORMAL
- en: Network security groups
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VNet security is primarily implemented by NSGs. Just like traditional access
    lists or firewall rules, we need to think of network security rules in a single
    direction at a time. For example, if we want to have host `A`, in `subnet 1` communicate
    freely with host `B` in `subnet 2` over port `80`, we need to implement the necessary
    rules for both inbound and outbound directions for both hosts.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw from previous examples, an NSG can be associated with the NIC or the
    subnet, so we also need to think in terms of security layers. Generally speaking,
    we should implement the more restrictive rules at the host level while the more
    relaxed rules are applied at the subnet level. This is similar to traditional
    networking.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we created our VMs, we set a permit rule for SSH TCP port `22` inbound.
    Let’s take a look at the security group that was created for our first VM, **myMPN-VM1-nsg**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.26: Azure VNet NSG'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few things worth pointing out:'
  prefs: []
  type: TYPE_NORMAL
- en: The priority level of system-implemented rules is high, at 65,000 and above.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, virtual networks can freely communicate with each other in both
    directions.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, internal hosts are allowed internet access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s implement an inbound rule on the existing NSG group from the portal:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_12_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.27: Azure security rule'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create a new security group and rules via the Azure CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'We can see the new rules that were created as well as the default rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_28.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.28: Azure security rules'
  prefs: []
  type: TYPE_NORMAL
- en: 'The last step would be to bind this NSG to a subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'In the next two sections, we will look at the two primary ways to extend Azure
    virtual networks to our on-premises data center: Azure VPN and Azure ExpressRoute.'
  prefs: []
  type: TYPE_NORMAL
- en: Azure VPNs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As the network continues to grow, there might come a time when we need to connect
    the Azure VNet to our on-premise location. A VPN gateway is a type of VNet gateway
    that can encrypt the traffic between a VNet and our on-premise network and remote
    clients. Each VNet can only have one VPN gateway, but multiple connections can
    be built on the same VPN gateway.
  prefs: []
  type: TYPE_NORMAL
- en: 'More information about Azure VPN gateways can be found at this link: [https://docs.microsoft.com/en-us/azure/vpn-gateway/](https://docs.microsoft.com/en-us/azure/vpn-gateway/).'
  prefs: []
  type: TYPE_NORMAL
- en: 'VPN gateways are actually VMs themselves, configured with encryption and routing
    services, but cannot be directly configured by the user. Azure provides a list
    of SKUs based on the type of tunnel, number of concurrent connections, and total
    throughput ([https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-gateway-settings#gwsku](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-gateway-settings#gwsku)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_29.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.29: Azure VPN gateway SKUs (source: https://docs.microsoft.com/en-us/azure/vpn-gateway/point-to-site-about)'
  prefs: []
  type: TYPE_NORMAL
- en: 'As we can see from the preceding table, the Azure VPN is divided into two different
    categories: **Point-to-Site (P2S)** VPN and **Site-to-Site (S2S)** VPN. The P2S
    VPN allows secure connections from an individual client computer, mainly used
    by telecommuters. The encryption method can be SSTP, IKEv2, or OpenVPN connection.
    When picking the type of VPN Gateway SKU for P2S, we will want to focus on the
    second and third columns on the SKU chart for the number of connections.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For a client-based VPN, we can use either SSTP or IKEv2 as the tunneling protocol:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_12_30.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.30: Azure Site-to-Site VPN gateway (source: https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpngateways)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides client-based VPNs, another type of VPN connection is a Site-to-Site
    or multi-site VPN connection. The encryption method will be IPSec over IKE and
    a public IP will be required for both Azure and the on-premise network, as illustrated
    by the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated with medium confidence](img/B18403_12_31.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.31: Azure client VPN gateway (source: https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpngateways)'
  prefs: []
  type: TYPE_NORMAL
- en: A full example of creating an S2S or P2S VPN is more than what we can cover
    in this section. Azure provides tutorials for S2S ([https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal)),
    as well as P2S VPN ([https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-howto-site-to-site-resource-manager-portal)).
  prefs: []
  type: TYPE_NORMAL
- en: 'The steps are pretty straightforward for engineers who have configured VPN
    services before. The only point that may be a bit confusing and is not called
    out in the document is the fact that the VPN gateway device should live in a dedicated
    gateway subnet within the VNet with a `/27` IP block assigned:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_12_32.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.32: Azure VPN gateway subnet'
  prefs: []
  type: TYPE_NORMAL
- en: A growing list of validated Azure VPN devices can be found at [https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-devices](https://docs.microsoft.com/en-us/azure/vpn-gateway/vpn-gateway-about-vpn-devices),
    with links to their respective configuration guides.
  prefs: []
  type: TYPE_NORMAL
- en: Azure ExpressRoute
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When organizations need to extend an Azure VNet to on-premises sites, it makes
    sense to start with a VPN connection. However, as the connection takes on more
    mission-critical traffic, the organization might want a more stable and reliable
    connection. Similar to AWS Direct Connect, Azure offers ExpressRoute as a private
    connection facilitated by a connectivity provider. As we can see from the diagram,
    our network is connected to Azure’s partner edge network before it is transitioned
    to Azure’s edge network:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_12_33.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.33: Azure ExpressRoute circuits (source: https://docs.microsoft.com/en-us/azure/expressroute/expressroute-introduction)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The advantages of ExpressRoute include:'
  prefs: []
  type: TYPE_NORMAL
- en: More reliable since it does not traverse through the public internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A faster connection with lower latency since a private connection is likely
    to have fewer hops between on-premise equipment to Azure.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Better security measures since it is a private connection, especially if a company
    relies on Microsoft services such as Office 365.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The disadvantages of ExpressRoute can be:'
  prefs: []
  type: TYPE_NORMAL
- en: More difficulty setting up, both in terms of business and technical requirements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Higher cost commitment upfront, since the port charge and connection charges
    are often fixed. Some of the costs can be offset by a reduction in internet costs
    if it replaces a VPN connection. However, the total cost of ownership is typically
    higher with ExpressRoute.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A more detailed overview of ExpressRoute can be found at [https://docs.microsoft.com/en-us/azure/expressroute/expressroute-introduction](https://docs.microsoft.com/en-us/azure/expressroute/expressroute-introduction).
    One of the biggest differences from AWS Direct Connect is the fact that ExpressRoute
    can offer connections across regions in geography. There is also a premium add-on
    that allows global connectivity to Microsoft services as well as QoS support for
    Skype for Business.
  prefs: []
  type: TYPE_NORMAL
- en: Similar to Direct Connect, ExpressRoute requires the user to connect to Azure
    with a partner or meet Azure at a certain designated location with ExpressRoute
    Direct (yes, the term is confusing). This is typically the biggest hurdle for
    enterprises to get over since they will need to either build their data center
    at one of the Azure locations, connect with a carrier (MPLS VPN), or work with
    a broker as a go-between for connection. These options typically require business
    contracts, longer-term commitments, and committed monthly costs.
  prefs: []
  type: TYPE_NORMAL
- en: To start, my recommendation would be similar to in *Chapter 11*, *AWS Cloud
    Networking*, which is to use an existing carrier broker for connection to a carrier
    hotel. From the carrier hotel, either directly connect to Azure or use an intermediary
    such as Equinix FABRIC ([https://www.equinix.com/interconnection-services/equinix-fabric](https://www.equinix.com/interconnection-services/equinix-fabric)
    ).
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will look at how we can distribute incoming traffic
    efficiently when our service grows beyond just a single server.
  prefs: []
  type: TYPE_NORMAL
- en: Azure network load balancers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Azure offers load balancers in both the basic and standard SKU. When we discuss
    the load balancer in this section, we are referring to the Layer 4 TCP and UDP
    load distribution service instead of the Application Gateway Load Balancer ([https://azure.microsoft.com/en-us/services/application-gateway/](https://azure.microsoft.com/en-us/services/application-gateway/)),
    which is a layer-7 load-balancing solution.
  prefs: []
  type: TYPE_NORMAL
- en: 'The typical deployment model is usually a one- or two-layer load distribution
    for an inbound connection from the internet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_12_34.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 12.34: Azure Load Balancer (source: https://docs.microsoft.com/en-us/azure/load-balancer/load-balancer-overview)'
  prefs: []
  type: TYPE_NORMAL
- en: The load balancer hashes the incoming connection on a 5-tuple hash (source and
    destination IP, source and destination port, and protocol) and distributes the
    flow to one or more destinations. The Standard Load Balancer SKU is a superset
    of the basic SKU, therefore new designs should adopt the Standard Load Balancer.
  prefs: []
  type: TYPE_NORMAL
- en: As with AWS, Azure is constantly innovating with new network services. We have
    covered the foundational services in this chapter; let’s take a look at some of
    the other notable services.
  prefs: []
  type: TYPE_NORMAL
- en: Other Azure network services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Some of the other Azure network services that we should be aware of are:'
  prefs: []
  type: TYPE_NORMAL
- en: '**DNS services**: Azure has a suite of DNS services ([https://docs.microsoft.com/en-us/azure/dns/dns-overview](https://docs.microsoft.com/en-us/azure/dns/dns-overview)),
    both public and private. It can be used for geographical load balancing for network
    services.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Container networking**: Azure has been making a push toward containers in
    recent years. More information about Azure network capabilities for containers
    can be found at [https://docs.microsoft.com/en-us/azure/virtual-network/container-networking-overview](https://docs.microsoft.com/en-us/azure/virtual-network/container-networking-overview).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**VNet TAP**: Azure VNet TAP allows you to continuously stream your VM network
    traffic to a network packet collector or analytical tool ([https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-tap-overview](https://docs.microsoft.com/en-us/azure/virtual-network/virtual-network-tap-overview)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Distributed Denial of Service Protection**: Azure DDoS protection provides
    defense against DDoS attacks ([https://docs.microsoft.com/en-us/azure/virtual-network/ddos-protection-overview](https://docs.microsoft.com/en-us/azure/virtual-network/ddos-protection-overview)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Azure network services are a big part of the Azure cloud family and continue
    to grow at a fast rate. We have only covered a portion of the services in this
    chapter, but hopefully, it has given you a good foundation from which to begin
    to explore other services.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we took a look at the various Azure cloud network services.
    We discussed the Azure global network and various aspects of virtual networks.
    We used both the Azure CLI and the Python SDK to create, update, and manage those
    network services. When we need to extend Azure services to an on-premise data
    center, we can use either VPN or ExpressRoute for connectivity. We also briefly
    looked at various Azure network products and services.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next chapter, we will revisit the data analysis pipeline with an all-in-one
    stack: the Elastic Stack.'
  prefs: []
  type: TYPE_NORMAL
- en: Join our book community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join our community for this book – where you can share feedback, ask questions
    to the author, and learn about new releases – follow the QR code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/networkautomationcommunity](https://packt.link/networkautomationcommunity)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2903617220506617062.png)'
  prefs: []
  type: TYPE_IMG
