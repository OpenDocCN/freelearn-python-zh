["```py\nfrom threading import Thread\nimport time\ndef t1(): # A thread that emulates data receiving\n    while True:\n        print('Receive data')\n        time.sleep(1)\ndef t2(): # A thread that emulates trading logic\n    while True:\n        print('Trading logic')\n        time.sleep(1)\ndef t3(): # A thread that emulates order execution\n    while True:\n        print('Processing orders')\n        time.sleep(1)\nthread1 = Thread(target=t1)\nthread2 = Thread(target=t2)\nthread3 = Thread(target=t3)\nthread1.start()\nthread2.start()\nthread3.start()\n```", "```py\nReceive data\nTrading logic\nProcessing orders\nReceive dataProcessing orders\nTrading logic\nProcessing ordersReceive data\nTrading logic\nProcessing orders\nReceive data\nTrading logic\nTrading logic\nProcessing orders\nReceive data\nTrading logicProcessing orders\nReceive data\nProcessing ordersReceive data\nTrading logic\n```", "```py\nimport json\nimport threading\nimport queue\nfrom datetime import datetime\nfrom websocket import create_connection\n```", "```py\nclass tradingSystemMetadata:\n    def __init__(self):\n        self.initial_capital = 10000\n        self.leverage = 30\n        self.market_position = 0\n        self.equity = 0\n        self.last_price = 0\n        self.equity_timeseries = []\n```", "```py\ntick_feed_0 = queue.Queue()\ntick_feed_1 = queue.Queue()\ntick_feed_2 = queue.Queue()\n```", "```py\nbar_feed = queue.Queue()\norders_stream = queue.Queue()\nSystem = tradingSystemMetadata()\nurl = \"wss://public-data-api.london-demo.lmax.com/v1/web-socket\"\nsubscription_msg = '{\"type\": \"SUBSCRIBE\",\"channels\": [{\"name\": \"ORDER_BOOK\",\"instruments\": [\"eur-usd\"]}]}'\n```", "```py\ndef LMAX_connect(url, subscription_msg):\n    ws = create_connection(url)\n    ws.send(subscription_msg)\n    while True:\n        tick = json.loads(ws.recv())\n```", "```py\n        if 'instrument_id' in tick.keys():\n            bid = float(tick['bids'][0]['price'])\n            ask = float(tick['asks'][0]['price'])\n            if ask - bid < 0.001:\n        tick_feed_0.put(tick)\n```", "```py\ndata_resolution = 10\ndef getBarRealtime(resolution):\n    last_sample_ts = datetime.now()\n    bar = {'Open': 0, 'High': 0, 'Low': 0, 'Close': 0}\n    while True:\n        tick = tick_feed_0.get(block=True)\n        if 'instrument_id' in tick.keys():\n            ts = datetime.strptime(tick['timestamp'], \"%Y-%m-%dT%H:%M:%S.%fZ\")\n            bid = float(tick['bids'][0]['price'])\n            delta = ts - last_sample_ts\n            bar['High'] = max([bar['High'], bid])\n            bar['Low'] = min([bar['Low'], bid])\n            bar['Close'] = bid\n```", "```py\n        if delta.seconds >= resolution - 1:\n            if bar['Open'] != 0:\n                bar_feed.put(bar)\n                last_sample_ts = ts\n                bar = {'Open': bid, 'High': bid, 'Low': bid, 'Close': bid}\n        tick_feed_1.put(tick)\n```", "```py\ndef tradeLogic():\n    while True:\n        tick = tick_feed_1.get()\n        try:\n            bar = bar_feed.get(block=False)\n            print('Got bar: ', bar)\n```", "```py\n            ####################################\n            #      trade logic starts here      #\n            ####################################\n            open = bar['Open']\n            close = bar['Close']\n            if close > open and System.market_position >= 0:\n```", "```py\n                order = {}\n                order['Type'] = 'Market'\n                order['Price'] = close\n                order['Side'] = 'Sell'\n```", "```py\n                if System.market_position == 0:\n                    order['Size'] = 10000\n                else:\n                    order['Size'] = 20000\n```", "```py\n                orders_stream.put(order)\n                print(order) # added for testing\n```", "```py\n            if close < open and System.market_position <= 0:\n                order = {}\n                order['Type'] = 'Market'\n                order['Price'] = close\n                order['Side'] = 'Buy'\n                if System.market_position == 0:\n                    order['Size'] = 10000\n                else:\n                    order['Size'] = 20000\n                orders_stream.put(order)\n                print(order)\n            ####################################\n            #      trade logic ends here      #\n            ####################################\n        except:\n            pass\n        tick_feed_2.put(tick)\n```", "```py\ndef processOrders():\n    while True:\n        tick = tick_feed_2.get(block = True)\n        current_price = float(tick['bids'][0]['price'])\n```", "```py\n        System.equity += (current_price - System.last_price) * System.market_position\n        System.equity_timeseries.append(System.equity)\n        System.last_price = current_price\n        print(tick['timestamp'], current_price, System.equity) # for testing purposes\n```", "```py\n        while True:\n            try:\n                order = orders_stream.get(block = False)\n```", "```py\n                available_funds = (System.initial_capital + System.equity) * System.leverage - System.market_position / System.leverage\n```", "```py\n                if order['Size'] < available_funds:\n                    emulateBrokerExecution(tick, order)\n```", "```py\n                if order['Status'] == 'Executed':\n                    System.last_price = order['Executed Price']\n                    print('Executed at ', str(System.last_price), 'current price = ', str(current_price), 'order price = ', str(order['Executed Price']))\n                    if order['Side'] == 'Buy':\n                        System.market_position = System.market_position + order['Size']\n                    if order['Side'] == 'Sell':\n                        System.market_position = System.market_position – order['Size']\n```", "```py\n                elif order['Status'] == 'Rejected':\n                    orders_stream.put(order)\n```", "```py\n            except:\n                order = 'No order'\n                break\n```", "```py\ndef emulateBrokerExecution(tick, order):\n    if order['Type'] == 'Market':\n        if order['Side'] == 'Buy':\n```", "```py\n            current_liquidity = float(tick['asks'][0]['quantity'])\n```", "```py\n            price = float(tick['asks'][0]['price'])\n            if order['Size'] <= current_liquidity:\n                order['Executed Price'] = price\n                order['Status'] = 'Executed'\n            else:\n                order['Status'] = 'Rejected'\n        if order['Side'] == 'Sell':\n            current_liquidity = float(tick['bids'][0]['quantity'])\n            if order['Size'] <= current_liquidity:\n                order['Executed Price'] = price\n                order['Status'] = 'Executed'\n            else:\n                order['Status'] = 'Rejected'\n```", "```py\ndata_receiver_thread = threading.Thread(target = LMAX_connect, args = (url, subscription_msg))\nincoming_price_thread = threading.Thread(target = getBarRealtime, args = (data_resolution,))\ntrading_thread = threading.Thread(target = tradeLogic)\nordering_thread = threading.Thread(target = processOrders)\ndata_receiver_thread.start()\nincoming_price_thread.start()\ntrading_thread.start()\n```", "```py\n2022-12-12T12:03:20.000Z 1.05658 0.0\n... (7 ticks omitted from output to save space)\n2022-12-12T12:03:28.000Z 1.05664 0.0\n```", "```py\nGot bar:  {'Open': 1.05658, 'High': 1.05668, 'Low': 1.05658, 'Close': 1.05666}\n```", "```py\n{'Type': 'Market', 'Price': 1.05666, 'Side': 'Sell', 'Size': 10000}\n```", "```py\n2022-12-12T12:03:29.000Z 1.05666 0.0\n```", "```py\nExecuted at  1.05666 current price =  1.05666 order price =  1.05666\n```", "```py\n2022-12-12T12:03:30.000Z 1.05663 0.2999999999997449\n... (7 ticks omitted from output to save space)\nGot bar:  {'Open': 1.05666, 'High': 1.05666, 'Low': 1.05663, 'Close': 1.05665}\n```", "```py\n{'Type': 'Market', 'Price': 1.05665, 'Side': 'Buy', 'Size': 20000}\n```", "```py\n2022-12-12T12:03:38.000Z 1.05665 0.09999999999843467\n```", "```py\nExecuted at  1.05672 current price =  1.05665 order price =  1.05672\n```", "```py\nf1, f2, f3 = threading.Event(), threading.Event(), threading.Event()\n```", "```py\ndef t1():\n    while True:\n        print('Receive data')\n        time.sleep(1)\n        f1.clear()\n        f2.set()\n        f1.wait()\n```", "```py\ndef t2():\n    while True:\n        print('Trading logic')\n        time.sleep(1)\n        f2.clear()\n        f3.set()\n        f2.wait()\ndef t3():\n    while True:\n        print('Processing orders')\n        time.sleep(1)\n        f3.clear()\n        f1.set()\n        f3.wait()\nthread1 = threading.Thread(target=t1)\nthread2 = threading.Thread(target=t2)\nthread3 = threading.Thread(target=t3)\nthread1.start()\nthread2.start()\nthread3.start()\n```", "```py\nTrading logic\nProcessing orders\nReceive data\nTrading logic\nProcessing orders\nReceive data\nTrading logic\nProcessing orders\nReceive data\n```", "```py\nimport csv\nimport threading\nimport queue\nimport time\nfrom datetime import datetime\n```", "```py\nclass tradingSystemMetadata:\n    def __init__(self):\n        self.initial_capital = 10000\n        self.leverage = 30\n        self.market_position = 0\n        self.equity = 0\n        self.last_price = 0\n        self.equity_timeseries = []\n        self.F1, self.F2, self.F3 = threading.Event(), threading.Event(), threading.Event()\n```", "```py\nbar_feed = queue.Queue()\norders_stream = queue.Queue()\n```", "```py\nSystem = tradingSystemMetadata()\nstart_time = time.perf_counter()\nf = open(\"<your_file_path>/LMAX EUR_USD 1 Minute.txt\")\ncsvFile = csv.DictReader(f)\nall_data = list(csvFile)\nend_time = time.perf_counter()\nprint(f'Data read in {round(end_time - start_time, 0)} second(s).')\n```", "```py\ndef getBar():\n    counter = 0\n    for bar in all_data:\n        bar['Open'] = float(bar['Open'])\n        bar['High'] = float(bar['High'])\n        bar['Low'] = float(bar['Low'])\n        bar['Close'] = float(bar['Close'])\n        bar_feed.put(bar)\n        counter += 1\n        if counter == 10:\n            break\n        System.F1.clear()\n        System.F2.set()\n        System.F1.wait()\n    print('Finished reading data')\n```", "```py\ndef tradeLogic():\n    while True:\n        try:\n            bar = bar_feed.get(block=True, timeout=1)\n        except:\n            break\n        ####################################\n        #     trade logic starts here      #\n        ####################################\n        ####################################\n        #       trade logic ends here      #\n        ####################################\n        bar_feed.put(bar)\n        System.F2.clear()\n        System.F3.set()\n        System.F2.wait()\n```", "```py\ndef emulateBrokerExecution(bar, order):\n    if order['Type'] == 'Market':\n        order['Status'] = 'Executed'\n        if order['Side'] == 'Buy':\n            order['Executed Price'] = bar['Close']\n        if order['Side'] == 'Sell':\n            order['Executed Price'] = bar['Close']\n```", "```py\ndef processOrders():\n    while True:\n        try:\n            bar = bar_feed.get(block = True, timeout = 1)\n        except:\n            break\n```", "```py\n        System.equity += (bar['Close'] - System.last_price) * System.market_position\n        System.equity_timeseries.append(System.equity)\n        System.last_price = bar['Close']\n```", "```py\n        while True:\n            try:\n                order = orders_stream.get(block = False)\n                emulateBrokerExecution(bar, order)\n                if order['Status'] == 'Executed':\n                    System.last_price = order['Executed Price']\n                    if order['Side'] == 'Buy':\n                        System.market_position = System.market_position + order['Size']\n                    if order['Side'] == 'Sell':\n                        System.market_position = System.market_position - order['Size']\n            except:\n                order = 'No order'\n                break\n        System.F3.clear()\n        System.F1.set()\n        System.F3.wait()\n```", "```py\nstart_time = time.perf_counter()\nincoming_price_thread = threading.Thread(target = getBar)\ntrading_thread = threading.Thread(target = tradeLogic)\nordering_thread = threading.Thread(target = processOrders)\nincoming_price_thread.start()\ntrading_thread.start()\nordering_thread.start()\n```", "```py\nwhile True:\n    if incoming_price_thread.is_alive():\n        time.sleep(1)\n    else:\n        end_time = time.perf_counter()\n        print(f'Backtest complete in {round(end_time - start_time, 0)} second(s).')\n        plt.plot(System.equity_timeseries)\n        plt.show()\n        break\n```", "```py\n        if order['Side'] == 'Buy':\n            order['Executed Price'] = bar['Close'] + 0.00005\n```"]