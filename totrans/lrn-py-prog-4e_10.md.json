["```py\n# data.py\ndef get_clean_data(source):\n    data = load_data(source)\n    cleaned_data = clean_data(data)\n    return cleaned_data \n```", "```py\n# api.py\nfrom pathlib import Path\nimport csv\nfrom copy import deepcopy\nfrom marshmallow import Schema, fields, pre_load\nfrom marshmallow.validate import Length, Range\nclass UserSchema(Schema):\n    \"\"\"Represent a *valid* user.\"\"\"\n    email = fields.Email(required=True)\n    name = fields.Str(required=True, validate=Length(min=1))\n    age = fields.Int(\n        required=True, validate=Range(min=18, max=65)\n    )\n    role = fields.Str()\n    @pre_load()\n    def strip_name(self, data, **kwargs):\n        data_copy = deepcopy(data)\n        try:\n            data_copy[\"name\"] = data_copy[\"name\"].strip()\n        except (AttributeError, KeyError, TypeError):\n            pass\n        return data_copy\nschema = UserSchema() \n```", "```py\n# api.py\ndef export(filename, users, overwrite=True):\n    \"\"\"Export a CSV file.\n    Create a CSV file and fill with valid users.  If `overwrite`\n    is False and file already exists, raise IOError.\n    \"\"\"\n    if not overwrite and Path(filename).is_file():\n        raise IOError(f\"'{filename}' already exists.\")\n    valid_users = get_valid_users(users)\n    write_csv(filename, valid_users) \n```", "```py\n# api.py\ndef get_valid_users(users):\n    \"\"\"Yield one valid user at a time from users.\"\"\"\n    yield from filter(is_valid, users)\ndef is_valid(user):\n    \"\"\"Tell if the user is valid.\"\"\"\n    return not schema.validate(user) \n```", "```py\n# api.py\ndef write_csv(filename, users):\n    \"\"\"Write a CSV given a filename and a list of users.\n    The users are assumed to be valid for the given CSV structure.\n    \"\"\"\n    fieldnames = [\"email\", \"name\", \"age\", \"role\"]\n    with open(filename, \"w\", newline=\"\") as csvfile:\n        writer = csv.DictWriter(csvfile, fieldnames=fieldnames)\n        writer.writeheader()\n        writer.writerows(users) \n```", "```py\n# tests/test_api.py\nimport re\nfrom unittest.mock import patch, mock_open, call\nimport pytest\nfrom api import is_valid, export, write_csv \n```", "```py\n# tests/test_api.py\n@pytest.fixture\ndef min_user():\n    \"\"\"Represent a valid user with minimal data.\"\"\"\n    return {\n        \"email\": \"minimal@example.com\",\n        \"name\": \"Primus Minimus\",\n        \"age\": 18,\n    }\n@pytest.fixture\ndef full_user():\n    \"\"\"Represent valid user with full data.\"\"\"\n    return {\n        \"email\": \"full@example.com\",\n        \"name\": \"Maximus Plenus\",\n        \"age\": 65,\n        \"role\": \"emperor\",\n    } \n```", "```py\n# tests/test_api.py\n@pytest.fixture\ndef users(min_user, full_user):\n    \"\"\"List of users, two valid and one invalid.\"\"\"\n    bad_user = {\n        \"email\": \"invalid@example.com\",\n        \"name\": \"Horribilis\",\n    }\n    return [min_user, bad_user, full_user] \n```", "```py\n# tests/test_api.py\nclass TestIsValid:\n    \"\"\"Test how code verifies whether a user is valid or not.\"\"\"\n    def test_minimal(self, min_user):\n        assert is_valid(min_user)\n    def test_full(self, full_user):\n        assert is_valid(full_user) \n```", "```py\n$ pytest tests -vv\n===================== test session starts =====================\nplatform darwin -- Python 3.12.2, pytest-8.1.1, pluggy-1.4.0 --\n  /Users/fab/.virtualenvs/lpp4ed-ch10/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/fab/code/lpp4ed\nconfigfile: pyproject.toml\ncollected 2 items\ntests/test_api.py::TestIsValid::test_minimal PASSED      [ 50%]\ntests/test_api.py::TestIsValid::test_full PASSED         [100%]\n====================== 2 passed in 0.03s ====================== \n```", "```py\n$ pytest tests -vv\n===================== test session starts =====================\nplatform darwin -- Python 3.12.2, pytest-8.1.1, pluggy-1.4.0 --\n/Users/fab/.virtualenvs/lpp4ed-ch10/bin/python\ncachedir: .pytest_cache\nrootdir: /Users/fab/code/lpp4ed\nconfigfile: pyproject.toml\ncollected 2 items\ntests/test_api.py::TestIsValid::test_minimal FAILED     [ 50%]\ntests/test_api.py::TestIsValid::test_full PASSED        [100%]\n=========================== FAILURES ==========================\n___________________ TestIsValid.test_minimal __________________\nself = <ch10.tests.test_api.TestIsValid object at 0x103603920>,\n       min_user = {'age': 18, 'email': 'minimal@example.com'}\n    def test_minimal(self, min_user):\n>       assert is_valid(min_user)\nE       AssertionError: assert False\nE        +  where False = is_valid(\n                {'age': 18, 'email': 'minimal@example.com'}\n            )\ntests/test_api.py:45: AssertionError\n=================== short test summary info ===================\nFAILED tests/test_api.py::TestIsValid::test_minimal\n       - AssertionError: assert False\n================= 1 failed, 1 passed in 0.04s ================= \n```", "```py\n# tests/test_api.py\nclass TestIsValid:\n    …\n    **@pytest.mark.parametrize(****\"age\"****,** **range****(****18****)****)**\n    def test_invalid_age_too_young(self, **age**, min_user):\n        min_user[\"age\"] = age\n        assert not is_valid(min_user) \n```", "```py\n# tests/test_api.py\nclass TestIsValid:\n    ...\n    @pytest.mark.parametrize(\"age\", range(66, 100))\n    def test_invalid_age_too_old(self, age, min_user):\n        min_user[\"age\"] = age\n        assert not is_valid(min_user)\n    @pytest.mark.parametrize(\"age\", [\"NaN\", 3.1415, None])\n    def test_invalid_age_wrong_type(self, age, min_user):\n        min_user[\"age\"] = age\n        assert not is_valid(min_user) \n```", "```py\n# tests/test_api.py\nclass TestIsValid:\n    ...\n    @pytest.mark.parametrize(\"age\", range(18, 66))\n    def test_valid_age(self, age, min_user):\n        min_user[\"age\"] = age\n        assert is_valid(min_user) \n```", "```py\n# tests/test_api.py\nclass TestIsValid:\n    ...\n    @pytest.mark.parametrize(\"field\", [\"email\", \"name\", \"age\"])\n    def test_mandatory_fields(self, field, min_user):\n        del min_user[field]\n        assert not is_valid(min_user)\n    @pytest.mark.parametrize(\"field\", [\"email\", \"name\", \"age\"])\n    def test_mandatory_fields_empty(self, field, min_user):\n        min_user[field] = \"\"\n        assert not is_valid(min_user)\n    def test_name_whitespace_only(self, min_user):\n        min_user[\"name\"] = \" \\n\\t\"\n        assert not is_valid(min_user) \n```", "```py\n# tests/test_api.py\nclass TestIsValid:\n    ...\n    @pytest.mark.parametrize(\n        (\"email\", \"outcome\"),\n        [\n            (\"missing_at.com\", False),\n            (\"@missing_start.com\", False),\n            (\"missing_end@\", False),\n            (\"missing_dot@example\", False),\n            (\"good.one@example.com\", True),\n            (\"δοκιμή@παράδειγμα.δοκιμή\", True),\n            (\"аджай@экзампл.рус\", True),\n        ],\n    )\n    def test_email(self, email, outcome, min_user):\n        min_user[\"email\"] = email\n        assert is_valid(min_user) == outcome \n```", "```py\n# tests/test_api.py\nclass TestIsValid:\n    ...\n    @pytest.mark.parametrize(\n        (\"field\", \"value\"),\n        [\n            (\"email\", None),\n            (\"email\", 3.1415),\n            (\"email\", {}),\n            (\"name\", None),\n            (\"name\", 3.1415),\n            (\"name\", {}),\n            (\"role\", None),\n            (\"role\", 3.1415),\n            (\"role\", {}),\n        ],\n    )\n    def test_invalid_types(self, field, value, min_user):\n        min_user[field] = value\n        assert not is_valid(min_user) \n```", "```py\n# tests/test_api.py\nclass TestExport:\n    \"\"\"Test behavior of `export` function.\"\"\"\n    @pytest.fixture\n    def csv_file(self, tmp_path):\n        \"\"\"Yield a filename in a temporary folder.\n        Due to how pytest `tmp_path` fixture works, the file does\n        not exist yet.\n        \"\"\"\n        csv_path = tmp_path / \"out.csv\"\n        yield csv_path\n        csv_path.unlink(missing_ok=True)\n    @pytest.fixture\n    def existing_file(self, tmp_path):\n        \"\"\"Create a temporary file and put some content in it.\"\"\"\n        existing = tmp_path / \"existing.csv\"\n        existing.write_text(\"Please leave me alone...\")\n        return existing \n```", "```py\n# tests/test_api.py\nclass TestExport:\n    ...\n    def test_export(self, users, csv_file):\n        export(csv_file, users)\n        text = csv_file.read_text()\n        assert (\n            \"email,name,age,role\\n\"\n            \"minimal@example.com,Primus Minimus,18,\\n\"\n            \"full@example.com,Maximus Plenus,65,emperor\\n\"\n        ) == text \n```", "```py\n# tests/test_api.py\nclass TestExport:\n    ...\n    def test_export_quoting(self, min_user, csv_file):\n        min_user[\"name\"] = \"A name, with a comma\"\n        export(csv_file, [min_user])\n        text = csv_file.read_text()\n        assert (\n            \"email,name,age,role\\n\"\n            'minimal@example.com,\"A name, with a comma\",18,\\n'\n        ) == text \n```", "```py\n# tests/test_api.py\nclass TestExport:\n    ...\n    def test_does_not_overwrite(self, users, existing_file):\n        with pytest.raises(IOError) as err:\n            export(existing_file, users, overwrite=False)\n        err.match(\n            r\"'{}' already exists\\.\".format(\n                re.escape(str(existing_file))\n            )\n        )\n        # let us also verify the file is still intact\n        assert existing_file.read_text() == (\n            \"Please leave me alone...\"\n        ) \n```", "```py\n$ pytest tests\n====================== test session starts ======================\nplatform darwin -- Python 3.12.2, pytest-8.1.1, pluggy-1.4.0\nrootdir: /Users/fab/code/lpp4ed\nconfigfile: pyproject.toml\ncollected 132 items\ntests/test_api.py ..............................................\n................................................................\n......................                                    [100%]\n====================== 132 passed in 0.14s ====================== \n```"]