["```py\n    (myproject_env)$ pip install django-mptt\n\n    ```", "```py\n    # conf/base.py or settings.py\n    INSTALLED_APPS = (\n        # ...\n        \"mptt\",\n        \"movies\",\n    )\n    ```", "```py\n    # movies/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.utils.encoding import \\\n        python_2_unicode_compatible\n    from utils.models import CreationModificationDateMixin\n    from mptt.models import MPTTModel\n    from mptt.fields import TreeForeignKey, TreeManyToManyField\n\n    @python_2_unicode_compatible\n    class Category(MPTTModel, CreationModificationDateMixin):\n     parent = TreeForeignKey(\"self\", blank=True, null=True)\n        title = models.CharField(_(\"Title\"), max_length=200)\n\n        def __str__(self):\n            return self.title\n\n        class Meta:\n     ordering = [\"tree_id\", \"lft\"]\n            verbose_name = _(\"Category\")\n            verbose_name_plural = _(\"Categories\")\n    ```", "```py\n    @python_2_unicode_compatible\n    class Movie(CreationModificationDateMixin):\n        title = models.CharField(_(\"Title\"), max_length=255)\n     categories = TreeManyToManyField(Category,\n     verbose_name=_(\"Categories\"))\n\n        def __str__(self):\n            return self.title\n\n        class Meta:\n            verbose_name = _(\"Movie\")\n            verbose_name_plural = _(\"Movies\")\n    ```", "```py\n    ancestor_categories = category.get_ancestors(\n        ascending=False,\n        include_self=False,\n    )\n    ```", "```py\n    root = category.get_root()\n    ```", "```py\n    children = category.get_children()\n    ```", "```py\n    descendants = category.get_descendants(include_self=False)\n    ```", "```py\n    descendants_count = category.get_descendant_count()\n    ```", "```py\n    siblings = category.get_siblings(include_self=False)\n    ```", "```py\n    previous_sibling = category.get_previous_sibling()\n    next_sibling = category.get_next_sibling()\n    ```", "```py\n    category.is_root_node()\n    category.is_child_node()\n    category.is_leaf_node()\n    ```", "```py\n    (myproject_env)$ pip install django-mptt-admin\n\n    ```", "```py\n    # conf/base.py or settings.py\n    INSTALLED_APPS = (\n        # ...\n        \"django_mptt_admin\"\n    )\n    ```", "```py\n# movies/admin.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.contrib import admin\nfrom django_mptt_admin.admin import DjangoMpttAdmin\nfrom .models import Category\n\nclass CategoryAdmin(DjangoMpttAdmin):\n    list_display = [\"title\", \"created\", \"modified\"]\n    list_filter = [\"created\"]\n\nadmin.site.register(Category, CategoryAdmin)\n```", "```py\n    (myproject_env)$ pip install django-mptt-tree-editor\n\n    ```", "```py\n    # conf/base.py or settings.py\n    INSTALLED_APPS = (\n        # ...\n        \"mptt_tree_editor\"\n    )\n    ```", "```py\n# movies/admin.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.contrib import admin\nfrom mptt_tree_editor.admin import TreeEditor\nfrom .models import Category\n\nclass CategoryAdmin(TreeEditor):\n    list_display = [\"indented_short_title\", \"actions_column\", \"created\", \"modified\"]\n    list_filter = [\"created\"]\n\nadmin.site.register(Category, CategoryAdmin)\n```", "```py\n    # movies/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.shortcuts import render\n    from .models import Category\n\n    def movie_category_list(request):\n        context = {\n            \"categories\": Category.objects.all(),\n        }\n        return render(\n            request,\n            \"movies/movie_category_list.html\",\n            context\n        )\n    ```", "```py\n    {# templates/movies/movie_category_list.html #}\n    {% extends \"base_single_column.html\" %}\n    {% load i18n utility_tags mptt_tags %}\n\n    {% block sidebar %}\n    {% endblock %}\n\n    {% block content %}\n    <ul class=\"root\">\n     {% recursetree categories %}\n            <li>\n                {{ node.title }}\n                {% if not node.is_leaf_node %}\n                    <ul class=\"children\">\n                        {{ children }}\n                    </ul>\n                {% endif %}\n            </li>\n     {% endrecursetree %}\n    </ul>\n    {% endblock %}\n    ```", "```py\n    # movies/forms.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import forms\n    from django.utils.translation import ugettext_lazy as _\n    from django.utils.html import mark_safe\n    from mptt.forms import TreeNodeChoiceField\n    from .models import Category\n\n    class MovieFilterForm(forms.Form):\n     category = TreeNodeChoiceField(\n     label=_(\"Category\"),\n     queryset=Category.objects.all(),\n     required=False,\n     level_indicator=mark_safe(\n     \"&nbsp;&nbsp;&nbsp;&nbsp;\"\n     ),\n        )\n    ```", "```py\n    # utils/fields.py\n    # -*- coding: utf-8 -*-\n    from __future__ import unicode_literals\n    from django import forms\n\n    class MultipleChoiceTreeField(\n        forms.ModelMultipleChoiceField\n    ):\n        widget = forms.CheckboxSelectMultiple\n\n        def label_from_instance(self, obj):\n            return obj\n    ```", "```py\n    # movies/forms.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import forms\n    from django.utils.translation import ugettext_lazy as _\n    from crispy_forms.helper import FormHelper\n    from crispy_forms import layout, bootstrap\n    from utils.fields import MultipleChoiceTreeField\n    from .models import Movie, Category\n\n    class MovieForm(forms.ModelForm):\n     categories = MultipleChoiceTreeField(\n     label=_(\"Categories\"),\n     required=False,\n     queryset=Category.objects.all(),\n     )\n        class Meta:\n            model = Movie\n\n        def __init__(self, *args, **kwargs):\n            super(MovieForm, self).__init__(*args, **kwargs)\n            self.helper = FormHelper()\n            self.helper.form_action = \"\"\n            self.helper.form_method = \"POST\"\n            self.helper.layout = layout.Layout(\n                layout.Field(\"title\"),\n     layout.Field(\n     \"categories\",\n     template=\"utils/\"\\\n     \"checkbox_select_multiple_tree.html\"\n     ),\n                bootstrap.FormActions(\n                    layout.Submit(\"submit\", _(\"Save\")),\n                )\n            )\n    ```", "```py\n    {# templates/utils/checkbox_select_multiple_tree.html #}\n    {% load crispy_forms_filters %}\n    {% load l10n %}\n\n    <div id=\"div_{{ field.auto_id }}\" class=\"form-group{% if wrapper_class %} {{ wrapper_class }}{% endif %}{% if form_show_errors%}{% if field.errors %} has-error{% endif %}{% endif %}{% if field.css_classes %} {{ field.css_classes }}{% endif %}\">\n        {% if field.label and form_show_labels %}\n            <label for=\"{{ field.id_for_label }}\" class=\"control-label {{ label_class }}{% if field.field.required %} requiredField{% endif %}\">\n                {{ field.label|safe }}{% if field.field.required %}<span class=\"asteriskField\">*</span>{% endif %}\n            </label>\n        {% endif %}\n        <div class=\"controls {{ field_class }}\"{% if flat_attrs %} {{ flat_attrs|safe }}{% endif %}>\n            {% include 'bootstrap3/layout/field_errors_block.html' %}\n\n     {% for choice_value, choice_instance in field.field.choices %}\n                <label class=\"checkbox{% if inline_class %}-{{ inline_class }}{% endif %} level-{{ choice_instance.level }}\">\n                    <input type=\"checkbox\"{% if choice_value in field.value or choice_value|stringformat:\"s\" in field.value or choice_value|stringformat:\"s\" == field.value|stringformat:\"s\" %} checked=\"checked\"{% endif %}\n\n    name=\"{{ field.html_name }}\"id=\"id_{{ field.html_name }}_{{ forloop.counter }}\"value=\"{{ choice_value|unlocalize }}\"{{ field.field.widget.attrs|flatatt }}>\n                    {{ choice_instance }}\n                </label>\n     {% endfor %}\n            {% include \"bootstrap3/layout/help_text.html\" %}\n        </div>\n    </div>\n    ```", "```py\n    /* style.css */\n    .level-0 {\n        margin-left: 0;\n    }\n    .level-1 {\n        margin-left: 20px;\n    }\n    .level-2 {\n        margin-left: 40px;\n    }\n    ```"]