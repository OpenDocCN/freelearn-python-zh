["```py\n>>> import pyglet, Pmw\n\n```", "```py\nfrom Tkinter import *\nimport tkFileDialog\nimport player\nclass GUI:\n   def __init__(self, player):\n     self.player = player\n     player.parent = self\n     self.root = Tk()\n     self.create_button_frame()\n     self.create_bottom_frame()\n     self.root.mainloop()\n```", "```py\ndef create_button_frame(self):\n    buttonframe= Frame(self.root)\n    self.playicon = PhotoImage(file='../icons/play.gif')\n    self.stopicon = PhotoImage(file='../icons/stop.gif')\n    self.playbtn=Button(buttonframe, text ='play', image=self.playicon, borderwidth=0, command=self.toggle_play_pause)\n   self.playbtn.image = self.playicon\n   self.playbtn.grid(row=3, column=3)\n   buttonframe.grid(row=1, pady=4, padx=5)\n\ndef create_bottom_frame(self):\n    bottomframe = Frame(self.root)\n    add_fileicon = PhotoImage(file='../icons/add_file.gif')\n   add_filebtn=Button(bottomframe, image=add_fileicon, borderwidth=0, text='Add File', command=self.add_file)\n   add_filebtn.image = add_fileicon\n   add_filebtn.grid(row=2, column=1)\n   bottomframe.grid(row=2, sticky='w', padx=5)\n```", "```py\ndef toggle_play_pause(self):\n    if self.playbtn['text'] =='play':\n     self.playbtn.config(text='stop', image=self.stopicon)\n     self.player.start_play_thread()\n   elif self.playbtn['text'] =='stop':\n     self.playbtn.config(text ='play', image=self.playicon)\n     self.player.pause()\n```", "```py\ndef add_file(self):\n    tfile = tkFileDialog.askopenfilename(filetypes=[('All supported', '.mp3 .wav .ogg'), ('All files', '*.*')])\n   self.currentTrack = tfile\n```", "```py\nmyplayer= pyglet.media.Player()\nsource = pyglet.media.load(<<audio file to be played>>)\nmyplayer.queue(source)\nmyplayer.play()\npyglet.app.run()\n```", "```py\nimport pyglet\nfrom threading import Thread\nclass Player():\n   parent = None\n   def play_media(self):\n     try:\n        self.myplayer= pyglet.media.Player()\n        self.source = pyglet.media.load(self.parent.currentTrack)\n        self.myplayer.queue(self.source)\n        self.myplayer.play()\n        pyglet.app.run()\n     except:\n        pass\n\n   def start_play_thread(self):\n     player_thread = Thread(target=self.play_media)\n     player_thread.start()\n\n   def pause(self):\n     try:\n        self.myplayer.pause()\n        self.paused = True\n     except: pass\n```", "```py\nif __name__ == '__main__':\n   playerobj = player.Player()\n   app = GUI(playerobj)\n```", "```py\n    mylist = ListBox(parent, **configurable options)\n    ```", "```py\n    mylist.insert(0, \"First Item\")\n    mylist.insert(END, \"Last Item\")\n    ```", "```py\n    mylist.curselection() # returns a tuple of all selected items\n    mylist.curselection()[0] # returns first selected item\n    mylist.get(1) # returns second item from the list\n    mylist.get(0, END) # returns all items from the list\n    ```", "```py\n    >>> import Tkinter\n    >>> help(Tkinter.Listbox)\n\n    ```", "```py\ndef create_list_frame(self):\n    list_frame = Frame(self.root)\n    self.Listbox = Listbox(list_frame, activestyle='none', cursor='hand2', bg='#1C3D7D', fg='#A0B9E9', selectmode=EXTENDED, width=60, height =10)\n   self.Listbox.pack(side=LEFT, fill=BOTH, expand=1)\n   self.Listbox.bind(\"<Double-Button-1>\", self.identify_track_to_play)\n   scrollbar = Scrollbar(list_frame)\n   scrollbar.pack(side=RIGHT, fill=BOTH)\n   self.Listbox.config(yscrollcommand=scrollbar.set)\n   scrollbar.config(command=self.Listbox.yview)\n   list_frame.grid(row=4, padx=5)\n```", "```py\ndef identify_track_to_play(self, event=None):\n   try:\n     indx = int(self.Listbox.curselection()[0])\n     if self.Listbox.get(indx) == \"\":\n        self.del_selected()\n     except:\n        indx = 0\n        self.currentTrack =self.Listbox.get(indx)\n self.player.start_play_thread()\n\n```", "```py\nalltracks = []\n```", "```py\ndef add_file(self):\n    filename = tkFileDialog.askopenfilename(filetypes=[('All supported', '.mp3 .wav'), ('.mp3 files', '.mp3'), ('.wav files', '.wav')])\n    if filename:\n      self.Listbox.insert(END, filename)\n    self.alltracks = list(self.Listbox.get(0, END))\n```", "```py\ndel_selectedicon = PhotoImage(file='../icons/del_selected.gif')\ndel_selectedbtn=Button(bottomframe, image=del_selectedicon, padx=0, borderwidth=0, text='Delete', command=self.del_selected)\ndel_selectedbtn.image = del_selectedicon\ndel_selectedbtn.grid(row=5, column=2)\n```", "```py\ndef del_selected(self):\n    whilelen(self.Listbox.curselection())>0:\n      self.Listbox.delete(self.Listbox.curselection()[0])\n    self.alltracks = list(self.Listbox.get(0, END))\n```", "```py\nadd_diricon = PhotoImage(file='../icons/add_dir.gif')\nadd_dirbtn=Button(bottomframe, image=add_diricon, borderwidth=0, padx=0, text='Add Dir', command=self.add_dir)\nadd_dirbtn.image = add_diricon\nadd_dirbtn.grid(row=5, column=3)\n```", "```py\nimport os\n```", "```py\n  def add_dir(self):\n     path = tkFileDialog.askdirectory()\n     if path:\n        tfileList = []\n        for (dirpath, dirnames, filenames) in os.walk(path):\n           for tfile in filenames:\n              if tfile.endswith(\".mp3\") or tfile.endswith(\".wav\") or tfile.endswith(\".ogg\"):\n                 tfileList.append(dirpath+\"/\"+tfile)\n        for item in tfileList:\n           self.listbox.insert(END, item)\n        self.alltracks = list(self.listbox.get(0, END))\n```", "```py\ndelallicon = PhotoImage(file='../icons/delall.gif')\ndelallbtn = Button(bottomframe, image=delallicon, borderwidth=0, padx=0, text='Clear All', command=self.clear_list)\ndelallbtn.image = delallicon\ndelallbtn.grid(row=5, column=4)\n```", "```py\ndef clear_list(self):\n    self.Listbox.delete(0, END)\n    self.alltracks =list(self.Listbox.get(0, END))\n```", "```py\nFWDREWNDTIME = 20\n#time to seek ahead or backwards in seconds\ndef fast_fwd(self):\n   try:\n     current_time = self.myplayer.time\n     self.myplayer.seek(current_time+FWDREWNDTIME)\n   except:pass\n```", "```py\ndef rewind(self):\n   try:\n     current_time = self.myplayer.time\n     self.myplayer.seek(current_time-FWDREWNDTIME)\n   except:pass\n```", "```py\ndef pause(self):\n   try:\n     self.myplayer.pause()\n     self.paused = True\n   except: pass\n```", "```py\ndef set_vol(self, vol):\n   try:\n     self.myplayer.volume = vol\n   except:pass\n```", "```py\ndef mute(self):\n   try:\n     self.myplayer.volume = 0.0\n     self.parent.volscale.set(0.0)\n   except:pass\n\ndef unmute(self):\n   self.set_vol(self.vol)\n   self.parent.volscale.set(0.3)\n```", "```py\n>>> import pyglet\n>>> help (pyglet.media.Player)\n\n```", "```py\nprevicon = PhotoImage(file='../icons/previous.gif')\nprevbtn=Button(buttonframe, image=previcon, borderwidth=0, padx=0, command=self.prev_track)\nprevbtn.image = previcon\nprevbtn.grid(row=3, column=1, sticky='w')\n```", "```py\nself.volscale = ttk.Scale(buttonframe, from_=0.0, to =1.0 , command=self.vol_update)\nself.volscale.set(0.6)\nself.volscale.grid(row=3, column=7, padx=5)\n```", "```py\ndef vol_update(self, e):\n    vol = float(e)\n    self.player.set_vol(vol)\n```", "```py\ndef create_console_frame(self):\n   consoleframe = Frame(self.root)\n   self.canvas = Canvas(consoleframe, width=370, height=90)\n   self.canvas.grid(row=1)\n   photo = PhotoImage(file='../icons/glassframe.gif')\n   self.canvas.image = photo\n   self.console = self.canvas.create_image(0, 10, anchor=NW, image=photo)\n   self.clock = self.canvas.create_text(32, 34, anchor=W, fill='#CBE4F6', font=\"DS-Digital 20\", text=\"00:00\")\n   self.songname = self.canvas.create_text(115, 37, anchor=W, fill='#9CEDAC', font=\"Verdana 10\", text='\\\"Currently playing: none [00.00] \\\"')\n   self.progressBar = ttk.Progressbar(consoleframe, length =1, mode=\"determinate\")\n   self.progressBar.grid(row=2, columnspan=10, sticky='ew', padx=5)\n   consoleframe.grid(row=1, pady=1, padx=0)\n```", "```py\ndef song_len(self):\n   try:\n     self.song_length = self.source.duration\n   except:\n     self.song_length = 0\n   return self.song_length\ndef current_time(self):\n   try:\n     current_time = self.myplayer.time\n   except:\n     current_time = 0\n   return current_time\n```", "```py\ndef start_play_thread(self):\n   player_thread = Thread(target=self.play_media)\n   player_thread.start()\n time.sleep(1)\n self.song_len()\n\n```", "```py\ndef launch_play(self):\n   try:\n     self.player.pause()\n   except:\n     pass\n   self.player.start_play_thread()\n   song_lenminute = str(int(self.player.song_length/60))\n   song_lenseconds = str (int(self.player.song_length%60))\n   filename = self.currentTrack.split('/')[-1] + '\\n ['+ song_lenminute+':'+song_lenseconds+']'\n self.canvas.itemconfig(self.songname, text=filename)\n self.progressBar[\"maximum\"]=self.player.song_length\n self.update_clock_and_progressbar()\n\n```", "```py\n    >>> import ttk\n    >>> help(ttk.Progressbar)\n\n    ```", "```py\ndef update_clock_and_progressbar(self):\n   current_time = self.player.current_time()\n   song_len = (self.player.song_len())\n   currtimeminutes = int(current_time/60)\n   currtimeseconds = int(current_time%60)\n   currtimestrng = self.timepattern.format(currtimeminutes, currtimeseconds)\n   self.canvas.itemconfig(self.clock, text= currtimestrng)\n   self.progressBar[\"value\"] = current_time\n self.root.update()\n   if current_time == song_len: #track is over\n     self.canvas.itemconfig(self.clock, text= '00:00')\n     self.timer=[0,0]\n     self.progressBar[\"value\"] = 0\n   else:\n     self.canvas.after(1000, self.update_clock_and_progressbar)\n\n```", "```py\n#radio buttons added to create_bottom_frame\nself.loopv = IntVar()\nself.loopv.set(3)\nfor txt, val in self.loopchoices:\n   Radiobutton(bottomframe, text=txt, variable=self.loopv, value=val).grid(row=5, column=4+val, pady=3)\n```", "```py\nself.myplayer.push_handlers(on_eos=self.what_next)\n```", "```py\ndef what_next(self):\n   if self.stopped:\n     self.stopped = False\n     return None\n   if self.parent.loopv.get() == 1:\n     # No Loop\n     return None\n   if self.parent.loopv.get() == 2:\n     # Loop current\n     self.parent.launch_play()\n   if self.parent.loopv.get() == 3:\n     # Loop All\n     self.fetch_next_track()\n```", "```py\ndef fetch_next_track(self):\n   try:      next_trackindx = self.parent.alltracks.index(self.parent.currentTrack) +1\n     self.parent.currentTrack = self.parent.alltracks[next_trackindx]\n     self.parent.launch_play()\n   except:pass\n     # end of list – do nothing\n```", "```py\ndef create_context_menu(self):\n   self.context_menu = Menu(self.root, tearoff=0)\n   self.context_menu.add_command(label=\"Play\", command=self.identify_track_to_play)\n   self.context_menu.add_command(label=\"Delete\", command=self.del_selected)\n```", "```py\ndef show_context_menuContext_menu(self,event):\n   self.context_menu.tk_popup(event.x_root+45, event.y_root+10,0)\n```", "```py\nself.root.protocol('WM_DELETE_WINDOW', self.close_player)\n```", "```py\ndef close_player(self):\n   if tkMessageBox.askokcancel(\"Quit\", \"Really want to quit?\"):\n     try:\n        self.player.pause()\n     except:\n        pass\n     self.root.destroy()\n```", "```py\nimport Pmw\n```", "```py\n   self.balloon = Pmw.Balloon(self.root)\n```", "```py\nballoon.bind(name of widget, 'Description for the balloon')\n```", "```py\nself.balloon.bind(add_filebtn, 'Add New File')\n```", "```py\nself.root.title('Media Player')\nself.root.iconbitmap('../icons/mp.ico')\n```"]