["```py\nclass Point:\n    \"\"\"\n    Point on a plane.\n\n    Distances are calculated using hypotenuse.\n    This is the \"as a crow flies\" straight line distance.\n\n    Point on a plane.\n\n    Distances are calculated using hypotenuse.\n    This is the \"as a crow flies\" straight line distance.\n\n    >>> p_1 = Point(22, 7)\n    >>> p_1.x\n    22\n    >>> p_1.y\n    7\n    >>> p_1\n    Point(22, 7)\n    \"\"\"\n    def __init__(self, x, y):\n        \"\"\"Create a new point\n\n        :param x: X coördinate\n        :param y: Y coördinate\n        \"\"\"\n        self.x= x\n        self.y= y\n    def __repr__(self):\n        \"\"\"Returns string representation of this Point.\"\"\"\n        return \"{cls}({x:.0f}, {y:.0f})\".format(\n            cls=self.__class__.__name__, x=self.x, y=self.y)\n    def dist(self, point):\n        \"\"\"Distance to another point measured on a plane.\n\n        >>> p_1 = Point(22, 7)\n        >>> p_2 = Point(20, 5)\n        >>> round(p_1.dist(p_2),4)\n        2.8284\n\n        :param point: Another instance of Point.\n        :returns: float distance.\n        \"\"\"\n        return math.hypot(self.x-point.x, self.y-point.y)\n```", "```py\n>>> p_1 = Point(22, 7)\n>>> p_2 = Point(20, 5)\n>>> round(p_1.dist(p_2),4)\n2.8284\n```", "```py\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod(verbose=1)\n```", "```py\nMacBookPro-SLott:Code slott$ python3 -m doctest Chapter_1/ch01_ex1.py -v\nTrying:\n 355/113\nExpecting:\n 3.1415929203539825\nok\n...\n1 items had no tests:\n ch01_ex1\n9 items passed all tests:\n 2 tests in __main__.__test__.assignment\n 4 tests in __main__.__test__.cmath\n 2 tests in __main__.__test__.division\n 1 tests in __main__.__test__.expression\n 3 tests in __main__.__test__.import 1\n 1 tests in __main__.__test__.import 2\n 2 tests in __main__.__test__.import 3\n 2 tests in __main__.__test__.mixed_math\n 2 tests in __main__.__test__.print\n19 tests in 10 items.\n19 passed and 0 failed.\nTest passed.\n\n```", "```py\n>>> 355/113\n3.1415929203539825\n```", "```py\n__test__ = {\n    'expression': \"\"\"\n        >>> 355/113\n        3.1415929203539825\n    \"\"\",\n*etc.*\n}\n```", "```py\nimport unittest\n\nfrom Chapter_7.ch07_ex1 import FtoC\n\nclass Test_FtoC(unittest.TestCase):\n    def setUp(self):\n        self.temps= [50, 60, 72]\n    def test_single(self):\n        self.assertAlmostEqual(0.0, FtoC(32))\n        self.assertAlmostEqual(100.0, FtoC(212))\n    def test_map(self):\n        temps_c = list(map(FtoC, self.temps))\n        self.assertEqual(3, len(temps_c))\n        rounded = [round(t,3) for t in temps_c]\n        self.assertEqual([10.0, 15.556, 22.222], rounded)\n```", "```py\ndef doctest_suite():\n    files = glob.glob(\"Chapter*/ch*_ex*.py\")\n    by_chxx= lambda name: name.partition(\".\")[2].partition(\"_\")[0]\n    modules = sorted(\n        (\".\".join(f.replace(\".py\",\"\").split(os.sep)) for f in files),\n        key=by_chxx)\n    suites= [doctest.DocTestSuite(m) for m in modules]\n    return unittest.TestSuite(suites)\n```", "```py\nif __name__ == \"__main__\":\n    runner= unittest.TextTestRunner( verbosity=1 )\n    all_tests = unittest.TestSuite( suite() )\n    runner.run( all_tests )\n```", "```py\nimport logging\nlogger = logging.getLogger(__name__)\n```", "```py\nlogger.debug(\"Finished with {0} using {2}\".format(message, details))\nlogger.error(\"Error due to {0}\".format(data))\n```", "```py\nlogging.basicConfig(filename='app.log', filemode='a', level=logging.INFO)\n```", "```py\nlogging.getLogger('Demonstration').setLevel(logging.DEBUG)\n```", "```py\nconfig = {\n    'version': 1,\n    'handlers': {\n        'console': {\n            'class' : 'logging.StreamHandler',\n            'stream': 'ext://sys.stderr',\n        }\n    },\n    'root': {\n        'level': 'DEBUG',\n        'handler': ['console'],\n    },\n}\n```", "```py\nWriting RST Documentation\n==========================\n\nFor more information, see http://docutils.sourceforge.net/docs/user/rst/quickref.html\n\n1\\.  Separate paragraphs with blank lines.\n\n2\\.  Underline headings.\n\n#.  Prefix with one character for an unordered list. Otherwise it may be\n    interpreted as an ordered list.\n\n#.  Indent freely to show structure.\n\n#.  Inline markup.\n\n    -   Use ``*word*`` for *italics*, and ``**word**`` for **bold**.\n\n    -   Use ``:code:\\`word\\```", "```py\n\nWe've shown a heading, underlined with a sequence of `=` characters. We've provided a URL; in the final HTML output, this will become a proper link using the `<a>` tag. We've shown numbered paragraphs. When we omit the leading number and use `#`, the `docutils` tools will assign increasing numbers. We've also shown indented bullet point within the last numbered paragraph.\n\nWhile this example shows numbering and simple hyphen bullets, we can use lettering or Roman numerals as well. The `docutils` tools are generally able to parse a wide variety of formatting conventions.\n\n## Creating HTML documentation from an RST source\n\nTo create HTML or LaTeX (or any of the other supported formats), we'll use one of the `docutils` frontend tools. There are many individual conversion tools that are part of the `docutils` package.\n\nThe `docutils` tools are not part of Python. See [http://docutils.sourceforge.net](http://docutils.sourceforge.net) for the download.\n\nAll of the tools have a similar command-line interface. We might use the following command to create an HTML page from some RST input:\n\n```"]