["```py\nbrew install git\nscoop install git\n```", "```py\ngit config --global user.name \"Phil Jones\"\ngit config --global user.email \"pgjones@tozo.dev\"\n```", "```py\ngit init .\n```", "```py\ntozo\n└── .git\n```", "```py\ngit config --global pull.rebase true\n```", "```py\nbrew install python\nscoop install python\n```", "```py\nbrew install pdm\n```", "```py\nscoop bucket add frostming https://github.com/frostming/scoop-frostming.git\nscoop install pdm\n```", "```py\ntozo\n└── backend\n    ├── src\n    │   └── backend\n    └── tests\n```", "```py\n/__pypackages__\n/.mypy_cache\n.pdm.toml\n.pytest_cache\n.venv\n*.pyc\n```", "```py\npdm init\n```", "```py\npdm add --dev black isort\n```", "```py\n[tool.black]  \ntarget-version = [\"py310\"] \n[tool.isort]\nprofile = \"black\"\n```", "```py\npdm run black src tests\npdm run isort src tests\n```", "```py\npdm add --dev djhtml\n```", "```py\ndjhtml src/backend/templates --tabwidth 2 --check\n```", "```py\npdm add --dev mypy\n```", "```py\npdm run mypy src/backend/ tests/\n```", "```py\npdm add --dev flake8\n```", "```py\n[flake8] \nmax-line-length = 88\nextend-ignore = E203\n```", "```py\npdm run flake8 src/ tests/\n```", "```py\npdm add --dev bandit\n```", "```py\npdm run bandit -r src/\n```", "```py\npdm add --dev vulture\n```", "```py\n[tool.vulture]\nmin_confidence = 100\n```", "```py\npdm run vulture src/\n```", "```py\ndef test_addition():\n    assert 1 + 1 == 2\n```", "```py\npdm add --dev pytest pytest-asyncio \n```", "```py\n[tool.pytest.ini_options]\naddopts = \"--showlocals\"\nasyncio_mode = \"auto\"\npythonpath = [\"src\"]\n```", "```py\npdm run pytest tests\n```", "```py\n[tool.pdm.scripts]\nformat-black = \"black src/ tests/\"\nformat-djhtml = \"djhtml src/backend/templates -t 2 --in-place\"\nformat-isort = \"isort src tests\"\nformat = {composite = [\"format-black\", \"format-djhtml\", \"format-isort\"]}\nlint-bandit = \"bandit -r src/\"\nlint-black = \"black --check --diff src/ tests/\"\nlint-djhtml = \"djhtml src/backend/templates -t 2 --check\"\nlint-flake8 = \"flake8 src/ tests/\"\nlint-isort = \"isort --check --diff src tests\"\nlint-mypy = \"mypy src/backend tests\"\nlint-vulture = \"vulture src\"\nlint = {composite = [\"lint-bandit\", \"lint-black\", \"lint-djhtml\", \"lint-flake8\", \"lint-isort\", \"lint-mypy\", \"lint-vulture\"]}\ntest = \"pytest tests/\"\n```", "```py\nbrew install node\nscoop install nodejs\n```", "```py\nnpx create-react-app frontend --template typescript\n```", "```py\ntozo\n└── frontend\n    ├── node_modules\n    ├── public\n    └── src\n```", "```py\nnpm install --save-dev prettier\n```", "```py\n\"prettier\": {\n  \"trailingComma\": \"all\" \n}\n```", "```py\nnpx prettier --parser typescript --write \"src/**/*.{ts,tsx}\"\n```", "```py\nnpm install --save-dev eslint \n```", "```py\nnpm install --save-dev eslint-config-prettier\n```", "```py\nnpm install --save-dev eslint-plugin-import\n```", "```py\n\"eslintConfig\": {\n  \"extends\": [\n    \"react-app\",\n    \"react-app/jest\",\n    \"plugin:import/errors\",\n    \"plugin:import/warnings\",\n    \"plugin:import/typescript\",\n    \"prettier\"\n  ]\n}\n```", "```py\nnpx eslint \"src/**/*.{ts,tsx}\"\n```", "```py\nnpx eslint --fix \"src/**/*.{ts,tsx}\"\n```", "```py\nnpm run test\n```", "```py\ntest('addition', () => {\n  expect(1 + 1).toBe(2);\n});\n```", "```py\nnpm install --save-dev source-map-explorer\n```", "```py\nnpm run build\n```", "```py\nnpx source-map-explorer build/static/js/*.js\n```", "```py\n\"scripts\": {\n  \"analyze\": \"npm run build && source-map-explorer \\\"build/static/js/*.js\\\"\",\n  \"format\": \"eslint --fix \\\"src/**/*.{ts,tsx}\\\" && prettier --parser typescript --write \\\"src/**/*.{ts,tsx}\\\"\",\n  \"lint\": \" eslint \\\"src/**/*.{ts,tsx}\\\" && prettier --parser typescript --list-different  \\\"src/**/*.{ts,tsx}\\\"\",\n  \"start\": \"react-scripts start\",\n  \"build\": \"react-scripts build\",\n  \"test\": \"react-scripts test\",\n  \"eject\": \"react-scripts eject\"\n}\n```", "```py\nbrew install terraform\nscoop install terraform\n```", "```py\nmkdir infrastructure\n```", "```py\ntozo\n├── backend\n├── frontend\n└── infrastructure\n```", "```py\npip install ansible-vault\n```", "```py\n[defaults]\nvault_password_file = .ansible-vault\n```", "```py\nansible-vault encrypt secrets.auto.tfvars --output=secrets.auto.tfvars.vault \nansible-vault encrypt terraform.tfstate --output=terraform.tfstate.vault\n```", "```py\nansible-vault decrypt secrets.auto.tfvars.vault --output=secrets.auto.tfvars \nansible-vault decrypt terraform.tfstate.vault --output=terraform.tfstate\n```", "```py\n.ansible-vault \nsecrets.auto.tfvars\nterraform.tfstate \n*.backup \n.terraform.lock.hcl \n.terraform/\n```", "```py\nterraform fmt\n```", "```py\nterraform fmt --check=true\n```", "```py\nterraform validate\n```", "```py\nterraform plan\n```", "```py\nbrew install postgres\nscoop install postgresql\n```", "```py\nbrew services start postgresql\n```", "```py\ncreateuser -s postgres\n```", "```py\npg_ctl start\n```", "```py\ngithub_token = \"abc1234\"\n```", "```py\nterraform {\n  required_providers {\n    github = {\n      source  = \"integrations/github\"\n      version = \"~> 4.0\"\n    }\n  }\n  required_version = \">=1.0\"\n}\n```", "```py\nvariable \"github_token\" {\n  sensitive = true\n}\n\nprovider \"github\" {\n  token = var.github_token\n}\n\nresource \"github_repository\" \"tozo\" {\n  name       = \"tozo\"\n  visibility = \"private\"\n}\n```", "```py\nterraform init \nterraform apply\n```", "```py\ngit remote add origin git@github.com:pgjones/tozo.git\n```", "```py\ngit push --set-upstream origin main \n```", "```py\ngit push origin main:feature\n```", "```py\ngit pull origin main\n```", "```py\ntozo\n└── .github\n    └── workflows\n```", "```py\nname: CI\n\non:\n  push:\n    branches: [ main ]\n  pull_request:\n    branches: [ main ]\n  workflow_dispatch:\n\njobs:\n```", "```py\nterraform fmt --check=true\nterraform validate\n```", "```py\n  infrastructure:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Install Terraform\n        run: |\n          sudo apt-get update && sudo apt-get install -y gnupg             software-properties-common curl\n          curl -fsSL https://apt.releases.hashicorp.com/gpg |             sudo apt-key add -\n          sudo apt-add-repository \"deb [arch=amd64] https://            apt.releases.hashicorp.com $(lsb_release -cs) main\"\n          sudo apt-get update && sudo apt-get install terraform\n      - uses: actions/checkout@v3\n\n      - name: Initialise Terraform\n        run: terraform init\n\n      - name: Check the formatting\n        run: terraform fmt --check=true --recursive\n\n      - name: Validate the code\n        run: terraform validate\n```", "```py\npdm run format\npdm run lint\npdm run test\n```", "```py\n  backend:\n    runs-on: ubuntu-latest\n\n    container: python:3.10.1-slim-bullseye\n\n    services:\n      postgres:\n        image: postgres\n        env:\n          POSTGRES_DB: tozo_test\n          POSTGRES_USER: tozo\n          POSTGRES_PASSWORD: tozo\n          POSTGRES_HOST_AUTH_METHOD: \"trust\"\n        options: >-\n          --health-cmd pg_isready\n          --health-interval 10s\n          --health-timeout 5s\n          --health-retries 5\n    defaults:\n      run:\n        working-directory: backend\n\n    env:\n      TOZO_QUART_DB_DATABASE_URL: \"postgresql://tozo:tozo@        postgres:5432/tozo_test\"\n\n    steps:\n      - uses: actions/checkout@v3\n\n      - name: Install system dependencies\n        run: apt-get update && apt-get install -y postgresql           postgresql-contrib\n\n      - name: Initialise dependencies\n        run: |\n          pip install pdm\n          pdm install\n\n      - name: Linting\n        run: pdm run lint\n\n      - name: Testing\n        run: pdm run test\n```", "```py\nnpm run format\nnpm run lint\nnpm run test\nnpm run build\n```", "```py\n  frontend:\n    runs-on: ubuntu-latest\n\n    defaults:\n      run:\n        working-directory: frontend\n\n    steps:\n      - name: Use Node.js\n        uses: actions/setup-node@v2\n        with:\n          node-version: '18'\n\n      - uses: actions/checkout@v3\n\n      - name: Initialise dependencies\n        run: npm ci --cache .npm --prefer-offline\n      - name: Check formatting\n        run: npm run format\n\n      - name: Linting\n        run: npm run lint\n\n      - name: Testing\n        run: npm run test\n\n      - name: Build\n        run: npm run build \n```", "```py\ntozo\n├── .github\n│   └── workflows\n├── backend\n│   ├── src\n│   │   └── backend\n│   └── tests\n├── frontend\n│   ├── public\n│   └── src\n└── infrastructure\n```"]