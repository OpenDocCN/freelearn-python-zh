["```py\n$ sudo pip install Pillow\n$ sudo pip install MySQL-python\n$ sudo pip install virtualenv\n\n```", "```py\n    $ cd ~/virtualenvs\n    $ mkdir myproject_env\n    $ cd myproject_env\n    $ virtualenv --system-site-packages .\n    New python executable in ./bin/python\n    Installing setuptools………….done.\n    Installing pip……………done.\n\n    ```", "```py\n    $ source bin/activate\n\n    ```", "```py\n    $ . bin/activate\n\n    ```", "```py\n    (myproject_env)$\n\n    ```", "```py\n    $ deactivate\n\n    ```", "```py\n(myproject_env)$ pip install Django==1.8\n\n```", "```py\n    (myproject_env)$ django-admin.py startproject myproject\n\n    ```", "```py\n    # base.txt\n    Django==1.8\n    djangorestframework\n    -e git://github.com/omab/python-social-auth.git@6b1e301c79#egg=python-social-auth\n\n    ```", "```py\n    # prod.txt\n    -r base.txt\n    ```", "```py\n    # dev.txt\n    -r base.txt\n    django-debug-toolbar\n    selenium\n    ```", "```py\n    (myproject_env)$ pip install -r requirements/dev.txt\n\n    ```", "```py\n(myproject_env)$ pip freeze > requirements/base.txt\n\n```", "```py\n(myproject_env)$ pip freeze > requirements.txt\n\n```", "```py\n(myproject_env)$ pip install -r requirements.txt\n\n```", "```py\n    # models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.utils.encoding import \\\n        python_2_unicode_compatible\n\n    @python_2_unicode_compatible\n    class NewsArticle(models.Model):\n        title = models.CharField(_(\"Title\"), max_length=200)\n        content = models.TextField(_(\"Content\"))\n\n        def __str__(self):\n            return self.title\n\n        class Meta:\n            verbose_name = _(\"News Article\")\n            verbose_name_plural = _(\"News Articles\")\n    ```", "```py\n    from django.utils.six import iteritems\n    d = {\"imported\": 25, \"skipped\": 12, \"deleted\": 3}\n    for k, v in iteritems(d):\n        print(\"{0}: {1}\".format(k, v))\n    ```", "```py\n    try:\n        article = NewsArticle.objects.get(slug=\"hello-world\")\n    except NewsArticle.DoesNotExist as exc:\n        pass\n    except NewsArticle.MultipleObjectsReturned as exc:\n        pass\n    ```", "```py\n    from django.utils import six\n    isinstance(val, six.string_types) # previously basestring\n    isinstance(val, six.text_type) # previously unicode\n    isinstance(val, bytes) # previously str\n    isinstance(val, six.integer_types) # previously (int, long)\n    ```", "```py\n    from django.utils.six.moves import range\n    for i in range(1, 11):\n        print(i)\n    ```", "```py\n    from django.utils import six\n    if six.PY2:\n        print(\"This is Python 2\")\n    if six.PY3:\n        print(\"This is Python 3\")\n    ```", "```py\n    # settings.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import os\n    import sys\n\n    BASE_DIR = os.path.abspath(os.path.join(\n        os.path.dirname(__file__), \"..\"\n    ))\n\n    EXTERNAL_LIBS_PATH = os.path.join(\n        BASE_DIR, \"externals\", \"libs\"\n    )\n    EXTERNAL_APPS_PATH = os.path.join(\n        BASE_DIR, \"externals\", \"apps\"\n    )\n    sys.path = [\"\", EXTERNAL_LIBS_PATH, EXTERNAL_APPS_PATH] + \\\n        sys.path\n    ```", "```py\n(myproject_env)$ python\n>>> import sys\n>>> sys.path\n\n```", "```py\n    # myproject/conf/prod.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from .base import *\n    ```", "```py\n    # myproject/conf/dev.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from .base import *\n    EMAIL_BACKEND = \\\n        \"django.core.mail.backends.console.EmailBackend\"\n    ```", "```py\n    # myproject/settings.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from .conf.dev import *\n\n    DATABASES = {\n        \"default\": {\n            \"ENGINE\": \"django.db.backends.mysql\",\n            \"NAME\": \"myproject\",\n            \"USER\": \"root\",\n            \"PASSWORD\": \"root\",\n        }\n    }\n    ```", "```py\n# settings.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nimport os\n\nBASE_DIR = os.path.abspath(\n    os.path.join(os.path.dirname(__file__), \"..\")\n)\n\nMEDIA_ROOT = os.path.join(BASE_DIR, \"myproject\", \"media\")\n\nSTATIC_ROOT = os.path.join(BASE_DIR, \"myproject\", \"static\")\n\nSTATICFILES_DIRS = (\n    os.path.join(BASE_DIR, \"myproject\", \"site_static\"),\n)\n\nTEMPLATE_DIRS = (\n    os.path.join(BASE_DIR, \"myproject\", \"templates\"),\n)\n\nLOCALE_PATHS = (\n    os.path.join(BASE_DIR, \"locale\"),\n)\n\nFILE_UPLOAD_TEMP_DIR = os.path.join(\n    BASE_DIR, \"myproject\", \"tmp\"\n)\n```", "```py\n    # settings.py\n    # … put this at the end of the file …\n    try:\n        execfile(os.path.join(\n            os.path.dirname(__file__), \"local_settings.py\"\n        ))\n    except IOError:\n        pass\n    ```", "```py\n    # local_settings.py\n    DATABASES = {\n        \"default\": {\n            \"ENGINE\": \"django.db.backends.mysql\",\n            \"NAME\": \"myproject\",\n            \"USER\": \"root\",\n            \"PASSWORD\": \"root\",\n        }\n    }\n\n    EMAIL_BACKEND = \\\n        \"django.core.mail.backends.console.EmailBackend\"\n\n    INSTALLED_APPS += (\n        \"debug_toolbar\",\n    )\n    ```", "```py\n    # utils/misc.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import subprocess\n\n    def get_media_svn_revision(absolute_path):\n        repo_dir = absolute_path\n        svn_revision = subprocess.Popen(\n            'svn info | grep \"Revision\" | awk \\'{print $2}\\'',\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            shell=True, cwd=repo_dir, universal_newlines=True)\n        rev = svn_revision.communicate()[0].partition('\\n')[0]\n        return rev\n    ```", "```py\n    # settings.py\n    # … somewhere after BASE_DIR definition …\n    from utils.misc import get_media_svn_revision\n    STATIC_URL = \"/static/%s/\" % get_media_svn_revision(BASE_DIR)\n    ```", "```py\n    # utils/misc.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import subprocess\n    from datetime import datetime\n\n    def get_git_changeset(absolute_path):\n        repo_dir = absolute_path\n        git_show = subprocess.Popen(\n            'git show --pretty=format:%ct --quiet HEAD',\n            stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n            shell=True, cwd=repo_dir, universal_newlines=True,\n        )\n        timestamp = git_show.communicate()[0].partition('\\n')[0]\n        try:\n            timestamp = \\\n                datetime.utcfromtimestamp(int(timestamp))\n        except ValueError:\n            return \"\"\n        changeset = timestamp.strftime('%Y%m%d%H%M%S')\n        return changeset\n    ```", "```py\n    # settings.py\n    # … somewhere after BASE_DIR definition …\n    from utils.misc import get_git_changeset\n    STATIC_URL = \"/static/%s/\" % get_git_changeset(BASE_DIR)\n    ```", "```py\n# /etc/mysql/my.cnf\n[client]\ndefault-character-set = utf8\n\n[mysql]\ndefault-character-set = utf8\n\n[mysqld]\ncollation-server = utf8_unicode_ci\ninit-connect = 'SET NAMES utf8'\ncharacter-set-server = utf8\n```", "```py\n$ /etc/init.d/mysql restart\n\n```", "```py\n$ export EDITOR=nano\n\n```", "```py\n$ svn propedit svn:ignore myproject\n\n```", "```py\n# Project files and directories\nlocal_settings.py\nstatic\nmedia\ntmp\n\n# Byte-compiled / optimized / DLL files\n__pycache__\n*.py[cod]\n*$py.class\n```", "```py\n# C extensions\n*.so\n\n# PyInstaller\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov\n.tox\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n\n# Translations\n*.pot\n\n# Django stuff:\n*.log\n\n# PyBuilder\ntarget\n```", "```py\n$ svn propedit svn:ignore .\n\n```", "```py\n# Byte-compiled / optimized / DLL files\n__pycache__\n*.py[cod]\n*$py.class\n```", "```py\n# C extensions\n*.so\n\n# PyInstaller\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov\n.tox\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n\n# Translations\n*.pot\n\n# Django stuff:\n*.log\n\n# PyBuilder\ntarget\n```", "```py\n# .gitignore\n# Project files and directories\n/myproject/local_settings.py\n/myproject/static/\n/myproject/tmp/\n/myproject/media/\n\n# Byte-compiled / optimized / DLL files\n__pycache__/\n*.py[cod]\n*$py.class\n\n# C extensions\n*.so\n\n# PyInstaller\n*.manifest\n*.spec\n\n# Installer logs\npip-log.txt\npip-delete-this-directory.txt\n\n# Unit test / coverage reports\nhtmlcov/\n.tox/\n.coverage\n.coverage.*\n.cache\nnosetests.xml\ncoverage.xml\n*.cover\n\n# Translations\n*.pot\n\n# Django stuff:\n*.log\n\n# Sphinx documentation\ndocs/_build/\n\n# PyBuilder\ntarget/\n```", "```py\n# ~/.bash_profile\nalias delpyc=\"find . -name \\\"*.pyc\\\" -delete\"\n```", "```py\n$ delpyc\n\n```", "```py\n# -*- coding: UTF-8 -*-\n# System libraries\nfrom __future__ import unicode_literals\nimport os\nimport re\nfrom datetime import datetime\n\n# Third-party libraries\nimport boto\nfrom PIL import Image\n\n# Django modules\nfrom django.db import models\nfrom django.conf import settings\n\n# Django apps\nfrom cms.models import Page\n\n# Current-app modules\nfrom . import app_settings\n```", "```py\n(myproject_env)$ django-admin.py startapp magazine\n\n```", "```py\n    # magazine/apps.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.apps import AppConfig\n    from django.utils.translation import ugettext_lazy as _\n\n    class MagazineAppConfig(AppConfig):\n        name = \"magazine\"\n        verbose_name = _(\"Magazine\")\n\n        def ready(self):\n            from . import signals\n    ```", "```py\n    # magazine/__init__.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    default_app_config = \"magazine.apps.MagazineAppConfig\"\n    ```", "```py\n    # magazine/signals.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db.models.signals import post_save, post_delete\n    from django.dispatch import receiver\n    from django.conf import settings\n    from .models import NewsArticle\n\n    @receiver(post_save, sender=NewsArticle)\n    def news_save_handler(sender, **kwargs):\n        if settings.DEBUG:\n            print(\"%s saved.\" % kwargs['instance'])\n\n    @receiver(post_delete, sender=NewsArticle)\n    def news_delete_handler(sender, **kwargs):\n        if settings.DEBUG:\n            print(\"%s deleted.\" % kwargs['instance'])\n    ```", "```py\n>>> from django.apps import apps as django_apps\n>>> magazine_app_config = django_apps.get_app_config(\"magazine\")\n>>> magazine_app_config\n<MagazineAppConfig: magazine>\n>>> magazine_app_config.models_module\n<module 'magazine.models' from 'magazine/models.pyc'>\nNewsArticle = django_apps.get_model(\"magazine\", \"NewsArticle\")\n\n```", "```py\n(myproject_env)$ django-admin.py startapp myapp1\n\n```", "```py\n# models.py or app_settings.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.conf import settings\nfrom django.utils.translation import ugettext_lazy as _\n\nSETTING1 = getattr(settings, \"MYAPP1_SETTING1\", u\"default value\")\nMEANING_OF_LIFE = getattr(settings, \"MYAPP1_MEANING_OF_LIFE\", 42)\nSTATUS_CHOICES = getattr(settings, \"MYAPP1_STATUS_CHOICES\", (\n    (\"draft\", _(\"Draft\")),\n    (\"published\", _(\"Published\")),\n    (\"not_listed\", _(\"Not Listed\")),\n))\n```", "```py\n# models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\n\nfrom .app_settings import STATUS_CHOICES\n\nclass NewsArticle(models.Model):\n    # …\n    status = models.CharField(_(\"Status\"),\n        max_length=20, choices=STATUS_CHOICES\n    )\n```", "```py\n# settings.py\n# …\nfrom django.utils.translation import ugettext_lazy as _\nMYAPP1_STATUS_CHOICES = (\n    (\"imported\", _(\"Imported\")),\n    (\"draft\", _(\"Draft\")),\n    (\"published\", _(\"Published\")),\n    (\"not_listed\", _(\"Not Listed\")),\n    (\"expired\", _(\"Expired\")),\n)\n```"]