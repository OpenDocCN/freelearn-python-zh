- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are many options these days for web development frameworks. Grok is one
    of the many that are written in the Python programming language, but it may be
    one of the least known. This book is a step towards getting the word out that
    Grok can be a very good fit for many kinds of web development projects.
  prefs: []
  type: TYPE_NORMAL
- en: For one thing, Grok is based on a body of software known as the Zope Toolkit
    (ZTK), which is a huge set of libraries that are used for web development in Python.
    The ZTK is itself the result of more than ten years of work that started with
    the Zope web framework, which was one of the very first Python web frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Grok is also a modern web framework, which means, it has also learned from the
    innovations of popular web frameworks such as Django or Ruby on Rails. All in
    all, as we go through the book, you will find Grok as a framework that is agile
    enough for small applications, yet powerful enough for really complex projects.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 1, [Getting to Know Grok](ch01.html "Chapter 1. Getting to Know Grok"),
    goes into what makes Grok an attractive option for Python web development. You'll
    learn how Grok makes use of the Zope Toolkit and why this makes Grok powerful
    and flexible. Then some of Grok's most important concepts will be introduced.
    Finally, you'll briefly see how Grok compares to other web development frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 2, [Getting Started with Grok](ch02.html "Chapter 2. Getting Started
    with Grok"), shows you how to install Python on different platforms, in case you
    are new to it. You'll learn what the Python Package Index (PyPI) is and how to
    work with EasyInstall to quickly install packages from it over the network. Next,
    you'll create and run your first project using a tool called grokproject.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 3, [Views](ch03.html "Chapter 3. Views"), explains what views are and
    where in the Grok application code should they be defined. For templating, Grok
    uses the ZPT templating language, so you'll learn how to use it and see examples
    of the most common statements in action. To test this knowledge, we'll see how
    to write a full Grok application using only views. Other topics covered include
    how to get form parameters from a web request, how to add static resources to
    a Grok application, and how to create and work with additional views.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 4, [Models](ch04.html "Chapter 4. Models"), introduces the concept of
    models and what relationship they have with views. Among other key topics, you'll
    learn how to persist model data on the ZODB and how to structure your code to
    maintain the separation of display logic from application logic. Next, we'll see
    what a container is and how to use one. Finally, we'll explain how to use multiple
    models and associate specific views to each.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5, [Forms](ch05.html "Chapter 5. Forms"), will start with a quick demonstration
    of automatic forms. We'll briefly touch the concepts of interface and schema and
    show how they are used to generate forms automatically. Among other things, you'll
    learn how to filter fields and prevent them from appearing in a form, and how
    to change form templates and presentation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 6, [The Catalog: An Object-Oriented Search Engine](ch06.html "Chapter 6. The
    Catalog: An Object-Oriented Search Engine"), will discuss how to search for specific
    objects in the database using a tool called the catalog. We''ll cover what a catalog
    is and how it works, what indexes are and how they work, and how to store data
    in the catalog. Next, we''ll learn how to perform simple queries on the catalog
    and how to use that knowledge to create a search interface for our application.'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 7, [Security](ch07.html "Chapter 7. Security"), will cover authentication
    and authorization. Grok security is based on the concepts of principals (users),
    permissions, and roles. It has a default security policy, which you'll learn to
    modify. Grok has a pluggable authentication system, which allows us to set up
    custom security policies. We'll create one and learn how to manage users as well.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 8, [Application Presentation and Page Layout](ch08.html "Chapter 8. Application
    Presentation and Page Layout"), deals with Grok's layout and presentation machinery
    that is based on the concept of viewlets. We'll learn what viewlet managers and
    viewlets are and how to define a layout using them. Then we'll cover the concepts
    of layers and skins, which allow Grok applications to be delivered with alternative
    presentations and styles. Finally, we'll define an alternative skin for the application.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 9, [Grok and the ZODB](ch09.html "Chapter 9. Grok and the ZODB"), tells
    us more about the ZODB, including how to take advantage of its other features,
    such as blob handling. We'll also learn a bit about ZODB maintenance and the need
    to pack the database frequently. Finally, we'll try our hand at using the ZODB
    as a regular Python library, outside Grok.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 10, [Grok and Relational Databases](ch10.html "Chapter 10. Grok and
    Relational Databases"), will help us find out what facilities Grok has for relational
    database access. Here are some specific things that we will cover why is it important
    that Grok allows developers to use relational databases easily, what an Object
    Relational Mapper is, how to use SQLAlchemy with Grok, and how to change our authentication
    mechanism to use a relational database instead of the ZODB.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 11, [Key Concepts Behind Grok](ch11.html "Chapter 11. Key Concepts Behind
    Grok"), goes into a little more depth with the main concepts behind the Zope Component
    Architecture, a pillar of Grok. We'll start by explaining the main ZCA concepts,
    such as interfaces, adapters, and utilities, using the code from the last ten
    chapters for illustration. We'll learn about one of the main benefits of the ZCA,
    by using some of its patterns to extend our application. Most importantly, we'll
    cover how to extend a package without touching its code.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 12, [Grokkers, Martian, and Agile Configuration](ch12.html "Chapter 12. Grokkers,
    Martian, and Agile Configuration"), will introduce grokkers. A grokker is a piece
    of code that allows developers to use framework functionality by making declarations
    in the code instead of using configuration files. Grok uses a library called Martian
    to create its own grokkers and we'll see how to create our own as well.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 13, [Testing and Debugging](ch13.html "Chapter 13. Testing and Debugging"),
    comments briefly on the importance of testing and then explains how to do testing
    in Grok. We'll start with extending the functional test suite provided by grokproject
    and then go on to other kinds of testing. Finally, we'll cover some debugging
    tools, including live web debuggers.
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 14, [Deployment](ch14.html "Chapter 14. Deployment"), discusses how
    to deploy our application by using the standard paster server. Then, we'll find
    out how to run the application behind Apache, first by using a simple proxy configuration,
    and then under mod_wsgi. Finally, we'll explore how ZEO provides horizontal scalability
    for our application, and will briefly discuss how to make a site support high
    traffic loads by adding caching and load balancing into the mix.
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All you will need for getting the sample Grok application on this book working
    is a computer with a net connection running the Python programming language, version
    2.4 or 2.5\. In Unix environments, you'll also need a C compiler.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book is intended for Python developers who want to create web applications
    but have little or no experience in web development. If you have used other web
    frameworks but are looking for one that enables you to create more complex applications
    without losing agility, you will also benefit from this book. The reader is expected
    to have a general idea of how a web application works.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text are shown as follows: "Now that we have a `title` attribute,
    we can modify the `index.pt` template to show that instead of the old text".'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Under the **Base classes** section there is an **Interfaces provided** section.".'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book what you liked or may have disliked. Reader feedback is important for
    us to develop titles that you really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply send an e-mail to `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book title via the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a book that you need and would like to see us publish, please send
    us a note in the **SUGGEST A TITLE** form on [www.packtpub.com](http://www.packtpub.com)
    or e-mail `<[suggest@packtpub.com](mailto:suggest@packtpub.com)>`.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book on, see our author guide on [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Downloading the example code for the book**'
  prefs: []
  type: TYPE_NORMAL
- en: Visit[http://www.packtpub.com/files/code/7481_Code.zip](http://www.packtpub.com/files/code/7481_Code.zip)
    to directly download the example code.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books maybe a mistake in the text
    or the code we would be grateful if you would report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/support](http://www.packtpub.com/support),
    selecting your book, clicking on the **let us know** link, and entering the details
    of your errata. Once your errata are verified, your submission will be accepted
    and the errata will be uploaded on our website, or added to any list of existing
    errata, under the Errata section of that title. Any existing errata can be viewed
    by selecting your title from [http://www.packtpub.com/support](http://www.packtpub.com/support).
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyright material on the Internet is an ongoing problem across all
    media. At Packt, we take the protection of our copyright and licenses very seriously.
    If you come across any illegal copies of our works, in any form, on the Internet,
    please provide us with the location address or website name immediately so that
    we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors, and our ability to bring
    you valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`
    if you are having a problem with any aspect of the book, and we will do our best
    to address it.
  prefs: []
  type: TYPE_NORMAL
