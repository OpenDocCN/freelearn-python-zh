["```py\n(myproject_env)$ pip install djangocms-installer\n(myproject_env)$ djangocms -p project/myproject myproject\n\n```", "```py\n    {# templates/base.html #}\n    <!DOCTYPE html>\n    {% load i18n cms_tags sekizai_tags menu_tags %}\n    <html lang=\"{{ LANGUAGE_CODE }}\">\n    <head>\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n        <title>{% block title %}{% endblock %}{% trans \"My Website\" %}</title>\n        <link rel=\"icon\" href=\"{{ STATIC_URL }}site/img/favicon.ico\" type=\"image/png\" />\n\n        {% block meta_tags %}{% endblock %}\n\n     {% render_block \"css\" %}\n        {% block base_stylesheet %}\n            <link rel=\"stylesheet\" href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css\" />\n            <link href=\"{{ STATIC_URL }}site/css/style.css\" rel=\"stylesheet\" media=\"screen\" type=\"text/css\" />\n        {% endblock %}\n        {% block stylesheet %}{% endblock %}\n\n        {% block base_js %}\n            <script src=\"img/\"></script>\n            <script src=\"img/\"></script>\n            <script src=\"img/bootstrap.min.js\"></script>\n        {% endblock %}\n        {% block js %}{% endblock %}\n        {% block extrahead %}{% endblock %}\n    </head>\n    <body class=\"{% block bodyclass %}{% endblock %} {{ request.current_page.cssextension.body_css_class }}\">\n     {% cms_toolbar %}\n        {% block page %}\n            <div class=\"wrapper\">\n                <div id=\"header\" class=\"clearfix container\">\n                    <h1>{% trans \"My Website\" %}</h1>\n                    <nav class=\"navbar navbar-default\" role=\"navigation\">\n                        {% block header_navigation %}\n     <ul class=\"nav navbar-nav\">\n     {% show_menu_below_id \"start_page\" 0 1 1 1 %}\n     </ul>\n                        {% endblock %}\n                        {% block language_chooser %}\n     <ul class=\"nav navbar-nav pull-right\">\n     {% language_chooser %}\n     </ul>\n                        {% endblock %}\n                    </nav>\n                </div>\n                <div id=\"content\" class=\"clearfix container\">\n                    {% block content %}\n                    {% endblock %}\n                </div> \n                <div id=\"footer\" class=\"clearfix container\">\n                    {% block footer_navigation %}\n                        <nav class=\"navbar navbar-default\" role=\"navigation\">\n     <ul class=\"nav navbar-nav\">\n     {% show_menu_below_id \"footer_navigation\" 0 1 1 1 %}\n     </ul>\n                        </nav>\n                    {% endblock %}\n                </div>\n            </div>\n        {% endblock %}\n        {% block extrabody %}{% endblock %}\n     {% render_block \"js\" %}\n    </body>\n    </html>\n    ```", "```py\n    {# templates/cms/default.html #}\n    {% extends \"base.html\" %}\n    {% load cms_tags %}\n\n    {% block title %}{% page_attribute \"page_title\" %} - {% endblock %}\n\n    {% block meta_tags %}\n        <meta name=\"description\" content=\"{% page_attribute meta_description %}\"/>\n    {% endblock %}\n\n    {% block content %}\n        <h1>{% page_attribute \"page_title\" %}</h1>\n        <div class=\"row\">\n            <div class=\"col-md-8\">\n                {% placeholder main_content %}\n            </div>\n            <div class=\"col-md-4\">\n                {% placeholder sidebar %}\n            </div>\n        </div>\n    {% endblock %}\n\n    {# templates/cms/start.html #}\n    {% extends \"base.html\" %}\n    {% load cms_tags %}\n\n    {% block meta_tags %}\n        <meta name=\"description\" content=\"{% page_attribute meta_description %}\"/>\n    {% endblock %}\n\n    {% block content %}\n        <!--\n        Here goes very customized website-specific content like slideshows, latest tweets, latest news, latest profiles, etc.\n        -->\n    {% endblock %}\n    ```", "```py\n    # conf/base.py or settings.py\n    CMS_TEMPLATES = (\n        (\"cms/default.html\", gettext(\"Default\")),\n        (\"cms/start.html\", gettext(\"Homepage\")),\n    )\n    ```", "```py\n# conf/base.py or settings.py\n# ...\nfrom __future__ import unicode_literals\ngettext = lambda s: s\n\nLANGUAGES = (\n    (\"en\", \"English\"),\n    (\"de\", \"Deutsch\"),\n    (\"fr\", \"Français\"),\n    (\"lt\", \"Lietuvių kalba\"),\n)\n\nCMS_LANGUAGES = {\n    \"default\": {\n        \"public\": True,\n        \"hide_untranslated\": False,\n        \"redirect_on_fallback\": True,\n    },\n    1: [\n        {\n            \"public\": True,\n            \"code\": \"en\",\n            \"hide_untranslated\": False,\n            \"name\": gettext(\"en\"),\n            \"redirect_on_fallback\": True,\n        },\n        {\n            \"public\": True,\n            \"code\": \"de\",\n            \"hide_untranslated\": False,\n            \"name\": gettext(\"de\"),\n            \"redirect_on_fallback\": True,\n        },\n        {\n            \"public\": True,\n            \"code\": \"fr\",\n            \"hide_untranslated\": False,\n            \"name\": gettext(\"fr\"),\n            \"redirect_on_fallback\": True,\n        },\n        {\n            \"public\": True,\n            \"code\": \"lt\",\n            \"hide_untranslated\": False,\n            \"name\": gettext(\"lt\"),\n            \"redirect_on_fallback\": True,\n        },\n    ],\n}\n```", "```py\n    # myproject/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import patterns, include, url\n    from django.conf import settings\n    from django.conf.urls.static import static\n    from django.contrib.staticfiles.urls import \\\n        staticfiles_urlpatterns\n    from django.conf.urls.i18n import i18n_patterns\n    from django.contrib import admin\n    admin.autodiscover()\n\n    urlpatterns = i18n_patterns(\"\",\n        # remove or comment out the inclusion of app's urls\n     # url(r\"^movies/\", include(\"movies.urls\")),\n\n        url(r\"^admin/\", include(admin.site.urls)),\n        url(r\"^\", include(\"cms.urls\")),\n    )\n    urlpatterns += staticfiles_urlpatterns()\n    urlpatterns += static(settings.MEDIA_URL,\n        document_root=settings.MEDIA_ROOT)\n    ```", "```py\n    # movies/cms_app.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.utils.translation import ugettext_lazy as _\n    from cms.app_base import CMSApp\n    from cms.apphook_pool import apphook_pool\n\n    class MoviesApphook(CMSApp):\n        name = _(\"Movies\")\n        urls = [\"movies.urls\"]\n\n    apphook_pool.register(MoviesApphook)\n    ```", "```py\n    # settings.py\n    CMS_APPHOOKS = (\n        # ...\n        \"movies.cms_app.MoviesApphook\",\n    )\n    ```", "```py\n    {# templates/movies/movies_list.html #}\n\n    Change\n    {% extends \"base.html\" %}\n\n    to\n    {% extends CMS_TEMPLATE %}\n    ```", "```py\n# movies/urls.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.conf.urls import url, patterns\nfrom django.shortcuts import redirect\n\nurlpatterns = patterns(\"movies.views\",\n    url(r\"^$\", lambda request: redirect(\"featured_movie_list\")),\n    url(r\"^editors-picks/$\", \"movie_list\", {\"featured\": True},\n        name='featured_movie_list'),\n    url(r\"^commercial/$\", \"movie_list\", {\"commercial\": True},\n        name=\"commercial_movie_list\"),\n    url(r\"^independent/$\", \"movie_list\", {\"independent\": True},\n        name=\"independent_movie_list\"),\n    url(r\"^(?P<slug>[^/]+)/$\", \"movie_detail\",\n        name=\"movie_detail\"),\n)\n```", "```py\n    # movies/menu.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.utils.translation import ugettext_lazy as _\n    from django.core.urlresolvers import reverse\n    from menus.base import NavigationNode\n    from menus.menu_pool import menu_pool\n    from cms.menu_bases import CMSAttachMenu\n\n    class MoviesMenu(CMSAttachMenu):\n        name = _(\"Movies Menu\")\n\n        def get_nodes(self, request):\n            nodes = [\n                NavigationNode(\n                    _(\"Editor's Picks\"),\n                    reverse(\"featured_movie_list\"),\n                    1,\n                ),\n                NavigationNode(\n                    _(\"Commercial Movies\"),\n                    reverse(\"commercial_movie_list\"),\n                    2,\n                ),\n                NavigationNode(\n                    _(\"Independent Movies\"),\n                    reverse(\"independent_movie_list\"),\n                    3,\n                ),\n            ]\n            return nodes\n\n    menu_pool.register_menu(MoviesMenu)\n    ```", "```py\n    # editorial/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import os\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from django.utils.timezone import now as tz_now\n    from cms.models import CMSPlugin\n    from cms.utils.compat.dj import python_2_unicode_compatible\n\n    def upload_to(instance, filename):\n        now = tz_now()\n        filename_base, filename_ext = \\\n            os.path.splitext(filename)\n        return \"editorial/%s%s\" % (\n            now.strftime(\"%Y/%m/%Y%m%d%H%M%S\"),\n            filename_ext.lower(),\n        )\n\n    @python_2_unicode_compatible\n    class EditorialContent(CMSPlugin):\n        title = models.CharField(_(\"Title\"), max_length=255)\n        subtitle = models.CharField(_(\"Subtitle\"),\n            max_length=255, blank=True)\n        description = models.TextField(_(\"Description\"),\n            blank=True)\n        website = models.CharField(_(\"Website\"),\n            max_length=255, blank=True)\n\n        image = models.ImageField(_(\"Image\"), max_length=255,\n            upload_to=upload_to, blank=True)\n        image_caption = models.TextField(_(\"Image Caption\"),\n            blank=True)\n\n        css_class = models.CharField(_(\"CSS Class\"),\n            max_length=255, blank=True)\n\n        def __str__(self):\n            return self.title\n\n        class Meta:\n            ordering = [\"title\"]\n            verbose_name = _(\"Editorial content\")\n            verbose_name_plural = _(\"Editorial contents\")\n    ```", "```py\n    # editorial/cms_plugins.py\n    # -*- coding: utf-8 -*-\n    from __future__ import unicode_literals\n    from django.utils.translation import ugettext as _\n    from cms.plugin_base import CMSPluginBase\n    from cms.plugin_pool import plugin_pool\n    from .models import EditorialContent\n\n    class EditorialContentPlugin(CMSPluginBase):\n        model = EditorialContent\n        name = _(\"Editorial Content\")\n        render_template = \"cms/plugins/editorial_content.html\"\n\n        fieldsets = (\n            (_(\"Main Content\"), {\n                \"fields\": (\n                    \"title\", \"subtitle\", \"description\",\n                    \"website\"),\n                \"classes\": [\"collapse open\"]\n            }),\n            (_(\"Image\"), {\n                \"fields\": (\"image\", \"image_caption\"),\n                \"classes\": [\"collapse open\"]\n            }),\n            (_(\"Presentation\"), {\n                \"fields\": (\"css_class\",),\n                \"classes\": [\"collapse closed\"]\n            }),\n        )\n\n        def render(self, context, instance, placeholder):\n            context.update({\n                \"object\": instance,\n                \"placeholder\": placeholder,\n            })\n            return context\n\n    plugin_pool.register_plugin(EditorialContentPlugin)\n    ```", "```py\n    # settings.py\n    CMS_PLACEHOLDER_CONF = {\n        \"main_content\": {\n            \"name\": gettext(\"Main Content\"),\n            \"plugins\": (\n                \"EditorialContentPlugin\",\n                \"TextPlugin\",\n            ),\n        },\n        \"cms/magazine.html main_content\": {\n            \"name\": gettext(\"Magazine Main Content\"),\n            \"plugins\": (\n                \"EditorialContentPlugin\",\n                \"TextPlugin\"\n            ),\n            \"extra_context\": {\n                \"editorial_content_template\": \\\n                \"cms/plugins/editorial_content/magazine.html\",\n            }\n        },\n    }\n    ```", "```py\n    {# templates/cms/plugins/editorial_content.html #}\n    {% load i18n %}\n\n    {% if editorial_content_template %}\n        {% include editorial_content_template %}\n    {% else %}\n        <div class=\"item{% if object.css_class %} {{ object.css_class }}{% endif %}\">\n            <!-- editorial content for non-specific placeholders -->\n            <div class=\"img\">\n                {% if object.image %}\n                    <img class=\"img-responsive\" alt=\"{{ object.image_caption|striptags }}\" src=\"img/{{ object.image.url }}\" />\n                {% endif %}\n                {% if object.image_caption %}<p class=\"caption\">{{ object.image_caption|removetags:\"p\" }}</p>\n                {% endif %}\n            </div>\n            <h3><a href=\"{{ object.website }}\">{{ object.title }}</a></h3>\n            <h4>{{ object.subtitle }}</h4>\n            <div class=\"description\">{{ object.description|safe }}</div>\n        </div>\n    {% endif %}\n    ```", "```py\n    {# templates/cms/plugins/editorial_content/magazine.html #}\n    {% load i18n %}\n    <div class=\"well item{% if object.css_class %} {{ object.css_class }}{% endif %}\">\n        <!-- editorial content for non-specific placeholders -->\n        <div class=\"img\">\n            {% if object.image %}\n                <img class=\"img-responsive\" alt=\"{{ object.image_caption|striptags }}\" src=\"img/{{ object.image.url }}\" />\n            {% endif %}\n            {% if object.image_caption %}<p class=\"caption\">{{ object.image_caption|removetags:\"p\" }}</p>\n            {% endif %}\n        </div>\n        <h3><a href=\"{{ object.website }}\">{{ object.title }}</a></h3>\n        <h4>{{ object.subtitle }}</h4>\n        <div class=\"description\">{{ object.description|safe }}</div>\n    </div>\n    ```", "```py\n    # cms_extensions/models.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.db import models\n    from django.utils.translation import ugettext_lazy as _\n    from cms.extensions import PageExtension\n    from cms.extensions.extension_pool import extension_pool\n\n    MENU_ITEM_CSS_CLASS_CHOICES = (\n        (\"featured\", \".featured\"),\n    )\n\n    BODY_CSS_CLASS_CHOICES = (\n        (\"serious\", \".serious\"),\n        (\"playful\", \".playful\"),\n    )\n\n    class CSSExtension(PageExtension):\n        menu_item_css_class = models.CharField(\n            _(\"Menu Item CSS Class\"),\n            max_length=200,\n            blank=True,\n            choices=MENU_ITEM_CSS_CLASS_CHOICES,\n        )\n        body_css_class = models.CharField(\n            _(\"Body CSS Class\"),\n            max_length=200,\n            blank=True,\n            choices=BODY_CSS_CLASS_CHOICES,\n        )\n\n    extension_pool.register(CSSExtension)\n    ```", "```py\n    # cms_extensions/admin.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.contrib import admin\n    from cms.extensions import PageExtensionAdmin\n    from .models import CSSExtension\n\n    class CSSExtensionAdmin(PageExtensionAdmin):\n        pass\n\n    admin.site.register(CSSExtension, CSSExtensionAdmin)\n    ```", "```py\n    # cms_extensions/cms_toolbar.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from cms.api import get_page_draft\n    from cms.toolbar_pool import toolbar_pool\n    from cms.toolbar_base import CMSToolbar\n    from cms.utils import get_cms_setting\n    from cms.utils.permissions import has_page_change_permission\n    from django.core.urlresolvers import reverse, NoReverseMatch\n    from django.utils.translation import ugettext_lazy as _\n    from .models import CSSExtension\n\n    @toolbar_pool.register\n    class CSSExtensionToolbar(CMSToolbar):\n        def populate(self):\n            # always use draft if we have a page\n            self.page = get_page_draft(\n                self.request.current_page)\n\n            if not self.page:\n                # Nothing to do\n                return\n\n            # check global permissions\n            # if CMS_PERMISSIONS is active\n            if get_cms_setting(\"PERMISSION\"):\n                has_global_current_page_change_permission = \\\n                    has_page_change_permission(self.request)\n            else:\n                has_global_current_page_change_permission = \\\n                    False\n                # check if user has page edit permission\n            can_change = self.request.current_page and \\\n                         self.request.current_page.\\\n                             has_change_permission(self.request)\n            if has_global_current_page_change_permission or \\\n                can_change:\n                try:\n                    extension = CSSExtension.objects.get(\n                        extended_object_id=self.page.id)\n                except CSSExtension.DoesNotExist:\n                    extension = None\n                try:\n                    if extension:\n                        url = reverse(\n                   \"admin:cms_extensions_cssextension_change\",\n                            args=(extension.pk,)\n                        )\n                    else:\n                        url = reverse(\n                   \"admin:cms_extensions_cssextension_add\") + \\\n                        \"?extended_object=%s\" % self.page.pk\n                except NoReverseMatch:\n                    # not in urls\n                    pass\n                else:\n                    not_edit_mode = not self.toolbar.edit_mode\n                    current_page_menu = self.toolbar.\\\n                        get_or_create_menu(\"page\")\n                    current_page_menu.add_modal_item(\n                        _(\"CSS\"),\n                        url=url,\n                        disabled=not_edit_mode\n                    )\n    ```", "```py\n    # cms_extensions/menu.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from cms.models import Page\n    from menus.base import Modifier\n    from menus.menu_pool import menu_pool\n\n    class CSSModifier(Modifier):\n        def modify(self, request, nodes, namespace, root_id,\n            post_cut, breadcrumb):\n            if post_cut:\n                return nodes\n            for node in nodes:\n                try:\n                    page = Page.objects.get(pk=node.id)\n                except:\n                    continue\n                try:\n                    page.cssextension\n                except:\n                    pass\n                else:\n                    node.cssextension = page.cssextension\n            return nodes\n\n    menu_pool.register_modifier(CSSModifier)\n    ```", "```py\n    {# templates/base.html #}\n    <body class=\"{% block bodyclass %}{% endblock %}{% if request.current_page.cssextension %}{{ request.current_page.cssextension.body_css_class }}{% endif %}\">\n    ```", "```py\n    {# templates/menu/menu.html #}\n    {% load i18n menu_tags cache %}\n\n    {% for child in children %}\n        <li class=\"{% if child.ancestor %}ancestor{% endif %}{% if child.selected %} active{% endif %}{% if child.children %} dropdown{% endif %}{% if child.cssextension %} {{ child.cssextension.menu_item_css_class }}{% endif %}\">\n            {% if child.children %}<a class=\"dropdown-toggle\" data-toggle=\"dropdown\" href=\"#\">{{ child.get_menu_title }} <span class=\"caret\"></span></a>\n                <ul class=\"dropdown-menu\">\n                    {% show_menu from_level to_level extra_inactive extra_active template \"\" \"\" child %}\n                </ul>\n            {% else %}\n                <a href=\"{{ child.get_absolute_url }}\"><span>{{ child.get_menu_title }}</span></a>\n            {% endif %}\n        </li>\n    {% endfor %}\n    ```"]