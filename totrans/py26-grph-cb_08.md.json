["```py\n# file_make_1 .py\n# >>>>>>>>>>>>>>\nfilename = \"constr/brand_new_file.dat\"\nFILE = open(filename,\"w\")\n\n```", "```py\n# file_read_1 .py\n# >>>>>>>>>>>\nfilename = \"constr/brand_new_file.dat\"\nFILE = open(filename,\"r\")\n\n```", "```py\n# file_write_1.py\n#>>>>>>>>>>>>>\n# Let's create a file and write it to disk.\nfilename = \"/constr/test_write_1.dat\"\nfilly = open(filename,\"w\") # Create a file object, in write # mode\nfor i in range(0,2):\nfilly.write(\"everything inside quotes is a string, even 3.1457\")\nfilly.writelines(\"\\n\")\nfilly.write(\"How will stored data be delimited so we can read \\ chunks of it into elements of list, tuple or dictionart?\")\nfilly.writelines(\"\\n\")\n#filly.close()\n\n```", "```py\n# file_write_2.py\n#>>>>>>>>>>>>>\n# Let's create a file and write it to disk.\nfilename_1 = \"/constr/test_write_1.dat\"\nfilly = open(filename_1,\"w\") # Create a file object, in # write mode\nfilly.write(\"This is number one and the fun has just begun\")\nfilename_2 = \"/constr/test_write_2.dat\"\nfilly = open(filename_2,\"w\") # Create a file object, in # write mode\nfilly.write(\"This is number two and he has lost his shoe\")\nfilename_3 = \"/constr/test_write_3.dat\"\nfilly = open(filename_3,\"w\") # Create a file object, in # write mode\nfilly.write(\"This is number three and a bump is on his knee\")\n#filly.close()\n\n```", "```py\n# file_append_1.py\n#>>>>>>>>>>>>>>>>>\n# Open an existing file and add (append) data to it.\nfilename_1 = \"/constr/test_write_1.dat\"\nfilly = open(filename_1,\"a\") # Open a file in append mode\nfilly.write(\"\\n\")\nfilly.write(\"This is number four and he has reached the door\")\nfor i in range(0,5):\nfilename_2 = \"/constr/test_write_2.dat\"\nfilly = open(filename_2,\"a\") # Create a file in append mode\nfilly.write(\"This is number five and the cat is still alive\")\nfilename_3 = \"/constr/test_write_2.dat\"\nfilly = open(filename_3,\"w\") # Open an existing file in # write mode\n# The command below WILL fail \"w\" is really \"overwrite\"\nfilly.write(\"This is number six and they cannot find the fix\")\n\n```", "```py\n# save_curly_vine_1.py\n#>>>>>>>>>>>>>>>>>\nvine_x = [23, 20, 11, 9, 29, 52, 56, 39, 24, 32, 53, 69, 63, \\ 47, 35, 35, 51,\\\n82, 116, 130, 95, 67, 95, 114, 95, 78, 95, 103, 95, 85, 95, 94.5]\nvine_y = [36, 44, 39, 22, 16, 32, 56, 72, 91, 117,125, 138, 150, \\ 151, 140, 123, 107,\\\n92, 70, 41, 5, 41, 66, 41, 24, 41, 53, 41, 33, 41, 41, 39]\nvine_1 = open('/constr/vector_shapes/curley_vine_1.txt', 'w')\nvine_1.write(str(vine_x ))\nvine_1.write(\"\\n\")\nvine_1.write(str(vine_y ))\n\n```", "```py\n# retrieve_curly_vine_1.py\n#>>>>>>>>>>>>>>>>>>>>>\n#vine_x = []\nvine_1 = open('/constr/vector_shapes/curley_vine_1.txt', 'r')\nvine_x = eval(vine_1.readline())\nvine_y = eval(vine_1.readline())\n# Tests to confirm that everything worked.\nprint \"vine_x = \",vine_x\nprint vine_x[31]\nprint \"vine_y = \",vine_y\nprint vine_y[6]\n\n```", "```py\n# mouseclick_1.py\n#>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nframe = Frame(root, width=100, height=100)\ndef callback(event):\nprint \"clicked at\", event.x, event.y\nframe.bind(\"<Button-1>\", callback)\nframe.grid()\nroot.mainloop()\nroot.destroy()\n\n```", "```py\n# mouse_shape_recorder_1.py\n#>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(\"Mouse Drawn Shape Saver\")\ncw = 600 # canvas width\nch = 400 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"#ffffff\")\nchart_1.grid(row=1, column=1)\npt = [0]\nx0 = [0]\ny0 = [0]\ncount_point = 0\nx_end = 10\ny_end = 10\n#============================================\n# Create a new circle where the click happens and draw a new line\n# segment to the last point (where the mouse was left clicked).\ndef callback_1(event): # Left button pressed.\nglobal count_point, x_end, y_end\nglobal x0, y0\nglobal x0_n, y0_n, pt\nx_start = x_end\ny_start = y_end\nx_end = event.x\ny_end = event.y\nchart_1.create_line(x_start, y_start , x_end,y_end , fill = \\ \"#0088ff\")\nchart_1.create_oval(x_end-5,y_end-5, x_end+5, y_end+5, outline = \\ \"#0088ff\")\ncount_point += 1\npt = pt + [count_point]\nx0 = x0 + [x_end] # extend list of all points\ny0 = y0 + [y_end]\nchart_1.bind(\"<Button-1>\", callback_1) # <button-1> left mouse button\n#==============================================\n# 1\\. Button control to store segmented line\ndef callback_6():\nglobal x0, y0\nxy_points = open('/constr/shape_xy_1.txt', 'w')\nxy_points.write(str(x0))\nxy_points.write('\\n')\nxy_points.write(str(y0))\nxy_points.close()\nButton(root, text=\"Store\", command=callback_6).grid(row=0, column=2)\n#=============================================\n# 2\\. Button control to retrieve line from file.\ndef callback_7():\nglobal x0, y0 # Stored list of mouse-click positions.\nxy_points = open('/constr/shape_xy_1.txt', 'r')\nx0 = eval(xy_points.readline())\ny0 = eval(xy_points.readline())\nxy_points.close()\nprint \"x0 = \",x0\nprint \"y0 = \",y0\nfor i in range(1, count_point): # Re-plot the stored and # retreived line\nchart_1.create_line(x0[i], y0[i] , x0[i+1], y0[i+1] , \\ fill = \"#0088ff\")\nchart_1.create_oval(x_end - 5,y_end - 5, x_end + 5, \\ y_end + 5 , outline = \"#0088ff\")\nButton(root, text=\"retrieve\", command=callback_7).grid(row=1, \\ column=2)\n#=============================================\n# 3\\. Button control to clear canvas\ndef callback_8():\nchart_1.delete(ALL)\nButton(root, text=\"CLEAR\", command=callback_8).grid(row=2, column=2)\nroot.mainloop()\n\n```", "```py\n# mouse_shape_editor_1.py\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport math\nroot = Tk()\nroot.title(\"Left drag to draw, right to re-position.\")\ncw = 600 # canvas width\nch = 650 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"#ffffff\")\nchart_1.grid(row=1, column=1)\nlinedrag = {'x_start':0, 'y_start':0, 'x_end':0, 'y_end':0}\nmap_distance = 0\ndist_meter = 0\nx_initial = 0\ny_initial = 0\n#==============================================\n# Adjust the distance between points if desired\nway_points = 50 # Distance between editable way-points\n#==============================================\nmagic_circle_flag = 0 # 0-> normal dragging, 1 -> double-click: # Pull point.\npoint_num = 0\nx0 = []\ny0 = []\n#================================================\ndef separation(x_now, y_now, x_dot, y_dot): # DISTANCE MEASUREMENT\n# Distance to points - used to find out if the mouse # clicked inside a circle\nsum_squares = (x_now - x_dot)**2 + (y_now -y_dot)**2\ndistance= int(math.sqrt(sum_squares)) # Get Pythagorean # distance\nreturn( distance)\n#================================================\n# CALLBACK EVENT PROCESSING FUNCTIONS\ndef callback_1(event): # LEFT DOWN\nglobal x_initial, y_initial\nx_initial = event.x\ny_initial = event.y\ndef callback_2(event): # LEFT DRAG\nglobal x_initial, y_initial\nglobal map_distance, dist_meter\nglobal x0, y0\nlinedrag['x_start'] = linedrag['x_end'] # update positions\nlinedrag['y_start'] = linedrag['y_end']\nlinedrag['x_end'] = event.x\nlinedrag['y_end'] = event.y\nincrement = separation(linedrag['x_start'],linedrag['y_start'], \\ linedrag['x_end'], linedrag['y_end'] )\nmap_distance += increment # Total distance - # potentiasl use as a map odometer.\ndist_meter += increment # Distance from last circle\nif dist_meter>way_points: # Action at way-points\nx0.append(linedrag['x_end']) # append to line\ny0.append(linedrag['y_end'])\nxb = linedrag['x_end'] - 5 ; yb = linedrag['y_end'] - 5 # Centre circle on line\nx1 = linedrag['x_end'] + 5 ; y1 = linedrag['y_end'] + 5\nchart_1.create_oval(xb,yb, x1,y1, outline = \"green\")\ndist_meter = 0 # re-zero the odometer.\nlinexy = [ x_initial, y_initial, linedrag['x_end'] , \\ linedrag['y_end'] ]\nchart_1.create_line(linexy, fill='green')\nx_initial = linedrag['x_end'] # start of next segment\ny_initial = linedrag['y_end']\ndef callback_5(event): # RIGHT CLICK\nglobal point_num, magic_circle_flag, x0, y0\n# Measure distances to each point in turn, determine if any are # inside magic circle.\n# That is, identify which point has been clicked on.\nfor i in range(0, len(x0)):\nd = separation(event.x, event.y, x0[i], y0[i])\nif d <= 5:\npoint_num = i # this is the index that controls editing\nmagic_circle_flag = 1\nchart_1.create_oval(x0[i] - 10,y0[i] - 10, x0[i] + 10, \\ y0[i] + 10 , width = 4, outline = \"#ff8800\")\nx0[i] = event.x\ny0[i] = event.y\ndef callback_6(event): # RIGHT RELEASE\nglobal point_num, magic_circle_flag, x0, y0\nif magic_circle_flag == 1: # The point is going to be # repositioned.\nx0[point_num] =event.x\ny0[point_num] =event.y\nchart_1.delete(ALL)\nchart_1.update() # Refreshes the drawing on the # canvas.\nq=[]\nfor i in range(0,len(x0)):\nq.append(x0[i])\nq.append(y0[i])\nchart_1.create_oval(x0[i] - 5,y0[i] - 5, x0[i] + 5, \\ y0[i] + 5 , outline = \"#00ff00\")\nchart_1.create_line(q , fill = \"#ff00ff\") # Now show the # new positions\nmagic_circle_flag = 0\n#==============================\nchart_1.bind(\"<Button-1>\", callback_1) # <Button-1> ->LEFT mouse # button\nchart_1.bind(\"<B1-Motion>\", callback_2)\nchart_1.bind(\"<Button-3>\", callback_5) # <Button-3> ->RIGHT mouse # button\nchart_1.bind(\"<ButtonRelease-3>\", callback_6)\nroot.mainloop()\n\n```", "```py\n# all_mouse_actions_1.py\n#>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(\"Mouse follower\")\n# The Canvas here is bound to the mouse events\ncw = 200 # canvas width\nch = 100 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"#ffffff\")\nchart_1.grid(row=1, column=1)\n#========= Left Mouse Button Events ===============\n# callback events\ndef callback_1(event):\nprint \"left mouse clicked\"\ndef callback_2(event):\nprint \"left dragged\"\ndef callback_3(event):\nprint \"left doubleclick\"\ndef callback_4(event):\nprint \"left released\"\n#======== Center Mouse Button Events ======================\ndef callback_5(event):\nprint \"center mouse clicked\"\ndef callback_6(event):\nprint \"center dragged\"\ndef callback_7(event):\nprint \"center doubleclick\"\ndef callback_8(event):\nprint \"center released\"\n#======== Right Mouse Button Events ======================\ndef callback_9(event):\nprint \"right mouse clicked\"\ndef callback_10(event):\nprint \"right dragged\"\ndef callback_11(event):\nprint \"right doubleclick\"\ndef callback_12(event):\nprint \"right released\"\n# <button-1> is the left mouse button\nchart_1.bind(\"<Button-1>\", callback_1)\nchart_1.bind(\"<B1-Motion>\", callback_2)\nchart_1.bind(\"<Double-1>\", callback_3)\nchart_1.bind(\"<ButtonRelease-1>\", callback_4)\n# <button-2> is the center mouse button\nchart_1.bind(\"<Button-2>\", callback_5)\nchart_1.bind(\"<B2-Motion>\", callback_6)\nchart_1.bind(\"<Double-2>\", callback_7)\nchart_1.bind(\"<ButtonRelease-2>\", callback_8)\n# <button-3> is the right mouse button\nchart_1.bind(\"<Button-3>\", callback_9)\nchart_1.bind(\"<B3-Motion>\", callback_10)\nchart_1.bind(\"<Double-3>\", callback_11)\nchart_1.bind(\"<ButtonRelease-3>\", callback_12)\nroot.mainloop()\n#>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```"]