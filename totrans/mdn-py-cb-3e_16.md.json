["```py\n    % python -m venv .venv\n    ```", "```py\n    % source .venv/bin/activate\n    ```", "```py\n    > .venv\\Scripts\\activate\n    ```", "```py\nC:\\Users\\Administrator>.venv\\Scripts\\activate \n\n(.venv) C:\\Users\\Administrator>\n```", "```py\n% deactivate\n```", "```py\n% python -m venv --prompt ch17 --without-pip .venv\n```", "```py\n    pydantic \n\n    beautifulsoup4 \n\n    types-beautifulsoup4 \n\n    jupyterlab \n\n    matplotlib \n\n    pytest \n\n    memray\n    ```", "```py\n    % source .venv/bin/activate\n    ```", "```py\n    (ch17) % python -m pip install -r requirements.txt\n    ```", "```py\n% (ch17) deactivate \n\n% python -m venv --clear --prompt ch17 .venv \n\n% source .venv/bin/activate \n\n% (ch17) python -m pip install -r requirements.txt\n```", "```py\n% source .venv/bin/activate \n\n% (ch17) python -m pip freeze >audit_sfl.txt\n```", "```py\n    [project] \n\n    name = \"project_name\" \n\n    version = \"2024.1.0\" \n\n    description = \"A useful description.\" \n\n    requires-python = \">=3.12\" \n\n    authors = [ \n\n      {email = \"your.email@example.com\", name = \"Your Name\"} \n\n    ] \n\n    dependencies = [ \n\n        your dependencies \n\n    ] \n\n    readme = \"README.md\" \n\n    license = {file = \"LICENSE\"}\n    ```", "```py\n    [build-system] \n\n    build-backend = \"setuptools.build_meta\" \n\n    requires = [ \n\n        \"setuptools\", \n\n    ]\n    ```", "```py\n\n    >>> from pathlib import Path \n\n    >>> import tomllib \n\n    >>> doc = Path(\"pyproject.toml\").read_text() \n\n    >>> tomllib.loads(doc)\n    ```", "```py\n[project.optional-dependencies] \n\ntest = [ \n\n    \"tox\", \n\n    \"ruff\", \n\n    \"mypy\", \n\n    \"pytest\", \n\n    \"pytest-cov\" \n\n] \n\ndev = [ \n\n    \"pip-tools\", \n\n    \"sphinx\" \n\n]\n```", "```py\n(ch17) % python -m pip install pip-tools\n```", "```py\n    (ch17) % pip-compile\n    ```", "```py\n    (ch17) % pip-compile --extra test -o requirements-test.txt\n    ```", "```py\n    (ch17) % pip-compile --all-extras -o requirements-dev.txt\n    ```", "```py\n(ch17) % pip-compile \n\nBackend subprocess exited when trying to invoke get_requires_for_build_wheel \n\nFailed to parse /Users/slott/Documents/Writing/Python/Python Cookbook 3e/src/ch17/pyproject.toml\n```", "```py\n(ch17) % pip install -e .\n```", "```py\n    % conda create -n cookbook3 python=3.12\n    ```", "```py\n    (base) % conda activate cookbook3\n    ```", "```py\n    (cookbook3) % conda install pydantic beautifulsoup4 jupyterlab matplotlib pytest memray\n    ```", "```py\n    (cookbook3) % conda env export >environment.yml\n    ```", "```py\n(cookbook3) % conda update pydantic\n```", "```py\n(cookbook3) % conda install --channel=conda-forge tox\n```", "```py\n    % curl -sSL https://install.python-poetry.org | python3 -\n    ```", "```py\n    export PATH=\"~/.local/bin:$PATH\"\n    ```", "```py\n    PS C:\\> (Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -\n    ```", "```py\n    %  poetry new recipe_05\n    ```", "```py\n    % poetry shell\n    ```", "```py\n    % (recipe-05-py3.11) poetry add pydantic beautifulsoup4 jupyterlab matplotlib pytest memray\n    ```", "```py\n% (recipe-05-py3.11) poetry update pydantic\n```", "```py\n[tox] \n\nisolated_build = true \n\n[testenv] \n\nskip_install = true \n\nallowlist_externals = poetry \n\ncommands_pre = \n\n    poetry install \n\ncommands = \n\n    poetry run pytest tests/ --import-mode importlib\n```", "```py\napple == 2.7.18 \n\npie_filling = 3.1.4 \n\npastry_crust >= 4.2 \n\noven == 0.9.1a\n```"]