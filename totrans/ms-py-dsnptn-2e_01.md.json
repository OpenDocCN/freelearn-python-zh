["```py\npython3.12 –m pip install -–user mypy\n```", "```py\n    class PaymentBase:\n        def __init__(self, amount: int):\n            self.amount: int = amount\n        def process_payment(self):\n            pass\n    ```", "```py\n    class CreditCard(PaymentBase):\n        def process_payment(self):\n            msg = f\"Credit card payment: {self.amount}\"\n            print(msg)\n    class PayPal(PaymentBase):\n        def process_payment(self):\n            msg = f\"PayPal payment: {self.amount}\"\n            print(msg)\n    ```", "```py\n    if __name__ == \"__main__\":\n        payments = [CreditCard(100), PayPal(200)]\n        for payment in payments:\n            payment.process_payment()\n    ```", "```py\nclass PaymentBase:\n    def __init__(self, amount: int):\n        self.amount: int = amount\n    def process_payment(self):\n        pass\nclass CreditCard(PaymentBase):\n    def process_payment(self):\n        msg = f\"Credit card payment: {self.amount}\"\n        print(msg)\nclass PayPal(PaymentBase):\n    def process_payment(self):\n        msg = f\"PayPal payment: {self.amount}\"\n        print(msg)\nif __name__ == \"__main__\":\n    payments = [CreditCard(100), PayPal(200)]\n    for payment in payments:\n        payment.process_payment()\n```", "```py\npython3.12 ch01/encapsulate.py\n```", "```py\nCredit card payment: 100\nPayPal payment: 200\n```", "```py\n    class Circle:\n        def __init__(self, radius: int):\n            self._radius: int = radius\n    ```", "```py\n        @property\n        def radius(self):\n            return self._radius\n    ```", "```py\n        @radius.setter\n        def radius(self, value: int):\n            if value < 0:\n                raise ValueError(\"Radius cannot be negative!\")\n            self._radius = value\n    ```", "```py\n    if __name__ == \"__main__\":\n        circle = Circle(10)\n        print(f\"Initial radius: {circle.radius}\")\n        circle.radius = 15\n        print(f\"New radius: {circle.radius}\")\n    ```", "```py\nclass Circle:\n    def __init__(self, radius: int):\n        self._radius: int = radius\n    @property\n    def radius(self):\n        return self._radius\n    @radius.setter\n    def radius(self, value: int):\n        if value < 0:\n            raise ValueError(\"Radius cannot be negative!\")\n        self._radius = value\nif __name__ == \"__main__\":\n    circle = Circle(10)\n    print(f\"Initial radius: {circle.radius}\")\n    circle.radius = 15\n    print(f\"New radius: {circle.radius}\")\n```", "```py\npython3.12 ch01/encapsulate_bis.py\n```", "```py\nInitial radius: 10\nNew radius: 15\n```", "```py\n    class Engine:\n        def start(self):\n            print(\"Engine started\")\n    ```", "```py\n    class Car:\n        def __init__(self):\n            self.engine = Engine()\n        def start(self):\n            self.engine.start()\n            print(\"Car started\")\n    ```", "```py\n    if __name__ == \"__main__\":\n        my_car = Car()\n        my_car.start()\n    ```", "```py\nclass Engine:\n    def start(self):\n        print(\"Engine started\")\nclass Car:\n    def __init__(self):\n        self.engine = Engine()\n    def start(self):\n        self.engine.start()\n        print(\"Car started\")\nif __name__ == \"__main__\":\n    my_car = Car()\n    my_car.start()\n```", "```py\npython3.12 ch01/composition.py\n```", "```py\nEngine started\nCar started\n```", "```py\n    from abc import ABC, abstractmethod\n    ```", "```py\n    class MyInterface(ABC):\n        @abstractmethod\n        def do_something(self, param: str):\n            pass\n    ```", "```py\n    class MyClass(MyInterface):\n        def do_something(self, param: str):\n            print(f\"Doing something with: '{param}'\")\n    ```", "```py\n    if __name__ == \"__main__\":\n        MyClass().do_something(\"some param\")\n    ```", "```py\nfrom abc import ABC, abstractmethod\nclass MyInterface(ABC):\n    @abstractmethod\n    def do_something(self, param: str):\n        pass\nclass MyClass(MyInterface):\n    def do_something(self, param: str):\n        print(f\"Doing something with: '{param}'\")\nif __name__ == \"__main__\":\n    MyClass().do_something(\"some param\")\n```", "```py\npython3.12 ch01/abstractclass.py\n```", "```py\nDoing something with: 'some param'\n```", "```py\nfrom typing import Protocol\nclass Flyer(Protocol):\n    def fly(self) -> None:\n        ...\n```", "```py\n    from abc import ABC, abstractmethod\n    ```", "```py\n    class Logger(ABC):\n        @abstractmethod\n        def log(self, message: str):\n            pass\n    ```", "```py\n    class ConsoleLogger(Logger):\n        def log(self, message: str):\n            print(f\"Console: {message}\")\n    class FileLogger(Logger):\n        def log(self, message: str):\n            with open(\"log.txt\", \"a\") as f:\n                f.write(f\"File: {message}\\n\")\n    ```", "```py\n    def log_message(logger: Logger, message: str):\n        logger.log(message)\n    ```", "```py\n    if __name__ == \"__main__\":\n        log_message(ConsoleLogger(), \"A console log.\")\n        log_message(FileLogger(), \"A file log.\")\n    ```", "```py\nfrom abc import ABC, abstractmethod\nclass Logger(ABC):\n    @abstractmethod\n    def log(self, message: str):\n        pass\nclass ConsoleLogger(Logger):\n    def log(self, message: str):\n        print(f\"Console: {message}\")\nclass FileLogger(Logger):\n    def log(self, message: str):\n        with open(\"log.txt\", \"a\") as f:\n            f.write(f\"File: {message}\\n\")\ndef log_message(logger: Logger, message: str):\n    logger.log(message)\nif __name__ == \"__main__\":\n    log_message(ConsoleLogger(), \"A console log.\")\n    log_message(FileLogger(), \"A file log.\")\n```", "```py\npython3.12 ch01/interfaces.py\n```", "```py\nConsole: A console log.\n```", "```py\nFile: A file log.\n```", "```py\n    from typing import Protocol\n    ```", "```py\n    class Logger(Protocol):\n        def log(self, message: str):\n            ...\n    ```", "```py\nfrom typing import Protocol\nclass Logger(Protocol):\n    def log(self, message: str):\n        ...\nclass ConsoleLogger:\n    def log(self, message: str):\n        print(f\"Console: {message}\")\nclass FileLogger:\n    def log(self, message: str):\n        with open(\"log.txt\", \"a\") as f:\n            f.write(f\"File: {message}\\n\")\ndef log_message(logger: Logger, message: str):\n    logger.log(message)\nif __name__ == \"__main__\":\n    log_message(ConsoleLogger(), \"A console log.\")\n    log_message(FileLogger(), \"A file log.\")\n```", "```py\nmypy ch01/interfaces_bis.py\n```", "```py\nSuccess: no issues found in 1 source file\n```", "```py\npython3.12 ch01/interfaces_bis.py\n```", "```py\nConsole: A console log.\n```", "```py\n    class MessageService:\n        def __init__(self, sender):\n            self.sender = sender\n        def send_message(self, message):\n            self.sender.send(message)\n    ```", "```py\n    class EmailSender:\n        def send(self, message):\n            print(f\"Sending email: {message}\")\n    ```", "```py\n    class SMSSender:\n        def send(self, message):\n            print(f\"Sending SMS: {message}\")\n    ```", "```py\n    if __name__ == \"__main__\":\n        email_service = MessageService(EmailSender())\n        email_service.send_message(\"Hello via Email\")\n        sms_service = MessageService(SMSSender())\n        sms_service.send_message(\"Hello via SMS\")\n    ```", "```py\nclass MessageService:\n    def __init__(self, sender):\n        self.sender = sender\n    def send_message(self, message: str):\n        self.sender.send(message)\nclass EmailSender:\n    def send(self, message: str):\n        print(f\"Sending email: {message}\")\nclass SMSSender:\n    def send(self, message: str):\n        print(f\"Sending SMS: {message}\")\nif __name__ == \"__main__\":\n    email_service = MessageService(EmailSender())\n    email_service.send_message(\"Hello via Email\")\n    sms_service = MessageService(SMSSender())\n    sms_service.send_message(\"Hello via SMS\")\n```", "```py\npython3.12 ch01/loose_coupling.py\n```", "```py\nSending email: Hello via Email\nSending SMS: Hello via SMS\n```"]