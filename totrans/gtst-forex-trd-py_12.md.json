["```py\nimport csv\nfrom datetime import datetime\n```", "```py\nclass slidingWindow:\n    def __init__(self, len):\n        self.data = [0 for i in range(len)]\n    def add(self, element):\n        self.data.pop(0)\n        self.data.append(element)\n    def last(self):\n        return self.data[-1]\n    def previous(self):\n        return self.data[-2]\n```", "```py\nsource_file = open(\"LMAX AUD_USD 1 Minute.txt\")\ndest_file = open(\"AUDUSD_daily.csv\", \"w\")\ncsvFile = csv.DictReader(source_file)\nall_data = list(csvFile)\n```", "```py\ndest_file.write((\"Date,Time,Open,High,Low,Close\\n\"))\n```", "```py\ntimestamp = slidingWindow(2)\nbar = {'Open': 0, 'High': 0, 'Low': 0, 'Close': 0}\n```", "```py\nfor sample in all_data:\n    open = float(sample[' <Open>'])\n    high = float(sample[' <High>'])\n    low = float(sample[' <Low>'])\n    close = float(sample[' <Close>'])\n    ts = datetime.strptime(sample['<Date>'] + 'T' + sample[' <Time>'] + 'Z', \"%m/%d/%YT%H:%M:%SZ\")\n    timestamp.add(ts)\n```", "```py\n    if timestamp.previous() != 0:\n        if timestamp.last().date() != timestamp.previous().date():\n            if bar['Open'] != 0:\n                dest_file.write(','.join(map(str,[*bar.values()])) + \"\\n\")\n            bar = {'Date': timestamp.last().date(), 'Time': timestamp.last().time(), 'Open': open, 'High': high, 'Low': low, 'Close': close}\n```", "```py\n    bar['High'] = max([bar['High'], high])\n    bar['Low'] = min([bar['Low'], low])\n    bar['Close'] = close\n    bar['Time'] = timestamp.last().time()\n```", "```py\ndest_file.close()\n```", "```py\nif (timestamp.last().date() != timestamp.previous().date() and str(timestamp.last().time()) != '00:00:00') or (str(timestamp.previous().time()) == '00:00:00'):\n```", "```py\nclass slidingWindow:\n    def __init__(self, len):\n        self.data = [0 for i in range(len)]\n    def add(self, element):\n        self.data.pop(0)\n        self.data.append(element)\n```", "```py\ndata_window_small = slidingWindow(5)\ndata_window_large = slidingWindow(20)\n```", "```py\ndef moving_average(data):\n    return sum(data) / len(data)\n```", "```py\n        ####################################\n        #     trade logic starts here     #\n        ####################################\n```", "```py\n        close = bar['Close']\n        data_window_small.add(close)\n        data_window_large.add(close)\n        ma_small = moving_average(data_window_small.data)\n        ma_large = moving_average(data_window_large.data)\n```", "```py\n        if close < ma_small and ma_small < ma_large and System.market_position >= 0:\n```", "```py\n            order = {}\n            order['Type'] = 'Market'\n            order['Price'] = close\n            order['Side'] = 'Sell'\n            if System.market_position == 0:\n                order['Size'] = 10000\n            else:\n                order['Size'] = 20000\n            orders_stream.put(order)\n```", "```py\n        if close > ma_small and ma_small > ma_large and System.market_position <= 0:\n            order = {}\n            order['Type'] = 'Market'\n            order['Price'] = close\n            order['Side'] = 'Buy'\n            if System.market_position == 0:\n                order['Size'] = 10000\n            else:\n                order['Size'] = 20000\n            orders_stream.put(order)\n        ####################################\n        #      trade logic ends here      #\n        ####################################\n```"]