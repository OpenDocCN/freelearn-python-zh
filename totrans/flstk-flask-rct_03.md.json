["```py\nimport React from 'react';class App extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: \"Andrew\",\n    }\n    this.updateNameState = this.updateNameState.bind(this);\n  }\n  updateNameState(){\n    this.setState({\n      name: \"Andrew Peter\"}\n);\n  }\n  render() {\n    return(\n      <div>\n        <p>{this.state.name}</p>\n        <button onClick={this.updateNameState}>Display Full\n          Name</button>\n      </div>\n    );\n  }\n}\nexport default App;\n```", "```py\n    constructor(prop) {  super(props);  this.state = {    name: \"Andrew\",}\n    ```", "```py\n    this.updateNameState = this.updateNameState.bind(this);\n    ```", "```py\n            updateNameState(){          this.setState({            name:\"Andrew Peter\"          });        }\n    ```", "```py\n    <button onClick={this.updateNameState}>  ChangeToFullName</button>\n    ```", "```py\nconst [state, stateUpdater] = useState(initialState);\n```", "```py\nimport React, {useState} from 'react';const App = () => {\n  const [count, setCount] = useState(0);\n  const handleIncrementByTen = () => {\n    setCount(count + 10);\n  };\n  const handleDecrementByTen = () => {\n    setCount(count - 10);\n  };\n  const resetCountHandler = () => {\n    setCount(0)\n  };\n```", "```py\n  return (    <div>\n      Initial Count: {count}\n      <hr />\n      <div>\n        <button type=\"button\"\n          onClick={handleIncrementByTen}>\n          Increment by 10\n        </button>\n        <button type=\"button\"\n          onClick={handleDecrementByTen}>\n          Decrement by 10\n        </button>\n        <button type=\"button\" onClick={resetCountHandler}>\n          Reset to Initial State\n        </button>\n      </div>\n    </div>\n  );\n};\nexport default App;\n```", "```py\n    const [count, setCount] = useState(0);//using destructuring array to write a concise code.\n    ```", "```py\n      const handleIncrementByTen = () => {    setCount(count + 10);  };  const handleDecrementByTen = () => {    setCount(count - 10);  };  const resetCountHandler = () => {    setCount(0)  };\n    ```", "```py\nimport React, { useState } from 'react';const ParentComponent = () => {\n  const [count, setCount] = useState(0);\n  const handleIncrementByTen = () => {\n    setCount(count + 10);\n  };\n  return (\n    <div>\n      <p>Parent Count: {count}</p>\n      <ChildComponent count={count} />\n      <button onClick={handleIncrementByTen}>Increment\n      </button>\n    </div>\n  );\n};\nconst ChildComponent = ({ count }) => {\n  return <p>Child Count: {count}</p>;\n};\n```", "```py\nimport React, { useState } from 'react';const Dashboard = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const handleLogin = () => {\n    setIsLoggedIn(true);\n  };\n  const handleLogout = () => {\n    setIsLoggedIn(false);\n  };\n  return (\n    <div>\n      {isLoggedIn ? (\n        <button onClick={handleLogout}>Logout</button>\n      ) : (\n        <button onClick={handleLogin}>Login</button>\n      )}\n      {isLoggedIn && <p>Hey friend, welcome!</p>}\n      {!isLoggedIn && <p>Please log in to continue.</p>}\n    </div>\n  );\n};\n```", "```py\n- useEffect(<function>, <dependency>)useEffect(() => {\n  // This callback function implementation is either to\n     update DOM, fetch data from external sources, or to\n     manage subscription that happens here.\n}, [dependency]);\n```", "```py\nimport React, { useEffect, useState } from 'react';const App = () => {\nconst [data, setData] = useState([]);\n    const API_URL = \"https://dummyjson.com/users\";\n      useEffect(() => {\n        fetchSpeakers();\n    }, []);\n     return (\n        <ul>\n      {data.map(item => (\n        <li key={item.id}>\n          {item.firstName} {item.lastName}\n        </li>\n      ))}\n    </ul>);\n};\nexport default App;\n```", "```py\n      const fetchSpeakers = async () => {    try {      const response = await           fetch(API_URL);      const data = await response.json();      setData(data.users);    } catch (error) {      console.log(\"error\", error);    }  };\n    fetch() API to fetch the data from the API_URL endpoint. The try… catch code block is set to execute the code and console error if there is an error fetching data from the endpoint.\n    ```", "```py\n    {data.map(item => (        <li key={item.id}>          {item.firstName} {item.lastName}        </li>      ))}\n    ```", "```py\nuseEffect(() => {    const fetchData = async () => {\n      const fetchedData = await fetchSpeakers();\n      if (isMounted) {\n        setData(fetchedData);\n      }\n    };\n    fetchData();\n    // Cleanup function\n    return () => {\n      isMounted = false;\n    };\n  }, [data]) ;// Adding data state as a dependency\n```", "```py\nconst Context = useContext(initialValue);\n```", "```py\n  import React, {useState } from 'react';const App = () => {\n  const [speakerName]= useState(\"Fred Morris\");\n  return (\n    <div>\n      <h2>This is Parent Component</h2>\n      <ImmediateChildComponent speakerName={speakerName} />\n    </div>\n    );\n    }\n    function ImmediateChildComponent({speakerName}) {\n      return (\n        <div>\n          <h2>This is an immediate Child\n            Component</h2><hr/>\n          <GrandChildComponent speakerName={speakerName} />\n        </div>\n      );\n    }\n  }\nexport default App;\n```", "```py\n      return (    <div>      <h2>This is Parent Component</h2>      <ImmediateChildComponent        speakerName={speakerName}    </div>    );\n    ```", "```py\n    function ImmediateChildComponent({speakerName}) {      return (        <div>          <h2>This is an immediate Child            Component</h2><hr/>          <GrandChildComponent            speakerName={speakerName}   />        </div>      );    }    function GrandChildComponent({speakerName}) {      return (        <div>          <h3>This is a Grand Child Component</h3>          <h4>Speakers Name: {speakerName}</h4>        </div>      );}\n    ```", "```py\nimport React, {useState, useContext,createContext } from  'react';\nconst context = createContext(null);\nconst App = () => {\nconst [speakerName]= useState(\"Fred Morris\");\n  return (\n    <context.Provider value={{ speakerName}}>\n            <h1>This is Parent Component</h1>\n            <ImmediateChildComponent  />\n      </context.Provider>\n        );}\nfunction ImmediateChildComponent() {\n    return (\n      <div>\n        <h2>This is an immediate Child Component</h2>\n        <hr/>\n        <GrandChildComponent  />\n      </div>);\n}\n}\n  export default App;\n```", "```py\n            return (          <context.Provider value={{ speakerName }}>            <h1>This is Parent Component</h1>            <ImmediateChildComponent  />          </context.Provider>        );\n    ```", "```py\n    function GrandChildComponent():React.FC<Props> {  const {speakerName} = useContext(context);      return (        <div>          <h3>This is a Grand Child Component</h3>          <h4>Speaker's Name: {speakerName}</h4>        </div>      );\n    ```", "```py\nimport React, {useRef} from 'react';const App = () => {\n    const inputRef = useRef(null);\n    const clickButton = () => {\n      inputRef.current.focus();\n    };\n    return (\n      <>\n        <input ref={inputRef} type=\"text\" />\n        <button onClick={clickButton}>click to Focus on\n          input</button>\n      </>\n    );\n  }\nexport default App\n```", "```py\n`const [state, dispatch] = useReducer(reducer, initialState)\n```", "```py\n{    \"schedules\":    [\n        {\n            \"id\":1,\n            \"time\":\"10.00 AM\",\n            \"speaker\": \"Juliet Abert\",\n            \"subjectTitle\":\"Intro to React Hooks\",\n            \"venue\":\"Auditorium C\"\n        },\n        {\n            \"id\":2,\n            \"time\":\"12.00 AM\",\n            \"speaker\": \"Andrew Wilson\",\n            \"subjectTitle\":\"React Performance Optimization\"\n            ,\"venue\":\"Auditorium A\"\n        },\n        {\n            \"id\":3,\n            \"time\":\"2.00 PM\",\n            \"speaker\": \"Lewis Hooper\",\n            \"subjectTitle\":\"Intro to JavaScript\",\n            \"venue\":\"Auditorium B\"\n        }\n    ]\n}\n```", "```py\nnpm i –g json-server\n```", "```py\njson-server --watch db.json --port=8000\n```", "```py\nLoading db.json  Done \n  Resources\n  http://localhost:8000/schedules \n  Home\n  http://localhost:8000\n```", "```py\nimport { useReducer, useEffect } from 'react';import axios from \"axios\";\nconst initialState = {\n  isLoading: false,\n  error: null,\n  data: null,\n};\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"getEventSchedule\":\n      return {\n        ...state,\n        isLoading: true,\n        error: null,\n      };\n              </ul>\n    </div>\n  );\n};\nexport default App;\n```", "```py\n    const initialState = {isLoading: false,error: null,data: null,};\n    ```", "```py\n    case \"getEventSchedule\":      return {        ...state,{/*accepts other initial State          properties*/}        isLoading: true, {/*change the initial state          of isLoading*/}      };\n    ```", "```py\n        case \"getEventScheduleSuccess\":      return {        ...state,        isLoading: false,        data: action.payload,{/*we have useful          returned data at this state*/}      };\n    ```", "```py\n    .catch(() => {  dispatch({ type: \"getEventScheduleFailure\" });});\n    ```", "```py\n    const [state, dispatch] = useReducer(reducer, initialState);\n    ```", "```py\n    useEffect(() => {  dispatch({ type:\"getEventSchedule\" });  axios.get(\"http://localhost:8000/schedules/\")    .then((response) => {      console.log(\"response\", response);      dispatch({ type: \"getEventScheduleSuccess\",        payload: response.data });    })\n    ```", "```py\n.catch(() => {  dispatch({ type: \"getEventScheduleFailure\" });\n});\n```", "```py\n            <h2>Event Schedules</h2>            {state.isLoading && <div>Loading...</div>}\n            {state.error && <div>{state.error}</div>}\n            {state.data && state.data.length === 0\n              &&   <div>No schedules available.</div>}\n            <ul>\n              {state.data && state.data.map(({ id, time,\n                speaker, subjectTitle, venue }) => (\n                <li key={id}>\n                  Time: {time} <br />\n                  Speaker: {speaker}<br />\n                  Subject: {subjectTitle}<br />\n                  Venue: {venue}\n                </li>\n              ))}\n            </ul>\n```", "```py\nimport React, { useState} from 'react';const speakers = [\n  {id: 10, name: \"John Lewis\"},\n  { id: 11, name: \"Mable Newton\"},\n];\nconst App = () => {\n  const [text, setText] = useState(\"\");\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const onChangeText = (e) => {\n    setText(e.target.value);\n  };\n  console.log(\"Text\", text);\n  const handleClick = (e) => {\n    setSearchTerm(e.target.value);\n  };\n  console.log(\"Search Term\", text);\n  ));\n  });\n  return (\n      <div>\n        ---\n    </div>\n  );\n};\nexport default App;\n```", "```py\n    const speakers = [  {id: 10, name: \"John Lewis\"},  { id: 11, name: \"Mable Newton\"},];\n    ```", "```py\n    const [text, setText] = useState(\"\");const [searchTerm, setSearchTerm] = useState(\"\");\n    ```", "```py\n    const handleClick = (e) => {    setSearchTerm(e.target.value);  };\n    ```", "```py\n    const filteredSpeakers = speakers.filter((speaker) => {  console.log(\"Filtering speakers...\");  return speaker.name.toLowerCase()    .includes(searchTerm.toLowerCase());}\n    ```", "```py\n    <div>  <input type=\"text\" onChange={onChangeText} />  <button onClick={handleClick}>Search</button></div>{filteredSpeakers.map((filteredSpeaker) => (  <li key={filteredSpeaker.id}>    {filteredSpeaker.name}</li>))}</div>\n    ```", "```py\n  const filteredSpeakers = useMemo( () =>    speakers.filter((speaker) => {\n    console.log(\"Filtering speakers...\");\n    return speaker.name.toLowerCase()\n      .includes(searchTerm.toLowerCase());\n  },[searchTerm]));\n```", "```py\nimport React, {useState,useCallback} from 'react';  const handleRemoveSpeaker = useCallback(\n    (id) => setSpeakers(speakers.filter((user) =>\n      user.id !== id)),\n    [speakers]\n  );\n```", "```py\nimport React from 'react';import useFetchSpeakers from \"./useFetchSpeakers\";\nconst App = () => {\n  const API_URL = \"https://dummyjson.com/users\";\n  const [data] = useFetchSpeakers(API_URL);\n  return (\n    <>\n      <ul>\n        {data.map((item) => (\n          <li key={item.id}>\n            {item.firstName} {item.lastName}\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\nexport default App;\n```", "```py\nimport { useEffect, useState } from 'react';const useFetchSpeakers = (url) => {\n  const [data, setData] = useState([]);\n  useEffect(() => {\n    const fetchSpeakers = async () => {\n      try {\n        const response = await fetch(url);\n        const data = await response.json();\n        setData(data.users);\n      } catch (error) {\n        console.log(\"error\", error);\n      }\n    };\n    fetchSpeakers();\n  }, [url]);\n  return [data];\n};\nexport default useFetchSpeakers;\n```"]