["```py\nclass IProject(interface.Interface):\nname = schema.TextLine(title=u'Name',required=True)\nkind = schema.Choice(title=u'Kind of project',\nvalues=['personal','business'])\ndescription = schema.Text(title=u'Description')\nclass AddProject(grok.Form):\ngrok.context(Todo)\nform_fields = grok.AutoFields(IProject)\n\n```", "```py\nfrom zope import interface\nfrom zope import schema\n\n```", "```py\nfrom zope import interface\nclass ICaveman(interface.Interface):\nweapon = interface.Attribute('weapon')\ndef hunt(animal):\n\"\"\"Hunt an animal to get food\"\"\"\ndef eat(animal):\n\"\"\"Eat hunted animal\"\"\"\ndef sleep()\n\"\"\"Rest before getting up to hunt again\"\"\"\n\n```", "```py\nclass Caveman(object):\ninterface.implements(ICaveman)\n\n```", "```py\nweapon = 'ax'\ndef hunt(animal):\nfind(animal)\nhit(animal,self.weapon)\ndef eat(animal):\ncut(animal)\nbite()\ndef sleep():\nsnore()\nrest()\n\n```", "```py\nclass Project(grok.Container):\ngrok.implements(IProject)\n\n```", "```py\nclass IProject(interface.Interface):\nname = schema.TextLine(title=u'Name',required=True)\nkind = schema.Choice(title=u'Kind of project',\nrequired=False,\nvalues=['personal','business'])\ndescription = schema.Text(title=u'Description',\nrequired=False)\n\n```", "```py\nimport grok\nfrom zope import interface, schema\nclass Todo(grok.Application, grok.Container):\ndef __init__(self):\nsuper(Todo, self).__init__()\nself.title = 'To-Do list manager'\nself.next_id = 0\ndef deleteProject(self,project):\ndel self[project]\n\n```", "```py\nclass IProject(interface.Interface):\ntitle = schema.TextLine(title=u'Title',required=True)\nkind = schema.Choice(title=u'Kind of project',values=['personal', 'business'])\ndescription = schema.Text(title=u'Description',required=False)\nnext_id = schema.Int(title=u'Next id',default=0)\n\n```", "```py\nclass Project(grok.Container):\ngrok.implements(IProject)\ndef addList(self,title,description):\nid = str(self.next_id)\nself.next_id = self.next_id+1\nself[id] = TodoList(title,description)\ndef deleteList(self,list):\ndel self[list]\n\n```", "```py\nclass AddProjectForm(grok.AddForm):\ngrok.context(Todo)\ngrok.name('index')\nform_fields = grok.AutoFields(Project)\nlabel = \"To begin, add a new project\"\n@grok.action('Add project')\ndef add(self,**data):\nproject = Project()\nself.applyData(project,**data)\nid = str(self.context.next_id)\nself.context.next_id = self.context.next_id+1\nself.context[id] = project\nreturn self.redirect(self.url(self.context[id]))\n\n```", "```py\n@grok.action('Add project')\ndef add(self,**data):\nproject = Project()\nself.applyData(project,**data)\nid = str(self.context.next_id)\nself.context.next_id = self.context.next_id+1\nself.context[id] = project\nreturn self.redirect(self.url(self.context[id]))\n\n```", "```py\nform_fields = grok.AutoFields(Project).select('title','kind', 'description')\n\n```", "```py\nform_fields = grok.AutoFields(Project).omit('next_id')\n\n```", "```py\nclass EditProjectForm(grok.EditForm):\ngrok.context(Project)\ngrok.name('edit')\nform_fields = grok.AutoFields(Project).omit('next_id')\nlabel = \"Edit the project\"\n\n```", "```py\ndef setUpWidgets(self, ignore_request=False):\nsuper(EditProjectForm,self).setUpWidgets(ignore_request)\nself.widgets['title'].displayWidth = 50\nself.widgets['description'].height = 5\n\n```", "```py\ndef check_title(value):\nreturn len(value.split())>2\n\n```", "```py\ntitle = schema.TextLine(title=u'Title', required=True, constraint=check_title)\n\n```", "```py\n@interface.invariant\ndef businessNeedsDescription(project):\nif project.kind=='business' and not project.description:\nraise interface.Invalid( \"Business projects require a description\")\n\n```", "```py\ntemplate = grok.PageTemplateFile('custom_edit_form.pt')\n\n```", "```py\n<html>\n<head>\n<title tal:content=\"context/title\">To-Do list manager</title>\n<link rel=\"stylesheet\" type=\"text/css\" tal:attributes=\"href static/styles.css\" />\n</head>\n\n```"]