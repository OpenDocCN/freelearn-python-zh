- en: Chapter 26
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 第 26 章
- en: Nested Loop Control Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套循环控制结构
- en: 26.1 What is a Nested Loop?
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 26.1 什么是嵌套循环？
- en: A nested loop is a loop within another loop or, in other words, an inner loop
    within an outer one.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 嵌套循环是指在另一个循环内部的循环，换句话说，是外部循环内部的内部循环。
- en: The outer loop controls the number of complete iterations of the inner loop.
    This means that the first iteration of the outer loop triggers the inner loop
    to start iterating until completion. Then, the second iteration of the outer loop
    triggers the inner loop to start iterating until completion again. This process
    repeats until the outer loop has performed all of its iterations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 外部循环控制内部循环的完整迭代次数。这意味着外部循环的第一个迭代触发内部循环开始迭代直到完成。然后，外部循环的第二个迭代再次触发内部循环开始迭代直到完成。这个过程重复，直到外部循环完成所有迭代。
- en: Take the following Python program, for example.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 以以下 Python 程序为例。
- en: '![](img/my_exercise_header.png) file_26.1'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_26.1'
- en: 'for i in range(1, 3):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 3):'
- en: for j in range(1, 4):     [[More…]](more.html#more_26_1_1)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: for j in range(1, 4):     [[更多…]](more.html#more_26_1_1)
- en: print(i, j)
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print(i, j)
- en: In this program, the outer loop, controlled by the variable i, determines the
    number of complete iterations that the inner loop performs. Specifically, when
    variable i is 1, the inner loop performs three iterations (for j = 1, j = 2, and
    j = 3). After completing the inner loop, the outer loop needs to perform one more
    iteration (for i = 2). Consequently, the inner loop restarts, performing three
    new iterations again (for j = 1, j = 2, and j = 3).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个程序中，由变量 i 控制的循环是外部循环，它决定了内部循环完成的完整迭代次数。具体来说，当变量 i 为 1 时，内部循环执行三次迭代（对于 j =
    1, j = 2 和 j = 3）。完成内部循环后，外部循环需要再执行一次迭代（对于 i = 2）。因此，内部循环重新开始，再次执行三次新的迭代（对于 j
    = 1, j = 2 和 j = 3）。
- en: The previous example is similar to the following one.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的例子类似于以下例子。
- en: i = 1                    #Outer loop assigns value 1 to variable i
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1                    #外部循环将值 1 赋予变量 i
- en: 'for j in range(1, 4):    #and inner loop performs three iterations'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(1, 4):    #并且内部循环重新开始并执行三次新的迭代'
- en: print(i, j)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: print(i, j)
- en: i = 2                    #Outer loop assigns value 2 to variable i
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: i = 2                    #外部循环将值 2 赋予变量 i
- en: 'for j in range(1, 4):    #and inner loop starts over and performs three new
    iterations'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(1, 4):    #并且内部循环重新开始并执行三次新的迭代'
- en: print(i, j)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: print(i, j)
- en: The output result is as follows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 输出结果如下。
- en: '![Image](img/chapter26-01.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter26-01.png)'
- en: '![](img/notice.jpg)As long as the syntax rules are not violated, you can nest
    as many loop control structures as you wish. For practical reasons however, as
    you move to four or five levels of nesting, the entire structure becomes very
    complex and difficult to understand. However, experience shows that the maximum
    number of levels of nesting that you will do in your entire life as a programmer
    is probably three or four.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)只要不违反语法规则，你可以嵌套任意多的循环控制结构。然而，出于实际考虑，当你达到四或五层嵌套时，整个结构会变得非常复杂且难以理解。然而，经验表明，你作为程序员一生中可能最多会做到三到四层嵌套。'
- en: '![](img/notice.jpg)The inner and outer loops do not need to be the same type.
    For example, a for statement may nest (enclose) a while statement, or vice versa.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/notice.jpg)内部和外部循环不必是同一类型。例如，一个 for 语句可以嵌套（包含）一个 while 语句，反之亦然。'
- en: Exercise 26.1-1 Say “Hello Zeus”. Counting the Total Number of Iterations.
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 26.1-1 说“Hello Zeus”。计算总迭代次数。
- en: Find the number of times message “Hello Zeus” is displayed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 找出消息“Hello Zeus”显示的次数。
- en: '![](img/my_exercise_header.png) file_26.1-1'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_26.1-1'
- en: 'for i in range(3):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(3):'
- en: 'for j in range(4):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(4):'
- en: print("Hello Zeus")
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Hello Zeus")
- en: Solution
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Solution
- en: 'The values of variables i and j (in order of appearance) are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 变量 i 和 j 的值（按出现顺序）如下：
- en: ►For i = 0, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: ►对于 i = 0，内部循环执行 4 次迭代（对于 j = 0, j = 1, j = 2 和 j = 3），并且消息“Hello Zeus”显示 4
    次。
- en: ►For i = 1, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: ►对于 i = 1，内部循环执行 4 次迭代（对于 j = 0, j = 1, j = 2 和 j = 3），并且消息“Hello Zeus”显示 4
    次。
- en: ►For i = 2, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: ►对于 i = 2，内部循环执行 4 次迭代（对于 j = 0, j = 1, j = 2 和 j = 3），并且消息“Hello Zeus”显示 4
    次。
- en: Therefore, the message “Hello Zeus” is displayed a total of 3 × 4 = 12 times.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，消息“Hello Zeus”总共显示3 × 4 = 12次。
- en: '![](img/remember.jpg)The outer loop controls the number of complete iterations
    of the inner one!'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/remember.jpg)外循环控制内循环的完整迭代次数！'
- en: Exercise 26.1-2 Creating the Trace Table
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习26.1-2 创建跟踪表
- en: For the next code fragment, determine the value that variable a contains at
    the end.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个代码片段，确定变量a在程序结束时的值。
- en: a = 1
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: a = 1
- en: i = 5
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: i = 5
- en: 'while i < 7:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < 7:'
- en: 'for j in range(1, 5, 2):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(1, 5, 2):'
- en: a = a * j + i
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a = a * j + i
- en: i += 1
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: print(a)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: Solution
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The trace table is shown here.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 这里显示了跟踪表。
- en: '| Step | Statement | Notes | a | i | j |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | a | i | j |'
- en: '| 1 | a = 1 |   | 1 | ? | ? |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
  zh: '| 1 | a = 1 |   | 1 | ? | ? |'
- en: '| 2 | i = 5 |   | 1 | 5 | ? |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
  zh: '| 2 | i = 5 |   | 1 | 5 | ? |'
- en: '| 3 | while i < 7 | This evaluates to True |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
  zh: '| 3 | while i < 7 | 这评估为True |'
- en: '| 4 | j = 1 |   | 1 | 5 | 1 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
  zh: '| 4 | j = 1 |   | 1 | 5 | 1 |'
- en: '| 5 | a = a * j + i |   | 6 | 5 | 1 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
  zh: '| 5 | a = a * j + i |   | 6 | 5 | 1 |'
- en: '| 6 | j = 3 |   | 6 | 5 | 3 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
  zh: '| 6 | j = 3 |   | 6 | 5 | 3 |'
- en: '| 7 | a = a * j + i |   | 23 | 5 | 3 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
  zh: '| 7 | a = a * j + i |   | 23 | 5 | 3 |'
- en: '| 8 | i += 1 |   | 23 | 6 | 3 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
  zh: '| 8 | i += 1 |   | 23 | 6 | 3 |'
- en: '| 9 | while i < 7 | This evaluates to True |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
  zh: '| 9 | while i < 7 | 这评估为True |'
- en: '| 10 | j = 1 |   | 23 | 6 | 1 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
  zh: '| 10 | j = 1 |   | 23 | 6 | 1 |'
- en: '| 11 | a = a * j + i |   | 29 | 6 | 1 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
  zh: '| 11 | a = a * j + i |   | 29 | 6 | 1 |'
- en: '| 12 | j = 3 |   | 29 | 6 | 3 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 12 | j = 3 |   | 29 | 6 | 3 |'
- en: '| 13 | a = a * j + i |   | 93 | 6 | 3 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 13 | a = a * j + i |   | 93 | 6 | 3 |'
- en: '| 14 | i += 1 |   | 93 | 7 | 3 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 14 | i += 1 |   | 93 | 7 | 3 |'
- en: '| 15 | while i < 7 | This evaluates to False |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 15 | while i < 7 | 这评估为False |'
- en: '| 16 | print(a) | It displays: 93 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 16 | print(a) | 它显示：93 |'
- en: At the end of the program, variable a contains the value 93.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 程序结束时，变量a包含的值是93。
- en: 26.2 Rules that Apply to Nested Loops
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 26.2 适用于嵌套循环的规则
- en: Beyond the four rules that apply to for-loops (presented in [Section 25.2](chapter25.html#toc_13)),
    there are two extra rules that you should always follow when writing programs
    with nested loops, since they can save you from undesirable side effects.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 除了适用于for循环的四个规则（在[第25.2节](chapter25.html#toc_13)中介绍）之外，在编写嵌套循环程序时，你还应该始终遵循两个额外的规则，因为它们可以让你避免不希望的结果。
- en: '►Rule 1: The inner loop must begin and end entirely within the outer loop,
    which means that the loops must not overlap.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: ►规则1：内循环必须完全开始和结束在外循环内，这意味着循环不得重叠。
- en: '►Rule 2: An outer loop and the inner (nested) loop must not use the same variable.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: ►规则2：外循环和内（嵌套）循环不得使用相同的变量。
- en: Exercise 26.2-1 Violating the First Rule
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习26.2-1 违反第一规则
- en: Design a flowchart fragment that violates the first rule of nested loops, which
    states, “The inner loop must begin and end entirely within the outer loop”.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个违反嵌套循环第一规则的流程图片段，该规则指出，“内循环必须完全开始和结束在外循环内”。
- en: Solution
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The following flowchart fragment violates the first rule of nested loops.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 以下流程图片段违反了嵌套循环的第一规则。
- en: .![Image](img/chapter26-02.png)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: .![Image](img/chapter26-02.png)
- en: If you try to follow the flow of execution, you will notice that it smoothly
    performs 5 × 10 = 50 iterations. No one can tell that this flowchart is wrong.
    In fact, it is technically correct. However, the issue lies in its readability.
    It's extremely difficult to discern what this flowchart is intended to accomplish.
    Moreover, this structure matches none of the already familiar loop control structures
    that you have been taught, so it cannot be directly converted into a Python program
    as is. Try to avoid this kind of nested loop!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你尝试跟随执行流程，你会注意到它平稳地执行了5 × 10 = 50次迭代。没有人能看出这个流程图是错误的。实际上，它在技术上是对的。然而，问题在于它的可读性。要辨别这个流程图旨在完成什么非常困难。此外，这种结构与你已经学过的任何已知的循环控制结构都不匹配，因此不能直接转换为Python程序。尽量避免这种嵌套循环！
- en: Exercise 26.2-2 Violating the Second Rule
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习26.2-2 违反第二规则
- en: Find the number of times message “Hello” is displayed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 找出消息“Hello”显示的次数。
- en: i = 1
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: i = 1
- en: 'while i <= 3:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i <= 3:'
- en: 'for i in range(4, -1, -1):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(4, -1, -1):'
- en: print("Hello")
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Hello")
- en: i += 1
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: Solution
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: At first glance, one would think that the word “Hello” is displayed 3 × 5 =
    15 times. However, a closer second look reveals that things are not always as
    they seem. This program violates the second rule of nested loops, which states,
    “An outer loop and the inner (nested) loop must not use the same variable”. Let's
    design the corresponding flowchart.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 初看之下，人们可能会认为单词“Hello”显示3 × 5 = 15次。然而，仔细观察后会发现事情并不总是像看起来那样。这个程序违反了嵌套循环的第二规则，即“外循环和内（嵌套）循环不得使用相同的变量”。让我们设计相应的流程图。
- en: '![Image](img/chapter26-03.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter26-03.png)'
- en: If you try to follow the flow of execution in this flowchart fragment, you can
    see that when the inner loop completes all of its five iterations, variable i
    contains the value 0\. Then, variable i increments by 1 and the outer loop repeats
    again. This process can continue forever since variable i can never exceed the
    value 3 that the Boolean expression of the outer loop requires. Therefore, the
    message “Hello” is displayed an infinite number of times.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '26.3 Review Questions: True/False'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 1)A nested loop is an inner loop within an outer one.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 2)It is possible to nest a mid-test loop structure within a pre-test loop structure.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 3)The maximum number of levels of nesting in a loop control structure is four.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 4)When two loop control structures are nested one within the other, the loop
    that starts last must complete first.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 5)When two loop control structures are nested one within the other, they must
    not use the same counter variable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 6)In the following code fragment the word “Hello” is displayed six times.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 4):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 7)In the following code fragment the word “Hello” is displayed 12 times.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(1, 5, 2):'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-100
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 8)In the following code fragment the word “Hello” is displayed an infinite number
    of times.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 4:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3, 0, -1):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 9)In the following code fragment the word “Hello” is displayed nine times.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: j = 1
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: j += 1
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if j >= 4: break'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 10)In the following program there is at least one mid-test loop structure.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'while not False:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'while not False:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a >= -1: break'
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a == -1: break'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: s += a
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '26.4 Review Questions: Multiple Choice'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 1)In the following code fragment
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 3):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 3):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the values of variables i and j (in order of appearance) are
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: a)j = 1, i = 1, j = 1, i = 2, j = 2, i = 1, j = 2, i = 2
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: b)i = 1, j = 1, i = 1, j = 2, i = 2, j = 1, i = 2, j = 2
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: c)i = 1, j = 1, i = 2, j = 2
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: d)j = 1, i = 1, j = 2, i = 2
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 2)In the following code fragment
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: x = 2
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'while x > -2:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: x -= 1
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Hello Hestia")
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if x >= -2: break'
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the message “Hello Hestia” is displayed
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: a)4 times.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: b)an infinite number of times.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 3)In the following code fragment
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: x = 1
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'while x != 500:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(x, 4):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Artemis")
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x += 1
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Artemis” is displayed
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: a)an infinite number of times.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: b)1500 times.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: c)6 times.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 4)The following code fragment
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 4):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, i + 1):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: print(i * j, ", ", sep = "", end = "")
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("The End!")
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: displays
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: a)1, 2, 4, 3, 6, 9, The End!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: b)1, 2, 3, 4, 6, 9, The End!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: c)1, 2, The End!, 4, 3, The End!, 6, 9, The End!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following code fragment
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 10:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10, 0, -1):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(10, 0, -1):'
- en: print("Hello Dionysus")
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Hello Dionysus")
- en: i += 1
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: i += 1
- en: does not satisfy the property of
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 不满足该属性。
- en: a)definiteness.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: a)definiteness.
- en: b)finiteness.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: b)finiteness.
- en: c)effectiveness.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: c)effectiveness.
- en: 26.5 Review Exercises
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 26.5 复习练习
- en: Complete the following exercises.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Fill in the gaps in the following code fragments so that all code fragments
    display the message “Hello Hephaestus” exactly 100 times.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 1)填写以下代码片段中的空白，以便所有代码片段都显示“Hello Hephaestus”消息100次。
- en: i)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: i)
- en: 'for a in range(6, ……):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'for a in range(6, ……):'
- en: 'for b in range(25):'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 'for b in range(25):'
- en: print("Hello Hephaestus")
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Hello Hephaestus")
- en: ii)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: ii)
- en: 'for a in range(0, …… + 1, 5):'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 'for a in range(0, …… + 1, 5):'
- en: 'for b in range(10, 20):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 'for b in range(10, 20):'
- en: print("Hello Hephaestus")
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Hello Hephaestus")
- en: iii)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: iii)
- en: 'for a in range(……, -17, -2):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 'for a in range(……, -17, -2):'
- en: 'for b in range(150, 50, -5):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'for b in range(150, 50, -5):'
- en: print("Hello Hephaestus")
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Hello Hephaestus")
- en: iv)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: iv)
- en: 'for a in range(-11, -16, -1):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 'for a in range(-11, -16, -1):'
- en: 'for b in range(100, …… + 1, 2):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 'for b in range(100, …… + 1, 2):'
- en: print("Hello Hephaestus")
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Hello Hephaestus")
- en: 2)Design the corresponding flowchart and create a trace table to determine the
    values of the variables in each step of the next code fragment.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 2)设计相应的流程图，并创建一个跟踪表以确定在下一个代码片段的每个步骤中变量的值。
- en: a = 1
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: a = 1
- en: j = 1
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: j = 1
- en: 'while j <= 2:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 'while j <= 2:'
- en: i = 10
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: i = 10
- en: 'while i < 30:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 'while i < 30:'
- en: a = a + j + i
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: a = a + j + i
- en: i += 10
  id: totrans-203
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: i += 10
- en: j += 0.5
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: j += 0.5
- en: print(a)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: print(a)
- en: 3)Create a trace table to determine the values of the variables in each step
    of the next code fragment. How many times is the statement s = s + i * j executed?
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 3)创建一个跟踪表，以确定在下一个代码片段的每个步骤中变量的值。s = s + i * j语句执行了多少次？
- en: s = 0
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: s = 0
- en: 'for i in range(1, 5):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 5):'
- en: 'for j in range(3, i - 1, -1):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 'for j in range(3, i - 1, -1):'
- en: s = s + i * j
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s = s + i * j
- en: print(s)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 4)Create a trace table to determine the values of the variables in each step
    of the next Python program for three different executions. How many iterations
    does this Python program perform?
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 4)创建一个跟踪表，以确定在下一个Python程序的每个步骤中变量的值。这个Python程序执行了多少次迭代？
- en: 'The input values for the three executions are: (i) NO, (ii) YES, NO; and (iii)
    YES, YES, NO.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 三次执行中的输入值分别为：(i) NO, (ii) YES, NO; 和 (iii) YES, YES, NO.
- en: s = 1
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: s = 1
- en: y = 25
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: y = 25
- en: 'while True:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 'while True:'
- en: 'for i in range(1, 4):'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 'for i in range(1, 4):'
- en: s = s + y
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: s = s + y
- en: y -= 5
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y -= 5
- en: ans = input()
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: ans = input()
- en: 'if ans != "YES": break'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 'if ans != "YES": break'
- en: print(s)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: print(s)
- en: 5)Write a Python program that displays an hours and minutes table in the following
    form.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 5)编写一个Python程序以显示以下形式的时和分表。
- en: 0     0
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 0     0
- en: 0     1
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 0     1
- en: 0     2
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 0     2
- en: 0     3
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 0     3
- en: '...'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 0     59
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 0     59
- en: 1     0
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 1     0
- en: 1     1
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 1     1
- en: 1     2
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 1     2
- en: '...'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '...'
- en: 23   59
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 23   59
- en: Please note that the output is aligned with tabs.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，输出是对齐的。
- en: 6)Using nested loop control structures, write a Python program that displays
    the following output.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 6)使用嵌套循环控制结构，编写一个Python程序以显示以下输出。
- en: 5 5 5 5 5
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 5 5 5 5 5
- en: 4 4 4 4
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 4 4 4 4
- en: 3 3 3
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 3 3 3
- en: 2 2
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 2 2
- en: '1'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: '1'
- en: 7)Using nested loop control structures, write a Python program that displays
    the following output.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 7)使用嵌套循环控制结构，编写一个Python程序以显示以下输出。
- en: '0'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: '0'
- en: 0 1
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 0 1
- en: 0 1 2
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 0 1 2
- en: 0 1 2 3
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 0 1 2 3
- en: 0 1 2 3 4
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 0 1 2 3 4
- en: 0 1 2 3 4 5
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 0 1 2 3 4 5
- en: 8)Using nested loop control structures, write a Python program that displays
    the following rectangle.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 8)使用嵌套循环控制结构，编写一个Python程序以显示以下矩形。
- en: '*  *  *  *  *  *  *  *  *  *'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *  *  *  *  *  *  *'
- en: '*  *  *  *  *  *  *  *  *  *'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *  *  *  *  *  *  *'
- en: '*  *  *  *  *  *  *  *  *  *'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *  *  *  *  *  *  *'
- en: '*  *  *  *  *  *  *  *  *  *'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *  *  *  *  *  *  *'
- en: Then, try to do the same without using any loop control structure!
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 然后尝试在不使用任何循环控制结构的情况下完成同样的任务！
- en: 9)Write a Python program that prompts the user to enter an integer N between
    3 and 20 and then displays a square of size N on each side. For example, if the
    user enters 4 for N, the program must display the following square.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 9)编写一个Python程序，提示用户输入一个介于3和20之间的整数N，然后显示每边大小为N的正方形。例如，如果用户输入4作为N，程序必须显示以下正方形。
- en: '*  *  *  *'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: '*  *  *  *'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: '*  *  *  *'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: '*  *  *  *'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: Then, try to do the same without using any loop control structure!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 然后尝试在不使用任何循环控制结构的情况下完成同样的任务！
- en: 10)Write a Python program that prompts the user to enter an integer N between
    3 and 20 and then displays a hollow square of size N on each side. For example,
    if the user enters 4 for N, the program must display the following hollow square.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 10)编写一个Python程序，提示用户输入一个介于3和20之间的整数N，然后显示每边大小为N的空心正方形。例如，如果用户输入4作为N，程序必须显示以下空心正方形。
- en: '*  *  *  *'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: '*        *'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: '*        *'
- en: '*        *'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: '*        *'
- en: '*  *  *  *'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: Then, try to do the same without using any loop control structure!
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 然后尝试在不使用任何循环控制结构的情况下完成同样的任务！
- en: 11)Using nested loop control structures, write a Python program that displays
    the following triangle.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 11)使用嵌套循环控制结构，编写一个Python程序，显示以下三角形。
- en: '*'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '*  *'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *'
- en: '*  *  *'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *'
- en: '*  *  *  *'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: '*  *  *  *  *'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *  *'
- en: '*  *  *  *'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: '*  *  *'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *'
- en: '*  *'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *'
- en: '*'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: Then, try to do the same using just one for-loop (no nested loop control structures
    allowed!)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，尝试只用一个for循环（不允许使用嵌套循环控制结构！）
