- en: Chapter 26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nested Loop Control Structures
  prefs: []
  type: TYPE_NORMAL
- en: 26.1 What is a Nested Loop?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A nested loop is a loop within another loop or, in other words, an inner loop
    within an outer one.
  prefs: []
  type: TYPE_NORMAL
- en: The outer loop controls the number of complete iterations of the inner loop.
    This means that the first iteration of the outer loop triggers the inner loop
    to start iterating until completion. Then, the second iteration of the outer loop
    triggers the inner loop to start iterating until completion again. This process
    repeats until the outer loop has performed all of its iterations.
  prefs: []
  type: TYPE_NORMAL
- en: Take the following Python program, for example.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_26.1'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 3):'
  prefs: []
  type: TYPE_NORMAL
- en: for j in range(1, 4):     [[More…]](more.html#more_26_1_1)
  prefs: []
  type: TYPE_NORMAL
- en: print(i, j)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this program, the outer loop, controlled by the variable i, determines the
    number of complete iterations that the inner loop performs. Specifically, when
    variable i is 1, the inner loop performs three iterations (for j = 1, j = 2, and
    j = 3). After completing the inner loop, the outer loop needs to perform one more
    iteration (for i = 2). Consequently, the inner loop restarts, performing three
    new iterations again (for j = 1, j = 2, and j = 3).
  prefs: []
  type: TYPE_NORMAL
- en: The previous example is similar to the following one.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1                    #Outer loop assigns value 1 to variable i
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):    #and inner loop performs three iterations'
  prefs: []
  type: TYPE_NORMAL
- en: print(i, j)
  prefs: []
  type: TYPE_NORMAL
- en: i = 2                    #Outer loop assigns value 2 to variable i
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):    #and inner loop starts over and performs three new
    iterations'
  prefs: []
  type: TYPE_NORMAL
- en: print(i, j)
  prefs: []
  type: TYPE_NORMAL
- en: The output result is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter26-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)As long as the syntax rules are not violated, you can nest
    as many loop control structures as you wish. For practical reasons however, as
    you move to four or five levels of nesting, the entire structure becomes very
    complex and difficult to understand. However, experience shows that the maximum
    number of levels of nesting that you will do in your entire life as a programmer
    is probably three or four.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The inner and outer loops do not need to be the same type.
    For example, a for statement may nest (enclose) a while statement, or vice versa.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 26.1-1 Say “Hello Zeus”. Counting the Total Number of Iterations.
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Find the number of times message “Hello Zeus” is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_26.1-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(4):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Zeus")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: 'The values of variables i and j (in order of appearance) are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: ►For i = 0, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  prefs: []
  type: TYPE_NORMAL
- en: ►For i = 1, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  prefs: []
  type: TYPE_NORMAL
- en: ►For i = 2, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the message “Hello Zeus” is displayed a total of 3 × 4 = 12 times.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The outer loop controls the number of complete iterations
    of the inner one!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 26.1-2 Creating the Trace Table
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For the next code fragment, determine the value that variable a contains at
    the end.
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  prefs: []
  type: TYPE_NORMAL
- en: i = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 7:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 5, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: a = a * j + i
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The trace table is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | i | j |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = 1 |   | 1 | ? | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = 5 |   | 1 | 5 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | while i < 7 | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | j = 1 |   | 1 | 5 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a * j + i |   | 6 | 5 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | j = 3 |   | 6 | 5 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 7 | a = a * j + i |   | 23 | 5 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 8 | i += 1 |   | 23 | 6 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 9 | while i < 7 | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 10 | j = 1 |   | 23 | 6 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 11 | a = a * j + i |   | 29 | 6 | 1 |'
  prefs: []
  type: TYPE_TB
- en: '| 12 | j = 3 |   | 29 | 6 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 13 | a = a * j + i |   | 93 | 6 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 14 | i += 1 |   | 93 | 7 | 3 |'
  prefs: []
  type: TYPE_TB
- en: '| 15 | while i < 7 | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 16 | print(a) | It displays: 93 |'
  prefs: []
  type: TYPE_TB
- en: At the end of the program, variable a contains the value 93.
  prefs: []
  type: TYPE_NORMAL
- en: 26.2 Rules that Apply to Nested Loops
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Beyond the four rules that apply to for-loops (presented in [Section 25.2](chapter25.html#toc_13)),
    there are two extra rules that you should always follow when writing programs
    with nested loops, since they can save you from undesirable side effects.
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 1: The inner loop must begin and end entirely within the outer loop,
    which means that the loops must not overlap.'
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 2: An outer loop and the inner (nested) loop must not use the same variable.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 26.2-1 Violating the First Rule
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart fragment that violates the first rule of nested loops, which
    states, “The inner loop must begin and end entirely within the outer loop”.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The following flowchart fragment violates the first rule of nested loops.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter26-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: If you try to follow the flow of execution, you will notice that it smoothly
    performs 5 × 10 = 50 iterations. No one can tell that this flowchart is wrong.
    In fact, it is technically correct. However, the issue lies in its readability.
    It's extremely difficult to discern what this flowchart is intended to accomplish.
    Moreover, this structure matches none of the already familiar loop control structures
    that you have been taught, so it cannot be directly converted into a Python program
    as is. Try to avoid this kind of nested loop!
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 26.2-2 Violating the Second Rule
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Find the number of times message “Hello” is displayed.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(4, -1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, one would think that the word “Hello” is displayed 3 × 5 =
    15 times. However, a closer second look reveals that things are not always as
    they seem. This program violates the second rule of nested loops, which states,
    “An outer loop and the inner (nested) loop must not use the same variable”. Let's
    design the corresponding flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter26-03.png)'
  prefs: []
  type: TYPE_IMG
- en: If you try to follow the flow of execution in this flowchart fragment, you can
    see that when the inner loop completes all of its five iterations, variable i
    contains the value 0\. Then, variable i increments by 1 and the outer loop repeats
    again. This process can continue forever since variable i can never exceed the
    value 3 that the Boolean expression of the outer loop requires. Therefore, the
    message “Hello” is displayed an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: '26.3 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)A nested loop is an inner loop within an outer one.
  prefs: []
  type: TYPE_NORMAL
- en: 2)It is possible to nest a mid-test loop structure within a pre-test loop structure.
  prefs: []
  type: TYPE_NORMAL
- en: 3)The maximum number of levels of nesting in a loop control structure is four.
  prefs: []
  type: TYPE_NORMAL
- en: 4)When two loop control structures are nested one within the other, the loop
    that starts last must complete first.
  prefs: []
  type: TYPE_NORMAL
- en: 5)When two loop control structures are nested one within the other, they must
    not use the same counter variable.
  prefs: []
  type: TYPE_NORMAL
- en: 6)In the following code fragment the word “Hello” is displayed six times.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 4):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 7)In the following code fragment the word “Hello” is displayed 12 times.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(1, 5, 2):'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Hello")
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 8)In the following code fragment the word “Hello” is displayed an infinite number
    of times.
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 4:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3, 0, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: 9)In the following code fragment the word “Hello” is displayed nine times.
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  prefs: []
  type: TYPE_NORMAL
- en: j = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: j += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if j >= 4: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 10)In the following program there is at least one mid-test loop structure.
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'while not False:'
  prefs: []
  type: TYPE_NORMAL
- en: 'while not False:'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a >= -1: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a == -1: break'
  prefs: []
  type: TYPE_NORMAL
- en: s += a
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: '26.4 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 3):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 3):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the values of variables i and j (in order of appearance) are
  prefs: []
  type: TYPE_NORMAL
- en: a)j = 1, i = 1, j = 1, i = 2, j = 2, i = 1, j = 2, i = 2
  prefs: []
  type: TYPE_NORMAL
- en: b)i = 1, j = 1, i = 1, j = 2, i = 2, j = 1, i = 2, j = 2
  prefs: []
  type: TYPE_NORMAL
- en: c)i = 1, j = 1, i = 2, j = 2
  prefs: []
  type: TYPE_NORMAL
- en: d)j = 1, i = 1, j = 2, i = 2
  prefs: []
  type: TYPE_NORMAL
- en: 2)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: x = 2
  prefs: []
  type: TYPE_NORMAL
- en: 'while x > -2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: x -= 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Hello Hestia")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if x >= -2: break'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the message “Hello Hestia” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)4 times.
  prefs: []
  type: TYPE_NORMAL
- en: b)an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)In the following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: x = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while x != 500:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(x, 4):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Artemis")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x += 1
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Artemis” is displayed
  prefs: []
  type: TYPE_NORMAL
- en: a)an infinite number of times.
  prefs: []
  type: TYPE_NORMAL
- en: b)1500 times.
  prefs: []
  type: TYPE_NORMAL
- en: c)6 times.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 4)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 4):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, i + 1):'
  prefs: []
  type: TYPE_NORMAL
- en: print(i * j, ", ", sep = "", end = "")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("The End!")
  prefs: []
  type: TYPE_NORMAL
- en: displays
  prefs: []
  type: TYPE_NORMAL
- en: a)1, 2, 4, 3, 6, 9, The End!
  prefs: []
  type: TYPE_NORMAL
- en: b)1, 2, 3, 4, 6, 9, The End!
  prefs: []
  type: TYPE_NORMAL
- en: c)1, 2, The End!, 4, 3, The End!, 6, 9, The End!
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following code fragment
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 10:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10, 0, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Dionysus")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  prefs: []
  type: TYPE_NORMAL
- en: does not satisfy the property of
  prefs: []
  type: TYPE_NORMAL
- en: a)definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: b)finiteness.
  prefs: []
  type: TYPE_NORMAL
- en: c)effectiveness.
  prefs: []
  type: TYPE_NORMAL
- en: 26.5 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Fill in the gaps in the following code fragments so that all code fragments
    display the message “Hello Hephaestus” exactly 100 times.
  prefs: []
  type: TYPE_NORMAL
- en: i)
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(6, ……):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for b in range(25):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hephaestus")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ii)
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(0, …… + 1, 5):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for b in range(10, 20):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hephaestus")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: iii)
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(……, -17, -2):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for b in range(150, 50, -5):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hephaestus")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: iv)
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(-11, -16, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for b in range(100, …… + 1, 2):'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hephaestus")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2)Design the corresponding flowchart and create a trace table to determine the
    values of the variables in each step of the next code fragment.
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  prefs: []
  type: TYPE_NORMAL
- en: j = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'while j <= 2:'
  prefs: []
  type: TYPE_NORMAL
- en: i = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 30:'
  prefs: []
  type: TYPE_NORMAL
- en: a = a + j + i
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 10
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: j += 0.5
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the next code fragment. How many times is the statement s = s + i * j executed?
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 5):'
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3, i - 1, -1):'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i * j
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Create a trace table to determine the values of the variables in each step
    of the next Python program for three different executions. How many iterations
    does this Python program perform?
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) NO, (ii) YES, NO; and (iii)
    YES, YES, NO.'
  prefs: []
  type: TYPE_NORMAL
- en: s = 1
  prefs: []
  type: TYPE_NORMAL
- en: y = 25
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 4):'
  prefs: []
  type: TYPE_NORMAL
- en: s = s + y
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y -= 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ans = input()
  prefs: []
  type: TYPE_NORMAL
- en: 'if ans != "YES": break'
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that displays an hours and minutes table in the following
    form.
  prefs: []
  type: TYPE_NORMAL
- en: 0     0
  prefs: []
  type: TYPE_NORMAL
- en: 0     1
  prefs: []
  type: TYPE_NORMAL
- en: 0     2
  prefs: []
  type: TYPE_NORMAL
- en: 0     3
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 0     59
  prefs: []
  type: TYPE_NORMAL
- en: 1     0
  prefs: []
  type: TYPE_NORMAL
- en: 1     1
  prefs: []
  type: TYPE_NORMAL
- en: 1     2
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  prefs: []
  type: TYPE_NORMAL
- en: 23   59
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the output is aligned with tabs.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Using nested loop control structures, write a Python program that displays
    the following output.
  prefs: []
  type: TYPE_NORMAL
- en: 5 5 5 5 5
  prefs: []
  type: TYPE_NORMAL
- en: 4 4 4 4
  prefs: []
  type: TYPE_NORMAL
- en: 3 3 3
  prefs: []
  type: TYPE_NORMAL
- en: 2 2
  prefs: []
  type: TYPE_NORMAL
- en: '1'
  prefs: []
  type: TYPE_NORMAL
- en: 7)Using nested loop control structures, write a Python program that displays
    the following output.
  prefs: []
  type: TYPE_NORMAL
- en: '0'
  prefs: []
  type: TYPE_NORMAL
- en: 0 1
  prefs: []
  type: TYPE_NORMAL
- en: 0 1 2
  prefs: []
  type: TYPE_NORMAL
- en: 0 1 2 3
  prefs: []
  type: TYPE_NORMAL
- en: 0 1 2 3 4
  prefs: []
  type: TYPE_NORMAL
- en: 0 1 2 3 4 5
  prefs: []
  type: TYPE_NORMAL
- en: 8)Using nested loop control structures, write a Python program that displays
    the following rectangle.
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *  *  *  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *  *  *  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *  *  *  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *  *  *  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: Then, try to do the same without using any loop control structure!
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that prompts the user to enter an integer N between
    3 and 20 and then displays a square of size N on each side. For example, if the
    user enters 4 for N, the program must display the following square.
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: Then, try to do the same without using any loop control structure!
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a Python program that prompts the user to enter an integer N between
    3 and 20 and then displays a hollow square of size N on each side. For example,
    if the user enters 4 for N, the program must display the following hollow square.
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*        *'
  prefs: []
  type: TYPE_NORMAL
- en: '*        *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: Then, try to do the same without using any loop control structure!
  prefs: []
  type: TYPE_NORMAL
- en: 11)Using nested loop control structures, write a Python program that displays
    the following triangle.
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*  *'
  prefs: []
  type: TYPE_NORMAL
- en: '*'
  prefs: []
  type: TYPE_NORMAL
- en: Then, try to do the same using just one for-loop (no nested loop control structures
    allowed!)
  prefs: []
  type: TYPE_NORMAL
