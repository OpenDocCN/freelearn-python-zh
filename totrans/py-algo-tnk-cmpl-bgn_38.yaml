- en: Chapter 26
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nested Loop Control Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 26.1 What is a Nested Loop?
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A nested loop is a loop within another loop or, in other words, an inner loop
    within an outer one.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: The outer loop controls the number of complete iterations of the inner loop.
    This means that the first iteration of the outer loop triggers the inner loop
    to start iterating until completion. Then, the second iteration of the outer loop
    triggers the inner loop to start iterating until completion again. This process
    repeats until the outer loop has performed all of its iterations.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Take the following Python program, for example.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_26.1'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 3):'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: for j in range(1, 4):     [[More…]](more.html#more_26_1_1)
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: print(i, j)
  id: totrans-9
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: In this program, the outer loop, controlled by the variable i, determines the
    number of complete iterations that the inner loop performs. Specifically, when
    variable i is 1, the inner loop performs three iterations (for j = 1, j = 2, and
    j = 3). After completing the inner loop, the outer loop needs to perform one more
    iteration (for i = 2). Consequently, the inner loop restarts, performing three
    new iterations again (for j = 1, j = 2, and j = 3).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: The previous example is similar to the following one.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: i = 1                    #Outer loop assigns value 1 to variable i
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):    #and inner loop performs three iterations'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: print(i, j)
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: i = 2                    #Outer loop assigns value 2 to variable i
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):    #and inner loop starts over and performs three new
    iterations'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: print(i, j)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: The output result is as follows.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter26-01.png)'
  id: totrans-19
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)As long as the syntax rules are not violated, you can nest
    as many loop control structures as you wish. For practical reasons however, as
    you move to four or five levels of nesting, the entire structure becomes very
    complex and difficult to understand. However, experience shows that the maximum
    number of levels of nesting that you will do in your entire life as a programmer
    is probably three or four.'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The inner and outer loops do not need to be the same type.
    For example, a for statement may nest (enclose) a while statement, or vice versa.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 26.1-1 Say “Hello Zeus”. Counting the Total Number of Iterations.
  id: totrans-22
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Find the number of times message “Hello Zeus” is displayed.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_26.1-1'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(4):'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Zeus")
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Solution
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: 'The values of variables i and j (in order of appearance) are as follows:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: ►For i = 0, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: ►For i = 1, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: ►For i = 2, the inner loop performs 4 iterations (for j = 0, j = 1, j = 2, and
    j = 3) and the message “Hello Zeus” is displayed 4 times.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: Therefore, the message “Hello Zeus” is displayed a total of 3 × 4 = 12 times.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)The outer loop controls the number of complete iterations
    of the inner one!'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 26.1-2 Creating the Trace Table
  id: totrans-35
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: For the next code fragment, determine the value that variable a contains at
    the end.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: i = 5
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 7:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 5, 2):'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: a = a * j + i
  id: totrans-41
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: The trace table is shown here.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | i | j |'
  id: totrans-46
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = 1 |   | 1 | ? | ? |'
  id: totrans-47
  prefs: []
  type: TYPE_TB
- en: '| 2 | i = 5 |   | 1 | 5 | ? |'
  id: totrans-48
  prefs: []
  type: TYPE_TB
- en: '| 3 | while i < 7 | This evaluates to True |'
  id: totrans-49
  prefs: []
  type: TYPE_TB
- en: '| 4 | j = 1 |   | 1 | 5 | 1 |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| 5 | a = a * j + i |   | 6 | 5 | 1 |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| 6 | j = 3 |   | 6 | 5 | 3 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| 7 | a = a * j + i |   | 23 | 5 | 3 |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| 8 | i += 1 |   | 23 | 6 | 3 |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| 9 | while i < 7 | This evaluates to True |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| 10 | j = 1 |   | 23 | 6 | 1 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: '| 11 | a = a * j + i |   | 29 | 6 | 1 |'
  id: totrans-57
  prefs: []
  type: TYPE_TB
- en: '| 12 | j = 3 |   | 29 | 6 | 3 |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
- en: '| 13 | a = a * j + i |   | 93 | 6 | 3 |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
- en: '| 14 | i += 1 |   | 93 | 7 | 3 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
- en: '| 15 | while i < 7 | This evaluates to False |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
- en: '| 16 | print(a) | It displays: 93 |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
- en: At the end of the program, variable a contains the value 93.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 26.2 Rules that Apply to Nested Loops
  id: totrans-64
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Beyond the four rules that apply to for-loops (presented in [Section 25.2](chapter25.html#toc_13)),
    there are two extra rules that you should always follow when writing programs
    with nested loops, since they can save you from undesirable side effects.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 1: The inner loop must begin and end entirely within the outer loop,
    which means that the loops must not overlap.'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
- en: '►Rule 2: An outer loop and the inner (nested) loop must not use the same variable.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 26.2-1 Violating the First Rule
  id: totrans-68
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart fragment that violates the first rule of nested loops, which
    states, “The inner loop must begin and end entirely within the outer loop”.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: The following flowchart fragment violates the first rule of nested loops.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter26-02.png)
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: If you try to follow the flow of execution, you will notice that it smoothly
    performs 5 × 10 = 50 iterations. No one can tell that this flowchart is wrong.
    In fact, it is technically correct. However, the issue lies in its readability.
    It's extremely difficult to discern what this flowchart is intended to accomplish.
    Moreover, this structure matches none of the already familiar loop control structures
    that you have been taught, so it cannot be directly converted into a Python program
    as is. Try to avoid this kind of nested loop!
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 26.2-2 Violating the Second Rule
  id: totrans-74
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Find the number of times message “Hello” is displayed.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 3:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(4, -1, -1):'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-79
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: At first glance, one would think that the word “Hello” is displayed 3 × 5 =
    15 times. However, a closer second look reveals that things are not always as
    they seem. This program violates the second rule of nested loops, which states,
    “An outer loop and the inner (nested) loop must not use the same variable”. Let's
    design the corresponding flowchart.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter26-03.png)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
- en: If you try to follow the flow of execution in this flowchart fragment, you can
    see that when the inner loop completes all of its five iterations, variable i
    contains the value 0\. Then, variable i increments by 1 and the outer loop repeats
    again. This process can continue forever since variable i can never exceed the
    value 3 that the Boolean expression of the outer loop requires. Therefore, the
    message “Hello” is displayed an infinite number of times.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: '26.3 Review Questions: True/False'
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: 1)A nested loop is an inner loop within an outer one.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 2)It is possible to nest a mid-test loop structure within a pre-test loop structure.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: 3)The maximum number of levels of nesting in a loop control structure is four.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: 4)When two loop control structures are nested one within the other, the loop
    that starts last must complete first.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: 5)When two loop control structures are nested one within the other, they must
    not use the same counter variable.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: 6)In the following code fragment the word “Hello” is displayed six times.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 4):'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 7)In the following code fragment the word “Hello” is displayed 12 times.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(2):'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 4):'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 'for k in range(1, 5, 2):'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-100
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: 8)In the following code fragment the word “Hello” is displayed an infinite number
    of times.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 4:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3, 0, -1):'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-105
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 9)In the following code fragment the word “Hello” is displayed nine times.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(3):'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: j = 1
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: j += 1
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if j >= 4: break'
  id: totrans-113
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 10)In the following program there is at least one mid-test loop structure.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 'while not False:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: 'while not False:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a >= -1: break'
  id: totrans-119
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if a == -1: break'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: s += a
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '26.4 Review Questions: Multiple Choice'
  id: totrans-123
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 1)In the following code fragment
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 3):'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, 3):'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello")
  id: totrans-128
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the values of variables i and j (in order of appearance) are
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: a)j = 1, i = 1, j = 1, i = 2, j = 2, i = 1, j = 2, i = 2
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: b)i = 1, j = 1, i = 1, j = 2, i = 2, j = 1, i = 2, j = 2
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: c)i = 1, j = 1, i = 2, j = 2
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: d)j = 1, i = 1, j = 2, i = 2
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 2)In the following code fragment
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: x = 2
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: 'while x > -2:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: x -= 1
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("Hello Hestia")
  id: totrans-139
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if x >= -2: break'
  id: totrans-140
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: the message “Hello Hestia” is displayed
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: a)4 times.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: b)an infinite number of times.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: c)0 times.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: 3)In the following code fragment
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: x = 1
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'while x != 500:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(x, 4):'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Artemis")
  id: totrans-150
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: x += 1
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: the message “Hello Artemis” is displayed
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: a)an infinite number of times.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: b)1500 times.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: c)6 times.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 4)The following code fragment
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 4):'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(1, i + 1):'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: print(i * j, ", ", sep = "", end = "")
  id: totrans-160
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print("The End!")
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: displays
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: a)1, 2, 4, 3, 6, 9, The End!
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: b)1, 2, 3, 4, 6, 9, The End!
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: c)1, 2, The End!, 4, 3, The End!, 6, 9, The End!
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following code fragment
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: i = 1
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'while i <= 10:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10, 0, -1):'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Dionysus")
  id: totrans-171
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 1
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: does not satisfy the property of
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: a)definiteness.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: b)finiteness.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: c)effectiveness.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: 26.5 Review Exercises
  id: totrans-177
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: 1)Fill in the gaps in the following code fragments so that all code fragments
    display the message “Hello Hephaestus” exactly 100 times.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: i)
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(6, ……):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 'for b in range(25):'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hephaestus")
  id: totrans-183
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ii)
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(0, …… + 1, 5):'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'for b in range(10, 20):'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hephaestus")
  id: totrans-187
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: iii)
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(……, -17, -2):'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: 'for b in range(150, 50, -5):'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hephaestus")
  id: totrans-191
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: iv)
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: 'for a in range(-11, -16, -1):'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: 'for b in range(100, …… + 1, 2):'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hephaestus")
  id: totrans-195
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 2)Design the corresponding flowchart and create a trace table to determine the
    values of the variables in each step of the next code fragment.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: a = 1
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: j = 1
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'while j <= 2:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: i = 10
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 'while i < 30:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: a = a + j + i
  id: totrans-202
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: i += 10
  id: totrans-203
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: j += 0.5
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the next code fragment. How many times is the statement s = s + i * j executed?
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: s = 0
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 5):'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'for j in range(3, i - 1, -1):'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: s = s + i * j
  id: totrans-210
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(s)
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 4)Create a trace table to determine the values of the variables in each step
    of the next Python program for three different executions. How many iterations
    does this Python program perform?
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) NO, (ii) YES, NO; and (iii)
    YES, YES, NO.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
- en: s = 1
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: y = 25
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: 'while True:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(1, 4):'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: s = s + y
  id: totrans-218
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y -= 5
  id: totrans-219
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: ans = input()
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'if ans != "YES": break'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: print(s)
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that displays an hours and minutes table in the following
    form.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: 0     0
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 0     1
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 0     2
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: 0     3
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: 0     59
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 1     0
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 1     1
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: 1     2
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '...'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: 23   59
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the output is aligned with tabs.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: 6)Using nested loop control structures, write a Python program that displays
    the following output.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 5 5 5 5 5
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: 4 4 4 4
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: 3 3 3
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 2 2
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '1'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: 7)Using nested loop control structures, write a Python program that displays
    the following output.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: '0'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 0 1
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: 0 1 2
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: 0 1 2 3
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 0 1 2 3 4
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: 0 1 2 3 4 5
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
- en: 8)Using nested loop control structures, write a Python program that displays
    the following rectangle.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *  *  *  *  *  *'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *  *  *  *  *  *'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *  *  *  *  *  *'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *  *  *  *  *  *  *'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: Then, try to do the same without using any loop control structure!
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that prompts the user to enter an integer N between
    3 and 20 and then displays a square of size N on each side. For example, if the
    user enters 4 for N, the program must display the following square.
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Then, try to do the same without using any loop control structure!
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a Python program that prompts the user to enter an integer N between
    3 and 20 and then displays a hollow square of size N on each side. For example,
    if the user enters 4 for N, the program must display the following hollow square.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '*        *'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: '*        *'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '*  *  *  *'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
- en: Then, try to do the same without using any loop control structure!
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: 11)Using nested loop control structures, write a Python program that displays
    the following triangle.
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 11)使用嵌套循环控制结构，编写一个Python程序，显示以下三角形。
- en: '*'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: '*  *'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *'
- en: '*  *  *'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *'
- en: '*  *  *  *'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: '*  *  *  *  *'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *  *'
- en: '*  *  *  *'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *  *'
- en: '*  *  *'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *  *'
- en: '*  *'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '*  *'
- en: '*'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '*'
- en: Then, try to do the same using just one for-loop (no nested loop control structures
    allowed!)
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，尝试只用一个for循环（不允许使用嵌套循环控制结构！）
