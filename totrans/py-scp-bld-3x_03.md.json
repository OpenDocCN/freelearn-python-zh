["```py\nbl_info = {\n    \"name\": \"The Simplest Add-on\",\n    \"author\": \"John Doe\",\n    \"version\": (1, 0),\n    \"blender\": (3, 00, 0),\n    \"description\": \"A very simple add-on\",\n    \"warning\": \"This is just for Learning\",\n    \"category\": \"Learning\",\n}\n```", "```py\ndef register():\n    # this function is called when the add-on is enabled\n    pass\n```", "```py\ndef unregister():\n    # this function is called when the add-on is disabled\n    pass\n```", "```py\nbl_info = {\n    \"name\": \"Collector\",\n    \"author\": \"John Doe\",\n    \"version\": (1, 0),\n    \"blender\": (3, 00, 0),\n    \"description\": \"Create collections for object types\",\n    \"category\": \"Object\",\n}\ndef register():\n    # this function is called when the add-on is enabled\n    pass\ndef unregister():\n    # this function is called when the add-on is disabled\n    pass\n```", "```py\nclass OBJECT_OT_collector_types(bpy.types.Operator):\n    \"\"\"Create collections based on objects types\"\"\"\n    bl_idname = \"object.pckt_type_collector\"\n    bl_label = \"Create Type Collections\"\n    @classmethod\n    def poll(cls, context):\n        return False\n    def execute(self, context):\n        # our code goes here\n        return {'FINISHED'}\n```", "```py\n    @classmethod\n    def poll(cls, context):\n        return len(context.scene.objects) > 0\n```", "```py\n    def execute(self, context):\n        mesh_cl = bpy.data.collections.new(\"Mesh\")\n        light_cl = bpy.data.collections.new(\"Light\")\n        cam_cl = bpy.data.collections.new(\"Camera\")\n        context.scene.collection.children.link(mesh_cl)\n        context.scene.collection.children.link(light_cl)\n        context.scene.collection.children.link(cam_cl)\n```", "```py\n        for ob in context.scene.objects:\n            if ob.type == 'MESH':\n                mesh_cl.objects.link(ob)\n            elif ob.type == 'LIGHT':\n                light_cl.objects.link(ob)\n            elif ob.type == 'CAMERA':\n                cam_cl.objects.link(ob)\n```", "```py\n        return {'FINISHED'}\n```", "```py\ndef register():\n    bpy.utils.register_class(OBJECT_OT_collector_types)\ndef unregister():\n    bpy.utils.unregister_class(OBJECT_OT_collector_types)\n```", "```py\nch3/addons/__pycache__/object_collector.cpython-39.pyc\n```", "```py\n    ch3/addons/__pycache__/object_collector.cpython-39.pyc\n    ```", "```py\n__pycache__\n```", "```py\nmesh_cl = bpy.data.collections.new(\"Mesh\")\n```", "```py\ntry:\n    mesh_cl = bpy.data.collections.new['Mesh']\nexcept KeyError:\n    mesh_cl = bpy.data.collections.new(\"Mesh\")\n```", "```py\ndef get_collection(name):\n    '''Returns the collection named after the given\n    argument. If it doesn't exist, a new collection\n    is created and linked to the scene'''\n    try:\n        return bpy.data.collections[name]\n    except KeyError:\n        cl = bpy.data.collections.new(name)\n        bpy.context.scene.collection.children.link(cl)\n        return cl\n```", "```py\n>>> bpy.data.objects['Cube'].type\n'MESH'\n```", "```py\n>>> bpy.data.objects['Cube'].type.title()\n'Mesh'\n```", "```py\n    @staticmethod\n    def get_collection(name):\n        '''Returns the collection named after the given\n        argument. If it doesn't exist, a new collection\n        is created and linked to the scene'''\n        try:\n            return bpy.data.collections[name]\n        except KeyError:\n            cl = bpy.data.collections.new(name)\n            bpy.context.scene.collection.children.link(cl)\n            return cl\n    def execute(self, context):\n        for ob in context.scene.objects:\n            cl = self.get_collection(ob.type.title())\n            cl.objects.link(ob)\n    return {'FINISHED'}\n```", "```py\n    cl.objects.link(ob)\nRuntimeError: Object 'Cube' already in collection 'Mesh'\n```", "```py\n            cl.objects.link(ob)\n```", "```py\n            try:\n                cl.objects.link(ob)\n            except RuntimeError:\n                continue\n```", "```py\ndef draw_menu_item(self, context):\n    row = self.layout.row()\n```", "```py\ndef draw_collector_item(self, context):\n    row = self.layout.row()\n    row.operator(OBJECT_OT_collector_types.bl_idname)\n```", "```py\nbpy.types.[AREA]_MT_[NAME]\n```", "```py\n>>> bpy.types.VIEW3D_MT_\n                        add(\n                        angle_control(\n                        armature_add(\n                        …\n```", "```py\n>>> bpy.types.VIEW3D_MT_object\n                              (\n                              _animation(\n                              _apply(\n                              _asset(\n                              …\n                              _context_menu(\n```", "```py\ndef register():\n    bpy.utils.register_class(OBJECT_OT_collector_types)\n    menu = bpy.types.VIEW3D_MT_object_context_menu\n    menu.append(draw_collector_item)\ndef unregister():\n    bpy.utils.unregister_class(OBJECT_OT_collector_types)\n    menu = bpy.types.VIEW3D_MT_object_context_menu\n    menu.remove(draw_collector_item)\n```"]