["```py\n    code. We may verify the creation of the code directory by running the ls command:\n    ```", "```py\ncp code/Chapter13/code/setup-ares.sh .\n```", "```py\n    sudo bash setup-ares.sh\n    ```", "```py\n    import time\n    import board\n    import pwmio\n    import digitalio\n    ```", "```py\n    class Alarm:\n        def __init__(self, buzzer_pin=board.GP1, led_pin1=board.GP0, led_pin2=board.GP2, frequency=4000):\n            self.buzzer = pwmio.PWMOut(buzzer_pin, frequency=frequency, duty_cycle=0)\n            self.led1 = digitalio.DigitalInOut(led_pin1)\n            self.led1.direction = digitalio.Direction.OUTPUT\n            self.led2 = digitalio.DigitalInOut(led_pin2)\n            self.led2.direction = digitalio.Direction.OUTPUT\n    ```", "```py\n        def activate_alarm(self, num_of_times=5):\n            blink_rate = 0.5\n            for _ in range(num_of_times):\n                self.buzzer.duty_cycle = 32768\n                self.led1.value = True\n                self.led2.value = True\n                time.sleep(blink_rate)\n                self.buzzer.duty_cycle = 0\n                self.led1.value = False\n                self.led2.value = False\n                time.sleep(blink_rate)\n    ```", "```py\n    alarm = Alarm(buzzer_pin=board.GP1, led_pin1=board.GP0, led_pin2=board.GP2)\n    alarm.activate_alarm(10)\n    ```", "```py\n    from PicoRobotics import KitronikPicoRobotics\n    import time\n    ```", "```py\n    class Wheel:\n        def __init__(self, speed):\n            self.motor_board = KitronikPicoRobotics()\n            self.speed = speed\n        def forward(self):\n            self.motor_board.motorOn(1, \"f\", self.speed)\n            self.motor_board.motorOn(2, \"f\", self.speed)\n        def reverse(self):\n            self.motor_board.motorOn(1, \"r\", self.speed)\n            self.motor_board.motorOn(2, \"r\", self.speed)\n        def turn_right(self):\n            self.motor_board.motorOn(1, \"r\", self.speed)\n            self.motor_board.motorOn(2, \"f\", self.speed)\n        def turn_left(self):\n            self.motor_board.motorOn(1, \"f\", self.speed)\n            self.motor_board.motorOn(2, \"r\", self.speed)\n        def stop(self):\n            self.motor_board.motorOff(1)\n            self.motor_board.motorOff(2)\n    ```", "```py\n    #Test code\n    wheel = Wheel()\n    wheel.forward()\n    time.sleep(1)\n    wheel.reverse()\n    time.sleep(1)\n    wheel.turn_right()\n    time.sleep(1)\n    wheel.turn_left()\n    time.sleep(1)\n    wheel.stop()\n    ```", "```py\n    import board\n    import busio\n    import time\n    from wheel import Wheel\n    from device_alarm import Alarm\n    ```", "```py\n    wheel = Wheel(20)\n    alarm = Alarm()\n    uart = busio.UART(board.GP4, board.GP5, baudrate=115200)\n    ```", "```py\n    def clear_uart_buffer():\n        while uart.in_waiting > 0:\n            uart.read(uart.in_waiting)\n    ```", "```py\n    while True:\n        data = uart.read(uart.in_waiting or 32)\n        while '<' in message_buffer and '>' in message_buffer:\n            start_index = message_buffer.find('<') + 1\n            end_index = message_buffer.find('>', start_index)\n            message = message_buffer[start_index:end_index].strip()\n            message_buffer = message_buffer[end_index+1:]\n            print(\"Received:\", message)\n            if message == 'f':\n                print(\"Moving forward\")\n                wheel.forward()\n            elif message == 'b':\n                print(\"Moving in reverse\")\n                wheel.reverse()\n            elif message == 'l':\n                print(\"Left turn\")\n                wheel.turn_left()\n            elif message == 'r':\n                print(\"Right turn\")\n                wheel.turn_right()\n            elif message == 'a':\n                print(\"Alarm\")\n                wheel.stop()\n                alarm.activate_alarm(2)\n            elif message == 's':\n                print(\"Stop\")\n                wheel.stop()\n    ```", "```py\n    vi with the following command:\n\n    ```", "```py\n\n    Running the command will produce the following output:\n    ```", "```py\n    code.py executing, the following command initiates the test:\n\n    ```", "```py\n\n    ```", "```py\n    cp code/Chapter13/code/distance-sensor-test.py .\n    ```", "```py\n    python3 distance-sensor-test.py\n    ```", "```py\n    cp -r code/Chapter13/code/ares_ws .\n    ```", "```py\n    cd ares_ws\n    ```", "```py\n    nano to view our code, we type the following:\n\n    ```", "```py\n            password = 'sudo-password'\n            command = 'chmod a+rw /dev/serial0'\n            subprocess.run(f'echo {password} | sudo -S {\n        command}', shell=True, check=True)\n    ```", "```py\n\n    ```", "```py\n    self.ser = serial.Serial('/dev/serial0', 115200, timeout=1)\n    ```", "```py\n        def send_message(self, command):\n            if command.strip() == 's' and\n    self.last_command_sent == 's':\n                print(\"Skip sending 's' command\n      to avoid sending it two times in a row\")\n                return\n            framed_command = f\"<{command}>\\n\"\n            print(f\"Sending framed command:\n              {framed_command.strip()}\")\n            self.ser.write(framed_command.encode\n            self.get_logger().info(f\"Sent command: {command.strip()}\")\n            self.last_command_sent = command.strip()\n    ```", "```py\n    colcon build\n    ```", "```py\n    source install/setup.bash\n    ```", "```py\n    ros2 run ares robot_control\n    ```"]