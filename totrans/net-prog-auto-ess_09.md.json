["```py\nclaus@dev:~$ sudo ip tuntap add dev tap0 mode tap\nclaus@dev:~$ sudo ip link set tap0 up\nclaus@dev:~$ ip link show tap0\n4: tap0: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc fq_codel state DOWN mode DEFAULT group default qlen 1000\n    link/ether b2:2e:f2:67:48:ff brd ff:ff:ff:ff:ff:ff\n```", "```py\nclaus@dev:~$ sudo ip link add A type veth peer name B\nclaus@dev:~$ sudo ip link set A netns 41784\nclaus@dev:~$ sudo ip link set B netns 41634\nclaus@dev:~$ sudo nsenter -t 41784 -n ip link show A\n11: A@if10: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    link/ether 9a:fa:1e:7f:0c:34 brd ff:ff:ff:ff:ff:ff link-netnsid 1\nclaus@dev:~$ sudo nsenter -t 41634 -n ip link show B\n10: B@if11: <BROADCAST,MULTICAST> mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    link/ether d6:de:78:9c:e9:73 brd ff:ff:ff:ff:ff:ff link-netnsid 1\n```", "```py\nclaus@dev:~$ sudo brctl addbr Mybridge\nclaus@dev:~$ sudo brctl addif Mybridge tap0\nclaus@dev:~$ sudo brctl addif Mybridge tap1\nclaus@dev:~$ sudo brctl addif Mybridge enp0s3\nclaus@dev-sdwan:~$ brctl show Mybridge\nbridge name   bridge id   STP   enabled   interfaces\nMybridge      8000.f65..  no              enp0s3\n                                          tap0\n                                          tap1\n```", "```py\nclaus@dev-sdwan:~$ ip link show Mybridge\n12: Mybridge: <NO-CARRIER,BROADCAST,MULTICAST,UP> mtu 1500 qdisc noqueue state DOWN mode DEFAULT group default qlen 1000\n    link/ether f6:78:c6:1a:1c:65 brd ff:ff:ff:ff:ff:ff\n```", "```py\nQuestion: Write a unit test for the following code:\nfrom paramiko import SSHClient\nclient = SSHClient()\nclient.connect('10.1.1.1', username='user', password='pw')\nAI: Here is the answer:\nimport unittest\nimport mock\nfrom paramiko import SSHClient\nclass TestSSHClient(unittest.TestCase):\n    @mock.patch('paramiko.SSHClient.connect')\n    def test_connect(self, mock_connect):\n        client = SSHClient()\n        client.connect('10.1.1.1', username='user', password='pw')\n        mock_connect.assert_called_with('10.1.1.1', username='user', password='pw')\n        client.close()\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\nimport networkx as nx\nimport yaml\nG = nx.Graph()\ndevices = {}\nwith open(\"topology.yaml\", \"r\") as file:\n    yfile = yaml.safe_load(file)\nfor i, x in enumerate(yfile[\"devices\"]):\n    devices[x] = i\n    G.add_node(i, name=x)\nfor link in yfile[\"links\"]:\n    G.add_edge(devices[link[0]], devices[link[1]])\n```", "```py\n$ sudo fping -q -c 100 -p 100 localhost\nlocalhost : xmt/rcv/%loss = 100/100/0%, min/avg/max = 0.030/0.044/0.069\n$ sudo tc qdisc add dev lo root netem delay 10ms\n$ sudo fping -q -c 100 -p 100 localhost\nlocalhost : xmt/rcv/%loss = 100/100/0%, min/avg/max = 20.4/21.4/24.8\n```", "```py\n$ sudo fping -q -c 100 -p 100 localhost\nlocalhost : xmt/rcv/%loss = 100/100/0%, min/avg/max = 0.031/0.044/0.101\n$ sudo tc qdisc add dev lo root netem loss 5%\n$ sudo fping -q -c 100 -p 100 localhost\nlocalhost : xmt/rcv/%loss = 100/96/4%, min/avg/max = 0.032/0.056/0.197\n```"]