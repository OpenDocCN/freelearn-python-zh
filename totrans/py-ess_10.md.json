["```py\n>>> my_file = open(\"Chapter_10/10letterwords.txt\")\n>>> text= my_file.read().splitlines()\n>>> text[:5]\n['consultive', 'syncopated', 'forestland', 'postmarked', 'configures']\n```", "```py\n>>> code_file = open(\"Chapter_1/ch01_ex1.py\", \"rt\", encoding=\"utf-8\", errors=\"replace\")\n>>> code_lines = list(code_file)\n>>> code_lines[:5]\n['#!/usr/bin/env python3\\n', '\"\"\"Python Essentials\\n', '\\n',\n'Chapter 1, Example Set 1\\n', '\\n']\n```", "```py\n>>> txt_stripped = (line.rstrip() for line in code_file)\n>>> txt_non_empty= (line for line in txt_stripped if line)\n>>> code_lines= list(txt_non_empty)\n```", "```py\n>>> raw_bytes = open(\"Chapter_10/favicon.ico\", \"rb\" )\n>>> data = raw_bytes.read()\n>>> len(data)\n894\n>>> data[:22]\nb'\\x00\\x00\\x01\\x00\\x01\\x00\\x10\\x10\\x00\\x00\\x00\\x00\\x18\\x00h\\x03\\x00\\x00\\x16\\x00\\x00\\x00'\n```", "```py\n>>> import struct\n>>> struct.unpack( \"<hhhbbbbhhii\", data[:22] )\n(0, 1, 1, 16, 16, 0, 0, 0, 24, 872, 22)\n```", "```py\nimport re\ndef tests_run(log_file):\n    data_pat = re.compile(r\"\\s*([\\w ]+):\\s+(\\d+\\.?\\d*)\\s*\")\n    for line in log_file:\n        match= data_pat.findall(line)\n        if match:\n            yield match\n```", "```py\n>>> import io\n>>> data = io.StringIO(\n... '''\n... Tests run: 1, Failures: 2, Errors: 0, Skipped: 1, Time elapsed: 0.547 sec\n... Other data\n... Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.018 sec\n... ''')\n>>> list( tests_run(data) )\n[[('Tests run', '1'), ('Failures', '2'), ('Errors', '0'), ('Skipped', '1'), ('Time elapsed', '0.547')],\n[('Tests run', '1'), ('Failures', '0'), ('Errors', '0'), ('Skipped', '0'), ('Time elapsed', '0.018')]]\n```", "```py\nfile_in= \"Chapter_10/log_example.txt\"\nfile_out= \"Chapter_10/summary.txt\"\nwith open(file_in) as source, open(file_out, \"w\") as target:\n    for stats in tests_run(source):\n        print(stats, file=target)\n```", "```py\nimport contextlib\nimport http.client\nwith contextlib.closing(\n  http.client.HTTPConnection(\"www.example.com\")) as host:\n    host.request(\"GET\", \"/path/to/resources/12345/\")\n    response= host.getresponse()\n    print(response.read())\n```", "```py\nimport contextlib\nimport shelve\ndef populate():\n    with contextlib.closing(\n      shelve.open(\"Chapter_10/shelf\",\"n\")) as shelf:\n        with open(\"Chapter_10/10letterwords.txt\") as source:\n            txt_stripped= (l.strip() for l in source)\n            txt_non_empty= (l for l in txt_stripped\n                            if l and not l.startswith(\"Tool\") )\n            for word in txt_non_empty:\n                key = \"word_list:{0}\".format(word[0])\n                try:\n                    word_list= shelf[key]\n                except KeyError:\n                    word_list= []\n                word_list.append(word)\n                shelf[key]= word_list\n```", "```py\nsorted(k for k in shelf.keys() if k.startswith(\"word_list:\"))\n```", "```py\nCREATE TABLE IF NOT EXISTS word(\n    letter VARCHAR(1),\n    word VARCHAR(10),\n    PRIMARY KEY (letter))\n```", "```py\ndef schema():\n    with SQL.connect(\"Chapter_10/sqlite.sdb\") as db:\n        db.execute( \"\"\"CREATE TABLE IF NOT EXISTS word(\n                   letter VARCHAR(1),\n                   word VARCHAR(10),\n                   PRIMARY KEY (letter))\n                   \"\"\")\n```", "```py\ndef populate():\n    with SQL.connect(\"Chapter_10/sqlite.sdb\") as db:\n        db.execute( \"\"\"DELETE FROM word\"\"\" )\n        with open(\"Chapter_10/10letterwords.txt\") as source:\n            txt_stripped= (l.strip() for l in source)\n            txt_non_empty= (l for l in txt_stripped\n                            if l and not l.startswith(\"Tool\") )\n            for word in txt_non_empty:\n                db.execute( \"\"\"INSERT INTO WORD(letter, word)\n                           VALUES (:1, :2)\"\"\", (word[0], word) )\n```", "```py\nSELECT letter, COUNT(*) FROM word GROUP BY letter\n```", "```py\nTEST_LOG_SUMMARY = (\n    \"module\", \"datetime\", \"tests_run\", \"failures\",\n    \"errors\", \"skipped\", \"time_elapsed\",\n)\n```", "```py\n{'module': 'com.mycompany.app.AppTest', 'errors': '0', 'time_elapsed': '0', 'failures': '0', 'datetime': 'Thu Oct 06 08:12:17 MDT 2005', 'tests_run': '1'}\n```", "```py\ndef mapper(name_iter, result):\n    writer= csv.DictWriter(result, fieldnames=TEST_LOG_SUMMARY, delimiter='|')\n    for name in name_iter:\n        with open(name) as source:\n            writer.writerow( log_parser(source) )\n```", "```py\nmapper(glob.glob(\"Chapter_10/log_*.txt\"), sys.stdout)\n```"]