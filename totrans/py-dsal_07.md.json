["```py\n>>> sum(map(ord, 'hello world'))\n1116\n\n```", "```py\n>>> sum(map(ord, 'world hello'))\n1116\n\n```", "```py\n>>> sum(map(ord, 'gello xorld'))\n1116\n\n```", "```py\n    def myhash(s): \n        mult = 1 \n        hv = 0 \n        for ch in s: \n            hv += mult * ord(ch) \n            mult += 1 \n        return hv \n\n```", "```py\n    for item in ('hello world', 'world hello', 'gello xorld'): \n        print(\"{}: {}\".format(item, myhash(item))) \n\n```", "```py\n% python hashtest.py\n\nhello world: 6736\nworld hello: 6616\ngello xorld: 6742\n\n```", "```py\n% python hashtest.py \nad: 297\nga: 297\n\n```", "```py\n    class HashItem: \n        def __init__(self, key, value): \n            self.key = key \n            self.value = value \n\n```", "```py\n    class HashTable: \n        def __init__(self): \n            self.size = 256 \n            self.slots = [None for i in range(self.size)] \n            self.count = 0 \n\n```", "```py\n    def _hash(self, key): \n        mult = 1 \n        hv = 0 \n        for ch in key: \n            hv += mult * ord(ch) \n            mult += 1 \n        return hv % self.size \n\n```", "```py\n    def put(self, key, value): \n        item = HashItem(key, value) \n        h = self._hash(key) \n\n```", "```py\n    while self.slots[h] is not None: \n        if self.slots[h].key is key: \n            break \n        h = (h + 1) % self.size \n\n```", "```py\n    if self.slots[h] is None: \n        self.count += 1 \n    self.slots[h] = item  \n\n```", "```py\n    def get(self, key): \n        h = self._hash(key)\n\n```", "```py\n        while self.slots[h] is not None: \n            if self.slots[h].key is key: \n                return self.slots[h].value \n            h = (h+ 1) % self.size \n\n```", "```py\n        return None \n\n```", "```py\n    ht = HashTable() \n    ht.put(\"good\", \"eggs\") \n    ht.put(\"better\", \"ham\") \n    ht.put(\"best\", \"spam\") \n    ht.put(\"ad\", \"do not\") \n    ht.put(\"ga\", \"collide\") \n\n    for key in (\"good\", \"better\", \"best\", \"worst\", \"ad\", \"ga\"): \n        v = ht.get(key) \n        print(v) \n\n```", "```py\n% python hashtable.py \neggs\nham\nspam\nNone\ndo not\ncollide  \n\n```", "```py\n    def __setitem__(self, key, value): \n        self.put(key, value) \n\n    def __getitem__(self, key): \n        return self.get(key) \n\n```", "```py\n    ht = HashTable() \n    ht[\"good\"] = \"eggs\" \n    ht[\"better\"] = \"ham\" \n    ht[\"best\"] = \"spam\" \n    ht[\"ad\"] = \"do not\" \n    ht[\"ga\"] = \"collide\" \n\n    for key in (\"good\", \"better\", \"best\", \"worst\", \"ad\", \"ga\"): \n        v = ht[key] \n        print(v) \n\n    print(\"The number of elements is: {}\".format(ht.count)) \n\n```", "```py\n    name = \"Joe\" \n    age = 27 \n\n```"]