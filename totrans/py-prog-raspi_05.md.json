["```py\n    >>> sequence = [1, 2, 3, 4, 5, 6]\n >>> example_list = ['apple', 'orange', 1.0, 2.0, 3]\n\n```", "```py\n    >>> type(sequence)\n <class 'list'>\n\n```", "```py\nfor item in sequence: \n    print(\"The number is \", item)\n\n```", "```py\n The number is  1\n The number is  2\n The number is  3\n The number is  4\n The number is  5\n The number is  6\n\n```", "```py\n    >>> dir(sequence)\n ['__add__', '__class__', '__contains__', '__delattr__',\n    '__delitem__', '__dir__', '__doc__', '__eq__',\n    '__format__', '__ge__', '__getattribute__', '__getitem__',\n    '__gt__', '__hash__', '__iadd__', '__imul__', '__init__', \n    '__iter__', '__le__', '__len__', '__lt__', '__mul__',\n    '__ne__', '__new__', '__reduce__', '__reduce_ex__',\n    '__repr__', '__reversed__', '__rmul__', '__setattr__', \n    '__setitem__', '__sizeof__', '__str__', '__subclasshook__', \n    'append', 'clear', 'copy', 'count', 'extend', 'index',\n    'insert', 'pop', 'remove', 'reverse', 'sort']\n\n```", "```py\n    >>> sequence.append(7)\n >>> sequence\n [1, 2, 3, 4, 5, 6, 7]\n\n```", "```py\n       >>> sequence = [1, 1, 2, 3, 4, 7, 5, 6, 7]\n >>> sequence.remove(7)\n >>> sequence\n [1, 1, 2, 3, 4, 5, 6, 7]\n\n```", "```py\n       >>> sequence.remove(1)\n >>> sequence\n [1, 2, 3, 4, 5, 6, 7]\n\n```", "```py\n       >>> sequence.remove(1)\n >>> sequence\n [2, 3, 4, 5, 6, 7]\n\n```", "```py\n    >>> index_list = [1, 2, 3, 4, 5, 6, 7]\n >>> index_list.index(5)\n 4\n\n```", "```py\n    random_list = [2, 2, 4, 5, 5, 5, 6, 7, 7, 8]\n >>> random_list.index(5)\n 3\n\n```", "```py\n    >>> index_list = [1, 2, 3, 4, 5, 6, 7]\n >>> index_list.pop(3)\n 4\n >>> index_list\n [1, 2, 3, 5, 6, 7]\n\n```", "```py\n    >>> index_list.pop()\n 7\n >>> index_list\n [1, 2, 3, 5, 6]\n\n```", "```py\n >>> random_list = [2, 9, 8, 4, 3, 2, 1, 7] >>> random_list.count(2) 2\n\n```", "```py\n    >>> day_of_week = ['Monday', 'Tuesday', 'Thursday',\n    'Friday', 'Saturday']\n\n```", "```py\n    >>> day_of_week.insert(2, 'Wednesday')\n >>> day_of_week\n ['Monday', 'Tuesday', 'Wednesday', 'Thursday',\n    'Friday', 'Saturday']\n\n```", "```py\n    >>> day_of_week.extend(sequence)\n >>> day_of_week\n ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday',\n    'Saturday', 1, 2, 3, 4, 5, 6]\n\n```", "```py\n    >>> [1, 2, 3] + [4, 5, 6]\n [1, 2, 3, 4, 5, 6]\n\n```", "```py\n    sequence.insert(6, [1, 2, 3])\n >>> sequence\n [1, 2, 3, 4, 5, 6, [1, 2, 3]]\n\n```", "```py\n    >>> sequence.clear()\n >>> sequence\n []\n\n```", "```py\n    random_list = [8, 7, 5, 2, 2, 5, 7, 5, 6, 4]\n >>> random_list.sort()\n >>> random_list\n [2, 2, 4, 5, 5, 5, 6, 7, 7, 8]\n\n```", "```py\n    >>> day_of_week = ['Monday', 'Tuesday', 'Thursday',\n    'Friday', 'Saturday']\n >>> day_of_week.sort()\n >>> day_of_week\n ['Friday', 'Monday', 'Saturday', 'Thursday', 'Tuesday']\n\n```", "```py\n    >>> random_list = [8, 7, 5, 2, 2, 5, 7, 5, 6, 4]\n >>> random_list.reverse()\n >>> random_list\n [4, 6, 5, 7, 5, 2, 2, 5, 7, 8]\n\n```", "```py\n    >>> copy_list = random_list.copy()\n >>> copy_list\n [4, 6, 5, 7, 5, 2, 2, 5, 7, 8]\n\n```", "```py\n >>> random_list = [4, 6, 5, 7, 5, 2, 2, 5, 7, 8] \n >>> random_list[0]4>>> random_list[3]7\n\n```", "```py\n    >>> random_list[2:5]\n [5, 7, 5]\n\n```", "```py\n    >>> random_list[:6]\n [4, 6, 5, 7, 5, 2]\n\n```", "```py\n    >>> random_list[::-1]\n [8, 7, 5, 2, 2, 5, 7, 5, 6, 4]\n\n```", "```py\n    >>> random_list[::2]\n [4, 5, 5, 2, 7]\n\n```", "```py\n    >>> random_list[2::2]\n [5, 5, 2, 7]\n\n```", "```py\n >>> random_list = [2, 1, 0, 8, 3, 1, 10, 9, 5, 4]\n\n```", "```py\n    >>> 6 in random_list\n False\n >>> 4 in random_list\n True\n\n```", "```py\n       random_list = []\n\n```", "```py\n       random_number = random.randint(0,10)\n\n```", "```py\n       for index in range(0,10):\n             random_number = random.randint(0, 10)\n             random_list.append(random_number)\n       print(\"The items in random_list are \")\n       print(random_list)\n\n```", "```py\n       The items in random_list are\n [2, 1, 0, 8, 3, 1, 10, 9, 5, 4]\n\n```", "```py\n >>> my_dict = {1: \"Hello\", 2: \"World\"}\n    >>> my_dict\n\n    {1: 'Hello', 2: 'World'}\n\n```", "```py\n >>> my_dict = {1: \"Hello\", 2: \"World\", 3: \"I\", 4: \"am\",\n    5: \"excited\", 6: \"to\", 7: \"learn\", 8: \"Python\" }\n\n```", "```py\n >>> for key in my_dict: ... \n\n    print(my_dict[value]) \n ... Hello World I \n am excited to learn Python\n\n```", "```py\n >>> for value in my_dict.values(): ... \n\n    print(value) ... Hello World I am excited to learn Python\n\n```", "```py\n >>> my_dict[9] = 'test' >>> my_dict {1: 'Hello', 2: 'World', 3: 'I', 4: 'am', 5: 'excited',\n       6: 'to', 7: 'learn', 8: 'Python', 9: 'test'}\n\n```", "```py\n >>> my_dict[9] = 'programming' >>> my_dict {1: 'Hello', 2: 'World', 3: 'I', 4: 'am', 5: 'excited',\n       6: 'to', 7: 'learn', 8: 'Python', 9: 'programming'}\n\n```", "```py\n >>> my_dict = {1: \"Hello\", 2: \"World\", 3: \"I\", 4: \"am\",\n      \"values\": [1, 2, 3,4, 5], \"test\": {\"1\": 1, \"2\": 2} } \n\n```", "```py\n >>> my_tuple = 1, 2, 3, 4, 5\n >>> my_tuple (1, 2, 3, 4, 5)\n\n```", "```py\n    >>> my_tuple[1] = 3\n Traceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n TypeError: 'tuple' object does not support item assignment\n\n```", "```py\n    >>> my_tuple = 1, 2, 3, 4, [1, 2, 4, 5]\n >>> my_tuple[4][2] = 3\n >>> my_tuple\n (1, 2, 3, 4, [1, 2, 3, 5])\n\n```", "```py\n >>> for value in my_dict.items(): ... \n\n    print(value) \n ...\n (1, 'Hello') (2, 'World') (3, 'I') (4, 'am') ('test', {'1': 1, '2': 2}) ('values', [1, 2, 3, 4, 5])\n\n```", "```py\n >>> my_set = set([1, 2, 3, 4, 5]) >>> my_set {1, 2, 3, 4, 5}\n\n```", "```py\n >>> my_set.update([1, 2, 3, 4, 5]) >>> my_set {1, 2, 3, 4, 5}\n\n```", "```py\n >>> my_set = set([1, 2, 3, 4, 5]) >>> my_set.add(6)\n >>> my_set\n {1, 2, 3, 4, 5, 6}\n\n```", "```py\nname = input(\"What is your name? \") \naddress = input(\"What is your address? \") \nage = input(\"How old are you? \")\n\n```", "```py\nclass Student(object):\n\n```", "```py\nclass Student(object): \n    \"\"\"A Python class to store student information\"\"\" \n\n    def __init__(self, name, address, age): \n        self.name = name \n        self.address = address \n        self.age = age\n\n```", "```py\nstudent1 = Student(\"John Doe\", \"123 Main Street, Newark, CA\", \"29\")\n\n```", "```py\nprint(student1.name) \nprint(student1.age) \nprint(student1.address)\n\n```", "```py\nstudent2 = Student(\"Jane Doe\", \"123 Main Street, San Jose, CA\", \"27\")\n\n```", "```py\nclass Student(object): \n    \"\"\"A Python class to store student information\"\"\" \n\n    def __init__(self, name, age, address): \n        self.name = name \n        self.address = address \n        self.age = age \n\n    def return_name(self): \n        \"\"\"return student name\"\"\" \n        return self.name \n\n    def return_age(self): \n        \"\"\"return student age\"\"\" \n        return self.age \n\n    def return_address(self): \n        \"\"\"return student address\"\"\" \n        return self.address\n\n```", "```py\nstudent1 = Student(\"John Doe\", \"29\", \"123 Main Street, Newark, CA\") \nprint(student1.return_name()) \nprint(student1.return_age()) \nprint(student1.return_address())\n\n```", "```py\ndef update_address(self, address): \n    \"\"\"update student address\"\"\" \n    self.address = address \n    return self.address\n\n```", "```py\nprint(student1.address()) \nprint(student1.update_address(\"234 Main Street, Newark, CA\"))\n\n```", "```py\n    123 Main Street, Newark, CA\n 234 Main Street, Newark, CA\n\n```", "```py\n    \"\"\"A Python class to store student information\"\"\"\n\n```", "```py\n# generate a random number between 0 and 9 \nrand_num = random.randrange(0,10)\n\n```", "```py\n# Todo: Fix this later\n\n```", "```py\nStudent(student1, \"John Doe\", \"29\", \"123 Main Street, Newark, CA\") \nStudent.return_address(student1)\n\n```", "```py\nclass TonePlayer(object): \n    \"\"\"A Python class to play boot-up complete tone\"\"\" \n\n    def __init__(self, file_name): \n        self.file_name = file_name\n\n```", "```py\n       tone_player = TonePlayer(\"/home/pi/tone.wav\")\n\n```", "```py\ndef set_volume(self, value): \n    \"\"\"set tone sound volume\"\"\" \n    subprocess.Popen([\"amixer\", \"set\", \"'PCM'\", str(value)], \n    shell=False)\n\n```", "```py\ndef play(self):\n    \"\"\"play the wav file\"\"\"\n    subprocess.Popen([\"aplay\", self.file_name], shell=False)\n\n```", "```py\nimport subprocess \n\nclass TonePlayer(object): \n    \"\"\"A Python class to play boot-up complete tone\"\"\" \n\n    def __init__(self, file_name): \n        self.file_name = file_name \n\n    def set_volume(self, value): \n        \"\"\"set tone sound volume\"\"\" \n        subprocess.Popen([\"amixer\", \"set\", \"'PCM'\", str(value)],\n        shell=False) \n\n    def play(self): \n        \"\"\"play the wav file\"\"\" \n        subprocess.Popen([\"aplay\", self.file_name], shell=False) \n\nif __name__ == \"__main__\": \n    tone_player = TonePlayer(\"/home/pi/tone.wav\") \n    tone_player.set_volume(75) \n    tone_player.play()\n\n```", "```py\npython3 /home/pi/toneplayer.py\n\n```", "```py\n    sudo pip3 install schedule\n\n```", "```py\nclass LightScheduler(object): \n    \"\"\"A Python class to turn on/off lights\"\"\" \n\n    def __init__(self, start_time, stop_time): \n        self.start_time = start_time \n        self.stop_time = stop_time \n        # lamp is connected to GPIO pin2.\n        self.lights = OutputDevice(2)\n\n```", "```py\ndef init_schedule(self): \n        # set the schedule \n        schedule.every().day.at(self.start_time).do(self.on) \n        schedule.every().day.at(self.stop_time).do(self.off) \n\n    def on(self): \n        \"\"\"turn on lights\"\"\" \n        self.lights.on() \n\n    def off(self): \n        \"\"\"turn off lights\"\"\" \n        self.lights.off()\n\n```", "```py\nimport schedule \nimport time \nfrom gpiozero import OutputDevice \n\nclass LightScheduler(object): \n    \"\"\"A Python class to turn on/off lights\"\"\" \n\n    def __init__(self, start_time, stop_time): \n        self.start_time = start_time \n        self.stop_time = stop_time \n        # lamp is connected to GPIO pin2.\n        self.lights = OutputDevice(2) \n\n    def init_schedule(self): \n        # set the schedule \n        schedule.every().day.at(self.start_time).do(self.on) \n        schedule.every().day.at(self.stop_time).do(self.off) \n\n    def on(self): \n        \"\"\"turn on lights\"\"\" \n        self.lights.on() \n\n    def off(self): \n        \"\"\"turn off lights\"\"\" \n        self.lights.off() \n\nif __name__ == \"__main__\": \n    lamp = LightScheduler(\"18:30\", \"9:30\") \n    lamp.on() \n    time.sleep(50) \n    lamp.off() \n    lamp.init_schedule() \n    while True:\n        schedule.run_pending() \n        time.sleep(1)\n\n```"]