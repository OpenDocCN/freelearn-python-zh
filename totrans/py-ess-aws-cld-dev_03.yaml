- en: '3'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '3'
- en: Cloud Computing with Lambda
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Lambda 的云计算
- en: In this chapter, we are going to learn the basics of Lambda and implement a
    Python application to be run in AWS Lambda. For this purpose, we will use our
    AWS account.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将学习 Lambda 的基础知识，并实现一个将在 AWS Lambda 中运行的 Python 应用程序。为此，我们将使用我们的 AWS
    账户。
- en: 'The chapter covers the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了以下主题：
- en: Cloud computing
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云计算
- en: What is Lambda?
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 什么是 Lambda？
- en: A sample application with Lambda
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Lambda 的示例应用
- en: Important configurations in Lambda
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 中的重要配置
- en: A Lambda skeleton
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 框架
- en: A Lambda returning value
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 返回值
- en: Logging in Lambda
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Lambda 中的日志记录
- en: Filing a metadata parser application with Lambda and S3
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Lambda 和 S3 提交元数据解析应用
- en: Cloud computing
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云计算
- en: Cloud computing allows you to use computer resources such as disk and memory
    without managing an infrastructure. The concept of the cloud is important in order
    to free you up to focus on your application. When you use your infrastructure,
    you need to buy or hire a computer, install all the necessary software, wire the
    cables, and keep the computer safe from physical as well as soft attacks. It is
    clear that it takes a significant amount of time; hence, your focus will be on
    reducing configuration time for your application. With cloud computing, you don’t
    have this kind of headache. The cloud provider takes most of the responsibility
    and sets up and maintains the data center for you. What you need to do is carry
    out some configuration and deploy your application to the data center. It makes
    your life easier; the cloud provider focuses on the infrastructure and you focus
    on the application. This is the biggest advantage of cloud computing.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算允许你使用计算机资源，如磁盘和内存，而无需管理基础设施。云的概念对于让你专注于应用程序非常重要。当你使用自己的基础设施时，你需要购买或租用一台计算机，安装所有必要的软件，连接电缆，并确保计算机免受物理和软件攻击。很明显，这需要大量的时间；因此，你的重点将是减少应用程序的配置时间。使用云计算，你不会有这种头痛。云服务提供商承担了大部分责任，并为你设置和维护数据中心。你需要做的是进行一些配置并将你的应用程序部署到数据中心。这使得你的生活更轻松；云服务提供商专注于基础设施，而你专注于应用程序。这是云计算的最大优势。
- en: What is Lambda?
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是 Lambda？
- en: Lambda is a computing service that allows you to run Python, Java, Node.js,
    Ruby, .NET, and Go code without provisioning and managing any server. In AWS,
    it is one of the most used services in the AWS stack. The only thing you need
    to do is develop and run your code. Lambda also has some advantages in terms of
    cost.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 是一种计算服务，允许你运行 Python、Java、Node.js、Ruby、.NET 和 Go 代码，而无需配置和管理任何服务器。在 AWS
    中，它是 AWS 堆栈中最常用的服务之一。你需要做的只是开发和运行你的代码。Lambda 在成本方面也有一些优势。
- en: Lambda is a container that is created by AWS in order to execute your application.
    When you create a Lambda function, AWS creates this container for you. Hence,
    you don’t need to provision an instance and install the compiler in the container.
    The only responsibility is to run your code when selecting Lambda.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 是 AWS 创建的容器，用于执行你的应用程序。当你创建一个 Lambda 函数时，AWS 会为你创建这个容器。因此，你不需要配置实例并在容器中安装编译器。唯一的责任是在选择
    Lambda 时运行你的代码。
- en: The advantages of Lambda
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lambda 的优势
- en: 'The advantages of Lambda are as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 的优势如下：
- en: There’s no need to provision a server
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有必要配置服务器
- en: It is a pay-as-you-go model
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它是一种按使用付费的模式
- en: It supports different runtimes such as Python, Java, and C#
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它支持不同的运行时，如 Python、Java 和 C#
- en: There’s no need to install a software development kit, since it is ready to
    develop
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于它已经准备好开发，因此无需安装软件开发工具包
- en: It has scalability features – if your process needs more resources, Lambda automatically
    scales it
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它具有可扩展性功能——如果你的流程需要更多资源，Lambda 会自动扩展它
- en: It saves a lot of time for your operational management
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它为你的运营管理节省了大量时间
- en: It is able to constantly monitor your Lambda functions
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它能够持续监控你的 Lambda 函数
- en: The limitations of Lambda
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lambda 的限制
- en: 'The limitations of Lambda are as follows:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda 的限制如下：
- en: '**Timeout limit**: If you have long-running functions, Lambda is not the best
    option. For now, Lambda has a 15-minute timeout limit. If the duration exceeds
    15 minutes, you will receive a timeout error.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时限制**：如果你有长时间运行的功能，Lambda 不是最佳选择。目前，Lambda 的超时限制为 15 分钟。如果持续时间超过 15 分钟，你将收到超时错误。'
- en: '**Memory limit**: When you run the function, the process needs memory allocation
    based on the process flow. If your process needs a massive amount of memory, you
    will receive an error. In addition to that, Lambda’s cost is tied to the execution
    time and memory used.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存限制**：当你运行函数时，进程需要根据流程分配内存。如果你的进程需要大量的内存，你会收到一个错误。除此之外，Lambda的成本与执行时间和使用的内存量相关。'
- en: 'You can check the up-to-date limits on the AWS Lambda quotas page: [https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.xhtml](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.xhtml).'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在AWS Lambda配额页面查看最新的限制：[https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.xhtml](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.xhtml)。
- en: In this section, we looked at some advantages and limitations of Lambda. It
    is very useful when you need to run any type of application quickly, with no need
    for a server or detailed installation. Now, we will implement a simple application
    to learn Lambda and use these advantages to our benefit.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了Lambda的一些优缺点。当你需要快速运行任何类型的应用程序，而不需要服务器或详细的安装时，它非常有用。现在，我们将实现一个简单的应用程序来学习Lambda，并利用这些优势为我们带来好处。
- en: A sample application with Lambda
  id: totrans-32
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一个使用Lambda的示例应用程序
- en: 'We are going to execute a sample application within Lambda step by step. To
    run a Python application on Lambda, take the following steps:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将分步骤在Lambda中执行一个示例应用程序。要在Lambda上运行Python应用程序，请按照以下步骤操作：
- en: Go to the AWS Management Console.
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往AWS管理控制台。
- en: 'Type `lambda` in the search box and click on the Lambda service:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入`lambda`并点击Lambda服务：
- en: '![](img/Figure_3.1_B19195.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_3.1_B19195.jpg)'
- en: Figure 3.1 – AWS Management Console
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.1 – AWS管理控制台
- en: Click **Create function**.
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**创建函数**。
- en: 'On the **Create function** page, select **Use a blueprint**, and within the
    blueprint, select the **hello-world-python** application:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在**创建函数**页面，选择**使用蓝图**，在蓝图内选择**hello-world-python**应用程序：
- en: '![](img/Figure_3.2_B19195.jpg)'
  id: totrans-40
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_3.2_B19195.jpg)'
- en: Figure 3.2 – Create function
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.2 – 创建函数
- en: 'On the next screen, enter the name of the Lambda function and select the security
    settings:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在下一屏幕上，输入Lambda函数的名称并选择安全设置：
- en: '![](img/Figure_3.3_B19195.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_3.3_B19195.jpg)'
- en: Figure 3.3 – Naming the function
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.3 – 命名函数
- en: When you run a Lambda function, you need to define the role that Lambda can
    use to be able to do some actions, which is done under **Execution role**. The
    role defines your permissions in AWS and how to access other AWS services. For
    example, if Lambda needs to access a database, then it should have the database
    access security role. In this case, Lambda will have basic permission to run a
    sample Python function.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行一个Lambda函数时，你需要定义Lambda可以使用的角色，以便能够执行一些操作，这可以在**执行角色**下完成。该角色定义了你在AWS中的权限以及如何访问其他AWS服务。例如，如果Lambda需要访问数据库，那么它应该有数据库访问安全角色。在这种情况下，Lambda将拥有运行示例Python函数的基本权限。
- en: 'Once you create the Lambda function, you will have basic Python code to be
    tested:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你创建了Lambda函数，你将拥有要测试的基本Python代码：
- en: '![](img/Figure_3.4_B19195.jpg)'
  id: totrans-47
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_3.4_B19195.jpg)'
- en: Figure 3.4 – A sample Lambda function
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.4 – 一个Lambda函数示例
- en: 'Click the **Test** button. When you click it, you can also set the parameters:'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**测试**按钮。当你点击它时，你也可以设置参数：
- en: '![](img/Figure_3.5_B19195.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_3.5_B19195.jpg)'
- en: Figure 3.5 – Running the Lambda function
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.5 – 运行Lambda函数
- en: 'After running the test, Lambda will run, and you will be able to see the results:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 在运行测试后，Lambda将运行，你将能够看到结果：
- en: '![](img/Figure_3.6_B19195.jpg)'
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_3.6_B19195.jpg)'
- en: Figure 3.6 – The output of the Lambda function
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.6 – Lambda函数的输出
- en: We have created a sample Lambda function. Once you implement the application,
    as you can see, running the application is very easy.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了一个Lambda函数示例。一旦你实现了应用程序，正如你所看到的，运行应用程序非常简单。
- en: Important configurations in Lambda
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda中的重要配置
- en: 'When you create a Lambda function, there are different configurations that
    need to be done in order to run it in an efficient way:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 当你创建一个Lambda函数时，需要完成不同的配置才能高效地运行它：
- en: '![](img/Figure_3.7_B19195.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/Figure_3.7_B19195.jpg)'
- en: Figure 3.7 – The Lambda configuration
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.7 – Lambda配置
- en: 'We will use these configurations for the next example. Before starting with
    the example, let’s take a look at the definitions of the configurations:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这些配置来演示下一个例子。在开始示例之前，让我们先看看这些配置的定义：
- en: '**Memory**: This configuration is used to define the memory limit of the application.
    You need to find the feasible amount of this value. If you define a large amount
    that is not used, it affects the cost. On the other hand, if you define a smaller
    amount of memory than is used, your application gives an out-of-memory exception.'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**内存**：此配置用于定义应用程序的内存限制。你需要找到这个值的可行量。如果你定义了一个很大的量而实际上并未使用，这会影响成本。另一方面，如果你定义的内存量小于实际使用量，你的应用程序会抛出内存不足异常。'
- en: '**Timeout**: We mentioned that the Lambda function has a limitation in terms
    of timeout. You can provide a duration limit under which the Lambda function is
    supposed to work.'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**超时**：我们提到Lambda函数在超时方面有限制。你可以在Lambda函数应该工作的持续时间限制下提供。'
- en: '`/tmp` folder is used for temporary storage and needs to be deleted after Lambda
    finishes the process.'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`/tmp`文件夹用于临时存储，Lambda处理完成后需要删除。'
- en: '**Triggers**: Triggers allow you to select an AWS source that runs a Lambda
    function. For example, S3, an object storage mechanism in AWS, could be a trigger
    for a Lambda function. We can add S3 configuration in Lambda such that when an
    object/file is uploaded to S3, it triggers Lambda.'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**触发器**：触发器允许你选择一个运行Lambda函数的AWS源。例如，S3，AWS中的对象存储机制，可以是Lambda函数的触发器。我们可以在Lambda中添加S3配置，这样当对象/文件上传到S3时，就会触发Lambda。'
- en: '`PUT` permission in the execution role.'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 执行角色中的`PUT`权限。
- en: '**Destinations**: When Lambda finishes the process, it can send information
    to other services, such as a queue.'
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**目标**：当Lambda完成处理时，它可以向其他服务发送信息，例如队列。'
- en: '**Environment variable**: This allows you to add an environment variable to
    be used in a Lambda application. For example, you can add a database URL to this
    configuration. If the database URL is changed, you don’t need to change the code.'
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**环境变量**：这允许你在Lambda应用程序中添加一个环境变量。例如，你可以将数据库URL添加到这个配置中。如果数据库URL发生变化，你不需要更改代码。'
- en: '`CRM` and `Order Management`, allowing you to categorize your functions and
    facilitate searching as well. This is also used for cost management.'
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`CRM`和`订单管理`，这允许你分类你的函数并便于搜索。这也用于成本管理。'
- en: '**Virtual Private Cloud (VPC)**: A VPC allows you to create AWS services in
    a virtual network environment that you define. You can separate AWS services into
    different network settings. As you see in the following diagram, two instances
    can be created in different environments:'
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**虚拟私有云（VPC）**：VPC允许你在你定义的虚拟网络环境中创建AWS服务。你可以将AWS服务分离到不同的网络设置中。正如你在以下图中看到的，可以在不同的环境中创建两个实例：'
- en: '![](img/Figure_3.8_B19195.jpg)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![](img/Figure_3.8_B19195.jpg)'
- en: Figure 3.8 – A VPC
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.8 – 一个VPC
- en: '**Monitoring and operations tool**: Lambda collects application logs by default,
    and they can be monitored via CloudWatch, which helps you to monitor an application.
    This tool is enabled by default, but you can also disable it.'
  id: totrans-72
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**监控和操作工具**：Lambda默认收集应用程序日志，并且可以通过CloudWatch进行监控，这有助于你监控应用程序。此工具默认启用，但你也可以禁用它。'
- en: The configuration of Lambda is important when creating a new function. It is
    good to know what configuration is used for what reason, hence enabling you to
    use Lambda in the right way.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: Lambda的配置在创建新函数时非常重要。了解不同配置用于何种原因是有益的，这样你可以正确地使用Lambda。
- en: A Lambda skeleton
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda骨架
- en: 'When you implement a Lambda function via Python, you need to follow some rules
    in order to execute the application. When a Lambda function is run, it calls the
    `handler` method, which is shown with the following syntax:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 当你通过Python实现Lambda函数时，你需要遵循一些规则以便执行应用程序。当Lambda函数运行时，它会调用`handler`方法，如下所示：
- en: '[PRE0]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'As you see, the first parameter is the `event` object. An `event` object consists
    of JSON in order to process data as a parameter. You can see a sample parameter
    here:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 如你所见，第一个参数是`event`对象。一个`event`对象由JSON组成，以便将数据作为参数处理。你可以在以下示例中看到参数：
- en: '[PRE1]'
  id: totrans-78
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'The second parameter shows information about the Lambda runtime. You can see
    some of the runtime fields here:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个参数显示了Lambda运行时的信息。你可以在以下位置看到一些运行时字段：
- en: '`function_name` (the name of the function)'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function_name`（函数名称）'
- en: '`function_version` (the version of the function)'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function_version`（函数版本）'
- en: '`memory_limit_in_mb` (the Lambda function memory limit)'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`memory_limit_in_mb`（Lambda函数内存限制）'
- en: We've looked at the main skeleton of the Python Lambda function. In the next
    section, we'll see how to return a value from Lambda.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了Python Lambda函数的主要结构。在下一节中，我们将看到如何从Lambda返回一个值。
- en: Lambda returning value
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda返回值
- en: 'In Lambda, you can return a value that is either a simple message or a complex
    event with JSON. In the following example, you can see a sample returning message
    for Lambda:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Lambda 中，您可以返回一个简单的消息或一个复杂的 JSON 事件。在以下示例中，您可以看到 Lambda 的一个示例返回消息：
- en: '[PRE2]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'In this example, Lambda takes `Temperature` and `Wind` as input and returns
    these parameters as a message. In the following example, you can see a more complex
    return value:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，Lambda 以 `Temperature` 和 `Wind` 作为输入，并将这些参数作为消息返回。在以下示例中，您可以看到更复杂的返回值：
- en: '[PRE3]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As you can see in this example, the return value consists of a simple object
    to be parsed by the invoker. For example, if Lambda is called by one of the Python
    applications, this object will be returned once Lambda finishes the process. In
    general, this parameter allows you to run a Python application with different
    behavior. In the next section, we'll see how to log information in Lambda.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 如此例所示，返回值由一个简单对象组成，该对象将被调用者解析。例如，如果 Lambda 被某个 Python 应用程序调用，则在 Lambda 完成处理后，此对象将被返回。通常，此参数允许您以不同的行为运行
    Python 应用程序。在下一节中，我们将了解如何在 Lambda 中记录信息。
- en: Logging in Lambda
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Lambda 中的日志记录
- en: It is important to use logging functionality in order to trace your application.
    In some cases, you need to get information about an application; alternatively,
    you may be processing data via Lambda and you may get an exceptional result. Hence,
    logging is helpful to check the information to understand the real problem in
    the application.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用日志功能来跟踪应用程序非常重要。在某些情况下，您可能需要获取有关应用程序的信息；或者，您可能通过 Lambda 处理数据，并可能得到一个异常结果。因此，日志有助于检查信息，以了解应用程序中的真正问题。
- en: 'There are multiple logging libraries that you can use in Lambda, including
    this one: [https://docs.python.org/3/library/logging.xhtml](https://docs.python.org/3/library/logging.xhtml)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 Lambda 中使用多个日志库，包括这个：[https://docs.python.org/3/library/logging.xhtml](https://docs.python.org/3/library/logging.xhtml)
- en: 'In the following example, just add a log and return a value:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下示例中，只需添加一个日志并返回一个值：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: I always recommend adding some logs within an application; it is one of the
    best practices for being a good developer. In addition to that, we are going to
    dive deeper into CloudWatch, which is a logging and monitoring service in AWS.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我总是推荐在应用程序中添加一些日志；这是成为一名优秀开发者的最佳实践之一。除此之外，我们还将更深入地了解 CloudWatch，这是 AWS 中的日志和监控服务。
- en: Filing a metadata parser application with Lambda and S3
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Lambda 和 S3 提交元数据解析应用程序
- en: 'We are going to execute another application within Lambda. In this case, Lambda
    will be triggered by S3\. S3 is an object storage service to which you can upload
    different types of files, such as image, CSV, and text files. In this example,
    when you upload a file to S3, the service will trigger the Lambda function, which
    in turn will provide information about file metadata. Let’s implement the application
    step by step:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 Lambda 中执行另一个应用程序。在这种情况下，Lambda 将由 S3 触发。S3 是一个对象存储服务，您可以上传不同类型的文件，如图像、CSV
    和文本文件。在这个例子中，当您将文件上传到 S3 时，该服务将触发 Lambda 函数，该函数反过来将提供有关文件元数据的信息。让我们一步一步实现应用程序：
- en: Log in to the AWS Management Console.
  id: totrans-98
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录 AWS 管理控制台。
- en: Type `lambda` in the search box and go to the Lambda service.
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在搜索框中输入 `lambda` 并转到 Lambda 服务。
- en: Click **Create function**.
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击 **创建函数**。
- en: 'On the **Create function** page, select **Author from scratch** and then in
    the **Runtime** field, select **Python 3.9**:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **创建函数** 页面上，选择 **从头开始创建**，然后在 **运行时** 字段中选择 **Python 3.9**：
- en: '![](img/Figure_3.9_B19195.jpg)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.9](img/Figure_3.9_B19195.jpg)'
- en: Figure 3.9 – Create function
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.9 – 创建函数
- en: 'In the `S3TriggerLambdaReadRole`. The role is required to read the file from
    the S3 service:'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `S3TriggerLambdaReadRole` 中。该角色需要从 S3 服务中读取文件：
- en: '![](img/Figure_3.10_B19195.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.10](img/Figure_3.10_B19195.jpg)'
- en: Figure 3.10 – Permissions
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.10 – 权限
- en: 'Click the **Create function** button at the bottom of the page:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击页面底部的 **创建函数** 按钮：
- en: '![](img/Figure_3.11_B19195.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图 3.11](img/Figure_3.11_B19195.jpg)'
- en: Figure 3.11 – Create function
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图 3.11 – 创建函数
- en: 'In order to read object metadata, paste the following code snippet into the
    Lambda function and click the **Deploy** button:'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了读取对象元数据，将以下代码片段粘贴到 Lambda 函数中，然后点击 **部署** 按钮：
- en: '[PRE5]'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can also find the original code block from AWS: [https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.xhtml](https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.xhtml).'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 您也可以从 AWS 找到原始代码块：[https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.xhtml](https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.xhtml)。
- en: '**Boto3** is used to manage AWS services for Python. We created an S3 client
    to access and manage the S3 service.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: The application is triggered when you put a file into S3\. In the code snippet,
    the code gets the bucket information from the `bucket` variable. The `urllib`
    library allows you to parse an S3 key in order to retrieve an S3 object via the
    `get_object` method. Then, we print the content type.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see the latest code snippet within Lambda:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.12_B19195.jpg)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – A Lambda function with code
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: 'It is time to create an S3 object. Type `s3` in the AWS Services search box:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.13_B19195.jpg)'
  id: totrans-119
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Searching S3
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **S3** service.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the **S3** service, click the **Create** **bucket** button:'
  id: totrans-122
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.14_B19195.jpg)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Creating an S3 bucket
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Give a unique name to the S3 bucket. The bucket is like a folder, and you can
    authorize it to upload files such as image and CSV files. Note that the bucket
    name should be unique:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.15_B19195.jpg)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Entering a bucket name
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should see a list of buckets and the bucket that you created:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.16_B19195.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – A bucket list
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created an S3 bucket. Now, we need to make a small configuration that
    triggers a Lambda function when a file is uploaded to S3:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the bucket link. For this sample, we need to click **inputforlambda123**.
    It changes based on the creation name that the user inputted at the beginning:'
  id: totrans-132
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.17_B19195.jpg)'
  id: totrans-133
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – The bucket list
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Properties** tab:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.18_B19195.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – The features of the bucket
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the **Properties** page, find the **Event** **notifications**
    tab.
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Create event** **notification** button:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.19_B19195.jpg)'
  id: totrans-140
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – The Event notifications tab
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: 'In the form, fill out the event name and select the event type in the **Event
    types** section. For this example, we are going to select the **All object create
    events** option. Hence, when an object is created, the Lambda function will be
    triggered:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.20_B19195.jpg)'
  id: totrans-143
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Event configuration
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the page, select the Lambda function that will be triggered,
    under the **Destination** section, and click the **Save** **changes** button:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.21_B19195.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – The event destination
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a success message in the AWS console:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.22_B19195.jpg)'
  id: totrans-149
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – The event destination
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also double-check with Lambda whether the event has been successfully
    created. When you click the respective Lambda function, it shows the event source:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.23_B19195.jpg)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – Lambda with a trigger
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, you are able to see the Lambda function on the left side as
    a trigger. It is time to test our Lambda trigger:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the S3 bucket that you created and navigate to it. After that, click the
    **Upload** button:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.24_B19195.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图3.24_B19195](img/Figure_3.24_B19195.jpg)'
- en: Figure 3.24 – An S3 bucket
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.24 – S3存储桶
- en: 'Click the **Add files** button, which allows you to add any kind of file from
    your computer. For this example, we have uploaded one RTF file. You can also upload
    an image, PDF, or whatever you want:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**添加文件**按钮，允许您从您的计算机添加任何类型的文件。在这个例子中，我们上传了一个RTF文件。您也可以上传图片、PDF或您想要的任何文件：
- en: '![](img/Figure_3.25_B19195.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图3.25_B19195](img/Figure_3.25_B19195.jpg)'
- en: Figure 3.25 – The S3 Upload page
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.25 – S3上传页面
- en: 'The following screenshot shows that you have successfully uploaded the `testTriggr.rtf`
    file to S3\. S3 also gives some details regarding files, such as the type, the
    latest modification time, as well as the size. If you have more files, you can
    see a file list under the **Objects** panel:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示您已成功将`testTriggr.rtf`文件上传到S3。S3还提供了有关文件的一些详细信息，例如类型、最新修改时间以及大小。如果您有更多文件，您可以在**对象**面板下看到文件列表：
- en: '![](img/Figure_3.26_B19195.jpg)'
  id: totrans-162
  prefs: []
  type: TYPE_IMG
  zh: '![图3.26_B19195](img/Figure_3.26_B19195.jpg)'
- en: Figure 3.26 – The S3 file list
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.26 – S3文件列表
- en: 'As we have uploaded a file to S3, the Lambda function should work. It is time
    to check whether that is the case. Navigate to the Lambda function:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们已经将文件上传到S3，Lambda函数应该可以工作。现在是时候检查它是否如此了。导航到Lambda函数：
- en: '![](img/Figure_3.27_B19195.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图3.27_B19195](img/Figure_3.27_B19195.jpg)'
- en: Figure 3.27 – The Lambda function
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.27 – Lambda函数
- en: 'Click the **Monitor** tab, and you should be able to see that the Lambda is
    called:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击**监控**选项卡，您应该能够看到Lambda已被调用：
- en: '![](img/Figure_3.28_B19195.jpg)'
  id: totrans-168
  prefs: []
  type: TYPE_IMG
  zh: '![图3.28_B19195](img/Figure_3.28_B19195.jpg)'
- en: Figure 3.28 — Monitor in Lambda
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.28 – Lambda中的监控
- en: We can also check the detailed logs via CloudWatch. As we mentioned early, CloudWatch
    helps you to check AWS service logs.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们也可以通过CloudWatch检查详细的日志。正如我们之前提到的，CloudWatch可以帮助您检查AWS服务的日志。
- en: 'On the same page, click **View logs in CloudWatch**. You will be redirected
    to the CloudWatch service:'
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一页面上，点击**在CloudWatch中查看日志**。您将被重定向到CloudWatch服务：
- en: '![](img/Figure_3.29_B19195.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
  zh: '![图3.29_B19195](img/Figure_3.29_B19195.jpg)'
- en: Figure 3.29 – The CloudWatch service
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.29 – CloudWatch服务
- en: 'When you click the link under **Log stream**, you will be able to see the logs
    that you implemented in the Lambda function:'
  id: totrans-174
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当您点击**日志流**下的链接时，您将能够看到在Lambda函数中实现的日志：
- en: '![](img/Figure_3.30_B19195.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
  zh: '![图3.30_B19195](img/Figure_3.30_B19195.jpg)'
- en: Figure 3.30 – CloudWatch logs
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 图3.30 – CloudWatch日志
- en: You can also upload different types of files in order to test the Lambda function
    as well as the CloudWatch logs.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 您还可以上传不同类型的文件以测试Lambda函数以及CloudWatch日志。
- en: We implemented a simple Python application integrated with S3\. When you add
    a file to a storage mechanism, it triggers the Lambda function in order to process
    the file. As you saw in this example, you can test your Python code without provisioning
    a server and installing the Python library. Lambda comes with logging, monitoring,
    and object storage capabilities.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 我们实现了一个简单的与S3集成的Python应用程序。当您将文件添加到存储机制中时，它会触发Lambda函数以处理该文件。正如您在这个示例中所看到的，您可以在不配置服务器和安装Python库的情况下测试您的Python代码。Lambda自带日志记录、监控和对象存储功能。
- en: Summary
  id: totrans-179
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we dived into Lambda, which is one of the most important services
    in AWS. Lambda helps you to deploy and run your application without provisioning
    a server, which facilitates deployment time. We also touched upon the S3 service,
    which is used for object storage and has good integration with Lambda. In the
    following chapter, we will take a look at how to provision a server and run a
    Python application on an AWS-based server.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们深入探讨了Lambda，它是AWS中最重要的服务之一。Lambda可以帮助您在不配置服务器的情况下部署和运行应用程序，从而简化部署时间。我们还提到了S3服务，它用于对象存储，并且与Lambda有良好的集成。在下一章中，我们将探讨如何在AWS服务器上配置服务器并运行Python应用程序。
