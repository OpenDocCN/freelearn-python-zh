- en: '3'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud Computing with Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn the basics of Lambda and implement a
    Python application to be run in AWS Lambda. For this purpose, we will use our
    AWS account.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is Lambda?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sample application with Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important configurations in Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Lambda skeleton
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A Lambda returning value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging in Lambda
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Filing a metadata parser application with Lambda and S3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Cloud computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud computing allows you to use computer resources such as disk and memory
    without managing an infrastructure. The concept of the cloud is important in order
    to free you up to focus on your application. When you use your infrastructure,
    you need to buy or hire a computer, install all the necessary software, wire the
    cables, and keep the computer safe from physical as well as soft attacks. It is
    clear that it takes a significant amount of time; hence, your focus will be on
    reducing configuration time for your application. With cloud computing, you don’t
    have this kind of headache. The cloud provider takes most of the responsibility
    and sets up and maintains the data center for you. What you need to do is carry
    out some configuration and deploy your application to the data center. It makes
    your life easier; the cloud provider focuses on the infrastructure and you focus
    on the application. This is the biggest advantage of cloud computing.
  prefs: []
  type: TYPE_NORMAL
- en: What is Lambda?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lambda is a computing service that allows you to run Python, Java, Node.js,
    Ruby, .NET, and Go code without provisioning and managing any server. In AWS,
    it is one of the most used services in the AWS stack. The only thing you need
    to do is develop and run your code. Lambda also has some advantages in terms of
    cost.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda is a container that is created by AWS in order to execute your application.
    When you create a Lambda function, AWS creates this container for you. Hence,
    you don’t need to provision an instance and install the compiler in the container.
    The only responsibility is to run your code when selecting Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: The advantages of Lambda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The advantages of Lambda are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: There’s no need to provision a server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is a pay-as-you-go model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It supports different runtimes such as Python, Java, and C#
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s no need to install a software development kit, since it is ready to
    develop
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It has scalability features – if your process needs more resources, Lambda automatically
    scales it
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It saves a lot of time for your operational management
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is able to constantly monitor your Lambda functions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The limitations of Lambda
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The limitations of Lambda are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Timeout limit**: If you have long-running functions, Lambda is not the best
    option. For now, Lambda has a 15-minute timeout limit. If the duration exceeds
    15 minutes, you will receive a timeout error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Memory limit**: When you run the function, the process needs memory allocation
    based on the process flow. If your process needs a massive amount of memory, you
    will receive an error. In addition to that, Lambda’s cost is tied to the execution
    time and memory used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can check the up-to-date limits on the AWS Lambda quotas page: [https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.xhtml](https://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-limits.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we looked at some advantages and limitations of Lambda. It
    is very useful when you need to run any type of application quickly, with no need
    for a server or detailed installation. Now, we will implement a simple application
    to learn Lambda and use these advantages to our benefit.
  prefs: []
  type: TYPE_NORMAL
- en: A sample application with Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to execute a sample application within Lambda step by step. To
    run a Python application on Lambda, take the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the AWS Management Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Type `lambda` in the search box and click on the Lambda service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.1_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.1 – AWS Management Console
  prefs: []
  type: TYPE_NORMAL
- en: Click **Create function**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Create function** page, select **Use a blueprint**, and within the
    blueprint, select the **hello-world-python** application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.2_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.2 – Create function
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, enter the name of the Lambda function and select the security
    settings:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.3_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.3 – Naming the function
  prefs: []
  type: TYPE_NORMAL
- en: When you run a Lambda function, you need to define the role that Lambda can
    use to be able to do some actions, which is done under **Execution role**. The
    role defines your permissions in AWS and how to access other AWS services. For
    example, if Lambda needs to access a database, then it should have the database
    access security role. In this case, Lambda will have basic permission to run a
    sample Python function.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you create the Lambda function, you will have basic Python code to be
    tested:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.4_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.4 – A sample Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Test** button. When you click it, you can also set the parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.5_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.5 – Running the Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'After running the test, Lambda will run, and you will be able to see the results:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.6_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.6 – The output of the Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: We have created a sample Lambda function. Once you implement the application,
    as you can see, running the application is very easy.
  prefs: []
  type: TYPE_NORMAL
- en: Important configurations in Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you create a Lambda function, there are different configurations that
    need to be done in order to run it in an efficient way:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.7_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.7 – The Lambda configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'We will use these configurations for the next example. Before starting with
    the example, let’s take a look at the definitions of the configurations:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Memory**: This configuration is used to define the memory limit of the application.
    You need to find the feasible amount of this value. If you define a large amount
    that is not used, it affects the cost. On the other hand, if you define a smaller
    amount of memory than is used, your application gives an out-of-memory exception.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Timeout**: We mentioned that the Lambda function has a limitation in terms
    of timeout. You can provide a duration limit under which the Lambda function is
    supposed to work.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`/tmp` folder is used for temporary storage and needs to be deleted after Lambda
    finishes the process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Triggers**: Triggers allow you to select an AWS source that runs a Lambda
    function. For example, S3, an object storage mechanism in AWS, could be a trigger
    for a Lambda function. We can add S3 configuration in Lambda such that when an
    object/file is uploaded to S3, it triggers Lambda.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PUT` permission in the execution role.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Destinations**: When Lambda finishes the process, it can send information
    to other services, such as a queue.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Environment variable**: This allows you to add an environment variable to
    be used in a Lambda application. For example, you can add a database URL to this
    configuration. If the database URL is changed, you don’t need to change the code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`CRM` and `Order Management`, allowing you to categorize your functions and
    facilitate searching as well. This is also used for cost management.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Virtual Private Cloud (VPC)**: A VPC allows you to create AWS services in
    a virtual network environment that you define. You can separate AWS services into
    different network settings. As you see in the following diagram, two instances
    can be created in different environments:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.8_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.8 – A VPC
  prefs: []
  type: TYPE_NORMAL
- en: '**Monitoring and operations tool**: Lambda collects application logs by default,
    and they can be monitored via CloudWatch, which helps you to monitor an application.
    This tool is enabled by default, but you can also disable it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The configuration of Lambda is important when creating a new function. It is
    good to know what configuration is used for what reason, hence enabling you to
    use Lambda in the right way.
  prefs: []
  type: TYPE_NORMAL
- en: A Lambda skeleton
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you implement a Lambda function via Python, you need to follow some rules
    in order to execute the application. When a Lambda function is run, it calls the
    `handler` method, which is shown with the following syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'As you see, the first parameter is the `event` object. An `event` object consists
    of JSON in order to process data as a parameter. You can see a sample parameter
    here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'The second parameter shows information about the Lambda runtime. You can see
    some of the runtime fields here:'
  prefs: []
  type: TYPE_NORMAL
- en: '`function_name` (the name of the function)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function_version` (the version of the function)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`memory_limit_in_mb` (the Lambda function memory limit)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We've looked at the main skeleton of the Python Lambda function. In the next
    section, we'll see how to return a value from Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Lambda returning value
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In Lambda, you can return a value that is either a simple message or a complex
    event with JSON. In the following example, you can see a sample returning message
    for Lambda:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'In this example, Lambda takes `Temperature` and `Wind` as input and returns
    these parameters as a message. In the following example, you can see a more complex
    return value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As you can see in this example, the return value consists of a simple object
    to be parsed by the invoker. For example, if Lambda is called by one of the Python
    applications, this object will be returned once Lambda finishes the process. In
    general, this parameter allows you to run a Python application with different
    behavior. In the next section, we'll see how to log information in Lambda.
  prefs: []
  type: TYPE_NORMAL
- en: Logging in Lambda
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It is important to use logging functionality in order to trace your application.
    In some cases, you need to get information about an application; alternatively,
    you may be processing data via Lambda and you may get an exceptional result. Hence,
    logging is helpful to check the information to understand the real problem in
    the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are multiple logging libraries that you can use in Lambda, including
    this one: [https://docs.python.org/3/library/logging.xhtml](https://docs.python.org/3/library/logging.xhtml)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following example, just add a log and return a value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: I always recommend adding some logs within an application; it is one of the
    best practices for being a good developer. In addition to that, we are going to
    dive deeper into CloudWatch, which is a logging and monitoring service in AWS.
  prefs: []
  type: TYPE_NORMAL
- en: Filing a metadata parser application with Lambda and S3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to execute another application within Lambda. In this case, Lambda
    will be triggered by S3\. S3 is an object storage service to which you can upload
    different types of files, such as image, CSV, and text files. In this example,
    when you upload a file to S3, the service will trigger the Lambda function, which
    in turn will provide information about file metadata. Let’s implement the application
    step by step:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the AWS Management Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `lambda` in the search box and go to the Lambda service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click **Create function**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'On the **Create function** page, select **Author from scratch** and then in
    the **Runtime** field, select **Python 3.9**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.9_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.9 – Create function
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `S3TriggerLambdaReadRole`. The role is required to read the file from
    the S3 service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.10_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.10 – Permissions
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Create function** button at the bottom of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.11_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.11 – Create function
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to read object metadata, paste the following code snippet into the
    Lambda function and click the **Deploy** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also find the original code block from AWS: [https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.xhtml](https://docs.aws.amazon.com/lambda/latest/dg/with-s3-example.xhtml).'
  prefs: []
  type: TYPE_NORMAL
- en: '**Boto3** is used to manage AWS services for Python. We created an S3 client
    to access and manage the S3 service.'
  prefs: []
  type: TYPE_NORMAL
- en: The application is triggered when you put a file into S3\. In the code snippet,
    the code gets the bucket information from the `bucket` variable. The `urllib`
    library allows you to parse an S3 key in order to retrieve an S3 object via the
    `get_object` method. Then, we print the content type.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also see the latest code snippet within Lambda:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.12_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.12 – A Lambda function with code
  prefs: []
  type: TYPE_NORMAL
- en: 'It is time to create an S3 object. Type `s3` in the AWS Services search box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.13_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.13 – Searching S3
  prefs: []
  type: TYPE_NORMAL
- en: Go to the **S3** service.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Within the **S3** service, click the **Create** **bucket** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.14_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.14 – Creating an S3 bucket
  prefs: []
  type: TYPE_NORMAL
- en: 'Give a unique name to the S3 bucket. The bucket is like a folder, and you can
    authorize it to upload files such as image and CSV files. Note that the bucket
    name should be unique:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.15_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.15 – Entering a bucket name
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, you should see a list of buckets and the bucket that you created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.16_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.16 – A bucket list
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created an S3 bucket. Now, we need to make a small configuration that
    triggers a Lambda function when a file is uploaded to S3:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the bucket link. For this sample, we need to click **inputforlambda123**.
    It changes based on the creation name that the user inputted at the beginning:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.17_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.17 – The bucket list
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Properties** tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.18_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.18 – The features of the bucket
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom of the **Properties** page, find the **Event** **notifications**
    tab.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click the **Create event** **notification** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.19_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.19 – The Event notifications tab
  prefs: []
  type: TYPE_NORMAL
- en: 'In the form, fill out the event name and select the event type in the **Event
    types** section. For this example, we are going to select the **All object create
    events** option. Hence, when an object is created, the Lambda function will be
    triggered:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.20_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.20 – Event configuration
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the page, select the Lambda function that will be triggered,
    under the **Destination** section, and click the **Save** **changes** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.21_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.21 – The event destination
  prefs: []
  type: TYPE_NORMAL
- en: 'You should see a success message in the AWS console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.22_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.22 – The event destination
  prefs: []
  type: TYPE_NORMAL
- en: 'You can also double-check with Lambda whether the event has been successfully
    created. When you click the respective Lambda function, it shows the event source:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.23_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.23 – Lambda with a trigger
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, you are able to see the Lambda function on the left side as
    a trigger. It is time to test our Lambda trigger:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the S3 bucket that you created and navigate to it. After that, click the
    **Upload** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.24_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.24 – An S3 bucket
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Add files** button, which allows you to add any kind of file from
    your computer. For this example, we have uploaded one RTF file. You can also upload
    an image, PDF, or whatever you want:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.25_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.25 – The S3 Upload page
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows that you have successfully uploaded the `testTriggr.rtf`
    file to S3\. S3 also gives some details regarding files, such as the type, the
    latest modification time, as well as the size. If you have more files, you can
    see a file list under the **Objects** panel:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.26_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.26 – The S3 file list
  prefs: []
  type: TYPE_NORMAL
- en: 'As we have uploaded a file to S3, the Lambda function should work. It is time
    to check whether that is the case. Navigate to the Lambda function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_3.27_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.27 – The Lambda function
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Monitor** tab, and you should be able to see that the Lambda is
    called:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.28_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.28 — Monitor in Lambda
  prefs: []
  type: TYPE_NORMAL
- en: We can also check the detailed logs via CloudWatch. As we mentioned early, CloudWatch
    helps you to check AWS service logs.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the same page, click **View logs in CloudWatch**. You will be redirected
    to the CloudWatch service:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.29_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.29 – The CloudWatch service
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click the link under **Log stream**, you will be able to see the logs
    that you implemented in the Lambda function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_3.30_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 3.30 – CloudWatch logs
  prefs: []
  type: TYPE_NORMAL
- en: You can also upload different types of files in order to test the Lambda function
    as well as the CloudWatch logs.
  prefs: []
  type: TYPE_NORMAL
- en: We implemented a simple Python application integrated with S3\. When you add
    a file to a storage mechanism, it triggers the Lambda function in order to process
    the file. As you saw in this example, you can test your Python code without provisioning
    a server and installing the Python library. Lambda comes with logging, monitoring,
    and object storage capabilities.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we dived into Lambda, which is one of the most important services
    in AWS. Lambda helps you to deploy and run your application without provisioning
    a server, which facilitates deployment time. We also touched upon the S3 service,
    which is used for object storage and has good integration with Lambda. In the
    following chapter, we will take a look at how to provision a server and run a
    Python application on an AWS-based server.
  prefs: []
  type: TYPE_NORMAL
