- en: Chapter 16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Single-Alternative Decision Structure
  prefs: []
  type: TYPE_NORMAL
- en: 16.1 The Single-Alternative Decision Structure
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the simplest decision control structure. It includes a statement or
    block of statements on the “True” path only, as presented in the following flowchart
    fragment, given in general form.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter16-01.png)'
  prefs: []
  type: TYPE_IMG
- en: If Boolean_Expression evaluates to True, the statement, or block of statements,
    of the structure is executed; otherwise, the statements are skipped.
  prefs: []
  type: TYPE_NORMAL
- en: The general form of the Python statement is
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression:'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the statement or block of statements is indented
    by 4 spaces.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the message “You are underage!” displays only when the
    user enters a value less than 18\. Nothing is displayed when the user enters a
    value that is greater than or equal to 18.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1a'
  prefs: []
  type: TYPE_NORMAL
- en: 'age = int(input("Enter your age: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if age < 18:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You are underage!")
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the print() statement is indented by 4 spaces.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the message “You are underage!” and the message “You have
    to wait for a few more years” are displayed only when the user enters a value
    less than 18\. Same as previously, no messages are displayed when the user enters
    a value that is greater than or equal to 18.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1b'
  prefs: []
  type: TYPE_NORMAL
- en: 'age = int(input("Enter your age: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if age < 18:'
  prefs: []
  type: TYPE_NORMAL
- en: print("You are underage!")
  prefs: []
  type: TYPE_NORMAL
- en: print("You have to wait for a few more years.")
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that both print() statements are indented by 4 spaces.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Python was one of the first programming languages to enforce
    indentation. Python specifies that several statements are part of a group by indenting
    them. The indented group is called a “block of statements” or “code block”. Indentation
    is considered good practice in other languages, but in Python indentation is mandatory.
    Code that is part of a block must be indented. For example, all statements that
    appear inside an if statement must be indented to the right by the same number
    of spaces; otherwise they are not considered part of the if statement and you
    probably get an error message. There are two simple rules to remember about code
    blocks'' syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '► The statement on the first line of a code block always ends with a colon
    ( : ) character.'
  prefs: []
  type: TYPE_NORMAL
- en: ► The code underneath the first line must be indented.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Python''s official website recommends the use of 4 spaces
    per indentation level. If you need more information you can visit:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://tinyurl.com/5zfnzmc6](https://tinyurl.com/5zfnzmc6)'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.python.org/dev/peps/pep-0008](https://www.python.org/dev/peps/pep-0008)'
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter16-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In order to indent the text cursor, instead of typing space
    characters, you can hit the “Tab ![Image](img/key_tab.png)” key once!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In order to indent an existing statement or a block of statements,
    select it and hit the “Tab ![Image](img/key_tab.png)” key!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In order to unindent a statement or a block of statements,
    select it and hit the “Shift ↑ + Tab ![Image](img/key_tab.png)” key combination!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In computer languages other than Python, such as C, C++,
    C#, Java, or Visual Basic, indentation is not obligatory but it is quite necessary
    in order to make code easier to read. It also helps programmers to more easily
    study and understand code written by others.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the message “You are the King of the Gods!” is displayed
    only when the user enters the name “Zeus”. However, the message “You live on Mount
    Olympus” is always displayed, no matter what name the user enters.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1c'
  prefs: []
  type: TYPE_NORMAL
- en: 'name = input("Enter the name of an Olympian: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'if name == "Zeus":'
  prefs: []
  type: TYPE_NORMAL
- en: print("You are the King of the Gods!")
  prefs: []
  type: TYPE_NORMAL
- en: print("You live on Mount Olympus.")
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the last print() statement is not indented, and
    so it does not belong to the block of statements of the single-alternative decision
    structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A very common mistake that novice programmers make when
    writing Python programs is to confuse the value assignment operator with the “equal”
    operator. They frequently make the mistake of writing if name = "Zeus" when they
    actually want to say if name == "Zeus".'
  prefs: []
  type: TYPE_NORMAL
- en: 'When only one single statement is used in the if statement, you can write it
    on one single line, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression: One_Single_Statement'
  prefs: []
  type: TYPE_NORMAL
- en: The following two examples are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == y: x += 1'
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == y:'
  prefs: []
  type: TYPE_NORMAL
- en: x += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.1-1 Trace Tables and Single-Alternative Decision Structures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the corresponding flowchart and create a trace table to determine the
    values of the variables in each step of the next Python program for two different
    executions.
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 10, and (ii) 51.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1-1'
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = 5
  prefs: []
  type: TYPE_NORMAL
- en: 'if a * 2 > 100:'
  prefs: []
  type: TYPE_NORMAL
- en: a = a * 3
  prefs: []
  type: TYPE_NORMAL
- en: y = a * 4
  prefs: []
  type: TYPE_NORMAL
- en: print(a, y)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter16-03.png)'
  prefs: []
  type: TYPE_IMG
- en: The trace tables for each input are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input value of 10, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | y |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters the value 10 | 10 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 5 |   | 10 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if a * 2 > 100: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | print(a, y) | It displays: 10 5 |'
  prefs: []
  type: TYPE_TB
- en: ii)For the input value of 51, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | y |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters the value 51 | 51 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 5 |   | 51 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if a * 2 > 100: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | a = a * 3 |   | 153 | 5 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | y = a * 4 |   | 153 | 612 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(a, y) | It displays: 153 612 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 16.1-2 The Absolute Value of a Number
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that lets the
    user enter a number and then displays its absolute value.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Actually, there are two approaches. The first approach uses a single-alternative
    decision structure, whereas the second one uses the built-in abs() function.
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Using a single-alternative decision structure
  prefs: []
  type: TYPE_NORMAL
- en: The approach is simple. If the user enters a negative value, for example −5,
    this value is changed and displayed as +5\. A positive number or zero, however,
    remains as is. The solution is shown in the flowchart that follows.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter16-04.png)
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1-2a'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: x = (-1) * x
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: Second approach – Using the abs() function
  prefs: []
  type: TYPE_NORMAL
- en: In this case, you need just two lines of code without any decision control structure!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1-2b'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: print(abs(x))
  prefs: []
  type: TYPE_NORMAL
- en: '16.2 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The single-alternative decision structure is used when a sequence of statements
    must be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 2)You use a single-alternative decision structure to allow other programmers
    to more easily understand your program.
  prefs: []
  type: TYPE_NORMAL
- en: 3)It is a possible that none of the statements enclosed in a single-alternative
    decision structure will be executed.
  prefs: []
  type: TYPE_NORMAL
- en: 4)In a flowchart, the Decision symbol represents the beginning and the end of
    an algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following code is syntactically correct.
  prefs: []
  type: TYPE_NORMAL
- en: if = 5
  prefs: []
  type: TYPE_NORMAL
- en: x = if + 5
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: 6)The single-alternative decision structure uses the reserved keyword else.
  prefs: []
  type: TYPE_NORMAL
- en: 7)The following code fragment satisfies the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: 'if b != 3:'
  prefs: []
  type: TYPE_NORMAL
- en: x = a / (b - 3)
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following Python program satisfies the property of definiteness.
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if b != 3:'
  prefs: []
  type: TYPE_NORMAL
- en: x = a / (b - 3)
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: 9)Python programs that include decision control structures and written without
    code indentation cannot be executed by a computer.
  prefs: []
  type: TYPE_NORMAL
- en: '16.3 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The single-alternative decision structure is used when
  prefs: []
  type: TYPE_NORMAL
- en: a)statements are executed one after another.
  prefs: []
  type: TYPE_NORMAL
- en: b)a decision must be made before executing some statements.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: 2)The single-alternative decision structure includes a statement or block of
    statements on
  prefs: []
  type: TYPE_NORMAL
- en: a)the false path only.
  prefs: []
  type: TYPE_NORMAL
- en: b)both paths.
  prefs: []
  type: TYPE_NORMAL
- en: c)the true path only.
  prefs: []
  type: TYPE_NORMAL
- en: 3)In the following code fragment,
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: x = 5
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: the statement y += 1 is executed
  prefs: []
  type: TYPE_NORMAL
- en: a)only when variable x contains a value of 3.
  prefs: []
  type: TYPE_NORMAL
- en: b)only when variable x contains a value of 5.
  prefs: []
  type: TYPE_NORMAL
- en: c)only when variable x contains a value other than 3.
  prefs: []
  type: TYPE_NORMAL
- en: d)always.
  prefs: []
  type: TYPE_NORMAL
- en: 4)In the following code fragment,
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 == 0: y += 1'
  prefs: []
  type: TYPE_NORMAL
- en: the statement y += 1 is executed when
  prefs: []
  type: TYPE_NORMAL
- en: a)variable x is exactly divisible by 2.
  prefs: []
  type: TYPE_NORMAL
- en: b)variable x contains an even number.
  prefs: []
  type: TYPE_NORMAL
- en: c)variable x does not contain an odd number.
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)In the following code fragment,
  prefs: []
  type: TYPE_NORMAL
- en: x = 3 * y
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > y: y += 1'
  prefs: []
  type: TYPE_NORMAL
- en: the statement y += 1 is
  prefs: []
  type: TYPE_NORMAL
- en: a)always executed.
  prefs: []
  type: TYPE_NORMAL
- en: b)never executed.
  prefs: []
  type: TYPE_NORMAL
- en: c)executed only when variable y contains positive values.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 6)The following program
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: x = (-1) * x
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  prefs: []
  type: TYPE_NORMAL
- en: cannot be executed by a computer because
  prefs: []
  type: TYPE_NORMAL
- en: a)it does not use code indentation.
  prefs: []
  type: TYPE_NORMAL
- en: b)it includes logic errors.
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 16.4 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: '1)Identify the syntax errors in the following Python program:'
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y ← - 5
  prefs: []
  type: TYPE_NORMAL
- en: if x * y / 2 > 20
  prefs: []
  type: TYPE_NORMAL
- en: y =* 1
  prefs: []
  type: TYPE_NORMAL
- en: x += 4 * x²
  prefs: []
  type: TYPE_NORMAL
- en: print(x  y)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the following Python program for two different executions. Then, design the
    corresponding flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 10, and (ii) −10.
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = -5
  prefs: []
  type: TYPE_NORMAL
- en: 'if x * y / 2 > 20:'
  prefs: []
  type: TYPE_NORMAL
- en: y -= 1
  prefs: []
  type: TYPE_NORMAL
- en: x -= 4
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: y += 30
  prefs: []
  type: TYPE_NORMAL
- en: x = x ** 2
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the following Python program for two different executions. Then, design the
    corresponding flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) −11, and (ii) 11.
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = 8
  prefs: []
  type: TYPE_NORMAL
- en: 'if abs(x) > 10:'
  prefs: []
  type: TYPE_NORMAL
- en: y += x
  prefs: []
  type: TYPE_NORMAL
- en: x -= 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if abs(x) > 10:'
  prefs: []
  type: TYPE_NORMAL
- en: y *= 3
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Create a trace table to determine the values of the variables in each step
    of the following Python program for two different executions. Then, design the
    corresponding flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 1, 2, 3; and (ii) 4, 2, 1.
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x + y > z: x = y + z'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > y + z: y = x + z'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > y - z: z = x - z % 2'
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y, ",", z)
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that prompts the user to enter a number, and then displays
    the message “Positive” when the user-provided number is positive.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Write a Python program that prompts the user to enter two numbers, and then
    displays the message “Both Positives” when both user-provided numbers are positives.
  prefs: []
  type: TYPE_NORMAL
- en: 7)Write a Python program that prompts the user to enter their age and then displays
    the message “You can drive a car in Kansas (USA)” when the user-provided age is
    greater than 14.
  prefs: []
  type: TYPE_NORMAL
- en: 8)Write a Python program that prompts the user to enter a string, and then displays
    the message “Uppercase” when the user-provided string contains only uppercase
    characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the upper() method.'
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that prompts the user to enter a string, and then displays
    the message “Many characters” when the user-provided string contains more than
    20 characters.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the len() function.'
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a Python program that prompts the user to enter four numbers and, if
    at least one of them is negative, it displays the message “Among the provided
    numbers, there is a negative one!”
  prefs: []
  type: TYPE_NORMAL
- en: 11)Write a Python program that prompts the user to enter two numbers. If the
    first user-provided number is greater than the second one, the program must swap
    their values. In the end, the program must display the numbers, always in ascending
    order.
  prefs: []
  type: TYPE_NORMAL
- en: 12)Write a Python program that prompts the user to enter three temperature values
    measured at three different points in New York, and then displays the message
    “Heat Wave” if the average value is greater than 60 degrees Fahrenheit.
  prefs: []
  type: TYPE_NORMAL
