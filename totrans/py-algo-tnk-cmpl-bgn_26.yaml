- en: Chapter 16
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Single-Alternative Decision Structure
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 16.1 The Single-Alternative Decision Structure
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is the simplest decision control structure. It includes a statement or
    block of statements on the “True” path only, as presented in the following flowchart
    fragment, given in general form.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter16-01.png)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
- en: If Boolean_Expression evaluates to True, the statement, or block of statements,
    of the structure is executed; otherwise, the statements are skipped.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
- en: The general form of the Python statement is
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the statement or block of statements is indented
    by 4 spaces.'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the message “You are underage!” displays only when the
    user enters a value less than 18\. Nothing is displayed when the user enters a
    value that is greater than or equal to 18.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1a'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
- en: 'age = int(input("Enter your age: "))'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: 'if age < 18:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
- en: print("You are underage!")
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the print() statement is indented by 4 spaces.'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the message “You are underage!” and the message “You have
    to wait for a few more years” are displayed only when the user enters a value
    less than 18\. Same as previously, no messages are displayed when the user enters
    a value that is greater than or equal to 18.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1b'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: 'age = int(input("Enter your age: "))'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: 'if age < 18:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: print("You are underage!")
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: print("You have to wait for a few more years.")
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that both print() statements are indented by 4 spaces.'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Python was one of the first programming languages to enforce
    indentation. Python specifies that several statements are part of a group by indenting
    them. The indented group is called a “block of statements” or “code block”. Indentation
    is considered good practice in other languages, but in Python indentation is mandatory.
    Code that is part of a block must be indented. For example, all statements that
    appear inside an if statement must be indented to the right by the same number
    of spaces; otherwise they are not considered part of the if statement and you
    probably get an error message. There are two simple rules to remember about code
    blocks'' syntax:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: '► The statement on the first line of a code block always ends with a colon
    ( : ) character.'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: ► The code underneath the first line must be indented.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Python''s official website recommends the use of 4 spaces
    per indentation level. If you need more information you can visit:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: '[https://tinyurl.com/5zfnzmc6](https://tinyurl.com/5zfnzmc6)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.python.org/dev/peps/pep-0008](https://www.python.org/dev/peps/pep-0008)'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter16-02.png)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In order to indent the text cursor, instead of typing space
    characters, you can hit the “Tab ![Image](img/key_tab.png)” key once!'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In order to indent an existing statement or a block of statements,
    select it and hit the “Tab ![Image](img/key_tab.png)” key!'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In order to unindent a statement or a block of statements,
    select it and hit the “Shift ↑ + Tab ![Image](img/key_tab.png)” key combination!'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)In computer languages other than Python, such as C, C++,
    C#, Java, or Visual Basic, indentation is not obligatory but it is quite necessary
    in order to make code easier to read. It also helps programmers to more easily
    study and understand code written by others.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, the message “You are the King of the Gods!” is displayed
    only when the user enters the name “Zeus”. However, the message “You live on Mount
    Olympus” is always displayed, no matter what name the user enters.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1c'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'name = input("Enter the name of an Olympian: ")'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: 'if name == "Zeus":'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: print("You are the King of the Gods!")
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: print("You live on Mount Olympus.")
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that the last print() statement is not indented, and
    so it does not belong to the block of statements of the single-alternative decision
    structure.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A very common mistake that novice programmers make when
    writing Python programs is to confuse the value assignment operator with the “equal”
    operator. They frequently make the mistake of writing if name = "Zeus" when they
    actually want to say if name == "Zeus".'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: 'When only one single statement is used in the if statement, you can write it
    on one single line, like this:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression: One_Single_Statement'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: The following two examples are equivalent.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == y: x += 1'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == y:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: x += 1
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 16.1-1 Trace Tables and Single-Alternative Decision Structures
  id: totrans-50
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the corresponding flowchart and create a trace table to determine the
    values of the variables in each step of the next Python program for two different
    executions.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 10, and (ii) 51.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1-1'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
- en: y = 5
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: 'if a * 2 > 100:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: a = a * 3
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: y = a * 4
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
- en: print(a, y)
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart is shown here.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter16-03.png)'
  id: totrans-62
  prefs: []
  type: TYPE_IMG
- en: The trace tables for each input are shown here.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input value of 10, the trace table looks like this.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | y |'
  id: totrans-65
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters the value 10 | 10 | ? |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 5 |   | 10 | 5 |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
- en: '| 3 | if a * 2 > 100: | This evaluates to False |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
- en: '| 4 | print(a, y) | It displays: 10 5 |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
- en: ii)For the input value of 51, the trace table looks like this.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | a | y |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
- en: '| 1 | a = int(input()) | User enters the value 51 | 51 | ? |'
  id: totrans-72
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 5 |   | 51 | 5 |'
  id: totrans-73
  prefs: []
  type: TYPE_TB
- en: '| 3 | if a * 2 > 100: | This evaluates to True |'
  id: totrans-74
  prefs: []
  type: TYPE_TB
- en: '| 4 | a = a * 3 |   | 153 | 5 |'
  id: totrans-75
  prefs: []
  type: TYPE_TB
- en: '| 5 | y = a * 4 |   | 153 | 612 |'
  id: totrans-76
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(a, y) | It displays: 153 612 |'
  id: totrans-77
  prefs: []
  type: TYPE_TB
- en: Exercise 16.1-2 The Absolute Value of a Number
  id: totrans-78
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that lets the
    user enter a number and then displays its absolute value.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
- en: Actually, there are two approaches. The first approach uses a single-alternative
    decision structure, whereas the second one uses the built-in abs() function.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Using a single-alternative decision structure
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: The approach is simple. If the user enters a negative value, for example −5,
    this value is changed and displayed as +5\. A positive number or zero, however,
    remains as is. The solution is shown in the flowchart that follows.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter16-04.png)
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding Python program is as follows.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1-2a'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 0:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
- en: x = (-1) * x
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
- en: Second approach – Using the abs() function
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
- en: In this case, you need just two lines of code without any decision control structure!
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_16.1-2b'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
- en: print(abs(x))
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: '16.2 Review Questions: True/False'
  id: totrans-96
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: 1)The single-alternative decision structure is used when a sequence of statements
    must be executed.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
- en: 2)You use a single-alternative decision structure to allow other programmers
    to more easily understand your program.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: 3)It is a possible that none of the statements enclosed in a single-alternative
    decision structure will be executed.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: 4)In a flowchart, the Decision symbol represents the beginning and the end of
    an algorithm.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 5)The following code is syntactically correct.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: if = 5
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: x = if + 5
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: 6)The single-alternative decision structure uses the reserved keyword else.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: 7)The following code fragment satisfies the property of definiteness.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: 'if b != 3:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: x = a / (b - 3)
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 8)The following Python program satisfies the property of definiteness.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
- en: 'if b != 3:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: x = a / (b - 3)
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: 9)Python programs that include decision control structures and written without
    code indentation cannot be executed by a computer.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: '16.3 Review Questions: Multiple Choice'
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 1)The single-alternative decision structure is used when
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: a)statements are executed one after another.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
- en: b)a decision must be made before executing some statements.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
- en: 2)The single-alternative decision structure includes a statement or block of
    statements on
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: a)the false path only.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: b)both paths.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
- en: c)the true path only.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 3)In the following code fragment,
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: 'if x == 3:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: x = 5
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: the statement y += 1 is executed
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: a)only when variable x contains a value of 3.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: b)only when variable x contains a value of 5.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: c)only when variable x contains a value other than 3.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: d)always.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
- en: 4)In the following code fragment,
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % 2 == 0: y += 1'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
- en: the statement y += 1 is executed when
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
- en: a)variable x is exactly divisible by 2.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
- en: b)variable x contains an even number.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
- en: c)variable x does not contain an odd number.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
- en: d)all of the above
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
- en: 5)In the following code fragment,
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
- en: x = 3 * y
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > y: y += 1'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
- en: the statement y += 1 is
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
- en: a)always executed.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: b)never executed.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
- en: c)executed only when variable y contains positive values.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
- en: 6)The following program
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 0:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
- en: x = (-1) * x
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: print(x)
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: cannot be executed by a computer because
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
- en: a)it does not use code indentation.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: b)it includes logic errors.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
- en: 16.4 Review Exercises
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '1)Identify the syntax errors in the following Python program:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: y ← - 5
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: if x * y / 2 > 20
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
- en: y =* 1
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: x += 4 * x²
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: print(x  y)
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the following Python program for two different executions. Then, design the
    corresponding flowchart.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 10, and (ii) −10.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: y = -5
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: 'if x * y / 2 > 20:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: y -= 1
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: x -= 4
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > 0:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: y += 30
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: x = x ** 2
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: 3)Create a trace table to determine the values of the variables in each step
    of the following Python program for two different executions. Then, design the
    corresponding flowchart.
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) −11, and (ii) 11.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
- en: y = 8
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: 'if abs(x) > 10:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
- en: y += x
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: x -= 1
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
- en: 'if abs(x) > 10:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: y *= 3
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 4)Create a trace table to determine the values of the variables in each step
    of the following Python program for two different executions. Then, design the
    corresponding flowchart.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: The input values for the two executions are (i) 1, 2, 3; and (ii) 4, 2, 1.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: z = int(input())
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'if x + y > z: x = y + z'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > y + z: y = x + z'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'if x > y - z: z = x - z % 2'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y, ",", z)
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that prompts the user to enter a number, and then displays
    the message “Positive” when the user-provided number is positive.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: 6)Write a Python program that prompts the user to enter two numbers, and then
    displays the message “Both Positives” when both user-provided numbers are positives.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 7)Write a Python program that prompts the user to enter their age and then displays
    the message “You can drive a car in Kansas (USA)” when the user-provided age is
    greater than 14.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 8)Write a Python program that prompts the user to enter a string, and then displays
    the message “Uppercase” when the user-provided string contains only uppercase
    characters.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the upper() method.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that prompts the user to enter a string, and then displays
    the message “Many characters” when the user-provided string contains more than
    20 characters.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the len() function.'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: 10)Write a Python program that prompts the user to enter four numbers and, if
    at least one of them is negative, it displays the message “Among the provided
    numbers, there is a negative one!”
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 11)Write a Python program that prompts the user to enter two numbers. If the
    first user-provided number is greater than the second one, the program must swap
    their values. In the end, the program must display the numbers, always in ascending
    order.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 11) 编写一个Python程序，提示用户输入两个数字。如果第一个用户提供的数字大于第二个数字，程序必须交换它们的值。最后，程序必须以升序显示这两个数字。
- en: 12)Write a Python program that prompts the user to enter three temperature values
    measured at three different points in New York, and then displays the message
    “Heat Wave” if the average value is greater than 60 degrees Fahrenheit.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 12) 编写一个Python程序，提示用户输入纽约三个不同地点测量的三个温度值，如果平均值大于60华氏度，则显示消息“热浪”。
