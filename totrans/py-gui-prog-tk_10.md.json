["```py\nscript_dir = '/'.join(some_path.split('/')[:-1]) \n```", "```py\n>>> from pathlib import Path\n>>> p = Path()\n>>> print(p)\n.\n>>> print(p.absolute())\n'/home/alanm' \n```", "```py\n# Create a Path object for the current working directory\np = Path()\n# Find the parent directory\nparent = p.parent\n# Check if the path /var/log exists\nhas_var_log = Path('/var/log').exists()\n# Join Paths together, using the division operator\nimage_path = Path(__file__) / 'images' / 'png' \n```", "```py\n>>> from os import path\n>>> path.exists('secret_stuff.txt')\nFalse\n>>> path.lexists('secret_stuff.txt')\nTrue \n```", "```py\nimport subprocess\nsubprocess.call(['cp', 'file1.txt', 'file2.txt']) \n```", "```py\nwith open('testfile.test', 'a') as fh:\n  fh.write('\\U0001F34C') \n```", "```py\nUnicodeEncodeError: 'charmap' codec can't encode character '\\U0001f34c' in position 0: character maps to <undefined> \n```", "```py\nwith open('testfile.test', 'a', encoding='utf-8') as fh:\n  fh.write('\\U0001F34C') \n```", "```py\nwith open('testfile.test', 'w', newline='\\n') as fh:\n  fh.write('banana') \n```", "```py\n# simple_cross_platform_demo.py\nimport platform\nimport subprocess\nos_name = platform.system()\nif os_name in ('Darwin', 'freebsd7'):\n    cmd = ['ps', '-e', '-o', \"comm=''\", '-c']\nelif os_name == 'Linux':\n    cmd = ['ps', '-e', '--format', 'comm', '--no-heading']\nelif os_name == 'Windows':\n    cmd = ['tasklist', '/nh', '/fo', 'CSV']\nelse:\n    raise NotImplemented(\"Command unknown for OS\")\nprocesses = subprocess.check_output(cmd, text=True)\nprint(processes) \n```", "```py\n# complex_cross_platform_demo/backend.py\nimport subprocess\nimport platform\nclass GenericProcessGetter():\n  cmd = []\n  def get_process_list(self):\n    if self.cmd:\n      return subprocess.check_output(self.cmd)\n    else:\n      raise NotImplementedError\nclass LinuxProcessGetter(GenericProcessGetter):\n  cmd = ['ps', '-e', '--format', 'comm', '--no-heading']\nclass MacBsdProcessGetter(GenericProcessGetter):\n  cmd = ['ps', '-e', '-o', \"comm=''\", '-c']\nclass WindowsProcessGetter(GenericProcessGetter):\n  cmd = ['tasklist', '/nh', '/fo', 'CSV'] \n```", "```py\n# complex_cross_platform_demo/backend.py\ndef get_process_getter_class(os_name):\n  process_getters = {\n    'Linux': LinuxProcessGetter,\n    'Darwin': MacBsdProcessGetter,\n    'Windows': WindowsProcessGetter,\n    'freebsd7': MacBsdProcessGetter\n  }\n  try:\n    return process_getters[os_name]\n  except KeyError:\n    raise NotImplementedError(\"No backend for OS\") \n```", "```py\n# complex_cross_platform_demo/main.py\nos_name = platform.system()\nprocess_getter = get_process_getter_class(os_name)()\nprint(process_getter.get_process_list()) \n```", "```py\nimport platform\nos_name = platform.system()\nif os_name == 'Linux':\n    import linux_backend as backend\nelif os_name == 'Windows':\n    import windows_backend as backend\nelif os_name in ('Darwin', 'freebsd7'):\n    import macos_bsd_backend as backend\nelse:\n    raise NotImplementedError(f'No backend for {os_name}') \n```", "```py\n>>> import tkinter as tk\n>>> tk.Tcl().call('info', 'patchlevel') \n```", "```py\n# non_cross_platform_menu.py\nimport tkinter as tk\nfrom tkinter.messagebox import showinfo\nroot = tk.Tk()\nroot.geometry(\"300x200\")\nmenu = tk.Menu(root) \n```", "```py\nsmile = tk.PhotoImage(file='smile.gif')\nsmile_menu = tk.Menu(menu, tearoff=False)\nsmile_menu.add_command(\n  image=smile,\n  command=lambda: showinfo(message=\"Smile!\")\n)\nsmile_menu.add_command(label='test')\nmenu.add_cascade(image=smile, menu=smile_menu) \n```", "```py\nmenu.configure(foreground='white', background='navy')\nsmile_menu.configure(foreground='yellow', background='red') \n```", "```py\nmenu.add_separator()\nmenu.add_command(\n  label='Top level command',\n  command=lambda: showinfo(message='By your command!')\n) \n```", "```py\nboolvar = tk.BooleanVar()\nmenu.add_checkbutton(label=\"It is true\", variable=boolvar)\nroot.config(menu=menu)\nroot.mainloop() \n```", "```py\nfrom tkinter import *\nroot = Tk()\nroot.state('zoomed')\nroot.mainloop() \n```", "```py\nroot.attributes('-zoomed', True) \n```", "```py\n# models.py, at the top\nimport platform \n```", "```py\n config_dirs = {\n    \"Linux\": Path(\n      os.environ.get('$XDG_CONFIG_HOME', Path.home() / '.config')\n    ),\n    \"freebsd7\": Path(\n      os.environ.get('$XDG_CONFIG_HOME', Path.home() / '.config')\n    ),\n    'Darwin': Path.home() / 'Library' / 'Application Support',\n    'Windows': Path.home() / 'AppData' / 'Local'\n  } \n```", "```py\n def __init__(self):\n    filename = 'abq_settings.json'\n    **filedir = self.config_dirs.get(platform.system(), Path.home())**\n    self.filepath = filedir / filename\n    self.load() \n```", "```py\n# models.py, in CSVModel.save_record()\n    with open(\n      self.filename, 'a', encoding='utf-8', newline=''\n    ) as fh: \n```", "```py\nclass GenericMainMenu(tk.Menu):\n  styles = dict() \n```", "```py\n def _add_file_open(self, menu):\n    menu.add_command(\n      label='Select file…', command=self._event('<<FileSelect>>'),\n      image=self.icons.get('file'), compound=tk.LEFT\n  )\n  def _add_quit(self, menu):\n    menu.add_command(\n      label='Quit', command=self._event('<<FileQuit>>'),\n      image=self.icons.get('quit'), compound=tk.LEFT\n    ) \n```", "```py\n def _add_autofill_date(self, menu):\n    menu.add_checkbutton(\n      label='Autofill Date', variable=self.settings['autofill date']\n    )\n  def _add_autofill_sheet(self, menu):\n    menu.add_checkbutton(\n      label='Autofill Sheet data',\n      variable=self.settings['autofill sheet data']\n    ) \n```", "```py\n def _add_font_size_menu(self, menu):\n    font_size_menu = tk.Menu(self, tearoff=False, **self.styles)\n    for size in range(6, 17, 1):\n      font_size_menu.add_radiobutton(\n        label=size, value=size,\n        variable=self.settings['font size']\n      )\n    menu.add_cascade(label='Font size', menu=font_size_menu)\n  def _add_font_family_menu(self, menu):\n    font_family_menu = tk.Menu(self, tearoff=False, **self.styles)\n    for family in font.families():\n      font_family_menu.add_radiobutton(\n        label=family, value=family,\n        variable=self.settings['font family']\n    )\n    menu.add_cascade(label='Font family', menu=font_family_menu) \n```", "```py\n def _add_themes_menu(self, menu):\n    style = ttk.Style()\n    themes_menu = tk.Menu(self, tearoff=False, **self.styles)\n    for theme in style.theme_names():\n      themes_menu.add_radiobutton(\n        label=theme, value=theme,\n        variable=self.settings['theme']\n      )\n    menu.add_cascade(label='Theme', menu=themes_menu)\n    self.settings['theme'].trace_add('write', self._on_theme_change) \n```", "```py\n def _add_go_record_list(self, menu):\n    menu.add_command(\n      label=\"Record List\", command=self._event('<<ShowRecordlist>>'),\n      image=self.icons.get('record_list'), compound=tk.LEFT\n    )\n  def _add_go_new_record(self, menu):\n    menu.add_command(\n      label=\"New Record\", command=self._event('<<NewRecord>>'),\n      image=self.icons.get('new_record'), compound=tk.LEFT\n    )\n  def _add_about(self, menu):\n    menu.add_command(\n      label='About…', command=self.show_about,\n      image=self.icons.get('about'), compound=tk.LEFT\n    ) \n```", "```py\n def _build_menu(self):\n    # The file menu\n    self._menus['File'] = tk.Menu(self, tearoff=False, **self.styles)\n    self._add_file_open(self._menus['File'])\n    self._menus['File'].add_separator()\n    self._add_quit(self._menus['File'])\n    # The options menu\n    self._menus['Options'] = \n      tk.Menu(\n        self, tearoff=False, **self.styles\n      )\n    self._add_autofill_date(self._menus['Options'])\n    self._add_autofill_sheet(self._menus['Options'])\n    self._add_font_size_menu(self._menus['Options'])\n    self._add_font_family_menu(self._menus['Options'])\n    self._add_themes_menu(self._menus['Options'])\n    # switch from recordlist to recordform\n    self._menus['Go'] = tk.Menu(self, tearoff=False, **self.styles)\n    self._add_go_record_list(self._menus['Go'])\n    self._add_go_new_record(self._menus['Go'])\n    # The help menu\n    self._menus['Help'] = tk.Menu(self, tearoff=False, **self.styles)\n    self.add_cascade(label='Help', menu=self._menus['Help'])\n    self._add_about(self._menus['Help'])\n    for label, menu in self._menus.items():\n      self.add_cascade(label=label, menu=menu) \n```", "```py\n def __init__(self, parent, settings, **kwargs):\n    super().__init__(parent, **kwargs)\n    self.settings = settings\n    self._create_icons()\n    self._menus = dict()\n    self._build_menu()\n    self.configure(**self.styles) \n```", "```py\nclass GenericMainMenu(tk.Menu):\n  accelerators = {\n    'file_open': 'Ctrl+O',\n    'quit': 'Ctrl+Q',\n    'record_list': 'Ctrl+L',\n    'new_record': 'Ctrl+R',\n  }\n  keybinds = {\n    '<Control-o>': '<<FileSelect>>',\n    '<Control-q>': '<<FileQuit>>',\n    '<Control-n>': '<<NewRecord>>',\n    '<Control-l>': '<<ShowRecordlist>>'\n  } \n```", "```py\n# mainmenu.py, inside the GenericMainMenu class\n  def _add_file_open(self, menu):\n    menu.add_command(\n      label='Select file…',\n      command=self._event('<<FileSelect>>'),\n      **accelerator=self.accelerators.get('file_open')**,\n      image=self.icons.get('file'),\n      compound=tk.LEFT\n  ) \n```", "```py\n# mainmenu.py, inside the GenericMainMenu class\n  def _bind_accelerators(self):\n    for key, sequence in self.keybinds.items():\n      self.bind_all(key, self._event(sequence)) \n```", "```py\n self._bind_accelerators() \n```", "```py\nclass WindowsMainMenu(GenericMainMenu): \n```", "```py\n# mainmenu.py, inside WindowsMainMenu\n  def __init__(self, *args, **kwargs):\n    del(self.keybinds['<Control-q>'])\n    super().__init__(*args, **kwargs) \n```", "```py\n def _add_quit(self, menu):\n    menu.add_command(\n      label='Exit', command=self._event('<<FileQuit>>'),\n      image=self.icons.get('quit'), compound=tk.LEFT\n    ) \n```", "```py\n# mainmenu.py, inside WindowsMainMenu\n  def _create_icons(self):\n    super()._create_icons()\n    del(self.icons['new_record'])\n    del(self.icons['record_list']) \n```", "```py\n def _build_menu(self):\n    # The File menu\n    self._menus['File'] = tk.Menu(self, tearoff=False)\n    self._add_file_open(self._menus['File'])\n    self._menus['File'].add_separator()\n    self._add_quit(self._menus['File'])\n    # The Tools menu\n    self._menus['Tools'] = tk.Menu(self, tearoff=False)\n    self._add_autofill_date(self._menus['Tools'])\n    self._add_autofill_sheet(self._menus['Tools'])\n    self._add_font_size_menu(self._menus['Tools'])\n    self._add_font_family_menu(self._menus['Tools'])\n    self._add_themes_menu(self._menus['Tools'])\n    # The Help menu\n    self._menus['Help'] = tk.Menu(self, tearoff=False)\n    self._add_about(self._menus['Help']) \n```", "```py\n self.add_cascade(label='File', menu=self._menus['File'])\n    self.add_cascade(label='Tools', menu=self._menus['Tools'])\n    self._add_go_record_list(self)\n    self._add_go_new_record(self)\n    self.add_cascade(label='Help', menu=self._menus['Help']) \n```", "```py\n# mainmenu.py\nclass LinuxMainMenu(GenericMainMenu):\n  styles = {\n    'background': '#333',\n    'foreground': 'white',\n    'activebackground': '#777',\n    'activeforeground': 'white',\n    'relief': tk.GROOVE\n  } \n```", "```py\n def _build_menu(self):\n    self._menus['File'] = tk.Menu(self, tearoff=False, **self.styles)\n    self._add_file_open(self._menus['File'])\n    self._menus['File'].add_separator()\n    self._add_quit(self._menus['File'])\n    self._menus['Edit'] = tk.Menu(self, tearoff=False, **self.styles)\n    self._add_autofill_date(self._menus['Edit'])\n    self._add_autofill_sheet(self._menus['Edit']) \n```", "```py\n self._menus['View'] = tk.Menu(self, tearoff=False, **self.styles)\n    self._add_font_size_menu(self._menus['View'])\n    self._add_font_family_menu(self._menus['View'])\n    self._add_themes_menu(self._menus['View'])\n    self._menus['Go'] = tk.Menu(self, tearoff=False, **self.styles)\n    self._add_go_record_list(self._menus['Go'])\n    self._add_go_new_record(self._menus['Go'])\n    self._menus['Help'] = tk.Menu(self, tearoff=False, **self.styles)\n    self._add_about(self._menus['Help']) \n```", "```py\n for label, menu in self._menus.items():\n      self.add_cascade(label=label, menu=menu) \n```", "```py\nclass MacOsMainMenu(GenericMainMenu):\n  keybinds = {\n    '<Command-o>': '<<FileSelect>>',\n    '<Command-n>': '<<NewRecord>>',\n    '<Command-l>': '<<ShowRecordlist>>'\n  }\n  accelerators = {\n    'file_open': 'Cmd-O',\n    'record_list': 'Cmd-L',\n    'new_record': 'Cmd-R',\n  } \n```", "```py\n def _build_menu(self):\n    self._menus['ABQ Data Entry'] = tk.Menu(\n      self, tearoff=False,\n      name='apple'\n    )\n    self._add_about(self._menus['ABQ Data Entry'])\n    self._menus['ABQ Data Entry'].add_separator() \n```", "```py\n# mainmenu.py, inside MacOSMainMenu\n  def _add_about(self, menu):\n    menu.add_command(\n      label='About ABQ Data Entry', command=self.show_about,\n      image=self.icons.get('about'), compound=tk.LEFT\n    ) \n```", "```py\n# mainmenu.py, inside MacOSMainMenu._build_menu()    \n    self._menus['File'] = tk.Menu(self, tearoff=False)\n    self.add_cascade(label='File', menu=self._menus['File'])\n    self._add_file_open(self._menus['File'])\n    self._menus['Edit'] = tk.Menu(self, tearoff=False)\n    self._add_autofill_date(self._menus['Edit'])\n    self._add_autofill_sheet(self._menus['Edit'])\n    self._menus['View'] = tk.Menu(self, tearoff=False)\n    self._add_font_size_menu(self._menus['View'])\n    self._add_font_family_menu(self._menus['View'])\n    self._add_themes_menu(self._menus['View']) \n```", "```py\n self._menus['Window'] = tk.Menu(\n      self, name='window', tearoff=False\n    )\n    self._add_go_record_list(self._menus['Window'])\n    self._add_go_new_record(self._menus['Window']) \n```", "```py\n for label, menu in self._menus.items():\n      self.add_cascade(label=label, menu=menu) \n```", "```py\n# mainmenu.py, at the end\ndef get_main_menu_for_os(os_name):\n  menus = {\n    'Linux': LinuxMainMenu,\n    'Darwin': MacOsMainMenu,\n    'freebsd7': LinuxMainMenu,\n    'Windows': WindowsMainMenu\n  }\n  return menus.get(os_name, GenericMainMenu) \n```", "```py\n# application.py, at the top\nfrom .mainmenu import get_main_menu_for_os\nimport platform \n```", "```py\n# application.py, inside Application.__init__()\n    # menu = MainMenu(self, self.settings)\n    **menu_class = get_main_menu_for_os(platform.system())**\n    **menu = menu_class(self, self.settings)**\n    self.config(menu=menu) \n```"]