["```py\nimport maya.cmds as cmds\n\ndef getAnimationData():\n    objs = cmds.ls(selection=True)\n    obj = objs[0]\n\n    animAttributes = cmds.listAnimatable(obj);\n\n    for attribute in animAttributes:\n\n        numKeyframes = cmds.keyframe(attribute, query=True, keyframeCount=True)\n\n        if (numKeyframes > 0):\n            print(\"---------------------------\")\n            print(\"Found \", numKeyframes, \" keyframes on \", attribute)\n\n            times = cmds.keyframe(attribute, query=True, index=(0,numKeyframes), timeChange=True)\n            values = cmds.keyframe(attribute, query=True, index=(0,numKeyframes), valueChange=True)\n\n            print('frame#, time, value')\n            for i in range(0, numKeyframes):\n                print(i, times[i], values[i])\n\n            print(\"---------------------------\")\n\ngetAnimationData()\n```", "```py\n---------------------------\n('Found ', 2, ' keyframes on ', u'|bouncingBall.translateX')\nframe#, time, value\n(0, 0.0, 0.0)\n(1, 190.0, 38.0)\n---------------------------\n---------------------------\n('Found ', 20, ' keyframes on ', u'|bouncingBall.translateY')\nframe#, time, value\n(0, 0.0, 10.0)\n(1, 10.0, 0.0)\n(2, 20.0, 8.0)\n(3, 30.0, 0.0)\n(4, 40.0, 6.4000000000000004)\n(5, 50.0, 0.0)\n(6, 60.0, 5.120000000000001)\n(7, 70.0, 0.0)\n(8, 80.0, 4.096000000000001)\n(9, 90.0, 0.0)\n(10, 100.0, 3.276800000000001)\n(11, 110.0, 0.0)\n(12, 120.0, 2.6214400000000011)\n(13, 130.0, 0.0)\n(14, 140.0, 2.0971520000000008)\n(15, 150.0, 0.0)\n(16, 160.0, 1.6777216000000008)\n(17, 170.0, 0.0)\n(18, 180.0, 1.3421772800000007)\n(19, 190.0, 0.0)\n---------------------------\n```", "```py\nobjs = cmds.ls(selection=True)\nobj = objs[0]\n\nanimAttributes = cmds.listAnimatable(obj)\n```", "```py\n|bouncingBall.rotateX\n|bouncingBall.rotateY\n|bouncingBall.rotateZ\n```", "```py\n|ballGroup|bouncingBall.rotateX\n```", "```py\n    for attribute in animAttributes:\n        numKeyframes = cmds.keyframe(attribute, query=True, keyframeCount=True)\n```", "```py\ntimes = cmds.keyframe(attribute, query=True, index=(0,numKeyframes), timeChange=True)\nvalues = cmds.keyframe(attribute, query=True, index=(0,numKeyframes), valueChange=True)\n```", "```py\nprint('frame#, time, value')\nfor i in range(0, numKeyframes):\n    print(i, times[i], values[i])\n```", "```py\nnumKeyframes = cmds.keyframe(attributeName, query=True, time=(1,100) keyframeCount=True)\n```", "```py\n|group4|group3|group2|group1|ball.rotateZ\n```", "```py\ndef getObjectAttributeFromFull(fullString):\n    parts = fullString.split(\"|\")\n    return parts[-1]\n```", "```py\ninputString = \"|group4|group3|group2|group1|ball.rotateZ\"\nresult = getObjectAttributeFromFull(inputString)\nprint(result) # outputs \"ball.rotateZ\"\n```", "```py\nimport maya.cmds as cmds\n\ndef makeAnimLayer(layerName):\n\n    baseAnimationLayer = cmds.animLayer(query=True, root=True)\n\n    foundLayer = False\n\n    if (baseAnimationLayer != None):\n        childLayers = cmds.animLayer(baseAnimationLayer, query=True, children=True)\n\n        if (childLayers != None) and (len(childLayers) > 0):\n            if layerName in childLayers:\n                foundLayer = True\n\n    if not foundLayer:\n        cmds.animLayer(layerName)\n    else:\n        print('Layer ' + layerName + ' already exists')\n\nmakeAnimLayer(\"myLayer\")\n```", "```py\nbaseAnimationLayer = cmds.animLayer(query=True, root=True)\n```", "```py\nfoundLayer = False\n```", "```py\nif (baseAnimationLayer != None):\n```", "```py\nchildLayers = cmds.animLayer(baseAnimationLayer, query=True, children=True)\n```", "```py\nif (childLayers != None) and (len(childLayers) > 0):\n    if layerName in childLayers:\n        foundLayer = True\n```", "```py\nif not foundLayer:\n    cmds.animLayer(layerName)\n```", "```py\ncmds.setKeyframe(\"bouncingBall.translateY\", value=yVal, time=frame, animLayer=\"bounceLayer\")\n```", "```py\ncmds.select(\"bouncingBall\", replace=True)\ncmds.animLayer(\"bounceLayer\", edit=True, addSelectedObjects=True)\n```", "```py\ncmds.animLayer(\"bounceLayer\", edit=True, attribute=\"bouncingBall.translateY\")\n```", "```py\nimport maya.cmds as cmds\n\ndef getAttName(fullname):\n    parts = fullname.split('.')\n    return parts[-1]\n\ndef copyKeyframes():\n    objs = cmds.ls(selection=True)\n\n    if (len(objs) < 2):\n        cmds.error(\"Please select at least two objects\")\n\n    sourceObj = objs[0]\n\n    animAttributes = cmds.listAnimatable(sourceObj);\n\n    for attribute in animAttributes:\n\n        numKeyframes = cmds.keyframe(attribute, query=True, keyframeCount=True)\n\n        if (numKeyframes > 0):\n\n            cmds.copyKey(attribute)\n\n            for obj in objs[1:]:\n                cmds.pasteKey(obj, attribute=getAttName(attribute), option=\"replace\")\n\ncopyKeyframes()\n```", "```py\nobjs = cmds.ls(selection=True)\n\nif (len(objs) < 2):\n    cmds.error(\"Please select at least two objects\")\n```", "```py\n    sourceObj = objs[0]\n```", "```py\nanimAttributes = cmds.listAnimatable(sourceObj);\n\nfor attribute in animAttributes:\n    numKeyframes = cmds.keyframe(attribute, query=True, keyframeCount=True)\n```", "```py\n        if (numKeyframes > 0):\n            cmds.copyKey(attribute)\n```", "```py\n|group1|bouncingBall.rotateX\n```", "```py\ndef getAttName(fullname):\n    parts = fullname.split('.')\n    return parts[-1]\n```", "```py\nfor obj in objs[1:]:\n    cmds.pasteKey(obj, attribute=getAttName(attribute), option=\"replace\")\n```", "```py\ncmds.pasteKey(objs[i], attribute=getAttName(attribute), option=\"replace\", animLayer=\"extraAnimation\")\n```", "```py\nimport maya.cmds as cmds\n\ndef setKeyframes():\n    objs = cmds.ls(selection=True)\n    obj = objs[0]\n\n    yVal = 0\n    xVal = 0\n    frame = 0\n\n    maxVal = 10\n\n    for i in range(0, 20):\n        frame = i * 10\n        xVal = i * 2\n\n        if i % 2 == 1:\n            yVal = 0\n        else:\n            yVal = maxVal\n            maxVal *= 0.8\n\n        cmds.setKeyframe(obj + '.translateY', value=yVal, time=frame)\n        cmds.setKeyframe(obj + '.translateX', value=xVal, time=frame)\n\nsetKeyframes()\n```", "```py\n    yVal = 0\n    xVal = 0\n    frame = 0\n\n    maxVal = 10\n```", "```py\nfor i in range(0, 20):\n    frame = i * 10\n    xVal = i * 2\n\n    if (i % 2) == 1:\n        yVal = 0\n    else:\n        yVal = maxVal\n        maxVal *= 0.8\n```", "```py\ncmds.setKeyframe(obj + '.translateY', value=yVal, time=frame)\ncmds.setKeyframe(obj + '.translateX', value=xVal, time=frame)\n```", "```py\ncmds.setKeyframe(obj + \".translateY\", value=animVal, time=frame, inTangentType=\"linear\", outTangentType=\"linear\")\n```", "```py\ntangentType = \"auto\"\n\nfor i in range(0, 20):\n    frame =  i * 10\n    if i % 2 == 1:\n        yVal = 0\n        tangentType = \"linear\"\n    else:\n        yVal = maxVal\n        tangentType = \"spline\"\n        maxVal *= 0.8\n\n    cmds.setKeyframe(obj + '.translateY', value=yVal, time=frame, inTangentType=tangentType, outTangentType=tangentType)\n```", "```py\nimport maya.cmds as cmds\n\ndef createExpression(att, minVal, maxVal, speed):\n    objs = cmds.ls(selection=True)\n    obj = objs[0]\n\n    cmds.addAttr(obj, longName=\"speed\", shortName=\"speed\", min=0, keyable=True)\n\n    amplitude = (maxVal – minVal)/2.0\n    offset = minVal + amplitude\n\n    baseString =  \"{0}.{1} = \".format(obj, att)\n    sineClause = '(sin(time * ' + obj + '.speed)'\n    valueClause = ' * ' + str(amplitude) + ' + ' + str(offset) + ')'\n\n    expressionString = baseString + sineClause + valueClause\n\n    cmds.expression(string=expressionString)\n\ncreateExpression('translateY', 5, 10, 1)\n```", "```py\ncmds.addAttr(obj, longName=\"speed\", shortName=\"speed\", min=0, keyable=True)\n```", "```py\nanimatedValue = (sin(time * S) * M) + O;\n```", "```py\namplitude = (maxVal – minVal)/2.0\n```", "```py\noffset = minVal + amplitude\n```", "```py\nmyBall.translateY = (sin(time * myBall.speed) * 5) + 12;\n```", "```py\nbaseString = \"{0}.{1} = \".format(obj, att)\nsineClause = '(sin(time * ' + obj + '.speed)'\nvalueClause = ' * ' + str(amplitude) + ' + ' + str(offset) + ')'\n\nexpressionString = baseString + sineClause + valueClause\n```", "```py\ncmds.expression(string=expressionString)\n```", "```py\nanimatedAttribute = animatedAttribute + (targetValue – animatedAttribute) * 0.2;\n```", "```py\nif (frame % 20 == 0)\n{\n    myCone.targetX = rand(time) * 360;\n    myCone.targetY = rand(time) * 360;\n    myCone.targetZ = rand(time) * 360;\n}\n\nmyObject.rotateX += (myObject.targetX - myCone.rotateX) * 0.2;\nmyObject.rotateY += (myObject.targetY - myCone.rotateY) * 0.2;\nmyObject.rotateZ += (myObject.targetZ - myCone.rotateZ) * 0.2;\n```"]