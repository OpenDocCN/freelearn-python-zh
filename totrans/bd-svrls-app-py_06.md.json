["```py\nsudo apt-get update\nsudo apt-get install software-properties-common\nsudo apt-add-repository ppa:ansible/ansible\nsudo apt-get update\nsudo apt-get install ansible\n```", "```py\ngit clone https://github.com/ansible/ansible.git\ncd ./ansible\nmake rpm\nsudo rpm -Uvh ./rpm-build/ansible-*.noarch.rpm\n```", "```py\nsudo pip install ansible\n```", "```py\n- hosts: localhost\n  connection: local\n  remote_user: test\n  gather_facts: no\n\n  environment:\n    AWS_ACCESS_KEY_ID: \"{{ aws_id }}\"\n    AWS_SECRET_ACCESS_KEY: \"{{ aws_key }}\"\n\n    AWS_DEFAULT_REGION: \"{{ aws_region }}\"\n\n  tasks: \n- name: Provisioning EC2 instaces \n  ec2: \n    assign_public_ip: no\n    aws_access_key: \"{{ access_key }}\"\n    aws_secret_key: \"{{ secret_key }}\"\n    region: \"{{ aws_region }}\"\n    image: \"{{ image_instance }}\"\n    instance_type: \"{{ instance_type }}\"\n    key_name: \"{{ ssh_keyname }}\"\n    state: present\n    group_id: \"{{ security_group }}\"\n    vpc_subnet_id: \"{{ subnet }}\"\n    instance_profile_name: \"{{ Profile_Name }}\"\n    wait: true\n    instance_tags: \n      Name: \"{{ Instance_Name }}\" \n    delete_on_termination: yes\n    register: ec2 \n    ignore_errors: True\n```", "```py\n[ssh_connection]\nssh_args=-o ControlMaster=auto -o ControlPersist=60s -o ControlPath=/tmp/ansible-ssh-%h-%p-%r -o ForwardAgent=yes\n\n[defaults]\nprivate_key_file=/path/to/key/key.pem\n```", "```py\n  tasks:\n    - name: Terminate instances that were previously launched\n      connection: local\n      become: false\n      ec2:\n        state: 'absent'\n        instance_ids: '{{ ec2.instance_ids }}'\n        region: '{{ aws_region }}'\n      register: TerminateWorker\n      ignore_errors: True\n```", "```py\n- hosts: localhost\n  connection: local\n  remote_user: test\n  gather_facts: no\n\n  environment:\n    AWS_ACCESS_KEY_ID: \"{{ aws_id }}\"\n    AWS_SECRET_ACCESS_KEY: \"{{ aws_key }}\"\n\n    AWS_DEFAULT_REGION: \"{{ aws_region }}\"\n\n  tasks: \n- name: Provisioning EC2 instaces \n  ec2: \n    assign_public_ip: no\n    aws_access_key: \"{{ access_key }}\"\n    aws_secret_key: \"{{ secret_key }}\"\n    region: \"{{ aws_region }}\"\n    image: \"{{ image_instance }}\"\n    instance_type: \"{{ instance_type }}\"\n    key_name: \"{{ ssh_keyname }}\"\n    count: \"{{ ninstances }}\"\n    state: present\n    group_id: \"{{ security_group }}\"\n    vpc_subnet_id: \"{{ subnet }}\"\n    instance_profile_name: \"{{ Profile_Name }}\"\n    wait: true\n    instance_tags: \n      Name: \"{{ Instance_Name }}\" \n    delete_on_termination: yes\n    register: ec2 \n```", "```py\nimport paramiko\nimport boto3\nimport logging\n\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.CRITICAL)\nregion = 'us-east-1'\nimage = 'ami-<>'\nubuntu_image = 'ami-<>'\nkeyname = '<>'\n\ndef lambda_handler(event, context):\n    credentials = {<>}\n    k = paramiko.RSAKey.from_private_key_file(\"<>\")\n        c = paramiko.SSHClient()\n    c.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    logging.critical(\"Creating Session\")\n    session = boto3.Session(credentials['AccessKeyId'], \n    credentials['SecretAccessKey'],\n    aws_session_token=credentials['SessionToken'], region_name=region)\n    logging.critical(\"Created Session\")\n    logging.critical(\"Create Resource\")\n    ec2 = session.resource('ec2', region_name=region)\n    logging.critical(\"Created Resource\")\n    logging.critical(\"Key Verification\")\n\n    key = '<>'\n    k = paramiko.RSAKey.from_private_key_file(key)\n    c = paramiko.SSHClient()\n    c.set_missing_host_key_policy(paramiko.AutoAddPolicy())\n    logging.critical(\"Key Verification done\")\n    # Generate Presigned URL for downloading EC2 key from    an S3 bucket into master\n    s3client = session.client('s3')\n\n# Presigned url for downloading pem file of the server from an S3 bucket\n    url = s3client.generate_presigned_url('get_object',     Params={'Bucket': '<bucket_name>', 'Key': '<file_name_of_key>'},\nExpiresIn=300)\n    command = 'wget ' + '-O <>.pem ' + \"'\" + url + \"'\"\n    logging.critical(\"Create Instance\")\n\nwhile True:\n    try:\n        logging.critical(\"Trying\")\n        c.connect(hostname=dns_name, username=\"ubuntu\", pkey=k)\n    except:\n        logging.critical(\"Failed\")\n    continue\n        break\n    logging.critical(\"connected\")\n\n    if size == 0:\n        s3client.upload_file('<>.pem', '<bucket_name>', '<>.pem')\n    else:\n        pass\n    set_key = credentials['AccessKeyId']\n    set_secret = credentials['SecretAccessKey']\n    set_token = credentials['SessionToken']\n\n# Commands to run inside the SSH session of the server\n    commands = [command,\n\"sudo apt-get -y update\",\n\"sudo apt-add-repository -y ppa:ansible/ansible\",\n\"sudo apt-get -y update\",\n\"sudo apt-get install -y ansible python-pip git awscli\",\n\"sudo pip install boto markupsafe boto3 python-dateutil     futures\",\n\"ssh-keyscan -H github.com >> ~/.ssh/known_hosts\",\n\"git clone <repository where your ansible script is> /home/ubuntu/<>/\",\n\"chmod 400 <>.pem\",\n\"cd <>/<>/; pwd ; nohup ansible-playbook -vvv provision.yml > ansible.out 2> ansible.err < /dev/null &\"]\n\n# Running the commands\n    for command in commands:\n        logging.critical(\"Executing %s\", command)\nstdin, stdout, stderr = c.exec_command(command)\n    logging.critical(stdout.read())\n    logging.critical(\"Errors : %s\", stderr.read())\n        c.close()\n    return dns_name\n```", "```py\n{\n    \"Version\": \"2012-10-17\",\n    \"Id\": \"PutObjPolicy\",\n    \"Statement\": [\n    {\n        \"Sid\": \"DenyIncorrectEncryptionHeader\",\n        \"Effect\": \"Deny\",\n        \"Principal\": \"*\",\n        \"Action\": \"s3:PutObject\",\n        \"Resource\": \"arn:aws:s3:::<bucket_name>/*\",\n        \"Condition\": {\n            \"StringNotEquals\": {\n                \"s3:x-amz-server-side-encryption\": \"aws:kms\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"DenyUnEncryptedObjectUploads\",\n        \"Effect\": \"Deny\",\n        \"Principal\": \"*\",\n        \"Action\": \"s3:PutObject\",\n        \"Resource\": \"arn:aws:s3:::<bucket_name2>/*\",\n        \"Condition\": {\n            \"Null\": {\n                \"s3:x-amz-server-side-encryption\": \"true\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"DenyNonSecureTraffic\",\n        \"Effect\": \"Deny\",\n        \"Principal\": \"*\",\n        \"Action\": \"s3:*\",\n        \"Resource\": \"arn:aws:s3:::<bucket_name>/*\",\n        \"Condition\": {\n            \"Bool\": {\n                \"aws:SecureTransport\": \"false\"\n            }\n        }\n    },\n    {\n        \"Sid\": \"DenyNonSecureTraffic\",\n        \"Effect\": \"Deny\",\n        \"Principal\": \"*\",\n        \"Action\": \"s3:*\",\n        \"Resource\": \"arn:aws:s3:::<bucket_name2>/*\",\n        \"Condition\": {\n            \"Bool\": {\n                \"aws:SecureTransport\": \"false\"\n            }\n        }\n    }\n]\n}\n```"]