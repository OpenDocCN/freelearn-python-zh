["```py\n# photoimage_animation_1.py\n#>>>>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nroot = Tk()\nroot.title(\"Animating a Photo Beachball\")\ncycle_period = 100\ncw = 320 # canvas width\nch = 120 # canvas height\ncanvas_1 = Canvas(root, width=cw, height=ch, bg=\"black\")\ncanvas_1.grid(row=0, column=1)\nposn_x = 10\nposn_y = 10\nshift_x = 2\nshift_y = 1\nball = PhotoImage(file = \"/constr/pics2/beachball.gif\")\nfor i in range(1,100): # end the program after 100 position # shifts.\nposn_x += shift_x\nposn_y += shift_y\ncanvas_1.create_image(posn_x,posn_y,anchor=NW, image=ball)\ncanvas_1.update() # This refreshes the drawing on the # canvas.\ncanvas_1.after(cycle_period) # This makes execution pause for # 100 milliseconds.\ncanvas_1.delete(ALL) # This erases everything on the # canvas.\nroot.mainloop()\n\n```", "```py\n# walking_creature_1.py\n# >>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport math\nimport time\nroot = Tk()\nroot.title(\"The thing that Strides\")\ncw = 400 # canvas width\nch = 100 # canvas height\n#GRAVITY = 4\nchart_1 = Canvas(root, width=cw, height=ch, background=\"white\")\nchart_1.grid(row=0, column=0)\ncycle_period = 100 # time between new positions of the ball # (milliseconds).\nbase_x = 20\nbase_y = 100\nhip_h = 40\nthy = 20\n#===============================================\n# Hip positions: Nhip = 2 x Nstep, the number of steps per foot per # stride.\nhip_x = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 60, 60] #15\nhip_y = [0, 8, 12, 16, 12, 8, 0, 0, 0, 8, 12, 16, 12, 8, 0] #15\nstep_x = [0, 10, 20, 30, 40, 50, 60, 60] # 8 = Nhip\nstep_y = [0, 35, 45, 50, 43, 32, 10, 0]\n# The merging of the separate x and y lists into a single sequence.\n#==================================\n# Given a line joining two points xy0 and xy1, the base of an # isosceles triangle,\n# as well as the length of one side, \"thy\" . This returns the # coordinates of the apex joining the equal-length sides.\ndef kneePosition(x0, y0, x1, y1, thy):\ntheta_1 = math.atan2((y1 - y0), (x1 - x0))\nL1 = math.sqrt( (y1 - y0)**2 + (x1 - x0)**2)\nif L1/2 < thy:\n# The sign of alpha determines which way the knees bend.\nalpha = -math.acos(L1/(2*thy)) # Avian\n#alpha = math.acos(L1/(2*thy)) # Mammalian\nelse:\nalpha = 0.0\ntheta_2 = alpha + theta_1\nx_knee = x0 + thy * math.cos(theta_2)\ny_knee = y0 + thy * math.sin(theta_2)\nreturn x_knee, y_knee\ndef animdelay():\nvector imagespair of walking legs, creatingchart_1.update() # This refreshes the drawing on the # canvas.\nchart_1.after(cycle_period) # This makes execution pause for # 100 milliseconds.\nchart_1.delete(ALL) # This erases *almost* everything on # the canvas.\n# Does not delete the text from # inside a function.\nbx_stay = base_x\nby_stay = base_y\nfor j in range(0,11): # Number of steps to be taken - arbitrary.\nastep_x = 60*j\nbstep_x = astep_x + 30\ncstep_x = 60*j + 15\naa = len(step_x) -1\nfor k in range(0,len(hip_x)-1):\n# Motion of the hips in a stride of each foot.\ncx0 = base_x + cstep_x + hip_x[k]\ncy0 = base_y - hip_h - hip_y[k]\ncx1 = base_x + cstep_x + hip_x[k+1]\ncy1 = base_y - hip_h - hip_y[k+1]\nchart_1.create_line(cx0, cy0 ,cx1 ,cy1)\nchart_1.create_oval(cx1-10 ,cy1-10 ,cx1+10 ,cy1+10, \\ fill=\"orange\")\nif k >= 0 and k <= len(step_x)-2:\n# Trajectory of the right foot.\nax0 = base_x + astep_x + step_x[k]\nax1 = base_x + astep_x + step_x[k+1]\nay0 = base_y - step_y[k]\nay1 = base_y - step_y[k+1]\nax_stay = ax1\nay_stay = ay1\nif k >= len(step_x)-1 and k <= 2*len(step_x)-2:\n# Trajectory of the left foot.\nbx0 = base_x + bstep_x + step_x[k-aa]\nbx1 = base_x + bstep_x + step_x[k-aa+1]\nby0 = base_y - step_y[k-aa]\nby1 = base_y - step_y[k-aa+1]\nbx_stay = bx1\nby_stay = by1\naknee_xy = kneePosition(ax_stay, ay_stay, cx1, cy1, thy)\nchart_1.create_line(ax_stay, ay_stay ,aknee_xy[0], \\ aknee_xy[1], width = 3, fill=\"orange\")\nchart_1.create_line(cx1, cy1 ,aknee_xy[0], aknee_xy[1], \\ width = 3, fill=\"orange\")\nchart_1.create_oval(ax_stay-5 ,ay1-5 ,ax1+5 ,ay1+5, \\ fill=\"green\")\nchart_1.create_oval(bx_stay-5 ,by_stay-5 ,bx_stay+5 , \\ by_stay+5, fill=\"blue\")\nbknee_xy = kneePosition(bx_stay, by_stay, cx1, cy1, thy)\nchart_1.create_line(bx_stay, by_stay ,bknee_xy[0], \\ bknee_xy[1], width = 3, fill=\"pink\")\nchart_1.create_line(cx1, cy1 ,bknee_xy[0], bknee_xy[1], \\ width = 3, fill=\"pink\")\nanimdelay()\nroot.mainloop()\n\n```", "```py\n# walking_birdy_1.py\n# >>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport math\nimport time\nroot = Tk()\nroot.title(\"A Walking birdy gif and shoes images\")\ncw = 800 # canvas width\nch = 200 # canvas height\n#GRAVITY = 4\nchart_1 = Canvas(root, width=cw, height=ch, background=\"white\")\nchart_1.grid(row=0, column=0)\ncycle_period = 80 # time between new positions of the bird # (milliseconds).\nim_backdrop = \"/constr/pics1/karoo.gif\"\nim_bird = \"/constr/pics1/apteryx1.gif\"\nim_shoe = \"/constr/pics1/shoe1.gif\"\nbirdy =PhotoImage(file= im_bird)\nshoey =PhotoImage(file= im_shoe)\nbackdrop = PhotoImage(file= im_backdrop)\nchart_1.create_image(0 ,0 ,anchor=NW, image=backdrop)\nbase_x = 20\nbase_y = 190\nhip_h = 70\nthy = 60\n#==========================================\n# Hip positions: Nhip = 2 x Nstep, the number of steps per foot per # stride.\nhip_x = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 60, 60] #15\nhip_y = [0, 8, 12, 16, 12, 8, 0, 0, 0, 8, 12, 16, 12, 8, 0] #15\nstep_x = [0, 10, 20, 30, 40, 50, 60, 60] # 8 = Nhip\nstep_y = [0, 35, 45, 50, 43, 32, 10, 0]\n#=============================================\n# Given a line joining two points xy0 and xy1, the base of an # isosceles triangle,\n# as well as the length of one side, \"thy\" this returns the # coordinates of\n# the apex joining the equal-length sides.\ndef kneePosition(x0, y0, x1, y1, thy):\ntheta_1 = math.atan2(-(y1 - y0), (x1 - x0))\nL1 = math.sqrt( (y1 - y0)**2 + (x1 - x0)**2)\nalpha = math.atan2(hip_h,L1)\ntheta_2 = -(theta_1 - alpha)\nx_knee = x0 + thy * math.cos(theta_2)\ny_knee = y0 + thy * math.sin(theta_2)\nreturn x_knee, y_knee\ndef animdelay():\nApteryx imageanimatingchart_1.update() # Refresh the drawing on the canvas.\nchart_1.after(cycle_period) # Pause execution pause for 80 # milliseconds.\nchart_1.delete(\"walking\") # Erases everything on the canvas.\nbx_stay = base_x\nby_stay = base_y\nfor j in range(0,13): # Number of steps to be taken - arbitrary.\nastep_x = 60*j\nbstep_x = astep_x + 30\ncstep_x = 60*j + 15\naa = len(step_x) -1\nfor k in range(0,len(hip_x)-1):\n# Motion of the hips in a stride of each foot.\ncx0 = base_x + cstep_x + hip_x[k]\ncy0 = base_y - hip_h - hip_y[k]\ncx1 = base_x + cstep_x + hip_x[k+1]\ncy1 = base_y - hip_h - hip_y[k+1]\n#chart_1.create_image(cx1-55 ,cy1+20 ,anchor=SW, \\ image=birdy, tag=\"walking\")\nif k >= 0 and k <= len(step_x)-2:\n# Trajectory of the right foot.\nax0 = base_x + astep_x + step_x[k]\nax1 = base_x + astep_x + step_x[k+1]\nay0 = base_y - 10 - step_y[k]\nay1 = base_y - 10 -step_y[k+1]\nax_stay = ax1\nay_stay = ay1\nif k >= len(step_x)-1 and k <= 2*len(step_x)-2:\n# Trajectory of the left foot.\nbx0 = base_x + bstep_x + step_x[k-aa]\nbx1 = base_x + bstep_x + step_x[k-aa+1]\nby0 = base_y - 10 - step_y[k-aa]\nby1 = base_y - 10 - step_y[k-aa+1]\nbx_stay = bx1\nby_stay = by1\nchart_1.create_image(ax_stay-5 ,ay_stay + 10 ,anchor=SW, \\ image=shoey, tag=\"walking\")\nchart_1.create_image(bx_stay-5 ,by_stay + 10 ,anchor=SW, \\ image=shoey, tag=\"walking\")\naknee_xy = kneePosition(ax_stay, ay_stay, cx1, cy1, thy)\nchart_1.create_line(ax_stay, ay_stay-15 ,aknee_xy[0], \\ aknee_xy[1], width = 5, fill=\"orange\", tag=\"walking\")\nchart_1.create_line(cx1, cy1 ,aknee_xy[0], aknee_xy[1], \\ width = 5, fill=\"orange\", tag=\"walking\")\nApteryx imageanimatingbknee_xy = kneePosition(bx_stay, by_stay, cx1, cy1, thy)\nchart_1.create_line(bx_stay, by_stay-15 ,bknee_xy[0], \\ bknee_xy[1], width = 5, fill=\"pink\", tag=\"walking\")\nchart_1.create_line(cx1, cy1 ,bknee_xy[0], bknee_xy[1], \\ width = 5, fill=\"pink\", tag=\"walking\")\nchart_1.create_image(cx1-55 ,cy1+20 ,anchor=SW, image=birdy, \\ tag=\"walking\")\nanimdelay()\nroot.mainloop()\n# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n# walking_toff_1.py\n# >>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport math\nimport time\nroot = Tk()\nroot.title(\"A Walking Toff in Natural Habitat - gif images\")\ncw = 800 # canvas width\nch = 200 # canvas height\n#GRAVITY = 4\nchart_1 = Canvas(root, width=cw, height=ch, background=\"white\")\nchart_1.grid(row=0, column=0)\ncycle_period = 120 # time between new positions of the man # (milliseconds).\nim_backdrop = \"/constr/pics1/toff_bg.gif\"\nim_toff = \"/constr/pics1/ambassador.gif\"\nim_shoe = \"/constr/pics1/toff_shoe.gif\"\ntoff =PhotoImage(file= im_toff)\nshoey =PhotoImage(file= im_shoe)\nbackdrop = PhotoImage(file= im_backdrop)\nchart_1.create_image(0 ,0 ,anchor=NW, image=backdrop)\nbase_x = 20\nbase_y = 190\nhip_h = 60\nthy = 25\n#============================================\n# Hip positions: Nhip = 2 x Nstep, the number of steps per foot per # stride.\nhip_x = [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 60, 60] #15\nhip_y = [0, 4, 6, 8, 6, 4, 0, 0, 0, 4, 6, 8, 6, 4, 0] #15\nstep_x = [0, 10, 20, 30, 40, 50, 60, 60] # 8 = Nhip\nstep_y = [0, 15, 25, 30, 25, 22, 10, 0]\n#============================================\n# Given a line joining two points xy0 and xy1, the base of an # isosceles triangle,\n# as well as the length of one side, \"thy\" this returns the # coordinates of\n# the apex joining the equal-length sides.\ndef kneePosition(x0, y0, x1, y1, thy):\ntheta_1 = math.atan2((y1 - y0), (x1 - x0))\nL1 = math.sqrt( (y1 - y0)**2 + (x1 - x0)**2)\nif L1/2 < thy:\nalpha = math.acos(L1/(2*thy))\nelse:\nalpha = 0.0\ntheta_2 = alpha + theta_1\nx_knee = x0 + thy * math.cos(theta_2)\ny_knee = y0 + thy * math.sin(theta_2)\nreturn x_knee, y_knee\ndef animdelay():\ndiplomat walking at palace recipechart_1.update() # Refresh the drawing on the canvas.\nchart_1.after(cycle_period) # Pause execution for 120 # milliseconds.\nchart_1.delete(\"walking\") # Erases everything on the canvas.\nbx_stay = base_x\nby_stay = base_y\nfor j in range(0,13): # Number of steps to be taken - # arbitrary.\nastep_x = 60*j\nbstep_x = astep_x + 30\ncstep_x = 60*j + 15\naa = len(step_x) -1\nfor k in range(0,len(hip_x)-1):\n# Motion of the hips in a stride of each foot.\ncx0 = base_x + cstep_x + hip_x[k]\ncy0 = base_y - hip_h - hip_y[k]\ncx1 = base_x + cstep_x + hip_x[k+1]\ncy1 = base_y - hip_h - hip_y[k+1]\nif k >= 0 and k <= len(step_x)-2:\n# Trajectory of the right foot.\nax0 = base_x + astep_x + step_x[k]\nax1 = base_x + astep_x + step_x[k+1]\nay0 = base_y - 10 - step_y[k]\nay1 = base_y - 10 -step_y[k+1]\nax_stay = ax1\nay_stay = ay1\nif k >= len(step_x)-1 and k <= 2*len(step_x)-2:\n# Trajectory of the left foot.\nbx0 = base_x + bstep_x + step_x[k-aa]\nbx1 = base_x + bstep_x + step_x[k-aa+1]\nby0 = base_y - 10 - step_y[k-aa]\nby1 = base_y - 10 - step_y[k-aa+1]\nbx_stay = bx1\nby_stay = by1\n# The shoes\nchart_1.create_image(ax_stay-5 ,ay_stay + 10 ,anchor=SW, \\ image=shoey, tag=\"walking\")\nchart_1.create_image(bx_stay-5 ,by_stay + 10 ,anchor=SW, \\ image=shoey, tag=\"walking\")\ndiplomat walking at palace recipe# Work out knee positions\naknee_xy = kneePosition(ax_stay, ay_stay, cx1, cy1, thy)\nbknee_xy = kneePosition(bx_stay, by_stay, cx1, cy1, thy)\n# Right calf.\nchart_1.create_line(ax_stay, ay_stay-5 ,aknee_xy[0], \\ aknee_xy[1], width = 5, fill=\"black\", tag=\"walking\")\n# Right thigh.\nchart_1.create_line(cx1, cy1 ,aknee_xy[0], aknee_xy[1], \\ width = 5, fill=\"black\", tag=\"walking\")\n# Left calf.\n#bknee_xy = kneePosition(bx_stay, by_stay, cx1, cy1, thy)\nchart_1.create_line(bx_stay, by_stay-5 ,bknee_xy[0], \\ bknee_xy[1], width = 5, fill=\"black\", tag=\"walking\")\n# Left thigh.\nchart_1.create_line(cx1, cy1 ,bknee_xy[0], bknee_xy[1], \\ width = 5, fill=\"black\", tag=\"walking\")\n# Torso\nchart_1.create_image(cx1-20 ,cy1+30 ,anchor=SW, \\ image=toff, tag=\"walking\")\nanimdelay() # Animation\nroot.mainloop()\n\n```", "```py\n# walker_spider_1.py\n# >>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport math\nimport time\nroot = Tk()\nroot.title(\"Mr Incy Wincy\")\ncw = 500 # canvas width\nch = 100 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"white\")\nchart_1.grid(row=0, column=0)\ncycle_period = 100 # time between new positions of thespider # (milliseconds).\nbase_x = 20\nbase_y = 100\navian = 1\nax = [ base_x, base_x+20, base_x+60 ]\nay = [ base_y, base_y, base_y ]\nbx = [ base_x+90, base_x+130, base_x+170]\nby = [ base_y, base_y, base_y ]\ncx1 = base_x + 80\ncy1 = base_y - 20\nthy = 50\n#=============================================\nposn_x = 0\nposn_y = 00\nspider_backg = PhotoImage(file = \"/constr/pics1/jungle_strip_1.gif\")\nmammal and bird leg motionscombining#===========================================\nfoot_lift = [10,10,5,-5,-10,-10] # 3 legs per side, each foot in # sequence = 18 moves\nfoot_stay = [ 0, 0,0, 0, 0, 0]\n#========================================\n# Given a line joining two points xy0 and xy1, the base of an # isosceles triangle,\n# as well as the length of one side, \"thy\" this returns the # coordinates of\n# the apex joining the equal-length sides - the position of the knee.\ndef kneePosition(x0, y0, x1, y1, thy, avian):\ntheta_1 = math.atan2((y1 - y0), (x1 - x0))\nL1 = math.sqrt( (y1 - y0)**2 + (x1 - x0)**2)\nif L1/2 < thy:\n# The sign of alpha determines which way the knees bend.\nif avian == 1:\nalpha = -math.acos(L1/(2*thy)) # Avian\nelse:\nalpha = math.acos(L1/(2*thy)) # Mammalian\nelse:\nalpha = 0.0\ntheta_2 = alpha + theta_1\nx_knee = x0 + thy * math.cos(theta_2)\ny_knee = y0 + thy * math.sin(theta_2)\nreturn x_knee, y_knee\ndef animdelay():\nchart_1.update() # This refreshes the drawing on the # canvas.\nchart_1.after(cycle_period) # This makes execution pause for 100 # milliseconds.\nchart_1.delete(ALL) # This erases *almost* everything on # the canvas.\nfor j in range(0,11): # Number of steps to be taken - arbitrary.\nmammal and bird leg motionscombiningposn_x -= 1\nchart_1.create_image(posn_x,posn_y,anchor=NW, image=spider_backg)\nfor k in range(0,len(foot_lift)*3):\nposn_x -= 1\nchart_1.create_image(posn_x,posn_y,anchor=NW, \\ image=spider_backg)\n#cx1 += 3.5\ncx1 += 2.6\n# Phase 1\nif k >= 0 and k <= 5:\nay[0] = base_y - 10 - foot_lift[k]\nax[0] += 8\nby[0] = base_y - 10 - foot_lift[k]\nbx[0] += 8\n# Phase 2\nif k > 5 and k <= 11:\nay[1] = base_y - 10 - foot_lift[k-6]\nax[1] += 8\nby[1] = base_y - 10 - foot_lift[k-6]\nbx[1] += 8\n# Phase 3\nif k > 11 and k <= 17:\nay[2] = base_y - 10 - foot_lift[k-12]\nax[2] += 8\nby[2] = base_y - 10 - foot_lift[k-12]\nbx[2] += 8\nfor i in range(0,3):\naknee_xy = kneePosition(ax[i], ay[i], cx1, cy1, thy, 1) # Mammal knee\nbknee_xy = kneePosition(bx[i], by[i], cx1, cy1, thy, 0) # Bird knee\nchart_1.create_line(ax[i], ay[i] ,aknee_xy[0], \\ aknee_xy[1], width = 3)\nchart_1.create_line(cx1, cy1 ,aknee_xy[0], \\ aknee_xy[1], width = 3)\nchart_1.create_line(bx[i], by[i] ,bknee_xy[0], \\ bknee_xy[1], width = 3)\nchart_1.create_line(cx1, cy1 ,bknee_xy[0], \\ bknee_xy[1], width = 3)\nchart_1.create_oval(cx1-15 ,cy1-10 ,cx1+15 , \\ cy1+10, fill=\"black\")\nanimdelay()\nroot.mainloop()\n\n```", "```py\n# passing_show_1.py\n# >>>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport math\nimport time\nroot = Tk()\nroot.title(\"Vase Show\")\ncw = 400 # canvas width\nch = 200 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"white\")\nchart_1.grid(row=0, column=0)\ncycle_period = 100 # time between new positions of the ball (milliseconds).\n#=======================================================================\nposn_x1 = 0\nposn_x2 = 100\nposn_x3 = 200\nposn_x4 = 300\nposn_y = 00\nim_brass = PhotoImage(file = \"/constr/pics1/brass_vase.gif\")\nim_red = PhotoImage(file = \"/constr/pics1/red_vase.gif\")\nim_blue = PhotoImage(file = \"/constr/pics1/blue_vase.gif\")\nim_glass = PhotoImage(file = \"/constr/pics1/glass_vase.gif\")\n#=======================================================================\ndef animdelay():\nchart_1.update() # This refreshes the drawing on the canvas.\nchart_1.after(cycle_period) # This makes execution pause for 100 milliseconds.\nchart_1.delete(ALL) # This erases *almost* everything on the canvas.\nfor j in range(0,400): # Number of steps to be taken - arbitrary.\nposn_x1 -= 1\nposn_x2 -= 1\nposn_x3 -= 1\nposn_x4 -= 1\nchart_1.create_image(posn_x1,posn_y,anchor=NW, image=im_brass)\nchart_1.create_image(posn_x2,posn_y,anchor=NW, image=im_red)\nchart_1.create_image(posn_x3,posn_y,anchor=NW, image=im_blue)\nchart_1.create_image(posn_x4,posn_y,anchor=NW, image=im_glass)\nanimdelay()\nroot.mainloop()\n# >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>\n\n```", "```py\n# endless_passing_show_1.py\n# >>>>>>>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport math\nimport time\nroot = Tk()\nroot.title(\"Vase Show\")\ncw = 100 # canvas width\nch = 200 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"black\")\nchart_1.grid(row=0, column=0)\ncycle_period = 100 # time between new positions of the images milliseconds).\n#==============================================\nposn_x1 = 0\nposn_x2 = 100\nposn_x3 = 200\nposn_x4 = 300\nposn_y = 00\nim_brass = PhotoImage(file = \"/constr/pics1/brass_vase.gif\")\nim_red = PhotoImage(file = \"/constr/pics1/red_vase.gif\")\nim_blue = PhotoImage(file = \"/constr/pics1/blue_vase.gif\")\nim_glass = PhotoImage(file = \"/constr/pics1/glass_vase.gif\")\n#=============================================\ndef animdelay():\nchart_1.update() # This refreshes the drawing on the canvas.\nchart_1.after(cycle_period) # This makes execution pause for 100 milliseconds.\nchart_1.delete(ALL) # This erases *almost* everything on the canvas.\nfor j in range(0,600): # Number of steps to be taken - arbitrary.\nposn_x1 -= 1\nposn_x2 -= 1\nposn_x3 -= 1\nposn_x4 -= 1\nchart_1.create_image(posn_x1,posn_y,anchor=NW, image=im_brass)\nchart_1.create_image(posn_x2,posn_y,anchor=NW, image=im_red)\nchart_1.create_image(posn_x3,posn_y,anchor=NW, image=im_blue)\nchart_1.create_image(posn_x4,posn_y,anchor=NW, image=im_glass)\n# The numerical parameters below could be turned into\n# a 'for' loop and allow the loop to be compact and interminable.\nif j == 100:\nposn_x1 = 300\nif j == 200:\nposn_x2 = 300\nif j == 400:\nposn_x3 = 300\nif j == 400:\nposn_x4 = 300\nanimdelay()\nroot.mainloop()\n\n```", "```py\n# passing_cloudscape_1.py\n# >>>>>>>>>>>>>>>>\nfrom Tkinter import *\nimport time\nroot = Tk()\nroot.title(\"Freedom Flight Cloudscape\")\ncw = 400 # canvas width\nch = 239 # canvas height\nchart_1 = Canvas(root, width=cw, height=ch, background=\"black\")\nchart_1.grid(row=0, column=0)\ncycle_period = 50 # time between new positions of the background # (milliseconds).\n#=============================================\nposn_x1 = 0\nposn_x2 = 574\nposn_plane_x = 60\nposn_plane_y = 60\nposn_y = 00\n# Panorama image size = 574 x 239\nim_one = PhotoImage(file = \"/constr/pics1/continuous_clouds \\ _panorama.gif\")\nim_two = PhotoImage(file = \"/constr/pics1/continuous_clouds \\ _panorama.gif\")\nim_plane = PhotoImage(file = \"/constr/pics1/yellow_airplane_2.gif\")\n#===========================================\ndef animdelay():\nchart_1.update() # This refreshes the drawing on the # canvas.\nchart_1.after(cycle_period) # This makes execution pause for 50 # milliseconds.\nchart_1.delete(ALL) # This erases *almost* everything on # the canvas.\nnum_cycles = 10 # Number of total cycles of the # loop.\nk = 0\nfor j in range(0,num_cycles*1148): # Number of steps to be taken # arbitrary.\nposn_x1 -= 1\nposn_x2 -= 1\nk += 1\nchart_1.create_image(posn_x1,posn_y,anchor=NW, image=im_one)\nchart_1.create_image(posn_x2,posn_y,anchor=NW, image=im_two)\nchart_1.create_image(posn_plane_x,posn_plane_y,anchor=NW, \\ image=im_plane)\nif k == 574:\nposn_x1 = 574\nif k == 1148:\nposn_x2 = 574\nk = 0\nposn_x1 = 0\nanimdelay()\nroot.mainloop()\n\n```"]