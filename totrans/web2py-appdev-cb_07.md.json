["```py\ndef consumer():\n\treturn dict()\n\n@service.json\ndef get_days():\n\treturn [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\",\n\t\t\"Friday\", \"Saturday\"]\n\ndef call():\n\treturn service()\n\n```", "```py\n{{extend 'layout.html'}}\n\n<div id=\"target\"></div>\n\n<script>\n\tjQuery.getJSON(\"{{=URL('call',args=['json','get_days'])}}\",\n\t\tfunction(msg){\n\tjQuery.each(msg, function(){ jQuery(\"#target\").\n\t\tappend(this + \"<br />\"); } )\n\t});\n</script>\n\n```", "```py\nresponse.generic_pattern = ['get_days.json']\ndef get_days():\n\treturn [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\",\n\t\t\"Thursday\", \"Friday\", \"Saturday\"]\n\n```", "```py\n{{extend 'layout.html'}}\n\n<div id=\"target\"></div>\n\t<script>\n\t\tjQuery.getJSON(\n\t\t\t\"{{=URL('get_days.json')}}\",\n\t\t\tfunction(msg){\n\t\t\tjQuery.each(\n\t\t\t\tmsg,\n\t\t\t\tfunction(){\n\t\t\t\t\t\tjQuery(\"#target\").append(this + \"<br />\");\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t);\n</script>\n\n```", "```py\n@service.json\ndef concat(a,b):\n\treturn a+b\n\n```", "```py\neasy_install jsonrpc\n\n```", "```py\n    \tfrom gluon.tools import Service\n    \tservice = Service(globals())\n    \t@service.jsonrpc\n    \tdef concat(a,b):\n    \treturn a+b\n    def call():\n    \treturn service()\n\n    ```", "```py\n    from jsonrpc.proxy import JSONRPCProxy\n    proxy = JSONRPCProxy(\n    \t'http://127.0.0.1:8000',path='/app/default/call/jsonrpc')\n    print proxy.call('concat','hello','world')\n\n    ```", "```py\nfrom jsonrpc import ServerProxy\nproxy = ServerProxy(\n\t'http://127.0.0.1:8000/app/default/call/jsonrpc')\nprint proxy.concat('hello','world')\n\n```", "```py\ndef test_concat():\n\tfrom gluon.contrib.simplejsonrpc import ServerProxy\n\tproxy = ServerProxy(\n\t\t'http://127.0.0.1:8000/%s/default/call/jsonrpc' %\n\t\trequest.application)\n\treturn proxy.concat('hello','world')\n\n```", "```py\n    def index(); return dict()\n\n    ```", "```py\n    {{\n    \tresponse.files.append(URL('static','js/jquery.js'))\n    \tresponse.files.append(URL('static','js/rpc.js'))\n    \tresponse.files.append(URL('static','js/BasicJSONRPC.js'))\n    }}\n    {{extend 'layout.html'}}\n\n    ```", "```py\n    def index():\n    \tresponse.view = \"BasicJSONRPC.html\"\n    \treturn dict()\n\n    def BasicJSONRPC():\n    \tresponse.view = \"BasicJSONRPC.html\"\n    \treturn dict()\n\n    ```", "```py\n    import math\n\n    from gluon.tools import Service\n\n    service = Service(globals())\n\n    def call():\n    \treturn service()\n\n    @service.jsonrpc\n\n    def systemListMethods():\n\n    \t#Could probably be rendered dynamically\n\n    \treturn [\"SmallTest\"];\n\n    @service.jsonrpc\n\n    def SmallTest(a, b):\n\n    \treturn a + b\n\n    ```", "```py\n    var ConnectionCreationTime = null;\n    var DataController = null;\n    var Connected = false;\n\n    function InitDataConnection() {\n    \tConnected = false;\n    \t// replace with the correct service url\n    \tvar url = http://localhost/Application/Controller/call/jsonrpc\n    \t// var url = GetConnectionURL();\n    \ttry {\n    \t\t// Here we connect to the server and build\n    \t\t// the service object (important)\n    \t\tDataController = new rpc.ServiceProxy(url);\n    \t\tConnected = true;\n    \t} catch(err) {\n    \t\tLog(\"Connection Error: \" + err.message);\n    \t\tConnected = false;\n    \t}\n    \tvar now = new Date();\n    \tConnectionCreated = now;\n    }\n\n    ```", "```py\n    http://getfirebug.com\n\n    InitDataConnection();\n    rpc.setAsynchronous(DataController,false);\n    DataController.SmallTest(1,2);\n\n    ```", "```py\n        function RunSmallTest() {\n        \tif(Connected == false)\n        \t\tLog(\"Cannot RunSmallTest unless connected\");\n        \telse {\n        \t\tvar a = GetAValue();\n        \t\tvar b = GetBValue();\n        \t\tLog(\"Calling remote method SmallTest using values a=\"\n        \t\t\t+ a + \" and b=\" + b);\n        \t\tDataController.SmallTest({params:[a,b],\n        \t\t\tonSuccess:function(sum){\n        \t\tLog(\"SmallTest returned \" + sum);\n        \t\t},\n        \t\tonException:function(errorObj){\n        \t\t\tLog(\"SmallTest failed: \" + errorObj.message);\n        \t\t},\n        \t\tonComplete:function(responseObj){\n        \t\t\tLog(\"Call to SmallTest Complete\");\n        \t\t}\n        \t\t});\n        \t\tLog(\"Asynchronous call sent\");\n        \t}\n        }\n\n        ```", "```py\n        @service.jsonrpc\n        def BiggerTest(a, b):\n        \tresults = dict()\n        \tresults[\"originalValues\"] = [a,b]\n        \tresults[\"sum\"] = a + b\n        \tresults[\"difference\"] = a - b\n        \tresults[\"product\"] = a * b\n        \tresults[\"quotient\"] = float(a)/b\n        \tresults[\"power\"] = math.pow(a,b)\n        \treturn results\n\n        ```", "```py\n    >>> InitDataConnection();\n    POST http://127.0.0.1:8000/BasicJSONRPC/BasicJSONRPCData/call/\n    jsonrpc \t200 OK \t 20ms \t\trpc.js (line 368)\n    >>> rpc.setAsynchronous(DataController,false);\n    >>> var results = DataController.BiggerTest(17,25);\n    POST http://127.0.0.1:8000/BasicJSONRPC/BasicJSONRPCData/call/\n    jsonrpc \t200 OK \t20ms \trpc.js \t\t(line 368)\n    >>> results.originalValues\n    [17, 25]\n    >>> results.originalValues[1]\n    25\n    >>> results.sum\n    42\n    >>> results.difference\n    -8\n    >>> results.quotient\n    0.68\n\n    ```", "```py\n    @auth.requires_login()\n    def call():\n    \treturn service()\n\n    ```", "```py\n    auth.settings.login_url = URL(\"BasicJSONRPC\", 'Login')\n\n    ```", "```py\n    def Login():\n    \treturn \"Not logged in\"\n\n    ```", "```py\n    onException:function(errorObj){\n    \tif(errorObj.message.toLowerCase().indexOf(\n    \t\t\"badly formed json string: not logged in\") >= 0)\n    \t\t\tPromptForAuthentication();\n    \telse\n    \t\tLog(\"SmallTest failed: \" + errorObj.message);\n    }\n\n    ```", "```py\n    function LoadDataObject(objectName,params,\n    \tresponseObject,errorObject) {\n    \tLog(\"Loading data object \\\"\" + objectName + \"\\\"\")\n    \teval(\"\" + objectName + \" = \\\"Loading\\\"\");\n    \teval(objectName +\"Ready = false\");\n    \tif(responseObject === undefined) {\n    \t\tif(Connected != true) {\n    \t\t\tLog(\"Not connected, connecting...\");\n    \t\t\tInitDataConnection();\n    \t\t}\n    \t\tvar listUndefined = eval(\"DataController.\" +\n    \t\t\tobjectName + \" !== undefined\")\n    \t\tif(Connected == true && listUndefined == true) {\n    \t\t\tvar paramsString = \"\";\n    \t\tfor(var i in params) {\n    \t\t\tparamsString += \"params[\" + i + \"],\";\n    \t\t}\n    \t\t//Removing trailing coma\n    \t\tparamsString = paramsString.substring(0,\n    \t\t\t(paramsString.length - 1));\n    \t\teval(\n    \t\t\t\"DataController.\"\n    \t\t\t\t+ objectName\n    \t\t\t\t+ \"({params:[\"\n    \t\t\t\t+ paramsString\n    \t\t\t\t+ \"], onSuccess:function(response){LoadDataObject(\\\"\" + objectName + \"\\\",[\"\n    \t\t\t\t+ paramsString + \"],response)}, onException:function(error){\n    \t\t\t\tLog(\\\"Error detected\\\"); LoadDataObject(\\\"\"\n    \t\t\t\t+ objectName\n    \t\t\t\t+ \"\\\",[\"\n    \t\t\t\t+ paramsString\n    \t\t\t\t+ \"],null, error);}, onComplete:function(responseObj){\n    \t\t\t\tLog(\\\"Finished loading \"\n    \t\t\t\t+ objectName\n    \t\t+ \"\\\");} });\" );\n    \t\t}\n    \t\telse {\n    \t\t\teval(objectName + \" = \\\"Could not connect\\\"\");\n    \t\t\teval(objectName + \"Ready = false\");\n    \t\t\tLog(\"Could not connect. Either server error \" +\n    \t\t\t\"or calling non existing method (\"\n    \t\t\t+ objectName + \")\");\n    \t\t}\n    \t} else {\n    \t\tif(errorObject === undefined) {\n    \t\t\teval(objectName + \" = responseObject\");\n    \t\t\teval(objectName +\"Ready = true\");\n    \t\t}\n    \t\telse {\n    \t\t\tLog(\"Failed to Load Data Object \" +\n    \t\t\tobjectName + \": \" + errorObject.message)\n    \t\t\teval(objectName + \" = errorObject\");\n    \t\t\teval(objectName + \"Ready = false\");\n    \t\t}\n    \t}\n    }\n\n    ```", "```py\n//Handle errors returned by the server\nif(response.error !== undefined){\n\tvar err = new Error(response.error.message);\n\n```", "```py\n//Handle errors returned by the server\nif(response.error && response.error !== undefined){\n\tvar err = new Error(response.error.message);\n\n```", "```py\npython setup.py install --disable-ext\n\n```", "```py\n    from gluon.tools import Service\n    service = Service(globals())\n\n    def call():\n    \tsession.forget()\n    \treturn service()\n\n    @service.amfrpc3(\"mydomain\")\n    def test():\n    \treturn \"Test!!!\"\n\n    ```", "```py\n    <?xml version=\"1.0\" encoding=\"utf-8\"?>\n    \t<mx:Application  layout=\"absolute\">\n    \t\t<mx:Script>\n    \t\t\t<![CDATA[\n    \t\t\t\timport mx.rpc.events.FaultEvent;\n    \t\t\t\timport mx.rpc.events.ResultEvent;\n    \t\t\t\timport mx.controls.Alert;\n\n    \t\t\t\tprivate function resultHandler(\n    \t\t\t\t\tevent:ResultEvent):void\n    \t\t\t\t\t{\n    \t\t\t\t\t\ttrace(event.result.toString());\n    \t\t\t\t\t}\n    \t\t\t\t\tprivate function faultHandler(\n    \t\t\t\t\t\tevent:FaultEvent):void\n    \t\t\t\t\t\t{\n    \t\t\t\t\t\t\ttrace(event.fault.message);\n    \t\t\t\t\t\t}\n    \t\t\t]]>\n    \t</mx:Script>\n    \t<mx:RemoteObject\n    \t\tid=\"amfService\"\n    \t\tendpoint=\"http://127.0.0.1:8000/app/rpc/call/amfrpc3\"\n    \t\tdestination=\"mydomain\"\n    \tshowBusyCursor=\"true\">\n    \t\t<mx:method name=\"test\" result=\"resultHandler(event)\"\n    \t\t\tfault=\"faultHandler(event)\"/>\n    \t</mx:RemoteObject>\n    \t<mx:Button x=\"250\" y=\"150\" label=\"Fire\"\n    \t\tclick=\"amfService.test();\"/>\n    </mx:Application>\n\n    ```", "```py\n    http://mydomain.com:8000/crossdomain.xml\n\n    ```", "```py\n    <?xml version=\"1.0\"?>\n    <!DOCTYPE cross-domain-policy SYSTEM\n    \t\"http://www.macromedia.com/xml/dtds/cross-domain-policy.dtd\">\n    <cross-domain-policy>\n    \t<allow-access-from domain=\"*\" />\n    </cross-domain-policy>\n\n    ```", "```py\n    routes_in = (('/crossdomain.xml', '/app/static/crossdomain.xml'),)\n\n    ```", "```py\n<form action=\"https://www.sandbox.paypal.com/cgi-bin/webscr\"\n\t\tmethod=\"post\">\n\t\t<!-- Select the correct button depending on country etc.\n\t\tIf you can do it with pre-generated buttons (with prices included\n\t\t\tetc)\n\t\t\tthen so much the better for security -->\n\t\t<input type=\"hidden\" name=\"business\" value=\"{{=paypal_id}}\" />\n\t<input type=\"image\" src=\n\t\t\"https://www.sandbox.paypal.com/es_XC/i/btn/btn_buynowCC_LG.gif\"\n\t\tborder=\"0\" name=\"submit\" alt=\"PayPal - The safer, easier way to pay\n\t\tonline!\">\n\t<img alt=\"\" border=\"0\" src=\n\t\t\"https://www.sandbox.paypal.com/es_XC/i/scr/pixel.gif\" width=\"1\"\n\t\theight=\"1\">\n\t<form action=\"http://www.sandbox.paypal.com/cgi-bin/webscr\"\n\t\tmethod=\"post\" />\n\t<input type=\"hidden\" name=\"cmd\" value=\"_cart\" />\n\t<input type=\"hidden\" name=\"upload\" value=\"1\" />\n\t<input type=\"hidden\" name=\"charset\" value=\"utf-8\">\n\t<input type=\"hidden\" name=\"currency_code\" value=\"EUR\" />\n\t<input type=\"hidden\" name=\"display\" value=\"1\"/>\n\t<input type=\"hidden\" name=\"shopping_url\"\n\t\tvalue=\"http://www.micropolixshop.com/giftlist/default/glist\"/>\n\t<!-- Not really necessary, only if want to allow\n\t\tcontinue Shopping -->\n\t<input type=\"hidden\" name=\"notify_url\" value=\n\t\t\"http://www.micropolixshop.com/giftlist/default/ipn_handler\"/>\n\t<!-- Or leave blank and setup default url at paypal -->\n\t<input type=\"hidden\" name=\"return\"\n\t\tvalue=\"http://www.micropolixshop.com/giftlist/default/confirm\"/>\n\t<!-- Or leave blank and setup default url at paypal -->\n\t<input type=\"hidden\" name=\"custom\" value=\"{{=session.event_code}}\"/>\n\t{{k=1}}\n\t{{for id,product in products.items():}}\n\t<input type=\"hidden\" name=\"item_number_{{=k}}\"\n\t\tvalue=\"{{=product.ext_code}}\"/>\n\t<input type=\"hidden\" name=\"item_name_{{=k}}\"\n\t\tvalue=\"{{=product.name}}\"/>\n\t<input type=\"hidden\" name=\"quantity_{{=k}}\"\n\t\tvalue=\"{{=session.cart[str(id)]}}\"/>\n\t<input type=\"hidden\" name=\"discount_rate_{{=k}}\" value=\"15\"/>\n\t<!-- ie, wants a 15% on all articles always -->\n\t<input type=\"hidden\" name=\"tax_{{=k}}\"\n\t\tvalue=\"{{=product.price*product.tax_rate}}\"/>\n\t<input type=\"hidden\" name=\"amount_{{=k}}\"\n\t\tvalue=\"{{=product.price}}\"/>\n\t{{k+=1}}\n\t{{pass}}\n</form>\n\n```", "```py\n# db.py file\n#####################################################################\n# Global Variables definition\n#####################################################################\ndomain='www.sandbox.paypal.com'\nprotocol='https://'\nuser=None\npasswd=None\nrealm=None\nheaders = {'Content-Type':'application/x-www-form-urlencoded'}\n# This token should also be set in a table so that the seller can set\n#it up\n# dynamically and not through the code. Same goes for the PAGINATE.\npaypal_token=\"XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\"\nPAGINATE = 20\n#####################################################################\n\n# default.py file\n#####################################################################\n# coding: utf8\n\nimport datetime\nimport string\n\nif not session.cart: session.cart, session.balance={},0\napp=request.application\n\n#### Setup PayPal login email (seller id) in the session\n#### I store paypal_id in a table\nsession.paypal_id=myorg.paypal_id\nimport urllib2, urllib\nimport datetime\n\nclass Connection:\n\tdef __init__(self, base_url, username, password, realm = None,\n\t\theader = {}):\n\t\tself.base_url = base_url\n\t\tself.username = username\n\t\tself.password = password\n\t\tself.realm = realm\n\t\tself.header = header\n\n\tdef request(self, resource, data = None, args = None):\n\t\tpath = resource\n\n\t\tif args:\n\t\t\tpath += \"?\" + (args)\n\n\t\t# create a password manager\n\t\tpassword_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\n\n\t\tif self.username and self.password:\n\t\t\t# Add the username and password.\n\t\t\t\tpassword_mgr.add_password(self.realm, self.base_url,\n\t\t\t\t\tself.username, self.password)\n\n\t\thandler = urllib2.HTTPBasicAuthHandler(password_mgr)\n\n\t\t# create \"opener\" (OpenerDirector instance)\n\t\topener = urllib2.build_opener(handler)\n\n\t\t# Install the opener.\n\t\t# Now all calls to urllib2.urlopen use our opener.\n\t\turllib2.install_opener(opener)\n\t\t#Create a Request\n\t\treq=urllib2.Request(self.base_url + path, data, self.header)\n\t\t# use the opener to fetch a URL\n\t\terror = ''\n\t\ttry:\n\t\t\tret=opener.open(req)\n\t\texcept urllib2.HTTPError, e:\n\t\t\tret = e\n\t\t\terror = 'urllib2.HTTPError'\n\t\texcept urllib2.URLError, e:\n\t\t\tret = e\n\t\t\terror = 'urllib2.URLError'\n\n\t\treturn ret, error\n\n\tdef add_to_cart():\n\t\t\"\"\"\n\t\t\tAdd data into the session.cart dictionary\n\t\t\tSession.cart is a dictionary with id product_id and value = quantity\n\t\t\tSession.balance is a value with the total of the transaction.\n\t\t\tAfter updating values, redirect to checkout\n\t\t\"\"\"\n\t\tpid=request.args[0]\n\t\tproduct=db(db.product.id==pid).select()[0]\n\t\tproduct.update_record(clicked=product.clicked+1)\n\t\ttry: qty=session.cart[pid]+1\n\t\texcept: qty=1\n\t\tsession.cart[pid]=qty\n\t\tsession.balance+=product.price\n\t\tredirect(URL('checkout'))\n\n\tdef remove_from_cart():\n\t\t\"\"\"\n\t\t\tallow add to cart\n\t\t\"\"\"\n\t\tpid = request.args[0]\n\t\tproduct=db(db.product.id==pid).select()[0]\n\t\tif session.cart.has_key(pid):\n\t\t\tsession.balance-=product.price\n\t\t\tsession.cart[pid]-=1\n\t\t\tif not session.cart[pid]: del session.cart[pid]\n\t\tredirect(URL('checkout'))\n\n\tdef empty_cart():\n\t\t\"\"\"\n\t\t\tallow add to cart\n\t\t\"\"\"\n\t\tsession.cart, session.balance={},0\n\t\tredirect(URL('checkout'))\n\n\tdef checkout():\n\t\t\"\"\"\n\t\t\tCheckout\n\t\t\"\"\"\n\t\tpids = session.cart.keys()\n\t\tcart={}\n\t\tproducts={}\n\t\tfor pid in pids:\n\t\t\tproducts[pid]=db(db.product.id==pid).select()[0]\n\t\treturn dict(products=products,paypal_id=session.paypal_id)\n\n```", "```py\ndef confirm():\n\t\"\"\"\n\t\tThis is set so as to capture the transaction data from PayPal\n\t\tIt captures the transaction ID from the HTTP GET that PayPal\n\t\t\tsends.\n\t\tAnd using the token from vendor profile PDT, it does a form post.\n\t\tThe data from the http get comes as vars Name Value Pairs.\n\t\"\"\"\n\tif request.vars.has_key('tx'):\n\t\ttrans = request.vars.get('tx')\n\t\t# Establish connection.\n\t\tconn = Connection(base_url=protocol+domain, username=user,\n\t\t\tpassword = passwd, realm = realm, header = headers)\n\t\tdata = \"cmd=_notify-synch&tx=\"+trans+\"&at=\"+paypal_token\n\t\tresp,error=conn.request('/cgi-bin/webscr', data)\n\t\tdata={}\n\t\tif error=='':\n\t\t\trespu = resp.read()\n\t\t\trespuesta = respu.splitlines()\n\t\t\tdata['status']=respuesta[0]\n\t\t\tif respuesta[0]=='SUCCESS':\n\t\t\t\tfor r in respuesta[1:]:\n\t\t\t\t\tkey,val = r.split('=')\n\t\t\t\t\tdata[key]=val\n\t\t\t\tmsg=''\n\t\t\t\tif data.has_key('memo'): msg=data['memo']\n\t\t\t\tform = FORM(\"Quiere dejar un mensaje con los regalos?\",\n\t\t\t\t\tINPUT(_name=T('message'),_type=\"text\",_value=msg),\n\t\t\t\t\tINPUT(_type=\"submit\"))\n\t\t\t\tif form.accepts(request,session):\n\t\t\t\t\temail=data['payer_email'].replace('%40','@')\n\t\t\t\t\tid = db.gift_msg.insert(buyer=data['payer_email'],\n\t\t\t\t\t\ttransact=trans,msg=form.vars.message)\n\t\t\t\t\tresponse.flash=T('Your message will be passed on to the\n\t\t\t\t\t\trecipient')\n\t\t\t\t\tredirect(URL('index'))\n\n\t\t\t\treturn dict(data=data,form=form)\n\t\treturn dict(data=data)\n\telse:\n\t\tdata['status']='FAIL'\nelse:\n\tredirect(URL('index'))\nreturn dict(trans=trans)\n\n```", "```py\n{{extend 'layout.html'}}\n\n{{if data['status'] == 'SUCCESS':}}\n<p><h3>{{=T('Your order has been received.')}}</h3></p>\n<hr>\n<b>{{=T('Details')}}</b><br>\n<li>\n\t{{=T('Name:')}} {{=data['first_name']}} {{=data['last_name']}}\n</li>\n<li>'\n\t{{=T('Purchases for event:')}}: {{=data['transaction_subject']}}\n</li>\n<li>\n\t{{=T('Amount')}}: {{=data['mc_currency']}} {{=data['mc_gross']}}\n</li>\n<hr>\n{{=form}}\n{{else:}}\n{{=T('No confirmation received from PayPal. This can be due to a\n\tnumber of reasons; please check your email to see if the\n\ttransaction was successful.')}}\n{{pass}}\n\n{{=T('Your transaction has finished, you should receive an email of\n\tyour purchase.')}}<br>\n{{=T('If you have an account at PayPal, you can check your\n\ttransaction details at')}}\n\t<a href='https://www.paypal.es'>www.paypal.es</a>\n\n```", "```py\n#### At models/db.py\n#####################################################################\ndb.define_table('ipn_msgs',\n\tField('trans_id',label=T('transaction id')),\n\tField('timestamp','datetime',label=T('timestamp')),\n\tField('type',label=T('type')),\n\tField('msg','text',label=T('message')),\n\tField('processed','boolean',label=T('processed')),\n\tField('total','double',label=T('total')),\n\tField('fee','double',label=T('fee')),\n\tField('currency',length=3,label=T('currency')),\n\tField('security_msg',label=T('security message'))\n)\n\n#### At controllers/default.py\n#####################################################################\ndef ipn_handler():\n\t\"\"\"\n\t\tManages the ipn connection with PayPal\n\t\tAsk PayPal to confirm this payment, return status and detail strings\n\t\"\"\"\n\tparameters = None\n\tparameters = request.vars\n\tif parameters:\n\t\tparameters['cmd'] = '_notify-validate'\n\t\tparams = urllib.urlencode(parameters)\n\t\tconn = Connection(base_url=protocol+domain, username=user,\n\t\t\tpassword = passwd, realm = realm, header = headers)\n\t\tresp,error =conn.request('/cgi-bin/webscr', params)\n\t\ttimestamp=datetime.datetime.now()\n\t\t# We are going to log all messages confirmed by PayPal.\n\t\tif error =='':\n\t\tipn_msg_id = db.ipn_msgs.insert(trans_id=parameters['txn_id'],\n\t\t\ttimestamp=timestamp,type=resp.read(),msg=params,\n\t\t\ttotal=parameters['mc_gross'],fee=parameters['mc_fee'],\n\t\t\tcurrency=parameters['mc_currency'])\n\t\t# But only interested in processing messages that have payment\n\t\t#status completed and are VERIFIED by PayPal.\n\t\tif parameters['payment_status']=='Completed':\n\t\t\tprocess_ipn(ipn_msg_id,parameters)\n\n```", "```py\ndef process_ipn(ipn_msg_id,param):\n\t\"\"\"\n\t\tWe process the parameters sent from IPN PayPal, to correctly\n\t\tstore the confirmed sales in the database.\n\t\tparam -- request.vars from IPN message from PayPal\n\t\"\"\"\n\t# Check if transaction_id has already been processed.\n\tquery1 = db.ipn_msgs.trans_id==param['txn_id']\n\tquery2 = db.ipn_msgs.processed == True\n\trows = db(query1 & query2).select()\n\tif not rows:\n\t\ttrans = param['txn_id']\n\t\tpayer_email = param['payer_email']\n\t\tn_items = int(param['num_cart_items'])\n\t\tpay_date = param['payment_date']\n\t\ttotal = param['mc_gross']\n\t\tcurr = param['mc_currency']\n\t\tevent_code = param['custom']\n\t\tif param.has_key('memo'): memo=param['memo']\n\t\tevent_id = db(db.event.code==event_code).select(db.event.id)\n\t\tif not event_id:\n\t\t\tdb.ipn_msgs[ipn_msg_id]=dict(security_msg=T('Event does not\n\t\t\t\texist'))\n\t\telse:\n\t\t\terror=False\n\t\t\tfor i in range(1,n_items+1):\n\t\t\t\tproduct_code = param['item_number'+str(i)]\n\t\t\t\tqtty = param['quantity'+str(i)]\n\t\t\t\tline_total = float(param['mc_gross_'+str(i)]) +\n\t\t\t\t\tfloat(param['mc_tax'+str(i)])\n\t\t\t\tproduct=db(db.product.ext_code==product_code).\n\t\t\t\t\tselect(db.product.id)\n\t\t\t\tif not product:\n\t\t\t\t\tdb.ipn_msgs[ipn_msg_id]=dict(security_msg=T('Product code\n\t\t\t\t\t\tdoes not exist'))\n\t\t\t\t\terror=True\n\t\t\t\telse:\n\t\t\t\t\tdb.glist.insert(event=event_id[0],product=product[0],\n\t\t\t\t\t\tbuyer=payer_email,transact=trans,\n\t\t\t\t\t\tpurchase_date=pay_date,quantity_sold=qtty,\n\t\t\t\t\t\tprice=line_total,observations=memo)\n\t\t\tif not error: db.ipn_msgs[ipn_msg_id]=dict(processed=True)\n\n```", "```py\n    from M2Crypto import BIO, SMIME, X509, EVP\n\n    def paypal_encrypt(attributes, sitesettings):\n    \t\"\"\"\n    \tTakes a list of attributes for working with PayPal (in our\n    \tcase adding to the shopping cart), and encrypts them for\n    \tsecure transmission of item details and prices.\n    \t@type attributes: dictionary\n    \t@param attributes: a dictionary of the PayPal request\n    \t\tattributes. An\n    \t\texample attribute set is:\n\n    \t\t>>> attributes = {\"cert_id\":sitesettings.paypal_cert_id,\n    \t\t\t\"cmd\":\"_cart\",\n    \t\t\t\"business\":sitesettings.cart_business,\n    \t\t\t\"add\":\"1\",\n    \t\t\t\"custom\":auth.user.id,\n    \t\t\t\"item_name\":\"song 1 test\",\n    \t\t\t\"item_number\":\"song-1\",\n    \t\t\t\"amount\":\"0.99\",\n    \t\t\t\"currency_code\":\"USD\",\n    \t\t\t\"shopping_url\":'http://'+\\\n    \t\t\t\tStorage(globals()).request.env.http_host+\\\n    \t\t\t\tURL(args=request.args),\n    \t\t\t\"return\":'http://'+\\\n    \t\t\t\tStorage(globals()).request.env.http_host+\\\n    \t\t\t\tURL('account', 'downloads'),\n    \t\t}\n\n    \t@type sitesettings: SQLStorage\n    \t@param sitesettings: The settings stored in the database.\n    \t\tthis method\n    \t\trequires I{tenthrow_private_key}, I{tenthrow_public_cert},\n    \t  and I{paypal_public_cert} to function\n    \t@rtype: string\n    \t@return: encrypted attribute string\n    \"\"\"\n\n    plaintext = ''\n\n    for key, value in attributes.items():\n    \tplaintext += u'%s=%s\\n' % (key, value)\n\n    plaintext = plaintext.encode('utf-8')\n\n    # Instantiate an SMIME object.\n    s = SMIME.SMIME()\n\n    # Load signer's key and cert. Sign the buffer.\n    s.pkey = EVP.load_key_string(sitesettings.tenthrow_private_key)\n    s.x509 = X509.load_cert_string(\n    \tsitesettings.tenthrow_public_cert)\n\n    #s.load_key_bio(BIO.openfile(settings.MY_KEYPAIR),\n    # \t\t\tBIO.openfile(settings.MY_CERT))\n\n    p7 = s.sign(BIO.MemoryBuffer(plaintext),\n    \tflags=SMIME.PKCS7_BINARY)\n\n    # Load target cert to encrypt the signed message to.\n    #x509 = X509.load_cert_bio(BIO.openfile(settings.PAYPAL_CERT))\n    x509 = X509.load_cert_string(sitesettings.paypal_public_cert)\n\n    sk = X509.X509_Stack()\n    sk.push(x509)\n    s.set_x509_stack(sk)\n\n    # Set cipher: 3-key triple-DES in CBC mode.\n    s.set_cipher(SMIME.Cipher('des_ede3_cbc'))\n\n    # Create a temporary buffer.\n    tmp = BIO.MemoryBuffer()\n\n    # Write the signed message into the temporary buffer.\n    p7.write_der(tmp)\n\n    # Encrypt the temporary buffer.\n    p7 = s.encrypt(tmp, flags=SMIME.PKCS7_BINARY)\n\n    # Output p7 in mail-friendly format.\n    out = BIO.MemoryBuffer()\n    p7.write(out)\n\n    return out.read()\n\n    ```", "```py\n    {{from applications.tenthrow.modules.crypt import * }}\n\n    {{ \t\tattributes = {\"cert_id\":sitesettings.paypal_cert_id,\n    \t\"cmd\":\"_cart\",\n    \t\"business\":sitesettings.cart_business,\n    \t\"add\":\"1\",\n    \t\"custom\":auth.user.id,\n    \t\"item_name\":artist_name + \": \" + song['name'],\n    \t\"item_number\":\"song-\"+str(song['cue_point_id']),\n    \t\"amount\":song['cost'],\n    \t\"currency_code\":\"USD\",\n    \t\"shopping_url\":full_url('http',r=request,args=request.args),\n    \t\"return\":full_url('https', r=request, c='account', \\\n    \tf='alldownloads'),\n       }\n    \tencattrs = paypal_encrypt(attributes, sitesettings)\n      }}\n      <form target=\"_self\"\n    \taction=\"{{=sitesettings.cart_url}}\" method=\"post\"\n    \tname=\"song{{=song['cue_point_id']}}\">\n    \t<!-- Identify your business so that you can collect the\n    \t\tpayments. -->\n    \t<input type=\"hidden\" name=\"cmd\" value=\"_s-xclick\"\n    \t\tclass=\"unform\"/>\n    \t<input type=\"hidden\" name=\"encrypted\" value=\"{{=encattrs}}\"\n    \t\tclass=\"unform\"/>\n    \t<a onclick=\"document.song{{=song['cue_point_id']}}.submit()\"\n    \t\tclass=\"trBtn\">\n    \t\t<img src=\"img/trIconDL.png')}}\"\n    \t\t\talt=\"Download {{=(song['name'])}}\" class=\"original\"/>\n    \t\t<img src=\"img/trIconDL_Hover.png')}}\"\n    \t\t\talt=\"Download {{=(song['name'])}}\" class=\"hover\"/>\n    \t</a>\n    \t<img alt=\"\" border=\"0\" width=\"1\" height=\"1\"\n    \t\tsrc=\"img/pixel.gif\"\n    \t\tclass=\"unform\"/>\n      </form>\n\n    ```", "```py\n    def full_url(scheme=\"http\",\n    \ta=None,\n    \tc=None,\n    \tf=None,\n    \tr=None,\n    \targs=[],\n    \tvars={},\n    \tanchor='',\n    \tpath = None\n    ):\n    \t\"\"\"\n    \t\tCreate a fully qualified URL. The URL will use the same host\n    \t\tthat the request\n    \t\twas made from, but will use the specified scheme.\n    \t\tCalls\n    \t\tC{gluon.html.URL()} to construct the relative path to the\n    \t\thost.\n\n    \t\tif <scheme>_port is set in the settings table, append the port\n    \t\tto the domain of the created URL\n\n    \t\t@param scheme: scheme to use for the fully-qualified URL.\n    \t\t\t(default to 'http')\n    \t\t@param a: application (default to current if r is given)\n    \t\t@param c: controller (default to current if r is given)\n    \t\t@param f: function (default to current if r is given)\n    \t\t@param r: request\n    \t\t@param args: any arguments (optional)\n    \t\t@param vars: any variables (optional)\n    \t\t@param anchor: anchorname, without # (optional)\n    \t\t@param path: the relative path to use. if used overrides\n    \t\t\ta,c,f,args, and\n    \t\t\tvars (optional)\n    \t\"\"\"\n    \tport = ''\n    \tif sitesettings.has_key(scheme+\"_port\") and\n    \t\tsitesettings[scheme+\"_port\"]:\n    \t\t\tport = \":\" + sitesettings[scheme+\"_port\"]\n    \t\tif scheme == 'https' and sitesettings.has_key(\"https_scheme\"):\n    \t\t\tscheme = sitesettings.https_scheme\n    \t\turl = scheme +'://' + \\\n    \t\t\tr.env.http_host.split(':')[0] + port\n    \t\tif path:\n    \t\t\turl = url + path\n    \t\telse:\n    \t\t\turl = url+URL(a=a, c=c, f=f, r=r, args=args, vars=vars,\n    \t\t\t\tanchor=anchor)\n    \t\treturn url\n\n    ```", "```py\n    from applications.app.modules.openanything import *\n\n    def ipn():\n    \t\"\"\"\n    \tThis controller processes Instant Payment Notifications from\n    \tPayPal.\n    \tIt will verify messages, and process completed cart transaction\n    \tmessages\n    \tonly. all other messages are ignored for now.\n\n    \tFor each item purchased in the cart, the song_purchases table\n    \twill be\n    \tupdated with the purchased item information, allowing the user \n    \tto\n    \tdownload the item.\n\n    \tlogs are written to /tmp/ipnresp.txt\n\n    \tthe PayPal IPN documentation is available at:\n    \thttps://cms.paypal.com/cms_content/US/en_US/files/developer/\n    \t\tIPNGuide.pdf\n    \t\"\"\"\n    \t\"\"\"\n    \tsample PayPal IPN call:\n\n    \tlast_name=Smith&\n    \ttxn_id=597202352&\n    \treceiver_email=seller%40paypalsandbox.com&\n    \tpayment_status=Completed&tax=2.02&\n    \tmc_gross1=12.34&\n    \tpayer_status=verified&\n    \tresidence_country=US&\n    \tinvoice=abc1234&\n    \titem_name1=something&\n    \ttxn_type=cart&\n    \titem_number1=201&\n    \tquantity1=1&\n    \tpayment_date=16%3A52%3A59+Jul.+20%2C+2009+PDT&\n    \tfirst_name=John&\n    \tmc_shipping=3.02&\n    \tcharset=windows-1252&\n    \tcustom=3&\n    \tnotify_version=2.4&\n    \ttest_ipn=1&\n    \treceiver_id=TESTSELLERID1&\n    \tbusiness=seller%40paypalsandbox.com&\n    \tmc_handling1=1.67&\n    \tpayer_id=TESTBUYERID01&\n    \tverify_sign=AFcWxV21C7fd0v3bYYYRCpSSRl31AtrKNnsnrW3-8M8R-\n    \t\tP38QFsqBaQM&\n    \tmc_handling=2.06&\n    \tmc_fee=0.44&\n    \tmc_currency=USD&\n    \tpayer_email=buyer%40paypalsandbox.com&\n    \tpayment_type=instant&\n    \tmc_gross=15.34&\n    \tmc_shipping1=1.02\n    \"\"\"\n\n    #@todo: come up with better logging mechanism\n    logfile = \"/tmp/ipnresp.txt\"\n\n    verifyurl = \"https://www.paypal.com/cgi-bin/webscr\"\n    if request.vars.test_ipn != None and request.vars.test_ipn ==\n    \t'1':\n    \tverifyurl = \"https://www.sandbox.paypal.com/cgi-bin/webscr\"\n\n    \tparams = dict(request.vars)\n    \tparams['cmd'] = '_notify-validate'\n    \tresp = fetch(verifyurl, post_data=params)\n\n    #the message was not verified, fail\n    if resp['data'] != \"VERIFIED\":\n    \t#@todo: figure out how to fail\n    \tf = open(logfile, \"a\")\n    \tf.write(\"Message not verified:\\n\")\n    \tf.write(repr(params) + \"\\n\\n\")\n    \tf.close()\n    \treturn None\n    ...\n    if request.vars.txn_type != \"cart\":\n    \t#for now ignore non-cart transaction messages\n    \tf = open(logfile, \"a\")\n    \tf.write(\"Not a cart message:\\n\")\n    \tf.write(repr(params) + \"\\n\\n\")\n    \tf.close()\n    \treturn None\n    ...\n    if request.vars.payment_status != 'Completed':\n    \t#ignore pending transactions\n    \tf = open(logfile, \"a\")\n    \tf.write(\"Ignore pending transaction:\\n\")\n    \tf.write(repr(params) + \"\\n\\n\")\n    \tf.close()\n    \treturn None\n    ...\n    #check id not recorded\n    if len(db(db.song_purchases.transaction_id==request.\n    \tvars.txn_id).select())>0:\n    \t#transaction already recorded\n    \tf = open(logfile, \"a\")\n    \tf.write(\"Ignoring recorded transaction:\\n\")\n    \tf.write(repr(params) + \"\\n\\n\")\n    \tf.close()\n    \treturn None\n\n    \t\t#record transaction\n    \t\tnum_items = 1\n    \t\tif request.vars.num_cart_items != None:\n    \t\t\tnum_items = request.vars.num_cart_items\n\n    \t\tfor i in range(1, int(num_items)+1):\n    \t\t\t#i coded our item_number to be a tag and an ID. the ID is\n    \t\t\t# a key to a table in our database.\n    \t\t\ttag, id = request.vars['item_number'+str(i)].split(\"-\")\n    \t\t\tif tag == \"song\":\n    \t\t\t\tdb.song_purchases.insert(auth_user=request.vars.custom,\n    \t\t\t\tcue_point=id,\n    \t\t\t\ttransaction_id=request.vars.txn_id,\n    \t\t\t\tdate=request.vars.payment_date.replace('.', ''))\n\n    \t\t\telif tag == \"song_media\":\n    \t\t\t\tdb.song_purchases.insert(auth_user=request.vars.custom,\n    \t\t\t\t\tsong_media=id,\n    \t\t\t\t\ttransaction_id=request.vars.txn_id,\n    \t\t\t\t\tdate=request.vars.payment_date.replace('.', ''))\n\n    \t\t\telif tag == \"concert\":\n    \t\t\t\tdb.concert_purchases.insert(auth_user=request.vars.custom,\n    \t\t\t\t\tplaylist=id,\n    \t\t\t\t\ttransaction_id=request.vars.txn_id,\n    \t\t\t\t\tdate=request.vars.payment_date.replace('.', ''))\n    \t\t\telse:\n    \t\t\t\t#@TODO: this is an error, what should we do here?\n    \t\t\t\tf = open(logfile, \"a\")\n    \t\t\t\tf.write(\"Ignoring bad item number: \" + \\\n    \t\t\t\t\trequest.vars['item_number'+str(i)] + \"\\n\")\n    \t\t\t\tf.write(repr(params) + \"\\n\\n\")\n    \t\t\t\tf.close()\n\n    \t\tf = open(logfile, \"a\")\n    \t\tf.write(\"Processed message:\\n\")\n    \t\tf.write(repr(params) + \"\\n\\n\")\n    \t\tf.close()\n    \treturn None\n\n    ```", "```py\n    def plugin_flickr(key, photoset=None, per_page=15, page=1):\n    \tfrom urllib2 import urlopen\n    \tfrom xml.dom.minidom import parse as domparse\n    \tapiurl = 'http://api.flickr.com/services/rest/?method=flickr.\n    \t\tphotosets.getPhotos&api_key=%(apikey)s&photoset_id=\n    \t\t%(photoset)s&privacy_filter=1&per_page=%(per_page)s&page=\n    \t\t%(page)s&extras=url_t,url_m,url_o,url_sq'\n\n    \tdom = domparse(urlopen(apiurl % dict(photoset=photoset,\n    \t\tper_page=per_page, page=page, apikey=key)))\n\n    \tphotos = []\n\n    \tfor node in dom.getElementsByTagName('photo'):\n    \t\tphotos.append({\n    \t\t'id':node.getAttribute('id'),\n    \t\t'title':node.getAttribute('title'),\n    \t\t'thumb':node.getAttribute('url_t'),\n    \t\t'medio':node.getAttribute('url_m'),\n    \t\t'original':node.getAttribute('url_o'),\n    \t\t'square':node.getAttribute('url_sq'),\n    \t\t})\n\n    \treturn photos\n\n    ```", "```py\n    def testflickr():\n    \tphotos = plugin_flickr(\n    \t\tkey='YOUR_API_KEY',\n    \t\tphotoset='THE_PHOTOSET_ID',\n    \t\tper_page=15,\n    \t\tpage=1)\n    \treturn dict(photos=photos)\n\n    ```", "```py\n    {{extend 'layout.html'}}\n\n    {{for photo in photos:}}\n    \t{{=IMG(_src=photo['square'])}}\n    {{pass}}\n\n    ```", "```py\nfrom boto.ses.connection import SESConnection\n\tdef verify_email_address():\n\t\tconn = SESConnection('', '')\n\t\tm = conn.verify_email_address('myemail@address.com')\n\n```", "```py\ndef test_send_emails():\n\taws_key = 'YOUR_AWS_KEY'\n\taws_secret_key = 'YOUR_SECRET_KEY'\n\tfrom boto.ses.connection import SESConnection\n\tconn = SESConnection(aws_key, aws_secret_key)\n\treturn conn.send_email(source='myemail@address.com',\n\t\tsubject='Subject',\n\t\tbody='Body.',\n\t\tto_addresses='recipient@email.com',\n\t\tcc_addresses=None,\n\t\tbcc_addresses=None,\n\t\tformat='text',\n\t\treply_addresses=None,\n\t\treturn_path=None)\n\n```", "```py\neasy_install mapscript\n\n```", "```py\nMAP\n\tNAME \"sample\"\n\tEXTENT -180 -90 180 90 # Geographic\n\tSIZE 800 400\n\tIMAGECOLOR 128 128 255\nEND # MAP\n\n```", "```py\ndef wxs():\n\timport mapscript\n\timport os\n\tpath_map = os.path.join(request.folder, 'private', request.args(0))\n\tif not request.vars:\n\t\treturn ''\n\treq = mapscript.OWSRequest()\n\tfor v in request.vars:\n\t\treq.setParameter(v, request.vars[v])\n\n\tmap = mapscript.mapObj(path_map)\n\tmapscript.msIO_installStdoutToBuffer()\n\tmap.OWSDispatch(req)\n\n\tcontent_type = mapscript.msIO_stripStdoutBufferContentType()\n\tcontent = mapscript.msIO_getStdoutBufferBytes()\n\tresponse.header = \"Content-Type\",\"%s; charset=utf-8\"%content_type\n\treturn content\n\n```", "```py\ndef plugin_feedreader(name, source='google-group'):\n\t\"\"\"parse group feeds\"\"\"\n\tfrom gluon.contrib import feedparser\n\tif source=='google-group':\n\t\tURL = \"http://groups.google.com/group/%(name)s/\n\t\t\tfeed/rss_v2_0_msgs.xml\"\n\n\telif source=='google-code':\n\t\tURL = \"http://code.google.com/feeds/p/%(name)s/hgchanges/basic\"\n\n\telse:\n\t\tURL = source\n\n\turl = URL % dict(name=name)\n\tg = feedparser.parse(url)\n\thtml = UL(*[LI(A(entry['title'],_href=entry['link']))\\\n\t\tfor entry in g['entries'][0:5]])\n\treturn XML(html)\n\n```", "```py\n{{=plugin_feedreader('web2py', source='google-group')}}\n\n```", "```py\n{{=plugin_feedreader('web2py', source='google-code')}}\n\n```", "```py\nfrom gluon.tools import Service\nservice = Service(globals())\n\n@service.xmlrpc\n@service.soap('AddStrings',returns={'AddResult':str},\n\t\t\t\t\t\t\targs={'a':str, 'b':str})\n\n@service.soap('AddIntegers',returns={'AddResult':int},\n\t\t\t\t\t\t\targs={'a':int, 'b':int})\ndef add(a,b):\n\t\"Add two values\"\n\treturn a+b\n\n@service.xmlrpc\n@service.soap('SubIntegers',returns={'SubResult':int},\n\t\t\t\t\t\t\targs={'a':int, 'b':int})\ndef sub(a,b):\n\t\"Substract two values\"\n\treturn a-b\n\ndef call():\n\treturn service()\n\n```", "```py\nWelcome to Web2Py SOAP webservice gateway\n\nThe following operations are available\n\nSee WSDL for webservice description\n\nAddIntegers: Add two values\nSubIntegers: Substract two values\nAddStrings: Add two values\nNotes: WSDL is linked to URL retriving the full xml. Each operation\nis linked to its help page.\n\n```", "```py\nAddIntegers\n\nAdd two values\n\nLocation: http://127.0.0.1:8000//webservices/sample/call/soap\nNamespace: http://127.0.0.1:8000/webservices/sample/soap\nSoapAction?: -N/A by now-\nSample SOAP XML Request Message:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<soap:Envelope\n\t>\n\t<soap:Body>\n\t\t<AddIntegers\n\t\t\t>\n\t\t<a>\n\t\t\t<!--integer-->\n\t\t</a>\n\t\t<b>\n\t\t\t<!--integer-->\n\t\t</b>\n\t</AddIntegers>\n\t</soap:Body>\n</soap:Envelope>\nSample SOAP XML Response Message:\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\t<soap:Envelope\n\t\t>\n\t<soap:Body>\n\t\t<AddIntegersResponse\n\t\t\t>\n\t\t\t<AddResult>\n\t\t\t\t<!--integer-->\n\t\t\t</AddResult>\n\t\t</AddIntegersResponse>\n\t</soap:Body>\n</soap:Envelope>\n\n```", "```py\ndef test_soap_sub():\nfrom gluon.contrib.pysimplesoap.client import SoapClient, SoapFault\n# create a SOAP client\nclient = SoapClient(wsdl=\"http://localhost:8000/webservices/\n\tsample/call/soap?WSDL\")\n\n# call SOAP method\nresponse = client.SubIntegers(a=3,b=2)\n\ntry:\n\tresult = response['SubResult']\n\nexcept SoapFault:\n\tresult = None\nreturn dict(xml_request=client.xml_request,\n\txml_response=client.xml_response,\n\tresult=result)\n\n```", "```py\n{{extend 'layout.html'}}\n{{for tag in body:}}\n{{=tag}}\n{{pass}}\n\n```"]