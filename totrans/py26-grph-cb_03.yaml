- en: Chapter 3. Handling Text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Simple text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text font type, size, and color
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placement of text north, south, east, and west
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Placement of text right and left justification
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Fonts available on your platform
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Text can be tricky. We need to be able to manipulate font family, size, color,
    and placement. Placement in turn requires that we specify where text must begin
    and what areas it should be confined to.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we focus on handling text on a canvas.
  prefs: []
  type: TYPE_NORMAL
- en: Simple text
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This is how to place text onto your canvas.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a text editor, type the code given in the following code.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save this as a file named `text_1.py`, inside the directory called `constr`
    again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: As before, open up an X terminal or DOS window if you are using MS Windows.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change directory into `constr` - where `text_1.py` is located.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Type `text_1.py` and your program should execute.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The results are given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3845_03_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Placing text exactly where you want it on a screen can be tricky because of
    the way font height and inter-character spacing as well as the text window dimensions
    all interfere with each other. You will probably have to spend a bit of time experimenting
    to get your text as you want it.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Text placed onto a canvas offers a useful alternative to the often used `print`
    function as a debugging tool. You can send the values of many variables for display
    onto a canvas and watch their values change.
  prefs: []
  type: TYPE_NORMAL
- en: As will be demonstrated in the chapter on animation, the easiest way of observing
    the interaction of complex numerical relationships is to animate them in some
    way.
  prefs: []
  type: TYPE_NORMAL
- en: Text font type, size, and color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In a very similar manner to the way attributes are specified for lines and shapes,
    font type, size, and color are governed by the attributes of the `create_text()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nothing needed here.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The instructions used in recipe 1 should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Just use the name `4color_text.py` when you write, save, and execute this program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The results are given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3845_03_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A difficulty in specifying fonts is deciding which fonts are best for your needs.
    Once you have selected a font, you may discover that your particular operating
    system does not support that font. Fortunately, the designers of Tkinter made
    it somewhat bulletproof by causing it to select a suitable default font if the
    one you specified was not available.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Placement of text north, south, east, west.
  prefs: []
  type: TYPE_NORMAL
- en: 'We place text on a canvas using the position specifiers that Tkinter has available.
    Anchor positions, text x, y location, font size, column width, and text justification
    all interact to control the appearance of text on the page. The following screenshot
    shows the compass nomenclature used in positioning the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3845_03_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Getting ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Placing text onto a canvas is tricky until we understand the navigation system
    that Tkinter uses. Here is how it works. All text goes into an invisible box.
    The box is like an empty picture frame placed over a nail on a board. The Tkinter
    canvas is the board and the empty frame is the box that the text we type is going
    to fit inside. The nail is the x and y location. The empty frame can be moved
    so that the nail is in the top left-corner (North-West) or the bottom right (South-East)
    or in the center or the other corners or sides. The following screenshot shows
    the imaginary frame on the canvas that contains the text:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Getting ready](img/3845_03_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Execute the code and observe how the various text position specifiers
  prefs: []
  type: TYPE_NORMAL
- en: control the appearance of the text.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The results are given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3845_03_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Alignment of text left and right justify
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We now concentrate particularly on how the justification of the text in columns
    interacts with column anchor positions.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following code contains a paragraph that is much too long to fit onto a
    single line. This is where we see how the term justify lets us decide whether
    we want the text to line up to the right of the column or to its left or perhaps
    even the center. The column width, in pixels, is specified and then the text is
    made to fit.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Run the following code and observe that the height of the column is only confined
    by the height of the canvas but the width, anchor position, justification, and
    font size determine how the text gets laid out on the canvas.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The interaction of column width, anchor position, and justification are complex
    and the clearest way to explain the results is with annotated pictures of the
    canvas display resulting from execution. The following screenshot shows Top-right
    (NE) ANCHOR POINT, no justification specified (default LEFT justification).
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3845_03_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the Top-right(SE)ANCHOR POINT, no justification
    specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3845_03_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The following screenshot shows the Bottom-right (SE) ANCHOR POINT, CENTER justification
    specified:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3845_03_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: All the fonts available on your computer
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Discover what fonts are available on your particular computer and then print
    a sample of each in the default size, all in alphabetic order.
  prefs: []
  type: TYPE_NORMAL
- en: One solution to the problem of choosing a suitable font is to conduct a trustworthy
    procedure to catalog what fonts are available on the platform you are using and
    print an example of each type onto the screen. This is what the next example does.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The instructions used in recipe 1 should be used.
  prefs: []
  type: TYPE_NORMAL
- en: Just use the name `fonts_available.py` when you write, save, and execute this
    program.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The results are given in the following screenshot showing all fonts available
    to Python on a specific operating system.
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/3845_03_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This program is very useful when you want to select pleasing and suitable fonts.
    Fonts available can vary significantly from platform to platform. So here we make
    use of the `families()` method belonging to the **tkFont** module to put the names
    of the font families into a list named `fonts_available`. The list is sorted into
    alphabetic order using `fonts_available.sort()`.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, two handy things have been used.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, the list of fonts has been made neat by anchoring the text to the west
    or left side by use of the `anchor= "w"` attribute of the `create_text` method.
  prefs: []
  type: TYPE_NORMAL
- en: Secondly, it is the very useful `len()` function in `len(fonts_available)`.
  prefs: []
  type: TYPE_NORMAL
- en: This function gives back to you ("returns" in programming parlance) the number
    of items in a list. It is very handy when defining how many times a for loop iteration
    should go on for when you have no idea what that number is going to be. In this
    example we need to write the name of a font and a text sample for each font name
    in a list that has not yet been discovered when we write the code.
  prefs: []
  type: TYPE_NORMAL
