["```py\n    Flask-Caching==1.7.2\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Installing collected packages: Flask-Caching\n    Successfully installed Flask-Caching-1.7.2\n    ```", "```py\n    from flask_caching import Cache\n    cache = Cache()\n    ```", "```py\n    from extensions import db, jwt, image_set, cache\n    ```", "```py\n    def register_extensions(app):\n        db.app = app\n        db.init_app(app)\n        migrate = Migrate(app, db)\n        jwt.init_app(app)\n        configure_uploads(app, image_set)\n        patch_request_class(app, 10 * 1024 * 1024)\n        cache.init_app(app)\n    ```", "```py\n    CACHE_TYPE = 'simple' \n    CACHE_DEFAULT_TIMEOUT = 10 * 60\n    ```", "```py\n    from extensions import image_set, cache\n    ```", "```py\n    class RecipeListResource(Resource):\n        @use_kwargs({'q': fields.Str(missing=''),\n                                    'page': fields.Int(missing=1),\n                                    'per_page': fields.Int(missing=20),\n                                    'sort': fields.Str(missing='created_at'),\n                                    'order': fields.Str(missing='desc')})\n        @cache.cached(timeout=60, query_string=True)\n        def get(self, q, page, per_page, sort, order):\n    ```", "```py\n        def get(self, q, page, per_page, sort, order):\n            print('Querying database...')\n    ```", "```py\n    @app.before_request\n        def before_request():\n            print('\\n==================== BEFORE REQUEST ====================\\n')\n            print(cache.cache._cache.keys())\n            print('\\n=======================================================\\n')\n        @app.after_request\n        def after_request(response):\n            print('\\n==================== AFTER REQUEST ====================\\n')\n            print(cache.cache._cache.keys())\n            print('\\n=======================================================\\n')\n            return response\n    ```", "```py\n    from extensions import image_set, cache\n    ```", "```py\n    def clear_cache(key_prefix):\n        keys = [key for key in cache.cache._cache.keys() if key.startswith(key_prefix)]\n        cache.delete_many(*keys)\n    ```", "```py\n    from utils import clear_cache\n    ```", "```py\n    clear_cache('/recipes')\n    ```", "```py\n    from utils import generate_token, verify_token, save_image, clear_cache\n    ```", "```py\n    clear_cache('/recipes')\n    ```", "```py\n    { \n        \"num_of_servings\": 10, \n        \"cook_time\": 100 \n    } \n    ```", "```py\n{ \n    \"errors\": \"Too Many Requests\" \n}\n```", "```py\n[count] [per|/] [n (optional)] [second|minute|hour|day|month|year]\n```", "```py\n100 per minute\n100/minute\n100/minute;1000/hour;5000/day\n```", "```py\n    Flask-Limiter==1.0.1\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Installing collected packages: limits, Flask-Limiter\n      Running setup.py install for limits ... done\n      Running setup.py install for Flask-Limiter ... done\n    Successfully installed Flask-Limiter-1.0.1 limits-1.3\n    ```", "```py\n    from flask_limiter import Limiter\n    from flask_limiter.util import get_remote_address\n    limiter = Limiter(key_func=get_remote_address)\n    ```", "```py\n    from extensions import db, jwt, image_set, cache, limiter\n    ```", "```py\n        limiter.init_app(app)\n    ```", "```py\n    RATELIMIT_HEADERS_ENABLED = True\n    ```", "```py\n    from extensions import image_set, cache,  limiter\n    ```", "```py\n    class RecipeListResource(Resource):\n        decorators = [limiter.limit('2 per minute', methods=['GET'], error_message='Too Many Requests')]\n    ```", "```py\n    from flask import Flask, request\n    ```", "```py\n        @limiter.request_filter\n        def ip_whitelist():\n            return request.remote_addr == '127.0.0.1'\n    ```"]