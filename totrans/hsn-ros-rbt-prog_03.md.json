["```py\nmy_gopigo.drive_cm(10)\n```", "```py\nmy_gopigo.drive_inches(10)\n```", "```py\nmy_gopigo.drive_cm(10)\nmy_gopigo.drive_inches(10)\n```", "```py\n# Forward\nmy_gopigo.drive_cm(10)\nmy_gopigo.drive_inches(10)\n\n# Backward\nmy_gopigo.drive_cm(-10)\nmy_gopigo.drive_inches(-10)\n```", "```py\n# Forward\nmy_gopigo.drive_cm(+35.4)\n\n# Backward\nmy_gopigo.drive_cm(-35.4)\n```", "```py\n# Turn clockwise (right)\nmy_gopigo.turn_degrees(90)\n\n# Turn counterclockwise (left)\nmy_gopigo.turn_degrees(-90)\n```", "```py\nmy_gopigo.forward()\nmy_gopigo.backward()\nmy_gopigo.right()\nmy_gopigo.left()\n```", "```py\nmy_gopigo.stop()\n```", "```py\nmy_gopigo.forward()\nmy_gopigo.backward()\nmy_gopigo.right()\nmy_gopigo.left()\n```", "```py\nmy_gopigo.drive_cm(-10) # Forward\nmy_gopigo.drive_cm(10) # Backward\nmy_gopigo.turn_degrees(90) # Right (clockwise)\nmy_gopigo.turn_degrees(-90) # Left (counterclockwise)\n```", "```py\nprint(\"Battery voltage : \", GPG.get_voltage_battery() )\n\nOUTPUT ===> Battery voltage : 9.114\n```", "```py\nprint(\"Manufacturer : \", GPG.get_manufacturer() )\nprint(\"Board : \", GPG.get_board() )\nprint(\"Serial Number : \", GPG.get_id() )\nprint(\"Hardware version: \", GPG.get_version_hardware())\nprint(\"Firmware version: \", GPG.get_version_firmware())\nprint(\"Battery voltage : \", GPG.get_voltage_battery() )\nprint(\"5v voltage : \", GPG.get_voltage_5v() )\n\nOUTPUT ===> \nManufacturer    :  Dexter Industries\nBoard           :  GoPiGo3\nSerial Number   :  F92DD433514E343732202020FF112535\nHardware version:  3.x.x\nFirmware version:  1.0.0\nBattery voltage :  9.294\n5v voltage      :  4.893\n```", "```py\ncolors = [ (255,0,0), (255,255,0), (255,255,255), (0,255,0), (0,255,255), (0,0,255), (0,0,0)]\nfor color in colors:\n    GPG.set_eye_color(color)\n    GPG.open_eyes()\n    time.sleep(0.5)\n```", "```py\nfor i in range(5):\n GPG.led_on(\"left\")\n GPG.led_on(\"right\")\n time.sleep(0.5)\n GPG.led_off(\"left\")\n GPG.led_off(\"right\")\n time.sleep(0.5)\n```", "```py\nGPG.set_motor_dps(GPG.MOTOR_LEFT | GPG.MOTOR_RIGHT, 100)\nstart = time.time()\nlapse = 0\n\nwhile lapse < 5:\n   lapse = time.time() - start\n   time.sleep(0.5)\n   print(\"LEFT: {} RIGHT:{}\".format(GPG.get_motor_status(GPG.MOTOR_LEFT),GPG.get_motor_status(GPG.MOTOR_RIGHT)))\n\npassed_test = GPG.get_motor_status(GPG.MOTOR_LEFT)[0]==0 and GPG.get_motor_status(GPG.MOTOR_RIGHT)[0]==0\nGPG.set_motor_dps(GPG.MOTOR_LEFT | GPG.MOTOR_RIGHT, 0)\n\nif passed_test:\n   print(\"Test passed.\")\nelse:\n   print(\"Test failed.\")\n```", "```py\nLEFT: [0, 26, 3095, 101]  RIGHT:[0, 26, 4806, 101]\nLEFT: [0, 26, 3146, 101]  RIGHT:[0, 28, 4856, 101]\nLEFT: [0, 26, 3196, 101]  RIGHT:[0, 28, 4906, 101]\nLEFT: [0, 26, 3246, 101]  RIGHT:[0, 26, 4957, 96]\nLEFT: [0, 26, 3296, 101]  RIGHT:[0, 26, 5007, 101]\nLEFT: [0, 26, 3347, 101]  RIGHT:[0, 28, 5057, 101]\nLEFT: [0, 24, 3397, 105]  RIGHT:[0, 26, 5107, 96]\nLEFT: [0, 21, 3447, 96]  RIGHT:[0, 26, 5158, 101]\nLEFT: [0, 26, 3497, 101]  RIGHT:[0, 21, 5208, 101]\nLEFT: [0, 28, 3547, 96]  RIGHT:[0, 28, 5258, 96]\nLEFT: [0, 33, 3598, 101]  RIGHT:[0, 33, 5308, 101]\nTest passed.\n```", "```py\nGPG.reset_encoders()\n#GPG.set_speed(GPG.DEFAULT_SPEED)\nGPG.drive_cm(10)\nencoders_read = round(GPG.read_encoders_average())\nprint(\"Drove {:.2f} cm\".format(encoders_read))\nif encoders_read == 10:\n print(\"Test passed.\")\nelse:\n print(\"Test failed.\")\n```", "```py\nDrove 10.00 cm Test passed.\n```", "```py\n$ git clone https://github.com/PacktPublishing/Hands-On-ROS-for-Robotics-Programming\n$ cd Hands-On-ROS-for-Robotics-Programming/Chapter2_Unit_Tests\n```", "```py\n$ cd./Chapter2_Unit_Tests/drivingAround\n$ python <name_of_script.py>\n```", "```py\n# import the time library for the sleep function\nimport time\n# import the GoPiGo3 drivers\nfrom easygopigo3 import EasyGoPiGo3\n\n# Create an instance of the GoPiGo3 class.\n# GPG will be the GoPiGo3 object.\ngpg = EasyGoPiGo3()\n\nprint(\"Move the motors forward freely for 1 second.\")\ngpg.forward()\ntime.sleep(1)\ngpg.stop()\nprint(\"Stop the motors for 1 second.\")\ntime.sleep(1)\n```", "```py\nprint(\"Drive the motors 50 cm and then stop.\")\ngpg.drive_cm(50, True)\ntime.sleep(1)\n\nprint(\"Turn right 1 second.\")\ngpg.right()\ntime.sleep(1)\nprint(\"Turn left 1 second.\")\ngpg.left()\ntime.sleep(1)\n\nprint(\"Stop!\")\ngpg.stop()\nprint(\"Done!\")\n```", "```py\nfrom easygopigo3 import EasyGoPiGo3\n\ngpg = EasyGoPiGo3()\nlength = 30\n\nfor i in range(4):\n  gpg.drive_cm(length) # drive forward for length cm\n  gpg.turn_degrees(90) # rotate 90 degrees to the right\n```", "```py\nfrom easygopigo3 import EasyGoPiGo3\n\ngpg = EasyGoPiGo3()\n\ngpg.orbit(180, 50) # draw half a circle\ngpg.turn_degrees(180) # rotate the GoPiGo3 around\ngpg.orbit(-180, 50) # return on the initial path\ngpg.turn_degrees(180) # and put it in the initial position\n```", "```py\nfrom easygopigo3 import EasyGoPiGo3\n\ngpg = EasyGoPiGo3()\nradius = 30\n\ngpg.orbit(-270, radius) # to rotate to the left\ngpg.drive_cm(radius * 2) # move forward\ngpg.orbit(270, radius) # to rotate to the right\ngpg.drive_cm(radius * 2) # move forward\n```", "```py\nfrom easygopigo3 import EasyGoPiGo3\nfrom time import time, sleep\n\ngpg = EasyGoPiGo3()\n\n# setting speed to lowest value and calculating the step increase in speed\ncurrent_speed = 50\nend_speed = 400 step = (end_speed - current_speed) / 20\ngpg.set_speed(current_speed) # start moving the robot at an ever increasing speed\ngpg.forward()\nwhile current_speed <= end_speed:\n  sleep(0.1)\n gpg.set_speed(current_speed)\n  current_speed += step # and then stop it\ngpg.stop() \n```", "```py\n$ cd./Chapter2_Unit_Tests/DI-distance\n$ python <script.py>\n```", "```py\n# import the modules\nfrom di_sensors.easy_distance_sensor import EasyDistanceSensor\nfrom time import sleep\n\n# instantiate the distance object\nmy_sensor = EasyDistanceSensor()\n\n# and read the sensor iteratively\nwhile True:\n  read_distance = my_sensor.read()\n  print(\"distance from object: {} cm\".format(read_distance))\n\n  sleep(0.1)\n```", "```py\n# import the GoPiGo3 drivers\nimport time\nimport easygopigo3 as easy\n\n# This example shows how to read values from the Distance Sensor\n\n# Create an instance of the GoPiGo3 class.\n# GPG will be the GoPiGo3 object.\ngpg = easy.EasyGoPiGo3()\n\n# Create an instance of the Distance Sensor class.\n# I2C1 and I2C2 are just labels used for identifyng the port on the GoPiGo3 board.\n# But technically, I2C1 and I2C2 are the same thing, so we don't have to pass any port to the constructor.\nmy_distance_sensor = gpg.init_distance_sensor()\n\nwhile True:\n    # Directly print the values of the sensor.\n print(\"Distance Sensor Reading (mm): \" + str(my_distance_sensor.read_mm()))\n```", "```py\nimport easysensors\n...\ntry:\n from di_sensors import easy_distance_sensor\n```", "```py\neasygopigo3.EasyGoPiGo3.init_distance_sensor([port])\n```", "```py\nimport easygopigo3 as easy\ngpg = easy.EasyGoPiGo3()\nmy_distance_sensor = gpg.init_distance_sensor()\n```", "```py\nmy_distance_sensor.read_mm()\n```", "```py\ndi_sensors.easy_distance_sensor.EasyDistanceSensor([…])\n```", "```py\nfrom di_sensors.easy_distance_sensor import EasyDistanceSensor\nmy_sensor = EasyDistanceSensor()\n```", "```py\nread_distance = my_sensor.read()\n\n```", "```py\nfrom di_sensors.distance_sensor import DistanceSensor my_sensor = DistanceSensor()\nread_distance = my_sensor.read()\n\n```", "```py\nimport easygopigo3 as easy\nmy_gpg3 = easy.EasyGoPiGo3()\n```", "```py\nservo = my_gpg3.init_servo()\n```", "```py\nservo.rotate_servo(0)   # This is 0º position\nservo.rotate_servo(180) # This is 180º position\n```", "```py\nservo.rotate_servo(90)\n```", "```py\nservo.rotate_servo(95)\n```", "```py\nservo.rotate_servo(30)\nservo.rotate_servo(160)\n```", "```py\nwith picamera.PiCamera() as camera:\n camera.resolution = (640, 480)\n camera.capture(output, format = 'rgb', use_video_port = True)\n\nimg = Image.fromarray(output)\nimg.save(\"../photo.jpg\")\n\nplt.imshow(output)\n```", "```py\nimg = Image.open(\"../photo.jpg\")\nhistogram = img.histogram()\nplt.plot(histogram)\n```", "```py\n[key w ] : Move the GoPiGo3 forward\n[key s ] : Move the GoPiGo3 backward\n[key a ] : Turn the GoPiGo3 to the left\n[key d ] : Turn the GoPiGo3 to the right\n[key <SPACE> ] : Stop the GoPiGo3 from moving\n[key <F1> ] : Drive forward for 10 centimeters\n[key <F2> ] : Drive forward for 10 inches\n[key <F3> ] : Drive forward for 360 degrees (aka 1 wheel rotation)\n[key 1 ] : Turn ON/OFF left blinker of the GoPiGo3\n[key 2 ] : Turn ON/OFF right blinker of the GoPiGo3\n[key 3 ] : Turn ON/OFF both blinkers of the GoPiGo3\n[key 8 ] : Turn ON/OFF left eye of the GoPiGo3\n[key 9 ] : Turn ON/OFF right eye of the GoPiGo3\n[key 0 ] : Turn ON/OFF both eyes of the GoPiGo3\n[key <INSERT>] : Change the eyes' color on the go\n[key <ESC> ] : Exit\n```", "```py\nmy_gopigo.drive_cm(10)\nmy_gopigo.turn_degrees(90)\n```"]