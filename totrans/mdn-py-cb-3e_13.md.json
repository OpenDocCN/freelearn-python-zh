["```py\ndef load_config_file(config_path: Path) -> dict[str, Any]: \n\n    \"\"\"Loads a configuration mapping object with the contents \n\n    of a given file. \n\n    :param config_path: Path to be read. \n\n    :returns: mapping with configuration parameter value \n\n    \"\"\" \n\n    # Details omitted.\n```", "```py\n    from pathlib import Path \n\n    from collections import ChainMap \n\n    from typing import TextIO, Any\n    ```", "```py\n    def get_config() -> ChainMap[str, Any]:\n    ```", "```py\n     system_path = Path(\"/etc\") / \"some_app\" / \"config\" \n\n        local_paths = [ \n\n        \".some_app_settings\", \n\n        \".some_app_config\", \n\n        ]\n    ```", "```py\n     configuration_items = [ \n\n            dict( \n\n                some_setting=\"Default Value\", \n\n                another_setting=\"Another Default\", \n\n                some_option=\"Built-In Choice\", \n\n            ) \n\n        ]\n    ```", "```py\n     if system_path.exists(): \n\n            configuration_items.append( \n\n                load_config_file(system_path))\n    ```", "```py\n     for config_name in local_paths: \n\n            config_path = Path.home() / config_name \n\n            if config_path.exists(): \n\n                configuration_items.append( \n\n                    load_config_file(config_path)) \n\n                break\n    ```", "```py\n     configuration = ChainMap( \n\n            *reversed(configuration_items) \n\n        )\n    ```", "```py\nlocal_names = (’.some_app_settings’, ’.some_app_config’) \n\nconfig_paths = [ \n\n    [ \n\n        base / ’some_app’ / ’config’ \n\n        for base in (Path(’/etc’), Path(’/opt’)) \n\n    ], \n\n    [ \n\n        Path.home() / name \n\n        for name in local_names \n\n    ], \n\n    [ \n\n        Path.cwd() / name \n\n        for name in local_names \n\n    ], \n\n]\n```", "```py\ndef get_config_2() -> ChainMap[str, Any]: \n\n    configuration_items = [ \n\n        DEFAULT_CONFIGURATION \n\n    ] \n\n    for tier_paths in config_paths: \n\n        for alternative in tier_paths: \n\n            if alternative.exists(): \n\n                configuration_items.append( \n\n                    load_config_file(alternative)) \n\n                break \n\n    configuration = ChainMap( \n\n        *reversed(configuration_items) \n\n    ) \n\n    return configuration\n```", "```py\n[some_app] \n\n    option_1 = \"useful value\" \n\n    option_2 = 42 \n\n[some_app.feature] \n\n    option_1 = 7331\n```", "```py\n{’some_app’: {’feature’: {’option_1’: 7331}, \n\n              ’option_1’: ’useful value’, \n\n              ’option_2’: 42}}\n```", "```py\ndef load_config_file_draft(config_path: Path) -> dict[str, Any]: \n\n    \"\"\"Loads a configuration mapping object with contents \n\n    of a given file. \n\n    :param config_path: Path to be read. \n\n    :returns: mapping with configuration parameter values \n\n    \"\"\" \n\n    # Details omitted.\n```", "```py\n    from pathlib import Path \n\n    from typing import Any \n\n    import tomllib\n    ```", "```py\n    import tomllib \n\n    def load_config_file(config_path: Path) -> dict[str, Any]: \n\n        \"\"\"Loads a configuration mapping object with contents \n\n        of a given file. \n\n        :param config_path: Path to be read. \n\n        :returns: mapping with configuration parameter values \n\n        \"\"\" \n\n        with config_path.open(’b’) as config_file: \n\n            document = tomllib.load(config_file)\n    ```", "```py\n        document = tomllib.loads(config_path.read_text())\n    ```", "```py\nsome_app.option_1 = \"useful value\" \n\nsome_app.option_2 = 42 \n\nsome_app.feature.option_1 = 7331\n```", "```py\n[some_app] \n\n    option_1 = \"useful value\" \n\n    option_2 = 42 \n\n[some_app.feature] \n\n    option_1 = 7331\n```", "```py\n[project] \n\nname = \"python_cookbook_3e\" \n\nversion = \"2024.1.0\" \n\ndescription = \"All of the code examples for Modern Python Cookbook, 3rd Ed.\" \n\nreadme = \"README.rst\" \n\nrequires-python = \">=3.12\" \n\nlicense = {file = \"LICENSE.txt\"}\n```", "```py\n[build-system] \n\nbuild-backend = ’setuptools.build_meta’ \n\nrequires = [ \n\n    ’setuptools’, \n\n]\n```", "```py\n\"\"\"Weather forecast for Offshore including the Bahamas \n\n\"\"\" \n\nquery = {’mz’: \n\n    [’ANZ532’, \n\n     ’AMZ117’, \n\n     ’AMZ080’] \n\n} \n\nbase_url = \"https://forecast.weather.gov/shmrn.php\"\n```", "```py\ndef load_config_file_draft(config_path: Path) -> dict[str, Any]: \n\n    \"\"\"Loads a configuration mapping object with contents \n\n    of a given file. \n\n    :param config_path: Path to be read. \n\n    :returns: mapping with configuration parameter values \n\n    \"\"\" \n\n    # Details omitted.\n```", "```py\n    from pathlib import Path \n\n    from typing import Any\n    ```", "```py\n    def load_config_file(config_path: Path) -> dict[str, Any]: \n\n        code = compile( \n\n            config_path.read_text(), \n\n            config_path.name, \n\n            \"exec\")\n    ```", "```py\n     locals: dict[str, Any] = {} \n\n        exec( \n\n            code, \n\n            {\"__builtins__\": __builtins__}, \n\n            locals \n\n        ) \n\n        return locals\n    ```", "```py\n\"\"\"Config with related paths\"\"\" \n\nbase = Path(os.environ.get(\"APP_HOME\", \"/opt/app\")) \n\nlog = base / ’log’ \n\nout = base / ’out’\n```", "```py\nclass Configuration: \n\n    \"\"\" \n\n    Generic Configuration with a sample query. \n\n    \"\"\" \n\n    base = \"https://forecast.weather.gov/shmrn.php\" \n\n    query = {\"mz\": [\"GMZ856\"]}\n```", "```py\n>>> from settings import Configuration \n\n>>> Configuration.base \n\n’https://forecast.weather.gov/shmrn.php’\n```", "```py\nConfigClass = type[object] \n\ndef load_config_file_draft( \n\n    config_path: Path, classname: str = \"Configuration\" \n\n) -> ConfigClass: \n\n    \"\"\"Loads a configuration mapping object with contents \n\n    of a given file. \n\n    :param config_path: Path to be read. \n\n    :returns: mapping with configuration parameter values \n\n    \"\"\" \n\n    # Details omitted.\n```", "```py\n    from pathlib import Path \n\n    import platform \n    ```", "```py\n    def load_config_file( \n\n        config_path: Path, classname: str = \"Configuration\" \n\n    ) -> ConfigClass: \n\n        code = compile( \n\n            config_path.read_text(), \n\n            config_path.name, \n\n            \"exec\")\n    ```", "```py\n     globals = { \n\n            \"__builtins__\": __builtins__, \n\n            \"Path\": Path, \n\n            \"platform\": platform} \n\n        locals: dict[str, ConfigClass] = {} \n\n        exec(code, globals, locals) \n\n        return locals[classname]\n    ```", "```py\n>>> configuration = load_config_file( \n\n... Path(’src/ch13/settings.py’), ’Chesapeake’) \n\n>>> configuration.__doc__.strip() \n\n’Weather for Chesapeake Bay’ \n\n>>> configuration.query \n\n{’mz’: [’ANZ532’]} \n\n>>> configuration.base \n\n’https://forecast.weather.gov/shmrn.php’\n```", "```py\nclass Configuration: \n\n    \"\"\" \n\n    Generic Configuration with a sample query. \n\n    \"\"\" \n\n    base = \"https://forecast.weather.gov/shmrn.php\" \n\n    query = {\"mz\": [\"GMZ856\"]} \n\nclass Bahamas(Configuration): \n\n    \"\"\" \n\n    Weather forecast for Offshore including the Bahamas \n\n    \"\"\" \n\n    query = {\"mz\": [\"AMZ117\", \"AMZ080\"]} \n\nclass Chesapeake(Configuration): \n\n    \"\"\" \n\n    Weather for Chesapeake Bay \n\n    \"\"\" \n\n    query = {\"mz\": [\"ANZ532\"]}\n```", "```py\n(cookbook3) % python3 some_app.py -c settings.Chesapeake\n```", "```py\nimport importlib \n\ndef load_config_class(name: str) -> ConfigClass: \n\n    module_name, _, class_name = name.rpartition(\".\") \n\n    settings_module = importlib.import_module(module_name) \n\n    result: ConfigClass = vars(settings_module)[class_name] \n\n    return result\n```", "```py\n>>> configuration = load_config_class( \n\n... ’settings.Chesapeake’) \n\n>>> configuration.__doc__.strip() \n\n’Weather for Chesapeake Bay’ \n\n>>> configuration.query \n\n{’mz’: [’ANZ532’]} \n\n>>> configuration.base \n\n’https://forecast.weather.gov/shmrn.php’\n```", "```py\n     if __name__ == \"__main__\": \n\n        main()\n    ```", "```py\n     \"\"\" \n\n        Some Script. \n\n        What it does. How it works. \n\n        Who uses it. When do they use it. \n\n    \"\"\"\n    ```", "```py\n    if __name__ == \"__main__\": \n\n        main()\n    ```", "```py\n# # Some complicated process \n\n# \n\n# Some additional markdown details. \n\n# In[12]: \n\nprint(\"Some useful code here\") \n\n# In[21]: \n\nprint(\"More code here\")\n```", "```py\n#################################### \n\n# Some complicated process         # \n\n#                                  # \n\n# Some additional markdown details.# \n\n#################################### \n\nprint(\"Some useful code here\") \n\n#################################### \n\n# Another step in the process      # \n\n#################################### \n\nprint(\"More code here\")\n```", "```py\n     self.err_logger = logging.getLogger( \n\n                f\"error.{self.__class__.__name__}\") \n\n            self.dbg_logger = logging.getLogger( \n\n                f\"debug.{self.__class__.__name__}\")\n    ```", "```py\n     self.dbg_logger.info( \n\n                \"Some computation with %r\", some_variable) \n\n            # Some complicated computation with some_variable \n\n            self.dbg_logger.info( \n\n                \"Result details = %r\", result)\n    ```", "```py\n     # Some complicated input processing and parsing \n\n            self.err_logger.info(\"Input processing completed.\") \n    ```", "```py\n    def large_and_complicated(some_parameter: Any) -> Any: \n\n        dbg_logger = logging.getLogger(\"debug.large_and_complicated\") \n\n        dbg_logger.info(\"some_parameter= %r\", some_parameter)\n    ```", "```py\n     very_small_dbg_logger = logging.getLogger(\"debug.very_small\") \n\n    def very_small(some_parameter: Any) -> Any: \n\n        very_small_dbg_logger.info(\"some_parameter= %r\", some_parameter)\n    ```", "```py\nlogger = logging.getLogger(__name__)\n```", "```py\nif __name__ == \"__main__\": \n\n    logging.basicConfig(level=logging.INFO)\n```", "```py\nversion = 1 \n\n[formatters.default] \n\n    style = \"{\" \n\n    format = \"{levelname}:{name}:{message}\" \n\n[formatters.timestamp] \n\n    style = \"{\" \n\n    format = \"{asctime}//{levelname}//{name}//{message}\" \n\n[handlers.console] \n\n    class = \"logging.StreamHandler\" \n\n    stream = \"ext://sys.stderr\" \n\n    formatter = \"default\" \n\n[handlers.file] \n\n    class = \"logging.FileHandler\" \n\n    filename = \"data/write.log\" \n\n    formatter = \"timestamp\" \n\n[loggers] \n\n    overview_stats.detail = {handlers = [\"console\"]} \n\n    overview_stats.write = {handlers = [\"file\", \"console\"] } \n\n    root = {level = \"INFO\"}\n```", "```py\nif __name__ == \"__main__\": \n\n    logging.config.dictConfig( \n\n        tomllib.loads(config_toml)) \n\n    main() \n\n    logging.shutdown()\n```"]