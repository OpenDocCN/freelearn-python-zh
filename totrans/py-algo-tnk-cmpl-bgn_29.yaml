- en: Chapter 19
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nested Decision Control Structures
  prefs: []
  type: TYPE_NORMAL
- en: 19.1 What are Nested Decision Control Structures?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nested decision control structures are decision control structures that are
    “nested” (enclosed) within another decision control structure. This means that
    one decision control structure can nest (enclose) another decision control structure
    (which then becomes the “nested” decision control structure). In turn, that nested
    decision control structure can enclose another decision structure, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: An example of a nested decision control structure is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter19-01.png)'
  prefs: []
  type: TYPE_IMG
- en: This can be rearranged to become
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter19-02.png)'
  prefs: []
  type: TYPE_IMG
- en: and the Python code is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 30:'
  prefs: []
  type: TYPE_NORMAL
- en: if x < 15:     [[More…]](more.html#more_19_1_1)
  prefs: []
  type: TYPE_NORMAL
- en: y = y + 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y -= 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: There are no practical limitations to how deep this nesting can go. As long
    as the syntax rules are not violated, you can nest as many decision control structures
    as you wish. For practical reasons however, as you move to three or four levels
    of nesting, the entire structure becomes very complex and difficult to understand.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Complex code may lead to invalid results! Try to keep your
    code as simple as possible by breaking large nested decision control structures
    into multiple smaller ones, or by using other types of decision control structures.'
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, you can nest any decision control structure inside any other decision
    control structure as long as you keep them syntactically and logically correct.
    In the next example, a multiple-alternative decision structure is nested within
    a dual-alternative decision structure.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_19.1'
  prefs: []
  type: TYPE_NORMAL
- en: 'x = int(input("Enter a choice: "))'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 1 or x > 4:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid choice")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Valid choice")
  prefs: []
  type: TYPE_NORMAL
- en: if x == 1:             [[More…]](more.html#more_19_1_2)
  prefs: []
  type: TYPE_NORMAL
- en: print("1st choice selected")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: print("2nd choice selected")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: print("3rd choice selected")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x == 4:'
  prefs: []
  type: TYPE_NORMAL
- en: print("4th choice selected")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that keyword else is missing from the multiple-alternative
    decision structure. If you wish to include it, considering that the only choices
    checked are 1, 2, 3, or 4, you can replace elif x == 4 with else.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 19.1-1 Trace Tables and Nested Decision Control Structures
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program for three different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 13, (ii) 18, and (iii) 30.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_19.1-1'
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = 10
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 30:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 15:'
  prefs: []
  type: TYPE_NORMAL
- en: y = y + 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y -= 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input value of 13, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | y |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | x = int(input()) | User enters the value 13 | 13 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 10 |   | 13 | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if x < 30: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | if x < 15: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | y = y + 2 |   | 13 | 12 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(y) | It displays: 12 |'
  prefs: []
  type: TYPE_TB
- en: ii)For the input value of 18, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | y |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | x = int(input()) | User enters the value 18 | 18 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 10 |   | 18 | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if x < 30: | This evaluates to True |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | if x < 15: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | y ‑= 1 |   | 18 | 9 |'
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(y) | It displays: 9 |'
  prefs: []
  type: TYPE_TB
- en: iii)For the input value of 30, the trace table looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | y |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | x = int(input()) | User enters the value 30 | 30 | ? |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 10 |   | 30 | 10 |'
  prefs: []
  type: TYPE_TB
- en: '| 3 | if x < 30: | This evaluates to False |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | y += 1 |   | 30 | 11 |'
  prefs: []
  type: TYPE_TB
- en: '| 5 | print(y) | It displays: 11 |'
  prefs: []
  type: TYPE_TB
- en: Exercise 19.1-2 Positive, Negative or Zero?
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design a flowchart and write the corresponding Python program that lets the
    user enter a number and then displays the messages “Positive”, “Negative”, or
    “Zero” depending on whether the user-provided value is greater than, less than,
    or equal to zero.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter19-03.png)'
  prefs: []
  type: TYPE_IMG
- en: This flowchart can be written as a Python program using either a nested decision
    control structure or a multiple-alternative decision structure. Let's try them
    both!
  prefs: []
  type: TYPE_NORMAL
- en: First approach – Using a nested decision control structure
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_19.1-2a'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Positive")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Negative")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Zero")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Second approach – Using a multiple-alternative decision structure
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_19.1-2b'
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Positive")
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Negative")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Zero")
  prefs: []
  type: TYPE_NORMAL
- en: '19.2 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Nesting of decision control structures describes a situation in which one
    or more than one path of a decision control structure enclose other decision control
    structures.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Nesting level can go as deep as the programmer wishes.
  prefs: []
  type: TYPE_NORMAL
- en: 3)When a problem can be solved using either a multiple-alternative decision
    structure or nested decision control structures, the second option is better because
    the program becomes more readable.
  prefs: []
  type: TYPE_NORMAL
- en: 4)It is possible to nest a multiple-alternative decision structure within a
    simple-alternative decision structure, but not the opposite.
  prefs: []
  type: TYPE_NORMAL
- en: 19.3 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Create a trace table to determine the values of the variables in each step
    of the next Python program for four different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the four executions are: (i) 20, 1; (ii) 20, 3; (iii)
    12, 8; and (iv) 50, 0.'
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 30:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x % 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y = 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif y == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x * 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y = 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif y == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x + 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y += 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x -= 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(x, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Create a trace table to determine the values of the variables in each step
    of the next Python program for four different executions.
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the four executions are: (i) 60, 25; (ii) 50, 8; (iii)
    20, 15; and (iv) 10, 30.'
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if (x + y) / 2 <= 20:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y < 10:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x % 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y += 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif y < 20:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x * 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y += 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x - 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y += 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y < 15:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x % 4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y = 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif y < 23:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x % 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y -= 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x = 2 * x + 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(x, ",", y)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Write the following Python program using correct indentation.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > 1000:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Big Positive")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Positive")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a < -1000:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Big Negative")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Negative")
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Zero")
  prefs: []
  type: TYPE_NORMAL
- en: '4)In Greece, you can drive a small scooter when you are at least 16 years old,
    whereas you can drive a car when you are at least 18 years old. Write a Python
    program that prompts the user to enter their age and then displays (depending
    on the user''s age) one of the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: ►“You cannot drive either a small scooter or a car”, when the user is younger
    than 16 years old
  prefs: []
  type: TYPE_NORMAL
- en: ►“You can drive a small scooter”, when the user is between 16 and 18 years old
  prefs: []
  type: TYPE_NORMAL
- en: ►“You can drive a car and a small scooter”, when the user is 18 years old or
    older
  prefs: []
  type: TYPE_NORMAL
- en: An error message must be displayed when the user enters an invalid value.
  prefs: []
  type: TYPE_NORMAL
- en: '5)A hoverboard factory manager needs a program to calculate the profit or loss
    the factory makes during the period of one month. Here''s some information:'
  prefs: []
  type: TYPE_NORMAL
- en: ►It costs the factory $150 to build each hoverboard.
  prefs: []
  type: TYPE_NORMAL
- en: ►Hoverboards are sold for $250 each.
  prefs: []
  type: TYPE_NORMAL
- en: ►The factory pays $1000 for insurance each month for each employee.
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a Python program that prompts the user to input the number of hoverboards
    sold and the number of employees in the company. Depending on the financial performance
    of the company, the program must then display one of the following messages:'
  prefs: []
  type: TYPE_NORMAL
- en: ►Profit
  prefs: []
  type: TYPE_NORMAL
- en: ►Loss
  prefs: []
  type: TYPE_NORMAL
- en: ►Broke even
  prefs: []
  type: TYPE_NORMAL
- en: An error message must be displayed when the user enters a negative number of
    hoverboards sold or a non-positive^([[16]](footnotes.html#Endnote_16)) number
    of employees.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Write a Python program that prompts the user to enter their name. The program
    must then select a random integer between 1 and 24 to represent an hour, and then,
    it must display the message “The hour is HH:00” and, depending on that number,
    display either “Good morning NN!”, “Good Evening NN!”, “Good Afternoon NN!”, or
    “Good Night NN!”, where HH is the randomly chosen hour and NN is the name of the
    user. Solve this exercise twice, once using nested-decision structures and once
    using a multiple-alternative decision structure.
  prefs: []
  type: TYPE_NORMAL
- en: 7)Write a Python program that prompts the user to enter the lengths of three
    sides of a triangle, and then determines whether or not the user-provided numbers
    can be lengths of the three sides of a triangle. If the lengths are not valid,
    a corresponding message must be displayed; otherwise the program must further
    determine whether the triangle is
  prefs: []
  type: TYPE_NORMAL
- en: a)equilateral
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: In an equilateral triangle, all sides are equal.'
  prefs: []
  type: TYPE_NORMAL
- en: b)right (or right-angled)
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: Use the Pythagorean Theorem.'
  prefs: []
  type: TYPE_NORMAL
- en: c)not special
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: In any triangle, the length of each side is less than the sum of the
    lengths of the other two sides.'
  prefs: []
  type: TYPE_NORMAL
- en: 8)Inside an automated teller machine (ATM) there are notes of $10, $5, and $1\.
    Write a Python program to emulate the way this ATM works. At the beginning, the
    machine prompts the user to enter the four-digit PIN and then checks for PIN validity
    (assume “1234” as the valid PIN). If user-provided PIN is correct, the program
    must prompt the user to enter the amount of money (an integer value) that they
    want to withdraw and finally it displays the least number of notes the ATM must
    dispense. For example, if the user enters an amount of $36, the program must display
    “3 note(s) of $10, 1 note(s) of $5, and 1 note(s) of $1”. Moreover, if the user
    enters a wrong PIN, the machine will allow them two retries. If the user enters
    an incorrect PIN all three times, the message “PIN locked” must be displayed and
    the program must end. Assume that the user enters a valid value for the amount.
  prefs: []
  type: TYPE_NORMAL
- en: 9)Write a Python program that prompts the user to enter two values, one for
    temperature and one for wind speed. If the temperature is above 75 degrees Fahrenheit,
    the day is considered hot, otherwise it is cold. If the wind speed is above 12
    miles per hour, the day is considered windy, otherwise it is not windy. The program
    must display one single message, depending on the user-provided values. For example,
    if the user enters 60 for temperature and 10 for wind speed, the program must
    display “The day is cold and not windy”. Assume that the user enters valid values.
  prefs: []
  type: TYPE_NORMAL
