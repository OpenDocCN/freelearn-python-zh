- en: Chapter 19
  id: totrans-0
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Nested Decision Control Structures
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
- en: 19.1 What are Nested Decision Control Structures?
  id: totrans-2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Nested decision control structures are decision control structures that are
    “nested” (enclosed) within another decision control structure. This means that
    one decision control structure can nest (enclose) another decision control structure
    (which then becomes the “nested” decision control structure). In turn, that nested
    decision control structure can enclose another decision structure, and so on.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: An example of a nested decision control structure is shown here.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter19-01.png)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
- en: This can be rearranged to become
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter19-02.png)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
- en: and the Python code is shown here.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 30:'
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
- en: if x < 15:     [[More…]](more.html#more_19_1_1)
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
- en: y = y + 2
  id: totrans-11
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: y -= 1
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: There are no practical limitations to how deep this nesting can go. As long
    as the syntax rules are not violated, you can nest as many decision control structures
    as you wish. For practical reasons however, as you move to three or four levels
    of nesting, the entire structure becomes very complex and difficult to understand.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Complex code may lead to invalid results! Try to keep your
    code as simple as possible by breaking large nested decision control structures
    into multiple smaller ones, or by using other types of decision control structures.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
- en: Obviously, you can nest any decision control structure inside any other decision
    control structure as long as you keep them syntactically and logically correct.
    In the next example, a multiple-alternative decision structure is nested within
    a dual-alternative decision structure.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_19.1'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
- en: 'x = int(input("Enter a choice: "))'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 1 or x > 4:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid choice")
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: print("Valid choice")
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: if x == 1:             [[More…]](more.html#more_19_1_2)
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: print("1st choice selected")
  id: totrans-26
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x == 2:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
- en: print("2nd choice selected")
  id: totrans-28
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x == 3:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: print("3rd choice selected")
  id: totrans-30
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif x == 4:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: print("4th choice selected")
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note that keyword else is missing from the multiple-alternative
    decision structure. If you wish to include it, considering that the only choices
    checked are 1, 2, 3, or 4, you can replace elif x == 4 with else.'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 19.1-1 Trace Tables and Nested Decision Control Structures
  id: totrans-34
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Create a trace table to determine the values of the variables in each step of
    the next Python program for three different executions.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: 'The input values for the three executions are: (i) 13, (ii) 18, and (iii) 30.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_19.1-1'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
- en: y = 10
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 30:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < 15:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: y = y + 2
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
- en: y -= 1
  id: totrans-44
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: i)For the input value of 13, the trace table looks like this.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
- en: '| Step | Statement | Notes | x | y |'
  id: totrans-50
  prefs: []
  type: TYPE_TB
- en: '| 1 | x = int(input()) | User enters the value 13 | 13 | ? |'
  id: totrans-51
  prefs: []
  type: TYPE_TB
- en: '| 2 | y = 10 |   | 13 | 10 |'
  id: totrans-52
  prefs: []
  type: TYPE_TB
- en: '| 3 | if x < 30: | This evaluates to True |'
  id: totrans-53
  prefs: []
  type: TYPE_TB
- en: '| 4 | if x < 15: | This evaluates to True |'
  id: totrans-54
  prefs: []
  type: TYPE_TB
- en: '| 5 | y = y + 2 |   | 13 | 12 |'
  id: totrans-55
  prefs: []
  type: TYPE_TB
- en: '| 6 | print(y) | It displays: 12 |'
  id: totrans-56
  prefs: []
  type: TYPE_TB
- en: ii)For the input value of 18, the trace table looks like this.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: ii)对于输入值 18，跟踪表如下所示。
- en: '| Step | Statement | Notes | x | y |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | x | y |'
- en: '| 1 | x = int(input()) | User enters the value 18 | 18 | ? |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| 1 | x = int(input()) | 用户输入值 18 | 18 | ? |'
- en: '| 2 | y = 10 |   | 18 | 10 |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 2 | y = 10 |   | 18 | 10 |'
- en: '| 3 | if x < 30: | This evaluates to True |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if x < 30: | 这评估为 True |'
- en: '| 4 | if x < 15: | This evaluates to False |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 4 | if x < 15: | 这评估为 False |'
- en: '| 5 | y ‑= 1 |   | 18 | 9 |'
  id: totrans-63
  prefs: []
  type: TYPE_TB
  zh: '| 5 | y -= 1 |   | 18 | 9 |'
- en: '| 6 | print(y) | It displays: 9 |'
  id: totrans-64
  prefs: []
  type: TYPE_TB
  zh: '| 6 | print(y) | 它显示：9 |'
- en: iii)For the input value of 30, the trace table looks like this.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: iii)对于输入值 30，跟踪表如下所示。
- en: '| Step | Statement | Notes | x | y |'
  id: totrans-66
  prefs: []
  type: TYPE_TB
  zh: '| 步骤 | 语句 | 备注 | x | y |'
- en: '| 1 | x = int(input()) | User enters the value 30 | 30 | ? |'
  id: totrans-67
  prefs: []
  type: TYPE_TB
  zh: '| 1 | x = int(input()) | 用户输入值 30 | 30 | ? |'
- en: '| 2 | y = 10 |   | 30 | 10 |'
  id: totrans-68
  prefs: []
  type: TYPE_TB
  zh: '| 2 | y = 10 |   | 30 | 10 |'
- en: '| 3 | if x < 30: | This evaluates to False |'
  id: totrans-69
  prefs: []
  type: TYPE_TB
  zh: '| 3 | if x < 30: | 这评估为 False |'
- en: '| 4 | y += 1 |   | 30 | 11 |'
  id: totrans-70
  prefs: []
  type: TYPE_TB
  zh: '| 4 | y += 1 |   | 30 | 11 |'
- en: '| 5 | print(y) | It displays: 11 |'
  id: totrans-71
  prefs: []
  type: TYPE_TB
  zh: '| 5 | print(y) | 它显示：11 |'
- en: Exercise 19.1-2 Positive, Negative or Zero?
  id: totrans-72
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 练习 19.1-2 正数、负数或零？
- en: Design a flowchart and write the corresponding Python program that lets the
    user enter a number and then displays the messages “Positive”, “Negative”, or
    “Zero” depending on whether the user-provided value is greater than, less than,
    or equal to zero.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 设计一个流程图并编写相应的 Python 程序，允许用户输入一个数字，然后根据用户提供的值是大于、小于还是等于零来显示消息“正数”、“负数”或“零”。
- en: Solution
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 解答
- en: The flowchart is shown here.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 流程图如下所示。
- en: '![Image](img/chapter19-03.png)'
  id: totrans-76
  prefs: []
  type: TYPE_IMG
  zh: '![Image](img/chapter19-03.png)'
- en: This flowchart can be written as a Python program using either a nested decision
    control structure or a multiple-alternative decision structure. Let's try them
    both!
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这个流程图可以用嵌套决策控制结构或多重选择决策结构来编写 Python 程序。让我们都试试！
- en: First approach – Using a nested decision control structure
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法 – 使用嵌套决策控制结构
- en: '![](img/my_exercise_header.png) file_19.1-2a'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_19.1-2a'
- en: a = float(input())
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: 'if a > 0:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > 0:'
- en: print("Positive")
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: print("Positive")
- en: 'else:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if a < 0:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a < 0:'
- en: print("Negative")
  id: totrans-85
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Negative")
- en: 'else:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Zero")
  id: totrans-87
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: print("Zero")
- en: Second approach – Using a multiple-alternative decision structure
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法 – 使用多重选择决策结构
- en: '![](img/my_exercise_header.png) file_19.1-2b'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/my_exercise_header.png) file_19.1-2b'
- en: a = float(input())
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: a = float(input())
- en: 'if a > 0:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > 0:'
- en: print("Positive")
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: print("Positive")
- en: 'elif a < 0:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif a < 0:'
- en: print("Negative")
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: print("Negative")
- en: 'else:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Zero")
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: print("Zero")
- en: '19.2 Review Questions: True/False'
  id: totrans-97
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.2 复习问题：对/错
- en: Choose true or false for each of the following statements.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 对以下每个陈述选择正确或错误。
- en: 1)Nesting of decision control structures describes a situation in which one
    or more than one path of a decision control structure enclose other decision control
    structures.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 1)决策控制结构的嵌套描述了一种情况，其中一个或多个决策控制结构的路径包围了其他决策控制结构。
- en: 2)Nesting level can go as deep as the programmer wishes.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 2)嵌套级别可以深到程序员想要的程度。
- en: 3)When a problem can be solved using either a multiple-alternative decision
    structure or nested decision control structures, the second option is better because
    the program becomes more readable.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 3)当一个问题可以使用多重选择决策结构或嵌套决策控制结构来解决时，第二种选择更好，因为程序的可读性更高。
- en: 4)It is possible to nest a multiple-alternative decision structure within a
    simple-alternative decision structure, but not the opposite.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 4)可以在简单选择决策结构内嵌套多重选择决策结构，但不能反过来。
- en: 19.3 Review Exercises
  id: totrans-103
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 19.3 复习练习
- en: Complete the following exercises.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 完成以下练习。
- en: 1)Create a trace table to determine the values of the variables in each step
    of the next Python program for four different executions.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 1)创建一个跟踪表以确定下一次 Python 程序在四次不同执行中每一步的变量值。
- en: 'The input values for the four executions are: (i) 20, 1; (ii) 20, 3; (iii)
    12, 8; and (iv) 50, 0.'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 四次执行的输入值分别为：(i) 20, 1; (ii) 20, 3; (iii) 12, 8; 和 (iv) 50, 0。
- en: x = int(input())
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: y = int(input())
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: y = int(input())
- en: 'if x < 30:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 'if x < 30:'
- en: 'if y == 1:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y == 1:'
- en: x = x % 3
  id: totrans-111
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x % 3
- en: y = 5
  id: totrans-112
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 5
- en: 'elif y == 2:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif y == 2:'
- en: x = x * 2
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x * 2
- en: y = 2
  id: totrans-115
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 2
- en: 'elif y == 3:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif y == 3:'
- en: x = x + 5
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x + 5
- en: y += 3
  id: totrans-118
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y += 3
- en: 'else:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x -= 2
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x -= 2
- en: y += 1
  id: totrans-121
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y += 1
- en: 'else:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: y += 1
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: y += 1
- en: print(x, ",", y)
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, ",", y)
- en: 2)Create a trace table to determine the values of the variables in each step
    of the next Python program for four different executions.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 2)创建一个跟踪表以确定下一次 Python 程序在四次不同执行中每一步的变量值。
- en: 'The input values for the four executions are: (i) 60, 25; (ii) 50, 8; (iii)
    20, 15; and (iv) 10, 30.'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 四次执行的输入值分别为：(i) 60, 25; (ii) 50, 8; (iii) 20, 15; 和 (iv) 10, 30。
- en: x = int(input())
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: x = int(input())
- en: y = int(input())
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: y = int(input())
- en: 'if (x + y) / 2 <= 20:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 'if (x + y) / 2 <= 20:'
- en: 'if y < 10:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y < 10:'
- en: x = x % 3
  id: totrans-131
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x % 3
- en: y += 2
  id: totrans-132
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y += 2
- en: 'elif y < 20:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif y < 20:'
- en: x = x * 5
  id: totrans-134
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x * 5
- en: y += 2
  id: totrans-135
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y += 2
- en: 'else:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x = x - 2
  id: totrans-137
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x - 2
- en: y += 3
  id: totrans-138
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y += 3
- en: 'else:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if y < 15:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 'if y < 15:'
- en: x = x % 4
  id: totrans-141
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x % 4
- en: y = 2
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y = 2
- en: 'elif y < 23:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 'elif y < 23:'
- en: x = x % 2
  id: totrans-144
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = x % 2
- en: y -= 2
  id: totrans-145
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y -= 2
- en: 'else:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: x = 2 * x + 5
  id: totrans-147
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: x = 2 * x + 5
- en: y += 1
  id: totrans-148
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: y += 1
- en: print(x, ",", y)
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: print(x, ",", y)
- en: 3)Write the following Python program using correct indentation.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 3)使用正确的缩进编写以下Python程序。
- en: a = int(input())
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: a = int(input())
- en: 'if a > 1000:'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > 1000:'
- en: print("Big Positive")
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: print("Big Positive")
- en: 'else:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if a > 0:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a > 0:'
- en: print("Positive")
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: print("Positive")
- en: 'else:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if a < -1000:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a < -1000:'
- en: print("Big Negative")
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: print("Big Negative")
- en: 'else:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: 'if a < 0:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 'if a < 0:'
- en: print("Negative")
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: print("Negative")
- en: 'else:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 'else:'
- en: print("Zero")
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: print("Zero")
- en: '4)In Greece, you can drive a small scooter when you are at least 16 years old,
    whereas you can drive a car when you are at least 18 years old. Write a Python
    program that prompts the user to enter their age and then displays (depending
    on the user''s age) one of the following messages:'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 4)在希腊，您至少16岁时可以驾驶小型滑板车，而您至少18岁时可以驾驶汽车。编写一个Python程序，提示用户输入他们的年龄，然后根据用户的年龄显示以下消息之一：
- en: ►“You cannot drive either a small scooter or a car”, when the user is younger
    than 16 years old
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ►“您不能驾驶小型滑板车或汽车”，当用户年龄小于16岁时
- en: ►“You can drive a small scooter”, when the user is between 16 and 18 years old
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: ►“您可以在16至18岁之间驾驶小型滑板车”，当用户年龄在16至18岁之间时
- en: ►“You can drive a car and a small scooter”, when the user is 18 years old or
    older
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: ►“您可以驾驶汽车和一辆小型滑板车”，当用户年龄为18岁或以上时
- en: An error message must be displayed when the user enters an invalid value.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入无效值时，必须显示错误消息。
- en: '5)A hoverboard factory manager needs a program to calculate the profit or loss
    the factory makes during the period of one month. Here''s some information:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 5)hoverboard工厂经理需要一个程序来计算工厂在一个月期间所获得的利润或亏损。以下是一些信息：
- en: ►It costs the factory $150 to build each hoverboard.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: ►制造每台hoverboard的成本为150美元。
- en: ►Hoverboards are sold for $250 each.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: ►hoverboard售价为每台250美元。
- en: ►The factory pays $1000 for insurance each month for each employee.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: ►该工厂每月为每位员工支付1000美元的保险费。
- en: 'Write a Python program that prompts the user to input the number of hoverboards
    sold and the number of employees in the company. Depending on the financial performance
    of the company, the program must then display one of the following messages:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 编写一个Python程序，提示用户输入销售的hoverboard数量和公司中的员工数量。根据公司的财务表现，程序必须然后显示以下消息之一：
- en: ►Profit
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: ►盈利
- en: ►Loss
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: ►亏损
- en: ►Broke even
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: ►盈亏平衡
- en: An error message must be displayed when the user enters a negative number of
    hoverboards sold or a non-positive^([[16]](footnotes.html#Endnote_16)) number
    of employees.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户输入销售的hoverboard数量为负数或员工数量非正数（^[[16]](footnotes.html#Endnote_16)）时，必须显示错误消息。
- en: 6)Write a Python program that prompts the user to enter their name. The program
    must then select a random integer between 1 and 24 to represent an hour, and then,
    it must display the message “The hour is HH:00” and, depending on that number,
    display either “Good morning NN!”, “Good Evening NN!”, “Good Afternoon NN!”, or
    “Good Night NN!”, where HH is the randomly chosen hour and NN is the name of the
    user. Solve this exercise twice, once using nested-decision structures and once
    using a multiple-alternative decision structure.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 6)编写一个Python程序，提示用户输入他们的名字。程序必须然后选择一个介于1到24之间的随机整数来代表一个小时，然后，它必须显示消息“现在是HH:00”以及，根据该数字，显示“早上好NN!”、“晚上好NN!”、“下午好NN!”或“晚上好NN!”，其中HH是随机选择的数字，NN是用户的名字。解决这个练习两次，一次使用嵌套决策结构，一次使用多选决策结构。
- en: 7)Write a Python program that prompts the user to enter the lengths of three
    sides of a triangle, and then determines whether or not the user-provided numbers
    can be lengths of the three sides of a triangle. If the lengths are not valid,
    a corresponding message must be displayed; otherwise the program must further
    determine whether the triangle is
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 7)编写一个Python程序，提示用户输入三角形的三个边的长度，然后确定用户提供的数字是否可以是三角形三边的长度。如果长度无效，必须显示相应的消息；否则，程序必须进一步确定三角形是
- en: a)equilateral
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: a)等边
- en: 'Hint: In an equilateral triangle, all sides are equal.'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：在等边三角形中，所有边都相等。
- en: b)right (or right-angled)
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: b)直角（或直角三角形）
- en: 'Hint: Use the Pythagorean Theorem.'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：使用勾股定理。
- en: c)not special
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: c)非特殊
- en: 'Hint: In any triangle, the length of each side is less than the sum of the
    lengths of the other two sides.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 提示：在任何三角形中，每边的长度都小于其他两边长度之和。
- en: 8)Inside an automated teller machine (ATM) there are notes of $10, $5, and $1\.
    Write a Python program to emulate the way this ATM works. At the beginning, the
    machine prompts the user to enter the four-digit PIN and then checks for PIN validity
    (assume “1234” as the valid PIN). If user-provided PIN is correct, the program
    must prompt the user to enter the amount of money (an integer value) that they
    want to withdraw and finally it displays the least number of notes the ATM must
    dispense. For example, if the user enters an amount of $36, the program must display
    “3 note(s) of $10, 1 note(s) of $5, and 1 note(s) of $1”. Moreover, if the user
    enters a wrong PIN, the machine will allow them two retries. If the user enters
    an incorrect PIN all three times, the message “PIN locked” must be displayed and
    the program must end. Assume that the user enters a valid value for the amount.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 8) 在自动取款机（ATM）中，有10美元、5美元和1美元的纸币。编写一个Python程序来模拟这种ATM的工作方式。一开始，机器提示用户输入四位数密码，然后检查密码的有效性（假设“1234”是有效的密码）。如果用户提供的密码正确，程序必须提示用户输入他们想要取出的金额（一个整数值），最后显示ATM必须发放的最少纸币数量。例如，如果用户输入金额为36美元，程序必须显示“3张10美元纸币，1张5美元纸币和1张1美元纸币”。此外，如果用户输入错误的密码，机器将允许他们重试两次。如果用户三次都输入了错误的密码，必须显示消息“密码锁定”，并且程序必须结束。假设用户输入了有效的金额值。
- en: 9)Write a Python program that prompts the user to enter two values, one for
    temperature and one for wind speed. If the temperature is above 75 degrees Fahrenheit,
    the day is considered hot, otherwise it is cold. If the wind speed is above 12
    miles per hour, the day is considered windy, otherwise it is not windy. The program
    must display one single message, depending on the user-provided values. For example,
    if the user enters 60 for temperature and 10 for wind speed, the program must
    display “The day is cold and not windy”. Assume that the user enters valid values.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 9) 编写一个Python程序，提示用户输入两个值，一个用于温度，另一个用于风速。如果温度高于75华氏度，则认为这一天很热，否则是冷天。如果风速高于每小时12英里，则认为这一天有风，否则是无风。程序必须根据用户提供的值显示一条单一的消息。例如，如果用户输入温度为60华氏度，风速为10英里每小时，程序必须显示“这一天很冷且无风”。假设用户输入了有效的值。
