["```py\n>>> a = 123\n>>> b = 'test'\n>>> c = True \n```", "```py\n>>> def pow(base: int, exponent: int) -> int:\n...     return base ** exponent\n\n>>> help(pow)\nHelp on function pow in module __main__:\n<BLANKLINE>\npow(base: int, exponent: int) -> int\n<BLANKLINE>\n\n>>> pow.__annotations__\n{'base': <class 'int'>,\n 'exponent': <class 'int'>,\n 'return': <class 'int'>}\n\n>>> pow(2, 10)\n1024\n>>> pow(pow(9, 2) + pow(19, 2) / 22, 0.25)\n3.1415926525826463 \n```", "```py\n>>> import typing\n\n>>> int_or_float = typing.Union[int, float]\n\n>>> def pow(base: int, exponent: int) -> int_or_float:\n...     return base ** exponent\n\n>>> help(pow)\nHelp on function pow in module __main__:\n<BLANKLINE>\npow(base: int, exponent: int) -> Union[int, float]\n<BLANKLINE> \n```", "```py\n>>> class Sandwich:\n...     pass\n\n>>> def get_sandwich() -> Sandwich:\n...     return Sandwich() \n```", "```py\n>>> class A:\n...     @staticmethod\n...     def get_b() -> 'B':\n...         return B()\n\n>>> class B:\n...     @staticmethod\n...     def get_a() -> A:\n...         return A() \n```", "```py\n# Works without an issue\n>>> some_variable: 'some_non_existing_type'\n\n# Error as expected\n>>> some_variable: some_non_existing_type\nTraceback (most recent call last):\n    ...\nNameError: name 'some_non_existing_type' is not defined \n```", "```py\n>>> if typing.TYPE_CHECKING:\n...     # Add your import for some_non_existing_type here\n...     ... \n```", "```py\n>>> import typing\n\n>>> Username = typing.NewType('Username', str)\n\n>>> rick = Username('Rick')\n\n>>> type(rick)\n<class 'str'> \n```", "```py\n>>> import typing\n\n>>> T = typing.TypeVar('T', int, str)\n\n>>> def add(a: T, b: T) -> T:\n...     return a + b\n\n>>> add(1, 2)\n3\n>>> add('a', 'b')\n'ab' \n```", "```py\n$ pip3 install -U mypy \n```", "```py\nimport typing\n\ndef pow(base: int, exponent: int) -> int:\n    return base ** exponent\n\npow(2.5, 10) \n```", "```py\n$ mypy T_01_type_hinting.py\nT_01_type_hinting.py:8: error: Argument 1 to \"pow\" has incompatible type \"float\"; expected \"int\" \n```", "```py\nUsername = typing.NewType('Username', str)\n\nrick = Username('Rick')\n\ndef print_username(username: Username):\n    print(f'Username: {username}')\n\nprint_username(rick)\nprint_username(str(rick)) \n```", "```py\n$ mypy T_01_type_hinting.py\nT_01_type_hinting.py:22: error: Argument 1 to \"print_username\" has incompatible type \"str\"; expected \"Username\" \n```", "```py\nT = typing.TypeVar('T')\n\ndef to_string(value: T) -> T:\n    return str(value)\n\nto_string(1) \n```", "```py\nerror: Incompatible return value type (got \"str\", expected \"T\") \n```", "```py\nimport typing\n\nUsername = typing.NewType('Username', str)\n\ndef print_username(username: Username): ... \n```", "```py\nDocumentation, how to use Sphinx and reStructuredText\n##################################################################\n\nDocumenting code can be both fun and useful! ...\n\nAdditionally, adding ...\n\n... So that typing 'some_string.' will automatically ...\n\nTopics covered in this chapter are as follows:\n\n - The reStructuredText syntax\n - Setting up documentation using Sphinx\n - Sphinx style docstrings\n - Google style docstrings\n - NumPy style docstrings\n\nThe reStructuredText syntax\n******************************************************************\n\nThe reStructuredText format (also known as ... \n```", "```py\n# Documentation, how to use Sphinx and reStructuredText\n\n...\n\n## The reStructuredText syntax\n\n... \n```", "```py\n$ pip3 install docutils \n```", "```py\n$ rst2html.py file.rst file.html \n```", "```py\n    .. code:: python\n\n      print('Hello world') \n    ```", "```py\n$ pip3 install markdown \n```", "```py\n$ markdown_py file.md -f file.html \n```", "```py\nPart\n################################################################\n\nChapter\n****************************************************************\n\nSection\n================================================================\n\nSubsection\n----------------------------------------------------------------\n\nSubsubsection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nParagraph\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nContent \n```", "```py\n################################################################\nPart\n################################################################\n\n****************************************************************\nChapter\n****************************************************************\n\n================================================================\nSection\n================================================================\n\n----------------------------------------------------------------\nSubsection\n----------------------------------------------------------------\n\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nSubsubsection\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\nParagraph\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nContent \n```", "```py\nSection\n======= \n```", "```py\nSection\n==== \n```", "```py\nPart\n=\nChapter\n- \n```", "```py\n# Part\n## Chapter\n### Section\n#### Subsection\n##### Subsubsection\n###### Paragraph\nContent\n###### Paragraph with suffix ######\nContent \n```", "```py\n1\\. With\n2\\. Numbers\n\na. With\n#. letters\n\ni. Roman\n#. numerals\n\n(1) With\n(2) Parenthesis \n```", "```py\n1\\. With\n1\\. Numbers \n```", "```py\n- dashes\n- and more dashes\n\n* asterisk\n* stars\n\n+ plus\n+ and plus \n```", "```py\n-s, --spam  This is the spam option\n--eggs      This is the eggs option \n```", "```py\n| Argument     | Help                    |\n|--------------|-------------------------|\n| '-s, --spam' | This is the spam option |\n| '--eggs'     | This is the eggs option | \n```", "```py\n| Argument | Help |\n|-|-|\n| '-s, --spam' | This is the spam option |\n| '--eggs' | This is the eggs option | \n```", "```py\nspam\n    Spam is a canned pork meat product\neggs\n    Is, similar to spam, also food \n```", "```py\n1\\. With\n2\\. Numbers\n\n   (food) food\n\n    spam\n        Spam is a canned pork meat product\n    eggs\n        Is, similar to spam, also food\n\n    (other) non-food stuff \n```", "```py\nThe switch to reStructuredText and Sphinx was made with the\n'Python 2.6 <https://docs.python.org/whatsnew/2.6.html>'_\nrelease. \n```", "```py\nThe switch to reStructuredText and Sphinx was made with the\n'python 2.6'_ release.\n.. _'Python 2.6': https://docs.python.org/whatsnew/2.6.html \n```", "```py\nThe switch to reStructuredText and Sphinx was made with the [Python 2.6](https://docs.python.org/whatsnew/2.6.html) release.\n\nThe switch to reStructuredText and Sphinx was made with the [Python 2.6] release.\n\n[Python 2.6]: https://docs.python.org/whatsnew/2.6.html \n```", "```py\n.. _label: \n```", "```py\nThe introduction section\n================================================================\n\nThis section contains:\n\n- 'chapter 1'_\n- :ref:'chapter2'\n\n  1\\. my_label_\n\n  2\\. 'And a label link with a custom title <my_label>'_\nChapter 1\n\n----------------------------------------------------------------\n\nJumping back to the beginning of 'chapter 1'_ is also possible.\nOr jumping to :ref:'Chapter 2 <chapter2>'\n\n.. _chapter2:\n\nChapter 2 With a longer title\n----------------------------------------------------------------\n\nThe next chapter.\n\n.. _my_label:\n\nThe label points here.\n\nBack to 'the introduction section'_ \n```", "```py\n .. name_of_directive:: \n```", "```py\n.. image:: python.png \n```", "```py\n.. image:: python.png\n   :width: 150\n   :height: 100\n\n.. image:: python.png\n   :scale: 10 \n```", "```py\n.. figure:: python.png\n   :scale: 10\n\n   The Python logo \n```", "```py\n![python](python.png) \n```", "```py\n![python]\n\n[python]: python.png \n```", "```py\n.. |python| image:: python.png\n   :scale: 1\n\nThe Python programming language uses the logo: |python| \n```", "```py\n.. |author| replace:: Rick van Hattem\n\nThis book was written by |author| \n```", "```py\n.. code:: python\n\n   def spam(*args):\n       print('spam got args', args) \n```", "```py\nCode below:\n\n    def spam(*args):\n        print('spam got args', args) \n```", "```py\n'''python\ndef spam(*args):\n    print('spam got args', args)\n''' \n```", "```py\n.. math::\n\n    \\int_a^b f(x)\\,dx = F(b) - F(a) \n```", "```py\nBefore comments\n\n.. Everything here will be commented\n\n   And this as well\n   .. code:: python\n      def even_this_code_sample():\n          pass  # Will be commented\n\nAfter comments \n```", "```py\n[_]: <> (this will not be shown) \n```", "```py\nNormal text\n\n    Quoted text \n```", "```py\nNormal text\n> Quoted text \n```", "```py\n$ pip3 install sphinx \n```", "```py\n$ sphinx-quickstart docs\nWelcome to the Sphinx 3.2.1 quickstart utility.\n\nPlease enter values for the following settings (just press Enter to\naccept a default value, if one is given in brackets).\n\nSelected root path: docs\n\nYou have two options for placing the build directory for Sphinx output.\nEither, you use a directory \"_build\" within the root path, or you separate\n\"source\" and \"build\" directories within the root path.\n> Separate source and build directories (y/n) [n]:\n\nThe project name will occur in several places in the built documentation.\n> Project name: Mastering Python\n> Author name(s): Rick van Hattem\n> Project release []:\n\n... \n```", "```py\n$ make <builder> \n```", "```py\n$ find docs\ndocs\ndocs/index.rst\ndocs/_templates\ndocs/Makefile\ndocs/conf.py\ndocs/_static\ndocs/make.bat\ndocs/_build \n```", "```py\nWelcome to Mastering Python's documentation!\n============================================\n\n.. toctree::\n   :maxdepth: 2\n   :caption: Contents:\n\nIndices and tables\n==================\n\n* :ref:'genindex'\n* :ref:'modindex'\n* :ref:'search' \n```", "```py\n$ cd docs\n$ make html \n```", "```py\n$ make help\nSphinx v3.2.1\nPlease use 'make target' where target is one of\n  html        to make standalone HTML files\n  dirhtml     to make HTML files named index.html in directories\n  singlehtml  to make a single large HTML file\n  pickle      to make pickle files\n  json        to make JSON files\n  htmlhelp    to make HTML files and an HTML help project\n  qthelp      to make HTML files and a qthelp project\n  devhelp     to make HTML files and a Devhelp project\n  epub        to make an epub\n  latex       to make LaTeX files, you can set PAPER=a4 or ...\n  latexpdf    to make LaTeX and PDF files (default pdflatex)\n  latexpdfja  to make LaTeX files and run them through platex/...\n  text        to make text files\n  man         to make manual pages\n  texinfo     to make Texinfo files\n  info        to make Texinfo files and run them through makeinfo\n  gettext     to make PO message catalogs\n  changes     to make an overview of all changed/added/... items\n  xml         to make Docutils-native XML files\n  pseudoxml   to make pseudoxml-XML files for display purposes\n  linkcheck   to check all external links for integrity\n  doctest     to run all doctests embedded in the documentation\n  coverage    to run coverage check of the documentation \n```", "```py\nclass A(object):\n    def __init__(self, arg, *args, **kwargs):\n        pass\n\n    def regular_method(self, arg):\n        pass\n\n    @classmethod\n    def decorated_method(self, arg):\n        pass\n\n    def _hidden_method(self):\n        pass \n```", "```py\nfrom . import a\n\nclass B(a.A):\n    def regular_method(self):\n        '''This regular method overrides\n        :meth:'a.A.regular_method'\n        '''\n        pass \n```", "```py\n$ sphinx-apidoc apidoc_example -o docs\nCreating file docs/apidoc_example.rst.\nCreating file docs/modules.rst. \n```", "```py\n.. toctree::\n   :maxdepth: 2\n\n   modules \n```", "```py\nimport os\nimport sys\n\nsys.path.insert(0, os.path.abspath('..')) \n```", "```py\nextensions = [\n    'sphinx.ext.autodoc',\n] \n```", "```py\n$ make html\nRunning Sphinx v3.2.1\nmaking output directory... done\nbuilding [mo]: targets for 0 po files that are out of date\nbuilding [html]: targets for 3 source files that are out of date\nupdating environment: [new config] 3 added, 0 changed, 0 removed\nreading sources... [100%] modules\nlooking for now-outdated files... none found\npickling environment... done\nchecking consistency... done\npreparing documents... done\nwriting output... [100%] modules\ngenerating indices...  genindex py-modindexdone\nwriting additional pages...  searchdone\ncopying static files... ... done\ncopying extra files... done\ndumping search index in English (code: en)... done\ndumping object inventory... done\nbuild succeeded.\n\nThe HTML pages are in _build/html. \n```", "```py\napidoc_example\n==============\n\n.. toctree::\n   :maxdepth: 4\n\n   apidoc_example \n```", "```py\napidoc\\_example package\n=======================\n\nSubmodules\n----------\n\napidoc\\_example.a module\n------------------------\n\n.. automodule:: apidoc_example.a\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\napidoc\\_example.b module\n------------------------\n\n.. automodule:: apidoc_example.b\n   :members:\n   :undoc-members:\n   :show-inheritance:\n\nModule contents\n---------------\n\n.. automodule:: apidoc_example\n   :members:\n   :undoc-members:\n   :show-inheritance: \n```", "```py\napidoc\\_example package\n=======================\n\nSubmodules\n----------\n\napidoc\\_example.a module\n------------------------\n\n.. automodule:: apidoc_example.a\n   :members:\n   :undoc-members:\n   :show-inheritance:\n `:private-members:`\n `:special-members:`\n `:inherited-members:`\n\napidoc\\_example.b module\n------------------------\n\n.. automodule:: apidoc_example.b\n   :members:\n   :undoc-members:\n   :show-inheritance:\n `:private-members:`\n `:special-members:`\n `:inherited-members:`\n\nModule contents\n---------------\n\n.. automodule:: apidoc_example\n   :members:\n   :undoc-members:\n   :show-inheritance:\n `:private-members:`\n `:special-members:`\n `:inherited-members:` \n```", "```py\n.. toctree::\n   :maxdepth: 2 \n```", "```py\n.. toctree::\n   :maxdepth: 2\n\n `module.a`\n `module.b`\n `module.c` \n```", "```py\n.. toctree::\n   :maxdepth: 2\n   :glob:\n\n   module.* \n```", "```py\n.. toctree::\n   :maxdepth: 2\n\n   The A module <module.a> \n```", "```py\nSpam: :class:'spam.Spam' \n```", "```py\nextensions = [\n    'sphinx.ext.autodoc',\n    'sphinx.ext.intersphinx',\n] \n```", "```py\nintersphinx_mapping = {\n    'python': ('https://docs.python.org/', None),\n    'sphinx': ('https://www.sphinx-doc.org/', None),\n} \n```", "```py\nLink to the intersphinx module: :mod:'sphinx.ext.intersphinx' \n```", "```py\n:param number: The number of eggs to return\n:type number: int \n```", "```py\nArgs:\n    number (int): The number of eggs to return \n```", "```py\nParameters\n----------\nnumber : int\n    The number of eggs to return \n```", "```py\nautodoc_typehints = 'description' \n```", "```py\nclass Eggs:\n    pass\n\nclass Spam(object):\n    '''\n    The Spam object contains lots of spam\n    :param arg: The arg is used for ...\n    :type arg: str\n    :param '*args': The variable arguments are used for ...\n    :param '**kwargs': The keyword arguments are used for ...\n    :ivar arg: This is where we store arg\n    :vartype arg: str\n    '''\n\n    def __init__(self, arg: str, *args, **kwargs):\n        self.arg: str = arg\n\n    def eggs(self, number: int, cooked: bool) -> Eggs:\n        '''We can't have spam without eggs, so here are the eggs\n\n        :param number: The number of eggs to return\n        :type number: int\n        :param bool cooked: Should the eggs be cooked?\n        :raises: :class:'RuntimeError': Out of eggs\n\n        :returns: A bunch of eggs\n        :rtype: Eggs\n        '''\n        pass \n```", "```py\nclass Eggs:\n    pass\n\nclass Spam(object):\n    r'''\n    The Spam object contains lots of spam\n    Args:\n        arg: The arg is used for ...\n        \\*args: The variable arguments are used for ...\n        \\*\\*kwargs: The keyword arguments are used for ...\n    Attributes:\n        arg: This is where we store arg,\n    '''\n\n    def __init__(self, arg: str, *args, **kwargs):\n        self.arg: str = arg\n\n    def eggs(self, number: int, cooked: bool) -> Eggs:\n        '''We can't have spam without eggs, so here are the eggs\n\n        Args:\n            number (int): The number of eggs to return\n            cooked (bool): Should the eggs be cooked?\n\n        Raises:\n            RuntimeError: Out of eggs\n\n        Returns:\n            Eggs: A bunch of eggs\n        '''\n        pass \n```", "```py\nclass Eggs:\n    pass\n\nclass Spam(object):\n    r'''\n    The Spam object contains lots of spam\n    Parameters\n    ----------\n    arg : str\n        The arg is used for ...\n    \\*args\n        The variable arguments are used for ...\n    \\*\\*kwargs\n        The keyword arguments are used for ...\n    Attributes\n    ----------\n    arg : str\n        This is where we store arg,\n    '''\n\n    def __init__(self, arg, *args, **kwargs):\n        self.arg = arg\n\n    def eggs(self, number, cooked):\n        '''We can't have spam without eggs, so here are the eggs\n\n        Parameters\n        ----------\n        number : int\n            The number of eggs to return\n        cooked : bool\n            Should the eggs be cooked?\n\n        Raises\n        ------\n        RuntimeError\n            Out of eggs\n\n        Returns\n        -------\n        Eggs\n            A bunch of eggs\n        '''\n        pass \n```"]