- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building Login and Registration Forms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Registration and login are essential features of web applications that have
    users. Even if an authentication flow can be handled directly with simple requests,
    there is also a need to have logic working behind the UI to manage the authentication
    and session, especially if we are using a **JSON web** **token** (**JWT**).
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we’ll create login and registration forms with React. There
    is a lot to do and learn here, but here’s what this chapter will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuration of a CSS framework in a React project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding protected and public pages to an application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a page for registration
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a page for login
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a welcome page after the login or registration is successful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of the chapter, you will be able to build registration and login
    pages using React, and you will know how to manage JWT authentication from the
    frontend.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Make sure to have VS Code installed and configured on your machine.
  prefs: []
  type: TYPE_NORMAL
- en: You can find the code for this chapter at [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap7](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap7).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the authentication flow
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We’ve already explored authentication on a social media project from a backend
    perspective in [*Chapter 2*](B18221_02.xhtml#_idTextAnchor036), *Authentication
    and Authorization Using JWTs*. But how does this manifest in the React application?
  prefs: []
  type: TYPE_NORMAL
- en: 'Well, things will be a little bit different. To quickly recapitulate, we have
    a registration and a login endpoint. These endpoints return the user objects with
    two tokens:'
  prefs: []
  type: TYPE_NORMAL
- en: '**An access token with a lifetime of 5 minutes**: This token helps with authenticating
    on the server side when requesting without the need to log in again. Then, we
    can access resources and perform actions on these resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**A refresh token**: This token helps you to retrieve another access token
    if one has already expired.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this data coming from the server, we can manage authentication from the
    React application side like so. When a registration or a login is successful,
    we store the returned response in the client’s browser; we’ll use `localStorage`
    for this.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `localStorage` property helps us to work with the browser storage, enabling
    browsers to store key-value pairs in the browser. Two methods will be used with
    `localStorage`: `setItem()` to set a key-value pair and `getItem()` to access
    the values.'
  prefs: []
  type: TYPE_NORMAL
- en: Then, for each request sent to the server, we add the Authorization header to
    the request containing the access token retrieved from `localStorage`. If the
    request returns a `401` error, it means that the token has expired. If this happens,
    we send a request to the refresh endpoint to get a new access token, using the
    refresh token also retrieved from `localStorage`. And with this access token,
    we resend the failed request.
  prefs: []
  type: TYPE_NORMAL
- en: If we receive a `401` error again, it means that the refresh token has expired.
    Then, the user will be sent to the login page to log in again, retrieve new tokens,
    and store them in `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the authentication flow from the frontend side, let’s
    write the requests service we will use for data fetching and performing CRUD actions.
  prefs: []
  type: TYPE_NORMAL
- en: Writing the requests service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Making requests in JavaScript is relatively easy. The node environment and the
    browser provide native packages such as `fetch` to allow you to request a server.
    However, this project will use the `axios` package for HTTP requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Axios is a popular library mainly used to send asynchronous HTTP requests to
    REST endpoints. Axios is the perfect library for CRUD operations. However, we
    will also install `axios-auth-refresh`. This simple library assists with an automatic
    refresh of tokens via `axios` interceptors. To install the `axios` and `axios-auth-refresh`
    packages, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `social-media-app` directory, add the `axios` and `axios-auth-refresh`
    packages by running the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Once it’s installed, create a directory called `helpers` in the `src` folder
    of the React project, and once it’s done, add a file called `axios.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.1 – The path of the helper.js file](img/Figure_7.01_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – The path of the helper.js file
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s make the import and write the basic configurations, such as the
    URL and some headers. Take a look at the following code block:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code block, we have added the `Content-Type` header for the
    `POST` requests. The following figure shows the authentication flow we’ll follow
    in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.2 – Authentication flow with access/refresh tokens](img/Figure_7.02_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – Authentication flow with access/refresh tokens
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding figure, note the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: Every time we are requesting with `axiosService`, we retrieve the access token
    from `localStorage` and create a new header authorization using the access token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The access token will expire if the request is made and a `400` status code
    is returned
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We retrieve the refresh token from `localStorage` and make a request to retrieve
    a new access token
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once done, we register the new access token in `localStorage` and restart the
    previously failed request
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Yet, if the refresh token request has failed too, we simply remove `auth` from
    `localStorage` and send the user to the login screen
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s implement the previously described flow in the `axios.js` file by following
    these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First we will write a request interceptor to add headers to the request:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Note that we can use the object-destructuring syntax to extract property values
    from an object in JavaScript. In pre-ES2015 code, it probably goes like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have a lot of properties to extract from an object, it can quickly become
    long. That’s where object destructuring comes in handy:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: You can learn more about the syntax at [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment).
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, we will resolve the requests and return a resolved or rejected
    promise:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This last step is the icing on the cake. Create a function that contains the
    refresh `auth` logic. This function will be called whenever the failed request
    returns a `401` error:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'And finally, initialize the authentication interceptor and create a custom
    fetcher too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The fetcher will be used to make `GET` requests on the API resources. Great!
    The fetching logic is implemented, and we can move on to registering a user. But
    before that, we need to define protected routes in the project.
  prefs: []
  type: TYPE_NORMAL
- en: Protected routes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Routing with the condition on a frontend application is a big plus, as it helps
    with a better user experience. For example, if you are not logged in to Twitter
    and want to check a profile or comment, you will be redirected to the login page.
    These are protected pages or actions, so you must log in before accessing these
    resources. In this section, we’ll write a `ProtectedRoute` component using `React-Router`
    components.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a protected route wrapper
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To create a protected route wrapper, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory in the `src` directory called `routes`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the newly created directory, create a file called `ProtectedRoute.jsx`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the file is created, import the needed libraries:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/routes/ProtectedRoute.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the following logic for the protected routes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, we are retrieving the user property from `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: We then use this property to check whether we should redirect the user to the
    login page or render the page (`children`). If **user** is null or undefined,
    it means that the user has not logged in, so we redirect the user to the login
    page, otherwise, we give access to the asked page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, inside the `App.js` file, let’s rewrite the content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/App.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: Now, the default location will be the profile page. However, with no credentials
    in the store, the user will be redirected to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Great! We’ve now implemented the first step of the authentication flow. In the
    next section, we will write a page for registration before writing the page for
    login.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the registration page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If a user needs login credentials, they will need to register first. In this
    section, we will create a registration form while also handling the necessary
    requests.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a registration page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s start by writing code for the form page. We’ll start by writing the registration
    `form` component:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `src` directory, create a new directory called `components` and then
    create a new directory called `authentication` inside the newly created directory.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This directory will contain the registration and login forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once that’s done, create a file called `RegistrationForm.jsx` inside the `authentication`
    directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – The registration file](img/Figure_7.03_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – The registration file
  prefs: []
  type: TYPE_NORMAL
- en: React Bootstrap provides `form` components that we can use quickly to create
    a form and make basic validation. In this component, we’ll also have to make a
    request to the API, register the user details and tokens in the store, and redirect
    the user to the home page if the request is successful.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add the needed imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, declare the states and functions we’ll use in the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: Let’s quickly explain what we are doing in the preceding code snippet.
  prefs: []
  type: TYPE_NORMAL
- en: The `navigate` Hook will help us navigate to the home page if the request is
    successful.
  prefs: []
  type: TYPE_NORMAL
- en: The `validated`, `form`, and `error` states are respectively used to check whether
    the form is valid or not, the values of each field in the form, and the error
    message to display if the request doesn’t pass.
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! Let’s write the function that will handle the form submission:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The next step is to use `axios` to make a `POST` request to the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, we are first blocking the default form submission
    behavior with `event.preventDefault()` – that is, reloading the page. Next, we
    are checking whether the basic validations for the fields are done. With the validation
    successfully done, we can easily make a request with `axios` and store tokens
    and user details in `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: This way, the user is navigated to the home page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let’s add the basic UI components:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: There is more code after this, but let’s grasp the logic here first; the other
    will be significantly easier.
  prefs: []
  type: TYPE_NORMAL
- en: React Bootstrap provides a `Form` component that we can use to create fields.
  prefs: []
  type: TYPE_NORMAL
- en: '`Form.Control` is a component input and it takes as props (`name`, `type`,
    etc.) attributes any input can take. `Form.Control.Feedback` will show errors
    when the fields are not valid.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s do the same for the `last_name` and the `username` fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s also add a field for email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s also add a field for the password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE63]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE64]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE65]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE66]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE67]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE68]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Let’s add the bio field too. We’ll use the `Textarea` field type here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, add the submit button and export the component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/forms/RegistrationForm.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: '`RegistrationForm` is now created with the required fields and the logic to
    handle the form submission.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will add this registration form component to a page
    and register this page in our application route.
  prefs: []
  type: TYPE_NORMAL
- en: Registering the registration page route
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to register the registration page route:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `src/pages` directory, create a file called `Registration.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/pages/Registration.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: We’ve added simple introduction text to the page and imported the `LoginForm`
    component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, open `App.js` and register the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/App.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: 'Great! Now, go to `http://localhost:3000/register/`, and you should have a
    similar result to this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.4 – The registration page](img/Figure_7.04_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – The registration page
  prefs: []
  type: TYPE_NORMAL
- en: 'Test it and register with an account. You’ll be redirected to the home page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 7.5 – The home page](img/Figure_7.05_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.5 – The home page
  prefs: []
  type: TYPE_NORMAL
- en: Great! We’ve just written the registration page.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will create the login page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the login page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have already created the registration page, the logic for login will be
    pretty similar but with fewer fields.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the login page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a login page:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `src/components/authentication` directory, add a new file called
    `LoginForm.jsx`. This file will contain the form component to log in a user.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Next, add the imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/authentication/LoginForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: 'Write the logic to handle the login:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/authentication/LoginForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: 'As we did for the registration process, we will now make a request on the login
    endpoint:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/authentication/LoginForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: This is nearly the same logic as the registration, but here, we are only working
    with the username and the password.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the logic ready to handle the request made for login, let’s add the UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/components/authentication/LoginForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we are creating the form and adding the first input of
    the form, the username input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s also add the password form input and the submit button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We have created the `LoginForm` component with the required fields and logic
    to handle data submission.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will add `LoginForm` to a page and register this page
    in the application routes.
  prefs: []
  type: TYPE_NORMAL
- en: Registering the login page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to register the login page:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inside the `src/pages` directory, create a file called `Login.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/pages/Login.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s add the UI:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/pages/Login.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: This is also quite similar to the registration page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Register the page in the routes of the application in the `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/App.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: 'Visit `http://localhost:3000/login/`, and you should have a similar page to
    this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![`Figure 7.6 – The login page](img/Figure_7.06_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`Figure 7.6 – The login page'
  prefs: []
  type: TYPE_NORMAL
- en: Test it again, and you should be redirected to the home page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The authentication flow is working like a charm, but we have some repeated code
    in our project. Let’s do some refactoring by doing a little exercise in the next
    section.
  prefs: []
  type: TYPE_NORMAL
- en: Refactoring the authentication flow code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Instead of repeating the same code across the code base, we can follow the `LoginForm`
    and `RegistrationForm` components. In this section, we will write a custom React
    Hook to handle this logic, but before doing that, let’s understand what a Hook
    is.
  prefs: []
  type: TYPE_NORMAL
- en: What is a Hook?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Hooks were first introduced in React 16.8, allowing developers to use more of
    React’s features without writing a class. An interesting example of a React Hook
    is `useState`.
  prefs: []
  type: TYPE_NORMAL
- en: '`useState` is a replacement for `setState`, used inside functional components
    to manage the internal state of a component. In `LoginForm`, we used `useState`
    to handle the form values. We also used `useState` to set the message error if
    the login request returns an error. For a simple test, go to the login page and
    enter the wrong credentials, and you’ll likely get a similar error to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.7 – The login form](img/Figure_7.07_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.7 – The login form
  prefs: []
  type: TYPE_NORMAL
- en: 'The logic from this comes from the following lines in `LoginForm.jsx`:'
  prefs: []
  type: TYPE_NORMAL
- en: src/authentication/LoginForm.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: 'This is an example of the `useState` Hook, and not every Hook works the same
    way. For example, you can check the usage of the `useNavigate` Hook in the `LoginForm`
    component. There are a few rules for using Hooks as per the React documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Only call Hooks at the top level**: Don’t call Hooks inside loops, conditions,
    or nested routes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Only call Hooks from React functions**: Call Hooks from React function components
    and custom Hooks'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React allows us to write custom Hooks. Let’s write a custom Hook to handle user
    authentication. Inside a new file, we’ll write functions that make it easier to
    retrieve and manipulate the `auth` object in `localStorage`.
  prefs: []
  type: TYPE_NORMAL
- en: Writing code for a custom Hook
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create a custom Hook:'
  prefs: []
  type: TYPE_NORMAL
- en: Inside the `src` directory, create a new directory called `hooks`. This directory
    will contain all the Hooks that we’ll write in this book.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inside the newly created directory, add a file called `user.actions.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s add all the necessary content, starting with the imports:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/hooks/user.actions.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s add a function called `useUserActions`. A custom Hook is a JavaScript
    function whose name starts with `use`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/hooks/user.actions.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: We can now add the `login` and `logout` functions. These functions will return
    `Promise`, which, if successful, will register the user data in `localStorage`
    and redirect the user to the home page, or allow us to catch and handle errors.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will now write the `register` function as a bit of exercise, but it’s not
    that different from the `login` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/hooks/user.actions.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, write the `logout` function. This function will remove the `auth` item
    from `localStorage` and redirect the user to the login page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/hooks/user.actions.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: Note that we are using a method called `setUserData`, which we have not declared
    yet.
  prefs: []
  type: TYPE_NORMAL
- en: 'After the `useUserActions` function, let’s add other utils functions that can
    be used across the project. These functions will help us to retrieve access tokens,
    refresh tokens, user information, or set user data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/hooks/user.actions.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You might find it confusing to declare functions after calling them. Writing
    functions in JavaScript using the `function` keyword allows hoisting, meaning
    that functions declaration is moved to the top of their scope before code execution.
    You can learn more at [https://developer.mozilla.org/en-US/docs/Glossary/Hoisting](https://developer.mozilla.org/en-US/docs/Glossary/Hoisting).
  prefs: []
  type: TYPE_NORMAL
- en: With the functions for retrieving a user, the access and refresh tokens, and
    the function to set user data in `localStorage`, we can now call the function
    in the `LoginForm` and `RegisterForm` components.
  prefs: []
  type: TYPE_NORMAL
- en: Using the functions in code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We have a useful Hook, `useUserActions`, in the `user.actions.js` file. We
    will use this Hook to call the `login` method, thus replacing the old login logic
    in the `LoginForm.js` file. Let’s start by using the newly written custom Hook
    in the `LoginForm` component. Follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, import the Hooks and declare a new variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE124]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, we can make some changes to the `handleSubmit` function concerning the
    login request on the API:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/hooks/user.actions.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, we did some quick refactoring by removing the old
    logic for login and setting user data in `localStorage`. The same logic can be
    applied to `RegistrationForm` (the `register` method is already available in the
    `useUserActions` Hook). You can modify the `RegistrationForm` component as a small
    exercise. Feel free to check the code at [https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/chap7/social-media-react/src/components/authentication/RegistrationForm.jsx](https://github.com/PacktPublishing/Full-stack-Django-and-React/blob/chap7/social-media-react/src/components/authentication/RegistrationForm.jsx)
    to make sure your solution is valid.
  prefs: []
  type: TYPE_NORMAL
- en: 'Great! Let’s now use the other utils functions in the `axios` helper and the
    `ProtectedRoute` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/routes/ProtectedRoute.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, let’s do some tweaks in the `axios` helper:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code block, we used the `getAccessToken` and `getRefreshToken`
    functions to retrieve the access token and the refresh token from `localStorage`
    for the requests. We just replaced the old logic to retrieve the access and refresh
    tokens.
  prefs: []
  type: TYPE_NORMAL
- en: And we are done. We have a pure React logic for the authentication flow, which
    will help us manage the CRUD operations for the posts and comments in the following
    chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we dived deeper into more concepts, such as authentication
    in a React application. We implemented a clean logic for requests on the Django
    API with access tokens and also implemented the refresh logic if the access token
    has expired. We also had the chance to use more of the Bootstrap components to
    not only style login and registration forms but also to create login and register
    pages. Finally, we implemented a custom React Hook to handle everything concerning
    authentication on the frontend, with methods for registration and login, and some
    utilities to retrieve tokens from `localStorage` and also set tokens and user
    data in `localStorage`. The creation of the custom Hook helped us make some refactoring
    in the code base according to the DRY principle.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will allow users to create posts from the React application.
    We will learn how to make requests to the backend using the custom-written `axiosService`,
    display modals, handle more complex React states, and also use the `useContext`
    React Hook to handle pop-up displays.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is `localStorage`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is React-Router?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you configure a protected route in React?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is a React Hook?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Give three examples of React Hooks.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the two rules of React Hooks?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
