["```py\ndef sqrt_1(ll):\n    \"\"\"simple for loop\"\"\"\n    res = []\n    for i in ll:\n        res.append(math.sqrt(i))\n    return res\n\ndef sqrt_2(ll):\n    \"builtin map\"\n    return list(map(math.sqrt,ll))\nThe test 1 is for sqrt_1(list(range(1000))) and test 22 sqrt_2(list(range(1000))).\n```", "```py\ndef sqrt_5(ll):\n    \"simple for loop, yield\"\n    for i in ll:\n        yield i,math.sqrt(i)\n\ndef sqrt_6(ll):\n    \"simple for loop\"\n    res = []\n    for i in ll:\n        res.append((i,math.sqrt(i)))\n    return res\n\ndef use_combo(combofunc,ll,no):\n    for i,j in combofunc(ll):\n        if i>no:\n            return j\n```", "```py\ndef sqrt_1(ll):\n    \"\"\"simple for loop\"\"\"\n    res = []\n    for i in ll:\n        res.append(math.sqrt(i))\n    return res\n\ndef sqrt_7(ll):\n    \"simple for loop,local\"\n    sqrt = math.sqrt\n    res = []\n    for i in ll:\n        res.append(sqrt(i))\n    return res\n```", "```py\nclass Super1(object):\n    def get_sqrt(self,no):\n        return math.sqrt(no)\n\nclass Super2(Super1):\n    pass\n\nclass Super3(Super2):\n    pass\n\nclass Super4(Super3):\n    pass\n\nclass Super5(Super4):\n    pass\n\nclass Super6(Super5):\n    pass\n\nclass Super7(Super6):\n    pass\n\nclass Actual(Super7):\n    \"\"\"method resolution via hierarchy\"\"\"\n    pass\n\nclass Actual2(object):\n    \"\"\"method resolution single step\"\"\"\n    def get_sqrt(self,no):\n        return math.sqrt(no)\n\ndef use_sqrt_class(aclass,ll):\n    cls_instance = aclass()\n    res = []\n    for i in ll: \n        res.append(cls_instance.get_sqrt(i))\n    return res\n```", "```py\ndef getf_1(ll):\n    \"simple for loop,checks\"\n    res = []\n    for fname in ll:\n        curr = []\n        if os.path.exists(fname):\n            f = open(fname,\"r\")\n            try:\n                fdict = json.load(f)\n            except (TypeError, ValueError):\n                curr = [fname,None,\"Unable to read Json\"]\n            finally:\n                f.close()\n            if 'name' in fdict:\n                curr = [fname,fdict[\"name\"],'']\n            else:\n                curr = [fname,None,\"Key not found in file\"]\n        else:\n            curr = [fname,None,\"file not found\"]\n        res.append(curr)\n    return res\n\ndef getf_2(ll):\n    \"simple for loop, try-except\"\n    res = []\n    for fname in ll:\n        try:\n            f = open(fname,\"r\")\n            res.append([fname,json.load(f)['name'],''])\n        except IOError:\n            res.append([fname,None,\"File Not Found Error\"])\n        except TypeError:\n            res.append([fname,None,'Unable to read Json'])\n        except KeyError:\n            res.append([fname,None,'Key not found in file'])\n        except Exception as e:\n            res.append([fname,None,str(e)])\n        finally:\n            if 'f' in locals():\n                f.close()\n    return res\n```", "```py\ndef please_sqrt(no):\n    return math.sqrt(no)\n\ndef get_sqrt(no):\n    return please_sqrt(no)\n\ndef use_sqrt1(ll,no):\n    for i in ll:\n        res = get_sqrt(i)\n        if res >= no:\n            return i\n\ndef use_sqrt2(ll,no):\n    for i in ll:\n        res = math.sqrt(i)\n        if res >= no:\n            return i\n```", "```py\nfrom datetime import datetime,timedelta\nfrom functools import wraps\nimport time\n\ndef showtime(func):\n\n    @wraps(func)\n    def wrap(*args,**kwargs):\n        st = time.time() #time clock can be used too\n        result = func(*args,**kwargs)\n        et = time.time()\n        print(\"%s:%s\"%(func.__name__,et-st))\n        return result\n    return wrap\n\n@showtime\ndef func_c():\n    for i in range(1000):\n        for j in range(1000):\n            for k in range(100):\n                pass\n\nif __name__ == '__main__':\n    func_c()\n```", "```py\n(py35) [ ch7 ] $ python code_1_8.py \nfunc_c:1.3181400299072266\n```", "```py\nfrom datetime import datetime,timedelta\nfrom functools import wraps\nimport time\nimport line_profiler\n\nl = []\ndef func_a():\n    global l\n    for i in range(10000):\n        l.append(i)\n\ndef func_b():\n    m = list(range(100000))\n\ndef func_c():\n    func_a()\n    func_b()\n    k = list(range(100000))\n\nif __name__ == '__main__':\n    profiler = line_profiler.LineProfiler()\n    profiler.add_function(func_c)\n    profiler.run('func_c()')\n    profiler.print_stats()\n```", "```py\nTimer unit: 1e-06 s\n\nTotal time: 0.007759 s\nFile: code_1_9.py\nFunction: func_c at line 15\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    15                                           def func_c():\n    16         1         2976   2976.0     38.4      func_a()\n    17         1         2824   2824.0     36.4      func_b()\n    18         1         1959   1959.0     25.2      k = list(range(100000))\n```", "```py\nfrom datetime import datetime,timedelta\nfrom functools import wraps\nimport time\n\nl = []\ndef func_a():\n    global l\n    for i in range(10000):\n        l.append(i)\n\ndef func_b():\n    m = list(range(100000))\n\n@profile\ndef func_c():\n    func_a()\n    func_b()\n    k = list(range(100000))\n```", "```py\n(py35) [ ch7 ] $ kernprof -l -v code_1_10.py\nWrote profile results to code_1_10.py.lprof\nTimer unit: 1e-06 s\n\nTotal time: 0 s\nFile: code_1_10.py\nFunction: func_c at line 14\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n    14                                           @profile\n    15                                           def func_c():\n    16                                               func_a()\n    17                                               func_b()\n    18                                               k = list(range(100000))\n```", "```py\nfrom memory_profiler import profile\n\n@profile(precision=4)\ndef sample():\n    l1 = [ i for i in range(10000)]\n    l2 = [ i for i in range(1000)]\n    l3 = [ i for i in range(100000)]\n    return 0\n\nif __name__ == '__main__':\n    sample()\n```", "```py\n(py36)[ ch7 ] $ python  ex7_1.py \nFilename: ex7_1.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     8     12.6 MiB      0.0 MiB   @profile\n     9                             def sample():\n    10     13.1 MiB      0.5 MiB       l1 = [ i for i in range(10000)]\n    11     13.1 MiB      0.0 MiB       l2 = [ i for i in range(1000)]\n    12     17.0 MiB      3.9 MiB       l3 = [ i for i in range(100000)]\n    13     17.0 MiB      0.0 MiB       return 0\n\nFilename: ex7_1.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n    10     13.1 MiB      0.0 MiB       l1 = [ i for i in range(10000)]\n\nFilename: ex7_1.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n    12     17.0 MiB      0.0 MiB       l3 = [ i for i in range(100000)]\n\nFilename: ex7_1.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n    11     13.1 MiB      0.0 MiB       l2 = [ i for i in range(1000)]\n```", "```py\nfrom SocketServer import BaseRequestHandler,TCPServer\n\nlists = []\n\nclass Handler(BaseRequestHandler):\n    def handle(self):\n        data = self.request.recv(1024).strip()\n        lists.append(list(range(100000)))\n        self.request.sendall(\"server got \"+data)\n\nif __name__ == '__main__':\n    HOST,PORT = \"localhost\",9999\n    server = TCPServer((HOST,PORT),Handler)\n    server.serve_forever()\n```", "```py\nmprof run simple_serv.py\n```", "```py\n[ ch7 ] $ nc localhost 9999 <<END\nhello\nEND\n```", "```py\n[ ch7 ] $ mprof plot\n```", "```py\n#include \"fact.h\"\nlong int fact(long int n) {\n    if (n < 0){\n        return 0;\n    }\n    if (n == 0) {\n        return 1;\n    }\n    else {\n        return n * fact(n-1);\n    }\n}\n```", "```py\nlong int fact(long int n);\n```", "```py\n/* File: fact.i */\n%module fact\n%{\n#define SWIG_FILE_WITH_INIT\n#include \"fact.h\"\n%}\nlong int fact(long int n);\n```", "```py\nswig3.0 -python -O -py3 fact.i\n```", "```py\ngcc -fpic -c fact_wrap.c fact.c -I/home/arun/.virtualenvs/py3/include/python3.4m\n```", "```py\ngcc -shared fact.o fact_wrap.o  -o _fact.so\n```", "```py\n>>> from fact import fact\n>>> fact(10)\n3628800\n>>> fact(5)\n120\n>>> fact(20)\n2432902008176640000\n```", "```py\ngcc -shared fact.o  -o _fact.so\ngcc -fpic -c fact.c -o fact.o\n```", "```py\n>>> from cffi import FFI\n>>> ffi = FFI()\n>>> ffi.cdef(\"\"\"\n... long int fact(long int num);\n... \"\"\")\n>>> C = ffi.dlopen(\"./_fact.so\")\n>>> C.fact(20)\n2432902008176640000\n```", "```py\nfrom cffi import FFI\n\nffi = FFI()\nffi.set_source(\"fact_ffi\", None)\nffi.cdef(\"\"\"\n    long int fact(long int n);\n\"\"\")\n\nif __name__ == \"__main__\":\nffi.compile()\n\npython setup_fact_ffi.py \n```", "```py\n>>> from fact_ffi import ffi\n>>> ll = ffi.dlopen(\"./_fact.so\")\n>>> ll.fact(20)\n2432902008176640000\n>>> \n```", "```py\n__author__ = 'arun'\n\nfrom cffi import FFI\nffi = FFI()\n\nffi.set_source(\"_fact_cffi\",\n    \"\"\"\n    long int fact(long int n) {\n    if (n < 0){\n        return 0;\n    }\n    if (n == 0) {\n        return 1;\n    }\n    else {\n        return n * fact(n-1);\n    }\n}\n\"\"\",\n               libraries=[]\n    )\n\nffi.cdef(\"\"\"\nlong int fact(long int n);\n\"\"\")\n\nif __name__ == '__main__':\n    ffi.compile()\n```", "```py\n>>> from  _fact_cffi import ffi,lib\n>>> lib.fact(20)\n```", "```py\ncpdef double fact(int num):\n    cdef double res = 1\n    if num < 0:\n        return -1\n    elif num == 0:\n        return 1 \n    else:\n        for i in range(1,num + 1):\n            res = res*i\nreturn res\n```", "```py\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\nsetup(\n  name = 'factorial library',\n    ext_modules = cythonize(\"fact_cpy.pyx\"),\n    )\n```", "```py\npython setup.py build_ext --inplace\n```", "```py\n>>> from fact_cpy import fact\n>>> fact(20)\n2432902008176640000\n```"]