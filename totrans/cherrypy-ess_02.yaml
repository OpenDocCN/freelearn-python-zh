- en: Chapter 2. Download and Install CherryPy
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第二章：下载和安装 CherryPy
- en: 'Like most open-source projects, CherryPy can be downloaded and installed in
    various ways. Here we will discuss the following three methods:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 与大多数开源项目一样，CherryPy 可以通过多种方式下载和安装。在这里，我们将讨论以下三种方法：
- en: Using a tarball
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 tarball
- en: Using easy_install
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 easy_install
- en: Getting the latest version of the source code using Subversion
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Subversion 获取最新版本的源代码
- en: Each one brings a different value to the users of the project and it is important
    to understand the contribution made by each.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 每一种方法都为项目的用户提供不同的价值，了解每个的贡献是很重要的。
- en: Once you have read this chapter, you should be able to retrieve and deploy CherryPy,
    as well as understand how to use each technique for your own software.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你阅读了这一章，你应该能够检索和部署 CherryPy，以及了解如何为你的软件使用每种技术。
- en: Requirements
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 要求
- en: Throughout this book we will assume you have the following packages installed
    and available.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的整个过程中，我们将假设你已经安装并可以使用以下包。
- en: Python 2.4 or above
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 2.4 或更高版本
- en: CherryPy 3.0
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: CherryPy 3.0
- en: We will also assume you have knowledge of Python itself as we will not cover
    the language.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将假设你对 Python 本身有所了解，因为我们不会涵盖该语言。
- en: Overview
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: Installing a Python module or package is usually an easy process. First let's
    discuss the most common way to build and install a new package, thanks to a standard
    module, distutils, which appeared with Python 2.0.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Python 模块或包通常是一个简单的过程。首先，让我们讨论最常见的方法来构建和安装一个新的包，这得益于 Python 2.0 伴随出现的标准模块，distutils。
- en: 'This module provides a clean interface for specifying how a package is structured,
    what are the required dependencies, and the building rules of the package. For
    the user, it usually means typing the following commands:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 此模块提供了一个干净的接口来指定包的结构，所需的依赖项，以及包的构建规则。对于用户来说，通常意味着输入以下命令：
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The first one will simply build the package against the rules defined by the
    developers, reporting errors so that the end user knows about a missing dependency
    for example. The second one will install the package in the default directory
    used by Python to store third-party packages or modules. Note that the latter
    command will call the former by default to quickly check that nothing has changed
    since the last run.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个命令将简单地根据开发者定义的规则构建包，报告错误，以便最终用户知道缺少依赖项等。第二个命令将把包安装到 Python 用来存储第三方包或模块的默认目录。请注意，后一个命令将默认调用前一个命令，以快速检查自上次运行以来是否有任何变化。
- en: 'The default directories where packages and modules are stored are:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 存储包和模块的默认目录是：
- en: On UNIX or Linux `/usr/local/lib/python2.4/site-packages` or `/usr/lib/python2.4/site-packages`
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 UNIX 或 Linux 上 `/usr/local/lib/python2.4/site-packages` 或 `/usr/lib/python2.4/site-packages`
- en: On Microsoft Windows `C:\Python or C:\Python2x`
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 上 `C:\Python 或 C:\Python2x`
- en: On MacOS `Python:Lib:site-packages`
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 MacOS 上 `Python:Lib:site-packages`
- en: 'On UNIX or Linux it will depend how your Python installation has been deployed,
    but the directories given above are the most common. When importing a module,
    Python will look into a list of directories, some defaults and others provided
    by the user, until it finds a matching module or else an exception will be raised.
    The searched list can be modified either by defining the `PYTHONPATH` environment
    variable or by amending it from the code itself as follows:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在 UNIX 或 Linux 上，这取决于你的 Python 安装方式，但上述目录是最常见的。当导入一个模块时，Python 会查找一系列目录，包括一些默认目录和用户提供的目录，直到找到匹配的模块，否则会引发异常。搜索列表可以通过定义
    `PYTHONPATH` 环境变量或从代码本身进行修改，如下所示：
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Note
  id: totrans-23
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `PYTHONPATH` environment variable is one of the variables read by the Python
    engine when it is being launched. It contains additional paths to append to the
    searched list of paths for third-party modules and packages.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: '`PYTHONPATH` 环境变量是 Python 引擎启动时读取的变量之一。它包含附加到第三方模块和包搜索列表的路径。'
- en: Another method is to set a file named after the package with the `.pth` extension.
    This file should contain the full path of the package.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 另一种方法是设置一个以包命名的文件，并带有 `.pth` 扩展名。此文件应包含包的完整路径。
- en: Notwithstanding its simplicity, this algorithm has its limitations. Since the
    `sys.path` list is ordered you have to make sure that if two paths contain the
    same module with different versions, the one your application imports is the first
    one to be reached. This leads us to the following package versioning problem.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管这个算法很简单，但它有其局限性。由于 `sys.path` 列表是有序的，您必须确保如果两个路径包含具有不同版本的相同模块，则您的应用程序导入的是第一个到达的模块。这导致我们面临以下软件包版本问题。
- en: Imagine that you install CherryPy 2.2.1 in your global installation of Python;
    it would be available under the directory `/usr/local/lib/site-packages/cherrypy`.
    However, the path does not contain the version information of the package. Therefore,
    if you must install CherryPy 3.0.0 as well, you have to overwrite the existing
    installation.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 假设您在全局安装的 Python 中安装了 CherryPy 2.2.1；它将在 `/usr/local/lib/site-packages/cherrypy`
    目录下可用。然而，路径中不包含软件包的版本信息。因此，如果您必须安装 CherryPy 3.0.0，您必须覆盖现有的安装。
- en: Luckily the Python community has come up with a solution to this problem—eggs.
    An **egg** is a compressed folder containing all the files and sub-folders of
    a package with the version details of the package in its name.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Python 社区已经找到了这个问题的解决方案——egg。一个 **egg** 是一个包含软件包所有文件和子目录的压缩文件夹，其名称中包含软件包的版本详细信息。
- en: Note
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: An egg is a distributable bundle, by default zipped, of a Python package or
    module including information such as the author and the version of the package.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 egg 是一个可分发捆绑包，默认情况下是压缩的，包含一个 Python 软件包或模块，包括作者和软件包版本等信息。
- en: 'For example, CherryPy 2.2.1 built by Python 2.4 would look like the following:
    `Cherrypy-2.2.1-py2.4.egg`. An egg by itself is not very useful; its deployment
    requires easy_install, a Python module that contains the logic for handling eggs.
    This means you can have multiple versions deployed in the same directory and leave
    it up to easy_install to decide which one to load.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，由 Python 2.4 构建的 CherryPy 2.2.1 将看起来像以下这样：`Cherrypy-2.2.1-py2.4.egg`。egg
    本身并不是非常有用；它的部署需要 easy_install，这是一个包含处理 egg 逻辑的 Python 模块。这意味着您可以在同一目录下部署多个版本，并让
    easy_install 决定加载哪一个。
- en: In the next sections we will see in detail how to install CherryPy using the
    most common cases.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的章节中，我们将详细说明如何使用最常见的情况安装 CherryPy。
- en: Installation from a Tarball
  id: totrans-33
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从 Tarball 安装
- en: A **tarball** is a compressed archive of a file or directory. The name comes
    from the use of the tar utility found on UNIX and related operating systems.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 **tarball** 是文件或目录的压缩存档。这个名字来源于 UNIX 和相关操作系统上发现的 tar 工具的使用。
- en: Note
  id: totrans-35
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Historically the compression used has usually been `gzip` and the extension
    of a *tarball* is either `.tar.gz` or `.tgz`.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 历史上使用的压缩格式通常是 `gzip`，而 *tarball* 的扩展名可以是 `.tar.gz` 或 `.tgz`。
- en: CherryPy provides a tarball for each release whether it is alpha, beta, release
    candidate, or stable. They can all be retrieved from [http://download.cherrypy.org/](http://download.cherrypy.org/).
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy 为每个发布版本提供 tarball，无论是 alpha、beta、候选发布还是稳定版本。它们都可以从 [http://download.cherrypy.org/](http://download.cherrypy.org/)
    获取。
- en: CherryPy tarballs contain the complete source code of the library.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: CherryPy tarballs 包含库的完整源代码。
- en: '![Installation from a Tarball](img/1848_02_01.jpg)'
  id: totrans-39
  prefs: []
  type: TYPE_IMG
  zh: '![从 Tarball 安装](img/1848_02_01.jpg)'
- en: 'To install CherryPy from a tarball you need to go through the following steps:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 要从 tarball 安装 CherryPy，您需要经过以下步骤：
- en: 1\. Download the version that interests you from [http://download.cherrypy.org/](http://download.cherrypy.org/).
  id: totrans-41
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1. 从 [http://download.cherrypy.org/](http://download.cherrypy.org/) 下载您感兴趣版本。
- en: '2\. Go to the directory where the tarball has been downloaded and uncompress
    it:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2. 前往已下载 tarball 的目录，并解压缩它：
- en: 'If you are using Linux, type the following command:'
  id: totrans-43
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在使用 Linux，请输入以下命令：
- en: '[PRE2]'
  id: totrans-44
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the given command, `x.y.z` is the version you have fetched.
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在给定的命令中，`x.y.z` 是您获取的版本。
- en: If you are running Microsoft Windows, you can use a utility such as 7-Zip to
    uncompress the archive via a graphical interface.
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果您正在运行 Microsoft Windows，您可以使用 7-Zip 等实用程序通过图形界面解压缩存档。
- en: '3\. Move to the newly created directory and enter the following command, which
    will build CherryPy:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3. 移动到新创建的目录，并输入以下命令，这将构建 CherryPy：
- en: '[PRE3]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '4\. Finally, in order to do a global installation you have to issue the following
    command (you will more than likely need administrator permissions):'
  id: totrans-49
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4. 最后，为了进行全局安装，您必须发出以下命令（您很可能需要管理员权限）：
- en: '[PRE4]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Note
  id: totrans-51
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that these commands will have to be issued from a command line. Under Microsoft
    Windows you will run those from a DOS command prompt
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些命令必须从命令行发出。在Microsoft Windows下，你将从一个DOS命令提示符运行这些命令。
- en: The above steps will perform a global installation of CherryPy on your system
    for the default Python environment. There are cases where this is not suitable
    or not possible. For example, you may want to install CherryPy only for a given
    version of Python; in that case you will have to specify the correct Python binary
    such as `python2.4` in steps 3 and 4 mentioned earlier.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 以上步骤将在你的系统上为默认Python环境全局安装CherryPy。有些情况下这可能不适合或不可行。例如，你可能只想为Python的特定版本安装CherryPy；在这种情况下，你将不得不指定正确的Python二进制文件，例如在前面提到的第3和第4步中指定`python2.4`。
- en: 'It may also happen that you prefer not to do a global installation, in that
    case the quickest way under UNIX and Linux is to replace step 4 mentioned earlier
    with:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 也可能发生的情况是你不想进行全局安装，在这种情况下，在UNIX和Linux下最快的方法是将前面提到的第4步替换为：
- en: '[PRE5]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This will put the files in `$HOME/lib/python` where `$HOME` represents your
    home directory.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这将把文件放在`$HOME/lib/python`中，其中`$HOME`代表你的家目录。
- en: 'Under Microsoft Windows, which has no knowledge of `HOME`, you would do the
    following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在没有了解`HOME`的Microsoft Windows下，你会这样做：
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The path you choose is not important in itself and you can use whatever suits
    your environment.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你选择的路径本身并不重要，你可以使用适合你环境的任何路径。
- en: 'Then you will have to make sure Python goes through that directory when you
    need to import modules. The easiest way is to set the `PYTHONPATH` environment
    variable to the following:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 然后你必须确保当你需要导入模块时Python会通过那个目录。最简单的方法是将`PYTHONPATH`环境变量设置为以下内容：
- en: On Linux using a bash shell
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux中使用bash shell
- en: '[PRE7]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: On Microsoft Windows using a command prompt
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Microsoft Windows中使用命令提示符
- en: '[PRE8]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Note
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that this will only last while the Command window is opened and will be
    dropped once you close it. To make the changes permanent you should set the global
    `PYTHONPATH` variable via **System Properties | Advanced | Environment Variables**.
  id: totrans-66
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，这只会持续到命令窗口打开时，一旦你关闭它，这些更改就会被丢弃。为了使更改永久生效，你应该通过**系统属性 | 高级 | 环境变量**设置全局`PYTHONPATH`变量。
- en: On MacOS using a `csh` shell
  id: totrans-67
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在MacOS中使用`csh` shell
- en: '[PRE9]'
  id: totrans-68
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: The `PYTHONPATH` environment variable will be read at startup by the Python
    interpreter, which will append it to its internal system path.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`PYTHONPATH`环境变量将在启动时被Python解释器读取，并将其追加到其内部系统路径。'
- en: Installation through Easy Install
  id: totrans-70
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 通过Easy Install安装
- en: '`Easy_install` is a Python module that can be found on the **Python Enterprise
    Application Kit** (**PEAK**) website to facilitate the deployment of Python packages
    and modules. From the developer''s point of view, it provides an easy API to import
    Python modules either for a given version or a range of versions. For instance,
    here is what you would do to load the first CherryPy version greater than 2.2
    found in your environment:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`Easy_install`是一个可以在**Python Enterprise Application Kit**（**PEAK**）网站上找到的Python模块，用于简化Python包和模块的部署。从开发者的角度来看，它提供了一个简单的API来导入Python模块，无论是特定版本还是一系列版本。例如，以下是你如何加载在环境中找到的第一个大于2.2的CherryPy版本的操作：'
- en: '[PRE10]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: From the user's point of view it simplifies the procedure of downloading, building,
    and deploying Python products.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 从用户的角度来看，它简化了下载、构建和部署Python产品的过程。
- en: 'Before installing CherryPy, we must install `easy_install` itself. Download
    the `ez_setup.py` module from [http://peak.telecommunity.com/dist/ez_setup.py](http://peak.telecommunity.com/dist/ez_setup.py)
    and run it as follows, as a user with administrative rights on the computer:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装CherryPy之前，我们必须安装`easy_install`本身。从[http://peak.telecommunity.com/dist/ez_setup.py](http://peak.telecommunity.com/dist/ez_setup.py)下载`ez_setup.py`模块，并以具有计算机管理员权限的用户身份运行，如下所示：
- en: '[PRE11]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'If you do not have administrator permission, you can use the `-install-dir
    (-d)` option as follows:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有管理员权限，你可以使用`-install-dir (-d)`选项，如下所示：
- en: '[PRE12]'
  id: totrans-77
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Make sure that `/some/path` is part of the Python system path. You can set `PYTHONPATH`
    to that directory for example.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 确保`/some/path`是Python系统路径的一部分。例如，你可以将`PYTHONPATH`设置为那个目录。
- en: 'This will set up your environment to support easy_install. Then to install
    a Python product that supports easy_install, you should issue the following command:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这将设置你的环境以支持easy_install。然后，为了安装支持easy_install的Python产品，你应该发出以下命令：
- en: '[PRE13]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: easy_install will search the **Python Package Index** (**PyPI**) to find the
    given product. PyPI is a centralized repository of information about Python products.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: easy_install将会搜索**Python包索引**（**PyPI**）以找到给定产品。PyPI是关于Python产品的信息集中存储库。
- en: '![Installation through Easy Install](img/1848_02_02.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![通过Easy Install安装](img/1848_02_02.jpg)'
- en: 'In order to deploy the latest available version of CherryPy, you should then
    issue the following command:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 为了部署CherryPy的最新可用版本，你应该发出以下命令：
- en: '[PRE14]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'easy_install will then download CherryPy, build, and install it globally to
    your Python environment. If you prefer installing it in a specific location, you
    will have to enter the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，easy_install将会下载CherryPy，构建并全局安装到你的Python环境中。如果你希望将其安装到特定位置，你需要输入以下命令：
- en: '[PRE15]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Once installed, you will have a file named `cherrypy.x.y.z-py2.4.egg` depending
    on the latest version of CherryPy.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，你将有一个名为`cherrypy.x.y.z-py2.4.egg`的文件，这取决于CherryPy的最新版本。
- en: Installation from Subversion
  id: totrans-88
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从Subversion安装
- en: Subversion is an excellent open-source revision control system that allows developers
    to carry out projects in a controlled and concurrent manner.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: Subversion是一个优秀的开源版本控制系统，允许开发者以受控和并发的方式执行项目。
- en: The basic principle of such systems is to register a resource and then keep
    track of every change made to it, so that any developer can retrieve any previous
    version, compare two versions, or even follow the evolution over time of the said
    resource. A resource can be a source code file, a binary, an image, documentation,
    or anything that is expressible in machine-readable form.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 这种系统的基本原理是注册一个资源，并跟踪对其所做的每个更改，以便任何开发者都可以检索任何以前的版本，比较两个版本，甚至跟踪该资源的演变过程。资源可以是源代码文件、二进制文件、图像、文档或任何可以用机器可读形式表达的东西。
- en: Subversion is centralized, so a project is managed by a subversion server and
    each client has a copy of it. The developer works on that copy and commits back
    any changes he or she has made. When a conflict arises, for instance, if another
    developer has modified the same file and has committed it already, the server
    will let you know and forbid your commit until you resolve the issue.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: Subversion是集中的，因此项目由Subversion服务器管理，每个客户端都有一个副本。开发者在这个副本上工作，并将所做的任何更改提交回去。当出现冲突时，例如，如果另一个开发者已经修改了相同的文件并提交了它，服务器会通知你，并禁止你提交，直到你解决问题。
- en: Subversion is atomic, which means that if a commit fails on one file the whole
    commit fails. On the other hand if it succeeds the entire project revision is
    incremented, not just the files involved.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Subversion是原子的，这意味着如果一个提交在某个文件上失败，整个提交都会失败。另一方面，如果它成功了，整个项目的修订版本将会增加，而不仅仅是涉及的文件。
- en: Note
  id: totrans-93
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Subversion is often viewed as the successor of CVS and is considered much friendlier.
    However, other revision systems also exist such as Monotone or Darcs.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: Subversion通常被视为CVS的后继者，并且被认为更加友好。然而，也存在其他版本控制系统，如Monotone或Darcs。
- en: Under Linux, you can either install Subversion from its sources or using a package
    manager. Let's describe the procedure for the source code.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux下，你可以从源代码安装Subversion，或者使用包管理器。让我们描述一下源代码的安装过程。
- en: 1\. Get the latest tarball from [http://subversion.tigris.org/](http://subversion.tigris.org/)
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 1. 从[http://subversion.tigris.org/](http://subversion.tigris.org/)获取最新的tarball。
- en: '2\. Then type the following command in the command console:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 2. 然后在命令控制台中输入以下命令：
- en: '[PRE16]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '3\. Enter the newly created directory and type: `./configure`'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 3. 进入新创建的目录，并输入：`./configure`
- en: '4\. Then to build the package itself type: `make`'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 4. 然后为了构建软件包本身，输入：`make`
- en: '5\. You might later need the Python binding for Subversion as well:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 5. 你可能还需要Subversion的Python绑定：
- en: '[PRE17]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '6\. To install Subversion globally, you will need to be the administrator and
    then enter: `make install; make install-swig-py`'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 6. 要全局安装Subversion，你需要是管理员，然后输入：`make install; make install-swig-py`
- en: Most of the time, under Linux or UNIX, it is easier to use Subversion through
    the command line. However, if you prefer to use a graphical interface, I would
    advise you to install a fat client application such as eSvn or kdesvn.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 在Linux或UNIX下，大多数时候，通过命令行使用Subversion更容易。然而，如果你更喜欢使用图形界面，我建议你安装一个肥客户端应用程序，如eSvn或kdesvn。
- en: '![Installation from SubversionCherryPyinstalling, easy_install used](img/1848_02_03.jpg)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![从Subversion安装CherryPy，使用easy_install安装](img/1848_02_03.jpg)'
- en: Under Microsoft Windows, it is much easier to directly use a graphical application
    such as TortoiseSVN, which will install the Subversion client as well.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 下，直接使用图形应用程序（如 TortoiseSVN）会更容易，它将安装 Subversion 客户端。
- en: 'Getting CherryPy using Subversion is recommended in the following situations:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 在以下情况下建议使用 Subversion 获取 CherryPy：
- en: A feature exists or a bug has been fixed and is only available in code under
    development.
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 存在了一个功能或修复了一个错误，并且这些功能或错误仅在开发中的代码中可用。
- en: You decide to work on CherryPy itself.
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你决定专注于 CherryPy 本身的工作。
- en: You need to branch from the main trunk in order to *try and see* a feature,
    a new design, or simply backport bug fixing in a previous release.
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你需要从主 trunk 分支出来，以便 *尝试并查看* 一个功能、一个新的设计，或者简单地回滚到之前版本中的错误修复。
- en: 'In order to use the most recent version of the project, you will first need
    to check out the trunk folder found on the Subversion repository. Enter the following
    command from a shell:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用项目的最新版本，你首先需要从 Subversion 仓库中找到的 trunk 文件夹检出。从 shell 中输入以下命令：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: Note
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Under Microsoft Windows you can do this from a command line or simply use TortoiseSVN.
    Please refer to its documentation for more information.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 下，你可以从命令行操作，或者简单地使用 TortoiseSVN。请参阅其文档以获取更多信息。
- en: 'This will create a `cherrypy` directory and download the complete source code
    into it. As it is usually not recommended to deploy globally a version under development;
    you would type the following command to install CherryPy into a local directory:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 这将创建一个 `cherrypy` 目录并将完整的源代码下载到其中。由于通常不建议部署开发中的版本，因此你会输入以下命令将 CherryPy 安装到本地目录：
- en: 'Under Linux and related systems using a console:'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 和相关系统使用控制台的情况下：
- en: '[PRE19]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Under Microsoft Windows using the command prompt:'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Microsoft Windows 使用命令提示符：
- en: '[PRE20]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then simply point the `PYTHONPATH` environment variable to the chosen directory.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 然后将 `PYTHONPATH` 环境变量指向所选目录。
- en: Note that this directory does not matter as long as it is reachable by the Python
    process via PYTHONPATH or the standard sys module.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，只要这个目录可以通过 PYTHONPATH 或标准 sys 模块被 Python 进程访问，它就无关紧要。
- en: Testing your Installation
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试你的安装
- en: 'Whichever way you decide to install and deploy CherryPy in your environment,
    you must be able to import it from the Python shell as follows:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 无论你决定以何种方式在你的环境中安装和部署 CherryPy，你都必须能够从 Python shell 中导入它，如下所示：
- en: '[PRE21]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'If you do not install CherryPy globally to your Python environment, do not
    forget to set the `PYTHONPATH` environment variable, else you will get an error
    as follows:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有将 CherryPy 全局安装到 Python 环境中，不要忘记设置 `PYTHONPATH` 环境变量，否则你将得到以下错误：
- en: '[PRE22]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Keeping CherryPy Up to Date
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 保持 CherryPy 更新
- en: Updating or upgrading CherryPy will depend on the approach you have taken to
    install it.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 更新或升级 CherryPy 将取决于你安装它所采取的方法。
- en: Installed using a tarball
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 tarball 安装
- en: Usually the cleanest way to ensure the update goes smoothly is to first remove
    the directory containing the package from its location in `sys.path`, then to
    follow the steps described previously to install the library.
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 通常，确保更新顺利进行的最佳方式是首先从 `sys.path` 中的位置删除包含包的目录，然后遵循之前描述的步骤安装库。
- en: Installed using easy_install
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 easy_install 安装
- en: Updating is one of the key features provided by easy_install.
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 更新是 easy_install 提供的关键功能之一。
- en: '[PRE23]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: As the eggs containing the library are named after the version they serve, you
    can simply follow the steps defined in the previous section without removing an
    existing egg. Be careful though, as this only holds true when the application
    running specifies precisely which version it requires.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于包含库的 eggs 以其服务的版本命名，你可以简单地遵循上一节中定义的步骤，而无需删除现有的 egg。但请注意，这仅在应用程序运行时明确指定所需版本的情况下才成立。
- en: Installed using Subversion
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Subversion 安装
- en: The interesting aspect of this approach is that you can update the library almost
    continuously. To update your installation, you need to enter `svn` update from
    the top directory holding the source code and then issue the `python setup.py
    install` command.
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这种方法的有趣之处在于你可以几乎连续地更新库。要更新你的安装，你需要从包含源代码的顶级目录中输入 `svn update` 命令，然后发出 `python
    setup.py install` 命令。
- en: Note
  id: totrans-137
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As always remember to take a backup of your files before doing an update.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 像往常一样，在更新之前请务必备份你的文件。
- en: Summary
  id: totrans-139
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: We have discussed in this chapter the different ways of installing CherryPy
    in your environment via three techniques. The traditional approach is to use an
    archive containing all the files of the Python package to install and use the
    `setup.py` module within that archive. A newer and more common way of deploying
    a package is to use the `easy_install` command to install eggs. Finally, if you
    wish to be synchronized with the latest development of CherryPy, you can get the
    package from its Subversion repository. Whichever method you follow, they will
    all lead to CherryPy being available on your system.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了通过三种技术将 CherryPy 安装到您环境中的不同方法。传统的方法是使用包含 Python 包所有文件的存档来安装和使用该存档内的
    `setup.py` 模块。一种较新且更常见的方式是使用 `easy_install` 命令来安装 eggs。最后，如果您希望与 CherryPy 的最新开发同步，您可以从其
    Subversion 仓库获取该包。无论您采用哪种方法，它们都将使 CherryPy 可用您的系统上。
