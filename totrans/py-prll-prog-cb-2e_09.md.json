["```py\nC:\\>pip install winpdb-reborn\n```", "```py\nimport time\nimport os\nfrom random import randint\nfrom threading import Thread\n\nclass MyThreadClass (Thread):\n   def __init__(self, name, duration):\n      Thread.__init__(self)\n      self.name = name\n      self.duration = duration\n   def run(self):\n      print (\"---> \" + self.name + \\\n             \" running, belonging to process ID \"\\\n             + str(os.getpid()) + \"\\n\")\n      time.sleep(self.duration)\n      print (\"---> \" + self.name + \" over\\n\")\ndef main():\n    start_time = time.time()\n\n    # Thread Creation\n    thread1 = MyThreadClass(\"Thread#1 \", randint(1,10))\n    thread2 = MyThreadClass(\"Thread#2 \", randint(1,10))\n    thread3 = MyThreadClass(\"Thread#3 \", randint(1,10))\n\n    # Thread Running\n    thread1.start()\n    thread2.start()\n    thread3.start()\n\n    # Thread joining\n    thread1.join()\n    thread2.join()\n    thread3.join()\n\n    # End \n    print(\"End\")\n\n    #Execution Time\n    print(\"--- %s seconds ---\" % (time.time() - start_time))\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\n python -m winpdb .\\winpdb_reborn_code_example.py\n```", "```py\nclass Pdb_test(object):\n    def __init__(self, parameter):\n    self.counter = parameter\n\n    def go(self):\n        for j in range(self.counter):\n             print (\"--->\",j)\n        return\n\nif __name__ == '__main__':\n    Pdb_test(10).go()\n```", "```py\npython -m pdb pdb_test.py\n> .../pdb_test.py(1)<module>()\n-> class Pdb_test(object):\n(Pdb)\n```", "```py\n>>> import pdb_test\n>>> import pdb\n>>> pdb.run('pdb_test.Pdb_test(10).go()')\n> <string>(1)<module>()\n(Pdb)\n```", "```py\nimport pdb\n\nclass Pdb_test(object):\n    def __init__(self, parameter):\n        self.counter = parameter\n    def go(self):\n        for j in range(self.counter):\n            pdb.set_trace()\n            print (\"--->\",j)\n        return\n\nif __name__ == '__main__':\n    Pdb_test(10).go()\n```", "```py\n-> print (\"--->\",j)\n(Pdb) \n```", "```py\n> python -m pdb pdb_test.py\n-> class Pdb_test(object):\n(Pdb) where\n c:\\python35\\lib\\bdb.py(431)run()\n-> exec(cmd, globals, locals)\n <string>(1)<module>()\n(Pdb)\n```", "```py\n (Pdb) list\n 1 -> class Pdb_test(object):\n 2 def __init__(self, parameter):\n 3 self.counter = parameter\n 4\n 5 def go(self):\n 6 for j in range(self.counter):\n 7 print (\"--->\",j)\n 8 return\n 9\n 10 if __name__ == '__main__':\n 11 Pdb_test(10).go()\n```", "```py\n (Pdb) list 3,9\n 3 self.counter = parameter\n 4\n 5 def go(self):\n 6 for j in range(self.counter):\n 7 print (\"--->\",j)\n 8 return\n 9\n```", "```py\n(Pdb) up\n> <string>(1)<module>()\n(Pdb) up\n> c:\\python35\\lib\\bdb.py(431)run()\n-> exec(cmd, globals, locals)\n(Pdb) down\n> <string>(1)<module>()\n(Pdb) down\n>....\\pdb_test.py(1)<module>()\n-> class Pdb_test(object):\n(Pdb)\n```", "```py\nC:\\>pip install rpdb\n```", "```py\ndism /online /Enable-Feature /FeatureName:TelnetClient\n```", "```py\nimport threading\n\ndef my_func(thread_number):\n    return print('my_func called by thread NÂ°\n        {}'.format(thread_number))\n\ndef main():\n    threads = []\n    for i in range(10):\n        t = threading.Thread(target=my_func, args=(i,))\n        threads.append(t)\n        t.start()\n        t.join()\n\nif __name__ == \"__main__\":\n    main()\n```", "```py\nimport rpdb\ndebugger = rpdb.Rpdb(port=4444)\nrpdb.Rpdb().set_trace()\n```", "```py\npdb is running on 127.0.0.1:4444\n```", "```py\ntelnet localhost 4444\n```", "```py\n (Pdb) next\n> c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py(10)<module>()\n-> def main():\n(Pdb) next\n> c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py(18)<module>()\n-> if __name__ == \"__main__\":\n(Pdb) next\n> c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py(20)<module>()\n-> main()\n(Pdb) next\nmy_func called by thread N 0\nmy_func called by thread N 1\nmy_func called by thread N 2\nmy_func called by thread N 3\nmy_func called by thread N 4\nmy_func called by thread N 5\nmy_func called by thread N 6\nmy_func called by thread N 7\nmy_func called by thread N 8\nmy_func called by thread N 9\n--Return--\n> c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py(20)<module>()->None\n-> main()\n(Pdb)\n```", "```py\nimport rpdb\n```", "```py\ndebugger = rpdb.Rpdb(port=4444)\n```", "```py\nrpdb.Rpdb().set_trace()\n```", "```py\ntelnet localhost 4444\n```", "```py\n> c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py(7)<module>()\n-> def my_func(thread_number):\n(Pdb) help\n\nDocumented commands (type help <topic>):\n========================================\nEOF   c   d   h list q rv undisplay\na cl debug help ll quit s unt\nalias clear disable ignore longlist r source until\nargs commands display interact n restart step up\nb condition down j next return tbreak w\nbreak cont enable jump p retval u whatis\nbt continue exit l pp run unalias where\n\nMiscellaneous help topics:\n==========================\npdb exec\n\n(Pdb)\n```", "```py\n (Pdb) b 5\nBreakpoint 1 at c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py:5\n(Pdb) b 10\nBreakpoint 2 at c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py:10\n```", "```py\n (Pdb) b\nNum Type Disp Enb Where\n1 breakpoint keep yes at c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py:5\n2 breakpoint keep yes at c:\\users\\giancarlo\\desktop\\python parallel programming cookbook 2nd edition\\python parallel programming new book\\chapter_x- code debugging\\rpdb_code_example.py:10\n(Pdb)\n```", "```py\nimport unittest\n\nclass SimpleUnitTest(unittest.TestCase):\n\n    def test(self):\n        self.assertTrue(True)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n-----------------------------------------------------------\nRan 1 test in 0.005s\n\nOK\n```", "```py\nimport unittest\n```", "```py\nclass OutcomesTest(unittest.TestCase):\n```", "```py\n    def testPass(self):\n        return\n```", "```py\n    def testFail(self):\n        self.failIf(True)\n```", "```py\n    def testError(self):\n        raise RuntimeError('test error!')\n```", "```py\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n===========================================================\nERROR: testError (__main__.OutcomesTest)\n-----------------------------------------------------------\nTraceback (most recent call last):\n File \"unittest_outcomes.py\", line 15, in testError\n raise RuntimeError('Errore nel test!')\nRuntimeError: Errore nel test!\n\n===========================================================\nFAIL: testFail (__main__.OutcomesTest)\n-----------------------------------------------------------\nTraceback (most recent call last):\n File \"unittest_outcomes.py\", line 12, in testFail\n self.failIf(True)\nAssertionError\n\n-----------------------------------------------------------\nRan 3 tests in 0.000s\n\nFAILED (failures=1, errors=1)\n```", "```py\nimport unittest\n\nclass TruthTest(unittest.TestCase):\n\n    def testFailUnless(self):\n        self.failUnless(True)\n\n    def testAssertTrue(self):\n        self.assertTrue(True)\n\n    def testFailIf(self):\n        self.assertFalse(False)\n\n    def testAssertFalse(self):\n        self.assertFalse(False)\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n> python unittest_failwithmessage.py -v\ntestFail (__main__.FailureMessageTest) ... FAIL\n\n===========================================================\nFAIL: testFail (__main__.FailureMessageTest)\n-----------------------------------------------------------\nTraceback (most recent call last):\n File \"unittest_failwithmessage.py\", line 9, in testFail\n self.failIf(True, 'Il messaggio di fallimento va qui')\nAssertionError: Il messaggio di fallimento va qui\n\n-----------------------------------------------------------\nRan 1 test in 0.000s\n\nFAILED (failures=1)\nrobby@robby-desktop:~/pydev/pymotw-it/dumpscripts$ python unittest_truth.py -v\ntestAssertFalse (__main__.TruthTest) ... ok\ntestAssertTrue (__main__.TruthTest) ... ok\ntestFailIf (__main__.TruthTest) ... ok\ntestFailUnless (__main__.TruthTest) ... ok\n\n-----------------------------------------------------------\nRan 4 tests in 0.000s\n\nOK\n```", "```py\nimport unittest\n\ndef raises_error(*args, **kwds):\n    print (args, kwds)\n    raise ValueError\\\n        ('Valore non valido:'+ str(args)+ str(kwds))\n\nclass ExceptionTest(unittest.TestCase):\n    def testTrapLocally(self):\n        try:\n            raises_error('a', b='c')\n        except ValueError:\n            pass\n        else:\n            self.fail('Non si vede ValueError')\n\n    def testFailUnlessRaises(self):\n       self.assertRaises\\\n               (ValueError, raises_error, 'a', b='c')\n\nif __name__ == '__main__':\n    unittest.main()\n```", "```py\n> python unittest_exception.py -v\ntestFailUnlessRaises (__main__.ExceptionTest) ... ('a',) {'b': 'c'}\nok\ntestTrapLocally (__main__.ExceptionTest) ...('a',) {'b': 'c'}\nok\n\n-----------------------------------------------------------\nRan 2 tests in 0.000s\n\nOK\n```", "```py\nC:\\>pip install nose\n```", "```py\nC:\\>python setup.py install\n```", "```py\nC:\\>nosetests only_test_this.py\n```", "```py\nC:\\>nosetests test.module\nC:\\>nosetests another.test:TestCase.test_method\nC:\\>nosetests a.test:TestCase\nC:\\>nosetests /path/to/test/file.py:test_function\n```", "```py\nC:\\>nosetests -w /path/to/tests\n```", "```py\nC:\\>nosetests /path/to/tests /another/path/to/tests\n```", "```py\nfrom nose.tools import eq_ \n```", "```py\nclass TestSuite:\n    def test_mult(self):\n        eq_(2*2,4)\n\n    def ignored(self):\n        eq_(2*2,3)\n```", "```py\n    def test_mult(self):\n        eq_(2*2,4)\n\n    def ignored(self):\n        eq_(2*2,3)\n```", "```py\nC:\\>nosetests -v testset.py\ntestset.TestSuite.test_mult ... ok\n\n-----------------------------------------------------------\nRan 1 tests in 0.001s\n\nOK\n```"]