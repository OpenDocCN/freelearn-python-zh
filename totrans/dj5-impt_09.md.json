["```py\n from django.db import models <st c=\"1547\">from django.contrib.auth.models import User</st> class Movie(models.Model):\n    … <st c=\"1620\">class Review(models.Model):</st>\n <st c=\"1647\">id = models.AutoField(primary_key=True)</st>\n <st c=\"1687\">comment = models.CharField(max_length=255)</st>\n <st c=\"1730\">date = models.DateTimeField(auto_now_add=True)</st>\n <st c=\"1777\">movie = models.ForeignKey(Movie,</st>\n <st c=\"1810\">on_delete=models.CASCADE)</st>\n <st c=\"1836\">user = models.ForeignKey(User,</st>\n**<st c=\"1867\">on_delete=models.CASCADE)</st>**\n **<st c=\"1893\">def __str__(self):</st>**\n **<st c=\"1912\">return str(self.id) + ' - ' + self.movie.name</st>**\n```", "```py\n python3 manage.py makemigrations\npython3 manage.py migrate\n```", "```py\n python manage.py makemigrations\npython manage.py migrate\n```", "```py\n from django.contrib import admin\nfrom .models import Movie<st c=\"4331\">, Review</st> class MovieAdmin(admin.ModelAdmin):\n    ordering = ['name']\n    search_fields = ['name']\nadmin.site.register(Movie, MovieAdmin) <st c=\"4561\">/admin</st>. The review model will now show up (as shown in *<st c=\"4616\">Figure 9</st>**<st c=\"4624\">.2</st>*):\n\t\t\t![Figure 9.2 – The admin page with reviews available](img/B22457_09_2.jpg)\n\n\t\t\t<st c=\"4812\">Figure 9.2 – The admin page with reviews available</st>\n\t\t\t<st c=\"4862\">Now that we have created and applied our</st> `<st c=\"4904\">Review</st>` <st c=\"4910\">model, let’s create the functionality to</st> <st c=\"4952\">create reviews.</st>\n\t\t\t<st c=\"4967\">Creating reviews</st>\n\t\t\t<st c=\"4984\">To allow users to</st> <st c=\"5002\">create reviews, we need to follow the</st> <st c=\"5041\">next steps:</st>\n\n\t\t\t\t1.  <st c=\"5052\">Update the</st> `<st c=\"5064\">movies.show</st>` <st c=\"5075\">template.</st>\n\t\t\t\t2.  <st c=\"5085\">Define the</st> `<st c=\"5097\">create_review</st>` <st c=\"5110\">function.</st>\n\t\t\t\t3.  <st c=\"5120\">Configure</st> <st c=\"5130\">the</st> `<st c=\"5135\">create</st>` `<st c=\"5142\">review</st>` <st c=\"5148\">URL.</st>\n\n\t\t\t<st c=\"5153\">Updating the movies.show template</st>\n\t\t\t<st c=\"5187\">We will include a form to</st> <st c=\"5213\">allow authenticated users to create reviews.</st> <st c=\"5259\">This form will be included in the</st> `<st c=\"5293\">movies.show</st>` <st c=\"5304\">template.</st> <st c=\"5315\">In the</st> `<st c=\"5322\">/movies/templates/movies/show.html</st>` <st c=\"5356\">file, add the following, as presented</st> <st c=\"5395\">in bold:</st>\n\n```", "```py\n\n **<st c=\"6264\">Let’s explain the</st> <st c=\"6282\">preceding code:</st>\n\n*   <st c=\"6298\">We use the</st> `<st c=\"6310\">{% if user.is_authenticated %}</st>` <st c=\"6340\">DTL conditional statement that checks whether the user is authenticated (logged in).</st> <st c=\"6426\">If the user is authenticated, the block of HTML code within the</st> `<st c=\"6490\">if</st>` <st c=\"6492\">statement will be rendered</st> <st c=\"6520\">and displayed.</st>\n\n*   <st c=\"6534\">We create an HTML form with the</st> `<st c=\"6567\">POST</st>` <st c=\"6571\">method and the</st> `<st c=\"6587\">csrf_token</st>` <st c=\"6597\">token.</st> <st c=\"6605\">This form contains a single input named</st> `<st c=\"6645\">comment</st>`<st c=\"6652\">. This input stores the review text.</st> <st c=\"6689\">The form also contains a</st> <st c=\"6714\">submit button.</st>\n\n*   <st c=\"6728\">The form is linked</st> <st c=\"6747\">to the</st> `<st c=\"6755\">movies.create_review</st>` <st c=\"6775\">URL, and it also passes the movie ID to that URL.</st> <st c=\"6826\">The movie ID will be used to link the current comment with the movie that</st> <st c=\"6900\">it represents.</st>\n\n## <st c=\"6914\">Defining the create_review function</st>\n\n<st c=\"6950\">In</st> `<st c=\"6954\">/movies/views.py</st>`<st c=\"6970\">, add the following, as</st> <st c=\"6994\">presented</st> <st c=\"7004\">in bold:</st>\n\n```", "```py\n\n **<st c=\"7539\">Let’s explain the</st> <st c=\"7558\">preceding code:</st>\n\n*   <st c=\"7573\">We import the</st> `<st c=\"7588\">redirect</st>` <st c=\"7596\">function, which is</st> <st c=\"7616\">used to redirect the user to a</st> <st c=\"7647\">different URL.</st>\n\n*   <st c=\"7661\">We import the</st> `<st c=\"7676\">Review</st>` <st c=\"7682\">model, which will be used to create</st> <st c=\"7719\">new reviews.</st>\n\n*   <st c=\"7731\">We import</st> `<st c=\"7742\">login_required</st>`<st c=\"7756\">, which is used to verify that only logged users can access the</st> `<st c=\"7820\">create_review</st>` <st c=\"7833\">function.</st> <st c=\"7844\">If a guest user attempts to access this function via the corresponding URL, they will be redirected to the</st> <st c=\"7951\">login page.</st>\n\n*   <st c=\"7962\">We create the</st> `<st c=\"7977\">create_review</st>` <st c=\"7990\">function that handles creating</st> <st c=\"8022\">a review.</st>\n\n*   <st c=\"8031\">The</st> `<st c=\"8036\">create_review</st>` <st c=\"8049\">takes two arguments: the</st> `<st c=\"8075\">request</st>` <st c=\"8082\">that contains information about the HTTP request, and the</st> `<st c=\"8141\">id</st>`<st c=\"8143\">, which represents the ID of the movie for which a review is</st> <st c=\"8204\">being created.</st>\n\n*   <st c=\"8218\">Then, we check whether the request method is</st> `<st c=\"8264\">POST</st>` <st c=\"8268\">and the</st> `<st c=\"8277\">comment</st>` <st c=\"8284\">field in the request’s</st> `<st c=\"8308\">POST</st>` <st c=\"8312\">data is not empty.</st> <st c=\"8332\">If that is</st> `<st c=\"8343\">TRUE</st>`<st c=\"8347\">, the</st> <st c=\"8353\">following happens:</st>\n\n*   <st c=\"8371\">We retrieve the movie using</st> `<st c=\"8400\">Movie.objects.get(id=id)</st>` <st c=\"8424\">based on the</st> <st c=\"8438\">provided</st> `<st c=\"8447\">id</st>`<st c=\"8449\">.</st>\n    *   <st c=\"8450\">We create a new</st> `<st c=\"8467\">Review</st>` <st c=\"8473\">object.</st>\n    *   <st c=\"8481\">We set the review properties</st> <st c=\"8511\">as follows:</st>\n        *   <st c=\"8522\">We set the</st> `<st c=\"8534\">comment</st>` <st c=\"8541\">based on the comments collected in</st> <st c=\"8577\">the form</st>\n        *   <st c=\"8585\">We set the</st> `<st c=\"8597\">movie</st>`<st c=\"8602\">, based on the retrieved movie from</st> <st c=\"8638\">the database</st>\n        *   <st c=\"8650\">We set the</st> `<st c=\"8662\">user</st>`<st c=\"8666\">, based on the</st> <st c=\"8681\">authenticated user who submitted</st> <st c=\"8714\">the form.</st>\n    *   <st c=\"8723\">Finally, we save the review to the database and redirect the user to the movie</st> <st c=\"8803\">show page.</st>\n\n*   <st c=\"8813\">In the</st> `<st c=\"8821\">else</st>` <st c=\"8825\">case, we redirect the user to the movie show page using the</st> `<st c=\"8886\">redirect('movies.show',</st>` `<st c=\"8910\">id=id)</st>` <st c=\"8916\">code.</st>\n\n## <st c=\"8922\">Configuring the create review URL</st>\n\n<st c=\"8956\">In</st> `<st c=\"8960\">/movies/urls.py</st>`<st c=\"8975\">, add the next path as highlighted</st> <st c=\"9010\">in</st> <st c=\"9012\">bold:</st>\n\n```", "```py\n\n<st c=\"9263\">Let’s analyze the new path.</st> <st c=\"9291\">The</st> `<st c=\"9295\"><int:id></st>` <st c=\"9303\">part indicates that this path expects an integer value to be passed from the URL and that the integer value will be associated with a variable named</st> `<st c=\"9453\">id</st>`<st c=\"9455\">. The</st> `<st c=\"9461\">id</st>` <st c=\"9463\">variable will be used to identify to which movie the review that we want to create is linked.</st> <st c=\"9558\">For example, if the form is submitted to</st> `<st c=\"9599\">movies/1/review/create</st>`<st c=\"9621\">, it indicates that the new review will be associated with the movie</st> <st c=\"9690\">with</st> `<st c=\"9695\">id</st>`<st c=\"9697\">=</st>`<st c=\"9699\">1</st>`<st c=\"9700\">.</st>\n\n<st c=\"9701\">Now save those files, run the</st> <st c=\"9732\">server, and go to</st> `<st c=\"9750\">http://localhost:8000/movies</st>`<st c=\"9778\">. Click on a specific movie and you will see the form to create reviews (</st>*<st c=\"9851\">Figure 9</st>**<st c=\"9860\">.3</st>*<st c=\"9862\">).</st>\n\n\t\t\t![Figure 9.3 – A movie page with the review form](img/B22457_09_3.jpg)\n\n<st c=\"10073\">Figure 9.3 – A movie page with the review form</st>\n\n<st c=\"10119\">Then, enter a comment and click</st> **<st c=\"10152\">Add Review</st>**<st c=\"10162\">. A new review should be created, and you should be redirected to the movie show page.</st> <st c=\"10249\">Go to the admin panel, click</st> **<st c=\"10278\">Reviews</st>**<st c=\"10285\">, and you will see the new review there (</st>*<st c=\"10326\">Figure 9</st>**<st c=\"10335\">.4</st>*<st c=\"10337\">).</st>\n\n\t\t\t![Figure 9.4 – The reviews admin page](img/B22457_09_4.jpg)\n\n<st c=\"10478\">Figure 9.4 – The reviews admin page</st>\n\n<st c=\"10513\">Let’s now include a</st> <st c=\"10533\">functionality to read and list reviews from our</st> <st c=\"10582\">web application.</st>\n\n# <st c=\"10598\">Reading reviews</st>\n\n<st c=\"10614\">To be able to read and list reviews, we</st> <st c=\"10655\">need to follow the steps</st> <st c=\"10680\">that follow:</st>\n\n1.  <st c=\"10692\">Update the</st> `<st c=\"10704\">movies.show</st>` <st c=\"10715\">template.</st>\n\n2.  <st c=\"10725\">Update the</st> `<st c=\"10737\">show</st>` <st c=\"10741\">function.</st>\n\n## <st c=\"10751\">Updating the movies.show template</st>\n\n<st c=\"10785\">We will list the</st> <st c=\"10802\">reviews in the</st> `<st c=\"10818\">movies.show</st>` <st c=\"10829\">template.</st> <st c=\"10840\">In the</st> `<st c=\"10847\">/movies/templates/movies/show.html</st>` <st c=\"10881\">file, add the following, as highlighted</st> <st c=\"10922\">in bold:</st>\n\n```", "```py\n\n<st c=\"11353\">We have added a new section inside the template.</st> <st c=\"11403\">This section iterates through the</st> `<st c=\"11437\">reviews</st>` <st c=\"11444\">and displays</st> <st c=\"11457\">the review</st> `<st c=\"11469\">date</st>` <st c=\"11473\">and</st> `<st c=\"11478\">comment</st>`<st c=\"11485\">, as well as the username of the user who created</st> <st c=\"11535\">the review.</st>\n\n## <st c=\"11546\">Updating the show function</st>\n\n<st c=\"11573\">In</st> `<st c=\"11577\">/movies/views.py</st>`<st c=\"11593\">, add the following, as</st> <st c=\"11616\">highlighted</st> <st c=\"11629\">in bold:</st>\n\n```", "```py\n\n<st c=\"11939\">Let’s explain the</st> <st c=\"11958\">preceding code.</st>\n\n*   <st c=\"11973\">We retrieve all review objects that are associated with the movie that we are showing.</st> <st c=\"12061\">To do this, we use the</st> `<st c=\"12084\">filter</st>` <st c=\"12090\">method to limit the query to reviews related to the</st> <st c=\"12143\">specific movie.</st>\n\n*   <st c=\"12158\">We add those reviews to the</st> `<st c=\"12187\">template_data</st>` <st c=\"12200\">dictionary, which is passed to the</st> `<st c=\"12236\">movies/show.html</st>` <st c=\"12252\">template.</st>\n\n<st c=\"12262\">Now, save those files, run the server, and go to</st> `<st c=\"12312\">http://localhost:8000/movies</st>`<st c=\"12340\">. Click on a specific movie that contains reviews and you will see the movie information, including its corresponding reviews (</st>*<st c=\"12467\">Figure 9</st>**<st c=\"12476\">.5</st>*<st c=\"12478\">).</st>\n\n\t\t\t![Figure 9.5 – A movie page with reviews](img/B22457_09_5.jpg)\n\n<st c=\"12700\">Figure 9.5 – A movie page with reviews</st>\n\n<st c=\"12738\">Now, let’s move on</st> <st c=\"12757\">to</st> <st c=\"12761\">updating reviews.</st>\n\n# <st c=\"12778\">Updating a review</st>\n\n<st c=\"12796\">To be able to update reviews, we need to</st> <st c=\"12838\">follow</st> <st c=\"12845\">these steps:</st>\n\n1.  <st c=\"12857\">Update the</st> `<st c=\"12869\">movies.show</st>` <st c=\"12880\">template.</st>\n\n2.  <st c=\"12890\">Create the</st> `<st c=\"12902\">movies</st>` `<st c=\"12909\">edit_review</st>` <st c=\"12920\">template.</st>\n\n3.  <st c=\"12930\">Define the</st> `<st c=\"12942\">edit_review</st>` <st c=\"12953\">function.</st>\n\n4.  <st c=\"12963\">Configure the</st> `<st c=\"12978\">edit</st>` `<st c=\"12983\">review</st>` <st c=\"12989\">URL.</st>\n\n## <st c=\"12994\">Updating movies.show template</st>\n\n<st c=\"13024\">In</st> `<st c=\"13028\">/movies/templates/movies/show.html</st>` <st c=\"13062\">file, add the following</st> <st c=\"13087\">bold text:</st>\n\n```", "```py\n\n<st c=\"13568\">We added a code snippet for</st> <st c=\"13597\">each review that is displayed.</st> <st c=\"13628\">That code checks whether a user is authenticated and whether the user is the one who wrote a specific review.</st> <st c=\"13738\">If both of these conditions are true, it will render the</st> `<st c=\"13827\">movies.edit_review</st>` <st c=\"13845\">URL.</st>\n\n## <st c=\"13850\">Creating the movies edit_review template</st>\n\n<st c=\"13891\">Now, in</st> `<st c=\"13900\">/movies/templates/movies/</st>`<st c=\"13925\">, create a new file,</st> `<st c=\"13946\">edit_review.html</st>`<st c=\"13962\">. For now, fill it in with</st> <st c=\"13989\">the</st> <st c=\"13993\">following:</st>\n\n```", "```py\n\n<st c=\"14538\">We have created a form to edit the review.</st> <st c=\"14582\">This form is very similar to the review creation form.</st> <st c=\"14637\">The differences</st> <st c=\"14653\">are</st> <st c=\"14657\">as follows:</st>\n\n*   <st c=\"14668\">We removed the form action, which means that the form will be submitted to the</st> <st c=\"14748\">current URL</st>\n\n*   <st c=\"14759\">We displayed the current review comment value inside the</st> <st c=\"14817\">text area</st>\n\n*   <st c=\"14826\">We modified the</st> <st c=\"14843\">button text</st>\n\n## <st c=\"14854\">Defining the edit_review function</st>\n\n<st c=\"14888\">In</st> `<st c=\"14892\">/movies/views.py</st>`<st c=\"14908\">, add the</st> <st c=\"14917\">following, as highlighted</st> <st c=\"14944\">in bold:</st>\n\n```", "```py\n\n **<st c=\"15641\">Let’s explain the</st> <st c=\"15660\">preceding code:</st>\n\n*   <st c=\"15675\">We import the</st> `<st c=\"15690\">get_object_or_404</st>` <st c=\"15707\">function, which retrieves an object from the database or</st> <st c=\"15764\">raises an HTTP 404 (Not Found) error (if the object is</st> <st c=\"15820\">not found).</st>\n\n*   <st c=\"15831\">We use the</st> `<st c=\"15843\">@login_required</st>` <st c=\"15858\">decorator to ensure that the</st> `<st c=\"15888\">edit_review</st>` <st c=\"15899\">function can only be accessed by authenticated users.</st> <st c=\"15954\">If an unauthenticated user tries to access this function, they will be redirected to the</st> <st c=\"16043\">login page.</st>\n\n*   <st c=\"16054\">We define the</st> `<st c=\"16069\">edit_review</st>` <st c=\"16080\">function, which takes three parameters: the request, the movie ID, and the</st> <st c=\"16156\">review ID.</st>\n\n*   <st c=\"16166\">We retrieve the</st> `<st c=\"16183\">Review</st>` <st c=\"16189\">object with the given</st> `<st c=\"16212\">review_id</st>`<st c=\"16221\">. If the review does not exist, a 404 error will</st> <st c=\"16270\">be raised.</st>\n\n*   <st c=\"16280\">We check whether the current user (</st>`<st c=\"16316\">request.user</st>`<st c=\"16329\">) is the owner of the review to be edited (</st>`<st c=\"16373\">review.user</st>`<st c=\"16385\">).</st> <st c=\"16389\">If the user does not own the review, the function redirects them to the</st> `<st c=\"16461\">movie.show</st>` <st c=\"16471\">page.</st>\n\n*   <st c=\"16477\">Then, we check whether the request method is</st> `<st c=\"16523\">GET</st>`<st c=\"16526\">. In that case, the function prepares data for the template and renders the</st> `<st c=\"16602\">edit_review.html</st>` <st c=\"16618\">template.</st>\n\n*   <st c=\"16628\">If the request method is</st> `<st c=\"16654\">POST</st>` <st c=\"16658\">and the</st> `<st c=\"16667\">comment</st>` <st c=\"16674\">field in the request’s</st> `<st c=\"16698\">POST</st>` <st c=\"16702\">data is not empty, the</st> <st c=\"16725\">function proceeds to update the review and redirects the user to the movie</st> <st c=\"16801\">show page.</st>\n\n*   <st c=\"16811\">In any other case, the function redirects the user to the movie</st> <st c=\"16876\">show page.</st>\n\n<st c=\"16886\">Note</st>\n\n<st c=\"16891\">You can improve the look and feel of these functionalities by including your own error messages.</st> <st c=\"16989\">You can use the</st> `<st c=\"17005\">login</st>` <st c=\"17010\">template and the</st> `<st c=\"17028\">login</st>` <st c=\"17033\">function, which uses and passes a</st> `<st c=\"17068\">template_data.error</st>`<st c=\"17087\">, as</st> <st c=\"17092\">a base.</st>\n\n## <st c=\"17099\">Configuring the edit_review URL</st>\n\n<st c=\"17131\">In</st> `<st c=\"17135\">/movies/urls.py</st>`<st c=\"17150\">, add the next path, as shown</st> <st c=\"17180\">in</st> <st c=\"17182\">bold:</st>\n\n```", "```py\n\n<st c=\"17526\">This path captures two integer values (the movie ID and review ID) from the URL and passes them to the</st> `<st c=\"17629\">edit_review</st>` <st c=\"17640\">function</st> <st c=\"17649\">as arguments.</st>\n\n<st c=\"17663\">Now, save those files, run the server, and go to</st> `<st c=\"17713\">http://localhost:8000/movies</st>`<st c=\"17741\">. Click on a specific movie that contains a review you created, then click the</st> **<st c=\"17820\">Edit</st>** <st c=\"17824\">button (</st>*<st c=\"17833\">Figure 9</st>**<st c=\"17842\">.6</st>*<st c=\"17844\">).</st>\n\n\t\t\t![Figure 9.6 – A movie page with reviews and an edit button](img/B22457_09_6.jpg)\n\n<st c=\"18050\">Figure 9.6 – A movie page with reviews and an edit button</st>\n\n<st c=\"18107\">An edit form will be shown.</st> <st c=\"18136\">Modify the review and click the</st> **<st c=\"18168\">Edit Review</st>** <st c=\"18179\">button (</st>*<st c=\"18188\">Figure 9</st>**<st c=\"18197\">.7</st>*<st c=\"18199\">).</st>\n\n\t\t\t![Figure 9.7 – The Edit Review page](img/B22457_09_7.jpg)\n\n<st c=\"18270\">Figure 9.7 – The Edit Review page</st>\n\n<st c=\"18303\">You will be redirected to the movie show page.</st> <st c=\"18351\">The new review comment</st> <st c=\"18374\">should appear.</st>\n\n<st c=\"18388\">We just learned how to update</st> <st c=\"18418\">reviews and models in general, so let’s move to the final functionality and learn how to</st> <st c=\"18508\">delete information.</st>\n\n# <st c=\"18527\">Deleting a review</st>\n\n<st c=\"18545\">To be able to delete reviews, we</st> <st c=\"18579\">need to follow the</st> <st c=\"18598\">ensuing steps:</st>\n\n1.  <st c=\"18612\">Update the</st> `<st c=\"18624\">movies.show</st>` <st c=\"18635\">template.</st>\n\n2.  <st c=\"18645\">Define the</st> `<st c=\"18657\">delete_review</st>` <st c=\"18670\">function.</st>\n\n3.  <st c=\"18680\">Configure the</st> `<st c=\"18695\">delete</st>` `<st c=\"18702\">review</st>` <st c=\"18708\">URL.</st>\n\n## <st c=\"18713\">Updating the movies.show template</st>\n\n<st c=\"18747\">In the</st> `<st c=\"18755\">/movies/templates/movies/show.html</st>` <st c=\"18789\">file, add the</st> <st c=\"18803\">following</st> <st c=\"18814\">bolded code:</st>\n\n```", "```py\n\n<st c=\"19321\">We have added a new delete</st> <st c=\"19348\">button.</st> <st c=\"19357\">This button links to the</st> `<st c=\"19382\">movies.delete_review</st>` <st c=\"19402\">URL, and much like the</st> **<st c=\"19426\">Edit</st>** <st c=\"19430\">button, it passes the movie ID and the</st> <st c=\"19470\">review ID.</st>\n\n## <st c=\"19480\">Defining the delete_review function</st>\n\n<st c=\"19516\">In</st> `<st c=\"19520\">/movies/views.py</st>`<st c=\"19536\">, add the following</st> <st c=\"19555\">bold code at the end of</st> <st c=\"19580\">the file:</st>\n\n```", "```py\n\n **<st c=\"19771\">Let’s explain the</st> <st c=\"19790\">preceding code:</st>\n\n*   <st c=\"19805\">We use the</st> `<st c=\"19817\">@login_required</st>` <st c=\"19832\">decorator to ensure that the</st> `<st c=\"19862\">delete_review</st>` <st c=\"19875\">function can be only accessed by authenticated users.</st> <st c=\"19930\">If an unauthenticated user tries to access this function, they will be redirected to the</st> <st c=\"20019\">login page.</st>\n\n*   <st c=\"20030\">We retrieve the</st> `<st c=\"20047\">Review</st>` <st c=\"20053\">object with the given</st> `<st c=\"20076\">review_id</st>` <st c=\"20085\">that belongs to the current user (</st>`<st c=\"20120\">request.user</st>`<st c=\"20133\">).</st> <st c=\"20137\">If the review does not exist, or if the user does not own the review, an HTTP 404 error will</st> <st c=\"20230\">be raised.</st>\n\n*   <st c=\"20240\">We delete the review from the database using the Django model’s</st> `<st c=\"20305\">delete()</st>` <st c=\"20313\">method.</st>\n\n*   <st c=\"20321\">We redirect to the previous movie</st> <st c=\"20356\">show page.</st>\n\n## <st c=\"20366\">Configuring the delete_review URL</st>\n\n<st c=\"20400\">In</st> `<st c=\"20404\">/movies/urls.py</st>`<st c=\"20419\">, add the following path, as highlighted</st> <st c=\"20459\">in bold:</st>\n\n```", "```py\n\n<st c=\"20681\">This path captures two integer values (the movie ID and the review ID) from the URL and passes them as arguments to the</st> `<st c=\"20801\">delete_review</st>` <st c=\"20814\">function.</st>\n\n<st c=\"20824\">Now, save those files, run</st> <st c=\"20851\">the server, and go to</st> `<st c=\"20874\">http://localhost:8000/movies</st>`<st c=\"20902\">. Click on a specific movie that contains a review that you created, then click the</st> **<st c=\"20986\">Delete</st>** <st c=\"20992\">button (</st>*<st c=\"21001\">Figure 9</st>**<st c=\"21010\">.8</st>*<st c=\"21012\">).</st>\n\n\t\t\t![Figure 9.8 – A movie page with reviews and a Delete button](img/B22457_09_8.jpg)\n\n<st c=\"21226\">Figure 9.8 – A movie page with reviews and a Delete button</st>\n\n<st c=\"21284\">The review should be deleted, and</st> <st c=\"21318\">you should be redirected to the movie</st> <st c=\"21357\">show page.</st>\n\n# <st c=\"21367\">Summary</st>\n\n<st c=\"21375\">In this chapter, we implemented a complete CRUD for movie reviews.</st> <st c=\"21443\">With the tools we’ve developed, we can now create various CRUD systems by applying the knowledge gained in this chapter to other projects and models.</st> <st c=\"21593\">As for the</st> *<st c=\"21604\">Movies Store</st>* <st c=\"21616\">project, users can now create, read, update, and delete reviews.</st> <st c=\"21682\">Additionally, we have acquired the skills to manage application authorization, restricting access to certain routes and functions for</st> <st c=\"21816\">non-logged-in users.</st>\n\n<st c=\"21836\">In the next chapter, we will learn how to create a</st> <st c=\"21888\">shopping cart.</st>******** \n```"]