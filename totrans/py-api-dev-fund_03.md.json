["```py\n    Flask-SQLAlchemy==2.4.0\n    Flask-Migrate==2.5.2\n    psycopg2-binary==2.8.3\n    passlib==1.7.1\n    ```", "```py\n    pip install -r requirements.txt\n    ```", "```py\n    Installing collected packages: SQLAlchemy, Flask-SQLAlchemy, alembic, Flask-Migrate, psycopg2-binary, passlib\n      Running setup.py install for SQLAlchemy ... done\n      Running setup.py install for alembic ... done\n    Successfully installed Flask-Migrate-2.5.2 Flask-SQLAlchemy-2.4.0 SQLAlchemy-1.3.6 alembic-1.0.11 passlib-1.7.1 psycopg2-binary-2.8.3\n    ```", "```py\n    class Config:\n        DEBUG = True\n        SQLALCHEMY_DATABASE_URI = 'postgresql+psycopg2://{your_name}:{your_password}@localhost/{db_name}\n        SQLALCHEMY_TRACK_MODIFICATIONS = False\n    ```", "```py\n    from flask_sqlalchemy import SQLAlchemy\n    db = SQLAlchemy()\n    ```", "```py\n    from extensions import db\n    class User(db.Model):\n        __tablename__ = 'user'\n        id = db.Column(db.Integer, primary_key=True)\n        username = db.Column(db.String(80), nullable=False, unique=True)\n        email = db.Column(db.String(200), nullable=False, unique=True)\n        password = db.Column(db.String(200))\n        is_active = db.Column(db.Boolean(), default=False)\n        created_at = db.Column(db.DateTime(), nullable=False, server_default=db.func.now())\n        updated_at = db.Column(db.DateTime(), nullable=False, server_default=db.func.now(), onupdate=db.func.now())\n        recipes = db.relationship('Recipe', backref='user')\n        @classmethod\n        def get_by_username(cls, username):\n            return cls.query.filter_by(username=username).first()\n        @classmethod\n        def get_by_email(cls, email):\n            return cls.query.filter_by(email=email).first()\n\n        def save(self):\n            db.session.add(self)\n            db.session.commit()\n    ```", "```py\n    from extensions import db\n    recipe_list = []\n    def get_last_id():\n        if recipe_list:\n            last_recipe = recipe_list[-1]\n        else:\n            return 1\n        return last_recipe.id + 1\n    class Recipe(db.Model):\n        __tablename__ = 'recipe'\n        id = db.Column(db.Integer, primary_key=True)\n        name = db.Column(db.String(100), nullable=False)\n        description = db.Column(db.String(200))\n        num_of_servings = db.Column(db.Integer)\n        cook_time = db.Column(db.Integer)\n        directions = db.Column(db.String(1000))\n        is_publish = db.Column(db.Boolean(), default=False)\n        created_at = db.Column(db.DateTime(), nullable=False, server_default=db.func.now())\n        updated_at = db.Column(db.DateTime(), nullable=False, server_default=db.func.now(), onupdate=db.func.now())\n        user_id = db.Column(db.Integer(), db.ForeignKey(\"user.id\"))\n    ```", "```py\n    from flask import Flask\n    from flask_migrate import Migrate\n    from flask_restful import Api\n    from config import Config\n    from extensions import db\n    from models.user import User\n    from resources.recipe import RecipeListResource, RecipeResource, RecipePublishResource\n    ```", "```py\n    def create_app():\n        app = Flask(__name__)\n        app.config.from_object(Config)\n        register_extensions(app)\n        register_resources(app)\n        return app\n    def register_extensions(app):\n        db.init_app(app)\n        migrate = Migrate(app, db)\n    def register_resources(app):\n        api = Api(app)\n        api.add_resource(RecipeListResource, '/recipes')\n        api.add_resource(RecipeResource, '/recipes/<int:recipe_id>')\n        api.add_resource(RecipePublishResource, '/recipes/<int:recipe_id>/publish')\n    ```", "```py\n    if __name__ == '__main__':\n        app = create_app()\n        app.run()\n    ```", "```py\n    flask db init\n    ```", "```py\n    Creating directory /Python-API-Development-Fundamentals/smilecook/migrations ... done\n    Creating directory /Python-API-Development-Fundamentals/smilecook/migrations/versions ... done\n    Generating /Python-API-Development-Fundamentals/smilecook/migrations/script.py.mako ... done\n    Generating /Python-API-Development-Fundamentals/smilecook/migrations/env.py ... done\n    Generating /Python-API-Development-Fundamentals/smilecook/migrations/README ... done\n    Generating /Python-API-Development-Fundamentals/smilecook/migrations/alembic.ini ... done\n    Please edit configuration/connection/logging settings in '/Python-API-Development-\n    Fundamentals/smilecook/migrations/alembic.ini' before proceeding.\n    ```", "```py\n    flask db migrate\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.autogenerate.compare] Detected added table 'user'\n    INFO  [alembic.autogenerate.compare] Detected added table 'recipe'\n      Generating /Python-API-Development-Fundamentals/smilecook/migrations/versions/a6d248ab7b23_.py ... done\n    ```", "```py\n    \"\"\"empty message\n    Revision ID: a6d248ab7b23\n    Revises: \n    Create Date: 2019-07-22 16:10:41.644737\n    \"\"\"\n    from alembic import op\n    import sqlalchemy as sa\n    # revision identifiers, used by Alembic.\n    revision = 'a6d248ab7b23'\n    down_revision = None\n    branch_labels = None\n    depends_on = None\n    def upgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.create_table('user',\n        sa.Column('id', sa.Integer(), nullable=False),\n        sa.Column('username', sa.String(length=80), nullable=False),\n        sa.Column('email', sa.String(length=200), nullable=False),\n        sa.Column('password', sa.String(), nullable=True),\n        sa.Column('is_active', sa.Boolean(), nullable=True),\n        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),\n        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),\n        sa.PrimaryKeyConstraint('id'),\n        sa.UniqueConstraint('email')\n        )\n        op.create_table('recipe',\n        sa.Column('id', sa.Integer(), nullable=False),\n        sa.Column('name', sa.String(length=100), nullable=False),\n        sa.Column('description', sa.String(length=500), nullable=True),\n        sa.Column('num_of_servings', sa.Integer(), nullable=True),\n        sa.Column('cook_time', sa.Integer(), nullable=True),\n        sa.Column('directions', sa.String(), nullable=True),\n        sa.Column('is_publish', sa.Boolean(), nullable=True),\n        sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),\n        sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False),\n        sa.Column('user_id', sa.Integer(), nullable=True),\n        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),\n        sa.PrimaryKeyConstraint('id')\n        )\n        # ### end Alembic commands ###\n    def downgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.drop_table('recipe')\n        op.drop_table('user')\n        # ### end Alembic commands ###\n    ```", "```py\n    flask db upgrade\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.runtime.migration] Running upgrade  -> a6d248ab7b23, empty message\n    ```", "```py\n    from app import *\n    from models.user import User\n    from models.recipe import Recipe\n    app = create_app()\n    ```", "```py\n    user = User(username='jack', email='jack@gmail.com', password='WkQa')\n    db.session.add(user)\n    db.session.commit()\n    ```", "```py\n    >>>user.username\n    'jack'\n    >>>user.id\n    1\n    >>>user.email\n    'jack@gmail.com'\n    ```", "```py\n    pizza = Recipe(name='Cheese Pizza', description='This is a lovely cheese pizza recipe', num_of_servings=2, cook_time=30, directions='This is how you make it', user_id=user.id)\n    db.session.add(pizza)\n    db.session.commit()\n    pasta = Recipe(name='Tomato Pasta', description='This is a lovely tomato pasta recipe', num_of_servings=3, cook_time=20, directions='This is how you make it', user_id=user.id)\n    db.session.add(pasta)\n    db.session.commit()\n    ```", "```py\n    >>> user = User.query.filter_by(username='jack').first()\n    >>> user.recipes\n    ```", "```py\n    [<Recipe 1>, <Recipe 2>]\n    ```", "```py\n    >>> for recipe in user.recipes:\n        print('{} recipe made by {} can serve {} people.'.format(recipe.name, recipe.user.username, recipe.num_of_servings))\n    ```", "```py\n    Cheese Pizza recipe made by jack can serve 2 people.\n    Tomato Pasta recipe made by jack can serve 3 people.\n    ```", "```py\n    from passlib.hash import pbkdf2_sha256\n    def hash_password(password):\n        return pbkdf2_sha256.hash(password)\n    def check_password(password, hashed):\n        return pbkdf2_sha256.verify(password, hashed)\n    ```", "```py\n    from flask import request\n    from flask_restful import Resource\n    from http import HTTPStatus\n    from utils import hash_password\n    from models.user import User\n    class UserListResource(Resource):\n        def post(self):\n            json_data = request.get_json()\n            username = json_data.get('username')\n            email = json_data.get('email')\n            non_hash_password = json_data.get('password')\n    ```", "```py\n            if User.get_by_username(username):\n                return {'message': 'username already used'}, HTTPStatus.BAD_REQUEST\n            if User.get_by_email(email):\n                return {'message': 'email already used'}, HTTPStatus.BAD_REQUEST\n    ```", "```py\n        password = hash_password(non_hash_password)\n            user = User(\n                username=username,\n                email=email,\n                password=password\n            )\n            user.save()\n            data = {\n                'id': user.id,\n                'username': user.username,\n                'email': user.email\n            }\n            return data, HTTPStatus.CREATED\n    ```", "```py\n    from extensions import db\n    from resources.user import UserListResource\n    from resources.recipe import RecipeListResource, RecipeResource, RecipePublishResource\n    def register_resources(app):\n        api = Api(app)\n        api.add_resource(UserListResource, '/users')\n        api.add_resource(RecipeListResource, '/recipes')\n    ```", "```py\n    {\n        \"username\": \"jack\",\n        \"email\": \"jack@gmail.com\",\n        \"password\": \"WkQa\"\n    }\n    ```", "```py\n    {\n        \"username\": \"ray\",\n        \"email\": \"ray@gmail.com\",\n        \"password\": \"WkQa\"\n    }\n    ```"]