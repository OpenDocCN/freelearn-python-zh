- en: Chapter 9. Barry Warsaw
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第九章。巴里·沃沙克
- en: '![Barry Warsaw](img/B08180_05_01.jpg)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![巴里·沃沙克](img/B08180_05_01.jpg)'
- en: Barry Warsaw is an American software engineer and a member of the Python Foundation
    team at LinkedIn. Barry worked for Canonical for 10 years, becoming an Ubuntu
    and Debian developer with responsibility for the Python ecosystem on those operating
    systems. He was the project leader of GNU Mailman, a popular open source mailing
    list manager written in Python. Barry's former roles include lead maintainer for
    Jython, Python release manager and member of PythonLabs. Today he is a core developer,
    the author of several successful Python Enhancement Proposals, and the maintainer
    of numerous Python libraries.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 巴里·沃沙克是一位美国软件工程师，也是LinkedIn上Python基金会团队的一员。巴里在Canonical工作了10年，成为Ubuntu和Debian的开发者，负责这些操作系统上的Python生态系统。他是GNU
    Mailman项目的负责人，这是一个用Python编写的流行开源邮件列表管理器。巴里以前的角色包括Jython的首席维护者、Python发布经理和PythonLabs的成员。如今，他是一名核心开发者，是几个成功的Python增强提案的作者，也是众多Python库的维护者。
- en: '**Discussion themes: PythonLabs, Python''s future, v2.7/v3.x.**'
  id: totrans-3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**讨论主题：PythonLabs、Python的未来、v2.7/v3.x。**'
- en: ''
  id: totrans-4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '**Catch up with Barry Warsaw here: @pumpichank**'
  id: totrans-5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**在这里与巴里·沃沙克保持联系：@pumpichank**'
- en: '**Mike Driscoll**: How did you end up becoming a programmer?'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: '**迈克·德里科尔**：你是如何成为程序员的？'
- en: '**Barry Warsaw**: I started programming when I was pretty young. Computers
    then were actually Teletype machines, that were connected to mainframes in the
    school and the main school district. So I got on the Teletypes.'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: '**巴里·沃沙克**：我很小的时候就开始了编程。那时的电脑实际上是电传打字机，它们连接到学校的主机和主要学区的主机。所以我上了电传打字机。'
- en: I learned BASIC, which was really fun. I remember in the summer of that year,
    some of the kids in another school used those same Teletypes to break into the
    mainframes in the Board of Education. So the next year they pulled them all out
    of the schools and gave us 6502-based PCs. The teachers didn't know how to use
    them at all, so I taught the teachers.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我学习了BASIC，那真的很有趣。我记得那年夏天，另一所学校的一些孩子用那些同样的电传打字机入侵了教育局的主机。所以第二年，他们把所有的电传打字机都从学校撤走，给了我们基于6502的PC。老师们根本不知道怎么使用它们，所以我教了老师们。
- en: The guidance counselors took notice of what I was doing. They hooked me up with
    summer internships at what was then called the National Bureau of Standards (NBS),
    a federal research facility in Gaithersburg, Maryland. The NBS is where I learned
    to love sharing programs and collaborating with other people.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 指导顾问注意到了我在做什么。他们把我介绍到当时被称为国家标准局（NBS）的马里兰州盖瑟斯堡的一个联邦研究设施，在那里我学会了喜欢分享程序和与他人协作。
- en: '**Driscoll**: So did you work with NBS all through high school?'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科尔**：那么你在整个高中时期都和NBS一起工作吗？'
- en: '**Warsaw**: Yes, I interned with NBS through high school and through college.
    Then I got a full-time job at what is now called the National Institute of Standards
    and Technology (NIST) and I worked there until 1990.'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: '**沃沙克**：是的，我在高中和大学期间都通过NBS实习。然后我在现在被称为国家标准与技术研究院（NIST）的地方找到了一份全职工作，我在那里一直工作到1990年。'
- en: My internships and then full-time job at NIST were eye-opening, because I didn't
    actually know what the real industry was like, or what it was like to be a professional
    programmer.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 我在NIST的实习和全职工作让我眼界大开，因为我实际上并不了解真正的行业是什么样的，或者成为一名专业程序员是什么样的体验。
- en: '**Barry Warsaw: ''I didn''t actually know what the real industry was like,
    or what it was like to be a professional programmer.''**'
  id: totrans-13
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·沃沙克**：“我实际上并不了解真正的行业是什么样的，或者成为一名专业程序员是什么样的体验。”'
- en: I worked with the robotics team at the time and although I wasn't doing much
    robotics, I did find myself working on the graphical user interfaces for industrial
    robots for factory automation. That work was just amazing. From there I got into
    system administration. A few years into that we got a lot of Sun-3s, so we learned
    SunOS, Unix, C programming, Emacs, and all kinds of things like that.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我当时与机器人团队一起工作，尽管我没有做很多机器人相关的工作，但我确实发现自己正在为工厂自动化中的工业机器人开发图形用户界面。那份工作真是令人惊叹。从那里我开始接触系统管理。几年后，我们得到了很多Sun-3电脑，因此我们学习了SunOS、Unix、C编程、Emacs以及各种类似的东西。
- en: I was a computer science undergraduate and it was fine, but I really learned
    the trade by doing real programming at NIST. I've noticed that college classes
    don't exactly prepare you for what you actually end up doing.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 我是一名计算机科学本科生，那没问题，但我真正通过在NIST做实际编程来学习这一行。我注意到大学课程并不能完全为你最终要做的事情做好准备。
- en: '**Barry Warsaw: ''I really learned the trade by doing real programming at NIST.''**'
  id: totrans-16
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''我真正通过在NIST做真正的编程来学习这门手艺。''**'
- en: For example, I was talking to some current interns and they said that in college,
    at least as undergraduates, you don't even learn version control systems, such
    as using Git. That is just amazing to me. I can't believe how divorced from the
    reality of working programmers the college environment is. It is very shocking
    when you get out of college and it's completely different to what you were taught.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我正在和一些实习生交谈，他们说在大学里，至少作为本科生，你甚至没有学习版本控制系统，比如使用Git。这对我来说真是太令人震惊了。我无法相信大学环境与实际工作程序员的现实是多么脱节。当你从大学毕业出来，发现一切都完全不同，这非常令人震惊。
- en: '**Driscoll**: Do you think that Python offers a pathway to real programming,
    as you call it, for new programmers?'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你认为Python为新的程序员提供了你所说的真正的编程途径吗？'
- en: '**Warsaw**: Yes, when I''m talking to kids today that use Python, these kids
    have often somehow hooked up with a project on GitHub. Sometimes they''ve even
    come to a Python conference and stayed for the sprints.'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：是的，当我今天和用Python的孩子们交谈时，这些孩子们往往已经以某种方式与GitHub上的一个项目联系上了。有时他们甚至参加过Python会议，并留下来参加了冲刺活动。'
- en: Kids learn so much more about modern software engineering best practices that
    way. You can really see it. They come in and they understand how to do pull requests
    and how to file good bugs. I tell all the young kids that I talk with to find
    a GitHub, GitLab, or even Bitbucket project that interests them and start getting
    involved.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 孩子们通过这种方式学到了更多关于现代软件工程最佳实践的知识。你真的能看得出来。他们进来后，就明白了如何进行拉取请求和如何提交良好的错误报告。我告诉所有我交谈的年轻孩子，去找一个GitHub、GitLab或甚至Bitbucket项目，找到他们感兴趣的项目，并开始参与其中。
- en: Python, of course, is an amazing community for that. It's so welcoming to a
    diverse group of people. In the Python community we're friendly, we accept anybody,
    and we guide and mentor them. So I also tell students who really want to learn
    how to do it right to come to the Python community and get engaged, because they
    are going to learn so much by doing that.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Python是一个令人惊叹的社区，对各种各样的人都非常欢迎。在Python社区中，我们友好，接受任何人，并引导和指导他们。所以我也会告诉那些真正想学会正确做事的学生，来Python社区参与其中，因为他们通过这样做会学到很多东西。
- en: '**Driscoll**: How did you end up getting into Python yourself?'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你是如何最终开始学习Python的？'
- en: '**Warsaw**: In 1994, I met Roger Masse. His girlfriend (and current wife) and
    my wife were very friendly, so we''d all get together for dinner. Rog and I really
    connected on a geek level.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：1994年，我遇到了罗杰·马塞尔。他的女朋友（现在的妻子）和我的妻子关系非常好，所以我们都会一起吃饭。罗格和我真的在技术层面上产生了共鸣。'
- en: Rog had just started a job at CNRI, which is the Corporation for National Research
    Initiatives in Virginia (CNRI was started by Bob Kahn and Vint Cerf, who are two
    of the fathers of TCP/IP.) So in the late summer of 1994, I started working for
    CNRI too.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 罗格刚刚开始在弗吉尼亚州的CNRI（国家研究倡议公司）开始工作，CNRI是由TCP/IP的两位创始人鲍勃·卡恩和文特·瑟夫创立的。所以1994年夏末，我也开始在CNRI工作。
- en: I was working on a project called knowbots. These were little software agents
    that would bundle themselves up and move to a different host. The knowbots would
    do some work over at another host and then move around the internet to find information
    for you. Rog and I started working on that project in Objective-C on NeXT machines.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 我当时正在做一个名为knowbots的项目。这些是会将自己打包并移动到不同主机的软件代理。knowbots会在另一个主机上做一些工作，然后在互联网上四处移动，为你寻找信息。我和罗格开始用Objective-C在NeXT机器上做这个项目。
- en: A little later, some friends who were still at NIST told me about a Dutch guy
    who was coming to give a little workshop on this language that he had invented.
    They asked whether I'd be interested, so we did a little bit of research. Of course,
    it was Guido van Rossum, and the language was Python, so we said, "Sure, we'd
    love to come."
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 有一段时间后，一些仍在NIST的朋友告诉我，有一个荷兰人即将来此举办一个小型的关于他发明的那种语言的研讨会。他们问我是否有兴趣，所以我们做了一些研究。当然，是吉多·范罗苏姆，那种语言是Python，所以我们说：“当然，我们非常愿意参加。”
- en: '**Barry Warsaw: ''A Dutch guy...was coming to give a little workshop on this
    language that he had invented. They asked whether I''d be interested, so we did
    a little bit of research. Of course, it was Guido van Rossum, and the language
    was Python.''**'
  id: totrans-27
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙**：''一个荷兰人...即将来此举办一个小型的关于他发明的那种语言的研讨会。他们问我是否有兴趣，所以我们做了一些研究。当然，是吉多·范罗苏姆，那种语言是Python。''**'
- en: We wanted to talk to Guido about some of his ideas, because we thought that
    Python could be really cool for this Objective-C project. We thought we could
    script Objective-C in Python.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想和吉多谈谈他的想法，因为我们认为Python对于这个Objective-C项目来说可能非常酷。我们觉得可以用Python来编写Objective-C脚本。
- en: The workshop was in November of 1994\. There were only 20 of us and we just
    fell in love with Python and Guido. He was just so open and cool and the workshop
    was really fantastic. I think both Guido and I were fans of Emacs, so we talked
    about how docstrings in Python could work a little bit syntactically, or at least
    syntactically like docstrings in Emacs Lisp.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 1994年11月举办了研讨会。当时我们只有20人，我们深深地爱上了Python和吉多。他非常开放和酷，研讨会也非常棒。我想吉多和我都是Emacs的粉丝，所以我们讨论了Python中的docstrings在语法上可以如何工作，至少在语法上可以像Emacs
    Lisp中的docstrings一样。
- en: After the workshop, we went back to CNRI and were just gushing about how we
    thought Python was going to work really well. One of our colleagues said, "Hey,
    why don't we try to hire Guido?" We didn't know if he wanted to come to the United
    States, or would be interested in working on this Objective-C Python thing, or
    the knowbot project. But he was, so in April of 1995 Guido started at CNRI.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 研讨会之后，我们回到了CNRI，非常兴奋地谈论我们认为Python将会非常出色。我们的一位同事说：“嘿，我们为什么不尝试雇佣吉多呢？”我们不知道他是否愿意来美国，或者是否对参与这个Objective-C
    Python项目或knowbot项目感兴趣。但他确实愿意，所以1995年4月吉多开始在CNRI工作。
- en: We moved a lot of the infrastructure from the Netherlands to Virginia. I think
    at the time it was a CVS repository. So we pulled the CVS repository over, did
    a lot of the system administration stuff for Python, and of course got into developing
    Python as well.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将大部分基础设施从荷兰迁移到了弗吉尼亚。我想当时是一个CVS仓库。所以我们把CVS仓库迁移过来，为Python做了很多系统管理的工作，当然也开始了Python的开发。
- en: '**Barry Warsaw: ''Python 1.2 was the first version that we released out of
    CNRI. So it was in some ways very much today''s Python.''**'
  id: totrans-32
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''Python 1.2是我们从CNRI发布的第一个版本。所以在某种程度上，它非常像今天的Python。''**'
- en: I knew C pretty well at the time, so we did a lot of work on the C internals
    of Python and then also the Python standard library. I think Python 1.2 was the
    first version that we released out of CNRI. So it was in some ways very much today's
    Python. Even Python 3 has the same feel to it that Python did way back then. Although
    there are so many amazing new features, that I don't know whether you would recognize
    it.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 当时我对C语言相当熟悉，所以我们做了很多关于Python C内部的工作，以及Python标准库的工作。我认为Python 1.2是我们从CNRI发布的第一个版本。所以在某种程度上，它非常像今天的Python。即使Python
    3也有当时Python的感觉。尽管有很多令人惊叹的新特性，但我不知道你是否能认出它。
- en: I seem to remember that although Python had classes, it didn't even have keyword
    arguments. We were doing a lot of things with Tcl/Tk graphically. The signatures
    of functions got ridiculous, because even though most of the arguments were None,
    you had to pass them all in. So that was the motivation for doing keyword arguments.
    Anyway, CNRI was great and working with Guido on Python was fantastic. We did
    that until Guido moved on.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 我似乎记得，尽管Python有类，但它甚至没有关键字参数。我们当时在图形上用Tcl/Tk做了很多事情。函数的签名变得荒谬，因为尽管大多数参数都是None，但你必须全部传递它们。所以这就是做关键字参数的动机。无论如何，CNRI很棒，与吉多一起工作Python非常棒。我们一直这样做，直到吉多离开。
- en: '**Driscoll**: Steve Holden said that you were part of PythonLabs. Were you
    one of the founders?'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 史蒂夫·霍尔顿说你是PythonLabs的一员。你是创始人之一吗？'
- en: '**Warsaw**: Yes, in 2000 a bunch of us left CNRI to seek our fortunes with
    Python. It was the five of us: Tim Peters, Jeremy Hilton, Fred Drake, myself,
    and Guido. Roger stayed at CNRI. That group was what we called PythonLabs, but
    it was more of an inside joke. I mean, it wasn''t really an official thing.'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：是的，2000年我们中的一群人离开了CNRI，去寻求与Python相关的财富。我们五个人：蒂姆·彼得斯、杰里米·希尔顿、弗雷德·德雷克、我自己和吉多。罗杰留在了CNRI。那个小组就是我们所说的PythonLabs，但更多是一种内部玩笑。我的意思是，它并不是真正官方的事情。'
- en: '**Barry Warsaw: ''In 2000 a bunch of us left CNRI to seek our fortunes with
    Python.''**'
  id: totrans-37
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''2000年，我们中的一群人离开了CNRI，去寻求与Python相关的财富。''**'
- en: We joined BeOpen, but that lasted for a few months and then went away. Then
    we all moved over to Zope Corporation. We just felt like we had a little club
    made up of the five of us who had come from CNRI and Tim Peters, of course. So
    that's really what PythonLabs was. I even made a joke at one time on the mailing
    list and asked Tim whether PythonLabs still exists. If you go to pythonlab.com,
    you'll find the very humorous response from Tim to my question.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 我们加入了BeOpen，但那持续了几个月就结束了。然后我们都搬到了Zope公司。我们感觉就像是一个由我们这五个人和Tim Peters（当然）组成的俱乐部。这就是PythonLabs的真正含义。我甚至在邮件列表上开过一次玩笑，问Tim
    PythonLabs是否还存在。如果你去pythonlab.com，你会找到Tim对我问题的非常幽默的回应。
- en: '**Driscoll**: Did you guys have specific roles in PythonLabs?'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你们在PythonLabs中有没有具体的角色？'
- en: '**Warsaw**: Not really, although Guido really led the work that we did on Python
    and the work that we did with Python.'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '**Warsaw**: 实际上不是，尽管Guido确实领导了我们关于Python的工作，以及我们与Python一起的工作。'
- en: I can't remember many of the details about what we did in the beginning, even
    with Zope Corporation. Of course, we all had tasks to do within Zope Corporation,
    but then we would get together and work on Python itself.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 我记不起我们最初在Zope公司做了什么细节，但当然，我们都在Zope公司内有任务要做。然后我们会聚在一起，专注于Python本身。
- en: '**Barry Warsaw: ''We worked on what we found interesting, which was internals,
    new features, bug fixes or infrastructure.''**'
  id: totrans-42
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Barry Warsaw: ''我们专注于我们认为有趣的事情，比如内部，新特性，错误修复或基础设施。''**'
- en: We worked on what we found interesting, which was internals, new features, bug
    fixes, or infrastructure. All of that stuff really needed to be done back then,
    because the Python community was so much smaller than it is now.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 我们专注于我们认为有趣的事情，比如内部，新特性，错误修复或基础设施。所有这些事情当时真的需要做，因为Python社区比现在小得多。
- en: '**Driscoll**: So were there any goals at that time for the Python language
    that you guys were shooting for?'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 那当时你们对Python语言有什么具体的目标吗？'
- en: '**Warsaw**: You know, it''s hard for me to remember the exact timeline, but
    I''m sure someone could do the archaeology and figure out what the features were.
    I do remember the big pushes.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '**Warsaw**: 你知道，我很难记住确切的时间线，但我确信有人可以进行考古研究，找出那些特性。我记得那些大的推动。'
- en: One of the earliest things that I did at CNRI was work with Roger on what was
    called the grand renaming. The Python C source code back at that time didn't have
    the nice clean namespaces that the C API has now. They were all just named in
    a global namespace.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 我在CNRI最早做的一件事是与Roger一起工作，那被称为大规模重命名。当时的Python C源代码没有现在C API拥有的那些整洁的命名空间。它们都只是在全局命名空间中命名。
- en: The problem with that was that people were trying to embed Python, but it wasn't
    going to work because those names were colliding with their own symbols. So we
    did the grand renaming, where we went through the entire internal C API and cleaned
    it up, so that you could embed Python in other C applications. So I remember that
    was one of the very first things that I did.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 那个问题在于人们试图嵌入Python，但这行不通，因为那些名称与它们自己的符号冲突。所以我们进行了大规模的重命名，我们走过了整个内部C API并进行了清理，这样你就可以在其他C应用程序中嵌入Python。我记得那是我做的第一件大事之一。
- en: There was also a lot of work on new-style classes at the time, which of course
    in Python 3 is the only kind of class. There were a lot of discussions about how
    the type system would work in the new-style class infrastructure.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 当时还做了很多关于新式类的工作，当然在Python 3中，新式类是唯一的类。关于新式类基础设施中的类型系统将如何工作有很多讨论。
- en: The other thing that I remember from the original workshop was that there was
    this guy named Don Beaudry. He was doing some crazy metaclass hacks. Of course,
    Jim Fulton was very interested in doing metaclass stuff as well. Jim was the CTO
    of Zope Corporation.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我还从原始研讨会上记得，有个名叫Don Beaudry的人。他在做一些疯狂的元类黑客行为。当然，Jim Fulton也非常感兴趣于做元类的事情。Jim是Zope公司的CTO。
- en: '**Barry Warsaw: ''By Python 2.2, we really wanted to do metaclasses right and
    fix some of the problems with the semantics of classic classes.''**'
  id: totrans-50
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Barry Warsaw: ''到Python 2.2，我们真的想正确地实现元类并修复经典类语义中的一些问题。''**'
- en: I remember not really understanding much about metaclasses at the original Python
    workshop. It went over my head at the time. However, by Python 2.2, we really
    wanted to do metaclasses right and fix some of the problems with the semantics
    of classic classes.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得在最初的Python研讨会上，我对元类了解不多。当时它超出了我的理解范围。然而，到了Python 2.2，我们真的想要正确地实现元类并修复经典类语义中的一些问题。
- en: I remember a lot of discussions about how the new-style class stuff could work
    so that you could inherit from a type and define new types, as well as new instances.
    There were just so many features, but we all pitched in on the things that were
    interesting to us.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 我记得有很多关于如何让新式类功能工作，以便你可以从类型继承并定义新类型以及新实例的讨论。功能太多了，但我们都在对我们感兴趣的事情上投入了。
- en: '**Driscoll**: I seem to recall that you worked on the original email library
    in Python. Do you remember how that came about?'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 我似乎记得你曾经参与过Python原始电子邮件库的开发。你还记得这是怎么开始的吗？'
- en: '**Warsaw**: Yeah, so one of the things that we did early on was to move the
    Python mailing list to CNRI. It was still being run at CWI, which was the Dutch
    institute where Guido worked before he came to the US.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '**Warsaw**: 是的，所以我们在早期做的一件事是将Python邮件列表迁移到CNRI。它仍然在CWI运行，这是Guido在来到美国之前工作的荷兰研究所。'
- en: The Python mailing list was running on Majordomo, which was the most popular
    mailing list software at the time, and was written all in Perl. When we moved
    it over, there were a lot of things that we wanted to improve. By the way, Ken
    Manheimer actually crops up here because he was very instrumental in the early
    days of Mailman.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: Python邮件列表当时运行在Majordomo上，这是当时最受欢迎的邮件列表软件，完全用Perl编写。当我们迁移它时，我们想要改进的地方有很多。顺便说一句，Ken
    Manheimer实际上在这里出现，因为他在Mailman的早期阶段起到了非常重要的作用。
- en: So we pulled the Majordomo installation over to CNRI, but it was really inconvenient
    making the changes to it that we wanted to make, because we didn't enjoy developing
    in Perl. We're Pythonistas, right?
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们将Majordomo安装迁移到了CNRI，但真正不方便的是我们想要对其进行的更改，因为我们不喜欢用Perl开发。我们是Pythonista，对吧？
- en: '**Barry Warsaw: ''We didn''t enjoy developing in Perl. We''re Pythonistas,
    right?''**'
  id: totrans-57
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Barry Warsaw: ''我们不喜欢用Perl开发。我们是Pythonista，对吧？''**'
- en: We had a friend by the name of John Viega, who was going to the University of
    Virginia. John was friends with the guys in the Dave Matthews Band before they
    were big. So John wanted to write a little mailing list manager in Python, that
    he could use to connect the fans with the band and send out announcements. He
    wrote the mailing list manager, and we caught wind of it.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一个名叫John Viega的朋友，他正在弗吉尼亚大学读书。John在Dave Matthews Band成名之前就和他们成为了朋友。所以John想用Python编写一个小型的邮件列表管理器，这样他就可以用它来连接乐迷和乐队，并发送公告。他编写了邮件列表管理器，我们得知了这件事。
- en: We thought that maybe we could work on this thing for Python mailing lists,
    because it would be better to have a Python-based mailing list manager. So we
    got a copy of the mailing list manager, but John lost the disc and the original
    copy of what eventually became Mailman. Fortunately, Ken had a copy that he resurrected
    and we were able to start working on it to support the mailing list for the Python
    community.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 我们认为也许我们可以为Python邮件列表做这件事，因为有一个基于Python的邮件列表管理器会更好。所以我们得到了一个邮件列表管理器的副本，但约翰丢失了光盘和后来成为Mailman的原始副本。幸运的是，Ken有一份副本，他将其恢复过来，我们能够开始工作以支持Python社区的邮件列表。
- en: We decided that we would call the mailing list manager Mailman. We then put
    it into the GNU Project and put the GPL on it. I personally got really involved
    with Mailman. It was interesting and I really loved the aspect of allowing people
    to communicate.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们决定将邮件列表管理器命名为Mailman。然后我们将其放入GNU项目，并对其应用了GPL许可。我个人非常投入Mailman。这很有趣，我真的很喜欢允许人们进行交流的方面。
- en: '**Barry Warsaw: ''I really loved the aspect of allowing people to communicate.''**'
  id: totrans-61
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Barry Warsaw: ''我真的很喜欢允许人们进行交流的方面。''**'
- en: The other really cool thing about the early Mailman software was that it had
    a web interface, which was something that Majordomo didn't have at the time. That
    was one of the defining factors, in my opinion, of Mailman.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 早期Mailman软件的另一件非常酷的事情是它有一个Web界面，这是Majordomo当时没有的。在我看来，这是Mailman的一个决定性因素。
- en: One of the things that I realized was that there was no good RFC compliant email-parsing
    software. There really wasn't. There was the rfc822 module in the standard library,
    but it wasn't very advanced and new email standards were coming out for the format
    of email messages.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我意识到的一件事是，没有好的 RFC 兼容的电子邮件解析软件。真的没有。标准库中有 rfc822 模块，但它并不先进，而且新的电子邮件标准正在出现，用于电子邮件消息的格式。
- en: 'It became apparent that rfc822 wasn''t going to cut it. So I worked on an offshoot
    called mimelib, that added support for MIME constructs: composing messages, having
    different MIME types and images. We had defined a model that described an email
    message, especially on MIME messages.'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，rfc822 是不够用的。所以我工作于一个名为 mimelib 的分支，它增加了对 MIME 构造的支持：编写消息、具有不同的 MIME 类型和图像。我们定义了一个描述电子邮件消息的模型，特别是
    MIME 消息。
- en: We wanted it to be possible to programmatically build up a tree of email messages.
    We had a parser so that you could feed it a bunch of Python 2 byte strings. You
    had this parser and it would give you a tree that represented the email message.
    Then you could manipulate that and pass that tree to a generator. The generator
    would flatten the tree back into the byte representation of an email message,
    along with the MIME boundaries and things like that.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望能够以编程方式构建电子邮件消息的树。我们有一个解析器，你可以给它提供一些 Python 2 字节字符串。你有了这个解析器，它会给你一个表示电子邮件消息的树。然后你可以操作这个树，并将其传递给一个生成器。生成器会将树扁平化为电子邮件消息的字节表示，包括
    MIME 边界等。
- en: We tried to be RFC compliant as best as we could. I think we were pretty successful,
    but they're very complicated standards. I think even now we're learning the deficiencies
    and the bugs in it. In any case, mimelib was a thing and I released mimelib as
    a separate third-party package. Then I started using mimelib in Mailman. It was
    a real benefit to have this third-party package that we could develop separately
    from Mailman and just pull in as a dependency.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们尽力做到 RFC 兼容。我认为我们相当成功，但这些标准非常复杂。我认为即使现在我们还在学习其中的缺陷和错误。无论如何，mimelib 是一个东西，我将其作为独立的第三方包发布。然后我开始在
    Mailman 中使用 mimelib。拥有这样一个可以独立于 Mailman 开发并仅作为依赖项拉入的第三方包，确实是一个真正的优势。
- en: I don't remember exactly when it happened, but there was a Python release when
    we felt that mimelib was pretty stable and the API was pretty good. So we pulled
    mimelib into the standard library and renamed it as the email package, which is
    a better name for it anyway, because there's a lot more to it than just MIME.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我记不清具体是什么时候了，但有一次 Python 发布时，我们觉得 mimelib 非常稳定，API 也相当不错。所以我们把 mimelib 添加到标准库中，并将其重命名为
    email 包，这无论如何都是一个更好的名字，因为它的内容远不止 MIME。
- en: '**Barry Warsaw: ''We pulled mimelib into the standard library and renamed it
    as the email package.''**'
  id: totrans-68
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·沃沙克：''我们将 mimelib 添加到标准库中，并将其重命名为 email 包。''**'
- en: So that's the history of the email package. It came from mimelib, which came
    from the work in Mailman, on top of the rfc822 module in the old Python standard
    library. I was actually joking with the guys that we should have called the panel
    session at PyCon Grandpa's Python Time! We've all been around Python for so long.
    We should say, "Kids! Come on up and sit around the fire. Grandpa will tell you
    stories about Python in the old days."
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，这就是 email 包的历史。它来自 mimelib，而 mimelib 又是在旧 Python 标准库中的 rfc822 模块之上，由 Mailman
    的工作发展而来。我实际上和那些家伙开玩笑说，我们应该在 PyCon 的研讨会上叫它“爷爷的 Python 时间”！我们都已经围绕 Python 很久了。我们应该说，“孩子们！上来围坐在火堆旁。爷爷会给你讲讲
    Python 旧日的故事。”
- en: '**Driscoll**: So we talked about Mailman. Have you learned any lessons that
    you would like to share from being the lead for that project?'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科：所以，我们谈到了 Mailman。你在担任该项目的负责人时，有没有学到任何你想分享的经验教训？**'
- en: '**Warsaw**: I''m not sure that I''m really the best project leader! I have
    so many interests and find it difficult to spend the right amount of time with
    a project.'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '**沃沙克：我不确定我是否真的是最好的项目负责人！我有许多兴趣，发现很难在项目上投入正确的时间。**'
- en: I am fortunate to have core developers in the Mailman project who are fantastic
    developers, really amazing people and super friendly. The highlight of my PyCon
    is to get together with the core developers to hang out socially, work on the
    technology, and keep it current.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我很幸运，在 Mailman 项目中有核心开发者，他们是出色的开发者，真正令人惊叹的人，而且非常友好。我 PyCon 的亮点是与核心开发者们聚在一起，社交活动，共同工作在技术上，并保持其最新状态。
- en: '**Barry Warsaw: ''The highlight of my PyCon is to get together with the core
    developers to hang out socially, work on the technology, and keep it current.''**'
  id: totrans-73
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''我PyCon的亮点是与核心开发者们聚在一起，社交互动，共同工作于技术，并保持其最新状态。''**'
- en: Mailman's been around for forever now and it's still a viable project. I do
    think that you have to really open up, trust your core developers, and be willing
    to hand over parts of a project. Great web designers really understand the technology
    and can design a great interface that looks good and is fun to use. That's great
    for me because then I can concentrate on the bits that really interest and fire
    me up.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: Mailman已经存在很长时间了，它仍然是一个可行的项目。我认为您必须真正开放，信任您的核心开发者，并愿意将项目的一部分交给他们。优秀的网页设计师真正理解技术，并能设计出既美观又易于使用的优秀界面。这对我很棒，因为这样我就可以专注于真正让我感兴趣并激发我热情的部分。
- en: We've had some Google Summer of Code projects and one of our core developers
    came from there. He's just done an amazing amount of work on our Docker images
    and some of the glue layers. It's just really great to be able to have developers
    that you really like to work with, that you know are just really smart and friendly.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们有一些谷歌夏日代码项目，我们的一个核心开发者就是从那里来的。他为我们做了大量的工作，包括我们的Docker镜像和一些粘合层。能够与真正喜欢一起工作的开发者合作，你知道他们非常聪明和友好，这真是太好了。
- en: You need to have developers that will put forth that kind of community aspect
    that I like with Python. The Python community is welcoming and friendly, with
    a focus on mentoring people as they come in. So I think another lesson is to be
    open with what you do and give your time and your expertise, because it will come
    back tenfold.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 您需要拥有那些能够展现出我喜欢的Python社区那种氛围的开发者。Python社区是欢迎和友好的，注重在人们加入时进行指导。因此，我认为另一个教训是要开放地展示您所做的事情，并贡献您的时间和专业知识，因为这将十倍地回报您。
- en: '**Barry Warsaw: ''I think another lesson is to be open with what you do and
    give your time and your expertise.''**'
  id: totrans-77
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''我认为另一个教训是要开放地展示您所做的事情，并贡献您的时间和专业知识。''**'
- en: '**Driscoll**: Have you had any challenges with the Mailman project that you
    didn''t expect to have?'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你在Mailman项目中遇到过你预料之外的挑战吗？'
- en: '**Warsaw**: Oh yeah. I don''t get this too much these days but because Mailman
    is free and we give it away, we don''t really even know all of the people who
    use it.'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：哦，是的。现在这种情况不多，但因为是Mailman是免费的，我们免费提供它，所以我们甚至不知道所有使用它的人。'
- en: We don't control Mailman in any way and we don't tell people what they can and
    cannot do with it. Most people use it for very good things, such as for their
    biking club, or certainly in a lot of tech discussion lists. But some people do
    use Mailman for nefarious purposes, like spamming people. One of the challenges
    is that we get contacted when people have been spammed by unscrupulous developers
    and we get a lot of threatening emails at times, which is very disheartening.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 我们以任何方式都不控制Mailman，也不告诉人们他们可以用它做什么或不能做什么。大多数人用它做非常好的事情，比如他们的自行车俱乐部，或者肯定是在很多技术讨论列表中。但有些人确实用Mailman做坏事，比如垃圾邮件。一个挑战是，当人们被无良的开发者垃圾邮件骚扰时，我们会接到他们的联系，有时会收到很多威胁邮件，这非常令人沮丧。
- en: One of the things that I've learned is that people reach out to you in those
    cases when they are frustrated. They're going through pain because they're getting
    spammed by somebody. They don't know who is spamming them and they're not getting
    any relief from that person, so they search around.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 我学到的一件事是，当人们感到沮丧时，他们会向您伸出援手。他们正在经历痛苦，因为他们被某人垃圾邮件骚扰。他们不知道是谁在垃圾邮件，而且他们从那个人那里得不到任何缓解，所以他们会四处寻找。
- en: Now, we put very prominent notices that we do not condone spam and we do not
    approve of using Mailman for any kind of illegal purposes. We encourage people
    to use Mailman for opt-in, so that you know that you're signing up for something.
    But we can't really control it.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们非常突出地公告我们不提倡垃圾邮件，也不批准将Mailman用于任何非法目的。我们鼓励人们使用Mailman进行自愿订阅，这样您就知道您正在注册某项服务。但我们实际上无法控制它。
- en: '**Barry Warsaw: ''One of the things that I have found helpful is to let people
    know that there is a human on the other side of Mailman.''**'
  id: totrans-83
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''我发现有帮助的一件事是让人们知道Mailman背后有真人。''**'
- en: We don't have any kind of administrative access, but people reach out to us
    in moments of frustration. One of the things that I have found helpful is to let
    people know that there is a human on the other side of Mailman. Sometimes we'll
    do a little bit of research to see if we can find a contact, or find their hosting
    provider. Even the most frustrated person is normally very appreciative of that.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们没有管理权限，但在人们感到沮丧的时候会联系我们。我发现有一件事很有帮助，就是让人们知道Mailman背后有真人。我们有时会做一些研究，看看是否能找到联系人，或者找到他们的托管提供商。即使是那些最沮丧的人，通常也会对此表示非常感激。
- en: So that was really challenging back in the early days. People would send very
    nasty emails to my personal email address and that gets really frustrating. There
    are all kinds of people out there on the internet, right?
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 所以在早期那段时间真的很具挑战性。人们会给我个人的邮箱发送非常恶毒的邮件，这真的很让人沮丧。互联网上到处都是各种各样的人，对吧？
- en: '**Driscoll**: So when we spoke for the PyDev of the Week series, you mentioned
    that you worked at Canonical. What was it like to work at a Linux distribution
    company?'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 所以在我们为“PyDev每周一星”系列访谈时，你提到你在Canonical工作。在Linux发行版公司工作是什么样的体验？'
- en: '**Warsaw**: Well, it was really awesome. I stopped working there in April,
    but I''d been there for ten years. I really enjoyed it and it was a great position
    to be in, because I felt that I could really help the Python community for Ubuntu
    and Debian.'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**Warsaw**: 嗯，那真的很棒。我在四月份停止了那里的工作，但我已经在那里工作了十年。我真的很喜欢它，而且那是一个很好的位置，因为我感觉我真正能够帮助Ubuntu和Debian的Python社区。'
- en: Working at Canonical was a great nexus for helping people who were consumers
    of a Linux distro, like Ubuntu or Debian, and users of Python on those platforms.
    I'm a core developer for Python, so when a problem would occur, I was able to
    see whether the fix needed to go in Debian or Ubuntu and ask whether it needed
    to go in upstream Python or go in some library.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在Canonical工作对于帮助Linux发行版的消费者，如Ubuntu或Debian，以及在这些平台上使用Python的用户来说是一个很好的交汇点。我是Python的核心开发者，所以当出现问题时，我能够看到是否需要将修复程序放入Debian或Ubuntu，并询问是否需要在上游Python中或某些库中实施。
- en: '**Barry Warsaw: ''I''m a core developer for Python, so when a problem would
    occur, I was able to see whether the fix needed to go in Debian or Ubuntu and
    ask whether it needed to go in upstream Python or go in some library.''**'
  id: totrans-89
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Barry Warsaw: “我是Python的核心开发者，所以当出现问题时，我能够看到是否需要将修复程序放入Debian或Ubuntu，并询问是否需要在上游Python中或某些库中实施。”**'
- en: So I really had the opportunity to work very closely with a wide range of Python
    projects. I was also able to interact with Python itself and work on areas of
    Python that I thought needed to be improved for distribution on the Linux distro.
    So it was really fun. It was a great experience and I'm really glad that I had
    the opportunity to do it.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我有机会与广泛的Python项目紧密合作。我还能与Python本身互动，并在我认为需要改进以在Linux发行版上分发的Python领域工作。这真的很有趣。这是一次极好的经历，我真的很高兴有机会去做。
- en: '**Driscoll**: What exactly did you do in your role at Canonical? Could you
    explain that?'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你在Canonical的角色中具体做了些什么？你能解释一下吗？'
- en: '**Warsaw**: Yes, so I was a member of the Foundations team, which was a small
    team that worked on this sort of plumbing layer of a Linux distro.'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**Warsaw**: 是的，我曾是基础团队的一员，这是一个小型团队，负责Linux发行版的这种管道层。'
- en: So imagine, at the bottommost part you have a kernel, right? We didn't do any
    kernel work because we had a separate kernel team. But above that you had things
    like the boot process, compilers, toolchains, and package building the archive
    health. So as things landed in the archive, you wanted to make sure that it was
    stable and robust. It's all this sort of random mix of things above the kernel,
    but below the desktop.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 所以想象一下，在最底层是内核，对吧？我们没有做任何内核工作，因为我们有一个独立的内核团队。但在那之上，有启动过程、编译器、工具链和构建存档健康等东西。所以当事物进入存档时，你想要确保它是稳定和健壮的。这些都是内核之上、桌面之下的各种随机混合事物。
- en: One of the things that the Foundation team was responsible for was language
    interpreters. Python is fairly popular for writing scripts that the operating
    system itself and the build processes use, so it is a pretty important language
    for Ubuntu and many Linux distributions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 基础团队负责的一项工作是语言翻译器。Python在编写操作系统自身和构建过程使用的脚本方面相当流行，因此它是Ubuntu和许多Linux发行版的重要语言。
- en: '**Barry Warsaw: ''One of the things that I was responsible for was the general
    health of the Python ecosystem on Ubuntu.''**'
  id: totrans-95
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''我负责的是 Ubuntu 上 Python 生态系统的整体健康。''**'
- en: One of the things that I was responsible for was the general health of the Python
    ecosystem on Ubuntu. That included working on transitions, like trying to move
    everybody to Python 3\. Then as new versions of Python would come out, while I
    didn't directly do the interpreter, I did work on all the packages that were involved.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我负责的另一件事是 Ubuntu 上 Python 生态系统的整体健康。这包括处理过渡，比如尝试让所有人都迁移到 Python 3。然后，随着 Python
    的新版本发布，虽然我没有直接进行解释器的工作，但我确实参与了所有相关软件包的工作。
- en: There are a lot of steps that you have to go through in order to make Python
    3.5 the default version on Ubuntu. It's a long process. A lot of packages won't
    build, or they have bugs in the new version of Python, so you have to fix those,
    prioritize and stuff like that. So one of the main things that I did on Ubuntu
    was really work on the Python ecosystem.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将 Python 3.5 设置为 Ubuntu 的默认版本，你需要经过许多步骤。这是一个漫长的过程。许多软件包无法构建，或者在新版本的 Python
    中存在错误，因此你必须修复这些问题，进行优先级排序等等。所以，我在 Ubuntu 上做的主要事情之一就是真正地致力于 Python 生态系统。
- en: Again, I was looking at the tools and seeing what pain points Ubuntu developers
    were having with the Python tools. I was trying to figure out how to improve them
    and where to improve them. For example, if there was some friction with using
    pip and setuptools on Ubuntu, then the fixes might have to go into pip and setuptools.
    It was my responsibility to be aware of where people were having pains using Ubuntu.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，我正在查看工具，看看 Ubuntu 开发者在使用 Python 工具时遇到了哪些痛点。我试图弄清楚如何改进它们以及在哪里改进它们。例如，如果在使用
    pip 和 setuptools 时 Ubuntu 开发者遇到了一些摩擦，那么修复可能需要进入 pip 和 setuptools。我有责任意识到人们在使用
    Ubuntu 时遇到的痛点。
- en: '**Barry Warsaw: ''I was looking at the tools and seeing what pain points Ubuntu
    developers were having with the Python tools. I was trying to figure out how to
    improve them and where to improve them.''**'
  id: totrans-99
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''我正在查看工具，看看 Ubuntu 开发者在使用 Python 工具时遇到了哪些痛点。我试图弄清楚如何改进它们以及在哪里改进它们。''**'
- en: In addition, I did a lot of consulting with people who were using Python on
    Ubuntu. If people had Python questions, I would work with them, answer their questions,
    and do code reviews.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我还与许多在 Ubuntu 上使用 Python 的人进行了大量咨询。如果有人对 Python 有疑问，我会与他们合作，回答他们的问题，并进行代码审查。
- en: I also worked with a lot of people in the community. If community people on
    Ubuntu had questions about how Python worked, or had problems, I was one of the
    people they could talk to and work with. A lot of it is community-driven, but
    I think if you really want to make a distribution a success, then you have to
    put resources into it. Every Linux distribution puts resources into its communities,
    because otherwise it's just going to fall apart.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 我还与社区中的许多人合作。如果 Ubuntu 上的社区成员对 Python 的工作方式有疑问，或者遇到问题，我就是他们可以交谈和合作的人之一。其中很多是由社区驱动的，但我认为如果你真的想使一个发行版成功，那么你必须投入资源。每个
    Linux 发行版都会为其社区投入资源，否则它就会分崩离析。
- en: '**Barry Warsaw: ''A lot of it is community-driven, but I think if you really
    want to make a distribution a success, then you have to put resources into it.''**'
  id: totrans-102
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙：''其中很多是由社区驱动的，但我认为如果你真的想使一个发行版成功，那么你必须投入资源。''**'
- en: '**Driscoll**: Let''s move on to a slightly different topic. What do you think
    makes Python such a good language for AI and machine learning right now?'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科：**让我们转到稍微不同的话题。你认为是什么使得 Python 在当前成为 AI 和机器学习如此好的语言？'
- en: '**Warsaw**: Python is a fantastic glue language. It''s also very easy to learn
    and use, both for expert programmers and for researchers, for whom programming
    is not their primary vocation.'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：Python 是一种出色的粘合语言。它也非常容易学习和使用，对于专家程序员和研究人员来说都是如此，对于研究人员来说，编程不是他们的主要职业。'
- en: I think both of these aspects make Python a great language for domains like
    machine learning. The language is very malleable as you experiment, but robust
    as you build bigger systems. I think this is also a contributing factor to why
    we see Python becoming so popular in the data sciences. These are often technologies
    where programming isn't the central occupation, but kind of secondary to the core
    research being conducted.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这两个方面使 Python 成为机器学习等领域的一个优秀语言。随着你进行实验，这种语言非常灵活，但在构建更大的系统时又非常稳健。我认为这也是我们看到
    Python 在数据科学领域变得如此流行的贡献因素之一。这些技术通常不是编程的中心职业，而是作为核心研究的一种辅助。
- en: '**Driscoll**: What could we do to make Python an even better language for AI
    and machine learning?'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：我们能为Python做些什么，使其成为AI和机器学习更好的语言？'
- en: '**Warsaw**: I''m not sure that much needs to change with Python, but it''s
    possible that the Python ecosystem could be improved to give more visibility to
    AI/machine learning libraries, and make it easier to integrate such libraries
    with other Python applications, frameworks, and libraries.'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：我不确定Python需要做出多少改变，但Python生态系统可能得到改善，以便更多地展示AI/机器学习库，并使这些库与其他Python应用、框架和库的集成更加容易。'
- en: '**Driscoll**: So, just because I''m curious, what are you doing now?'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：所以，出于好奇，你现在在做什么？'
- en: '**Warsaw**: I just started working with LinkedIn a couple of weeks ago. I really
    like it. I think it''s a great company and they use a lot of Python. So I''m still
    doing Python work. I''m working on Python within LinkedIn and I love the team.'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：我只是在几周前开始与领英合作。我真的很喜欢它。我认为这是一家很棒的公司，他们使用了大量的Python。所以，我还在做Python相关工作。我在领英内部工作Python，并且非常喜欢这个团队。'
- en: I think LinkedIn has a great mission and I am psyched about what the company
    is trying to do. The mission is to connect people with economic opportunities,
    so it's kind of funny that LinkedIn helped me to find a job and that job happened
    to be with LinkedIn!
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为领英有一个伟大的使命，我对公司试图做的事情感到兴奋。使命是连接人与经济机会，所以领英帮助我找到一份工作，而那份工作竟然是在领英，这有点好笑！
- en: LinkedIn also has a lot of other stuff that it does. I really like the focus
    on helping people to find the right fit for whatever they want to do in their
    professional career.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 领英还有许多其他的事情要做。我真的很喜欢他们专注于帮助人们找到他们在职业生涯中想要做的事情的正确匹配。
- en: '**Driscoll**: Since you have such a deep knowledge of Python, could you tell
    me where you see Python going as a language in the future?'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：鉴于你对Python有如此深入的了解，你能告诉我你如何看待Python作为一门语言在未来的发展吗？'
- en: '**Warsaw**: That''s a really interesting question. I think in some ways it''s
    hard to predict where Python is going. I''ve been involved in Python for 23 years,
    and there was no way I could have predicted in 1994 what the computing world was
    going to look like today.'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：这是一个非常有趣的问题。我认为在某些方面很难预测Python的未来。我已经参与了Python 23年，我无法预测1994年计算世界会是什么样子。'
- en: '**Barry Warsaw: ''I''ve been involved in Python for 23 years, and there was
    no way I could have predicted in 1994 what the computing world was going to look
    like today.''**'
  id: totrans-114
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙**：“我已经参与了Python 23年，我无法预测1994年计算世界会是什么样子。”'
- en: I look at phones, IoT (Internet of things) devices, and just the whole landscape
    of what computing looks like today, with the cloud and containers. It's just amazing
    to look around and see all of that stuff. So there's no real way to predict what
    Python is going to look like even five years from now, and certainly not ten or
    fifteen years from now.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我观察手机、物联网（IoT）设备，以及整个今天计算的样子，包括云和容器。环顾四周，看到所有这些令人惊叹的东西。所以，根本无法预测五年后Python会是什么样子，更不用说十年或十五年后了。
- en: I do think Python's future is still very bright, but I think Python, and especially
    CPython, which is the implementation of Python in C, has challenges. Any language
    that's been around for that long is going to have some challenges. Python was
    invented to solve problems in the 90s and the computing world is different now
    and is going to become different still.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 我确实认为Python的未来仍然非常光明，但我认为Python，尤其是CPython（Python在C中的实现），面临挑战。任何存在了那么长时间的语言都会有一些挑战。Python是为了解决90年代的问题而发明的，而计算世界现在不同了，并且还将继续变化。
- en: '**Barry Warsaw: ''Python was invented to solve problems in the 90s and the
    computing world is different now and is going to become different still.''**'
  id: totrans-117
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙**：“Python是为了解决90年代的问题而发明的，而计算世界现在不同了，并且还将继续变化。”'
- en: I think the challenges for Python include things like performance and multi-core
    or multi-threading applications. There are definitely people who are working on
    that stuff and other implementations of Python may spring up like PyPy, Jython,
    or IronPython.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为Python面临的挑战包括性能和面向多核或多线程应用等问题。肯定有人在研究这些内容，并且可能会出现像PyPy、Jython或IronPython这样的Python的其他实现。
- en: Aside from the challenges that the various implementations have, one thing that
    Python has as a language, and I think this is its real strength, is that it scales
    along with the human scale. For example, you can have one person write up some
    scripts on their laptop to solve a particular problem that they have. Python's
    great for that.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 除了各种实现所面临的挑战之外，Python作为一门语言所拥有的，我认为这是它的真正优势，就是它能够与人类规模相匹配地扩展。例如，你可以让一个人在他们自己的笔记本电脑上编写一些脚本来解决他们遇到的具体问题。Python在这方面非常出色。
- en: '**Barry Warsaw: ''One thing that Python has as a language, and I think this
    is its real strength, is that it scales along with the human scale.''**'
  id: totrans-120
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·沃沙：''Python作为一门语言，我认为它的真正优势在于它能够与人类规模相匹配地扩展。''**'
- en: Python also scales to, let's say, a small open source project with maybe 10
    or 15 people contributing. Python scales to hundreds of people working on a fairly
    large project, or thousands of people working on massive software projects.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: Python的扩展能力也适用于，比如说，一个由10到15人贡献的小型开源项目。Python可以扩展到数百人在一个相当大的项目上工作，或者数千人在大型软件项目上工作。
- en: Another amazing strength of Python as a language is that new developers can
    come in and learn it easily and be productive very quickly. They can pull down
    a completely new Python source code for a project that they've never seen before
    and dive in and learn it very easily and quickly. There are some challenges as
    Python scales on the human scale, but I feel like those are being solved by things
    like the type annotations, for example.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: Python作为一门语言的另一个惊人优势是，新开发者可以轻松地学习它，并且能够很快地变得高效。他们可以下载一个完全新的、他们以前从未见过的项目的Python源代码，然后轻松快速地学习它。当Python在人类规模上扩展时，确实存在一些挑战，但我感觉这些挑战正通过诸如类型注解之类的解决方案得到解决。
- en: On very large Python projects, where you have a mix of junior and senior developers,
    it can be a lot of effort for junior developers to understand how to use an existing
    library or application, because they're coming from a more statically-typed language.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在非常大的Python项目中，当你有初级和高级开发者的混合时，初级开发者理解如何使用现有的库或应用程序可能需要付出很多努力，因为他们来自更静态类型化的语言。
- en: So a lot of organizations that are building very large Python codebases are
    adopting type annotations, maybe not so much to help with the performance of the
    applications, but to help with the onboarding of new developers. I think that's
    going a long way in helping Python to continue to scale on a human scale.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，许多正在构建大型Python代码库的组织正在采用类型注解，可能并不是为了帮助提高应用程序的性能，而是为了帮助新开发者的入职。我认为这对Python继续在人类规模上扩展起到了很大的作用。
- en: '**Barry Warsaw: ''I think if we address some of those technical limitations...then
    we''re really setting Python up for another 20 years of success and growth.''**'
  id: totrans-125
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·沃沙：''我认为如果我们解决了一些技术限制……那么我们实际上为Python的下一个20年的成功和增长做好了准备。''**'
- en: To me, the language's scaling capacity and the welcoming nature of the Python
    community are the two things that make Python still compelling even after 23 years,
    and will continue to make Python compelling in the future. I think if we address
    some of those technical limitations, which are completely doable, then we're really
    setting Python up for another 20 years of success and growth.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 对我来说，语言的扩展能力和Python社区的欢迎性质是使Python即使在23年后仍然具有吸引力，并在未来继续具有吸引力的两个因素。我认为如果我们解决了一些技术限制，这些限制是完全可行的，那么我们实际上为Python的下一个20年的成功和增长做好了准备。
- en: '**Driscoll**: Do you see any new features coming to Python, or is there anything
    else that you''re excited about?'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里科：你看到Python即将推出任何新功能吗，或者还有什么其他让你兴奋的事情吗？**'
- en: '**Warsaw**: Yeah, another friend of mine, Eric Smith, who''s also a core developer,
    comes up with these great features that you don''t know how you ever used Python
    without.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: '**沃沙：是的，我的另一个朋友，埃里克·史密斯，他也是核心开发者，提出了这些很棒的功能，你不知道没有这些功能你如何使用Python。**'
- en: One new feature in Python 3.6 is the f-strings, the format strings. I have only
    used f-strings in a couple of projects, because they're a Python 3.6 feature,
    but I love f-strings. I also love contextlib.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3.6中的一个新特性是f-strings，即格式化字符串。我只在几个项目中使用过f-strings，因为它们是Python 3.6的特性，但我非常喜欢f-strings。我也喜欢contextlib。
- en: '**Barry Warsaw: ''I say this with every release, but Python 3.7 is truly going
    to be the best ever.''**'
  id: totrans-130
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·沃沙：''我每次发布时都会这么说，但Python 3.7将真正成为最好的。''**'
- en: I'm also very excited about Python 3.7\. I say this with every release, but
    Python 3.7 is truly going to be the best ever. We're going to see some great new
    libraries, improved support for *asyncio*, and better performance. Python development
    is as vibrant as ever and I believe that the improvements to our workflow (for
    example, the switch to Git and GitHub) has really opened up Python development
    to many more people.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 我也非常期待Python 3.7。我每次发布时都会这么说，但Python 3.7确实将成为最好的。我们将看到一些伟大的新库，对*asyncio*的改进，以及更好的性能。Python开发仍然充满活力，我相信我们对工作流程的改进（例如，转向Git和GitHub）真正为更多的人打开了Python开发的大门。
- en: I love that folks can experiment with crazy ideas, like the gilectomy, which
    even if they don't pan out, provide fodder for future development. C Python's
    implementation is easy to understand, navigate, and change, and this goes a long
    way to making it a friendly platform for experimentation and change.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 我喜欢看到人们可以尝试疯狂的想法，比如gilectomy，即使它们最终没有成功，也能为未来的发展提供素材。C Python的实现易于理解、导航和更改，这使它成为一个非常适合实验和变革的平台。
- en: All the while, we have Guido's continued stewardship and other long-time developers
    providing vision and coherence, so that while Python today looks very different
    to Python from 20+ years ago, it still feels like the same well-designed, consistent,
    easy to learn, yet scalable language.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，我们有Guido的持续监护和其他长期开发者提供视野和连贯性，所以尽管今天的Python与20多年前的Python看起来非常不同，但它仍然感觉像是一个设计良好、一致、易于学习且可扩展的语言。
- en: '**Driscoll**: What do you think about the long life of Python 2.7?'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '**德里斯科尔**：你对Python 2.7的长寿有何看法？'
- en: '**Warsaw**: We all know that we''ve got to get on Python 3, so Python 2''s
    life is limited. I made it a mission inside of Ubuntu to try to get people to
    get on Python 3\. Similarly, within LinkedIn, I''m really psyched, because all
    of my projects are on Python 3 now. Python 3 is so much more compelling than Python
    2.'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '**华沙**：我们都知道我们必须转向Python 3，所以Python 2的生命是有限的。我在Ubuntu内部将推广Python 3作为一项使命，试图让人们转向Python
    3。同样，在LinkedIn内部，我非常兴奋，因为我的所有项目现在都在Python 3上。Python 3比Python 2更有吸引力。'
- en: '**Barry Warsaw: ''We all know that we''ve got to get on Python 3, so Python
    2''s life is limited.''**'
  id: totrans-136
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**巴里·华沙**：“我们都知道我们必须转向Python 3，所以Python 2的生命是有限的。”'
- en: You don't even realize all of the features that you have in Python 3\. One of
    the features that I think is really awesome is the async I/O library. I'm using
    that in a lot of things and think it is a very compelling new feature, that started
    with Python 3.4\. Even with Python 3.5, with the new async keywords for I/O-based
    applications, *asyncio* was just amazing.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你甚至没有意识到Python 3中所有你拥有的特性。我认为其中一个非常酷的特性是异步I/O库。我在很多地方都使用了它，并认为这是一个非常吸引人的新特性，它始于Python
    3.4。即使在Python 3.5中，有了针对基于I/O的应用程序的新异步关键字，*asyncio*也令人惊叹。
- en: There are tons of these features that once you start to use them, you just can't
    go back to Python 2\. It feels so primitive. I love Python 3 and use it exclusively
    in all of my personal open source projects. I find that dropping back to Python
    2.7 is often a chore, because so many of the cool things you depend on are just
    missing, although some libraries are available in Python 2 compatible back ports.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 有许多这样的特性，一旦开始使用，你就无法回到Python 2。它感觉如此原始。我喜欢Python 3，并在所有个人开源项目中仅使用它。我发现回到Python
    2.7通常是一项繁琐的工作，因为许多你依赖的酷炫功能都消失了，尽管一些库在Python 2兼容的回端口中可用。
- en: I firmly believe that it's well past the time to fully embrace Python 3\. I
    wouldn't write a line of new code that doesn't support it, although there can
    be business reasons to continue to support existing Python 2 code.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 我坚信现在是时候完全拥抱Python 3了。我不会写一行不支持它的代码，尽管可能存在继续支持现有Python 2代码的商业理由。
- en: It's almost never that difficult to convert to Python 3, although there are
    still a handful of dependencies that don't support it, often because those dependencies
    have been abandoned. It does require resources and careful planning though, but
    any organization that routinely addresses technical debt should have conversion
    to Python 3 in their plans.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 转向Python 3几乎从不困难，尽管仍然有一些依赖项不支持它，通常是因为这些依赖项已经被遗弃。这确实需要资源和周密的计划，但任何定期解决技术债务的组织都应该在他们的计划中将Python
    3的转换考虑在内。
- en: That said, the long life of Python 2.7 has been great. It's provided two important
    benefits I think. The first is that it provided a very stable version of Python,
    almost a long-term support release, so folks didn't have to even think about changes
    in Python every 18 months (the typical length of time new versions are in development).
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 话虽如此，Python 2.7 的长寿期是非常棒的。我认为它提供了两个重要的好处。第一个是它提供了一个非常稳定的 Python 版本，几乎是一个长期支持版本，因此人们不必每
    18 个月（新版本通常的开发时间）就考虑 Python 的变化。
- en: '**Barry Warsaw: ''Python 2.7''s long life also allowed the rest of the ecosystem
    to catch up with Python 3.''**'
  id: totrans-142
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: '**Barry Warsaw: ''Python 2.7 的长寿期也使得整个生态系统能够赶上 Python 3。''**'
- en: Python 2.7's long life also allowed the rest of the ecosystem to catch up with
    Python 3\. So the folks who were very motivated to support it could sand down
    the sharp edges and make it much easier for others to follow. I think we now have
    very good tools, experience, and expertise in how to switch to Python 3 with the
    greatest chance of success.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: Python 2.7 的长寿期也使得整个生态系统能够赶上 Python 3。因此，那些非常愿意支持它的人可以磨平锋利的边缘，使其他人更容易跟进。我认为我们现在在如何成功切换到
    Python 3 方面拥有非常好的工具、经验和专业知识。
- en: I think we reached the tipping point somewhere around the Python 3.5 release.
    Regardless of what the numbers say, we're well past the point where there's any
    debate about choosing Python 3, especially for new code. Python 2.7 will end its
    life in mid-2020 and that's about right, although not soon enough for me! At some
    point, it's just more fun to develop in and on Python 3\. That's where you are
    seeing the most energy and enthusiasm from Python developers.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为我们达到转折点是在 Python 3.5 版本发布时。无论数字如何，我们都已经远远超过了关于选择 Python 3 的任何争议点，尤其是对于新代码。Python
    2.7 将在 2020 年中结束其生命周期，这虽然对我来说还不够快，但大致是合适的。在某个时候，在 Python 3 上开发和运行更加有趣。这就是你看到 Python
    开发者最多能量和热情的地方。
- en: '**Driscoll**: What changes would you like to see in future Python releases?'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 你希望在未来 Python 版本中看到哪些变化？'
- en: '**Warsaw**: I''ve been thinking lately about significant changes to the way
    we develop C extension modules. I''d like to see us get out of that business,
    by adopting something like Cython as the higher-level language and tool for generating
    extension modules. By doing this, we''d lay the groundwork for improvements in
    the C API, uncoupled from all the existing extension modules out there.'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '**Warsaw**: 最近我一直在思考对我们开发 C 扩展模块方式的重大改变。我希望我们能够通过采用类似 Cython 这样的高级语言和工具来生成扩展模块，从而摆脱这一业务。通过这样做，我们将为
    C API 的改进打下基础，与现有的所有扩展模块解耦。'
- en: We'd be able to experiment with more internal changes that break the C API,
    such as removing the Global Interpreter Lock (GIL) or adopting a traditional garbage
    collector. If you look at the gilectomy work for example (that is, an experimental
    branch to remove the GIL), it's very complex, because it has to maintain compatibility
    with the existing C API as much as possible. If we could break that, without breaking
    source-level compatibility with third-party modules, we'd be much more free to
    improve things internally.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将能够尝试更多内部变化，这些变化会破坏 C API，例如移除全局解释器锁（GIL）或采用传统的垃圾回收器。例如，如果你看看移除 GIL 的工作（即移除
    GIL 的实验分支），它非常复杂，因为它必须尽可能保持与现有 C API 的兼容性。如果我们能够打破这一点，而不破坏与第三方模块的源代码级兼容性，我们将有更多的自由来内部改进事物。
- en: '**Driscoll**: Thank you, Barry Warsaw.'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '**Driscoll**: 谢谢，Barry Warsaw。'
