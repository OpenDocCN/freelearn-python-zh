- en: 'Chapter 6: Creating SPAs on the Backends'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We cannot create a complete site by simply managing groups and sending HTML
    to the client. We must first master a variety of small solutions in order to be
    able to build a dynamic page that interacts with the user, with essential features
    such as page switching!
  prefs: []
  type: TYPE_NORMAL
- en: 'When the first **single-page applications** (**SPAs**) were created, the developers
    at the time were forced to spend many hours on functionalities that had been free
    when using the HTTP protocol: routing, sessions, authentication, or origin verification,
    among others. Poor them! They had to re-invent the wheel with a rebellious adolescent
    JavaScript that was not very cross-browser compatible. However, they survived,
    or so I would like to think, by defining techniques in the frontend that have
    managed to mimic the same behavior as HTTP; these techniques have lasted until
    today. For example, in a routing system, when a SPA redraws a screen, the browser
    URL is modified to put the user in context. On the other hand, if a visitor manually
    types the address, the application reacts by loading the components that make
    up the screen. All tasks are exhausting to implement with JavaScript. It is not
    cheap to change content without making a new request. If we just used plain HTML,
    we wouldn’t need to do anything, but of course, the user would experience a page
    refresh with every change. And what does all this have to do with us? If we create
    pages using the WebSockets protocol, we find ourselves in a similar situation;
    we have to invent formulations to simulate the behavior that a polite user expects
    from us.'
  prefs: []
  type: TYPE_NORMAL
- en: Channels is simple in functionality compared to other libraries, but at the
    same time very mature and consistent with the real world. It is a framework born
    out of necessity. It relies on Django to give us the essentials to solve typical
    problems while providing flexibility.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to review different approaches to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Switching between pages
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Server-side rendering for each route
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Including a browser to achieve dynamic navigation
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Changing URLs
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hydrating sections or components
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating temporary sessions for sessions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Avoiding **cross-site request forgery** (**CSRF**) with WebSockets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Therefore, we are going to focus on how to solve each point in order to prepare
    ourselves for [*Chapter 7*](B18321_07_ePub.xhtml#_idTextAnchor152), *Creating
    a Real-Time Blog Using Only Django.*
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s organize our projects a bit better. From now on, we are going to divide
    Channels into two files: `consumers.py`, which will be the equivalent of `views.py`
    or a communication gateway between the frontend and the backend, and `actions.py`,
    where the logic or functions will be located.'
  prefs: []
  type: TYPE_NORMAL
- en: We’ll start by adding a complete system for switching pages. You will not need
    to follow each point in order, as you will find examples of how we can solve each
    task, not a tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'All the code from the different sections can be found at the following link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-6](https://github.com/PacktPublishing/Building-SPAs-with-Django-and-HTML-Over-the-Wire/tree/main/chapter-6)'
  prefs: []
  type: TYPE_NORMAL
- en: Switching between pages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'At some point, the user will need to go to another page or change context.
    We are going to make them think this is happening, but in reality, it is going
    to be a magic trick since really, they will never move from the first HTML we
    gave them at the beginning. However, and here’s the key, they will perceive that
    the page is being changed. To achieve this deception (sorry, achievement), we
    will carry out the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the HTML of the main content or everything that belongs to `<main>`.
    Meanwhile, we will always keep the static sections of the pages, such as `<header>`,
    `<aside>`, or `<footer>`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement server-side rendering to render the HTML belonging to each URL.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Visually mark in the `<nav>` where we are with a CSS style.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Modify the browser URL via the JavaScript API. It is an aesthetic change but
    the URL acts as breadcrumbs to guide the visitor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The objective is to build a site with three pages: `base.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `components/_nav.html` component will be discussed later when we talk about
    navigation. The important thing is that we are going to incorporate an `include`
    inside `<main>` that we will use to create a future server-side rendering system.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, in the `Consumer` class, we will create the `"Change page"` action, which
    will invoke the `send_page (self, "page name")` function inside `actions.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: As you may have noticed, `send_html` has also already been modified to incorporate
    `append`, which we will use to indicate whether we want to add a block of HTML
    to the selector or replace all the content (for the moment, we will not implement
    it), while `url` will be used to indicate the URL that will be displayed in the
    browser.
  prefs: []
  type: TYPE_NORMAL
- en: 'In `app/app_template/actions.py`, we would define the function that renders
    HTML and sends it to the frontend:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE70]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE71]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE72]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE73]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE74]'
  prefs: []
  type: TYPE_PRE
- en: 'We prepare the variables that will be used to render the HTML templates, the
    `Form` object corresponding to each page, and the name of the page where we are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE77]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE78]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE79]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE80]'
  prefs: []
  type: TYPE_PRE
- en: 'At each page change, we must redraw the `main` browser to mark where we are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE81]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE82]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE83]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE84]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE85]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE86]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE87]'
  prefs: []
  type: TYPE_PRE
- en: Finally, we send the HTML of the page to the frontend at `<main>` with a variable
    called `url`. This will be used by JavaScript later on to modify the address of
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Before we continue to incorporate page switching, let’s make a pitstop to incorporate
    the rendering of each view using Django. It will simplify the task of creating
    a browser that we’ll need to move between pages.
  prefs: []
  type: TYPE_NORMAL
- en: Server-side rendering for each route
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After preparing the `Consumer` class to change pages dynamically, we are going
    to incorporate a trivial system with Django for the management of routes and the
    rendering of each page without depending on Channels, so that crawlers can index
    the content. We’ll define three templates (`home.html`, `login.html`, and `signup.html`).
  prefs: []
  type: TYPE_NORMAL
- en: 'The content of `app/app_template/templates/pages/home.html` will be a few lines
    of HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE88]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE89]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE90]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE91]'
  prefs: []
  type: TYPE_PRE
- en: Then, on the second page, representing a login form, we will use a `form` object
    to list all the fields and then validate. This will be an argument that we will
    pass when rendering the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'We write the following code in `app/app_template/templates/pages/login.html`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE92]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE93]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE94]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE95]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE96]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, we repeat the same structure in `app/app_template/templates/pages/signup.html`
    using a `form` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE98]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE99]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE100]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE101]'
  prefs: []
  type: TYPE_PRE
- en: 'Before defining the views, we need to structure the forms. In `app/app_template/forms.py`,
    we add the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE102]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE103]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE104]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE105]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE106]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE107]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE108]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE109]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE110]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE111]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE112]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE113]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE114]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE115]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE116]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE117]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE118]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE119]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE120]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE121]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE122]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE123]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE125]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE126]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE127]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE128]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE129]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE130]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE131]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE132]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE133]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE134]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE135]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE136]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE137]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE138]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE139]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE140]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE141]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE142]'
  prefs: []
  type: TYPE_PRE
- en: 'With the templates and forms ready to be rendered, we edit `app/app_template/views.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE143]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE144]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE145]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE146]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE147]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE148]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE149]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE150]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE151]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE152]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE153]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE154]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE155]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE156]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE157]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE158]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE159]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE160]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE161]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE162]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE163]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE164]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE165]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE166]'
  prefs: []
  type: TYPE_PRE
- en: 'In all cases, we use `base.html` as the main layout, where we will alter the
    content of `<main>` with the `page` variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE167]'
  prefs: []
  type: TYPE_PRE
- en: The `active_nav` variable is a visual resource to inform the visitor via CSS
    where they are by changing the color of the appropriate hyperlink. We can ignore
    it for the moment.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we edit `project_template/urls.py` to define all the paths:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE168]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE169]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE170]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE171]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE172]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE173]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE174]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE175]'
  prefs: []
  type: TYPE_PRE
- en: 'Nothing out of the ordinary; it’s Django’s own routing system. Except for one
    detail: we haven’t extended it at any point. The usual way would be to render
    `home.html` and not `base.html`. In other words, `home.html` is the content of
    the page, which uses `base.html` as its structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE176]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE177]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE178]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE179]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE180]'
  prefs: []
  type: TYPE_PRE
- en: We’ve done it this way because Django must adapt to the way we’re going to draw
    HTML via WebSockets. We are only interested in modifying `<main>` and the templates
    must be isolated in components to work this way.
  prefs: []
  type: TYPE_NORMAL
- en: You can now open the three paths to see how they render without using a `Consumer`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can see how the root of the site is rendered:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Rendering the Home page using Django'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.01_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.1 – Rendering the Home page using Django
  prefs: []
  type: TYPE_NORMAL
- en: 'The login form is rendered without any problem:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Rendering the Login page using Django'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.02_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.2 – Rendering the Login page using Django
  prefs: []
  type: TYPE_NORMAL
- en: 'The same happens when we render the registration page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Rendering the Signup page using Django'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.03_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.3 – Rendering the Signup page using Django
  prefs: []
  type: TYPE_NORMAL
- en: With the server-side rendering system in place, we are going to incorporate
    a browser that executes actions to dynamically modify the body of the page or
    small sections of it.
  prefs: []
  type: TYPE_NORMAL
- en: Including a browser to achieve dynamic navigation
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After incorporating the templates, views, and routes for traditional navigation,
    we will create a dynamic navigation system.
  prefs: []
  type: TYPE_NORMAL
- en: 'We declare a file in the `app/app_template/components/_nav.html` path with
    the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE181]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE182]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE183]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE184]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE185]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE186]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE187]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE188]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE189]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE190]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE191]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE192]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE193]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE194]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE195]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE196]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE197]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE198]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE199]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE200]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE201]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE202]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE203]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE204]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE205]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE206]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE207]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE208]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE209]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE210]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE211]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE212]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE213]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE214]'
  prefs: []
  type: TYPE_PRE
- en: We will pass `active_nav` to the template with the name of the page we want
    to mark with CSS, adding the `active` class. On the other hand, `data-target`
    is a dataset that will collect JavaScript to send to the `Consumer` class and
    tell it which page to render.
  prefs: []
  type: TYPE_NORMAL
- en: In JavaScript, we will assign a `click` event to each `<a>` to send the action
    to change the desired page to the `Consumer` class. Which page? The one we have
    saved in the `data-target`. We must be careful before adding a new event listener;
    it is highly recommended that we delete the previous one to avoid duplicating
    the events to the same functions. Remember that the HTML is swapped but JavaScript
    remains static.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `static/js/index.js`, adding the browser events:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE215]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE216]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE217]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE218]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE219]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE220]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE221]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE222]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE223]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE224]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE225]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE226]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE227]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE228]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE229]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE230]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE231]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE232]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE233]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE234]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE235]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE236]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE237]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE238]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE239]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE240]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE241]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE242]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE243]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE244]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE245]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE246]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE247]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE248]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE249]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE250]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE251]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE252]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE256]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE257]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE258]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE259]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE260]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE261]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE262]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE263]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE264]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE265]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE266]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we just need to add some CSS in `static/css/main.css` to change the color
    of the link for where we are:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE267]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE268]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE269]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE270]'
  prefs: []
  type: TYPE_PRE
- en: We can now switch between pages, although this is not reflected in the browser’s
    address bar.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – Login page loaded with ability to navigate between Home and
    Signup dynamically'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.04_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.4 – Login page loaded with ability to navigate between Home and Signup
    dynamically
  prefs: []
  type: TYPE_NORMAL
- en: We have built a website with the ability to navigate between pages, as well
    as integrating traditional rendering to feed content to **search engine spiders**.
    However, we do not give feedback to visitors. The next objective will be to display
    the hierarchy and/or name of the page in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Changing URLs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have managed to change pages and visually mark in the browser where we are,
    but the browser URL is still passive. We are going to add a mechanism to update
    the path every time we change pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'In JavaScript, we can use the History API to manipulate the address that the
    visitor sees in the browser. For example, if you wanted to show that you are at
    `/login/`, you would implement the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE271]'
  prefs: []
  type: TYPE_PRE
- en: 'What we will do is modify the event listener message by adding the line we
    just mentioned, together with a new parameter that will always send a `Consumer`
    class called `url`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE272]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE273]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE274]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE275]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE276]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE277]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE278]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE279]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE280]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE281]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE282]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE283]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE284]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE285]'
  prefs: []
  type: TYPE_PRE
- en: 'In `Consumer`, we will modify the `send_html` function to support the `url`
    parameter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE286]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE287]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE288]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE289]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE290]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE291]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE292]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE293]'
  prefs: []
  type: TYPE_PRE
- en: 'While in `actions.py`, we’ll modify `send_page` to send the route, but what
    is the route? Thanks to Django and `urls.py`, we can use `reverse`, which will
    return the full path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE294]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE295]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE296]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE297]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE298]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE299]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE300]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE301]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE302]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE303]'
  prefs: []
  type: TYPE_PRE
- en: We can now visualize the routes when navigating.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Displaying the URL when browsing dynamically'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.05_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.5 – Displaying the URL when browsing dynamically
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a serious limitation though: we cannot add HTML blocks. We can only
    replace them. It is inefficient to render a whole page if we are only looking
    to add a new element to an existing list, for example. So, we are going to include
    a system that enables us to decide whether we are going to replace or add a piece
    of HTML to any available selector.'
  prefs: []
  type: TYPE_NORMAL
- en: Hydrating sections or components
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Although we have a function that can dynamically include HTML rendered from
    a template and apply it to a tag present in the document, we cannot decide whether
    we want to replace or insert HTML, in other words, hydrate or replace the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: '**Hydration** is a technique in web development where client-side JavaScript
    converts a static HTML web page into a dynamic web page by attaching event handlers
    to the HTML elements. This allows for a fast **First Contentful Paint** (**FCP**)
    but there is a period of time afterward where the page appears to be fully loaded
    and interactive. However, it is not until the client-side JavaScript is executed
    and event handlers have been attached.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To solve this problem, we will start by remembering that the `Consumer` class
    is prepared to receive the `append` instruction:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE304]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE305]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE306]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE307]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE308]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE309]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE310]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE311]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE312]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE313]'
  prefs: []
  type: TYPE_PRE
- en: By default, `append` will be a `False` variable. But if the client sends us
    the `append` data and it is `True`, we will send what we want to add to the frontend
    and JavaScript will take care of the rest.
  prefs: []
  type: TYPE_NORMAL
- en: 'We include the following in `static/js/index.js`, a conditional to control
    `append`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE314]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE315]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE316]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE317]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE318]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE319]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE320]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE321]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE322]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE323]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE324]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE325]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE326]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE327]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE328]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE329]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE330]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE331]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE332]'
  prefs: []
  type: TYPE_PRE
- en: To check that it works, we are going to add a list of **Laps** to the **Home**
    page. A Lap is a unit of time that is stored inside a stopwatch as a history of
    recorded periods of time. For example, if it were a Formula 1 race, you could
    visualize how long each car took to complete a lap just by looking at the recorded
    lap time.
  prefs: []
  type: TYPE_NORMAL
- en: 'Each time a button is pressed, a new item with the current time will be added:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We edit the `Home` template hosted in `app/app_template/templates/pages/home.html`.
    We include a button and an unordered list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In JavaScript, hosted in the example in `static/js/index.js`, we incorporate
    the event into the button. It will just send an action without any data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Consumer` class, in the `app/app_template/consumers.py` path, we capture
    the action and call a future `add_lap` function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `actions`, located in `app/app_template/actions.py`, we include the function
    we called `add_lap` in the previous point. We include in the `#laps` selector
    the HTML fragment rendered in the `_laps.html` template, which is created from
    a variable called `time`, with the current time:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we build the `app/app_template/templates/components/_lap.html` component:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: And that’s it. We test how we can update the list over time by pressing the
    **Add lap** button in **Home**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Adding HTML snippets to preserve the previous content in an
    unordered list that records the time when the button was clicked'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.06_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.6 – Adding HTML snippets to preserve the previous content in an unordered
    list that records the time when the button was clicked
  prefs: []
  type: TYPE_NORMAL
- en: We have improved the HTML rendering system to be more selective and efficient.
    We can now decide when we want to add or replace a DOM.
  prefs: []
  type: TYPE_NORMAL
- en: If you change the page and go back to **Home**, you will find that all the times
    have been deleted. To avoid this problem, we could save times in the database,
    or we can find an optimal solution by creating a temporary session for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Creating temporary sessions for clients
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To have unique sessions for each client, we will need to activate middleware
    that enables this feature. Channels provides us with `SessionMiddlewareStack`
    or `AuthMiddlewareStack`, which also include tools to build login or logout functionality.
    We will use `AuthMiddlewareStack` whenever we can.
  prefs: []
  type: TYPE_NORMAL
- en: 'We edit `project_template/asgi.py` as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE338]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE339]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE340]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE341]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE342]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE343]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE344]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE345]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE346]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE347]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE348]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE349]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE350]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE351]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE352]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE353]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE354]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE355]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE356]'
  prefs: []
  type: TYPE_PRE
- en: 'We can now create sessions within the `Consumer` class with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE357]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE358]'
  prefs: []
  type: TYPE_PRE
- en: 'Getting it will be the same as reading from any Python dictionary:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE359]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE360]'
  prefs: []
  type: TYPE_PRE
- en: 'To exemplify its potential, we will create a classic to-do app on the home
    page. Even if we change pages, all the tasks that we left pending are always present
    when we come back, just like in real life. See the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the end of the `home` template, we include an `<input>` to add the text
    of the task, a button to trigger the action, and the list where it will be displayed:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE361]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will need a component that lists all the tasks. Therefore, in `app/app_template/templates/components/_tasks.html`,
    we include the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE362]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inside the previous component, we use another component to render the item.
    We declare `app/app_template/templates/components/_task-item.html` with a `<li>`
    and the name of the task:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE363]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the `Consumer` class, when a user connects, we create a session called `tasks`
    with an empty list that we can fill in. On the other hand, we capture the action
    received from the frontend called "`Add task`" and call the `add_task` function
    in `actions.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE364]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In `actions.py`, we declare the `add_task` function, which will add the task
    to the session, but we will also create `context` for `home` with the `session`
    variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE365]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, in JavaScript, we add a `click` event to the button to send the text
    with the task to the `Consumer` class:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE366]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We must update if new DOM elements have appeared. Otherwise, the events will
    stop working if the previous HTML has been deleted. The steps to follow are to
    stop listening to the previous events if they exist, and add the new ones. If
    we don’t do this, the events will be lost or duplicated.
  prefs: []
  type: TYPE_NORMAL
- en: The event to be executed is simple. We capture the `#task` field and send the
    `Consumer` class the text of the task.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Displaying a list of tasks from a session'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_6.07_B18321.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6.7 – Displaying a list of tasks from a session
  prefs: []
  type: TYPE_NORMAL
- en: We are already able to work with sessions and even create HTML from their content.
    Now, we just need to implement some security measures to prevent CSRF exploits.
  prefs: []
  type: TYPE_NORMAL
- en: Avoiding cross-site request forgery (CSRF) with WebSockets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By using sessions, we are exposing users to a CSRF attack unless we put appropriate
    measures in place.
  prefs: []
  type: TYPE_NORMAL
- en: CSRF attacks
  prefs: []
  type: TYPE_NORMAL
- en: CSRF attacks are malicious attacks on a website in which unauthorized commands
    are sent from one user to a second site with hidden forms, AJAX requests, or any
    other method in a hidden way.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a reference here: [https://en.wikipedia.org/wiki/Cross-site_request_forgery](https://en.wikipedia.org/wiki/Cross-site_request_forgery).'
  prefs: []
  type: TYPE_NORMAL
- en: 'Channels provides a tool that will help us to avoid this type of attack in
    a simple way:'
  prefs: []
  type: TYPE_NORMAL
- en: 'We define the allowed Hosts in `project_template/settings.py`. In our case,
    we are using environment variables inside Docker:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE367]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We edit `project_template/asgi.py`, by importing `OriginValidator`. We must
    pass two parameters: `URLRouter` (or any intermediary middleware) and the `Hosts`
    we want to protect:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE368]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: As this functionality is so quick to implement, it is highly recommended that
    it always be part of our future projects or integrated into the template that
    we use as a base.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we have added some very interesting new capabilities to our
    project: switching between pages, creating server-side rendering versions of each
    path, creating a dynamic page, modifying URLs, updating specific sections, working
    with sessions, and avoiding CSRF with WebSockets.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now already have the basic skills to build a dynamic site with database
    access, group management, partial or full HTML rendering, event control that triggers
    backend actions, form creation, and some security measures. One question may be
    echoing in your head: was it worth all the effort? Just think that we can now
    create SPAs with minimal use of JavaScript, we don’t need to build an API to connect
    the frontend and the backend, and the time between requests and their responses
    is ridiculously low, avoiding the use of loading in many cases. The complexity
    of the projects also has decreased and we can avoid the installation of several
    frontend libraries. Judge for yourself. The most amazing thing is that we have
    only used Django and Channels; the potential we can achieve by adding other Python
    extensions is infinite.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, [*Chapter 7*](B18321_07_ePub.xhtml#_idTextAnchor152), *Creating
    a Real-Time Blog Using Only Django*, we will put all the pieces together to exemplify
    a real case that we can use for our own project or an external one.
  prefs: []
  type: TYPE_NORMAL
