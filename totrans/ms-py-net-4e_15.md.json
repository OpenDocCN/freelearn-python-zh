["```py\n# Installing Docker Engine\n$ sudo apt-get install ca-certificates curl gnupg lsb-release\n$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg\n$ echo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n$ sudo apt-get update\n$ sudo apt-get install docker-ce docker-ce-cli containerd.io\n# Run Docker as user\n$ sudo groupadd docker\n$ sudo usermod -aG docker $USER\n$ newgrp docker \n# Install Docker-Compose\n$ sudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n$ sudo chmod +x /usr/local/bin/docker-compose\n$ docker-compose --version\ndocker-compose version 1.29.2, build 5becea4c \n```", "```py\n$ sudo apt update\n$ sudo apt-get install -y curl openssh-server ca-certificates tzdata perl \n$ sudo apt-get install -y postfix\n$ curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ee/script.deb.sh | sudo bash\n$ sudo EXTERNAL_URL=\"http://gitlab.networkautomationnerds.com:9090\" apt-get install gitlab-ee \n```", "```py\n$ sudo cat /etc/gitlab/initial_root_password\n…\nPassword: <random password>\n$ sudo gitlab-rake \"gitlab:password:reset\" \n```", "```py\n$ docker run --rm -t -i gitlab/gitlab-runner —help\nUnable to find image 'gitlab/gitlab-runner:latest' locally\nlatest: Pulling from gitlab/gitlab-runner\n7b1a6ab2e44d: Pull complete \n5580ef77ebbe: Pull complete \nd7b21acbe607: Pull complete \nDigest: sha256:d2db6b687e9cf5baf96009e43cc3eaebf180f634306cdc74e2400315d35f0dab\nStatus: Downloaded newer image for gitlab/gitlab-runner:latest\n…\n$    docker run -d --name gitlab-runner --restart always \\\n>      -v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n>      -v /var/run/docker.sock:/var/run/docker.sock \\\n>      gitlab/gitlab-runner:latest\n617b94e5e4c5c72d33610b2eef5eb7027f579f4e069558cbf61f884375812306 \n```", "```py\n(venv) echou@gitlab:~$ docker run --rm -it -v /srv/gitlab-runner/config:/etc/gitlab-runner gitlab/gitlab-runner register\nRuntime platform                                    arch=amd64 os=linux pid=8 revision=5316d4ac version=14.6.0\nRunning in system-mode.                            \n\nEnter the GitLab instance URL (for example, https://gitlab.com/):\nhttp://<ip>:<port> \nEnter the registration token:\n<token>\nEnter a description for the runner:\n[fef6fb5a91dd]: local-runner\nEnter tags for the runner (comma-separated): << Leave empty unless we want matching tag to run the runners jobs\nRegistering runner... succeeded                     runner=64eCJ5yp\nEnter an executor: virtualbox, docker-ssh+machine, kubernetes, custom, docker-ssh, parallels, docker+machine, docker, shell, ssh:\ndocker\nEnter the default Docker image (for example, ruby:2.6):\ndocker pull ubuntu:latest\nRunner registered successfully. Feel free to start it, but if it's running already the config should be automatically reloaded! \n```", "```py\n$ git clone http://gitlab.<url>/echou/chapter15_example1.git\nCloning into 'chapter15_example1'...\nUsername for 'http://gitlab.<url>': <user>\nPassword for 'http://<user>@<url>': \nremote: Enumerating objects: 3, done.\nremote: Counting objects: 100% (3/3), done.\nremote: Total 3 (delta 0), reused 0 (delta 0), pack-reused 0\nReceiving objects: 100% (3/3), done.\n$ cd chapter15_example1/\n$ ls\nREADME.md \n```", "```py\n# define stages\nstages: \n    - build\n    - test\n    - deploy\n# define the job\ndeploy our network: \n    image: \"ubuntu:20.04\"\n    stage: build\n    script: \n        - mkdir new_network\n        - cd new_network\n        - touch bom.txt\n        - echo \"this is our build\" >> bom.txt\n    artifacts: \n        paths: \n          - new_network/\ntest our network: \n    stage: test\n    image: \"ubuntu:20.04\"\n    script: \n        - pwd\n        - ls \n        - test -f new_network/bom.txt\ndeploy to prod:\n    stage: deploy\n    image: \"ubuntu:20.04\"\n    script: \n        - echo \"deploy to production\"\n    when: manual \n```", "```py\n$ git add .gitlab-ci.yml\n$ git commit -m \"initial commit\"\n$ git push origin main\nUsername for 'http://<url>': <username>\nPassword for 'http://<url>': <password>\nEnumerating objects: 4, done.\nCounting objects: 100% (4/4), done.\nDelta compression using up to 2 threads\nCompressing objects: 100% (3/3), done.\nWriting objects: 100% (3/3), 512 bytes | 512.00 KiB/s, done.\nTotal 3 (delta 0), reused 0 (delta 0), pack-reused 0\nTo http://<url> /echou/chapter15_example1.git\n   c0b232d..5552a10  main -> main \n```", "```py\n$ git clone http://<url>/echou/chapter15_example2.git\n$ cd chapter15_example2/ \n```", "```py\n---\nr1:\n    hostname: '192.168.2.218'\n    port: 22\n    username: 'cisco'\n    password: 'cisco'\n    platform: 'cisco_ios'\nr2:\n    hostname: '192.168.2.219'\n    port: 22\n    username: 'cisco'\n    password: 'cisco'\n    platform: 'cisco_ios' \n```", "```py\n#!/usr/bin/env python\nfrom nornir import InitNornir\nfrom nornir_utils.plugins.functions import print_result\nfrom nornir_netmiko import netmiko_send_command\nnr = InitNornir()\nresult = nr.run(\n    task=netmiko_send_command,\n    command_string=\"show version\"\n)\nprint_result(result) \n```", "```py\n$ cat requirements.txt \n…\nflake8==4.0.1\n…\nnetmiko==3.4.0\nnornir==3.2.0\nnornir-netmiko==0.1.2\nnornir-utils==0.1.2\nparamiko==2.9.2\n… \n```", "```py\nstages:\n  - Test\n  - QA\nbefore_script: \n  - python --version\n  - pip3 install -r requirements.txt\nTest-Job:\n  stage: Test\n  script:\n    - python3 show_version.py \nflake8: \n  stage: QA\n  script: \n    - flake8 show_version.py \n```"]