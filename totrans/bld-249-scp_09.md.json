["```py\nfrom ftplib import FTP\nimport os.path\nimport re\nimport netrc\nimport tempfile\nfrom Blender import Image,Registry,Draw\n```", "```py\ndef sethome():\n   from os import environ\n   if not 'HOME' in environ:\n      if 'USERPROFILE'in environ:\n         environ['HOME'] = environ['USERPROFILE']\n```", "```py\ndef getftphost(reuse=True):\n   dictname = 'ftp'\n   if reuse == False:\n      Registry.RemoveKey(dictname)\n\n d = Registry.GetKey(dictname,True)\n   if d == None or not 'host' in d:\n      host = Draw.PupStrInput(\"Ftp hostname:\", \"\", 45)\n      if host == None or len(host) == 0 :\n         raise Exception(\"no hostname specified\")\n      if d == None :\n         d ={}\n      d['host'] = host\n      Registry.SetKey(dictname,d,True)\n   return d['host']\n```", "```py\ndef imagefilename(im):\n filename = im.getFilename()\n if filename == None or len(filename) == 0:\n      filename = im.getName()+'.tga'\n      filename = os.path.join(tempfile.gettempdir(),filename)\n      im.setFilename(filename)\n   im.save()\n   return filename\n```", "```py\ndef nextfile(filename):\n   (path,base) = os.path.split(filename)\n   (name,ext) = os.path.splitext(base)\n new = re.sub(r'\\.(\\d+)$',lambda m:'.'+str(1+int(m.group(1))),name)\n   if new == name :\n      new = name + '.1'\n   return os.path.join(path,new+ext)\n```", "```py\nif __name__ == \"__main__\":\n   sethome()\n   host = getftphost()\n```", "```py\n   try:\n (user,acct,password) = netrc.netrc().authenticators(host)\n   except:\n      acct=None\n      user = Draw.PupStrInput('No .netrc file found, enter username:',\n\"\",75)\n      password = Draw.PupStrInput('Enter password:',\"\",75)\n```", "```py\n   im = Image.Get('Render Result')\n   filename = imagefilename(im)\n\n ftp = FTP(host,user,password,acct)\n   files = ftp.nlst()\n```", "```py\n   dstfilename = os.path.basename(filename)\n while dstfilename in files:\n      dstfilename = nextfile(dstfilename)\n```", "```py\n   ftp.storbinary('STOR '+dstfilename,open(filename))\n\n   ftp.quit()\n\n   Draw.PupMenu('Render result stored as \"%s\"%s|Ok'%(dstfilename,'%t'))\n```", "```py\nimport Blender\nfrom os import walk,remove,rmdir,removedirs\nimport os.path\nfrom zipfile import ZipFile\n\nzipname = 'Attic.zip'\n```", "```py\ndef listfiles(dir):\n   for root,dirs,files in walk(dir):\n      for file in files:\n         if not file.startswith('.'):\n            yield os.path.normpath(os.path.join(root,file))\n      for d in dirs:\n if d.startswith('.'):\n            dirs.remove(d)\n```", "```py\ndef run():\n   Blender.UnpackAll(Blender.UnpackModes.USE_ORIGINAL)\n```", "```py\n   files = [os.path.normpath(f) for f inBlender.GetPaths(absolute=True)]\n currentdir = Blender.sys.expandpath('//')\n\n```", "```py\n   zip = ZipFile(os.path.join(currentdir,zipname),'w')\n   zip.debug = 3\n```", "```py\n   removefiles = []\n   for f in listfiles(currentdir):\n if not (f in files \nor os.path.splitext(f)[1].startswith('.blend') \nor os.path.basename(f) == zipname):\n         rf = os.path.relpath(f,currentdir)\n         zip.write(rf)\n         removefiles.append(f)\n\n   zip.close()\n```", "```py\n   for f in removefiles:\n      remove(f)\n      d = os.path.dirname(f)\n      if os.path.relpath(d,currentdir) != '.':\n         try:\n            removedirs(d)\n         except OSError:\n            pass\n\nif __name__ == '__main__':\n   run()\n```", "```py\n#!BPY\n\"\"\"\nName: 'Regular Expression Search'\nBlender: 249\nGroup: 'TextPlugin'\nShortcut: 'Ctrl+Alt+R'\nTooltip: 'Find text matching a regular expression'\n\"\"\"\n```", "```py\nfrom Blender import Draw,Text,Registry\nimport bpy\nimport re\n```", "```py\ndef popup(msg):\n   Draw.PupMenu(msg+'%t|Ok')\n   return\n```", "```py\nkeyname = 'regex'\n```", "```py\ndef run():\n\n   txt = bpy.data.texts.active\n   if not txt: return\n```", "```py\n   row,col = txt.getCursorPos()\n```", "```py\n   d=Registry.GetKey(keyname)\n   try:\n      default = d['regex']\n   except:\n default = ''\n   pattern = Draw.PupStrInput('Regex: ',default,40)\n   if pattern == None or len(pattern) == 0 : return\n```", "```py\n   try:\n      po = re.compile(pattern)\n   except:\n      popup('Illegal expression')\n      return\n```", "```py\n   first = True\n for string in txt.asLines(row):\n      if first :\n         string = string[col:]\n      mo = re.search(po,string)\n```", "```py\n      if mo != None :\n         i = mo.start()\n         l = mo.end()-i\n         if first :\n            i += col\n txt.setCursorPos(row,i)\n         txt.setSelectPos(row,i+l)\n         break\n      row += 1\n      first = False\n\n   else :\n      popup('No match')\n   Registry.SetKey(keyname,{'regex':pattern})\n\nif __name__ == '__main__':\n   run()\n```", "```py\n#!BPY\n\"\"\"\nName: 'SVNCommit'\nBlender: 249\nGroup: 'TextPlugin'\nShortcut: 'Ctrl+Alt+C'\nTooltip: 'Commit current textbuffer to svn'\n\"\"\"\n\nfrom Blender import Draw,Text,Registry\nimport bpy\nimport pysvn\n\ndef popup(msg):\n   Draw.PupMenu(msg+'%t|Ok')\n   return\n```", "```py\ndef run():\n\n   txt = bpy.data.texts.active\n   if not txt: return\n\n   fn = txt.getFilename()\n if fn == None or len(fn) == 0:\n      popup('No filename defined: save it first')\n      return\n```", "```py\n   svn = pysvn.Client()\n info = svn.info(fn)\n   if info == None:\n      popup('not yet added to repository, will do that now')\n      svn.add(fn)\n```", "```py\n   file=open(fn,'wb')\n   file.write('\\n'.join(txt.asLines()))\n   file.close()\n```", "```py\n   version = svn.checkin(fn,'Blender commit')\n   popup('updated to rev. '+str(version))\n\nif __name__ == '__main__':\n   run()\n```", "```py\n#!BPY\n\"\"\"\nName: 'SVNUpdate'\nBlender: 249\nGroup: 'TextPlugin'\nShortcut: 'Ctrl+Alt+U'\nTooltip: 'Update current textbuffer from svn'\n\"\"\"\n\nfrom Blender import Draw,Text,Registry\nimport bpy\nimport re\nimport pysvn\n\ndef popup(msg):\n   Draw.PupMenu(msg+'%t|Ok')\n   return\n```", "```py\ndef run():\n\n   txt = bpy.data.texts.active\n   if not txt: return\n\n   fn = txt.getFilename()\n if fn == None or len(fn) == 0:\n      popup('No filename defined: save it first')\n      return\n   svn = pysvn.Client()\n   info = svn.info(fn)\n   if info == None:\n      popup('not yet added to repository, will do that now')\n      svn.add(fn)\n```", "```py\n   file=open(fn,'wb')\n   file.write('\\n'.join(txt.asLines()))\n   file.close()\n\n if svn.status(fn)[0].text_status == pysvn.wc_status_kind.modified:\n      c=Draw.PupMenu('file probably newer than version in'+\n           'repository%t|Commit|Discard changes')\n      if c==1:\n         svn.checkin(fn,'Blender')\n         return\n      elif c==2:\n         svn.revert(fn)\n```", "```py\n   txt.clear()\n   file=open(fn)\n   txt.write(file.read())\n   file.close()\n```", "```py\n   popup('updated to rev. '+str(svn.status(fn)[0].entry.commit_revision))\n\nif __name__ == '__main__':\n   run()\n```", "```py\n<... all other code unchanged ...>\n\n__node__ = Raindrops\n\ntry:\n import psyco\n psyco.bind(Raindrops.__call__)\n print 'Psyco configured'\nexcept ImportError:\n print 'Psycho not configured, continuing'\n pass \n\n```"]