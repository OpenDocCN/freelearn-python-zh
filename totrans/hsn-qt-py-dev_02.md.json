["```py\n> pip install PyQt5\n```", "```py\n> pip install PySide2\n```", "```py\n> idle\n```", "```py\n> spyder\n```", "```py\n> python\n```", "```py\n> idle\n```", "```py\n>>> name = \"Name\"\n>>> number = 1\n```", "```py\n>>> 1 = 1\n```", "```py\n>>> 1name = \"Name\"\n```", "```py\n>>> str = 1\n```", "```py\n>>> True = 1\n```", "```py\n>>> strings = \"string\"\n>>> strings[0:3] \n'str'\n```", "```py\n>>> strings[2::-1]\n'rts'\n```", "```py\n>>> strings = \"string\" + \"string\" \n>>> strings\n'stringstring'\n```", "```py\n>>> strings = \"string\" * 3\n'stringstringstring'\n```", "```py\n>>> strings = \"string_some_sep_string\".split(\"_some_sep_\")\n>>> strings\n['string', 'string']\n```", "```py\n>>> strings = \"string\".replace(\"str\", \"programm\") \n>>> strings\n'programming'\n```", "```py\n>>> strings = str(1)\n>>> strings\n'1'\n```", "```py\n>>> len(\"some strings\")\n12\n```", "```py\n>>> \"some strings\".encode('utf-8') \nb'some strings'\n```", "```py\n>>> b'\\xd0\\xa1\\xd1\\x82\\xd1\\x80\\xd0\\xbe\\xd0\\xba\\xd0\\xb0'.decode('utf-8')\n'Строка'\n```", "```py\n>>> var = True\n>>> var\nTrue\n```", "```py\n>>> var = False\n>>> var\nFalse\n```", "```py\n>>> bool(1)\nTrue\n>>> bool(0)\nFalse\n```", "```py\n>>> 1 + 1\n2\n```", "```py\n>>> num = 2\n>>> num\n2\n```", "```py\n>>> num ** num * num / num + num - num\n4.0\n```", "```py\n>>> num ** num * num // num + num - num\n4\n```", "```py\n>>> 17 % num\n1\n```", "```py\n>>> int('2')\n2\n```", "```py\n>>> float(2)\n2.0\n```", "```py\n>>> complex(2, 2)\n(2+2j)\n```", "```py\n>>> bytes(\"111\", encoding='utf-8')\nb'1'\n```", "```py\n>>> b = bytearray(\"111\", encoding='utf-8')\n>>> b\nbytearray(b'111')\n```", "```py\n>>> b[0] = 0 >>> b bytearray(b'\\x0011')\n```", "```py\n>>> tu = (1, (2,), \"3\")\n>>> tu\n(1, (2,), '3')\n```", "```py\n>>> tu[0:]; tu[-1:]; tu[2]\n(1, (2,), '3')\n('3',)\n'3'\n```", "```py\n>>> tu.count(\"3\")\n1\n```", "```py\n>>> tu.index(\"3\")\n2\n```", "```py\n>>> li = [1, [2], \"3\"]\n>>> li\n[1, [2], '3']\n```", "```py\n>>> li[0:]\n[1, [2], '3']\n```", "```py\n>>> li[0]\n1\n```", "```py\n>>> li[-1]\n'3'\n```", "```py\n>>> li[-1:]\n['3']\n```", "```py\n>>> li[1][0]\n2\n```", "```py\n>>> li[0][0]\nTypeError: 'int' object is not subscriptable\n```", "```py\n>>> li = [[1], [2, [\"3\"]]]\n>>> li[0]; li[1]; li[1][0]\n[1]\n[2, ['3']]\n2\n```", "```py\n>>> var = [1, 2, 3]\n>>> li = [[1], [2, ['3', var]]]\n>>> li\n[[1], [2, ['3', [1, 2, 3]]]]\n```", "```py\n>>> li[0] = 1; li[1] = 2\n>>> li\n[1, 2]\n```", "```py\n>>> li + li\n[1, 2, 1, 2]\n```", "```py\n>>> li * 3\n[1, 2, 1, 2, 1, 2]\n```", "```py\n>>> li.append(3)\n>>> li\n[1, 2, 3]\n```", "```py\n>>> li.insert(0, 0)\n>>> li\n[[0, 1, 2, 3]]\n```", "```py\n>>> 0 in li\nTrue\n```", "```py\n>>> li.index(1)\n1\n```", "```py\n>>> li.pop(3)\n>>> li\n[0, 1, 2]\n```", "```py\n>>> li.remove(0)\n>>> li\n[1, 2]\n```", "```py\n>>> li = [i for i in range(0, 10)]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> li = [str(i) for i in li]\n['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']\n```", "```py\n>>> \" \".join(li); \"-\".join(li);\n'0 1 2 3 4 5 6 7 8 9'\n'0-1-2-3-4-5-6-7-8-9'\n```", "```py\n>>> di = {\"key1\": \"value1\", \"key2\": {2: 2}, 3: 3}\n>>> di\n{'key1': 'value1', 'key2': {2: 2}, 3: 3}\n```", "```py\n>>> di[\"key1\"]\n'value1'\n```", "```py\n>>> di.get(\"key1\"); di.get(\"key\")\n'value1'\n```", "```py\n>>> di.keys()\ndict_keys(['key1', 'key2', 3])\n```", "```py\n>>> di.values()\ndict_values(['value1', {2: 2}, 3])\n```", "```py\n>>> di.items()\ndict_items([('key1', 'value1'), ('key2', {2: 2}), (3, 3)])\n```", "```py\n>>> di.update(\"key3\"=di.values)\n{'key1': 'value1', 'key2': {2: 2}, 3: 3, 'key3': <built-in method values of dict object>}\n```", "```py\n>>> di.pop(\"key1\", \"key is not exist\")\n'value1'\n```", "```py\n>>> di.pop(\"key\", \"key is not exist\")\n'key is not exist'\n```", "```py\n>>> di.clear()\n>>> di\n{}\n```", "```py\n>>> set([1, 2, 2, 3])\n{1, 2, 3}\n```", "```py\n>>> se = set((1, 2, 2, 3))\n>>> se.add(4)\n{1, 2, 3, 4}\n```", "```py\n>>> def func(param=None):\n param += 1\n return param\n>>> func(param=1)\n2\n```", "```py\n>>> class C():\n def __init__(self):\n self.var1 = 2\n self.func1()\n def func1(self):\n self.var2 = self.var1 * 2\n def func2(self):\n print(self.var2)\n # print var2\n```", "```py\n>>> c = C() \n>>> c.func2()\n4\n```", "```py\n# -*- coding: utf-8 -*-\nfrom u_tools import UTools\n...\n```", "```py\n...\nclass UApp(UTools):\n\n    def __init__(self):\n        UTools.__init__(self)\n        self.uaps1 = \"I am a coder, and I do\"\n```", "```py\n    ...\n    def u_app1(self): \n        print(self.uaps1 + \" \" + self.us1)\n        # print self.uaps1 + \" \" + self.us1\n```", "```py\n    ...\n    def u_app2(self):\n        uap_list1 = []\n        i = 0\n        for ul in self.u_list()\n            if ul.isalnum():\n                if ul != \".\":\n                    uap_list1.insert(i, ul.lower())\n            elif ul == \" \":\n                uap_list1.insert(i-i, ul)\n                i = 0\n                continue\n            else:\n                break\n            i += 1\n        print(' '.join(uap_list1))\n        # print ' '.join(uap_list1)\n```", "```py\nif __name__ == \"__main__\":\n    uap = UApp()\n    uap.u_app1()\n    uap.u_app2()\n```", "```py\n# -*- coding: utf-8 -*-\n\nclass UTools():\n\n    def __init__(self):\n        self.us1 = \"Application with Python.\"\n\n    def u_list(self):\n        self.ul1 = []\n        for s in self.us1:\n            self.ul1.append(s)\n        return self.ul1\n\nif __name__ == \"__main__\":\n    ut = UTools()\n    print(ut.us1)\n    # print ut.us1\n    ut.u_list()\n```", "```py\n> cd Path/To/The/New/Created/Dir/App\n> python u_app.py\n```", "```py\n#include <iostream>\nint main() {\n    std::cout << \"C++ console program\\n\";\n}\n```", "```py\n> cd Path/To/The/Directory/App/ // Windows\n> cpp_file1.exe\n// Linux\n> g++ -o cpp_file1 cpp_file1.cpp\n> ./cpp_file1\n```", "```py\n#include <iostream>\nint main() {\n    int a = 7;\n    float b;\n    float result;\n    b = 7.14;\n    result = a + b;\n    std::cout << result;\n    std::cout << \"\\nCompleted\\n\";\n}\n```", "```py\n// Windows\n> cpp_file2.exe\n// Linux\n> ./cpp_file2\n```", "```py\n#include <iostream> \n#include <string>\nusing namespace std;\nint main() {\n    int arr[5] = { 7, 14, 77, 140, 1414 };\n    if (arr[0] == 7) {\n        cout << arr[0] << '\\n';\n    }\n    for (int s = 2; arr[s]; arr[s++]) {\n        if (arr[s] <= 1414){\n            cout << arr[s-1] << '\\n';\n        }\n        else { \n            break;\n        }\n    }\n}\n```", "```py\n// Windows\n> cpp_file3.exe\n// Linux\n> ./cpp_file3\n```", "```py\n#include <iostream>\n#include <string>\nusing namespace std;\nnamespace space1 {\n    string func() {\n        string str1 = \" C++ \";\n        return str1;\n    }\n}\nnamespace space2 {\n    string func() {\n        string str2 = \" Program \\n\";\n        return str2;\n    }\n}\nint main() {\n    string newstring;\n    string newstr1 = space1::func();\n    string newstr2 = space2::func();\n    newstring = newstr1 + newstr2;\n    cout << newstring;\n    return 0;\n}\n```", "```py\n// Windows\n> cpp_file4.exe\n// Linux\n> ./cpp_file4\n```", "```py\n#include <iostream>\nusing namespace std;\nvoid printstr() {\n    cout << \"C++ Program\\n\";\n}\nint main() {\n    printstr();\n    return 0;\n}\n```", "```py\n// Windows\n> cpp_file5.exe\n// Linux\n> ./cpp_file5\n```", "```py\n#include <iostream>\nusing namespace std;\nclass Result {\n    public:\n        static void print(int i);\n};\nvoid Result::print(int i) {\n    cout << i << '\\n';\n}\nclass Class1 {\n    protected:\n        int x, y, z;\n        public:\n            Class1(int a, int b, int c): x(a), y(b), z(c) {}\n};\nclass Class2: public Class1, public Result {\n    public:\n        Class2(int a, int b, int c): Class1(a, b, c) {}\n        int result() {\n            return x*y*z;\n        }\n};\nint main () {\n    Class2 c2(7, 7, 7);\n    c2.print(c2.result());\n    Class2::print(c2.result());\n    return 0;\n}\n```", "```py\n// Windows\n> cpp_file5.exe\n// Linux\n> ./cpp_file5\n```", "```py\nQVBoxLayout *layout = new QVBoxLayout;\nlayout->addWidget(formWidget);\nsetLayout(layout);\n```", "```py\nlayout = QtWidgets.QVBoxLayout()\nlayout.addWidget(formWidget)\nwidget.setLayout(layout)\n```"]