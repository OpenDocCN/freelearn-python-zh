["```py\n>>>import pygst\n\n```", "```py\n>>>pygst.require(\"0.10\")\n>>>import gst\n\n```", "```py\n>>> import pygst\n>>> pygst\n<module 'pygst' from 'C:\\Python26\\lib\\site-packages\\pygst.pyc'>\n>>> pygst.require('0.10')\n>>> import gst\n>>> gst\n<module 'gst' from 'C:\\Python26\\lib\\site-packages\\gst-0.10\\gst\\__init__.pyc'>\n\n```", "```py\n>>import gobject\n\n```", "```py\n$gst-launch-0.10 pipeline_description\n\n```", "```py\n$gst-inspect-0.10 decodebin\n\n```", "```py\nElement1 ! Element2 ! Element3 ! Element4 ! Element5\n\n```", "```py\n$ls -la | more\n\n```", "```py\n$ gst-launch-0.10 -v filesrc location=path/to/file.ogg ! decodebin ! audioconvert ! fakesink\n\n```", "```py\n>gst-launch-0.10.exe fakesrc num-bufferes=1 ! fakesink\n\n```", "```py\n1 bus = pipeline.get_bus()\n2 bus.add_signal_watch()\n3 bus.connect(\"message\", message_handler)\n\n```", "```py\nplaybin = gst.element_factory_make(\"playbin\")\n\n```", "```py\ngst-inspect-0.10 playbin2\n\n```", "```py\n$gstlaunch-0.10 filesrc location=/path/to/audio.mp3 ! decodebin ! audioconvert ! autoaudiosink\n\n```", "```py\n    1 import thread\n    2 import gobject\n    3 import pygst\n    4 pygst.require(\"0.10\")\n    5 import gst\n    6\n    7 class AudioPlayer:\n    8 def __init__(self):\n    9 pass\n    10 def constructPipeline(self):\n    11 pass\n    12 def connectSignals(self):\n    13 pass\n    14 def play(self):\n    15 pass\n    16 def message_handler(self):\n    17 pass\n    18\n    19 # Now run the program\n    20 player = AudioPlayer()\n    21 thread.start_new_thread(player.play, ())\n    22 gobject.threads_init()\n    23 evt_loop = gobject.MainLoop()\n    24 evt_loop.run()\n\n    ```", "```py\n    1 def __init__(self):\n    2 self.constructPipeline()\n    3 self.is_playing = False\n    4 self.connectSignals()\n\n    ```", "```py\n    \"filesrc location=C:/AudioFiles/my_music.mp3 \"\\\n    \"! decodebin ! audioconvert ! autoaudiosink\"\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 myPipelineString = \\\n    3 \"filesrc location=C:/AudioFiles/my_music.mp3 \"\\\n    4 \"! decodebin ! audioconvert ! autoaudiosink\"\n    5 self.player = gst.parse_launch(myPipelineString)\n\n    ```", "```py\n    1 def connectSignals(self):\n    2 # In this case, we only capture the messages\n    3 # put on the bus.\n    4 bus = self.player.get_bus()\n    5 bus.add_signal_watch()\n    6 bus.connect(\"message\", self.message_handler)\n\n    ```", "```py\n    1 def play(self):\n    2 self.is_playing = True\n    3 self.player.set_state(gst.STATE_PLAYING)\n    4 while self.is_playing:\n    5 time.sleep(1)\n    6 evt_loop.quit()\n\n    ```", "```py\n    1 def message_handler(self, bus, message):\n    2 # Capture the messages on the bus and\n    3 # set the appropriate flag.\n    4 msgType = message.type\n    5 if msgType == gst.MESSAGE_ERROR:\n    6 self.player.set_state(gst.STATE_NULL)\n    7 self.is_playing = False\n    8 print \"\\n Unable to play audio. Error: \", \\\n    9 message.parse_error()\n    10 elif msgType == gst.MESSAGE_EOS:\n    11 self.player.set_state(gst.STATE_NULL)\n    12 self.is_playing = False\n\n    ```", "```py\n    $python PlayingAudio.py\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 self.player = gst.Pipeline()\n    3 self.filesrc = gst.element_factory_make(\"filesrc\")\n    4 self.filesrc.set_property(\"location\",\n    5 \"C:/AudioFiles/my_music.mp3\")\n    6\n    7 self.decodebin = gst.element_factory_make(\"decodebin\",\n    8 \"decodebin\")\n    9 # Connect decodebin signal with a method.\n    10 # You can move this call to self.connectSignals)\n    11 self.decodebin.connect(\"pad_added\",\n    12 self.decodebin_pad_added)\n    13\n    14 self.audioconvert = \\\n    15 gst.element_factory_make(\"audioconvert\",\n    16 \"audioconvert\")\n    17\n    18 self.audiosink = \\\n    19 gst.element_factory_make(\"autoaudiosink\",\n    20 \"a_a_sink\")\n    21\n    22 # Construct the pipeline\n    23 self.player.add(self.filesrc, self.decodebin,\n    24 self.audioconvert, self.audiosink)\n    25 # Link elements in the pipeline.\n    26 gst.element_link_many(self.filesrc, self.decodebin)\n    27 gst.element_link_many(self.audioconvert,self.audiosink)\n\n    ```", "```py\n    1 def decodebin_pad_added(self, decodebin, pad ):\n    2 caps = pad.get_caps()\n    3 compatible_pad = \\\n    4 self.audioconvert.get_compatible_pad(pad, caps)\n    5\n    6 pad.link(compatible_pad)\n\n    ```", "```py\n1 def constructPipeline(self):\n2 file_url = \"http://path/to/audiofile.wav\"\n3 buf_size = 1024000\n4 self.player = gst.element_factory_make(\"playbin2\")\n5 self.player.set_property(\"uri\", file_url)\n6 self.player.set_property(\"buffer-size\", buf_size)\n7 self.is_playing = False\n8 self.connectSignals()\n\n```", "```py\n$gstlaunch-0.10.exe filesrc location=/path/to/input.wav ! decodebin ! audioconvert ! lame ! Filesink location=/path/to/output.mp3\n\n```", "```py\npython AudioConverter.py [options]\n\n```", "```py\n    import os, sys, time\n    import thread\n    import getopt, glob\n    import gobject\n    import pygst\n    pygst.require(\"0.10\")\n    import gst\n\n    ```", "```py\n    def audioFileExists(fil):\n    return os.path.isfile(fil)\n    class AudioConverter:\n    def __init__(self):\n    pass\n    def constructPipeline(self):\n    pass\n    def connectSignals(self):\n    pass\n    def decodebin_pad_added(self, decodebin, pad):\n    pass\n    def processArgs(self):\n    pass\n    def convert(self):\n    pass\n    def convert_single_audio(self, inPath, outPath):\n    pass\n    def message_handler(self, bus, message):\n    pass\n    def printUsage(self):\n    pass\n    def printFinalStatus(self, inputFileList,\n    starttime, endtime):\n    pass\n    # Run the converter\n    converter = AudioConverter()\n    thread.start_new_thread(converter.convert, ())\n    gobject.threads_init()\n    evt_loop = gobject.MainLoop()\n    evt_loop.run()\n\n    ```", "```py\n    def __init__(self):\n    # Initialize various attrs\n    self.inputDir = os.getcwd()\n    self.inputFormat = \"wav\"\n    self.outputDir = \"\"\n    self.outputFormat = \"\"\n    self.error_message = \"\"\n    self.encoders = {\"mp3\":\"lame\",\n    \"wav\": \"wavenc\"}\n    self.supportedOutputFormats = self.encoders.keys()\n    self.supportedInputFormats = (\"ogg\", \"mp3\", \"wav\")\n    self.pipeline = None\n    self.is_playing = False\n    self.processArgs()\n    self.constructPipeline()\n    self.connectSignals()\n\n    ```", "```py\n    def constructPipeline(self):\n    self.pipeline = gst.Pipeline(\"pipeline\")\n    self.filesrc = gst.element_factory_make(\"filesrc\")\n    self.decodebin = gst.element_factory_make(\"decodebin\")\n    self.audioconvert = gst.element_factory_make(\n    \"audioconvert\")\n    self.filesink = gst.element_factory_make(\"filesink\")\n    encoder_str = self.encoders[self.outputFormat]\n    self.encoder= gst.element_factory_make(encoder_str)\n    self.pipeline.add( self.filesrc, self.decodebin,\n    self.audioconvert, self.encoder,\n    self.filesink)\n    gst.element_link_many(self.filesrc, self.decodebin)\n    gst.element_link_many(self.audioconvert, self.encoder,\n    self.filesink)\n\n    ```", "```py\n    $gst-inspect-0.10 lame\n\n    ```", "```py\n    1 def convert(self):\n    2 pattern = \"*.\" + self.inputFormat\n    3 filetype = os.path.join(self.inputDir, pattern)\n    4 fileList = glob.glob(filetype)\n    5 inputFileList = filter(audioFileExists, fileList)\n    6\n    7 if not inputFileList:\n    8 print \"\\n No audio files with extension %s \"\\\n    9 \"located in dir %s\"%(\n    10 self.outputFormat, self.inputDir)\n    11 return\n    12 else:\n    13 # Record time before beginning audio conversion\n    14 starttime = time.clock()\n    15 print \"\\n Converting Audio files..\"\n    16\n    17 # Save the audio into specified file format.\n    18 # Do it in a for loop If the audio by that name already\n    19 # exists, do not overwrite it\n    20 for inPath in inputFileList:\n    21 dir, fil = os.path.split(inPath)\n    22 fil, ext = os.path.splitext(fil)\n    23 outPath = os.path.join(\n    24 self.outputDir,\n    25 fil + \".\" + self.outputFormat)\n    26\n    27\n    28 print \"\\n Input File: %s%s, Conversion STARTED...\"\\\n    29 % (fil, ext)\n    30 self.convert_single_audio(inPath, outPath)\n    31 if self.error_message:\n    32 print \"\\n Input File: %s%s, ERROR OCCURED\" \\\n    33 % (fil, ext)\n    34 print self.error_message\n    35 else:\n    36 print \"\\nInput File: %s%s,Conversion COMPLETE\"\\\n    37 % (fil, ext)\n    38\n    39 endtime = time.clock()\n    40\n    41 self.printFinalStatus(inputFileList, starttime,\n    42 endtime)\n    43 evt_loop.quit()\n\n    ```", "```py\n    1 def convert_single_audio(self, inPath, outPath):\n    2 inPth = repr(inPath)\n    3 outPth = repr(outPath)\n    4\n    5 # Set the location property for file source and sink\n    6 self.filesrc.set_property(\"location\", inPth[1:-1])\n    7 self.filesink.set_property(\"location\", outPth[1:-1])\n    8\n    9 self.is_playing = True\n    10 self.pipeline.set_state(gst.STATE_PLAYING)\n    11 while self.is_playing:\n    12 time.sleep(1)\n\n    ```", "```py\n    def connectSignals(self):\n    # Connect the signals.\n    # Catch the messages on the bus\n    bus = self.pipeline.get_bus()\n    bus.add_signal_watch()\n    bus.connect(\"message\", self.message_handler)\n    # Connect the decodebin \"pad_added\" signal.\n    self.decodebin.connect(\"pad_added\",\n    self.decodebin_pad_added)\n    def decodebin_pad_added(self, decodebin, pad):\n    caps = pad.get_caps()\n    compatible_pad=\\\n    self.audioconvert.get_compatible_pad(pad, caps)\n    pad.link(compatible_pad)\n\n    ```", "```py\nfilesrc location=input.mp3 ! decodebin ! audioconvert ! vorbisenc ! oggmux ! filesink location=output.ogg\n\n```", "```py\ngst.element_link_many(self.audioconvert, self.encoder,\nself.audiomuxer, self.filesink)\n\n```", "```py\n$gst-launch-0.10.exe gnlfilesource uri=file:///C:/my_music.mp3\nmedia-start=0 media-duration=15000000000 !\naudioconvert !\nlame !\nfilesink location=C:/my_chunk.mp3\n\n```", "```py\n    import os, sys, time\n    import thread\n    import gobject\n    import pygst\n    pygst.require(\"0.10\")\n    import gst\n    class AudioCutter:\n    def __init__(self):\n    pass\n    def constructPipeline(self):\n    pass\n    def gnonlin_pad_added(self, gnonlin_elem, pad):\n    pass\n    def connectSignals(self):\n    pass\n    def run(self):\n    pass\n    def printFinalStatus(self):\n    pass\n    def message_handler(self, bus, message):\n    pass\n    #Run the program\n    audioCutter = AudioCutter()\n    thread.start_new_thread(audioCutter.run, ())\n    gobject.threads_init()\n    evt_loop = gobject.MainLoop()\n    evt_loop.run()\n\n    ```", "```py\n    def __init__(self):\n    self.is_playing = False\n    # Flag used for printing purpose only.\n    self.error_msg = ''\n    self.media_start_time = 100\n    self.media_duration = 30\n    self.inFileLocation = \"C:\\AudioFiles\\my_music.mp3\"\n    self.outFileLocation = \"C:\\AudioFiles\\my_music_chunk.mp3\"\n    self.constructPipeline()\n    self.connectSignals()\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 self.pipeline = gst.Pipeline()\n    3 self.filesrc = gst.element_factory_make(\n    4 \"gnlfilesource\")\n    5\n    6 # Set properties of filesrc element\n    7 # Note: the gnlfilesource signal will be connected\n    8 # in self.connectSignals()\n    9 self.filesrc.set_property(\"uri\",\n    10 \"file:///\" + self.inFileLocation)\n    11 self.filesrc.set_property(\"media-start\",\n    12 self.media_start_time*gst.SECOND)\n    13 self.filesrc.set_property(\"media-duration\",\n    14 self.media_duration*gst.SECOND)\n    15\n    16 self.audioconvert = \\\n    17 gst.element_factory_make(\"audioconvert\")\n    18\n    19 self.encoder = \\\n    20 gst.element_factory_make(\"lame\", \"mp3_encoder\")\n    21\n    22 self.filesink = \\\n    23 gst.element_factory_make(\"filesink\")\n    24\n    25 self.filesink.set_property(\"location\",\n    26 self.outFileLocation)\n    27\n    28 #Add elements to the pipeline\n    29 self.pipeline.add(self.filesrc, self.audioconvert,\n    30 self.encoder, self.filesink)\n    31 # Link elements\n    32 gst.element_link_many(self.audioconvert,self.encoder,\n    33 self.filesink)\n\n    ```", "```py\n    def connectSignals(self):\n    # capture the messages put on the bus.\n    bus = self.pipeline.get_bus()\n    bus.add_signal_watch()\n    bus.connect(\"message\", self.message_handler)\n    # gnlsource plugin uses dynamic pads.\n    # Capture the pad_added signal.\n    self.filesrc.connect(\"pad-added\",self.gnonlin_pad_added)\n    def gnonlin_pad_added(self, gnonlin_elem, pad):\n    pad.get_caps()\n    compatible_pad = \\\n    self.audioconvert.get_compatible_pad(pad, caps)\n    pad.link(compatible_pad)\n\n    ```", "```py\n    $python AudioCutter.py\n\n    ```", "```py\ngst-launch-0.10.exe dshowaudiosrc num-buffers=1000 !\naudioconvert ! audioresample !\nvorbisenc ! oggmux !\nfilesink location=C:/my_voice.ogg\n\n```", "```py\n    def __init__(self):\n    self.is_playing = False\n    self.num_buffers = -1\n    self.error_message = \"\"\n    self.processArgs()\n    self.constructPipeline()\n    self.connectSignals()\n\n    ```", "```py\n    1 def constructPipeline(self):\n    2 # Create the pipeline instance\n    3 self.recorder = gst.Pipeline()\n    4\n    5 # Define pipeline elements\n    6 self.audiosrc = \\\n    7 gst.element_factory_make(\"dshowaudiosrc\")\n    8\n    9 self.audiosrc.set_property(\"num-buffers\",\n    10 self.num_buffers)\n    11\n    12 self.audioconvert = \\\n    13 gst.element_factory_make(\"audioconvert\")\n    14\n    15 self.audioresample = \\\n    16 gst.element_factory_make(\"audioresample\")\n    17\n    18 self.encoder = \\\n    19 gst.element_factory_make(\"lame\")\n    20\n    21 self.filesink = \\\n    22 gst.element_factory_make(\"filesink\")\n    23\n    24 self.filesink.set_property(\"location\",\n    25 self.outFileLocation)\n    26\n    27 # Add elements to the pipeline\n    28 self.recorder.add(self.audiosrc, self.audioconvert,\n    29 self.audioresample,\n    30 self.encoder, self.filesink)\n    31\n    32 # Link elements in the pipeline.\n    33 gst.element_link_many(self.audiosrc,self.audioconvert,\n    34 self.audioresample,\n    35 self.encoder,self.filesink)\n\n    ```", "```py\n    $python RecordingAudio.py -num_buffers=500\n    - out_file=C:/my_voice.mp3\n\n    ```"]