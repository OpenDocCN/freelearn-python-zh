["```py\n$ pip install flask-sqlalchemy\n```", "```py\napp.config['SQLALCHEMY_DATABASE_URI'] =\n  os.environ('DATABASE_URI')\n```", "```py\nsqlite:////tmp/test.db\n```", "```py\npostgresql://yourusername:yourpassword@localhost/yournewdb\n```", "```py\n    flask_catalog/\n        run.py\n        my_app/\n            __init__.py\n```", "```py\nfrom my_app import app\napp.run(debug=True)\n```", "```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] =\n  'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\nwith app.app_context():\n    db.create_all()\n```", "```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\ndef create_app():\n    app = Flask(__name__)\n    db.init_app(app)\n    return app\n```", "```py\n>>> from my_app import create_app\n>>> app = create_app()\n>>> app.test_request_context().push()\n>>> # Do whatever needs to be done\n>>> app.test_request_context().pop()\n```", "```py\nwith app():\n# We have flask application context now till we are inside the with block\n```", "```py\n    flask_catalog/\n        run.py\n        my_app/\n            __init__.py\n            catalog/\n                __init__.py\n                views.py\n                models.py\n```", "```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] =\n    'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\nfrom my_app.catalog.views import catalog\napp.register_blueprint(catalog)\nwith app.app_context():\n    db.create_all()\n```", "```py\nfrom my_app import db\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(255))\n    price = db.Column(db.Float)\n    def __init__(self, name, price):\n        self.name = name\n        self.price = price\n    def __repr__(self):\n        return '<Product %d>' % self.id\n```", "```py\nfrom flask import request, jsonify, Blueprint\nfrom my_app import db\nfrom my_app.catalog.models import Product\ncatalog = Blueprint('catalog', __name__)\n@catalog.route('/')\n@catalog.route('/home')\ndef home():\n    return \"Welcome to the Catalog Home.\"\n```", "```py\n@catalog.route('/product/<id>')\ndef product(id):\n    product = Product.query.get_or_404(id)\n    return 'Product - %s, $%s' % (product.name,\n      product.price)\n```", "```py\n@catalog.route('/products')\ndef products():\n    products = Product.query.all()\n    res = {}\n    for product in products:\n        res[product.id] = {\n            'name': product.name,\n            'price': str(product.price)\n        }\n    return jsonify(res)\n```", "```py\n@catalog.route('/product-create', methods=['POST',])\ndef create_product():\n    name = request.form.get('name')\n    price = request.form.get('price')\n    product = Product(name, price)\n    db.session.add(product)\n    db.session.commit()\n    return 'Product created.'\n```", "```py\n>>> import requests\n>>> requests.post('http://127.0.0.1:5000/product-create', data={'name': 'iPhone 5S', 'price': '549.0'})\n```", "```py\n{\n  \"1\": {\n    \"name\": \"iPhone 5S\",\n    \"price\": \"549.\"\n  }\n}\n```", "```py\nfrom my_app import db\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(255))\n    price = db.Column(db.Float)\n    category_id = db.Column(db.Integer,\n      db.ForeignKey('category.id'))\n    category = db.relationship(\n        'Category', backref=db.backref('products',\n          lazy='dynamic')\n    )\n    def __init__(self, name, price, category):\n        self.name = name\n        self.price = price\n        self.category = category\n    def __repr__(self):\n        return '<Product %d>' % self.id\n```", "```py\nclass Category(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(100))\n    def __init__(self, name):\n        self.name = name\n    def __repr__(self):\n        return '<Category %d>' % self.id\n```", "```py\nfrom my_app.catalog.models import Product, Category\n@catalog.route('/products')\ndef products():\n    products = Product.query.all()\n    res = {}\n    for product in products:\n        res[product.id] = {\n            'name': product.name,\n            'price': product.price,\n            'category': product.category.name\n        }\n    return jsonify(res)\n```", "```py\n@catalog.route('/product-create', methods=['POST',])\ndef create_product():\n    name = request.form.get('name')\n    price = request.form.get('price')\n    categ_name = request.form.get('category')\n    category =\n      Category.query.filter_by(name=categ_name).first()\n    if not category:\n        category = Category(categ_name)\n    product = Product(name, price, category)\n    db.session.add(product)\n    db.session.commit()\n    return 'Product created.'\n```", "```py\n@catalog.route('/category-create', methods=['POST',])\ndef create_category():\n    name = request.form.get('name')\n    category = Category(name)\n    db.session.add(category)\n    db.session.commit()\n    return 'Category created.'\n```", "```py\n@catalog.route('/categories')\ndef categories():\n    categories = Category.query.all()\n    res = {}\n    for category in categories:\n        res[category.id] = {\n            'name': category.name\n        }\n        for product in category.products:\n            res[category.id]['products'] = {\n                'id': product.id,\n                'name': product.name,\n                'price': product.price\n            }\n    return jsonify(res)\n```", "```py\n>>> import requests\n>>> requests.post('http://127.0.0.1:5000/product-create', data={'name': 'iPhone 5S', 'price': '549.0', 'category': 'Phones'})\n```", "```py\n{\n  \"1\": {\n    \"name\": \"Phones\",\n    \"products\": {\n      \"id\": 1,\n      \"name\": \"iPhone 5S\",\n      \"price\": 549.0\n    }\n  }\n}\n```", "```py\n$ pip install Flask-Migrate\n```", "```py\nfrom flask import Flask\nfrom flask_sqlalchemy import SQLAlchemy\nfrom flask_migrate import Migrate\napp = Flask(__name__)\napp.config['SQLALCHEMY_DATABASE_URI'] =\n  'sqlite:////tmp/test.db'\ndb = SQLAlchemy(app)\nmigrate = Migrate(app, db)\nfrom my_app.catalog.views import catalog\napp.register_blueprint(catalog)\nwith app.app_context():\n    db.create_all()\n```", "```py\n$ flask db init\n```", "```py\n$ flask db migrate\n```", "```py\n$ flask db upgrade\n```", "```py\nclass Product(db.Model):\n    # Same Product model as last recipe\n    # ...\n    company = db.Column(db.String(100))\n```", "```py\n$ flask db migrate\nINFO  [alembic.runtime.migration] Context impl SQLiteImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added column 'product.company'\nGenerating\n<path/to/application>/flask_catalog/migrations/versions/2c08f71f9253_.py\n... done\n```", "```py\n$ flask db upgrade\nINFO  [alembic.runtime.migration] Context impl SQLiteImpl.\nINFO  [alembic.runtime.migration] Will assume non-transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade None -> 2c08f71f9253, empty message\n```", "```py\n$ pip install redis\n```", "```py\nfrom redis import Redis\nredis = Redis()\n```", "```py\n@catalog.route('/product/<id>')\ndef product(id):\n    product = Product.query.get_or_404(id)\n    product_key = 'product-%s' % product.id\n    redis.set(product_key, product.name)\n    redis.expire(product_key, 600)\n    return 'Product - %s, $%s' % (product.name,\n      product.price)\n```", "```py\n@catalog.route('/recent-products')\ndef recent_products():\n    keys_alive = redis.keys('product-*')\n    products = [redis.get(k).decode('utf-8') for k in\n      keys_alive]\n    return jsonify({'products': products})\n```", "```py\n>>> requests.post('http://127.0.0.1:5000/product-create', data={'name': 'iPhone 5S', 'price': '549.0', 'category': 'Phones'})\n>>> requests.post('http://127.0.0.1:5000/product-create', data={'name': 'iPhone 13', 'price': '799.0', 'category': 'Phones'})\n>>> requests.post('http://127.0.0.1:5000/product-create', data={'name': 'iPad Pro', 'price': '999.0', 'category': 'Tablets'})\n>>> requests.post('http://127.0.0.1:5000/product-create', data={'name': 'iPhone 5S', 'price': '549.0', 'category': 'Phones'})\n```", "```py\n{\n  \"products\": [\n    \"iPad Pro\",\n    \"iPhone 5S\"\n  ]\n}\n```", "```py\n$ pip install flask-mongoengine\n```", "```py\n>>> mongosh\nCurrent Mongosh Log ID:  62fa8dtfd435df654150997b\nConnecting to:  mongodb://127.0.0.1:27017/?directConnection\n=true&serverSelectionTimeoutMS=2000&appName=mongosh+1.5.4\nUsing MongoDB:    6.0.0\nUsing Mongosh:    1.5.4\ntest> use my_catalog\nswitched to db my_catalog\n```", "```py\nfrom flask import Flask\nfrom flask_mongoengine import MongoEngine\napp = Flask(__name__)\napp.config['MONGODB_SETTINGS'] = {'DB': 'my_catalog'}\napp.debug = True\ndb = MongoEngine(app)\nfrom my_app.catalog.views import catalog\napp.register_blueprint(catalog)\n```", "```py\nimport datetime\nfrom my_app import db\nclass Product(db.Document):\n    created_at = db.DateTimeField(\n        default=datetime.datetime.now, required=True\n    )\n    key = db.StringField(max_length=255, required=True)\n    name = db.StringField(max_length=255, required=True)\n    price = db.DecimalField()\n    def __repr__(self):\n        return '<Product %r>' % self.id\n```", "```py\nfrom decimal import Decimal\nfrom flask import request, Blueprint, jsonify\nfrom my_app.catalog.models import Product\ncatalog = Blueprint('catalog', __name__)\n@catalog.route('/')\n@catalog.route('/home')\ndef home():\n    return \"Welcome to the Catalog Home.\"\n@catalog.route('/product/<key>')\ndef product(key):\n    product = Product.objects.get_or_404(key=key)\n    return 'Product - %s, $%s' % (product.name,\n      product.price)\n@catalog.route('/products')\ndef products():\n    products = Product.objects.all()\n    res = {}\n    for product in products:\n        res[product.key] = {\n            'name': product.name,\n            'price': str(product.price),\n        }\n    return jsonify(res)\n@catalog.route('/product-create', methods=['POST',])\ndef create_product():\n    name = request.form.get('name')\n    key = request.form.get('key')\n    price = request.form.get('price')\n    product = Product(\n        name=name,\n        key=key,\n        price=Decimal(price)\n    )\n    product.save()\n    return 'Product created.'\n```", "```py\n>>> res = requests.post('http://127.0.0.1:5000/product-create', data={'key': 'iphone-5s', 'name': 'iPhone 5S', 'price': '549.0'})\n```", "```py\n{\n  \"iphone-5s\": {\n    \"name\": \"iPhone 5S\",\n    \"price\": \"549.00\"\n  }\n}\n```"]