["```py\npip install <your full path> PyOpenGL-3.1.1a1-cp34-none-win_amd64.whl\n```", "```py\n# Ch10_import_OpenGL.py\nimport wx                  \nfrom wx import glcanvas\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\n```", "```py\nimport wx\nfrom wx import glcanvas\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\n\nclass MyCanvasBase(glcanvas.GLCanvas):\n    def __init__(self, parent):\n        glcanvas.GLCanvas.__init__(self, parent, -1)\n\n# This context was missing from the code\n        self.context = glcanvas.GLContext(self)  # <- added\n\n    def OnPaint(self, event):\n        dc = wx.PaintDC(self)\n# We have to pass in a context ------\n#         self.SetCurrent()                      # commented out\n        self.SetCurrent(self.context)            # <- changed\n```", "```py\n    def OnPaint(self, event):\n\n        dc = wx.PaintDC(self)\n        self.SetCurrent()\n        if not self.init:\n            self.InitGL()\n            self.init = True\n        self.OnDraw()\n```", "```py\n# Ch10_wxPython_OpenGL_GUI\nimport wx                  \nfrom wx import glcanvas\nfrom OpenGL.GL import *\nfrom OpenGL.GLUT import *\n\n#---------------------------------------------------\nclass CanvasBase(glcanvas.GLCanvas):\n    def __init__(self, parent):\n        glcanvas.GLCanvas.__init__(self, parent, -1)\n        self.context = glcanvas.GLContext(self)\n        self.init = False\n\n        # Cube 3D start rotation\n        self.last_X = self.x = 30\n        self.last_Y = self.y = 30\n\n        self.Bind(wx.EVT_SIZE, self.sizeCallback)\n        self.Bind(wx.EVT_PAINT, self.paintCallback)\n        self.Bind(wx.EVT_LEFT_DOWN, self.mouseDownCallback)\n        self.Bind(wx.EVT_LEFT_UP, self.mouseUpCallback)\n        self.Bind(wx.EVT_MOTION, self.mouseMotionCallback)\n\n    def sizeCallback(self, event):\n        wx.CallAfter(self.setViewport)\n        event.Skip()\n\n    def setViewport(self):\n        self.size = self.GetClientSize()\n        self.SetCurrent(self.context)\n        glViewport(0, 0, self.size.width, self.size.height)\n\n    def paintCallback(self, event):\n        wx.PaintDC(self)\n        self.SetCurrent(self.context)\n        if not self.init:\n            self.initGL()\n            self.init = True\n        self.onDraw()\n\n    def mouseDownCallback(self, event):\n        self.CaptureMouse()\n        self.x, self.y = self.last_X, self.last_Y = event.GetPosition()\n\n    def mouseUpCallback(self, evt):\n        self.ReleaseMouse()\n\n    def mouseMotionCallback(self, evt):\n        if evt.Dragging() and evt.LeftIsDown():\n            self.last_X, self.last_Y = self.x, self.y\n            self.x, self.y = evt.GetPosition()\n            self.Refresh(False)\n\n#-----------------------------------------------------\nclass CubeCanvas(CanvasBase):\n    def initGL(self):\n        # set viewing projection\n        glMatrixMode(GL_PROJECTION)\n        glFrustum(-0.5, 0.5, -0.5, 0.5, 1.0, 3.0)\n\n        # position viewer\n        glMatrixMode(GL_MODELVIEW)\n        glTranslatef(0.0, 0.0, -2.0)\n\n        # position object\n        glRotatef(self.y, 1.0, 0.0, 0.0)\n        glRotatef(self.x, 0.0, 1.0, 0.0)\n\n        glEnable(GL_DEPTH_TEST)\n        glEnable(GL_LIGHTING)\n        glEnable(GL_LIGHT0)\n\n    def onDraw(self):\n        # clear color and depth buffers\n        glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)\n\n        # draw six faces of a cube\n        glBegin(GL_QUADS)\n        glNormal3f( 0.0, 0.0, 1.0)\n        glVertex3f( 0.5, 0.5, 0.5)\n        glVertex3f(-0.5, 0.5, 0.5)\n        glVertex3f(-0.5,-0.5, 0.5)\n        glVertex3f( 0.5,-0.5, 0.5)\n\n        glNormal3f( 0.0, 0.0,-1.0)\n        glVertex3f(-0.5,-0.5,-0.5)\n\n#===========================================================\napp = wx.App()\nframe = wx.Frame(None, title=\"Python GUI using wxPython\", size=(300,230))\nGUI(frame)\nframe.Show()        \napp.MainLoop()      \n```", "```py\n#----------------------------------------------------------\nclass GUI(wx.Panel):              # Subclass wxPython Panel\n    def __init__(self, parent):\n        wx.Panel.__init__(self, parent)\n\n        imageFile = 'Tile.bmp'\n        self.bmp = wx.Bitmap(imageFile)\n        # react to a resize event and redraw image\n        parent.Bind(wx.EVT_SIZE, self.canvasCallback)\n\n    def canvasCallback(self, event=None):\n        # create the device context\n        dc = wx.ClientDC(self)\n        brushBMP = wx.Brush(self.bmp)\n        dc.SetBrush(brushBMP)\n        width, height = self.GetClientSize()\n        dc.DrawRectangle(0, 0, width, height)\n```", "```py\nimport pyglet\n\nwindow = pyglet.window.Window()\nlabel = pyglet.text.Label('PyGLet GUI', \n                          font_size=42,\n                          x=window.width//2, y=window.height//2,\n                          anchor_x='center', anchor_y='center')\n\n@window.event\ndef on_draw():\n    window.clear()\n    label.draw()\n\npyglet.app.run()\n```", "```py\nimport pyglet\nfrom pyglet.gl import *\nfrom pyglet.window import key\nfrom OpenGL.GLUT import *\n\nWINDOW    = 400\nINCREMENT = 5\n\nclass Window(pyglet.window.Window):\n\n    # Cube 3D start rotation\n    xRotation = yRotation = 30    \n\n    def __init__(self, width, height, title=''):\n        super(Window, self).__init__(width, height, title)\n        glClearColor(0, 0, 0, 1)\n        glEnable(GL_DEPTH_TEST)    \n\n    def on_draw(self):\n        # Clear the current GL Window\n        self.clear()\n\n        # Push Matrix onto stack\n        glPushMatrix()\n\n        glRotatef(self.xRotation, 1, 0, 0)\n        glRotatef(self.yRotation, 0, 1, 0)\n\n        # Draw the six sides of the cube\n        glBegin(GL_QUADS)\n\n        # White\n        glColor3ub(255, 255, 255)\n        glVertex3f(50,50,50)\n\n        # Yellow\n        glColor3ub(255, 255, 0)\n        glVertex3f(50,-50,50)\n\n        # Red\n        glColor3ub(255, 0, 0)\n        glVertex3f(-50,-50,50)\n        glVertex3f(-50,50,50)\n\n        # Blue\n        glColor3f(0, 0, 1)\n        glVertex3f(-50,50,-50)\n\n        # <â€¦ more color defines for cube faces>\n\n        glEnd()\n\n        # Pop Matrix off stack\n        glPopMatrix()\n\n    def on_resize(self, width, height):\n        # set the Viewport\n        glViewport(0, 0, width, height)\n\n        # using Projection mode\n        glMatrixMode(GL_PROJECTION)\n        glLoadIdentity()\n\n        aspectRatio = width / height\n        gluPerspective(35, aspectRatio, 1, 1000)\n\n        glMatrixMode(GL_MODELVIEW)\n        glLoadIdentity()\n        glTranslatef(0, 0, -400)\n\n    def on_text_motion(self, motion): \n        if motion == key.UP:\n            self.xRotation -= INCREMENT\n        elif motion == key.DOWN:\n            self.xRotation += INCREMENT\n        elif motion == key.LEFT:\n            self.yRotation -= INCREMENT\n        elif motion == key.RIGHT:\n            self.yRotation += INCREMENT\n\nif __name__ == '__main__':\n    Window(WINDOW, WINDOW, 'Pyglet Colored Cube')\n    pyglet.app.run()\n```", "```py\nfrom tkinter import Tk, PhotoImage, Label\nfrom itertools import cycle\nfrom os import listdir\n\nclass SlideShow(Tk):\n    # inherit GUI framework extending tkinter\n    def __init__(self, msShowTimeBetweenSlides=1500):\n        # initialize tkinter super class\n        Tk.__init__(self)\n\n        # time each slide will be shown\n        self.showTime = msShowTimeBetweenSlides\n\n        # look for images in current working directory \n        listOfSlides = [slide for slide in listdir() if slide.endswith('gif')]\n\n        # cycle slides to show on the tkinter Label \n        self.iterableCycle = cycle((PhotoImage(file=slide), slide) for slide in listOfSlides)\n\n        # create tkinter Label widget which can display images\n        self.slidesLabel = Label(self)\n\n        # create the Frame widget\n        self.slidesLabel.pack()\n\n    def slidesCallback(self):\n        # get next slide from iterable cycle\n        currentInstance, nameOfSlide = next(self.iterableCycle)\n\n        # assign next slide to Label widget\n        self.slidesLabel.config(image=currentInstance)\n\n        # update Window title with current slide\n        self.title(nameOfSlide)\n\n        # recursively repeat the Show\n        self.after(self.showTime, self.slidesCallback)\n\n#=================================\n# Start GUI\n#=================================\nwin = SlideShow()\nwin.after(0, win.slidesCallback())\nwin.mainloop()\n```"]