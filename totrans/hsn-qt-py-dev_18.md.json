["```py\n...\nfrom PyQt5.QtCore import pyqtSignal as app_signal\n...\n```", "```py\n...\nfrom PySide2.QtCore import Signal as app_signal\n...\n```", "```py\napp_signal(types, name, revision, arguments)\n```", "```py\n...\nclass UTools(object):\n\n    sig1 = app_signal(int)\n\n    def __init__(self):\n        ...\n    ...\n...\n```", "```py\n...\nfrom PyQt5.QtCore import pyqtSlot as app_slot\n...\n```", "```py\n...\nfrom PySide2.QtCore import Slot as app_slot\n...\n```", "```py\n...\n    ...\n    @app_slot(int, name='slot_func')\n    def slot_func(self, num):\n        # Some processing...\n    ...\n...\n```", "```py\n...\nclass UApp(UWindow, UTools):\n\n    def __init__(self, parent=None):\n        ...\n        self.combox1.activated.connect(self.txt_table)\n        self.mb1.triggered.connect(self.files)\n        self.mb3.triggered.connect(self.data)\n        self.mb4.triggered.connect(self.options)\n        ...\n        self.push_but1.clicked.connect()\n        self.push_but2.clicked.connect(lambda:\n                        self.text_edit.setText(\"HELLO\"),\n                        QtCore.Qt.QueuedConnection)\n\n...\n```", "```py\nobject.signal.connect(SLOT, type=QtCore.Qt.ConnectionType)\n```", "```py\nQtCore.QObject.connect(object, SIGNAL, SLOT, type=QtCore.Qt.ConnectionType)\n```", "```py\nQtCore.QObject.connect(object1, SIGNAL, object2, SLOT, type=QtCore.Qt.ConnectionType)\n```", "```py\n...\nfrom PyQt5.QtCore import QThread\nimport time\n...\n```", "```py\n...\nfrom PySide2.QtCore import QThread\nimport time\n...\n```", "```py\n...\nclass WPandas(QThread):\n\n    sig1 = app_signal(object, str)\n\n    def __init__(self, parent=None):\n        super(WPandas, self).__init__(parent) \n\n    def on_source(self, datas):\n        self.datas = datas\n\n    def run(self):\n        try:\n            import pandas\n            uindex = [i for i in range(self.datas[2])]\n            udata = {\"User_Name\": range(0, self.datas[2]),\n                     \"User_email\": range(0, self.datas[2]),\n                     \"User_password\": range(0, self.datas[2]),\n                     \"User_data\": range(0, self.datas[2])}\n            df = pandas.DataFrame(udata, columns=self.datas[3],\n                             index=uindex, dtype=self.datas[5])\n            df.index.name = \"rows\\columns\"\n            if self.datas[1] == \"csv\":\n                df.to_csv(self.datas[0])\n            if self.datas[1] == \"excel\":\n                df.to_excel(self.datas[0])\n            if self.datas[1] == \"html\":\n                df.to_html(self.datas[0])\n            if self.datas[1] == \"json\":\n                df.to_json(self.datas[0])\n            if self.isFinished():\n                self.quit()\n        except Exception as err:\n            self.sig1.emit('', str(err))\n            if self.isFinished():\n                self.quit()\n...\n```", "```py\n...\nclass RPandas(QThread):\n\n    sig1 = app_signal(object, str)\n\n    def __init__(self, parent=None):\n        super(RPandas, self).__init__(parent)\n\n    def on_source(self, datas):\n        self.datas = datas\n\n    def run(self):\n        try:\n            import pandas\n            if self.datas[1] == \"csv\":\n                df = pandas.read_csv(self.datas[0],\n                                     chunksize=self.datas[6],\n                                     engine=self.datas[4]) \n            if self.datas[1] == \"excel\":\n                df = pandas.read_excel(self.datas[0]) \n            if self.datas[1] == \"html\":\n                df = pandas.read_html(self.datas[0])\n            if self.datas[1]== \"json\":\n                df = pandas.read_json(self.datas[0]) \n            pandas.options.display.max_rows = self.datas[5]\n            for ch in df:\n                self.sig1.emit(ch, '')\n                time.sleep(0.1)\n            if self.isFinished():\n                self.quit()\n        except Exception as err:\n            self.sig1.emit('', str(err)) \n            if self.isFinished():\n                self.quit()\n...\n```", "```py\n...\nclass UTools(object):\n\n    ...\n    pandas_sig1 = app_signal(list)\n    pandas_sig2 = app_signal(list)\n\n    def __init__(self):\n    ...\n...\n```", "```py\n...\n    ...\n    def pandas_write(self, filename=None, writer=\"csv\",\n                               data=None, columns=None,\n                               index=None, dtype=object):\n        data = 1000000\n        index = 1000000\n        datas = [filename, writer, data, columns, index, dtype]\n        self.pandas_thread1 = WPandas()\n        self.pandas_sig1.connect(self.pandas_thread1.on_source)\n        self.pandas_sig1.emit(datas)\n        self.pandas_thread1.start()\n    ...\n...\n```", "```py\n...\n    ...\n    def pandas_read(self, filename=None, reader=\"csv\", sep=',',\n                               delimiter=None, engine='python',\n                                        maxrows=9, chunk=10000):\n        datas = [filename, reader, sep, delimiter,\n                 engine, maxrows, chunk]\n        self.pandas_thread2 = RPandas()\n        self.pandas_sig2.connect(self.pandas_thread2.on_source)\n        self.pandas_sig2.emit(datas)\n        self.pandas_thread2.start()\n        return self.pandas_thread2\n    ...\n...\n```", "```py\n...\n    ...\n    def data(self, action):\n        ...\n        if self.actx == \"Pandas\":\n            try:\n                pread = self.pandas_read(\n                            filename=\"data/bigtests.csv\",\n                                   reader=\"csv\", sep=',')\n                def to_field(df, er):\n                    if er == '':\n                        self.text_edit.append(\n                                          \"\\n\" + str(df))\n                    else:\n                        self.stat_bar.showMessage(\n                                    self.actx + ' ' + er)\n                pread.sig1.connect(\n                    to_field, QtCore.Qt.QueuedConnection)\n                self.stat_bar.showMessage(\n                                   self.actx + \" opened\")\n            except Exception as err:\n                self.stat_bar.showMessage(\n                              self.actx + ' ' + str(err))\n        ...\n    ...\n...\n```", "```py\n...\n    ...\n    def user_data4(self, uname, umail, upass, udata):\n        try:\n            ucolumns = [\"User_Name\", \"User_email\",\n                        \"User_password\", \"User_data\"]\n            self.pandas_write(filename=\"data/bigtests.csv\",\n                            writer=\"csv\", columns=ucolumns)\n        except Exception as err:\n            self.error = err\n    ...\n...\n```", "```py\nobject.signal.disconnect(SLOT)\n```", "```py\nsignal_blocker = QtCore.QSignalBlocker()\n```", "```py\nsignal_mapper = QtCore.QSignalMapper()\n```", "```py\nsignal_transit = QtCore.QSignalTransition(QtCore.QState)\n```", "```py\nQEnterEvent \n```", "```py\nevent = QtCore.QEvent(QtCore.QEvent.Type)\n```", "```py\ndef event(self, event):\n    return True\n```", "```py\nevent_loop = QtCore.QEventLoop()\n```", "```py\nchild_event = QtCore.QChildEvent(QtCore.QEvent.Type, object)\n```", "```py\ndef childEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\ntimer_event = QtCore.QTimerEvent(int)\n```", "```py\ndef timerEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\naction_event = QtGui.QActionEvent(QtCore.QEvent.Type,\n                           QtWidgets.QAction, QtWidgets.QAction)\n```", "```py\ndef actionEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\ndrop_event = QtGui.QDropEvent(QtCore.QPointF, QtCore.Qt.DropActions,\n                           QtCore.QMimeData, QtCore.Qt.MouseButtons,\n                    QtCore.Qt.KeyboardModifiers, QtCore.QEvent.Drop)\n```", "```py\ndef dropEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\ndef dragEnterEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n\ndef dragMoveEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n\ndef dragLeaveEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\nenter_event = QtGui.QEnterEvent(QtCore.QPointF,\n                        QtCore.QPointF,QtCore.QPointF)\n```", "```py\ndef enterEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\ndef leaveEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\nfocus_event = QtGui.QFocusEvent(QtCore.QEvent.Type,\n                                QtCore.Qt.FocusReason)\n```", "```py\ndef focusInEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n\ndef focusOutEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\nkey_event = QtGui.QKeyEvent(QtCore.QEvent.Type, int,\n                            QtCore.Qt.KeyboardModifiers)\n```", "```py\ndef keyPressEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n\ndef keyReleaseEvent((self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\nmouse_event = QtGui.QMouseEvent(QtCore.QEvent.Type,\n                           QtCore.QPointF, QtCore.QPointF,\n                           QtCore.QPointF, QtCore.Qt.MouseButton, \n                           QtCore.Qt.MouseButtons,\n                           QtCore.Qt.KeyboardModifiers)\n```", "```py\ndef mousePressEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n\ndef mouseReleaseEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n\ndef mouseMoveEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n\ndef mouseDoubleClickEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\nwheel_event = QtGui.QWheelEvent(QtCore.QPointF, QtCore.QPointF,\n                                QtCore.QPoint, QtCore.QPoint,\n                                int, QtCore.Qt.Orientation,\n                                QtCore.Qt.MouseButtons,\n                                QtCore.Qt.KeyboardModifiers,\n                                QtCore.Qt.ScrollPhase,\n                                QtCore.Qt.MouseEventSource, bool)\n```", "```py\ndef wheelEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\nmove_event = QtGui.QMoveEvent(QtCore.QPoint, QtCore.QPoint)\n```", "```py\ndef moveEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\npaint_event = QtGui.QPaintEvent(QtCore.QRect)\n# or\npaint_event = QtGui.QPaintEvent(QtGui.QRegion)\n```", "```py\ndef paintEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\nresize_event = QtGui.QResizeEvent(QtCore.QSize, QtCore.QSize)\n```", "```py\ndef resizeEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\ntablet_event = QtGui.QTabletEvent(QtCore.QEvent.Type,\n                                  QtCore.QPointF,\n                                  QtCore.QPointF, int,\n                                  int, float, int, int,\n                                  float, float, int,\n                                  QtCore.Qt.KeyboardModifiers,\n                                  int, QtCore.Qt.MouseButton,\n                                  QtCore.Qt.MouseButtons)\n```", "```py\ndef tabletEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\ntouch_event = QtGui.QTouchEvent(QtCore.QEvent.Type,\n                              QtGui.QTouchDevice,\n                              QtCore.Qt.KeyboardModifiers,\n                              QtCore.Qt.TouchPointStates,\n                              [QtGui.QTouchEvent.TouchPoint])\n```", "```py\ndef touchEvent(self, event):\n    \"\"\"Some code lines for processing...\"\"\"\n```", "```py\n...\nclass UWid(QtWidgets.QWidget):\n\n    def __init__(self, parent=None, bg=color[1],\n                 bgh=color[3], minw=0, minh=0,\n                 maxw=None, maxh=None, fixw=None,\n                 fixh=None, mrg=0, pad=0, bds=\"solid\",\n                 bdr=3, bdw=0, bdc=color[3]):\n        ...\n...\n```", "```py\n...\n    def __init__(...):\n        ...\n        self.setMinimumWidth(minw)\n        self.setMinimumHeight(minh)\n        if maxw is not None:\n            self.setMaximumWidth(maxw)\n        if maxh is not None:\n            self.setMaximumHeight(maxh)\n        if fixw is not None:\n            self.setFixedWidth(fixw)\n        if fixh is not None:\n            self.setFixedHeight(fixh)\n        self.bg, self.bgh, self.mrg, self.pad = bg, bgh, mrg, pad\n        self.bds, self.bdr, self.bdw, self.bdc = bds, bdr, bdw, bdc\n        self.setStyleSheet(self.wid_style(self.mrg, self.pad,\n                                          self.bg, self.bds,\n                                          self.bdr, self.bdw,\n                                          self.bgh))\n...\n```", "```py\n...\n    def __init__(...):\n        ...\n    def wid_style(self, mrg=None, pad=None, bg=None, bds=None,\n                                 bdr=None, bdw=None, bdc=None):\n        style = \"\"\"margin: %spx; padding: %spx;\n                background-color: %s; border-style: %s;\n                border-radius: %spx; border-width: %spx;\n                border-color: %s;\"\"\" % (mrg, pad, bg, bds, bdr,\n                                                      bdw, bdc)\n        return style \n...\n```", "```py\n...\n    ...\n    def enterEvent(self, event):\n        self.setStyleSheet(self.wid_style(self.mrg, self.pad,\n                           self.bgh, self.bds, self.bdr,\n                           self.bdw, self.bdc))\n...\n```", "```py\n...\n    ...\n    def leaveEvent(self, event):\n        self.setStyleSheet(self.wid_style(self.mrg, self.pad,\n                           self.bg, self.bds, self.bdr,\n                           self.bdw, self.bdc))\n...\n```"]