["```py\nclass ISearchable(interface.Interface):\ntitle = interface.Attribute('title')\nkind = interface.Attribute('kind')\ndescription = interface.Attribute('description')\ncreator = interface.Attribute('creator')\ncreation_date = interface.Attribute('creation date')\nmodification_date = interface.Attribute('modification date')\nchecked = interface.Attribute('checked')\ncontent_type = interface.Attribute('content type')\nproject_name = interface.Attribute('project name')\ndef searchableText():\n\"\"\"return concatenated string with all text fields to search\"\"\"\n\n```", "```py\nclass Project(grok.Container):\ngrok.implements(IProject, IMetadata, ISearchable)\n\n```", "```py\nclass ITodoList(interface.Interface):\ntitle = schema.TextLine(title=u'Title', required=True, constraint=check_title)\ndescription = schema.Text(title=u'Description', required=False)\nnext_id = schema.Int(title=u'Next id' ,default=0)\n\n```", "```py\nimport datetime\nclass IDayCalculations(Interface):\ndef daysOld():\n\"number of days since the content was created\"\ndef daysFromLastModification():\n\"number of days since the last modification\"\nclass DaysOld(grok.Adapter):\ngrok.implements(IDayCalculations)\ngrok.adapts(ISearchable)\ndef daysOld(self):\nreturn (datetime.datetime.now() - self.context.creation_date).days\ndef daysFromLastModification(self):\nreturn (datetime.datetime.now() - self.context.modification_date).days\n\n```", "```py\nclass ProjectView(grok.View):\ngrok.context(Project)\ndef update(self):\nself.days_old = IDayCalculations(self.context).daysOld()\nself.days_modified = IDayCalculations( self.context).daysFromLastModification()\n\n```", "```py\ndef addUser(self, username, password, real_name, role):\nsession = Session()\nresult = session.query(Account).filter_by(name = username).first()\nif result is None:\nuser = Account(username, password, real_name, role)\nsession.add(user)\nrole_manager = IPrincipalRoleManager(grok.getSite())\nif role==u'Project Manager':\nrole_manager.assignRoleToPrincipal('todo.ProjectManager', username)\nelif role==u'Application Manager':\nrole_manager.assignRoleToPrincipal('todo.AppManager', username)\nelse:\nrole_manager.assignRoleToPrincipal('todo.ProjectMember', username )\ntransaction.commit()\n\n```", "```py\nrole_manager = IPrincipalRoleManager(grok.getSite())\n\n```", "```py\nclass TodoListUpdateItems(grok.View):\ngrok.context(TodoList)\ngrok.name('updateitems')\ngrok.require('todo.changeitems')\n\n```", "```py\nclass AddProjectViewlet(grok.Viewlet):\ngrok.viewletmanager(Main)\ngrok.context(Todo)\ngrok.view(AddProject)\ndef update(self):\nself.form = getMultiAdapter((self.context, self.request), name='add')\nself.form.update_form()\ndef render(self):\n\n```", "```py\nclass MySessionCredentialsPlugin(grok.GlobalUtility, SessionCredentialsPlugin):\ngrok.provides(ICredentialsPlugin)\ngrok.name('credentials')\nloginpagename = 'login'\nloginfield = 'login'\npasswordfield = 'password'\n\n```", "```py\nfrom zope.component import getUtility\ncredentials_plugin = getUtility(ICredentialsPlugin, 'credentials')\n\n```", "```py\nclass UserAuthenticatorPlugin(grok.LocalUtility):\ngrok.implements(IAuthenticatorPlugin)\ngrok.name('users')\n\n```", "```py\nclass Todo(grok.Application, grok.Container):\ngrok.implements(ITodo)\ngrok.local_utility(\nUserAuthenticatorPlugin, provides=IAuthenticatorPlugin,\nname='users',\n)\ngrok.local_utility(\nPluggableAuthentication, provides=IAuthentication,\nsetup=setup_authentication,\n)\n\n```", "```py\nusers = component.getUtility(IAuthenticatorPlugin, 'users')\nauth = component.getUtility(IAuthentication)\n\n```", "```py\n@grok.subscribe(Project, grok.IObjectAddedEvent)\ndef handler(obj, event):\n\"New project added: %s.\" % obj.title\n\n```", "```py\nmaster_template = grok.PageTemplateFile('app_templates/master.pt')\nform_template = grok.PageTemplateFile('custom_edit_form.pt')\n\n```", "```py\nclass ExtraNav(grok.ViewletManager):\ngrok.context(Interface)\ngrok.name('extranav')\n\n```", "```py\n<div id=\"navigation\">\n<a tal:attributes=\"href python:view.application_url('index')\"> Go back to main page</a>\n<tal:extranav content=\"structure provider:extranav\" />\n</div>\n\n```", "```py\n$ ../bin/paster create -t basic_package todo_plus\n\n```", "```py\n<configure   >\n<include package=\"grok\" />\n<includeDependencies package=\".\" />\n<grok:grok package=\".\" />\n</configure>\n\n```", "```py\n$ mkdir todo_plus/todo_plus/app_templates\n$ mkdir todo_plus/todo_plus/static \n\n```", "```py\ninstall_requires=[\n'todo',\n]\n\n```", "```py\n[buildout]\ndevelop = .\nsrc/todo_plus\nparts = eggbasket app i18n test data log\nnewest = false\nextends = versions.cfg\n# eggs will be installed in the default buildout location\n# (see .buildout/default.cfg in your home directory)\n# unless you specify an eggs-directory option here.\nfind-links = http://download.zope.org/distribution/\nversions = versions\n[app]\nrecipe = zc.recipe.egg\neggs = todo\ntodo_plus\nz3c.evalexception>=2.0\nPaste\nPasteScript\nPasteDeploy\ninterpreter = python-console\nsite.zcml = <include package=\"todo_plus\" />\n\n```", "```py\n$ bin/buildout\n\n```", "```py\nimport grok\nfrom zope.interface import Interface\nfrom zope.publisher.interfaces.browser import IBrowserSkinType, IDefaultBrowserLayer\nfrom todo.app import ITodo, IProject, Todo, HeadSlot, ExtraNav, Main, master_template, form_template\nclass PlusLayer(IDefaultBrowserLayer):\ngrok.skin('plus')\nclass HeadPlus(grok.Viewlet):\ngrok.viewletmanager(HeadSlot)\ngrok.context(Interface)\ngrok.name('head')\ngrok.template('head_plus')\ngrok.layer(PlusLayer)\n\n```", "```py\n<meta tal:attributes=\"http-equiv string:Content-Type; content string:text/html;; charset=utf-8\" />\n<title tal:content=\"context/title\">To-Do list manager</title>\n<link rel=\"stylesheet\" type=\"text/css\" tal:attributes=\"href static/styles_plus.css\" />\n\n```", "```py\ninstall_requires=[\n'todo',\n'zc.sourcefactory',\n]\n\n```", "```py\nfrom zope import schema\nfrom zope.component import getAllUtilitiesRegisteredFor, getMultiAdapter, getUtility\nfrom zc.sourcefactory.basic import BasicSourceFactory\nclass SkinNameSource(BasicSourceFactory):\ndef getValues(self):\nvalues = ['Basic']\nskin_tag = 'grokcore.view.directive.skin'\nskin_names = [s.getTaggedValue(skin_tag)\nfor s in getAllUtilitiesRegisteredFor(IBrowserSkinType) if skin_tag in s.getTaggedValueTags()]\nvalues.extend(skin_names)\nreturn values\nclass ISkinChooser(Interface):\nskin_name = schema.Choice(source=SkinNameSource(), title=u'Skin Name', description=u'Name of the new default skin')\n\n```", "```py\nfrom zope.app.session.interfaces import Isession\nclass SkinChooserForm(grok.Form):\ngrok.context(ITodo)\ngrok.name('skin_chooser_form')\nform_fields = grok.AutoFields(ISkinChooser)\nlabel = \"Set the default skin for the To-Do list manager\"\ntemplate = form_template\ndef setUpWidgets(self, ignore_request=False):\nsuper(SkinChooserForm,self).setUpWidgets(ignore_request)\nsession = ISession(self.request)['todo_plus']\nself.widgets['skin_name'].setRenderedValue(session.get( 'skin_name''Basic'))\n@grok.action('Choose skin')\ndef choose(self, **data):\nsession = ISession(self.request)['todo_plus']\nsession['skin_name'] = data['skin_name']\nreturn self.redirect(self.url('skin_chooser'))\nclass SkinChooser(grok.View):\ngrok.context(ITodo)\ngrok.name('skin_chooser')\ngrok.require('todo.changeitems')\ndef render(self):\nreturn master_template.render(self)\nclass SkinChooserViewlet(grok.Viewlet):\ngrok.viewletmanager(Main)\ngrok.context(ITodo)\ngrok.view(SkinChooser)\ndef update(self):\nself.form = getMultiAdapter((self.context, self.request), name='skin_chooser_form')\nself.form.update_form()\ndef render(self):\nreturn self.form.render()\n\n```", "```py\nfrom zope.app.publication.interfaces import IbeforeTraverseEvent\nfrom zope.publisher.browser import applySkin\n@grok.subscribe(ITodo, IBeforeTraverseEvent)\ndef choose_skin(obj, event):\nsession = ISession(event.request)['todo_plus']\nskin_name = session.get('skin_name','Basic')\nskin = getUtility(IBrowserSkinType,skin_name)\napplySkin(event.request, skin)\n\n```", "```py\nclass ISetNotifications(Interface):\nenabled = schema.Bool(title=u'Enable notifications', description=u'Email will only be sent if this is enabled')\nsender = schema.TextLine(title=u'Sender email', description=u'Email address of sender application')\nemails = schema.TextLine(title=u'Notification emails', description=u'One or more emails separated by commas')\nsubject = schema.TextLine(title=u'Message subject')\nmessage = schema.Text(title=u'Message introduction')\n\n```", "```py\nclass SetNotificationsAnnotation(grok.Annotation):\ngrok.implements(ISetNotifications)\ngrok.context(ITodo)\nsender = 'grokadmin@example.com'\nemails = ''\nsubject = 'New project created'\nmessage = ''\nenabled = False\n\n```", "```py\nclass SetNotificationsForm(grok.Form):\ngrok.context(ITodo)\ngrok.name('set_notifications_form')\nform_fields = grok.AutoFields(ISetNotifications)\nlabel = 'Set email notification options'\ntemplate = form_template\ndef setUpWidgets(self, ignore_request=False):\nsuper(SetNotificationsForm,self).setUpWidgets(ignore_request)\ntodo_annotation = ISetNotifications(self.context)\nself.widgets['sender'].displayWidth = 80\nself.widgets['emails'].displayWidth = 80\nself.widgets['subject'].displayWidth = 50\nself.widgets['message'].height = 7\nself.widgets['emails'].setRenderedValue( ','.join(todo_annotation.emails))\nself.widgets['enabled'].setRenderedValue( todo_annotation.enabled)\nself.widgets['sender'].setRenderedValue( todo_annotation.sender)\nself.widgets['message'].setRenderedValue( todo_annotation.message)\nself.widgets['subject'].setRenderedValue( todo_annotation.subject)\n@grok.action('Set notification options')\ndef set_options(self, **data):\ntodo_annotation = ISetNotifications(self.context)\ntodo_annotation.emails = data['emails'].split(',')\ntodo_annotation.enabled = data['enabled']\ntodo_annotation.subject = data['subject']\ntodo_annotation.message = data['message']\nreturn self.redirect(self.url('set_notifications'))\n\n```", "```py\nclass SetNotifications(grok.View):\ngrok.context(ITodo)\ngrok.name('set_notifications')\ngrok.require('todo.addprojects')\ndef render(self):\nreturn master_template.render(self)\nclass SetNotificationsViewlet(grok.Viewlet):\ngrok.viewletmanager(Main)\ngrok.context(ITodo)\ngrok.view(SetNotifications)\ndef update(self):\nself.form = getMultiAdapter((self.context, self.request), name='set_notifications_form')\nself.form.update_form()\ndef render(self):\nreturn self.form.render()\n\n```", "```py\ninstall_requires=[\n'todo',\n'zc.sourcefactory',\n'zope.sendmail',\n]\n\n```", "```py\n<configure  xmlns:mail=http://namespaces.zope.org/mail >\n<include package=\"grok\" />\n<includeDependencies package=\".\" />\n<grok:grok package=\".\" />\n<mail:smtpMailer\nname=\"todoplus.smtp\"\nhostname=\"mail.example.com\"\nport=\"25\"\nusername=\"cguardia\"\npassword=\"password\"\n/>\n<mail:queuedDelivery\nname=\"mailer\"\npermission=\"zope.Public\"\nmailer=\"todoplus.smtp\"\nqueuePath=\"mailqueue\"\n/>\n</configure>\n\n```", "```py\nimport email.MIMEText\nimport email.Header\nfrom zope.sendmail.interfaces import IMailDelivery\n@grok.subscribe(IProject, grok.IObjectAddedEvent)\ndef send_email(obj, event):\ntodo_annotation = ISetNotifications(obj.__parent__)\nif not todo_annotation.enabled:\nreturn\nsender = todo_annotation.sender\nrecipient = todo_annotation.emails\nsubject = todo_annotation.subject\nbody = todo_annotation.message\nbody = body.replace('${title}',obj.title)\nbody = body.replace('${description}',obj.description)\nbody = body.replace('${creator}',obj.creator)\nmsg = email.MIMEText.MIMEText(body.encode('UTF-8'), 'plain', 'UTF-8')\nmsg[\"From\"] = sender\nmsg[\"To\"] = ','.join(recipient)\nmsg[\"Subject\"] = email.Header.Header(subject, 'UTF-8')\nmailer = getUtility(IMailDelivery, 'todoplus')\nmailer.send(sender, recipient, msg.as_string())\n\n```", "```py\nclass ManagerOptions(grok.Viewlet):\ngrok.viewletmanager(ExtraNav)\ngrok.context(Interface)\ngrok.require('zope.ManageApplication')\nclass UserOptions(grok.Viewlet):\ngrok.viewletmanager(ExtraNav)\ngrok.context(Interface)\ngrok.require('todo.changeitems')\n\n```", "```py\n| <a tal:attributes=\"href python:view.application_url('userlist')\">Manage users</a>\n\n```", "```py\n| <a tal:attributes=\"href python:view.application_url('skin_chooser')\">Choose skin</a>\n| <a tal:attributes=\"href python:view.application_url('set_notifications')\"> Set notifications</a>\n\n```"]