["```py\n from typing import NamedTuple \n\nclass Card(NamedTuple): \n\n    rank: int \n\n    suit: str \n\nSpades, Hearts, Diamonds, Clubs = (’\\u2660’, ’\\u2661’, ’\\u2662’, ’\\u2663’)\n```", "```py\n     class Deck_W:\n    ```", "```py\n     def __init__(self, cards: list[Card]) -> None: \n\n            self.cards = cards \n\n            self.deal_iter = iter(self.cards)\n    ```", "```py\n     def shuffle(self) -> None: \n\n            random.shuffle(self.cards) \n\n            self.deal_iter = iter(self.cards) \n\n        def deal(self) -> Card: \n\n            return next(self.deal_iter)\n    ```", "```py\n >>> domain = list( \n\n...     Card(r+1,s) \n\n...         for r in range(13) \n\n...             for s in (Spades, Hearts, Diamonds, Clubs) \n\n... ) \n\n>>> len(domain) \n\n52\n```", "```py\n >>> d = Deck_W(domain) \n\n>>> import random \n\n>>> random.seed(1) \n\n>>> d.shuffle() \n\n>>> [d.deal() for _ in range(5)] \n\n[Card(rank=13, suit=’’), Card(rank=3, suit=’’), Card(rank=10, suit=’’), Card(rank=6, suit=’’), Card(rank=1, suit=’’)]\n```", "```py\n     class Deck_X(list[Card]):\n    ```", "```py\n     def shuffle(self) -> None: \n\n            random.shuffle(self) \n\n            self.deal_iter = iter(self) \n\n        def deal(self) -> Card: \n\n            return next(self.deal_iter)\n    ```", "```py\n >>> dx = Deck_X( \n\n... Card(r+1,s) \n\n...     for r in range(13) \n\n...         for s in (Spades, Hearts, Diamonds, Clubs) \n\n... ) \n\n>>> len(dx) \n\n52\n```", "```py\n >>> import random \n\n>>> random.seed(1) \n\n>>> dx.shuffle() \n\n>>> [dx.deal() for _ in range(5)] \n\n[Card(rank=13, suit=’’), Card(rank=3, suit=’’), Card(rank=10, suit=’’), Card(rank=6, suit=’’), Card(rank=1, suit=’’)]\n```", "```py\n class SomeClass(Parent): \n\n    def some_method(self) -> None: \n\n        # do something extra \n\n        super().some_method()\n```", "```py\n     @dataclass(frozen=True) \n\n    class Card: \n\n        \"\"\"Superclass for cards\"\"\" \n\n        rank: int \n\n        suit: str \n\n        def __str__(self) -> str: \n\n            return f\"{self.rank:2d} {self.suit}\"\n    ```", "```py\n     class AceCard(Card): \n\n        def __str__(self) -> str: \n\n            return f\" A {self.suit}\" \n\n    class FaceCard(Card): \n\n        def __str__(self) -> str: \n\n            names = {11: \"J\", 12: \"Q\", 13: \"K\"} \n\n            return f\" {names[self.rank]} {self.suit}\"\n    ```", "```py\n     from typing import Protocol \n\n    class PointedCard(Protocol): \n\n        rank: int \n\n        def points(self) -> int: \n\n            ...\n    ```", "```py\n     class CribbagePoints(PointedCard): \n\n        def points(self) -> int: \n\n            return self.rank\n    ```", "```py\n     class CribbageFacePoints(PointedCard): \n\n        def points(self) -> int: \n\n            return 10\n    ```", "```py\n     class CribbageCard(Card, CribbagePoints): \n\n        pass \n\n    class CribbageAce(AceCard, CribbagePoints): \n\n        pass \n\n    class CribbageFace(FaceCard, CribbageFacePoints): \n\n        pass\n    ```", "```py\n     def make_cribbage_card(rank: int, suit: str) -> Card: \n\n        if rank == 1: \n\n            return CribbageAce(rank, suit) \n\n        elif 2 <= rank < 11: \n\n            return CribbageCard(rank, suit) \n\n        elif 11 <= rank: \n\n            return CribbageFace(rank, suit) \n\n        else: \n\n            raise ValueError(f\"invalid rank {rank}\")\n    ```", "```py\n >>> import random \n\n>>> random.seed(1) \n\n>>> deck = [make_cribbage_card(rank+1, suit) for rank in range(13) for suit in  SUITS] \n\n>>> random.shuffle(deck) \n\n>>> len(deck) \n\n52 \n\n>>> [str(c) for c in deck[:5]] \n\n[’ K ’, ’ 3 ’, ’10 ’, ’ 6 ’, ’ A ’] \n```", "```py\n >>> sum(c.points() for c in deck[:5]) \n\n30\n```", "```py\n >>> c.__class__.__name__ \n\n’CribbageCard’ \n\n>>> from pprint import pprint \n\n>>> pprint(c.__class__.mro()) \n\n[<class ’recipe_02.CribbageCard’>, \n\n <class ’recipe_02.Card’>, \n\n <class ’recipe_02.CribbagePoints’>, \n\n <class ’recipe_02.PointedCard’>, \n\n <class ’typing.Protocol’>, \n\n <class ’typing.Generic’>, \n\n <class ’object’>]\n```", "```py\n import logging \n\nclass Logged(Card, PointedCard): \n\n    def __init__(self, rank: int, suit: str) -> None: \n\n        self.logger = logging.getLogger(self.__class__.__name__) \n\n        super().__init__(rank, suit) \n\n    def points(self) -> int: \n\n        p = super().points()  # type: ignore [safe-super] \n\n        self.logger.debug(\"points {0}\", p) \n\n        return p\n```", "```py\n class LoggedCribbageAce(Logged, AceCard, CribbagePoints): \n\n    pass \n\nclass LoggedCribbageCard(Logged, Card, CribbagePoints): \n\n    pass \n\nclass LoggedCribbageFace(Logged, FaceCard, CribbageFacePoints): \n\n    pass\n```", "```py\n     import random \n\n    class Dice1: \n\n        def __init__(self, seed: int | None = None) -> None: \n\n            self._rng = random.Random(seed) \n\n            self.roll() \n\n        def roll(self) -> tuple[int, ...]: \n\n            self.dice = ( \n\n                self._rng.randint(1, 6), \n\n                self._rng.randint(1, 6)) \n\n            return self.dice\n    ```", "```py\n     import random \n\n    class Die: \n\n        def __init__(self, rng: random.Random) -> None: \n\n            self._rng = rng \n\n        def roll(self) -> int: \n\n            return self._rng.randint(1, 6) \n\n    class Dice2: \n\n        def __init__(self, seed: int | None = None) -> None: \n\n            self._rng = random.Random(seed) \n\n            self._dice = [Die(self._rng) for _ in range(2)] \n\n            self.roll() \n\n        def roll(self) -> tuple[int, ...]: \n\n            self.dice = tuple(d.roll() for d in self._dice) \n\n            return self.dice\n    ```", "```py\n from collections.abc import Iterator \n\ndef roller( \n\n    dice_class: type[Dice1 | Dice2], \n\n    seed: int | None = None, \n\n    *, \n\n    samples: int = 10 \n\n) -> Iterator[tuple[int, ...]]: \n\n    dice = dice_class(seed) \n\n    for _ in range(samples): \n\n        yield dice.roll()\n```", "```py\n >>> list(roller(Dice1, 1, samples=5)) \n\n[(1, 3), (1, 4), (4, 4), (6, 4), (2, 1)] \n\n>>> list(roller(Dice2, 1, samples=5)) \n\n[(1, 3), (1, 4), (4, 4), (6, 4), (2, 1)]\n```", "```py\nDice = Dice1 | Dice2\n```", "```py\n class DiceP(Protocol): \n\n    def roll(self) -> tuple[int, ...]: \n\n        ...\n```", "```py\n for row in source: \n\n    count(’input’) \n\n    some_processing() \n\nprint(counts())\n```", "```py\n     from collections import Counter\n    ```", "```py\n     _global_counter: Counter[str] = Counter()\n    ```", "```py\n     def count(key: str, increment: int = 1) -> None: \n\n        _global_counter[key] += increment \n\n    def counts() -> list[tuple[str, int]]: \n\n        return _global_counter.most_common() \n    ```", "```py\n >>> from counter import * \n\n>>> from recipe_03 import Dice1 \n\n>>> d = Dice1(1) \n\n>>> for _ in range(1000): \n\n...     if sum(d.roll()) == 7: \n\n...         count(’seven’) \n\n...     else: \n\n...         count(’other’) \n\n>>> print(counts()) \n\n[(’other’, 833), (’seven’, 167)]\n```", "```py\n     from collections import Counter \n\n    from typing import ClassVar \n\n    class EventCounter: \n\n        _class_counter: ClassVar[Counter[str]] = Counter()\n    ```", "```py\n     @classmethod \n\n        def count(cls, key: str, increment: int = 1) -> None: \n\n            cls._class_counter[key] += increment \n\n        @classmethod \n\n        def counts(cls) -> list[tuple[str, int]]: \n\n            return cls._class_counter.most_common()\n    ```", "```py\n >>> from counter import * \n\n>>> EventCounter.count(’input’) \n\n>>> EventCounter.count(’input’) \n\n>>> EventCounter.count(’filter’) \n\n>>> EventCounter.counts() \n\n[(’input’, 2), (’filter’, 1)]\n```", "```py\n [2016-04-24 11:05:01,462] INFO in module1: Sample Message One \n\n[2016-04-24 11:06:02,624] DEBUG in module2: Debugging \n\n[2016-04-24 11:07:03,246] WARNING in module1: Something might have gone wrong\n```", "```py\n import re \n\nfrom typing import NamedTuple \n\nclass Event(NamedTuple): \n\n    timestamp: str \n\n    level: str \n\n    module: str \n\n    message: str \n\n    @staticmethod \n\n    def from_line(line: str) -> ’Event | None’: \n\n        pattern = re.compile( \n\n            r\"\\[(?P<timestamp>.*?)\\]\\s+\" \n\n            r\"(?P<level>\\w+)\\s+\" \n\n            r\"in\\s+(?P<module>\\w+)\" \n\n            r\":\\s+(?P<message>.*)\" \n\n            ) \n\n        if log_line := pattern.match(line): \n\n            return Event(**log_line.groupdict()) \n\n        else: \n\n            return None \n```", "```py\n >>> pprint(summary) \n\n{’module1’: [ \n\n   Event(’2016-04-24 11:05:01,462’, ’INFO’, ’module1’, ’Sample Message One’), \n\n   Event(’2016-04-24 11:07:03,246’, ’WARNING’, ’module1’, ’Something might have gone wrong’)], \n\n ’module2’: [ \n\n   Event(’2016-04-24 11:06:02,624’, ’DEBUG’, ’module2’, ’Debugging’)] \n\n}\n```", "```py\n     from collections import defaultdict \n\n    from collections.abc import Iterable\n    ```", "```py\n     from typing import TypeAlias \n\n    Summary: TypeAlias = defaultdict[str, list[Event]]\n    ```", "```py\n     def summarize(data: Iterable[Event]) -> Summary:\n    ```", "```py\n     module_details: Summary = defaultdict(list)\n    ```", "```py\n     for event in data: \n\n            module_details[event.module].append(event) \n\n        return module_details\n    ```", "```py\n >>> pprint(summary) \n\ndefaultdict(<class ’list’>, \n\n            {’module1’: [Event(timestamp=’2016-04-24 11:05:01,462’, level=’INFO’, module=’module1’, message=’Sample Message One’), \n\n                         Event(timestamp=’2016-04-24 11:07:03,246’, level=’WARNING’, module=’module1’, message=’Something might have gone wrong’)], \n\n             ’module2’: [Event(timestamp=’2016-04-24 11:06:02,624’, level=’DEBUG’, module=’module2’, message=’Debugging’)]})\n```", "```py\n class ModuleEvents(dict[str, list[Event]]): \n\n    def __missing__(self, key: str) -> list[Event]: \n\n        self[key] = list() \n\n        return self[key]\n```", "```py\n >>> event_iter = (Event.from_line(l) for l in log_data.splitlines()) \n\n>>> module_details = ModuleEvents() \n\n>>> for event in filter(None, event_iter):\n```", "```py\n     from typing import Protocol, Any \n\n    class CardLike(Protocol): \n\n        rank: int \n\n        suit: str\n    ```", "```py\n     class SortableCard(CardLike): \n    ```", "```py\n     def __lt__(self: CardLike, other: Any) -> bool: \n\n            return (self.rank, self.suit) < (other.rank, other.suit) \n\n        def __le__(self: CardLike, other: Any) -> bool: \n\n            return (self.rank, self.suit) <= (other.rank, other.suit) \n\n        def __gt__(self: CardLike, other: Any) -> bool: \n\n            return (self.rank, self.suit) > (other.rank, other.suit) \n\n        def __ge__(self: CardLike, other: Any) -> bool: \n\n            return (self.rank, self.suit) >= (other.rank, other.suit)\n    ```", "```py\n     class PinochleAce(AceCard, SortableCard, PinochlePoints): \n\n        pass \n\n    class PinochleFace(FaceCard, SortableCard, PinochlePoints): \n\n        pass \n\n    class PinochleNumber(Card, SortableCard, PinochlePoints): \n\n        pass\n    ```", "```py\n     from typing import TypeAlias \n\n    PinochleCard: TypeAlias = PinochleAce | PinochleFace | PinochleNumber\n    ```", "```py\n     def make_pinochle_card(rank: int, suit: str) -> PinochleCard: \n\n        if rank in (9, 10): \n\n            return PinochleNumber(rank, suit) \n\n        elif rank in (11, 12, 13): \n\n            return PinochleFace(rank, suit) \n\n        else: \n\n            return PinochleAce(rank, suit)\n    ```", "```py\n >>> c1 = make_pinochle_card(9, ’’) \n\n>>> c2 = make_pinochle_card(10, ’’) \n\n>>> c1 < c2 \n\nTrue \n\n>>> c1 == c1  # Cards match themselves \n\nTrue \n\n>>> c1 == c2 \n\nFalse \n\n>>> c1 > c2 \n\nFalse\n```", "```py\n def make_pinochle_deck() -> list[PinochleCard]: \n\n    return [ \n\n        make_pinochle_card(r, s) \n\n            for _ in range(2) \n\n                for r in range(9, 15) \n\n                    for s in SUITS \n\n    ]\n```", "```py\n >>> deck = make_pinochle_deck() \n\n>>> len(deck) \n\n48\n```", "```py\n >>> import random \n\n>>> random.seed(4) \n\n>>> random.shuffle(deck) \n\n>>> [str(c) for c in sorted(deck[:12])] \n\n[’ 9 ’, ’10 ’, ’ J ’, ’ J ’, ’ J ’, ’ Q ’, ’ Q ’, ’ K ’, ’ K ’, ’ K ’, ’ A ’, ’ A ’]\n```", "```py\n >>> song_list = [ \n\n... {’title’: ’Eruption’, ’writer’: [’Emerson’], ’time’: ’2:43’}, \n\n... {’title’: ’Stones of Years’, ’writer’: [’Emerson’, ’Lake’], ’time’: ’3:43’}, \n\n... {’title’: ’Iconoclast’, ’writer’: [’Emerson’], ’time’: ’1:16’}, \n\n... {’title’: ’Mass’, ’writer’: [’Emerson’, ’Lake’], ’time’: ’3:09’}, \n\n... {’title’: ’Manticore’, ’writer’: [’Emerson’], ’time’: ’1:49’}, \n\n... {’title’: ’Battlefield’, ’writer’: [’Lake’], ’time’: ’3:57’}, \n\n... {’title’: ’Aquatarkus’, ’writer’: [’Emerson’], ’time’: ’3:54’} \n\n... ]\n```", "```py\n from typing import TypedDict \n\nclass SongType(TypedDict): \n\n    title: str \n\n    writer: list[str] \n\n    time: str\n```", "```py\n def naive_delete(data: list[SongType], writer: str) -> None: \n\n    for index in range(len(data)): \n\n        if ’Lake’ in data[index][’writer’]: \n\n            del data[index]\n```", "```py\n >>> naive_delete(song_list, ’Lake’) \n\nTraceback (most recent call last): \n\n... \n\nIndexError: list index out of range\n```", "```py\n >>> remove = list(filter(lambda x: ’Lake’ in x[’writer’], song_list)) \n\n>>> for x in remove: \n\n...     song_list.remove(x)\n```", "```py\n     def incremental_delete( \n\n        data: list[SongType], \n\n        writer: str \n\n    ) -> None:\n    ```", "```py\n     i = 0\n    ```", "```py\n     while i != len(data):\n    ```", "```py\n     if ’Lake’ in data[i][’writer’]: \n\n                del data[i] \n\n            else: \n\n                i += 1\n    ```", "```py\n >>> [item \n\n...     for item in song_list \n\n...         if ’Lake’ not in item[’writer’] \n\n... ]\n```", "```py\n >>> list( \n\n...     filter( \n\n...         lambda item: ’Lake’ not in item[’writer’], \n\n...         song_list \n\n...     ) \n\n... )\n```"]