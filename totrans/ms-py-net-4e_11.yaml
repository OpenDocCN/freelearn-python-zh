- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: AWS Cloud Networking
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 云网络
- en: Cloud computing is one of the major trends in computing today and has been for
    many years. Public cloud providers have transformed the start-up industry and
    what it means to launch a service from scratch. We no longer need to build our
    own infrastructure; we can pay public cloud providers to rent a portion of their
    resources for our infrastructure needs. Nowadays, walking around any technology
    conferences or meetups, we will be hard-pressed to find someone who has not learned
    about, used, or built services based in the cloud. Cloud computing is here, and
    we had better get used to working with it.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算是当今计算领域的主要趋势，并且已经持续了多年。公共云提供商已经改变了创业行业以及从头开始推出服务的含义。我们不再需要构建自己的基础设施；我们可以支付公共云提供商的费用，租用他们资源的一部分来满足我们的基础设施需求。如今，在任何一个技术会议或聚会中，我们很难找到没有了解过、使用过或基于云构建过服务的人。云计算已经到来，我们最好习惯与它一起工作。
- en: There are several cloud computing service models, roughly divided into **Software-as-a-Service**
    (**SaaS —** [https://en.wikipedia.org/wiki/Software_as_a_service](https://en.wikipedia.org/wiki/Software_as_a_service)),
    **Platform-as-a-Service** (**PaaS —** [https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS)](https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS))),
    and **Infrastructure-as-a-Service** (**IaaS —** [https://en.wikipedia.org/wiki/Infrastructure_as_a_service](https://en.wikipedia.org/wiki/Infrastructure_as_a_service)).
    Each service model offers a different level of abstraction from the user’s perspective.
    For us, networking is part of the IaaS offering and the focus of this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 云计算有几种服务模型，大致可以分为 **软件即服务**（**SaaS** — [https://en.wikipedia.org/wiki/Software_as_a_service](https://en.wikipedia.org/wiki/Software_as_a_service))、**平台即服务**（**PaaS**
    — [https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS)](https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS)))
    和 **基础设施即服务**（**IaaS** — [https://en.wikipedia.org/wiki/Infrastructure_as_a_service](https://en.wikipedia.org/wiki/Infrastructure_as_a_service))。每种服务模型从用户的角度提供了不同层次抽象。对我们来说，网络是
    IaaS 提供的一部分，也是本章的重点。
- en: '**Amazon Web Services** (**AWS** — [https://aws.amazon.com/](https://aws.amazon.com/))
    was the first company to offer IaaS public cloud services and was the clear leader
    in the space by market share in 2022 ([https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/](https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/)).
    If we define the term **Software-Defined Networking** (**SDN**) as a group of
    software services working together to create network constructs – IP addresses,
    access lists, load balancers, and **Network Address Translation** (**NAT**) –
    we can make the argument that AWS is the world’s largest implementer of SDN. They
    utilize the massive scale of their global network, data centers, and servers to
    offer an amazing array of networking services.'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊网络服务**（**AWS** — [https://aws.amazon.com/](https://aws.amazon.com/)) 是首家提供
    IaaS 公共云服务的公司，并在 2022 年凭借市场份额成为该领域的明显领导者 ([https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/](https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/))。如果我们把
    **软件定义网络**（**SDN**）定义为一系列软件服务协同工作以创建网络结构——IP 地址、访问列表、负载均衡器和 **网络地址转换**（**NAT**）——那么我们可以论证
    AWS 是世界上最大的 SDN 实施者。他们利用其全球网络的巨大规模、数据中心和服务器，提供了一系列令人惊叹的网络服务。'
- en: 'If you are interested in learning about Amazon’s scale and networking, I would
    highly recommend taking a look at James Hamilton’s AWS re:Invent 2014 talk: [https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ).
    It is a rare insider’s view of the scale and innovation at AWS.'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对了解亚马逊的规模和网络感兴趣，我强烈推荐你看看 James Hamilton 在 2014 年 AWS re:Invent 的演讲：[https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ)。这是对
    AWS 规模和创新的一次罕见的内部视角。
- en: 'In this chapter, we will discuss the networking services offered by the AWS
    cloud services and how we can use Python to work with them:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论 AWS 云服务提供的网络服务以及我们如何使用 Python 与它们一起工作：
- en: AWS setup and networking overview
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: AWS 设置和网络概述
- en: Virtual private cloud
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 虚拟私有云
- en: Direct Connect and VPN
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 直接连接和 VPN
- en: Networking scaling services
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网络扩展服务
- en: Other AWS network services
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 其他 AWS 网络服务
- en: Let’s begin by looking at how to set up AWS.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从如何设置 AWS 开始。
- en: AWS setup
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS 设置
- en: If you do not already have an AWS account and wish to follow along with these
    examples, please log on to [https://aws.amazon.com/](https://aws.amazon.com/)
    and sign up. The process is pretty straightforward; you will need a credit card
    and some way to verify your identity, such as a mobile phone that can accept text
    messages.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有AWS账户并且想跟随这些示例，请登录到[https://aws.amazon.com/](https://aws.amazon.com/)并注册。这个过程相当直接；你需要一张信用卡和一些方式来验证你的身份，例如可以接收短信的手机。
- en: A good thing about AWS when you are just getting started is that they offer
    many services in a free tier ([https://aws.amazon.com/free/](https://aws.amazon.com/free/)),
    where you can use the services for free up to a certain level. For example, we
    will use the **Elastic Compute Cloud** (**EC2**) service in this chapter; the
    free tier for EC2 is the first 750 hours per month for its t2.micro or t3.micro
    instances for the first 12 months.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 当你刚开始使用AWS时，一个好处是他们提供许多免费层级的服务（[https://aws.amazon.com/free/](https://aws.amazon.com/free/))，在那里你可以免费使用服务，直到达到一定水平。例如，在本章中我们将使用**弹性计算云**（**EC2**）服务；EC2的免费层是每月前750小时，对于前12个月的t2.micro或t3.micro实例。
- en: 'I recommend always starting with the free tier and gradually increasing your
    tier when the need arises. Please check the AWS site for the latest offerings:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我建议始终从免费层开始，并在需要时逐步提高你的层级。请检查AWS网站以获取最新的服务：
- en: '![](img/B18403_11_01.png)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![](img/B18403_11_01.png)'
- en: 'Figure 11.1: AWS free tier'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1：AWS免费层
- en: Once you have an account, you can sign in via the AWS console ([https://console.aws.amazon.com/](https://console.aws.amazon.com/))
    and take a look at the different services offered by AWS.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦你有账户，你就可以通过AWS控制台（[https://console.aws.amazon.com/](https://console.aws.amazon.com/))登录并查看AWS提供的服务。
- en: The AWS console layout is constantly changing. By the time you read this chapter,
    your screen might look different than what is shown. However, the AWS networking
    concepts will not change. We should always pay attention to the concept, and we
    should be ok despite any layout changes.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: AWS控制台的布局不断变化。当你阅读这一章时，你的屏幕可能看起来与显示的不同。然而，AWS网络概念不会改变。我们应该始终关注概念，并且即使有任何布局变化，我们也应该没问题。
- en: 'The console is where we can configure all the services and look at our monthly
    bills:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 控制台是我们配置所有服务和查看每月账单的地方：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_11_02.png)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18403_11_02.png)'
- en: 'Figure 11.2: The AWS console'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2：AWS控制台
- en: Now that we have set up our account, let’s take a look at using the AWS CLI
    tool as well as the Python SDK to manage our AWS resources.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经设置了账户，让我们看看如何使用AWS CLI工具以及Python SDK来管理我们的AWS资源。
- en: The AWS CLI and Python SDK
  id: totrans-25
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: AWS CLI和Python SDK
- en: 'Besides the console, we can also manage AWS services via the **command line
    interface** (**CLI**) and various SDKs. **The AWS CLI is a Python package** **that
    can be installed via PIP** ([https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)).
    Let’s install it on our Ubuntu host:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 除了控制台，我们还可以通过**命令行界面**（**CLI**）和各种SDK来管理AWS服务。**AWS CLI是一个Python包**，可以通过PIP安装（[https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)）。让我们在我们的Ubuntu主机上安装它：
- en: '[PRE0]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once the AWS CLI is installed, for easier and more secure access, we will create
    a user and configure the AWS CLI with the user credentials. Let’s go back to the
    AWS console and select **Identity and Access Management (IAM)** for user and access
    management:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了AWS CLI，为了更方便和安全地访问，我们将创建一个用户并使用用户凭证配置AWS CLI。让我们回到AWS控制台并选择**身份和访问管理（IAM**）进行用户和访问管理：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18403_11_03.png)'
  id: totrans-29
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序  自动生成的描述](img/B18403_11_03.png)'
- en: 'Figure 11.3: AWS IAM'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3：AWS IAM
- en: 'We can choose **Users** on the left panel to create a user:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在左侧面板上选择**用户**来创建用户：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_04.png)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  自动生成的描述](img/B18403_11_04.png)'
- en: 'Figure 11.4: AWS IAM users'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.4：AWS IAM用户
- en: 'Select **Programmatic access** and assign the user to the default administrator
    group:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 选择**程序访问**并将用户分配到默认管理员组：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_11_05.png)'
  id: totrans-35
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件  自动生成的描述](img/B18403_11_05.png)'
- en: 'Figure 11.5: AWS IAM add user'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.5：AWS IAM添加用户
- en: 'The next step will add the user to the group; we can add the user to the administrator
    group for now. We do not need to add any tag for this user. The last step will
    show an **Access key ID** and a **Secret access key**. Copy them into a text file
    and keep it in a safe place:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步将把用户添加到组中；现在我们可以把用户添加到管理员组。我们不需要为这个用户添加任何标签。最后一步将显示**访问密钥ID**和**秘密访问密钥**。将它们复制到文本文件中，并保存在安全的地方：
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18403_11_06.png)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序，团队描述自动生成](img/B18403_11_06.png)'
- en: 'Figure 11.6: AWS IAM user security credentials'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.6：AWS IAM用户安全凭证
- en: 'We will complete the AWS CLI authentication credential setup via `aws configure`
    in the terminal. We will go over AWS Regions in the upcoming section. We will
    use `us-east-1` for now since that is the Region with the most services. We can
    always come back to the settings later to change the Region:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将通过终端中的`aws configure`完成AWS CLI身份验证凭证设置。我们将在下一节中介绍AWS区域。我们现在使用`us-east-1`，因为这是服务最多的区域。我们总是可以稍后返回设置来更改区域：
- en: '[PRE1]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'We will also install the AWS Python SDK, Boto3 ([https://boto3.readthedocs.io/en/latest/](https://boto3.readthedocs.io/en/latest/)):'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将安装AWS Python SDK，Boto3（[https://boto3.readthedocs.io/en/latest/](https://boto3.readthedocs.io/en/latest/））：
- en: '[PRE2]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: We are now ready to move on to the subsequent sections, starting with an introduction
    to AWS cloud networking services.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经准备好进入后续部分，从AWS云网络服务介绍开始。
- en: AWS network overview
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: AWS网络概述
- en: 'When we discuss AWS services, we need to start at the top, with Regions and
    **Availability** **Zones** (**AZs**). They have big implications for all of our
    services. At the time of writing this book, AWS has listed 27 geographic Regions
    and 87 **AZs** worldwide. In the words of AWS Global Cloud Infrastructure ([https://aws.amazon.com/about-aws/global-infrastructure/](https://aws.amazon.com/about-aws/global-infrastructure/)):'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们讨论AWS服务时，我们需要从顶部开始，即区域和**可用性** **区**（**AZs**）。它们对我们所有服务都有重大影响。在撰写本书时，AWS在全球范围内列出了27个地理区域和87个**AZs**。用AWS全球云基础设施的话说（[https://aws.amazon.com/about-aws/global-infrastructure/](https://aws.amazon.com/about-aws/global-infrastructure/））：
- en: “The AWS Cloud infrastructure is built around Regions and Availability Zones
    (AZs). AWS Regions provide multiple, physically separated and isolated Availability
    Zones which are connected with low latency, high throughput, and highly redundant
    networking.”
  id: totrans-47
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
  zh: “AWS云基础设施是围绕区域和可用区（AZs）构建的。AWS区域提供多个、物理上分离且独立的可用区，这些可用区通过低延迟、高吞吐量和高度冗余的网络连接。”
- en: For a nice visualization of AWS Regions that can be filtered by AZ, Region,
    and so on, please check out [https://aws.amazon.com/about-aws/global-infrastructure/regions_az/](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/).
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看可以按AZ、区域等过滤的AWS区域的好可视化，请查看[https://aws.amazon.com/about-aws/global-infrastructure/regions_az/](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/)。
- en: 'Some of the services AWS offers are global (such as the IAM user we created),
    but most of the services are Region-based. The Regions are geographic footprints,
    such as US-East, US-West, EU-London, Asia-Pacific-Tokyo, etc. What this means
    for us is that we should build our infrastructure in a region that is closest
    to our intended users. This will reduce the latency of the service for our customers.
    If our users are on the **East** **Coast** of the United States, we should pick
    **US East (N. Virginia)** or **US East (Ohio)** as our Region if the service is
    Regional-based:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: AWS提供的一些服务是全球性的（例如我们创建的IAM用户），但大多数服务是基于区域的。区域是地理足迹，例如美国东部、美国西部、欧洲伦敦、亚太东京等。对我们来说，这意味着我们应该在我们目标用户最接近的区域构建我们的基础设施。这将减少我们客户服务的延迟。如果我们的用户位于美国**东海岸**，如果服务是基于区域的，我们应该选择**美国东部（北弗吉尼亚）**或**美国东部（俄亥俄）**作为我们的区域：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_07.png)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_11_07.png)'
- en: 'Figure 11.7: AWS Regions'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.7：AWS区域
- en: Besides user latency, AWS Regions also have both service and cost implications.
    Users who are new to AWS might find it surprising that not all services are offered
    in all Regions. The services we will look at in this chapter are offered in most
    Regions, but some newer services might only be offered in selected Regions.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 除了用户延迟外，AWS区域还有服务和成本影响。对于刚开始使用AWS的新用户来说，可能会感到惊讶，并不是所有服务都在所有区域提供。我们将在本章中查看的服务在大多数区域提供，但一些较新的服务可能只在选定区域提供。
- en: 'In the example that follows, we can see that **Alexa for Business** and **Amazon
    Chime** are only offered in the Northern Virginia Region in the United States:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 在下面的示例中，我们可以看到**Alexa for Business**和**Amazon Chime**仅在美国弗吉尼亚北部区域提供：
- en: '![Text  Description automatically generated with medium confidence](img/B18403_11_08.png)'
  id: totrans-54
  prefs: []
  type: TYPE_IMG
  zh: '![文本描述自动生成，中等置信度](img/B18403_11_08.png)'
- en: 'Figure 11.8: AWS services per Region'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.8：按区域划分的 AWS 服务
- en: 'Besides service availability, the cost of an offering might be slightly different
    between Regions. For example, for the EC2 service we will look at in this chapter,
    the cost for an **a1.medium** instance is **USD 0.0255 per hour** in **US East
    (N. Virginia)**; the same instance costs 14% more, at **USD 0.0291 per hour**,
    in **EU (Frankfurt)**:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 除了服务可用性外，不同区域之间的服务成本可能略有不同。例如，在本章中我们将要查看的 EC2 服务，**a1.medium**实例在**US East (N.
    Virginia)**的价格为每小时**USD 0.0255**；相同的实例在**EU (Frankfurt)**的价格为每小时**USD 0.0291**，高出
    14%：
- en: '![Table  Description automatically generated](img/B18403_11_09.png)'
  id: totrans-57
  prefs: []
  type: TYPE_IMG
  zh: '![表格描述自动生成](img/B18403_11_09.png)'
- en: 'Figure 11.9: AWS EC2 US East price'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.9：AWS EC2 美国东部价格
- en: '![Table  Description automatically generated](img/B18403_11_10.png)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![表格描述自动生成](img/B18403_11_10.png)'
- en: 'Figure 11.10: AWS EC2 EU price'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.10：AWS EC2 欧洲价格
- en: When in doubt, choose US East (N. Virginia); it is the oldest Region and most
    likely the cheapest, with the most service offerings.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有疑问，请选择美国东部（弗吉尼亚北部）；它是最古老的区域，可能是最便宜的，提供的服务种类最多。
- en: 'Not all Regions are available to all users. For example, **GovCloud** and the
    **China** Region are not available to users in the United States by default. You
    can list the Regions available to you via `aws ec2 describe-regions`:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 并非所有区域对所有用户都可用。例如，**GovCloud**和**中国**区域默认情况下不对美国用户开放。您可以通过`aws ec2 describe-regions`列出您可用的区域：
- en: '[PRE3]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: As stated by Amazon, all Regions are completely independent of one another.
    Therefore, most resources are not replicated across Regions. This means that if
    we have multiple Regions offering the same service, say **US-East** and **US-West**,
    and need the services to back each other up, we will need to replicate the necessary
    resources ourselves.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如亚马逊所述，所有区域之间完全独立。因此，大多数资源不会在区域之间复制。这意味着如果我们有多个区域提供相同的服务，例如**US-East**和**US-West**，并且需要相互备份服务，我们将需要自行复制必要的资源。
- en: 'We can choose our desired Region in the AWS console, in the top-right corner,
    with the drop-down menu:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 AWS 控制台中，右上角通过下拉菜单选择我们想要的区域：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_11.png)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_11_11.png)'
- en: 'Figure 11.11: AWS Regions'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.11：AWS 区域
- en: We can only view the services available within the Region on the portal. For
    example, if we have EC2 instances in the US East Region and select the US West
    Region, none of our EC2 instances will show up. I have made this mistake several
    times and wondered where all of my instances went!
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 我们只能在门户上查看区域内的可用服务。例如，如果我们在美国东部区域有 EC2 实例，并选择美国西部区域，我们的所有 EC2 实例都不会显示。我犯过这个错误好几次，不知道我的所有实例都去哪里了！
- en: 'There are many AZs within each Region. AZs are labeled using a combination
    of the Region and an alphabetical letter, such as `us-east-1a`, `us-east-1b`,
    and so on. Each Region has multiple AZs – typically three or more. Each AZ has
    its isolated infrastructure with a redundant power supply, intra-data center networking,
    and facilities. All AZs in a Region are connected through low-latency fiber routes
    that are typically within 100 km of each other within the same Region:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 每个区域内部有许多可用区（AZ）。可用区使用区域和字母的组合进行标记，例如`us-east-1a`、`us-east-1b`等。每个区域都有多个可用区——通常是三个或更多。每个可用区都有其独立的基础设施，包括冗余电源、数据中心内部网络和设施。同一区域内的所有可用区都通过低延迟光纤线路连接，通常在同一区域内彼此距离在
    100 公里以内：
- en: '![Diagram  Description automatically generated](img/B18403_11_12.png)'
  id: totrans-70
  prefs: []
  type: TYPE_IMG
  zh: '![图表描述自动生成](img/B18403_11_12.png)'
- en: 'Figure 11.12: AWS Regions and AZs'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.12：AWS 区域和可用区
- en: Unlike Regions, many of the resources we build in AWS can be copied across AZs
    automatically. For example, we can configure our managed relational database (Amazon
    RDS) to be replicated across AZs. The concept of AZs is very important when it
    comes to service redundancy, and its constraints are important to us for the network
    services we will build.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 与区域不同，我们在 AWS 中构建的许多资源可以自动跨可用区复制。例如，我们可以配置我们的托管关系数据库（Amazon RDS）跨可用区进行复制。可用区的概念在服务冗余方面非常重要，其限制对我们将要构建的网络服务也很重要。
- en: AWS independently maps AZs to identifiers for each account. For example, my
    AZ, `us-east-1a`, might not be the same as `us-east-1a` for another account, even
    though they are both labeled as `us-east-1a`.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 独立地将 AZ 映射到每个账户的标识符。例如，我的 AZ，`us-east-1a`，可能不同于另一个账户的 `us-east-1a`，尽管它们都被标记为
    `us-east-1a`。
- en: 'We can check the AZs in a Region in the AWS CLI:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在 AWS CLI 中检查区域中的 AZ：
- en: '[PRE4]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: Why do we care about Regions and AZs so much? As we will see in the coming few
    sections, AWS networking services are usually bound by the Region and AZ. A **virtual
    private cloud** (**VPC**), for example, must reside entirely in one Region, and
    each subnet needs to reside entirely in one AZ. On the other hand, NAT gateways
    are AZ-bound, so we will need to create one per AZ if we need redundancy.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为什么如此关注区域和 AZ？正如我们将在接下来的几节中看到的那样，AWS 网络服务通常受区域和 AZ 的限制。例如，**虚拟专用云**（**VPC**）必须完全位于一个区域中，每个子网也必须完全位于一个
    AZ 中。另一方面，NAT 网关是 AZ 绑定的，因此如果我们需要冗余，我们需要为每个 AZ 创建一个。
- en: 'We will go over both services in more detail, but their use cases are offered
    here as examples of how Regions and AZs are the basis of the AWS network services
    offering:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将更详细地介绍这两个服务，但它们的使用案例在此作为区域和 AZ 是 AWS 网络服务提供基础的示例：
- en: '![Table  Description automatically generated](img/B18403_11_13.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![表格描述自动生成](img/B18403_11_13.png)'
- en: 'Figure 11.13: VPCs and AZs per Region'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.13：每个区域的 VPC 和 AZ
- en: '**AWS edge locations** are part of the **AWS CloudFront** content delivery
    network in 90+ cities across 48 countries as of May 2022 ([https://aws.amazon.com/cloudfront/features/](https://aws.amazon.com/cloudfront/features/)).
    These edge locations are used to distribute content with low latency to customers.
    The edge nodes have a smaller footprint than the full data center Amazon builds
    for the Region and AZs. Sometimes, people mistake the edge locations’ point-of-presence
    for full AWS Regions. If the footprint is listed as an edge location, AWS services
    such as EC2 or S3 will not be offered. We will revisit edge locations in the **AWS
    CloudFront CDN services** section.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS 边缘位置**是截至 2022 年 5 月在 48 个国家的 90 多个城市中 AWS CloudFront 内容分发网络的一部分 ([https://aws.amazon.com/cloudfront/features/](https://aws.amazon.com/cloudfront/features/))。这些边缘位置用于向客户以低延迟分发内容。边缘节点比亚马逊为区域和
    AZ 构建的全数据中心占地面积小。有时，人们会将边缘位置的实体点误认为是完整的 AWS 区域。如果占地面积被列为边缘位置，则 AWS 服务（如 EC2 或
    S3）将不会提供。我们将在 **AWS CloudFront CDN 服务**部分重新讨论边缘位置。'
- en: '**AWS transit centers** are one of the least documented aspects of AWS networks.
    They were mentioned in James Hamilton’s 2014 AWS re:Invent keynote ([www.youtube.com/watch?v=JIQETrFC_SQ](http://www.youtube.com/watch?v=JIQETrFC_SQ))
    as the aggregation points for different AZs in the Region. To be fair, we do not
    know if the transit center still exists and functions the same way after all these
    years. However, it is fair to make an educated guess about the placement of the
    transit center and its correlation with the AWS Direct Connect service, which
    we will look at later in this chapter.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**AWS 转接中心**是 AWS 网络中最少被记录的部分之一。它们在 James Hamilton 2014 年的 AWS re:Invent 大会演讲中被提及，作为区域中不同
    AZ 的聚合点（[www.youtube.com/watch?v=JIQETrFC_SQ](http://www.youtube.com/watch?v=JIQETrFC_SQ)）。为了公平起见，我们不知道在这么多年后，转接中心是否仍然存在并以相同的方式运行。然而，我们可以对转接中心的位置及其与
    AWS Direct Connect 服务的相关性做出合理的猜测，我们将在本章后面讨论这一点。'
- en: James Hamilton, a VP and distinguished engineer from AWS, is one of the most
    influential technologists at AWS. If there is anybody whom I would consider authoritative
    when it comes to AWS networking, it would be him. You can read more about his
    ideas on his blog, Perspectives, at [https://perspectives.mvdirona.com/](https://perspectives.mvdirona.com/).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: James Hamilton，AWS 的副总裁和杰出工程师，是 AWS 最有影响力的技术专家之一。如果说到 AWS 网络方面，我会认为他是最有权威性的。你可以在他的博客
    Perspectives（[https://perspectives.mvdirona.com/](https://perspectives.mvdirona.com/））上了解更多关于他的想法。
- en: 'It is impossible to cover all of the services related to AWS in one chapter.
    There are some relevant services not directly related to networking that we do
    not have the space to cover, but we should be familiar with:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 在一个章节中涵盖所有与 AWS 相关的服务是不可能的。有一些与网络不直接相关的相关服务我们没有空间涵盖，但我们应该熟悉：
- en: The IAM service, [https://aws.amazon.com/iam/](https://aws.amazon.com/iam/),
    is the service that enables us to manage access to AWS services and resources
    securely.
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: IAM 服务，[https://aws.amazon.com/iam/](https://aws.amazon.com/iam/)，是一种使我们能够安全地管理对
    AWS 服务和资源的访问的服务。
- en: '**Amazon Resource Names** (**ARNs**), [https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html),
    uniquely identify AWS resources across all of AWS. These resource names are important
    when we need to identify a service, such as DynamoDB and API Gateway, that needs
    access to our VPC resources.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**亚马逊资源名称**（**ARNs**），[https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html)，在
    AWS 的所有资源中唯一标识 AWS 资源。当我们需要识别一个需要访问我们的 VPC 资源的服务，如 DynamoDB 和 API Gateway 时，这些资源名称非常重要。'
- en: Amazon **Elastic Compute Cloud** (**EC2**), [https://aws.amazon.com/ec2/](https://aws.amazon.com/ec2/),
    is the service that enables us to obtain and provision compute capacities, such
    as Linux and Windows instances, via AWS interfaces. We will use EC2 instances
    throughout this chapter in our examples.
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 亚马逊 **弹性计算云**（**EC2**），[https://aws.amazon.com/ec2/](https://aws.amazon.com/ec2/)，是一种服务，使我们能够通过
    AWS 接口获取和配置计算能力，例如 Linux 和 Windows 实例。在本章的示例中，我们将使用 EC2 实例。
- en: For the sake of learning, we will exclude the AWS GovCloud (US) and China Regions,
    neither of which uses the AWS global infrastructure, and each has its own unique
    features and limitations.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 为了学习的目的，我们将排除 AWS GovCloud (US) 和中国区域，这两个区域都不使用 AWS 全球基础设施，并且每个区域都有其独特的功能和限制。
- en: 'This was a relatively long introduction to AWS network services, but an important
    one. These concepts and terms will be referred to in the rest of the chapters.
    In the upcoming section, we will look at the most important concept (in my opinion)
    in AWS networking: VPC.'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 这是对 AWS 网络服务的一个相对较长的介绍，但非常重要。这些概念和术语将在后续章节中提到。在接下来的部分，我们将探讨 AWS 网络中最重要的概念（在我看来）：VPC。
- en: Virtual Private Cloud
  id: totrans-89
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 虚拟专用网络
- en: '**Amazon VPC** ([https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html))
    enables customers to launch AWS resources in a virtual network dedicated to the
    customer’s account. It is truly a customizable network that allows you to define
    your IP address range, add and delete subnets, create routes, add VPN gateways,
    associate security policies, connect EC2 instances to your own data center, and
    much more.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**亚马逊 VPC**（[https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html)）使客户能够在为客户的账户专设的虚拟网络中启动
    AWS 资源。这是一个真正可定制的网络，允许您定义您的 IP 地址范围，添加和删除子网，创建路由，添加 VPN 网关，关联安全策略，将 EC2 实例连接到您自己的数据中心，等等。'
- en: In the early days, when VPC was unavailable, all EC2 instances in an AZ were
    on a single, flat network that was shared among all customers. How comfortable
    would the customer be with putting their information in the cloud? Not very, I’d
    imagine. Between the launch of EC2 in 2007 and the launch of VPC in 2009, VPC
    functions were some of the most requested features of AWS.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VPC 不可用的时候，早期所有位于一个可用区（AZ）的 EC2 实例都在一个单一、扁平的网络中，该网络由所有客户共享。客户将信息放在云中的舒适度会如何？我想不会很高。在
    2007 年 EC2 发布和 2009 年 VPC 发布之间，VPC 功能是 AWS 最受请求的功能之一。
- en: The packets leaving your EC2 host in a VPC are intercepted by the Hypervisor.
    The Hypervisor will check the packets against a mapping service that understands
    your VPC construct. Then, the packets are encapsulated with the real AWS servers’
    source and destination addresses. The encapsulation and mapping service enables
    the flexibility of VPC but also some of the limitations (multicast, sniffing)
    of VPC. This is, after all, a virtual network.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VPC 中离开您的 EC2 主机的数据包会被虚拟机管理程序拦截。虚拟机管理程序将检查数据包与理解您的 VPC 结构的映射服务。然后，数据包将被封装成真实
    AWS 服务器源地址和目标地址。封装和映射服务使得 VPC 具有灵活性，但也带来了一些限制（多播、嗅探）。毕竟，这是一个虚拟网络。
- en: Since December 2013, all EC2 instances are VPC-only; you can no longer create
    an EC2 instance that is non-VPC (EC2-Classic), nor would you want to. If we use
    a launch wizard to create our EC2 instance, it will automatically be put into
    a default VPC with a virtual internet gateway for public access. In my opinion,
    only the most basic use cases should use the default VPC. In most cases, we should
    define our own non-default, customized VPC.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 自 2013 年 12 月以来，所有 EC2 实例都是 VPC 独有的；您不能再创建一个非 VPC（EC2-Classic）的 EC2 实例，而且您也不希望这样做。如果我们使用启动向导来创建我们的
    EC2 实例，它将自动放入一个默认 VPC，并带有用于公共访问的虚拟互联网网关。在我看来，只有最基本的用例应该使用默认 VPC。在大多数情况下，我们应该定义自己的非默认、定制的
    VPC。
- en: 'Let’s create the following VPC using the AWS console in **us-east-1**:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 **us-east-1** 的 AWS 控制台中创建以下 VPC：
- en: '![Diagram  Description automatically generated](img/B18403_11_14.png)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图描述自动生成](img/B18403_11_14.png)'
- en: 'Figure 11.14: Our ﬁrst VPC in US-East-1'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.14：我们在 US-East-1 的第一个 VPC
- en: If you recall, VPC is AWS Region-bound, and the subnets are AZ-based. Our first
    VPC will be based in `us-east-1`; the three subnets will be allocated to two different
    AZs in `us-east-1a` and `us-east-1b`.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还记得，VPC 是 AWS 区域绑定的，子网是基于可用区（AZ）的。我们的第一个 VPC 将位于 `us-east-1`；三个子网将被分配到 `us-east-1a`
    和 `us-east-1b` 的两个不同的 AZ 中。
- en: 'Using the AWS console to create the VPC and subnets is pretty straightforward,
    and AWS provides several good tutorials online. I have listed the steps with the
    associated locations of each on the VPC dashboard:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 AWS 控制台创建 VPC 和子网非常简单，AWS 在线提供了几个很好的教程。我已经在 VPC 仪表板上列出了步骤及其相关位置：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_15.png)'
  id: totrans-99
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_11_15.png)'
- en: 'Figure 11.15: Steps for creating the VPC, subnet, and other features'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.15：创建 VPC、子网和其他功能的步骤
- en: 'The first two steps are point-and-click processes that most network engineers
    can work through, even without prior experience. By default, the VPC only contains
    the local route, `10.0.0.0/16`. Now, we will create an internet gateway and associate
    it with the VPC:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 前两个步骤是点击操作，大多数网络工程师都可以完成，即使没有先前的经验。默认情况下，VPC 只包含本地路由，`10.0.0.0/16`。现在，我们将创建一个互联网网关并将其与
    VPC 关联：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18403_11_16.png)'
  id: totrans-102
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序描述自动生成](img/B18403_11_16.png)'
- en: 'Figure 11.16: AWS internet gateway-to-VPC assignment'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.16：AWS 互联网网关到 VPC 分配
- en: 'We can then create a custom route table with a default route pointing to the
    internet gateway, allowing internet access. We will associate this route table
    with our subnet in `us-east-1a`, `10.0.0.0/24`, thus allowing the VPC to have
    internet access:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以创建一个自定义路由表，默认路由指向互联网网关，允许互联网访问。我们将此路由表与我们的 `us-east-1a` 子网 `10.0.0.0/24`
    关联，从而使 VPC 能够访问互联网：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_17.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_11_17.png)'
- en: 'Figure 11.17: Route table'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.17：路由表
- en: 'Let’s use the Boto3 Python SDK to see what we have created; I used `mastering_python_networking_demo`
    as the tag for the VPC, which we can use as the filter:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用 Boto3 Python SDK 来查看我们创建了什么；我使用了 `mastering_python_networking_demo` 作为
    VPC 的标签，我们可以用它作为过滤器：
- en: '[PRE5]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This script will allow us to query the Region for the VPC we created programmatically:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 此脚本将允许我们查询我们创建的 VPC 所在的区域：
- en: '[PRE6]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The Boto3 VPC API documentation can be found at [https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc](https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc).
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Boto3 VPC API 文档可以在 [https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc](https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc)
    找到。
- en: If we created EC2 instances and put them in different subnets as is, the hosts
    would be able to reach each other across subnets. You may be wondering how the
    subnets can reach one another within the VPC since we only created an internet
    gateway in subnet 1a. In a physical network, the network needs to connect to a
    router to reach beyond its own local network.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们创建了 EC2 实例并将它们放在不同的子网中，主机将能够跨子网相互访问。你可能想知道，由于我们只在子网 1a 中创建了一个互联网网关，子网之间是如何在
    VPC 内相互连接的。在物理网络中，网络需要连接到路由器才能超出其本地网络。
- en: It is not so different in VPC, except it is an **implicit router** with a default
    routing table of the local network, which in our example is `10.0.0.0/16`. This
    implicit router was created when we created our VPC. Any subnet that is not associated
    with a custom routing table is associated with the main table.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在 VPC 中，这并没有太大的不同，除了它是一个**隐式路由器**，默认路由表是本地网络，在我们的例子中是 `10.0.0.0/16`。这个隐式路由器是在我们创建
    VPC 时创建的。任何未与自定义路由表关联的子网都关联到主表。
- en: Route tables and route targets
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 路由表和路由目标
- en: Routing is one of the most important topics in network engineering. It is worth
    looking at how it is done in AWS VPC more closely. We’ve already seen that we
    had an implicit router and the main routing table when we created the VPC. In
    the last example, we created an internet gateway, a custom routing table with
    a default route pointing to the internet gateway using the route target, and we
    associated the custom routing table with a subnet.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 路由是网络工程中最重要的话题之一。值得更仔细地看看 AWS VPC 中是如何实现的。我们已经看到，当我们创建 VPC 时，我们有一个隐式路由器和主要的路由表。在上一个例子中，我们创建了一个互联网网关，一个自定义路由表，默认路由指向互联网网关，并使用路由目标关联了自定义路由表到一个子网。
- en: So far, only the concept of the route target is where VPC is a bit different
    than traditional networking. We can roughly equate the route target with the next
    hop in traditional routing.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，只有路由目标的概念在 VPC 中与传统网络略有不同。我们可以将路由目标大致等同于传统路由中的下一跳。
- en: 'In summary:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 总结：
- en: Each VPC has an implicit router
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个VPC都有一个隐式路由器
- en: Each VPC has the main routing table with the local route populated
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个VPC都有一个包含本地路由的主要路由表
- en: You can create custom-routing tables
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以创建自定义路由表
- en: Each subnet can follow a custom-routing table or the default main routing table
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 每个子网可以遵循自定义路由表或默认的主要路由表
- en: The route table route target can be an internet gateway, NAT gateway, VPC peers,
    and so on
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路由表路由目标可以是互联网网关、NAT 网关、VPC 对等连接等
- en: 'We can use Boto3 to look at the custom route tables and associations with the
    subnets in `Chapter11_2_query_route_tables.py`:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 Boto3 在 `Chapter11_2_query_route_tables.py` 中查看自定义路由表和子网的关联：
- en: '[PRE7]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'The main routing table is implicit and not returned by the API. Since we only
    have one custom route table, this is what we will see:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 主要路由表是隐式的，并且 API 不会返回它。由于我们只有一个自定义路由表，这就是我们将看到的内容：
- en: '[PRE8]'
  id: totrans-126
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'We already created the first public subnet. We will create two more private
    subnets, `us-east-1b` and `us-east-1c`, following the same steps. The result will
    be three subnets: a `10.0.0.0/24` public subnet in `us-east-1a`, and `10.0.1.0/24`
    and `10.0.2.0/24` private subnets in `us-east-1b` and `us-east-1c`, respectively.'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经创建了第一个公共子网。我们将按照相同的步骤创建另外两个私有子网，`us-east-1b` 和 `us-east-1c`。结果将会有三个子网：一个位于
    `us-east-1a` 的 `10.0.0.0/24` 公共子网，以及分别位于 `us-east-1b` 和 `us-east-1c` 的 `10.0.1.0/24`
    和 `10.0.2.0/24` 私有子网。
- en: 'We now have a working VPC with three subnets: one public and two private. So
    far, we have used the AWS CLI and the Boto3 library to interact with AWS VPC.
    Let’s take a look at another automation tool from AWS, **CloudFormation**.'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们有一个包含三个子网的工作 VPC：一个公共子网和两个私有子网。到目前为止，我们已经使用 AWS CLI 和 Boto3 库与 AWS VPC
    进行交互。让我们看看 AWS 的另一个自动化工具，**CloudFormation**。
- en: Automation with CloudFormation
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 CloudFormation 自动化
- en: 'AWS CloudFormation ([https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/))
    is one way in which we can use a text file to describe and launch the resource
    that we need. We can use CloudFormation to provision another VPC in the **us-west-1**
    Region:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFormation ([https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/))
    是我们可以使用文本文件来描述和启动所需资源的一种方式。我们可以使用 CloudFormation 在 **us-west-1** 区域中部署另一个 VPC：
- en: '![Diagram  Description automatically generated](img/B18403_11_18.png)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![图描述自动生成](img/B18403_11_18.png)'
- en: 'Figure 11.18: VPC for us-west-1'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.18：`us-west-1` 的 VPC
- en: 'The CloudFormation template can be in YAML or JSON; we will use YAML for our
    first template for provisioning, `Chapter10_3_cloud_formation.yml`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFormation 模板可以是 YAML 或 JSON；我们将使用 YAML 作为我们第一个用于部署的模板 `Chapter10_3_cloud_formation.yml`：
- en: '[PRE9]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We can execute the template via the AWS CLI. Notice that we specify the `us-west-1`
    region in our execution:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 AWS CLI 执行模板。请注意，我们在执行时指定了 `us-west-1` 区域：
- en: '[PRE10]'
  id: totrans-136
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'We can verify the status via the AWS CLI:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以通过 AWS CLI 验证状态：
- en: '[PRE11]'
  id: totrans-138
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'The last CloudFormation template created a VPC without any subnet. Let’s delete
    that VPC and use the following template, `Chapter11_4_cloud_formation_full.yml`,
    to create both the VPC and the subnet. Notice that we will not have the VPC-ID
    before VPC creation, so we will use a special variable to reference the VPC-ID
    in the subnet creation. This same technique can be used for other resources, such
    as the routing table and internet gateway:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 最后创建的 CloudFormation 模板创建了一个没有子网的网络。让我们删除该 VPC，并使用以下模板 `Chapter11_4_cloud_formation_full.yml`
    来创建 VPC 和子网。请注意，在创建 VPC 之前，我们不会有 VPC-ID，因此我们将使用一个特殊变量在子网创建中引用 VPC-ID。同样的技术也可以用于其他资源，例如路由表和互联网网关：
- en: '[PRE12]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'We can execute and verify the creation of the resources as follows:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以按照以下方式执行和验证资源的创建：
- en: '[PRE13]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can verify the VPC and subnet information from the AWS console. Remember
    to pick the right Region from the drop-down menu in the top right-hand corner:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以从 AWS 控制台中验证 VPC 和子网信息。请记住从右上角的下拉菜单中选择正确的区域：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_19.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_11_19.png)'
- en: 'Figure 11.19: VPC in us-west-1'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.19：us-west-1 中的 VPC
- en: 'We can also take a look at the subnet:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以查看子网：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_20.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_11_20.png)'
- en: 'Figure 11.20: Subnet in us-west-1'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.20：us-west-1 中的子网
- en: We now have two VPCs on the two coasts of the United States. They are currently
    behaving like two islands, each by themselves. This may or may not be your desired
    state of operation. If we want the two VPCs to be connected, we can use VPC peering
    ([https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html](https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html))
    to allow direct communication.
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 我们现在在美国的两个海岸都有两个 VPC。它们目前就像两个孤岛，各自独立。这可能或可能不是您期望的操作状态。如果我们想将两个 VPC 连接起来，我们可以使用
    VPC 对等连接（[https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html](https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html)）来允许直接通信。
- en: There are a few VPC peering limitations, such as no overlapping IPv4 or IPv6
    CIDR blocks being allowed. There are also additional limitations for inter-region
    VPC peering. Make sure you look over the documentation.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些 VPC 对等连接的限制，例如不允许重叠的 IPv4 或 IPv6 CIDR 块。还有跨区域 VPC 对等连接的额外限制。请确保您查阅了文档。
- en: VPC peering is not limited to the same account. You can connect VPCs across
    different accounts, as long as the request was accepted and the other aspects
    (security, routing, and DNS name) are taken care of.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: VPC 对等连接不仅限于同一账户。您可以将不同账户的 VPC 连接起来，只要请求被接受，并且其他方面（安全、路由和 DNS 名称）得到妥善处理。
- en: In the upcoming section, we will take a look at VPC security groups and network
    **access control lists** (**ACLs**).
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分中，我们将查看 VPC 安全组和网络 **访问控制列表**（**ACL**）。
- en: Security Groups and Network ACLs
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安全组和网络 ACL
- en: 'AWS **Security Groups** and **Network ACLs** can be found under the **Security**
    section of your VPC:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: AWS **安全组** 和 **网络 ACL** 可在您的 VPC 的 **安全** 部分找到：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_21.png)'
  id: totrans-155
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_11_21.png)'
- en: 'Figure 11.21: VPC security'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.21：VPC 安全
- en: A security group is a stateful virtual firewall that controls inbound and outbound
    access to resources. Most of the time, we use a security group to limit public
    access to our EC2 instance. The current limitation is 500 security groups in each
    VPC. Each security group can contain up to 50 inbound and 50 outbound rules.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组是一种有状态的虚拟防火墙，它控制对资源的入站和出站访问。大多数时候，我们使用安全组来限制对我们的 EC2 实例的公共访问。当前每个 VPC 的限制是
    500 个安全组。每个安全组可以包含最多 50 条入站规则和 50 条出站规则。
- en: 'You can use the following sample script, `Chapter11_5_security_group.py`, to
    create a security group and two simple ingress rules:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下示例脚本 `Chapter11_5_security_group.py` 来创建安全组和两个简单的入站规则：
- en: '[PRE14]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'We can execute the script and receive confirmation of the creation of the security
    group, which can be associated with other AWS resources:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以执行脚本并收到创建安全组的确认，该安全组可以与其他 AWS 资源相关联：
- en: '[PRE15]'
  id: totrans-161
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Network **ACLs** are an additional layer of security that is stateless. Each
    subnet in the VPC is associated with a network ACL. Since an ACL is stateless,
    you will need to specify both inbound and outbound rules.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 网络ACL 是一个无状态的额外安全层。VPC 中的每个子网都与一个网络 ACL 相关联。由于 ACL 是无状态的，您需要指定入站和出站规则。
- en: 'The important differences between security groups and ACLs are as follows:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组和 ACL 之间的重要区别如下：
- en: Security groups operate at the network interface level, whereas ACLs operate
    at the subnet level.
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组在网络接口级别运行，而 ACL 在子网级别运行。
- en: For a security group, we can only specify `allow` rules and not `deny` rules,
    whereas ACLs support both `allow` and `deny` rules.
  id: totrans-165
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于安全组，我们只能指定 `允许` 规则，而不能指定 `拒绝` 规则，而 ACL 支持同时使用 `允许` 和 `拒绝` 规则。
- en: A security group is stateful, so return traffic is automatically allowed; return
    traffic in ACLs must be specifically allowed.
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安全组是有状态的，因此返回流量会自动允许；ACL 中的返回流量必须被明确允许。
- en: 'Let’s look at one of the coolest features of AWS networking: Elastic IP. When
    I initially learned about Elastic IPs, I was blown away by their ability to assign
    and reassign IP addresses dynamically.'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 AWS 网络中最酷的功能之一：弹性 IP。当我最初了解到弹性 IP 时，我对它们动态分配和重新分配 IP 地址的能力感到震惊。
- en: Elastic IP
  id: totrans-168
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹性 IP
- en: An **Elastic IP** (**EIP**) is a way to use a public IPv4 address that’s reachable
    from the internet.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '**弹性 IP**（**EIP**）是一种使用可从互联网访问的公共 IPv4 地址的方式。'
- en: IPv6 is not currently supported in EIP as of late 2022.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 2022 年底，EIP 不支持 IPv6。
- en: 'An EIP can be dynamically assigned to an EC2 instance, network interface, or
    other resources. A few characteristics of an EIP are as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: EIP 可以动态分配给 EC2 实例、网络接口或其他资源。EIP 的一些特性如下：
- en: An EIP is associated with the account and is region-specific. For example, an
    EIP in `us-east-1` can only be associated with resources in `us-east-1`.
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 弹性 IP 地址（EIP）与账户相关联，并且具有区域特定性。例如，`us-east-1` 区域的 EIP 只能关联到 `us-east-1` 区域的资源。
- en: You can disassociate an EIP from a resource and re-associate it with a different
    resource. This flexibility can sometimes be used to ensure high availability.
    For example, you can migrate from a smaller EC2 instance to a larger EC2 instance
    by reassigning the same IP address from the small EC2 instance to the larger one.
  id: totrans-173
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以将 EIP 从资源中解关联，并将其重新关联到不同的资源。这种灵活性有时可以用来确保高可用性。例如，您可以通过将相同的 IP 地址从较小的 EC2
    实例重新分配到较大的 EC2 实例来迁移。
- en: There is a small hourly charge associated with EIPs.
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: EIP 与之相关联的是一小笔每小时费用。
- en: 'You can request an EIP from the portal. After the assignment, you can associate
    it with the desired resources:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从门户请求 EIP。分配后，您可以将其关联到所需的资源：
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18403_11_22.png)'
  id: totrans-176
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面、文本、应用程序 描述自动生成](img/B18403_11_22.png)'
- en: 'Figure 11.22: Elastic IPs'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.22：弹性 IP 地址
- en: Unfortunately, EIPs are limited to five per Region to discourage waste ([https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html)).
    However, this number can be increased via a ticket to AWS Support if needed.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，EIP 在每个区域中限制为五个，以防止浪费（[https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html)）。然而，如果需要，可以通过
    AWS 支持的工单来增加这个数量。
- en: In the upcoming section, we will look at how we can use NAT gateways to allow
    communication for private subnets with the internet.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何使用 NAT 网关允许私有子网与互联网进行通信。
- en: NAT gateways
  id: totrans-180
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: NAT 网关
- en: To allow the hosts in our EC2 public subnet to be accessed from the internet,
    we can allocate an EIP and associate it with the network interface of the EC2
    host. However, at the time of writing, there is a limit of five Elastic IPs per
    EC2-VPC ([https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips)).
    Sometimes, it would be nice to allow the host in a private subnet outbound access
    when needed, without creating a permanent one-to-one mapping between the EIP and
    the EC2 host.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 为了允许我们的 EC2 公共子网中的主机从互联网访问，我们可以分配一个 EIP 并将其关联到 EC2 主机的网络接口。然而，在撰写本文时，每个 EC2-VPC
    限制为五个弹性 IP（[https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips)）。有时，当需要时，允许私有子网中的主机进行出站访问，而不创建
    EIP 和 EC2 主机之间永久的一对一映射，会很好。
- en: 'A **NAT gateway** can help by allowing the hosts in the private subnet temporary
    outbound access by performing NAT. This operation is similar to **port address
    translation** (**PAT**), which we normally perform on the corporate firewall.
    To use a NAT gateway, we can perform the following steps:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '**NAT 网关**可以通过执行 NAT 允许私有子网中的主机临时进行出站访问，从而提供帮助。此操作类似于我们通常在企业防火墙中执行的**端口地址转换**（**PAT**）。要使用
    NAT 网关，我们可以执行以下步骤：'
- en: Create a NAT gateway in a subnet with access to the internet gateway via the
    AWS CLI, Boto3 library, or AWS console. The NAT gateway will need to be assigned
    an EIP.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在可以通过互联网网关访问的子网中创建 NAT 网关，使用 AWS CLI、Boto3 库或 AWS 控制台。NAT 网关需要分配一个 EIP。
- en: Point the default route in the private subnet to the NAT gateway.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将私有子网中的默认路由指向 NAT 网关。
- en: The NAT gateway will follow the default route to the internet gateway for external
    access.
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: NAT 网关将遵循默认路由到互联网网关以进行外部访问。
- en: 'This operation can be illustrated in the following diagram:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作可以用以下图表来表示：
- en: '![Diagram  Description automatically generated](img/B18403_11_23.png)'
  id: totrans-187
  prefs: []
  type: TYPE_IMG
  zh: '![图表  自动生成的描述](img/B18403_11_23.png)'
- en: 'Figure 11.23: NAT gateway operations'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.23：NAT网关操作
- en: 'One of the most common questions about NAT gateways typically involves which
    subnet the NAT gateway should reside in. The rule of thumb is to remember that
    the NAT gateway needs public access. Therefore, it should be created in the subnet
    with public internet access with an available EIP assigned to it:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 关于NAT网关最常见的几个问题通常涉及NAT网关应该位于哪个子网。一般来说，要记住NAT网关需要公共访问。因此，它应该创建在具有公共互联网访问的子网中，并分配给它一个可用的EIP：
- en: '![Graphical user interface  Description automatically generated](img/B18403_11_24.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面  自动生成的描述](img/B18403_11_24.png)'
- en: 'Figure 11.24: NAT gateway creation'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.24：NAT网关创建
- en: Please remember to remove any of the AWS services you are not using to avoid
    charges.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住删除您未使用的任何AWS服务，以避免产生费用。
- en: In the upcoming section, we will look at how to connect our shiny virtual network
    in AWS to our physical network.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一节中，我们将探讨如何将我们光鲜的AWS虚拟网络连接到我们的物理网络。
- en: Direct Connect and VPN
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 直接连接和VPN
- en: Up to this point, our VPC has been a self-contained network that resides in
    the AWS network. It is flexible and functional, but to access the resources inside
    the VPC, we will need to access them with their internet-facing services, such
    as SSH and HTTPS.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们的VPC一直是一个位于AWS网络中的独立网络。它既灵活又实用，但为了访问VPC内的资源，我们需要通过其面向互联网的服务（如SSH和HTTPS）来访问它们。
- en: 'In this section, we will look at the ways AWS allows us to connect to the VPC
    from our private network: an IPSec VPN gateway and Direct Connect.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨AWS允许我们从我们的私有网络连接到VPC的方式：IPSec VPN网关和直接连接。
- en: VPN gateways
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: VPN网关
- en: The first way to connect our on-premises network to VPC is with traditional
    IPSec VPN connections. We will need a publicly accessible device to establish
    VPN connections to AWS’s VPN devices.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 将我们的本地网络连接到VPC的第一种方式是使用传统的IPSec VPN连接。我们需要一个公开可访问的设备来建立与AWS VPN设备的VPN连接。
- en: The customer gateway needs to support route-based IPSec VPNs, where the VPN
    connection is treated as a connection that a routing protocol and normal user
    traffic can traverse. Currently, AWS recommends using **Border Gateway Protocol**
    (**BGP**) to exchange routes.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端网关需要支持基于路由的IPSec VPN，其中VPN连接被视为路由协议和正常用户流量可以穿越的连接。目前，AWS建议使用**边界网关协议**（**BGP**）来交换路由。
- en: 'On the VPC side, we can follow a similar routing table where we can route a
    particular subnet toward the **virtual private gateway** (**VPG**) target:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 在VPC方面，我们可以遵循类似的路由表，将特定的子网路由到**虚拟私有网关**（**VPG**）目标：
- en: '![Diagram  Description automatically generated](img/B18403_11_25.png)'
  id: totrans-201
  prefs: []
  type: TYPE_IMG
  zh: '![图表  自动生成的描述](img/B18403_11_25.png)'
- en: 'Figure 11.25: VPC VPN connection'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.25：VPC VPN连接
- en: Besides an IPSec VPN, we can also use a dedicated circuit to connect, which
    is termed **Direct Connect**.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 除了IPSec VPN之外，我们还可以使用专用电路进行连接，这被称为**直接连接**。
- en: Direct Connect
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 直接连接
- en: 'The IPSec VPN connection we looked at is an easy way to provide connectivity
    for on-premises equipment to AWS cloud resources. However, it suffers the same
    faults that IPSec over the internet always does: it is unreliable, and we have
    very little control over its reliability. There is very little performance monitoring
    and no **service-level agreement** (**SLA**) until the connection reaches a part
    of the internet that we can control.'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到的IPSec VPN连接是提供本地设备到AWS云资源连接的一种简单方式。然而，它也面临着互联网上IPSec始终存在的相同问题：它不可靠，我们对它的可靠性几乎没有控制。在连接达到我们可以控制的互联网部分之前，几乎没有性能监控，也没有**服务级别协议**（**SLA**）。
- en: For all of these reasons, any production-level, mission-critical traffic is
    more likely to traverse through the second option Amazon provides, that is, AWS
    Direct Connect. AWS Direct Connect lets customers connect their data center and
    colocation to their AWS VPC with a dedicated virtual circuit.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 由于所有这些原因，任何生产级、关键任务流量更有可能通过Amazon提供的第二个选项进行传输，即AWS Direct Connect。AWS Direct
    Connect允许客户通过专用虚拟电路将他们的数据中心和托管环境连接到他们的AWS VPC。
- en: The somewhat difficult part of this operation is usually bringing our network
    to where we can connect with AWS physically, typically in a carrier hotel.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 这个操作中相对困难的部分通常是把我们自己的网络带到可以与AWS物理连接的地方，通常是在一个运营商酒店。
- en: 'You can find a list of the AWS Direct Connect locations here: [https://aws.amazon.com/directconnect/details/](https://aws.amazon.com/directconnect/details/).
    The Direct Connect link is just a fiber patch connection that you can order from
    the particular carrier hotel to patch the network to a network port and configure
    the dot1q trunk’s connectivity.'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在此处找到 AWS Direct Connect 的位置列表：[https://aws.amazon.com/directconnect/details/](https://aws.amazon.com/directconnect/details/)。Direct
    Connect 链路只是一个可以订购的光纤连接，您可以从特定的运营商酒店订购，将网络连接到网络端口，并配置 dot1q 干线的连接性。
- en: 'There are also increasingly more connectivity options for Direct Connect via
    a third-party carrier with **Multi-Protocol Label Switching** (**MPLS**) circuits
    and aggregated links. One of the most affordable options that I found and use
    is Equinix Cloud Exchange Fabric ([https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)).
    By using Equinix Cloud Exchange Fabric, we can leverage the same circuit and connect
    to different cloud providers at a fraction of the cost of dedicated circuits:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 通过第三方运营商使用 **多协议标签交换**（**MPLS**）电路和聚合链路，Direct Connect 的连接选项也越来越多。我发现并使用的一个最经济实惠的选项是
    Equinix Cloud Exchange Fabric ([https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/))。通过使用
    Equinix Cloud Exchange Fabric，我们可以利用相同的电路，以专用电路成本的一小部分连接到不同的云服务提供商：
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_26.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序描述自动生成](img/B18403_11_26.png)'
- en: 'Figure 11.26: Equinix Cloud Exchange Fabric'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.26：Equinix Cloud Exchange Fabric
- en: In the upcoming section, we will look at some of the network scaling services
    AWS offers.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的部分，我们将探讨 AWS 提供的一些网络扩展服务。
- en: Network scaling services
  id: totrans-213
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 网络扩展服务
- en: Many of the network services AWS offers do not have direct network implications,
    such as DNS and content distribution networks. They are relevant in our discussion
    due to their close relationship with the network and the application’s performance.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: AWS 提供的许多网络服务没有直接的网络影响，例如 DNS 和内容分发网络。由于它们与网络和应用程序性能的紧密关系，它们在我们的讨论中是相关的。
- en: Elastic Load Balancing
  id: totrans-215
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 弹性负载均衡
- en: '**Elastic Load Balancing** (**ELB**) allows incoming traffic from the internet
    to be automatically distributed across multiple EC2 instances. Like load balancers
    in the physical world, this allows us to have better redundancy and fault tolerance
    while reducing the per-server load. ELB comes in two flavors: application and
    network load balancing.'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '**弹性负载均衡**（**ELB**）允许来自互联网的入站流量自动分配到多个 EC2 实例。就像物理世界中的负载均衡器一样，这使我们能够拥有更好的冗余和容错能力，同时减少每台服务器的负载。ELB
    有两种类型：应用负载均衡和网络负载均衡。'
- en: The network load balancer handles web traffic via **HTTP** and **HTTPS**; the
    application load balancer operates on a TCP level. If your application runs on
    **HTTP** or **HTTPS**, it is generally a good idea to go with the Application
    Load Balancer. Otherwise, using the Network Load Balancer is a good bet.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 网络负载均衡器通过 **HTTP** 和 **HTTPS** 处理网络流量；应用负载均衡器在 TCP 层面上运行。如果你的应用程序运行在 **HTTP**
    或 **HTTPS** 上，通常选择应用负载均衡器是个好主意。否则，使用网络负载均衡器是个不错的选择。
- en: 'A detailed comparison of the application and Network Load Balances can be found
    at [https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/):'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 可以在 [https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/)
    找到应用和网络负载均衡的详细对比：
- en: '![Table  Description automatically generated](img/B18403_11_27.png)'
  id: totrans-219
  prefs: []
  type: TYPE_IMG
  zh: '![表格描述自动生成](img/B18403_11_27.png)'
- en: 'Figure 11.27: ELB comparison'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.27：ELB 对比
- en: ELB offers a way to load balance traffic once it enters the resource in our
    Region. The AWS Route 53 DNS service allows geographic load balancing between
    Regions, sometimes called Global Server Load Balancing.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: ELB 提供了一种在流量进入我们区域内的资源后进行负载均衡的方法。AWS Route 53 DNS 服务允许区域之间的地理负载均衡，有时也称为全局服务器负载均衡。
- en: Route 53 DNS service
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Route 53 DNS 服务
- en: We all know what domain name services are – Route 53 is AWS’s DNS service. Route
    53 is a full-service domain registrar where you can purchase and manage domains
    directly from AWS. Regarding network services, DNS allows a way to load balance
    between geographic regions using service domain names in a round-robin fashion
    between Regions.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们都知道域名服务是什么——Route 53 是 AWS 的 DNS 服务。Route 53 是一家全面服务的域名注册商，您可以直接从 AWS 购买和管理域名。关于网络服务，DNS
    允许使用服务域名在区域之间进行轮询负载均衡，以实现地理区域的负载均衡。
- en: 'We need the following items before we can use DNS for load balancing:'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们可以使用DNS进行负载均衡之前，我们需要以下项目：
- en: A load balancer in each of the intended load balance Regions
  id: totrans-225
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在每个预期的负载均衡区域都有一个负载均衡器
- en: A registered domain name. We do not need Route 53 to be the domain registrar
  id: totrans-226
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个已注册的域名。我们不需要Route 53作为域名注册商
- en: Route 53 is the DNS service for the domain
  id: totrans-227
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Route 53是域的DNS服务
- en: We can then use the Route 53 latency-based routing policy with a health check
    in an active-active environment between the two elastic load balancers. In the
    next section, we will focus on the content delivery network built by AWS, called
    CloudFront.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们可以在两个弹性负载均衡器之间的活动-活动环境中使用基于Route 53延迟的路由策略和健康检查。在下一节中，我们将重点关注AWS构建的内容分发网络，称为CloudFront。
- en: CloudFront CDN services
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: CloudFront CDN服务
- en: 'CloudFront is Amazon’s **content delivery network** (**CDN**), which reduces
    the latency of content delivery by physically serving the content closer to the
    customer. The content can be static web page content, videos, applications, APIs,
    or, most recently, Lambda functions. CloudFront edge locations include the existing
    AWS Regions and many other locations around the globe. The high-level operation
    of CloudFront is as follows:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: CloudFront是亚马逊的内容分发网络（**CDN**），通过在物理上更靠近客户的地方提供服务来减少内容交付的延迟。内容可以是静态网页内容、视频、应用程序、API，或者最近，Lambda函数。CloudFront边缘位置包括现有的AWS区域以及全球许多其他位置。CloudFront的高级操作如下：
- en: Users access your website for one or more objects.
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户访问您的网站是为了一个或多个目标。
- en: DNS routes the request to the Amazon CloudFront edge location closest to the
    user’s request.
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: DNS将请求路由到用户请求最近的亚马逊CloudFront边缘位置。
- en: The CloudFront edge location will either service the content via the cache or
    request the object from the origin.
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: CloudFront边缘位置将直接通过缓存提供服务或从源请求对象。
- en: AWS CloudFront and CDN services, in general, are typically handled by application
    developers or DevOps engineers. However, it is always good to be aware of their
    operations.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: AWS CloudFront和CDN服务通常由应用开发者或DevOps工程师处理。然而，了解它们的操作总是好的。
- en: Other AWS network services
  id: totrans-235
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他AWS网络服务
- en: 'There are lots of other AWS network services that we do not have the space
    to cover here. Some of the more popular services are listed in this section:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这里还有许多其他AWS网络服务，我们没有足够的空间来介绍。本节中列出了其中一些更流行的服务：
- en: '**AWS Transit VPC** ([https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/](https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/)):
    This is a way to connect multiple VPCs to a common VPC that serves as a transit
    center. This is a relatively new service, but it can minimize the number of connections
    that you need to set up and manage. This can also serve as a tool when you need
    to share resources between separate AWS accounts.'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Transit VPC** ([https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/](https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/)):
    这是一种将多个VPC连接到充当中转中心的公共VPC的方法。这是一个相对较新的服务，但它可以最小化您需要设置和管理的连接数量。这也可以作为在单独的AWS账户之间共享资源时的工具。'
- en: '**Amazon GuardDuty** ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/)):
    This is a managed threat detection service that continuously monitors for malicious
    or unauthorized behavior to help protect our AWS workloads. It monitors API calls
    or potentially unauthorized deployments.'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Amazon GuardDuty** ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/)):
    这是一个托管威胁检测服务，持续监控恶意或未经授权的行为，以帮助保护我们的AWS工作负载。它监控API调用或可能未经授权的部署。'
- en: '**AWS WAF** ([https://aws.amazon.com/waf/](https://aws.amazon.com/waf/)): This
    is a web application firewall that helps protect web applications from common
    exploits. We can define customized web security rules to allow or block web traffic.'
  id: totrans-239
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS WAF** ([https://aws.amazon.com/waf/](https://aws.amazon.com/waf/)): 这是一个帮助保护Web应用免受常见攻击的Web应用防火墙。我们可以定义自定义的Web安全规则来允许或阻止Web流量。'
- en: '**AWS Shield** ([https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)):
    This is a managed **Distributed Denial of Service** (**DDoS**) protection service
    that safeguards applications running on AWS. The protection service is free for
    all customers at the basic level; the advanced version of AWS Shield is a fee-based
    service.'
  id: totrans-240
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**AWS Shield** ([https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)):
    这是一个托管**分布式拒绝服务**（**DDoS**）保护服务，保护在AWS上运行的应用程序。基本级别的保护服务对所有客户都是免费的；AWS Shield的高级版本是收费服务。'
- en: There are lots of new and exciting AWS networking services constantly being
    announced, such as the ones we have looked at in this section. Not all of them
    are foundational services such as VPC or NAT gateways; however, they all serve
    useful purposes in their respective fields.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 持续不断地有新的令人兴奋的 AWS 网络服务被宣布，例如我们在本节中探讨的那些。并非所有这些服务都是基础服务，例如 VPC 或 NAT 网关；然而，它们在各自的领域中都发挥着有用的作用。
- en: Summary
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we looked at AWS cloud networking services. We reviewed the
    AWS network definitions of Region, Availability Zone, edge locations, and transit
    center. Understanding the overall AWS network gives us a good idea of some of
    the limitations and constraints of the other AWS network services. Throughout
    this chapter, we used the AWS CLI, the Python Boto3 library, and CloudFormation
    to automate some tasks.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们探讨了 AWS 云网络服务。我们回顾了 AWS 网络定义中的区域、可用区、边缘位置和转接中心。了解 AWS 整体网络有助于我们了解其他 AWS
    网络服务的一些限制和约束。在本章中，我们使用了 AWS CLI、Python Boto3 库和 CloudFormation来自动化一些任务。
- en: We covered AWS VPC in depth, with the configuration of the route table and route
    targets. The example on security groups and network ACLs took care of the security
    for our VPC. We also looked at EIPs and NAT gateways for allowing external access.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 我们深入探讨了 AWS VPC，包括路由表和路由目标的配置。关于安全组和网络 ACL 的示例确保了我们的 VPC 的安全性。我们还探讨了 EIP 和 NAT
    网关以允许外部访问。
- en: 'There are two ways to connect AWS VPC to on-premise networks: Direct Connect
    and IPSec VPN. We briefly looked at each and the advantages of using them. Toward
    the end of this chapter, we looked at network scaling services offered by AWS,
    including ELB, Route 53 DNS, and CloudFront.'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 将 AWS VPC 连接到本地网络有两种方式：Direct Connect 和 IPSec VPN。我们简要地讨论了每种方式及其优势。在本章的末尾，我们探讨了
    AWS 提供的网络扩展服务，包括 ELB、Route 53 DNS 和 CloudFront。
- en: In the next chapter, we will look at the networking services offered by another
    public cloud provider, Microsoft Azure.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将探讨另一家公共云提供商 Microsoft Azure 提供的网络服务。
- en: Join our book community
  id: totrans-247
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 加入我们的书籍社区
- en: 'To join our community for this book – where you can share feedback, ask questions
    to the author, and learn about new releases – follow the QR code below:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 要加入我们的书籍社区——在那里您可以分享反馈、向作者提问并了解新版本——请扫描下面的二维码：
- en: '[https://packt.link/networkautomationcommunity](https://packt.link/networkautomationcommunity)'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://packt.link/networkautomationcommunity](https://packt.link/networkautomationcommunity)'
- en: '![](img/QR_Code2903617220506617062.png)'
  id: totrans-250
  prefs: []
  type: TYPE_IMG
  zh: '![](img/QR_Code2903617220506617062.png)'
