- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS Cloud Networking
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud computing is one of the major trends in computing today and has been for
    many years. Public cloud providers have transformed the start-up industry and
    what it means to launch a service from scratch. We no longer need to build our
    own infrastructure; we can pay public cloud providers to rent a portion of their
    resources for our infrastructure needs. Nowadays, walking around any technology
    conferences or meetups, we will be hard-pressed to find someone who has not learned
    about, used, or built services based in the cloud. Cloud computing is here, and
    we had better get used to working with it.
  prefs: []
  type: TYPE_NORMAL
- en: There are several cloud computing service models, roughly divided into **Software-as-a-Service**
    (**SaaS —** [https://en.wikipedia.org/wiki/Software_as_a_service](https://en.wikipedia.org/wiki/Software_as_a_service)),
    **Platform-as-a-Service** (**PaaS —** [https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS)](https://en.wikipedia.org/wiki/Cloud_computing#Platform_as_a_service_(PaaS))),
    and **Infrastructure-as-a-Service** (**IaaS —** [https://en.wikipedia.org/wiki/Infrastructure_as_a_service](https://en.wikipedia.org/wiki/Infrastructure_as_a_service)).
    Each service model offers a different level of abstraction from the user’s perspective.
    For us, networking is part of the IaaS offering and the focus of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: '**Amazon Web Services** (**AWS** — [https://aws.amazon.com/](https://aws.amazon.com/))
    was the first company to offer IaaS public cloud services and was the clear leader
    in the space by market share in 2022 ([https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/](https://www.statista.com/chart/18819/worldwide-market-share-of-leading-cloud-infrastructure-service-providers/)).
    If we define the term **Software-Defined Networking** (**SDN**) as a group of
    software services working together to create network constructs – IP addresses,
    access lists, load balancers, and **Network Address Translation** (**NAT**) –
    we can make the argument that AWS is the world’s largest implementer of SDN. They
    utilize the massive scale of their global network, data centers, and servers to
    offer an amazing array of networking services.'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you are interested in learning about Amazon’s scale and networking, I would
    highly recommend taking a look at James Hamilton’s AWS re:Invent 2014 talk: [https://www.youtube.com/watch?v=JIQETrFC_SQ](https://www.youtube.com/watch?v=JIQETrFC_SQ).
    It is a rare insider’s view of the scale and innovation at AWS.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the networking services offered by the AWS
    cloud services and how we can use Python to work with them:'
  prefs: []
  type: TYPE_NORMAL
- en: AWS setup and networking overview
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual private cloud
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Direct Connect and VPN
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Networking scaling services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Other AWS network services
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let’s begin by looking at how to set up AWS.
  prefs: []
  type: TYPE_NORMAL
- en: AWS setup
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you do not already have an AWS account and wish to follow along with these
    examples, please log on to [https://aws.amazon.com/](https://aws.amazon.com/)
    and sign up. The process is pretty straightforward; you will need a credit card
    and some way to verify your identity, such as a mobile phone that can accept text
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: A good thing about AWS when you are just getting started is that they offer
    many services in a free tier ([https://aws.amazon.com/free/](https://aws.amazon.com/free/)),
    where you can use the services for free up to a certain level. For example, we
    will use the **Elastic Compute Cloud** (**EC2**) service in this chapter; the
    free tier for EC2 is the first 750 hours per month for its t2.micro or t3.micro
    instances for the first 12 months.
  prefs: []
  type: TYPE_NORMAL
- en: 'I recommend always starting with the free tier and gradually increasing your
    tier when the need arises. Please check the AWS site for the latest offerings:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B18403_11_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.1: AWS free tier'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have an account, you can sign in via the AWS console ([https://console.aws.amazon.com/](https://console.aws.amazon.com/))
    and take a look at the different services offered by AWS.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS console layout is constantly changing. By the time you read this chapter,
    your screen might look different than what is shown. However, the AWS networking
    concepts will not change. We should always pay attention to the concept, and we
    should be ok despite any layout changes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The console is where we can configure all the services and look at our monthly
    bills:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_11_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.2: The AWS console'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have set up our account, let’s take a look at using the AWS CLI
    tool as well as the Python SDK to manage our AWS resources.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS CLI and Python SDK
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Besides the console, we can also manage AWS services via the **command line
    interface** (**CLI**) and various SDKs. **The AWS CLI is a Python package** **that
    can be installed via PIP** ([https://docs.aws.amazon.com/cli/latest/userguide/installing.html](https://docs.aws.amazon.com/cli/latest/userguide/installing.html)).
    Let’s install it on our Ubuntu host:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the AWS CLI is installed, for easier and more secure access, we will create
    a user and configure the AWS CLI with the user credentials. Let’s go back to the
    AWS console and select **Identity and Access Management (IAM)** for user and access
    management:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18403_11_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.3: AWS IAM'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can choose **Users** on the left panel to create a user:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.4: AWS IAM users'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **Programmatic access** and assign the user to the default administrator
    group:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_11_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.5: AWS IAM add user'
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step will add the user to the group; we can add the user to the administrator
    group for now. We do not need to add any tag for this user. The last step will
    show an **Access key ID** and a **Secret access key**. Copy them into a text file
    and keep it in a safe place:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, Teams  Description automatically generated](img/B18403_11_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.6: AWS IAM user security credentials'
  prefs: []
  type: TYPE_NORMAL
- en: 'We will complete the AWS CLI authentication credential setup via `aws configure`
    in the terminal. We will go over AWS Regions in the upcoming section. We will
    use `us-east-1` for now since that is the Region with the most services. We can
    always come back to the settings later to change the Region:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'We will also install the AWS Python SDK, Boto3 ([https://boto3.readthedocs.io/en/latest/](https://boto3.readthedocs.io/en/latest/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: We are now ready to move on to the subsequent sections, starting with an introduction
    to AWS cloud networking services.
  prefs: []
  type: TYPE_NORMAL
- en: AWS network overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When we discuss AWS services, we need to start at the top, with Regions and
    **Availability** **Zones** (**AZs**). They have big implications for all of our
    services. At the time of writing this book, AWS has listed 27 geographic Regions
    and 87 **AZs** worldwide. In the words of AWS Global Cloud Infrastructure ([https://aws.amazon.com/about-aws/global-infrastructure/](https://aws.amazon.com/about-aws/global-infrastructure/)):'
  prefs: []
  type: TYPE_NORMAL
- en: “The AWS Cloud infrastructure is built around Regions and Availability Zones
    (AZs). AWS Regions provide multiple, physically separated and isolated Availability
    Zones which are connected with low latency, high throughput, and highly redundant
    networking.”
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: For a nice visualization of AWS Regions that can be filtered by AZ, Region,
    and so on, please check out [https://aws.amazon.com/about-aws/global-infrastructure/regions_az/](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Some of the services AWS offers are global (such as the IAM user we created),
    but most of the services are Region-based. The Regions are geographic footprints,
    such as US-East, US-West, EU-London, Asia-Pacific-Tokyo, etc. What this means
    for us is that we should build our infrastructure in a region that is closest
    to our intended users. This will reduce the latency of the service for our customers.
    If our users are on the **East** **Coast** of the United States, we should pick
    **US East (N. Virginia)** or **US East (Ohio)** as our Region if the service is
    Regional-based:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.7: AWS Regions'
  prefs: []
  type: TYPE_NORMAL
- en: Besides user latency, AWS Regions also have both service and cost implications.
    Users who are new to AWS might find it surprising that not all services are offered
    in all Regions. The services we will look at in this chapter are offered in most
    Regions, but some newer services might only be offered in selected Regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the example that follows, we can see that **Alexa for Business** and **Amazon
    Chime** are only offered in the Northern Virginia Region in the United States:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Text  Description automatically generated with medium confidence](img/B18403_11_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.8: AWS services per Region'
  prefs: []
  type: TYPE_NORMAL
- en: 'Besides service availability, the cost of an offering might be slightly different
    between Regions. For example, for the EC2 service we will look at in this chapter,
    the cost for an **a1.medium** instance is **USD 0.0255 per hour** in **US East
    (N. Virginia)**; the same instance costs 14% more, at **USD 0.0291 per hour**,
    in **EU (Frankfurt)**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_11_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.9: AWS EC2 US East price'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_11_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.10: AWS EC2 EU price'
  prefs: []
  type: TYPE_NORMAL
- en: When in doubt, choose US East (N. Virginia); it is the oldest Region and most
    likely the cheapest, with the most service offerings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Not all Regions are available to all users. For example, **GovCloud** and the
    **China** Region are not available to users in the United States by default. You
    can list the Regions available to you via `aws ec2 describe-regions`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: As stated by Amazon, all Regions are completely independent of one another.
    Therefore, most resources are not replicated across Regions. This means that if
    we have multiple Regions offering the same service, say **US-East** and **US-West**,
    and need the services to back each other up, we will need to replicate the necessary
    resources ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can choose our desired Region in the AWS console, in the top-right corner,
    with the drop-down menu:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.11: AWS Regions'
  prefs: []
  type: TYPE_NORMAL
- en: We can only view the services available within the Region on the portal. For
    example, if we have EC2 instances in the US East Region and select the US West
    Region, none of our EC2 instances will show up. I have made this mistake several
    times and wondered where all of my instances went!
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many AZs within each Region. AZs are labeled using a combination
    of the Region and an alphabetical letter, such as `us-east-1a`, `us-east-1b`,
    and so on. Each Region has multiple AZs – typically three or more. Each AZ has
    its isolated infrastructure with a redundant power supply, intra-data center networking,
    and facilities. All AZs in a Region are connected through low-latency fiber routes
    that are typically within 100 km of each other within the same Region:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_11_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.12: AWS Regions and AZs'
  prefs: []
  type: TYPE_NORMAL
- en: Unlike Regions, many of the resources we build in AWS can be copied across AZs
    automatically. For example, we can configure our managed relational database (Amazon
    RDS) to be replicated across AZs. The concept of AZs is very important when it
    comes to service redundancy, and its constraints are important to us for the network
    services we will build.
  prefs: []
  type: TYPE_NORMAL
- en: AWS independently maps AZs to identifiers for each account. For example, my
    AZ, `us-east-1a`, might not be the same as `us-east-1a` for another account, even
    though they are both labeled as `us-east-1a`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can check the AZs in a Region in the AWS CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Why do we care about Regions and AZs so much? As we will see in the coming few
    sections, AWS networking services are usually bound by the Region and AZ. A **virtual
    private cloud** (**VPC**), for example, must reside entirely in one Region, and
    each subnet needs to reside entirely in one AZ. On the other hand, NAT gateways
    are AZ-bound, so we will need to create one per AZ if we need redundancy.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will go over both services in more detail, but their use cases are offered
    here as examples of how Regions and AZs are the basis of the AWS network services
    offering:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_11_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.13: VPCs and AZs per Region'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS edge locations** are part of the **AWS CloudFront** content delivery
    network in 90+ cities across 48 countries as of May 2022 ([https://aws.amazon.com/cloudfront/features/](https://aws.amazon.com/cloudfront/features/)).
    These edge locations are used to distribute content with low latency to customers.
    The edge nodes have a smaller footprint than the full data center Amazon builds
    for the Region and AZs. Sometimes, people mistake the edge locations’ point-of-presence
    for full AWS Regions. If the footprint is listed as an edge location, AWS services
    such as EC2 or S3 will not be offered. We will revisit edge locations in the **AWS
    CloudFront CDN services** section.'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS transit centers** are one of the least documented aspects of AWS networks.
    They were mentioned in James Hamilton’s 2014 AWS re:Invent keynote ([www.youtube.com/watch?v=JIQETrFC_SQ](http://www.youtube.com/watch?v=JIQETrFC_SQ))
    as the aggregation points for different AZs in the Region. To be fair, we do not
    know if the transit center still exists and functions the same way after all these
    years. However, it is fair to make an educated guess about the placement of the
    transit center and its correlation with the AWS Direct Connect service, which
    we will look at later in this chapter.'
  prefs: []
  type: TYPE_NORMAL
- en: James Hamilton, a VP and distinguished engineer from AWS, is one of the most
    influential technologists at AWS. If there is anybody whom I would consider authoritative
    when it comes to AWS networking, it would be him. You can read more about his
    ideas on his blog, Perspectives, at [https://perspectives.mvdirona.com/](https://perspectives.mvdirona.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'It is impossible to cover all of the services related to AWS in one chapter.
    There are some relevant services not directly related to networking that we do
    not have the space to cover, but we should be familiar with:'
  prefs: []
  type: TYPE_NORMAL
- en: The IAM service, [https://aws.amazon.com/iam/](https://aws.amazon.com/iam/),
    is the service that enables us to manage access to AWS services and resources
    securely.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon Resource Names** (**ARNs**), [https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html),
    uniquely identify AWS resources across all of AWS. These resource names are important
    when we need to identify a service, such as DynamoDB and API Gateway, that needs
    access to our VPC resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Amazon **Elastic Compute Cloud** (**EC2**), [https://aws.amazon.com/ec2/](https://aws.amazon.com/ec2/),
    is the service that enables us to obtain and provision compute capacities, such
    as Linux and Windows instances, via AWS interfaces. We will use EC2 instances
    throughout this chapter in our examples.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For the sake of learning, we will exclude the AWS GovCloud (US) and China Regions,
    neither of which uses the AWS global infrastructure, and each has its own unique
    features and limitations.
  prefs: []
  type: TYPE_NORMAL
- en: 'This was a relatively long introduction to AWS network services, but an important
    one. These concepts and terms will be referred to in the rest of the chapters.
    In the upcoming section, we will look at the most important concept (in my opinion)
    in AWS networking: VPC.'
  prefs: []
  type: TYPE_NORMAL
- en: Virtual Private Cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Amazon VPC** ([https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html](https://docs.aws.amazon.com/vpc/latest/userguide/what-is-amazon-vpc.html))
    enables customers to launch AWS resources in a virtual network dedicated to the
    customer’s account. It is truly a customizable network that allows you to define
    your IP address range, add and delete subnets, create routes, add VPN gateways,
    associate security policies, connect EC2 instances to your own data center, and
    much more.'
  prefs: []
  type: TYPE_NORMAL
- en: In the early days, when VPC was unavailable, all EC2 instances in an AZ were
    on a single, flat network that was shared among all customers. How comfortable
    would the customer be with putting their information in the cloud? Not very, I’d
    imagine. Between the launch of EC2 in 2007 and the launch of VPC in 2009, VPC
    functions were some of the most requested features of AWS.
  prefs: []
  type: TYPE_NORMAL
- en: The packets leaving your EC2 host in a VPC are intercepted by the Hypervisor.
    The Hypervisor will check the packets against a mapping service that understands
    your VPC construct. Then, the packets are encapsulated with the real AWS servers’
    source and destination addresses. The encapsulation and mapping service enables
    the flexibility of VPC but also some of the limitations (multicast, sniffing)
    of VPC. This is, after all, a virtual network.
  prefs: []
  type: TYPE_NORMAL
- en: Since December 2013, all EC2 instances are VPC-only; you can no longer create
    an EC2 instance that is non-VPC (EC2-Classic), nor would you want to. If we use
    a launch wizard to create our EC2 instance, it will automatically be put into
    a default VPC with a virtual internet gateway for public access. In my opinion,
    only the most basic use cases should use the default VPC. In most cases, we should
    define our own non-default, customized VPC.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create the following VPC using the AWS console in **us-east-1**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_11_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.14: Our ﬁrst VPC in US-East-1'
  prefs: []
  type: TYPE_NORMAL
- en: If you recall, VPC is AWS Region-bound, and the subnets are AZ-based. Our first
    VPC will be based in `us-east-1`; the three subnets will be allocated to two different
    AZs in `us-east-1a` and `us-east-1b`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the AWS console to create the VPC and subnets is pretty straightforward,
    and AWS provides several good tutorials online. I have listed the steps with the
    associated locations of each on the VPC dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.15: Steps for creating the VPC, subnet, and other features'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first two steps are point-and-click processes that most network engineers
    can work through, even without prior experience. By default, the VPC only contains
    the local route, `10.0.0.0/16`. Now, we will create an internet gateway and associate
    it with the VPC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18403_11_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.16: AWS internet gateway-to-VPC assignment'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can then create a custom route table with a default route pointing to the
    internet gateway, allowing internet access. We will associate this route table
    with our subnet in `us-east-1a`, `10.0.0.0/24`, thus allowing the VPC to have
    internet access:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.17: Route table'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s use the Boto3 Python SDK to see what we have created; I used `mastering_python_networking_demo`
    as the tag for the VPC, which we can use as the filter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This script will allow us to query the Region for the VPC we created programmatically:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The Boto3 VPC API documentation can be found at [https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc](https://boto3.readthedocs.io/en/latest/reference/services/ec2.html#vpc).
  prefs: []
  type: TYPE_NORMAL
- en: If we created EC2 instances and put them in different subnets as is, the hosts
    would be able to reach each other across subnets. You may be wondering how the
    subnets can reach one another within the VPC since we only created an internet
    gateway in subnet 1a. In a physical network, the network needs to connect to a
    router to reach beyond its own local network.
  prefs: []
  type: TYPE_NORMAL
- en: It is not so different in VPC, except it is an **implicit router** with a default
    routing table of the local network, which in our example is `10.0.0.0/16`. This
    implicit router was created when we created our VPC. Any subnet that is not associated
    with a custom routing table is associated with the main table.
  prefs: []
  type: TYPE_NORMAL
- en: Route tables and route targets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Routing is one of the most important topics in network engineering. It is worth
    looking at how it is done in AWS VPC more closely. We’ve already seen that we
    had an implicit router and the main routing table when we created the VPC. In
    the last example, we created an internet gateway, a custom routing table with
    a default route pointing to the internet gateway using the route target, and we
    associated the custom routing table with a subnet.
  prefs: []
  type: TYPE_NORMAL
- en: So far, only the concept of the route target is where VPC is a bit different
    than traditional networking. We can roughly equate the route target with the next
    hop in traditional routing.
  prefs: []
  type: TYPE_NORMAL
- en: 'In summary:'
  prefs: []
  type: TYPE_NORMAL
- en: Each VPC has an implicit router
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each VPC has the main routing table with the local route populated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can create custom-routing tables
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each subnet can follow a custom-routing table or the default main routing table
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The route table route target can be an internet gateway, NAT gateway, VPC peers,
    and so on
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We can use Boto3 to look at the custom route tables and associations with the
    subnets in `Chapter11_2_query_route_tables.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The main routing table is implicit and not returned by the API. Since we only
    have one custom route table, this is what we will see:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'We already created the first public subnet. We will create two more private
    subnets, `us-east-1b` and `us-east-1c`, following the same steps. The result will
    be three subnets: a `10.0.0.0/24` public subnet in `us-east-1a`, and `10.0.1.0/24`
    and `10.0.2.0/24` private subnets in `us-east-1b` and `us-east-1c`, respectively.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We now have a working VPC with three subnets: one public and two private. So
    far, we have used the AWS CLI and the Boto3 library to interact with AWS VPC.
    Let’s take a look at another automation tool from AWS, **CloudFormation**.'
  prefs: []
  type: TYPE_NORMAL
- en: Automation with CloudFormation
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AWS CloudFormation ([https://aws.amazon.com/cloudformation/](https://aws.amazon.com/cloudformation/))
    is one way in which we can use a text file to describe and launch the resource
    that we need. We can use CloudFormation to provision another VPC in the **us-west-1**
    Region:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_11_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.18: VPC for us-west-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'The CloudFormation template can be in YAML or JSON; we will use YAML for our
    first template for provisioning, `Chapter10_3_cloud_formation.yml`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute the template via the AWS CLI. Notice that we specify the `us-west-1`
    region in our execution:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify the status via the AWS CLI:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'The last CloudFormation template created a VPC without any subnet. Let’s delete
    that VPC and use the following template, `Chapter11_4_cloud_formation_full.yml`,
    to create both the VPC and the subnet. Notice that we will not have the VPC-ID
    before VPC creation, so we will use a special variable to reference the VPC-ID
    in the subnet creation. This same technique can be used for other resources, such
    as the routing table and internet gateway:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute and verify the creation of the resources as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'We can verify the VPC and subnet information from the AWS console. Remember
    to pick the right Region from the drop-down menu in the top right-hand corner:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.19: VPC in us-west-1'
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also take a look at the subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.20: Subnet in us-west-1'
  prefs: []
  type: TYPE_NORMAL
- en: We now have two VPCs on the two coasts of the United States. They are currently
    behaving like two islands, each by themselves. This may or may not be your desired
    state of operation. If we want the two VPCs to be connected, we can use VPC peering
    ([https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html](https://docs.aws.amazon.com/AmazonVPC/latest/PeeringGuide/vpc-peering-basics.html))
    to allow direct communication.
  prefs: []
  type: TYPE_NORMAL
- en: There are a few VPC peering limitations, such as no overlapping IPv4 or IPv6
    CIDR blocks being allowed. There are also additional limitations for inter-region
    VPC peering. Make sure you look over the documentation.
  prefs: []
  type: TYPE_NORMAL
- en: VPC peering is not limited to the same account. You can connect VPCs across
    different accounts, as long as the request was accepted and the other aspects
    (security, routing, and DNS name) are taken care of.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will take a look at VPC security groups and network
    **access control lists** (**ACLs**).
  prefs: []
  type: TYPE_NORMAL
- en: Security Groups and Network ACLs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'AWS **Security Groups** and **Network ACLs** can be found under the **Security**
    section of your VPC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.21: VPC security'
  prefs: []
  type: TYPE_NORMAL
- en: A security group is a stateful virtual firewall that controls inbound and outbound
    access to resources. Most of the time, we use a security group to limit public
    access to our EC2 instance. The current limitation is 500 security groups in each
    VPC. Each security group can contain up to 50 inbound and 50 outbound rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can use the following sample script, `Chapter11_5_security_group.py`, to
    create a security group and two simple ingress rules:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'We can execute the script and receive confirmation of the creation of the security
    group, which can be associated with other AWS resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Network **ACLs** are an additional layer of security that is stateless. Each
    subnet in the VPC is associated with a network ACL. Since an ACL is stateless,
    you will need to specify both inbound and outbound rules.
  prefs: []
  type: TYPE_NORMAL
- en: 'The important differences between security groups and ACLs are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Security groups operate at the network interface level, whereas ACLs operate
    at the subnet level.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For a security group, we can only specify `allow` rules and not `deny` rules,
    whereas ACLs support both `allow` and `deny` rules.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A security group is stateful, so return traffic is automatically allowed; return
    traffic in ACLs must be specifically allowed.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s look at one of the coolest features of AWS networking: Elastic IP. When
    I initially learned about Elastic IPs, I was blown away by their ability to assign
    and reassign IP addresses dynamically.'
  prefs: []
  type: TYPE_NORMAL
- en: Elastic IP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: An **Elastic IP** (**EIP**) is a way to use a public IPv4 address that’s reachable
    from the internet.
  prefs: []
  type: TYPE_NORMAL
- en: IPv6 is not currently supported in EIP as of late 2022.
  prefs: []
  type: TYPE_NORMAL
- en: 'An EIP can be dynamically assigned to an EC2 instance, network interface, or
    other resources. A few characteristics of an EIP are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: An EIP is associated with the account and is region-specific. For example, an
    EIP in `us-east-1` can only be associated with resources in `us-east-1`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can disassociate an EIP from a resource and re-associate it with a different
    resource. This flexibility can sometimes be used to ensure high availability.
    For example, you can migrate from a smaller EC2 instance to a larger EC2 instance
    by reassigning the same IP address from the small EC2 instance to the larger one.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is a small hourly charge associated with EIPs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can request an EIP from the portal. After the assignment, you can associate
    it with the desired resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B18403_11_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.22: Elastic IPs'
  prefs: []
  type: TYPE_NORMAL
- en: Unfortunately, EIPs are limited to five per Region to discourage waste ([https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html](https://docs.aws.amazon.com/vpc/latest/userguide/amazon-vpc-limits.html)).
    However, this number can be increased via a ticket to AWS Support if needed.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will look at how we can use NAT gateways to allow
    communication for private subnets with the internet.
  prefs: []
  type: TYPE_NORMAL
- en: NAT gateways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To allow the hosts in our EC2 public subnet to be accessed from the internet,
    we can allocate an EIP and associate it with the network interface of the EC2
    host. However, at the time of writing, there is a limit of five Elastic IPs per
    EC2-VPC ([https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips](https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_Appendix_Limits.html#vpc-limits-eips)).
    Sometimes, it would be nice to allow the host in a private subnet outbound access
    when needed, without creating a permanent one-to-one mapping between the EIP and
    the EC2 host.
  prefs: []
  type: TYPE_NORMAL
- en: 'A **NAT gateway** can help by allowing the hosts in the private subnet temporary
    outbound access by performing NAT. This operation is similar to **port address
    translation** (**PAT**), which we normally perform on the corporate firewall.
    To use a NAT gateway, we can perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a NAT gateway in a subnet with access to the internet gateway via the
    AWS CLI, Boto3 library, or AWS console. The NAT gateway will need to be assigned
    an EIP.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Point the default route in the private subnet to the NAT gateway.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The NAT gateway will follow the default route to the internet gateway for external
    access.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'This operation can be illustrated in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_11_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.23: NAT gateway operations'
  prefs: []
  type: TYPE_NORMAL
- en: 'One of the most common questions about NAT gateways typically involves which
    subnet the NAT gateway should reside in. The rule of thumb is to remember that
    the NAT gateway needs public access. Therefore, it should be created in the subnet
    with public internet access with an available EIP assigned to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated](img/B18403_11_24.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.24: NAT gateway creation'
  prefs: []
  type: TYPE_NORMAL
- en: Please remember to remove any of the AWS services you are not using to avoid
    charges.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will look at how to connect our shiny virtual network
    in AWS to our physical network.
  prefs: []
  type: TYPE_NORMAL
- en: Direct Connect and VPN
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Up to this point, our VPC has been a self-contained network that resides in
    the AWS network. It is flexible and functional, but to access the resources inside
    the VPC, we will need to access them with their internet-facing services, such
    as SSH and HTTPS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we will look at the ways AWS allows us to connect to the VPC
    from our private network: an IPSec VPN gateway and Direct Connect.'
  prefs: []
  type: TYPE_NORMAL
- en: VPN gateways
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first way to connect our on-premises network to VPC is with traditional
    IPSec VPN connections. We will need a publicly accessible device to establish
    VPN connections to AWS’s VPN devices.
  prefs: []
  type: TYPE_NORMAL
- en: The customer gateway needs to support route-based IPSec VPNs, where the VPN
    connection is treated as a connection that a routing protocol and normal user
    traffic can traverse. Currently, AWS recommends using **Border Gateway Protocol**
    (**BGP**) to exchange routes.
  prefs: []
  type: TYPE_NORMAL
- en: 'On the VPC side, we can follow a similar routing table where we can route a
    particular subnet toward the **virtual private gateway** (**VPG**) target:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Diagram  Description automatically generated](img/B18403_11_25.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.25: VPC VPN connection'
  prefs: []
  type: TYPE_NORMAL
- en: Besides an IPSec VPN, we can also use a dedicated circuit to connect, which
    is termed **Direct Connect**.
  prefs: []
  type: TYPE_NORMAL
- en: Direct Connect
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The IPSec VPN connection we looked at is an easy way to provide connectivity
    for on-premises equipment to AWS cloud resources. However, it suffers the same
    faults that IPSec over the internet always does: it is unreliable, and we have
    very little control over its reliability. There is very little performance monitoring
    and no **service-level agreement** (**SLA**) until the connection reaches a part
    of the internet that we can control.'
  prefs: []
  type: TYPE_NORMAL
- en: For all of these reasons, any production-level, mission-critical traffic is
    more likely to traverse through the second option Amazon provides, that is, AWS
    Direct Connect. AWS Direct Connect lets customers connect their data center and
    colocation to their AWS VPC with a dedicated virtual circuit.
  prefs: []
  type: TYPE_NORMAL
- en: The somewhat difficult part of this operation is usually bringing our network
    to where we can connect with AWS physically, typically in a carrier hotel.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can find a list of the AWS Direct Connect locations here: [https://aws.amazon.com/directconnect/details/](https://aws.amazon.com/directconnect/details/).
    The Direct Connect link is just a fiber patch connection that you can order from
    the particular carrier hotel to patch the network to a network port and configure
    the dot1q trunk’s connectivity.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are also increasingly more connectivity options for Direct Connect via
    a third-party carrier with **Multi-Protocol Label Switching** (**MPLS**) circuits
    and aggregated links. One of the most affordable options that I found and use
    is Equinix Cloud Exchange Fabric ([https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/](https://www.equinix.com/services/interconnection-connectivity/cloud-exchange/)).
    By using Equinix Cloud Exchange Fabric, we can leverage the same circuit and connect
    to different cloud providers at a fraction of the cost of dedicated circuits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B18403_11_26.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.26: Equinix Cloud Exchange Fabric'
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming section, we will look at some of the network scaling services
    AWS offers.
  prefs: []
  type: TYPE_NORMAL
- en: Network scaling services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Many of the network services AWS offers do not have direct network implications,
    such as DNS and content distribution networks. They are relevant in our discussion
    due to their close relationship with the network and the application’s performance.
  prefs: []
  type: TYPE_NORMAL
- en: Elastic Load Balancing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Elastic Load Balancing** (**ELB**) allows incoming traffic from the internet
    to be automatically distributed across multiple EC2 instances. Like load balancers
    in the physical world, this allows us to have better redundancy and fault tolerance
    while reducing the per-server load. ELB comes in two flavors: application and
    network load balancing.'
  prefs: []
  type: TYPE_NORMAL
- en: The network load balancer handles web traffic via **HTTP** and **HTTPS**; the
    application load balancer operates on a TCP level. If your application runs on
    **HTTP** or **HTTPS**, it is generally a good idea to go with the Application
    Load Balancer. Otherwise, using the Network Load Balancer is a good bet.
  prefs: []
  type: TYPE_NORMAL
- en: 'A detailed comparison of the application and Network Load Balances can be found
    at [https://aws.amazon.com/elasticloadbalancing/details/](https://aws.amazon.com/elasticloadbalancing/details/):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table  Description automatically generated](img/B18403_11_27.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 11.27: ELB comparison'
  prefs: []
  type: TYPE_NORMAL
- en: ELB offers a way to load balance traffic once it enters the resource in our
    Region. The AWS Route 53 DNS service allows geographic load balancing between
    Regions, sometimes called Global Server Load Balancing.
  prefs: []
  type: TYPE_NORMAL
- en: Route 53 DNS service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We all know what domain name services are – Route 53 is AWS’s DNS service. Route
    53 is a full-service domain registrar where you can purchase and manage domains
    directly from AWS. Regarding network services, DNS allows a way to load balance
    between geographic regions using service domain names in a round-robin fashion
    between Regions.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need the following items before we can use DNS for load balancing:'
  prefs: []
  type: TYPE_NORMAL
- en: A load balancer in each of the intended load balance Regions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A registered domain name. We do not need Route 53 to be the domain registrar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Route 53 is the DNS service for the domain
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We can then use the Route 53 latency-based routing policy with a health check
    in an active-active environment between the two elastic load balancers. In the
    next section, we will focus on the content delivery network built by AWS, called
    CloudFront.
  prefs: []
  type: TYPE_NORMAL
- en: CloudFront CDN services
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'CloudFront is Amazon’s **content delivery network** (**CDN**), which reduces
    the latency of content delivery by physically serving the content closer to the
    customer. The content can be static web page content, videos, applications, APIs,
    or, most recently, Lambda functions. CloudFront edge locations include the existing
    AWS Regions and many other locations around the globe. The high-level operation
    of CloudFront is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Users access your website for one or more objects.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: DNS routes the request to the Amazon CloudFront edge location closest to the
    user’s request.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The CloudFront edge location will either service the content via the cache or
    request the object from the origin.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: AWS CloudFront and CDN services, in general, are typically handled by application
    developers or DevOps engineers. However, it is always good to be aware of their
    operations.
  prefs: []
  type: TYPE_NORMAL
- en: Other AWS network services
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are lots of other AWS network services that we do not have the space
    to cover here. Some of the more popular services are listed in this section:'
  prefs: []
  type: TYPE_NORMAL
- en: '**AWS Transit VPC** ([https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/](https://aws.amazon.com/blogs/aws/aws-solution-transit-vpc/)):
    This is a way to connect multiple VPCs to a common VPC that serves as a transit
    center. This is a relatively new service, but it can minimize the number of connections
    that you need to set up and manage. This can also serve as a tool when you need
    to share resources between separate AWS accounts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Amazon GuardDuty** ([https://aws.amazon.com/guardduty/](https://aws.amazon.com/guardduty/)):
    This is a managed threat detection service that continuously monitors for malicious
    or unauthorized behavior to help protect our AWS workloads. It monitors API calls
    or potentially unauthorized deployments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS WAF** ([https://aws.amazon.com/waf/](https://aws.amazon.com/waf/)): This
    is a web application firewall that helps protect web applications from common
    exploits. We can define customized web security rules to allow or block web traffic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**AWS Shield** ([https://aws.amazon.com/shield/](https://aws.amazon.com/shield/)):
    This is a managed **Distributed Denial of Service** (**DDoS**) protection service
    that safeguards applications running on AWS. The protection service is free for
    all customers at the basic level; the advanced version of AWS Shield is a fee-based
    service.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There are lots of new and exciting AWS networking services constantly being
    announced, such as the ones we have looked at in this section. Not all of them
    are foundational services such as VPC or NAT gateways; however, they all serve
    useful purposes in their respective fields.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at AWS cloud networking services. We reviewed the
    AWS network definitions of Region, Availability Zone, edge locations, and transit
    center. Understanding the overall AWS network gives us a good idea of some of
    the limitations and constraints of the other AWS network services. Throughout
    this chapter, we used the AWS CLI, the Python Boto3 library, and CloudFormation
    to automate some tasks.
  prefs: []
  type: TYPE_NORMAL
- en: We covered AWS VPC in depth, with the configuration of the route table and route
    targets. The example on security groups and network ACLs took care of the security
    for our VPC. We also looked at EIPs and NAT gateways for allowing external access.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are two ways to connect AWS VPC to on-premise networks: Direct Connect
    and IPSec VPN. We briefly looked at each and the advantages of using them. Toward
    the end of this chapter, we looked at network scaling services offered by AWS,
    including ELB, Route 53 DNS, and CloudFront.'
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at the networking services offered by another
    public cloud provider, Microsoft Azure.
  prefs: []
  type: TYPE_NORMAL
- en: Join our book community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join our community for this book – where you can share feedback, ask questions
    to the author, and learn about new releases – follow the QR code below:'
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/networkautomationcommunity](https://packt.link/networkautomationcommunity)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2903617220506617062.png)'
  prefs: []
  type: TYPE_IMG
