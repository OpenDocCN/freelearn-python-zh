["```py\nfrom util.auth_session import secret_key\nfrom jose import jwt\n@router.post(\"/login/authenticate\")\nasync def authenticate(username:str, password: str, \n   response: Response, engine=Depends(create_db_engine)):\n    repo:LoginRepository = LoginRepository(engine)\n    login = await repo.get_login_username(username, \n                       password)\n    if login == None:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN, \n                detail=\"Invalid authentication\"\n            )\n    token = jwt.encode({\"sub\": username}, secret_key)\n    response.set_cookie(\"session\", token)\n    return {\"username\": username}\n```", "```py\nopenssl rand -hex 32\n```", "```py\nfrom fastapi.security import APIKeyCookie\nfrom jose import jwt\ncookie_sec = APIKeyCookie(name=\"session\")\nsecret_key = \"pdCFmblRt4HWKNpWkl52Jnq3emH3zzg4b80f+4AFVC8=\"\nasync def get_current_user(session: str = \n   Depends(cookie_sec), engine=Depends(create_db_engine)):\n    try:\n        payload = jwt.decode(session, secret_key)\n        repo:LoginRepository = LoginRepository(engine)\n        login = await repo.validate_login(\n                    payload[\"sub\"])\n        if login == None:\n            raise HTTPException(\n                status_code=status.HTTP_403_FORBIDDEN, \n                detail=\"Invalid authentication\"\n            )\n        else:\n            return login\n    except Exception:\n        raise HTTPException(\n            status_code=status.HTTP_403_FORBIDDEN, \n            detail=\"Invalid authentication\"\n        )\n```", "```py\nfrom util.auth_session import get_current_user\n@router.post(\"/restaurant/add\")\nasync def add_restaurant(req:RestaurantReq, \n         engine=Depends(create_db_engine), \n         user: str = Depends(get_current_user)):\n    restaurant_dict = req.dict(exclude_unset=True) \n    restaurant_json = dumps(restaurant_dict, \n              default=json_datetime_serializer)\n    repo:RestaurantRepository = \n             RestaurantRepository(engine)\n    result = await repo.insert_restaurant(\n               loads(restaurant_json))\n    if result == True: \n        return req \n    else: \n        return JSONResponse(content={\"message\": \n         \"insert login unsuccessful\"}, status_code=500)\n```", "```py\nfrom starlette.middleware.sessions import SessionMiddleware\napp = FastAPI(middleware=[\n        Middleware(SessionMiddleware, \n        secret_key=\n            '7UzGQS7woBazLUtVQJG39ywOP7J7lkPkB0UmDhMgBR8=', \n        session_cookie=\"session_vars\")])\n```", "```py\n@router.get(\"/restaurant/list/all\")\nasync def list_restaurants(request: Request, \n       engine=Depends(create_db_engine), \n       user: str = Depends(get_current_user)):\n    repo:RestaurantRepository = \n             RestaurantRepository(engine)\n    result = await repo.get_all_restaurant()\n    resto_names = [resto.name for resto in result]\n    request.session['resto_names'] = resto_names\n    return result\n@router.get(\"/restaurant/list/names\")\nasync def list_restaurant_names(request: Request, \n           user: str = Depends(get_current_user)):\n    resto_names = request.session['resto_names']\n    return resto_names\n```", "```py\n@router.get(\"/logout\")\nasync def logout(response: Response, \n            user: str = Depends(get_current_user)):\n    response.delete_cookie(\"session\")\n    response.delete_cookie(\"session_vars\")\n    return {\"ok\": True}\n```", "```py\nfrom repository.login import LoginRepository\nfrom repository.session import DbSessionRepository\nfrom starlette.middleware.base import BaseHTTPMiddleware\nfrom datetime import date, datetime\nimport re\nfrom odmantic import AIOEngine\nfrom motor.motor_asyncio import AsyncIOMotorClient\nclass SessionDbMiddleware(BaseHTTPMiddleware):\n    def __init__(self, app, sess_key: str, \n                    sess_name:str, expiry:str):\n        super().__init__(app)\n        self.sess_key = sess_key\n        self.sess_name = sess_name \n        self.expiry = expiry\n        self.client_od = \n         AsyncIOMotorClient(f\"mongodb://localhost:27017/\")\n        self.engine = \n         AIOEngine(motor_client=self.client_od, \n            database=\"orrs\")\n\n    async def dispatch(self, request: Request, call_next):\n        try:\n            if re.search(r'\\bauthenticate\\b', \n                    request.url.path):\n                credentials = request.query_params\n                username = credentials['username']\n                password = credentials['password']\n                repo_login:LoginRepository = \n                      LoginRepository(self.engine)\n                repo_session:DbSessionRepository = \n                      DbSessionRepository(self.engine)\n\n                login = await repo_login.\n                  get_login_credentials(username, password)\n\n                if login == None:\n                    self.client_od.close()\n                    return JSONResponse(status_code=403) \n                else:\n                    token = jwt.encode({\"sub\": username}, \n                        self.sess_key)\n                    sess_record = dict()\n                    sess_record['session_key'] = \n                        self.sess_key\n                    sess_record['session_name'] = \n                        self.sess_name\n                    sess_record['token'] = token\n                    sess_record['expiry_date'] = \n                       datetime.strptime(self.expiry, \n                            '%Y-%m-%d')\n                    await repo_session.\n                        insert_session(sess_record)\n                    self.client_od.close()\n                    response = await call_next(request)\n                    return response\n            else:\n                response = await call_next(request)\n                return response\n        except Exception as e :\n            return JSONResponse(status_code=403)\n```", "```py\n@router.get(\"/logout\")\nasync def logout(response: Response, \n       engine=Depends(create_db_engine), \n       user: str = Depends(get_current_user)):\n    repo_session:DbSessionRepository = \n             DbSessionRepository(engine)\n    await repo_session.delete_session(\"session_db\")\n    return {\"ok\": True}\n```", "```py\norigins = [\n    \"https://192.168.10.2\",\n    \"http://192.168.10.2\",\n    \"https://localhost:8080\",\n    \"http://localhost:8080\"\n]\napp = FastAPI(middleware=[\n           Middleware(SessionMiddleware, secret_key=\n            '7UzGQS7woBazLUtVQJG39ywOP7J7lkPkB0UmDhMgBR8=', \n               session_cookie=\"session_vars\"),\n           Middleware(SessionDbMiddleware, sess_key=\n            '7UzGQS7woBazLUtVQJG39ywOP7J7lkPkB0UmDhMgBR8=',\n              sess_name='session_db', expiry='2020-10-10')\n            ])\napp.add_middleware(CORSMiddleware, max_age=3600,\n     allow_origins=origins, allow_credentials=True,\n     allow_methods= [\"POST\", \"GET\", \"DELETE\", \n       \"PATCH\", \"PUT\"], allow_headers=[\n            \"Access-Control-Allow-Origin\", \n            \"Access-Control-Allow-Credentials\", \n            \"Access-Control-Allow-Headers\",\n            \"Access-Control-Max-Age\"])\n```", "```py\nfrom fastapi.routing import APIRoute\nfrom typing import Callable\nfrom fastapi import Request, Response\nclass ExtractContentRoute(APIRoute):\n    def get_route_handler(self) -> Callable:\n        original_route_handler = \n                super().get_route_handler()\n\n        async def custom_route_handler(request: Request) \n                    -> Response:\n            request = ExtractionRequest(request.scope, \n                        request.receive)\n            response: Response = await \n                    original_route_handler(request)\n            return response\n        return custom_route_handler\n```", "```py\nclass ExtractionRequest(Request):\n    async def body(self):\n        body = await super().body()\n        data = ast.literal_eval(body.decode('utf-8'))\n        if isinstance(data, list):\n            sum = 0\n            for rate in data:\n                sum += rate \n            average = sum / len(data)\n            self.state.sum = sum \n            self.state.avg = average\n        return body \n\n    async def form(self):\n        body = await super().form()\n        user_details = dict()\n        user_details['fname'] = body['firstname']\n        user_details['lname'] = body['lastname']\n        user_details['age'] = body['age']\n        user_details['bday'] = body['birthday']\n        self.session[\"user_details\"] = user_details\n        return body\n\n    async def json(self):\n        body = await super().json()\n        if isinstance(body, dict):\n\n            sum = 0\n            for rate in body.values():\n                sum += rate  \n\n            average = sum / len(body.values())\n            self.state.sum = sum \n            self.state.avg = average\n        return body\n```", "```py\nrouter = APIRouter()\nrouter.route_class = ExtractContentRoute\n```", "```py\n@router.post(\"/user/profile\")\nasync def create_profile(req: Request, \n        firstname: str = Form(...), \n        lastname: str = Form(...), age: int = Form(...), \n        birthday: date = Form(...), \n        user: str = Depends(get_current_user)):\n    user_details = req.session[\"user_details\"]\n    return {'profile' : user_details} \n```", "```py\n@router.post(\"/rating/top/three\")\nasync def set_ratings(req: Request, data : \n Dict[str, float], user: str = Depends(get_current_user)):\n    stats = dict()\n    stats['sum'] = req.state.sum\n    stats['average'] = req.state.avg\n    return {'stats' : stats } \n```", "```py\n@router.post(\"/rating/data/list\")\nasync def compute_data(req: Request, data: List[float], \n  user: str = Depends(get_current_user)):\n    stats = dict()\n    stats['sum'] = req.state.sum\n    stats['average'] = req.state.avg\n    return {'stats' : stats }\n```", "```py\nfrom cryptography.fernet import Fernet\nclass DecryptRequest(Request):\n    async def body(self):\n        body = await super().body()\n        login_dict = ast.literal_eval(body.decode('utf-8'))\n        fernet = Fernet(bytes(login_dict['key'], \n             encoding='utf-8'))\n        data = fernet.decrypt(\n          bytes(login_dict['enc_login'], encoding='utf-8'))\n        self.state.dec_data = json.loads(\n             data.decode('utf-8'))\n        return body\n```", "```py\n@router.post(\"/login/decrypt/details\")\nasync def send_decrypt_login(enc_data: EncLoginReq, \n   req:Request, user: str = Depends(get_current_user)):\n    return {\"data\" : req.state.dec_data}\n```", "```py\n    @router.get(\"/restaurant/index\")\n    def intro_list_restaurants():\n      return PlainTextResponse(content=\"The Restaurants\")\n    ```", "```py\n    @router.get(\"/restaurant/michelin\")\n    def redirect_restaurants_rates():\n      return RedirectResponse(\n          url=\"https://guide.michelin.com/en/restaurants\")\n    ```", "```py\n    @router.get(\"/question/load/questions\")\n    async def load_questions(user: str = \n                        Depends(get_current_user)):\n        file_path = os.getcwd() + \n          '\\\\files\\\\questions.txt';\n        return FileResponse(path=file_path, \n                     media_type=\"text/plain\")\n    ```", "```py\n    @router.get(\"/question/sse/list\")    \n    async def list_questions(req:Request, \n             engine=Depends(create_db_engine), \n                user: str = Depends(get_current_user)):\n        async def print_questions():\n            repo:QuestionRepository = \n                    QuestionRepository(engine)\n            result = await repo.get_all_question()\n            for q in result:\n                disconnected = await req.is_disconnected()\n                if disconnected:\n                    break\n                yield 'data: {}\\n\\n.format(\n                   json.dumps(jsonable_encoder(q), \n                          cls=MyJSONEncoder))\n                await asyncio.sleep(1)\n        return StreamingResponse(print_questions(), \n                    media_type=\"text/event-stream\")\n    ```", "```py\n    @router.post(\"/restaurant/upload/logo\")\n    async def logo_upload_png(logo: UploadFile = File(...)):\n        original_image = Image.open(logo.file)\n        original_image = \n             original_image.filter(ImageFilter.SHARPEN)\n        filtered_image = BytesIO()\n        if logo.content_type == \"image/png\":\n            original_image.save(filtered_image, \"PNG\")\n            filtered_image.seek(0)\n            return StreamingResponse(filtered_image, \n                     media_type=\"image/png\")\n        elif logo.content_type == \"image/jpeg\":\n            original_image.save(filtered_image, \"JPEG\")\n            filtered_image.seek(0)\n            return StreamingResponse(filtered_image, \n                   media_type=\"image/jpeg\") \n    ```", "```py\n    @router.get(\"/restaurant/upload/video\")\n    def video_presentation():\n        file_path = os.getcwd() + '\\\\files\\\\sample.mp4'\n        def load_file():  \n            with open(file_path, mode=\"rb\") as video_file:  \n                yield from video_file  \n        return StreamingResponse(load_file(), \n                  media_type=\"video/mp4\")\n    ```", "```py\n    @router.get(\"/signup\")\n    async def signup(engine=Depends(create_db_engine), \n           user: str = Depends(get_current_user) ):\n       signup_content = \"\"\"\n        <html lang='en'>\n            <head>\n              <meta charset=\"UTF-8\">\n              <script src=\"https://code.jquery.com/jquery-\n                        3.4.1.min.js\"></script>\n              <link rel=\"stylesheet\" \n                href=\"https://stackpath.bootstrapcdn.com/\n                  bootstrap/4.4.1/css/bootstrap.min.css\">\n              <script src=\"https://cdn.jsdelivr.net/npm/\n                popper.js@1.16.0/dist/umd/popper.min.js\">\n              </script>\n              <script   \n               src=\"https://stackpath.bootstrapcdn.com/\n           bootstrap/4.4.1/js/bootstrap.min.js\"></script>\n\n            </head>\n            <body>\n              <div class=\"container\">\n                <h2>Sign Up Form</h2>\n                <form>\n                    <div class=\"form-group\">\n                       <label for=\"firstname\">\n                              Firstname:</label>\n                       <input type='text' \n                           class=\"form-control\" \n                           name='firstname' \n                           id='firstname'/><br/>\n                    </div>\n                    … … … … … … … …\n                    <div class=\"form-group\">\n                       <label for=\"role\">Role:</label>\n                       <input type='text' \n                         class=\"form-control\" \n                         name='role' id='role'/><br/>\n                    </div>\n                    <button type=\"submit\" class=\"btn \n                        btn-primary\">Sign Up</button>\n                </form>\n               </div>\n            </body>\n        </html>\n        \"\"\"\n        return HTMLResponse(content=signup_content, \n                   status_code=200)\n    ```", "```py\n    @router.get(\"/keyword/list/all/xml\")\n    async def \n       convert_to_xml(engine=Depends(create_db_engine), \n            user: str = Depends(get_current_user)): \n        repo:KeyRepository = KeyRepository(engine)\n        list_of_keywords = await repo.get_all_keyword()\n        root = minidom.Document() \n        xml = root.createElement('keywords') \n        root.appendChild(xml) \n\n        for keyword in list_of_keywords:\n            key = root.createElement('keyword')\n            word = root.createElement('word')\n            key_text = root.createTextNode(keyword.word)\n            weight= root.createElement('weight')\n            weight_text = \n                 root.createTextNode(str(keyword.weight))\n            word.appendChild(key_text)\n            weight.appendChild(weight_text)\n            key.appendChild(word)\n            key.appendChild(weight)\n            xml.appendChild(key)\n        xml_str = root.toprettyxml(indent =\"\\t\") \n        return Response(content=xml_str, \n                media_type=\"application/xml\")\n    ```", "```py\npip install jinja2\n```", "```py\nfrom fastapi.templating import Jinja2Templates\nrouter = APIRouter()\ntemplates = Jinja2Templates(directory=\"templates\")\n```", "```py\nfrom fastapi.staticfiles import StaticFiles\napp.mount(\"/static\", StaticFiles(directory=\"static\", \n          html=True), name=\"static\")\n```", "```py\npip install aiofiles\n```", "```py\n<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta http-equiv=\"X-UA-Compatible\" \n              content=\"IE=edge\">\n        <meta name=\"viewport\" content=\"width=device-width, \n             initial-scale=1.0, shrink-to-fit=no\">\n        <meta name=\"apple-mobile-web-app-capable\" \n             content=\"yes\">\n\n        <link rel=\"stylesheet\" type=\"text/css\" \n            href=\"{{url_for('static', \n               path='/css/bootstrap.min.css')}}\">\n        <script src=\"{{url_for('static', path='/js/\n               jquery-3.6.0.js')}}\"></script>\n        <script src=\"{{url_for('static', \n              path='/js/bootstrap.min.js')}}\"></script>\n    </head>\n    <body>\n        {% block content %}\n        {% endblock content %}\n    </body>\n</html>\n```", "```py\n{% extends \"layout.html\" %}\n{% block content %}\n<div class=\"container\">\n<h2>List of users </h2>\n<p>This is a Boostrap 4 table applied to JinjaTemplate.</p>\n<table class=\"table\">\n    <thead>\n        <tr>\n          <th>Login ID</th>\n          <th>Username</th>\n          <th>Password</th>\n          <th>Passphrase</th>\n        </tr>\n      </thead>\n      <tbody>\n    {% for login in data %} \n    <tr>\n        <td>{{ login.login_id}}</td>\n        <td>{{ login.username}}</td>\n        <td>{{ login.password}}</td>\n        <td>{{ login.passphrase}}</td>\n    </tr>\n    {% endfor%}\n</tbody>\n</table>\n</div>\n{% endblock %}\n```", "```py\n@router.get(\"/login/html/list\")\nasync def list_login_html(req: Request,\n       engine=Depends(create_db_engine), \n       user: str = Depends(get_current_user)):\n    repo:LoginRepository = LoginRepository(engine)\n    result = await repo.get_all_login()\n    return templates.TemplateResponse(\"users.html\", \n           {\"request\": req, \"data\": result})\n```", "```py\n@router.get(\"/login/list/all\")\nasync def list_all_login(engine=Depends(create_db_engine), \n         user: str = Depends(get_current_user)): \n    repo:LoginRepository = LoginRepository(engine)\n    result = await repo.get_all_login()\n    return ORJSONResponse(content=jsonable_encoder(result),\n             status_code=201)\n@router.get(\"/login/account\")\nasync def get_login(id:int, \n       engine=Depends(create_db_engine), \n       user: str = Depends(get_current_user) ):\n    repo:LoginRepository = LoginRepository(engine)\n    result = await repo.get_login_id(id)\n    return UJSONResponse(content=jsonable_encoder(result), \n             status_code=201)\n```", "```py\ndef update_api_schema():\n   DOC_TITLE = \"The Online Restaurant Rating System API\"\n   DOC_VERSION = \"1.0\"\n   openapi_schema = get_openapi(\n       title=DOC_TITLE,\n       version=DOC_VERSION,\n       routes=app.routes,\n   )\napp.openapi_schema = openapi_schema\nreturn openapi_schema\n```", "```py\nopenapi_schema[\"info\"] = {\n       \"title\": DOC_TITLE,\n       \"version\": DOC_VERSION,\n       \"description\": \"This application is a prototype.\",\n       \"contact\": {\n           \"name\": \"Sherwin John Tragura\",\n           \"url\": \"https://ph.linkedin.com/in/sjct\",\n           \"email\": \"cowsky@aol.com\"\n       },\n       \"license\": {\n           \"name\": \"Apache 2.0\",\n           \"url\": \"https://www.apache.org/\n                  licenses/LICENSE-2.0.html\"\n       },\n   }\n```", "```py\nopenapi_schema[\"paths\"][\"/ch09/login/authenticate\"][\"post\"][\"description\"] = \"User Authentication Session\"\nopenapi_schema[\"paths\"][\"/ch09/login/authenticate\"][\"post\"][\"summary\"] = \"This is an API that stores credentials in session.\"\nopenapi_schema[\"paths\"][\"/ch09/login/authenticate\"][\"post\"][\"tags\"] = [\"auth\"]\n\nopenapi_schema[\"paths\"][\"/ch09/login/add\"][\"post\"]\n[\"description\"] = \"Adding Login User\"\nopenapi_schema[\"paths\"][\"/ch09/login/add\"][\"post\"]\n[\"summary\"] = \"This is an API adds new user.\"\nopenapi_schema[\"paths\"][\"/ch09/login/add\"][\"post\"]\n[\"tags\"] = [\"operation\"]\nopenapi_schema[\"paths\"][\"/ch09/login/add\"][\"post\"]\n[\"requestBody\"][\"description\"]=\"Data for LoginReq\"\n\nopenapi_schema[\"paths\"][\"/ch09/login/profile/add\"]\n[\"description\"] = \"Updating Login User\"\nopenapi_schema[\"paths\"][\"/ch09/login/profile/add\"]\n[\"post\"][\"summary\"] = \"This is an API updating existing user record.\"\nopenapi_schema[\"paths\"][\"/ch09/login/profile/add\"]\n[\"post\"][\"tags\"] = [\"operation\"]\nopenapi_schema[\"paths\"][\"/ch09/login/profile/add\"]\n[\"post\"][\"requestBody\"][\"description\"]=\"Data for LoginReq\"\n\nopenapi_schema[\"paths\"][\"/ch09/login/html/list\"][\"get\"][\"description\"] = \"Renders Jinja2Template with context data.\"\nopenapi_schema[\"paths\"][\"/ch09/login/html/list\"][\"get\"][\"summary\"] = \"Uses Jinja2 template engine for rendition.\"\nopenapi_schema[\"paths\"][\"/ch09/login/html/list\"][\"get\"][\"tags\"] = [\"rendition\"]\nopenapi_schema[\"paths\"][\"/ch09/login/list/all\"][\"get\"][\"description\"] = \"List all the login records.\"\nopenapi_schema[\"paths\"][\"/ch09/login/list/all\"][\"get\"][\"summary\"] = \"Uses JsonResponse for rendition.\"\nopenapi_schema[\"paths\"][\"/ch09/login/list/all\"][\"get\"][\"tags\"] = [\"rendition\"]\n```", "```py\napp = FastAPI(… … … …, \n            title=\"The Online Restaurant Rating \n                       System API\",\n            description=\"This a software prototype.\",\n            version=\"1.0.0\",\n            servers= [\n                {\n                    \"url\": \"http://localhost:8000\",\n                    \"description\": \"Development Server\"\n                },\n                {\n                    \"url\": \"https://localhost:8002\",\n                    \"description\": \"Testing Server\",\n                }\n            ])\n```", "```py\n@router.post(\"/restaurant/add\",\n     summary=\"This API adds new restaurant details.\",\n     description=\"This operation adds new record to the \n          database. \",\n     response_description=\"The message body.\",\n     responses={\n        200: {\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\n                        \"restaurant_id\": 100,\n                        \"name\": \"La Playa\",\n                        \"branch\": \"Manila\",\n                        \"address\": \"Orosa St.\",\n                        \"province\": \"NCR\",\n                        \"date_signed\": \"2022-05-23\",\n                        \"city\": \"Manila\",\n                        \"country\": \"Philippines\",\n                        \"zipcode\": 1603\n                    }\n                }\n            },\n        },\n        404: {\n            \"description\": \"An error was encountered during \n                     saving.\",\n            \"content\": {\n                \"application/json\": {\n                    \"example\": {\"message\": \"insert login \n                       unsuccessful\"}\n                }\n            },\n        },\n    },\n    tags=[\"operation\"])\nasync def add_restaurant(req:RestaurantReq, \n        engine=Depends(create_db_engine), \n          user: str = Depends(get_current_user)):\n    restaurant_dict = req.dict(exclude_unset=True) \n    restaurant_json = dumps(restaurant_dict, \n           default=json_datetime_serializer)\n    repo:RestaurantRepository = \n            RestaurantRepository(engine)\n    result = await repo.insert_restaurant(\n              loads(restaurant_json))\n    if result == True: \n        return req \n    else: \n        return JSONResponse(content={\"message\": \n           \"insert login unsuccessful\"}, status_code=500)\n```", "```py\n@router.post(\"/login/authenticate\")\nasync def authenticate(response: Response, \n    username:str = Query(..., \n       description='The username of the credentials.', \n       max_length=50), \n    password: str = Query(..., \n     description='The password of the of the credentials.', \n     max_length=20), \n    engine=Depends(create_db_engine)):\n    repo:LoginRepository = LoginRepository(engine)\n    … … … … … …\n    response.set_cookie(\"session\", token)\n    return {\"username\": username}\n```", "```py\n@router.get(\"/login/account/{id}\")\nasync def get_login(id:int = Path(..., \ndescription=\"The user ID of the user.\"), \n   engine=Depends(create_db_engine), \n   user: str = Depends(get_current_user) ):\n    … … … … … …\n    return UJSONResponse(content=jsonable_encoder(result),\n         status_code=201)\n```", "```py\n@router.post(\"/user/profile\")\nasync def create_profile(req: Request, \nfirstname: str = Form(..., \ndescription='The first name of the user.'), \nlastname: str = Form(..., \ndescription='The last name of the user.'), \nage: int = Form(..., \ndescription='The age of the user.'), \nbirthday: date = Form(..., \ndescription='The birthday of the user.'), \n        user: str = Depends(get_current_user)):\n    user_details = req.session[\"user_details\"]\n    return {'profile' : user_details}\n\n```", "```py\nfrom models.documentation.response import Error500Model\n… … … … …\n@router.get(\"/restaurant/upload/video\",responses={\n        200: {\n            \"content\": {\"video/mp4\": {}},\n            \"description\": \"Return an MP4 encoded video.\",\n        },\n        500:{\n\"model\": Error500Model, \n            \"description\": \"The item was not found\"\n        }\n    },)\ndef video_presentation():\n    file_path = os.getcwd() + '\\\\files\\\\sample.mp4'\n    def load_file():  \n        with open(file_path, mode=\"rb\") as video_file:  \n            yield from video_file  \n    return StreamingResponse(load_file(), \n              media_type=\"video/mp4\")\n```", "```py\npip install pytest\n```", "```py\nfrom fastapi.testclient import TestClient\nfrom api import restaurant\nclient = TestClient(restaurant.router)\ndef test_restaurant_index():\n    response = client.get(\"/restaurant/index\")\n    assert response.status_code == 200\n    assert response.text == \"The Restaurants\"\n```", "```py\nfrom fastapi.testclient import TestClient\nfrom models.data.orrs import Login\nfrom main import app\nfrom util.auth_session import get_current_user\nclient = TestClient(app)\nasync def get_user():\n    return Login(**{\"username\": \"sjctrags\", \n      \"login_id\": 101,  \n      \"password\":\"sjctrags\", \"passphrase\": None, \n      \"profile\": None})\napp.dependency_overrides[get_current_user] =  get_user\ndef test_rating_top_three():\n   response = client.post(\"/ch09/rating/top/three\", \n     json={\n          \"rate1\": 10.0, \n          \"rate2\": 20.0 ,\n          \"rate3\": 30.0\n\n    })\n    assert response.status_code == 200\n    assert response.json() == { \"stats\": {\n          \"sum\": 60.0,\n          \"average\": 20.0\n      }\n}\n```", "```py\ndef db_connect():\nclient_od = \n         AsyncIOMotorClient(f\"mongodb://localhost:27017/\")\nengine = AIOEngine(motor_client=client_od, \n            database=\"orrs_test\")\n    return engine\nasync def get_user():\n    return Login(**{\"username\": \"sjctrags\", \"login_id\": 101,\n           \"password\":\"sjctrags\", \"passphrase\": None, \n           \"profile\": None})\napp.dependency_overrides[get_current_user] =  get_user\napp.dependency_overrides[create_db_engine] = db_connect\ndef test_list_login():\n    response = client.get(\"/ch09/login/list/all\")\n    assert response.status_code == 201\n```"]