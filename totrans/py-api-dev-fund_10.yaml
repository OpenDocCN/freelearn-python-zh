- en: 10\. Deployment
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 10. 部署
- en: Learning Objectives
  id: totrans-1
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 学习目标
- en: 'By the end of this chapter, you will be able to:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将能够：
- en: Explain the application deployment process to the cloud
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释将应用程序部署到云的过程
- en: Explain the difference between SaaS, PaaS, and IaaS
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释SaaS、PaaS和IaaS之间的区别
- en: Set up different configurations between development and production environments
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在开发和生产环境之间设置不同的配置
- en: Set up the Heroku cloud platform
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Heroku云平台
- en: Install and configure Heroku Postgres
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 安装和配置Heroku Postgres
- en: Use the Heroku command-line interface (Heroku CLI) to deploy an application
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Heroku命令行界面（Heroku CLI）部署应用程序
- en: Set up the Postman environment variable
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置Postman环境变量
- en: In this chapter, we are going to deploy our application to Heroku and test it
    using Postman.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将部署我们的应用程序到Heroku，并使用Postman进行测试。
- en: Introduction
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简介
- en: In the previous chapter, we added the cache and rate limit functions to our
    Smilecook applications. These last two functions are very useful, especially when
    we are dealing with huge volumes of traffic. Caching and rate-limiting can improve
    response speeds and can also raise the security level.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们向我们的Smilecook应用程序添加了缓存和速率限制功能。这两个功能非常有用，尤其是在我们处理大量流量时。缓存和速率限制可以提高响应速度，也可以提高安全性。
- en: In this chapter, we will discuss how we can deploy our application to a cloud
    server. Deploying an application is like publishing a book or releasing a movie.
    It is like releasing our application on the market. Nowadays, a lot of cloud services
    provide free usage quotas. They allow developers to deploy their application to
    their cloud platform for free provided the resource usage is below a certain threshold.
    For our Smilecook application, what we need to do is simply make a few minor changes
    to the code and some configuration files. Everything else will be handled by the
    cloud platform. You will see how simple this is very soon.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论如何将我们的应用程序部署到云服务器。部署应用程序就像出版一本书或发布一部电影。这就像将我们的应用程序推向市场。如今，许多云服务提供商提供免费使用配额。只要资源使用量低于一定阈值，它们允许开发者免费将其应用程序部署到其云平台。对于我们的Smilecook应用程序，我们只需要对代码和配置文件进行一些小的修改。其他一切将由云平台处理。你很快就会看到这是多么简单。
- en: We will first make minor modifications to the application code to segregate
    the production and development environment configurations. Then, we will talk
    about the Heroku cloud service platform, on which we are going to deploy the Smilecook
    application. We will walk you through the account registration, configuration,
    and deployment processes in the Heroku cloud service platform.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先将对应用程序代码进行一些小的修改，以区分生产环境和开发环境配置。然后，我们将讨论Heroku云服务平台，我们将在该平台上部署Smilecook应用程序。我们将向您介绍Heroku云服务平台中的账户注册、配置和部署过程。
- en: Once the deployment is done, we will use Postman to test the APIs directly in
    the production environment. Isn't that exciting?! Without further ado, let's get
    started.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 部署完成后，我们将使用Postman直接在生产环境中测试API。这不是很令人兴奋吗？！无需多言，让我们开始吧。
- en: Deployment
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 部署
- en: What is **deployment** for? The API application we wrote earlier just runs the
    code on the local machine. Using one of the ports on the local machine, we can
    send the request from the client to the local server. This is good for development
    purpose. We can quickly test and adjust our application in a development environment.
    However, our local machine is not intended to be a server; others can't access
    it. And they cannot send HTTP requests to APIs hosted on our local machine.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署**的目的是什么？我们之前编写的API应用程序只是在本地机器上运行代码。我们可以使用本地机器上的一个端口，从客户端向本地服务器发送请求。这对于开发目的来说很好。我们可以在开发环境中快速测试和调整我们的应用程序。然而，我们的本地机器并不是作为服务器来使用的；其他人无法访问它。他们也不能向托管在我们本地机器上的API发送HTTP请求。'
- en: If we want to open this API service to external users, we need to host it on
    a server. The server should be connected to the internet, with a domain and URL
    that allow others to access it.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们想将此API服务对外开放，我们需要将其托管在服务器上。服务器应连接到互联网，拥有域名和URL，以便其他人可以访问它。
- en: Moving an application from a local machine to a server that runs on the internet
    is called deployment. This will involve work such as environment setting, dependent
    package installation, and building a web server.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序从本地机器迁移到运行在互联网上的服务器称为部署。这涉及到环境设置、依赖包安装和构建Web服务器等工作。
- en: Comparing SaaS, PaaS, and IaaS
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 比较SaaS、PaaS和IaaS
- en: In the past, it was expensive to set up your own web server. There are lots
    of considerations, including network connectivity, storage, server configuration,
    and OS setup. Nowadays, cloud computing services are here to provide all the infrastructure
    services, which lowers costs significantly, especially for individual developers
    and small- and medium-sized companies. There are three main categories of cloud
    computing services out there. These are **Software as a Service** (**SaaS**),
    **Platform as a Service** (**PaaS**), and **Infrastructure as a Service** (**IaaS**).
    There are pros and cons for each, and these will be discussed in this section.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 在过去，建立自己的网络服务器成本高昂。需要考虑的因素很多，包括网络连接、存储、服务器配置和操作系统设置。如今，云计算服务已经出现，提供所有基础设施服务，这显著降低了成本，尤其是对于个人开发者和中小型企业。云计算服务主要分为三大类。这些是**软件即服务**（**SaaS**）、**平台即服务**（**PaaS**）和**基础设施即服务**（**IaaS**）。每种服务都有其优缺点，这些将在本节中讨论。
- en: '**IaaS**: Users do not need to purchase their own servers, software, network
    devices, and so on. These infrastructures are provided as a service, and users
    do not need to care about setup and maintenance. They still have the ability to
    configure these services, such as installing software and setting up firewall.
    Example of IaaS include **AWS EC2** and **Google Compute Engine** (**GCE**).'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '**IaaS**：用户无需购买自己的服务器、软件、网络设备等。这些基础设施作为服务提供，用户无需关心设置和维护。他们仍然有能力配置这些服务，例如安装软件和设置防火墙。IaaS的例子包括**AWS
    EC2**和**Google Compute Engine**（**GCE**）。'
- en: Compared with the past, this IaaS model can greatly reduce the hardware and
    network setup costs, and all other costs relating to space and resources surrounding
    that. Individual developers, or small- and medium-sized companies often do not
    need that many system resources. This model, therefore, allows them to rent the
    infrastructure as a service; they just need to pay for the resources that they
    need.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 与过去相比，这种IaaS模型可以大大降低硬件和网络设置成本，以及与空间和资源相关的所有其他成本。个人开发者或中小型企业通常不需要那么多的系统资源。因此，这种模式允许他们按需租用基础设施作为服务；他们只需支付所需的资源费用。
- en: 'Pros: Developers have much more flexibility. IaaS provides the necessary computing
    resources for applications to run on. Developers can easily request additional
    resources, or trim down resources, according to the needs of the application.
    This is easily customizable.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：开发者拥有更大的灵活性。IaaS为应用程序运行提供必要的计算资源。开发者可以根据应用程序的需求轻松请求额外的资源，或减少资源。这是易于定制的。
- en: 'Cons: Developers need to spend time learning how to configure the cloud platform
    according to their needs.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：开发者需要花费时间学习如何根据他们的需求配置云平台。
- en: '**PaaS**: PaaS is somewhere between SaaS and IaaS. There is no need for users
    to manage and maintain infrastructures. Service providers already package all
    these infrastructure and related services together as a platform and rent them
    out as a service to users. Users do not need to worry about the backend setup
    required, nor aspects such as extending the number of servers and load balancing.
    Users (developers) just need to focus on their development and deploy their work
    accordingly to the cloud platform. Example of PaaS include Heroku, Windows Azure,
    and AWS Elastic Beanstalk.'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '**PaaS**：PaaS位于SaaS和IaaS之间。用户无需管理和维护基础设施。服务提供商已经将这些基础设施和相关服务打包成一个平台，并以服务的形式出租给用户。用户无需担心后端设置，也不必担心扩展服务器数量和负载均衡等方面。用户（开发者）只需专注于他们的开发，并根据云平台相应地部署他们的工作。PaaS的例子包括Heroku、Windows
    Azure和AWS Elastic Beanstalk。'
- en: 'Pros: Reduced setup time. By leveraging the services provided by the platform,
    developers can zero in on development.'
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：减少了设置时间。通过利用平台提供的服务，开发者可以专注于开发。
- en: 'Cons: There could be an unnecessary charge incurred. Compared to IaaS, PaaS
    is less flexible in the sense that you have less control over the infrastructure
    setup and configuration. As the whole platform is packaged as a service, some
    unused packaged resources could go to waste. In this case, the charge could be
    comparatively higher than IaaS.'
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：可能会产生不必要的费用。与IaaS相比，PaaS在基础设施设置和配置方面灵活性较低，因为你对基础设施的控制较少。由于整个平台都被打包成服务，一些未使用的打包资源可能会浪费。在这种情况下，费用可能比IaaS高。
- en: '**SaaS**: SaaS basically refers to web applications available on the internet.
    Users are not required to maintain the software. The software is provided as a
    service. A very typical example is Gmail. Example of SaaS include Dropbox, Salesforce,
    and Slack.'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '**SaaS**：SaaS基本上是指互联网上可用的Web应用。用户不需要维护软件。软件作为服务提供。一个非常典型的例子是Gmail。SaaS的例子包括Dropbox、Salesforce和Slack。'
- en: 'Pros: The cost is low as we don''t need to care about hardware purchases and
    other setup costs. If a user has a specific requirement that can be addressed
    by this service, SaaS could be the easiest and most effective solution.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 优点：成本较低，因为我们不需要关心硬件购买和其他设置成本。如果用户有可以通过此服务解决的问题，SaaS可能是最简单、最有效的解决方案。
- en: 'Cons: Since the vast amount of user data will be stored in the cloud platform,
    there could be some concerns regarding data security. Also, we need to consider
    service availability once the application is deployed.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 缺点：由于大量用户数据将存储在云端平台，可能会对数据安全产生一些担忧。此外，一旦应用部署，我们还需要考虑服务的可用性。
- en: As individual developers, we need a stable and scalable server for us to deploy
    our application. PaaS is the best option here. It provides the computing platform
    for applications to run on, and developers do not need to worry about hardware
    maintenance since service providers take care of all of this. Hence, it is a time
    and cost-saving solution for developers. Developers can focus on developing good
    software.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 作为个人开发者，我们需要一个稳定且可扩展的服务器来部署我们的应用。PaaS是最佳选择。它为应用提供运行的计算平台，开发者无需担心硬件维护，因为服务提供商会处理所有这些。因此，这是一个节省时间和成本的开发者解决方案。开发者可以专注于开发优秀的软件。
- en: The Heroku Platform
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heroku平台
- en: Heroku is a popular PaaS. We can deploy our APIs there so that they can be accessed
    by anyone in the world. And it doesn't just support Python, but also other programming
    languages, including Ruby and Go.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku是一个流行的PaaS。我们可以在那里部署我们的API，以便全世界任何人都可以访问。而且它不仅支持Python，还支持其他编程语言，包括Ruby和Go。
- en: Heroku provides a free plan for developers to deploy and test their applications
    there. Certainly, they do have paid plans as well, and with many more powerful
    functions that can make our APIs more secure and efficient. Later on, if you need
    these powerful features and system resources for your application, you can consider
    that. But right now, for teaching purposes, a free plan is good enough.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku为开发者提供免费计划，以便他们在那里部署和测试他们的应用。当然，他们也有付费计划，以及许多更强大的功能，可以使我们的API更加安全和高效。稍后，如果您需要这些强大的功能和系统资源来支持您的应用，您可以考虑这一点。但现在，出于教学目的，免费计划已经足够好。
- en: Note
  id: totrans-36
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Apart from Heroku, there are other cloud service providers. Some of the market
    leaders in cloud services are **Amazon Web Services** (**AWS**), **Google Cloud
    Platform** (**GCP**), IBM Cloud, Microsoft Azure, and Rackspace Cloud.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 除了Heroku，还有其他云服务提供商。云服务市场的一些领导者包括**亚马逊网络服务**（**AWS**）、**谷歌云平台**（**GCP**）、IBM
    Cloud、Microsoft Azure和Rackspace Cloud。
- en: Configuration Handling in Smilecook
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Smilecook中的配置处理
- en: Most applications require multiple configurations; at least one is required
    for a production server, and one for development use. There will be differences
    between them, such as the debug mode, secret key, and database URL. We can use
    a default configuration that is always loaded, and a separate configuration for
    the production server and development environment to inherit the default configuration
    depending on the environment. For environment-specific configurations, we will
    create two new classes – `DevelopmentConfig` and `ProductionConfig`.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数应用都需要多个配置；至少需要一个用于生产服务器，另一个用于开发使用。它们之间会有所不同，例如调试模式、密钥和数据库URL。我们可以使用一个始终加载的默认配置，以及为生产服务器和开发环境分别创建的配置，以便根据环境继承默认配置。对于特定环境的配置，我们将创建两个新的类——`DevelopmentConfig`和`ProductionConfig`。
- en: 'Exercise 63: Configuration Handling for the Production and Development Environments'
  id: totrans-40
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习63：生产环境和开发环境的配置处理
- en: 'In this exercise, we will segregate our application configurations between
    the development and production environments. For configurations such as `DEBUG`,
    we will require different values for the two environments. The same goes for the
    database URL as well. We are therefore going to create two sets of configurations,
    `DevelopmentConfig` and `ProductionConfig`. The former is for development and
    system enhancement in a development environment, while the latter is to be run
    in the production environment. Perform the following steps to complete the exercise:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将把应用程序配置在开发和生产环境之间分开。对于如`DEBUG`这样的配置，我们将需要两个环境的不同值。数据库URL也是如此。因此，我们将创建两组配置，`DevelopmentConfig`和`ProductionConfig`。前者用于开发环境和系统增强，而后者将在生产环境中运行。按照以下步骤完成练习：
- en: 'First, in `config.py`, add a default configuration that will be used in all
    environments:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，在`config.py`中添加一个默认配置，它将在所有环境中使用：
- en: '[PRE0]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add `DevelopmentConfig` after the `Config` class:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Config`类之后添加`DevelopmentConfig`：
- en: '[PRE1]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The new `DevelopmentConfig` class extends the parent `Config` class. The `DEBUG`
    value is set to `True`. That will allow us to see the error messages while we
    are developing.
  id: totrans-46
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 新的`DevelopmentConfig`类扩展了父类`Config`。将`DEBUG`值设置为`True`。这样我们就可以在开发过程中看到错误信息。
- en: 'Add `ProductionConfig` after the `Development Config` class:'
  id: totrans-47
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`Development Config`类之后添加`ProductionConfig`：
- en: '[PRE2]'
  id: totrans-48
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The `ProductionConfig` class here also extends the parent `Config` class. Similar
    to the `DevelopmentConfig` class, we have `SECRET_KEY` and `SQLALCHEMY_DATABASE_URI`
    set here. In the production environment, these values are obtained from the environment
    variables. We will teach you how to set these on a cloud platform later.
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这里的`ProductionConfig`类也扩展了父类`Config`。与`DevelopmentConfig`类类似，我们在这里设置了`SECRET_KEY`和`SQLALCHEMY_DATABASE_URI`。在生产环境中，这些值是从环境变量中获取的。我们将在稍后教你如何在云平台上设置这些值。
- en: 'In `app.py`, import `os`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.py`中导入`os`：
- en: '[PRE3]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In `app.py`, make the following change to get the configurations dynamically:'
  id: totrans-52
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.py`中，进行以下更改以动态获取配置：
- en: '[PRE4]'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The `ENV` environment variable will be obtained via `os.environ.get`. If it
    is `Production`, the production environment configuration will be used. In addition,
    the development environment configuration will be used.
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`ENV`环境变量将通过`os.environ.get`获取。如果是`Production`，则使用生产环境配置。此外，还将使用开发环境配置。'
- en: 'Right-click on PyCharm and run the application. Because we haven''t set up
    the `ENV` environment variable in the local machine, Flask will pick up `config.DevelopmentConfig`
    and execute it. We can see from the output that **Debug mode: on**:![Figure 10.1:
    Running an application in the development environment'
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击PyCharm并运行应用程序。因为我们没有在本地机器上设置`ENV`环境变量，所以Flask将选择`config.DevelopmentConfig`并执行它。我们可以从输出中看到**调试模式：开启**：![图10.1：在开发环境中运行应用程序
- en: '](img/C15309_10_01.jpg)'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/C15309_10_01.jpg)'
- en: 'Figure 10.1: Running an application in the development environment'
  id: totrans-57
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.1：在开发环境中运行应用程序
- en: So, we have separated the configurations between the production and development
    environments. In the future, if there are common configurations shared among the
    two environments, we will put them in the `Config` class. Otherwise, they should
    be placed under the corresponding `DevelopmentConfig` or `ProductionConfig` class.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经将生产环境和开发环境之间的配置分开。将来，如果有两个环境共享的通用配置，我们将它们放在`Config`类中。否则，它们应该放在相应的`DevelopmentConfig`或`ProductionConfig`类下。
- en: 'Exercise 64: Adding a Staging Configuration Class'
  id: totrans-59
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习64：添加一个预发布配置类
- en: 'In order to facilitate internal testing, in this exercise, we need to add a
    `StagingConfig` class. This configuration will extend the common `Config` class.
    The staging environment will not be much different from production, because it
    is mainly designed to imitate the production environment for testing. And we will
    obtain the secret key and database URI from the environment variables:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了便于内部测试，在这个练习中，我们需要添加一个`StagingConfig`类。这个配置将扩展通用`Config`类。预发布环境与生产环境不会相差太多，因为它主要是为了测试而设计，以模仿生产环境。并且我们将从环境变量中获取密钥和数据库URI：
- en: 'In `config.py`, create a `StagingConfig` class that extends `Config`:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`config.py`中创建一个扩展`Config`的`StagingConfig`类：
- en: '[PRE5]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'In `app.py`, modify the conditional statements for `StagingConfig`:'
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`app.py`中修改`StagingConfig`的条件语句：
- en: '[PRE6]'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Hence, we have set up the configuration for the staging environment. But it
    is not completed yet, since the environment variables will need to be obtained
    from the cloud server. Next, we will start to work on the cloud platform, **Heroku**.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们已经为预发布环境设置了配置。但尚未完成，因为需要从云服务器获取环境变量。接下来，我们将开始处理云平台，**Heroku**。
- en: Heroku Application
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heroku应用
- en: Before we deploy to Heroku (the cloud platform), we will first create an account
    and set up the environment there. We will create a new Heroku application. Then,
    we will need to install the Postgres database on Heroku. The installation process
    can be done within the Heroku platform; everything is integrated. Finally, we
    set up the virtual environment variables, such as the database URL and the secret
    key. Once all these precursors are completed, we will then start the deployment
    process.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们将应用部署到Heroku（云平台）之前，我们首先会在那里创建一个账户并设置环境。我们将创建一个新的Heroku应用。然后，我们需要在Heroku上安装Postgres数据库。安装过程可以在Heroku平台上完成；一切都是集成的。最后，我们设置虚拟环境变量，例如数据库URL和密钥。一旦所有这些前期准备工作完成，我们就会开始部署过程。
- en: 'Exercise 65: Creating a New Application in Heroku'
  id: totrans-68
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习65：在Heroku创建新应用
- en: 'In this exercise, we will first register a Heroku account. Then, we will create
    a new app on it. Heroku provides a nice user interface with an easy-to-follow
    setup flow. We just need to click a few buttons and that''s it. As Heroku is a
    PaaS, we don''t need to manage any hardware nor set up the OS. These are all taken
    care of by Heroku:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们首先注册Heroku账户。然后，我们将在上面创建一个新应用。Heroku提供了一个用户界面友好、易于遵循的设置流程。我们只需点击几个按钮就完成了。由于Heroku是PaaS，我们不需要管理任何硬件或设置操作系统。这些都是Heroku负责的：
- en: 'Visit the Heroku website, [https://www.heroku.com/](https://www.heroku.com/),
    and click **Sign up**:![Figure 10.2: Visiting the Heroku website'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问Heroku网站，[https://www.heroku.com/](https://www.heroku.com/)，并点击**注册**：![图10.2：访问Heroku网站
- en: '](img/C15309_10_02.jpg)'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_02.jpg]'
- en: 'Figure 10.2: Visiting the Heroku website'
  id: totrans-72
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.2：访问Heroku网站
- en: 'Once the signup process is complete, click **Log in** and access the dashboard.
    Click **Create new app** to create a new application in Heroku:![Figure 10.3:
    Logging in and accessing the Heroku dashboard'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 签到过程完成后，点击**登录**并访问仪表板。点击**创建新应用**以在Heroku中创建新应用：![图10.3：登录并访问Heroku仪表板
- en: '](img/C15309_10_03.jpg)'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_03.jpg]'
- en: 'Figure 10.3: Logging in and accessing the Heroku dashboard'
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.3：登录并访问Heroku仪表板
- en: 'Type in the app name, and then select the server region (right now, the only
    options are the United States and Europe; please select the one that is closer
    to your target users). Then, click **Create app** to continue:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入应用名称，然后选择服务器区域（目前，唯一的选择是美国和欧洲；请选择离目标用户更近的一个）。然后，点击**创建应用**继续：
- en: '![Figure 10.4: Typing in the app name and selecting the server region'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.4：输入应用名称并选择服务器区域'
- en: '](img/C15309_10_04.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/C15309_10_04.jpg]'
- en: 'Figure 10.4: Typing in the app name and selecting the server region'
  id: totrans-79
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.4：输入应用名称并选择服务器区域
- en: Note
  id: totrans-80
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The app name will be used in the application URL provided by Heroku, for example,
    `https://{app_name}.herokuapp.com/`. Users can then access our APIs using this
    URL.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 应用名称将用于Heroku提供的应用URL中，例如，`https://{app_name}.herokuapp.com/`。用户可以使用此URL访问我们的API。
- en: 'After the application is created, we can see the app administration screen,
    along the lines of the following:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 应用创建后，我们可以看到应用管理界面，大致如下：
- en: '![Figure 10.5: Heroku app administration screen'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.5：Heroku应用管理界面'
- en: '](img/C15309_10_05.jpg)'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/C15309_10_05.jpg]'
- en: 'Figure 10.5: Heroku app administration screen'
  id: totrans-85
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.5：Heroku应用管理界面
- en: 'The app administration screen provides information for us to understand the
    application status:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 应用管理界面提供了我们了解应用状态的信息：
- en: '**Overview**: For us to see the cost incurred or other collaborators'' activities'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '**概览**：显示我们产生的费用或其他协作者的活动'
- en: '**Resources**: For managing add-ons and the **Procfile** setting'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '**资源**：用于管理附加组件和**Procfile**设置'
- en: '**Deploy**: For choosing the deployment method'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署**：用于选择部署方法'
- en: '**Metrics**: For showing the metrics of the app'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '**指标**：用于显示应用的指标'
- en: '**Activity**: For tracking user activity'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**活动**：用于跟踪用户活动'
- en: '**Access**: For managing collaborator access'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '**访问**：用于管理协作者的访问权限'
- en: '**Settings**: Includes environment variable configurations, buildpack settings,
    and other advanced features'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '**设置**：包括环境变量配置、构建包设置和其他高级功能'
- en: Note
  id: totrans-94
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: At the heart of the Heroku platform is the ability to run the applications using
    the lightweight container Dynos. Containerization is a standard way to package
    your application's code, configuration, and dependencies into a single object.
    Containerization can reduce the burden on the managing hardware, virtual machine,
    or environment setup, and so on.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 平台的核心是能够使用轻量级容器 Dynos 运行应用程序。容器化是将您的应用程序代码、配置和依赖项打包成一个单一对象的标准方式。容器化可以减少对管理硬件、虚拟机或环境设置的负担。
- en: Once the application has been created, we will install the Postgres repository
    in Heroku and we will install it directly via Heroku add-ons.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦应用程序创建完成，我们将在 Heroku 中安装 Postgres 仓库，并通过 Heroku 扩展直接安装它。
- en: Heroku Add-Ons
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Heroku 扩展
- en: Heroku has a rich add-ons library. Add-ons are like plugins, which provide tools
    and services for developing, extending, and operating your apps, including data
    stores, monitoring, logging, analytics, and security. For our Smilecook application,
    we will use Heroku Postgres from Heroku, which is a reliable and powerful database
    as a service based on PostgreSQL. The starter tier is free and offers a 10,000-row
    limit and provides an expected uptime of 99.5%. This is suitable for developing
    hobby applications.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku 拥有一个丰富的扩展库。扩展类似于插件，为开发、扩展和运行您的应用程序提供工具和服务，包括数据存储、监控、日志记录、分析和安全。对于我们的
    Smilecook 应用程序，我们将使用 Heroku 提供的 Heroku Postgres，这是一个基于 PostgreSQL 的可靠且强大的数据库服务。入门级免费，提供
    10,000 行限制，并保证 99.5% 的正常运行时间。这适合开发爱好应用。
- en: 'Exercise 66: Installing Heroku Postgres'
  id: totrans-99
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 66：安装 Heroku Postgres
- en: 'In this exercise, we will install Heroku Postgres. It is more convenient to
    install Postgres from Heroku, compared to installing it from the Postgres official
    website. We only need to go to the **Data Stores** category in **Heroku add-ons**
    and then select **Heroku Postgres** directly to install. Heroku provides a backend
    management interface so that we can see the database status at a glance:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将安装 Heroku Postgres。与从 Postgres 官方网站安装相比，从 Heroku 安装 Postgres 更方便。我们只需在
    **Heroku 扩展** 的 **数据存储** 类别中直接选择 **Heroku Postgres** 来安装。Heroku 提供了一个后端管理界面，使我们能够一目了然地查看数据库状态：
- en: 'Switch to the **Resources** tab in Heroku, and then right-click on the **Find
    more add-ons** button:![Figure 10.6: Switching to the Resources tab in Heroku'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 切换到 Heroku 的 **资源** 选项卡，然后右键单击 **查找更多扩展** 按钮：![图 10.6：切换到 Heroku 的资源选项卡
- en: '](img/C15309_10_06.jpg)'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.06](img/C15309_10_06.jpg)'
- en: 'Figure 10.6: Switching to the Resources tab in Heroku'
  id: totrans-103
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.6：切换到 Heroku 的资源选项卡
- en: 'In the **Add-ons** page, click on **Data Stores** and select **Heroku Postgres**:![Figure
    10.7: Add-ons page in Heroku'
  id: totrans-104
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **扩展** 页面上，点击 **数据存储** 并选择 **Heroku Postgres**：![图 10.7：Heroku 的扩展页面
- en: '](img/C15309_10_07.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.07](img/C15309_10_07.jpg)'
- en: 'Figure 10.7: Add-ons page in Heroku'
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.7：Heroku 的扩展页面
- en: 'Then, click on **Install Heroku Postgres** to install the add-on in our cloud
    server:![Figure 10.8: Installing the Heroku Postgres add-on'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **安装 Heroku Postgres** 以在我们的云服务器上安装扩展：![图 10.8：安装 Heroku Postgres 扩展
- en: '](img/C15309_10_08.jpg)'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.08](img/C15309_10_08.jpg)'
- en: 'Figure 10.8: Installing the Heroku Postgres add-on'
  id: totrans-109
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.8：安装 Heroku Postgres 扩展
- en: 'Select the default, **Hobby Dev - Free Plan**. This plan is free. In **App
    to provision to**, put in the app name we used in the previous exercise, and then
    click **Provision add-on**:![Figure 10.9: Selecting the Heroku Postgres add-on
    plan'
  id: totrans-110
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择默认的 **Hobby Dev - Free Plan**。此计划免费。在 **要部署的应用** 中输入我们在上一个练习中使用的应用程序名称，然后点击
    **部署扩展**：![图 10.9：选择 Heroku Postgres 扩展计划
- en: '](img/C15309_10_09.jpg)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.09](img/C15309_10_09.jpg)'
- en: 'Figure 10.9: Selecting the Heroku Postgres add-on plan'
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.9：选择 Heroku Postgres 扩展计划
- en: 'Once that is done, we can check whether **Heroku Postgres** is installed on
    the **Add-ons** page:![Figure 10.10: Checking that Heroku Postgres is installed'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成这些操作后，我们可以在 **扩展** 页面上检查 **Heroku Postgres** 是否已安装：![图 10.10：检查 Heroku Postgres
    是否已安装
- en: '](img/C15309_10_10.jpg)'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.10](img/C15309_10_10.jpg)'
- en: 'Figure 10.10: Checking that Heroku Postgres is installed'
  id: totrans-115
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.10：检查 Heroku Postgres 是否已安装
- en: 'Then, click on **Heroku Postgres add-on** to enter the management page:'
  id: totrans-116
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，点击 **Heroku Postgres 扩展** 以进入管理页面：
- en: '![Figure 10.11: Heroku Postgres management page'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.11：Heroku Postgres 管理页面'
- en: '](img/C15309_10_11.jpg)'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.11](img/C15309_10_11.jpg)'
- en: 'Figure 10.11: Heroku Postgres management page'
  id: totrans-119
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.11：Heroku Postgres 管理页面
- en: The **Overview** allows us to check the database status, utilization rate, and
    so on. **Durability** allows us to manage data security and backup. **Settings**
    stores the database credentials and other advanced settings. **Data clips** allow
    you to query the database data using the SQL command online. You can export or
    share the result there.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '**概览**允许我们检查数据库状态、利用率等。**耐用性**允许我们管理数据安全和备份。**设置**存储数据库凭据和其他高级设置。**数据片段**允许您使用SQL命令在线查询数据库数据。您可以在那里导出或分享结果。'
- en: As you can see, it is pretty straightforward to install Postgres on Heroku;
    it just takes a few steps. Next, we will work on setting up the environment variables
    in the cloud platform.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，在Heroku上安装Postgres非常简单；只需几个步骤。接下来，我们将着手在云平台上设置环境变量。
- en: Setting Up Environment Variables for the Heroku App
  id: totrans-122
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 为Heroku应用设置环境变量
- en: We previously modified `config.py` and added `ProductionConfig` there. Now we
    have to add the environment variables in Heroku, including the secret key and
    database URL. In addition to these, let's not forget the Mailgun API key and the
    Mailgun domain as well. We will set up all of these together in the next exercise.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前修改了`config.py`并在其中添加了`ProductionConfig`。现在我们必须在Heroku中添加环境变量，包括密钥和数据库URL。除此之外，别忘了Mailgun
    API密钥和Mailgun域名。我们将在下一个练习中将所有这些一起设置。
- en: 'Exercise 67: Setting Up the App Environment Variables'
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习67：设置应用环境变量
- en: 'In this exercise, we will set up the environment variables in the production
    environment. Fortunately, because we are using Heroku Postgres, the database URL
    environment variable has already been set up for us. We only need to set `ENV`,
    `SECRET_KEY`, `MAILGUN KEY`, and `DOMAIN`. Then, once the setting is complete,
    after the `Deploy` code is completed, the application will read the newly added
    environment variables in `App config`:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将设置生产环境中的环境变量。幸运的是，因为我们使用的是Heroku Postgres，数据库URL环境变量已经为我们设置好了。我们只需要设置`ENV`、`SECRET_KEY`、`MAILGUN
    KEY`和`DOMAIN`。然后，一旦设置完成，在`Deploy`代码完成后，应用程序将读取`App config`中新增的环境变量：
- en: 'Generate the secret key using the following two lines of code in the Python
    console in PyCharm:'
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在PyCharm的Python控制台中，使用以下两行代码生成密钥：
- en: '[PRE7]'
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Note
  id: totrans-128
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: A secret key should be as random as possible. There are a lot of random generators
    out there that we can leverage. But perhaps the easiest way to do so is to generate
    that in the Python console in PyCharm.
  id: totrans-129
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 密钥应该尽可能随机。有很多随机生成器我们可以利用。但可能最简单的方法是在PyCharm的Python控制台中生成它。
- en: 'Go to the **Settings** tab and set up the **ENV**, **MAILGUN_API_KEY**, **MAILGUN_DOMAIN**,
    and **SECRET_KEY** environment variables as the following:'
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往**设置**选项卡，并设置**ENV**、**MAILGUN_API_KEY**、**MAILGUN_DOMAIN**和**SECRET_KEY**环境变量，如下所示：
- en: '![Figure 10.12: Setting up environment variables in Heroku'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.12：在Heroku中设置环境变量'
- en: '](img/C15309_10_12.jpg)'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/C15309_10_12.jpg)'
- en: 'Figure 10.12: Setting up environment variables in Heroku'
  id: totrans-133
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.12：在Heroku中设置环境变量
- en: Now that we have finished the necessary preparatory setup in Heroku, we will
    go straight to the deployment process.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经在Heroku上完成了必要的准备工作，我们将直接进入部署过程。
- en: Deployment Using Heroku Git
  id: totrans-135
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用Heroku Git进行部署
- en: 'Heroku provides a guideline on how we can deploy our application. The guide
    can be found in the **Deploy** tab. It is mainly divided into three parts. They
    are **Install the Heroku CLI**, **Create a new Git repository**, and **Deploy
    your application**. The details are as follows:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: Heroku提供了一份关于如何部署我们的应用的指南。该指南可以在**部署**选项卡中找到。它主要分为三个部分。它们是**安装Heroku CLI**、**创建一个新的Git仓库**和**部署您的应用**。具体细节如下：
- en: '![Figure 10.13: Deployment using the Heroku Git guideline'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![图10.13：使用Heroku Git指南进行部署'
- en: '](img/C15309_10_13.jpg)'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/C15309_10_13.jpg)'
- en: 'Figure 10.13: Deployment using the Heroku Git guideline'
  id: totrans-139
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.13：使用Heroku Git指南进行部署
- en: 'There are three parts to the guideline in the **Deploy** tab:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署**选项卡中的指南有三个部分：'
- en: '**Install the Heroku CLI**'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '**安装Heroku CLI**'
- en: '`heroku login` – For logging into Heroku using the Heroku CLI tool provided.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku login` – 使用Heroku CLI工具登录Heroku。'
- en: '**Create a new Git repository**'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '**创建一个新的Git仓库**'
- en: '`cd my-project/` – Change directory to the `my-project` folder.'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cd my-project/` – 切换到`my-project`文件夹。'
- en: '`git init` – Initialize `git`, which is a version control system. We will discuss
    this soon.'
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git init` – 初始化`git`，这是一个版本控制系统。我们很快就会讨论这个问题。'
- en: '`heroku git:remote -a smilecook` – Add the app (Smilecook) repository to the
    remote repository list of the local Git.'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`heroku git:remote -a smilecook` – 将应用程序（Smilecook）仓库添加到本地Git的远程仓库列表中。'
- en: '**Deploy your application**'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '**部署你的应用程序**'
- en: '`git add .` – To add all files and folders to the current directory and subfolder
    to Git.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git add .` – 将所有文件和文件夹添加到当前目录及其子目录到Git。'
- en: '`git commit -am "make it better"` – Commit a change and insert the commit message
    to `make it better`.'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git commit -am "make it better"` – 提交一个更改并插入提交信息`make it better`。'
- en: '`git push heroku master` – This will upload the local repository content to
    the remote repository, which is the repository in Heroku. Once it is pushed, Heroku
    will run the app start-up procedure.'
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`git push heroku master` – 这将上传本地仓库内容到远程仓库，即Heroku中的仓库。一旦推送，Heroku将运行应用程序启动程序。'
- en: Before we start deploying our application, there are still a few bits of terminology
    that require explanation.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们开始部署应用程序之前，还有一些术语需要解释。
- en: What is Git?
  id: totrans-152
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Git是什么？
- en: '**Git** is a distributed version control system. A version control system is
    mainly a system that can keep track of every version of your source code. Any
    changes in the source code will be recorded in the system. It allows developers
    to easily restore the previous version. No manual backup is required.'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '**Git** 是一个分布式版本控制系统。版本控制系统主要是一个可以跟踪你源代码每个版本的系统。源代码中的任何更改都将被记录在系统中。它允许开发者轻松地恢复到之前的版本。无需手动备份。'
- en: 'Git also supports collaboration and other advanced features. If you are interested,
    you can go to the official Git website to learn more about it: [https://git-scm.com](https://git-scm.com).'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: Git还支持协作和其他高级功能。如果您感兴趣，可以访问官方Git网站了解更多信息：[https://git-scm.com](https://git-scm.com)。
- en: What is gitignore?
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: gitignore是什么？
- en: '**gitignore** is a file that contains a list of files and folders that Git
    should ignore. Files and folders in this list will not be stored in Git. Usually,
    we will include the environment configs, logs, and so on in this list.'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '**gitignore** 是一个包含Git应该忽略的文件和文件夹列表的文件。列表中的文件和文件夹将不会存储在Git中。通常，我们会将环境配置、日志等内容包含在这个列表中。'
- en: What is Procfile?
  id: totrans-157
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Procfile是什么？
- en: '**Procfile** is a file that will be executed during the app start-up process
    in Heroku. Developers will put in the commands they want Heroku to run during
    the app start-up process. Usually, we will put the setup scripts and server start-up
    scripts here.'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '**Procfile** 是一个在Heroku应用程序启动过程中执行的文件。开发者将在此处放入他们希望在应用程序启动过程中让Heroku运行的命令。通常，我们会将设置脚本和服务器启动脚本放在这里。'
- en: What is Gunicorn?
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Gunicorn是什么？
- en: '**Gunicorn** is a Python WSGI HTTP server that is compatible with various web
    applications. It can be used as an interface between web servers and web applications.
    Gunicorn can communicate with multiple web servers or start multiple web applications.
    It is a powerful and fast HTTP server.'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '**Gunicorn** 是一个兼容各种Web应用程序的Python WSGI HTTP服务器。它可以作为Web服务器和Web应用程序之间的接口。Gunicorn可以与多个Web服务器或启动多个Web应用程序进行通信。它是一个强大且快速的HTTP服务器。'
- en: Now that we have learned about the deployment flow as well as some key concepts
    and terminology, we will work on the deployment together in our next exercise.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了部署流程以及一些关键概念和术语，我们将在下一项练习中一起进行部署。
- en: 'Exercise 68: Setting Up the Git and the Heroku CLI'
  id: totrans-162
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习68：设置Git和Heroku CLI
- en: 'In this exercise, we will deploy our Smilecook application to the production
    environment. We will download and install the Heroku CLI and Git first so that
    we can run the deployment command in the local machine. Then, we will add the
    `gitignore` file to ensure that some files will not be uploaded to Heroku. Finally,
    we will add `main.py` and `Procfile` to the root directory of the project and
    then deploy it to Heroku:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将部署我们的Smilecook应用程序到生产环境。我们首先下载并安装Heroku CLI和Git，以便我们可以在本地机器上运行部署命令。然后，我们将添加`gitignore`文件以确保某些文件不会被上传到Heroku。最后，我们将`main.py`和`Procfile`添加到项目的根目录中，然后将其部署到Heroku：
- en: 'Install the **Heroku CLI** from [https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli).
    Pick the version for your OS and download it:![Figure 10.14: Installing the Heroku
    CLI'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从 [https://devcenter.heroku.com/articles/heroku-cli](https://devcenter.heroku.com/articles/heroku-cli)
    安装**Heroku CLI**。选择适合您操作系统的版本并下载它：![图10.14：安装Heroku CLI
- en: '](img/C15309_10_14.jpg)'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图片](img/C15309_10_14.jpg)'
- en: 'Figure 10.14: Installing the Heroku CLI'
  id: totrans-166
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.14：安装Heroku CLI
- en: 'If you haven''t installed Git, please install it from [https://git-scm.com/](https://git-scm.com/):![Figure
    10.15: Installing Git'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您还没有安装 Git，请从 [https://git-scm.com/](https://git-scm.com/) 安装：![图 10.15：安装
    Git
- en: '](img/C15309_10_15.jpg)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C15309_10_15.jpg)'
- en: 'Figure 10.15: Installing Git'
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.15：安装 Git
- en: 'At the bottom of PyCharm, open the terminal. Run the `git --version` command
    to confirm that Git has installed successfully:'
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyCharm 底部打开终端。运行 `git --version` 命令以确认 Git 已成功安装：
- en: '[PRE8]'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Right-click to create a `.gitignore` file in the project. This file will contain
    a list of files or folders that we don''t want to be added to Git:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击在项目中创建一个 `.gitignore` 文件。此文件将包含我们不想添加到 Git 中的文件或文件夹列表：
- en: '[PRE9]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '`static/images/avatars/*` – We do not want to include all the testing images
    that we created in the previous chapters to be uploaded to the production environment.'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`static/images/avatars/*` – 我们不希望将之前章节中创建的所有测试图像上传到生产环境。'
- en: '`static/images/recipes/*` – We do not want to include all the testing images
    that we created in the previous chapters to be uploaded to the production environment.'
  id: totrans-175
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`static/images/recipes/*` – 我们不希望将之前章节中创建的所有测试图像上传到生产环境。'
- en: '`.idea/` – This is the IDE project-specific settings folder. We don''t need
    it in production.'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`.idea/` – 这是 IDE 项目特定设置文件夹。在生产环境中我们不需要它。'
- en: '`venv/` – This is the virtual environment.'
  id: totrans-177
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`venv/` – 这是虚拟环境。'
- en: 'Log in to your Heroku account:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 登录您的 Heroku 账户：
- en: '[PRE10]'
  id: totrans-179
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, type in the following `git init` command to initialize Git. This is to
    add version control to our project:'
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，输入以下 `git init` 命令以初始化 Git。这是为了将版本控制添加到我们的项目中：
- en: '[PRE11]'
  id: totrans-181
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Add the Heroku repository to the Git remote repository (please replace `your-heroku-app`
    with the name of your Heroku app).
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 Heroku 仓库添加到 Git 远程仓库（请将 `your-heroku-app` 替换为您的 Heroku 应用名称）。
- en: '[PRE12]'
  id: totrans-183
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: Note
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: Before adding in the remote repository, all our changes can only be committed
    to the local repository.
  id: totrans-185
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 在添加远程仓库之前，我们所有的更改只能提交到本地仓库。
- en: 'In `requirements.txt`, add in the `gunicorn` package, which is going to be
    our HTTP server:'
  id: totrans-186
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `requirements.txt` 文件中添加 `gunicorn` 包，它将成为我们的 HTTP 服务器：
- en: '[PRE13]'
  id: totrans-187
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Create `main.py` under the project root folder. This will be executed by Gunicorn
    to start up our web application:'
  id: totrans-188
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在项目根目录下创建 `main.py`。这将由 Gunicorn 执行以启动我们的 web 应用程序：
- en: '[PRE14]'
  id: totrans-189
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Right-click to create a file under the project root folder. Name it `Procfile`
    without an extension and then insert the following two commands:'
  id: totrans-190
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 右键点击在项目根目录下创建一个文件。命名为 `Procfile`（不带扩展名），然后插入以下两个命令：
- en: '[PRE15]'
  id: totrans-191
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This `Procfile` file is for Heroku to run during the app start-up process. The
    first line is to ask Heroku to run `flask db upgrade` after every deployment.
    This is designed to ensure that our database schema is always up to date.
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 此 `Procfile` 文件是用于 Heroku 在应用程序启动过程中运行的。第一行是要求 Heroku 在每次部署后运行 `flask db upgrade`。这是为了确保我们的数据库模式始终保持最新。
- en: The second line is to have Heroku recognize it as the task that starts the webserver.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 第二行是为了让 Heroku 识别它为启动 web 服务器的任务。
- en: 'Run `git add .` in the Python console under PyCharm. This will add our source
    code to Git, for version control and deployment:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyCharm 的 Python 控制台中运行 `git add .` 命令。这将把我们的源代码添加到 Git 中，用于版本控制和部署：
- en: '[PRE16]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the `git commit` command to commit our source code. The `-a` parameter
    tells Git to stage files that have been modified or deleted. The `-m` parameter
    is for incorporating the commit message:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行 `git commit` 命令以提交我们的源代码。`-a` 参数告诉 Git 将已修改或删除的文件放入暂存区。`-m` 参数用于包含提交信息：
- en: '[PRE17]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Deploy the application by using `git push` to push the source code to the Heroku
    repository:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `git push` 将源代码推送到 Heroku 仓库以部署应用程序：
- en: '[PRE18]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Heroku will automatically set up the environment. We can see the following
    output:'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: Heroku 将自动设置环境。我们可以看到以下输出：
- en: '![Figure 10.16: Deploying the application to Heroku'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![图 10.16：将应用程序部署到 Heroku'
- en: '](img/C15309_10_16.jpg)'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C15309_10_16.jpg)'
- en: 'Figure 10.16: Deploying the application to Heroku'
  id: totrans-203
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.16：将应用程序部署到 Heroku
- en: Note
  id: totrans-204
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: During the deployment process, if we want to know more about what's happening
    behind the scenes, we can check the application logs by clicking the **More**
    button in the top right-hand corner, and then clicking **VIEW logs**.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 在部署过程中，如果我们想了解更多关于幕后发生的事情，可以通过点击右上角的 **更多** 按钮，然后点击 **查看日志** 来检查应用程序日志。
- en: '![Figure 10.17: Deploying the application to Heroku'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 10.17：将应用程序部署到 Heroku'
- en: '](img/C15309_10_17.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/C15309_10_17.jpg)'
- en: 'Figure 10.17: Deploying the application to Heroku'
  id: totrans-208
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.17：将应用程序部署到 Heroku
- en: From the preceding log, we can see that after the database is upgraded, it will
    run Gunicorn. And finally, you can see the message **State changed from starting
    to up**.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的日志中，我们可以看到数据库升级后，将运行 Gunicorn。最后，你可以看到消息 **状态从启动变为运行**。
- en: We have successfully deployed our Smilecook application to Heroku, which means
    it is ready to serve the public. Later, we will test it using Postman.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功将 Smilecook 应用程序部署到 Heroku，这意味着它已准备好为公众提供服务。稍后，我们将使用 Postman 进行测试。
- en: Note
  id: totrans-211
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: In the future, when there is a new version, we only need to use three commands
    to redeploy the application. First, use `git add .` to add our source code to
    Git, and then use `git commit -am "make it better"`. Lastly, use `git push heroku
    master` to push the source code to Heroku.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在未来，如果有新版本，我们只需要使用三个命令来重新部署应用程序。首先，使用 `git add .` 将我们的源代码添加到 Git 中，然后使用 `git
    commit -am "make it better"`。最后，使用 `git push heroku master` 将源代码推送到 Heroku。
- en: 'Exercise 69: Checking the Heroku Postgres Tables in pgAdmin'
  id: totrans-213
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习 69：在 pgAdmin 中检查 Heroku Postgres 表
- en: 'In the last exercise, we completed deployment. We will now need to check whether
    the tables have been created in the database. So, in this exercise, we are going
    to use `pgAdmin` to connect to Heroku Postgres:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，我们完成了部署。现在我们需要检查数据库中是否已创建了表。因此，在这个练习中，我们将使用 `pgAdmin` 连接到 Heroku Postgres：
- en: 'Get the credentials of the database in Heroku Postgres, go to **Add-ons** >
    **Settings**, then click **View Credentials**, and you will see the following
    screen:![Figure 10.18: Getting the credentials of the database in Heroku Postgres'
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取 Heroku Postgres 数据库的凭据，转到 **Add-ons** > **Settings**，然后点击 **View Credentials**，你将看到以下屏幕：![图
    10.18：获取 Heroku Postgres 数据库的凭据
- en: '](img/C15309_10_18.jpg)'
  id: totrans-216
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_18.jpg]'
- en: 'Figure 10.18: Getting the credentials of the database in Heroku Postgres'
  id: totrans-217
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.18：获取 Heroku Postgres 数据库的凭据
- en: 'Right-click on **Servers** and then create a new server in pgAdmin:![Figure
    10.19: Creating a new server in pgAdmin'
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Servers** 上右键单击，然后在 pgAdmin 中创建新服务器：![图 10.19：在 pgAdmin 中创建新服务器
- en: '](img/C15309_10_19.jpg)'
  id: totrans-219
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_19.jpg]'
- en: 'Figure 10.19: Creating a new server in pgAdmin'
  id: totrans-220
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.19：在 pgAdmin 中创建新服务器
- en: 'In the **General** tab, name the server **Heroku**:![Figure 10.20: Entering
    the name for the server in the General tab'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **General** 选项卡中，将服务器命名为 **Heroku**：![图 10.20：在常规选项卡中输入服务器的名称
- en: '](img/C15309_10_20.jpg)'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_20.jpg]'
- en: 'Figure 10.20: Entering the name for the server in the General tab'
  id: totrans-223
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.20：在常规选项卡中输入服务器的名称
- en: 'In the **Connection** tab, enter the credentials, including the **Host name/address**,
    **Port**, **Maintenance database**, **Username**, and **Password**, and then click
    **Save**:![Figure 10.21: Adding credentials to the Connection tab'
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **Connection** 选项卡中，输入凭据，包括 **主机名/地址**、**端口**、**维护数据库**、**用户名** 和 **密码**，然后点击
    **保存**：![图 10.21：将凭据添加到连接选项卡
- en: '](img/C15309_10_21.jpg)'
  id: totrans-225
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_21.jpg]'
- en: 'Figure 10.21: Adding credentials to the Connection tab'
  id: totrans-226
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.21：将凭据添加到连接选项卡
- en: 'Now, check the database tables in pgAdmin. Go to **Heroku** >> **Databases**
    >> (your database name) >> **Schemas** >> **Public** >> **Tables** to verify this:![Figure
    10.22: Checking the database tables in pgAdmin'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，在 pgAdmin 中检查数据库表。转到 **Heroku** >> **Databases** >> (你的数据库名称) >> **Schemas**
    >> **Public** >> **Tables** 以验证此操作：![图 10.22：在 pgAdmin 中检查数据库表
- en: '](img/C15309_10_22.jpg)'
  id: totrans-228
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_22.jpg]'
- en: 'Figure 10.22: Checking the database tables in pgAdmin'
  id: totrans-229
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.22：在 pgAdmin 中检查数据库表
- en: Now we can see whether the tables have been created in the database. If you
    can see that the tables have been created successfully, we can continue to the
    next step, which is using Postman to test our APIs.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们可以查看数据库中是否已创建了表。如果你可以看到表已成功创建，我们可以继续到下一步，即使用 Postman 测试我们的 API。
- en: Setting Up Variables in Postman
  id: totrans-231
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Postman 中设置变量
- en: We have successfully deployed our project to Heroku. Now you can test them in
    Postman using all the saved requests that we set up before. However, the requests
    we have saved previously in Postman are all running against localhost. Instead
    of changing the URL bit by bit to the production URL, we can leverage the variables
    in Postman. We can set up a `url` variable and assign the production URL to it
    in Postman, then replace the URL with `{{url}}` from the saved request. Postman
    will then substitute `{{url}}` with the production URL for us dynamically.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已成功将项目部署到Heroku。现在您可以使用我们之前设置的保存请求在Postman中测试它们。然而，我们之前在Postman中保存的请求都是针对localhost运行的。我们不必逐个更改URL到生产URL，我们可以利用Postman中的变量。我们可以在Postman中设置一个`url`变量，并将生产URL分配给它，然后从保存的请求中将URL替换为`{{url}}`。然后Postman将动态地为我们替换`{{url}}`为生产URL。
- en: 'Exercise 70: Setting Up Variables in Postman'
  id: totrans-233
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 练习70：在Postman中设置变量
- en: 'In this exercise, we will set up variables in Postman so that we can dynamically
    incorporate the appropriate value depending on the environment. We will set up
    the URL as a variable so that when we are testing in the development environment,
    we simply need to change the URL variable to `http://localhost:5000`. And if we
    are testing in a production environment, we can change that to `https://your_heroku_app.herokuapp.com`:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个练习中，我们将设置Postman中的变量，以便根据环境动态地结合适当的值。我们将设置URL作为一个变量，这样当我们处于开发环境测试时，我们只需更改URL变量为`http://localhost:5000`。如果我们处于生产环境测试，我们可以将其更改为`https://your_heroku_app.herokuapp.com`：
- en: 'Click `Smilecook` as the environment name. Then, create a `url` variable with
    the value `https://your_heroku_app.herokuapp.com`. If the current value is not
    set, it will automatically assume the initial value. Please replace `your_heroku_app`
    with the name of your Heroku app, and then click **Update**:![Figure 10.23: Adding
    an environment variable in Postman'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将环境名称设置为`Smilecook`。然后，创建一个名为`url`的变量，其值为`https://your_heroku_app.herokuapp.com`。如果当前值未设置，它将自动采用初始值。请将`your_heroku_app`替换为您的Heroku应用名称，然后点击**更新**：![图10.23：在Postman中添加环境变量
- en: '](img/C15309_10_23.jpg)'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C15309_10_23.jpg)'
- en: 'Figure 10.23: Adding an environment variable in Postman'
  id: totrans-237
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.23：在Postman中添加环境变量
- en: 'Once it is added, verify the variable by clicking on the eye icon in the top
    right-hand corner:![Figure 10.24: Verifying the environment variable in Postman'
  id: totrans-238
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 一旦添加，通过点击右上角的眼睛图标来验证变量：![图10.24：在Postman中验证环境变量
- en: '](img/C15309_10_24.jpg)'
  id: totrans-239
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C15309_10_24.jpg)'
- en: 'Figure 10.24: Verifying the environment variable in Postman'
  id: totrans-240
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.24：在Postman中验证环境变量
- en: 'In the `UserList` request, update the URL to `{{url}}/users` and then click
    `https://your_heroku_app.herokuapp.com/users` when the request is sent):![Figure
    10.25: Using an environment variable in the URL'
  id: totrans-241
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`UserList`请求中，将URL更新为`{{url}}/users`，然后在请求发送时点击`https://your_heroku_app.herokuapp.com/users`）：![图10.25：在URL中使用环境变量
- en: '](img/C15309_10_25.jpg)'
  id: totrans-242
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '](img/C15309_10_25.jpg)'
- en: 'Figure 10.25: Using an environment variable in the URL'
  id: totrans-243
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图10.25：在URL中使用环境变量
- en: Postman is a very powerful testing tool. It can even allow us to effectively
    test our API endpoints on different environments. In the future, if you want to
    test other API endpoints in the production environment, you just need to change
    the URL in the previously saved requests. In the next activity, we will test your
    knowledge of this.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: Postman是一个非常强大的测试工具。它甚至允许我们有效地在不同的环境中测试我们的API端点。在未来，如果您想在生产环境中测试其他API端点，您只需更改之前保存的请求中的URL。在下一个活动中，我们将测试您的这一知识。
- en: 'Activity 18: Changing access_token to a Variable in Postman'
  id: totrans-245
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 活动18：在Postman中将access_token更改为变量
- en: 'In the previous exercise, you learned how to change a URL to a variable. In
    this activity, we would like you to do the same for `access_token`:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个练习中，您学习了如何将URL更改为变量。在这个活动中，我们希望您对`access_token`也做同样的操作：
- en: Get an access token by using the previously saved **POST Token** request.
  id: totrans-247
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过使用之前保存的**POST Token**请求来获取访问令牌。
- en: Add `access_token` as a variable in Postman.
  id: totrans-248
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在Postman中将`access_token`作为一个变量添加。
- en: Test a Smilecook API endpoint that requires the access token.
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 测试一个需要访问令牌的Smilecook API端点。
- en: Note
  id: totrans-250
  prefs:
  - PREF_IND
  - PREF_H4
  type: TYPE_NORMAL
  zh: 注意
- en: The solution to this activity can be found on page 345.
  id: totrans-251
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 本活动的解决方案可以在第345页找到。
- en: That's great. When you are done with this activity, that means that you have
    already deployed and tested the Smilecook API in production. This is the final
    activity in the book and we are glad that you made it to this point!
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 太棒了。当你完成这个活动时，这意味着你已经部署并测试了 Smilecook API 的生产环境。这是本书的最后一项活动，我们很高兴你走到了这一步！
- en: Now, we will setup the Smilecook frontend website, which will work with the
    APIs that you have just developed.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将设置 Smilecook 前端网站，它将使用你刚刚开发的 API。
- en: Setting up the Front-end Interface to Work with the Smilecook API
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置前端界面以与 Smilecook API 一起工作
- en: 'Please download the `smilecook-vuejs` folder, which contains the frontend website
    source code, from [https://github.com/TrainingByPackt/Python-API-Development-Fundamentals/tree/master/Lesson10/Frontend](https://github.com/TrainingByPackt/Python-API-Development-Fundamentals/tree/master/Lesson10/Frontend):'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 请从 [https://github.com/TrainingByPackt/Python-API-Development-Fundamentals/tree/master/Lesson10/Frontend](https://github.com/TrainingByPackt/Python-API-Development-Fundamentals/tree/master/Lesson10/Frontend)
    下载包含前端网站源代码的 `smilecook-vuejs` 文件夹。
- en: 'Create a new app in the Heroku platform, which is for deploying our frontend
    web interface:![Figure 10.26: Creating a new app in Heroku platform'
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Heroku 平台上创建一个新应用，用于部署我们的前端网页界面：![图 10.26：在 Heroku 平台上创建新应用
- en: '](img/C15309_10_26.jpg)'
  id: totrans-257
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_26.jpg]'
- en: 'Figure 10.26: Creating a new app in the Heroku platform'
  id: totrans-258
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.26：在 Heroku 平台上创建新应用
- en: 'Once the app is created, we go to the **Settings** tab and then **Config Vars**.
    Here, we are going to set up an environment variable, which will be used to store
    the backend API URL:![Figure 10.27: Setting up an environment variable'
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 应用程序创建后，我们转到 **设置** 选项卡，然后是 **配置变量**。在这里，我们将设置一个环境变量，该变量将用于存储后端 API URL：![图
    10.27：设置环境变量
- en: '](img/C15309_10_27.jpg)'
  id: totrans-260
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_27.jpg]'
- en: 'Figure 10.27: Setting up an environment variable'
  id: totrans-261
  prefs:
  - PREF_IND
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.27：设置环境变量
- en: Set the variable name to be `VUE_APP_API_URL`, and insert the backend Smilecook
    API URL here.
  id: totrans-262
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将变量名设置为 `VUE_APP_API_URL`，并将后端 Smilecook API URL 插入此处。
- en: Open the `smilecook-vuejs` project in PyCharm.
  id: totrans-263
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyCharm 中打开 `smilecook-vuejs` 项目。
- en: 'In the PyCharm console, type in the following command to log in to the Heroku
    CLI:'
  id: totrans-264
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 PyCharm 控制台中，输入以下命令以登录到 Heroku CLI：
- en: '[PRE19]'
  id: totrans-265
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Then, initialize `git` and add the Heroku repository to the `git:remote` repository:'
  id: totrans-266
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，初始化 `git` 并将 Heroku 仓库添加到 `git:remote` 仓库：
- en: '[PRE20]'
  id: totrans-267
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Then, add the source code to `git`, commit, and push them to Heroku.
  id: totrans-268
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将源代码添加到 `git` 中，提交，并将它们推送到 Heroku。
- en: '[PRE21]'
  id: totrans-269
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'When deployment is complete, you should see the following message on screen:'
  id: totrans-270
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 部署完成后，你应该在屏幕上看到以下信息：
- en: '[PRE22]'
  id: totrans-271
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Type `https://your_heroku_app_name.herokuapp.com/` in the browser; we can see
    that the frontend interface has been set up successfully:![Figure 10.28: Successful
    frontend setup'
  id: totrans-272
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器中输入 `https://your_heroku_app_name.herokuapp.com/`；我们可以看到前端界面已成功设置：![图 10.28：前端设置成功
- en: '](img/C15309_10_28.jpg)'
  id: totrans-273
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '![img/C15309_10_28.jpg]'
- en: 'Figure 10.28: Successful frontend setup'
  id: totrans-274
  prefs:
  - PREF_H6
  type: TYPE_NORMAL
  zh: 图 10.28：前端设置成功
- en: Now, you can interact with the Smilecook API using this frontend website interface.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你可以使用这个前端网站界面与 Smilecook API 进行交互。
- en: Summary
  id: totrans-276
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we successfully deployed the Smilecook API to the Heroku cloud
    server. The deployment process is simple as we are leveraging the service provided
    by Heroku. We do not need to worry about purchasing hardware, setting up the server
    OS, connecting the server to the internet, and so on. Everything is provided by
    Heroku. A cloud platform service can quickly help developers to deploy their applications/APIs
    to the internet. This easy deployment process allows developers to focus on development
    and not the infrastructure/platform setup. And once the API is deployed, millions
    of users on the internet can connect to the API through their client-side app.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们成功地将 Smilecook API 部署到了 Heroku 云服务器。由于我们利用了 Heroku 提供的服务，部署过程非常简单。我们不需要担心购买硬件、设置服务器操作系统、将服务器连接到互联网等等。一切都有
    Heroku 提供。云平台服务可以快速帮助开发者将他们的应用程序/API 部署到互联网上。这种简单的部署过程允许开发者专注于开发，而不是基础设施/平台设置。一旦
    API 部署完成，互联网上的数百万用户可以通过他们的客户端应用程序连接到该 API。
- en: Of course, Heroku is just one of the many cloud services available out there.
    As to which cloud service should be chosen, you should consider important factors
    such as cost, additional services provided, and the scale of our application.
    We do not limit you to a particular platform. In fact, we hope that this book
    is a starting point for your journey as a professional developer. With the fundamental
    knowledge that you have learned, you should be able to explore and further develop
    new skills and use new tools to build more advanced APIs.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Heroku只是众多云服务中的一种。至于应该选择哪种云服务，您应该考虑诸如成本、提供的附加服务和我们应用程序的规模等重要因素。我们不会限制您使用特定的平台。实际上，我们希望这本书能成为您作为专业开发者的旅程的起点。凭借您所学的基础知识，您应该能够探索和进一步发展新技能，并使用新工具构建更高级的API。
- en: Congratulations! We have completed the whole book. Not only have you learned
    what an API is, but you have also developed and deployed a real-life API service,
    Smilecook, yourself. Throughout the entire book, you have learned about setting
    up a development environment, building an API, interacting with a database, object
    serialization, security tokens, interacting with third-party APIs, caching, and
    finally deployment. We have covered many different topics horizontally, and we
    have also explored each topic in-depth vertically. Apart from learning the theory,
    you have also practiced actual coding in the exercises and activities. You also
    tested your work thoroughly.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 恭喜！我们已经完成了整本书。您不仅学习了API是什么，而且还自己开发和部署了一个真实的API服务，Smilecook。在整个书中，您学习了如何设置开发环境、构建API、与数据库交互、对象序列化、安全令牌、与第三方API交互、缓存，以及最终的部署。我们横向覆盖了许多不同的主题，同时也深入探讨了每个主题。除了学习理论外，您还在练习和活动中进行了实际的编码，并对您的作品进行了彻底的测试。
- en: Your next steps should involve continuing to learn by working on development
    projects. The most important thing is to have hands-on development experience,
    together with an inquiring mind. Look for a better solution whenever you encounter
    a problem. You should not be satisfied with just getting things done. Instead,
    you should aim at doing things right. That's what will take you to the next level.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 您的下一步应该包括通过参与开发项目来继续学习。最重要的是要有实际的开发经验，并保持好奇心。每当遇到问题时，都要寻找更好的解决方案。您不应该只满足于完成任务。相反，您应该致力于把事情做对。这正是将您带到下一个层次的关键。
- en: We hope you enjoyed the learning journey with us. Thank you!
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望您与我们一同享受了学习之旅。谢谢！
