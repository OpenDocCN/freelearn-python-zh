["```py\n    import board\n    import digitalio\n    import analogio\n    import time\n    ```", "```py\n    class Joystick:\n        def __init__(self):\n            self.adc_x = analogio.AnalogIn(board.GP27)\n            self.adc_y = analogio.AnalogIn(board.GP26)\n            self.button = digitalio.DigitalInOut(board.GP0)\n            self.button.direction = digitalio.Direction.INPUT\n            self.button.pull = digitalio.Pull.UP\n            self.button2 = digitalio.DigitalInOut(board.GP22)\n            self.button2.direction = digitalio.Direction.INPUT\n            self.button2.pull = digitalio.Pull.UP\n            self.mid = 32767\n            self.dead_zone = 10000\n    ```", "```py\n    def get_binary_value(self, value):\n            if abs(value - self.mid) < self.dead_zone:\n                return 0\n            return -1 if value < self.mid else 1\n    ```", "```py\n        def read(self):\n            x_val = self.get_binary_value(self.adc_x.value)\n            y_val = self.get_binary_value(self.adc_y.value)\n            button_state = not self.button.value\n            button2_state = not self.button2.value\n            return x_val, y_val, button_state, button2_state\n    ```", "```py\n    if __name__ == \"__main__\":\n        joystick = Joystick()\n        while True:\n            x, y, button_state, button2_state = joystick.read()\n            print(\"X Position:\", x)\n            print(\"Y Position:\", y)\n            print(\"Button 1 Pressed:\", button_state)\n            print(\"Button 2 Pressed:\", button2_state)\n            time.sleep(5)\n    ```", "```py\n    import time\n    import board\n    import wifi\n    import socketpool\n    import digitalio\n    from adafruit_minimqtt.adafruit_minimqtt import MQTT\n    from joystick import Joystick\n    ```", "```py\n    WIFI_SSID = 'MySSID'\n    WIFI_PASSWORD = 'SSID-password'\n    MQTT_SERVER = \"mqtt-server\"\n    MQTT_PORT = 18756\n    USERNAME = \"mqtt-username\"\n    PASSWORD = \"mqtt-password\"\n    MQTT_TOPIC = \"JoystickPosition\"\n    led = digitalio.DigitalInOut(board.GP5)\n    led.direction = digitalio.Direction.OUTPUT\n    ```", "```py\n    def flash_led(times, duration):\n        for _ in range(times):\n            led.value = True\n            time.sleep(duration)\n            led.value = False\n            time.sleep(duration)\n    ```", "```py\n    def connect_to_wifi():\n        while True:\n            try:\n                print(\"Trying to connect to WiFi...\")\n                wifi.radio.connect(WIFI_SSID, WIFI_PASSWORD)\n                print(\"Connected to Wi-Fi!\")\n                break\n            except Exception as e:\n                print(\"Failed to connect to WiFi. Retrying...\")\n                flash_led(1, 2)\n                time.sleep(3)\n    ```", "```py\n    def connect_to_mqtt(mqtt_client):\n        while True:\n            try:\n                print(\"Trying to connect to MQTT Broker...\")\n                mqtt_client.connect()\n                print(\"Connected to MQTT server!\")\n                break\n            except Exception as e:\n                print(\"Failed to connect to MQTT. Retrying...\")\n                flash_led(1, 0.5)\n                time.sleep(3)\n    ```", "```py\n    connect_to_wifi()\n    pool = socketpool.SocketPool(wifi.radio)\n    mqtt_client = MQTT(broker=MQTT_SERVER, port=MQTT_PORT,\n    username=USERNAME,\n    password=PASSWORD,\n    socket_pool=pool)\n    connect_to_mqtt(mqtt_client)\n    led.value = True\n    joystick = Joystick()\n    ```", "```py\n    def send_mqtt_message(x, y, button1, button2):\n        button1_state = True if button1 else False\n        button2_state = True if button2 else False\n        message = f'X: {x}, Y: {y}, Button 1: \\\n                  {button1_state}, Button 2: {button2_state}'\n        mqtt_client.publish(MQTT_TOPIC, message)\n    ```", "```py\n    def main():\n        while True:\n            x, y, button1_pressed, button2_pressed = joystick.read()\n            send_mqtt_message(x, y, button1_pressed, button2_pressed)\n            time.sleep(1)\n    if __name__ == \"__main__\":\n        main()\n    ```", "```py\n    src folder with the following command:\n\n    ```", "```py\n\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    ```", "```py\n    ros2 pkg create --build-type ament_python --license Apache-2.0 --node-name robot_control mqtt_robot\n    mqtt_robot with the Python build type and generated a node named robot_control. This will give us a Python script named robot_control.py. To navigate to the folder that contains this script, we enter the following command:\n\n    ```", "```py\n    gedit robot_control.py\n    ```", "```py\n\n    ```", "```py\n    import rclpy\n    from rclpy.node import Node\n    from geometry_msgs.msg import Twist\n    import paho.mqtt.client as mqtt\n    ```", "```py\n    class MQTTMessage:\n        def __init__(self):\n            self.x = 0\n            self.y = 0\n            self.button1 = False\n            self.button2 = False\n        def update_values(self, message):\n            parts = message.split(', ')\n            self.x = float(parts[0].split(': ')[1])\n            self.y = float(parts[1].split(': ')[1])\n            self.button1=parts[2].split(': ')[1].strip() == \"True\"\n            self.button2 = parts[3].split(': ')[1].strip() == \"True\"\n    ```", "```py\n    class RobotController(Node):\n        def __init__(self, mqtt_message):\n            super().__init__('robot_controller')\n            self.mqtt_message = mqtt_message\n            self.publisher = self.create_publisher(\n                Twist, 'turtle1/cmd_vel', 10)\n            timer_period = 0.1\n            self.timer = self.create_timer(\n                timer_period, self.timer_callback)\n            self.vel_msg = Twist()\n            self.mqtt_client = mqtt.Client()\n            self.mqtt_client.on_connect = self.on_connect\n            self.mqtt_client.on_message = self.on_message\n            self.mqtt_client.username_pw_set(\n                \"mqtt-username\", \"mqtt-password\")\n            self.mqtt_client.connect(\n                \"driver.cloudmqtt.com\", 18756, 60)\n            self.mqtt_client.loop_start()\n    ```", "```py\n                def on_connect(self, client, userdata, flags, rc):\n                    if rc == 0:\n                        print(\"Connected successfully to MQTT Broker\")\n                        client.subscribe(\"JoystickPosition\")\n                    else:\n                        print(f\"Failed to connect with error code {rc}.\")\n            ```", "```py\n                def on_message(self, client, userdata, msg):\n                    self.mqtt_message.update_values(msg.payload.decode())\n            ```", "```py\n            def timer_callback(self):\n                    if self.mqtt_message.button1:\n                        self.vel_msg.linear.x = 1.0\n                        self.vel_msg.angular.z = 1.0\n                    elif self.mqtt_message.button2:\n                        self.vel_msg.linear.x = -1.0\n                        self.vel_msg.angular.z = -1.0\n                    else:\n                        self.vel_msg.linear.x = float(self.mqtt_message.y)\n                        self.vel_msg.angular.z = float(self.mqtt_message.x)\n                    self.publisher.publish(self.vel_msg)\n            ```", "```py\n            def main(args=None):\n                rclpy.init(args=args)\n                mqtt_message = MQTTMessage()\n                robot_controller = RobotController(mqtt_message)\n                rclpy.spin(robot_controller)\n                robot_controller.destroy_node()\n                rclpy.shutdown()\n            if __name__ == '__main__':\n                main()\n            ```", "```py\n            package.xml in a text editor, we execute the following command:\n\n            ```", "```py\n              <exec_depend>rclpy</exec_depend>\n              <exec_depend>paho-mqtt</exec_depend>\n            ```", "```py\n\n            ```", "```py\n    source /opt/ros/humble/setup.bash\n    ```", "```py\n    cd ~/ch12_ws\n    ```", "```py\n    colcon build\n    ```", "```py\n    source ~/ch12_ws/install/setup.bash\n    ```", "```py\n    robot_control, from the package we created, mqtt_robot. We should observe a message indicating that we have successfully connected to the MQTT broker:\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    code.py program from Thonny.\n    ```"]