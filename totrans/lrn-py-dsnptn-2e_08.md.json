["```py\nfrom abc import  ABCMeta, abstractmethod\n\nclass Compiler(metaclass=ABCMeta):\n    @abstractmethod\n    def collectSource(self):\n        pass\n\n    @abstractmethod\n    def compileToObject(self):\n        pass\n\n    @abstractmethod\n    def run(self):\n        pass\n\n    def compileAndRun(self):\n        self.collectSource()\n        self.compileToObject()\n        self.run()\n\nclass iOSCompiler(Compiler):\n    def collectSource(self):\n        print(\"Collecting Swift Source Code\")\n\n    def compileToObject(self):\n        print(\"Compiling Swift code to LLVM bitcode\")\n\n    def run(self):\n        print(\"Program runing on runtime environment\")\n\niOS = iOSCompiler()\niOS.compileAndRun()\n```", "```py\nfrom abc import ABCMeta, abstractmethod\n\nclass AbstractClass(metaclass=ABCMeta):\n    def __init__(self):\n        pass\n\n    @abstractmethod\n    def operation1(self):\n        pass\n\n    @abstractmethod\n    def operation2(self):\n        pass\n\n    def template_method(self):\n        print(\"Defining the Algorithm. Operation1 follows Operation2\")\n        self.operation2()\n        self.operation1()\n\nclass ConcreteClass(AbstractClass):\n\n    def operation1(self):\n        print(\"My Concrete Operation1\")\n\n    def operation2(self):\n        print(\"Operation 2 remains same\")\n\nclass Client:\n    def main(self):\n        self.concreate = ConcreteClass()\n        self.concreate.template_method()\n\nclient = Client()\nclient.main()\n```", "```py\nfrom abc import abstractmethod, ABCMeta\n\nclass Trip(metaclass=ABCMeta):\n\n    @abstractmethod\n    def setTransport(self):\n        pass\n\n    @abstractmethod\n    def day1(self):\n        pass\n\n    @abstractmethod\n    def day2(self):\n        pass\n\n    @abstractmethod\n    def day3(self):\n        pass\n\n    @abstractmethod\n    def returnHome(self):\n        pass\n\n    def itinerary(self):\n        self.setTransport()\n        self.day1()\n        self.day2()\n        self.day3()\n        self.returnHome()\n```", "```py\nclass VeniceTrip(Trip):\n    def setTransport(self):\n        print(\"Take a boat and find your way in the Grand Canal\")\n\n    def day1(self):\n        print(\"Visit St Mark's Basilica in St Mark's Square\")\n\n    def day2(self):\n        print(\"Appreciate Doge's Palace\")\n\n    def day3(self):\n        print(\"Enjoy the food near the Rialto Bridge\")\n\n    def returnHome(self):\n        print(\"Get souvenirs for friends and get back\")\n\nclass MaldivesTrip(Trip):\n    def setTransport(self):\n        print(\"On foot, on any island, Wow!\")\n\n    def day1(self):\n        print(\"Enjoy the marine life of Banana Reef\")\n\n    def day2(self):\n        print(\"Go for the water sports and snorkelling\")\n\n    def day3(self):\n        print(\"Relax on the beach and enjoy the sun\")\n\n    def returnHome(self):\n        print(\"Dont feel like leaving the beach..\")\n```", "```py\nclass TravelAgency:\n    def arrange_trip(self):\n        choice = input(\"What kind of place you'd like to go historical or to a beach?\")\n        if choice == 'historical':\n            self.trip = VeniceTrip()\n            self.trip.itinerary()\n        if choice == 'beach':\n            self.trip = MaldivesTrip()\n            self.trip.itinerary()\n\nTravelAgency().arrange_trip()\n```"]