["```py\npython -m pip install django-taggit==5.0.1 \n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    **'taggit'****,**\n'blog.apps.BlogConfig',\n] \n```", "```py\n**from** **taggit.managers** **import** **TaggableManager**\nclass Post(models.Model):\n    # ...\n**tags = TaggableManager()** \n```", "```py\npython manage.py makemigrations blog \n```", "```py\nMigrations for 'blog':\n  blog/migrations/0004_post_tags.py\n    - Add field tags to post \n```", "```py\npython manage.py migrate \n```", "```py\nApplying taggit.0001_initial... OK\nApplying taggit.0002_auto_20150616_2121... OK\nApplying taggit.0003_taggeditem_add_unique_index... OK\nApplying taggit.0004_alter_taggeditem_content_type_alter_taggeditem_tag... OK\nApplying taggit.0005_auto_20220424_2025... OK\nApplying taggit.0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx... OK\nApplying blog.0004_post_tags... OK \n```", "```py\npython manage.py shell \n```", "```py\n>>> from blog.models import Post\n>>> post = Post.objects.get(id=1) \n```", "```py\n>>> post.tags.add('music', 'jazz', 'django')\n>>> post.tags.all()\n<QuerySet [<Tag: jazz>, <Tag: music>, <Tag: django>]> \n```", "```py\n>>> post.tags.remove('django')\n>>> post.tags.all()\n<QuerySet [<Tag: jazz>, <Tag: music>]> \n```", "```py\npython manage.py runserver \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}My Blog{% endblock %}\n{% block content %}\n  <h1>My Blog</h1>\n  {% for post in posts %}\n    <h2>\n<a href=\"{{ post.get_absolute_url }}\">\n        {{ post.title }}\n      </a>\n</h2>\n**<****p****class****=****\"tags\"****>****Tags: {{ post.tags.all|join:\", \" }}****</****p****>**\n<p class=\"date\">\n      Published {{ post.publish }} by {{ post.author }}\n    </p>\n    {{ post.body|truncatewords:30|linebreaks }}\n  {% endfor %}\n  {% include \"pagination.html\" with page=page_obj %}\n{% endblock %} \n```", "```py\n**from** **taggit.models** **import** **Tag**\ndef post_list(request**, tag_slug=****None**):\n    post_list = Post.published.all()\n    **tag =** **None**\n**if** **tag_slug:**\n **tag = get_object_or_404(Tag, slug=tag_slug)**\n **post_list = post_list.****filter****(tags__in=[tag])**\n# Pagination with 3 posts per page\n    paginator = Paginator(post_list, 3)\n    page_number = request.GET.get('page', 1)\n    try:\n        posts = paginator.page(page_number)\n    except PageNotAnInteger:\n        # If page_number is not an integer get the first page\n        posts = paginator.page(1)\n    except EmptyPage:\n        # If page_number is out of range get last page of results\n        posts = paginator.page(paginator.num_pages)\n    return render(\n request,\n 'blog/post/list.html',\n {\n 'posts': posts**,**\n **'****tag'****: tag**\n        }\n    ) \n```", "```py\n**path(****''****, views.post_list, name=****'post_list'****),**\n**#** path('', views.PostListView.as_view(), name='post_list'), \n```", "```py\npath(\n    'tag/<slug:tag_slug>/', views.post_list, name='post_list_by_tag'\n    ), \n```", "```py\nfrom django.urls import path\nfrom . import views\napp_name = 'blog'\nurlpatterns = [\n    # Post views\n    path('', views.post_list, name='post_list'),\n    # path('', views.PostListView.as_view(), name='post_list'),\n    path(\n        'tag/<slug:tag_slug>/', views.post_list, name='post_list_by_tag'\n ),\n    path(\n        '<int:year>/<int:month>/<int:day>/<slug:post>/',\n        views.post_detail,\n        name='post_detail'\n ),\n    path('<int:post_id>/share/', views.post_share, name='post_share'),\n    path(\n        '<int:post_id>/comment/', views.post_comment, name='post_comment'\n ),\n] \n```", "```py\n{% include \"pagination.html\" with page=**posts** %} \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}My Blog{% endblock %}\n{% block content %}\n  <h1>My Blog</h1>\n **{% if tag %}**\n**<****h2****>****Posts tagged with \"{{ tag.name }}\"****</****h2****>**\n **{% endif %}**\n  {% for post in posts %}\n    <h2>\n<a href=\"{{ post.get_absolute_url }}\">\n        {{ post.title }}\n      </a>\n</h2>\n<p class=\"tags\">Tags: {{ post.tags.all|join:\", \" }}</p>\n<p class=\"date\">\n      Published {{ post.publish }} by {{ post.author }}\n    </p>\n    {{ post.body|truncatewords:30|linebreaks }}\n  {% endfor %}\n  {% include \"pagination.html\" with page=posts %}\n{% endblock %} \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}My Blog{% endblock %}\n{% block content %}\n  <h1>My Blog</h1>\n  {% if tag %}\n    <h2>Posts tagged with \"{{ tag.name }}\"</h2>\n  {% endif %}\n  {% for post in posts %}\n    <h2>\n<a href=\"{{ post.get_absolute_url }}\">\n        {{ post.title }}\n      </a>\n</h2>\n<p class=\"tags\">\n      Tags:\n **{% for tag in post.tags.all %}**\n**<****a****href****=****\"{% url \"****blog:post_list_by_tag****\"** **tag.slug** **%}\">**\n **{{ tag.name }}**\n**</****a****>****{% if not forloop.last %}, {% endif %}**\n **{% endfor %}**\n</p>\n<p class=\"date\">\n      Published {{ post.publish }} by {{ post.author }}\n    </p>\n    {{ post.body|truncatewords:30|linebreaks }}\n  {% endfor %}\n  {% include \"pagination.html\" with page=posts %}\n{% endblock %} \n```", "```py\nfrom django.db.models import Count \n```", "```py\ndef post_detail(request, year, month, day, post):\n    post = get_object_or_404(\n        Post,\n        status=Post.Status.PUBLISHED,\n        slug=post,\n        publish__year=year,\n        publish__month=month,\n        publish__day=day\n    )\n    # List of active comments for this post\n    comments = post.comments.filter(active=True)\n    # Form for users to comment\n    form = CommentForm()\n**# List of similar posts**\n **post_tags_ids = post.tags.values_list(****'id'****, flat=****True****)**\n **similar_posts = Post.published.****filter****(**\n **tags__in=post_tags_ids**\n **).exclude(****id****=post.****id****)**\n **similar_posts = similar_posts.annotate(**\n **same_tags=Count(****'tags'****)**\n **).order_by(****'-same_tags'****,** **'-publish'****)[:****4****]**\nreturn render(\n        request,\n        'blog/post/detail.html',\n        {\n            'post': post,\n            'comments': comments,\n            'form': form**,**\n**'similar_posts'****: similar_posts**\n        }\n    ) \n```", "```py\n{% extends \"blog/base.html\" %}\n{% block title %}{{ post.title }}{% endblock %}\n{% block content %}\n  <h1>{{ post.title }}</h1>\n<p class=\"date\">\n    Published {{ post.publish }} by {{ post.author }}\n  </p>\n  {{ post.body|linebreaks }}\n  <p>\n<a href=\"{% url \"blog:post_share\" post.id %}\">\n      Share this post\n    </a>\n</p>\n**<****h2****>****Similar posts****</****h2****>**\n **{% for post in similar_posts %}**\n**<****p****>**\n**<****a****href****=****\"{{ post.get_absolute_url }}\"****>****{{ post.title }}****</****a****>**\n**</****p****>**\n **{% empty %}**\n **There are no similar posts yet.**\n **{% endfor %}**\n  {% with comments.count as total_comments %}\n    <h2>\n      {{ total_comments }} comment{{ total_comments|pluralize }}\n    </h2>\n  {% endwith %}\n  {% for comment in comments %}\n    <div class=\"comment\">\n<p class=\"info\">\n        Comment {{ forloop.counter }} by {{ comment.name }}\n        {{ comment.created }}\n      </p>\n      {{ comment.body|linebreaks }}\n    </div>\n  {% empty %}\n    <p>There are no comments yet.</p>\n  {% endfor %}\n  {% include \"blog/post/includes/comment_form.html\" %}\n{% endblock %} \n```", "```py\nblog/\n    __init__.py\n    models.py\n    ...\n    **templatetags/**\n**__init__.py**\n**blog_tags.py** \n```", "```py\nfrom django import template\nfrom ..models import Post\nregister = template.Library()\n@register.simple_tag\ndef total_posts():\n    return Post.published.count() \n```", "```py\n**{% load blog_tags %}**\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n<title>{% block title %}{% endblock %}</title>\n<link href=\"{% static \"css/blog.css\" %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n<div id=\"sidebar\">\n<h2>My blog</h2>\n<p>\n      This is my blog.\n      **I've written {% total_posts %} posts so far.**\n</p>\n</div>\n</body>\n</html> \n```", "```py\npython manage.py runserver \n```", "```py\n@register.inclusion_tag('blog/post/latest_posts.html')\ndef show_latest_posts(count=5):\n    latest_posts = Post.published.order_by('-publish')[:count]\n    return {'latest_posts': latest_posts} \n```", "```py\n<ul>\n  {% for post in latest_posts %}\n    <li>\n<a href=\"{{ post.get_absolute_url }}\">{{ post.title }}</a>\n</li>\n  {% endfor %}\n</ul> \n```", "```py\n{% load blog_tags %}\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n<title>{% block title %}{% endblock %}</title>\n<link href=\"{% static \"css/blog.css\" %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n<div id=\"sidebar\">\n<h2>My blog</h2>\n<p>\n      This is my blog.\n      I've written {% total_posts %} posts so far.\n    </p>\n**<****h3****>****Latest posts****</****h3****>**\n **{% show_latest_posts 3 %}**\n</div>\n</body>\n</html> \n```", "```py\nfrom django.db.models import Count\n@register.simple_tag\ndef get_most_commented_posts(count=5):\n    return Post.published.annotate(\n        total_comments=Count('comments')\n    ).order_by('-total_comments')[:count] \n```", "```py\n{% load blog_tags %}\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n<title>{% block title %}{% endblock %}</title>\n<link href=\"{% static \"css/blog.css\" %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n<div id=\"sidebar\">\n<h2>My blog</h2>\n<p>\n      This is my blog.\n      I've written {% total_posts %} posts so far.\n    </p>\n<h3>Latest posts</h3>\n    {% show_latest_posts 3 %}\n**<****h3****>****Most commented posts****</****h3****>**\n **{% get_most_commented_posts as most_commented_posts %}**\n**<****ul****>**\n **{% for post in most_commented_posts %}**\n**<****li****>**\n**<****a****href****=****\"{{ post.get_absolute_url }}\"****>****{{ post.title }}****</****a****>**\n**</****li****>**\n **{% endfor %}**\n**</****ul****>**\n</div>\n</body>\n</html> \n```", "```py\npython -m pip install markdown==3.6 \n```", "```py\nimport markdown\nfrom django.utils.safestring import mark_safe\n@register.filter(name='markdown')\ndef markdown_format(text):\n    return mark_safe(markdown.markdown(text)) \n```", "```py\n{% extends \"blog/base.html\" %}\n**{% load blog_tags %}**\n{% block title %}{{ post.title }}{% endblock %}\n{% block content %}\n  <h1>{{ post.title }}</h1>\n<p class=\"date\">\n    Published {{ post.publish }} by {{ post.author }}\n  </p>\n  {{ post.body**|markdown** }}\n  <p>\n<a href=\"{% url \"blog:post_share\" post.id %}\">\n      Share this post\n    </a>\n</p>\n<h2>Similar posts</h2>\n  {% for post in similar_posts %}\n    <p>\n<a href=\"{{ post.get_absolute_url }}\">{{ post.title }}</a>\n</p>\n  {% empty %}\n    There are no similar posts yet.\n  {% endfor %}\n  {% with comments.count as total_comments %}\n    <h2>\n      {{ total_comments }} comment{{ total_comments|pluralize }}\n    </h2>\n  {% endwith %}\n  {% for comment in comments %}\n    <div class=\"comment\">\n<p class=\"info\">\n        Comment {{ forloop.counter }} by {{ comment.name }}\n        {{ comment.created }}\n      </p>\n      {{ comment.body|linebreaks }}\n    </div>\n  {% empty %}\n    <p>There are no comments yet.</p>\n  {% endfor %}\n  {% include \"blog/post/includes/comment_form.html\" %}\n{% endblock %} \n```", "```py\n{% extends \"blog/base.html\" %}\n**{% load blog_tags %}**\n{% block title %}My Blog{% endblock %}\n{% block content %}\n  <h1>My Blog</h1>\n  {% if tag %}\n    <h2>Posts tagged with \"{{ tag.name }}\"</h2>\n  {% endif %}\n  {% for post in posts %}\n    <h2>\n<a href=\"{{ post.get_absolute_url }}\">\n        {{ post.title }}\n      </a>\n</h2>\n<p class=\"tags\">\n      Tags:\n      {% for tag in post.tags.all %}\n        <a href=\"{% url \"blog:post_list_by_tag\" tag.slug %}\">\n          {{ tag.name }}\n        </a>\n        {% if not forloop.last %}, {% endif %}\n      {% endfor %}\n    </p>\n<p class=\"date\">\n      Published {{ post.publish }} by {{ post.author }}\n    </p>\n    {{ post.body**|markdown|truncatewords_html:30** }}\n  {% endfor %}\n  {% include \"pagination.html\" with page=posts %}\n{% endblock %} \n```", "```py\nThis is a post formatted with markdown\n--------------------------------------\n*This is emphasized* and **this is more emphasized**.\nHere is a list:\n* One\n* Two\n* Three\nAnd a [link to the Django website](https://www.djangoproject.com/). \n```", "```py\n# ...\n**SITE_ID =** **1**\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    **'django.contrib.sites'****,**\n**'django.contrib.sitemaps'****,**\n'django.contrib.staticfiles',\n    'taggit',\n    'blog.apps.BlogConfig',\n] \n```", "```py\npython manage.py migrate \n```", "```py\nApplying sites.0001_initial... OK\nApplying sites.0002_alter_domain_unique... OK \n```", "```py\nfrom django.contrib.sitemaps import Sitemap\nfrom .models import Post\nclass PostSitemap(Sitemap):\n    changefreq = 'weekly'\n    priority = 0.9\ndef items(self):\n        return Post.published.all()\n    def lastmod(self, obj):\n        return obj.updated \n```", "```py\nfrom django.contrib import admin\n**from** **django.contrib.sitemaps.views** **import** **sitemap**\nfrom django.urls import include, path\n**from** **blog.sitemaps** **import** **PostSitemap**\n**sitemaps = {**\n**'posts'****: PostSitemap,**\n**}**\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('blog/', include('blog.urls', namespace='blog')),\n **path(**\n**'sitemap.xml'****,**\n **sitemap,**\n **{****'sitemaps'****: sitemaps},**\n **name=****'django.contrib.sitemaps.views.sitemap'**\n **)**\n] \n```", "```py\npython manage.py runserver \n```", "```py\n<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\" xmlns:xhtml=\"http://www.w3.org/1999/xhtml\">\n<url>\n<loc>http://example.com/blog/2024/1/2/markdown-post/</loc>\n<lastmod>2024-01-02</lastmod>\n<changefreq>weekly</changefreq>\n<priority>0.9</priority>\n</url>\n<url>\n<loc>http://example.com/blog/2024/1/2/notes-on-duke-ellington/</loc>\n<lastmod>2024-01-02</lastmod>\n<changefreq>weekly</changefreqa>\n<priority>0.9</priority>\n</url>\n<url>\n<loc>http://example.com/blog/2024/1/2/who-was-miles-davis/</loc>\n<lastmod>2024-01-02</lastmod>\n<changefreq>weekly</changefreq>\n<priority>0.9</priority>\n</url>\n<url>\n<loc>http://example.com/blog/2024/1/1/who-was-django-reinhardt/</loc>\n<lastmod>2024-01-01</lastmod>\n<changefreq>weekly</changefreq>\n<priority>0.9</priority>\n</url>\n<url>\n<loc>http://example.com/blog/2024/1/1/another-post/</loc>\n<lastmod>2024-01-01</lastmod>\n<changefreq>weekly</changefreq>\n<priority>0.9</priority>\n</url>\n</urlset> \n```", "```py\nimport markdown\nfrom django.contrib.syndication.views import Feed\nfrom django.template.defaultfilters import truncatewords_html\nfrom django.urls import reverse_lazy\nfrom .models import Post\nclass LatestPostsFeed(Feed):\n    title = 'My blog'\n    link = reverse_lazy('blog:post_list')\n    description = 'New posts of my blog.'\ndef items(self):\n        return Post.published.all()[:5]\n    def item_title(self, item):\n        return item.title\n    def item_description(self, item):\n        return truncatewords_html(markdown.markdown(item.body), 30)\n    def item_pubdate(self, item):\n        return item.publish \n```", "```py\nfrom django.urls import path\nfrom . import views\n**from** **.feeds** **import** **LatestPostsFeed**\napp_name = 'blog'\nurlpatterns = [\n    # Post views\n    path('', views.post_list, name='post_list'),\n    # path('', views.PostListView.as_view(), name='post_list'),\n    path(\n        'tag/<slug:tag_slug>/', views.post_list, name='post_list_by_tag'\n ),\n    path(\n        '<int:year>/<int:month>/<int:day>/<slug:post>/',\n        views.post_detail,\n        name='post_detail'\n ),\n    path('<int:post_id>/share/', views.post_share, name='post_share'),\n    path(\n        '<int:post_id>/comment/', views.post_comment, name='post_comment'\n ),\n    **path(****'feed/'****, LatestPostsFeed(), name=****'post_feed'****),**\n] \n```", "```py\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<rss xmlns:atom=\"http://www.w3.org/2005/Atom\" version=\"2.0\">\n<channel>\n<title>My blog</title>\n<link>http://localhost:8000/blog/</link>\n<description>New posts of my blog.</description>\n<atom:link href=\"http://localhost:8000/blog/feed/\" rel=\"self\"/>\n<language>en-us</language>\n<lastBuildDate>Tue, 02 Jan 2024 16:30:00 +0000</lastBuildDate>\n<item>\n<title>Markdown post</title>\n<link>http://localhost:8000/blog/2024/1/2/markdown-post/</link>\n<description>This is a post formatted with ...</description>\n<guid>http://localhost:8000/blog/2024/1/2/markdown-post/</guid>\n</item>\n    ...\n  </channel>\n</rss> \n```", "```py\n{% load blog_tags %}\n{% load static %}\n<!DOCTYPE html>\n<html>\n<head>\n<title>{% block title %}{% endblock %}</title>\n<link href=\"{% static \"css/blog.css\" %}\" rel=\"stylesheet\">\n</head>\n<body>\n<div id=\"content\">\n    {% block content %}\n    {% endblock %}\n  </div>\n<div id=\"sidebar\">\n<h2>My blog</h2>\n<p>\n      This is my blog.\n      I've written {% total_posts %} posts so far.\n    </p>\n**<****p****>**\n**<****a****href****=****\"{% url \"****blog:post_feed****\" %}\">**\n **Subscribe to my RSS feed**\n**</****a****>**\n**</****p****>**\n<h3>Latest posts</h3>\n    {% show_latest_posts 3 %}\n    <h3>Most commented posts</h3>\n    {% get_most_commented_posts as most_commented_posts %}\n    <ul>\n      {% for post in most_commented_posts %}\n        <li>\n<a href=\"{{ post.get_absolute_url }}\">{{ post.title }}</a>\n</li>\n      {% endfor %}\n    </ul>\n</div>\n</body>\n</html> \n```", "```py\nfrom blog.models import Post\nPost.objects.filter(body__contains='framework') \n```", "```py\ndocker pull postgres:16.2 \n```", "```py\ndocker run --name=blog_db -e POSRGRES_DB=blog -e POSTGRES_USER=blog -e POSTGRES_PASSWORD=xxxxx -p 5432:5432 -d postgres:16.2 \n```", "```py\npython -m pip install psycopg==3.1.18 \n```", "```py\npython manage.py dumpdata --indent=2 --output=mysite_data.json \n```", "```py\npython -Xutf8 manage.py dumpdata --indent=2 --output=mysite_data.json \n```", "```py\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.**postgresql**',\n        'NAME': **config(****'DB_NAME'****),**\n**'USER'****: config(****'DB_USER'****),**\n**'PASSWORD'****: config(****'DB_PASSWORD'****),**\n**'HOST'****: config(****'DB_HOST'****),**\n    }\n} \n```", "```py\nEMAIL_HOST_USER=your_account@gmail.com\nEMAIL_HOST_PASSWORD=xxxxxxxxxxxx\nDEFAULT_FROM_EMAIL=My Blog <your_account@gmail.com>\n**DB_NAME=blog**\n**DB_USER=blog**\n**DB_PASSWORD=xxxxx**\n**DB_HOST=localhost** \n```", "```py\npython manage.py migrate \n```", "```py\nOperations to perform:\n  Apply all migrations: admin, auth, blog, contenttypes, sessions, sites, taggit\nRunning migrations:\n  Applying contenttypes.0001_initial... OK\n  Applying auth.0001_initial... OK\n  Applying admin.0001_initial... OK\n  Applying admin.0002_logentry_remove_auto_add... OK\n  Applying admin.0003_logentry_add_action_flag_choices... OK\n  Applying contenttypes.0002_remove_content_type_name... OK\n  Applying auth.0002_alter_permission_name_max_length... OK\n  Applying auth.0003_alter_user_email_max_length... OK\n  Applying auth.0004_alter_user_username_opts... OK\n  Applying auth.0005_alter_user_last_login_null... OK\n  Applying auth.0006_require_contenttypes_0002... OK\n  Applying auth.0007_alter_validators_add_error_messages... OK\n  Applying auth.0008_alter_user_username_max_length... OK\n  Applying auth.0009_alter_user_last_name_max_length... OK\n  Applying auth.0010_alter_group_name_max_length... OK\n  Applying auth.0011_update_proxy_permissions... OK\n  Applying auth.0012_alter_user_first_name_max_length... OK\n  Applying taggit.0001_initial... OK\n  Applying taggit.0002_auto_20150616_2121... OK\n  Applying taggit.0003_taggeditem_add_unique_index... OK\n  Applying taggit.0004_alter_taggeditem_content_type_alter_taggeditem_tag... OK\n  Applying taggit.0005_auto_20220424_2025... OK\n  Applying taggit.0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx... OK\n  Applying blog.0001_initial... OK\n  Applying blog.0002_alter_post_slug... OK\n  Applying blog.0003_comment... OK\n  Applying blog.0004_post_tags... OK\n  Applying sessions.0001_initial... OK\n  Applying sites.0001_initial... OK\n  Applying sites.0002_alter_domain_unique... OK \n```", "```py\npython manage.py loaddata mysite_data.json \n```", "```py\nInstalled 104 object(s) from 1 fixture(s) \n```", "```py\npython manage.py runserver \n```", "```py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.sites',\n    'django.contrib.sitemaps',\n    'django.contrib.staticfiles',\n **'django.contrib.postgres'****,**\n'taggit',\n    'blog.apps.BlogConfig',\n] \n```", "```py\npython manage.py shell \n```", "```py\n>>> from blog.models import Post\n>>> Post.objects.filter(title__search='django')\n<QuerySet [<Post: Who was Django Reinhardt?>]> \n```", "```py\n>>> from django.contrib.postgres.search import SearchVector\n>>> from blog.models import Post\n>>>\n>>> Post.objects.annotate(\n...     search=SearchVector('title', 'body'),\n... ).filter(search='django')\n<QuerySet [<Post: Markdown post>, <Post: Who was Django Reinhardt?>]> \n```", "```py\nclass SearchForm(forms.Form):\n    query = forms.CharField() \n```", "```py\n# ...\n**from** **django.contrib.postgres.search** **import** **SearchVector**\nfrom .forms import CommentForm, EmailPostForm**, SearchForm**\n# ...\n**def****post_search****(****request****):**\n**form = SearchForm()**\n**query =** **None**\n**results = []**\n**if****'query'****in** **request.GET:**\n**form = SearchForm(request.GET)**\n**if** **form.is_valid():**\n**query = form.cleaned_data[****'query'****]**\n**results = (**\n **Post.published.annotate(**\n**search=SearchVector(****'title'****,** **'body'****),**\n**)**\n **.****filter****(search=query)**\n **)**\n**return** **render(**\n**request,**\n**'blog/post/search.html'****,**\n**{**\n**'form'****: form,**\n**'query'****: query,**\n**'results'****: results**\n**}**\n **)** \n```", "```py\n{% extends \"blog/base.html\" %}\n{% load blog_tags %}\n{% block title %}Search{% endblock %}\n{% block content %}\n  {% if query %}\n    <h1>Posts containing \"{{ query }}\"</h1>\n<h3>\n      {% with results.count as total_results %}\n        Found {{ total_results }} result{{ total_results|pluralize }}\n      {% endwith %}\n    </h3>\n    {% for post in results %}\n      <h4>\n<a href=\"{{ post.get_absolute_url }}\">\n          {{ post.title }}\n        </a>\n</h4>\n      {{ post.body|markdown|truncatewords_html:12 }}\n    {% empty %}\n      <p>There are no results for your query.</p>\n    {% endfor %}\n    <p><a href=\"{% url \"blog:post_search\" %}\">Search again</a></p>\n  {% else %}\n    <h1>Search for posts</h1>\n<form method=\"get\">\n      {{ form.as_p }}\n      <input type=\"submit\" value=\"Search\">\n</form>\n  {% endif %}\n{% endblock %} \n```", "```py\nurlpatterns = [\n    # Post views\n    path('', views.post_list, name='post_list'),\n    # path('', views.PostListView.as_view(), name='post_list'),\n    path(\n        'tag/<slug:tag_slug>/', views.post_list, name='post_list_by_tag'\n ),\n    path(\n        '<int:year>/<int:month>/<int:day>/<slug:post>/',\n        views.post_detail,\n        name='post_detail'\n ),\n    path('<int:post_id>/share/', views.post_share, name='post_share'),\n    path(\n        '<int:post_id>/comment/', views.post_comment, name='post_comment'\n ),\n    path('feed/', LatestPostsFeed(), name='post_feed'),\n    **path(****'search/'****, views.post_search, name=****'post_search'****),**\n] \n```", "```py\nfrom django.contrib.postgres.search import (\n SearchVector,\n    SearchQuery,\n    SearchRank\n) \n```", "```py\ndef post_search(request):\n    form = SearchForm()\n    query = None\n    results = []\n    if 'query' in request.GET:\n        form = SearchForm(request.GET)\n        if form.is_valid():\n            query = form.cleaned_data['query']\n            **search_vector = SearchVector(****'title'****,** **'body'****)**\n**search_query = SearchQuery(query)**\n            results = (\n                Post.published.annotate(\n                    search=**search_vector,**\n**rank=SearchRank(search_vector, search_query)**\n                )\n                .filter(search=**search_query**)\n **.order_by(****'-rank'****)**\n            )\n    return render(\n request,\n 'blog/post/search.html',\n {\n 'form': form,\n 'query': query,\n 'results': results\n }\n    ) \n```", "```py\nsearch_vector = SearchVector('title', 'body'**, config=****'spanish'**)\nsearch_query = SearchQuery(query**, config=****'spanish'**)\nresults = (\n    Post.published.annotate(\n        search=search_vector,\n        rank=SearchRank(search_vector, search_query)\n    )\n    .filter(search=search_query)\n    .order_by('-rank')\n) \n```", "```py\ndef post_search(request):\n    form = SearchForm()\n    query = None\n    results = []\n    if 'query' in request.GET:\n        form = SearchForm(request.GET)\n        if form.is_valid():\n            query = form.cleaned_data['query']\n            search_vector = SearchVector(\n                'title'**, weight=****'A'**\n **) + SearchVector(****'body'****, weight=****'B'****)**\n            search_query = SearchQuery(query)\n            results = (\n                Post.published.annotate(\n                    search=search_vector,\n                    rank=SearchRank(search_vector, search_query)\n                )\n                .filter(**rank__gte=****0.3**)\n                .order_by('-rank')\n            )\n    return render(\n request,\n 'blog/post/search.html',\n {\n 'form': form,\n 'query': query,\n 'results': results\n }\n    ) \n```", "```py\npython manage.py makemigrations --name=trigram_ext --empty blog \n```", "```py\nMigrations for 'blog':\n  blog/migrations/0005_trigram_ext.py \n```", "```py\n**from** **django.contrib.postgres.operations** **import** **TrigramExtension**\nfrom django.db import migrations\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('blog', '0004_post_tags'),\n    ]\n    operations = [\n        **TrigramExtension()**\n    ] \n```", "```py\npython manage.py migrate blog \n```", "```py\nRunning migrations:\n  Applying blog.0005_trigram_ext... OK \n```", "```py\nfrom django.contrib.postgres.search import TrigramSimilarity \n```", "```py\ndef post_search(request):\n    form = SearchForm()\n    query = None\n    results = []\n    if 'query' in request.GET:\n        form = SearchForm(request.GET)\n        if form.is_valid():\n            query = form.cleaned_data['query']\n            results = (\n                Post.published.annotate(\n                    **similarity=TrigramSimilarity(****'title'****, query),**\n                )\n                .filter(**similarity__gt=****0.1**)\n                .order_by(**'-similarity'**)\n            )\n    return render(\n request,\n 'blog/post/search.html',\n {\n 'form': form,\n 'query': query,\n 'results': results\n }\n    ) \n```"]