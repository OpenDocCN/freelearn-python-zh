["```py\n    // C# \n    sbyte minSbyte = -128; \n    byte maxByte = 255; \n    Console.WriteLine(\"minSbyte: {0}\", minSbyte); \n    Console.WriteLine(\"maxByte: {0}\", maxByte); \n\n    /* \n      Output \n      minSbyte: -128 \n      maxByte: 255 \n    */ \n\n```", "```py\n    short minShort = -32768; \n    ushort maxUShort = 65535; \n    Console.WriteLine(\"minShort: {0}\", minShort); \n    Console.WriteLine(\"maxUShort: {0}\", maxUShort); \n\n    int minInt = -2147483648; \n    uint maxUint = 4294967295; \n    Console.WriteLine(\"minInt: {0}\", minInt); \n    Console.WriteLine(\"maxUint: {0}\", maxUint); \n\n    long minLong = -9223372036854775808; \n    ulong maxUlong = 18446744073709551615;  \n    Console.WriteLine(\"minLong: {0}\", minLong); \n    Console.WriteLine(\"maxUlong: {0}\", maxUlong); \n\n    /* \n      Output \n      minShort: -32768 \n      maxUShort: 65535 \n      minInt: -2147483648 \n      maxUint: 4294967295 \n      minLong: -9223372036854775808 \n      maxUlong: 18446744073709551615 \n    */ \n\n```", "```py\n    //Java \n    byte myByte = -128; \n    byte bigByte = 127; \n\n    Byte minByte = new Byte(myByte); \n    Byte maxByte = new Byte(\"128\"); \n    System.out.println(minByte);  \n    System.out.println(bigByte); \n    System.out.println(maxByte); \n\n    /* \n      Output \n      -128 \n      127 \n      127 \n    */ \n\n```", "```py\n    //Short class \n    Short minShort = new Short(myShort); \n    Short maxShort = new Short(\"32767\"); \n    System.out.println(minShort);  \n    System.out.println(bigShort); \n    System.out.println(maxShort); \n\n    int myInt = -2147483648; \n    int bigInt = 2147483647; \n\n    //Integer class \n    Integer minInt = new Integer(myInt); \n    Integer maxInt = new Integer(\"2147483647\"); \n    System.out.println(minInt);  \n    System.out.println(bigInt); \n    System.out.println(maxInt); \n\n    long myLong = -9223372036854775808L; \n    long bigLong = 9223372036854775807L; \n\n    //Long class \n    Long minLong = new Long(myLong); \n    Long maxLong = new Long(\"9223372036854775807\"); \n    System.out.println(minLong);  \n    System.out.println(bigLong); \n    System.out.println(maxLong); \n\n    /* \n      Output \n      -32768 \n      32767 \n      32767 \n      -2147483648 \n      2147483647 \n      2147483647 \n      -9223372036854775808 \n      9223372036854775807 \n      9223372036854775807 \n   */ \n\n```", "```py\n    Long maxLong = new Long(\"9223372036854775807\"); \n\n```", "```py\n    //Objective-C \n    char number = -127; \n    unsigned char uNumber = 255; \n    NSLog(@\"Signed char number: %hhd\", number); \n    NSLog(@\"Unsigned char uNumber: %hhu\", uNumber); \n\n    //fixed width \n    int8_t fixedNumber = -127; \n    uint8_t fixedUNumber = 255; \n    NSLog(@\"fixedNumber8: %hhd\", fixedNumber8); \n    NSLog(@\"fixedUNumber8: %hhu\", fixedUNumber8); \n\n    NSNumber *charNumber = [NSNumber numberWithChar:number]; \n    NSLog(@\"Char charNumber: %@\", [charNumber stringValue]); \n\n    /*  \n      Output \n      Signed char number: -127 \n      Unsigned char uNumber: 255 \n      fixedNumber8: -127 \n      fixedUNumber8: 255 \n      Char charNumber: -127 \n    */ \n\n```", "```py\n    //Larger Objective-C types \n    short aShort = -32768; \n    unsigned short anUnsignedShort = 65535; \n    NSLog(@\"Signed short aShort: %hd\", aShort); \n    NSLog(@\"Unsigned short anUnsignedShort: %hu\", anUnsignedShort); \n\n    int16_t fixedNumber16 = -32768; \n    uint16_t fixedUNumber16 = 65535; \n    NSLog(@\"fixedNumber16: %hd\", fixedNumber16); \n    NSLog(@\"fixedUNumber16: %hu\", fixedUNumber16); \n\n    NSNumber *shortNumber = [NSNumber numberWithShort:aShort]; \n    NSLog(@\"Short shortNumber: %@\", [shortNumber stringValue]); \n\n    int anInt = -2147483648; \n    unsigned int anUnsignedInt = 4294967295; \n    NSLog(@\"Signed Int anInt: %d\", anInt); \n    NSLog(@\"Unsigned Int anUnsignedInt: %u\", anUnsignedInt); \n\n    int32_t fixedNumber32 = -2147483648; \n    uint32_t fixedUNumber32 = 4294967295; \n    NSLog(@\"fixedNumber32: %d\", fixedNumber32); \n    NSLog(@\"fixedUNumber32: %u\", fixedUNumber32); \n\n    NSNumber *intNumber = [NSNumber numberWithInt:anInt]; \n    NSLog(@\"Int intNumber: %@\", [intNumber stringValue]); \n\n    long long aLongLong = -9223372036854775808; \n    unsigned long long anUnsignedLongLong = 18446744073709551615; \n    NSLog(@\"Signed long long aLongLong: %lld\", aLongLong); \n    NSLog(@\"Unsigned long long anUnsignedLongLong: %llu\", anUnsignedLongLong); \n\n    int64_t fixedNumber64 = -9223372036854775808; \n    uint64_t fixedUNumber64 = 18446744073709551615; \n    NSLog(@\"fixedNumber64: %lld\", fixedNumber64); \n    NSLog(@\"fixedUNumber64: %llu\", fixedUNumber64); \n\n    NSNumber *longlongNumber = [NSNumber numberWithLongLong:aLongLong]; \n    NSLog(@\"Long long longlongNumber: %@\", [longlongNumber stringValue]); \n\n    /*  \n      Output \n      Signed short aShort: -32768 \n      Unsigned short anUnsignedShort: 65535 \n      fixedNumber16: -32768 \n      fixedUNumber16: 65535 \n      Short shortNumber: -32768 \n      Signed Int anInt: -2147483648 \n      Unsigned Int anUnsignedInt: 4294967295 \n      fixedNumber32: -2147483648 \n      fixedUNumber32: 4294967295 \n      Int intNumber: -2147483648 \n      Signed long long aLongLong: -9223372036854775808 \n      Unsigned long long anUnsignedLongLong: 18446744073709551615 \n      fixedNumber64: -9223372036854775808 \n      fixedUNumber64: 18446744073709551615 \n      Long long longlongNumber: -9223372036854775808 \n    */ \n\n```", "```py\n    //Swift \n    var int8 : Int8 = -127 \n    var uint8 : UInt8 = 255 \n    print(\"int8: \\(int8)\") \n    print(\"uint8: \\(uint8)\") \n\n    /*  \n      Output \n      int8: -127  \n      uint8: 255 \n    */ \n\n```", "```py\n    //Larger Swift types \n    var int16 : Int16 = -32768 \n    var uint16 : UInt16 = 65535 \n    print(\"int16: \\(int16)\") \n    print(\"uint16: \\(uint16)\") \n\n    var int32 : Int32 = -2147483648 \n    var uint32 : UInt32 = 4294967295 \n    print(\"int32: \\(int32)\") \n    print(\"uint32: \\(uint32)\") \n\n    var int64 : Int64 = -9223372036854775808 \n    var uint64 : UInt64 = 18446744073709551615 \n    print(\"int64: \\(int64)\") \n    print(\"uint64: \\(uint64)\") \n\n    /*  \n      Output \n      int16: -32768 \n      uint16: 65535 \n      int32: -2147483648 \n      uint32: 4294967295 \n      int64: -9223372036854775808 \n      uint64: 18446744073709551615 \n    */ \n\n```", "```py\n    //C# \n    float piFloat = 3.14159265358979323846264338327f; \n    Console.WriteLine(\"piFloat: {0}\", piFloat); \n\n    /*  \n      Output \n      piFloat: 3.141593 \n    */ \n\n```", "```py\n    //Java \n    float piFloat = 3.141592653589793238462643383279f; \n    System.out.println(piFloat);  \n\n    /*  \n      Output \n      3.1415927 \n    */ \n\n```", "```py\n    //Objective-C \n    float piFloat = 3.14159265358979323846264338327f; \n    NSLog(@\"piFloat: %f\", piFloat); \n\n    NSNumber *floatNumber = [NSNumber numberWithFloat:piFloat]; \n    NSLog(@\"floatNumber: %@\", [floatNumber stringValue]); \n\n    /*  \n      Output \n      piFloat: 3.141593 \n      floatNumber: 3.141593 \n    */ \n\n```", "```py\n    //Swift \n    var floatValue : Float = 3.141592653589793238462643383279 \n    print(\"floatValue: \\(floatValue)\") \n\n    /* \n      Output \n      floatValue: 3.141593 \n    */ \n\n```", "```py\n    //C# \n    double piDouble = 3.14159265358979323846264338327; \n    double wholeDouble = 3d; \n    Console.WriteLine(\"piDouble: {0}\", piDouble); \n    Console.WriteLine(\"wholeDouble: {0}\", wholeDouble); \n\n    /*  \n      Output \n      piDouble: 3.14159265358979 \n      wholeDouble: 3 \n    */ \n\n```", "```py\n    double piDouble = 3.141592653589793238462643383279; \n    System.out.println(piDouble); \n\n    /*  \n      Output \n      3.141592653589793 \n    */ \n\n```", "```py\n    //Objective-C \n    double piDouble = 3.14159265358979323846264338327; \n    NSLog(@\"piDouble: %.15f\", piDouble); \n\n    NSNumber *doubleNumber = [NSNumber numberWithDouble:piDouble]; \n    NSLog(@\"doubleNumber: %@\", [doubleNumber stringValue]); \n\n    /* \n      Output \n      piDouble: 3.141592653589793 \n      doubleNumber: 3.141592653589793 \n    */ \n\n```", "```py\n    //Swift \n    var doubleValue : Double = 3.141592653589793238462643383279 \n    print(\"doubleValue: \\(doubleValue)\") \n\n    /* \n      Output \n      doubleValue: 3.14159265358979 \n    */ \n\n```", "```py\n    var decimalValue = NSDecimalNumber.init(string:\"3.141592653589793238462643383279\") \n    print(\"decimalValue \\(decimalValue)\") \n\n    /* \n      Output \n      piDecimal: 3.1415926535897932384626433833 \n    */ \n\n```", "```py\n    BigDecimal piDecimal = new BigDecimal(\"3.141592653589793238462643383279\"); \n    System.out.println(piDecimal); \n\n    /* \n      Output \n      3.141592653589793238462643383279 \n    */ \n\n```", "```py\n    //Objective-C \n    NSDecimalNumber *piDecimalNumber = [[NSDecimalNumber alloc] initWithDouble:3.14159265358979323846264338327]; \n    NSLog(@\"piDecimalNumber: %@\", [piDecimalNumber stringValue]); \n\n    /* \n      Output \n      piDecimalNumber: 3.141592653589793792 \n    */ \n\n```", "```py\n    var decimalValue = NSDecimalNumber.init(string:\"3.141592653589793238462643383279\") \n    print(\"decimalValue \\(decimalValue)\") \n\n    /* \n      Output \n      decimalValue 3.141592653589793238462643383279 \n    */ \n\n```", "```py\n    double myDouble = @\"chicken\"; \n    NSNumber *myNumber = @\"salad\"; \n\n```", "```py\n    int a = 10; \n    double b = a++; \n\n```", "```py\n    double x = \"54\"; \n\n```", "```py\n    double x = double.Parse(\"42\"); \n    Console.WriteLine(\"40 + 2 = {0}\", x); \n\n    /* \n      Output \n      40 + 2 = 42 \n    */ \n\n```", "```py\n    //C# \n    piFloat = piDouble; \n\n```", "```py\n    //C# \n    piFloat = (float)piDouble;   \n\n```", "```py\n    //C# \n    piDouble = piFloat; \n\n```", "```py\n    //C# \n    piDouble = (double)piFloat; \n\n```", "```py\n    //C# \n    bool a = true; \n    bool b = false; \n    bool c = a; \n\n    Console.WriteLine(\"a: {0}\", a); \n    Console.WriteLine(\"b: {0}\", b); \n    Console.WriteLine(\"c: {0}\", c); \n    Console.WriteLine(\"a AND b: {0}\", a && b); \n    Console.WriteLine(\"a OR b: {0}\", a || b); \n    Console.WriteLine(\"NOT a: {0}\", !a); \n    Console.WriteLine(\"NOT b: {0}\", !b); \n    Console.WriteLine(\"a XOR b: {0}\", a ^ b); \n    Console.WriteLine(\"(c OR b) AND a: {0}\", (c || b) && a); \n\n    /* \n      Output \n      a: True \n      b: False \n      c: True \n      a AND b: False \n      a OR b: True \n      NOT a: False \n      NOT b: True \n      a XOR b: True \n      (c OR b) AND a: True \n    */ \n\n```", "```py\n    //Java \n    boolean a = true; \n    boolean b = false; \n    boolean c = a; \n\n    System.out.println(\"a: \" + a); \n    System.out.println(\"b: \" + b); \n    System.out.println(\"c: \" + c); \n    System.out.println(\"a AND b: \" + (a && b)); \n    System.out.println(\"a OR b: \" + (a || b)); \n    System.out.println(\"NOT a: \" + !a); \n    System.out.println(\"NOT b: \" + !b); \n    System.out.println(\"a XOR b: \" + (a ^ b)); \n    System.out.println(\"(c OR b) AND a: \" + ((c || b) && a)); \n\n    /* \n      Output \n      a: true \n      b: false \n      c: true \n      a AND b: false \n      a OR b: true \n      NOT a: false \n      NOT b: true \n      a XOR b: true \n     (c OR b) AND a: true \n    */ \n\n```", "```py\n    //Objective-C \n    BOOL a = YES; \n    BOOL b = NO; \n    BOOL c = a; \n\n    NSLog(@\"a: %hhd\", a); \n    NSLog(@\"b: %hhd\", b); \n    NSLog(@\"c: %hhd\", c); \n    NSLog(@\"a AND b: %d\", a && b); \n    NSLog(@\"a OR b: %d\", a || b); \n    NSLog(@\"NOT a: %d\", !a); \n    NSLog(@\"NOT b: %d\", !b); \n    NSLog(@\"a XOR b: %d\", a ^ b); \n    NSLog(@\"(c OR b) AND a: %d\", (c || b) && a); \n\n    /* \n      Output \n      a: 1 \n      b: 0 \n      c: 1 \n      a AND b: 0 \n      a OR b: 1 \n      NOT a: 0 \n      NOT b: 1 \n      a XOR b: 1 \n      (c OR b) AND a: 1 \n    */ \n\n```", "```py\n    //Swift \n    var a : Bool = true \n    var b : Bool = false \n    var c = a \n\n    print(\"a: \\(a)\") \n    print(\"b: \\(b)\") \n    print(\"c: \\(c)\") \n    print(\"a AND b: \\(a && b)\") \n    print(\"a OR b: \\(a || b)\") \n    print(\"NOT a: \\(!a)\") \n    print(\"NOT b: \\(!b)\") \n    print(\"a XOR b: \\(a != b)\") \n    print(\"(c OR b) AND a: \\((c || b) && a)\") \n\n    /* \n      Output \n      a: true \n      b: false \n      c: true \n      a AND b: false \n      a OR b: true \n      NOT a: false \n      NOT b: true \n      a XOR b: true \n      (c OR b) AND a: true \n    */ \n\n```", "```py\n    //C# \n    string one = \"One String\"; \n    Console.WriteLine(\"One: {0}\", one); \n\n    String two = \"Two String\"; \n    Console.WriteLine(\"Two: {0}\", two); \n\n    String red = \"Red String\"; \n    Console.WriteLine(\"Red: {0}\", red); \n\n    String blue = \"Blue String\"; \n    Console.WriteLine(\"Blue: {0}\", blue); \n\n    String purple = red + blue; \n    Console.WriteLine(\"Concatenation: {0}\", purple); \n\n    purple = \"Purple String\"; \n    Console.WriteLine(\"Whoops! Mutation: {0}\", purple); \n\n```", "```py\n    //Java \n    String one = \"One String\"; \n    System.out.println(\"One: \" + one); \n\n    String two = \"Two String\"; \n    System.out.println(\"Two: \" + two); \n\n    String red = \"Red String\"; \n    System.out.println(\"Red: \" + red); \n\n    String blue = \"Blue String\"; \n    System.out.println(\"Blue: \" + blue); \n\n    String purple = red + blue; \n    System.out.println(\"Concatenation: \" + purple); \n\n    purple = \"Purple String\"; \n    System.out.println(\"Whoops! Mutation: \" + purple); \n\n```", "```py\n    //Objective-C \n    NSString *one = @\"One String\"; \n    NSLog(@\"One: %@\", one); \n\n    NSString *two = @\"Two String\"; \n    NSLog(@\"Two: %@\", two); \n\n    NSString *red = @\"Red String\"; \n    NSLog(@\"Red: %@\", red); \n\n    NSString *blue = @\"Blue String\"; \n    NSLog(@\"Blue: %@\", blue); \n\n    NSString *purple = [[NSArray arrayWithObjects:red, blue, nil] componentsJoinedByString:@\"\"]; \n    NSLog(@\"Concatenation: %@\", purple); \n\n    purple = @\"Purple String\"; \n    NSLog(@\"Whoops! Mutation: %@\", purple); \n\n```", "```py\n    //Swift \n    var one : String = \"One String\" \n    print(\"One: \\(one)\") \n\n    var two : String = \"Two String\" \n    print(\"Two: \\(two)\") \n\n    var red : String = \"Red String\" \n    print(\"Red: \\(red)\") \n\n    var blue : String = \"Blue String\" \n    print(\"Blue: \\(blue)\") \n\n    var purple : String = red + blue \n    print(\"Concatenation: \\(purple)\") \n\n    purple = \"Purple String\"; \n    print(\"Whoops! Mutation: \\(purple)\") \n\n    /* \n      Output from each string example: \n      One: One String \n      Two: Two String \n      Red: Red String \n      Blue: Blue String \n      Concatenation: Red StringBlue String \n      Whoops! Mutation: Purple String \n    */ \n\n```"]