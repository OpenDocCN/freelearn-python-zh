["```py\n#!/usr/bin/python3 \n#tkencryptdecrypt.py \nimport encryptdecrypt as ENC \nimport tkinter as TK \n\ndef encryptButton(): \n    encryptvalue.set(ENC.encryptText(encryptvalue.get(), \n                                     keyvalue.get())) \n\ndef decryptButton(): \n    encryptvalue.set(ENC.encryptText(encryptvalue.get(), \n                                     -keyvalue.get())) \n#Define Tkinter application \nroot=TK.Tk() \nroot.title(\"Encrypt/Decrypt GUI\") \n#Set control & test value \nencryptvalue = TK.StringVar() \nencryptvalue.set(\"My Message\")  \nkeyvalue = TK.IntVar() \nkeyvalue.set(20) \nprompt=\"Enter message to encrypt:\" \nkey=\"Key:\" \n\nlabel1=TK.Label(root,text=prompt,width=len(prompt),bg='green') \ntextEnter=TK.Entry(root,textvariable=encryptvalue, \n                   width=len(prompt)) \nencryptButton=TK.Button(root,text=\"Encrypt\",command=encryptButton) \ndecryptButton=TK.Button(root,text=\"Decrypt\",command=decryptButton) \nlabel2=TK.Label(root,text=key,width=len(key)) \nkeyEnter=TK.Entry(root,textvariable=keyvalue,width=8) \n#Set layout \nlabel1.grid(row=0,columnspan=2,sticky=TK.E+TK.W) \ntextEnter.grid(row=1,columnspan=2,sticky=TK.E+TK.W) \nencryptButton.grid(row=2,column=0,sticky=TK.E) \ndecryptButton.grid(row=2,column=1,sticky=TK.W) \nlabel2.grid(row=3,column=0,sticky=TK.E) \nkeyEnter.grid(row=3,column=1,sticky=TK.W) \n\nTK.mainloop() \n#End \n```", "```py\npython3 tkencryptdecrypt\n```", "```py\nlabel1=TK.Label(root,text=prompt,width=len(prompt),bg='green') \n```", "```py\ntextEnter=TK.Entry(root,textvariable=encryptvalue, \n                   width=len(prompt)) \n```", "```py\nencryptButton=TK.Button(root,text=\"Encrypt\",command=encryptButton) \ndecryptButton=TK.Button(root,text=\"Decrypt\",command=decryptButton) \n```", "```py\ndef encryptButton(): \n    encryptvalue.set(ENC.encryptText(encryptvalue.get(), \n                                     keyvalue.get())) \n```", "```py\nlabel1.grid(row=0,columnspan=2,sticky= TK.E+TK.W) \ntextEnter.grid(row=1,columnspan=2,sticky= TK.E+TK.W) \n```", "```py\n#!/usr/bin/python3 \n# graphicmenu.py \nimport tkinter as tk \nfrom subprocess import call \nimport threading \n\n#Define applications [\"Display name\",\"command\"] \nleafpad = [\"Leafpad\",\"leafpad\"] \nscratch = [\"Scratch\",\"scratch\"] \npistore = [\"Pi Store\",\"pistore\"] \napp_list = [leafpad,scratch,pistore] \nAPP_NAME = 0 \nAPP_CMD  = 1 \n\nclass runApplictionThread(threading.Thread): \n    def __init__(self,app_cmd): \n        threading.Thread.__init__(self) \n        self.cmd = app_cmd \n    def run(self): \n        #Run the command, if valid \n        try: \n            call(self.cmd) \n        except: \n            print (\"Unable to run: %s\" % self.cmd) \n\nclass appButtons: \n    def __init__(self,gui,app_index): \n        #Add the buttons to window \n        btn = tk.Button(gui, text=app_list[app_index][APP_NAME], \n                        width=30, command=self.startApp) \n        btn.pack() \n        self.app_cmd=app_list[app_index][APP_CMD] \n    def startApp(self): \n        print (\"APP_CMD: %s\" % self.app_cmd) \n        runApplictionThread(self.app_cmd).start()        \n\nroot = tk.Tk() \nroot.title(\"App Menu\") \nprompt = '      Select an application      ' \nlabel1 = tk.Label(root, text=prompt, width=len(prompt), bg='green') \nlabel1.pack() \n#Create menu buttons from app_list \nfor index, app in enumerate(app_list): \n    appButtons(root,index) \n#Run the tk window \nroot.mainloop() \n#End\n```", "```py\nsudo apt-get update\nsudo apt-get install python3-pip \n```", "```py\nsudo apt-get install libjpeg-dev\n\n```", "```py\nsudo pip-3.2 install pillow  \n```", "```py\n>>>import PIL\n>>>help(PIL)  \n```", "```py\n>>PIL.PILLOW_VERSION\n```", "```py\n##!/usr/bin/python3 \n#photohandler.py \nfrom PIL import Image \nfrom PIL import ExifTags \nimport datetime \nimport os \n\n#set module values \npreviewsize=240,240 \ndefaultimagepreview=\"./preview.ppm\" \nfiledate_to_use=\"Exif DateTime\" \n#Define expected inputs \nARG_IMAGEFILE=1 \nARG_LENGTH=2 \n\nclass Photo: \n    def __init__(self,filename): \n        \"\"\"Class constructor\"\"\" \n        self.filename=filename \n        self.filevalid=False \n        self.exifvalid=False \n        img=self.initImage() \n        if self.filevalid==True: \n            self.initExif(img) \n            self.initDates() \n\n    def initImage(self): \n        \"\"\"opens the image and confirms if valid, returns Image\"\"\" \n        try: \n            img=Image.open(self.filename) \n            self.filevalid=True \n        except IOError: \n            print (\"Target image not found/valid %s\" % \n                   (self.filename)) \n            img=None \n            self.filevalid=False \n        return img \n\n    def initExif(self,image): \n        \"\"\"gets any Exif data from the photo\"\"\" \n        try: \n            self.exif_info={ \n                ExifTags.TAGS[x]:y \n                for x,y in image._getexif().items() \n                if x in ExifTags.TAGS \n            } \n            self.exifvalid=True \n        except AttributeError: \n            print (\"Image has no Exif Tags\") \n            self.exifvalid=False \n\n    def initDates(self): \n        \"\"\"determines the date the photo was taken\"\"\" \n        #Gather all the times available into YYYY-MM-DD format \n        self.filedates={} \n        if self.exifvalid: \n            #Get the date info from Exif info \n            exif_ids=[\"DateTime\",\"DateTimeOriginal\", \n                      \"DateTimeDigitized\"] \n            for id in exif_ids: \n                dateraw=self.exif_info[id] \n                self.filedates[\"Exif \"+id]= \n                                dateraw[:10].replace(\":\",\"-\") \n        modtimeraw = os.path.getmtime(self.filename) \n        self.filedates[\"File ModTime\"]=\"%s\" % \n            datetime.datetime.fromtimestamp(modtimeraw).date() \n        createtimeraw = os.path.getctime(self.filename) \n        self.filedates[\"File CreateTime\"]=\"%s\" % \n            datetime.datetime.fromtimestamp(createtimeraw).date() \n\n    def getDate(self): \n        \"\"\"returns the date the image was taken\"\"\" \n        try: \n            date = self.filedates[filedate_to_use] \n        except KeyError: \n            print (\"Exif Date not found\") \n            date = self.filedates[\"File ModTime\"] \n        return date \n\n    def previewPhoto(self): \n        \"\"\"creates a thumbnail image suitable for tk to display\"\"\" \n        imageview=self.initImage() \n        imageview=imageview.convert('RGB') \n        imageview.thumbnail(previewsize,Image.ANTIALIAS) \n        imageview.save(defaultimagepreview,format='ppm') \n        return defaultimagepreview         \n```", "```py\nself.exif_info={ \n                ExifTags.TAGS[id]:y \n                for id,y in image._getexif().items() \n                if id in ExifTags.TAGS \n               } \n```", "```py\nExifTag.TAGS={ \n4096: 'RelatedImageFileFormat', \n513: 'JpegIFOffset', \n514: 'JpegIFByteCount', \n40963: 'ExifImageHeight', \n...etc...}\n```", "```py\nImage._getexif()={ \n256: 3264, \n257: 2448, \n37378: (281, 100), \n36867: '2016:09:28 22:38:08', \n...etc...} \n```", "```py\nself.exif_info={ \n'YResolution': (72, 1), \n 'ResolutionUnit': 2, \n 'ExposureMode': 0,  \n'Flash': 24, \n...etc...} \n```", "```py\n#Module test code \ndef dispPreview(aPhoto): \n    \"\"\"Create a test GUI\"\"\" \n    import tkinter as TK \n\n    #Define the app window \n    app = TK.Tk() \n    app.title(\"Photo View Demo\") \n\n    #Define TK objects \n    # create an empty canvas object the same size as the image \n    canvas = TK.Canvas(app, width=previewsize[0], \n                       height=previewsize[1]) \n    canvas.grid(row=0,rowspan=2) \n    # Add list box to display the photo data \n    #(including xyscroll bars) \n    photoInfo=TK.Variable() \n    lbPhotoInfo=TK.Listbox(app,listvariable=photoInfo, \n                           height=18,width=45, \n                           font=(\"monospace\",10)) \n    yscroll=TK.Scrollbar(command=lbPhotoInfo.yview, \n                         orient=TK.VERTICAL) \n    xscroll=TK.Scrollbar(command=lbPhotoInfo.xview, \n                         orient=TK.HORIZONTAL) \n    lbPhotoInfo.configure(xscrollcommand=xscroll.set, \n                          yscrollcommand=yscroll.set) \n    lbPhotoInfo.grid(row=0,column=1,sticky=TK.N+TK.S) \n    yscroll.grid(row=0,column=2,sticky=TK.N+TK.S) \n    xscroll.grid(row=1,column=1,sticky=TK.N+TK.E+TK.W) \n\n    # Generate the preview image \n    preview_filename = aPhoto.previewPhoto() \n    photoImg = TK.PhotoImage(file=preview_filename) \n    # anchor image to NW corner \n    canvas.create_image(0,0, anchor=TK.NW, image=photoImg)  \n\n    # Populate infoList with dates and exif data \n    infoList=[] \n    for key,value in aPhoto.filedates.items(): \n        infoList.append(key.ljust(25) + value) \n    if aPhoto.exifvalid: \n        for key,value in aPhoto.exif_info.items(): \n           infoList.append(key.ljust(25) + str(value)) \n    # Set listvariable with the infoList \n    photoInfo.set(tuple(infoList)) \n\n    app.mainloop() \n\ndef main(): \n    \"\"\"called only when run directly, allowing module testing\"\"\" \n    import sys \n    #Check the arguments \n    if len(sys.argv) == ARG_LENGTH: \n        print (\"Command: %s\" %(sys.argv)) \n        #Create an instance of the Photo class \n        viewPhoto = Photo(sys.argv[ARG_IMAGEFILE]) \n        #Test the module by running a GUI \n        if viewPhoto.filevalid==True: \n            dispPreview(viewPhoto) \n    else: \n        print (\"Usage: photohandler.py imagefile\") \n\nif __name__=='__main__': \n  main() \n#End \n```", "```py\nlbPhotoInfo.configure(xscrollcommand=xscroll.set, \n yscrollcommand=yscroll.set)\n\n```", "```py\ncanvas.create_image(0,0, anchor=TK.NW, image=photoImg)\n\n```", "```py\n#!/usr/bin/python3 \n#filehandler.py \nimport os \nimport shutil \nimport photohandler as PH \nfrom operator import itemgetter \n\nFOLDERSONLY=True \nDEBUG=True \ndefaultpath=\"\" \nNAME=0 \nDATE=1 \n\nclass FileList: \n  def __init__(self,folder): \n    \"\"\"Class constructor\"\"\" \n    self.folder=folder \n    self.listFileDates() \n\n  def getPhotoNamedates(self): \n    \"\"\"returns the list of filenames and dates\"\"\" \n    return self.photo_namedates \n\n  def listFileDates(self): \n    \"\"\"Generate list of filenames and dates\"\"\" \n    self.photo_namedates = list() \n    if os.path.isdir(self.folder): \n      for filename in os.listdir(self.folder): \n        if filename.lower().endswith(\".jpg\"): \n          aPhoto = PH.Photo(os.path.join(self.folder,filename)) \n          if aPhoto.filevalid: \n            if (DEBUG):print(\"NameDate: %s %s\"% \n                             (filename,aPhoto.getDate())) \n            self.photo_namedates.append((filename, \n                                         aPhoto.getDate())) \n            self.photo_namedates = sorted(self.photo_namedates, \n                                    key=lambda date: date[DATE]) \n\n  def genFolders(self): \n    \"\"\"function to generate folders\"\"\" \n    for i,namedate in enumerate(self.getPhotoNamedates()): \n      #Remove the - from the date format \n      new_folder=namedate[DATE].replace(\"-\",\"\") \n      newpath = os.path.join(self.folder,new_folder) \n      #If path does not exist create folder \n      if not os.path.exists(newpath): \n        if (DEBUG):print (\"New Path: %s\" % newpath) \n        os.makedirs(newpath) \n      if (DEBUG):print (\"Found file: %s move to %s\" % \n                        (namedate[NAME],newpath)) \n      src_file = os.path.join(self.folder,namedate[NAME]) \n      dst_file = os.path.join(newpath,namedate[NAME]) \n      try: \n        if (DEBUG):print (\"File moved %s to %s\" % \n                          (src_file, dst_file)) \n        if (FOLDERSONLY==False):shutil.move(src_file, dst_file) \n      except IOError: \n        print (\"Skipped: File not found\") \n\ndef main(): \n  \"\"\"called only when run directly, allowing module testing\"\"\" \n  import tkinter as TK \n  from tkinter import filedialog \n  app = TK.Tk() \n  app.withdraw() \n  dirname = TK.filedialog.askdirectory(parent=app, \n      initialdir=defaultpath, \n      title='Select your pictures folder') \n  if dirname != \"\": \n    ourFileList=FileList(dirname) \n    ourFileList.genFolders() \n\nif __name__==\"__main__\": \n  main() \n#End \n```"]