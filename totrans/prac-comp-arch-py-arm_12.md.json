["```py\n\nadds CL,AL,BL         @ CL,AL,BL are registers, each holding the 32 lower-order bits of a word\nadc  CU,AU,BU         @ Add the two upper-order 32-bit registers together with the carry bit\n```", "```py\n\nmov r1,#6                @ Load r1 with 6\nmov r2,#8                @ Load r2 with 8\ncmp r1,r2                @ Compare r1 and r2\n```", "```py\n\n       mov   r4,#23      @ Load register r4 with 23\n       mov   r7,#25      @ Load register r7 with 25\n```", "```py\n       mul   r9,r4,r7    @ r9 is loaded with the low-order 32-bit product of r4 and r7\n```", "```py\n\n       mov   r4,#n        @ r4 is the counter\n       mov   r3,#0        @ Clear the inner product\n       adr   r5,V1        @ r5 points to v1\n       adr   r6,V2        @ r6 points to v2\nLoop:  ldr   r0,[r5],#4   @ REPEAT read a component of v1 and update the pointer\n       ldr   r1,[r6],#4   @ Get the second element in the pair from v2\n       mla   r3,r0,r1,r3  @ Add new product term to the total (r3 = r3 + r0·r1)\n       subs  r4,r4,#1     @ Decrement  the counter and set the (CCR)\n       bne   Loop         @ UNTIL all done\n```", "```py\n\nC = C & 0b1111100011000111       # Clear the two fields for sR1 and sR2\nsR1 = sR1 << 8                   # Move sR1 into position by shifting left 8 times\nC = C | sR1                      # Insert sR1\nsR2 = sR2 << 3                   # Move sR2 into position by shifting left 3 times\nC = C | sR2                      # Insert sR2\n```", "```py\n\n   ldr r3,=0b1111100011000111    @ Load r3 with 1111100011000111 mask\n   and r0,r0,r3                  @ Mask r0 to get xxxxx000xx000xxx\n   or  r0,r0,r1                  @ Insert r1 to get xxxxxaaaxx000xxx\n   or  r0,r0,r2                  @ Insert r2 to get xxxxxaaaxxbbbxxx\n```", "```py\n\nadd r1,r2,r3,lsl #3\n```", "```py\n\nmov r1,r1,lsr #1         @ Shift contents of register r1 a single bit place right before moving\n```", "```py\n\nlsl     logical shift left\nlsr     logical shift right\nasr     arithmetic shift right\nror     rotate right\n```", "```py\nrrx     rotate right through carry (1-bit shift only)\n```", "```py\n\n      mov r4,#0                @ Clear r4\n      and r1,r1,#0x000000FF    @ Clear r1 except least-significant byte\n      and r2,r2,#0x0000FF00    @ Clear r2 except second byte\n      and r3,r2,#0x00FF0000    @ Clear r3 except third byte\n      or  r4,r4,r1             @ Copy r1 to r4\\. No shifting\n      or  r4,r4,r2 lsl #8      @ Copy r2 to r4\\. Shifting to second byte\n```", "```py\n      or  r4,r4,r3 lsl #16     @ Copy r3 to r4\\. Shifting to third byte\n```", "```py\n\n      and r4,r1,#0x000000FF    @ Clear r4 and insert r1 0x000000AA\n      or  r4,r4,r2 lsl #8      @ Insert r2, shifting left into place 0xXXXXBBAA\n      or  r4,r4,r3 lsl #16     @ Insert r3, shifting left into place 0xXXCCBBAA\n      and r4,r4,#0x00FFFFFF    @ Insert most-significant byte 0x00CCBBAA\n```", "```py\n\nadd r2,r1,r2,lsl #16           @ r2 = 567800BB\nadd r2,r2,r0,lsl #8            @ r2 = 5678AABB,\nmov r2,r2,ror #16              @ r2 = AABB5678\n```", "```py\n\nbic r0,r0,r0,asr #31\n```", "```py\n\n      ..   do this       @ Some code\n      ..   then that     @ Some other code\n      b    Next          @ Now skip past the next instructions and jump to Next:\n      ..                 @ …the code being skipped past\n      ..                 @ …the code being skipped past\nNext: ..                 @ Target address for the branch, denoted by label Next\n```", "```py\n\nif x == y: y = y + 1\nelse:      y = y + 2\n       cmp r1,r2         @ Compare x and y (r1 contains y and r2 contains x)\n       bne plus2         @ If not equal, then branch to the else part\n       add r1,r1,#1      @ If equal, fall through to here and add one to y\n       b   leave         @ Now, skip past the else part\nplus2: add r1,r1,#2      @ ELSE add 2 to y\nleave:  …                @ Continue from here\n```", "```py\n\nLoop:       cmp   r0,#0         @ Perform test at start of loop (exit on zero)\n            beq   whileExit     @ Exit on test true\n            Code  ...           @ Body of the loop\n            b     Loop          @ Repeat WHILE true\nwhileExit:  Post-loop code...   @ Exit\n```", "```py\n\nIF Z = 1 THEN [r1] ← [r2] + [r3]\n```", "```py\n\naddcc  r1,r2,r3, lsl r4\n```", "```py\n\n IF C = 0 THEN [r1] ← [r2] + [r3] x 2[r4].\n```", "```py\n\nif A == B: C = D – E;\n```", "```py\n\n      cmp    r1,r2         @ Compare A == B\n      subeq  r3,r1,r4      @ If (A== B) then C = D - E\n```", "```py\n\nif ((a == b)AND(c == d)): e = e + 1\n      cmp    r0,r1         @ Compare a == b\n      cmpeq  r2,r3         @ If a == b then test c == d\n      addeq  r4,r4,#1      @ If a == b AND c == d THEN increment e\n```", "```py\n\n      cmp    r0,r1           @ Compare a == b\n      bne    Exit            @ Exit if a =! b\n      cmp    r2,r3           @ Compare c == d\n      bne    Exit            @ Exit if c =! d\n      add    r4,r4,#1        @ Else increment e\nExit\n```", "```py\n\nif (a == b) e = e + 4;\nif (a < b)  e = e + 7;\nif (a > b)  e = e + 12;\n```", "```py\n\n      cmp    r0,r1           @ Compare a == b\n      addeq  r4,r4,#4        @ If a == b then e = e + 4\n      addle  r4,r4,#7        @ If a < b  then e = e + 7\n      addgt  r4,r4,#12       @ If a > b  then e = e + 12\n```", "```py\n\n        cmp    r0,r1         @ Compare a == b\n        bne    Test1         @ Not equal try next test\n        add    r4,r4,#4      @ a == b so e = e+4\n        b      ExitAll       @ Now leave\nTest1:  blt    Test2         @ If a < b then\n        add    r4,r4,#12     @ If we are here a > b so e = e + 12\n        b      ExitAll       @ Now leave\nTest2:  add    r4,r4,#7      @ If we are here a < b so e = e + 7\nExitAll:\n```", "```py\n\n       teq    r0,#0          @ Compare r0 with zero\n```", "```py\n       rsbmi  r0,r0,#0       @ If negative then 0 - [r0]\n```", "```py\n\n      cmp    r0,#'A'         @ Compare character with letter \"A\"\n      rsbges r1,r0,#'Z'      @ Check less than Z if greater than A  Update flags\n      orrge  r0,r0,#0x20     @ If in \"A\" to \"Z,\" then set bit 5 to force lowercase\n```"]