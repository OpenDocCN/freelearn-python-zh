["```py\nclass BankAccount:\n  def __init__(self, name: str, account_number: str, \\\n    balance: float):\n    self.name = name\n    self.account_number = account_number\n    self.balance = balance\n```", "```py\n  def withdraw(self, amount: float) -> None:\n    new_balance = self.balance - amount\n    if new_balance > 0:\n      self.balance = new_balance\n    else:\n      raise ValueError(\"Account overdrawn!\")\n```", "```py\n  def deposit(self, amount: float):\n    if amount > 0:\n      self.balance += amount\n    else:\n      raise ValueError(\"Deposit amount must be greater \\\n        than 0.\")\n```", "```py\nimport unittest\nclass MyTestCase(unittest.TestCase):\n  def test_something(self):\n    self.assertEqual(True, False) # add assertion here\nif __name__ == '__main__':\n  unittest.main()\n```", "```py\nimport unittest\nfrom bank_account import BankAccount\n```", "```py\n  def test_init(self):\n    test_account = BankAccount(\"Bruce Van Horn\", \\\n      \"123355-23434\", 4000)\n    self.assertEqual(test_account.name, \"Bruce Van Horn\")\n    self.assertEqual(test_account.account_number, \\\n      \"123355-23434\")\n    self.assertEqual(test_account.balance, 4000)\n```", "```py\ndef test_withdraw(self):\n  self.fail()\n```", "```py\ndef test_deposit(self):\n  self.fail()\n```", "```py\ndef test_withdraw(self):\n test_account = BankAccount(\"Bruce Van Horn\", \"123355-23434\", 4000)\n test_account.withdraw(2000)\n self.assertEqual(test_account.balance, 2000)\n```", "```py\ndef test_deposit(self):\n test_account = BankAccount(\"Bruce Van Horn\", \"123355-23434\", 4000)\n test_account.deposit(5000)\n self.assertEqual(test_account.balance, 9000)\n```", "```py\ndef withdraw(self, amount: float) -> None:\n    new_balance = self.balance - amount\n    if new_balance > 0:\n      self.balance = new_balance\n    else:\n      raise ValueError(\"Account overdrawn!\")\n```", "```py\ndef test_overdraft(self):\n test_account = BankAccount(\"Bruce Van Horn\", \"123355-23434\", 4000)\n self.assertRaises(ValueError, test_account.withdraw, 5000)]\n```", "```py\nfrom bank_account import BankAccount\n```", "```py\nclass Item:\n  def __init__(self, name: str, price: float):\n    self.name = name\n    self.price = price\n```", "```py\nclass Transaction:\n  def __init__(self, buyer: BankAccount, seller: \\\n    BankAccount, item: Item):\n    self.buyer = buyer\n    self.seller = seller\n    self.item = item\n```", "```py\n  def do_transaction(self):\n    original_buyer_balance = self.buyer.balance\n    original_seller_balance = self.seller.balance\n```", "```py\n    try:\n      self.buyer.withdraw(self.item.price)\n      self.seller.deposit(self.item.price)\n    except ValueError:\n      self.buyer.balance = original_buyer_balance\n      self.seller.balance = original_seller_balance\n      raise ValueError(\"Transaction failed and was \\\n        rolled back\")\n```", "```py\nfrom unittest import TestCase\nclass TestTransaction(TestCase):\n  def test_do_transaction(self):\n    self.fail()\n```", "```py\nfrom unittest import TestCase\nfrom bank_account import BankAccount\nfrom transaction import Transaction, Item\n```", "```py\ninitial_seller_balance = 4000\nseller_account = BankAccount(\"PacktPub\", \"839423-38402\",\n               initial_seller_balance)\nitem = Item(\"Python book\", 39.95)\n```", "```py\nclass TestTransaction(TestCase):\n def test_do_transaction(self):\n```", "```py\n  buyer_account = BankAccount(\"Bruce Van Horn\", \"123355-23434\", 99)\n  item = Item(\"Python book\", 39.95)\n  test_transaction = Transaction(buyer_account, \\\n  seller_account, item)\n```", "```py\n  test_transaction.do_transaction()\n```", "```py\n  self.assertEqual(buyer_account.balance, 99 - 39.95)\n  self.assertEqual(seller_account.balance,\\\n                   initial_seller_balance + 39.95)\n```", "```py\ndef test_transaction_overdraw_fault(self):\n initial_buyer_balance = 5\n buyer_account = BankAccount(\"Bruce Van Horn\", \\\n  \"123355-23434\", initial_buyer_balance)\n test_transaction = Transaction(buyer_account, \\\n  seller_account, item)\n```", "```py\n test_transaction.do_transaction()\n```", "```py\n self.assertEqual(buyer_account.balance, initial_buyer_balance)\n self.assertEqual(seller_account.balance, initial_seller_balance)\n```", "```py\ncheck = ValueError(\"This is a test\")\n```", "```py\nself.assertEqual(str(e), \"Transaction failed and was rolled back\")\n```", "```py\nseller_account.balance = 4000\n```", "```py\ndef test_deposit_negative_number_fail(self):\n test_account = BankAccount(\"Bruce Van Horn\", \"123355-23434\", 4000)\n self.assertRaises(ValueError, test_account.deposit, -2000)\n```", "```py\nWrote XML report to /home/brucevanhorn/.cache/JetBrains/PyCharm2023.1/coverage/bank_account&All_Test.xml\n```", "```py\ndef custom_sum(n=1000000):\n  result = 0\n  for i in range(n):\n    result += i\n  return result\ndef built_in_sum(n=1000000):\n  result = sum(range(n))\n  return result\nif __name__ == '__main__':\n  print(custom_sum())\n  # print(built_in_sum())\n```", "```py\nif __name__ == '__main__':\n  # print(custom_sum())\n  print(built_in_sum())\n```", "```py\nSnapshot saved to /home/brucevanhorn/.cache/JetBrains/PyCharm2023.1/snapshots/profiling4.pstat\n```"]