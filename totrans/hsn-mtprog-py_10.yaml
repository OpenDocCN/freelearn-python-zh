- en: '*Chapter 8*: Defining Templates for Algorithms'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '*第8章*：定义算法模板'
- en: In this chapter, we will look at what templates are and how to implement template
    programming in Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨模板是什么以及如何在Python中实现模板编程。
- en: What are templates and where are they useful? The main usage of applying the
    concepts of metaprogramming during the process of developing an application is
    to design a reusable framework that can be manipulated externally through the
    programming of metadata of Python objects rather than modifying the object itself.
    Templates, as the name suggests, can act as a template, a format, or a model on
    how a sequence of operations can be performed on a Python object. These templates
    can be used to define the common functionalities of methods within a class and
    to reuse them through the application of the object-oriented programming concept
    of **inheritance**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 模板是什么？它们在哪里有用？在开发应用程序的过程中应用元编程概念的主要用途是设计一个可重用的框架，可以通过编程Python对象的元数据来操作，而不是修改对象本身。正如其名所示，模板可以作为模板、格式或模型，说明如何在Python对象上执行一系列操作。这些模板可以用来定义类内方法的共同功能，并通过应用面向对象编程的**继承**概念来重用它们。
- en: Throughout this chapter, we will look at understanding how templates can be
    defined and used in Python and how a sequence of common operations can be designed
    into a template that fits into a framework. Speaking of designs, template programming
    is one of the main concepts within the design patterns of Python. Design patterns
    will be covered in detail in [*Chapter 12*](B13426_12_Final_PG_epub.xhtml#_idTextAnchor154)
    on design patterns.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨如何在Python中定义和使用模板，以及如何将一系列常见操作设计成适合框架的模板。说到设计，模板编程是Python设计模式中的主要概念之一。设计模式将在[*第12章*](B13426_12_Final_PG_epub.xhtml#_idTextAnchor154)中详细讨论。
- en: 'In this chapter, we will be taking a look at the following main topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨以下主要主题：
- en: Explaining a sequence of operations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 解释操作序列
- en: Defining the sequence of methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义方法序列
- en: Identifying the common functionalities
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 识别共同功能
- en: Designing templates
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计模板
- en: By the end of this chapter, you should be able to apply generics and type checking
    on Python variables. You should also be able to create your own domain-specific
    data types.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你应该能够对Python变量应用泛型和类型检查。你还应该能够创建自己的特定领域数据类型。
- en: Technical requirements
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The code examples shared in this chapter are available on GitHub under the
    code for this chapter here: [https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter08](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter08).'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中分享的代码示例可在GitHub上找到，地址为：[https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter08](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter08)。
- en: Explaining a sequence of operations
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解释操作序列
- en: Developing algorithms is always interesting, especially in a language like Python
    where less code needs to be written to complete an action compared to any other
    programming language. An **algorithm** is a simple sequence of steps that need
    to be performed to accomplish a task. While developing any algorithm, the most
    important aspect is to ensure that we are following the steps to perform the action
    in the right sequence. This section covers examples of a sequence of operations
    and how they can be defined in a Python program.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 开发算法总是很有趣，尤其是在像Python这样的语言中，与任何其他编程语言相比，完成一个动作所需的代码更少。**算法**是一系列简单的步骤，需要执行以完成任务。在开发任何算法时，最重要的方面是确保我们正在按照正确的顺序执行动作的步骤。本节涵盖了操作序列的示例以及如何在Python程序中定义它们。
- en: Back to our core example
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 回到我们的核心示例
- en: In this chapter, we will continue using our core example of *ABC Megamart*,
    and we will specifically look at the billing counter where we can perform a sequence
    of operations. The reason we are focusing on a sequence of operations here is
    to especially understand how **templates** can be utilized to perform a set of
    tasks, and also how they can be reused to perform similar kinds of other tasks
    too. So, let’s begin.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将继续使用我们的核心示例*ABC Megamart*，并特别关注计费柜台，在那里我们可以执行一系列操作。我们之所以关注操作序列，是为了特别了解**模板**如何被用来执行一系列任务，以及它们如何被重用来执行类似的其他任务。因此，让我们开始吧。
- en: 'At *ABC Megamart*, we have four different checkout counters to check out the
    shopping items from the cart. The details of the counters are as follows:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 在*ABC Megamart*，我们有四个不同的结账柜台来检查购物车中的商品。各柜台详情如下：
- en: The first one is to check out items that contain vegetables and dairy.
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一个是检查包含蔬菜和乳制品的物品。
- en: The second one is to check out items that contain less than 10 assorted items,
    excluding electronics, vegetables, and dairy.
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二个是检查包含少于10种不同物品的物品，不包括电子产品、蔬菜和乳制品。
- en: The third one is to check out items that contain more than 10 assorted items,
    excluding electronics, vegetables, and dairy.
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个是检查包含超过10种不同物品的物品，不包括电子产品、蔬菜和乳制品。
- en: The fourth one is to check out electronic goods.
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第四个是检查电子产品。
- en: Each of these counters is performing a sequence of operations and at this point
    in time, they might look like they are an independent set of operations. The goal
    of this chapter is to create templates and look at a common way of connecting
    these independent operations. To connect them and create a template, we need to
    understand the sequence of operations in each of these counters.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 这些柜台中的每一个都在执行一系列操作，在这一点上，它们可能看起来像是一组独立的操作。本章的目标是创建模板并查看连接这些独立操作的一种通用方式。为了连接它们并创建模板，我们需要了解每个柜台中的操作顺序。
- en: Let’s now look at what each of the counters will work on.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们来看看每个柜台将处理什么。
- en: The vegetables and dairy counter
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蔬菜和乳制品柜台
- en: The journey of a customer to the billing counter starts from the vegetable section,
    where vegetables are added to the shopping cart, the customer then stands in a
    queue at the respective billing counter, vegetables and fruit are weighed and
    packed, a price tag with a bar code is added on the packet, the bar code is scanned
    and the bill is added to the invoice for each item, a tax component is added for
    each item, and the bill is totaled, printed, and handed over to the customer,
    who then pays the bill.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 顾客前往结账柜台的路程始于蔬菜区，在那里蔬菜被添加到购物车中，顾客然后站在相应的结账柜台队列中，蔬菜和水果被称重并包装，包装上添加了一个带有条形码的价格标签，条形码被扫描，并为每件物品添加账单，为每件物品添加一个税费组成部分，账单总计，打印并交给顾客，然后顾客支付账单。
- en: 'The graphical representation of the steps is as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤的图形表示如下：
- en: '![Figure 8.1 – Vegetables counter ](img/Figure_8.1_B13426.jpg)'
  id: totrans-26
  prefs: []
  type: TYPE_IMG
  zh: '![图8.1 – 蔬菜柜台](img/Figure_8.1_B13426.jpg)'
- en: Figure 8.1 – Vegetables counter
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.1 – 蔬菜柜台
- en: 'The following functions will be defined to perform each of these operations:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 将定义以下功能来执行这些操作：
- en: '[PRE0]'
  id: totrans-29
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '[PRE1]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '[PRE3]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '[PRE4]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '[PRE5]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '[PRE6]'
  id: totrans-35
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '[PRE7]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '[PRE8]'
  id: totrans-37
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '[PRE9]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Let’s further look at the next counter, which handles less than 10 items.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步看看下一个计数器，它处理少于10件物品。
- en: Less than 10 items counter
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 少于10件物品柜台
- en: When a customer adds less than 10 items to the cart and the items do not contain
    vegetables, fruit, dairy, or electronics, then the customer goes to the less than
    10 items counter where the bar code on each item is scanned and the bill is added
    to the invoice for each item, a tax component is added for each item, and the
    bill is totaled, printed, and handed over to the customer, who then pays the bill.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 当顾客将少于10件物品添加到购物车，并且这些物品不包含蔬菜、水果、乳制品或电子产品时，顾客将前往少于10件物品的柜台，在那里每件物品的条形码被扫描，并为每件物品添加账单，为每件物品添加一个税费组成部分，账单总计，打印并交给顾客，然后顾客支付账单。
- en: 'The graphical representation of the steps is as follows:'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤的图形表示如下：
- en: '![Figure 8.2 – Less than 10 items counter ](img/Figure_8.2_B13426.jpg)'
  id: totrans-43
  prefs: []
  type: TYPE_IMG
  zh: '![图8.2 – 少于10件物品柜台](img/Figure_8.2_B13426.jpg)'
- en: Figure 8.2 – Less than 10 items counter
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.2 – 少于10件物品柜台
- en: 'The following functions will be defined to perform each of these operations:'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 将定义以下功能来执行这些操作：
- en: '[PRE10]'
  id: totrans-46
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '[PRE11]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '[PRE12]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '[PRE13]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: '[PRE14]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: '[PRE15]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '[PRE16]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: '[PRE17]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '[PRE18]'
  id: totrans-54
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: '[PRE19]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Let’s further look at the next counter, which handles more than 10 items.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步看看下一个计数器，它处理超过10件物品。
- en: The greater than 10 items counter
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 超过10件物品的计数器
- en: When a customer adds more than 10 items to the cart and the items do not contain
    vegetables, fruit, dairy, or electronics, then the customer goes to the greater
    than 10 items counter where the bar code on each item is scanned and the bill
    is added to the invoice for each item, coupons are applied, a tax component is
    added for each item, and the bill is totaled, printed, and handed over to the
    customer, who then pays the bill.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 当顾客将超过10个物品添加到购物车，并且这些物品不包含蔬菜、水果、乳制品或电子产品时，顾客将前往超过10个物品的计数器，在那里扫描每个物品的条形码，并为每个物品添加账单，应用优惠券，为每个物品添加一个税费组成部分，然后计算总账单，打印并交给顾客，顾客随后支付账单。
- en: 'The graphical representation of the steps is as follows:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤的图形表示如下：
- en: '![Figure 8.3 – Greater than 10 items counter ](img/Figure_8.3_B13426.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图8.3 – 超过10个物品计数器](img/Figure_8.3_B13426.jpg)'
- en: Figure 8.3 – Greater than 10 items counter
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.3 – 超过10个物品计数器
- en: 'The following functions will be defined to perform each of these operations:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数将被定义以执行这些操作中的每一个：
- en: '[PRE20]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: '[PRE21]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: '[PRE26]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: '[PRE27]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: '[PRE28]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: '[PRE29]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '[PRE30]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: Let’s further look at the next counter, which handles electronic items.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们进一步查看下一个计数器，该计数器处理电子产品。
- en: Electronics counter
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子产品计数器
- en: The last counter is the electronics counter, where a customer goes to the counter,
    gets the electronic items tested, the item is scanned, and the bill is added to
    the invoice for each item. A tax component is added for each item and the bill
    is totaled, printed, and handed over to the customer, who then pays the bill.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一个计数器是电子产品计数器，顾客前往该计数器，对电子产品进行测试，扫描物品，并为每个物品添加账单。为每个物品添加一个税费组成部分，然后计算总账单，打印并交给顾客，顾客随后支付账单。
- en: 'The graphical representation of the steps is as follows:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 步骤的图形表示如下：
- en: '![Figure 8.4 – Electronics counter ](img/Figure_8.4_B13426.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图8.4 – 电子产品计数器](img/Figure_8.4_B13426.jpg)'
- en: Figure 8.4 – Electronics counter
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.4 – 电子产品计数器
- en: 'The following functions will be defined to perform each of these operations:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 以下函数将被定义以执行这些操作中的每一个：
- en: '[PRE31]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: '[PRE32]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: '[PRE33]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: '[PRE34]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '[PRE35]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: '[PRE36]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: '[PRE37]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: '[PRE38]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '[PRE39]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: '[PRE40]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: '[PRE41]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: In each of the preceding billing counters, we looked at the sequence of operations
    that happens for a sale to complete.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的每个计费计数器中，我们查看了一个销售完成时发生的操作序列。
- en: With this understanding, let’s look at defining each of the operations into
    methods in the following section.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 基于这种理解，让我们在下一节中定义每个操作为方法。
- en: Defining the sequence of methods
  id: totrans-94
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 定义方法的序列
- en: 'Defining the methods helps us in understanding each of the operations performed
    at each counter in detail. Let’s define the classes and methods required to fulfill
    the actions to be performed in each operation. We will be covering the following
    counters in this section:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 定义方法有助于我们详细了解每个计数器上执行的每个操作。让我们定义执行每个操作所需的类和方法。在本节中，我们将涵盖以下计数器：
- en: The vegetable counter
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 蔬菜计数器
- en: Less than 10 items counter
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 少于10个物品计数器
- en: Greater than 10 items counter
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 超过10个物品计数器
- en: The electronics counter
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子产品计数器
- en: Let’s begin with the vegetable counter.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从蔬菜计数器开始。
- en: The vegetable counter
  id: totrans-101
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 蔬菜计数器
- en: 'The following are the steps for the operation of this counter:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是这个计数器操作的步骤：
- en: 'We will first create the `VegCounter` class as follows:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们首先创建以下`VegCounter`类：
- en: '[PRE42]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'In the following code, we will be defining the `return_cart` method that returns
    the list of items added to the shopping cart:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将定义`return_cart`方法，该方法返回添加到购物车中的物品列表：
- en: '[PRE43]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Let’s now return the name of the counter to be included in the bill. For this
    example, the counter name is `Vegetables & Dairy`:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在让我们返回要包含在账单中的计数器名称。在这个例子中，计数器名称是`Vegetables & Dairy`：
- en: '[PRE44]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the following code, let’s define the method to weigh the items in the cart
    and return a dictionary of items and their corresponding weights:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码中，让我们定义一个方法来称量购物车中的物品，并返回一个包含物品及其对应重量的字典：
- en: '[PRE45]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Next, let’s define a method to take the unit price and weights as input and
    calculate the price of each item by multiplying the weights and unit price:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义一个方法，以单价和重量作为输入，通过乘以重量和单价来计算每个物品的价格：
- en: '[PRE46]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'In the following method, let’s input bar codes to each of the items in the
    cart and return the bar codes as a list:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下方法中，让我们输入购物车中每个物品的条形码，并返回一个条形码列表：
- en: '[PRE47]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Next, let’s add a method to add price tags to the bar codes by creating a dictionary
    object and adding the codes and their corresponding price tags as key-value pairs:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一个方法，通过创建一个字典对象并添加代码及其对应的价格标签作为键值对，为条形码添加价格标签：
- en: '[PRE48]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Then, let’s add tax percentages for each of the items and return the tax values
    as a list:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们为每个物品添加税率并返回税率列表：
- en: '[PRE49]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Let’s further use the price tags and the tax values and calculate the bill
    for each of the items in the cart, and create a dictionary to add the items and
    their corresponding billing amount:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们进一步使用价格标签和税率，计算购物车中每个物品的账单，并创建一个字典来添加物品及其相应的账单金额：
- en: '[PRE50]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'In the following method, let’s print the invoice with the counter name, items
    in the cart, price, and the total bill amount:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下方法中，让我们打印带有计数器名称、购物车中的物品、价格和总账单金额的发票：
- en: '[PRE51]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Then, let’s print the invoice with a statement stating that the invoice is
    paid:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们打印带有声明发票已付款的发票：
- en: '[PRE52]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'Executing the preceding code results in the following. The methods are called
    in a sequence so that the results from one method are provided as input to the
    next step:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 执行前面的代码会产生以下结果。方法按顺序调用，以便一个方法的结果作为下一个步骤的输入：
- en: '[PRE53]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'The output of the printed invoice looks as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 打印的发票输出如下：
- en: '[PRE54]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: Next, let’s print the invoice that has been paid by the customer, `veg.receive_payment(finalbill)`.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们打印顾客已支付的发票，`veg.receive_payment(finalbill)`。
- en: 'The output of the paid invoice looks as follows:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 已付款发票的输出如下：
- en: '[PRE55]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Less than 10 items counter
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 10件以下物品计数器
- en: Similar to the class defined for the vegetable counter, we can also define the
    methods for the remaining three counters. The detailed code for the remaining
    counters is available at [https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter08](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter08).
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 与为蔬菜计数器定义的类类似，我们也可以为剩余的三个计数器定义方法。剩余计数器的详细代码可在[https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter08](https://github.com/PacktPublishing/Metaprogramming-with-Python/tree/main/Chapter08)找到。
- en: 'For the code for this counter, let’s create the `LessThan10Counter` class and
    add all of its methods, which includes `return_cart`, `goto_less_t10_counter`,
    `review_items`, `count_items`, `scan_bar_code`, `add_billing`, `add_tax`, `calc_bill`,
    `print_invoice`, and `receive_payment`. For simplicity, let’s look at the additional
    methods that we have in each counter instead of repeating all of the methods:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个计数器的代码，让我们创建`LessThan10Counter`类并添加所有方法，包括`return_cart`、`goto_less_t10_counter`、`review_items`、`count_items`、`scan_bar_code`、`add_billing`、`add_tax`、`calc_bill`、`print_invoice`和`receive_payment`。为了简单起见，让我们看看每个计数器中我们拥有的额外方法，而不是重复所有方法：
- en: 'Let’s start by creating the `LessThan10Counter` class:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们先创建`LessThan10Counter`类：
- en: '[PRE56]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'In this class, we have a `goto_less_t10_counter` method, which returns the
    name of the counter:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个类中，我们有一个`goto_less_t10_counter`方法，它返回计数器的名称：
- en: '[PRE57]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'We also have the following method to review the items in the cart to make sure
    that they are not electronic, vegetable, fruit, or dairy products:'
  id: totrans-139
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还有一个以下方法来检查购物车中的物品，确保它们不是电子产品、蔬菜、水果或乳制品：
- en: '[PRE58]'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'In the following method, let’s count the items to make sure that the total
    number of items in the cart is less than `10`:'
  id: totrans-141
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下方法中，让我们计数以确保购物车中的物品总数少于`10`：
- en: '[PRE59]'
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Executing all of the methods for this class in a sequence results in the following:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按顺序执行本类的所有方法，结果如下：
- en: '[PRE60]'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'The output for the paid invoice looks as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 已付款发票的输出如下：
- en: '[PRE61]'
  id: totrans-146
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: Greater than 10 items counter
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 大于10件物品计数器
- en: In this section, let’s define the class and methods for the counter for greater
    than 10 items.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们定义大于10件物品的计数器类和方法。
- en: 'For the code here, let’s create the `GreaterThan10Counter` class and add all
    of its methods, which includes `return_cart`, `goto_greater_t10_counter`, `review_items`,
    `count_items`, `scan_bar_code`, `add_billing`, `add_tax`, `apply_coupon`, `calc_bill`,
    `print_invoice`, and `receive_payment`. For simplicity, let’s look at the additional
    methods that we have in each counter instead of repeating all of the methods:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这里的代码，让我们创建`GreaterThan10Counter`类并添加所有方法，包括`return_cart`、`goto_greater_t10_counter`、`review_items`、`count_items`、`scan_bar_code`、`add_billing`、`add_tax`、`apply_coupon`、`calc_bill`、`print_invoice`和`receive_payment`。为了简单起见，让我们看看每个计数器中我们拥有的额外方法，而不是重复所有方法：
- en: 'We will first create the `GreaterThan10Counter` class:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先创建`GreaterThan10Counter`类：
- en: '[PRE62]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'In this class, we have a `goto_greater_t10_counter` method counter that returns
    the name of the counter:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个类中，我们有一个`goto_greater_t10_counter`方法计数器，它返回计数器的名称：
- en: '[PRE63]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Next, let’s add a method to apply a discount coupon to the items purchased:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们添加一个方法来应用折扣券到所购买的物品上：
- en: '[PRE64]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'Executing all of the methods for this class in a sequence results in the following:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按顺序执行这个类的所有方法会产生以下结果：
- en: '[PRE65]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'The output for the paid invoice looks as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 已支付发票的输出如下：
- en: '[PRE66]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: In this class, we had a different method definition for `goto_greater_t10_counter`
    and a new `apply_coupon` method.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个类中，我们为`goto_greater_t10_counter`定义了不同的方法，并添加了新的`apply_coupon`方法。
- en: The electronics counter
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电子计数器
- en: 'In this section, let’s define the class and methods for the electronic items
    counter. In the following code, let’s create the `ElectronicsCounter` class and
    add all of its methods, which includes `return_cart`, `goto_electronics_counter`,
    `review_items`, `test_electronics`, `scan_bar_code`, `add_billing`, `add_tax`,
    `apply_coupon`, `calc_bill`, `print_invoice`, and `receive_payment`. For simplicity,
    let’s look at the additional methods that we have in each counter instead of repeating
    all of the methods:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们定义电子物品计数器的类和方法。在下面的代码中，让我们创建`ElectronicsCounter`类并添加其所有方法，包括`return_cart`、`goto_electronics_counter`、`review_items`、`test_electronics`、`scan_bar_code`、`add_billing`、`add_tax`、`apply_coupon`、`calc_bill`、`print_invoice`和`receive_payment`。为了简单起见，让我们看看每个计数器中都有哪些额外的方法，而不是重复所有的方法：
- en: 'We will first create the class for the electronics counter:'
  id: totrans-163
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将首先为电子计数器创建一个类：
- en: '[PRE67]'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'In this class, we have a method to go to the electronics counter that returns
    the name of the counter:'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在这个类中，我们有一个方法可以转到电子计数器，并返回计数器的名称：
- en: '[PRE68]'
  id: totrans-166
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE68]'
- en: 'Next, let’s define a method that provides the status of the electronic goods
    and checks whether they are working:'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，让我们定义一个方法，它提供电子商品的状态并检查它们是否正常工作：
- en: '[PRE69]'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE69]'
- en: 'Executing all of the methods for this class in a sequence results in the following:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按顺序执行这个类的所有方法会产生以下结果：
- en: '[PRE70]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE70]'
- en: 'The output for the paid invoice looks as follows:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 已支付发票的输出如下：
- en: '[PRE71]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: In this class, we had different method definitions for `goto_electronics_counter`
    and a new `test_electronics` method.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个课程中，我们为`goto_electronics_counter`和新的`test_electronics`方法定义了不同的方法。
- en: Having defined the sequences, let’s proceed further to look at the common functionalities
    of each of these counters.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 定义了序列后，让我们进一步看看这些计数器的共同功能。
- en: Identifying the common functionalities
  id: totrans-175
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 识别共同功能
- en: 'In this section, let’s look at a graphical representation that shows the list
    of functions to be performed at each counter and the common functionalities between
    all four of them as follows. The common functionalities are highlighted in bold
    font in the following figure:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，让我们看看一个图形表示，它显示了在每个计数器上要执行的功能列表以及所有四个计数器之间的共同功能，如下所示。以下图中的共同功能以粗体字突出显示：
- en: '![Figure 8.5 – Common operations performed across each counter ](img/Figure_8.5_B13426.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
  zh: '![图8.5 – 在每个计数器上执行的操作](img/Figure_8.5_B13426.jpg)'
- en: Figure 8.5 – Common operations performed across each counter
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 图8.5 – 在每个计数器上执行的操作
- en: From *Figure 8.5*, all the functions highlighted in the bold font are common
    across all four counters. The `review_items` function is common across the less
    than 10 items counter, greater than 10 items counter, and electronics counter.
    The `count_items` function is common across the less than 10 items counter and
    greater than 10 items counter. The `apply_coupon` function is common across the
    greater than 10 items counter and the electronics counter. Since there are common
    functions or operations performed across all of the counters, we can look at creating
    a common way of designing them, too. This is where we can introduce the concept
    of templates.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 从*图8.5*中，所有以粗体字突出显示的功能在所有四个计数器中都是共同的。`review_items`函数在少于10个物品的计数器、多于10个物品的计数器和电子计数器中是共同的。`count_items`函数在少于10个物品的计数器和多于10个物品的计数器中是共同的。`apply_coupon`函数在多于10个物品的计数器和电子计数器中是共同的。由于所有计数器都执行了共同的功能或操作，我们可以考虑创建一个共同的方式来设计它们。这就是我们可以引入模板概念的地方。
- en: Designing templates
  id: totrans-180
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计模板
- en: As the name suggests, **templates** define a common template or format in which
    we can design an algorithmic flow of operations and reuse them when similar kinds
    of activities are performed. A template is one of the methods of design patterns
    in Python and can be used effectively while developing frameworks or libraries.
    Templates emphasize the concept of reusability in programming.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 正如其名所示，**模板**定义了一个通用的模板或格式，我们可以在这个格式中设计算法流程，并在执行类似活动时重用它们。模板是Python中设计模式的方法之一，在开发框架或库时可以有效地使用。模板强调了编程中的可重用性概念。
- en: 'In this section, we will look at creating a class that handles all the common
    functions of all four counters discussed throughout this chapter, and create a
    method that handles the template that sequences or pipelines the steps to be executed
    in all the counters:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将查看创建一个处理本章中讨论的所有四个计数器共同功能的类，并创建一个处理所有计数器中要执行的步骤序列或管道的模板的方法：
- en: 'To begin with, let’s create an abstract class named `CommonCounter`, and initialize
    the class with all the variables that will be used across all four counters. Refer
    to the following code:'
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 首先，让我们创建一个名为`CommonCounter`的抽象类，并用所有四个计数器将使用的所有变量初始化类。参考以下代码：
- en: '[PRE72]'
  id: totrans-184
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE72]'
- en: 'Next, we will be defining the `return_cart`, `goto_counter`, and `scan_bar_code`
    methods to take the input variables that are initialized in the class:'
  id: totrans-185
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义`return_cart`、`goto_counter`和`scan_bar_code`方法，以获取在类中初始化的输入变量：
- en: '[PRE73]'
  id: totrans-186
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE73]'
- en: 'Then, we will be defining the `add_billing`, `add_tax`, and `calc_bill` methods
    to take the input variables that are initialized in the class:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们将定义`add_billing`、`add_tax`和`calc_bill`方法，以获取在类中初始化的输入变量：
- en: '[PRE74]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE74]'
- en: 'For simplicity, we will not be defining the print invoice method, and instead,
    will define the `receive_payment` method, which contains the definition of the
    print invoice method as well within the following code:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为了简单起见，我们不会定义打印发票方法，而是定义包含打印发票方法定义的`receive_payment`方法，以下代码中包含：
- en: '[PRE75]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE75]'
- en: 'Next, we will be defining the `apply_coupon` method, which returns a `0` value.
    This method can be redefined in the child classes if required:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，我们将定义`apply_coupon`方法，它返回`0`值。如果需要，此方法可以在子类中重新定义：
- en: '[PRE76]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE76]'
- en: 'In the preceding code snippets, we defined all the methods that are common
    across all four counters, whereas in the following code, we will be defining methods
    without statements so that they can be redefined within the child classes as and
    when required:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码片段中，我们定义了所有四个计数器中通用的方法，而在以下代码中，我们将定义不带语句的方法，以便可以在子类中按需重新定义：
- en: '[PRE77]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE77]'
- en: 'Then, let’s create review items as an abstract method that needs to have a
    definition within the child classes:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们创建一个作为需要子类中定义的抽象方法的`review_items`：
- en: '[PRE78]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE78]'
- en: Now, the most important concept of templates is defined in the next code.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，模板最重要的概念定义在下一行代码中。
- en: 'Let’s define a method that handles the sequence of operations of a billing
    counter, and let’s use this method as a template for all the child classes that
    will be created for each billing counter:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们定义一个处理计费计数器操作序列的方法，并使用此方法作为为每个计费计数器创建的子类模板：
- en: '[PRE79]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE79]'
- en: We have defined the common class for all counters along with its template method,
    which can be reused for each individual billing counter.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们已定义了所有计数器的通用类及其模板方法，这些方法可以用于每个单独的计费计数器。
- en: 'In the following code, we will create a child class for `VegeCounter`, with
    `CommonCounter` as a parent class:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在以下代码中，我们将为`VegeCounter`创建一个子类，以`CommonCounter`为父类：
- en: '[PRE80]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE80]'
- en: In the preceding code, we have defined the `review_items` abstract method and
    we have also added statements in the definition of the `weight_items` and `add_price_tag`
    methods.
  id: totrans-203
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们已定义了`review_items`抽象方法，并在`weight_items`和`add_price_tag`方法的定义中添加了语句。
- en: 'Similarly, in the following code, let’s create a child class for `ElectronicsCounter`
    and define `review_items` (which is an abstract method), followed by redefining
    `test_electronics` (which did not have a definition in the `CommonCounter` base
    class):'
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 类似地，在以下代码中，让我们为`ElectronicsCounter`创建一个子类，并定义`review_items`（这是一个抽象方法），然后重新定义`test_electronics`（在`CommonCounter`基类中没有定义）：
- en: '[PRE81]'
  id: totrans-205
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Let’s now create a function to run the `pipeline_template` method for each
    of its child classes:'
  id: totrans-206
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在创建一个函数来为每个子类运行`pipeline_template`方法：
- en: '[PRE82]'
  id: totrans-207
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'Executing the `run_pipeline` method for each of the child classes results in
    the sequence of steps executed according to each billing counter. Let’s execute
    the `pipeline` method for the vegetable counter:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对每个子类执行`run_pipeline`方法会导致根据每个计费计数器执行一系列步骤。让我们为蔬菜计数器执行`pipeline`方法：
- en: '[PRE83]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'The output after running the pipeline for `VegeCounter` is as follows:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`VegeCounter`的`pipeline`方法后的输出如下：
- en: '[PRE84]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'Let’s now execute the `pipeline` method for `ElectronicsCounter`:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们现在为`ElectronicsCounter`执行`pipeline`方法：
- en: '[PRE85]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'The output after running the pipeline for `ElectronicsCounter` is as follows:'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 执行`ElectronicsCounter`的`pipeline`方法后的输出如下：
- en: '[PRE86]'
  id: totrans-215
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: In this section, we have created a template, but we have not repeated the same
    methods in multiple class definitions. The same `CommonCounter` abstract class
    can be reused for the definitions of the less than 10 items counter and the greater
    than 10 items counter as well. We learned how to create a template and implement
    template programming that emphasizes reusability in Python application development.
    We created a template that covers all the common functionalities across multiple
    sets of operations and reused the template multiple times.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们创建了一个模板，但我们没有在多个类定义中重复相同的方法。相同的`CommonCounter`抽象类也可以用于小于10个项目的计数器和大于10个项目的计数器的定义。我们学习了如何创建模板并实现模板编程，这强调了在Python应用程序开发中的可重用性。我们创建了一个覆盖多组操作的所有常见功能的模板，并且多次重用了该模板。
- en: Summary
  id: totrans-217
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have learned the concepts of defining methods for a sequence
    of operations that follows an algorithm. We also defined classes that follow a
    sequence of operations from our core example. We created an abstract class that
    defines all the common functionalities of our core example, and we applied the
    templates design pattern to understand the concept of templates using the sequences
    from our core example.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了为遵循算法的一系列操作定义方法的概念。我们还定义了遵循从我们的核心示例中一系列操作的类。我们创建了一个抽象类，它定义了我们的核心示例的所有常见功能，并且我们通过使用我们的核心示例中的序列来应用模板设计模式，以理解模板的概念。
- en: Similar to other chapters covered in this book, this chapter also covered templates,
    which is a design pattern applied in metaprogramming to change the behavior of
    Python objects externally.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 与本书中其他章节类似，本章也涵盖了模板，这是一种在元编程中应用的设计模式，用于外部改变Python对象的行为。
- en: In the next chapter, we will be looking at the concept of abstract syntax trees
    with some interesting examples.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过一些有趣的例子来探讨抽象语法树的概念。
