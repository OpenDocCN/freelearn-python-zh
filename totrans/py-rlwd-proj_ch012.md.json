["```py\n% conda install jsonschema pydantic\n```", "```py\n% python -m pip install jupyterlab\n```", "```py\n% mypy --install-types\n```", "```py\n[mypy]\nplugins = pydantic.mypy\n```", "```py\nfrom pydantic import Field\nfrom pydantic.dataclasses import dataclass\n\n@dataclass\nclass SeriesSample:\n    \"\"\"\n    An individual sample value.\n    \"\"\"\n    x: float = Field(title=\"The x attribute\", ge=0.0)\n    y: float = Field(title=\"The y attribute\", ge=0.0)\n\n@dataclass\nclass Series:\n    \"\"\"\n    A named series with a collection of values.\n    \"\"\"\n    name: str = Field(title=\"Series name\")\n    samples: list[SeriesSample] = Field(title=\"Sequence of samples\n      in this series\")\n```", "```py\nfrom pydantic import schema_of\nimport json\n\nif __name__ == \"__main__\":\n    schema = schema_of(Series)\n    print(json.dumps(schema, indent=2))\n```", "```py\n{\n  \"title\": \"Series\",\n  \"description\": \"A named series with a collection of values.\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"name\": {\n      \"title\": \"Series name\",\n      \"type\": \"string\"\n    },\n    \"samples\": {\n      \"title\": \"Sequence of samples in this series\",\n      \"type\": \"array\",\n      \"items\": {\n        \"\\$ref\": \"#/definitions/SeriesSample\"\n      }\n    }\n  },\n  \"required\": [\n    \"name\",\n    \"samples\"\n  ],\n  ...\n}\n```", "```py\nfrom pydantic import schema_of\nfrom jsonschema.validators import Draft202012Validator\nfrom analysis_model import *\n\nschema = schema_of(SeriesSample)\nvalidator = Draft202012Validator(schema)\n```", "```py\ndef validate_ndjson_file(\n        validator: Draft202012Validator,\n        source_file: TextIO\n) -> Counter[str]:\n    counts: Counter[str] = Counter()\n    for row in source_file:\n        document = json.loads(row)\n        if not validator.is_valid(document):\n            errors = list(validator.iter_errors(document))\n            print(document, errors)\n            counts[’faulty’] += 1\n        else:\n            counts[’good’] += 1\n    return counts\n```", "```py\nScenario: Valid file is recognized.\n    Given a file \"example_1.ndjson\" with the following content\n        \"\"\"\n        {\"x\": 1.2, \"y\": 3.4}\n        {\"x\": 5.6, \"y\": 7.8}\n        \"\"\"\n    When the schema validation tool is run with the analysis schema\n    Then the output shows 2 good records\n    And the output shows 0 faulty records\n```", "```py\n    # Given (shown earlier)...\n    # When (shown earlier)...\n    Then the log has an INFO line with \"header: [’x’, ’y’]\"\n    And log has INFO line with \"Series_1 count: 11\"\n    And log has INFO line with \"Series_2 count: 11\"\n    And log has INFO line with \"Series_3 count: 11\"\n    And log has INFO line with \"Series_4 count: 11\"\n    And the output directory files are valid\n        using the \"schema/Anscombe_Source.json\" schema\n```"]