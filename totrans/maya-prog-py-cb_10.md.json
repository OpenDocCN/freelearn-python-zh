["```py\n# listing of pythonFromMel.py\nimport maya.cmds as cmds\n\ndef makeSphere():\n    cmds.sphere()\n```", "```py\nglobal proc melToPython()\n{\n    python \"import pythonFromMel\";\n    python \"pythonFromMel.makeSphere()\";\n}\n```", "```py\n/Users/Shared/Autodesk/Maya/(Version)/scripts\n```", "```py\n\\Documents and Settings\\<username>\\My Documents\\maya\n```", "```py\npython \"print('hello from Python')\"\n```", "```py\npython \"import pythonFromMel\";\n```", "```py\nmoduleName.functionName()\n```", "```py\npython \"pythonFromMel.makeSphere()\";\n```", "```py\npython \"import pythonFromMel; pythonFromMel.makeSphere()\";\n```", "```py\nimport maya.mel as mel\n\nmaya.mel.createMelWrapper(pythonFromMel.makeSphere)\n```", "```py\nglobal proc makeSphere () {\n    python(\"from pythonFromMel import makeSphere\");\n\n    python(\"makeSphere()\"); }\n```", "```py\n/Users/Shared/Autodesk/Maya/icons/\n```", "```py\n\\Documents and Settings\\<username>\\My Documents\\maya\\icons\\\n```", "```py\nimport maya.cmds as cmds\n\ndef startCtx():\n    print(\"starting context\")\n\ndef finalizeCtx():\n    objs = cmds.ls(selection=True)\n\n    numObjs = len(objs)\n    xpos = 0\n    ypos = 0\n    zpos = 0\n\n    for o in objs:\n        # print(o)\n        pos = cmds.xform(o, query=True, worldSpace=True, translation=True)\n        # print(pos)\n        xpos += pos[0]\n        ypos += pos[1]\n        zpos += pos[2]\n\n    xpos /= numObjs\n    ypos /= numObjs\n    zpos /= numObjs\n\n    newLoc = cmds.spaceLocator()\n    cmds.move(xpos, ypos, zpos, newLoc)\n\ndef createContext():\n    toolStartStr = 'python(\"customCtx .startCtx()\");'\n    toolFinishStr = 'python(\"customCtx .finalizeCtx()\");'\n\n    newCtx = cmds.scriptCtx(i1='myTool.png', title='MyTool', setNoSelectionPrompt='Select at least two objects',toolStart=toolStartStr, finalCommandScript=toolFinishStr, totalSelectionSets=1, setSelectionCount=2, setAllowExcessCount=True, setAutoComplete=False, toolCursorType=\"create\")\n\n    cmds.setToolTo(newCtx)\n\ncreateContext()\n```", "```py\ndef startCtx():\n    print(\"starting context\")\n```", "```py\ndef finalizeCtx():\n    objs = cmds.ls(selection=True)\n\n    numObjs = len(objs)\n    xpos = 0\n    ypos = 0\n    zpos = 0\n```", "```py\n    for o in objs:\n        # print(o)\n        pos = cmds.xform(o, query=True, worldSpace=True, translation=True)\n        xpos += pos[0]\n        ypos += pos[1]\n        zpos += pos[2]\n```", "```py\n    xpos /= numObjs\n    ypos /= numObjs\n    zpos /= numObjs\n\n    newLoc = cmds.spaceLocator()\n    cmds.move(xpos, ypos, zpos, newLoc)\n```", "```py\ndef createContext():\n    toolStartStr = 'python(\"customCtx .startCtx()\");'\n    toolFinishStr = 'python(\"customCtx .finalizeCtx()\");'\n```", "```py\nnewCtx = cmds.scriptCtx(i1='myTool.png', title='MyTool', setNoSelectionPrompt='Select at least two objects',toolStart=toolStartStr, finalCommandScript=toolFinishStr, totalSelectionSets=1, setSelectionCount=2, setAllowExcessCount=True, setAutoComplete=False, toolCursorType=\"create\")\n```", "```py\ncmds.setToolTo(newCtx)\n```", "```py\nmakeBoneCtx = cmds.jointCtx()\ncmds.setToolTo(makeBoneCtx)\n```", "```py\ncmds.ctxAbort()\n```", "```py\nimport maya.cmds as cmds\n\ndef killAll():\n    cmds.scriptJob(killAll=True, force=True)\n    print('KILLED ALL JOBS')\n\nkillAll()\n```", "```py\nimport maya.cmds as cmds\nimport sys\n\ndef selectionChanged():\n    objs = cmds.ls(selection=True)\n\n    if len(objs) < 1:\n        sys.stdout.write('NOTHING SELECTED')\n    else:\n        shapeNodes = cmds.listRelatives(objs[0], shapes=True)\n        msg = objs[0]\n        if (len(shapeNodes) > 0):\n            msg += \": \" + cmds.nodeType(shapeNodes[0])\n\n        sys.stdout.write(msg)\n\ndef makeEventScriptJob():\n    cmds.scriptJob(event=[\"SelectionChanged\", selectionChanged], killWithScene=True)\n\nmakeEventScriptJob()\n```", "```py\ndef selectionChanged():\n    objs = cmds.ls(selection=True)\n```", "```py\n    if len(objs) < 1:\n        sys.stdout.write('NOTHING SELECTED')\n```", "```py\n    else:\n        shapeNodes = cmds.listRelatives(objs[0], shapes=True)\n        msg = objs[0]\n        if (len(shapeNodes) > 0):\n            msg += \": \" + cmds.nodeType(shapeNodes[0])\n\n        sys.stdout.write(msg)\n```", "```py\ncmds.scriptJob(event=[\"SelectionChanged\", selectionChanged], killWithScene=True)\n```", "```py\njobID = cmds.scriptJob(event=[\"SelectionChanged\", selectionChanged], killWithScene=True)\n```", "```py\ncmds.scriptJob(kill=jobID)\n```", "```py\ncmds.scriptJob(kill=jobID, force=True)\n```", "```py\njobs = cmds.scriptJob(listJobs=True)\n\nfor j in jobs:\n        print(j)\n```", "```py\n0:  \"-permanent\" \"-event\" \"PostSceneRead\" \"generateUvTilePreviewsPostSceneReadCB\"\n1:  \"-permanent\" \"-parent\" \"MayaWindow\" \"-event\" \"ToolChanged\" \"changeToolIcon\"\n```", "```py\ndef scriptJobUI():\n    win = cmds.window(title=\"SJ\", widthHeight=(300, 200))\n\n    cmds.scriptJob(parent=win, event=[\"SelectionChanged\", respondToSelection])\n\n    cmds.showWindow(win)\n```", "```py\nimport maya.cmds as cmds\n\ndef testUI():\n    win = cmds.window(title=\"Script Node\", widthHeight=(300,200))\n    cmds.columnLayout()\n    cmds.button(label=\"Make Sphere\", command=\"cmds.sphere()\")\n    cmds.showWindow(win)\n\ntestUI()\n```", "```py\nimport maya.cmds as cmds\n\ndef createScriptNode():\n    filePath = cmds.fileDialog2(fileMode=1, fileFilter=\"Python files (*.py)\")\n\n    if (filePath == None):\n        return\n\n    f = open(filePath[0], \"r\")\n\n    scriptStr = \"\"\n\n    line = f.readline()\n    while (line):\n        scriptStr += line\n        line = f.readline()\n\n    f.close()\n\n    cmds.scriptNode(sourceType=\"python\", scriptType=2, beforeScript=scriptStr)\n\ncreateScriptNode()\n```", "```py\ndef createScriptNode():\n    filePath = cmds.fileDialog2(fileMode=1, fileFilter=\"Python files (*.py)\")\n```", "```py\n    if (filePath == None):\n        return\n```", "```py\nf = open(filePath[0], \"r\")\n```", "```py\n    scriptStr = \"\"\n\n    line = f.readline()\n    while (line):\n        scriptStr += line\n        line = f.readline()\n```", "```py\nf.close()\n```", "```py\ncmds.scriptNode(sourceType=\"python\", scriptType=2, beforeScript=scriptStr)\n```", "```py\ncmds.scriptNode(\"scriptNodeName\", executeBefore=True)\n```", "```py\ncmds.scriptNode(\"scriptNodeName\", executeAfter=True)\n```", "```py\nimport maya.cmds as cmds\n\ndef testUI():\n    win = cmds.window(title=\"Script Node\", widthHeight=(300,200))\n    # add some features here\n    cmds.showWindow(win)\n\ndef otherUI():\n    win = cmds.window(title=\"Other UI\", widthHeight=(300,200))\n    # add some features here\n    cmds.showWindow(win)\n```", "```py\nimport maya.cmds as cmds\n\nclass EmbedUI():\n\n    def __init__(self):\n        self.win = cmds.window(title=\"Embed UI\", widthHeight=(300,400))\n        self.commandList = {}\n\n        cmds.columnLayout()\n\n        self.loadButton = cmds.button(label=\"Load Script\", width=300, command=self.loadScript)\n        self.makeNodeBtn = cmds.button(label=\"Tie Script to Current Object\", width=300, command=self.makeNode)\n\n        self.functionList = cmds.textScrollList(width=300, numberOfRows=10, selectCommand=self.showCommand)\n\n        cmds.showWindow(self.win)\n\n    def loadScript(self, args):\n\n        self.commandList = {}\n\n        filePath = cmds.fileDialog2(fileMode=1, fileFilter=\"Python files (*.py)\")\n\n        if (filePath == None):\n            return\n\n        f = open(filePath[0], \"r\")\n\n        functionName = \"\"\n        functionStr = \"\"\n\n        line = f.readline()\n\n        while (line):\n            parts = line.split()\n\n            if (line.startswith(\"import\")):\n                pass\n\n            elif (line.startswith(\"def\")):\n                if (functionName != \"\" and functionStr != \"\"):\n                    self.commandList[functionName] = functionStr\n\n                functionName = parts[1].replace(\"():\", \"\")\n                functionStr += line\n\n            elif (line.strip() == \"\"):\n                # possibly blank line, check for tab\n                if (line.startswith(\"\\t\") == False):\n                    # blank line, see if we have a function\n                    if (functionName != \"\" and functionStr != \"\"):\n                        self.commandList[functionName] = functionStr\n                        functionName = \"\"\n                        functionStr = \"\"\n            else:\n                functionStr += line\n\n            line = f.readline()\n\n        f.close()\n        self.updateList()\n\n    def updateList(self):\n        cmds.textScrollList(self.functionList, edit=True, removeAll=True)\n\n        for function in self.commandList:\n            cmds.textScrollList(self.functionList, edit=True, append=function)\n\n    def showCommand(self):\n        command = cmds.textScrollList(self.functionList, query=True, selectItem=True)[0]\n\n    def makeNode(self, args):\n        command = cmds.textScrollList(self.functionList, query=True, selectItem=True)[0]\n\n        objectName = \"\"\n        objs = cmds.ls(selection=True)\n\n        if (len(objs) > 0):\n            objectName = objs[0]\n\n        if (command != \"\" and objectName != \"\"):\n            print(\"Tying \" + command + \" to \" + objectName)\n\n            nodeStr = \"import maya.cmds as cmds\\n\\n\"\n\n            nodeStr += self.commandList[command] + \"\\n\\n\"\n\n            nodeStr += 'def testSelection():\\n'\n            nodeStr += '\\tobjs = cmds.ls(selection=True)\\n'\n            nodeStr += '\\tif (len(objs) > 0):\\n'\n            nodeStr += '\\t\\tif (objs[0] == \"' + objectName + '\"):\\n'\n            nodeStr += '\\t\\t\\t' + command + '()\\n\\n'\n\n            nodeStr += 'cmds.scriptJob(killWithScene=True, event=[\"SelectionChanged\", testSelection])'\n\n            cmds.scriptNode(sourceType=\"python\", scriptType=2, beforeScript=nodeStr)\n\n        else:\n            cmds.error(\"Please select a script and an object\")\n\nEmbedUI()\n```", "```py\nclass EmbedUI():\n\n    def __init__(self):\n        self.win = cmds.window(title=\"Embed UI\", widthHeight=(300,400))\n        self.commandList = {}\n\n        cmds.columnLayout()\n\n        self.loadButton = cmds.button(label=\"Load Script\", width=300, command=self.loadScript)\n        self.makeNodeBtn = cmds.button(label=\"Tie Script to Current Object\", width=300, command=self.makeNode)\n\n        self.functionList = cmds.textScrollList(width=300, numberOfRows=10, selectCommand=self.showCommand)\n\n        cmds.showWindow(self.win)\n```", "```py\n    def loadScript(self, args):\n        self.commandList = {}\n        filePath = cmds.fileDialog2(fileMode=1, fileFilter=\"Python files (*.py)\")\n```", "```py\n    if (filePath == None):\n        return\n\n    f = open(filePath[0], \"r\")\n```", "```py\nfunctionName = \"\"\nfunctionStr = \"\"\n```", "```py\n    line = f.readline()\n    while (line):\n        # code to handle contents\n        line = f.readline()\n```", "```py\n        while (line):\n            if (line.startswith(\"import\")):\n                pass\n```", "```py\nelif (line.startswith(\"def\")):\n```", "```py\nif (functionName != \"\" and functionStr != \"\"):\n    self.commandList[functionName] = functionStr\n```", "```py\nparts = line.split()\nfunctionName = parts[1].replace(\"():\", \"\")\n```", "```py\nfunctionStr = line\n```", "```py\nelif (line.strip() == \"\"):\n    # possibly blank line, check for tab\n    if (line.startswith(\"\\t\") == False):\n```", "```py\n    if (functionName != \"\" and functionStr != \"\"):\n        self.commandList[functionName] = functionStr\n        functionName = \"\"\n        functionStr = \"\"\n```", "```py\nelse:\n    functionStr += line\n```", "```py\n        f.close()\n        self.updateList()\n```", "```py\n    def updateList(self):\n        cmds.textScrollList(self.functionList, edit=True, removeAll=True)\n```", "```py\n        for function in self.commandList:\n            cmds.textScrollList(self.functionList, edit=True, append=function)\n```", "```py\ncommand = cmds.textScrollList(self.functionList, query=True, selectItem=True)[0]\n```", "```py\n        objectName = \"\"\n        objs = cmds.ls(selection=True)\n\n        if (len(objs) > 0):\n            objectName = objs[0]\n```", "```py\n    if (command != \"\" and objectName != \"\"):\n        print(\"Tying \" + command + \" to \" + objectName)\n        nodeStr = \"import maya.cmds as cmds\\n\\n\"\n```", "```py\n        nodeStr += self.commandList[command] + \"\\n\\n\"\n```", "```py\ndef testSelection():\n    objs = cmds.ls(selection=True)\n    if (len(objs) > 0):\n        if (objs[0] == \"triggerObject\"):\n            myFunction()\n```", "```py\n    nodeStr += 'def testSelection():\\n'\n    nodeStr += '\\tobjs = cmds.ls(selection=True)\\n'\n    nodeStr += '\\tif (len(objs) > 0):\\n'\n    nodeStr += '\\t\\tif (objs[0] == \"' + objectName + '\"):\\n'\n    nodeStr += '\\t\\t\\t' + command + '()\\n\\n'\n```", "```py\nnodeStr += 'cmds.scriptJob(killWithScene=True, event=[\"SelectionChanged\", testSelection])'\n```", "```py\ncmds.scriptNode(sourceType=\"python\", scriptType=2, beforeScript=nodeStr)\n```", "```py\nselectionFunctionName = \"testFor\" + command\n\nnodeStr += 'def ' + selectionFunctionName + '():\\n'\nnodeStr += '\\tobjs = cmds.ls(selection=True)\\n'\nnodeStr += '\\tif (len(objs) > 0):\\n'\nnodeStr += '\\t\\tif (objs[0] == \"' + objectName + '\"):\\n'\nnodeStr += '\\t\\t\\t' + command + '()\\n\\n'\n\nnodeStr += 'cmds.scriptJob(killWithScene=True, event=[\"SelectionChanged\", ' + selectionFunctionName + '])'\n```"]