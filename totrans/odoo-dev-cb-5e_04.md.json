["```py\n    _name = 'hostel.hostel'\n    ```", "```py\n    _name = 'project.task.stage.personal'\n    _table = 'project_task_user_rel'\n    ```", "```py\n    _description = 'Information about hostel'\n    ```", "```py\n    _order = \"id desc, name\"\n    ```", "```py\n    _rec_name = 'hostel_code'\n    hostel_code = fields.Char(string=\"Code\", required=True)\n    ```", "```py\n    _rec_names_search = ['name', 'code']\n    ```", "```py\n@api.depends('hostel_code')\n    def _compute_display_name(self):\n        for record in self:\n            name = record.name\n            if record.hostel_code:\n                name = f'{name} ({record.hostel_code})'\n            record.display_name = name\n```", "```py\nfrom odoo import fields, models\nclass Hostel(models.Model):\n_name = 'hostel.hostel'\n_description = \"Information about hostel\"\n_order = \"id desc, name\"\n_rec_name = 'hostel_code'\nname = fields.Char(string=\"hostel Name\", required=True)\nhostel_code = fields.Char(string=\"Code\", required=True)\nstreet = fields.Char('Street')\nstreet2 = fields.Char('Street2')\nzip = fields.Char('Zip', change_default=True)\ncity = fields.Char('City')\nstate_id = fields.Many2one(\"res.country.state\", string='State')\ncountry_id = fields.Many2one('res.country', string='Country')\nphone = fields.Char('Phone',required=True)\nmobile = fields.Char('Mobile',required=True)\nemail = fields.Char('Email')\n@api.depends('hostel_code')\n    def _compute_display_name(self):\n        for record in self:\n            name = record.name\n            if record.hostel_code:\n                name = f'{name} ({record.hostel_code})'\n            record.display_name = name\n```", "```py\n<form string=\"Hostel\">\n  <sheet>\n    <div class=\"oe_title\">\n      <h3>\n        <table>\n          <tr>\n            <td style=\"padding-right:10px;\">\n            <field name=\"name\" required=\"1\" \n            placeholder=\"Name\" /></td>\n            <td style=\"padding-right:10px;\">\n            <field name=\"hostel_code\" placeholder=\"Code\" \n            /></td>\n          </tr>\n        </table>\n      </h3>\n    </div>\n    <group>\n      <group>\n        <label for=\"street\" string=\"Address\"/>\n          <div class=\"o_address_format\">\n            <field name=\"street\" placeholder=\"Street...\" \n            class=\"o_address_street\"/>\n            <field name=\"street2\" placeholder=\"Street 2...\" \n            class=\"o_address_street\"/>\n            <field name=\"city\" placeholder=\"City\" \n            class=\"o_address_city\"/>\n            <field name=\"state_id\" class=\"o_address_state\" \n            placeholder=\"State\" options='{\"no_open\": \n            True}'/>\n            <field name=\"zip\" placeholder=\"ZIP\" \n            class=\"o_address_zip\"/>\n            <field name=\"country_id\" placeholder=\"Country\"\n            class=\"o_address_country\" options='{\"no_open\": \n            True, \"no_create\": True}'/>\n          </div>\n      </group>\n      <group>\n        <field name=\"phone\" widget=\"phone\"/>\n          <field name=\"mobile\" widget=\"phone\"/>\n            <field name=\"email\" widget=\"email\" \n            context=\"{'gravatar_image': True}\"/>\n      </group>\n    </group>\n  </sheet>\n</form>\n```", "```py\nActivate developer mode ->Apps -> Update App List\n```", "```py\n    from odoo import models, fields\n    class Hostel(models.Model):\n        # …\n        email = fields.Char('Email')\n        hostel_floors = fields.Integer(string=\"Total Floors\")\n        image = fields.Binary('Hostel Image')\n        active = fields.Boolean(\"Active\", default=True,\n        help=\"Activate/Deactivate hostel record\")\n        type = fields.Selection([(\"male\", \"Boys\"), (\"female\", \"Girls\"),\n        (\"common\", \"Common\")], \"Type\", help=\"Type of Hostel\",\n        required=True, default=\"common\")\n        other_info = fields.Text(\"Other Information\",\n        help=\"Enter more information\")\n        description = fields.Html('Description')\n        hostel_rating = fields.Float('Hostel Average Rating', digits=(14, 4))\n    ```", "```py\n    <field name=\"image\" widget=\"image\" class=\"oe_avatar\"/>\n      <group>\n        <group>\n        <label for=\"street\" string=\"Address\"/>\n        <div class=\"o_address_format\">\n          <field name=\"street\" placeholder=\"Street...\" class=\"o_address_street\"/>\n          <field name=\"street2\" placeholder=\"Street 2...\" class=\"o_address_street\"/>\n          <field name=\"city\" placeholder=\"City\" class=\"o_address_city\"/>\n          <field name=\"state_id\" class=\"o_address_state\" \n          placeholder=\"State\" options='{\"no_open\": True}'/>\n          <field name=\"zip\" placeholder=\"ZIP\" class=\"o_address_zip\"/>\n          <field name=\"country_id\" placeholder=\"Country\"\n          class=\"o_address_country\" options='{\"no_open\": True,\n           \"no_create\": True}'/>\n        </div>\n        <field name=\"phone\" widget=\"phone\"/>\n        <field name=\"mobile\" widget=\"phone\"/>\n        <field name=\"email\" widget=\"email\" context=\"{'gravatar_image': True}\"/>\n        </group>\n        <group>\n          <field name=\"hostel_floors\"/>\n          <field name=\"active\"/>\n          <field name=\"type\"/>\n          <field name=\"hostel_rating\"/>\n          <field name=\"other_info\"/>\n        </group>\n      </group>\n      <group>\n        <field name=\"description\"/>\n      </group>\n    ```", "```py\n       .. code-block:: python\n            @api.model\n            def _read_group_selection_field(self, values, domain, order):\n                return ['choice1', 'choice2', ...] # available selection choices.\n             @api.model\n            def _read_group_many2one_field(self, records, domain, order):\n                return records + self.search([custom_domain])\n    ```", "```py\nactive = fields.Boolean('Active', default=True)\n```", "```py\n    <record forcecreate=\"True\" id=\"decimal_point\" model=\"decimal.precision\">\n    <field name=\"name\">Rating Value</field>\n    <field name=\"digits\">3</field>\n    </record>\n    ```", "```py\n    class Hostel(models.Model):\n        hostel_rating = fields.Float('Hostel Average Rating',\n        # digits=(14, 4) # Method 1: Optional precision (total, decimals),\n        digits='Rating Value' # Method 2\n    )\n    ```", "```py\n    class HostelRoom(models.Model):\n        _name = \"hostel.room\"\n        …#\n        currency_id = fields.Many2one('res.currency', string='Currency')\n    ```", "```py\n    class HostelRoom(models.Model):\n        _name = \"hostel.room\"\n        …#\n        rent_amount = fields.Monetary('Rent Amount', help=\"Enter rent amount per month\") # optional attribute: currency_field='currency_id' incase currency field have another name then 'currency_id'\n    ```", "```py\n    class HostelRoom(models.Model):\n\n    # ...\n        hostel_id = fields.Many2one(\"hostel.hostel\", \"hostel\", help=\"Name of hostel\")\n    ```", "```py\n    class HostelStudent(models.Model):\n        _name = \"hostel.student\"\n        name = fields.Char(\"Student Name\")\n        gender = fields.Selection([(\"male\", \"Male\"),\n        (\"female\", \"Female\"), (\"other\", \"Other\")],\n        string=\"Gender\", help=\"Student gender\")\n        active = fields.Boolean(\"Active\", default=True,\n        help=\"Activate/Deactivate hostel record\")\n        room_id = fields.Many2one(\"hostel.room\", \"Room\",\n    help=\"Select hostel room\")\n    class HostelRoom(models.Model):\n        _name = \"hostel.room\"\n        # ...\n        student_ids = fields.One2many(\"hostel.student\", \"room_id\",\n        string=\"Students\", help=\"Enter students\")\n    ```", "```py\n    class HostelAmenities(models.Model):\n        _name = \"hostel.amenities\"\n        _description = \"Hostel Amenities\"\n        name = fields.Char(\"Name\", help=\"Provided Hostel Amenity\")\n        active = fields.Boolean(\"Active\",\n        help=\"Activate/Deactivate whether the amenity should be given or not\")\n    ```", "```py\n    class HostelRoom(models.Model):\n        _name = \"hostel.room\"\n        # ...\n        hostel_amenities_ids = fields.Many2many(\"hostel.amenities\",\n        \"hostel_room_amenities_rel\", \"room_id\", \"amenitiy_id\",\n        string=\"Amenities\", domain=\"[('active', '=', True)]\",\n        help=\"Select hostel room amenities\")\n    ```", "```py\n    from . import Hostel Category model with the parent and child relationships, create the models/hostel_categ.py file with the following code:\n\n    ```", "```py\n\n    ```", "```py\n    _parent_store = True\n    _parent_name = \"parent_id\" # optional if field is 'parent_id'\n    parent_path = fields.Char(index=True, unaccent=False)\n    ```", "```py\n    from odoo.exceptions import ValidationError\n    ...\n    @api.constrains('parent_id')\n    def _check_hierarchy(self):\n        if not self._check_recursion():\n            raise models.ValidationError(\n                'Error! You cannot create recursive categories.')\n    ```", "```py\n    category_id = fields.Many2one('hostel.category')\n    ```", "```py\n    _sql_constraints = [\n       (\"room_no_unique\", \"unique(room_no)\", \"Room number must be unique!\")]\n    ```", "```py\n    from odoo.exceptions import ValidationError\n    ...\n     @api.constrains(\"rent_amount\")\n         def _check_rent_amount(self):\n            \"\"\"Constraint on negative rent amount\"\"\"\n            if self.rent_amount < 0:\n            raise ValidationError(_(\"Rent Amount Per Month should not be a negative value!\"))\n    ```", "```py\n    student_per_room = fields.Integer(\"Student Per Room\", required=True,help=\"Students allocated per room\")'\n    availability = fields.Float(compute=\"_compute_check_availability\",string=\"Availability\", help=\"Room availability in hostel\")\n    @api.depends(\"student_per_room\", \"student_ids\")\n    def _compute_check_availability(self):\n        \"\"\"Method to check room availability\"\"\"\n        for rec in self:\n    rec.availability = rec.student_per_room - len(rec.student_ids.ids)\n    ```", "```py\n    admission_date = fields.Date(\"Admission Date\",\n        help=\"Date of admission in hostel\",\n        default=fields.Datetime.today)\n    discharge_date = fields.Date(\"Discharge Date\",\n        help=\"Date on which student discharge\")\n    duration = fields.Integer(\"Duration\",  compute=\"_compute_check_duration\", inverse=\"_inverse_duration\", help=\"Enter duration of living\")\n    @api.depends(\"admission_date\", \"discharge_date\")\n    def _compute_check_duration(self):\n        \"\"\"Method to check duration\"\"\"\n        for rec in self:\n            if rec.discharge_date and rec.admission_date:\n                rec.duration = (rec.discharge_date - rec.admission_date).days\n    def _inverse_duration(self):\n        for stu in self:\n            if stu.discharge_date and stu.admission_date:\n                duration = (stu.discharge_date - stu.admission_date).days\n                if duration != stu.duration:\n                    stu.discharge_date = (stu.admission_date + timedelta(days=stu.duration)).strftime('%Y-%m-%d')\n    ```", "```py\n    availability = fields.Float(compute=\"_compute_check_availability\", store=True, string=\"Availability\", help=\"Room availability in hostel\")\n    ```", "```py\n    @api.depends('price')\n    @api.depends_context('company_id')\n    def _compute_value(self):\n        company_id = self.env.context.get('company_id')\n       ...\n       # other computation\n```", "```py\nclass HostelStudent(models.Model):\n    _name = \"hostel.student\"\n    # ...\n    hostel_id = fields.Many2one(\"hostel.hostel\", related='room_id.hostel_id')\n```", "```py\n    from odoo import models, fields, api\n    class Hostel(models.Model):\n    _name = 'hostel.hostel'\n        # ...\n        @api.model\n        def _referencable_models(self):\n            models = self.env['ir.model'].search([\n                ('field_id.name', '=', 'message_ids')])\n            return [(x.model, x.name) for x in models]\n    ```", "```py\n        ref_doc_id = fields.Reference(\n            selection='_referencable_models',\n            string='Reference Document')\n    ```", "```py\n[('res.users', 'User'), ('res.partner', 'Partner')]\n```", "```py\n    class ResPartner(models.Model):\n       _inherit = \"res.partner\"\n       is_hostel_rector = fields.Boolean(\"Hostel Rector\", help=\"Activate if the following person is hostel rector\")\n       assign_room_ids = fields.Many2many('library.book',string='Authored Books')\n       count_assign_room = fields.Integer( 'Number of Authored Books', compute=\"_compute_count_room\")\n    ```", "```py\n    @api.depends('assign_room_ids')\n       def _compute_count_room(self):\n           for partner in self:\n               partner.count_assign_room = len(partner.assign_room_ids)\n    ```", "```py\n    from odoo import fields, models, api, _\n    class HostelRoomCopy(models.Model):\n       _name = \"hostel.room.copy\"\n       _inherit=\"hostel.room\"\n       _description = \"Hostel Room Information Copy\"\n    ```", "```py\n    from . import hostel_room\n    from . import hostel_room_copy\n    ```", "```py\n    class HostelStudent(models.Model):\n       _name = \"hostel.student\"\n       _inherits = {'res.partner': 'partner_id'}\n       _description = \"Hostel Student Information\"\n       ………\n       partner_id = fields.Many2one('res.partner', ondelete='cascade')\n    ```", "```py\n    gender = fields.Selection([(\"male\", \"Male\"),\n           (\"female\", \"Female\"), (\"other\", \"Other\")],\n           string=\"Gender\", help=\"Student gender\")\n       room_id = fields.Many2one(\"hostel.room\", \"Room\",\n           help=\"Select hostel room\")\n    ```", "```py\nclass HostelStudent(models.Model):\n   _name = \"hostel.student\"\n   _description = \"Hostel Student Information\"\n   partner_id = fields.Many2one('res.partner', ondelete='cascade', delegate=True)\n```", "```py\n    class BaseArchive(models.AbstractModel):\n       _name = 'base.archive'\n       active = fields.Boolean(default=True)\n       def do_archive(self):\n           for record in self:\n               record.active = not record.active\n    ```", "```py\n    class HostelRoom(models.Model):\n       _name = \"hostel.room\"\n       _inherit = ['base.archive']\n    ```"]