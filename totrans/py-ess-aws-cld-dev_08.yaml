- en: '8'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Database Operations with RDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we are going to learn the basics of **Amazon Relational Database
    Service** (**Amazon RDS**) and create an RDS instance in order to make a database
    operation. You can use RDS to create the most popular databases in AWS. You can
    create Oracle, MySQL, or MS SQL databases on the cloud with scaling capabilities.
    In general, when you need to create a database, you must manage the infrastructure
    using an on-premises system. Managing the hardware and infrastructure, installing
    the database, and then monitoring could require a lot of effort to set up. AWS
    allows you to select the database type that you want and then create it with a
    simple button click – that is all:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.01_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.1 – Click to create
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will create a database and make some operations using Python.
    The chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Features of RDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning RDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to the RDS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a table in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Database operations with Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Secrets Manager
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Features of RDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'RDS comes with different features that facilitate the creation and maintenance
    of the database. Let’s look at the most important features:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Easy to use**: You can easily create and maintain RDS via the AWS console.
    It also allows us to use some API capabilities to make some programmatic operations.
    For example, you can create and scale the database, and monitor its usage.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Scalability**: RDS supports scalability; if there is a need to support more
    capacity, you can easily scale the database up. However, if the capacity is less
    than you estimate, you can reduce the capacity with a *scale-down request* to
    reduce the cost. Another option is Amazon Aurora, which allows cloud users to
    implement more performance-intensive applications that support a **Relational
    Database Management** **System** (**RDBMS**).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backup**: A database backup is important in case any issue arises with the
    infrastructure. In some cases, the backup is used to create a new database. RDS
    supports both manual and automated backups. You can create a snapshot whenever
    you want, or RDS can take a snapshot at regular intervals. In general, the snapshots
    are stored in AWS S3 buckets.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Multi-AZ deployment**: RDS can be available within different locations to
    improve availability. If the infrastructure is down in one location, RDS can serve
    in another location to improve availability. This approach can be used for critical
    applications that use databases in the cloud.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Monitoring**: Monitoring is very important for critical applications. You
    can track how the database is behaving and see whether there are any issues in
    it. RDS has a supporting monitoring feature. For example, you can track when I/O
    problems are happening in the database, and you can take the right action.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost options**: AWS offers different pricing options for using the database.
    One of the popular options is the *pay-as-you-go* option. In this option, you
    don’t need to commit to any long-term contract. You simply pay for how many resources
    you use in a specific period. Hence, you can pay the bill monthly. In other options,
    you make a contract with AWS for a specific duration; however, in this case, you
    have to pay for the contract even if you don’t use the database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning RDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to create a sample relational database on the
    cloud. To provision the RDS on AWS, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the AWS console and type `rds` in the search box:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.02_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.2 – RDS on the console
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Databases** on the left pane to see the list of databases. To create
    a new database, click **Create database**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.03_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.3 – Database list
  prefs: []
  type: TYPE_NORMAL
- en: 'On the new panel, **Create database**, and fill out the information required
    for the new database. RDS supports multiple database types, such as Amazon Aurora,
    MySQL, MariaDB, PostgreSQL, Oracle, and Microsoft SQL Server. In this example,
    we will use **MySQL**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.04_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.4 – MySQL selection
  prefs: []
  type: TYPE_NORMAL
- en: 'After selecting **MySQL**, scroll down and select the correct version of MySQL.
    In this example, we will use one of the latest versions, **MySQL 8.0.28**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.05_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.5 – Template selection
  prefs: []
  type: TYPE_NORMAL
- en: Templates are useful for working in different environments. When you select
    the **Production** template, it gives you high availability. In this example,
    we will select the **Free tier** template to avoid any costs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Scroll down and fill in the **Settings** details. In the **Settings** panel,
    you need to fill in the database identifier, username, and password:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.06_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.6 – Settings
  prefs: []
  type: TYPE_NORMAL
- en: '**DB instance identifier** is used to represent the database name in the cloud.
    You can also enter the **Master username** and **Master password** details. These
    credentials are important for security.'
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down and fill in the details with regard to storage and instance configuration.
  prefs: []
  type: TYPE_NORMAL
- en: In **Instance configuration**, in **DB instance class**, you can select the
    processor and memory types. Since we are creating it for education, you can select
    the simple instance type that has basic hardware features. Another hardware selection
    is made for **Storage**. You can keep what AWS has recommended or use the minimum
    values.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In **Storage type**, you can select the disk type. In **Allocated storage**,
    you have to specify the limit of the disk. For this example, we selected **200**
    GiB. If the disk needs to be scaled, you can check the **Enable storage autoscaling**
    checkbox.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the disk is scaled, the value you enter in the `1000`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.07_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.7 – Instance configuration (part 1)
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down and fill in the details with regard to **Connectivity**.
  prefs: []
  type: TYPE_NORMAL
- en: In the first option, AWS asks whether you want to connect to EC2\. For this
    example, we don’t need to connect to EC2, so we select **Don’t connect to an EC2
    compute resource**. (After setting up the database, we will use Lambda for database
    operations.) RDS needs to be created in the VPC, so in **Virtual private cloud
    (VPC)**, we select **Create new VPC**, and it will automatically create a VPC.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Another option is to select a group in **DB Subnet group**. This allows you
    to define which IP group is going to connect to the database. It is also important
    in terms of security. You can limit the IP range with this option.
  prefs: []
  type: TYPE_NORMAL
- en: '**Public access** allows you to enable access over the internet. For this application,
    we will use public access. However, you need to be careful when you set production
    databases as public.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final option for **Connectivity** is to select a group in **VPC security
    group (firewall)**. In this case, you can define the same security group that
    connects to RDS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.08_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.8 – Instance configuration (part 2)
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down and fill in the database port information.
  prefs: []
  type: TYPE_NORMAL
- en: '`3306` for MySQL, but you can also change it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.09_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.9 – Database port
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down and fill in the authentication details.
  prefs: []
  type: TYPE_NORMAL
- en: '**Database authentication** is used to define the approach for password management.
    You can connect with only a password, a combination of a password with IAM authentication,
    or a password with Kerberos authentication. Let’s keep it simple and just use
    **Password authentication**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.10_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.10 – Database authentication
  prefs: []
  type: TYPE_NORMAL
- en: Scroll down and fill in the details regarding database creation.
  prefs: []
  type: TYPE_NORMAL
- en: 'As a final step, you can keep other values as is. Click **Create database**
    and proceed with the database creation:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.11_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.11 – Database creation
  prefs: []
  type: TYPE_NORMAL
- en: 'This forwards you to the **Databases** list, in which you can see the database
    is being created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.12_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.12 – Databases list with a Creating status
  prefs: []
  type: TYPE_NORMAL
- en: 'After some time, you can see the database is ready to use:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.13_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.13 – Databases list with an Available status
  prefs: []
  type: TYPE_NORMAL
- en: We will connect from our computer. To connect to the database, we need to enable
    the connection from outside of AWS.
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Connectivity & security** tab. You will see **VPC security groups**;
    click the link:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.14_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.14 – Security groups
  prefs: []
  type: TYPE_NORMAL
- en: 'In the new panel, click **Edit inbound rules**. This will allow us to define
    the inbound connections:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.15_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.15 – Inbound rules
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the rule for the MySQL/Aurora type and click **Save**, which isn’t depicted
    in the following figure but is situated at the bottom of the page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.16_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.16 – Adding the rule
  prefs: []
  type: TYPE_NORMAL
- en: These steps allow us to accept the connection from outside of AWS. Hence, we
    will connect to AWS via a local computer.
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! You have created the database on the cloud. As you can see in the
    steps, creating a database is easy and efficient on the cloud. Let’s connect to
    the database in the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to the RDS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to connect to the RDS from one of the database
    viewers. For that purpose, you can install a free database viewer; I will use
    a MySQL viewer. To install the MySQL viewer, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the following link: [https://www.mysql.com/products/Workbench/](https://www.mysql.com/products/workbench/).'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click **Download Now** on the main page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.17_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.17 – MySQL Workbench
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Download** on the next page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.18_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.18 – MySQL Workbench download
  prefs: []
  type: TYPE_NORMAL
- en: Double-click and install the downloaded package, and the installation will be
    done.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the installation has been completed, click the **+** symbol to connect
    to the new database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.19_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.19 – New connection
  prefs: []
  type: TYPE_NORMAL
- en: 'Open AWS and copy the connection details:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.20_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.20 – Endpoint name
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill out the endpoint and password details in MySQL Workbench and click **Test
    Connection**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.21_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.21 – Test Connection
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking **Test Connection**, you will be able to see the connection:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.22_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.22 – Connection is successful
  prefs: []
  type: TYPE_NORMAL
- en: Good work! We have successfully connected to the RDS database from MySQL Workbench.
    Let’s create a table and insert some records in the next topic.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a table in the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We have created a database in the cloud and have connected via MySQL Workbench.
    As a next step, we are going to create a table via MySQL Workbench:'
  prefs: []
  type: TYPE_NORMAL
- en: Connect to the database via MySQL Workbench.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Create a database with the following command and click the *lightning* symbol,
    as shown in the figure that follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/Figure_8.23_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.23 – Creating a database
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the `USE address` command in order to switch databases:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/Figure_8.24_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.24 – USE address
  prefs: []
  type: TYPE_NORMAL
- en: 'Create an address table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/Figure_8.25_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.25 – Creating a table
  prefs: []
  type: TYPE_NORMAL
- en: We have created an address table, and for the next step, we are going to insert
    data into the table.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following script to insert data into the table:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/Figure_8.26_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.26 – Inserting script
  prefs: []
  type: TYPE_NORMAL
- en: 'The table has two rows, and we are going to read these values from the Lambda
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.27_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.27 – Select script
  prefs: []
  type: TYPE_NORMAL
- en: In this topic, we have created a simple table and inserted records. The insertion
    was made with MySQL Workbench, but you can also use other database tools. As a
    next step, we are going to read the records using Python.
  prefs: []
  type: TYPE_NORMAL
- en: Database operations with Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this section, we are going to read a table using Python. To execute a Python
    function, we will use PyCharm on a local computer. Carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Open PyCharm or an IDE, whichever you prefer.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'We are going to install MySQL Connector to PyCharm. MySQL Connector will be
    used for database operations from Python. In PyCharm, select **File** | **New
    Projects Setup** | **Preferences for** **New Projects…**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.28_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.28 – Preferences
  prefs: []
  type: TYPE_NORMAL
- en: 'In the panel, select **Python Interpreter**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.29_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.29 – Python Interpreter
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a new package, click the **+** symbol:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.30_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.30 – Adding a package
  prefs: []
  type: TYPE_NORMAL
- en: 'In the upcoming panel, type `mysql-conn` to install **mysql-connector**. You
    will be able to see **mysql-connector**. Click **Install Package** to install
    it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.31_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.31 – Installing mysql-connector
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you install it, you will be able to see **mysql-connector** within the
    installed packages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.32_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.32 – Package list
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy and paste the following code to read data from the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code block connects to the RDS database and reads from the address
    table by executing the `select * from address` query. For `rds_host`, `name`,
    and `password`, please fill out your database host and credentials:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_8.33_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.33 – Query from the database
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click **Run**, you can see the results from the database:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.34_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.34 – Results from the database
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! You are able to read data from the AWS database via Python. You can
    also extend your query by implementing `insert` and `update` queries. In this
    topic, we learned how to make a database operation via Python.
  prefs: []
  type: TYPE_NORMAL
- en: Secrets Manager
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Secrets Manager** is an AWS service that allows you to manage and retrieve
    database credentials, which can be helpful when using a database. Let’s learn
    how to use Secrets Manager:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open **Secrets Manager** via the console:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.35_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.35 – Opening Secrets Manager
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the **Store a new** **secret** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.36_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.36 – Storing a new secret
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the secret type that you want to store a secret for, and fill out the
    username and password. In this case, we will select the **database-1** instance.
    After filling out the details, click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.37_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.37 – Filling out the details
  prefs: []
  type: TYPE_NORMAL
- en: 'You need to give a name to the upcoming path in the **Secret** **name** textbox:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.38_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.38 – Naming the secret
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, you will see the options for using this secret with different
    programming languages. Click **Store** to finalize it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.39_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.39 – Store secret
  prefs: []
  type: TYPE_NORMAL
- en: 'As the final step, you will see the secret on the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_8.40_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 8.40 – List of secrets
  prefs: []
  type: TYPE_NORMAL
- en: Congrats! You have learned how to create and store secrets on the cloud in a
    secure way.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about AWS RDS, which is used to create a relational
    database on the cloud. You can create your database in an efficient way. The point
    to note is that you have the possibility to create different databases, including
    MySQL, Microsoft SQL, and PostgreSQL. In this chapter, we have created an RDS
    instance on the cloud and run a Python application to make a read operation. In
    the following chapter, we will take a look at creating an API in AWS.
  prefs: []
  type: TYPE_NORMAL
