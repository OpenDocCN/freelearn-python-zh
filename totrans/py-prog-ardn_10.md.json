["```py\nvoid publishData (){\n    Wire.requestFrom(partAddress,2);\n    byte MSB = Wire.read();\n    byte LSB = Wire.read();\n\n    int TemperatureData = ((MSB << 8) | LSB) >> 4; \n\n    float celsius = TemperatureData*0.0625;\n    temperatureC = dtostrf(celsius, 5, 2, message_buff2);\n    client.publish(\"MonitoringStation/temperature\", temperatureC);\n\n    float humidity = getHumidity(celsius);\n    humidityC = dtostrf(humidity, 5, 2, message_buff2);\n    client.publish(\"MonitoringStation/humidity\", humidityC);\n\n    int motion = digitalRead(MotionPin);\n    motionC = dtostrf(motion, 5, 2, message_buff2);\n    client.publish(\"MonitoringStation/motion\", motionC);\n\n    int light = analogRead(LightPin);\n    lightC = dtostrf(light, 5, 2, message_buff2);\n    client.publish(\"MonitoringStation/light\", lightC);\n}\n```", "```py\ntimer.setInterval(300000, publishData);\n```", "```py\nif (client.connect(\"MonitoringStation\")) {\n    client.subscribe(\"MonitoringStation/led\");\n    client.subscribe(\"MonitoringStation/buzzer\");\n  }\n```", "```py\nattachInterrupt(0, buttonPress, RISING);\n```", "```py\nvoid buttonPress(){\n    digitalWrite(BUZZER, LOW);\n    Serial.println(\"Set buzzer off\");\n}\n```", "```py\n$ mosquitto\n\n```", "```py\ncli.connect(\"10.0.0.18\", 1883, 15)\nFEED_ID = \"<feed-id>\"\nAPI_KEY = \"<api-key\"\n```", "```py\nclass controlCenterWindow(threading.Thread):\n    def __init__(self):\n        # Tkinter canvas\n        threading.Thread.__init__(self)\n        self.start()\n    def callback(self):\n        self.top.quit()\n    def run(self):\n        self.top = Tkinter.Tk()\n        self.top.protocol(\"WM_DELETE_WINDOW\", self.callback)\n        self.top.title(\"Control Center\")\n        self.statusValue = Tkinter.StringVar()\n        self.statusValue.set(\"Normal\")\n        self.tempValue = Tkinter.StringVar()\n        self.tempValue.set('-')\n        self.humdValue = Tkinter.StringVar()\n        self.humdValue.set('-')\n        self.lightValue = Tkinter.StringVar()\n        self.lightValue.set('-')\n        self.motionValue = Tkinter.StringVar()\n        self.motionValue.set('No')\n\n        # Begin code subsection \n        # Declares Tkinter components\n        # Included in the code sample of the chapter\n        # End code subsection\n\n        self.top.mainloop()\n```", "```py\ncli = mq.Client('ControlCenter')\ncli.on_message = onMessage\ncli.on_publish = onPublish\n\ncli.connect(\"10.0.0.18\", 1883, 15)\n\ncli.subscribe(\"MonitoringStation/temperature\", 0)\ncli.subscribe(\"MonitoringStation/humidity\", 0)\ncli.subscribe(\"MonitoringStation/motion\", 0)\ncli.subscribe(\"MonitoringStation/light\", 0)\ncli.subscribe(\"MonitoringStation/buzzer\", 0)\ncli.subscribe(\"MonitoringStation/led\", 0)\n```", "```py\ndef calculateStatus():\n    if (tempG > 45):\n        if (humdG > 80):\n            status = \"High Temperature, High Humidity\"\n        elif (humdG < 20):\n            status = \"High Temperature, Low Humidity\"\n        else:\n            status = \"High Temperature\"\n        setAlert(status)\n\n    elif (tempG < 5):\n        if (humdG > 80):\n            status = \"Low Temperature, High Humidity\"\n        elif (humdG < 20):\n            status = \"Low Temperature, Low Humidity\"\n        else:\n            status = \"Low Temperature\"\n        setAlert(status)\n    else:\n        if (humdG > 80):\n            status = \"High Humidity\"\n            setCaution(status)\n        elif (humdG < 20):\n            status = \"Low Humidity\"\n            setCaution(status)\n        else:\n            status = \"Normal\"\n            setNormal(status)\n```", "```py\ntry:\n  datastreamTemp = feed.datastreams.get(\"Temperature\")\nexcept HTTPError as e:\n  print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n  datastreamTemp = feed.datastreams.create(\"Temperature\", tags=\"C\")\n  print \"Creating new channel 'Temperature'\"\n```", "```py\nif msg.topic == \"MonitoringStation/temperature\":\n  tempG = float(msg.payload)\n  window.tempValue.set(tempG)\n  datastreamTemp.current_value = tempG\n  try:\n    datastreamTemp.update()\n  except HTTPError as e:\n    print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n```", "```py\ndef setAlert(status):\n    window.statusValue.set(status)\n    datastreamStatus.current_value = \"Alert\"\n    try:\n        datastreamStatus.update()\n    except HTTPError as e:\n        print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n    cli.publish(\"MonitoringStation/led\", 'red')\n    cli.publish(\"MonitoringStation/buzzer\", 'ON')\n```", "```py\ndef checkBuzzerFromXively():\n  try:\n    datastreamBuzzer = feed.datastreams.get(\"Buzzer\")\n    buzzerValue = datastreamBuzzer.current_value\n    buzzerValue = str(buzzerValue)\n    cli.publish(\"MonitoringStation/buzzer\", buzzerValue)\n  except HTTPError as e:\n    print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n    print \"Requested channel doesn't exist\"\n  threading.Timer(30, checkBuzzerFromXively).start()\n```", "```py\n    $ startx\n\n    ```", "```py\n    $ sudo apt-get update\n    $ sudo apt-get upgrade\n\n    ```", "```py\n    $ curl -O http://repo.mosquitto.org/debian/mosquitto-repo.gpg.key\n    $ sudo apt-key add mosquitto-repo.gpg.key\n    $ rm mosquitto-repo.gpg.key\n    $ cd /etc/apt/sources.list.d/\n    $ sudo curl -O http://repo.mosquitto.org/debian/mosquitto-repo.list\n    $ sudo apt-get update\n    $ sudo apt-get install mosquitto, mosquitto-clients\n\n    ```", "```py\n    $ sudo apt-get install python-setuptools\n\n    ```", "```py\n    $ sudo easy_install pip\n    $ sudo pip install xively-python web.py paho_mqtt\n\n    ```", "```py\n    $ sudo nano /etc/lightdm/lightdm.conf\n\n    ```", "```py\n    xserver-command-X –s 0 dpms\n    ```", "```py\n$ nohup python controlCenter.py &\n\n```", "```py\n    def fetchTempXively():\n      try:\n        datastreamTemp = feed.datastreams.get(\"Temperature\")\n      except HTTPError as e:\n        print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n        print \"Requested channel doesn't exist\"\n      return datastreamTemp.current_value\n    ```", "```py\n    inputData = web.input()\n    if inputData.btn == \"buzzerOff\":\n        setBuzzer(\"OFF\")\n    ```", "```py\n    def setBuzzer(statusTemp):\n      try:\n        datastream = feed.datastreams.get(\"Buzzer\")\n      except HTTPError as e:\n        print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n        datastream = feed.datastreams.create(\"Buzzer\", \n                                             tags=\"buzzer\")\n        print \"Creating new Channel 'Buzzer\"\n      datastream.current_value = statusTemp\n      try:\n        datastream.update()\n      except HTTPError as e:\n        print \"HTTPError({0}): {1}\".format(e.errno, e.strerror)\n    ```", "```py\n    $ python RemoteMonitoringApplication.py\n\n    ```", "```py\n        threading.Timer(120, checkBuzzerFromXively).start()\n        ```", "```py\n        timer.setInterval(600000, publishData);\n        ```", "```py\n        top.minsize(320,200)\n        ```", "```py\n        $ mosquitto_pub –t \"MonitoringStation/led\" –m \"red\"\n\n        ```", "```py\n    {\n        \"version\": \"1.0.0\",\n        \"datastreams\": [\n            {\n                \"id\": \"example\",\n                \"current_value\": \"333\"\n            },\n            {\n                \"id\": \"key\",\n                \"current_value\": \"value\"\n            },\n            {\n                \"id\": \"datastream\",\n                \"current_value\": \"1337\"\n            }\n        ]\n    }\n    ```"]