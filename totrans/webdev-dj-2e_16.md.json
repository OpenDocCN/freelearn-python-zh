["```py\n<script>\n    // comments in JavaScript can start with //\n    /* Block comments are also supported. This comment is multiple\n      lines and doesn't end until we use a star then slash:\n    */\n    let a = 5; // declare the variable a, and set its value to 5\n    console.log(a); // print a (5) to the browser console\n</script>\n```", "```py\n<script src=\"img/{% static 'file.js' }\"></script>\n```", "```py\nvar a = 1; // variable a has the numeric value 1\nlet b = 'a'; // variable b has the string value 'a'\nconst pi = 3.14; // assigned as a constant and can't be redefined\n```", "```py\nlet total = 0;\nfor (let i = 0; i< 10; i++){  // variable i is scoped to the loop\n    let toAdd = i * 10;  // variable toAdd is also scoped\n    total += toAdd;  // we can access total since it's in the outer scope\n}\nconsole.log(total);  // prints 450\nconsole.log(toAdd);  /* throws an exception as the variable is not   declared in the outer scope */\nconsole.log(i);  /* this code is not executed since an exception was   thrown the line before, but it would also generate the same     exception */\n```", "```py\nconst pi = 3.1416;\npi = 3.1;  /* raises exception since const values can't be   reassigned */\n```", "```py\nconst myThings = [1, 'foo', 4.5];\n```", "```py\nmyThings = [1, 'foo', 4.5, 'another value'];\n```", "```py\nmyThings.push('another value');\n```", "```py\nconst o = {foo: 'bar', baz: 4};\n```", "```py\no.foo; // 'bar'\no['baz']; // 4\n```", "```py\no.anotherKey = 'another value'  // this is allowed\n```", "```py\nfunction myFunc(a, b, c) {\n  if (a == b)\n    return c;\n  else if (a > b)\n    return 0;\n  return 1;\n}\n```", "```py\nconst myFunc = function(a, b, c) {\n    // function body is implemented the same as above\n}\n```", "```py\nconst myFunc = (a, b, c) => {\n    // function body as above\n}\n```", "```py\nconst o = {\nmyFunc: (a, b, c) => {\n    // function body\n    }\n}\n```", "```py\no.myFunc(3, 4, 5);\n```", "```py\nclass Adder {\n    // A class to add a certain value to any number\n    // this is like Python's __init__ method\n    constructor (toAdd) {\n        //\"this\" is like \"self\" in Python\n        //it's implicit and not manually passed into every method\n        this.toAdd = toAdd;\n    }\n    add (n) {\n        // add our instance's value to the passed in number\n        return this.toAdd + n;\n    }\n}\n```", "```py\nconst a = new Adder(5);\nconsole.log(a.add(3)); // prints \"8\"\n```", "```py\nconst o1 = {\n    outer: function() {\n        console.log(this);  // \"this\" refers to o1\n        const inner = function() {\n            console.log(this);  // \"this\" refers to the \"window\"               object\n        }\n        inner();\n    }\n}\n```", "```py\nconst o2 = {\n    outer: function() {\n        console.log(this);  // refers to o2\n        const inner = () => {\n            console.log(this);  // also refers to o2\n        }\n        inner();\n    }\n}\n```", "```py\n<script crossorigin src=\"img/react.development.js\"></script>\n<script crossorigin src=\"img/react-dom.development.js\"></script>\n```", "```py\nfunction HelloWorld(props) {\nreturn React.createElement('h1', null, 'Hello, ' +   props.name + '!');\n}\n```", "```py\nclass HelloWorld extends React.Component {\nrender() {\nreturn React.createElement('h1', null, 'Hello, ' +   this.props.name + '!');\n  }\n}\n```", "```py\n<div id=\"react_container\"></div>\n```", "```py\nconst container = document.getElementById('react_container');\nconst componentElement = React.createElement(HelloWorld, {name:   'Ben'});\nReactDOM.render(componentElement, container);\n```", "```py\n<h1>Hello, Ben!</h1>\n```", "```py\nconst e = React.createElement;\nclass ClickCounter extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { clickCount: 0 };\n  }\n  render() {\n    return e(\n      'button',  // the element name\n      {onClick: () => this.setState({ \n       clickCount: this.state.clickCount + 1 }) },//element props\n       this.state.clickCount  // element content\n    );\n  }\n}\n```", "```py\n    <ClickCounter foo=\"bar\" rex=\"baz\"/>\n    ```", "```py\n<button onClick=\"this.setState(…)\">\n  0\n</button>\n```", "```py\nconst onClick = () => {\nthis.setState({clickCount: this.state.clickCount + 1})\n}\n```", "```py\n{ onClick: () => this.setState({clickCount:   this.state.clickCount + 1}) }\n```", "```py\nReactDOM.render(e(ClickCounter), document.getElementById   ('react_container'));\n```", "```py\nrender() {\n    return '<button>' + this.state.clickCount + '</button>'\n}\n```", "```py\n    const e = React.createElement;\n    class ClickCounter extends React.Component {\n      constructor(props) {\n        super(props);\n        this.state = { clickCount: 0 };\n      }\n      render() {\n        return e(\n          'button',\n          { onClick: () => this.setState({ \n               clickCount: this.state.clickCount + 1 \n               }) \n    },\n          this.state.clickCount\n        );\n      }\n    }\n    ReactDOM.render(e(ClickCounter), document.getElementById   ('react_container'))\n    ```", "```py\n    <script crossorigin src=\"img/react.development.js\"></script>\n    <script crossorigin src=\"img/react-dom.development.js\"></script>\n    ```", "```py\n    {% load static %}\n    ```", "```py\n    <script src=\"img/{% static 'react-example.js' %}\"></script>\n    ```", "```py\n    <div id=\"react_container\"></div>\n    ```", "```py\n    def react_example(request):\n        return render(request, \"react-example.html\")\n    ```", "```py\n    path('react-example/', reviews.views.react_example)\n    ```", "```py\nreturn React.createElement('button', { onClick: … },   'Button Text')\n```", "```py\nreturn <button onClick={…}>Button Text</button>;\n```", "```py\nreturn '<button onClick={…}>Button Text</button>';\n```", "```py\n<script crossorigin src=\"img/  babel.min.js\"></script>\n```", "```py\n<script src=\"img/file.js\" type=\"text/babel\"></script>\n```", "```py\nrender() {\n    return <button onClick={() =>this.setState({ \n            clickCount: this.state.clickCount + 1 \n          })\n    }>\n    {this.state.clickCount}\n</button>;\n  }\n```", "```py\nonClick=\"() =>this.setState…\"\n```", "```py\n{this.state.clickCount + 1}\n```", "```py\n    render() {\n    return <button onClick={() => this.setState({ \n           clickCount: this.state.clickCount + 1 \n           })\n        }>\n        {this.state.clickCount}\n    </button>;  }\n    ```", "```py\n    ReactDOM.render(<ClickCounter/>, document.getElementById   ('react_container'));\n    ```", "```py\n    const e = React.createElement;\n    ```", "```py\n    <script crossorigin src=\"img/babel.min.js\"></script>\n    ```", "```py\n    <script src=\"img/{% static 'react-example.js' %}\" type=\"text/babel\"></script>\n    ```", "```py\nlet name = 'Ben'\nlet target = 5;\nReactDOM.render(<ClickCounter name={name} target={target}/>,   document.getElementById('react_container'));\n```", "```py\nReactDOM.render(<ClickCounter name=\"Ben\" target={5}/>,   document.getElementById('react_container'));\n```", "```py\n    return render(request, \"react-example.html\", {\"name\": \"Ben\", \\\n                                                  \"target\": 5})\n    ```", "```py\n    constructor(props) {\n        super(props);\n        this.state = { clickCount: 0, name: props.name, target:       props.target\n        };\n    }\n    ```", "```py\n    if (this.state.clickCount === this.state.target) {\n        return <span>Well done, {this.state.name}!</span>;\n    }\n    ```", "```py\n    ReactDOM.render(<ClickCounter/>, document.getElementById   ('react_container'));\n    ```", "```py\n    <script type=\"text/babel\">\n    let name = \"{{ name|escapejs }}\";\n    let target = {{ target }};\n    </script>\n    ```", "```py\n    <script type=\"text/babel\">\n        let name = \"{{ name|escapejs }}\";\n        let target = {{ target }};\n        ReactDOM.render(<ClickCounter name={ name }       target={ target }/>, document.getElementById         ('react_container'));\n    </script>\n    ```", "```py\nconst result = getResult();\nconsole.log(result);  // incorrect, this is a Promise\n```", "```py\nconst promise = getResult();\npromise.then((result) => {\n    console.log(result);  /* this is called when the Promise       resolves*/\n});\n```", "```py\ngetResult().then( \n(result) => {\n        // success function\n        console.log(result);  \n// this is called 2nd, but only on success\n}, \n    () => {\n        // failure function\n        console.log(\"getResult failed\");\n        // this is called 2nd, but only on failure\n})\n// this will be called 1st, before either of the callbacks\nconsole.log(\"Waiting for callback\");\n```", "```py\nconst promise = fetch(\"http://www.google.com\", {…settings});\n```", "```py\nfetch('/api/books/', {\n    method: 'GET',\n    headers: {\n        Accept: 'application/json'\n    }\n}).then((resp) => {\n    console.log(resp)\n})\n```", "```py\nfetch('/api/books/', {\n    method: 'GET',\n    headers: {\n        Accept: 'application/json'\n    }\n}).then((resp) => {\n    return resp.json(); // doesn't return JSON, returns a Promise\n}).then((data) => {\n    console.log(data);\n});\n```", "```py\nconst numbers = [1, 2, 3];\nconst doubled = numbers.map((n) => {\n    return n * 2;\n});\n```", "```py\nrender() {\n    const numbers = [1, 2, 3];\n    const listItems = numbers.map((n) => {\n      return <li key={n}>{n}</li>;\n      });\n    return <ul>{listItems}</ul>\n}\n```", "```py\n<ul>\n<li>1</li>\n<li>2</li>\n<li>3</li>\n</ul>\n```", "```py\n    this.state = { books: [], url: props.url, fetchInProgress:   false };\n    ```", "```py\n    constructor(props) {\n      super(props);\n      this.state = { books: [], url: props.url, fetchInProgress:   false };\n    }\n    ```", "```py\n    doFetch() {\n      if (this.state.fetchInProgress)\n          return;\n    this.setState({ fetchInProgress: true })\n      fetch(this.state.url, {\n          method: 'GET',\n          headers: {\n              Accept: 'application/json'\n          }\n      }\n      ).then((response) => {\n          return response.json();\n      }).then((data) => {\n    this.setState({ fetchInProgress: false, books: data })\n      })\n    }\n    ```", "```py\n    render() {\n      const bookListItems = this.state.books.map((book) => {\n          return <li key={ book.pk }>{ book.title }</li>;\n      })\n      const buttonText = this.state.fetchInProgress  ? \n      'Fetch in Progress' : 'Fetch';\n      return <div>\n    <ul>{ bookListItems }</ul>\n    <button onClick={ () =>this.doFetch() } \n            disabled={ this.state.fetchInProgress }>\n              {buttonText}\n    </button>\n    </div>;\n    }\n    ```", "```py\n    ReactDOM.render(<BookDisplay url=\"{% url 'api:book-list' %}\" />,  document.getElementById('react_container'));\n    ```", "```py\n<h1>Hello, {{ name }}!</h1>\n```", "```py\n{% verbatim %}\n<h1>Hello, {{ name }}!</h1>\n{% endverbatim %}\n```", "```py\n    <div className=\"col mb-4\">\n    <div className=\"card\">\n    <div className=\"card-body\">\n    <h5 className=\"card-title\">{ BOOK_TITLE }\n    <strong>({ REVIEW_RATING })</strong>\n    </h5>\n    <h6 className=\"card-subtitle mb-2 text-muted\">CREATOR_EMAIL</h6>\n    <p className=\"card-text\">REVIEW_CONTENT</p>\n    </div>\n    <div className=\"card-footer\">\n    <a href={'/books/' + BOOK_ID` + '/' } className=\"card-link\">  View Book</a>\n    </div>\n    </div>\n    </div>\n    ```", "```py\n    <div>\n    <div className=\"row row-cols-1 row-cols-sm-2 row-cols-md-3\">\n          { reviewItems }\n    </div>\n    <div>\n          {previousButton}\n          {nextButton}\n    </div>\n    </div>\n    ```"]