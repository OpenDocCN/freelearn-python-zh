["```py\n# todo_app/infrastructure/configuration/container.py\n@dataclass\nclass Application:\n    \"\"\"Container which wires together all components.\"\"\"\n    task_repository: TaskRepository\n    project_repository: ProjectRepository\n    notification_service: NotificationPort\n    task_presenter: TaskPresenter\n    project_presenter: ProjectPresenter \n```", "```py\n# todo_app/infrastructure/configuration/container.py\ndef create_application(\n    notification_service: NotificationPort,\n    task_presenter: TaskPresenter,\n    project_presenter: ProjectPresenter,\n) -> \"Application\":\n    \"\"\"Factory function for the Application container.\"\"\"\n    task_repository, project_repository = create_repositories()\n\n    return Application(\n        task_repository=task_repository,\n        project_repository=project_repository,\n        notification_service=notification_service,\n        task_presenter=task_presenter,\n        project_presenter=project_presenter,\n    ) \n```", "```py\n# cli_main.py\ndef main() -> int:\n    \"\"\"Main entry point for the CLI application.\"\"\"\n    app = create_application(\n        notification_service=NotificationRecorder(),\n        task_presenter=CliTaskPresenter(),\n        project_presenter=CliProjectPresenter(),\n    )\n    cli = ClickCli(app)\n    return cli.run() \n```", "```py\n# Anti-pattern: Interface-specific logic in controller\ndef handle_create(self, request_data: dict) -> dict:\n    \"\"\"DON'T: Mixing CLI formatting in controller.\"\"\"\n    try:\n        result = self.create_use_case.execute(request_data)\n        if result.is_success:\n            # Wrong: CLI-specific formatting doesn't belong here\n            return {\n                \"message\": click.style(\n                    f\"Created task: {result.value.title}\",\n                    fg=\"green\"\n                )\n            }\n    except ValueError as e:\n        # Wrong: CLI-specific error formatting\n        return {\"error\": click.style(str(e), fg=\"red\")} \n```", "```py\n# Correct: Interface-agnostic controller\ndef handle_create(self, title: str, description: str) -> OperationResult:\n    \"\"\"DO: Keep controllers interface-agnostic.\"\"\"\n    try:\n        request = CreateTaskRequest(title=title, description=description)\n        result = self.create_use_case.execute(request)\n        if result.is_success:\n            view_model = self.presenter.present_task(result.value)\n            return OperationResult.succeed(view_model)\n        error_vm = self.presenter.present_error(\n            result.error.message, str(result.error.code.name)\n        )\n        return OperationResult.fail(error_vm.message, error_vm.code)\n    except ValueError as e:\n        error_vm = self.presenter.present_error(\n            str(e), \"VALIDATION_ERROR\")\n        return OperationResult.fail(error_vm.message, error_vm.code) \n```", "```py\n# CLI Presenter from [*Chapter 7*](Chapter_07.xhtml#_idTextAnchor168)\ndef present_task(self, task_response: TaskResponse) -> TaskViewModel:\n    \"\"\"Format task for CLI display.\"\"\"\n    return TaskViewModel(\n        id=task_response.id,\n        title=task_response.title,\n        # CLI-specific bracketed format:\n        status_display=f\"[{task_response.status.value}]\", \n        # CLI-specific coloring:\n        priority_display=self._format_priority(task_response.priority)\n    ) \n```", "```py\nclass WebTaskPresenter(TaskPresenter):\n    def present_task(self, task_response: TaskResponse) -> TaskViewModel:\n        \"\"\"Format task for web display.\"\"\"\n        return TaskViewModel(\n            id=task_response.id,\n            title=task_response.title,\n            description=task_response.description,\n            status_display=task_response.status.value,\n            priority_display=task_response.priority.name,\n            due_date_display=self._format_due_date(\n                task_response.due_date),\n            project_display=task_response.project_id,\n            completion_info=self._format_completion_info(\n                task_response.completion_date,\n                task_response.completion_notes\n            ),\n        ) \n```", "```py\ndef _format_due_date(self, due_date: Optional[datetime]) -> str:\n    \"\"\"Format due date for web display.\"\"\"\n    if not due_date:\n        return \"\"\n    is_overdue = due_date < datetime.now(timezone.utc)\n    date_str = due_date.strftime(\"%Y-%m-%d\")\n    return f\"Overdue: {date_str}\" if is_overdue else date_str \n```", "```py\n<span class=\"badge\n    {% if 'overdue' in task.due_date_display %}bg-danger\n    {%else %}bg-info\n    {% endif %}\">\n    {{ task.due_date_display }}\n</span> \n```", "```py\ndef test_web_presenter_formats_overdue_date():\n    \"\"\"Test that presenter properly formats overdue dates.\"\"\"\n    # Arrange\n    past_date = datetime.now(timezone.utc) - timedelta(days=1)\n    task_response = TaskResponse(\n        id=\"123\",\n        title=\"Test Task\",\n        description=\"Test Description\",\n        status=TaskStatus.TODO,\n        priority=Priority.MEDIUM,\n        project_id=\"456\",\n        due_date=past_date\n    )\n    presenter = WebTaskPresenter()\n    # Act\n    view_model = presenter.present_task(task_response)\n    # Assert\n    assert \"Overdue\" in view_model.due_date_display\n    assert past_date.strftime(\"%Y-%m-%d\") in view_model.due_date_display \n```", "```py\ndef test_web_presenter_formats_future_date():\n    \"\"\"Test that presenter properly formats future dates.\"\"\"\n    # Arrange\n    future_date = datetime.now(timezone.utc) + timedelta(days=1)\n    task_response = TaskResponse(\n        id=\"123\",\n        title=\"Test Task\",\n        description=\"Test Description\",\n        status=TaskStatus.TODO,\n        priority=Priority.MEDIUM,\n        project_id=\"456\",\n        due_date=future_date\n    )\n    presenter = WebTaskPresenter()\n    # Act\n    view_model = presenter.present_task(task_response)\n    # Assert\n    assert \"Overdue\" not in view_model.due_date_display\n    assert future_date.strftime(\"%Y-%m-%d\") in view_model.due_date_display \n```", "```py\n<!-- Common pattern in many web frameworks -->\n<span class=\"badge {% if task.due_date < now() %}bg-danger{% else %}bg-info{% endif %}\">\n    {{ task.due_date.strftime(\"%Y-%m-%d\") }}\n    {% if task.due_date < now() %}(Overdue){% endif %}\n</span> \n```", "```py\n# Anti-pattern: Domain entity accessing web state\nclass Task:\n    def complete(self, web_app_contatiner):\n        # Wrong: Task shouldn't know about web sessions\n        self.completed_by = web_app_contatiner.user.id\n        self.completed_at = datetime.now() \n```", "```py\n# todo_app/infrastructure/web/routes.py\n@bp.route(\"/\")\ndef index():\n    \"\"\"List all projects with their tasks.\"\"\"\n    app = current_app.config[\"APP_CONTAINER\"]\n    show_completed = (\n        request.args.get(\"show_completed\", \"false\")\n        .lower() == \"true\"\n    )\n    result = app.project_controller.handle_list()\n    if not result.is_success:\n        error = project_presenter.present_error(result.error.message)\n        flash(error.message, \"error\")\n        return redirect(url_for(\"todo.index\"))\n    return render_template(\n        \"index.html\",\n        projects=result.success,\n        show_completed=show_completed\n    ) \n```", "```py\n# todo_app/infrastructure/web/routes.py\n@bp.route(\"/projects/new\", methods=[\"GET\", \"POST\"])\ndef new_project():\n    \"\"\"Create a new project.\"\"\"\n    if request.method == \"POST\":\n        name = request.form[\"name\"]\n        app = current_app.config[\"APP_CONTAINER\"]\n        result = app.project_controller.handle_create(name)\n        if not result.is_success:\n            error = project_presenter.present_error(result.error.message)\n            flash(error.message, \"error\")\n            return redirect(url_for(\"todo.index\"))\n        project = result.success\n        flash(f'Project \"{project.name}\" created successfully', \"success\")\n        return redirect(url_for(\"todo.index\"))\n    return render_template(\"project_form.html\") \n```", "```py\n# todo_app/infrastructure/web/app.py\ndef create_web_app(app_container: Application) -> Flask:\n    \"\"\"Create and configure Flask application.\"\"\"\n    flask_app = Flask(__name__)\n    # Change this in production:\n    flask_app.config[\"SECRET_KEY\"] = \"dev\" \n    # Store container in config:\n    flask_app.config[\"APP_CONTAINER\"] = app_container \n    # Register blueprints\n    from . import routes\n    flask_app.register_blueprint(routes.bp)\n    return flask_app \n```", "```py\n# todo_app/infrastructure/cli/click_cli_app.py\ndef _create_task(self):\n    \"\"\"CLI task creation.\"\"\"\n    title = click.prompt(\"Task title\", type=str)\n    description = click.prompt(\"Description\", type=str)\n    result = self.app.task_controller.handle_create(\n        title=title,\n        description=description\n    ) \n```", "```py\n@bp.route(\"/projects/<project_id>/tasks/new\", methods=[\"GET\", \"POST\"])\ndef new_task(project_id):\n    \"\"\"Create a new task in a project.\"\"\"\n    if request.method == \"POST\":\n        app = current_app.config[\"APP_CONTAINER\"]\n        result = app.task_controller.handle_create(\n            project_id=project_id,\n            title=request.form[\"title\"],\n            description=request.form[\"description\"],\n            priority=request.form[\"priority\"],\n            due_date=(\n                request.form[\"due_date\"]\n                if request.form[\"due_date\"] else None\n            ),\n        )\n        if not result.is_success:\n            error = task_presenter.present_error(result.error.message)\n            flash(error.message, \"error\")\n            return redirect(url_for(\"todo.index\"))\n        task = result.success\n        flash(f'Task \"{task.title}\" created successfully', \"success\")\n        return redirect(url_for(\"todo.index\"))\n    return render_template(\"task_form.html\", project_id=project_id) \n```", "```py\n{% extends 'base.html' %}\n{% block content %}\n    {% for project in projects %}\n    <div class=\"card mb-4\">\n        <div class=\"card-header\">\n            <h2 class=\"card-title h5 mb-0\">{{ project.name }}</h2>\n        </div>\n        <!-- Template focuses purely on structure and display -->\n    </div>\n    {% endfor %}\n{% endblock %} \n```", "```py\ndef main():\n    \"\"\"Create and run the Flask web application.\"\"\"\n    app_container = create_application(\n        notification_service=create_notification_service(),\n        task_presenter=WebTaskPresenter(),\n        project_presenter=WebProjectPresenter(),\n    )\n    web_app = create_web_app(app_container)\n    web_app.run(debug=True)\nif __name__ == \"__main__\":\n    main() \n```", "```py\n# Repository Configuration\nexport TODO_REPOSITORY_TYPE=\"memory\"  # or \"file\"\nexport TODO_DATA_DIR=\"repo_data\"      # used with file repository\n# Optional: Email Notification Configuration\nexport TODO_SENDGRID_API_KEY=\"your_api_key\"\nexport TODO_NOTIFICATION_EMAIL=\"recipient@example.com\" \n```", "```py\n> python web_main.py\n * Serving Flask app 'todo_app.infrastructure.web.app'\n * Debug mode: on\n * Running on http://127.0.0.1:5000\nPress CTRL+C to quit\n * Restarting with stat\n * Debugger is active!\n * Debugger PIN: 954-447-204\n127.0.0.1 - - [05/Feb/2025 13:58:57] \"GET / HTTP/1.1\" 200 - \n```"]