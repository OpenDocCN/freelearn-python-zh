- en: <st c="0">11</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3">Deploying Flask Applications</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="32">When the development of a Flask application is over, you can always
    decide to deploy it somewhere outside Werkzeug’s HTTP server.</st> <st c="163">The
    final application needs a production server that is fast and reliable, with minimal
    or no potential security risks, configurable, and easy to manage.</st> <st c="317">Instead
    of utilizing the built-in Werkzeug server, the product needs a non-development
    server not for development, debugging, or testing but for running the software
    product.</st> <st c="492">Flask deployment requires a stable and independent Python
    server or a</st> <st c="562">hosting platform.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="579">This chapter will focus on different approaches, options, and procedures
    for deploying Flask applications to production servers suited for the product’s
    scope, environment,</st> <st c="753">and objectives.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="768">The following topics will be covered in</st> <st c="809">this chapter:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="822">Running the application on Gunicorn</st> <st c="859">and uWSGI</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="868">Running the application</st> <st c="893">on Uvicorn</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="903">Deploying the application to the Apache</st> <st c="944">HTTP Server</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="955">Deploying the application</st> <st c="982">to Docker</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="991">Deploying the application</st> <st c="1018">to Kubernetes</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1031">Creating an API gateway</st> <st c="1056">using NGINX</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1067">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1090">Our application will be using PostgreSQL to manage its data.</st>
    <st c="1152">The projects will also be applying the</st> `<st c="1191">Blueprint</st>`
    <st c="1200">approach of managing Flask components.</st> <st c="1240">The project
    prototype will focus on simple e-commerce, inventory, and stocking transactions
    for a small-scale grocery store, and it will be called an</st> *<st c="1390">Online
    Grocery</st>* <st c="1404">application.</st> <st c="1418">All these applications
    can be found</st> <st c="1454">at</st> [<st c="1457">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch11</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch11)<st
    c="1538">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1539">Getting ready for deployment</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1568">In this chapter, we’ll create an</st> *<st c="1602">Online Grocery</st>*
    <st c="1616">application that can be deployed to different platforms.</st> <st
    c="1674">The</st> <st c="1678">application is an API-based type with administration,
    login, inventory, stocking, order, and purchase modules designed for small business
    transactions of a small shopping or</st> <st c="1852">grocery store.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1866">The Peewee ORM builds the application’s model and repository layer.</st>
    <st c="1935">To utilize the standard</st> `<st c="1959">Peewee</st>` <st c="1965">module,
    install it and the</st> `<st c="1993">psycopg2</st>` <st c="2001">driver using
    the following</st> `<st c="2029">pip</st>` <st c="2032">command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="2069">The Peewee ORM provides the standard</st> *<st c="2107">INSERT</st>*<st
    c="2113">,</st> *<st c="2115">UPDATE</st>*<st c="2121">,</st> *<st c="2123">DELETE</st>*<st
    c="2129">, and</st> *<st c="2135">SELECT</st>* <st c="2141">transactions, thus
    including the</st> `<st c="2175">psycopg2</st>` <st c="2183">driver as a dependency
    library.</st> <st c="2216">Let’s begin structuring the model layer of the</st>
    <st c="2263">Peewee ORM.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2274">Classes and methods for the standard Peewee ORM</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2322">Our</st> *<st c="2327">Online Grocery</st>* <st c="2341">application</st>
    <st c="2354">is deployed to a</st> **<st c="2371">Gunicorn</st>** <st c="2379">server</st>
    <st c="2387">and uses the standard</st> <st c="2409">Peewee helper classes and
    methods to establish the model layer and the repository classes.</st> <st c="2500">Here
    is a typical Peewee configuration for the PostgreSQL</st> <st c="2558">database
    connection:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="3312">(app/models/db.py)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3331">from app.models.config import database</st> from peewee import
    Model, CharField, IntegerField, BigIntegerField, ForeignKeyField, DateField <st
    c="3466">class Product(Model):</st> id = BigIntegerField(<st c="3509">primary_key=True</st>,
    null=False, <st c="3540">sequence="product_id_seq"</st>)
  prefs: []
  type: TYPE_NORMAL
- en: code = CharField(max_length="20", unique="True", null=False)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'name = CharField(max_length="100", null=False) <st c="3676">btype = ForeignKeyField(model=Brand,
    null=False,</st> <st c="3724">to_field="code", backref="brand")</st><st c="3758">ctype
    = ForeignKeyField(model=Category, null=False,</st> <st c="3810">to_field="code",
    backref="category")</st> … … … … … … <st c="4014">Product</st> model class represents
    the record details of a product sold by the grocery store, while the following
    <st c="4124">Stock</st> model creates stock information about a product:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4667">All model</st> <st c="4678">classes must</st> <st c="4691">subclass
    Peewee’s</st> `<st c="4709">Model</st>` <st c="4714">class to become the logical
    representations of the database tables.</st> <st c="4783">The Peewee model classes,
    like the given</st> `<st c="4824">Product</st>` <st c="4831">and</st> `<st c="4836">Stock</st>`<st
    c="4841">, have the</st> `<st c="4852">Meta</st>` <st c="4856">class, which holds
    the</st> `<st c="4880">database</st>` <st c="4888">and</st> `<st c="4893">db_table</st>`
    <st c="4901">attributes responsible for mapping them to the physical tables of
    our database.</st> <st c="4982">Peewee’s column helper classes build the column
    attributes of the model classes.</st> <st c="5063">Now, the</st> `<st c="5072">main.py</st>`
    <st c="5079">module must enable the</st> `<st c="5103">before_request()</st>`
    <st c="5119">glocal event of Flask to handle the database connection.</st> <st
    c="5177">The following snippet shows the implementation of the</st> `<st c="5231">before_request()</st>`
    <st c="5247">global event:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: from app.models.db import Product
  prefs: []
  type: TYPE_NORMAL
- en: from app.models.db import database
  prefs: []
  type: TYPE_NORMAL
- en: from typing import Dict, Any
  prefs: []
  type: TYPE_NORMAL
- en: 'class ProductRepository:'
  prefs: []
  type: TYPE_NORMAL
- en: 'def insert_product(self, details:Dict[str, Any]) -> bool:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'try: <st c="6015">with database.atomic() as tx:</st><st c="6044">Product.create(**details)</st><st
    c="6070">tx.commit()</st> return True'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except Exception as e:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print(e)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return False
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'def update_product(self, details:Dict[str,Any]) -> bool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'try: <st c="6954">with database.atomic() as tx:</st><st c="6983">prod = Product.get(</st>
    <st c="7003">Product.code==details["code"])</st> prod.rate = details["name"]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: prod.code = details["btype"]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: prod.rate = details["ctype"]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: prod.code = details["unit_type"]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: prod.rate = details["sell_price"]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: prod.code = details["purchase_price"]
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: prod.rate = details["discount"] <st c="7258">prod.save()</st><st c="7269">tx.commit()</st>
    return True
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except Exception as e:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: print(e)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return False
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'def delete_product_code(self, code:str) -> bool:'
  prefs: []
  type: TYPE_NORMAL
- en: 'try: <st c="8086">with database.atomic() as tx:</st><st c="8115">prod = Product.get(Product.code==code)</st><st
    c="8154">prod.delete_instance()</st><st c="8177">tx.commit()</st> return True'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'except Exception as e:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: print(e)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return False
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'def select_product_code(self, code:str): <st c="8764">prod = Product.select(Product.code==code)</st>
    return <st c="8813">prod.to_json()</st> def select_product_id(self, id:int): <st
    c="8865">prod = Product.select(Product.id==id)</st> return <st c="8910">prod.to_json()</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'def select_all_product(self): <st c="9062">prods = Product.select()</st><st
    c="9086">records = [log.to_json() for log in prods]</st> return records'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: pip install aiopg peewee-async
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="10455">from peewee_async import PooledPostgresqlDatabase</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10505">database = PooledPostgresqlDatabase(</st> 'ogs', user='postgres',
    password='admin2255',
  prefs: []
  type: TYPE_NORMAL
- en: host='localhost', port='5432', <st c="10620">max_connections = 3</st>,
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: connect_timeout = 3, <st c="10731">3</st> with <st c="10738">autocommit</st>
    set to <st c="10756">False</st>.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="10762">The Async Peewee ORM handles database connectivity differently:
    it does not use the</st> `<st c="10847">before_request()</st>` <st c="10863">and</st>
    `<st c="10868">teardown_request()</st>` <st c="10886">events but rather uses configuration
    with the</st> `<st c="10933">create_app()</st>` <st c="10945">factory method.</st>
    <st c="10962">The following snippet shows how to establish a PostgreSQL database
    connection using the</st> `<st c="11050">peewee-async</st>` <st c="11062">module:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: <st c="11325">Here,</st> `<st c="11332">Manager</st>` <st c="11339">establishes
    an</st> `<st c="11355">asyncio</st>` <st c="11362">database connection pattern
    without using</st> `<st c="11405">before_request()</st>` <st c="11421">to connect
    to and</st> `<st c="11440">teardown_request()</st>` <st c="11458">to disconnect
    from the</st> <st c="11482">database.</st> <st c="11492">However, it can emit
    the</st> `<st c="11517">connect()</st>` <st c="11526">and</st> `<st c="11531">close()</st>`
    <st c="11538">methods to manage the database connection</st> <st c="11581">during
    query execution explicitly.</st> <st c="11616">Instantiating the</st> `<st c="11634">Manager</st>`
    <st c="11641">class requires the database connection object and an optional</st>
    `<st c="11704">asyncio</st>` <st c="11711">event loop.</st> <st c="11724">Through
    the</st> `<st c="11736">Manager</st>` <st c="11743">object, you can invoke its</st>
    `<st c="11771">set_allow_sync()</st>` <st c="11787">method and set it to</st>
    `<st c="11809">False</st>` <st c="11814">to restrict the usage of non-async utility</st>
    <st c="11858">Peewee methods.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="11873">The</st> `<st c="11878">conn_mgr</st>` <st c="11886">and</st>
    `<st c="11891">database</st>` <st c="11899">objects are equally essential for
    building the repository layer, as depicted in the following</st> `<st c="11994">DiscountRepository</st>`
    <st c="12012">implementation:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: <st c="12408">Although the implementation of the model layer is similar to the
    standard Peewee, its repository</st> <st c="12506">layer is not the same</st>
    <st c="12528">because of the</st> `<st c="12543">asyncio</st>` <st c="12550">platform
    used by the ORM to perform the CRUD transactions.</st> <st c="12610">For instance,
    the following</st> `<st c="12638">insert_discount()</st>` <st c="12655">function
    emits</st> `<st c="12671">atomic_async()</st>` <st c="12685">from the</st> `<st
    c="12695">conn_mgr</st>` <st c="12703">instance to generate an async transaction
    layer, which will commit the inserted</st> `<st c="12784">Discount</st>` <st c="12792">record
    performed by the</st> `<st c="12817">create()</st>` <st c="12825">method of</st>
    `<st c="12836">conn_mgr</st>`<st c="12844">, not by</st> `<st c="12853">Discount</st>`<st
    c="12861">. The use of the</st> `<st c="12878">async</st>`<st c="12883">/</st>`<st
    c="12885">await</st>` <st c="12890">keywords is present in</st> <st c="12914">the
    implementations.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="12934">On the</st> `<st c="12942">UPDATE</st>` <st c="12948">operation,
    the</st> `<st c="12964">get()</st>` <st c="12969">method of</st> `<st c="12980">conn_mgr</st>`
    <st c="12988">retrieves the record object that needs updating, and its</st> `<st
    c="13046">update()</st>` <st c="13054">method flushes the newly updated fields
    to the table.</st> <st c="13109">Again, the async</st> `<st c="13126">Manager</st>`
    <st c="13133">methods operate the transaction, not the model class.</st> <st c="13188">The
    following</st> `<st c="13202">update_discount()</st>` <st c="13219">function showcases
    Peewee’s async approach to updating</st> <st c="13275">table records:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: <st c="13594">The local</st> <st c="13605">parameters of the</st> `<st c="13623">update()</st>`
    <st c="13631">method of</st> `<st c="13642">conn_mgr</st>` <st c="13650">include
    the record object with the updated fields</st> <st c="13701">and the</st> `<st
    c="13709">only</st>` <st c="13713">parameter for controlling a tuple of field
    names that need updating in</st> <st c="13785">the table.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="13795">On the other hand, the</st> `<st c="13819">DELETE</st>` <st c="13825">operation
    uses the same async</st> `<st c="13856">get()</st>` <st c="13861">method of</st>
    `<st c="13872">conn_mgr</st>` <st c="13880">in</st> `<st c="13884">update_discount()</st>`
    <st c="13901">to retrieve the record object for deletion.</st> <st c="13946">As
    shown in the following</st> `<st c="13972">delete_discount_code()</st>` <st c="13994">function,
    the async</st> `<st c="14015">delete()</st>` <st c="14023">method of</st> `<st
    c="14034">conn_mgr</st>` <st c="14042">deletes the record from the table using
    the</st> <st c="14087">record object:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <st c="14338">When implementing async query transactions, the Async Peewee ORM
    uses the</st> `<st c="14413">Manager</st>` <st c="14420">class’s async</st> `<st
    c="14435">get()</st>` <st c="14440">method to retrieve a single record and the</st>
    `<st c="14484">execute()</st>` <st c="14493">method to</st> <st c="14504">wrap
    and run the</st> `<st c="14521">select()</st>` <st c="14529">statement for retrieving
    a single or all the records asynchronously.</st> <st c="14599">The</st> <st c="14603">following
    snippets show the query implementation</st> <st c="14652">for</st> `<st c="14656">DiscountRepository</st>`<st
    c="14674">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: <st c="15072">So, all these bundled methods in the</st> `<st c="15110">Manager</st>`
    <st c="15117">class’s instance provide the operations for implementing the CRUD
    transactions in the asynchronous</st> <st c="15217">transaction layer.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="15235">Peewee is a simple and flexible ORM for small to middle-scale
    Flask applications.</st> <st c="15318">Although SQLAlchemy offers more powerful
    utilities, it is not suited for a small application like our</st> *<st c="15420">Online
    Grocery</st>* <st c="15434">application, which has less scope</st> <st c="15469">and
    complexity.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="15484">Next, we’ll deploy our applications that utilize both the standard
    and asynchronous Peewee ORM for their</st> <st c="15590">repository layers.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="15608">Running the application on Gunicorn and uWSGI</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="15654">The main</st> <st c="15664">reason why Flask applications start
    by running the</st> `<st c="15715">flask run</st>` <st c="15724">command or by
    calling</st> `<st c="15747">app.run()</st>` <st c="15756">in</st> `<st c="15760">main.py</st>`
    <st c="15767">during</st> <st c="15775">development is because of the built-in
    WSGI server that the</st> `<st c="15835">werkzeug</st>` <st c="15843">module has.</st>
    <st c="15856">However, there are limitations that this server possesses, such
    as its inability to respond to more requests from clients without slowing down</st>
    <st c="15999">and its incapability to maximize</st> <st c="16032">the resources
    of the production server.</st> <st c="16072">Moreover, the built-in server has
    several vulnerabilities, which pose security risks.</st> <st c="16158">For</st>
    <st c="16162">standard Flask applications, it is best to use another WSGI server</st>
    <st c="16229">for production, such as</st> **<st c="16253">Gunicorn</st>** <st
    c="16261">or</st> **<st c="16265">uWSGI</st>**<st c="16270">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="16271">Let’s start by deploying our application to the</st> *<st c="16320">Gunicorn</st>*
    <st c="16328">server.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="16336">Using the Gunicorn server</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="16723">ch11-guni</st>` <st c="16732">application.</st> <st c="16746">But
    first, we must install the</st> `<st c="16777">gunicorn</st>` <st c="16785">module
    in the application’s virtual environment using the following</st> `<st c="16854">pip</st>`
    <st c="16857">command:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: <st c="16887">Then, run the</st> `<st c="16902">gunicorn</st>` <st c="16910">command
    with the module name and the</st> `<st c="16948">app</st>` <st c="16951">instance</st>
    <st c="16961">in</st> `<st c="16964">{module}</st>` **<st c="16972">:{flask_app}</st>**
    <st c="16985">format, the binding host address, and the port.</st> <st c="17034">The
    following is the complete command to run a standard Flask application on the Gunicorn
    server with a</st> <st c="17138">single worker:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: '*<st c="17192">Figure 11</st>**<st c="17202">.1</st>* <st c="17204">shows the
    server log after successfully running the given command with the default</st>
    <st c="17288">single worker:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Server log after starting the Gunicorn server](img/B19383_11_001.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="17670">Figure 11.1 – Server log after starting the Gunicorn server</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="17729">A</st> *<st c="17732">Gunicorn</st>* <st c="17740">worker is a
    Python process that manages one HTTP request-response transaction at a time.</st>
    <st c="17830">A default Gunicorn server has one worker process running in the
    background.</st> <st c="17906">Logically, the more workers that are spawned to
    manage the requests and responses, the better the application’s performance.</st>
    <st c="18031">However, for Gunicorn, the number of</st> <st c="18068">workers
    depends on the count of CPU processors on the server machine and is derived using
    the</st> `<st c="18162">(2*CPU)+1</st>` <st c="18171">formula.</st> <st c="18181">These
    child processes will manage HTTP requests simultaneously, utilizing the maximum
    level of resources that the hardware can provide.</st> <st c="18317">One of the
    advantages of Gunicorn is its capability to leverage the resources efficiently
    to manage the</st> <st c="18421">runtime performance:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The CPU utilization dashboard of a Windows system](img/B19383_11_002.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="18863">Figure 11.2 – The CPU utilization dashboard of a Windows system</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '*<st c="18926">Figure 11</st>**<st c="18936">.2</st>* <st c="18938">shows that
    our production server machine has</st> `<st c="18984">4</st>` <st c="18985">CPU
    cores, which means that the acceptable number of workers that our Gunicorn server
    can utilize is</st> `<st c="19087">9</st>`<st c="19088">. Thus, the following
    command runs a Gunicorn server with</st> `<st c="19146">9</st>` <st c="19147">workers:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: <st c="19208">Adding the</st> `<st c="19220">--workers</st>` <st c="19229">setting
    in the command statement allows us to include the appropriate worker count in
    the HTTP</st> <st c="19325">request processing.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="19344">Adding workers to the Gunicorn server that does not improve the
    total CPU-bound performance of the application is a waste of resources.</st> <st
    c="19481">A remedy is to add more threads to a worker rather than add</st> <st
    c="19541">unhelpful workers.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="19559">Workers or processes consume more memory space.</st> <st c="19608">Additionally,
    no two workers can share memory space, unlike with threads.</st> <st c="19682">A</st>
    *<st c="19684">thread</st>* <st c="19690">consumes less memory space since it
    is more lightweight than a worker.</st> <st c="19762">To experience the best server
    performance, each worker must spawn at least</st> `<st c="19837">2</st>` <st c="19838">threads
    that will work concurrently on HTTP requests and responses.</st> <st c="19907">So,
    running the following Gunicorn command can start a server with</st> `<st c="19974">1</st>`
    <st c="19975">worker with</st> `<st c="19988">2</st>` <st c="19989">threads:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: <st c="20062">The</st> `<st c="20067">--threads</st>` <st c="20076">setting
    allows us to add at least</st> `<st c="20111">2</st>` <st c="20112">threads</st>
    <st c="20121">per worker.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="20132">Although setting threads in a worker connotes concurrency, the
    threads are still within the bounds</st> <st c="20232">of their workers, which
    run synchronously.</st> <st c="20275">So, the blocking limitation of the workers
    hinders threads from performing their actual concurrent performance.</st> <st
    c="20387">However, having threads can manage the overhead of handling I/O transactions
    compared to the pure worker setup because the concurrency that’s applied to the
    I/O blockings will not consume</st> <st c="20575">more space.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="20586">The server log shown in</st> *<st c="20611">Figure 11</st>**<st
    c="20620">.3</st>* <st c="20622">depicts the change from the</st> `<st c="20651">sync</st>`
    <st c="20655">worker to</st> `<st c="20666">gthread</st>` <st c="20673">since
    all spawned Python threads become gthreads when used in the</st> <st c="20740">Gunicorn
    platform:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Server log after running Gunicorn with threads](img/B19383_11_003.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="21045">Figure 11.3 – Server log after running Gunicorn with threads</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="21105">Now, when the number of features that require I/O transactions
    increases, Gunicorn, along with workers and servers, will not help speed up the
    processing of HTTP requests and responses.</st> <st c="21292">Another solution
    is to add</st> *<st c="21319">pseudo-threads</st>* <st c="21333">or</st> *<st
    c="21337">green-threads</st>*<st c="21350">, through the</st> `<st c="21364">eventlet</st>`
    <st c="21372">and</st> `<st c="21377">gevent</st>` <st c="21383">libraries, to
    the Gunicorn server as worker classes.</st> <st c="21437">Both libraries use asynchronous
    utilities and</st> `<st c="21483">greenlet</st>` <st c="21491">threads to interface
    and execute the standard Flask components, especially I/O transactions, for more
    efficiency.</st> <st c="21606">They use the</st> *<st c="21619">monkey-patching</st>*
    <st c="21634">mechanism to</st> <st c="21648">replace the standard or blocking
    components with their</st> <st c="21703">asynchronous counterparts.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="21729">To deploy our application to Gunicorn with the</st> `<st c="21777">eventlet</st>`
    <st c="21785">library, install the</st> `<st c="21807">greenlet</st>` <st c="21815">module
    first using the following</st> `<st c="21849">pip</st>` <st c="21852">command,
    followed</st> <st c="21871">by</st> `<st c="21874">eventlet</st>`<st c="21882">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: <st c="21914">For</st> `<st c="21919">psycopg2</st>` <st c="21927">or database-related
    monkey-patching, install the</st> `<st c="21977">psycogreen</st>` <st c="21987">module
    with the following</st> `<st c="22014">pip</st>` <st c="22017">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <st c="22049">Then, apply</st> <st c="22062">monkey-patching for Peewee and</st>
    `<st c="22093">psycopg2</st>` <st c="22101">transactions by calling the</st> `<st
    c="22130">patch_psycopg()</st>` <st c="22145">function of the</st> `<st c="22162">psycogreen.eventlet</st>`
    <st c="22181">module in the uppermost portion of the</st> `<st c="22221">main.py</st>`
    <st c="22228">file before calling the</st> `<st c="22253">create_app()</st>` <st
    c="22265">method.</st> <st c="22274">The following snippet shows the portion of
    the</st> `<st c="22321">main.py</st>` <st c="22328">file with the</st> `<st c="22343">psycogreen</st>`
    <st c="22353">setup:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: <st c="22540">The</st> `<st c="22545">psycogreen</st>` <st c="22555">module
    provides a blocking interface or wrapper for</st> `<st c="22608">psycopg2</st>`
    <st c="22617">transactions to interact with coroutines or asynchronous components
    of the</st> `<st c="22692">eventlet</st>` <st c="22700">worker without altering
    the standard</st> <st c="22738">Peewee codes.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="22751">To deploy our</st> *<st c="22766">Online Grocery</st>* <st c="22780">application
    (</st>`<st c="22794">ch11-guni-eventlet</st>`<st c="22813">) to the Gunicorn server
    that uses</st> `<st c="22849">1</st>` `<st c="22850">eventlet</st>` <st c="22858">worker
    with</st> `<st c="22871">2</st>` <st c="22872">threads, run the</st> <st c="22890">following
    command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '*<st c="22996">Figure 11</st>**<st c="23006">.4</st>* <st c="23008">shows the
    server log after running the</st> <st c="23048">Gunicorn server:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.4 – Server log after starting the Gunicorn server using the eventlet
    worker](img/B19383_11_004.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="23522">Figure 11.4 – Server log after starting the Gunicorn server using
    the eventlet worker</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23607">The log depicts</st> <st c="23624">that the worker that was used
    by the server is an</st> `<st c="23674">eventlet</st>` <st c="23682">worker type.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23695">The</st> `<st c="23700">eventlet</st>` <st c="23708">library provides</st>
    <st c="23726">concurrent utilities that run standard or non-async Flask components
    asynchronously using task switching, a shift from sync to async tasks internally
    without explicitly</st> <st c="23895">programming it.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23910">Aside from</st> `<st c="23922">eventlet</st>`<st c="23930">,</st>
    `<st c="23932">gevent</st>` <st c="23938">can also manage concurrent requests
    from I/O-bound tasks of the applications.</st> <st c="24017">Like</st> `<st c="24022">eventlet</st>`<st
    c="24030">,</st> `<st c="24032">gevent</st>` <st c="24038">is a coroutine-based
    library but relies more on its stack of</st> `<st c="24100">greenlet</st>` <st
    c="24108">objects and their event loops.</st> <st c="24140">The</st> `<st c="24144">gevent</st>`
    <st c="24150">library’s</st> `<st c="24161">greenlet</st>` <st c="24169">is a
    lightweight and powerful thread that executes in a cooperative scheduling fashion.</st>
    <st c="24258">To operate a</st> `<st c="24271">gevent</st>` <st c="24277">worker
    in the Gunicorn server, install the</st> `<st c="24321">greenlet</st>`<st c="24329">,</st>
    `<st c="24331">eventlet</st>`<st c="24339">, and</st> `<st c="24345">gevent</st>`
    <st c="24351">modules using the following</st> `<st c="24380">pip</st>` <st c="24383">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: <st c="24429">Also, install</st> `<st c="24444">psycogreen</st>` <st c="24454">to
    monkey-patch the database-related transactions of the application using its</st>
    `<st c="24534">gevent</st>` `<st c="24540">patch_psycopg()</st>`<st c="24556">.
    The following snippet shows a portion of the</st> `<st c="24603">main.py</st>`
    <st c="24610">file of the</st> `<st c="24623">ch11-guni-gevent</st>` <st c="24639">project,
    a version of our</st> *<st c="24666">Online Grocery</st>* <st c="24680">application
    that needs to run on Gunicorn with</st> `<st c="24728">gevent</st>` <st c="24734">workers:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: <st c="24953">In</st> `<st c="24957">gevent</st>`<st c="24963">, the main module
    must call its</st> `<st c="24995">patch_all()</st>` <st c="25006">method from
    the</st> `<st c="25023">gevent.monkey</st>` <st c="25036">module, above anything
    else, to explicitly interface all the events at runtime to run asynchronously
    like coroutines.</st> <st c="25155">Afterward, it needs to call the</st> `<st
    c="25187">psycogreen</st>` <st c="25197">module’s</st> `<st c="25207">patch_psycopg()</st>`<st
    c="25222">, but this time under the</st> `<st c="25248">gevent</st>` <st c="25254">sub-module.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="25266">To start the</st> <st c="25280">Gunicorn server using the</st>
    `<st c="25306">2</st>` `<st c="25307">gevent</st>` <st c="25313">workers with</st>
    `<st c="25327">2</st>` <st c="25328">thread utilization each, run the</st> <st
    c="25362">following command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: '*<st c="25466">Figure 11</st>**<st c="25476">.5</st>* <st c="25478">shows the
    server log after starting up the</st> <st c="25522">Gunicorn server:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.5 – Server log after starting the Gunicorn server using the gevent
    workers](img/B19383_11_005.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="26061">Figure 11.5 – Server log after starting the Gunicorn server using
    the gevent workers</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26145">The worker used by the Gunicorn is now a</st> `<st c="26187">gevent</st>`
    <st c="26193">worker, as depicted in the preceding</st> <st c="26231">server log.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26242">Now, let’s use uWSGI as our production</st> <st c="26282">application
    server.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26301">Using uWSGI</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="26534">pyuwsgi</st>` <st c="26541">module using the following</st>
    `<st c="26569">pip</st>` <st c="26572">command:</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: <st c="26601">uWSGI has several required and optional setting options.</st>
    <st c="26659">One is the</st> `<st c="26670">-w</st>` <st c="26672">setting, which
    requires the WSGI module that the server needs to run.</st> <st c="26743">The</st>
    `<st c="26747">-p</st>` <st c="26749">setting indicates the number of workers
    or processes that can manage HTTP requests.</st> <st c="26834">The</st> `<st c="26838">--http</st>`
    <st c="26844">setting denotes the address and the port the server will be listening
    to.</st> <st c="26919">The</st> `<st c="26923">--enable-threads</st>` <st c="26939">setting
    allows the server to utilize Python threads for</st> <st c="26996">background
    processes.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="27017">To deploy our</st> *<st c="27032">Online Grocery</st>* <st c="27046">application
    (</st>`<st c="27060">ch11-uwsgi</st>`<st c="27071">) to a uWSGI server with</st>
    `<st c="27097">4</st>` <st c="27098">workers and background Python threads, run
    the</st> <st c="27146">following command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: <st c="27235">Here,</st> `<st c="27242">--master</st>` <st c="27250">is an optional
    setting that allows the master process and its workers to shut down and</st> <st
    c="27338">restart gracefully.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="27357">Unlike Gunicorn, uWSGI generates a long server log mentioning
    the several manageable configuration</st> <st c="27457">details it consists of
    to improve the application’s performance.</st> *<st c="27522">Figure 11</st>**<st
    c="27531">.6</st>* <st c="27533">shows the server log of uWSGI after</st> <st
    c="27570">its startup:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Server log after starting the uWSGI server with 4 workers](img/B19383_11_006.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="29113">Figure 11.6 – Server log after starting the uWSGI server with
    4 workers</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="29184">Shutting down the uWSGI server with the</st> `<st c="29225">--master</st>`
    <st c="29233">setting allows us to send the master process and its workers the</st>
    `<st c="29299">SIGTERM</st>` <st c="29306">signal to impose graceful shutdown,
    restart, or reload, which is better than the abrupt kill process.</st> *<st c="29409">Figure
    11</st>**<st c="29418">.7</st>* <st c="29420">shows the advantage of having the</st>
    `<st c="29455">--master</st>` <st c="29463">setting in</st> <st c="29475">the
    command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Server log after shutting down the uWSGI server with the --master
    setting](img/B19383_11_007.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="29792">Figure 11.7 – Server log after shutting down the uWSGI server
    with the --master setting</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="29879">Managing uWSGI is</st> <st c="29898">complex compared to the easy-to-configure
    Gunicorn.</st> <st c="29950">So far, Gunicorn is still the recommended server
    to use when deploying standard</st> <st c="30030">Flask applications.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="30049">Now, let’s deploy</st> *<st c="30068">Flask[async]</st>* <st c="30080">to
    an ASGI server</st> <st c="30099">called</st> *<st c="30106">Uvicorn</st>*<st
    c="30113">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="30114">Deploying the application to Uvicorn</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="30419">uvicorn.workers.UvicornWorker</st>` <st c="30448">as its</st>
    <st c="30456">HTTP server.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="30468">Even though Gunicorn is a WSGI-based server, it can support running
    Flask applications in standard and async mode through its</st> `<st c="30595">--worker-class</st>`
    <st c="30609">setting.</st> <st c="30619">For Flask[async] applications, Gunicorn
    can utilize the</st> `<st c="30675">aiohttp</st>` <st c="30682">or</st> `<st c="30686">uvicorn</st>`
    <st c="30693">worker</st> <st c="30701">class types.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="30713">Our async</st> *<st c="30724">Online Grocery</st>* <st c="30738">application
    (</st>`<st c="30752">ch11-async</st>`<st c="30763">) uses Gunicorn with a</st>
    `<st c="30787">uvicorn</st>` <st c="30794">worker as its deployment platform.</st>
    <st c="30830">Before applying the worker type, install the</st> `<st c="30875">uvicorn</st>`
    <st c="30882">module first by running the following</st> `<st c="30921">pip</st>`
    <st c="30924">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: <st c="30953">Then, import</st> `<st c="30967">WsgiToAsgi</st>` <st c="30977">from
    the</st> `<st c="30987">uvicorn</st>` <st c="30994">module’s</st> `<st c="31004">asgiref.wsgi</st>`
    <st c="31016">module to wrap the Flask app instance.</st> <st c="31056">The following
    snippet shows how to transform a WSGI application into an</st> <st c="31128">ASGI
    type:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: gunicorn main:asgi_app --bind 0.0.0.0:8000 --workers 2 --worker-class uvicorn.workers.UvicornWorker
    --threads 2
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: pip install mod_wsgi
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: set "MOD_WSGI_APACHE_ROOTDIR= C:/.../Server/Apache24"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: import sys
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: sys.path.insert(0, 'C:/Alibata/Training/ Source/flask/mastering/ch11-apache')
    <st c="39142">conf.wsgi</st> configuration file provides the Apache HTTP Server
    a channel to access the Flask <st c="39233">app</st> instance for deployment and
    execution through the <st c="39287">mod_wsgi</st> module.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: LoadFile "C:/Alibata/Development/Language/ Python/Python311/python311.dll"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: LoadModule wsgi_module "C:/Alibata/Training/Source/ flask/mastering/ch11-apache-env/Lib/site-packages/mod_wsgi/server/mod_wsgi.cp311-win_amd64.pyd"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: WSGIPythonHome "C:/Alibata/Training/Source/ flask/mastering/ch11-apache-env"
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Include conf/<st c="40310">VirtualHost</st> configuration file referenced in
    *<st c="40355">Step 10</st>*. The following is a sample configuration setup in
    our <st c="40417">ch11_apache.conf</st> file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="40689">The</st> `<st c="40694">VirtualHost</st>` <st c="40705">configuration
    defines the host address and port that the server</st> <st c="40770">will listen</st>
    <st c="40782">to so that it can run our application.</st> <st c="40821">Its</st>
    `<st c="40825">WSGIScriptAlias</st>` <st c="40840">directive gives reference to
    the</st> `<st c="40874">mod_wsgi</st>` <st c="40882">configuration file of the
    application.</st> <st c="40922">Moreover, the configuration permits the server
    to access all files in the</st> `<st c="40996">ch11-apache</st>` <st c="41007">project.</st>
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="43647">FROM python:3.11</st> WORKDIR /usr/src/ch11-asgi
  prefs: []
  type: TYPE_NORMAL
- en: RUN pip install --upgrade pip
  prefs: []
  type: TYPE_NORMAL
- en: COPY ./requirements.txt /usr/src/ch11-asgi/requirements.txt
  prefs: []
  type: TYPE_NORMAL
- en: RUN pip install -r requirements.txt
  prefs: []
  type: TYPE_NORMAL
- en: COPY . /usr/src/ch11-asgi
  prefs: []
  type: TYPE_NORMAL
- en: EXPOSE 8000
  prefs: []
  type: TYPE_NORMAL
- en: CMD ["gunicorn", "main:asgi_app", "--bind", "0.0.0.0:8000", "--worker-class",
    "uvicorn.workers.UvicornWorker", "--threads", "2"]
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="47286">version: ''3.0''</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="47301">services</st>: <st c="47313">api</st>: <st c="47319">build: ./ch11-asgi</st>
    volumes:'
  prefs: []
  type: TYPE_NORMAL
- en: '- ./ch11-asgi/:/usr/src/ch11-asgi/'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ports:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- 8000:8000 <st c="47401">depends_on</st>:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- postgres <st c="47425">postgres</st>: <st c="47436">image: «bitnami/postgresql:latest»</st>
    ports:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- 5432:5432'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'env_file:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- db.env # configure postgres <st c="47530">volumes</st>:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- <st c="47542">database-data:/var/lib/postgresql/data/</st>'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '<st c="47581">volumes</st>: <st c="47611">version</st> directive indicates
    the Compose syntax version the configuration will use in the Compose instructions.
    Our Compose configuration file uses version <st c="47766">3.0</st>, which is the
    latest at the time of writing this book. Lower versions mean deprecated keywords
    and commands.'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="47878">Now, the</st> `<st c="47888">services</st>` <st c="47896">directive
    defines all the containers that Compose will create and run.</st> <st c="47968">Ours
    include the</st> *<st c="47985">Online Grocery</st>* <st c="47999">application
    (</st>`<st c="48013">api</st>`<st c="48017">) and the PostgreSQL database platform
    (</st>`<st c="48058">postgres</st>`<st c="48067">).</st> <st c="48071">Here,</st>
    `<st c="48077">api</st>` <st c="48080">is the name of the service for our application.</st>
    <st c="48129">It contains the following</st> <st c="48155">required sub-directives:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="48179">build</st>`<st c="48185">: Points to the location of the local
    project folder containing</st> <st c="48250">the Dockerfile.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="48265">ports</st>`<st c="48271">: Maps the container’s ports to the
    host’s ports, either TCP</st> <st c="48333">or UDP.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="48340">volumes</st>`<st c="48348">: Attaches the local project files
    to the specified directory of the container, which spares the image from rebuilding
    if there are changes in the</st> <st c="48496">project files.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="48510">depends_on</st>`<st c="48521">: Mentions the service name considered
    as one of the</st> <st c="48575">container’s dependencies.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="48600">Another service is</st> `<st c="48620">postgres</st>`<st c="48628">,
    which provides the database platform for the</st> `<st c="48675">api</st>` <st
    c="48679">service, thus the</st> <st c="48697">dependency between the two services.</st>
    <st c="48734">Instead of using the</st> `<st c="48755">build</st>` <st c="48760">directive,
    its</st> `<st c="48776">image</st>` <st c="48781">directive will pull the latest</st>
    `<st c="48813">bitnami/postgresql</st>` <st c="48831">image to create a container
    for the PostgreSQL platform with an empty database schema.</st> <st c="48919">Its</st>
    `<st c="48923">ports</st>` <st c="48928">directive indicates that the container
    will use port</st> `<st c="48982">5432</st>` <st c="48986">to listen for database
    connectivity.</st> <st c="49024">The database credentials are in the</st> `<st
    c="49060">db.env</st>` <st c="49066">file indicated by the</st> `<st c="49089">env_file</st>`
    <st c="49097">directive.</st> <st c="49109">The following snippet shows the content
    of the</st> `<st c="49156">db.env</st>` <st c="49162">file:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: <st c="49235">The</st> `<st c="49240">volumes</st>` <st c="49247">directive
    for the</st> `<st c="49266">postgres</st>` <st c="49274">service is essential
    for data persistence because its absence in the configuration means data cleanup
    after the</st> <st c="49387">container restarts.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="49406">After finalizing the</st> `<st c="49428">docker-compose.yaml</st>`
    <st c="49447">file, run the</st> `<st c="49462">docker-compose --build</st>` <st
    c="49484">command to build or rebuild the services, then once again after the</st>
    `<st c="49553">docker-compose up</st>` <st c="49570">command to create and run
    the containers.</st> *<st c="49613">Figure 11</st>**<st c="49622">.12</st>* <st
    c="49625">shows the command logs after running the</st> `<st c="49667">docker-compose
    up --</st>``<st c="49687">build</st>` <st c="49693">commands:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Logs when running the docker-compose up --build command](img/B19383_11_012.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="50912">Figure 11.12 – Logs when running the docker-compose up --build
    command</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="50982">The Docker</st> <st c="50994">Desktop dashboard, on the other
    hand, will display the following container structure in</st> *<st c="51082">Figure
    11</st>**<st c="51091">.13</st>* <st c="51094">after successfully running the</st>
    <st c="51126">generated containers:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Docker Desktop showing ch11-asgi and the PostgreSQL containers](img/B19383_11_013.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="51293">Figure 11.13 – Docker Desktop showing ch11-asgi and the PostgreSQL
    containers</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="51370">Here,</st> `<st c="51377">ch11-asgi-deployment</st>` <st c="51397">in
    the given container structure is the name of the deployment folder containing
    the</st> `<st c="51483">db.env</st>` <st c="51489">and</st> `<st c="51494">docker-compose.yaml</st>`
    <st c="51513">files, and the directory where the terminal invocation of the</st>
    `<st c="51576">docker-compose</st>` <st c="51590">commands happened.</st> <st
    c="51610">Inside the Compose container structure are the two containers that were
    generated by the services.</st> <st c="51709">Clicking the</st> `<st c="51722">api-1</st>`
    <st c="51727">container will provide us with the Gunicorn server logs presented
    in</st> *<st c="51797">Figure 11</st>**<st c="51806">.14</st>*<st c="51809">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.14 – The Gunicorn server log from ch11-asgi app in the api-1 container](img/B19383_11_014.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="52764">Figure 11.14 – The Gunicorn server log from ch11-asgi app in the
    api-1 container</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="52844">On the</st> <st c="52852">other hand, clicking the</st> `<st c="52877">postgres-1</st>`
    <st c="52887">container will show the logs shown in</st> *<st c="52926">Figure
    11</st>**<st c="52935">.15</st>*<st c="52938">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.15 – The PostgreSQL server log in the postgres-1 container](img/B19383_11_015.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="54308">Figure 11.15 – The PostgreSQL server log in the postgres-1 container</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="54376">Now, the database schema in the</st> `<st c="54409">postgres-1</st>`
    <st c="54419">container is empty.</st> <st c="54440">To populate the database
    with the tables and data from the local PostgreSQL server, run</st> `<st c="54528">pg_dump</st>`
    <st c="54535">to create a</st> `<st c="54548">.sql</st>` <st c="54552">dump file.</st>
    <st c="54564">Then, in the directory location of the</st> `<st c="54603">.sql</st>`
    <st c="54607">backup file, run the following</st> `<st c="54639">docker copy</st>`
    <st c="54650">command to copy the backup file, say</st> `<st c="54688">ogs.sql</st>`<st
    c="54695">, to the</st> `<st c="54704">entrypoint</st>` <st c="54714">directory
    of</st> <st c="54728">the container:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: <st c="54828">Then, access the container’s server using valid credentials, such
    as</st> `<st c="54898">postgres</st>` <st c="54906">and its password, to spool
    or execute the</st> `<st c="54949">.sql</st>` <st c="54953">file using the</st>
    `<st c="54969">docker</st>` `<st c="54976">exec</st>` <st c="54980">command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: <st c="55099">Finally, log in to the</st> `<st c="55123">ch11-asgi-deployment-postgres-1</st>`
    <st c="55154">server using the</st> `<st c="55172">docker exec</st>` <st c="55183">command
    with the database</st> <st c="55210">admin credentials:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: <st c="55293">Also, don’t forget</st> <st c="55313">to replace the</st> `<st
    c="55328">host</st>` <st c="55332">parameter of the</st> `<st c="55350">PooledPostgresqlDatabase</st>`
    <st c="55374">driver class with the container’s name instead of</st> `<st c="55425">localhost</st>`
    <st c="55434">and its</st> `<st c="55443">port</st>` <st c="55447">to</st> `<st
    c="55451">5432</st>`<st c="55455">. The following snippet shows the changes in
    the driver class configuration that can be found in the</st> `<st c="55556">app/models/config</st>`
    <st c="55573">module:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: <st c="55810">Now, problems arise when one or some of the containers fail during
    production.</st> <st c="55890">By default, it does support automatic container
    restart when there are runtime errors in the application or some memory-related
    issues.</st> <st c="56026">Moreover, Compose cannot perform container orchestration
    in a</st> <st c="56088">distributed setup.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56106">Another powerful approach to deploying applications to different
    hosts rather than to a single server is through</st> *<st c="56220">Kubernetes</st>*<st
    c="56230">. In the next section, we’ll use Kubernetes to deploy our</st> `<st
    c="56288">ch11-asgi</st>` <st c="56297">application with Gunicorn as</st> <st
    c="56327">the server.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56338">Deploying the application on Kubernetes</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56378">Like Compose,</st> **<st c="56393">Kubernetes</st>** <st c="56403">or</st>
    **<st c="56407">K8</st>** <st c="56409">manages multiple containers with or without
    dependencies</st> <st c="56467">on each other.</st> <st c="56482">Kubernetes can
    utilize volume storage</st> <st c="56520">for data persistence and has CLI</st>
    <st c="56553">commands to manage the life cycle of the containers.</st> <st c="56606">The
    only difference is that Kubernetes can run containers in a distributed setup and
    uses Pods to manage</st> <st c="56711">its containers.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="56726">Among the many ways to install Kubernetes, this chapter utilizes
    the</st> **<st c="56796">Kubernetes</st>** <st c="56806">feature in Docker Desktop’s</st>
    **<st c="56835">Settings</st>**<st c="56843">, as shown in</st> *<st c="56857">Figure
    11</st>**<st c="56866">.16</st>*<st c="56869">:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 11.16 – Kubernetes in Desktop Docker](img/B19383_11_016.jpg)'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_IMG
- en: <st c="57377">Figure 11.16 – Kubernetes in Desktop Docker</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="57420">Check the</st> **<st c="57431">Enable Kubernetes</st>** <st c="57448">checkbox
    from the</st> **<st c="57467">Settings</st>** <st c="57475">area and click the</st>
    **<st c="57495">Apply & restart</st>** <st c="57510">button in the lower right
    portion of the dashboard.</st> <st c="57563">It will take a while for Kubernetes
    to appear running or</st> *<st c="57620">green</st>* <st c="57625">in the lower
    left corner of the dashboard, depending on the number of containers running on</st>
    <st c="57718">Docker Engine.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="57732">When the Kubernetes engine fails, click the</st> `<st c="57942">C:\Users\alibatasys\AppData\Local\Temp</st>`
    <st c="57980">folder before restarting</st> <st c="58006">Docker Desktop.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="58021">Kubernetes uses YAML files to define and create Kubernetes objects,
    such as</st> **<st c="58098">Deployment</st>**<st c="58108">,</st> **<st c="58110">Pods</st>**<st
    c="58114">,</st> **<st c="58116">Services</st>**<st c="58124">, and</st> **<st
    c="58130">PersistentVolume</st>**<st c="58146">, all of which are required to
    establish</st> <st c="58187">some container rules, manage the host resources,
    and build</st> <st c="58246">containerized</st> <st c="58260">applications.</st>
    <st c="58274">An object definition in YAML format</st> <st c="58310">always consists
    of the following</st> <st c="58343">manifest fields:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<st c="58359">apiVersion</st>`<st c="58370">: The field that indicates the
    appropriate and stable Kubernetes API for a Kubernetes object creation.</st> <st
    c="58474">This field must always appear first in the file.</st> <st c="58523">Kubernetes
    has several APIs, such as</st> `<st c="58560">batch/v1</st>`<st c="58568">,</st>
    `<st c="58570">apps/v1</st>`<st c="58577">,</st> `<st c="58579">v1</st>`<st c="58581">,
    and</st> `<st c="58587">rbac.authorization.k8s.io/v1</st>`<st c="58615">, but
    the more common is</st> `<st c="58640">v1</st>` <st c="58642">for</st> `<st c="58647">PersistentVolume</st>`<st
    c="58663">,</st> `<st c="58665">PersistentVolumeClaims</st>`<st c="58687">,</st>
    `<st c="58689">Service</st>`<st c="58696">,</st> `<st c="58698">Secret</st>`<st
    c="58704">, and</st> `<st c="58710">Pod</st>` <st c="58713">object creation and</st>
    `<st c="58734">apps/v1</st>` <st c="58741">for</st> `<st c="58746">Deployment</st>`
    <st c="58756">and</st> `<st c="58761">ReplicaSets</st>` <st c="58772">objects.</st>
    <st c="58782">So far,</st> `<st c="58790">v1</st>` <st c="58792">is the first
    stable release of</st> <st c="58824">Kubernetes API.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="58839">kind</st>`<st c="58844">: The field that identifies the Kubernetes
    object the file needs to create.</st> <st c="58921">Here,</st> `<st c="58927">kind</st>`
    <st c="58931">can be</st> `<st c="58939">Secret</st>`<st c="58945">,</st> `<st
    c="58947">Service</st>`<st c="58954">,</st> `<st c="58956">Deployment</st>`<st
    c="58966">,</st> `<st c="58968">Role</st>`<st c="58972">,</st> <st c="58974">or</st>
    `<st c="58977">Pod</st>`<st c="58980">.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="58981">metadata</st>`<st c="58990">: This field specifies the properties
    of the Kubernetes object defined in the file.</st> <st c="59075">The properties
    may include the</st> *<st c="59106">name</st>*<st c="59110">,</st> *<st c="59112">labels</st>*<st
    c="59118">,</st> <st c="59120">and</st> *<st c="59124">namespace</st>*<st c="59133">.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<st c="59134">spec</st>`<st c="59139">: This field provides the specification
    of the object in key-value format.</st> <st c="59215">The same object type with
    a different</st> `<st c="59253">apiVersion</st>` <st c="59263">can have different</st>
    <st c="59283">specification details.</st>'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="59305">In this</st> <st c="59314">chapter, the Kubernetes deployment</st>
    <st c="59349">involves pulling our</st> `<st c="59370">ch11-asgi</st>` <st c="59379">file’s
    Docker image and the latest</st> `<st c="59415">bitnami/postgresql</st>` <st c="59433">image
    from the Docker registry hub.</st> <st c="59470">But before creating the deployment
    file, our first manifest focuses on containing the</st> `<st c="59556">Secret</st>`
    <st c="59562">object definition, which aims to store and secure the database PostgreSQL
    credentials.</st> <st c="59650">The following is our</st> `<st c="59671">kub-secrets.yaml</st>`
    <st c="59687">file, which contains our</st> `<st c="59713">Secret</st>` <st c="59719">object
    definition:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: <st c="59947">A</st> `<st c="59950">Secret</st>` <st c="59956">object contains
    protected data such as a password, user token, or access key.</st> <st c="60035">Instead
    of hardcoding these confidential data in the applications, it is safe to store
    them in Pods so that they can be accessed by other Pods in</st> <st c="60181">the
    cluster.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="60193">Our second</st> <st c="60205">YAML file,</st> `<st c="60216">kub-postgresql-pv.yaml</st>`<st
    c="60238">, defines the object that will create persistent storage resources</st>
    <st c="60305">for our PostgreSQL, the</st> `<st c="60329">PersistentVolume</st>`
    <st c="60345">object.</st> <st c="60354">Since our Kubernetes runs on a single-node
    server, the default storage class is</st> `<st c="60434">hostpath</st>`<st c="60442">.
    This storage will hold the data of the PostgreSQL permanently, even after the
    removal of our containerized application.</st> <st c="60564">The following</st>
    `<st c="60578">kub-postgresql-pv.yaml</st>` <st c="60600">file defines the</st>
    `<st c="60618">PersistentVolume</st>` <st c="60634">object that will manage our
    application’s</st> <st c="60677">data storage:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: <st c="60894">In Kubernetes, utilizing storage from the</st> `<st c="60937">PersistentVolume</st>`
    <st c="60953">object requires a</st> `<st c="60972">PersistentVolumeClaims</st>`
    <st c="60994">object.</st> <st c="61003">This object requests a portion of the
    cluster storage</st> <st c="61057">that Kubernetes</st> *<st c="61073">Pods</st>*
    <st c="61077">will use</st> <st c="61087">for the application’s read and write.</st>
    <st c="61125">The following</st> `<st c="61139">kub-postgresql-pvc.yaml</st>`
    <st c="61162">file creates an</st> `<st c="61179">PersistentVolumeClaims</st>`
    <st c="61201">object for the</st> <st c="61217">deployment’s storage:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: <st c="61386">The</st> `<st c="61391">PersistentVolumeClaims</st>` <st c="61413">and</st>
    `<st c="61418">PersistentVolume</st>` <st c="61434">objects work together to dynamically
    claim a new volume storage for the</st> `<st c="61507">bitnami/postgresql</st>`
    <st c="61525">container.</st> <st c="61537">The</st> *<st c="61541">manual</st>*
    `<st c="61547">StorageClass</st>` <st c="61560">type indicates that there is a
    binding from</st> `<st c="61605">PersistentVolumeClaims</st>` <st c="61627">to</st>
    `<st c="61631">PersistentVolume</st>` <st c="61647">for the request of</st> <st
    c="61667">the storage.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="61679">After creating the configuration files for the</st> `<st c="61727">Secret</st>`<st
    c="61733">,</st> `<st c="61735">PersistentVolume</st>`<st c="61751">, and</st>
    `<st c="61757">PersistentVolumeClaims</st>` <st c="61779">objects, the next crucial
    step is to create the deployment configuration files that will connect the</st>
    `<st c="61881">ch11-asgi</st>` <st c="61890">and</st> `<st c="61895">bitnami/postgresql</st>`
    <st c="61913">Docker images with database configuration details from the</st>
    `<st c="61973">Secret</st>` <st c="61979">object, utilize the volume claims for
    PostgreSQL data persistency, and deploy and run them all together with Kubernetes
    Services and Pods.</st> <st c="62119">Here,</st> `<st c="62125">Deployment</st>`
    <st c="62135">manages a set of Pods to run an application workload.</st> <st c="62190">A
    Pod, as Kubernetes’ fundamental building block, represents a single running process
    within the Kubernetes cluster.</st> <st c="62307">The following</st> `<st c="62321">kub-postgresql-deployment.yaml</st>`
    <st c="62351">file tells Kubernetes to manage an instance that will hold the</st>
    <st c="62415">PostgreSQL container:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="62780">spec:</st> replicas: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector:'
  prefs: []
  type: TYPE_NORMAL
- en: 'matchLabels:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'app: ch11-postgresql'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'metadata:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'labels:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'app: ch11-postgresql'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'spec:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'terminationGracePeriodSeconds: 180 <st c="62932">containers:</st> - name: ch11-postgresql'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'image: bitnami/postgresql:latest'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'imagePullPolicy: IfNotPresent'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ports:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: tcp-5432'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'containerPort: 5432'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'env:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: POSTGRES_USER'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'valueFrom:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'secretKeyRef: <st c="63570">name: postgres-credentials</st> key: user'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: POSTGRES_PASSWORD'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'valueFrom:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'secretKeyRef: <st c="63658">name: postgres-credentials</st> key: password'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: POSTGRES_DB'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'value: ogs'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: PGDATA'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'value: /var/lib/postgresql/data/pgdata'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'volumeMounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '- name: data-storage-volume'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'mountPath: /var/lib/postgresql/data'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'resources:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'requests:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'cpu: "50m"'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'memory: "256Mi"'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'limits:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'cpu: "500m"'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'memory: "256Mi"'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'volumes:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: data-storage-volume'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'persistentVolumeClaim:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'claimName: postgresql-db-claim'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: '--- <st c="64972">apiVersion: v1</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="64986">kind: Service</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="65000">metadata:</st><st c="65010">name: ch11-postgresql-service</st>
    labels: <st c="65049">name: ch11-postgresql</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="65070">spec:</st><st c="65076">ports:</st><st c="65083">- port: 5432</st>
    selector:'
  prefs: []
  type: TYPE_NORMAL
- en: 'app: ch11-postgresql'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="65354">apiVersion: apps/v1</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="65374">kind: Deployment</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="65391">metadata:</st><st c="65401">name: ch11-app</st> labels:'
  prefs: []
  type: TYPE_NORMAL
- en: 'name: ch11-app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="65657">spec:</st> replicas: 1'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector:'
  prefs: []
  type: TYPE_NORMAL
- en: 'matchLabels:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'app: ch11-app'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'metadata:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'labels:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'app: ch11-app'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'spec:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'containers:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- <st c="66156">name: ch11-app</st><st c="66170">image: sjctrags/ch11-app:latest</st>
    env:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: SERVICE_POSTGRES_SERVICE_HOST'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'value: ch11-postgresql-service. default.svc.cluster.local'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: POSTGRES_DB_USER'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'valueFrom:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'secretKeyRef: <st c="66354">name: postgres-credentials</st> key: user'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- name: POSTGRES_DB_PSW'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'valueFrom:'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'secretKeyRef: <st c="66440">name: postgres-credentials</st> key: password'
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'ports:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '- containerPort: 8000'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: '--- <st c="66610">apiVersion: v1</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="66624">kind: Service</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="66638">metadata:</st><st c="66648">name: ch11-app-service</st>'
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="66671">spec:</st><st c="66677">type: LoadBalancer</st> selector:'
  prefs: []
  type: TYPE_NORMAL
- en: 'app: ch11-app <st c="66721">ports:</st> - <st c="66730">protocol: TCP</st><st
    c="66743">port: 8000</st> targetPort: 8000'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: kubectl cp ogs.sql ch11-postgresql-b7fc578f4-6g4nc:/tmp/ogs.sql
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: kubectl exec -it ch11-postgresql-b7fc578f4-6g4nc -- psql -U postgres -d ogs
    -f /tmp/ogs.sql
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: from peewee_async import PooledPostgresqlDatabase
  prefs: []
  type: TYPE_NORMAL
- en: import os
  prefs: []
  type: TYPE_NORMAL
- en: database = PooledPostgresqlDatabase(
  prefs: []
  type: TYPE_NORMAL
- en: '''ogs'', <st c="70758">user=os.environ.get(''POSTGRES_DB_USER''),</st><st c="70798">password=os.environ.get(''POSTGRES_DB_PSW''),</st><st
    c="70842">host=os.environ.get(</st> <st c="70863">''SERVICE_POSTGRES_SERVICE_HOST''),</st><st
    c="70897">port=''5432'',</st> max_connections = 3,'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: connect_timeout = 3
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: )
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: server { <st c="72747">listen 80</st>; <st c="72759">server_name localhost</st>;
    <st c="72783">location /</st> { <st c="72796">proxy_pass</st> http://ch11-asgi-dep-nginx-api-1:8000/;
  prefs: []
  type: TYPE_NORMAL
- en: proxy_set_header <st c="72864">X-Forwarded-For</st> $proxy_add_x_forwarded_for;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header <st c="72925">X-Forwarded-Proto</st> $scheme;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header <st c="72969">X-Forwarded-Host</st> $host;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: proxy_set_header <st c="73010">X-Forwarded-Prefix</st> /;
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
