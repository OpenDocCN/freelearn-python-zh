- en: <st c="0">3</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">3</st>
- en: <st c="2">Creating REST Web Services</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">创建 RESTful 网络服务</st>
- en: <st c="28">Although Flask is a popular lightweight web framework, it can also
    support RESTful web service implementations.</st> <st c="141">It has its own JSON
    encoders and decoders, built-in JSON support mechanisms for response generation
    and error handling, easy-to-manage RESTful request dispatching, and a lean configuration
    approach.</st> <st c="340">Unlike the other API frameworks, Flask uses more modules
    and packages because of the required project structure it needs to maintain.</st>
    <st c="474">However, after setting up the directory structure accordingly, the
    succeeding steps will be seamless, lightweight,</st> <st c="589">and straightforward.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="28">尽管 Flask 是一个流行的轻量级网络框架，但它也可以支持 RESTful 网络服务的实现。</st> <st c="141">它有自己的
    JSON 编码器和解码器，内置的 JSON 支持机制用于响应生成和错误处理，易于管理的 RESTful 请求分发，以及精简的配置方法。</st> <st c="340">与其他
    API 框架不同，Flask 由于需要维护的项目结构，因此使用更多的模块和包。</st> <st c="474">然而，在相应地设置目录结构后，后续步骤将无缝、轻量级且直接。</st>
- en: <st c="609">This chapter will introduce the part of the Flask framework that
    deals with building API endpoints to provide data and services to sub-modules
    or other applications.</st> <st c="776">The goal is to understand how Flask manages
    the incoming requests and outgoing responses for REST endpoints that will run
    on its environment.</st> <st c="918">Also, this chapter will discuss the various
    components that will comprise the Flask’s API</st> <st c="1008">endpoint implementation.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="609">本章将介绍 Flask 框架中处理构建 API 端点以向子模块或其他应用程序提供数据和服务的部分。</st> <st c="776">目标是了解
    Flask 如何管理在其环境中运行的 RESTful 端点的传入请求和传出响应。</st> <st c="918">此外，本章还将讨论将构成 Flask API
    端点实现的各种组件。</st> <st c="1008">端点实现。</st>
- en: <st c="1032">Here are the topics that this chapter will cover to understand
    API development</st> <st c="1112">with Flask:</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1032">以下是本章将涵盖的主题，以了解使用 Flask 开发 API：</st> <st c="1112">：</st>
- en: <st c="1123">Setting up a</st> <st c="1137">RESTful application</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1123">设置</st> <st c="1137">RESTful 应用程序</st>
- en: <st c="1156">Implementing</st> <st c="1170">API endpoints</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1156">实现</st> <st c="1170">API 端点</st>
- en: <st c="1183">Managing requests</st> <st c="1202">and responses</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1183">管理请求</st> <st c="1202">和响应</st>
- en: <st c="1215">Utilizing response encoders</st> <st c="1244">and decoders</st>
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1215">利用响应编码器</st> <st c="1244">和解码器</st>
- en: <st c="1256">Filtering API requests</st> <st c="1280">and responses</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1256">过滤 API 请求</st> <st c="1280">和响应</st>
- en: <st c="1293">Handling exceptions</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1293">处理异常</st>
- en: <st c="1313">Consuming</st> <st c="1324">API endpoints</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="1313">消费</st> <st c="1324">API 端点</st>
- en: <st c="1337">Technical requirements</st>
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1337">技术要求</st>
- en: <st c="1360">This chapter utilizes a simple online pizza ordering system to
    showcase the capability of the Flask framework in developing REST web services.</st>
    <st c="1504">The</st> `<st c="1508">ch03</st>` <st c="1512">application has a
    login, product inventory, and ordering and payment modules with the business scope
    to identify the necessary Flask components and utilities for the development.</st>
    <st c="1692">Moreover, a client application,</st> `<st c="1724">ch03-client</st>`<st
    c="1735">, is also included in the deliverables to showcase how to consume Flask
    API endpoints.</st> <st c="1822">Both applications use PostgreSQL as their database
    management system, with SQLAlchemy as their ORM.</st> <st c="1922">All these projects
    are uploaded</st> <st c="1954">at</st> [<st c="1957">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch03</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch03)<st
    c="2038">.</st>
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1360">本章使用一个简单的在线披萨订购系统来展示 Flask 框架在开发 RESTful 网络服务方面的能力。</st> <st c="1504">第</st>
    `<st c="1508">3</st>` <st c="1512">个应用程序具有登录、产品库存、订单和支付模块，其业务范围是确定开发所需的 Flask
    组件和实用工具。</st> <st c="1692">此外，还包含一个客户端应用程序</st> `<st c="1724">ch03-client</st>`<st
    c="1735">，以展示如何消费 Flask API 端点。</st> <st c="1822">这两个应用程序都使用 PostgreSQL 作为其数据库管理系统，并使用
    SQLAlchemy 作为其 ORM。</st> <st c="1922">所有这些项目都已上传至</st> <st c="1954">[<st c="1957">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch03</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch03)<st
    c="2038">。</st>
- en: <st c="2039">Setting up a RESTful application</st>
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2039">设置 RESTful 应用程序</st>
- en: <st c="2072">First, create</st> <st c="2087">the project’s virtual environment,
    which will serve as the local repository of the needed module extensions.</st>
    <st c="2196">Next, open the VSCode editor to make the main project folder and
    install the</st> `<st c="2273">flask</st>` <st c="2278">extension module using
    the</st> `<st c="2306">pip</st>` <st c="2309">command through the VSCode’s command</st>
    <st c="2347">line interpreter.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2072">首先，创建</st> <st c="2087">项目的虚拟环境，它将作为所需模块扩展的本地仓库。</st> <st c="2196">接下来，打开VSCode编辑器，创建主项目文件夹，并使用VSCode的命令行解释器通过</st>
    `<st c="2273">flask</st>` <st c="2278">扩展模块使用</st> `<st c="2306">pip</st>` <st
    c="2309">命令进行安装。</st>
- en: <st c="2364">Afterward, manage the directory structure, such as the arrangement
    made for</st> [*<st c="2441">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="2450">projects.</st> <st c="2461">From the three approaches, namely the
    application factory design,</st> `<st c="2527">Blueprint</st>`<st c="2536">, and
    the hybrid between these two, our online pizza ordering application will use the
    application factory approach to place its custom exception classes, models, repository,
    services, utilities, APIs, and database configuration in one</st> `<st c="2772">app</st>`
    <st c="2775">folder and register all these components using the</st> `<st c="2827">create_app()</st>`
    <st c="2839">method.</st> *<st c="2848">Figure 3</st>**<st c="2856">.1</st>* <st
    c="2858">shows the project directory structure of our</st> <st c="2904">prototype
    application.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2364">之后，管理目录结构，例如为</st> [*<st c="2441">第二章</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="2450">项目</st> <st c="2461">所做的安排。</st> <st c="2461">从三种方法中，即应用工厂设计，</st>
    `<st c="2527">蓝图</st>`<st c="2536">，以及这两种方法的混合，我们的在线披萨订购应用将使用应用工厂方法来放置其自定义异常类、模型、仓库、服务、实用工具、API和数据库配置在一个</st>
    `<st c="2772">app</st>` <st c="2775">文件夹中，并使用</st> `<st c="2827">create_app()</st>`
    <st c="2839">方法注册所有这些组件。</st> *<st c="2848">图3</st>**<st c="2856">.1</st>* <st
    c="2858">显示了我们的</st> <st c="2904">原型应用</st> <st c="2908">的项目目录结构。</st>
- en: '![Figure 3.1 – Project directory structure for the RESTful application](img/B19383_03_1.jpg)'
  id: totrans-17
  prefs: []
  type: TYPE_IMG
  zh: '![图3.1 – RESTful应用的目录结构](img/B19383_03_1.jpg)'
- en: <st c="3055">Figure 3.1 – Project directory structure for the RESTful application</st>
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3055">图3.1 – RESTful应用的目录结构</st>
- en: <st c="3123">The logging setup, the</st> <st c="3147">SQLAlchemy declarative
    configuration, and the sessions created in</st> [*<st c="3213">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="3222">are all retained and used in this application.</st> <st c="3270">On
    the other hand, the</st> `<st c="3293">create_app()</st>`<st c="3305">, still
    placed in the</st> `<st c="3327">__init__.py</st>` <st c="3338">of the</st> `<st
    c="3346">app</st>` <st c="3349">package, is implemented</st> <st c="3374">as follows:</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3123">日志设置、</st> <st c="3147">SQLAlchemy声明性配置</st>，以及在第</st> [*<st c="3213">第二章</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="3222">中创建的会话都保留并用于此应用。</st> <st c="3270">另一方面，仍然放置在</st> `<st c="3293">create_app()</st>`<st
    c="3305">，位于</st> `<st c="3327">__init__.py</st>` <st c="3338">的</st> `<st c="3346">app</st>`
    <st c="3349">包中，实现如下：</st>
- en: '[PRE0]'
  id: totrans-20
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="3625">The</st> `<st c="3630">main.py</st>` <st c="3637">still has the
    error handlers and the</st> `<st c="3675">app.run()</st>` <st c="3684">method
    for the server startup.</st> <st c="3716">The same command,</st> `<st c="3734">python
    main.py</st>`<st c="3748">, will run the application.</st> <st c="3776">However,
    the</st> `<st c="3789">ch03</st>` <st c="3793">application</st> <st c="3806">will
    not be web-based</st> <st c="3828">but API-based.</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3625">`<st c="3630">main.py</st>` <st c="3637">仍然包含错误处理程序和服务器启动的</st>
    `<st c="3675">app.run()</st>` <st c="3684">方法。</st> <st c="3716">相同的命令，</st> `<st
    c="3734">python main.py</st>`<st c="3748">，将运行应用。</st> <st c="3776">然而，</st> `<st
    c="3789">ch03</st>` <st c="3793">应用</st> <st c="3806">将不是基于Web的</st> <st c="3828">而是基于API的。</st>
- en: <st c="3842">Let us dissect our application and identify the Flask components
    used to build</st> <st c="3922">REST services.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3842">让我们剖析我们的应用，并确定用于构建</st> <st c="3922">REST服务</st> <st c="3926">的Flask组件。</st>
- en: <st c="3936">Implementing API endpoints</st>
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="3936">实现API端点</st>
- en: <st c="3963">The implementation of</st> <st c="3986">API endpoints uses the
    same bolts and knots applied in creating web-based components in</st> *<st c="4074">Chapters
    1</st>* <st c="4084">and</st> *<st c="4089">2</st>*<st c="4090">, such as declaring
    path variables, accessing the request through the</st> `<st c="4160">request</st>`
    <st c="4167">proxy object, returning the same</st> `<st c="4201">Response</st>`
    <st c="4209">object, and using the same</st> `<st c="4237">@route()</st>` <st
    c="4245">decorator.</st> <st c="4257">A GET API endpoint that returns a</st> *<st
    c="4291">JSON</st>* <st c="4295">response is</st> <st c="4308">as follows:</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3963">The implementation of</st> <st c="3986">API endpoints uses the
    same bolts and knots applied in creating web-based components in</st> *<st c="4074">Chapters
    1</st>* <st c="4084">and</st> *<st c="4089">2</st>*<st c="4090">, such as declaring
    path variables, accessing the request through the</st> `<st c="4160">request</st>`
    <st c="4167">proxy object, returning the same</st> `<st c="4201">Response</st>`
    <st c="4209">object, and using the same</st> `<st c="4237">@route()</st>` <st
    c="4245">decorator.</st> <st c="4257">A GET API endpoint that returns a</st> *<st
    c="4291">JSON</st>* <st c="4295">response is</st> <st c="4308">as follows:</st>
- en: '[PRE1]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '<st c="6164">@current_app.route("/introduction", methods = [''GET''])</st>
    def introduction():'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="6164">@current_app.route("/introduction", methods = [''GET''])</st>
    def introduction():'
- en: response = make_response(<st c="6265">jsonify('This is an application that …
    … … order requests, and provides payment receipts.')</st>, 200)
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: response = make_response(<st c="6265">jsonify('This is an application that …
    … … order requests, and provides payment receipts.')</st>, 200)
- en: 'return response <st c="6380">@current_app.route("/company/trademarks", methods
    = [''GET''])</st> def list_goals():'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 'return response <st c="6380">@current_app.route("/company/trademarks", methods
    = [''GET''])</st> def list_goals():'
- en: response = make_response(<st c="6484">jsonify(['Eat', 'Live', 'Happy'])</st>,
    200)
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: response = make_response(<st c="6484">jsonify(['Eat', 'Live', 'Happy'])</st>,
    200)
- en: return response
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: return response
- en: '[PRE2]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '<st c="6945">@current_app.route("/index", methods = [''GET''])</st> def index():'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="6945">@current_app.route("/index", methods = [''GET''])</st> def index():'
- en: response = <st c="7018">jsonify(message='This is an Online Pizza Ordering System.',
    today=date.today())</st>, 200
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: response = <st c="7018">jsonify(message='This is an Online Pizza Ordering System.',
    today=date.today())</st>, 200
- en: 'return response <st c="7119">@current_app.route("/introduction", methods =
    [''GET''])</st> def introduction():'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 'return response <st c="7119">@current_app.route("/introduction", methods =
    [''GET''])</st> def introduction():'
- en: response = <st c="7205">jsonify('This is an application that … … … order requests,
    and provides payment receipts.')</st>, 200
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: response = <st c="7205">jsonify('This is an application that … … … order requests,
    and provides payment receipts.')</st>, 200
- en: 'return response <st c="7318">@current_app.route("/company/trademarks", methods
    = [''GET''])</st> def list_goals():'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 'return response <st c="7318">@current_app.route("/company/trademarks", methods
    = [''GET''])</st> def list_goals():'
- en: response = <st c="7408">jsonify(['Eat', 'Live', 'Happy'])</st>, 200
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: response = <st c="7408">jsonify(['Eat', 'Live', 'Happy'])</st>, 200
- en: return response
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: return response
- en: '[PRE3]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: '<st c="8566">@current_app.post(''/employee/add'')</st> def add_employee():'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="8566">@current_app.post(''/employee/add'')</st> def add_employee():'
- en: emp_json = request.get_json()
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: emp_json = request.get_json()
- en: repo = EmployeeRepository(db_session)
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = EmployeeRepository(db_session)
- en: employee = Employee(**emp_json)
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: employee = Employee(**emp_json)
- en: result = repo.insert(employee)
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = repo.insert(employee)
- en: 'if result:'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result:'
- en: content = jsonify(emp_json)
  id: totrans-46
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = jsonify(emp_json)
- en: current_app.logger.info('insert employee record successful')
  id: totrans-47
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: current_app.logger.info('insert employee record successful')
- en: return make_response(content, 201)
  id: totrans-48
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(content, 201)
- en: 'else:'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: raise DuplicateRecordException("insert employee record encountered a problem",
    status_code=500)
  id: totrans-50
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: raise DuplicateRecordException("insert employee record encountered a problem",
    status_code=500)
- en: '[PRE4]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: '<st c="9312">@current_app.get(''/employee/list/all'')</st> def list_all_employee():'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="9312">@current_app.get(''/employee/list/all'')</st> def list_all_employee():'
- en: repo = EmployeeRepository(db_session)
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = EmployeeRepository(db_session)
- en: records = repo.select_all()
  id: totrans-54
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: records = repo.select_all()
- en: emp_rec = [rec.to_json() for rec in records]
  id: totrans-55
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: emp_rec = [rec.to_json() for rec in records]
- en: current_app.logger.info('retrieved a list of employees successfully')
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: current_app.logger.info('retrieved a list of employees successfully')
- en: return jsonify(emp_rec)
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: return jsonify(emp_rec)
- en: '[PRE5]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: '<st c="9835">@current_app.put(''/employee/update'')</st> def update_employee():'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="9835">@current_app.put(''/employee/update'')</st> def update_employee():'
- en: emp_json = request.get_json()
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: emp_json = request.get_json()
- en: repo = EmployeeRepository(db_session)
  id: totrans-61
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = EmployeeRepository(db_session)
- en: result = repo.update(emp_json['empid'], emp_json)
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = repo.update(emp_json['empid'], emp_json)
- en: 'if result:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result:'
- en: content = jsonify(emp_json)
  id: totrans-64
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = jsonify(emp_json)
- en: current_app.logger.info('update employee record successful')
  id: totrans-65
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: current_app.logger.info('update employee record successful')
- en: return make_response(content, 201)
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(content, 201)
- en: 'else:'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: raise NoRecordException("update employee record encountered a problem", status_code=500)
  id: totrans-68
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: raise NoRecordException("update employee record encountered a problem", status_code=500)
- en: '[PRE6]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: '<st c="10624">@current_app.patch(''/employee/update/<string:empid>'')</st>
    def update_employee_name(<st c="10704">empid:str</st>):'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="10624">@current_app.patch(''/employee/update/<string:empid>'')</st>
    def update_employee_name(<st c="10704">empid:str</st>):'
- en: emp_json = request.get_json()
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: emp_json = request.get_json()
- en: repo = EmployeeRepository(db_session)
  id: totrans-72
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = EmployeeRepository(db_session)
- en: result = repo.update(empid, emp_json)
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = repo.update(empid, emp_json)
- en: 'if result:'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result:'
- en: content = jsonify(emp_json)
  id: totrans-75
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = jsonify(emp_json)
- en: current_app.logger.info('update employee firstname, middlename, and lastname
    successful')
  id: totrans-76
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: current_app.logger.info('update employee firstname, middlename, and lastname
    successful')
- en: return make_response(content, 201)
  id: totrans-77
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(content, 201)
- en: 'else:'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: raise NoRecordException("update employee firstname, middlename, and lastname
    encountered a problem", status_code=500)
  id: totrans-79
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: raise NoRecordException("update employee firstname, middlename, and lastname
    encountered a problem", status_code=500)
- en: '[PRE7]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '<st c="11397">@current_app.delete(''/employee/delete/<string:empid>'')</st>
    def delete_employee(<st c="11473">empid:str</st>):'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="11397">@current_app.delete(''/employee/delete/<string:empid>'')</st>
    def delete_employee(<st c="11473">empid:str</st>):'
- en: repo = EmployeeRepository(db_session)
  id: totrans-82
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = EmployeeRepository(db_session)
- en: result = repo.delete(empid)
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = repo.delete(empid)
- en: 'if result:'
  id: totrans-84
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result:'
- en: content = jsonify(message=f'employee {empid} deleted')
  id: totrans-85
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = jsonify(message=f'employee {empid} deleted')
- en: current_app.logger.info('delete employee record successful')
  id: totrans-86
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: current_app.logger.info('delete employee record successful')
- en: return make_response(content, 201)
  id: totrans-87
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(content, 201)
- en: 'else:'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: raise NoRecordException("delete employee record encountered a problem", status_code=500)
  id: totrans-89
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: raise NoRecordException("delete employee record encountered a problem", status_code=500)
- en: '[PRE8]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: '@current_app.post(''/customer/add'')'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '@current_app.post(''/customer/add'')'
- en: 'def add_customer(): <st c="13138">cust_json = request.get_json()</st> repo
    = CustomerRepository(db_session) <st c="13207">customer = Customer(**cust_json)</st>
    result = repo.insert(customer)'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'def add_customer(): <st c="13138">cust_json = request.get_json()</st> repo
    = CustomerRepository(db_session) <st c="13207">customer = Customer(**cust_json)</st>
    result = repo.insert(customer)'
- en: 'if result:'
  id: totrans-93
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if result:'
- en: content = jsonify(cust_json)
  id: totrans-94
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = jsonify(cust_json)
- en: current_app.logger.info('insert customer record successful')
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: current_app.logger.info('insert customer record successful')
- en: return make_response(content, 201)
  id: totrans-96
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(content, 201)
- en: 'else:'
  id: totrans-97
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: content = jsonify(message="insert customer record encountered a problem")
  id: totrans-98
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: content = jsonify(message="insert customer record encountered a problem")
- en: return make_response(content, 500)
  id: totrans-99
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return make_response(content, 500)
- en: '[PRE9]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: '@current_app.post(''/category/add'')'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '@current_app.post(''/category/add'')'
- en: 'def add_category():'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 'def add_category():'
- en: 'if <st c="13876">request.is_json</st>: <st c="13894">cat_json = request.json</st>
    cat = Category(<st c="13933">**cat_json</st>)'
  id: totrans-103
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if <st c="13876">request.is_json</st>: <st c="13894">cat_json = request.json</st>
    cat = Category(<st c="13933">**cat_json</st>)'
- en: repo = CategoryRepository(db_session)
  id: totrans-104
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = CategoryRepository(db_session)
- en: result = repo.insert(cat)
  id: totrans-105
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: result = repo.insert(cat)
- en: … … … … … …
  id: totrans-106
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: 'else:'
  id: totrans-107
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: abort(500)
  id: totrans-108
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: abort(500)
- en: '[PRE10]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '@current_app.post(''/nonpizza/add'')'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '@current_app.post(''/nonpizza/add'')'
- en: 'def add_nonpizza(): <st c="14782">content_type = request.headers.get(''Content-Type'')</st><st
    c="14832">if content_type == ''application/json''</st>: <st c="14873">nonpizza_json
    = request.json</st> nonpizza = NonPizza(**nonpizza_json)'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 'def add_nonpizza(): <st c="14782">content_type = request.headers.get(''Content-Type'')</st><st
    c="14832">if content_type == ''application/json''</st>: <st c="14873">nonpizza_json
    = request.json</st> nonpizza = NonPizza(**nonpizza_json)'
- en: … … … … … …
  id: totrans-112
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: 'else:'
  id: totrans-113
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: abort(500)
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: abort(500)
- en: '[PRE11]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: '@current_app.route(''/login/add'', methods = [''POST''])'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '@current_app.route(''/login/add'', methods = [''POST''])'
- en: 'def add_login(): <st c="16038">if request.is_json:</st><st c="16057">login_json
    = loads(request.data)</st> login = Login(**login_json)'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 'def add_login(): <st c="16038">if request.is_json:</st><st c="16057">login_json
    = loads(request.data)</st> login = Login(**login_json)'
- en: … … … … … …
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: … … … … … …
- en: 'else:'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'else:'
- en: abort(500)
  id: totrans-120
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: abort(500)
- en: '[PRE12]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: '@current_app.route(''/login/list/all'', methods = [''GET''])'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '@current_app.route(''/login/list/all'', methods = [''GET''])'
- en: 'def list_all_login():'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 'def list_all_login():'
- en: repo = LoginRepository(db_session)
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: repo = LoginRepository(db_session)
- en: records = repo.select_all()
  id: totrans-125
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: records = repo.select_all()
- en: login_rec = [rec.to_json() for rec in records]
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: login_rec = [rec.to_json() for rec in records]
- en: current_app.logger.info('retrieved a list of login successfully') <st c="17229">resp
    = Response(response = dumps(login_rec),</st> <st c="17273">status=200, mimetype="application/json"
    )</st> return resp
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: current_app.logger.info('retrieved a list of login successfully') <st c="17229">resp
    = Response(response = dumps(login_rec),</st> <st c="17273">status=200, mimetype="application/json"
    )</st> return resp
- en: '[PRE13]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: <st c="18662">from flask.json.provider import JSONProvider</st>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18662">from flask.json.provider import JSONProvider</st>
- en: '<st c="18707">import json</st> class ImprovedJsonProvider(<st c="18747">JSONProvider</st>):'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="18707">import json</st> class ImprovedJsonProvider(<st c="18747">JSONProvider</st>):'
- en: 'def __init__(self, *args, **kwargs):'
  id: totrans-131
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, *args, **kwargs):'
- en: self.options = kwargs
  id: totrans-132
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.options = kwargs
- en: super().__init__(*args, **kwargs) <st c="18857">def default(self, o):</st>
  id: totrans-133
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: super().__init__(*args, **kwargs) <st c="18857">def default(self, o):</st>
- en: <st c="18878">if isinstance(o, date):</st>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18878">if isinstance(o, date):</st>
- en: <st c="18902">return o.strftime("%m/%d/%Y")</st>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18902">返回 o.strftime("%m/%d/%Y")</st>
- en: <st c="18932">elif isinstance(o, datetime):</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18932">elif isinstance(o, datetime):</st>
- en: <st c="18962">return o.strftime("%m/%d/%Y, %H:%M:%S")</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18962">返回 o.strftime("%m/%d/%Y, %H:%M:%S")</st>
- en: <st c="19002">return super().default(self, o)</st>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19002">返回 super().default(self, o)</st>
- en: <st c="19034">def dumps(self, obj, **kwargs):</st>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19034">def dumps(self, obj, **kwargs):</st>
- en: <st c="19066">kwargs.setdefault("default", self.default)</st><st c="19109">kwargs.setdefault("ensure_ascii",
    True)</st><st c="19149">kwargs.setdefault("sort_keys", True)</st>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="19066">kwargs.setdefault("default", self.default)</st><st c="19109">kwargs.setdefault("ensure_ascii",
    True)</st><st c="19149">kwargs.setdefault("sort_keys", True)</st>
- en: '<st c="19186">return json.dumps(obj, **kwargs)</st> def loads(self, s: str
    | bytes, **kwargs): <st c="19263">s_dict:dict = json.loads(s.decode(''utf-8''))</st><st
    c="19306">s_sanitized = dict((k, v) for k, v in</st> <st c="19344">s_dict.items()
    if v)</st><st c="19365">s_str = json.dumps(s_sanitized)</st> return json.loads(<st
    c="19497">main.py</st> module and assign the <st c="19527">app</st>’s <st c="19534">json</st>
    attribute with the instance of the custom provider with the <st c="19599">app</st>
    object as its constructor parameter. The following is the setup of our custom
    <st c="19681">ImprovedJsonprovider</st> in the online pizza ordering prototype:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '<st c="19186">返回 json.dumps(obj, **kwargs)</st> def loads(self, s: str | bytes,
    **kwargs): <st c="19263">s_dict:dict = json.loads(s.decode(''utf-8''))</st><st
    c="19306">s_sanitized = dict((k, v) for k, v in</st> <st c="19344">s_dict.items()
    if v)</st><st c="19365">s_str = json.dumps(s_sanitized)</st> return json.loads(<st
    c="19497">main.py</st> 模块并将 <st c="19527">app</st> 的 <st c="19534">json</st> 属性设置为自定义提供者的实例，其构造参数为
    <st c="19599">app</st> 对象。以下是在线披萨订购原型中自定义 <st c="19681">ImprovedJsonprovider</st>
    的设置：'
- en: '[PRE14]'
  id: totrans-142
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'from flask.json.provider import JSONProvider <st c="23169">import orjson</st>
    class OrjsonJsonProvider(JSONProvider):'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '从 flask.json.provider 模块导入 JSONProvider <st c="23169">导入 orjson</st> 类 OrjsonJsonProvider(JSONProvider):'
- en: 'def __init__(self, *args, **kwargs):'
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, *args, **kwargs):'
- en: self.options = kwargs
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.options = kwargs
- en: super().__init__(*args, **kwargs)
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: super().__init__(*args, **kwargs)
- en: 'def dumps(self, obj, **kwargs): <st c="23348">return orjson.dumps(obj,</st>
    <st c="23372">option=orjson.OPT_NON_STR_KEYS).decode(''utf-8'')</st> def loads(self,
    s, **kwargs): <st c="23478">OrjsonJsonProvider</st> implements a custom JSON provider
    that uses <st c="23541">orjson</st>, one of the fastest JSON libraries that supports
    several types, such as <st c="23620">datetime</st>, <st c="23630">dataclass</st>,
    <st c="23641">numpy</st> types, and <st c="23658">Universally Unique</st> <st
    c="23677">Identifiers</st> (<st c="23690">UUID</st>).'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def dumps(self, obj, **kwargs): <st c="23348">返回 orjson.dumps(obj,</st> <st
    c="23372">option=orjson.OPT_NON_STR_KEYS).decode(''utf-8'')</st> def loads(self,
    s, **kwargs): <st c="23478">OrjsonJsonProvider</st> 实现了一个自定义 JSON 提供者，它使用 <st
    c="23541">orjson</st>，这是一个支持多种类型（如 <st c="23620">datetime</st>，<st c="23630">dataclass</st>，<st
    c="23641">numpy</st> 类型，以及 <st c="23658">通用唯一</st> <st c="23677">标识符</st> (<st
    c="23690">UUID</st>））的最快 JSON 库之一。'
- en: <st c="23697">Another essential add-on that can further improve our RESTful
    application’s validation and handling of incoming body requests and outgoing responses
    is</st> *<st c="23850">route filters</st>*<st c="23863">.</st>
  id: totrans-148
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="23697">另一个可以进一步改进我们的 RESTful 应用程序验证和处理传入请求体和传出响应的必要附加组件是</st> *<st c="23850">路由过滤器</st>*<st
    c="23863">。</st>
- en: <st c="23864">Filtering API requests and responses</st>
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="23864">过滤 API 请求和响应</st>
- en: <st c="23901">In</st> [*<st c="23905">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="23914">, the CRUD</st> <st c="23925">operations of every view function became
    possible without an</st> <st c="23986">ORM because of a custom decorator,</st>
    `<st c="24021">@connect_db</st>`<st c="24032">. The decorator was responsible
    for database connectivity and closure for every execution of the view function.</st>
    <st c="24144">Like in any Python decorator, the</st> `<st c="24178">@connect_db</st>`
    <st c="24189">executes first before the view function starts receiving the requests
    from the client and executes after the view generates</st> <st c="24314">the response.</st>
  id: totrans-150
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="23901">在</st> [*<st c="23905">第一章</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="23914">中，由于自定义装饰器</st> `<st c="23986">@connect_db</st>`<st c="24021">，每个视图函数的
    CRUD 操作成为可能，无需 ORM。该装饰器负责视图函数每次执行时的数据库连接和关闭。</st> <st c="24144">与任何 Python 装饰器一样，</st>
    `<st c="24178">@connect_db</st>` <st c="24189">在视图函数开始接收客户端请求之前执行，并在视图生成响应之后执行。</st>
- en: <st c="24327">On the other hand,</st> [*<st c="24347">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="24356">introduced the use of</st> `<st c="24379">@before_request</st>`
    <st c="24394">and</st> `<st c="24399">@after_request</st>` <st c="24413">decorators
    in managing the application context of the view functions.</st> <st c="24484">Our
    applications used them to access the session</st> `<st c="24533">db</st>` <st
    c="24535">object for SQLAlchemy’s database connectivity, impose user authentication,
    and perform</st> <st c="24623">software logging.</st>
  id: totrans-151
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="24327">另一方面，</st> [*<st c="24347">第二章</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="24356">介绍了使用</st> `<st c="24379">@before_request</st>` <st c="24394">和</st>
    `<st c="24399">@after_request</st>` <st c="24413">装饰器来管理视图函数的应用程序上下文。</st> <st
    c="24484">我们的应用程序使用它们来访问</st> `<st c="24533">db</st>` <st c="24535">对象以实现SQLAlchemy的数据库连接，实施用户身份验证，并执行</st>
    `<st c="24623">软件日志记录</st>`。</st>
- en: <st c="24640">Using decorators to manage the requests and responses for a view
    or API function is called route filtering.</st> <st c="24749">The following are
    implementations of Flask’s</st> `<st c="24794">before_request</st>` <st c="24808">and</st>
    `<st c="24813">after_request</st>` <st c="24826">methods used by the</st> `<st
    c="24847">ch03</st>` <st c="24851">application to filter the</st> <st c="24878">request–response
    handshake:</st>
  id: totrans-152
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="24640">使用装饰器来管理视图或API函数的请求和响应被称为路由过滤。</st> <st c="24749">以下是实现Flask的</st>
    `<st c="24794">before_request</st>` <st c="24808">和</st> `<st c="24813">after_request</st>`
    <st c="24826">方法，这些方法由</st> `<st c="24847">ch03</st>` <st c="24851">应用程序用于过滤</st>
    <st c="24878">请求-响应握手：</st>
- en: '[PRE15]'
  id: totrans-153
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: <st c="25676">In this</st> <st c="25685">application,</st> `<st c="25698">before_request</st>`
    <st c="25712">checks if the incoming request body of</st> <st c="25752">HTTP POST,
    PUT, or PATCH transaction is not empty or</st> `<st c="25805">None</st>`<st c="25809">.
    Otherwise, it raises an</st> `<st c="25835">HTTP Status Code 500</st>` <st c="25855">with
    the error message</st> `<st c="25879">request body is empty</st>`<st c="25900">.
    It also performs logging for audit purposes.</st> <st c="25947">The</st> `<st
    c="25951">after_request</st>` <st c="25964">method, on the other hand, logs the
    basic details of the API for tracing purposes and checks the</st> `<st c="26062">access_control_allow_origin</st>`
    <st c="26089">response header.</st> <st c="26107">The mandatory parameter response
    allows us to access the response headers for modification if given by the software
    requirement.</st> <st c="26236">Also, this is the best spot to create cookies
    and execute the last database commits since this is the last moment of access
    to the response object before the</st> `<st c="26394">after_request</st>` <st
    c="26407">method sends it to</st> <st c="26427">the client.</st>
  id: totrans-154
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="25676">在这个</st> <st c="25685">应用程序中，</st> `<st c="25698">before_request</st>`
    <st c="25712">检查传入的HTTP POST、PUT或PATCH事务的请求体是否为空或</st> `<st c="25752">None</st>`<st
    c="25805">。否则，它将引发一个</st> `<st c="25835">HTTP状态码500</st>` <st c="25855">，并带有错误消息</st>
    `<st c="25879">请求体为空</st>`<st c="25900">。它还执行日志记录以供审计目的。</st> <st c="25947">另一方面，</st>
    `<st c="25951">after_request</st>` <st c="25964">方法，另一方面，记录API的基本详细信息以供跟踪目的，并检查</st>
    `<st c="26062">access_control_allow_origin</st>` <st c="26089">响应头。</st> <st c="26107">强制参数response允许我们在软件需求给出时修改响应头。</st>
    <st c="26236">此外，这也是创建cookie和执行最后数据库提交的最佳位置，因为这是在</st> `<st c="26394">after_request</st>`
    <st c="26407">方法将其发送到</st> `<st c="26427">客户端</st>`之前的最后时刻访问响应对象。</st>
- en: <st c="26438">Like FastAPI, the Flask framework has its version of creating
    middleware-like components, which can act as a global route filter.</st> <st c="26569">Our
    application has the following implementation, which serves as a middleware to
    the</st> <st c="26655">API endpoints:</st>
  id: totrans-155
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="26438">与FastAPI一样，Flask框架也有其创建类似中间件组件的版本，这些组件可以作为全局路由过滤器。</st> <st c="26569">我们的应用程序有以下实现，它作为API端点的中间件：</st>
- en: '[PRE16]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: app.<st c="28188">before_request_funcs</st> = {
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: app.<st c="28188">before_request_funcs</st> = {
- en: '''orders_client_bp'': [before_check_api_server],'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''orders_client_bp'': [before_check_api_server],'
- en: '''pizza_client_bp'': [before_log_pizza_bp]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''pizza_client_bp'': [before_log_pizza_bp]'
- en: '}'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: app.<st c="28308">after_request_funcs</st> = {
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: app.<st c="28308">after_request_funcs</st> = {
- en: '''orders_client_bp'': [after_check_api_server],'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''orders_client_bp'': [after_check_api_server],'
- en: '''pizza_client_bp'': [after_log_pizza_bp]'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '''pizza_client_bp'': [after_log_pizza_bp]'
- en: '}'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '[PRE17]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: '@app.errorhandler(404)'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: '@app.errorhandler(404)'
- en: 'def not_found(e): <st c="28994">return jsonify(error=str(e)), 404</st> @app.errorhandler(400)'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'def not_found(e): <st c="28994">return jsonify(error=str(e)), 404</st> @app.errorhandler(400)'
- en: 'def bad_request(e): <st c="29071">return jsonify(error=str(e)), 400</st> def
    server_error(e):'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 'def bad_request(e): <st c="29071">return jsonify(error=str(e)), 400</st> def
    server_error(e):'
- en: print(e) <st c="29135">return jsonify(error=str(e)), 500</st> app.register_error_handler(500,
    server_error)
  id: totrans-169
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: print(e) <st c="29135">return jsonify(error=str(e)), 500</st> app.register_error_handler(500,
    server_error)
- en: '[PRE18]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'class DuplicateRecordException(HTTPException):'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 'class DuplicateRecordException(HTTPException):'
- en: status_code = 500
  id: totrans-172
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: status_code = 500
- en: 'def __init__(self, message, status_code=None, payload=None):'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'def __init__(self, message, status_code=None, payload=None):'
- en: super().__init__()
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: super().__init__()
- en: self.message = message
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.message = message
- en: 'if status_code is not None:'
  id: totrans-176
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if status_code is not None:'
- en: self.status_code = status_code
  id: totrans-177
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.status_code = status_code
- en: 'self.payload = payload <st c="30292">DuplicateRecordException</st>, the following
    error handler will access its <st c="30362">to_dict()</st> instance method and
    convert it to JSON through <st c="30419">jsonify()</st>. It will also access the
    <st c="30454">status_code</st> for the response:'
  id: totrans-178
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: self.payload = payload <st c="30292">DuplicateRecordException</st>，以下错误处理程序将访问其<st
    c="30362">to_dict()</st>实例方法并通过<st c="30419">jsonify()</st>将其转换为JSON。它还将访问响应的<st
    c="30454">status_code</st>：
- en: '[PRE19]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: '@app.errorhandler(Exception)'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '@app.errorhandler(Exception)'
- en: 'def handle_built_exception(e):'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 'def handle_built_exception(e):'
- en: 'if isinstance(e, HTTPException):'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 'if isinstance(e, HTTPException):'
- en: return e <st c="31032">handle_built_exception()</st> handler will always return
    a JSON-formatted error message and raise the Werkzeug-specific exceptions for
    other custom handlers to manage. But for raised Python-specific exceptions, <st
    c="31238">handle_built_exception()</st> will directly render the JSON error message.
  id: totrans-183
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: return e <st c="31032">handle_built_exception()</st>处理程序将始终返回一个JSON格式的错误消息，并为其他自定义处理程序抛出Werkzeug特定的异常。但对于抛出的Python特定异常，<st
    c="31238">handle_built_exception()</st>将直接渲染JSON错误消息。
- en: <st c="31307">After completing the needed components in building our RESTful
    application, it is time to consume these API endpoints using a</st> <st c="31434">client
    application.</st>
  id: totrans-184
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="31307">在构建我们的RESTful应用程序所需组件完成后，是时候使用</st>` `<st c="31434">客户端应用程序</st>`
    `<st c="31434">消耗这些API端点了。</st>`'
- en: <st c="31453">Consuming API endpoints</st>
  id: totrans-185
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31453">消耗API端点</st>
- en: <st c="31477">Our</st> `<st c="31482">ch03-client</st>` <st c="31493">project
    is</st> <st c="31505">a web-based Flask application that utilizes the API endpoints
    created in the</st> `<st c="31582">ch03</st>` <st c="31586">application.</st>
    <st c="31600">So far, the easiest way to consume a Flask API endpoint is to use
    the</st> `<st c="31670">requests</st>` <st c="31678">extension module.</st> <st
    c="31697">To install the</st> `<st c="31712">requests</st>` <st c="31720">library,
    run the</st> <st c="31738">following command:</st>
  id: totrans-186
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: '`<st c="31477">我们的</st>` `<st c="31482">ch03-client</st>` `<st c="31493">项目是一个</st>`
    `<st c="31505">基于Web的Flask应用程序，它利用了在</st> `<st c="31582">ch03</st>` `<st c="31586">应用程序中创建的API端点。</st>`
    `<st c="31600">到目前为止，使用</st>` `<st c="31670">requests</st>` `<st c="31678">扩展模块是消耗Flask
    API端点最简单的方法。</st>` `<st c="31697">要安装</st>` `<st c="31712">requests</st>` `<st
    c="31720">库，请运行以下命令：</st>'
- en: '[PRE20]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: <st c="31777">This</st> `<st c="31783">requests</st>` <st c="31791">module has
    a</st> `<st c="31805">get()</st>` <st c="31810">helper method to send an HTTP
    GET request to a URL to retrieve some server resources.</st> <st c="31897">The
    following view function from the</st> `<st c="31934">ch03-client</st>` <st c="31945">project
    retrieves a list of customers and employees from the</st> `<st c="32007">ch03</st>`
    <st c="32011">application and passes them as context data to the</st> `<st c="32063">add_order.html</st>`
    <st c="32077">template:</st>
  id: totrans-188
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
  zh: <st c="31777">此</st> `<st c="31783">requests</st>` `<st c="31791">模块有一个</st>
    `<st c="31805">get()</st>` `<st c="31810">辅助方法，用于向URL发送HTTP GET请求以检索一些服务器资源。</st>`
    `<st c="31897">以下来自</st> `<st c="31934">ch03-client</st>` `<st c="31945">项目` `<st
    c="31934">的视图函数从</st> `<st c="32007">ch03</st>` `<st c="32011">应用程序中检索客户和员工列表，并将它们作为上下文数据传递给</st>
    `<st c="32063">add_order.html</st>` `<st c="32077">模板：</st>`
- en: '[PRE21]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: '[PRE22]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: '[PRE23]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: '[PRE24]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: '[PRE25]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
