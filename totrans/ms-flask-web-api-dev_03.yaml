- en: <st c="0">3</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Creating REST Web Services</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="28">Although Flask is a popular lightweight web framework, it can also
    support RESTful web service implementations.</st> <st c="141">It has its own JSON
    encoders and decoders, built-in JSON support mechanisms for response generation
    and error handling, easy-to-manage RESTful request dispatching, and a lean configuration
    approach.</st> <st c="340">Unlike the other API frameworks, Flask uses more modules
    and packages because of the required project structure it needs to maintain.</st>
    <st c="474">However, after setting up the directory structure accordingly, the
    succeeding steps will be seamless, lightweight,</st> <st c="589">and straightforward.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="609">This chapter will introduce the part of the Flask framework that
    deals with building API endpoints to provide data and services to sub-modules
    or other applications.</st> <st c="776">The goal is to understand how Flask manages
    the incoming requests and outgoing responses for REST endpoints that will run
    on its environment.</st> <st c="918">Also, this chapter will discuss the various
    components that will comprise the Flask’s API</st> <st c="1008">endpoint implementation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1032">Here are the topics that this chapter will cover to understand
    API development</st> <st c="1112">with Flask:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1123">Setting up a</st> <st c="1137">RESTful application</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1156">Implementing</st> <st c="1170">API endpoints</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1183">Managing requests</st> <st c="1202">and responses</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1215">Utilizing response encoders</st> <st c="1244">and decoders</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1256">Filtering API requests</st> <st c="1280">and responses</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1293">Handling exceptions</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1313">Consuming</st> <st c="1324">API endpoints</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="1337">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1360">This chapter utilizes a simple online pizza ordering system to
    showcase the capability of the Flask framework in developing REST web services.</st>
    <st c="1504">The</st> `<st c="1508">ch03</st>` <st c="1512">application has a
    login, product inventory, and ordering and payment modules with the business scope
    to identify the necessary Flask components and utilities for the development.</st>
    <st c="1692">Moreover, a client application,</st> `<st c="1724">ch03-client</st>`<st
    c="1735">, is also included in the deliverables to showcase how to consume Flask
    API endpoints.</st> <st c="1822">Both applications use PostgreSQL as their database
    management system, with SQLAlchemy as their ORM.</st> <st c="1922">All these projects
    are uploaded</st> <st c="1954">at</st> [<st c="1957">https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch03</st>](https://github.com/PacktPublishing/Mastering-Flask-Web-Development/tree/main/ch03)<st
    c="2038">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2039">Setting up a RESTful application</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2072">First, create</st> <st c="2087">the project’s virtual environment,
    which will serve as the local repository of the needed module extensions.</st>
    <st c="2196">Next, open the VSCode editor to make the main project folder and
    install the</st> `<st c="2273">flask</st>` <st c="2278">extension module using
    the</st> `<st c="2306">pip</st>` <st c="2309">command through the VSCode’s command</st>
    <st c="2347">line interpreter.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2364">Afterward, manage the directory structure, such as the arrangement
    made for</st> [*<st c="2441">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="2450">projects.</st> <st c="2461">From the three approaches, namely the
    application factory design,</st> `<st c="2527">Blueprint</st>`<st c="2536">, and
    the hybrid between these two, our online pizza ordering application will use the
    application factory approach to place its custom exception classes, models, repository,
    services, utilities, APIs, and database configuration in one</st> `<st c="2772">app</st>`
    <st c="2775">folder and register all these components using the</st> `<st c="2827">create_app()</st>`
    <st c="2839">method.</st> *<st c="2848">Figure 3</st>**<st c="2856">.1</st>* <st
    c="2858">shows the project directory structure of our</st> <st c="2904">prototype
    application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 3.1 – Project directory structure for the RESTful application](img/B19383_03_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="3055">Figure 3.1 – Project directory structure for the RESTful application</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3123">The logging setup, the</st> <st c="3147">SQLAlchemy declarative
    configuration, and the sessions created in</st> [*<st c="3213">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="3222">are all retained and used in this application.</st> <st c="3270">On
    the other hand, the</st> `<st c="3293">create_app()</st>`<st c="3305">, still
    placed in the</st> `<st c="3327">__init__.py</st>` <st c="3338">of the</st> `<st
    c="3346">app</st>` <st c="3349">package, is implemented</st> <st c="3374">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: <st c="3625">The</st> `<st c="3630">main.py</st>` <st c="3637">still has the
    error handlers and the</st> `<st c="3675">app.run()</st>` <st c="3684">method
    for the server startup.</st> <st c="3716">The same command,</st> `<st c="3734">python
    main.py</st>`<st c="3748">, will run the application.</st> <st c="3776">However,
    the</st> `<st c="3789">ch03</st>` <st c="3793">application</st> <st c="3806">will
    not be web-based</st> <st c="3828">but API-based.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3842">Let us dissect our application and identify the Flask components
    used to build</st> <st c="3922">REST services.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3936">Implementing API endpoints</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="3963">The implementation of</st> <st c="3986">API endpoints uses the
    same bolts and knots applied in creating web-based components in</st> *<st c="4074">Chapters
    1</st>* <st c="4084">and</st> *<st c="4089">2</st>*<st c="4090">, such as declaring
    path variables, accessing the request through the</st> `<st c="4160">request</st>`
    <st c="4167">proxy object, returning the same</st> `<st c="4201">Response</st>`
    <st c="4209">object, and using the same</st> `<st c="4237">@route()</st>` <st
    c="4245">decorator.</st> <st c="4257">A GET API endpoint that returns a</st> *<st
    c="4291">JSON</st>* <st c="4295">response is</st> <st c="4308">as follows:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="6164">@current_app.route("/introduction", methods = [''GET''])</st>
    def introduction():'
  prefs: []
  type: TYPE_NORMAL
- en: response = make_response(<st c="6265">jsonify('This is an application that …
    … … order requests, and provides payment receipts.')</st>, 200)
  prefs: []
  type: TYPE_NORMAL
- en: 'return response <st c="6380">@current_app.route("/company/trademarks", methods
    = [''GET''])</st> def list_goals():'
  prefs: []
  type: TYPE_NORMAL
- en: response = make_response(<st c="6484">jsonify(['Eat', 'Live', 'Happy'])</st>,
    200)
  prefs: []
  type: TYPE_NORMAL
- en: return response
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="6945">@current_app.route("/index", methods = [''GET''])</st> def index():'
  prefs: []
  type: TYPE_NORMAL
- en: response = <st c="7018">jsonify(message='This is an Online Pizza Ordering System.',
    today=date.today())</st>, 200
  prefs: []
  type: TYPE_NORMAL
- en: 'return response <st c="7119">@current_app.route("/introduction", methods =
    [''GET''])</st> def introduction():'
  prefs: []
  type: TYPE_NORMAL
- en: response = <st c="7205">jsonify('This is an application that … … … order requests,
    and provides payment receipts.')</st>, 200
  prefs: []
  type: TYPE_NORMAL
- en: 'return response <st c="7318">@current_app.route("/company/trademarks", methods
    = [''GET''])</st> def list_goals():'
  prefs: []
  type: TYPE_NORMAL
- en: response = <st c="7408">jsonify(['Eat', 'Live', 'Happy'])</st>, 200
  prefs: []
  type: TYPE_NORMAL
- en: return response
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="8566">@current_app.post(''/employee/add'')</st> def add_employee():'
  prefs: []
  type: TYPE_NORMAL
- en: emp_json = request.get_json()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: repo = EmployeeRepository(db_session)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: employee = Employee(**emp_json)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.insert(employee)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(emp_json)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: current_app.logger.info('insert employee record successful')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: raise DuplicateRecordException("insert employee record encountered a problem",
    status_code=500)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="9312">@current_app.get(''/employee/list/all'')</st> def list_all_employee():'
  prefs: []
  type: TYPE_NORMAL
- en: repo = EmployeeRepository(db_session)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: records = repo.select_all()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: emp_rec = [rec.to_json() for rec in records]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: current_app.logger.info('retrieved a list of employees successfully')
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return jsonify(emp_rec)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="9835">@current_app.put(''/employee/update'')</st> def update_employee():'
  prefs: []
  type: TYPE_NORMAL
- en: emp_json = request.get_json()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: repo = EmployeeRepository(db_session)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.update(emp_json['empid'], emp_json)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(emp_json)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: current_app.logger.info('update employee record successful')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: raise NoRecordException("update employee record encountered a problem", status_code=500)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="10624">@current_app.patch(''/employee/update/<string:empid>'')</st>
    def update_employee_name(<st c="10704">empid:str</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: emp_json = request.get_json()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: repo = EmployeeRepository(db_session)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.update(empid, emp_json)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(emp_json)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: current_app.logger.info('update employee firstname, middlename, and lastname
    successful')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: raise NoRecordException("update employee firstname, middlename, and lastname
    encountered a problem", status_code=500)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '<st c="11397">@current_app.delete(''/employee/delete/<string:empid>'')</st>
    def delete_employee(<st c="11473">empid:str</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: repo = EmployeeRepository(db_session)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.delete(empid)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message=f'employee {empid} deleted')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: current_app.logger.info('delete employee record successful')
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: raise NoRecordException("delete employee record encountered a problem", status_code=500)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: '@current_app.post(''/customer/add'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'def add_customer(): <st c="13138">cust_json = request.get_json()</st> repo
    = CustomerRepository(db_session) <st c="13207">customer = Customer(**cust_json)</st>
    result = repo.insert(customer)'
  prefs: []
  type: TYPE_NORMAL
- en: 'if result:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(cust_json)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: current_app.logger.info('insert customer record successful')
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 201)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: content = jsonify(message="insert customer record encountered a problem")
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: return make_response(content, 500)
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: '@current_app.post(''/category/add'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'def add_category():'
  prefs: []
  type: TYPE_NORMAL
- en: 'if <st c="13876">request.is_json</st>: <st c="13894">cat_json = request.json</st>
    cat = Category(<st c="13933">**cat_json</st>)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: repo = CategoryRepository(db_session)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: result = repo.insert(cat)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: abort(500)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '@current_app.post(''/nonpizza/add'')'
  prefs: []
  type: TYPE_NORMAL
- en: 'def add_nonpizza(): <st c="14782">content_type = request.headers.get(''Content-Type'')</st><st
    c="14832">if content_type == ''application/json''</st>: <st c="14873">nonpizza_json
    = request.json</st> nonpizza = NonPizza(**nonpizza_json)'
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: abort(500)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: '@current_app.route(''/login/add'', methods = [''POST''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'def add_login(): <st c="16038">if request.is_json:</st><st c="16057">login_json
    = loads(request.data)</st> login = Login(**login_json)'
  prefs: []
  type: TYPE_NORMAL
- en: … … … … … …
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'else:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: abort(500)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: '@current_app.route(''/login/list/all'', methods = [''GET''])'
  prefs: []
  type: TYPE_NORMAL
- en: 'def list_all_login():'
  prefs: []
  type: TYPE_NORMAL
- en: repo = LoginRepository(db_session)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: records = repo.select_all()
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: login_rec = [rec.to_json() for rec in records]
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: current_app.logger.info('retrieved a list of login successfully') <st c="17229">resp
    = Response(response = dumps(login_rec),</st> <st c="17273">status=200, mimetype="application/json"
    )</st> return resp
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: <st c="18662">from flask.json.provider import JSONProvider</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="18707">import json</st> class ImprovedJsonProvider(<st c="18747">JSONProvider</st>):'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, *args, **kwargs):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.options = kwargs
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: super().__init__(*args, **kwargs) <st c="18857">def default(self, o):</st>
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="18878">if isinstance(o, date):</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18902">return o.strftime("%m/%d/%Y")</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18932">elif isinstance(o, datetime):</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18962">return o.strftime("%m/%d/%Y, %H:%M:%S")</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19002">return super().default(self, o)</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19034">def dumps(self, obj, **kwargs):</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19066">kwargs.setdefault("default", self.default)</st><st c="19109">kwargs.setdefault("ensure_ascii",
    True)</st><st c="19149">kwargs.setdefault("sort_keys", True)</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="19186">return json.dumps(obj, **kwargs)</st> def loads(self, s: str
    | bytes, **kwargs): <st c="19263">s_dict:dict = json.loads(s.decode(''utf-8''))</st><st
    c="19306">s_sanitized = dict((k, v) for k, v in</st> <st c="19344">s_dict.items()
    if v)</st><st c="19365">s_str = json.dumps(s_sanitized)</st> return json.loads(<st
    c="19497">main.py</st> module and assign the <st c="19527">app</st>’s <st c="19534">json</st>
    attribute with the instance of the custom provider with the <st c="19599">app</st>
    object as its constructor parameter. The following is the setup of our custom
    <st c="19681">ImprovedJsonprovider</st> in the online pizza ordering prototype:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'from flask.json.provider import JSONProvider <st c="23169">import orjson</st>
    class OrjsonJsonProvider(JSONProvider):'
  prefs: []
  type: TYPE_NORMAL
- en: 'def __init__(self, *args, **kwargs):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: self.options = kwargs
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: super().__init__(*args, **kwargs)
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def dumps(self, obj, **kwargs): <st c="23348">return orjson.dumps(obj,</st>
    <st c="23372">option=orjson.OPT_NON_STR_KEYS).decode(''utf-8'')</st> def loads(self,
    s, **kwargs): <st c="23478">OrjsonJsonProvider</st> implements a custom JSON provider
    that uses <st c="23541">orjson</st>, one of the fastest JSON libraries that supports
    several types, such as <st c="23620">datetime</st>, <st c="23630">dataclass</st>,
    <st c="23641">numpy</st> types, and <st c="23658">Universally Unique</st> <st
    c="23677">Identifiers</st> (<st c="23690">UUID</st>).'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23697">Another essential add-on that can further improve our RESTful
    application’s validation and handling of incoming body requests and outgoing responses
    is</st> *<st c="23850">route filters</st>*<st c="23863">.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23864">Filtering API requests and responses</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="23901">In</st> [*<st c="23905">Chapter 1</st>*](B19383_01.xhtml#_idTextAnchor014)<st
    c="23914">, the CRUD</st> <st c="23925">operations of every view function became
    possible without an</st> <st c="23986">ORM because of a custom decorator,</st>
    `<st c="24021">@connect_db</st>`<st c="24032">. The decorator was responsible
    for database connectivity and closure for every execution of the view function.</st>
    <st c="24144">Like in any Python decorator, the</st> `<st c="24178">@connect_db</st>`
    <st c="24189">executes first before the view function starts receiving the requests
    from the client and executes after the view generates</st> <st c="24314">the response.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="24327">On the other hand,</st> [*<st c="24347">Chapter 2</st>*](B19383_02.xhtml#_idTextAnchor047)
    <st c="24356">introduced the use of</st> `<st c="24379">@before_request</st>`
    <st c="24394">and</st> `<st c="24399">@after_request</st>` <st c="24413">decorators
    in managing the application context of the view functions.</st> <st c="24484">Our
    applications used them to access the session</st> `<st c="24533">db</st>` <st
    c="24535">object for SQLAlchemy’s database connectivity, impose user authentication,
    and perform</st> <st c="24623">software logging.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="24640">Using decorators to manage the requests and responses for a view
    or API function is called route filtering.</st> <st c="24749">The following are
    implementations of Flask’s</st> `<st c="24794">before_request</st>` <st c="24808">and</st>
    `<st c="24813">after_request</st>` <st c="24826">methods used by the</st> `<st
    c="24847">ch03</st>` <st c="24851">application to filter the</st> <st c="24878">request–response
    handshake:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: <st c="25676">In this</st> <st c="25685">application,</st> `<st c="25698">before_request</st>`
    <st c="25712">checks if the incoming request body of</st> <st c="25752">HTTP POST,
    PUT, or PATCH transaction is not empty or</st> `<st c="25805">None</st>`<st c="25809">.
    Otherwise, it raises an</st> `<st c="25835">HTTP Status Code 500</st>` <st c="25855">with
    the error message</st> `<st c="25879">request body is empty</st>`<st c="25900">.
    It also performs logging for audit purposes.</st> <st c="25947">The</st> `<st
    c="25951">after_request</st>` <st c="25964">method, on the other hand, logs the
    basic details of the API for tracing purposes and checks the</st> `<st c="26062">access_control_allow_origin</st>`
    <st c="26089">response header.</st> <st c="26107">The mandatory parameter response
    allows us to access the response headers for modification if given by the software
    requirement.</st> <st c="26236">Also, this is the best spot to create cookies
    and execute the last database commits since this is the last moment of access
    to the response object before the</st> `<st c="26394">after_request</st>` <st
    c="26407">method sends it to</st> <st c="26427">the client.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="26438">Like FastAPI, the Flask framework has its version of creating
    middleware-like components, which can act as a global route filter.</st> <st c="26569">Our
    application has the following implementation, which serves as a middleware to
    the</st> <st c="26655">API endpoints:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: app.<st c="28188">before_request_funcs</st> = {
  prefs: []
  type: TYPE_NORMAL
- en: '''orders_client_bp'': [before_check_api_server],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''pizza_client_bp'': [before_log_pizza_bp]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: app.<st c="28308">after_request_funcs</st> = {
  prefs: []
  type: TYPE_NORMAL
- en: '''orders_client_bp'': [after_check_api_server],'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '''pizza_client_bp'': [after_log_pizza_bp]'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '@app.errorhandler(404)'
  prefs: []
  type: TYPE_NORMAL
- en: 'def not_found(e): <st c="28994">return jsonify(error=str(e)), 404</st> @app.errorhandler(400)'
  prefs: []
  type: TYPE_NORMAL
- en: 'def bad_request(e): <st c="29071">return jsonify(error=str(e)), 400</st> def
    server_error(e):'
  prefs: []
  type: TYPE_NORMAL
- en: print(e) <st c="29135">return jsonify(error=str(e)), 500</st> app.register_error_handler(500,
    server_error)
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'class DuplicateRecordException(HTTPException):'
  prefs: []
  type: TYPE_NORMAL
- en: status_code = 500
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'def __init__(self, message, status_code=None, payload=None):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: super().__init__()
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.message = message
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'if status_code is not None:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: self.status_code = status_code
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: 'self.payload = payload <st c="30292">DuplicateRecordException</st>, the following
    error handler will access its <st c="30362">to_dict()</st> instance method and
    convert it to JSON through <st c="30419">jsonify()</st>. It will also access the
    <st c="30454">status_code</st> for the response:'
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: '@app.errorhandler(Exception)'
  prefs: []
  type: TYPE_NORMAL
- en: 'def handle_built_exception(e):'
  prefs: []
  type: TYPE_NORMAL
- en: 'if isinstance(e, HTTPException):'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: return e <st c="31032">handle_built_exception()</st> handler will always return
    a JSON-formatted error message and raise the Werkzeug-specific exceptions for
    other custom handlers to manage. But for raised Python-specific exceptions, <st
    c="31238">handle_built_exception()</st> will directly render the JSON error message.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="31307">After completing the needed components in building our RESTful
    application, it is time to consume these API endpoints using a</st> <st c="31434">client
    application.</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="31453">Consuming API endpoints</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: <st c="31477">Our</st> `<st c="31482">ch03-client</st>` <st c="31493">project
    is</st> <st c="31505">a web-based Flask application that utilizes the API endpoints
    created in the</st> `<st c="31582">ch03</st>` <st c="31586">application.</st>
    <st c="31600">So far, the easiest way to consume a Flask API endpoint is to use
    the</st> `<st c="31670">requests</st>` <st c="31678">extension module.</st> <st
    c="31697">To install the</st> `<st c="31712">requests</st>` <st c="31720">library,
    run the</st> <st c="31738">following command:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: <st c="31777">This</st> `<st c="31783">requests</st>` <st c="31791">module has
    a</st> `<st c="31805">get()</st>` <st c="31810">helper method to send an HTTP
    GET request to a URL to retrieve some server resources.</st> <st c="31897">The
    following view function from the</st> `<st c="31934">ch03-client</st>` <st c="31945">project
    retrieves a list of customers and employees from the</st> `<st c="32007">ch03</st>`
    <st c="32011">application and passes them as context data to the</st> `<st c="32063">add_order.html</st>`
    <st c="32077">template:</st>
  prefs:
  - PREF_IND
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
