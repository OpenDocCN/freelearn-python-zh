- en: Chapter 4
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Introduction to Basic Algorithmic Concepts
  prefs: []
  type: TYPE_NORMAL
- en: 4.1 What is an Algorithm?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In technical terms, an algorithm^([[1]](footnotes.html#Endnote_1)) is a strictly
    defined finite sequence of well-defined statements (often called instructions
    or commands) that provides the solution to a problem or to a specific class of
    problems for any acceptable set of input values (if there are any inputs). In
    other words, an algorithm is a step-by-step procedure to solve a given problem.
    The term finite means that the algorithm must reach an end point and cannot run
    forever.
  prefs: []
  type: TYPE_NORMAL
- en: You can find algorithms everywhere in your real life, not just in computer science.
    For instance, the process of preparing toast or a cup of tea can be expressed
    as an algorithm. Certain steps, in a particular order, must be followed to achieve
    your goal.
  prefs: []
  type: TYPE_NORMAL
- en: 4.2 The Algorithm for Making a Cup of Tea
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The following is an algorithm for making a cup of tea.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Put a teabag in a cup.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Fill a kettle with water.
  prefs: []
  type: TYPE_NORMAL
- en: 3)Boil the water in the kettle.
  prefs: []
  type: TYPE_NORMAL
- en: 4)Pour some of the boiled water into the cup.
  prefs: []
  type: TYPE_NORMAL
- en: 5)Add milk to the cup.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Add sugar to the cup.
  prefs: []
  type: TYPE_NORMAL
- en: 7)Stir the tea.
  prefs: []
  type: TYPE_NORMAL
- en: 8)Drink the tea.
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, certain steps must be followed. These steps are in a specific
    order, even though some of the steps could be rearranged. For example, steps 5
    and 6 can be reversed. You could add the sugar first, and the milk afterwards.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Keep in mind that the order of some steps can probably be
    changed but you can''t move them far away from where they should be. For example,
    you can''t move step 3 (“Boil the water in the kettle.”) to the end of the algorithm,
    because you will end up drinking a cup of iced tea (and not a warm one) which
    is totally different from your initial goal!'
  prefs: []
  type: TYPE_NORMAL
- en: 4.3 Properties of an Algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In his book The Art of Computer Programming, Volume 1: Fundamental Algorithms,
    Donald E. Knuth^([[3]](footnotes.html#Endnote_3)) asserts that an algorithm must
    satisfy the following five properties:'
  prefs: []
  type: TYPE_NORMAL
- en: '►Input: The algorithm must have input values from a specified set.'
  prefs: []
  type: TYPE_NORMAL
- en: '►Output: The algorithm must produce the output values from a specified set
    of input values. The output values are the solution to a problem.'
  prefs: []
  type: TYPE_NORMAL
- en: '►Finiteness: For any input, the algorithm must terminate after a finite number
    of steps.'
  prefs: []
  type: TYPE_NORMAL
- en: '►Definiteness: All steps of the algorithm must be precisely defined. Every
    instruction within the algorithm should be clear and unambiguous. An algorithm
    must explicitly describe how the computation is to be carried out. The property
    of definiteness ensures that the agent executing the instructions will always
    know which command to perform next. Some examples of algorithms that do not satisfy
    the property of definiteness are:'
  prefs: []
  type: TYPE_NORMAL
- en: ►an algorithm that involves dividing a number by zero without any checks or
    safeguards. Dividing by zero is mathematically undefined, and an algorithm that
    doesn't handle this scenario can lead to unexpected results or errors in the computation.
  prefs: []
  type: TYPE_NORMAL
- en: ►an algorithm that attempts to calculate the square root of a negative number
    without accounting for complex numbers. The square root of a negative number is
    not a real number but a complex one. If the algorithm doesn't handle this properly,
    it might produce invalid or nonsensical results.
  prefs: []
  type: TYPE_NORMAL
- en: '►Effectiveness: It refers to the ability of an algorithm to consistently and
    accurately produce a meaningful and correct result for all possible valid inputs
    (including edge cases) within a finite amount of time. The steps of the algorithm
    must be basic enough so that, for example, someone using a pencil and paper could
    carry them out exactly.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.4 Okay About Algorithms. But What is a Computer Program Anyway?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A computer program is nothing more than an algorithm that is written in a language
    that computers can understand, like Python, Java, C++, or C#.
  prefs: []
  type: TYPE_NORMAL
- en: A computer program cannot actually make you a cup of tea or cook your dinner,
    although an algorithm can guide you through the steps to do it yourself. However,
    programs can (for example) be used to calculate the average value of a set of
    numbers, or to find the maximum value among them. Artificial intelligence programs
    can even play chess or solve logic puzzles.
  prefs: []
  type: TYPE_NORMAL
- en: 4.5 The Three Parties!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are always three parties involved in an algorithm—the one that writes
    the algorithm, the one that executes it, and the one that uses or enjoys it.
  prefs: []
  type: TYPE_NORMAL
- en: Let's take an algorithm for preparing a meal, for example. Someone writes the
    algorithm (the author of the recipe book), someone executes it (probably your
    mother, who prepares the meal following the steps from the recipe book), and someone
    uses it (probably you, who enjoys the meal).
  prefs: []
  type: TYPE_NORMAL
- en: Now consider a real computer program. Let's take a video game, for example.
    Someone writes the algorithm in a computer language (the programmer), something
    executes it (usually a laptop or a computer), and someone uses it or plays with
    it (the user).
  prefs: []
  type: TYPE_NORMAL
- en: Be cautious, as sometimes the terms “programmer” and “user” can be a source
    of ambiguity. When you write a computer program, you temporarily assume the role
    of “the programmer” but when you use your own program, you take on the role of
    “the user”.
  prefs: []
  type: TYPE_NORMAL
- en: 4.6 The Three Main Stages Involved in Creating an Algorithm
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'An algorithm should consist of three stages: data input, data processing, and
    results output. This order is specific and cannot be changed.'
  prefs: []
  type: TYPE_NORMAL
- en: Consider a computer program that finds the average value of three numbers. First,
    the program must prompt (ask) the user to enter the numbers (the data input stage).
    Next, the program must calculate the average value of the numbers (the data processing
    stage). Finally, the program must display the result on the computer's screen
    (the results output stage).
  prefs: []
  type: TYPE_NORMAL
- en: Let's take a look at these stages in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: First stage – Data input
  prefs: []
  type: TYPE_NORMAL
- en: 1)Prompt the user to enter a number.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Prompt the user to enter a second number.
  prefs: []
  type: TYPE_NORMAL
- en: 3)Prompt the user to enter a third number.
  prefs: []
  type: TYPE_NORMAL
- en: Second stage – Data processing
  prefs: []
  type: TYPE_NORMAL
- en: 4)Calculate the sum of the three numbers.
  prefs: []
  type: TYPE_NORMAL
- en: 5)Divide the sum by 3.
  prefs: []
  type: TYPE_NORMAL
- en: Third stage – Results output
  prefs: []
  type: TYPE_NORMAL
- en: 6)Display the result on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: In some rare situations, the input stage may be absent and the computer program
    may consist of only two stages. For example, consider a computer program that
    is written to calculate the following sum.
  prefs: []
  type: TYPE_NORMAL
- en: 1 + 2 + 3 + 4 + 5
  prefs: []
  type: TYPE_NORMAL
- en: In this example, the user must enter no values at all because the computer program
    knows exactly what to do. It must calculate the sum of the numbers 1 to 5 and
    then display the value of 15 on the user's screen. The two required stages (data
    processing and results output) are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: First stage – Data input
  prefs: []
  type: TYPE_NORMAL
- en: Nothing to do
  prefs: []
  type: TYPE_NORMAL
- en: Second stage – Data processing
  prefs: []
  type: TYPE_NORMAL
- en: 1)Calculate the sum of 1 + 2 + 3 + 4 + 5.
  prefs: []
  type: TYPE_NORMAL
- en: Third stage – Results output
  prefs: []
  type: TYPE_NORMAL
- en: 2)Display the result on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: However, what if you want to let the user decide the upper limit of that sum?
    What if you want to let the user decide whether to sum the numbers 1 to 5 or the
    numbers 1 to 20? In that case, the program must include an input stage at the
    beginning of the program to let the user enter that upper limit. Once the user
    enters that upper limit, the computer can calculate the result. The three required
    stages are shown here.
  prefs: []
  type: TYPE_NORMAL
- en: First stage – Data input
  prefs: []
  type: TYPE_NORMAL
- en: 1)Prompt the user to enter a number.
  prefs: []
  type: TYPE_NORMAL
- en: Second stage – Data processing
  prefs: []
  type: TYPE_NORMAL
- en: 2)Calculate the sum 1 + 2 + … (up to and including the upper limit the user
    entered).
  prefs: []
  type: TYPE_NORMAL
- en: Third stage – Results output
  prefs: []
  type: TYPE_NORMAL
- en: 3)Display the results on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: For example, if the user enters the number 6 as the upper limit, the computer
    would find the result of 1 + 2 + 3 + 4 + 5 + 6.
  prefs: []
  type: TYPE_NORMAL
- en: 4.7 Flowcharts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A flowchart is a graphical method of presenting an algorithm, usually on paper.
    It is the visual representation of the algorithm's flow of execution. In other
    words, it visually represents how the flow of execution proceeds from one statement
    to the next until the end of the algorithm is reached. The basic symbols that
    flowcharts use are shown in Table 4-1.
  prefs: []
  type: TYPE_NORMAL
- en: '| Flowchart Symbols | Description |'
  prefs: []
  type: TYPE_TB
- en: '| .![Image](img/chapter04-01.png) | Start/End: Represents the beginning or
    the end of an algorithm. The Start symbol has one exit and the End symbol has
    one entrance. |'
  prefs: []
  type: TYPE_TB
- en: '| .![Image](img/chapter04-02.png) | Arrow: Shows the flow of execution. An
    arrow coming from one symbol and ending at another symbol shows that control passes
    to the symbol that the arrow is pointing to. Arrows are always drawn as straight
    lines going up and down or sideways (never at an angle). |'
  prefs: []
  type: TYPE_TB
- en: '| .![Image](img/chapter04-03.png) | Process: Represents a process or mathematical
    (formula) calculation. The Process symbol has one entrance and one exit. |'
  prefs: []
  type: TYPE_TB
- en: '| .![Image](img/chapter04-04.png) | Data Input/Output: Represents the data
    input or the results output. In most cases, data comes from a keyboard and results
    are displayed on a screen. The Data input/output symbol has one entrance and one
    exit. |'
  prefs: []
  type: TYPE_TB
- en: '| .![Image](img/chapter04-05.png) | Decision: Indicates the point at which
    a decision is made. Based on a given condition (which can be true or false), the
    algorithm will follow either the right or the left path. The Decision symbol has
    one entrance and two (and always only two) exits. |'
  prefs: []
  type: TYPE_TB
- en: '| .![Image](img/chapter04-06.png) | Definite Loop: Shows the repetition of
    a statement or block of statements for a predefined number of times. The Definite
    Loop symbol has one entrance and one exit. |'
  prefs: []
  type: TYPE_TB
- en: '| .![Image](img/chapter04-07.png) | Off‑page connectors: Show continuation
    of a flowchart onto another page. They are used to connect segments on multiple
    pages when a flowchart gets too big to fit onto one sheet of paper. The outgoing
    off‑page connector symbol has one entrance and the incoming off‑page connector
    symbol has one exit. |'
  prefs: []
  type: TYPE_TB
- en: Table 4-1 Flowchart symbols and their functions
  prefs: []
  type: TYPE_NORMAL
- en: An example of a flowchart is shown in Figure 4–1\. The algorithm prompts the
    user to enter three numbers and then calculates their average value and displays
    it on the computer screen.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter04-08.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4–1 Flowchart for an algorithm that calculates and displays the average
    of three numbers
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)A flowchart always begins and ends with a Start/End symbol!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.7-1 Finding the Average Value of Three Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design an algorithm that calculates the average value of three numbers. Whenever
    the average value is below 10, a message “Fail!” must be displayed. Otherwise,
    if the average value is 10 or above, a message “Pass!” must be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this problem, two different messages must be displayed, but only one can
    appear each time the algorithm is executed; the wording of the message depends
    on the average value. The flowchart for the algorithm is presented here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter04-09.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/notice.jpg)To save paper, you can prompt the user to enter all three
    numbers using one single oblique parallelogram.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)A Decision symbol always has one entrance and two exit
    paths!'
  prefs: []
  type: TYPE_NORMAL
- en: Of course it is very soon for you to start creating your own algorithms. This
    particular exercise is quite simple and is presented in this chapter as an exception,
    just for demonstration purposes. You need to learn more before you start creating
    your own algorithms or even Python programs. Just be patient! In a few chapters
    the big moment will come!
  prefs: []
  type: TYPE_NORMAL
- en: 4.8 What are ”Reserved Words”?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In a computer language, a reserved word (or keyword) is a word that has a strictly
    predefined meaning—it is reserved for special use and cannot be used for any other
    purpose. For example, the words Start, End, Read, and Write in flowcharts have
    a predefined meaning. They are used to represent the beginning, the end, the data
    input, and the results output, respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved words exist in all high-level computer languages. In Python, there
    are many reserved words such as if, while, else, and for. However, each language
    has its own set of reserved words. For example, the reserved words else if in
    C++ are written as elif in Python.
  prefs: []
  type: TYPE_NORMAL
- en: 4.9 What is the Difference Between a Statement and a Command?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is a big discussion on the Internet about whether there is, or is not,
    any difference between a statement and a command. Some people prefer to use the
    term “statement”, and some others the term “command”. For a novice programmer,
    there is no difference; both are instructions to the computer!
  prefs: []
  type: TYPE_NORMAL
- en: 4.10 What is Structured Programming?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The structured programming concept was formalized in 1966 by Corrado Böhm^([[4]](footnotes.html#Endnote_4))
    and Giuseppe Jacopini^([[5]](footnotes.html#Endnote_5)). They demonstrated theoretical
    computer program design using sequences, decisions, and iterations.
  prefs: []
  type: TYPE_NORMAL
- en: 4.11 The Three Fundamental Control Structures
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are three fundamental control structures in structured programming.
  prefs: []
  type: TYPE_NORMAL
- en: '►Sequence Control Structure: This refers to the line-by-line execution, in
    which statements are executed sequentially, in the same order in which they appear
    in the program, without skipping any of them. It is also known as a sequential
    control structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '►Decision Control Structure: Depending on whether a condition is true or false,
    the decision control structure may skip the execution of an entire block of statements
    or even execute one block of statements instead of another. It is also known as
    a selection control structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '►Loop Control Structure: This is a control structure that allows the execution
    of a block of statements multiple times until a specified condition is met. It
    is also known as an iteration control structure or a repetition control structure.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Every computer program around the world is written in terms
    of only these three control structures!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 4.11-1 Understanding Control Structures Using Flowcharts
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Using flowcharts, give an example for each type of control structure.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Example of a Sequence Control Structure
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter04-10.png)
  prefs: []
  type: TYPE_NORMAL
- en: Example of a Decision Control Structure
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter04-11.png)'
  prefs: []
  type: TYPE_IMG
- en: Example of a Loop Control Structure
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter04-12.png)'
  prefs: []
  type: TYPE_IMG
- en: If you didn't quite understand the deeper meaning of these three control structures,
    don't worry, because upcoming chapters will analyze them very thoroughly. Patience
    is a virtue. All you have to do for now is wait!
  prefs: []
  type: TYPE_NORMAL
- en: 4.12 Your First Python Program
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Converting a flowchart to a computer language such as Python results in a Python
    program. A Python program is nothing more than a text file including Python statements.
    Python programs can even be written in your text editor application! Keep in mind,
    though, that using IDLE or Visual Studio Code to write Python programs is a much
    better solution due to all of their included features that can make your life
    easier.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)A Python source code is saved on your hard disk with the
    default .py file extension.'
  prefs: []
  type: TYPE_NORMAL
- en: Here is a very simple algorithm that displays three messages on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter04-13.png)
  prefs: []
  type: TYPE_NORMAL
- en: And here is the same algorithm written as a Python program.
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello World!")
  prefs: []
  type: TYPE_NORMAL
- en: print("Hallo Welt!")
  prefs: []
  type: TYPE_NORMAL
- en: print("The End")
  prefs: []
  type: TYPE_NORMAL
- en: 4.13 What is the Difference Between a Syntax Error, a Logic Error, and a Runtime
    Error?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'When high-level language code is written or executed, three types of errors
    may occur: syntax errors, logic errors, and runtime errors.'
  prefs: []
  type: TYPE_NORMAL
- en: A syntax error is a mistake such as a misspelled keyword, a missing punctuation
    character, or a missing closing bracket. The syntax errors are detected by the
    compiler or the interpreter. If you try to execute a Python program that contains
    a syntax error, you will get an error message on your screen and the program won't
    execute. You must correct any errors and then try to execute the program again.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Some IDEs, such as Visual Studio Code, detect these errors
    as you type and underline the erroneous statements with a wavy red line.'
  prefs: []
  type: TYPE_NORMAL
- en: A logic error is an error that prevents your program from doing what you expected
    it to do. With logic errors you get no warning at all. Your code compiles and
    runs but the result is not the expected one. Logic errors are hard to detect.
    You must review your program thoroughly to find out where your error is. For example,
    consider a Python program that prompts the user to enter three numbers, and then
    calculates and displays their average value. In this program, however, the programmer
    made a typographical error (a “typo”); one of their statements divides the sum
    of the three numbers by 5, and not by 3 as it should. Of course the Python program
    executes as normal, without any error messages, prompting the user to enter three
    numbers and displaying a result, but obviously not the correct one! It is the
    programmer's responsibility to find and correct the erroneously written Python
    statement, not the computer, the interpreter or the compiler! Computers are not
    that smart after all!
  prefs: []
  type: TYPE_NORMAL
- en: A runtime error is an error that occurs during the execution of a program. A
    runtime error can cause a program to end abruptly or even cause system shut-down.
    Such errors are the most difficult errors to detect. There is no way to be sure,
    before executing the program, whether this error is going to happen, or not. You
    can suspect that it may happen though! For example, running out of memory or a
    division by zero causes a runtime error.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)A logic error can be the cause of a runtime error!'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Logic errors and runtime errors are commonly referred to
    as "bugs", and are often found during the debugging process, before the software
    is released. When errors are found after a software has been released to the public,
    programmers often release patches, or small updates, to fix the errors.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.14 What “Debugging” Means
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Debugging is the process of finding and reducing the number of defects (bugs)
    in a computer program, in order to make it perform as expected.
  prefs: []
  type: TYPE_NORMAL
- en: There is a myth about the origin of the term “debugging”. In 1940, while Grace
    Hopper^([[6]](footnotes.html#Endnote_6)) was working on a Mark II Computer at
    Harvard University, her associates discovered a bug (a moth) stuck in a relay
    (an electrically operated switch). This bug was blocking the proper operation
    of the Mark II computer. So, while her associates where trying to remove the bug,
    Grace Hopper remarked that they were “debugging” the system!
  prefs: []
  type: TYPE_NORMAL
- en: 4.15 Commenting Your Code
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: When you write a small and easy program, anyone can understand how it works
    just by reading it line-by-line. However, long programs are difficult to understand,
    sometimes even by the same person who wrote them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comments are extra information that can be included in a program to make it
    easier to read and understand. Using comments, you can add explanations and other
    pieces of information, including:'
  prefs: []
  type: TYPE_NORMAL
- en: ►who wrote the program
  prefs: []
  type: TYPE_NORMAL
- en: ►when the program was created or last modified
  prefs: []
  type: TYPE_NORMAL
- en: ►what the program does
  prefs: []
  type: TYPE_NORMAL
- en: ►how the program works
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Comments are for human readers. Compilers and interpreters
    ignore any comments you may add to your programs.'
  prefs: []
  type: TYPE_NORMAL
- en: However, you should not over-comment. There is no need to explain every line
    of your program. Add comments only when a particular portion of your program is
    hard to follow.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, you can add comments using the hash character ( # ) as shown here.'
  prefs: []
  type: TYPE_NORMAL
- en: '#Created By Aristides S. Bouras'
  prefs: []
  type: TYPE_NORMAL
- en: '#Date created: 12/25/2003'
  prefs: []
  type: TYPE_NORMAL
- en: '#Date modified: 04/03/2008'
  prefs: []
  type: TYPE_NORMAL
- en: '#Description: This program displays some messages on the screen'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Zeus!")  #It displays a message on the screen
  prefs: []
  type: TYPE_NORMAL
- en: '#Display a second message on the screen'
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello Hera!")
  prefs: []
  type: TYPE_NORMAL
- en: '#This is a comment        print("The End")'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see in the preceding program, you can add comments above a statement
    or at the end of it, but not in front of it. Look at the last statement, which
    is supposed to display the message “The End”. This statement is never executed
    because it is considered part of the comment.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Comments are not visible to the user of a program while
    the program runs.'
  prefs: []
  type: TYPE_NORMAL
- en: 4.16 User-Friendly Programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: What is a user-friendly program? It's one the user considers a friend instead
    of an enemy, one that is easy for a novice user.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to write user-friendly programs you have to put yourself in the
    shoes of the user. Users want the computer to do their job their way, with a minimum
    of effort. Hidden menus, unclear labels and directions, and misleading error messages
    can all make a program user-unfriendly!
  prefs: []
  type: TYPE_NORMAL
- en: 'The law that best defines user-friendly designs is the Law of Least Astonishment:
    “The program should act in a way that least astonishes the user”. This law is
    also commonly referred to as the Principle of Least Astonishment (POLA).'
  prefs: []
  type: TYPE_NORMAL
- en: '4.17 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)A recipe for a meal is actually an algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Algorithms are used only in computer science.
  prefs: []
  type: TYPE_NORMAL
- en: 3)An algorithm can run forever.
  prefs: []
  type: TYPE_NORMAL
- en: 4)In an algorithm, you can relocate a step in any position you wish.
  prefs: []
  type: TYPE_NORMAL
- en: 5)An algorithm must produce the correct output values for at least one set of
    input values.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Computers can play chess.
  prefs: []
  type: TYPE_NORMAL
- en: 7)An algorithm can always become a computer program.
  prefs: []
  type: TYPE_NORMAL
- en: 8)Programming is the process of creating a computer program.
  prefs: []
  type: TYPE_NORMAL
- en: '9)There are always three parties involved in a computer program: the programmer,
    the computer, and the user.'
  prefs: []
  type: TYPE_NORMAL
- en: 10)The programmer and the user can sometimes be the same person.
  prefs: []
  type: TYPE_NORMAL
- en: 11)It is possible for a computer program to output no results.
  prefs: []
  type: TYPE_NORMAL
- en: 12)A flowchart is a computer program.
  prefs: []
  type: TYPE_NORMAL
- en: 13)A flowchart is composed of a set of geometric shapes.
  prefs: []
  type: TYPE_NORMAL
- en: 14)A flowchart is a method used to represent an algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: 15)To represent an algorithm, you can design a flowchart without using any Start/End
    symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 16)You can design a flowchart without using any Process symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 17)You can design a flowchart without using any Data input/output symbols.
  prefs: []
  type: TYPE_NORMAL
- en: 18)A flowchart must always include at least one Decision symbol.
  prefs: []
  type: TYPE_NORMAL
- en: 19)In a flowchart, a Decision symbol can have one, two, or three exit paths,
    depending on the given problem.
  prefs: []
  type: TYPE_NORMAL
- en: 20)Reserved words are all those words that have a strictly predefined meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 21)Structured programming includes structured design.
  prefs: []
  type: TYPE_NORMAL
- en: 22)Python is a structured computer language.
  prefs: []
  type: TYPE_NORMAL
- en: 23)The basic principle of structured programming is that it includes only four
    fundamental control structures.
  prefs: []
  type: TYPE_NORMAL
- en: 24)One statement, written ten times, is considered a loop control structure.
  prefs: []
  type: TYPE_NORMAL
- en: 25)Decision control structure refers to the line-by-line execution.
  prefs: []
  type: TYPE_NORMAL
- en: 26)A misspelled keyword is considered a logic error.
  prefs: []
  type: TYPE_NORMAL
- en: 27)A Python program can be executed even though it contains logic errors.
  prefs: []
  type: TYPE_NORMAL
- en: 28)If you leave an exclamation mark at the end of a Python statement, it is
    considered a syntax error.
  prefs: []
  type: TYPE_NORMAL
- en: 29)If you leave an exclamation mark at the end of a Python statement, it cannot
    prevent the whole Python program from being executed.
  prefs: []
  type: TYPE_NORMAL
- en: 30)One of the advantages of structured programming is that no errors are made
    while writing a computer program.
  prefs: []
  type: TYPE_NORMAL
- en: 31)Logic errors are caught during compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 32)Runtime errors are caught during compilation
  prefs: []
  type: TYPE_NORMAL
- en: 33)Syntax errors are the most difficult errors to detect.
  prefs: []
  type: TYPE_NORMAL
- en: 34)A program that calculates the area of a triangle but outputs the wrong results
    contains logic errors.
  prefs: []
  type: TYPE_NORMAL
- en: 35)When a program includes no output statements, it contains syntax errors.
  prefs: []
  type: TYPE_NORMAL
- en: 36)A program must always contain comments.
  prefs: []
  type: TYPE_NORMAL
- en: 37)If you add comments to a program, the computer can more easily understand
    it.
  prefs: []
  type: TYPE_NORMAL
- en: 38)You cannot add comments above a statement.
  prefs: []
  type: TYPE_NORMAL
- en: 39)Comments are not visible to the users of a program.
  prefs: []
  type: TYPE_NORMAL
- en: 40)A program is called user-friendly if it can be used easily by a novice user.
  prefs: []
  type: TYPE_NORMAL
- en: 41)The acronym POLA stands for “Principle of Least Amusement”.
  prefs: []
  type: TYPE_NORMAL
- en: '4.18 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)An algorithm is a strictly defined finite sequence of well-defined statements
    that provides the solution to
  prefs: []
  type: TYPE_NORMAL
- en: a)a problem.
  prefs: []
  type: TYPE_NORMAL
- en: b)a specific class of problems.
  prefs: []
  type: TYPE_NORMAL
- en: c)both of the above are correct.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Which of the following is not a property that an algorithm must satisfy?
  prefs: []
  type: TYPE_NORMAL
- en: a)effectiveness
  prefs: []
  type: TYPE_NORMAL
- en: b)fittingness
  prefs: []
  type: TYPE_NORMAL
- en: c)definiteness
  prefs: []
  type: TYPE_NORMAL
- en: d)input
  prefs: []
  type: TYPE_NORMAL
- en: 3)A computer program is
  prefs: []
  type: TYPE_NORMAL
- en: a)an algorithm.
  prefs: []
  type: TYPE_NORMAL
- en: b)a sequence of instructions.
  prefs: []
  type: TYPE_NORMAL
- en: c)both of the above
  prefs: []
  type: TYPE_NORMAL
- en: 4)When someone writes a recipe, they are the
  prefs: []
  type: TYPE_NORMAL
- en: a)“programmer”
  prefs: []
  type: TYPE_NORMAL
- en: b)“user”
  prefs: []
  type: TYPE_NORMAL
- en: c)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 5)Which of the following does not belong in the three main stages involved in
    creating an algorithm?
  prefs: []
  type: TYPE_NORMAL
- en: a)data protection
  prefs: []
  type: TYPE_NORMAL
- en: b)data input
  prefs: []
  type: TYPE_NORMAL
- en: c)results output
  prefs: []
  type: TYPE_NORMAL
- en: d)data processing
  prefs: []
  type: TYPE_NORMAL
- en: 6)A flowchart can be
  prefs: []
  type: TYPE_NORMAL
- en: a)presented on a piece of paper.
  prefs: []
  type: TYPE_NORMAL
- en: b)entered directly into a computer as is.
  prefs: []
  type: TYPE_NORMAL
- en: c)both of the above
  prefs: []
  type: TYPE_NORMAL
- en: 7)A rectangle in a flowchart represents
  prefs: []
  type: TYPE_NORMAL
- en: a)an input/output operation.
  prefs: []
  type: TYPE_NORMAL
- en: b)a processing operation.
  prefs: []
  type: TYPE_NORMAL
- en: c)a decision.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 8)Which of the following is/are control structures?
  prefs: []
  type: TYPE_NORMAL
- en: a)a decision
  prefs: []
  type: TYPE_NORMAL
- en: b)a sequence
  prefs: []
  type: TYPE_NORMAL
- en: c)a loop
  prefs: []
  type: TYPE_NORMAL
- en: d)All of the above are control structures.
  prefs: []
  type: TYPE_NORMAL
- en: 9)Which of the following Python statements contains a syntax error?
  prefs: []
  type: TYPE_NORMAL
- en: a)print(Hello Poseidon)
  prefs: []
  type: TYPE_NORMAL
- en: b)print("It's me! I contain a syntax error!!!")
  prefs: []
  type: TYPE_NORMAL
- en: c)print("Hello Athena")
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 10)Which of the following print statements is actually executed?
  prefs: []
  type: TYPE_NORMAL
- en: a)print("Hello Apollo)
  prefs: []
  type: TYPE_NORMAL
- en: b)#print("Hello Artemis")
  prefs: []
  type: TYPE_NORMAL
- en: c)#This will be executed  print("Hello Ares")
  prefs: []
  type: TYPE_NORMAL
- en: 'd)print("Hello Aphrodite") #This will be executed'
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
