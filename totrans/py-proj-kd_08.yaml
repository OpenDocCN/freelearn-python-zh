- en: Chapter 8. pygame
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第8章. pygame
- en: In the previous chapter, we got to use every skill we learned in the book to
    create a simple, two-player guessing game. In this chapter, you will learn about
    pygame modules and how they work to make game creation possible using Python.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们使用书中学到的每一个技能来创建一个简单的、两人猜谜游戏。在本章中，你将了解pygame模块以及它们是如何使用Python实现游戏创建的。
- en: What is pygame?
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 什么是pygame？
- en: As stated on the most current pygame website, [http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html),
    *pygame is a set of Python modules designed for writing games*. **pygame**, like
    Python, is free and open source, meaning that it can be used for free and shared
    with others. The developers of pygame have made sure that it is compatible with
    several different graphics display engines, so this means that the games developed
    using pygame could be played in a variety of environments. Installing pygame is
    a careful process, and you may need the help of your parents or another adult
    since there are a few steps. We will discuss the installation for Windows, Mac,
    and Linux in the next section of the chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 如最新的pygame网站[http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html)上所述，*pygame是一组用于编写游戏的Python模块*。**pygame**，就像Python一样，是免费和开源的，这意味着它可以免费使用并与他人共享。pygame的开发者确保它与几种不同的图形显示引擎兼容，这意味着使用pygame开发的游戏可以在各种环境中运行。安装pygame是一个细致的过程，你可能需要父母或其他成人的帮助，因为有一些步骤。我们将在本章的下一节讨论Windows、Mac、Linux和Raspberry
    Pi系统的pygame安装。
- en: 'pygame is quite popular, and the website is undergoing revisions at the time
    of writing this. Sometimes, you will see an older part of the site, while other
    times, you will see a new part of the site. New parts of the pygame website look
    like this:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: pygame非常受欢迎，在撰写本文时，网站正在进行修订。有时，你会看到网站的旧部分，而有时你会看到网站的新部分。pygame网站的新部分看起来像这样：
- en: '![What is pygame?](img/B04681_08_01.jpg)'
  id: totrans-5
  prefs: []
  type: TYPE_IMG
  zh: '![什么是pygame?](img/B04681_08_01.jpg)'
- en: 'Meanwhile, older parts of the pygame website have a green background, as follows:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 同时，pygame网站的老部分背景是绿色的，如下所示：
- en: '![What is pygame?](img/B04681_08_02.jpg)'
  id: totrans-7
  prefs: []
  type: TYPE_IMG
  zh: '![什么是pygame?](img/B04681_08_02.jpg)'
- en: You can always use the search bar on either part of the website to locate information
    that you need.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用网站上的搜索栏在任何部分查找你需要的信息。
- en: Once you've installed pygame, you will learn about the features of pygame that
    will be the most useful for our final project, in [Chapter 9](ch09.html "Chapter 9. Tiny
    Tennis"), *Tiny Tennis*. Since this is our first game using visuals, we will not
    use all of the features offered by pygame in our first project. We will use most
    of the basic features that are required to make an interactive, two-player game.
    However, once you feel ready, you are encouraged to look at the pygame website
    ([http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html)), the pygame
    documentation (available in your installation of pygame as well as on the website),
    and the more advanced pygame book published by Packt Publishing, *Instant Pygame
    for Python Game Development How-to*, *Ivan Idris*, to gain a better understanding
    of the more complex tools that pygame offers.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了pygame，你将了解pygame的一些特性，这些特性将对我们最终的项目最有用，在[第9章](ch09.html "第9章. 小型网球") *小型网球*
    中。由于这是我们第一个使用视觉的游戏，我们不会在我们的第一个项目中使用pygame提供的所有功能。我们将使用大多数制作交互式、两人游戏的必需的基本功能。然而，一旦你准备好了，我们鼓励你查看pygame网站([http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html))，pygame文档（可在pygame的安装中以及网站上找到），以及Packt
    Publishing出版的更高级的pygame书籍，*Instant Pygame for Python Game Development How-to*，*Ivan
    Idris*，以更好地理解pygame提供的更复杂工具。
- en: Installing pygame
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装pygame
- en: pygame is installed a little differently on each operating system. The next
    section of this chapter contains the instructions to install pygame on Windows,
    Mac, Linux, and Raspberry Pi systems. You can skip to the section that has instructions
    on how to install pygame on your operating system, and if you are not 100% sure
    of what you are doing, go ahead and get some help for this section. Remember that
    you will need an Internet connection to install pygame, and some parts of the
    installation may take time.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在每个操作系统上安装pygame的方式略有不同。本章的下一部分包含了在Windows、Mac、Linux和Raspberry Pi系统上安装pygame的说明。你可以跳到有关于如何在你的操作系统上安装pygame的说明部分，如果你不是100%确定你在做什么，请继续并寻求这一部分的帮助。记住，你需要一个互联网连接来安装pygame，安装的一些部分可能需要一些时间。
- en: Installing pygame – Windows
  id: totrans-12
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装pygame – Windows
- en: 'To install pygame on Windows, you will need to go to [http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html).
    If you do not know where the Windows version of pygame is, type `download` in
    the search bar and go to the **Downloads** page. You should see a screen with
    this information:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 要在Windows上安装pygame，您需要访问[http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html)。如果您不知道pygame的Windows版本在哪里，请在搜索栏中输入`download`并转到**下载**页面。您应该会看到一个包含以下信息的屏幕：
- en: '![Installing pygame – Windows](img/B04681_08_03.jpg)'
  id: totrans-14
  prefs: []
  type: TYPE_IMG
  zh: '![安装pygame – Windows](img/B04681_08_03.jpg)'
- en: 'At the bottom of that screenshot, you will find the instructions for most Windows
    computers. Follow these instructions:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在那个截图的底部，您将找到大多数Windows计算机的安装说明。遵循这些说明：
- en: Visit the pygame website.
  id: totrans-16
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 访问pygame网站。
- en: 'Download this version of pygame: `pygame-1.9.2a0.win32-py2.7.msi`.'
  id: totrans-17
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载此版本的pygame：`pygame-1.9.2a0.win32-py2.7.msi`。
- en: Go to your `Downloads` folder.
  id: totrans-18
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前往您的`下载`文件夹。
- en: Double-click on the `pygame-1.9.2a0.win32-py2.7.msi` file.
  id: totrans-19
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 双击`pygame-1.9.2a0.win32-py2.7.msi`文件。
- en: Choose **Run**:![Installing pygame – Windows](img/B04681_08_04.jpg)
  id: totrans-20
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择**运行**：![安装pygame – Windows](img/B04681_08_04.jpg)
- en: Choose install Python from registry option:![Installing pygame – Windows](img/B04681_08_05.jpg)
  id: totrans-21
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择从注册表中安装Python选项：![安装pygame – Windows](img/B04681_08_05.jpg)
- en: Allow the installation to complete.
  id: totrans-22
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 允许安装完成。
- en: 'Finally, everything should be in place. To test whether the installation worked,
    open your Python shell, and type this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，一切应该就绪。为了测试安装是否成功，打开您的Python shell，并输入以下内容：
- en: '[PRE0]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: If you have no error message, then your installation worked! Congratulations!
    If it did not work, review your steps, and don't be afraid to ask for some help.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果没有错误消息，那么您的安装成功了！恭喜！如果它没有成功，请检查您的步骤，并且不要害怕寻求一些帮助。
- en: Installing pygame – Mac
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装pygame – Mac
- en: 'We need to do some preparatory steps to make pygame work before we actually
    install it on Mac. pygame requires a few dependencies or other programs to work
    on a Mac:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们实际上在Mac上安装pygame之前，我们需要做一些准备工作来使pygame工作。pygame在Mac上运行需要一些依赖项或其他程序：
- en: Xcode (free, available on the App Store)
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Xcode (免费，可在App Store获取)
- en: XQuartz (free, open source)
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: XQuartz (免费，开源)
- en: Homebrew (free, open source)
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Homebrew (免费，开源)
- en: An Internet connection
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 互联网连接
- en: You may also want to get an adult to help you with the installation, especially
    if you are not 100% comfortable with the terminal. There are some brief instructions
    on the pygame Mac Wiki, located at [http://pygame.org/wiki/macintosh](http://pygame.org/wiki/macintosh).
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 您可能还需要让成年人帮助您安装，尤其是如果您对终端不是100%舒适的话。pygame Mac Wiki上有一些简要的说明，位于[http://pygame.org/wiki/macintosh](http://pygame.org/wiki/macintosh)。
- en: Installing Xcode
  id: totrans-33
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Xcode
- en: To start, open your terminal. Go to the directory where you first installed
    Python (refer to [Chapter 1](ch01.html "Chapter 1. Welcome! Let's Get Started"),
    *Welcome! Let's Get Started*, if you have forgotten how to get to your home directory).
    Once you are in your Python directory, you will install Xcode. Xcode is a developer
    tool that has a lot of power, far beyond what we will do in this book. If you
    are curious about Xcode, you can find the documentation at [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，打开您的终端。转到您首次安装Python的目录（如果您忘记了如何到达您的家目录，请参阅[第1章](ch01.html "第1章。欢迎！让我们开始吧")，*欢迎！让我们开始吧*）。一旦您进入Python目录，您将安装Xcode。Xcode是一个功能强大的开发者工具，其功能远超本书所涉及的内容。如果您对Xcode感兴趣，可以在[https://developer.apple.com/xcode/](https://developer.apple.com/xcode/)找到文档。
- en: 'For now, we will install Xcode by typing this into the terminal/command prompt:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 目前，我们将通过在终端/命令提示符中输入以下内容来安装Xcode：
- en: '[PRE1]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If your computer already has Xcode installed, you will get an error message
    that says it is already installed. If not, then Xcode will begin installing. Once
    Xcode is installed, you can move on to the next step. Be patient, as Xcode takes
    some time to install. To test whether the install worked, try entering the install
    command again. You will see that it is already installed:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的计算机已经安装了Xcode，您将收到一条错误消息，表明它已经安装。如果没有，那么Xcode将开始安装。一旦Xcode安装完成，您就可以继续下一步。请耐心等待，因为Xcode安装需要一些时间。为了测试安装是否成功，请再次尝试输入安装命令。您将看到它已经安装：
- en: '![Installing Xcode](img/B04681_08_06.jpg)'
  id: totrans-38
  prefs: []
  type: TYPE_IMG
  zh: '![安装Xcode](img/B04681_08_06.jpg)'
- en: Installing Homebrew
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 安装Homebrew
- en: The next step is installing a package management system called Homebrew. This
    sounds complicated, but all it means is that you are going to be able to get cool
    stuff much more easily. Python has something called `pip`, and this installs Python
    packages. We are going to install another system called `homebrew`. Homebrew is
    used to manage many packages of different kinds, and it can also be used to troubleshoot.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是安装一个名为 Homebrew 的包管理器。这听起来可能很复杂，但它的意思只是你将能够更容易地获取一些酷炫的东西。Python 有一个叫做 `pip`
    的东西，它可以安装 Python 软件包。我们将安装另一个系统，称为 `homebrew`。Homebrew 用于管理多种类型的软件包，也可以用于故障排除。
- en: 'Here is how to install homebrew using the `curl` command:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是如何使用 `curl` 命令安装 homebrew 的方法：
- en: '[PRE2]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The preceding code should be typed in one command. The text will wrap on its
    own if it needs more room in your terminal. Once you type that command, the `homebrew`
    installation will begin. Homebrew asks you questions and gives good installation
    suggestions along every step, so pay attention and it should work well. For more
    information, you can go to the homebrew website for instructions:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码应该在一条命令中输入。如果你的终端需要更多空间，文本会自动换行。一旦你输入该命令，`homebrew` 的安装就会开始。Homebrew 会询问你问题，并在每个步骤中提供良好的安装建议，所以请注意，它应该会顺利工作。更多信息，你可以访问
    homebrew 网站：
- en: '[PRE3]'
  id: totrans-44
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Installing programs with homebrew
  id: totrans-45
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 使用 homebrew 安装程序
- en: 'Once homebrew is installed, you can use it to install the rest of the dependencies
    needed to install pygame. We need to have access to Mercurial and Git. Both of
    these are version control systems, so every time code is changed, they keep track:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦 homebrew 安装完成，你可以使用它来安装安装 pygame 所需的其他依赖项。我们需要访问 Mercurial 和 Git。这两个都是版本控制系统，所以每次代码更改时，它们都会跟踪：
- en: '[PRE4]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: These packages will take a few minutes to install, and that's okay. Once they
    have completed installing, then you will finally be able to install pygame. The
    command to install pygame uses something called `sudo` at the beginning, and you
    will need to know your computer's administrative password to use it.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这些软件包的安装可能需要几分钟，这是正常的。一旦它们安装完成，你最终将能够安装 pygame。安装 pygame 的命令在开头使用了一个叫做 `sudo`
    的东西，你需要知道你的计算机的管理员密码才能使用它。
- en: Tip
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: If you do not know the password to your computer, find a person who does.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你不知道你的计算机密码，找一个知道的人。
- en: '[PRE5]'
  id: totrans-51
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Once this is installed, you should be ready to use pygame. Before we go any
    further, let''s test it out. Open a Python shell, and in the Python shell, type
    the following:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装完成，你应该准备好使用 pygame。在我们继续之前，让我们来测试一下。打开一个 Python 命令行界面，并在其中输入以下内容：
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'If you notice `import error: no module named pygame`, on your screen, then
    something has gone wrong with your installation. Check your installation, and
    don''t be afraid to ask for some help if you need to. If nothing happens when
    you hit *Enter*, then the installation of pygame is correct!'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '如果你注意到屏幕上出现 `import error: no module named pygame`，那么你的安装可能出现了问题。检查你的安装，如果你需要帮助，不要害怕寻求一些帮助。如果你按下
    *Enter* 后没有任何反应，那么 pygame 的安装是正确的！'
- en: Installing pygame – Ubuntu Linux
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Ubuntu Linux 上安装 pygame
- en: 'These installation instructions are for the newest version of Ubuntu Linux
    at the time of writing this, which is version 15.04\. First, you will want to
    install the `pip` package manager, if it is not installed already:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这些安装说明是为撰写本文时的最新版本的 Ubuntu Linux 定制的，即版本 15.04。首先，你可能想要安装 `pip` 包管理器，如果它还没有安装的话：
- en: '[PRE7]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You will notice that `sudo` is used again, and this means that you will need
    the administrative password for your computer. Next, we will use `apt-get` to
    install pygame:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到再次使用了 `sudo`，这意味着你需要你的计算机的管理员密码。接下来，我们将使用 `apt-get` 安装 pygame：
- en: '[PRE8]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, to test and check whether pygame is installed correctly, you will open
    a Python shell and type this command:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，为了测试和检查 pygame 是否正确安装，你将打开一个 Python 命令行界面并输入以下命令：
- en: '[PRE9]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: If there is an error message, it means that something about your installation
    is not correct. Reread the installation instructions and try again. Don't be afraid
    to ask for help if you need to. If you have an empty line following the import
    pygame, it means that everything is working and you are ready to move on to the
    next section!
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出现错误信息，这意味着你的安装中存在问题。重新阅读安装说明并再次尝试。如果你需要帮助，不要害怕寻求帮助。如果你在导入 pygame 后面有一个空行，这意味着一切正常，你可以继续到下一部分！
- en: Installing pygame – Raspberry Pi
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在 Raspberry Pi 上安装 pygame
- en: If you are working with Raspberry Pi and using one of the operating systems
    for the Pi, you are all set! Python and pygame are preinstalled on these systems.
    You can learn the basic pygame functions and modules by reading the rest of this
    chapter.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你正在使用树莓派并且使用Pi的操作系统之一，你一切就绪！Python和pygame在这些系统上预先安装。你可以通过阅读本章的其余部分来学习pygame的基本功能和模块。
- en: pygame
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pygame
- en: 'To test the pygame functions, open your text editor, create a file called `sample.py`,
    and save this file in your work folder. Once you have created this file, you are
    ready to start learning pygame. To use pygame, we will import the pygame module
    in the first line of our `sample.py` file:'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试pygame函数，打开你的文本编辑器，创建一个名为`sample.py`的文件，并将此文件保存在你的工作文件夹中。一旦创建了此文件，你就可以开始学习pygame。为了使用pygame，我们在`sample.py`文件的第一个行导入pygame模块：
- en: '[PRE10]'
  id: totrans-67
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Initializing pygame
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 初始化pygame
- en: 'Next, we need to take a look at the methods that we need in order to start
    our instance of pygame. To start pygame, we need to initialize an instance of
    all the pygame modules. We do this by calling the `init()` function:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要查看我们需要的方法来启动pygame的实例。为了启动pygame，我们需要初始化所有pygame模块的实例。我们通过调用`init()`函数来完成这个操作：
- en: '[PRE11]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'A pygame game loop is the same as the game loops that we used in previous projects.
    In this chapter, it will be a `while` loop that uses `while True` in order to
    indicate that the game loop should repeat itself over and over again until it
    is stopped:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 一个pygame游戏循环与我们在以前的项目中使用过的游戏循环相同。在本章中，它将是一个使用`while True`的`while`循环，以表示游戏循环应该反复执行，直到停止：
- en: '![Initializing pygame](img/B04681_08_07.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![初始化pygame](img/B04681_08_07.jpg)'
- en: Setting up the game screen – size
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置游戏屏幕大小
- en: Once we have pygame set up and initialized, we will want to know how to make
    a basic background screen. First, you will learn how to set the size of our screen.
    Then, you will learn to set the background color. pygame has modules to do both,
    as well as more advanced things, with the background.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了pygame并初始化，我们就会想知道如何创建一个基本的背景屏幕。首先，你将学习如何设置屏幕的大小。然后，你将学习如何设置背景颜色。pygame有模块可以完成这两项任务，以及更多高级的背景设置。
- en: 'For the tasks in this section, we will use the `pygame.display` and `pygame.Surface`
    modules. Our first task is to set the display size. For this task, we will create
    a `screen_width` and `screen_height` variable, and use the `pygame.display.set_mode()`
    function. Write these three lines of code under `pygame.init()`:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节的任务中，我们将使用`pygame.display`和`pygame.Surface`模块。我们的第一个任务是设置显示大小。为此任务，我们将创建一个`screen_width`和`screen_height`变量，并使用`pygame.display.set_mode()`函数。在`pygame.init()`下编写这三行代码：
- en: '[PRE12]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This is the most basic way to set a display and pygame will be able to choose
    the number of colors that are best for our system if we just use this basic setup.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 这是最基本的设置显示的方式，如果我们只使用这种基本设置，pygame将能够选择最适合我们系统的颜色数量。
- en: Note
  id: totrans-78
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Explore advanced background setting options at [https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode](https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 在[https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode](https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode)探索高级背景设置选项。
- en: 'Compare your code with the code in the screenshot:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 将你的代码与截图中的代码进行比较：
- en: '![Setting up the game screen – size](img/B04681_08_08.jpg)'
  id: totrans-81
  prefs: []
  type: TYPE_IMG
  zh: '![设置游戏屏幕大小](img/B04681_08_08.jpg)'
- en: Setting up the game screen – color
  id: totrans-82
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置游戏屏幕颜色
- en: First, we will create code so we can use colors throughout our game. In computer
    programming, colors are represented by numbers. Every color is made up of three
    numbers. Each number represents the saturation of red, green, and blue, in that
    order. You can use numbers between `0` and `255`. When all numbers are `0`, `game_screen`
    will be black. When all the choices are `255` `(255, 255, 255)`, `game_screen`
    will be white, `(255, 0, 0)` for red, `(0, 255, 0)` for green, and `(0, 0, 255)`
    for blue.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，我们将创建代码，这样我们就可以在游戏中使用颜色。在计算机编程中，颜色由数字表示。每种颜色由三个数字组成。每个数字代表红色、绿色和蓝色的饱和度，顺序如下。你可以使用介于`0`和`255`之间的数字。当所有数字都是`0`时，`game_screen`将是黑色。当所有选择都是`255`
    `(255, 255, 255)`时，`game_screen`将是白色，`(255, 0, 0)`代表红色，`(0, 255, 0)`代表绿色，`(0,
    0, 255)`代表蓝色。
- en: 'Rather than using numbers repeatedly in our code, we will make a global variable
    for each color and use the name of the color instead. Let''s add a list of global
    variables to our code, starting from line five of our `sample.py` file:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会在我们的代码中反复使用数字，而是为每种颜色创建一个全局变量，并使用颜色的名称来代替。让我们从`sample.py`文件的第五行开始添加一个全局变量的列表：
- en: '[PRE13]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'For our next task, we will set our game surface color. In order to set the
    color, we use the `fill()` function. There are a few ways in which we can set
    the color of the background. We will make the `game_screen = pygame.display.set_mode((screen_width,
    screen_height))` variable. Then, we will use the variable with the `fill()` function
    to set the screen color. Add the `game_screen` variable to the code in line 14
    of the `sample.py` file:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的下一个任务，我们将设置游戏表面的颜色。为了设置颜色，我们使用`fill()`函数。我们可以通过几种方式设置背景颜色。我们将创建`game_screen
    = pygame.display.set_mode((screen_width, screen_height))`变量。然后，我们将使用带有`fill()`函数的变量来设置屏幕颜色。将`game_screen`变量添加到`sample.py`文件的第14行代码中：
- en: '[PRE14]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Then, add the code to fill the screen color in line 15:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，在第15行添加填充屏幕颜色的代码：
- en: '[PRE15]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: '![Setting up the game screen – color](img/B04681_08_09.jpg)'
  id: totrans-90
  prefs: []
  type: TYPE_IMG
  zh: '![设置游戏屏幕 – 颜色](img/B04681_08_09.jpg)'
- en: Making stationary objects
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作静止对象
- en: Now you will learn how to set stationary (still) items on the canvas. This is
    often called *drawing* the objects. To know where to put the objects, we need
    to know about grids and coordinates. If you have used grids such as an *x* axis
    and a *y* axis in math class, it will be helpful as we will use the same. We will
    use the *x* and *y* coordinates to set the location of each object on our grid.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你将学习如何在画布上设置静止（静止）的物品。这通常被称为*绘制*对象。为了知道放置对象的位置，我们需要了解网格和坐标。如果你在数学课上使用过类似*x*轴和*y*轴的网格，这将很有帮助，因为我们也会使用相同的。我们将使用*x*和*y*坐标来设置每个对象在网格上的位置。
- en: In math class, the `(0,0)` coordinates are usually at the center of the grid.
    In pygame, the `(0,0)` coordinates are at the top-left hand corner of the screen.
    As you move from left to right along the *x* axis, the numbers become larger.
    So, for our screen that is `(400, 600)`, our *x* axis starts at `0` on the left
    and goes all the way up to `400`, which is our maximum screen width.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在数学课上，`(0,0)`坐标通常位于网格中心。在pygame中，`(0,0)`坐标位于屏幕的左上角。随着你沿着*x*轴从左到右移动，数字会变大。所以，对于我们的屏幕`(400,
    600)`，我们的*x*轴从左边的`0`开始，一直延伸到`400`，这是我们的最大屏幕宽度。
- en: As you move from the top-left of the screen to the bottom-left of the screen
    along the *y* axis, the numbers increase. So, our *y* axis starts at `0` on the
    top, and as we go to the bottom of our screen, it goes to `600`, which is our
    maximum screen height.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 当你沿着*y*轴从屏幕的左上角移动到底左角时，数字会增加。所以，我们的*y*轴从顶部的`0`开始，当我们到达屏幕底部时，它达到`600`，这是我们的最大屏幕高度。
- en: '![Making stationary objects](img/B04681_08_10.jpg)'
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![制作静止对象](img/B04681_08_10.jpg)'
- en: 'We need to know this to understand where objects will go when we draw them
    on the screen. In order to draw a circle in the center of the screen, for example,
    the center of the circle would need to fall at `(200, 300)`. The code to draw
    this circle would be as follows:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要了解这一点，以便了解我们在屏幕上绘制对象时它们将去哪里。例如，为了在屏幕中心绘制一个圆圈，圆心的位置需要落在`(200, 300)`。绘制这个圆圈的代码如下：
- en: '[PRE16]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You can see that there are many arguments that we need to define; let''s have
    a look at each:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们需要定义许多参数；让我们逐一查看：
- en: '`Surface` would be `game_screen`, which identifies where to draw the circle.'
  id: totrans-99
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Surface`将是`game_screen`，它标识了绘制圆圈的位置。'
- en: For `color`, we can use one of the global variables that we made for each color.
    In this case, we can use green.
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于`color`，我们可以使用我们为每种颜色创建的全球变量之一。在这种情况下，我们可以使用绿色。
- en: The `pos` argument means the position where the center of the circle will be
    located. Since it is (*x*, *y*), it will be two numbers in parentheses.
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pos`参数表示圆心所在的位置。由于它是(*x*, *y*)，所以它将是括号中的两个数字。'
- en: The `radius` argument tells the computer the distance between the center and
    the edge of the circle and it is used to determine the size.
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`radius`参数告诉计算机圆心和边缘之间的距离，并用于确定大小。'
- en: 'Now that you know what each argument does, let''s add a circle in line 18 of
    the `sample.py` file:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道每个参数的作用，让我们在`sample.py`文件的第18行添加一个圆圈：
- en: '[PRE17]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: So, our preceding code will draw a red circle in the center of the main screen,
    which is 40 pixels wide (20 pixels from the center of the circle to the outside),
    with a border, which is 2 pixels wide. Then, the screen will update to show the
    circle.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我们前面的代码将在主屏幕中心绘制一个红色的圆圈，直径为40像素（从圆心到边缘的20像素），带有2像素宽的边框。然后，屏幕将更新以显示圆圈。
- en: 'We can draw a great number of shapes and objects using pygame, which is very
    suitable for making games of all kinds. We can draw rectangles, polygons, circles,
    and ellipses, as well as line segments of varying thicknesses and colors. The
    following is a screenshot of a simple circle drawn from the code we wrote. You
    will be able to run it as soon as we write the `while` loop:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用pygame绘制大量形状和对象，非常适合制作各种游戏。我们可以绘制矩形、多边形、圆形和椭圆形，以及不同粗细和颜色的线段。以下是从我们编写的代码中绘制的一个简单圆的截图。一旦我们编写了`while`循环，你就可以运行它了：
- en: '![Making stationary objects](img/B04681_08_11.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![制作静止对象](img/B04681_08_11.jpg)'
- en: while loop – viewing the screen
  id: totrans-108
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: while循环 – 查看屏幕
- en: 'It would be great if we could see the shapes that we are drawing, so let''s
    add some code that allows us to view our screen. We will make a `while` loop,
    and place all of the actions, such as drawing and making the screen, inside of
    the `while` loop. First, take a look at the screenshot of the `while` loop so
    that you can see what the finished product looks like:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们能看到我们正在绘制的形状，那就太好了，所以让我们添加一些代码，让我们能够查看我们的屏幕。我们将创建一个`while`循环，并将所有动作，如绘制和制作屏幕，都放在`while`循环中。首先，看一下`while`循环的截图，这样你就可以看到最终产品的样子：
- en: '![while loop – viewing the screen](img/B04681_08_12.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![while循环 – 查看屏幕](img/B04681_08_12.jpg)'
- en: 'You will notice that we have created a `while True` loop in line 17\. This
    uses the `True` Boolean to keep all of the actions going while the loop is running.
    Add the `while` loop to line 17 of the `sample.py` file:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 你会注意到我们在第17行创建了一个`while True`循环。这使用`True`布尔值在循环运行时保持所有动作。将`while`循环添加到`sample.py`文件的第17行：
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Beneath the `while` loop, you have already written the code to draw the circle.
    Indent it four spaces. On line 19, we will add the `pygame.display.update()` function:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 在`while`循环下面，你已经编写了绘制圆的代码。将其缩进四个空格。在第19行，我们将添加`pygame.display.update()`函数：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Now that the `while` loop is written, you should be able to run your code and
    see your first visual screen! To test your code, open your terminal/command prompt,
    and then run your code with the following command:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经编写了`while`循环，你应该能够运行你的代码并看到你的第一个视觉屏幕！为了测试你的代码，打开你的终端/命令提示符，然后使用以下命令运行你的代码：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Making more shapes
  id: totrans-117
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 制作更多形状
- en: Now that you know how to draw a circle, you are prepared to make other shapes.
    We will review the code for some basic shapes. You can add the code for different
    shapes to your `while loop` and make some great Python art to share with others.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何绘制圆，你就可以准备制作其他形状了。我们将回顾一些基本形状的代码。你可以在`while loop`中添加不同形状的代码，并制作一些可以与他人分享的优秀的Python艺术作品。
- en: Rectangle
  id: totrans-119
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 矩形
- en: 'To draw a rectangle, the basic function is `pygame.draw.rect(Surface, color
    (x, y, width, height))`. The `Surface` argument is `game_screen`; the color can
    be set to anything you like. The *x* and *y* variables will determine the placement
    of the top-left corner of the rectangle. The width and height determine the size
    of the rectangle in pixels. To add a rectangle to your code, copy this line into
    your `sample.py` file on line 18:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 要绘制矩形，基本函数是`pygame.draw.rect(Surface, color, (x, y, width, height))`。`Surface`参数是`game_screen`；颜色可以设置为任何你喜欢的。`x`和`y`变量将决定矩形的左上角的位置。宽度和高度决定了矩形的像素大小。要将矩形添加到你的代码中，将此行复制到你的`sample.py`文件的第18行：
- en: '[PRE21]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Place the code *before* the `pygame.display.update()` code. The `pygame.display.update()`
    function should be the last line of code in your file for this exercise.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 将代码放在`pygame.display.update()`代码之前。在这个练习中，`pygame.display.update()`函数应该是你文件中的最后一行代码。
- en: Ellipse
  id: totrans-123
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
  zh: 椭圆
- en: 'We can draw an ellipse by using the `pygame.draw.ellipse(Surface, color, (x,
    y, width, height))` function. You will notice that the `ellipse` function accepts
    the same arguments as the `rectangle` function, except the ellipse will draw a
    circle within the rectangle instead of filling up the whole rectangle. If you
    want to add an ellipse to your code, copy the following line into line 19:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用`pygame.draw.ellipse(Surface, color, (x, y, width, height))`函数绘制椭圆。你会注意到，`ellipse`函数接受与`rectangle`函数相同的参数，除了椭圆将在矩形内绘制一个圆而不是填充整个矩形。如果你想在你代码中添加一个椭圆，将以下行复制到第19行：
- en: '[PRE22]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Save and try running your code to see the red circle, blue rectangle, and white
    ellipse in the black background:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 保存并尝试运行你的代码，以查看黑色背景下的红色圆圈、蓝色矩形和白色椭圆：
- en: '[PRE23]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'If you have written your code without error, you should expect to see something
    like this:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你没有错误地编写代码，你应该期望看到类似这样的东西：
- en: '![Ellipse](img/B04681_08_13.jpg)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![椭圆](img/B04681_08_13.jpg)'
- en: Experimenting with shapes
  id: totrans-130
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 尝试不同的形状
- en: 'Now that you know how to make a circle, rectangle, and ellipse, you can start
    experimenting with each of the arguments. Changing the radius, width, or height
    of a shape will change the size. Changing the *x* axis, *y* axis, or both will
    change the location of the shape on the screen. Here are some experiments to try:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在你已经知道如何制作圆、矩形和椭圆，你可以开始尝试每个参数。改变形状的半径、宽度或高度会改变大小。改变 *x* 轴、*y* 轴或两者都会改变形状在屏幕上的位置。以下是一些实验尝试：
- en: Change the radius of the circle
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变圆的半径
- en: Change the *x* and *y* coordinates of each shape
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变每个形状的 *x* 和 *y* 坐标
- en: Change the width and height of the rectangle and ellipse
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变矩形和椭圆的宽度和高度
- en: Change the color of each shape
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变每个形状的颜色
- en: More advanced shapes
  id: totrans-136
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 更高级的形状
- en: There are some more advanced shapes that you can create with pygame, including
    polygons with as many sides as you like. You can explore the different functions
    in the `pygame.draw` module by visiting the pygame docs.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 pygame 创建一些更高级的形状，包括你喜欢的任意多边形的正多边形。你可以通过访问 pygame 文档来探索 `pygame.draw`
    模块中的不同函数。
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: To know more about shapes in pygame, visit [https://www.pygame.org/docs/ref/draw.html](https://www.pygame.org/docs/ref/draw.html).
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于 pygame 中形状的信息，请访问 [https://www.pygame.org/docs/ref/draw.html](https://www.pygame.org/docs/ref/draw.html)。
- en: Making moving objects
  id: totrans-140
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 制作移动对象
- en: 'Now, video games worth playing have moving objects. Moving objects have a lot
    more problems to solve than stationary objects. Here are some questions to ask
    about moving objects:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，值得玩的游戏都有移动的对象。移动对象比静止对象有更多的问题需要解决。以下是关于移动对象的一些问题：
- en: Where do you want the object to originate on the screen?
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 你想在屏幕上的哪个位置创建对象？
- en: How does the object *move*?
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象是如何移动的？
- en: How does the object know how fast to move?
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象是如何知道移动速度的？
- en: How does the object respond when it hits another object (collides)?
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当对象撞击另一个对象（碰撞）时，它如何响应？
- en: How does the object respond when it hits the edge of the screen?
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当对象撞击屏幕边缘时，它如何响应？
- en: How does the object know when to stop moving?
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象是如何知道何时停止移动的？
- en: We create a moving object the same way that we create a stationary one—draw
    it on the screen.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建移动对象的方式与创建静止对象的方式相同——在屏幕上绘制它。
- en: Moving objects with the keyboard
  id: totrans-149
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用键盘移动对象
- en: 'Let''s suppose that we want to move our red circle around the screen. Something
    we need to consider is that the objects do not actually move. Rather, the objects
    appear to move. This is how you get an object to move:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 假设我们想要将我们的红色圆圈在屏幕周围移动。我们需要考虑的是，对象实际上并没有移动。相反，对象看起来在移动。这就是如何使对象移动的方法：
- en: Draw an object
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 绘制一个对象
- en: Get the user's input from pressed keys
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 从按下的键中获取用户的输入
- en: Redraw the object based on user actions using `pygame.display.update()`
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pygame.display.update()` 根据用户操作重新绘制对象
- en: 'The `pygame.key` module contains methods to work with the keyboard. During
    the game loop, we need to know whether the user is pressing a key to move the
    blue rectangle. To figure out whether the user is pressing a key to move the rectangle,
    we would use this line of code, for example:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '`pygame.key` 模块包含用于处理键盘的方法。在游戏循环期间，我们需要知道用户是否按下了键来移动蓝色矩形。为了确定用户是否按下了键来移动矩形，我们会使用如下代码行，例如：'
- en: '[PRE24]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Now, if we want to control how the computer takes the input when a user presses
    a key, we can use this line of code:'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，如果我们想要控制当用户按下键时计算机如何接收输入，我们可以使用如下代码行：
- en: '[PRE25]'
  id: totrans-157
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: This line tells the computer what to do when someone holds the key or presses
    it repeatedly, which happens a lot in games. We would use these key functions
    to set up some if/else logic about how our blue rectangles move when certain keys
    are pressed. You will see this logic in the next chapter.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这行代码告诉计算机当有人按住键或重复按下键时（这在游戏中经常发生）应该做什么。我们会使用这些键函数来设置一些 if/else 逻辑，关于当按下某些键时我们的蓝色矩形如何移动。你将在下一章中看到这个逻辑。
- en: Now, there are a lot of keys on the keyboard. Before going on to the next chapter,
    it is a good idea to review the documentation for pygame and learn how to select
    your keys. For example, if you want to use the down arrow key, you would use `[pygame.K_DOWN]`
    to identify that key, and then use other code to take a look at what happens if
    the down key is being pressed.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，键盘上有许多键。在进入下一章之前，回顾 pygame 的文档并学习如何选择你的键是一个好主意。例如，如果你想使用向下箭头键，你会使用 `[pygame.K_DOWN]`
    来标识该键，然后使用其他代码来查看当按下向下键时会发生什么。
- en: Note
  id: totrans-160
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The documentation for keys can be found at
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 键的文档可以在以下位置找到
- en: '[https://www.pygame.org/docs/ref/key.html](https://www.pygame.org/docs/ref/key.html).'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: '[https://www.pygame.org/docs/ref/key.html](https://www.pygame.org/docs/ref/key.html).'
- en: A quick task for you
  id: totrans-163
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 给你一个快速的任务
- en: Q1\. How do you start pygame?
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: Q1\. 如何启动pygame？
- en: '`pygame.display.set_mode()`'
  id: totrans-165
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygame.display.set_mode()`'
- en: '`pygame.init()`'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygame.init()`'
- en: '`pygame.exit()`'
  id: totrans-167
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygame.exit()`'
- en: '`pygame.quit`'
  id: totrans-168
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygame.quit`'
- en: Q2\. How do objects move in pygame?
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: Q2\. 在pygame中物体是如何移动的？
- en: Objects move using speed
  id: totrans-170
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物体通过速度移动
- en: Objects move using gravity
  id: totrans-171
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物体通过重力移动
- en: Objects move using collision detection
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物体通过碰撞检测移动
- en: Objects only appear to move, but they are actually constantly redrawn.
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 物体看起来是在移动，但实际上它们是不断被重新绘制的。
- en: Q3\. How is an object redrawn using pygame?
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: Q3\. 在pygame中物体是如何被重新绘制的？
- en: '`pygame.rerender()`'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygame.rerender()`'
- en: '`pygame.display.object()`'
  id: totrans-176
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygame.display.object()`'
- en: '`pygame.display.update()`'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygame.display.update()`'
- en: '`pygame.rect()`'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`pygame.rect()`'
- en: Q4\. What is the shorthand used to identify keys in pygame?
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: Q4\. 在pygame中用来标识键的缩写是什么？
- en: pygame.K_keyname
  id: totrans-180
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pygame.K_keyname
- en: pygame.keyname
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pygame.keyname
- en: pygame.keys.K.name
  id: totrans-182
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pygame.keys.K.name
- en: pygame.key
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: pygame.key
- en: Summary
  id: totrans-184
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, you learned about the aspects of pygame that are needed to
    make an interactive game. You started with finding and installing the software
    on your operating system. Then, you learned to import and initialize pygame to
    interact with the computer. You set the characteristics of your game screen, including
    size and color. You added stationary objects to the game screen and learned some
    ways to make changes to these objects. You got an explanation of code for moving
    objects, which we will create in our final game.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了制作交互式游戏所需的pygame方面。你从在操作系统上查找和安装软件开始。然后，你学习了如何导入和初始化pygame以与计算机交互。你设置了游戏屏幕的特性，包括大小和颜色。你向游戏屏幕添加了静止的物体，并学习了如何更改这些物体的一些方法。你得到了移动物体的代码解释，这是我们将在最终游戏中创建的。
- en: In our next chapter, we will build a full-fledged game using all the skills
    that we have built throughout this book. It is recommended that you through the
    book again, and repeat any exercises that you do not fully understand. It is highly
    recommended that you visit the pygame documentation as well and read as much as
    you are able to understand. There are descriptions and examples of the methods
    used in this chapter that will help you in the next chapter. Are you ready to
    put everything together? Let's proceed to [Chapter 9](ch09.html "Chapter 9. Tiny
    Tennis"), *Tiny Tennis*.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们接下来的章节中，我们将使用本书中构建的所有技能来制作一个完整的游戏。建议你再次阅读本书，并重复任何你不完全理解的练习。强烈建议你访问pygame文档并尽可能多地阅读。本章中使用的描述和示例将有助于你在下一章中。你准备好把所有东西组合在一起了吗？让我们继续进入[第9章](ch09.html
    "第9章。迷你网球")，*迷你网球*。
