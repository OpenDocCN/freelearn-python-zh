- en: Chapter 8. pygame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we got to use every skill we learned in the book to
    create a simple, two-player guessing game. In this chapter, you will learn about
    pygame modules and how they work to make game creation possible using Python.
  prefs: []
  type: TYPE_NORMAL
- en: What is pygame?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As stated on the most current pygame website, [http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html),
    *pygame is a set of Python modules designed for writing games*. **pygame**, like
    Python, is free and open source, meaning that it can be used for free and shared
    with others. The developers of pygame have made sure that it is compatible with
    several different graphics display engines, so this means that the games developed
    using pygame could be played in a variety of environments. Installing pygame is
    a careful process, and you may need the help of your parents or another adult
    since there are a few steps. We will discuss the installation for Windows, Mac,
    and Linux in the next section of the chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'pygame is quite popular, and the website is undergoing revisions at the time
    of writing this. Sometimes, you will see an older part of the site, while other
    times, you will see a new part of the site. New parts of the pygame website look
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is pygame?](img/B04681_08_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Meanwhile, older parts of the pygame website have a green background, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![What is pygame?](img/B04681_08_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can always use the search bar on either part of the website to locate information
    that you need.
  prefs: []
  type: TYPE_NORMAL
- en: Once you've installed pygame, you will learn about the features of pygame that
    will be the most useful for our final project, in [Chapter 9](ch09.html "Chapter 9. Tiny
    Tennis"), *Tiny Tennis*. Since this is our first game using visuals, we will not
    use all of the features offered by pygame in our first project. We will use most
    of the basic features that are required to make an interactive, two-player game.
    However, once you feel ready, you are encouraged to look at the pygame website
    ([http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html)), the pygame
    documentation (available in your installation of pygame as well as on the website),
    and the more advanced pygame book published by Packt Publishing, *Instant Pygame
    for Python Game Development How-to*, *Ivan Idris*, to gain a better understanding
    of the more complex tools that pygame offers.
  prefs: []
  type: TYPE_NORMAL
- en: Installing pygame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: pygame is installed a little differently on each operating system. The next
    section of this chapter contains the instructions to install pygame on Windows,
    Mac, Linux, and Raspberry Pi systems. You can skip to the section that has instructions
    on how to install pygame on your operating system, and if you are not 100% sure
    of what you are doing, go ahead and get some help for this section. Remember that
    you will need an Internet connection to install pygame, and some parts of the
    installation may take time.
  prefs: []
  type: TYPE_NORMAL
- en: Installing pygame – Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To install pygame on Windows, you will need to go to [http://www.pygame.org/hifi.html](http://www.pygame.org/hifi.html).
    If you do not know where the Windows version of pygame is, type `download` in
    the search bar and go to the **Downloads** page. You should see a screen with
    this information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing pygame – Windows](img/B04681_08_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'At the bottom of that screenshot, you will find the instructions for most Windows
    computers. Follow these instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: Visit the pygame website.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Download this version of pygame: `pygame-1.9.2a0.win32-py2.7.msi`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to your `Downloads` folder.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Double-click on the `pygame-1.9.2a0.win32-py2.7.msi` file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose **Run**:![Installing pygame – Windows](img/B04681_08_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Choose install Python from registry option:![Installing pygame – Windows](img/B04681_08_05.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Allow the installation to complete.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, everything should be in place. To test whether the installation worked,
    open your Python shell, and type this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: If you have no error message, then your installation worked! Congratulations!
    If it did not work, review your steps, and don't be afraid to ask for some help.
  prefs: []
  type: TYPE_NORMAL
- en: Installing pygame – Mac
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to do some preparatory steps to make pygame work before we actually
    install it on Mac. pygame requires a few dependencies or other programs to work
    on a Mac:'
  prefs: []
  type: TYPE_NORMAL
- en: Xcode (free, available on the App Store)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: XQuartz (free, open source)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Homebrew (free, open source)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An Internet connection
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You may also want to get an adult to help you with the installation, especially
    if you are not 100% comfortable with the terminal. There are some brief instructions
    on the pygame Mac Wiki, located at [http://pygame.org/wiki/macintosh](http://pygame.org/wiki/macintosh).
  prefs: []
  type: TYPE_NORMAL
- en: Installing Xcode
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To start, open your terminal. Go to the directory where you first installed
    Python (refer to [Chapter 1](ch01.html "Chapter 1. Welcome! Let's Get Started"),
    *Welcome! Let's Get Started*, if you have forgotten how to get to your home directory).
    Once you are in your Python directory, you will install Xcode. Xcode is a developer
    tool that has a lot of power, far beyond what we will do in this book. If you
    are curious about Xcode, you can find the documentation at [https://developer.apple.com/xcode/](https://developer.apple.com/xcode/).
  prefs: []
  type: TYPE_NORMAL
- en: 'For now, we will install Xcode by typing this into the terminal/command prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If your computer already has Xcode installed, you will get an error message
    that says it is already installed. If not, then Xcode will begin installing. Once
    Xcode is installed, you can move on to the next step. Be patient, as Xcode takes
    some time to install. To test whether the install worked, try entering the install
    command again. You will see that it is already installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing Xcode](img/B04681_08_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Installing Homebrew
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The next step is installing a package management system called Homebrew. This
    sounds complicated, but all it means is that you are going to be able to get cool
    stuff much more easily. Python has something called `pip`, and this installs Python
    packages. We are going to install another system called `homebrew`. Homebrew is
    used to manage many packages of different kinds, and it can also be used to troubleshoot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how to install homebrew using the `curl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code should be typed in one command. The text will wrap on its
    own if it needs more room in your terminal. Once you type that command, the `homebrew`
    installation will begin. Homebrew asks you questions and gives good installation
    suggestions along every step, so pay attention and it should work well. For more
    information, you can go to the homebrew website for instructions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Installing programs with homebrew
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Once homebrew is installed, you can use it to install the rest of the dependencies
    needed to install pygame. We need to have access to Mercurial and Git. Both of
    these are version control systems, so every time code is changed, they keep track:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: These packages will take a few minutes to install, and that's okay. Once they
    have completed installing, then you will finally be able to install pygame. The
    command to install pygame uses something called `sudo` at the beginning, and you
    will need to know your computer's administrative password to use it.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: If you do not know the password to your computer, find a person who does.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Once this is installed, you should be ready to use pygame. Before we go any
    further, let''s test it out. Open a Python shell, and in the Python shell, type
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'If you notice `import error: no module named pygame`, on your screen, then
    something has gone wrong with your installation. Check your installation, and
    don''t be afraid to ask for some help if you need to. If nothing happens when
    you hit *Enter*, then the installation of pygame is correct!'
  prefs: []
  type: TYPE_NORMAL
- en: Installing pygame – Ubuntu Linux
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'These installation instructions are for the newest version of Ubuntu Linux
    at the time of writing this, which is version 15.04\. First, you will want to
    install the `pip` package manager, if it is not installed already:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'You will notice that `sudo` is used again, and this means that you will need
    the administrative password for your computer. Next, we will use `apt-get` to
    install pygame:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, to test and check whether pygame is installed correctly, you will open
    a Python shell and type this command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: If there is an error message, it means that something about your installation
    is not correct. Reread the installation instructions and try again. Don't be afraid
    to ask for help if you need to. If you have an empty line following the import
    pygame, it means that everything is working and you are ready to move on to the
    next section!
  prefs: []
  type: TYPE_NORMAL
- en: Installing pygame – Raspberry Pi
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you are working with Raspberry Pi and using one of the operating systems
    for the Pi, you are all set! Python and pygame are preinstalled on these systems.
    You can learn the basic pygame functions and modules by reading the rest of this
    chapter.
  prefs: []
  type: TYPE_NORMAL
- en: pygame
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To test the pygame functions, open your text editor, create a file called `sample.py`,
    and save this file in your work folder. Once you have created this file, you are
    ready to start learning pygame. To use pygame, we will import the pygame module
    in the first line of our `sample.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: Initializing pygame
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next, we need to take a look at the methods that we need in order to start
    our instance of pygame. To start pygame, we need to initialize an instance of
    all the pygame modules. We do this by calling the `init()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'A pygame game loop is the same as the game loops that we used in previous projects.
    In this chapter, it will be a `while` loop that uses `while True` in order to
    indicate that the game loop should repeat itself over and over again until it
    is stopped:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Initializing pygame](img/B04681_08_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the game screen – size
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Once we have pygame set up and initialized, we will want to know how to make
    a basic background screen. First, you will learn how to set the size of our screen.
    Then, you will learn to set the background color. pygame has modules to do both,
    as well as more advanced things, with the background.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the tasks in this section, we will use the `pygame.display` and `pygame.Surface`
    modules. Our first task is to set the display size. For this task, we will create
    a `screen_width` and `screen_height` variable, and use the `pygame.display.set_mode()`
    function. Write these three lines of code under `pygame.init()`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: This is the most basic way to set a display and pygame will be able to choose
    the number of colors that are best for our system if we just use this basic setup.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Explore advanced background setting options at [https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode](https://www.pygame.org/docs/ref/display.html#pygame.display.set_mode).
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare your code with the code in the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up the game screen – size](img/B04681_08_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Setting up the game screen – color
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: First, we will create code so we can use colors throughout our game. In computer
    programming, colors are represented by numbers. Every color is made up of three
    numbers. Each number represents the saturation of red, green, and blue, in that
    order. You can use numbers between `0` and `255`. When all numbers are `0`, `game_screen`
    will be black. When all the choices are `255` `(255, 255, 255)`, `game_screen`
    will be white, `(255, 0, 0)` for red, `(0, 255, 0)` for green, and `(0, 0, 255)`
    for blue.
  prefs: []
  type: TYPE_NORMAL
- en: 'Rather than using numbers repeatedly in our code, we will make a global variable
    for each color and use the name of the color instead. Let''s add a list of global
    variables to our code, starting from line five of our `sample.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'For our next task, we will set our game surface color. In order to set the
    color, we use the `fill()` function. There are a few ways in which we can set
    the color of the background. We will make the `game_screen = pygame.display.set_mode((screen_width,
    screen_height))` variable. Then, we will use the variable with the `fill()` function
    to set the screen color. Add the `game_screen` variable to the code in line 14
    of the `sample.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the code to fill the screen color in line 15:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: '![Setting up the game screen – color](img/B04681_08_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Making stationary objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now you will learn how to set stationary (still) items on the canvas. This is
    often called *drawing* the objects. To know where to put the objects, we need
    to know about grids and coordinates. If you have used grids such as an *x* axis
    and a *y* axis in math class, it will be helpful as we will use the same. We will
    use the *x* and *y* coordinates to set the location of each object on our grid.
  prefs: []
  type: TYPE_NORMAL
- en: In math class, the `(0,0)` coordinates are usually at the center of the grid.
    In pygame, the `(0,0)` coordinates are at the top-left hand corner of the screen.
    As you move from left to right along the *x* axis, the numbers become larger.
    So, for our screen that is `(400, 600)`, our *x* axis starts at `0` on the left
    and goes all the way up to `400`, which is our maximum screen width.
  prefs: []
  type: TYPE_NORMAL
- en: As you move from the top-left of the screen to the bottom-left of the screen
    along the *y* axis, the numbers increase. So, our *y* axis starts at `0` on the
    top, and as we go to the bottom of our screen, it goes to `600`, which is our
    maximum screen height.
  prefs: []
  type: TYPE_NORMAL
- en: '![Making stationary objects](img/B04681_08_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'We need to know this to understand where objects will go when we draw them
    on the screen. In order to draw a circle in the center of the screen, for example,
    the center of the circle would need to fall at `(200, 300)`. The code to draw
    this circle would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that there are many arguments that we need to define; let''s have
    a look at each:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Surface` would be `game_screen`, which identifies where to draw the circle.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For `color`, we can use one of the global variables that we made for each color.
    In this case, we can use green.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pos` argument means the position where the center of the circle will be
    located. Since it is (*x*, *y*), it will be two numbers in parentheses.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `radius` argument tells the computer the distance between the center and
    the edge of the circle and it is used to determine the size.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now that you know what each argument does, let''s add a circle in line 18 of
    the `sample.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: So, our preceding code will draw a red circle in the center of the main screen,
    which is 40 pixels wide (20 pixels from the center of the circle to the outside),
    with a border, which is 2 pixels wide. Then, the screen will update to show the
    circle.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can draw a great number of shapes and objects using pygame, which is very
    suitable for making games of all kinds. We can draw rectangles, polygons, circles,
    and ellipses, as well as line segments of varying thicknesses and colors. The
    following is a screenshot of a simple circle drawn from the code we wrote. You
    will be able to run it as soon as we write the `while` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Making stationary objects](img/B04681_08_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: while loop – viewing the screen
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'It would be great if we could see the shapes that we are drawing, so let''s
    add some code that allows us to view our screen. We will make a `while` loop,
    and place all of the actions, such as drawing and making the screen, inside of
    the `while` loop. First, take a look at the screenshot of the `while` loop so
    that you can see what the finished product looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![while loop – viewing the screen](img/B04681_08_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You will notice that we have created a `while True` loop in line 17\. This
    uses the `True` Boolean to keep all of the actions going while the loop is running.
    Add the `while` loop to line 17 of the `sample.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Beneath the `while` loop, you have already written the code to draw the circle.
    Indent it four spaces. On line 19, we will add the `pygame.display.update()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'Now that the `while` loop is written, you should be able to run your code and
    see your first visual screen! To test your code, open your terminal/command prompt,
    and then run your code with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Making more shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Now that you know how to draw a circle, you are prepared to make other shapes.
    We will review the code for some basic shapes. You can add the code for different
    shapes to your `while loop` and make some great Python art to share with others.
  prefs: []
  type: TYPE_NORMAL
- en: Rectangle
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'To draw a rectangle, the basic function is `pygame.draw.rect(Surface, color
    (x, y, width, height))`. The `Surface` argument is `game_screen`; the color can
    be set to anything you like. The *x* and *y* variables will determine the placement
    of the top-left corner of the rectangle. The width and height determine the size
    of the rectangle in pixels. To add a rectangle to your code, copy this line into
    your `sample.py` file on line 18:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Place the code *before* the `pygame.display.update()` code. The `pygame.display.update()`
    function should be the last line of code in your file for this exercise.
  prefs: []
  type: TYPE_NORMAL
- en: Ellipse
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'We can draw an ellipse by using the `pygame.draw.ellipse(Surface, color, (x,
    y, width, height))` function. You will notice that the `ellipse` function accepts
    the same arguments as the `rectangle` function, except the ellipse will draw a
    circle within the rectangle instead of filling up the whole rectangle. If you
    want to add an ellipse to your code, copy the following line into line 19:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Save and try running your code to see the red circle, blue rectangle, and white
    ellipse in the black background:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'If you have written your code without error, you should expect to see something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ellipse](img/B04681_08_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Experimenting with shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Now that you know how to make a circle, rectangle, and ellipse, you can start
    experimenting with each of the arguments. Changing the radius, width, or height
    of a shape will change the size. Changing the *x* axis, *y* axis, or both will
    change the location of the shape on the screen. Here are some experiments to try:'
  prefs: []
  type: TYPE_NORMAL
- en: Change the radius of the circle
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the *x* and *y* coordinates of each shape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the width and height of the rectangle and ellipse
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Change the color of each shape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: More advanced shapes
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are some more advanced shapes that you can create with pygame, including
    polygons with as many sides as you like. You can explore the different functions
    in the `pygame.draw` module by visiting the pygame docs.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To know more about shapes in pygame, visit [https://www.pygame.org/docs/ref/draw.html](https://www.pygame.org/docs/ref/draw.html).
  prefs: []
  type: TYPE_NORMAL
- en: Making moving objects
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Now, video games worth playing have moving objects. Moving objects have a lot
    more problems to solve than stationary objects. Here are some questions to ask
    about moving objects:'
  prefs: []
  type: TYPE_NORMAL
- en: Where do you want the object to originate on the screen?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the object *move*?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the object know how fast to move?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the object respond when it hits another object (collides)?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the object respond when it hits the edge of the screen?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How does the object know when to stop moving?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We create a moving object the same way that we create a stationary one—draw
    it on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Moving objects with the keyboard
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let''s suppose that we want to move our red circle around the screen. Something
    we need to consider is that the objects do not actually move. Rather, the objects
    appear to move. This is how you get an object to move:'
  prefs: []
  type: TYPE_NORMAL
- en: Draw an object
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Get the user's input from pressed keys
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Redraw the object based on user actions using `pygame.display.update()`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `pygame.key` module contains methods to work with the keyboard. During
    the game loop, we need to know whether the user is pressing a key to move the
    blue rectangle. To figure out whether the user is pressing a key to move the rectangle,
    we would use this line of code, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, if we want to control how the computer takes the input when a user presses
    a key, we can use this line of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: This line tells the computer what to do when someone holds the key or presses
    it repeatedly, which happens a lot in games. We would use these key functions
    to set up some if/else logic about how our blue rectangles move when certain keys
    are pressed. You will see this logic in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Now, there are a lot of keys on the keyboard. Before going on to the next chapter,
    it is a good idea to review the documentation for pygame and learn how to select
    your keys. For example, if you want to use the down arrow key, you would use `[pygame.K_DOWN]`
    to identify that key, and then use other code to take a look at what happens if
    the down key is being pressed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The documentation for keys can be found at
  prefs: []
  type: TYPE_NORMAL
- en: '[https://www.pygame.org/docs/ref/key.html](https://www.pygame.org/docs/ref/key.html).'
  prefs: []
  type: TYPE_NORMAL
- en: A quick task for you
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Q1\. How do you start pygame?
  prefs: []
  type: TYPE_NORMAL
- en: '`pygame.display.set_mode()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pygame.init()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pygame.exit()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pygame.quit`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q2\. How do objects move in pygame?
  prefs: []
  type: TYPE_NORMAL
- en: Objects move using speed
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Objects move using gravity
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Objects move using collision detection
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Objects only appear to move, but they are actually constantly redrawn.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q3\. How is an object redrawn using pygame?
  prefs: []
  type: TYPE_NORMAL
- en: '`pygame.rerender()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pygame.display.object()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pygame.display.update()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`pygame.rect()`'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Q4\. What is the shorthand used to identify keys in pygame?
  prefs: []
  type: TYPE_NORMAL
- en: pygame.K_keyname
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: pygame.keyname
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: pygame.keys.K.name
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: pygame.key
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about the aspects of pygame that are needed to
    make an interactive game. You started with finding and installing the software
    on your operating system. Then, you learned to import and initialize pygame to
    interact with the computer. You set the characteristics of your game screen, including
    size and color. You added stationary objects to the game screen and learned some
    ways to make changes to these objects. You got an explanation of code for moving
    objects, which we will create in our final game.
  prefs: []
  type: TYPE_NORMAL
- en: In our next chapter, we will build a full-fledged game using all the skills
    that we have built throughout this book. It is recommended that you through the
    book again, and repeat any exercises that you do not fully understand. It is highly
    recommended that you visit the pygame documentation as well and read as much as
    you are able to understand. There are descriptions and examples of the methods
    used in this chapter that will help you in the next chapter. Are you ready to
    put everything together? Let's proceed to [Chapter 9](ch09.html "Chapter 9. Tiny
    Tennis"), *Tiny Tennis*.
  prefs: []
  type: TYPE_NORMAL
