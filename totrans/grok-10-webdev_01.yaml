- en: Chapter 1. Getting to Know Grok
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Grok is a web application framework written in the Python programming language.
    Currently, there are lots of fine options available for web development frameworks
    for Python, and Grok might be one of the least well known. This book presents
    Grok in detail, through the development of a complete web application. In the
    process, this book will let us know why Grok is a very good option for building
    web applications, no matter if they are small and simple, or large and complex.
    In this chapter, we''ll start with:'
  prefs: []
  type: TYPE_NORMAL
- en: What makes Grok an attractive option for Python web development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Grok makes use of the Zope Toolkit and why this makes Grok powerful and
    flexible
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Which are Grok's most important concepts and why they are useful
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How Grok compares to other web development frameworks
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Why Grok?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Grok is a modern web framework, which means:'
  prefs: []
  type: TYPE_NORMAL
- en: It offers an agile development process, with an emphasis on producing working
    code quickly, but always with an eye on clarity and testability. It doesn't require
    extensive configuration.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It provides a set of conventions for developing applications, including a file
    system layout and code structure. Grok's design encourages developers to share
    standards and provides them with a good practice to follow, when organizing their
    code. This allows less experienced developers to be productive from the start.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grok supports strong integration with relational databases, including the use
    of many object relational mappers, and also offers a transparent way to store
    Python objects, by using its own object-oriented database. Grok offers a solid
    foundation for developing powerful, extensible, and secure web applications without
    too much complexity. This is in part because it uses, at its core, the **Zope
    Toolkit**, which is a set of libraries intended for reuse by projects in order
    to develop web applications or frameworks. This collection of libraries uses a
    common component development model, known as the **Zope Component Architecture**
    (**ZCA**).
  prefs: []
  type: TYPE_NORMAL
- en: 'The ZCA is developed in the Zope community, which has been developing web applications
    by using Python for more than a decade. Grok builds on that experience and offers
    a strong combination of experience and agility. When using Grok, you will get:'
  prefs: []
  type: TYPE_NORMAL
- en: A core framework that has been evolving for more than ten years, always learning
    new lessons and looking for improvements, based on extensive experience on projects
    deployed in all kinds of production environments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A flexible, forward-looking architecture that allows developers to create applications
    that can be evolved and extended over long periods of time, even by other developers
    and, sometimes, without having to touch the original code at all.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A practical, knowledgeable development community, which has been around for
    a long time, and is willing to offer advice on how best to learn and take advantage
    of the framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A wide range of integrated features, such as internationalization, form generation
    and validation, security, cataloguing, and templating.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An impressive number of ready-to-use components that can be used as building
    blocks for your own applications. As with Zope 3 itself, these are usually thoroughly
    tested, solid components with good API documentation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Grok gives web developers a range of useful features for our applications which
    can easily be integrated as dependencies into our code.
  prefs: []
  type: TYPE_NORMAL
- en: Distinguishing Grok concepts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Grok has many things in common with other modern web development frameworks,
    but it also offers some very unique features, which make it stand apart from the
    crowd. We''ll briefly mention three of them here:'
  prefs: []
  type: TYPE_NORMAL
- en: The component architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The object database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The concept of object publishing and traversal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Zope Component Architecture
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: One distinguishing feature of Grok is its use of a component architecture that
    is intended to enable developers to create independent components that can be
    freely reused and exchanged.
  prefs: []
  type: TYPE_NORMAL
- en: Components are simply objects that perform a specified functionality. In the
    ZCA, this functionality is declared formally by using Interfaces, which are classes
    that describe the various methods and attributes of an object. A component that
    implements the same interface as some other component can easily be exchanged
    for it, giving the developer the option of combining components in different ways
    and substituting any specific component with newer or better implementations.
  prefs: []
  type: TYPE_NORMAL
- en: The ZCA includes two kinds of components adapters and utilities. An **adapter**
    is a component that extends another component with additional data, functionality,
    or presentation capabilities. A **utility** is a standalone component that provides
    some kind of service, such as database connectivity, encryption, or mail delivery.
    In Grok, the term **content component** is used to define the code with which
    these adapters and utilities interact.
  prefs: []
  type: TYPE_NORMAL
- en: For example, a common paradigm used to describe modern web frameworks is called
    **Model/View/Controller**, or **MVC** for short. The *model* is the content itself,
    which is usually stored in a relational database, along with the business rules
    that define how to modify it; the *view* is the HTML page that the user sees and
    with which he interacts; the *controller* is the code that gathers dynamic data
    from the view and pushes it to the model for processing and assembling a new HTML
    page with the results.
  prefs: []
  type: TYPE_NORMAL
- en: In MVC terms, the model is a component that provides data and is called a content
    component in Grok. The view and the controller are both adapters that act on this
    component, the former providing presentation capabilities to it, and the latter
    giving it additional functionality.
  prefs: []
  type: TYPE_NORMAL
- en: Using the ZCA gives Grok developers several advantages we get a standard way
    to extend other objects, which can even be used to add functionality to them from
    outside, without even touching their code. Also, we are able to both create reusable
    components, and use existing components that were developed elsewhere. In addition
    to this, we get a global registry that we can use to easily create our own component
    registries, thus avoiding code duplication.
  prefs: []
  type: TYPE_NORMAL
- en: This may sound somewhat abstract, so imagine an actual web application where
    we have several types of objects that represent items in a store catalog. Suppose
    that this application was developed by a third party, but we need to add a web
    page that shows specific information for each item, depending on where in the
    world the user browsing the catalog is located. In Grok, we can easily do that
    by creating the new view in an independent package and using the ZCA to hook it
    up with the original object with one single line of code. There is no need to
    touch the third-party application at all.
  prefs: []
  type: TYPE_NORMAL
- en: Object database
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most Python web frameworks use relational databases to store their object data,
    which, for complex data structures, can mean that the data is spread over different
    tables and then joined together by using complex queries. As Python is an object-oriented
    language, it makes a lot more sense to store the objects directly, which Zope
    3 accomplishes by using its own object database, known as the ZODB.
  prefs: []
  type: TYPE_NORMAL
- en: The **ZODB** is a transactional object store with load-balancing capabilities,
    and is one of the defining concepts of Zope since the very beginning. It allows
    developers to work with their objects and persist them almost transparently (it's
    enough to inherit from a persistent class). There is no need to worry about putting
    together the objects at read time and taking them to pieces when writing.
  prefs: []
  type: TYPE_NORMAL
- en: The ZODB is one of the pieces of Grok that can be used independently in any
    Python environment.
  prefs: []
  type: TYPE_NORMAL
- en: Object publishing and traversal
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In other web frameworks, URLs are usually mapped into code, which calls the
    correct template or returns the requested result. In Grok, URLs are mapped to
    objects, which means that any object can have a corresponding view.
  prefs: []
  type: TYPE_NORMAL
- en: If you think of the ZODB storage as a tree, you can visualize how Grok resolves
    URLs as going from the root node of the tree to the branches, and then sub-branches,
    until it reaches an object instance to display. This process of "walking the tree"
    is known as **traversal**.
  prefs: []
  type: TYPE_NORMAL
- en: The traversal mechanism "just works", which means that in practice, you can
    have nested hierarchies of any length and never have to worry about it as long
    as you provide default views for all of your object classes (these are called
    index views in Grok).
  prefs: []
  type: TYPE_NORMAL
- en: In contrast, many Python web frameworks use the concept of "URL routing", which
    requires the assignment of known paths to database objects by using some sort
    of regular expression syntax that involves object attributes on the database,
    such as ID, and a number of possible actions. Modifying these routes from outside
    the application is not easy.
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the default traversal mechanism, Grok also allows the use of
    custom traversal methods, which can return arbitrary object instances and views.
    This can be used to traverse results from a relational mapper query, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Other Grok features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are lots of other goodies that Grok offers for web application development.
    Here's a look at just a handful.
  prefs: []
  type: TYPE_NORMAL
- en: Integrated security model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grok has a very granular security model, based on permissions and roles. It
    allows the developer to assign specific permissions to a given view and then map
    those permissions to different roles. It uses the ZCA to permit pluggable components
    to be used for authentication and authorization.
  prefs: []
  type: TYPE_NORMAL
- en: Easy use of existing Python libraries and modules
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Of course, Python web frameworks are very powerful because they allow easy access
    to the multitude of Python libraries and modules available, starting with Python's
    own standard library. Grok allows developers to take advantage of this body of
    software, of course, but that's not the best part. Using the ZCA, it is possible
    to add views and functionality to objects instantiated from any of these modules
    without modifying their code, thus allowing us to reuse them more easily.
  prefs: []
  type: TYPE_NORMAL
- en: Static resources
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grok has a special directory name reserved for all of the static files, such
    as images, CSS stylesheets, or JavaScript files. You can work with these resources
    like you would in any other web development environment.
  prefs: []
  type: TYPE_NORMAL
- en: Relational database access
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grok includes the powerful ZODB for transparent object persistence, but, of
    course, there are times when a relational database is better suited for storing
    some kinds of data. Grok also features easy access to relational databases by
    using object relational mappers such as SQLAlchemy, so we can get the best of
    both worlds.
  prefs: []
  type: TYPE_NORMAL
- en: Python Web Server Gateway Interface compatibility
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Grok can be configured as a WSGI application and plugged into a pipeline together
    with other Python applications. This allows the developer to combine different
    web frameworks and applications into a single site, enabling him to use the best
    of breed applications wherever possible.
  prefs: []
  type: TYPE_NORMAL
- en: How Grok compares to other web frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Developers who have used, or are familiar with, other web frameworks may like
    to know a bit about how Grok compares to them. Although a full comparison is out
    of scope of this book, a few sentences about popular frameworks may be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: PHP
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: PHP allows a quick development pace, but does not encourage structured and secure
    web development practices. Grok offers an agile but a much more structured experience,
    which encourages good practices from the start. Grok also has a clean separation
    of concerns. Its templating language, ZPT, focuses on presentation, and avoids
    too much application logic, unlike PHP, which by its own nature combines everything
    into one template.
  prefs: []
  type: TYPE_NORMAL
- en: Java frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Like Java frameworks, Grok is designed with an eye on developing large and complex
    applications. Developers coming from Java web frameworks will find that Grok's
    conventions will drastically reduce configuration file usage. Grok uses a dynamic
    language, and the lack of a compile cycle greatly speeds up the development cycle.
    The Python language makes it easier to even test out things from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Ruby on Rails
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Grok is heavily inspired by Ruby on Rails. Rails was one of the earliest frameworks
    to articulate agile philosophies into two general principles: *Don''t Repeat Yourself*
    (DRY) and *Convention over configuration*. DRY means to avoid repeating the same
    code or information in different places something that Rails strongly enforces
    in its development practices. Convention over configuration means that instead
    of depending on explicit configuration to work, many framework aspects and code
    constructs have sensible default values. Grok takes these concepts to heart and
    combines them with the Zope Toolkit and the Zope Component Architecture, to offer
    a powerful and unique development platform.'
  prefs: []
  type: TYPE_NORMAL
- en: Django
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django is one of the most popular Python web development frameworks. One of
    its key selling points is the automatic generation of administrative interfaces
    for its applications, which Grok doesn't do. Django is similar to Grok in the
    use of the *Convention over configuration* and *Don't Repeat Yourself* principles.
    It also offers the full power of the Python programming language and wants to
    be a full stack solution for web development problems. Unlike Grok, its architecture
    is focused on building relational database backed applications and integrating
    third-party pieces into its stack, while still keeping features such as the administration
    interfaces working, which is not easy.
  prefs: []
  type: TYPE_NORMAL
- en: Pylons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Pylons is more of a minimal web framework, whereas Grok is trying to offer a
    full stack of components. Developers using Pylons may find a more powerful framework
    in Grok, at the expense of some of the flexibility that a minimal framework enables.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we have introduced Grok and shown why it is a great option
    for modern web application development. In the next chapter, we'll see how to
    put Grok into action, and will get our first, simple application up and running.
  prefs: []
  type: TYPE_NORMAL
