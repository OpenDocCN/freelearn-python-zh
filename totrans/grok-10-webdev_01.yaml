- en: Chapter 1. Getting to Know Grok
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章 了解Grok
- en: 'Grok is a web application framework written in the Python programming language.
    Currently, there are lots of fine options available for web development frameworks
    for Python, and Grok might be one of the least well known. This book presents
    Grok in detail, through the development of a complete web application. In the
    process, this book will let us know why Grok is a very good option for building
    web applications, no matter if they are small and simple, or large and complex.
    In this chapter, we''ll start with:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Grok是用Python编程语言编写的Web应用程序框架。目前，对于Python Web开发框架有很多不错的选择，Grok可能是其中最不为人知的一个。本书通过开发一个完整的Web应用程序来详细介绍Grok。在这个过程中，本书将让我们了解为什么Grok是构建Web应用程序的一个非常好的选择，无论它们是小型简单还是大型复杂。在本章中，我们将从以下内容开始：
- en: What makes Grok an attractive option for Python web development
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使Grok成为Python Web开发有吸引力的选项的原因
- en: How Grok makes use of the Zope Toolkit and why this makes Grok powerful and
    flexible
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grok如何利用Zope工具包以及为什么这使得Grok强大且灵活
- en: Which are Grok's most important concepts and why they are useful
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grok最重要的概念是什么以及为什么它们有用
- en: How Grok compares to other web development frameworks
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Grok与其他Web开发框架的比较
- en: Why Grok?
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为什么选择Grok？
- en: 'Grok is a modern web framework, which means:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: Grok是一个现代Web框架，这意味着：
- en: It offers an agile development process, with an emphasis on producing working
    code quickly, but always with an eye on clarity and testability. It doesn't require
    extensive configuration.
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一种敏捷的开发流程，强调快速生成可工作的代码，但始终关注清晰性和可测试性。它不需要广泛的配置。
- en: It provides a set of conventions for developing applications, including a file
    system layout and code structure. Grok's design encourages developers to share
    standards and provides them with a good practice to follow, when organizing their
    code. This allows less experienced developers to be productive from the start.
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供了一套开发应用程序的约定，包括文件系统布局和代码结构。Grok的设计鼓励开发者共享标准，并为他们在组织代码时提供了一套良好的实践。这使得经验不足的开发者可以从一开始就变得高效。
- en: Grok supports strong integration with relational databases, including the use
    of many object relational mappers, and also offers a transparent way to store
    Python objects, by using its own object-oriented database. Grok offers a solid
    foundation for developing powerful, extensible, and secure web applications without
    too much complexity. This is in part because it uses, at its core, the **Zope
    Toolkit**, which is a set of libraries intended for reuse by projects in order
    to develop web applications or frameworks. This collection of libraries uses a
    common component development model, known as the **Zope Component Architecture**
    (**ZCA**).
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: Grok支持与关系数据库的强大集成，包括使用许多对象关系映射器，并且通过使用自己的面向对象数据库提供了一种透明的方式来存储Python对象。Grok为开发强大、可扩展和安全的Web应用程序提供了坚实的基础，而不会过于复杂。这在很大程度上是因为它在其核心使用了**Zope工具包**，这是一个旨在供项目重用以开发Web应用程序或框架的库集合。这个库集合使用了一种称为**Zope组件架构**（**ZCA**）的通用组件开发模型。
- en: 'The ZCA is developed in the Zope community, which has been developing web applications
    by using Python for more than a decade. Grok builds on that experience and offers
    a strong combination of experience and agility. When using Grok, you will get:'
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: ZCA是在Zope社区中开发的，该社区已经使用Python开发Web应用程序超过十年。Grok基于这一经验，提供了一种强大的经验和敏捷的结合。当使用Grok时，您将获得：
- en: A core framework that has been evolving for more than ten years, always learning
    new lessons and looking for improvements, based on extensive experience on projects
    deployed in all kinds of production environments.
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个核心框架已经发展了十多年，始终在学习新的经验教训并寻求改进，基于在所有类型的生产环境中部署的项目的大量经验。
- en: A flexible, forward-looking architecture that allows developers to create applications
    that can be evolved and extended over long periods of time, even by other developers
    and, sometimes, without having to touch the original code at all.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一种灵活、前瞻性的架构，允许开发者在长时间内创建可以演变和扩展的应用程序，甚至可以由其他开发者进行，有时甚至不需要触及原始代码。
- en: A practical, knowledgeable development community, which has been around for
    a long time, and is willing to offer advice on how best to learn and take advantage
    of the framework.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个实用、知识渊博的开发社区，这个社区已经存在很长时间，并且愿意提供关于如何最好地学习和利用框架的建议。
- en: A wide range of integrated features, such as internationalization, form generation
    and validation, security, cataloguing, and templating.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一系列集成功能，例如国际化、表单生成和验证、安全性、编目和模板化。
- en: An impressive number of ready-to-use components that can be used as building
    blocks for your own applications. As with Zope 3 itself, these are usually thoroughly
    tested, solid components with good API documentation.
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一大批现成的组件，可以用作构建您自己应用程序的基石。与 Zope 3 本身一样，这些组件通常经过彻底测试，具有良好的 API 文档。
- en: Grok gives web developers a range of useful features for our applications which
    can easily be integrated as dependencies into our code.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 为 Web 开发者提供了我们应用程序的一系列有用功能，这些功能可以轻松地作为依赖项集成到我们的代码中。
- en: Distinguishing Grok concepts
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 区分 Grok 概念
- en: 'Grok has many things in common with other modern web development frameworks,
    but it also offers some very unique features, which make it stand apart from the
    crowd. We''ll briefly mention three of them here:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 与其他现代 Web 开发框架有许多共同之处，但它也提供了一些非常独特的功能，使其与众不同。在这里，我们将简要介绍其中三个：
- en: The component architecture
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件架构
- en: The object database
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象数据库
- en: The concept of object publishing and traversal
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对象发布和遍历的概念
- en: The Zope Component Architecture
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Zope 组件架构
- en: One distinguishing feature of Grok is its use of a component architecture that
    is intended to enable developers to create independent components that can be
    freely reused and exchanged.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 的一个显著特点是它使用组件架构，旨在使开发者能够创建独立组件，这些组件可以自由重用和交换。
- en: Components are simply objects that perform a specified functionality. In the
    ZCA, this functionality is declared formally by using Interfaces, which are classes
    that describe the various methods and attributes of an object. A component that
    implements the same interface as some other component can easily be exchanged
    for it, giving the developer the option of combining components in different ways
    and substituting any specific component with newer or better implementations.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 组件仅仅是执行特定功能的对象。在 ZCA 中，这种功能通过接口正式声明，接口是描述对象各种方法和属性的类。实现与某个其他组件相同接口的组件可以轻松地替换它，这为开发者提供了以不同方式组合组件和用较新或更好的实现替换任何特定组件的选项。
- en: The ZCA includes two kinds of components adapters and utilities. An **adapter**
    is a component that extends another component with additional data, functionality,
    or presentation capabilities. A **utility** is a standalone component that provides
    some kind of service, such as database connectivity, encryption, or mail delivery.
    In Grok, the term **content component** is used to define the code with which
    these adapters and utilities interact.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: ZCA 包括两种类型的组件：适配器和实用工具。**适配器** 是扩展另一个组件以提供额外数据、功能或展示能力的组件。**实用工具** 是提供某种服务的独立组件，例如数据库连接、加密或邮件投递。在
    Grok 中，术语 **内容组件** 用于定义与这些适配器和实用工具交互的代码。
- en: For example, a common paradigm used to describe modern web frameworks is called
    **Model/View/Controller**, or **MVC** for short. The *model* is the content itself,
    which is usually stored in a relational database, along with the business rules
    that define how to modify it; the *view* is the HTML page that the user sees and
    with which he interacts; the *controller* is the code that gathers dynamic data
    from the view and pushes it to the model for processing and assembling a new HTML
    page with the results.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，用于描述现代 Web 框架的常见范例被称为 **模型/视图/控制器**，或简称 **MVC**。*模型* 是内容本身，通常存储在关系型数据库中，以及定义如何修改它的业务规则；*视图*
    是用户看到的 HTML 页面，以及与之交互的页面；*控制器* 是从视图中收集动态数据并将其推送到模型进行处理的代码，以组装包含结果的新 HTML 页面。
- en: In MVC terms, the model is a component that provides data and is called a content
    component in Grok. The view and the controller are both adapters that act on this
    component, the former providing presentation capabilities to it, and the latter
    giving it additional functionality.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 在 MVC 术语中，模型是提供数据的组件，在 Grok 中被称为内容组件。视图和控制器都是作用于该组件的适配器，前者提供展示能力，后者提供额外的功能。
- en: Using the ZCA gives Grok developers several advantages we get a standard way
    to extend other objects, which can even be used to add functionality to them from
    outside, without even touching their code. Also, we are able to both create reusable
    components, and use existing components that were developed elsewhere. In addition
    to this, we get a global registry that we can use to easily create our own component
    registries, thus avoiding code duplication.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ZCA为Grok开发者提供了几个优势，我们得到了一个扩展其他对象的标准方式，甚至可以用来从外部添加功能，而无需触及它们的代码。此外，我们能够创建可重用的组件，并使用在其他地方开发的现有组件。除此之外，我们还得到了一个全局注册表，我们可以用它轻松地创建自己的组件注册表，从而避免代码重复。
- en: This may sound somewhat abstract, so imagine an actual web application where
    we have several types of objects that represent items in a store catalog. Suppose
    that this application was developed by a third party, but we need to add a web
    page that shows specific information for each item, depending on where in the
    world the user browsing the catalog is located. In Grok, we can easily do that
    by creating the new view in an independent package and using the ZCA to hook it
    up with the original object with one single line of code. There is no need to
    touch the third-party application at all.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这可能听起来有些抽象，所以想象一个实际的Web应用程序，其中我们有一些类型的对象代表商店目录中的项目。假设这个应用程序是由第三方开发的，但我们需要添加一个网页来显示每个项目的特定信息，具体取决于浏览目录的用户位于世界的哪个地方。在Grok中，我们可以通过创建一个独立包中的新视图并使用ZCA通过一行代码将其与原始对象连接起来，轻松地做到这一点。根本不需要触及第三方应用程序。
- en: Object database
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象数据库
- en: Most Python web frameworks use relational databases to store their object data,
    which, for complex data structures, can mean that the data is spread over different
    tables and then joined together by using complex queries. As Python is an object-oriented
    language, it makes a lot more sense to store the objects directly, which Zope
    3 accomplishes by using its own object database, known as the ZODB.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数Python Web框架使用关系数据库来存储它们的对象数据，对于复杂的数据结构来说，这可能意味着数据分散在不同的表中，然后通过使用复杂的查询将它们连接起来。由于Python是一种面向对象的语言，因此直接存储对象更有意义，Zope
    3通过使用其自己的对象数据库ZODB来实现这一点。
- en: The **ZODB** is a transactional object store with load-balancing capabilities,
    and is one of the defining concepts of Zope since the very beginning. It allows
    developers to work with their objects and persist them almost transparently (it's
    enough to inherit from a persistent class). There is no need to worry about putting
    together the objects at read time and taking them to pieces when writing.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '**ZODB**是一个具有负载均衡能力的事务性对象存储，并且是Zope从最初就定义的概念之一。它允许开发者几乎透明地处理他们的对象并将它们持久化（只需从持久化类继承即可）。无需担心在读取时组合对象以及在写入时拆分它们。'
- en: The ZODB is one of the pieces of Grok that can be used independently in any
    Python environment.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: ZODB是Grok中可以独立在任何Python环境中使用的组件之一。
- en: Object publishing and traversal
  id: totrans-35
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 对象发布和遍历
- en: In other web frameworks, URLs are usually mapped into code, which calls the
    correct template or returns the requested result. In Grok, URLs are mapped to
    objects, which means that any object can have a corresponding view.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他Web框架中，URL通常被映射到代码中，这些代码调用正确的模板或返回请求的结果。在Grok中，URL被映射到对象上，这意味着任何对象都可以有一个相应的视图。
- en: If you think of the ZODB storage as a tree, you can visualize how Grok resolves
    URLs as going from the root node of the tree to the branches, and then sub-branches,
    until it reaches an object instance to display. This process of "walking the tree"
    is known as **traversal**.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将ZODB存储视为一棵树，你可以可视化Grok如何解析URL，从树的根节点开始，然后到分支，再到子分支，直到达到要显示的对象实例。这个过程称为“遍历”。
- en: The traversal mechanism "just works", which means that in practice, you can
    have nested hierarchies of any length and never have to worry about it as long
    as you provide default views for all of your object classes (these are called
    index views in Grok).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历机制“只需工作”，这意味着在实践中，你可以有任意长度的嵌套层次结构，只要为你的所有对象类提供默认视图（在Grok中称为索引视图），就无需担心。
- en: In contrast, many Python web frameworks use the concept of "URL routing", which
    requires the assignment of known paths to database objects by using some sort
    of regular expression syntax that involves object attributes on the database,
    such as ID, and a number of possible actions. Modifying these routes from outside
    the application is not easy.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，许多 Python 网络框架使用“URL 路由”的概念，这需要使用某种正则表达式语法将已知的路径分配给数据库对象，该语法涉及数据库中的对象属性，如
    ID，以及一系列可能的操作。从应用程序外部修改这些路由并不容易。
- en: In addition to the default traversal mechanism, Grok also allows the use of
    custom traversal methods, which can return arbitrary object instances and views.
    This can be used to traverse results from a relational mapper query, for example.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 除了默认的遍历机制外，Grok 还允许使用自定义遍历方法，这些方法可以返回任意对象实例和视图。这可以用于遍历关系映射器查询的结果，例如。
- en: Other Grok features
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他 Grok 功能
- en: There are lots of other goodies that Grok offers for web application development.
    Here's a look at just a handful.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 为网络应用开发提供了许多其他有用的功能。这里仅列举其中的一小部分。
- en: Integrated security model
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 集成安全模型
- en: Grok has a very granular security model, based on permissions and roles. It
    allows the developer to assign specific permissions to a given view and then map
    those permissions to different roles. It uses the ZCA to permit pluggable components
    to be used for authentication and authorization.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 拥有一个非常细粒度的安全模型，基于权限和角色。它允许开发者将特定的权限分配给特定的视图，然后将这些权限映射到不同的角色。它使用 ZCA 允许可插入的组件用于身份验证和授权。
- en: Easy use of existing Python libraries and modules
  id: totrans-45
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 简单使用现有的 Python 库和模块
- en: Of course, Python web frameworks are very powerful because they allow easy access
    to the multitude of Python libraries and modules available, starting with Python's
    own standard library. Grok allows developers to take advantage of this body of
    software, of course, but that's not the best part. Using the ZCA, it is possible
    to add views and functionality to objects instantiated from any of these modules
    without modifying their code, thus allowing us to reuse them more easily.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，Python 网络框架非常强大，因为它们允许轻松访问可用的众多 Python 库和模块，从 Python 的标准库开始。Grok 允许开发者利用这一软件库，当然，但这还不是最好的部分。使用
    ZCA，我们可以在不修改其代码的情况下向从这些模块实例化的对象添加视图和功能，从而使我们更容易地重用它们。
- en: Static resources
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 静态资源
- en: Grok has a special directory name reserved for all of the static files, such
    as images, CSS stylesheets, or JavaScript files. You can work with these resources
    like you would in any other web development environment.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 为所有静态文件（如图像、CSS 样式表或 JavaScript 文件）保留了一个特殊的目录名称。您可以使用这些资源，就像在其他任何网络开发环境中一样。
- en: Relational database access
  id: totrans-49
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系数据库访问
- en: Grok includes the powerful ZODB for transparent object persistence, but, of
    course, there are times when a relational database is better suited for storing
    some kinds of data. Grok also features easy access to relational databases by
    using object relational mappers such as SQLAlchemy, so we can get the best of
    both worlds.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 包含强大的 ZODB，用于透明的对象持久化，但当然，在某些情况下，关系数据库更适合存储某些类型的数据。Grok 还通过使用对象关系映射器（如
    SQLAlchemy）提供轻松访问关系数据库的功能，这样我们就可以兼得两者之长了。
- en: Python Web Server Gateway Interface compatibility
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 网络服务器网关接口兼容性
- en: Grok can be configured as a WSGI application and plugged into a pipeline together
    with other Python applications. This allows the developer to combine different
    web frameworks and applications into a single site, enabling him to use the best
    of breed applications wherever possible.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 可以配置为 WSGI 应用程序，并与其他 Python 应用程序一起插入到管道中。这使得开发者能够将不同的网络框架和应用程序组合成一个单一站点，从而在可能的情况下使用最佳的应用程序。
- en: How Grok compares to other web frameworks
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Grok 与其他网络框架的比较
- en: Developers who have used, or are familiar with, other web frameworks may like
    to know a bit about how Grok compares to them. Although a full comparison is out
    of scope of this book, a few sentences about popular frameworks may be helpful.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 使用过或熟悉其他网络框架的开发者可能想知道 Grok 与它们相比的情况。尽管完整的比较超出了本书的范围，但关于流行框架的几句话可能有所帮助。
- en: PHP
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: PHP
- en: PHP allows a quick development pace, but does not encourage structured and secure
    web development practices. Grok offers an agile but a much more structured experience,
    which encourages good practices from the start. Grok also has a clean separation
    of concerns. Its templating language, ZPT, focuses on presentation, and avoids
    too much application logic, unlike PHP, which by its own nature combines everything
    into one template.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: PHP 允许快速的开发速度，但不鼓励结构化和安全的网络开发实践。Grok 提供了敏捷但结构化程度更高的体验，从一开始就鼓励良好的实践。Grok 还具有清晰的关注点分离。其模板语言
    ZPT 专注于展示，与 PHP 不同，PHP 本身将所有内容组合到一个模板中，避免了过多的应用程序逻辑。
- en: Java frameworks
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Java 框架
- en: Like Java frameworks, Grok is designed with an eye on developing large and complex
    applications. Developers coming from Java web frameworks will find that Grok's
    conventions will drastically reduce configuration file usage. Grok uses a dynamic
    language, and the lack of a compile cycle greatly speeds up the development cycle.
    The Python language makes it easier to even test out things from the command line.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 与 Java 框架类似，Grok 是为了开发大型和复杂的应用程序而设计的。来自 Java 网络框架的开发者会发现 Grok 的约定将大大减少配置文件的使用。Grok
    使用动态语言，没有编译周期大大加快了开发周期。Python 语言使得从命令行测试事物变得更加容易。
- en: Ruby on Rails
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Ruby on Rails
- en: 'Grok is heavily inspired by Ruby on Rails. Rails was one of the earliest frameworks
    to articulate agile philosophies into two general principles: *Don''t Repeat Yourself*
    (DRY) and *Convention over configuration*. DRY means to avoid repeating the same
    code or information in different places something that Rails strongly enforces
    in its development practices. Convention over configuration means that instead
    of depending on explicit configuration to work, many framework aspects and code
    constructs have sensible default values. Grok takes these concepts to heart and
    combines them with the Zope Toolkit and the Zope Component Architecture, to offer
    a powerful and unique development platform.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: Grok 受 Ruby on Rails 的启发很大。Rails 是最早将敏捷哲学阐述为两个一般原则的框架之一：*不要重复自己* (DRY) 和 *约定优于配置*。DRY
    意味着避免在不同地方重复相同的代码或信息，Rails 在其开发实践中强烈执行这一点。约定优于配置意味着许多框架方面和代码结构有合理的默认值，而不是依赖于显式的配置来工作。Grok
    将这些概念铭记在心，并将它们与 Zope 工具包和 Zope 组件架构相结合，提供了一种强大而独特的开发平台。
- en: Django
  id: totrans-61
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Django
- en: Django is one of the most popular Python web development frameworks. One of
    its key selling points is the automatic generation of administrative interfaces
    for its applications, which Grok doesn't do. Django is similar to Grok in the
    use of the *Convention over configuration* and *Don't Repeat Yourself* principles.
    It also offers the full power of the Python programming language and wants to
    be a full stack solution for web development problems. Unlike Grok, its architecture
    is focused on building relational database backed applications and integrating
    third-party pieces into its stack, while still keeping features such as the administration
    interfaces working, which is not easy.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: Django 是最受欢迎的 Python 网络开发框架之一。其关键卖点之一是为其应用程序自动生成管理界面，这是 Grok 所不具备的。Django 在使用
    *约定优于配置* 和 *不要重复自己* 原则方面与 Grok 类似。它还提供了 Python 编程语言的全部功能，并希望成为解决网络开发问题的全栈解决方案。与
    Grok 不同，其架构专注于构建基于关系数据库的应用程序，并将第三方组件集成到其堆栈中，同时仍然保持管理界面等功能的运行，这并不容易。
- en: Pylons
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Pylons
- en: Pylons is more of a minimal web framework, whereas Grok is trying to offer a
    full stack of components. Developers using Pylons may find a more powerful framework
    in Grok, at the expense of some of the flexibility that a minimal framework enables.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Pylons 更像是一个最小化的网络框架，而 Grok 正在尝试提供一套完整的组件。使用 Pylons 的开发者可能会在 Grok 中找到一个更强大的框架，但会牺牲一些最小化框架所提供的灵活性。
- en: Summary
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we have introduced Grok and shown why it is a great option
    for modern web application development. In the next chapter, we'll see how to
    put Grok into action, and will get our first, simple application up and running.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了 Grok 并说明了为什么它是现代网络应用程序开发的绝佳选择。在下一章中，我们将看到如何将 Grok 应用到实践中，并将构建我们的第一个简单应用程序并使其运行。
