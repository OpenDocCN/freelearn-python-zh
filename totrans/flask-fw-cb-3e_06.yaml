- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authenticating in Flask
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Authentication is an important part of any application, be it web-based, desktop,
    or mobile. Each kind of application has certain best practices when it comes to
    handling user authentication. In web-based applications, especially **Software-as-a-Service**
    (**SaaS**) applications, this process is of utmost importance, as it acts as the
    thin red line between the application being secure and insecure.
  prefs: []
  type: TYPE_NORMAL
- en: To keep things simple and flexible, Flask, by default, does not provide any
    mechanism for authentication. It always has to be implemented by us, the developers,
    as per our requirements and the application’s requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating users for your application can be done in multiple ways. It can
    be a simple session-based implementation or a more secure approach using the `Flask-Login`
    extension. We can also implement authentication by integrating popular third-party
    services such as the **Lightweight Directory Access Protocol** (**LDAP**) or social
    logins such as Facebook, Google, and so on. In this chapter, we will go through
    all of these methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a simple session-based authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating using the Flask-Login extension
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Facebook for authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Google for authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Twitter for authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Authenticating with LDAP
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a simple session-based authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In session-based authentication, when the user logs in for the first time, the
    user details are set in the session of the application’s server side and stored
    in a cookie on the browser.
  prefs: []
  type: TYPE_NORMAL
- en: After that, when the user opens the application, the details stored in the cookie
    are used to check against the session, and the user is automatically logged in
    if the session is alive.
  prefs: []
  type: TYPE_NORMAL
- en: Info
  prefs: []
  type: TYPE_NORMAL
- en: '`SECRET_KEY` is an application configuration setting that should always be
    specified in your application’s configuration; otherwise, the data stored in the
    cookie, as well as the session on the server side, will be in plain text, which
    is highly insecure.'
  prefs: []
  type: TYPE_NORMAL
- en: We will implement a simple mechanism to do this ourselves.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The implementation done in this recipe is designed to explain how authentication
    works at a lower level. This approach should *not* be adopted in any production-level
    application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with a Flask app configuration, as seen in [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273),
    *Web Forms**with WTForms*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configure the application to use the SQLAlchemy and WTForms extensions (refer
    to the previous chapter for details). Follow these steps to understand how:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before starting with authentication, first, create a model to store the user
    details. This is achieved by creating models in `flask_authentication/my_app/auth/models.py`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The preceding code is the `User` model, which has two fields: `username` and
    `pwdhash`. The `username` field works as its name suggests. The `pwdhash` field
    stores the salted hash of the password because it is not recommended that you
    store passwords directly in databases.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, create two forms in f`lask_authentication/my_app/auth/models.py` – one
    for user registration and the other for login. In `RegistrationForm`, create two
    fields of the `PasswordField` type, just like any other website’s registration;
    this is to make sure that the user enters the same password in both fields, as
    shown in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, create views in `flask_authentication/my_app/auth/views.py` to handle
    the user requests for registration and login, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE40]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE41]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE42]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE43]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE44]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE45]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE46]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE47]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE53]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE54]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE61]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE62]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding method handles user registration. On a `GET` request, the registration
    form is shown to the user; this form asks for the `username` and `password`. Then,
    on a `POST` request, the `username` is checked for its uniqueness after the form
    validation is complete. If the `username` is not unique, the user is asked to
    choose a new `username`; otherwise, a new user is created in the database and
    redirected to the login page.
  prefs: []
  type: TYPE_NORMAL
- en: 'After successful registration, the user is redirected to log in, which is handled
    as shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding method handles the user login. After form validation, it first
    checks whether the `username` exists in the database. If not, it asks the user
    to enter the correct username. Similarly, it checks whether the `password` is
    correct. If not, it asks the user for the correct password. If all the checks
    pass, the session is populated with a `username` key, which holds the username
    of the user. The presence of this key on the session indicates that the user is
    logged in. Consider the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: The preceding method becomes self-implied once we’ve understood the `login()`
    method. Here, we just popped out the `username` key from the session, and the
    user got logged out automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Next, create the templates that are rendered by the `register()` and `login()`
    handlers for the registration and login, respectively, created previously.
  prefs: []
  type: TYPE_NORMAL
- en: The `flask_authentication/my_app/templates/base.html` template remains almost
    the same as it was in [*Chapter 5*](B19111_05.xhtml#_idTextAnchor273), *Web Forms*
    *with WTForms*. The only change will be with the routing, where `catalog` will
    be replaced by `auth`.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, create a simple home page, `flask_authentication/my_app/templates/home.html`,
    as shown in the following code. This reflects whether the user is logged in or
    not and also shows links for registration and login if the user is not logged
    in:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Now create a registration page, `flask_authentication/my_app/templates/register.html`,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a simple login page, `flask_authentication/my_app/templates/login.html`,
    with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The working of this application is demonstrated with the help of the screenshots
    in this section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot displays the home page that comes up on opening `http://127.0.0.1:5000/home`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – Home page visible to a user who is not logged in](img/B19111_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – Home page visible to a user who is not logged in
  prefs: []
  type: TYPE_NORMAL
- en: 'The registration page that comes up on opening `http://127.0.0.1:5000/register`
    looks like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – The registration form](img/B19111_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – The registration form
  prefs: []
  type: TYPE_NORMAL
- en: 'After registration, the login page will be shown on opening `http://127.0.0.1:5000/login`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – Login page rendered after successful registration](img/B19111_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – Login page rendered after successful registration
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, the home page is shown to the logged-in user at `http://127.0.0.1:5000/home`,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.4 – Home page as shown to a logged-in \uFEFFuser](img/B19111_06_04.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – Home page as shown to a logged-in user
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The next recipe, *Authenticating using the Flask-Login extension*, will cover
    a more secure and production-ready method of performing user authentication.
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating using the Flask-Login extension
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In our previous recipe, we learned how to implement session-based authentication
    ourselves. `Flask-Login` is a popular extension that handles a lot of the same
    stuff in a helpful and efficient way and thus saves us from reinventing the wheel
    all over again. In addition, `Flask-Login` will not bind us to any specific database
    or limit us to using any specific fields or methods for authentication. It can
    also handle the `Flask-Login` with our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Modify the application created in the previous recipe to accommodate the changes
    to be done by the `Flask-Login` extension.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before that, we have to install the extension itself with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to understand how `Flask-Login` can be integrated with a
    Flask application:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use `Flask-Login`, first, modify the application’s configuration, which
    is in `flask_authentication/my_app/__init__.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE75]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, after importing the `LoginManager` class from
    the extension, we created an object of this class. Then, we configured the `app`
    object for use with `LoginManager` using `init_app()`. There are then multiple
    configurations that can be done in the `login_manager` object, as and when needed.
    Here, we have just demonstrated one basic and compulsory configuration, that is,
    `login_view`, which points to the view handler for login requests. In addition,
    we can also configure messages to be shown to the users, such as how long a session
    will last, handling logins using request headers, and so on. Refer to the `Flask-Login`
    documentation at [https://flask-login.readthedocs.org/en/latest/#customizing-the-login-process](https://flask-login.readthedocs.org/en/latest/#customizing-the-login-process)
    for more details.
  prefs: []
  type: TYPE_NORMAL
- en: '`Flask-Login` calls for some additional methods to be added to the `User` model/class
    in `my_app/auth/models.py`, as shown in the following snippet:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE79]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE80]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE81]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE82]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE83]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE84]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE85]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE86]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the preceding code, we added four methods, which are explained as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`is_authenticated()`: This property returns `True`. This should return `False`
    only in cases where we do not want a user to be authenticated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_active()`: This property returns `True`. This should return `False` only
    in cases where we have blocked or banned a user.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`is_anonymous()`: This property is used to indicate a user who is not supposed
    to be logged in to the system and should access the application as anonymous.
    This should return `False` for regular logged-in users.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`get_id()`: This method represents the unique `ID` used to identify the user.
    This should be a Unicode value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: It is not necessary to implement all of the methods and properties discussed
    while implementing a `user` class. To make things easier, you can always subclass
    the `UserMixin` class from `flask_login`, which has default implementations already
    done for the methods and properties we mentioned. For more information on this,
    visit [https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin](https://flask-login.readthedocs.io/en/latest/#flask_login.UserMixin).
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, make the following changes to the views in `my_app/auth/views.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE87]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE88]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE89]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE90]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE91]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE92]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE93]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE94]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE95]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE96]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding method, the `@auth.before_request` decorator implies that the
    method will be called before the view function whenever a request is received.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the following snippet, we have memorized our logged-in user:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE97]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE98]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE99]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE100]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE101]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE102]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE103]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE104]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE105]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE106]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE107]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE108]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE109]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE110]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE111]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE112]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE113]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE114]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE115]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE116]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE117]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE118]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE119]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE120]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE121]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE122]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE123]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Notice that now, in `login()`, we check whether the `current_user` is authenticated
    before doing anything else. Here, `current_user` is a proxy that represents the
    object for the currently logged-in `User` record. After all validations and checks
    are done, the user is then logged in using the `login_user()` method. This method
    accepts the `user` object and handles all of the session-related activities required
    to log in a user.
  prefs: []
  type: TYPE_NORMAL
- en: Now, if we move on to the `logout()` method, we can see that a decorator has
    been added for `login_required()`. This decorator makes sure that the user is
    logged in before this method is executed. It can be used for any view method in
    our application. To log a user out, we just have to call `logout_user()`, which
    will clean up the session for the currently logged-in user and, in turn, log the
    user out of the application.
  prefs: []
  type: TYPE_NORMAL
- en: 'As we do not handle sessions ourselves, a minor change in the templates is
    required, as shown in the following snippet. This happens whenever we want to
    check whether a user is logged in and whether particular content needs to be shown
    to them:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE124]'
  prefs: []
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The demonstration in this recipe works exactly as it did in the previous recipe,
    *Creating a simple session-based authentication*. Only the implementation differs,
    but the end result remains the same.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `Flask-Login` extension makes the implementation of the `remember=True`
    to the `login_user()` method. This will save a cookie on the user’s computer,
    and `Flask-Login` will use this to log the user in automatically if the session
    is active. You should try implementing this on your own.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: See the previous recipe, *Creating a simple session-based authentication*, to
    understand the complete working of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Flask provides a special object called `g`. You can read more about this at
    [https://flask.palletsprojects.com/en/2.2.x/api/#flask.g](https://flask.palletsprojects.com/en/2.2.x/api/#flask.g).
  prefs: []
  type: TYPE_NORMAL
- en: Another interesting way of authentication is using JWT tokens, which work in
    a way that is very similar to `Flask-Login`. See more details at [https://flask-jwt-extended.readthedocs.io/en/stable/](https://flask-jwt-extended.readthedocs.io/en/stable/).
  prefs: []
  type: TYPE_NORMAL
- en: Using Facebook for authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You will have noticed that many websites provide an option to log in to their
    own site using third-party authentication, such as Facebook, Google, Twitter,
    LinkedIn, and so on. This has been made possible by **OAuth 2**, which is an open
    standard for authorization. It allows the client site to use an access token to
    access the protected information and resources provided by the resource server.
    In this recipe, we will show you how to implement OAuth-based authorization via
    Facebook. In later recipes, we will do the same using other providers.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: OAuth is a mechanism that allows users to grant websites or applications access
    to their information on other websites (such as Google, Facebook, Twitter, etc.)
    without sharing the password. It essentially means that the third-party client
    application (your Flask application) gets access to data stored on the resource
    server (Google, Facebook, etc.) by means of an access token, which is issued by
    the resource server’s authentication engine on approval of the resource owner
    (the user).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'OAuth 2 only works with SSL, so the application should run with HTTPS. To do
    this on a local machine, please follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Install `pyopenssl` using the `$ pip3 install` `pyopenssl` command.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add additional options to `app.run()`, including `ssl_context` with the `adhoc`
    value. The completed `app.run` should look as follows: `app.run(debug=True, ssl_context=''adhoc'')`.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once these changes have been made, run the application using the URL `https://localhost:5000/`.
    Before the app loads, your browser will display warnings about the certificate
    not being safe. Just accept the warning and proceed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: This is not a recommended method. In production systems, SSL certificates should
    be obtained from a proper certifying authority.
  prefs: []
  type: TYPE_NORMAL
- en: To install `Flask-Dance` and generate Facebook credentials, follow these step:.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, install the `Flask-Dance` extension and its dependencies with the following
    command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE125]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, register for a Facebook application that will be used for login. Although
    the process for registration on the Facebook app is pretty straightforward and
    self-explanatory, in this case, we are only concerned with the **App ID**, **App
    secret**, and **Site URL** options, as shown in the following screenshot (more
    information on this can be found on the Facebook developer pages at [https://developers.facebook.com/](https://developers.facebook.com/)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.5 – Facebook app credentials](img/B19111_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – Facebook app credentials
  prefs: []
  type: TYPE_NORMAL
- en: 'While configuring Facebook, make sure to configure the site URL to `https://localhost:5000/`
    for the purpose of this recipe, and the valid OAuth redirect URIs, as shown in
    the following screenshots:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – Facebook site URL config](img/B19111_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – Facebook site URL config
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.7 – Facebook OAu\uFEFFth Redirect URIs config](img/B19111_06_07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Facebook OAuth Redirect URIs config
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable Facebook authentication for your application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, start with the configuration part in `my_app/__init__.py`. Add the
    following lines of code; do not remove or edit anything else unless you are confident
    of the change:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE126]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE127]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE128]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE129]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE130]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, we used Flask-Dance with our application for
    authentication. This blueprint will be created in the `views` file, which we will
    cover next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now modify the views, that is, `my_app/auth/views.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE131]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE132]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE133]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE134]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE135]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '`make_facebook_blueprint` reads `FACEBOOK_OAUTH_CLIENT_ID` and `FACEBOOK_OAUTH_CLIENT_SECRET`
    from the application configuration and takes care of all the OAuth-related handling
    in the background. While making the Facebook blueprint, we set `scope` to `email`,
    so that an email address can be used as a unique username. We also set `redirect_to`
    to `auth.facebook_login`, so Facebook routes the application back to this URL
    once authentication succeeds. If this option is not set, the application will
    be automatically redirected to the home page, that is, `/`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new route handler to handle the login using Facebook, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE136]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE137]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE138]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE139]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE140]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE141]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE142]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE143]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE144]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE145]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE146]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE147]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE148]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE149]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE150]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE151]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE152]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This method first checks whether a user is already authorized with Facebook.
    If not, it redirects the app to Facebook’s login handler, where the user will
    need to follow the steps outlined by Facebook and give the necessary permissions
    to our application in order to access the requested user details, as per the settings
    in `make_facebook_blueprint`. Once the user is authorized with Facebook, the method
    then requests a user’s details, such as their name and email address, from Facebook.
    Using these user details, it is determined whether a user already exists with
    the email entered or not. If not, a new user is created and logged in; otherwise,
    the existing user is directly logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, modify the `login.html` template to allow for broader social login
    functionality. This will act as a placeholder for the Facebook login, as well
    as a number of alternative social logins, which we will cover later. The code
    for the updated `login.html` template is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE153]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE154]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE155]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE156]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE157]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE158]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE159]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE160]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE161]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE162]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE163]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE164]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE165]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE166]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE167]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE168]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE169]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE170]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE171]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE172]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE173]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE174]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE175]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE176]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE177]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE178]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE179]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE180]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE181]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE182]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE183]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE184]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, we created a tabbed structure in which the first tab
    is our conventional login and the second tab corresponds to social logins.
  prefs: []
  type: TYPE_NORMAL
- en: Currently, there is just one option for Facebook available. More options will
    be added in upcoming recipes. Note that the link is currently simple; we can always
    add styles and buttons as needed later on.
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The login page has a new tab that provides an option for the user to log in
    using **Social Logins**, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – Social Logins page](img/B19111_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – Social Logins page
  prefs: []
  type: TYPE_NORMAL
- en: When we click on the **Login via Facebook** link, the application is taken to
    Facebook, where the user will be asked for their login details and permission.
    Once the permission is granted, the user will be logged in to the application.
  prefs: []
  type: TYPE_NORMAL
- en: Using Google for authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just like we did for Facebook, we can integrate our application to enable login
    using Google.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Start by building over the last recipe. It is easy to implement Google authentication
    by simply leaving out the Facebook-specific elements as it is.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a new project from the Google developer console ([https://console.developers.google.com](https://console.developers.google.com)).
    In the **APIs and Services** section, click on **Credentials**. Then, create a
    new client ID for the web application; this ID will provide the credentials needed
    for OAuth 2 to work. You will also need to configure the OAuth consent screen
    before a client ID can be created, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figu\uFEFFre 6.9 – Google app configuration](img/B19111_06_09.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – Google app configuration
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable Google authentication in your application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, start with the configuration part in `my_app/__init__.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE185]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE186]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE187]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE188]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE189]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE190]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE191]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE192]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, we registered the Google blueprint provided by
    Flask-Dance with our application for authentication. This blueprint will be created
    in the `views` file, which we will take a look at next. Note the additional configuration
    option, `OAUTHLIB_RELAX_TOKEN_SCOPE`. This is suggested for use when implementing
    Google authentication because Google tends to provide data that sometimes diverges
    from the scope mentioned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, modify the views, that is, `my_app/auth/views.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE193]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE194]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE195]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE196]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE197]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE198]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE199]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE200]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE201]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE202]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, `make_google_blueprint` reads `GOOGLE_OAUTH_CLIENT_ID`
    and `GOOGLE_OAUTH_CLIENT_SECRET` from the application configuration and takes
    care of all the OAuth-related handling in the background. While making the Google
    blueprint, we set `scope` to `openid`, `https://www.googleapis.com/auth/userinfo.email`,
    and `https://www.googleapis.com/auth/userinfo.profile`, because we want to use
    a user’s email address as their unique username and display name after login.
    `openid` is required in `scope` because Google prefers it.
  prefs: []
  type: TYPE_NORMAL
- en: We also set `redirect_to` to `auth.google_login` so Google is able to route
    the application back to this URL after authentication has succeeded. If this option
    is not set, the application will be automatically redirected to the home page,
    that is, `/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a new route handler that handles the login using Google with the
    following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE203]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE204]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE205]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE206]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE207]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE208]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE209]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE210]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE211]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE212]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE213]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE214]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE215]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE216]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE217]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE218]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE219]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, the method first checks whether the user is already authorized with Google.
    If not, it redirects the app to the Google login handler, where the user will
    need to follow the steps outlined by Google and give permission to our application
    so it can access the requested user details. Once the user is authorized with
    Google, the method requests the user’s details, including their name and email
    address, from Google. Using these user details, it is determined whether a user
    already exists with this email or not. If not, a new user is created and logged
    in; otherwise, the existing user is directly logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, modify the login template, `login.html`, to allow the Google login.
    Add the following line inside the `social-logins` tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE220]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE221]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE222]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Google login works in a manner similar to the Facebook login from the previous
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Using Twitter for authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: OAuth was actually born while writing the OpenID API for Twitter. In this recipe,
    we will integrate Twitter login with our application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue by building over the *Using Google for authentication* recipe.
    It is easy to implement Twitter authentication – simply leave out the Facebook
    or Google-specific parts from the previous authentication recipes.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we have to create an application from the Twitter **Application Management**page
    ([https://developer.twitter.com/en/portal/dashboard](https://developer.twitter.com/en/portal/dashboard)).
    It will automatically create consumer API keys (**API Key** and **API Key Secret**)
    for us to use, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.10 – Twitter app configuration](img/B19111_06_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Twitter app configuration
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable Twitter authentication for your application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, start with the configuration part in `my_app/__init__.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE223]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE224]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE225]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE226]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE227]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE228]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, we registered the Twitter blueprint provided
    by Flask-Dance with our application for authentication. This blueprint will be
    created in the `views` file, which we will take a look at next.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, modify the views, that is, `my_app/auth/views.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE229]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE230]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE231]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE232]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code, `make_twitter_blueprint` reads `TWITTER_OAUTH_CLIENT_KEY`
    and `TWITTER_OAUTH_CLIENT_SECRET` from the application configuration and takes
    care of all the OAuth-related handling in the background. There is no need to
    set `scope`, as we did during Facebook and Google authentication, as this recipe
    will use a Twitter handle as the username, which is provided by default.
  prefs: []
  type: TYPE_NORMAL
- en: We also set `redirect_to` to `auth.twitter_login` so that Twitter can route
    the application back to this URL after authentication has succeeded. If this option
    is not set, the application will be automatically redirected to the home page,
    that is, `/`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, create a new route handler that handles the login using Twitter, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE233]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE234]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE235]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE236]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE237]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE238]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE239]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE240]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE241]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE242]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE243]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE244]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE245]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE246]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE247]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE248]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE249]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE250]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding method first checks whether the user is already authorized with
    Twitter. If not, it redirects the app to the Twitter login handler, where the
    user will need to follow the steps outlined by Twitter and give permission to
    our application so it can access the requested user details. Once the user is
    authorized with Twitter, the method requests the user’s details, including their
    screen name or handle from Twitter. Using these user details, it is determined
    whether a user already exists with this Twitter handle or not. If not, a new user
    is created and logged in; otherwise, the existing user is directly logged in.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, modify the login template, `login.html`, to allow the Twitter login.
    Add the following line inside the `social-logins` tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE251]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE252]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe works in a manner similar to the Facebook and Google logins from
    previous recipes.
  prefs: []
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, we can integrate LinkedIn, GitHub, and scores of other third-party
    providers that provide support for login and authentication using OAuth. It’s
    up to you to implement any more integrations. The following links have been added
    for your reference:'
  prefs: []
  type: TYPE_NORMAL
- en: '*LinkedIn*: [https://learn.microsoft.com/en-us/linkedin/shared/authentication/authentication](https://learn.microsoft.com/en-us/linkedin/shared/authentication/authentication)'
  prefs: []
  type: TYPE_NORMAL
- en: '*GitHub*: [https://docs.github.com/en/developers/apps/building-oauth-apps](https://docs.github.com/en/developers/apps/building-oauth-apps)'
  prefs: []
  type: TYPE_NORMAL
- en: Authenticating with LDAP
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: LDAP is essentially an internet protocol for looking up contact information
    about users, certificates, network pointers, and more from a server, where the
    data is stored in a directory-style structure. Of LDAP’s multiple use cases, the
    most popular is the single sign-on functionality, where a user can access multiple
    services by logging in to just one, as the credentials are shared across the system.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create a login page similar to the one we created in
    the first recipe of this chapter, *Creating a simple session-based authentication*.
    The user can log in using their LDAP credentials. If the credentials are successfully
    authenticated on the provided LDAP server, the user is logged in.
  prefs: []
  type: TYPE_NORMAL
- en: If you already have an LDAP server that you can access, feel free to skip the
    LDAP setup instructions explained in this section.
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to get access to an LDAP server. This can be a server already
    hosted somewhere, or you can create your own local LDAP server. The easiest way
    to spawn a demo LDAP server is by using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Important
  prefs: []
  type: TYPE_NORMAL
- en: Here, we are assuming that you have prior experience in Docker and have Docker
    installed on your machine. If not, please refer to [https://docs.docker.com/get-started/](https://docs.docker.com/get-started/).
  prefs: []
  type: TYPE_NORMAL
- en: 'To create an LDAP server using Docker, run the following command on the terminal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE253]'
  prefs: []
  type: TYPE_PRE
- en: 'Once the preceding command has successfully executed, test the server by searching
    for an example user with the username and password `admin` and `admin`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE254]'
  prefs: []
  type: TYPE_PRE
- en: The successful execution of the preceding command indicates that the LDAP server
    is running and is ready for use.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Refer to `https:/``/``github.``com/``osixia/``docker-``openldap` for more information
    on the OpenLDAP Docker image.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, install the Python library that will help our application talk to the
    LDAP server with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE255]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To enable LDAP authentication for your application, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'As always, start with the configuration part in `my_app/__init__.py`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE256]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE257]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE258]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE259]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE260]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE261]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the preceding code snippet, we imported `ldap`, then created an app configuration
    option that points to the LDAP server address. This is followed by the creation
    of a simple function, `get_ldap_connection`, which creates the LDAP connection
    object on the server and then returns that connection object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, modify the views, that is, `my_app/auth/views.py`, where a new route,
    `ldap_login`, is created to facilitate login via LDAP, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE262]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE263]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE264]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE265]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE266]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE267]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE268]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE269]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE270]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE271]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE272]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE273]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE274]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE275]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE276]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE277]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE278]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE279]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE280]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE281]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE282]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE283]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE284]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE285]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE286]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE287]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE288]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE289]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE290]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE291]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE292]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE293]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE294]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE295]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE296]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE297]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Here, we first checked whether the user is already authenticated. If they were,
    we redirected them to the home page; otherwise, we moved ahead. We then used `LoginForm`,
    which we created in the *Creating a simple session-based authentication* recipe,
    as we also require a username and password. Next, we validated the form and then
    fetched the connection object using `get_ldap_connection`. After, the application
    tried to authenticate the user from the LDAP server using `simple_bind_s`. Notice
    the string inside this method, `'cn=%s,dc=example,dc=org'` – this string might
    vary for each LDAP server depending on the configurations internal to the server.
    You are urged to contact your LDAP server admin if these details are not known.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is successfully authenticated, then a new user record is created
    in our local database and the user is logged in. Otherwise, the LDAP connection
    fails and throws the error `INVALID_CREDENTIALS`, which is then caught and the
    user is notified accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: We just witnessed the power of reusable components! As you can see, `LoginForm`
    has now been used for two different purposes. This is a good coding practice.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, modify the login template, `login.html`, to allow the LDAP login,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE298]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE299]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE300]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE301]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE302]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE303]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE304]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE305]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE306]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE307]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE308]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE309]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE310]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE311]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE312]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE313]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE314]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE315]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE316]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE317]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE318]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE319]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE320]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE321]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE322]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE323]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE324]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE325]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE326]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE327]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE328]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE329]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE330]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE331]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE332]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE333]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE334]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE335]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE336]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE337]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE338]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE339]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE340]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE341]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE342]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE343]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE344]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE345]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE346]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE347]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE348]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE349]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE350]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE351]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE352]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE353]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE354]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '[PRE355]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The new login screen with the LDAP tab should look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.11 – LDAP Login screen](img/B19111_06_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – LDAP Login screen
  prefs: []
  type: TYPE_NORMAL
- en: Here, the user simply needs to enter their username and password. If the credentials
    are correct, the user will be logged in and taken to the home screen; otherwise,
    an error will occur.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can read more about LDAP at [https://en.wikipedia.org/wiki/Lightweight_
    Directory_Access_Protocol](https://en.wikipedia.org/wiki/Lightweight_Directory_Access_Protocol)
    and [https://www.python-ldap.org](https://www.python-ldap.org).
  prefs: []
  type: TYPE_NORMAL
