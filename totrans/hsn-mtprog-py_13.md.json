["```py\n    class Branch:\n        def __init__(self, branch_id, branch_street, \n                     branch_city, branch_state, \n                     branch_zip, product, sales, invoice):\n            self.branch_id = branch_id\n            self.branch_street = branch_street\n            self.branch_city = branch_city\n            self.branch_state = branch_state\n            self.branch_zip = branch_zip\n            self.product = product\n            self.sales = sales\n            self.invoice = invoice        \n        def get_product(self):\n            return self.product\n        def get_sales(self):\n            return self.sales\n        def get_invoice(self):\n            return self.invoice\n    ```", "```py\n    Branch.mro()\n    ```", "```py\n[__main__.Branch, object]\n```", "```py\n    class Branch:\n        def __init__(self, branch, sales, product):\n            self.branch = branch\n            self.sales = sales\n            self.product = product\n        def set_branch(self, value):\n            self.branch = value          \n\n        def set_sales(self, value):\n            self.sales = value            \n        def set_product(self, value):\n            self.product = value        \n        def calc_tax(self):\n            branch = self.branch\n            product = self.product\n            sales = self.sales\n            pricebeforetax = sales['purchase_price'] + \n                             sales['purchase_price'] * \n                             sales['profit_margin']\n            finalselling_price = pricebeforetax + \n                (pricebeforetax * sales['tax_rate'])\n            sales['selling_price'] = finalselling_price\n            return branch, product, sales\n    ```", "```py\n    class NYC(Branch):\n        def __init__(self, intercitybranch):\n            self.intercitybranch = intercitybranch\n\n        def set_management(self, value):\n            self.intercitybranch = value\n\n        def calc_tax_nyc(self):\n            branch = self.branch\n            intercitybranch = self.intercitybranch\n            product = self.product\n            sales = self.sales\n            pricebeforetax = sales['purchase_price'] + \n                             sales['purchase_price'] * \n                             sales['profit_margin']\n            finalselling_price = pricebeforetax + \n                (pricebeforetax * (sales['tax_rate'] + \n                 sales['local_rate']))  \n            sales['selling_price'] = finalselling_price\n            return branch, intercitybranch, product, \n                   sales    \n    NYC.mro()\n    ```", "```py\n[__main__.NYC, __main__.Branch, object]\n```", "```py\n    intercitybranch = {\n        }\n    branch_manhattan = NYC(intercitybranch)\n    ```", "```py\n    branch_manhattan.set_management({'regionalManager' : 'John M',\n        'branchManager' : 'Tom H',\n        'subbranch_id' : '2021-01' })\n    ```", "```py\n    branch = {'branch_id' : 2021,\n    'branch_street' : '40097 5th Main Street',\n    'branchBorough' : 'Manhattan',\n    'branch_city' : 'New York City',\n    'branch_state' : 'New York',\n    'branch_zip' : 11007}\n    product = {'productId' : 100002,\n        'productName' : 'WashingMachine',\n        'productBrand' : 'Whirlpool'  \n    }\n    sales = {\n        'purchase_price' : 450,\n        'profit_margin' : 0.19,\n        'tax_rate' : 0.4,\n        'local_rate' : 0.055      \n    }\n    branch_manhattan.set_branch(branch)\n    branch_manhattan.set_product(product)\n    branch_manhattan.set_sales(sales)\n    ```", "```py\n    branch_manhattan.calc_tax_nyc()\n    ```", "```py\n    ({'branch_id': 2021,\n      'branch_street': '40097 5th Main Street',\n      'branchBorough': 'Manhattan',\n      'branch_city': 'New York City',\n      'branch_state': 'New York',\n      'branch_zip': 11007},\n     {'regionalManager': 'John M',\n      'branchManager': 'Tom H',\n      'subbranch_id': '2021-01'},\n     {'productId': 100002,\n      'productName': 'WashingMachine',\n      'productBrand': 'Whirlpool'},\n     {'purchase_price': 450,\n      'profit_margin': 0.19,\n      'tax_rate': 0.4,\n      'local_rate': 0.055,\n      'selling_price': 779.1525})\n    ```", "```py\n    class Product:\n        _product_id = 100902\n        _product_name = 'Iphone X'\n        _product_category = 'Electronics'\n        _unit_price = 700\n\n        def get_product(self):\n            return self._product_id, self._productName, self._product_category, self._unit_price\n    ```", "```py\n    class Branch:\n        _branch_id = 2021\n        _branch_street = '40097 5th Main Street'\n        _branch_borough = 'Manhattan'\n        _branch_city = 'New York City'\n        _branch_state = 'New York'\n        _branch_zip = 11007\n\n        def get_branch(self):\n            return self._branch_id, self._branch_street, \n                self._branch_borough, self._branch_city, \n                self._branch_state, self._branch_zip\n    ```", "```py\n    class Sales(Product, Branch):\n        date = '08/02/2021'\n        def get_sales(self):\n            return self.date, Product.get_product(self), \n                   Branch.get_branch(self)\n    ```", "```py\n    Sales.mro()\n    ```", "```py\n    [__main__.Sales, __main__.Product, __main__.Branch, object]\n    ```", "```py\n    class Invoice(Branch, Product):\n        date = '08/02/2021'\n        def get_invoice(self):\n            return self.date, Branch.get_branch(self), \n                   Product.get_product(self)\n    ```", "```py\n    Invoice.mro()\n    ```", "```py\n    [__main__.Invoice, __main__.Branch, __main__.Product, object]\n    ```", "```py\n    class StoreCoupon:\n        productName = \"Strawberry Ice Cream\"\n        product_category = \"Desserts\"\n        brand = \"ABCBrand3\"\n        store = \"Los Angeles Store\"\n        expiry_date = \"10/1/2021\"\n        quantity = 10\n\n        def generate_coupon(self):\n            import random\n            coupon_id =  random.sample(range(\n                         100000000000,900000000000),2)\n            for i in coupon_id:\n                print('***********------------------**************')\n                print('Product:', self.productName)\n                print('Product Category:', \n                       self.product_category)\n                print('Coupon ID:', i)\n                print('Brand:', self.brand)\n                print('Store:', self.store)\n                print('Expiry Date:', self.expiry_date)\n                print('Quantity:', self.quantity)\n                print('***********------------------\n                       **************')\n    ```", "```py\n    class SendStoreCoupon(StoreCoupon):\n        pass\n    SendStoreCoupon.mro()\n    ```", "```py\n    [__main__.SendStoreCoupon, __main__.StoreCoupon, object]\n    ```", "```py\n    class SendCoupon(SendStoreCoupon):\n        pass\n    SendCoupon.mro()\n    ```", "```py\n    [__main__.SendCoupon,\n      __main__.SendStoreCoupon,\n     __main__.StoreCoupon,\n     object]\n    ```", "```py\n    coupon = SendCoupon()\n    coupon.generate_coupon()\n    ```", "```py\n    ***********------------------**************\n    Product: Strawberry Ice Cream\n    Product Category: Desserts\n    Coupon ID: 532129664296\n    Brand: ABCBrand3\n    Store: Los Angeles Store\n    Expiry Date: 10/1/2021\n    Quantity: 10\n    ***********------------------**************\n    ***********------------------**************\n    Product: Strawberry Ice Cream\n    Product Category: Desserts\n    Coupon ID: 183336814176\n    Brand: ABCBrand3\n    Store: Los Angeles Store\n    Expiry Date: 10/1/2021\n    Quantity: 10\n    ***********------------------**************\n    ```", "```py\n    class ManufacturerCoupon:\n        productName = \"Strawberry Ice Cream\"\n        product_category = \"Desserts\"\n        brand = \"ABCBrand3\"\n        manufacturer = \"ABC Manufacturer\"\n        expiry_date = \"10/1/2021\"\n        quantity = 10\n\n        def generate_coupon(self):\n            import random\n            coupon_id =  random.sample(range(\n                         100000000000,900000000000),2)\n            for i in coupon_id:\n                print('***********------------------**************')\n                print('Product:', self.productName)\n                print('Product Category:', \n                       self.product_category)\n                print('Coupon ID:', i)\n                print('Brand:', self.brand)\n                print('Manufacturer:', self.manufacturer)\n                print('Expiry Date:', self.expiry_date)\n                print('Quantity:', self.quantity)\n                print('***********------------------\n                       **************')\n    ```", "```py\n    class SendCoupon(ManufacturerCoupon,SendStoreCoupon):\n        pass\n    SendCoupon.mro()\n    ```", "```py\n    [__main__.SendCoupon,\n     __main__.ManufacturerCoupon,\n     __main__.SendStoreCoupon,\n     __main__.StoreCoupon,\n     object]\n    ```", "```py\n    coupon = SendCoupon()\n    coupon.generate_coupon()\n    ```", "```py\n    ***********------------------**************\n    Product: Strawberry Ice Cream\n    Product Category: Desserts\n    Coupon ID: 262335232934\n    Brand: ABCBrand3\n    Manufacturer: ABC Manufacturer\n    Expiry Date: 10/1/2021\n    Quantity: 10\n    ***********------------------**************\n    ***********------------------**************\n    Product: Strawberry Ice Cream\n    Product Category: Desserts\n    Coupon ID: 752333180295\n    Brand: ABCBrand3\n    Manufacturer: ABC Manufacturer\n    Expiry Date: 10/1/2021\n    Quantity: 10\n    ***********------------------**************\n    ```", "```py\n    class SendCoupon(SendStoreCoupon,ManufacturerCoupon):\n        pass\n    SendCoupon.mro()\n    ```", "```py\n    [__main__.SendCoupon,\n     __main__.SendStoreCoupon,\n     __main__.StoreCoupon,\n     __main__.ManufacturerCoupon,\n     object]\n    ```", "```py\n    coupon = SendCoupon()\n    coupon.generate_coupon()\n    ```", "```py\n    ***********------------------**************\n    Product: Strawberry Ice Cream\n    Product Category: Desserts\n    Coupon ID: 167466225705\n    Brand: ABCBrand3\n    Store: Los Angeles Store\n    Expiry Date: 10/1/2021\n    Quantity: 10\n    ***********------------------**************\n    ***********------------------**************\n    Product: Strawberry Ice Cream\n    Product Category: Desserts\n    Coupon ID: 450583881080\n    Brand: ABCBrand3\n    Store: Los Angeles Store\n    Expiry Date: 10/1/2021\n    Quantity: 10\n    ***********------------------**************\n    ```", "```py\n    class CommonCounter():\n        def __init__(self,items,name):\n            self.items = items\n            self.name = name\n        def return_cart(self):\n            cartItems = []\n            for i in self.items:\n                cartItems.append(i)\n            return cartItems\n        def goto_counter(self):\n            countername = self.name\n            return countername\n    CommonCounter.mro()\n    ```", "```py\n    [__main__.CommonCounter, object]\n    ```", "```py\n    class CheckItems():\n        def __init__(self, item_type = None):\n            self.item_type = item_type\n\n        def review_items(self, item_type = None):\n            veg_cart = ['Vegetables', 'Dairy', 'Fruits']\n            if (item_type == 'Electronics'):\n                print(\"Move to Electronics Counter\")\n            elif (item_type in veg_cart):        \n                print(\"Move to Vege Counter\") \n    CheckItems.mro()\n    ```", "```py\n    [__main__.CheckItems, object]\n    ```", "```py\n    class ElectronicsCounter(CommonCounter,CheckItems):\n        def __init__(status = None):\n            self.status = status\n        def test_electronics(self):\n            teststatus = []\n            for i in self.status:\n                teststatus.append(i)\n            return teststatus\n    ElectronicsCounter.mro()\n    ```", "```py\n    [__main__.ElectronicsCounter,\n     __main__.CommonCounter,\n     __main__.CheckItems,\n     object]\n    ```", "```py\n    class VegeCounter(CheckItems,CommonCounter):\n        def __init__(weights = None):\n            self.weights = weights\n        def weigh_items(self):\n            item_weight = dict(zip(self.items, \n                                   self.weights))\n            return item_weight\n    VegeCounter.mro()\n    ```", "```py\n    [__main__.VegeCounter, \n    __main__.CheckItems, \n    __main__.CommonCounter, \n    object]\n    ```", "```py\n    class ScanCode(ElectronicsCounter,VegeCounter):\n        pass\n    ```"]