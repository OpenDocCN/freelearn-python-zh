["```py\n#counter.py\nfrom collections import Counter\n#applying counter on a string object\nprint(Counter(\"people\"))\n#applying counter on a list object\nmy_counter = Counter([1,2,1,2,3,4,1,3])\nprint(my_counter.most_common(1))\nprint(list(my_counter.elements()))\n#applying counter on a dict object\nprint(Counter({'A': 2, 'B': 2, 'C': 2, 'C': 3}))\n```", "```py\nCounter({'p': 2, 'e': 2, 'o': 1, 'l': 1})\n[(1, 3)]\n[1, 1, 1, 2, 2, 3, 3, 4]\nCounter({'C': 4, 'A': 2, 'B': 2}) \n```", "```py\n#zip.py\nnum_list = [1, 2, 3, 4, 5]\nlett_list = ['alpha', 'bravo', 'charlie']\nzipped_iter = zip(num_list,lett_list)\nprint(next(zipped_iter))\nprint(next(zipped_iter))\nprint(list(zipped_iter))\n```", "```py\n(1, 'alpha')\n(2, 'bravo')\n[(3, 'charlie'), (4, 'delta')]\n```", "```py\n    #itertools_count.py\n    import itertools\n    iter = itertools.count(10, 2)\n    print(next(iter))\n    print(next(iter))\n    ```", "```py\n    letters = {'A','B','C'}\n    for letter in itertools.cycle(letters):\n        print(letter)\n    ```", "```py\n    for x in itertools.repeat('Python', times=5):\n        print(x)\n    ```", "```py\n    #accumulate function without providing an aggregator function for any accumulated results. By default, the accumulate function will add two numbers (1 and 3) from the original list. This process is repeated for all numbers, and the results are stored inside an iterable (in our case, this is res). In the second part of this code example, we provided the mul (multiplication) function from the operator module, and this time, the accumulated results are based on the multiplication of two numbers.\n    ```", "```py\n    list1 = ['A','B','C']\n    list2 = ['W','X','Y','Z']\n    chained_iter = itertools.chain(list1, list2)\n    for x in chained_iter:\n        print(x)\n    ```", "```py\n    letters = ['A','B','C']\n    selector = [True, 0, 1]\n    for x in selector iterable, we can use True*/*False or 1*/*0. The output of this program will be the letters A and C.\n    ```", "```py\n    #itertools_groupby.py\n    import itertools\n    mylist = [(\"A\", 100), (\"A\", 200), (\"B\", 30), \\\n    (\"B\", 10)]\n    def get_key(group):\n        return group[0]\n    for key, grp in itertools.groupby(mylist, get_key):\n        print(key + \"-->\", list(grp))\n    ```", "```py\n    letters = ['A','B','C']\n    iter1, iter2 = itertools.tee(letters)\n    for x in iter1:\n        print(x)\n    for x in iter2:\n        print(x)\n    ```", "```py\nmap(func, iter, ...)\n```", "```py\n#map1.py to get square of each item in a list\nmylist = [1, 2, 3, 4, 5]\nnew_list = []\nfor item in mylist:\n    square = item*item\n    new_list.append(square)\nprint(new_list)\n```", "```py\n[1, 4, 9, 16, 25]\n```", "```py\n# map2.py to get square of each item in a list\ndef square(num):\n    return num * num\nmylist = [1, 2, 3, 4, 5]\nnew_list = list(map(square, mylist))\nprint(new_list)\n```", "```py\n# map3.py to get product of each item in two lists\ndef product(num1, num2):\n    return num1 * num2\nmylist1 = [1, 2, 3, 4, 5]\nmylist2 = [6, 7, 8, 9]\nnew_list = list(map(product, mylist1, mylist2))\nprint(new_list)\n```", "```py\n[6, 14, 24, 36] \n```", "```py\n filter (func, iter)\n```", "```py\n# filter1.py to get even numbers from a list\ndef is_even(num):\n    return (num % 2 == 0)\nmylist = [1, 2, 3, 4, 5,6,7,8,9]\nnew_list = list(filter(is_even, mylist))\nprint(new_list)\n```", "```py\n[2, 4, 6, 8]\n```", "```py\nreduce (func, iter[,initial])\n```", "```py\n# reduce1.py to get sum of numbers from a list\nfrom functools import reduce\ndef seq_sum(num1, num2):\n    return num1+num2\nmylist = [1, 2, 3, 4, 5]\nresult = reduce(seq_sum, mylist)\nprint(result) \n```", "```py\nresult = reduce(seq_sum, mylist, 10)\n```", "```py\n# lambda1.py to get square of each item in a list\nmylist = [1, 2, 3, 4, 5]\nnew_list = list(map(lambda x: x*x, mylist))\nprint(new_list)\n# lambda2.py to get even numbers from a list\nmylist = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nnew_list = list(filter(lambda x: x % 2 == 0, mylist))\nprint(new_list)\n# lambda3.py to get product of corresponding item in the\\\n two lists\nmylist1 = [1, 2, 3, 4, 5]\nmylist2 = [6, 7, 8, 9]\nnew_list = list(map(lambda x,y: x*y, mylist1, mylist2))\nprint(new_list)\n```", "```py\n#inner1.py\ndef outer_hello():\n    print (\"Hello from outer function\")\n    def inner_hello():\n        print(\"Hello from inner function\")\n    inner_hello()\nouter_hello()\n```", "```py\ndef outer_fn(x, y):\n    def get_prefix(s):\n        return s[:2] \n    x2 = get_prefix(x)\n    y2 = get_prefix(y)\n    #process x2 and y2 further\n```", "```py\n# inner2.py\ndef power_calc_factory(base):\n    def power_calc(exponent):\n        return base**exponent\n    return power_calc\npower_calc_2 = power_gen_factory(2)\npower_calc_3 = power_gen_factory(3)\nprint(power_calc_2(2))\nprint(power_calc_2(3))\nprint(power_calc_3(2))\nprint(power_calc_3(4))\n```", "```py\n# decorator1.py\nfrom datetime import datetime\ndef add_timestamps(myfunc):\n    def _add_timestamps():\n        print(datetime.now())\n        myfunc()\n        print(datetime.now())\n    return _add_timestamps\n@add_timestamps\ndef hello_world():\n    print(\"hello world\")\nhello_world()\n```", "```py\nhello = add_timestamps(hello_world)\nhello()\n```", "```py\n# decorator2.py\nfrom datetime import datetime\nfrom functools import wraps\ndef add_timestamps(myfunc):\n    @wraps(myfunc)\n    def _add_timestamps():\n        print(datetime.now())\n        myfunc()\n        print(datetime.now())\n    return _add_timestamps\n@add_timestamps\ndef hello_world():\n    print(\"hello world\")\nhello_world()\nhelp(hello_world)\nprint(hello_world)\n```", "```py\n# decorator3.py\nfrom functools import wraps\ndef power(func):\n    @wraps(func)\n    def inner_calc(*args, **kwargs):\n        print(\"Decorating power func\")\n        n = func(*args, **kwargs)\n        return n\n    return inner_calc\n@power\ndef power_base2(n):\n    return 2**n\nprint(power_base2(3))\n```", "```py\n# decorator4.py\nfrom functools import wraps\ndef power_calc(base):\n    def inner_decorator(func):\n        @wraps(func)\n        def inner_calc(*args, **kwargs):\n            exponent = func(*args, **kwargs)\n            return base**exponent\n        return inner_calc\n    return inner_decorator\n@power_calc(base=3)\ndef power_n(n):\n    return n\nprint(power_n(2))\nprint(power_n(4))\n```", "```py\n# decorator5.py (part 1)\nfrom datetime import datetime\nfrom functools import wraps\ndef add_timestamp(func):\n    @wraps(func)\n    def inner_func(*args, **kwargs):\n        res = \"{}:{}\\n\".format(datetime.now(),func(*args,\\\n          **kwargs))\n        return res\n    return inner_func\ndef file(func):\n    @wraps(func)\n    def inner_func(*args, **kwargs):\n        res = func(*args, **kwargs)\n        with open(\"log.txt\", 'a') as file:\n           file.write(res)\n        return res\n    return inner_func\ndef console(func):\n    @wraps(func)\n    def inner_func(*args, **kwargs):\n        res = func(*args, **kwargs)\n        print(res)\n        return res\n    return inner_func\n```", "```py\n#decorator5.py (part 2)\n@file\n@add_timestamp\ndef log(msg):\n    return msg\n@file\n@console\n@add_timestamp\ndef log1(msg):\n    return msg\n@console\n@add_timestamp\ndef log2(msg):\n    return msg\nlog(\"This is a test message for file only\")\nlog1(\"This is a test message for both file and console\")\nlog2(\"This message is for console only\")\n```", "```py\nroot_dict = {'1': {'A': {dictA}, 'B':{dictB}},\n             '2': [list2],\n             '3': {'X': val1,'Y':val2,'Z': val3}\n            }\n```", "```py\n# dictionary1.py\ndict1 = {100:{'name':'John', 'age':24},\n         101:{'name':'Mike', 'age':22},\n         102:{'name':'Jim', 'age':21} }\nprint(dict1)\nprint(dict1.get(100))\n```", "```py\n# dictionary2.py\n#defining inner dictionary 1\nstudent100 = {'name': 'John', 'age': 24}\n#defining inner dictionary 2\nstudent101 = {}\nstudent101['name'] = 'Mike'\nstudent101['age'] = '22'\n#assigning inner dictionaries 1 and 2 to a root dictionary\ndict1 = {}\ndict1[100] = student100\ndict1[101] = student101\n#creating inner dictionary directly inside a root \\\ndictionary\ndict1[102] = {}\ndict1[102]['name'] = 'Jim'\ndict1[102]['age'] = '21'\nprint(dict1)\nprint(dict1.get(102))\n```", "```py\n# dictionary3.py\ndict1 = {100:{'name':'John', 'age':24},\n         101:{'name':'Mike', 'age':22},\n         102:{'name':'Jim', 'age':21} }\nprint(dict1.get(100))\nprint(dict1.get(100).get('name'))\nprint(dict1[101])\nprint(dict1[101]['age'])\n```", "```py\n# dictionary4.py\ndict1 = {100:{'name':'John', 'age':24},\n         101:{'name':'Mike', 'age':22},\n         102:{'name':'Jim', 'age':21} }\ndel (dict1[101]['age'])\nprint(dict1)\ndict1[102].pop('age')\nprint(dict1)\n```", "```py\n#list1.py\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 0]\nlist2 = [x+1 for x in list1]\nprint(list2)\n```", "```py\nlist2 = []\nfor x in list1:\n    list2.append(x+1)\n```", "```py\n#list2.py\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nlist2 = [x for x in list1 if x % 2 == 0]\nprint(list2)\n```", "```py\n#dictcomp1.py\ndict1 = {'a': 100, 'b': 200, 'c': 300}\ndict2 = {x:int(y/2) for (x, y) in dict1.items() if y <=200}\nprint(dict2)\n```", "```py\nDict2 = {}\nfor x,y in dict1.items():\n    if y <= 200:\n        dict2[x] = int(y/2)\n```", "```py\n#setcomp1.py\nlist1 = [1, 2, 6, 4, 5, 6, 7, 8, 9, 10, 8]\nset1 = {x for x in list1 if x % 2 == 0}\nprint(set1)\n```", "```py\nSet1 = set()\nfor x in list1:\n    if x % 2 == 0:\n        set1.add(x)\n```", "```py\n# pandas1.py\nimport pandas as pd\nweekly_data = {'day':['Monday','Tuesday', 'Wednesday', \\\n'Thursday','Friday', 'Saturday', 'Sunday'],\n               'temperature':[40, 33, 42, 31, 41, 40, 30],\n               'condition':['Sunny','Cloudy','Sunny','Rain'\n               ,'Sunny','Cloudy','Rain']\n        }\ndf = pd.DataFrame(weekly_data)\nprint(df)\n```", "```py\n    df_new = df.set_index('day')\n    ```", "```py\n    # pandas2.py\n    weekly_data = <same as previous example>\n    df = pd.DataFrame(weekly_data)\n    df.index = ['MON','TUE','WED','THU','FRI','SAT','SUN']\n    print(df)\n    ```", "```py\n# pandas3.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\ndf.index = ['MON', 'TUE','WED','THU','FRI','SAT','SUN']\n```", "```py\n    print(df.loc['TUE'])\n    print(df.loc[['TUE','WED']])\n    ```", "```py\n    print(df.loc['FRI','temp'])\n    ```", "```py\n    #Provide a row with index 2\n    print(df.iloc[2])\n    ```", "```py\n    print(df.iloc[2,2])\n    ```", "```py\n df.loc['TST'] = ['Test day 1', 50, 'NA']\n```", "```py\ndf.loc[8] = ['Test day 2', 40, 'NA']\n```", "```py\n# pandas4.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\ndf.index = ['MON', 'TUE','WED','THU','FRI','SAT','SUN']\ndf.loc['TST1'] = ['Test day 1', 50, 'NA']\ndf.loc[7] = ['Test day 2', 40, 'NA']\nprint(df)\n```", "```py\n# pandas5.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\n#Adding a new column and then updating it\ndf['Humidity1'] = [60, 70, 65,62,56,25,'']\ndf['Humidity1'] = [60, 70, 65,62,56,251,'']\n#Inserting a column at column index of 2 using the insert method\ndf.insert(2, \"Humidity2\",[60, 70, 65,62,56,25,''])\n#Adding two columns using the assign method\ndf1 = df.assign(Humidity3 = [60, 70, 65,62,56,25,''],  Humidity4 = [60, 70, 65,62,56,25,''])\nprint(df1)\n```", "```py\n# pandas6.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\ndf.index = ['MON', 'TUE','WED','THU','FRI','SAT','SAT']\nprint(df)\nprint(df.reset_index(drop=True))\n```", "```py\n#pandas7.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\ndf.index = ['MON', 'TUE','WED','THU','FRI','SAT','SUN']\nprint(df)\ndf1= df.drop(index=['SUN','SAT'])\ndf2= df1.drop(columns=['condition'])\nprint(df2)\n```", "```py\n#pandas8.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\ndf.index = ['MON', 'TUE','WED','THU','FRI','SAT','SUN']\ndf1=df.rename(index={'SUN': 'SU', 'SAT': 'SA'})\ndf2=df1.rename(columns={'condition':'cond'})\nprint(df2)\n```", "```py\n# pandastrick1.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\n```", "```py\n    df.replace(40,39, inplace=True)\n    ```", "```py\n    df.replace(\"Sunny\",\"Sun\",inplace=True)\n    ```", "```py\n    df.replace(to_replace=\"^Cl.*\",value=\"Cloud\", inplace=True,regex=True)\n    #or we can apply on a specific column as well. \n    df[\"condition\"].replace(to_replace=\"^Cl.*\",value=\"Cloud\", inplace=True,regex=True)\n    ```", "```py\n    df.replace([\"Monday\",\"Tuesday\"],[\"Mon\",\"Tue\"], inplace=True)\n    ```", "```py\n    df.replace({\"Wednesday\":\"Wed\",\"Thursday\":\"Thu\"}, inplace=True)\n    ```", "```py\n    df.replace({\"day\":\"Friday\"}, {\"day\":\"Fri\"}, inplace=True)\n    ```", "```py\n    df.replace({\"day\":{\"Saturday\":\"Sat\", \"Sunday\":\"Sun\"},\n                \"condition\":{\"Rainy\":\"Rain\"}}, inplace=True)\n    ```", "```py\n# pandastrick2.py\nimport pandas as pd\nweekly_data = {'day':['Monday','Tuesday', 'Wednesday',                    'Thursday','Friday', 'Saturday', 'Sunday'],\n                'temp':[40, 33, 42, 31, 41, 40, 30],\n                'condition':['Sunny,','_Cloudy ',                'Sunny','Rainy','--Sunny.','Cloudy.','Rainy']\n        }\ndf = pd.DataFrame(weekly_data)\nprint(df)\ndf[\"condition\"] = df[\"condition\"].map(\n                lambda x: x.lstrip('_- ').rstrip(',. '))\ndf[\"temp_F\"] = df[\"temp\"].apply(lambda x: 9/5*x+32 )\nprint(df)\n```", "```py\n# pandastrick3.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\nprint(df[(df.temp >= 30) & (df.temp<=40)])\nprint(df[df.temp.between(30,40)])\n```", "```py\n# pandastrick4.py\nimport pandas as pd\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\nprint(df[(df.condition=='Rainy') | (df.condition=='Sunny')])\nprint(df[df['condition'].str.contains('Rainy|Sunny')])\n```", "```py\n# pandastrick5.py\nimport pandas as pd\nimport numpy as np\npd.set_option('display.max_columns', None)\nweekly_data = <same as in pandas1.py example>\ndf = pd.DataFrame(weekly_data)\nprint(df.describe())\nprint(df.describe(include=\"all\"))\nprint(df.describe(percentiles=np.arange(0, 1, 0.1)))\nprint(df.groupby('condition').describe(percentiles=np.arange(0,   1, 0.1)))\n```"]