["```py\nfrom datetime import datetime\n\nfrom .stock import Stock\nfrom .rule import PriceRule\n\nclass AlertProcessor:\n    def __init__(self):\n        self.exchange = {\"GOOG\": Stock(\"GOOG\"), \"AAPL\": Stock(\"AAPL\")}\n        rule_1 = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n        rule_2 = PriceRule(\"AAPL\", lambda stock: stock.price > 5)\n        self.exchange[\"GOOG\"].updated.connect(\n            lambda stock: print(stock.symbol, stock.price) \\\n                if rule_1.matches(self.exchange) else None)\n        self.exchange[\"AAPL\"].updated.connect(\n            lambda stock: print(stock.symbol, stock.price) \\\n                if rule_2.matches(self.exchange) else None)\n\n        updates = []\n        with open(\"updates.csv\", \"r\") as fp:\n            for line in fp.readlines():\n                symbol, timestamp, price = line.split(\",\")\n                updates.append((symbol, datetime.strptime(timestamp, \"%Y-%m-%dT%H:%M:%S.%f\"), int(price)))\n\n        for symbol, timestamp, price in updates:\n            stock = self.exchange[symbol]\n            stock.update(timestamp, price)\n```", "```py\nGOOG,2014-02-11T14:10:22.13,5\nAAPL,2014-02-11T00:00:00.0,8\nGOOG,2014-02-11T14:11:22.13,3\nGOOG,2014-02-11T14:12:22.13,15\nAAPL,2014-02-11T00:00:00.0,10\nGOOG,2014-02-11T14:15:22.13,21\n```", "```py\n>>> from stock_alerter.legacy import AlertProcessor\n>>> processor = AlertProcessor()\nAAPL 8\nGOOG 15\nAAPL 10\nGOOG 21\n>>>\n\n```", "```py\nGOOG,2014-02-11T14:10:22.13,5\nAAPL,2014-02-11T00:00:00.0,8\nGOOG,2014-02-11T14:11:22.13,3\nGOOG,2014-02-11T14:12:22.13,15\nAAPL,2014-02-11T00:00:00.0,10\nGOOG,2014-02-11T14:15:22.13,21\n```", "```py\nAAPL 8\nGOOG 15\nAAPL 10\nGOOG 21\n```", "```py\nimport unittest\nfrom unittest import mock\n\nfrom ..legacy import AlertProcessor\n\nclass AlertProcessorTest(unittest.TestCase):\n    @mock.patch(\"builtins.print\")\n    def test_processor_characterization_1(self, mock_print):\n        AlertProcessor()\n        mock_print.assert_has_calls([mock.call(\"AAPL\", 8),\n                                     mock.call(\"GOOG\", 15),\n                                     mock.call(\"AAPL\", 10),\n                                     mock.call(\"GOOG\", 21)])\n```", "```py\n>>> import pdb\n>>> from stock_alerter.legacy import AlertProcessor\n>>> pdb.run(\"AlertProcessor()\")\n> <string>(1)<module>()\n(Pdb)\n\n```", "```py\n(Pdb) help\n\nDocumented commands (type help <topic>):\nEOF    c          d        h         list      q        rv       undisplay\na      cl         debug    help      ll        quit     s        unt\nalias  clear      disable  ignore    longlist  r        source   until\nargs   commands   display  interact  n         restart  step     up\nb      condition  down     j         next      return   tbreak   w\nbreak  cont       enable   jump      p         retval   u        whatis\nbt     continue   exit     l         pp        run      unalias  where\n\nMiscellaneous help topics:\npdb  exec\n\n(Pdb)\n```", "```py\n(Pdb) help s\ns(tep)\n        Execute the current line, stop at the first possible occasion\n        (either in a function that is called or in the current\n        function).\n(Pdb)\n```", "```py\n>>> import pdb\n>>> from stock_alerter.legacy import AlertProcessor\n>>> pdb.run(\"AlertProcessor()\")\n> <string>(1)<module>()\n(Pdb)\n\n```", "```py\n(Pdb) s\n--Callâ€”\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(8)__init__()\n-> def __init__(self):\n(Pdb)\n```", "```py\n(Pdb) n\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(9)__init__()\n-> self.exchange = {\"GOOG\": Stock(\"GOOG\"), \"AAPL\": Stock(\"AAPL\")}\n(Pdb) n\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(10)__init__()\n-> rule_1 = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n(Pdb) n\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(11)__init__()\n-> rule_2 = PriceRule(\"AAPL\", lambda stock: stock.price > 5)\n(Pdb) n\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(12)__init__()\n-> self.exchange[\"GOOG\"].updated.connect(\n(Pdb) n\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(13)__init__()\n-> lambda stock: print(stock.symbol, stock.price) \\\n(Pdb) n\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(15)__init__()\n-> self.exchange[\"AAPL\"].updated.connect(\n(Pdb) n\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(16)__init__()\n-> lambda stock: print(stock.symbol, stock.price) \\\n(Pdb) n\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(18)__init__()\n-> updates = []\n(Pdb)\n```", "```py\n(Pdb) self.exchange\n{'GOOG': <stock_alerter.stock.Stock object at 0x0000000002E59400>, 'AAPL': <stock_alerter.stock.Stock object at 0x0000000002E593C8>}\n(Pdb) rule_1\n<stock_alerter.rule.PriceRule object at 0x0000000002E205F8>\n```", "```py\n(Pdb) test_stock = Stock(\"GOOG\")\n(Pdb) test_stock.update(datetime.now(), 100)\n(Pdb) rule_1.matches({\"GOOG\": test_stock})\nTrue\n(Pdb)\n```", "```py\n(Pdb) b stock_alerter\\legacy.py:25\nBreakpoint 1 at c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py:25\n(Pdb) c\n> c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py(25)__init__()\n-> for symbol, timestamp, price in updates:\n(Pdb)\n```", "```py\n(Pdb) pp updates\n[('GOOG', datetime.datetime(2014, 2, 11, 14, 10, 22, 130000), 5),\n ('AAPL', datetime.datetime(2014, 2, 11, 0, 0), 8),\n ('GOOG', datetime.datetime(2014, 2, 11, 14, 11, 22, 130000), 3),\n ('GOOG', datetime.datetime(2014, 2, 11, 14, 12, 22, 130000), 15),\n ('AAPL', datetime.datetime(2014, 2, 11, 0, 0), 10),\n ('GOOG', datetime.datetime(2014, 2, 11, 14, 15, 22, 130000), 21)]\n```", "```py\n(Pdb) updates = [update for update in updates if update[0] == \"GOOG\"]\n(Pdb) pp updates\n[('GOOG', datetime.datetime(2014, 2, 11, 14, 10, 22, 130000), 5),\n ('GOOG', datetime.datetime(2014, 2, 11, 14, 11, 22, 130000), 3),\n ('GOOG', datetime.datetime(2014, 2, 11, 14, 12, 22, 130000), 15),\n ('GOOG', datetime.datetime(2014, 2, 11, 14, 15, 22, 130000), 21)]\n```", "```py\n(Pdb) cl\nClear all breaks? y\nDeleted breakpoint 4 at c:\\projects\\tdd_with_python\\src\\stock_alerter\\legacy.py:25\n(Pdb) c\nGOOG 15\nGOOG 21\n>>>\n```", "```py\n(Pdb) q\n>>>\n```", "```py\nclass AlertProcessor:\n    def __init__(self):\n        self.exchange = {\"GOOG\": Stock(\"GOOG\"), \"AAPL\": Stock(\"AAPL\")}\n        rule_1 = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n        rule_2 = PriceRule(\"AAPL\", lambda stock: stock.price > 5)\n        self.exchange[\"GOOG\"].updated.connect(\n            lambda stock: print(stock.symbol, stock.price) \\\n                          if rule_1.matches(self.exchange) else None)\n        self.exchange[\"AAPL\"].updated.connect(\n            lambda stock: print(stock.symbol, stock.price) \\\n                          if rule_2.matches(self.exchange) else None)\n\n    def run(self):\n        updates = []\n        with open(\"updates.csv\", \"r\") as fp:\n            for line in fp.readlines():\n                symbol, timestamp, price = line.split(\",\")\n                updates.append(\n                       (symbol,\n                        datetime.strptime(timestamp,\n                                          \"%Y-%m-%dT%H:%M:%S.%f\"),\n                        int(price)))\n\n        for symbol, timestamp, price in updates:\n            stock = self.exchange[symbol]\n            stock.update(timestamp, price)\n```", "```py\ndef __init__(self):\n    self.exchange = {\"GOOG\": Stock(\"GOOG\"), \"AAPL\": Stock(\"AAPL\")}\n    rule_1 = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n    rule_2 = PriceRule(\"AAPL\", lambda stock: stock.price > 5)\n    self.exchange[\"GOOG\"].updated.connect(\n        lambda stock: print(stock.symbol, stock.price) \\\n                      if rule_1.matches(self.exchange) else None)\n    self.exchange[\"AAPL\"].updated.connect(\n        lambda stock: print(stock.symbol, stock.price) \\\n                      if rule_2.matches(self.exchange) else None)\n    self.run()\n```", "```py\ndef __init__(self, autorun=True):\n    self.exchange = {\"GOOG\": Stock(\"GOOG\"), \"AAPL\": Stock(\"AAPL\")}\n    rule_1 = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n    rule_2 = PriceRule(\"AAPL\", lambda stock: stock.price > 5)\n    self.exchange[\"GOOG\"].updated.connect(\n        lambda stock: print(stock.symbol, stock.price) \\\n                      if rule_1.matches(self.exchange) else None)\n    self.exchange[\"AAPL\"].updated.connect(\n        lambda stock: print(stock.symbol, stock.price) \\\n                      if rule_2.matches(self.exchange) else None)\n    if autorun:\n        self.run()\n```", "```py\ndef test_processor_characterization_2(self):\n    processor = AlertProcessor(autorun=False)\n    with mock.patch(\"builtins.print\") as mock_print:\n        processor.run()\n    mock_print.assert_has_calls([mock.call(\"AAPL\", 8),\n                                 mock.call(\"GOOG\", 15),\n                                 mock.call(\"AAPL\", 10),\n                                 mock.call(\"GOOG\", 21)])\n```", "```py\ndef run(self):\n    updates = []\n    with open(\"updates.csv\", \"r\") as fp:\n        for line in fp.readlines():\n            symbol, timestamp, price = line.split(\",\")\n            updates.append((symbol, datetime.strptime(timestamp, \"%Y-%m-%dT%H:%M:%S.%f\"), int(price)))\n\n    for symbol, timestamp, price in updates:\n        stock = self.exchange[symbol]\n        stock.update(timestamp, price)\n```", "```py\ndef do_updates(self, updates):\n    for symbol, timestamp, price in updates:\n        stock = self.exchange[symbol]\n        stock.update(timestamp, price)\n```", "```py\ndef run(self):\n    updates = []\n    with open(\"updates.csv\", \"r\") as fp:\n        for line in fp.readlines():\n            symbol, timestamp, price = line.split(\",\")\n            updates.append((symbol, datetime.strptime(timestamp, \"%Y-%m-%dT%H:%M:%S.%f\"), int(price)))\n    self.do_updates(updates)\n```", "```py\ndef test_processor_characterization_3(self):\n    processor = AlertProcessor(autorun=False)\n    mock_goog = mock.Mock()\n    processor.exchange = {\"GOOG\": mock_goog}\n    updates = [(\"GOOG\", datetime(2014, 12, 8), 5)]\n    processor.do_updates(updates)\n    mock_goog.update.assert_called_with(datetime(2014, 12, 8), 5)\n```", "```py\ndef __init__(self, autorun=True, exchange=None):\n    if exchange is None:\n        self.exchange = {\"GOOG\": Stock(\"GOOG\"), \"AAPL\": Stock(\"AAPL\")}\n    else: \n        self.exchange = exchange\n    rule_1 = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n    rule_2 = PriceRule(\"AAPL\", lambda stock: stock.price > 5)\n    self.exchange[\"GOOG\"].updated.connect(\n        lambda stock: print(stock.symbol, stock.price) \\\n            if rule_1.matches(self.exchange) else None)\n    self.exchange[\"AAPL\"].updated.connect(\n        lambda stock: print(stock.symbol, stock.price) \\\n            if rule_2.matches(self.exchange) else None)\n    if autorun:\n        self.run()\n```", "```py\ndef test_processor_characterization_4(self):\n    mock_goog = mock.Mock()\n    mock_aapl = mock.Mock()\n    exchange = {\"GOOG\": mock_goog, \"AAPL\": mock_aapl}\n    processor = AlertProcessor(autorun=False, exchange=exchange)\n    updates = [(\"GOOG\", datetime(2014, 12, 8), 5)]\n    processor.do_updates(updates)\n    mock_goog.update.assert_called_with(datetime(2014, 12, 8), 5)\n```", "```py\nclass TestAlertProcessor(AlertProcessor):\n    def __init__(self, exchange):\n        AlertProcessor.__init__(self, autorun=False)\n        self.exchange = exchange\n```", "```py\ndef test_processor_characterization_5(self):\n    mock_goog = mock.Mock()\n    mock_aapl = mock.Mock()\n    exchange = {\"GOOG\": mock_goog, \"AAPL\": mock_aapl}\n    processor = TestAlertProcessor(exchange)\n    updates = [(\"GOOG\", datetime(2014, 12, 8), 5)]\n    processor.do_updates(updates)\n    mock_goog.update.assert_called_with(datetime(2014, 12, 8), 5)\n```", "```py\ndef test_processor_characterization_6(self):\n    processor = AlertProcessor(autorun=False)\n    processor.do_updates = mock.Mock()\n    processor.run()\n    processor.do_updates.assert_called_with([\n        ('GOOG', datetime(2014, 2, 11, 14, 10, 22, 130000), 5),\n        ('AAPL', datetime(2014, 2, 11, 0, 0), 8),\n        ('GOOG', datetime(2014, 2, 11, 14, 11, 22, 130000), 3),\n        ('GOOG', datetime(2014, 2, 11, 14, 12, 22, 130000), 15),\n        ('AAPL', datetime(2014, 2, 11, 0, 0), 10),\n        ('GOOG', datetime(2014, 2, 11, 14, 15, 22, 130000), 21)])\n```", "```py\ndef run(self):\n    updates = []\n    with open(\"updates.csv\", \"r\") as fp:\n        for line in fp.readlines():\n            symbol, timestamp, price = line.split(\",\")\n            updates.append((symbol, datetime.strptime(timestamp, \"%Y-%m-%dT%H:%M:%S.%f\"), int(price)))\n    self.do_updates(updates)\n```", "```py\ndef parse_file(self):\n    updates = []\n    with open(\"updates.csv\", \"r\") as fp:\n        for line in fp.readlines():\n            symbol, timestamp, price = line.split(\",\")\n            updates.append((symbol, datetime.strptime(timestamp, \"%Y-%m-%dT%H:%M:%S.%f\"), int(price)))\n    return updates\n```", "```py\ndef run(self):\n    updates = self.parse_file()\n    self.do_updates(updates)\n```", "```py\ndef test_processor_characterization_7(self):\n    processor = AlertProcessor(autorun=False)\n    processor.parse_file = mock.Mock()\n    processor.parse_file.return_value = [\n        ('GOOG', datetime(2014, 2, 11, 14, 12, 22, 130000), 15)]\n    with mock.patch(\"builtins.print\") as mock_print:\n        processor.run()\n    mock_print.assert_called_with(\"GOOG\", 15)\n```", "```py\ndef test_processor_characterization_8(self):\n    processor = AlertProcessor(autorun=False)\n    processor.parse_file = mock.Mock()\n    processor.parse_file.return_value = [\n        ('GOOG', datetime(2014, 2, 11, 14, 10, 22, 130000), 5)]\n    with mock.patch(\"builtins.print\") as mock_print:\n        processor.run()\n    self.assertFalse(mock_print.called)\n```", "```py\ndef print_action(self, stock, rule):\n    print(stock.symbol, stock.price) \\\n        if rule.matches(self.exchange) else None\n```", "```py\nself.exchange[\"GOOG\"].updated.connect(\n    lambda stock: self.print_action(stock, rule_1))\nself.exchange[\"AAPL\"].updated.connect(\n    lambda stock: self.print_action(stock, rule_2))\n```", "```py\ndef test_processor_characterization_9(self):\n    processor = AlertProcessor(autorun=False)\n    processor.print_action = mock.Mock()\n    processor.do_updates([\n        ('GOOG', datetime(2014, 2, 11, 14, 12, 22, 130000), 15)])\n    self.assertTrue(processor.print_action.called)\n```", "```py\nclass FileReader:\n    def __init__(self, filename):\n        self.filename = filename\n\n    def get_updates(self):\n        updates = []\n        with open(\"updates.csv\", \"r\") as fp:\n            for line in fp.readlines():\n                symbol, timestamp, price = line.split(\",\")\n                updates.append((symbol, datetime.strptime(timestamp, \"%Y-%m-%dT%H:%M:%S.%f\"), int(price)))\n        return updates\n```", "```py\ndef __init__(self, autorun=True, reader=None, exchange=None):\n    self.reader = reader if reader else FileReader(\"updates.csv\")\n    if exchange is None:\n        self.exchange = {\"GOOG\": Stock(\"GOOG\"), \"AAPL\": Stock(\"AAPL\")}\n    else:\n        self.exchange = exchange\n    rule_1 = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n    rule_2 = PriceRule(\"AAPL\", lambda stock: stock.price > 5)\n    self.exchange[\"GOOG\"].updated.connect(\n        lambda stock: self.print_action(stock, rule_1))\n    self.exchange[\"AAPL\"].updated.connect(\n        lambda stock: self.print_action(stock, rule_2))\n    if autorun:\n        self.run()\n```", "```py\ndef run(self):\n    updates = self.reader.get_updates()\n    self.do_updates(updates)\n```", "```py\ndef test_processor_gets_values_from_reader(self):\n    mock_reader = mock.MagicMock()\n    mock_reader.get_updates.return_value = \\\n        [('GOOG', datetime(2014, 2, 11, 14, 12, 22, 130000), 15)]\n    processor = AlertProcessor(autorun=False, reader=mock_reader)\n    processor.print_action = mock.Mock()\n    processor.run()\n    self.assertTrue(processor.print_action.called)\n```", "```py\nimport unittest\nfrom unittest import mock\n\nfrom ..legacy import AlertProcessor\n\nclass AlertProcessorTest(unittest.TestCase):\n    @mock.patch(\"builtins.print\")\n    def test_processor_characterization_1(self, mock_print):\n        AlertProcessor()\n        mock_print.assert_has_calls([mock.call(\"AAPL\", 8),\n                                     mock.call(\"GOOG\", 15),\n                                     mock.call(\"AAPL\", 10),\n                                     mock.call(\"GOOG\", 21)])\n```"]