["```py\n<form id=\"search_mini_form\" action=\"http://demo.magentocommerce.com/catalogsearch/result/\" method=\"get\">\n    <div class=\"form-search\">\n        <label for=\"search\">Search:</label>\n        <input id=\"search\" type=\"text\" name=\"q\" value=\"\" class=\"input-text\" maxlength=\"128\" />\n        <button type=\"submit\" title=\"Search\" class=\"button\"><span><span>Search</span></span></button>\n        <div id=\"search_autocomplete\" class=\"search-autocomplete\"></div>\n        <script type=\"text/javascript\">\n        //<![CDATA[\n            var searchForm = new Varien.searchForm('search_mini_form', 'search', 'Search entire store here...');\n            searchForm.initAutocomplete('http://demo.magentocommerce.com/catalogsearch/ajax/suggest/', 'search_autocomplete');\n        //]]>\n        </script>\n    </div>\n</form>\n```", "```py\n<input id=\"search\" type=\"text\" name=\"q\" value=\"\" class=\"input-text\" maxlength=\"128\" />\n```", "```py\n<input id=\"search\" type=\"text\" name=\"q\" value=\"\" class=\"input-text\" maxlength=\"128\" autocomplete=\"off\">\n```", "```py\ndef test_search_text_field_max_length(self):\n  # get the search textbox\n  search_field = self.driver.find_element_by_id(\"search\")\n\n  # check maxlength attribute is set to 128\n  self.assertEqual(\"128\", search_field.get_attribute(\"maxlength\"))\n```", "```py\n# get the search textbox\nself.search_field = self.driver.find_element_by_name(\"q\")\n\n```", "```py\n<button type=\"submit\" title=\"Search\" class=\"button\"><span><span>Search</span></span></button>\n```", "```py\ndef test_search_button_enabled(self):\n    # get Search button\n    search_button = self.driver.find_element_by_class_name(\"button\")\n\n    # check Search button is enabled\n    self.assertTrue(search_button.is_enabled())\n```", "```py\n<ul class=\"promos\">\n    <li>\n        <a href=\"http://demo.magentocommerce.com/home-decor.html\"> \n            <img src=\"img/homepage-three-column-promo-01B.png\" alt=\"Physical &amp; Virtual Gift Cards\"> \n        </a>\n    </li>\n    <li>\n        <a href=\"http://demo.magentocommerce.com/vip.html\"> \n            <img src=\"img/homepage-three-column-promo-02.png\" alt=\"Shop Private Sales - Members Only\">\n        </a>\n    </li>\n    <li>\n        <a href=\"http://demo.magentocommerce.com/accessories/bags-luggage.html\"> \n            <img src=\"img/homepage-three-column-promo-03.png\" alt=\"Travel Gear for Every Occasion\">\n        </a>\n    </li>\n</ul>\n```", "```py\ndef test_count_of_promo_banners_images(self):\n    # get promo banner list\n    banner_list = self.driver.find_element_by_class_name(\"promos\")\n\n    # get images from the banner_list\n    banners = banner_list.find_elements_by_tag_name(\"img\")\n\n    # check there are 20 tags displayed on the page\n    self.assertEqual(2, len(banners))\n```", "```py\n<ul class=\"promos\">\n    ...\n    <li>\n        <a href=\"http://demo.magentocommerce.com/vip.html\"> \n            <img src=\"img/homepage-three-column-promo-02.png\" alt=\"Shop Private Sales - Members Only\">\n        </a>\n    </li>\n    ...\n</ul>\n```", "```py\ndef test_vip_promo(self):\n    # get vip promo image\n    vip_promo = self.driver.\\\n        find_element_by_xpath(\"//img[@alt='Shop Private Sales - Members Only']\")\n\n    # check vip promo logo is displayed on home page\n    self.assertTrue(vip_promo.is_displayed())\n    # click on vip promo images to open the page\n    vip_promo.click()\n    # check page title\n    self.assertEqual(\"VIP\",  self.driver.title)\n```", "```py\n<div class=\"minicart-wrapper\">\n<p class=\"block-subtitle\">\n    Recently added item(s) \n    <a class=\"close skip-link-close\" href=\"#\" title=\"Close\">Ã—</a>\n</p>\n    <p class=\"empty\">You have no items in your shopping cart.</p>\n</div>\n```", "```py\ndef test_shopping_cart_status(self):\n    # check content of My Shopping Cart block on Home page\n    # get the Shopping cart icon and click to open the # Shopping Cart section\n    shopping_cart_icon = self.driver.\\\n        find_element_by_css_selector(\"div.header-minicart span.icon\")\n    shopping_cart_icon.click()\n\n    # get the shopping cart status \n    shopping_cart_status = self.driver.\\\n        find_element_by_css_selector(\"p.empty\").text\n    self.assertEqual(\"You have no items in your shopping cart.\", shopping_cart_status)\n    # close the shopping cart section\n    close_button = self.driver.\\\n        find_element_by_css_selector(\"div.minicart-wrapper a.close\")\n    close_button.click()  \n```", "```py\nshopping_cart_icon = self.driver.\\\n        find_element_by_css_selector(\"div.header-minicart span.icon\")\n```", "```py\n    <a href=\"#header-account\" class=\"skip-link skip-account\">\n      <span class=\"icon\"></span>\n      <span class=\"label\">Account</span>\n    </a>\n    ```", "```py\n        def test_my_account_link_is_displayed(self):\n            # get the Account link\n            account_link = self.driver.find_element_by_link_text(\"ACCOUNT\")\n\n            # check My Account link is displayed/visible in\n    \t\t# the Home page footer\n            self.assertTrue(account_link.is_displayed())\n    ```", "```py\n    def test_account_links(self):\n        # get the all the links with Account text in it\n        account_links = self.driver.\\\n            find_elements_by_partial_link_text(\"ACCOUNT\")\n\n        # check Account and My Account link is displayed/visible in the Home page footer\n        self.assertTrue(2, len(account_links))\n    ```", "```py\n    import unittest\n    from selenium import webdriver\n\n    class HomePageTest(unittest.TestCase):\n        @classmethod\n        def setUpClass(cls):\n            # create a new Firefox session\n            cls.driver = webdriver.Firefox()\n            cls.driver.implicitly_wait(30)\n            cls.driver.maximize_window()\n\n            # navigate to the application home page\n            cls.driver.get('http://demo.magentocommerce.com/')\n\n        def test_search_text_field_max_length(self):\n            # get the search textbox\n            search_field = self.driver.find_element_by_id(\"search\")\n\n            # check maxlength attribute is set to 128\n            self.assertEqual(\"128\", search_field.get_attribute (\"maxlength\"))\n\n        def test_search_button_enabled(self):\n            # get Search button\n            search_button = self.driver.find_element_by_class_name(\"button\")\n\n            # check Search button is enabled\n            self.assertTrue(search_button.is_enabled())\n\n        def test_my_account_link_is_displayed(self):\n            # get the Account link\n            account_link = self.driver.find_element_by_link_text(\"ACCOUNT\")\n\n            # check My Account link is displayed/visible in # the Home page footer\n            self.assertTrue(account_link.is_displayed())\n\n        def test_account_links(self):\n            # get the all the links with Account text in it\n            account_links = self.driver.\\\n                find_elements_by_partial_link_text(\"ACCOUNT\")\n\n            # check Account and My Account link is\n    \t\t# displayed/visible in the Home page footer\n            self.assertTrue(2, len(account_links))\n\n        def test_count_of_promo_banners_images(self):\n            # get promo banner list\n            banner_list = self.driver.find_element_by_class_name(\"promos\")\n\n            # get images from the banner_list\n            banners = banner_list.find_elements_by_tag_name(\"img\")\n\n            # check there are 3 banners displayed on the page\n            self.assertEqual(2, len(banners))\n\n        def test_vip_promo(self):\n            # get vip promo image\n            vip_promo = self.driver.\\\n                find_element_by_xpath(\"//img[@alt='Shop Private Sales - Members Only']\")\n\n            # check vip promo logo is displayed on home page\n            self.assertTrue(vip_promo.is_displayed())\n            # click on vip promo images to open the page\n            vip_promo.click()\n            # check page title\n            self.assertEqual(\"VIP\", self.driver.title)\n\n        def test_shopping_cart_status(self):\n            # check content of My Shopping Cart block\n    \t\t# on Home page\n            # get the Shopping cart icon and click to # open the Shopping Cart section\n            shopping_cart_icon = self.driver.\\\n                find_element_by_css_selector(\"div.header-minicart span.icon\")\n            shopping_cart_icon.click()\n\n            # get the shopping cart status\n            shopping_cart_status = self.driver.\\\n                find_element_by_css_selector(\"p.empty\").text\n            self.assertEqual(\"You have no items in your shopping cart.\", shopping_cart_status)\n            # close the shopping cart section\n            close_button = self.driver.\\\n              find_element_by_css_selector(\"div.minicart-wrapper a.close\")\n            close_button.click()\n\n        @classmethod\n        def tearDownClass(cls):\n            # close the browser window\n            cls.driver.quit()\n\n    if __name__ == '__main__':\n        unittest.main(verbosity=2)\n    ```", "```py\n    python homepagetest.py\n\n    ```"]