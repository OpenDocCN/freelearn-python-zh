- en: Chapter 20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More about Flowcharts with Decision Control Structures
  prefs: []
  type: TYPE_NORMAL
- en: 20.1 Introduction
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: By working through the previous chapters, you've become familiar with all the
    decision control structures. Since flowcharts are an ideal way to learn “Algorithmic
    Thinking” and to help you better understand specific control structures, this
    chapter is dedicated to teaching you how to convert a Python program to a flowchart,
    or a flowchart to a Python program.
  prefs: []
  type: TYPE_NORMAL
- en: 20.2 Converting Python Programs to Flowcharts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To convert a Python program to its corresponding flowchart, you need to recall
    all the decision control structures and their corresponding flowchart fragments.
    They are all summarized here.
  prefs: []
  type: TYPE_NORMAL
- en: The single-alternative decision structure
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter16-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The dual-alternative decision structure
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter17-01.png)'
  prefs: []
  type: TYPE_IMG
- en: The multiple-alternative decision structure
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter18-01.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 20.2-1 Designing the Flowchart
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: z = x ** 3
  prefs: []
  type: TYPE_NORMAL
- en: w = (z - 4) * (x - 3) / 7 + 36
  prefs: []
  type: TYPE_NORMAL
- en: 'if z >= w and x < z:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 2 * x
  prefs: []
  type: TYPE_NORMAL
- en: 'if y > 0:    #This is a nested single-alternative decision structure'
  prefs: []
  type: TYPE_NORMAL
- en: y += 1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y = 4 * x
  prefs: []
  type: TYPE_NORMAL
- en: a += 1
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this Python program there is a single-alternative decision structure nested
    within a dual-alternative decision structure. Its corresponding flowchart is as
    follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-01.png)'
  prefs: []
  type: TYPE_IMG
- en: '![](img/remember.jpg)A flowchart is a very loose method of representing an
    algorithm. Thus, it is quite permissible to write x³ or even to use the Python
    operator ( ** ). Do whatever you wish; everything is permitted, on condition that
    anyone familiar with flowcharts can clearly understand what you are trying to
    say!'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 20.2-2 Designing the Flowchart
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the flowchart that corresponds to the following code fragment given in
    general form.
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression_A:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements A1
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression_B:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements B1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Block of statements A2
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements A3
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression_C:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements C1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements C2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: For better observation, the initial code fragment is presented again with all
    the nested decision control structures enclosed in rectangles.
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression_A:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements A1
  prefs: []
  type: TYPE_NORMAL
- en: if Boolean_Expression_B:       [[More…]](more.html#more_20_2_2_1)
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements B1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Block of statements A2
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements A3
  prefs: []
  type: TYPE_NORMAL
- en: if Boolean_Expression_C:       [[More…]](more.html#more_20_2_2_2)
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements C1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements C2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: and the flowchart fragment in general form is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-02.png)'
  prefs: []
  type: TYPE_IMG
- en: Exercise 20.2-3 Designing the Flowchart
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a * 2
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a < 10:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a / 2
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a < 100:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a + 2
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = a * b
  prefs: []
  type: TYPE_NORMAL
- en: 'if y > 0:    #This is a nested dual-alternative decision structure'
  prefs: []
  type: TYPE_NORMAL
- en: 'y -= 1   #'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:        #'
  prefs: []
  type: TYPE_NORMAL
- en: 'y += 1   #'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this Python program, a dual-alternative decision structure is nested within
    a multiple-alternative decision structure.
  prefs: []
  type: TYPE_NORMAL
- en: The flowchart is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-03.png)'
  prefs: []
  type: TYPE_IMG
- en: 20.3 A Mistake That You Will Probably Make!
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In flowcharts, a very common mistake that novice programmers make is to leave
    some paths unconnected, as shown in the flowchart that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-04.png)'
  prefs: []
  type: TYPE_IMG
- en: Please keep in mind that every path tries to reach the end of the algorithm,
    thus you cannot leave any of them unconnected.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, try to avoid flowcharts that use many End symbols, as shown
    below, since these algorithms are difficult to read and understand.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-05.png)'
  prefs: []
  type: TYPE_IMG
- en: Let's say that you are in the middle of designing a flowchart (see the flowchart
    that follows), and you want to start closing all of its decision control structures.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-06.png)'
  prefs: []
  type: TYPE_IMG
- en: Just remember that the decision control structure that opens last must be the
    first one to close! In this example, the last decision control structure is the
    one that evaluates the expression a < 30\. This is the first one that you need
    to close, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-07.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, you need to close the second to last decision control structure as shown
    here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-08.png)'
  prefs: []
  type: TYPE_IMG
- en: And finally, you need to close the third to last decision control structure
    as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-09.png)'
  prefs: []
  type: TYPE_IMG
- en: The last flowchart can be rearranged to become like the one shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-10.png)'
  prefs: []
  type: TYPE_IMG
- en: 20.4 Converting Flowcharts to Python Programs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This conversion is not always an easy one. There are cases in which the flowchart
    designers follow no particular rules, so the initial flowchart may need some modifications
    before it can be converted into a Python program. An example of one such case
    is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-11.png)'
  prefs: []
  type: TYPE_IMG
- en: As you can see, the decision control structures included in this flowchart fragment
    do not match any of the decision control structures that you have already learned.
    Thus, you have only one choice and this is to modify the flowchart by adding extra
    statements or removing existing ones until known decision control structures start
    to appear. Following are some exercises in which the initial flowchart does need
    modification.
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 20.4-1 Writing the Python Program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter20-12.png)
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This is quite easy. The only obstacle you must overcome is that the true and
    false paths are not quite in the right positions. You need to use the true path,
    and not the false path, to actually include the statements in the single-alternative
    decision structure.
  prefs: []
  type: TYPE_NORMAL
- en: It is possible to switch the two paths, but you also need to negate the corresponding
    Boolean expression. The following two flowchart fragments are equivalent.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-13.png)'
  prefs: []
  type: TYPE_IMG
- en: Thus, the flowchart can be modified and look like this.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-14.png)'
  prefs: []
  type: TYPE_IMG
- en: and the corresponding Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = 50
  prefs: []
  type: TYPE_NORMAL
- en: 'if x / 2 <= 10:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x / 3
  prefs: []
  type: TYPE_NORMAL
- en: y = x + 4
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 20.4-2 Writing the Python Program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-15.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise there is a dual-alternative decision structure nested within
    a single-alternative one. You just need to negate the Boolean expression x ==
    100 and switch the true/false paths. The Python program is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: x = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = 1
  prefs: []
  type: TYPE_NORMAL
- en: 'if x != 100:   #This is a single-alternative decision structure'
  prefs: []
  type: TYPE_NORMAL
- en: y = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x < y:     #This is a nested dual-alternative decision structure'
  prefs: []
  type: TYPE_NORMAL
- en: x = x - 3
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y = x + 4
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: x = x / 3 + 5
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: y = x + 20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(x, y)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 20.4-3 Writing the Python Program
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-16.png)'
  prefs: []
  type: TYPE_IMG
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this flowchart, the decision control structures do not match any of the decision
    control structures that you learned. Thus, you must modify the flowchart by adding
    extra statements or removing existing ones until known decision control structures
    start to appear!
  prefs: []
  type: TYPE_NORMAL
- en: The obstacle you must overcome in this exercise is the decision control structure
    that evaluates the y MOD x ≠ 1 Boolean expression. Note that when flow of execution
    follows the false path, it executes the statement a ← 20 and then the statement
    Write a before it reaches the end of the algorithm. Thus, if you simply add a
    new statement, Write a, inside its false path you can keep the flow of execution
    intact. The following flowchart is equivalent to the initial one.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-17.png)'
  prefs: []
  type: TYPE_IMG
- en: Now, the flowchart includes known decision control structures; that is, a dual-alternative
    decision structure nested within another dual-alternative one. The corresponding
    Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % y != 1:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if y % x != 1:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid")
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: a = 20
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: print(a)
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: a = 10
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: However, there is something better that you can do! If you negate all Boolean
    expressions and also switch their true/false paths, you can have a multiple-alternative
    decision structure, which is more convenient in Python than nested decision control
    structures. The modified flowchart is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-18.png)'
  prefs: []
  type: TYPE_IMG
- en: and the corresponding Python program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: x = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if x % y == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: a = 10
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: 'elif y % x == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: a = 20
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Invalid")
  prefs: []
  type: TYPE_NORMAL
- en: 20.5 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a % 10 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: a += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #1")'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a % 3 == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: a += 5
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #2")'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a % 3 == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: a += 10
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #3")'
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: 2)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a % 10 == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: a += 1
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #1")'
  prefs: []
  type: TYPE_NORMAL
- en: 'if a % 3 == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: a += 5
  prefs: []
  type: TYPE_NORMAL
- en: 'print("Message #2")'
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: a += 7
  prefs: []
  type: TYPE_NORMAL
- en: print(a)
  prefs: []
  type: TYPE_NORMAL
- en: 3)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: 'if a < 0:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a * 2
  prefs: []
  type: TYPE_NORMAL
- en: 'if y > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: y +=2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif y == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: y *= 6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y /= 7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif a < 22:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a / 3
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a < 32:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a - 7
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = a - b
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 4)Design the flowchart that corresponds to the following code fragment given
    in general form.
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression_A:'
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression_B:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements B1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements B2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Block of statements A1
  prefs: []
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements A2
  prefs: []
  type: TYPE_NORMAL
- en: 'if Boolean_Expression_C:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements C1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif Boolean_Expression_D:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements D1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: Block of statements E1
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Block of statements A3
  prefs: []
  type: TYPE_NORMAL
- en: 5)Design the flowchart that corresponds to the following Python program.
  prefs: []
  type: TYPE_NORMAL
- en: a = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'if a == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a * 2
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a == 2:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a - 3
  prefs: []
  type: TYPE_NORMAL
- en: 'elif a == 3:'
  prefs: []
  type: TYPE_NORMAL
- en: y = a + 3
  prefs: []
  type: TYPE_NORMAL
- en: 'if y % 2 == 1:'
  prefs: []
  type: TYPE_NORMAL
- en: y += 2
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif y == 0:'
  prefs: []
  type: TYPE_NORMAL
- en: y *= 6
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'else:'
  prefs: []
  type: TYPE_NORMAL
- en: y /= 7
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'elif a == 4:'
  prefs: []
  type: TYPE_NORMAL
- en: b = float(input())
  prefs: []
  type: TYPE_NORMAL
- en: y = a + b + 2
  prefs: []
  type: TYPE_NORMAL
- en: print(y)
  prefs: []
  type: TYPE_NORMAL
- en: 6)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-19.png)'
  prefs: []
  type: TYPE_IMG
- en: 7)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-20.png)'
  prefs: []
  type: TYPE_IMG
- en: 8)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-21.png)'
  prefs: []
  type: TYPE_IMG
- en: 9)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-22.png)'
  prefs: []
  type: TYPE_IMG
- en: 10)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-23.png)'
  prefs: []
  type: TYPE_IMG
- en: 11)Write the Python program that corresponds to the following flowchart.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter20-24.png)'
  prefs: []
  type: TYPE_IMG
