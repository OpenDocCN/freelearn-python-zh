- en: Chapter 5. Generating Reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: While creating and executing tests does provide numerous benefits, there is
    a need to convey the results effectively to any viewer of the test, as an acceptance
    test can provide the fact that a given software can execute in a provided manner
    but cannot preserve this hypothesis. In this chapter, the concept of test reports
    in the Robot Framework will be discussed in detail, which covers understanding
    and customization of the generated reports through provided options, manual as
    well as automated changes. As the report internals are discussed in detail, report
    customization can be done with more confidence.
  prefs: []
  type: TYPE_NORMAL
- en: The need for reports
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to save the events and actions that occurred during the test execution
    apart from what appears on the console where the results are displayed to the
    user, there is a need to create test reports in files as it offers numerous benefits,
    some of which are outlined as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Quick-test run assessment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The test results can be recalled at a glance quickly if there is a standardized
    format that can clearly identify the success or failure of tests as well as easily
    determining individual test details.
  prefs: []
  type: TYPE_NORMAL
- en: Result comparison
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The test results can be compared side-by-side for the same acceptance test that
    can be taken across different states of the same test, across different external
    variables, or at different times.
  prefs: []
  type: TYPE_NORMAL
- en: Individual result detailing
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The test report can detail the environment and test execution steps and other
    data in an ordered manner that is essential to determine the success of a test
    execution.
  prefs: []
  type: TYPE_NORMAL
- en: Intelligent assessment
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Through the use of reports and logs, it becomes a lot easier for a person to
    analyze the execution of a test. This is quite handy when it comes to automation
    tests as analyzing the causes of failure can be tedious after the test has run.
    The populated data can also be used to obtain necessary metrics as well infer
    secondary data, such as performance of tests over a period of time, and to infer
    other details as necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Generated files
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As mentioned earlier, the Robot Framework generates two HTML files that are
    log and report files. These are complementary to each other and while analyzing
    any project, you will find yourself using both of them. Apart from these files,
    an XML is generated by default that contains the metadata of all the output of
    the test results. This is helpful in in many ways that are discussed in detail
    in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: The log file presents the detailed execution report in a hierarchical manner
    based on the different test suites. It also has the test statistics, but the high
    level overview of tests is present in the report file. The report presents the
    results in multiple ways, detailed in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Output structure
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The test report contains the results of test execution under the following headlines
    that are explained next.
  prefs: []
  type: TYPE_NORMAL
- en: Heading
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The heading is the first element of the page which contains the test name and
    the time when it was generated. It also displays the elapsed time since its generation.
  prefs: []
  type: TYPE_NORMAL
- en: Summary information
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This contains the summary of the test, the start and end time of the test, and
    the total time taken in the test execution.
  prefs: []
  type: TYPE_NORMAL
- en: Test statistics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: These are the number of tests that are present in the test; the various tests
    are grouped on the basis of their criticality, tag, and suite. By default, all
    the tests are critical, but you can explicitly specify whether a test is critical
    or not by passing `--critical` or `--noncritical` followed by the test name in
    the pybot/jybot command. Tags can be set/unset in tests through the use of **Set
    Tags**/**Remove Tags** keywords in test cases. Additionally, this can be specified
    in suite setup that tags all the test cases in that suite file.
  prefs: []
  type: TYPE_NORMAL
- en: Test details
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Test details are only present in test reports and contain the same information
    which is present above it in test statistics; however, they provide a more concise
    view as the different statistics are present in tabular manner. Beneath this column
    is empty space but as soon as you click any test suite above, a detailed table
    containing various properties associated with that suite and its children appear
    and the test details display the information pertaining to the suite.
  prefs: []
  type: TYPE_NORMAL
- en: Test execution log
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This is only present in the log file and contains all the logs generated from
    tests. To see the test suite hierarchy, click on the expand all button to see
    all the test suite hierarchies present in your tests. It contains the location
    of suite source files and folders, and information down to the level of keywords
    present within the tests.
  prefs: []
  type: TYPE_NORMAL
- en: Test coloring information
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In any xUnit test result, red denotes failure and green denotes success. This
    coloring has also led to the popular TDD mantra of "Red, Green, Refactor" in unit
    tests, which denotes the order of development as first the tests are created with
    an intention to naturally fail followed by writing code in such a manner that
    the tests pass and finally refactoring over existing code can be made in such
    a manner that nothing is broken.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot demonstrates a test application passing entirely as
    the green color background is clearly visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test coloring information](img/3033_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Similarly, the failure of the test suite can also be reflected through the
    background color. Note that, even if a single test case fails, the entire report
    will have the color of failure and the end user can easily take note, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Test coloring information](img/3033_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This convention is also followed in the Robot Framework as is evident from the
    report background color as well as the colors used in the executed tests inside
    the log file.
  prefs: []
  type: TYPE_NORMAL
- en: Separating files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The generated reports are generally overwritten on every execution. However,
    this can be made unique for every run by providing a unique name that can be provided
    by naming the files with a timestamp. In order to do this, the `pybot`/`jybot`/`ipybot`
    commands can be supplied with arguments that insert a timestamp along with the
    file name, which ensures uniqueness of the file names and ensures that no file
    overwrite takes place. To do this, there is a need to add the `--timestampoutputs`
    argument to these commands. This inserts the timestamp in the format, `YYYYMMDD-hhmmss`
    between the name and extension of the generated report file.
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, this can be used to specify the timestamped files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Making changes in outputs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Certain customizations in the generated report and log file can be made that
    can be used out of box in the Robot Framework. This can be helpful in setting
    up the test reports according to requirements without changing the report structure
    as well as without affecting the codebase in any manner.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing the report title
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `--logtitle` and `--reporttitle` arguments can be used before the log file
    and report file names respectively to set their customized titles; otherwise,
    the defaults of the Test Log or Test Report are used wherever necessary.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: While using custom names through arguments, underscores are converted into spaces
    just like the test suite file and folder names.
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to not allow files to have the standard `<root test suite> Test Report/Log`
    headline, these options can be used as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Background color customization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The color scheme used in reports does not need to be changed as it confirms
    the color used in the xUnit configuration and used in most of the other tests/testing
    tools. However, there may some cases where this might not be as good as other
    alternatives for example, a color-blind person may have trouble differentiating
    between the default colors; this could contrast with the colors used in branding,
    and so on. To specify the colors, `--reportbackground successcolor:failurecolor`
    option is provided where the color names can be provided as is, such as red, blue,
    yellow, or by providing the color hex codes like #05AE04.'
  prefs: []
  type: TYPE_NORMAL
- en: Changing how much is logged
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The logging done in the tests can also be customized, which can help in allowing
    various elements and information types within the test logs. Various log levels
    can be assigned that allow the message to be printed under various scenarios.
    Some messages, however, are only issued by the Robot Framework itself, such as
    FAIL, which happens only when some test keyword is missing. Other messages such
    as Warn, Info, Debug, and Trace can also be used in problems of varying importance,
    which is similar to how most popular logging frameworks operate.
  prefs: []
  type: TYPE_NORMAL
- en: Also, logging can be customized by using logging APIs in Python programs where
    both the `robot.api.logger` as well as standard Python logging can be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `--loglevel` argument is used to specify various log levels for the generated
    log file. If this is done at a level below info, then a dropdown appears below
    the report link in the log file, as shown in the following image:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Changing how much is logged](img/3033_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Changing the report format
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: At times, there is a need to make slight changes in the generated reports, which
    can be done either by customizing a CSS for the output files or making changes
    in the downloaded source code and rebuilding a custom installation of the framework.
    In this section, both these strategies of customization are discussed.
  prefs: []
  type: TYPE_NORMAL
- en: If the log file is opened in a text editor, it will display the internally used
    CSS that is inline to the file. Similarly, the report also contains jQuery embedded
    inline. By doing this, the file can be used without any dependency over an external
    file or website, and the report works over any modern browser.
  prefs: []
  type: TYPE_NORMAL
- en: These files can be freely used as the user requires but the only thing to remember
    is that, if the reports are not generated uniquely, then the subsequent executions
    of the Robot Framework will override the report/log file.
  prefs: []
  type: TYPE_NORMAL
- en: 'To do the customization, let''s use a previously generated report, where the
    test is already completed. As this report has already been generated, it cannot
    be customized. So after loading up the report in the text editor, jump to line
    number 1247 that contains the JavaScript function which adds the content shown
    at the top right of the page as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This function loads up the time elapsed and the link to the other (log/report)
    file. Here, another div can be appended right after the `report-or-log-link` div
    that contains an image that will serve as our icon. The changed div structure
    within the same function therefore becomes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: This code will be responsible for the presence of an icon in the report. However,
    as this is an external image, its path must resolve correctly to the report. So,
    a web-based image URL can also be used if the report is to be sent between different
    computers or bundled together with the reports if they are also to be used offline.
  prefs: []
  type: TYPE_NORMAL
- en: 'Similarly, if the color of the report needs to be changed right before sending
    this report to the manager or stakeholder and that person prefers a specific color,
    then the report can be further tweaked. In line 1472, there is a JavaScript function
    that sets up the report color:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Before changing this function with hardcoded values, the colors used can be
    manipulated. So, this function can be used to simply set the background color
    to white by performing the following changes to this function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: '![Changing the report format](img/3033_05_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: After the previous two changes, only a page refresh is needed in order to view
    the changes which include the presence of an icon below the log link as well as
    changing the background to white.
  prefs: []
  type: TYPE_NORMAL
- en: This is quite handy while quickly adjusting the generated reports but as this
    process is manual, changing reports like this becomes a chore, especially if the
    reports are large in number or are frequently overwritten.
  prefs: []
  type: TYPE_NORMAL
- en: To solve this limitation, a custom built the Robot Framework can be used. Assuming
    you have access to the entire Robot Framework repository, the files present in
    the `src/robot/htmldata` folder can be manipulated to send any customized changes
    into the framework itself; after installing the Robot Framework, such changes
    become permanent and apply over each and every report generated from the Robot
    Framework.
  prefs: []
  type: TYPE_NORMAL
- en: Creating derived reports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Apart from the log and report files, an XML file is also generated as an output
    from each execution of the test and at times there may be a need to use these
    files as a basis for further analysis of tests, such as a time analysis over a
    piece of software. The XML file can be parsed and analyzed as per the custom requirements.
    In Python, processing XML is quite easy with the built in **elementtree** library
    and the different XML elements can be traversed as a tree and different operations
    can be performed over them.
  prefs: []
  type: TYPE_NORMAL
- en: Recreating reports
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As mentioned earlier, the Robot Framework provides a tool to recreate test output
    files from the generated metadata through the use of the **rebot** tool. This
    tool supports all the arguments of the `pybot` command as mentioned in [Chapter
    1](ch01.html "Chapter 1. Getting Started with the Robot Framework"), *Getting
    Started with the Robot Framework* and uses only the XML file generated as an output.
    This is handy if the other files are not present or while storing a huge collection
    of test results in only the XML format. However, the most important feature of
    rebot lies in combining multiple XML files into a single test, which is handy
    if you have run the same acceptance test in different environments and want to
    present the results in a single file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose you have test results from different states in files such as state0.xml,
    state1.xml, state2.xml, and so on in your folder, then you can simply recreate
    a single test result with a custom named top level test suite by using:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Viewing differences
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Sometimes, you have multiple test results and want to compare the differences
    between themselves. To do this, a diff tool known as **robotdiff** provides comparison
    between test cases. This is present under the `tools/robotdiff` folder in the
    robotframework source. To generate the comparison, do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The default generated report is `robotdiff.html` in the user home folder and
    the result is titled "Test Run Diff Report" with each test name obtained from
    the XML file names.
  prefs: []
  type: TYPE_NORMAL
- en: Further result usage
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As the generated metadata result file is in xUnit-compatible XML format, it
    can be used as an input for external tools that understand this format. One such
    example is the Jenkins plugin ([https://wiki.jenkins-ci.org/display/JENKINS/Robot+Framework+Plugin](https://wiki.jenkins-ci.org/display/JENKINS/Robot+Framework+Plugin))
    that supports statistics generation based on these files.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered the output customization of the generated contents from
    test execution as the data and results arising out of tests can be re-used and
    re-analyzed. The different files and their formats used in the test outputs are
    detailed in order to proceed with their modification. Different methods of modifying
    individual reports, as well as report generation itself to suit an organization's
    demands, are explained. Further pointers on how to modify the framework and use
    programs to generate custom reports is also mentioned, along with report generation
    and usage of test reports.
  prefs: []
  type: TYPE_NORMAL
