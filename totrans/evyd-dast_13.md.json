["```py\n    public int LinearSearchIndex(int[] values, int key) \n    { \n        for (int i = 0; i < values.Length - 1; i++) \n        { \n            if (values[i] == key) \n            { \n                return i; \n            } \n        } \n\n        return -1; \n    } \n\n```", "```py\n    public Customer LinearSearchCustomer(Customer[] customers, int custId) \n    { \n        for (int i = 0; i < customers.Length - 1; i++) \n        { \n            if (customers[i].customerId == custId) \n            { \n                return customers[i]; \n            } \n        } \n\n        return null; \n    } \n\n```", "```py\n    public int linearSearchIndex(int[] values, int key) \n    { \n        for (int i = 0; i < values.length - 1; i++) \n        { \n            if (values[i] == key) \n            { \n                return i; \n            } \n        } \n\n        return -1; \n    } \n\n    public Customer linearSearchCustomer(Customer[] customers, int custId) \n    { \n        for (int i = 0; i < customers.length - 1; i++) \n        { \n            if (customers[i].customerId == custId) \n            { \n                return customers[i]; \n            } \n        } \n\n        return null; \n    } \n\n```", "```py\n    -(NSInteger)linearSearchArray:(NSMutableArray<NSNumber*>*)values byKey:(NSInteger) key \n    { \n        for (int i = 0; i < [values count] - 1; i++) \n        { \n            if ([values[i] intValue] == key) \n            { \n                return i; \n            } \n        } \n\n        return -1; \n    } \n\n    -(EDSCustomer*)linearSearchCustomers:(NSMutableArray<NSNumber*>*)customers byCustId:(NSInteger)custId \n    { \n        for (EDSCustomer *c in customers) \n        { \n            if (c.customerId == custId) \n            { \n                return c; \n            } \n        } \n        return nil; \n    } \n\n```", "```py\n    open func linearSearhIndex( values: [Int], key: Int) -> Int \n    { \n        for i in 0..<values.count \n        { \n            if (values[i] == key) \n            { \n                return i \n            } \n        } \n\n        return -1 \n    } \n\n    open func linearSearchCustomer( customers: [Customer], custId: Int) -> Customer? \n    { \n        for i in 0..<customers.count \n        { \n            if (customers[i].custId == custId) \n            { \n                return customers[i] \n            } \n        } \n        return nil \n    } \n\n```", "```py\n    public int BinarySearch(int[] values, int left, int right, int key) \n    { \n        if (right >= left) \n        { \n            int middle = left + (right - left) / 2; \n\n            if (values[middle] == key) \n            { \n                return middle; \n            } \n            else if (values[middle] > key) \n            { \n                return BinarySearch(values, left, middle - 1, key); \n            } \n\n            return BinarySearch(values, middle + 1, right, key); \n        } \n\n        return -1; \n    } \n\n```", "```py\n    public int binarySearch(int[] values, int left, int right, int key) \n    { \n        if (right >= left) \n        { \n            int mid = left + (right - left) / 2; \n\n            if (values[mid] == key) \n            { \n                return mid; \n            } \n            else if (values[mid] > key) \n            { \n                return binarySearch(values, left, mid - 1, key); \n            } \n\n            return binarySearch(values, mid + 1, right, key); \n        } \n\n        return -1; \n    } \n\n```", "```py\n    -(NSInteger)binarySearchArray:(NSMutableArray<NSNumber*>*)values withLeftIndex:(NSInteger)left \nrightIndex:(NSInteger)right\nandKey:(NSInteger)key \n    { \n        if (right >= left) \n        { \n            NSInteger mid = left + (right - left) / 2; \n\n            if ([values[mid] intValue] == key) \n            { \n                return mid; \n            } \n            else if ([values[mid] intValue] > key) \n            { \n                return [self binarySearchArray:values withLeftIndex:left rightIndex:mid - 1 andKey:key]; \n            } \n\n            return [self binarySearchArray:values withLeftIndex:mid + 1 rightIndex:right andKey:key]; \n        } \n\n        return -1; \n    }  \n\n```", "```py\n    open func binarySearch( values: [Int], left: Int, right: Int, key: Int) -> Int \n    { \n        if (right >= left) \n        { \n            let mid: Int = left + (right - left) / 2 \n\n            if (values[mid] == key) \n            { \n                return mid \n            } \n            else if (values[mid] > key) \n            { \n                return binarySearch(values: values, left: left, right: mid - 1, key: key) \n            } \n\n            return binarySearch(values: values, left: mid + 1, right: right, key: key) \n        } \n\n        return -1 \n    }  \n\n```", "```py\n    public int JumpSearch(int[] values, int key) \n    { \n        int n = values.Length; \n        int step = (int)Math.Sqrt(n); \n        int prev = 0; \n\n        while (values[Math.Min(step, n) - 1] < key) \n        { \n            prev = step; \n            step += (int)Math.Floor(Math.Sqrt(n)); \n            if (prev >= n) \n            { \n                return -1; \n            } \n        } \n\n        while (values[prev] < key) \n        { \n            prev++; \n            if (prev == Math.Min(step, n)) \n            { \n                return -1; \n            } \n        } \n\n        if (values[prev] == key) \n        { \n            return prev; \n        } \n\n        return -1; \n    } \n\n```", "```py\n    public int jumpSearch(int[] values, int key) \n    { \n        int n = values.length; \n        int step = (int)Math.sqrt(n); \n        int prev = 0; \n\n        while (values[Math.min(step, n) - 1] < key) \n        { \n            prev = step; \n            step += (int)Math.floor(Math.sqrt(n)); \n            if (prev >= n) \n            { \n                return -1; \n            } \n        } \n\n        while (values[prev] < key) \n        { \n            prev++; \n            if (prev == Math.min(step, n)) \n            { \n                return -1; \n            } \n        } \n\n        if (values[prev] == key) \n        { \n            return prev; \n        } \n\n        return -1; \n    } \n\n```", "```py\n    -(NSInteger)jumpSearchArray:(NSMutableArray<NSNumber*>*)values forKey: (NSInteger)key \n    { \n        NSInteger n = [values count]; \n        NSInteger step = sqrt(n); \n\n        NSInteger prev = 0; \n        while ([values[(int)fmin(step, n)-1] intValue] < key) \n        { \n            prev = step; \n            step += floor(sqrt(n)); \n            if (prev >= n) \n            { \n                return -1; \n            } \n        } \n\n        while ([values[prev] intValue] < key) \n        { \n            prev++; \n            if (prev == fmin(step, n)) \n            { \n                return -1; \n            } \n        } \n\n        if ([values[prev] intValue] == key) \n        { \n            return prev; \n        } \n\n        return -1; \n    } \n\n```", "```py\n    open func jumpSearch( values: [Int], key: Int) -> Int \n    { \n        let n: Int = values.count \n        var step: Int = Int(sqrt(Double(n))) \n\n        var prev: Int = 0 \n\n        while values[min(step, n) - 1] < key \n        { \n            prev = step \n            step = step + Int(floor(sqrt(Double(n)))) \n            if (prev >= n) \n            { \n                return -1 \n            } \n        } \n\n        while (values[prev] < key) \n        { \n            prev = prev + 1 \n            if (prev == min(step, n)) \n            { \n                return -1 \n            } \n        } \n\n        if (values[prev] == key) \n        { \n            return prev \n        } \n\n        return -1 \n    } \n\n```"]