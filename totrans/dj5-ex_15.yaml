- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building an API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, you built a system for student registration and enrollment
    in courses. You created views to display course contents and learned how to use
    Django’s cache framework.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will create a RESTful API for your e-learning platform.
    An API is a common programmable interface that can be used on multiple platforms
    like websites, mobile applications, plugins, and so on. For example, you can create
    an API to be consumed by a mobile application for your e-learning platform. If
    you provide an API to third parties, they will be able to consume information
    and operate with your application programmatically. An API allows developers to
    automate actions on your platform and integrate your service with other applications
    or online services. You will build a fully featured API for your e-learning platform.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will:'
  prefs: []
  type: TYPE_NORMAL
- en: Install Django REST framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create serializers for your models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build a RESTful API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement serializer method fields
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create nested serializers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Implement ViewSet views and routers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Build custom API views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Handle API authentication
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Add permissions to API views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Create custom permissions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use the Requests library to consume the API
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Figure 15.1* shows a representation of the views and API endpoints that will
    be built in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_15_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.1: Diagram of API views and endpoints to be built in Chapter 15'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will create two different sets of API views, `SubjectViewSet`
    and `CourseViewSet`. The former will include the list and detail views for subjects.
    The latter will include the list and detail views for courses. You will also implement
    the `enroll` action in `CourseViewSet` to enroll students in courses. This action
    will be only available to authenticated users, by using the `IsAuthenticated`
    permission. You will create the `contents` action in `CourseViewSet` to access
    a course’s content. To access course contents, users have to be authenticated
    and enrolled in the given course. You will implement the custom `IsEnrolled` permission
    to limit access to contents to the users enrolled in the course.
  prefs: []
  type: TYPE_NORMAL
- en: If you are not familiar with API endpoints, you just need to know that they
    are the specific locations within an API that accept and respond to requests.
    Each endpoint corresponds to a URL that may accept one or more HTTP methods, like
    `GET`, `POST`, `PUT`, or `DELETE`.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15).
  prefs: []
  type: TYPE_NORMAL
- en: All Python modules used in this chapter are included in the `requirements.txt`
    file in the source code that accompanies this chapter. You can follow the instructions
    to install each Python module below, or you can install all requirements at once
    with the command `python -m pip install -r requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Building a RESTful API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When building an API, there are several ways you can structure its endpoints
    and actions, but following REST principles is encouraged.
  prefs: []
  type: TYPE_NORMAL
- en: The **REST** architecture comes from **Representational State Transfer**. RESTful
    APIs are resource-based; your models represent resources, and HTTP methods such
    as `GET`, `POST`, `PUT`, or `DELETE` are used to retrieve, create, update, or
    delete objects. HTTP response codes are also used in this context. Different HTTP
    response codes are returned to indicate the result of the HTTP request, for example,
    `2XX` response codes for success, `4XX` for errors, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common formats to exchange data in RESTful APIs are JSON and XML.
    You will build a RESTful API with JSON serialization for your project. Your API
    will provide the following functionalities:'
  prefs: []
  type: TYPE_NORMAL
- en: Retrieving subjects
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving available courses
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Retrieving course contents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enrolling in a course
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can build an API from scratch with Django by creating custom views. However,
    there are several third-party modules that simplify creating an API for your project;
    the most popular among them is **Django REST framework** (**DRF**).
  prefs: []
  type: TYPE_NORMAL
- en: 'DRF provides a comprehensive set of tools to build RESTful APIs for your projects.
    The following are some of the most relevant components that we will use to build
    our API:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Serializers**: To transform data into a standardized format that other programs
    can understand, or to *deserialize* data, by converting data into a format that
    your program can process.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Parsers and renderers**: To render (or format) serialized data appropriately
    before it is returned in an HTTP response. Similarly, to parse incoming data to
    ensure that it’s in the correct form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**API views**: To implement the application logic.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**URLs**: To define the API endpoints that will be available.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Authentication and permissions**: To define authentication methods for the
    API and the permissions required for each view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will start by installing DRF and, after that, we will learn more about these
    components to build our first API.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Django REST framework
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can find all the information about **DRF** at [https://www.django-rest-framework.org/](https://www.django-rest-framework.org/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and install the framework with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of the `educa` project and add `rest_framework`
    to the `INSTALLED_APPS` setting to activate the application, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, add the following code to the `settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can provide a specific configuration for your API using the `REST_FRAMEWORK`
    setting. DRF offers a wide range of settings to configure default behaviors. The
    `DEFAULT_PERMISSION_CLASSES` setting specifies the default permissions to read,
    create, update, or delete objects. You set `DjangoModelPermissionsOrAnonReadOnly`
    as the only default permission class. This class relies on Django’s permissions
    system to allow users to create, update, or delete objects while providing read-only
    access for anonymous users. You will learn more about permissions later, in the
    *Adding permissions to views* section.
  prefs: []
  type: TYPE_NORMAL
- en: For a complete list of available settings for DRF, you can visit [https://www.django-rest-framework.org/api-guide/settings/](https://www.django-rest-framework.org/api-guide/settings/).
  prefs: []
  type: TYPE_NORMAL
- en: Defining serializers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'After setting up DRF, you need to specify how your data will be serialized.
    Output data has to be serialized in a specific format, and input data will be
    deserialized for processing. The framework provides the following classes to build
    serializers for single objects:'
  prefs: []
  type: TYPE_NORMAL
- en: '`Serializer`: Provides serialization for normal Python class instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ModelSerializer`: Provides serialization for model instances'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HyperlinkedModelSerializer`: The same as `ModelSerializer`, but it represents
    object relationships with links rather than primary keys'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s build our first serializer. Create the following file structure inside
    the `courses` application directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'You will build all the API functionality inside the `api` directory to keep
    everything well organized. Edit the `api/serializers.py` file and add the following
    code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This is the serializer for the `Subject` model. Serializers are defined in a
    similar fashion to Django’s `Form` and `ModelForm` classes. The `Meta` class allows
    you to specify the model to serialize and the fields to be included for serialization.
    All model fields will be included if you don’t set a `fields` attribute.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s try the serializer. Open the command line and start the Django shell
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In this example, you get a `Subject` object, create an instance of `SubjectSerializer`,
    and access the serialized data. You can see that the model data is translated
    into Python native data types.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about serializers at [https://www.django-rest-framework.org/api-guide/serializers/](https://www.django-rest-framework.org/api-guide/serializers/).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding parsers and renderers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The serialized data has to be rendered in a specific format before you return
    it in an HTTP response. Likewise, when you get an HTTP request, you have to parse
    the incoming data and deserialize it before you can operate with it. DRF includes
    renderers and parsers to handle that.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s see how to parse incoming data. Execute the following code in the Python
    shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Given a JSON string input, you can use the `JSONParser` class provided by DRF
    to convert it to a Python object.
  prefs: []
  type: TYPE_NORMAL
- en: DRF also includes `Renderer` classes that allow you to format API responses.
    The framework determines which renderer to use through content negotiation by
    inspecting the request’s `Accept` header to determine the expected content type
    for the response. Optionally, the renderer is determined by the format suffix
    of the URL. For example, the URL `http://127.0.0.1:8000/api/data.json` might be
    an endpoint that triggers the `JSONRenderer` in order to return a JSON response.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go back to the shell and execute the following code to render the `serializer`
    object from the previous serializer example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'You use the `JSONRenderer` to render the serialized data into JSON. By default,
    DRF uses two different renderers: `JSONRenderer` and `BrowsableAPIRenderer`. The
    latter provides a web interface to easily browse your API. You can change the
    default renderer classes with the `DEFAULT_RENDERER_CLASSES` option of the `REST_FRAMEWORK`
    setting.'
  prefs: []
  type: TYPE_NORMAL
- en: You can find more information about renderers and parsers at [https://www.django-rest-framework.org/api-guide/renderers/](https://www.django-rest-framework.org/api-guide/renderers/)
    and [https://www.django-rest-framework.org/api-guide/parsers/](https://www.django-rest-framework.org/api-guide/parsers/),
    respectively.
  prefs: []
  type: TYPE_NORMAL
- en: Next, you are going to learn how to build API views and use serializers in views.
  prefs: []
  type: TYPE_NORMAL
- en: Building list and detail views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DRF comes with a set of generic views and mixins that you can use to build your
    API views. You have been using generic views throughout this book since *Chapter
    2*, *Enhancing Your Blog and Adding Social Features*,and you learned about mixins
    in *Chapter 13*, *Creating a Content Management System*.
  prefs: []
  type: TYPE_NORMAL
- en: The base views and mixins provide the functionality to retrieve, create, update,
    or delete model objects. You can see all the generic mixins and views provided
    by DRF at [https://www.django-rest-framework.org/api-guide/generic-views/](https://www.django-rest-framework.org/api-guide/generic-views/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s create list and detail views to retrieve `Subject` objects. Create a
    new file inside the `courses/api/` directory and name it `views.py`. Add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, you use the generic `ListAPIView` and `RetrieveAPIView` views
    of DRF. Both views have the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`queryset`: The base QuerySet to use to retrieve objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`serializer_class`: The class to serialize objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s add URL patterns for your views. Create a new file inside the `courses/api/`
    directory, name it `urls.py`, and make it look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'In the URL pattern for the `SubjectDetailView` view, you include a `pk` URL
    parameter to retrieve the object with the given primary key of the `Subject` model,
    which is the `id` field. Edit the main `urls.py` file of the `educa` project and
    include the API patterns, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: You use the `api` namespace for your API URLs. Our initial API endpoints are
    ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By making our views available via URLs, we have created our first API endpoints.
    Let’s now try our own API. Ensure that your server is running with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: We are going to use `curl` to consume the API. `curl` is a command-line tool
    that allows you to transfer data to and from a server. If you are using Linux,
    macOS, or Windows 10/11, `curl` is very likely included in your system. However,
    you can download `curl` from [https://curl.se/download.html](https://curl.se/download.html).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and retrieve the URL `http://127.0.0.1:8000/api/subjects/` with
    `curl`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get a response similar to the following one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'To obtain a more readable, well-indented JSON response, you can use `curl`
    with the `json_pp` utility, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The HTTP response contains a list of `Subject` objects in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of `curl`, you can also use any other tool to send custom HTTP requests,
    including a browser extension such as Postman, which you can get at [https://www.getpostman.com/](https://www.getpostman.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/api/subjects/` in your browser. You will see DRF’s
    browsable API, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text  Description automatically generated](img/B21088_15_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.2: The Subject List page in the REST framework browsable API'
  prefs: []
  type: TYPE_NORMAL
- en: This HTML interface is provided by the `BrowsableAPIRenderer` renderer. It displays
    the result headers and content, and it allows you to perform requests. You can
    also access the API detail view for a `Subject` object by including its ID in
    the URL.
  prefs: []
  type: TYPE_NORMAL
- en: Open `http://127.0.0.1:8000/api/subjects/1/` in your browser. You will see a
    single `Subject` object rendered in the JSON format.
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_15_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.3: The Subject Detail page in the REST framework browsable API'
  prefs: []
  type: TYPE_NORMAL
- en: This is the response for the `SubjectDetailView`. Let’s learn how to enrich
    the content returned for each subject. In the next section, we are going to dive
    into extending serializers with additional fields and methods.
  prefs: []
  type: TYPE_NORMAL
- en: Extending serializers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have learned how to serialize your model objects; however, often, you may
    want to enrich the response with additional relevant data or calculated fields.
    Let’s take a look at some of the options to extend serializers.
  prefs: []
  type: TYPE_NORMAL
- en: Adding additional fields to serializers
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s edit the subject views to include the number of courses available for
    each subject. You will use the Django aggregation functions to annotate the count
    of related courses for each subject.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `api/views.py` file of the `courses` application and add the following
    code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You are now using a QuerySet for the `SubjectListView` and `SubjectDetailView`
    that uses the `Count` aggregation function to annotate the related course count.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `api/serializers.py` file of the `courses` application and add the
    following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: You have added the `total_courses` field to the `SubjectSerializer` class. This
    field is an `IntegerField` to represent integers. This field will automatically
    get its value from the `total_courses` attribute of the object being serialized.
    By using `annotate()`, we added the `total_courses` attribute to the resulting
    objects of the `QuerySet`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/api/subjects/1/` in your browser. The serialized
    JSON object now includes the `total_courses` attribute, as shown in *Figure 15.4*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_15_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.4: The Subject Detail page, including the total_courses attribute'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully added the `total_courses` attribute to the subject list
    and detail views. Now, let’s look into adding additional attributes using custom
    serializer methods.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing serializer method fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DRF provides `SerializerMethodField`, which allows you to implement read-only
    fields that get their value by calling a method of the serializer class. This
    can be particularly useful when you want to include some custom formatted data
    in your serialized object or perform complex calculations that are not directly
    a part of your model instances.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create a method that serializes the top 3 popular courses for a subject.
    We will rank courses by the number of students enrolled in them. Edit the `api/serializers.py`
    file of the `courses` application and add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the new code, you add the new `popular_courses` serializer method field to
    `SubjectSerializer`. The field gets its value from the `get_popular_courses()`
    method. You can provide the name of the serializer method to call with the `method_field`
    argument of `SerializerMethodField`. If not included, this defaults to `get_<field_name>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/api/subjects/1/` in your browser. The serialized
    JSON object now includes the `total_courses` attribute, as shown in *Figure 15.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_15_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.5: The subject detail page, including the popular_courses attribute'
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully implemented a `SerializerMethodField`. Note that, now,
    an additional SQL query is generated for each of the results returned by `SubjectListView`.
    Next, you are going to learn how to control the number of results returned by
    adding pagination to `SubjectListView`.
  prefs: []
  type: TYPE_NORMAL
- en: Adding pagination to views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DRF includes built-in pagination capabilities to control how many objects are
    sent over in your API responses. When the content of your site starts to grow,
    you might end up with a large number of subjects and courses. Pagination can be
    particularly useful to improve performance and the user experience when dealing
    with large datasets.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s update the `SubjectListView` view to include pagination. First, we will
    define a pagination class.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `courses/api/` directory and name it `pagination.py`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'In this class, we inherit from `PageNumberPagination`. This class provides
    support for pagination based on page numbers. We set the following attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`page_size`: Determines the default page size (the number of items returned
    per page) when no page size is provided in the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`page_size_query_params`: Defines the name for the query parameter to use for
    the page size'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`max_page_size`: Indicates the maximum requested page size allowed'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, edit the `api/views.py` file of the `courses` application and add the
    following lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'You can now paginate the objects returned by `SubjectListView`. Open `http://127.0.0.1:8000/api/subjects/`
    in your browser. You can see that the JSON structure returned by the view is now
    different due to the pagination. You will see the following structure:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The following items are now part of the JSON returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '`count`: The total number of results.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`next`: The URL to retrieve the next page. The value is `null` when there are
    no following pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`previous`: The URL to retrieve the previous page. The value is `null` when
    there are no previous pages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`results`: A list with the serialized objects returned on this page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/api/subjects/?page_size=2&page=1` in your browser.
    This will paginate results by two items per page and retrieve the first page of
    results, as shown in *Figure 15.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_15_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.6: First page of results for the subject list pagination, with a
    page size of 2'
  prefs: []
  type: TYPE_NORMAL
- en: We have implemented pagination based on the page number, but DRF also provides
    a class to implement limit/offset and cursor-based pagination. You can read more
    about pagination at [https://www.django-rest-framework.org/api-guide/pagination/](https://www.django-rest-framework.org/api-guide/pagination/).
  prefs: []
  type: TYPE_NORMAL
- en: You have created the API endpoints for the subject views. Next, you will add
    course endpoints to your API.
  prefs: []
  type: TYPE_NORMAL
- en: Building the course serializer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to create a serializer for the `Course` model. Edit the `api/serializers.py`
    file of the `courses` application and add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s take a look at how a `Course` object is serialized. Open the shell and
    execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get a JSON object with the fields that you included in `CourseSerializer`.
    You can see that the related objects of the `modules` manager are serialized as
    a list of primary keys, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: These are the IDs of the related `Module` objects. Next, you are going to learn
    different methods to serialize related objects.
  prefs: []
  type: TYPE_NORMAL
- en: Serializing relations
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: DRF comes with different types of related fields to represent model relationships.
    This works for `ForeignKey`, `ManyToManyField`, and `OneToOneField` relationships,
    as well as generic model relations.
  prefs: []
  type: TYPE_NORMAL
- en: We are going to use `StringRelatedField` to change how related `Module` objects
    are serialized. `StringRelatedField` represents the related object using its `__str__()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `api/serializers.py` file of the `courses` application and add the
    following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: In the new code, you define the `modules` field that provides serialization
    for the related `Module` objects. You use `many=True` to indicate that you are
    serializing multiple related objects. The `read_only` parameter indicates that
    this field is read-only and should not be included in any input to create or update
    objects.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and create an instance of `CourseSerializer` again. Render the
    serializer’s `data` attribute with `JSONRenderer`. This time, the listed modules
    are serialized using their `__str__()` method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: Note that DRF does not optimize QuerySets. When serializing a list of courses,
    a SQL query will be generated for each course result to retrieve the related `Module`
    objects. You can reduce the number of additional SQL requests by using `prefetch_related()`
    in your QuerySet, like `Course.objects.prefetch_related('modules')`. We will cover
    this later in the section *Creating ViewSets and routers*.
  prefs: []
  type: TYPE_NORMAL
- en: You can read more about serializer relations at [https://www.django-rest-framework.org/api-guide/relations/](https://www.django-rest-framework.org/api-guide/relations/).
  prefs: []
  type: TYPE_NORMAL
- en: Let’s advance further and define the serialization of related objects with a
    nested serializer.
  prefs: []
  type: TYPE_NORMAL
- en: Creating nested serializers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we want to include more information about each module, we need to serialize
    `Module` objects and nest them. Modify the previous code of the `api/serializers.py`
    file of the `courses` application to make it look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the new code, you define `ModuleSerializer` to provide serialization for
    the `Module` model. Then, you modify the `modules` attribute of `CourseSerializer`
    to nest the `ModuleSerializer` serializer. You keep `many=True` to indicate that
    you are serializing multiple objects and `read_only=True` to keep this field read-only.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and create an instance of `CourseSerializer` again. Render the
    serializer’s `data` attribute with `JSONRenderer`. This time, the listed modules
    are serialized with the nested `ModuleSerializer` serializer, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Creating ViewSets and routers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'ViewSets allow you to define the interactions of your API and let DRF build
    URLs dynamically with a `Router` object. By using ViewSets, you can avoid repeating
    logic for multiple views. ViewSets include actions for the following standard
    operations:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create operation: `create()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Retrieve operation: `list()` and `retrieve()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Update operation: `update()` and `partial_update()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Delete operation: `destroy()`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let’s create a ViewSet for the `Course` model. Edit the `api/views.py` file
    and add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: The new `CourseViewSet` class inherits from `ReadOnlyModelViewSet`, which provides
    the read-only actions `list()` and `retrieve()` to list objects or retrieve a
    single object, respectively. You specify the base QuerySet to retrieve objects.
    You use `prefetch_related('modules')` to fetch the related `Module` objects in
    an efficient manner. This will avoid additional SQL queries when serializing nested
    modules for each course. In this class, you also define the serializer and pagination
    classes to use for the ViewSet.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `api/urls.py` file and create a router for your ViewSet, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: You create a `DefaultRouter` object and register `CourseViewSet` with the `courses`
    prefix. The router takes charge of generating URLs automatically for your `ViewSet`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/api/` in your browser. You will see that the router
    lists the `courses` ViewSet in its base URL, as shown in *Figure 15.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_15_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.7: The API Root page of the REST framework browsable API'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can access `http://127.0.0.1:8000/api/courses/` to retrieve the list of
    courses, as shown in *Figure 15.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_15_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.8: The Course List page in the REST framework browsable API'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s convert the `SubjectListView` and `SubjectDetailView` views into a single
    ViewSet. Edit the `api/views.py` file, and remove or comment out the `SubjectListView`
    and `SubjectDetailView` classes. Then, add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `api/urls.py` file and remove or comment out the following URLs, since
    you don’t need them anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'In the same file, add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/api/` in your browser. You will see that the router
    now includes URLs for both the `courses` and `subjects` ViewSets, as shown in
    *Figure 15.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_15_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 15.9: The API Root page of the REST framework browsable API'
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about ViewSets at [https://www.django-rest-framework.org/api-guide/viewsets/](https://www.django-rest-framework.org/api-guide/viewsets/).
    You can also find more information about routers at [https://www.django-rest-framework.org/api-guide/routers/](https://www.django-rest-framework.org/api-guide/routers/).
  prefs: []
  type: TYPE_NORMAL
- en: Generic API views and ViewSets are very useful to build REST APIs based on your
    models and serializers. However, you might also need to implement your own views
    with custom logic. Let’s learn how to create a custom API view.
  prefs: []
  type: TYPE_NORMAL
- en: Building custom API views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DRF provides an `APIView` class that builds API functionality on top of Django’s
    `View` class. The `APIView` class differs from `View` by using DRF’s custom `Request`
    and `Response` objects and handling `APIException` exceptions to return the appropriate
    HTTP responses. It also has a built-in authentication and authorization system
    to manage access to views.
  prefs: []
  type: TYPE_NORMAL
- en: 'You are going to create a view for users to enroll in courses. Edit the `api/views.py`
    file of the `courses` application and add the following code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'The `CourseEnrollView` view handles user enrollment in courses. The preceding
    code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You create a custom view that subclasses `APIView`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You define a `post()` method for `POST` actions. No other HTTP method will be
    allowed for this view.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You expect a `pk` URL parameter containing the ID of a course. You retrieve
    the course by the given `pk` parameter and raise a `404` exception if it’s not
    found.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You add the current user to the `students` many-to-many relationship of the
    `Course` object and return a successful response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `api/urls.py` file and add the following URL pattern to the `CourseEnrollView`
    view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: Theoretically, you could now perform a `POST` request to enroll the current
    user in a course. However, you need to be able to identify the user and prevent
    unauthenticated users from accessing this view. Let’s see how API authentication
    and permissions work.
  prefs: []
  type: TYPE_NORMAL
- en: Handling authentication
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: DRF provides authentication classes to identify the user performing the request.
    If authentication is successful, the framework sets the authenticated `User` object
    in `request.user`. If no user is authenticated, an instance of Django’s `AnonymousUser`
    is set instead.
  prefs: []
  type: TYPE_NORMAL
- en: 'DRF provides the following authentication backends:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BasicAuthentication`: This is HTTP basic authentication. The user and password
    are sent by the client in the `Authorization` HTTP header, encoded with Base64\.
    You can learn more about it at [https://en.wikipedia.org/wiki/Basic_access_authentication](https://en.wikipedia.org/wiki/Basic_access_authentication).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`TokenAuthentication`: This is token-based authentication. A `Token` model
    is used to store user tokens. Users include the token in the `Authorization` HTTP
    header for authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SessionAuthentication`: This uses Django’s session backend for authentication.
    This backend is useful for performing authenticated AJAX requests to the API from
    your website’s frontend.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RemoteUserAuthentication`: This allows you to delegate authentication to your
    web server, which sets a `REMOTE_USER` environment variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can build a custom authentication backend by subclassing the `BaseAuthentication`
    class provided by DRF and overriding the `authenticate()` method.
  prefs: []
  type: TYPE_NORMAL
- en: Implementing basic authentication
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can set authentication on a per-view basis or set it globally with the `DEFAULT_AUTHENTICATION_CLASSES`
    setting.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication only identifies the user performing the request. It won’t allow
    or deny access to views. You have to use permissions to restrict access to views.
  prefs: []
  type: TYPE_NORMAL
- en: You can find all the information about authentication at [https://www.django-rest-framework.org/api-guide/authentication/](https://www.django-rest-framework.org/api-guide/authentication/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add `BasicAuthentication` to your view. Edit the `api/views.py` file
    of the `courses` application and add an `authentication_classes` attribute to
    `CourseEnrollView`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: Users will be identified by the credentials set in the `Authorization` header
    of the HTTP request.
  prefs: []
  type: TYPE_NORMAL
- en: Adding permissions to views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'DRF includes a permission system to restrict access to views. Some of the built-in
    permissions of DRF are:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AllowAny`: Unrestricted access, regardless of whether a user is authenticated
    or not.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsAuthenticated`: Allows access to authenticated users only.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`IsAuthenticatedOrReadOnly`: Complete access to authenticated users. Anonymous
    users are only allowed to execute read methods such as `GET`, `HEAD`, or `OPTIONS`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DjangoModelPermissions`: Permissions tied to `django.contrib.auth`. The view
    requires a `queryset` attribute. Only authenticated users with model permissions
    assigned are granted permission.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`DjangoObjectPermissions`: Django permissions on a per-object basis.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If users are denied permission, they will usually get one of the following
    HTTP error codes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`HTTP 401`: Unauthorized'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`HTTP 403`: Permission denied'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can read more information about permissions at [https://www.django-rest-framework.org/api-guide/permissions/](https://www.django-rest-framework.org/api-guide/permissions/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `api/views.py` file of the `courses` application and add a `permission_classes`
    attribute to `CourseEnrollView`, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: You include the `IsAuthenticated` permission. This will prevent anonymous users
    from accessing the view. Now, you can perform a `POST` request to your new API
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure the development server is running. Open the shell and run the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'You got a `401` HTTP code as expected, since you are not authenticated. Let’s
    use basic authentication with one of your users. Run the following command, replacing
    `student:password` with the credentials of an existing user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: You can access the administration site and check that the user is now enrolled
    in the course.
  prefs: []
  type: TYPE_NORMAL
- en: Adding additional actions to ViewSets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can add extra actions to `ViewSets`. Let’s change the `CourseEnrollView`
    view into a custom `ViewSet` action. Edit the `api/views.py` file and modify the
    `CourseViewSet` class to look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding code, you add a custom `enroll()` method that represents an
    additional action for this `ViewSet`. The preceding code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You use the `action` decorator of the framework with the parameter `detail=True`
    to specify that this is an action to be performed on a single object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The decorator allows you to add custom attributes for the action. You specify
    that only the `post()` method is allowed for this view and set the authentication
    and permission classes.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use `self.get_object()` to retrieve the `Course` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You add the current user to the `students` many-to-many relationship and return
    a custom success response.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Edit the `api/urls.py` file and remove or comment out the following URL, since
    you don’t need it anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: Then, edit the `api/views.py` file and remove or comment out the `CourseEnrollView`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The URL to enroll on courses is now automatically generated by the router. The
    URL remains the same, since it’s built dynamically using the action name `enroll`.
  prefs: []
  type: TYPE_NORMAL
- en: After students are enrolled in a course, they need to access the course’s content.
    Next, you are going to learn how to ensure only students who have enrolled can
    access the course.
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom permissions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You want students to be able to access the contents of the courses they are
    enrolled on. Only students enrolled on a course should be able to access its contents.
    The best way to do this is with a custom permission class. DRF provides a `BasePermission`
    class that allows you to define the following methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '`has_permission()`: A view-level permission check'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`has_object_permission()`: An instance-level permission check'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These methods should return `True` to grant access, or `False` otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `courses/api/` directory and name it `permissions.py`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: You subclass the `BasePermission` class and override the `has_object_permission()`.
    You check that the user performing the request is present in the `students` relationship
    of the `Course` object. You are going to use the `IsEnrolled` permission next.
  prefs: []
  type: TYPE_NORMAL
- en: Serializing course contents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You need to serialize course contents. The `Content` model includes a generic
    foreign key that allows you to associate objects of different content models.
    Yet, you added a common `render()` method for all content models in the previous
    chapter. You can use this method to provide rendered content to your API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `api/serializers.py` file of the `courses` application and add the
    following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In this code, you define a custom field by subclassing the `RelatedField` serializer
    field provided by DRF and overriding the `to_representation()` method. You define
    the `ContentSerializer` serializer for the `Content` model and use the custom
    field for the `item` generic foreign key.
  prefs: []
  type: TYPE_NORMAL
- en: 'You need an alternative serializer for the `Module` model that includes its
    contents, as well as an extended `Course` serializer. Edit the `api/serializers.py`
    file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Let’s create a view that mimics the behavior of the `retrieve()` action but
    includes the course contents. Edit the `api/views.py` file and add the following
    method to the `CourseViewSet` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'The description of this method is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: You use the `action` decorator with the parameter `detail=True` to specify an
    action that is performed on a single object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You specify that only the `GET` method is allowed for this action.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use the new `CourseWithContentsSerializer` serializer class that includes
    rendered course contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use both `IsAuthenticated` and your custom `IsEnrolled` permissions. By
    doing so, you make sure that only users enrolled in the course are able to access
    its contents.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use the existing `retrieve()` action to return the `Course` object.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/api/courses/1/contents/` in your browser. If you
    access the view with the right credentials, you will see that each module of the
    course includes the rendered HTML for course contents, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: You have built a simple API that allows other services to access the course
    application programmatically. DRF also allows you to handle creating and editing
    objects with the `ModelViewSet` class. We have covered the main aspects of DRF,
    but you will find further information about its features in its extensive documentation
    at [https://www.django-rest-framework.org/](https://www.django-rest-framework.org/).
  prefs: []
  type: TYPE_NORMAL
- en: Consuming the RESTful API
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you have implemented an API, you can consume it in a programmatic manner
    from other applications. You can interact with the API using the JavaScript Fetch
    API in the frontend of your application, in a similar fashion to the functionalities
    you built in *Chapter 6*, *Sharing Content on Your Website*. You can also consume
    the API from applications built with Python or any other programming language.
  prefs: []
  type: TYPE_NORMAL
- en: You are going to create a simple Python application that uses the RESTful API
    to retrieve all available courses and then enroll a student in all of them. You
    will learn how to authenticate against the API using HTTP basic authentication
    and perform `GET` and `POST` requests.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the Python Requests library to consume the API. We used Requests
    in *Chapter 6*, *Sharing Content on Your Website*, to retrieve images by their
    URL. Requests abstracts the complexity of dealing with HTTP requests and provides
    a very simple interface to consume HTTP services. You can find the documentation
    for the Requests library at [https://requests.readthedocs.io/en/master/](https://requests.readthedocs.io/en/master/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the shell and install the Requests library with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Create a new directory next to the `educa` project directory and name it `api_examples`.
    Create a new file inside the `api_examples/` directory and name it `enroll_all.py`.
    The file structure should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `enroll_all.py` file and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'In this code, you perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: You import the Requests library and define the base URL for the API and the
    URL for the course list API endpoint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You define the `available_courses` empty list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use a `while` statement to paginate over all result pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use `requests.get()` to retrieve data from the API by sending a `GET` request
    to the URL `http://127.0.0.1:8000/api/courses/`. This API endpoint is publicly
    accessible, so it does not require any authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use the `json()` method of the response object to decode the JSON data returned
    by the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You store the `next` attribute in the `url` variable to retrieve the next page
    of results in the `while` statement.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You add the `title` attribute of each course to the `available_courses` list.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When the `url` variable is `None`, you go to the latest page of results and
    you don’t retrieve any additional pages.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You print the list of available courses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Start the development server from the `educa` project directory with the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'In another shell, run the following command from the `api_examples/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see output with a list of all course titles, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: This is the first automated call to your API.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `enroll_all.py` file and add the following lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: Replace the values for the `username` and `password` variables with the credentials
    of an existing user, or load the values from environment variables. You can use
    `python-decouple`, as we did in the *Working with environment variables* section
    in *Chapter 2*, *Enhancing Your Blog and Adding Social Features*, to load credentials
    from environment variables.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the new code, you perform the following actions:'
  prefs: []
  type: TYPE_NORMAL
- en: You define the username and password of the student you want to enroll in courses.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You iterate over the available courses retrieved from the API.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You store the course ID attribute in the `course_id` variable and the `title`
    attribute in the `course_title` variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You use `requests.post()` to send a `POST` request to the URL `http://127.0.0.1:8000/api/courses/[id]/enroll/`
    for each course. This URL corresponds to the `CourseEnrollView` API view, which
    allows you to enroll a user in a course. You build the URL for each course using
    the `course_id` variable. The `CourseEnrollView` view requires authentication.
    It uses the `IsAuthenticated` permission and the `BasicAuthentication` authentication
    class. The Requests library supports HTTP basic authentication out of the box.
    You use the `auth` parameter to pass a tuple with the username and password to
    authenticate the user, using HTTP basic authentication.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If the status code of the response is `200 OK`, you print a message to indicate
    that the user has been successfully enrolled in the course.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can use different kinds of authentication with Requests. You can find more
    information on authentication with Requests at [https://requests.readthedocs.io/en/master/user/authentication/](https://requests.readthedocs.io/en/master/user/authentication/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command from the `api_examples/` directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'You will now see output like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: Great! You have successfully enrolled the user in all available courses using
    the API. You will see a `Successfully enrolled` message for each course on the
    platform. As you can see, it’s very easy to consume the API from any other application.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to use DRF to build a RESTful API for your
    project. You created serializers and views for models, and you built custom API
    views. You also added authentication to your API and restricted access to API
    views using permissions. Next, you discovered how to create custom permissions,
    and you implemented `ViewSets` and routers. Finally, you used the Requests library
    to consume the API from an external Python script.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will teach you how to build a chat server using Django Channels.
    You will implement asynchronous communication using WebSockets, and you will use
    Redis to set up a channel layer.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter15)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework website: [https://www.django-rest-framework.org/](https://www.django-rest-framework.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework settings: [https://www.django-rest-framework.org/api-guide/settings/](https://www.django-rest-framework.org/api-guide/settings/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework serializers: [https://www.django-rest-framework.org/api-guide/serializers/](https://www.django-rest-framework.org/api-guide/serializers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework renderers: [https://www.django-rest-framework.org/api-guide/renderers/](https://www.django-rest-framework.org/api-guide/renderers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework parsers: [https://www.django-rest-framework.org/api-guide/parsers/](https://www.django-rest-framework.org/api-guide/parsers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: REST framework generic mixins and views – [https://www.django-rest-framework.org/api-guide/generic-views/](https://www.django-rest-framework.org/api-guide/generic-views/
    )
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Download `curl`: [https://curl.se/download.html](https://curl.se/download.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Postman API platform: [https://www.getpostman.com/](https://www.getpostman.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework pagination: [https://www.django-rest-framework.org/api-guide/pagination/](https://www.django-rest-framework.org/api-guide/pagination/
    )'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework serializer relations: [https://www.django-rest-framework.org/api-guide/relations/](https://www.django-rest-framework.org/api-guide/relations/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HTTP basic authentication: [https://en.wikipedia.org/wiki/Basic_access_authentication](https://en.wikipedia.org/wiki/Basic_access_authentication)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework authentication: [https://www.django-rest-framework.org/api-guide/authentication/](https://www.django-rest-framework.org/api-guide/authentication/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework permissions: [https://www.django-rest-framework.org/api-guide/permissions/](https://www.django-rest-framework.org/api-guide/permissions/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework `ViewSets`: [https://www.django-rest-framework.org/api-guide/viewsets/](https://www.django-rest-framework.org/api-guide/viewsets/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'REST framework routers: [https://www.django-rest-framework.org/api-guide/routers/](https://www.django-rest-framework.org/api-guide/routers/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Python Requests library documentation: [https://requests.readthedocs.io/en/master/](https://requests.readthedocs.io/en/master/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authentication with the Requests library: [https://requests.readthedocs.io/en/master/user/authentication/](https://requests.readthedocs.io/en/master/user/authentication/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
