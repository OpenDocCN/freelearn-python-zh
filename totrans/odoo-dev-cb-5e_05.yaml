- en: '5'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '5'
- en: Basic Server-Side Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基本服务器端开发
- en: We learned how to declare or extend business models in custom modules in [*Chapter
    4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*. Writing methods for
    calculated fields and ways to restrict the field values are both addressed in
    that chapter’s tutorials. This chapter focuses on the fundamentals of server-side
    programming in Odoo method declarations, record set manipulation, and extending
    inherited methods. You may use this to create or alter business logins in the
    Odoo module.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在[*第4章*](B20997_04.xhtml#_idTextAnchor118) *应用模型*中学习了如何在自定义模块中声明或扩展业务模型。该章节的教程中介绍了为计算字段编写方法和限制字段值的方法。本章重点介绍Odoo方法声明、记录集操作和扩展继承方法的服务器端编程基础。您可以使用这些知识在Odoo模块中创建或修改业务登录。
- en: 'In this chapter, we will cover the following tutorials:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下教程：
- en: Specifying model methods and implementing API decorators
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 指定模型方法和实现API装饰器
- en: Notifying errors to the user
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通知用户错误
- en: Getting a blank recordset for a different model
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为不同的模型获取一个空白记录集
- en: Creating new records
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新记录
- en: Updating values of recordset records
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 更新记录集记录的值
- en: Searching for records
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 搜索记录
- en: Combining recordsets
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 合并记录集
- en: Filtering recordsets
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 过滤记录集
- en: Traversing recordset relations
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 遍历记录集关系
- en: Sorting recordsets
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 排序记录集
- en: Extending a model’s established business logic
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展模型已建立的业务逻辑
- en: Extending `write()` and `create()`
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展`write()`和`create()`
- en: Customizing how records are searched
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定制记录搜索方式
- en: Fetching data in groups using `read_group()`
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`read_group()`按组获取数据
- en: Technical requirements
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The online platform for Odoo is one of the prerequisites for this chapter.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo的在线平台是本章的一个先决条件。
- en: 'You can obtain all the code used in this chapter from the following GitHub
    repository: [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter05)'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从以下GitHub仓库获取本章中使用的所有代码：[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter05](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter05)
- en: Specifying model methods and using API decorators
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 指定模型方法和使用API装饰器
- en: A class in Odoo models consists of both business logic methods and field declarations.
    We learned how to add fields to a model in [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*. We will now see how to include business logic and methods
    in a model.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo模型中的类既包含业务逻辑方法，也包含字段声明。我们在[*第4章*](B20997_04.xhtml#_idTextAnchor118) *应用模型*中学习了如何向模型添加字段。现在我们将看到如何在模型中包含业务逻辑和方法。
- en: In this tutorial, we’ll learn how to create a function that may be used by our
    application’s user interface buttons or another piece of code. This method will
    operate on `HostelRoom` and take the necessary steps to modify the state of a
    number of rooms.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将学习如何创建一个函数，该函数可能被我们的应用程序的用户界面按钮或其他代码片段使用。此方法将在`HostelRoom`上操作，并采取必要的步骤来修改多个房间的状态。
- en: Getting ready
  id: totrans-24
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'This tutorial assumes that you have an instance ready, with the `my_hostel`
    add-on module available, as described in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*. You will need to add a `state` field to the `HostelRoom`
    model, which is defined as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程假设您已准备好一个实例，其中包含`my_hostel`附加模块，如[*第3章*](B20997_03.xhtml#_idTextAnchor083)
    *创建Odoo附加模块*中所述。您需要向`HostelRoom`模型添加一个`state`字段，该字段定义如下：
- en: '[PRE0]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Refer to the *Adding models* tutorial in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*, for more information.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 有关更多信息，请参阅[*第3章*](B20997_03.xhtml#_idTextAnchor083) *创建Odoo附加模块*中的*添加模型*教程。
- en: How to do it…
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'To define a method for hostel rooms to change the state of a selection of rooms,
    you need to add the following code to the model definition:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 要为宿舍房间定义一个方法，以更改所选房间的状态，您需要将以下代码添加到模型定义中：
- en: 'Add a helper method to check whether a state transition is allowed:'
  id: totrans-30
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个辅助方法来检查状态转换是否允许：
- en: '[PRE1]'
  id: totrans-31
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add a method to change the state of a room to a new state that is passed as
    an argument:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法，将房间状态更改为通过参数传递的新状态：
- en: '[PRE2]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add a method to change the room state by calling the `change_state` method:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个方法，通过调用`change_state`方法来更改房间状态：
- en: '[PRE3]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Add a button and status bar in the `<form>` view. This will help us trigger
    these methods from the user interface:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<form>`视图中添加一个按钮和状态栏。这将帮助我们通过用户界面触发这些方法：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: To access these updates, you must update the module or install it.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 要访问这些更新，您必须更新模块或安装它。
- en: How it works…
  id: totrans-39
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Several methods are defined in the tutorial’s code. They are typical Python
    methods with `self` as their first argument and the option of receiving additional
    arguments. The `odoo.api` module’s **decorators** are used to adorn some methods.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 教程代码中定义了几个方法。它们是典型的 Python 方法，以 `self` 作为它们的第一个参数，并可以选择接收额外的参数。`odoo.api` 模块中的
    **装饰器** 用于装饰一些方法。
- en: TIP
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: In Odoo 9.0, the API decorators were first added to support both the old and
    new frameworks. The previous API is no longer supported as of Odoo 10.0, however,
    some decorators, such `@api.model`, are still in use.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 9.0 中，API 装饰器首先被添加以支持旧框架和新框架。从 Odoo 10.0 开始，之前的 API 已不再支持，然而，一些装饰器，如
    `@api.model`，仍然在使用中。
- en: When writing a new method, if you don’t use a decorator, then the method is
    executed on a recordset. In such methods, `self` is a recordset that can refer
    to an arbitrary number of database records (this includes empty recordsets), and
    the code will often loop over the records in `self` to do something on each individual
    record.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 在编写新方法时，如果您不使用装饰器，则该方法将在记录集上执行。在这样的方法中，`self` 是一个可以引用任意数量数据库记录的记录集（这包括空记录集），代码通常会遍历
    `self` 中的记录以对每个单独的记录执行某些操作。
- en: The `@api.model` decorator is similar, but it’s used on methods for which only
    the model is important, not the contents of the recordset, which is not acted
    upon by the method. The concept is similar to Python’s `@``classmethod` decorator.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`@api.model` 装饰器类似，但它用于只关注模型本身的方法，而不是记录集的内容，该方法不会对记录集的内容进行操作。这个概念类似于 Python
    的 `@classmethod` 装饰器。'
- en: In *Step 1*, we created the `is_allowed_transition()` method. The purpose of
    this method is to verify whether a transition from one state to another is valid.
    The tuples in the `allowed` list are the available transitions. For example, we
    don’t want to allow a transition from `closed` to `available`, which is why we
    haven’t put `('``closed, 'available')`.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们创建了 `is_allowed_transition()` 方法。这个方法的目的在于验证从一个状态到另一个状态的转换是否有效。`allowed`
    列表中的元组是可用的转换。例如，我们不希望允许从 `closed` 到 `available` 的转换，这就是为什么我们没有将 `('closed', 'available')`
    放入其中。
- en: In *Step 2*, we created the `change_state()` method. The purpose of this method
    is to change the status of the room. When this method is called, it changes the
    status of the room to the state given by the `new_state` parameter. It only changes
    the room status if the transition is allowed. We used a `for` loop here because
    `self` can contain multiple recordsets.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们创建了 `change_state()` 方法。这个方法的目的在于改变房间的状态。当这个方法被调用时，它将根据 `new_state`
    参数改变房间的状态。只有当转换被允许时，它才会改变房间状态。我们在这里使用了一个 `for` 循环，因为 `self` 可以包含多个记录集。
- en: In *Step 3*, we created the methods that change the state of the room by calling
    the `change_state()` method. In our case, this method will be triggered by the
    buttons that were added to the user interface.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 中，我们创建了通过调用 `change_state()` 方法来改变房间状态的方法。在我们的案例中，这个方法将由添加到用户界面的按钮触发。
- en: In *Step 4*, we added `<button>` in the `<form>` view. Upon clicking this button,
    the Odoo web client will invoke the Python function mentioned in the `name` attribute.
    Refer to the *Adding buttons to forms* tutorial in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*, to learn how to call such a method from the user interface. We
    have also added the `state` field with the `statusbar` widget to display the status
    of the room in the `<``form>` view.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 4* 中，我们在 `<form>` 视图中添加了 `<button>`。点击此按钮后，Odoo 网页客户端将调用 `name` 属性中提到的
    Python 函数。请参考 [*第 9 章*](B20997_09.xhtml#_idTextAnchor446) 的 *添加按钮到表单* 教程，了解如何从用户界面调用此类方法。我们还添加了
    `state` 字段和 `statusbar` 小部件，以在 `<form>` 视图中显示房间的状态。
- en: When the user clicks on the button from the user interface, one of the methods
    from *Step 3* will be called. Here, `self` will be the recordset that contains
    the record of the `hostel.room` model. After that, we call the `change_state()`
    method and pass the appropriate parameter based on the button that was clicked.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户从用户界面点击按钮时，将调用 *步骤 3* 中的某个方法。在这里，`self` 将是包含 `hostel.room` 模型记录的记录集。之后，我们调用
    `change_state()` 方法，并根据点击的按钮传递适当的参数。
- en: When `change_state()` is called, `self` is the same recordset of the `hostel.room`
    model. The body of the `change_state()` method loops over `self` to process each
    room in the recordset. Looping on `self` looks strange at first, but you will
    get used to this pattern very quickly.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 当 `change_state()` 被调用时，`self` 是 `hostel.room` 模型的相同记录集。`change_state()` 方法的主体遍历
    `self` 以处理记录集中的每个房间。一开始在 `self` 上循环看起来很奇怪，但你会很快习惯这种模式。
- en: Inside the loop, `change_state()` calls `is_allowed_transition()`. The call
    is made using the `room` local variable, but it can be made on any recordset for
    the `hostel.room` model, including, for example, `self`, since `is_allowed_transition()`
    is decorated with `@api.model`. If the transition is allowed, `change_state()`
    assigns the new state to the room by assigning a value to the attribute of the
    recordset. This is only valid on recordsets with a length of `1`, which is guaranteed
    to be the case when iterating over `self`.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 在循环内部，`change_state()` 方法调用 `is_allowed_transition()`。调用是通过 `room` 本地变量进行的，但也可以对
    `hostel.room` 模型的任何记录集进行调用，包括例如 `self`，因为 `is_allowed_transition()` 被装饰为 `@api.model`。如果转换被允许，`change_state()`
    通过给记录集的属性赋值来将新状态分配给房间。这仅在长度为 `1` 的记录集上有效，这在遍历 `self` 时是保证的。
- en: Reporting errors to the user
  id: totrans-52
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向用户报告错误
- en: Sometimes, it’s required to stop processing during method execution because
    the user’s activity is invalid or an error condition has been satisfied. By displaying
    an informative error message, this tutorial demonstrates how to handle these situations.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，在方法执行过程中停止处理是必要的，因为用户的活动无效或满足了一个错误条件。通过显示一个信息性错误消息，本教程演示了如何处理这些情况。
- en: The `UserError` exception is commonly utilized to inform users about errors
    or exceptional situations. It is typically employed when the user’s input fails
    to meet the expected criteria or when a particular operation cannot be executed
    due to specific conditions.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`UserError` 异常通常用于通知用户有关错误或异常情况。它通常在用户的输入未能满足预期标准或由于特定条件无法执行特定操作时使用。'
- en: Getting ready
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This tutorial requires that you set up an instance with the `my_hostel` add-on
    module installed, as per the instructions from before.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程要求您根据之前的说明设置一个实例，并安装了 `my_hostel` 扩展模块。
- en: How to do it…
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'We will make a change to the `change_state` method from the previous tutorial
    and display a helpful message when the user is trying to change the state that
    is not allowed by the `is_allowed_transition` method. Perform the following steps
    to get started:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将对前一个教程中的 `change_state` 方法进行修改，并在用户尝试更改 `is_allowed_transition` 方法不允许的状态时显示一条有用的消息。要开始，请执行以下步骤：
- en: 'Add the following import at the beginning of the Python file:'
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 Python 文件的开头添加以下导入：
- en: '[PRE5]'
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Modify the `change_state` method and raise a `UserError` exception from the
    `else` part:'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `change_state` 方法并在 `else` 部分抛出 `UserError` 异常：
- en: '[PRE6]'
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works…
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: When an exception is raised in Python, it propagates up the call stack until
    it is processed. In Odoo, the **remote procedure call** (**RPC**) layer that answers
    the calls made by the web client catches all exceptions and, depending on the
    exception class, triggers different possible behaviors on the web client.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 当 Python 中抛出异常时，它会在调用栈中向上传播，直到被处理。在 Odoo 中，响应网络客户端调用的 **远程过程调用** （**RPC**） 层会捕获所有异常，并根据异常类触发对网络客户端的不同可能行为。
- en: Any exception not defined in `odoo.exceptions` will be handled as an internal
    server error (`UserError` will display an error message in the user interface.
    The code of the tutorial raises `UserError` to ensure that the message is displayed
    in a user-friendly way. In all cases, the current database transaction is rolled
    back.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `odoo.exceptions` 中未定义的任何异常都将被处理为内部服务器错误（`UserError` 将在用户界面中显示错误消息。教程的代码通过抛出
    `UserError` 来确保消息以用户友好的方式显示。在所有情况下，当前数据库事务都会回滚）。
- en: We are using a function with a strange name, `_()`, which is defined in `odoo.tools.translate`.
    This function is used to mark a string as translatable and to retrieve the translated
    string at runtime, given the language of the end user that’s found in the execution
    context. More information on this is available in [*Chapter* *11*](B20997_11.xhtml#_idTextAnchor595),
    *Internationalisation*.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正在使用一个名字奇怪的函数 `_()`，该函数在 `odoo.tools.translate` 中定义。此函数用于标记字符串为可翻译的，并在运行时检索翻译字符串，给定执行上下文中找到的最终用户的语言。更多关于此的信息可以在
    [*第 11 章*](B20997_11.xhtml#_idTextAnchor595)，*国际化* 中找到。
- en: Important note
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: 'When using the `_()` function, ensure that you pass only strings with the interpolation
    placeholder, not the whole interpolated string. For example, `_(''Warning: could
    not find %s'') % value` is correct, but `_(''Warning: could not find %s'' % value)`
    is incorrect because the first one will not find the string with the substituted
    value in the translation database.'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '当使用 `_()` 函数时，确保你只传递带有插值占位符的字符串，而不是整个插值字符串。例如，`_(''Warning: could not find
    %s'') % value` 是正确的，但 `_(''Warning: could not find %s'' % value)` 是错误的，因为前者不会在翻译数据库中找到替换值后的字符串。'
- en: There’s more…
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'Sometimes, you are working on error-prone code, meaning that the operation
    you are performing may generate an error. Odoo will catch this error and display
    a traceback to the user. If you don’t want to show a full error log to the user,
    you can catch the error and raise a custom exception with a meaningful message.
    In the example provided, we are generating `UserError` from the `try...catch`
    block so that instead of showing a full error log, Odoo will now show a warning
    with a meaningful message:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你正在处理容易出错的代码，这意味着你正在执行的操作可能会生成错误。Odoo 会捕获此错误并向用户显示跟踪回溯。如果你不想向用户显示完整的错误日志，你可以捕获错误并引发一个带有有意义信息的自定义异常。在提供的示例中，我们从
    `try...catch` 块生成 `UserError`，这样 Odoo 现在将显示一个带有有意义信息的警告，而不是显示完整的错误日志：
- en: '[PRE7]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'There are a few more exception classes defined in `odoo.exceptions`, all deriving
    from the base legacy `except_orm` exception class. Most of them are only used
    internally, apart from the following:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`odoo.exceptions` 中定义了几个异常类，所有这些类都派生自基类 `except_orm` 异常。其中大多数仅用于内部，除了以下内容：'
- en: '`ValidationError`: This exception is raised when a Python constraint on a field
    is not respected. In [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application
    Models*, refer to the *Adding constraint validations to a model* tutorial for
    more information.'
  id: totrans-73
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`ValidationError`: 当一个字段的 Python 约束不被遵守时，会引发此异常。在[*第 4 章*](B20997_04.xhtml#_idTextAnchor118)，“应用模型”，参考“向模型添加约束验证”教程以获取更多信息。'
- en: '`AccessError`: This error is usually generated automatically when the user
    tries to access something that is not allowed. You can raise the error manually
    if you want to show the access error from your code.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AccessError`: 此错误通常在用户尝试访问不允许的内容时自动生成。如果你想从你的代码中显示访问错误，你可以手动引发此错误。'
- en: '`RedirectWarning`: With this error, you can show a redirection button with
    the error message. You need to pass two parameters to this exception: the first
    parameter is the action ID, and the second parameter is the error message.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`RedirectWarning`: 使用此错误，你可以显示带有错误信息的重定向按钮。你需要向此异常传递两个参数：第一个参数是操作 ID，第二个参数是错误信息。'
- en: '`Warning`: In Odoo 8.0, `odoo.exceptions.Warning` played the same role as `UserError`
    in 9.0 and later. It is now deprecated because the name was deceptive (it is an
    error, not a warning) and it collided with the Python built-in `Warning` class.
    It is kept for backward compatibility only, and you should use `UserError` in
    your code.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Warning`: 在 Odoo 8.0 中，`odoo.exceptions.Warning` 在 9.0 及以后的版本中扮演了与 `UserError`
    相同的角色。现在它已被弃用，因为其名称具有误导性（它是一个错误，而不是警告）并且与 Python 内置的 `Warning` 类冲突。它仅为了向后兼容而保留，你应该在你的代码中使用
    `UserError`。'
- en: Obtaining an empty recordset for a different model
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 获取不同模型的空记录集
- en: The current model’s methods are accessible through `self` while creating Odoo
    code. It is not feasible to start working on a different model by simply instantiating
    its class; you must first obtain a recordset for that model.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 Odoo 代码时，当前模型的方法可以通过 `self` 访问。通过简单地实例化其类来开始对不同的模型进行工作是不可行的；你必须首先获取该模型的记录集。
- en: This tutorial shows you how to get an empty recordset for any model that’s registered
    in Odoo inside a model method.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程向您展示如何在模型方法中为任何在 Odoo 中注册的模型获取空记录集。
- en: Getting ready
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This tutorial will reuse the setup of the library example in the `my_hostel`
    add-on module.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将重用 `my_hostel` 扩展模块中库示例的设置。
- en: We will write a small method in the `hostel.room` model and search for all `hostel.room.members`.
    To do this, we need to get an empty recordset for `hostel.room.members`. Make
    sure you have added the `hostel.room.members` model and access rights for that
    model.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 `hostel.room` 模型中编写一个小的方法，并搜索所有 `hostel.room.members`。为此，我们需要为 `hostel.room.members`
    获取一个空记录集。确保你已经添加了 `hostel.room.members` 模型和该模型的访问权限。
- en: How to do it…
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To get a recordset for `hostel.room.members` in a method of `hostel.room`,
    you need to perform the following steps:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 要在 `hostel.room` 的一个方法中获取 `hostel.room.members` 的记录集，你需要执行以下步骤：
- en: '![Figure 5.1 – log_all_room_members](img/B20997_05_1.jpg)'
  id: totrans-85
  prefs: []
  type: TYPE_IMG
  zh: '![图 5.1 – log_all_room_members](img/B20997_05_1.jpg)'
- en: Figure 5.1 – log_all_room_members
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 图 5.1 – log_all_room_members
- en: 'In the `HostelRoom` class, write a method called `log_all_room_members`:'
  id: totrans-87
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `HostelRoom` 类中，编写一个名为 `log_all_room_members` 的方法：
- en: '[PRE8]'
  id: totrans-88
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add a button to the `<form>` view to invoke our method:'
  id: totrans-89
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `<form>` 视图中添加一个按钮以调用我们的方法：
- en: '[PRE9]'
  id: totrans-90
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Update the module to apply the changes. After that, you will see the `<form>`
    view. You may view the member’s recordset in the server log by clicking that button.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模块以应用更改。之后，你将看到 `<form>` 视图。你可以通过点击该按钮在服务器日志中查看成员的记录集。
- en: How it works…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: At startup, Odoo loads all the modules and combines the various classes that
    derive from `Model`, and also defines or extends the given model. These classes
    are stored in the `env` attribute of any recordset, available as `self.env`, is
    an instance of the `Environment` class defined in the `odoo.api` module.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在启动时，Odoo 加载所有模块，并将从 `Model` 派生的各种类组合在一起，并定义或扩展给定的模型。这些类存储在任何记录集的 `env` 属性中，作为
    `self.env` 可用，是 `odoo.api` 模块中定义的 `Environment` 类的实例。
- en: 'The `Environment` class plays a central role in Odoo development:'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`Environment` 类在 Odoo 开发中扮演着核心角色：'
- en: It provides shortcut access to the registry by emulating a Python dictionary.
    If you know the name of the model you’re looking for, `self.env[model_name]` will
    get you an empty recordset for that model. Moreover, the recordset will share
    the environment of `self`.
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它通过模拟 Python 字典提供对注册表的快捷访问。如果你知道你要查找的模型名称，`self.env[model_name]` 将为你提供该模型的空记录集。此外，记录集将共享
    `self` 的环境。
- en: It has a `cr` attribute, which is a database cursor you may use to pass raw
    SQL queries. Refer to the *Executing raw SQL queries* tutorial in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388),
    *Advanced Server-Side Development Techniques*, for more information on this.
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个 `cr` 属性，这是一个你可以用来传递原始 SQL 查询的数据库游标。有关更多信息，请参阅 [*第 8 章*](B20997_08.xhtml#_idTextAnchor388)，*高级服务器端开发技术*
    中的 *执行原始 SQL 查询* 教程。
- en: It has a `user` attribute, which is a reference to the current user performing
    the call. Take a look at [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced
    Server-Side Development Techniques*, and the *Changing the user performing an
    action* tutorial for more on this.
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个 `user` 属性，它是当前执行调用的用户的引用。有关更多信息，请参阅 [*第 8 章*](B20997_08.xhtml#_idTextAnchor388)，*高级服务器端开发技术*
    和 *更改执行动作的用户* 教程。
- en: It has a `context` attribute, which is a dictionary that contains the context
    of the call. This includes information about the language of the user, the time
    zone, and the current selection of records. Refer to the *Calling a method with
    a modified context* tutorial in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388),
    *Advanced Server-Side Development Techniques*, for more on this.
  id: totrans-98
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它有一个 `context` 属性，它是一个包含调用上下文的字典。这包括有关用户语言、时区和当前记录选择的信息。有关更多信息，请参阅 [*第 8 章*](B20997_08.xhtml#_idTextAnchor388)，*高级服务器端开发技术*
    中的 *使用修改后的上下文调用方法* 教程。
- en: The call to `search()` is explained in the *Searching for records* tutorial
    later.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`search()` 调用将在后面的 *搜索记录* 教程中解释。'
- en: See also
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Sometimes, you want to use a modified version of the environment. One such example
    is that you want an environment with a different user and language. In [*Chapter
    8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side Development Techniques*,
    you will learn how to modify the environment at runtime.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能想使用修改后的环境版本。一个例子是你可能需要一个具有不同用户和语言的环境。在 [*第 8 章*](B20997_08.xhtml#_idTextAnchor388)，*高级服务器端开发技术*
    中，你将学习如何在运行时修改环境。
- en: Creating new records
  id: totrans-102
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新记录
- en: Creating new records is a regular requirement when putting business logic processes
    into practice. How you can build records for the `hostel.room.category` model
    is included in this tutorial. We’ll add a function to the `hostel.room.category`
    model to generate dummy categories for the purposes of our example. We will add
    the `<form>` view to activate this approach.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在将业务逻辑流程付诸实践时，创建新记录是一个常规需求。如何为 `hostel.room.category` 模型构建记录包括在本教程中。我们将向 `hostel.room.category`
    模型添加一个函数，用于生成示例目的的虚拟类别。我们将添加 `<form>` 视图以激活此方法。
- en: Getting ready
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: You need to understand the structure of the models for which you want to create
    a record, especially their names and types, as well as any constraints that exist
    on these fields (for example, whether some of them are mandatory).
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要理解你想要创建记录的模型的结构，特别是它们的名称和类型，以及这些字段上存在的任何约束（例如，是否其中一些是必填的）。
- en: 'For this tutorial, we will reuse the `my_hostel` module from [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*. Take a look at the following example to quickly recall the
    `hostel.room.category` model:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们将重用[*第4章*](B20997_04.xhtml#_idTextAnchor118)，*应用模型*中的`my_hostel`模块。请查看以下示例，快速回忆`hostel.room.category`模型：
- en: '[PRE10]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: Make sure you have added menus, views, and access rights for the `hostel.room.category`
    model.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 确保你已经为`hostel.room.category`模型添加了菜单、视图和访问权限。
- en: How to do it…
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To create a category with some child categories, you need to perform the following
    steps:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个包含一些子类别的类别，你需要执行以下步骤：
- en: '![Figure 5.2 – Create a category](img/B20997_05_2.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图5.2 – 创建类别](img/B20997_05_2.jpg)'
- en: Figure 5.2 – Create a category
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图5.2 – 创建类别
- en: 'Create a method in the `hostel.room.category` model with the name `create_categories`:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`hostel.room.category`模型中创建一个名为`create_categories`的方法：
- en: '[PRE11]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Inside the body of this method, prepare a dictionary of values for the fields
    of the first child category:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在此方法的主体内部，为第一个子类别的字段准备一个值字典：
- en: '[PRE12]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Prepare a dictionary of values for the fields of the second category:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 准备第二个类别字段的值字典：
- en: '[PRE13]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Prepare a dictionary of values for the fields of the parent category:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为父类别的字段准备一个值字典：
- en: '[PRE14]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Call the `create()` method to create the new records:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`create()`方法来创建新的记录：
- en: '[PRE15]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Add a button in the `<form>` view to trigger the `create_categories` method
    from the user interface:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`<form>`视图中添加一个按钮，从用户界面触发`create_categories`方法：
- en: '[PRE16]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: How it works…
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: To add a new record for a model, we can call the `create(values)` method on
    any recordset related to the model. This method returns a new recordset with a
    length of `1` and contains the new record, with the field values specified in
    the `values` dictionary.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 要为模型添加新记录，我们可以在与模型相关的任何记录集上调用`create(values)`方法。此方法返回一个长度为`1`的新记录集，其中包含具有在`values`字典中指定的字段值的记录。
- en: 'The keys in the dictionary identify the fields by name, while the accompanying
    values reflect the field’s value. Depending on the field type, you need to pass
    different Python types for the values:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 字典中的键通过名称标识字段，而伴随的值反映了字段的值。根据字段类型，你需要为值传递不同的Python类型：
- en: A `Text` field value is given with Python strings.
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Text`字段的值是用Python字符串给出的。'
- en: The `Float` and `Integer` field values are given using Python floats or integers.
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Float`和`Integer`字段的值使用Python浮点数或整数给出。'
- en: A `boolean` field value is given preferably using Python Booleans or integers.
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`boolean`字段的值最好使用Python布尔值或整数给出。'
- en: A `Date` field value is given with the Python `datetime.date` object.
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Date`字段的值是用Python的`datetime.date`对象给出的。'
- en: A `Datetime` field value is given with the Python `datetime.datetime` object.
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Datetime`字段的值是用Python的`datetime.datetime`对象给出的。'
- en: A `Binary` field value is passed as a Base64-encoded string. The `base64` module
    from the Python standard library provides methods such as `encodebytes(bytestring)`
    to encode a string in Base64.
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Binary`字段的值作为Base64编码的字符串传递。Python标准库中的`base64`模块提供了如`encodebytes(bytestring)`等方法来对字符串进行Base64编码。'
- en: A `Many2one` field value is given with an integer, which has to be the database
    ID of the related record.
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Many2one`字段的值是用整数给出的，这个整数必须是相关记录的数据库ID。'
- en: '`One2many` and `Many2many` fields use a special syntax. The value is a list
    that contains tuples of three elements, as follows:'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`One2many`和`Many2many`字段使用特殊的语法。值是一个包含三个元素元组的列表，如下所示：'
- en: '![Table 5.1 – Relational field write](img/B20997_05_3.jpg)'
  id: totrans-136
  prefs: []
  type: TYPE_IMG
  zh: '![表5.1 – 关联字段写入](img/B20997_05_3.jpg)'
- en: Table 5.1 – Relational field write
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 表5.1 – 关联字段写入
- en: In this tutorial, we create the dictionaries for two categories in the hostel
    room we want to create, and then we use these dictionaries in the `child_ids`
    entry of the dictionary for the hostel room categories being created by using
    the `(0, 0, dict_val)` syntax we explained earlier.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们为想要创建的宿舍房间中的两个类别创建字典，然后我们使用这些字典在创建宿舍房间类别时，通过之前解释过的`(0, 0, dict_val)`语法，在`child_ids`条目中使用这些字典。
- en: 'When `create()` is called in *Step 5*, three records are created:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 当在*步骤5*中调用`create()`时，将创建三个记录：
- en: One for the parent room category, which is returned by `create`
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用于父房间类别，由`create`返回
- en: Two records for the child room category, which are available in `record.child_ids`
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 `record.child_ids` 中有两个属于儿童房间类别的记录。
- en: There’s more…
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: If the model defined some default values for some fields, nothing special needs
    to be done. `create()` will take care of computing the default values for the
    fields that aren’t present in the supplied dictionary.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模型为某些字段定义了一些默认值，则不需要进行特殊操作。`create()` 方法将负责计算在提供的字典中不存在的字段的默认值。
- en: 'The `create()` method also supports the creation of records in a batch. To
    create multiple records in a batch, you need to pass a list of multiple values
    to the `create()` method, as shown in the following example:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`create()` 方法还支持批量创建记录。要批量创建多个记录，您需要将多个值的列表传递给 `create()` 方法，如下例所示：'
- en: '[PRE17]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: This code will return the recordset of created categories of the hostel room
    category.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将返回已创建的宿舍房间类别的记录集。
- en: Updating values of recordset records
  id: totrans-147
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新记录集记录的值
- en: Business logic often requires us to update records by changing the values of
    some of their fields. This tutorial shows you how to modify the `room_no` field
    of the partner as we go.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 业务逻辑通常要求我们通过更改某些字段的值来更新记录。本教程展示了如何在我们进行过程中修改合作伙伴的 `room_no` 字段。
- en: Getting ready
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This tutorial will use the same simplified `hostel.room` definition of the *Creating
    new records* tutorial. You may refer to this simplified definition to find out
    about the fields.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将使用与*创建新记录*教程相同的简化版 `hostel.room` 定义。您可以参考这个简化定义来了解字段信息。
- en: We have the `room_no` field in the `hostel.room` model. For illustration purposes,
    we will write in this field with the click of a button.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在 `hostel.room` 模型中有一个 `room_no` 字段。为了说明目的，我们将通过点击按钮来写入此字段。
- en: How to do it…
  id: totrans-152
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To update a room’s `room_no` field, you can write a new method called `update_room_no()`,
    which is defined as follows:'
  id: totrans-153
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要更新房间的 `room_no` 字段，您可以编写一个名为 `update_room_no()` 的新方法，其定义如下：
- en: '[PRE18]'
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Then, you can add a button to the room’s `<form>` view in `xml`, as follows:'
  id: totrans-155
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，您可以在 `xml` 中为房间的 `<form>` 视图添加一个按钮，如下所示：
- en: '[PRE19]'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Restart the server and update the `my_hostel` module to see the changes. Upon
    clicking the `room_no` will be changed.
  id: totrans-157
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动服务器并更新 `my_hostel` 模块以查看更改。点击 `room_no` 后，将更改房间号。
- en: How it works…
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The method starts by checking whether the room recordset that’s passed as `self`
    contains exactly one record by calling `ensure_one()`. If this is not the case,
    this procedure will generate an exception, and processing will stop. This is necessary
    because we don’t want to change the room number of multiple records. If you want
    to update multiple values, you can remove `ensure_one()` and update the attribute
    using a loop on the recordset.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 方法首先通过调用 `ensure_one()` 检查作为 `self` 传递的房间记录集是否恰好包含一个记录。如果不是这种情况，此过程将生成异常，并停止处理。这是必要的，因为我们不希望更改多个记录的房间号。如果您想更新多个值，可以移除
    `ensure_one()` 并使用记录集上的循环来更新属性。
- en: Finally, the method modifies the values of the attributes of the room record.
    It updates the `room_no` field with the defined room number. Just by modifying
    the field attributes of the recordset, you can perform write operations.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，该方法修改房间记录的属性值。它使用定义的房间号更新 `room_no` 字段。只需修改记录集的字段属性，就可以执行写操作。
- en: There’s more…
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'There are three options available if you want to add new values to the fields
    of records:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您想向记录的字段添加新值，有三种选择：
- en: Option one is the one that was explained in this tutorial. It works in all contexts
    by assigning values directly to the attribute representing the field of the record.
    It isn’t possible to assign a value to all recordset elements in one go, so, you
    need to iterate on the recordset, unless you are certain that you are only handling
    a single record.
  id: totrans-163
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一种选择是本教程中解释过的。它通过直接分配值给表示记录字段的属性来工作，在所有上下文中都有效。一次无法分配值给所有记录集元素，因此，除非您确定您只处理单个记录，否则您需要遍历记录集。
- en: 'Option two is to use the `update()` method by passing dictionary mapping field
    names to the values you want to set. This also only works for recordsets with
    a length of `1`. It can save some typing when you need to update the values of
    several fields at once on the same record. Here’s *Step 2* of the tutorial, rewritten
    to use this option:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二种选择是使用 `update()` 方法，通过传递字典映射字段名到您想要设置的值。这也仅适用于长度为 `1` 的记录集。当您需要一次性在同一记录上更新多个字段的值时，这可以节省一些打字。以下是教程的
    *步骤 2*，重写为使用此选项：
- en: '[PRE20]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Option three is to call the `write()` method, passing a dictionary that maps
    the field names to the values you want to set. This method works for recordsets
    of arbitrary size and will update all records with the specified values in one
    single database operation when the two previous options perform one database call
    per record and per field. However, it has some limitations: it does not work if
    the records are not yet present in the database (refer to the *Writing on change
    methods* tutorial in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced
    Server-Side Development Techniques*, for more information on this). Also, it requires
    a special format when writing relational fields, similar to the one used by the
    `create()` method. Check the following table for the format that’s used to generate
    different values for the relational fields:'
  id: totrans-166
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三个选项是调用 `write()` 方法，传递一个将字段名映射到要设置的值的字典。此方法适用于任意大小的记录集，并且当前两个选项在每个记录和每个字段上执行一个数据库调用时，它将在单个数据库操作中更新所有具有指定值的记录。然而，它有一些限制：如果记录尚未存在于数据库中，则不起作用（有关更多信息，请参阅
    [*第 8 章*](B20997_08.xhtml#_idTextAnchor388) 中的 *在更改时写入方法* 教程，*高级服务器端开发技术*）。此外，在写入关系字段时需要特殊的格式，类似于
    `create()` 方法使用的格式。请查看以下表格，了解用于生成关系字段不同值的格式：
- en: '![Table 5.2 – Relational field update](img/B20997_05_4.jpg)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
  zh: '![表 5.2 – 关系字段更新](img/B20997_05_4.jpg)'
- en: Table 5.2 – Relational field update
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5.2 – 关系字段更新
- en: Important note
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `1`, `2`, `3`, and `5` operation types cannot be used with the `create()`
    method.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '`1`、`2`、`3` 和 `5` 操作类型不能与 `create()` 方法一起使用。'
- en: Searching for records
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 搜索记录
- en: Searching for records is also a common operation in business logic methods.
    There are many cases where we need to search the data based on different criteria.
    Finding the room by name and category is demonstrated in this tutorial.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在业务逻辑方法中搜索记录也是一个常见的操作。有许多情况下，我们需要根据不同的标准搜索数据。本教程演示了通过名称和类别查找房间。
- en: Getting ready
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This tutorial will use the same `hostel.room` definition as the *Creating new
    records* tutorial did previously. We will write the code in a method called `find_room(self)`.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将使用与 *创建新记录* 教程相同的 `hostel.room` 定义。我们将在名为 `find_room(self)` 的方法中编写代码。
- en: How to do it…
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'To find the rooms, you need to perform the following steps:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 要查找房间，你需要执行以下步骤：
- en: 'Add the `find_room` method to the `hostel.room` model:'
  id: totrans-177
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `find_room` 方法添加到 `hostel.room` 模型中：
- en: '[PRE21]'
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Write the search domain for your criteria:'
  id: totrans-179
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 为你的标准编写搜索域：
- en: '[PRE22]'
  id: totrans-180
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Call the `search()` method with the domain, which will return the recordset:'
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用域调用 `search()` 方法，这将返回记录集：
- en: '[PRE23]'
  id: totrans-182
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The `rooms` variable will have a recordset of searched rooms. You can print
    or log that variable to see the result in the server log.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: '`rooms` 变量将包含搜索到的房间记录集。你可以打印或记录该变量，以在服务器日志中查看结果。'
- en: How it works…
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '*Step 1* defines the method name prefixed with the `def` keyword.'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '*第一步* 定义了以 `def` 关键字为前缀的方法名。'
- en: '*Step 2* creates a search domain in a local variable. Often, you’ll see this
    creation inline in the call to search, but with complex domains, it is good practice
    to define it separately.'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '*第二步* 在局部变量中创建一个搜索域。通常，你会在调用搜索时看到这个创建过程，但对于复杂的域，将其单独定义是一种良好的实践。'
- en: For a full explanation of the search domain syntax, refer to the *Defining filters
    on record lists – domain* tutorial in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 要全面了解搜索域语法，请参阅 [*第 9 章*](B20997_09.xhtml#_idTextAnchor446) 中的 *在记录列表上定义过滤器 –
    域* 教程，*后端视图*。
- en: '*Step 3* calls the `search()` method with the domain. The method returns a
    recordset that contains all the records that match the domain, which can then
    be processed further. In this tutorial, we call the method with just the domain,
    but the following keyword arguments are also supported:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '*第三步* 使用域调用 `search()` 方法。该方法返回一个包含所有匹配域的记录集，然后可以进一步处理。在本教程中，我们仅使用域调用该方法，但以下关键字参数也受支持：'
- en: '`offset=N`: This is used to skip the first `N` records that match the query.
    This can be used along with `limit` to implement pagination or to reduce memory
    consumption when processing a very large number of records. It defaults to `0`.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offset=N`：这用于跳过与查询匹配的前 `N` 条记录。这可以与 `limit` 一起使用来实现分页，或者在处理大量记录时减少内存消耗。默认值为
    `0`。'
- en: '`limit=N`: This indicates that, at most, `N` records should be returned. By
    default, there is no limit.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit=N`：这表示最多应返回 `N` 条记录。默认情况下，没有限制。'
- en: '`order=sort_specification`: This is used to force the order in the recordset
    returned. By default, the order is given by the `_order` attribute of the model
    class.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`order=sort_specification`：此参数用于强制返回记录集中的顺序。默认情况下，顺序由模型类的`_order`属性决定。'
- en: '`count=boolean`: If `True`, this returns the number of records instead of the
    recordset. It defaults to `False`.'
  id: totrans-192
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`count=boolean`：如果为`True`，则返回记录数而不是记录集。默认为`False`。'
- en: Important note
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: We recommend using the `search_count(domain)` method rather than`search(domain,
    count=True)`, as the name of the method conveys the behavior in a much clearer
    way. Both will give the same result.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 我们建议使用`search_count(domain)`方法而不是`search(domain, count=True)`，因为方法名称以更清晰的方式传达了行为。两者将给出相同的结果。
- en: 'Sometimes, you need to search from another model so that searching for `self`
    will return a recordset of the current model. To search from another model, we
    need to get an empty recordset for the model. For example, let’s say we want to
    search for some contacts. To do that, we will need to use the `search()` method
    on the `res.partner` model. Refer to the following code. Here, we get the empty
    recordset of `res.partner` to search the contacts:'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您需要从另一个模型进行搜索，以便搜索`self`返回当前模型的记录集。要从另一个模型进行搜索，我们需要获取该模型的空记录集。例如，假设我们想要搜索一些联系人。为此，我们需要在`res.partner`模型上使用`search()`方法。请参考以下代码。在这里，我们获取`res.partner`的空记录集以搜索联系人：
- en: '[PRE24]'
  id: totrans-196
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code, we have two conditions in the domain. You can omit the
    `'&'` from the domain when you have two conditions to compare, because when you
    do not specify the domain; then, Odoo will take `'&'` as a default.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们在域中有两个条件。当您有两个条件进行比较时，可以省略域中的`'&'`，因为当您没有指定域时，Odoo将`'&'`作为默认值。
- en: There’s more…
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: We said previously that the `search()` method returned all the records matching
    the domain. This is not actually completely true. The security rules ensure that
    the user only gets those records to which they have `read` access rights. Additionally,
    if the model has a `boolean` field called `active` and no term of the search domain
    specifies a condition on that field, then an implicit condition is added by search
    to only return `active=True` records. So, if you expect a search to return something,
    but you only get empty recordsets, ensure that you check the value of the `active`
    field (if present) to check for record rules.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前提到，`search()`方法返回所有匹配域的记录。这实际上并不完全正确。安全规则确保用户只能获取他们具有`read`访问权限的记录。此外，如果模型有一个名为`active`的布尔字段，并且搜索域的任何术语都没有指定该字段的条件，那么搜索将自动添加一个隐式条件，只返回`active=True`的记录。因此，如果您期望搜索返回某些内容，但只得到空记录集，请确保检查`active`字段的值（如果存在），以检查记录规则。
- en: Refer to the *Calling a method with a different context* tutorial in [*Chapter
    8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side Development Techniques*,
    for a way to not have the implicit `active=True` condition added. Take a look
    at the *Limiting record access using record rules* tutorial in [*Chapter 10*](B20997_10.xhtml#_idTextAnchor549),
    *Security Access*, for more information about record-level access rules.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 请参考[*第8章*](B20997_08.xhtml#_idTextAnchor388)中的*调用具有不同上下文的方法*教程，*高级服务器端开发技术*，了解如何不添加隐式的`active=True`条件。请查看[*第10章*](B20997_10.xhtml#_idTextAnchor549)中的*使用记录规则限制记录访问*教程，*安全访问*，以获取有关记录级访问规则的信息。
- en: If, for some reason, you find yourself writing raw SQL queries to find record
    IDs, ensure that you use `self.env['record.model'].search([('id', 'in', tuple(ids))]).ids`
    after retrieving the IDs to ensure that security rules are applied. This is especially
    important in **multi-company** Odoo instances where the record rules are used
    to ensure proper discrimination between companies.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 如果出于某种原因，您发现自己正在编写原始SQL查询以查找记录ID，确保在检索ID后使用`self.env['record.model'].search([('id',
    'in', tuple(ids))]).ids`来确保应用安全规则。这在**多公司**Odoo实例中尤为重要，因为记录规则用于确保公司之间的适当区分。
- en: Combining recordsets
  id: totrans-202
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 合并记录集
- en: Sometimes, you will find that you have obtained recordsets that are not exactly
    what you need. This tutorial shows various ways of combining them.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，您会发现您获得的记录集并不是您需要的。本教程展示了合并它们的多种方法。
- en: Getting ready
  id: totrans-204
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To use this tutorial, you need to have two or more recordsets for the same model.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 使用本教程，您需要为同一模型拥有两个或更多记录集。
- en: How to do it…
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to perform common operations on recordsets:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤执行记录集上的常见操作：
- en: 'To merge two recordsets into one while preserving their order, use the following
    operation:'
  id: totrans-208
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要合并两个记录集到一个中，同时保留它们的顺序，请使用以下操作：
- en: '[PRE25]'
  id: totrans-209
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'To merge two recordsets into one while ensuring that there are no duplicates
    in the result, use the following operation:'
  id: totrans-210
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要合并两个记录集到一个中，同时确保结果中没有重复，请使用以下操作：
- en: '[PRE26]'
  id: totrans-211
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'To find the records that are common to two recordsets, use the following operation:'
  id: totrans-212
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要找到两个记录集中共有的记录，请使用以下操作：
- en: '[PRE27]'
  id: totrans-213
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: How it works…
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The class for recordsets implements various Python operator redefinitions,
    which are used here. Here’s a summary table of the most useful Python operators
    that can be used on recordsets:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 记录集类的实现为各种 Python 操作符重定义，这些操作符在此处被使用。以下是记录集上可用的最有用的 Python 操作符的总结表：
- en: '![Table 5.3 – Operators used with the domain](img/Image96870.jpg)'
  id: totrans-216
  prefs: []
  type: TYPE_IMG
  zh: '![表 5.3 – 与域一起使用的操作符](img/Image96870.jpg)'
- en: Table 5.3 – Operators used with the domain
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 表 5.3 – 与域一起使用的操作符
- en: There are also in-place operators, `+=`, `-=`, `&=`, and `|=`, which modify
    the left-hand side operand instead of creating a new recordset. These are very
    useful when updating a record’s `One2many` or `Many2many` fields. Refer to the
    *Updating values of recordset records* tutorial for an example of this.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有就地操作符 `+=`、`-=`、`&=` 和 `|=`，它们修改左侧操作数而不是创建一个新的记录集。这些操作符在更新记录的 `One2many`
    或 `Many2many` 字段时非常有用。有关此示例，请参阅 *更新记录集记录的值* 教程。
- en: Filtering recordsets
  id: totrans-219
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 过滤记录集
- en: Sometimes, you already have a recordset, but you just need to work on a subset
    of those records. Of course, you may iterate over the recordset, checking for
    the condition each time and taking action in accordance with the outcome of the
    check. The construction of a new recordset comprising only the interesting records
    and the use of a single operation on that recordset can be simpler and, in certain
    situations, more efficient.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你已经有了一个记录集，但只需要处理这些记录的子集。当然，你可以遍历记录集，每次检查条件并根据检查结果采取行动。构建仅包含感兴趣记录的新记录集以及在该记录集上使用单一操作可能更简单，在某些情况下，更有效。
- en: This tutorial shows you how to use the `filter()` method to extract a subset
    of recordsets based on a condition.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何使用 `filter()` 方法根据条件提取记录集的子集。
- en: Getting ready
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will reuse the simplified `hostel.room` model that was shown in the *Creating
    new records* tutorial. This tutorial defines a method to extract rooms that have
    multiple members from a supplied recordset.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用 *创建新记录* 教程中展示的简化 `hostel.room` 模型。本教程定义了一个方法，用于从提供的记录集中提取具有多个成员的房间。
- en: How to do it…
  id: totrans-224
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To extract records that have multiple members from a recordset, you need to
    perform the following steps:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 要从记录集中提取具有多个成员的记录，你需要执行以下步骤：
- en: 'Define the method to filter the recordset:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义过滤记录集的方法：
- en: '[PRE28]'
  id: totrans-227
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Define the method to accept the original recordset:'
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义接受原始记录集的方法：
- en: '[PRE29]'
  id: totrans-229
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Define an inner `predicate` function:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个内部 `predicate` 函数：
- en: '[PRE30]'
  id: totrans-231
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Call `filter()`, as follows:'
  id: totrans-232
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式调用 `filter()`：
- en: '[PRE31]'
  id: totrans-233
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: The outcome of this procedure can be printed or logged so that a server log
    can include it. For further information, see the tutorial’s sample code.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 此过程的输出可以打印或记录，以便服务器日志可以包含它。有关更多信息，请参阅教程的示例代码。
- en: How it works…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The recordset that is created by the `filter()` method’s implementation is empty.
    This blank recordset receives all the records that the predicate function evaluates
    to `True`. Finally, the fresh recordset is given back. Records in the original
    recordset are still in the same sequence.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 由 `filter()` 方法实现创建的记录集是空的。这个空记录集接收所有谓词函数评估为 `True` 的记录。最后，返回一个新的记录集。原始记录集中的记录仍然保持相同的顺序。
- en: 'A named internal function was used in the last tutorial. You will frequently
    see an anonymous Lambda function being utilized for such straightforward predicates:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一个教程中使用了命名内部函数。你将经常看到匿名 Lambda 函数被用于这样的简单谓词：
- en: '[PRE32]'
  id: totrans-238
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Actually, you need to filter a recordset based on the fact that the value of
    a field is *truthy* in the Python sense (non-empty strings, non-zero numbers,
    non-empty containers, and so on). So, if you want to filter records that have
    a category set, you can pass the field name to filter like this: `all_rooms.filter(''category_id'')`.'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 实际上，你需要根据字段值在 Python 中的 *truthy*（非空字符串、非零数字、非空容器等）来过滤记录集。因此，如果你想过滤具有类别设置的记录，你可以像这样传递字段名进行过滤：`all_rooms.filter('category_id')`。
- en: There’s more…
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: Remember that `filter()` uses memory to work. Use a search domain or even switch
    to SQL to improve the speed of a method on the critical route at the cost of readability.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 记住`filter()`使用内存来工作。使用搜索域或甚至切换到SQL以提高关键路径上方法的速度，但会牺牲可读性。
- en: Traversing recordset relations
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 遍历记录集关系
- en: 'When working with a recordset with a length of `1`, various fields are available
    as record attributes. Relational attributes (`One2many`, `Many2one`, and `Many2many`)
    are also available with values that are recordsets, too. As an example, let’s
    say we want to access the name of the category from the recordset of the `hostel.room`
    model. You can access the category name by traversing through the `Many2one` field’s
    `category_id` as follows: `room.category_id.name`. However, when working with
    recordsets with more than one record, the attributes cannot be used.'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 当与长度为`1`的记录集一起工作时，各种字段都可作为记录属性。关系属性（`One2many`、`Many2one`和`Many2many`）也有值，这些值也是记录集。例如，假设我们想从`hostel.room`模型的记录集中访问类别名称。你可以通过以下方式通过`Many2one`字段的`category_id`遍历来访问类别名称：`room.category_id.name`。然而，当与包含多个记录的记录集一起工作时，不能使用属性。
- en: This tutorial demonstrates how to navigate recordset relations using the `mapped()`
    function. We’ll create a function to extract the members’ names from the list
    of rooms that are supplied as input.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程演示了如何使用`mapped()`函数导航记录集关系。我们将创建一个函数，从提供的房间列表中提取成员的名称。
- en: Getting ready
  id: totrans-245
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will reuse the `hostel.room` model that was shown in the *Creating new records*
    tutorial in this chapter.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用本章中*创建新记录*教程中展示的`hostel.room`模型。
- en: How to do it…
  id: totrans-247
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'You must do the following actions in order to retrieve the names of members
    from the room recordset:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从房间记录集中检索成员名称，你必须执行以下操作：
- en: 'Define a method called `get_members_names()`:'
  id: totrans-249
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为`get_members_names()`的方法：
- en: '[PRE33]'
  id: totrans-250
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Call `mapped()` to get the name of the contacts of the member:'
  id: totrans-251
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用`mapped()`以获取成员的联系人名称：
- en: '[PRE34]'
  id: totrans-252
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: How it works…
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Simply defining the method is *Step 1*. The fields of the recordset are traversed
    in *Step 2* by calling the `mapped(path)` function; `path` is a string that comprises
    field names separated by dots. The next element in the route is applied to the
    new recordset created by `mapped()` for each field in the path. This new recordset
    comprises all the records connected by that field to every element in the current
    recordset. A recordset is returned by `mapped()` if the final field in the route
    is a relational field; otherwise, a Python list is returned.
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 简单定义方法是*第一步*。通过调用`mapped(path)`函数遍历记录集字段是*第二步*；`path`是一个由点分隔的字段名字符串。路由中的下一个元素应用于`mapped()`为路径中的每个字段创建的新记录集。这个新记录集包含通过该字段与当前记录集中的每个元素连接的所有记录。如果路由中的最后一个字段是关系字段，则`mapped()`返回一个记录集；否则，返回一个Python列表。
- en: 'The `mapped()` method has two useful properties:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapped()`方法有两个有用的属性：'
- en: When the route is a single scalar field name, the returned list is in the same
    chronological order as the recordset that was processed
  id: totrans-256
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当路由是一个单个标量字段名时，返回的列表与处理过的记录集的时序相同
- en: If a relational field is present in the route, the result’s order is not retained,
    but duplicates are eliminated
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果路由中存在关系字段，则结果顺序不保留，但会消除重复项
- en: Important note
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: This second property is very useful when you want to perform an operation on
    all the records that are pointed to by a `Many2many` field for all the records
    in `self`, but you need to ensure that the action is performed only once (even
    if two records of `self`share the same target record).
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 当你想对`self`中所有记录的`Many2many`字段指向的所有记录执行操作时，这个第二个属性非常有用，但你需要确保操作只执行一次（即使`self`的两个记录共享同一个目标记录）。
- en: There’s more…
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: When using `mapped()`, keep in mind that it operates in memory inside the Odoo
    server by repeatedly traversing relations and therefore making SQL queries, which
    may not be efficient. However, the code is terse and expressive. If you are trying
    to optimize a method on the critical path of the performance of your instance,
    you may want to rewrite the call to `mapped()` and express it as `search()` with
    the appropriate domain, or even move to SQL (at the cost of readability).
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`mapped()`时，请记住它是在Odoo服务器内部通过重复遍历关系并在内存中操作的，因此进行SQL查询，这可能不是高效的。然而，代码简洁且表达性强。如果你试图优化实例性能关键路径上的方法，你可能想要重写对`mapped()`的调用，并以适当的域将其表达为`search()`，甚至切换到SQL（以牺牲可读性为代价）。
- en: The `mapped()` method can also be called with a function as an argument. In
    this case, it returns a list containing the result of the function that’s applied
    to each record of `self`, or the union of the recordsets that’s returned by the
    function, if the function returns a recordset.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '`mapped()` 方法也可以用一个函数作为参数进行调用。在这种情况下，它返回一个包含对 `self` 的每个记录应用函数的结果的列表，或者如果函数返回一个记录集，则返回由函数返回的记录集的并集。'
- en: See also
  id: totrans-263
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关教程
- en: 'For more information, refer to the following:'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 更多信息，请参考以下内容：
- en: The *Searching for records* tutorial in this chapter
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本章的 *搜索记录* 教程
- en: The *Executing raw SQL queries* tutorial in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388),
    *Advanced Server-Side* *Development Techniques*
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 [*第8章*](B20997_08.xhtml#_idTextAnchor388)，*高级服务器端开发技术* 的 *执行原始SQL查询* 教程
- en: Sorting recordsets
  id: totrans-267
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 排序记录集
- en: When you fetch a recordset with the `search()` method, you can pass an optional
    argument order to get a recordset that’s in a particular order. This is useful
    if you already have a recordset from a previous bit of code and you want to sort
    it. It may also be useful if you use a set operation to combine two recordsets,
    for example, which would cause the order to be lost.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 当你使用 `search()` 方法获取记录集时，你可以传递一个可选的排序参数来获取特定顺序的记录集。如果你已经从一个之前的代码段中获取了一个记录集并且想要对其进行排序，这将非常有用。如果你使用集合操作来合并两个记录集，例如，这可能会导致顺序丢失，这也可能很有用。
- en: This tutorial shows you how to use the `sorted()` method to sort an existing
    recordset. We will sort rooms by rating.
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将向您展示如何使用 `sorted()` 方法对现有记录集进行排序。我们将按评级对房间进行排序。
- en: Getting ready
  id: totrans-270
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will reuse the `hostel.room` model that was shown in the *Creating new records*
    tutorial in this chapter.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用本章中在 *创建新记录* 教程中展示的 `hostel.room` 模型。
- en: How to do it…
  id: totrans-272
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'You need to perform the following steps to get the sorted recordset of rooms
    based on `rating`:'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 为了根据 `rating` 获取排序后的房间记录集，你需要执行以下步骤：
- en: 'Define a method called `sort_rooms_by_rating()`:'
  id: totrans-274
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定义一个名为 `sort_rooms_by_rating()` 的方法：
- en: '[PRE35]'
  id: totrans-275
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'Use the `sorted()` method, as in the given example, to sort room records based
    on the `room_rating` field:'
  id: totrans-276
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `sorted()` 方法，如给定示例所示，根据 `room_rating` 字段对房间记录进行排序：
- en: '[PRE36]'
  id: totrans-277
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: How it works…
  id: totrans-278
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: Simply defining the method is *Step 1*. In *Step 2*, we use the recordset of
    the rooms’ `sorted()` function. The field that is supplied as the key parameter
    will have its data fetched internally by the `sorted()` function. Then, it returns
    a `sorted` recordset using Python’s native sorted method.
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 简单定义方法是 *第一步*。在 *第二步* 中，我们使用房间的 `sorted()` 函数的记录集。作为键参数提供的字段将由 `sorted()` 函数内部获取其数据。然后，它使用
    Python 的本地排序方法返回一个排序后的记录集。
- en: 'It also has one optional argument, `reverse=True`, which returns a recordset
    in reverse order. `reverse` is used as follows:'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 它还有一个可选参数，`reverse=True`，它返回一个逆序的记录集。`reverse` 的使用方式如下：
- en: '[PRE37]'
  id: totrans-281
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: There’s more…
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: The `sorted()` method will sort the records in a recordset. Called without arguments,
    the `_order` attribute of the model will be used. Otherwise, a function can be
    passed to compute a comparison key in the same way as the Python built-in sorted
    (sequence, key) function.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`sorted()` 方法将对记录集中的记录进行排序。如果没有参数调用，将使用模型 `_order` 属性。否则，可以传递一个函数来计算比较键，其方式与
    Python 内置的 sorted (sequence, key) 函数相同。'
- en: Important note
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: When the default `_order` parameter of the model is used, the sorting is delegated
    to the database, and a new `SELECT` function is performed to get the order. Otherwise,
    the sorting is performed by Odoo. Depending on what is being manipulated, and
    depending on the size of the recordsets, there might be some important performance
    differences.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用模型的默认 `_order` 参数时，排序被委托给数据库，并执行一个新的 `SELECT` 函数来获取排序。否则，排序由 Odoo 执行。根据所操作的内容以及记录集的大小，可能会有一些重要的性能差异。
- en: Extending the business logic defined in a model
  id: totrans-286
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展模型中定义的业务逻辑
- en: Dividing application functionalities into various modules is a popular practice
    in Odoo. You may easily accomplish this by installing or uninstalling the application,
    which will enable or disable functionalities. Furthermore, you must modify the
    behavior of some methods that were predefined in the original app when you add
    new features to it. An old model could occasionally benefit from the addition
    of fresh fields. This is one of the most useful functions of the underlying framework
    and the process is quite simple in Odoo.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 将应用程序功能划分为各种模块是Odoo中的一种流行做法。您可以通过安装或卸载应用程序轻松实现这一点，这将启用或禁用功能。此外，当您向原始应用程序添加新功能时，您必须修改一些在原始应用程序中预定义的方法的行为。旧模型偶尔会从添加新字段中受益。这是底层框架最有用的功能之一，在Odoo中这个过程相当简单。
- en: In this tutorial, we will see how you can extend the business logic of one method
    from the method in another module. Additionally, we will use the new module to
    add new fields to an existing module.
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将了解如何从另一个模块中的方法扩展一个方法的方法的业务逻辑。此外，我们还将使用新模块向现有模块添加新字段。
- en: Getting ready
  id: totrans-289
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this tutorial, we will continue to use the `my_hostel` module from the last
    tutorial. Make sure that you have the `hostel.room.category` model in the `my_hostel`
    module.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们将继续使用上一教程中的`my_hostel`模块。请确保您在`my_hostel`模块中拥有`hostel.room.category`模型。
- en: For this tutorial, we will create a new module called `my_hostel_terminate`,
    which depends on the `my_ hostel` module. In this module, we will manage termination
    dates from the hostel. We will also automatically calculate the withdrawal date
    based on the category.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 对于本教程，我们将创建一个名为`my_hostel_terminate`的新模块，该模块依赖于`my_ hostel`模块。在这个模块中，我们将管理宿舍的终止日期。我们还将根据类别自动计算退宿日期。
- en: 'In the *How to add features to a model using inheritance* tutorial in [*Chapter
    4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*, we saw how to add
    a field to the existing model. In this module, extend the `hostel.room` model
    as follows:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第4章*](B20997_04.xhtml#_idTextAnchor118)的*如何使用继承向模型添加功能*教程中，我们了解了如何向现有模型添加字段。在本模块中，我们将扩展`hostel.room`模型如下：
- en: '[PRE38]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Then, extend the `hostel.room.category` model, as follows:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照以下方式扩展`hostel.room.category`模型：
- en: '[PRE39]'
  id: totrans-295
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: To add this field in views, you need to follow the *Changing existing views
    – view inheritance* tutorial from [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*. You can find a full example of the code at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition).
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: 要在视图中添加此字段，您需要遵循[*更改现有视图 - 视图继承*](B20997_09.xhtml#_idTextAnchor446)教程，该教程位于[*第9章*](B20997_09.xhtml#_idTextAnchor446)的*后端视图*部分。您可以在[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition)找到完整的代码示例。
- en: How to do it…
  id: totrans-297
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To extend the business logic in the `hostel.room` model, you need to perform
    the following steps:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: 要扩展`hostel.room`模型中的业务逻辑，您需要执行以下步骤：
- en: 'From `my_hostel_terminate`, we want to set `date_terminate` in the `rooms`
    record when we change the room status to `Closed`. For this, we will override
    the `make_closed` method from the `my_` `hostel_terminate` module:'
  id: totrans-299
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从`my_hostel_terminate`模块中，我们希望在将房间状态更改为`Closed`时，在`rooms`记录中设置`date_terminate`。为此，我们将覆盖`my_`
    `hostel_terminate`模块中的`make_closed`方法：
- en: '[PRE40]'
  id: totrans-300
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'We also want to reset `date_terminate` when the room is returned and available
    to borrow, so we will override the `make_available` method to reset the date:'
  id: totrans-301
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们还希望在房间归还并可供借用时重置`date_terminate`，因此我们将覆盖`make_available`方法来重置日期：
- en: '[PRE41]'
  id: totrans-302
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE41]'
- en: How it works…
  id: totrans-303
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: '*Steps 1* and *2*, in the preceding section, carry out the extension of the
    business logic. We define a model that extends `hostel.room` and redefines the
    `make_closed()` and `make_available()` methods. In the last line of both methods,
    the result that was implemented by the parent class is returned:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤1*和*步骤2*，在前一节中执行业务逻辑的扩展。我们定义了一个扩展`hostel.room`的模型，并重新定义了`make_closed()`和`make_available()`方法。在两个方法的最后一行，返回了父类实现的结果：'
- en: '[PRE42]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the case of Odoo models, the parent class is not what you’d expect by looking
    at the Python class definition. The framework has dynamically generated a class
    hierarchy for our recordset, and the parent class is the definition of the model
    from the modules that we depend on. So, the call to `super()` brings back the
    implementation of `hostel.room` from `my_hostel`. In this implementation, `make_closed()`
    changes the state of the room to `Closed`. So, calling `super()` will invoke the
    parent method and it will set the room state to `Closed`.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Odoo 模型的情况下，父类不是通过查看 Python 类定义所期望的。框架已经为我们记录集动态生成了一个类层次结构，父类是我们所依赖的模块中模型的定义。因此，调用
    `super()` 会从 `my_hostel` 中返回 `hostel.room` 的实现。在这个实现中，`make_closed()` 将房间状态改为
    `Closed`。因此，调用 `super()` 将调用父方法，并将房间状态设置为 `Closed`。
- en: There’s more…
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: In this tutorial, we choose to extend the default implementation of the methods.
    In the `make_closed()` and `make_available()` methods, we modified the returned
    result *before* the `super()` call. Note that, when you call `super()`, it will
    execute the default implementation. It is also possible to perform some actions
    *after* the `super()` call. Of course, we can also do both at the same time.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们选择扩展方法的默认实现。在 `make_closed()` 和 `make_available()` 方法中，我们在 `super()`
    调用之前修改了返回的结果。请注意，当你调用 `super()` 时，它将执行默认实现。当然，你还可以在 `super()` 调用之后执行一些操作。当然，我们也可以同时做这两件事。
- en: To alter a method’s behavior in the midst, though, is more challenging. To do
    this, we must restructure the code in order to extract an extension point to a
    different function, which we can then override in the extension module.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，在方法执行过程中改变其行为更具挑战性。为了做到这一点，我们必须重构代码以提取一个扩展点到一个不同的函数，然后我们可以在扩展模块中重写这个函数。
- en: You might be inspired to rewrite a function from scratch. Always proceed with
    extreme caution. The extension mechanism and maybe the add-ons that extend the
    method are broken if you do not use the `super()` implementation of your method,
    which means that the extension methods will never be invoked. Avoid doing this
    unless you are working in a controlled environment where you are certain which
    add-ons are installed and you have verified that you are not breaking them. Additionally,
    if necessary, make sure to clearly document everything you do.
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会受到重写函数的启发。始终要极端小心。如果你不使用你方法中的 `super()` 实现而重写函数，扩展机制以及可能扩展该方法的附加组件将会损坏，这意味着扩展方法将永远不会被调用。除非你在一个受控环境中工作，你确定安装了哪些附加组件，并且你已经验证你没有破坏它们，否则请避免这样做。另外，如果需要，请确保清楚地记录你做的所有事情。
- en: 'What can you do before and after calling the original implementation of the
    method? There are lots of things, including (but not limited to) the following:'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用原始方法实现之前和之后你能做什么？有很多事情，包括但不限于以下内容：
- en: Change the arguments that are sent to the initial implementation (in the past)
  id: totrans-312
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变发送给初始实现的参数（过去）
- en: Alter the context that was previously provided to the original implementation
  id: totrans-313
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 修改之前提供给原始实现的上下文
- en: Change the outcome that the initial implementation returned (after)
  id: totrans-314
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 改变初始实现返回的结果（之后）
- en: Call another method (before and after)
  id: totrans-315
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调用另一个方法（在之前和之后）
- en: Create records (before and after)
  id: totrans-316
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建记录（在之前和之后）
- en: Raise a `UserError` error to cancel the execution in forbidden cases (before
    and after)
  id: totrans-317
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在禁止的情况下抛出 `UserError` 错误以取消执行（在之前和之后）
- en: Split `self` into smaller recordsets and call the original implementation on
    each of the subsets in a different way (before)
  id: totrans-318
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将 `self` 分割成更小的记录集，并以不同的方式对每个子集调用原始实现（之前）
- en: Extending write() and create()
  id: totrans-319
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 扩展 write() 和 create()
- en: Extending the business logic defined in a model tutorial from this chapter showed
    us how to extend methods that are defined on a model class. If you think about
    it, methods that are defined on the parent class of the model are also part of
    the model. This means that all the base methods that are defined on `models.Model`
    (actually, on `models.BaseModel`, which is the parent class of `models.Model`)
    are also available and can be extended.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 从本章的模型教程中扩展定义在模型中的业务逻辑展示了如何扩展定义在模型类上的方法。如果你这么想，定义在模型父类上的方法也是模型的一部分。这意味着所有定义在
    `models.Model`（实际上，在 `models.BaseModel` 上，它是 `models.Model` 的父类）上的基方法都是可用的，并且可以被扩展。
- en: This tutorial shows you how to extend `create()` and `write()` to control access
    to some fields of the records.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程展示了如何扩展 `create()` 和 `write()` 以控制对记录某些字段的访问。
- en: Getting ready
  id: totrans-322
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will extend the library example from the `my_hostel` add-on module in [*Chapter
    3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo* *Add-On Modules*.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将扩展来自 `my_hostel` 扩展模块的库示例，该模块位于 [*第 3 章*](B20997_03.xhtml#_idTextAnchor083)，*创建
    Odoo 扩展模块*。
- en: 'Add a `remarks` field to the `hostel.room` model. We only want members of the
    `Hostel Managers` group to be able to write to that field:'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `remarks` 字段添加到 `hostel.room` 模型中。我们只想让 `Hostel Managers` 组的成员能够写入该字段：
- en: '[PRE43]'
  id: totrans-325
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'Add the `remarks` field to the `<form>` view of the `view/hostel_room.xml`
    file to access this field from the user interface:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 将 `remarks` 字段添加到 `view/hostel_room.xml` 文件的 `<form>` 视图中，以便从用户界面访问此字段：
- en: '[PRE44]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'Modify the `security/ir.model.access.csv` file to give write access to library
    users:'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 `security/ir.model.access.csv` 文件以授予库用户写入权限：
- en: '[PRE45]'
  id: totrans-329
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: How to do it…
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To prevent users who are not members of the manager group from modifying the
    value of `remarks`, you need to perform the following steps:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 为了防止非经理组成员修改 `remarks` 的值，您需要执行以下步骤：
- en: 'Extend the `create()` method, as follows:'
  id: totrans-332
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式扩展 `create()` 方法：
- en: '[PRE46]'
  id: totrans-333
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Extend the `write()` method, as follows:'
  id: totrans-334
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按如下方式扩展 `write()` 方法：
- en: '[PRE47]'
  id: totrans-335
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE47]'
- en: Install the module to see the code in action. Now, only a manager type of user
    can modify the `remarks` field. To test this implementation, you can log in as
    a demo user or revoke manager access from the current user.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: 安装模块以查看代码的实际效果。现在，只有经理类型的用户可以修改 `remarks` 字段。为了测试此实现，您可以登录为演示用户或从当前用户撤销经理访问权限。
- en: How it works…
  id: totrans-337
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: '*Step 1* in the preceding section redefines the `create()` method. Before calling
    the base implementation of `create()`, our method uses the `user_has_groups()`
    method to check whether the user belongs to the `my_hostel.group_hostel_manager`
    group (this is the XML ID of the group). If this is not the case and a value is
    passed for `remarks`, a `UserError` exception is raised, preventing the creation
    of the record. This check is performed before the base implementation is called.'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 1* 在上一节中重新定义了 `create()` 方法。在调用 `create()` 的基类实现之前，我们的方法使用 `user_has_groups()`
    方法来检查用户是否属于 `my_hostel.group_hostel_manager` 组（这是该组的 XML ID）。如果不是这种情况，并且为 `remarks`
    传递了值，则会引发 `UserError` 异常，从而阻止记录的创建。这个检查是在调用基类实现之前执行的。'
- en: '*Step 2* does the same thing for the `write()` method. Prior to writing, we
    check the group and the presence of the field in the values so we can write and
    raise a `UserError` exception if there is a problem.'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 2* 对 `write()` 方法执行同样的操作。在写入之前，我们检查组和值中字段的 presence，以便在出现问题时进行写入并引发 `UserError`
    异常。'
- en: Important note
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: Having the field set to read only in the web client does not prevent RPC calls
    from writing it. This is why we extend `create()` and `write()`.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 在网络客户端将字段设置为只读并不能阻止 RPC 调用写入它。这就是为什么我们扩展了 `create()` 和 `write()`。
- en: 'In this tutorial, you have seen how you can override the `create()` and `write()`
    methods. However, note that this is not limited to the `create()` and `write()`
    methods. You can override any model method. For example, let’s say you want to
    do something when the record is deleted. To do so, you need to override the `unlink()`
    method (the `unlink()` method will be called when the record is deleted). Here
    is the small code snippet to override the `unlink()` method:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，您已经看到了如何覆盖 `create()` 和 `write()` 方法。然而，请注意，这不仅仅限于 `create()` 和 `write()`
    方法。您可以覆盖任何模型方法。例如，假设您想在记录被删除时执行某些操作。为此，您需要覆盖 `unlink()` 方法（当记录被删除时将调用 `unlink()`
    方法）。以下是覆盖 `unlink()` 方法的简短代码片段：
- en: '[PRE48]'
  id: totrans-343
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: Warning
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: '[PRE49]'
  id: totrans-345
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: There’s more…
  id: totrans-346
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容...
- en: When extending `write()`, note that, before calling the `super()` implementation
    of `write()`, `self` is still unmodified. You can use this to compare the current
    values of the fields to the ones in the `values` dictionary.
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: 在扩展 `write()` 时，请注意，在调用 `super()` 实现的 `write()` 之前，`self` 仍然是未修改的。您可以使用这一点来比较字段当前值和
    `values` 字典中的值。
- en: 'In this tutorial, we chose to raise an exception, but we could have also chosen
    to remove the offending field from the `values` dictionary and silently skipped
    updating that field in the record:'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们选择引发异常，但我们也可以选择从 `values` 字典中删除受影响的字段并静默跳过记录中该字段的更新：
- en: '[PRE50]'
  id: totrans-349
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'After calling `super().write()`, if you want to perform additional actions,
    you have to be wary of anything that can cause another call to `write()`, or you
    will create an infinite recursion loop. The workaround is to put a marker in the
    context that will be checked to break the recursion:'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: 在调用`super().write()`之后，如果你想执行额外的操作，你必须小心任何可能导致再次调用`write()`的事情，否则你会创建一个无限递归循环。解决方案是在上下文中放置一个标记，以便检查以中断递归：
- en: '[PRE51]'
  id: totrans-351
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: In the preceding example, we have added the `MyModelLoopBreaker` key before
    calling the `compute_things()` method. So, if the `write()` method is called again,
    it doesn’t go in an infinite loop.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们在调用`compute_things()`方法之前添加了`MyModelLoopBreaker`键。因此，如果再次调用`write()`方法，它不会进入无限循环。
- en: Customizing how records are searched
  id: totrans-353
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义如何搜索记录
- en: The *Defining the model representation and order* tutorial in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*, introduced the `name_get()` method, which is used
    to compute a representation of the record in various places, including in the
    widget that’s used to display `Many2one` relations in the web client.
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第3章*](B20997_03.xhtml#_idTextAnchor083)的*定义模型表示和顺序*教程中，*创建Odoo附加模块*介绍了`name_get()`方法，该方法用于计算记录在各种地方的表现，包括在用于在Web客户端显示`Many2one`关系的控件中。
- en: This tutorial will show you how to search for a room in the `Many2one` widget
    by room number and name by redefining `name_search`.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程将向您展示如何通过重新定义`name_search`来通过房间号和名称在`Many2one`控件中搜索房间。
- en: Getting ready
  id: totrans-356
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'For this tutorial, we will use the following model definition:'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个教程，我们将使用以下模型定义：
- en: '[PRE52]'
  id: totrans-358
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: When using this model, a room in a `Many2one` widget is displayed as `name_search`
    only uses the attribute referred to by the `_rec_name` attribute of the model
    class, which, in our case, is `'name'`. We also want to allow filtering by room
    number.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用此模型时，`Many2one`控件中的房间仅通过`name_search`属性显示，该属性引用模型类的`_rec_name`属性，在我们的情况下是`'name'`。我们还想允许通过房间号进行过滤。
- en: How to do it…
  id: totrans-360
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'You need to perform the following steps in order to execute this tutorial:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 为了执行此教程，你需要执行以下步骤：
- en: 'To be able to search for `hostel.room` either by the room’s name, one of the
    members, or the room number, you need to define the `_name_search()` method in
    the `HostelRoom` class, as follows:'
  id: totrans-362
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要能够通过房间名称、成员之一或房间号来搜索`hostel.room`，你需要在`HostelRoom`类中定义`_name_search()`方法，如下所示：
- en: '[PRE53]'
  id: totrans-363
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'Add the `previous_room_id` `Many2one` field in the `hostel.room` model to test
    the `_name_search` implementation:'
  id: totrans-364
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`hostel.room`模型中添加`previous_room_id` `Many2one`字段以测试`_name_search`实现：
- en: '[PRE54]'
  id: totrans-365
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'Add the following field to the user interface:'
  id: totrans-366
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下字段添加到用户界面：
- en: '[PRE55]'
  id: totrans-367
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE55]'
- en: Restart and update the module to reflect these changes.
  id: totrans-368
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 重新启动并更新模块以反映这些更改。
- en: You can invoke the `_name_search` method by searching in the `previous_room_id`
    `Many2one` field.
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以通过在`previous_room_id` `Many2one`字段中搜索来调用`_name_search`方法。
- en: How it works…
  id: totrans-370
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The default implementation of `name_search()` actually only calls the `_name_search()`
    method, which does the real job. This `_name_search()` method has an additional
    argument, `name_get_uid`, which is used in some corner cases such as if you want
    to compute the results using `sudo()` or with a different user.
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`name_search()`方法的默认实现实际上只调用`_name_search()`方法，该方法执行实际工作。此`_name_search()`方法有一个额外的参数，`name_get_uid`，用于一些边缘情况，例如如果你想要使用`sudo()`或不同的用户来计算结果。'
- en: 'We pass most of the arguments that we receive unchanged to the `super()` implementation
    of the method:'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将接收到的大多数参数不变地传递给方法的`super()`实现：
- en: '`name` is a string that contains the value the user has typed so far.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`是一个包含用户已输入的值的字符串。'
- en: '`args` is either `None` or a search domain that’s used as a prefilter for the
    possible records. (It can come from the domain parameter of the `Many2one` relation,
    for instance.)'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`args`可以是`None`或用作可能记录的前过滤器的搜索域。（它可以来自`Many2one`关系的域参数，例如。）'
- en: '`operator` is a string containing the match operator. Generally, you will have
    `''ilike''` or `''=''`.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`operator`是一个包含匹配操作符的字符串。通常，你会有`''ilike''`或`''=''`。'
- en: '`limit` is the maximum number of rows to retrieve.'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`是要检索的最大行数。'
- en: '`name_get_uid` can be used to specify a different user when calling `name_get()`
    to compute the strings to display in the widget.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name_get_uid`可以在调用`name_get()`时用来指定不同的用户，以计算在控件中显示的字符串。'
- en: 'Our implementation of the method does the following:'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: 我们对该方法实现的实现如下：
- en: It generates a new empty list if `args` is `None`, and makes a copy of `args`
    otherwise. We make a copy to avoid our modifications to the list having side effects
    on the caller.
  id: totrans-379
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `args` 是 `None`，则生成一个新的空列表，否则复制 `args`。我们复制列表是为了避免我们的修改对调用者产生副作用。
- en: Then, we check that `name` is not an empty string or that `operator` is not
    `'ilike'`. This is to avoid generating a dumb domain, such as `[('name', ilike,
    '')]`, that doesn’t filter anything. In this case, we jump straight to the `super()`
    call implementation.
  id: totrans-380
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们检查 `name` 是否不是空字符串，或者 `operator` 是否不是 `'ilike'`。这是为了避免生成一个愚蠢的域，例如 `[('name',
    ilike, '')]`，它不会过滤任何内容。在这种情况下，我们直接跳到 `super()` 调用实现。
- en: If we have `name`, or if `operator` is not `'ilike'`, then we add some filtering
    criteria to `args`. In our case, we add clauses that will search for the supplied
    name in the title of the rooms, in their room number, or the members’ names.
  id: totrans-381
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果我们有 `name`，或者 `operator` 不是 `'ilike'`，那么我们将一些过滤条件添加到 `args` 中。在我们的例子中，我们添加了将搜索提供的名称在房间标题、房间号或成员姓名中的子句。
- en: Finally, we call the `super()` implementation with the modified domain in `args`
    and force `name` to be `''` and `operator` to be `ilike`. We do this to force
    the default implementation of `_name_search()` to not alter the domain it receives,
    so, the one we specified will be used.
  id: totrans-382
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们调用带有修改后的域的 `super()` 实现并在 `args` 中强制 `name` 为 `''` 和 `operator` 为 `ilike`。我们这样做是为了强制默认实现
    `_name_search()` 不更改它接收的域，因此我们将使用我们指定的域。
- en: There’s more…
  id: totrans-383
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多内容…
- en: 'We mentioned in the introduction that this method is used in the `Many2one`
    widget. For completeness, it is also used in the following parts of Odoo:'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在介绍中提到，此方法用于 `Many2one` 小部件。为了完整性，它也用于 Odoo 的以下部分：
- en: When using the `in` operator on the `One2many` and `Many2many` fields in the
    domain
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当在域中使用 `One2many` 和 `Many2many` 字段上的 `in` 操作符时
- en: To search for records in the `many2many_tags` widget
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在 `many2many_tags` 小部件中搜索记录
- en: To search for records in the CSV file import
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要在 CSV 文件中搜索记录，请导入
- en: See also
  id: totrans-388
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Defining the model representation and order* tutorial in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*, demonstrates how to define the `name_get()` method,
    which is used to create a text representation of a record.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 3 章*](B20997_03.xhtml#_idTextAnchor083) 的 *创建 Odoo 扩展模块* 中，*定义记录列表的过滤器
    - 范围* 教程演示了如何定义 `name_get()` 方法，该方法用于创建记录的文本表示。
- en: The *Defining filters on record lists – domain* tutorial in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*, provides more information about search domain syntax.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 9 章*](B20997_09.xhtml#_idTextAnchor446) 的 *后端视图* 中的 *定义记录列表的过滤器 - 范围*
    教程提供了更多关于搜索域语法的详细信息。
- en: Fetching data in groups using read_group()
  id: totrans-391
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 `read_group()` 函数按组获取数据
- en: In the previous tutorials, we saw how we can search and fetch data from the
    database. However, sometimes, you want results by aggregating records, such as
    the average cost of last month’s sales order. Usually, we use `group by` and the
    `aggregate` function in SQL queries for such a result. Luckily, in Odoo, we have
    the `read_group()` method. In this tutorial, you will learn how to use the `read_group()`
    method to get the aggregate result.
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的教程中，我们看到了如何从数据库中搜索和获取数据。然而，有时你希望通过聚合记录来获取结果，例如上个月销售订单的平均成本。通常，我们使用 SQL 查询中的
    `group by` 和 `aggregate` 函数来获取此类结果。幸运的是，在 Odoo 中，我们有 `read_group()` 方法。在本教程中，你将学习如何使用
    `read_group()` 方法来获取聚合结果。
- en: Getting ready
  id: totrans-393
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: In this tutorial, we will use the `my_hostel` add-on module from [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo* *Add-On Modules*.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: 在本教程中，我们将使用来自 [*第 3 章*](B20997_03.xhtml#_idTextAnchor083) 的 `my_hostel` 扩展模块，*创建
    Odoo 扩展模块*。
- en: 'Modify the `hostel.room` model, as shown in the following model definition:'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: 修改 `hostel.room` 模型，如下所示模型定义：
- en: '[PRE56]'
  id: totrans-396
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'Add the `hostel.room.category` model. For simplicity, we will just add it to
    the same `hostel_room.py` file:'
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `hostel.room.category` 模型。为了简单起见，我们将其添加到相同的 `hostel_room.py` 文件中：
- en: '[PRE57]'
  id: totrans-398
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: We will be using the `hostel.room` model and getting an average cost price per
    category.
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `hostel.room` 模型，并获取每个类别的平均成本价格。
- en: How to do it…
  id: totrans-400
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'To extract grouped results, we will add the `_get_average_cost` method to the
    `hostel.room` model, which will use the `read_group()` method to fetch the data
    in a group:'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: 要提取分组结果，我们将向 `hostel.room` 模型添加 `_get_average_cost` 方法，它将使用 `read_group()` 方法按组获取数据：
- en: '[PRE58]'
  id: totrans-402
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: To test this implementation, you need to add a button to the user interface
    that triggers this method. Then, you can print the result in the server log.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 要测试此实现，你需要在用户界面中添加一个按钮来触发此方法。然后，你可以在服务器日志中打印结果。
- en: How it works…
  id: totrans-404
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'The `read_group()` method internally uses the SQL `groupby` and `aggregate`
    functions to fetch the data. The most common arguments that are passed to the
    `read_group()` method are as follows:'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '`read_group()` 方法内部使用 SQL 的 `groupby` 和 `aggregate` 函数来获取数据。传递给 `read_group()`
    方法的最常见参数如下：'
- en: '`domain`: This is used to filter records for grouping. For more information
    on `domain`, refer to the *Searching views* tutorial in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*.'
  id: totrans-406
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`: 这用于过滤分组记录。有关 `domain` 的更多信息，请参阅 [*第 9 章*](B20997_09.xhtml#_idTextAnchor446)
    中的 *搜索视图* 教程，*后端视图*。'
- en: '`fields`: This passes the names of fields you want to fetch with the grouped
    data. Possible values for this argument are as follows:'
  id: totrans-407
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`fields`: 这个参数传递你想要与分组数据一起获取的字段名称。此参数的可能值如下：'
- en: '`field name`: You can pass the field name into the `fields` argument, but if
    you are using this option, then you must pass this field name to the `groupby`
    parameter too, otherwise it will generate an error.'
  id: totrans-408
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`field name`: 你可以将字段名称传递给 `fields` 参数，但如果你使用此选项，则必须将此字段名称传递给 `groupby` 参数，否则将生成错误。'
- en: '`field_name:agg`: You can pass the field name with the `aggregate` function.
    For example, in `cost_price:avg`, `avg` is an SQL aggregate function. A list of
    PostgreSQL aggregate functions can be found at [https://www.postgresql.org/docs/current/static/functions-aggregate.html](https://www.postgresql.org/docs/current/static/functions-aggregate.html).'
  id: totrans-409
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`field_name:agg`: 你可以使用 `aggregate` 函数传递字段名称。例如，在 `cost_price:avg` 中，`avg`
    是一个 SQL 聚合函数。PostgreSQL 聚合函数的列表可以在 [https://www.postgresql.org/docs/current/static/functions-aggregate.html](https://www.postgresql.org/docs/current/static/functions-aggregate.html)
    找到。'
- en: '`name:agg(field_name)`: This is the same as the previous one, but, with this
    syntax, you can provide column aliases, such as `average_price:avg(cost_price)`.'
  id: totrans-410
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name:agg(field_name)`: 这与之前的一个相同，但使用这种语法，你可以提供列别名，例如 `average_price:avg(cost_price)`。'
- en: '`groupby`: This argument accepts a list of field descriptions. Records will
    be grouped based on these fields. For the `date` and `datetime` column, you can
    pass `groupby_function` to apply date groupings based on different time durations.
    You can do grouping based on months for date type fields.'
  id: totrans-411
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groupby`: 此参数接受一个字段描述列表。记录将根据这些字段进行分组。对于 `date` 和 `datetime` 列，你可以传递 `groupby_function`
    来根据不同的时间间隔应用日期分组。你可以对日期类型的字段按月份进行分组。'
- en: '`read_group()` also supports some optional arguments, as follows:'
  id: totrans-412
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read_group()` 也支持一些可选参数，如下所示：'
- en: '`offset`: This indicates an optional number of records to skip.'
  id: totrans-413
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`offset`: 这表示可选的跳过记录数。'
- en: '`limit`: This indicates an optional maximum number of records to return.'
  id: totrans-414
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`limit`: 这表示可选的最大返回记录数。'
- en: '`orderby`: If this option is passed, the result will be sorted based on the
    given fields.'
  id: totrans-415
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`orderby`: 如果传递此选项，则结果将根据给定的字段排序。'
- en: '`lazy`: This accepts Boolean values and, by default, is `True`. If `True` is
    passed, the results are only grouped by the first `groupby`, and the remaining
    `groupby` arguments are put in the `__context` key. If `False`, all `groupby`
    functions are done in one call.'
  id: totrans-416
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`lazy`: 此参数接受布尔值，默认为 `True`。如果传递 `True`，则结果仅按第一个 `groupby` 分组，其余的 `groupby`
    参数放在 `__context` 键中。如果为 `False`，则所有 `groupby` 函数在一个调用中完成。'
- en: Performance tip
  id: totrans-417
  prefs: []
  type: TYPE_NORMAL
  zh: 性能提示
- en: '`read_group()` is a lot faster than reading and processing values from a recordset.
    So, for KPIs or graphs, you should always use `read_group()`.'
  id: totrans-418
  prefs: []
  type: TYPE_NORMAL
  zh: '`read_group()` 比从记录集读取和处理值要快得多。因此，对于 KPI 或图表，你应该始终使用 `read_group()`。'
