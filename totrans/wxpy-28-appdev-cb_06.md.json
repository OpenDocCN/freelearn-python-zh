["```py\nimport wx\n\nclass FileEditorApp(wx.App):\n    def OnInit(self):\n        self.frame = FileEditorFrame(None,\n                                     title=\"File Editor\")\n        self.frame.Show()\n        return True\n\n```", "```py\nclass FileEditorFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(FileEditorFrame, self).__init__(*args, **kwargs) \n\n        # Attributes\n        self.file = None\n        style = style=wx.TE_MULTILINE|wx.TE_RICH2\n        self.txtctrl = wx.TextCtrl(self, style=style)\n\n        # Setup\n        self._SetupMenus()\n\n        # Layout\n        sizer = wx.BoxSizer(wx.VERTICAL)\n        sizer.Add(self.txtctrl, 1, wx.EXPAND)\n        self.SetSizer(sizer)\n\n        # Event Handlers\n        self.Bind(wx.EVT_MENU, self.OnOpen, id=wx.ID_OPEN)\n        self.Bind(wx.EVT_MENU, self.OnSave, id=wx.ID_SAVE)\n        self.Bind(wx.EVT_MENU, self.OnSave, id=wx.ID_SAVEAS)\n        self.Bind(wx.EVT_MENU, self.OnExit, id=wx.ID_EXIT)\n        self.Bind(wx.EVT_CLOSE, self.OnExit)\n\n    def _SetupMenus(self):\n        \"\"\"Make the frames menus\"\"\"\n        menub = wx.MenuBar()\n        fmenu = wx.Menu()\n        fmenu.Append(wx.ID_OPEN, \"Open\\tCtrl+O\")\n        fmenu.AppendSeparator()\n        fmenu.Append(wx.ID_SAVE, \"Save\\tCtrl+S\")\n        fmenu.Append(wx.ID_SAVEAS, \"Save As\\tCtrl+Shift+S\")\n        fmenu.AppendSeparator()\n        fmenu.Append(wx.ID_EXIT, \"Exit\\tCtrl+Q\")\n        menub.Append(fmenu, \"File\")\n        self.SetMenuBar(menub)\n\n```", "```py\n    #---- Event Handlers ----#\n\n    def OnOpen(self, event):\n        \"\"\"Handle Open\"\"\"\n        if event.GetId() == wx.ID_OPEN:\n            self.DoOpen()\n        else:\n            event.Skip()\n\n    def OnSave(self, event):\n        \"\"\"Handle Save/SaveAs\"\"\"\n        evt_id = event.GetId()\n        if evt_id in (wx.ID_SAVE,\n                      wx.ID_SAVEAS):\n            if self.file:\n                self.Save(self.file)\n            else:\n                self.DoSaveAs()\n        else:\n            event.Skip()\n\n    def OnExit(self, event):\n        \"\"\"Handle window close event\"\"\"\n        # Give warning about unsaved changes\n        if self.txtctrl.IsModified():\n            message = (\"There are unsaved changes.\\n\\n\"\n                       \"Would you like to save them?\")\n            style = wx.YES_NO|wx.ICON_WARNING|wx.CENTRE\n            result = wx.MessageBox(message,\n                                   \"Save Changes?\",\n                                   style=style)\n            if result == wx.YES:\n                if self.file is None:\n                    self.DoSaveAs()\n                else:\n                    self.Save(self.file)\n        event.Skip()\n\n    #---- End Event Handlers ----#\n\n    #---- Implementation ----#\n\n```", "```py\n    def DoOpen(self):\n        \"\"\"Show file open dialog and open file\"\"\"\n        wildcard = \"Text Files (*.txt)|*.txt\"\n        dlg = wx.FileDialog(self,\n                            message=\"Open a File\",\n                            wildcard=wildcard,\n                            style=wx.FD_OPEN)\n        if dlg.ShowModal() == wx.ID_OK:\n            path = dlg.GetPath()\n            with open(path, \"rb\") as handle:\n                text = handle.read()\n                self.txtctrl.SetValue(text)\n                self.file = path\n        dlg.Destroy()\n\n```", "```py\n    def DoSaveAs(self):\n        \"\"\"Show SaveAs dialog\"\"\"\n        wildcard = \"Text Files (*.txt)|*.txt\"\n        dlg = wx.FileDialog(self,\n                            message=\"Save As\",\n                            wildcard=wildcard,\n                            style=wx.FD_SAVE\n                                  |wx.FD_OVERWRITE_PROMPT)\n        if dlg.ShowModal() == wx.ID_OK:\n            path = dlg.GetPath()\n            self.Save(path)\n            self.file = path\n        dlg.Destroy()\n\n    def Save(self, path):\n        \"\"\"Save the file\"\"\"\n        with open(path, \"wb\") as handle:\n            text = self.txtctrl.GetValue()\n            handle.write(text)\n            self.txtctrl.SetModified(False)\n\n    #---- End Implementation ----#\n\n#---- Main Execution ----#\nif __name__ == \"__main__\":\n    app = FileEditorApp(False)\n    app.MainLoop()\n\n```", "```py\n“All Files (*)|*|Text Files (*.txt;*.in)|*.txt;*.in”\n\n```", "```py\nDescription1|wildcard1|Description2|wildcard1;wildcard2\n\n```", "```py\nimport wx\n# FileDialog Recipe sample module\nimport filedialog\n\nclass FindReplaceEditorFrame(filedialog.FileEditorFrame):\n    def __init__(self, parent, *args, **kwargs):\n        super(FindReplaceEditorFrame, self).__init__(*args,\n                                                     **kwargs)\n\n        # Attributes\n        self.finddlg = None\n        self.finddata = wx.FindReplaceData()\n\n        # Setup\n        menub = self.GetMenuBar()\n        editmenu = wx.Menu()\n        editmenu.Append(wx.ID_FIND, \"Find\\tCtrl+F\")\n        editmenu.Append(wx.ID_REPLACE, \"Replace\\tCtrl+R\")\n        menub.Append(editmenu, \"Edit\")\n\n        # Event Handlers\n        self.Bind(wx.EVT_MENU,\n                  self.OnFindMenu,\n                  id=wx.ID_FIND)\n        self.Bind(wx.EVT_MENU,\n                  self.OnFindMenu,\n                  id=wx.ID_REPLACE)\n        self.Bind(wx.EVT_FIND, self.OnFind)\n        self.Bind(wx.EVT_FIND_NEXT, self.OnFind)\n        self.Bind(wx.EVT_FIND_REPLACE, self.OnReplace)\n        self.Bind(wx.EVT_FIND_REPLACE_ALL, self.OnReplaceAll)\n        self.Bind(wx.EVT_FIND_CLOSE, self.OnFindClose)\n\n```", "```py\n    def _InitFindDialog(self, mode):\n        if self.finddlg:\n            self.finddlg.Destroy()\n\n        style = (wx.FR_NOUPDOWN\n                 |wx.FR_NOMATCHCASE\n                 |wx.FR_NOWHOLEWORD)\n        if mode == wx.ID_REPLACE:\n            style |= wx.FR_REPLACEDIALOG\n            title = \"Find/Replace\"\n        else:\n            title = \"Find\"\n        dlg = wx.FindReplaceDialog(self,\n                                   self.finddata,\n                                   title,\n                                   style)\n        self.finddlg = dlg\n\n    # ---- Event Handlers ----#\n\n```", "```py\n    def OnFindMenu(self, event):\n        evt_id = event.GetId()\n        if evt_id in (wx.ID_FIND, wx.ID_REPLACE):\n            self._InitFindDialog(evt_id)\n            self.finddlg.Show()\n        else:\n            event.Skip()\n\n```", "```py\n    def OnFind(self, event):\n        \"\"\"Find text\"\"\"\n        findstr = self.finddata.GetFindString()\n        if not self.FindString(findstr):\n            wx.Bell() # beep at the user for no match\n\n    def OnReplace(self, event):\n        \"\"\"Replace text\"\"\"\n        rstring = self.finddata.GetReplaceString()\n        fstring = self.finddata.GetFindString()\n        cpos = self.GetInsertionPoint()\n        start, end = cpos, cpos\n        if fstring:\n            if self.FindString(fstring):\n                start, end = self.txtctrl.GetSelection()\n        self.txtctrl.Replace(start, end, rstring)\n\n    def OnReplaceAll(self, event):\n        \"\"\"Do a replace all\"\"\"\n        rstring = self.finddata.GetReplaceString()\n        fstring = self.finddata.GetFindString()\n        text = self.txtctrl.GetValue()\n        newtext = text.replace(fstring, rstring)\n        self.txtctrl.SetValue(newtext)\n\n    def OnFindClose(self, event):\n        if self.finddlg:\n            self.finddlg.Destroy()\n            self.finddlg = None\n\n    #---- End Event Handlers ----#\n\n    #---- Implementation ----#\n\n```", "```py\n    def FindString(self, findstr):\n        \"\"\"Find findstr in TextCtrl and set selection\"\"\"\n        text = self.txtctrl.GetValue()\n        csel = self.txtctrl.GetSelection()\n        if csel[0] != csel[1]:\n            cpos = max(csel)\n        else:\n            cpos = self.txtctrl.GetInsertionPoint()\n\n        if cpos == self.txtctrl.GetLastPosition():\n            cpos = 0\n\n        # Do a simple case insensitive search \n        # to find the next match\n        text = text.upper()\n        findstr = findstr.upper()\n        found = text.find(findstr, cpos)\n        if found != -1:\n            end = found + len(findstr)\n            self.txtctrl.SetSelection(end, found)\n            self.txtctrl.SetFocus()\n            return True\n        return False\n\n```", "```py\nimport wx\nimport wx.lib.imagebrowser as imagebrowser\n\nclass ImageDialogApp(wx.App):\n    def OnInit(self):\n        self.frame = ImageDialogFrame(None,\n                                       title=\"ImageDialog\")\n        self.frame.Show()\n        return True\n\nclass ImageDialogFrame(wx.Frame):\n    def __init__(self, parent, *args, **kwargs):\n        super(ImageDialogFrame, self).__init__(*args, \n                                               **kwargs)wx.Frame.__init__(self, parent, *args, **kwargs)\n\n        # Attributes\n        self.panel = ImageDialogPanel(self)\n\nclass ImageDialogPanel(wx.Panel):\n    def __init__(self, parent, *args, **kwargs):\n        super(ImageDialogPanel, self).__init__(*args, \n                                               **kwargs)wx.Panel.__init__(self, parent, *args, **kwargs)\n\n        # Attributes\n        self.lastpath = None\n        self.bmp = wx.StaticBitmap(self)\n        self.btn = wx.Button(self, label=\"Choose Image\")\n\n        # Layout\n        vsizer = wx.BoxSizer(wx.VERTICAL)\n        hsizer = wx.BoxSizer(wx.HORIZONTAL)\n        vsizer.Add(self.bmp, 0, wx.ALIGN_CENTER)\n        vsizer.AddSpacer((5, 5))\n        vsizer.Add(self.btn, 0, wx.ALIGN_CENTER)\n        hsizer.AddStretchSpacer()\n        hsizer.Add(vsizer, 0, wx.ALIGN_CENTER)\n        hsizer.AddStretchSpacer()\n        self.SetSizer(hsizer)\n\n        # Event Handlers\n        self.Bind(wx.EVT_BUTTON, self.OnShowDialog, self.btn)\n\n    def OnShowDialog(self, event):\n        # Create the dialog with the path cached\n        # from the last time it was opened\n        dlg = imagebrowser.ImageDialog(self, self.lastpath)\n        if dlg.ShowModal() == wx.ID_OK:\n            # Save the last used path\n            self.lastpath = dlg.GetDirectory()\n            imgpath = dlg.GetFile()\n            bitmap = wx.Bitmap(imgpath)\n            if bitmap.IsOk():\n                self.bmp.SetBitmap(bitmap)\n                self.Layout()\n                self.bmp.Refresh()\n        dlg.Destroy()\n\nif __name__ == '__main__':\n    app = ImageDialogApp(False)\n    app.MainLoop()\n\n```", "```py\ndlg.ChangeFileTypes([('png, '*.png'), ('jpeg', '*.jpg')])\n\n```", "```py\nclass BitmapPrinter(object):\n    \"\"\"Manages PrintData and Printing\"\"\"\n    def __init__(self, parent):\n        \"\"\"Initializes the Printer\n        @param parent: parent window\n        \"\"\"\n        super(BitmapPrinter, self).__init__()\n\n        # Attributes\n        self.parent = parent\n        self.print_data = wx.PrintData()\n\n    def CreatePrintout(self, bmp):\n        \"\"\"Creates a printout object\n        @param bmp: wx.Bitmap\n        \"\"\"\n        assert bmp.IsOk(), \"Invalid Bitmap!\"\n        data = wx.PageSetupDialogData(self.print_data)\n        return BitmapPrintout(bmp, data)\n\n```", "```py\n    def PageSetup(self):\n        \"\"\"Show the PrinterSetup dialog\"\"\"\n        # Make a copy of our print data for the setup dialog\n        dlg_data = wx.PageSetupDialogData(self.print_data)\n        print_dlg = wx.PageSetupDialog(self.parent, dlg_data)\n        if print_dlg.ShowModal() == wx.ID_OK:\n            # Update the printer data with the changes from\n            # the setup dialog.\n            newdata = dlg_data.GetPrintData()\n            self.print_data = wx.PrintData(newdata)\n            paperid = dlg_data.GetPaperId()\n            self.print_data.SetPaperId(paperid)\n        print_dlg.Destroy()\n)\n\n```", "```py\n    def Preview(self, bmp):\n        \"\"\"Show the print preview\n        @param bmp: wx.Bitmap\n        \"\"\"\n        printout = self.CreatePrintout(bmp)\n        printout2 = self.CreatePrintout(bmp)\n        preview = wx.PrintPreview(printout, printout2,\n                                  self.print_data)\n        preview.SetZoom(100)\n        if preview.IsOk():\n            pre_frame = wx.PreviewFrame(preview,\n                                        self.parent,\n                                        \"Print Preview\")\n            # The default size of the preview frame\n            # sometimes needs some help.\n            dsize = wx.GetDisplaySize()\n            width = self.parent.GetSize()[0]\n            height = dsize.GetHeight() - 100\n            pre_frame.SetInitialSize((width, height))\n            pre_frame.Initialize()\n            pre_frame.Show()\n        else:\n            # Error\n            wx.MessageBox(\"Failed to create print preview\",\n                          \"Print Error\",\n                          style=wx.ICON_ERROR|wx.OK)\n\n```", "```py\n    def Print(self, bmp):\n        \"\"\"Prints the document\"\"\"\n        pdd = wx.PrintDialogData(self.print_data)\n        printer = wx.Printer(pdd)\n        printout = self.CreatePrintout(bmp)\n        result = printer.Print(self.parent, printout)\n        if result:\n            # Store copy of print data for future use\n            dlg_data = printer.GetPrintDialogData()\n            newdata = dlg_data.GetPrintData()\n            self.print_data = wx.PrintData(newdata)\n        elif printer.GetLastError() == wx.PRINTER_ERROR:\n            wx.MessageBox(\"Printer error detected.\",\n                          \"Printer Error\",\n                          style=wx.ICON_ERROR|wx.OK)\n        printout.Destroy()\n\n```", "```py\nclass BitmapPrintout(wx.Printout):\n    \"\"\"Creates an printout of a Bitmap\"\"\"\n    def __init__(self, bmp, data):\n        super(BitmapPrintout, self).__init__()wx.Printout.__init__(self)\n\n        # Attributes\n        self.bmp = bmp\n        self.data = data\n\n    def GetPageInfo(self):\n        \"\"\"Get the page range information\"\"\"\n        # min, max, from, to # we only support 1 page\n        return (1, 1, 1, 1)\n\n    def HasPage(self, page):\n        \"\"\"Is a page within range\"\"\"\n        return page <= 1\n\n    def OnPrintPage(self, page):\n        \"\"\"Scales and Renders the bitmap\n        to a DC and prints it\n        \"\"\"\n        dc = self.GetDC() # Get Device Context to draw on\n\n        # Get the Bitmap Size\n        bmpW, bmpH = self.bmp.GetSize()\n\n        # Check if we need to scale the bitmap to fit\n        self.MapScreenSizeToPageMargins(self.data)\n        rect = self.GetLogicalPageRect()\n        w, h = rect.width, rect.height\n        if (bmpW > w) or (bmpH > h):\n            # Image is large so apply some scaling\n            self.FitThisSizeToPageMargins((bmpW, bmpH),\n                                          self.data)\n            x, y = 0, 0\n        else:\n            # try to center it\n            x = (w - bmpW) / 2\n            y = (h - bmpH) / 2\n\n        # Draw the bitmap to DC\n        dc.DrawBitmap(self.bmp, x, y)\n\n        return True\n\n```"]