["```py\nfor x in coll:\n    print(x)\n```", "```py\nsource_iter= iter(source)\nheading= next(source_iter)\nfor data in source_iter:\n    print(data)\n```", "```py\nheading, *rest = source\nfor data in rest:\n    print(data)\n```", "```py\n(expression for target in source)\n```", "```py\n>>> (2*x+1 for x in range(5))\n<generator object <genexpr> at 0x1023981e0>\n```", "```py\n>>> tuple(2*x+1 for x in range(5))\n(1, 3, 5, 7, 9)\n```", "```py\n>>> x= (2*x+1 for x in range(20))\n>>> sum(x)\n400\n>>> sum(x)\n0\n```", "```py\n>>> deck= list((r,s) for s in '♣♦♥♠' for r in range(1,14))\n>>> deck # doctest: +ELLIPSIS\n[(1, '♣'), (2, '♣'), (3, '♣'), ... (11, '♠'), (12, '♠'), (13, '♠')]\n>>> len(deck)\n52\n```", "```py\n>>> list(x for x in range(36) if x%5 == 0 or x%7 == 0)\n[0, 5, 7, 10, 14, 15, 20, 21, 25, 28, 30, 35]\n```", "```py\n[2*x+1 for x in range(5)]\n{x for x in range(36) if x%5 == 0 or x%7 == 0}\n{n: 2*n**2-3*n-14 for n in range(-5,6)}\n```", "```py\ndef model_iter(until):\n    for n in range(0, until):\n        yield n*(n+1)//2\n```", "```py\n>>> list(model_iter(6))\n[0, 1, 3, 6, 10, 15]\n```", "```py\n>>> mean = sum(model_iter(6))/6\n>>> round(mean, 4)\n5.8333\n```", "```py\n>>> mapping= map( lambda x: 2*x**2-2, range(5) )\n>>> list(mapping)\n[-2, 0, 6, 16, 30]\n```", "```py\n>>> fb= filter( lambda n: n%5==0 or n%7==0, range(16) )\n>>> [n for n in fb]\n[0, 5, 7, 10, 14, 15]\n```", "```py\ndef text_cleaner( source ):\n    stripped = (line.strip() for line in source)\n    partitioned = (line.partition(\"#\") for line in stripped)\n    decommented = (data.rstrip() for data, sharp, comment in partitioned)\n    non_empty = (line for line in decommented if line)\n    return non_empty\n```", "```py\n>>> text = '''\n... # options\n... db=name # database\n...  task=delete # task\n... '''.splitlines()\n>>> for line in text_cleaner(text):\n...    print(line)\ndb=name\ntask=delete\n```", "```py\n>>> data = [\"21\", \"3\", \"35\", \"4\"]\n>>> min(data)\n'21'\n>>> min(data, key=int)\n'3'\n```", "```py\n>>> data\n[['2013-09-10', '289'], ['2013-09-11', '616'],\n. . . ,\n['2013-12-07', '752'], ['2013-12-08', '739']]\n```", "```py\n>>> data.sort(key=lambda x: int(x[1]))\n>>> by_count= sorted(data, key=lambda x: int(x[1]))\n```", "```py\n>>> wrapped = [(int(x[1]), x) for x in data]\n>>> wrapped.sort()\n>>> by_count = [x[1] for x in wrapped]\n```"]