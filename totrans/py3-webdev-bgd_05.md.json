["```py\nfrom entity import Entity\nclass Car(Entity): pass Car.threadinit('c:/tmp/cardatabase.db')\nCar.inittable(make=\"\",model=\"\",licenseplate=\"unique\")\nmycar = Car(make=\"Volvo\",model=\"C30\",licenseplate=\"12-abc-3\")\nyourcar = Car(make=\"Renault\",model=\"Twingo\",licenseplate=\"ab-cd-12\")\nallcars = Car.list()\nfor id in allcars:\n\tcar=Car(id=id)\n\tprint(car.make, car.model, car.licenseplate)\n\n```", "```py\nimport sqlite3 as sqlite\nimport threading\nclass Entity:\n\tthreadlocal = threading.local()\n\t@classmethod\n\tdef threadinit(cls,db): if not hasattr(cls.threadlocal,'connection') or \ncls.threadlocal.connection is None:\n\t\t\t\tcls.threadlocal.connection=sqlite.connect(db)\n\t\t\t\tcls.threadlocal.connection.row_factory = sqlite.Row\n\t\t\t\tcls.threadlocal.connection.execute(\"pragma foreign_\nkeys=1\")\n\t\t\telse:\n\t\t\t\tpass #print('threadinit thread has a connection \nobject already')\n\n```", "```py\n@classmethod\ndef inittable(cls,**kw):\n\t\tcls.columns=kw\n\t\tconnection=cls.threadlocal.connection\n\t\tcoldefs=\",\".join(k+' '+v for k,v in kw.items()) sql=\"create table if not exists %s (%s_id integer primary \nkey autoincrement, %s);\"%(cls.__name__,cls.__name__,coldefs)\n\t\tconnection.execute(sql)\n\t\tconnection.commit()\n\n```", "```py\nCar.inittable(make=\"\",model=\"\",licenseplate=\"unique\")\n\n```", "```py\ncreate table if not exists Car (\nCar_id integer primary key autoincrement,\nmake ,\nlicenseplate unique,\nmodel\n);\n\n```", "```py\ndef __init__(self,id=None,**kw): for k in kw:\n\t\t\tif not k in self.__class__.columns :\n\t\t\t\traise KeyError(\"unknown column\")\n\t\tcursor=self.threadlocal.connection.cursor()\n\t\tif id:\n\t\t\tif len(kw):\n\t\t\t\traise KeyError(\"columns specified on \nretrieval\")\n\t\t\tsql=\"select * from %s where %s_id = ?\"%(\n\t\t\tself.__class__.__name__,self.__class__.__name__)\n\t\t\tcursor.execute(sql,(id,))\n\t\t\tentities=cursor.fetchall() if len(entities)!=1 : \n\t\t\t\traise ValueError(\"not a singular entity\")\n\t\t\tself.id=id\n\t\t\tfor k in self.__class__.columns: setattr(self,k,entities[0][k])\n\t\telse:\n\t\t\tcols=[]\n\t\t\tvals=[]\n\t\t\tfor c,v in kw.items():\n\t\t\t\tcols.append(c)\n\t\t\t\tvals.append(v)\n\t\t\t\tsetattr(self,c,v)\n\t\t\tcols=\",\".join(cols)\n\t\t\tnvals=\",\".join([\"?\"]*len(vals)) sql=\"insert into %s (%s) values(%s)\"%(\n\t\t\tself.__class__.__name__,cols,nvals)\n\t\t\ttry:\n\t\t\t\twith self.threadlocal.connection as conn:\n\t\t\t\t\tcursor=conn.cursor() cursor.execute(sql,vals)\n\t\t\t\t\tself.id=cursor.lastrowid\n\t\t\texcept sqlite.IntegrityError:\n\t\t\t\t\traise ValueError(\"duplicate value for unique \ncol\")\n\n```", "```py\nCar(id=1)\n\n```", "```py\nselect * from Car where Car_id = ?\n\n```", "```py\nCar(make=\"Volvo\", model=\"C30\", licenseplate=\"12-abc-3\")\n\n```", "```py\ninsert into Car (make,model,licenseplate) values(?,?,?)\n\n```", "```py\ncar.update(make='Peugeot')\n\n```", "```py\ncar.make='Peugeot'\ncar.update()\n\n```", "```py\ndef update(self,**kw): for k in kw:\n\t\t\tif not k in self.__class__.columns :\n\t\t\t\traise KeyError(\"unknown column\")\n\t\tfor k,v in kw.items():\n\t\t\tsetattr(self,k,v)\n\t\tupdates=[]\n\t\tvalues=[]\n\t\tfor k in self.columns:\n\t\t\tupdates.append(\"%s=?\"%k)\n\t\t\tvalues.append(getattr(self,k))\n\t\tupdates=\",\".join(updates)\n\t\tvalues.append(self.id)\n\t\tsql=\"update %s set %s where %s_id = ?\"%(\n\t\tself.__class__.__name__, updates, self.__class__.__name__)\n\t\twith self.threadlocal.connection as conn:\n\t\t\tcursor=conn.cursor()\n\t\t\tcursor.execute(sql, values) if cursor.rowcount != 1 :\n\t\t\t\traise ValueError(\n\t\t\t\t\"number of updated entities not 1 (%d)\" %\n\t\t\t\tcursor.rowcount)\n\n```", "```py\nupdate Car set make=?, model=?, licenseplate=? where Car_id = ?\n\n```", "```py\ndelete from Car where Car_id = ?\n\n```", "```py\ndef delete(self):\n\t\tsql=\"delete from %s where %s_id = ?\"%(\n\t\tself.__class__.__name__,self.__class__.__name__)\n\t\twith self.threadlocal.connection as conn:\n\t\t\t\tcursor=conn.cursor()\n\t\t\t\tcursor.execute(sql,(self.id,)) if cursor.rowcount != 1 :\n\t\t\t\t\traise ValueError(\n\t\t\t\t\t\"number of deleted entities not 1 (%d)\" %\n\t\t\t\t\tcursor.rowcount)\n\n```", "```py\nCar.list()\n\n```", "```py\nCar.list(make='Volvo')\n\n```", "```py\n@classmethod\ndef list(cls,**kw): sql=\"select %s_id from %s\"%(cls.__name__,cls.__name__) \n\t\tcursor=cls.threadlocal.connection.cursor()\n\t\tif len(kw):\n\t\t\t\tcols=[]\n\t\t\t\tvalues=[]\n\t\t\t\tfor k,v in kw.items():\n\t\t\t\t\t\tcols.append(k)\n\t\t\t\t\t\tvalues.append(v) whereclause = \" where \"+\",\".join(c+\"=?\" for c in \ncols)\n\t\t\t\tsql += whereclause\n\t\t\t\tcursor.execute(sql,values)\n\t\telse:\n\t\t\t\tcursor.execute(sql)\n\t\tfor row in cursor.fetchall():\n\t\t\t\tyield row[0]\n\n```", "```py\nselect Car_id from Car\n\n```", "```py\nselect Car_id from Car where make=?\n\n```", "```py\nfrom entity import Entity\nfrom relation import Relation\nclass Car(Entity): pass\nclass Owner(Entity): pass\nCar.threadinit('c:/tmp/cardatabase2.db')\nCar.inittable(make=\"\",model=\"\",licenseplate=\"unique\")\nOwner.threadinit('c:/tmp/cardatabase2.db')\nOwner.inittable(name=\"\") class CarOwner(Relation): pass\nCarOwner.threadinit('c:/tmp/cardatabase2.db')\nCarOwner.inittable(Car,Owner)\nmycar = Car(make=\"Volvo\",model=\"C30\",licenseplate=\"12-abc-3\")\nmycar2 = Car(make=\"Renault\",model=\"Coupe\",licenseplate=\"45-de-67\")\nme = Owner(name=\"Michel\") CarOwner.add(mycar,me)\nCarOwner.add(mycar2,me)\nowners = CarOwner.list(mycar)\nfor r in owners:\n\tprint(Car(id=r.a_id).make,'owned by',Owner(id=r.b_id).name)\nowners = CarOwner.list(me)\nfor r in owners:\n\tprint(Owner(id=r.b_id).name,'owns a',Car(id=r.a_id).make)\n\n```", "```py\n@classmethod\ndef threadinit(cls,db):\n\t\tif not hasattr(cls.threadlocal,'connection') or \ncls.threadlocal.connection is None:\n\t\t\t\tcls.threadlocal.connection=sqlite.connect(db)\n\t\t\t\tcls.threadlocal.connection.row_factory = sqlite.Row\n\t\t\t\tcls.threadlocal.connection.execute(\n\t\t\t\t\t\t\t\t\t\t\t\t\t\"pragma \nforeign_keys=1\")\n\n```", "```py\n@classmethod\ndef inittable(cls, entity_a, entity_b,\n\t\t\t\t\t\t\treltype=\"N:N\", cascade=None): sql='''create table if not exists %(table)s (\n\t\t\t%(a)s_id references %(a)s on delete cascade,\n\t\t\t%(b)s_id references %(b)s on delete cascade,\n\t\t\tunique(%(a)s_id,%(b)s_id)\n\t);\n\t'''%{'table':cls.__name__,\n\t\t\t\t'a':entity_a.__name__,'b':entity_b.__name__}\n\twith cls.threadlocal.connection as conn:\n\t\t\tcursor=conn.cursor()\n\t\t\tcursor.execute(sql)\n\tcls.columns=[entity_a.__name__,entity_b.__name__]\n\n```", "```py\ncreate table if not exists CarOwner (\n\t\t\t\tCar_id references Car on delete cascade,\n\t\t\t\tOwner_id references Owner on delete cascade,\n\t\t\t\tunique(Car_id,Owner_id)\n\n```", "```py\ndef __init__(self,a_id,b_id,stub=False):\n\t\tself.a_id=a_id\n\t\tself.b_id=b_id\n\t\tif stub : return\n\t\tcols=self.columns[0]+\"_id,\"+self.columns[1]+\"_id\"\n\t\tsql='insert or replace into %s (%s) values(?,?)'%(\n\t\t\tself.__class__.__name__,cols)\n\t\twith self.threadlocal.connection as conn:\n\t\t\tcursor=conn.cursor()\n\t\t\tcursor.execute(sql,(a_id,b_id))\n\t\t\tif cursor.rowcount!=1:\n\t\t\t\t\traise ValueError()\n\n```", "```py\ninsert or replace into CarOwner (Car_id,Owner_id) values(?,?)\n\n```", "```py\n@classmethod\ndef add(cls,instance_a,instance_b):\n\t\tif instance_a.__class__.__name__ != cls.columns[0] :\n\t\t\t\traise ValueError(\"instance a, wrong class\")\n\t\tif instance_b.__class__.__name__ != cls.columns[1] :\n\t\t\t\traise ValueError(\"instance b, wrong class\")\n\t\treturn cls(instance_a.id,instance_b.id)\n\n```", "```py\n@classmethod\ndef list(cls,instance):\n\t\tsql='select %s_id,%s_id from %s where %s_id = ?'%(\n\t\t\t\tcls.columns[0],cls.columns[1],\n\t\t\t\tcls.__name__,instance.__class__.__name__)\n\t\twith cls.threadlocal.connection as conn:\n\t\t\t\tcursor=conn.cursor()\n\t\t\t\tcursor.execute(sql,(instance.id,))\n\t\t\t\treturn [cls(r[0],r[1],stub=True)\n\t\t\t\t\t\t\t\tfor r in cursor.fetchall()]\n\n```", "```py\nselect Car_id,Owner_id from CarOwner where Car_id = ?\n\n```", "```py\nselect Car_id,Owner_id from CarOwner where Owner_id = ?\n\n```", "```py\ndef delete(self):\n\t\tsql='delete from %s where %s_id = ? and %s_id = ?'%(\n\t\t\tself.__class__.__name__,self.columns[0],self.columns[1])\n\t\twith self.threadlocal.connection as conn:\n\t\t\tcursor=conn.cursor()\n\t\t\tcursor.execute(sql,(self.a_id,self.b_id))\n\t\t\tif cursor.rowcount!=1:\n\t\t\t\t\traise ValueError()\n\n```", "```py\ndelete from CarOwner where Car_id = ? and Owner_id = ?\n\n```", "```py\nfrom entity import Entity\nfrom relation import Relation\nclass Book(Entity):\n\tpass\nclass Author(Entity):\n\tpass\nclass User(Entity):\n\tpass\nclass BookAuthor(Relation):\n\tpass\nclass UserBook(Relation):\n\tpass def threadinit(db):\n\tBook.threadinit(db)\n\tAuthor.threadinit(db)\n\tUser.threadinit(db)\n\tBookAuthor.threadinit(db)\n\tUserBook.threadinit(db)\n\n```", "```py\ndef inittable():\n\tBook.inittable(title=\"\",isbn=\"unique\",publisher=\"\")\n\tAuthor.inittable(name=\"\")\n\tUser.inittable(userid=\"unique not null\")\n\tBookAuthor.inittable(Book,Author)\n\tUserBook.inittable(User,Book)\n\n```", "```py\ndef newbook(title,authors,**kw):\n\tif not isinstance(title,str) :\n\t\t\traise TypeError(\"title is not a str\")\n\tif len(title)<1 :\n\t\t\traise ValueError(\"title is empty\")\n\tfor a in authors :\n\t\t\tif not isinstance(a,Author) :\n\t\t\t\traise TypeError(\"authors should be of type Author\")\nbl=list(Book.list(title=title,**kw)) if len(bl) == 0:\n\t\t\t\tb=Book(title=title,**kw)\nelif len(bl) == 1:\n\t\t\t\tb=Book(id=bl[0])\nelse:\n\traise ValueError(\"multiple books match criteria\")\nlba=list(BookAuthor.list(b))\nif len(authors):\n\tlba=[Author(id=r.b_id) for r in lba]\n\tfor a in authors:\n\t\t\tknown=False\n\t\t\tfor a1 in lba:\n\t\t\t\t\tif a.id == a1.id :\n\t\t\t\t\t\t\tknown=True\n\t\t\t\t\t\t\tbreak\n\t\t\tif not known:\n\t\t\t\t\tr=BookAuthor.add(b,a)\nreturn b\n\n```", "```py\ndef newauthor(name): if not isinstance(name,str) :\n\t\t\traise TypeError(\"name is not a str\")\n\tif len(name)<1 :\n\t\t\traise ValueError(\"name is empty\")\n\tal=list(Author.list(name=name))\n\tif len(al) == 0:\n\t\t\t\ta=Author(name=name)\n\telif len(al) == 1:\n\t\t\t\ta=Author(id=al[0])\n\telse:\n\t\t\traise ValueError(\"multiple authors match criteria\")\n\treturn a\n\n```", "```py\nbooksdb.listbooks(user=me,pattern=\"blind\",limit=3)\n\n```", "```py\ndef listbooks(user=None,author=None,offset=0,limit=-1,pattern=\"\"):\n\tlba={}\n\tlbu={}\n\tif not user is None:\n\t\t\tif not isinstance(user,User):\n\t\t\t\t\traise TypeError(\"user argument not a User\") lbu={r.b_id for r in UserBook.list(user)}\n\tif not author is None:\n\t\t\tif not isinstance(author,Author):\n\t\t\t\t\traise TypeError(\"author argument not an Author\")\n\t\t\tlba={r.a_id for r in BookAuthor.list(author)}\n\tif user is None and author is None: lb={b for b in Book.list()}\n\telse:\n\t\t\tif len(lbu)==0 : lb=lba\n\t\t\telif len(lba)==0 : lb=lbu\n\t\t\telse : lb = lba & lbu\n\tbooks = [Book(id=id) for id in lb] books = sorted(books,key=lambda book:book.title.lower())\n\tif pattern != \"\" :\n\t\t\tpattern = pattern.lower()\n\t\t\tbooks = [b for b in books\n\t\t\t\t\t\t\t\tif b.title.lower().find(pattern)>=0 ]\n\tif limit<0 :\n\t\t\tlimit=len(books)\n\telse:\n\t\t\tlimit=offset+limit\n\treturn len(books),books[offset:limit]\n\n```", "```py\ndef listauthors(book=None):\n\tif not book is None:\n\t\t\tif not isinstance(book,Book):\n\t\t\t\t\traise TypeError(\"book argument not a Book\")\n\t\t\tla=[r.b_id for r in BookAuthor.list(book)]\n\telse:\n\t\t\tla=Author.list()\n\treturn [Author(id=id) for id in la]\n\n```", "```py\ndef checkuser(username):\n\tusers=list(User.list(userid=username))\n\tif len(users):\n\t\t\treturn User(id=users[0])\n\treturn User(userid=username)\n\n```", "```py\ndef addowner(book,user):\n\tif not isinstance(book,Book):\n\t\t\traise TypeError(\"book argument not a Book\")\n\tif not isinstance(user,User):\n\t\t\traise TypeError(\"user argument not a User\")\n\treturn UserBook.add(user,book)\ndef delowner(book,user):\n\tif not isinstance(book,Book):\n\t\t\traise TypeError(\"book argument not a Book\")\n\tif not isinstance(user,User):\n\t\t\traise TypeError(\"user argument not a User\")\n\tUserBook(user.id,book.id,stub=True).delete()\n\n```", "```py\nwith open('basepage.html') as f:\n\tbasepage=f.read(-1)\n\n```", "```py\n<html><head><title>Books</title> <script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.\nmin.js\" type=\"text/javascript\"></script>\n<script src=\"http://ajax.googleapis.com/ajax/libs/jqueryui/1.8.3/\njquery-ui.min.js\" type=\"text/javascript\"></script>\n<link rel=\"stylesheet\" href=\"http://ajax.googleapis.com/ajax/libs/\njqueryui/1.8.3/themes/smoothness/jquery-ui.css\" type=\"text/css\" \nmedia=\"all\" />\n<link rel=\"stylesheet\" href=\"http:///books.css\" type=\"text/css\" media=\"all\" \n/>\n</head><body>\n<div id=\"content\">%s</div>\n<script src=\"img/booksweb.js\" type=\"text/javascript\"></script>\n</body>\n</html>\n\n```", "```py\nclass Books():\n\tdef __init__(self,logon,logoffpath):\n\t\t\tself.logon=logon\n\t\t\tself.logoffpath=logoffpath\n\t@cherrypy.expose\n\tdef index(self):\n\t\t\tusername = self.logon.checkauth()\n\t\t\treturn basepage % '<div id=\"booklist\"></div>'\n\n```", "```py\n$.ajaxSetup({cache:false,type:\"GET\"});\n\n```", "```py\nfunction prepnavbar(response, status, XMLHttpRequest){\n\t$(\"#firstpage\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\t\tprimary: \"ui-icon-seek-start\"\n\t\t\t\t}\n\t});\n\t$(\"#previouspage\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\t\tprimary: \"ui-icon-seek-prev\"\n\t\t\t\t}\n\t});\n\t$(\"#mine\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\t\tprimary: \"ui-icon-tag\"\n\t\t\t\t}\n\t});\n\t$(\"#nextpage\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\t\tprimary: \"ui-icon-seek-next\"\n\t\t\t\t}\n\t});\n\t$(\"#lastpage\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\t\tprimary: \"ui-icon-seek-end\"\n\t\t\t\t}\n\t});\n\t$(\"#addbook\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\t\tprimary: \"ui-icon-plusthick\"\n\t\t\t\t}\n\t});\n\tt=$(\"#toolbar\").buttonset();\n\t$(\"span\",t).css({padding:\"0px\"});\n\t$(\".bookrow:odd\").addClass('oddline');\n};\n$(\"#booklist\").load('/books/list',prepnavbar);$(\"#booklist\").load('/\nbooks/list',prepnavbar);\n\n```", "```py\nfunction getparams(){\n\tvar m=0;\n\t// apparently the checked attr of a checkbox is magic:\n// it returns true/false, not the contents!\n\tif ( $(\"#mine\").attr(\"checked\")==true ) { m = 1}\n\treturn { offset:Number($(\"#firstid\").text()),\n\t\t\tlimit:Number($(\"#limitid\").text()),\n\t\t\t\tfilter:$(\"#filter\").val(),\n\t\t\t\tmine:m\n\t\t\t};\n};\n$(\"#mine\").live('click',function(){\n\t// this function is fired *after* the click\n// toggled the checked attr\n\tvar data = getparams();\n\tif (data.mine) {\n\t\t\t$(\"#mine\").removeAttr(\"checked\");\n\t} else {\n\t\t\t$(\"#mine\").attr(\"checked\",\"yes\");\n\t}\n\t$(\"#booklist\").load('/books/list',data,prepnavbar);\n\treturn true;\n}); $(\"#firstpage\").live('click',function(){\n\tvar data = getparams();\n\tdata.offset=0;\n\t$(\"#booklist\").load('/books/list',data,prepnavbar);\n\treturn true;\n});\n$(\"#previouspage\").live('click',function(){\n\tvar data = getparams();\n\tdata.offset -= data.limit;\n\tif(data.offset<0){ data.offset=0;}\n\t$(\"#booklist\").load('/books/list',data,prepnavbar);\n\treturn true;\n});\n$(\"#nextpage\").live('click',function(){\n\tvar data = getparams();\n\tvar n=Number($(\"#nids\").text())\n\tdata.offset += data.limit;\n\tif(data.offset>=n){ data.offset=n-data.limit;}\n\tif(data.offset<0){ data.offset=0;}\n\t$(\"#booklist\").load('/books/list',data,prepnavbar);\n\treturn true;\n});\n$(\"#lastpage\").live('click',function(){\n\tvar data = getparams();\n\tvar n=Number($(\"#nids\").text())\n\tdata.offset = n-data.limit;\n\tif(data.offset<0){ data.offset=0;}\n\t$(\"#booklist\").load('/books/list',data,prepnavbar);\n\treturn true;\n});\n$(\"#filter\").live('keyup',function(event){\n\tif (event.keyCode == '13') {\n\t\t\tevent.preventDefault();\n\t\t\tdata = getparams();\n\t\t\tdata.offset=0;\n\t\t\t$(\"#booklist\").load('/books/list',data,prepnavbar);\n\t}\n\treturn true;\n});\n$(\"#addbook\").live('click',function(){\n\twindow.location.href=\"http:///books/addbook\";\n\treturn true;\n});\n\n```", "```py\n@cherrypy.expose\ndef list(self,offset=0,limit=10,mine=1,pattern=\"\",_=None):\n\t\tusername = self.logon.checkauth()\n\t\tuserid=booksdb.checkuser(username)\n\t\ttry:\n\t\t\toffset=int(offset) if offset<0 : raise ValueError(\"offset < 0\")\n\t\texcept ValueError:\n\t\t\traise TypeError(\"offset not an integer\")\n\t\ttry:\n\t\t\tlimit=int(limit)\n\t\t\tif limit<-1 : raise ValueError(\"limit < -1\")\n\t\texcept ValueError:\n\t\t\traise TypeError(\"limit not an integer\")\n\t\ttry:\n\t\t\tmine=int(mine)\n\t\texcept ValueError:\n\t\t\traise TypeError(\"mine not an integer\")\n\t\tif not mine in (0,1) :\n\t\t\traise ValueError(\"mine not in (0,1)\")\n\t\tif len(pattern)>100 :\n\t\t\traise ValueError(\"length of pattern > 100\")\n\t\t# show titles\n\t\tyield '<div class=\"columnheaders\"><div class=\"title\">Title</\ndiv><div class=\"author\">Author</div></div>'\n\t\t# get matching books\n\t\tif mine==0 : userid=None\n\t\tn,books = booksdb.listbooks(user=userid,\n\t\t\t\toffset=offset,limit=limit,pattern=pattern)\n\t\t# yield them as a list of divs\n\t\tfor b in books: a1=booksdb.listauthors(b)[0]\n\t\t\t\tyield '''<div id=\"%d\" class=\"bookrow\">\n<div class=\"title\">%s</div>\n<div class=\"author\">%s</div>\n</div>'''%(b.id,b.title,a1.name)\n\t\t# yield a line of navigation buttons\n\t\tyield '''<div id=\"navigation\">\n<p id=\"info\">Showing\n<span id=\"limitid\">%d</span> of\n<span id=\"nids\">%d</span> items,\nowned by <span id=\"owner\">%s</span> starting at\n<span id=\"firstid\">%d</span>\n</p>\n<div id=\"toolbar\">\n<button id=\"firstpage\" value=\"First\">First</button>\n<button id=\"previouspage\" value=\"Previous\">Prev</button>\n<input id=\"mine\" type=\"checkbox\" %s /><label for=\"mine\">Mine</label>\n<input id=\"pattern\" type=\"text\" value=\"%s\" />\n<button id=\"nextpage\" value=\"Next\" >Next</button>\n<button id=\"lastpage\" value=\"Last\" >Last</button>\n<button id=\"addbook\" value=\"Add\">Add</button>\n</div>\n</div>'''%(limit,n,username if mine else \"all\",\n\t\t\t\t\toffset,'checked=\"yes\"'if mine else \"\", pattern)\n\n```", "```py\n\taddbookform='''<div id=\"newbook\">\n<form action=\"addbook\" method=\"get\">\n<fieldset><legend>Add new book</legend>\n<input name=\"title\" id=\"title\" type=\"text\" value=\"%(title)s\" \n%(titleerror)s />\n<label for=\"title\">Title</label>\n<input name=\"author\" id=\"author\" type=\"text\" value=\"%(author)s\" \n%(authorerror)s />\n<label for=\"author\">Author</label>\n</fieldset>\n<div class=\"buttonbar\">\n<button name=\"submit\" type=\"submit\" value=\"Add\">Add</button>\n<button name=\"cancel\" type=\"submit\" value=\"Cancel\">Cancel</button>\n</div>\n</form>\n<div id=\"errorinfo\"></div>\n</div>'''\n\n```", "```py\n@cherrypy.expose\ndef addbook(self,title=None,author=None,submit=None,cancel=None):\n\t\tusername = self.logon.checkauth()\n\t\tuserid=booksdb.checkuser(username)\n\t\tif not cancel is None: raise cherrypy.HTTPRedirect(\"/books\")\n\t\tdata=defaultdict(str)\n\t\tif submit is None:\n\t\t\t\treturn basepage%(Books.addbookform%data)\n\t\tif title is None or author is None:\n\t\t\t\traise cherrypy.HTTPError(400,'missing argument')\n\t\tdata['title']=title\n\t\tdata['author']=author\n\t\ttry:\n\t\t\t\ta=booksdb.newauthor(author)\n\t\t\t\ttry:\n\t\t\t\t\t\tb=booksdb.newbook(title,[a])\n\t\t\t\t\t\tbooksdb.addowner(b,userid)\n\t\t\t\t\t\traise cherrypy.HTTPRedirect(\"/books\")\n\t\t\t\texcept ValueError as e:\ndata['titleerror']= 'class=\"inputerror ui-state-error\" \ntitle=\"%s\"'%str(e)\n\t\t\texcept ValueError as e:\ndata['authorerror']= 'class=\"inputerror ui-state-error\" \ntitle=\"%s\"'%str(e)\n\t\t\treturn basepage%(Books.addbookform%data)\n\n```", "```py\n<input name=\"title\" id=\"title\" type=\"text\" value=\"%(title)s\" \n%(titleerror)s />\n\n```", "```py\n<input name=\"title\" id=\"title\" type=\"text\" value=\"\" />\n\n```", "```py\n<input name=\"title\" id=\"title\" type=\"text\" value=\"A book title\" />\n\n```", "```py\nclass=\"inputerror ui-state-error\" title=\"title is empty\"\n\n```", "```py\n<input name=\"title\" id=\"title\" type=\"text\" value=\"\" class=\"inputerror \nui-state-error\" title=\"title is empty\" />\n\n```", "```py\n<script>\n$(\"#title\" ).autocomplete({ source:'/books/gettitles',\n\t\t\t\t\t\t\t\t\t\t\tminLength:2}).focus();\n$(\"#author\").autocomplete({ source:'/books/getauthors',\n\t\t\t\t\t\t\t\t\t\t\tminLength:2});\n</script>\n\n```", "```py\n@cherrypy.expose\n\tdef getauthors(self,term,_=None):\n\t\t\treturn json.dumps(booksdb.getauthors(term))\n@cherrypy.expose\ndef gettitles(self,term,_=None):\n\t\t\ttitles=json.dumps(booksdb.gettitles(term))\n\t\t\treturn titles\n\n```", "```py\ndef gettitles(term):\n\ttitles=Book.getcolumnvalues('title')\n\tre=compile(term,IGNORECASE)\n\treturn list(takewhile(lambda x:re.match(x),\n\t\t\t\t\t\t\tdropwhile(lambda x:not re.match(x),titles)))\ndef getauthors(term):\n\tnames=Author.getcolumnvalues('name')\n\tre=compile(term,IGNORECASE)\n\treturn list(takewhile(lambda x:re.match(x),\n\t\t\t\t\t\t\tdropwhile(lambda x:not re.match(x),names)))\n\n```", "```py\n@classmethod\ndef getcolumnvalues(cls,column):\n\t\tif not column in cls.columns :\n\t\t\t\traise KeyError('unknown column '+column) sql=\"select %s from %s order by lower(%s)\"%(column,\n\t\t\t\tcls.__name__,column)\n\t\tcursor=cls.threadlocal.connection.cursor()\n\t\tcursor.execute(sql)\n\t\treturn [r[0] for r in cursor.fetchall()]\n\n```", "```py\n$(\".buttonbar\").buttonset();\n$(\"#newbook button[name=submit]\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\t\tprimary: \"ui-icon-plusthick\"\n\t\t\t\t}\n});\n$(\"#newbook button[name=cancel]\").button({\n\t\t\t\ttext: false,\n\t\t\t\ticons: {\n\t\t\t\t\t\tprimary: \"ui-icon-trash\"\n\t\t\t\t}\n});\n\n```"]