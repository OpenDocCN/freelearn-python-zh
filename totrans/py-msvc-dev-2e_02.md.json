["```py\npython -m venv my-venv \n```", "```py\nsource my-venv/bin/activate \n```", "```py\npip install quart \n```", "```py\n# quart_basic.py\nfrom quart import Quart\napp = Quart(__name__)\n@app.route(\"/api\")\ndef my_microservice():\n    return {\"Hello\": \"World!\"}\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\n$ python quart_basic.py \n * Serving Quart app 'quart_basic'\n * Environment: production\n * Please use an ASGI server (e.g. Hypercorn) directly in production\n * Debug mode: False\n * Running on http://localhost:5000 (CTRL + C to quit)\n[2020-12-10 14:05:18,948] Running on http://localhost:5000 (CTRL + C to quit) \n```", "```py\n$ curl -v http://localhost:5000/api \n*   Trying localhost...\n...\n< HTTP/1.1 200\n< content-type: application/json\n< content-length: 18\n< date: Wed, 02 Dec 2020 20:29:19 GMT\n< server: hypercorn-h11\n<\n* Connection #0 to host localhost left intact\n{\"Hello\":\"World!\"}* Closing connection 0 \n```", "```py\napp.run(host=\"0.0.0.0\", port=8000) \n```", "```py\n# quart_details.py\nfrom quart import Quart, request, jsonify\napp = Quart(__name__)\n@app.route(\"/api\", provide_automatic_options=False)\nasync def my_microservice():\n    print(dir(request))\n    response = jsonify({\"Hello\": \"World!\"})\n    print(response)\n    print(await response.get_data())\n    return response\nif __name__ == \"__main__\":\n    print(app.url_map)\n    app.run() \n```", "```py\n$ python quart_details.py \nQuartMap([<QuartRule '/api' (HEAD, GET, OPTIONS) -> my_microservice>,\n <QuartRule '/static/<filename>' (HEAD, GET, OPTIONS) -> static>])\nRunning on http://localhost:5000 (CTRL + C to quit)\n\n[â€¦ '_load_field_storage', '_load_form_data', '_load_json_data', '_send_push_promise', 'accept_charsets', 'accept_encodings', 'accept_languages', 'accept_mimetypes', 'access_control_request_headers', 'access_control_request_method', 'access_route', 'args', 'authorization', 'base_url', 'blueprint', 'body', 'body_class', 'body_timeout', 'cache_control', 'charset', 'content_encoding', 'content_length', 'content_md5', 'content_type', 'cookies', 'data', 'date', 'dict_storage_class', 'encoding_errors', 'endpoint', 'files', 'form', 'full_path', 'get_data', 'get_json', 'headers', 'host', 'host_url', 'http_version', 'if_match', 'if_modified_since', 'if_none_match', 'if_range', 'if_unmodified_since', 'is_json', 'is_secure', 'json', 'list_storage_class', 'max_forwards', 'method', 'mimetype', 'mimetype_params', 'on_json_loading_failed', 'origin', 'parameter_storage_class', 'path', 'pragma', 'query_string', 'range', 'referrer', 'remote_addr', 'root_path', 'routing_exception', 'scheme', 'scope', 'send_push_promise', 'url', 'url_charset', 'url_root', 'url_rule', 'values', 'view_args']\nResponse(200)\nb'{\"Hello\":\"World!\"}' \n```", "```py\n$ curl -v -XDELETE  http://localhost:5000/api\n**   Trying 127.0.0.1...\n* TCP_NODELAY set\n* Connected to localhost (127.0.0.1) port 5000 (#0)\n> DELETE /api HTTP/1.1\n> Host: localhost:5000\n> User-Agent: curl/7.64.1\n> Accept: */*\n>\n< HTTP/1.1 405\n< content-type: text/html\n< allow: GET, OPTIONS, HEAD\n< content-length: 137\n< date: Wed, 02 Dec 2020 21:14:36 GMT\n< server: hypercorn-h11\n<\n<!doctype html>\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\nSpecified method is invalid for this resource\n* Connection #0 to host 127.0.0.1 left intact\n    * Closing connection 0 \n```", "```py\n@app.route('/api', methods=['POST', 'DELETE', 'GET']) \ndef my_microservice(): \n    return {'Hello': 'World!'} \n```", "```py\n@app.route('/person/<person_id>') \ndef person(person_id): \n    return {'Hello': person_id}\n\n$ curl localhost:5000/person/3 \n{\"Hello\": \"3\"} \n```", "```py\n@app.route('/person/<int:person_id>') \ndef person(person_id): \n    return {'Hello': person_id} \n```", "```py\n$ curl localhost:5000/person/3 \n{ \n  \"Hello\": 3 \n} \n$ curl localhost:5000/person/simon\n<!doctype html>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\nNothing matches the given URI \n```", "```py\n# quart_converter.py\nfrom quart import Quart, request \nfrom werkzeug.routing import BaseConverter, ValidationError\n_USERS = {\"1\": \"Alice\", \"2\": \"Bob\"}\n_IDS = {val: user_id for user_id, val in _USERS.items()}\nclass RegisteredUser(BaseConverter):\n    def to_python(self, value):\n        if value in _USERS:\n            return _USERS[value]\n        raise ValidationError()\n    def to_url(self, value):\n        return _IDS[value]\napp = Quart(__name__)\napp.url_map.converters[\"registered\"] = RegisteredUser\n@app.route(\"/api/person/<registered:name>\")\ndef person(name):\n    return {\"Hello\": name}\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\n$ curl localhost:5000/api/person/1 \n{ \n  \"Hello hey\": \"Alice\" \n}\n\n$ curl localhost:5000/api/person/2 \n{ \n  \"Hello hey\": \"Bob\" \n}\n\n$ curl localhost:5000/api/person/3 \n\n<!doctype html>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\nNothing matches the given URI \n```", "```py\n>>> from quart_converter import app \n>>> from quart import url_for \n>>> import asyncio\n>>> async def run_url_for():\n...     async with app.test_request_context(\"/\", method=\"GET\"):\n...         print(url_for('person', name='Alice')) \n... \n>>> loop = asyncio.get_event_loop()\n>>> loop.run_until_complete(run_url_for())\n/api/person/1 \n```", "```py\n# quart_auth.py\nfrom quart import Quart, request\napp = Quart(__name__)\n@app.route(\"/\")\ndef auth():\n    print(\"Quart's Authorization information\")\n    print(request.authorization)\n    return \"\"\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\n$ python quart_auth.py \n* Running on http://localhost:5000/ (Press CTRL+C to quit) \nQuart's Authorization information\n{'username': 'alice', 'password': 'password'} \n[2020-12-03 18:34:50,387] 127.0.0.1:55615 GET / 1.1 200 0 3066\n$ curl http://localhost:5000/ --user alice:password \n```", "```py\n# yamlify.py\nfrom quart import Quart\nimport yaml  # requires PyYAML\napp = Quart(__name__)\ndef yamlify(data, status=200, headers=None):\n    _headers = {\"Content-Type\": \"application/x-yaml\"}\n    if headers is not None:\n        _headers.update(headers)\n    return yaml.safe_dump(data), status, _headers\n@app.route(\"/api\")\ndef my_microservice():\n    return yamlify([\"Hello\", \"YAML\", \"World!\"])\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\n# globals.py\nfrom quart import Quart, g, request\napp = Quart(__name__)\n@app.before_request\ndef authenticate():\n    if request.authorization:\n        g.user = request.authorization[\"username\"]\n    else:\n        g.user = \"Anonymous\"\n@app.route(\"/api\")\ndef my_microservice():\n    return {\"Hello\": g.user}\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\n$ curl http://localhost:5000/api \n{ \n  \"Hello\": \"Anonymous\" \n} \n$ curl http://localhost:5000/api --user alice:password \n{ \n  \"Hello\": \"alice\" \n} \n```", "```py\n# signals.py\nfrom quart import Quart, g, request_finished\nfrom quart.signals import signals_available\napp = Quart(__name__)\ndef finished(sender, response, **extra):\n    print(\"About to send a Response\")\n    print(response)\nrequest_finished.connect(finished)\n@app.route(\"/api\")\nasync def my_microservice():\n    return {\"Hello\": \"World\"}\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\nimport quart.flask_patch\nimport flask_login \n```", "```py\n# middleware.py\nfrom quart import Quart, request\nfrom werkzeug.datastructures import Headers\nclass XFFMiddleware:\n    def __init__(self, app, real_ip=\"10.1.1.1\"):\n        self.app = app\n        self.real_ip = real_ip\n    async def __call__(self, scope, receive, send):\n        if \"headers\" in scope and \"HTTP_X_FORWARDED_FOR\" not in scope[\"headers\"]:\n            new_headers = scope[\"headers\"].raw_items() + [\n                (\n                    b\"X-Forwarded-For\",\n                    f\"{self.real_ip}, 10.3.4.5, 127.0.0.1\".encode(),\n                )\n            ]\n            scope[\"headers\"] = Headers(new_headers)\n        return await self.app(scope, receive, send)\napp = Quart(__name__)\napp.asgi_app = XFFMiddleware(app.asgi_app)\n@app.route(\"/api\")\ndef my_microservice():\n    if \"X-Forwarded-For\" in request.headers:\n        ips = [ip.strip() for ip in request.headers[\"X-Forwarded-For\"].split(\",\")]\n        ip = ips[0]\n    else:\n        ip = request.remote_addr\n    return {\"Hello\": ip}\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\nDate: {{date}} \nFrom: {{from}} \nSubject: {{subject}} \nTo: {{to}} \nContent-Type: text/plain \n\nHello {{name}}, \n\nWe have received your payment! \n\nBelow is the list of items we will deliver for lunch: \n\n{% for item in items %}- {{item['name']}} ({{item['price']}} Euros) \n{% endfor %} \n\nThank you for your business! \n\n-- \nMy Fictional Burger Place \n```", "```py\n# email_render.py\nfrom datetime import datetime\nfrom jinja2 import Template\nfrom email.utils import format_datetime\ndef render_email(**data):\n    with open(\"email_template.j2\") as f:\n        template = Template(f.read())\n    return template.render(**data)\ndata = {\n    \"date\": format_datetime(datetime.now()),\n    \"to\": \"bob@example.com\",\n    \"from\": \"shopping@example-shop.com\",\n    \"subject\": \"Your Burger order\",\n    \"name\": \"Bob\",\n    \"items\": [\n        {\"name\": \"Cheeseburger\", \"price\": 4.5},\n        {\"name\": \"Fries\", \"price\": 2.0},\n        {\"name\": \"Root Beer\", \"price\": 3.0},\n    ],\n}\nprint(render_email(**data)) \n```", "```py\n# prod_settings.py\nclass Config:\n    DEBUG = False\n    SQLURI = \"postgres://username:xxx@localhost/db\" \n```", "```py\n>>> from quart import Quart\n>>> import pprint\n>>> pp = pprint.PrettyPrinter(indent=4)\n>>> app = Quart(__name__) \n>>> app.config.from_object('prod_settings.Config') \n>>> pp.pprint(app.config) \n{   'APPLICATION_ROOT': None,\n    'BODY_TIMEOUT': 60,\n    'DEBUG': False,\n    'ENV': 'production',\n    'JSONIFY_MIMETYPE': 'application/json',\n    'JSONIFY_PRETTYPRINT_REGULAR': False,\n    'JSON_AS_ASCII': True,\n    'JSON_SORT_KEYS': True,\n    'MAX_CONTENT_LENGTH': 16777216,\n    'PERMANENT_SESSION_LIFETIME': datetime.timedelta(days=31),\n    'PREFER_SECURE_URLS': False,\n    'PROPAGATE_EXCEPTIONS': None,\n    'RESPONSE_TIMEOUT': 60,\n    'SECRET_KEY': None,\n    'SEND_FILE_MAX_AGE_DEFAULT': datetime.timedelta(seconds=43200),\n    'SERVER_NAME': None,\n    'SESSION_COOKIE_DOMAIN': None,\n    'SESSION_COOKIE_HTTPONLY': True,\n    'SESSION_COOKIE_NAME': 'session',\n    'SESSION_COOKIE_PATH': None,\n    'SESSION_COOKIE_SAMESITE': None,\n    'SESSION_COOKIE_SECURE': False,\n    'SESSION_REFRESH_EACH_REQUEST': True,\n    'SQLURI': 'postgres://username:xxx@localhost/db',\n    'TEMPLATES_AUTO_RELOAD': None,\n    'TESTING': False,\n    'TRAP_HTTP_EXCEPTIONS': False} \n```", "```py\n>>> from quart import Quart\n>>> import yaml\n>>> from pathlib import Path \n>>> app = Quart(__name__)\n>>> print(Path(\"prod_settings.json\").read_text())\n{\n    \"DEBUG\": false,\n    \"SQLURI\":\"postgres://username:xxx@localhost/db\"\n} \n>>> app.config.from_json(\"prod_settings.json\")\n>>> app.config[\"SQLURI\"]\n'postgres://username:xxx@localhost/db'\n>>> print(Path(\"prod_settings.yml\").read_text())\n---\nDEBUG: False\nSQLURI: \"postgres://username:xxx@localhost/db\"\n>>> app.config.from_file(\"prod_settings.yml\", yaml.safe_load) \n```", "```py\n# blueprints.py\nfrom quart import Blueprint\nteams = Blueprint(\"teams\", __name__)\n_DEVS = [\"Alice\", \"Bob\"]\n_OPS = [\"Charles\"]\n_TEAMS = {1: _DEVS, 2: _OPS}\n@teams.route(\"/teams\")\ndef get_all():\n    return _TEAMS\n@teams.route(\"/teams/<int:team_id>\")\ndef get_team(team_id):\n    return _TEAMS[team_id] \n```", "```py\n$ curl http://localhost:5000/api \n<!doctype html>\n<title>500 Internal Server Error</title>\n<h1>Internal Server Error</h1>\nServer got itself in trouble \n```", "```py\n# error_handler.py\nfrom quart import Quart\napp = Quart(__name__)\n@app.errorhandler(500)\ndef error_handling(error):\n    return {\"Error\": str(error)}, 500\n@app.route(\"/api\")\ndef my_microservice():\n    raise TypeError(\"Some Exception\")\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\nerror_handling function to every error using app.register_error_handler, which is similar to the @app.errorhandler decorator:\n```", "```py\n# catch_all_errors.py\nfrom quart import Quart, jsonify, abort\nfrom werkzeug.exceptions import HTTPException, default_exceptions\ndef jsonify_errors(app):\n    def error_handling(error):\n        if isinstance(error, HTTPException):\n            result = {\n                \"code\": error.code,\n                \"description\": error.description,\n                \"message\": str(error),\n            }\n        else:\n            description = abort.mapping[ error.code].description\n            result = {\"code\":  error.code, \"description\": description, \"message\": str(error)}\n        resp = jsonify(result)\n        resp.status_code = result[\"code\"]\n        return resp\n    for code in default_exceptions.keys():\n        app.register_error_handler(code, error_handling)\n    return app\napp = Quart(__name__)\napp = jsonify_errors(app)\n@app.route(\"/api\")\ndef my_microservice():\n   raise TypeError(\"Some Exception\")\nif __name__ == \"__main__\":\n    app.run() \n```", "```py\nimport os\nfrom myservice.views import blueprints\nfrom quart import Quart\n_HERE = os.path.dirname(__file__)\n_SETTINGS = os.path.join(_HERE, \"settings.ini\")\ndef create_app(name=__name__, blueprints=None, settings=None):\n    app = Quart(name)\n    # load configuration\n    settings = os.environ.get(\"QUART_SETTINGS\", settings)\n    if settings is not None:\n        app.config.from_pyfile(settings)\n    # register blueprints\n    if blueprints is not None:\n        for bp in blueprints:\n            app.register_blueprint(bp)\n    return app\napp = create_app(blueprints=blueprints, settings=_SETTINGS) \n```", "```py\nfrom quart import Blueprint\nhome = Blueprint(\"home\", __name__)\n@home.route(\"/\")\ndef index():\n    \"\"\"Home view.\n    This view will return an empty JSON mapping.\n    \"\"\"\n    return {} \n```", "```py\n$ QUART_APP=myservice quart run\n * Serving Quart app 'myservice.app'\n * Environment: production\n * Please use an ASGI server (e.g. Hypercorn) directly in production\n * Debug mode: False\n * Running on http://localhost:5000 (CTRL + C to quit)\n[2020-12-06 20:17:28,203] Running on http://127.0.0.1:5000 (CTRL + C to quit) \n```"]