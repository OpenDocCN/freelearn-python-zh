["```py\n    from xmlrpc import client\n    server_url = 'http://localhost:8017'\n    db_name = 'cookbook_17e'\n    username = 'admin'\n    password = 'admin'\n    common = client.ServerProxy('%s/xmlrpc/2/common' % server_url)\n    user_id = common.authenticate(db_name, username, password, {})\n    if user_id:\n        print(\"Success: User id is\", user_id)\n    else:\n        print(\"Failed: wrong credentials\")\n    ```", "```py\n    python3 odoo_authenticate.py\n    ```", "```py\nfrom xmlrpc import client\nserver_url = 'http://localhost:8017'\ncommon = client.ServerProxy('%s/xmlrpc/2/common' % server_url)\nversion_info = common.version()\nprint(version_info)\n```", "```py\n$ python3 version_info.py\n{'server_version': '17.0+e', 'server_version_info': [17, 0, 0, 'final', 0, 'e'], 'server_serie': '17.0', 'protocol_version': 1}\n```", "```py\n    from xmlrpc import client\n    # room data with search method\n    server_url = 'http://localhost:8017'\n    db_name = 'cookbook_17e'\n    username = 'admin'\n    password = 'admin'\n    common = client.ServerProxy('%s/xmlrpc/2/common' % server_url)\n    user_id = common.authenticate(db_name, username, password, {})\n    models = client.ServerProxy('%s/xmlrpc/2/object' % server_url)\n    if user_id:\n        search_domain = [['name', 'ilike', 'Standard']]\n        rooms_ids = models.execute_kw(db_name, user_id, password,\n            'hostel.room', 'search',\n            [search_domain],\n            {'limit': 5})\n        print('Rooms ids found:', rooms_ids)\n        rooms_data = models.execute_kw(db_name, user_id, password,\n            'hostel.room', 'read',\n            [rooms_ids, ['name', 'room_no']])\n        print(\"Rooms data:\", rooms_data)\n    else:\n        print('Wrong credentials')\n    ```", "```py\n    python3 rooms_data.py\n    ```", "```py\n$ python3 rooms_data.py\nRooms ids found: [1, 2, 3, 4, 5]\nRooms data: [{'id': 1, 'name': '8th Standard', 'room_no': '1'}, {'id': 2, 'name': '9th Standard', 'room_no': '2'}, {'id': 3, 'name': '10th Standard', 'room_no': '3'}, {'id': 4, 'name': '11th Standard', 'room_no': '4'}, {'id': 5, 'name': '12th Standard', 'room_no': '5'}]\n```", "```py\nfrom xmlrpc import client\n# room data with search_read method\nserver_url = 'http://localhost:8017'\ndb_name = 'cookbook_17e'\nusername = 'admin'\npassword = 'admin'\ncommon = client.ServerProxy('%s/xmlrpc/2/common' % server_url)\nuser_id = common.authenticate(db_name, username, password, {})\nmodels = client.ServerProxy('%s/xmlrpc/2/object' % server_url)\nif user_id:\n    search_domain = [['name', 'ilike', 'Standard']]\n    rooms_ids = models.execute_kw(db_name, user_id, password,\n        'hostel.room', 'search_read',\n        [search_domain, ['name', 'room_no']],\n        {'limit': 5})\n    print('Rooms data:', rooms_ids)\nelse:\n    print('Wrong credentials')\n```", "```py\n    from xmlrpc import client\n    server_url = 'http://localhost:8017'\n    db_name = 'cookbook_17e'\n    username = 'admin'\n    password = 'admin'\n    common = client.ServerProxy('%s/xmlrpc/2/common' % server_url)\n    user_id = common.authenticate(db_name, username, password, {})\n    models = client.ServerProxy('%s/xmlrpc/2/object' % server_url)\n    if user_id:\n        # create new room records.\n        create_data = [\n            {'name': 'Room 1', 'room_no': '101'},\n            {'name': 'Room 3', 'room_no': '102'},\n            {'name': 'Room 5', 'room_no': '103'},\n            {'name': 'Room 7', 'room_no': '104'}\n        ]\n        rooms_ids = models.execute_kw(db_name, user_id, password,\n            'hostel.room', 'create',\n            [create_data])\n        print(\"Rooms created:\", rooms_ids)\n        # Write in existing room record\n        room_to_write = rooms_ids[1]  # We will use ids of recently created rooms\n        write_data = {'name': 'Room 2'}\n        written = models.execute_kw(db_name, user_id, password,\n            'hostel.room', 'write',\n            [room_to_write, write_data])\n        print(\"Rooms written\", written)\n        # Delete the room record\n        rooms_to_delete = rooms_ids[2:]\n        deleted = models.execute_kw(db_name, user_id, password,\n            'hostel.room', 'unlink',\n            [rooms_to_delete])\n        print('Rooms unlinked:', deleted)\n    else:\n        print('Wrong credentials')\n    ```", "```py\n    python3 rooms_operation.py\n    ```", "```py\n$ python3 rooms_operation.py\nRooms created: [6, 7, 8, 9]\nRooms written True\nRooms unlinked: True\n```", "```py\nfrom xmlrpc import client\nserver_url = 'http://localhost:8017'\ndb_name = 'cookbook_17e'\nusername = 'admin'\npassword = 'admin'\ncommon = client.ServerProxy('%s/xmlrpc/2/common' % server_url)\nuser_id = common.authenticate(db_name, username, password, {})\nmodels = client.ServerProxy('%s/xmlrpc/2/object' % server_url)\nif user_id:\n    has_access = models.execute_kw(db_name, user_id, password,\n        'hostel.room', 'check_access_rights',\n        ['create'], {'raise_exception': False})\n    print('Has create access on room:', has_access)\nelse:\n    print('Wrong credentials')\n# Output: Has create access on room: True\n```", "```py\n    from xmlrpc import client\n    server_url = 'http://localhost:8017'\n    db_name = 'cookbook_17e'\n    username = 'admin'\n    password = 'admin'\n    common = client.ServerProxy('%s/xmlrpc/2/common' % server_url)\n    user_id = common.authenticate(db_name, username, password, {})\n    models = client.ServerProxy('%s/xmlrpc/2/object' % server_url)\n    if user_id:\n        # Create room with state draft\n        room_id = models.execute_kw(db_name, user_id, password,\n            'hostel.room', 'create',\n            [{\n                'name': 'New Room',\n                'room_no': '35',\n                'state': 'draft'\n            }])\n        # Call make_available method on new room\n        models.execute_kw(db_name, user_id, password,\n            'hostel.room', 'make_available',\n            [[room_id]])\n        # check room status after method call\n        room_data = models.execute_kw(db_name, user_id, password,\n            'hostel.room', 'read',\n            [[room_id], ['name', 'state']])\n        print('Room state after method call:', room_data[0]['state'])\n    else:\n        print('Wrong credentials')\n    ```", "```py\n    python3 rooms_method.py\n    ```", "```py\n$ python3 rooms_method.py\nRoom state after method call: available\n```", "```py\n    import json\n    import random\n    import requests\n    server_url = 'http://localhost:8017'\n    db_name = 'cookbook_17e'\n    username = 'admin'\n    password = 'admin'\n    json_endpoint = \"%s/jsonrpc\" % server_url\n    headers = {\"Content-Type\": \"application/json\"}\n    def get_json_payload(service, method, *args):\n        return json.dumps({\n            \"jsonrpc\": \"2.0\",\n            \"method\": 'call',\n            \"params\": {\n                \"service\": service,\n                \"method\": method,\n                \"args\": args\n            },\n            \"id\": random.randint(0, 1000000000),\n        })\n    payload = get_json_payload(\"common\", \"login\", db_name, username, password)\n    response = requests.post(json_endpoint, data=payload, headers=headers)\n    user_id = response.json()['result']\n    if user_id:\n        print(\"Success: User id is\", user_id)\n    else:\n        print(\"Failed: wrong credentials\")\n    ```", "```py\n    python3 jsonrpc_authenticate.py\n    ```", "```py\n$ python3 jsonrpc_authentication.py\nSuccess: User id is 2\n```", "```py\nimport json\nimport random\nimport requests\nserver_url = 'http://localhost:8017'\ndb_name = 'cookbook_17e'\nusername = 'admin'\npassword = 'admin'\njson_endpoint = \"%s/jsonrpc\" % server_url\nheaders = {\"Content-Type\": \"application/json\"}\ndef get_json_payload(service, method, *args):\n    return json.dumps({\n        \"jsonrpc\": \"2.0\",\n        \"method\": 'call',\n        \"params\": {\n            \"service\": service,\n            \"method\": method,\n            \"args\": args\n        },\n        \"id\": random.randint(0, 1000000000),\n    })\npayload = get_json_payload(\"common\", \"version\")\nresponse = requests.post(json_endpoint, data=payload, headers=headers)\nprint(response.json())\n```", "```py\n$ python3 jsonrpc_version_info.py\n{'jsonrpc': '2.0', 'id': 361274992, 'result': {'server_version': '17.0+e', 'server_version_info': [17, 0, 0, 'final', 0, 'e'], 'server_serie': '17.0', 'protocol_version': 1}}\n```", "```py\n    # place authentication and get_json_payload methods (see first jsonrpc recipe)\n    if user_id:\n        # search for the room's ids\n        search_domain = [['name', 'ilike', 'Standard']]\n        payload = get_json_payload(\"object\", \"execute_kw\",\n            db_name, user_id, password,\n            'hostel.room', 'search', [search_domain], {'limit': 5})\n        res = requests.post(json_endpoint, data=payload, headers=headers).json()\n        print('Search Result:', res)  # ids will be in result keys\n        # read data for rooms ids\n        payload = get_json_payload(\"object\", \"execute_kw\",\n            db_name, user_id, password,\n            'hostel.room', 'read', [res['result'], ['name', 'room_no']])\n        res = requests.post(json_endpoint, data=payload, headers=headers).json()\n        print('Rooms data:', res)\n    else:\n        print(\"Failed: wrong credentials\")\n    ```", "```py\n    python3 json_fetch_data.py\n    ```", "```py\n$ python3 json_fetch_data.py\nSearch Result: {'jsonrpc': '2.0', 'id': 19247199, 'result': [1, 2, 3, 4, 5]}\nRooms data: {'jsonrpc': '2.0', 'id': 357582271, 'result': [{'id': 1, 'name': '8th Standard', 'room_no': '1'}, {'id': 2, 'name': '9th Standard', 'room_no': '2'}, {'id': 3, 'name': '10th Standard', 'room_no': '3'}, {'id': 4, 'name': '11th Standard', 'room_no': '4'}, {'id': 5, 'name': '12th Standard', 'room_no': '5'}]}\n```", "```py\n# place authentication and get_json_payload methods (see first jsonrpc recipe)\nif user_id:\n    # search for the room's ids\n    search_domain = [['name', 'ilike', 'Standard']]\n    payload = get_json_payload(\"object\", \"execute_kw\",\n        db_name, user_id, password,\n        'hostel.room', 'search_read', [search_domain, ['name', 'room_no']], {'limit': 5})\n    res = requests.post(json_endpoint, data=payload, headers=headers).json()\n    print('Rooms data:', res)\nelse:\n    print(\"Failed: wrong credentials\")\n```", "```py\n    # place authentication and get_json_payload method (see last recipe for more)\n    if user_id:\n        # creates the room's records\n        create_data = [\n            {'name': 'Room 1', 'room_no': '201'},\n            {'name': 'Room 3', 'room_no': '202'},\n            {'name': 'Room 5', 'room_no': '205'},\n            {'name': 'Room 7', 'room_no': '207'}\n        ]\n        payload = get_json_payload(\"object\", \"execute_kw\", db_name, user_id, password, 'hostel.room', 'create', [create_data])\n        res = requests.post(json_endpoint, data=payload, headers=headers).json()\n        print(\"Rooms created:\", res)\n        rooms_ids = res['result']\n        # Write in existing room record\n        room_to_write = rooms_ids[1]  # We will use ids of recently created rooms\n        write_data = {'name': 'Room 2'}\n        payload = get_json_payload(\"object\", \"execute_kw\", db_name, user_id, password, 'hostel.room', 'write', [room_to_write, write_data])\n        res = requests.post(json_endpoint, data=payload, headers=headers).json()\n        print(\"Rooms written:\", res)\n        # Delete in existing room record\n        room_to_unlink = rooms_ids[2:]  # We will use ids of recently created rooms\n        payload = get_json_payload(\"object\", \"execute_kw\", db_name, user_id, password, 'hostel.room', 'unlink', [room_to_unlink])\n        res = requests.post(json_endpoint, data=payload, headers=headers).json()\n        print(\"Rooms deleted:\", res)\n    else:\n        print(\"Failed: wrong credentials\")\n    ```", "```py\n    python3 jsonrpc_operation.py\n    ```", "```py\n$ python3 jsonrpc_operation.py\nRooms created: {'jsonrpc': '2.0', 'id': 837186761, 'result': [43, 44, 45, 46]}\nRooms written: {'jsonrpc': '2.0', 'id': 317256710, 'result': True}\nRooms deleted: {'jsonrpc': '2.0', 'id': 978974378, 'result': True}\n```", "```py\n# place authentication and get_json_payload method (see last recipe for more)\nif user_id:\n    payload = get_json_payload(\"object\", \"execute_kw\",\n        db_name, user_id, password,\n        'hostel.room', 'check_access_rights', ['create'])\n    res = requests.post(json_endpoint, data=payload, headers=headers).json()\n    print(\"Has create access:\", res['result'])\nelse:\n    print(\"Failed: wrong credentials\")\n```", "```py\n$ python3 jsonrpc_access_rights.py\nHas create access: True\n```", "```py\n    # place authentication and get_json_payload method (see last recipe for more)\n    ```", "```py\nif user_id:\n    # Create the room record in draft state\n    payload = get_json_payload(\"object\", \"execute_kw\",\n        db_name, user_id, password,\n        'hostel.room', 'create', [{\n            'name': 'Room 1',\n            'room_no': '101',\n            'state': 'draft'\n        }])\n    res = requests.post(json_endpoint, data=payload, headers=headers).json()\n    print(\"Room created with id:\", res['result'])\n    room_id = res['result']\n    # Change the room state by calling make_available method\n    payload = get_json_payload(\"object\", \"execute_kw\",\n        db_name, user_id, password,\n        'hostel.room', 'make_available', [room_id])\n    res = requests.post(json_endpoint, data=payload, headers=headers).json()\n    # Check the room status after method call\n    payload = get_json_payload(\"object\", \"execute_kw\",\n        db_name, user_id, password,\n        'hostel.room', 'read', [room_id, ['name', 'state']])\n    res = requests.post(json_endpoint, data=payload, headers=headers).json()\n    print(\"Room state after the method call:\", res['result'])\nelse:\n    print(\"Failed: wrong credentials\")\n```", "```py\ndraft and then we will change the room state by calling the make_available method. After that, we will fetch the room data to check the room’s status, which will generate the following output:\n\n```", "```py\n\n\t\t\tThe program of this recipe will create a new room record and change the state of the room by calling the model method. By the end of the program, we will have read the room record and printed the updated state.\n\t\t\tHow it works...\n\t\t\t`execute_kw()` is capable of calling any public method of the model. As we saw in the *Calling methods through XML-RPC* recipe, public methods are those that have names that don’t start with `_` (underscore). Methods that start with `_` are private, and you cannot invoke them from JSON-RPC.\n\t\t\tIn our example, we created a room with a state of `draft`. Then, we made one more RPC call to invoke the `make_available` method, which will change the room’s state to `available`. Finally, we made one more RPC call to check the state of the room. This will show that the room’s state has changed to **Available**, as seen in *Figure 20**.10*.\n\t\t\tMethods that do not return anything internally return `None` by default. Such methods cannot be used from RPC. Consequently, if you want to use your method from RPC, at least add the return `True` statement.\n\t\t\tThe OCA odoorpc library\n\t\t\tThe `odoorpc`. This is available at [https://github.com/OCA/odoorpc](https://github.com/OCA/odoorpc). The `odoorpc` library provides a user-friendly syntax from which to access Odoo data through RPC. It provides a similar a syntax similar to that of the server. In this recipe, we will see how you can use the `odoorpc` library to perform operations through RPC.\n\t\t\tGetting ready\n\t\t\tThe `odoorpc` library is registered on the Python package (`PyPI`) index. In order to use the library, you need to install it using the following command. You can use this in a separate virtual environment if you want:\n\n```", "```py\n\n\t\t\tIn this recipe, we will perform some basic operations using the `odoorpc` library. We will use the `hostel.room` model to perform these operations. Make sure you have installed the `my_hostel` module and that the server is running on `http://localhost:8017`.\n\t\t\tHow to do it...\n\t\t\tPerform the following steps to create, write, and update a room’s information through RPC:\n\n\t\t\t\t1.  Add the `odoorpc_hostel.py` file. You can place this file anywhere you want because the RPC program will work independently.\n\t\t\t\t2.  Add the following code to the file:\n\n    ```", "```py\n\n    \t\t\t\t3.  Run the Python script from the Terminal with the following command:\n\n    ```", "```py\n\n\t\t\tThe program will do the authentication, print user information, and perform an operation in the `hostel.room` model. It will generate the following output:\n\n```", "```py\n\n\t\t\tThe preceding output is the result of several RPC calls. We have fetched user info, some room info, and we have changed the state of the room.\n\t\t\tHow it works...\n\t\t\tAfter installing the `odoorpc` library, you can start using it straight away. To do so, you will need to import the `odoorpc` package and then we will create the object of the `ODOO` class by passing the server URL and port. This will make the `/version_info` call to the server to check the connection. To log in, you need to use the `login()` method of the object. Here, you need to pass the `database` `name`, `username`, and `password`.\n\t\t\tUpon successful login, you can access the user information at `odoo.env.user`. `odoorpc` provides a user-friendly version of RPC, so you can use this user object exactly like the record set in the server. In our example, we accessed the name, email, and company name from this user object.\n\t\t\tIf you want to access the model registry, you can use the `odoo.env` object. You can call any model method on the model. Under the hood, the `odoorpc` library uses `jsonrpc`, so you can’t invoke any private model method name that starts with an `_`. In our example, we accessed the `hostel.room` model from the registry. After that, we called the `search` method with the `domain` and `limit` parameters. This will return the IDs of the rooms. By passing the room IDs to the `browse()` method, you can generate a record set for the `hostel.room` model.\n\t\t\tBy the end of the program, we will have created a new room and changed the room’s state by calling the `make_available()` method. If you look closely at the syntax of the program, you will see that it uses the same syntax as the server.\n\t\t\tThere’s more...\n\t\t\tAlthough it provides a user-friendly syntax like the server, you can use the library just like the normal RPC syntax. To do so, you need to use the `odoo.execute` method with the model name, method name, and arguments. Here is an example of reading some room information in the raw RPC syntax:\n\n```", "```py\n\n\t\t\tSee also\n\t\t\tThere are several other implementations of RPC libraries for Odoo, as follows:\n\n\t\t\t\t*   [https://github.com/akretion/ooor](https://github.com/akretion/ooor)\n\t\t\t\t*   [https://github.com/OCA/odoorpc](https://github.com/OCA/odoorpc)\n\t\t\t\t*   [https://github.com/odoo/openerp-client-lib](https://github.com/odoo/openerp-client-lib)\n\t\t\t\t*   [http://pythonhosted.org/OdooRPC](http://pythonhosted.org/OdooRPC)\n\t\t\t\t*   [https://github.com/abhishek-jaiswal/php-openerp-lib](https://github.com/abhishek-jaiswal/php-openerp-lib)\n\n\t\t\tGenerating API keys\n\t\t\tOdoo v17 has built-in support for the **two-factor authentication** (**2FA**) feature. 2FA is an extra layer of security for user accounts and users need to enter a password and time-based code. If you have enabled 2FA, then you won’t be able to use RPC by entering your user ID and password. To fix this, you will need to generate an API key for the user. In this recipe, we will see how you can generate API keys.\n\t\t\tHow to do it...\n\t\t\tPerform the following steps to generate an API key for RPC:\n\n\t\t\t\t1.  Open user preferences and open the **Account** **Security** tab.\n\t\t\t\t2.  Click on the **New API** **Key** button:\n\n\t\t\t![Figure 20.1 – Generating a new API key](img/B20997_20_01.jpg)\n\n\t\t\tFigure 20.1 – Generating a new API key\n\n\t\t\t\t1.  It will open a popup, as in the following screenshot. Enter the API key name and click on the **Generate** **key** button:\n\n\t\t\t![Figure 20.2 – Naming your key](img/B20997_20_02.jpg)\n\n\t\t\tFigure 20.2 – Naming your key\n\n\t\t\t\t1.  This will generate the API key and show it in a new popup. Note down the API key because you will need this again:\n\n\t\t\t![Figure 20.3 – Noting the generated API key](img/B20997_20_03.jpg)\n\n\t\t\tFigure 20.3 – Noting the generated API key\n\t\t\tOnce the API key is generated, you can start using the API key for RPC in the same way as the normal password.\n\t\t\tHow it works…\n\t\t\tUsing API keys is straightforward. However, there are a few things that you need to take care of. The API keys are generated per user, and if you want to utilize RPC for multiple users, you will need to generate an API key for each user. Additionally, the API key for a user will have the same access rights as the user would have, so if someone gains access to the key, they can perform all the operations that the user can. So, you need to keep the API key secret.\n\t\t\tImportant note\n\t\t\tWhen you generate the API key, it is displayed only once. You need to note down the key. If you lose it, there is no way to get it back. In such cases, you would need to delete the API key and generate a new one.\n\t\t\tUsing the API key is very simple. During RPC calls, you just need to use the API key instead of the user password. You will be able to call RPC even if 2FA is activated.\n\n```"]