- en: Chapter 40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: More with Files
  prefs: []
  type: TYPE_NORMAL
- en: 40.1 Exercises of a General Nature with Files
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Exercise 40.1-1 Calculating the Sum of 10 Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose there is a file named “f_data40.1-1.txt” that contains 10 3-digit integers
    (separated by a single space character). An example of the structure of the file
    is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 131 500 122 152 127 191 111 290 156 161
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that calculates and displays their sum.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: There are two approaches to iterate through the numbers of this file.
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: In this approach, a string variable named values gets the content of the whole
    line of the file. Then, the slicing mechanism is used in a for-loop to split the
    content into individual three-digit numbers. These numbers are then converted
    to integers using the int() function to calculate their sum.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_40.1-1a'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_data40.1-1.txt")
  prefs: []
  type: TYPE_NORMAL
- en: values = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: 'total += int(values[i * 4 : i * 4 + 3])'
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: A for-loop is used to read and process each of the 10 integers in the file.
    Within the loop, the fin.read(3) method reads the next 3 characters from the file.
    Since the file contains 3-digit integers, this reads one integer. The int() function
    converts the read string to an integer, and then it is added to the total. Next,
    the second statement within the for-loop reads and ignores the space character
    that separates the integers.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_40.1-1b'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_data40.1-1.txt")
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: 'for i in range(10):'
  prefs: []
  type: TYPE_NORMAL
- en: 'total += int(fin.read(3))   #Read 3 characters'
  prefs: []
  type: TYPE_NORMAL
- en: space = fin.read(1)  #Read and ignore the space character
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: print(total)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 40.1-2 Calculating the Average Value of an Unknown Quantity of Numbers
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose there is a file named “f_data40.1-2.txt” that contains numbers, one
    on each line, except the last one which contains the phrase “End of file”. An
    example of the structure of the file is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  prefs: []
  type: TYPE_NORMAL
- en: '13.172'
  prefs: []
  type: TYPE_NORMAL
- en: '33.5'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: End of file
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that calculates and displays their average value.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: According to the “Ultimate” rule discussed in [Section 28.3](chapter28.html#toc_3),
    the while-loop should be as follows, given in general form.
  prefs: []
  type: TYPE_NORMAL
- en: sNumber = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: 'while sNumber != "End of file":'
  prefs: []
  type: TYPE_NORMAL
- en: A statement or block of statements
  prefs: []
  type: TYPE_NORMAL
- en: sNumber = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: The final program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_40.1-2'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_data40.1-2.txt")
  prefs: []
  type: TYPE_NORMAL
- en: total = 0
  prefs: []
  type: TYPE_NORMAL
- en: count = 0
  prefs: []
  type: TYPE_NORMAL
- en: sNumber = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: 'while sNumber != "End of file":'
  prefs: []
  type: TYPE_NORMAL
- en: total += float(sNumber)
  prefs: []
  type: TYPE_NORMAL
- en: count += 1
  prefs: []
  type: TYPE_NORMAL
- en: sNumber = fin.readline()
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: 'if count > 0:'
  prefs: []
  type: TYPE_NORMAL
- en: print(total / count)
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 40.1-3 Finding Minimum and Maximum Values
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose there is a file named “f_data40.1-3.txt” that contains numbers, one
    on each line. An example of the structure of the file is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '16'
  prefs: []
  type: TYPE_NORMAL
- en: '13.172'
  prefs: []
  type: TYPE_NORMAL
- en: '33.5'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that finds the greatest and lowest values and stores
    them in a file named “output.txt” in the following form
  prefs: []
  type: TYPE_NORMAL
- en: 33.5  13.172
  prefs: []
  type: TYPE_NORMAL
- en: Assume that there is at least one value in the file “f_data40.1-3.txt”.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: The final program is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_40.1-3'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "f_data40.1-3.txt")
  prefs: []
  type: TYPE_NORMAL
- en: '#Read the first value'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = float(fin.readline())
  prefs: []
  type: TYPE_NORMAL
- en: minimum = maximum
  prefs: []
  type: TYPE_NORMAL
- en: '#Read the rest of the values, line by line'
  prefs: []
  type: TYPE_NORMAL
- en: 'for sNumber in fin:'
  prefs: []
  type: TYPE_NORMAL
- en: number = float(sNumber)
  prefs: []
  type: TYPE_NORMAL
- en: 'if number > maximum:'
  prefs: []
  type: TYPE_NORMAL
- en: maximum = number
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if number < minimum:'
  prefs: []
  type: TYPE_NORMAL
- en: minimum = number
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: '#Write the greatest and lowest value in a file'
  prefs: []
  type: TYPE_NORMAL
- en: fout = open(PATH + "output.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write(str(maximum) + " " + str(minimum))
  prefs: []
  type: TYPE_NORMAL
- en: fout.close()
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 40.1-4 Concatenating Files
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: Suppose there are two text files named “text1.txt” and “text2.txt”. Write a
    Python program that concatenates the contents of the two files and writes the
    concatenated text in a third file named “final.txt”, placing the contents of the
    file “text1.txt” before the contents of the file “text2.txt”.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: This exercise can be solved using several approaches. Let's see two of them.
  prefs: []
  type: TYPE_NORMAL
- en: First approach
  prefs: []
  type: TYPE_NORMAL
- en: The program opens the file “text1.txt”, reads all of its contents, assigns them
    to the variable contents, and then closes the file. Next, it opens the file “text2.txt”,
    reads all of its contents, concatenates them with the previous ones (those in
    the variable contents), and closes the file. Finally, it opens the file “final.txt”
    and writes the concatenated contents in it, as shown in the program that follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_40.1-4a'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "text1.txt")
  prefs: []
  type: TYPE_NORMAL
- en: contents = fin.read()
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "text2.txt")
  prefs: []
  type: TYPE_NORMAL
- en: contents += fin.read()  #Concatenation
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: fout = open(PATH + "final.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write(contents)
  prefs: []
  type: TYPE_NORMAL
- en: fout.close()
  prefs: []
  type: TYPE_NORMAL
- en: Second approach
  prefs: []
  type: TYPE_NORMAL
- en: The program that follows opens all the three files at the beginning, writes
    the concatenated contents, and then closes them.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_40.1-4b'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: fin1 = open(PATH + "text1.txt")
  prefs: []
  type: TYPE_NORMAL
- en: fin2 = open(PATH + "text2.txt")
  prefs: []
  type: TYPE_NORMAL
- en: fout = open(PATH + "final.txt", "w")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write(fin1.read() + fin2.read())
  prefs: []
  type: TYPE_NORMAL
- en: fout.close()
  prefs: []
  type: TYPE_NORMAL
- en: fin2.close()
  prefs: []
  type: TYPE_NORMAL
- en: fin1.close()
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)The order in which you close the files doesn''t need to
    correspond to the order in which you opened them. You can open, for example, the
    file “text2.txt” first, and close it last, or open it first and close it first.'
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 40.1-5 Searching in a File
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: In the United States, the Social Security Number (SSN) is a nine-digit identity
    number applied to all U.S. citizens in order to identify them for the purposes
    of Social Security. Suppose there is a file named “SSN.txt” that contains the
    SSNs (Social Security Numbers) of all citizens of the state of California, as
    well as their full name, one record on each line. An example of the structure
    of the file is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 123456789 Aristides Bouras
  prefs: []
  type: TYPE_NORMAL
- en: 123000000 Loukia Ainarozidou
  prefs: []
  type: TYPE_NORMAL
- en: 121212121 John Papas Junior
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that prompts the user to enter the first digits of an
    SSN to search and then searches in the file and displays the first and last names
    of all citizens whose SSN starts with those digits.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: In this particular exercise, if the user enters all nine digits of an SSN to
    search, and this SSN is found, the program must display the first and last name
    of the corresponding citizen and stop searching thereafter. On the other hand,
    if the user enters less than nine digits to search, the program must search and
    display the first and last name of all the citizens whose SSN starts with those
    digits. The solution to this exercise is as follows.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_40.1-5'
  prefs: []
  type: TYPE_NORMAL
- en: PATH = "c:/temp/"
  prefs: []
  type: TYPE_NORMAL
- en: 'ssnToSearch = input("Enter an SSN to search: ")'
  prefs: []
  type: TYPE_NORMAL
- en: length = len(ssnToSearch)
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(PATH + "SSN.txt")
  prefs: []
  type: TYPE_NORMAL
- en: found = False
  prefs: []
  type: TYPE_NORMAL
- en: 'for line in fin:'
  prefs: []
  type: TYPE_NORMAL
- en: ssn = line[:9]
  prefs: []
  type: TYPE_NORMAL
- en: fullName = line[10:]
  prefs: []
  type: TYPE_NORMAL
- en: '#If it is found'
  prefs: []
  type: TYPE_NORMAL
- en: 'if ssnToSearch == ssn[0:length]:'
  prefs: []
  type: TYPE_NORMAL
- en: print(fullName, end = "")  #Variable fullName already contains a line break
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: found = True
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: '#If SSN to search contains 9 digits and it is found, exit loop'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'if length == 9:'
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: break
  prefs:
  - PREF_BQ
  - PREF_BQ
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: 'if not found:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Not found!")
  prefs: []
  type: TYPE_NORMAL
- en: Exercise 40.1-6 Combining Files with Subprograms
  prefs:
  - PREF_H4
  type: TYPE_NORMAL
- en: 'Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named readContent that accepts the filename of a file and
    returns its contents.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Write a subprogram named writeContent that accepts the filename of a file
    and a string, and writes that string in the file.
  prefs: []
  type: TYPE_NORMAL
- en: iii)Using the subprograms cited above, write a Python program that prompts the
    user to enter the filenames of two files and then copies the contents of the first
    file to the second one. Assume that the user enters valid filenames.
  prefs: []
  type: TYPE_NORMAL
- en: Solution
  prefs: []
  type: TYPE_NORMAL
- en: Even though this particular exercise seems quite easy, it is necessary to highlight
    some things about the readContent() function. Examine the readContent() function
    that follows and try to find the error it contains. The error is a logic error,
    not a syntax one. This function is executed successfully without any syntax errors
    thrown by the Python interpreter. However, the error is there and quite difficult
    to spot!
  prefs: []
  type: TYPE_NORMAL
- en: 'def readContent(filename):'
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(filename)
  prefs: []
  type: TYPE_NORMAL
- en: return fin.read()
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: What happens here is that, when the return statement is executed, Python ignores
    the rest of the statements of the function, which means that the file probably
    won't close. Imaging calling this particular function many times in a program.
    You would end up with many open files that will probably never close.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Latest versions of Python will probably close the file automatically
    when there is no reference (fin) to it, but it is bad practice to leave a file
    open and wait for Python to close it for you.'
  prefs: []
  type: TYPE_NORMAL
- en: A good practice is to place the return statement at the end of the function,
    as shown in the following program.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/my_exercise_header.png) file_40.1-6'
  prefs: []
  type: TYPE_NORMAL
- en: 'def readContent(filename):'
  prefs: []
  type: TYPE_NORMAL
- en: fin = open(filename)
  prefs: []
  type: TYPE_NORMAL
- en: contents = fin.read()
  prefs: []
  type: TYPE_NORMAL
- en: fin.close()
  prefs: []
  type: TYPE_NORMAL
- en: return contents
  prefs: []
  type: TYPE_NORMAL
- en: 'def writeContent(filename, contents):'
  prefs: []
  type: TYPE_NORMAL
- en: fout = open(filename, "w")
  prefs: []
  type: TYPE_NORMAL
- en: fout.write(contents)
  prefs: []
  type: TYPE_NORMAL
- en: fout.close()
  prefs: []
  type: TYPE_NORMAL
- en: '#Main code starts here'
  prefs: []
  type: TYPE_NORMAL
- en: 'source = input("Enter source filename: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'destination = input("Enter destination filename: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'c = readContent(source)         #Equivalent to:'
  prefs: []
  type: TYPE_NORMAL
- en: writeContent(destination, c)    #writeContent(destination, readContent(source))
  prefs: []
  type: TYPE_NORMAL
- en: 40.2 Review Exercises
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Complete the following exercises.
  prefs: []
  type: TYPE_NORMAL
- en: 1)Suppose there is a file named “f_data40.2-1.txt” that contains 10 2-digit
    integers (separated by a single space character). An example of the structure
    of the file is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 13 55 12 61 12 19 80 91 15 16
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that calculates and displays the average value of those
    that are greater than 50.
  prefs: []
  type: TYPE_NORMAL
- en: 2)Suppose there is a file named “f_data40.2-2.txt” that contains 3-digit integers
    (separated by a comma character). An example of the structure of the file is shown
    here.
  prefs: []
  type: TYPE_NORMAL
- en: 130,501,322,415,527,191
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that calculates and displays the average value of those
    that are between 300 and 500\. Assume there is at least one number in the file.
  prefs: []
  type: TYPE_NORMAL
- en: 3)Suppose there is a file named “f_data40.2-3.txt” that contains the grades
    and the full names of the students of a class (separated by a comma character),
    one record on each line. An example of the structure of the file is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: 96,George Papas
  prefs: []
  type: TYPE_NORMAL
- en: 100,Anna Maria Garcia
  prefs: []
  type: TYPE_NORMAL
- en: 89,Peter Smith
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Write a Python program that finds and displays the full name of the best and
    the worst student of the class. Assume there is at least one record in the file
    and that all of the grades are different.
  prefs: []
  type: TYPE_NORMAL
- en: '4)The IT administrator of a transportation company needs a program to extract
    useful information from a file named “f_data40.2-4.txt” regarding the items the
    company transports. Suppose the file contains the width, length, height and description
    of each item. The dimensions of the items are in inches and each dimension occupies
    4 characters in the file (2 characters for the integer part, one for the decimal
    point and one for the decimal digit). An example of the file''s structure is shown
    below:'
  prefs: []
  type: TYPE_NORMAL
- en: 110.5 011.2 020.9 Box No 37 (Plastic bottles)
  prefs: []
  type: TYPE_NORMAL
- en: 022.6 023.1 040.2 Container No 23 (6 glasses)
  prefs: []
  type: TYPE_NORMAL
- en: 009.5 156.6 020.0 Package No 12 (Fragile items)
  prefs: []
  type: TYPE_NORMAL
- en: 024.2 020.1 030.1 Container No 29 (Glass bottles)
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a Python program that:'
  prefs: []
  type: TYPE_NORMAL
- en: i)prompts the user to enter a keyword to search within the description of the
    items. For example, if the user enters the word “glass”, then the program must
    display the following messages
  prefs: []
  type: TYPE_NORMAL
- en: Keyword 'glass' found!
  prefs: []
  type: TYPE_NORMAL
- en: 'Container No 23 (6 glasses) – Dimensions: 22.6 x 23.1 x 40.2'
  prefs: []
  type: TYPE_NORMAL
- en: 'Container No 29 (Glass bottles) - Dimensions: 24.2 x 20.1 x 30.1'
  prefs: []
  type: TYPE_NORMAL
- en: 'ii)finds and displays the volume (in cubic feet) of each item. The messages
    must be formatted as in the example below:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Volume of each item:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Box No 37 (Plastic bottles): Volume = 14.9686 cubic feet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Container No 23 (6 glasses): Volume = 12.1451 cubic feet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Package No 12 (Fragile items): Volume = 17.2187 cubic feet'
  prefs: []
  type: TYPE_NORMAL
- en: 'Container No 29 (Glass bottles): Volume = 8.472940 cubic feet'
  prefs: []
  type: TYPE_NORMAL
- en: iii)finds and displays the total volume (in cubic feet) of all the items.
  prefs: []
  type: TYPE_NORMAL
- en: iv)finds and displays the description of the box with the greatest volume.
  prefs: []
  type: TYPE_NORMAL
- en: Keep in mind that one cubic foot is equivalent to 1728 cubic inches.
  prefs: []
  type: TYPE_NORMAL
- en: 5)Write a Python program that prompts the user to enter the filenames of two
    files. The program must then concatenate the contents of the two files and write
    the concatenated text in a third file named “final.txt”, placing the contents
    of the first file after the contents of the second file. If the user-provided
    filenames do not contain the “.txt” extension the program must display an error
    message.
  prefs: []
  type: TYPE_NORMAL
- en: 6)Suppose there is a file named “f_data40.2-6.txt” that contains 15 numbers,
    one on each line. Write a Python program that sorts those numbers in ascending
    order using the bubble sort algorithm and writes the sorted values in the same
    file, below the initial unsorted values.
  prefs: []
  type: TYPE_NORMAL
- en: 7)Suppose there is a file named “f_data40.2-7.txt” that contains names of eight
    cities as well as their maximum temperatures on a specific day. An example of
    the structure of the file is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: New York
  prefs: []
  type: TYPE_NORMAL
- en: '82.3'
  prefs: []
  type: TYPE_NORMAL
- en: Washington DC
  prefs: []
  type: TYPE_NORMAL
- en: '84.3'
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: .
  prefs: []
  type: TYPE_NORMAL
- en: Thus, the odd-numbered lines contain city names and the even-numbered lines
    contain the maximum temperature of each city. Write a Python program that reads
    the file line by line and stores the city names and the temperatures in the lists
    cities and temperatures correspondingly. Assume there is at least one name of
    a city and its corresponding temperature in the file. The program must then
  prefs: []
  type: TYPE_NORMAL
- en: i)calculate and display the average temperature of all cities.
  prefs: []
  type: TYPE_NORMAL
- en: ii)find and display the highest temperature as well as all city names that have
    this temperature.
  prefs: []
  type: TYPE_NORMAL
- en: '8)Some words such as “revolutionary” and “internationalization” are so lengthy
    that writing them out repeatedly can become quite tiresome. Let''s consider a
    word too long if its length is more than 10 characters. In such cases, this word
    must be replaced with a special abbreviation which is made like this: you keep
    the first and the last letter of the word and insert the number of letters between
    them. For instance, “revolutionary” becomes “r11y” and “internationalization”
    becomes “i18n”.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose there is a file named “f_data40.2-8.txt” that contains an English text.
    Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named abbreviate that accepts a word and when it is more
    than 10 characters long, it returns its abbreviation; it must return the same
    word otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that reads the text
    from the file and displays it with all long words replaced by their abbreviations.
  prefs: []
  type: TYPE_NORMAL
- en: Assume that the words are separated by a single space character.
  prefs: []
  type: TYPE_NORMAL
- en: '9)Pig Latin is a playful language game often used in English-speaking countries.
    It involves altering the letters of a word based on a set of simple rules. Here
    are the rules for translating a word into Pig Latin:'
  prefs: []
  type: TYPE_NORMAL
- en: ►If the word begins with a vowel, simply add “way” to the end of the word. For
    example, “apple” becomes “appleway”.
  prefs: []
  type: TYPE_NORMAL
- en: ►If the word begins with one or more consonants, move the consonant(s) to the
    end of the word and add “ay”. For example, “banana” becomes “ananabay” and “flower”
    becomes “owerflay”.
  prefs: []
  type: TYPE_NORMAL
- en: 'Suppose there is a file named “f_data40.2-9.txt” that contains an English text.
    Do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a subprogram named pigLatinTranslator that accepts an English word and
    returns the corresponding Pig Latin translation.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the subprogram cited above, write a Python program that reads the text
    from the file and writes the corresponding Pig Latin translation in a file named
    “pig_latin_translation.txt”.
  prefs: []
  type: TYPE_NORMAL
- en: Assume that the text contains only lowercase characters of the English alphabet
    and the words are separated by a single space character.
  prefs: []
  type: TYPE_NORMAL
- en: 10)Given two strings, X = "ABCDEFGHIJKLMNOPQRSTUVWXYZ" and Y = "JKWCTAMEDXSLFBYUNG
    RZOIQVHP", you can encrypt any message. The person who holds the Y string can
    decrypt the encrypted message by mapping the letters of string X to string Y,
    one by one. To be more specific, the letter “A” is encrypted as “J”, the letter
    “B” as “K”, the letter “C” as “W”, and so on. According to this encryption method,
    write a Python program that prompts the user to enter a message and then writes
    the encrypted message in a file named “encrypted.txt”. Space characters must not
    be encrypted and should remain as is in the encrypted message.
  prefs: []
  type: TYPE_NORMAL
- en: 11)Write a Python program that decrypts the message of the previous exercise
    (in the file “encrypted.txt”) and writes the decrypted message in a file named
    “decrypted.txt”.
  prefs: []
  type: TYPE_NORMAL
- en: 12)Write a subprogram named copyFile that accepts two arguments (source and
    destination) and then creates a new copy of the file source using the name destination.
  prefs: []
  type: TYPE_NORMAL
- en: 13)Suppose there is a file named “f_data40.2-13.txt” that contains the lengths
    of all three sides of a triangle (one on each line). An example of the structure
    of the file is shown here.
  prefs: []
  type: TYPE_NORMAL
- en: '16.0'
  prefs: []
  type: TYPE_NORMAL
- en: '20.6'
  prefs: []
  type: TYPE_NORMAL
- en: '22.7'
  prefs: []
  type: TYPE_NORMAL
- en: Do the following
  prefs: []
  type: TYPE_NORMAL
- en: i)Write a class named Triangle that includes
  prefs: []
  type: TYPE_NORMAL
- en: a)a constructor that reads the three sides from the file and assigns them to
    three private fields named _sideA, _sideB, and _sideC.
  prefs: []
  type: TYPE_NORMAL
- en: b)a method named canBeTriangle that checks and returns True when the values
    in fields _sideA, _sideB, and _sideC can be lengths of the three sides of a triangle.
    It must return False otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'Hint: In any triangle, the length of each side is less than the sum of the
    lengths of the other two sides.'
  prefs: []
  type: TYPE_NORMAL
- en: c)a void method named displayLengths that displays the lengths of all three
    sides as well as a message indicating whether those lengths can be lengths of
    the three sides of a triangle or not.
  prefs: []
  type: TYPE_NORMAL
- en: d)a void method named displayArea that, in case the lengths can be lengths of
    the three sides of a triangle, calculates and displays the area of the triangle.
    You can use Heron's formula, which has been known for nearly 2,000 years!
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter12-24.png)
  prefs: []
  type: TYPE_NORMAL
- en: where S is the semi-perimeter ![Image](img/chapter12-25.png)
  prefs: []
  type: TYPE_NORMAL
- en: e)a void method named displayPerimeter that, in case the lengths can be lengths
    of the three sides of a triangle, calculates and displays the perimeter of the
    triangle.
  prefs: []
  type: TYPE_NORMAL
- en: ii)Using the class cited above, write a Python program that displays all available
    information about the triangle.
  prefs: []
  type: TYPE_NORMAL
