["```py\npip install robotframework-selenium2library\n```", "```py\npip install flask\n```", "```py\npython hello.py\n```", "```py\n| Perform correct credentials | go to | ${LOGIN URL}\n|  | Title Should Be | My Application\n|  | Page Should Contain TextField | username\n|  | Input Text | username | ${VALID USER} \n|  | Input Password | password | ${VALID PASSWD}\n|  | Click Button | Login \n|  | Location Should be | ${SUCCESS URL}\n```", "```py\npip install robotframework-debuglibrary\n```", "```py\neasy_install robotframework-debuglibrary\n```", "```py\nCLASSPATH=swinglibrary-1.6.0.jar:myApp.jar jybot testsuites\n```", "```py\n| Start test | Start Application | fully qualified name of theapplication\n|  | Select Window | Todo List\n|  | Button Should Be Enabled | Add Todo item\n|  | Type Into Text Field | description | Get this swingapplication tested.\n|  | Push Button | Add Todo item\n|  | ${itemCount}= | Get List Item Count | todolist\n|  | Should Be Equal As Integers | 1 | ${itemCount}\n```", "```py\nexists(\"1377428833316.png\")\nclick(\"1377428844996.png\")\nwait(\"1377428859228.png\")\ntype(\"1377428922965.png\", 'google.com')\nwait(\"1377428949234.png\")\ntype(\"1377429289183.png\", 'sikuli test automation')\nexists(\"1377429031446.png\")\n```", "```py\ndef sikuli_method(name, *args, **kwargs):\n\n    return sys.modules['sikuli.Sikuli'].__dict__[name](*args,**kwargs)\n```", "```py\ndef click(target, modifiers=0):\n\n    try:\n\n        return sikuli_method('click', target, modifiers)\n\n    except FindFailed, e:\n\n        raise e\n```", "```py\nset sikuli_jar=%sikuli_home%sikuli-script.jar\nset CLASSPATH=%sikuli_jar%\nset JYTHONPATH=%sikuli_jar%/Lib\ncall jybot --pythonpath=TestLib ^\n      --outputdir=results ^\n      --loglevel=TRACE ^\n      --output \"%~d0%~p0results\\output.xml\" ^\n      --log \"%~d0%~p0results\\log.html\" ^\n      --report \"%~d0%~p0results\\report.html\" ^\n      testsuite\n```", "```py\n***Settings***\nLibrary  TestAction1.XTest  WITH NAME  TestAction1\nLibrary  2ndcase1staction.XTest  WITH NAME  2ndcase1staction\nLibrary  anotheraction.XTest  WITH NAME  anotheraction\n***Test Cases***\nTest Case 1\n  TestAction1.Execute\nTest Case 2\n  2ndcase1staction.Execute\n  anotheraction.Execute\n```", "```py\nfrom __future__ import with_statement\nfrom sikuliwrapper import *\naddImagePath(common.cfgImageLibrary) #uses the values supplied by the robot framework.\nSettings.MinSimilarity = 0.9  # Image present on the screen should match 90% or more than the provided image.\n\nclass XTest(BaseLogger):\n    ROBOT_LIBRARY_SCOPE = 'TEST SUITE'\n\n    def __init__(self):\n        None\n    def Execute(self, *args):\n        type(\"this is a reference test example\")\n        wait(0.485)\n        ...\n```", "```py\nfrom logger import *\nfrom sikuli.Sikuli import Region as SikuliRegion\nfrom sikuli.Sikuli import Screen as SikuliScreen\nlog = RobotLogger()\nclass VerifyException(RuntimeError):\n    ROBOT_CONTINUE_ON_FAILURE = True\n# function for calling native sikuli methods\ndef sikuli_method(name, *args, **kwargs):\n    return sys.modules['sikuli.Sikuli'].__dict__[name](*args, **kwargs)\n\n# overwritten Screen.exists method\ndef exists(target, timeout=0):\n    addFoundImage(getFilename(target))\n    return sikuli_method('exists', target, float(timeout))\n…\n```", "```py\nimport logging\nimport datetime\nimport shutil\nfrom sikuli.Sikuli import *\n\n# Properly set the logging mechanism\nlogging.addLevelName(logging.WARNING, 'WARN')\nHTML = logging.INFO + 5\nlogging.addLevelName(HTML, 'HTML')\n\nclass RobotLogger(logging.Logger):\n    def __init__(self, name='robot', level=logging.INFO):\n        level = logging.DEBUG\n        logging.Logger.__init__(self, name, level)\n        self.addHandler(RobotHandler())\n\n    def _get_unique_name(self, prefix=\"\", suffix=\"\"):\n        now = datetime.datetime.now()\n        return prefix + now.strftime('%Y-%m-%d_%H-%M-%S') + suffix\n\n    def screenshot(self, msg='', folder='results/screenshots/', region=(0,0,1440,900)):\n        name = self._get_unique_name(suffix=\".png\")\n        img_src = capture(*region)    # Actual call to capture the entire screen\n        shutil.copy(img_src, folder + name)\n        self.html_img(msg, folder + name)\n\n    def passed(self, msg, *args, **kwargs):\n        self.info('PASS: ' + msg, *args, **kwargs)\n\n    def failed(self, msg, *args, **kwargs):\n        if self.isEnabledFor(logging.DEBUG):\n            if len(getLastFoundImages()) != 0:\n                self.html_img(\"Source Image\",  'images/' + getLastFoundImage())\n            self.screenshot()\n        raise common.VerificationFailed(msg)\n\n    def html(self, msg, *args, **kwargs):\n        self.log(HTML, msg, *args, **kwargs)\n\n    def html_img(self, msg, image):\n        self.html('%s <img src=\"img/%s\" />' % (msg, image))\n…\n```"]