["```py\nGET http://localhost:5000/api/categories/ \n\n```", "```py\npip install Flask-SQLAlchemy\n\n```", "```py\nInstalling collected packages: SQLAlchemy, Flask-SQLAlchemy\n Running setup.py install for SQLAlchemy\n Running setup.py install for Flask-SQLAlchemy\nSuccessfully installed Flask-SQLAlchemy-2.1 SQLAlchemy-1.0.14\n\n```", "```py\npip install Flask-Migrate\n\n```", "```py\nInstalling collected packages: Mako, python-editor, alembic, Flask-Script, Flask-Migrate\n Running setup.py install for Mako\n Running setup.py install for python-editor\n Running setup.py install for alembic\n Running setup.py install for Flask-Script\n Running setup.py install for Flask-Migrate\nSuccessfully installed Flask-Migrate-2.0.0 Flask-Script-2.0.5 Mako-1.0.4 alembic-0.8.7 python-editor-1.0.1\n\n```", "```py\npip install marshmallow\n\n```", "```py\nInstalling collected packages: marshmallow\nSuccessfully installed marshmallow-2.9.1\n\n```", "```py\npip install marshmallow-sqlalchemy\n\n```", "```py\nInstalling collected packages: marshmallow-sqlalchemy\nSuccessfully installed marshmallow-sqlalchemy-0.10.0\n\n```", "```py\npip install Flask-Marshmallow\n\n```", "```py\nInstalling collected packages: Flask-Marshmallow\nSuccessfully installed Flask-Marshmallow-0.7.0\n\n```", "```py\ncreatedb messages\n\n```", "```py\nsudo -u postgres createdb messages\n\n```", "```py\npsql\n\n```", "```py\nsudo -u psql\n\n```", "```py\nCREATE ROLE user_name WITH LOGIN PASSWORD 'password';\nGRANT ALL PRIVILEGES ON DATABASE messages TO user_name;\nALTER USER user_name CREATEDB;\n\\q\n\n```", "```py\npip install psycopg2\n\n```", "```py\nCollecting psycopg2\nInstalling collected packages: psycopg2\n Running setup.py install for psycopg2\nSuccessfully installed psycopg2-2.6.2\n\n```", "```py\nimport os \n\nbasedir = os.path.abspath(os.path.dirname(__file__)) \nDEBUG = True \nPORT = 5000 \nHOST = \"127.0.0.1\" \nSQLALCHEMY_ECHO = False \nSQLALCHEMY_TRACK_MODIFICATIONS = True \nSQLALCHEMY_DATABASE_URI = \"postgresql://{DB_USER}:{DB_PASS}@{DB_ADDR}/{DB_NAME}\".format(DB_USER=\"user_name\", DB_PASS=\"password\", DB_ADDR=\"127.0.0.1\", DB_NAME=\"messages\") \nSQLALCHEMY_MIGRATE_REPO = os.path.join(basedir, 'db_repository') \n\n```", "```py\nfrom marshmallow import Schema, fields, pre_load \nfrom marshmallow import validate \nfrom flask_sqlalchemy import SQLAlchemy \nfrom flask_marshmallow import Marshmallow \n\ndb = SQLAlchemy() \nma = Marshmallow() \n\nclass AddUpdateDelete():    \n    def add(self, resource): \n        db.session.add(resource) \n        return db.session.commit() \n\n    def update(self): \n        return db.session.commit() \n\n    def delete(self, resource): \n        db.session.delete(resource) \n        return db.session.commit() \n\nclass Message(db.Model, AddUpdateDelete): \n    id = db.Column(db.Integer, primary_key=True) \n    message = db.Column(db.String(250), unique=True, nullable=False) \n    duration = db.Column(db.Integer, nullable=False) \n    creation_date = db.Column(db.TIMESTAMP, server_default=db.func.current_timestamp(), nullable=False) \n    category_id = db.Column(db.Integer, db.ForeignKey('category.id', ondelete='CASCADE'), nullable=False) \n    category = db.relationship('Category', backref=db.backref('messages', lazy='dynamic' , order_by='Message.message')) \n    printed_times = db.Column(db.Integer, nullable=False, server_default='0') \n    printed_once = db.Column(db.Boolean, nullable=False, server_default='false') \n\n    def __init__(self, message, duration, category): \n        self.message = message \n        self.duration = duration \n        self.category = category \n\nclass Category(db.Model, AddUpdateDelete): \n    id = db.Column(db.Integer, primary_key=True) \n    name = db.Column(db.String(150), unique=True, nullable=False) \n\n    def __init__(self, name): \n        self.name = name \n\n```", "```py\ncategory = db.relationship('Category', backref=db.backref('messages', lazy='dynamic', order_by='Message.message')) \n\n```", "```py\nclass CategorySchema(ma.Schema): \n    id = fields.Integer(dump_only=True) \n    name = fields.String(required=True, validate=validate.Length(3)) \n    url = ma.URLFor('api.categoryresource', id='<id>', _external=True) \n    messages = fields.Nested('MessageSchema', many=True, exclude=('category',)) \n\n class MessageSchema(ma.Schema): \n    id = fields.Integer(dump_only=True) \n    message = fields.String(required=True, validate=validate.Length(1)) \n    duration = fields.Integer() \n    creation_date = fields.DateTime() \n    category = fields.Nested(CategorySchema, only=['id', 'url', 'name'], required=True) \n    printed_times = fields.Integer() \n    printed_once = fields.Boolean() \n    url = ma.URLFor('api.messageresource', id='<id>', _external=True) \n\n    @pre_load \n    def process_category(self, data): \n        category = data.get('category') \n        if category: \n            if isinstance(category, dict): \n                category_name = category.get('name') \n            else: \n                category_name = category \n            category_dict = dict(name=category_name)                 \n        else: \n            category_dict = {} \n        data['category'] = category_dict \n        return data \n\n```", "```py\nurl = ma.URLFor('api.categoryresource', id='<id>', _external=True) \n\n```", "```py\nmessages = fields.Nested('MessageSchema', many=True, exclude=('category',)0029 \n\n```", "```py\ncategory = fields.Nested(CategorySchema, only=['id', 'url', 'name'], required=True) \n\n```", "```py\nurl = ma.URLFor('api.messageresource', id='<id>', _external=True) \n\n```", "```py\nfrom flask import Blueprint, request, jsonify, make_response \nfrom flask_restful import Api, Resource \nfrom models import db, Category, CategorySchema, Message, MessageSchema \nfrom sqlalchemy.exc import SQLAlchemyError \nimport status \n\napi_bp = Blueprint('api', __name__) \ncategory_schema = CategorySchema() \nmessage_schema = MessageSchema() \napi = Api(api_bp) \n\nclass MessageResource(Resource): \n def get(self, id): \n        message = Message.query.get_or_404(id) \n        result = message_schema.dump(message).data \n        return result \n\n    def patch(self, id): \n        message = Message.query.get_or_404(id) \n        message_dict = request.get_json(force=True) \n        if 'message' in message_dict: \n            message.message = message_dict['message'] \n        if 'duration' in message_dict: \n            message.duration = message_dict['duration'] \n        if 'printed_times' in message_dict: \n            message.printed_times = message_dict['printed_times'] \n        if 'printed_once' in message_dict: \n            message.printed_once = message_dict['printed_once'] \n        dumped_message, dump_errors = message_schema.dump(message) \n        if dump_errors: \n            return dump_errors, status.HTTP_400_BAD_REQUEST \n        validate_errors = message_schema.validate(dumped_message) \n        #errors = message_schema.validate(data) \n        if validate_errors: \n            return validate_errors, status.HTTP_400_BAD_REQUEST \n        try: \n            message.update() \n            return self.get(id) \n        except SQLAlchemyError as e: \n                db.session.rollback() \n                resp = jsonify({\"error\": str(e)}) \n                return resp, status.HTTP_400_BAD_REQUEST \n\n    def delete(self, id): \n        message = Message.query.get_or_404(id) \n        try: \n            delete = message.delete(message) \n            response = make_response() \n            return response, status.HTTP_204_NO_CONTENT \n        except SQLAlchemyError as e: \n                db.session.rollback() \n                resp = jsonify({\"error\": str(e)}) \n                return resp, status.HTTP_401_UNAUTHORIZED \n\n```", "```py\nclass MessageListResource(Resource): \n    def get(self): \n        messages = Message.query.all() \n        result = message_schema.dump(messages, many=True).data \n        return result \n\n    def post(self): \n        request_dict = request.get_json() \n        if not request_dict: \n            response = {'message': 'No input data provided'} \n            return response, status.HTTP_400_BAD_REQUEST \n        errors = message_schema.validate(request_dict) \n        if errors: \n            return errors, status.HTTP_400_BAD_REQUEST \n        try: \n            category_name = request_dict['category']['name'] \n            category = Category.query.filter_by(name=category_name).first() \n            if category is None: \n                # Create a new Category \n                category = Category(name=category_name) \n                db.session.add(category) \n            # Now that we are sure we have a category \n            # create a new Message \n            message = Message( \n                message=request_dict['message'], \n                duration=request_dict['duration'], \n                category=category) \n            message.add(message) \n            query = Message.query.get(message.id) \n            result = message_schema.dump(query).data \n            return result, status.HTTP_201_CREATED \n        except SQLAlchemyError as e: \n            db.session.rollback() \n            resp = jsonify({\"error\": str(e)}) \n            return resp, status.HTTP_400_BAD_REQUEST \n\n```", "```py\nclass CategoryResource(Resource): \n    def get(self, id): \n        category = Category.query.get_or_404(id) \n        result = category_schema.dump(category).data \n        return result \n\n    def patch(self, id): \n        category = Category.query.get_or_404(id) \n        category_dict = request.get_json() \n        if not category_dict: \n            resp = {'message': 'No input data provided'} \n            return resp, status.HTTP_400_BAD_REQUEST \n        errors = category_schema.validate(category_dict) \n        if errors: \n            return errors, status.HTTP_400_BAD_REQUEST \n        try: \n            if 'name' in category_dict: \n                category.name = category_dict['name'] \n            category.update() \n            return self.get(id) \n        except SQLAlchemyError as e: \n                db.session.rollback() \n                resp = jsonify({\"error\": str(e)}) \n                return resp, status.HTTP_400_BAD_REQUEST \n\n    def delete(self, id): \n        category = Category.query.get_or_404(id) \n        try: \n            category.delete(category) \n            response = make_response() \n            return response, status.HTTP_204_NO_CONTENT \n        except SQLAlchemyError as e: \n                db.session.rollback() \n                resp = jsonify({\"error\": str(e)}) \n                return resp, status.HTTP_401_UNAUTHORIZED \n\n```", "```py\nclass CategoryListResource(Resource): \n    def get(self): \n        categories = Category.query.all() \n        results = category_schema.dump(categories, many=True).data \n        return results \n\n    def post(self): \n        request_dict = request.get_json() \n        if not request_dict: \n            resp = {'message': 'No input data provided'} \n            return resp, status.HTTP_400_BAD_REQUEST \n        errors = category_schema.validate(request_dict) \n        if errors: \n            return errors, status.HTTP_400_BAD_REQUEST \n        try: \n            category = Category(request_dict['name']) \n            category.add(category) \n            query = Category.query.get(category.id) \n            result = category_schema.dump(query).data \n            return result, status.HTTP_201_CREATED \n        except SQLAlchemyError as e: \n            db.session.rollback() \n            resp = jsonify({\"error\": str(e)}) \n            return resp, status.HTTP_400_BAD_REQUEST \n\n```", "```py\napi.add_resource(CategoryListResource, '/categories/') \napi.add_resource(CategoryResource, '/categories/<int:id>') \napi.add_resource(MessageListResource, '/messages/') \napi.add_resource(MessageResource, '/messages/<int:id>') \n\n```", "```py\nfrom flask import Flask \n\ndef create_app(config_filename): \n    app = Flask(__name__) \n    app.config.from_object(config_filename) \n\n    from models import db \n    db.init_app(app) \n\n    from views import api_bp \n    app.register_blueprint(api_bp, url_prefix='/api') \n\n    return app \n\n```", "```py\nfrom app import create_app \n\napp = create_app('config') \n\nif __name__ == '__main__': \n    app.run(host=app.config['HOST'], \n            port=app.config['PORT'], \n            debug=app.config['DEBUG']) \n\n```", "```py\nfrom flask_script import Manager \nfrom flask_migrate import Migrate, MigrateCommand \nfrom models import db \nfrom run import app \n\nmigrate = Migrate(app, db) \nmanager = Manager(app) \nmanager.add_command('db', MigrateCommand) \n\nif __name__ == '__main__': \n    manager.run() \n\n```", "```py\npython migrate.py db init\n\n```", "```py\nCreating directory /Users/gaston/PythonREST/Flask02/api/migrations ... done\nCreating directory /Users/gaston/PythonREST/Flask02/api/migrations/versions ... done\nGenerating /Users/gaston/PythonREST/Flask02/api/migrations/alembic.ini ... done\nGenerating /Users/gaston/PythonREST/Flask02/api/migrations/env.py ... done\nGenerating /Users/gaston/PythonREST/Flask02/api/migrations/README ... done\nGenerating /Users/gaston/PythonREST/Flask02/api/migrations/script.py.mako ... done\nPlease edit configuration/connection/logging settings in\n'/Users/gaston/PythonREST/Flask02/api/migrations/alembic.ini' before proceeding.\n\n```", "```py\npython migrate.py db migrate\n\n```", "```py\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.autogenerate.compare] Detected added table 'category'\nINFO  [alembic.autogenerate.compare] Detected added table 'message'\n Generating /Users/gaston/PythonREST/Flask02/api/migrations/versions/417543056ac3_.py ... done\n\n```", "```py\n\"\"\"empty message \n\nRevision ID: 417543056ac3 \nRevises: None \nCreate Date: 2016-08-08 01:05:31.134631 \n\n\"\"\" \n\n# revision identifiers, used by Alembic. \nrevision = '417543056ac3' \ndown_revision = None \n\nfrom alembic import op \nimport sqlalchemy as sa \n\ndef upgrade(): \n    ### commands auto generated by Alembic - please adjust! ### \n    op.create_table('category', \n    sa.Column('id', sa.Integer(), nullable=False), \n    sa.Column('name', sa.String(length=150), nullable=False), \n    sa.PrimaryKeyConstraint('id'), \n    sa.UniqueConstraint('name') \n    ) \n    op.create_table('message', \n    sa.Column('id', sa.Integer(), nullable=False), \n    sa.Column('message', sa.String(length=250), nullable=False), \n    sa.Column('duration', sa.Integer(), nullable=False), \n    sa.Column('creation_date', sa.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), nullable=False), \n    sa.Column('category_id', sa.Integer(), nullable=False), \n    sa.Column('printed_times', sa.Integer(), server_default='0', nullable=False), \n    sa.Column('printed_once', sa.Boolean(), server_default='false', nullable=False), \n    sa.ForeignKeyConstraint(['category_id'], ['category.id'], ondelete='CASCADE'), \n    sa.PrimaryKeyConstraint('id'), \n    sa.UniqueConstraint('message') \n    ) \n    ### end Alembic commands ### \n\ndef downgrade(): \n    ### commands auto generated by Alembic - please adjust! ### \n    op.drop_table('message') \n    op.drop_table('category') \n    ### end Alembic commands ### \n\n```", "```py\npython migrate.py db upgrade\n\n```", "```py\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.runtime.migration] Running upgrade  -> 417543056ac3, empty message\n\n```", "```py\npsql --username=user_name --dbname=messages --command=\"\\dt\"\n\n```", "```py\n List of relations\n Schema |      Name       | Type  |   Owner \n--------+-----------------+-------+-----------\n public | alembic_version | table | user_name\n public | category        | table | user_name\n public | message         | table | user_name\n(3 rows)\n\n```", "```py\npsql --username=user_name --dbname=messages --command=\"SELECT * FROM category;\"\npsql --username=user_name --dbname=messages --command=\"SELECT * FROM message;\"\n\n```", "```py\npython run.py\n\n```", "```py\n * Running on http://127.0.0.1:5000/ (Press CTRL+C to quit)\n * Restarting with stat\n * Debugger is active!\n * Debugger pin code: 198-040-402\n\n```", "```py\nhttp POST :5000/api/categories/ name='Information'\nhttp POST :5000/api/categories/ name='Warning'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Information\"}' :5000/api/categories/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Warning\"}' :5000/api/categories/\n\n```", "```py\nHTTP/1.0 201 CREATED\nContent-Length: 116\nContent-Type: application/json\nDate: Mon, 08 Aug 2016 05:26:58 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"id\": 1, \n \"messages\": [], \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n}\nHTTP/1.0 201 CREATED\nContent-Length: 112\nContent-Type: application/json\nDate: Mon, 08 Aug 2016 05:27:05 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"id\": 2, \n \"messages\": [], \n \"name\": \"Warning\", \n \"url\": \"http://localhost:5000/api/categories/2\"\n}\n\n```", "```py\nhttp POST :5000/api/messages/ message='Checking temperature sensor' duration=5 category=\"Information\"\nhttp POST :5000/api/messages/ message='Checking light sensor' duration=8 category=\"Information\"\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\" Checking temperature sensor\", \"category\":\"Information\"}' :5000/api/messages/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\" Checking light sensor\", \"category\":\"Information\"}' :5000/api/messages/\n\n```", "```py\n{  \n    \"message\": \"Checking temperature sensor\",  \n    \"category\": \"Information\" \n} \n\n```", "```py\n{  \n    \"message\": \"Checking light sensor\",  \n    \"category\": \"Information\" \n} \n\n```", "```py\nHTTP/1.0 201 CREATED\nContent-Length: 369\nContent-Type: application/json\nDate: Mon, 08 Aug 2016 15:18:43 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-08T12:18:43.260474+00:00\", \n \"duration\": 5, \n \"id\": 1, \n \"message\": \"Checking temperature sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/1\"\n}\nHTTP/1.0 201 CREATED\nContent-Length: 363\nContent-Type: application/json\nDate: Mon, 08 Aug 2016 15:27:30 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-08T12:27:30.124511+00:00\", \n \"duration\": 8, \n \"id\": 2, \n \"message\": \"Checking light sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/2\"\n}\n\n```", "```py\nhttp :5000/api/categories/1\n\n```", "```py\ncurl -iX GET :5000/api/categories/1\n\n```", "```py\nHTTP/1.0 200 OK\nContent-Length: 1078\nContent-Type: application/json\nDate: Mon, 08 Aug 2016 16:09:10 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"id\": 1, \n \"messages\": [\n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-08T12:27:30.124511+00:00\", \n \"duration\": 8, \n \"id\": 2, \n \"message\": \"Checking light sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/2\"\n }, \n {\n \"category\": {\n \"id\": 1, \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n }, \n \"creation_date\": \"2016-08-08T12:18:43.260474+00:00\", \n \"duration\": 5, \n \"id\": 1, \n \"message\": \"Checking temperature sensor\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/1\"\n }\n ], \n \"name\": \"Information\", \n \"url\": \"http://localhost:5000/api/categories/1\"\n}\n\n```", "```py\nhttp POST :5000/api/messages/ message='Temperature sensor error' duration=10 category=\"Error\"\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"message\":\" Temperature sensor error\", \"category\":\"Error\"}' :5000/api/messages/\n\n```", "```py\nHTTP/1.0 201 CREATED\nContent-Length: 361\nContent-Type: application/json\nDate: Mon, 08 Aug 2016 17:20:22 GMT\nServer: Werkzeug/0.11.10 Python/3.5.1\n{\n \"category\": {\n \"id\": 3, \n \"name\": \"Error\", \n \"url\": \"http://localhost:5000/api/categories/3\"\n }, \n \"creation_date\": \"2016-08-08T14:20:22.103752+00:00\", \n \"duration\": 10, \n \"id\": 3, \n \"message\": \"Temperature sensor error\", \n \"printed_once\": false, \n \"printed_times\": 0, \n \"url\": \"http://localhost:5000/api/messages/3\"\n}\n\n```"]