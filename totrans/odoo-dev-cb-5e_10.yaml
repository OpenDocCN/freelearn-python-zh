- en: '10'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Security Access
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo is typically used by multi-user organizations. Each user has a distinct
    position in every organization, and they have varying access based on their function.
    The HR manager, for example, does not have access to the company’s accounting
    information. You may determine which information a user can access in Odoo using
    access rights and record rules. We will learn how to set access rights rules and
    record rules in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Such compartmentalization of access and security requires that we provide access
    to roles based on their permission levels. We will learn about this in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating security groups and assigning them to users
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding security access to models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Limiting access to fields in models
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using record rules to restrict record access
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Activating features with security groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing recordsets as a superuser
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Hiding view elements and menus based on groups
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To concisely get the point across, the recipes in this chapter make small additions
    to an example existing module.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirements for this chapter include using the module that we
    created by following the tutorials in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*. To follow the examples here, you should have that
    module created and ready to use.
  prefs: []
  type: TYPE_NORMAL
- en: All the code that will be used in this chapter can be downloaded from this book’s
    GitHub repository at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter10).
  prefs: []
  type: TYPE_NORMAL
- en: Creating security groups and assigning them to users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Security access in Odoo is configured through security groups: permissions
    are given to groups and then groups are assigned to users. Each functional area
    has base security groups provided by a central application.'
  prefs: []
  type: TYPE_NORMAL
- en: When add-on modules augment an existing application, they should add rights
    to the respective groups, as explained in the *Adding security access to* *models*
    recipe.
  prefs: []
  type: TYPE_NORMAL
- en: When add-on modules introduce a new functional area that is not yet covered
    by an existing core application, the associated security groups should be added.
    We should usually have at least user and management roles.
  prefs: []
  type: TYPE_NORMAL
- en: Take the Hostel example we introduced in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*, as an example – it doesn’t fit neatly into any
    of the Odoo core apps, so we will add security groups for it.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tutorial assumes that you have an Odoo instance ready with `my_hostel`
    available, as described in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating
    Odoo* *Add-On Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add new access security groups to a module, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the `__manifest__.py` add-on module manifest has the `category`
    key defined:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new `security/groups.xml` file to the manifest `data` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the new XML file for the data records to the `security/groups.xml` file,
    starting with an empty structure:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `<record>` tags for the two new groups inside the data XML element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If we upgrade the add-on module, these two records will be loaded. To see these
    groups in the UI, you need to activate developer mode. You’ll then be able to
    see them through the **Settings** | **Users** | **Groups** menu option, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.1 – Newly added security groups](img/B20997_10_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.1 – Newly added security groups
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: When you add a new model, the admin user does not have access to that model.
    This implies that the admin user cannot see the menus and views that have been
    added for that model. To show it, you must first add access rules to that model,
    something we will accomplish in the Adding security access to models recipe. Note
    that you may access newly added models as a superuser; for more information, see
    the *Accessing Odoo as a superuser* recipe in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo* *Add-On Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Add-on modules are organized into functional areas, or major *applications*,
    such as *accounting and finance*, *sales*, or *human resources*. These are defined
    by the `category` key in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: If a category name does not exist yet, it will be automatically created. For
    convenience, a `base.module_category_<category_name_in_manifest>` XML ID will
    also be generated for the new category name in lowercase letters, replacing the
    spaces with underscores. This is useful for relating security groups to application
    categories.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we used the `base.module_category_hostel` XML identifier.
  prefs: []
  type: TYPE_NORMAL
- en: By convention, data files that contain security-related elements should be placed
    inside a `security` subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: A manifest file must also be used to register security files. The sequence in
    which files are specified in the module manifest’s **data** key is critical since
    you cannot utilize a reference to a security group in other views or **ACL** files
    until the group has been created. It’s advisable to put the security data file
    first, followed by the ACL files and other user interface data files.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our example, we created groups with the `<record>` tag, which will create
    a record of the `res.groups` model. The most important columns of the *res.group*
    model are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: This is the group’s display name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`category_id`: This is a reference to the application category and is used
    to organize the groups in the user’s form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`implied_ids`: These are other groups to inherit permissions from.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`users`: This is the list of users that belong to this group. In new add-on
    modules, we usually want the admin user to belong to the application’s manager
    group.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first security group uses `implied_ids` as the `base.group_user` group.
    This is the `Employee` user group and is the basic security group all the backend
    users are expected to share.
  prefs: []
  type: TYPE_NORMAL
- en: The second security group sets a value on the `users` field to assign it to
    the administrator user, which has the `base.user_admin` XML ID.
  prefs: []
  type: TYPE_NORMAL
- en: Users that belong to a security group will automatically belong to its implied
    groups. For example, if you assign a *Hostel Manager* group to any user, that
    user will also be included in the *User* group. This is because the *Hostel Manager*
    group has the *User* group in its `implied_ids` column.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, security groups’ access rights are cumulative. A user has permission
    if any of the groups to which they belong (directly or indirectly) grant it to
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Some security groups are displayed as a selection box in the user form rather
    than distinct tick boxes. This occurs when the groups involved are in the same
    application category and are linearly interconnected by `implied_ids`. Group A,
    for example, implies Group B, while Group B implies Group C. If a group is not
    associated with any other groups via `implied_ids`, a checkbox will appear instead
    of a selection box.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that the relationships that were defined in the preceding fields also have
    reverse relationships that can be edited in the related models, such as security
    groups and users.
  prefs: []
  type: TYPE_NORMAL
- en: Setting values on reference fields, such as `category_id` and `implied_ids`,
    can be done using the related records’ XML IDs and some special syntax. This syntax
    was explained in detail in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing*
    *Module Data*.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The special `base.group_no_one` security group called `Technical Features` flag
    was activated. From version 9.0, this has changed, and the features are visible
    so long as `Developer Mode` is active.
  prefs: []
  type: TYPE_NORMAL
- en: Security groups only provide cumulative access rights. There is no method to
    deny a group’s access. This implies that a manually established group used to
    customize rights should inherit from the nearest group with fewer permissions
    than intended (if any), and then add all remaining permissions required.
  prefs: []
  type: TYPE_NORMAL
- en: 'Groups also have these additional fields available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`menu_access` **field)**: These are the menu items the group has access to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`view_access` **field)**: These are the UI views the group has access to'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_access` **field)**: This is the access it has to models, as detailed
    in the *Adding security access to* *models* recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rule_groups` **field)**: These are the record-level access rules that apply
    to the group, as detailed in the *Limiting record access using record* *rules*
    recipe'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`comment` **field)**: This is a description or commented piece of text for
    the group'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With that, we’ve learned how to build security groups and assign them via the
    GUI. We will utilize these groups to establish an access control list and record
    rules in the next few recipes.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn how to access newly added models through the *superuser*, please refer
    to the *Accessing Odoo as a superuser* recipe in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo* *Add-On Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: Adding security access to models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: It’s common for add-on modules to add new models. For example, in [*Chapter
    3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo Add-On Modules*, we added
    a new Hostel model. It is easy to miss out on creating security access for new
    models during development, and you might find it hard to see menus and views that
    have been created. This is because, from *Odoo version 12*, admin users don’t
    get default access rights to new models. To see the views and menus for the new
    model, you need to add security **ACLs**.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, models with no ACLs will trigger a warning log message upon loading,
    informing the user about the missing ACL definitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: You may also access freshly uploaded models as a superuser, which circumvents
    all security requirements. For further information, see the *Accessing Odoo as
    a superuser* recipe in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating
    Odoo Add-On Modules*. Administrators have access to the superuser functionality.
    So, for new models to be useable by non-admin users, we must establish their access
    control lists so that Odoo understands how to access them and what activities
    each user group is permitted to conduct.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue using the `my_hostel` module from the previous tutorial and
    add the missing ACLs to it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`my_hostel` should already contain the `models/hostel.py` Python file that
    creates the `hostel.hostel` model. We will now add a data file that describes
    this model’s security access control by performing the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `__manifest__.py` file to declare a new data file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new `security/ir.model.access.csv` file to the module with the following
    lines:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We should then upgrade the module so that these ACL records are added to our
    Odoo database. More importantly, if we sign into a demonstration database using
    the `demo` user, we should be able to access the **My Hostel** menu option without
    receiving any security errors.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Security ACLs are stored in the core `ir.model.access` model. We just need to
    add the records that describe the intended access rights for each user group.
  prefs: []
  type: TYPE_NORMAL
- en: Any sort of data file will do, although the most popular is a CSV file. The
    file can be placed anywhere inside the add-on module directory; however, it is
    common to keep all **security**-related files under a security subfolder.
  prefs: []
  type: TYPE_NORMAL
- en: This new data file is added to the manifest in the first phase of our tutorial.
    The next step is to include the files that explain the security access control
    rules. The CSV file must be named after the model into which the entries will
    be imported, so the name we’ve chosen isn’t simply a convention; it’s required.
    For further information, see [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319),
    *Managing* *Module Data*.
  prefs: []
  type: TYPE_NORMAL
- en: If the module also creates new security groups, its data file should be declared
    in the manifest before the ACLs’ data files, since you may want to use them for
    the ACLs. They must already be created when the ACL file is processed.
  prefs: []
  type: TYPE_NORMAL
- en: 'The columns in the CSV file are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`id`: This is the internal XML ID identification for this rule. Any unique
    name inside the module is acceptable, but the best practice is to use `access_<model>_<group>`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name`: This is a title for the access rule. It is a common practice to use
    an `access.``     <``model>.<group>` name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_id:id`: This is the XML ID for the model. Odoo automatically assigns
    this kind of ID to models with a `model_<name>` format, using the model’s `_name`
    with underscores instead of dots. If the model was created in a different add-on
    module, a fully qualified XML ID that includes the module name is needed.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_id:id`: This is the XML ID for the user group. If left empty, it applies
    to all users. The base module provides some basic groups, such as `base.group_user`
    for all employees and `base.group_system` for the administration user. Other apps
    can add their own user groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`perm_read`: Members of the preceding group can read the model’s records. It
    accepts two values: `0` or `1`. Use `0` to restrict read access on the model and
    `1` to provide read access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`perm_write`: Members of the preceding group can update the model’s records.
    It accepts two values: `0` or `1`. Use `0` to restrict write access on the model
    and `1` to provide write access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`perm_create`: Members of the preceding group can add new records of this model.
    It accepts two values: `0` or `1`. Use `0` to restrict create access on the model
    and `1` to provide create access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`perm_unlink`: Members of the preceding group can delete records of this model.
    It accepts two values: `0` or `1`. Use `0` to restrict unlink access on the model
    and `1` to provide unlink access.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CSV file we used adds read-only access to the **Employees** | **Employee**
    standard security group and full write access to the **Administration** | **Settings**
    group.
  prefs: []
  type: TYPE_NORMAL
- en: The `base.group_user`, is particularly important because the user groups that
    are added by the Odoo standard apps inherit from it. This means that if we need
    a new model to be accessible by all the backend users, regardless of the specific
    apps they work with, we should add that permission to the **Employee** group.
  prefs: []
  type: TYPE_NORMAL
- en: The `base.group_user`, is particularly essential since it is inherited by the
    user groups introduced by the Odoo standard applications. This implies that if
    we want a new model to be accessible to all backend users, independent of the
    applications they use, we need to add it to the **Employee** group.
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting ACLs can be viewed from the GUI in debug mode by navigating to
    **Settings** | **Technical** | **Security** | **Access Controls List**, as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.2 – ACL list view](img/B20997_10_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.2 – ACL list view
  prefs: []
  type: TYPE_NORMAL
- en: Some people find it easier to use this user interface to define ACLs and then
    use the **Export** feature to produce a CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It seems reasonable to provide this access to the Hostel user and the Hostel
    Manager groups specified in the *Creating security groups and assigning them to
    users* recipe. If you went through that lesson, it’s a nice exercise to go through
    this one while changing the group identities to Hostel ones.
  prefs: []
  type: TYPE_NORMAL
- en: It is crucial to remember that access lists given by add-on modules should not
    be directly customized because they will be reloaded on the next module update,
    erasing any modification done from the GUI.
  prefs: []
  type: TYPE_NORMAL
- en: There are two methods for customizing ACLs. One option is to build new security
    groups that inherit from the modules and add extra rights to them, but this only
    enables us to add permissions and not remove them. A more adaptable way would
    be to uncheck the `<field name="active" />` column. We may also create new ACL
    lines to add or alter permissions. The deactivated ACLs will not be revived after
    a module update, and the newly inserted ACL lines will not be impacted.
  prefs: []
  type: TYPE_NORMAL
- en: It’s also worth mentioning that ACLs only apply to conventional models and aren’t
    required for abstract or transient models. If these are defined, they will be
    ignored, and a warning message will be logged in the server log.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can also access newly added models through a superuser since this bypasses
    all security rules. To learn more about this, please refer to the *Accessing Odoo
    as a superuser* recipe in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating
    Odoo* *Add-On Modules*.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting access to fields in models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In other circumstances, we may want additional fine-grained access control,
    as well as the ability to restrict access to individual fields in a model.
  prefs: []
  type: TYPE_NORMAL
- en: Using the `groups` property, it is possible to restrict access to a field to
    certain security **groups**. This recipe will demonstrate how to add a field with
    restricted access to the Hostels model.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue using the `my_hostel` module from the previous tutorial.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a field with access that’s limited to specific security groups, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the model file to add the field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the view in the XML file to add the field:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: That’s it. Now, upgrade the add-on module for the changes in the model to take
    place. If you sign in with a user with no system configuration access, such as
    `demo` in a database with demonstration data, the Hostel form won’t display the
    field.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Fields containing the `groups` property are processed differently to determine
    whether the user belongs to any of the security groups specified in the attribute.
    If a user is not a member of a certain group, Odoo will remove the field from
    the UI and limit ORM operations on that field.
  prefs: []
  type: TYPE_NORMAL
- en: Note that this security is not superficial. The field is not only hidden in
    the UI but is also made unavailable to the user in the other ORM operations, such
    as `read` and `write`. This is also true for *XML-RPC* or *JSON-RPC* calls.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful when using these fields in business logic or on-change UI events
    (`@api.onchange` methods); they can raise errors for users with no access to the
    field. One workaround for this is to use privilege elevation, such as the `sudo()`
    model method or the `compute_sudo` field attribute for computed fields.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `groups` value is a string that contains a comma-separated list of valid
    XML IDs for security groups. The simplest way to find the XML ID for a particular
    group is to activate developer mode and navigate to the group’s form, at **Settings**
    | **Users** | **Groups**, and then access the **View Metadata** option from the
    debug menu, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.3 – Menu for viewing a group’s XML ID](img/Image96854.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.3 – Menu for viewing a group’s XML ID
  prefs: []
  type: TYPE_NORMAL
- en: You may also view a security group’s XML ID through code by utilizing the `<record>`
    tag that formed the group. However, looking at the information, as shown in the
    preceding screenshot, is the most simple approach to figuring out a group’s XML
    ID.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In some circumstances, we want a field to be available or unavailable based
    on specific requirements, such as the values in a field, such as `stage_id` or
    `state`. Typically, this is handled at the view level by utilizing characteristics
    such as states or attributes to dynamically display or hide the field based on
    particular criteria. For a more complete explanation, see [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*.
  prefs: []
  type: TYPE_NORMAL
- en: Note that these techniques work at the user interface level only and don’t provide
    actual access security. To do this, you should add checks to the business logic
    layer. Either add model methods decorated with `@constrains`, implementing the
    specific validations intended, or extend the `create`, `write`, or `unlink` methods
    to add validation logic. You can get further insights into how to do this by going
    back to [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238), *Basic* *Server-Side
    Development*.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please see [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*,
    for further information on how to hide and reveal a field using criteria.
  prefs: []
  type: TYPE_NORMAL
- en: For further insights into the business logic layer, please refer to [*Chapter
    5*](B20997_05.xhtml#_idTextAnchor238), *Basic* *Server-Side Development*.
  prefs: []
  type: TYPE_NORMAL
- en: Limiting record access using record rules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A basic requirement for every application is the ability to restrict which records
    are exposed to each user on a certain model.
  prefs: []
  type: TYPE_NORMAL
- en: This is accomplished through the use of **record rules**. A record rule is a
    domain filter expression specified on a model that is subsequently applied to
    each data query performed by the impacted users.
  prefs: []
  type: TYPE_NORMAL
- en: As an example, we will add a record rule to the *Hostel* model so that users
    in the `Employee` group will only have access to the public hostel.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will continue using the `my_hostel` module from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Record rules can be added using a data XML file. To do this, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ensure that the `security/security_rules.xml` file is referenced by the manifest
    `data` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We should have a `security/security_rules.xml` data file with a `<odoo>` section
    that creates the security group:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 10.4 –  Record rule for the hostel user](img/B20997_10_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.4 – Record rule for the hostel user
  prefs: []
  type: TYPE_NORMAL
- en: Upgrading the add-on module will load the record rules inside the Odoo instance.
    If you are using demo data, you can test it through the default `demo` user to
    give hostel user rights to the demo user. If you are not using demo data, you
    can create a new user with hostel user rights.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Record rules are just data records that are placed in the `ir.rule` core model.
    While the file containing them can be located anywhere in the module, the `security`
    subfolder is the preferred location. A single XML file including both security
    groups and record rules is usual.
  prefs: []
  type: TYPE_NORMAL
- en: In contrast to groups, record rules in standard modules are imported into an
    `odoo` section with the `noupdate="1"` property. Because certain records will
    not be reloaded after a module update, manually customizing them is safe and will
    survive further upgrades.
  prefs: []
  type: TYPE_NORMAL
- en: To be consistent with the standard modules, our record rules should also be
    contained within an `<odoo` `noupdate="1">` section.
  prefs: []
  type: TYPE_NORMAL
- en: 'Record rules can be seen from the GUI via the **Settings**| **Technical** |
    **Security** | **Record Rules** menu option, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.5 – ACLs for the Hostel model](img/B20997_10_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.5 – ACLs for the Hostel model
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the most important record rule fields that were used in this
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`): A descriptive title for the rule.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_id`): A reference to the model to which the rule applies.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`groups`): The security groups affected by the rule. If no security group is
    mentioned, the rule is deemed global and is enforced differently (keep reading
    to understand more about these groups).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`domain`): A domain expression that is used to filter the records. The rule
    is only going to apply to these filtered records.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The first record rule we created was for the `Hostel User` security group. It
    uses the `[('is_public', '=', True)]` domain expression to select only the hostel
    that is available publicly. Thus, users with the `Hostel User` security group
    will only be able to see public hostels.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: '*The domain expressions used in the record rules are executed on the server
    using ORM objects. As a result, dot notation may be used on the fields on the
    left (the first tuple member). The* `[(''country_id.code'', ''='', ''IN'')]` *domain
    expression, for example, will only return entries containing the country* *of
    India.*'
  prefs: []
  type: TYPE_NORMAL
- en: Since record rules are mostly based on the current user, you can use the `user`
    recordset on the right-hand side (the third tuple element) of the domain. So,
    if you want to show the records for the company of the current user, you can use
    the `[('conpany_id', '=', user.company_id.id)]` domain. Alternatively, if you
    want to show the records that are created by the current user, you can use the
    `[('user_id', '=',` `user.id)]` domain.
  prefs: []
  type: TYPE_NORMAL
- en: We want the `Hostel Manager` security group to have access to all hostels, regardless
    of whether they are public or private. Because it is a descendant of the `Hostel
    User` group, it will be able to see only public hostels until we intervene.
  prefs: []
  type: TYPE_NORMAL
- en: 'The non-global record rules are joined using the `OR` logical operator; each
    rule adds access and never removes this access. For the `Hostel Manager` security
    group to have access to all the hostels, we must add a record rule to it so that
    it can add access for all hostels, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We chose to do this differently here and use the `[(1, '=', 1)]` special rule
    instead to unconditionally give access to all hostel records. While this may seem
    redundant, remember that if we don’t do this, the `Hostel User` rule can be customized
    in a way that will keep some hostel out of reach from the Settings user. The domain
    is special because the first element of a domain tuple must be a field name; this
    exact case is one of two cases where that is not true. The special domain of `[(1,`
    `'=', 0)]` is never true, but also not very useful in the case of record rules.
    This is because this type of rule is used to restrict access to all the records.
    The same thing is also possible with access lists.
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: Record rules are ignored if you’ve activated `SUPERUSER` mode. When testing
    your record rules, ensure that you use another user for that.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When a record rule is not assigned to a security group, it is labeled as global
    and treated differently from the other rules.
  prefs: []
  type: TYPE_NORMAL
- en: '`AND` operator. They are used in standard modules to create multi-company security
    access so that each user may only see data from their own business.'
  prefs: []
  type: TYPE_NORMAL
- en: In summary, standard non-global record rules are combined with an `OR` operator,
    and a record is accessible if any of the rules grant that access. When using an
    `AND` operator, global record rules add limits to the access provided by conventional
    record rules. Regular record rules cannot override restrictions imposed by global
    record rules.
  prefs: []
  type: TYPE_NORMAL
- en: Activating features with security groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Some functions can be restricted by security groups so that they can only be
    accessible to people who belong to these groups. Security groups can inherit other
    groups, granting them permissions as well.
  prefs: []
  type: TYPE_NORMAL
- en: These two features are utilized to provide a feature toggling functionality
    in Odoo. Security groups may also be used to activate or disable functionality
    for certain users or the whole Odoo instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'This recipe demonstrates how to add options to configuration settings and demonstrates
    the two approaches for enabling extra features: making them visible through security
    groups or adding them by installing an additional module.'
  prefs: []
  type: TYPE_NORMAL
- en: For the first case, we will make the hostel start dates an optional additional
    feature while for the second, as an example, we will provide an option for installing
    the *Notes* module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tutorial uses the `my_hostel` module, which was described in [*Chapter
    3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo Add-On Modules*. We will
    need security groups to work with, so you also need to have followed the *Adding
    security access to models* recipe in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, some identifiers need to refer to the add-on module’s technical
    name. We will assume that this is `my_hostel`. If you are using a different name,
    replace `my_hostel` with the actual technical name of your add-on module.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add the configuration options, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the necessary dependency and the new XML data files, edit the `__manifest__.py`
    file like this and check that it depends on `base_setup`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To add the new security group that’s used for feature activation, edit the
    `security/groups.xml` file and add the following record to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make the hostel start date visible only when this option is enabled, edit
    the field definition in the `models/hostel.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Edit the `models/__init__.py` file to add a new Python file for the configuration
    settings model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To extend the core configuration wizard by adding new options to it, add the
    `models/res_config_settings.py` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To make the options available in the UI, add `views/res_config_settings.xml`,
    which extends the settings form view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the settings form view, add the option to add a start date feature:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the settings form view, add the option to install the Note module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'After upgrading the add-on module, the two new configuration options should
    be available at **Settings** | **General Settings**. The screen should look like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 10.6 – Hostel config in General Settings](img/B20997_10_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 10.6 – Hostel config in General Settings
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, you will have new settings in the **Hostel**
    section. The first option, **Manage hostel start date**, will enable the start
    date feature for the hostel record. The second option, **Install Notes app**,
    will install Odoo’s Notes app.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The core `base` module provides the `res.config.settings` model, which provides
    the business logic behind the activation option. The `base_setup` add-on module
    uses the `res.config.settings` model to provide several basic configuration options
    that can be made available inside a new database. It also makes the **Settings**
    | **General Settings** menu available.
  prefs: []
  type: TYPE_NORMAL
- en: The `base_setup` module adapts `res.config.settings` to a central management
    dashboard, so we need to extend it to add configuration settings.
  prefs: []
  type: TYPE_NORMAL
- en: If we decide to create a specific settings form for the Hostel app, we can still
    inherit from the `res.config.settings` model with a different `_name` and then,
    for the new model, provide the menu option and form view for just those settings.
    We already saw this method in the *Adding your own settings options* recipe of
    [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side* *Development
    Techniques*.
  prefs: []
  type: TYPE_NORMAL
- en: 'We activated these functionalities in two ways: by activating a security group
    and making the functionality visible to the user, and by installing an add-on
    module that offers this feature. The fundamental `res.config.settings` model provides
    the logic necessary to handle both of these scenarios.'
  prefs: []
  type: TYPE_NORMAL
- en: The first step in this tutorial adds the `base_setup` add-on module to the dependencies
    since it provides extensions to the `res.config.settings` model we want to use.
    It also adds an additional XML data file that we will need to add the new options
    to the **General** **Settings** form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the second step, we created a new security group, **Hostel: start date feature**.
    The feature that needs to be activated should only be visible to that group, so
    it will be hidden until the group is enabled.'
  prefs: []
  type: TYPE_NORMAL
- en: In our example, we want the hostel start date to only be available when the
    corresponding configuration option is enabled. To achieve this, we can use the
    `groups` attribute on the field so that it is made available only for this security
    group. We did this at the model level so that it is automatically applied to all
    the UI views where the field is used.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we extended the `res.config.settings` model to add the new options.
    Each option is a Boolean field, and its name must begin either with `group_` or
    `module_`, according to what we want it to do.
  prefs: []
  type: TYPE_NORMAL
- en: The `group_` option field should have an `implied_group` attribute and should
    be a string that contains a comma-separated list of XML IDs for the security groups
    to activate when it is enabled. The XML IDs must be complete, with the module
    name, dot, and identifier name provided; for example, `module_name.identifier`.
  prefs: []
  type: TYPE_NORMAL
- en: We can also provide a `group` attribute to specify which security groups the
    feature will be enabled for. It will be enabled for all the Employee-based groups
    if no groups are defined. Thus, the related groups won’t apply to portal security
    groups, since these don’t inherit from the Employee base security group like the
    other regular security groups do.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mechanism behind the activation is quite simple: it adds the security group
    in the `group` attribute to `implied_group`, thus making the related feature visible
    to the corresponding users.'
  prefs: []
  type: TYPE_NORMAL
- en: The `module_` option field does not require any additional attributes. The remaining
    part of the field name identifies the module to be installed when this option
    has been activated. In our example, `module_note` will install the Note module.
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: Unchecking the box will uninstall the module without warning, which can cause
    data loss (models or fields and module data will be removed as a consequence).
    To avoid unchecking the box by accident, the `secure_uninstall` community module
    (from [https://github.com/OCA/server-tools](https://github.com/OCA/server-tools))
    prompts the user for a password before they uninstall the add-on module.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Configuration settings can also have fields named with the `default_` prefix.
    When one of these has a value, the ORM will set it as a global default. The `settings`
    field should have a `default_model` attribute to identify the model that’s been
    affected, and the field name after the `default_` prefix identifies the `model`
    field that will have the default value set.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, fields with none of the three prefixes mentioned can be used for
    other settings, but you will need to implement the logic to populate their values,
    using the `get_default_` name prefixed methods, and have them act when their values
    are edited using the `set_` name prefixed methods.
  prefs: []
  type: TYPE_NORMAL
- en: For those who would like to dive deeper into the details of the configuration
    settings, take a look at Odoo’s source code in `./odoo/addons/base/models/res_config.py`,
    which is extensively commented on.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing recordsets as a superuser
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We looked at security strategies including access rules, security groups, and
    record rules in prior recipes. You can avoid unauthorized access by using these
    approaches. However, in some complicated business scenarios, you may need to view
    or edit records, even if the user does not have access to them. For example, suppose
    the public user does not have access to the leads records, but the user may produce
    leads records in the backend by submitting the website form.
  prefs: []
  type: TYPE_NORMAL
- en: You may access recordsets as a superuser by using `sudo()`. We covered `sudo()`
    in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side Development
    Techniques*, in the *Changing the user that performs an action* recipe. We’ll
    see here that even if you’ve set ACL rules or assigned a security group to the
    field, you may still acquire access using `sudo()`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will use the same `my_hostel` module from the previous tutorial. We already
    have an ALC rule that gives read-only access to normal users. We will add a new
    field with security groups so that only the Manager user has access to it. After
    that, we will modify the field value for the normal user. Follow these steps to
    achieve this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the new field to the `hostel.hostel` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the field to the form view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `add_details()` method to the `hostel.hostel` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the button to the form view so that we can trigger our method from the
    user interface. This should be placed inside the `<``header>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart the server and update the module to apply these changes.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Steps 1* and *2*, we added a new field called `details_added` to the model
    and form view. Note that we put the `my_hostel.group_hostel_manager` group on
    the field in Python, so this field can only be accessed by the Manager user.
  prefs: []
  type: TYPE_NORMAL
- en: In the next step, we added the `add_details()` method. We updated the value
    of the `details_added()` field inside this method’s body. Note that we used `sudo()`
    before calling the write method.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we added a button in the form view to trigger the method from the user
    interface.
  prefs: []
  type: TYPE_NORMAL
- en: To test this implementation, you need to log in with the non-manager user. If
    you have loaded the database with demonstration data, you can log in with the
    demo user and then click on the `add_details()` method will be called, and this
    will write the message into the `details_added` field, even if the user doesn’t
    have proper rights. You can check the value of the field through the admin user
    because this field will be hidden from the demo user.
  prefs: []
  type: TYPE_NORMAL
- en: Upon clicking the `add_details()` method as an argument, `self`. Before we wrote
    the values into the hostel recordset, we used `self.sudo()`. This returns the
    same recordset but with superuser rights. This recordset will have the `su=True`
    environment attribute, and it will bypass all access rules and record rules. Because
    of that, the non-manager user will be able to write in the hostel record.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to be extra careful when you use `sudo()` because it bypasses all access
    rights. If you want to access the recordset as another user, you can pass the
    ID of that user inside `sudo` – for example, `self.sudo(uid)`. This will return
    a recordset containing the environment of that user. This way, it will not bypass
    all the access rules and record rules, but you can perform all the actions that
    are allowed for that user.
  prefs: []
  type: TYPE_NORMAL
- en: Hiding view elements and menus based on groups
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We covered how to hide fields from some users using group parameters in the
    Python field declaration in previous recipes. Another method for hiding fields
    in the user interface is to add security groups to the XML elements in the view
    specification. You may also conceal security groups from a certain user by using
    menus.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will reuse the `my_hostel` add-on module from the previous
    recipe. In the previous recipe, we added a button to the `<header>` tag. We will
    hide that whole header from a few users by adding a group attribute to it.
  prefs: []
  type: TYPE_NORMAL
- en: Add the model, the views, and the menus for the `hostel.room.category` model.
    We will hide the category menus from a user. Please refer to [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*, to learn how to add model views and menus.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to hide elements based on security groups:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a `groups` attribute to the `<header>` tag to hide it from other users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `groups` attribute to the `<menuitem>` hostel category so that it’s
    only displayed for librarian users:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Restart the server and update the module to apply these changes.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *Step 1*, we added `groups="my_hostel.group_hostel_manager"` to the `<header>`
    tag. This means that the whole header part will only be visible to hostel users
    and hostel managers. Normal backend users who don’t have `group_hostel_manager`
    will not see the header part.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 2*, we added the `groups="my_hostel.group_hostel_manager"` attribute
    to `menuitem`. This means that this menu is only visible to hostel users.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `groups` attribute almost everywhere, including `<field>`, `<notebook>`,
    `<group>`, and `<menuitems>`, or on any tag from the view architecture. Odoo will
    hide those elements if the user doesn’t have that group. You can use the same
    group attributes in web pages and *QWeb reports*, which will be covered in [*Chapter
    12*](B20997_12.xhtml#_idTextAnchor628), *Automation, Workflows, Emails, and Printing*,
    and [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS* *Website Development*.
  prefs: []
  type: TYPE_NORMAL
- en: As we saw in the *Accessing recordsets as a superuser* recipe of this chapter,
    we can hide fields from some users using the `groups` argument in the Python field
    definition. Note that there is a big difference between using security groups
    on fields and using Python security groups in views. Security groups in Python
    provide real security; unauthorized users can’t even access the fields through
    ORM or RPC calls. However, the groups in view are just for improving usability.
    Fields that are hidden through groups in the XML file can still be accessed through
    RPC or ORM.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Please refer to [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application
    Models*, to learn how to add model views and menus.
  prefs: []
  type: TYPE_NORMAL
