- en: '10'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '10'
- en: Security Access
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安全访问
- en: Odoo is typically used by multi-user organizations. Each user has a distinct
    position in every organization, and they have varying access based on their function.
    The HR manager, for example, does not have access to the company’s accounting
    information. You may determine which information a user can access in Odoo using
    access rights and record rules. We will learn how to set access rights rules and
    record rules in this chapter.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo通常被多用户组织使用。每个用户在每一个组织中都有一个独特的职位，并且根据他们的职能有不同的访问权限。例如，人力资源经理没有访问公司会计信息的权限。您可以使用访问权限和记录规则来确定用户在Odoo中可以访问哪些信息。在本章中，我们将学习如何设置访问权限规则和记录规则。
- en: Such compartmentalization of access and security requires that we provide access
    to roles based on their permission levels. We will learn about this in this chapter.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 这种访问和安全的细分要求我们根据其权限级别提供对角色的访问。我们将在本章中了解这一点。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下食谱：
- en: Creating security groups and assigning them to users
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建安全组并将它们分配给用户
- en: Adding security access to models
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向模型添加安全访问
- en: Limiting access to fields in models
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 限制模型中字段的访问
- en: Using record rules to restrict record access
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用记录规则来限制记录访问
- en: Activating features with security groups
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用安全组激活功能
- en: Accessing recordsets as a superuser
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 以超级用户身份访问记录集
- en: Hiding view elements and menus based on groups
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据组隐藏视图元素和菜单
- en: To concisely get the point across, the recipes in this chapter make small additions
    to an example existing module.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 为了简洁地传达要点，本章中的食谱对现有示例模块进行了小的补充。
- en: Technical requirements
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirements for this chapter include using the module that we
    created by following the tutorials in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*. To follow the examples here, you should have that
    module created and ready to use.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求包括使用我们根据[*第3章*](B20997_03.xhtml#_idTextAnchor083)，*创建Odoo附加模块*中的教程创建的模块。为了遵循这里的示例，您应该已经创建了该模块并准备好使用。
- en: All the code that will be used in this chapter can be downloaded from this book’s
    GitHub repository at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter10).
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中将要使用的所有代码都可以从本书的GitHub仓库中下载，网址为[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter10](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter10)。
- en: Creating security groups and assigning them to users
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建安全组并将它们分配给用户
- en: 'Security access in Odoo is configured through security groups: permissions
    are given to groups and then groups are assigned to users. Each functional area
    has base security groups provided by a central application.'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo中的安全访问通过安全组进行配置：权限被授予组，然后组被分配给用户。每个功能区域都有一个由中央应用程序提供的基本安全组。
- en: When add-on modules augment an existing application, they should add rights
    to the respective groups, as explained in the *Adding security access to* *models*
    recipe.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 当附加模块增强现有应用程序时，它们应该向相应的组添加权限，如*向模型添加安全访问*食谱中所述。
- en: When add-on modules introduce a new functional area that is not yet covered
    by an existing core application, the associated security groups should be added.
    We should usually have at least user and management roles.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 当附加模块引入一个尚未被现有核心应用程序覆盖的新功能区域时，应添加相关的安全组。我们通常至少应该有用户和管理角色。
- en: Take the Hostel example we introduced in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*, as an example – it doesn’t fit neatly into any
    of the Odoo core apps, so we will add security groups for it.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 以我们介绍的宿舍示例[*第3章*](B20997_03.xhtml#_idTextAnchor083)，*创建Odoo附加模块*为例——它并不适合任何Odoo核心应用程序，因此我们将为它添加安全组。
- en: Getting ready
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This tutorial assumes that you have an Odoo instance ready with `my_hostel`
    available, as described in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating
    Odoo* *Add-On Modules*.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程假设您已经准备好一个Odoo实例，其中包含`my_hostel`，如[*第3章*](B20997_03.xhtml#_idTextAnchor083)中所述，*创建Odoo*
    *附加模块*。
- en: How to do it...
  id: totrans-23
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: 'To add new access security groups to a module, perform the following steps:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 要向模块添加新的访问安全组，请执行以下步骤：
- en: 'Ensure that the `__manifest__.py` add-on module manifest has the `category`
    key defined:'
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保附加模块的`__manifest__.py`声明文件中定义了`category`键：
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Add the new `security/groups.xml` file to the manifest `data` key:'
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新的`security/groups.xml`文件添加到清单的`data`键：
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the new XML file for the data records to the `security/groups.xml` file,
    starting with an empty structure:'
  id: totrans-29
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将数据记录的新XML文件添加到`security/groups.xml`文件中，从空结构开始：
- en: '[PRE2]'
  id: totrans-30
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the `<record>` tags for the two new groups inside the data XML element:'
  id: totrans-31
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在数据XML元素内部添加两个新组的`<record>`标签：
- en: '[PRE3]'
  id: totrans-32
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'If we upgrade the add-on module, these two records will be loaded. To see these
    groups in the UI, you need to activate developer mode. You’ll then be able to
    see them through the **Settings** | **Users** | **Groups** menu option, like so:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们升级附加模块，这两个记录将被加载。要在UI中看到这些组，您需要激活开发者模式。然后您可以通过**设置** | **用户** | **组**菜单选项看到它们，如下所示：
- en: '![Figure 10.1 – Newly added security groups](img/B20997_10_1.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图10.1 – 新增的安全组](img/B20997_10_1.jpg)'
- en: Figure 10.1 – Newly added security groups
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.1 – 新增的安全组
- en: Important information
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: When you add a new model, the admin user does not have access to that model.
    This implies that the admin user cannot see the menus and views that have been
    added for that model. To show it, you must first add access rules to that model,
    something we will accomplish in the Adding security access to models recipe. Note
    that you may access newly added models as a superuser; for more information, see
    the *Accessing Odoo as a superuser* recipe in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo* *Add-On Modules*.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 当您添加一个新的模型时，管理员用户没有对该模型的访问权限。这意味着管理员用户无法看到为该模型添加的菜单和视图。要显示它，您必须首先向该模型添加访问规则，我们将在“向模型添加安全访问”配方中完成此操作。请注意，您可以用超级用户身份访问新添加的模型；有关更多信息，请参阅[*第3章*](B20997_03.xhtml#_idTextAnchor083)，“以超级用户身份访问Odoo”配方，*创建Odoo附加模块*。
- en: How it works...
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Add-on modules are organized into functional areas, or major *applications*,
    such as *accounting and finance*, *sales*, or *human resources*. These are defined
    by the `category` key in the manifest file.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 附加模块被组织成功能区域，或主要的应用程序，例如*会计和财务*、*销售*或*人力资源*。这些由清单文件中的`category`键定义。
- en: If a category name does not exist yet, it will be automatically created. For
    convenience, a `base.module_category_<category_name_in_manifest>` XML ID will
    also be generated for the new category name in lowercase letters, replacing the
    spaces with underscores. This is useful for relating security groups to application
    categories.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 如果类别名称尚不存在，它将被自动创建。为了方便，还会为新的类别名称生成一个`base.module_category_<category_name_in_manifest>`
    XML ID，将空格替换为下划线。这对于将安全组与应用程序类别相关联很有用。
- en: In our example, we used the `base.module_category_hostel` XML identifier.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用了`base.module_category_hostel` XML标识符。
- en: By convention, data files that contain security-related elements should be placed
    inside a `security` subdirectory.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 按照惯例，包含安全相关元素的数据文件应放置在`security`子目录中。
- en: A manifest file must also be used to register security files. The sequence in
    which files are specified in the module manifest’s **data** key is critical since
    you cannot utilize a reference to a security group in other views or **ACL** files
    until the group has been created. It’s advisable to put the security data file
    first, followed by the ACL files and other user interface data files.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 清单文件还必须用于注册安全文件。在模块清单的`data`键中指定文件的顺序至关重要，因为您不能在其他视图或**ACL**文件中使用对安全组的引用，直到该组被创建。建议将安全数据文件放在第一位，然后是ACL文件和其他用户界面数据文件。
- en: 'In our example, we created groups with the `<record>` tag, which will create
    a record of the `res.groups` model. The most important columns of the *res.group*
    model are as follows:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们使用`<record>`标签创建了组，这将创建`res.groups`模型的记录。`res.group`模型最重要的列如下：
- en: '`name`: This is the group’s display name.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`: 这是该组的显示名称。'
- en: '`category_id`: This is a reference to the application category and is used
    to organize the groups in the user’s form.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`category_id`: 这是对应用程序类别的引用，并用于在用户表单中组织组。'
- en: '`implied_ids`: These are other groups to inherit permissions from.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`implied_ids`: 这些是从中继承权限的其他组。'
- en: '`users`: This is the list of users that belong to this group. In new add-on
    modules, we usually want the admin user to belong to the application’s manager
    group.'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`users`: 这是属于此组的用户列表。在新增的附加模块中，我们通常希望管理员用户属于应用程序的管理员组。'
- en: The first security group uses `implied_ids` as the `base.group_user` group.
    This is the `Employee` user group and is the basic security group all the backend
    users are expected to share.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 第一个安全组使用`implied_ids`作为`base.group_user`组。这是`Employee`用户组，并且是所有后端用户预期共享的基本安全组。
- en: The second security group sets a value on the `users` field to assign it to
    the administrator user, which has the `base.user_admin` XML ID.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 第二个安全组在`users`字段上设置值，将其分配给具有`base.user_admin` XML ID的管理员用户。
- en: Users that belong to a security group will automatically belong to its implied
    groups. For example, if you assign a *Hostel Manager* group to any user, that
    user will also be included in the *User* group. This is because the *Hostel Manager*
    group has the *User* group in its `implied_ids` column.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 属于安全组的用户将自动属于其暗示的组。例如，如果您将*宿舍管理员*组分配给任何用户，该用户也将包括在*用户*组中。这是因为*宿舍管理员*组在其`implied_ids`列中包含*用户*组。
- en: Furthermore, security groups’ access rights are cumulative. A user has permission
    if any of the groups to which they belong (directly or indirectly) grant it to
    them.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，安全组的访问权限是累积的。如果用户所属的任何组（直接或间接）授予他们权限，则用户具有权限。
- en: Some security groups are displayed as a selection box in the user form rather
    than distinct tick boxes. This occurs when the groups involved are in the same
    application category and are linearly interconnected by `implied_ids`. Group A,
    for example, implies Group B, while Group B implies Group C. If a group is not
    associated with any other groups via `implied_ids`, a checkbox will appear instead
    of a selection box.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 一些安全组在用户表单中以选择框的形式显示，而不是单独的复选框。这种情况发生在涉及到的组属于同一应用类别，并且通过`implied_ids`线性互联时。例如，组A暗示组B，而组B暗示组C。如果一个组没有通过`implied_ids`与其他组关联，则会出现复选框而不是选择框。
- en: Note
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Note that the relationships that were defined in the preceding fields also have
    reverse relationships that can be edited in the related models, such as security
    groups and users.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，前面字段中定义的关系也有反向关系，可以在相关模型中编辑，例如安全组和用户。
- en: Setting values on reference fields, such as `category_id` and `implied_ids`,
    can be done using the related records’ XML IDs and some special syntax. This syntax
    was explained in detail in [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319), *Managing*
    *Module Data*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 使用相关记录的XML ID和一些特殊语法可以在引用字段上设置值，例如`category_id`和`implied_ids`。这种语法在[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*中详细解释。
- en: There’s more...
  id: totrans-57
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: The special `base.group_no_one` security group called `Technical Features` flag
    was activated. From version 9.0, this has changed, and the features are visible
    so long as `Developer Mode` is active.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 特殊的`base.group_no_one`安全组标志`Technical Features`被激活。从版本9.0开始，这一变化使得只要`开发者模式`处于激活状态，这些功能就会可见。
- en: Security groups only provide cumulative access rights. There is no method to
    deny a group’s access. This implies that a manually established group used to
    customize rights should inherit from the nearest group with fewer permissions
    than intended (if any), and then add all remaining permissions required.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 安全组只提供累积的访问权限。没有方法可以拒绝一个组的访问。这意味着用于自定义权限的手动建立的组应继承自权限更少的最近组（如果有），然后添加所有剩余的所需权限。
- en: 'Groups also have these additional fields available:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 组还有以下这些额外的字段可用：
- en: '`menu_access` **field)**: These are the menu items the group has access to'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`menu_access` **字段**）：这些是组可以访问的菜单项'
- en: '`view_access` **field)**: These are the UI views the group has access to'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`view_access` **字段**）：这些是组可以访问的UI视图'
- en: '`model_access` **field)**: This is the access it has to models, as detailed
    in the *Adding security access to* *models* recipe'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_access` **字段**）：这是对模型的访问权限，如*向模型添加安全访问权限*配方中详细说明'
- en: '`rule_groups` **field)**: These are the record-level access rules that apply
    to the group, as detailed in the *Limiting record access using record* *rules*
    recipe'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rule_groups` **字段**）：这些是应用于组的记录级访问规则，如*使用记录规则限制记录访问*配方中详细说明'
- en: '`comment` **field)**: This is a description or commented piece of text for
    the group'
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`comment` **字段**）：这是对组的描述或注释文本'
- en: With that, we’ve learned how to build security groups and assign them via the
    GUI. We will utilize these groups to establish an access control list and record
    rules in the next few recipes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 有了这些，我们已经学会了如何构建安全组并通过GUI分配它们。在接下来的几个配方中，我们将利用这些组来建立访问控制列表和记录规则。
- en: See also
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: To learn how to access newly added models through the *superuser*, please refer
    to the *Accessing Odoo as a superuser* recipe in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo* *Add-On Modules*.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何通过 *超级用户* 访问新添加的模型，请参阅 [*第 3 章*](B20997_03.xhtml#_idTextAnchor083) 中的 *作为超级用户访问
    Odoo* 菜谱，*创建 Odoo 附加模块*。
- en: Adding security access to models
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 为模型添加安全访问权限
- en: It’s common for add-on modules to add new models. For example, in [*Chapter
    3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo Add-On Modules*, we added
    a new Hostel model. It is easy to miss out on creating security access for new
    models during development, and you might find it hard to see menus and views that
    have been created. This is because, from *Odoo version 12*, admin users don’t
    get default access rights to new models. To see the views and menus for the new
    model, you need to add security **ACLs**.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 对于附加模块添加新模型是很常见的。例如，在 [*第 3 章*](B20997_03.xhtml#_idTextAnchor083) 的 *创建 Odoo
    附加模块* 中，我们添加了一个新的宿舍模型。在开发过程中，很容易忽略为新模型创建安全访问权限，你可能会发现很难看到创建的菜单和视图。这是因为，从 *Odoo
    版本 12* 开始，管理员用户默认没有对新模型的访问权限。要查看新模型的视图和菜单，你需要添加安全 **ACLs**。
- en: 'However, models with no ACLs will trigger a warning log message upon loading,
    informing the user about the missing ACL definitions:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，没有 ACLs 的模型在加载时将触发一个警告日志消息，通知用户缺少 ACL 定义：
- en: '[PRE4]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: You may also access freshly uploaded models as a superuser, which circumvents
    all security requirements. For further information, see the *Accessing Odoo as
    a superuser* recipe in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating
    Odoo Add-On Modules*. Administrators have access to the superuser functionality.
    So, for new models to be useable by non-admin users, we must establish their access
    control lists so that Odoo understands how to access them and what activities
    each user group is permitted to conduct.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以以超级用户身份访问新上传的模型，这绕过了所有安全要求。有关更多信息，请参阅 [*第 3 章*](B20997_03.xhtml#_idTextAnchor083)
    中的 *作为超级用户访问 Odoo* 菜谱，*创建 Odoo 附加模块*。管理员可以访问超级用户功能。因此，为了使非管理员用户可以使用新模型，我们必须建立它们的访问控制列表，以便
    Odoo 了解如何访问它们以及每个用户组被允许执行的活动。
- en: Getting ready
  id: totrans-74
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue using the `my_hostel` module from the previous tutorial and
    add the missing ACLs to it.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用之前教程中的 `my_hostel` 模块，并为其添加缺失的访问控制列表（ACLs）。
- en: How to do it...
  id: totrans-76
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: '`my_hostel` should already contain the `models/hostel.py` Python file that
    creates the `hostel.hostel` model. We will now add a data file that describes
    this model’s security access control by performing the following steps:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`my_hostel` 应该已经包含创建 `hostel.hostel` 模型的 `models/hostel.py` Python 文件。现在我们将通过以下步骤添加一个描述此模型安全访问控制的数据文件：'
- en: 'Edit the `__manifest__.py` file to declare a new data file:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `__manifest__.py` 文件以声明一个新的数据文件：
- en: '[PRE5]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add a new `security/ir.model.access.csv` file to the module with the following
    lines:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模块中添加一个新的 `security/ir.model.access.csv` 文件，包含以下行：
- en: '[PRE6]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: We should then upgrade the module so that these ACL records are added to our
    Odoo database. More importantly, if we sign into a demonstration database using
    the `demo` user, we should be able to access the **My Hostel** menu option without
    receiving any security errors.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们应该升级模块，以便将这些 ACL 记录添加到我们的 Odoo 数据库中。更重要的是，如果我们使用 `demo` 用户登录演示数据库，我们应该能够访问
    **我的宿舍** 菜单选项而不会收到任何安全错误。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Security ACLs are stored in the core `ir.model.access` model. We just need to
    add the records that describe the intended access rights for each user group.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 安全 ACLs 存储在核心 `ir.model.access` 模型中。我们只需要添加描述每个用户组预期访问权限的记录。
- en: Any sort of data file will do, although the most popular is a CSV file. The
    file can be placed anywhere inside the add-on module directory; however, it is
    common to keep all **security**-related files under a security subfolder.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 任何类型的数据文件都可以，尽管最流行的是 CSV 文件。文件可以放置在附加模块目录中的任何位置；然而，通常会将所有与 **安全** 相关的文件保存在一个安全子文件夹下。
- en: This new data file is added to the manifest in the first phase of our tutorial.
    The next step is to include the files that explain the security access control
    rules. The CSV file must be named after the model into which the entries will
    be imported, so the name we’ve chosen isn’t simply a convention; it’s required.
    For further information, see [*Chapter 6*](B20997_06.xhtml#_idTextAnchor319),
    *Managing* *Module Data*.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 这个新的数据文件在教程的第一阶段添加到清单中。下一步是包含解释安全访问控制规则的文件。CSV文件必须以将要导入条目的模型命名，所以我们选择的名称不仅仅是一种约定；这是必需的。有关更多信息，请参阅[*第6章*](B20997_06.xhtml#_idTextAnchor319)，*管理模块数据*。
- en: If the module also creates new security groups, its data file should be declared
    in the manifest before the ACLs’ data files, since you may want to use them for
    the ACLs. They must already be created when the ACL file is processed.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 如果模块还创建了新的安全组，其数据文件应在ACLs数据文件之前在清单中声明，因为您可能希望将其用于ACLs。它们必须在处理ACL文件之前已经创建。
- en: 'The columns in the CSV file are as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: CSV文件中的列如下：
- en: '`id`: This is the internal XML ID identification for this rule. Any unique
    name inside the module is acceptable, but the best practice is to use `access_<model>_<group>`.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：这是此规则的内部XML ID标识。模块内的任何唯一名称都是可接受的，但最佳实践是使用`access_<model>_<group>`。'
- en: '`name`: This is a title for the access rule. It is a common practice to use
    an `access.``     <``model>.<group>` name.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`：这是访问规则的标题。使用`access.<model>.<group>`名称是一种常见的做法。'
- en: '`model_id:id`: This is the XML ID for the model. Odoo automatically assigns
    this kind of ID to models with a `model_<name>` format, using the model’s `_name`
    with underscores instead of dots. If the model was created in a different add-on
    module, a fully qualified XML ID that includes the module name is needed.'
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_id:id`：这是模型的XML ID。Odoo自动为具有`model_<name>`格式的模型分配此类ID，使用模型的重音符`_name`而不是点。如果模型是在不同的附加模块中创建的，则需要一个包含模块名称的完全限定XML
    ID。'
- en: '`group_id:id`: This is the XML ID for the user group. If left empty, it applies
    to all users. The base module provides some basic groups, such as `base.group_user`
    for all employees and `base.group_system` for the administration user. Other apps
    can add their own user groups.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_id:id`：这是用户组的XML ID。如果为空，则适用于所有用户。基础模块提供了一些基本组，例如`base.group_user`适用于所有员工和`base.group_system`适用于管理员用户。其他应用程序可以添加它们自己的用户组。'
- en: '`perm_read`: Members of the preceding group can read the model’s records. It
    accepts two values: `0` or `1`. Use `0` to restrict read access on the model and
    `1` to provide read access.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perm_read`：前一个组的成员可以读取模型的记录。它接受两个值：`0`或`1`。使用`0`来限制模型上的读访问，使用`1`来提供读访问。'
- en: '`perm_write`: Members of the preceding group can update the model’s records.
    It accepts two values: `0` or `1`. Use `0` to restrict write access on the model
    and `1` to provide write access.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perm_write`：前一个组的成员可以更新模型的记录。它接受两个值：`0`或`1`。使用`0`来限制模型上的写访问，使用`1`来提供写访问。'
- en: '`perm_create`: Members of the preceding group can add new records of this model.
    It accepts two values: `0` or `1`. Use `0` to restrict create access on the model
    and `1` to provide create access.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perm_create`：前一个组的成员可以添加此模型的新记录。它接受两个值：`0`或`1`。使用`0`来限制模型上的创建访问，使用`1`来提供创建访问。'
- en: '`perm_unlink`: Members of the preceding group can delete records of this model.
    It accepts two values: `0` or `1`. Use `0` to restrict unlink access on the model
    and `1` to provide unlink access.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`perm_unlink`：前一个组的成员可以删除此模型的记录。它接受两个值：`0`或`1`。使用`0`来限制模型上的解除链接访问，使用`1`来提供解除链接访问。'
- en: The CSV file we used adds read-only access to the **Employees** | **Employee**
    standard security group and full write access to the **Administration** | **Settings**
    group.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 我们使用的CSV文件为**员工** | **Employee**标准安全组添加了只读访问权限，并为**管理** | **设置**组提供了完全写访问权限。
- en: The `base.group_user`, is particularly important because the user groups that
    are added by the Odoo standard apps inherit from it. This means that if we need
    a new model to be accessible by all the backend users, regardless of the specific
    apps they work with, we should add that permission to the **Employee** group.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`base.group_user` 特别重要，因为Odoo标准应用添加的用户组都继承自它。这意味着，如果我们需要一个新的模型对所有后端用户都可用，无论他们使用的是哪个具体的应用程序，我们应该将这个权限添加到**员工**组。'
- en: The `base.group_user`, is particularly essential since it is inherited by the
    user groups introduced by the Odoo standard applications. This implies that if
    we want a new model to be accessible to all backend users, independent of the
    applications they use, we need to add it to the **Employee** group.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '`base.group_user`尤其重要，因为它继承自Odoo标准应用引入的用户组。这意味着，如果我们想让新的模型对所有后端用户可访问，而不管他们使用的是哪个应用，我们需要将其添加到**员工**组。'
- en: 'The resulting ACLs can be viewed from the GUI in debug mode by navigating to
    **Settings** | **Technical** | **Security** | **Access Controls List**, as shown
    in the following screenshot:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在调试模式下，您可以通过导航到**设置** | **技术** | **安全** | **访问控制列表**来查看生成的ACLs，如下面的截图所示：
- en: '![Figure 10.2 – ACL list view](img/B20997_10_2.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图10.2 – ACL列表视图](img/B20997_10_2.jpg)'
- en: Figure 10.2 – ACL list view
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.2 – ACL列表视图
- en: Some people find it easier to use this user interface to define ACLs and then
    use the **Export** feature to produce a CSV file.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 有些人发现使用此用户界面定义ACLs然后使用**导出**功能生成CSV文件更容易。
- en: There’s more...
  id: totrans-104
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: It seems reasonable to provide this access to the Hostel user and the Hostel
    Manager groups specified in the *Creating security groups and assigning them to
    users* recipe. If you went through that lesson, it’s a nice exercise to go through
    this one while changing the group identities to Hostel ones.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 提供这种访问权限给在*创建安全组和将它们分配给用户*配方中指定的Hostel用户和Hostel Manager组似乎是合理的。如果您已经完成了那个课程，那么在将组身份更改为Hostel身份的同时完成这个练习将是一个很好的练习。
- en: It is crucial to remember that access lists given by add-on modules should not
    be directly customized because they will be reloaded on the next module update,
    erasing any modification done from the GUI.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 记住，附加模块提供的访问列表不应直接进行自定义，因为它们将在下一个模块更新时重新加载，从而擦除通过GUI所做的任何修改。
- en: There are two methods for customizing ACLs. One option is to build new security
    groups that inherit from the modules and add extra rights to them, but this only
    enables us to add permissions and not remove them. A more adaptable way would
    be to uncheck the `<field name="active" />` column. We may also create new ACL
    lines to add or alter permissions. The deactivated ACLs will not be revived after
    a module update, and the newly inserted ACL lines will not be impacted.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 有两种方法可以自定义ACLs。一种选项是构建新的继承自模块的安全组并添加额外的权限，但这只能让我们添加权限而不能删除它们。更灵活的方法是取消勾选`<field
    name="active" />`列。我们还可以创建新的ACL行来添加或修改权限。在模块更新后，停用的ACLs将不会被恢复，新插入的ACL行也不会受到影响。
- en: It’s also worth mentioning that ACLs only apply to conventional models and aren’t
    required for abstract or transient models. If these are defined, they will be
    ignored, and a warning message will be logged in the server log.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，访问控制列表（ACLs）仅适用于传统模型，对于抽象或瞬态模型则不是必需的。如果这些模型被定义，它们将被忽略，并在服务器日志中记录一条警告信息。
- en: See also
  id: totrans-109
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: You can also access newly added models through a superuser since this bypasses
    all security rules. To learn more about this, please refer to the *Accessing Odoo
    as a superuser* recipe in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating
    Odoo* *Add-On Modules*.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 由于绕过了所有安全规则，您也可以通过超级用户访问新添加的模型。有关更多信息，请参阅[*第3章*](B20997_03.xhtml#_idTextAnchor083)中的*作为超级用户访问Odoo*配方，*创建Odoo附加模块*。
- en: Limiting access to fields in models
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 限制模型中字段的访问
- en: In other circumstances, we may want additional fine-grained access control,
    as well as the ability to restrict access to individual fields in a model.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 在其他情况下，我们可能需要额外的细粒度访问控制，以及限制对模型中单个字段访问的能力。
- en: Using the `groups` property, it is possible to restrict access to a field to
    certain security **groups**. This recipe will demonstrate how to add a field with
    restricted access to the Hostels model.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`groups`属性，可以限制对字段的访问，使其仅限于特定的安全**组**。本配方将演示如何向Hostels模型添加具有受限访问权限的字段。
- en: Getting ready
  id: totrans-114
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue using the `my_hostel` module from the previous tutorial.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用前一个教程中的`my_hostel`模块。
- en: How to do it...
  id: totrans-116
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add a field with access that’s limited to specific security groups, perform
    the following steps:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加一个仅限于特定安全组访问权限的字段，请执行以下步骤：
- en: 'Edit the model file to add the field:'
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑模型文件以添加字段：
- en: '[PRE7]'
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Edit the view in the XML file to add the field:'
  id: totrans-120
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在XML文件中编辑视图以添加字段：
- en: '[PRE8]'
  id: totrans-121
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: That’s it. Now, upgrade the add-on module for the changes in the model to take
    place. If you sign in with a user with no system configuration access, such as
    `demo` in a database with demonstration data, the Hostel form won’t display the
    field.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样。现在，升级附加模块以使模型中的更改生效。如果你使用没有系统配置访问权限的用户登录，例如在包含演示数据的数据库中使用`demo`，宿舍表单将不会显示该字段。
- en: How it works...
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: Fields containing the `groups` property are processed differently to determine
    whether the user belongs to any of the security groups specified in the attribute.
    If a user is not a member of a certain group, Odoo will remove the field from
    the UI and limit ORM operations on that field.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 包含`groups`属性的域在确定用户是否属于属性中指定的任何安全组时会被以不同的方式处理。如果一个用户不是某个特定组的成员，Odoo将会从UI中移除该字段，并限制对该字段的ORM操作。
- en: Note that this security is not superficial. The field is not only hidden in
    the UI but is also made unavailable to the user in the other ORM operations, such
    as `read` and `write`. This is also true for *XML-RPC* or *JSON-RPC* calls.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这种安全性并非表面化。字段不仅在UI中被隐藏，在`read`和`write`等其他ORM操作中也不对用户可用。对于*XML-RPC*或*JSON-RPC*调用也是如此。
- en: Be careful when using these fields in business logic or on-change UI events
    (`@api.onchange` methods); they can raise errors for users with no access to the
    field. One workaround for this is to use privilege elevation, such as the `sudo()`
    model method or the `compute_sudo` field attribute for computed fields.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用这些字段在业务逻辑或UI事件变更（`@api.onchange`方法）时请小心；它们可能会对没有访问权限的用户引发错误。一个解决方案是使用权限提升，例如`sudo()`模型方法或计算字段的`compute_sudo`字段属性。
- en: 'The `groups` value is a string that contains a comma-separated list of valid
    XML IDs for security groups. The simplest way to find the XML ID for a particular
    group is to activate developer mode and navigate to the group’s form, at **Settings**
    | **Users** | **Groups**, and then access the **View Metadata** option from the
    debug menu, as shown in the following screenshot:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`groups`值是一个包含逗号分隔的有效XML ID列表的字符串，用于安全组。找到特定组的XML ID的最简单方法是激活开发者模式，导航到该组的表单，在**设置**
    | **用户** | **组**，然后从调试菜单中访问**查看元数据**选项，如图下所示：'
- en: '![Figure 10.3 – Menu for viewing a group’s XML ID](img/Image96854.jpg)'
  id: totrans-128
  prefs: []
  type: TYPE_IMG
  zh: '![图10.3 – 查看组XML ID的菜单](img/Image96854.jpg)'
- en: Figure 10.3 – Menu for viewing a group’s XML ID
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.3 – 查看组XML ID的菜单
- en: You may also view a security group’s XML ID through code by utilizing the `<record>`
    tag that formed the group. However, looking at the information, as shown in the
    preceding screenshot, is the most simple approach to figuring out a group’s XML
    ID.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 你也可以通过利用形成组的`<record>`标签通过代码查看安全组的XML ID。然而，查看信息，如图下所示，是找出组XML ID的最简单方法。
- en: There’s more...
  id: totrans-131
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: In some circumstances, we want a field to be available or unavailable based
    on specific requirements, such as the values in a field, such as `stage_id` or
    `state`. Typically, this is handled at the view level by utilizing characteristics
    such as states or attributes to dynamically display or hide the field based on
    particular criteria. For a more complete explanation, see [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446),
    *Backend Views*.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 在某些情况下，我们希望字段根据特定要求（如字段中的值，如`stage_id`或`state`）可用或不可用。通常，这通过利用状态或属性等特性在视图级别处理，根据特定标准动态显示或隐藏字段。对于更完整的解释，请参阅[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*。
- en: Note that these techniques work at the user interface level only and don’t provide
    actual access security. To do this, you should add checks to the business logic
    layer. Either add model methods decorated with `@constrains`, implementing the
    specific validations intended, or extend the `create`, `write`, or `unlink` methods
    to add validation logic. You can get further insights into how to do this by going
    back to [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238), *Basic* *Server-Side
    Development*.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，这些技术仅在用户界面级别上工作，并不提供实际的安全访问。为了做到这一点，你应该在业务逻辑层添加检查。要么添加带有`@constrains`装饰器的模型方法，实现特定的验证，要么扩展`create`、`write`或`unlink`方法来添加验证逻辑。你可以通过回到[*第5章*](B20997_05.xhtml#_idTextAnchor238)，*基本服务器端开发*，来获取更多关于如何做到这一点的见解。
- en: See also
  id: totrans-134
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please see [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*,
    for further information on how to hide and reveal a field using criteria.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅[*第9章*](B20997_09.xhtml#_idTextAnchor446)，*后端视图*，以获取有关如何使用标准隐藏和显示字段的更多信息。
- en: For further insights into the business logic layer, please refer to [*Chapter
    5*](B20997_05.xhtml#_idTextAnchor238), *Basic* *Server-Side Development*.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 要深入了解业务逻辑层，请参阅[*第5章*](B20997_05.xhtml#_idTextAnchor238)，*基本* *服务器端开发*。
- en: Limiting record access using record rules
  id: totrans-137
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用记录规则限制记录访问
- en: A basic requirement for every application is the ability to restrict which records
    are exposed to each user on a certain model.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 每个应用程序的基本要求是能够限制在特定模型上向每个用户暴露哪些记录。
- en: This is accomplished through the use of **record rules**. A record rule is a
    domain filter expression specified on a model that is subsequently applied to
    each data query performed by the impacted users.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 这是通过使用**记录规则**来实现的。记录规则是在模型上指定的一个域过滤器表达式，随后应用于受影响的用户执行的所有数据查询。
- en: As an example, we will add a record rule to the *Hostel* model so that users
    in the `Employee` group will only have access to the public hostel.
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，我们将向`Hostel`模型添加一个记录规则，以便`Employee`组中的用户只能访问公共宿舍。
- en: Getting ready
  id: totrans-141
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will continue using the `my_hostel` module from the previous recipe.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将继续使用之前配方中的`my_hostel`模块。
- en: How to do it...
  id: totrans-143
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何实现...
- en: 'Record rules can be added using a data XML file. To do this, perform the following
    steps:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过使用数据XML文件来添加记录规则。为此，请执行以下步骤：
- en: 'Ensure that the `security/security_rules.xml` file is referenced by the manifest
    `data` key:'
  id: totrans-145
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 确保由清单`data`键引用`security/security_rules.xml`文件：
- en: '[PRE9]'
  id: totrans-146
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'We should have a `security/security_rules.xml` data file with a `<odoo>` section
    that creates the security group:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们应该有一个包含创建安全组的`<odoo>`部分的`security/security_rules.xml`数据文件：
- en: '![Figure 10.4 –  Record rule for the hostel user](img/B20997_10_4.jpg)'
  id: totrans-148
  prefs: []
  type: TYPE_IMG
  zh: '![图10.4 – 宿舍用户的记录规则](img/B20997_10_4.jpg)'
- en: Figure 10.4 – Record rule for the hostel user
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.4 – 宿舍用户的记录规则
- en: Upgrading the add-on module will load the record rules inside the Odoo instance.
    If you are using demo data, you can test it through the default `demo` user to
    give hostel user rights to the demo user. If you are not using demo data, you
    can create a new user with hostel user rights.
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 升级附加模块将在Odoo实例中加载记录规则。如果你正在使用演示数据，你可以通过默认的`demo`用户来测试它，为演示用户赋予宿舍用户权限。如果你没有使用演示数据，你可以创建一个新的用户并赋予其宿舍用户权限。
- en: How it works...
  id: totrans-151
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: Record rules are just data records that are placed in the `ir.rule` core model.
    While the file containing them can be located anywhere in the module, the `security`
    subfolder is the preferred location. A single XML file including both security
    groups and record rules is usual.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 记录规则只是放置在`ir.rule`核心模型中的数据记录。虽然包含它们的文件可以位于模块中的任何位置，但`security`子文件夹是首选位置。通常包含安全组和记录规则的单一XML文件。
- en: In contrast to groups, record rules in standard modules are imported into an
    `odoo` section with the `noupdate="1"` property. Because certain records will
    not be reloaded after a module update, manually customizing them is safe and will
    survive further upgrades.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 与组不同，标准模块中的记录规则被导入具有`noupdate="1"`属性的`odoo`部分。因为某些记录在模块更新后不会被重新加载，所以手动自定义它们是安全的，并且可以在进一步的升级中幸存。
- en: To be consistent with the standard modules, our record rules should also be
    contained within an `<odoo` `noupdate="1">` section.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 为了与标准模块保持一致，我们的记录规则也应该包含在`<odoo>` `noupdate="1">`部分中。
- en: 'Record rules can be seen from the GUI via the **Settings**| **Technical** |
    **Security** | **Record Rules** menu option, as shown in the following screenshot:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 记录规则可以通过**设置**| **技术** | **安全** | **记录规则**菜单选项在GUI中查看，如下面的截图所示：
- en: '![Figure 10.5 – ACLs for the Hostel model](img/B20997_10_5.jpg)'
  id: totrans-156
  prefs: []
  type: TYPE_IMG
  zh: '![图10.5 – 宿舍模型的ACLs](img/B20997_10_5.jpg)'
- en: Figure 10.5 – ACLs for the Hostel model
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 图10.5 – 宿舍模型的ACLs
- en: 'The following are the most important record rule fields that were used in this
    example:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 在此示例中使用了以下最重要的记录规则字段：
- en: '`name`): A descriptive title for the rule.'
  id: totrans-159
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`name`): 规则的描述性标题。'
- en: '`model_id`): A reference to the model to which the rule applies.'
  id: totrans-160
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`model_id`): 规则应用的模型的引用。'
- en: '`groups`): The security groups affected by the rule. If no security group is
    mentioned, the rule is deemed global and is enforced differently (keep reading
    to understand more about these groups).'
  id: totrans-161
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`groups`): 受规则影响的权限组。如果没有提及权限组，则规则被认为是全局的，并且执行方式不同（继续阅读以了解更多关于这些组的信息）。'
- en: '`domain`): A domain expression that is used to filter the records. The rule
    is only going to apply to these filtered records.'
  id: totrans-162
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`domain`): 用于过滤记录的域表达式。规则仅适用于这些过滤记录。'
- en: The first record rule we created was for the `Hostel User` security group. It
    uses the `[('is_public', '=', True)]` domain expression to select only the hostel
    that is available publicly. Thus, users with the `Hostel User` security group
    will only be able to see public hostels.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建的第一个记录规则是为`Hostel User`安全组。它使用`[('is_public', '=', True)]`域表达式来选择仅公开可用的宿舍。因此，具有`Hostel
    User`安全组的用户将只能看到公共宿舍。
- en: Note
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: '*The domain expressions used in the record rules are executed on the server
    using ORM objects. As a result, dot notation may be used on the fields on the
    left (the first tuple member). The* `[(''country_id.code'', ''='', ''IN'')]` *domain
    expression, for example, will only return entries containing the country* *of
    India.*'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: '*记录规则中使用的域表达式是在服务器上使用ORM对象执行的。因此，可以在左侧的字段（第一个元组成员）上使用点表示法。例如，`[(''country_id.code'',
    ''='', ''IN'')]`域表达式将仅返回包含印度国家的条目。*'
- en: Since record rules are mostly based on the current user, you can use the `user`
    recordset on the right-hand side (the third tuple element) of the domain. So,
    if you want to show the records for the company of the current user, you can use
    the `[('conpany_id', '=', user.company_id.id)]` domain. Alternatively, if you
    want to show the records that are created by the current user, you can use the
    `[('user_id', '=',` `user.id)]` domain.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 由于记录规则主要基于当前用户，您可以在域的右侧（第三个元组元素）使用`user`记录集。因此，如果您想显示当前用户的公司的记录，您可以使用`[('company_id',
    '=', user.company_id.id)]`域。或者，如果您想显示由当前用户创建的记录，您可以使用`[('user_id', '=', user.id)]`域。
- en: We want the `Hostel Manager` security group to have access to all hostels, regardless
    of whether they are public or private. Because it is a descendant of the `Hostel
    User` group, it will be able to see only public hostels until we intervene.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 我们希望`Hostel Manager`安全组能够访问所有宿舍，无论它们是公开的还是私人的。因为它是从`Hostel User`组派生的，所以它将只能看到公共宿舍，直到我们干预。
- en: 'The non-global record rules are joined using the `OR` logical operator; each
    rule adds access and never removes this access. For the `Hostel Manager` security
    group to have access to all the hostels, we must add a record rule to it so that
    it can add access for all hostels, as follows:'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 非全局记录规则使用`OR`逻辑运算符连接；每个规则添加访问权限，永远不会移除此访问权限。为了使`Hostel Manager`安全组能够访问所有宿舍，我们必须向其中添加一个记录规则，以便它可以添加对所有宿舍的访问权限，如下所示：
- en: '[PRE10]'
  id: totrans-169
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We chose to do this differently here and use the `[(1, '=', 1)]` special rule
    instead to unconditionally give access to all hostel records. While this may seem
    redundant, remember that if we don’t do this, the `Hostel User` rule can be customized
    in a way that will keep some hostel out of reach from the Settings user. The domain
    is special because the first element of a domain tuple must be a field name; this
    exact case is one of two cases where that is not true. The special domain of `[(1,`
    `'=', 0)]` is never true, but also not very useful in the case of record rules.
    This is because this type of rule is used to restrict access to all the records.
    The same thing is also possible with access lists.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 我们选择在这里以不同的方式操作，并使用`[(1, '=', 1)]`特殊规则来无条件地给予对所有宿舍记录的访问权限。虽然这看起来可能是多余的，但请记住，如果我们不这样做，`Hostel
    User`规则可以被定制，从而让某些宿舍对设置用户不可达。域是特殊的，因为域元组的第一个元素必须是字段名；这种情况是两种情况之一，其中这不是真的。`[(1,
    '=', 0)]`的特殊域永远不会为真，但在记录规则的情况下也不是非常有用。这是因为此类规则用于限制对所有记录的访问。同样的事情也可以通过访问列表实现。
- en: Important information
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Record rules are ignored if you’ve activated `SUPERUSER` mode. When testing
    your record rules, ensure that you use another user for that.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您已激活`SUPERUSER`模式，则记录规则将被忽略。在测试您的记录规则时，请确保您使用另一个用户进行测试。
- en: There’s more...
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: When a record rule is not assigned to a security group, it is labeled as global
    and treated differently from the other rules.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 当记录规则未分配给安全组时，它被标记为全局，并且与其他规则的处理方式不同。
- en: '`AND` operator. They are used in standard modules to create multi-company security
    access so that each user may only see data from their own business.'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: '`AND`运算符。它们用于标准模块中创建多公司安全访问，以便每个用户只能看到他们自己业务的数据。'
- en: In summary, standard non-global record rules are combined with an `OR` operator,
    and a record is accessible if any of the rules grant that access. When using an
    `AND` operator, global record rules add limits to the access provided by conventional
    record rules. Regular record rules cannot override restrictions imposed by global
    record rules.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 总结来说，标准非全局记录规则与 `OR` 运算符结合，如果任何规则授予访问权限，则记录可访问。当使用 `AND` 运算符时，全局记录规则会对传统记录规则提供的访问权限添加限制。常规记录规则不能覆盖全局记录规则施加的限制。
- en: Activating features with security groups
  id: totrans-177
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用安全组激活功能
- en: Some functions can be restricted by security groups so that they can only be
    accessible to people who belong to these groups. Security groups can inherit other
    groups, granting them permissions as well.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 一些功能可以通过安全组进行限制，以便只有属于这些组的人才能访问。安全组可以继承其他组，从而授予它们权限。
- en: These two features are utilized to provide a feature toggling functionality
    in Odoo. Security groups may also be used to activate or disable functionality
    for certain users or the whole Odoo instance.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个功能用于在 Odoo 中提供功能切换功能。安全组也可以用来为某些用户或整个 Odoo 实例激活或禁用功能。
- en: 'This recipe demonstrates how to add options to configuration settings and demonstrates
    the two approaches for enabling extra features: making them visible through security
    groups or adding them by installing an additional module.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱演示了如何向配置设置中添加选项，并展示了启用额外功能的两种方法：通过安全组使其可见或通过安装附加模块添加它们。
- en: For the first case, we will make the hostel start dates an optional additional
    feature while for the second, as an example, we will provide an option for installing
    the *Notes* module.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 对于第一种情况，我们将使宿舍开始日期成为一个可选的附加功能；对于第二种情况，例如，我们将提供一个安装 *笔记* 模块的选项。
- en: Getting ready
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This tutorial uses the `my_hostel` module, which was described in [*Chapter
    3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo Add-On Modules*. We will
    need security groups to work with, so you also need to have followed the *Adding
    security access to models* recipe in this chapter.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程使用 `my_hostel` 模块，该模块在 [*第 3 章*](B20997_03.xhtml#_idTextAnchor083)，*创建 Odoo
    附加模块* 中进行了描述。我们将需要安全组来工作，因此您也需要遵循本章中的 *向模型添加安全访问* 食谱。
- en: In this recipe, some identifiers need to refer to the add-on module’s technical
    name. We will assume that this is `my_hostel`. If you are using a different name,
    replace `my_hostel` with the actual technical name of your add-on module.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在本食谱中，一些标识符需要引用附加模块的技术名称。我们将假设这是 `my_hostel`。如果您使用的是不同的名称，请将 `my_hostel` 替换为您的附加模块的实际技术名称。
- en: How to do it...
  id: totrans-185
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add the configuration options, follow these steps:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加配置选项，请按照以下步骤操作：
- en: 'To add the necessary dependency and the new XML data files, edit the `__manifest__.py`
    file like this and check that it depends on `base_setup`:'
  id: totrans-187
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加必要的依赖项和新 XML 数据文件，请像这样编辑 `__manifest__.py` 文件并确保它依赖于 `base_setup`：
- en: '[PRE11]'
  id: totrans-188
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'To add the new security group that’s used for feature activation, edit the
    `security/groups.xml` file and add the following record to it:'
  id: totrans-189
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要添加用于功能激活的新安全组，请编辑 `security/groups.xml` 文件并添加以下记录：
- en: '[PRE12]'
  id: totrans-190
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'To make the hostel start date visible only when this option is enabled, edit
    the field definition in the `models/hostel.py` file:'
  id: totrans-191
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要使宿舍开始日期仅在启用此选项时可见，请编辑 `models/hostel.py` 文件中的字段定义：
- en: '[PRE13]'
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Edit the `models/__init__.py` file to add a new Python file for the configuration
    settings model:'
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑 `models/__init__.py` 文件以添加一个新的 Python 文件用于配置设置模型：
- en: '[PRE14]'
  id: totrans-194
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'To extend the core configuration wizard by adding new options to it, add the
    `models/res_config_settings.py` file with the following code:'
  id: totrans-195
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要通过添加新选项来扩展核心配置向导，请添加包含以下代码的 `models/res_config_settings.py` 文件：
- en: '[PRE15]'
  id: totrans-196
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'To make the options available in the UI, add `views/res_config_settings.xml`,
    which extends the settings form view:'
  id: totrans-197
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要在用户界面中提供这些选项，请添加 `views/res_config_settings.xml`，它扩展了设置表单视图：
- en: '[PRE16]'
  id: totrans-198
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'In the settings form view, add the option to add a start date feature:'
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置表单视图中，添加添加开始日期功能的选项：
- en: '[PRE17]'
  id: totrans-200
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'In the settings form view, add the option to install the Note module:'
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在设置表单视图中，添加安装笔记模块的选项：
- en: '[PRE18]'
  id: totrans-202
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'After upgrading the add-on module, the two new configuration options should
    be available at **Settings** | **General Settings**. The screen should look like
    this:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 在升级附加模块后，两个新的配置选项应在 **设置** | **常规设置** 下可用。屏幕应如下所示：
- en: '![Figure 10.6 – Hostel config in General Settings](img/B20997_10_6.jpg)'
  id: totrans-204
  prefs: []
  type: TYPE_IMG
  zh: '![图 10.6 – 常规设置中的宿舍配置](img/B20997_10_6.jpg)'
- en: Figure 10.6 – Hostel config in General Settings
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 图 10.6 – 常规设置中的宿舍配置
- en: As shown in the preceding screenshot, you will have new settings in the **Hostel**
    section. The first option, **Manage hostel start date**, will enable the start
    date feature for the hostel record. The second option, **Install Notes app**,
    will install Odoo’s Notes app.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 如前一个截图所示，您将在**宿舍**部分看到新的设置。第一个选项，**管理宿舍开始日期**，将为宿舍记录启用开始日期功能。第二个选项，**安装笔记应用**，将安装Odoo的笔记应用。
- en: How it works...
  id: totrans-207
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The core `base` module provides the `res.config.settings` model, which provides
    the business logic behind the activation option. The `base_setup` add-on module
    uses the `res.config.settings` model to provide several basic configuration options
    that can be made available inside a new database. It also makes the **Settings**
    | **General Settings** menu available.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 核心的`base`模块提供了`res.config.settings`模型，该模型提供了激活选项背后的业务逻辑。`base_setup`附加模块使用`res.config.settings`模型提供一些基本配置选项，这些选项可以在新数据库中提供。它还使**设置**
    | **常规设置**菜单可用。
- en: The `base_setup` module adapts `res.config.settings` to a central management
    dashboard, so we need to extend it to add configuration settings.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`base_setup`模块将`res.config.settings`适配到中央管理仪表板，因此我们需要扩展它以添加配置设置。'
- en: If we decide to create a specific settings form for the Hostel app, we can still
    inherit from the `res.config.settings` model with a different `_name` and then,
    for the new model, provide the menu option and form view for just those settings.
    We already saw this method in the *Adding your own settings options* recipe of
    [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side* *Development
    Techniques*.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们决定为宿舍应用创建一个特定的设置表单，我们仍然可以从`res.config.settings`模型继承，使用不同的`_name`，然后为新的模型提供菜单选项和表单视图，仅针对这些设置。我们已经在[*第8章*](B20997_08.xhtml#_idTextAnchor388)的*添加自己的设置选项*食谱中看到了这种方法，*高级服务器端开发技术*。
- en: 'We activated these functionalities in two ways: by activating a security group
    and making the functionality visible to the user, and by installing an add-on
    module that offers this feature. The fundamental `res.config.settings` model provides
    the logic necessary to handle both of these scenarios.'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 我们通过两种方式激活了这些功能：通过激活一个安全组并使功能对用户可见，以及通过安装一个提供此功能的附加模块。基本的`res.config.settings`模型提供了处理这两种情况所需的逻辑。
- en: The first step in this tutorial adds the `base_setup` add-on module to the dependencies
    since it provides extensions to the `res.config.settings` model we want to use.
    It also adds an additional XML data file that we will need to add the new options
    to the **General** **Settings** form.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 本教程的第一步是将`base_setup`附加模块添加到依赖项中，因为它为我们想要使用的`res.config.settings`模型提供了扩展。它还添加了一个额外的XML数据文件，我们将需要将其添加到**常规**
    **设置**表单中。
- en: 'In the second step, we created a new security group, **Hostel: start date feature**.
    The feature that needs to be activated should only be visible to that group, so
    it will be hidden until the group is enabled.'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 在第二步中，我们创建了一个新的安全组，**宿舍：开始日期功能**。需要激活的功能应该只对该组可见，因此它将在该组启用之前隐藏。
- en: In our example, we want the hostel start date to only be available when the
    corresponding configuration option is enabled. To achieve this, we can use the
    `groups` attribute on the field so that it is made available only for this security
    group. We did this at the model level so that it is automatically applied to all
    the UI views where the field is used.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，我们希望宿舍开始日期仅在相应的配置选项启用时才可用。为了实现这一点，我们可以使用字段的`groups`属性，使其仅对这一安全组可用。我们在模型级别做了这件事，以便它自动应用于所有使用该字段的UI视图。
- en: Finally, we extended the `res.config.settings` model to add the new options.
    Each option is a Boolean field, and its name must begin either with `group_` or
    `module_`, according to what we want it to do.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们扩展了`res.config.settings`模型以添加新的选项。每个选项都是一个布尔字段，其名称必须以`group_`或`module_`开头，根据我们希望它执行的操作。
- en: The `group_` option field should have an `implied_group` attribute and should
    be a string that contains a comma-separated list of XML IDs for the security groups
    to activate when it is enabled. The XML IDs must be complete, with the module
    name, dot, and identifier name provided; for example, `module_name.identifier`.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: '`group_`选项字段应该有一个`implied_group`属性，并且应该是一个包含逗号分隔的安全组XML ID列表的字符串，当它启用时将激活这些安全组。XML
    ID必须是完整的，包括模块名称、点以及标识符名称；例如，`module_name.identifier`。'
- en: We can also provide a `group` attribute to specify which security groups the
    feature will be enabled for. It will be enabled for all the Employee-based groups
    if no groups are defined. Thus, the related groups won’t apply to portal security
    groups, since these don’t inherit from the Employee base security group like the
    other regular security groups do.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以提供一个 `group` 属性来指定哪些安全组将启用该功能。如果没有定义任何组，它将为所有基于员工的组启用。因此，相关的组不会应用于门户安全组，因为这些组不像其他常规安全组那样从员工基本安全组继承。
- en: 'The mechanism behind the activation is quite simple: it adds the security group
    in the `group` attribute to `implied_group`, thus making the related feature visible
    to the corresponding users.'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 激活背后的机制相当简单：它将 `group` 属性中的安全组添加到 `implied_group` 中，从而使相关的功能对相应的用户可见。
- en: The `module_` option field does not require any additional attributes. The remaining
    part of the field name identifies the module to be installed when this option
    has been activated. In our example, `module_note` will install the Note module.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: '`module_` 选项字段不需要任何额外的属性。字段名剩余部分标识了当此选项被激活时将安装的模块。在我们的示例中，`module_note` 将安装
    Note 模块。'
- en: Important information
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Unchecking the box will uninstall the module without warning, which can cause
    data loss (models or fields and module data will be removed as a consequence).
    To avoid unchecking the box by accident, the `secure_uninstall` community module
    (from [https://github.com/OCA/server-tools](https://github.com/OCA/server-tools))
    prompts the user for a password before they uninstall the add-on module.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 取消勾选将不会警告即卸载模块，这可能导致数据丢失（模型、字段和模块数据将被删除作为后果）。为了避免意外取消勾选，`secure_uninstall` 社区模块（来自
    [https://github.com/OCA/server-tools](https://github.com/OCA/server-tools)）在用户卸载附加模块之前会提示用户输入密码。
- en: There’s more...
  id: totrans-222
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Configuration settings can also have fields named with the `default_` prefix.
    When one of these has a value, the ORM will set it as a global default. The `settings`
    field should have a `default_model` attribute to identify the model that’s been
    affected, and the field name after the `default_` prefix identifies the `model`
    field that will have the default value set.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 配置设置也可以有以 `default_` 前缀命名的字段。当其中之一有值时，ORM 将将其设置为全局默认值。`settings` 字段应该有一个 `default_model`
    属性来标识受影响的模型，并且 `default_` 前缀后面的字段名标识了将设置默认值的 `model` 字段。
- en: Additionally, fields with none of the three prefixes mentioned can be used for
    other settings, but you will need to implement the logic to populate their values,
    using the `get_default_` name prefixed methods, and have them act when their values
    are edited using the `set_` name prefixed methods.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，没有提到这三个前缀之一的字段可以用于其他设置，但您需要实现填充它们值的逻辑，使用以 `get_default_` 命名的前缀方法，并使用以 `set_`
    命名的前缀方法在它们的值被编辑时执行操作。
- en: For those who would like to dive deeper into the details of the configuration
    settings, take a look at Odoo’s source code in `./odoo/addons/base/models/res_config.py`,
    which is extensively commented on.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 对于那些想深入了解配置设置细节的人来说，请查看 Odoo 的源代码在 `./odoo/addons/base/models/res_config.py`，那里有大量的注释。
- en: Accessing recordsets as a superuser
  id: totrans-226
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 以超级用户身份访问记录集
- en: We looked at security strategies including access rules, security groups, and
    record rules in prior recipes. You can avoid unauthorized access by using these
    approaches. However, in some complicated business scenarios, you may need to view
    or edit records, even if the user does not have access to them. For example, suppose
    the public user does not have access to the leads records, but the user may produce
    leads records in the backend by submitting the website form.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们探讨了包括访问规则、安全组和记录规则在内的安全策略。您可以通过这些方法避免未经授权的访问。然而，在某些复杂的企业场景中，您可能需要查看或编辑记录，即使用户没有访问权限。例如，假设公共用户没有访问线索记录的权限，但用户可能通过提交网站表单在后台生成线索记录。
- en: You may access recordsets as a superuser by using `sudo()`. We covered `sudo()`
    in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side Development
    Techniques*, in the *Changing the user that performs an action* recipe. We’ll
    see here that even if you’ve set ACL rules or assigned a security group to the
    field, you may still acquire access using `sudo()`.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过使用 `sudo()` 以超级用户身份访问记录集。我们在 [*第 8 章*](B20997_08.xhtml#_idTextAnchor388)
    的 *高级服务器端开发技术* 菜谱中介绍了 `sudo()`。在这里，我们将看到即使您已设置 ACL 规则或将安全组分配给字段，您仍然可以使用 `sudo()`
    获取访问权限。
- en: How to do it...
  id: totrans-229
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We will use the same `my_hostel` module from the previous tutorial. We already
    have an ALC rule that gives read-only access to normal users. We will add a new
    field with security groups so that only the Manager user has access to it. After
    that, we will modify the field value for the normal user. Follow these steps to
    achieve this:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前教程中的相同`my_hostel`模块。我们已经有了一个只读访问权限的ALC规则，适用于普通用户。我们将添加一个新字段，并使用安全组，以便只有管理员用户可以访问它。之后，我们将修改普通用户的字段值。按照以下步骤实现：
- en: 'Add the new field to the `hostel.hostel` model:'
  id: totrans-231
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将新字段添加到`hostel.hostel`模型：
- en: '[PRE19]'
  id: totrans-232
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Add the field to the form view:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字段添加到表单视图：
- en: '[PRE20]'
  id: totrans-234
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add the `add_details()` method to the `hostel.hostel` model:'
  id: totrans-235
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`add_details()`方法添加到`hostel.hostel`模型：
- en: '[PRE21]'
  id: totrans-236
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add the button to the form view so that we can trigger our method from the
    user interface. This should be placed inside the `<``header>` tag:'
  id: totrans-237
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将按钮添加到表单视图，以便我们可以从用户界面触发我们的方法。这应该放在`<header>`标签内部：
- en: '[PRE22]'
  id: totrans-238
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: Restart the server and update the module to apply these changes.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动服务器并更新模块以应用这些更改。
- en: How it works...
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *Steps 1* and *2*, we added a new field called `details_added` to the model
    and form view. Note that we put the `my_hostel.group_hostel_manager` group on
    the field in Python, so this field can only be accessed by the Manager user.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*和*步骤2*中，我们向模型和表单视图添加了一个名为`details_added`的新字段。请注意，我们在Python中将`my_hostel.group_hostel_manager`组放在字段上，因此此字段只能由管理员用户访问。
- en: In the next step, we added the `add_details()` method. We updated the value
    of the `details_added()` field inside this method’s body. Note that we used `sudo()`
    before calling the write method.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一步中，我们添加了`add_details()`方法。我们更新了此方法体内`details_added()`字段的值。请注意，我们在调用写入方法之前使用了`sudo()`。
- en: Finally, we added a button in the form view to trigger the method from the user
    interface.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们在表单视图中添加了一个按钮，用于从用户界面触发该方法。
- en: To test this implementation, you need to log in with the non-manager user. If
    you have loaded the database with demonstration data, you can log in with the
    demo user and then click on the `add_details()` method will be called, and this
    will write the message into the `details_added` field, even if the user doesn’t
    have proper rights. You can check the value of the field through the admin user
    because this field will be hidden from the demo user.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 为了测试这个实现，您需要使用非管理员用户登录。如果您已经用演示数据加载了数据库，您可以使用演示用户登录，然后点击`add_details()`方法将被调用，这将把消息写入`details_added`字段，即使用户没有适当的权限。您可以通过管理员用户检查字段的值，因为此字段将从演示用户那里隐藏。
- en: Upon clicking the `add_details()` method as an argument, `self`. Before we wrote
    the values into the hostel recordset, we used `self.sudo()`. This returns the
    same recordset but with superuser rights. This recordset will have the `su=True`
    environment attribute, and it will bypass all access rules and record rules. Because
    of that, the non-manager user will be able to write in the hostel record.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 当点击`add_details()`方法作为参数时，使用`self`。在我们将值写入宿舍记录集之前，我们使用了`self.sudo()`。这返回相同的记录集，但具有超级用户权限。这个记录集将具有`su=True`环境属性，并且将绕过所有访问规则和记录规则。正因为如此，非管理员用户将能够写入宿舍记录。
- en: There’s more...
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: You need to be extra careful when you use `sudo()` because it bypasses all access
    rights. If you want to access the recordset as another user, you can pass the
    ID of that user inside `sudo` – for example, `self.sudo(uid)`. This will return
    a recordset containing the environment of that user. This way, it will not bypass
    all the access rules and record rules, but you can perform all the actions that
    are allowed for that user.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 当您使用`sudo()`时需要格外小心，因为它绕过了所有访问权限。如果您想以其他用户的身份访问记录集，可以在`sudo`内部传递该用户的ID – 例如，`self.sudo(uid)`。这将返回包含该用户环境的记录集。这样，它将不会绕过所有访问规则和记录规则，但您可以执行该用户允许的所有操作。
- en: Hiding view elements and menus based on groups
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 根据组隐藏视图元素和菜单
- en: We covered how to hide fields from some users using group parameters in the
    Python field declaration in previous recipes. Another method for hiding fields
    in the user interface is to add security groups to the XML elements in the view
    specification. You may also conceal security groups from a certain user by using
    menus.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的菜谱中，我们介绍了如何使用Python字段声明中的组参数来隐藏某些用户的字段。在用户界面中隐藏字段的另一种方法是向视图规范中的XML元素添加安全组。您还可以通过使用菜单来隐藏特定用户的安全组。
- en: Getting ready
  id: totrans-250
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will reuse the `my_hostel` add-on module from the previous
    recipe. In the previous recipe, we added a button to the `<header>` tag. We will
    hide that whole header from a few users by adding a group attribute to it.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将重用前一个菜谱中的 `my_hostel` 扩展模块。在前一个菜谱中，我们向 `<header>` 标签添加了一个按钮。我们将通过向其添加组属性来隐藏几个用户的整个头部。
- en: Add the model, the views, and the menus for the `hostel.room.category` model.
    We will hide the category menus from a user. Please refer to [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118),
    *Application Models*, to learn how to add model views and menus.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 添加 `hostel.room.category` 模型的模型、视图和菜单。我们将隐藏对用户的类别菜单。请参阅 [*第 4 章*](B20997_04.xhtml#_idTextAnchor118)
    *应用模型*，了解如何添加模型视图和菜单。
- en: How to do it...
  id: totrans-253
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to hide elements based on security groups:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤根据安全组隐藏元素：
- en: 'Add a `groups` attribute to the `<header>` tag to hide it from other users:'
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `<header>` 标签添加 `groups` 属性以隐藏它对其他用户：
- en: '[PRE23]'
  id: totrans-256
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add the `groups` attribute to the `<menuitem>` hostel category so that it’s
    only displayed for librarian users:'
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向 `<menuitem>` 宿舍类别添加 `groups` 属性，以便它仅对图书管理员用户显示：
- en: '[PRE24]'
  id: totrans-258
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: Restart the server and update the module to apply these changes.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动服务器并更新模块以应用这些更改。
- en: How it works...
  id: totrans-260
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *Step 1*, we added `groups="my_hostel.group_hostel_manager"` to the `<header>`
    tag. This means that the whole header part will only be visible to hostel users
    and hostel managers. Normal backend users who don’t have `group_hostel_manager`
    will not see the header part.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们将 `groups="my_hostel.group_hostel_manager"` 添加到 `<header>` 标签中。这意味着整个头部部分将仅对宿舍用户和宿舍管理员可见。没有
    `group_hostel_manager` 的普通后端用户将看不到头部部分。
- en: In *Step 2*, we added the `groups="my_hostel.group_hostel_manager"` attribute
    to `menuitem`. This means that this menu is only visible to hostel users.
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 2* 中，我们将 `groups="my_hostel.group_hostel_manager"` 属性添加到 `menuitem`。这意味着此菜单仅对宿舍用户可见。
- en: You can use the `groups` attribute almost everywhere, including `<field>`, `<notebook>`,
    `<group>`, and `<menuitems>`, or on any tag from the view architecture. Odoo will
    hide those elements if the user doesn’t have that group. You can use the same
    group attributes in web pages and *QWeb reports*, which will be covered in [*Chapter
    12*](B20997_12.xhtml#_idTextAnchor628), *Automation, Workflows, Emails, and Printing*,
    and [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS* *Website Development*.
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: 您几乎可以在任何地方使用 `groups` 属性，包括 `<field>`、`<notebook>`、`<group>` 和 `<menuitems>`，或者在任何视图架构的标签上。如果用户没有那个组，Odoo
    将隐藏这些元素。您可以在网页和 *QWeb 报告* 中使用相同的组属性，这些将在 [*第 12 章*](B20997_12.xhtml#_idTextAnchor628)
    *自动化、工作流、电子邮件和打印* 和 [*第 14 章*](B20997_14.xhtml#_idTextAnchor734) *CMS 网站开发* 中介绍。
- en: As we saw in the *Accessing recordsets as a superuser* recipe of this chapter,
    we can hide fields from some users using the `groups` argument in the Python field
    definition. Note that there is a big difference between using security groups
    on fields and using Python security groups in views. Security groups in Python
    provide real security; unauthorized users can’t even access the fields through
    ORM or RPC calls. However, the groups in view are just for improving usability.
    Fields that are hidden through groups in the XML file can still be accessed through
    RPC or ORM.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们在本章的 *以超级用户访问记录集* 菜谱中看到的，我们可以通过在 Python 字段定义中使用 `groups` 参数来隐藏某些用户的部分字段。请注意，在字段上使用安全组和在视图中使用
    Python 安全组之间存在很大差异。Python 中的安全组提供真正的安全性；未经授权的用户甚至无法通过 ORM 或 RPC 调用来访问字段。然而，视图中的组只是为了提高可用性。通过
    XML 文件中的组隐藏的字段仍然可以通过 RPC 或 ORM 访问。
- en: See also
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: Please refer to [*Chapter 4*](B20997_04.xhtml#_idTextAnchor118), *Application
    Models*, to learn how to add model views and menus.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 请参阅 [*第 4 章*](B20997_04.xhtml#_idTextAnchor118) *应用模型*，了解如何添加模型视图和菜单。
