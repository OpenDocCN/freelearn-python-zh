- en: '13'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '13'
- en: Error Handling
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 错误处理
- en: '**Error handling** is a critical component in the user experience of any web
    application. **Flask** provides several built-in tools and options for handling
    errors in a clean and efficient manner. The goal of error handling is to catch
    and respond to errors that may occur during the execution of your application
    such as runtime errors, exceptions, and invalid user inputs.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: '**错误处理**是任何Web应用程序用户体验中的关键组件。**Flask**提供了几个内置的工具和选项，用于以干净和高效的方式处理错误。错误处理的目标是捕获和响应在应用程序执行过程中可能发生的错误，例如运行时错误、异常和无效的用户输入。'
- en: Flask provides a built-in debugger that can be used to catch and diagnose errors
    during development. So, why is the concept of error handling so important in any
    web application? An error-handling mechanism provides meaningful error messages
    to users when things go south when expected to go north, helping to maintain the
    overall quality of the user experience. Also, proactive error handling makes debugging
    easy.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: Flask提供了一个内置的调试器，可以在开发过程中用于捕获和诊断错误。那么，为什么错误处理在任何Web应用程序中都是一个如此重要的概念呢？错误处理机制在预期向北发展却向南发展时，向用户提供有意义的错误消息，有助于维护用户体验的整体质量。此外，主动的错误处理使得调试变得容易。
- en: If error-handling implementation is well thought out, then debugging issues
    and identifying the root causes of problems in the application becomes easier.
    As a developer, you would also want to increase the reliability of your application
    by anticipating and handling potential errors. This invariably makes your application
    more reliable and less likely to break under unexpected conditions.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 如果错误处理实现得很好，那么调试问题和识别应用程序中问题的根本原因就会变得更容易。作为开发者，你也会希望通过预测和处理潜在的错误来提高应用程序的可靠性。这无疑使得你的应用程序更加可靠，并且不太可能在意外情况下崩溃。
- en: In this chapter, we will explore the different strategies and techniques for
    handling errors in Flask web applications. You will understand and learn how to
    use the built-in **Flask debugger**, implement **error handlers**, and create
    custom **error pages** in order to provide meaningful feedback to the user.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将探讨处理Flask Web应用程序中错误的不同策略和技术。你将了解并学习如何使用内置的**Flask调试器**、实现**错误处理器**以及创建自定义的**错误页面**，以便向用户提供有意义的反馈。
- en: 'In this chapter, you will learn about the following topics:'
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习以下主题：
- en: Using the Flask debugger
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Flask调试器
- en: Creating error handlers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建错误处理器
- en: Creating custom error pages
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义错误页面
- en: Tracking events in your application
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 跟踪应用程序中的事件
- en: Sending error emails to administrators
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向管理员发送错误邮件
- en: Technical requirements
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: 'The complete code for this chapter is available on GitHub at: [https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter13](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter13).'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的完整代码可在GitHub上找到：[https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter13](https://github.com/PacktPublishing/Full-Stack-Flask-and-React/tree/main/Chapter13)。
- en: Using the Flask debugger
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用Flask调试器
- en: Flask as a lightweight Python web framework is widely used for building web
    applications. One of the out-of-the-box benefits of using Flask is its built-in
    debugger, which provides a powerful tool for identifying and fixing errors in
    your application.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: Flask作为一个轻量级的Python网络框架，被广泛用于构建Web应用程序。使用Flask的一个即用即得的好处是其内置的调试器，它为识别和修复应用程序中的错误提供了一个强大的工具。
- en: When an error occurs in your Flask application, the debugger will automatically
    be activated. The debugger will provide detailed information about the error,
    including a stack trace, source code context, and any variables that were in scope
    at the time the error occurred. This information is golden for determining the
    root cause of the error and possible ideas for fixing it.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 当你的Flask应用程序发生错误时，调试器会自动激活。调试器将提供关于错误的详细信息，包括堆栈跟踪、源代码上下文以及错误发生时在作用域内的任何变量。这些信息对于确定错误的根本原因和修复它的可能想法至关重要。
- en: The Flask debugger also provides some interactive tools that can be used to
    inspect the state of your application and understand what is happening. For instance,
    you can evaluate expressions and examine the values of variables. You can also
    set breakpoints in your code, and step through your code line by line to see how
    it is executed.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Flask调试器还提供了一些交互式工具，可以用来检查应用程序的状态并理解正在发生什么。例如，你可以评估表达式并检查变量的值。你还可以在代码中设置断点，逐行执行代码以查看其执行情况。
- en: 'Let’s examine this code snippet for illustration:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: In this instance, you can set a breakpoint at the line before `c = a + b`, as
    done in the preceding code, and run the application. When the breakpoint is hit,
    you can enter the debugger and inspect the values of `a`, `b`, and `c`. You can
    also evaluate expressions and see their results. For instance, to evaluate the
    expression `a + b`, you can type `a + b` in the debugger’s command prompt and
    hit *Enter*. The result, `30`, will be displayed. You can also step through your
    code line by line by using the `n` command to go to the next line, and the `c`
    command to continue execution until the next breakpoint.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
- en: In this way, you can use the Flask debugger’s interactive tools to understand
    what is happening in your application and debug it more effectively. This can
    be especially useful when dealing with large or complex code bases. The Flask
    debugger’s interactive tools are useful when it is difficult to understand what
    is causing an error without additional tools and information.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
- en: Aside from interactive tools, Flask also provides a debug mode that can be enabled
    to provide more detailed error messages. When the debug mode is enabled, Flask
    will display detailed error pages with information about the error including a
    stack trace and the source code context. This information can be extremely helpful
    for debugging complex issues.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
- en: To enable the Flask debugger, simply set the `debug` configuration value to
    `True` in your Flask application. In this book project, we set this parameter
    in the `.env` file. You should only use this in development, as it can reveal
    sensitive information about your application to anyone who has access to it.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Flask allows third-party extensions that can be used to enhance
    the debugging experience. For instance, `Flask-DebugToolbar` provides a toolbar
    that can be added to your application to display information about the current
    request and its context.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
- en: Flask’s built-in debugger is a powerful tool that can help you quickly identify
    and fix errors in your application. Whether you are working on a small project
    or an enterprise-grade application, the debugger provides valuable information
    that can help you resolve issues and improve the reliability and performance of
    your application.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss and implement error handlers in Flask web applications.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
- en: Creating error handlers
  id: totrans-27
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flask also provides a mechanism for handling errors called error handlers. Error
    handlers are functions that are invoked when a specific error occurs in your application.
    These functions can be used to return custom error pages, log information about
    the error, or perform any other action that is appropriate for the error. To define
    an error handler in the Flask web application, you need to use the `errorhandler`
    decorator.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
- en: The decorator takes the error code as its argument, and the function that it
    decorates is the error handler that will be invoked when that error occurs. The
    error handler function takes an error object as its argument, which provides information
    about the error that occurred. This information can be used to provide a more
    detailed error response to the client or to log additional information about the
    error for debugging purposes.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
- en: In Flask backend and **React** frontend applications, error handling is a crucial
    step in ensuring a smooth user experience. As mentioned earlier, the goal of error
    handlers is to provide meaningful feedback to the user when something goes wrong,
    rather than simply returning a generic error message.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you can define error handlers for errors `400`, `404`, and `500`.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
- en: Flask backend
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The following code shows error handlers that are created for the HTTP error
    codes `404` (not found), `400` (bad request), and `500` (internal server error):'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: The `not_found`, `bad_request`, and `internal_server_error` functions return
    a `JSON` response containing an error message, along with the corresponding HTTP
    error codes.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
- en: React frontend
  id: totrans-36
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the React frontend, you can handle these errors by making an HTTP request
    to the Flask backend and checking the response for errors. For example, you can
    use **Axios** in React:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The preceding error-handling code illustrates a React frontend communicating
    with a Flask backend API. The code imports `React`, `useState`, and `useEffect`
    hooks, as well as the `axios` library for making API requests. The code then defines
    a functional `Speakers` component that makes an API `GET` request to the `/api/v1/speakers`
    endpoint at the backend.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
- en: The `useEffect` hook is used to manage the API call, and the response is handled
    in a `.then()` block for success or a `.catch()` block for errors. In the `.catch()`
    block, the error response status is checked and a specific error message is set
    based on the status code. For instance, if the status code is `404`, `Resource
    not found` will be set as the error.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
- en: The error message is then displayed in the UI using conditional rendering, with
    the `No error` text being displayed if there is no error. The error message is
    stored in the state using the `useState` hook, with the initial value being `null`.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will discuss and implement custom error pages in Flask web applications.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom error pages
  id: totrans-43
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In addition to error handlers in Flask, you can also create custom error pages
    that provide a better user experience. When an error occurs in your application,
    the error handler can return a custom error page with information about the error,
    instructions for resolving the issue, or any other content that may be appropriate.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
- en: To create a custom error page in Flask, simply create an error handler as described
    in the preceding section and return a `JSON` response that contains the content
    for the error page.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
- en: 'For instance, let’s take a look at the `JSON` response containing a custom
    error message in the following code:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  id: totrans-47
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The preceding code returns a `JSON` response containing an error message, along
    with the corresponding HTTP error codes, when a `404` error occurs. Let’s define
    the React frontend to handle the UI with an `ErrorPage` component:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding code shows the `ErrorPage` component that takes an error prop
    and displays it in the error message. You can use this component in your application
    to display the custom error page whenever an error occurs.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
- en: 'You can simply add the `ErrorPage` component to the rest of the application.
    For instance, use the following code to add the `ErrorPage` component to the `Speaker`
    component:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Next, we will discuss how to track and log events in Flask web applications.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
- en: Tracking events in your application
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Flask allows you to track events in your application in an elegant way. This
    is critical to identifying potential issues. By tracking events, you can get a
    better understanding of what is happening in your application and make informed
    decisions about how to improve the situation.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
- en: There are several ways to track events in Flask, including using built-in logging
    functionality, third-party logging services, or custom code tracking. For instance,
    you can use the Python `logging` module to log information about your application
    activities to a file or to the console.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
- en: 'Using the logging module is easy; simply import `logging` into your Flask application
    and configure it to log information at the appropriate level. For instance, the
    following code configures the logging module to log information to a file named
    `error.log`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The preceding code demonstrates the implementation of the logging module in
    a Flask web application. The code sets up a logger object using the `logging.getLogger(__name__)`
    method. The logger is set to the debug level with `logger.setLevel(logging.DEBUG)`.
    A `FileHandler` object is created with `file_handler = logging.FileHandler('error.log')`,
    and the handler is set to the debug level as well with `file_handler.setLevel(logging.DEBUG)`.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
- en: The handler is added to the logger object with `logger.addHandler(file_handler)`.
    In the `logger()` function, there are four logging methods called `debug()`, `info()`,
    `warning()`, and `error()`. These methods log messages to the log file with the
    respective log levels (debug, info, warning, and error). The messages logged are
    simple string messages.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, when tracking events in Flask applications, you can use a third-party
    logging service. Using third-party logging services with Flask can provide more
    advanced logging features such as centralized log management, real-time log searching,
    and alerting.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
- en: For instance, you can use cloud-based log management services such as **AWS
    CloudWatch**, **Loggly**, and **Papertrail**.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
- en: Let’s examine briefly the implementation of AWS CloudWatch. AWS CloudWatch is
    a logging service that provides log management and monitoring for AWS resources.
    To use AWS CloudWatch with Flask, you can use the **CloudWatch Logs** API to send
    log data directly to AWS CloudWatch.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps implement logging in Flask applications using AWS CloudWatch:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
- en: Set up an AWS account and create a **CloudWatch** **Log Group**.
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Install the `boto3` library, which provides a Python interface to the AWS CloudWatch
    API. Install `Boto2` with `pip install boto3` and ensure your virtual environment
    is activated.
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your Flask application, import the `boto3` library and configure it with
    your AWS credentials.
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a logger and set its log level to the desired level of verbosity.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In your application code, use the logger to log messages at various levels such
    as info, warning, error, and so on.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configure the logger to send logs to AWS CloudWatch. This can be done by creating
    a custom handler that sends log messages to CloudWatch using the `boto3` library.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Deploy your Flask application and monitor your logs in AWS CloudWatch.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Let’s explore the code implementation:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The full source code can be found on GitHub.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code shows the implementation of how to use the `boto3` library
    to send logs from a Flask application to AWS CloudWatch. It works as follows:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
- en: The `boto3` library is imported and a default session is set up with the specified
    `AWS access key ID`, `secret access key`, and `region name`.
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A logger object is created using the `logging` module and the logging level
    is set to `DEBUG`.
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A `CloudWatch` client object is created using the `boto3` library.
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A custom handler class named `CloudWatchHandler` is created that inherits from
    the `logging.Handler` class and overrides its `emit` method. In the `emit` method,
    the log message is formatted and sent to `AWS CloudWatch` using the `put_log_events`
    method of the `CloudWatch` client.
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: An instance of the `CloudWatchHandler` class is created and its logging level
    is set to `DEBUG`. This handler is then added to the logger object.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A route named `/logging_with_aws_cloudwatch` is created that generates log messages
    of different levels (`debug`, `info`, `warning`, and `error`) using the logger
    object.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Handling errors and tracking events in your Flask application is crucial to
    ensuring its reliability and robustness. With Flask’s built-in debugger, error
    handlers, custom error pages, logging, and third-party logging libraries, you
    can easily diagnose and resolve problems as they show up in Flask application
    development.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
- en: Now that you are able to implement Flask’s built-in debugger, error handlers,
    custom error pages, logging, and third-party logging libraries, wouldn’t it be
    nice if you had the means for the admins to receive email messages about errors
    in your application logs in real time?
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
- en: Let’s work through how this can be implemented in Flask.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
- en: Sending error emails to administrators
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sending error emails to administrators provides an efficient way to notify them
    about errors and issues in your Flask application. This allows you to quickly
    identify and resolve problems before they escalate into bigger issues and negatively
    impact the user experience. The benefits include timely identification and resolution
    of errors, improved system reliability, and reduced downtime.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 向管理员发送错误邮件提供了一种高效的通知方式，让他们了解Flask应用程序中的错误和问题。这允许你在问题升级成更大问题并负面影响用户体验之前快速识别和解决问题。其好处包括及时识别和解决错误、提高系统可靠性和减少停机时间。
- en: 'Let’s delve into an example of sending error emails to administrators:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们深入探讨一个向管理员发送错误邮件的示例：
- en: '[PRE8]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'The preceding code demonstrates the implementation of sending error emails
    to notify administrators about errors in a Flask application. It works as follows:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码展示了在Flask应用程序中发送错误邮件以通知管理员错误实现的示例。它的工作原理如下：
- en: The code uses the `smtplib` and `email.mime.text` libraries to create and send
    an email message.
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 该代码使用 `smtplib` 和 `email.mime.text` 库来创建和发送电子邮件消息。
- en: The `send_email(error)` function takes an error message as a parameter and creates
    an email message using the `MIMEText` object. The `subject`, `sender email address`,
    `recipient email address`, and `error message` are set for the email. The email
    is then sent using the `smtplib` library through the local email server.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`send_email(error)` 函数接受一个错误消息作为参数，并使用 `MIMEText` 对象创建一个电子邮件消息。邮件的主题、发件人电子邮件地址、收件人电子邮件地址和错误消息被设置为邮件内容。然后，通过本地邮件服务器使用
    `smtplib` 库发送邮件。'
- en: Flask’s `errorhandler` decorator is used to catch any `500` internal server
    errors that occur in the application. The `internal_server_error` function is
    called when an error `500` occurs, and it calls the `send_email` function with
    the error message passed as a parameter. The function returns a response to the
    user indicating that an error occurred and an email was sent to the administrator.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: Flask的 `errorhandler` 装饰器用于捕获应用程序中发生的任何 `500` 内部服务器错误。当发生错误 `500` 时，会调用 `internal_server_error`
    函数，并使用错误消息作为参数调用 `send_email` 函数。该函数返回一个响应给用户，表明发生了错误，并向管理员发送了电子邮件。
- en: Summary
  id: totrans-93
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Error handling has been an essential aspect of software development from time
    immemorial. It is crucial to ensure that your Flask web application can handle
    errors effectively. We discussed the Flask debugger, error handlers, and custom
    error pages. With these, you can provide meaningful feedback to users and help
    maintain the stability and reliability of your application.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 错误处理自古以来就是软件开发的一个基本方面。确保你的Flask Web应用程序能够有效地处理错误至关重要。我们讨论了Flask调试器、错误处理程序和自定义错误页面。有了这些，你可以向用户提供有意义的反馈，并帮助维护应用程序的稳定性和可靠性。
- en: As full stack developers, we reinforced the importance of keeping in mind that
    error handling is a continuous process. You should regularly review and update
    your error-handling strategies to ensure that your application remains robust
    and resilient. We also considered logging errors and sending notifications to
    administrators so that you can quickly identify and resolve any issues that may
    arise.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 作为全栈开发者，我们强调了持续关注错误处理的重要性。你应该定期审查和更新你的错误处理策略，以确保你的应用程序保持健壮和弹性。我们还考虑了记录错误并向管理员发送通知，以便你可以快速识别和解决可能出现的任何问题。
- en: In short, a bug-free development experience remains a mirage for any professional
    developer. You should be prepared to effectively handle expected and unexpected
    errors in your web applications. By doing so, your application will continue to
    deliver value to your users, even in the face of unexpected errors and failures.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，无bug的开发体验对于任何专业开发者来说都只是一个幻象。你应该准备好有效地处理你的Web应用程序中的预期和意外错误。通过这样做，即使面对意外错误和故障，你的应用程序也能继续为用户提供价值。
- en: Next, we will explore modular development in Flask using **Blueprints**. With
    Blueprints and modular architecture, you can easily maintain and scale your React-Flask
    web applications.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将探讨在Flask中使用 **Blueprints** 进行模块化开发。通过Blueprints和模块化架构，你可以轻松维护和扩展你的React-Flask
    Web应用程序。
