["```py\n    1 import Image\n    2 import ImageEnhance\n    3\n    4 brightness = 3.0\n    5 peak = Image.open( \"C:\\\\images\\\\Before_BRIGHTENING.png \")\n    6 enhancer = ImageEnhance.Brightness(peak)\n    7 bright = enhancer.enhance(brightness)\n    8 bright.save( \"C:\\\\images\\\\BRIGHTENED.png \")\n    9 bright.show()\n\n    ```", "```py\n    10 contrast = 1.3\n    11 enhancer = ImageEnhance.Contrast(bright)\n    12 con = enhancer.enhance(contrast)\n    13 con.save( \"C:\\\\images\\\\CONTRAST.png \")\n    14 con.show()\n\n    ```", "```py\n    import ImageOps\n    bright = Image.open( \"C:\\\\images\\\\BRIGHTENED.png \")\n    con = ImageOps.autocontrast(bright, cutoff = 0)\n    con.show()\n\n    ```", "```py\n>>> img.getbands()\n('R', 'G', 'B', 'A')\n\n```", "```py\n    1 import Image\n    2\n    3 img = Image.open( \"C:\\\\images\\\\COLOR_TWEAK.png \")\n    4 img = img.convert('RGBA')\n    5 r, g, b, alpha = img.split()\n    6 img = Image.merge( \"RGBA \", (g, r, b, alpha))\n    7 img.show()\n\n    ```", "```py\n    1 import Image\n    2\n    3 img = Image.open( \"C:\\\\images\\\\COLOR_TWEAK.png \")\n    4 img = img.convert('RGBA')\n    5 r, g, b, alpha = img.split()\n    6 selection = r.point(lambda i: i > 120 and 150)\n    7 selection.save( \"C:\\\\images\\\\COLOR_BAND_MASK.png \")\n    8 r.paste(g, None, selection)\n    9 img = Image.merge( \"RGBA \", (r, g, b, alpha))\n    10 img.save( \"C:\\\\images\\\\COLOR_CHANGE_BAND.png \")\n    11 img.show()\n\n    ```", "```py\n    lst = map(function, range(256)) * no_of_bands\n\n    ```", "```py\nimg = img.convert('L')\n\n```", "```py\nimg = ImageOps.grayscale(img)\n\n```", "```py\nimg = Image.new('L', size)\n\n```", "```py\nimg = ImageOps.invert(img)\n\n```", "```py\nblended_image = in_image1 * (1.0 - alpha) + in_image2 * alpha\n\n```", "```py\n    1 import Image\n    2\n    3 img1 = Image.open( \"C:\\\\images\\\\BRIDGE2.png \")\n    4 img1 = img1.convert('RGBA')\n    5\n    6 img2 = Image.open( \"C:\\\\images\\\\BIRDS2.png \")\n    7 img2 = img2.convert('RGBA')\n    8\n    9 img = Image.blend(img1, img2, 0.3)\n    10 img.show()\n    11 img.save( \"C:\\\\images\\\\BLEND.png\")\n\n    ```", "```py\n    blended_img = img1 * (1 alpha) + img2* alpha\n\n    ```", "```py\n    1 import Image\n    2\n    3 def addTransparency(img, factor = 0.7 ):\n    4 img = img.convert('RGBA')\n    5 img_blender = Image.new('RGBA', img.size, (0,0,0,0))\n    6 img = Image.blend(img_blender, img, factor)\n    7 return img\n    8\n    9 img = Image.open( \"C:\\\\images\\\\SMILEY.png \")\n    10\n    11 img = addTransparency(img, factor =0.7)\n\n    ```", "```py\n    1 import Image\n    2 img = Image.open( \"C:\\\\images\\\\SMILEY.png \")\n    3 r, g, b, alpha = img.split()\n    4 alpha = alpha.point(lambda i: i>0 and 178)\n    5 img.putalpha(alpha)\n    6 img.save( \"C:\\\\images\\\\Transparent_SMILEY.png \")\n\n    ```", "```py\noutImage = Image.composite(img1, img2, mask)\n\n```", "```py\n    1 import Image\n    2\n    3 img1 = Image.open( \"C:\\\\images\\\\BRIDGE2.png \")\n    4 img1 = img1.convert('RGBA')\n    5\n    6 img2 = Image.open( \"C:\\\\images\\\\BIRDS2.png \")\n    7 img2 = img2.convert('RGBA')\n    8\n    9 r, g, b, alpha = img2.split()\n    10 alpha = alpha.point(lambda i: i>0 and 204)\n    11\n    12 img = Image.composite(img2, img1, alpha)\n    13 img.show()\n\n    ```", "```py\npython WaterMarkMaker.py [options]\n\n```", "```py\npython WaterMarkMaker.py --image1= \"C:\\foo.png \"\n--watermark= \"C:\\watermark.png \"\n--mark_pos= \"200, 200 \"\n--text= \"My Text \"\n-text_pos= \"10, 10 \"\n--transparency=0.4\n--dateStamp=True\n\n```", "```py\n    import Image, ImageDraw, ImageFont\n    import os, sys\n    import getopt\n    from datetime import date\n    class WaterMarkMaker:\n    def __init__(self):\n    pass\n    def addText(self):\n    pass\n    def addDateStamp(self):\n    pass\n    def _addTextWorker(self, txt, dateStamp = False):\n    pass\n    def addWaterMark(self):\n    pass\n    def addTransparency(self, img):\n    pass\n    def createImageObjects(self):\n    pass\n    def _getMarkPosition(self, canvasImage, markImage):\n    return\n    def processArgs(self):\n    pass\n    def printUsage(self):\n    pass\n\n    ```", "```py\n    def __init__(self):\n    # Image paths\n    self.waterMarkPath = ''\n    self.mainImgPath = ''\n    # Text to be embedded\n    self.text = ''\n    # Transparency Factor\n    self.t_factor = 0.5\n    # Anchor point for embedded text\n    self.text_pos = (0, 0)\n    # Anchor point for watermark.\n    self.mark_pos = None\n    # Date stamp\n    self.dateStamp = False\n    # Image objects\n    self.waterMark = None\n    self.mainImage = None\n    self.processArgs()\n    self.createImageObjects()\n    self.addText()\n    self.addWaterMark()\n    if self.dateStamp:\n    self.addDateStamp()\n    self.mainImage.save( \"C:\\\\images\\\\WATERMARK.png \")\n    self.mainImage.show()\n\n    ```", "```py\n    def addText(self):\n    if not self.text:\n    return\n    if self.mainImage is None:\n    print \"\\n Main Image not defined.Returning. \"\n    return\n    txt = self.text\n    self._addTextWorker(txt)\n\n    ```", "```py\n    1 def _addTextWorker(self, txt, dateStamp = False):\n    2 size = self.mainImage.size\n    3 color = (0, 0, 0)\n    4 textFont = ImageFont.truetype( \"arial.ttf \", 50)\n    5\n    6 # Create an ImageDraw instance to draw the text.\n    7 imgDrawer = ImageDraw.Draw(self.mainImage)\n    8 textSize = imgDrawer.textsize(txt, textFont)\n    9\n    10 if dateStamp:\n    11 pos_x = min(10, size[0])\n    12 pos_y = size[1] - textSize[0]\n    13 pos = (pos_x, pos_y)\n    14 else:\n    15 # We need to add text. Use self.text_pos\n    16 pos = self.text_pos\n    17 #finally add the text\n    18 imgDrawer.text(pos, txt, font=textFont)\n    19\n    20 if ( textSize[0] > size[0]\n    21 or textSize[1] > size[1] ):\n    22 print ( \"\\n Warning, the specified text \"\n    23 \"going out of bounds. \" )\n\n    ```", "```py\n    from datetime import date\n    def addDateStamp(self):\n    today = date.today()\n    time_tpl = today.timetuple()\n    year, month, day = map(str, time_tpl)\n    datestamp = \"%s/%s/%s \"%(year,month, day)\n    self._addTextWorker(datestamp, dateStamp = True)\n\n    ```", "```py\n    1 def addWaterMark(self):\n    2 # There are more than one way to achieve creating a\n    3 # watermark. The following flag,if True, will use\n    4 # Image.composite to create the watermark instead of a\n    5 # simple Image.paste\n    6 using_composite = False\n    7\n    8 if self.waterMark is None:\n    9 return\n    10 # Add Transparency\n    11 self.waterMark = self.addTransparency(self.waterMark)\n    12 # Get the anchor point\n    13 pos_x, pos_y = self._getMarkPosition(self.mainImage,\n    14 self.waterMark)\n    15 # Create the watermark\n    16 if not using_composite:\n    17 # Paste the image using the transparent\n    18 # watermark image as the mask.\n    19 self.mainImage.paste(self.waterMark,\n    20 (pos_x, pos_y),\n    21 self.waterMark)\n    22 else:\n    23 # Alternate method to create water mark.\n    24 # using Image.composite create a new canvas\n    25 canvas = Image.new('RGBA',\n    26 self.mainImage.size,\n    27 (0,0,0,0))\n    28 # Paste the watermark on the canvas\n    29 canvas.paste(self.waterMark, (pos_x, pos_y))\n    30 # Create a composite image\n    31 self.mainImage = Image.composite(canvas,\n    32 self.mainImage,\n    33 canvas)\n\n    ```", "```py\n    def addTransparency(self, img):\n    img = img.convert('RGBA')\n    img_blender = Image.new('RGBA',\n    img.size,\n    (0,0,0,0))\n    img = Image.blend(img_blender,\n    img,\n    self.t_factor)\n    return img\n\n    ```", "```py\n    python WaterMarkMaker.py\n    --image1= \"C:\\images\\KokanPeak_for_WATERMARK.png \"\n    --text= \"Peak \"\n    --text_pos= \"10, 10 \"\n    --waterMark= \"C:\\\\images\\\\SMILEY_small.png \"\n    --dateStamp=True\n\n    ```", "```py\nimg = Image.open('foo.jpg')\nfiltered_image = img.filter(FILTER)\n\n```", "```py\nfilterargs = size, scale, offset, kernel\n\n```", "```py\nfilterargs = (3, 3),\n13,\n0,\n(1, 1, 1,\n1, 5, 1,\n1, 1, 1)\n\n```", "```py\n    import ImageFilter\n    import Image\n    img = Image.open( \"C:\\\\images\\\\Before_SMOOTH.png \")\n    img = img.filter(ImageFilter.SMOOTH)\n    img.save( \"C:\\\\images\\\\ch3\\\\After_SMOOTH.png\")\n    img.show()\n\n    ```", "```py\n    import ImageFilter\n    import Image\n    img = Image.open( \"C:\\\\images\\\\0165_3_2_Before_SMOOTH.png \")\n    i = 0\n    while i < 5:\n    img = img.filter(ImageFilter.SMOOTH)\n    i += 1\n    img.save( \"C:\\\\images\\\\0165_3_3_After_SMOOTH_5X.png\")\n    img.show()\n\n    ```", "```py\nimg = img.filter(ImageFilter.SHARPEN)\n\n```", "```py\nimg = img.filter(ImageFilter.BLUR)\n\n```", "```py\n    1 import Image\n    2 import ImageFilter\n    3 import os\n    4 paths = [ \"C:\\images\\Before_EDGE_ENHANCE.png \",\n    5 \"C:\\images\\After_EDGE_ENHANCE.png \",\n    6 \"C:\\images\\EDGE_DETECTION_1.png \",\n    7 \"C:\\images\\EDGE_DETECTION_2.png \"\n    8 ]\n    9 paths = map(os.path.normpath, paths)\n    10\n    11 ( imgPath ,outImgPath1,\n    12 outImgPath2, outImgPath3) = paths\n    13 img = Image.open(imgPath)\n    14 img1 = img.filter(ImageFilter.FIND_EDGES)\n    15 img1.save(outImgPath1)\n    16\n    17 img2 = img.filter(ImageFilter.EDGE_ENHANCE)\n    18 img2.save(outImgPath2)\n    19\n    20 img3 = img2.filter(ImageFilter.FIND_EDGES)\n    21 img3.save(outImgPath3)\n\n    ```", "```py\nfilterargs = (3, 3), 1, 128, (\n-1, 0, 0,\n0, 1, 0,\n0, 0, 0\n)\n\n```", "```py\n    1 import os, sys\n    2 import Image\n    3 import ImageFilter\n    4 imgPath = \"C:\\images\\Bird_EMBOSS.png \"\n    5 outImgPath = \"C:\\images\\Bird_EMBOSSED.png \"\n    6 imgPath = os.path.normpath(imgPath)\n    6 outImgPath = os.path.normpath(outImgPath)\n    7 bird = Image.open(imgPath)\n    8 bird = bird.filter(ImageFilter.EMBOSS)\n    9 bird.save(outImgPath)\n    10 bird.show()\n\n    ```", "```py\nimg = ImageOps.expand(img, border, fill)\n\n```", "```py\nnew_width = ( right_border_thickness + image_width +\nleft_border_thickness )\nnew_height = ( top_border_thickness + image_height +\nbottom_border_thickness )\n\n```", "```py\n    1 import Image, ImageOps\n    2 img = Image.open( \"C:\\\\images\\\\FLOWER.png \")\n    3 img = ImageOps.expand(img, border=20, fill='black')\n    4 img = ImageOps.expand(img, border=40, fill='silver')\n    5 img = ImageOps.expand(img, border=2, fill='black')\n    6 img.save( \"C:\\\\images\\\\PHOTOFRAME.png \")\n    7 img.show()\n\n    ```"]