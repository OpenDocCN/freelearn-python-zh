- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Running Python Applications on EC2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we are going to learn how to run Python applications within
    the **Elastic Compute Cloud (EC2)** service. EC2 is an AWS service that allows
    you to provision a server in the cloud. You can find different types of server
    options. You need to carry out some configuration and run the server on the cloud.
    You might wonder why we need EC2 when we have Lambda. Lambda is very effective
    but has a duration limit. If you run your function for more than 15 minutes, it
    will give a timeout. What happens if your application needs to be run for a couple
    of hours because of a huge process? Lambda doesn’t work and you need your own
    server. Another reason to use EC2 would be if you need a very special configuration
    or installation that needs to be done within a specific server; you would need
    a server as well. Based on this kind of requirement, you need to have your own
    server in the cloud. We will provision a server and run a Python application within
    EC2.
  prefs: []
  type: TYPE_NORMAL
- en: 'The chapter covers the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: What is EC2?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EC2 purchasing options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: EC2 instance types
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Provisioning an EC2 server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Connecting to an EC2 server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running a simple Python application on an EC2 server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Processing a CSV file with a Python application on an EC2 server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The AWS CLI
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: What is EC2?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS EC2 is a service that provides a secure and scalable server machine in the
    cloud. The main advantage of EC2 is that server management is very easy from the
    AWS Management Console. When you provision an on-premises server, it is not easy
    to configure security policies, disk management, backup management, and so on.
    AWS accelerates all this. When you provision EC2, AWS offers different contracts
    that you need to select and all these types impact the cost.
  prefs: []
  type: TYPE_NORMAL
- en: In order to select the right service, you need to understand what services you
    are going to use, how many resources you need, and what type of storage you really
    need. These things are going to help you to reduce the cost and use EC2 efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 purchasing options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will now look at the types of EC2 contracts.
  prefs: []
  type: TYPE_NORMAL
- en: On-Demand
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this offer, you don’t need to contract for a specific time period. AWS charges
    according to the time you use the server. You can provision a server, shut it
    down, and release the server whenever you want. It is a pay-as-you-go model.
  prefs: []
  type: TYPE_NORMAL
- en: Reserved
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You need to sign a contract with AWS for 1–3 years. The key thing to note is
    that AWS offers a discount for a Reserved commitment.
  prefs: []
  type: TYPE_NORMAL
- en: Spot
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s imagine you have an application that has flexible start and end times.
    You define a bid price for whatever you are willing to pay for the server. Let’s
    imagine you have a data processing application that runs for five hours and the
    running time is not important. You are able to run at the beginning or end of
    the month; it is not a problem. You can provision a Spot instance that significantly
    reduces your cost.
  prefs: []
  type: TYPE_NORMAL
- en: Dedicated
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This is useful when your organization has a software license and is moving to
    AWS. These servers are only used for your organization. Hence, you can keep the
    license that is served to your company.
  prefs: []
  type: TYPE_NORMAL
- en: EC2 instance types
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS offers different types of servers depending on your technical requirement.
    Server type selection is one of the most important things to manage your budget
    and use the EC2 server efficiently. If you need to use memory processing applications
    such as **Spark**, it would be better to provision a memory-optimized server.
    On the other hand, if you need a server that needs more storage, you can use a
    storage-optimized server.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows that you are able to select more than hundreds
    of types of servers in AWS:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.01_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.1 – EC2 instance types [Source – [https://aws.amazon.com/](https://aws.amazon.com/)]
  prefs: []
  type: TYPE_NORMAL
- en: Auto-scaling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you need a clustered environment, it would be better to define an auto-scaling
    policy in order to manage resources efficiently.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s think about a batch processing job that runs once a day in order to process
    massive amounts of data. You provision more than one machine. But when the system
    is idle, you are going to be charged unnecessarily. However, if you define an
    auto-scaling policy, the system will close when it is idle. This configuration
    is going to reduce your costs. The following figure shows the minimum size of
    the launched instances and the maximum size of the desired capacity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.02_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.2 – Auto-scaling
  prefs: []
  type: TYPE_NORMAL
- en: Auto-scaling is one of the most important features of EC2\. You need to consider
    the usage of EC2 and configure an auto-scaling feature.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we took a look at the most important features of EC2\. In the
    next section, we will provision an EC2 server.
  prefs: []
  type: TYPE_NORMAL
- en: Provisioning an EC2 server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to provision an EC2 server step by step. There are different types
    of EC2 machines; we will provision a free server. I would recommend terminating
    the server when you finish your work, as we are just using EC2 for learning purposes.
  prefs: []
  type: TYPE_NORMAL
- en: 'To provision an EC2 server on AWS, carry out the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Go to the AWS Management Console.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Search for **EC2** and go to the link titled **EC2**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.03_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.3 – AWS Management Console
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to launch an instance, click **Instances** on the left side, and then
    click **Launch instances**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.04_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.4 – Create an instance
  prefs: []
  type: TYPE_NORMAL
- en: 'In the new panel, you can give a name to the EC2 instance. You can see that
    we titled ours **Test_Python**. On this launch page, AWS recommends a Linux machine,
    which is in the free tier. The free tier means that you don’t need to pay money
    to AWS. We will proceed with that option:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.05_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.5 – Instance features
  prefs: []
  type: TYPE_NORMAL
- en: 'You can now see the **Key pair (login)** panel. A key pair is used to connect
    to the server via the SSH key in a secure way. In order to create a new SSH key,
    click **Create new** **key pair**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.06_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.6 – Creating a new key pair
  prefs: []
  type: TYPE_NORMAL
- en: 'We need to give a name to the key pair. Apart from that, you can keep the key
    pair type and private key file format as the defaults. Click **Create** **key
    pair**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.07_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.7 – Naming the key pair
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click **Create key pair**, it will download the file. Please keep
    this file; it will be used to connect to the machine. The **Key pair name** dropdown
    will also be selected with your creation. When you create a new key pair in the
    upper section, the new key pair name will be visible, which you can see in the
    following screenshot. For this example, our key pair is **key_for_test_python**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.08_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.8 – The key pair is ready
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next step, we are going to create and assign a **virtual private cloud
    (VPC)** and subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.09_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.9 – VPC and subnet
  prefs: []
  type: TYPE_NORMAL
- en: 'A VPC allows AWS services to run in a logically isolated network. It is one
    of the key services that keep the service secure. You can easily isolate the servers
    with VPC configuration. The following figure illustrates a VPC and EC2 setup:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.10_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.10 – VPC [Source – https://aws.amazon.com/]
  prefs: []
  type: TYPE_NORMAL
- en: As you see, once you add one of the servers to the VPC subnet in AZ 2, it means
    the EC2 instances are logically isolated from others. Hence, you can add access
    controls to keep the server secure.
  prefs: []
  type: TYPE_NORMAL
- en: 'The subnet is also one of the important parts of a VPC. Each VPC consists of
    a subnet that defines an IP range for the VPC. In the following diagram, you can
    see the IP range for each subnet:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.11_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.11 – Subnet [Source – https://aws.amazon.com/]
  prefs: []
  type: TYPE_NORMAL
- en: 'We took a look at VPCs and subnets. Now, we need to define a VPC for the EC2
    instance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `VPC` in the search box of the **AWS** **Management Console**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.12_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.12 – VPC on the AWS Management Console
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Create VPC**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.13_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.13 – Create VPC
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you click the button, under the VPC settings, **VPC and more** is selected
    by default. This option allows you to create a VPC with subnets, which you see
    on the right side of the following screenshot. With this option, you can create
    a VPC and subnet together:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.14_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.14 – Adding VPC details
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of this page, click the **Create** **VPC** button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.15_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.15 – Creating a VPC
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click **Create VPC**, the VPC begins creation and you can see the
    status of the progress:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.16_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.16 – The VPC creation process
  prefs: []
  type: TYPE_NORMAL
- en: 'After it has been created, you are able to see the VPC and subnet in the VPC
    console:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.17_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.17 – The VPC and subnet
  prefs: []
  type: TYPE_NORMAL
- en: 'So far, we have created a VPC and a subnet. We can proceed with the EC2 creation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the **EC2** launch page again. In this case, the VPC and subnet are selected
    by default. Click **Edit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.18_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.18 – Network settings
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to connect to the machine, we need to select a public subnet and enable
    **Auto-assign public IP**. You can see the public subnet options in the **Subnet**
    dropdown. In general, it is not recommended to put production applications in
    a public subnet. As we are implementing a test project, we can proceed in this
    manner:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.19_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.19 – Enabling the public IP
  prefs: []
  type: TYPE_NORMAL
- en: 'At the bottom of the page, click **Launch instance**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.20_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.20 – Launching an instance
  prefs: []
  type: TYPE_NORMAL
- en: When we click the **Instances** link on the left side, we are able to see the
    list of instances that we have created. Congratulations, you have created your
    first server!
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.21_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.21 – Running instances
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully created a server in an efficient way. We are going to
    connect to the server in the upcoming section.
  prefs: []
  type: TYPE_NORMAL
- en: Connecting to an EC2 server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this stage, we are going to connect to the EC2 server via SSH:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the list of instances, there is a **Connect** button. Click it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.22_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.22 – Connecting an instance
  prefs: []
  type: TYPE_NORMAL
- en: 'Under the **SSH client** tab, you can see the steps to connect to the EC2 machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.23_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.23 – Steps to connect
  prefs: []
  type: TYPE_NORMAL
- en: 'In this example, I will use Mac Terminal in order to connect to the machine
    via SSH. I am copying the command in the example and pasting it into Terminal.
    You can also use different SSH applications such as PuTTY and WinSCP. Please make
    sure the PEM key file is in the same location where you execute the command or
    that you set the right path for the PEM key file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.24_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.24 – Connecting via Terminal
  prefs: []
  type: TYPE_NORMAL
- en: 'Type `yes` to confirm the connection with this machine:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.25_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.25 – Confirmation for the machine
  prefs: []
  type: TYPE_NORMAL
- en: Congratulations! You have connected to the machine.
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.26_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.26 – Connected to the machine
  prefs: []
  type: TYPE_NORMAL
- en: You have successfully connected to the server. We are going to install Python
    in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Running a simple Python application on an EC2 server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We are going to run a simple Python application on EC2\. First of all, check
    the Python version:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute `python --version` from the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.27_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.27 – Checking the Python version
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the `python` command on the command line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.28_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.28 – Connecting to the Python compiler
  prefs: []
  type: TYPE_NORMAL
- en: 'Run a simple code snippet such as `print ''Hello EC2''` and you will see that
    the compiler executes the command and prints it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.29_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.29 – Running simple code
  prefs: []
  type: TYPE_NORMAL
- en: We have executed a simple Python application. In the next section, we will run
    a simple project on EC2.
  prefs: []
  type: TYPE_NORMAL
- en: Processing a CSV file with a Python application on an EC2 server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, we processed a CSV file within Lambda. In this section,
    we will run the same application within EC2, but there will be some differences:'
  prefs: []
  type: TYPE_NORMAL
- en: Log in to the EC2 machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a folder in which to keep the `csv` file that is to be processed.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Run the `mkdir csv` command in order to create a `csv` folder on Ubuntu:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.30_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.30 – Creating a folder
  prefs: []
  type: TYPE_NORMAL
- en: After running the `mkdir` command, you can execute with the `ls` command in
    order to list your directory. As you see, the `csv` folder is created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate the `csv` folder by executing `cd csv`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.31_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.31 – Locating the csv folder
  prefs: []
  type: TYPE_NORMAL
- en: Create a sample `CSV` file in the EC2 machine.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'I have uploaded a sample CSV file for you in the following URL. Run the following
    code to download the sample CSV. The `wget` command allows you to download the
    file from the specific link:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/Figure_4.32_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.32 – Downloading the sample CSV file
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have downloaded the file, you are able to create Python code in
    order to process the CSV file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following code to download the Python code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '![](img/Figure_4.33_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.33 – Downloading the Python code
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code is very simple; the code imports the `csv` library and prints
    the first five lines within the CSV:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.34_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.34 – Python code
  prefs: []
  type: TYPE_NORMAL
- en: 'The next step is to run Python code to see the results. Execute `python fileprocessor.py`
    to run the application. After running the application, you will see the results:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.35_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.35 – Running Python code
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we saw how to run a simple Python application within an AWS
    EC2 server. Now, we will touch upon the AWS SDK for Python.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS CLI
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`awscli` to access AWS services. In this section, we will install `awscli`
    and, after that, configure an EC2 machine to upload a file from EC2:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In order to access S3 from `awscli`, we need to create an IAM role to be attached
    to EC2\. Connect to the AWS Management Console, type `IAM`, and then click **IAM**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.36_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.36 – IAM in the console
  prefs: []
  type: TYPE_NORMAL
- en: 'Click **Roles** on the left panel and then click **Create role**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.37_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.37 – Create role
  prefs: []
  type: TYPE_NORMAL
- en: 'Select **EC2** as a common use case and click **Next**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.38_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.38 – Select a service
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we need to give the required permission. Since we will access S3, check
    the **AmazonS3FullAccess** checkbox. This policy will allow users to upload and
    read the object under S3\. After selecting the policy, you can click the **Next**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.39_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.39 – Selecting the policy
  prefs: []
  type: TYPE_NORMAL
- en: 'Give a name to the role and click the **Create role** button to create a role:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.40_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: (a)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.41_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: (b)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 4.40 – Naming the role
  prefs: []
  type: TYPE_NORMAL
- en: 'In the final step to attach the role, click the **Actions** drop-down button,
    go to **Security,** and select **Modify** **IAM role**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.42_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.41 – Attach role
  prefs: []
  type: TYPE_NORMAL
- en: 'On the next screen, select **EC2ROLE**, to be attached to EC2, and click **Update**
    **IAM role**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/Figure_4.43_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.42 – Update IAM role
  prefs: []
  type: TYPE_NORMAL
- en: 'We have created and attached the required role to log in to an EC2 machine:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.44_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.43 – Task complete
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will upload a file to S3.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a file under the EC2 machine. The `touch` command helps you to create
    an empty file. Optionally, you can also create a file using another application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.45_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.44 – Creating a file
  prefs: []
  type: TYPE_NORMAL
- en: 'We can upload this file to S3 via the AWS CLI. In the previous chapter, we
    created an S3 bucket. You can use this bucket or create a new bucket to test the
    AWS CLI S3 command. Let’s upload the file to the S3 bucket. The format for uploading
    a file is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/Figure_4.46_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.45 – Uploading the file
  prefs: []
  type: TYPE_NORMAL
- en: 'We successfully uploaded the file. We are able to check whether the S3 bucket
    is uploaded from the console. Open the bucket from the S3 console and check:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/Figure_4.47_B19195.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 4.46 – Bucket content
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, the file is uploaded to the S3 bucket.
  prefs: []
  type: TYPE_NORMAL
- en: The AWS client is useful when you want to access AWS services and perform some
    tasks using commands. In this section, we learned how to copy a file to the S3
    bucket via the command line, which saves a lot of time.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned about the AWS EC2 service, which is used to create
    a server on the cloud. You can create your server in an efficient way and use
    it for different purposes, such as an application server, web server, or database
    server. We also created an EC2 server as an example and ran our Python application
    on EC2\. In the following chapter, we will take a look at how to debug our Python
    application via PyCharm.
  prefs: []
  type: TYPE_NORMAL
