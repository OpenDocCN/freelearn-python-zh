["```py\n    def search(unordered_list, term): \n       unordered_list_size = len(unordered_list) \n        for i in range(unordered_list_size): \n            if term == unordered_list[i]: \n                return i \n\n        return None \n\n```", "```py\n        if term == unordered_list[i]: \n            ... \n\n```", "```py\n    def search(ordered_list, term): \n        ordered_list_size = len(ordered_list) \n        for i in range(ordered_list_size): \n            if term == ordered_list[i]: \n                return i \n            elif ordered_list[i] > term: \n                return None \n\n        return None \n\n```", "```py\ndef binary_search(ordered_list, term): \n\n    size_of_list = len(ordered_list) - 1 \n\n    index_of_first_element = 0 \n    index_of_last_element = size_of_list \n\n    while index_of_first_element <= index_of_last_element: \n        mid_point = (index_of_first_element + index_of_last_element)/2 \n\n        if ordered_list[mid_point] == term: \n            return mid_point \n\n        if term > ordered_list[mid_point]: \n            index_of_first_element = mid_point + 1 \n        else: \n            index_of_last_element = mid_point - 1 \n\n    if index_of_first_element > index_of_last_element: \n        return None \n\n```", "```py\nmid_point = (index_of_first_element + index_of_last_element)/2 \n\n```", "```py\ndef binary_search(ordered_list, first_element_index, last_element_index, term): \n\n    if (last_element_index < first_element_index): \n        return None \n    else: \n        mid_point = first_element_index + ((last_element_index - first_element_index) / 2) \n\n        if ordered_list[mid_point] > term: \n            return binary_search(ordered_list, first_element_index, mid_point-1,term) \n        elif ordered_list[mid_point] < term: \n            return binary_search(ordered_list, mid_point+1, last_element_index, term) \n        else: \n            return mid_point \n\n```", "```py\n    store = [2, 4, 5, 12, 43, 54, 60, 77]\n    print(binary_search(store, 0, 7, 2))   \n\nOutput:\n>> 0\n\n```", "```py\nmid_point = (index_of_first_element + index_of_last_element)/2 \n\n```", "```py\ndef nearest_mid(input_list, lower_bound_index, upper_bound_index, search_value): \n    return lower_bound_index + (( upper_bound_index -lower_bound_index)/ (input_list[upper_bound_index] -input_list[lower_bound_index])) * (search_value -input_list[lower_bound_index]) \n\n```", "```py\nlower_bound_index + (( upper_bound_index - lower_bound_index)/ (input_list[upper_bound_index] - input_list[lower_bound_index])) * (search_value - input_list[lower_bound_index]) \n\n```", "```py\nlower_bound_index = 0\nupper_bound_index = 6\ninput_list[upper_bound_index] = 250\ninput_list[lower_bound_index] = 44\nsearch_value = 230\n\n```", "```py\ndef interpolation_search(ordered_list, term): \n\n    size_of_list = len(ordered_list) - 1 \n\n    index_of_first_element = 0 \n    index_of_last_element = size_of_list \n\n    while index_of_first_element <= index_of_last_element: \n        mid_point = nearest_mid(ordered_list, index_of_first_element, index_of_last_element, term) \n\n        if mid_point > index_of_last_element or mid_point < index_of_first_element: \n            return None \n\n        if ordered_list[mid_point] == term: \n            return mid_point \n\n        if term > ordered_list[mid_point]: \n            index_of_first_element = mid_point + 1 \n        else: \n            index_of_last_element = mid_point - 1 \n\n    if index_of_first_element > index_of_last_element: \n        return None \n\n```", "```py\nif term > ordered_list[mid_point]: \nindex_of_first_element = mid_point + 1 \n\n```", "```py\n[ 2, 4, 5, 12, 43, 54, 60, 77] \n\n```"]