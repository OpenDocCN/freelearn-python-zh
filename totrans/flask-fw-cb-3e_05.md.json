["```py\n$ pip install Flask-WTF\n```", "```py\nclass Product(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    name = db.Column(db.String(255))\n    price = db.Column(db.Float)\n    category_id = db.Column(db.Integer,\n      db.ForeignKey('category.id'))\n    category = db.relationship(\n        'Category', backref=db.backref('products',\n          lazy='dynamic')\n    )\n```", "```py\nfrom wtforms import StringField, DecimalField, SelectField\nfrom flask_wtf import FlaskForm\nclass ProductForm(FlaskForm):\n    name = StringField('Name')\n    price = DecimalField('Price')\n    category = SelectField('Category', coerce=int)\n```", "```py\nfrom my_app.catalog.models import ProductForm\n@catalog.route('/product-create', methods=['GET', 'POST'])\ndef create_product():\n    form = ProductForm(meta={'csrf': False})\n    categories = [(c.id, c.name) for c in\n      Category.query.all()]\n    form.category.choices = categories\n    if request.method == 'POST':\n        name = request.form.get('name')\n        price = request.form.get('price')\n        category = Category.query.get_or_404(\n            request.form.get('category')\n        )\n        product = Product(name, price, category)\n        db.session.add(product)\n        db.session.commit()\n        flash('The product %s has been created' % name,\n          'success')\n        return redirect(url_for('catalog.product',\n          id=product.id))\n    return render_template('product-create.html',\n      form=form)\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    <form method=\"POST\" action=\"{{\n      url_for('catalog.create_product') }}\" role=\"form\">\n      <div class=\"form-group\">{{ form.name.label }}: {{\n        form.name() }}</div>\n      <div class=\"form-group\">{{ form.price.label }}: {{\n        form.price() }}</div>\n      <div class=\"form-group\">{{ form.category.label }}: {{\n        form.category() }}</div>\n      <button type=\"submit\" class=\"btn btn-\n        default\">Submit</button>\n    </form>\n  </div>\n{% endblock %}\n```", "```py\nfrom decimal import Decimal\nclass ProductForm(FlaskForm):\n    name = StringField('Name',\n      validators=[InputRequired()])\n    price = DecimalField('Price', validators=[\n        InputRequired(), NumberRange(min=Decimal('0.0'))\n    ])\n    category = SelectField(\n        'Category', validators=[InputRequired()],\n          coerce=int\n    )\n```", "```py\n@catalog.route('/product-create', methods=['GET', 'POST'])\ndef create_product():\n    form = ProductForm(meta={'csrf': False})\n    categories = [(c.id, c.name) for c in\n      Category.query.all()]\n    form.category.choices = categories\n    if form.validate_on_submit():\n        name = form.name.data\n        price = form.price.data\n        category = Category.query.get_or_404(\n            form.category.data\n        )\n        product = Product(name, price, category)\n        db.session.add(product)\n        db.session.commit()\n        flash('The product %s has been created' % name,\n          'success')\n        return redirect(url_for('catalog.product',\n          id=product.id))\n    if form.errors:\n        flash(form.errors, 'danger')\n    return render_template('product-create.html',\n      form=form)\n```", "```py\nclass NameForm(FlaskForm):\n    name = StringField('Name',\n      validators=[InputRequired()])\nclass ProductForm(NameForm):\n    price = DecimalField('Price', validators=[\n        InputRequired(), NumberRange(min=Decimal('0.0'))\n    ])\n    category = SelectField(\n        'Category', validators=[InputRequired()],\n          coerce=int\n    )\nclass CategoryForm(NameForm):\n    pass\n```", "```py\n@catalog.route('/category-create', methods=['GET', 'POST'])\ndef create_category():\n    form = CategoryForm(meta={'csrf': False})\n    if form.validate_on_submit():\n        name = form.name.data\n        category = Category(name)\n        db.session.add(category)\n        db.session.commit()\n        flash(\n            'The category %s has been created' % name,\n              'success'\n        )\n        return redirect(url_for('catalog.category',\n          id=category.id))\n    if form.errors:\n        flash(form.errors)\n    return render_template('category-create.html',\n      form=form)\n```", "```py\n{% extends 'home.html' %}\n{% block container %}\n  <div class=\"top-pad\">\n    <form method=\"POST\" action=\"{{\n      url_for('catalog.create_category') }}\" role=\"form\">\n      <div class=\"form-group\">{{ form.name.label }}: {{\n        form.name() }}</div>\n      <button type=\"submit\" class=\"btn btn-\n        default\">Submit</button>\n    </form>\n  </div>\n{% endblock %}\n```", "```py\nclass CategoryField(SelectField):\n    def iter_choices(self):\n        categories = [(c.id, c.name) for c in\n          Category.query.all()]\n        for value, label in categories:\n            yield (value, label, self.coerce(value) ==\n              self.data)\n    def pre_validate(self, form):\n        for v, _ in [(c.id, c.name) for c in\n          Category.query.all()]:\n            if self.data == v:\n                break\n        else:\n            raise ValueError(self.gettext('Not a valid\n              choice'))\nclass ProductForm(NameForm):\n    price = DecimalField('Price', validators=[\n        InputRequired(), NumberRange(min=Decimal('0.0'))\n    ])\n    category = CategoryField(\n        'Category', validators=[InputRequired()],\n          coerce=int\n    )\n```", "```py\ncategories = [(c.id, c.name) for c in Category.query.all()]\nform.category.choices = categories\n```", "```py\ndef check_duplicate_category(case_sensitive=True):\n    def _check_duplicate(form, field):\n        if case_sensitive:\n            res = Category.query.filter(\n                Category.name.like('%' + field.data + '%')\n            ).first()\n        else:\n            res = Category.query.filter(\n                Category.name.ilike('%' + field.data + '%')\n            ).first()\n        if res:\n            raise ValidationError(\n                'Category named %s already exists' %\n                  field.data\n            )\n    return _check_duplicate\nclass CategoryForm(NameForm):\n    name = StringField('Name', validators=[\n        InputRequired(), check_duplicate_category()\n    ])\n```", "```py\nfrom wtforms.widgets import html_params, Select\nfrom markupsafe import Markup\nclass CustomCategoryInput(Select):\n    def __call__(self, field, **kwargs):\n        kwargs.setdefault('id', field.id)\n        html = []\n        for val, label, selected in field.iter_choices():\n            html.append(\n                '<input type=\"radio\" %s> %s' % (\n                    html_params(\n                        name=field.name, value=val,\n                          checked=selected, **kwargs\n                    ), label\n                )\n            )\n        return Markup(' '.join(html))\nclass CategoryField(SelectField):\n    widget = CustomCategoryInput()\n    # Rest of the code remains same as in last recipe\n      Creating custom field and validation\n```", "```py\nimport os\nALLOWED_EXTENSIONS = set(['txt', 'pdf', 'png', 'jpg',\n  'jpeg', 'gif'])\napp.config['UPLOAD_FOLDER'] = os.path.realpath('.') +\n  '/my_app/static/uploads'\n```", "```py\nfrom flask_wtf.file import FileField, FileRequired\nclass Product(db.Model):\n    image_path = db.Column(db.String(255))\n    def __init__(self, name, price, category, image_path):\n        self.image_path = image_path\nclass ProductForm(NameForm):\n    image = FileField('Product Image',\n      validators=[FileRequired()])\n```", "```py\nimport os\nfrom werkzeug.utils import secure_filename\nfrom my_app import ALLOWED_EXTENSIONS\n@catalog.route('/product-create', methods=['GET', 'POST'])\ndef create_product():\n    form = ProductForm(meta={'csrf': False})\n    if form.validate_on_submit():\n        name = form.name.data\n        price = form.price.data\n        category = Category.query.get_or_404(\n            form.category.data\n        )\n        image = form.image.data\n        if allowed_file(image.filename):\n            filename = secure_filename(image.filename)\n            image.save(os.path.join(app.config\n              ['UPLOAD_FOLDER'], filename))\n        product = Product(name, price, category, filename)\n        db.session.add(product)\n        db.session.commit()\n        flash('The product %s has been created' % name,\n          'success')\n        return redirect(url_for('catalog.product',\n          id=product.id))\n    if form.errors:\n        flash(form.errors, 'danger')\n    return render_template('product-create.html',\n      form=form)\n```", "```py\n<form method=\"POST\"\n        action=\"{{ url_for('catalog.create_product') }}\"\n        role=\"form\"\n        enctype=\"multipart/form-data\">\n      <!-- The other field definitions as always -->\n      <div class=\"form-group\">{{ form.image.label }}: {{\n        form.image(style='display:inline;') }}</div>\n      <button type=\"submit\" class=\"btn btn-\n        default\">Submit</button>\n    </form>\n```", "```py\n<img src=\"{{ url_for('static', filename='uploads/' +\n  product.image_path) }}\"/>\n```", "```py\napp.config['WTF_CSRF_SECRET_KEY'] = 'random key for form'\n```", "```py\n<form method=\"POST\" action=\"/some-action-like-create-\n  product\">\n    {{ form.csrf_token }}\n</form>\n```", "```py\nfrom flask_wtf.csrf import CSRFProtect\n#\n# Add configurations #\nCSRFProtect(app)\n```", "```py\n<script type=\"text/javascript\">\n    var csrfToken = \"{{ csrf_token() }}\";\n</script>\n```", "```py\n<meta name=\"csrf-token\" content=\"{{ csrf_token() }}\"/>\n```", "```py\n$.ajaxSetup({\n    beforeSend: function(xhr, settings) {\n        if (!/^(GET|HEAD|OPTIONS|TRACE)$/i\n          .test(settings.type)) {\n            xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\n        }\n    }\n})\n```"]