- en: Chapter 1. Getting Started with BeagleBone
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第1章. 开始使用BeagleBone
- en: If you are reading this book right now, it means that you have taken your first
    step to get started with your BeagleBone board to build real-time physical computing
    systems using your BeagleBone board and Python programming language. This chapter
    will teach you how to set up your BeagleBone board for the first time and write
    your first few Python codes on it.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您现在正在阅读这本书，这意味着您已经迈出了第一步，开始使用您的BeagleBone板和Python编程语言构建实时物理计算系统。本章将教您如何首次设置您的BeagleBone板，并在其上编写您的第一个Python代码。
- en: By end of this book, you would have learned the basics of interfacing electronics
    to BeagleBone boards and coding it using Python which will allow you to build
    almost anything from a home automation system to a robot through examples given
    in this book.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 到本书结束时，您将学习如何使用Python将电子设备连接到BeagleBone板的基本知识，这将允许您通过本书中给出的示例构建几乎任何东西，从家庭自动化系统到机器人。
- en: 'Firstly, in this chapter, you will learn how to set up your BeagleBone board
    for the first time with a new operating system, followed by usage of some basic
    Linux Shell commands that will help you out while we work on the Shell Terminal
    to write and execute python codes and do much more like installing different libraries
    and software on your BeagleBone board. Once you get familiar with usage of the
    Linux terminal, you will write your first code on python that will run on your
    BeagleBone board. Once you are comfortable with that, we will modify the code
    to make it do something more in the next chapters. Most of the time, we will be
    using the freely available open-source codes and libraries available on the Internet
    to write programs on top of it and using it to make the program work for our requirement
    instead of entirely writing a code from scratch to build our embedded systems
    using BeagleBone board. The contents of this chapter are divided into the following
    sections:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，在本章中，您将学习如何使用新操作系统首次设置您的BeagleBone板，然后使用一些基本的Linux Shell命令，这些命令将帮助您在Shell终端上编写和执行Python代码，并执行更多操作，如安装不同的库和软件到您的BeagleBone板上。一旦您熟悉了Linux终端的使用，您将在Python上编写您的第一个代码，该代码将在您的BeagleBone板上运行。一旦您对此感到舒适，我们将在下一章中修改代码，使其执行更多操作。大多数时候，我们将使用互联网上免费提供的开源代码和库来编写程序，并使用它来满足我们的需求，而不是从头开始编写代码来构建我们的嵌入式系统，使用BeagleBone板。本章内容分为以下部分：
- en: Prerequisites
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 前提条件
- en: About the single board computer - BeagleBone board
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于单板计算机 - BeagleBone板
- en: Know your BeagleBone board
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解您的BeagleBone板
- en: Setting up your BeagleBone board
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设置您的BeagleBone板
- en: Working on Linux Shell
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Linux Shell上工作
- en: Coding on Python in BeagleBone board
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在BeagleBone板上用Python编程
- en: Prerequisites
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 前提条件
- en: This topic will cover what parts you need to get started with BeagleBone Black.
    You can buy them online or pick them up from any electronics store that is available
    in your locality.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 本主题将涵盖您开始使用BeagleBone Black所需的部分。您可以在网上购买，或者在您所在地区的任何电子产品店购买。
- en: 'The following is the list of materials needed to get started:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是需要开始所需的材料列表：
- en: 1x BeagleBone Black
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1x BeagleBone Black
- en: 1x miniUSB type B to type A cable
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1x miniUSB类型B到类型A的线缆
- en: 1x microSD Card (4 GB or More)
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1x microSD卡（4 GB或以上）
- en: 1x microSD Card Reader
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1x microSD卡读卡器
- en: 1x 5V DC, 2A Power Supply
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1x 5V DC，2A电源
- en: 1x Ethernet Cable
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 1x以太网线
- en: Note
  id: totrans-19
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: There are different variants of BeagleBone boards like BeagleBone, BeagleBone
    Black, BeagleBone Green and some more old variants. This book will mostly have
    the BeagleBone Black shown in the pictures. Note that BeagleBone Black can replace
    any of the other BeagleBone boards such as the BeagleBone or BeagleBone Green
    for most of the projects. These boards have their own extra features so to say.
    For example, the BeagleBone Black has more RAM, it has almost double the size
    of RAM available in BeagleBone and an in-built eMMC to store operating system
    instead of booting it up only through operating system installed on microSD card
    in BeagleBone White. Keeping in mind that this book should be able to guide people
    with most of the BeagleBone board variants, the tutorials in this book will be
    based on operating system booted from microSD card inserted on the BeagleBone
    board. We will discuss about this in detail in the Setting up your BeagleBone
    board and installing operating system's topics of this chapter.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: BeagleBone板有不同版本，如BeagleBone、BeagleBone Black、BeagleBone Green以及一些更老的版本。这本书中大部分图片将展示BeagleBone
    Black。请注意，BeagleBone Black可以替换其他BeagleBone板，如BeagleBone或BeagleBone Green，在大多数项目中使用。这些板子有自己的额外特性。例如，BeagleBone
    Black有更多的RAM，它的RAM大小几乎是BeagleBone的两倍，并且内置eMMC来存储操作系统，而不是像BeagleBone White那样仅通过安装在microSD卡上的操作系统启动。考虑到这本书应该能够指导人们使用大多数的BeagleBone板变体，本书中的教程将基于从BeagleBone板上插入的microSD卡启动的操作系统。我们将在本章的“设置你的BeagleBone板和安装操作系统”主题中详细讨论这一点。
- en: BeagleBone Black – a single board computer
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeagleBone Black – 单板计算机
- en: This topic will give you brief information about single board computers to make
    you understand what they are and where BeagleBone boards fit inside this category.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这个主题将为你提供关于单板计算机的简要信息，让你了解它们是什么，以及BeagleBone板在这个类别中的位置。
- en: Have you ever wondered how your smartphones, smart TVs, and set-top boxes work?
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经想过你的智能手机、智能电视和机顶盒是如何工作的？
- en: All these devices run custom firmware developed for specific applications based
    on the different Linux and Unix kernels. When you hear the word Linux and if you
    are familiar with Linux, you will get in your mind that it's nothing but an operating
    system, just like Windows or Mac OS X that runs on desktops and server computers.
    But in the recent years the Linux kernel is being used in most of the embedded
    systems including consumer electronics such as your smartphones, smart TVs, set-top
    boxes, and much more. Most people know Android and iOS as an operating system
    on their smart phones. But only a few know that, both these operating systems
    are based on Linux and Unix kernels.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些设备都运行基于不同Linux和Unix内核为特定应用开发的定制固件。当你听到Linux这个词，如果你熟悉Linux，你可能会想到它不过是一个操作系统，就像Windows或Mac
    OS X一样，在桌面和服务器计算机上运行。但近年来，Linux内核被广泛应用于大多数嵌入式系统，包括消费电子产品，如你的智能手机、智能电视、机顶盒等等。大多数人知道Android和iOS是智能手机上的操作系统。但只有少数人知道，这两个操作系统都是基于Linux和Unix内核的。
- en: Did you ever question how they would develop such devices? There should be a
    development board right? What are they?
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否曾经质疑过他们是如何开发出这样的设备的？应该有一个开发板吧？它们是什么？
- en: This is where Linux Development boards like our BeagleBone boards are used.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Linux开发板，如我们的BeagleBone板，被使用的场合。
- en: By adding peripherals such as touch screens, GSM modules, microphones, and speakers
    to these single board computers and writing the software that is the operating
    system with graphical user interface to make them interact with the physical world,
    we have so many smart devices now that people use every day.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加外围设备，如触摸屏、GSM模块、麦克风和扬声器到这些单板计算机，并编写操作系统软件，带有图形用户界面，使它们能够与物理世界交互，我们现在有了许多智能设备，人们每天都在使用。
- en: Nowadays you have proximity sensors, accelerometers, gyroscopes, cameras, IR
    blasters, and much more on your smartphones. These sensors and transmitters are
    connected to the CPU on your phone through the Input Output ports on the CPU,
    and there is a small piece of software that is running to communicate with these
    electronics when the whole operating system is running in the smartphone to get
    the readings from these sensors in real-time. Like the autorotation of screen
    on the latest smartphones. There is a small piece of software that is reading
    the data from accelerometer and gyroscope sensors on the phone and based on the
    orientation of the phone it turns the graphical display.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在你的智能手机上，你有了接近传感器、加速度计、陀螺仪、摄像头、红外发射器等等。这些传感器和发射器通过CPU的输入输出端口连接到你的手机CPU上，当整个操作系统在智能手机上运行时，有一小块软件正在运行以与这些电子设备通信，以实时获取这些传感器的读数。就像最新智能手机上的屏幕自动旋转。有一小块软件正在读取手机上的加速度计和陀螺仪传感器的数据，并根据手机的方向旋转图形显示。
- en: So, all these Linux development boards are tools and base boards using which
    you can build awesome real world smart devices or we can call them physical computing
    systems as they interact with the physical world and respond with an output.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，所有这些Linux开发板都是工具和基础板，使用它们你可以构建出色的现实世界智能设备，或者我们可以称它们为物理计算系统，因为它们与物理世界互动并产生输出。
- en: Getting to know your board – BeagleBone Black
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 了解你的板子——BeagleBone Black
- en: BeagleBone Black can be described as low cost single board computer that can
    be plugged into a computer monitor or TV via a HDMI cable for output and uses
    standard keyboard and mouse for input. It's capable of doing everything you'd
    expect a desktop computer to do, like playing videos, word processing, browsing
    the Internet, and so on. You can even setup a web server on your BeagleBone Black
    just like you would do if you want to set up a webserver on a Linux or Windows
    PC.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: BeagleBone Black可以被描述为一种低成本的单板计算机，可以通过HDMI线缆插入计算机显示器或电视进行输出，并使用标准键盘和鼠标进行输入。它能够完成你期望台式计算机所能做的所有事情，如播放视频、文字处理、浏览互联网等。你甚至可以在BeagleBone
    Black上设置一个网络服务器，就像你想要在Linux或Windows PC上设置一个网络服务器一样。
- en: '![Getting to know your board – BeagleBone Black](img/4602_01_01.jpg)'
  id: totrans-32
  prefs: []
  type: TYPE_IMG
  zh: '![了解你的板子——BeagleBone Black](img/4602_01_01.jpg)'
- en: But, differing from your desktop computer, the BeagleBone boards has the ability
    to interact with the physical world using the GPIO pins available on the board,
    and has been used in various physical computing applications. Starting from Internet
    of Things, Home Automation projects, to Robotics, or tweeting shark intrusion
    systems. The BeagleBone boards are being used by hardware makers around the world
    to build awesome physical computing systems which are turning into commercial
    products also in the market. OpenROV, an underwater robot being one good example
    of what someone can build using a BeagleBone Black that can turn into a successful
    commercial product.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 但是，与你的台式计算机不同，BeagleBone板具有使用板上可用的GPIO引脚与物理世界互动的能力，并且已被用于各种物理计算应用中。从物联网、智能家居项目到机器人、或推特鲨鱼入侵系统。BeagleBone板被世界各地的硬件制造商用来构建出色的物理计算系统，这些系统正在成为市场上的商业产品。OpenROV，一个水下机器人，是某人可以使用BeagleBone
    Black构建并可能成为成功商业产品的良好例子。
- en: Hardware specification of BeagleBone Black
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: BeagleBone Black硬件规格
- en: '*A picture is worth a thousand words*. The following picture describes about
    the hardware specifications of the BeagleBone Black. But you will get some more
    details about every part of the board as you read the content in the following
    picture.'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '*“一图胜千言”。以下图片描述了BeagleBone Black的硬件规格。但当你阅读以下图片中的内容时，你将了解到关于板子上每个部分的更多细节。*'
- en: '![Hardware specification of BeagleBone Black](img/4602_01_02.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![BeagleBone Black的硬件规格](img/4602_01_02.jpg)'
- en: If you are familiar with the basic setup of a computer. You will know that it
    has a CPU with RAM and Hard Disk. To the CPU you can connect your Keyboard, Mouse,
    and Monitor which are powered up using a power system.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你熟悉计算机的基本设置，你会知道它有一个CPU、RAM和硬盘。你可以将键盘、鼠标和显示器连接到CPU上，这些设备通过电源系统供电。
- en: The same setup is here in BeagleBone Black also. There is a 1GHz Processor with
    512MB of DDR3 RAM and 4GB on board eMMC storage, which replaces the Hard Disk
    to store the operating system. Just in case you want more storage to boot up using
    a different operating system, you can use an external microSD card that can have
    the operating system that you can insert into the microSD card slot for extra
    storage.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 在BeagleBone Black上也有相同的设置。它配备了一个1GHz处理器、512MB的DDR3 RAM和4GB板载eMMC存储，用于存储操作系统，取代了硬盘。如果你想要更多的存储空间来使用不同的操作系统启动，你可以使用一个外部microSD卡，该卡可以插入microSD卡槽以提供额外存储。
- en: As in every computer, the board consists of a power button to turn on and turn
    off the board and a reset button to reset the board. In addition, there is a boot
    button which is used to boot the board when the operating system is loaded on
    the microSD card instead of the eMMC. We will be learning about usage of this
    button in detail in the installing operating systems topic of this chapter.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 正如每台计算机一样，该板包含一个电源按钮用于开启和关闭板子，一个复位按钮用于重置板子。此外，还有一个启动按钮，当操作系统加载到microSD卡而不是eMMC时，用于启动板子。我们将在本章的安装操作系统主题中详细学习这个按钮的用法。
- en: There is a type A USB Host port to which you can connect peripherals such as
    USB Keyboard, USB Mouse, USB Camera, and much more, provided that the Linux drivers
    are available for the peripherals you connect to the BeagleBone Black.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 板上有一个Type A USB主机端口，你可以连接外围设备，如USB键盘、USB鼠标、USB摄像头等，前提是连接到BeagleBone Black的外围设备有可用的Linux驱动程序。
- en: Tip
  id: totrans-41
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is to be noted that the BeagleBone Black has only one USB Host Port, so you
    need to get an USB Hub to get multiple USB ports for connecting more number of
    USB devices at a time. I would recommend using a wireless Keyboard and Mouse to
    eliminate an extra USB Hub when you connect your BeagleBone Black to monitor using
    the HDMI port available.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，BeagleBone Black只有一个USB主机端口，所以你需要一个USB Hub来获得多个USB端口，以便同时连接多个USB设备。我建议使用无线键盘和鼠标，当你通过HDMI端口连接BeagleBone
    Black到显示器时，可以消除额外的USB Hub。
- en: The microHDMI port available on the BeagleBone Black gives the board the ability
    to give output to HDMI monitors and HDMI TVs just like any computer will give.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: BeagleBone Black上可用的microHDMI端口使该板能够像任何计算机一样输出到HDMI显示器和HDMI电视。
- en: You can power up the BeagleBone Black using the DC Barrel jack available on
    the left hand side corner of the board using a 5V DC, 2A adapter. There is an
    option to power the board using USB, although it is not recommended due to the
    current limit on USB ports. We will see about this in detail in the upcoming chapters
    when we connect USB Wi-Fi dongle and USB camera to the BeagleBone Black.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用板左下角的DC圆柱形插头，通过5V DC、2A适配器为BeagleBone Black供电。虽然不推荐，但也可以使用USB供电，因为USB端口有电流限制。我们将在接下来的章节中详细介绍这一点，当我们连接USB
    Wi-Fi模块和USB摄像头到BeagleBone Black时。
- en: There are 4 LEDs on board to indicate the status of the board and help us for
    identifications to boot up the BeagleBone Black from microSD card. The LEDs are
    linked with the GPIO pins on the BeagleBone Black which can be used whenever needed.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 板上共有4个LED灯，用于指示板子的状态，并帮助我们识别从microSD卡启动BeagleBone Black。这些LED灯与BeagleBone Black上的GPIO引脚相连，可以在需要时使用。
- en: You can connect the BeagleBone Black to the LAN or Internet using the Ethernet
    port available on the board using an Ethernet cable. You can even use a USB Wi-Fi
    module to give Internet access to your BeagleBone Black. In [Chapter 5](ch05.html
    "Chapter 5. Connecting Physical Computing Systems to the Internet"), *Connecting
    Physical Computing Systems to the Internet*, you will learn how to do this.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用板上的以太网端口通过以太网线将BeagleBone Black连接到局域网或互联网。你甚至可以使用USB Wi-Fi模块为BeagleBone
    Black提供互联网接入。在[第5章](ch05.html "第5章。将物理计算系统连接到互联网")“将物理计算系统连接到互联网”中，你将学习如何做到这一点。
- en: The expansion headers which are in general called the General Purpose Input
    Output (GPIO) pins include 65 digital pins. These pins can be used as digital
    input or output pins to which you can connect switches, LEDs and many more digital
    input output components, 7 analog inputs to which you can connect analog sensors
    like a potentiometer or an analog temperature sensor, 4 Serial Ports to which
    you can connect Serial Bluetooth or Xbee Modules for wireless communication or
    anything else, 2 SPI and 2 I2C Ports to connect different modules such as sensors
    or any other modules using SPI or I2C communication. It also has 8 PWM output
    pins that can be used for applications like fading and LED or in robotic applications
    for varying the speed of a motor which we will be discussing later in the upcoming
    chapters.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通常被称为通用输入输出（GPIO）引脚的扩展引脚包括65个数字引脚。这些引脚可以用作数字输入或输出引脚，您可以将开关、LED以及许多其他数字输入输出组件连接到这些引脚上，7个模拟输入，您可以将模拟传感器如电位计或模拟温度传感器连接到这些输入上，4个串行端口，您可以将串行蓝牙或Xbee模块连接到这些端口上用于无线通信或任何其他用途，2个SPI和2个I2C端口，用于连接不同的模块，如传感器或其他模块，使用SPI或I2C通信。它还有8个PWM输出引脚，可用于如淡入淡出和LED或用于在机器人应用中改变电机速度等应用，我们将在接下来的章节中讨论这些应用。
- en: We also have the serial debugging port to view the low-level firmware pre-boot
    and post-shutdown/reboot messages via a serial monitor using an external serial
    to USB converter while the system is loading up and running. After booting up
    the operating system, this also acts as a fully interactive Linux console.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还有一个串行调试端口，在系统加载和运行时，可以通过串行监视器使用外部串行到USB转换器查看低级固件预启动和后关机/重启消息。操作系统启动后，这也作为一个完全交互式的Linux控制台。
- en: Setting up your BeagleBone board
  id: totrans-49
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置您的BeagleBone板
- en: Your first step to get started with BeagleBone boards with your hands on will
    be to set it up and test it as suggested by the BeagleBone Community with the
    Debian distribution of Linux running on BeagleBone Black that comes preloaded
    on the eMMC on board. This section will walk you through that process followed
    by installing different operating system on your BeagleBone board and log in into
    it. And then get into start working with files and executing Linux Shell commands
    via SSH.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 您开始使用BeagleBone板的第一步是按照BeagleBone社区的建议设置并测试它，使用预装在eMMC上的Debian Linux发行版在BeagleBone
    Black上运行。本节将指导您完成这个过程，然后安装不同的操作系统到您的BeagleBone板上并登录到它。然后开始通过SSH使用文件和执行Linux Shell命令。
- en: Connect your BeagleBone Black using the USB cable to your Laptop or PC.
  id: totrans-51
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用USB线将您的BeagleBone Black连接到您的笔记本电脑或PC。
- en: This is the simplest method to get your BeagleBone Black up and running. Once
    you connect your BeagleBone Black, it will start to boot using the operating system
    on the eMMC storage. To log in into the operating system and start working on
    it, the BeagleBone Black has to connect to a network and the drivers that are
    provided by the BeagleBoard manufacturers allow us to create a local network between
    your BeagleBone Black and your computer when you connect it via the USB cable.
    For this, you need to download and install the device drivers provided by BeagleBone
    board makers on your PC as explained in step 2.
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是将您的BeagleBone Black启动并运行的最简单方法。一旦您连接了BeagleBone Black，它将开始使用eMMC存储上的操作系统启动。要登录操作系统并开始工作，BeagleBone
    Black必须连接到网络，而BeagleBoard制造商提供的驱动程序允许我们在通过USB线连接时在您的BeagleBone Black和电脑之间创建一个本地网络。为此，您需要按照步骤2中的说明在您的PC上下载并安装BeagleBone板制造商提供的设备驱动程序。
- en: '![Setting up your BeagleBone board](img/4602_01_03.jpg)'
  id: totrans-53
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置您的BeagleBone板](img/4602_01_03.jpg)'
- en: Download and install device drivers.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载并安装设备驱动程序。
- en: Goto [http://beagleboard.org/getting-started](http://beagleboard.org/getting-started)
  id: totrans-55
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 转到[http://beagleboard.org/getting-started](http://beagleboard.org/getting-started)
- en: Click and download the driver package based on your operating system. Mine is
    Windows (64-bit), so I am going to download that
  id: totrans-56
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 根据您的操作系统点击并下载驱动程序包。我的操作系统是Windows（64位），所以我将下载那个
- en: '![Setting up your BeagleBone board](img/4602_01_04.jpg)'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置您的BeagleBone板](img/4602_01_04.jpg)'
- en: 'Once the installation is complete, click on **Finish**. It is shown in the
    following screenshot:'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 安装完成后，点击**完成**。如下截图所示：
- en: '![Setting up your BeagleBone board](img/4602_01_05.jpg)'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![设置您的BeagleBone板](img/4602_01_05.jpg)'
- en: Once the installation is done, restart your PC. Make sure that the Wi-Fi on
    your laptop is off and also there is no Ethernet connected to your Laptop. Because
    now the BeagleBone Black device drivers will try to create a LAN connection between
    you laptop and BeagleBone Black so that you can access the webserver running by
    default on the BeagleBone Black to test it's all good, up, and running. Once you
    reboot your PC, get to step 3.
  id: totrans-60
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect to the Web Server Running on BeagleBone Black.
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open your favorite web browser and enter the IP address `192.168.7.2` on the
    URL bar, which is the default static IP assigned to BeagleBone Black.
  id: totrans-62
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'This should open up the webpage as shown in the following screenshot:'
  id: totrans-63
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up your BeagleBone board](img/4602_01_06.jpg)'
  id: totrans-64
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you get a green check mark with the message your board is connected. You
    can make sure that you got the previous steps correct and you have successfully
    connected to your board.
  id: totrans-65
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Tip
  id: totrans-66
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: If you don't get this message, try removing the USB cable connected to the BeagleBone
    Black, reconnect it and check again. If you still don't get it. Then check whether
    you did the first two steps correctly.
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Play with on board LEDs via the web server.
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If you Scroll down on the web page to which we got connected, you will find
    the section as shown in the following screenshot:'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Setting up your BeagleBone board](img/4602_01_07.jpg)'
  id: totrans-70
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: This is a sample setup made by BeagleBone makers as the first time interaction
    interface to make you understand what is possible using BeagleBone Black. In this
    section of the webpage, you can run a small script. When you click on **Run**,
    the On board status LEDs that are flashing depending on the status of the operating
    system will stop its function and start working based on the script that you see
    on the page. The code is running based on a JavaScript library built by BeagleBone
    makers called the **BoneScript**. We will not look into this in detail as we will
    be concentrating more on writing our own programs using python to work with GPIOs
    on the board. But to make you understand, here is a simple explanation on what
    is there on the script and what happens when you click on the run button on the
    webpage.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
- en: The `pinMode` function defines the on board LED pins as outputs and the `digitalWrite`
    function sets the state of the output either as HIGH or LOW. And the `setTimeout`
    function will restore the LEDs back to its normal function after the set timeout,
    that is, the program will stop running after the time that was set in the `setTimeout`
    function.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
- en: 'Say I modify the code to what is shown in the following screenshot:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
- en: '![Setting up your BeagleBone board](img/4602_01_08.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
- en: Note
  id: totrans-75
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can notice that, I have changed the states of two LEDs to LOW and other
    two are HIGH and the timeout is set to 10,000 milliseconds.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
- en: So when you click on the `Run` button. The LEDs will switch to these states
    and stay like that for 10 seconds and then restore back to its normal status indication
    routine, that is, blinking.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，当您点击“运行”按钮时，LED 将切换到这些状态，并保持10秒钟，然后恢复到其正常状态指示程序，即闪烁。
- en: You can play around with different combinations of HIGH and LOW states and setTimeout
    values so that you can see and understand what is happening.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以尝试不同的 HIGH 和 LOW 状态以及 setTimeout 值的组合，以便您可以查看和理解正在发生的事情。
- en: 'You can see the LED output state of BeagleBone Black in the following screenshot
    for the program we executed earlier:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在以下屏幕截图中看到我们之前执行的程序的 BeagleBone Black LED 输出状态：
- en: '![Setting up your BeagleBone board](img/4602_01_09.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![设置您的 BeagleBone 板](img/4602_01_09.jpg)'
- en: You can see that the two LEDs in the middle are in LOW state. It stays like
    this for 10 seconds when you run the script and then it will restore back to its
    usual routine. You can try with different timeout values and states of LEDs on
    the script given in the webpage and try clicking on the `Run` button to see how
    it works.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以看到中间的两个 LED 处于低电平状态。当您运行脚本时，它会保持这种状态10秒钟，然后恢复到其常规程序。您可以在网页上提供的脚本中尝试不同的超时值和
    LED 状态，并点击“运行”按钮以查看其工作情况。
- en: Like this we will be writing our own python programs and setting up servers
    to use the GPIOs available on the BeagleBone Black to make them work the way we
    desire to build different applications in each project that is available in this
    book.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 就这样，我们将编写自己的 Python 程序，并设置服务器，使用 BeagleBone Black 上可用的 GPIO 来实现我们想要的方式，以便在每个项目中构建不同的应用程序。
- en: Installing operating systems
  id: totrans-83
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装操作系统
- en: We can make the BeagleBone Black boot up and run using different operating systems
    just like any computer can do. Mostly Linux is used on these boards which is free
    and open source, but it is to be noted that specific distributions of Linux, Android,
    and Windows CE have been made available for these boards as well which you can
    try out.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使 BeagleBone Black 使用不同的操作系统启动和运行，就像任何计算机一样。这些板子上主要使用 Linux 系统，它是免费和开源的，但需要注意的是，这些板子上也提供了特定的
    Linux、Android 和 Windows CE 发行版，您可以尝试使用。
- en: The stable versions of these operating systems are made available at [http://beagleboard.org/latest-images](http://beagleboard.org/latest-images).
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 这些操作系统的稳定版本可在 [http://beagleboard.org/latest-images](http://beagleboard.org/latest-images)
    获取。
- en: By default, the BeagleBone Black comes preloaded with a Debian distribution
    of Linux on the eMMC of the board. However, if you want, you can flash this eMMC
    just like you do to your Hard Drive on your computer and install different operating
    systems on it.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，BeagleBone Black 在板子的 eMMC 上预装了 Debian 版本的 Linux。然而，如果您愿意，您可以像在电脑上的硬盘上一样刷新这个
    eMMC，并在上面安装不同的操作系统。
- en: Note
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: As mentioned in the note at the beginning of this chapter, considering all the
    tutorials in this book should be useful to people who own BeagleBone as well as
    the BeagleBone Black. We will choose the recommended Debian package by [www.BeagleBoard.org](http://www.BeagleBoard.org)
    Foundation and we will boot the board every time using the operating system on
    microSD card.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如本章开头所述的注意事项中提到的，考虑到本书中的所有教程都应适用于拥有 BeagleBone 和 BeagleBone Black 的人。我们将选择 [www.BeagleBoard.org](http://www.BeagleBoard.org)
    基金会推荐的 Debian 软件包，并且每次启动板子时都将使用 microSD 卡上的操作系统。
- en: 'Perform the following steps to prepare the microSD card and boot BeagleBone
    using that:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下步骤以准备 microSD 卡并使用它启动 BeagleBone：
- en: 'Goto: [http://beagleboard.org/latest-images](http://beagleboard.org/latest-images).'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 转到：[http://beagleboard.org/latest-images](http://beagleboard.org/latest-images)。
- en: Download the latest Debian Image.
  id: totrans-91
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 下载最新的 Debian 镜像。
- en: 'The following screenshot highlights the latest Debian Image available for flashing
    on microSD card:'
  id: totrans-92
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 以下截图突出了可用于在 microSD 卡上刷新的最新 Debian 镜像：
- en: '![Installing operating systems](img/4602_01_10.jpg)'
  id: totrans-93
  prefs:
  - PREF_IND
  type: TYPE_IMG
  zh: '![安装操作系统](img/4602_01_10.jpg)'
- en: Extract the image file inside the RAR file that was downloaded:![Installing
    operating systems](img/4602_01_11.jpg)
  id: totrans-94
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 提取下载的 RAR 文件中的镜像文件：![安装操作系统](img/4602_01_11.jpg)
- en: Tip
  id: totrans-95
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You might have to install WinRAR or any `.rar` file extracting software if it
    is not available in your computer already.
  id: totrans-96
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 如果您的电脑中没有 WinRAR 或其他 `.rar` 文件提取软件，您可能需要安装。
- en: Install Win32 Disk Imager software.
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 安装 Win32 Disk Imager 软件。
- en: 'To write the image file to a microSD card, we need this software. You can go
    to Google or any other search engine and type `win32 disk imager` as keyword and
    search to get the web link to download this software as shown in the following
    screenshot:'
  id: totrans-98
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Installing operating systems](img/4602_01_12.jpg)'
  id: totrans-99
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: The web link, where you can find this software is [http://sourceforge.net/projects/win32diskimager/](http://sourceforge.net/projects/win32diskimager/).
    But this keeps changing often that's why I suggest you can search it via any search
    engine with the keyword.
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Once you download the software and install it. You should be able to see the
    window as shown in the following screenshot when you open the Win32 Disk Imager:![Installing
    operating systems](img/4602_01_13.jpg)
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now that you are all set with the software, using which you can flash the operating
    system image that we downloaded. Let's move to the next step where you can use
    Win32 Disk Imager software to flash the microSD card.
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Flashing the microSD card.
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Insert the microSD into a microSD card reader and plug it onto your computer.
    It might take some time for the card reader to show up your microSD card. Once
    it shows up, you should be able to select the USB drive as shown in the following
    screenshot on the Win32 Disk Imager software.
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Installing operating systems](img/4602_01_14.jpg)'
  id: totrans-105
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now, click on the icon highlighted in the following screenshot to open the file
    explorer and select the image file that we extracted in step 3:![Installing operating
    systems](img/4602_01_15.jpg)
  id: totrans-106
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Go to the folder where you extracted the latest Debian image file and select
    it.![Installing operating systems](img/4602_01_16.jpg)
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you can write the image file to microSD card by clicking on the **Write**
    button on the Win32 Disk Imager. If you get a prompt as shown in the following
    screenshot, click on **Yes** and continue:![Installing operating systems](img/4602_01_17.jpg)
  id: totrans-108
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you click on **Yes**, the flashing process will start and the image file
    will be written on to the microSD card. The following screenshot shows the flashing
    process progressing:![Installing operating systems](img/4602_01_18.jpg)
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once the flashing is completed, you will get a message as shown in the following
    screenshot:'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Installing operating systems](img/4602_01_19.jpg)'
  id: totrans-111
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now you can click on **OK**, exit the Win32 Disk Imager software and safely
    remove the microSD card from your computer.
  id: totrans-112
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you have successfully prepared your microSD card with the latest Debian
    operating system available for BeagleBone Black. This process is same for all
    other operating systems that are available for BeagleBone boards. You can try
    out different operating systems such as the Angstrom Linux, Android, or Windows
    CE others, once you get familiar with your BeagleBone board by end of this book.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: For Mac users, you can refer to either [https://learn.adafruit.com/ssh-to-beaglebone-black-over-usb/installing-drivers-mac](https://learn.adafruit.com/ssh-to-beaglebone-black-over-usb/installing-drivers-mac)
    or [https://learn.adafruit.com/beaglebone-black-installing-operating-systems/mac-os-x](https://learn.adafruit.com/beaglebone-black-installing-operating-systems/mac-os-x).
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: Booting your BeagleBone board from a SD card
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since you have the operating system on your microSD card now, let us go ahead
    and boot your BeagleBone board from that microSD card and see how to login and
    access the filesystem via Linux Shell.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
- en: You will need your computer connected to your Router either via Ethernet or
    Wi-Fi and an Ethernet cable which you should connect between your Router and the
    BeagleBone board. The last but most important thing is an External Power Supply
    using which you will power up your BeagleBone board because power supply via a
    USB will be not be enough to run the BeagleBone board when it is booted from a
    microSD card.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Insert the microSD card into BeagleBone board.
  id: totrans-118
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now you should insert the microSD card that you have prepared into the microSD
    card slot available on your BeagleBone board.
  id: totrans-119
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Booting your BeagleBone board from a SD card](img/4602_01_20.jpg)'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Connect your BeagleBone to your LAN.
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now connect your BeagleBone board to your Internet router using an Ethernet
    cable.
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Booting your BeagleBone board from a SD card](img/4602_01_21.jpg)'
  id: totrans-123
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You need to make sure that your BeagleBone board and your computer are connected
    to the same router to follow the next steps.
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect external power supply to your BeagleBone board.![Booting your BeagleBone
    board from a SD card](img/4602_01_22.jpg)
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Boot your BeagleBone board from microSD card.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: On BeagleBone Black and BeagleBone Green, you have a Boot Button which you need
    to hold on while turning on your BeagleBone board so that it starts booting from
    the microSD card instead of the default mode where it starts to boot from the
    onboard eMMC storage which holds the operating system. In case of BeagleBone White,
    you don't have this button, it starts to boot from the microSD card itself as
    it doesn't have onboard eMMC storage.
  id: totrans-127
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Booting your BeagleBone board from a SD card](img/4602_01_23.jpg)'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Depending on the board that you have, you can decide whether to boot the board
    from microSD card or eMMC. Consider you have a BeagleBone Black just like the
    one I have shown in the preceding picture. You hold down the User Boot button
    that is highlighted on the image and turn on the power supply. Once you turn on
    the board while holding the button down, the four on-board LEDs will light up
    and stay HIGH as shown in the following picture for 1 or 2 seconds, then they
    will start to blink randomly.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
- en: '![Booting your BeagleBone board from a SD card](img/4602_01_24.jpg)'
  id: totrans-130
  prefs: []
  type: TYPE_IMG
- en: Once they start blinking, you can leave the button.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Now your BeagleBone board must have started Booting from the microSD card, so
    our next step will be to log in to the system and start working on it. The next
    topic will walk you through the steps on how to do this.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
- en: Logging into the board via SSH over Ethernet
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are familiar with Linux operations, then you might have guessed what
    this section is about. But for those people who are not daily Linux users or have
    never heard the term SSH, **Secure Shell** (**SSH**) is a network protocol that
    allows network services and remote login to be able to operate over an unsecured
    network in a secure manner. In basic terms, it's a protocol through which you
    can log in to a computer and assess its filesystem and also work on that system
    using specific commands to create and work with files on the system.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: In the steps ahead, you will work with some Linux commands that will make you
    understand this method of logging into a system and working on it.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
- en: Setup SSH Software.
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: To get started, log in to your BeagleBone board now, from a Windows PC, you
    need to install any SSH terminal software for Windows.
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_25.jpg)'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: My favorite is PuTTY, so I will be using that in the steps ahead. If you are
    new to using SSH, I would suggest you also get PuTTY.
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The software interface of PuTTY will be as shown in the following screenshot:'
  id: totrans-140
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_26.jpg)'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: You need to know the IP address or the Host Name of your BeagleBone Black to
    log in to it via SSH. The default Host Name is `beaglebone` but in some routers,
    depending on their security settings, this method of login doesn't work with Host
    Name. So, I would suggest you try to login entering the hostname first. If you
    are not able to login, follow step 2\. If you successfully connect and get the
    login prompt with Host Name, you can skip step 2 and go to Step 3.
  id: totrans-142
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_27.jpg)'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: But if you get an error as shown in the following screenshot, perform Step 2.
  id: totrans-144
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_28.jpg)'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Find an IP address assigned to BeagleBone board.
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Whenever you connect a device to your Router, say your computer, printer, or
    mobile phone. The router assigns a unique IP to these devices. The same way, the
    router must have assigned an IP to your BeagleBone board also. We can get this
    detail on the router's configuration page of your router from any browser of a
    computer that is connected to that router.
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: In most cases, the router can be assessed by entering the IP `192.168.1.1` but
    some router manufacturers have a different IP in very rare cases. If you are not
    able to assess your router using this IP `192.168.1.1`, refer your router manual
    for getting access to this page.
  id: totrans-148
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  id: totrans-149
  prefs:
  - PREF_IND
  - PREF_H3
  type: TYPE_NORMAL
- en: The images that are shown in this section are to give you an idea about how
    to log in to your router and get the IP address details assigned to your BeagleBone
    board from your router. The configuration pages and how the devices are shown
    on the router will look different depending on the router that you own.
  id: totrans-150
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Enter the `192.168.1.1` address in you browser.
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_29_R.jpg)'
  id: totrans-152
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: When it asks for **User Name** and **Password**, enter `admin` as **User Name**
    and `password` as **Password**
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: These are the mostly used credentials by default in most of the routers. Just
    in case you fail in this step, check your router's user manual.
  id: totrans-154
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Considering you logged into your router configuration page successfully, you
    will see the screen with details as shown in the following screenshot:'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_30_R.jpg)'
  id: totrans-156
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you click on the highlighted part, **Attached Devices**, you will be able
    to see the list of devices with their IP as shown in the following screenshot,
    where you can find the details of the IP address that is assigned to your BeagleBone
    board.
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_31.jpg)'
  id: totrans-158
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: So now you can note down the IP that has been assigned to your BeagleBone board.
    It can be seen that it's `192.168.1.14` in the preceding screenshot for my beaglebone
    board. We will be using this IP address to connect to the BeagleBone board via
    SSH in the next step.
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Connect via SSH using IP Address.![Logging into the board via SSH over Ethernet](img/4602_01_32.jpg)
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Once you click on **Open** you might get a security prompt as shown in the following
    screenshot. Click on **Yes** and continue.
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_33.jpg)'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now you will get the login prompt on the terminal screen as shown in the following
    screenshot:'
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_34.jpg)'
  id: totrans-164
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: If you got this far successfully, then it is time to log in to your BeagleBone
    board and start working on it via Linux Shell.
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Log in to BeagleBone board.
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: When you get the login prompt as shown in the preceding screenshot, you need
    to enter the default username which is `debian` and default password which is
    `temppwd`. Now you should have logged into Linux Shell of your BeagleBone board
    as user with username `debian`.
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Logging into the board via SSH over Ethernet](img/4602_01_35.jpg)'
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Now that you have successfully logged into your BeagleBone board's Linux Shell,
    you can start working on it using Linux Shell commands like anyone does on any
    computer that is running Linux.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: The next section will walk you through some basic Linux Shell commands that
    will come in handy for you to work with any Linux system.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
- en: Working on Linux Shell
  id: totrans-171
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Simply put, the shell is a program that takes commands from the keyboard and
    gives them to the operating system to perform. Since we will be working on BeagleBone
    board as a development board to build electronics projects, plugging it to a Monitor,
    Keyboard, and Mouse every time to work on it like a computer might be unwanted
    most of the times and you might need more resources also which is unnecessary
    all the time. So we will be using the shell command-line interface to work on
    the BeagleBone boards. If you want to learn more about the Linux command-line
    interfaces, I would suggest you visit to [http://linuxcommand.org/](http://linuxcommand.org/).
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: Now let's go ahead and try some basic shell commands and do something on your
    BeagleBone board.
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: 'You can see the kernel version using the command `uname -r`. Just type the
    command and hit enter on your keyboard, the command will get executed and you
    will see the output as shown here:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_36.jpg)'
  id: totrans-175
  prefs: []
  type: TYPE_IMG
- en: 'Next, let us check the `date` on your BeagleBone board:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_37.jpg)'
  id: totrans-177
  prefs: []
  type: TYPE_IMG
- en: Like this shell will execute your commands and you can work on your BeagleBone
    boards via the shell.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
- en: Getting kernel version and date was just for a sample test. Now let's move ahead
    and start working with the filesystem.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '`ls`: This stands for list command. This command will list out and display
    the names of folders and files available in the current working directory on which
    you are working.![Working on Linux Shell](img/4602_01_38.jpg)'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pwd`: This stands for print working directory command. This command prints
    the current working directory in which you are present.![Working on Linux Shell](img/4602_01_39.jpg)'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`mkdir`: This stands for make directory command. This command will create a
    directory in other words a folder, but you need to mention the name of the directory
    you want to create in the command followed by it.'
  id: totrans-182
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Say I want to create a folder with the name `WorkSpace`, I should enter the
    command as follows:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_40.jpg)'
  id: totrans-184
  prefs: []
  type: TYPE_IMG
- en: When you execute this command, it will create a folder named `WorkSpace` inside
    the current working directory you are in, to check whether the directory was created.
    You can try the ls command again and see that the directory named `WorkSpace`
    has been created.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_41.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
- en: To change the working directory and go inside the `WorkSpace` directory, you
    can use the next command that we will be seeing.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '`cd`: This stands for change directory command. This command will help you
    switch between directories depending on the path you provide along with this command.'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now to switch and get inside the `WorkSpace` directory that you created, you
    can type the command as follows:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  id: totrans-190
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: You can note that whenever you type a command, it executes in the current working
    that you are in. So the execution of `cd WorkSpace` now will be equivalent to
    cd `/home/debian/WorkSpace` as your current working directory is `/home/debian`.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_42.jpg)'
  id: totrans-192
  prefs: []
  type: TYPE_IMG
- en: Now you can see that you have got inside the `WorkSpace` folder, which is empty
    right now, so if you type the `ls` command now, it will just go to the next line
    on the shell terminal, it will not output anything as the folder is empty.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_43.jpg)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
- en: Now if you execute the `pwd` command, you will see that your current working
    directory has changed.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_44.jpg)'
  id: totrans-196
  prefs: []
  type: TYPE_IMG
- en: '`cat`: This stands for the cat command. This is one of the most basic commands
    that is used to read, write, and append data to files in shell.'
  id: totrans-197
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To create a text file and add some content to it, you just need to type the
    `cat` command `cat > filename.txt`
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
- en: 'Say I want to create a sample.txt file, I would type the command as shown next:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_45.jpg)'
  id: totrans-200
  prefs: []
  type: TYPE_IMG
- en: Once you type, the cursor will be waiting for the text you want to type inside
    the text file you created. Now you can type whatever text you want to type and
    when you are done press *Ctrl* + *D*. It will save the file and get back to the
    command-line interface.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: Say I typed **This is a test** and then pressed *Ctrl + D*. The shell will look
    as shown next.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_46.jpg)'
  id: totrans-203
  prefs: []
  type: TYPE_IMG
- en: Now if you type `ls` command, you can see the text file inside the `WorkSpace`
    directory.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_47.jpg)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: 'If you want to read the contents of the `sample.txt` file, again you can use
    the `cat` command as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_48.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
- en: 'Alternatively, you can even use the `more` command which we will be using mostly:'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_50.jpg)'
  id: totrans-209
  prefs: []
  type: TYPE_IMG
- en: Now that we saw how we can create a file, let's see how to delete what we created.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: '`rm`: This stands for remove command. This will let you delete any file by
    typing the filename or filename along with path followed by the command.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Say now we want to delete the `sample.txt` file we created, the command can
    be either `rm sample.txt` which will be equivalent to `rm /home/debian/WorkSpace/sample.txt`
    as your current working directory is `/home/debian/Workspace`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_51.jpg)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: After you execute this command, if you try to list the contents of the directory,
    you will notice that the file has been deleted and now the directory is empty.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: '![Working on Linux Shell](img/4602_01_52.jpg)'
  id: totrans-215
  prefs: []
  type: TYPE_IMG
- en: Like this, you can make use of the shell commands work on your BeagleBone board
    via SSH over Ethernet or Wi-Fi. We will be seeing how to connect your BeagleBone
    board to Wi-Fi in [Chapter 5](ch05.html "Chapter 5. Connecting Physical Computing
    Systems to the Internet"), *Connecting Physical Computing Systems to the Internet*
    where you can setup your BeagleBone board to connect to your router via Wi-Fi
    instead of Ethernet to give wireless access to your BeagleBone board.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have got a clear idea and hands-on experience on using the Linux
    Shell, let's go ahead and start working with python and write a sample program
    on a text editor on Linux and test it in the next and last topic of this chapter.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Writing your own Python program on BeagleBone board
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will write our first few Python codes on your BeagleBone
    board. That will take an input and make a decision based on the input and print
    out an output depending on the code that we write. There are three sample codes
    in this topic as examples, which will help you cover some fundamentals of any
    programming language, including defining variables, using arithmetic operators,
    taking input and printing output, loops and decision making algorithm.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: Before we write and execute a python program, let us get into python's interactive
    shell interface via the Linux shell and try some basic things like creating a
    variable and performing math operations on those variables.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: To open the python shell interface, you just have the type python on the Linux
    shell like you did for any Linux shell command in the previous section of this
    chapter.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you type `python` and hit *Enter*, you should be able to see the terminal
    as shown in the following screenshot:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_53.jpg)'
  id: totrans-223
  prefs: []
  type: TYPE_IMG
- en: Now you are into python's interactive shell interface where every line that
    you type is the code that you are writing and executing simultaneously in every
    step. To learn more about this, visit [https://www.python.org/shell/](https://www.python.org/shell/)
    or to get started and learn python programming language you can get our *Python
    By Example* book in our publication.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: Let's execute a series of syntax in python's interactive shell interface to
    see whether it's working.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create a variable `A` and assign value `20` to it:'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_54.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
- en: 'Now let''s `print A` to check what value it is assigned:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_55.jpg)'
  id: totrans-229
  prefs: []
  type: TYPE_IMG
- en: You can see that it prints out the value that we stored on it.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: 'Now let''s create another variable named `B` and store value `30` to it:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_56.jpg)'
  id: totrans-232
  prefs: []
  type: TYPE_IMG
- en: Let's try adding these two variables and store the result in another variable
    named `C`. Then `print C` where you can see the result of *A+B*, that is, `50`.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_57.jpg)'
  id: totrans-234
  prefs: []
  type: TYPE_IMG
- en: That is the very basic calculation we performed on a programming interface.
    We created two variables with different values and then performed an arithmetic
    operation of adding two values on those variables and printed out the result.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's get a little more ahead and store string of characters in a variable
    and print them.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_58.jpg)'
  id: totrans-237
  prefs: []
  type: TYPE_IMG
- en: Wasn't that simple. Like this you can play around with python's interactive
    shell interface to learn coding. But any programmer would like to write a code
    and execute the program to get the output on a single command right.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
- en: Let's see how that can be done now.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: 'To get out of the Python''s Interactive Shell and get back to the current working
    directory on Linux Shell, just hold the *Ctrl* button and press *D*, that is,
    *Ctrl* + *D* on the keyboard. You will be back on the Linux Shell interface as
    shown next:'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_60.jpg)'
  id: totrans-241
  prefs: []
  type: TYPE_IMG
- en: Now let's go ahead and write the program to perform the same action that we
    tried executing on python's interactive shell. That is to store two values on
    different variables and print out the result when both of them are added. Let's
    add some spice to it by doing multiple arithmetic operations on the variables
    that we create and print out the values of addition and subtraction.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
- en: You will need a text editor to write programs and save them. You can do it using
    the `cat` command also. But in future when you use indentation and more editing
    on the programs, the basic cat command usage will be difficult. So, let's start
    using the available text editor on Linux named nano, which is one of my favorite
    text editors in Linux. If you have a different choice and you are familiar with
    other text editors on Linux, such as vi or anything else, you can go ahead and
    continue the next steps using them to write programs.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: To create a python file and start writing the code on it using nano, you need
    to use the nano command followed by the filename with extension `.py`.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: Let's create a file named `ArithmeticOperations.py`.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_61.jpg)'
  id: totrans-246
  prefs: []
  type: TYPE_IMG
- en: Once you type this command, the text editor will open up.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_62.jpg)'
  id: totrans-248
  prefs: []
  type: TYPE_IMG
- en: Here you can type your code and save it using the keyboard command *Ctrl* +
    *X*.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s go ahead and write the code which is shown in the following screenshot
    and let''s save the file using *Ctrl* + *X*:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_63.jpg)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: Then type *Y* when it prompts to save the modified file.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_64.jpg)'
  id: totrans-253
  prefs: []
  type: TYPE_IMG
- en: 'Then if you want to change the file with a different name, you can change it
    in the next step before you save it. Since we created the file now only, we don''t
    need to do it. In case if you want to save the modified copy of the file in future
    with a different name, you can change the filename in this step:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_65.jpg)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: For now we will just hit *Enter* that will take us back to the Linux Shell and
    the file `AritmeticOperations.py` will be created inside the current working directory,
    which you can see by typing the `ls` command. You can also see the contents of
    the file by typing the `more` command that we learned in the previous section
    of this chapter.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_66.jpg)'
  id: totrans-257
  prefs: []
  type: TYPE_IMG
- en: Now let's execute the python script and see the output. To do this, you just
    have to type the command python followed by the python program file that we created,
    that is, the `ArithmeticOperations.py`.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_67.jpg)'
  id: totrans-259
  prefs: []
  type: TYPE_IMG
- en: Once you run the python code that you wrote, you will see the output as shown
    earlier with the results as output.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: Now that you have written and executed your first code on python and tested
    it working on your BeagleBone board, let's write another python code, which is
    shown in the following screenshot where the code will ask you to enter an input
    and whatever text you type as input will be printed on the next line and the program
    will run continuously.
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s save this python code as `InputPrinter.py`:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_68.jpg)'
  id: totrans-263
  prefs: []
  type: TYPE_IMG
- en: In this code, we will use a while loop so that the program runs continuously
    until you break it using the *Ctrl* + *D* command where it will break the program
    with an error and get back to Linux Shell.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_69.jpg)'
  id: totrans-265
  prefs: []
  type: TYPE_IMG
- en: Now let's try out our third and last program of this section and chapter, where
    when we run the code, the program asks the user to type the user's name as input
    and if they type a specific name that we compare, it prints and says **Hello**
    message or if a different name was given as input, it prints **Go Away**; let's
    call this code `Say_Hello_To_Boss.py`.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_70.jpg)'
  id: totrans-267
  prefs: []
  type: TYPE_IMG
- en: Instead of my name **Jayakarthigeyan**, you can replace it with your name or
    any string of characters on comparing which, the output decision varies.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'When you execute the code, the output will look as shown in the following screenshot:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_71.jpg)'
  id: totrans-270
  prefs: []
  type: TYPE_IMG
- en: Like we did in the previous program, you can hit *Ctrl* + *D* to stop the program
    and get back to Linux Shell.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: In this way, you can work with python programming language to create codes that
    can run on the BeagleBone boards in the way you desire.
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: Since we have come to the end of this chapter, let's give a break to our BeagleBone
    board.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: Let's power off our BeagleBone board using the command `sudo poweroff`, which
    will shut down the operating system.
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_72.jpg)'
  id: totrans-275
  prefs: []
  type: TYPE_IMG
- en: After you execute this command, if you get the error message shown in the following
    screenshot, it means the BeagleBoard has powered off.
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: '![Writing your own Python program on BeagleBone board](img/4602_01_73.jpg)'
  id: totrans-277
  prefs: []
  type: TYPE_IMG
- en: You can turn off the power supply that was connected to your BeagleBone board
    now.
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-279
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So here we are at the end of this chapter. In this chapter, you have learned
    how to boot your BeagleBone board from a different operating system on microSD
    card and then log in to it and start coding in Python to run a routine and make
    decisions. Using this knowledge, we will see how to make an LED blink which is
    connected to any GPIO pin on the GPIO headers of the BeagleBone board and how
    to read the switch button status using python code in the next few chapters. But
    before that, we will look at fundamentals of Basic Electronics in the next chapter.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: On an extra note, you can take this chapter to another level by trying out a
    little more by connecting your BeagleBone board to an HDMI monitor using a microHDMI
    cable and connecting a USB Keyboard and Mouse to the USB Host of the BeagleBone
    board and power the monitor and BeagleBone board using external power supply and
    boot it from microSD Card and you should be able to see some GUI and you will
    be able to use the BeagleBone board like a normal Linux computer. You will be
    able access the files, manage them, and use Shell Terminal on the GUI also. If
    you own BeagleBone Black or BeagleBone Green, you can try out to flash the onboard
    eMMC using the latest Debian operating system and try out the same thing that
    we did using the operating system booted from microSD card.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
