["```py\n>>> a = \"hello\"\n>>> b = 'world' \n>>> c = '''a multiple \n... line string''' \n>>> d = \"\"\"More \n... multiple\"\"\" \n>>> e = (\"Three \" \"Strings \" \n...        \"Together\") \n```", "```py\n>>> help(str.isalpha)\nHelp on method_descriptor:\nisalpha(...)\n    S.isalpha() -> bool\n    Return True if all characters in S are alphabetic and there is at     least one character in S, False otherwise.\n    A string is alphabetic if all characters in the string are     alphabetic and there is at least one character in the string. \n```", "```py\n>>> float('45\\u06602')\n4502.0 \n```", "```py\n>>> s = \"hello world\"\n>>> s.count('l')\n3\n>>> s.find('l')\n2\n>>> s.rindex('m')\nTraceback (most recent call last):\n...\nFile \"<doctest examples.md[11]>\", line 1, in <module>\ns.rindex('m')\nValueError: substring not found \n```", "```py\n>>> s = \"hello world, how are you\"\n>>> s2 = s.split(' ')\n>>> s2\n['hello', 'world,', 'how', 'are', 'you']\n>>> '#'.join(s2)\n'hello#world,#how#are#you'\n>>> s.replace(' ', '**')\n'hello**world,**how**are**you'\n>>> s.partition(' ')\n('hello', ' ', 'world, how are you') \n```", "```py\n>>> name = \"Dusty\"\n>>> activity = \"reviewing\"\n>>> message = f\"Hello {name}, you are currently {activity}.\"\n>>> print(message) \n```", "```py\nHello Dusty, you are currently reviewing. \n```", "```py\n>>> classname = \"MyClass\"\n>>> python_code = \"print('hello world')\"\n>>> template = f\"\"\"\n... public class {classname} {{\n...     public static void main(String[] args) {{\n...         System.out.println(\"{python_code}\");\n...     }}\n... }}\n... \"\"\" \n```", "```py\n>>> print(template)\npublic class MyClass {\n    public static void main(String[] args) {\n        System.out.println(\"print('hello world')\");\n    }\n} \n```", "```py\n>>> emails = (\"steve@example.com\", \"dusty@example.com\")\n>>> message = {\n...     \"subject\": \"Next Chapter\",\n...     \"message\": \"Here's the next chapter to review!\",\n... }\n>>> formatted = f\"\"\"\n... From: <{emails[0]}>\n... To: <{emails[1]}>\n... Subject: {message['subject']}\n... \n... {message['message']}\n... \"\"\" \n```", "```py\n>>> class Notification:\n...     def __init__(\n...             self, \n...             from_addr: str, \n...             to_addr: str, \n...             subject: str, \n...             message: str\n...     ) -> None:\n...         self.from_addr = from_addr\n...         self.to_addr = to_addr\n...         self.subject = subject\n...         self._message = message\n...     def message(self):\n...         return self._message \n```", "```py\n>>> email = Notification(\n...     \"dusty@example.com\",\n...     \"steve@example.com\",\n...     \"Comments on the Chapter\",\n...     \"Can we emphasize Python 3.9 type hints?\",\n... ) \n```", "```py\n>>> formatted = f\"\"\"\n... From: <{email.from_addr}>\n... To: <{email.to_addr}>\n... Subject: {email.subject}\n... \n... {email.message()}\n... \"\"\" \n```", "```py\n>>> f\"{[2*a+1 for a in range(5)]}\"\n'[1, 3, 5, 7, 9]'\n>>> for n in range(1, 5):\n...     print(f\"{'fizz' if n % 3 == 0 else n}\")\n1\n2\nfizz\n4 \n```", "```py\n>>> a = 5\n>>> b = 7\n>>> f\"{a=}, {b=}, {31*a//42*b + b=}\"\n'a=5, b=7, 31*a//42*b + b=28' \n```", "```py\ndef distance(\n        lat1: float, lon1: float, lat2: float, lon2: float\n) -> float:\n    d_lat = radians(lat2) - radians(lat1)\n    d_lon = min(\n        (radians(lon2) - radians(lon1)) % (2 * pi),\n        (radians(lon1) - radians(lon2)) % (2 * pi),\n    )\n    R = 60 * 180 / pi\n    d = hypot(R * d_lat, R * cos(radians(lat1)) * d_lon)\n    return d \n```", "```py\n>>> annapolis = (38.9784, 76.4922)\n>>> saint_michaels = (38.7854, 76.2233)\n>>> round(distance(*annapolis, *saint_michaels), 9)\n17.070608794 \n```", "```py\n>>> annapolis = (38.9784, 76.4922)\n>>> saint_michaels = (38.7854, 76.2233)\n>>> oxford = (38.6865, 76.1716)\n>>> cambridge = (38.5632, 76.0788)\n>>> legs = [\n...     (\"to st.michaels\", annapolis, saint_michaels),\n...     (\"to oxford\", saint_michaels, oxford),\n...     (\"to cambridge\", oxford, cambridge),\n...     (\"return\", cambridge, annapolis),\n... ] \n```", "```py\n>>> speed = 5\n>>> fuel_per_hr = 2.2\n>>> for name, start, end in legs:\n...     d = distance(*start, *end)\n...     print(name, d, d/speed, d/speed*fuel_per_hr)\n    to st.michaels 17.070608794397305 3.4141217588794612     7.511067869534815\n    to oxford 6.407736547720565 1.281547309544113 2.8194040809970486\n    to cambridge 8.580230239760064 1.716046047952013 3.7753013054944287\n    return 31.571582240989173 6.314316448197834 13.891496186035237 \n```", "```py\n>>> speed = 5\n>>> fuel_per_hr = 2.2\n>>> print(f\"{'leg':16s} {'dist':5s} {'time':4s} {'fuel':4s}\")\nleg              dist  time fuel\n>>> for name, start, end in legs:\n...     d = distance(*start, *end)\n...     print(\n...         f\"{name:16s} {d:5.2f} {d/speed:4.1f} \"\n...         f\"{d/speed*fuel_per_hr:4.0f}\"\n...     )\nto st.michaels   17.07  3.4    8\nto oxford             6.41  1.3    3\nto cambridge      8.58  1.7    4\nreturn                 31.57  6.3   14 \n```", "```py\nf\"{'leg':16s} {'dist':5s} {'time':4s} {'fuel':4s}\") \n```", "```py\n>>> import datetime \n>>> important = datetime.datetime(2019, 10, 26, 13, 14)\n>>> f\"{important:%Y-%m-%d %I:%M%p}\"\n'2019-10-26 01:14PM' \n```", "```py\n>>> from decimal import Decimal\n>>> subtotal = Decimal('2.95') * Decimal('1.0625')\n>>> template = \"{label}: {number:*^{size}.2f}\" \n>>> template.format(label=\"Amount\", size=10, number=subtotal)\n'Amount: ***3.13***'\n>>> grand_total = subtotal + Decimal('12.34')\n>>> template.format(label=\"Total\", size=12, number=grand_total)\n'Total: ***15.47****' \n```", "```py\n>>> list(map(hex, b'abc'))\n['0x61', '0x62', '0x63']\n>>> list(map(bin, b'abc'))\n['0b1100001', '0b1100010', '0b1100011'] \n```", "```py\n>>> bytes([137, 80, 78, 71, 13, 10, 26, 10])\nb'\\x89PNG\\r\\n\\x1a\\n' \n```", "```py\n>>> characters = b'\\x63\\x6c\\x69\\x63\\x68\\xc3\\xa9' \n>>> characters \nb'clich\\xc3\\xa9' \n```", "```py\n>>> characters.decode(\"utf-8\") \n'cliché' \n```", "```py\n>>> characters.decode(\"iso8859-5\")\n'clichУЉ' \n```", "```py\n>>> characters.decode(\"cp037\")\n'Ä%ÑÄÇZ' \n```", "```py\n>>> characters = \"cliché\" \n>>> characters.encode(\"UTF-8\")\nb'clich\\xc3\\xa9'\n>>> characters.encode(\"latin-1\")\nb'clich\\xe9'\n>>> characters.encode(\"cp1252\")\nb'clich\\xe9'\n>>> characters.encode(\"CP437\")\nb'clich\\x82'\n>>> characters.encode(\"ascii\") \nTraceback (most recent call last):\n...\nFile \"<doctest examples.md[73]>\", line 1, in <module>\ncharacters.encode(\"ascii\")\nUnicodeEncodeError: 'ascii' codec can't encode character '\\xe9' in position 5: ordinal not in range(128) \n```", "```py\n>>> characters = \"cliché\" \n>>> characters.encode(\"ascii\", \"replace\")\nb'clich?'\n>>> characters.encode(\"ascii\", \"ignore\")\nb'clich'\n>>> characters.encode(\"ascii\", \"xmlcharrefreplace\")\nb'clich&#233;' \n```", "```py\n>>> ba = bytearray(b\"abcdefgh\") \n>>> ba[4:6] = b\"\\x15\\xa3\"\n>>> ba\nbytearray(b'abcd\\x15\\xa3gh') \n```", "```py\n>>> ba = bytearray(b\"abcdefgh\") \n>>> ba[3] = ord(b'g')\n>>> ba[4] = 68\n>>> ba\nbytearray(b'abcgDfgh') \n```", "```py\n>>> import re \n>>> search_string = \"hello world\"\n>>> pattern = r\"hello world\"\n>>> if match := re.match(pattern, search_string): \n...     print(\"regex matches\") \n...     print(match)\nregex matches\n<re.Match object; span=(0, 11), match='hello world'> \n```", "```py\nimport re\nfrom typing import Pattern, Match\ndef matchy(pattern: Pattern[str], text: str) -> None:\n    if match := re.match(pattern, text):\n        print(f\"{pattern=!r} matches at {match=!r}\")\n    else:\n        print(f\"{pattern=!r} not found in {text=!r}\") \n```", "```py\n>>> matchy(pattern=r\"hello wo\", text=\"hello world\")\npattern='hello wo' matches at match=<re.Match object; span=(0, 8), match='hello wo'>\n>>> matchy(pattern=r\"ello world\", text=\"hello world\")\npattern='ello world' not found in text='hello world' \n```", "```py\n>>> matchy(pattern=r\"^hello world$\", text=\"hello world\")\npattern='^hello world$' matches at match=<re.Match object; span=(0, 11), match='hello world'>\n>>> matchy(pattern=r\"^hello world$\", text=\"hello worl\")\npattern='^hello world$' not found in text='hello worl' \n```", "```py\n>>> matchy(pattern=r\"\\^hello world\\$\", text=\"hello worl\")\npattern='\\\\^hello world\\\\$' not found in text='hello worl'\n>>> matchy(pattern=r\"\\^hello world\\$\", text=\"^hello world$\")\npattern='\\\\^hello world\\\\$' matches at match=<re.Match object; span=(0, 13), match='^hello world$'> \n```", "```py\npattern='hel.o world' matches at match=<re.Match object; span=(0, 11), match='hello world'>\npattern='hel.o world' matches at match=<re.Match object; span=(0, 11), match='helpo world'>\npattern='hel.o world' matches at match=<re.Match object; span=(0, 11), match='hel o world'>\npattern='hel.o world' not found in text='helo world' \n```", "```py\npattern='hel[lp]o world' matches at match=<re.Match object; span=(0, 11), match='hello world'>\npattern='hel[lp]o world' matches at match=<re.Match object; span=(0, 11), match='helpo world'>\npattern='hel[lp]o world' not found in text='helPo world' \n```", "```py\n'hello   world' does not match pattern='hello [a-z] world'\n'hello b world' matches pattern='hello [a-z] world'\n'hello B world' matches pattern='hello [a-zA-Z] world'\n'hello 2 world' matches pattern='hello [a-zA-Z0-9] world' \n```", "```py\n>>> matchy(r'\\d\\d\\s\\w\\w\\w\\s\\d\\d\\d\\d', '26 Oct 2019')\npattern='\\\\d\\\\d\\\\s\\\\w\\\\w\\\\w\\\\s\\\\d\\\\d\\\\d\\\\d' matches at match=<re.Match object; span=(0, 11), match='26 Oct 2019'> \n```", "```py\npattern='0\\\\.[0-9][0-9]' matches at match=<re.Match object; span=(0, 4), match='0.05'>\npattern='0\\\\.[0-9][0-9]' not found in text='005'\npattern='0\\\\.[0-9][0-9]' not found in text='0,05' \n```", "```py\n>>> matchy(r'\\(abc\\]', \"(abc]\")\npattern='\\\\(abc\\\\]' matches at match=<re.Match object; span=(0, 5), match='(abc]'>\n>>> matchy(r'\\s\\d\\w', \" 1a\")\npattern='\\\\s\\\\d\\\\w' matches at match=<re.Match object; span=(0, 3), match=' 1a'>\n>>> matchy(r'\\s\\d\\w', \"\\t5n\")\npattern='\\\\s\\\\d\\\\w' matches at match=<re.Match object; span=(0, 3), match='\\t5n'>\n>>> matchy(r'\\s\\d\\w', \" 5n\")\npattern='\\\\s\\\\d\\\\w' matches at match=<re.Match object; span=(0, 3), match=' 5n'> \n```", "```py\n>>> matchy(r'hel*o', 'hello')\npattern='hel*o' matches at match=<re.Match object; span=(0, 5), match='hello'>\n>>> matchy(r'hel*o', 'heo')\npattern='hel*o' matches at match=<re.Match object; span=(0, 3), match='heo'>\n>>> matchy(r'hel*o', 'helllllo')\npattern='hel*o' matches at match=<re.Match object; span=(0, 8), match='helllllo'> \n```", "```py\n>>> matchy(r'[A-Z][a-z]* [a-z]*\\.', \"A string.\")\npattern='[A-Z][a-z]* [a-z]*\\\\.' matches at match=<re.Match object; span=(0, 9), match='A string.'>\n>>> matchy(r'[A-Z][a-z]* [a-z]*\\.', \"No .\")\npattern='[A-Z][a-z]* [a-z]*\\\\.' matches at match=<re.Match object; span=(0, 4), match='No .'>\n>>> matchy(r'[a-z]*.*', \"\")\npattern='[a-z]*.*' matches at match=<re.Match object; span=(0, 0), match=''> \n```", "```py\n>>> matchy(r'\\d+\\.\\d+', \"0.4\")\npattern='\\\\d+\\\\.\\\\d+' matches at match=<re.Match object; span=(0, 3), match='0.4'>\n>>> matchy(r'\\d+\\.\\d+', \"1.002\")\npattern='\\\\d+\\\\.\\\\d+' matches at match=<re.Match object; span=(0, 5), match='1.002'>\n>>> matchy(r'\\d+\\.\\d+', \"1.\")\npattern='\\\\d+\\\\.\\\\d+' not found in text='1.'\n>>> matchy(r'\\d?\\d%', \"1%\")\npattern='\\\\d?\\\\d%' matches at match=<re.Match object; span=(0, 2), match='1%'>\n>>> matchy(r'\\d?\\d%', \"99%\")\npattern='\\\\d?\\\\d%' matches at match=<re.Match object; span=(0, 3), match='99%'>\n>>> matchy(r'\\d?\\d%', \"100%\")\npattern='\\\\d?\\\\d%' not found in text='100%' \n```", "```py\npattern='abc{3}' matches at match=<re.Match object; span=(0, 5), match='abccc'>\npattern='(abc){3}' not found in text='abccc'\npattern='(abc){3}' matches at match=<re.Match object; span=(0, 9), match='abcabcabc'> \n```", "```py\n>>> matchy(r'[A-Z][a-z]*( [a-z]+)*\\.$', \"Eat.\")\npattern='[A-Z][a-z]*( [a-z]+)*\\\\.$' matches at match=<re.Match object; span=(0, 4), match='Eat.'>\n>>> matchy(r'[A-Z][a-z]*( [a-z]+)*\\.$', \"Eat more good food.\")\npattern='[A-Z][a-z]*( [a-z]+)*\\\\.$' matches at match=<re.Match object; span=(0, 19), match='Eat more good food.'>\n>>> matchy(r'[A-Z][a-z]*( [a-z]+)*\\.$', \"A good meal.\")\npattern='[A-Z][a-z]*( [a-z]+)*\\\\.$' matches at match=<re.Match object; span=(0, 12), match='A good meal.'> \n```", "```py\ndef email_domain(text: str) -> Optional[str]:\n    email_pattern = r\"[a-z0-9._%+-]+@([a-z0-9.-]+\\.[a-z]{2,})\"\n    if match := re.match(email_pattern, text, re.IGNORECASE):\n        return match.group(1)\n    else:\n        return None \n```", "```py\ndef email_domain_2(text: str) -> Optional[str]:\n    email_pattern = r\"(?P<name>[a-z0-9._%+-]+)@(?P<domain>[a-z0-9.-]+\\.[a-z]{2,})\"\n    if match := re.match(email_pattern, text, re.IGNORECASE):\n        return match.groupdict()[\"domain\"]\n    else:\n        return None \n```", "```py\n>>> import re\n>>> re.findall(r\"\\d+[hms]\", \"3h 2m   45s\")\n['3h', '2m', '45s']\n>>> re.findall(r\"(\\d+)[hms]\", \"3h:2m:45s\")\n['3', '2', '45']\n>>> re.findall(r\"(\\d+)([hms])\", \"3h, 2m, 45s\")\n[('3', 'h'), ('2', 'm'), ('45', 's')]\n>>> re.findall(r\"((\\d+)([hms]))\", \"3h - 2m - 45s\")\n[('3h', '3', 'h'), ('2m', '2', 'm'), ('45s', '45', 's')] \n```", "```py\n>>> re.findall(r\"\\d+[hms]\", \"3h 2m   45s\") \n```", "```py\n>>> duration_pattern = re.compile(r\"\\d+[hms]\")\n>>> duration_pattern.findall(\"3h 2m   45s\")\n['3h', '2m', '45s']\n>>> duration_pattern.findall(\"3h:2m:45s\")\n['3h', '2m', '45s'] \n```", "```py\n>>> import os.path\n>>> path = os.path.abspath(\n...     os.sep.join(\n...         [\"\", \"Users\", \"dusty\", \"subdir\", \"subsubdir\", \"file.ext\"]))\n>>> print(path)\n/Users/dusty/subdir/subsubdir/file.ext \n```", "```py\n>>> from pathlib import Path\n>>> path = Path(\"/Users\") / \"dusty\" / \"subdir\" / \"subsubdir\" / \"file.ext\"\n>>> print(path)\n/Users/dusty/subdir/subsubdir/file.ext \n```", "```py\nfrom pathlib import Path\nfrom typing import Callable\ndef scan_python_1(path: Path) -> int:\n    sloc = 0\n    with path.open() as source:\n        for line in source:\n            line = line.strip()\n            if line and not line.startswith(\"#\"):\n                sloc += 1\n    return sloc\ndef count_sloc(path: Path, scanner: Callable[[Path], int]) -> int:\n    if path.name.startswith(\".\"):\n        return 0\n    elif path.is_file():\n        if path.suffix != \".py\":\n            return 0\n        with path.open() as source:\n            return scanner(path)\n    elif path.is_dir():\n        count = sum(\n            count_sloc(name, scanner) for name in path.iterdir())\n        return count\n    else:\n        return 0 \n```", "```py\n>>> base = Path.cwd().parent\n>>> chapter =  base / \"ch_02\"\n>>> count = count_sloc(chapter, scan_python_1)\n>>> print(\n...     f\"{chapter.relative_to(base)}: {count} lines of code\"\n... )\nch_02: 542 lines of code \n```", "```py\n>>> zipfile.ZipFile(Path('nothing.zip'), 'w').writestr('filename', 'contents') \n```", "```py\n>>> import pickle\n>>> some_data = [\n... \"a list\", \"containing\", 5, \"items\",\n... {\"including\": [\"str\", \"int\", \"dict\"]}\n... ]\n>>> with open(\"pickled_list\", 'wb') as file: \n...     pickle.dump(some_data, file) \n>>> with open(\"pickled_list\", 'rb') as file: \n...     loaded_data = pickle.load(file) \n>>> print(loaded_data)\n['a list', 'containing', 5, 'items', {'including': ['str', 'int', 'dict']}]\n>>> assert loaded_data == some_data \n```", "```py\nfrom threading import Timer\nimport datetime\nfrom urllib.request import urlopen\nclass URLPolling:\n    def __init__(self, url: str) -> None:\n        self.url = url\n        self.contents = \"\"\n        self.last_updated: datetime.datetime\n        self.timer: Timer\n        self.update()\n    def update(self) -> None:\n        self.contents = urlopen(self.url).read()\n        self.last_updated = datetime.datetime.now()\n        self.schedule()\n    def schedule(self) -> None:\n        self.timer = Timer(3600, self.update)\n        self.timer.setDaemon(True)\n        self.timer.start() \n```", "```py\n>>> import pickle\n>>> poll = URLPolling(\"http://dusty.phillips.codes\")\n>>> pickle.dumps(poll)\nTraceback (most recent call last):\n  ...\n  File \"<doctest url_poll.__test__.test_broken[2]>\", line 1, in <module>\npickle.dumps(poll)\nTypeError: cannot pickle '_thread.lock' object \n```", "```py\ndef __getstate__(self) -> dict[str, Any]:\npickleable_state = self.__dict__.copy()\n    if \"timer\" in pickleable_state:\n        del pickleable_state[\"timer\"]\n    return pickleable_state \n```", "```py\ndef __setstate__(self, pickleable_state: dict[str, Any]) -> None:\n    self.__dict__ = pickleable_state\n    self.schedule() \n```", "```py\nclass Contact: \n    def __init__(self, first, last): \n        self.first = first \n        self.last = last \n    @property \n    def full_name(self): \n        return(\"{} {}\".format(self.first, self.last)) \n```", "```py\n>>> import json\n>>> c = Contact(\"Noriko\", \"Hannah\")\n>>> json.dumps(c.__dict__)\n'{\"first\": \"Noriko\", \"last\": \"Hannah\"}' \n```", "```py\nimport json\nclass ContactEncoder(json.JSONEncoder):\n    def default(self, obj: Any) -> Any:\n        if isinstance(obj, Contact):\n            return {\n                \"__class__\": \"Contact\",\n                \"first\": obj.first,\n                \"last\": obj.last,\n                \"full_name\": obj.full_name,\n            }\n        return super().default(obj) \n```", "```py\n>>> c = Contact(\"Noriko\", \"Hannah\")\n>>> text = json.dumps(c, cls=ContactEncoder)\n>>> text\n'{\"__class__\": \"Contact\", \"first\": \"Noriko\", \"last\": \"Hannah\", \"full_name\": \"Noriko Hannah\"}' \n```", "```py\ndef decode_contact(json_object: Any) -> Any:\n    if json_object.get(\"__class__\") == \"Contact\":\n        return Contact(json_object[\"first\"], json_object[\"last\"])\n    else:\n        return json_object \n```", "```py\n>>> some_text = (\n...     '{\"__class__\": \"Contact\", \"first\": \"Milli\", \"last\": \"Dale\", '\n...     '\"full_name\": \"Milli Dale\"}'\n... )\n>>> c2 = json.loads(some_text, object_hook=decode_contact)\n>>> c2.full_name\n'Milli Dale' \n```", "```py\ntest = TestingKnownSample(\n    species=row[\"species\"],\n    sepal_length=float(row[\"sepal_length\"]),\n    sepal_width=float(row[\"sepal_width\"]),\n    petal_length=float(row[\"petal_length\"]),\n    petal_width=float(row[\"petal_width\"]),\n) \n```", "```py\n7\\. Attribute Information:\n   1\\. sepal length in cm\n   2\\. sepal width in cm\n   3\\. petal length in cm\n   4\\. petal width in cm\n   5\\. class: \n      -- Iris Setosa\n      -- Iris Versicolour\n      -- Iris Virginica \n```", "```py\nclass CSVIrisReader:\n    \"\"\"\n    Attribute Information:\n       1\\. sepal length in cm\n       2\\. sepal width in cm\n       3\\. petal length in cm\n       4\\. petal width in cm\n       5\\. class:\n          -- Iris Setosa\n          -- Iris Versicolour\n          -- Iris Virginica\n    \"\"\"\n  header = [\n        \"sepal_length\",  # in cm\n        \"sepal_width\",  # in cm\n        \"petal_length\",  # in cm\n        \"petal_width\",  # in cm\n        \"species\",  # Iris-setosa, Iris-versicolour, Iris-virginica\n    ]\n    def __init__(self, source: Path) -> None:\n        self.source = source\n    def data_iter(self) -> Iterator[dict[str, str]]:\n        with self.source.open() as source_file:\n            reader = csv.DictReader(source_file, self.header)\n            yield from reader \n```", "```py\n>>> from model import CSVIrisReader\n>>> from pathlib import Path\n>>> test_data = Path.cwd().parent/\"bezdekIris.data\"\n>>> rdr = CSVIrisReader(test_data)\n>>> samples = list(rdr.data_iter())\n>>> len(samples)\n150\n>>> samples[0]\n{'sepal_length': '5.1', 'sepal_width': '3.5', 'petal_length': '1.4', 'petal_width': '0.2', 'species': 'Iris-setosa'} \n```", "```py\ndef load(self, raw_data_iter: Iterator[Dict[str, str]]) -> None:\n    for n, row in enumerate(raw_data_iter):\n        ... more processing here \n```", "```py\n>>> training_data = TrainingData(\"besdekIris\")\n>>> rdr = CSVIrisReader(test_data)\n>>> training_data.load(rdr.data_iter()) \n```", "```py\nclass CSVIrisReader_2:\n    \"\"\"\n    Attribute Information:\n       1\\. sepal length in cm\n       2\\. sepal width in cm\n       3\\. petal length in cm\n       4\\. petal width in cm\n       5\\. class:\n          -- Iris Setosa\n          -- Iris Versicolour\n          -- Iris Virginica\n    \"\"\"\n    def __init__(self, source: Path) -> None:\n        self.source = source\n    def data_iter(self) -> Iterator[dict[str, str]]:\n        with self.source.open() as source_file:\n            reader = csv.reader(source_file)\n            for row in reader:\n                yield dict(\n                    sepal_length=row[0],  # in cm\n                    sepal_width=row[1],  # in cm\n                    petal_length=row[2],  # in cm\n                    petal_width=row[3],  # in cm\n                    species=row[4]  # class string\n                ) \n```", "```py\nfor item in X:\n    yield item \n```", "```py\nJSON = Union[\n    None, bool, int, float, str, List['JSON'], Dict[str, 'JSON']\n] \n```", "```py\n[\n  {\n    \"sepal_length\": 5.1,\n    \"sepal_width\": 3.5,\n    \"petal_length\": 1.4,\n    \"petal_width\": 0.2,\n    \"species\": \"Iris-setosa\"\n  },\n  {\n    \"sepal_length\": 4.9,\n    \"sepal_width\": 3.0,\n    \"petal_length\": 1.4,\n    \"petal_width\": 0.2,\n    \"species\": \"Iris-setosa\"\n  }, \n```", "```py\nJSON_Samples = List[Dict[str, Union[float, str]]] \n```", "```py\nclass SampleDict(TypedDict):\n    sepal_length: float\n    sepal_width: float\n    petal_length: float\n    petal_width: float\n    species: str \n```", "```py\nclass JSONIrisReader:\n    def __init__(self, source: Path) -> None:\n        self.source = source\n    def data_iter(self) -> Iterator[SampleDict]:\n        with self.source.open() as source_file:\n            sample_list = json.load(source_file)\n        yield from iter(sample_list) \n```", "```py\n{\"sepal_length\": 5.0, \"sepal_width\": 3.3, \"petal_length\": 1.4, \"petal_width\": 0.2, \"species\": \"Iris-setosa\"}\n{\"sepal_length\": 7.0, \"sepal_width\": 3.2, \"petal_length\": 4.7, \"petal_width\": 1.4, \"species\": \"Iris-versicolor\"} \n```", "```py\nclass NDJSONIrisReader:\n    def __init__(self, source: Path) -> None:\n        self.source = source\n    def data_iter(self) -> Iterator[SampleDict]:\n        with self.source.open() as source_file:\n            for line in source_file:\n                sample = json.loads(line)\n                yield sample \n```", "```py\npython -m pip install jsonschema \n```", "```py\nIRIS_SCHEMA = {\n    \"$schema\": \"https://json-schema.org/draft/2019-09/hyper-schema\",\n    \"title\": \"Iris Data Schema\",\n    \"description\": \"Schema of Bezdek Iris data\",\n    \"type\": \"object\",\n    \"properties\": {\n        \"sepal_length\": {\n            \"type\": \"number\", \"description\": \"Sepal Length in cm\"},\n        \"sepal_width\": {\n            \"type\": \"number\", \"description\": \"Sepal Width in cm\"},\n        \"petal_length\": {\n            \"type\": \"number\", \"description\": \"Petal Length in cm\"},\n        \"petal_width\": {\n            \"type\": \"number\", \"description\": \"Petal Width in cm\"},\n        \"species\": {\n            \"type\": \"string\",\n            \"description\": \"class\",\n            \"enum\": [\n                \"Iris-setosa\", \"Iris-versicolor\", \"Iris-virginica\"],\n        },\n    },\n    \"required\": [\n\"sepal_length\", \"sepal_width\", \"petal_length\", \"petal_width\"],\n} \n```", "```py\nclass ValidatingNDJSONIrisReader:\n    def __init__(self, source: Path, schema: dict[str, Any]) -> None:\n        self.source = source\n        self.validator = jsonschema.Draft7Validator(schema)\n    def data_iter(self) -> Iterator[SampleDict]:\n        with self.source.open() as source_file:\n            for line in source_file:\n                sample = json.loads(line)\n                if self.validator.is_valid(sample):\n                    yield sample\n                else:\n                    print(f\"Invalid: {sample}\") \n```"]