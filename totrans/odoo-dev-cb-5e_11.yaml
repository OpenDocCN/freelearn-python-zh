- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Internationalization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo supports a variety of languages and enables users to use the language(s)
    with which they are most comfortable. The Odoo i18n features that are already
    built-in help with this. With string translations, Odoo also supports date and
    time formatting.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will discover how to upload translation files to your modules
    and enable various languages. Due to the diversity of countries and the prevalence
    of local languages, users often find it easier to connect with a system when it’s
    presented in their native tongue. To accommodate this, Odoo offers a feature that
    enables software text to be translated into the user’s preferred language. This
    functionality enhances the user experience by ensuring that the interface is accessible
    and comprehensible to individuals, regardless of their linguistic background,
    thereby promoting wider adoption and usability of the software across various
    regions and demographics. Utilizing these new functionalities will enhance the
    Odoo user experience.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following recipes will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a language installation and user preference settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up options relating to language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Text translation using a web client user interface
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exporting translation into a file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `gettext` tools to make translations easier
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Importing translation files into Odoo
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Altering a website’s custom language URL code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Many of these recipes can be completed either from the web client user interface
    or from the command line. Wherever possible, we will see how to use both of these
    options. Odoo uses Transifex(Odoo) and Weblate (OCA) translation platforms.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up a language installation and user preference settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo can be localized to accommodate various languages and locale settings,
    including date and number formats.
  prefs: []
  type: TYPE_NORMAL
- en: The only language that is initially installed is the standard English language.
    We need to install various localities and languages so that people may utilize
    them. This recipe describes how user preferences are implemented, as well as how
    they may be established.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Activate developer mode and follow these steps to install a new language in
    an Odoo instance:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to **Settings** | **General Settings** | **Language**. Here, you will see
    the **Add Language** link, as shown in the following screenshot. Click on that
    link; a dialogue box will open where you can load languages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.1 – Language options in the general settings](img/B20997_11_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.1 – Language options in the general settings
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the language you want to load:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.2 – Dialogue to load a language](img/B20997_11_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.2 – Dialogue to load a language
  prefs: []
  type: TYPE_NORMAL
- en: 'Clicking on **Add** will load the selected language, and the confirmation dialogue
    box will open, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.3 – Dialogue that shows a language has been loaded](img/B20997_11_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.3 – Dialogue that shows a language has been loaded
  prefs: []
  type: TYPE_NORMAL
- en: 'New languages can also be installed from the command line. The equivalent command
    for the preceding steps is as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To set the language that’s used by a user, go to **Settings** | **Users & Companies**
    | **Users**, and, in the **Preferences** tab of the **User** form, set the **Language**
    field value:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.4 – User’s form to set the language](img/B20997_11_4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.4 – User’s form to set the language
  prefs: []
  type: TYPE_NORMAL
- en: 'Through the **Preferences** menu item, users may easily change these variables
    on their own. They may access this by clicking on their username in the top-right
    corner of the web client window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5– Preferences option to set the language](img/B20997_11_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.5– Preferences option to set the language
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Users can have their own language and time zone preferences. The language settings
    are used to translate user interface text into the chosen language and apply local
    conventions for float and monetary fields.
  prefs: []
  type: TYPE_NORMAL
- en: Before a language is made available for the user to select, it must be installed
    with the **Add language** option. The list of available languages can be seen
    by going to the **Settings** | **Translations** | **Languages** menu option in
    developer mode. The ones with the active flag set are installed.
  prefs: []
  type: TYPE_NORMAL
- en: Each Odoo add-on module is responsible for providing translation resources,
    which should be placed inside an `i18n` subdirectory. Each language’s data should
    be in a `.po` file. In our example, for the Spanish language, the translation
    data is loaded from the `es_ES.po` data file.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo also supports the notion of a `es.po` file for Spanish and an `es_MX.po`
    file for Mexican Spanish, then `es.po` is detected as the base language for `es_MX.po`.
    When the Mexican Spanish language is installed, both data files are loaded; first
    the one for the base language and then the specific language. Therefore, in our
    case, the Mexican Spanish translation file simply has to contain the strings that
    are unique to the language variety.
  prefs: []
  type: TYPE_NORMAL
- en: The `i18n` subdirectory is also expected to have a `<module_name>.pot` file,
    providing a template for translations and containing all the translatable strings.
    The *Exporting translation strings to a file* recipe of this chapter explains
    how to export the translatable strings to generate this file.
  prefs: []
  type: TYPE_NORMAL
- en: In previous versions of Odoo, when an additional language is installed, the
    corresponding resources are loaded from all installed add-on modules and stored
    in the **Translated Terms** model. Its data can be viewed (and edited) within
    the **Settings** | **Translations** | **Application Terms** | **Translated Terms**
    menu option (note that this menu is only visible in developer mode).
  prefs: []
  type: TYPE_NORMAL
- en: From Odoo version 17 onwards, you won’t be able to find this menu as translated
    terms are now stored as native terms. Any field that is translatable now stores
    JSON data representing all translations of all translated language values. For
    example, translations of product names are now stored directly in the `name` field.
    The process of translations has not changed – you just can’t see the **Settings**
    | **Translations** | **Application Terms** | **Translated Terms** menu item with
    all translated terms shown in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Translation files for the installed languages are also loaded when a new add-on
    module is installed or an existing add-on module is upgraded.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: By selecting the refresh symbol again next to the languages, translation files
    may be refreshed without you having to upgrade the add-on modules. You can do
    this if your translation files have been changed and you don’t want to deal with
    updating the modules (and all of their dependencies).
  prefs: []
  type: TYPE_NORMAL
- en: If the **Overwrite Existing Terms** checkbox is left empty, only the newly translated
    strings are loaded. Thus, the changed translated strings won’t be loaded. Check
    the box if you want the already-existing translations to also be loaded and overwrite
    the currently loaded translations. Note that this can potentially be problematic
    if someone changes the translations manually through the interface.
  prefs: []
  type: TYPE_NORMAL
- en: The **Overwrite Existing Terms** checkbox exists because we can edit specific
    translations by going to the **Settings** | **Translations** | **Application Terms**
    | **Translated Terms** menu item, or by using the **Technical Translation** shortcut
    option in the **Debug** menu. Translations that are added or modified in this
    way won’t be overwritten unless the language is reloaded with the **Overwrite
    Existing Terms** checkbox enabled.
  prefs: []
  type: TYPE_NORMAL
- en: It can be useful to know that add-on modules can also have an `i18n_extra` subdirectory
    with extra translations. First, the `.po` files in the `i18n` subdirectory are
    downloaded. Then, Odoo ORM downloads files for the base language and, after that,
    for the language variant. Following this, the `.po` files in the `i18n_extra`
    subdirectory are downloaded, first for the base language and then for the language
    variant. The final string translation that is loaded is the one that ultimately
    takes precedence.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up options relating to language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The locale settings should be the right ones, so long as the user is using the
    correct language, because they come with suitable defaults.
  prefs: []
  type: TYPE_NORMAL
- en: You may still want to change a language’s settings, though. For instance, you
    could opt to use the user interface’s default English language setting while changing
    the American date and number formats to better suit your needs.
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, locale settings such as date and number formats are provided by
    languages and their variants (such as `es_MX` for Mexican Spanish).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will require developer mode to be turned on. If it hasn’t previously been
    enabled, do it in the manner described in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment*, in the *Activating the Odoo developer
    tools* recipe, where you installed the Odoo development environment.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to change a language’s locale settings:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Select the **Settings** | **Translations** | **Languages** menu option to view
    the installed languages and their options. A form with the necessary options will
    open when you click on one of the installed languages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.6 – Form to configure language settings](img/B20997_11_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.6 – Form to configure language settings
  prefs: []
  type: TYPE_NORMAL
- en: Edit the language settings. To change the date to the ISO format, change `%Y-%m-%d`.
    To change the number format to use a comma as a decimal separator, modify the
    **Decimal Separator** and **Thousands Separator** fields accordingly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The user language is selected in the user preferences and placed in the **lang**
    context key when logging in and initiating a new Odoo user session. By translating
    the source texts into the user language and formatting the dates and numbers as
    per the language’s current locale settings, the output is prepared accordingly.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Server-side processes can modify the context in which actions are run. For
    example, to get a record where the dates are formatted according to the American
    English format, independent of the current user’s language preference, you can
    do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: For more details, refer to the *Calling a method with a modified context* recipe
    in [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388), *Advanced Server-Side* *Development
    Techniques*.
  prefs: []
  type: TYPE_NORMAL
- en: Text translation using a web client user interface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The simplest way to translate is to use the translation feature provided by
    the web client. These translation strings are stored in the database and can later
    be exported to a `.po` file, either to be included in an add-on module or just
    to be imported back manually.
  prefs: []
  type: TYPE_NORMAL
- en: Text fields can have translatable content, meaning that their value will depend
    on the current user’s language. We will also see how to set the language-dependent
    values on these fields.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need to have developer mode activated. If it’s not, activate it, as
    shown in the *Activating the Odoo developer tools* recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo* *Development Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will demonstrate how to translate terms through the web client using the
    **User Groups** feature as an example:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Navigate to the screen you want to translate. As an example, we will open the
    **Groups** view via the **Settings** | **Users & Companies** | **Groups** menu
    item:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.7 – Translation for groups](img/B20997_11_7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.7 – Translation for groups
  prefs: []
  type: TYPE_NORMAL
- en: 'Open one of the group records in the form view, and click on **Edit**:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.8 – Translation for the field values](img/B20997_11_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.8 – Translation for the field values
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the **Name** field has a special icon on the far right. This indicates
    that it is a translatable field. Clicking on this icon opens a **Translate** list
    with the different installed languages. This allows us to set the translation
    for each of those languages:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.9 – Translation for the field values](img/B20997_11_9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.9 – Translation for the field values
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'All translated terms are saved in the name field of any mode/table. In our
    example, `res_groups` table; when you check the information stored in the name
    field, it will be saved as a dictionary, where the key is the language code and
    the value is the translated phrases:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.10 – Translation for the field values](img/B20997_11_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.10 – Translation for the field values
  prefs: []
  type: TYPE_NORMAL
- en: Exporting translation strings to a file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Translation strings can be exported with or without the translated texts for
    a selected language. This can either be to include `i18n` data in a module or
    to later perform translations with a text editor or perhaps with a specialized
    tool.
  prefs: []
  type: TYPE_NORMAL
- en: We will demonstrate how to do this using our custom `My Hostel` module, so feel
    free to replace `My Hostel` with your own module.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will need to have developer mode activated. If it’s not already activated,
    activate it, as demonstrated in the *Activating the Odoo developer tools* recipe
    in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo* *Development
    Environment*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To export the translation terms for the `my_hostel` module, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the web client user interface, from the **Settings** top menu, select the
    **Translations** | **Import/Export** | **Export Translation** menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the `.po` format and to export only one add-on module at a time – the `my_hostel`
    is the technical name for the Discuss app), in our example:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.11 – Dialogue to export translation terms](img/B20997_11_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.11 – Dialogue to export translation terms
  prefs: []
  type: TYPE_NORMAL
- en: 'In Odoo version 17, you will find a new option in the export settings called
    **Export Type**, which contains two options: **Module** and **Model**.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'setting Module Type to Model will provide the new option to select a specific
    model with a filter option, using which the user can export only specific filter-based
    records:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.12 – Dialogue to export translation terms](img/B20997_11_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.12 – Dialogue to export translation terms
  prefs: []
  type: TYPE_NORMAL
- en: Once the export process is complete, a new window will be displayed, with a
    link to download the file and some additional advice.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To export a translation template file for the `my_hostel` add-on module from
    the Odoo command-line interface, enter the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: $ ./odoo-bin -d mydb --i18n-export=es_ES.po --modules=my_hostel
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: --language=es_ES
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: $ mv es_ES.po ./addons/my_hostel/i18n
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **Export Translation** feature extracts the translatable strings from the
    target modules and then creates a file with the translation terms. This can be
    done both from the web client and the command-line interface.
  prefs: []
  type: TYPE_NORMAL
- en: When exporting from the web client, we can choose to either export an empty
    translation template – that is, a file with the strings to translate, along with
    empty translations – or export a language, resulting in a file with the strings
    to translate, along with the translation for the selected language.
  prefs: []
  type: TYPE_NORMAL
- en: The available file formats are CSV, PO, and TGZ. The TGZ file format exports
    a compressed file that contains a `<name>/i18n/` directory structure with the
    PO or POT file.
  prefs: []
  type: TYPE_NORMAL
- en: The CSV format can be useful for performing translations using a spreadsheet,
    but the format to use in the add-on modules is PO files. These are expected to
    be placed inside the `i18n` subdirectory. They are then automatically loaded once
    the corresponding language is installed. When exporting these PO files, we should
    export only one module at a time. The PO file is also a popular format supported
    by translation tools, such as Poedit.
  prefs: []
  type: TYPE_NORMAL
- en: Translations can also be exported directly from the command line by using the
    `--i18n-export` option. This recipe shows how to extract both the template files
    and the translated language files.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 4* of this recipe, we exported a template file. The `--i18n-export`
    option expects the path and the filename to export. Bear in mind that the file
    extension is required to be either CSV, PO, or TGZ. This option requires the `-d`
    option, which specifies the database to use. The `--modules` option is also needed
    to indicate the add-on modules to export. Note that the `--stop-after-init` option
    is not needed since the `export` command automatically returns to the command
    line when finished.
  prefs: []
  type: TYPE_NORMAL
- en: This exports a template file. The Odoo module expects this exported template
    in the `i18n` folder with the `.pot` extension. When working on a module, after
    the export operation, we usually want to move the exported PO file to the module’s
    `i18n` directory with a `<``module>.pot` name.
  prefs: []
  type: TYPE_NORMAL
- en: In *Step 5*, the `–language` option was also used. With it, instead of an empty
    translation file, the translated terms for the selected language were also exported.
    One use case for this is to perform some translations through the web client user
    interface using the **Technical Translation** feature, and then export and include
    them in the module.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Text strings in view and model definitions are automatically extracted for translation.
    For models, the `_description` attribute, the field names (the `string` attribute),
    help text, and selection field options are extracted, as well as the user texts
    for model constraints (`_constraints` and `_sql_constraints`).
  prefs: []
  type: TYPE_NORMAL
- en: Text strings to translate inside Python or JavaScript code can’t be automatically
    detected, so the code should identify those strings, wrapping them inside the
    underscore function.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python’s module file, we should ensure that the file is imported with the
    following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'This file can then be used wherever a translatable text is used with something
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'For strings that use additional context information, we should use Python string
    interpolation, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Note that the interpolation should go outside the translation function. For
    example, `_("Hello %s" % 'World')` is wrong. String interpolations should also
    be preferred to string concatenation so that each interface text is just one translation
    string.
  prefs: []
  type: TYPE_NORMAL
- en: Be careful with the `Selection` fields! If you pass an explicit list of values
    to the field definition, the displayed strings are automatically flagged for translation.
    On the other hand, if you pass a method that returns the list of values, the display
    strings must be explicitly marked for translation.
  prefs: []
  type: TYPE_NORMAL
- en: 'Regarding manual translation work, any text file editor will do so, but using
    an editor that specifically supports the PO file syntax makes this work easier
    by reducing the risk of formatting errors. Such editors include those listed here:'
  prefs: []
  type: TYPE_NORMAL
- en: '**POEDIT**: [https://poedit.net/](https://poedit.net/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: '**Emacs (****PO-mode)**: [https://www.gnu.org/software/gettext/manual/html_node/PO-Mode.html](https://www.gnu.org/software/gettext/manual/html_node/PO-Mode.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lokalize**: [https://l10n.kde.org/tools/](https://l10n.kde.org/tools/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Gtranslator**: [https://wiki.gnome.org/Apps/Gtranslator](https://wiki.gnome.org/Apps/Gtranslator'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: )
  prefs: []
  type: TYPE_NORMAL
- en: Using gettext tools to make translations easier
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PO file format is part of the `gettext` i18n and localization system that’s
    commonly used in Unix-like systems. This system includes tools to ease translation
    work.
  prefs: []
  type: TYPE_NORMAL
- en: This recipe demonstrates how to use these tools to help translate our add-on
    modules. We want to use it on a custom module, so the `my_hostel` module we created
    in [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083), *Creating Odoo Add-On Modules*,
    is a good candidate. However, feel free to replace it with some other custom module
    you have at hand, replacing the tutorials’ `my_hostel` references as appropriate.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To manage translations from the command line, assuming that your Odoo installation
    is at `~/odoo-work/odoo`, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a compendium of translation terms for the target language – for example,
    Spanish. If we name our compendium file `odoo_es.po`, we should write the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Export the translation template file for the add-on module from the Odoo command-line
    interface and place it in the module’s expected location:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If no translation file is available yet for the target language, create the
    PO translation file, reusing the terms that have been already found and translated
    in the compendium:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If a translation file exists, add the translations that can be found in the
    compendium:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To take a peek at the untranslated terms in a PO file, use the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Use your favorite editor to complete the translation.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Step 1* uses commands from the `gettext` toolbox to create a translation compendium
    for the chosen language – Spanish, in our case. It works by finding all the `es_ES.po`
    files in the Odoo code base and passing them to the `msgcat` command. We use the
    `--use-first` flag to avoid conflicting translations (there are a few in the Odoo
    code base). The result is passed to the `msgattrib` filter. We use the `--translated`
    option to filter out the untranslated entries and the `--no-fuzzy` option to remove
    fuzzy translations. We then save the result in `odoo_es.po`.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 2* calls `odoo.py` with the `--i18n-export` option. You need to specify
    a database on the command line, even if one is specified in the configuration
    file and the `--modules` option, with a comma-separated list of modules to export
    the translation.'
  prefs: []
  type: TYPE_NORMAL
- en: In the `gettext` world, fuzzy translations are those created automatically by
    the `msgmerge` command (or other tools) using a proximity match on the source
    string. We want to avoid these in the compendium.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 3* creates a new translation file by using existing translated values
    found in the compendium. The `msgmerge` command is used with the `--compendium`
    option to find the `msgid` lines in the compendium files, matching those in the
    translation template file generated in *Step 2*. The result is saved in the `es_ES.po`
    file.'
  prefs: []
  type: TYPE_NORMAL
- en: If you have a preexisting `.po` file for your add-on with translations that
    you would like to preserve, you should rename it and replace the `/dev/null` argument
    with this file. The renaming procedure is required to avoid using the same file
    for input and output.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This tutorial only skims the surface of the rich tools that are available with
    the GNU `gettext` toolbox. Full coverage is well beyond the scope of this book.
    If you are interested, the GNU `gettext` documentation contains a wealth of precious
    information about PO file manipulation and is available at [http://www.gnu.org/software/gettext/manual/gettext.html](http://www.gnu.org/software/gettext/manual/gettext.html).
  prefs: []
  type: TYPE_NORMAL
- en: Importing translation files into Odoo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The standard method for loading translations is to store PO files in the module’s
    `i18n` subfolder. The translation files are loaded and additional translated strings
    are added whenever the add-on module is installed or updated.
  prefs: []
  type: TYPE_NORMAL
- en: However, there may be cases where we want to directly import a translation file.
    In this recipe, we will learn how to load a translation file, either from the
    web client or from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to have developer mode activated. If it’s not activated already, activate
    it, as demonstrated in the *Activating the Odoo developer tools* recipe in [*Chapter
    1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development Environment*.
    We will also need a translation `po` file, which we are going import in this tutorial
    – for example, the `myfile.po` file.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To import the translation terms, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: In the web client user interface, from the **Settings** top menu, select the
    **Translations** | **Import/Export** | **Import Translation** menu option.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the **Import Translations** dialogue box, fill out the language name and
    the language code, and select the file to import. Finally, click on the **Import**
    button:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.13 – Dialogue to import a translation file](img/B20997_11_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.13 – Dialogue to import a translation file
  prefs: []
  type: TYPE_NORMAL
- en: 'To import a translation file from the Odoo command-line interface, we must
    place it inside the server add-ons path and then perform the import:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`ir.translation` table, but in newer versions of Odoo, that table is no longer
    present. As a result, all view-level translations for `arch_db`, such as button
    strings and selection field values, will be stored in the `ir_ui_view` table,
    and all field-level translations, such as field labels, will be stored in the
    `ir_model_fields` table under the `field_description` field.'
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, our hostel table has a `room_number` model. Its field translation
    of “Room Number” will be stored at the database level as `{"en_US": "Room Number",
    "fr_BE": "Numéro` `de chambre"}`.'
  prefs: []
  type: TYPE_NORMAL
- en: The web client feature asks for the language name, but this is not used in the
    import process. It also has an overwrite option. If selected, it forces all the
    translation strings to be imported, even the ones that already exist, overwriting
    them in the process.
  prefs: []
  type: TYPE_NORMAL
- en: On the command line, the import can be done using the `--i18n-import` option.
    It must be provided with the path to the file, relative to an add-on’s path directory;
    `-d` and `--language` (or `-l`) are mandatory. Overwriting can also be achieved
    by adding the `--i18n-overwrite` option to the command. Note that we didn’t use
    the `--stop-after-init` option here. It isn’t needed since the import action stops
    the server when it finishes.
  prefs: []
  type: TYPE_NORMAL
- en: Altering a website’s custom language URL code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo also supports multiple languages for websites. On a website, the current
    language is identified as a language string. In this recipe, you will learn how
    to change the language code in a URL.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before following this recipe, make sure you have installed the `website` module
    and enabled multiple languages for the website.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To modify a language’s URL code, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the language list from the **Settings** | **Translations** | **Languages**
    menu option. Clicking on one of the installed languages will open a form that
    looks like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 11.14 – Language URL code for a website](img/B20997_11_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 11.14 – Language URL code for a website
  prefs: []
  type: TYPE_NORMAL
- en: Here, you will see the **URL Code** field. Set the value that you want. Make
    sure you don’t add spaces or special characters here.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After configuring this, you can test the results on your website. Open the home
    page and change the language; you will see the custom language code in the URL.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo identifies the languages for a website via the URL path. For example, [www.odoo.com/fr_FR](https://www.odoo.com/fr_FR)
    is used for the French language and [www.odoo.com/es_ES](https://www.odoo.com/es_ES)
    is used for the Spanish language. Here, the `fr_FR` and `es_ES` parts of the URL
    are the language ISO codes, and they are used by Odoo to detect the requested
    language. But sometimes, you want to set the language in a more user-friendly
    way. In that case, you can update the `fr` for the French language. In this case,
    [www.odoo.com/fr_FR](http://www.odoo.com/fr_FR) would be converted into [www.odoo.com/fr](http://www.odoo.com/fr).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Changing the URL code in production is not a problem; Odoo will automatically
    redirect the URL containing the language ISO code to your custom URL.
  prefs: []
  type: TYPE_NORMAL
