["```py\n    {\n         \"name\": \"Cheese Pizza\",\n         \"description\": \"This is a lovely cheese pizza\"\n    }\n    ```", "```py\n    {\n    \"name\": \"Lovely Cheese Pizza\",\n    \"description\": \"This is a lovely cheese pizza recipe.\"\n    }\n    ```", "```py\n    @app.route('/recipes/<int:recipe_id>', methods=['DELETE'])\n    def delete_recipe(recipe_id):\n        recipe = next((recipe for recipe in recipes if recipe['id'] == recipe_id), None)\n        if not recipe:\n            return jsonify({'message': 'recipe not found'}), HTTPStatus.NOT_FOUND\n        recipes.remove(recipe)\n        return '', HTTPStatus.NO_CONTENT\n    ```", "```py\n    http DELETE localhost:5000/recipes/1\n    ```", "```py\n    curl -i -X DELETE localhost:5000/recipes/1\n    ```", "```py\n    HTTP/1.0 204 NO CONTENT\n    Content-Type: text/html; charset=utf-8\n    Date: Fri, 06 Sep 2019 05:57:50 GMT\n    Server: Werkzeug/0.15.6 Python/3.7.0\n    ```", "```py\n    {\n        \"name\": \"Cheese Pizza\",\n        \"description\": \"This is a lovely cheese pizza\",\n        \"num_of_servings\": 2,\n        \"cook_time\": 30,\n        \"directions\": \"This is how you make it\" \n    }\n    ```", "```py\n    { \n        \"name\": \"Tomato Pasta\",\n        \"description\": \"This is a lovely tomato pasta recipe\",\n        \"num_of_servings\": 3,\n        \"cook_time\": 20,\n        \"directions\": \"This is how you make it\" \n    }\n    ```", "```py\n    {\n        \"name\": \"Lovely Cheese Pizza\",\n        \"description\": \"This is a lovely cheese pizza recipe\",\n        \"num_of_servings\": 3,\n        \"cook_time\": 60,\n        \"directions\": \"This is how you make it\"\n    }\n    ```", "```py\n        def delete(self, recipe_id):\n            recipe = next((recipe for recipe in recipe_list if recipe.id == recipe_id), None)\n            if recipe is None:\n                return {'message': 'recipe not found'}, HTTPStatus.NOT_FOUND\n            recipe_list.remove(recipe)\n            return {}, HTTPStatus.NO_CONTENT\n    ```", "```py\n    from app import *\n    from models.user import User\n    from models.recipe import Recipe\n    app = create_app()\n    ```", "```py\n    user = User(username='peter', email='peter@gmail.com', password='WkQa')\n    db.session.add(user)\n    db.session.commit()\n    ```", "```py\n    carbonara = Recipe(name='Carbonara', description='This is a lovely carbonara recipe', num_of_servings=4, cook_time=50, directions='This is how you make it', user_id=user.id)\n    db.session.add(carbonara)\n    db.session.commit()\n    risotto = Recipe(name='Risotto', description='This is a lovely risotto recipe', num_of_servings=5, cook_time=40, directions='This is how you make it', user_id=user.id)\n    db.session.add(risotto)\n    db.session.commit()\n    ```", "```py\n    bio= db.Column(db.String())\n    ```", "```py\n    flask db migrate\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.ddl.postgresql] Detected sequence named 'user_id_seq' as owned by integer column 'user(id)', assuming SERIAL and omitting\n    INFO  [alembic.ddl.postgresql] Detected sequence named 'recipe_id_seq' as owned by integer column 'recipe(id)', assuming SERIAL and omitting\n    INFO  [alembic.autogenerate.compare] Detected added column 'user.bio'\n      Generating /Python-API-Development-Fundamentals/smilecook/migrations/versions/6971bd62ec60_.py ... done\n    ```", "```py\n    \"\"\"empty message\n\n    Revision ID: 6971bd62ec60\n    Revises: 1b69a78087e5\n    Create Date: 2019-10-08 12:11:47.370082\n\n    \"\"\"\n    from alembic import op\n    import sqlalchemy as sa\n\n    # revision identifiers, used by Alembic.\n    revision = '6971bd62ec60'\n    down_revision = '1b69a78087e5'\n    branch_labels = None\n    depends_on = None\n\n    def upgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.add_column('user', sa.Column('bio', sa.String(), nullable=True))\n        # ### end Alembic commands ###\n\n    def downgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.drop_column('user', 'bio')\n        # ### end Alembic commands ###\n    ```", "```py\n    flask db upgrade\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.runtime.migration] Running upgrade a6d248ab7b23 -> 6971bd62ec60, empty message\n    ```", "```py\nflask db downgrade\n```", "```py\nINFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\nINFO  [alembic.runtime.migration] Will assume transactional DDL.\nINFO  [alembic.runtime.migration] Running downgrade 6971bd62ec60 -> a6d248ab7b23, empty message\n```", "```py\n        @jwt_required\n        def put(self, recipe_id):\n            recipe = Recipe.get_by_id(recipe_id=recipe_id)\n            if recipe is None:\n                return {'message': 'Recipe not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if current_user != recipe.user_id:\n                return {'message': 'Access is not allowed'}, HTTPStatus.FORBIDDEN\n            recipe.is_publish = True\n            recipe.save()\n            return {}, HTTPStatus.NO_CONTENT\n    ```", "```py\n    @jwt_required    \n    def delete(self, recipe_id):\n            recipe = Recipe.get_by_id(recipe_id=recipe_id)\n            if recipe is None:\n                return {'message': 'Recipe not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if current_user != recipe.user_id:\n                return {'message': 'Access is not allowed'}, HTTPStatus.FORBIDDEN\n            recipe.is_publish = False\n            recipe.save()\n            return {}, HTTPStatus.NO_CONTENT\n    ```", "```py\n    {\n        \"email\": \"james@gmail.com\",\n        \"password\": \"WkQad19\"\n    }\n    ```", "```py\n         author = fields.Nested(UserSchema, attribute='user', dump_only=True, exclude=('email', ))\n    ```", "```py\n            return recipe_schema.dump(recipe).data, HTTPStatus.OK\n    ```", "```py\n    {\n        \"username\": \"john\",\n        \"email\": \"smilecook.api@gmail.com\",\n        \"password\": \"Kwq2z5\"\n    }\n    ```", "```py\n    {\n        \"email\": \"smilecook.api@gmail.com\",\n        \"password\": \"Kwq2z5\"\n    }\n    ```", "```py\n    from flask import request, url_for, render_template\n    ```", "```py\n    mailgun.send_email(to=user.email,\n                                     subject=subject,\n                                     text=text,\n                                     html=render_template('email/confirmation.html', link=link))\n    ```", "```py\n    {\n        \"username\": \"emily\",\n        \"email\": \"smilecook.user@gmail.com\",\n        \"password\": \"Wqb6g2\"\n    }\n    ```", "```py\n    cover_image = db.Column(db.String(100), default=None)\n    ```", "```py\n    flask db migrate\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.autogenerate.compare] Detected added column 'recipe.cover_image'\n      Generating /TrainingByPackt/Python-API-Development-Fundamentals/Lesson07/smilecook/migrations/versions/91c7dc71b826_.py ... done\n    ```", "```py\n    \"\"\"empty message\n    Revision ID: 91c7dc71b826\n    Revises: 7aafe51af016\n    Create Date: 2019-09-22 12:06:36.061632\n    \"\"\"\n    from alembic import op\n    import sqlalchemy as sa\n    # revision identifiers, used by Alembic.\n    revision = '91c7dc71b826'\n    down_revision = '7aafe51af016'\n    branch_labels = None\n    depends_on = None\n    def upgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.add_column('recipe', sa.Column('cover_image', sa.String(length=100), nullable=True))\n        # ### end Alembic commands ###\n    def downgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.drop_column('recipe', 'cover_image')\n        # ### end Alembic commands ###\n    ```", "```py\n    flask db upgrade\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.runtime.migration] Running upgrade 7aafe51af016 -> 91c7dc71b826, empty message\n    ```", "```py\n    from flask import url_for\n        cover_url = fields.Method(serialize='dump_cover_url')\n        def dump_cover_url(self, recipe):\n            if recipe.cover_image:\n                return url_for('static', filename='images/recipes/{}'.format(recipe.cover_image), _external=True)\n            else:\n                return url_for('static', filename='images/assets/default-recipe-cover.jpg', _external=True)\n    ```", "```py\n    import os\n    from extensions import image_set\n    from utils import save_image\n    In resources/recipe.py, add recipe_cover_schema, which just shows the cover_url column:\n    recipe_cover_schema = RecipeSchema(only=('cover_url', ))\n    ```", "```py\n        class RecipeCoverUploadResource(Resource):\n            @jwt_required\n            def put(self, recipe_id):\n                file = request.files.get('cover')\n                if not file:\n                    return {'message': 'Not a valid image'}, HTTPStatus.BAD_REQUEST\n                if not image_set.file_allowed(file, file.filename):\n                    return {'message': 'File type not allowed'}, HTTPStatus.BAD_REQUEST\n    ```", "```py\n                recipe = Recipe.get_by_id(recipe_id=recipe_id)\n                if recipe is None:\n                    return {'message': 'Recipe not found'}, HTTPStatus.NOT_FOUND\n                current_user = get_jwt_identity()\n                if current_user != recipe.user_id:\n                    return {'message': 'Access is not allowed'}, HTTPStatus.FORBIDDEN\n                if recipe.cover_image:\n                    cover_path = image_set.path(folder='recipes', filename=recipe.cover_image)\n                    if os.path.exists(cover_path):\n                        os.remove(cover_path)\n    ```", "```py\n                filename = save_image(image=file, folder='recipes')\n                recipe.cover_image = filename\n                recipe.save()\n                return recipe_cover_schema.dump(recipe).data, HTTPStatus.OK\n    ```", "```py\n    from resources.recipe import RecipeListResource, RecipeResource, RecipePublishResource, RecipeCoverUploadResource\n    ```", "```py\n    api.add_resource(RecipeCoverUploadResource, '/recipes/<int:recipe_id>/cover')\n    ```", "```py\n        @classmethod\n        def get_all_by_user(cls, user_id, page, per_page, visibility='public'):\n            query = cls.query.filter_by(user_id=user_id)\n            if visibility == 'public':\n                query = cls.query.filter_by(user_id=user_id, is_publish=True)\n            elif visibility == 'private':\n                query = cls.query.filter_by(user_id=user_id, is_publish=False)\n            return query.order_by(desc(cls.created_at)).paginate(page=page, per_page=per_page)\n    ```", "```py\n    from schemas.recipe import RecipeSchema, RecipePaginationSchema\n    ```", "```py\n    recipe_pagination_schema = RecipePaginationSchema()\n    ```", "```py\n    class UserRecipeListResource(Resource):\n        @jwt_optional\n        @use_kwargs({'page': fields.Int(missing=1),\n                     'per_page': fields.Int(missing=10),\n                     'visibility': fields.Str(missing='public')})\n    ```", "```py\n        def get(self, username, page, per_page, visibility):\n            user = User.get_by_username(username=username)\n            if user is None:\n                return {'message': 'User not found'}, HTTPStatus.NOT_FOUND\n            current_user = get_jwt_identity()\n            if current_user == user.id and visibility in ['all', 'private']:\n                pass\n            else:\n                visibility = 'public'\n            paginated_recipes = Recipe.get_all_by_user(user_id=user.id, page=page, per_page=per_page, visibility=visibility)\n            return recipe_pagination_schema.dump(paginated_recipes).data, HTTPStatus.OK\n    ```", "```py\n        ingredients = db.Column(db.String(1000))\n    ```", "```py\n    flask db migrate\n    ```", "```py\n    INFO  [alembic.autogenerate.compare] Detected added column 'recipe.ingredients'\n      Generating /TrainingByPackt/Python-API-Development-Fundamentals/smilecook/migrations/versions/0876058ed87e_.py ... done\n    ```", "```py\n    \"\"\"empty message\n\n    Revision ID: 0876058ed87e\n    Revises: 91c7dc71b826\n    Create Date: 2019-10-24 15:05:10.936752\n\n    \"\"\"\n    from alembic import op\n    import sqlalchemy as sa\n\n    # revision identifiers, used by Alembic.\n    revision = '0876058ed87e'\n    down_revision = '91c7dc71b826'\n    branch_labels = None\n    depends_on = None\n\n    def upgrade():\n        # ### commands auto generated by Alembic - please adjust! ###\n        op.add_column('recipe', sa.Column('ingredients', sa.String(length=1000), nullable=True))\n        # ### end Alembic commands ###\n\n    def downgrade():\n        # ### commands auto-generated by Alembic - please adjust! ###\n        op.drop_column('recipe', 'ingredients')\n        # ### end Alembic commands ###\n    ```", "```py\n    flask db upgrade\n    ```", "```py\n    INFO  [alembic.runtime.migration] Context impl PostgresqlImpl.\n    INFO  [alembic.runtime.migration] Will assume transactional DDL.\n    INFO  [alembic.runtime.migration] Running upgrade 91c7dc71b826 -> 0876058ed87e, empty message\n    ```", "```py\n            ingredients = fields.String(validate=[validate.Length(max=1000)])\n    ```", "```py\n    recipe.ingredients = data.get('ingredients') or recipe.ingredients\n    ```", "```py\n    return cls.query.filter(or_(cls.name.ilike(keyword),\n                       cls.description.ilike(keyword),\n                       cls.ingredients.ilike(keyword)),\n                     cls.is_publish.is_(True)).\\\n      order_by(sort_logic).paginate(page=page, per_page=per_page)\n    ```", "```py\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Sweet Potato Casserole\" description=\"This is a lovely Sweet Potato Casserole\" num_of_servings=12 cook_time=60 ingredients=\"4 cups sweet potato, 1/2 cup white sugar, 2 eggs, 1/2 cup milk\" directions=\"This is how you make it\"\n    http POST localhost:5000/recipes \"Authorization: Bearer {token}\" name=\"Pesto Pizza\" description=\"This is a lovely Pesto Pizza\" num_of_servings=6 cook_time=20 ingredients=\"1 pre-baked pizza crust, 1/2 cup pesto, 1 ripe tomato\" directions=\"This is how you make it\"\n    ```", "```py\n    http PUT localhost:5000/recipes/14/publish \"Authorization: Bearer {token}\"\n    http PUT localhost:5000/recipes/15/publish \"Authorization: Bearer {token}\"\n    ```", "```py\n    { \n        \"num_of_servings\": 5, \n        \"cook_time\": 50 \n    } \n    ```", "```py\n    from extensions import image_set, limiter\n    ```", "```py\n    class UserRecipeListResource (Resource):\n        decorators = [limiter.limit('3/minute;30/hour;300/day', methods=['GET'], error_message='Too Many Requests')]\n    ```", "```py\n    #  @limiter.request_filter\n    #   def ip_whitelist():\n    #      return request.remote_addr == '127.0.0.1'\n    ```"]