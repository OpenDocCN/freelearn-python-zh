["```py\n# mycalculator.py with add and subtract functions\ndef add(x, y):\n    \"\"\"This function adds two numbers\"\"\"\n    return x + y\ndef subtract(x, y):\n    \"\"\"This function subtracts two numbers\"\"\"\n    return x - y\n```", "```py\n# myrandom.py with default and custom random functions\nimport random\ndef random_1d():\n   \"\"\"This function generates a random number between 0 \\\n    and 9\"\"\"\n   return random.randint (0,9)\ndef random_2d():\n   \"\"\"This function generates a random number between 10 \\\n    and 99\"\"\"\n   return random.randint (10,99)\n```", "```py\n# calcmain1.py with a main function\nimport mycalculator\nimport myrandom\ndef my_main( ):\n    \"\"\" This is a main function which generates two random\\     numbers and then apply calculator functions on them \"\"\"\n    x = myrandom.random_2d( )\n    y = myrandom.random_1d( )\n    sum = mycalculator.add(x, y)\n    diff = mycalculator.subtract(x, y)\n    print(\"x = {}, y = {}\".format(x, y))\n    print(\"sum is {}\".format(sum))\n    print(\"diff is {}\".format(diff))\n \"\"\" This is executed only if the special variable '__name__'  is set as main\"\"\"\nif __name__ == \"__main__\":\n    my_main()\n```", "```py\nimport math\n```", "```py\n# globalmain.py with globals() function\ndef print_globals():\n    print (globals())\ndef hello():\n    print (\"Hello\")\nif __name__ == \"__main__\":\n    print_globals()\n```", "```py\n{\n   \"__name__\":\"__main__\",\n   \"__doc__\":\"None\",\n   \"__package__\":\"None\",\n   \"__loader__\":\"<_frozen_importlib_external.\\\n    SourceFileLoader object at 0x101670208>\",\n   \"__spec__\":\"None\",\n   \"__annotations__\":{\n   },\n   \"__builtins__\":\"<module 'builtins' (built-in)>\",\n   \"__file__\":\"/ PythonForGeeks/source_code/chapter2/\\\n     modules/globalmain.py\",\n   \"__cached__\":\"None\",\n   \"print_globals\":\"<function print_globals at \\\n     0x1016c4378>\",\n   \"hello\":\"<function hello at 0x1016c4400>\"\n}\n```", "```py\n{\n   \"__name__\":\"__main__\",\n   \"__doc__\":\"None\",\n   \"__package__\":\"None\",\n   \"__loader__\":\"<_frozen_importlib_external.\\\n    SourceFileLoader object at 0x100de1208>\",\n   \"__spec__\":\"None\",\n   \"__annotations__\":{},\n   \"__builtins__\":\"<module 'builtins' (built-in)>\",\n   \"__file__\":\"/PythonForGeeks/source_code/chapter2/module1/     main.py\",\n   \"__cached__\":\"None\",\n   \"mycalculator\":\"<module 'mycalculator' from \\\n    '/PythonForGeeks/source_code/chapter2/modules/\\\n    mycalculator.py'>\",\n   \"myrandom\":\"<module 'myrandom' from '/PythonForGeeks/source_     code/chapter2/modules/myrandom.py'>\",\n   \"my_main\":\"<function my_main at 0x100e351e0>\"\n}\n```", "```py\nfrom math import pi\n```", "```py\n# calcmain2.py with alias for modules\nimport mycalculator as calc\nimport myrandom as rand\ndef my_main():\n    \"\"\" This is a main function which generates two random\\\n     numbers and then apply calculator functions on them \"\"\"\n    x = rand.random_2d()\n    y = rand.random_1d()\n    sum = calc.add(x,y)\n    diff = calc.subtract(x,y)\n    print(\"x = {}, y = {}\".format(x,y))\n    print(\"sum is {}\".format(sum))\n    print(\"diff is {}\".format(diff))\n\"\"\" This is executed only if the special variable '__name__' is set as main\"\"\"\nif __name__ == \"__main__\":\n    my_main()\n```", "```py\n# calcmain3.py with from and alias combined\nfrom mycalculator import add as my_add\nfrom mycalculator import subtract as my_subtract\nfrom myrandom import random_2d, random_1d\ndef my_main():\n    \"\"\" This is a main function which generates two random\n     numbers and then apply calculator functions on them \"\"\"\n    x = random_2d()\n    y = random_1d()\n    sum =  my_add(x,y)\n    diff = my_subtract(x,y)\n    print(\"x = {}, y = {}\".format(x,y))\n    print(\"sum is {}\".format(sum))\n    print(\"diff is {}\".format(diff))\n    print (globals())\n\"\"\" This is executed only if the special variable '__name__' is set as main\"\"\"\nif __name__ == \"__main__\":\n    my_main()\n```", "```py\n{\n   \"__name__\":\"__main__\",\n   \"__doc__\":\"None\",\n   \"__package__\":\"None\",\n   \"__loader__\":\"<_frozen_importlib_external.\\\n    SourceFileLoader object at 0x1095f1208>\",\n   \"__spec__\":\"None\",\n   \"__annotations__\":{},\n   \"__builtins__\":\"<module 'builtins' (built-in)>\", \"__    file__\":\"/PythonForGeeks/source_code/chapter2/module1/     main_2.py\",\n   \"__cached__\":\"None\",\n   \"my_add\":\"<function add at 0x109645400>\",\n   \"my_subtract\":\"<function subtract at 0x109645598>\",\n   \"random_2d\":\"<function random_2d at 0x10967a840>\",\n   \"random_1d\":\"<function random_1d at 0x1096456a8>\",\n   \"my_main\":\"<function my_main at 0x109645378>\"\n}\n```", "```py\n#import random\nrandom = __import__('random')\n```", "```py\nimport importlib\nrandom = importlib.import_module('random')\n```", "```py\nproject\n  ├── pkg1\n  │   ├── module1.py\n  │   └── module2.py (contains a function called func1 ())\n  └── pkg2\n      ├── __init__.py\n      ├── module3.py\n      └── sub_pkg1\n          └── module6.py (contains a function called func2 ())\n  ├── pkg3\n  │   ├── module4.py\n  │   ├── module5.py\n      └── sub_pkg2\n          └── module7.py\n```", "```py\nfrom pkg1 import module1\nfrom pkg1.module2 import func1\nfrom pkg2 import module3\nfrom pkg2.sub_pkg1.module6 import func2\nfrom pkg3 import module4, module5\nfrom pkg3.sub_pkg2 import module7\n```", "```py\n     from .) only because module2.py is in the same folder as module1.py.\n    ```", "```py\n    from ..) because module4.py is in the sibling folder of module1.py.\n    ```", "```py\n    from ..) because the target module (module2.py) is inside a folder that is in the sibling folder of module1.py. We used one dot to access the sub_pkg_1 package and another dot to access module2.\n    ```", "```py\n#mypandas.py\nimport pandas\ndef print_dataframe(dict):\n   \"\"\"This function output a dictionary as a data frame \"\"\"\n   brics = pandas.DataFrame(dict)\n   print(brics)\n```", "```py\nImportError: No module named pandas'\n```", "```py\n# myrandomv2.py with default and custom random functions\nimport random\ndef random_1d():\n   \"\"\"This function get a random number between 0 and 9\"\"\"\n   return random.randint(0,9)\ndef random_2d():\n   \"\"\"This function get a random number between 10 and 99\"\"\"\n   return random.randint(10,99)\ndef get_random(lower, upper):\n   \"\"\"This function get a random number between lower and\\\n    upper\"\"\"\n   return random.randint(lower,upper)\n```", "```py\ndef addNumbers(numParam1, numParam2)\n  #function code is omitted\nDef featureCount(moduleName)\n  #function code is omitted \n```", "```py\ndef add_numbers(num_param1, num_param2)\n  #function code is omitted\nDef feature_count(module_name)\n  #function code is omitted \n```", "```py\n \"\"\"mycalculator.py \n This module provides functions for add and subtract of two   numbers\"\"\"\ndef add(x,  y):\n   \"\"\" This function adds two numbers. \n   usage: add (3, 4) \"\"\"\n   return x + y\ndef subtract(x, y):\n   \"\"\" This function subtracts two numbers\n   usage: subtract (17, 8) \"\"\"\n   return x - y\n```", "```py\n# advcalculator.py with sqrt, log and ln functions\nimport math\ndef sqrt(x):\n   \"\"\"This function takes square root of a number\"\"\"\n   return math.sqrt(x)\ndef log(x):\n   \"\"\"This function returns log of base 10\"\"\"\n   return math.log(x,10)\ndef ln(x):\n   \"\"\"This function returns log of base 2\"\"\"\n   return math.log(x,2)\n```", "```py\n# pkgmain0.py with direct import \nimport masifutil.mycalculator as calc\nimport masifutil.myrandom as rand\nimport masifutil.advcalc.advcalculator as acalc\ndef my_main():\n    \"\"\" This is a main function which generates two random\\\n     numbers and then apply calculator functions on them \"\"\"\n    x = rand.random_2d()\n    y = rand.random_1d()\n    sum = calc.add(x,y)\n    diff = calc.subtract(x,y)\n    sroot = acalc.sqrt(x)\n    log10x = acalc.log(x)\n    log2x = acalc.ln(x)\n    print(\"x = {}, y = {}\".format(x, y))\n    print(\"sum is {}\".format(sum))\n    print(\"diff is {}\".format(diff))\n    print(\"square root is {}\".format(sroot))\n    print(\"log base of 10 is {}\".format(log10x))\n    print(\"log base of 2 is {}\".format(log2x))\n\"\"\" This is executed only if the special variable '__name__' is set as main\"\"\"\nif __name__ == \"__main__\":\n    my_main()\n```", "```py\n# mypkgmain1.py with from statements\nfrom masifutil import mycalculator as calc\nfrom masifutil import myrandom as rand\nfrom masifutil.advcalc import advcalculator as acalc\n#rest of the code is the same as in mypkgmain1.py\n```", "```py\n#__init__ file for package 'masifutil'\nfrom .mycalculator import add, subtract\nfrom .myrandom import random_1d, random_2d\nfrom .advcalc.advcalculator import sqrt, log, ln\n```", "```py\n# pkgmain2.py with main function\nimport masifutil\ndef my_main():\n    \"\"\" This is a main function which generates two random\\\n     numbers and then apply calculator functions on them \"\"\"\n    x = masifutil.random_2d()\n    y = masifutil.random_1d()\n    sum = masifutil.add(x,y)\n    diff = masifutil.subtract(x,y)\n    sroot = masifutil.sqrt(x)\n    log10x = masifutil.log(x)\n    log2x = masifutil.ln(x)\n    print(\"x = {}, y = {}\".format(x, y))\n    print(\"sum is {}\".format(sum))\n    print(\"diff is {}\".format(diff))\n    print(\"square root is {}\".format(sroot))\n    print(\"log base of 10 is {}\".format(log10x))\n    print(\"log base of 2 is {}\".format(log2x))\n\"\"\" This is executed only if the special variable '__name__' is set as main\"\"\"\nif __name__ == \"__main__\":\n    my_main()\n```", "```py\n# pkgmain4.py with sys.path append code\nimport sys\nsys.path.append('/Users/muasif/Google Drive/PythonForGeeks/source_code/chapter2/mypackages')\nimport masifutil\ndef my_main():\n    \"\"\" This is a main function which generates two random\\\n     numbers and then apply calculator functions on them \"\"\"\n    x = masifutil.random_2d()\n    y = masifutil.random_1d()\n    sum = masifutil.add(x,y)\n    diff = masifutil.subtract(x,y)\n    sroot = masifutil.sqrt(x)\n    log10x = masifutil.log(x)\n    log2x = masifutil.ln(x)\n    print(\"x = {}, y = {}\".format(x, y))\n    print(\"sum is {}\".format(sum))\n    print(\"diff is {}\".format(diff))\n    print(\"square root is {}\".format(sroot))\n    print(\"log base of 10 is {}\".format(log10x))\n    print(\"log base of 2 is {}\".format(log2x))\n\"\"\" This is executed only if the special variable '__name__' is set as main\"\"\"\nif __name__ == \"__main__\":\n    my_main()\n```", "```py\n# pkgmain5.py\nimport site\nsite.addsitedir('/Users/muasif/Google Drive/PythonForGeeks/source_code/chapter2/mypackages')\nimport masifutil\n#rest of the code is the same as in pkymain4.py\n```", "```py\nfrom setuptools import setup\nsetup(\n   name='masifutilv2',\n   version='0.1.0',\n   author='Muhammad Asif',\n   author_email='ma@example.com',\n   packages=['masifutil', 'masifutil/advcalc'],\n   python_requires='>=3.5, <4',\n   url='http://pypi.python.org/pypi/PackageName/',\n   license='LICENSE.txt',\n   description='A sample package for illustration purposes',\n   long_description=open('README.md').read(),\n   install_requires=[\n   ],\n)\n```", "```py\n> pip install <path to masifutilv2>\n```", "```py\nProcessing ./masifutilv2\nUsing legacy 'setup.py install' for masifutilv2, since package 'wheel' is not installed.\nInstalling collected packages: masifutilv2\n    Running setup.py install for masifutilv2 ... done\nSuccessfully installed masifutilv2-0.1.0 \n```", "```py\n> pip install <path to masifutilv2>\n```", "```py\nProcessing ./masifutilv2\nBuilding wheels for collected packages: masifutilv2\n  Building wheel for masifutilv2 (setup.py) ... done\n  Created wheel for masifutilv2: filename=masi futilv2-0.1.0-py3-none-any.whl size=3497 sha256=038712975b7d7eb1f3fefa799da9e294b34 e79caea24abb444dd81f4cc44b36e\n  Stored in folder: /private/var/folders/xp/g88fvmgs0k90w0rc_qq4xkzxpsx11v/T/pip-ephem-wheel-cache-l2eyp_wq/wheels/de/14/12/71b4d696301fd1052adf287191fdd054cc17ef6c9b59066277\nSuccessfully built masifutilv2\nInstalling collected packages: masifutilv2\nSuccessfully installed masifutilv2-0.1.0\n```", "```py\n    > python setup.py sdist\n    ```", "```py\n    > twine upload --repository testpypi dist/masifutilv2-0.1.0.tar.gz \n    ```", "```py\n    Uploading distributions to https://test.pypi.org/legacy/\n    Enter your username: __token__\n    Enter your password: \n    Uploading masifutilv2-0.1.0.tar.gz\n    100%|█████████████████████| \n    5.15k/5.15k [00:02<00:00, 2.21kB/s]\n    ```", "```py\n> pip install --index-url https://test.pypi.org/simple/ --no-deps masifutilv2\n```", "```py\nLooking in indexes: https://test.pypi.org/simple/\nCollecting masifutilv2\n  Downloading https://test-files.pythonhosted.org/  packages/b7/e9/7afe390b4ec1e5842e8e62a6084505cbc6b9   f6adf0e37ac695cd23156844/masifutilv2-0.1.0.tar.gz (2.3 kB)\nBuilding wheels for collected packages: masifutilv2\n  Building wheel for masifutilv2 (setup.py) ... done\n  Created wheel for masifutilv2: filename=masifutilv2-  0.1.0-py3-none-any.whl size=3497   sha256=a3db8f04b118e16ae291bad9642483874   f5c9f447dbee57c0961b5f8fbf99501\n  Stored in folder: /Users/muasif/Library/Caches/pip/  wheels/1c/47/29/95b9edfe28f02a605757c1   f1735660a6f79807ece430f5b836\nSuccessfully built masifutilv2\nInstalling collected packages: masifutilv2\nSuccessfully installed masifutilv2-0.1.0\n```"]