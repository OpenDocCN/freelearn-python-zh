["```py\ndef authenticate(username, password):\n    return username == 'admin' and password == 'password'\n\n@app.route('/basic-auth-page')\ndef basic_auth_page():\n    auth = request.authorization\n    if not auth or not authenticate(auth.username, auth.password)\n        return Response('Login with username/password', 401, {'WWW-Authenticate': 'Basic realm=\"Login Required\"'})\n    return render_template('some_page.html')\n```", "```py\n username = request.environ.get('REMOTE_USER')\n```", "```py\nCN=user1,OU=Marketing,DC=example,DC=com\n```", "```py\n$ pip install python-ldap\n```", "```py\nimport ldap\n\nLDAP_SERVER=\"ldap://example.com:389\"\nROOT_DN=\"dc=example,dc=com\"\nSERVICE_USER=\"ServiceAccount\"\nSERVICE_PASSWORD=\"SOME_PASSWORD\"\nUID_FIELD_NAME=\"userPrincipalName\" # specific for AD\nUSER_DOMAIN=\"example.com\"\n```", "```py\ncon = ldap.initialize(LDAP_SERVER)\ncon.set_option(ldap.OPT_REFERRALS, 0)\ncon.bind_s(SERVICE_USER, SERVICE_PASSWORD)\n```", "```py\nusername = username + '@' + USER_DOMAIN\nfilter_str = \"%s=%s\" % (UID_FIELD_NAME, username)\nuser = con.search_s(ROOT_DN,\n                        ldap.SCOPE_SUBTREE,\n                        filter_str,\n                        [\"givenName\",\"sn\",\"mail\"])\n```", "```py\ndef ldap_auth(username, password):\n    con = ldap.initialize(LDAP_SERVER)\n    con.set_option(ldap.OPT_REFERRALS, 0)\n    username = username + '@' + USER_DOMAIN\n    con.bind_s(SERVICE_USER, SERVICE_PASSWORD)\n    filter_str = \"%s=%s\" % (UID_FIELD_NAME, username)\n    user = con.search_s(ROOT_DN,\n                        ldap.SCOPE_SUBTREE,\n                        filter_str,\n                        [\"givenName\",\"sn\",\"mail\"])\n    if user:\n print(\"LDAP got User {0}\".format(user))\n # username = DN from search\n username = user[0][0]\n try:\n con.bind_s(username, password)\n return True\n except ldap.INVALID_CREDENTIALS:\n return False\n    else:\n        return False\n```", "```py\n...\nFlask-Login\n...\n```", "```py\n$ source venv/bin/activate\n$ pip install -r requirements.txt\n```", "```py\n./\n  config.py\n  manage.py\n  main.py\n  config.py \n  database.db \n  webapp/ \n    __init__.py\n    blog/\n      __init__.py \n      controllers.py\n      forms.py\n      models.py\n    auth/\n __init__.py\n controllers.py\n models.py\n forms.py\n    main/\n      __init__.py\n      controllers.py\n    templates/ \n      blog/\n      auth/\n  migrations/ \n    versions/ \n```", "```py\ndef create_module(app, **kwargs):\n    from .controllers import blog_blueprint\n    app.register_blueprint(blog_blueprint)\n```", "```py\nfrom flask_login import LoginManager \n\nlogin_manager = LoginManager()\nlogin_manager.login_view = \"auth.login\" login_manager.session_protection = \"strong\" login_manager.login_message = \"Please login to access this page\" login_manager.login_message_category = \"info\" \n\n@login_manager.user_loader \ndef load_user(userid):\n    from models import User\n    return User.query.get(userid) \n\ndef create_module(app, **kwargs):\n    ...\n    login_manager.init_app(app)\n    from .controllers import auth_blueprint\n    app.register_blueprint(auth_blueprint)\n    ...\n```", "```py\n...\n\ndef create_app(object_name):\n...\n    app = Flask(__name__)\n    app.config.from_object(object_name)\n\n    db.init_app(app)\n    migrate.init_app(app, db)\n\n    from .auth import create_module as auth_create_module\n    from .blog import create_module as blog_create_module\n    from .main import create_module as main_create_module\n    auth_create_module(app)\n    blog_create_module(app)\n    main_create_module(app)\n\n    return app\n\n```", "```py\n...\nflask-bcrypt\n...\n```", "```py\n...\nfrom flask.ext.bcrypt import Bcrypt \nbcrypt = Bcrypt()\n...\ndef create_module(app, **kwargs):\n    bcrypt.init_app(app)\n    login_managet.init_app(app)\n\n    from .controllers import auth_blueprint\n    app.register_blueprint(auth_blueprint)\n ...\n```", "```py\nfrom . import bcrypt\n\nclass User(db.Model):\n    ...\n    def set_password(self, password):\n self.password = bcrypt.generate_password_hash(password)\n\n def check_password(self, password):\n return bcrypt.check_password_hash(self.password, password) ...\n```", "```py\nfrom flask_login import AnonymousUserMixin\n\nclass BlogAnonymous(AnonymousUserMixin):\n    def __init__(self):\n        self.username = 'Guest'\n```", "```py\nclass User(db.model):\n...\n    @property\n def is_authenticated(self):\n        if isinstance(self, AnonymousUserMixin):\n            return False\n        else:\n            return True\n```", "```py\nclass User(db.model):\n...\n    @property\n def is_active(self):\n        return True\n```", "```py\nclass User(db.model):\n...\n    @property\n def is_anonymous(self):\n        if isinstance(self, AnonymousUserMixin):\n            return True\n        else:\n            return False\n\n def get_id(self):\n        return unicode(self.id)\n```", "```py\n\nfrom wtforms import ( \n  StringField, \n  TextAreaField, \n  PasswordField, \n  BooleanField \n) \nfrom wtforms.validators import DataRequired, Length, EqualTo, URL \nclass LoginForm(Form): \n  username = StringField('Username', [ \n    DataRequired(), Length(max=255) \n  ]) \n  password = PasswordField('Password', [DataRequired()])\n\n  def validate(self): \n    check_validate = super(LoginForm, self).validate() \n    # if our validators do not pass \n    if not check_validate: \n      return False \n    # Does our user exist\n    user = User.query.filter_by( \n      username=self.username.data \n    ).first() \n    if not user: \n      self.username.errors.append( \n        'Invalid username or password' \n      ) \n      return False \n    # Do the passwords match \n    if not self.user.check_password(self.password.data): \n      self.username.errors.append( \n        'Invalid username or password' \n      ) \n      return False \n    return True \n```", "```py\nclass Config(object):\n    SECRET_KEY = '736670cb10a600b695a55839ca3a5aa54a7d7356cdef815d2ad6e19a2031182b'\n    RECAPTCHA_PUBLIC_KEY = \"6LdKkQQTAAAAAEH0GFj7NLg5tGicaoOus7G9Q5Uw\"\n    RECAPTCHA_PRIVATE_KEY = '6LdKkQQTAAAAAMYroksPTJ7pWhobYb88fTAcxcYn'\n```", "```py\nclass RegisterForm(Form): \n  username = StringField('Username', [ \n    DataRequired(), \n    Length(max=255) \n  ]) \n  password = PasswordField('Password', [ \n    DataRequired(), \n    Length(min=8) \n  ]) \n  confirm = PasswordField('Confirm Password', [ \n    DataRequired(), \n    EqualTo('password') \n  ]) \n  recaptcha = RecaptchaField() \n  def validate(self): \n    check_validate = super(RegisterForm, self).validate() \n    # if our validators do not pass \n    if not check_validate: \n      return False \n    user = User.query.filter_by( \n      username=self.username.data \n    ).first() \n    # Is the username already being used \n    if user: \n      self.username.errors.append( \n        \"User with that name already exists\" \n      ) \n      return False \n    return True \n```", "```py\nclass PostForm(Form): \n  title = StringField('Title', [ \n    DataRequired(), \n    Length(max=255) \n  ]) \n  text = TextAreaField('Content', [DataRequired()]) \n```", "```py\n...\nfrom flask_login import login_user, logout_user\n...\n @auth_blueprint.route('/login', methods=['GET', 'POST'])\n@oid.loginhandler\ndef login():\n    form = LoginForm()\n    ...\n    if form.validate_on_submit():\n        user = User.query.filter_by(username=form.username.data).one()\n        login_user(user, remember=form.remember.data)\n        ...\n        flash(\"You have been logged in.\", category=\"success\")\n        return redirect(url_for('main.index'))\n\n    ...\n    return render_template('login.html', form=form, openid_form=openid_form)\n```", "```py\n@auth_blueprint.route('/logout', methods=['GET', 'POST']) \ndef logout():\n  logout_user()\n  flash(\"You have been logged out.\", category=\"success\") \n  return redirect(url_for('main.index'))\n```", "```py\n@auth_blueprint.route('/register', methods=['GET', 'POST']) \ndef register(): \n  form = RegisterForm() \n  if form.validate_on_submit(): \n    new_user = User() \n    new_user.username = form.username.data \n    new_user.set_password(form.username.data) \n    db.session.add(new_user) \n    db.session.commit() \n    flash( \n      \"Your user has been created, please login.\", \n      category=\"success\" \n    ) \n    return redirect(url_for('.login')) \n  return render_template('register.html', form=form) \n```", "```py\n...\nfrom flask_login import login_required, current_user\nfrom .forms import CommentForm, PostForm\n...\n@blog_blueprint.route('/new', methods=['GET', 'POST'])\n@login_required\ndef new_post(): \n  form = PostForm() \n  if form.validate_on_submit(): \n    new_post = Post()\n    new_post.user_id = current_user.id\n    new_post.title = form.title.data\n    new_post.text = form.text.data \n    db.session.add(new_post) \n    db.session.commit()\n    flash(\"Post added\", info)\n    return redirect(url_for('blog.post', post_id=new_post.id)\nreturn render_template('new.html', form=form)\n```", "```py\n{% extends \"base.html\" %}\n{% block title %}Post Creation{% endblock %}\n{% block body %}\n<div class=\"p-4 shadow-sm\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <h1>Create a New Post</h1>\n        </div>\n    </div>\n\n<div class=\"row\">\n    <form method=\"POST\" action=\"{{ url_for('.new_post') }}\">\n        {{ form.hidden_tag() }}\n        <div class=\"form-group\">\n            {{ form.title.label }}\n            {% if form.title.errors %}\n            {% for e in form.title.errors %}\n            <p class=\"help-block\">{{ e }}</p>\n            {% endfor %}\n            {% endif %}\n            {{ form.title(class_='form-control') }}\n        </div>\n        <div class=\"form-group\">\n            {{ form.text.label }}\n            {% if form.text.errors %}\n            {% for e in form.text.errors %}\n            <p class=\"help-block\">{{ e }}</p>\n            {% endfor %}\n            {% endif %}\n            {{ form.text(id=\"editor\", class_='form-control') }}\n        </div>\n        <input class=\"btn btn-primary\" type=\"submit\" value=\"Submit\">\n    </form>\n</div>\n</div>\n{% endblock %}\n\n{% block js %}\n<script src=\"img/ckeditor.js\">\n</script>\n<script>\n    CKEDITOR.replace('editor');\n</script>\n{% endblock %}\n```", "```py\n<form method=\"POST\" action=\"{{ url_for('.edit_post', id=post.id) \n   }}\"> \n...  \n</form> \n```", "```py\n<div class=\"row\"> \n  <div class=\"col-lg-6\"> \n    <p>Written By <a href=\"{{ url_for('.user', \n       username=post.user.username) }}\">{{ post.user.username \n       }}</a> on {{ post.publish_date }}</p> \n  </div> \n  ... \n  {% if current_user == post.user_id %}\n  <div class=\"row\"> \n    <div class=\"col-lg-2\"> \n    <a href=\"{{ url_for('.edit_post', id=post.id) }}\" class=\"btn \n       btn-primary\">Edit</a> \n  </div> \n  {% endif %}\n</div> \n```", "```py\n{% if current_user.is_authenticated %}\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"{{url_for('auth.logout')}}\">\n    <i class=\"fa fa-fw fa-sign-out\"></i>Logout</a>\n</li>\n{% else %}\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"{{url_for('auth.login')}}\">\n    <i class=\"fa fa-fw fa-sign-in\"></i>Login</a>\n</li>\n<li class=\"nav-item\">\n    <a class=\"nav-link\" href=\"{{url_for('auth.register')}}\">\n    <i class=\"fa fa-fw fa-sign-in\"></i>Register</a>\n</li>\n{% endif %}\n```", "```py\n... Flask-OpenID ...\n```", "```py\n...\nfrom flask_openid import OpenID\n...  \noid = OpenID() \n```", "```py\ndef create_module(app, **kwargs):\n    ...\n    oid.init_app(app)\n    ...\n```", "```py\nfrom wtforms.validators import DataRequired, Length, EqualTo, URL\nclass OpenIDForm(Form): \n  openid = StringField('OpenID URL', [DataRequired(), URL()]) \n```", "```py\n...\n\n@auth_blueprint.route('/login', methods=['GET', 'POST']) \n@oid.loginhandler \ndef login(): \n  form = LoginForm() \n  openid_form = OpenIDForm() \n  if openid_form.validate_on_submit(): \n    return oid.try_login( \n      openid_form.openid.data, \n      ask_for=['nickname', 'email'], \n      ask_for_optional=['fullname'] \n    ) \n  if form.validate_on_submit(): \n    flash(\"You have been logged in.\", category=\"success\") \n    return redirect(url_for('blog.home')) \n  openid_errors = oid.fetch_error() \n  if openid_errors: \n    flash(openid_errors, category=\"danger\") \n  return render_template( \n    'login.html', \n    form=form, \n    openid_form=openid_form \n  ) \n\n@main_blueprint.route('/register', methods=['GET', 'POST']) \n@oid.loginhandler \ndef register(): \n  form = RegisterForm() \n  openid_form = OpenIDForm() \n  if openid_form.validate_on_submit(): \n    return oid.try_login( \n      openid_form.openid.data, \n      ask_for=['nickname', 'email'], \n      ask_for_optional=['fullname'] \n    ) \n  if form.validate_on_submit(): \n    new_user = User(form.username.data) \n    new_user.set_password(form.password.data) \n    db.session.add(new_user) \n    db.session.commit() \n    flash( \n      \"Your user has been created, please login.\", \n      category=\"success\" \n    ) \n    return redirect(url_for('.login')) \n  openid_errors = oid.fetch_error() \n  if openid_errors: \n    flash(openid_errors, category=\"danger\") \n  return render_template( \n    'register.html', \n    form=form, \n    openid_form=openid_form \n  ) \n```", "```py\n@oid.after_login \ndef create_or_login(resp): \n    from models import db, User \n    username = resp.fullname or resp.nickname or resp.email \n    if not username: \n      flash('Invalid login. Please try again.', 'danger') \n      return redirect(url_for('main.login')) \n    user = User.query.filter_by(username=username).first() \n    # if the user does not exist create it\n    if user is None: \n      user = User(username) \n      db.session.add(user)\n```", "```py\n      db.session.commit() \n    login_user(user)\n    return redirect(url_for('main.index')) \n```", "```py\n...\nflask-dance\n...\n```", "```py\n...\nclass Config(object):\n    ...\n    TWITTER_API_KEY = \"XXX\"\n    TWITTER_API_SECRET = \"XXXX\"\n    FACEBOOK_CLIENT_ID = \"YYYY\"\n    FACEBOOK_CLIENT_SECRET = \"YYYY\"\n```", "```py\n...\nfrom flask_dance.contrib.twitter import make_twitter_blueprint, twitter\nfrom flask_dance.contrib.facebook import make_facebook_blueprint, facebook\n...\ndef create_module(app, **kwargs):\n...\n    twitter_blueprint = make_twitter_blueprint(\n        api_key=app.config.get(\"TWITTER_API_KEY\"),\n        api_secret=app.config.get(\"TWITTER_API_SECRET\"),\n    )\n    app.register_blueprint(twitter_blueprint, url_prefix=\"/auth/login\")\n\n    facebook_blueprint = make_facebook_blueprint(\n        client_id=app.config.get(\"FACEBOOK_CLIENT_ID\"),\n        client_secret=app.config.get(\"FACEBOOK_CLIENT_SECRET\"),\n)\n    app.register_blueprint(facebook_blueprint, url_prefix=\"auth/login\"\n...\n```", "```py\n...\nfrom flask_dance.consumer import oauth_authorized\n...\n@oauth_authorized.connect\ndef logged_in(blueprint, token):\n    from .models import db, User\n    if blueprint.name == 'twitter':\n username = session.get('screen_name')\n elif blueprint.name == 'facebook':\n resp = facebook.get(\"/me\")\n username = resp.json()['name']\n    user = User.query.filter_by(username=username).first()\n    if not user:\n        user = User()\n        user.username = username\n        db.session.add(user)\n        db.session.commit()\n\n    login_user(user)\n    flash(\"You have been logged in.\", category=\"success\")\n```", "```py\n<h2 class=\"text-center\">Register/Login With Facebook</h2>\n<a href=\"{{ url_for('facebook.login') }}\">Login</a>\n\n<h2 class=\"text-center\">Register/Login With Twitter</h2>\n<a href=\"{{ url_for('twitter.login') }}\">Login</a>\n```", "```py\nroles = db.Table(\n    'role_users',\n    db.Column('user_id', db.Integer, db.ForeignKey('user.id')),\n    db.Column('role_id', db.Integer, db.ForeignKey('role.id'))\n)\n\nclass User(db.Model):\n    ...\n    roles = db.relationship(\n 'Role',\n        secondary=roles,\n        backref=db.backref('users', lazy='dynamic')\n )\n\n    def __init__(self, username=\"\"):\n        default = Role.query.filter_by(name=\"default\").one()\n self.roles.append(default)\n        self.username = username\n\n    ...\n    def has_role(self, name):\n for role in self.roles:\n if role.name == name:\n return True\n        return False\n...\nclass Role(db.Model):\n    id = db.Column(db.Integer(), primary_key=True)\n    name = db.Column(db.String(80), unique=True)\n    description = db.Column(db.String(255))\n\n    def __init__(self, name):\n        self.name = name\n\n    def __repr__(self):\n        return '<Role {}>'.format(self.name)\n```", "```py\nimport functools\n...\ndef has_role(name):\n    def real_decorator(f):\n        def wraps(*args, **kwargs):\n            if current_user.has_role(name):\n                return f(*args, **kwargs)\n            else:\n                abort(403)\n        return functools.update_wrapper(wraps, f)\n    return real_decorator\n```", "```py\n...\nfrom ..auth import has_role \n...\n@blog_blueprint.route('/new, methods=['GET', 'POST']) \n@login_required \n@has_role('poster') \ndef new_post(id): \n    ... \n```", "```py\n@blog_blueprint.route('/edit/<int:id>', methods=['GET', 'POST'])\n@login_required\n@has_role('poster')\ndef edit_post(id):\n    post = Post.query.get_or_404(id)\n    # We want admins to be able to edit any post\n    if current_user.id == post.user.id:\n        form = PostForm()\n        if form.validate_on_submit():\n            post.title = form.title.data\n            post.text = form.text.data\n            post.publish_date = datetime.datetime.now()\n            db.session.add(post)\n            db.session.commit()\n            return redirect(url_for('.post', post_id=post.id))\n        form.title.data = post.title\n        form.text.data = post.text\n        return render_template('edit.html', form=form, post=post)\n    abort(403)\n```"]