["```py\nimport matplotlib.pyplot as plt\nfrom pylab import show\n\nx_values = [1,2,3,4] \ny_values = [5,7,6,8] \nplt.plot(x_values, y_values)\nshow()\n```", "```py\nfrom matplotlib.figure import Figure \nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg \nimport tkinter as tk \n#-------------------------------------------------------------- \nfig = Figure(figsize=(12, 8), facecolor='white') \n#-------------------------------------------------------------- \n# axis = fig.add_subplot(111) # 1 row, 1 column, only graph   #<-- uncomment\naxis = fig.add_subplot(211) # 2 rows, 1 column, Top graph \n#-------------------------------------------------------------- \n```", "```py\nxValues = [1,2,3,4] \nyValues = [5,7,6,8] \naxis.plot(xValues, yValues) \naxis.set_xlabel('Horizontal Label') \naxis.set_ylabel('Vertical Label') \n# axis.grid()                                 # default line style\naxis.grid(linestyle='-')                      # solid grid lines \n```", "```py\n#-------------------------------------------------------------- \ndef _destroyWindow(): \n    root.quit() \n    root.destroy() \n#-------------------------------------------------------------- \nroot = tk.Tk() \nroot.protocol('WM_DELETE_WINDOW', _destroyWindow) \n#-------------------------------------------------------------- \n```", "```py\ncanvas = FigureCanvasTkAgg(fig, master=root) \ncanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1) \n#-------------------------------------------------------------- \nroot.mainloop()\n```", "```py\n# imports and figure are the same as in the previous code\n#-------------------------------------------------------------- \naxis1 = fig.add_subplot(221)\naxis2 = fig.add_subplot(222, sharex=axis1, sharey=axis1)\naxis3 = fig.add_subplot(223, sharex=axis1, sharey=axis1)\naxis4 = fig.add_subplot(224, sharex=axis1, sharey=axis1)\n#-------------------------------------------------------------- \naxis1.plot(xValues, yValues) \naxis1.set_xlabel('Horizontal Label 1') \naxis1.set_ylabel('Vertical Label 1') \naxis1.grid(linestyle='-') # solid grid lines \n#-------------------------------------------------------------- \naxis2.plot(xValues, yValues) \naxis2.set_xlabel('Horizontal Label 2') \naxis2.set_ylabel('Vertical Label 2') \naxis2.grid(linestyle='-') # solid grid lines \n#-------------------------------------------------------------- \naxis3.plot(xValues, yValues) \naxis3.set_xlabel('Horizontal Label3') \naxis3.set_ylabel('Vertical Label 3') \naxis3.grid(linestyle='-') # solid grid lines \n#-------------------------------------------------------------- \naxis4.plot(xValues, yValues) \naxis4.set_xlabel('Horizontal Label 4') \naxis4.set_ylabel('Vertical Label 4') \naxis4.grid(linestyle='-') # solid grid lines \n#-------------------------------------------------------------- \n# root and canvas are the same as in the previous code\n```", "```py\n# imports and figure are the same as in the previous code\n#--------------------------------------------------------------\n    #-------------------------------------------------------------- \n    axis = fig.add_subplot(211) # 2 rows, 1 column, Top graph \n    #-------------------------------------------------------------- \n    xValues = [1,2,3,4] \n    yValues = [5,7,6,8] \n    axis.plot(xValues, yValues) \n    axis.set_xlabel('Horizontal Label') \n    axis.set_ylabel('Vertical Label') \n    axis.grid(linestyle='-')     # solid grid lines \n    #-------------------------------------------------------------- \n    axis1 = fig.add_subplot(212) # 2 rows, 1 column, Bottom graph \n    #-------------------------------------------------------------- \n    xValues1 = [1,2,3,4] \n    yValues1 = [7,5,8,6] \n    axis1.plot(xValues1, yValues1) \n    axis1.grid()                 # default line style  \n    #-------------------------------------------------------------- \n#-------------------------------------------------------------- \n# root and canvas are the same as in the previous code\n```", "```py\nfrom matplotlib.figure import Figure \nfrom matplotlib.backends.backend_tkagg import FigureCanvasTkAgg \nimport tkinter as tk \n#-------------------------------------------------------------- \nfig = Figure(figsize=(12, 5), facecolor='white') \n#-------------------------------------------------------------- \n```", "```py\naxis = fig.add_subplot(111) # 1 row, 1 column  \n\nxValues = [1,2,3,4] \nyValues0 = [6,7.5,8,7.5] \nyValues1 = [5.5,6.5,8,6] \nyValues2 = [6.5,7,8,7] \n\nt0, = axis.plot(xValues, yValues0) \nt1, = axis.plot(xValues, yValues1) \nt2, = axis.plot(xValues, yValues2) \n\naxis.set_ylabel('Vertical Label') \naxis.set_xlabel('Horizontal Label') \naxis.grid() \n\nfig.legend((t0, t1, t2), ('First line', 'Second line', 'Third \n line'), 'upper right') \n#-------------------------------------------------------------- \n```", "```py\ndef _destroyWindow(): \n    root.quit() \n    root.destroy() \n#-------------------------------------------------------------- \nroot = tk.Tk() \nroot.protocol('WM_DELETE_WINDOW', _destroyWindow) \n#-------------------------------------------------------------- \ncanvas = FigureCanvasTkAgg(fig, master=root) \ncanvas._tkcanvas.pack(side=tk.TOP, fill=tk.BOTH, expand=1) \n#-------------------------------------------------------------- \nroot.mainloop()\n```", "```py\nt0, = axis.plot(xValues, yValues0, color = 'purple') \nt1, = axis.plot(xValues, yValues1, color = 'red') \nt2, = axis.plot(xValues, yValues2, color = 'blue')\n```", "```py\naxis  = fig.add_subplot(111)        # 1 row, 1 column \nxValues  = [1,2,3,4] \nyValues0 = [6,7.5,8,7.5] \nyValues1 = [5.5,6.5,50,6]           # one very high value (50)\nyValues2 = [6.5,7,8,7]\n```", "```py\nyValues0 = [6,7.5,8,7.5] \nyValues1 = [5.5,6.5,50,6]           # one very high value (50) \nyValues2 = [6.5,7,8,7] \n\naxis.set_ylim(5, 8)                 # limit the vertical display\n```", "```py\nxValues  = [1,2,3,4] \n\nyValues0 = [6,7.5,8,7.5] \nyValues1 = [5.5,6.5,50,6]           # one very high value (50) \nyValues2 = [6.5,7,8,7]               \n\naxis.set_ylim(0, 8)                 # lower limit (0) \naxis.set_xlim(0, 8)                 # use same limits for x\n```", "```py\nxValues  = [1,2,3,4] \n\nyValues0 = [6,7.5,8,7.5] \nyValues1 = [5.5,6.5,50,6]              # one very high value (50) \nyValues2 = [6.5,7,8,7]               \nyAll = [yValues0, yValues1, yValues2]  # list of lists \n\n# flatten list of lists retrieving minimum value \nminY = min([y for yValues in yAll for y in yValues]) \n\nyUpperLimit = 20 \n# flatten list of lists retrieving max value within defined limit \nmaxY = max([y for yValues in yAll for y in yValues if y < \nyUpperLimit]) \n\n# dynamic limits \naxis.set_ylim(minY, maxY)                  \naxis.set_xlim(min(xValues), max(xValues))                 \n\nt0, = axis.plot(xValues, yValues0) \nt1, = axis.plot(xValues, yValues1) \nt2, = axis.plot(xValues, yValues2)\n```", "```py\nyValues0 = [6,7.5,8,7.5] \nyValues1 = [5.5,6.5,50,6]              # one very high value (50) \nyValues2 = [6.5,7,8,7]               \nyAll = [yValues0, yValues1, yValues2]  # list of lists\n```", "```py\n# flatten list of lists retrieving minimum value \nminY = min([y for yValues in yAll for y in yValues])\n```", "```py\nyUpperLimit = 20 \n# flatten list of lists retrieving max value within defined limit \nmaxY = max([y for yValues in yAll for y in yValues if y < \nyUpperLimit])\n```"]