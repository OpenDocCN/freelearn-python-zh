["```py\ndef get_clean_data(source):\n    data = load_data(source)\n    cleaned_data = clean_data(data)\n    return cleaned_data\n```", "```py\ndef filter_ints(v):\n    return [num for num in v if is_positive(num)]\n\ndef is_positive(n):\n    return n > 0\n```", "```py\nfrom unittest import TestCase  # 1\nfrom unittest.mock import patch, call  # 2\nfrom nose.tools import assert_equal  # 3\nfrom ch7.filter_funcs import filter_ints  # 4\n\nclass FilterIntsTestCase(TestCase):  # 5\n\n    @patch('ch7.filter_funcs.is_positive')  # 6\n    def test_filter_ints(self, is_positive_mock):  # 7\n        # preparation\n        v = [3, -4, 0, 5, 8]\n\n        # execution\n        filter_ints(v)  # 8\n\n        # verification\n        assert_equal(\n            [call(3), call(-4), call(0), call(5), call(8)],\n            is_positive_mock.call_args_list\n        )  # 9\n```", "```py\n$ pip install nose\n\n```", "```py\n$ nosetests tests/test_ch7/\n.\n------------------------------------------------------------\nRan 1 test in 0.006s\nOK\n\n```", "```py\n$ nosetests tests/test_ch7/\nF\n============================================================\nFAIL: test_filter_ints (test_filter_funcs.FilterIntsTestCase)\n------------------------------------------------------------\nTraceback (most recent call last):\n File \"/usr/lib/python3.4/unittest/mock.py\", line 1125, in patched\n return func(*args, **keywargs)\n File \"/home/fab/srv/learning.python/tests/test_ch7/test_filter_funcs.py\", line 21, in test_filter_ints\n is_positive_mock.call_args_list\nAssertionError: [call(3), call(-4), call(0), call(5), call(9)] != [call(3), call(-4), call(0), call(5), call(8)]\n------------------------------------------------------------\nRan 1 test in 0.008s\nFAILED (failures=1)\n\n```", "```py\ndef test_filter_ints_return_value(self):\n    v = [3, -4, 0, -2, 5, 0, 8, -1]\n\n    result = filter_ints(v)\n\n    assert_list_equal([3, 5, 8], result)\n```", "```py\n$ nosetests tests/test_ch7/\n..\n------------------------------------------------------------\nRan 2 tests in 0.006s\nOK\n\n```", "```py\ndef filter_ints(v):\n    v = [num for num in v if num != 0]  # 1\n    return [num for num in v if is_positive(num)]\n```", "```py\n$ nosetests tests/test_ch7/test_filter_funcs_refactored.py \nF.\n============================================================\nFAIL: test_filter_ints (test_filter_funcs_refactored.FilterIntsTestCase)\n------------------------------------------------------------\n... omit ...\nAssertionError: [call(3), call(-4), call(0), call(5), call(8)] != [call(3), call(-4), call(5), call(8)]\n------------------------------------------------------------\nRan 2 tests in 0.002s\nFAILED (failures=1)\n\n```", "```py\nfrom unittest import TestCase\nfrom nose.tools import assert_list_equal\nfrom ch7.filter_funcs import filter_ints\n\nclass FilterIntsTestCase(TestCase):\n    def test_filter_ints_return_value(self):\n        v = [3, -4, 0, -2, 5, 0, 8, -1]\n        result = filter_ints(v)\n        assert_list_equal([3, 5, 8], result)\n```", "```py\ndef filter_ints(v):\n    return [3, 5, 8]\n```", "```py\ndef test_filter_ints_return_value(self):\n    v1 = [3, -4, 0, -2, 5, 0, 8, -1]\n    v2 = [7, -3, 0, 0, 9, 1]\n\n    assert_list_equal([3, 5, 8], filter_ints(v1))\n    assert_list_equal([7, 9, 1], filter_ints(v2))\n```", "```py\ndef test_is_positive(self):\n    assert_equal(False, is_positive(-2))  # before boundary\n    assert_equal(False, is_positive(0))  # on the boundary\n    assert_equal(True, is_positive(2))  # after the boundary\n```", "```py\ndef test_is_positive(self):\n    assert_equal(False, is_positive(-1))\n    assert_equal(False, is_positive(0))\n    assert_equal(True, is_positive(1))\n```", "```py\ndef test_is_positive(self):\n    assert_equal(False, is_positive(0))\n    for n in range(1, 10 ** 4):\n        assert_equal(False, is_positive(-n))\n        assert_equal(True, is_positive(n))\n```", "```py\nnested = {\n    'fullname': 'Alessandra',\n    'age': 41,\n    'phone-numbers': ['+447421234567', '+447423456789'],\n    'residence': {\n        'address': {\n            'first-line': 'Alexandra Rd',\n            'second-line': '',\n        },\n        'zip': 'N8 0PP',\n        'city': 'London',\n        'country': 'UK',\n    },\n}\n\nflat = {\n    'fullname': 'Alessandra',\n    'age': 41,\n    'phone-numbers': ['+447421234567', '+447423456789'],\n    'residence.address.first-line': 'Alexandra Rd',\n    'residence.address.second-line': '',\n    'residence.zip': 'N8 0PP',\n    'residence.city': 'London',\n    'residence.country': 'UK',\n}\n```", "```py\ndef flatten(data, prefix='', separator='.'):\n    \"\"\"Flattens a nested dict structure. \"\"\"\n    if not isinstance(data, dict):\n        return {prefix: data} if prefix else data\n\n    result = {}\n    for (key, value) in data.items():\n        result.update(\n            flatten(\n                value,\n                _get_new_prefix(prefix, key, separator),\n                separator=separator))\n    return result\n\ndef _get_new_prefix(prefix, key, separator):\n    return (separator.join((prefix, str(key)))\n            if prefix else str(key))\n```", "```py\n# ... imports omitted ...\nclass FlattenTestCase(TestCase):\n\n    def test_flatten(self):\n        test_cases = [\n            ({'A': {'B': 'C', 'D': [1, 2, 3], 'E': {'F': 'G'}},\n 'H': 3.14,\n 'J': ['K', 'L'],\n 'M': 'N'},\n             {'A.B': 'C',\n              'A.D': [1, 2, 3],\n              'A.E.F': 'G',\n              'H': 3.14,\n              'J': ['K', 'L'],\n              'M': 'N'}),\n            (0, 0),\n            ('Hello', 'Hello'),\n            ({'A': None}, {'A': None}),\n        ]\n        for (nested, flat) in test_cases:\n            assert_equal(flat, flatten(nested))\n\n    def test_flatten_custom_separator(self):\n        nested = {'A': {'B': {'C': 'D'}}}\n        assert_equal(\n            {'A#B#C': 'D'}, flatten(nested, separator='#'))\n```", "```py\n>>> gen = (n for n in range(2))\n>>> next(gen)\n0\n>>> next(gen)\n1\n>>> next(gen)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nStopIteration\n>>> print(undefined_var)\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNameError: name 'undefined_var' is not defined\n>>> mylist = [1, 2, 3]\n>>> mylist[5]\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nIndexError: list index out of range\n>>> mydict = {'a': 'A', 'b': 'B'}\n>>> mydict['c']\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nKeyError: 'c'\n>>> 1 / 0\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nZeroDivisionError: division by zero\n```", "```py\ndef try_syntax(numerator, denominator):\n    try:\n        print('In the try block: {}/{}'\n              .format(numerator, denominator))\n        result = numerator / denominator\n    except ZeroDivisionError as zde:\n        print(zde)\n    else:\n        print('The result is:', result)\n        return result\n    finally:\n        print('Exiting')\n\nprint(try_syntax(12, 4))\nprint(try_syntax(11, 0))\n```", "```py\n$ python exceptions/try.syntax.py \nIn the try block: 12/4\nThe result is: 3.0\nExiting\n3.0\nIn the try block: 11/0\ndivision by zero\nExiting\nNone\n\n```", "```py\nimport json\njson_data = '{}'\ntry:\n    data = json.loads(json_data)\nexcept (ValueError, TypeError) as e:\n    print(type(e), e)\n```", "```py\ntry:\n    # some code\nexcept Exception1:\n    # react to Exception1\nexcept (Exception2, Exception3):\n    # react to Exception2 and Exception3\nexcept Exception3:\n    # react to Exception3\n...\n```", "```py\nn = 100\nfound = False\nfor a in range(n):\n    if found: break\n    for b in range(n):\n        if found: break\n        for c in range(n):\n            if 42 * a + 17 * b + c == 5096:\n                found = True\n                print(a, b, c)  # 79 99 95\n```", "```py\nclass ExitLoopException(Exception):\n pass\n\ntry:\n    n = 100\n    for a in range(n):\n        for b in range(n):\n            for c in range(n):\n                if 42 * a + 17 * b + c == 5096:\n                    raise ExitLoopException(a, b, c)\nexcept ExitLoopException as ele:\n    print(ele)  # (79, 99, 95)\n```", "```py\ndef calc_triples(mx):\n    triples = []\n    for a in range(1, mx + 1):\n        for b in range(a, mx + 1):\n            hypotenuse = calc_hypotenuse(a, b)\n            if is_int(hypotenuse):\n                triples.append((a, b, int(hypotenuse)))\n    return triples\n\ndef calc_hypotenuse(a, b):\n    return (a**2 + b**2) ** .5\n\ndef is_int(n):  # n is expected to be a float\n    return n.is_integer()\n\ntriples = calc_triples(1000)\n```", "```py\n$ python -m cProfile profiling/triples.py\n1502538 function calls in 0.750 seconds\nOrdered by: standard name\nncalls  tottime  percall filename:lineno(function)\n500500    0.469    0.000 triples.py:14(calc_hypotenuse)\n500500    0.087    0.000 triples.py:18(is_int)\n 1    0.000    0.000 triples.py:4(<module>)\n 1    0.163    0.163 triples.py:4(calc_triples)\n 1    0.000    0.000 {built-in method exec}\n 1034    0.000    0.000 {method 'append' of 'list' objects}\n 1    0.000    0.000 {method 'disable' of '_lsprof.Profil...\n500500    0.032    0.000 {method 'is_integer' of 'float' objects}\n\n```", "```py\ndef calc_hypotenuse(a, b):\n    return (a*a + b*b) ** .5\n```", "```py\ndef is_int(n):\n    return n == int(n)\n```"]