["```py\n    sudo apt-get install python3.10 \n    ```", "```py\n    pip3 install notebook \n    ```", "```py\n    jupyter notebook \n    ```", "```py\n    python3 -m notebook \n    ```", "```py\np = \"Hello India\"\nq = 10\nr = 10.2\nprint(type(p))\nprint(type(q))\nprint(type(r))\nprint(type(12+31j)) \n```", "```py\n<class 'str'>\n<class 'int'>\n<class 'float'>\n<class 'complex'> \n```", "```py\nvar = 13.2\nprint(var)\n\nprint(type (var))\n\nvar = \"Now the type is string\"\nprint(type(var)) \n```", "```py\n13.2\n<class 'float'> \n<class 'str'> \n```", "```py\nprint(type(bool(22)))\nprint(type(True))\nprint(type(False)) \n```", "```py\n<class 'bool'>\n<class 'bool'>\n<class 'bool'> \n```", "```py\nbool(False)\nprint(bool(False))\nva1 = 0\nprint(bool(va1))\nva2 = 11\nprint(bool(va2))\nva3 = -2.3\nprint(bool(va3)) \n```", "```py\nFalse\nFalse\nTrue\nTrue \n```", "```py\nstr1 = 'Hello how are you'\nstr2 = \"Hello how are you\"\nstr3 = \"\"\"multiline \n       String\"\"\"\nprint(str1)\nprint(str2)\nprint(str3) \n```", "```py\nHello how are you\nHello how are you\nmultiline \nString \n```", "```py\nf = 'data' \ns = 'structure'\nprint(f + s)\nprint('Data ' + 'structure') \n```", "```py\ndatastructure\nData structure \n```", "```py\nst = 'data.'\nprint(st * 3)\nprint(3 * st) \n```", "```py\ndata.data.data.\ndata.data.data. \n```", "```py\nrange(start, stop, step) \n```", "```py\nprint(list(range(10)))\nprint(range(10))\nprint(list(range(10)))\nprint(range(1,10,2))\nprint(list(range(1,10,2)))\nprint(list(range(20,10,-2))) \n```", "```py\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrange(0, 10)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nrange(1, 10, 2)\n[1, 3, 5, 7, 9]\n[20, 18, 16, 14, 12] \n```", "```py\na = ['food', 'bus', 'apple', 'queen']\nprint(a)\nmylist  = [10, \"India\", \"world\", 8] \n# accessing elements in list.\nprint(mylist[1]) \n```", "```py\n['food', 'bus', 'apple', 'queen']\nIndia \n```", "```py\n[10, 12, 31, 14] == [14, 10, 31, 12] \n```", "```py\nFalse \n```", "```py\nb = ['data', 'and', 'book', 'structure', 'hello', 'st']\nb += [32]\nprint(b)\nb[2:3] = []\nprint(b)\ndel b[0]\nprint(b) \n```", "```py\n['data', 'and', 'book', 'structure', 'hello', 'st', 32]\n['data', 'and', 'structure', 'hello', 'st', 32]\n['and', 'structure', 'hello', 'st', 32] \n```", "```py\na = [2.2, 'python', 31, 14, 'data', False, 33.59]\nprint(a) \n```", "```py\n[2.2, 'python', 31, 14, 'data', False, 33.59] \n```", "```py\na = ['data', 'structures', 'using', 'python', 'happy', 'learning']\nprint(a[0])\nprint(a[2])\nprint(a[-1])\nprint(a[-5])\nprint(a[1:5])\nprint(a[-3:-1]) \n```", "```py\ndata\nusing\nlearning\nstructures\n['structures', 'using', 'python', 'happy']\n['python', 'happy'] \n```", "```py\na = ['data', 'and', 'book', 'structure', 'hello', 'st']\nprint(a)\na[1] = 1\na[-1] = 120\nprint(a)\na = ['data', 'and', 'book', 'structure', 'hello', 'st']\nprint(a[2:5])\na[2:5] = [1, 2, 3, 4, 5]\nprint(a) \n```", "```py\n['data', 'and', 'book', 'structure', 'hello', 'st']\n['data', 1, 'book', 'structure', 'hello', 120]\n['book', 'structure', 'hello']\n['data', 'and', 1, 2, 3, 4, 5, 'st'] \n```", "```py\na = ['data', 'structures', 'using', 'python', 'happy', 'learning']\nprint('data' in a)\nprint(a)\nprint(a + ['New', 'elements'])\nprint(a)\nprint(a *2)\nprint(len(a))\nprint(min(a)) \n```", "```py\n['data', 'structures', 'using', 'python', 'happy', 'learning']\n['data', 'structures', 'using', 'python', 'happy', 'learning', 'New', 'elements']\n['data', 'structures', 'using', 'python', 'happy', 'learning']\n['data', 'structures', 'using', 'python', 'happy', 'learning', 'data', 'structures', 'using', 'python', 'happy', 'learning']\n6\ndata \n```", "```py\n# Python program to check if an item (say second \n# item in the below example) of a list is present \n# in another list (or not) using 'in' operator\nmylist1 = [100,20,30,40]\nmylist2 = [10,50,60,90]\nif mylist1[1] in mylist2:\n    print(\"elements are overlapping\") \nelse:\n    print(\"elements are not overlapping\") \n```", "```py\nelements are not overlapping \n```", "```py\nval = 104\nmylist = [100, 210, 430, 840, 108]\nif val not in mylist:\n    print(\"Value is NOT present in mylist\")\nelse:\n    print(\"Value is  present in mylist\") \n```", "```py\nValue is NOT present in mylist \n```", "```py\nFirstlist = []\nSecondlist = []\nif Firstlist == Secondlist: \n    print(\"Both are equal\")\nelse:\n    print(\"Both are not equal\")\nif Firstlist is Secondlist:\n    print(\"Both variables are pointing to the same object\")\nelse:\n    print(\"Both variables are not pointing to the same object\")\nthirdList = Firstlist\nif thirdList is Secondlist:\n    print(\"Both are pointing to the same object\")\nelse:\n    print(\"Both are not pointing to the same object\") \n```", "```py\nBoth are equal\nBoth variables are not pointing to the same object\nBoth are not pointing to the same object \n```", "```py\nFirstlist = []\nSecondlist = []\nif Firstlist is not Secondlist: \n  print(\"Both Firstlist and Secondlist variables are the same object\")\nelse:\n  print(\"Both Firstlist and Secondlist variables are not the same object\") \n```", "```py\nBoth Firstlist and Secondlist variables are not the same object \n```", "```py\na = 32\nb = 132\nif a > 0 and b > 0:\n  print(\"Both a and b are greater than zero\") \nelse:\n  print(\"At least one variable is less than 0\") \n```", "```py\nBoth a and b are greater than zero \n```", "```py\na = 32\nb = -32\nif a > 0 or b > 0:\n  print(\"At least one variable is greater than zero\")\nelse:\n  print(\"Both variables are less than 0\") \n```", "```py\nAt least one variable is greater than zero \n```", "```py\na = 32\nif not a:\n  print(\"Boolean value of a is False\")\nelse:\n  print(\"Boolean value of a is True\") \n```", "```py\nBoolean value of a is True \n```", "```py\ntuple_name = (\"entry1\", \"entry2\", \"entry3\") \n```", "```py\nmy_tuple = (\"Shyam\", 23, True, \"male\") \n```", "```py\n`print(len((4,5, \"hello\")))` \n```", "```py\n`3` \n```", "```py\n`print((4,5)+(10,20))` \n```", "```py\n`(4,5,10,20)` \n```", "```py\n`print((2,1)*3)` \n```", "```py\n`(2,1,2,1,2,1)` \n```", "```py\n`print(3 in ('hi', 'xyz',3))` \n```", "```py\n`True` \n```", "```py\n`for p in (6,7,8):` \n `print(p)` \n```", "```py\n`6,7,8` \n```", "```py\nx = ( \"hello\", \"world\", \" india\") \n```", "```py\n`print(x[1])` \n```", "```py\n`\"world\"` \n```", "```py\n`print(x[-2])` \n```", "```py\n`\"world\"` \n```", "```py\n`print(x[1:])` \n```", "```py\n`(\"world\", \"india\")` \n```", "```py\ndict = {\n    <key>: <value>,\n    <key>: <value>,\n      .\n      .\n      .\n    <key>: <value>\n} \n```", "```py\nmy_dict = {'1': 'data', \n           '2': 'structure', \n           '3': 'python', \n           '4': 'programming', \n           '5': 'language' \n          } \n```", "```py\nperson = {}\nprint(type(person))\nperson['name'] = 'ABC'\nperson['lastname'] = 'XYZ'\nperson['age'] = 31\nperson['address'] = ['Jaipur']\nprint(person)\nprint(person['name']) \n```", "```py\n<class 'dict'>{'name': 'ABC', 'lastname': 'XYZ', 'age': 31, 'address': ['Jaipur']}ABC \n```", "```py\nprint('name' in person)\nprint('fname' not in person) \n```", "```py\nTrue \nTrue \n```", "```py\nprint(len(person)) \n```", "```py\n4 \n```", "```py\nmydict = {'a': 1, 'b': 2, 'c': 3}\nprint(mydict)\nmydict.clear()\nprint(mydict) \n```", "```py\n{'a': 1, 'b': 2, 'c': 3}\n{} \n```", "```py\nmydict = {'a': 1, 'b': 2, 'c': 3}\nprint(mydict.get('b'))\nprint(mydict)\nprint(mydict.get('z')) \n```", "```py\n2\n{'a': 1, 'b': 2, 'c': 3}\nNone \n```", "```py\nprint(list(mydict.items())) \n```", "```py\n[('a', 1), ('b', 2), ('c', 3)] \n```", "```py\nprint(list(mydict.keys())) \n```", "```py\n['a', 'b', 'c'] \n```", "```py\nprint(list(mydict.values())) \n```", "```py\n[1, 2, 3] \n```", "```py\nprint(mydict.pop('b'))\nprint(mydict) \n```", "```py\n{'a': 1, 'c': 3} \n```", "```py\nmydict = {'a': 1,'b': 2,'c': 3}\nprint(mydict.popitem())\nprint(mydict) \n```", "```py\n{'a': 1, 'b': 2} \n```", "```py\nd1 = {'a': 10, 'b': 20, 'c': 30}\nd2 = {'b': 200, 'd': 400}\nprint(d1.update(d2))\nprint(d1) \n```", "```py\n{'a': 10, 'b': 200, 'c': 30, 'd': 400} \n```", "```py\nx1 = set(['and', 'python', 'data', 'structure'])\nprint(x1)\nprint(type(x1))\nx2 = {'and', 'python', 'data', 'structure'}\nprint(x2) \n```", "```py\n{'python', 'structure', 'data', 'and'}\n<class 'set'>\n{'python', 'structure', 'data', 'and'} \n```", "```py\nx = {'data', 'structure', 'and', 'python'}\nprint(len(x))\nprint('structure' in x) \n```", "```py\n4\nTrue \n```", "```py\nx1 = {'data', 'structure'}\nx2 = {'python', 'java', 'c', 'data'} \n```", "```py\nx1 = {'data', 'structure'}\nx2 = {'python', 'java', 'c', 'data'}\nx3 = x1 &#124; x2\nprint(x3)\nprint(x1.union(x2)) \n```", "```py\n{'structure', 'data', 'java', 'c', 'python'}\n{'structure', 'data', 'java', 'c', 'python'} \n```", "```py\nprint(x1.intersection(x2))\nprint(x1 & x2) \n```", "```py\n{'data'}\n{'data'} \n```", "```py\nprint(x1.difference(x2))\nprint(x1 - x2) \n```", "```py\n{'structure'}\n{'structure'} \n```", "```py\nprint(x1.symmetric_difference(x2))\nprint(x1 ^ x2) \n```", "```py\n{'structure', 'python', 'c', 'java'}\n{'structure', 'python', 'c', 'java'} \n```", "```py\nprint(x1.issubset(x2))\nprint(x1 <= x2) \n```", "```py\nFalse\nFalse \n```", "```py\nx = frozenset(['data', 'structure', 'and', 'python'])\nprint(x) \n```", "```py\nfrozenset({'python', 'structure', 'data', 'and'}) \n```", "```py\na11 = set(['data'])\na21 = set(['structure'])\na31 = set(['python'])\nx1 = {a11, a21, a31} \n```", "```py\nTypeError: unhashable type: 'set' \n```", "```py\na1 = frozenset(['data'])\na2 = frozenset(['structure'])\na3 = frozenset(['python'])\nx = {a1, a2, a3}\nprint(x) \n```", "```py\n{frozenset({'structure'}), frozenset({'python'}), frozenset({'data'})} \n```", "```py\nnt = namedtuple(typename , field_names) \n```", "```py\nfrom collections import namedtuple\nBook = namedtuple ('Book', ['name', 'ISBN', 'quantity'])\nBook1 = Book('Hands on Data Structures', '9781788995573', '50')\n#Accessing data items\nprint('Using index ISBN:' + Book1[1])\nprint('Using key ISBN:' + Book1.ISBN) \n```", "```py\nUsing index ISBN:9781788995573\nUsing key ISBN:9781788995573 \n```", "```py\nfrom collections import deque\ns = deque()   # Creates an empty deque\nprint(s)\nmy_queue = deque([1, 2, 'Name'])\nprint(my_queue) \n```", "```py\ndeque([])\ndeque([1, 2, 'Name']) \n```", "```py\nod = OrderedDict([items]) \n```", "```py\nfrom collections import OrderedDict\nod = OrderedDict({'my': 2, 'name ': 4, 'is': 2, 'Mohan' :5})\nod['hello'] = 4\nprint(od) \n```", "```py\nOrderedDict([('my', 2), ('name ', 4), ('is', 2), ('Mohan', 5), ('hello', 4)]) \n```", "```py\nd = defaultdict(def_value) \n```", "```py\nfrom collections import defaultdict\ndd = defaultdict(int)\nwords = str.split('data python data data structure data python')\nfor word in words:\n    dd[word] += 1\nprint(dd) \n```", "```py\ndefaultdict(<class 'int'>, {'data': 4, 'python': 2, 'structure': 1}) \n```", "```py\nclass collections.ChainMap(dict1, dict2) \n```", "```py\nfrom collections import ChainMap\ndict1 = {\"data\": 1, \"structure\": 2}\ndict2 = {\"python\": 3, \"language\": 4}\nchain = ChainMap(dict1, dict2)\nprint(chain)\nprint(list(chain.keys()))\nprint(list(chain.values()))\nprint(chain[\"data\"])\nprint(chain[\"language\"]) \n```", "```py\nChainMap({'data': 1, 'structure': 2}, {'python': 3, 'language': 4})\n['python', 'language', 'data', 'structure']\n[3, 4, 1, 2]\n1\n4 \n```", "```py\nfrom collections import Counter\ninventory = Counter('hello')\nprint(inventory)\nprint(inventory['l'])\nprint(inventory['e'])\nprint(inventory['o']) \n```", "```py\nCounter({'l': 2, 'h': 1, 'e': 1, 'o': 1})\n2\n1\n1 \n```", "```py\n# we can not push to this user dictionary\nfrom collections import UserDict\nclass MyDict(UserDict):\n    def push(self, key, value): \n        raise RuntimeError(\"Cannot insert\")\nd = MyDict({'ab':1, 'bc': 2, 'cd': 3})\nd.push('b', 2) \n```", "```py\nRuntimeError: Cannot insert \n```", "```py\n# we can not push to this user list\nfrom collections import UserList\nclass MyList(UserList):\n    def push(self, key):\n        raise RuntimeError(\"Cannot insert in the list\")\nd = MyList([11, 12, 13])\nd.push(2) \n```", "```py\nRuntimeError: Cannot insert in the list \n```", "```py\n#Create a custom append function for string\nfrom collections import UserString\nclass MyString(UserString):\n    def append(self, value):\n        self.data += value\ns1 = MyString(\"data\")\nprint(\"Original:\", s1)\ns1.append('h')\nprint(\"After append: \", s1) \n```", "```py\nOriginal: data\nAfter append:  datah \n```"]