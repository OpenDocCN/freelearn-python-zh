- en: Creating the Virtual Two-Wheeled ROS Robot
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RViz is a 3D visualization tool that can display robot models. It provides a
    configurable **Graphical User Interface** (**GUI**) that allows the user to display
    any information they may request for the task being carrying out. RViz can be
    used for both robot visualization and for debugging specific features while building
    the **Unified Robot Description Format** (**URDF**) model. This format uses XML
    to simulate the robot.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate how to use RViz and URDF, in this chapter, you will build a simple
    two-wheeled robot, which is the digital twin of GoPiGo3\. You will create the
    URDF file that describes the robot's main components. This file acts as the input
    for visualization in several ROS tools – not only RViz, but also the Gazebo simulation
    tool, which also includes a physics engine. Gazebo will be covered in the next
    chapter, while in this one, you will concentrate your efforts on getting familiar
    with RViz.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will teach you how to understand the syntax of URDF files and acquire
    the skills you'll need in order to systematically test/check features with RViz
    while building the robot model.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will be covering the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with RViz for robot visualization
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Building a differential drive robot with URDF
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inspecting the GoPiGo3 model in ROS with RViz
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robot frames of reference in the URDF model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using RViz to check results while building
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the previous chapter, you were told how to clone this book''s code repository
    so that it''s in the home folder of your laptop. If you didn''t do this, from
    a Terminal on your laptop, clone the repository into your home folder like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, only copy the code for this chapter into the ROS workspace. This way,
    you will have a cleaner ROS environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Move to the path of the new files and check that the files are present:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This chapter contains a new ROS package named `rviz_basics`, so rebuild the
    workspace so that it is known to your ROS environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Check that the package is installing correctly by selecting it and listing
    its files:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Now, you are ready to complete this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting started with RViz for robot visualization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: RViz provides a configurable GUI so that you can display specific information
    about the robot.
  prefs: []
  type: TYPE_NORMAL
- en: To make sure RViz loads a default configuration, place the `default.rviz` file
    inside the `~/.rviz/` folder. You will find `Chapter4_RViz_basics` in this folder.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can open the RViz GUI with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The `T2` command, `rviz`, is an abbreviation of the official `$ rosrun rviz
    rviz` declaration, where first `rviz` refers to the package and the second refers
    to the node with the same name.
  prefs: []
  type: TYPE_NORMAL
- en: 'At the moment, the RViz window will be empty, so it will only show a grid at
    the floor level. In the next section, we will teach you how to build the robot
    model and get ready to visualize it. Once you''ve launched it, you will see a
    window similar to the one shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/0ef57290-3490-4559-80b7-ebd028fda79c.png)'
  prefs: []
  type: TYPE_IMG
- en: If you look carefully at the preceding screenshot, you'll see an error message
    in the left-hand pane. This is due to the fact that a robot model hasn't been
    loaded. We will develop this model in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Building a differential drive robot with URDF
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The GoPiGo3 kit is composed of four several subassemblies:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The chassis, which is the main structure that all the parts are attached to.
    This includes the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Raspberry Pi and GoPiGo3 board
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Motors
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Battery package
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Wheels
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Caster
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Two wheels – left and right, each one driven by one motor.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A caster, which is a small freewheel attached to the rear part of the chassis
    that keeps the robot supported on three points: the left and right wheels and
    the caster itself. Be aware that one freewheel is the minimum to keep the robot
    rolling on the floor:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the caster were not present, the system would be underconstrained. Then,
    you would have a self-balancing robot that would have to be continuously actuated
    by its motors to stay in equilibrium. This is a *closed-loop* control problem
    that needs the **Inertial Measurement Unit** (**IMU**) data from its accelerometers
    and gyroscopes to actuate the motors and keep the robot in equilibrium:'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/df78ca2b-2824-473c-a409-6d337c33fdba.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Image courtesy: Dexter Industries https://shop.dexterindustries.com/media/catalog/product/cache/4/thumbnail/1800x2400/9df78eab33525d08d6e5fb8d27136e95/b/a/balancebot_remote2-150x150_1_1.jpg'
  prefs: []
  type: TYPE_NORMAL
- en: If there were two casters, the system would be overconstrained. The robot would
    be supported on four points – two wheels and two casters – and the position of
    the second caster would be determined by the other caster and the two wheels.
    If one of the four wheels/the caster were not in contact with the floor, you would
    have a lame robot.
  prefs:
  - PREF_OL
  - PREF_UL
  type: TYPE_NORMAL
- en: 'From the point of view of a simulated model, a differential drive robot such
    as GoPiGo3 is composed of three parts, each one being a rigid body. Therefore,
    we will divide the robot into mobile parts:'
  prefs: []
  type: TYPE_NORMAL
- en: The robot body, which includes the chassis and all the fixed parts attached
    to it (Raspberry Pi, GoPigo3 board, motors, and the battery package)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Left and right wheels
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Caster
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Going back to ROS, you are going to build a simulated GoPiGo3 with URDF. This
    is an XML format description that represents robot models at the component level. ROS
    contains a URDF package ([http://wiki.ros.org/urdf](http://wiki.ros.org/urdf))
    in order to accept this format of the robot description for simulation purposes.
  prefs: []
  type: TYPE_NORMAL
- en: In the upcoming sections, we are going to illustrate how to describe the four
    mobile parts of GoPiGo3 in URDF.
  prefs: []
  type: TYPE_NORMAL
- en: Overview of URDF for GoPiGo3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'First, we''re going to give you an overview of building the model, after which
    we''ll walk you through the process step by step. The URDF model of our robot
    will render like this in RViz:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9286c54f-8be2-4f82-a9ec-694a2916d791.png)'
  prefs: []
  type: TYPE_IMG
- en: 'This model corresponds to the following URDF description:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/73a233ce-0cda-44ba-8b7a-6effa1f01efb.png)'
  prefs: []
  type: TYPE_IMG
- en: 'The content of the XML tags has collapsed – which is inferred from the plus
    signs to the right of the line numbers – to show you that each block corresponds
    to one part of the robot:'
  prefs: []
  type: TYPE_NORMAL
- en: The top-level tag is `<robot>` and identifies the robot as a whole.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<link>` tag refers to each mobile part, identified by the `name` property.
    All of the content inside specifies the characteristics of that part:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name="base_link"` refers to the robot body and, in this case, the chassis
    and the parts attached to it: the Raspberry Pi, GoPiGo3 board, motors, and the
    battery package.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name="caster"` refers to the caster freewheel, but it is within a `<visual>` subtag,
    meaning it is part of the robot body, not a separate mobile part. Although it
    is a rolling element, remember that a simulated model tries to catch the properties
    of its reality with a simple description. Since the caster is merely a support,
    it does not need to be driven by a motor. For this reason, we can keep it fixed
    with respect to the robot body, and only deal with three mobile parts (robot body,
    right wheel, and left wheel) instead of four. If you''re wondering about the friction
    it could produce, then don''t worry – later, we''ll learn how to set a zero value
    to make sure it behaves like a freewheel. The `<visual>` tag refers to a rigid
    body representation of a part of the robot without needing to define it as a separate
    link.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name="right_wheel"` refers to the right wheel.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`name="left_wheel"` refers to the left wheel.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<joint>` tag represents a junction between two parts. From a mechanical
    point of view, these joint tags correspond to the bearings that the wheels are
    mounted on. There is one associated with each wheel link.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we will explain the contents of each `<link>` and `<joint>` tag that's used
    in this model in detail.
  prefs: []
  type: TYPE_NORMAL
- en: URDF robot body
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `<link>` element, as defined in the URDF XML specification ([http://wiki.ros.org/urdf/XML/link](http://wiki.ros.org/urdf/XML/link)),
    defines a rigid body with inertia, visual features, and collision properties.
    In this chapter, we will introduce `<visual>`. We will leave `<inertia>` and `<collision>`
    for later in this book since these properties are only required when performing
    physics simulation with Gazebo (see [Chapter 5](74284adc-e0d7-4e40-a54b-e2e447b8e2fe.xhtml),
    *Simulating Robot Behavior with Gazebo*).
  prefs: []
  type: TYPE_NORMAL
- en: The `<visual>` tag describes the visual appearance of the part. Don't confuse
    this with the `<collision>` tag, as that defines the volume to be considered for
    interference or crash calculation. Often, both may define different volumes, although
    it is very common that they are in agreement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Why should they be different? For complex shapes, interference calculations
    can be heavy in terms of CPU load and time duration. Therefore, it is better to
    use simple shapes in `<collision>` tags, defining them as the envelope of the
    actual shapes of the parts. For example, for the manipulator in the following
    screenshot, you could define the `<visual>` elements of the arm as the actual
    shapes – the ones that are shown – and simplify the `<collision>` elements to
    make them the envelope cylinders of the arms to facilitate interference calculation:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/97cd20b5-8c9c-402a-8b84-7f66463881d6.png)'
  prefs: []
  type: TYPE_IMG
- en: The `<origin>` tag specifies the reference frame of the `<visual>` element with
    respect to the reference frame of the link.
  prefs: []
  type: TYPE_NORMAL
- en: The `<geometry>` tag describes the visual shape (box, cylinder, sphere, or mesh)
    and its dimensions.
  prefs: []
  type: TYPE_NORMAL
- en: The `<material>` tag sets the appearance of the `<visual>` element with `<color>`
    and `<texture>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given these tag descriptions, we can easily read about the `base_link` element,
    that is, the robot body, in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Therefore, the `base_link` element consists of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A box that's 0.5 m in length and 0.25 m in height.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Its reference frame – located in the geometrical center of the box – coincides
    with that of the link (zero values in all three linear axes and three rotation
    axes).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<material>` tag specifies the blue color as RGBA indexes: Red = 0, Green
    = 0.5, Blue = 1\. The fourth, A = 1, is the alpha channel, which refers to the
    degree of opacity. A value of 1 means an opaque object, while 0 means that it
    is transparent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Rendering the link in RViz provides the following simple aspect of a box:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c7714d58-0b3c-4fdb-96dd-402eaa5f62c0.png)'
  prefs: []
  type: TYPE_IMG
- en: But wait – what is that semi-spherical shape attached to the lower face? That
    is the caster, the freewheel that we can model as an integral part of the robot
    body, as was explained previously.
  prefs: []
  type: TYPE_NORMAL
- en: Caster
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The caster description is nested inside the `<link name="base_link">` element.
    This means that it''s a rigid part that''s fixed to the robot body. Let''s go
    over what it is:'
  prefs: []
  type: TYPE_NORMAL
- en: It's a sphere that has a radius of 0.05 m, located at x=0.2 m, z=-0.125 m. Be
    aware that the *Z* coordinate is half of the box height (=0.25 m) and negative.
    This means that the top semi-sphere is embedded within the box and only the other
    semi-sphere stays visible on the bottom part of the box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By default, the same color is selected as what was defined for the box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inspect the following code carefully to ensure you understand it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'This is how the caster will appear in RViz, making the box semitransparent:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9aa59cf2-915e-40a2-84a8-6618858ced36.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Take note of the position and direction of the **X**, **Y**, and **Z** axes,
    and pay attention to their directions. This fact is especially important when
    matching the axes of the IMU. The following photograph shows how you have to place
    such a sensor in a physical GoPiGo3 to make sure the IMU axes are parallel to
    the `base_link` frame and have the same directions (see the marked set of axes
    that are printed on the surface of the sensor):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/faee0314-f937-4ed8-a44c-b1a6b33f5c11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Finally, in the following photograph, you can see the whole robot. This will
    help you make sure that you know where the details in the preceding photograph
    are located:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4b7d7e6d-2a1b-4547-91a3-3d7e8396f1e2.png)'
  prefs: []
  type: TYPE_IMG
- en: Next, let's have a look at the URDF model's left and right wheels.
  prefs: []
  type: TYPE_NORMAL
- en: The URDF model's left and right wheels
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Given that you already know the basic URDF tags, it is straightforward to read
    the definition for the right wheel, as shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `<origin>` tag, the first component of the `rpy` attribute (rotation
    around the *X* axis), 1.570795 = π/2, is what sets the wheel to a vertical position.
    The cylindrical wheel has a 0.2 m radius and is 0.1 m in length.
  prefs: []
  type: TYPE_NORMAL
- en: 'The new element here is the `<joint>` tag ([http://wiki.ros.org/urdf/XML/joint](http://wiki.ros.org/urdf/XML/joint)),
    which is used to specify the kinematics and dynamics of the joint and its safety
    limits:'
  prefs: []
  type: TYPE_NORMAL
- en: '`type="continuous"` means a hinge joint that rotates around the axis and has
    no upper and lower limits.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The parent and child links identify what links are connected by this joint.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The origin specifies the offsets in *X*, *Y*, and *Z* and the three rotations
    of the child link with respect to the parent link. Then, `<origin xyz="0 -0.30
    0" rpy="0 0 0" />` places the joint at Y = -0.30 m. These coordinates are referred
    to the frame of the parent link:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`axis` defines the rotation axis of the joint with respect to the parent frame.
    Here, `<axis xyz="0 1 0" />` means that the rotation axis is Y (value 1 in the
    Y coordinate).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The XML description for the left wheel is almost identical. The only change
    is the position of the joint at Y = 0.30 m (`<origin xyz="0 0.30 0" ... />` ),
    with an opposite sign to that of the right wheel, that is, `<origin xyz="0 -0.30
    0" ... />`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: In the next section, you are going to learn how to visualize the URDF description
    in RViz, the ROS visualization tool.
  prefs: []
  type: TYPE_NORMAL
- en: Inspecting the GoPiGo3 model in ROS with RViz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, it's time to start working with ROS! You are going to discover `roslaunch`,
    the ROS command that allows us to launch several nodes in one shot, avoiding the
    need to open separate Terminals, as we did in the previous chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Given that you already cloned the code repository of this book, the files that
    we will deal with are inside the `Chapter4_RViz_basics` folder of the repository,
    and all of them are part of the `rviz_basics` ROS package, as defined within `package.xml`. The
    file structure of this chapter can be seen in the following screenshot of the
    RoboWare Studio IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/c8bda82b-a756-4ca2-8b8a-7ea6ba8f5e21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'You can obtain this tree structure in the Terminal by using the `tree` bash
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Bear in mind that it does not come with Ubuntu by default and that you may
    need to install it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'This will result in the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'This tree organizes the files into a variety of folders, depending on the types
    of files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`./launch` groups the files with the `*.launch` extension, that is, the different
    robot configurations and packages that will be used in the runtime environment.
    Each launch file corresponds to a specific run''s setup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`./rviz` stores the files of specific RViz configurations, one file for each
    possible configuration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`./urdf` contains the XML URDF file of the robot model we described previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Make sure this folder is in your workspace and build it with `catkin` so that
    ROS is aware of your new package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In [Chapter 3](f3ecc0de-28c4-4140-9a9c-ed351c68d121.xhtml), *Getting Started
    with ROS*, in the *Using Roboware – creating a workspace and building it* section,
    we explained how to do these operations in the Roboware IDE. Take a look at that
    chapter and section if you prefer to use a desktop application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you can execute `roslaunch` from a Terminal with the following snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'The RViz window will launch and you will see a simplified GoPiGo3 model, as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f2d0c177-822f-472a-b842-13fe34a0e02b.png)'
  prefs: []
  type: TYPE_IMG
- en: You can inspect the model by rotating it with the mouse while clicking the left
    button, and zoom in/zoom out by using the mouse wheel or, alternatively, clicking
    the right button and moving the mouse forward (zoom in) or backward (zoom out).
  prefs: []
  type: TYPE_NORMAL
- en: 'The left pane of RViz contains two items that are of interest to us. Expand
    them with a mouse click to inspect them:'
  prefs: []
  type: TYPE_NORMAL
- en: '**RobotModel**: Where you can use the ticks to visualize what you need. The
    items under Links allow us to access individual parts of the GoPiGo URDF model: `base_link`
    (robot body), `left_wheel`, and `right_wheel`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**TF**: which provides access to the multiple coordinate frames. In our case,
    there is one frame for each of the parts of GoPiGo3 and one for each of the joints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, we'll look at the `roslaunch` command.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the roslaunch command
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s go one step back and use a minimal launch file to understand the syntax
    of these kinds of scripts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'As we saw with `rosrun`, the structure of the ROS command is very similar:'
  prefs: []
  type: TYPE_NORMAL
- en: First is the command name itself, `roslaunch`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Second is the package name, `rviz_basics`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third is the script we will execute, `gopigoMinimal_rviz_simple.launch`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The content of the `gopigoMinimal_rviz_simple.launch` file looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'The syntax, in XML format, should be familiar to you. In this file, there are
    three types of tags:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<launch> </launch>`: Delimits the block of lines that are part of the `roslaunch`
    description.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<node />`: This is the sentence that''s used to execute a ROS node. It is
    equivalent to the `rosrun` command that we explained in the previous chapter.
    Due to this, the equivalent command to a `<node />` tagged line is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: You can easily infer that the `pkg` attribute of the `<node>` tag is the package
    name and that the attribute type refers to the script that contains the code of
    this node.
  prefs: []
  type: TYPE_NORMAL
- en: '`<param />` stands for parameter and is a new ROS concept. It contains a value
    that is stored in the ROS parameter server that you can visualize as the place
    where the robot''s characterization is stored. A whole set of parameters defines
    a specific robot configuration. The ROS parameter server, as explained in the
    ROS official documentation ([http://wiki.ros.org/Parameter%20Server](http://wiki.ros.org/Parameter%20Server)),
    is as follows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '"*It is a shared, multi-variate dictionary that is accessible via network APIs.
    Nodes use this server to store and retrieve parameters at runtime. As it is not
    designed for high performance, it is best used for static, non-binary data such
    as configuration parameters.*"'
  prefs: []
  type: TYPE_NORMAL
- en: 'In our particular case, we have the following declaration in the launch file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The `robot_description` parameter is the path where the URDF file is stored.
    You will see that such a path contains an environment variable in the `$(find
    rviz_basics)` textfile attribute. This is a very nice feature that ROS provides
    out of the box so that you don't have to provide absolute or relative paths. The
    `find `command is applied to the `rviz_basics` package and returns the absolute
    path of the package, that is, `~/catkin_ws/src/book/Chapter4_RViz_basics`. The
    `$` sign means the value of, in the same way as you would do for system environment
    variables.
  prefs: []
  type: TYPE_NORMAL
- en: Using Roboware to execute a launch file
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What you did using the `$ roslaunch **rviz_basics** gopigoMinimal_rviz_simple.launch` command can
    be done in the **Roboware** IDE by just placing it on top of the file, right-clicking
    the mouse to show the contextual menu, and selecting the first item, that is, Run
    Launch File:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/775f22fa-eba6-4e6c-9114-4d10795df49b.png)'
  prefs: []
  type: TYPE_IMG
- en: In the following section, we are going to execute the other launch file, `gopigoMinimal_rviz_simple.launch`,
    which introduces more advanced features. Prior to that, close any open RViz windows
    or hit *Ctrl* + *C* in the Terminal to shut down the running ROS processes.
  prefs: []
  type: TYPE_NORMAL
- en: Controlling the GoPiGo3 robot's wheels from RViz
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The complete version of the robot can be launched with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'What we are doing here is supplying an argument, `gopigoMinimal`, from the
    command line. If you pay attention to the content of the launch file, that is,
    `gopigoMinimal_rviz.launch`, you will find a new section at the beginning of the
    file tagged with `<arg  />`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'The values that have been tagged as arguments can be passed from the command
    line by simply adding the argument name, the `:=` sign, and its value after `<filename>.launch`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'In the `<arg />` tag, you can provide a default value with a default attribute.
    In our specific case, we wouldn''t have needed to add the argument value to the
    `roslaunch` command because the value is the default. Therefore, the result is
    exactly the same as if you had written the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In the launch file, there is a second optional argument, `gui`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'It is a Boolean value and the default value is `False`, that is, nothing different
    happens. Now, let''s say you execute the command while specifying it to be `True`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'If you do this, you will see an additional window to the side of RViz. The
    exposed GUI allows you to rotate each of the wheels independently with sliders:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/b3442b2d-07e9-42b6-a6fe-4de066be8cec.png)'
  prefs: []
  type: TYPE_IMG
- en: This interactive functionality is part of the `joint_state_publisher` package
    ([http://wiki.ros.org/joint_state_publisher](http://wiki.ros.org/joint_state_publisher)),
    whose `joint_state_publisher` node is invoked from the launch file with the `gui:=True` argument.
    We are going to explain this feature in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Using the joint_state_publisher package
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The section of the launch file that allows us to interactively rotate the wheels
    using a GUI is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The `joint_state_publisher` node exposes the `/use_gui` parameter to decide
    whether it should show the `joint_state_publisher` window. If it''s set to `True`,
    the window is active. If it is, we pass the desired value as a parameter to the
    node via the `gui` argument that''s defined in the launch file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Remember the `roslaunch` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The `gui` argument is set to `True`. The `/use_gui` parameter value of `joint_state_publisher`
    is then set to the value of the `gui` argument, as expressed with the `<param
    name="/use_gui" value="$(arg gui)"/>` tag inside the `gopigoMinimal_rviz.launch`
    file.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `joint_state_publisher` node launches the widget that allows to interactively
    rotate each wheel. Finally, issue `rqt_graph` from a Terminal to watch the ROS
    graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5876be82-f06a-4679-8ad9-e58a665a49bd.png)'
  prefs: []
  type: TYPE_IMG
- en: The `/joint_states` topic is the one that we modify when moving the sliders
    in the window.
  prefs: []
  type: TYPE_NORMAL
- en: Robot frames of reference in the URDF model
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'It is very important to understand how to place the different reference frames
    you will use for your robot. First, you have to decide where the `<joint>` elements
    are located in the space. In our case, we have two: one for the right wheel and
    one for the left wheel. Let''s look at the one for the right wheel first:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, let''s look at the one for the left wheel:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, you can see that the `<origin>` tags specify the locations:'
  prefs: []
  type: TYPE_NORMAL
- en: The right joint origin is -0.30 m along the *y* ground axis (green axis).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The left joint origin is +0.30 m along the *y* ground axis.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As in both cases, regarding the `rpy="0 0 0"` attribute, there is no rotation
    and both coordinate frames are parallel to that of the coordinate frame of the
    ground. We know that both `<joint>` tags are relative to the ground because both
    have `base_link` as the parent link, and you know that the first link of our model, `base_link`,
    is the absolute reference for the robot's overall position and orientation.
  prefs: []
  type: TYPE_NORMAL
- en: In general, `<origin>` is the transform from the parent link to the child link.
    The joint is located at the origin of the child link. The tag `<axis xyz="0 1
    0">` specifies the rotation axis. In this case it is `y` axis, since it has a
    value of `1`, while `x` and `z` have `0` values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The frames you can see in the following screenshot are the respective ones
    for `base_link`, `right_wheel`, and `left_wheel`. They are specified inside the
    `<visual>` tag of each link. In these three cases, in the URDF file, you will
    see that they follow the following pattern:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: '`xyz="0 0 0"` means that they coincide with the joint reference frame:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/54898fed-3237-4ceb-b6f5-2de758016944.png)'
  prefs: []
  type: TYPE_IMG
- en: 'In the case of the wheels, we have the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 1.570795 = pi/2 = 90° is the rotation around the *x* axis (red). This is what
    ensures that the cylinders shaping the wheels are oriented vertically.
  prefs: []
  type: TYPE_NORMAL
- en: Using RViz to check the model while building
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Taking into account all the concepts we have introduced about URDF, we can
    use the RViz tool to assist us while building the robot model. Some checks that
    it can provide are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: The total size of the robot has to match the dimensions of the actual robot.
    As you build the model part by part, if you make a mistake regarding a part's
    dimension, an error will arise when you measure the total size (length, width,
    and height). You can check this by using the measure tool in the RViz toolbar.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can also visually check for possible interference between robot parts, especially
    between the ones that are adjacent and move relative to each other (in respect
    to one another).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The orientation of the reference frames.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You can visualize the parts that are hidden by others by unchecking the corresponding
    link in RViz or by changing the `<color>` tag in order to apply transparency effects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In the following diagram, you can see that we have extracted a top view from
    RViz and used transparency to check that all the parts are aligned and relative
    to each other:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4e1d9b85-0cef-4751-985b-3b775d42d89e.png)'
  prefs: []
  type: TYPE_IMG
- en: This transparency allows us to check that the caster position is right in the
    middle of `base_link`. Furthermore, the wheels do not interfere with `base_link`,
    and their rotation axes are coaxial.
  prefs: []
  type: TYPE_NORMAL
- en: Changing the aspect of the model in the RViz window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To control the visual aspect of your model in RViz, you can modify some of
    the parameters in the Displays window, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ed9b7538-88b6-4170-a59b-90aa0f70c614.png)'
  prefs: []
  type: TYPE_IMG
- en: 'We have marked the basic changes we''ve made for this chapter in gray:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Alpha**: This parameter controls the level of opacity of the whole model.
    The value `1` corresponds to its opaque appearance, while `0` is fully transparent,
    that is, not visible. There is also an Alpha parameter for each link to control
    the individual opacity of a single part (under the Links subtree, expand to access
    it).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Names**: If ticked, the name of the links will be shown on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Axes**: If ticked, it will show the frame of reference of each link.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Show Arrows**: If ticked, it will show the direction of each joint.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Marker Scale**: The default is `1`. Reduce its value so that words are smaller
    on the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To save this set of parameters, go to the File item in the top menu and select
    Save Config As. Here, you specify the name of the file with the `.rviz` extension,
    which is where your custom settings will be saved.
  prefs: []
  type: TYPE_NORMAL
- en: Be aware that within the same File menu, you have the Save Image option, which
    will produce a screenshot of the current RViz window.
  prefs: []
  type: TYPE_NORMAL
- en: Helpful ROS tools for checking purposes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Finally, you should know that there are two helpful ROS tools if you want to
    make some checks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`check_urdf` attempts to parse a URDF file in order to verify the kinematic
    chain:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'The `roscd` command changes the prompt to the path of the ROS package whose
    name you are indicating as an argument, that is, `rviz_basics`. The output is
    as follows, where the current folder is the `rviz_basics` path, as requested,
    that is, `~/catkin_ws/src/CH4_RVIZ_BASICS` before the `$` sign:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Everything is fine!
  prefs: []
  type: TYPE_NORMAL
- en: '`rqt_tf_tree` allows us to visualize the `tf` information in the GUI environment,
    like so:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'A window will open, showing this aspect graph:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ef0c195a-0be8-4ead-beab-50d9fca391f2.png)'
  prefs: []
  type: TYPE_IMG
- en: The preceding graph tells you that `base_link` (robot body part) and the wheels
    are well connected. The arrows represent the joint elements: `joint_right_wheel`
    and `joint_left_wheel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Alternatively, you can generate this same output as a PDF file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you can open the created PDF, like so:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: This second way of doing things is more convenient if you want to share the
    output with colleagues.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced two essential elements of ROS. One is the URDF
    format, which is the standard way of describing the virtual model of a robot.
    The other is RViz, the ROS visualization tool, which lets you inspect your model
    while building and check the final result.
  prefs: []
  type: TYPE_NORMAL
- en: 'You have learned about these essential elements by looking at GoPiGo3, where
    you created a simplified model that includes its chassis, motors, and wheels.
    We have shown you how to interactively rotate the wheels with a GUI by accessing
    the `joint_states` topic of the `joint_state_publisher` node, which belongs to
    the package with the same name. This package offers a tool for setting and publishing
    joint state values for a given URDF model. In the case of GoPiGo3, we have two
    joints: the left wheel and the right wheel. The caster is the third joint, but
    as it is a freewheel (not driven by a motor), so we don''t need to define it as
    such in the virtual GoPiGo3\. Rigidly attaching it to the robot body is sufficient.'
  prefs: []
  type: TYPE_NORMAL
- en: In RViz, we can simulate the kinematics of the robot. In the next chapter, we
    will go one step further and simulate the dynamics. This is something that will
    require us to complete our URDF model with mass and inertia properties, as well
    as specify the rolling resistance in the wheels to reproduce all the forces that
    act on our robot. We will do that with Gazebo, a dynamics simulator that's integrated
    with ROS. With Gazebo, we can also reproduce the physical environment of the robot
    (obstacles, ramps, walls, and more).
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What is the format of the URDF model?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) It is a text file.
  prefs: []
  type: TYPE_NORMAL
- en: B) JSON.
  prefs: []
  type: TYPE_NORMAL
- en: C) XML.
  prefs: []
  type: TYPE_NORMAL
- en: How many links and joints does the URDF model of GoPiGo3 have?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) Four links (robot body, caster, left, and right wheels) and two joints
  prefs: []
  type: TYPE_NORMAL
- en: B) Three links (robot body, left, and right wheels) and two joints
  prefs: []
  type: TYPE_NORMAL
- en: C) Three links (robot body, left, and right wheels) and three joints
  prefs: []
  type: TYPE_NORMAL
- en: Which tag in the URDF model can you use to specify the color of a link?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) `<visual>`
  prefs: []
  type: TYPE_NORMAL
- en: B) `<geometry>`
  prefs: []
  type: TYPE_NORMAL
- en: C) **`<material>`**
  prefs: []
  type: TYPE_NORMAL
- en: Is it mandatory to group file types by folders (SRC, URDF, RViz, launch) in
    an ROS package?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) No, the only mandatory condition is to put the package under `~/catkin_ws/src/`.
  prefs: []
  type: TYPE_NORMAL
- en: B) It is only recommended to make a clean package structure.
  prefs: []
  type: TYPE_NORMAL
- en: C) No, but if you do so, you have to declare the locations in the `package.xml` configuration
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Do you always need to run `roscore` in a Terminal to launch a ROS process?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A) Yes, because the master node launched by `roscore` is what keeps the communication
    between the nodes of the graph.
  prefs: []
  type: TYPE_NORMAL
- en: B) You can launch the master node implicitly when using `roslaunch`.
  prefs: []
  type: TYPE_NORMAL
- en: C) If you have installed the `roscore` package, it is mandatory to run the `roscore`
    process.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ROS URDF tutorials: [http://wiki.ros.org/urdf/Tutorials](http://wiki.ros.org/urdf/Tutorials).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ROS visualization tutorials: [http://wiki.ros.org/visualization/Tutorials](http://wiki.ros.org/visualization/Tutorials).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*ROS Robot Programming: A Handbook Written by TurtleBot3 Developers*, YoonSeok
    Pyo, HanCheol Cho, RyuWoon Jung, and TaeHoon Lim (2017), ROBOTIS Co. Ltd, first
    edition: [http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf](http://www.pishrobot.com/wp-content/uploads/2018/02/ROS-robot-programming-book-by-turtlebo3-developers-EN.pdf).
    Chapter: *ROS Tools: RViz and rqt *and 10.8 *TurtleBot3 Simulation using RViz.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
