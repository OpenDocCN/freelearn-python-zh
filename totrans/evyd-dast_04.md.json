["```py\n    Stack<MyObject> aStack = new Stack<MyObject>(); \n    aStack.Push(anObject); \n    aStack.Pop(); \n\n```", "```py\n    Stack<MyObject> aStack = new Stack<MyObject>(); \n    aStack.push(anObject); \n    aStack.pop(); \n\n```", "```py\n    NSMutableArray<MyObject *> *aStack = [NSMutableArray array]; \n    [aStack addObject:anObject]; \n    [aStack removeLastObject]; \n\n```", "```py\n    var aStack: Array [MyObject](); \n    aStack.append(anObject) \n    aStack.popLast() \n\n```", "```py\n    public Stack<Command> _commandStack { get; private set; } \n    int _capacity; \n    public CommandStack(int commandCapacity) \n    { \n        this._commandStack = new Stack<Command>(commandCapacity); \n        this._capacity = commandCapacity; \n    } \n\n```", "```py\n    public bool IsFull() \n    { \n        return this._commandStack.Count >= this._capacity; \n    }  \n\n    public bool IsEmpty() \n    { \n        return this._commandStack.Count == 0; \n    } \n\n```", "```py\n    public bool PerformCommand(Command command) \n    { \n        if (!this.IsFull()) \n        { \n            this._commandStack.Push(command); \n            return true; \n        } \n        return false; \n    } \n\n```", "```py\n    public bool PerformCommands(List<Command> commands) \n    { \n        bool inserted = true; \n        foreach (Command c in commands) \n        { \n            inserted = this.PerformCommand(c); \n        } \n        return inserted;\n    } \n\n```", "```py\n    public Command UndoCommand() \n    { \n        return this._commandStack.Pop(); \n    } \n\n```", "```py\n    public void Reset() \n    { \n        this._commandStack.Clear(); \n    } \n\n    public int TotalCommands() \n    { \n        return this._commandStack.Count; \n    } \n\n```", "```py\n    private Stack<Command> _commandStack; \n    public Stack<Command> GetCommandStack() \n    { \n        return this._commandStack;\n    } \n\n    int _capacity; \n\n    public CommandStack(int commandCapacity) \n    { \n        this._commandStack = new Stack<Command>(); \n        this._capacity = commandCapacity; \n    } \n\n```", "```py\n    public boolean isFull() \n    { \n        return this._commandStack.size() >= this._capacity; \n    } \n\n    public boolean isEmpty() \n    { \n        return this._commandStack.empty(); \n    } \n\n```", "```py\n    public boolean performCommand(Command command) \n    { \n        if (!this.IsFull()) \n        { \n            this._commandStack.push(command); \n            return true; \n        } \n        return false; \n    } \n\n```", "```py\n    public boolean performCommands(List<Command> commands) \n    { \n        boolean inserted = true; \n        for (Command c : commands) \n        { \n            inserted = this.performCommand(c); \n        } \n        return inserted; \n    } \n\n```", "```py\n    public Command undoCommand() \n    { \n        return this._commandStack.pop(); \n    } \n\n```", "```py\n    public void reset() \n    { \n        this._commandStack.removeAllElements(); \n    } \n\n    public int totalCommands() \n    { \n        return this._commandStack.size(); \n    } \n\n```", "```py\n    @interface EDSCommandStack() \n    { \n        NSMutableArray<EDSCommand*> *_commandStack; \n        NSInteger _capacity; \n    } \n\n    -(instancetype)initWithCommandCapacity:(NSInteger)commandCapacity \n    { \n        if (self = [super init]) \n        { \n            _commandStack = [NSMutableArray array]; \n            _capacity = capacity; \n        } \n        return self; \n    } \n\n```", "```py\n    -(BOOL)isFull \n    { \n        return [_commandStack count] >= _capacity; \n    } \n\n    -(BOOL)isEmpty \n    {  \n        return [_commandStack count] == 0; \n    } \n\n```", "```py\n    -(BOOL)performCommand:(EDSCommand*)command \n    { \n        if (![self isFull]) \n        { \n            [_commandStack addObject:command]; \n            return YES; \n        } \n        return NO; \n    } \n\n```", "```py\n    -(BOOL)performCommands:(NSArray<EDSCommand*> *)commands \n    { \n        bool inserted = true; \n        for (EDSCommand *c in commands) { \n            inserted =  [self performCommand:c]; \n        } \n        return inserted; \n    } \n\n```", "```py\n    -(EDSCommand*)undoCommand \n    { \n        EDSCommand *c = [_commandStack lastObject]; \n        [_commandStack removeLastObject]; \n        return c; \n    } \n\n```", "```py\n    -(void)reset \n    { \n        [_commandStack removeAllObjects]; \n    } \n\n    -(NSInteger)totalCommands \n    { \n        return [_commandStack count]; \n    } \n\n```", "```py\n    public fileprivate(set) var _commandStack: Array = [Command]()\n    public fileprivate(set) var _capacity: Int;\n\n    public init (commandCapacity: Int) \n    { \n        _capacity = commandCapacity; \n    } \n\n```", "```py\n    public func IsFull() -> Bool \n    { \n        return _commandStack.count >= _capacity \n    } \n\n    public func IsEmpty() -> Bool \n    { \n        return _commandStack.count == 0; \n    } \n\n```", "```py\n    public func PerformCommand(_command: Command) -> Bool \n    { \n        if (!IsFull()) \n        { \n            _commandStack.append(command) \n            return true; \n        } \n        return false; \n    } \n\n```", "```py\n    public func PerformCommands(_commands: [Command]) -> Bool \n    { \n        var inserted: Bool = true; \n        for c in commands \n        { \n            inserted = PerformCommand(c); \n        } \n        return inserted; \n    } \n\n```", "```py\n    public func UndoCommand() -> Command \n    { \n        return _commandStack.popLast()! \n    } \n\n```", "```py\n    public func Reset() \n    { \n        _commandStack.removeAll() \n    } \n\n    public func TotalCommands() -> Int \n    { \n        return _commandStack.count; \n    } \n\n```"]