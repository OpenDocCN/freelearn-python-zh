["```py\nlax-edg-r1#sh ip int brief\nInterface                  IP-Address      OK? Method Status                Protocol\nGigabitEthernet0/0         192.168.2.51    YES NVRAM  up                    up\nGigabitEthernet0/1         10.0.0.1        YES NVRAM  up                    up\nLoopback0                  192.168.0.10    YES NVRAM  up \n```", "```py\n>>> new_connection.send('show ip int brief/n') \n16\n>>> output = new_connection.recv(5000)\n>>> print(output)\nb'show ip interface brief\\r\\nInterface                  IP-Address      OK? Method Status                Protocol\\r\\nGigabitEthernet0/0         192.168.2.51    YES NVRAM  up                    up      \\r\\nGigabitEthernet0/1         10.0.0.1        YES NVRAM  up                    up      \\r\\nLoopback0                  192.168.0.10    YES NVRAM  up                    up      \\r\\nlax-edg-r1#'\n>>> \n```", "```py\n{\n\"ins_api\":{\n\"outputs\":{\n\"output\":{\n\"body\":{ \"TABLE_intf\":[\n{\n\"ROW_intf\":{\n\"admin-state\":\"up\",\n\"intf-name\":\"Lo0\",\n\"iod\":84,\n\"ip-disabled\":\"FALSE\",\n\"link-state\":\"up\",\n\"prefix\":\"192.168.2.50\",\n\"proto-state\":\"up\"\n}\n},\n{\n\"ROW_intf\":{\n\"admin-state\":\"up\",\n\"intf-name\":\"Eth2/1\",\n\"iod\":36,\n\"ip-disabled\":\"FALSE\",\n\"link-state\":\"up\",\n\"prefix\":\"10.0.0.6\",\n\"proto-state\":\"up\"\n}\n}\n],\n\"TABLE_vrf\":[\n{\n\"ROW_vrf\":{\n\"vrf-name-out\":\"default\"\n}\n},\n{\n\"ROW_vrf\":{\n\"vrf-name-out\":\"default\"\n}\n}\n]\n},\n\"code\":\"200\",\n\"input\":\"show ip int brief\",\n\"msg\":\"Success\"\n}\n},\n\"sid\":\"eoc\",\n\"type\":\"cli_show\",\n\"version\":\"1.2\"\n}\n} \n```", "```py\n$ source venv/bin/activate \n```", "```py\n$ pip install ncclient==0.6.13\n$ pip install requests==2.28.1 \n```", "```py\nfeature nxapi\nusername cisco password 5 $1$Nk7ZkwH0$fyiRmMMfIheqE3BqvcL0C1 role network-operator\nusername cisco role network-admin\nusername cisco passphrase lifetime 99999 warntime 14 gracetime 3 \n```", "```py\nlax-cor-r1(config)# nxapi http port 80\nlax-cor-r1(config)# nxapi sandbox \n```", "```py\n#!/usr/bin/env python3\nfrom ncclient import manager\nconn = manager.connect(\n        host='192.168.2.50', \n        port=22, \n        username='cisco', \n        password='cisco', \n        hostkey_verify=False, \n        device_params={'name': 'nexus'}, \n        look_for_keys=False\n        )\nfor value in conn.server_capabilities:\n    print(value)\nconn.close_session() \n```", "```py\n(venv) $ python cisco_nxapi_1.py\nurn:ietf:params:xml:ns:netconf:base:1.0\nurn:ietf:params:netconf:base:1.0\nurn:ietf:params:netconf:capability:validate:1.0\nurn:ietf:params:netconf:capability:writable-running:1.0\nurn:ietf:params:netconf:capability:url:1.0?scheme=file\nurn:ietf:params:netconf:capability:rollback-on-error:1.0\nurn:ietf:params:netconf:capability:candidate:1.0\nurn:ietf:params:netconf:capability:confirmed-commit:1.0 \n```", "```py\n\"\"\"\nNX-API-BOT \n\"\"\"\nimport requests\nimport json\n\"\"\"\nModify these please\n\"\"\"\nurl='http://YOURIP/ins'\nswitchuser='USERID'\nswitchpassword='PASSWORD'\nmyheaders={'content-type':'application/json-rpc'}\npayload=[\n  {\n    \"jsonrpc\": \"2.0\",\n    \"method\": \"cli\",\n    \"params\": {\n      \"cmd\": \"show version\",\n      \"version\": 1.2\n     },\n     \"id\": 1\n  }\n]\nresponse = requests.post(url,data=json.dumps(payload), headers=myheaders,auth=(switchuser,switchpassword)).json() \n```", "```py\n(venv) $ python cisco_nxapi_2.py\n7.3(0)D1(1) \n```", "```py\nlax-cor-r1-new# sh run | i hostname\nhostname lax-cor-r1-new \n```", "```py\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"cli\",\n  \"params\": {\n    \"cmd\": \"interface ethernet 2/12\",\n    \"version\": 1.2\n  },\n  \"id\": 1\n},\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"cli\",\n  \"params\": {\n    \"cmd\": \"description foo-bar\",\n    \"version\": 1.2\n  },\n  \"id\": 2\n},\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"cli\",\n  \"params\": {\n    \"cmd\": \"end\",\n    \"version\": 1.2\n  },\n  \"id\": 3\n},\n{\n  \"jsonrpc\": \"2.0\",\n  \"method\": \"cli\",\n  \"params\": {\n    \"cmd\": \"copy run start\",\n    \"version\": 1.2\n  },\n  \"id\": 4\n  }\n] \n```", "```py\ninterface Ethernet2/12\n  description foo-bar\n  shutdown\n  no switchport\n  mac-address 0000.0000.002f \n```", "```py\nurn:cisco:params:xml:ns:yang:cisco-virtual-service?module=cisco- virtual-service&revision=2015-04-09\nhttp://tail-f.com/ns/mibs/SNMP-NOTIFICATION-MIB/200210140000Z? module=SNMP-NOTIFICATION-MIB&revision=2002-10-14\nurn:ietf:params:xml:ns:yang:iana-crypt-hash?module=iana-crypt-hash&revision=2014-04-04&features=crypt-hash-sha-512,crypt-hash-sha-256,crypt-hash-md5\nurn:ietf:params:xml:ns:yang:smiv2:TUNNEL-MIB?module=TUNNEL-MIB&revision=2005-05-16\nurn:ietf:params:xml:ns:yang:smiv2:CISCO-IP-URPF-MIB?module=CISCO-IP-URPF-MIB&revision=2011-12-29\nurn:ietf:params:xml:ns:yang:smiv2:ENTITY-STATE-MIB?module=ENTITY-STATE-MIB&revision=2005-11-22\nurn:ietf:params:xml:ns:yang:smiv2:IANAifType-MIB?module=IANAifType-MIB&revision=2006-03-31\n<omitted> \n```", "```py\n>>> import requests, json\n>>> URL = 'https://sandboxapicdc.cisco.com'\n>>> PASSWORD = \"<password>\"\n>>> LOGIN = \"admin\"\n>>> AUTH_URL = URL + '/api/aaaLogin.json' \n```", "```py\n>>> r = requests.post(AUTH_URL, json={\"aaaUser\":{\"attributes\":{\"name\":LOGIN,\"pwd\":PASSWORD}}}, verify=False)\n>>> r_json = r.json()\n>>> r_json\n{'totalCount': '1', 'imdata': [{'aaaLogin': {'attributes': {'token': _<skip>} \n```", "```py\n>>> token = r_json[\"imdata\"][0][\"aaaLogin\"][\"attributes\"][\"token\"]\n>>> cookie = {'APIC-cookie':token}\n>>> QUERY_URL = URL + '/api/node/class/fvTenant.json?query-target-filter=eq(fvTenant.name,\"Cisco\")'\n>>> r_cisco = requests.get(QUERY_URL, cookies=cookie, verify=False)\n>>> r_cisco.json()\n{'totalCount': '1', 'imdata': [{'fvTenant': {'attributes': {'annotation': '', 'childAction': '', 'descr': '', 'dn': 'uni/tn-Cisco', 'extMngdBy': '', 'lcOwn': 'local', 'modTs': '2022-08-06T14:05:15.893+00:00', 'monPolDn': 'uni/tn-common/monepg-default', 'name': 'Cisco', 'nameAlias': '', 'ownerKey': '', 'ownerTag': '', 'status': '', 'uid': '15374', 'userdom': ':all:'}}}]}\n>>> print(r_cisco.json()['imdata'][0]['fvTenant']['attributes']['dn'])\nuni/tn-Cisco \n```", "```py\n#!/usr/bin/env python3\nimport requests\nimport pprint\nmyheaders={'X-Cisco-Meraki-API-Key': <skip>}\nurl ='https://dashboard.meraki.com/api/v0/organizations'\nresponse = requests.get(url, headers=myheaders, verify=False)\npprint.pprint(response.json()) \n```", "```py\n(venv) $ python cisco_meraki_1.py\n [{'id': '681155',\n  'name': 'DeLab',\n  'url': 'https://n6.meraki.com/o/49Gm_c/manage/organization/overview'},\n {'id': '865776',\n  'name': 'Cisco Live US 2019',\n  'url': 'https://n22.meraki.com/o/CVQqTb/manage/organization/overview'},\n {'id': '549236',\n  'name': 'DevNet Sandbox',\n  'url': 'https://n149.meraki.com/o/t35Mb/manage/organization/overview'},\n {'id': '52636',\n  'name': 'Forest City - Other',\n  'url': 'https://n42.meraki.com/o/E_utnd/manage/organization/overview'}] \n```", "```py\n#!/usr/bin/env python3\nimport requests\nimport pprint\nmyheaders={'X-Cisco-Meraki-API-Key': <skip>}\norgId = '549236'\nurl = 'https://dashboard.meraki.com/api/v0/organizations/' + orgId + '/networks'\nresponse = requests.get(url, headers=myheaders, verify=False)\npprint.pprint(response.json()) \n```", "```py\n(venv) $ python cisco_meraki_2.py\n<skip>\n[{'disableMyMerakiCom': False,\n  'disableRemoteStatusPage': True,\n  'id': 'L_646829496481099586',\n  'name': 'DevNet Always On Read Only',\n  'organizationId': '549236',\n  'productTypes': ['appliance', 'switch'],\n  'tags': ' Sandbox ',\n  'timeZone': 'America/Los_Angeles',\n  'type': 'combined'},\n {'disableMyMerakiCom': False,\n  'disableRemoteStatusPage': True,\n  'id': 'N_646829496481152899',\n  'name': 'test - mx65',\n  'organizationId': '549236',\n  'productTypes': ['appliance'],\n  'tags': None,\n  'timeZone': 'America/Los_Angeles',\n  'type': 'appliance'},\n<skip> \n```", "```py\nset system login user juniper uid 2001\nset system login user juniper class super-user\nset system login user juniper authentication encrypted-password \"$1$0EkA.XVf$cm80A0GC2dgSWJIYWv7Pt1\" \nset system services ssh\nset system services telnet\nset system services netconf ssh port 830 \n```", "```py\nnetconf@foo> show configuration | display set \nset version 12.1R1.9\nset system host-name foo set system domain-name bar\n<omitted> \n```", "```py\nnetconf@foo> show configuration | display xml\n<rpc-reply >\n<configuration junos:commit-seconds=\"1485561328\" junos:commit- localtime=\"2017-01-27 23:55:28 UTC\" junos:commit-user=\"netconf\">\n<version>12.1R1.9</version>\n<system>\n<host-name>foo</host-name>\n<domain-name>bar</domain-name> \n```", "```py\n#!/usr/bin/env python3\nfrom ncclient import manager\nconn = manager.connect(\n    host='192.168.2.70', \n    port='830', \n    username='juniper', \n    password='juniper!',\n    timeout=10,\n    device_params={'name':'junos'},\n    hostkey_verify=False)\nresult = conn.command('show version', format='text')\nprint(result.xpath('output')[0].text)\nconn.close_session() \n```", "```py\n<rpc-reply message-id=\"urn:uuid:7d9280eb-1384-45fe-be48- b7cd14ccf2b7\">\n<output>\nHostname: foo\nModel: olive\nJUNOS Base OS boot [12.1R1.9]\nJUNOS Base OS Software Suite [12.1R1.9]\n<omitted>\nJUNOS Runtime Software Suite [12.1R1.9] JUNOS Routing Software Suite [12.1R1.9]\n</output>\n</rpc-reply> \n```", "```py\nprint(result.xpath('output')[0].text) \n```", "```py\n#!/usr/bin/env python3\nfrom ncclient import manager\nfrom ncclient.xml_ import new_ele, sub_ele\nconn = manager.connect(host='192.168.2.70', port='830', username='juniper', password='juniper!', timeout=10, device_params={'name':'junos'}, hostkey_verify=False) \n```", "```py\n# lock configuration and make configuration changes conn.lock()\n# build configuration\nconfig = new_ele('system')\nsub_ele(config, 'host-name').text = 'master'\nsub_ele(config, 'domain-name').text = 'python' \n```", "```py\n<system>\n    <host-name>foo</host-name>\n    <domain-name>bar</domain-name>\n...\n</system> \n```", "```py\n# send, validate, and commit config conn.load_configuration(config=config)\nconn.validate()\ncommit_config = conn.commit()\nprint(commit_config.tostring)\n# unlock config\nconn.unlock()\n# close session\nconn.close_session() \n```", "```py\n# make a connection object\ndef connect(host, port, user, password):\n    connection = manager.connect(host=host, port=port,\n        username=user, password=password, timeout=10,\n        device_params={'name':'junos'}, hostkey_verify=False)\n    return connection\n# execute show commands\ndef show_cmds(conn, cmd):\n    result = conn.command(cmd, format='text')\n    return result\n# push out configuration\ndef config_cmds(conn, config):\n    conn.lock()\n    conn.load_configuration(config=config)\n    commit_config = conn.commit()\n    return commit_config.tostring \n```", "```py\n(venv) $ pip install junos-eznc \n```", "```py\nset system services netconf ssh port 830 \n```", "```py\n$ ssh-keygen -t rsa \n```", "```py\n(venv) $ cp ~/.ssh/id_rsa.pub /tmp\n(venv) $ cd /tmp\n(venv) $ python3 -m http.server\n(venv) Serving HTTP on 0.0.0.0 port 8000 ... \n```", "```py\nnetconf@foo# set system login user echou class super-user authentication load-key-file http://<management host ip>:8000/id_rsa.pub\n/var/home/netconf/...transferring.file........100% of 394 B 2482 kBps \n```", "```py\n(venv) $ ssh -i ~/.ssh/id_rsa <Juniper device ip>\n--- JUNOS 12.1R1.9 built 2012-03-24 12:52:33 UTC\nechou@foo> \n```", "```py\n>>> from jnpr.junos import Device\n>>> dev = Device(host='<Juniper device ip, in our case 192.168.2.70>', user='juniper', password='juniper!')\n>>> dev.open()\nDevice(192.168.2.70)\n>>> dev.facts\n{'serialnumber': '', 'personality': 'UNKNOWN', 'model': 'olive', 'ifd_style': 'CLASSIC', '2RE': False, 'HOME': '/var/home/juniper', 'version_info': junos.version_info(major=(12, 1), type=R, minor=1, build=9), 'switch_style': 'NONE', 'fqdn': 'foo.bar', 'hostname': 'foo', 'version': '12.1R1.9', 'domain': 'bar', 'vc_capable': False}\n>>> dev.close() \n```", "```py\n>>> from jnpr.junos import Device\n>>> dev1 = Device(host='192.168.2.70', user='echou', ssh_private_key_file='/home/echou/.ssh/id_rsa')\n>>> dev1.open()\nDevice(192.168.2.70)\n>>> dev1.facts\n{'HOME': '/var/home/echou', 'model': 'olive', 'hostname': 'foo', 'switch_style': 'NONE', 'personality': 'UNKNOWN', '2RE': False, 'domain': 'bar', 'vc_capable': False, 'version': '12.1R1.9', 'serialnumber': '', 'fqdn': 'foo.bar', 'ifd_style': 'CLASSIC', 'version_info': junos.version_info(major=(12, 1), type=R, minor=1, build=9)}\n>>> dev1.close() \n```", "```py\n#!/usr/bin/env python3\nfrom jnpr.junos import Device\nimport xml.etree.ElementTree as ET\nimport pprint\ndev = Device(host='192.168.2.70', user='juniper', passwd='juniper!')\ntry:\n    dev.open()\nexcept Exception as err:\n    print(err)\n    sys.exit(1)\nresult = dev.rpc.get_interface_information(interface_name='em1', terse=True)\npprint.pprint(ET.tostring(result))\ndev.close() \n```", "```py\nnetconf@foo> show interfaces em1 | display xml rpc\n<rpc-reply >\n <rpc>\n <get-interface-information>\n <interface-name>em1</interface-name>\n </get-interface-information>\n </rpc>\n <cli>\n <banner></banner>\n </cli>\n</rpc-reply> \n```", "```py\n>>> dev1.display_xml_rpc('show interfaces em1', format='text') \n'<get-interface-information>/n <interface-name>em1</interface- name>/n</get-interface-information>/n' \n```", "```py\n#!/usr/bin/env python3\nfrom jnpr.junos import Device\nfrom jnpr.junos.utils.config import Config \n```", "```py\ndev = Device(host='192.168.2.70', user='juniper',\n    passwd='juniper!')\ntry:\n    dev.open()\nexcept Exception as err:\n    print(err)\n    sys.exit(1) \n```", "```py\nconfig_change = \"\"\n<system>\n  <host-name>master</host-name>\n  <domain-name>python</domain-name>\n</system>\n\"\"\ncu = Config(dev)\ncu.lock()\ncu.load(config_change)\ncu.commit()\ncu.unlock()\ndev.close() \n```", "```py\narista1(config)#management api http-commands\narista1(config-mgmt-api-http-cmds)#no shut\narista1(config-mgmt-api-http-cmds)#protocol https port 443 \narista1(config-mgmt-api-http-cmds)#no protocol http\narista1(config-mgmt-api-http-cmds)#vrf management \n```", "```py\narista1#sh management\napi http-commands Enabled: Yes\nHTTPS server: running, set to use port 443 HTTP server: shutdown, set to use port 80\nLocal HTTP server: shutdown, no authentication, set to use port 8080 \nUnix Socket server: shutdown, no authentication\nVRF: management \nHits: 64\nLast hit: 33 seconds ago Bytes in: 8250\nBytes out: 29862\nRequests: 23\nCommands: 42\nDuration: 7.086 \nseconds SSL Profile: none\nQoS DSCP: 0\nUser Requests Bytes in Bytes out Last hit\n----------- -------------- -------------- --------------- -----------\nadmin 23 8250 29862 33 seconds ago\nURLs\n-----------------------------------------\nManagement1 : https://192.168.199.158:443\narista1# \n```", "```py\n(venv) $ pip install jsonrpclib \n```", "```py\n#!/usr/bin/python2\nfrom __future__ import print_function\nfrom jsonrpclib import Server\nimport ssl\nssl._create_default_https_context = ssl._create_unverified_context\nswitch = Server(\"https://admin:arista@192.168.199.158/command-api\")\nresponse = switch.runCmds( 1, [ \"show version\" ] )\nprint('Serial Number: ' + response[0]['serialNumber']) \n```", "```py\n[{u'memTotal': 3978148, u'internalVersion': u'4.16.6M- 3205780.4166M', u'serialNumber': u'<omitted>', u'systemMacAddress': u'<omitted>', u'bootupTimestamp': 1465964219.71, u'memFree': 277832, u'version': u'4.16.6M', u'modelName': u'DCS-7050QX-32-F', u'isIntlVersion': False, u'internalBuildId': u'373dbd3c-60a7-4736-8d9e-bf5e7d207689', u'hardwareRevision': u'00.00', u'architecture': u'i386'}] \n```", "```py\nprint('Serial Number: ' + response[0]['serialNumber']) \n```", "```py\n$ python eapi_1.py \nSerial Number: <omitted> \n```", "```py\n#!/usr/bin/python2\nfrom __future__ import print_function\nfrom jsonrpclib import Server\nimport ssl, pprint\nssl._create_default_https_context = ssl._create_unverified_context\n# Run Arista commands thru eAPI\ndef runAristaCommands(switch_object, list_of_commands):\n    response = switch_object.runCmds(1, list_of_commands)\n    return response\nswitch = Server(\"https://admin:arista@192.168.199.158/command-api\") \ncommands = [\"enable\", \"configure\", \"interface ethernet 1/3\", \"switchport access vlan 100\", \"end\", \"write memory\"]\nresponse = runAristaCommands(switch, commands)\npprint.pprint(response) \n```", "```py\n$ python2 eapi_2.py\n[{}, {}, {}, {}, {}, {u'messages': [u'Copy completed successfully.']}] \n```", "```py\narista1#sh run int eth 1/3 \ninterface Ethernet1/3\n    switchport access vlan 100 \narista1# \n```", "```py\n(venv) $ pip install pyeapi \n```", "```py\ncat ~/.eapi.conf\n[connection:Arista1]\nhost: 192.168.199.158\nusername: admin\npassword: arista\ntransport: https \n```", "```py\n$ chmod 400 ~/.eapi.conf\n$ ls -l ~/.eapi.conf\n-r-------- 1 echou echou 94 Jan 27 18:15 /home/echou/.eapi.conf \n```", "```py\n>>> import pyeapi\n>>> arista1 = pyeapi.connect_to('Arista1') \n```", "```py\n>>> import pprint\n>>> pprint.pprint(arista1.enable('show hostname'))\n[{'command': 'show hostname',\n'encoding': 'json',\n'result': {'fqdn': 'arista1', 'hostname': 'arista1'}}] \n```", "```py\n>>> arista1.config('hostname arista1-new')\n[{}]\n>>> pprint.pprint(arista1.enable('show hostname'))\n[{'command': 'show hostname',\n 'encoding': 'json',\n 'result': {'fqdn': 'arista1-new', 'hostname': 'arista1-new'}}]\n>>> arista1.config(['interface ethernet 1/3', 'description my_link']) [{}, {}] \n```", "```py\n>>> pprint.pprint(arista1.enable('show run'))\nTraceback (most recent call last):\n...\nFile \"/usr/local/lib/python3.5/dist-packages/pyeapi/eapilib.py\", line 396, in send\nraise CommandError(code, msg, command_error=err, output=out) pyeapi.eapilib.CommandError: Error [1002]: CLI command 2 of 2 'show run' failed: invalid command [incomplete token (at token 1: 'run')]\n>>>\n>>> pprint.pprint(arista1.enable('show running-config interface ethernet 1/3'))\nTraceback (most recent call last):\n...\npyeapi.eapilib.CommandError: Error [1002]: CLI command 2 of 2 'show running-config interface ethernet 1/3' failed: invalid command [incomplete token (at token 2: 'interface')] \n```", "```py\n>>> result = arista1.enable('show running-config')\n>>> pprint.pprint(result[0]['result']['cmds']['interface Ethernet1/3'])\n{'cmds': {'description my_link': None, 'switchport access vlan 100': None}, 'comments': []} \n```", "```py\n>>> import pyeapi\n>>> node = pyeapi.connect_to('Arista1')\n>>> vlans = node.api('vlans')\n>>> type(vlans)\n<class 'pyeapi.api.vlans.Vlans'>\n>>> dir(vlans)\n[...'command_builder', 'config', 'configure', 'configure_interface', 'configure_vlan', 'create', 'default', 'delete', 'error', 'get', 'get_block', 'getall', 'items', 'keys', 'node', 'remove_trunk_group', 'set_name', 'set_state', 'set_trunk_groups', 'values']\n>>> vlans.getall()\n{'1': {'vlan_id': '1', 'trunk_groups': [], 'state': 'active', 'name': 'default'}}\n>>> vlans.get(1)\n{'vlan_id': 1, 'trunk_groups': [], 'state': 'active', 'name': 'default'}\n>>> vlans.create(10) True\n>>> vlans.getall()\n{'1': {'vlan_id': '1', 'trunk_groups': [], 'state': 'active', 'name':\n'default'}, '10': {'vlan_id': '10', 'trunk_groups': [], 'state': 'active', 'name': 'VLAN0010'}}\n>>> vlans.set_name(10, 'my_vlan_10') True \n```", "```py\narista1#sh vlan\nVLAN Name Status Ports\n----- -------------------------------- --------- --------------------\n-----\n1 default active\n10 my_vlan_10 active \n```", "```py\n#!/usr/bin/env python3\nimport pyeapi\nclass my_switch():\n\n    def __init__(self, config_file_location, device):\n        # loads the config file\n        pyeapi.client.load_config(config_file_location)\n        self.node = pyeapi.connect_to(device)\n        self.hostname = self.node.enable('show hostname')[0]['result']['hostname']\n        self.running_config = self.node.enable('show running-config')\n    def create_vlan(self, vlan_number, vlan_name):\n        vlans = self.node.api('vlans')\n        vlans.create(vlan_number)\n        vlans.set_name(vlan_number, vlan_name) \n```", "```py\n>>> import pyeapi_1\n>>> s1 = pyeapi_1.my_switch('/tmp/.eapi.conf', 'Arista1')\n>>> s1.hostname\n'arista1'\n>>> s1.running_config\n[{'encoding': 'json', 'result': {'cmds': {'interface Ethernet27': {'cmds':\n{}, 'comments': []}, 'ip routing': None, 'interface face Ethernet29':\n{'cmds': {}, 'comments': []}, 'interface Ethernet26': {'cmds': {}, 'comments': []}, 'interface Ethernet24/4': h.':\n<omitted>\n'interface Ethernet3/1': {'cmds': {}, 'comments': []}}, 'comments': [],\n'header': ['! device: arista1 (DCS-7050QX-32, EOS-4.16.6M)n!n']},\n'command': 'show running-config'}]\n>>> s1.create_vlan(11, 'my_vlan_11')\n>>> s1.node.api('vlans').getall()\n{'11': {'name': 'my_vlan_11', 'vlan_id': '11', 'trunk_groups': [], 'state':\n'active'}, '10': {'name': 'my_vlan_10', 'vlan_id': '10', 'trunk_groups': [], 'state': 'active'}, '1': {'name': 'default', 'vlan_id': '1', 'trunk_groups': [], 'state': 'active'}}\n>>> \n```", "```py\n(venv) $ pip install vymgmt \n```", "```py\n#!/usr/bin/env python3\nimport vymgmt\nvyos = vymgmt.Router('192.168.2.116', 'vyos', password='vyos')\nvyos.login()\nvyos.configure()\nvyos.set(\"system domain-name networkautomationnerds.net\")\nvyos.commit()\nvyos.save()\nvyos.exit()\nvyos.logout() \n```", "```py\n(venv) $ python vyos_1.py \n```", "```py\nvyos@vyos:~$ show configuration | match domain\ndomain-name networkautomationnerds.net \n```"]