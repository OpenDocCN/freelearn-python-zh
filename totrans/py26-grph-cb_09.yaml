- en: Chapter 9. Exchanging Inkscape SVG Drawings with Tkinter Shapes
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Inkscape as a tool for acquiring Tkinter line shapes (paths)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding and installing Inkscape
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Where to find SVG clipart
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting Tkinter paths from raster images
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Converting path data from SVG images into other formats
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Inkscape as a graphic tool for Tkinter paths
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we explore alternate ways and means of getting graphic-shaped
    data into Tkinter programs. Probably the most widespread vector-graphic format
    is the one designed to work on web pages. This is known as **SVG**, which is short-form
    for **Scaled Vector Graphics**. It is the official standard specification defined
    by the World Wide Web Consortium and has been around since 1999.
  prefs: []
  type: TYPE_NORMAL
- en: Our interest in SVG comes from the practical use it has for us in creating drawn
    shapes in Python with the Tkinter module.
  prefs: []
  type: TYPE_NORMAL
- en: Professional vector-drawing packages like Inkscape and some of the proprietary-drawing
    packages allow us, aided by some Python code, to acquire lists of coordinates
    that can be used directly in the `create_line(x0,y0 …)` functions of Tkinter.
  prefs: []
  type: TYPE_NORMAL
- en: There are growing libraries of copyright-free SVG pictures available on the
    web. With tools like Inkscape, we can dismantle existing images and use parts
    of them for our own graphic work and Python programs. One such site is [www.openclipart.org/](http://www.openclipart.org/)
    which allows and encourages anyone to copy the thousands of images stored there
    in SVG format.
  prefs: []
  type: TYPE_NORMAL
- en: SVG drawings encode lines in more than one way. One way is to represent a line
    as a series of x-y coordinate points on a canvas. Each point is defined as a pair
    of numbers referred to the zero position of the canvas which is the North-West
    corner (top-right). The second way is to represent each point as a relative shift
    from the previous point.
  prefs: []
  type: TYPE_NORMAL
- en: The structure of an SVG drawing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We shall examine how Inkscape encodes drawings so that we may interpret them
    for use in Python. What we will do is:'
  prefs: []
  type: TYPE_NORMAL
- en: Draw some simple objects in Inkscape and save them somewhere as "Plain SVG"
    format files.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Then we open the files in a text editor and inspect the contents so that we
    can recognize the lines we are interested in.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally we write code that will convert the SVG lines of interest into Tkinter
    lists which we can use directly in our Python programs.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The first thing we need to do now is acquire and install a copy of Inkscape
    onto our computer. We will find this at [www.inkscape.org/download/](http://www.inkscape.org/download/)
    where there are versions for Linux and Microsoft Windows.
  prefs: []
  type: TYPE_NORMAL
- en: The on-line documentation and tutorials for Inkscape are excellent. However,
    we want to use the minimum amount of Inkscape so this recipe is just that a few
    pointers to get the minimum task done.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The only tool we need to use in Inkscape is the line-drawing pen as shown in
    the following screenshot. We drew a "Z" shape with this tool and saved the file
    as `z_inkscape.svg`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code produced, displayed in a text editor is shown after the screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_09_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most of the preceding code is of no interest to us. It is the XML code that
    a web browser interprets in order to display a web page. Embedded within it, however,
    are SVG paths which we somehow want to transfer to Python so Tkinter can display
    it as a drawn shape.
  prefs: []
  type: TYPE_NORMAL
- en: 'The portion we are interested in is the paragraph starting with`<path` as this
    is the SVG format description of the "Z" shape that was drawn with the pen tool.
    This is the section of code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'This is the whole SVG description of the ''Zorro'' sign and the following line,
    has been slightly simplified, by removing the decimal fractions, to improve readability:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'This line is the equivalent of a group of Tkinter instructions that could be
    written:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The 'm' symbol is the SVG instruction "move-to" where the number of pixels moved
    are increments added to the coordinates of the previous point in the line except
    for the first point 122,89 which tells the pen where to begin.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We do not want to become SVG experts. We only want to know enough to be able
    to recognize graphic data which we can use in Python. In this spirit, a summary
    of a few of the most common SVG directives is given here.
  prefs: []
  type: TYPE_NORMAL
- en: '`m x,y` is the "move-to" instruction which moves the pen to the point `x,y`
    without drawing a line.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m x0,y0 x1,y1 x2,y2` will draw a line from `x0,y0` to `x1,y1` and then another
    segment from `x1,y1` to `x2, y2`. Note that the SVG interpreter only interprets
    the first point `x0,y0` as a "move-to" but interprets subsequent pairs of points
    as "line-to". "line-to" is an instruction to put the tip of the pen onto the surface
    and draw.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`m x0,y0 x1,y1 x2,y2` will draw a line from `x0,y0` to `x0+x1,y0+y1` and then
    another segment from `x0+x1,y0+y1` to `x0+x2,y0+y2`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The point to note is that the use of lower case is significant and is telling
    the SVG interpreter to calculate the coordinates as increment values that must
    be added to the previous location. As with the m directive the pen moves to the
    first point x0,y0 without drawing anything, but all subsequent points are drawn
    as segments joining adjacent points.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`l x,y` commands the pen to draw a line from wherever the pen happens to be
    now to the point `x,y`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l x,y` commands the pen to draw a line from the current pen position (x0,y0
    for instance) to the point `x0 + x, y0 + y`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`z` at the end of a list of path coordinates will close the path by drawing
    a line from the current point back to the start point.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: SVG code for separate paths
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Separate paths each get their own`<path innards-of the path />` code.
  prefs: []
  type: TYPE_NORMAL
- en: 'Thus the SVG code for three separate paths could be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Our interest is in the three lines starting from `d=` because these give the
    strings of `x,y` pairs that give the location of points on a drawn shape. The
    high degree of arithmetic precision is redundant because Tkinter will only use
    the integer part. However, if we needed to scale the picture up by multiplying
    each number by an amplification factor then the high arithmetic precision would
    avoid a small amount of distortion of the shape.
  prefs: []
  type: TYPE_NORMAL
- en: Tracing the shape of an image in Inkscape
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We want to use Inkscape to capture a complex series of shapes ones that would
    be tedious and difficult to draw with pencil and paper. A practical example of
    the use of this could be that you may want to paint a picture of an elephant and
    you need some reliable guidelines, based on a magazine picture or photograph,
    for the outlines of the limbs and body. One way is to draw a grid on the picture
    with a pencil and ruler, then repeat a scaled version of the grid on blank canvas
    and finally to draw the outlines with a lead pencil. An alternative method is
    to pull a `JPG, GIF, PNG, BMP`, or `TIFF` image of the elephant into Inkscape
    and trace a series of lines over it using the pen tool. These outlines can be
    printed and traced onto your canvas. These same shapes can be used in Python with
    Tkinter.
  prefs: []
  type: TYPE_NORMAL
- en: There are other ways of converting raster images to SVG paths but they require
    a fair amount of pre-conditioning of the images such as color separation and converting
    continuous grey scales into pure black and white. The method shown below allows
    us to decide exactly what path our line must follow even when the original image
    presents many subtle and ambiguous choices.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Place the image we are going to work on in a convenient folder. We use `/constr/pics1`
    in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open Inkscape and select **File** | **Open**.![How to do it...](img/3845_09_02.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select the image you want to work on.![How to do it...](img/3845_09_03.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a new layer. This allows us to draw lines on one layer without interfering
    with the background layer that contains the photographic image.![How to do it...](img/3845_09_04.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Magnify the image to make it easier to see where to place the pen tool. This
    also improves the accuracy of the traced path we will make.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We do this by clicking on the magnifying glass icon on the left border toolbar
    and then clicking on the zoom-in magnifying glass with the plus symbol inside
    it. This is in the toolbar that appears on the top border.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_09_05.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: Click on the pen tool on the left border toolbar and follow the path on the
    picture that we want to capture, save, and eventually convert to a Tkinter form.![How
    to do it...](img/3845_09_06.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Note that Inkscape allows us to shift the picture around and zoom in or out
    without interrupting the action of tracing a line. Then we can start clicking
    on points along a selected path in the image and move the mouse pointer across
    to a scroll bar or a zoom icon and move or click on them. Tkinter temporarily
    suspends the actions of the pen tool while the pointer is outside the drawing
    area.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: Another convenient feature is that if we mistakenly click the mouse in the wrong
    position, we can wipe out this mistake by hitting the Delete key ("del") on the
    keyboard once. This will undo the last click position on the line being traced.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: If we wish to re-position any of the points on a completed line, this can be
    done using the point-editing tool which is the second from the top along the left
    border toolbar.
  prefs:
  - PREF_IND
  - PREF_IND
  type: TYPE_NORMAL
- en: '![How to do it...](img/3845_09_07.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: At the final point of each separate path, the pen tool must be double-clicked.
    This ends the drawing of that particular path and puts the pen away. For the next
    line, we need to click on the pen icon in the toolbar once again.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: A full set of traces of the lines of interest is shown in the following screenshot:![How
    to do it...](img/3845_09_08.jpg)
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Now we save our work as a SVG format file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'To extract the SVG paths for conversion to Tkinter lines, we just open a text
    editor, and then open the SVG format file we have just saved in the editor. This
    file is an XML text file with some SVG code inside it as explained in the first
    recipe of this chapter. The pieces we are interested in are lines that start as
    follows:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The next recipe gives the Python code to convert the SVG paths into Tkinter
    lines and display them for confirmation.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: How often do we need to click the mouse?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As soon as we start the activity of tracing a line, we discover that we have
    to exercise discretion about how often to left-click the mouse to create a new
    point. You will get best accuracy with many points and the least fidelity with
    the fewest of points. We will be surprised at how only a few numbers of points
    are needed to represent our shapes with acceptable fidelity.
  prefs: []
  type: TYPE_NORMAL
- en: This is due to the magic of the `smooth='true'` attribute in the Tkinter smooth
    line function:canvas_1.create_line(Q, `fill='green', smooth='true')` as shown
    in the next recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to get SVG paths from raster images
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Another way to get SVG vector code from raster images is to use the trace path
    and path-simplify tools of Inkscape.
  prefs: []
  type: TYPE_NORMAL
- en: Converting an SVG path into a Tkinter Line
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We take long and complex Inkscape-traced paths that are SVG encoded and convert
    them into Tkinter lines that can be displayed using methods like `canvas.create_line(x0,y0,
    x1,y1, x2,y2, ...)`.
  prefs: []
  type: TYPE_NORMAL
- en: The following program takes a slightly edited form of a SVG path and transforms
    it into a form usable in a `Tkintercreate_line()` function.
  prefs: []
  type: TYPE_NORMAL
- en: To do this we need to exchange the single space characters that separate pairs
    of coordinates and replace them with commas.
  prefs: []
  type: TYPE_NORMAL
- en: At the same time, we want to convert the incremental coordinate values used
    by the SVG path into absolute values by adding the increment value to the corresponding
    previous value.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'A typical SVG path for a 5-point line is shown below:'
  prefs: []
  type: TYPE_NORMAL
- en: '`d="m 128,258 0,137 148,0 0,-145 -148,8 z"`'
  prefs: []
  type: TYPE_NORMAL
- en: In a text editor, it is easy to make some substitutions to convert it to the
    form of a list `a = "[128,258 0,137 148,0 0,-145 -148,8] "`
  prefs: []
  type: TYPE_NORMAL
- en: These lists of numbers can be hundreds of lines long so we want to automate
    the tedious and error-prone job of exchanging each space with a comma and followed
    by the arithmetic of replacing the incremental values with absolute ones. That
    is what the code does.
  prefs: []
  type: TYPE_NORMAL
- en: This program uses one of the previous traced lines from Inkscape and inserts
    the commas and does the arithmetic to get the list of coordinates needed for `canvas.create_line(x0,y0,
    x1,y1, x2,y2, ...)`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Execute the code below in the usual way.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To keep the code simple and short, we placed the slightly edited form of the
    SVG path into the Python code as shown in the line beginning:'
  prefs: []
  type: TYPE_NORMAL
- en: '`a =''1551.2964,83.663208 ...`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The code does four essential things:'
  prefs: []
  type: TYPE_NORMAL
- en: It places commas wherever it finds a space in the SVG path string.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It splits a single string, at every comma, into a list of separate string elements.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It converts each element into a floating point number.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It does the arithmetic of adding each element to the one preceding it by two
    positions. The x-coordinates alternate with y-coordinates so to add an x-value
    to the previous x-value; we need to skip over the y-values in between.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The modified SVG path is transformed into a Python list that can be used directly
    in the line: `canvas_1.create_line(Q, fill=''green'', smooth=''true'')`, to draw
    it on the canvas.'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the other seven Inkscaped-lines from `table_glass_vase_inkscape.svg` are
    transformed in the same way, we get the results as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![There''s more...](img/3845_09_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How far should we go with image conversion code?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: We have tried to keep the code simple and brief. We could have put a lot more
    effort into automating the slight editing that we did in a text editor to remove
    the `m` and place square brackets just inside the quotation marks.
  prefs: []
  type: TYPE_NORMAL
- en: Another way to get SVG paths from raster images
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Another method of extracting SVG paths from raster images is to use the Path,
    Trace Bitmap tool followed by the Path, and simplify tools in Inkscape. This method
    does not work well with complex images such as the one of the transparent glass
    vase we have used here. It works best with simple black and white images. The
    Inkscape tool is based on another tool called **potrace** which has its own interface
    called **potracegui**. The problem with the potrace tool is you first have to
    convert your image into bitmap-type formats. The method we have used in this chapter
    allows us to make very specific choices about which particular lines we want to
    use no matter how complex the
  prefs: []
  type: TYPE_NORMAL
