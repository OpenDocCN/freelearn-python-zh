- en: Chapter 3. The First Project – Motion-triggered LEDs
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第3章。第一个项目 – 运动触发LED
- en: In the preceding chapter, you learned the basics of Python-Arduino interfacing.
    We went through some exercises to provide hands-on experience with a useful Arduino
    protocol, Firmata, and the Python library. Now, it's time for your first 'Python
    + Arduino' project.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了Python-Arduino接口的基础知识。我们通过一些练习来提供使用有用的Arduino协议Firmata和Python库的动手经验。现在，是时候进行你的第一个“Python
    + Arduino”项目了。
- en: 'We will start this chapter by discussing the project goals and the required
    components to design the software flow and the hardware layout for the project.
    Just like any other microcontroller-based hardware project, you can use code and
    implement the entire logic of your project on Arduino itself. However, the goal
    of this book is to help you to utilize Python in such a way that you can simplify
    and extend your hardware projects. Although we will be using a hybrid approach
    with a Python program assisted by an Arduino sketch in the upcoming chapters,
    we would like you to get familiar with both ways of programming. As this is your
    first experience of building a hardware project, the chapter provides you with
    two different programming methods for the project: just using an Arduino sketch
    and using a Python program with the Firmata protocol on Arduino. The method with
    the Arduino sketch is included so that you get the complete experience with the
    Arduino components such as I/O pins and serial communication.'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从这个章节开始讨论项目目标和设计项目软件流程和硬件布局所需的组件。就像任何其他基于微控制器的硬件项目一样，你可以在Arduino上使用代码并实现项目的整个逻辑。然而，本书的目标是帮助你以这种方式利用Python，从而简化并扩展你的硬件项目。尽管在接下来的章节中我们将使用Python程序辅助Arduino草图的双向方法，但我们希望让你熟悉这两种编程方式。由于这是你第一次构建硬件项目，本章为你提供了两种不同的编程方法：仅使用Arduino草图和使用带有Firmata协议的Python程序。包含Arduino草图的方法是为了让你获得与Arduino组件（如I/O引脚和串行通信）的完整体验。
- en: Motion-triggered LEDs – the project description
  id: totrans-3
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 运动触发LED – 项目描述
- en: When you start learning any programming language, in most cases, you will be
    writing code to print 'Hello World!'. Meanwhile, in hardware projects, the majority
    of tutorials begin by helping a user to write the code to blink an LED. These
    exercises or projects are useful for developers to get started with the language,
    but mostly, they do not carry any importance towards real-world applications.
    However, we don't want to overwhelm you with a complex and sophisticated project
    that might require you to have a good amount of domain knowledge.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 当你开始学习任何编程语言时，在大多数情况下，你将编写代码来打印“Hello World!”。同时，在硬件项目中，大多数教程都是从帮助用户编写代码来闪烁LED开始的。这些练习或项目对于开发者开始使用语言是有用的，但大多数情况下，它们对现实世界的应用并没有任何重要性。然而，我们不想让你被一个复杂且复杂的项目压倒，这个项目可能需要你具备相当多的领域知识。
- en: While working with the Firmata protocol in the previous chapter, we already
    blinked an LED on the Arduino board. To keep the tradition alive (of having a
    blinking LED as a first major project) and also build excitement towards the project,
    let's put a twist in the blinking LED project. In this project, we will blink
    two different LEDs, but instead of performing these actions in a random manner,
    we will do it for events that are measured using a motion sensor. Although the
    difficultly level of the project is simple since it is your first project, it
    carries real-world application value and can be used as a simple application in
    your day-to-day life.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章使用Firmata协议工作时，我们已经在Arduino板上闪烁了一个LED。为了保持传统（拥有闪烁的LED作为第一个主要项目）并激发对项目的兴趣，让我们在闪烁LED项目中加入一些变化。在这个项目中，我们将闪烁两个不同的LED，但不是以随机的方式执行这些动作，而是通过使用运动传感器测量的事件来执行。尽管由于这是你的第一个项目，项目的难度级别很简单，但它具有现实世界的应用价值，并且可以作为你日常生活中的简单应用。
- en: The project goal
  id: totrans-6
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 项目目标
- en: 'The project goal can be described in one sentence as follows: "Generate an
    alert using a red LED for any detected motion and display the normal condition
    using a green LED." In comprehensive list of goals, you will have to perform the
    following tasks to satisfy the mentioned project goal:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 项目目标可以用一句话描述如下：“当检测到任何运动时，使用红色LED发出警报，并使用绿色LED显示正常状态。”在详细的目标列表中，你必须完成以下任务以满足提到的项目目标：
- en: Detect any motion in the environment as an event using a **passive infrared**
    (**PIR**) sensor
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用**被动红外**（**PIR**）传感器将环境中的任何运动检测为一个事件
- en: Perform a blink action using a red LED for this event
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用红色LED执行闪烁动作以表示此事件
- en: Otherwise, perform a blink action using a green LED
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 否则，使用绿色LED执行闪烁动作
- en: Keep the system in loop after the action has been performed and wait for the
    next event
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在执行动作后，保持系统循环并等待下一个事件
- en: 'The project can be implemented as a DIY application or as part of other projects
    with minor modifications. The following are some examples where the concepts from
    this project can be utilized:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 该项目可以作为DIY应用或作为其他项目的一部分进行实施，只需进行少量修改。以下是一些可以应用本项目概念的一些示例：
- en: As a DIY security system, to monitor movement in a room ([http://www.instructables.com/id/PIR-Sensor-Security/](http://www.instructables.com/id/PIR-Sensor-Security/))
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 作为DIY安全系统，用于监控房间内的运动([http://www.instructables.com/id/PIR-Sensor-Security/](http://www.instructables.com/id/PIR-Sensor-Security/))
- en: In smart home applications, it can be used to automatically turn off lights
    if no one is present ([http://www.instructables.com/id/Arduino-Home-Monitor-System/](http://www.instructables.com/id/Arduino-Home-Monitor-System/))
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在智能家居应用中，如果没有人，它可以自动关闭灯光([http://www.instructables.com/id/Arduino-Home-Monitor-System/](http://www.instructables.com/id/Arduino-Home-Monitor-System/))
- en: It can be used in automatic garage door opener applications with the support
    of additional hardware components and appropriate code
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在有额外硬件组件和适当代码的支持下，可用于自动车库门开启应用
- en: In DIY wildlife recording projects, it can be used to trigger a camera instead
    of an LED when any motion is detected ([http://www.instructables.com/id/Motion-triggered-camera/](http://www.instructables.com/id/Motion-triggered-camera/))
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在DIY野生动物记录项目中，当检测到任何运动时，可以使用它触发相机而不是LED([http://www.instructables.com/id/Motion-triggered-camera/](http://www.instructables.com/id/Motion-triggered-camera/))
- en: The list of components
  id: totrans-17
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组件列表
- en: 'In the previous chapter, we only used an LED for programming using Arduino,
    an Arduino USB cable, and a computer. The major hardware component required for
    this project is a PIR motion sensor. You will also need an additional LED. We
    recommend that you have a different colored LED than the one that you already
    have. The description of the necessary components is as follows:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们仅使用Arduino、Arduino USB线和计算机进行编程。本项目所需的主要硬件组件是PIR运动传感器。您还需要额外的LED。我们建议您使用与您已有的LED不同的颜色。所需组件的描述如下：
- en: '**PIR sensors**: These are widely used as motion detection sensors for DIY
    projects. They are small, inexpensive, consume less power, and are compatible
    with hardware platforms such as Arduino. A PIR sensor uses a pair of pyroelectric
    sensors that detect infrared radiation. If there is no motion, the output of these
    sensors cancels each other out. Any movement in the environment will produce different
    levels of infrared radiation by these pyroelectric sensors and the difference
    will trigger an output that is `HIGH` (+5 volts). We will be using the PIR sensor
    that is sold by SparkFun, and you can obtain it from [https://www.sparkfun.com/products/8630](https://www.sparkfun.com/products/8630).
    The PIR sensor comes equipped with the required printed circuit board (PCB). It
    has range of up to 20 feet (6 meters), which is sufficient for the project. The
    following image displays the PIR sensor available on the SparkFun website:![The
    list of components](img/5938OS_03_01.jpg)'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**PIR传感器**：这些传感器被广泛用于DIY项目中的运动检测。它们体积小、价格低廉、功耗低，并且与Arduino等硬件平台兼容。PIR传感器使用一对热释电传感器来检测红外辐射。如果没有运动，这些传感器的输出会相互抵消。任何环境中的运动都会通过这些热释电传感器产生不同水平的光辐射，差异将触发一个输出为`HIGH`（+5伏特）的信号。我们将使用SparkFun销售的PIR传感器，您可以从[https://www.sparkfun.com/products/8630](https://www.sparkfun.com/products/8630)获取它。PIR传感器配备了所需的印刷电路板（PCB）。其范围为20英尺（6米），对于该项目来说足够了。以下图片显示了SparkFun网站上可用的PIR传感器：![组件列表](img/5938OS_03_01.jpg)'
- en: 'Source: Sparkfun Inc.'
  id: totrans-20
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 来源：Sparkfun Inc.
- en: '**LEDs**: We recommend that you use green and red LEDs for the project. If
    they are unavailable, you can use any two LEDs with different colors.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**LED灯**：我们建议您在项目中使用绿色和红色LED灯。如果它们不可用，您可以使用任何两种不同颜色的LED灯。'
- en: '**Wires, resistors, and the breadboard**: You will require a bunch of wires
    and a breadboard to complete the connections. As a best practice, have at least
    three different colors of wire connectors to represent power, ground, and signal.
    You will also need two 220 ohm and one 10 kilo-ohm pull resistors.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电线、电阻和面包板**：您需要一些电线和一个面包板来完成连接。作为最佳实践，至少要有三种不同颜色的电线连接器来表示电源、地线和信号。您还需要两个220欧姆和一个10千欧姆的拉电阻。'
- en: '**The Arduino board**: The Arduino Uno board is sufficient for the project
    requirements. You can also use Arduino Mega or any other Arduino board for this
    project. The project requires only three I/O pins and any available Arduino board
    is equipped with more than three I/O pins.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Arduino板**：Arduino Uno板对于项目需求来说是足够的。你也可以使用Arduino Mega或任何其他Arduino板来完成这个项目。该项目只需要三个I/O引脚，而任何可用的Arduino板都配备了超过三个I/O引脚。'
- en: '**A USB cable**: You will need a USB cable to upload the Arduino code and perform
    serial communication with the Arduino board.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**USB线**：你需要USB线来上传Arduino代码并与Arduino板进行串行通信。'
- en: '**A computer**: We have already configured a computer with Python and the Arduino
    IDE for your favorite operating system in the previous chapters. You will need
    this computer for the project. Make sure that you have all the software components
    that we installed and configured in the previous chapters.'
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**计算机**：我们在前面的章节中已经为你的操作系统配置了一台装有Python和Arduino IDE的计算机。你将需要这台计算机来完成项目。确保你已经安装并配置了我们在前面的章节中安装和配置的所有软件组件。'
- en: The software flow design
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 软件流程设计
- en: 'The first step, before jumping to work on any hardware system, is to design
    the project flow using logic. We recommend that you have your project sketched
    as a flowchart to better understand the layout of the components and the flow
    of the code. The following diagram shows the flow of the project where you can
    see that the project runs in loops once motion is detected and the appropriate
    LED actions are performed:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始任何硬件系统的工作之前，第一步是使用逻辑设计项目流程。我们建议你将项目绘制成流程图，以便更好地理解组件布局和代码流程。以下图显示了项目的流程，你可以看到一旦检测到运动，项目就会在循环中运行，并执行相应的LED动作：
- en: '![The software flow design](img/5938OS_03_02.jpg)'
  id: totrans-28
  prefs: []
  type: TYPE_IMG
  zh: '![软件流程设计](img/5938OS_03_02.jpg)'
- en: As you can see, the program logic starts by detecting the state of the PIR sensor
    and performs the appropriate actions accordingly. With a single Arduino instruction,
    you can only turn the LED on or off. To perform the blinking operation, we will
    need to repeatedly perform the turning-on and turning-off actions with a time
    delay between the actions. We will also insert a delay between the execution of
    each successive loop so that the PIR sensor output can settle down. Note that
    we will use the same flow when writing the code for both the programming methods.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你所见，程序逻辑首先检测PIR传感器的状态，并根据该状态执行相应的动作。使用单个Arduino指令，你只能打开或关闭LED。为了执行闪烁操作，我们需要在动作之间加入时间延迟，重复打开和关闭动作。我们还将插入延迟在每个连续循环的执行之间，以便PIR传感器的输出可以稳定下来。请注意，我们将使用相同的流程来编写两种编程方法的代码。
- en: The hardware system design
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 硬件系统设计
- en: Designing a diagram for your software flow helps you to write the program and
    also assists you in identifying actions and events for the project. The process
    of hardware system design includes circuit connections, schematic design, simulation,
    verification, and testing. This design process provides a detailed understanding
    of the project and the hardware components. It also helps in preliminary verification
    and testing of the project architecture. Before we jump to the hardware design
    process of this project, let's get ourselves familiar with the helpful tools.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 设计软件流程图有助于你编写程序，并协助你识别项目中的动作和事件。硬件系统设计的过程包括电路连接、原理图设计、仿真、验证和测试。这个设计过程提供了对项目及其硬件组件的详细了解。它还有助于对项目架构进行初步的验证和测试。在我们跳到这个项目的硬件设计过程之前，让我们先熟悉一下这些有用的工具。
- en: Introducing Fritzing – a hardware prototyping software
  id: totrans-32
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 介绍Fritzing – 一款硬件原型设计软件
- en: You are not required to design the hardware system for this project. By and
    large, in this book, the hardware system designs will be provided, as the primary
    focus of the book is on programming rather than hardware design.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 你不需要为这个项目设计硬件系统。总的来说，在这本书中，硬件系统设计将会提供，因为本书的主要焦点是编程而不是硬件设计。
- en: If you are interested in system design or rapid prototyping of the hardware
    components, the open source software tool used for this purpose is called **Fritzing**.
    The schematics for your projects can be designed using Fritzing and it can be
    obtained from [http://fritzing.org/download/](http://fritzing.org/download/).
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你对手动设计或硬件组件的快速原型设计感兴趣，用于此目的的开源软件工具被称为**Fritzing**。你可以使用Fritzing来设计项目的原理图，并且可以从[http://fritzing.org/download/](http://fritzing.org/download/)获取。
- en: Fritzing is a community-supported electronic design automation software initiative
    for designers, artists, and hobbyists. It lets you convert your hardware sketch
    from paper to software as a circuit diagram. Fritzing also provides you with a
    tool to create PCB layouts from your designs. Fritzing extensively supports Arduino
    and other popular open source DIY hardware platforms. You can explore Fritzing
    via built-in example projects.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: Fritzing是一个由设计师、艺术家和爱好者支持的社区支持的电子设计自动化软件项目。它允许您将您的硬件草图从纸上转换为软件电路图。Fritzing还为您提供了一个从设计创建PCB布局的工具。Fritzing广泛支持Arduino和其他流行的开源DIY硬件平台。您可以通过内置的示例项目探索Fritzing。
- en: 'Install and run Fritzing. The following screenshot shows one of the default
    projects that are displayed after opening Fritzing:'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并运行Fritzing。以下截图显示了打开Fritzing后显示的默认项目之一：
- en: '![Introducing Fritzing – a hardware prototyping software](img/5938OS_03_03.jpg)'
  id: totrans-37
  prefs: []
  type: TYPE_IMG
  zh: '![介绍Fritzing – 一款硬件原型设计软件](img/5938OS_03_03.jpg)'
- en: As you can see, a toolbox containing virtual hardware components is located
    to the right of the opened window. The main editing space, located in the center,
    lets the user drag and drop components from the toolbox and also allows the user
    to complete connections between these components. You can learn more about the
    features provided by Fritzing and go through some hands-on tutorials at [http://fritzing.org/learning/](http://fritzing.org/learning/).
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 如您所见，一个包含虚拟硬件组件的工具箱位于打开窗口的右侧。位于中心的主体编辑空间允许用户从工具箱中拖放组件，并允许用户完成这些组件之间的连接。您可以在[http://fritzing.org/learning/](http://fritzing.org/learning/)了解更多Fritzing提供的功能，并查看一些动手教程。
- en: Working with the breadboard
  id: totrans-39
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用面包板
- en: Once you are familiar with Fritzing, you have the flexibility to create your
    own circuits, or you can always use the Fritzing files provided with the book.
    However, there is another challenge, that is, porting your virtual circuit to
    a physical one. One of the fundamental components used by electronics projects
    that let you implement connections and build the physical circuit is the **breadboard**.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦您熟悉了Fritzing，您就有灵活性来创建自己的电路，或者您始终可以使用书中提供的Fritzing文件。然而，还有一个挑战，那就是将您的虚拟电路移植到物理电路。电子项目中使用的最基本组件之一是允许您实现连接并构建物理电路的**面包板**。
- en: 'The breadboard contains intelligently organized metal rows hidden under an
    assembly containing plastic holes. This assembly helps the user to connect wires
    without going through any soldering work. It is really easy to insert and remove
    wires or electronics components through the holes. The following figure shows
    a small breadboard with a couple of components and a few wire connections:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板内含有智能组织的金属排，这些金属排隐藏在带有塑料孔的组件下面。这个组件帮助用户在不进行任何焊接工作的前提下连接电线。通过这些孔插入和移除电线或电子组件非常容易。以下图显示了带有几个组件和一些电线连接的小型面包板：
- en: '![Working with the breadboard](img/5938OS_03_09.jpg)'
  id: totrans-42
  prefs: []
  type: TYPE_IMG
  zh: '![使用面包板](img/5938OS_03_09.jpg)'
- en: Note
  id: totrans-43
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Find out more about breadboards and the tutorials to use them at [http://learn.sparkfun.com/tutorials/how-to-use-a-breadboard](http://learn.sparkfun.com/tutorials/how-to-use-a-breadboard).
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在[http://learn.sparkfun.com/tutorials/how-to-use-a-breadboard](http://learn.sparkfun.com/tutorials/how-to-use-a-breadboard)了解更多关于面包板和使用它们的教程。
- en: 'A breadboard mostly has two types of connection strips: terminal strips and
    power rails. As displayed in the preceding figure, terminal strips are vertical
    columns with electrically shorted holes. In simple words, once you connect any
    component to one of the terminal strips, the component will be electrically connected
    to each hole in the column. The columns of terminal strips are separated by the
    **Dual in-line Package** (**DIP**) support gap. (DIP is a common housing for electronics
    components.) In the same column, terminal strips above and below the DIP support
    gap are electrically independent. Meanwhile, the power rails are shorted horizontally
    throughout the entire row of the breadboard. The power rails are mostly used to
    connect positive and ground connections from the power supply, so it can be distributed
    easily to all components.'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 面包板主要有两种类型的连接条：端子条和电源轨。如图所示，端子条是电学上短接的孔的垂直列。简单来说，一旦你将任何组件连接到端子条中的一列，该组件就会与该列中的每个孔电学连接。端子条的列之间由**双列直插式封装**（**DIP**）支撑间隙分隔。（DIP是电子组件的常见封装。）在同一列中，DIP支撑间隙上方和下方的端子条在电学上是独立的。同时，电源轨在整个面包板的一行中水平短接。电源轨主要用于连接电源的正极和地，因此它可以轻松地分配到所有组件。
- en: Note
  id: totrans-46
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: '**History of breadboards**'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '**面包板的历史**'
- en: In the early years of electronics, people used actual breadboards (that were
    used to cut bread) to connect their large components with just nails and wires.
    Once electronics components started getting smaller, the board to assemble circuits
    also became better. The term stuck through this evolution, and we still call the
    modern boards breadboards. If you are interested, you can check out [http://www.instructables.com/id/Use-a-real-Bread-Board-for-prototyping-your-circui/](http://www.instructables.com/id/Use-a-real-Bread-Board-for-prototyping-your-circui/),
    which provides instructions to assemble a circuit using the original breadboards.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在电子的早期年代，人们使用真正的面包板（用于切面包的）来用钉子和电线连接他们的大型组件。随着电子组件开始变得更小，组装电路的板也变得更好。这个术语在这次演变中保留了下来，我们仍然称现代的板为面包板。如果你感兴趣，可以查看[http://www.instructables.com/id/Use-a-real-Bread-Board-for-prototyping-your-circui/](http://www.instructables.com/id/Use-a-real-Bread-Board-for-prototyping-your-circui/)，它提供了使用原始面包板组装电路的说明。
- en: Designing the hardware prototype
  id: totrans-49
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 设计硬件原型
- en: 'It''s time to collect the hardware components mentioned earlier and start building
    the system. The next figure shows the circuit for the project that has been developed
    using Fritzing. If you have prior experience of working with circuit assembly,
    go ahead and connect the components as displayed in the figure:'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 是时候收集前面提到的硬件组件并开始构建系统了。下一图显示了使用Fritzing开发的项目的电路图。如果你有电路组装的先前经验，请继续按照图中的显示连接组件：
- en: '![Designing the hardware prototype](img/5938OS_03_04.jpg)'
  id: totrans-51
  prefs: []
  type: TYPE_IMG
  zh: '![设计硬件原型](img/5938OS_03_04.jpg)'
- en: 'If this is your first experience of working with sensors and the breadboard,
    use the following steps to complete the circuit assembly:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果这是你第一次使用传感器和面包板，请按照以下步骤完成电路组装：
- en: Connect VCC (+5V) and ground from the Arduino to the breadboard.
  id: totrans-53
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将Arduino的VCC（+5V）和地连接到面包板。
- en: Connect the anode (long lead) of the red LED to digital pin 12 of the Arduino
    board. Connect the cathode (short lead) of the red LED to ground with 220 ohm
    resistors.
  id: totrans-54
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将红色LED的正极（长引脚）连接到Arduino板的数字引脚12。将红色LED的负极（短引脚）通过220欧姆电阻器连接到地。
- en: Connect the anode (long lead) of the green LED to digital pin 13 of the Arduino
    board. Connect the cathode (short lead) of the green LED to ground with 220 ohm
    resistors.
  id: totrans-55
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将绿色LED的正极（长引脚）连接到Arduino板的数字引脚13。将绿色LED的负极（短引脚）通过220欧姆电阻器连接到地。
- en: Connect VDD of the PIR sensor to VCC on the breadboard. Use the same wire color
    to represent the same category of connections. This will greatly help in troubleshooting
    the circuit.
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将PIR传感器的VDD连接到面包板上的VCC。使用相同的线色来表示相同的连接类别。这将极大地帮助电路的故障排除。
- en: Connect the signal (middle pin) of the PIR sensor to Arduino digital pin 7 with
    a 10 kilo-ohm pull-up resistor.
  id: totrans-57
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将PIR传感器的信号（中间引脚）通过10千欧姆的上拉电阻器连接到Arduino板的数字引脚7。
- en: 'The majority of experts prefer a schematic diagram instead of the prototype
    diagram that we used previously. Schematic diagrams are useful when you are using
    compatible components instead of the exact components from the prototype diagram.
    The following is a schematic diagram of the electronics circuit that we designed
    earlier. This diagram is also obtained using Fritzing:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数专家更喜欢原理图而不是我们之前使用的原型图。当你使用与原型图中的确切组件兼容的组件时，原理图非常有用。以下是我们之前设计的电子电路的原理图。此图也是使用Fritzing获得的：
- en: '![Designing the hardware prototype](img/5938OS_03_05.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![设计硬件原型](img/5938OS_03_05.jpg)'
- en: Your system is now ready to run the Arduino program. As we will be using the
    same hardware for both the programming methods, you are almost done working with
    electronics unless you encounter a problem. Just to make sure that everything
    is connected perfectly, let's check out these connections in the next section.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 你的系统现在已准备好运行Arduino程序。由于我们将使用相同的硬件进行编程方法，除非你遇到问题，否则你几乎完成了电子工作。为了确保一切连接得完美，让我们在下一节检查这些连接。
- en: Note
  id: totrans-61
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: Note that pull-up resistors are used to make sure that the output signal from
    a PIR sensor settles at the expected logic level.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，上拉电阻被用来确保PIR传感器的输出信号达到预期的逻辑电平。
- en: Testing hardware connections
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试硬件连接
- en: Once the circuit connections are complete, you can go directly to the programming
    sections. As a best practice, we recommend that you verify the circuit connections
    and check the sensor's status. We are assuming that your Arduino board is already
    equipped with the **StandardFirmata** sketch that we discussed in the previous
    chapter. Otherwise, refer to the previous chapter and upload the **StandardFirmata**
    sketch to your Arduino board.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦电路连接完成，你就可以直接进入编程部分。作为一个最佳实践，我们建议你验证电路连接并检查传感器的状态。我们假设你的Arduino板已经配备了我们在上一章中讨论的**StandardFirmata**草图。否则，请参考上一章，并将**StandardFirmata**草图上传到你的Arduino板。
- en: 'The best way to verify our circuit implementation is to use the Firmata test
    program that we used in the previous chapter. According to the project setup,
    the PIR sensor provides event inputs to Arduino pin 7\. In the test program, change
    the type of pin 7 to **Input** and wave your hand over the sensor, and you should
    be able to see the status of the pin as **High**, as displayed in the following
    screenshot:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 验证我们的电路实现的最佳方式是使用我们在上一章中使用的Firmata测试程序。根据项目设置，PIR传感器向Arduino引脚7提供事件输入。在测试程序中，将引脚7的类型更改为**输入**，并在传感器上方挥动手，你应该能够看到引脚的状态为**高**，如以下截图所示：
- en: '![Testing hardware connections](img/5938OS_03_06.jpg)'
  id: totrans-66
  prefs: []
  type: TYPE_IMG
  zh: '![测试硬件连接](img/5938OS_03_06.jpg)'
- en: Check the LED connections by setting up pins 12 and 13 as output pins and toggling
    the buttons to set the status of the pins. If you see the LEDs blinking while
    you are toggling the button, then your connections are working perfectly.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 通过将引脚12和13设置为输出引脚并切换按钮来设置引脚的状态，检查LED的连接。如果你在切换按钮时看到LED闪烁，那么你的连接工作得非常完美。
- en: If you cannot successfully perform these checks, verify and repeat the design
    steps.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你无法成功执行这些检查，请验证并重复设计步骤。
- en: Method 1 – using a standalone Arduino sketch
  id: totrans-69
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法1 – 使用独立的Arduino草图
- en: As we discussed in the previous chapters, a project can be implemented by creating
    project-specific native Arduino code or by using a Python-Arduino hybrid approach.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们在前面的章节中讨论的，一个项目可以通过创建特定于项目的原生Arduino代码或使用Python-Arduino混合方法来实现。
- en: The native Arduino sketches are useful in applications where negligible or no
    communication with a computer system is required. Although this type of standalone
    project enables continuous operation in the absence of serial connectivity, it
    is difficult to keep updating and uploading an Arduino sketch for minor modifications.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 原生的Arduino草图在不需要与计算机系统进行通信或通信可忽略的情况下非常有用。尽管这种独立项目在没有串行连接的情况下可以持续运行，但更新和上传Arduino草图进行微小修改是困难的。
- en: If you look at the various applications of this project, you will notice that
    only a few of them require the project to be implemented as a standalone system
    that just detects motion and blinks LEDs. This type of system can be easily implemented
    by a simple Arduino sketch.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看这个项目的各种应用，你会注意到其中只有少数需要将项目实现为一个仅检测运动并闪烁LED的独立系统。这种类型的系统可以通过一个简单的Arduino草图轻松实现。
- en: The project setup
  id: totrans-73
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目设置
- en: 'Before we go ahead with the project, make sure that you have the following
    things in place:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续项目之前，请确保您已准备好以下事项：
- en: The hardware components are set up and are functioning correctly
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 硬件组件已设置并正常运行
- en: Your Arduino is connected to the computer using a USB cable
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的Arduino通过USB线连接到计算机
- en: Your computer has the Arduino IDE and you can access the connected Arduino board
    through the IDE
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您的计算机上安装了Arduino IDE，您可以通过IDE访问连接的Arduino板
- en: The Arduino sketch
  id: totrans-78
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Arduino草图
- en: 'This section describes the Arduino code for the project. Before we get into
    a step-by-step description of the code, let''s first follow these steps to run
    the project:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 本节描述了项目的Arduino代码。在我们逐步描述代码之前，让我们首先遵循以下步骤来运行项目：
- en: Open the Arduino IDE.
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开Arduino IDE。
- en: From the **File** menu, open a new sketchbook.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 从**文件**菜单中打开一个新的草图簿。
- en: 'Copy the following Arduino code to the sketch and save it:'
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下Arduino代码复制到草图并保存：
- en: '[PRE0]'
  id: totrans-83
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Compile and upload the sketch to the Arduino board.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编译并将草图上传到Arduino板。
- en: Now, you have completed your project with the first programming method and successfully
    deployed it to your hardware. It should be running the designed algorithm to detect
    motion events and perform the blink action.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，您已经使用第一种编程方法完成了项目，并且已成功将其部署到硬件上。它应该正在运行设计的算法以检测运动事件并执行闪烁动作。
- en: 'As your project is functioning properly, it''s time to understand the code.
    Like any other Arduino program, the code has two mandatory functions: `setup()`
    and `loop()`. It also has a custom function, `blinkLED()`, for a specific action
    that will be explained later.'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 由于您的项目运行正常，现在是时候理解代码了。像任何其他Arduino程序一样，代码有两个强制性的函数：`setup()`和`loop()`。它还有一个自定义函数`blinkLED()`，用于执行稍后解释的特定动作。
- en: The setup() function
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`setup()`函数'
- en: 'As you can see in the preceding code snippet, we assigned variables to the
    Arduino pin at the beginning of the program. In the `setup()` function, we configured
    these variables to be defined as input or output pins:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 如您在前面的代码片段中所见，我们在程序开始时将变量分配给了Arduino引脚。在`setup()`函数中，我们配置了这些变量，使其定义为输入或输出引脚：
- en: '[PRE1]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Here, `pirPin`, `redLedPin`, and `greenLedPin` are digital pins 7, 12, and
    13 respectively. In the same function, we also configured the Arduino board to
    provide serial connectively at the baud rate of 9600 bps:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`pirPin`、`redLedPin`和`greenLedPin`分别是数字引脚7、12和13。在同一个函数中，我们还配置了Arduino板以在9600
    bps的波特率下提供串行连接性：
- en: '[PRE2]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: The loop() function
  id: totrans-92
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: '`loop()`函数'
- en: In the `loop()` function, we are repeatedly monitoring the input from the `pirPin`
    digital pin to detect motion. The output of this pin is `HIGH` when motion is
    detected and `LOW` otherwise. This logic is implemented using a simple `if-else`
    statement. When this condition is satisfied, the function calls a user-defined
    function, `blinkLED()`, to perform the appropriate action on the LEDs.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在`loop()`函数中，我们反复监控来自`pirPin`数字引脚的输入以检测运动。当检测到运动时，该引脚的输出为`HIGH`，否则为`LOW`。此逻辑通过简单的`if-else`语句实现。当满足此条件时，函数调用用户定义的函数`blinkLED()`，以对LED执行适当的动作。
- en: User-defined functions are a very important aspect of any programming language.
    Let's spend some time learning how you can create your own Arduino functions to
    perform various actions.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 用户定义的函数是任何编程语言的一个重要方面。让我们花些时间学习如何创建自己的Arduino函数以执行各种动作。
- en: Working with custom Arduino functions
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用自定义Arduino函数进行工作
- en: 'Functions are used when a segment of code is repeatedly executed to perform
    the same action. A user can create a custom function to organize the code or perform
    reoccurring actions. To successfully utilize a custom function, a user needs to
    call them from mandatory Arduino functions such as `loop()`, `setup()`, or any
    other function that leads to these mandatory functions:'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 当一段代码需要重复执行以执行相同动作时，会使用函数。用户可以创建自定义函数来组织代码或执行重复动作。为了成功使用自定义函数，用户需要从强制性的Arduino函数（如`loop()`、`setup()`或任何导致这些强制性函数的其他函数）中调用它们：
- en: '[PRE3]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the preceding Arduino function framework, `return-type` can be any Arduino
    data type such as `int`, `float`, `string`, and so on, or `void` if the code is
    not returning anything. The following is the custom function that we used in our
    project code:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 在先前的Arduino函数框架中，`return-type`可以是任何Arduino数据类型，如`int`、`float`、`string`等，或者如果代码不返回任何内容，则为`void`。以下是我们项目代码中使用的自定义函数：
- en: '[PRE4]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'In our project, the `blinkLED()` function is not retuning any value when it
    is called from the `loop()` function. Hence, `return-type` is `void`. When calling
    the function, we pass the pin number and a message as parameters:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的项目中，当从`loop()`函数调用`blinkLED()`函数时，它不会返回任何值。因此，`return-type`是`void`。在调用函数时，我们传递引脚号和消息作为参数：
- en: '[PRE5]'
  id: totrans-101
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: These parameters are then utilized in the performed action (writing a message
    on a serial port and setting up the LED status) by the `blinkLED()` function.
    This function also introduces a delay to perform the blink action by using the
    `delay()` function.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 这些参数随后被`blinkLED()`函数用于执行操作（在串行端口上写入消息并设置LED状态）。此函数还通过使用`delay()`函数引入延迟来执行闪烁动作。
- en: Testing
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: We verified the designed system in the *Testing hardware connection* section
    using manual inputs via the Firmata test program. As we have now implemented the
    software design, we need to verify that the project is performing objective tasks
    autonomously and repeatedly.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在*测试硬件连接*部分使用手动输入通过Firmata测试程序验证了设计的系统。由于我们现在已经实现了软件设计，我们需要验证项目是否能够自主且重复地执行客观任务。
- en: 'With the USB port connected to the computer, open the serial monitoring tool
    from the Arduino IDE by navigating to **Tools** | **Serial Monitor** or by pressing
    *Ctrl* + *Shift* + *M*. You should start seeing a message similar to the one displayed
    in the following screenshot on the **Serial Monitor** window:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 将USB端口连接到计算机后，通过导航到**工具** | **串行监视器**或按*Ctrl* + *Shift* + *M*打开Arduino IDE中的串行监视工具。你应该开始在**串行监视器**窗口看到类似于以下截图的消息：
- en: '![Testing](img/5938OS_03_07.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![测试](img/5938OS_03_07.jpg)'
- en: While writing the `blinkLED()` function to perform actions, we included an action
    to write a string via a serial port. Move your hand over the PIR sensor in such
    a way that the PIR sensor can detect motion. This event should trigger the system
    to blink the red LED and display a string, `Motion detected`, on the serial monitor.
    Once you stay steady and avoid any motion for a while, you will be able to see
    the green LED blinking until the next movement gets detected via the PIR sensor.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 当编写`blinkLED()`函数以执行操作时，我们包括了一个通过串行端口写入字符串的动作。将你的手在PIR传感器上方移动，以便PIR传感器可以检测到运动。此事件应触发系统闪烁红色LED并在串行监视器上显示字符串`Motion
    detected`。一旦你保持稳定并避免任何运动一段时间，你将能够看到绿色LED闪烁，直到通过PIR传感器检测到下一次运动。
- en: Troubleshooting
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'Troubleshooting is an important process if anything goes awry. These are a
    few example problems and the troubleshooting steps for them:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 故障排除是一个重要的过程，如果出现问题，以下是一些示例问题和相应的故障排除步骤：
- en: 'Serial output is correct, but there are no blinking LEDs:'
  id: totrans-110
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 串行输出正确，但没有闪烁的LED：
- en: Check the LED connections on the breadboard
  id: totrans-111
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查面包板上的LED连接
- en: 'The LED blinks, but there is no serial output:'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED闪烁，但没有串行输出：
- en: Check the port on which the serial monitor is configured
  id: totrans-113
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查串行监视器配置的端口
- en: Check whether the baud rate in the serial monitor is correct (9600 bps)
  id: totrans-114
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查串行监视器中的波特率是否正确（9600 bps）
- en: 'There is no serial output and no blinking LEDs:'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 没有串行输出和没有闪烁的LED：
- en: Check the PIR sensor connection and make sure that you are getting signal from
    the PIR sensor
  id: totrans-116
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查PIR传感器连接并确保你从PIR传感器获得信号
- en: Check your Arduino code
  id: totrans-117
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查你的Arduino代码
- en: Check power and ground connections
  id: totrans-118
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查电源和地线连接
- en: Method 2 – using Python and Firmata
  id: totrans-119
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 方法2 – 使用Python和Firmata
- en: In the previous chapter, we discussed the benefits of using Python programming
    that is assisted by Firmata over using native Arduino sketches. The Python-based
    programming approach provides tangible experience when performing any algorithmic
    or parametric changes. In this section, we are going to explore these benefits
    and also learn important Python programming paradigms.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们讨论了使用由Firmata辅助的Python编程相对于使用原生Arduino脚本的优点。基于Python的编程方法在进行任何算法或参数更改时提供了切实可行的体验。在本节中，我们将探讨这些优点，并学习重要的Python编程范式。
- en: The project setup
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 项目设置
- en: 'Let''s make sure that you have done the following before we go ahead with Python
    programming:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续进行Python编程之前，让我们确保你已经完成了以下操作：
- en: Made sure that the hardware components are set up, as described in the system
    design
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保硬件组件已按照系统设计描述设置好
- en: Connected the Arduino to your computer using a USB cable
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用USB线将Arduino连接到你的计算机
- en: Uploaded the **StandardFirmata** sketch back to Arduino
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将**StandardFirmata**草图重新上传到Arduino
- en: Made sure that you have Python and the Python packages (`pySerial` and `pyFirmata`)
    installed on your computer
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保您的计算机上已安装 Python 和 Python 包（`pySerial` 和 `pyFirmata`）
- en: Obtained a text editor to write Python codes
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 获取一个文本编辑器来编写 Python 代码
- en: Working with Python executable files
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 可执行文件
- en: In the previous chapters, we explored Python programming using the interactive
    Python interpreter. However, when working with large projects, it is very difficult
    to keep using the Python interactive interpreter for repetitive tasks. Like other
    programming languages, the preferred method is to create Python executable files
    and run them from the terminal.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们使用交互式 Python 解释器探索了 Python 编程。然而，当处理大型项目时，很难继续使用 Python 交互式解释器进行重复性任务。与其他编程语言一样，首选的方法是创建
    Python 可执行文件并在终端中运行它们。
- en: 'Python executable files carry the `.py` extension and are formatted as plain
    text. Any text editor can be used to create these files. The popular editors used
    to create and edit Python files are Notepad++, nano, vi, and so on. This list
    also includes the default editor that is shipped with the Python setup files called
    IDLE. You can use the editor of your choice, but make sure that you save the files
    with the `.py` extension. Let''s copy the following lines of code in a new file
    and save it as `test.py`:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: Python 可执行文件带有 `.py` 扩展名，格式为纯文本。任何文本编辑器都可以用来创建这些文件。常用的编辑器包括 Notepad++、nano、vi
    等。此列表还包括与 Python 安装文件一起提供的默认编辑器 IDLE。您可以使用您选择的编辑器，但请确保将文件保存为 `.py` 扩展名。让我们将以下代码行复制到一个新文件中，并将其保存为
    `test.py`：
- en: '[PRE6]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'To run this file, execute the following command on the terminal where the `test.py`
    file is saved:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行此文件，请在保存 `test.py` 文件的终端上执行以下命令：
- en: '[PRE7]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'You should be able to see the text `Python Programming` printed on the terminal.
    As you can see, the file starts with `#!/usr/bin/python`, which is the default
    Python installation location. By adding this line in your Python code, you can
    directly execute a Python file from the terminal. In Unix-based operating systems,
    you need to make the `test.py` file executable through the following command:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 您应该在终端上看到打印的文本 `Python Programming`。如您所见，文件以 `#!/usr/bin/python` 开头，这是默认的 Python
    安装位置。通过在您的 Python 代码中添加此行，您可以直接从终端执行 Python 文件。在基于 Unix 的操作系统中，您需要通过以下命令使 `test.py`
    文件可执行：
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Now, as your file is executable, you can directly run the file using the following
    command:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，由于您的文件是可执行的，您可以直接使用以下命令运行该文件：
- en: '[PRE9]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Note
  id: totrans-138
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: 'For Unix-based operating systems, an alternative way to provide the Python
    interpreter location is to use the following line of code instead of the one that
    we used:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 对于基于 Unix 的操作系统，提供 Python 解释器位置的另一种方法是使用以下代码行，而不是我们之前使用的代码行：
- en: '[PRE10]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In Windows operating systems, Python files automatically become executable because
    of the `.py` extension. You can just run the program files by double-clicking
    and opening them.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Windows 操作系统中，Python 文件由于 `.py` 扩展名而自动成为可执行文件。您只需双击并打开程序文件即可运行程序。
- en: The Python code
  id: totrans-142
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Python 代码
- en: 'As you now know how to create and run Python code, let''s create a new Python
    file with the following code snippet and run it. Make sure to change the value
    of the `port` variable according to your operating system, as described in the
    previous chapter:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 如您现在所知，如何创建和运行 Python 代码，让我们创建一个新的 Python 文件，并使用以下代码片段运行它。请确保根据前一章所述，根据您的操作系统更改
    `port` 变量的值：
- en: '[PRE11]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You have successfully created and executed your first Arduino project using
    Python. There are two main programming components in this code: `pyFirmata` methods
    and the Python function to perform the blinking action. The program repeatedly
    detects the motion events and performs the blinking action. In the previous section,
    this problem was solved by using the default Arduino function `loop()`. In this
    method, we have implemented the `while` statement to keep the program in loop
    until the code is manually terminated by the user. You can terminate the code
    using the keyboard combination *Ctrl* + *C*.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 您已成功使用 Python 创建并执行了您的第一个 Arduino 项目。此代码中有两个主要的编程组件：`pyFirmata` 方法以及执行闪烁动作的
    Python 函数。程序会重复检测运动事件并执行闪烁动作。在前一节中，我们通过使用默认的 Arduino 函数 `loop()` 解决了这个问题。在此方法中，我们实现了
    `while` 语句以使程序在代码被用户手动终止前保持循环。您可以使用键盘组合 *Ctrl* + *C* 终止代码。
- en: Working with pyFirmata methods
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 pyFirmata 方法
- en: 'As part of working with the Arduino board and the Firmata protocol, you have
    to start by initializing the Arduino board as a variable. The `pyFirmata` method
    that lets a user assign the board to a Python variable is as follows:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 作为使用 Arduino 板和 Firmata 协议的一部分，你必须首先将 Arduino 板初始化为变量。允许用户将板分配给 Python 变量的 `pyFirmata`
    方法如下：
- en: '[PRE12]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Once the value of the variable is assigned, you can perform various actions
    such as reading a pin or sending a signal to the pin using that variable. To assign
    a role to a pin, the `get_pin()` method is used. In the following line of code,
    `d` represents the digital pin, `7` is the pin number, and `i` represents that
    the type of pin is an input pin:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦变量的值被分配，你可以执行各种操作，例如使用该变量读取引脚或向引脚发送信号。要分配引脚的角色，使用 `get_pin()` 方法。在以下代码行中，`d`
    代表数字引脚，`7` 是引脚号，`i` 代表该引脚类型是输入引脚：
- en: '[PRE13]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Once a pin and its role are assigned to a variable, that variable can be used
    to read or write values on the pin:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将引脚及其角色分配给变量，该变量就可以用来读取或写入引脚上的值：
- en: '[PRE14]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'One can directly write data to a specific pin, as described in following code:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 可以直接将数据写入特定的引脚，如下面的代码所示：
- en: '[PRE15]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Here, the `write(1)` method sends a `HIGH` signal to the pin. We will be learning
    additional `pyFirmata` methods in the upcoming chapters.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`write(1)` 方法向引脚发送 `HIGH` 信号。我们将在接下来的章节中学习更多的 `pyFirmata` 方法。
- en: Working with Python functions
  id: totrans-156
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Python 函数
- en: 'A Python function begins with the `def` keyword followed by the function name
    and the input parameters or arguments. The function definition ends with a colon
    (`:`) and it is indented afterwards. The `return` statement terminates the function.
    It also passes the expression to the place where the function is called. If the
    `return` statement is kept without an expression, it is considered to pass the
    return value `None`:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: Python 函数以 `def` 关键字开头，后跟函数名和输入参数或参数。函数定义以冒号（`:`）结束，之后进行缩进。`return` 语句终止函数。它还将表达式传递到函数被调用的位置。如果没有表达式，`return`
    语句被认为是传递返回值 `None`：
- en: '[PRE16]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The preceding framework can be used to create custom functions to perform recurring
    tasks. In our project, we have the `blinkLED(pin, message)` function to perform
    the blinking LED action. This function sends `1` (`HIGH`) and `0` (`LOW`) value
    to the specified digital pin while also printing `message` on the terminal. It
    also introduces delay to simulate the blinking action:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的框架可以用来创建自定义函数以执行重复任务。在我们的项目中，我们有 `blinkLED(pin, message)` 函数来执行闪烁 LED 操作。此函数向指定的数字引脚发送
    `1` (`HIGH`) 和 `0` (`LOW`) 值，同时在终端打印 `message`。它还引入延迟来模拟闪烁动作：
- en: '[PRE17]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: Testing
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 测试
- en: 'You can start testing the project as soon as you run the Python code on the
    terminal. If everything goes according to design, you should be able to see the
    following output in the terminal:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在终端上运行 Python 代码后立即开始测试项目。如果一切按设计进行，你应该能在终端看到以下输出：
- en: '![Testing](img/5938OS_03_08.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![测试](img/5938OS_03_08.jpg)'
- en: You should be able to see the `Motion Detected` string on the terminal when
    any motion is detected by the PIR sensor. If you find any abnormal behavior in
    the output, then please check the Python code.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 当 PIR 传感器检测到任何运动时，你应该能在终端上看到 `Motion Detected` 字符串。如果你在输出中找到任何异常行为，请检查 Python
    代码。
- en: A benefit of using Python is that minor modifications such as changing the blinking
    speed or swapping roles of the LEDs can be performed by just changing the Python
    code, without dealing with the Arduino or the electrical circuit.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 的好处是，如更改闪烁速度或交换 LED 角色等小修改，只需更改 Python 代码即可完成，无需处理 Arduino 或电路。
- en: Troubleshooting
  id: totrans-166
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 故障排除
- en: 'When you run the project, you might require troubleshooting for the following
    probable problems:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 当你运行项目时，你可能需要解决以下可能的问题：
- en: 'Serial output is correct, but there are no blinking LEDs:'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 串行输出正确，但没有闪烁的 LED：
- en: Check the LED connections on the breadboard
  id: totrans-169
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查面包板上的 LED 连接
- en: 'The LED blinks, but there is no serial output:'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: LED 闪烁，但没有串行输出：
- en: Check whether you have successfully installed the standard Firmata sketch to
    the board
  id: totrans-171
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查你是否已成功将标准 Firmata 草图安装到板上
- en: 'There is no serial output and no blinking LEDs:'
  id: totrans-172
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果没有串行输出和闪烁的 LED：
- en: Check whether any program other than Python is using the serial port. Close
    any program that might be using that serial port, including the Arduino IDE.
  id: totrans-173
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 检查是否有除 Python 之外的其他程序正在使用串行端口。关闭可能正在使用该串行端口的任何程序，包括 Arduino IDE。
- en: Verify all the circuit connections.
  id: totrans-174
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 验证所有电路连接。
- en: Make sure that the port name specified in the Python code is correct.
  id: totrans-175
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: 确保在Python代码中指定的端口号是正确的。
- en: Summary
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Between the two programming methods that you learned in this chapter, the method
    that uses just an Arduino sketch represents the traditional paradigm of programming
    a microcontroller. While this method is simple to implement, it lacks the extensiveness
    that is achieved by Python-Arduino interfacing. Although we will use extensive
    Arduino coding in all the projects beginning from now, exercises and projects
    will have Python-Arduino interfacing as the primary way of programming.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中你学习到的两种编程方法中，仅使用Arduino脚本的这种方法代表了传统的微控制器编程范式。虽然这种方法实现起来简单，但它缺乏通过Python-Arduino接口获得的广泛性。尽管从现在开始的所有项目都将使用广泛的Arduino编程，但练习和项目将以Python-Arduino接口作为主要的编程方式。
- en: Starting from the next chapter, we are going to explore the additional aspects
    of Python programming that can extend the usability of an Arduino-based hardware
    project while keeping the programming difficulty levels to a minimum. We will
    begin with Python-Arduino prototyping and then create graphical interfaces for
    user interaction, before stopping for the second project that utilizes these concepts.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 从下一章开始，我们将探索可以扩展基于Arduino硬件项目可用性的Python编程的额外方面，同时将编程难度保持在最低。我们将从Python-Arduino原型设计开始，然后创建用于用户交互的图形界面，在完成第二个项目，该项目利用了这些概念之前停止。
