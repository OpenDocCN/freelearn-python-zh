["```py\ndef prod(sequence):\n    p= 1\n    for item in sequence:p *= item\n    return p\n```", "```py\n>>> prod([1,2,3,4])\n24\n>>> prod(range(1,6))\n120\n```", "```py\ndef main_sail_area(boom, mast):\n    return (boom*mast)/1.8\n```", "```py\n>>> main_sail_area(15, 45)\n375.0\n```", "```py\ndef boat_summary(name, rig, sails):\n    print( \"Boat {0}, {1} rig, {2:.0f} sq. ft.\".format(\n        name, rig, sum(sails))\n    )\n```", "```py\ndef mean_diff(data_sequence):\n    s0, s1 = 0, 0\n    for item in data_sequence:\n        s0 += 1\n        s1 += item\n    if s0 < 2:\n        return\n    m= s1/s0\n    for item in data_sequence:\n       print(item, abs(item-m))\n```", "```py\n>>> sails =  [358.3, 192.5, 379.75, 200.0]\n>>> boat_summary(\"Red Ranger\", \"ketch\", sails)\n```", "```py\n>>> boat_summary(sails=sails, rig=\"ketch\", name=\"Red Ranger\" )\n```", "```py\n>>> boat_summary(\"Red Ranger\", sails=sails, rig=\"ketch\")\n>>> boat_summary(\"Red Ranger\", sails=sails, rig=\"ketch\", name=\"Red Ranger\")\n```", "```py\ndef jib(foot, height):\n    \"\"\"\n    jib(foot,height) -> area of given jib sail.\n\n    >>> jib(12,40)\n    240.0\n    \"\"\"\n    return (foot*height)/2\n```", "```py\ndef get_data(input_string):\n    input_string= input_string.strip()\n    input_string, _, _ = input_string.partition(\"#\")\n    input_string= input_string.rstrip()\n    name, _, value = input_string.partition('=')\n    return name, value\n```", "```py\ndef remove_mod(some_list, modulus):\n    for item in some_list[:]:\n        if item % modulus == 0:\n            some_list.remove(item)\n```", "```py\n>>> data= list(range(10))\n>>> remove_mod(data, 5)\n>>> remove_mod(data, 7)\n>>> data\n[1, 2, 3, 4, 6, 8, 9]\n```", "```py\nimport random\ndef dice(n=2, sides=6):\n    return [random.randint(1,sides) for i in range(n)]\n```", "```py\n>>> dice()\n[6, 6]\n>>> dice(6)\n[3, 6, 2, 2, 1, 5]\n>>> dice(4, sides=4)\n[3, 3, 4, 3]\n```", "```py\ndef more_dice(n, collection=[]):\n    for i in range(n):\n        collection.append(random.randint(1,6))\n    return collection\n```", "```py\n>>> hand1= []\n>>> more_dice(5, hand1)\n[6, 6, 3, 6, 2]\n>>> hand1\n[6, 6, 3, 6, 2]\n```", "```py\n>>> hand2= []\n>>> more_dice(5, hand2)\n[5, 4, 2, 2, 5]\n>>> hand2\n[5, 4, 2, 2, 5]\n```", "```py\n>>> hand1= more_dice(5)\n>>> hand1\n[6, 6, 3, 6, 2]\n>>> hand2= more_dice(5)\n>>> hand2\n[6, 6, 6, 2, 1, 5, 4, 2, 2, 5]\n```", "```py\ndef more_dice_good(n, collection=None):\n    if collection is None:\n        collection = []\n    for i in range(n):\n        collection.append(random.randint(1,6))\n    return collection\n```", "```py\n>>> prod2(1, 2, 3, 4)\n24\n```", "```py\n>>> prod([1, 2, 3, 4])\n24\n```", "```py\ndef prod2(*args):\n    p= 1\n    for item in args:\n        p *= item\n    return p\n```", "```py\ndef boat_summary2(name, rig, **sails):\n    print(\"Boat {0}, {1} rig, {2:.0f} sq. ft.\".format(\nname, rig, sum(sails.values())))\n```", "```py\n>>> boat_summary2(\"Red Ranger\", rig=\"ketch\",\n...     main=358.3, mizzen=192.5, yankee=379.75, staysl=200 )\n```", "```py\n{'main': 358.3, 'mizzen': 192.5, 'yankee': 379.75, 'staysl': 200}\n```", "```py\n>>> rr_args = dict(\n...    name=\"Red Ranger\", rig=\"ketch\",\n...    main=358.3, mizzen=192.5, yankee=379.75, staysl=200\n... )\n>>> boat_summary2(**rr_args)\nBoat Red Ranger, ketch rig, 1131 sq. ft.\n```", "```py\nimport random\ndef roll_dice_count_7():\n    global sevens\n    d= random.randint(1,6), random.randint(1,6)\n    if d[0] + d[1] == 7:\n        sevens += 1\n    return d\n```", "```py\nglobals={'__cached__': None,\n'__loader__': <_frozen_importlib.SourceFileLoader object at 0x100623750>,\n'sevens': 20,\n'__name__': '__main__',\n'__file__': '…',\n… etc.\n    'roll_dice_count_7': <function roll_dice_count_7 at 0x10216e710>,\n    'random': <module 'random' from '...'>}\nlocals={'d': (2, 1)}\n```", "```py\ndef roll_nl(n=2, d=6):\n    def dice():\n        nonlocal total\n        points= tuple(random.randint(1,d) for _ in range(n))\n        total = sum(points)\n        return points\n    total= 0\n    dice()\n    return total\n```", "```py\nlambda x: x[0]+x[1]\n```", "```py\n>>> colors = [\n... (255,160,137),\n... (143, 80,157),\n... (255,255,255),\n... (162,173,208),\n... (255, 67,164),\n... ]\n>>> sorted(colors)\n[(143, 80, 157), (162, 173, 208), (255, 67, 164),\n  (255, 160, 137), (255, 255, 255)]\n>>> sorted(colors,\n...     key= lambda rgb: (rgb[0]+rgb[1]+rgb[2])/3)\n[(143, 80, 157), (255, 67, 164), (162, 173, 208),\n  (255, 160, 137), (255, 255, 255)]\n```", "```py\ndef brightness(rgb):\n    return (rgb[0]+rgb[1]+rgb[2])/3\n```", "```py\ndef roller( n: int, d: int = 6 ) -> tuple:\n    return tuple(random.randint(1,d) for _ in range(n))\n```"]