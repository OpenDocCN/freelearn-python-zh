["```py\n<h1>{{ post.title }}</h1> \n```", "```py\n<h1>First Post</h1> \n```", "```py\n{{ your_dict['key'] }} \n{{ your_list[0] }} \n```", "```py\n{% raw %} \n<script id=\"template\" type=\"text/x-handlebars-template\"> \n  <h1>{{title}}</h1> \n  <div class=\"body\"> \n    {{body}} \n  </div> \n</script> \n{% endraw %} \n```", "```py\n{{ variable | filter_name(*args) }} \n```", "```py\n{{ variable | filter_name }} \n```", "```py\n{% filter filter_name %} \n  A bunch of text \n{% endfilter %} \n```", "```py\n{{ post.date | default('2015-01-01') }} \n2015-01-01 \n```", "```py\n{{ '' | default('An empty string', True) }} \nAn empty string\n```", "```py\n{{ \"<h1>Title</h1>\" | escape }} \n<h1>Title</h1> \n```", "```py\n{{ 75 | float }} \n75.0 \n```", "```py\n{{ 75.7 | int }} \n75 \n```", "```py\n{{ ['Python', 'SQLAlchemy'] | join(',') }} \nPython, SQLAlchemy \n```", "```py\nTag Count: {{ post.tags | length }} \nTag Count: 2 \n```", "```py\n{{ 3.141592653589793238462 | round(1) }} \n3.1 \n```", "```py\n{{ 4.7 | round(1, \"common\") }} \n5 \n{{ 4.2 | round(1, \"common\") }} \n4 \n{{ 4.7 | round(1, \"floor\") }} \n4 \n{{ 4.2 | round(1, \"ceil\") }} \n5 \n```", "```py\n{{ \"<h1>Post Title</h1>\" }} \n<h1>Post Title</h1> \n```", "```py\n{{ \"<h1>Post Title</h1>\" | safe }} \n<h1>Post Title</h1> \n```", "```py\n{{ \"post title\" | title }} \nPost Title \n```", "```py\n{{ {'key': False, 'key2': None, 'key3': 45} | tojson }} \n{key: false, key2: null, key3: 45} \n```", "```py\nvar collection = new PostCollection({{ posts | tojson | safe }}); \n```", "```py\n{{ \"A Longer Post Body Than We Want\" | truncate(10) }} \nA Longer... \n```", "```py\n{{ \"A Longer Post Body Than We Want\" | truncate(10, True) }} \nA Longer P... \n```", "```py\n{{ variable | count_substring(\"string\") }} \n```", "```py\ndef count_substring(variable, sub_string) \n```", "```py\n@app.template_filter\ndef count_substring(string, sub_string): return string.count(sub_string)\n```", "```py\n{# Note to the maintainers of this code #} \n```", "```py\n{%if user.is_logged_in() %} \n  <a href='/logout'>Logout</a> \n{% else %} \n  <a href='/login'>Login</a> \n{% endif %} \n```", "```py\n{% if comments | length > 0 %} \n  There are {{ comments | length }} comments \n{% else %} \n  There are no comments \n{% endif %} \n```", "```py\n{% for post in posts %} \n  <div> \n    <h1>{{ post.title }}</h1> \n    <p>{{ post.text | safe }}</p> \n  </div> \n{% endfor %} \n```", "```py\n{% for post in posts if post.text %}\n  <div>\n    <h1>{{ post.title }}</h1>\n    <p>{{ post.text | safe }}</p>\n  </div>\n{% endfor %}\n```", "```py\n{% for post in posts %} \n  {{ loop.index }}. {{ post.title }} \n{% endfor %} \n```", "```py\n1\\. Post Title \n2\\. Second Post \n```", "```py\n{% for post in posts %} \n  {{ loop.cycle('odd', 'even') }} {{ post.title }} \n{% endfor %} \n```", "```py\nodd Post Title \neven Second Post \n```", "```py\n{% macro input(name, label, value='', type='text') %} \n  <div class=\"form-group\"> \n    <label for\"{{ name }}\">{{ label }}</label> \n    <input type=\"{{ type }}\" name=\"{{ name }}\" \n      value=\"{{ value | escape }}\" class=\"form-control\"> \n  </div> \n{% endmacro %} \n```", "```py\n{{ input('name', 'Name') }} \n```", "```py\n<div class=\"form-group\"> \n  <label for\"name\">Name</label> \n  <input type=\"text\" name=\"name\" value=\"\" class=\"form-control\"> \n</div> \n```", "```py\n{{ config.SQLALCHEMY_DATABASE_URI }} \nsqlite:///database.db \n```", "```py\n{{ request.url }} \nhttp://127.0.0.1/ \n```", "```py\n{{ session.new }} \nTrue \n```", "```py\n{{ url_for('home') }} \n/ \n```", "```py\n@app.route('/')\ndef home():\n...\n```", "```py\n{{ url_for('post', post_id=1) }}\n/post/1\n```", "```py\n@app.route('/post/<int:post_id>', methods=('GET', 'POST'))\ndef post(post_id):\n...\n```", "```py\n{% with messages = get_flashed_messages(with_categories=true) %}\n    {% if messages %}\n        {% for category, message in messages %}\n        <div class=\"alert alert-{{ category }} alert-dismissible\"               \n       role=\"alert\">\n        <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-   \n   label=\"Close\"><span aria-hidden=\"true\">&times;</span></button>\n            {{ message }}\n        </div>\n        {% endfor %}\n    {% endif %}\n{% endwith %}\n```", "```py\n@app.route('/post/<int:post_id>', methods=('GET', 'POST'))\ndef post(post_id):\n...\n    db.session.commit()\n    flash(\"New post added.\", 'info')\n...\n```", "```py\nfrom sqlalchemy import func \n... \ndef sidebar_data(): \n  recent = Post.query.order_by( \n    Post.publish_date.desc() \n  ).limit(5).all() \n  top_tags = db.session.query( \n    Tag, func.count(tags.c.post_id).label('total') \n  ).join( \n    tags \n  ).group_by(Tag).order_by('total DESC').limit(5).all() \n\n  return recent, top_tags \n```", "```py\nfrom flask import Flask, render_template \n...\n@app.route('/')\n@app.route('/<int:page>')\ndef home(page=1):\n    posts = Post.query.order_by(Post.publish_date.desc()).paginate(page, app.config['POSTS_PER_PAGE'], False)\n    recent, top_tags = sidebar_data()\n\n    return render_template(\n        'home.html',\n        posts=posts,\n        recent=recent,\n        top_tags=top_tags\n    )\n```", "```py\n@app.route('/post/<int:post_id>') \ndef post(post_id)\n....\n@app.route('/posts_by_tag/<string:tag_name>') \ndef posts_by_tag(tag_name): \n...\n@app.route('/posts_by_user/<string:username>') \ndef posts_by_user(username): \n...\n```", "```py\n@app.route('/post/<int:post_id>') \ndef post(post_id)\n    post = Post.query.get_or_404(post_id)\n```", "```py\n@app.route('/posts_by_user/<string:username>') \ndef posts_by_user(username): \n  user = User.query.filter_by(username=username).first_or_404() \n  posts = user.posts.order_by(Post.publish_date.desc()).all() \n  recent, top_tags = sidebar_data() \n\n  return render_template( \n    'user.html', \n    user=user, \n    posts=posts, \n    recent=recent, \n    top_tags=top_tags \n  ) \n```", "```py\n\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n    <title>{% block title %}Blog{% endblock %}</title>\n    <link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.1.0/css/bootstrap.min.css\" integrity=\"sha384-9gVQ4dYFwwWSjIDZnLEWnxCjeSWFphJiwGPXr1jddIhOegiu1FwO5qRGvFXOdJZ4\" crossorigin=\"anonymous\">\n    <link rel=\"stylesheet\" href=\"https://use.fontawesome.com/releases/v5.0.10/css/all.css\" integrity=\"sha384-+d0P83n9kaQMCwj8F4RJB66tzIwOKmrdb46+porD/OvrJ+37WqIM7UoBtwHO6Nlg\" crossorigin=\"anonymous\">\n</head>\n<body>\n{% include 'navbar.html' %}\n<div class=\"container\">\n    <div class=\"row row-lg-4\">\n        <div class=\"col\">\n            {% block head %}\n {% include 'head.html' %}\n {% endblock %}\n        </div>\n    </div>\n    {% include 'messages.html' %}\n {% block body %}\n    <div class=\"row\">\n        <div class=\"col-lg-9\">\n            {% block leftbody %}\n {% endblock %}\n        </div>\n        <div class=\"col-lg-3 rounded\">\n            {% block rightbody %}\n {% include 'rightbody.html' %}\n {% endblock %}\n        </div>\n    </div>\n    {% endblock %}\n {% include 'footer.html' %}\n</div>\n</body>\n<script src=\"img/jquery-3.3.1.slim.min.js\" integrity=\"sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo\" crossorigin=\"anonymous\"></script>\n<script src=\"img/popper.min.js\" integrity=\"sha384-cs/chFZiN24E4KMATLdqdvsezGxaGsi4hLGOzlXwp5UZB1LY//20VyM2taTB4QvJ\" crossorigin=\"anonymous\"></script>\n<script src=\"img/bootstrap.min.js\" integrity=\"sha384-uefMccjFJAIv6A+rW+L4AHf99KvxDjWSu1z9VI8SKNVmz4sk7buKt/6v9KI65qnm\" crossorigin=\"anonymous\"></script>    </body>\n</html>\n\n```", "```py\n{% extends \"base.html\" %}\n{% import 'macros.html' as macros %}\n{% block title %}Home{% endblock %}\n{% block leftbody %}\n{{ macros.render_posts(posts) }}\n{{ macros.render_pagination(posts, 'home') }}\n{% endblock %}\n```", "```py\n{% macro render_posts(posts, pagination=True) %}\n...\n{% for post in _posts %}\n<div >\n    <h1>\n        <a class=\"text-dark\" href=\"{{ url_for('post', post_id=post.id) }}\">{{ post.title }}</a>\n    </h1>\n</div>\n<div class=\"row\">\n    <div class=\"col\">\n        {{ post.text | truncate(500) | safe }}\n        <a href=\"{{ url_for('post', post_id=post.id) }}\">Read More</a>\n    </div>\n</div>\n{% endfor %}\n{% endmacro %}\n```", "```py\n{% extends \"base.html\" %}\n{% import 'macros.html' as macros %}\n\n{% block title %}{{ tag.title }}{% endblock %}\n{% block leftbody %}\n<div class=\"row\">\n    <div class=\"col bg-light\">\n        <h1 class=\"text-center\">Posts With Tag {{ tag.title }}</h1>\n    </div>\n</div>\n{{ macros.render_posts(posts, pagination=False) }}\n\n{% endblock %}\n```", "```py\n$ ./init.sh\n.... $ source venv/bin/activate $ export FLASK_APP=main.py; flask run\n```", "```py\nimport logging\nfrom main import db\nfrom main import User, Post, Tag\nfrom faker import Faker\n...\n\ndef generate_users(n):\n    users = list()\n    for i in range(n):\n        user = User()\n        user.username = faker.name()\n        user.password = \"password\"\n        try:\n            db.session.add(user)\n            db.session.commit()\n            users.append(user)\n        except Exception as e:\n            log.error(\"Fail to add user %s: %s\" % (str(user), e))\n            db.session.rollback()\n    return users\n```", "```py\n$ python\n>>> import os\n>>> os.urandom(24)        '\\xa8\\xcc\\xeaP+\\xb3\\xe8|\\xad\\xdb\\xea\\xd0\\xd4\\xe8\\xac\\xee\\xfaW\\x072@O3'\n```", "```py\nclass ProdConfig(object): \n  SECRET_KEY = 'Your secret key here'\n....\nclass DevConfig(object): \n  SECRET_KEY = 'The other secret key here'\n....\n```", "```py\nfrom flask_wtf import FlaskForm as Form \nfrom wtforms import StringField, TextAreaField \nfrom wtforms.validators import DataRequired, Length \n... \nclass CommentForm(Form): \n  name = StringField( \n    'Name', \n    validators=[DataRequired(), Length(max=255)] \n  ) \n  text = TextAreaField(u'Comment', validators=[DataRequired()]) \n```", "```py\nimport re \nimport wtforms \ndef custom_email(form, field): \n  if not re.match(r\"[^@]+@[^@]+.[^@]+\", field.data): \n    raise wtforms.ValidationError('Field must be a valid email \n       address.')\n```", "```py\n@app.route('/post/<int:post_id>', methods=('GET', 'POST'))\ndef post(post_id):\n    form = CommentForm()\n    if form.validate_on_submit():\n        new_comment = Comment()\n        new_comment.name = form.name.data\n        new_comment.text = form.text.data\n        new_comment.post_id = post_id\n        try:\n            db.session.add(new_comment)\n            db.session.commit()\n        except Exception as e:\n            flash('Error adding your comment: %s' % str(e), 'error')\n            db.session.rollback()\n        else:\n            flash('Comment added', 'info')\n        return redirect(url_for('post', post_id=post_id))\n\n    post = Post.query.get_or_404(post_id)\n    tags = post.tags\n    comments = post.comments.order_by(Comment.date.desc()).all()\n    recent, top_tags = sidebar_data()\n\n    return render_template(\n        'post.html',\n        post=post,\n        tags=tags,\n        comments=comments,\n        recent=recent,\n        top_tags=top_tags,\n        form=form\n    )\n```", "```py\n<div class=\"p-4 shadow-sm\">\n    <div class=\"row\">\n        <div class=\"col\">\n            <h4>New Comment:</h4>\n        </div>\n    </div>\n    <div class=\"row\">\n        <div class=\"col\">\n <form method=\"POST\" action=\"{{ url_for('post', \n            post_id=post.id) }}\">\n                {{ form.hidden_tag() }}\n                <div class=\"form-group\">\n                    {{ form.name.label }}\n                    {% if form.name.errors %}\n {% for e in form.name.errors %}\n                            <p class=\"help-block\">{{ e }}</p>\n                        {% endfor %}\n {% endif %}\n {{ form.name(class_='form-control') }}\n                </div>\n                <div class=\"form-group\">\n                    {{ form.text.label }}\n {% if form.text.errors %}\n                        {% for e in form.text.errors %}\n                            <p class=\"help-block\">{{ e }}</p>\n                        {% endfor %}\n {% endif %}\n {{ form.text(class_='form-control') }}\n                </div>\n                <input class=\"btn btn-primary\" type=\"submit\" value=\"Add \n              Comment\">\n            </form>\n        </div>\n    </div>\n</div>\n```"]