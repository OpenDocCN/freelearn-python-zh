["```py\ndef add(a,b):    \n```", "```py\n    c = a + b    \n```", "```py\n    return c  \n```", "```py\nadd(1,3)  \n```", "```py\n4\n```", "```py\nadd('meta','program')   \n```", "```py\nmetaprogram\n```", "```py\nadd('meta',1)  \n```", "```py\nadd('meta',1)  \n```", "```py\ndef add(a,b):    \n```", "```py\n    c = a +  b    \n```", "```py\n    print (\"Metadata of add\", type(add))    \n```", "```py\n    print (\"Metadata of a\", type(a))    \n```", "```py\n    print (\"Metadata of b\", type(b))    \n```", "```py\n    print (\"Metadata of c\", type(c))   \n```", "```py\nadd(1,3)  \n```", "```py\nMetadata of add <class 'function'>\n```", "```py\nMetadata of a <class 'int'>\n```", "```py\nMetadata of b <class 'int'>\n```", "```py\nMetadata of c <class 'int'>\n```", "```py\nadd('test','string')\n```", "```py\nMetadata of add <class 'function'>\n```", "```py\nMetadata of a <class 'str'>\n```", "```py\nMetadata of b <class 'str'>\n```", "```py\nMetadata of c <class 'str'>\n```", "```py\ndef add(a,b):\n```", "```py\n    if (type(a) is str and type(b) is int) or\\\n```", "```py\n        (type(a) is int and type(b) is str):\n```", "```py\n        return \"Please enter both input values as integers or\\\n```", "```py\n          string\"\n```", "```py\n    else:\n```", "```py\n        c = a + b\n```", "```py\n        return c  \n```", "```py\nadd(1,3)  \n```", "```py\n4\n```", "```py\nadd('meta','program')  \n```", "```py\nmetaprogram\n```", "```py\nadd('meta',1)  \n```", "```py\n'Please enter both input values as integers or string'\n```", "```py\nadd(1,'meta')  \n```", "```py\n'Please enter both input values as integers or string'\n```", "```py\ndef add(a,b):\n```", "```py\n    if type(a) is int and type(b) is int:\n```", "```py\n        c = a +  b\n```", "```py\n        return c\n```", "```py\n    elif type(a) is str and type(b) is int or\\\n```", "```py\n          type(a) is int and type(b) is str or \\\n```", "```py\n          type(a) is str and type(b) is str:\n```", "```py\n        c = str(a) + str(b)\n```", "```py\n        return c\n```", "```py\n    else:\n```", "```py\n        print(\"Please enter string or integer\")\n```", "```py\nadd(1343,35789)  \n```", "```py\n37132\n```", "```py\nadd('Meta',' Programming')  \n```", "```py\n'MetaProgramming'\n```", "```py\nadd('meta',157676)  \n```", "```py\n'meta157676'\n```", "```py\nadd(65081, 'meta')  \n```", "```py\n'65081meta'\n```", "```py\nadd(True, 'meta')\n```", "```py\nPlease enter string or integer\n```", "```py\ndef add(a,b):\n```", "```py\n    if type(a) is int and type(b) is int or\\\n```", "```py\n       type(a) is float and type(b) is float or\\\n```", "```py\n       type(a) is int and type(b) is float or\\\n```", "```py\n       type(a) is float and type(b) is int:\n```", "```py\n        c = a +  b\n```", "```py\n        return c\n```", "```py\n    else:\n```", "```py\n        return 'Please input numbers'\n```", "```py\nadd(15443,675683)  \n```", "```py\n691126\n```", "```py\nadd(54381,3.7876)  \n```", "```py\n54384.7876\n```", "```py\nadd(6.7754,543.76)  \n```", "```py\n550.5354\n```", "```py\nadd(79894,0.6568)  \n```", "```py\n79894.6568\n```", "```py\nadd('meta',14684)  \n```", "```py\n'Please input numbers'\n```", "```py\nadd(6576,'meta')  \n```", "```py\n'Please input numbers'\n```", "```py\nadd('meta','program')  \n```", "```py\n'Please input numbers'\n```", "```py\ndef add(a,b):  \n```", "```py\n    c = a + b  \n```", "```py\n    return c  \n```", "```py\ndef sub(a,b):  \n```", "```py\n    c = a - b  \n```", "```py\n    return c  \n```", "```py\ndef multiply(a,b):  \n```", "```py\n    c = a * b  \n```", "```py\n    return c  \n```", "```py\ndef divide(a,b):  \n```", "```py\n    c = a / b  \n```", "```py\n    return c  \n```", "```py\nadd(2,5)  \n```", "```py\n7\n```", "```py\nsub(2,5)  \n```", "```py\n-3\n```", "```py\nmultiply(2,5)  \n```", "```py\n10\n```", "```py\ndivide(2,5)  \n```", "```py\n0.4\n```", "```py\nimport operator as op\n```", "```py\ndef arithmetic(a, b, operation):\n```", "```py\n    result = operation(a, b)\n```", "```py\n    return result\n```", "```py\narithmetic('2', '5', op.add) '25'\n```", "```py\narithmetic(2, 5, op.add)\n```", "```py\n7\n```", "```py\narithmetic(2 , 5, op.sub)\n```", "```py\n-3\n```", "```py\narithmetic(2, 5, op.mul)\n```", "```py\n10\n```", "```py\narithmetic(2 , 5, op.truediv)\n```", "```py\n0.4\n```", "```py\nfrom types import FunctionType  \n```", "```py\nfunctionstring = '''\n```", "```py\ndef arithmetic(a, b):\n```", "```py\n    op = __import__('operator')\n```", "```py\n    result = op.add(a, b)\n```", "```py\n    return result\n```", "```py\n    '''  \n```", "```py\nprint(functionstring)\n```", "```py\n def arithmetic(a, b):\n```", "```py\n    op = __import__('operator')\n```", "```py\n    result = op.add(a, b)\n```", "```py\nreturn result \n```", "```py\nfunctiontemplate = compile(functionstring, 'functionstring', 'exec')  \n```", "```py\nfunctiontemplate \n```", "```py\n<code object <module> at 0x000001E20D498660, file \"functionstring\", line 1>\n```", "```py\nfunctiontemplate.co_consts[0]  \n```", "```py\n<code object arithmetic at 0x000001E20D4985B0, file \"functionstring\", line 1>\n```", "```py\ndynamicfunction = FunctionType(functiontemplate.co_consts[0], globals(),\"add\")\n```", "```py\ndynamicfunction  \n```", "```py\n<function _main_.arithmetic(a,b)> \n```", "```py\ndynamicfunction(2,5)  \n```", "```py\n7\n```", "```py\noperator = ['op.add','op.sub','op.mul','op.truediv','op.pow','op.mod', 'op.gt', 'op.lt'] \n```", "```py\nfunctionname = ['add','sub', 'multiply', 'divide', 'power',\\\n```", "```py\n 'modulus', 'greaterthan', 'lesserthan']  \n```", "```py\na = 2  \n```", "```py\nb = 5  \n```", "```py\ndef functiongenerator(functionname, operator, a,b):    \n```", "```py\n    from types import FunctionType    \n```", "```py\n    functionstring = []    \n```", "```py\n    for i in operator:    \n```", "```py\n        functionstring.append('''\n```", "```py\ndef arithmetic(a, b):\n```", "```py\n    op = __import__('operator')\n```", "```py\n    result = '''+ i + '''(a, b)\n```", "```py\n    return result\n```", "```py\n    ''')    \n```", "```py\n        functiontemplate = []    \n```", "```py\n    for i in functionstring:    \n```", "```py\n        functiontemplate.append(compile(i, 'functionstring', 'exec'))    \n```", "```py\n        dynamicfunction = []    \n```", "```py\n    for i,j in zip(functiontemplate,functionname):    \n```", "```py\n        dynamicfunction.append(FunctionType(i.co_consts[0], \\\n```", "```py\n          globals(), j))    \n```", "```py\n        functiondict = {}    \n```", "```py\n    for i,j in zip(functionname,dynamicfunction):    \n```", "```py\n        functiondict[i]=j    \n```", "```py\n    for i in dynamicfunction:    \n```", "```py\n        print (i(a,b))    \n```", "```py\n    return functiondict    \n```", "```py\nfuncdict = functiongenerator(functionname, operator, a,b)  \n```", "```py\n7\n```", "```py\n-3\n```", "```py\n10\n```", "```py\n0.4\n```", "```py\n32\n```", "```py\n2\n```", "```py\nFalse\n```", "```py\nTrue\n```", "```py\nfuncdict  \n```", "```py\n{'add': <function _main_.arithmetic(a,b)>,\n```", "```py\n 'sub': <function _main_.arithmetic(a,b)>,\n```", "```py\n 'multiply': <function _main_.arithmetic(a,b)>,\n```", "```py\n 'divide': <function _main_.arithmetic(a,b)>,\n```", "```py\n 'power': <function _main_.arithmetic(a,b)>,\n```", "```py\n 'modulus': <function _main_.arithmetic(a,b)>,\n```", "```py\n 'greaterthan': <function _main_.arithmetic(a,b)>,\n```", "```py\n 'lesserthan': <function _main_.arithmetic(a,b)>,} \n```", "```py\nfuncdict['divide'](a,b)  \n```", "```py\n0.4\n```"]