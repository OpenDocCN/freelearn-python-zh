["```py\nframe = QtWidgets.QFrame()\n```", "```py\n...\nclass UFrame(QtWidgets.QFrame):\n\n    def __init__(self, parent=None):\n        super(UFrame, self).__init__(parent)\n        self.setStyleSheet(\"background-color: %s;\" % (color[2],))\n...\n```", "```py\n...\nfrom u_style import UWid, UFrame\n...\n```", "```py\n...\n    def __init__(self, parent=None):\n        ...\n        self.frame1 = UFrame(self.twid3)\n        self.frame1.setLineWidth(3)\n        self.frame1.setFrameStyle(6)\n        self.frame2 = UFrame(self.twid3)\n        self.frame2.setLineWidth(3)\n        self.frame2.setFrameStyle(0)\n        self.lay1 = QtWidgets.QGridLayout()\n        self.lay1.addWidget(self.frame1, 0, 0, 1, 1)\n        self.lay1.addWidget(self.frame2, 0, 1, 1, 1)\n        self.twid3.setLayout(self.lay1)\n    ...\n...\n```", "```py\nlabel = QtWidgets.QLabel()\n```", "```py\n...\nclass UFonts(object):\n\n    def __init__(self, parent=None, ls=2.0, ws=2.0,\n                 family=\"Verdana\", size=12, weight=34):\n        self.font1 = QtGui.QFont() \n        self.font1.setLetterSpacing(QtGui.QFont.AbsoluteSpacing, ls)\n        self.font1.setWordSpacing(ws)\n        self.font1.setFamily(family)\n        self.font1.setPixelSize(size)\n        self.font1.setWeight(weight)\n...\n```", "```py\n...\nclass ULabel(QtWidgets.QLabel):\n\n    def __init__(self, parent=None):\n        super(ULabel, self).__init__(parent)\n        font = UFonts(ls=3.0, size=14, weight=59)\n        self.setFont(font.font1)\n        self.setStyleSheet(\"\"\"background-color: %s;\n                               color: %s;\"\"\"\n                               % (color[0], color[3]))\n...\n```", "```py\n...\nfrom u_style import UWid, UFrame, ULabel\n...\n```", "```py\n...\n    def __init__(self, parent=None):\n    ...\n        ...\n        self.label1 = ULabel(self.frame2)\n        self.label1.setText(\"User Information\")\n        self.label1.setAlignment(QtCore.Qt.AlignCenter)\n        ...\n        self.layfr2 = QtWidgets.QGridLayout()\n        self.layfr2.addWidget(self.label1, 0, 0, 1, 1)\n        self.frame2.setLayout(self.layfr2)\n    ...\n...\n```", "```py\nline_edit = QtWidgets.QLineEdit()\n```", "```py\n...\nclass ULineEd(QtWidgets.QLineEdit):\n\n    def __init__(self, parent=None, tmrgl=10,\n                 tmrgt=10, tmrgr=10, tmrgb=10,\n                 drg=True, bdr=5, bdw=1, bdc=color[3]):\n        super(ULineEd, self).__init__(parent)\n        self.setClearButtonEnabled(True)\n        self.setDragEnabled(drg)\n        self.setTextMargins(tmrgl, tmrgt, tmrgr, tmrgb)\n        self.bdr = bdr\n        self.bdw = bdw\n        self.bdc = bdc\n        font = UFonts(size=14, weight=59)\n        self.setFont(font.font1)\n        self.setStyleSheet(\n                \"\"\"background-color: %s; color: %s;\n                   border-radius: %spx; border-width: %spx;\n                   border-color: %s;\"\"\"  % (color[0],\n                   color[3], self.bdr, self.bdw, self.bdc))\n  ...\n```", "```py\n...\nfrom u_style import ULineEd\n...\n```", "```py\n...\ndef __init__(self, parent=None):\n    ...\n    self.line_ed1 = ULineEd(self.frame2)\n    self.line_ed1.setPlaceholderText(\"Full Name...\")\n    self.line_ed2 = ULineEd(self.frame2)\n    self.line_ed2.setPlaceholderText(\"Email...\")\n    self.line_ed3 = ULineEd(self.frame2)\n    self.line_ed3.setPlaceholderText(\"Password...\")\n    self.line_ed3.setEchoMode(QtWidgets.QLineEdit.Password)\n    self.layfr2 = QtWidgets.QGridLayout()\n    self.layfr2.addWidget(self.label1, 0, 0, 1, 1)\n    self.layfr2.addWidget(self.line_ed1, 1, 0, 1, 1)\n    self.layfr2.addWidget(self.line_ed2, 2, 0, 1, 1)\n    self.layfr2.addWidget(self.line_ed3, 3, 0, 1, 1)\n    ...\n...\n```", "```py\ntext_edit = QtWidgets.QTextEdit()\n```", "```py\n...\nclass UTextEd(QtWidgets.QTextEdit):\n\n    def __init__(self, parent=None, bgcolor=color[0], sbh=7,\n              sbv=7, sbc=color[1], tepad=7, tebgcolor=color[1],\n              tetxc=color[3], lh=14, bdr=5, bdw=1, bdc=color[3]):\n        super(UTextEd, self).__init__(parent)\n        self.setAcceptRichText(True)\n        self.setUndoRedoEnabled(True)\n        self.bgcolor, self.tebgcolor = bgcolor, tebgcolor\n        self.sbh, self.sbv, self.sbc  = sbh, sbv, sbc\n        self.tepad, self.tetxc, self.lh = tepad, tetxc, lh\n        self.bdr, self.bdw, self.bdc = bdr, bdw, bdc\n        font = UFonts(size=14, weight=59)\n        self.setFont(font.font1)\n        self.setStyleSheet(\n                 \"\"\"QWidget {background-color: %s;}\n                    QScrollBar:horizontal {width: %spx;\n                       height: %spx; background-color: %s;}\n                    QScrollBar:vertical {width: %spx;\n                       height: %spx; background-color: %s;}\n                    QTextEdit {padding: %spx;\n                       background-color: %s; color: %s;\n                       line-height: %spx; border-style: solid;\n                       border-radius: %spx; border-width: %spx;\n                       border-color: %s;}\"\"\"\n                % (self.bgcolor, self.sbh, self.sbv, self.sbc,\n                    self.sbh, self.sbv, self.sbc, self.tepad,\n                    self.tebgcolor, self.tetxc, self.lh,\n                    self.bdr, self.bdw, self.bdc))\n...\n```", "```py\n...\nfrom u_style import ULineEd, UTextEd\n...\n```", "```py\n...\n    def __init__(self, parent=None):\n        ...\n        self.text_edit = UTextEd(self.frame1)\n        self.layfr1 = QtWidgets.QGridLayout()\n        self.layfr1.addWidget(self.text_edit, 0, 0, 1, 1)\n        ...\n...\n```", "```py\n> pip install pyenchant\n```", "```py\n...\nimport re\nfrom PyQt5.Qt import QSyntaxHighlighter\nfrom PyQt5.Qt import QTextCharFormat\nfrom PyQt5.Qt import Qt\n...\n```", "```py\n...\nimport re\nfrom PySide2.QtGui import QSyntaxHighlighter\nfrom PySide2.QtGui import QTextCharFormat\nfrom PySide2.QtCore import Qt\n...\n```", "```py\n...\nclass UHighLight(QSyntaxHighlighter):\n\n    words = u\"(?iu)[\\\\w\\']+\"\n\n    def __init__(self, *args):\n        super(UHighLight, self).__init__(*args)\n        self.dicts = None\n\n    def setDict(self, dicts):\n        self.dict = dicts\n\n    def highlightBlock(self, text):\n        if not self.dict:\n            return\n        formats = QTextCharFormat()\n        formats.setUnderlineColor(Qt.red)\n        formats.setUnderlineStyle(\n                        QTextCharFormat.SpellCheckUnderline)\n        for w in re.finditer(self.words, text):\n            if not self.dict.check(w.group()):\n                self.setFormat(w.start(),\n                               w.end() - w.start(), formats)\n...\n```", "```py\n...\nimport enchant\nfrom u_adds import UHighLight\n...\n```", "```py\n...\n    def __init__(self, parent=None):\n        ...\n        self.dicts = enchant.Dict(\"en_US\")\n        self.highlighter = UHighLight(self.text_edit.document())\n        self.highlighter.setDict(self.dicts)\n...\n```"]