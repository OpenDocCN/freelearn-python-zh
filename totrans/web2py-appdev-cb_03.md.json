["```py\n    db = DAL('sqlite://storage.sqlite')\n\n    ```", "```py\n    db.define_table('invoice',Field('name'))\n\n    ```", "```py\n    db.define_table('....',\n    \tmigrate=True,\n    \tfake_migrate=False,\n    \tformat='%(id)s')\n\n    ```", "```py\n    python csvstudio.py -a < /tmp/mydata.csv\n\n    ```", "```py\n    python csvstudio.py -w mytable -i /tmp/mydata.csv > db1.py\n\n    ```", "```py\n    python csvstudio.py -f csv -i /tmp/mydata.csv -o /tmp/mydata2.csv\t\n\n    ```", "```py\n    http://.../app/appadmin\n\n    ```", "```py\npython web2py.py -S app -M -N\n\n```", "```py\n >>> f = open('/tmp/mydata2.csv','rb')\n>>> db.mytable.import_from_csv_file(f)\n>>> db.commit()\n\n```", "```py\nClayton Troncoso|234523\nMalinda Gustavson|524334\nPenelope Sharpless|151555\nSerena Ruggerio|234565\nLenore Marbury|234656\nAmie Orduna|256456\nMargery Koeppel|643124\nLoraine Merkley|234555\nAvis Bosserman|234523\n...\nElinor Erion|212554\n\n```", "```py\n    db.define_table('employees',\n    \tField('first_name'),\n    \tField('last_name'),\n    \tField('salary','double'))\n\n    ```", "```py\napplications/app/private/importer.py\n\n```", "```py\n    for line in open('/tmp/data.txt','r'):\n    \tfullname,salary = line.strip().split('|')\n    \tfirst_name,last_name = fullname.split(' ')\n    \tdb.employees.insert(first_name=first_name,\n    \t\tlast_name=last_name,\n    \t\tsalary=float(salary))\n    db.commit()\n\n    ```", "```py\npython web2py.py -S app -M -N -R applications/app/private/\nimporter.py\n\n```", "```py\ndb.define_table('employees',\n\tField('first_name', requires=IS_NOT_EMPTY()),\n\tField('last_name', requires=SI_NOT_EMPTY()),\n\tField('salary','double', requires=IS_FLOAT_IN_RANGE(0,10**7)))\n\n```", "```py\nfor line in open('/tmp/data.txt','r'):\n\tfullname,salary = line.strip().split('|')\n\tfirst_name,last_name = fullname.split(' ')\n\tr = db.employee.validate_and_insert(\n\t\tfirst_name=first_name,\n\t\tlast_name=last_name,\n\t\tsalary=float(salary))\nif r.errors: print line, r.errors\n\tdb.commit()\n\n```", "```py\nmysql://username:password@hostname:port/dbname\n\n```", "```py\n    db=DAL('sqlite://storage.sqlite')\n\n    ```", "```py\n    production=False\n    URI = 'mysql://username:password@hostname:port/dbname'\n    if production:\n    \tdb=DAL(URI, pool_size=20)\n    else:\n    \tdb=DAL('sqlite://storage.sqlite')\n\n    ```", "```py\n    def main():\n    \tother_db = DAL(URI)\n    \tprint 'creating tables...'\n    \tfor table in db:\n    \t\tother_db.define_table(table._tablename,*[field for field in\n    \t\t\ttable])\n    \tprint 'exporting data...'\n    \tdb.export_to_csv_file(open('tmp.sql','wb'))\n    \tprint 'importing data...'\n    \tother_db.import_from_csv_file(open('tmp.sql','rb'))\n    \tother_db.commit()\n    \tprint 'done!'\n    if __name__() == \"__main__\":\n    \tmain()\n\n    ```", "```py\n    python web2py.py -S app -M -N -R applications/app/private/mover.py\n\n    ```", "```py\n    production=False\n\n    ```", "```py\n    production=True\n\n    ```", "```py\nscript/cpdb.py\n\n```", "```py\n        python scripts/extract_mysql_models.py username:password@databasename > db1.py\n\n        ```", "```py\n    python scripts/extract_pgsql_models.py databasename localhost 5432 username password > db1.py\n\n    ```", "```py\n    db = DAL('mysql://username:password@127.0.0.1:8000/databasename',\n    \tmigrate_enabled=False, pool_size=20)\n\n    ```", "```py\n    db = DAL(\n    \t\"postgres://username:password@localhost:5432/databasename\", migrate_enabled=False, pool_size=10)\n    \tmigrate = False # you can control migration per define_table\n\n    ```", "```py\n    db.define_table('data', Field('value'))\n\n    ```", "```py\n    db.define_table('tag', Field('record_id', db.data), Field('name'))\n\n    ```", "```py\n    tags = [...]\n\n    ```", "```py\n    def search_or(data=db.data, tag=db.tag, tags=[]):\n    \trows = db(data.id==tag.record_id)\\ (tag.name.belongs(tags)).select(\n    \t\tdata.ALL,\n    \t\torderby=data.id,\n    \t\tgroupby=data.id,\n    \t\tdistinct=True)\n    \treturn rows\n\n    ```", "```py\n    def search_and(data=db.data,tag=db.tag,tags=[]):\n    \tn = len(tags):\n    \trows = db(data.id==tag.record_id)\\\n    \t\t(tag.name.belongs(tags)).select(\n    \t\tdata.ALL,\n    \t\torderby=data.id,\n    \t\tgroupby=data.id,\n    \t\thaving=data.id.count()==n)\n    \treturn rows\n\n    ```", "```py\ndata.id==tag.record_id\n\n```", "```py\ndb.define_table('data', Field('value'))\ndb.define_table('tag', Field('name', unique=True))\ndb.define_table('link', Field('record_id',db.data), Field('tag_id',db.\ntag))\n\n```", "```py\ndef search_or(data=db.data, tag=db.tag,link=db.link,tags=[]):\n\tsubquery = db(db.tag.name.belongs(tags)).select(db.tag.id)\n\trows = db(data.id==link.record_id)\\\n\t(link.tag_id.belongs(subquery)).select(\n\t\tdata.ALL,\n\t\torderby=data.id,\n\t\tgroupby=data.id,\n\t\tdistinct=True)\n\treturn rows\ndef search_and(data=db.data, tag=db.tag, link=db.link, tags=[]):\n\tn = len(tags)\n\tsubquery = db(db.tag.name.belongs(tags)).select(db.tag.id)\n\trows = db(data.id==link.record_id)\\\n\t\t(link.tag_id.belongs(subquery)).select(\n\t\t\tdata.ALL,\n\t\t\torderby=data.id,\n\t\t\tgroupby=data.id,\n\t\t\thaving=data.id.count()==n)\n\treturn rows\n\n```", "```py\ndb = DAL(URI)\n\n```", "```py\n    db = DAL(URI, migrate_enabled=False)\n\n    ```", "```py\nln applications/app1/models/db1.py applications/app2/models/db1.py\n\n```", "```py\n# file myscript.py\nfrom gluon.dal import DAL\ndb = DAL(URI, folder='/path/to/web2py/applications/app1', auto_\nimport=True)\nprint db.tables\n# add your code here\n\n```", "```py\nfrom gluon.dal import Table\n\nclass TreeProxy(object):\n\tskeleton = Table(None,'tree',\n\t\tField('ileft','integer'),\n\t\tField('iright','integer'))\n\tdef __init__(self,table):\n\t\tself.table=table\n\tdef ancestors(self,node):\n\t\tdb = self.table._db\n\treturn\n\t\tdb(self.table.ileft<=node.ileft)(self.table.iright>node.iright)\n\tdef descendants(self,node):\n\t\tdb = self.table._db\n\treturn\n\t\tdb(self.table.ileft>=node.ileft)(self.table.iright<node.iright)\n\t  def add_leaf(self,parent_id=None,**fields):\n\t\tif not parent_id:\n\t\t\tnrecords = self.table._db(self.table).count()\n\t\t\tfields.update(dict(ileft=nrecords,iright=nrecords))\n\t\telse:\n\t\t\tnode = self.table(parent_id)\n\t\t\tfields.update(dict(ileft=node.iright,iright=node.iright))\n\t\t\tnode.update_record(iright=node.iright+1)\n\t\t\tancestors = self.ancestors(node).select()\n\t\tfor ancestor in ancestors:\n\t\t\tancestor.update_record(iright=ancestor.iright+1)\n\t\t\tancestors = self.ancestors(node).select()\n\t\tfor ancestor in ancestors:\n\t\t\tancestor.update_record(iright=ancestor.iright+1)\n\treturn self.table.insert(**fields)\n\n\t  def del_node(self,node):\n\t\tdelta = node.iright-node.ileft\n\t\tdeleted = self.descendants(node).delete()\n\t\tdb = self.table._db\n\t\tdb(self.table.iright>node.iright).\n\t\t\tupdate(iright=self.table.iright-delta)\n\t\tdel self.table[node.id]\n\treturn deleted + 1\n\n```", "```py\n    treeproxy =\n    \tTreeProxy(db.define_table('mytree',Field('name'),Tree.skeleton))\n\n    ```", "```py\n    id = treeproxy.add_leaf(name=\"root\")\n\n    ```", "```py\n    treeproxy.add_leaf(parent_id=id,name=\"child1\")\n    treeproxy.add_leaf(parent_id=id,name=\"child2\")\n\n    ```", "```py\n    for node in treeproxy.ancestors(db.tree(id)).select():\n    \tprint node.name\n    for node in treeproxy.descendants(db.tree(id)).select():\n    print node.name\n\n    ```", "```py\n    treeproxy.del_node(db.tree(id))\n\n    ```", "```py\n    def get_or_create(table, **fields):\n    \t\"\"\"\n    \tReturns record from table with passed field values.\n    \tCreates record if it does not exist.\n    \t'table' is a DAL table reference, such as 'db.invoice'\n    \tfields are field=value pairs\n    \t\"\"\"\n    \treturn table(**fields) or table.insert(**fields)\n\n    ```", "```py\n    db.define_table('person', Field('name'))\n    john = get_or_create(db.person, name=\"John\")\n\n    ```", "```py\n    def update_or_create(table, fields, updatefields):\n    \t\"\"\"\n    \tModifies record that matches 'fields' with 'updatefields'.\n    \tIf record does not exist then create it.\n\n    \t'table' is a DAL table reference, such as 'db.person'\n    \t'fields' and 'updatefields' are dictionaries\n    \t\"\"\"\n    \trow = table(**fields)\n    \tif row:\n    \t\trow.update_record(**updatefields)\n    \telse:\n    \t\tfields.update(updatefields)\n    \t\trow = table.insert(**fields)\n    \treturn row\n\n    ```", "```py\n    tim = update_or_create(db.person, dict(name=\"tim\"),\n    dict(name=\"Tim\"))\n\n    ```", "```py\nif request.env.web2py_runtime_gae:\n\tdb = DAL('google:datastore')\nelse:\n\tdb = DAL('sqlite://storage.sqlite')\n\n```", "```py\nproduct = db.define_table('product',\n\tField('name'),\n\tField('price','double'))\n\nbuyer = db.define_table('buyer',\n\tField('name'))\n\npurchase = db.define_table('purchase',\n\tField('product',db.product),\n\tField('buyer',db.buyer),\n\tField('quantity','integer'),\n\tField('order_date','date',default=request.now))\n\n```", "```py\nicecream = db.product.insert(name='Ice Cream',price=1.50)\nkenny = db.buyer.insert(name='Kenny')\ncartman = db.buyer.insert(name='Cartman')\ndb.purchase.insert(product=icecream,buyer=kenny,quantity=1,\n\torder_date=datetime.datetime(2009,10,10))\ndb.purchase.insert(product=icecream,buyer=cartman,quantity=4,\n\torder_date=datetime.datetime(2009,10,11))\n\n```", "```py\nicecream.update_record(price=1.99)\n\n```", "```py\nicecream.price=1.99\nicecream.update_record()\n\n```", "```py\nrows = db(purchase.product==product.id)\n\t(purchase.buyer==buyer.id).select()\nfor row in rows:\n\tprint row.product.name, row.product.price,\n\trow.buyer.name, row.purchase.quantity\n\n```", "```py\nIce Cream 1.99 Kenny 1\nIce Cream 1.99 Cartman 4\n\n```", "```py\nrows = db(purchase.id>0).select()\nfor row in rows:\n\tprint row.product.name, row.product.price, row.buyer.name,\n\trow.quantity\n\n```", "```py\nrows = db((purchase.buyer==kenny)|(purchase.buyer==cartman)).select()\n\n```", "```py\nrows = db(purchase.buyer.contains((kenny,cartman))).select()\n\n```", "```py\nrows_kenny = db(purchase.buyer==kenny).select()\nrows_cartman = db(purchase.buyer==cartman).select()\nrows = rows_kenny|rows_cartman\n\n```", "```py\nrows = db((purchase.buyer==kenny)|(purchase.buyer==cartman))\\\n\t.select(orderby=purchase.quantity)\n\n```", "```py\nrows_kenny = db(purchase.buyer==kenny).select()\nrows_cartman = db(purchase.buyer==cartman).select()\nrows = (rows_kenny|rows_cartman).sort(lambda row:row.quantity)\n\n```", "```py\nrows = db((purchase.buyer==kenny)|(purchase.buyer==cartman))\\\n\t(purchase.buyer==buyer.id).select(orderby=buyer.name)\n\n```", "```py\nrows = (rows_kenny|rows_cartman).sort( \\\n\tlambda row:row.buyer.name)\n\n```", "```py\nbuyer_names = cache.ram('buyer_names',\n\tlambda:dict(*[(b.id,b.name) for b in db(db.buyer).select()]),\n\t3600)\nrows = (rows_kenny|rows_cartman).sort(\n\tlambda row: buyer_names.get(row.buyer,row.buyer.name))\n\n```", "```py\nrows = db(buyer.name.like('C%')).select()\nprint rows\n\n```", "```py\nrows = db(buyer.id>0).select().find(lambda\n\trow:row.name.startswith('C'))\n\n```", "```py\nrows = db(purchase.order_date.day==11).select()\n\n```", "```py\nrows = db(purchase.id>0).select().find(lambda\n\trow:row.order_date.day==11)\n\n```", "```py\ndb.define_table('purchase', Field('product'),\n\tField('price', 'double'),\n\tField('quantity','integer'))\n\n```", "```py\nclass MyVirtualFields(object):\n\tdef total_price(self):\n\t\treturn self.purchase.price * self.purchase.quantity\ndb.purchase.virtualfields.append(MyVirtualFields())\n\n```", "```py\nfor row in db(db.purchase).select():\n\tprint row.name, row.total_price\n\n```", "```py\nif not db.executesql(\"select * from information_schema.tables where\ntable_name='purchase_plus' limit 1;\"):\n\tdb.executesql(\"create view purchase_plus as select purchase.*,\n\t\tpurchase.price * purchase.quantity as total_price from purchase\")\ndb.define_table('purchase_plus', db.purchase, Field('total_price',\n\t'double'),\n\tmigrate=False)\n\n```", "```py\nif not db.executesql(\"select ...\")\n\n```", "```py\ndb.executesql(\"create view ...\")\n\n```", "```py\ndb.define_table('purchase_plus',...)\n\n```"]