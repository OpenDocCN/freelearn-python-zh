["```py\nfrom django.apps import AppConfig\n```", "```py\nclass SimpleAppConfig(AppConfig):\n```", "```py\n    default_auto_field = \"django.db.models.BigAutoField\"\n```", "```py\n    name = \"app.chat\" # Update\n```", "```py\nINSTALLED_APPS = [\n```", "```py\n    \"channels\",\n```", "```py\n    \"django.contrib.admin\",\n```", "```py\n    \"django.contrib.auth\",\n```", "```py\n    \"django.contrib.contenttypes\",\n```", "```py\n    \"django.contrib.sessions\",\n```", "```py\n    \"django.contrib.messages\",\n```", "```py\n    \"django.contrib.staticfiles\",\n```", "```py\n    \"app.chat\", # Update\n```", "```py\n]\n```", "```py\n# app/chat/consumers.py\n```", "```py\nclass ChatConsumer(JsonWebsocketConsumer):\n```", "```py\nfrom app.chat import views\n```", "```py\nhttp://chat.localhost {\n```", "```py\n    root * /usr/src/app/\n```", "```py\nfrom app.chat.consumers import ChatConsumer # Update\n```", "```py\n... \n```", "```py\n                    re_path(r\"^ws/chat/$\", ChatConsumer.\n```", "```py\n                        as_asgi()), # Update\n```", "```py\n...\n```", "```py\n    data = {\n                \"my_data\": \"hi\",\n           }\n    self.send_json(data)\n    ```", "```py\n    from asgiref.sync import async_to_sync\n    async_to_sync(self.channel_layer.group_send)(\n                \"Main\", {\n                    \"type\": \"send.hi\", # Run \"send_hi()\" \n                        method\n                    \"my_data\": \"hi\",\n                }\n\n    def send_hi(self, event):\n            \"\"\"Event: Send \"hi\" to client\"\"\"\"\n            data = {\n                \"my_data\": event[\"my_data\"],\n            }\n            self.send_json(data)\n    ```", "```py\n    async_to_sync(self.channel_layer.group_add)(\"Main\", self.channel_name)\n    ```", "```py\n    async_to_sync(self.channel_layer.group_discard)(\"Main\", self.channel_name)\n    ```", "```py\nfrom django.db import models\n```", "```py\nfrom django.contrib.auth.models import User\n```", "```py\nclass Client(models.Model):\n```", "```py\n    \"\"\"\n```", "```py\n    Clients for users\n```", "```py\n    \"\"\"\n```", "```py\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n```", "```py\n    channel = models.CharField(max_length=200, blank=True, null=True, default=None)\n```", "```py\n    created_at = models.DateTimeField(auto_now_add=True)\n```", "```py\n    def __str__(self):\n```", "```py\n        return self.user.username\n```", "```py\nclass Room(models.Model):\n```", "```py\n    \"\"\"\n```", "```py\n    Rooms for users\n```", "```py\n    \"\"\"\n```", "```py\n    users_subscribed = models.ManyToManyField(User, \n```", "```py\n        related_name=\"users_subscribed\")\n```", "```py\n    clients_active = models.ManyToManyField(Client, \n```", "```py\n        related_name=\"clients_active\")\n```", "```py\n    name = models.CharField(max_length=255, blank=True, \n```", "```py\n        null=True, default=None)\n```", "```py\n    is_group = models.BooleanField(default=False)\n```", "```py\n    def __str__(self):\n```", "```py\n        return self.name\n```", "```py\nclass Message(models.Model):\n```", "```py\n    \"\"\"\n```", "```py\n    Messages for users\n```", "```py\n    \"\"\"\n```", "```py\n    User = models.ForeignKey(User, on_delete=models.\n```", "```py\n        CASCADE)\n```", "```py\n    room = models.ForeignKey(Room, on_delete=models.\n```", "```py\n        CASCADE)\n```", "```py\n    text = models.TextField()\n```", "```py\n    created_at = models.DateTimeField(auto_now_add=True)\n```", "```py\n    def __str__(self):\n```", "```py\n        return self.text\n```", "```py\ndocker-compose up\n```", "```py\ndocker ps\n```", "```py\ndocker exec -it chapter-5_django_1 bash\n```", "```py\n./manage.py makemigrations chat\n```", "```py\n./manage.py migrate\n```", "```py\n# make_fake_users.py\n```", "```py\nfrom django.contrib.auth.models import User\n```", "```py\nfrom faker import Faker\n```", "```py\nfake = Faker()\n```", "```py\n# Delete all users\n```", "```py\nUser.objects.all().delete()\n```", "```py\n# Generate 30 random emails and iterate them.\n```", "```py\nfor email in [fake.unique.email() for i in range(5)]:\n```", "```py\n    # Create user in database\n```", "```py\n    user = User.objects.create_user(fake.user_name(), \n```", "```py\n        email, \"password\")\n```", "```py\n    user.last_name = fake.last_name()\n```", "```py\n    user.is_active = True\n```", "```py\n    user.save()\n```", "```py\n# Fake data\n```", "```py\nFaker===8.13.2\n```", "```py\n./manage.py shell < make_fake_users.py\n```", "```py\n{# app/chat/templates/index.html #}\n```", "```py\n{% load static %}\n```", "```py\n<! doctype html>\n```", "```py\n<html lang=\"en\">\n```", "```py\n<head>\n```", "```py\n    <meta charset=\"UTF-8\">\n```", "```py\n    <meta name=\"viewport\" content=\"width=device-width, \n```", "```py\n        user-scalable=no, initial-scale=1.0, maximum-\n```", "```py\n            scale=1.0, minimum-scale=1.0\">\n```", "```py\n    <title>Chat</title>\n```", "```py\n    {# CSS #}\n```", "```py\n    <link rel=\"stylesheet\" href=\"{% static 'css/main.css' %}\">\n```", "```py\n    {# JavaScript #}\n```", "```py\n    <script defer src=\"img/index.js' %}\">\n```", "```py\n    </script>\n```", "```py\n</head>\n```", "```py\n<body\n```", "```py\n        data-host=\"{{ request.get_host }}\"\n```", "```py\n        data-scheme=\"{{ request.scheme }}\"\n```", "```py\n>\n```", "```py\n    <h1 class=\"title\">Chat</h1>\n```", "```py\n    {# Login user name #}\n```", "```py\n    <h2 class=\"subtitle\">I'm <span id=\"logged-user\">\n```", "```py\n    </span></h2>\n```", "```py\n    <div class=\"container chat\">\n```", "```py\n        <aside id=\"aside\">\n```", "```py\n            {# List of groups and users #}\n```", "```py\n            {% include \"components/_aside.html\" with \n```", "```py\n            users=users %}\n```", "```py\n        </aside>\n```", "```py\n        <main id=\"main\">\n```", "```py\n            {# Chat: Group name, list of users and form to \n```", "```py\n            send new message #}\n```", "```py\n            {% include \"components/_chat.html\" %}\n```", "```py\n        </main>\n```", "```py\n    </div>\n```", "```py\n</body>\n```", "```py\n</html>\n```", "```py\n<nav>\n```", "```py\n    {# Group links #}\n```", "```py\n    <h2>Groups</h2>\n```", "```py\n    <ul class=\"nav__ul\">\n```", "```py\n        <li class=\"nav__li\">\n```", "```py\n            <a\n```", "```py\n                class=\"nav__link\"\n```", "```py\n                href=\"#\"\n```", "```py\n                data-group-name=\"hi\"\n```", "```py\n                data-group-public=\"true\"\n```", "```py\n            >\n```", "```py\n                #hi\n```", "```py\n            </a>\n```", "```py\n        </li>\n```", "```py\n        <li class=\"nav__li\">\n```", "```py\n            <a\n```", "```py\n                class=\"nav__link\" \n```", "```py\n                href=\"#\"\n```", "```py\n                data-group-name=\"python\"\n```", "```py\n                data-group-public=\"true\"\n```", "```py\n            >\n```", "```py\n                #python\n```", "```py\n            </a>\n```", "```py\n        </li>\n```", "```py\n                <li class=\"nav__li\">\n```", "```py\n            <a\n```", "```py\n                class=\"nav__link\"\n```", "```py\n                href=\"#\"\n```", "```py\n                data-group-name=\"events\"\n```", "```py\n                data-group-public=\"true\"\n```", "```py\n            >\n```", "```py\n                #events\n```", "```py\n            </a>\n```", "```py\n        </li>\n```", "```py\n        </li>\n```", "```py\n        <li class=\"nav__li\">\n```", "```py\n            <a\n```", "```py\n                class=\"nav__link\" \n```", "```py\n                href=\"#\"\n```", "```py\n                data-group-name=\"off-topic\"\n```", "```py\n                data-group-public=\"true\"\n```", "```py\n            >\n```", "```py\n                #off-topic\n```", "```py\n            </a>\n```", "```py\n        </li>\n```", "```py\n    </ul>\n```", "```py\n    {# End Group links #}\n```", "```py\n    {# Users links #}\n```", "```py\n    <h2> Users</h2>\n```", "```py\n    <ul class=\"nav__ul\">\n```", "```py\n    {% for user in users %}\n```", "```py\n        <li class=\"nav__li\">\n```", "```py\n            <a\n```", "```py\n                class=\"nav__link\"\n```", "```py\n                href=\"#\"\n```", "```py\n                data-group-name=\"{{ user.username }}\"\n```", "```py\n                data-is-group=\"false\"\n```", "```py\n            >\n```", "```py\n                {{ user.username }}\n```", "```py\n            </a>\n```", "```py\n        </li>\n```", "```py\n    {% endfor %}\n```", "```py\n    </ul>\n```", "```py\n    {# End Users links #}\n```", "```py\n</nav>\n```", "```py\n<section class=\"messages\">\n```", "```py\n    {# Name of the connected group #}\n```", "```py\n    <h2 id=\"group-name\">{{ name }}</h2>\n```", "```py\n    {# List of messages #}\n```", "```py\n    <div class=\"messages__list\" id=\"messages-list\"></div>\n```", "```py\n    {# Form to add a new message #}\n```", "```py\n    <form action=\"\" class=\"messages__new-message\">\n```", "```py\n        <input type=\"text\" class=\"input\" name=\"message\" \n```", "```py\n            id=\"message-text\" />\n```", "```py\n        <input type=\"submit\" id=\"send\" class=\"button\" \n```", "```py\n            value=\"Send\" />\n```", "```py\n    </form>\n```", "```py\n</section>\n```", "```py\n{% for message in messages %}\n```", "```py\n    {# Item message #}\n```", "```py\n    <article class=\"message__item\">\n```", "```py\n        <header class=\"massage__header\">\n```", "```py\n            {# Username #}\n```", "```py\n            <h3 class=\"message__title\">{{ \n```", "```py\n                message.user.username }}</h3>\n```", "```py\n            {# Date of creation #}\n```", "```py\n            <time class=\"message__time\">{{ \n```", "```py\n                message.created_at|date: \"d/m/Y H:i\" \n```", "```py\n                    }}</time>\n```", "```py\n        </header>\n```", "```py\n        <div>\n```", "```py\n            {# Text #}\n```", "```py\n            {{ message.text }}\n```", "```py\n        </div>\n```", "```py\n    </article>\n```", "```py\n    {# End Item message #}\n```", "```py\n{% endfor %}\n```", "```py\n/* Global styles */\n```", "```py\n:root {\n```", "```py\n    --color__background: #f6f4f3;\n```", "```py\n    --color__gray: #ccc;\n```", "```py\n    --color__black: #000;\n```", "```py\n}\n```", "```py\n* {\n```", "```py\n    font-family: \"Helvetica Neue\", Helvetica, Arial, sans-\n```", "```py\n        serif;\n```", "```py\n    box-sizing: border-box;\n```", "```py\n}\n```", "```py\nbody {\n```", "```py\n    margin: 0;\n```", "```py\n    background-color: var(--color__background);\n```", "```py\n}\n```", "```py\n/* General classes for small components */\n```", "```py\n.container {\n```", "```py\n    margin: 0 auto;\n```", "```py\n    padding: 1rem 0;\n```", "```py\n    max-width: 40rem;\n```", "```py\n}\n```", "```py\n.button {\n```", "```py\n    display: inline-block;\n```", "```py\n    padding: 0.5rem 1rem;\n```", "```py\n    background-color: var(--color__gray);\n```", "```py\n    border: 0;\n```", "```py\n    cursor: pointer;\n```", "```py\n    text-decoration: none;\n```", "```py\n}\n```", "```py\n.button:hover {\n```", "```py\n    filter: brightness(90%);\n```", "```py\n}\n```", "```py\n.input {\n```", "```py\n    display: block;\n```", "```py\n    width: 100%;\n```", "```py\n    outline: none;\n```", "```py\n    padding: .5rem;\n```", "```py\n    resize: none;\n```", "```py\n    border: 1px solid var(--color__gray);\n```", "```py\n    box-sizing: border-box;\n```", "```py\n}\n```", "```py\n/* Styles for chat */\n```", "```py\n.title {\n```", "```py\n    text-align: center;\n```", "```py\n}\n```", "```py\n.subtitle {\n```", "```py\n    text-align: center;\n```", "```py\n    font-weight: normal;\n```", "```py\n    margin: 0;\n```", "```py\n}\n```", "```py\n.chat {\n```", "```py\n    display: grid;\n```", "```py\n    grid-template-columns: 1fr 3fr;\n```", "```py\n    gap: 1rem;\n```", "```py\n}\n```", "```py\n/* Aside */\n```", "```py\n.nav__ul {\n```", "```py\n    list-style: none;\n```", "```py\n    padding: 0;\n```", "```py\n}\n```", "```py\n.nav__link {\n```", "```py\n    display: block;\n```", "```py\n    padding: 0.5rem 1rem;\n```", "```py\n    background-color: var(--color__gray);\n```", "```py\n    border: 1px solid var(--color__background);\n```", "```py\n    color: var(--color__black);\n```", "```py\n    text-decoration: none;\n```", "```py\n}\n```", "```py\n.nav__link:hover {\n```", "```py\n    filter: brightness(90%);\n```", "```py\n}\n```", "```py\n/* End Aside */\n```", "```py\n/* Chat */\n```", "```py\n.messages {\n```", "```py\n    display: grid;\n```", "```py\n    height: 30rem;\n```", "```py\n    grid-template-rows: 4rem auto 2rem;\n```", "```py\n}\n```", "```py\n.massage__header {\n```", "```py\n    display: grid;\n```", "```py\n    grid-template-columns: 1fr 1fr;\n```", "```py\n    grid-gap: 1rem;\n```", "```py\n}\n```", "```py\n.messages__list {\n```", "```py\n    overflow-y: auto;\n```", "```py\n}\n```", "```py\n.message__item {\n```", "```py\n    border: 1px solid var(--color__gray);\n```", "```py\n    padding: 1rem;\n```", "```py\n}\n```", "```py\n.massage__header . message__title {\n```", "```py\n    margin-top: 0;\n```", "```py\n}\n```", "```py\n.massage__header . message__time {\n```", "```py\n    text-align: right;\n```", "```py\n}\n```", "```py\n.messages__new-message {\n```", "```py\n    display: grid;\n```", "```py\n    grid-template-columns: 8fr 1fr;\n```", "```py\n}\n```", "```py\n/* End Chat */\n```", "```py\nfrom django.shortcuts import render\n```", "```py\nfrom django.contrib.auth.models import User\n```", "```py\ndef index(request):\n```", "```py\n    \"\"\"View with chat layout\"\"\"\n```", "```py\n    return render(\n```", "```py\n        request, \"index.html\", { \"users\": \n```", "```py\n            User.objects.all(). order_by(\"username\")})\n```", "```py\nfrom django.urls import path\n```", "```py\nfrom app.chat import views\n```", "```py\nurlpatterns = [\n```", "```py\n    path(\"\", views.index, name=\"index\"),\n```", "```py\n]\n```", "```py\n    VARIABLES\n```", "```py\n*/\n```", "```py\n// Connect to WebSockets server (SocialNetworkConsumer)\n```", "```py\nconst myWebSocket = new WebSocket(`${document.body.dataset.scheme === 'http' ? 'ws' : 'wss'}://${ document.body.dataset.host }/ws/chat/`);\n```", "```py\n    FUNCTIONS\n```", "```py\n*/\n```", "```py\n/**\n```", "```py\n* Send data to WebSockets server\n```", "```py\n* @param {string} message\n```", "```py\n* @param {WebSocket} webSocket\n```", "```py\n* @return {void}\n```", "```py\n*/\n```", "```py\nfunction sendData(message, webSocket) {\n```", "```py\n    webSocket.send(JSON.stringify(message));\n```", "```py\n}\n```", "```py\n/**\n```", "```py\n* Send message to WebSockets server\n```", "```py\n* @return {void}\n```", "```py\n*/\n```", "```py\nfunction sendNewMessage(event) {\n```", "```py\n    event.preventDefault();\n```", "```py\n    const messageText = document.querySelector('#message-\n```", "```py\n        text')\n```", "```py\n    sendData({\n```", "```py\n            action: 'New message',\n```", "```py\n            data: {\n```", "```py\n                message: messageText.value\n```", "```py\n            }\n```", "```py\n        }, myWebSocket);\n```", "```py\n    messageText.value = '';\n```", "```py\n}\n```", "```py\n/**\n```", "```py\n* Requests the Consumer to change the group with respect to the Dataset group-name.\n```", "```py\n* @param event\n```", "```py\n*/\n```", "```py\nfunction changeGroup(event) {\n```", "```py\n    event.preventDefault();\n```", "```py\n    sendData({\n```", "```py\n            action: 'Change group',\n```", "```py\n            data: {\n```", "```py\n                groupName: event.target.dataset.groupName,\n```", "```py\n                isGroup: event.target.dataset.groupPublic \n```", "```py\n                    === \"true\".\n```", "```py\n            }\n```", "```py\n        }, myWebSocket);\n```", "```py\n}\n```", "```py\n    EVENTS\n```", "```py\n*/\n```", "```py\n// Event when a new message is received by WebSockets\n```", "```py\nmyWebSocket.addEventListener(\"message\", (event) => {\n```", "```py\n    // Parse the data received\n```", "```py\n    const data = JSON.parse(event.data);\n```", "```py\n    // Renders the HTML received from the Consumer\n```", "```py\n    document.querySelector(data.selector).innerHTML = \n```", "```py\n        data.html;\n```", "```py\n    // Scrolls to the bottom of the chat\n```", "```py\n    const messagesList = document.querySelector('#messages-\n```", "```py\n        list');\n```", "```py\n    messagesList.scrollTop = messagesList.scrollHeight;\n```", "```py\n    /**\n```", "```py\n     * Reassigns the events of the newly rendered HTML\n```", "```py\n     */\n```", "```py\n    // Button to send new message button\n```", "```py\n    document.querySelector('#send').addEventListener('click', \n```", "```py\n    sendNewMessage);\n```", "```py\n    // Buttons for changing groups\n```", "```py\n    document.querySelectorAll(\".nav__link\").forEach(button => {\n```", "```py\n        button.addEventListener(\"click\", changeGroup);\n```", "```py\n    });\n```", "```py\n});\n```", "```py\n# app/chat/consumers.py\n```", "```py\nfrom channels.generic.websocket import JsonWebsocketConsumer\n```", "```py\nfrom django.template.loader import render_to_string\n```", "```py\nfrom asgiref.sync import async_to_sync\n```", "```py\nfrom channels.auth import login, logout\n```", "```py\nfrom django.contrib.auth.models import User\n```", "```py\nfrom .models import Client, Room, Message\n```", "```py\nclass ChatConsumer(JsonWebsocketConsumer):\n```", "```py\n    Client.objects.all().delete()\n```", "```py\n    def connect(self):\n```", "```py\n        \"\"\"Event when client connects\"\"\"\n```", "```py\n        self.accept()\n```", "```py\n        user = User.objects.exclude(\n```", "```py\n            id__in=Client.objects.all().values(\"user\")\n```", "```py\n        ).order_by(\"?\").first()\n```", "```py\n        async_to_sync(login)(self.scope, user)\n```", "```py\n        self.scope[\"session\"].save()\n```", "```py\n        self.send_html(\n```", "```py\n            {\n```", "```py\n                \"selector\": \"#logged-user\",\n```", "```py\n                \"html\": self.scope[\"user\"].username,\n```", "```py\n            }\n```", "```py\n        Client.objects.create(user=user, \n```", "```py\n            channel=self.channel_name)\n```", "```py\n        self.add_client_to_room(\"hi\", True)\n```", "```py\n        self.list_room_messages()\n```", "```py\ndef disconnect(self, close_code):\n```", "```py\n        \"\"\"Event when client disconnects\"\"\"\n```", "```py\n        self.remove_client_from_current_room()\n```", "```py\n        Client.objects.get(channel=self.channel_name).delete()\n```", "```py\n        logout(self.scope, self.scope[\"user\"])\n```", "```py\n    def receive_json(self, data_received):\n```", "```py\n        \"\"\"\n```", "```py\n            Event when data is received\n```", "```py\n            All information will arrive in 2 variables:\n```", "```py\n            \"action\", with the action to be taken\n```", "```py\n            \"data\" with the information\n```", "```py\n        \"\"\"\n```", "```py\n        # Get the data\n```", "```py\n        data = data_received[\"data\"]\n```", "```py\n        match data_received[\"action\"]:\n```", "```py\n            case \"Change group\":\n```", "```py\n                if data[\"isGroup\"]:\n```", "```py\n                    self.add_client_to_room(data[\"groupName\"], data[\"isGroup\"])\n```", "```py\n                else:\n```", "```py\n                    room = Room.objects.filter(users_subscribed__in=[self.scope[\"user\"]], is_group=False). intersection(Room.objects.filter(users_subscribed__in=[user_target], is_group=False)).first())\n```", "```py\n                    if room and user_target and room.users_subscribed.count() == 2:\n```", "```py\n                    user_target = User.objects.filter(username=data[\"groupName\"]).first()\n```", "```py\n                        self.add_client_to_room(room.name)\n```", "```py\n                    else:\n```", "```py\n                        room = Room.objects.filter(\n```", "```py\n                            users_subscribed__in=[\n```", "```py\n                                user_target,\n```", "```py\n                            ],\n```", "```py\n                            is_group=False,\n```", "```py\n                        ).last()\n```", "```py\n                        if room and room.users_subscribed.count() == 1:\n```", "```py\n                            self.add_client_to_room(room.name)\n```", "```py\n                        else:\n```", "```py\n                            self.add_client_to_room()\n```", "```py\n                self.send_room_name()\n```", "```py\n            case \"New message\":\n```", "```py\n                self.save_message(data[\"message\"])\n```", "```py\n        self.list_room_messages()\n```", "```py\n    def send_html(self, event):\n```", "```py\n        \"\"\"Event: Send html to client\"\"\"\n```", "```py\n        data = {\n```", "```py\n            \"selector\": event[\"selector\"],\n```", "```py\n            \"html\": event[\"html\"],\n```", "```py\n        }\n```", "```py\n        self.send_json(data)\n```", "```py\n    def list_room_messages(self):\n```", "```py\n        List all messages from a group\"\"\"\"\"\"\n```", "```py\n        room_name = self.get_name_room_active()\n```", "```py\n        # Get the room\n```", "```py\n        room = Room.objects.get(name=room_name)\n```", "```py\n        # Get all messages from the room\n```", "```py\n        messages = Message.objects.filter(room=room). order_by(\"created_at\")\n```", "```py\n        # Render HTML and send to client\n```", "```py\n        async_to_sync(self.channel_layer.group_send)(\n```", "```py\n            room_name, {\n```", "```py\n                \"type\": \"send.html\", # Run \"send_html()\" method\n```", "```py\n                \"selector\": \"#messages-list\",\n```", "```py\n                \"html\": render_to_string(\"components/_list_messages.html\", {\"messages\": messages})\n```", "```py\n            }\n```", "```py\n    def send_room_name(self):\n```", "```py\n        \"\"\"Send the room name to the client\"\"\"\n```", "```py\n        room_name = self.get_name_room_active()\n```", "```py\n        room = Room.objects.get(name=room_name)\n```", "```py\n        data = {\n```", "```py\n            \"selector\": \"#group-name\",\n```", "```py\n            # Concadena # if it is a group for aesthetic reasons\n```", "```py\n            \"html\": (\"#\" if room.is_group else \"\") + room_name,\n```", "```py\n        }\n```", "```py\n        self.send_json(data)\n```", "```py\n    def save_message(self, text):\n```", "```py\n        \"Save a message in the database\"\"\"\"\"\n```", "```py\n        # Get the room\n```", "```py\n        room = Room.objects.get(name=self.get_name_room_active())\n```", "```py\n        # Save message\n```", "```py\n        Message.objects.create(\n```", "```py\n            user=self.scope[\"user\"],\n```", "```py\n            room=room,\n```", "```py\n            text=text,\n```", "```py\n    def add_client_to_room(self, room_name=None, is_group=False):\n```", "```py\n        \"\"\"Add customer to a room within Channels and save the reference in the Room model.\"\"\"\"\"\n```", "```py\n        client = Client.objects.get(user=self.scope[\"user\"])\n```", "```py\n        self.remove_client_from_current_room()\n```", "```py\n        room, created = Room.objects.get_or_create(name=room_name, is_group=is_group)\n```", "```py\n        if not room.name:\n```", "```py\n            room.name = f \"private_{room.id}\"\n```", "```py\n            room.save()\n```", "```py\n        room.clients_active.add(client)\n```", "```py\n        room.users_subscribed.add(client.user)\n```", "```py\n        room.save()\n```", "```py\n        async_to_sync(self.channel_layer.group_add)(room.name, self.channel_name)\n```", "```py\n        self.send_room_name()\n```", "```py\n        def get_name_room_active(self):\n            \"\"\"Get the name of the group from login user\"\"\"\"\n            room = Room.objects.filter(clients_active__user_id=self.scope[\"user\"].id). first()\n            return room.name\n    ```", "```py\n        def remove_client_from_current_room(self):\n            Remove client from current group\"\"\"\"\"\"\n    ```", "```py\n            client = Client.objects.get(user=self.scope[\"user\"])\n            rooms = Room.objects.filter(clients_active__in=[client])\n    ```", "```py\n            for room in rooms:\n    ```", "```py\n                async_to_sync(self.channel_layer.group_discard)(room.name, self.channel_name)\n    ```", "```py\n                room.clients_active.remove(client)\n                room.save()\n    ```"]