- en: A More In-depth View of the RESTful Services Paradigm
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 对RESTful服务范式的更深入视角
- en: With the grand arrival of a bevy of futuristic and flexible information technologies,
    automated tools, optimized infrastructures, integrated platforms, and multifaceted
    devices, the world is bound to experiment and experience hitherto unknown software
    applications and services toward empowering businesses and people. With the faster
    proliferation of slim and sleek, handy and trendy smartphones, we are destined
    to have a dazzling array of easy-to-use and eye-catching mobile applications and
    services. With wearables, portables, fixed devices, handhelds, and wireless gadgets
    joining in mainstream computing, the application scope, size, speed, and structure
    are bound to escalate appreciably. To fit applications into every segment of devices,
    software developers across the world are expected to bring forth customizable,
    composable, and configurable applications by leveraging the potential and promising
    programming languages, platforms, toolkits, software-development methodologies,
    design patterns, and best practices. The software landscape is, therefore, expanding
    continuously with the utmost confidence and clarity. Hence, the rollout and the
    impact of pioneering software packages, homegrown applications, turnkey solutions,
    insightful platforms, and process-aware composite software are running on expected
    lines. That is, we are tending toward the software-defined world—software is the
    vital cog in humanity's bright future.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 随着一群未来派和灵活的信息技术、自动化工具、优化基础设施、集成平台和多功能设备的盛大到来，世界必将尝试和体验以前未知的软件应用和服务，以赋能企业和个人。随着轻薄、时尚、便携、潮流的智能手机的快速普及，我们注定将拥有令人眼花缭乱的易于使用和引人注目的移动应用和服务。随着可穿戴设备、便携设备、固定设备、手持设备和无线设备的加入主流计算，应用的范围、规模、速度和结构必将显著提升。为了将应用适配到各种设备，全球软件开发者预计将通过利用潜力巨大的编程语言、平台、工具包、软件开发方法、设计模式和最佳实践，推出可定制、可组合和可配置的应用。因此，软件领域正以极大的信心和清晰度持续扩展。因此，开创性的软件包、本土应用、一站式解决方案、洞察力平台和流程感知复合软件的推出和影响都在按预期进行。也就是说，我们正趋向于软件定义的世界——软件是人类光明的未来的关键齿轮。
- en: 'This book, especially this chapter, is dedicated to explaining the emerging
    techniques and tips to produce RESTful services and their corresponding APIs quickly
    and easily. This chapter has the following objectives:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本书，尤其是本章，致力于解释如何快速、轻松地生成RESTful服务和它们相应的API的新兴技术和技巧。本章有以下目标：
- en: Software-defined and driven world
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 软件定义和驱动的世界
- en: Describing the emerging application types
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 描述新兴的应用类型
- en: The REST paradigm for application modernization and integration
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 应用现代化和集成的REST范式
- en: The RESTful services for digital transformation and intelligence
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数字转型和智能的RESTful服务
- en: Best practices for REST-based microservices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 基于REST的微服务最佳实践
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: There are no special technical requirements for this chapter as it doesn't talk
    about designing, developing, or deploying a software package. Other chapters describe
    how RESTful APIs for microservices are being designed and used. Further on, a
    few chapters explain the nitty-gritty of producing standalone and utility-like
    RESTful services for application and data integration. API design techniques and
    best practices are also covered in detail in this book. This chapter throws more
    light on how the enigmatic RESTful paradigm is going to be a trendsetter for the
    forthcoming era of a software-defined world. The RESTful techniques, tools, and
    tips presented in the other chapters come good for this chapter. Precisely speaking,
    the role and responsibility of the path-breaking RESTful idea is bound to escalate,
    with the world tending toward the one fully enriched, enabled, and empowered by
    adaptive and adroit software.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 本章没有特殊的技术要求，因为它不涉及设计、开发或部署软件包。其他章节描述了如何设计和使用面向微服务的RESTful API。进一步来说，几章解释了为应用和数据集成生产独立和实用型RESTful服务的细节。本书还详细介绍了API设计技术和最佳实践。本章进一步阐明了神秘的RESTful范式如何将成为软件定义世界即将到来的时代的趋势setter。其他章节中提出的RESTful技术、工具和技巧对这一章节也很有帮助。确切地说，突破性的RESTful理念的角色和责任必将提升，随着世界趋向于一个完全由适应性强的、灵巧的软件丰富、启用和赋权的世界。
- en: Tending toward the software-defined and software-driven world
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 趋向于软件定义和软件驱动的世界
- en: Every common and casual thing in our mid gets digitized in a systematic manner
    to be extremely computational, communicative, responsive, and active. With a variety
    of network options, every kind of embedded system (small and large) becomes interlinked
    with one another in order to be purposefully discoverable, accessible, assessable,
    interoperable, and collaborative. That is, all kinds of heterogeneities and complexities
    that constitute a significant barrier in terms of enabling digitized objects and
    connected devices to talk to one another in a sensible fashion are being immediately
    decimated through software-enabled abstraction techniques and tips. It is a well-known
    and indisputable truth that software eats the world. Every device, consumer electronics,
    industry machine, flying drone, humanoid robot, medical instrument, home utensil
    and ware, enabling toolkit, handheld, networkable wearable, portable, fixed system,
    network solution, automobile, and engine in our everyday environment is getting
    empowered by embedded software adapters, connectors, and drivers. That is, software
    enablement is the most vital process and target for everyday objects to be empowered
    accordingly to decisively join in the mainstream IT. Anything stuffed with some
    relevant software snippets can become digitally important. That is, ordinary things
    are getting readied to be extraordinary for the ensuing era of the digital economy.
    Advanced cars and vehicles are being stuffed with a lot of software modules in
    order to establish and ensure high-level automation.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 我们生活中的每一件普通和日常事物都以系统化的方式数字化，变得极其计算化、通信化、响应化和活跃。有了各种网络选项，各种嵌入式系统（从小到大）相互连接，以便有目的地被发现、访问、评估、互操作和协作。也就是说，所有构成数字化对象和连接设备之间以合理方式交流的异质性和复杂性，正通过软件赋能的抽象技术和技巧被立即消除。这是一个众所周知且无可争议的事实：软件正在吞噬世界。我们日常环境中的每一台设备、消费电子产品、工业机器、飞行无人机、类人机器人、医疗仪器、家居用品和器具、启用工具包、手持设备、可联网的可穿戴设备、便携式设备、固定系统、网络解决方案、汽车和引擎，都通过嵌入式软件适配器、连接器和驱动程序获得赋能。也就是说，软件赋能是使日常物体能够决定性地加入主流IT的最重要过程和目标。任何包含一些相关软件片段的东西都可以变得数字化重要。也就是说，普通事物正在为数字经济的下一个时代做好准备，变得非凡。高级汽车和车辆正在填充大量的软件模块，以便建立和确保高级自动化。
- en: Similarly, home, building, and industrial automation is accomplished through
    the embedding of software libraries. Flights, drones, robots, SCADA systems, sensors,
    actuators, industrial machinery, boilers, and oil rigs, are being enriched with
    software agents in order to be software-enabled. Thus, software enablement has
    become a mandatory assignment for **original equipment manufacturers** (**OEMs**).
    The next question is how to enable software-defined and -driven systems to find
    one another in order to initiate fruitful collaborations. APIs have emerged as
    the mechanism to assist in facilitating seamless and spontaneous device integration.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 同样，家庭、建筑和工业自动化是通过嵌入软件库来实现的。飞行、无人机、机器人、SCADA系统、传感器、执行器、工业机械、锅炉和油井，正通过软件代理的丰富来获得软件赋能。因此，软件赋能已成为**原始设备制造商**（**OEMs**）的必修课。下一个问题是，如何使软件定义和驱动的系统找到彼此，以便启动富有成效的协作。API已出现作为协助促进无缝和自发的设备集成的机制。
- en: RESTful services and APIs are the prominent and dominant method for enabling
    **device-to-device** (**D2D**) and **device-to-cloud** (**D2C**) integration capabilities.
    The grandiose vision of **cyber-physical systems** (**CPS**) is to get nourished
    and then flourish with the smart application of RESTful methods.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful服务和API是启用**设备到设备**（**D2D**）和**设备到云**（**D2C**）集成能力的主要和主导方法。**网络物理系统**（**CPS**）的宏伟愿景是通过智能应用RESTful方法来滋养并繁荣发展。
- en: Software-enabled clouds for the digital intelligence era
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字智能时代的软件赋能云
- en: As outlined previously, the role and responsibility of software is on the climb.
    The software is participative, pervasive, and persuasive, too. All business establishments
    embrace software engineering technologies and tools to bring in deeper and more
    decisive automation. Industry verticals are keen on strategizing and strengthening
    their software portfolio in order to get ahead of their competitors. Software
    developers across the globe build, curate, refine, and deposit their software
    applications in publicly available software registries/repositories to facilitate
    overwhelming usage. Therefore, with the faster proliferation of software modules,
    the application of software packages, products, and programs is growing steadily.
    The application landscape is expanding its horizon constantly. The application
    types are also expanding correspondingly to tackle more complex requirements,
    since there is a widespread realization that software decides the automation journey.
    In the following sections, we'll discuss the principal application types.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，软件的角色和责任正在上升。软件是参与性的、普遍的，甚至是说服性的。所有商业机构都采用软件工程技术和工具，以实现更深层次和更果断的自动化。各个行业领域都热衷于制定和加强他们的软件组合，以便在竞争中脱颖而出。全球的软件开发者构建、编辑、精炼并将他们的软件应用存放在公开的软件注册表/仓库中，以促进其广泛使用。因此，随着软件模块的快速传播，软件包、产品和程序的应用正在稳步增长。应用领域也在不断扩展其视野。应用类型也在相应地扩展，以应对更复杂的需求，因为广泛的认识是软件决定了自动化之旅。在接下来的章节中，我们将讨论主要的应用类型。
- en: The IoT applications and services
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网应用和服务
- en: With the faster maturity and stability of scores of connectivity and integration
    technologies, the mesmerizing IoT era has started to unfold and supply its unique
    contributions for society as a whole. Without an ounce of doubt, the IoT paradigm
    will bring forth a variety of innovations, disruptions, and transformations for
    all kinds of business enterprises and organizations. If leveraged appropriately
    and aggressively, every business vertical is bound to enjoy the distinct benefits
    of the flourishing IoT model for a long time. Not only businesses, but also every
    individual, institution, and innovator will benefit immensely from the growing
    IoT power. The short-term and long-term implications of the IoT domain are undoubtedly
    tremendous and trend setting as per the reports of worldwide market research and
    analyst groups. The IT discipline, which is being widely recognized as the greatest
    business enabler, is receiving a massive boost with the arrival and articulation
    of the IoT concept. The IoT idea is permeating quickly and becoming pervasive
    and persuasive too.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 随着众多连接和集成技术的快速成熟和稳定，迷人的物联网时代已经开始展开，并为整个社会提供其独特的贡献。毫无疑问，物联网范式将为各种商业企业和组织带来各种创新、颠覆和变革。如果得到适当的、积极的利用，每个商业领域都将长期享受繁荣的物联网模式的独特好处。不仅企业，而且每个人、每个机构和创新者都将从日益增长的物联网力量中受益匪浅。根据全球市场研究和分析师团体的报告，物联网领域的短期和长期影响无疑是巨大的，具有趋势性。IT学科，正被广泛认为是最大的商业推动者，随着物联网概念的到来和阐述，正获得巨大的推动。物联网理念正在迅速渗透，并变得普遍和有说服力。
- en: With the continued spread and adoption of the IoT paradigm, the business and
    IT worlds are going to be bombarded with a number of premium IoT applications
    and services. The various industry domains, including manufacturing, retail, energy,
    healthcare, smart cities, government, defense, utility, and logistics, are meticulously
    exploring, and experimenting with, various IoT technologies and tools in order
    to get ahead of their competitors. A dazzling array of pioneering IoT use cases
    are being illustrated by the various industry segments in order to be correct
    and relevant to their loyal consumers.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 随着物联网范式的持续传播和采用，商业和IT世界将受到众多高端物联网应用和服务的冲击。包括制造、零售、能源、医疗保健、智能城市、政府、国防、公用事业和物流在内的各个行业领域，都在精心探索和实验各种物联网技术和工具，以便在竞争中领先。各个行业部门通过展示一系列令人眼花缭乱的先锋物联网用例，以确保其忠诚消费者正确且相关。
- en: 'The first and foremost implication of the IoT concept is the grandiose and
    voluminous realization of digitized entities and elements (alternatively touted
    as smart objects). With the systematic leveraging of edge technologies, all kinds
    of everyday things are being transitioned to be self-, surrounding-, and situation-aware.
    The second noteworthy output arising from the advancements in the IoT space is
    the faster proliferation of connected devices. All kinds of embedded systems are
    being networked and made to join in the mainstream computing. The third and final
    result is the growing array of device services, which are typically microservices.
    With the speedier adoption of the **microservices architecture** (**MSA**), we
    will be bombarded with a large number of microservices to produce next-generation
    enterprise, cloud, web, and mobile applications. It''s anticipated that by the
    year 2020, we will have the following:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 物联网概念的第一个也是最重要的含义是数字化实体和元素（也被称为智能对象）的宏伟和大量实现。通过系统地利用边缘技术，各种日常物品正在转变为自我感知、周围环境感知和情境感知。从物联网领域的进步中产生的第二个值得注意的成果是连接设备的更快普及。各种嵌入式系统正在联网，并加入主流计算。第三个也是最终的结果是设备服务的增长，这些服务通常是微服务。随着**微服务架构**（**MSA**）的更快采用，我们将被大量微服务淹没，以生产下一代企业、云、Web和移动应用程序。预计到2020年，我们将有以下几点：
- en: Millions of microservices
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数百万微服务
- en: Billions of connected devices
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 十亿连接设备
- en: Trillions of digitized entities
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 万亿数字化实体
- en: We have massive cloud centers for large-scale data storage and processing. We
    have both shared and dedicated network infrastructures in order to quickly carry
    data to faraway cloud environments. There are persistent and transient storage
    options. The costs of cloud storage capacities are coming down steadily. The faster
    proliferation of cloud centers across the world takes away the worry of setting
    up and sustaining massive IT infrastructures locally. There are insightful and
    integrated big, fast, streaming and IoT data analytics platforms. There are many
    enabling frameworks, automated tools, and powerful engines that are emerging and
    evolving to accelerate the process of transitioning data to information to knowledge,
    and then to wisdom. Thus, the emergence and convergence of several proven and
    potential technologies and tools simplifies and speeds up data analytics and mining
    for the purpose of extracting actionable insights. In short, the communication
    and collaboration of IoT devices results in a huge amount of poly-structured data,
    which has to be consciously captured, cleansed, and crunched in order to unearth
    hidden patterns, useful associations, bigger possibilities, newer opportunities,
    avoidable risks, and real-world intelligence. The knowledge discovered gets disseminated
    to the correct systems, devices, applications, data sources, and storages in order
    to empower them to determine their next course of action.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 我们拥有大规模数据存储和处理的庞大云中心。我们既有共享也有专用的网络基础设施，以便快速将数据传输到遥远的云环境。有持久和瞬态的存储选项。云存储容量的成本正在稳步下降。全球云中心的快速普及消除了在本地设置和维护大规模IT基础设施的担忧。有洞察力和集成的大数据、快速、流式和物联网数据分析平台。有许多使能框架、自动化工具和强大的引擎正在出现和演变，以加速数据转化为信息、知识，然后转化为智慧的过程。因此，几种经过验证和潜在的技术和工具的出现和融合简化并加快了数据分析和挖掘，以提取可操作的见解。简而言之，物联网设备的通信和协作产生了大量多结构化数据，这些数据必须被有意识地捕获、清洗和压缩，以便揭示隐藏的模式、有用的关联、更大的可能性、新的机会、可避免的风险和现实世界的智慧。所发现的知识将被传播到正确的系统、设备、应用程序、数据源和存储中，以便使它们能够确定其下一步的行动计划。
- en: Cloud-enabled applications
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云启用应用程序
- en: As articulated in the preceding section, we will look at a variety of IoT applications
    and services in the days ahead. Besides, we will also see enterprise-scale, distributed
    applications running on cloud servers. With the overwhelming success of MSA, all
    kinds of legacy (monolithic) applications are methodically being enabled to be
    cloud-ready and microservices-centric applications, which are famous for scalability,
    availability, and flexibility. That is, massive applications are being partitioned
    into a number of fine-grained, publicly-discoverable, network-accessible, interoperable,
    API-enabled, composable, portable, horizontally-scalable, and independently-deployable
    microservices. There are application-modernization and -migration toolkits to
    move refactored and remedied applications to cloud environments in order to reap
    all the originally envisaged benefits of the cloud conundrum. There are best practices,
    integrated platforms, and patterns (architecture, design, integration, orchestration,
    security, and deployment) aplenty to quickly undertake legacy modernization to
    produce cloud-enabled applications.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，在接下来的日子里，我们将探讨各种物联网应用和服务。此外，我们还将看到在云服务器上运行的、企业级、分布式应用。随着MSA（微服务架构）的巨大成功，所有各种遗留（单体）应用正在有条不紊地被启用为云就绪和以微服务为中心的应用，这些应用以其可扩展性、可用性和灵活性而闻名。也就是说，大型应用正在被分割成多个细粒度、公开可发现、网络可访问、互操作、API启用、可组合、可移植、水平可扩展和独立部署的微服务。有应用现代化和迁移工具包，可以将重构和修复后的应用迁移到云环境中，以获得云困境最初设想的所有好处。有大量最佳实践、集成平台和模式（架构、设计、集成、编排、安全性和部署），可以快速进行遗留现代化，以产生云启用应用。
- en: Cloud-native applications
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云原生应用
- en: Newer applications are being designed, developed, debugged, and deployed directly
    in cloud environments. There are production, execution, and orchestration platforms
    made available on cloud environments (private, public, and hybrid). These applications
    are intelligent enough to accrue all the benefits of cloud computing. Microservices
    are the basic and optimal building block for building enterprise-scale and business-critical
    applications to be delivered through cloud environments. Microservices are formally
    containerized and deployed multiple times per day in order to meet the varying
    expectations of businesses and customers. There are a number of automated tools
    that eliminate all sorts of friction between development and operation teams so
    as to ensure the faster delivery of updated and upgraded applications to their
    users and subscribers.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 新的应用正在被设计、开发、调试和直接部署在云环境中。在云环境中（私有、公共和混合）提供了生产、执行和编排平台。这些应用足够智能，能够累积云计算的所有好处。微服务是构建企业级和业务关键应用的基本和最佳构建块，这些应用将通过云环境交付。微服务被正式容器化，并且每天部署多次，以满足企业和客户不断变化的需求。有许多自动化工具消除了开发和运维团队之间的所有摩擦，以确保更快地将更新和升级的应用交付给用户和订阅者。
- en: Mobile, handheld, and wearable applications
  id: totrans-28
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动、手持和可穿戴应用
- en: Today, there are billions of smartphones acting as the main device to connect,
    access, and assess software applications any time, anywhere, and on any network.
    That is, all kinds of cloud, web, and enterprise applications are being stuffed
    with mobile interfaces. This mobility enablement has become the norm for application
    developers and providers. Not only applications, but also software and hardware
    infrastructures, are being fitted with mobile interfaces to enable remote monitoring,
    management, diagnosing, and repairs. In our everyday life, we encounter millions
    of mobile apps being developed and stocked in mobile stores. Smartphone users
    can download and install them with ease. Thus, these days, mobile, handheld, and
    wearable applications are receiving a lot of attention and affection from users
    and developers alike. We need competent mechanisms to attach APIs to these applications
    so that other applications/services can easily find and bind to come out with
    business-centric applications. There are several easy-to-understand and -use methods
    and mechanisms for producing technology-agnostic RESTful services and their APIs.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 今天，数十亿部智能手机作为连接、访问和评估软件应用的主体设备，无论何时何地，无论何种网络，都能随时使用。也就是说，各种云、网页和企业应用都充满了移动界面。这种移动能力已经成为应用开发者和提供商的常态。不仅应用，软件和硬件基础设施也正在配备移动界面，以便进行远程监控、管理、诊断和维修。在我们的日常生活中，我们遇到数百万个在移动商店开发和存储的移动应用。智能手机用户可以轻松下载和安装它们。因此，如今，移动、手持和可穿戴应用都受到了用户和开发者的大量关注和喜爱。我们需要有能力的机制将这些应用的API连接起来，以便其他应用/服务可以轻松找到并绑定，从而推出以业务为中心的应用。有几种易于理解和使用的生成技术无关的RESTful服务和它们API的方法和机制。
- en: Transactional, operational, and analytical applications
  id: totrans-30
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事务性、操作性和分析型应用
- en: Enterprise applications vary in their capabilities. They not only have to fulfill
    their functional requirements well, but should also fulfil a number of **non-functional
    requirements** (**NFRs**), which are known as the **quality of service** (**QoS**)
    and **quality of experience** (**QoE**) attributes. Performance, scalability,
    sustainability, modifiability, extensibility, availability, resiliency, security,
    reliability, and adaptability requirements are being categorized as the important
    NFRs. As for the public, open and cheap internet emerges as the prime communication
    infrastructure, since most of the applications are web-enabled. That is, web interfaces
    are the widely-used mechanism for accessing web-scale applications.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 企业应用在功能方面各不相同。它们不仅要很好地满足其功能需求，还应该满足许多**非功能性需求**（**NFRs**），这些被称为**服务质量**（**QoS**）和**用户体验质量**（**QoE**）属性。性能、可扩展性、可持续性、可修改性、可扩展性、可用性、弹性、安全性、可靠性和适应性需求被归类为重要的NFRs。至于公众，开放的互联网因其廉价而成为主要的通信基础设施，因为大多数应用都是网页化的。也就是说，网页界面是访问网页规模应用的广泛使用的机制。
- en: '**Business-to-business** (**B2B**) and **business-to-consumer** (**B2C**) applications
    are typically transactional in nature. There are viable techniques for ensuring
    complex transactions. With the spread of geographically distributed systems, the
    need for distributed transactions becomes more important. As we all know, the
    web is the dominant and decisive way of accessing information, content, applications,
    services, and data sources. Therefore, a number of **online transaction processing**
    (**OLTP**) systems have arisen in order to natively support different transaction
    requirements.'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '**企业对企业**（**B2B**）和**企业对消费者**（**B2C**）应用在本质上通常是事务性的。有可行的技术来确保复杂的交易。随着地理分布系统的普及，分布式交易的需求变得更加重要。众所周知，网络是访问信息、内容、应用、服务和数据源的主导和决定性方式。因此，出现了许多**在线事务处理**（**OLTP**）系统，以原生支持不同的交易需求。'
- en: Like transactions, data analytics occupies the central part of next-generation,
    enterprise-scale systems. Data gets carefully collected, cleansed, and crunched
    in order to extract actionable insights from growing data heaps. Extracted insights
    are used to make intelligent and real-time decisions. Precisely speaking, these
    are going to be data-driven insights and insight-driven decisions. There is no
    place for intuition-based decisions any more. There are analytical platforms and
    data warehouses/marts/cubes that facilitate data mining, analytics, and investigations.
    Analytics is the core of any business application, IT platform, and infrastructure
    to deliver their unique services. All of the next-generation applications are
    innately empowered to be analytic. Existing applications are being enabled to
    be analytic by incorporating analytical applications, such as **online analytical
    processing** (**OLAP**) applications. Thus, analytical applications are going
    to be the prime component of mainstream IT.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 就像交易一样，数据分析占据了下一代企业级系统的核心部分。数据被精心收集、清洗和计算，以便从不断增长的数据堆中提取可操作的见解。提取的见解被用于做出智能和实时的决策。精确地说，这些将是数据驱动的见解和见解驱动的决策。基于直觉的决策不再有立足之地。存在分析平台和数据仓库/集市/立方体，它们促进了数据挖掘、分析和调查。分析是任何商业应用、IT平台和基础设施的核心，以提供它们独特的服务。所有下一代应用都天生具有分析能力。现有应用通过整合分析应用，如**在线分析处理**（**OLAP**）应用，被赋予了分析能力。因此，分析应用将成为主流IT的主要组成部分。
- en: Finally, with the seamless linkage of operational technology and information
    technology environments, software applications hosted in enterprise and cloud
    servers have to be able to receive real-time operational data and event messages
    to be right and relevant for their consumers. A variety of operational applications
    and databases are emerging to meet the evolving needs of operational environments.
    Ground-level operational systems emit a lot of time-series data and event data,
    and they get streamed to enterprise systems (transactional and analytical data
    stores). There are data analytics platforms that make sense of the data streaming
    into them. Smarter environments, such as smarter hotels, homes, hospitals, manufacturing
    floors, and **cloud-enabled data centers** (**CeDCs**), are going to be empowered
    when they get seamlessly integrated with nearby or faraway transactional and analytical
    systems.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，随着操作技术和信息技术环境的无缝链接，托管在企业服务器和云服务器上的软件应用必须能够接收实时操作数据和事件消息，以便对消费者来说是正确和相关的。各种操作应用和数据库正在出现，以满足不断变化的操作环境需求。地面操作系统产生大量的时序数据和事件数据，这些数据被流式传输到企业系统（事务性和分析性数据存储）。存在能够理解流入它们的数据的分析平台。更智能的环境，如智能酒店、家庭、医院、制造车间和**云启用数据中心**（**CeDCs**），在它们与附近的或远处的交易性和分析系统无缝集成时，将获得赋能。
- en: Knowledge visualization applications
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 知识可视化应用
- en: The ensuing era is definitely knowledge-centric. Knowledge discovery and dissemination
    are going to be the prime activity for knowledge workers. Software services, personal
    as well as professional devices, IT systems, and business applications have to
    be supplied with real-time and real-world knowledge in order to be adaptive terms
    of in their actions and reactions. There are 360-degree dashboards, visualization
    platforms, and report generation tools available in order to graphically and illustratively
    display and convey the results. Let's look at these applications in more detail.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来的时代无疑是知识为中心的。知识发现和传播将成为知识工作者的主要活动。软件服务、个人和专业设备、IT系统和商业应用必须提供实时和现实世界的知识，以便在行动和反应上具有适应性。有360度仪表盘、可视化平台和报告生成工具可供使用，以便图形化和直观地显示和传达结果。让我们更详细地看看这些应用。
- en: Social applications
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 社交应用
- en: This set of applications is currently very popular among young people. Typically,
    web 1.0 applications are simple and one-way, whereas web 2.0 applications are
    social and facilitate two-way communication. That is, users not only read, but
    also write back. To facilitate outside-in thinking, social applications are the
    way forward. There are several social and professional applications that empower
    society as a whole. Digital communities are being formulated and employed to equip
    people with their skills and knowledge sharing. Social applications, because of
    their large number of subscribers and followers, produce a lot of useful data.
    When social- and people-related data gets consistently collected and subjected
    to a variety of investigations, individuals and institutions are bound to find
    a lot of actionable insights. There are new types of analytical capabilities,
    such as social network analytics, behavioral analytics, and sales promotion and
    marketing campaign analytics, that have emerged due to the widespread proliferation of
    social applications.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这套应用目前在年轻人中非常受欢迎。通常，Web 1.0 应用是简单且单向的，而 Web 2.0 应用则是社交性的，并促进双向沟通。也就是说，用户不仅阅读，还能回写。为了促进从外向内的思考，社交应用是前进的方向。有几个社交和专业应用能够赋予整个社会力量。数字社区正在形成并被用来装备人们的技能和知识分享。由于社交应用拥有大量的订阅者和追随者，它们产生了大量有用的数据。当社交和与人们相关的数据被持续收集并受到各种调查时，个人和机构必然会发现许多可操作的观点。由于社交应用的广泛传播，出现了新的分析能力，例如社交网络分析、行为分析和销售促销及营销活动分析。
- en: Scientific and technical applications
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 科学和技术应用
- en: Software plays a vital role in shaping various scientific and technical applications.
    Scientific experiments generate a lot of data, which can be captured and crunched
    to generate usable results. Similarly, there are technical applications that leverage
    the software capabilities. These two disciplines require the unique contributions
    of software platforms, products, patterns, and processes in order to be highly
    relevant to their users. There are mathematics-specific software packages aplenty
    to help mathematicians with their research activities; other science, technology,
    engineering, and art disciplines are benefiting immensely and immeasurably from
    the advancements and developments in the software space. There are innumerable
    innovations in the **information and communication technology** (**ICT**) landscape
    toward software deployment and execution.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 软件在塑造各种科学和技术应用中扮演着至关重要的角色。科学实验会产生大量数据，这些数据可以被捕捉和加工以生成可用的结果。同样，也有利用软件能力的技术应用。这两个领域需要软件平台、产品、模式和流程的独特贡献，以便高度相关于其用户。有大量的针对数学的软件包来帮助数学家进行他们的研究活动；其他科学、技术、工程和艺术学科也从软件领域的进步和发展中获得了巨大的和无法衡量的益处。在软件部署和执行方面，**信息和通信技术**（**ICT**）领域出现了无数的创新。
- en: Centralized and distributed applications
  id: totrans-41
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集中式和分布式应用
- en: 'There has been a swing between centralized and distributed computing models.
    Clouds typically are centralized, consolidated, and converged environments that
    host applications. Recently, clouds have been federated in order to host and run
    distributed applications. Considering the exponential growth of data and the complexity
    of applications, the onset of distributed computing can''t be stopped. With the
    cloud paradigm, leveraging commodity servers for large-scale application and data
    processing is gaining momentum. Horizontal scalability is preferred over vertical
    scalability and, hence, distributed systems are enjoying a surge in popularity.
    Applications are also being methodically partitioned to be distributed. Data gets
    distributed across thousands of worker/slave nodes. The computation moves to the
    place where data resides. There are a number of paradigm shifts with the explosion
    in distributed computing. The issue of network latency comes into the picture.
    Server virtualization has also spread to network and storage virtualization with
    the greater acceptance and adoption of distributed computing. The arrival and
    articulation of MSA lead to the realization of distributed applications. In short:
    distributed computing and applications are inevitable. They have to be welcome
    in order to meet fast-evolving business and IT requirements.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 集中式和分布式计算模型之间存在着波动。云通常是由集中、整合和融合的环境组成，用于托管应用。最近，云已经实现了联邦化，以便托管和运行分布式应用。考虑到数据的指数增长和应用的复杂性，分布式计算的出现是无法阻止的。在云范式下，利用通用服务器进行大规模应用和数据处理的势头正在增强。水平可扩展性优于垂直可扩展性，因此分布式系统正受到越来越多的欢迎。应用也被有系统地分割，以便进行分布式处理。数据被分布到数千个工作/从节点上。计算移动到数据所在的地方。随着分布式计算的爆炸式增长，网络延迟问题也随之而来。随着分布式计算的接受和采用程度的提高，服务器虚拟化也扩展到了网络和存储虚拟化。MSA的出现和阐述导致了分布式应用的实现。简而言之：分布式计算和应用是不可避免的。为了满足快速发展的商业和IT需求，它们必须被欢迎。
- en: There are certain limitations associated with centralized environments and applications.
    The overarching views are that distributed systems ensure high availability, affordability,
    and scalability. That is, the motto of future IT is distributed deployment and
    centralized monitoring, measurement, and management.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 与集中式环境和应用相关的某些局限性。总体观点是，分布式系统确保了高可用性、可负担性和可扩展性。也就是说，未来IT的座右铭是分布式部署和集中式监控、测量和管理。
- en: Decentralized and intelligent applications with blockchain technology
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于区块链技术的去中心化和智能应用
- en: As noted in the preceding section, centralized applications are well-suited
    to certain situations. However, in the recent past, there has been an increased
    market for decentralized applications, with the faster adoption and adaptation
    of the blockchain technology. The blockchain paradigm promises a bevy of disruptions
    and transformations when realizing and running decentralized applications across
    multiple industry verticals. The issues that face centralized systems and applications
    are nullified in decentralized services and solutions. Typically, decentralized
    systems are owned and operated by different organizations and, hence, the security
    of decentralized software is technologically tightened. The much-touted unbreakable
    and impenetrable security of software systems is guaranteed through the decentralized
    approach. The **peer-to-peer** (**P2P**) interactions facilitated by the decentralized
    approach is turning out to be a silver bullet for many recent use cases. The faster
    maturity and stability of blockchain technology is clearly driving IT professionals
    and organizations toward the production of decentralized systems. The blockchain
    paradigm also resulted in the new concept of smart contracts, which leads to the
    realization of adaptive applications.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 如前文所述，集中式应用非常适合某些场景。然而，在最近几年，去中心化应用的市场需求有所增加，这得益于区块链技术的快速采用和适应。区块链范式在实现和运行跨多个行业垂直领域的去中心化应用时，承诺带来一系列的颠覆和变革。集中式系统和应用面临的问题在去中心化服务和解决方案中得到了消除。通常，去中心化系统由不同的组织拥有和运营，因此去中心化软件的安全性在技术上得到了加强。通过去中心化方法，软件系统的所谓不可破和不可渗透的安全性得到了保证。去中心化方法促进的**点对点**（**P2P**）交互正在成为许多近期用例的银弹。区块链技术的快速成熟和稳定性明显推动着IT专业人士和组织向去中心化系统的生产迈进。区块链范式还导致了智能合约这一新概念的出现，这导致了自适应应用的实现。
- en: Composite and multi-container applications
  id: totrans-46
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 复合和多容器应用
- en: Decomposition and composition techniques have been extensively used to achieve
    breakthroughs in software engineering. Monolithic applications are being dismantled
    through decomposition tips, whereas decomposed application modules are being combined
    with one another in a sequenced manner in order to create smarter and more sophisticated
    applications. With containers emerging as the most appropriate runtime environment
    for microservices, we need to produce enterprise-scale, mission-critical, and
    adaptive applications out of containerized microservices. There are composition
    (orchestration and choreography) platforms and engines to simplify and speed up
    the act of building process-aware and people-centric applications. There are process-enabling
    languages that help us to develop process-optimized and -integrated applications.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 分解和组合技术已被广泛用于在软件工程中取得突破。单体应用通过分解技巧被拆解，而分解的应用模块则以有序的方式相互组合，以创建更智能和更复杂的应用。随着容器成为微服务的最合适的运行环境，我们需要从容器化的微服务中生产出企业级、关键任务和自适应应用。有组合（编排和协奏）平台和引擎来简化并加快构建过程感知和以人为本的应用。还有使能语言，帮助我们开发过程优化和集成的应用。
- en: Event-driven applications
  id: totrans-48
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 事件驱动应用
- en: We still have scores of monolithic and mainframe applications, especially in
    the financial sector. Today, most of the applications are following the client/server
    style. There are cloud (online, on demand, and off-premise) applications. With
    a variety of additional and third-party systems joining, the application architecture
    moves to *n*-tier distributed computing. With blockchain, the P2P architectural
    pattern is getting a lot of attention from various stakeholders. There are other
    variants, such as **service-oriented architecture** (**SOA**) and **resource-oriented
    architecture** (**ROA**), that inherently support request/response, and fire and
    forget. And also, there are ways to achieve light and loose coupling between participating
    components.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 我们仍然有许多单体和主机应用，尤其是在金融领域。如今，大多数应用都遵循客户端/服务器风格。有云（在线、按需和离场）应用。随着各种附加和第三方系统的加入，应用架构转向*n*层分布式计算。随着区块链的出现，P2P架构模式得到了来自各利益相关者的广泛关注。还有其他变体，如**面向服务的架构**（**SOA**）和**面向资源的架构**（**ROA**），它们本质上支持请求/响应和触发即忘。此外，还有实现参与组件轻量级和松散耦合的方法。
- en: But the future undoubtedly belongs to **event-driven architecture** (**EDA**),
    which is the way forward to realize sensitive and responsive (S and R) applications.
    With the unprecedented explosion of independent, yet connected, devices, the EDA
    style facilitates decoupled applications. Any noteworthy event or state change
    triggers other devices and applications to jump into action. There are event stores
    and processing platforms (open source as well as commercial-grade solutions).
    Simple/atomic events get accumulated and aggregated to form complex events. Event
    messages are streamed to be subjected to a variety of investigations, which are
    greatly simplified through leveraging streaming analytics solutions and solutions.
    There are enabling frameworks for event and stream processing. Applications are
    being innately empowered to be adaptive, based on any insights extracted from
    event messages. Applications are going to be people-centric and proactive, while
    delivering their unique services. EDA is one of the prescribed ways to build intelligent
    systems.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 但毫无疑问，未来属于**事件驱动架构**（**EDA**），这是实现敏感和响应性（S和R）应用程序的前进方向。随着独立但相互连接的设备前所未有的爆炸性增长，EDA风格促进了解耦应用程序。任何值得注意的事件或状态变化都会触发其他设备和应用程序采取行动。存在事件存储和处理平台（包括开源和商业级解决方案）。简单/原子事件积累和聚合形成复杂事件。事件消息被流式传输，以便进行各种调查，这些调查通过利用流分析解决方案和解决方案得到了极大的简化。存在用于事件和流处理的启用框架。应用程序被内在赋予根据从事件消息中提取的任何洞察进行适应的能力。应用程序将变得以人为中心，积极主动，同时提供其独特的服务。EDA是构建智能系统的一种推荐方法。
- en: High-quality applications
  id: totrans-51
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 高质量应用程序
- en: As discussed, there are I/O device-specific, server-centric, language-oriented,
    architecture-inspired, and technology-agnostic applications aplenty. Today, most
    applications are being coded to fulfil the functional requirements identified.
    With IT being pronounced as the greater business-enabler, evolving business requirements
    are insisting that IT professionals and professors devise workable ways of incorporating
    NFRs into the source code. The prominent NFRs include performance, scalability,
    availability, resiliency, reliability, security, extensibility, accessibility,
    and modifiability. These QoS and QoE attributes are being mandated to be elegantly
    embedded in our everyday software applications. There is a new discipline that
    is emerging and grasping the attention and affection of software engineers and
    architects—**site reliability engineering** (**SRE**); that is, not only business
    applications and IT systems produced in an agile fashion, but also they have to
    be designed, developed, debugged, delivered, and deployed in a highly reliable
    manner. The written goal is to ensure application resiliency and reliable IT infrastructures.
    Future challenges for IT experts are many and diverse. Building high-quality applications
    is beset with innumerable difficulties. Scholars and scientists are working overtime
    to bring forth best practices, knowledge guides, optimized processes, architectural
    and design patterns, integrated platforms, competent infrastructures, and easy-to-understand
    and -use procedures to simplify and streamline the production of high-quality
    software systems.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 正如讨论的那样，有大量针对I/O设备特定、服务器中心、语言导向、架构启发和技术无关的应用程序。今天，大多数应用程序都是被编码以满足已识别的功能需求。随着IT被宣布为更大的业务推动者，不断发展的业务需求要求IT专业人员和教授设计可行的方法将NFRs（非功能性需求）纳入源代码。突出的NFRs包括性能、可扩展性、可用性、弹性、可靠性、安全性、可扩展性、可访问性和可修改性。这些QoS（服务质量）和QoE（用户体验质量）属性被要求优雅地嵌入到我们日常的软件应用程序中。一个新兴的新学科正在出现，并吸引了软件工程师和架构师的注意和喜爱——**站点可靠性工程**（**SRE**）；也就是说，不仅业务应用程序和敏捷生产的IT系统，而且它们还必须以高度可靠的方式进行设计、开发、调试、交付和部署。书面目标是确保应用程序的弹性和可靠的IT基础设施。IT专家的未来挑战众多且多样化。构建高质量应用程序充满了无数困难。学者和科学家正在加班加点地提出最佳实践、知识指南、优化流程、架构和设计模式、集成平台、有能力的基础设施以及易于理解和使用的程序，以简化并简化高质量软件系统的生产。
- en: Resilient applications
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 弹性应用程序
- en: As mentioned elsewhere, microservices is positioned as the preferred element
    for building and deploying next-generation applications. Different and distributed
    microservices, when composed, form flexible applications. With the widespread
    insistence of reliable IT systems and business applications, there are viable
    methods emerging and evolving fast for embedding precisely the much-needed reliability
    competency into software systems. Generally speaking, system reliability is the
    application's resiliency and the system's elasticity. That is, when faced with
    any internal or external attack, the application has to survive in order to continuously
    deliver its obligations. Applications have to be innately empowered to proactively
    detect any issues, and then contain them to stop them from cascading into other
    system components. Thus, systems have to be technologically fault-tolerant in
    order to be highly available. In short, the resiliency capability is to identify
    and avoid issues without bringing down the whole system. The deployment of additional
    instances for each service comes in handy when fulfilling user requests. The second
    aspect is the elasticity feature; that is, when systems are under heavy load,
    they have to scale up or out accordingly to tackle the extra rush of users and
    data messages. Thus, besides ensuring the utmost security for the application
    and data, guaranteeing reliability is gaining importance.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，微服务被定位为构建和部署下一代应用的优选元素。不同的分布式微服务在组合后形成灵活的应用。随着对可靠IT系统和业务应用的广泛坚持，正在出现并迅速发展的可行方法，将所需的可靠性能力精确嵌入到软件系统中。一般来说，系统可靠性是应用的可恢复性和系统的弹性。也就是说，面对任何内部或外部攻击，应用必须生存下来，以便持续履行其义务。应用必须天生具备主动检测任何问题的能力，然后将其遏制，防止其级联到其他系统组件。因此，系统在技术上必须容错，以便具有高可用性。简而言之，恢复能力是识别和避免问题，而不会使整个系统崩溃。在满足用户请求时，为每个服务部署额外的实例非常方便。第二个方面是弹性特性；也就是说，当系统承受重负载时，它们必须相应地扩展或扩展，以应对用户和数据消息的额外涌入。因此，除了确保应用和数据的安全之外，保证可靠性正变得越来越重要。
- en: The REST paradigm for application modernization and integration
  id: totrans-55
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用现代化和集成的REST范式
- en: Monolithic and massive applications are being modernized and migrated to cloud
    environments in order to reap all the originally envisaged benefits of the cloud
    computing model. Microservices are emerging as the most optimized building block
    to produce enterprise-scale applications. Not only for development but also for
    application modernization, microservices are being touted as the most suitable
    approach. That is, legacy applications are being systematically partitioned into
    multiple interoperable, portable, publicly discoverable, network accessible, reusable,
    composable, fine grained, technology-agnostic, containerized, horizontally scalable,
    and independently deployable microservices. The point here is that every microservice
    exposes one or more interfaces. RESTful interfaces are the most popular ones for
    microservices to connect and compose bigger and better services. Microservices
    are therefore typically RESTful services. Thus, application refactoring and remediation
    are being sped up and streamlined through RESTful services and their APIs. Service,
    application and data integration, and orchestration happen through RESTful APIs.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 单一和大规模的应用正在被现代化并迁移到云环境中，以便获得云计算模型最初设想的所有好处。微服务正成为生产企业级应用最优化构建块。不仅适用于开发，对于应用现代化，微服务也被誉为最合适的方法。也就是说，遗留应用正在被系统性地分割成多个互操作、可移植、公开可发现、网络可访问、可重用、可组合、细粒度、技术无关、容器化、水平可扩展和独立可部署的微服务。这里的要点是每个微服务都暴露一个或多个接口。RESTful接口是微服务连接和组合更大、更好服务最受欢迎的接口。因此，微服务通常是RESTful服务。因此，通过RESTful服务和它们的API，应用重构和修复正在加速和简化。服务、应用和数据集成以及编排通过RESTful
    API进行。
- en: In short, new technologies and toolkits, programming and script languages, architecture
    and design patterns, integrated platforms, pioneering algorithms, enabling frameworks,
    composable and clustered infrastructures, optimized processes, fresh building
    blocks, data formats, and protocols are constantly emerging and impacting the
    discipline of software engineering. Agile software development methodologies are
    getting the importance to build applications quickly. Besides, the role and responsibility
    of microservices is increasingly felt in realizing enterprise-scale applications.
    That is, besides agile techniques, microservices contribute immensely to the rapid
    development of applications. In other words, applications are being readied instantaneously
    by compositing multiple microservices.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，新技术和工具包、编程和脚本语言、架构和设计模式、集成平台、开创性算法、使能框架、可组合和集群化的基础设施、优化流程、新的构建模块、数据格式和协议不断涌现并影响着软件工程学科。敏捷软件开发方法越来越受到重视，以快速构建应用程序。此外，微服务在实现企业级应用中的作用和责任越来越明显。也就是说，除了敏捷技术外，微服务对应用程序的快速开发做出了巨大贡献。换句话说，通过组合多个微服务，应用程序可以瞬间准备就绪。
- en: Applications are mainly interdependent. They can't work in isolation. They have
    to be integrated dynamically to offer users an integrated experience. Applications
    also have to be linked up with other applications, data sources and stores, data
    processing and data analytics platforms, and messaging and middleware systems.
    Thus, the inescapable integration has to happen via well-intended and designed
    APIs. Finally, legacy applications have to be dismantled into easily manageable
    and loosely coupled modules. These modular components, in conjunction with management
    solutions, will significantly enhance their utilization, efficiency, visibility,
    and controllability. Further on, on a per-need basis, several modules can be picked
    up and combined to create bigger and better applications.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序主要相互依赖。它们不能独立工作。它们必须动态集成，为用户提供综合体验。应用程序还必须与其他应用程序、数据源和存储、数据处理和分析平台以及消息和中间件系统连接起来。因此，不可避免地需要通过精心设计和意图明确的API进行集成。最后，遗留应用程序必须分解成易于管理和松散耦合的模块。这些模块化组件与管理解决方案相结合，将显著提高其利用率、效率、可见性和可控性。进一步来说，根据需要，可以选择和组合几个模块来创建更大、更好的应用程序。
- en: Application programming interfaces
  id: totrans-59
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用程序编程接口
- en: We are heading toward everything as a service. **Application programming interfaces**
    (**APIs**) have become the technology of choice for enterprises to express and
    expose their capabilities as services. Every service has to have one or more interfaces
    and backend implementations. Companies around the world are plunging into the
    usage of APIs. A few unique usage models have emerged to assist business enterprises
    in meeting changing business needs with all alacrity and adaptivity. Enterprises
    that are strategizing for digital transformation are expediting the task of leveraging
    multiple channels and RESTful APIs to get ahead of their competitors. APIs have
    become the strategic asset for organizations to be easily connected with their
    business partners, suppliers, retailers, distributors, warehouse providers, logistics
    and supply chain experts, and consumers. It's simply the API economy. They are
    enabling design patterns and usage models as ambitious businesses across the world
    embrace the concept of APIs.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正朝着一切即服务的方向发展。**应用程序编程接口**（**APIs**）已成为企业表达和展示其服务能力的技术选择。每个服务都必须有一个或多个接口和后端实现。全球各地的公司都在积极采用API。一些独特的使用模式已经出现，以帮助企业迅速适应不断变化的市场需求。那些正在制定数字化转型战略的企业正在加速利用多个渠道和RESTful
    API来超越竞争对手。API已成为组织与业务伙伴、供应商、零售商、分销商、仓库提供商、物流和供应链专家以及消费者轻松连接的战略资产。这简单地说就是API经济。它们正在推动设计模式和用法模型，随着全球范围内的企业拥抱API的概念。
- en: 'This section looks at the following four APIs usage models that can address
    business needs with all the requisite agility and efficiency:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 本节探讨了以下四种API使用模型，这些模型可以满足业务需求，并具有所需的敏捷性和效率：
- en: Public APIs
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 公共API
- en: Internal and private APIs
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 内部和私有API
- en: APIs for IoT sensors and actuators
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用于物联网传感器和执行器的API
- en: APIs for integration
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 集成API
- en: Public APIs for external integration and innovation
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于外部集成和创新的公共API
- en: We're being bombarded with a number of next-generation and novelty-attached
    I/O devices. With miniaturization technologies flourishing consistently, we're
    being supplied with a slew of slim and sleek, multifaceted, and powerful smartphones,
    tablets, wearables, portables, and other IoT devices. That is, the digital device
    ecosystem is expanding continuously. On the other side, the rapidly accumulating
    digital content, information, and services are being made available to be found,
    accessed, and consumed anywhere, at any time, on any network, and on any device.
    That is, there are fresh channels to connect with enterprise and cloud servers
    to acquire and aggregate the various services, such as information, commercial,
    transaction, analytical, and other online services. In order to standardize service
    discovery, matching, and leveraging, the widely recommended approach is to leverage
    APIs. APIs are emerging as the next-generation channel for enterprises to share
    their services and information in a controlled manner. With the steadily growing
    digital ecosystem, APIs have emerged as the way forward for multinational corporations
    to deliver their offerings to a wider market. With the explosion in digital assets,
    APIs are being established as the prime method for accessing, assessing, and using
    digital assets. There is a rush of digital service providers. To create enhanced
    business value, geographically distributed service providers need to be identified
    and integrated with one another on-demand through APIs. Every service is being
    blessed with one or more APIs. There are API management and gateway solutions
    from the open source community as commercial-grade solution providers to reduce
    the API development, operational, and management complexities.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正被新一代和具有创新功能的I/O设备所包围。随着微型化技术的持续发展，我们得到了一系列轻薄、多功能、强大的智能手机、平板电脑、可穿戴设备、便携式设备和其他物联网设备的供应。也就是说，数字设备生态系统正在持续扩展。另一方面，快速积累的数字内容、信息和服务的可用性使得在任何时间、任何网络、任何设备上都可以找到、访问和消费。也就是说，有新的渠道可以连接到企业云服务器以获取和聚合各种服务，如信息、商业、交易、分析和其他在线服务。为了标准化服务发现、匹配和利用，广泛推荐的方法是利用API。API正在成为企业以受控方式共享其服务和信息的下一代渠道。随着数字生态系统的稳步增长，API已成为跨国公司向更广泛市场提供其产品的前进之路。随着数字资产的爆炸性增长，API正在成为访问、评估和使用数字资产的主要方法。数字服务提供商的数量激增。为了创造更高的商业价值，地理上分布的服务提供商需要通过API按需识别和集成。每个服务都配备了一个或多个API。开源社区提供了API管理和网关解决方案，作为商业级解决方案提供商，以降低API开发、运营和管理复杂性。
- en: Private APIs for internal purposes
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 用于内部目的的私有API
- en: Internal APIs improve utilization and enhance efficiency within and across an
    enterprise. Internal APIs makes it easy for internal developers to discover and
    consume internal services in a free-flowing fashion. The emerging trend is that
    every worthwhile application meticulous being service and API-enabled. Typically,
    every enterprise is blessed with a variety of backend systems, such as database
    management systems, **message-oriented middleware** (**MoM**) solutions, message
    brokers and queues, data processing and data analytics systems, and knowledge
    visualization tools, which are service enabled to expose their own interfaces
    (APIs) to facilitate the goals of service connectivity, integration, and orchestration.
    When an organization wants to create fresh APIs for internal use, it has to add
    them on top of the service APIs of existing systems.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 内部API提高了企业内部以及跨企业的利用率和效率。内部API使得内部开发者能够以自由流动的方式轻松发现和消费内部服务。新兴的趋势是每个有价值的应用程序都细致地被服务和API启用。通常，每个企业都配备有各种后端系统，如数据库管理系统、**面向消息的中间件**（**MoM**）解决方案、消息代理和队列、数据处理和数据分析系统以及知识可视化工具，这些系统都启用了服务以暴露它们自己的接口（API），以促进服务连接、集成和编排的目标。当组织想要为内部使用创建新的API时，它必须将它们添加到现有系统的服务API之上。
- en: There are a few public APIs, but there are many APIs for internal use because
    there may be hundreds of internal services that leverage multiple data formats
    and transmission protocols. To strongly foster reuse, speed, efficiency, and agile
    application development, enterprises should publish their internal APIs in a searchable
    catalogue.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 公共API并不多，但内部使用的API却很多，因为可能有数百个内部服务利用多种数据格式和传输协议。为了大力促进重用、速度、效率和敏捷的应用程序开发，企业应将其内部API发布在可搜索的目录中。
- en: APIs for IoT devices
  id: totrans-71
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 物联网设备API
- en: We discussed IoT devices and their services to humankind at the beginning of
    this chapter. It's anticipated that there will be 50,000,000,000 connected devices
    in the years ahead. Disposable, yet indispensable, devices are being produced
    in large quantities to automate everyday activities. Embedded devices are networked
    to team up with one another in a collaborative manner in order to develop and
    deliver situation-aware services to people. There are novel use cases being unearthed
    and rolled out to enhance the proliferation and penetration of the IoT paradigm.
    Due to the multiplicity and heterogeneity of IoT devices, the operational, management,
    and security complexities of IoT devices are being deployed in homes, hotels,
    hospitals, retail stores, manufacturing floors, railway stations, restaurants,
    and self-driving cars. Nowadays, sensors and actuators have become the eyes and
    ears of every digital application these days. Every device is becoming computational,
    communicative, perceptive, and active.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在本章开头讨论了物联网设备及其对人类的服务。预计未来几年将有500亿个连接的设备。这些一次性使用但不可或缺的设备正在大量生产，以自动化日常活动。嵌入式设备通过网络相互连接，以协作方式共同开发并向人们提供情境感知服务。正在挖掘和推出新的用例，以增强物联网范式的普及和渗透。由于物联网设备的多样性和异质性，物联网设备的运营、管理和安全复杂性正在部署到家庭、酒店、医院、零售店、制造车间、火车站、餐厅和自动驾驶汽车中。如今，传感器和执行器已成为每个数字应用的眼睛和耳朵。每个设备都变得可计算、可通信、可感知和活跃。
- en: There are edge and fog devices with sufficient power to form ad hoc clouds to
    capture, store, process, and analyze real-time, time-series, and streaming data
    to extract actionable insights that can be looped back to devices and people to
    make intelligent decisions in time and to engage in correct and relevant activities
    with all the clarity and confidence. Futuristic IoT applications and services
    need to be exposed via RESTful APIs in order to perform device integration and
    service orchestration.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 存在边缘和雾设备，它们具有足够的功率形成临时的云，以捕获、存储、处理和分析实时、时序和流数据，以提取可操作见解，这些见解可以反馈到设备和人员，以便及时做出智能决策，并参与正确和相关的活动，具有清晰和自信。未来的物联网应用和服务需要通过RESTful
    API公开，以执行设备集成和服务编排。
- en: APIs for application integration
  id: totrans-74
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 应用集成API
- en: APIs are bound to play a vital role in fulfilling the complicated tasks of process,
    data, and application integration. SOA has laid down a stimulating platform for
    service-oriented applications and integration. The faster maturity and stability
    of **e****nterprise service bus** (**ES****B**) products has expedited the setting
    up and sustenance of service-oriented, integrated, and insight-driven enterprises.
    The API-driven integration of disengaged services for producing integrated systems
    is attracting a lot of attention.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: API注定将在满足过程、数据和应用程序集成复杂任务中发挥至关重要的作用。SOA为面向服务的应用程序和集成提供了一个刺激的平台。**企业服务总线（ESB**）产品的快速成熟和稳定性加快了面向服务、集成和洞察驱动的企业的建立和维护。对生产集成系统进行解耦服务的API驱动的集成引起了广泛关注。
- en: In short, worldwide enterprises are embracing APIs as a strategic path to achieve
    the much-touted digital disruption, innovation, and transformation. External APIs
    opens the way for clients' developers to implement and involve the exposed APIs
    to connect and collaborate with the software application. The remote monitoring,
    measuring, and managing of applications is being made possible by means of externally
    exposed APIs.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，全球企业正在拥抱API作为实现备受瞩目的数字颠覆、创新和转型的战略途径。外部API为客户端开发者实施和参与公开的API提供了连接和协作的软件应用。通过外部公开的API，可以实现应用程序的远程监控、测量和管理。
- en: Describing the RESTful services paradigm
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 描述RESTful服务范式
- en: The developing trend in the software engineering space is that applications
    are now being made out of multiple services through integration, orchestration,
    and choreography. Workflows are the prominent unifying factor. That is, they help
    to identify the relevant services, and the chosen services get integrated into
    proper sequencing to arrive at competent composite services and applications.
    The challenge is to service discovery, access, assess, and use. There are communication
    and data transmission protocols to facilitate service-to-service interactions
    and collaborations. The REST approach is becoming easy to understand and use.
    This section will describe how REST is streamlined and how interactive services
    lead to powerful applications.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程领域的开发趋势是，现在应用程序是通过集成、编排和协作由多个服务构成的。工作流是突出的统一因素。也就是说，它们有助于识别相关的服务，所选的服务被整合到适当的顺序中，以形成有能力的复合服务和应用程序。挑战在于服务发现、访问、评估和使用。有通信和数据传输协议来促进服务之间的交互和协作。REST方法正变得易于理解和使用。本节将描述REST是如何简化的，以及交互式服务如何导致强大的应用程序。
- en: A resource, which is the primary architectural component of the ROA, is similar
    to an object in the popular **object-oriented programming** (**OOP**) concept.
    As objects, there are methods that work on the resource directly. The key difference
    between OOP and ROA is that only a few standard methods are defined for the resource.
    However, for an object, there can be one or more methods. Further on, resources
    in ROA can be consolidated into collections of resources. The condition is that
    each such collection created has to be homogeneous. Resources can be blessed with
    data. The richness of data that gets  associated with a resource comes handy in
    leveraging the resource in an efficient and effective manner.  JSON is the most
    appropriate and popular data model to appropriately enrich resources. Resources
    are increasingly represented using JSON objects. The special `_type` key-value
    pair is used overwhelmingly to store the type of any resource. The JSON data types
    such as string, number, Boolean, null, or arrays are the values of any key-value
    pairs.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 资源，作为ROA（资源导向架构）的主要架构组件，类似于流行于**面向对象编程**（**OOP**）概念的物体。作为物体，资源有直接作用于其上的方法。OOP和ROA之间的关键区别是，资源只定义了少数几个标准方法。然而，对于物体，可能有一个或多个方法。进一步来说，ROA中的资源可以被合并成资源集合。条件是每个创建的此类集合必须是同质的。资源可以赋予数据。与资源相关联的数据的丰富性有助于以高效和有效的方式利用资源。JSON是最合适且最受欢迎的数据模型，可以适当地丰富资源。资源越来越多地使用JSON对象来表示。特殊的关键字值对`_type`被广泛用于存储任何资源的类型。JSON数据类型，如字符串、数字、布尔值、null或数组，是任何关键字值对的值。
- en: 'The REST paradigm comprises three prominent classes of architectural elements:
    connectors, components, and data elements.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: REST范式包括三个突出的架构元素类别：连接器、组件和数据元素。
- en: 'A **connector** is a thing that connects the point of your reference to a destination
    system. Connectors are responsible for identifying and accessing various web resources
    and changing the current representations of those identified resources. Roles
    are the interface for various components that get implemented by different programming
    languages:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '**连接器**是一种将你的参考点连接到目标系统的事物。连接器负责识别和访问各种网络资源，并更改已识别资源的当前表示。角色是各种组件的接口，这些组件由不同的编程语言实现：'
- en: '**Client connector**: REST is for the request-and-response paradigm. Clients
    send requests and get appropriate responses from resources.'
  id: totrans-82
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端连接器**：REST是用于请求-响应范式的。客户端发送请求并从资源获得适当的响应。'
- en: '**Server connector**: RESTful servers continuously listen for requests from
    clients. Servers deliver responses for requests.'
  id: totrans-83
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器连接器**：RESTful服务器持续监听来自客户端的请求。服务器为请求提供响应。'
- en: '**Cacheable responses**: Can be stocked in clients or servers in order to speed
    up the response for subsequent requests. Several clients can concurrently get
    cached information.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**可缓存响应**：可以存储在客户端或服务器上，以加快后续请求的响应速度。多个客户端可以同时获取缓存信息。'
- en: '**Resolver**: Translates resource identifiers into network addresses.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**解析器**：将资源标识符转换为网络地址。'
- en: '**Tunnel**: Relays service requests. Sometimes, components deviate from their
    primary obligations to do tunneling.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**隧道**：中继服务请求。有时，组件会偏离其基本义务进行隧道操作。'
- en: 'In the REST paradigm, the various pieces of software that interact with one
    another are called **components**:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 在REST范式中，相互交互的各种软件被称为**组件**：
- en: '**Server software**: This software solution uses a server connector to receive
    the request from the client software. The server is the source for resources and
    their representations.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**服务器软件**：此软件解决方案使用服务器连接器从客户端软件接收请求。服务器是资源及其表示的来源。'
- en: '**Client software**: Clients use a client connector to formulate and convey
    a request to the server and it receives the response.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端软件**：客户端使用客户端连接器制定并向服务器传达请求，并接收响应。'
- en: '**Gateway software**: This is a kind of middleware solution that intelligently
    translates the requests and responses that happen between clients and servers.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**网关软件**：这是一种中间件解决方案，能够智能地翻译客户端和服务器之间发生的请求和响应。'
- en: '**Data elements** are an important ingredient of the powerful RESTful service
    paradigm. The previously indicated REST components communicate the state representations
    of data elements. There are six data elements in the REST paradigm:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '**数据元素**是强大的RESTful服务范式的关键组成部分。之前提到的REST组件传达数据元素的状态表示。在REST范式中，有六个数据元素：'
- en: '**Resource**: As per the REST specification, the ROA is the core architectural
    style and pattern. Resources are the main element of the RESTful paradigm. A resource
    is a conceptual mapping to a variety of physical or logical/digital/cyber/virtual
    entities. The mappings change over time. Every RESTful resource is uniquely represented
    and identified through an appropriate address. Resources include images from Instagram,
    movie titles, and so on.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源**：根据REST规范，ROA是核心的架构风格和模式。资源是RESTful范式的核心元素。资源是对各种物理或逻辑/数字/网络/虚拟实体的概念映射。映射会随时间变化。每个RESTful资源都通过适当的地址唯一表示和标识。资源包括Instagram上的图片、电影标题等。'
- en: '**Resource identifier**: Resources need to be uniquely identified in order
    to be found, accessed, and used. The **uniform resource identifier** (**URI**)
    identifies every resource. URI is the way forward for clients and servers to communicate
    in an unambiguous manner. A resource can have multiple URIs. This becomes necessary
    for indicating the varying location details of the resource. URIs are used to
    exchange resource representations.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源标识符**：为了找到、访问和使用资源，资源需要唯一标识。**统一资源标识符**（**URI**）标识每个资源。URI是客户端和服务器以明确方式通信的方式。资源可以有多个URI。这成为指明资源不同位置细节的必要条件。URI用于交换资源表示。'
- en: '**Resource metadata**: Metadata is important for resource utilization and management;
    it provides additional details regarding the resource. The added information,
    such as location information and alternative resource identifiers for resources,
    enables resource manipulation and management. That is, resources also include
    the RESTful API-specific information, such as URLs and relationships.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源元数据**：元数据对于资源利用和管理非常重要；它提供了关于资源的额外细节。添加的信息，如位置信息和资源的替代标识符，使得资源操作和管理成为可能。也就是说，资源还包括RESTful
    API特定的信息，如URL和关系。'
- en: '**Representation**: We have talked about resources and indicated that JSON
    is the preferred data model for defining the data associated with resources. However,
    for resources to communicate to a client over an HTTP connection, their representation
    have to be converted into a textual representation. This representation has to
    be formally embedded as an entity in an HTTP message body. Precisely speaking,
    the resource representation is the state of the resource at that point in time,
    and bound to change. The state value is transmitted between clients and servers.
    A representation typically captures and conveys the current or desired state of
    a resource. A particular resource can have multiple representations.'
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表示形式**：我们讨论了资源并指出JSON是定义与资源相关数据的首选数据模型。然而，为了资源能够通过HTTP连接与客户端通信，它们的表示形式必须转换为文本表示。这种表示形式必须正式嵌入到HTTP消息体中的实体。确切地说，资源表示形式是资源在特定时间点的状态，并且会发生变化。状态值在客户端和服务器之间传输。表示形式通常捕捉并传达资源的当前或期望状态。特定的资源可以有多个表示形式。'
- en: '**Representation metadata**: This metadata gives extra details regarding the
    representation in order to simplify representation.'
  id: totrans-96
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**表示元数据**：这些元数据提供了关于表示形式的额外细节，以便简化表示。'
- en: '**Control data**: This defines the action being requested on resources.'
  id: totrans-97
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**控制数据**：这定义了对资源请求的操作。'
- en: REST architectural constraints
  id: totrans-98
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST架构约束
- en: 'The REST architectural constraints are primarily the design rules that clearly
    convey the distinct characteristics of the REST paradigm. These constraints aren''t
    there to dictate what kind of technologies and tools to use; they just indicate
    how data gets transferred between the various components, such as clients and
    servers:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: REST架构约束主要是设计规则，这些规则清楚地传达了REST范式的独特特征。这些约束并不是为了规定使用什么样的技术和工具；它们只是表明数据如何在各种组件之间传输，例如客户端和服务器：
- en: '**Separation of concerns ****between clients and servers**: There is a clear
    disconnect between clients and servers. This unique separation enables the development
    and deployment of client-server applications independently. Any advancement and
    alteration of one thing doesn''t affect the functioning of another. The decoupled
    nature guarantees the elimination of dependency-induced issues.'
  id: totrans-100
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端和服务器之间的关注点分离**：客户端和服务器之间存在明显的分离。这种独特的分离使得客户端-服务器应用程序可以独立开发和部署。任何一项的进步和变更都不会影响另一项的功能。解耦的特性保证了消除依赖性引起的问题。'
- en: '**Stateless communication**: Server machines don''t need to store any session
    information about the contexts of clients'' calls. This means that any new requests
    can be handled by any server instance. However, the authentication details of
    clients in a session can be stocked so that new requests within the session don''t
    need to be authenticated by the identification and access management system.'
  id: totrans-101
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**无状态通信**：服务器机器不需要存储任何关于客户端调用上下文的会话信息。这意味着任何新的请求都可以由任何服务器实例处理。然而，会话中客户端的认证细节可以被存储，以便会话内的新请求不需要通过身份和访问管理系统进行认证。'
- en: '**Clients to cache responses**:Clients can cache server responses, since every
    server response comes with the decision enabling, cache-related details.'
  id: totrans-102
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**客户端缓存响应**：客户端可以缓存服务器响应，因为每个服务器响应都包含启用缓存的相关细节。'
- en: '**Connections may be direct or indirect**:Clients can talk to servers directly
    or through intermediaries, which can be a proxy or other brokers. This separation
    increases system flexibility. The need for scalability is fulfilled easily with
    this intermediary.'
  id: totrans-103
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**连接可以是直接的或间接的**：客户端可以直接与服务器通信，也可以通过中间件（如代理或其他经纪人）进行通信。这种分离增加了系统的灵活性。通过这种中间件，可以轻松满足可扩展性的需求。'
- en: '**Uniform interface**: The interactions between the various web application
    components (clients, servers, and intermediaries) get simplified due to the uniformity
    of their interfaces. If any of the components deviate from the established standards,
    there is a possibility that the web applications will break down. The four basic
    HTTP operations, `GET`, `POST`, `PUT`, and `DELETE`, provide the much-needed uniformity
    for all the contributing components to find, interact with, and accomplish tasks
    with clarity and confidence. The other operations, `HEAD` and `OPTIONS`, primarily
    deal with metadata management.'
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**统一接口**：由于各种网络应用组件（客户端、服务器和中间件）接口的统一性，它们之间的交互得到了简化。如果任何组件偏离了既定的标准，那么网络应用可能会崩溃。四个基本的HTTP操作，`GET`、`POST`、`PUT`和`DELETE`，为所有参与组件提供了所需的统一性，以便清晰、自信地查找、交互和完成任务。其他操作，如`HEAD`和`OPTIONS`，主要处理元数据管理。'
- en: '**Layered system**: Layered and tiered systems mitigate development and operational
    complexities. Increasingly, there are many layers between the client and the server.
    These layers act as intermediaries, such as gateways and proxies, to automate
    some of the aspects of interactions. A proxy typically is an intermediary that''s
    been selected by a client. The proxy provides interfaces to services, such as
    data translation, performance enhancement, and security protection. On the other
    hand, the gateway is another intermediary imposed by the network or server to
    provide an interface for specific services.'
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分层系统**：分层和分层系统减轻了开发和运营的复杂性。越来越多地，客户端和服务器之间有许多层。这些层充当中间件，如网关和代理，以自动化交互的一些方面。代理通常是由客户端选择的中间件。代理提供接口以访问服务，如数据转换、性能增强和安全保护。另一方面，网关是由网络或服务器强加的另一个中间件，以提供特定服务的接口。'
- en: Leveraging intermediary components leads to a substantial reduction in the interaction
    latency, security enforcement, and encapsulation of legacy systems. Thus, for
    the faster development of web applications and to make legacy applications more
    modern, modular, and web-enabled, the RESTful services paradigm contributes immensely.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 利用中介组件可以显著减少交互延迟、安全执行和旧系统的封装。因此，为了更快地开发Web应用程序，并使旧应用程序更加现代化、模块化和Web化，RESTful服务范式做出了巨大贡献。
- en: The **simple object-access protocol (SOAP)** mechanism is the original approach
    to access and use services. It's an XML-based messaging protocol that exchanges
    information among computers. There are a few perpetual issues with SOAP, and hence
    the origin and the dissemination of the REST paradigm, which is a comparatively
    lightweight and service-oriented application protocol, is widely appreciated.
    Due to the explosion in web applications and services, the creation and the sustenance
    of competent web architectures has become an important task.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**简单对象访问协议（SOAP）**机制是访问和使用服务的原始方法。它是一种基于XML的消息协议，用于在计算机之间交换信息。SOAP存在一些持续的问题，因此REST范式的起源和传播受到了广泛的欢迎。由于Web应用和服务数量的激增，创建和维护高效的Web架构已成为一项重要任务。'
- en: The REST method is a famous architectural style that is closely aligned with
    the concepts used in the ubiquitous HTTP protocol. REST doesn't prescribe the
    details of component implementation and protocol syntax. However, it includes
    the fundamental constraints upon connectors, components, and data. This outlines
    the basis of the web architecture and, so the essence of its behavior as a network-based
    application. The REST paradigm illustrates a simple web application design and
    development through a set of architectural constraints. These architectural considerations
    ensure the scalability of component interactions, the standard interface, and
    the independent deployment of components.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: REST方法是一种著名的架构风格，与无处不在的HTTP协议中使用的概念紧密相关。REST不规定组件实现和协议语法的细节。然而，它包括对连接器、组件和数据的根本约束。这概述了Web架构的基础，以及作为基于网络的程序的行为本质。REST范式通过一系列架构约束说明了简单的Web应用程序设计和开发。这些架构考虑确保了组件交互的可伸缩性、标准接口和组件的独立部署。
- en: Precisely speaking, REST itself doesn't define where or how the state of various
    resources should be stored. REST specifies how the state can be retrieved using
    the ubiquitous `GET` operation. The state can also be provided through the `PUT`
    and `POST` operations. It's also possible to have read-only resources that just
    support the `GET` method. As discussed elsewhere, the resource state could be
    provided by any means, such as a filesystem, a dynamic combination of other resources,
    or physical sensors. The REST paradigm is an approach or design pattern for designing
    resource-oriented application services. That is, REST is an architectural style
    for networked applications.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 精确地说，REST本身并没有定义各种资源的状态应该存储在哪里或如何存储。REST指定了如何使用无处不在的`GET`操作来检索状态。状态也可以通过`PUT`和`POST`操作提供。还可以有只支持`GET`方法的只读资源。正如在其他地方讨论的那样，资源状态可以通过任何方式提供，例如文件系统、其他资源的动态组合或物理传感器。REST范式是设计面向资源的应用程序服务的方法或设计模式。也就是说，REST是网络应用程序的架构风格。
- en: REST improves the performance, scalability, simplicity, and visibility of network-based
    applications. REST naturally encourages correct and efficient developer-computer
    and developer-developer communication. So, REST can be described as a way of building
    services and applications (we described a variety of software applications in
    the beginning of this chapter) by following a set of specific constraints between
    consumers and providers.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: REST提高了基于网络的程序的性能、可伸缩性、简单性和可见性。REST自然鼓励正确和高效的开发人员与计算机以及开发人员之间的沟通。因此，REST可以描述为通过遵循消费者和提供者之间的一系列特定约束来构建服务和应用程序（我们在本章开头描述了各种软件应用程序）的方法。
- en: The advantages of REST
  id: totrans-111
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: REST的优势
- en: Typically, there could be many interactions between requesting and serving services
    to fulfill a business process and, hence, the communication among different and
    distributed microservices has to happen fast with less overhead. REST is mandated
    to have less latency networks for speedier service requests and fulfillment, which
    makes REST APIs a good fit. REST APIs not only support XML and JSON, but also
    support more optimized binary representation formats, such as a protocol buffer
    or Avro. Further on, it can upgrade to HTTP/2.0\. Billions of people across the
    globe use the web for a variety of purposes. There are millions of developers
    creating a variety of web applications. Thus, a competent web architecture is
    needed to fulfill the varying requirements of businesses and people. In short,
    the powerful REST paradigm helps to build software architectures and applications
    that implicitly inherit all the praiseworthy qualities of the web. RESTful services
    bring forth a few important capabilities, such as greater scalability, efficient
    network use, and the independent functioning of clients and servers.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，在请求和提供服务之间可能会有许多交互来满足业务流程，因此，不同和分布式微服务之间的通信必须快速进行，并且开销要小。REST要求具有较低延迟的网络以加快服务请求和满足，这使得REST
    API非常适合。REST API不仅支持XML和JSON，还支持更优化的二进制表示格式，如协议缓冲区或Avro。进一步来说，它可以升级到HTTP/2.0。全球数十亿人使用网络进行各种目的。有数百万的开发者创建各种网络应用程序。因此，需要一个有能力的网络架构来满足企业和人们的不同需求。简而言之，强大的REST范式有助于构建软件架构和应用程序，这些架构和应用程序隐含地继承了网络的所有值得称赞的品质。RESTful服务带来了一些重要的能力，如更高的可伸缩性、高效的网络使用以及客户端和服务器独立运行。
- en: 'The REST paradigm inherently supports the ROA. Everything, as per the REST
    specifications, is a resource. Software architectures are typically a combination
    of several configurable architectural elements. In the case of REST, the principal
    architectural elements are components, connectors, resources, representations,
    and a few data elements. Resources are the building blocks of RESTful APIs. A
    resource can be anything that an application wants to expose on the network for
    other applications to find and operate through various HTTP methods. It can be
    text content, images, video and audio, a white paper, or a bank account. These
    resources are linked together by embedding the respective hyperlinks in HTML documents.
    Note that the resources can be retrieved, updated, and deleted by both humans
    and software programs. The following diagram illustrates this and shows the potential
    relationships between distributed and different resources via hyperlinks:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: REST范式本身支持ROA。根据REST规范，一切都是资源。软件架构通常是几个可配置架构元素的组合。在REST的情况下，主要的架构元素是组件、连接器、资源、表示和一些数据元素。资源是RESTful
    API的构建块。资源可以是应用程序想要在网络上公开的任何东西，以便其他应用程序可以通过各种HTTP方法找到并操作。它可以是有文本内容、图像、视频和音频、白皮书或银行账户。这些资源通过在HTML文档中嵌入相应的超链接相互链接。请注意，资源可以通过人类和软件程序检索、更新和删除。以下图示说明了这一点，并显示了通过超链接在不同和分布式资源之间的潜在关系：
- en: '![](img/fd4c0fd4-ffa3-4798-b964-7aceff3a60c7.png)'
  id: totrans-114
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/fd4c0fd4-ffa3-4798-b964-7aceff3a60c7.png)'
- en: To unambiguously find and use them, each resource has to be given a unique name,
    which is called a URI. A sample URI is [http://www.paris.fr/weather](http://www.paris.fr/weather).
    As indicated in the preceding diagram, a resource can expose its state through
    the concept of representation. A representation typically contains both metadata
    (such as resource size, media type, or character set) and content (binary image
    or text document). The representation varies significantly. For example, the representation
    of a confirmation of purchase on an e-commerce site could be an HTML document.
    For a wedding picture, the representation could be a JPEG image streaming. For
    a contact in an address book web service, it could be an XML file. Thus, it starts
    with the resource identification and there's a corresponding representation for
    each resource identified.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 为了明确地找到并使用它们，每个资源都必须有一个唯一的名称，这被称为URI。一个示例URI是[http://www.paris.fr/weather](http://www.paris.fr/weather)。如前图所示，资源可以通过表示的概念来暴露其状态。表示通常包含元数据（如资源大小、媒体类型或字符集）和内容（二进制图像或文本文档）。表示差异很大。例如，电子商务网站上购买确认的表示可能是一个HTML文档。对于婚礼照片，表示可能是一个JPEG图像流。对于地址簿网络服务中的联系人，它可能是一个XML文件。因此，它从资源标识开始，并为每个标识的资源有一个相应的表示。
- en: Self-descriptive messages
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自描述消息
- en: 'Clients should express their preferred state through a host of request messages.
    A resource''s current state gets communicated by the server to any client through
    a response message. For example, a wiki page editor can send a message to the
    server requesting to transfer a representation. The representation change may
    suggest a page update, which is the new state for the server-hosted and -managed
    web page. However, the server takes the call to accept or deny the client''s request.
    As indicated in the previous paragraph, the self-descriptive messages may include metadata to
    carry and convey the additional details regarding the resource state, the representation
    format and size, and the message itself:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 客户应通过一系列请求消息表达他们偏好的状态。服务器通过响应消息将资源的当前状态传达给任何客户端。例如，一个维基页面编辑器可以向服务器发送消息，请求转移表示。表示的变化可能表明页面更新，这是服务器托管和管理的网页的新状态。然而，服务器负责接受或拒绝客户端的请求。如前一段所述，自描述消息可能包括元数据来携带和传达有关资源状态、表示格式和大小以及消息本身的额外细节：
- en: '![](img/ba9d4bed-7f99-4cbc-9e2c-31f45669d000.png)'
  id: totrans-118
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ba9d4bed-7f99-4cbc-9e2c-31f45669d000.png)'
- en: 'The core operations (`GET`, `PUT`, `DELETE`, and `POST`) performed on the current
    state of the resource are pictorially indicated in the following diagram. The
    state gets modified and updated by those operations. The diagram also indicates
    that the resource is delimited from its external environment, which interacts
    with it. That is, multiple parties can interact with the resource without any
    problem:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在资源当前状态下执行的核心操作（`GET`、`PUT`、`DELETE`和`POST`）在以下图中以图形方式表示。状态通过这些操作进行修改和更新。该图还表明，资源与其外部环境是分开的，它与之交互。也就是说，多个实体可以无问题地与资源交互：
- en: '![](img/c00b0a95-ec2d-4adf-afdb-bf050227fbee.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c00b0a95-ec2d-4adf-afdb-bf050227fbee.png)'
- en: The resource is initiated with a state, which is in the middle of the previous
    diagram. The state is managed in any way that makes sense. Writing or reading
    from a database or file is one thing, but without any backend database, the business
    logic can't do any dynamic computation. The result is sent back to the requesting
    client. The previously mentioned core operations define its uniform interface.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 资源以某种状态启动，该状态位于前一个图的中间。状态以任何合理的方式进行管理。从数据库或文件中写入或读取是一回事，但没有任何后端数据库，业务逻辑无法进行任何动态计算。结果被发送回请求的客户端。前面提到的核心操作定义了其统一的接口。
- en: 'Establishing and providing a REST API isn''t an easy thing to do. An application,
    as per the REST paradigm, comprises multiple and distributed resources that provide
    useful capabilities to the application''s consumers. API developers have to understand
    the problem domain, analyze the business, technology, and user requirements, and
    accordingly have to design the various participating and contributing resources.
    The resource selection finally leads to the formation of the APIs, which need
    to be found and used for business automation. The following diagram illustrates
    how we define a REST API as a set of hyperlinked resources. The resources are
    being exposed by a web service, websites, and microservices:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 建立并提供REST API并非易事。根据REST范式，一个应用程序由多个分布式资源组成，这些资源为应用程序的消费者提供有用的功能。API开发者必须理解问题域，分析业务、技术和用户需求，并据此设计各种参与和贡献的资源。资源选择最终导致API的形成，这些API需要被发现和使用以实现业务自动化。以下图示说明了我们如何将REST
    API定义为一系列超链接资源。这些资源由网络服务、网站和微服务公开：
- en: '![](img/b39aa910-64f4-4773-81fd-8bffad59b7da.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/b39aa910-64f4-4773-81fd-8bffad59b7da.png)'
- en: 'We are heading toward the software-defined world, and every tangible thing
    gets enabled through appropriate APIs. Thus, the much-touted API economy is beginning
    to shine. Corporations are keen to embrace this strategically sound transition.
    APIs have become the interesting and inspiring component for our business and
    IT systems:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 我们正朝着软件定义的世界迈进，每个有形的事物都通过适当的API得到启用。因此，备受赞誉的API经济开始闪耀。企业热衷于拥抱这个战略上明智的转型。API已成为我们业务和IT系统的有趣和鼓舞人心的组成部分：
- en: '![](img/3a3345dd-7433-4d8a-882a-5fe85b732098.png)'
  id: totrans-125
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/3a3345dd-7433-4d8a-882a-5fe85b732098.png)'
- en: Precisely speaking, the ROA facilitated by the REST paradigm is being pronounced
    as the major contributor for enacting the envisioned digital transformation, not
    only for business enterprises, government organizations, and IT companies, but
    also for humanity. With technologies permeating everyday life, people are going
    to be the smartest in decision making and in deeds. SOAP is the first industry-wide
    approach for the goal of service-enablement. Due to various complexity factors,
    REST is gaining market and mind shares, as illustrated in the following section.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 具体来说，由REST范式提供的ROA正在被公认为实现预期数字化转型的主要贡献者，不仅对商业企业、政府机构和IT公司，而且对整个人类也是如此。随着技术的渗透到日常生活，人们在决策和行为上将会变得最聪明。SOAP是服务启用目标的第一种行业级方法。由于各种复杂性因素，REST正在获得市场份额和心智份额，如以下章节所示。
- en: SOAP versus REST
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: SOAP与REST的比较
- en: SOAP is a matured and stabilized protocol with a number of standard specifications,
    and these specifications are simplifying and streamlining the development, deployment,
    management, governance, and composition of services. There are standardized markup
    languages to represent the interfaces of services. In order to be unambiguously
    understood, SOAP predominantly uses XML rather than HTTP to define message content.
    **Web services description language** (**WSDL**) can enforce the use of formal
    contracts between the service API and consumers. SOAP has a built-in WS-reliable
    messaging standard to increase service security during asynchronous execution
    and processing. SOAP has a built-in stateful operation capability for conversational
    state management.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP是一种成熟且稳定的协议，具有多个标准规范，这些规范正在简化并简化服务的开发、部署、管理、治理和组合。有标准标记语言来表示服务的接口。为了明确理解，SOAP主要使用XML而不是HTTP来定义消息内容。"**Web服务描述语言**"(**WSDL**)可以强制服务API和消费者之间使用正式合同。SOAP内置了WS-reliable
    messaging标准，以在异步执行和处理期间增加服务安全性。SOAP内置了有状态的操作能力，用于会话状态管理。
- en: As indicated in the preceding section, REST is easy to understand as it uses
    HTTP as the data transmission protocol and the basic CRUD operations. This ease
    of use simplifies work for software developers. REST also consumes less network
    bandwidth as it isn't as verbose/bulky as SOAP. Unlike SOAP, REST is designed
    to be stateless, and REST responses can be cached at clients to guarantee better
    performance and scalability. REST intrinsically supports many data formats. The
    overwhelmingly used data format is JSON, which is capable of providing better
    support for web browsers and mini-clients. JSON's association with JavaScript
    simplifies the consumption of API payloads. RESTful services are becoming pervasive
    due to their lightweight nature. All kinds of cloud, mobile, embedded, and IoT
    applications are leveraging the REST paradigm, which is increasingly paramount
    for application, data, and UI integration requirements.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，REST易于理解，因为它使用HTTP作为数据传输协议和基本的CRUD操作。这种易用性简化了软件开发者的工作。REST消耗的网络带宽也更少，因为它不像SOAP那样冗长/庞大。与SOAP不同，REST被设计为无状态的，并且REST响应可以在客户端缓存，以保证更好的性能和可扩展性。REST本质上支持许多数据格式。最广泛使用的数据格式是JSON，它能够为Web浏览器和迷你客户端提供更好的支持。JSON与JavaScript的关联简化了API负载的消耗。由于轻量级特性，RESTful服务正在变得无处不在。各种云、移动、嵌入式和物联网应用程序都在利用REST范式，这对于应用、数据和UI集成需求越来越重要。
- en: When to use REST versus SOAP
  id: totrans-130
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 何时使用REST与SOAP
- en: 'REST is superior to SOAP in many respects, including the following:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多方面，REST优于SOAP，包括以下方面：
- en: '**Developing a public API**:REST, which is famous for ROA, invariably focuses
    on resource-based or data-based operations. Its core operations (`GET`, `PUT`,
    `POST`, and `DELETE`) are inherited from the ubiquitous HTTP. This minimalist
    approach makes the REST paradigm easy to understand and use across application
    and industry domains. Application and service developers find it easy to play
    around with the RESTful approach. The response gets easily consumed by web browsers.
    Precisely speaking, the simplicity innately provided by REST is one of the key
    reasons for its unprecedented support and success. Realizing its potential, there
    is a consistent transition from SOAP to REST.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**开发公共API**：以资源或数据为基础的REST，以其ROA而闻名，不可避免地专注于基于资源或数据操作。其核心操作（`GET`、`PUT`、`POST`和`DELETE`）继承自无处不在的HTTP。这种最小化方法使得REST范式易于理解和在应用和行业领域中使用。应用程序和服务开发者发现使用RESTful方法很容易。响应很容易被网络浏览器消费。确切地说，REST固有的简单性是其前所未有的支持和成功的关键原因之一。意识到其潜力，从SOAP到REST的转变是一致的。'
- en: '**Performance, flexibility, and scalability**: APIs are the entry point for
    applications to be identified, integrated, and used. There are event messages
    and procedure/method calls between applications'' APIs. A widely circulated tip
    is that applications that require a lot of back-and-forth messaging have to choose
    the REST way in order to be successful. If there''s a networking issue, the RESTful
    service approach allows the application/process to retry once the connection is
    re-established. REST makes it easy to do so without any major interruption. With
    SOAP stateful operations, the retry aspect seems to be a difficult affair as it
    involves more initialization at multiple levels, including the state code. Since
    REST is stateless, the session information isn''t stored on the server machine,
    and this enables REST services to be independently retried and horizontally scalable.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能、灵活性和可扩展性**：API是应用程序被识别、集成和使用的入口点。应用程序的API之间存在事件消息和过程/方法调用。一个广泛流传的建议是，需要大量双向消息的应用程序必须选择REST方式才能成功。如果出现网络问题，一旦重新建立连接，RESTful服务方法允许应用程序/进程重试。REST使得这样做而不会造成任何重大中断变得容易。与SOAP的状态操作相比，重试方面似乎是一个困难的事情，因为它涉及到多个级别的更多初始化，包括状态代码。由于REST是无状态的，会话信息不会存储在服务器机器上，这使得REST服务可以独立重试并且横向可扩展。'
- en: The RESTful service paradigm enables us to perform easy and fast calls to a
    URL and get an immediate response. SOAP services require the keeping of a stateful
    connection with a complex client. REST, on the other hand, bats for stateless
    connection. The cache isn't stored in server applications. Therefore, testing
    RESTful applications is quite easy compared to SOAP applications.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: RESTful服务范式使我们能够轻松快速地对URL进行调用并获得即时响应。SOAP服务需要与一个复杂的客户端保持状态连接。另一方面，REST支持无状态连接。缓存不会存储在服务器应用程序中。因此，与SOAP应用程序相比，测试RESTful应用程序相当容易。
- en: SOAP provides ways of remotely accessing and manipulating objects (nouns) through
    procedure/method requests; REST focuses on the operations (verbs) that can be
    executed on resources. REST, therefore, has been widely adopted by public API
    practitioners. REST is always better than SOAP in situations that don't mandate
    for the full map for a set of objects to the client. Transmitting object details
    back and forth will waste a lot of expensive network bandwidth. Also, network
    latency comes into the picture. Especially in bandwidth-starved environments,
    this multiple-call requirement can be a huge barrier. APIs consumed mostly by
    mobile applications relate to those scenarios where we don't need to leverage
    SOAP at all costs. Public APIs frequently change because the expectations of consumers
    and businesses vary. In this world of start-ups and APIs without specific contractual
    agreements, REST is a natural and universal choice.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: SOAP提供了通过过程/方法请求远程访问和操作对象（名词）的方法；REST则侧重于可以在资源上执行的操作（动词）。因此，REST已被公共API实践者广泛采用。在不需要将一组对象完全映射到客户端的情况下，REST总是比SOAP更好。来回传输对象细节会浪费大量的昂贵网络带宽。此外，网络延迟也会出现。特别是在带宽受限的环境中，这种多次调用需求可能是一个巨大的障碍。主要被移动应用程序消耗的API与那些我们根本不需要利用SOAP的场景相关。公共API经常变化，因为消费者和企业的期望各不相同。在这个初创公司和没有具体合同协议的API的世界里，REST是一个自然且通用的选择。
- en: Best practices for REST-based microservices
  id: totrans-136
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 基于REST的微服务的最佳实践
- en: 'In this section, we''ll discuss a few best practices that make your MSA developer-friendly,
    so they can manage and track errors easily:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些最佳实践，这些实践可以使您的MSA（微服务架构）对开发者友好，从而他们可以轻松地管理和跟踪错误：
- en: '**Meaningful names**:It''s always important to provide a meaningful name in
    the request header, so if any problem, such as performance degradation, memory
    wastage, or a spike in user load, occurs, developers and performance engineers
    can easily understand from which microservice this request was originated and
    cascaded. It''s therefore a best practice to provide the logical `name/{service
    id}` in the `User-Agent` property in the request header, for example, `User-Agent:EmployeeSearchService`.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**有意义的名称**：在请求头中提供有意义的名称始终很重要，这样如果发生任何问题，例如性能下降、内存浪费或用户负载激增，开发人员和性能工程师可以轻松地了解这个请求是从哪个微服务发起并级联的。因此，在请求头的`User-Agent`属性中提供逻辑`name/{服务ID}`是一个最佳实践，例如，`User-Agent:EmployeeSearchService`。'
- en: '**API management**:In the REST-based microservice architecture, one microservice
    accesses another microservice via an API. The API acts as a facade to other microservices.
    Therefore, it''s mandatory to build APIs carefully, and changing APIs entails
    additional problems. That is, APIs have to be designed with future demands in
    mind. Any changes in the API method signature aren''t good because many microservices
    depend on the APIs to access and assess the microservice. Therefore, the tasks,
    such as API usage, versioning, and management, acquire special significance in
    our increasingly API-centric world.'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API管理**：在基于REST的微服务架构中，一个微服务通过API访问另一个微服务。API充当其他微服务的门面。因此，必须谨慎构建API，更改API会带来额外的问题。也就是说，API必须考虑到未来的需求来设计。API方法签名中的任何更改都不好，因为许多微服务依赖于API来访问和评估微服务。因此，在日益以API为中心的世界中，API使用、版本管理和管理的任务具有特殊的重要性。'
- en: '**Correlate ID**:Microservices, for the sake of guaranteeing high availability,
    are typically spread across multiple servers. That is, there can be multiple instances
    of the same microservice. With containers emerging as the most optimized runtime
    for microservices, running multiple instances of a microservice has become the
    new normal. To fulfill one client request, the control has to go through multiple
    microservices and instances. If one service isn''t doing OK in the pipeline due
    to a problem, we need to understand the real situation of the service to determine
    our course of action. The aspects of service tracking and distributed tracing
    gain importance for the microservices architecture to be successful and smart
    in the connected and cloud era. The widely-recommended mechanism is always to
    generate a random UUID for every client request and pass that UUID to every internal
    service request. Then, by capturing the log files, it becomes easy for service
    operators to pinpoint the problematic service.'
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关联ID**：为了确保高可用性，微服务通常分布在多个服务器上。也就是说，可能会有多个相同的微服务实例。随着容器成为微服务最优化运行时的出现，运行多个微服务实例已成为新常态。为了满足一个客户端请求，控制必须通过多个微服务和实例。如果某个服务在管道中由于问题表现不佳，我们需要了解该服务的真实情况以确定我们的行动方案。在连接和云时代，服务跟踪和分布式跟踪的方面对于微服务架构的成功和智能变得尤为重要。广泛推荐的做法是为每个客户端请求生成一个随机的UUID，并将其传递给每个内部服务请求。然后，通过捕获日志文件，服务操作员可以轻松地确定有问题的服务。'
- en: '**ELK implementation**:Microservices are small and simple. In any IT environment,
    there can be hundreds of microservices, and each microservice has multiple redundant
    instances in order to ensure the much-wanted fault tolerance. Each instance generates
    a log file, and administrators find that visiting each log file to locate something
    useful is not an easy affair. So, capturing and stocking log files, implementing
    a powerful search engine on the log file store, and applying appropriate **machine
    learning** (**ML**) algorithms to that log data in order to extract and emit any
    useful patterns, noteworthy information, or beneficial associations are vital
    in order to make sense of the log data. ELK, which is an open source software,
    fulfills these differing requirements in a tightly-integrated manner. E stands
    for Elasticsearch, L for Logstash, and K for Kibana. Elasticsearch just dumps
    the logs and provides a fuzzy search capability, Logstash is used to collect logs
    from different sources and transform them, and Kibana is a **graphical user interface**
    (**GUI**) that helps data scientists, testers, developers, and even businesspeople
    to insightfully search the logs as per their evolving requirements. Considering
    the significance of log analytics, there are open source as well as commercial-grade
    solutions to extract log, operational, performance, scalability, and security
    insights from microservice interaction log data.'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ELK实现**：微服务小而简单。在任何IT环境中，可能有数百个微服务，每个微服务都有多个冗余实例以确保所需的容错性。每个实例都会生成一个日志文件，管理员发现访问每个日志文件以查找有用的信息并不容易。因此，捕获和存储日志文件，在日志文件存储上实施强大的搜索引擎，并将适当的**机器学习**（**ML**）算法应用于这些日志数据，以提取和发出任何有用的模式、值得注意的信息或有益的关联，对于理解日志数据至关重要。ELK，这是一个开源软件，以紧密集成的方式满足这些不同的需求。E代表Elasticsearch，L代表Logstash，K代表Kibana。Elasticsearch只是将日志存储起来并提供模糊搜索功能，Logstash用于从不同来源收集日志并进行转换，而Kibana是一个**图形用户界面**（**GUI**），它帮助数据科学家、测试人员、开发人员甚至商业人士根据其不断变化的需求有洞察力地搜索日志。考虑到日志分析的重要性，有开源以及商业级解决方案可以从微服务交互日志数据中提取日志、操作、性能、可扩展性和安全洞察。'
- en: '**Resiliency implementation**:There are frameworks and solutions that guarantee
    reliability (resiliency + elasticity) when services interact with one another.'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**弹性实现**：有一些框架和解决方案在服务相互交互时保证了可靠性（弹性+伸缩性）。'
- en: 'REST-based microservices are popular not only due to their extreme simplicity,
    but also due to the fact that services communicate directly (synchronously) with
    each other over HTTP. This direct communication means that there''s no need for
    any kind of intermediary, such as a hub, bus, broker, or gateway. For example,
    consider a B2C e-commerce system that instantly notifies customers when a particular
    product is back in stock. This notification could be implemented via RESTful microservices:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 基于REST的微服务不仅因其极端的简单性而受到欢迎，还因为服务通过HTTP直接（同步）相互通信。这种直接通信意味着不需要任何中间件，如中心、总线、代理或网关。例如，考虑一个B2C电子商务系统，当特定产品重新入库时，它会立即通知客户。这种通知可以通过RESTful微服务实现：
- en: '![](img/ba450c8b-8d8f-4a35-a568-a3676ea0dd8b.png)'
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![](img/ba450c8b-8d8f-4a35-a568-a3676ea0dd8b.png)'
- en: 'It should be noted that the communication is point-to-point. Still, hardcoding
    services'' addresses isn''t a good thing to do. Therefore, the prominent workaround
    is to leverage a service discovery mechanism, such as Eureka or Consul. These
    are highly available centralized servers where services register their API addresses.
    The availability status of services for instantaneous serving is registered with
    the centralized servers. Client services can request a specific API address from
    this centralized server in order to identify and leverage the appropriate services.
    Still, there are several shortcomings, which are listed as follows:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 应当注意的是，通信是点对点的。尽管如此，硬编码服务的地址并不是一个好的做法。因此，一个显著的解决方案是利用服务发现机制，例如Eureka或Consul。这些是高度可用的集中式服务器，服务在这里注册它们的API地址。服务的可用状态被注册在集中式服务器上，以便进行即时服务。客户端服务可以从这个集中式服务器请求特定的API地址，以便识别和利用适当的服务。然而，还存在一些缺点，如下列所示：
- en: '**Blocking**:Due to the synchronous nature of the REST approach, the update
    stock operation won''t do anything until the notification service completes its
    task of notifying all relevant customers. If there are thousands of customers
    wishing to be notified of the additional stock, the system''s performance is bound
    to degrade sharply. This performance issue happens due to the tight-coupling approach.
    One way to overcome these issues is to embrace the pipeline pattern. The architecture
    diagram then gets modified as follows:'
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**阻塞**：由于REST方法同步的特性，更新库存操作不会做任何事情，直到通知服务完成通知所有相关客户的任务。如果有成千上万的客户希望被通知额外的库存，系统的性能必然会急剧下降。这种性能问题是由于紧密耦合的方法造成的。克服这些问题的方法之一是采用管道模式。架构图随后被修改如下：'
- en: '![](img/7cdc592a-a337-4cc2-8438-bc901681bfde.png)'
  id: totrans-147
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/7cdc592a-a337-4cc2-8438-bc901681bfde.png)'
- en: Here, the communication is still REST-based, but the real shift is that the
    point-to-point communication is eliminated forever. The **Pipeline** entity is
    entirely responsible for orchestrating control and data flows. The services are
    totally decoupled, and this decoupling makes microservices autonomous. However,
    with this approach, the services must rely on the pipeline orchestration in order
    to contribute to the cause and, hence, services are self-defined, yet not self-sufficient.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，通信仍然是基于REST的，但真正的转变是点对点通信被永久消除。**管道**实体完全负责协调控制和数据流。服务是完全解耦的，这种解耦使微服务具有自主性。然而，采用这种方法，服务必须依赖于管道编排来贡献其作用，因此服务是自我定义的，但不是自给自足的。
- en: '**Asynchronous messaging**:Consider a typical messaging-based system. Here,
    both the services—input and output—can be defined as commands or events. Each
    of these subscribes to the events that it''s interested in consuming. Further,
    these events are received reliably through a mechanism, such as a messaging queue/broker,
    when the events are placed on the queue by other services. With this approach,
    the stock notification subsystem could now be remodeled as follows:'
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**异步消息**：考虑一个典型的基于消息的系统。在这里，输入和输出服务都可以定义为命令或事件。每个服务都订阅它感兴趣消费的事件。此外，当其他服务将事件放入队列时，这些事件可以通过机制（如消息队列/代理）可靠地接收。采用这种方法，库存通知子系统现在可以被重新设计如下：'
- en: '![](img/e464d20f-c08c-4cf4-9134-35097b18433c.png)'
  id: totrans-150
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/e464d20f-c08c-4cf4-9134-35097b18433c.png)'
- en: This refurbished architecture brings forth a number of crucial advantages, such
    as enhanced flexibility, service isolation, and autonomy. This shift eases the
    addition, removal, or modification of services without affecting the operation
    or code of other services. Any kind of service failure can be gracefully handled.
    These need to be carefully considered when designing and developing microservices-based
    enterprise applications.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这种改进的架构带来了一系列关键优势，如增强的灵活性、服务隔离和自主性。这种转变简化了服务的添加、删除或修改，而不会影响其他服务的操作或代码。任何类型的服务故障都可以优雅地处理。在设计和发展基于微服务的企业应用程序时，这些都需要仔细考虑。
- en: As technologies become increasingly complex, best practices and procedures sourced
    through various experimentation come in handy for architects and developers to
    create strategically sound software systems. As microservices emerge as the most
    optimal building block for production-grade and extensible business and IT systems,
    our focus gets turned toward the ways of leveraging the matured and stabilized
    REST paradigm to create and sustain business-critical and microservices-centric
    software applications.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 随着技术的日益复杂，通过各种实验得出的最佳实践和程序对架构师和开发者来说非常有用，他们可以创建战略上合理的软件系统。随着微服务成为生产级和可扩展的商业和IT系统的最佳构建块，我们的关注点转向了利用成熟的和稳定的REST范式来创建和维持业务关键和以微服务为中心的软件应用程序的方法。
- en: The API-first approach
  id: totrans-153
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: API优先的方法
- en: We are going to have a dazzling array of IoT devices, data, services, and applications.
    Data analytics shall assume a greater proportion due to the uninhibited explosion
    of IoT sensors and actuators, which make any physical, mechanical, and electrical
    system to be digitized and connected. Also, web, enterprise, and cloud applications
    are mobile-enabled. Thus, there are multiple channels for application, device,
    and information access and usage. The domain of enterprise mobility is very popular.
    There are performance-hungry legacy applications. Application dismantling takes
    a lot of time and talent. Therefore, the popular approach is to attach extra APIs
    to existing applications in order to make them available to the external world.
    However, this isn't a strategically sound approach. On the other side, considering
    the optimal and organized nature of cloud infrastructures, new-generation applications
    are being directly designed, developed, and deployed on cloud servers.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将拥有令人眼花缭乱的物联网设备、数据、服务和应用程序。由于物联网传感器和执行器的无限制爆炸式增长，数据分析将占据更大的比例，这使得任何物理、机械和电气系统都可以数字化和连接。此外，Web、企业级和云应用都实现了移动化。因此，有多个渠道用于应用程序、设备和信息的访问和使用。企业移动性领域非常受欢迎。存在对性能有强烈需求的传统应用程序。应用程序拆解需要大量的时间和人才。因此，流行的做法是为现有应用程序附加额外的API，以便使其对外部世界可用。然而，这并不是一个战略上明智的方法。另一方面，考虑到云基础设施的优化和组织性质，新一代应用程序正在直接设计、开发和部署在云服务器上。
- en: Therefore, the prescribed approach is to build the API first and then to have
    cloud applications on top of that API. The idea behind the widely circulated API-first
    development ([https://www.restcase.com/](https://www.restcase.com/)) strategy
    is to arrive at a futuristic API. This approach enables software developers to
    accomplish their work with clarity and confidence. The implementations can be
    highly advanced and efficient. This separation between interface and implementation
    facilitates the incorporation of modified code at a later point in time without
    affecting access to the application and service.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，推荐的方法是首先构建API，然后在上面构建云应用。广泛流传的API-first开发策略（[https://www.restcase.com/](https://www.restcase.com/)）背后的理念是达到一个未来派的API。这种方法使软件开发者能够以清晰和自信的方式完成他们的工作。实现可以是高度先进和高效的。这种接口和实现的分离使得在以后的时间点可以轻松地整合修改后的代码，而不会影响对应用程序和服务的访问。
- en: With clouds positioned as the one-stop IT solution for all kinds of software
    systems, monolithic and massive applications are being cloud-enabled to become
    open for innovation, disruption, and transformation. Greenfield applications are
    predominantly initiated and implemented as cloud-native applications. There are
    code repositories (public and private). Cloud-native code, once finished, gets
    checked into a repository. Thus, code is built and integrated with all the necessary
    code segments to create an integrated application. Vital tests are performed on
    the application to check whether its code passes through all the gates successfully.
    Then, there are continuous delivery and deployment tools to deliver the curated
    and refined code to provisioned IT resources to start the deployment process.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 将云定位为所有软件系统的一站式IT解决方案，单体和大规模应用程序正在实现云化，以便开放创新、颠覆和转型。绿色field应用程序主要作为云原生应用程序启动和实施。存在代码仓库（公共和私有）。云原生代码一旦完成，就被检查到仓库中。因此，代码被构建并与所有必要的代码段集成，以创建一个集成应用程序。对应用程序进行关键测试，以检查其代码是否成功通过所有关卡。然后，还有持续交付和部署工具，将精心挑选和精炼的代码交付到预配的IT资源，以启动部署过程。
- en: Developing API-first
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发API-first
- en: 'This is an interesting strategy. Development works are happening in a sequence.
    The requirements elicitation, service design, development, debugging, delivery,
    deployment, and decommissioning typically happen in a synchronous manner. The
    quality control and assurance team is waiting for the code to be fully developed
    and integrated. Once the prototype is ready, the documentation team starts preparing
    the APIs. If any improvement, correction, or addition requirement arises, the
    design and development teams start working on them. This is a waste of talent
    and time. If the API for the proposed service is finalized in consultation with
    the project sponsor and the end users, the software construction and deployment
    time is reduced sharply. This is depicted in the following diagram:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一个有趣的策略。开发工作正在按顺序进行。需求收集、服务设计、开发、调试、交付、部署和退役通常同步进行。质量控制和保证团队正在等待代码完全开发和集成。一旦原型准备就绪，文档团队开始准备API。如果出现任何改进、纠正或添加需求，设计和开发团队开始着手处理。这是人才和时间的一种浪费。如果与项目赞助者和最终用户协商确定拟议服务的API，则软件构建和部署时间将大幅减少。这将在以下图中展示：
- en: '![](img/bcf3d28c-0e43-4e3d-bbfe-e13e8d1c0e19.png)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bcf3d28c-0e43-4e3d-bbfe-e13e8d1c0e19.png)'
- en: 'Therefore the API-first development process is being recommended because it
    facilitates a kind of parallel development by all teams. The software can be released
    independently. The dependency on other teams is substantially less in this case:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，推荐采用API优先的开发流程，因为它促进了所有团队的并行开发。软件可以独立发布。在这种情况下，对其他团队的依赖大大减少：
- en: '![](img/77123d9b-b782-454b-91d8-81b691af4492.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/77123d9b-b782-454b-91d8-81b691af4492.png)'
- en: Here, the APIs are first created and mocked. Then backend, frontend, and test
    teams start to work with the mocked APIs. Once the **API** is finalized, all teams
    can easily switch to the production or staging API. This procedure saves a lot
    of development time.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，首先创建并模拟了API。然后后端、前端和测试团队开始使用模拟API进行工作。一旦**API**最终确定，所有团队都可以轻松切换到生产或预发布API。这个程序节省了大量开发时间。
- en: '**RestCase** is a cloud-based API development platform. The platform allows
    developers to collaboratively create REST APIs using an intuitive browser-based
    interface, which automatically generates documentation, tests, and mocks. RestCase
    further enables rapid iteration and testing by creating a mock of the API that
    developers can make calls against immediately, without waiting for the actual
    development and deployment of the API, thereby eliminating impediments from various
    development teams.'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '**RestCase**是一个基于云的API开发平台。该平台允许开发者使用直观的基于浏览器的界面协作创建REST API，该界面自动生成文档、测试和模拟。RestCase通过创建开发者可以立即对其发起调用的API模拟，从而实现快速迭代和测试，无需等待API的实际开发和部署，从而消除了来自各个开发团队的障碍。'
- en: Building services API-first
  id: totrans-164
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 首先构建服务API
- en: This is a best practice that's wisely and widely recommended by experts. By
    defining and designing the APIs first, a variety of things can be done properly.
    Project sponsors get an overall view of the system under development. Incorporating
    changes is quite easy in this case. The software developers can proceed with their
    development and testing tasks with confidence. Salespeople can explain the nitty-gritty
    of the software system to any prospective customers and consumers. API testing
    can be done first. API management is made easy in the increasingly API world.
    Everything is being fitted with one or more APIs in order to be found, bound,
    and used according to evolving needs.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 这是一种专家们明智且广泛推荐的最佳实践。通过首先定义和设计API，可以正确地完成各种事情。项目赞助者可以全面了解正在开发的系统。在这种情况下，合并更改相当容易。软件开发者可以自信地继续他们的开发和测试任务。销售人员可以向任何潜在客户和消费者解释软件系统的细节。可以先进行API测试。在日益增长的API世界中，API管理变得简单。为了满足不断变化的需求，一切都被配备了一个或多个API以便被发现、绑定和使用。
- en: Summary
  id: totrans-166
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we discussed the salient features of the RESTful services and
    APIs in making the road toward digitally transformed businesses and societies
    easier to navigate. The simplicity and modularity of the REST paradigm leads to
    the production of highly flexible and futuristic software applications. As the
    web and cloud enablement of digital assets assume a more prominent role, the role
    and responsibility of the REST idea are bound to increase in the days to come.
    We tend toward deeply connecting our everyday environments. The dream of having
    many cognitive environments is consistently on the rise. Hence, it's clear that
    the unique and innate capabilities of the mesmerizing RESTful services should
    be reaped in order to achieve the things described in this chapter. This chapter
    has given you a lot of useful information on the REST concept and how it's going
    to be a trendsetter in the IT world. This book will cover the various aspects
    of the RESTful paradigm.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们讨论了RESTful服务和API在使数字化转型的企业和社会道路更容易导航方面的显著特点。REST范式的简洁性和模块化导致产生了高度灵活和未来派的软件应用。随着数字资产的网络和云赋能扮演越来越重要的角色，REST理念的角色和责任在未来必将增加。我们倾向于深入连接我们的日常环境。拥有众多认知环境的梦想持续上升。因此，显然，迷人的RESTful服务的独特和内在能力应该被充分利用，以实现本章所描述的事情。本章为您提供了大量关于REST概念及其如何在IT世界中成为趋势的信息。本书将涵盖RESTful范式的各个方面。
- en: Further reading
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: '[https://www.packtpub.com/application-development/restful-java-web-services-third-edition](https://www.packtpub.com/application-development/restful-java-web-services-third-edition)'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/restful-java-web-services-third-edition](https://www.packtpub.com/application-development/restful-java-web-services-third-edition)'
- en: '[https://www.packtpub.com/application-development/building-restful-web-services-go](https://www.packtpub.com/application-development/building-restful-web-services-go)'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/building-restful-web-services-go](https://www.packtpub.com/application-development/building-restful-web-services-go)'
- en: '[https://www.packtpub.com/application-development/building-restful-web-services-net-core](https://www.packtpub.com/application-development/building-restful-web-services-net-core)'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[https://www.packtpub.com/application-development/building-restful-web-services-net-core](https://www.packtpub.com/application-development/building-restful-web-services-net-core)'
