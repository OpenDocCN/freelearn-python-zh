["```py\n    mkdir Chapter2\n    ```", "```py\n    cd Chapter2\n    ```", "```py\n    ch2-env and enable access to the system site packages. This allows the virtual environment to inherit packages from the global Python environment, which can be useful when certain libraries are installed system wide. Once the environment is set up, we can activate it and begin installing project-specific packages without affecting the global Python environment.\n    ```", "```py\n    ch2-env Python virtual environment:\n    ```", "```py\n    requests library in Python simplifies making HTTP requests to web servers, and the sense-emu library will give us the Sense HAT emulator to work with for our code. With the libraries installed, we may close the Terminal with the following command:\n\n    ```", "```py\n\n    ```", "```py\n    import requests\n    from sense_hat import SenseHat\n    response = requests.get(\n        'https://jsonplaceholder.typicode.com/posts'\n        )\n    sense = SenseHat()\n    sense.set_rotation(270)\n    if response.status_code == 200:\n        data = response.json()\n        print(data[0]['title'])\n        success_msg = 'Success with code: '\n        success_msg += str(response.status_code)\n        sense.show_message(success_msg)\n    else:\n        error_msg = 'Failed with code: '\n        error_msg += str(response.status_code)\n        print(error_msg)\n        sense.show_message(error_msg)\n    ```", "```py\n    import requests\n    import json\n    api_key = 'xxxxxxxxxxxxxxxx'\n    symbol = 'AAPL'\n    base_url = 'https://www.alphavantage.co/query?'\n    function = 'GLOBAL_QUOTE'\n    complete_url = f'{base_url}function={function}&symbol={symbol}&apikey={api_key}'\n    response = requests.get(complete_url)\n    data = response.json()\n    print(json.dumps(data, indent=4))\n    ```", "```py\n    import requests\n    from sense_hat import SenseHat\n    import time\n    ```", "```py\n    api_key = 'xxxxxxxxxxxxxxxx'\n    symbol = 'AAPL'\n    base_url = 'https://www.alphavantage.co/query?'\n    function = 'GLOBAL_QUOTE'\n    sense = SenseHat()\n    sense.set_rotation(270)\n    last_call_time = time.time() - 180\n    last_ticker_info = \"\"\n    ```", "```py\n    while True:\n        current_time = time.time()\n        if current_time - last_call_time >= 180:\n            complete_url = f'{base_url}function={\n                           function}&symbol={\n                           symbol}&apikey={api_key}'\n            response = requests.get(complete_url)\n            data = response.json()\n            quote = data['Global Quote']\n            ticker_info = (\n                        f\"{quote['01\\. symbol']} \"\n                        f\"Price: {quote['05\\. price']} \"\n            )\n            ticker_info += (\n                        f\"Volume: {quote['06\\. volume']} \"\n                        f\"Change: {quote['09\\. change']}\"\n            )\n            last_ticker_info = ticker_info\n            sense.show_message(ticker_info,\n                               scroll_speed=0.05,\n                               text_colour=[255,\n                               255,\n                               255])\n            last_call_time = current_time\n        else:\n            sense.show_message(last_ticker_info,\n                               scroll_speed=0.05,\n                               text_colour=[255,\n                               255,\n                               255])\n        time.sleep(1)\n    ```", "```py\n    import requests\n    url = \"https://api.openweathermap.org/data/2.5/weather\"\n    api_key = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    location = \"Toronto\"\n    params = {\n        \"q\": location,\n        \"appid\": api_key,\n        \"units\": \"metric\"\n    }\n    response = requests.get(url, params=params)\n    if response.status_code == 200:\n        data = response.json()\n        temperature = data[\"main\"][\"temp\"]\n        description = data[\"weather\"][0][\"description\"]\n        print(f\"The current temperature in {location} is {temperature}°C.\")\n        print(f\"The weather is {description}.\")\n    else:\n        print(\"Error: Failed to retrieve weather information.\")\n    ```", "```py\n    import requests\n    from sense_hat import SenseHat\n    import time\n    ```", "```py\n    api_key = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n    location = 'Toronto'\n    base_url = 'https://api.openweathermap.org/data/2.5/weather'\n    params = {\n        'q': location,\n        'appid': api_key,\n        'units': 'metric'\n    }\n    sense = SenseHat()\n    sense.set_rotation(270)\n    last_call_time = time.time() - 30\n    last_weather_info = \"\"\n    ```", "```py\n    while True:\n        current_time = time.time()\n        if current_time - last_call_time >= 30:\n            response = requests.get(base_url,\n                       params=params)\n            data = response.json()\n            temperature = data['main']['temp']\n            description = data['weather'][0]['description']\n            weather_info = f\"{location}: {temperature}°C, {description}\"\n            last_weather_info = weather_info\n            sense.show_message(weather_info, scroll_speed=0.05, text_colour=[255, 255, 255])\n            last_call_time = current_time\n        else:\n            sense.show_message(last_weather_info, scroll_speed=0.05, text_colour=[255, 255, 255])\n        time.sleep(1)\n    ```", "```py\n    from sense_emu import SenseHat\n    class GreenCheck:\n        black = (0, 0, 0)\n        green = (0, 255, 0)\n        check_mark_pixels = [\n            black, black, black, black,\n            black, black, black, green,\n            black, black, black, black,\n            black, black, green, green,\n            black, black, black, black,\n            black, black, green, green,\n            black, black, black, black,\n            black, green, green, black,\n            green, black, black, black,\n            green, green, black, black,\n            black, green, black, black,\n            green, green, black, black,\n            black, green, green, green,\n            green, black, black, black,\n            black, black, black, green,\n            black, black, black, black\n        ]\n        def __init__(self, rotation=0):\n            self.sense = SenseHat()\n            self.sense.set_rotation(rotation)\n        def display(self):\n            self.sense.set_pixels(self.check_mark_pixels)\n    if __name__ == \"__main__\":\n        greenCheck = GreenCheck(rotation = 270)\n        greenCheck.display()\n    ```", "```py\n    from sense_emu import SenseHat\n    import time\n    ```", "```py\n    class RedXAnimation:\n        black = (0, 0, 0)\n        red = (255, 0, 0)\n        frame1 = [\n            red, black, black, black,\n            black, black, black, red,\n            black, red, black, black,\n            black, black, red, black,\n            black, black, red, black,\n            black, red, black, black,\n            black, black, black, red,\n            red, black, black, black,\n            black, black, black, red,\n            red, black, black, black,\n            black, black, red, black,\n            black, red, black, black,\n            black, red, black, black,\n            black, black, red, black,\n            red, black, black, black,\n            black, black, black, red\n        ]\n        frame2 = [\n            red, red, red, red, red, red, red, red,\n            red, red, red, red, red, red, red, red,\n            red, red, red, red, red, red, red, red,\n            red, red, red, red, red, red, red, red,\n            red, red, red, red, red, red, red, red,\n            red, red, red, red, red, red, red, red,\n            red, red, red, red, red, red, red, red,\n            red, red, red, red, red, red, red, red\n        ]\n    ```", "```py\n        def __init__(self, rotation=0):\n            self.sense = SenseHat()\n            self.sense.set_rotation(rotation)\n    ```", "```py\n        def display_animation(self, duration):\n            num_frames = 2\n            frame_duration = duration / num_frames\n            start_time = time.time()\n            end_time = start_time + 59\n            while time.time() < end_time:\n                for frame in [self.frame1, self.frame2]:\n                    self.sense.set_pixels(frame)\n                    time.sleep(frame_duration)\n    ```", "```py\n    if __name__ == \"__main__\":\n        animation = RedXAnimation(rotation=270)\n        animation.display_animation(duration=1)\n    ```", "```py\n    import requests\n    import time\n    from green_checkmark import GreenCheck\n    from flashing_x import RedXAnimation\n    ```", "```py\n    latitude = '42.346268'\n    longitude = '-71.095764'\n    go = GreenCheck(rotation=270)\n    no_go = RedXAnimation(rotation=270)\n    timer = 1\n    age = 12\n    base_url = \"https://api.openweathermap.org/data/2.5/weather\"\n    api_key = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    params = {\n        'lat': latitude,\n        'lon': longitude,\n        'appid': api_key,\n        'units': 'metric'\n    }\n    ```", "```py\n    while True:\n        response = requests.get(base_url, params=params)\n        if response.status_code == 200:\n            data = response.json()\n            temperature = data['main']['temp']\n            description = data['weather'][0]['main']\n            print(f\"The current temperature is {temperature}°C.\")\n            print(f\"The weather is {description}.\")\n            if description == 'Thunderstorm' or description == 'Rain' and age < 16:\n                print(\"NO-GO!\")\n                no_go.display_animation(duration=1)\n                timer = 1\n            else:\n                print(\"GO!\")\n                go.display()\n                timer = 60\n        else:\n            print(\"Error: Failed to retrieve weather information.\")\n        time.sleep(timer)\n    ```"]