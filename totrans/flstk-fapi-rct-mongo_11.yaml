- en: '11'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Useful Resources and Project Ideas
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, you will learn about **FastAPI, React, and MongoDB**
    (**FARM**) stack components and some recommended actions to understand the technologies
    that make up this flexible stack.
  prefs: []
  type: TYPE_NORMAL
- en: For building data-driven or data-intensive applications, this chapter provides
    some practical advice when working with the FARM stack, along with project ideas
    where the FARM stack, or very similar stacks, could be applicable and helpful.
    You will also learn how to find your way in the constantly changing web development
    and analytics fields. This will be helpful for those who come from the most diverse
    backgrounds, but their jobs or newfound passion drives them to find a path through
    the data-driven world.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: MongoDB considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FastAPI and Python considerations
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: React practices
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Beginner project ideas
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: MongoDB considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 2*](B22406_02.xhtml#_idTextAnchor026), *Setting Up the Database
    with MongoDB*, you were introduced to MongoDB to get you started with simpler
    projects. However, MongoDB is a complex ecosystem employed by enterprise-level
    companies. Therefore, diving deeper into its features and patterns will benefit
    you as a developer and help you understand the NoSQL paradigm.
  prefs: []
  type: TYPE_NORMAL
- en: One of the first steps in employing MongoDB is understanding data modeling or
    schema design. Your data model should reflect how your application will see the
    data and its flow, starting from the queries you make. There are advanced design
    patterns that apply to MongoDB schemas that are beyond the scope of this book.
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 2*](B22406_02.xhtml#_idTextAnchor026), *Setting Up the Database with
    MongoDB*, covered some popular MongoDB document modeling best practices. The following
    list provides more tips:'
  prefs: []
  type: TYPE_NORMAL
- en: Objects should be combined in the same document if they are meant to be used
    together. The quote “*Data that is accessed together, stays together*” might inform
    your schema.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: When separating objects into different documents, try not to make JOINs necessary,
    although simple LEFT JOINs are possible through the MongoDB aggregation framework.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The frequency of the data use cases should dictate the schemas. The most frequent
    data flows should be the easiest to access.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Coming from the relational database world, modeling relationships often boils
    down to the choice between **embedding** and **referencing**. In the simple application
    you worked on in previous chapters that listed used cars, you opted to reference
    the user ID when you made the CRUD application with users, since it was the simplest
    thing to do.
  prefs: []
  type: TYPE_NORMAL
- en: However, that could probably apply to a real-world setting as well. There are
    numerous empirical rules. For example, if the many sides of a *one-to-many* relationship
    could contain hundreds of items, embedding is probably not the best way to go.
  prefs: []
  type: TYPE_NORMAL
- en: The extensive MongoDB documentation states that **embedding** should be preferred
    in relationships that are *one-to-one*, *one-to-few*, and *one-to-many*, while
    **referencing** should be used in *one-to-very-numerous-many* and *many-to-many*
    cases.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'To learn more about the basics of data modeling using real-world examples,
    check the following documentation: [https://www.mongodb.com/developer/products/mongodb/mongodb-schema-design-best-practices/](https://www.mongodb.com/developer/products/mongodb/mongodb-schema-design-best-practices/).'
  prefs: []
  type: TYPE_NORMAL
- en: Additionally, Python drivers such as **PyMongo** and its async counterpart,
    **Motor**, play seamlessly with MongoDB. With the help of rich data structure
    system and data-processing capabilities of Python, it is relatively easy to change
    and mix things up, change schemas, and try out different types of documents until
    you find the optimal solution for your particular use case.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are two interesting projects that could be included in some of your applications:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Beanie** ([https://roman-right.github.io/beanie/](https://roman-right.github.io/beanie/))
    is an Asynchronous Python object-document mapper for MongoDB, based on Motor and
    Pydantic, that can speed up the creation of CRUD applications. You already learned
    how to use Beanie for backend development. Please refer to [*Chapter 9*](B22406_09.xhtml#_idTextAnchor153),
    *Third-Party Services Integration with FastAPI* *and Beanie*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mongita** ([https://github.com/scottrogowski/mongita](https://github.com/scottrogowski/mongita))
    can be thought of as SQLite for MongoDB. It could be useful as an embedded database
    for lighter cases in which you want to keep the data local, or for prototyping
    even before having to set up MongoDB or Atlas.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: FastAPI and Python considerations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python encompasses data and text processing, web development, data science,
    machine learning, numerical computations, visualizations, and virtually every
    possible aspect of computing.
  prefs: []
  type: TYPE_NORMAL
- en: Best practices in Python are applicable to FastAPI as well. However, since FastAPI
    translates simple Python functions (or even classes, inspired by the class-based
    views of Django) into REST API endpoints, you don’t have to do anything additional.
    FastAPI is built in a way that favors the developer, giving you the necessary
    flexibility and smoothness while writing an API.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list provides generic considerations that should be part of your
    FastAPI development process:'
  prefs: []
  type: TYPE_NORMAL
- en: Use **Git** and **GitHub** and learn a simple workflow. It is easier to learn
    one workflow and use it until you get used to it and then switch, rather than
    trying to learn all the commands at once, especially if you’re the only developer
    trying to automate or *REST-ify* a business process.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Keep your environment variables in `.env` files, but also back them up somewhere
    (API keys, external services credentials, or elsewhere).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learn the type hinting system of Python. It is closely related to Pydantic and
    adds a layer of robustness to your overall code. It is also an integral part of
    coding a FastAPI application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Structure your application properly. It is very easy and tempting to create
    a feature-rich application in a single file. This proves true especially if you
    do not have a clear specification, but you should resist this urge. Refer to the
    FastAPI documentation on structuring larger applications ([https://fastapi.tiangolo.com/tutorial/bigger-applications](https://fastapi.tiangolo.com/tutorial/bigger-applications)).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The main idea is to break the application into routers and Pydantic models,
    so that they have separate directories. For example, you have a `/routers` directory
    in the book, so you should have had a `/models` directory as well. These directories
    should each have an empty `__init__.py` file, making them Python modules. You
    can keep the external service utilities either in a separate file or in a `/helpers`
    directory. You could go granular, depending on the complexity of your app. Remember
    that you will always end up with an ASGI application that is the only endpoint
    referenced by your server of choice, such as Uvicorn or another server.
  prefs: []
  type: TYPE_NORMAL
- en: Testing FastAPI applications
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Testing is necessary to ensure that your application behaves the way it is supposed
    to. This chapter won’t cover **test-driven development** (**TDD**), in which tests
    are written before the actual code. However, there are some specific issues that
    you may run into when working with the async MongoDB Python driver, called Motor,
    and FastAPI.
  prefs: []
  type: TYPE_NORMAL
- en: Unit testing your API is essential and simple to set up. Every endpoint should
    be tested, and each should perform the tasks they are delegated. While unit testing
    in Python already has several mature frameworks, such as `unittest` and `pytest`,
    some FastAPI-specific points are worth mentioning.
  prefs: []
  type: TYPE_NORMAL
- en: The FastAPI documentation ([https://fastapi.tiangolo.com/tutorial/testing/](https://fastapi.tiangolo.com/tutorial/testing/))
    recommends that you use the `TestClient` class provided by Starlette. Francois
    Voron, in his excellent book *Building Data Science Applications with FastAPI*,
    recommends a slightly more advanced setup using `HTTPX` (an async HTTP library
    similar to `Requests`, developed by the Starlette team) and `pytest-asyncio`,
    making the whole process completely asynchronous.
  prefs: []
  type: TYPE_NORMAL
- en: The inclusion of Pydantic makes the testing of FastAPI applications a pleasant
    experience and enforces certain practices that tend to produce more stable software.
    On the other hand, the automatic documentation of FastAPI is an incredibly helpful
    tool that saves you time and frequent trips between the code editor and the client.
  prefs: []
  type: TYPE_NORMAL
- en: React practices
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B22406_01.xhtml#_idTextAnchor010), *Web Development and the
    FARM Stack*, you chose React for your frontend because of its simplicity and flexibility.
    If you are a visual learner, try the video course by *Academind GMBH* and its
    main author, Maximilian Schwarzmüller, called *React – The* *Complete Guide.*
  prefs: []
  type: TYPE_NORMAL
- en: Solid knowledge of JavaScript and ES6 is the best foundation for becoming a
    better React developer, but it is also important to dive a bit deeper into some
    fundamental React concepts and explore the Hooks mechanism, the component life
    cycle, and the component hierarchy.
  prefs: []
  type: TYPE_NORMAL
- en: You should familiarize yourself with other hooks; in this book, you get a glimpse
    of two or three of the most popular hooks, but there are many more. Knowing how
    and why hooks work the way they do will make you a better React developer.
  prefs: []
  type: TYPE_NORMAL
- en: As of 2024, React functional components are generally preferred to older class-based
    ones as they are more concise, maintainable, and flexible.
  prefs: []
  type: TYPE_NORMAL
- en: Other topics
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section emphasizes some other important points that would be useful when
    using the FARM stack. While you can use the FARM stack for virtually any type
    of web application you choose, the stack might be more suitable for some types
    of apps and less suitable for others.
  prefs: []
  type: TYPE_NORMAL
- en: Authentication and authorization
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B22406_06.xhtml#_idTextAnchor105), *Authentication and Authorization*,
    is dedicated to implementing a JWT-based authentication solution with FastAPI
    and its consequent application in React. However, as mentioned in that chapter,
    that might not be the best or a viable solution for certain use cases. You may
    need to revert to a third-party provider such as Firebase, Auth0, or Cognito.
    Before committing to a third-party solution, be sure to fully understand the pros
    and cons, the consequences of a potential lock-in, and the price factor, especially
    if you are planning to scale the application.'
  prefs: []
  type: TYPE_NORMAL
- en: Data visualization and the FARM stack
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[*Chapter 1*](B22406_01.xhtml#_idTextAnchor010), *Web Development and the FARM
    Stack*, describes some rather simple visualizations, but with properly formatted
    and granular JSON responses and React as the frontend, almost anything is possible.
    This possibility to practically mold the data according to your needs gives you
    a great playground where you can test, tinker, and try out different solutions,
    perhaps iteratively, until you reach the type of data visualization that you are
    satisfied with.'
  prefs: []
  type: TYPE_NORMAL
- en: There is a broad spectrum of visualization requirements, and it isn’t necessary
    to try and craft a Shirley Wu D3.js piece of art, where a simple two-color stacked
    run-of-the-mill bar chart could have done the job. However, with the availability
    of a fast backend and MongoDB accommodating virtually any type of data structure
    that you might throw at it, you will be ready for any task. The `Observable` wrapper
    of D3.js has a very interesting interface and abstracts many of the mechanisms
    of D3.js, so it might be a good place to start.
  prefs: []
  type: TYPE_NORMAL
- en: Relational databases
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If your use case requires the complexity of relational databases, such as SQL,
    and their strict structure, you don’t need to abandon the FARM stack altogether.
    Given the modularity of FastAPI and some of the deployment options that this book
    explored, you can plug in a relational database, such as Postgres or MySQL, explore
    the documentation of SQLAlchemy or some async database Python drivers, and simply
    add said functionality while managing the users, for instance, through MongoDB.
  prefs: []
  type: TYPE_NORMAL
- en: Some project ideas to get started
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This section lists some project ideas to help you explore the possibilities
    of the FARM stack and hone your skills, but above all, explore your creativity.
    These sample project ideas will help you explore some functionalities of the FARM
    stack, like building document automation pipelines, creating data dashboard applications,
    and building portfolio sites.
  prefs: []
  type: TYPE_NORMAL
- en: Old-school portfolio website
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This project shows how FastAPI, React, and MongoDB are perfectly capable of
    handling simple portfolio sites that include content such as an **about** page,
    service, gallery, contact form, and more.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following steps outline how you might create an app for this purpose:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a nice design (or try to recreate it in Tailwind CSS).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Plug in React-Router or Next.js if you want to make it fast.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Use server-side generation and image optimization.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'For the content, define a couple of Pydantic models: a blog post, portfolio
    item, article and so on. Then, create simple routes for serving them via `GET`
    requests.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Since this is a developers’ blog, you don’t even need to create an authentication
    system and `POST` or `PUT` routes: text-related content will be entered directly
    into MongoDB (Atlas or Compass) and images will go to separate folders on **Cloudinary**,
    queried directly through the API.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Incorporate **Markdown**, a powerful text preprocessor that converts simple
    text (Markdown) into valid HTML. Both Python and ES6/React have excellent libraries
    for handling Markdown, so you will be able to find a good combination.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: React-admin inventory
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Another project idea is to create an inventory system built on top of React-admin
    ([https://marmelab.com/react-admin/](https://marmelab.com/react-admin/)), with
    authentication from Auth0 or Firebase, and a public-facing interface. React-admin
    provides an admin interface similar to the one used by Django and it is based
    on CRUD verbs: each resource (or item) that exposes interfaces for `POST`, `PUT`,
    `GET`, and `DELETE` operations can be edited, deleted, and read and new instances
    can be created.'
  prefs: []
  type: TYPE_NORMAL
- en: Explore the package and try to think of some type of collection that you may
    want to manage. There are excellent tools such as **Airtable** that expose REST
    APIs that can be called from your FastAPI routes.
  prefs: []
  type: TYPE_NORMAL
- en: Plotly Dash or Streamlit to create exploratory data analysis applications
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'With Plotly Dash or Streamlit, you can build apps that you can use to play
    around your data. To see these tools in action, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Pick a dataset that you are familiar with.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create an input pipeline that programmatically accepts data and tests it out
    thoroughly. This data could come from a web or, better, API scraper or from an
    input file that uploads a JSON or CSV file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Clean the data, preprocess it, and insert it into the MongoDB datastore.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Next, based on the structure of the data, figure out some useful filters and
    controls, not unlike enterprise tools such as Tableau or Looker Studio. If you’re
    already familiar with data like that, you will know what to expect.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After that, you can open up a **Jupyter** notebook, install a couple of visualization
    libraries, and see what types of correlations or groupings can come up.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After you have found some interesting pandas-driven data wranglings, you can
    just extract them into separate functionalities, test them, and incorporate them
    into FastAPI endpoints, ready to be visualized with D3.js or Chart.js.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Finally, you could deploy your application and share it with your friend who
    manages your team to show them the data backing your draft decisions.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Earlier, you saw how easy it is to embed a machine learning model built with
    scikit-learn. Next, you can try embedding a neural network model with Keras or
    try out some simple linear regression.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Knowledge of data visualization and exploration frameworks such as Streamlit
    ([https://streamlit.io/](https://streamlit.io/)) or Dash ([https://dash.plotly.com/](https://dash.plotly.com/))
    will help you in building and deploying your data dashboard applications
  prefs: []
  type: TYPE_NORMAL
- en: A document automation pipeline
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Have you always been surrounded by repetitive documents that have the same
    structure? Here’s what you can do:'
  prefs: []
  type: TYPE_NORMAL
- en: Try to think of a document server based on the `docx-tpl` package, which allows
    you to define a Word template, formatted as it should be, and then pass a context
    containing all the data that needs to be in the document, such as text, images,
    tables, paragraphs, and titles, all while maintaining the initially defined styles.
    Similar and even more powerful automation can be achieved with Excel. You can
    use pandas for complex calculations, pivoting, and merging different documents
    into one.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: After creating the templates, think of some FastAPI endpoints that would perform
    `POST` requests and save the posted data to a MongoDB database, along with the
    data (for instance, the title of the document, the author, the data, or other
    details), and then trigger a DOCX or XLSX document render.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Save the file with a recognizable name (maybe by adding the current time or
    the UUID library, for uniqueness) in a directory and ensure this directory is
    servable, by FastAPI directly (via the static files functionality). If you plan
    to have a significant number of heavy documents, even an entire Nginx server block
    could work.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: These files could then be accessible to all the team members or even sent directly
    via mail with the cron command-line utility or something similar.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter presented some pointers to help you fortify your FARM stack knowledge,
    as well as provided some project ideas that you could customize and use as a starting
    point for your own projects. Using them, you can create numerous simple as well
    as some complex applications to showcase the capabilities and the flexibility
    of the stack. With regards to what can easily be achieved with the FARM stack,
    you can also explore other capabilities such as server-side rendering and image
    optimization with Next.js, send emails, and perform data visualizations.
  prefs: []
  type: TYPE_NORMAL
- en: FARM stack has a future as the stack of choice for professional development
    teams and data wranglers or freelancers who just need to tell a story through
    a web application. By embracing its components, you can build highly interactive
    and responsive applications tailored to various needs.
  prefs: []
  type: TYPE_NORMAL
- en: With all the knowledge and hands-on examples you performed throughout this book,
    you should now be confident in your journey to building fully functional applications
    using the FARM stack. As is true for any technology or tool, the more you practice,
    the more you get better!
  prefs: []
  type: TYPE_NORMAL
