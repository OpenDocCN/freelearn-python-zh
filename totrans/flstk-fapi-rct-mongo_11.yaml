- en: '11'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '11'
- en: Useful Resources and Project Ideas
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用资源及项目想法
- en: In this final chapter, you will learn about **FastAPI, React, and MongoDB**
    (**FARM**) stack components and some recommended actions to understand the technologies
    that make up this flexible stack.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章的最后部分，你将了解**FastAPI、React和MongoDB**（**FARM**）堆栈组件以及一些推荐的操作来理解构成这个灵活堆栈的技术。
- en: For building data-driven or data-intensive applications, this chapter provides
    some practical advice when working with the FARM stack, along with project ideas
    where the FARM stack, or very similar stacks, could be applicable and helpful.
    You will also learn how to find your way in the constantly changing web development
    and analytics fields. This will be helpful for those who come from the most diverse
    backgrounds, but their jobs or newfound passion drives them to find a path through
    the data-driven world.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 对于构建数据驱动或数据密集型应用，本章在处理FARM堆栈时提供了一些实用建议，以及FARM堆栈或非常相似的堆栈可能适用和有帮助的项目想法。你还将学习如何在不断变化的网络开发和数据分析领域中找到自己的道路。这对于来自最多样化背景的人来说将是有帮助的，但他们的工作或新发现的热情驱使他们通过数据驱动世界找到一条道路。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: MongoDB considerations
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: MongoDB注意事项
- en: FastAPI and Python considerations
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: FastAPI和Python注意事项
- en: React practices
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: React实践
- en: Beginner project ideas
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 初学者项目想法
- en: MongoDB considerations
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: MongoDB注意事项
- en: In [*Chapter 2*](B22406_02.xhtml#_idTextAnchor026), *Setting Up the Database
    with MongoDB*, you were introduced to MongoDB to get you started with simpler
    projects. However, MongoDB is a complex ecosystem employed by enterprise-level
    companies. Therefore, diving deeper into its features and patterns will benefit
    you as a developer and help you understand the NoSQL paradigm.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第2章*](B22406_02.xhtml#_idTextAnchor026)，*使用MongoDB设置数据库*中，你被介绍到MongoDB以帮助你开始更简单的项目。然而，MongoDB是一个由企业级公司使用的复杂生态系统。因此，深入了解其特性和模式将对你作为开发者有益，并帮助你理解NoSQL范式。
- en: One of the first steps in employing MongoDB is understanding data modeling or
    schema design. Your data model should reflect how your application will see the
    data and its flow, starting from the queries you make. There are advanced design
    patterns that apply to MongoDB schemas that are beyond the scope of this book.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在使用MongoDB时，第一步之一是理解数据建模或模式设计。你的数据模型应该反映你的应用程序如何看待数据及其流动，从你提出的查询开始。有一些高级设计模式适用于MongoDB模式，但超出了本书的范围。
- en: '[*Chapter 2*](B22406_02.xhtml#_idTextAnchor026), *Setting Up the Database with
    MongoDB*, covered some popular MongoDB document modeling best practices. The following
    list provides more tips:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第2章*](B22406_02.xhtml#_idTextAnchor026)，*使用MongoDB设置数据库*，涵盖了MongoDB文档建模的一些流行最佳实践。以下列表提供了更多建议：'
- en: Objects should be combined in the same document if they are meant to be used
    together. The quote “*Data that is accessed together, stays together*” might inform
    your schema.
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 如果对象打算一起使用，应该在同一份文档中组合。引用“*一起访问的数据，应该保持在一起*”可能有助于你的模式设计。
- en: When separating objects into different documents, try not to make JOINs necessary,
    although simple LEFT JOINs are possible through the MongoDB aggregation framework.
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当将对象分离到不同的文档中时，尽量不使JOIN变得必要，尽管通过MongoDB聚合框架可以实现简单的LEFT JOIN。
- en: The frequency of the data use cases should dictate the schemas. The most frequent
    data flows should be the easiest to access.
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 数据使用案例的频率应该决定模式。最频繁的数据流应该是最容易访问的。
- en: Coming from the relational database world, modeling relationships often boils
    down to the choice between **embedding** and **referencing**. In the simple application
    you worked on in previous chapters that listed used cars, you opted to reference
    the user ID when you made the CRUD application with users, since it was the simplest
    thing to do.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 来自关系型数据库世界的人，建模关系通常归结为**嵌入**和**引用**之间的选择。在前面章节中你处理过的简单应用中，当你用用户创建CRUD应用程序时，你选择了引用用户ID，因为这是最简单的事情。
- en: However, that could probably apply to a real-world setting as well. There are
    numerous empirical rules. For example, if the many sides of a *one-to-many* relationship
    could contain hundreds of items, embedding is probably not the best way to go.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，这也许同样适用于现实世界的场景。存在许多经验法则。例如，如果一个*一对多*关系的多个方面可能包含数百个项目，嵌入可能不是最佳选择。
- en: The extensive MongoDB documentation states that **embedding** should be preferred
    in relationships that are *one-to-one*, *one-to-few*, and *one-to-many*, while
    **referencing** should be used in *one-to-very-numerous-many* and *many-to-many*
    cases.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 广泛的 MongoDB 文档指出，在 *一对一*、*一对少* 和 *一对多* 的关系中应首选 *嵌入*，而在 *一对一非常多的多* 和 *多对多* 情况下应使用
    *引用*。
- en: Note
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'To learn more about the basics of data modeling using real-world examples,
    check the following documentation: [https://www.mongodb.com/developer/products/mongodb/mongodb-schema-design-best-practices/](https://www.mongodb.com/developer/products/mongodb/mongodb-schema-design-best-practices/).'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解使用真实世界示例的数据建模基础知识，请查看以下文档：[https://www.mongodb.com/developer/products/mongodb/mongodb-schema-design-best-practices/](https://www.mongodb.com/developer/products/mongodb/mongodb-schema-design-best-practices/)。
- en: Additionally, Python drivers such as **PyMongo** and its async counterpart,
    **Motor**, play seamlessly with MongoDB. With the help of rich data structure
    system and data-processing capabilities of Python, it is relatively easy to change
    and mix things up, change schemas, and try out different types of documents until
    you find the optimal solution for your particular use case.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，Python 驱动程序，如 **PyMongo** 和其异步对应物 **Motor**，与 MongoDB 无缝协作。借助 Python 丰富的数据结构系统和数据处理能力，相对容易地更改和混合事物，更改模式，并尝试不同类型的文档，直到找到特定用例的最佳解决方案。
- en: 'Here are two interesting projects that could be included in some of your applications:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有两个可能包含在你的某些应用程序中的有趣项目：
- en: '**Beanie** ([https://roman-right.github.io/beanie/](https://roman-right.github.io/beanie/))
    is an Asynchronous Python object-document mapper for MongoDB, based on Motor and
    Pydantic, that can speed up the creation of CRUD applications. You already learned
    how to use Beanie for backend development. Please refer to [*Chapter 9*](B22406_09.xhtml#_idTextAnchor153),
    *Third-Party Services Integration with FastAPI* *and Beanie*.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Beanie** ([https://roman-right.github.io/beanie/](https://roman-right.github.io/beanie/))
    是一个基于 Motor 和 Pydantic 的异步 Python 对象文档映射器，用于 MongoDB，可以加快 CRUD 应用程序的开发。你已经学习了如何使用
    Beanie 进行后端开发。请参阅 [*第 9 章*](B22406_09.xhtml#_idTextAnchor153)，*FastAPI 和 Beanie
    的第三方服务集成*。'
- en: '**Mongita** ([https://github.com/scottrogowski/mongita](https://github.com/scottrogowski/mongita))
    can be thought of as SQLite for MongoDB. It could be useful as an embedded database
    for lighter cases in which you want to keep the data local, or for prototyping
    even before having to set up MongoDB or Atlas.'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Mongita** ([https://github.com/scottrogowski/mongita](https://github.com/scottrogowski/mongita))
    可以被视为 MongoDB 的 SQLite。它可以用作需要本地保存数据的轻量级嵌入式数据库，或者在设置 MongoDB 或 Atlas 之前进行原型设计。'
- en: FastAPI and Python considerations
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: FastAPI 和 Python 考虑事项
- en: Python encompasses data and text processing, web development, data science,
    machine learning, numerical computations, visualizations, and virtually every
    possible aspect of computing.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Python 包含数据与文本处理、Web 开发、数据科学、机器学习、数值计算、可视化以及计算几乎所有的可能方面。
- en: Best practices in Python are applicable to FastAPI as well. However, since FastAPI
    translates simple Python functions (or even classes, inspired by the class-based
    views of Django) into REST API endpoints, you don’t have to do anything additional.
    FastAPI is built in a way that favors the developer, giving you the necessary
    flexibility and smoothness while writing an API.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: Python 的最佳实践也适用于 FastAPI。然而，由于 FastAPI 将简单的 Python 函数（甚至受 Django 基于类的视图启发的类）转换为
    REST API 端点，你不需要做任何额外的事情。FastAPI 以一种有利于开发者的方式构建，在编写 API 时为你提供必要的灵活性和流畅性。
- en: 'The following list provides generic considerations that should be part of your
    FastAPI development process:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 以下列表提供了应成为你的 FastAPI 开发过程一部分的通用考虑事项：
- en: Use **Git** and **GitHub** and learn a simple workflow. It is easier to learn
    one workflow and use it until you get used to it and then switch, rather than
    trying to learn all the commands at once, especially if you’re the only developer
    trying to automate or *REST-ify* a business process.
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 **Git** 和 **GitHub** 并学习一个简单的流程。学习一个流程并一直使用，直到你习惯它并切换，比一次性学习所有命令要容易得多，尤其是如果你是唯一一个试图自动化或
    *REST-ify* 业务流程的开发者。
- en: Keep your environment variables in `.env` files, but also back them up somewhere
    (API keys, external services credentials, or elsewhere).
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将你的环境变量保存在 `.env` 文件中，但也要在别处备份它们（API 密钥、外部服务凭证等）。
- en: Learn the type hinting system of Python. It is closely related to Pydantic and
    adds a layer of robustness to your overall code. It is also an integral part of
    coding a FastAPI application.
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习 Python 的类型提示系统。它与 Pydantic 密切相关，并为您的整体代码添加了一层鲁棒性。它也是编写 FastAPI 应用程序的一个基本组成部分。
- en: Structure your application properly. It is very easy and tempting to create
    a feature-rich application in a single file. This proves true especially if you
    do not have a clear specification, but you should resist this urge. Refer to the
    FastAPI documentation on structuring larger applications ([https://fastapi.tiangolo.com/tutorial/bigger-applications](https://fastapi.tiangolo.com/tutorial/bigger-applications)).
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 正确构建应用程序的结构。在单个文件中创建一个功能丰富的应用程序非常容易且诱人。这尤其适用于您没有明确的规范时，但您应该抵制这种冲动。请参考 FastAPI
    文档中关于构建大型应用程序的结构（[https://fastapi.tiangolo.com/tutorial/bigger-applications](https://fastapi.tiangolo.com/tutorial/bigger-applications)）。
- en: The main idea is to break the application into routers and Pydantic models,
    so that they have separate directories. For example, you have a `/routers` directory
    in the book, so you should have had a `/models` directory as well. These directories
    should each have an empty `__init__.py` file, making them Python modules. You
    can keep the external service utilities either in a separate file or in a `/helpers`
    directory. You could go granular, depending on the complexity of your app. Remember
    that you will always end up with an ASGI application that is the only endpoint
    referenced by your server of choice, such as Uvicorn or another server.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 主要思想是将应用程序分解为路由器和 Pydantic 模型，使它们有各自的目录。例如，书中有一个 `/routers` 目录，因此您也应该有一个 `/models`
    目录。这些目录应该各自有一个空的 `__init__.py` 文件，使它们成为 Python 模块。您可以将外部服务工具保存在一个单独的文件中，或者在一个
    `/helpers` 目录中。您可以根据应用程序的复杂度进行细化。请记住，您最终会得到一个 ASGI 应用程序，这是您选择的服务器（如 Uvicorn 或其他服务器）唯一引用的端点。
- en: Testing FastAPI applications
  id: totrans-34
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 测试 FastAPI 应用程序
- en: Testing is necessary to ensure that your application behaves the way it is supposed
    to. This chapter won’t cover **test-driven development** (**TDD**), in which tests
    are written before the actual code. However, there are some specific issues that
    you may run into when working with the async MongoDB Python driver, called Motor,
    and FastAPI.
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 测试是确保您的应用程序按预期运行所必需的。本章不会涵盖**测试驱动开发**（**TDD**），其中测试是在实际代码之前编写的。然而，当与异步 MongoDB
    Python 驱动程序 Motor 和 FastAPI 一起工作时，您可能会遇到一些特定的问题。
- en: Unit testing your API is essential and simple to set up. Every endpoint should
    be tested, and each should perform the tasks they are delegated. While unit testing
    in Python already has several mature frameworks, such as `unittest` and `pytest`,
    some FastAPI-specific points are worth mentioning.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 对您的 API 进行单元测试是必不可少的，并且设置起来很简单。每个端点都应该进行测试，并且每个端点都应该执行它们被分配的任务。虽然 Python 中的单元测试已经有了几个成熟的框架，如
    `unittest` 和 `pytest`，但有一些 FastAPI 特定的点值得提及。
- en: The FastAPI documentation ([https://fastapi.tiangolo.com/tutorial/testing/](https://fastapi.tiangolo.com/tutorial/testing/))
    recommends that you use the `TestClient` class provided by Starlette. Francois
    Voron, in his excellent book *Building Data Science Applications with FastAPI*,
    recommends a slightly more advanced setup using `HTTPX` (an async HTTP library
    similar to `Requests`, developed by the Starlette team) and `pytest-asyncio`,
    making the whole process completely asynchronous.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: FastAPI 文档（[https://fastapi.tiangolo.com/tutorial/testing/](https://fastapi.tiangolo.com/tutorial/testing/））建议您使用
    Starlette 提供的 `TestClient` 类。弗朗索瓦·沃龙在他的优秀书籍《使用 FastAPI 构建数据科学应用》中，推荐使用 `HTTPX`（一个类似于
    `Requests` 的异步 HTTP 库，由 Starlette 团队开发）和 `pytest-asyncio`，使整个过程完全异步。
- en: The inclusion of Pydantic makes the testing of FastAPI applications a pleasant
    experience and enforces certain practices that tend to produce more stable software.
    On the other hand, the automatic documentation of FastAPI is an incredibly helpful
    tool that saves you time and frequent trips between the code editor and the client.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 包含 Pydantic 使得测试 FastAPI 应用程序成为一种愉快的体验，并强制执行某些倾向于产生更稳定软件的实践。另一方面，FastAPI 的自动文档是一个非常有帮助的工具，可以节省您的时间，并减少在代码编辑器和客户端之间频繁切换。
- en: React practices
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: React 实践
- en: In [*Chapter 1*](B22406_01.xhtml#_idTextAnchor010), *Web Development and the
    FARM Stack*, you chose React for your frontend because of its simplicity and flexibility.
    If you are a visual learner, try the video course by *Academind GMBH* and its
    main author, Maximilian Schwarzmüller, called *React – The* *Complete Guide.*
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第1章*](B22406_01.xhtml#_idTextAnchor010)，*Web 开发和 FARM 栈* 中，你选择 React 作为前端是因为它的简单性和灵活性。如果你是一个视觉学习者，尝试由
    *Academind GMBH* 和其主要作者 Maximilian Schwarzmüller 提供的视频课程，名为 *React – The Complete
    Guide*。
- en: Solid knowledge of JavaScript and ES6 is the best foundation for becoming a
    better React developer, but it is also important to dive a bit deeper into some
    fundamental React concepts and explore the Hooks mechanism, the component life
    cycle, and the component hierarchy.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 对 JavaScript 和 ES6 的深入了解是成为更好的 React 开发者的最佳基础，但深入了解一些基本的 React 概念也很重要，探索 Hooks
    机制、组件生命周期和组件层次结构。
- en: You should familiarize yourself with other hooks; in this book, you get a glimpse
    of two or three of the most popular hooks, but there are many more. Knowing how
    and why hooks work the way they do will make you a better React developer.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 你应该熟悉其他 Hooks；在这本书中，你将了解两到三个最受欢迎的 Hooks，但还有很多。了解 Hooks 如何以及为什么以这种方式工作将使你成为更好的
    React 开发者。
- en: As of 2024, React functional components are generally preferred to older class-based
    ones as they are more concise, maintainable, and flexible.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 2024 年，React 函数式组件通常比旧的基于类的组件更受欢迎，因为它们更简洁、易于维护和灵活。
- en: Other topics
  id: totrans-44
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 其他主题
- en: This section emphasizes some other important points that would be useful when
    using the FARM stack. While you can use the FARM stack for virtually any type
    of web application you choose, the stack might be more suitable for some types
    of apps and less suitable for others.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 本节强调了在使用 FARM 栈时一些其他重要的要点，这些要点可能会很有用。虽然你可以为几乎任何类型的网络应用选择使用 FARM 栈，但这个栈可能更适合某些类型的应用，而不太适合其他类型的。
- en: Authentication and authorization
  id: totrans-46
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 身份验证和授权
- en: '[*Chapter 6*](B22406_06.xhtml#_idTextAnchor105), *Authentication and Authorization*,
    is dedicated to implementing a JWT-based authentication solution with FastAPI
    and its consequent application in React. However, as mentioned in that chapter,
    that might not be the best or a viable solution for certain use cases. You may
    need to revert to a third-party provider such as Firebase, Auth0, or Cognito.
    Before committing to a third-party solution, be sure to fully understand the pros
    and cons, the consequences of a potential lock-in, and the price factor, especially
    if you are planning to scale the application.'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第6章*](B22406_06.xhtml#_idTextAnchor105)，*身份验证和授权*，专注于使用 FastAPI 实现基于 JWT
    的身份验证解决方案及其在 React 中的后续应用。然而，正如该章节中提到的，这可能不是最佳或可行的解决方案，对于某些用例来说。你可能需要回退到第三方提供商，如
    Firebase、Auth0 或 Cognito。在承诺使用第三方解决方案之前，务必充分了解其优缺点、潜在锁定后果以及价格因素，尤其是如果你计划扩展应用程序的话。'
- en: Data visualization and the FARM stack
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 数据可视化和 FARM 栈
- en: '[*Chapter 1*](B22406_01.xhtml#_idTextAnchor010), *Web Development and the FARM
    Stack*, describes some rather simple visualizations, but with properly formatted
    and granular JSON responses and React as the frontend, almost anything is possible.
    This possibility to practically mold the data according to your needs gives you
    a great playground where you can test, tinker, and try out different solutions,
    perhaps iteratively, until you reach the type of data visualization that you are
    satisfied with.'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '[*第1章*](B22406_01.xhtml#_idTextAnchor010)，*Web 开发和 FARM 栈*，描述了一些相当简单的可视化，但通过格式化良好的细粒度
    JSON 响应和 React 作为前端，几乎任何事都是可能的。这种根据你的需求实际塑造数据的能力为你提供了一个巨大的游乐场，你可以在这里测试、尝试和尝试不同的解决方案，也许是通过迭代，直到你达到满意的类型的数据可视化。'
- en: There is a broad spectrum of visualization requirements, and it isn’t necessary
    to try and craft a Shirley Wu D3.js piece of art, where a simple two-color stacked
    run-of-the-mill bar chart could have done the job. However, with the availability
    of a fast backend and MongoDB accommodating virtually any type of data structure
    that you might throw at it, you will be ready for any task. The `Observable` wrapper
    of D3.js has a very interesting interface and abstracts many of the mechanisms
    of D3.js, so it might be a good place to start.
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 存在着广泛的可视化需求，并不一定需要尝试制作类似 Shirley Wu D3.js 的艺术品，其中简单的双色堆叠柱状图就能完成任务。然而，有了快速的后端和
    MongoDB 可以容纳你抛给它的几乎任何类型的数据结构，你将准备好应对任何任务。D3.js 的 `Observable` 包装器有一个非常有趣的接口，并抽象了
    D3.js 的许多机制，因此这可能是一个良好的起点。
- en: Relational databases
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 关系数据库
- en: If your use case requires the complexity of relational databases, such as SQL,
    and their strict structure, you don’t need to abandon the FARM stack altogether.
    Given the modularity of FastAPI and some of the deployment options that this book
    explored, you can plug in a relational database, such as Postgres or MySQL, explore
    the documentation of SQLAlchemy or some async database Python drivers, and simply
    add said functionality while managing the users, for instance, through MongoDB.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您的用例需要关系数据库的复杂性，例如 SQL 和它们的严格结构，您不需要完全放弃 FARM 栈。鉴于 FastAPI 的模块化和本书探讨的一些部署选项，您可以插入一个关系数据库，如
    Postgres 或 MySQL，探索 SQLAlchemy 或一些异步数据库 Python 驱动程序的文档，并简单地添加所述功能，同时管理用户，例如通过
    MongoDB。
- en: Some project ideas to get started
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 一些启动项目想法
- en: This section lists some project ideas to help you explore the possibilities
    of the FARM stack and hone your skills, but above all, explore your creativity.
    These sample project ideas will help you explore some functionalities of the FARM
    stack, like building document automation pipelines, creating data dashboard applications,
    and building portfolio sites.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 本节列出了一些项目想法，以帮助您探索 FARM 栈的可能性，磨练您的技能，但最重要的是发挥您的创造力。这些示例项目想法将帮助您探索 FARM 栈的一些功能，例如构建文档自动化流程、创建数据仪表板应用程序以及构建投资组合网站。
- en: Old-school portfolio website
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 传统的投资组合网站
- en: This project shows how FastAPI, React, and MongoDB are perfectly capable of
    handling simple portfolio sites that include content such as an **about** page,
    service, gallery, contact form, and more.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这个项目展示了 FastAPI、React 和 MongoDB 完全能够处理包括关于页面、服务、画廊、联系表单等内容在内的简单投资组合网站。
- en: 'The following steps outline how you might create an app for this purpose:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 以下步骤概述了您可能如何创建此类应用程序：
- en: Create a nice design (or try to recreate it in Tailwind CSS).
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个漂亮的设计（或者尝试在 Tailwind CSS 中重新创建它）。
- en: Plug in React-Router or Next.js if you want to make it fast.
  id: totrans-59
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想要快速实现，可以插入 React-Router 或 Next.js。
- en: Use server-side generation and image optimization.
  id: totrans-60
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用服务器端生成和图像优化。
- en: 'For the content, define a couple of Pydantic models: a blog post, portfolio
    item, article and so on. Then, create simple routes for serving them via `GET`
    requests.'
  id: totrans-61
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于内容，定义几个 Pydantic 模型：博客文章、投资组合项目、文章等。然后，创建简单的路由，通过 `GET` 请求提供服务。
- en: 'Since this is a developers’ blog, you don’t even need to create an authentication
    system and `POST` or `PUT` routes: text-related content will be entered directly
    into MongoDB (Atlas or Compass) and images will go to separate folders on **Cloudinary**,
    queried directly through the API.'
  id: totrans-62
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 由于这是一个开发者博客，您甚至不需要创建身份验证系统以及 `POST` 或 `PUT` 路由：与文本相关的内容将直接输入到 MongoDB（Atlas
    或 Compass）中，而图像将放入 **Cloudinary** 的单独文件夹中，并通过 API 直接查询。
- en: Incorporate **Markdown**, a powerful text preprocessor that converts simple
    text (Markdown) into valid HTML. Both Python and ES6/React have excellent libraries
    for handling Markdown, so you will be able to find a good combination.
  id: totrans-63
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 集成 **Markdown**，一种强大的文本预处理器，可以将简单的文本（Markdown）转换为有效的 HTML。Python 和 ES6/React
    都有处理 Markdown 的优秀库，因此您将能够找到一个好的组合。
- en: React-admin inventory
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: React-admin 库存
- en: 'Another project idea is to create an inventory system built on top of React-admin
    ([https://marmelab.com/react-admin/](https://marmelab.com/react-admin/)), with
    authentication from Auth0 or Firebase, and a public-facing interface. React-admin
    provides an admin interface similar to the one used by Django and it is based
    on CRUD verbs: each resource (or item) that exposes interfaces for `POST`, `PUT`,
    `GET`, and `DELETE` operations can be edited, deleted, and read and new instances
    can be created.'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个项目想法是创建一个基于 React-admin ([https://marmelab.com/react-admin/](https://marmelab.com/react-admin/))
    的库存系统，使用 Auth0 或 Firebase 进行身份验证，并有一个面向公众的界面。React-admin 提供了一个类似于 Django 使用的管理界面，它基于
    CRUD 动词：每个暴露 `POST`、`PUT`、`GET` 和 `DELETE` 操作接口的资源（或项目）都可以进行编辑、删除和读取，并且可以创建新的实例。
- en: Explore the package and try to think of some type of collection that you may
    want to manage. There are excellent tools such as **Airtable** that expose REST
    APIs that can be called from your FastAPI routes.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 探索这个包，并尝试思考一些你可能想要管理的集合类型。有一些优秀的工具，例如 **Airtable**，它提供了可以从你的 FastAPI 路由中调用的
    REST API。
- en: Plotly Dash or Streamlit to create exploratory data analysis applications
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 Plotly Dash 或 Streamlit 创建探索性数据分析应用程序
- en: 'With Plotly Dash or Streamlit, you can build apps that you can use to play
    around your data. To see these tools in action, follow these steps:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Plotly Dash或Streamlit，你可以构建可以用来玩转数据的应用程序。要查看这些工具的实际效果，请按照以下步骤操作：
- en: Pick a dataset that you are familiar with.
  id: totrans-69
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 选择一个你熟悉的数据集。
- en: Create an input pipeline that programmatically accepts data and tests it out
    thoroughly. This data could come from a web or, better, API scraper or from an
    input file that uploads a JSON or CSV file.
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个程序化接受数据并彻底测试的输入管道。这些数据可能来自网络或更好的API爬虫，或者来自上传JSON或CSV文件的输入文件。
- en: Clean the data, preprocess it, and insert it into the MongoDB datastore.
  id: totrans-71
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 清洗数据，预处理它，并将其插入到MongoDB数据存储中。
- en: Next, based on the structure of the data, figure out some useful filters and
    controls, not unlike enterprise tools such as Tableau or Looker Studio. If you’re
    already familiar with data like that, you will know what to expect.
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 接下来，根据数据的结构，找出一些有用的过滤器和管理控制，这类似于Tableau或Looker Studio等企业工具。如果你已经熟悉这样的数据，你将知道可以期待什么。
- en: After that, you can open up a **Jupyter** notebook, install a couple of visualization
    libraries, and see what types of correlations or groupings can come up.
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，你可以打开一个**Jupyter**笔记本，安装几个可视化库，看看会出现哪些类型的相关性或分组。
- en: After you have found some interesting pandas-driven data wranglings, you can
    just extract them into separate functionalities, test them, and incorporate them
    into FastAPI endpoints, ready to be visualized with D3.js or Chart.js.
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在找到一些有趣的pandas驱动的数据处理之后，你只需将它们提取到单独的功能中，进行测试，并将它们集成到FastAPI端点中，就可以用D3.js或Chart.js进行可视化。
- en: Finally, you could deploy your application and share it with your friend who
    manages your team to show them the data backing your draft decisions.
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，你可以部署你的应用程序，并与管理你团队的朋友分享，向他们展示支持你草案决策的数据。
- en: Earlier, you saw how easy it is to embed a machine learning model built with
    scikit-learn. Next, you can try embedding a neural network model with Keras or
    try out some simple linear regression.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，你已经看到了如何轻松地嵌入使用scikit-learn构建的机器学习模型。接下来，你可以尝试嵌入使用Keras的神经网络模型，或者尝试一些简单的线性回归。
- en: Note
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Knowledge of data visualization and exploration frameworks such as Streamlit
    ([https://streamlit.io/](https://streamlit.io/)) or Dash ([https://dash.plotly.com/](https://dash.plotly.com/))
    will help you in building and deploying your data dashboard applications
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 了解数据可视化和探索框架，如Streamlit ([https://streamlit.io/](https://streamlit.io/)) 或 Dash
    ([https://dash.plotly.com/](https://dash.plotly.com/))，将有助于你构建和部署你的数据仪表板应用程序。
- en: A document automation pipeline
  id: totrans-79
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 文档自动化管道
- en: 'Have you always been surrounded by repetitive documents that have the same
    structure? Here’s what you can do:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 你是否一直被结构相同的重复性文档所包围？以下是你能做的事情：
- en: Try to think of a document server based on the `docx-tpl` package, which allows
    you to define a Word template, formatted as it should be, and then pass a context
    containing all the data that needs to be in the document, such as text, images,
    tables, paragraphs, and titles, all while maintaining the initially defined styles.
    Similar and even more powerful automation can be achieved with Excel. You can
    use pandas for complex calculations, pivoting, and merging different documents
    into one.
  id: totrans-81
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 尝试想象一个基于`docx-tpl`包的文档服务器，这个包允许你定义一个Word模板，按照应有的格式进行格式化，然后传递一个包含所有需要在文档中的数据的上下文，例如文本、图像、表格、段落和标题，同时保持最初定义的样式。使用Excel可以实现类似的甚至更强大的自动化。你可以使用pandas进行复杂的计算、数据透视和将不同的文档合并成一个。
- en: After creating the templates, think of some FastAPI endpoints that would perform
    `POST` requests and save the posted data to a MongoDB database, along with the
    data (for instance, the title of the document, the author, the data, or other
    details), and then trigger a DOCX or XLSX document render.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在创建模板后，考虑一些执行`POST`请求并将发布的数据保存到MongoDB数据库中的FastAPI端点，包括数据（例如，文档的标题、作者、数据或其他细节），然后触发DOCX或XLSX文档渲染。
- en: Save the file with a recognizable name (maybe by adding the current time or
    the UUID library, for uniqueness) in a directory and ensure this directory is
    servable, by FastAPI directly (via the static files functionality). If you plan
    to have a significant number of heavy documents, even an entire Nginx server block
    could work.
  id: totrans-83
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将文件保存为可识别的名称（可能通过添加当前时间或UUID库来实现唯一性）在目录中，并确保这个目录可以通过FastAPI直接（通过静态文件功能）提供服务。如果你计划处理大量的重文档，甚至整个Nginx服务器块也可能适用。
- en: These files could then be accessible to all the team members or even sent directly
    via mail with the cron command-line utility or something similar.
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这些文件可以供所有团队成员访问，或者通过 cron 命令行工具或类似的方式直接通过邮件发送。
- en: Summary
  id: totrans-85
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter presented some pointers to help you fortify your FARM stack knowledge,
    as well as provided some project ideas that you could customize and use as a starting
    point for your own projects. Using them, you can create numerous simple as well
    as some complex applications to showcase the capabilities and the flexibility
    of the stack. With regards to what can easily be achieved with the FARM stack,
    you can also explore other capabilities such as server-side rendering and image
    optimization with Next.js, send emails, and perform data visualizations.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 本章提供了一些指导方针，以帮助您巩固您的 FARM 栈知识，同时提供了一些您可以自定义并用作自己项目起点的项目想法。使用它们，您可以创建众多简单以及一些复杂的应用程序，以展示该栈的能力和灵活性。关于使用
    FARM 栈可以轻松实现的内容，您还可以探索其他功能，例如使用 Next.js 进行服务器端渲染和图像优化，发送电子邮件，以及执行数据可视化。
- en: FARM stack has a future as the stack of choice for professional development
    teams and data wranglers or freelancers who just need to tell a story through
    a web application. By embracing its components, you can build highly interactive
    and responsive applications tailored to various needs.
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: FARM 栈作为专业开发团队和数据整理者或只需通过网络应用讲述故事的自由职业者的首选栈，拥有未来。通过采用其组件，您可以构建高度交互和响应式的应用程序，以满足各种需求。
- en: With all the knowledge and hands-on examples you performed throughout this book,
    you should now be confident in your journey to building fully functional applications
    using the FARM stack. As is true for any technology or tool, the more you practice,
    the more you get better!
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，您已经学习了所有知识和动手实践示例，现在您应该对自己的使用 FARM 栈构建完整功能的应用程序的旅程充满信心。正如任何技术或工具一样，您练习得越多，您就会变得越好！
