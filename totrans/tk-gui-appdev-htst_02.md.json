["```py\n>>> import Tkinter\n>>>help(Tkinter)\n\n```", "```py\n    from Tkinter import *\n    root = Tk()\n    # all our code is entered here\n    root.mainloop()\n    ```", "```py\n    mymenu = Menu(parent, **options)\n    ```", "```py\n    # Adding Menubar in the widget\n    menubar = Menu(root)\n    filemenu = Menu(menubar, tearoff=0 ) # File menu\n    root.config(menu=menubar) # this line actually displays menu\n    ```", "```py\n    mymenu.add_command(label=\"Mylabel\", accelerator='KeyBoard Shortcut', compound=LEFT, image=myimage, underline=0,  command=callback)\n    ```", "```py\n    mymenu.add_command(label=\"Undo\", accelerator='Ctrl + Z', compound=LEFT, image=undoimage, command=undocallback)\n    ```", "```py\n    shortcutbar = Frame(root,  height=25, bg='light sea green')\n    shortcutbar.pack(expand=NO, fill=X)\n    lnlabel = Label(root,  width=2,  bg = 'antique white')\n    lnlabel.pack(side=LEFT, anchor='nw', fill=Y)\n    ```", "```py\n    textPad = Text(root)\n    textPad.pack(expand=YES, fill=BOTH)\n    scroll=Scrollbar(textPad)\n    textPad.configure(yscrollcommand=scroll.set)\n    scroll.config(command=textPad.yview)\n    scroll.pack(side=RIGHT, fill=Y)\n    ```", "```py\nfilemenu.add_command(label=\"New\", accelerator='Ctrl+N', compound=LEFT, image=newicon, underline=0,  command=new_file)\n```", "```py\nviewmenu.add_checkbutton(label=\"Show Line Number\", variable=showln)\nviewmenu.add_cascade(label=\"Themes\", menu=themesmenu)\nthemesmenu.add_radiobutton(label=\"Default White\", variable=theme)\n```", "```py\n    widget.event_generate(sequence, **kw)\n\n    ```", "```py\n    textPad.event_generate(\"<<Cut>>\")\n    ```", "```py\n    def cut():\n     textPad.event_generate(\"<<Cut>>\")\n    # then define a command callback from our existing cut menu like:\n    editmenu.add_command(label=\"Cut\", compound=LEFT, image=cuticon, accelerator='Ctrl+X', command=cut)\n    ```", "```py\n    textPad = Text(root, undo=True)\n    ```", "```py\nmytext.tag_add('sel', '1.0', 'end') # add SEL tag from start(1.0) to end\nmytext.tag_add(\"danger\", \"insert linestart\", \"insert lineend+1c\")\nmytext.tag_remove(\"danger\", 1.0, \"end\")\nmytext.tag_config('danger', background=red)\nmytext.tag_config('outdated', overstrike=1)\n```", "```py\n>>> import Tkinter\n>>> help(Tkinter.Text)\n\n```", "```py\n    def select_all():\n      textPad.tag_add('sel', '1.0', 'end')\n\n    ```", "```py\n    editmenu.add_command(label=\"Select All\", underline=7, accelerator='Ctrl+A', command=select_all)\n    ```", "```py\n    search(pattern, startindex, stopindex=None, forwards=None, backwards=None, exact=None, regexp=None, nocase=None, count=None)\n    ```", "```py\n    editmenu.add_command(label=\"Find\", underline= 0, accelerator='Ctrl+F', command=on_find)\n    ```", "```py\n    def on_find():\n      t2 = Toplevel(root)\n      t2.title('Find')\n      t2.geometry('262x65+200+250')\n      t2.transient(root)\n      Label(t2, text=\"Find All:\").grid(row=0, column=0, sticky='e')\n          v=StringVar()\n          e = Entry(t2, width=25, textvariable=v)\n      e.grid(row=0, column=1, padx=2, pady=2, sticky='we')\n      e.focus_set()\n      c=IntVar()\n      Checkbutton(t2, text='Ignore Case', variable=c).grid(row=1, column=1, sticky='e', padx=2, pady=2)\n      Button(t2, text=\"Find All\", underline=0,  command=lambda: search_for(v.get(), c.get(), textPad, t2, e)).grid(row=0, column=2, sticky='e'+'w', padx=2, pady=2)\n\n    def close_search():\n      textPad.tag_remove('match', '1.0', END)\n      t2.destroy()\n\n    t2.protocol('WM_DELETE_WINDOW', close_search)#override close \n    ```", "```py\n    def search_for(needle, cssnstv, textPad, t2, e) :\n      textPad.tag_remove('match', '1.0', END)\n      count =0\n      if needle:\n        pos = '1.0'\n        while True:\n          pos = textPad.search(needle, pos, nocase=cssnstv,stopindex=END)\n        if not pos: break\n          lastpos = '%s+%dc' % (pos, len(needle))\n          textPad.tag_add('match', pos, lastpos)\n          count += 1\n          pos = lastpos\n      textPad.tag_config('match', foreground='red',background='yellow')\n      e.focus_set()\n      t2.title('%d matches found' %count)\n    ```", "```py\n        search(pattern,  index,  stopindex=None,  forwards=None,  backwards=None, exact=None, regexp=None, nocase=None, count=None)\n        ```", "```py\n    root.protocol(\"WM_DELETE_WINDOW\", callback)\n\n    ```", "```py\nimport tkFileDialog\n\n```", "```py\n    import tkFileDialog\n    import os\n\n    def open_file():\n      global filename\n      filename =   tkFileDialog.askopenfilename(defaultextension=\".txt\",filetypes =[(\"All Files\",\"*.*\"),(\"Text Documents\",\"*.txt\")])\n      if filename == \"\": # If no file chosen.\n        filename = None # Absence of file.\n      else:\n        root.title(os.path.basename(filename) + \" - pyPad\") # \n        #Returning the basename of 'file'\n        textPad.delete(1.0,END)         \n        fh = open(filename,\"r\")        \n        textPad.insert(1.0,fh.read()) \n        fh.close()\n    ```", "```py\n    filemenu.add_command(label=\"Open\", accelerator='Ctrl+O', compound=LEFT, image=openicon, underline =0, command=open_file)\n    ```", "```py\n    #Defining save method\n    def save():\n      global filename\n      try:\n        f = open(filename, 'w')\n        letter = textPad.get(1.0, 'end')\n        f.write(letter)\n        f.close()\n      except:\n        save_as()\n\n    #Defining save_as method\n    def save_as():\n      try:\n         # Getting a filename to save the file.\n         f = tkFileDialog.asksaveasfilename(initialfile = 'Untitled.txt', defaultextension=\".txt\",filetypes=[(\"All Files\",\"*.*\"),(\"Text Documents\",\"*.txt\")])\n         fh = open(f, 'w')           \n         textoutput = textPad.get(1.0, END)\n         fh.write(textoutput)              \n         fh.close()\n         root.title(os.path.basename(f) + \" - pyPad\")\n      except:\n         pass\n\n    filemenu.add_command(label=\"Save\", accelerator='Ctrl+S', compound=LEFT, image=saveicon, underline=0, command=save)\n    filemenu.add_command(label=\"Save as\", accelerator='Shift+Ctrl+S', command=save_as)\n    ```", "```py\n    def new_file():\n      root.title(\"Untitled\")\n      global filename\n      filename = None\n      textPad.delete(1.0,END)\n\n      filemenu.add_command(label=\"New\", accelerator='Ctrl+N', compound=LEFT, image=newicon, underline=0, command=new_file  )\n    ```", "```py\nimport tkMessageBox\n\n```", "```py\ntkMessageBox.showwarning(\"Beware\", \"You are warned\")\ntkMessageBox.showinfo(\"FYI\", \"This is FYI\")\ntkMessageBox.showerror(\"Err..\", \"its leaking.\")\ntkMessageBox.askquestion(\"?\", \"Can you read this ?\")\ntkMessageBox.askokcancel(\"OK\", \"Quit Postponing ?\")\ntkMessageBox.askyesno(\"Yes or No\", \" What Say ?\")    \ntkMessageBox.askretrycancel(\"Retry\", \"Load Failed\")\n```", "```py\n    import tkMessageBox\n    def about(event=None):\n      tkMessageBox.showinfo(\"About\",\"Tkinter GUI Application\\n Development Hotshot\")\n\n    def help_box(event=None):\n      tkMessageBox.showinfo(\"Help\",\"For help refer to book:\\n\n      Tkinter GUI Application\\n Development Hotshot \", icon='question')\n\n    aboutmenu.add_cascade(label=\"Help\", command=help_box)\n    ```", "```py\n    def exit_editor(event=None):\n      if tkMessageBox.askokcancel(\"Quit\", \"Do you really want to quit?\"):\n        root.destroy()\n    root.protocol('WM_DELETE_WINDOW', exit_command) # override close \n    filemenu.add_command(label=\"Exit\", accelerator='Alt+F4', command=exit_editor)\n    ```", "```py\n    shortcutbar = Frame(root,  height=25, bg='light sea green')\n    #creating icon toolbar\n    icons = ['new_file', 'open_file', 'save', 'cut', 'copy', 'paste', 'undo', 'redo', 'on_find', 'about']\n    for i, icon in enumerate(icons):\n      tbicon = PhotoImage(file='icons/'+icon+'.gif')\n      cmd = eval(icon)\n      toolbar = Button(shortcutbar, image=tbicon, command=cmd)\n      toolbar.image = tbicon\n      toolbar.pack(side=LEFT)\n    shortcutbar.pack(expand=NO, fill=X)\n    ```", "```py\n        \ttextPad.bind(\"<Any-KeyPress>\", update_line_number)\n        ```", "```py\n    def update_line_number(event=None):\n      txt = ''\n      if showln.get(): \n         endline, endcolumn = textPad.index('end-1c').split('.')\n         txt = '\\n'.join(map(str, range(1, int(endline))))\n      lnlabel.config(text=txt, anchor='nw')\n    ```", "```py\n        \tshowln = IntVar()\n        \tshowln.set(1)\n        \tviewmenu.add_checkbutton(label=\"Show Line Number\", variable=showln)\n        \tupdate_line_number\n        ```", "```py\n    TypeError: myfunction() takes no arguments (1 given)\n\n    ```", "```py\n    hltln = IntVar()\n    viewmenu.add_checkbutton(label=\"Highlight Current Line\", onvalue=1, offvalue=0, variable=hltln, command=toggle_highlight)\n    ```", "```py\n    #line highlighting \n    def highlight_line(interval=100):\n      textPad.tag_remove(\"active_line\", 1.0, \"end\")\n      textPad.tag_add(\"active_line\", \"insert linestart\", \"insert lineend+1c\")\n      textPad.after(interval, toggle_highlight)\n\n    def undo_highlight():\n      textPad.tag_remove(\"active_line\", 1.0, \"end\")\n\n    def toggle_highlight(event=None):\n      val = hltln.get()\n      undo_highlight() if not val else highlight_line()\n    ```", "```py\n        \ttextPad.tag_configure(\"active_line\", background=\"ivory2\")\n        ```", "```py\n    infobar = Label(textPad, text='Line: 1 | Column: 0')\n    infobar.pack(expand=NO, fill=None, side=RIGHT, anchor='se')\n    ```", "```py\n    currline, curcolumn = textPad.index(\"insert\").split('.')\n    infobar.config(text= 'Line: %s | Column: %s' %(currline, curcolumn))\n    ```", "```py\n    def show_info_bar():\n      val = showinbar.get()\n      if val:\n        infobar.pack(expand=NO, fill=None, side=RIGHT, anchor='se')\n      elif not val:\n        infobar.pack_forget()\n    ```", "```py\n    viewmenu.add_checkbutton(label=\"Show Info Bar at Bottom\", variable=showinbar ,command=show_info_bar)\n    ```", "```py\n    clrschms = {\n    '1\\. Default White': '000000.FFFFFF',\n    '2\\. Greygarious Grey': '83406A.D1D4D1',\n    '3\\. Lovely Lavender': '202B4B.E1E1FF' ,\n    '4\\. Aquamarine': '5B8340.D1E7E0',\n    '5\\. Bold Beige': '4B4620.FFF0E1',\n    '6\\. Cobalt Blue': 'ffffBB.3333aa',\n    '7\\. Olive Green': 'D1E7E0.5B8340',\n    }\n    ```", "```py\n    themechoice= StringVar()\n    themechoice.set('1\\. Default White')\n    for k in sorted(clrschms):\n      themesmenu.add_radiobutton(label=k, variable=themechoice, command=theme)\n      menubar.add_cascade(label=\"View\", menu=viewmenu)\n    ```", "```py\n    def theme():\n      global bgc,fgc\n      val = themechoice.get()\n      clrs = clrschms.get(val)\n      fgc, bgc = clrs.split('.')\n      fgc, bgc = '#'+fgc, '#'+bgc\n      textPad.config(bg=bgc, fg=fgc)\n    ```", "```py\n    textPad.bind('<Control-N>', new_file)\n    textPad.bind('<Control-n>', new_file)\n    textPad.bind('<Control-O>', open_file)\n    textPad.bind('<Control-o>', open_file)\n    textPad.bind('<Control-S>', save)\n    textPad.bind('<Control-s>', save)\n    textPad.bind('<Control-A>', select_all)\n    textPad.bind('<Control-a>', select_all)\n    textPad.bind('<Control-f>', on_find)\n    textPad.bind('<Control-F>', on_find)\n    textPad.bind('<KeyPress-F1>', help_box)\n    ```", "```py\n    cmenu = Menu(textPad)\n    for i in ('cut', 'copy', 'paste', 'undo', 'redo'):\n      cmd = eval(i)\n      cmenu.add_command(label=i, compound=LEFT, command=cmd)  \n      cmenu.add_separator()\n      cmenu.add_command(label='Select All', underline=7, command=select_all)\n    ```", "```py\n    textPad.bind(\"<Button-3>\", popup)\n    ```", "```py\n    def popup(event):\n      cmenu.tk_popup(event.x_root, event.y_root, 0)\n    ```", "```py\n    root.iconbitmap('icons/pypad.ico') \n    ```"]