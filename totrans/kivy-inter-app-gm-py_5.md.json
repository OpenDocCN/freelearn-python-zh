["```py\n1\\. # File name: invasion.kv\n2\\. <Invasion>:\n3\\.   id: _invasion\n4\\.   shooter: _shooter\n5\\.   fleet: _fleet\n6\\.   AnchorLayout:\n7\\.     anchor_y: 'top'\n8\\.     anchor_x: 'center'\n9\\.     FloatLayout:\n10\\.       id: _enemy_area\n11\\.       size_hint: 1, .7\n12\\.       Fleet:\n13\\.         id: _fleet\n14\\.         invasion: _invasion\n15\\.         shooter: _shooter\n16\\.         cols: 8\n17\\.         spacing: 40\n18\\.         size_hint: .5, .4\n19\\.         pos_hint: {'top': .9}\n20\\.         x: root.width/2-root.width/4\n21\\.   AnchorLayout:\n22\\.     anchor_y: 'bottom'\n23\\.     anchor_x: 'center'\n24\\.     FloatLayout:\n25\\.       size_hint: 1, .3\n26\\.       Shooter:\n27\\.         id: _shooter\n28\\.         invasion: _invasion\n29\\.         enemy_area: _enemy_area\n```", "```py\npython -m kivy.atlas invasion 100 *.png\n\n```", "```py\n30\\. # File name: images.kv\n31\\. <Invader>:\n32\\.   source: 'atlas://img/invasion/invader'\n33\\.   size_hint: None,None\n34\\.   size: 40,40\n35\\. <Shooter>:\n36\\.   source: 'atlas://img/invasion/shooter'\n37\\.   size_hint: None,None\n38\\.   size: 40,40\n39\\.   pos: self.parent.width/2, 0\n40\\. <Boom>:\n41\\.   source: 'atlas://img/invasion/boom'\n42\\.   size_hint: None,None\n43\\.   size: 26,30\n44\\. <Shot>:\n45\\.   source: 'atlas://img/invasion/shot'\n46\\.   size_hint: None,None\n47\\.   size: 12,15\n48\\. <Missile>:\n49\\.   source: 'atlas://img/invasion/missile'\n50\\.   size_hint: None,None\n51\\.   size: 12,27\n```", "```py\n52\\. # File name: boom.py\n53\\. from kivy.uix.image import Image\n54\\. from kivy.core.audio import SoundLoader\n55\\. \n56\\. class Boom(Image):\n57\\.   sound = SoundLoader.load('boom.wav')\n58\\.   def boom(self, **kwargs):\n59\\.     self.__class__.sound.play()\n60\\.     super(Boom, self).__init__(**kwargs)\n```", "```py\n61\\. # File name: ammo.py\n62\\. from kivy.animation import Animation\n63\\. from kivy.uix.image import Image\n64\\. from boom import Boom\n65\\. \n66\\. class Ammo(Image):\n67\\.   def shoot(self, tx, ty, target):\n68\\.     self.target = target\n69\\.     self.animation = Animation(x=tx, top=ty)\n70\\.     self.animation.bind(on_start = self.on_start)\n71\\.     self.animation.bind(on_progress = self.on_progress)\n72\\.     self.animation.bind(on_complete = self.on_stop)\n73\\.     self.animation.start(self)\n74\\. \n75\\.   def on_start(self, instance, value):\n76\\.     self.boom = Boom()\n77\\.     self.boom.center=self.center\n78\\.     self.parent.add_widget(self.boom)\n79\\. \n80\\.   def on_progress(self, instance, value, progression):\n81\\.     if progression >= .1:\n82\\.       self.parent.remove_widget(self.boom)\n83\\.     if self.target.collide_ammo(self):\n84\\.       self.animation.stop(self)\n85\\. \n86\\.   def on_stop(self, instance,value):\n87\\.     self.parent.remove_widget(self)\n88\\. \n89\\. class Shot(Ammo):\n90\\.   pass\n91\\. class Missile(Ammo):\n92\\.   pass\n```", "```py\n93\\. # File name: invader.py\n94\\. from kivy.core.window import Window\n95\\. from kivy.uix.image import Image\n96\\. from kivy.animation import Animation\n97\\. from random import choice, randint\n98\\. from ammo import Missile\n99\\. \n100\\. class Invader(Image):\n101\\.   pre_fix = ['in_','out_','in_out_']\n102\\.   functions = ['back','bounce','circ','cubic',\n103\\.     'elastic','expo','quad','quart','quint','sine']\n104\\.   formation = True\n105\\. \n106\\.   def solo_attack(self):\n107\\.     if self.formation:\n108\\.       self.parent.unbind_invader()\n109\\.       animation = self.trajectory()\n110\\.       animation.bind(on_complete = self.to_dock)\n111\\.       animation.start(self)\n112\\. \n113\\.   def trajectory(self):\n114\\.     fleet = self.parent.parent\n115\\.     area = fleet.parent\n116\\.     x = choice((-self.width,area.width+self.width))\n117\\.     y = randint(round(area.y), round(fleet.y))\n118\\.     t = choice(self.pre_fix) + choice(self.functions)\n119\\.     return Animation(x=x, y=y,d=randint(2,7),t=t)\n120\\. \n121\\.   def to_dock(self, instance, value):\n122\\.     self.y = Window.height\n123\\.     self.center_x = Window.width/2\n124\\.     animation = Animation(pos=self.parent.pos, d=2)\n125\\.     animation.bind(on_complete = self.parent.bind_invader)\n126\\.     animation.start(self)\n127\\. \n128\\.   def drop_missile(self):\n129\\.     missile = Missile()\n130\\.     missile.center = (self.center_x, self.y)\n131\\.     fleet = self.parent.parent\n132\\.     fleet.invasion.add_widget(missile)\n133\\.     missile.shoot(self.center_x,0,fleet.shooter)\n```", "```py\n134\\. # File name: dock.py\n135\\. from kivy.uix.widget import Widget\n136\\. from invader import Invader\n137\\. \n138\\. class Dock(Widget):\n139\\.   def __init__(self, **kwargs):\n140\\.     super(Dock, self).__init__(**kwargs)\n141\\.     self.invader = Invader()\n142\\.     self.add_widget(self.invader)\n143\\.     self.bind_invader()\n144\\. \n145\\.   def bind_invader(self, instance=None, value=None):\n146\\.     self.invader.formation = True\n147\\.     self.bind(pos = self.on_pos)\n148\\. \n149\\.   def unbind_invader(self):\n150\\.     self.invader.formation = False\n151\\.     self.unbind(pos = self.on_pos)\n152\\. \n153\\.   def on_pos(self, instance, value):\n154\\.     self.invader.pos = self.pos\n```", "```py\n155\\. # File name: fleet.py (Fragment 1)\n156\\. from kivy.uix.gridlayout import GridLayout\n157\\. from kivy.properties import ListProperty\n158\\. from kivy.animation import Animation\n159\\. from kivy.clock import Clock\n160\\. from kivy.core.window import Window\n161\\. from random import randint, random\n162\\. from dock import Dock\n163\\. \n164\\. class Fleet(GridLayout):\n165\\.   survivors = ListProperty(())\n166\\. \n167\\.   def __init__(self,  **kwargs):\n168\\.     super(Fleet, self).__init__(**kwargs)\n169\\.     for x in range(0, 32):\n170\\.       dock = Dock()\n171\\.       self.add_widget(dock)\n172\\.       self.survivors.append(dock)\n173\\.     self.center_x= Window.width/4\n174\\. \n175\\.   def start_attack(self, instance, value):\n176\\.     self.invasion.remove_widget(value)\n177\\.     self.go_left(instance, value)\n178\\.     self.schedule_events()\n179\\. \n180\\.   def go_left(self, instance, value):\n181\\.     animation = Animation(x = 0)\n182\\.     animation.bind(on_complete = self.go_right)\n183\\.     animation.start(self)\n184\\. \n185\\.   def go_right(self, instance, value):\n186\\.     animation = Animation(right=self.parent.width)\n187\\.     animation.bind(on_complete = self.go_left)\n188\\.     animation.start(self)\n```", "```py\n189\\. # File name: fleet.py (Fragment 2)\n190\\.   def schedule_events(self):\n191\\.     Clock.schedule_interval(self.solo_attack, 2)\n192\\.     Clock.schedule_once(self.shoot,random())\n193\\. \n194\\.   def solo_attack(self, dt):\n195\\.     if len(self.survivors):\n196\\.       rint = randint(0, len(self.survivors) - 1)\n197\\.       child = self.survivors[rint]\n198\\.       child.invader.solo_attack()\n199\\. \n200\\.   def shoot(self, dt):\n201\\.     if len(self.survivors):\n202\\.       rint = randint(0,len(self.survivors) - 1)\n203\\.       child = self.survivors[rint]\n204\\.       child.invader.drop_missile()\n205\\.       Clock.schedule_once(self.shoot,random())\n206\\. \n207\\.   def collide_ammo(self, ammo):\n208\\.     for child in self.survivors:\n209\\.       if child.invader.collide_widget(ammo):\n210\\.         child.canvas.clear()\n211\\.         self.survivors.remove(child)\n212\\.         return True\n213\\.     return False\n214\\. \n215\\.   def on_survivors(self, instance, value):\n216\\.     if len(self.survivors) == 0:\n217\\.       Clock.unschedule(self.solo_attack)\n218\\.       Clock.unschedule(self.shoot)\n219\\.       self.invasion.end_game(\"You Win!\")\n```", "```py\n220\\. # File name: shooter.py (Fragment 1)\n221\\. from kivy.clock import Clock\n222\\. from kivy.uix.image import Image\n223\\. from ammo import Shot\n224\\. \n225\\. class Shooter(Image):\n226\\.   reloaded = True\n227\\.   alife = False\n228\\. \n229\\.   def on_touch_down(self, touch):\n230\\.     if self.parent.collide_point(*touch.pos):\n231\\.       self.center_x = touch.x\n232\\.       touch.ud['move'] = True\n233\\.     elif self.enemy_area.collide_point(*touch.pos):\n234\\.       self.shoot(touch.x,touch.y)\n235\\.       touch.ud['shoot'] = True\n236\\. \n237\\.   def on_touch_move(self, touch):\n238\\.     if self.parent.collide_point(*touch.pos):\n239\\.       self.center_x = touch.x\n240\\.     elif self.enemy_area.collide_point(*touch.pos):\n241\\.       self.shoot(touch.x,touch.y)\n242\\. \n243\\.   def on_touch_up(self, touch):\n244\\.     if 'shoot' in touch.ud and touch.ud['shoot']:\n245\\.       self.reloaded = True\n```", "```py\n246\\. # File name: shooter.py (Fragment 2) \n247\\.   def start(self, instance, value):\n248\\.     self.alife=True\n249\\. \n250\\.   def shoot(self, fx, fy):\n251\\.     if self.reloaded and self.alife:\n252\\.       self.reloaded = False\n253\\.       Clock.schedule_once(self.reload_gun, .5)\n254\\.       shot = Shot()\n255\\.       shot.center = (self.center_x, self.top)\n256\\.       self.invasion.add_widget(shot)\n257\\.       (fx,fy) = self.project(self.center_x,self.top,fx,fy)\n258\\.       shot.shoot(fx,fy,self.invasion.fleet)\n259\\. \n260\\.   def reload_gun(self, dt):\n261\\.     self.reloaded = True\n262\\. \n263\\.   def collide_ammo(self, ammo):\n264\\.     if self.collide_widget(ammo) and self.alife:\n265\\.       self.alife = False\n266\\.       self.color = (0,0,0,0)\n267\\.       self.invasion.end_game(\"Game Over\")\n268\\.       return True\n269\\.     return False\n270\\. \n271\\.   def project(self,ix,iy,fx,fy):\n272\\.     (w,h) = self.invasion.size\n273\\.     if ix == fx: return (ix, h)\n274\\.     m = (fy-iy) / (fx-ix)\n275\\.     b = iy - m*ix\n276\\.     x = (h-b)/m\n277\\.     if x < 0: return (0, b)\n278\\.     elif x > w: return (w, m*w+b)\n279\\.     return (x, h)\n```", "```py\n280\\. # File name: main.py (Fragment 1)\n281\\. from kivy.app import App\n282\\. from kivy.lang import Builder\n283\\. from kivy.core.window import Window\n284\\. from kivy.uix.floatlayout import FloatLayout\n285\\. from kivy.uix.label import Label\n286\\. from kivy.animation import Animation\n287\\. from kivy.clock import Clock\n288\\. from fleet import Fleet\n289\\. from shooter import Shooter\n290\\. \n291\\. Builder.load_file('images.kv')\n292\\. \n293\\. class Invasion(FloatLayout):\n294\\. \n295\\.   def __init__(self, **kwargs):\n296\\.     super(Invasion, self).__init__(**kwargs)\n297\\.     self._keyboard = Window.request_keyboard(self.close,          self)\n298\\.     self._keyboard.bind(on_key_down=self.press)\n399\\.     self.start_game()\n300\\. \n301\\.   def close(self):\n302\\.     self._keyboard.unbind(on_key_down=self.press)\n303\\.     self._keyboard = None\n304\\. \n305\\.   def press(self, keyboard, keycode, text, modifiers):\n306\\.     if keycode[1] == 'left':\n307\\.       self.shooter.center_x -= 30\n308\\.     elif keycode[1] == 'right':\n309\\.       self.shooter.center_x += 30\n310\\.     return True\n311\\. \n312\\.   def start_game(self):\n313\\.     label = Label(text='Ready!')\n314\\.     animation = Animation (font_size = 72, d=2)\n315\\.     animation.bind(on_complete=self.fleet.start_attack)\n316\\.     animation.bind(on_complete=self.shooter.start)\n317\\.     self.add_widget(label)\n318\\.     animation.start(label)\n```", "```py\n319\\. # File name: main.py (Fragment 2)\n320\\.   def end_game(self, message):\n321\\.     label = Label(markup=True, size_hint = (.2, .1), \n322\\.       pos=(0,self.parent.height/2), text = message)\n323\\.     self.add_widget(label)\n324\\.     self.composed_animation().start(label)\n325\\. \n326\\.   def composed_animation(self):\n327\\.     animation = Animation (center=self.parent.center)\n328\\.     animation &= Animation (font_size = 72, d=3)\n329\\.     animation += Animation(font_size = 24,y=0,d=2)\n330\\.     return animation\n331\\. \n332\\. class InvasionApp(App):\n333\\.   def build(self):\n334\\.     return Invasion()\n335\\. \n336\\. if __name__==\"__main__\":\n337\\.   InvasionApp().run()\n```", "```py\n121\\.   def to_dock(self, instance, value):\n122\\.     self.y = Window.height\n123\\.     self.center_x = Window.width/2\n124\\.     animation = Animation(pos=self.parent.pos, d=2)\n125\\.     animation.bind(on_complete = self.parent.bind_invader)\n126\\.     animation.start(self)\n```"]