["```py\nclass Event:\n    \"\"\"A generic class that provides signal/slot functionality\"\"\"\n\n    def __init__(self):\n        self.listeners = []\n\n    def connect(self, listener):\n        self.listeners.append(listener)\n\n    def fire(self, *args, **kwargs):\n        for listener in self.listeners:\n            listener(*args, **kwargs)\n```", "```py\n>>> def handle_event(num):\n...   print(\"I got number {0}\".format(num))\n...\n>>> event = Event()\n>>> event.connect(handle_event)\n>>> event.fire(3)\nI got number 3\n>>> event.fire(10)\nI got number 10\n\n```", "```py\nimport unittest\nfrom ..event import Event\n\nclass EventTest(unittest.TestCase):\n    def test_a_listener_is_notified_when_an_event_is_raised(self):\n        called = False\n        def listener():\n            nonlocal called\n            called = True\n\n        event = Event()\n        event.connect(listener)\n        event.fire()\n        self.assertTrue(called)\n```", "```py\n    def test_a_listener_is_passed_right_parameters(self):\n        params = ()\n        def listener(*args, **kwargs):\n            nonlocal params\n            params = (args, kwargs)\n        event = Event()\n        event.connect(listener)\n        event.fire(5, shape=\"square\")\n        self.assertEquals(((5, ), {\"shape\":\"square\"}), params)\n```", "```py\nclass Mock:\n    def __init__(self):\n        self.called = False\n        self.params = ()\n\n    def __call__(self, *args, **kwargs):\n        self.called = True\n        self.params = (args, kwargs)\n```", "```py\nclass EventTest(unittest.TestCase):\n    def test_a_listener_is_notified_when_an_event_is_raised(self):\n        listener = Mock()\n        event = Event()\n        event.connect(listener)\n        event.fire()\n        self.assertTrue(listener.called)\n\n    def test_a_listener_is_passed_right_parameters(self):\n        listener = Mock()\n        event = Event()\n        event.connect(listener)\n        event.fire(5, shape=\"square\")\n        self.assertEquals(((5, ), {\"shape\": \"square\"}), listener.params)\n```", "```py\nfrom unittest import mock\n```", "```py\nclass EventTest(unittest.TestCase):\n    def test_a_listener_is_notified_when_an_event_is_raised(self):\n        listener = mock.Mock()\n        event = Event()\n        event.connect(listener)\n        event.fire()\n        self.assertTrue(listener.called)\n```", "```py\n    def test_a_listener_is_passed_right_parameters(self):\n        listener = mock.Mock()\n        event = Event()\n        event.connect(listener)\n        event.fire(5, shape=\"square\")\n        listener.assert_called_with(5, shape=\"square\")\n```", "```py\n    def test_a_listener_is_passed_right_parameters(self):\n        listener = mock.Mock()\n        event = Event()\n        event.connect(listener)\n        event.fire(5, shape=\"square\")\n        listener.assert_has_calls([mock.call(5, shape=\"square\")])\n```", "```py\nclass Alert:\n    \"\"\"Maps a Rule to an Action, and triggers the action if the rule\n    matches on any stock update\"\"\"\n\n    def __init__(self, description, rule, action):\n        self.description = description\n        self.rule = rule\n        self.action = action\n\n    def connect(self, exchange):\n        self.exchange = exchange\n        dependent_stocks = self.rule.depends_on()\n        for stock in dependent_stocks:\n            exchange[stock].updated.connect(self.check_rule)\n\n    def check_rule(self, stock):\n        if self.rule.matches(self.exchange):\n            self.action.execute(self.description)\n```", "```py\nimport unittest\nfrom datetime import datetime\nfrom unittest import mock\n\nfrom ..alert import Alert\nfrom ..rule import PriceRule\nfrom ..stock import Stock\n\nclass TestAction:\n    executed = False\n\n    def execute(self, description):\n        self.executed = True\n\nclass AlertTest(unittest.TestCase):\n    def test_action_is_executed_when_rule_matches(self):\n        exchange = {\"GOOG\": Stock(\"GOOG\")}\n        rule = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n        action = TestAction()\n        alert = Alert(\"sample alert\", rule, action)\n        alert.connect(exchange)\n        exchange[\"GOOG\"].update(datetime(2014, 2, 10), 11)\n        self.assertTrue(action.executed)\n```", "```py\n    def test_action_is_executed_when_rule_matches(self):\n        exchange = {\"GOOG\": Stock(\"GOOG\")}\n        rule = PriceRule(\"GOOG\", lambda stock: stock.price > 10)\n        action = mock.MagicMock()\n        alert = Alert(\"sample alert\", rule, action)\n        alert.connect(exchange)\n        exchange[\"GOOG\"].update(datetime(2014, 2, 10), 11)\n        action.execute.assert_called_with(\"sample alert\")\n```", "```py\n>>> from unittest import mock\n>>> mock_1 = mock.Mock()\n>>> mock_2 = mock.MagicMock()\n>>> len(mock_1)\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nTypeError: object of type 'Mock' has no len()\n>>> len(mock_2)\n0\n>>>\n\n```", "```py\n>>> from unittest import mock\n>>> class PrintAction:\n...     def run(self, description):\n...         print(\"{0} was executed\".format(description))\n...\n\n>>> mock_1 = mock.Mock()\n>>> mock_1.execute(\"sample alert\") # Does not give an error\n<Mock name='mock.execute()' id='54481752'>\n\n>>> mock_2 = mock.Mock(spec=PrintAction)\n>>> mock_2.execute(\"sample alert\") # Gives an error\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"C:\\Python34\\lib\\unittest\\mock.py\", line 557, in __getattr__\n raise AttributeError(\"Mock object has no attribute %r\" % name)\nAttributeError: Mock object has no attribute 'execute'\n\n```", "```py\n>>> matches = mock.Mock(return_value=True)\n>>> matches()\nTrue\n>>> matches(4)\nTrue\n>>> matches(4, \"abcd\")\nTrue\n\n```", "```py\n>>> rule = mock.MagicMock()\n>>> rule.matches = mock.Mock(return_value=True)\n>>> rule.matches()\nTrue\n>>>\n\n```", "```py\n>>> from unittest import mock\n>>> rule = mock.MagicMock()\n>>> rule.matches.return_value = True\n>>> rule.matches()\nTrue\n>>>\n\n```", "```py\n    def test_action_is_executed_when_rule_matches(self):\n        exchange = {\"GOOG\": Stock(\"GOOG\")}\n        rule = mock.MagicMock(spec=PriceRule)\n        rule.matches.return_value = True\n        rule.depends_on.return_value = {\"GOOG\"}\n        action = mock.MagicMock()\n        alert = Alert(\"sample alert\", rule, action)\n        alert.connect(exchange)\n        exchange[\"GOOG\"].update(datetime(2014, 2, 10), 11)\n        action.execute.assert_called_with(\"sample alert\")\n```", "```py\n    def test_action_is_executed_when_rule_matches(self):\n        goog = mock.MagicMock(spec=Stock)\n        goog.updated = Event()\n        goog.update.side_effect = lambda date, value:\n                goog.updated.fire(self)\n        exchange = {\"GOOG\": goog}\n        rule = mock.MagicMock(spec=PriceRule)\n        rule.matches.return_value = True\n        rule.depends_on.return_value = {\"GOOG\"}\n        action = mock.MagicMock()\n        alert = Alert(\"sample alert\", rule, action)\n        alert.connect(exchange)\n        exchange[\"GOOG\"].update(datetime(2014, 2, 10), 11)\n        action.execute.assert_called_with(\"sample alert\")\n```", "```py\n>>> m = mock.Mock()\n>>> m.side_effect = Exception()\n>>> m()\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"C:\\Python34\\lib\\unittest\\mock.py\", line 885, in __call__\n return _mock_self._mock_call(*args, **kwargs)\n File \"C:\\Python34\\lib\\unittest\\mock.py\", line 941, in _mock_call\n raise effect\nException\n\n```", "```py\n>>> m = mock.Mock()\n>>> m.side_effect = [1, 2, 3]\n>>> m()\n1\n>>> m()\n2\n>>> m()\n3\n>>> m()\nTraceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n File \"C:\\Python34\\lib\\unittest\\mock.py\", line 885, in __call__\n return _mock_self._mock_call(*args, **kwargs)\n File \"C:\\Python34\\lib\\unittest\\mock.py\", line 944, in _mock_call\n result = next(effect)\nStopIteration\n\n```", "```py\nclass PrintAction:\n    def execute(self, content):\n        print(content)\n```", "```py\n>>> # the builtin print function prints a string\n>>> print(\"hello\") \nhello\n\n>>> # the builtin print function handles multiple parameters\n>>> print(1, 2) \n1 2\n\n>>> # this is where the print function is mapped\n>>> __builtins__.print \n<built-in function print>\n\n>>> # make the builtin print point to our own lambda\n>>> __builtins__.print = lambda x: x*2 \n\n>>> # calling print now executes our substituted function\n>>> print(\"hello\") \n'hellohello'\n\n>>> # our lambda does not support two parameters\n>>> print(1, 2) Traceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\nTypeError: <lambda>() takes 1 positional argument but 2 were given\n\n```", "```py\nimport unittest\nfrom unittest import mock\nfrom ..action import PrintAction\n\nclass PrintActionTest(unittest.TestCase):\n    def test_executing_action_prints_message(self):\n        mock_print = mock.Mock()\n        old_print = __builtins__[\"print\"]\n        __builtins__[\"print\"] = mock_print\n        try:\n            action = PrintAction()\n            action.execute(\"GOOG > $10\")\n            mock_print.assert_called_with(\"GOOG > $10\")\n        finally:\n            __builtins__[\"print\"] = old_print\n```", "```py\n    def test_executing_action_prints_message(self):\n        patcher = mock.patch('builtins.print')\n        mock_print = patcher.start()\n        try:\n            action = PrintAction()\n            action.execute(\"GOOG > $10\")\n            mock_print.assert_called_with(\"GOOG > $10\")\n        finally:\n            patcher.stop()\n```", "```py\n    def test_executing_action_prints_message(self):\n        with mock.patch('builtins.print') as mock_print:\n            action = PrintAction()\n            action.execute(\"GOOG > $10\")\n            mock_print.assert_called_with(\"GOOG > $10\")\n```", "```py\n    @mock.patch(\"builtins.print\")\n    def test_executing_action_prints_message(self, mock_print):\n        action = PrintAction()\n        action.execute(\"GOOG > $10\")\n        mock_print.assert_called_with(\"GOOG > $10\")\n```", "```py\n@mock.patch(\"builtins.print\")\nclass PrintActionTest(unittest.TestCase):\n    def test_executing_action_prints_message(self, mock_print):\n        action = PrintAction()\n        action.execute(\"GOOG > $10\")\n        mock_print.assert_called_with(\"GOOG > $10\")\n```", "```py\nfrom rule import PriceRule\n```", "```py\nimport alert\n\n@mock.patch(\"alert.PriceRule\")\ndef test_patch_rule(self, mock_rule):\n    ....\n```", "```py\nimport rule\n\n@mock.patch(\"rule.PriceRule\")\ndef test_patch_rule(self, mock_rule):\n    ....\n```", "```py\nimport smtplib\nfrom email.mime.text import MIMEText\n\nclass EmailAction:\n    \"\"\"Send an email when a rule is matched\"\"\"\n    from_email = \"alerts@stocks.com\"\n\n    def __init__(self, to):\n        self.to_email = to\n\n    def execute(self, content):\n        message = MIMEText(content)\n        message[\"Subject\"] = \"New Stock Alert\"\n        message[\"From\"] = \"alerts@stocks.com\"\n        message[\"To\"] = self.to_email\n        smtp = smtplib.SMTP(\"email.stocks.com\")\n        try:\n            smtp.send_message(message)\n        finally:\n            smtp.quit()\n```", "```py\nclass EmailActionTest(unittest.TestCase):\n    def setUp(self):\n        self.action = EmailAction(to=\"siddharta@silverstripesoftware.com\")\n\n    def test_email_is_sent_to_the_right_server(self, mock_smtp_class):\n        self.action.execute(\"MSFT has crossed $10 price level\")\n        mock_smtp_class.assert_called_with(\"email.stocks.com\")\n```", "```py\n    def test_connection_closed_after_sending_mail(self, mock_smtp_class):\n        mock_smtp = mock_smtp_class.return_value\n        self.action.execute(\"MSFT has crossed $10 price level\")\n        mock_smtp.send_message.assert_called_with(mock.ANY)\n        self.assertTrue(mock_smtp.quit.called)\n        mock_smtp.assert_has_calls([\n            mock.call.send_message(mock.ANY),\n            mock.call.quit()])\n```", "```py\n        mock_smtp.send_message.assert_called_with(mock.ANY)\n        self.assertTrue(mock_smtp.quit.called)\n```", "```py\n    def test_connection_closed_if_send_gives_error(self, mock_smtp_class):\n        mock_smtp = mock_smtp_class.return_value\n        mock_smtp.send_message.side_effect =\n        smtplib.SMTPServerDisconnected()\n        try:\n            self.action.execute(\"MSFT has crossed $10 price level\")\n        except Exception:\n            pass\n        self.assertTrue(mock_smtp.quit.called)\n```", "```py\n    def test_email_is_sent_with_the_right_subject(self, mock_smtp_class):\n        mock_smtp = mock_smtp_class.return_value\n        self.action.execute(\"MSFT has crossed $10 price level\")\n        message = MIMEText(\"MSFT has crossed $10 price level\")\n        message[\"Subject\"] = \"New Stock Alert\"\n        message[\"From\"] = \"alerts@stocks.com\"\n        message[\"To\"] = \"siddharta@silverstripesoftware.com\"\n        mock_smtp.send_message.assert_called_with(message)\n```", "```py\nAssertionError: Expected call: send_message(<email.mime.text.MIMEText object at 0x0000000003641F98>)\nActual call: send_message(<email.mime.text.MIMEText object at 0x000000000363A0F0>)\n\n```", "```py\n    def test_email_is_sent_with_the_right_subject(self, mock_smtp_class):\n        mock_smtp = mock_smtp_class.return_value\n        self.action.execute(\"MSFT has crossed $10 price level\")\n        call_args, _ = mock_smtp.send_message.call_args\n        sent_message = call_args[0]\n        self.assertEqual(\"New Stock Alert\", sent_message[\"Subject\"])\n```", "```py\nclass MessageMatcher:\n    def __init__(self, expected):\n        self.expected = expected\n\n    def __eq__(self, other):\n        return self.expected[\"Subject\"] == other[\"Subject\"] and \\\n            self.expected[\"From\"] == other[\"From\"] and \\\n            self.expected[\"To\"] == other[\"To\"] and \\\n            self.expected[\"Message\"] == other._payload\n```", "```py\n>>> message = MIMEText(\"d\")\n>>> message[\"Subject\"] = \"a\"\n>>> message[\"From\"] = \"b\"\n>>> message[\"To\"] = \"c\"\n>>> expected = MessageMatcher({\"Subject\":\"a\", \"From\":\"b\", \"To\":\"c\", \"Message\":\"d\"})\n>>> message == expected\nTrue\n\n```", "```py\n    def test_email_is_sent_when_action_is_executed(self, mock_smtp_class):\n        expected_message = {\n            \"Subject\": \"New Stock Alert\",\n            \"Message\": \"MSFT has crossed $10 price level\",\n            \"To\": \"siddharta@silverstripesoftware.com\",\n            \"From\": \"alerts@stocks.com\"\n        }\n        mock_smtp = mock_smtp_class.return_value\n        self.action.execute(\"MSFT has crossed $10 price level\")\n        mock_smtp.send_message.assert_called_with(\n            MessageMatcher(expected_message))\n```"]