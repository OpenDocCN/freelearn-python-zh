["```py\n    mkdir chapter4\n    ```", "```py\n    cd chapter4\n    ```", "```py\n    mkdir IoTInformationDisplay\n    ```", "```py\n    ch4-env and enable access to the system site packages. This allows the virtual environment to inherit packages from the global Python environment, which can be useful when certain libraries are installed system wide. Once the environment is set up, we can activate it and begin installing project-specific packages without affecting the global Python environment.\n    ```", "```py\n    ch4-env Python virtual environment:\n    ```", "```py\n    requests is a Python library simplifying HTTP requests, ideal for web service interactions. Kivy enables the development of multitouch, cross-platform applications with a focus on rich user interfaces. With the Python packages installed, we may close the Terminal with the following command:\n\n    ```", "```py\n\n    ```", "```py\n    import requests\n    import json\n    ```", "```py\n    class WeatherData:\n        temperature = 0\n        weather_conditions = ''\n        wind_speed = 0\n        city = ''\n    ```", "```py\n        def __init__(self, city):\n            self.city = city\n            api_key = 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'\n            base_url = \"http://api.openweathermap.org/data/2.5/weather\"\n             complete_url = f\"{base_url}?q={self.city}&appid={api_key}&units=metric\"\n            response = requests.get(complete_url)\n            data = response.json()\n            if data[\"cod\"] != \"404\":\n                main = data[\"main\"]\n                wind = data[\"wind\"]\n                weather = data[\"weather\"]\n                self.temperature = main[\"temp\"]\n                self.weather_conditions = weather[0][\" main\"]\n                self.wind_speed = wind[\"speed\"]\n                self.icon = weather[0][\"icon\"]\n    ```", "```py\n        def get_conditions(self):\n            return self.weather_conditions\n        def get_temperature(self):\n            return str(int(self.temperature))\n    ```", "```py\n        def get_weather_conditions_icon(self):\n            return f\"http://openweathermap.org/img/wn/{self.icon}.png\"\n    ```", "```py\n        def get_wind_temp_factor(self):\n            if self.temperature < 0:\n                temp_factor = 0\n            elif self.temperature > 30:\n                temp_factor = 30\n            else:\n                temp_factor = self.temperature\n            wind_factor = self.wind_speed / 20\n            wind_temp_factor = temp_factor - wind_factor\n            return wind_temp_factor\n    ```", "```py\n        def get_attire_image(self):\n            factor = self.get_wind_temp_factor()\n            if factor < 8:\n                return \"images/gloves.png\"\n            elif factor < 18:\n                return \"images/long-shirt.png\"\n            elif factor < 25:\n                return \"images/short-shirt.png\"\n            else:\n                return \"images/shorts.png\"\n    ```", "```py\n    if __name__==\"__main__\":\n        weather = WeatherData('Toronto')\n        print(weather.get_temperature())\n        print(weather.get_attire_image())\n        print(weather.get_conditions())\n        print(weather.get_weather_conditions_icon())\n    WeatherData class for Toronto and then prints various weather-related information to our console.\n    ```", "```py\n    import requests\n    ```", "```py\n    class TrafficMap:\n        def __init__(self, latitude, longitude, zoom):\n            self.latitude = latitude\n            self.longitude = longitude\n            self.zoom = zoom\n            self.size = \"500,325\"\n            self.api_key = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n    ```", "```py\n    def get_traffic_map(self):\n            base_url = \"http://www.mapquestapi.com\\\n                        /staticmap/v5/map\"\n            params = {\n                'key': self.api_key,\n                'center': f\"{self.latitude},\n                            {self.longitude}\",\n                'zoom': self.zoom,\n                'size': self.size,\n                'traffic': 'flow|cons|inc'\n            }\n            response = requests.get(base_url,\n                                    params=params)\n            if response.status_code == 200:\n                with open('images/traffic_map.png', 'wb') as f:\n                    f.write(response.content)\n                return \"images/traffic_map.png\"\n            else:\n                return \"images/error.png\"\n    ```", "```py\n    from kivy.config import Config\n    Config.set('graphics', 'fullscreen', 'auto')\n    Config.set('graphics', 'borderless', '1')\n    ```", "```py\n    from kivy.app import App\n    from kivy.uix.floatlayout import FloatLayout\n    from kivy.uix.label import Label\n    from kivy.uix.image import Image, AsyncImage\n    from kivy.clock import Clock\n    from WeatherData import WeatherData\n    from TrafficMap import TrafficMap\n    ```", "```py\n    class Dashboard(FloatLayout):\n        def __init__(self,\n                     city,\n                     latitude,\n                     longitude,\n                     zoom):\n            super(Dashboard, self).__init__()\n            self.city = city\n            self.traffic_map = TrafficMap(latitude,\n                                          longitude,\n                                          zoom)\n            self.init_widgets()\n            Clock.schedule_interval(self.update_status, 1800)\n            self.update_status(0)\n    ```", "```py\n    def init_widgets(self):\n            self.add_widget(Label(text=\"Temperature\",\n                                  pos=(-275, 175),\n                                  color=(1, 1, 1, 1),\n                                  font_size=22,\n                                  font_name='fonts/\n                                  ArialBlack.ttf'))\n            self.add_widget(Label(\n                             text=\"Conditions\",\n                             pos=(-275, 60),\n                             color=(1, 1, 1, 1),\n                             font_size=22,\n                             font_name='fonts/\n                             ArialBlack.ttf'))\n            self.add_widget(Label(text=\"Attire\",\n                             pos=(-280, -80),\n                             color=(1, 1, 1, 1),\n                             font_size=22,\n                             font_name='fonts/\n                             ArialBlack.ttf'))\n            self.add_widget(Image(source='images/box.png',\n                                  pos=(-275, 145)))\n            self.add_widget(Image(source='images/box.png',\n                                  pos=(-275, 10)))\n            self.add_widget(Image(source='images/box.png',\n                                  pos=(-275, -127)))\n    ```", "```py\n    self.city_label = Label(text=self.city,\n                                    pos=(250, 185),\n                                    color=(1, 1, 1, 1),\n                                    font_size=30,\n                                    font_name='fonts/\n                                    ArialBlack.ttf')\n            self.add_widget(self.city_label)\n            self.temperature_label = Label(pos=(-275,\n                                                125),\n                                     color=(1, 1, 1, 1),\n                                     font_size=40,\n                                     font_name='fonts/\n                                     ArialBlack.ttf')\n            self.add_widget(self.temperature_label)\n            self.conditions_image = AsyncImage(pos=(-278,\n                                                    20))\n            self.add_widget(self.conditions_image)\n            self.weather_conditions_label = Label(\n                                            pos=(-280,\n                                                 -25),\n                                            color=(1, 1,\n                                                   1, 1),\n                                            font_size=20,\n                                         font_name='fonts/\n                                         ArialBlack.ttf')\n            self.add_widget(self.weather_conditions_label)\n            self.traffic_map_image = AsyncImage(pos=(120,\n                                                    -30))\n            self.add_widget(self.traffic_map_image)\n            self.attire_image = Image(pos=(-280, -140))\n            self.add_widget(self.attire_image)\n    ```", "```py\n        def update_status(self, *args):\n            weather_data = WeatherData(self.city)\n            self.traffic_map_image.source =\n                         self.traffic_map.\n                         get_traffic_map()\n            self.attire_image.source = weather_data.\n                                       get_attire_image()\n            self.temperature_label.text = weather_data.\n                                         get_temperature()\n                                         + \"\\u00B0C\"\n            self.weather_conditions_label.text =\n                         weather_data.get_conditions()\n            self.conditions_image.source =\n                         weather_data.\n                         get_weather_conditions_icon()\n    ```", "```py\n    class MyApp(App):\n        def build(self):\n            city = 'Toronto'\n            latitude = 43.6426\n            longitude = -79.3871\n            zoom = 12\n            return Dashboard(city,\n                             latitude,\n                             longitude,\n                              zoom)\n    if __name__ == '__main__':\n        MyApp().run()\n    ```"]