- en: Preface
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Selenium is a set of tools for automating browsers. It is largely used for testing
    applications, but its usages are not limited only to testing. It can also be used
    for screen scraping and automating repetitive tasks in a browser window. Selenium
    supports automation on all the major browsers including Firefox, Internet Explorer,
    Google Chrome, Safari, and Opera. Selenium WebDriver is now a part of W3C standards
    and is supported by major browser vendors.
  prefs: []
  type: TYPE_NORMAL
- en: 'Selenium offers the following set of tools for automating interaction with
    browsers:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Selenium IDE**: This is a Firefox add-in used to record and play back the
    Selenium scripts with Firefox. It provides a graphical user interface to record
    user actions using Firefox. It is a great tool to start learning and using Selenium,
    but it can only be used with Firefox and other browsers are not supported. However,
    it can convert the recorded scripts into various programming languages supported
    by Selenium WebDriver, which supports running scripts on browsers other than Firefox.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selenium WebDriver**: This is a programming interface for developing advanced
    Selenium scripts using programming languages. We can also run tests on multiple
    browsers that are supported by Selenium on multiple operating systems, including
    Linux, Windows, and Mac OS X. This makes Selenium a true cross-browser testing
    tool. Selenium WebDriver offers client libraries in various languages, including
    Java, C#, Python, Ruby, PHP, and JavaScript, and are more into writing test scripts.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Selenium standalone server**: This is also known as Selenium Grid and allows
    remote and distributed execution of Selenium scripts created with WebDriver. We
    can also use the grid feature of the standalone server to run tests in parallel,
    including tests on mobile platforms such as Android or Apple iOS for iPhone and
    iPad.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As the title suggests, this book will introduce you to the Selenium WebDriver
    client library for Python. You will learn how to use Selenium WebDriver in Python
    to automate browsers for testing web applications. This book contains lessons
    right from setting up Selenium to using the basic and advanced features of Selenium
    to create and run automated scripts for testing web applications. This book assumes
    you have a basic idea of programming using Python.
  prefs: []
  type: TYPE_NORMAL
- en: What this book covers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Chapter 1](ch01.html "Chapter 1. Getting Started with Selenium WebDriver and
    Python"), *Getting Started with Selenium WebDriver and Python*, starts with installing
    Python and the Selenium WebDriver client library. We will select a Python editor
    or IDE for Selenium script development. We will then create our first automation
    script for a simple search workflow from the application under test. At the end
    of this chapter, we will run the Selenium script on various browsers supported
    by Selenium.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 2](ch02.html "Chapter 2. Writing Tests Using unittest"), *Writing
    Tests Using unittest*, shows you how to use Selenium and the unittest library
    to test web applications. We will convert the script into a unittest test case.
    We will create few more tests using Selenium and unittest. We will create a TestSuite
    for a group of tests. We will run these tests and analyze the results. At the
    end of this chapter, you will learn how to produce test reports in the HTML format
    that you can distribute to various stakeholders of the project.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 3](ch03.html "Chapter 3. Finding Elements"), *Finding Elements*, introduces
    you to locators that are the keys to automate different types of User Interface
    (UI) elements displayed on the web pages in the browser window. Selenium uses
    locators to find elements on a page and then performs actions or retrieves their
    properties for testing. You will learn various methods to locate elements, including
    XPath and CSS. We will show you how to use these methods with examples on the
    application under test.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 4](ch04.html "Chapter 4. Using the Selenium Python API for Element
    Interaction"), *Using the Selenium Python API for Element Interaction*, shows
    you how to use the Selenium WebDriver client library to interact with different
    types of elements, JavaScript alerts, frames, and windows in Python. You will
    learn how to perform actions such as sending values to elements, performing clicks,
    and selecting options from dropdowns. You will also see how to handle frames,
    different types of JavaScript alerts, and switch between child browser windows.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 5](ch05.html "Chapter 5. Synchronizing Tests"), *Synchronizing Tests*,
    introduces you to various wait methods provided by Selenium to synchronize tests
    for reliable and robust execution. You will learn how to use the implicit and
    explicit wait to implement synchronization in Selenium tests. You will learn various
    methods to implement explicit wait in our test scripts.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 6](ch06.html "Chapter 6. Cross-browser Testing"), *Cross-browser Testing*,
    dives into using RemoteWebDriver to run cross-browser tests on remote machines
    or through the Selenium Grid. You will learn how to use RemoteWebDriver to run
    tests on remote machines. We will also set up a Selenium Grid to run tests on
    various combinations of browsers and operating systems. You will also see how
    to execute tests on headless browsers such as PhantomJS. At the end of the chapter,
    we will see how to use cloud testing tools such as Sauce Labs and BrowserStack
    to run tests in cloud using RemoteWebDriver.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 7](ch07.html "Chapter 7. Testing on Mobile"), *Testing on Mobile*,
    shows you how to test applications on mobile devices using Selenium WebDriver
    and Appium. We will set up Appium to test our sample application on iOS and on
    an Android emulator and device. You will also learn how to run native mobile applications
    using Appium.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 8](ch08.html "Chapter 8. Page Objects and Data-driven Testing"), *Page
    Objects and Data-driven Testing*, introduces you to two important design patterns
    to implement a maintainable and efficient testing framework. You will learn how
    to use page objects to hide the technical details of locators, and divide operations
    on pages into separate classes and create test cases that are more readable and
    easy to maintain. You will then learn how to create data-driven tests using the
    unittest library.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Advanced Techniques of Selenium WebDriver"),
    *Advanced Techniques of Selenium WebDriver*, dives into some of the advanced techniques
    of using Selenium for automating browsers for testing. You will learn how to use
    various action methods for simulating complex mouse and keyboard operations using
    Selenium. You will see how to handle session cookies, capture screenshots during
    a test run, and create a movie of the entire test run.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Chapter 10](ch10.html "Chapter 10. Integration with Other Tools and Frameworks"),
    *Integration with Other Tools and Frameworks*, shows you how to use Selenium WebDriver
    with automated acceptance testing frameworks such as Behave and Continuous Integration
    tools. You will first learn how to integrate Selenium with Behave to create automated
    acceptance tests. We will implement a sample feature and acceptance tests on UI
    using the Selenium WebDriver. At end of the chapter, we will set up running the
    tests that we created as part of Continuous Integration using Jenkins. We will
    set up a schedule to run the tests on a daily frequency.'
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this book, you will have learned all the essential features of
    Selenium WebDriver to create your own web testing framework in Python.
  prefs: []
  type: TYPE_NORMAL
- en: What you need for this book
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To get started with this book, you will need basic programming skills in Python
    as well as knowledge of web technologies such as HTML, JavaScript, CSS, and XML.
    If you are able to write a simple Python script, use loops and conditions, define
    classes, then you should be able to keep up with every example in this book. We
    will take the time to explain every line of code written in this book so that
    you are able to create the desired outcome in any situation you find yourself
    in. There are some software prerequisites that are needed, which are explained
    in the first chapter. You will need to have access to the command-line interface
    terminal, Python interpreter, and web browsers such as Firefox and Google Chrome
    on your machine. You can download and install Firefox from [https://www.mozilla.org/en-US/firefox/](https://www.mozilla.org/en-US/firefox/)
    and Google Chrome from [https://www.google.com/chrome/](https://www.google.com/chrome/).
    If you're a Windows user, you might be interested in testing Internet Explorer,
    which is installed by default with Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Who this book is for
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you are a quality assurance/testing professional, software developer, or
    web application developer using Python and want to learn Selenium WebDriver to
    automate browsers for testing your web applications, this is the perfect guide
    for you to get started! As a prerequisite, this book expects you to have a basic
    understanding of the Python programming language, although any previous knowledge
    of Selenium WebDriver is not needed. By the end of this book, you will have acquired
    a comprehensive knowledge of Selenium WebDriver, which will help you in writing
    your automation tests.
  prefs: []
  type: TYPE_NORMAL
- en: Conventions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, you will find a number of styles of text that distinguish between
    different kinds of information. Here are some examples of these styles, and an
    explanation of their meaning.
  prefs: []
  type: TYPE_NORMAL
- en: 'Code words in text, database table names, folder names, filenames, file extensions,
    pathnames, dummy URLs, user input, and Twitter handles are shown as follows: "The
    `pip` tool will download the latest version of the Selenium package and install
    it on your machine."'
  prefs: []
  type: TYPE_NORMAL
- en: 'A block of code is set as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'When we wish to draw your attention to a particular part of a code block, the
    relevant lines or items are set in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Any command-line input or output is written as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '**New terms** and **important words** are shown in bold. Words that you see
    on the screen, in menus or dialog boxes for example, appear in the text like this:
    "Choose **Internet Options** from the **Tools** menu."'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Warnings or important notes appear in a box like this.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Tips and tricks appear like this.
  prefs: []
  type: TYPE_NORMAL
- en: Reader feedback
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Feedback from our readers is always welcome. Let us know what you think about
    this book—what you liked or disliked. Reader feedback is important for us as it
    helps us develop titles that you will really get the most out of.
  prefs: []
  type: TYPE_NORMAL
- en: To send us general feedback, simply e-mail `<[feedback@packtpub.com](mailto:feedback@packtpub.com)>`,
    and mention the book's title in the subject of your message.
  prefs: []
  type: TYPE_NORMAL
- en: If there is a topic that you have expertise in and you are interested in either
    writing or contributing to a book, see our author guide at [www.packtpub.com/authors](http://www.packtpub.com/authors).
  prefs: []
  type: TYPE_NORMAL
- en: Customer support
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that you are the proud owner of a Packt book, we have a number of things
    to help you to get the most from your purchase.
  prefs: []
  type: TYPE_NORMAL
- en: Downloading the example code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You can download the example code files from your account at [http://www.packtpub.com](http://www.packtpub.com)
    for all the Packt Publishing books you have purchased. If you purchased this book
    elsewhere, you can visit [http://www.packtpub.com/support](http://www.packtpub.com/support)
    and register to have the files e-mailed directly to you.
  prefs: []
  type: TYPE_NORMAL
- en: Errata
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Although we have taken every care to ensure the accuracy of our content, mistakes
    do happen. If you find a mistake in one of our books—maybe a mistake in the text
    or the code—we would be grateful if you could report this to us. By doing so,
    you can save other readers from frustration and help us improve subsequent versions
    of this book. If you find any errata, please report them by visiting [http://www.packtpub.com/submit-errata](http://www.packtpub.com/submit-errata),
    selecting your book, clicking on the **Errata Submission Form** link, and entering
    the details of your errata. Once your errata are verified, your submission will
    be accepted and the errata will be uploaded to our website or added to any list
    of existing errata under the Errata section of that title.
  prefs: []
  type: TYPE_NORMAL
- en: To view the previously submitted errata, go to [https://www.packtpub.com/books/content/support](https://www.packtpub.com/books/content/support)
    and enter the name of the book in the search field. The required information will
    appear under the **Errata** section.
  prefs: []
  type: TYPE_NORMAL
- en: Piracy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Piracy of copyrighted material on the Internet is an ongoing problem across
    all media. At Packt, we take the protection of our copyright and licenses very
    seriously. If you come across any illegal copies of our works in any form on the
    Internet, please provide us with the location address or website name immediately
    so that we can pursue a remedy.
  prefs: []
  type: TYPE_NORMAL
- en: Please contact us at `<[copyright@packtpub.com](mailto:copyright@packtpub.com)>`
    with a link to the suspected pirated material.
  prefs: []
  type: TYPE_NORMAL
- en: We appreciate your help in protecting our authors and our ability to bring you
    valuable content.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you have a problem with any aspect of this book, you can contact us at `<[questions@packtpub.com](mailto:questions@packtpub.com)>`,
    and we will do our best to address the problem.
  prefs: []
  type: TYPE_NORMAL
