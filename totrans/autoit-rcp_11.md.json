["```py\nchetans-MacBookPro:ch12 Chetan$ virtualenv date\nNew python executable in date/bin/python2.7\nAlso creating executable in date/bin/python\nInstalling setuptools, pip, wheel...done.\nchetans-MacBookPro:ch12 Chetan$ source date/bin/activate\n(date)chetans-MacBookPro:ch12 Chetan$ \n\n```", "```py\n(date)chetans-MacBookPro:ch12 Chetan$ pip install pytz\nCollecting pytz\n Using cached pytz-2016.7-py2.py3-none-any.whl\nInstalling collected packages: pytz\nSuccessfully installed pytz-2016.7 \n\n```", "```py\n            import datetime \n            time_obj = datetime.time(13, 2, 23) \n            print \"Time object is:\", time_obj \n            print 'Hour  :', time_obj.hour \n            print 'Minute:', time_obj.minute \n            print 'Second:', time_obj.second \n            print 'Microsecond:', time_obj.microsecond \n\n    ```", "```py\n            import datetime \n            print \"Time Attributes are:\" \n            print \"Earliest time of the day :\", datetime.time.min \n            print \"Latest time of the day :\", datetime.time.max\n    ```", "```py\n            import datetime \n            today = datetime.date.today() \n            print 'Date object:', today \n            print 'Year:', today.year \n            print 'Mon :', today.month \n            print 'Day :', today.day\n    ```", "```py\n            import datetime \n            date_1 = datetime.date(2011, 12, 31) \n            print '  Date is:', date_1 \n            date_2 = date_1.replace(year=2012, month=1) \n            print '  New Date is:', date_2\n    ```", "```py\n            import calendar \n            from calendar import TextCalendar \n            cal = TextCalendar() \n            cal.pryear(2017) \n            cal.prmonth(2017, 11)\n    ```", "```py\n            from datetime import datetime \n            import time \n            now_1 = datetime.now() \n            print \"  Time Now\", now_1 \n            time.sleep(5) \n            now_2 = datetime.now() \n            print \"  Time Now\", now_2 \n            print \"  Difference in the times is:\", (now_2 - now_1).seconds \n\n    ```", "```py\n            from datetime import datetime, timedelta \n            now = datetime.now() \n            print \"  Time Now is:\", now \n            one_day_later = now + timedelta(days=1) \n            print \"  Tomorrow is:\", one_day_later\n    ```", "```py\n            from datetime import datetime, timedelta \n            now = datetime.now() \n            print \"  Time Now is:\", now \n            days_in_past = now - timedelta(days=365, hours=1) \n            print \"  Last year:\", days_in_past\n    ```", "```py\n            import datetime \n\n            time_1 = datetime.time(8, 9, 10) \n            print \"  Time 1:\", time_1 \n            time_2 = datetime.time(13, 19, 50) \n            print \"  Time 2:\", time_2 \n            print \"  Comparing times: time_2 > time_1?\", time_2 > time_1 \n\n            date_1 = datetime.date.today() \n            print \"  Date 1:\", date_1 \n            date_2 = date_1 + datetime.timedelta(days=2) \n            print \"  Date 2:\", date_2 \n            print \"  Comparing dates: date_1 > date_2?\", date_1 > date_2 \n\n    ```", "```py\n            import datetime \n\n            time_1 = datetime.time(13, 44, 55) \n            time_2 = datetime.time(13, 44, 55) \n            print \"  Times:\", time_1, time_2 \n\n            date_1 = datetime.date.today() \n            date_2 = date_1 + datetime.timedelta(days=1) \n            print \"  Dates:\", date_1, date_2 \n\n            datetime_1 = datetime.datetime.combine(date_1, time_1) \n            datetime_2 = datetime.datetime.combine(date_2, time_2) \n            print \"  Datetime Difference:\", datetime_2 - datetime_1\n    ```", "```py\n            import datetime \n            today = datetime.datetime.today() \n            print \"  ISO datetime: \", today \n\n    ```", "```py\n            import datetime \n            today = datetime.datetime.today() \n            print \"  ISO datetime: \", today \n\n            format = \"%a %b %d %H:%M:%S %Y\" \n            string_format = today.strftime(format) \n            print \"  Datetime in String format:\", string_format \n\n    ```", "```py\n            import datetime \n            import time \n\n            time_1 = time.time() \n            print \"  Datetime from unix timestamp:\",\n            datetime.datetime.fromtimestamp(1284101485) \n\n            date_1 = datetime.datetime(2012,4,1,0,0) \n            print \"  Unix timestamp\", date_1.strftime('%s')  \n\n    ```", "```py\n            import datetime \n            date_1 = datetime.date.fromordinal(1000) \n            print \"  1000th day from 1 Jan 0001: \", date_1 \n\n    ```", "```py\n            from datetime import datetime, timedelta \n            now = datetime.now() \n            print \"  Local time now is:\", now \n            utcnow = datetime.utcnow() \n            print \"  UTC time now is:\", utcnow\n    ```", "```py\n            from pytz import timezone \n            import pytz \n            utc = pytz.utc \n            print \"  Selected time zone:\", utc \n            eastern = timezone('US/Eastern') \n            print \"  Switched to time zone:\", eastern \n            loc_dt = datetime(2016, 11, 27, 12, 0, 0, tzinfo=pytz.utc) \n            est = loc_dt.astimezone(eastern) \n            fmt = '%Y-%m-%d %H:%M:%S %Z%z' \n            print \"  Local time in Eastern time zone:\", est.strftime(fmt)\n    ```", "```py\n            from datetime import datetime, timedelta \n            au_tz = timezone('Australia/Sydney') \n            local = datetime(2002, 10, 27, 6, 0, 0, tzinfo=au_tz) \n            print \"  Local time in Sydney:\", local \n            past = local - timedelta(minutes=10) \n            print \"  10 minutes before time was:\", past \n            future = local + timedelta(hours=18) \n            print \"  18 hours later it is:\", future\n    ```", "```py\n            eastern = timezone('US/Eastern') \n            dt = datetime(2016, 11, 06, 1, 30, 0) \n            dt1 = eastern.localize(dt, is_dst=True) \n            print \"  Date time 1 with day light savings:\", dt1.strftime(fmt) \n            dt2 = eastern.localize(dt, is_dst=False) \n            print \"  Date time 2 without day light savings:\", dt2.strftime(fmt)\n    ```", "```py\n            tz_au = '\\n  '.join(pytz.country_timezones['au']) \n            print \"  Time zones in Australia:\", tz_au \n            country_gb, country_fr = pytz.country_names['gb'], \n                                    pytz.country_names['fr'] \n           print \"\\n  Country names are:\\n\", \"  \", \n           country_gb, \"\\n  \", \"  \", country_gb, \"\\n  \", country_fr\n    ```", "```py\n (date)chetans-MacBookPro:ch12 Chetan$ pip install fpdf \n        You are using pip version 7.1.0, however version 9.0.1 is\n        available. \n        You should consider upgrading via the \n            'pip install --upgrade pip' command. \n        Collecting fpdf \n        Downloading fpdf-1.7.2.tar.gz \n        Building wheels for collected packages: fpdf \n        Running setup.py bdist_wheel for fpdf \n        Stored in directory: /Users/chetan/Library/Caches/pip/wheels/\n        c9/22/63/16731bdbcccd4a91f5f9e9bea98b1e51855a678f2c6510ae76 \n        Successfully built fpdf \n        Installing collected packages: fpdf \n        Successfully installed fpdf-1.7.2\n\n```", "```py\n            users = [{\"id\":12, \"name\":\"John\", \"city\":\"New York\",\n                      \"timezone\":\"US/Eastern\"}, \n                     {\"id\":13, \"name\":\"Johny\", \"city\":\"Indiana\",\n                      \"timezone\":\"US/Central\"}] \n\n            #All time stamps are in UTC \n            payments = [{\"id\":12, \"amount\":12.00, \n                         \"created_at\":\"2016-11-29T11:46:07.141Z\"}, \n                        {\"id\":13, \"amount\":22.00, \n                         \"created_at\":\"2016-11-30T23:46:07.141Z\"}, \n                        {\"id\":12, \"amount\":5.00, \n                         \"created_at\":\"2016-12-01T01:00:00.141Z\"}] \n\n            usage = [{\"id\":12, \"charge\":5.00, \n                      \"created_at\":\"2016-11-29T11:46:07.141Z\"}] \n\n    ```", "```py\n            user_ids = [] \n            user_names = [] \n            for usr in users: \n            user_ids.append(usr[\"id\"]) \n            user_names.append(usr[\"name\"]) \n\n            def get_payments(user_id, month):\n                tz = [ x for x in users if x[\"id\"] == user_id] \n                tot_payment = 0.00 \n                for p in payments: \n                    dt = datetime.strptime(p[\"created_at\"], \n                                           '%Y-%m-%dT%H:%M:%S.%fZ') \n                    if p[\"id\"] == user_id and dt.month == month: \n                       tot_payment += p[\"amount\"] \n                return tot_payment \n\n            def get_usage(user_id, month): \n            tz = [ x for x in users if x[\"id\"] == user_id]\n                tot_usage = 0.00 \n                for u in usage: \n                  dt = datetime.strptime(u[\"created_at\"], \n                                         '%Y-%m-%dT%H:%M:%S.%fZ') \n                  if u[\"id\"] == user_id and dt.month == month: \n                     tot_usage += u[\"charge\"] \n                return tot_usage \n\n    ```", "```py\n            def get_invoice(user_name, user_id, month): \n                html = \"\"\" \n            <p>Anzee Corporation</p><br> \n            <b><p>Account Name: \"\"\" + user_name + \"\"\"</p> \n            <p>Invoice for month of: \"\"\" + \n               str(calendar.month_name[month]) + \"\"\"</p></b> \n            <br><br> \n            <p><b>Payments and Usage:</b></p> \n            <table align=\"center\" width=\"50%\"> \n              <thead> \n                <tr> \n                  <th align=\"left\" width=\"50%\">Charge Type</th> \n                  <th align=\"right\" width=\"50%\">Amount</th> \n                </tr> \n              </thead> \n              <tbody> \n                <tr> \n                  <td>Payments Done</td> \n                  <td align=\"right\">$\"\"\" + str(get_payments\n                                   (user_id, month)) + \"\"\"</td> \n                </tr> \n                <tr> \n                  <td>Total Usage</td> \n                  <td align=\"right\">$\"\"\" + str(get_usage\n                                   (user_id, month)) + \"\"\"</td> \n                </tr> \n              </tbody> \n            </table> \n            <br><br> \n              \"\"\" \n              return html \n\n            class MyFPDF(FPDF, HTMLMixin): \n            pass \n\n            html = get_invoice(\"John\", 12, 11) \n            pdf=MyFPDF() \n            pdf.add_page() \n            pdf.write_html(html) \n            pdf.output('invoice.pdf','F')  \n\n    ```", "```py\n            from datetime import datetime \n            import pytz \n            from pytz import timezone \n            from fpdf import FPDF, HTMLMixin \n            import calendar \n\n            users = [{\"id\":12, \"name\":\"John\", \n                      \"city\":\"New York\", \"timezone\":\"US/Eastern\"}, \n                     {\"id\":13, \"name\":\"Johny\", \n                      \"city\":\"Indiana\", \"timezone\":\"US/Central\"}] \n\n            #All time stamps are in UTC \n            payments = [{\"id\":12, \"amount\":12.00, \n                         \"created_at\":\"2016-11-29T11:46:07.141Z\"}, \n                        {\"id\":13, \"amount\":22.00, \n                         \"created_at\":\"2016-11-30T23:46:07.141Z\"}, \n                        {\"id\":12, \"amount\":5.00, \n                         \"created_at\":\"2016-12-01T01:00:00.141Z\"}] \n            usage = [{\"id\":12, \"charge\":5.00, \n                      \"created_at\":\"2016-11-29T11:46:07.141Z\"}] \n\n            user_ids = [] \n            user_names = [] \n            for usr in users: \n                user_ids.append(usr[\"id\"]) \n            user_names.append(usr[\"name\"]) \n\n            def get_payments(user_id, month): \n                tz = [ x for x in users if x[\"id\"] == user_id] \n                tot_payment = 0.00 \n                for p in payments: \n                    dt = datetime.strptime(p[\"created_at\"], \n                                   '%Y-%m-%dT%H:%M:%S.%fZ') \n                    dt = dt.replace(tzinfo=pytz.UTC) \n                    dt = dt.astimezone(timezone(tz[0][\"timezone\"])) \n                    if p[\"id\"] == user_id and dt.month == month: \n                       tot_payment += p[\"amount\"] \n                return tot_payment \n\n            def get_usage(user_id, month): \n                tz = [ x for x in users if x[\"id\"] == user_id] \n                tot_usage = 0.00 \n                for u in usage: \n                    dt = datetime.strptime(u[\"created_at\"], \n                                   '%Y-%m-%dT%H:%M:%S.%fZ') \n                    dt = dt.replace(tzinfo=pytz.UTC) \n                    dt = dt.astimezone(timezone(tz[0][\"timezone\"])) \n                    if u[\"id\"] == user_id and dt.month == month: \n                       tot_usage += u[\"charge\"] \n            return tot_usage \n\n            def get_invoice(user_name, user_id, month): \n              html = \"\"\" \n            <p>Anzee Corporation</p><br> \n            <b><p>Account Name: \"\"\" + user_name + \"\"\"</p> \n            <p>Invoice for month of: \"\"\" + \n               str(calendar.month_name[month]) + \"\"\"</p></b> \n            <br><br> \n            <p><b>Payments and Usage:</b></p> \n            <table align=\"center\" width=\"50%\"> \n              <thead> \n                <tr> \n                  <th align=\"left\" width=\"50%\">Charge Type</th> \n                  <th align=\"right\" width=\"50%\">Amount</th> \n                </tr> \n              </thead> \n              <tbody> \n                <tr> \n                  <td>Payments Done</td> \n                  <td align=\"right\">$\"\"\" + str(get_payments(\n                                 user_id, month)) + \"\"\"</td> \n                </tr> \n                <tr> \n                  <td>Total Usage</td> \n                  <td align=\"right\">$\"\"\" + str(get_usage(\n                              user_id, month)) + \"\"\"</td> \n                </tr> \n              </tbody> \n            </table> \n            <br><br> \n              \"\"\" \n              return html \n\n            class MyFPDF(FPDF, HTMLMixin): \n                  pass \n\n            html = get_invoice(\"John\", 12, 11) \n            pdf=MyFPDF() \n            pdf.add_page() \n            pdf.write_html(html) \n            pdf.output('invoice.pdf','F') \n\n    ```"]