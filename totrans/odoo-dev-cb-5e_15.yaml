- en: '15'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web Client Development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo’s web client, or backend, is where employees spend most of their time.
  prefs: []
  type: TYPE_NORMAL
- en: In [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446)*, Backend Views*, you saw
    how to use the existing functionality that backends provide. Here, we’ll take
    a look at how to extend and customize those functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: The `web` module contains everything related to the user interface in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: All of the code in this chapter will depend on the `web` module. As you know,
    Odoo has two different editions (Enterprise and Community).
  prefs: []
  type: TYPE_NORMAL
- en: The Community version uses the `web` module for user interfaces, while the Enterprise
    version uses an extended version of the Community `web` module, which is the `web_enterprise`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: The Enterprise version provides more features than the Community version, including
    mobile compatibility, searchable menus, and material design. We’ll work on the
    Community version here. Don’t worry—the modules developed in Community work perfectly
    in Enterprise because, internally, `web_enterprise` depends on the Community `web`
    module and just adds some features to it.
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: Odoo 17 is a bit different for the backend web client compared to other Odoo
    versions. It contains two different frameworks to maintain the GUI of the Odoo
    backend. The first one is the widget-based legacy framework, and the second one
    is the component-based modern framework called the **Odoo Web Library** (**OWL**).
    OWL is the new UI framework introduced in Odoo v16\. Both use QWeb templates for
    structure, but there are significant changes in the syntax and the way those frameworks
    work.
  prefs: []
  type: TYPE_NORMAL
- en: Although Odoo 17 has a new framework OWL, Odoo does not use this new framework
    everywhere. Most of the web client is still written with the old widget-based
    framework. In this chapter, we will see how to customize the web client using
    a widget-based framework. In the next chapter, we will look at the OWL framework.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to create new field widgets to get input
    from users. We will also be creating a new view from scratch. After reading this
    chapter, you will be able to create your own UI elements in the Odoo backend.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Odoo’s user interface heavily depends on JavaScript. Throughout this chapter,
    we will assume you have a basic knowledge of JavaScript, jQuery, and SCSS.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using client-side QWeb templates
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making RPC calls to the server
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Debugging your client-side code
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Improving onboarding with tours
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mobile app JavaScript
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The technical requirement for this chapter is the online Odoo platform.
  prefs: []
  type: TYPE_NORMAL
- en: All the code used in this chapter can be downloaded from the GitHub repository
    at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter15)
  prefs: []
  type: TYPE_NORMAL
- en: Creating custom widgets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446)*, Backend Views*,
    we can use widgets to display certain data in different formats. For example,
    we used `widget='image'` to display a binary field as an image. To demonstrate
    how to create your own widget, we’ll write one widget that lets the user choose
    an integer field, but we will display it differently. Instead of an input box,
    we will display a color picker so that we can select a color number. Here, each
    number will be mapped to its related color.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module with basic fields and
    views. You will find the basic `my_hostel` module in the `Chapter15/00_initial_module`
    directory in the GitHub repository.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We’ll add a JavaScript file that contains our widget’s logic, an XML file that
    contains design logic, and an SCSS file to do some styling. Then, we will add
    one integer field to the books form to use our new widget.
  prefs: []
  type: TYPE_NORMAL
- en: 'Follow these steps to add a new field widget:'
  prefs: []
  type: TYPE_NORMAL
- en: 'This widget can be written with a very small amount of JavaScript. Let’s create
    a file called `static/src/js/field_widget.js` with this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create your widget by extending `Component`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Capture the JavaScript color widget code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Set the `template` and the supported field types for the widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'In the same file, register the component to the `fields` registry:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add QWeb template design code in `static/src/xml/field_widget.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add SCSS in `static/src/scss/field_widget.scss`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register files in the manifest file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the `Category` integer field to the `hostel.room` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the category field to the hostel form view, and then add `widget="category_color"`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the module to apply the changes. After the update, open the hostel form
    view and you will see the category color picker, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 15.1 – How the custom widget is displ\uFEFFayed](img/B20997_15_1.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 15.1 – How the custom widget is displayed
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we imported the `Component` and registry.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we created a `CategColorField` by extending the `Component`. Through
    this, `CategColorField` will get all the properties and methods from the `Component`.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we inherited the `setup` method and set the value of the `this.totalColors`
    attribute. We will use this variable to decide on the number of color pills. We
    want to display six color pills, so we assigned `[1,2,3,4,5,6]`.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we added the `clickPill` handler method to manage pill clicks.
    To set the field value, we used `this. props.update` method. This method is added
    from the `Component` class.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 5*, we added a template name where we rendered the `CategColorField`
    design and set supported types.
  prefs: []
  type: TYPE_NORMAL
- en: '`supportedTypes` has been used to decide which types of field are supported
    by this widget. In our case, we want to create a widget for integer fields.'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 6*, after registering the component to the fields registry.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we exported our `widget` class so that other add-ons can extend it
    or inherit from it. Then, we added a new integer field called category to the
    `hostel.room` model. We also added the same field to the form view with the `widget="category_color"`
    attribute. This will display our widget in the form instead of the default integer
    widget.
  prefs: []
  type: TYPE_NORMAL
- en: Using client-side QWeb templates
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Just as it’s a bad habit to programmatically create HTML code in JavaScript,
    you should only create minimal DOM elements in your client-side JavaScript code.
    Fortunately, there’s a templating engine available for the client side.
  prefs: []
  type: TYPE_NORMAL
- en: A client-side template engine is also available in Odoo. This template engine
    is known as **Qweb Templates** and is carried out completely in JavaScript code
    and rendered inside the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe
    and add `informationPanel` below the category color icon.
  prefs: []
  type: TYPE_NORMAL
- en: Using `renderToElement`, we render the category information element and set
    it on `informationPanel`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We need to add the QWeb definition to the manifest and change the JavaScript
    code so that we can use it. Perform the following steps to get started:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `@web/core/utils/render` and extract the `renderToElement` reference
    to a variable, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the template file to `static/src/xml/field_widget.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the mouseover function and, in this function, simply render the category
    information element using `renderToElement.render` and append the `categ` information
    element to `categInformationPanel`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add SCSS in `static/src/scss/field_widget.scss` to set the category information
    style:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the QWeb file in your manifest:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Restart the server to apply the changes. After the restart, open the hotel
    form view and you will see the category information panel, as shown in the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.2 – Category information panel](img/B20997_15_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.2 – Category information panel
  prefs: []
  type: TYPE_NORMAL
- en: 'When we hover over the category color icon:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 15.3 – Hovering over the category icon displays category infor\uFEFF\
    mation](img/B20997_15_3.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 15.3 – Hovering over the category icon displays category information
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As there is already a comprehensive discussion on the basics of QWeb in the
    *Creating or Modifying Templates – QWeb* recipe in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS Website Development*, we’ll focus on what is different here. First of all,
    you need to realize that we’re dealing with the JavaScript QWeb implementation,
    as opposed to the Python implementation on the server side. This means that you
    don’t have access to browsing records or the environment; you only have access
    to the parameters you have passed from the `renderToElement` function.
  prefs: []
  type: TYPE_NORMAL
- en: In our case, we have passed the current object via the `widget` key. This means
    that you should have all the intelligence in the widget’s JavaScript code and
    have your template only access properties, or possibly functions. Given that we
    can access all the available properties on the widget, we can simply check the
    value in the template by checking the hover category color property.
  prefs: []
  type: TYPE_NORMAL
- en: As client-side QWeb has nothing to do with QWeb views, there’s a different mechanism
    to make those templates known to the web client—add them via the QWeb key to your
    add-on’s manifest in a list of filenames relative to the add-on’s root.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The reason for going to the effort of using QWeb here was extensibility. If,
    for example, we want to add info icons to our widget from another module, we’ll
    use the following code to have an icon in each pill:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: "![Figure 15.4 – Info icon on the category informati\uFEFFon panel](img/B20997_15_4.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 15.4 – Info icon on the category information panel
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: 'If you want to learn more about the QWeb templates, refer to the following
    points:'
  prefs: []
  type: TYPE_NORMAL
- en: '- The client-side QWeb engine has less convenient error messages and handling
    than other parts of Odoo. A small error often means that nothing happens, and
    it’s hard for beginners to continue from there.'
  prefs: []
  type: TYPE_NORMAL
- en: '- Fortunately, there are some debug statements for client-side QWeb templates
    that will be described later in this chapter in the *Debugging your client-side*
    *code* recipe.'
  prefs: []
  type: TYPE_NORMAL
- en: Making RPC calls to the server
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sooner or later, your widget will need to look up some data from the server.
    In this recipe, we will add a category booked panel to the category information
    panel. When the user hovers their cursor over the category color pill element,
    the booked panel will show the number of booked rooms related to that category
    color. We will make an RPC call to the server to fetch a book count of the data
    associated with that particular category.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to make an RPC call to the server and display the result
    in a `colorPreviewPanel`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Import `@odoo/owl` and extract the `onWillStart,onWillUpdateProps` reference
    to a variable, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `onWillStart` method to the `setup` method and call our custom `load``ColorData`
    method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `loadCategInformation` method and set `categInfoData` in the RPC call:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update `CategoryInformation` template and add the count data:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the module to apply the changes. After the update, you will see a count
    of category information, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 15.5 – Data \uFEFFFetch Using RPC](img/B20997_15_5.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 15.5 – Data Fetch Using RPC
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `onWillStart` hook will be called just before the component is rendered
    for the first time. It will be useful if we need to do some actions before the
    component is rendered to the view, such as loading some initial data.
  prefs: []
  type: TYPE_NORMAL
- en: '`onWillUpdateProps` is also an asynchronous hook that is called whenever an
    update is made to a related component. The reactive nature of the OWL framework
    can be maintained using this amazing hook.'
  prefs: []
  type: TYPE_NORMAL
- en: When dealing with data access, we rely on the `_rpc` function provided by the
    `ORM``search`, `read`, `write`, or, in this case, `read_group`.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 1*, we made an RPC call and invoked the `read_group` method on the
    current model, which is `hostel.room` in our case. We grouped data based on the
    `category` field so that the RPC call will return book data that were grouped
    by `category` and add an aggregate in the `category_count` key. We also mapped
    the `category_count` and `category` index in the `categoryInfo` so that we could
    use it in the QWeb template.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 2* is nothing special. We just initialized the bootstrap tooltip.'
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we used `categoryInfo` to set the attributes that are needed to
    display the category information. In the `loadCategInformation` method, we assigned
    a color map via `this.categoryInfo` so that you can access them in the QWeb template
    via `widget.categoryInfo`. This is because we passed the widget reference; this
    is the `renderToElement` method.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Odoo’s RPC returns JavaScript’s native `Promise` object. You will get the requested
    data once the `Promise` is resolved. You can learn more about `Promise` here:
    [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new view
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As you saw in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*,
    there are different kinds of views, such as form, list, and kanban. In this recipe,
    we will create a new view. This view will display the list of rooms, along with
    their students.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
    Note that views are very complex structures, and each view has a different purpose
    and implementation. The purpose of this recipe is to make you aware of the `MVC`
    pattern view and how to create simple views. In this recipe, we will create a
    view called `m2m_group`, the purpose of which is to display records in groups.
    To divide records into different groups, the view will use the `many2x` field
    data. In the `my_hostel` module, we have the `room_id` field. Here, we will group
    students based on room and display them in cards.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, we will add a new button to the control panel. With the help of
    this button, you will be able to add a new student record. We will also add a
    button to the room’s card so that we can redirect users to another view.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add a new view called `m2m_group`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new view type in `ir.ui.view`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new view mode in `ir.actions.act_window.view`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new method by inheriting from the base model. This method will be called
    from the JavaScript model (see *step 4* for more details):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file called `/static/src/js/m2m_group_model.js` and add the following
    content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file called `/static/src/js/m2m_group_controller.js` and add the
    following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file called `/static/src/js/m2m_group_renderer.js` and add the following
    content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file called `/static/src/js/m2m_group_arch_parser.js` and add the
    following content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new file called `/static/src/js/m2m_group_view.js` and add the following
    content to it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the QWeb template for the view to the `/``static/src/xml/m2m_group_controller.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the QWeb template for the view to the `/``static/src/xml/m2m_group_renderer.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the QWeb template for the view to the `/``static/src/xml/m2m_group_view.xml`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add all of the JavaScript and XML files to the backend assets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add our new view for the `hostel.student` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add `m2m_group` to the action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `my_hostel` module to open the **Students** view, and then, from
    the view switcher, open the new view that we just added. This will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.6 – Many2many group view](img/B20997_15_6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.6 – Many2many group view
  prefs: []
  type: TYPE_NORMAL
- en: "![Figur\uFEFFe 15.7 – Many2many group view](img/B20997_15_7.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 15.7 – Many2many group view
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: Odoo views are very easy to use and are very flexible. However, it is often
    the case that easy and flexible things have complex implementations under the
    hood.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is true of Odoo JavaScript views: they are easy to use, but complex to
    implement. They consist of lots of components, including the model, renderer,
    controller, view, and QWeb template. In the next section, we have added all of
    the required components for the views and have also used a new view for the `my_hostel`
    model. If you don’t want to add everything manually, grab a module from the example
    file in this book’s GitHub repository.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *steps 1* and *2*, we registered a new type of view, called `m2m_group`,
    in `ir.ui.view` and `ir.actions.act_window.view`.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we added the `get_m2m_group_data` method to the base. Adding this
    method to the base will make that method available in every model. This method
    will be called via an RPC call from the JavaScript view. The view will pass two
    parameters—the `domain` and `m2m_field`. In the `domain` argument, the value of
    the domain will be the domain generated with a combination of the search view
    domain and the action domain. `m2m_field` is the field name by which we want to
    group the records. This field will be set on the view definition.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next few steps, we added the JavaScript files that are required to new
    the view. An Odoo JavaScript view consists of the view, model, renderer, and controller.
    The word view has historical meaning in the Odoo code base, so **model, view,
    controller** (**MVC**) becomes **model, renderer, controller** (**MRC**) in Odoo.
    In general, the view sets up the model, renderer, and controller, and sets the
    MVC hierarchy so that it looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.8 – View components](img/B20997_15_8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.8 – View components
  prefs: []
  type: TYPE_NORMAL
- en: 'Its job is to get a set of fields, arch, context, and some other parameters,
    then to construct a controller/renderer/model triplet:'
  prefs: []
  type: TYPE_NORMAL
- en: The view’s role is to properly set up each piece of the MVC pattern with the
    correct information. Usually, it has to process the arch string and extract the
    data necessary for each other parts of the view.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note that the view is a class, not a widget. Once its job has been done, it
    can be discarded.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The renderer has one job: representing the data being viewed in a DOM element.
    Each view can render the data in a different way. Also, it should listen to appropriate
    user actions and notify its parent (the controller) if necessary. The renderer
    is the V in the MVC pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The model: its job is to fetch and hold the state of the view. Usually, it
    represents in some way a set of records in the database. The model is the owner
    of the business data. It is the M in the MVC pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The controller: Its job is to coordinate the renderer and the model. Also,
    it is the main entry point for the rest of the web client. For example, when the
    user changes something in the search view, the `update` method of the controller
    will be called with the appropriate information. It is the C in the MVC pattern.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript code for the views has been designed to be usable outside of
    the context of a view manager/action manager. It could be used in a client action,
    or it could be displayed on the public website (with some work on the assets).
  prefs: []
  type: TYPE_NORMAL
- en: In *step 8*, we added JavaScript and XML files to the assets.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, in the last two steps, we added a view definition for the `hostel.student`
    model.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 9*, we used the `<m2m_group>` tag for the view, and we also passed
    the `m2m_field` attribute as the option. This will be passed to the model to fetch
    the data from the server.
  prefs: []
  type: TYPE_NORMAL
- en: Debugging your client-side code
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This book contains a whole chapter for debugging server-side code, [*Chapter
    7*](B20997_07.xhtml#_idTextAnchor363), *Debugging Modules*. For the client-side
    part, you’ll get a kick-start in this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: This recipe doesn’t rely on specific code, but if you want to be able to reproduce
    exactly what’s going on, grab the previous recipe’s code.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'What makes debugging client-side scripts difficult is that the web client relies
    heavily on jQuery’s asynchronous events. Given that breakpoints halt the execution,
    there is a high chance that a bug caused by timing issues will not occur when
    debugging. We’ll discuss some strategies for this later:'
  prefs: []
  type: TYPE_NORMAL
- en: For the client-side debugging, you will need to activate debug mode with the
    assets. If you don’t know how to activate debug mode with the assets, read the
    *Activating the Odoo developer tools* recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo* *Development Environment*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In the JavaScript function you’re interested in, call `debugger`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you have timing problems, log in to the console through a JavaScript function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If you want to debug during template rendering, call the debugger from QWeb:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'You can also have QWeb log in to the console, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'All of this relies on your browser offering the appropriate functionality for
    debugging. While all major browsers do that, we’ll only look at Chromium here,
    for demonstration purposes. To be able to use the debug tools, open them by clicking
    on the top-right menu button and selecting **More tools** | **Developer tools**:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 15.9 –\uFEFF Opening Developer Tools in Chrome](img/B20997_15_9.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 15.9 – Opening Developer Tools in Chrome
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When the debugger is open, you should see something similar to the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.10 – Opening Developer Tools in Chrome](img/B20997_15_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.10 – Opening Developer Tools in Chrome
  prefs: []
  type: TYPE_NORMAL
- en: Here, you have access to a lot of different tools in separate tabs. The currently
    active tab in the preceding screenshot is the JavaScript debugger, and we have
    set a breakpoint in line 31 by clicking on the line number. Every time our widget
    fetches the list of users, the execution should stop at this line, and the debugger
    will allow you to inspect variables or change their values. Within the watch list
    to the right, you can also call functions to try out their effects without having
    to continuously save your script file and reload the page.
  prefs: []
  type: TYPE_NORMAL
- en: The debugger statements we described earlier will behave the same as soon as
    you have the developer tools open. The execution will then stop, and the browser
    will switch to the **Sources** tab, with the file in question opened and the line
    with the debugger statement highlighted.
  prefs: []
  type: TYPE_NORMAL
- en: The two logging possibilities from earlier will end up on the **Console** tab.
    This is the first tab you should inspect in case of problems in any case because,
    if some JavaScript code doesn’t load at all because of syntax errors or similar
    fundamental problems, you’ll see an error message there explaining what’s going
    on.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Use the **Elements** tab to inspect the DOM representation of the page the browser
    currently displays. This will prove helpful when it comes to familiarizing yourself
    with the HTML code the existing widgets produce, and it will also allow you to
    play with classes and CSS attributes, in general. This is a great resource for
    testing layout changes.
  prefs: []
  type: TYPE_NORMAL
- en: The **Network** tab gives you an overview of which requests the current page
    made and how long it took. This is helpful when it comes to debugging slow page
    loads as, in the **Network** tab, you will usually find the details of the requests.
    If you select a request, you can inspect the payload that was passed to the server
    and the result returned, which helps you to figure out the reason for unexpected
    behavior on the client side. You’ll also see the status codes of requests made—for
    example, 404—in case a resource can’t be found because you misspelled a filename,
    for instance.
  prefs: []
  type: TYPE_NORMAL
- en: Improving onboarding with tours
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After developing a large application, it is crucial to explain software flows
    to the end users. The Odoo framework includes a built-in tour manager. With this
    tour manager, you can guide an end user through learning specific flows. In this
    recipe, we will create a tour so that we can create a book in the library.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the `my_hostel` module from the previous recipe. Tours are
    only displayed in the database without demo data, so if you are using a database
    with demo data, create a new database without demo data for this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To add a tour to a hostel, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new `/static/src/js/my_hostel_tour.js` file with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the tour JavaScript file in the backend assets:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the module and open the Odoo backend. At this point, you will see the
    tour, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: Or you can click on debug icon and click on **Start Tour**.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.11 – Tour step for user onboarding](img/B20997_15_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.11 – Tour step for user onboarding
  prefs: []
  type: TYPE_NORMAL
- en: It displays below the **Tours** popup.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.12 – Tour step for user onboarding](img/B20997_15_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.12 – Tour step for user onboarding
  prefs: []
  type: TYPE_NORMAL
- en: 'Click the start icon button to see the **Ready to lunch your hostel?** Tour
    content:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.13 – Tour step for user onboarding](img/B20997_15_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.13 – Tour step for user onboarding
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The tour manager is available in the **web_tour.tours** category.
  prefs: []
  type: TYPE_NORMAL
- en: In the first step, we imported `registry`. We can then added a new tour with
    `registry.category("web_tour.tours")`. We registered our tour with the `hostel_tour`
    name and passed the URL on which this tour should run.
  prefs: []
  type: TYPE_NORMAL
- en: The next parameter is a list of these tour stops. A tour step requires three
    values. The trigger is used to select the element on which the tour should be
    displayed. This is a JavaScript selector. We used the XML ID of the menu because
    it is available in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: The first step, `stepUtils.showAppsMenuItem()`, is the predefined step from
    the tour for the main menu. The next key is the content, and this is displayed
    when the user hovers over the tour drop. We used the `markup(_t())` function because
    we want to translate the string, while the position key is used to decide on the
    position of the tour drop. Possible values are top, right, left, or bottom.
  prefs: []
  type: TYPE_NORMAL
- en: Important information
  prefs: []
  type: TYPE_NORMAL
- en: Tours improve the onboarding experience of the user and manage the integration
    tests. When you run Odoo with test mode internally, it also runs the tours and
    causes the test case to fail if a tour has not finished.
  prefs: []
  type: TYPE_NORMAL
- en: Mobile app JavaScript
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo v10 introduced the Odoo mobile application. It provides a few small utilities
    to perform mobile actions, such as vibrating the phone, showing a toast message,
    and scanning QR codes.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the `my_hostel` module from the previous recipe. We will show
    you the toast when we change the value of the color field from the mobile app.
  prefs: []
  type: TYPE_NORMAL
- en: Warning
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo mobile app only supports the Enterprise Edition, so if you don’t have
    the Enterprise Edition, then you cannot test it.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to show a toast message in the Odoo mobile app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the module and open the form view of the `hostel.room` model in the
    mobile app. When you change the color, you will see the toast, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 15.14 – Toast on color change](img/B20997_15_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 15.14 – Toast on color change
  prefs: []
  type: TYPE_NORMAL
- en: How it works…
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`@web_mobile/js/services/core` provides the bridge between a mobile device
    and Odoo JavaScript. It exposes a few basic mobile utilities. In our example,
    we used the `showToast` method to display a toast in the mobile app. We also need
    to check the availability of the function. The reason for this is that some mobile
    phones might not support a few features. For example, if devices don’t have a
    camera, then you can’t use the `scanBarcode()` method. In such cases, to avoid
    tracebacks, we need to wrap them with an `if` condition.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The mobile utilities that are to be found in Odoo are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`showToast()`: To display a toast message'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`vibrate()`: To make a phone vibrate'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`showSnackBar()`: To display a snack bar with a button'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`showNotification()`: To display a mobile notification'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`addContact()`: To add a new contact to the phonebook'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scanBarcode()`: To scan QR codes'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`switchAccount()`: To open the account switcher in Android'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To learn more about mobile JavaScript, refer to [https://www.odoo.com/documentation/16.0/developer/reference/frontend/mobile.html](https://www.odoo.com/documentation/16.0/developer/reference/frontend/mobile.html).
  prefs: []
  type: TYPE_NORMAL
