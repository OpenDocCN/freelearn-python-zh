- en: '15'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '15'
- en: Web Client Development
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Web客户端开发
- en: Odoo’s web client, or backend, is where employees spend most of their time.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo的Web客户端，或后端，是员工大部分时间所在的地方。
- en: In [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446)*, Backend Views*, you saw
    how to use the existing functionality that backends provide. Here, we’ll take
    a look at how to extend and customize those functionalities.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第9章*](B20997_09.xhtml#_idTextAnchor446)*，后端视图*中，您看到了如何使用后端提供的现有功能。在这里，我们将探讨如何扩展和定制这些功能。
- en: The `web` module contains everything related to the user interface in Odoo.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: '`web`模块包含与Odoo用户界面相关的所有内容。'
- en: All of the code in this chapter will depend on the `web` module. As you know,
    Odoo has two different editions (Enterprise and Community).
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的所有代码都将依赖于`web`模块。如您所知，Odoo有两个不同的版本（企业版和社区版）。
- en: The Community version uses the `web` module for user interfaces, while the Enterprise
    version uses an extended version of the Community `web` module, which is the `web_enterprise`
    module.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 社区版本使用`web`模块进行用户界面，而企业版本使用社区`web`模块的扩展版本，即`web_enterprise`模块。
- en: The Enterprise version provides more features than the Community version, including
    mobile compatibility, searchable menus, and material design. We’ll work on the
    Community version here. Don’t worry—the modules developed in Community work perfectly
    in Enterprise because, internally, `web_enterprise` depends on the Community `web`
    module and just adds some features to it.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 企业版本提供的功能比社区版本更多，包括移动兼容性、可搜索菜单和材料设计。在这里，我们将使用社区版本。不用担心——在社区版中开发的模块在企业版中也能完美运行，因为内部`web_enterprise`依赖于社区`web`模块，并为其添加了一些功能。
- en: Important information
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Odoo 17 is a bit different for the backend web client compared to other Odoo
    versions. It contains two different frameworks to maintain the GUI of the Odoo
    backend. The first one is the widget-based legacy framework, and the second one
    is the component-based modern framework called the **Odoo Web Library** (**OWL**).
    OWL is the new UI framework introduced in Odoo v16\. Both use QWeb templates for
    structure, but there are significant changes in the syntax and the way those frameworks
    work.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 与其他Odoo版本相比，Odoo 17的后端Web客户端略有不同。它包含两个不同的框架来维护Odoo后端的GUI。第一个是基于小部件的遗留框架，第二个是称为**Odoo
    Web Library**（**OWL**）的现代基于组件的框架。OWL是Odoo v16中引入的新UI框架。两者都使用QWeb模板进行结构，但在语法和这些框架的工作方式上都有显著的变化。
- en: Although Odoo 17 has a new framework OWL, Odoo does not use this new framework
    everywhere. Most of the web client is still written with the old widget-based
    framework. In this chapter, we will see how to customize the web client using
    a widget-based framework. In the next chapter, we will look at the OWL framework.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管Odoo 17有一个新的框架OWL，但Odoo并没有在所有地方使用这个新框架。大部分Web客户端仍然使用旧的基于小部件的框架。在本章中，我们将看到如何使用基于小部件的框架来定制Web客户端。在下一章中，我们将探讨OWL框架。
- en: In this chapter, you will learn how to create new field widgets to get input
    from users. We will also be creating a new view from scratch. After reading this
    chapter, you will be able to create your own UI elements in the Odoo backend.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何创建新的字段小部件以获取用户的输入。我们还将从头创建一个新的视图。阅读本章后，您将能够在Odoo后端创建自己的UI元素。
- en: Note
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Odoo’s user interface heavily depends on JavaScript. Throughout this chapter,
    we will assume you have a basic knowledge of JavaScript, jQuery, and SCSS.
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo的用户界面高度依赖于JavaScript。在本章中，我们将假设您具备JavaScript、jQuery和SCSS的基本知识。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下菜谱：
- en: Creating custom widgets
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建自定义小部件
- en: Using client-side QWeb templates
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用客户端QWeb模板
- en: Making RPC calls to the server
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 向服务器发起RPC调用
- en: Creating a new view
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建新视图
- en: Debugging your client-side code
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 调试客户端代码
- en: Improving onboarding with tours
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 通过导游改进入职体验
- en: Mobile app JavaScript
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 移动应用JavaScript
- en: Technical requirements
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The technical requirement for this chapter is the online Odoo platform.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的技术要求是在线Odoo平台。
- en: All the code used in this chapter can be downloaded from the GitHub repository
    at [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter15)
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有代码都可以从GitHub仓库[https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter15](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter15)下载。
- en: Creating custom widgets
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建自定义小部件
- en: As you saw in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446)*, Backend Views*,
    we can use widgets to display certain data in different formats. For example,
    we used `widget='image'` to display a binary field as an image. To demonstrate
    how to create your own widget, we’ll write one widget that lets the user choose
    an integer field, but we will display it differently. Instead of an input box,
    we will display a color picker so that we can select a color number. Here, each
    number will be mapped to its related color.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 正如你在[*第 9 章*](B20997_09.xhtml#_idTextAnchor446)*，后端视图*中看到的，我们可以使用小部件以不同的格式显示某些数据。例如，我们使用了`widget='image'`将二进制字段显示为图像。为了演示如何创建自己的小部件，我们将编写一个小部件，允许用户选择一个整数字段，但我们将以不同的方式显示它。而不是输入框，我们将显示一个颜色选择器，以便我们可以选择一个颜色数字。在这里，每个数字都将映射到其相关的颜色。
- en: Getting ready
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the `my_hostel` module with basic fields and
    views. You will find the basic `my_hostel` module in the `Chapter15/00_initial_module`
    directory in the GitHub repository.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用具有基本字段和视图的`my_hostel`模块。你将在GitHub仓库的`Chapter15/00_initial_module`目录中找到基本的`my_hostel`模块。
- en: How to do it…
  id: totrans-29
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: We’ll add a JavaScript file that contains our widget’s logic, an XML file that
    contains design logic, and an SCSS file to do some styling. Then, we will add
    one integer field to the books form to use our new widget.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将添加一个包含我们小部件逻辑的JavaScript文件，一个包含设计逻辑的XML文件，以及一个用于一些样式的SCSS文件。然后，我们将向图书表单添加一个整数字段以使用我们新的小部件。
- en: 'Follow these steps to add a new field widget:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加新的字段小部件：
- en: 'This widget can be written with a very small amount of JavaScript. Let’s create
    a file called `static/src/js/field_widget.js` with this:'
  id: totrans-32
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 这个小部件可以用很少的JavaScript编写。让我们创建一个名为`static/src/js/field_widget.js`的文件，如下所示：
- en: '[PRE0]'
  id: totrans-33
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Create your widget by extending `Component`:'
  id: totrans-34
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过扩展`Component`创建你的小部件：
- en: '[PRE1]'
  id: totrans-35
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Capture the JavaScript color widget code:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 捕获JavaScript颜色小部件代码：
- en: '[PRE2]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Set the `template` and the supported field types for the widget:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 设置小部件的`template`和支持的字段类型：
- en: '[PRE3]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'In the same file, register the component to the `fields` registry:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在同一文件中，将组件注册到`fields`注册表：
- en: '[PRE4]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add QWeb template design code in `static/src/xml/field_widget.xml`:'
  id: totrans-42
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`static/src/xml/field_widget.xml`中添加QWeb模板设计代码：
- en: '[PRE5]'
  id: totrans-43
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Add SCSS in `static/src/scss/field_widget.scss`:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`static/src/scss/field_widget.scss`中添加SCSS：
- en: '[PRE6]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'Register files in the manifest file:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在清单文件中注册文件：
- en: '[PRE7]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Then, add the `Category` integer field to the `hostel.room` model:'
  id: totrans-48
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`Category`整数字段添加到`hostel.room`模型：
- en: '[PRE8]'
  id: totrans-49
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Add the category field to the hostel form view, and then add `widget="category_color"`:'
  id: totrans-50
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将类别字段添加到宿舍表单视图，然后添加`widget="category_color"`：
- en: '[PRE9]'
  id: totrans-51
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Update the module to apply the changes. After the update, open the hostel form
    view and you will see the category color picker, as shown in the following screenshot:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模块以应用更改。更新后，打开宿舍表单视图，你将看到类别颜色选择器，如下面的截图所示：
- en: "![Figure 15.1 – How the custom widget is displ\uFEFFayed](img/B20997_15_1.jpg)"
  id: totrans-53
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.1 – 自定义小部件的显示方式](img/B20997_15_1.jpg)'
- en: Figure 15.1 – How the custom widget is displayed
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.1 – 自定义小部件的显示方式
- en: How it works…
  id: totrans-55
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *step 1*, we imported the `Component` and registry.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 1*中，我们导入了`Component`和注册表。
- en: In *step 2*, we created a `CategColorField` by extending the `Component`. Through
    this, `CategColorField` will get all the properties and methods from the `Component`.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 2*中，我们通过扩展`Component`创建了一个`CategColorField`。通过这种方式，`CategColorField`将获得`Component`的所有属性和方法。
- en: In *step 3*, we inherited the `setup` method and set the value of the `this.totalColors`
    attribute. We will use this variable to decide on the number of color pills. We
    want to display six color pills, so we assigned `[1,2,3,4,5,6]`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 3*中，我们继承了`setup`方法并设置了`this.totalColors`属性的值。我们将使用这个变量来决定颜色药丸的数量。我们希望显示六个颜色药丸，因此我们分配了`[1,2,3,4,5,6]`。
- en: In *step 4*, we added the `clickPill` handler method to manage pill clicks.
    To set the field value, we used `this. props.update` method. This method is added
    from the `Component` class.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 4*中，我们添加了`clickPill`处理方法来管理药丸点击。为了设置字段值，我们使用了`this.props.update`方法。此方法是从`Component`类添加的。
- en: In *step 5*, we added a template name where we rendered the `CategColorField`
    design and set supported types.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 5*中，我们添加了一个模板名称，其中我们渲染了`CategColorField`设计并设置了支持类型。
- en: '`supportedTypes` has been used to decide which types of field are supported
    by this widget. In our case, we want to create a widget for integer fields.'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`supportedTypes`已被用于决定哪些字段类型由这个小部件支持。在我们的例子中，我们想要为整数字段创建一个小部件。'
- en: In *step 6*, after registering the component to the fields registry.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤 6*中，在将组件注册到字段注册表之后。
- en: Finally, we exported our `widget` class so that other add-ons can extend it
    or inherit from it. Then, we added a new integer field called category to the
    `hostel.room` model. We also added the same field to the form view with the `widget="category_color"`
    attribute. This will display our widget in the form instead of the default integer
    widget.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们导出了我们的`widget`类，以便其他插件可以扩展它或从它继承。然后，我们在`hostel.room`模型中添加了一个名为category的新整数字段。我们还添加了具有`widget="category_color"`属性的相同字段到表单视图中。这将显示我们的小部件而不是默认的整数字段。
- en: Using client-side QWeb templates
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用客户端QWeb模板
- en: Just as it’s a bad habit to programmatically create HTML code in JavaScript,
    you should only create minimal DOM elements in your client-side JavaScript code.
    Fortunately, there’s a templating engine available for the client side.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 就像在JavaScript中程序性地创建HTML代码是一个坏习惯一样，你应在客户端JavaScript代码中仅创建最小DOM元素。幸运的是，客户端有一个模板引擎可用。
- en: A client-side template engine is also available in Odoo. This template engine
    is known as **Qweb Templates** and is carried out completely in JavaScript code
    and rendered inside the browser.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo中也有一个客户端模板引擎。这个模板引擎被称为**Qweb模板**，完全在JavaScript代码中执行并在浏览器中渲染。
- en: Getting ready
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe
    and add `informationPanel` below the category color icon.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个配方，我们将使用之前配方中的`my_hostel`模块，并在类别颜色图标下方添加`informationPanel`。
- en: Using `renderToElement`, we render the category information element and set
    it on `informationPanel`.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`renderToElement`，我们渲染类别信息元素并将其设置在`informationPanel`上。
- en: How to do it...
  id: totrans-70
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'We need to add the QWeb definition to the manifest and change the JavaScript
    code so that we can use it. Perform the following steps to get started:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要将QWeb定义添加到清单中并更改JavaScript代码，以便我们可以使用它。按照以下步骤开始操作：
- en: 'Import `@web/core/utils/render` and extract the `renderToElement` reference
    to a variable, as shown in the following code:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入`@web/core/utils/render`并将`renderToElement`引用提取到变量中，如下面的代码所示：
- en: '[PRE10]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Add the template file to `static/src/xml/field_widget.xml`:'
  id: totrans-74
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将模板文件添加到`static/src/xml/field_widget.xml`：
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the mouseover function and, in this function, simply render the category
    information element using `renderToElement.render` and append the `categ` information
    element to `categInformationPanel`:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加鼠标悬停函数，在这个函数中，简单地使用`renderToElement.render`渲染类别信息元素，并将`categ`信息元素附加到`categInformationPanel`：
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Add SCSS in `static/src/scss/field_widget.scss` to set the category information
    style:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`static/src/scss/field_widget.scss`中添加SCSS以设置类别信息样式：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Register the QWeb file in your manifest:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在你的清单中注册QWeb文件：
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Restart the server to apply the changes. After the restart, open the hotel
    form view and you will see the category information panel, as shown in the following
    screenshot:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 重新启动服务器以应用更改。重启后，打开酒店表单视图，你将看到类别信息面板，如下面的截图所示：
- en: '![Figure 15.2 – Category information panel](img/B20997_15_2.jpg)'
  id: totrans-83
  prefs: []
  type: TYPE_IMG
  zh: '![图15.2 – 类别信息面板](img/B20997_15_2.jpg)'
- en: Figure 15.2 – Category information panel
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.2 – 类别信息面板
- en: 'When we hover over the category color icon:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们悬停在类别颜色图标上时：
- en: "![Figure 15.3 – Hovering over the category icon displays category infor\uFEFF\
    mation](img/B20997_15_3.jpg)"
  id: totrans-86
  prefs: []
  type: TYPE_IMG
  zh: '![图15.3 – 悬停在类别图标上显示类别信息](img/B20997_15_3.jpg)'
- en: Figure 15.3 – Hovering over the category icon displays category information
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.3 – 悬停在类别图标上显示类别信息
- en: How it works...
  id: totrans-88
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: As there is already a comprehensive discussion on the basics of QWeb in the
    *Creating or Modifying Templates – QWeb* recipe in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS Website Development*, we’ll focus on what is different here. First of all,
    you need to realize that we’re dealing with the JavaScript QWeb implementation,
    as opposed to the Python implementation on the server side. This means that you
    don’t have access to browsing records or the environment; you only have access
    to the parameters you have passed from the `renderToElement` function.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 由于在[*第14章*](B20997_14.xhtml#_idTextAnchor734)的“创建或修改模板 – QWeb”配方中已经对QWeb的基础进行了全面讨论，*CMS网站开发*，我们将关注这里的不同之处。首先，你需要意识到我们正在处理的是客户端的JavaScript
    QWeb实现，而不是服务器端的Python实现。这意味着你无法访问浏览记录或环境；你只能访问从`renderToElement`函数传递的参数。
- en: In our case, we have passed the current object via the `widget` key. This means
    that you should have all the intelligence in the widget’s JavaScript code and
    have your template only access properties, or possibly functions. Given that we
    can access all the available properties on the widget, we can simply check the
    value in the template by checking the hover category color property.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的案例中，我们通过 `widget` 键传递了当前对象。这意味着你应该在组件的 JavaScript 代码中拥有所有智能，并且你的模板只能访问属性，或者可能是函数。鉴于我们可以访问组件上的所有可用属性，我们可以在模板中通过检查悬停类别颜色属性来简单地检查值。
- en: As client-side QWeb has nothing to do with QWeb views, there’s a different mechanism
    to make those templates known to the web client—add them via the QWeb key to your
    add-on’s manifest in a list of filenames relative to the add-on’s root.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 由于客户端 QWeb 与 QWeb 视图无关，因此有一个不同的机制使这些模板为网络客户端所知——通过将它们添加到你的附加组件的清单中，作为相对于附加组件根目录的文件名列表。
- en: There’s more…
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: 'The reason for going to the effort of using QWeb here was extensibility. If,
    for example, we want to add info icons to our widget from another module, we’ll
    use the following code to have an icon in each pill:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里使用 QWeb 的原因是为了扩展性。例如，如果我们想从另一个模块向我们的组件添加信息图标，我们将使用以下代码在每个药丸中添加一个图标：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: "![Figure 15.4 – Info icon on the category informati\uFEFFon panel](img/B20997_15_4.jpg)"
  id: totrans-95
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.4 – 类别信息面板上的信息图标](img/B20997_15_4.jpg)'
- en: Figure 15.4 – Info icon on the category information panel
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.4 – 类别信息面板上的信息图标
- en: Note
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: 'If you want to learn more about the QWeb templates, refer to the following
    points:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于 QWeb 模板的信息，请参考以下要点：
- en: '- The client-side QWeb engine has less convenient error messages and handling
    than other parts of Odoo. A small error often means that nothing happens, and
    it’s hard for beginners to continue from there.'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '- 客户端 QWeb 引擎的错误消息和处理方式比 Odoo 的其他部分不太方便。一个小错误通常意味着什么都不会发生，对于初学者来说很难继续下去。'
- en: '- Fortunately, there are some debug statements for client-side QWeb templates
    that will be described later in this chapter in the *Debugging your client-side*
    *code* recipe.'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: '- 幸运的是，对于客户端 QWeb 模板有一些调试语句，将在本章后面的 *调试客户端代码* 菜谱中描述。'
- en: Making RPC calls to the server
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 向服务器发起 RPC 调用
- en: Sooner or later, your widget will need to look up some data from the server.
    In this recipe, we will add a category booked panel to the category information
    panel. When the user hovers their cursor over the category color pill element,
    the booked panel will show the number of booked rooms related to that category
    color. We will make an RPC call to the server to fetch a book count of the data
    associated with that particular category.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 迟早你的组件将需要从服务器查找一些数据。在这个菜谱中，我们将向类别信息面板添加一个已预订面板。当用户将光标悬停在类别颜色药丸元素上时，预订面板将显示与该类别颜色相关的已预订房间数量。我们将向服务器发起
    RPC 调用来获取与该特定类别关联的数据的预订计数。
- en: Getting ready
  id: totrans-103
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用之前菜谱中的 `my_hostel` 模块。
- en: How to do it…
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作…
- en: 'Follow these steps to make an RPC call to the server and display the result
    in a `colorPreviewPanel`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤向服务器发起 RPC 调用并在 `colorPreviewPanel` 中显示结果：
- en: 'Import `@odoo/owl` and extract the `onWillStart,onWillUpdateProps` reference
    to a variable, as shown in the following code:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 导入 `@odoo/owl` 并将 `onWillStart,onWillUpdateProps` 引用提取到一个变量中，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Add the `onWillStart` method to the `setup` method and call our custom `load``ColorData`
    method:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `onWillStart` 方法添加到 `setup` 方法中并调用我们的自定义 `loadColorData` 方法：
- en: '[PRE17]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Add the `loadCategInformation` method and set `categInfoData` in the RPC call:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加 `loadCategInformation` 方法并在 RPC 调用中设置 `categInfoData`：
- en: '[PRE18]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Update `CategoryInformation` template and add the count data:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 更新 `CategoryInformation` 模板并添加计数数据：
- en: '[PRE19]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Update the module to apply the changes. After the update, you will see a count
    of category information, as shown in the following screenshot:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模块以应用更改。更新后，你将看到类别信息的计数，如下面的截图所示：
- en: "![Figure 15.5 – Data \uFEFFFetch Using RPC](img/B20997_15_5.jpg)"
  id: totrans-116
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.5 – 使用 RPC 获取数据](img/B20997_15_5.jpg)'
- en: Figure 15.5 – Data Fetch Using RPC
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.5 – 使用 RPC 获取数据
- en: How it works…
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: The `onWillStart` hook will be called just before the component is rendered
    for the first time. It will be useful if we need to do some actions before the
    component is rendered to the view, such as loading some initial data.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: '`onWillStart` 钩子将在组件第一次渲染之前被调用。如果我们需要在组件渲染到视图之前执行一些操作，例如加载一些初始数据，这将非常有用。'
- en: '`onWillUpdateProps` is also an asynchronous hook that is called whenever an
    update is made to a related component. The reactive nature of the OWL framework
    can be maintained using this amazing hook.'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: '`onWillUpdateProps` 也是一个异步钩子，每当对相关组件进行更新时都会被调用。使用这个惊人的钩子可以保持 OWL 框架的响应式特性。'
- en: When dealing with data access, we rely on the `_rpc` function provided by the
    `ORM``search`, `read`, `write`, or, in this case, `read_group`.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在处理数据访问时，我们依赖于由 `ORM` 提供的 `_rpc` 函数，用于 `search`、`read`、`write` 或在这种情况下，`read_group`。
- en: In *step 1*, we made an RPC call and invoked the `read_group` method on the
    current model, which is `hostel.room` in our case. We grouped data based on the
    `category` field so that the RPC call will return book data that were grouped
    by `category` and add an aggregate in the `category_count` key. We also mapped
    the `category_count` and `category` index in the `categoryInfo` so that we could
    use it in the QWeb template.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们进行了 RPC 调用，并在当前模型上调用了 `read_group` 方法，在我们的例子中是 `hostel.room`。我们根据
    `category` 字段对数据进行分组，以便 RPC 调用将返回按 `category` 分组的书籍数据，并在 `category_count` 键中添加一个聚合。我们还映射了
    `category_count` 和 `category` 索引在 `categoryInfo` 中，以便我们可以在 QWeb 模板中使用它。
- en: '*Step 2* is nothing special. We just initialized the bootstrap tooltip.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 2* 没有什么特别之处。我们只是初始化了 bootstrap 工具提示。'
- en: In *step 3*, we used `categoryInfo` to set the attributes that are needed to
    display the category information. In the `loadCategInformation` method, we assigned
    a color map via `this.categoryInfo` so that you can access them in the QWeb template
    via `widget.categoryInfo`. This is because we passed the widget reference; this
    is the `renderToElement` method.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 3* 中，我们使用了 `categoryInfo` 来设置显示分类信息所需的属性。在 `loadCategInformation` 方法中，我们通过
    `this.categoryInfo` 分配了一个颜色映射，这样您就可以通过 `widget.categoryInfo` 在 QWeb 模板中访问它们。这是因为我们传递了小部件引用；这是
    `renderToElement` 方法。
- en: See also
  id: totrans-125
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: 'Odoo’s RPC returns JavaScript’s native `Promise` object. You will get the requested
    data once the `Promise` is resolved. You can learn more about `Promise` here:
    [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 的 RPC 返回 JavaScript 的原生 `Promise` 对象。一旦 `Promise` 解决，您将获得请求的数据。您可以在以下位置了解更多关于
    `Promise` 的信息：[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)
- en: Creating a new view
  id: totrans-127
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建新视图
- en: As you saw in [*Chapter 9*](B20997_09.xhtml#_idTextAnchor446), *Backend Views*,
    there are different kinds of views, such as form, list, and kanban. In this recipe,
    we will create a new view. This view will display the list of rooms, along with
    their students.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 正如您在 [*第 9 章*](B20997_09.xhtml#_idTextAnchor446) 中所看到的，*后端视图*，有不同类型的视图，例如表单、列表和看板。在本菜谱中，我们将创建一个新视图。此视图将显示房间列表，以及他们的学生。
- en: Getting ready
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe.
    Note that views are very complex structures, and each view has a different purpose
    and implementation. The purpose of this recipe is to make you aware of the `MVC`
    pattern view and how to create simple views. In this recipe, we will create a
    view called `m2m_group`, the purpose of which is to display records in groups.
    To divide records into different groups, the view will use the `many2x` field
    data. In the `my_hostel` module, we have the `room_id` field. Here, we will group
    students based on room and display them in cards.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这个菜谱，我们将使用前一个菜谱中的 `my_hostel` 模块。请注意，视图是非常复杂的结构，每个视图都有不同的目的和实现。本菜谱的目的是让您了解
    `MVC` 模式视图以及如何创建简单的视图。在本菜谱中，我们将创建一个名为 `m2m_group` 的视图，其目的是显示分组记录。为了将记录分成不同的组，视图将使用
    `many2x` 字段数据。在 `my_hostel` 模块中，我们有 `room_id` 字段。在这里，我们将根据房间分组学生，并在卡片中显示他们。
- en: In addition, we will add a new button to the control panel. With the help of
    this button, you will be able to add a new student record. We will also add a
    button to the room’s card so that we can redirect users to another view.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，我们将在控制面板中添加一个新按钮。借助此按钮，您将能够添加新的学生记录。我们还将向房间的卡片中添加一个按钮，以便我们可以将用户重定向到另一个视图。
- en: How to do it…
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点…
- en: 'Follow these steps to add a new view called `m2m_group`:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤添加一个名为 `m2m_group` 的新视图：
- en: 'Add a new view type in `ir.ui.view`:'
  id: totrans-134
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ir.ui.view` 中添加一个新的视图类型：
- en: '[PRE20]'
  id: totrans-135
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Add a new view mode in `ir.actions.act_window.view`:'
  id: totrans-136
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `ir.actions.act_window.view` 中添加一个新的视图模式：
- en: '[PRE21]'
  id: totrans-137
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Add a new method by inheriting from the base model. This method will be called
    from the JavaScript model (see *step 4* for more details):'
  id: totrans-138
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过从基模型继承来添加一个新方法。此方法将从 JavaScript 模型中调用（有关更多详细信息，请参阅 *步骤 4*）：
- en: '[PRE22]'
  id: totrans-139
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Add a new file called `/static/src/js/m2m_group_model.js` and add the following
    content to it:'
  id: totrans-140
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`/static/src/js/m2m_group_model.js`的新文件，并将以下内容添加到其中：
- en: '[PRE23]'
  id: totrans-141
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Add a new file called `/static/src/js/m2m_group_controller.js` and add the
    following content to it:'
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`/static/src/js/m2m_group_controller.js`的新文件，并将以下内容添加到其中：
- en: '[PRE24]'
  id: totrans-143
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Add a new file called `/static/src/js/m2m_group_renderer.js` and add the following
    content to it:'
  id: totrans-144
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`/static/src/js/m2m_group_renderer.js`的新文件，并将以下内容添加到其中：
- en: '[PRE25]'
  id: totrans-145
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Add a new file called `/static/src/js/m2m_group_arch_parser.js` and add the
    following content to it:'
  id: totrans-146
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`/static/src/js/m2m_group_arch_parser.js`的新文件，并将以下内容添加到其中：
- en: '[PRE26]'
  id: totrans-147
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'Add a new file called `/static/src/js/m2m_group_view.js` and add the following
    content to it:'
  id: totrans-148
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个名为`/static/src/js/m2m_group_view.js`的新文件，并将以下内容添加到其中：
- en: '[PRE27]'
  id: totrans-149
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Add the QWeb template for the view to the `/``static/src/xml/m2m_group_controller.xml`
    file:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视图的QWeb模板添加到`/static/src/xml/m2m_group_controller.xml`文件中：
- en: '[PRE28]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Add the QWeb template for the view to the `/``static/src/xml/m2m_group_renderer.xml`
    file:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视图的QWeb模板添加到`/static/src/xml/m2m_group_renderer.xml`文件中：
- en: '[PRE29]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Add the QWeb template for the view to the `/``static/src/xml/m2m_group_view.xml`
    file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将视图的QWeb模板添加到`/static/src/xml/m2m_group_view.xml`文件中：
- en: '[PRE30]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Add all of the JavaScript and XML files to the backend assets:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将所有JavaScript和XML文件添加到后端资产中：
- en: '[PRE31]'
  id: totrans-157
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Finally, add our new view for the `hostel.student` model:'
  id: totrans-158
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，添加我们为`hostel.student`模型的新视图：
- en: '[PRE32]'
  id: totrans-159
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Add `m2m_group` to the action:'
  id: totrans-160
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`m2m_group`添加到操作中：
- en: '[PRE33]'
  id: totrans-161
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Update the `my_hostel` module to open the **Students** view, and then, from
    the view switcher, open the new view that we just added. This will look as follows:'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 更新`my_hostel`模块以打开**学生**视图，然后从视图切换器打开我们刚刚添加的新视图。这看起来如下所示：
- en: '![Figure 15.6 – Many2many group view](img/B20997_15_6.jpg)'
  id: totrans-163
  prefs: []
  type: TYPE_IMG
  zh: '![图15.6 – 多对多分组视图](img/B20997_15_6.jpg)'
- en: Figure 15.6 – Many2many group view
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.6 – 多对多分组视图
- en: "![Figur\uFEFFe 15.7 – Many2many group view](img/B20997_15_7.jpg)"
  id: totrans-165
  prefs: []
  type: TYPE_IMG
  zh: '![图15.7 – 多对多分组视图](img/B20997_15_7.jpg)'
- en: Figure 15.7 – Many2many group view
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.7 – 多对多分组视图
- en: Important information
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Odoo views are very easy to use and are very flexible. However, it is often
    the case that easy and flexible things have complex implementations under the
    hood.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo视图非常易于使用，并且非常灵活。然而，通常情况下，简单且灵活的事情在底层有复杂的实现。
- en: 'This is true of Odoo JavaScript views: they are easy to use, but complex to
    implement. They consist of lots of components, including the model, renderer,
    controller, view, and QWeb template. In the next section, we have added all of
    the required components for the views and have also used a new view for the `my_hostel`
    model. If you don’t want to add everything manually, grab a module from the example
    file in this book’s GitHub repository.'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这适用于Odoo JavaScript视图：它们易于使用，但实现起来复杂。它们由许多组件组成，包括模型、渲染器、控制器、视图和QWeb模板。在下一节中，我们已添加所有必需的组件，并为`my_hostel`模型添加了一个新视图。如果您不想手动添加所有内容，可以从本书GitHub仓库中的示例文件中获取模块。
- en: How it works…
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: In *steps 1* and *2*, we registered a new type of view, called `m2m_group`,
    in `ir.ui.view` and `ir.actions.act_window.view`.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤1*和*步骤2*中，我们在`ir.ui.view`和`ir.actions.act_window.view`中注册了一个新的视图类型，称为`m2m_group`。
- en: In *step 3*, we added the `get_m2m_group_data` method to the base. Adding this
    method to the base will make that method available in every model. This method
    will be called via an RPC call from the JavaScript view. The view will pass two
    parameters—the `domain` and `m2m_field`. In the `domain` argument, the value of
    the domain will be the domain generated with a combination of the search view
    domain and the action domain. `m2m_field` is the field name by which we want to
    group the records. This field will be set on the view definition.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤3*中，我们将`get_m2m_group_data`方法添加到基础中。将此方法添加到基础中将在每个模型中使该方法可用。此方法将通过JavaScript视图的RPC调用进行调用。视图将传递两个参数——`domain`和`m2m_field`。在`domain`参数中，域的值将是通过搜索视图域和操作域的组合生成的域。`m2m_field`是我们想要按其分组记录的字段名称。此字段将在视图定义中设置。
- en: 'In the next few steps, we added the JavaScript files that are required to new
    the view. An Odoo JavaScript view consists of the view, model, renderer, and controller.
    The word view has historical meaning in the Odoo code base, so **model, view,
    controller** (**MVC**) becomes **model, renderer, controller** (**MRC**) in Odoo.
    In general, the view sets up the model, renderer, and controller, and sets the
    MVC hierarchy so that it looks similar to the following:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 在接下来的几个步骤中，我们添加了创建视图所需的JavaScript文件。Odoo JavaScript视图由视图、模型、渲染器和控制器组成。在Odoo代码库中，视图一词具有历史意义，因此**模型、视图、控制器**（**MVC**）在Odoo中变为**模型、渲染器、控制器**（**MRC**）。一般来说，视图设置模型、渲染器和控制器，并设置MVC层次结构，使其看起来类似于以下内容：
- en: '![Figure 15.8 – View components](img/B20997_15_8.jpg)'
  id: totrans-174
  prefs: []
  type: TYPE_IMG
  zh: '![图15.8 – 视图组件](img/B20997_15_8.jpg)'
- en: Figure 15.8 – View components
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.8 – 视图组件
- en: 'Its job is to get a set of fields, arch, context, and some other parameters,
    then to construct a controller/renderer/model triplet:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 其任务是获取一组字段、架构、上下文和一些其他参数，然后构建一个控制器/渲染器/模型三元组：
- en: The view’s role is to properly set up each piece of the MVC pattern with the
    correct information. Usually, it has to process the arch string and extract the
    data necessary for each other parts of the view.
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 视图的角色是正确设置MVC模式中的每一部分，并使用正确的信息。通常，它必须处理架构字符串并提取视图其他部分所需的数据。
- en: Note that the view is a class, not a widget. Once its job has been done, it
    can be discarded.
  id: totrans-178
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 注意，视图是一个类，而不是小部件。一旦完成其任务，它就可以被丢弃。
- en: 'The renderer has one job: representing the data being viewed in a DOM element.
    Each view can render the data in a different way. Also, it should listen to appropriate
    user actions and notify its parent (the controller) if necessary. The renderer
    is the V in the MVC pattern.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 渲染器只有一个任务：在DOM元素中表示正在查看的数据。每个视图都可以以不同的方式渲染数据。此外，它应该监听适当的用户操作，并在必要时通知其父级（控制器）。渲染器是MVC模式中的V。
- en: 'The model: its job is to fetch and hold the state of the view. Usually, it
    represents in some way a set of records in the database. The model is the owner
    of the business data. It is the M in the MVC pattern.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 模型：其任务是获取并保持视图的状态。通常，它以某种方式表示数据库中的一组记录。模型是业务数据的所有者。它是MVC模式中的M。
- en: 'The controller: Its job is to coordinate the renderer and the model. Also,
    it is the main entry point for the rest of the web client. For example, when the
    user changes something in the search view, the `update` method of the controller
    will be called with the appropriate information. It is the C in the MVC pattern.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 控制器：其任务是协调渲染器和模型。它也是整个Web客户端的主要入口点。例如，当用户在搜索视图中更改某些内容时，控制器的`update`方法将被调用，并带有适当的信息。它是MVC模式中的C。
- en: Note
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The JavaScript code for the views has been designed to be usable outside of
    the context of a view manager/action manager. It could be used in a client action,
    or it could be displayed on the public website (with some work on the assets).
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 视图的JavaScript代码被设计成可以在视图管理器/操作管理器之外使用。它可以用于客户端操作，或者可以在公共网站上显示（对资产进行一些工作）。
- en: In *step 8*, we added JavaScript and XML files to the assets.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤8*中，我们将JavaScript和XML文件添加到资产中。
- en: Finally, in the last two steps, we added a view definition for the `hostel.student`
    model.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在最后两个步骤中，我们为`hostel.student`模型添加了一个视图定义。
- en: In *step 9*, we used the `<m2m_group>` tag for the view, and we also passed
    the `m2m_field` attribute as the option. This will be passed to the model to fetch
    the data from the server.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 在*步骤9*中，我们为视图使用了`<m2m_group>`标签，并且还传递了`m2m_field`属性作为选项。这将传递给模型以从服务器获取数据。
- en: Debugging your client-side code
  id: totrans-187
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 客户端代码调试
- en: This book contains a whole chapter for debugging server-side code, [*Chapter
    7*](B20997_07.xhtml#_idTextAnchor363), *Debugging Modules*. For the client-side
    part, you’ll get a kick-start in this recipe.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 本书包含一个专门用于调试服务器端代码的章节，[*第7章*](B20997_07.xhtml#_idTextAnchor363)，*调试模块*。对于客户端部分，你将在这个菜谱中获得快速入门。
- en: Getting ready
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: This recipe doesn’t rely on specific code, but if you want to be able to reproduce
    exactly what’s going on, grab the previous recipe’s code.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这个菜谱不依赖于特定的代码，但如果你想能够精确地重现正在发生的事情，请获取上一个菜谱的代码。
- en: How to do it...
  id: totrans-191
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'What makes debugging client-side scripts difficult is that the web client relies
    heavily on jQuery’s asynchronous events. Given that breakpoints halt the execution,
    there is a high chance that a bug caused by timing issues will not occur when
    debugging. We’ll discuss some strategies for this later:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 客户端脚本调试困难的原因在于，Web客户端严重依赖于jQuery的异步事件。鉴于断点会停止执行，因此由于时间问题导致的错误在调试时可能不会发生。我们稍后会讨论一些策略：
- en: For the client-side debugging, you will need to activate debug mode with the
    assets. If you don’t know how to activate debug mode with the assets, read the
    *Activating the Odoo developer tools* recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo* *Development Environment*.
  id: totrans-193
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于客户端调试，您需要通过资产激活调试模式。如果您不知道如何通过资产激活调试模式，请阅读[*第1章*](B20997_01.xhtml#_idTextAnchor020)中的*激活Odoo开发者工具*配方，*安装Odoo开发环境*。
- en: 'In the JavaScript function you’re interested in, call `debugger`:'
  id: totrans-194
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在您感兴趣的JavaScript函数中调用`debugger`：
- en: '[PRE34]'
  id: totrans-195
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'If you have timing problems, log in to the console through a JavaScript function:'
  id: totrans-196
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您遇到时间同步问题，请通过JavaScript函数登录控制台：
- en: '[PRE35]'
  id: totrans-197
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'If you want to debug during template rendering, call the debugger from QWeb:'
  id: totrans-198
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果您想在模板渲染期间进行调试，请从QWeb调用调试器：
- en: '[PRE36]'
  id: totrans-199
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'You can also have QWeb log in to the console, as follows:'
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 您还可以让QWeb登录控制台，如下所示：
- en: '[PRE37]'
  id: totrans-201
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'All of this relies on your browser offering the appropriate functionality for
    debugging. While all major browsers do that, we’ll only look at Chromium here,
    for demonstration purposes. To be able to use the debug tools, open them by clicking
    on the top-right menu button and selecting **More tools** | **Developer tools**:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些都依赖于您的浏览器提供适当的调试功能。虽然所有主流浏览器都这样做，但在这里我们只关注Chromium，用于演示目的。要使用调试工具，请通过点击右上角的菜单按钮并选择**更多工具**
    | **开发者工具**来打开它们：
- en: "![Figure 15.9 –\uFEFF Opening Developer Tools in Chrome](img/B20997_15_9.jpg)"
  id: totrans-203
  prefs: []
  type: TYPE_IMG
  zh: '![图15.9 – 在Chrome中打开开发者工具](img/B20997_15_9.jpg)'
- en: Figure 15.9 – Opening Developer Tools in Chrome
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.9 – 在Chrome中打开开发者工具
- en: How it works…
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的…
- en: 'When the debugger is open, you should see something similar to the following
    screenshot:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 当调试器打开时，您应该看到以下截图类似的内容：
- en: '![Figure 15.10 – Opening Developer Tools in Chrome](img/B20997_15_10.jpg)'
  id: totrans-207
  prefs: []
  type: TYPE_IMG
  zh: '![图15.10 – 在Chrome中打开开发者工具](img/B20997_15_10.jpg)'
- en: Figure 15.10 – Opening Developer Tools in Chrome
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.10 – 在Chrome中打开开发者工具
- en: Here, you have access to a lot of different tools in separate tabs. The currently
    active tab in the preceding screenshot is the JavaScript debugger, and we have
    set a breakpoint in line 31 by clicking on the line number. Every time our widget
    fetches the list of users, the execution should stop at this line, and the debugger
    will allow you to inspect variables or change their values. Within the watch list
    to the right, you can also call functions to try out their effects without having
    to continuously save your script file and reload the page.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，您可以通过单独的标签页访问许多不同的工具。前一个截图中的当前活动标签是JavaScript调试器，我们通过点击行号在第31行设置了断点。每次我们的小部件获取用户列表时，执行应该停止在此行，调试器将允许您检查变量或更改它们的值。在右侧的监视列表中，您还可以调用函数来尝试它们的效果，而无需不断保存您的脚本文件并重新加载页面。
- en: The debugger statements we described earlier will behave the same as soon as
    you have the developer tools open. The execution will then stop, and the browser
    will switch to the **Sources** tab, with the file in question opened and the line
    with the debugger statement highlighted.
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 我们之前描述的调试语句在您打开开发者工具后表现相同。然后执行将停止，浏览器将切换到**源**标签页，打开有问题的文件，并突出显示带有调试语句的行。
- en: The two logging possibilities from earlier will end up on the **Console** tab.
    This is the first tab you should inspect in case of problems in any case because,
    if some JavaScript code doesn’t load at all because of syntax errors or similar
    fundamental problems, you’ll see an error message there explaining what’s going
    on.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 之前提到的两种日志记录方法最终会出现在**控制台**标签页上。在任何情况下，如果出现问题，您都应该首先检查这个标签页，因为如果由于语法错误或类似的基本问题而导致某些JavaScript代码根本无法加载，您将在这里看到一个错误消息，解释正在发生的事情。
- en: There’s more…
  id: totrans-212
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多…
- en: Use the **Elements** tab to inspect the DOM representation of the page the browser
    currently displays. This will prove helpful when it comes to familiarizing yourself
    with the HTML code the existing widgets produce, and it will also allow you to
    play with classes and CSS attributes, in general. This is a great resource for
    testing layout changes.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 使用**元素**选项卡检查浏览器当前显示的页面的DOM表示。这有助于您熟悉现有小部件生成的HTML代码，并允许您在一般上玩转类和CSS属性。这是一个测试布局更改的绝佳资源。
- en: The **Network** tab gives you an overview of which requests the current page
    made and how long it took. This is helpful when it comes to debugging slow page
    loads as, in the **Network** tab, you will usually find the details of the requests.
    If you select a request, you can inspect the payload that was passed to the server
    and the result returned, which helps you to figure out the reason for unexpected
    behavior on the client side. You’ll also see the status codes of requests made—for
    example, 404—in case a resource can’t be found because you misspelled a filename,
    for instance.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: '**网络**选项卡提供了当前页面发出的请求的概述以及它们花费的时间。当调试缓慢的页面加载时，这很有帮助，因为在**网络**选项卡中，您通常会找到请求的详细信息。如果您选择一个请求，您可以检查传递给服务器的有效载荷和返回的结果，这有助于您找出客户端意外行为的原因。您还会看到发出的请求的状态代码，例如，如果因为拼写错误找不到资源（例如文件名），则会显示404。'
- en: Improving onboarding with tours
  id: totrans-215
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用游览改进入门
- en: After developing a large application, it is crucial to explain software flows
    to the end users. The Odoo framework includes a built-in tour manager. With this
    tour manager, you can guide an end user through learning specific flows. In this
    recipe, we will create a tour so that we can create a book in the library.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 在开发大型应用程序后，向最终用户解释软件流程至关重要。Odoo框架包括一个内置的游览管理器。使用这个游览管理器，您可以引导最终用户学习特定的流程。在这个菜谱中，我们将创建一个游览，以便我们可以在图书馆中创建一本书。
- en: Getting ready
  id: totrans-217
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the `my_hostel` module from the previous recipe. Tours are
    only displayed in the database without demo data, so if you are using a database
    with demo data, create a new database without demo data for this recipe.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前菜谱中的`my_hostel`模块。在没有演示数据的数据库中，游览仅在数据库中显示，所以如果您使用的是带有演示数据的数据库，请为此菜谱创建一个新的没有演示数据的数据库。
- en: How to do it…
  id: totrans-219
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To add a tour to a hostel, follow these steps:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 要向旅舍添加游览，请遵循以下步骤：
- en: 'Add a new `/static/src/js/my_hostel_tour.js` file with the following code:'
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加一个新的`/static/src/js/my_hostel_tour.js`文件，包含以下代码：
- en: '[PRE38]'
  id: totrans-222
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Add the tour JavaScript file in the backend assets:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在后端资源中添加游览JavaScript文件：
- en: '[PRE39]'
  id: totrans-224
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'Update the module and open the Odoo backend. At this point, you will see the
    tour, as shown in the following screenshot:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模块并打开Odoo后端。此时，您将看到游览，如下面的截图所示：
- en: Or you can click on debug icon and click on **Start Tour**.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，您可以点击调试图标并点击**开始游览**。
- en: '![Figure 15.11 – Tour step for user onboarding](img/B20997_15_11.jpg)'
  id: totrans-227
  prefs: []
  type: TYPE_IMG
  zh: '![图15.11 – 用户入门游览步骤](img/B20997_15_11.jpg)'
- en: Figure 15.11 – Tour step for user onboarding
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.11 – 用户入门游览步骤
- en: It displays below the **Tours** popup.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 它显示在**游览**弹出窗口下方。
- en: '![Figure 15.12 – Tour step for user onboarding](img/B20997_15_12.jpg)'
  id: totrans-230
  prefs: []
  type: TYPE_IMG
  zh: '![图15.12 – 用户入门游览步骤](img/B20997_15_12.jpg)'
- en: Figure 15.12 – Tour step for user onboarding
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.12 – 用户入门游览步骤
- en: 'Click the start icon button to see the **Ready to lunch your hostel?** Tour
    content:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 点击开始图标按钮以查看**准备好启动您的旅舍了吗？**游览内容：
- en: '![Figure 15.13 – Tour step for user onboarding](img/B20997_15_13.jpg)'
  id: totrans-233
  prefs: []
  type: TYPE_IMG
  zh: '![图15.13 – 用户入门游览步骤](img/B20997_15_13.jpg)'
- en: Figure 15.13 – Tour step for user onboarding
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 图15.13 – 用户入门游览步骤
- en: How it works…
  id: totrans-235
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: The tour manager is available in the **web_tour.tours** category.
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 游览管理器在**web_tour.tours**类别中可用。
- en: In the first step, we imported `registry`. We can then added a new tour with
    `registry.category("web_tour.tours")`. We registered our tour with the `hostel_tour`
    name and passed the URL on which this tour should run.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 在第一步中，我们导入了`registry`。然后我们可以使用`registry.category("web_tour.tours")`添加一个新的游览。我们使用`hostel_tour`名称注册了我们的游览，并传递了该游览应运行的URL。
- en: The next parameter is a list of these tour stops. A tour step requires three
    values. The trigger is used to select the element on which the tour should be
    displayed. This is a JavaScript selector. We used the XML ID of the menu because
    it is available in the DOM.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个参数是这些游览步骤的列表。游览步骤需要三个值。触发器用于选择游览应显示的元素。这是一个JavaScript选择器。我们使用了菜单的XML ID，因为它在DOM中可用。
- en: The first step, `stepUtils.showAppsMenuItem()`, is the predefined step from
    the tour for the main menu. The next key is the content, and this is displayed
    when the user hovers over the tour drop. We used the `markup(_t())` function because
    we want to translate the string, while the position key is used to decide on the
    position of the tour drop. Possible values are top, right, left, or bottom.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步，`stepUtils.showAppsMenuItem()`，是主菜单的预定义步骤。下一个键是内容，当用户悬停在导游下拉菜单上时显示。我们使用了
    `markup(_t())` 函数，因为我们想翻译字符串，而位置键用于决定导游下拉菜单的位置。可能的值是 top（顶部）、right（右侧）、left（左侧）或
    bottom（底部）。
- en: Important information
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: 重要信息
- en: Tours improve the onboarding experience of the user and manage the integration
    tests. When you run Odoo with test mode internally, it also runs the tours and
    causes the test case to fail if a tour has not finished.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 导游改善了用户的入职体验并管理集成测试。当您以测试模式内部运行 Odoo 时，它也会运行导游，如果导游未完成，则会导致测试用例失败。
- en: Mobile app JavaScript
  id: totrans-242
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 移动应用程序 JavaScript
- en: Odoo v10 introduced the Odoo mobile application. It provides a few small utilities
    to perform mobile actions, such as vibrating the phone, showing a toast message,
    and scanning QR codes.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo v10 引入了 Odoo 移动应用程序。它提供了一些小工具以执行移动操作，例如振动手机、显示提示消息和扫描二维码。
- en: Getting ready
  id: totrans-244
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will be using the `my_hostel` module from the previous recipe. We will show
    you the toast when we change the value of the color field from the mobile app.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用之前菜谱中的 `my_hostel` 模块。当我们从移动应用程序更改颜色字段的值时，我们将显示提示。
- en: Warning
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 警告
- en: The Odoo mobile app only supports the Enterprise Edition, so if you don’t have
    the Enterprise Edition, then you cannot test it.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 移动应用程序仅支持企业版，因此如果您没有企业版，则无法对其进行测试。
- en: How to do it…
  id: totrans-248
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Follow these steps to show a toast message in the Odoo mobile app:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤在 Odoo 移动应用程序中显示提示消息：
- en: '[PRE40]'
  id: totrans-250
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'Update the module and open the form view of the `hostel.room` model in the
    mobile app. When you change the color, you will see the toast, as shown in the
    following screenshot:'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 更新模块并在移动应用程序中打开 `hostel.room` 模型的表单视图。当您更改颜色时，您将看到提示，如下面的截图所示：
- en: '![Figure 15.14 – Toast on color change](img/B20997_15_14.jpg)'
  id: totrans-252
  prefs: []
  type: TYPE_IMG
  zh: '![图 15.14 – 颜色更改时的提示](img/B20997_15_14.jpg)'
- en: Figure 15.14 – Toast on color change
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 图 15.14 – 颜色更改时的提示
- en: How it works…
  id: totrans-254
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '`@web_mobile/js/services/core` provides the bridge between a mobile device
    and Odoo JavaScript. It exposes a few basic mobile utilities. In our example,
    we used the `showToast` method to display a toast in the mobile app. We also need
    to check the availability of the function. The reason for this is that some mobile
    phones might not support a few features. For example, if devices don’t have a
    camera, then you can’t use the `scanBarcode()` method. In such cases, to avoid
    tracebacks, we need to wrap them with an `if` condition.'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '`@web_mobile/js/services/core` 提供了移动设备和 Odoo JavaScript 之间的桥梁。它公开了一些基本移动工具。在我们的示例中，我们使用了
    `showToast` 方法在移动应用程序中显示提示。我们还需要检查函数的可用性。这样做的原因是某些手机可能不支持一些功能。例如，如果设备没有摄像头，则无法使用
    `scanBarcode()` 方法。在这种情况下，为了避免回溯，我们需要用 `if` 条件将这些方法包裹起来。'
- en: There’s more...
  id: totrans-256
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'The mobile utilities that are to be found in Odoo are as follows:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 中可以找到的移动工具如下：
- en: '`showToast()`: To display a toast message'
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showToast()`: 显示提示消息'
- en: '`vibrate()`: To make a phone vibrate'
  id: totrans-259
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`vibrate()`: 使手机振动'
- en: '`showSnackBar()`: To display a snack bar with a button'
  id: totrans-260
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showSnackBar()`: 显示带有按钮的 snack bar'
- en: '`showNotification()`: To display a mobile notification'
  id: totrans-261
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`showNotification()`: 显示移动通知'
- en: '`addContact()`: To add a new contact to the phonebook'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`addContact()`: 向电话簿添加新联系人'
- en: '`scanBarcode()`: To scan QR codes'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`scanBarcode()`: 扫描二维码'
- en: '`switchAccount()`: To open the account switcher in Android'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`switchAccount()`: 在 Android 中打开账户切换器'
- en: To learn more about mobile JavaScript, refer to [https://www.odoo.com/documentation/16.0/developer/reference/frontend/mobile.html](https://www.odoo.com/documentation/16.0/developer/reference/frontend/mobile.html).
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于移动 JavaScript 的信息，请参阅 [https://www.odoo.com/documentation/16.0/developer/reference/frontend/mobile.html](https://www.odoo.com/documentation/16.0/developer/reference/frontend/mobile.html)。
