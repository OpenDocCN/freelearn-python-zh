["```py\nfrom tkinter import messagebox as msg\n```", "```py\ndef _msgBox():\n    msg.showinfo('Python Message Info Box', 'A Python GUI created \n    using tkinter:\\nThe year is 2019.') \n```", "```py\nmsg.showwarning('Python Message Warning Box', 'A Python GUI created using tkinter:' '\\nWarning: There might be a bug in this code.')\n```", "```py\nmsg.showerror('Python Message Error Box', 'A Python GUI created using tkinter:'\n    '\\nError: Houston ~ we DO have a serious PROBLEM!')\n```", "```py\nanswer = msg.askyesnocancel(\"Python Message Multi Choice Box\", \"Are you sure you really wish to do this?\")\n```", "```py\nIf answer == True: \n    <do something>\n```", "```py\nfrom tkinter import messagebox as msg\nmsg.showinfo('Python GUI created using tkinter:\\nThe year is 2019')\n```", "```py\nfrom tkinter import messagebox as msg\nmsg.showinfo('', 'Python GUI created using tkinter:\\nThe year is 2019')\n```", "```py\nfrom tkinter import Tk\nroot = Tk()\nroot.withdraw()\n```", "```py\nmsg.showinfo('This is a Title', 'Python GUI created using tkinter:\\nThe year is 2019')\n```", "```py\nimport tkinter as tk \nwin = tk.Tk()               # Create instance \nwin.title(\"Python GUI\")     # Add a title\n```", "```py\n# Change the main windows icon \nwin.iconbitmap('pyc.ico')\n```", "```py\n# Adding a Spinbox widget \nspin = Spinbox(mighty, from_=0, to=10) \nspin.grid(column=0, row=2)\n```", "```py\nspin = Spinbox(mighty, from_=0, to=10, width=5)\n```", "```py\nspin = Spinbox(mighty, from_=0, to=10, width=5 , bd=8)\n```", "```py\n# Spinbox callback  \ndef _spin(): \n    value = spin.get() \n    print(value) \n    scrol.insert(tk.INSERT, value + '\\n')   # <-- add a newline \n\n    spin = Spinbox(mighty, from_=0, to=10, width=5, bd=8, \n    command=_spin)                 # <-- command=_spin\n```", "```py\n# Adding a Spinbox widget using a set of values \nspin = Spinbox(mighty, values=(1, 2, 4, 42, 100), width=5, bd=8, \ncommand=_spin)  \nspin.grid(column=0, row=2)\n```", "```py\n# Adding a second Spinbox widget  \nspin2 = Spinbox(mighty, values=(0, 50, 100), width=5, bd=20, \ncommand=_spin2)                            # <-- new function\nspin2.grid(column=1, row=2)\n```", "```py\n# Spinbox2 callback function\ndef _spin2():\n    value = spin2.get()\n    print(value)\n    scrol.insert(tk.INSERT, value + '\\n')  \n    # <-- write to same ScrolledText\n```", "```py\nspin2 = Spinbox(mighty, values=(0, 50, 100), width=5, bd=9, command=_spin2, relief=tk.RIDGE) \n```", "```py\nclass ToolTip(object):\n    def __init__(self, widget, tip_text=None):\n        self.widget = widget\n        self.tip_text = tip_text\n        widget.bind('<Enter>', self.mouse_enter)\n        widget.bind('<Leave>', self.mouse_leave)\n```", "```py\ndef mouse_enter(self, _event): \n    self.show_tooltip()\n\ndef mouse_leave(self, _event):\n    self.hide_tooltip()\n```", "```py\ndef show_tooltip(self):\n    if self.tip_window:\n        x_left = self.widget.winfo_rootx() \n        y_top = self.widget.winfo_rooty() - 18\n        self.tip_window = tk.Toplevel(self.widget)\n        self.tip_window.overrideredirect(True)\n        self.tip_window.geometry(\"+%d+%d\" % (x_left, y_top))\n        label = tk.Label(self.tip_window, text=self.tip_text, \n        justify=tk.LEFT, background=\"#ffffe0\", relief=tk.SOLID, \n        borderwidth=1, font=(\"tahoma\", \"8\", \"normal\"))\n        label.pack(ipadx=1)\n\n```", "```py\ndef hide_tooltip(self):\n    if self.tip_window:\n        self.tip_window.destroy()\n```", "```py\n# Adding a Spinbox widget\nspin = Spinbox(mighty, values=(1, 2, 4, 42, 100), width=5, bd=9, command=_spin)  spin.grid(column=0, row=2)\n\n# Add a Tooltip to the Spinbox\nToolTip(spin, 'This is a Spin control')     # <-- add this code\n\n```", "```py\nscrol = scrolledtext.ScrolledText(mighty, width=scrol_w, height=scrol_h, wrap=tk.WORD)\nscrol.grid(column=0, row=3, sticky='WE', columnspan=3)\n\n# Add a Tooltip to the ScrolledText widget \nToolTip(scrol, 'This is a ScrolledText widget') # <-- add this code\n```", "```py\nfrom time import sleep          # careful - this can freeze the GU\n```", "```py\n# Now we are creating all three Radiobutton widgets within one loop\nfor col in range(3): \n    curRad = tk.Radiobutton(mighty2, text=colors[col], \n    variable=radVar, value=col, command=radCall) \n    curRad.grid(column=col, row=1, sticky=tk.W) # row=6\n\n# Add a Progressbar to Tab 2     # <--- add this code here\nprogress_bar = ttk.Progressbar(tab2, orient='horizontal', length=286, mode='determinate')\nprogress_bar.grid(column=0, row=3, pady=2) \n```", "```py\n# update progressbar in callback loop\ndef run_progressbar():\n    progress_bar[\"maximum\"] = 100\n    for i in range(101):\n        sleep(0.05)\n        progress_bar[\"value\"] = i   # increment progressbar\n        progress_bar.update()       # have to call update() in loop\n    progress_bar[\"value\"] = 0       # reset/clear progressbar \n```", "```py\ndef start_progressbar():\n    progress_bar.start()\n\ndef stop_progressbar():\n    progress_bar.stop()\n\ndef progressbar_stop_after(wait_ms=1000):\n    win.after(wait_ms, progress_bar.stop)\n```", "```py\n# PREVIOUS CODE -- REPLACE WITH BELOW CODE\n# Create a container to hold labels\nbuttons_frame = ttk.LabelFrame(mighty2, text=' Labels in a Frame ')\nbuttons_frame.grid(column=0, row=7) \n\n# NEW CODE\n# Create a container to hold buttons\nbuttons_frame = ttk.LabelFrame(mighty2, text=' ProgressBar ')\nbuttons_frame.grid(column=0, row=2, sticky='W', columnspan=2)\n```", "```py\n# DELETE THE LABELS BELOW\n# Place labels into the container element\nttk.Label(buttons_frame, text=\"Label1\").grid(column=0, row=0, sticky=tk.W)\nttk.Label(buttons_frame, text=\"Label2\").grid(column=1, row=0, sticky=tk.W)\nttk.Label(buttons_frame, text=\"Label3\").grid(column=2, row=0, sticky=tk.W)\n```", "```py\n# Add Buttons for Progressbar commands\nttk.Button(buttons_frame, text=\" Run Progressbar \", \ncommand=run_progressbar).grid(column=0, row=0, sticky='W') \nttk.Button(buttons_frame, text=\" Start Progressbar \", \ncommand=start_progressbar).grid(column=0, row=1, sticky='W') \nttk.Button(buttons_frame, text=\" Stop immediately \", \ncommand=stop_progressbar).grid(column=0, row=2, sticky='W') \nttk.Button(buttons_frame, text=\" Stop after second \", \ncommand=progressbar_stop_after).grid(column=0, row=3, sticky='W') \n```", "```py\nfor child in buttons_frame.winfo_children(): \n    child.grid_configure(padx=2, pady=2) \n```", "```py\nfor child in mighty2.winfo_children(): \n    child.grid_configure(padx=8, pady=2)\n```", "```py\ntabControl = ttk.Notebook(win)          # Create Tab Control \n\ntab1 = ttk.Frame(tabControl)            # Create a tab  \ntabControl.add(tab1, text='Tab 1')      # Add the tab \n\ntab2 = ttk.Frame(tabControl)              \ntabControl.add(tab2, text='Tab 2')      # Add a second tab\n\ntab3 = ttk.Frame(tabControl)            \ntabControl.add(tab3, text='Tab 3')      # Add a third tab \n\ntabControl.pack(expand=1, fill=\"both\")  # Pack to make tabs visible\n```", "```py\n# Tab Control 3 -------------------------------\ntab3_frame = tk.Frame(tab3, bg='blue')\ntab3_frame.pack()\nfor orange_color in range(2):\n    canvas = tk.Canvas(tab3_frame, width=150, height=80, \n    highlightthickness=0, bg='orange')\n    canvas.grid(row=orange_color, column=orange_color)\n```"]