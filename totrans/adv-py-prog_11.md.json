["```py\npip install requests\nconda install requests\n```", "```py\nimport requests\nurl = 'http://www.google.com'\nres = requests.get(url)\nprint(res.status_code)\nprint(res.headers)\nwith open('google.html', 'w') as f:\n    f.write(res.text)\nprint('Done.')\n```", "```py\n200\n{'Date': 'Sat, 17 Nov 2018 23:08:58 GMT', 'Expires': '-1', \n'Cache-Control': 'private, max-age=0', 'Content-Type': 'text/\nhtml; charset=ISO-8859-1', 'P3P': 'CP=\"This is not a P3P \npolicy! See g.co/p3phelp for more info.\"', 'X-XSS-Protection': \n'1; mode=block', 'X-Frame-Options': 'SAMEORIGIN', 'Content-\nEncoding': 'gzip', 'Server': 'gws', 'Content-Length': '4958', \n'Set-Cookie': '1P_JAR=2018-11-17-23; expires=Mon, 17-Dec-2018 \n23:08:58 GMT; path=/; domain=.google.com, NID=146=NHT7fic3mjBO_\nvdiFB3-gqnFPyGN1EGxyMkkNPnFMEVsqjGJ8S0EwrivDBWBgUS7hCPZGHbos\nLE4uxz31shnr3X4adRpe7uICEiK8qh3Asu6LH_bIKSLWStAp8gMK1f9_GnQ0_\nJKQoMvG-OLrT_fwV0hwTR5r2UVYsUJ6xHtX2s; expires=Sun, 19-May-2019 \n23:08:58 GMT; path=/; domain=.google.com; HttpOnly'}\nDone.\n```", "```py\nimport requests\ndef ping(url):\n    res = requests.get(url)\n    print(f'{url}: {res.text}')\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/400',\n    'http://httpstat.us/404',\n    'http://httpstat.us/408',\n    'http://httpstat.us/500',\n    'http://httpstat.us/511'\n]\nfor url in urls:\n    ping(url)\nprint('Done.')\n```", "```py\nhttp://httpstat.us/200: 200 OK\nhttp://httpstat.us/400: 400 Bad Request\nhttp://httpstat.us/404: 404 Not Found\nhttp://httpstat.us/408: 408 Request Timeout\nhttp://httpstat.us/500: 500 Internal Server Error\nhttp://httpstat.us/511: 511 Network Authentication Required\nDone.\n```", "```py\nimport threading\nimport requests\nimport time\ndef ping(url):\n    res = requests.get(url)\n    print(f'{url}: {res.text}')\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/400',\n    'http://httpstat.us/404',\n    'http://httpstat.us/408',\n    'http://httpstat.us/500',\n    'http://httpstat.us/524'\n]\nstart = time.time()\nfor url in urls:\n    ping(url)\nprint(f'Sequential: {time.time() - start : .2f} seconds')\nprint()\nstart = time.time()\nthreads = []\nfor url in urls:\n    thread = threading.Thread(target=ping, args=(url,))\n    threads.append(thread)\n    thread.start()\nfor thread in threads:\n    thread.join()\nprint(f'Threading: {time.time() - start : .2f} seconds')\n```", "```py\nhttp://httpstat.us/200: 200 OK\nhttp://httpstat.us/400: 400 Bad Request\nhttp://httpstat.us/404: 404 Not Found\nhttp://httpstat.us/408: 408 Request Timeout\nhttp://httpstat.us/500: 500 Internal Server Error\nhttp://httpstat.us/524: 524 A timeout occurred\nSequential: 0.82 seconds\nhttp://httpstat.us/404: 404 Not Found\nhttp://httpstat.us/200: 200 OK\nhttp://httpstat.us/400: 400 Bad Request\nhttp://httpstat.us/500: 500 Internal Server Error\nhttp://httpstat.us/524: 524 A timeout occurred\nhttp://httpstat.us/408: 408 Request Timeout\nThreading: 0.14 seconds\n```", "```py\nimport threading\nimport requests\nclass MyThread(threading.Thread):\n    def __init__(self, url):\n        threading.Thread.__init__(self)\n        self.url = url\n        self.result = None\n    def run(self):\n        res = requests.get(self.url)\n        self.result = f'{self.url}: {res.text}'\n```", "```py\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/400',\n    'http://httpstat.us/404',\n    'http://httpstat.us/408',\n    'http://httpstat.us/500',\n    'http://httpstat.us/524'\n]\nstart = time.time()\nthreads = [MyThread(url) for url in urls]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nfor thread in threads:\n    print(thread.result)\nprint(f'Took {time.time() - start : .2f} seconds')\nprint('Done.')\n```", "```py\nhttp://httpstat.us/200: 200 OK\nhttp://httpstat.us/400: 400 Bad Request\nhttp://httpstat.us/404: 404 Not Found\nhttp://httpstat.us/408: 408 Request Timeout\nhttp://httpstat.us/500: 500 Internal Server Error\nhttp://httpstat.us/524: 524 A timeout occurred\nTook 0.14 seconds\nDone.\n```", "```py\nimport threading\nimport requests\nclass MyThread(threading.Thread):\n    def __init__(self, url):\n        threading.Thread.__init__(self)\n        self.url = url\n        self.result = None\n    def run(self):\n        res = requests.get(self.url)\n        self.result = f'{self.url}: {res.text}'\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/200?sleep=20000',\n    'http://httpstat.us/400'\n]\nthreads = [MyThread(url) for url in urls]\nfor thread in threads:\n    thread.start()\nfor thread in threads:\n    thread.join()\nfor thread in threads:\n    print(thread.result)\nprint('Done.')\n```", "```py\nhttp://httpstat.us/200: 200 OK\nhttp://httpstat.us/200?sleep=20000: 200 OK\nhttp://httpstat.us/400: 400 Bad Request\nTook 22.60 seconds\nDone.\n```", "```py\nimport time\nUPDATE_INTERVAL = 0.01\ndef process_requests(threads, timeout=5):\n    def alive_count():\n        alive = [1 if thread.is_alive() else 0 for thread \\\n          in threads]\n        return sum(alive)\n    while alive_count() > 0 and timeout > 0:\n        timeout -= UPDATE_INTERVAL\n        time.sleep(UPDATE_INTERVAL)\n    for thread in threads:\n        print(thread.result)\n```", "```py\nimport threading\nimport requests\nclass MyThread(threading.Thread):\n    def __init__(self, url):\n        threading.Thread.__init__(self)\n        self.url = url\n        self.result = f'{self.url}: Custom timeout'\n    def run(self):\n        res = requests.get(self.url)\n        self.result = f'{self.url}: {res.text}'\n```", "```py\nurls = [\n    'http://httpstat.us/200',\n    'http://httpstat.us/200?sleep=4000',\n    'http://httpstat.us/200?sleep=20000',\n    'http://httpstat.us/400'\n]\nstart = time.time()\nthreads = [MyThread(url) for url in urls]\nfor thread in threads:\n    thread.setDaemon(True)\n    thread.start()\nprocess_requests(threads)\nprint(f'Took {time.time() - start : .2f} seconds')\nprint('Done.')\n```", "```py\nwhile alive_count() > 0 and timeout > 0:\n    timeout -= UPDATE_INTERVAL\n    time.sleep(UPDATE_INTERVAL)\nfor thread in threads:\n    print(thread.result)\n```", "```py\nhttp://httpstat.us/200: 200 OK\nhttp://httpstat.us/200?sleep=4000: 200 OK\nhttp://httpstat.us/200?sleep=20000: Custom timeout\nhttp://httpstat.us/400: 400 Bad Request\nTook 5.70 seconds\nDone.\n```", "```py\nthreads = [MyThread(url) for url in urls]\nfor thread in threads:\n    #thread.setDaemon(True)\n    thread.start()\nprocess_requests(threads)\n```"]