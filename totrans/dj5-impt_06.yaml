- en: <st c="0">6</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">6</st>
- en: <st c="2">Collecting and Displaying Data from the Database</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">从数据库收集和展示数据</st>
- en: <st c="50">In the previous chapters, movie information was gathered using dummy
    data implemented within a Python list.</st> <st c="159">While this approach served
    as a good initial attempt to display movie information, it doesn’t scale well.</st>
    <st c="265">If we want to add a new movie or edit an existing one, we will need
    to modify our Python code.</st> <st c="360">This chapter focuses on the process
    of refactoring both the movies and individual movie pages to retrieve and present
    information directly from the database.</st> <st c="518">With this approach, if
    we need to add new movies or modify existing ones, we can simply access the admin
    panel without the need to modify the Python code.</st> <st c="673">Additionally,
    we will implement a new movie</st> <st c="717">search functionality.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="50">在前几章中，我们使用Python列表中的虚拟数据来收集电影信息。</st> <st c="159">虽然这种方法作为展示电影信息的一个良好初始尝试是有效的，但它并不具有良好的可扩展性。</st>
    <st c="265">如果我们想添加一部新电影或编辑现有的电影，我们需要修改我们的Python代码。</st> <st c="360">本章重点介绍重构电影和单个电影页面以直接从数据库检索和展示信息的过程。</st>
    <st c="518">使用这种方法，如果我们需要添加新电影或修改现有电影，我们可以直接访问管理面板，而无需修改Python代码。</st> <st c="673">此外，我们还将实现一个新的电影</st>
    <st c="717">搜索功能。</st>
- en: <st c="738">In this chapter, we will cover the</st> <st c="774">following topics:</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="738">在本章中，我们将涵盖以下主题：</st> <st c="774">以下内容：</st>
- en: <st c="791">Removing the movies’</st> <st c="813">dummy data</st>
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="791">删除电影的</st> <st c="813">虚拟数据</st>
- en: <st c="823">Updating the movie</st> <st c="843">listings page</st>
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="823">更新电影</st> <st c="843">列表页面</st>
- en: <st c="856">Updating the listing of an individual</st> <st c="895">movie page</st>
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="856">更新单个</st> <st c="895">电影页面的列表</st>
- en: <st c="905">Implementing a search</st> <st c="928">movie functionality</st>
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="905">实现搜索</st> <st c="928">电影功能</st>
- en: <st c="947">By the end of this chapter, you will know how to collect and display
    information from</st> <st c="1034">the database.</st>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="947">在本章结束时，你将了解如何从</st> <st c="1034">数据库中收集和展示信息。</st>
- en: <st c="1047">Technical requirements</st>
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1047">技术要求</st>
- en: <st c="1070">In this chapter, we will use Python 3.10+.</st> <st c="1114">Additionally,
    we will use the</st> **<st c="1144">VS Code</st>** <st c="1151">editor in this
    book, which you can download</st> <st c="1196">from</st> [<st c="1201">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="1231">.</st>
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1070">在本章中，我们将使用Python 3.10+。</st> <st c="1114">此外，我们将在本书中使用</st> **<st
    c="1144">VS Code</st>** <st c="1151">编辑器，你可以从</st> <st c="1196">以下链接</st> <st
    c="1201">[https://code.visualstudio.com/](https://code.visualstudio.com/)<st c="1231">](https://code.visualstudio.com/)下载。</st>
- en: <st c="1232">The code for this chapter is located</st> <st c="1270">at</st>
    [<st c="1273">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter06/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter06/moviesstore)<st
    c="1381">.</st>
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1232">本章的代码位于</st> <st c="1270">以下链接</st> <st c="1273">[https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter06/moviesstore](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter06/moviesstore)<st
    c="1381">。</st>
- en: <st c="1382">The CiA video for this chapter can be found</st> <st c="1427">at</st>
    [<st c="1430">https://packt.link/mZUvA</st>](https://packt.link/mZUvA)
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1382">本章的CiA视频可以在以下链接找到</st> <st c="1427">[https://packt.link/mZUvA](https://packt.link/mZUvA)
- en: <st c="1454">Removing the movies’ dummy data</st>
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="1454">删除电影的虚拟数据</st>
- en: <st c="1486">The first step to extract database</st> <st c="1521">data is to
    remove the movies’ dummy data.</st> <st c="1564">In</st> `<st c="1567">/movies/views.py</st>`<st
    c="1583">, remove the</st> `<st c="1596">movies</st>` <st c="1602">variable, as
    shown in the following</st> <st c="1639">in</st> **<st c="1642">bold</st>**<st
    c="1646">:</st>
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1486">提取数据库</st> <st c="1521">数据的第一个步骤是删除电影的虚拟数据。</st> <st c="1564">在</st>
    `<st c="1567">/movies/views.py</st>`<st c="1583">中，删除</st> `<st c="1596">movies</st>`
    <st c="1602">变量，如下所示</st> <st c="1639">在</st> **<st c="1642">粗体</st>**<st c="1646">中：</st>
- en: '[PRE0]'
  id: totrans-15
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: '**<st c="2147">We don’t need this variable anymore, as we will extract the
    movie information from the database.</st> <st c="2244">Also, remember to</st>
    <st c="2262">access the admin panel and create a few</st> <st c="2302">movie objects.</st>'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: '**<st c="2147">我们不再需要这个变量，因为我们将从数据库中提取电影信息。</st> <st c="2244">此外，请记住访问管理面板并创建几个</st>
    <st c="2262">电影对象。</st>'
- en: <st c="2316">Now that we have removed the dummy data, let’s update the way we</st>
    <st c="2382">list movies.</st>
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2316">现在我们已经移除了虚拟数据，让我们更新我们</st> <st c="2382">列出电影的方式。</st>
- en: <st c="2394">Updating the movie listings page</st>
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2394">更新电影列表页面</st>
- en: <st c="2427">Now, let’s update the</st> <st c="2449">code to extract movie information
    from the database.</st> <st c="2503">We</st> <st c="2506">will need to, first,
    update the</st> `<st c="2538">index</st>` <st c="2543">function; second, update
    the</st> `<st c="2573">movies.index</st>` <st c="2585">template; and third, add
    a custom</st> <st c="2620">CSS class.</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2427">现在，让我们更新</st> <st c="2449">代码以从数据库中提取电影信息。</st> <st c="2503">我们</st>
    <st c="2506">首先需要更新</st> `<st c="2538">index</st>` <st c="2543">函数；其次，更新</st>
    `<st c="2573">movies.index</st>` <st c="2585">模板；最后，添加一个自定义</st> <st c="2620">CSS类。</st>
- en: <st c="2630">Updating index function</st>
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="2630">更新索引函数</st>
- en: <st c="2654">In</st> `<st c="2658">/movies/views.py</st>`<st c="2674">, add
    the following</st> <st c="2694">in bold:</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2654">在</st> `<st c="2658">/movies/views.py</st>`<st c="2674">中，添加以下</st>
    <st c="2694">加粗内容：</st>
- en: '[PRE1]'
  id: totrans-22
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="2963">Let’s explain the</st> <st c="2982">previous code:</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2963">让我们解释一下</st> <st c="2982">之前的代码：</st>
- en: <st c="2996">We import the</st> `<st c="3011">Movie</st>` <st c="3016">model
    from the</st> `<st c="3032">models</st>` <st c="3038">file.</st> <st c="3045">We
    will use this model to access</st> <st c="3078">database information.</st>
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2996">我们从</st> `<st c="3011">Movie</st>` <st c="3016">模型中导入</st> `<st
    c="3032">models</st>` <st c="3038">文件。</st> <st c="3045">我们将使用此模型来访问</st> <st
    c="3078">数据库信息。</st>
- en: <st c="3099">We collect all movies from the database by using the</st> `<st
    c="3153">Movie.objects.all()</st>` <st c="3172">method.</st> `<st c="3181">Movie.objects</st>`
    <st c="3194">is a manager in Django that serves as the default interface to query
    the database table associated with the model.</st> <st c="3310">It provides various
    methods to perform database operations such as creating, updating, deleting, and
    retrieving objects.</st> <st c="3431">The</st> `<st c="3435">all()</st>` <st c="3440">method
    fetches all objects from the database</st> <st c="3485">table represented by the
    model.</st> <st c="3518">Remember that we previously collected the movie information
    by using the</st> `<st c="3591">movies</st>` <st c="3597">variable; now, we use
    the</st> `<st c="3624">Movie</st>` <st c="3629">Django model.</st>
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3099">我们通过使用</st> `<st c="3153">Movie.objects.all()</st>` <st c="3172">方法从数据库中收集所有电影。</st>
    `<st c="3181">Movie.objects</st>` <st c="3194">是Django中的一个管理器，作为查询与模型关联的数据库表的默认接口。</st>
    <st c="3310">它提供了执行数据库操作（如创建、更新、删除和检索对象）的各种方法。</st> <st c="3431">`<st c="3435">all()</st>`
    <st c="3440">方法从模型表示的数据库表获取所有对象。</st> <st c="3518">记住，我们之前通过使用</st> `<st c="3591">movies</st>`
    <st c="3597">变量收集了电影信息；现在，我们使用</st> `<st c="3624">Movie</st>` <st c="3629">Django模型。</st>
- en: <st c="3643">Note</st>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3643">注意</st>
- en: <st c="3648">Django offers several methods to manipulate and access database
    information.</st> <st c="3726">You can find more of these methods</st> <st c="3761">here:</st>
    [<st c="3767">https://docs.djangoproject.com/en/5.0/topics/db/queries/</st>](https://docs.djangoproject.com/en/5.0/topics/db/queries/)<st
    c="3823">.</st>
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3648">Django提供了几种操作和访问数据库信息的方法。</st> <st c="3726">您可以在以下位置找到更多这些方法：</st>
    [<st c="3767">https://docs.djangoproject.com/en/5.0/topics/db/queries/</st>](https://docs.djangoproject.com/en/5.0/topics/db/queries/)<st
    c="3823">。</st>
- en: <st c="3824">Updating the movies.index template</st>
  id: totrans-28
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="3824">更新movies.index模板</st>
- en: <st c="3859">In</st> `<st c="3863">/movies/templates/movies/index.html</st>`<st
    c="3898">, add the</st> <st c="3908">following</st> <st c="3918">in bold:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3859">在</st> `<st c="3863">/movies/templates/movies/index.html</st>`<st
    c="3898">中，添加以下</st> <st c="3908">加粗内容：</st>
- en: '[PRE2]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="4302">We have removed the default image, and now we will show the specific
    image for each movie.</st> <st c="4394">Therefore, we will include</st> <st c="4421">a
    custom CSS class to display the images with the same proportion.</st> <st c="4488">We
    will add this CSS</st> <st c="4509">class next.</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4302">我们已经移除了默认图片，现在我们将展示每部电影的特定图片。</st> <st c="4394">因此，我们将包含</st> <st
    c="4421">一个自定义CSS类来以相同的比例显示图片。</st> <st c="4488">我们将添加这个CSS</st> <st c="4509">类。</st>
- en: <st c="4520">Adding a custom CSS class</st>
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="4520">添加自定义CSS类</st>
- en: <st c="4546">In</st> `<st c="4550">/moviesstore/static/css/style.css</st>`<st
    c="4583">, add the</st> <st c="4592">following in bold at the end of</st> <st
    c="4625">the file:</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4546">在</st> `<st c="4550">/moviesstore/static/css/style.css</st>`<st
    c="4583">的末尾添加以下</st> <st c="4592">加粗内容：</st>
- en: '[PRE3]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="4692">Now, save those files, run the server, and go to</st> [<st c="4741">http://localhost:8000/movies</st>](http://localhost:8000/movies)<st
    c="4769">; you should see the movies page, which extracts information from the</st>
    <st c="4840">database (</st>*<st c="4850">Figure 6</st>**<st c="4859">.1</st>*<st
    c="4861">).</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4692">现在，保存这些文件，运行服务器，并访问</st> [<st c="4741">http://localhost:8000/movies</st>](http://localhost:8000/movies)<st
    c="4769">；你应该看到电影页面，该页面从数据库中提取信息（</st>*<st c="4850">图6</st>**<st c="4859">.1</st>*<st
    c="4861">）。</st>
- en: '![Figure 6.1 – The movies page](img/B22457_06_01.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – 电影页面](img/B22457_06_01.jpg)'
- en: <st c="4979">Figure 6.1 – The movies page</st>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4979">图6.1 – 电影页面</st>
- en: <st c="5007">The movies page now lists movies from the database; let’s complete
    this process by modifying the individual</st> <st c="5116">movie pages.</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5007">电影页面现在列出了数据库中的电影；让我们通过修改单个</st> <st c="5116">电影页面来完成这个过程。</st>
- en: <st c="5128">Updating the listing of an individual movie page</st>
  id: totrans-39
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="5128">更新单个电影页面的列表</st>
- en: <st c="5177">Now, let’s update the code to</st> <st c="5207">extract individual
    movie information from the database.</st> <st c="5264">We will need to, first,
    update the show function; second, update the</st> `<st c="5333">movies.show</st>`
    <st c="5344">template; and third, add a custom</st> <st c="5379">CSS class.</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5177">现在，让我们更新代码以</st> <st c="5207">从数据库中提取单个电影信息。</st> <st c="5264">我们首先需要更新show函数；其次，更新</st>
    `<st c="5333">movies.show</st>` <st c="5344">模板；最后，添加一个自定义</st> <st c="5379">CSS类。</st>
- en: <st c="5389">Updating show function</st>
  id: totrans-41
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="5389">更新显示函数</st>
- en: <st c="5412">In</st> `<st c="5416">/movies/views.py</st>`<st c="5432">, add
    the</st> <st c="5442">following</st> <st c="5452">in bold:</st>
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="5416">/movies/views.py</st>`<st c="5432"> 中，添加以下内容并以粗体显示：
- en: '[PRE4]'
  id: totrans-43
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="5680">Let’s explain the</st> <st c="5699">previous code:</st>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5680">让我们解释一下</st> <st c="5699">之前的代码：</st>
- en: <st c="5713">We use the</st> `<st c="5725">Movie.objects.get(id=id)</st>` <st
    c="5749">method to retrieve a specific movie based</st> <st c="5792">on its</st>
    `<st c="5799">id</st>`<st c="5801">. Remember that</st> `<st c="5817">id</st>`
    <st c="5819">is passed by the URL and received as a parameter in the</st> `<st
    c="5876">show</st>` <st c="5880">function.</st>
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5713">我们使用</st> `<st c="5725">Movie.objects.get(id=id)</st>` <st c="5749">方法根据其</st>
    `<st c="5799">id</st>`<st c="5801">检索一个特定的电影。记住</st> `<st c="5817">id</st>` <st
    c="5819">是通过URL传递的，并在</st> `<st c="5876">show</st>` <st c="5880">函数中作为参数接收的。</st>
- en: <st c="5890">We now access</st> `<st c="5905">movie.name</st>` <st c="5915">as
    an object attribute.</st> <st c="5940">Previously, we accessed the name as a key
    (</st>`<st c="5983">movie['name']</st>`<st c="5997">), since the dummy data variable</st>
    <st c="6031">stored dictionaries.</st>
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5890">我们现在将</st> `<st c="5905">movie.name</st>` <st c="5915">作为对象属性访问。</st>
    <st c="5940">之前，我们通过键（</st>`<st c="5983">movie['name']</st>`<st c="5997">）访问名称，因为虚拟数据变量</st>
    <st c="6031">存储字典。</st>
- en: <st c="6051">Updating the movies.show template</st>
  id: totrans-47
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="6051">更新movies.show模板</st>
- en: <st c="6085">In</st> `<st c="6089">/movies/templates/movies/show.html</st>`<st
    c="6123">, add the</st> <st c="6132">following</st> <st c="6143">in bold:</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `<st c="6085">/movies/templates/movies/show.html</st>`<st c="6123"> 中，添加以下内容并以粗体显示：
- en: '[PRE5]'
  id: totrans-49
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="6500">Similar to the previous</st> <st c="6524">code, we now show the
    specific movie image and use a custom CSS class to display movie images with the</st>
    <st c="6628">same proportion.</st>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6500">与之前的</st> <st c="6524">代码类似，我们现在显示特定的电影图片，并使用自定义CSS类以相同的比例显示电影图片。</st>
- en: <st c="6644">Adding a custom CSS class</st>
  id: totrans-51
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="6644">添加自定义CSS类</st>
- en: <st c="6670">In</st> `<st c="6674">/moviesstore/static/css/style.css</st>`<st
    c="6707">, add the</st> <st c="6716">following in bold at the end of</st> <st
    c="6749">the file:</st>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6670">在</st> `<st c="6674">/moviesstore/static/css/style.css</st>`<st
    c="6707"> 中，在文件末尾添加以下内容并以粗体显示：</st>
- en: '[PRE6]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="6816">Now, save those files, run the server, and go to a specific movie
    at</st> [<st c="6885">http://localhost:8000/movies/1</st>](http://localhost:8000/movies/1)<st
    c="6915">; you should see the individual movie page, which extracts movie information
    from the database (</st>*<st c="7012">Figure 6</st>**<st c="7021">.2</st>*<st
    c="7023">).</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 现在保存这些文件，运行服务器，并访问特定电影在 [<st c="6885">http://localhost:8000/movies/1</st>](http://localhost:8000/movies/1)<st
    c="6915">；你应该看到单个电影页面，该页面从数据库中提取电影信息（</st>*<st c="7012">图6.2</st>**<st c="7021">.2</st>*<st
    c="7023">）。</st>
- en: '![Figure 6.2 – An individual movie page](img/B22457_06_02.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图6.2 – 单个电影页面](img/B22457_06_02.jpg)'
- en: <st c="7199">Figure 6.2 – An individual movie page</st>
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7199">图6.2 – 单个电影页面</st>
- en: <st c="7236">We are now listing movies and</st> <st c="7266">individual movies
    from the database.</st> <st c="7304">Finally, let’s include a new functionality
    to be able to</st> <st c="7361">search movies.</st>
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7236">我们现在正在列出电影和</st> <st c="7266">数据库中的单个电影。</st> <st c="7304">最后，让我们添加一个新功能，以便能够</st>
    <st c="7361">搜索电影。</st>
- en: <st c="7375">Implementing a search movie functionality</st>
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="7375">实现搜索电影功能</st>
- en: <st c="7417">Let’s finalize this chapter by implementing a</st> <st c="7463">search
    movie functionality.</st> <st c="7492">We will need to, first, update the</st>
    `<st c="7527">movies.index</st>` <st c="7539">template, and second, update the</st>
    `<st c="7573">index</st>` <st c="7578">function.</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7417">让我们通过实现一个</st> <st c="7463">搜索电影功能来结束这一章。</st> <st c="7492">首先，我们需要更新</st>
    `<st c="7527">movies.index</st>` <st c="7539">模板，其次，更新</st> `<st c="7573">index</st>`
    <st c="7578">函数。</st>
- en: <st c="7588">Updating the movies.index template</st>
  id: totrans-60
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="7588">更新movies.index模板</st>
- en: <st c="7623">In</st> `<st c="7627">/movies/templates/movies/index.html</st>`<st
    c="7662">, add</st> <st c="7668">the following</st> <st c="7682">in bold:</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="7623">在</st> `<st c="7627">/movies/templates/movies/index.html</st>`<st
    c="7662">中，添加以下</st> <st c="7668">以下内容，并加粗：</st>
- en: '[PRE7]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: '****<st c="8118">We have created an HTML form that</st> <st c="8153">allows
    users to perform a search operation.</st> <st c="8197">This form will direct to
    the current URL route and send the</st> `<st c="8257">search</st>` <st c="8263">information
    by the URL.</st> <st c="8288">For example, if we search for</st> `<st c="8318">Avatar</st>`<st
    c="8324">, it will direct us</st> <st c="8344">to</st> `<st c="8347">http://localhost:8000/movies/?search=Avatar</st>`<st
    c="8390">.</st>'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '****<st c="8118">我们创建了一个HTML表单，允许用户执行搜索操作。</st> <st c="8153">此表单将重定向到当前URL路由，并通过URL发送</st>
    `<st c="8257">search</st>` <st c="8263">信息。</st> <st c="8288">例如，如果我们搜索</st> `<st
    c="8318">Avatar</st>`<st c="8324">，它将重定向我们到</st> `<st c="8347">http://localhost:8000/movies/?search=Avatar</st>`<st
    c="8390">。</st>'
- en: <st c="8391">Updating index function</st>
  id: totrans-64
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: <st c="8391">更新index函数</st>
- en: <st c="8415">In</st> `<st c="8419">/movies/views.py</st>`<st c="8435">, add
    the</st> <st c="8445">following</st> <st c="8455">in bold:</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8415">在</st> `<st c="8419">/movies/views.py</st>`<st c="8435">中，添加以下</st>
    <st c="8445">以下内容，并加粗：</st>
- en: '[PRE8]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="8798">The</st> `<st c="8803">index</st>` <st c="8808">function has changed.</st>
    <st c="8831">Now, it will retrieve all movies if the</st> `<st c="8871">search</st>`
    <st c="8877">parameter is not sent in the current request, or it will retrieve
    specific movies based on the</st> `<st c="8973">search</st>` <st c="8979">parameter.</st>
    <st c="8991">Let’s explain the</st> <st c="9009">previous code.</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8798">`<st c="8803">index</st>` <st c="8808">函数已更改。</st> <st c="8831">现在，如果当前请求中没有发送</st>
    `<st c="8871">search</st>` <st c="8877">参数，它将检索所有电影，或者根据</st> `<st c="8973">search</st>`
    <st c="8979">参数检索特定电影。</st> <st c="8991">让我们解释一下</st> `<st c="9009">之前的代码。</st>
- en: <st c="9023">We retrieve the value of the</st> `<st c="9053">search</st>` <st
    c="9059">parameter by using the</st> `<st c="9083">request.GET.get('search')</st>`
    <st c="9108">method and assign that value to the</st> `<st c="9145">search_term</st>`
    <st c="9156">variable.</st> <st c="9167">Here, we capture the</st> `<st c="9188">search</st>`
    <st c="9194">input value submitted through the form defined in the</st> <st c="9249">previous
    section.</st>
  id: totrans-68
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9023">我们通过使用</st> `<st c="9053">search</st>` <st c="9059">参数的</st> `<st
    c="9083">request.GET.get('search')</st>` <st c="9108">方法来检索该值，并将其分配给</st> `<st
    c="9145">search_term</st>` <st c="9156">变量。</st> <st c="9167">在这里，我们捕获了</st> `<st
    c="9188">search</st>` <st c="9194">输入值，该值是通过上一节中定义的表单提交的。</st>
- en: <st c="9266">If</st> `<st c="9270">search_term</st>` <st c="9281">is not empty,
    we filter movies where the name contains</st> `<st c="9337">search_term</st>`<st
    c="9348">. The</st> `<st c="9354">__icontains</st>` <st c="9365">lookup is used
    for a case-insensitive</st> <st c="9404">containment search.</st>
  id: totrans-69
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9266">如果</st> `<st c="9270">search_term</st>` <st c="9281">不为空，我们将过滤包含</st>
    `<st c="9337">search_term</st>`<st c="9348">名称的电影。我们使用</st> `<st c="9354">__icontains</st>`
    <st c="9365">查找进行不区分大小写的</st> <st c="9404">包含搜索。</st>
- en: <st c="9423">If</st> `<st c="9427">search_term</st>` <st c="9438">is empty,
    we retrieve all movies from the database without applying</st> <st c="9507">any
    filters.</st>
  id: totrans-70
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9423">如果</st> `<st c="9427">search_term</st>` <st c="9438">为空，我们将从数据库中检索所有电影，而不应用</st>
    `<st c="9507">任何过滤器。</st>
- en: <st c="9519">Finally, we pass the extracted</st> `<st c="9551">movies</st>`
    <st c="9557">to the</st> `<st c="9565">template_data</st>` <st c="9578">dictionary.</st>
  id: totrans-71
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="9519">最后，我们将提取的</st> `<st c="9551">movies</st>` <st c="9557">传递给</st>
    `<st c="9565">template_data</st>` <st c="9578">字典。</st>
- en: <st c="9590">Now, save those files, run the</st> <st c="9622">server, go to</st>
    `<st c="9636">http://localhost:8000/movies</st>`<st c="9664">, enter a search
    term, and submit the form; you should see the movies that match the search term
    (</st>*<st c="9762">Figure 6</st>**<st c="9771">.3</st>*<st c="9773">).</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9590">现在，保存这些文件，运行服务器，转到</st> `<st c="9636">http://localhost:8000/movies</st>`<st
    c="9664">，输入搜索词，提交表单；你应该能看到与搜索词匹配的电影（</st>*<st c="9762">图6</st>**<st c="9771">.3</st>*<st
    c="9773">）。</st>
- en: '![Figure 6.3 – The movies page with a custom search](img/B22457_06_03.jpg)'
  id: totrans-73
  prefs: []
  type: TYPE_IMG
  zh: '![图6.3 – 带自定义搜索的电影页面](img/B22457_06_03.jpg)'
- en: <st c="9876">Figure 6.3 – The movies page with a custom search</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9876">图6.3 – 带自定义搜索的电影页面</st>
- en: <st c="9925">We have refactored our</st> *<st c="9949">Movies Store</st>* <st
    c="9961">code to work with the database instead of dummy data.</st> <st c="10016">This
    strategy enables us to include new movies or edit existing ones without modifying
    our Python code.</st> <st c="10120">Additionally, the addition of the search functionality
    has helped us understand how to filter different data in Django and enhanced the</st>
    <st c="10256">project’s</st> <st c="10265">features.</st>
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经重构了我们的<st c="9925">代码，使其与数据库而不是虚拟数据一起工作。</st> <st c="9949">电影商店</st> <st
    c="9961">代码现在可以通过修改Python代码来包括新的电影或编辑现有的电影。</st> <st c="10016">此外，搜索功能的添加帮助我们理解如何在Django中过滤不同的数据，并增强了项目的功能。</st>
- en: <st c="10275">Summary</st>
  id: totrans-76
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="10275">摘要</st>
- en: <st c="10283">In this chapter, we learned how to extract information from the
    database.</st> <st c="10358">We learned different Django model methods, such as</st>
    `<st c="10409">all</st>`<st c="10412">,</st> `<st c="10414">get</st>`<st c="10417">,
    and</st> `<st c="10423">filter</st>`<st c="10429">, and how they can be used to
    retrieve different kinds of information.</st> <st c="10500">We refactored the
    movies and individual movie pages to collect information from the database and
    learned how to implement</st> <st c="10622">search functionality.</st>
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10283">在本章中，我们学习了如何从数据库中提取信息。</st> <st c="10358">我们学习了不同的Django模型方法，例如</st>
    `<st c="10409">all</st>`<st c="10412">,</st> `<st c="10414">get</st>`<st c="10417">,
    和</st> `<st c="10423">filter</st>`<st c="10429">，以及它们如何用于检索不同类型的信息。</st> <st c="10500">我们重构了电影和单个电影页面，以从数据库中收集信息，并学习了如何实现搜索功能。</st>
- en: <st c="10643">In the next chapter, we will go deeper into understanding how
    the</st> <st c="10710">database works.</st>******
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10643">在下一章中，我们将更深入地了解数据库是如何工作的。</st>******
