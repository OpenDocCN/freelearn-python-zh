- en: <st c="0">6</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Collecting and Displaying Data from the Database</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="50">In the previous chapters, movie information was gathered using dummy
    data implemented within a Python list.</st> <st c="159">While this approach served
    as a good initial attempt to display movie information, it doesn’t scale well.</st>
    <st c="265">If we want to add a new movie or edit an existing one, we will need
    to modify our Python code.</st> <st c="360">This chapter focuses on the process
    of refactoring both the movies and individual movie pages to retrieve and present
    information directly from the database.</st> <st c="518">With this approach, if
    we need to add new movies or modify existing ones, we can simply access the admin
    panel without the need to modify the Python code.</st> <st c="673">Additionally,
    we will implement a new movie</st> <st c="717">search functionality.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="738">In this chapter, we will cover the</st> <st c="774">following topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="791">Removing the movies’</st> <st c="813">dummy data</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="823">Updating the movie</st> <st c="843">listings page</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="856">Updating the listing of an individual</st> <st c="895">movie page</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="905">Implementing a search</st> <st c="928">movie functionality</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="947">By the end of this chapter, you will know how to collect and display
    information from</st> <st c="1034">the database.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1047">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1070">In this chapter, we will use Python 3.10+.</st> <st c="1114">Additionally,
    we will use the</st> **<st c="1144">VS Code</st>** <st c="1151">editor in this
    book, which you can download</st> <st c="1196">from</st> [<st c="1201">https://code.visualstudio.com/</st>](https://code.visualstudio.com/)<st
    c="1231">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1232">The code for this chapter is located</st> <st c="1270">at</st>
    [<st c="1273">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter06/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter06/moviesstore)<st
    c="1381">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1382">The CiA video for this chapter can be found</st> <st c="1427">at</st>
    [<st c="1430">https://packt.link/mZUvA</st>](https://packt.link/mZUvA)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1454">Removing the movies’ dummy data</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="1486">The first step to extract database</st> <st c="1521">data is to
    remove the movies’ dummy data.</st> <st c="1564">In</st> `<st c="1567">/movies/views.py</st>`<st
    c="1583">, remove the</st> `<st c="1596">movies</st>` <st c="1602">variable, as
    shown in the following</st> <st c="1639">in</st> **<st c="1642">bold</st>**<st
    c="1646">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '**<st c="2147">We don’t need this variable anymore, as we will extract the
    movie information from the database.</st> <st c="2244">Also, remember to</st>
    <st c="2262">access the admin panel and create a few</st> <st c="2302">movie objects.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2316">Now that we have removed the dummy data, let’s update the way we</st>
    <st c="2382">list movies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2394">Updating the movie listings page</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2427">Now, let’s update the</st> <st c="2449">code to extract movie information
    from the database.</st> <st c="2503">We</st> <st c="2506">will need to, first,
    update the</st> `<st c="2538">index</st>` <st c="2543">function; second, update
    the</st> `<st c="2573">movies.index</st>` <st c="2585">template; and third, add
    a custom</st> <st c="2620">CSS class.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2630">Updating index function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="2654">In</st> `<st c="2658">/movies/views.py</st>`<st c="2674">, add
    the following</st> <st c="2694">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: <st c="2963">Let’s explain the</st> <st c="2982">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2996">We import the</st> `<st c="3011">Movie</st>` <st c="3016">model
    from the</st> `<st c="3032">models</st>` <st c="3038">file.</st> <st c="3045">We
    will use this model to access</st> <st c="3078">database information.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3099">We collect all movies from the database by using the</st> `<st
    c="3153">Movie.objects.all()</st>` <st c="3172">method.</st> `<st c="3181">Movie.objects</st>`
    <st c="3194">is a manager in Django that serves as the default interface to query
    the database table associated with the model.</st> <st c="3310">It provides various
    methods to perform database operations such as creating, updating, deleting, and
    retrieving objects.</st> <st c="3431">The</st> `<st c="3435">all()</st>` <st c="3440">method
    fetches all objects from the database</st> <st c="3485">table represented by the
    model.</st> <st c="3518">Remember that we previously collected the movie information
    by using the</st> `<st c="3591">movies</st>` <st c="3597">variable; now, we use
    the</st> `<st c="3624">Movie</st>` <st c="3629">Django model.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="3643">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3648">Django offers several methods to manipulate and access database
    information.</st> <st c="3726">You can find more of these methods</st> <st c="3761">here:</st>
    [<st c="3767">https://docs.djangoproject.com/en/5.0/topics/db/queries/</st>](https://docs.djangoproject.com/en/5.0/topics/db/queries/)<st
    c="3823">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3824">Updating the movies.index template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="3859">In</st> `<st c="3863">/movies/templates/movies/index.html</st>`<st
    c="3898">, add the</st> <st c="3908">following</st> <st c="3918">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4302">We have removed the default image, and now we will show the specific
    image for each movie.</st> <st c="4394">Therefore, we will include</st> <st c="4421">a
    custom CSS class to display the images with the same proportion.</st> <st c="4488">We
    will add this CSS</st> <st c="4509">class next.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4520">Adding a custom CSS class</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="4546">In</st> `<st c="4550">/moviesstore/static/css/style.css</st>`<st
    c="4583">, add the</st> <st c="4592">following in bold at the end of</st> <st
    c="4625">the file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: <st c="4692">Now, save those files, run the server, and go to</st> [<st c="4741">http://localhost:8000/movies</st>](http://localhost:8000/movies)<st
    c="4769">; you should see the movies page, which extracts information from the</st>
    <st c="4840">database (</st>*<st c="4850">Figure 6</st>**<st c="4859">.1</st>*<st
    c="4861">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – The movies page](img/B22457_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="4979">Figure 6.1 – The movies page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5007">The movies page now lists movies from the database; let’s complete
    this process by modifying the individual</st> <st c="5116">movie pages.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5128">Updating the listing of an individual movie page</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="5177">Now, let’s update the code to</st> <st c="5207">extract individual
    movie information from the database.</st> <st c="5264">We will need to, first,
    update the show function; second, update the</st> `<st c="5333">movies.show</st>`
    <st c="5344">template; and third, add a custom</st> <st c="5379">CSS class.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5389">Updating show function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="5412">In</st> `<st c="5416">/movies/views.py</st>`<st c="5432">, add
    the</st> <st c="5442">following</st> <st c="5452">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: <st c="5680">Let’s explain the</st> <st c="5699">previous code:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5713">We use the</st> `<st c="5725">Movie.objects.get(id=id)</st>` <st
    c="5749">method to retrieve a specific movie based</st> <st c="5792">on its</st>
    `<st c="5799">id</st>`<st c="5801">. Remember that</st> `<st c="5817">id</st>`
    <st c="5819">is passed by the URL and received as a parameter in the</st> `<st
    c="5876">show</st>` <st c="5880">function.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="5890">We now access</st> `<st c="5905">movie.name</st>` <st c="5915">as
    an object attribute.</st> <st c="5940">Previously, we accessed the name as a key
    (</st>`<st c="5983">movie['name']</st>`<st c="5997">), since the dummy data variable</st>
    <st c="6031">stored dictionaries.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="6051">Updating the movies.show template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6085">In</st> `<st c="6089">/movies/templates/movies/show.html</st>`<st
    c="6123">, add the</st> <st c="6132">following</st> <st c="6143">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6500">Similar to the previous</st> <st c="6524">code, we now show the
    specific movie image and use a custom CSS class to display movie images with the</st>
    <st c="6628">same proportion.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6644">Adding a custom CSS class</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="6670">In</st> `<st c="6674">/moviesstore/static/css/style.css</st>`<st
    c="6707">, add the</st> <st c="6716">following in bold at the end of</st> <st
    c="6749">the file:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: <st c="6816">Now, save those files, run the server, and go to a specific movie
    at</st> [<st c="6885">http://localhost:8000/movies/1</st>](http://localhost:8000/movies/1)<st
    c="6915">; you should see the individual movie page, which extracts movie information
    from the database (</st>*<st c="7012">Figure 6</st>**<st c="7021">.2</st>*<st
    c="7023">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – An individual movie page](img/B22457_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7199">Figure 6.2 – An individual movie page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7236">We are now listing movies and</st> <st c="7266">individual movies
    from the database.</st> <st c="7304">Finally, let’s include a new functionality
    to be able to</st> <st c="7361">search movies.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7375">Implementing a search movie functionality</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="7417">Let’s finalize this chapter by implementing a</st> <st c="7463">search
    movie functionality.</st> <st c="7492">We will need to, first, update the</st>
    `<st c="7527">movies.index</st>` <st c="7539">template, and second, update the</st>
    `<st c="7573">index</st>` <st c="7578">function.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7588">Updating the movies.index template</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="7623">In</st> `<st c="7627">/movies/templates/movies/index.html</st>`<st
    c="7662">, add</st> <st c="7668">the following</st> <st c="7682">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '****<st c="8118">We have created an HTML form that</st> <st c="8153">allows
    users to perform a search operation.</st> <st c="8197">This form will direct to
    the current URL route and send the</st> `<st c="8257">search</st>` <st c="8263">information
    by the URL.</st> <st c="8288">For example, if we search for</st> `<st c="8318">Avatar</st>`<st
    c="8324">, it will direct us</st> <st c="8344">to</st> `<st c="8347">http://localhost:8000/movies/?search=Avatar</st>`<st
    c="8390">.</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8391">Updating index function</st>
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: <st c="8415">In</st> `<st c="8419">/movies/views.py</st>`<st c="8435">, add
    the</st> <st c="8445">following</st> <st c="8455">in bold:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8798">The</st> `<st c="8803">index</st>` <st c="8808">function has changed.</st>
    <st c="8831">Now, it will retrieve all movies if the</st> `<st c="8871">search</st>`
    <st c="8877">parameter is not sent in the current request, or it will retrieve
    specific movies based on the</st> `<st c="8973">search</st>` <st c="8979">parameter.</st>
    <st c="8991">Let’s explain the</st> <st c="9009">previous code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9023">We retrieve the value of the</st> `<st c="9053">search</st>` <st
    c="9059">parameter by using the</st> `<st c="9083">request.GET.get('search')</st>`
    <st c="9108">method and assign that value to the</st> `<st c="9145">search_term</st>`
    <st c="9156">variable.</st> <st c="9167">Here, we capture the</st> `<st c="9188">search</st>`
    <st c="9194">input value submitted through the form defined in the</st> <st c="9249">previous
    section.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9266">If</st> `<st c="9270">search_term</st>` <st c="9281">is not empty,
    we filter movies where the name contains</st> `<st c="9337">search_term</st>`<st
    c="9348">. The</st> `<st c="9354">__icontains</st>` <st c="9365">lookup is used
    for a case-insensitive</st> <st c="9404">containment search.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9423">If</st> `<st c="9427">search_term</st>` <st c="9438">is empty,
    we retrieve all movies from the database without applying</st> <st c="9507">any
    filters.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9519">Finally, we pass the extracted</st> `<st c="9551">movies</st>`
    <st c="9557">to the</st> `<st c="9565">template_data</st>` <st c="9578">dictionary.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="9590">Now, save those files, run the</st> <st c="9622">server, go to</st>
    `<st c="9636">http://localhost:8000/movies</st>`<st c="9664">, enter a search
    term, and submit the form; you should see the movies that match the search term
    (</st>*<st c="9762">Figure 6</st>**<st c="9771">.3</st>*<st c="9773">).</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – The movies page with a custom search](img/B22457_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9876">Figure 6.3 – The movies page with a custom search</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9925">We have refactored our</st> *<st c="9949">Movies Store</st>* <st
    c="9961">code to work with the database instead of dummy data.</st> <st c="10016">This
    strategy enables us to include new movies or edit existing ones without modifying
    our Python code.</st> <st c="10120">Additionally, the addition of the search functionality
    has helped us understand how to filter different data in Django and enhanced the</st>
    <st c="10256">project’s</st> <st c="10265">features.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10275">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="10283">In this chapter, we learned how to extract information from the
    database.</st> <st c="10358">We learned different Django model methods, such as</st>
    `<st c="10409">all</st>`<st c="10412">,</st> `<st c="10414">get</st>`<st c="10417">,
    and</st> `<st c="10423">filter</st>`<st c="10429">, and how they can be used to
    retrieve different kinds of information.</st> <st c="10500">We refactored the
    movies and individual movie pages to collect information from the database and
    learned how to implement</st> <st c="10622">search functionality.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10643">In the next chapter, we will go deeper into understanding how
    the</st> <st c="10710">database works.</st>******
  prefs: []
  type: TYPE_NORMAL
