["```py\nfrom rest_framework import serializers \nfrom games.models import Game \n\nclass GameSerializer(serializers.ModelSerializer): \n    class Meta: \n        model = Game \n        fields = ('id',  \n                  'name',  \n                  'release_date', \n                  'game_category',  \n                  'played') \n\n```", "```py\npython manage.py runserver\n\n```", "```py\nhttp :8000/games/ Accept:text/html\nhttp :8000/games/ Accept:application/json\n\n```", "```py\ncurl -H 'Accept: text/html' -iX GET :8000/games/\ncurl -H 'Accept: application/json' -iX GET :8000/games/\n\n```", "```py\nContent-Type: application/json\n\n```", "```py\nhttp OPTIONS :8000/games/\n\n```", "```py\ncurl -iX OPTIONS :8000/games/\n\n```", "```py\nInternal Server Error: /games/ \nTraceback (most recent call last): \n  File \"/Users/gaston/Projects/PythonRESTfulWebAPI/Django01/lib/python3.5/site-packages/django/core/handlers/base.py\", line 158, in get_response \n    % (callback.__module__, view_name)) \nValueError: The view games.views.game_list didn't return an HttpResponse object. It returned None instead. \n[08/Jun/2016 20:21:40] \"OPTIONS /games/ HTTP/1.1\" 500 49173 \n\n```", "```py\nHTTP/1.0 500 Internal Server Error \nContent-Type: text/html \nDate: Wed, 08 Jun 2016 20:21:40 GMT \nServer: WSGIServer/0.2 CPython/3.5.1 \nX-Frame-Options: SAMEORIGIN \n\n```", "```py\nhttp OPTIONS :8000/games/3/\n\n```", "```py\ncurl -iX OPTIONS :8000/games/3/\n\n```", "```py\n( \n    'rest_framework.parsers.JSONParser', \n    'rest_framework.parsers.FormParser', \n    'rest_framework.parsers.MultiPartParser' \n) \n\n```", "```py\ngame_data = JSONParser().parse(request) \ngame_serializer = GameSerializer(data=game_data) \n\n```", "```py\ngame_serializer = GameSerializer(data=request.data) \n\n```", "```py\ngame_data = JSONParser().parse(request) \ngame_serializer = GameSerializer(game, data=game_data) \n\n```", "```py\ngame_serializer = GameSerializer(game, data=request.data) \n\n```", "```py\n( \n    'rest_framework.renderers.JSONRenderer', \n    'rest_framework.renderers.BrowsableAPIRenderer', \n) \n\n```", "```py\nfrom rest_framework.parsers import JSONParser \nfrom rest_framework import status \nfrom rest_framework.decorators import api_view \nfrom rest_framework.response import Response \nfrom games.models import Game \nfrom games.serializers import GameSerializer \n\n@api_view(['GET', 'POST']) \ndef game_list(request): \n    if request.method == 'GET': \n        games = Game.objects.all() \n        games_serializer = GameSerializer(games, many=True) \n        return Response(games_serializer.data) \n\n    elif request.method == 'POST': \n        game_serializer = GameSerializer(data=request.data) \n        if game_serializer.is_valid(): \n            game_serializer.save() \n            return Response(game_serializer.data, status=status.HTTP_201_CREATED) \nreturn Response(game_serializer.errors, status=status.HTTP_400_BAD_REQUEST) \n\n@api_view(['GET', 'PUT', 'POST']) \ndef game_detail(request, pk): \n    try: \n        game = Game.objects.get(pk=pk) \n    except Game.DoesNotExist: \n        return Response(status=status.HTTP_404_NOT_FOUND) \n\n    if request.method == 'GET': \n        game_serializer = GameSerializer(game) \n        return Response(game_serializer.data) \n\n    elif request.method == 'PUT': \n        game_serializer = GameSerializer(game, data=request.data) \n        if game_serializer.is_valid(): \n            game_serializer.save() \n            return Response(game_serializer.data) \n        return Response(game_serializer.errors, status=status.HTTP_400_BAD_REQUEST) \n\n    elif request.method == 'DELETE': \n        game.delete() \n    return Response(status=status.HTTP_204_NO_CONTENT) \n\n```", "```py\nhttp OPTIONS :8000/games/\n\n```", "```py\ncurl -iX OPTIONS :8000/games/\n\n```", "```py\nHTTP/1.0 200 OK\nAllow: GET, POST, OPTIONS\nContent-Type: application/json\nDate: Thu, 09 Jun 2016 20:24:31 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n{\n \"description\": \"\", \n \"name\": \"Game List\", \n \"parses\": [\n \"application/json\", \n \"application/x-www-form-urlencoded\", \n \"multipart/form-data\"\n ], \n \"renders\": [\n \"application/json\", \n \"text/html\"\n ]\n}\n\n```", "```py\nhttp OPTIONS :8000/games/3/\n\n```", "```py\ncurl -iX OPTIONS :8000/games/3/\n\n```", "```py\nHTTP/1.0 200 OK\nAllow: GET, POST, OPTIONS, PUT\nContent-Type: application/json\nDate: Thu, 09 Jun 2016 21:35:58 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n{\n \"description\": \"\", \n \"name\": \"Game Detail\", \n \"parses\": [\n \"application/json\", \n \"application/x-www-form-urlencoded\", \n \"multipart/form-data\"\n ], \n \"renders\": [\n \"application/json\", \n \"text/html\"\n ]\n}\n\n```", "```py\nhttp -f POST :8000/games/ name='Toy Story 4' game_category='3D RPG'\n    played=false release_date='2016-05-18T03:02:00.776594Z'\n\n```", "```py\ncurl -iX POST -d '{\"name\":\"Toy Story 4\", \"game_category\":\"3D RPG\", \"played\":\n    \"false\", \"release_date\": \"2016-05-18T03:02:00.776594Z\"}' :8000/games/\n\n```", "```py\nname=Toy+Story+4&game_category=3D+RPG&played=false&release_date=2016-05-18T03%3A02%3A00.776594Z \n\n```", "```py\nHTTP/1.0 201 Created\nAllow: OPTIONS, POST, GET\nContent-Type: application/json\nDate: Fri, 10 Jun 2016 20:38:40 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n{\n \"game_category\": \"3D RPG\", \n \"id\": 20, \n \"name\": \"Toy Story 4\", \n \"played\": false, \n \"release_date\": \"2016-05-18T03:02:00.776594Z\"\n}\n\n```", "```py\nhttp PUT :8000/games/\n\n```", "```py\ncurl -iX PUT :8000/games/\n\n```", "```py\nHTTP/1.0 405 Method Not Allowed\nAllow: GET, OPTIONS, POST\nContent-Type: application/json\nDate: Sat, 11 Jun 2016 00:49:30 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n{\n \"detail\": \"Method \"PUT\" not allowed.\"\n}\n\n```", "```py\n{ \n    \"name\": \"Chuzzle 2\", \n    \"release_date\": \"2016-05-18T03:02:00.776594Z\", \n    \"game_category\": \"2D mobile\", \n    \"played\": false \n} \n\n```", "```py\nGET http://localhost:8000/game-categories/ \n\n```", "```py\nfrom django.db import models \n\nclass GameCategory(models.Model): \n    name = models.CharField(max_length=200) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name \n\nclass Game(models.Model): \n    created = models.DateTimeField(auto_now_add=True) \n    name = models.CharField(max_length=200) \n    game_category = models.ForeignKey( \n        GameCategory,  \n        related_name='games',  \n        on_delete=models.CASCADE) \n    release_date = models.DateTimeField() \n    played = models.BooleanField(default=False) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name \n\nclass Player(models.Model): \n    MALE = 'M' \n    FEMALE = 'F' \n    GENDER_CHOICES = ( \n         (MALE, 'Male'), \n         (FEMALE, 'Female'), \n    ) \n    created = models.DateTimeField(auto_now_add=True) \n    name = models.CharField(max_length=50, blank=False, default='') \n    gender = models.CharField( \n        max_length=2, \n        choices=GENDER_CHOICES, \n        default=MALE, \n    ) \n\n    class Meta: \n        ordering = ('name',) \n\n    def __str__(self): \n        return self.name \n\nclass PlayerScore(models.Model): \n    player = models.ForeignKey( \n        Player,  \n        related_name='scores',  \n        on_delete=models.CASCADE) \n    game = models.ForeignKey( \n        Game,  \n        on_delete=models.CASCADE) \n    score = models.IntegerField() \n    score_date = models.DateTimeField() \n\n    class Meta: \n        # Order by score descending \n        ordering = ('-score',) \n\n```", "```py\ngame_category = models.ForeignKey( \n    GameCategory,  \n    related_name='games',  \n    on_delete=models.CASCADE) \n\n```", "```py\nplayer = models.ForeignKey( \n    Player,  \n    related_name='scores',  \n    on_delete=models.CASCADE) \n\n```", "```py\ngame = models.ForeignKey( \n    Game,  \n    on_delete=models.CASCADE) \n\n```", "```py\ncreatedb games\n\n```", "```py\nsudo -u postgres createdb games\n\n```", "```py\npsql\n\n```", "```py\nsudo -u postgres psql\n\n```", "```py\nsudo -u psql\n\n```", "```py\nCREATE ROLE user_name WITH LOGIN PASSWORD 'password';\nGRANT ALL PRIVILEGES ON DATABASE games TO user_name;\nALTER USER user_name CREATEDB;\n\\q\n\n```", "```py\nDATABASES = { \n    'default': { \n        'ENGINE': 'django.db.backends.postgresql', \n        # Replace games with your desired database name \n        'NAME': 'games', \n        # Replace username with your desired user name \n        'USER': 'user_name', \n        # Replace password with your desired password \n        'PASSWORD': 'password', \n        # Replace 127.0.0.1 with the PostgreSQL host \n        'HOST': '127.0.0.1', \n        # Replace 5432 with the PostgreSQL configured port \n        # in case you aren't using the default port \n        'PORT': '5432', \n    } \n} \n\n```", "```py\nexport PATH=$PATH:/Applications/Postgres.app/Contents/Versions/latest/bin\n\n```", "```py\npip install psycopg2\n\n```", "```py\nCollecting psycopg2\nInstalling collected packages: psycopg2\nRunning setup.py install for psycopg2\nSuccessfully installed psycopg2-2.6.2\n\n```", "```py\npython manage.py makemigrations games\n\n```", "```py\nMigrations for 'games':\n 0001_initial.py:\n - Create model Game\n - Create model GameCategory\n - Create model Player\n - Create model PlayerScore\n - Add field game_category to game\n\n```", "```py\n# -*- coding: utf-8 -*- \n# Generated by Django 1.9.7 on 2016-06-17 20:39 \nfrom __future__ import unicode_literals \n\nfrom django.db import migrations, models \nimport django.db.models.deletion \n\nclass Migration(migrations.Migration): \n\n    initial = True \n\n    dependencies = [ \n    ] \n\n    operations = [ \n        migrations.CreateModel( \n            name='Game', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('created', models.DateTimeField(auto_now_add=True)), \n                ('name', models.CharField(max_length=200)), \n                ('release_date', models.DateTimeField()), \n                ('played', models.BooleanField(default=False)), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='GameCategory', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('name', models.CharField(max_length=200)), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='Player', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('created', models.DateTimeField(auto_now_add=True)), \n                ('name', models.CharField(default='', max_length=50)), \n                ('gender', models.CharField(choices=[('M', 'Male'), ('F', 'Female')], default='M', max_length=2)), \n            ], \n            options={ \n                'ordering': ('name',), \n            }, \n        ), \n        migrations.CreateModel( \n            name='PlayerScore', \n            fields=[ \n                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')), \n                ('score', models.IntegerField()), \n                ('score_date', models.DateTimeField()), \n                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='games.Game')), \n                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='scores', to='games.Player')), \n            ], \n            options={ \n                'ordering': ('-score',), \n            }, \n        ), \n        migrations.AddField( \n            model_name='game', \n            name='game_category', \n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='games', to='games.GameCategory'), \n        ), \n    ] \n\n```", "```py\npython manage.py migrate\n\n```", "```py\nOperations to perform:\n Apply all migrations: sessions, contenttypes, games, admin, auth\nRunning migrations:\n Rendering model states... DONE\n Applying contenttypes.0001_initial... OK\n Applying auth.0001_initial... OK\n Applying admin.0001_initial... OK\n Applying admin.0002_logentry_remove_auto_add... OK\n Applying contenttypes.0002_remove_content_type_name... OK\n Applying auth.0002_alter_permission_name_max_length... OK\n Applying auth.0003_alter_user_email_max_length... OK\n Applying auth.0004_alter_user_username_opts... OK\n Applying auth.0005_alter_user_last_login_null... OK\n Applying auth.0006_require_contenttypes_0002... OK\n Applying auth.0007_alter_validators_add_error_messages... OK\n Applying games.0001_initial... OK\n Applying sessions.0001_initial... OK\n\n```", "```py\npsql --username=user_name --dbname=games --command=\"\\dt\"\n\n```", "```py\n List of relations\n Schema |            Name            | Type  |   Owner \n--------+----------------------------+-------+-----------\n public | auth_group                 | table | user_name\n public | auth_group_permissions     | table | user_name\n public | auth_permission            | table | user_name\n public | auth_user                  | table | user_name\n public | auth_user_groups           | table | user_name\n public | auth_user_user_permissions | table | user_name\n public | django_admin_log           | table | user_name\n public | django_content_type        | table | user_name\n public | django_migrations          | table | user_name\n public | django_session             | table | user_name\n public | games_game                 | table | user_name\n public | games_gamecategory         | table | user_name\n public | games_player               | table | user_name\n public | games_playerscore          | table | user_name\n(14 rows)\n\n```", "```py\npsql --username=user_name --dbname=games --command=\"SELECT * FROM games_gamecategory;\"\npsql --username=user_name --dbname=games --command=\"SELECT * FROM games_game;\"\npsql --username=user_name --dbname=games --command=\"SELECT * FROM games_player;\"\npsql --username=user_name --dbname=games --command=\"SELECT * FROM games_playerscore;\"\n\n```", "```py\nfrom rest_framework import serializers \nfrom games.models import GameCategory \nfrom games.models import Game \nfrom games.models import Player \nfrom games.models import PlayerScore \nimport games.views \n\nclass GameCategorySerializer(serializers.HyperlinkedModelSerializer): \n    games = serializers.HyperlinkedRelatedField( \n        many=True, \n        read_only=True, \n        view_name='game-detail') \n\n    class Meta: \n        model = GameCategory \n        fields = ( \n            'url', \n            'pk', \n            'name', \n            'games') \n\n```", "```py\nclass GameSerializer(serializers.HyperlinkedModelSerializer): \n    # We want to display the game cagory's name instead of the id \n    game_category = serializers.SlugRelatedField(queryset=GameCategory.objects.all(), slug_field='name') \n\n    class Meta: \n        model = Game \n        fields = ( \n            'url', \n            'game_category', \n            'name', \n            'release_date', \n            'played') \n\n```", "```py\nclass ScoreSerializer(serializers.HyperlinkedModelSerializer): \n    # We want to display all the details for the game \n    game = GameSerializer() \n    # We don't include the player because it will be nested in the player \n    class Meta: \n        model = PlayerScore \n        fields = ( \n            'url', \n            'pk', \n            'score', \n            'score_date', \n            'game', \n            ) \n\n```", "```py\nclass PlayerSerializer(serializers.HyperlinkedModelSerializer): \n    scores = ScoreSerializer(many=True, read_only=True) \n    gender = serializers.ChoiceField( \n        choices=Player.GENDER_CHOICES) \n    gender_description = serializers.CharField( \n        source='get_gender_display',  \n        read_only=True) \n\n    class Meta: \n        model = Player \n        fields = ( \n            'url', \n            'name', \n            'gender', \n            'gender_description', \n            'scores', \n            ) \n\n```", "```py\nclass PlayerScoreSerializer(serializers.ModelSerializer): \n    player = serializers.SlugRelatedField(queryset=Player.objects.all(), slug_field='name') \n    # We want to display the game's name instead of the id \n    game = serializers.SlugRelatedField(queryset=Game.objects.all(), slug_field='name') \n\n    class Meta: \n        model = PlayerScore \n        fields = ( \n            'url', \n            'pk', \n            'score', \n            'score_date', \n            'player', \n            'game', \n            ) \n\n```", "```py\nclass ListCreateAPIView(mixins.ListModelMixin, \n                        mixins.CreateModelMixin, \n                        GenericAPIView): \n\n```", "```py\nclass RetrieveUpdateDestroyAPIView(mixins.RetrieveModelMixin, \n                                   mixins.UpdateModelMixin, \n                                   mixins.DestroyModelMixin, \n                                   GenericAPIView): \n\n```", "```py\nfrom games.models import GameCategory \nfrom games.models import Game \nfrom games.models import Player \nfrom games.models import PlayerScore \nfrom games.serializers import GameCategorySerializer \nfrom games.serializers import GameSerializer \nfrom games.serializers import PlayerSerializer \nfrom games.serializers import PlayerScoreSerializer \nfrom rest_framework import generics \nfrom rest_framework.response import Response \nfrom rest_framework.reverse import reverse \n\nclass GameCategoryList(generics.ListCreateAPIView): \n    queryset = GameCategory.objects.all() \n    serializer_class = GameCategorySerializer \n    name = 'gamecategory-list' \n\nclass GameCategoryDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = GameCategory.objects.all() \n    serializer_class = GameCategorySerializer \n    name = 'gamecategory-detail' \n\nclass GameList(generics.ListCreateAPIView): \n    queryset = Game.objects.all() \n    serializer_class = GameSerializer \n    name = 'game-list' \n\nclass GameDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Game.objects.all() \n    serializer_class = GameSerializer \n    name = 'game-detail' \n\nclass PlayerList(generics.ListCreateAPIView): \n    queryset = Player.objects.all() \n    serializer_class = PlayerSerializer \n    name = 'player-list' \n\nclass PlayerDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = Player.objects.all() \n    serializer_class = PlayerSerializer \n    name = 'player-detail' \n\nclass PlayerScoreList(generics.ListCreateAPIView): \n    queryset = PlayerScore.objects.all() \n    serializer_class = PlayerScoreSerializer \n    name = 'playerscore-list' \n\nclass PlayerScoreDetail(generics.RetrieveUpdateDestroyAPIView): \n    queryset = PlayerScore.objects.all() \n    serializer_class = PlayerScoreSerializer \n    name = 'playerscore-detail' \n\n```", "```py\nclass ApiRoot(generics.GenericAPIView): \n    name = 'api-root' \n    def get(self, request, *args, **kwargs): \n        return Response({ \n            'players': reverse(PlayerList.name, request=request), \n            'game-categories': reverse(GameCategoryList.name, request=request), \n            'games': reverse(GameList.name, request=request), \n            'scores': reverse(PlayerScoreList.name, request=request) \n            }) \n\n```", "```py\nfrom django.conf.urls import url \nfrom games import views \n\nurlpatterns = [ \n    url(r'^game-categories/$',  \n        views.GameCategoryList.as_view(),  \n        name=views.GameCategoryList.name), \n    url(r'^game-categories/(?P<pk>[0-9]+)/$',  \n        views.GameCategoryDetail.as_view(), \n        name=views.GameCategoryDetail.name), \n    url(r'^games/$',  \n        views.GameList.as_view(), \n        name=views.GameList.name), \n    url(r'^games/(?P<pk>[0-9]+)/$',  \n        views.GameDetail.as_view(), \n        name=views.GameDetail.name), \n    url(r'^players/$',  \n        views.PlayerList.as_view(), \n        name=views.PlayerList.name), \n    url(r'^players/(?P<pk>[0-9]+)/$',  \n        views.PlayerDetail.as_view(), \n        name=views.PlayerDetail.name), \n    url(r'^player-scores/$',  \n        views.PlayerScoreList.as_view(), \n        name=views.PlayerScoreList.name), \n    url(r'^player-scores/(?P<pk>[0-9]+)/$',  \n        views.PlayerScoreDetail.as_view(), \n        name=views.PlayerScoreDetail.name), \n    url(r'^$', \n        views.ApiRoot.as_view(), \n        name=views.ApiRoot.name), \n] \n\n```", "```py\npython manage.py runserver\npython manage.py runserver 0.0.0.0:8000\n\n```", "```py\nhttp POST :8000/game-categories/ name='2D mobile arcade'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"2D mobile arcade\"}' :8000/game-categories/\n\n```", "```py\n{ \n    \"games\": [],  \n    \"name\": \"2D mobile arcade\",  \n    \"pk\": 4,  \n    \"url\": \"http://localhost:8000/game-categories/4/\" \n} \n\n```", "```py\nhttp POST :8000/games/ name='PvZ Garden Warfare 4' game_category='3D RPG' played=false release_date='2016-06-21T03:02:00.776594Z'\nhttp POST :8000/games/ name='Superman vs Aquaman' game_category='3D RPG' played=false release_date='2016-06-21T03:02:00.776594Z'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"PvZ Garden Warfare 4\", \"game_category\":\"3D RPG\", \"played\": \"false\", \"release_date\": \"2016-06-21T03:02:00.776594Z\"}' :8000/games/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\" Superman vs Aquaman\", \"game_category\":\"3D RPG\", \"played\": \"false\", \"release_date\": \"2016-06-21T03:02:00.776594Z\"}' :8000/games/\n\n```", "```py\n{ \n    \"game_category\": \"3D RPG\",  \n    \"name\": \"PvZ Garden Warfare 4\",  \n    \"played\": false,  \n    \"release_date\": \"2016-06-21T03:02:00.776594Z\",  \n    \"url\": \"http://localhost:8000/games/2/\" \n} \n{ \n    \"game_category\": \"3D RPG\",  \n    \"name\": \"Superman vs Aquaman\",  \n    \"played\": false,  \n    \"release_date\": \"2016-06-21T03:02:00.776594Z\",  \n    \"url\": \"http://localhost:8000/games/3/\" \n} \n\n```", "```py\nhttp :8000/game-categories/3/\n\n```", "```py\ncurl -iX GET :8000/game-categories/3/\n\n```", "```py\nHTTP/1.0 200 OK\nAllow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nDate: Tue, 21 Jun 2016 23:32:04 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n{\n \"games\": [\n \"http://localhost:8000/games/2/\", \n \"http://localhost:8000/games/3/\"\n ], \n \"name\": \"3D RPG\", \n \"pk\": 3, \n \"url\": \"http://localhost:8000/game-categories/3/\"\n}\n\n```", "```py\nhttp POST :8000/games/ name='Captain America vs Thor' game_category='Virtual reality' played=false release_date='2016-06-21T03:02:00.776594Z'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"'Captain America vs Thor\", \"game_category\":\"Virtual reality\", \"played\": \"false\", \"release_date\": \"2016-06-21T03:02:00.776594Z\"}' :8000/games/\n\n```", "```py\nHTTP/1.0 400 Bad Request\nAllow: GET, POST, HEAD, OPTIONS\nContent-Type: application/json\nDate: Tue, 21 Jun 2016 23:51:19 GMT\nServer: WSGIServer/0.2 CPython/3.5.1\nVary: Accept, Cookie\nX-Frame-Options: SAMEORIGIN\n{\n \"game_category\": [\n \"Object with name=Virtual reality does not exist.\"\n ]\n}\n\n```", "```py\nhttp POST :8000/players/ name='Brandon' gender='M'\nhttp POST :8000/players/ name='Kevin' gender='M'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\"Brandon\", \"gender\":\"M\"}' :8000/players/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"name\":\" Kevin\", \"gender\":\"M\"}' :8000/players/\n\n```", "```py\n{ \n    \"gender\": \"M\",  \n    \"name\": \"Brandon\",  \n    \"scores\": [],  \n    \"url\": \"http://localhost:8000/players/2/\" \n} \n{ \n    \"gender\": \"M\",  \n    \"name\": \"Kevin\",  \n    \"scores\": [],  \n    \"url\": \"http://localhost:8000/players/3/\" \n} \n\n```", "```py\nhttp POST :8000/player-scores/ score=35000 score_date='2016-06-21T03:02:00.776594Z' player='Brandon' game='PvZ Garden Warfare 4'\nhttp POST :8000/player-scores/ score=85125 score_date='2016-06-22T01:02:00.776594Z' player='Brandon' game='PvZ Garden Warfare 4'\nhttp POST :8000/player-scores/ score=123200 score_date='2016-06-22T03:02:00.776594Z' player='Kevin' game='Superman vs Aquaman'\nhttp POST :8000/player-scores/ score=11200 score_date='2016-06-22T05:02:00.776594Z' player='Kevin' game='PvZ Garden Warfare 4'\n\n```", "```py\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"score\":\"35000\", \"score_date\":\"2016-06-21T03:02:00.776594Z\", \"player\":\"Brandon\", \"game\":\"PvZ Garden Warfare 4\"}' :8000/player-scores/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"score\":\"85125\", \"score_date\":\"2016-06-22T01:02:00.776594Z\", \"player\":\"Brandon\", \"game\":\"PvZ Garden Warfare 4\"}' :8000/player-scores/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"score\":\"123200\", \"score_date\":\"2016-06-22T03:02:00.776594Z\", \"player\":\"Kevin\", \"game\":\"'Superman vs Aquaman\"}' :8000/player-scores/\ncurl -iX POST -H \"Content-Type: application/json\" -d '{\"score\":\"11200\", \"score_date\":\"2016-06-22T05:02:00.776594Z\", \"player\":\"Kevin\", \"game\":\"PvZ Garden Warfare 4\"}' :8000/player-scores/\n\n```", "```py\n{ \n    \"game\": \"PvZ Garden Warfare 4\",  \n    \"pk\": 3,  \n    \"player\": \"Brandon\",  \n    \"score\": 35000,  \n    \"score_date\": \"2016-06-21T03:02:00.776594Z\",  \n    \"url\": \"http://localhost:8000/player-scores/3/\" \n} \n{ \n    \"game\": \"PvZ Garden Warfare 4\",  \n    \"pk\": 4,  \n    \"player\": \"Brandon\",  \n    \"score\": 85125,  \n    \"score_date\": \"2016-06-22T01:02:00.776594Z\",  \n    \"url\": \"http://localhost:8000/player-scores/4/\" \n} \n{ \n    \"game\": \"Superman vs Aquaman\",  \n    \"pk\": 5,  \n    \"player\": \"Kevin\",  \n    \"score\": 123200,  \n    \"score_date\": \"2016-06-22T03:02:00.776594Z\",  \n    \"url\": \"http://localhost:8000/player-scores/5/\" \n} \n{ \n    \"game\": \"PvZ Garden Warfare 4\",  \n    \"pk\": 6,  \n    \"player\": \"Kevin\",  \n    \"score\": 11200,  \n    \"score_date\": \"2016-06-22T05:02:00.776594Z\",  \n    \"url\": \"http://localhost:8000/player-scores/6/\" \n} \n\n```", "```py\nhttp :8000/players/3/\n\n```", "```py\ncurl -iX GET :8000/players/3/\n\n```", "```py\nHTTP 200 OK\nAllow: GET, PUT, PATCH, DELETE, HEAD, OPTIONS\nContent-Type: application/json\nVary: Accept\n{\n \"url\": \"http://localhost:8000/players/3/\",\n \"name\": \"Kevin\",\n \"gender\": \"M\",\n \"gender_description\": \"Male\",\n \"scores\": [\n {\n \"url\": \"http://localhost:8000/player-scores/5/\",\n \"pk\": 5,\n \"score\": 123200,\n \"score_date\": \"2016-06-22T03:02:00.776594Z\",\n \"game\": {\n \"url\": \"http://localhost:8000/games/3/\",\n \"game_category\": \"3D RPG\",\n \"name\": \"Superman vs Aquaman\",\n \"release_date\": \"2016-06-21T03:02:00.776594Z\",\n \"played\": false\n }\n },\n {\n \"url\": \"http://localhost:8000/player-scores/6/\",\n \"pk\": 6,\n \"score\": 11200,\n \"score_date\": \"2016-06-22T05:02:00.776594Z\",\n \"game\": {\n \"url\": \"http://localhost:8000/games/2/\",\n \"game_category\": \"3D RPG\",\n \"name\": \"PvZ Garden Warfare 4\",\n \"release_date\": \"2016-06-21T03:02:00.776594Z\",\n \"played\": false\n }\n }\n ]\n}\n\n```"]