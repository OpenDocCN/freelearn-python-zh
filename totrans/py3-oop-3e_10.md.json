["```py\nimport socket\n\ndef respond(client):\n    response = input(\"Enter a value: \")\n    client.send(bytes(response, \"utf8\"))\n    client.close()\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind((\"localhost\", 2401))\nserver.listen(1)\ntry:\n    while True:\n        client, addr = server.accept()\n        respond(client)\nfinally:\n    server.close()\n```", "```py\nimport socket\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect((\"localhost\", 2401))\nprint(\"Received: {0}\".format(client.recv(1024)))\nclient.close()\n```", "```py\nclass LogSocket:\n    def __init__(self, socket):\n        self.socket = socket\n\n    def send(self, data):\n        print(\n            \"Sending {0} to {1}\".format(\n                data, self.socket.getpeername()[0]\n            )\n        )\n        self.socket.send(data)\n\n    def close(self):\n        self.socket.close()\n```", "```py\nrespond(LogSocket(client)) \n```", "```py\nimport gzip\nfrom io import BytesIO\n\nclass GzipSocket:\n    def __init__(self, socket):\n        self.socket = socket\n\n    def send(self, data):\n        buf = BytesIO()\n        zipfile = gzip.GzipFile(fileobj=buf, mode=\"w\")\n        zipfile.write(data)\n        zipfile.close()\n        self.socket.send(buf.getvalue())\n\n    def close(self):\n        self.socket.close()\n```", "```py\n        client, addr = server.accept() \n        if log_send: \n            client = LogSocket(client) \n        if client.getpeername()[0] in compress_hosts: \n            client = GzipSocket(client) \n        respond(client) \n```", "```py\nimport time\n\ndef log_calls(func):\n    def wrapper(*args, **kwargs):\n        now = time.time()\n        print(\n            \"Calling {0} with {1} and {2}\".format(\n                func.__name__, args, kwargs\n            )\n        )\n        return_value = func(*args, **kwargs)\n        print(\n            \"Executed {0} in {1}ms\".format(\n                func.__name__, time.time() - now\n            )\n        )\n        return return_value\n\n    return wrapper\n\ndef test1(a, b, c):\n    print(\"\\ttest1 called\")\n\ndef test2(a, b):\n    print(\"\\ttest2 called\")\n\ndef test3(a, b):\n    print(\"\\ttest3 called\")\n    time.sleep(1)\n\ntest1 = log_calls(test1)\ntest2 = log_calls(test2)\ntest3 = log_calls(test3)\n\ntest1(1, 2, 3)\ntest2(4, b=5)\ntest3(6, 7)\n\n```", "```py\n@log_calls \ndef test1(a,b,c): \n    print(\"\\ttest1 called\") \n```", "```py\nclass Inventory:\n    def __init__(self):\n        self.observers = []\n        self._product = None\n        self._quantity = 0\n\n    def attach(self, observer):\n        self.observers.append(observer)\n\n    @property\n    def product(self):\n        return self._product\n\n    @product.setter\n    def product(self, value):\n        self._product = value\n        self._update_observers()\n\n    @property\n    def quantity(self):\n        return self._quantity\n\n    @quantity.setter\n    def quantity(self, value):\n        self._quantity = value\n self._update_observers()\n\n def _update_observers(self):\n for observer in self.observers:\n observer()\n```", "```py\nclass ConsoleObserver: \n    def __init__(self, inventory): \n        self.inventory = inventory \n\n    def __call__(self): \n        print(self.inventory.product) \n        print(self.inventory.quantity) \n```", "```py\n    >>> i = Inventory()\n    >>> c = ConsoleObserver(i)\n    >>> i.attach(c)\n    >>> i.product = \"Widget\"\n    Widget\n    0\n    >>> i.quantity = 5\n    Widget\n    5  \n```", "```py\n    >>> i = Inventory()\n    >>> c1 = ConsoleObserver(i)\n    >>> c2 = ConsoleObserver(i)\n    >>> i.attach(c1)\n    >>> i.attach(c2)\n    >>> i.product = \"Gadget\"\n    Gadget\n    0\n    Gadget\n    0  \n```", "```py\nfrom PIL import Image\n\nclass TiledStrategy:\n    def make_background(self, img_file, desktop_size):\n        in_img = Image.open(img_file)\n        out_img = Image.new(\"RGB\", desktop_size)\n        num_tiles = [\n            o // i + 1 for o, i in zip(out_img.size, in_img.size)\n        ]\n        for x in range(num_tiles[0]):\n            for y in range(num_tiles[1]):\n                out_img.paste(\n                    in_img,\n                    (\n                        in_img.size[0] * x,\n                        in_img.size[1] * y,\n                        in_img.size[0] * (x + 1),\n                        in_img.size[1] * (y + 1),\n                    ),\n                )\n        return out_img\n\nclass CenteredStrategy:\n    def make_background(self, img_file, desktop_size):\n        in_img = Image.open(img_file)\n        out_img = Image.new(\"RGB\", desktop_size)\n        left = (out_img.size[0] - in_img.size[0]) // 2\n        top = (out_img.size[1] - in_img.size[1]) // 2\n        out_img.paste(\n            in_img,\n            (left, top, left + in_img.size[0], top + in_img.size[1]),\n        )\n        return out_img\n\nclass ScaledStrategy:\n    def make_background(self, img_file, desktop_size):\n        in_img = Image.open(img_file)\n        out_img = in_img.resize(desktop_size)\n        return out_img\n```", "```py\n<book> \n    <author>Dusty Phillips</author> \n    <publisher>Packt Publishing</publisher> \n    <title>Python 3 Object Oriented Programming</title> \n    <content> \n        <chapter> \n            <number>1</number> \n            <title>Object Oriented Design</title> \n        </chapter> \n        <chapter> \n            <number>2</number> \n            <title>Objects In Python</title> \n        </chapter> \n    </content> \n</book> \n```", "```py\nclass Node:\n    def __init__(self, tag_name, parent=None):\n        self.parent = parent\n        self.tag_name = tag_name\n        self.children = []\n        self.text = \"\"\n\n    def __str__(self):\n        if self.text:\n            return self.tag_name + \": \" + self.text\n        else:\n            return self.tag_name\n```", "```py\nclass Parser: \n    def __init__(self, parse_string): \n        self.parse_string = parse_string \n        self.root = None \n        self.current_node = None \n\n        self.state = FirstTag() \n\n    def process(self, remaining_string): \n        remaining = self.state.process(remaining_string, self) \n        if remaining: \n            self.process(remaining) \n\n    def start(self): \n        self.process(self.parse_string) \n```", "```py\nclass FirstTag:\n    def process(self, remaining_string, parser):\n        i_start_tag = remaining_string.find(\"<\")\n        i_end_tag = remaining_string.find(\">\")\n        tag_name = remaining_string[i_start_tag + 1 : i_end_tag]\n        root = Node(tag_name)\n parser.root = parser.current_node = root\n parser.state = ChildNode()\n        return remaining_string[i_end_tag + 1 :]\n```", "```py\nclass ChildNode: \n    def process(self, remaining_string, parser): \n        stripped = remaining_string.strip() \n        if stripped.startswith(\"</\"): \n parser.state = CloseTag() \n        elif stripped.startswith(\"<\"): \n parser.state = OpenTag() \n        else: \n parser.state = TextNode() \n        return stripped \n```", "```py\nclass OpenTag:\n    def process(self, remaining_string, parser):\n        i_start_tag = remaining_string.find(\"<\")\n        i_end_tag = remaining_string.find(\">\")\n        tag_name = remaining_string[i_start_tag + 1 : i_end_tag]\n        node = Node(tag_name, parser.current_node)\n parser.current_node.children.append(node)\n parser.current_node = node\n parser.state = ChildNode()\n        return remaining_string[i_end_tag + 1 :]\n```", "```py\nclass CloseTag:\n    def process(self, remaining_string, parser):\n        i_start_tag = remaining_string.find(\"<\")\n        i_end_tag = remaining_string.find(\">\")\n        assert remaining_string[i_start_tag + 1] == \"/\"\n        tag_name = remaining_string[i_start_tag + 2 : i_end_tag]\n        assert tag_name == parser.current_node.tag_name\n parser.current_node = parser.current_node.parent\n parser.state = ChildNode()\n        return remaining_string[i_end_tag + 1 :].strip()\n```", "```py\nclass TextNode: \n    def process(self, remaining_string, parser): \n        i_start_tag = remaining_string.find('<') \n        text = remaining_string[:i_start_tag] \n parser.current_node.text = text \n        parser.state = ChildNode() \n        return remaining_string[i_start_tag:] \n```", "```py\n        self.state = FirstTag() \n```", "```py\nif __name__ == \"__main__\": \n    import sys \n    with open(sys.argv[1]) as file: \n        contents = file.read() \n        p = Parser(contents) \n        p.start() \n\n        nodes = [p.root] \n        while nodes: \n            node = nodes.pop(0) \n            print(node) \n            nodes = node.children + nodes \n```", "```py\n    book\n    author: Dusty Phillips\n    publisher: Packt Publishing\n    title: Python 3 Object Oriented Programming\n    content\n    chapter\n    number: 1\n    title: Object Oriented Design\n    chapter\n    number: 2\n    title: Objects In Python  \n```", "```py\nclass OneOnly: \n _singleton = None \n    def __new__(cls, *args, **kwargs): \n        if not cls._singleton: \n cls._singleton = super(OneOnly, cls \n                ).__new__(cls, *args, **kwargs) \n        return cls._singleton \n```", "```py\n    >>> o1 = OneOnly()\n    >>> o2 = OneOnly()\n    >>> o1 == o2\n    True\n    >>> o1\n    <__main__.OneOnly object at 0xb71c008c>\n    >>> o2\n    <__main__.OneOnly object at 0xb71c008c>  \n```", "```py\nclass Node:\n    def __init__(self, tag_name, parent=None):\n        self.parent = parent\n        self.tag_name = tag_name\n        self.children = []\n        self.text = \"\"\n\n    def __str__(self):\n        if self.text:\n            return self.tag_name + \": \" + self.text\n        else:\n            return self.tag_name\n\nclass FirstTag:\n    def process(self, remaining_string, parser):\n        i_start_tag = remaining_string.find(\"<\")\n        i_end_tag = remaining_string.find(\">\")\n        tag_name = remaining_string[i_start_tag + 1 : i_end_tag]\n        root = Node(tag_name)\n        parser.root = parser.current_node = root\n        parser.state = child_node\n        return remaining_string[i_end_tag + 1 :]\n\nclass ChildNode:\n    def process(self, remaining_string, parser):\n        stripped = remaining_string.strip()\n        if stripped.startswith(\"</\"):\n            parser.state = close_tag\n        elif stripped.startswith(\"<\"):\n            parser.state = open_tag\n        else:\n            parser.state = text_node\n        return stripped\n\nclass OpenTag:\n    def process(self, remaining_string, parser):\n        i_start_tag = remaining_string.find(\"<\")\n        i_end_tag = remaining_string.find(\">\")\n        tag_name = remaining_string[i_start_tag + 1 : i_end_tag]\n        node = Node(tag_name, parser.current_node)\n        parser.current_node.children.append(node)\n        parser.current_node = node\n        parser.state = child_node\n        return remaining_string[i_end_tag + 1 :]\n\nclass TextNode:\n    def process(self, remaining_string, parser):\n        i_start_tag = remaining_string.find(\"<\")\n        text = remaining_string[:i_start_tag]\n        parser.current_node.text = text\n        parser.state = child_node\n        return remaining_string[i_start_tag:]\n\nclass CloseTag:\n    def process(self, remaining_string, parser):\n        i_start_tag = remaining_string.find(\"<\")\n        i_end_tag = remaining_string.find(\">\")\n        assert remaining_string[i_start_tag + 1] == \"/\"\n        tag_name = remaining_string[i_start_tag + 2 : i_end_tag]\n        assert tag_name == parser.current_node.tag_name\n        parser.current_node = parser.current_node.parent\n        parser.state = child_node\n        return remaining_string[i_end_tag + 1 :].strip()\n\nfirst_tag = FirstTag()\nchild_node = ChildNode()\ntext_node = TextNode()\nopen_tag = OpenTag()\nclose_tag = CloseTag()\n```", "```py\nimport sqlite3\n\nconn = sqlite3.connect(\"sales.db\")\n\nconn.execute(\n    \"CREATE TABLE Sales (salesperson text, \"\n    \"amt currency, year integer, model text, new boolean)\"\n)\nconn.execute(\n    \"INSERT INTO Sales values\"\n    \" ('Tim', 16000, 2010, 'Honda Fit', 'true')\"\n)\nconn.execute(\n    \"INSERT INTO Sales values\"\n    \" ('Tim', 9000, 2006, 'Ford Focus', 'false')\"\n)\nconn.execute(\n    \"INSERT INTO Sales values\"\n    \" ('Gayle', 8000, 2004, 'Dodge Neon', 'false')\"\n)\nconn.execute(\n    \"INSERT INTO Sales values\"\n    \" ('Gayle', 28000, 2009, 'Ford Mustang', 'true')\"\n)\nconn.execute(\n    \"INSERT INTO Sales values\"\n    \" ('Gayle', 50000, 2010, 'Lincoln Navigator', 'true')\"\n)\nconn.execute(\n    \"INSERT INTO Sales values\"\n    \" ('Don', 20000, 2008, 'Toyota Prius', 'false')\"\n)\nconn.commit()\nconn.close()\n```", "```py\nclass QueryTemplate:\n    def connect(self):\n        pass\n\n    def construct_query(self):\n        pass\n\n    def do_query(self):\n        pass\n\n    def format_results(self):\n        pass\n\n    def output_results(self):\n        pass\n\n    def process_format(self):\n        self.connect()\n        self.construct_query()\n        self.do_query()\n        self.format_results()\n        self.output_results()\n```", "```py\nimport sqlite3 \n\nclass QueryTemplate:\n    def connect(self):\n        self.conn = sqlite3.connect(\"sales.db\")\n\n    def construct_query(self):\n        raise NotImplementedError()\n\n    def do_query(self):\n        results = self.conn.execute(self.query)\n        self.results = results.fetchall()\n\n    def format_results(self):\n        output = []\n        for row in self.results:\n            row = [str(i) for i in row]\n            output.append(\", \".join(row))\n        self.formatted_results = \"\\n\".join(output)\n\n    def output_results(self):\n        raise NotImplementedError()\n```", "```py\nimport datetime \n\nclass NewVehiclesQuery(QueryTemplate):\n    def construct_query(self):\n        self.query = \"select * from Sales where new='true'\"\n\n    def output_results(self):\n        print(self.formatted_results)\n\nclass UserGrossQuery(QueryTemplate):\n    def construct_query(self):\n        self.query = (\n            \"select salesperson, sum(amt) \"\n            + \" from Sales group by salesperson\"\n        )\n\n    def output_results(self):\n        filename = \"gross_sales_{0}\".format(\n            datetime.date.today().strftime(\"%Y%m%d\")\n        )\n        with open(filename, \"w\") as outfile:\n            outfile.write(self.formatted_results)\n```"]