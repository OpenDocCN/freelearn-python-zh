- en: Lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will cover Python lists, list functions, and list methods.
  prefs: []
  type: TYPE_NORMAL
- en: In the real world, we often make lists, such as daily to-do lists, a list of
    players of the Cricket team, a guest list for a wedding, lists of food, and so
    on.
  prefs: []
  type: TYPE_NORMAL
- en: Like tuple, a list is also a built-in data structure available in Python. It
    can contain heterogeneous values such as integers, floats, strings, tuples, lists,
    and dictionaries. However, Python lists are mutable; yes, they can change.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the characteristics of a Python list:'
  prefs: []
  type: TYPE_NORMAL
- en: Values are ordered
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Mutable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list can hold any number of values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A list can add, remove, and alter the values
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s see how we can create an empty list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Creating a list with values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'A list contains comma-separated values. For example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: Unpacking list values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'You can assign a list value to variables by using the assignment operator.
    Let''s discuss this with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'You can see that `1` is assigned to variable `a` and `2` is assigned to variable
    `b`. This is called **unpacking**. What happens when a list is provided with more
    variables? Let''s see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The error indicates that there are more values to unpack. Let''s see another
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The preceding error indicates that there should be more list values to unpack.
  prefs: []
  type: TYPE_NORMAL
- en: List operations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, you will learn slicing, accessing, adding, deleting, and updating
    the values in a list.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing list values
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to access list values, use list names with positional index in square
    brackets. For example, consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: If the desired index is not found in the list, then the interpreter throws `IndexError`.
  prefs: []
  type: TYPE_NORMAL
- en: Slicing the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The slicing of a list is the same as we did in tuples. See the syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'See the example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The step means the amount by which the index increases. If you don't define
    it, then it takes `1` step by default.
  prefs: []
  type: TYPE_NORMAL
- en: Updating the list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lists are mutable, so the values of a list can be updated.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the example with our mightiest heroes of Avengers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding list, the name `''Captain''` should be `''Captain-America''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: By using the index number, you can update the values.
  prefs: []
  type: TYPE_NORMAL
- en: Deleting values from a list
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: By using the `del` keyword, you can delete a value or a slice of list from the
    list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the example of making a new team for the *Civil* War movie:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: We deleted the first and last two values from the list in the preceding example.
  prefs: []
  type: TYPE_NORMAL
- en: Addition of Python lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can add two lists by using the `+` operator.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'We need a big team, so add both the lists:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The original list will not be changed; the addition of lists can be saved to
    another variable.
  prefs: []
  type: TYPE_NORMAL
- en: Multiplication of lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'By using the `*` operator, you can perform multiplication of Python lists,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In this case, the memory address of both the index values is the same.
  prefs: []
  type: TYPE_NORMAL
- en: in operator
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You can use the `in` operator on list with the `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss this with an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we check whether the particular value exists in the
    list or not. We check whether the strings, `"iron-man"` and `"vision"`, exist
    in the `Avengers` list.
  prefs: []
  type: TYPE_NORMAL
- en: This way, you can use the `in` operator in a list.
  prefs: []
  type: TYPE_NORMAL
- en: List functions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss some Python built-in functions, which can be
    applied to a list.
  prefs: []
  type: TYPE_NORMAL
- en: len()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the len() method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'The `len()` function returns the number of elements or values in the list,
    as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: Let'ss see how to use the `max ()` function on a list.
  prefs: []
  type: TYPE_NORMAL
- en: max ()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the `max ()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'The `max (list)` function returns the element of the list with the maximum
    value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The working of the `max ()` function for lists and tuples is the same. Max preference
    of a string is more than float and integer values.
  prefs: []
  type: TYPE_NORMAL
- en: The next function is the `min ()` function, the opposite of the `max ()` function.
    The `min ()` function returns an element from the Python list with the minimum
    value.
  prefs: []
  type: TYPE_NORMAL
- en: You can easily convert a tuple into a list by using the `list ()` function.
  prefs: []
  type: TYPE_NORMAL
- en: list ()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the `list ()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The `list` function converts the sequence into a list. Let''s see the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: You can see that the tuple, `tup1`, and string name have been converted into
    a list.
  prefs: []
  type: TYPE_NORMAL
- en: Python offers you a function to sort the list, called `sorted ()`.
  prefs: []
  type: TYPE_NORMAL
- en: sorted ()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the `sorted ()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: 'The `sorted ()` function returns a new sorted list from the values in *iterable*.
    See the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take a tuple to pass into the `sorted()` function, as shown in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, you saw that the return type is `list`. So, the `sorted
    ()` function always returns a `list` type. We will see the rest of the arguments
    of the `sorted ()` function in the list method, `sort ()`.
  prefs: []
  type: TYPE_NORMAL
- en: List methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will discuss list methods, one by one, with examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s make an empty list and add values one by one:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In order to add a value to the list, we will use the `append ()` method. You
    will see this method most of the time.
  prefs: []
  type: TYPE_NORMAL
- en: append ()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the `append ()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'The method adds a value at the end of the list. Let''s see the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: You can see that we have added two members to the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider a situation where you want to add a list to an existing list. For
    example, we have two lists of our heroes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: We want to add the `Avengers2` list to the `Avengers1` list. If you are thinking
    about the `+` operator, you might be right to some extent but not completely because
    the `+` operator just shows the addition but doesn't change the original lists.
  prefs: []
  type: TYPE_NORMAL
- en: In order to add one list to another, we will use the `extend ()` method. See
    the syntax explained in the subsequent subsection.
  prefs: []
  type: TYPE_NORMAL
- en: extend ()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the `extend ()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `list1` list is the primary list to be extended.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `seq` argument could be a sequence, string, tuple, or list, which would
    be added to `list1`. The following is the example of the famous Avenger team:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, you can see that the `Avenger1` team has been extended
    by appending all the elements of the `Avengers2` list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see one more example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, `list1` has been extended by appending all the characters
    of the string name. Let''s see another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we added the `team2` tuple to the `Avengers1` list.
  prefs: []
  type: TYPE_NORMAL
- en: Difference between append and extend.
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you are confused between the `append` and `extend` methods, the following
    example will clear your doubts:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The `append` method gives a list within the list. The list `Linux2 = ["RHEL",
    "Centos"]` has been taken as one list. Let's proceed to the next method.
  prefs: []
  type: TYPE_NORMAL
- en: count ()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the `count ()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The `count ()` method is used to find the occurrence of an item in a list. See
    the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The preceding example shows that the characters, `"a"` and `"c"`, occur two
    times. If no occurrence is found, then the method returns `0`.
  prefs: []
  type: TYPE_NORMAL
- en: Consider that you have a big list and you want to find out the index of a particular
    item. To accomplish this, you can use the `index ()` method.
  prefs: []
  type: TYPE_NORMAL
- en: index ()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the `index ()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The `index ()` method is used to find the index of a particular item in a list.
    For example, consider the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: From the preceding example, you can easily understand that if a list does not
    contain the item, then the `index ()` method shows `ValueError`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: If an item occurs two times, then the `index` method returns the index of the
    first occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: Consider a list of `avengers [‘iron-man', 'hulk', 'Thor']`. As we know, one
    name is missing: `'Captain-America'`, and I want to insert `'Captain-America'` in
    the first index. To do this, we can use the `insert ()` method.
  prefs: []
  type: TYPE_NORMAL
- en: insert()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The syntax for the `insert ()` method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: '`index1` is the index where the item needs to be inserted. The item is the
    value to be inserted into `list1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: remove()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes, we need to remove an item from a list. So, this can be accomplished
    by using the `remove ()` method. The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'The `remove ()` method is used to remove an item from a list. For example,
    consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Because `"Loki"` was not a member of the Avengers team, we removed it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s consider another example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, you can see that the `remove ()` method just removed
    the first occurrence.
  prefs: []
  type: TYPE_NORMAL
- en: pop()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If you want to see a removed item, you can use the `pop ()` method. The syntax
    for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The `pop ()` method removes and returns the last item from the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take the example of the famous TV series, GoT:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: 'In the preceding example, you can see that the `pop ()` method returns the
    removed item. You can also remove any item based on the index. See the following
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: In preceding example, index number `3`, that is, `"Catelyn"` has been removed.
    Sometimes, you need to sort the values of a list. Python lists offer a very beautiful
    method called `sort ()`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax for the method is given as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The `sort()` method is stable and inplace. Stable means that the order of items
    that compare equal will be preserved. Inplace in sort does not use extra memory.
    Let's understand the `sort()` method by examples.
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider the following example where simple numbers are sorted in an ascending
    order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s see how to sort the list in the descending order:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, you got an idea of the `reverse` argument. Let''s take an example of a
    list of numbers and strings:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: For ascending order, the interpreter first takes the number and then strings.
  prefs: []
  type: TYPE_NORMAL
- en: 'For descending order, the interpreter first takes string, then numbers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s take some complex examples:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Consider that you have a list of tuples as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: The tuples in the list contain two values, and you want to sort the list according
    to the second value of tuples.
  prefs: []
  type: TYPE_NORMAL
- en: 'See the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we defined a `fun1()` function, which is used as a key
    of the `sort` method. The `list_tup` list passes its elements one by one to the `fun1(x)`
    function, and `fun1(x)` returns the tuple's second element because sort would
    be performed according to the tuple's second element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s see the output of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/list_figure1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Output of sort of list.
  prefs: []
  type: TYPE_NORMAL
- en: 'I have one more example for you. Consider that you want to sort the elements
    of a list but based on some conditions. Consider that you have a list as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: You want to sort all the elements, but you want that all `1` elements must remain
    on the right side. It can be accomplished by the `cmp` argument of the `sort()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s discuss a simple example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we have a list of unsorted numbers. We are using the
    `cmp` argument. The `cmp1` function takes two arguments. These arguments come
    from a given list, for example, `(10, 9)`, `(9, 3)`, `(3,7)`, and so on. If `cmp1`
    returns a negative number, then ascending order sort happens, and if it returns
    a positive number, then descending sort happens.
  prefs: []
  type: TYPE_NORMAL
- en: 'In our problem, we want ascending order sort, but we also want to push all
    the *1s* to the right:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is the output of the program:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/list_figure2.jpg)Showing output of list cmp argument'
  prefs: []
  type: TYPE_NORMAL
- en: reverse()
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Our last list method is `reverse()`. The syntax for the method is given as
    follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'The `reverse()` method reverses the items of a list. Consider the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: List comprehensions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: List comprehension is a concise way of creating lists. In this section, we will
    use a list with the `for` loop. If you have not read about the `for` loop so far,
    you can skip this section and get back after learning about the `for` loop, covered
    in [Chapter 6](lrn-py-7d_ch06.html), *Control Statements and Loops*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s take a `list1` list as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, our aim is to make a new list that contains the square of the elements
    of `list1`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the program is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/list_figure3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Square of list
  prefs: []
  type: TYPE_NORMAL
- en: 'The preceding code took four lines to create the desired list. By using list
    comprehensions, we can do the preceding stuff in just one line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: Let's have a look at some more examples with the `if` statement.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new list that would contain the square of the even numbers of a given
    list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'The output of the preceding code snippet is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/list_figure4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: List with if statement
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s do it by using list comprehension:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: Exercises
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'See the following list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Get the string `"avengers"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'With the `for` loop, take the following list and sort it based on the sum of
    the values of the tuples of the list:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: Use the list, `[1,2,4,5,1,1,4,1,56]`, and find the index of all the `1` elements.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Do the preceding exercise by using list comprehension.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned about lists, defining a list, and using a list.
    You also learned various list operations, such as accessing and slicing of lists.
    In the list functions, you learned some generic functions that can be applied
    to lists. You also learned list methods specific to the list. By using list methods,
    you learned about `sort`, `reverse`, `pop`, `append`, and `extend` methods. Finally, you
    learned how to use a list with the `for` loop and how to write one-line code.
  prefs: []
  type: TYPE_NORMAL
