- en: Lists
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: In this chapter, we will cover Python lists, list functions, and list methods.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍Python列表、列表函数和列表方法。
- en: In the real world, we often make lists, such as daily to-do lists, a list of
    players of the Cricket team, a guest list for a wedding, lists of food, and so
    on.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在现实生活中，我们经常制作列表，如日常待办事项列表、板球队伍的球员列表、婚礼的宾客名单、食物列表等等。
- en: Like tuple, a list is also a built-in data structure available in Python. It
    can contain heterogeneous values such as integers, floats, strings, tuples, lists,
    and dictionaries. However, Python lists are mutable; yes, they can change.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 与元组一样，列表也是Python中可用的内置数据结构。它可以包含异构值，如整数、浮点数、字符串、元组、列表和字典。然而，Python列表是可变的；是的，它们可以改变。
- en: 'The following are the characteristics of a Python list:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个Python列表的特性：
- en: Values are ordered
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 值是有序的
- en: Mutable
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可变
- en: A list can hold any number of values
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表可以存储任意数量的值
- en: A list can add, remove, and alter the values
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 列表可以添加、删除和修改值
- en: Creating a list
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建列表
- en: 'Let''s see how we can create an empty list:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们如何创建一个空列表：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: Creating a list with values
  id: totrans-12
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用值创建列表
- en: 'A list contains comma-separated values. For example:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 列表包含逗号分隔的值。例如：
- en: '[PRE1]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: Unpacking list values
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 解包列表值
- en: 'You can assign a list value to variables by using the assignment operator.
    Let''s discuss this with an example:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用赋值运算符将列表值分配给变量。让我们通过一个例子来讨论这个问题：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'You can see that `1` is assigned to variable `a` and `2` is assigned to variable
    `b`. This is called **unpacking**. What happens when a list is provided with more
    variables? Let''s see the following example:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到`1`被分配给了变量`a`，`2`被分配给了变量`b`。这被称为**解包**。当提供一个列表给更多变量时会发生什么？让我们看以下例子：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'The error indicates that there are more values to unpack. Let''s see another
    example:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 错误表明还有更多的值需要解包。让我们看另一个例子：
- en: '[PRE4]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: The preceding error indicates that there should be more list values to unpack.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的错误表明应该有更多的列表值需要解包。
- en: List operations
  id: totrans-23
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表操作
- en: In this section, you will learn slicing, accessing, adding, deleting, and updating
    the values in a list.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，你将学习切片、访问、添加、删除和更新列表中的值。
- en: Accessing list values
  id: totrans-25
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 访问列表值
- en: 'In order to access list values, use list names with positional index in square
    brackets. For example, consider the following code snippet:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 为了访问列表值，使用方括号中的列表名称和位置索引。例如，考虑以下代码片段：
- en: '[PRE5]'
  id: totrans-27
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: If the desired index is not found in the list, then the interpreter throws `IndexError`.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果在列表中找不到所需的索引，则解释器会抛出`IndexError`。
- en: Slicing the list
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 切片列表
- en: 'The slicing of a list is the same as we did in tuples. See the syntax:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的切片与我们在元组中做的是一样的。看以下语法：
- en: '[PRE6]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'See the example:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 看以下例子：
- en: '[PRE7]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The step means the amount by which the index increases. If you don't define
    it, then it takes `1` step by default.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 步长表示索引增加的量。如果你没有定义它，那么默认情况下它为`1`步。
- en: Updating the list
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 更新列表
- en: Lists are mutable, so the values of a list can be updated.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 列表是可变的，所以列表的值可以被更新。
- en: 'Let''s see the example with our mightiest heroes of Avengers:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看我们的复仇者联盟中最强大的英雄的例子：
- en: '[PRE8]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'In the preceding list, the name `''Captain''` should be `''Captain-America''`:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的列表中，名称`'Captain'`应该是`'Captain-America'`：
- en: '[PRE9]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: By using the index number, you can update the values.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用索引号，你可以更新值。
- en: Deleting values from a list
  id: totrans-42
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 从列表中删除值
- en: By using the `del` keyword, you can delete a value or a slice of list from the
    list.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`del`关键字，你可以从列表中删除一个值或一个列表片段。
- en: 'Let''s see the example of making a new team for the *Civil* War movie:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看为*内战*电影组建新团队的例子：
- en: '[PRE10]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: We deleted the first and last two values from the list in the preceding example.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们删除了列表中的第一个和最后两个值。
- en: Addition of Python lists
  id: totrans-47
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python列表的加法
- en: You can add two lists by using the `+` operator.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`+`运算符来添加两个列表。
- en: 'See the following example:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 看以下例子：
- en: '[PRE11]'
  id: totrans-50
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'We need a big team, so add both the lists:'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要一个大型团队，所以添加两个列表：
- en: '[PRE12]'
  id: totrans-52
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The original list will not be changed; the addition of lists can be saved to
    another variable.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 原始列表将不会被改变；列表的添加可以保存到另一个变量中。
- en: Multiplication of lists
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表的乘法
- en: 'By using the `*` operator, you can perform multiplication of Python lists,
    as shown in the following example:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用`*`运算符，你可以执行Python列表的乘法，如下面的例子所示：
- en: '[PRE13]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: In this case, the memory address of both the index values is the same.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，索引值的内存地址是相同的。
- en: in operator
  id: totrans-58
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '`in`运算符'
- en: You can use the `in` operator on list with the `if` statement.
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用`in`运算符和`if`语句在列表上。
- en: 'Let''s discuss this with an example:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们通过一个例子来讨论这个问题：
- en: '[PRE14]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: In the preceding example, we check whether the particular value exists in the
    list or not. We check whether the strings, `"iron-man"` and `"vision"`, exist
    in the `Avengers` list.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们检查特定值是否存在于列表中。我们检查字符串 `"iron-man"` 和 `"vision"` 是否存在于 `Avengers` 列表中。
- en: This way, you can use the `in` operator in a list.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 这样，你可以在列表中使用 `in` 操作符。
- en: List functions
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表函数
- en: In this section, we will discuss some Python built-in functions, which can be
    applied to a list.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将讨论一些可以应用于列表的 Python 内置函数。
- en: len()
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: len()
- en: 'The syntax for the len() method is given as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`len()` 方法的语法如下：'
- en: '[PRE15]'
  id: totrans-68
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `len()` function returns the number of elements or values in the list,
    as shown in the following example:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`len()` 函数返回列表中元素或值的数量，如下例所示：'
- en: '[PRE16]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: Let'ss see how to use the `max ()` function on a list.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何使用 `max()` 函数在列表上。
- en: max ()
  id: totrans-72
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: max()
- en: 'The syntax for the `max ()` method is given as follows:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '`max()` 方法的语法如下：'
- en: '[PRE17]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `max (list)` function returns the element of the list with the maximum
    value:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '`max(list)` 函数返回列表中具有最大值的元素：'
- en: '[PRE18]'
  id: totrans-76
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The working of the `max ()` function for lists and tuples is the same. Max preference
    of a string is more than float and integer values.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '`max()` 函数对列表和元组的工作方式相同。字符串的最大优先级高于浮点数和整数值。'
- en: The next function is the `min ()` function, the opposite of the `max ()` function.
    The `min ()` function returns an element from the Python list with the minimum
    value.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个函数是 `min()` 函数，它是 `max()` 函数的对立面。`min()` 函数返回 Python 列表中具有最小值的元素。
- en: You can easily convert a tuple into a list by using the `list ()` function.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以使用 `list()` 函数轻松地将元组转换为列表。
- en: list ()
  id: totrans-80
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: list()
- en: 'The syntax for the `list ()` method is given as follows:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: '`list()` 方法的语法如下：'
- en: '[PRE19]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'The `list` function converts the sequence into a list. Let''s see the following
    example:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`list` 函数将序列转换为列表。让我们看看以下示例：'
- en: '[PRE20]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: You can see that the tuple, `tup1`, and string name have been converted into
    a list.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到元组 `tup1` 和字符串名称已经被转换为列表。
- en: Python offers you a function to sort the list, called `sorted ()`.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Python 提供了一个用于排序列表的函数，称为 `sorted()`。
- en: sorted ()
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: sorted()
- en: 'The syntax for the `sorted ()` method is given as follows:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`sorted()` 方法的语法如下：'
- en: '[PRE21]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'The `sorted ()` function returns a new sorted list from the values in *iterable*.
    See the following example:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`sorted()` 函数从可迭代对象中的值返回一个新的排序后的列表。请看以下示例：'
- en: '[PRE22]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Let''s take a tuple to pass into the `sorted()` function, as shown in the following:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们传递一个元组到 `sorted()` 函数中，如下所示：
- en: '[PRE23]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding example, you saw that the return type is `list`. So, the `sorted
    ()` function always returns a `list` type. We will see the rest of the arguments
    of the `sorted ()` function in the list method, `sort ()`.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你看到返回类型是 `list`。因此，`sorted()` 函数总是返回 `list` 类型。我们将在列表方法 `sort()` 中看到
    `sorted()` 函数的其余参数。
- en: List methods
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表方法
- en: In this section, we will discuss list methods, one by one, with examples.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将逐个通过示例讨论列表方法。
- en: 'Let''s make an empty list and add values one by one:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个空列表并逐个添加值：
- en: '[PRE24]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In order to add a value to the list, we will use the `append ()` method. You
    will see this method most of the time.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 为了向列表中添加一个值，我们将使用 `append()` 方法。你将经常看到这个方法。
- en: append ()
  id: totrans-100
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: append()
- en: 'The syntax for the `append ()` method is given as follows:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`append()` 方法的语法如下：'
- en: '[PRE25]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'The method adds a value at the end of the list. Let''s see the following example:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法在列表末尾添加一个值。让我们看看以下示例：
- en: '[PRE26]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: You can see that we have added two members to the list.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以看到我们已经向列表中添加了两个成员。
- en: 'Consider a situation where you want to add a list to an existing list. For
    example, we have two lists of our heroes:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一种情况，你想将一个列表添加到现有的列表中。例如，我们有我们的英雄的两个列表：
- en: '[PRE27]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: We want to add the `Avengers2` list to the `Avengers1` list. If you are thinking
    about the `+` operator, you might be right to some extent but not completely because
    the `+` operator just shows the addition but doesn't change the original lists.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我们想将 `Avengers2` 列表添加到 `Avengers1` 列表中。如果你在考虑 `+` 操作符，你可能在某种程度上是对的，但并不完全正确，因为
    `+` 操作符只是显示加法，但不会改变原始列表。
- en: In order to add one list to another, we will use the `extend ()` method. See
    the syntax explained in the subsequent subsection.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为了将一个列表添加到另一个列表中，我们将使用 `extend()` 方法。请参阅后续子节中的语法说明。
- en: extend ()
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: extend()
- en: 'The syntax for the `extend ()` method is given as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: '`extend()` 方法的语法如下：'
- en: '[PRE28]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `list1` list is the primary list to be extended.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: '`list1` 列表是要扩展的主要列表。'
- en: 'The `seq` argument could be a sequence, string, tuple, or list, which would
    be added to `list1`. The following is the example of the famous Avenger team:'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: '`seq`参数可以是序列、字符串、元组或列表，它将被添加到`list1`中。以下是有名的复仇者团队的示例：'
- en: '[PRE29]'
  id: totrans-115
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: In the preceding example, you can see that the `Avenger1` team has been extended
    by appending all the elements of the `Avengers2` list.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你可以看到`Avenger1`团队通过追加`Avengers2`列表的所有元素而被扩展。
- en: 'Let''s see one more example:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们再看看一个例子：
- en: '[PRE30]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'In the preceding example, `list1` has been extended by appending all the characters
    of the string name. Let''s see another example:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，`list1`通过追加字符串name的所有字符而被扩展。让我们看看另一个例子：
- en: '[PRE31]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: In the preceding example, we added the `team2` tuple to the `Avengers1` list.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们向`Avengers1`列表中添加了`team2`元组。
- en: Difference between append and extend.
  id: totrans-122
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: append和extend的区别。
- en: 'If you are confused between the `append` and `extend` methods, the following
    example will clear your doubts:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你在这两个`append`和`extend`方法之间感到困惑，以下示例将消除你的疑虑：
- en: '[PRE32]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The `append` method gives a list within the list. The list `Linux2 = ["RHEL",
    "Centos"]` has been taken as one list. Let's proceed to the next method.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: '`append`方法给出一个列表中的列表。列表`Linux2 = ["RHEL", "Centos"]`被作为一个列表取出。让我们继续到下一个方法。'
- en: count ()
  id: totrans-126
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: count ()
- en: 'The syntax for the `count ()` method is given as follows:'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()`方法的语法如下所示：'
- en: '[PRE33]'
  id: totrans-128
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The `count ()` method is used to find the occurrence of an item in a list. See
    the following example:'
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: '`count()`方法用于在列表中查找一个项目的出现次数。参见以下示例：'
- en: '[PRE34]'
  id: totrans-130
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: The preceding example shows that the characters, `"a"` and `"c"`, occur two
    times. If no occurrence is found, then the method returns `0`.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的例子表明，字符`"a"`和`"c"`出现了两次。如果没有找到出现，则该方法返回`0`。
- en: Consider that you have a big list and you want to find out the index of a particular
    item. To accomplish this, you can use the `index ()` method.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个大列表，并且你想找出特定项目的索引。为了完成这个任务，你可以使用`index()`方法。
- en: index ()
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: index ()
- en: 'The syntax for the `index ()` method is given as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: '`index()`方法的语法如下所示：'
- en: '[PRE35]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The `index ()` method is used to find the index of a particular item in a list.
    For example, consider the following code snippet:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`index()`方法用于在列表中查找特定项目的索引。例如，考虑以下代码片段：'
- en: '[PRE36]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: From the preceding example, you can easily understand that if a list does not
    contain the item, then the `index ()` method shows `ValueError`.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 从前面的例子中，你可以轻松理解，如果一个列表不包含该项目，那么`index()`方法会显示`ValueError`。
- en: 'Let''s see another example:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看另一个例子：
- en: '[PRE37]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: If an item occurs two times, then the `index` method returns the index of the
    first occurrence.
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 如果一个项目出现两次，那么`index`方法返回第一次出现的索引。
- en: Consider a list of `avengers [‘iron-man', 'hulk', 'Thor']`. As we know, one
    name is missing: `'Captain-America'`, and I want to insert `'Captain-America'` in
    the first index. To do this, we can use the `insert ()` method.
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑一个包含`avengers ['iron-man', 'hulk', 'Thor']`的列表。正如我们所知，有一个名字缺失：`'Captain-America'`，我想在第一个索引处插入`'Captain-America'`。为此，我们可以使用`insert()`方法。
- en: insert()
  id: totrans-143
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: insert()
- en: 'The syntax for the `insert ()` method is given as follows:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`insert()`方法的语法如下所示：'
- en: '[PRE38]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: '`index1` is the index where the item needs to be inserted. The item is the
    value to be inserted into `list1`:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '`index1`是需要插入项目的索引。项目是要插入到`list1`中的值：'
- en: '[PRE39]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: remove()
  id: totrans-148
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: remove()
- en: 'Sometimes, we need to remove an item from a list. So, this can be accomplished
    by using the `remove ()` method. The syntax for the method is given as follows:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，我们需要从列表中删除一个项目。因此，这可以通过使用`remove()`方法来完成。该方法的语法如下所示：
- en: '[PRE40]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'The `remove ()` method is used to remove an item from a list. For example,
    consider the following example:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '`remove()`方法用于从列表中删除一个项目。例如，考虑以下示例：'
- en: '[PRE41]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: Because `"Loki"` was not a member of the Avengers team, we removed it.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 因为`"Loki"`不是复仇者团队的一员，所以我们移除了它。
- en: 'Let''s consider another example:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们考虑另一个例子：
- en: '[PRE42]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: In the preceding example, you can see that the `remove ()` method just removed
    the first occurrence.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，你可以看到`remove()`方法仅删除了第一个出现。
- en: pop()
  id: totrans-157
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: pop()
- en: 'If you want to see a removed item, you can use the `pop ()` method. The syntax
    for the method is given as follows:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想要查看已删除的项目，可以使用`pop()`方法。该方法的语法如下所示：
- en: '[PRE43]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The `pop ()` method removes and returns the last item from the list.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: '`pop()`方法从列表中移除并返回最后一个项目。'
- en: 'Let''s take the example of the famous TV series, GoT:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们以著名的电视剧《权力的游戏》（GoT）为例：
- en: '[PRE44]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'In the preceding example, you can see that the `pop ()` method returns the
    removed item. You can also remove any item based on the index. See the following
    example:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，你可以看到`pop()`方法返回了被移除的项。你也可以根据索引移除任何项。请看以下示例：
- en: '[PRE45]'
  id: totrans-164
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: In preceding example, index number `3`, that is, `"Catelyn"` has been removed.
    Sometimes, you need to sort the values of a list. Python lists offer a very beautiful
    method called `sort ()`.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，索引号`3`，即`"Catelyn"`已被移除。有时，你需要对列表的值进行排序。Python列表提供了一个非常漂亮的方法，称为`sort()`。
- en: 'The syntax for the method is given as follows:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 该方法的语法如下：
- en: '[PRE46]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: The `sort()` method is stable and inplace. Stable means that the order of items
    that compare equal will be preserved. Inplace in sort does not use extra memory.
    Let's understand the `sort()` method by examples.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '`sort()`方法既稳定又原地操作。稳定意味着比较相等的项的顺序将被保留。原地操作意味着排序不使用额外内存。让我们通过示例来理解`sort()`方法。'
- en: 'Consider the following example where simple numbers are sorted in an ascending
    order:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下示例，其中简单的数字按升序排序：
- en: '[PRE47]'
  id: totrans-170
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Let''s see how to sort the list in the descending order:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看如何按降序排序列表：
- en: '[PRE48]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Now, you got an idea of the `reverse` argument. Let''s take an example of a
    list of numbers and strings:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你对`reverse`参数有了概念。让我们以一个数字和字符串列表的例子为例：
- en: '[PRE49]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: For ascending order, the interpreter first takes the number and then strings.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 对于升序，解释器首先取数字，然后是字符串。
- en: 'For descending order, the interpreter first takes string, then numbers:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 对于降序，解释器首先取字符串，然后是数字：
- en: '[PRE50]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'Let''s take some complex examples:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看一些复杂的例子：
- en: 'Consider that you have a list of tuples as follows:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 假设你有一个元组列表如下：
- en: '[PRE51]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: The tuples in the list contain two values, and you want to sort the list according
    to the second value of tuples.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中的元组包含两个值，你想要根据元组的第二个值对列表进行排序。
- en: 'See the following code:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 看以下代码：
- en: '[PRE52]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: In the preceding code, we defined a `fun1()` function, which is used as a key
    of the `sort` method. The `list_tup` list passes its elements one by one to the `fun1(x)`
    function, and `fun1(x)` returns the tuple's second element because sort would
    be performed according to the tuple's second element.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了一个`fun1()`函数，该函数用作`sort`方法的关键字。`list_tup`列表逐个将元素传递给`fun1(x)`函数，而`fun1(x)`返回元组的第二个元素，因为排序将根据元组的第二个元素进行。
- en: 'Let''s see the output of the program:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看程序的输出：
- en: '![](img/list_figure1.jpg)'
  id: totrans-186
  prefs: []
  type: TYPE_IMG
  zh: '![](img/list_figure1.jpg)'
- en: Output of sort of list.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 列表排序的输出。
- en: 'I have one more example for you. Consider that you want to sort the elements
    of a list but based on some conditions. Consider that you have a list as follows:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 我为你再举一个例子。假设你想要根据某些条件对列表中的元素进行排序。考虑以下列表：
- en: '[PRE53]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: You want to sort all the elements, but you want that all `1` elements must remain
    on the right side. It can be accomplished by the `cmp` argument of the `sort()`
    method.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 你想要对所有元素进行排序，但希望所有的`1`元素都保持在右边。这可以通过`sort()`方法的`cmp`参数实现。
- en: 'Let''s discuss a simple example:'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们讨论一个简单的例子：
- en: '[PRE54]'
  id: totrans-192
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: In the preceding example, we have a list of unsorted numbers. We are using the
    `cmp` argument. The `cmp1` function takes two arguments. These arguments come
    from a given list, for example, `(10, 9)`, `(9, 3)`, `(3,7)`, and so on. If `cmp1`
    returns a negative number, then ascending order sort happens, and if it returns
    a positive number, then descending sort happens.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的示例中，我们有一个未排序的数字列表。我们正在使用`cmp`参数。`cmp1`函数接受两个参数。这些参数来自给定的列表，例如`(10, 9)`、`(9,
    3)`、`(3,7)`等等。如果`cmp1`返回一个负数，则进行升序排序；如果返回一个正数，则进行降序排序。
- en: 'In our problem, we want ascending order sort, but we also want to push all
    the *1s* to the right:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的问题中，我们想要升序排序，但还想将所有的`1`推到右边：
- en: '[PRE55]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Here is the output of the program:'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 这是程序的输出：
- en: '![](img/list_figure2.jpg)Showing output of list cmp argument'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: '![](img/list_figure2.jpg)显示列表cmp参数的输出'
- en: reverse()
  id: totrans-198
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: reverse()
- en: 'Our last list method is `reverse()`. The syntax for the method is given as
    follows:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们最后一个列表方法是`reverse()`。该方法的语法如下：
- en: '[PRE56]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'The `reverse()` method reverses the items of a list. Consider the following example:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '`reverse()`方法反转列表中的元素。考虑以下示例：'
- en: '[PRE57]'
  id: totrans-202
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: List comprehensions
  id: totrans-203
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表推导式
- en: List comprehension is a concise way of creating lists. In this section, we will
    use a list with the `for` loop. If you have not read about the `for` loop so far,
    you can skip this section and get back after learning about the `for` loop, covered
    in [Chapter 6](lrn-py-7d_ch06.html), *Control Statements and Loops*.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 列表推导是创建列表的一种简洁方式。在本节中，我们将使用带有`for`循环的列表。如果你还没有阅读有关`for`循环的内容，你可以跳过这一节，在学习了第6章中涵盖的`for`循环后回来，第6章是*控制语句和循环*。
- en: 'Let''s take a `list1` list as shown:'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一个`list1`列表，如下所示：
- en: '[PRE58]'
  id: totrans-206
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Now, our aim is to make a new list that contains the square of the elements
    of `list1`:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们的目标是创建一个新的列表，该列表包含`list1`中元素的平方：
- en: '[PRE59]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'The output of the program is as follows:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 程序的输出如下：
- en: '![](img/list_figure3.jpg)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
  zh: '![列表图3](img/list_figure3.jpg)'
- en: Square of list
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 列表的平方
- en: 'The preceding code took four lines to create the desired list. By using list
    comprehensions, we can do the preceding stuff in just one line:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码需要四行来创建所需的列表。通过使用列表推导，我们可以在一行内完成前面的操作：
- en: '[PRE60]'
  id: totrans-213
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: Let's have a look at some more examples with the `if` statement.
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看一些带有`if`语句的更多示例。
- en: 'Create a new list that would contain the square of the even numbers of a given
    list:'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个新的列表，该列表将包含给定列表中偶数的平方：
- en: '[PRE61]'
  id: totrans-216
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'The output of the preceding code snippet is as follows:'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 上一段代码的输出如下：
- en: '![](img/list_figure4.jpg)'
  id: totrans-218
  prefs: []
  type: TYPE_IMG
  zh: '![列表图4](img/list_figure4.jpg)'
- en: List with if statement
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 带有if语句的列表
- en: 'Let''s do it by using list comprehension:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们使用列表推导来完成这个任务：
- en: '[PRE62]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: Exercises
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 练习
- en: 'See the following list:'
  id: totrans-223
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 看看以下列表：
- en: '[PRE63]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: Get the string `"avengers"`.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 获取字符串`"avengers"`。
- en: 'With the `for` loop, take the following list and sort it based on the sum of
    the values of the tuples of the list:'
  id: totrans-226
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用`for`循环，取以下列表并根据列表中元组的值的总和对其进行排序：
- en: '[PRE64]'
  id: totrans-227
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: Use the list, `[1,2,4,5,1,1,4,1,56]`, and find the index of all the `1` elements.
  id: totrans-228
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用列表`[1,2,4,5,1,1,4,1,56]`，找到所有`1`元素的索引。
- en: Do the preceding exercise by using list comprehension.
  id: totrans-229
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用列表推导来完成前面的练习。
- en: Summary
  id: totrans-230
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 概述
- en: In this chapter, you learned about lists, defining a list, and using a list.
    You also learned various list operations, such as accessing and slicing of lists.
    In the list functions, you learned some generic functions that can be applied
    to lists. You also learned list methods specific to the list. By using list methods,
    you learned about `sort`, `reverse`, `pop`, `append`, and `extend` methods. Finally, you
    learned how to use a list with the `for` loop and how to write one-line code.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你学习了列表、定义列表和使用列表。你还学习了各种列表操作，例如访问和切片列表。在列表函数中，你学习了可以应用于列表的一些通用函数。你还学习了针对列表的特定列表方法。通过使用列表方法，你学习了`sort`、`reverse`、`pop`、`append`和`extend`方法。最后，你学习了如何使用列表与`for`循环以及如何编写一行代码。
