- en: '4'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '4'
- en: Building a Social Website
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 构建一个社交网站
- en: In the preceding chapter, you learned how to implement a tagging system and
    how to recommend similar posts. You implemented custom template tags and filters.
    You also learned how to create sitemaps and feeds for your site, and you built
    a full-text search engine using PostgreSQL.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，你学习了如何实现标签系统以及如何推荐相似帖子。你实现了自定义模板标签和过滤器。你还学习了如何为你的网站创建网站地图和源，并使用PostgreSQL构建了一个全文搜索引擎。
- en: In this chapter, you will learn how to develop user account functionalities
    to create a social website, including user registration, password management,
    profile editing, and authentication. We will implement social features on this
    site in the next few chapters, to let users share images and interact with each
    other. Users will be able to bookmark any image on the internet and share it with
    other users. They will also be able to see activity on the platform from the users
    they follow and like/unlike the images shared by them.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将学习如何开发用户账户功能以创建一个社交网站，包括用户注册、密码管理、个人资料编辑和认证。我们将在接下来的几章中实现这个网站的社会功能，让用户分享图片并相互互动。用户将能够将任何互联网上的图片添加到书签并与其他用户分享。他们还将能够看到他们关注的用户在平台上的活动，以及他们喜欢/不喜欢他们分享的图片。
- en: 'This chapter will cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Creating a login view
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建登录视图
- en: Using the Django authentication framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用Django认证框架
- en: Creating templates for Django login, logout, password change, and password reset
    views
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 为Django登录、注销、密码更改和密码重置视图创建模板
- en: Creating user registration views
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建用户注册视图
- en: Extending the user model with a custom profile model
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用自定义个人资料模型扩展用户模型
- en: Configuring the project for media file uploads
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置项目以支持媒体文件上传
- en: Functional overview
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 功能概述
- en: '*Figure 4.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: '*图4.1*展示了本章将要构建的视图、模板和功能：'
- en: '![](img/B21088_04_01.png)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/B21088_04_01.png)'
- en: 'Figure 4.1: Diagram of functionalities built in Chapter 4'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.1：第4章中构建的功能图
- en: In this chapter, you will create a new project and use the login, logout, password
    change, and password recovery views provided by Django in the `django.contrib.auth`
    package. You will create templates for the authentication views, and you will
    create a `dashboard` view that users will have access to when they successfully
    authenticate. You will implement user registration with the `register` view. Finally,
    you will extend the user model with a custom `Profile` model and create the `edit`
    view to allow users to edit their profile.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你将创建一个新的项目，并使用Django在`django.contrib.auth`包中提供的登录、注销、密码更改和密码恢复视图。你将为认证视图创建模板，并创建一个`dashboard`视图，用户在成功认证后可以访问。你将使用`register`视图实现用户注册。最后，你将通过自定义`Profile`模型扩展用户模型，并创建`edit`视图以允许用户编辑他们的个人资料。
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04).
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的源代码可以在[https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04)找到。
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter. You can follow the instructions to install
    each Python package in the following sections, or you can install all requirements
    at once with the command `python -m pip install -r requirements.txt`.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中使用的所有Python包都包含在章节源代码中的`requirements.txt`文件中。你可以按照以下章节中的说明安装每个Python包，或者你可以使用命令`python
    -m pip install -r requirements.txt`一次性安装所有需求。
- en: Creating a social website project
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个社交网站项目
- en: We are going to create a social application that will allow users to share images
    that they find on the internet. This project is relevant because it will help
    you understand how to build social capabilities into your site, as well as how
    to implement advanced functionalities with Django and JavaScript.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个社交应用程序，允许用户分享他们在互联网上找到的图片。这个项目是相关的，因为它将帮助你了解如何将社交功能集成到你的网站中，以及如何使用Django和JavaScript实现高级功能。
- en: 'For our image-sharing website, we will need to build the following elements:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的图片分享网站，我们需要构建以下元素：
- en: An authentication system for users to register, log in, edit their profile,
    and change or reset their password
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个用户注册、登录、编辑个人资料、更改或重置密码的认证系统
- en: Social authentication to sign in with services such as Google
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 社交认证，使用 Google 等服务登录
- en: Functionality to display shared images and a system for users to share images
    from any website
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 显示共享图片的功能以及一个系统，允许用户从任何网站分享图片
- en: An activity stream that allows users to see the content uploaded by the people
    that they follow
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个活动流，允许用户查看他们关注的用户上传的内容
- en: A follow system to allow users to follow each other on the website
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个关注系统，允许用户在网站上相互关注
- en: This chapter will address the first point on the list. The rest of the points
    will be covered in *Chapters* 5 to 7.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将解决列表上的第一个问题。其余的问题将在第 5 章到第 7 章中介绍。
- en: Starting the social website project
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 开始社交网站项目
- en: We will start by setting up the virtual environment for the project and creating
    the initial project structure.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先为项目设置虚拟环境并创建初始项目结构。
- en: 'Open the terminal and use the following commands to create a virtual environment
    for your project:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 打开终端并使用以下命令为您的项目创建虚拟环境：
- en: '[PRE0]'
  id: totrans-30
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'If you are using Linux or macOS, run the following command to activate your
    virtual environment:'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Linux 或 macOS，请运行以下命令以激活您的虚拟环境：
- en: '[PRE1]'
  id: totrans-32
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you are using Windows, use the following command instead:'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您使用的是 Windows，请使用以下命令代替：
- en: '[PRE2]'
  id: totrans-34
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'The shell prompt will display your active virtual environment, as follows:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 壳提示将显示您的活动虚拟环境，如下所示：
- en: '[PRE3]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Install Django in your virtual environment with the following command:'
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令在您的虚拟环境中安装 Django：
- en: '[PRE4]'
  id: totrans-38
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Run the following command to create a new project:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以创建一个新的项目：
- en: '[PRE5]'
  id: totrans-40
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'The initial project structure has been created. Use the following commands
    to get into your project directory and create a new application named `account`:'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 初始项目结构已创建。使用以下命令进入您的项目目录并创建一个名为 `account` 的新应用程序：
- en: '[PRE6]'
  id: totrans-42
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Remember that you should add the new application to your project by adding the
    application’s name to the `INSTALLED_APPS` setting in the `settings.py` file.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 请记住，您应该通过将应用程序的名称添加到 `settings.py` 文件中的 `INSTALLED_APPS` 设置中来将新应用程序添加到您的项目中。
- en: 'Edit `settings.py` and add the following line highlighted in bold to the `INSTALLED_APPS`
    list before any of the other installed apps:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑 `settings.py` 并在 `INSTALLED_APPS` 列表中添加以下加粗行，在所有其他已安装的应用程序之前：
- en: '[PRE7]'
  id: totrans-45
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Django looks for templates in the application template directories by order
    of appearance in the `INSTALLED_APPS` setting. The `django.contrib.admin` app
    includes standard authentication templates, which we will override in the `account`
    application. Usually, we place our own apps at the end of the list. In this case,
    we place the application first in the `INSTALLED_APPS` setting to ensure that
    our custom authentication templates will be used, instead of the authentication
    templates contained in `django.contrib.admin`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Django 按照在 `INSTALLED_APPS` 设置中出现的顺序在应用程序模板目录中查找模板。`django.contrib.admin` 应用包含标准认证模板，我们将在
    `account` 应用中覆盖这些模板。通常，我们将自己的应用程序放在列表的末尾。在这种情况下，我们将应用程序放在 `INSTALLED_APPS` 设置的第一位，以确保我们的自定义认证模板将被使用，而不是
    `django.contrib.admin` 中包含的认证模板。
- en: 'Run the following command to sync the database with the models of the default
    applications included in the `INSTALLED_APPS` setting:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令以将数据库与 `INSTALLED_APPS` 设置中包含的默认应用程序的模型同步：
- en: '[PRE8]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: You will see that all the initial Django database migrations get applied. The
    database tables corresponding to the Django models of the installed applications
    have been created. Next, we will build an authentication system into our project
    using the Django authentication framework.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到所有初始 Django 数据库迁移都将应用。对应于已安装应用程序的 Django 模型的数据库表已创建。接下来，我们将使用 Django 认证框架将认证系统构建到我们的项目中。
- en: Using the Django authentication framework
  id: totrans-50
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Django 认证框架
- en: Django comes with a built-in authentication framework that can handle user authentication,
    sessions, permissions, and user groups. The authentication system includes views
    for common user actions such as logging in, logging out, password change, and
    password reset.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Django 内置了认证框架，可以处理用户认证、会话、权限和用户组。认证系统包括用于常见用户操作的视图，如登录、登出、密码更改和密码重置。
- en: The authentication framework is located at `django.contrib.auth` and is used
    by other Django `contrib` packages. Remember that we already used the authentication
    framework in *Chapter 1*, *Building a Blog Application*, to create a superuser
    for the blog application to access the administration site.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 认证框架位于`django.contrib.auth`，并被其他Django `contrib`包使用。请记住，我们在*第一章*，*构建博客应用*中已经使用了认证框架来为博客应用创建一个超级用户，以便访问管理站点。
- en: 'When we create a new Django project using the `startproject` command, the authentication
    framework is included in the default settings of our project. It consists of the
    `django.contrib.auth` application and the following two middleware classes found
    in the `MIDDLEWARE` setting of our project:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用`startproject`命令创建一个新的Django项目时，认证框架包含在我们项目的默认设置中。它由`django.contrib.auth`应用和位于我们项目`MIDDLEWARE`设置中的以下两个中间件类组成：
- en: '`AuthenticationMiddleware`: Associates users with requests using sessions'
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`AuthenticationMiddleware`：使用会话将用户与请求关联'
- en: '`SessionMiddleware`: Handles the current session across requests'
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`SessionMiddleware`：处理请求之间的当前会话'
- en: Middleware is classes with methods that are globally executed during the request
    or response phase. You will use middleware classes on several occasions throughout
    this book, and you will learn how to create custom middleware in *Chapter 17*,
    *Going Live*.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 中间件是具有在请求或响应阶段全局执行的方法的类。您将在本书的多个地方使用中间件类，您将在*第17章*，*上线*中学习如何创建自定义中间件。
- en: 'The authentication framework also includes the following models that are defined
    in `django.contrib.auth.models`:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 认证框架还包括以下模型，这些模型在`django.contrib.auth.models`中定义：
- en: '`User`: A user model with basic fields; the main fields of this model are `username`,
    `password`, `email`, `first_name`, `last_name`, and `is_active`'
  id: totrans-58
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`User`：一个具有基本字段的用户模型；此模型的主要字段是`username`、`password`、`email`、`first_name`、`last_name`和`is_active`'
- en: '`Group`: A group model to categorize users'
  id: totrans-59
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Group`：一个用于对用户进行分类的用户组模型'
- en: '`Permission`: Flags for users or groups to perform certain actions'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`Permission`：为用户或组执行某些操作的标志'
- en: The framework also includes default authentication views and forms, which you
    will use later.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 该框架还包括默认的认证视图和表单，您将在稍后使用。
- en: Creating a login view
  id: totrans-62
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建登录视图
- en: 'We will start this section by using the Django authentication framework to
    allow users to log in to the website. We will create a view that will perform
    the following actions to log in a user:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用Django认证框架开始本节，允许用户登录网站。我们将创建一个视图，执行以下操作以登录用户：
- en: Present the user with a login form
  id: totrans-64
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 向用户展示登录表单
- en: Get the username and password provided by the user when they submit the form
  id: totrans-65
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取用户在提交表单时提供的用户名和密码
- en: Authenticate the user against the data stored in the database
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户与数据库中存储的数据进行认证
- en: Check whether the user is active
  id: totrans-67
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查用户是否活跃
- en: Log the user into the website and start an authenticated session
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将用户登录到网站并启动一个认证会话
- en: We will start by creating the login form.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将首先创建登录表单。
- en: 'Create a new `forms.py` file in the `account` application directory and add
    the following lines to it:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在`account`应用目录中创建一个新的`forms.py`文件，并向其中添加以下行：
- en: '[PRE9]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: This form will be used to authenticate users against the database. The `PasswordInput`
    widget is used to render the `password` HTML element. This will include `type="password"`
    in the HTML so that the browser treats it as a password input.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 此表单将用于对数据库中的用户进行认证。`PasswordInput`小部件用于渲染`password` HTML元素。这将包括`type="password"`在HTML中，以便浏览器将其视为密码输入。
- en: 'Edit the `views.py` file of the `account` application and add the following
    code to it:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`account`应用的`views.py`文件，并向其中添加以下代码：
- en: '[PRE10]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'This is what the basic login view does:'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 这是基本登录视图所执行的操作：
- en: When the `user_login` view is called with a `GET` request, a new login form
    is instantiated with `form = LoginForm()`. The form is then passed to the template.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 当使用`GET`请求调用`user_login`视图时，将使用`form = LoginForm()`实例化一个新的登录表单。然后，该表单被传递到模板中。
- en: 'When the user submits the form via `POST`, the following actions are performed:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 当用户通过`POST`提交表单时，将执行以下操作：
- en: The form is instantiated with the submitted data with `form = LoginForm(request.POST)`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`form = LoginForm(request.POST)`使用提交的数据实例化表单。
- en: The form is validated with `form.is_valid()`. If it is not valid, the form errors
    will be displayed later in the template (for example, if the user didn’t fill
    in one of the fields).
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`form.is_valid()`对表单进行验证。如果它无效，表单错误将在模板中稍后显示（例如，如果用户没有填写其中一个字段）。
- en: If the submitted data is valid, the user gets authenticated against the database
    using the `authenticate()` method. This method takes the `request` object, the
    `username`, and the `password` parameters and returns the `User` object if the
    user has been successfully authenticated, or `None` otherwise. If the user has
    not been successfully authenticated, a raw `HttpResponse` is returned with an
    **Invalid login** message.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 如果提交的数据有效，则使用`authenticate()`方法对数据库中的用户进行认证。此方法接受`request`对象、`username`和`password`参数，如果用户成功认证，则返回`User`对象，否则返回`None`。如果用户未成功认证，则返回一个包含**无效登录**消息的原始`HttpResponse`。
- en: If the user is successfully authenticated, the user status is checked by accessing
    the `is_active` attribute. This is an attribute of Django’s user model. If the
    user is not active, an `HttpResponse` is returned with a **Disabled account**
    message.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户成功认证，通过访问`is_active`属性检查用户状态。这是Django用户模型的一个属性。如果用户不是活跃的，则返回一个包含**账户已禁用**消息的`HttpResponse`。
- en: If the user is active, the user is logged into the site. The user is set in
    the session by calling the `login()` method. An **Authenticated successfully**
    message is returned.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户是活跃的，用户将登录到网站。通过调用`login()`方法将用户设置在会话中。返回一个**认证成功**的消息。
- en: 'Note the difference between `authenticate()` and `login()`: `authenticate()`
    verifies the user’s credentials and, upon validation, returns a `User` object
    representing the authenticated user. In contrast, `login()` sets the user in the
    current session by incorporating the authenticated `User` object into the current
    session context.'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 注意`authenticate()`和`login()`之间的区别：`authenticate()`验证用户的凭据，并在验证通过后返回代表已验证用户的`User`对象。相比之下，`login()`通过将已验证的`User`对象纳入当前会话上下文中，将用户设置在当前会话中。
- en: 'Now, we will create a URL pattern for this view:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将为这个视图创建一个URL模式：
- en: 'Create a new `urls.py` file in the `account` application directory and add
    the following code to it:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在`account`应用程序目录中创建一个新的`urls.py`文件，并向其中添加以下代码：
- en: '[PRE11]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Edit the main `urls.py` file located in your `bookmarks` project directory,
    import `include`, and add the URL patterns of the `account` application, as follows.
    The new code is highlighted in bold:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑位于你的`bookmarks`项目目录中的主`urls.py`文件，导入`include`，并添加`account`应用程序的URL模式，如下所示。新的代码以粗体显示：
- en: '[PRE12]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The login view can now be accessed with a URL.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 现在可以通过URL访问登录视图。
- en: 'Let’s create a template for this view. Since there are no templates in the
    project yet, we will start by creating a base template that will be extended by
    the login template:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们为这个视图创建一个模板。由于项目中还没有模板，我们将首先创建一个基础模板，该模板将被登录模板扩展：
- en: 'Create the following files and directories inside the `account` application
    directory:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 在`account`应用程序目录内创建以下文件和目录：
- en: '[PRE13]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Edit the `base.html` template and add the following code to it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`base.html`模板，并向其中添加以下代码：
- en: '[PRE14]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: This will be the base template for the website. As you did in your previous
    project, include the CSS styles in the main template. You can find these static
    files in the code that comes with this chapter. Copy the `static/` directory of
    the `account` application from the chapter’s source code to the same location
    in your project so that you can use the static files. You can find the directory’s
    contents at [https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter04/bookmarks/account/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter04/bookmarks/account/static).
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这将是网站的基模板。就像你在上一个项目中做的那样，在主模板中包含CSS样式。你可以在本章的代码中找到这些静态文件。将章节源代码中的`account`应用程序的`static/`目录复制到你的项目中的相同位置，以便你可以使用静态文件。你可以在这个目录的[https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter04/bookmarks/account/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter04/bookmarks/account/static)找到目录内容。
- en: The base template defines a `title` block and a `content` block that can be
    filled with content by the templates that extend from it.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 基模板定义了一个`title`块和一个`content`块，这些块可以通过扩展它的模板填充内容。
- en: Let’s fill in the template for your login form.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们填写登录表单的模板。
- en: 'Open the `account/login.html` template and add the following code to it:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 打开`account/login.html`模板，并向其中添加以下代码：
- en: '[PRE15]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: This template includes the form that is instantiated in the view. Since your
    form will be submitted via `POST`, you will include the `{% csrf_token %}` template
    tag for **cross-site request forgery** (**CSRF**) protection. You learned about
    CSRF protection in *Chapter 2*, *Enhancing Your Blog with Advanced Features*.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
- en: There are no users in the database yet. You will need to create a superuser
    first to access the administration site to manage other users.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in the shell prompt:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'You will see the following output. Enter your desired username, email, and
    password, as follows:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Then, you will see the following success message:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Run the development server using the following command:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  id: totrans-109
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Open `http://127.0.0.1:8000/admin/` in your browser. Access the administration
    site using the credentials of the user you just created. You will see the Django
    administration site, including the `User` and `Group` models of the Django authentication
    framework.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'It will look as follows:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_02.png)'
  id: totrans-112
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: The Django administration site index page including Users and Groups'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
- en: In the **Users** row, click on the **Add** link.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new user using the administration site as follows:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_03.png)'
  id: totrans-116
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: The Add user form on the Django administration site'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
- en: Enter the user details and click on the **SAVE** button to save the new user
    in the database.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in **Personal info**, fill in the **First name**, **Last name**, and
    **Email address** fields as follows, and then click on the **SAVE** button to
    save the changes:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_04.png)'
  id: totrans-120
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: The user editing form on the Django administration site'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/account/login/` in your browser. You should see
    the rendered template, including the login form:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_04_05.png)'
  id: totrans-123
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: The user Log-in page'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter invalid credentials and submit the form. You should get the following
    **Invalid login** response:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_06.png)'
  id: totrans-126
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6: The invalid login plain text response'
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter valid credentials; you will get the following **Authenticated successfully**
    response:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_07.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7: The successful authentication plain text response'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have learned how to authenticate users and create your own authentication
    view. You can build your own auth views, but Django ships with ready-to-use authentication
    views that you can leverage.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
- en: Using Django’s built-in authentication views
  id: totrans-132
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django includes several forms and views in the authentication framework that
    you can use right away. The login view we have created is a good exercise to understand
    the process of user authentication in Django. However, you can use the default
    Django authentication views in most cases.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
- en: 'Django provides the following class-based views to deal with authentication.
    All of them are located in `django.contrib.auth.views`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
- en: '`LoginView`: Handles a login form and logs in a user'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LoginView`: 处理登录表单并登录用户'
- en: '`LogoutView`: Logs out a user'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LogoutView`: 注销用户'
- en: 'Django provides the following views to handle password changes:'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: Django提供了以下视图来处理密码更改：
- en: '`PasswordChangeView`: Handles a form to change the user’s password'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordChangeView`: 处理更改用户密码的表单'
- en: '`PasswordChangeDoneView`: The success view that the user is redirected to after
    a successful password change'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordChangeDoneView`: 用户在成功更改密码后将被重定向到的成功视图'
- en: 'Django also includes the following views to allow users to reset their password:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: Django还包括以下视图，以允许用户重置他们的密码：
- en: '`PasswordResetView`: Allows users to reset their password. It generates a one-time-use
    link with a token and sends it to a user’s email account'
  id: totrans-141
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordResetView`: 允许用户重置密码。它生成一个一次性使用的链接并发送到用户的电子邮件账户'
- en: '`PasswordResetDoneView`: Tells users that an email—including a link to reset
    their password—has been sent to them'
  id: totrans-142
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordResetDoneView`: 告诉用户已向他们发送了一封电子邮件——包括重置密码的链接'
- en: '`PasswordResetConfirmView`: Allows users to set a new password'
  id: totrans-143
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordResetConfirmView`: 允许用户设置新密码'
- en: '`PasswordResetCompleteView`: The success view that the user is redirected to
    after successfully resetting their password'
  id: totrans-144
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`PasswordResetCompleteView`: 用户成功重置密码后将被重定向到的成功视图'
- en: These views can save you a lot of time when building any web application with
    user accounts. The views use default values that can be overridden, such as the
    location of the template to be rendered, or the form to be used by the view.
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这些视图在构建任何带有用户账户的Web应用时可以为您节省大量时间。这些视图使用默认值，这些值可以被覆盖，例如要渲染的模板的位置或视图使用的表单。
- en: You can get more information about the built-in authentication views at [https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views](https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views).
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在[https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views](https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views)了解更多关于内置认证视图的信息。
- en: Login and logout views
  id: totrans-147
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 登录和注销视图
- en: To learn how to use Django’s authentication views, we will substitute our custom
    login view with Django’s built-in equivalent and also integrate a logout view.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解如何使用Django的认证视图，我们将用Django的内置等价视图替换我们的自定义登录视图，并集成一个注销视图。
- en: 'Edit the `urls.py` file of the `account` application and add the code highlighted
    in bold:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`account`应用的`urls.py`文件，并添加以下加粗代码：
- en: '[PRE20]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we have commented out the URL pattern for the `user_login`
    view that we created previously. We’ll now use the `LoginView` view of Django’s
    authentication framework. We have also added a URL pattern for the `LogoutView`
    view.
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们已注释掉我们之前创建的`user_login`视图的URL模式。现在我们将使用Django认证框架的`LoginView`视图。我们还添加了一个`LogoutView`视图的URL模式。
- en: Create a new directory inside the `templates/` directory of the `account` application
    and name it `registration`. This is the default path where the Django authentication
    views expect your authentication templates to be.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在`account`应用的`templates/`目录内创建一个新的目录，命名为`registration`。这是Django认证视图默认期望您的认证模板所在的路径。
- en: The `django.contrib.admin` module includes authentication templates that are
    used for the administration site, like the login template. By placing the `account`
    application at the top of the `INSTALLED_APPS` setting when configuring the project,
    we ensured that Django would use our authentication templates instead of the ones
    defined in any other application.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`django.contrib.admin`模块包括用于管理站点的认证模板，如登录模板。通过在配置项目时将`account`应用放置在`INSTALLED_APPS`设置的顶部，我们确保Django将使用我们的认证模板而不是任何其他应用中定义的模板。'
- en: 'Create a new file inside the `templates/registration/` directory, name it `login.html`,
    and add the following code to it:'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 在`templates/registration/`目录内创建一个新的文件，命名为`login.html`，并将以下代码添加到其中：
- en: '[PRE21]'
  id: totrans-155
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: This login template is quite similar to the one we created before. Django uses
    the `AuthenticationForm` form located at `django.contrib.auth.forms` by default.
    This form tries to authenticate the user and raises a validation error if the
    login is unsuccessful. We use `{% if form.errors %}` in the template to check
    whether the credentials provided are wrong.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 这个登录模板与我们之前创建的模板非常相似。Django默认使用位于`django.contrib.auth.forms`的`AuthenticationForm`表单。此表单尝试验证用户，如果登录失败，则引发验证错误。我们在模板中使用`{%
    if form.errors %}`来检查提供的凭据是否错误。
- en: We have added a hidden HTML `<input>` element to submit the value of a variable
    called `next`. This variable is provided to the login view if you pass a parameter
    named `next` to the request, for example, by accessing `http://127.0.0.1:8000/account/login/?next=/account/`.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 我们添加了一个隐藏的HTML `<input>`元素来提交名为`next`的变量的值。如果你在请求中传递一个名为`next`的参数，这个变量就会提供给登录视图，例如，通过访问`http://127.0.0.1:8000/account/login/?next=/account/`。
- en: The `next` parameter has to be a URL. If this parameter is given, the Django
    login view will redirect the user to the given URL after a successful login.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '`next`参数必须是一个URL。如果提供了此参数，Django登录视图将在登录成功后将用户重定向到指定的URL。'
- en: 'Now, create a `logged_out.html` template inside the `templates/registration/`
    directory and make it look like this:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，在`templates/registration/`目录内创建一个名为`logged_out.html`的模板，并使其看起来像这样：
- en: '[PRE22]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: This is the template that Django will display after the user logs out.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这是用户登出后Django将显示的模板。
- en: We have added the URL patterns and templates for the login and logout views.
    Users can now log in and out using Django’s authentication views.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 我们为登录和注销视图添加了URL模式和模板。现在，用户可以使用Django的认证视图登录和注销。
- en: Now, we will create a new view to display a dashboard when users log in to their
    accounts.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将创建一个新的视图来在用户登录账户时显示仪表板。
- en: 'Edit the `views.py` file of the `account` application and add the following
    code to it:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`account`应用的`views.py`文件，并向其中添加以下代码：
- en: '[PRE23]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: We have created the `dashboard` view, and we have applied to it the `login_required`
    decorator of the authentication framework. The `login_required` decorator checks
    whether the current user is authenticated.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 我们创建了`dashboard`视图，并将其应用于认证框架的`login_required`装饰器。`login_required`装饰器检查当前用户是否已认证。
- en: If the user is authenticated, it executes the decorated view; if the user is
    not authenticated, it redirects the user to the login URL, with the originally
    requested URL as a `GET` parameter named `next`.
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 如果用户已认证，它将执行装饰过的视图；如果用户未认证，它将重定向用户到登录URL，并将最初请求的URL作为名为`next`的`GET`参数。
- en: By doing this, the login view redirects users to the URL that they were trying
    to access after they successfully logged in. Remember that we added a hidden `<input>`
    HTML element named `next` in the login template for this purpose.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，登录视图将用户重定向到他们成功登录后尝试访问的URL。记住，我们在登录模板中添加了一个名为`next`的隐藏`<input>` HTML元素来达到这个目的。
- en: We have also defined a `section` variable. We will use this variable to highlight
    the current section in the main menu of the site.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还定义了一个`section`变量。我们将使用这个变量来突出显示网站主菜单中的当前部分。
- en: Next, we need to create a template for the dashboard view.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们需要为仪表板视图创建一个模板。
- en: 'Create a new file inside the `templates/account/` directory and name it `dashboard.html`.
    Add the following code to it:'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 在`templates/account/`目录内创建一个新文件，并将其命名为`dashboard.html`。向其中添加以下代码：
- en: '[PRE24]'
  id: totrans-172
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'Edit the `urls.py` file of the `account` application and add the following
    URL pattern for the view. The new code is highlighted in bold:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑`account`应用的`urls.py`文件，并为视图添加以下URL模式。新的代码以粗体显示：
- en: '[PRE25]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'Edit the `settings.py` file of the project and add the following code to it:'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 编辑项目的`settings.py`文件，并向其中添加以下代码：
- en: '[PRE26]'
  id: totrans-176
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We have defined the following settings:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 我们定义了以下设置：
- en: '`LOGIN_REDIRECT_URL`: Tells Django which URL to redirect the user to after
    a successful login if no `next` parameter is present in the request'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOGIN_REDIRECT_URL`：告诉Django在请求中没有`next`参数时，登录成功后要将用户重定向到哪个URL'
- en: '`LOGIN_URL`: The URL to redirect the user to log in (for example, views using
    the `login_required` decorator)'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOGIN_URL`：重定向用户登录的URL（例如，使用`login_required`装饰器的视图）'
- en: '`LOGOUT_URL`: The URL to redirect the user to log out'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`LOGOUT_URL`：重定向用户注销的URL'
- en: We have used the names of the URLs that we previously defined with the `name`
    attribute of the `path()` function in the URL patterns. Hardcoded URLs instead
    of URL names can also be used for these settings.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 我们在URL模式中使用了之前定义的URL的`name`属性。也可以使用硬编码的URL而不是URL名称来设置这些参数。
- en: 'Let’s summarize what we have done so far:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们总结一下到目前为止我们所做的工作：
- en: We have added the built-in Django authentication login and logout views to the
    project.
  id: totrans-183
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们将内置的Django认证登录和注销视图添加到了项目中。
- en: We have created custom templates for both views and defined a simple dashboard
    view to redirect users after they log in.
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 我们为两个视图创建了自定义模板，并定义了一个简单的仪表板视图，用于用户登录后重定向。
- en: Finally, we have added settings for Django to use these URLs by default.
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 最后，我们为Django添加了默认使用这些URL的设置。
- en: Now, we will add a link to the login URL and a button to log out to the base
    template. In order to do this, we have to determine whether the current user is
    logged in or not to display the appropriate action for each case. The current
    user is set in the `HttpRequest` object by the authentication middleware. You
    can access it with `request.user`. The `request` object contains a `User` object
    even if the user is not authenticated. A non-authenticated user is set in the
    request as an instance of `AnonymousUser`. The best way to check if the current
    user is authenticated is by accessing the read-only attribute, `is_authenticated`.
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将向基本模板添加一个指向登录 URL 的链接和一个注销按钮。为了做到这一点，我们必须确定当前用户是否已登录，以便为每种情况显示适当的操作。当前用户由认证中间件设置在`HttpRequest`对象中。你可以通过`request.user`访问它。即使用户未认证，`request`对象也包含一个`User`对象。检查当前用户是否认证的最佳方式是通过访问只读属性`is_authenticated`。
- en: 'Edit the `templates/base.html` template by adding the following lines highlighted
    in bold:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 通过添加以下加粗的行来编辑`templates/base.html`模板：
- en: '[PRE27]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: The site’s menu is only displayed to authenticated users. The `section` variable
    is checked to add a `selected` class attribute to the menu `<li>` list item of
    the current section. By doing so, the menu item that corresponds to the current
    section will be highlighted using CSS. The user’s first name and a button to log
    out are displayed if the user is authenticated; a link to log in is displayed
    otherwise. If the user’s name is empty, the username is displayed instead by using
    `request.user.first_name|default:request.user.username`. Note that for the logout
    action, we use a form with the method `POST` and a button to submit the form.
    This is because the `LogoutView` requires `POST` requests.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 网站的菜单只对认证用户显示。检查`section`变量以向当前部分的菜单`<li>`列表项添加`selected`类属性。这样做，与当前部分对应的菜单项将通过
    CSS 突出显示。如果用户已认证，将显示用户的姓名和一个注销按钮；否则，将显示一个登录链接。如果用户的姓名为空，则使用`request.user.first_name|default:request.user.username`显示用户名。请注意，对于注销操作，我们使用方法为`POST`的表单和一个提交表单的按钮。这是因为`LogoutView`需要`POST`请求。
- en: 'Open `http://127.0.0.1:8000/account/login/` in your browser. You should see
    the **Log-in** page. Enter a valid username and password and click on the **Log-in**
    button. You should see the following screen:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的浏览器中打开`http://127.0.0.1:8000/account/login/`。你应该看到**登录**页面。输入有效的用户名和密码，然后点击**登录**按钮。你应该看到以下屏幕：
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B21088_04_08.png)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面  描述自动生成，置信度中等](img/B21088_04_08.png)'
- en: 'Figure 4.8: The Dashboard page'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.8：仪表板页面
- en: 'The **My dashboard** menu item is highlighted with CSS because it has a `selected`
    class. Since the user is authenticated, the first name of the user is displayed
    on the right side of the header. Click on the **Logout** button. You should see
    the following page:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: '**我的仪表板**菜单项通过 CSS 突出显示，因为它有一个`selected`类。由于用户已认证，用户的姓名现在显示在页眉的右侧。点击**注销**按钮。你应该看到以下页面：'
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_04_09.png)'
  id: totrans-194
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，应用程序  描述自动生成](img/B21088_04_09.png)'
- en: 'Figure 4.9: The Logged out page'
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 图4.9：注销页面
- en: On this page, you can see that the user is logged out, and therefore, the menu
    of the website is not displayed. The link displayed on the right side of the header
    is now **Log-in**.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个页面上，你可以看到用户已经注销，因此，网站菜单没有显示。页眉右侧现在显示的是**登录**链接。
- en: If you see the **Logged out** page of the Django administration site instead
    of your own **Logged out** page, check the `INSTALLED_APPS` setting of your project
    and make sure that `django.contrib.admin` comes after the `account` application.
    Both applications contain logged-out templates located in the same relative path.
    The Django template loader will go through the different applications in the `INSTALLED_APPS`
    list and use the first template it finds.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到的是 Django 管理网站的**注销**页面而不是你自己的**注销**页面，请检查你项目的`INSTALLED_APPS`设置，并确保`django.contrib.admin`在`account`应用之后。这两个应用都包含位于相同相对路径的注销模板。Django
    模板加载器会遍历`INSTALLED_APPS`列表中的不同应用，并使用它找到的第一个模板。
- en: Change password views
  id: totrans-198
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 修改密码视图
- en: We need users to be able to change their password after they log in to the site.
    We will integrate the Django authentication views to change passwords.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 我们需要用户在登录网站后能够更改他们的密码。我们将集成 Django 认证视图来更改密码。
- en: 'Open the `urls.py` file of the `account` application and add the following
    URL patterns highlighted in bold:'
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  id: totrans-201
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: The `PasswordChangeView` view will handle the form to change the password, and
    the `PasswordChangeDoneView` view will display a success message after the user
    has successfully changed their password. Let’s create a template for each view.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new file inside the `templates/registration/` directory of the `account`
    application and name it `password_change_form.html`. Add the following code to
    it:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  id: totrans-204
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: The `password_change_form.html` template includes the form to change the password.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create another file in the same directory and name it `password_change_done.html`.
    Add the following code to it:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: The `password_change_done.html` template only contains the success message to
    be displayed when the user has successfully changed their password.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/account/password-change/` in your browser. If you
    are not logged in, the browser will redirect you to the **Log-in** page. After
    you are successfully authenticated, you will see the following change password
    page:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_04_10.png)'
  id: totrans-210
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.10: The change password form'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the form with your current password and your new password, and then
    click on the **CHANGE** button. You will see the following success page:'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_04_11.png)'
  id: totrans-213
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.11: The successful change password page'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
- en: Log out and log in again using your new password to verify that everything works
    as expected.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
- en: Reset password views
  id: totrans-216
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If users forget their password, they should be able to recover their account.
    We will implement a password reset feature. This will enable users to regain access
    to their account by receiving a password reset email that contains a secure link,
    generated with a unique token, allowing them to create a new password.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file of the `account` application and add the following
    URL patterns highlighted in bold:'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-219
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Add a new file to the `templates/registration/` directory of the `account`
    application and name it `password_reset_form.html`. Add the following code to
    it:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Now, create another file in the same directory and name it `password_reset_email.html`.
    Add the following code to it:'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: The `password_reset_email.html` template will be used to render the email sent
    to users to reset their password. It includes a reset token that is generated
    by the view.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another file in the same directory and name it `password_reset_done.html`.
    Add the following code to it:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'Create another template in the same directory and name it `password_reset_confirm.html`.
    Add the following code to it:'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: In this template, we confirm whether the link to reset the password is valid
    by checking the `validlink` variable. The view `PasswordResetConfirmView` checks
    the validity of the token provided in the URL and passes the `validlink` variable
    to the template. If the link is valid, the user password reset form is displayed.
    Users can only set a new password if they have a valid reset password link.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another template and name it `password_reset_complete.html`. Enter the
    following code into it:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'Finally, edit the `registration/login.html` template of the `account` application,
    and add the following lines highlighted in bold:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'Now, open `http://127.0.0.1:8000/account/login/` in your browser. The **Log-in**
    page should now include a link to the reset password page, as follows:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_04_12.png)'
  id: totrans-235
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.12: The Log-in page, including a link to the reset password page'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Forgotten your password?** link. You should see the following
    page:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_04_13.png)'
  id: totrans-238
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.13: The restore password form'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we need to add a **Simple Mail Transfer Protocol** (**SMTP**)
    configuration to the `settings.py` file of your project so that Django is able
    to send emails. You learned how to add email settings to your project in *Chapter
    2*, *Enhancing Your Blog with Advanced Features*. However, during development,
    you can configure Django to write emails to the standard output instead of sending
    them through an SMTP server. Django provides an email backend to write emails
    to the console.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file of your project, and add the following line to
    it:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-242
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: The `EMAIL_BACKEND` setting indicates the class that will be used to send emails.
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to your browser, enter the email address of an existing user, and click
    on the **SEND E-MAIL** button. You should see the following page:'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_04_14.png)'
  id: totrans-245
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.14: The reset password email sent page'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the shell prompt, where you are running the development server.
    You will see the generated email, as follows:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-248
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: The email is rendered using the `password_reset_email.html` template that you
    created earlier. The URL to reset the password includes a token that was generated
    dynamically by Django.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the URL from the email, which should look similar to `http://127.0.0.1:8000/account/password-reset/MQ/ardx0u-b4973cfa2c70d652a190e79054bc479a/`,
    and open it in your browser. You should see the following page:'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message, email  Description
    automatically generated](img/B21088_04_15.png)'
  id: totrans-251
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.15: The reset password form'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
- en: The page to set a new password uses the `password_reset_confirm.html` template.
    Fill in a new password and click on the **CHANGE MY PASSWORD** button.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
- en: 'Django will create a new hashed password and save it in the database. You will
    see the following success page:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_04_16.png)'
  id: totrans-255
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.16: The successful password reset page'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can log back into the user account using the new password.
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
- en: Each token to set a new password can be used only once. If you open the link
    that you received again, you will get a message stating that the token is invalid.
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
- en: We have now integrated the views of the Django authentication framework into
    the project. These views are suitable for most cases. However, you can create
    your own views if you need different behavior.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
- en: Django provides URL patterns for the authentication views that are equivalent
    to the ones we just created. We will replace the authentication URL patterns with
    the ones provided by Django.
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
- en: 'Comment out the authentication URL patterns that you added to the `urls.py`
    file of the `account` application and include `django.contrib.auth.urls` instead,
    as follows. The new code is highlighted in bold:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  id: totrans-262
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: You can see the authentication URL patterns included at [https://github.com/django/django/blob/stable/5.0.x/django/contrib/auth/urls.py](https://github.com/django/django/blob/stable/5.0.x/django/contrib/auth/urls.py).
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
- en: We have now added all the necessary authentication views to our project. Next,
    we will implement user registration.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
- en: User registration and user profiles
  id: totrans-265
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Site users can now log in, log out, change their password, and reset their password.
    However, we need to build a view to allow visitors to create a user account. They
    should be able to register and create a profile on our site. Once registered,
    users will be able to log in to our site using their credentials.
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
- en: User registration
  id: totrans-267
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let’s create a simple view to allow user registration on your website. Initially,
    you have to create a form to let the user enter a username, their real name, and
    a password.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `forms.py` file located inside the `account` application directory
    and add the following lines highlighted in bold:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  id: totrans-270
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: We have created a model form for the user model. This form includes the fields
    `username`, `first_name`, and `email` of the user model. We retrieve the user
    model dynamically by using the `get_user_model()` function provided by the `auth`
    application. This retrieves the user model, which could be a custom model instead
    of the default `auth` `User` model, since Django allows you to define custom user
    models. These fields will be validated according to the validations of their corresponding
    model fields. For example, if the user chooses a username that already exists,
    they will get a validation error because `username` is a field defined with `unique=True`.
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep your code generic, use the `get_user_model()` method to retrieve
    the user model and the `AUTH_USER_MODEL` setting to refer to it when defining
    a model’s relationship with in to it, instead of referring to the `auth` user
    model directly. You can read more information about this at [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#django.contrib.auth.get_user_model](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#django.contrib.auth.get_user_model).
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
- en: We have also added two additional fields—`password` and `password2`—for users
    to set a password and to repeat it. Let’s add the field validation to check that
    both passwords are the same.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `forms.py` file in the `account` application and add the following
    `clean_password2()` method to the `UserRegistrationForm` class. The new code is
    highlighted in bold:'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  id: totrans-275
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: We have defined a `clean_password2()` method to compare the second password
    against the first one and raise a validation error if the passwords don’t match.
    This method is executed when the form is validated by calling its `is_valid()`
    method. You can provide a `clean_<fieldname>()` method to any of your form fields
    to clean the value or raise form validation errors for a specific field. Forms
    also include a general `clean()` method to validate the entire form, which is
    useful to validate fields that depend on each other. In this case, we use the
    field-specific `clean_password2()` validation instead of overriding the `clean()`
    method of the form. This avoids overriding other field-specific checks that the
    `ModelForm` gets from the restrictions set in the model (for example, validating
    that the username is unique).
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
- en: Django also provides a `UserCreationForm` form that resides in `django.contrib.auth.forms`
    and is very similar to the one we have created.
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    code highlighted in bold:'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  id: totrans-279
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: The view for creating user accounts is quite simple. For security reasons, instead
    of saving the raw password entered by the user, we use the `set_password()` method
    of the user model. This method handles password hashing before storing the password
    in the database.
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
- en: Django doesn’t store clear text passwords; it stores hashed passwords instead.
    Hashing is the process of transforming a given key into another value. A hash
    function is used to generate a fixed-length value according to a mathematical
    algorithm. By hashing passwords with secure algorithms, Django ensures that user
    passwords stored in the database require massive amounts of computing time to
    break.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
- en: By default, Django uses the `PBKDF2` hashing algorithm with a SHA256 hash to
    store all passwords. However, Django not only supports checking existing passwords
    hashed with `PBKDF2` but also supports checking stored passwords hashed with other
    algorithms, such as `PBKDF2SHA1`, `argon2`, `bcrypt`, and `scrypt`.
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PASSWORD_HASHERS` setting defines the password hashers that the Django
    project supports. The following is the default `PASSWORD_HASHERS` list:'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  id: totrans-284
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: Django uses the first entry of the list (in this case, `PBKDF2PasswordHasher`)
    to hash all passwords. The rest of the hashers can be used by Django to check
    existing passwords.
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
- en: The `scrypt` hasher was introduced in Django 4.0\. It is more secure and recommended
    over `PBKDF2`. However, `PBKDF2` is still the default hasher, as `scrypt` requires
    OpenSSL 1.1+ and more memory.
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about how Django stores passwords and about the password
    hashers included at [https://docs.djangoproject.com/en/5.0/topics/auth/passwords/](https://docs.djangoproject.com/en/5.0/topics/auth/passwords/).
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, edit the `urls.py` file of the `account` application and add the following
    URL pattern highlighted in bold:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'Finally, create a new template in the `templates/account/` template directory
    of the `account` application, name it `register.html`, and make it look as follows:'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  id: totrans-291
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Create an additional template file in the same directory and name it `register_done.html`.
    Add the following code to it:'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  id: totrans-293
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'Open `http://127.0.0.1:8000/account/register/` in your browser. You will see
    the registration page you have created:'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_17.png)'
  id: totrans-295
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.17: The account creation form'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the details for a new user and click on the **CREATE MY ACCOUNT** button.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
- en: 'If all fields are valid, the user will be created, and you will see the following
    success message:'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, website  Description automatically
    generated](img/B21088_04_18.png)'
  id: totrans-299
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.18: The account is successfully created page'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **log in** link and enter your username and password to verify
    that you can access your newly created account.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s add a link to register on the login template. Edit the `registration/login.html`
    template and find the following line:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Replace it with the following lines:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'Open `http://127.0.0.1:8000/account/login/` in your browser. The page should
    now look as follows:'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_04_19.png)'
  id: totrans-307
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.19: The Log-in page including a link to register'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
- en: We have now made the registration page accessible from the **Log-in** page.
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
- en: Extending the user model
  id: totrans-310
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the user model provided by Django’s authentication framework is sufficient
    for most typical scenarios, it does have a limited set of predefined fields. If
    you want to capture additional details relevant to your application, you may want
    to extend the default user model. For example, the default user model comes with
    the `first_name` and `last_name` fields, a structure that may not align with naming
    conventions in various countries. Additionally, you may want to store further
    user details or construct a more comprehensive user profile.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
- en: A simple way to extend the user model is by creating a profile model that contains
    a one-to-one relationship with the Django user model, and any additional fields.
    A one-to-one relationship is similar to a `ForeignKey` field with the parameter
    `unique=True`. The reverse side of the relationship is an implicit one-to-one
    relationship with the related model instead of a manager for multiple elements.
    From each side of the relationship, you access a single related object.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of your `account` application and add the following
    code highlighted in bold:'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  id: totrans-314
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: Our user profile will include the user’s date of birth and an image of the user.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
- en: The one-to-one field `user` will be used to associate profiles with users. We
    use `AUTH_USER_MODEL` to refer to the user model instead of pointing to the `auth.User`
    model directly. This makes our code more generic, as it can operate with custom-defined
    user models. With `on_delete=models.CASCADE`, we force the deletion of the related
    `Profile` object when a `User` object gets deleted.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
- en: The `date_of_birth` field is a `DateField`. We have made this field optional
    with `blank=True`, and we allow `null` values with `null=True`.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
- en: The `photo` field is an `ImageField`. We have made this field optional with
    `blank=True`. An `ImageField` field manages the storage of image files. It validates
    that the file provided is a valid image, stores the image file in the directory
    indicated with the `upload_to` parameter, and stores the relative path to the
    file in the related database field. An `ImageField` field is translated to a `VARHAR(100)`
    column in the database by default. A blank string will be stored if the value
    is left empty.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
- en: Installing Pillow and serving media files
  id: totrans-319
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to install the Pillow library to manage images. Pillow is the de facto
    standard library for image processing in Python. It supports multiple image formats
    and provides powerful image processing functions. Pillow is required by Django
    to handle images with `ImageField`.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Pillow by running the following command from the shell prompt:'
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  id: totrans-322
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'Edit the `settings.py` file of the project and add the following lines:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  id: totrans-324
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: This will enable Django to manage file uploads and serve media files. `MEDIA_URL`
    is the base URL used to serve the media files uploaded by users. `MEDIA_ROOT`
    is the local path where they reside. Paths and URLs for files are built dynamically
    by prepending the project path or the media URL to them for portability.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, edit the main `urls.py` file of the `bookmarks` project and modify the
    code, as follows. The new lines are highlighted in bold:'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  id: totrans-327
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: We have added the `static()` helper function to serve media files with the Django
    development server during development (that is, when the `DEBUG` setting is set
    to `True`).
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
- en: The `static()` helper function is suitable for development but not for production
    use. Django is very inefficient at serving static files. Never serve your static
    files with Django in a production environment. You will learn how to serve static
    files in a production environment in *Chapter 17*, *Going Live*.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: Creating migrations for the profile model
  id: totrans-330
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s create the database table for the new `Profile` model. Open the shell
    and run the following command to create the database migration for the new model:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'You will get the following output:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'Next, sync the database with the following command in the shell prompt:'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  id: totrans-336
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: 'You will see output that includes the following line:'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  id: totrans-338
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Edit the `admin.py` file of the `account` application and register the `Profile`
    model in the administration site by adding the code in bold:'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  id: totrans-340
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: 'Run the development server using the following command from the shell prompt:'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  id: totrans-342
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'Open `http://127.0.0.1:8000/admin/` in your browser. Now, you should be able
    to see the `Profile` model on the administration site of your project, as follows:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_20.png)'
  id: totrans-344
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.20: The ACCOUNT block on the administration site index page'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add** link of the **Profiles** row. You will see the following
    form to add a new profile:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_21.png)'
  id: totrans-347
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.21: The Add profile form'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Profile` object manually for each of the existing users in the database.
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will let users edit their profiles on the website.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `forms.py` file of the `account` application and add the following
    lines highlighted in bold:'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  id: totrans-352
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: 'These forms are as follows:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
- en: '`UserEditForm`: This will allow users to edit their first name, last name,
    and email, which are attributes of the built-in Django user model.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProfileEditForm`: This will allow users to edit the profile data that is saved
    in the custom `Profile` model. Users will be able to edit their date of birth
    and upload an image for their profile picture.'
  id: totrans-355
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    lines highlighted in bold:'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  id: totrans-357
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: When users register on the site, a corresponding `Profile` object will be automatically
    created and associated with the `User` object created. However, users created
    through the administration site won’t automatically get an associated `Profile`
    object. Both users with and without a profile (for example, staff users) can co-exist.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
- en: If you want to force profile creation for all users, you can use Django signals
    to trigger the creation of a `Profile` object whenever a user is created. You
    will learn about signals in *Chapter 7*, *Tracking User Actions*, where you will
    engage in an exercise to implement this feature in the section *Expanding your
    project using AI*.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will let users edit their profiles.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    code highlighted in bold:'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  id: totrans-362
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'We have added the new `edit` view to allow users to edit their personal information.
    We have added the `login_required` decorator to the view because only authenticated
    users will be able to edit their profiles. For this view, we use two model forms:
    `UserEditForm` to store the data of the built-in user model and `ProfileEditForm`
    to store the additional personal data in the custom `Profile` model. To validate
    the data submitted, we call the `is_valid()` method of both forms. If both forms
    contain valid data, we save both forms by calling the `save()` method to update
    the corresponding objects in the database.'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following URL pattern to the `urls.py` file of the `account` application:'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  id: totrans-365
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'Finally, create a template for this view in the `templates/account/` directory
    and name it `edit.html`. Add the following code to it:'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  id: totrans-367
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: In the preceding code, we have added `enctype="multipart/form-data"` to the
    `<form>` HTML element to enable file uploads. We use an HTML form to submit both
    the `user_form` and `profile_form` forms.
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the URL `http://127.0.0.1:8000/account/register/` and register a new user.
    Then, log in with the new user and open the URL `http://127.0.0.1:8000/account/edit/`.
    You should see the following page:'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_04_22.png)'
  id: totrans-370
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.22: The profile edit form'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
- en: You can now add the profile information and save the changes.
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
- en: We will edit the dashboard template to include links to the edit profile and
    change password pages.
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `templates/account/dashboard.html` template and add the following
    lines highlighted in bold:'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  id: totrans-375
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'Users can now access the form to edit their profile from the dashboard. Open
    `http://127.0.0.1:8000/account/` in your browser and test the new link to edit
    a user’s profile. The dashboard should now look like this:'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B21088_04_23.png)'
  id: totrans-377
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.23: Dashboard page content, including links to edit a profile and
    change a password'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom user model
  id: totrans-379
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Django also offers a way to substitute the user model with a custom model. The
    `User` class should inherit from Django’s `AbstractUser` class, which provides
    the full implementation of the default user as an abstract model. You can read
    more about this method at [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model).
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom user model will give you more flexibility, but it might also
    result in more difficult integration with pluggable applications that interact
    directly with Django’s `auth` user model.
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-382
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build an authentication system for your
    site. You implemented all the necessary views for users to register, log in, log
    out, edit their password, and reset their password. You also built a model to
    store custom user profiles.
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will improve the user experience by providing feedback
    on user’s actions through the Django messages framework. You will also broaden
    the scope of authentication methods, enabling users to authenticate with their
    email address, and integrate social authentication via Google. You will also learn
    how to serve the development server over HTTPS using Django Extensions, and you
    will customize the authentication pipeline to create user profiles automatically.
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  id: totrans-385
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04)'
  id: totrans-387
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Built-in authentication views: [https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views](https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views)'
  id: totrans-388
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authentication URL patterns: [https://github.com/django/django/blob/stable/3.0.x/django/contrib/auth/urls.py](https://github.com/django/django/blob/stable/3.0.x/django/contrib/auth/urls.py)'
  id: totrans-389
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How Django manages passwords and available password hashers: [https://docs.djangoproject.com/en/5.0/topics/auth/passwords/](https://docs.djangoproject.com/en/5.0/topics/auth/passwords/)'
  id: totrans-390
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generic user model and the `get_user_model()` method: [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#django.contrib.auth.get_user_model](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#django.contrib.auth.get_user_model)'
  id: totrans-391
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using a custom user model: [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model)'
  id: totrans-392
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join us on Discord!
  id: totrans-393
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Django development experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more.Scan the QR code or visit the link
    to join the community.
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/Django5ByExample](https://packt.link/Django5ByExample)'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code287089408934129031.png)'
  id: totrans-396
  prefs: []
  type: TYPE_IMG
