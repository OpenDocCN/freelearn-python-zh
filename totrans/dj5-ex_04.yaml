- en: '4'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Building a Social Website
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the preceding chapter, you learned how to implement a tagging system and
    how to recommend similar posts. You implemented custom template tags and filters.
    You also learned how to create sitemaps and feeds for your site, and you built
    a full-text search engine using PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will learn how to develop user account functionalities
    to create a social website, including user registration, password management,
    profile editing, and authentication. We will implement social features on this
    site in the next few chapters, to let users share images and interact with each
    other. Users will be able to bookmark any image on the internet and share it with
    other users. They will also be able to see activity on the platform from the users
    they follow and like/unlike the images shared by them.
  prefs: []
  type: TYPE_NORMAL
- en: 'This chapter will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login view
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Django authentication framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating templates for Django login, logout, password change, and password reset
    views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating user registration views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending the user model with a custom profile model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the project for media file uploads
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functional overview
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Figure 4.1* shows a representation of the views, templates, and functionalities
    that will be built in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_01.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.1: Diagram of functionalities built in Chapter 4'
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you will create a new project and use the login, logout, password
    change, and password recovery views provided by Django in the `django.contrib.auth`
    package. You will create templates for the authentication views, and you will
    create a `dashboard` view that users will have access to when they successfully
    authenticate. You will implement user registration with the `register` view. Finally,
    you will extend the user model with a custom `Profile` model and create the `edit`
    view to allow users to edit their profile.
  prefs: []
  type: TYPE_NORMAL
- en: The source code for this chapter can be found at [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04).
  prefs: []
  type: TYPE_NORMAL
- en: All Python packages used in this chapter are included in the `requirements.txt`
    file in the source code for the chapter. You can follow the instructions to install
    each Python package in the following sections, or you can install all requirements
    at once with the command `python -m pip install -r requirements.txt`.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a social website project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We are going to create a social application that will allow users to share images
    that they find on the internet. This project is relevant because it will help
    you understand how to build social capabilities into your site, as well as how
    to implement advanced functionalities with Django and JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'For our image-sharing website, we will need to build the following elements:'
  prefs: []
  type: TYPE_NORMAL
- en: An authentication system for users to register, log in, edit their profile,
    and change or reset their password
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Social authentication to sign in with services such as Google
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Functionality to display shared images and a system for users to share images
    from any website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An activity stream that allows users to see the content uploaded by the people
    that they follow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A follow system to allow users to follow each other on the website
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This chapter will address the first point on the list. The rest of the points
    will be covered in *Chapters* 5 to 7.
  prefs: []
  type: TYPE_NORMAL
- en: Starting the social website project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start by setting up the virtual environment for the project and creating
    the initial project structure.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the terminal and use the following commands to create a virtual environment
    for your project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Linux or macOS, run the following command to activate your
    virtual environment:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you are using Windows, use the following command instead:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'The shell prompt will display your active virtual environment, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Install Django in your virtual environment with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the following command to create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The initial project structure has been created. Use the following commands
    to get into your project directory and create a new application named `account`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Remember that you should add the new application to your project by adding the
    applicationâ€™s name to the `INSTALLED_APPS` setting in the `settings.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit `settings.py` and add the following line highlighted in bold to the `INSTALLED_APPS`
    list before any of the other installed apps:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Django looks for templates in the application template directories by order
    of appearance in the `INSTALLED_APPS` setting. The `django.contrib.admin` app
    includes standard authentication templates, which we will override in the `account`
    application. Usually, we place our own apps at the end of the list. In this case,
    we place the application first in the `INSTALLED_APPS` setting to ensure that
    our custom authentication templates will be used, instead of the authentication
    templates contained in `django.contrib.admin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to sync the database with the models of the default
    applications included in the `INSTALLED_APPS` setting:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: You will see that all the initial Django database migrations get applied. The
    database tables corresponding to the Django models of the installed applications
    have been created. Next, we will build an authentication system into our project
    using the Django authentication framework.
  prefs: []
  type: TYPE_NORMAL
- en: Using the Django authentication framework
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django comes with a built-in authentication framework that can handle user authentication,
    sessions, permissions, and user groups. The authentication system includes views
    for common user actions such as logging in, logging out, password change, and
    password reset.
  prefs: []
  type: TYPE_NORMAL
- en: The authentication framework is located at `django.contrib.auth` and is used
    by other Django `contrib` packages. Remember that we already used the authentication
    framework in *Chapter 1*, *Building a Blog Application*, to create a superuser
    for the blog application to access the administration site.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we create a new Django project using the `startproject` command, the authentication
    framework is included in the default settings of our project. It consists of the
    `django.contrib.auth` application and the following two middleware classes found
    in the `MIDDLEWARE` setting of our project:'
  prefs: []
  type: TYPE_NORMAL
- en: '`AuthenticationMiddleware`: Associates users with requests using sessions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`SessionMiddleware`: Handles the current session across requests'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Middleware is classes with methods that are globally executed during the request
    or response phase. You will use middleware classes on several occasions throughout
    this book, and you will learn how to create custom middleware in *Chapter 17*,
    *Going Live*.
  prefs: []
  type: TYPE_NORMAL
- en: 'The authentication framework also includes the following models that are defined
    in `django.contrib.auth.models`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`User`: A user model with basic fields; the main fields of this model are `username`,
    `password`, `email`, `first_name`, `last_name`, and `is_active`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Group`: A group model to categorize users'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Permission`: Flags for users or groups to perform certain actions'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The framework also includes default authentication views and forms, which you
    will use later.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a login view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start this section by using the Django authentication framework to
    allow users to log in to the website. We will create a view that will perform
    the following actions to log in a user:'
  prefs: []
  type: TYPE_NORMAL
- en: Present the user with a login form
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Get the username and password provided by the user when they submit the form
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Authenticate the user against the data stored in the database
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Check whether the user is active
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Log the user into the website and start an authenticated session
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: We will start by creating the login form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `forms.py` file in the `account` application directory and add
    the following lines to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: This form will be used to authenticate users against the database. The `PasswordInput`
    widget is used to render the `password` HTML element. This will include `type="password"`
    in the HTML so that the browser treats it as a password input.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'This is what the basic login view does:'
  prefs: []
  type: TYPE_NORMAL
- en: When the `user_login` view is called with a `GET` request, a new login form
    is instantiated with `form = LoginForm()`. The form is then passed to the template.
  prefs: []
  type: TYPE_NORMAL
- en: 'When the user submits the form via `POST`, the following actions are performed:'
  prefs: []
  type: TYPE_NORMAL
- en: The form is instantiated with the submitted data with `form = LoginForm(request.POST)`.
  prefs: []
  type: TYPE_NORMAL
- en: The form is validated with `form.is_valid()`. If it is not valid, the form errors
    will be displayed later in the template (for example, if the user didnâ€™t fill
    in one of the fields).
  prefs: []
  type: TYPE_NORMAL
- en: If the submitted data is valid, the user gets authenticated against the database
    using the `authenticate()` method. This method takes the `request` object, the
    `username`, and the `password` parameters and returns the `User` object if the
    user has been successfully authenticated, or `None` otherwise. If the user has
    not been successfully authenticated, a raw `HttpResponse` is returned with an
    **Invalid login** message.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is successfully authenticated, the user status is checked by accessing
    the `is_active` attribute. This is an attribute of Djangoâ€™s user model. If the
    user is not active, an `HttpResponse` is returned with a **Disabled account**
    message.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is active, the user is logged into the site. The user is set in
    the session by calling the `login()` method. An **Authenticated successfully**
    message is returned.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note the difference between `authenticate()` and `login()`: `authenticate()`
    verifies the userâ€™s credentials and, upon validation, returns a `User` object
    representing the authenticated user. In contrast, `login()` sets the user in the
    current session by incorporating the authenticated `User` object into the current
    session context.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will create a URL pattern for this view:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new `urls.py` file in the `account` application directory and add
    the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the main `urls.py` file located in your `bookmarks` project directory,
    import `include`, and add the URL patterns of the `account` application, as follows.
    The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The login view can now be accessed with a URL.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s create a template for this view. Since there are no templates in the
    project yet, we will start by creating a base template that will be extended by
    the login template:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the following files and directories inside the `account` application
    directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `base.html` template and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: This will be the base template for the website. As you did in your previous
    project, include the CSS styles in the main template. You can find these static
    files in the code that comes with this chapter. Copy the `static/` directory of
    the `account` application from the chapterâ€™s source code to the same location
    in your project so that you can use the static files. You can find the directoryâ€™s
    contents at [https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter04/bookmarks/account/static](https://github.com/PacktPublishing/Django-5-by-Example/tree/master/Chapter04/bookmarks/account/static).
  prefs: []
  type: TYPE_NORMAL
- en: The base template defines a `title` block and a `content` block that can be
    filled with content by the templates that extend from it.
  prefs: []
  type: TYPE_NORMAL
- en: Letâ€™s fill in the template for your login form.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `account/login.html` template and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: This template includes the form that is instantiated in the view. Since your
    form will be submitted via `POST`, you will include the `{% csrf_token %}` template
    tag for **cross-site request forgery** (**CSRF**) protection. You learned about
    CSRF protection in *Chapter 2*, *Enhancing Your Blog with Advanced Features*.
  prefs: []
  type: TYPE_NORMAL
- en: There are no users in the database yet. You will need to create a superuser
    first to access the administration site to manage other users.
  prefs: []
  type: TYPE_NORMAL
- en: 'Execute the following command in the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output. Enter your desired username, email, and
    password, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, you will see the following success message:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the development server using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Open `http://127.0.0.1:8000/admin/` in your browser. Access the administration
    site using the credentials of the user you just created. You will see the Django
    administration site, including the `User` and `Group` models of the Django authentication
    framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'It will look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_02.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.2: The Django administration site index page including Users and Groups'
  prefs: []
  type: TYPE_NORMAL
- en: In the **Users** row, click on the **Add** link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new user using the administration site as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_03.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.3: The Add user form on the Django administration site'
  prefs: []
  type: TYPE_NORMAL
- en: Enter the user details and click on the **SAVE** button to save the new user
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in **Personal info**, fill in the **First name**, **Last name**, and
    **Email address** fields as follows, and then click on the **SAVE** button to
    save the changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_04.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.4: The user editing form on the Django administration site'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/account/login/` in your browser. You should see
    the rendered template, including the login form:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_04_05.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.5: The user Log-in page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter invalid credentials and submit the form. You should get the following
    **Invalid login** response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_06.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.6: The invalid login plain text response'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enter valid credentials; you will get the following **Authenticated successfully**
    response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_07.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.7: The successful authentication plain text response'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you have learned how to authenticate users and create your own authentication
    view. You can build your own auth views, but Django ships with ready-to-use authentication
    views that you can leverage.
  prefs: []
  type: TYPE_NORMAL
- en: Using Djangoâ€™s built-in authentication views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Django includes several forms and views in the authentication framework that
    you can use right away. The login view we have created is a good exercise to understand
    the process of user authentication in Django. However, you can use the default
    Django authentication views in most cases.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django provides the following class-based views to deal with authentication.
    All of them are located in `django.contrib.auth.views`:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LoginView`: Handles a login form and logs in a user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LogoutView`: Logs out a user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django provides the following views to handle password changes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PasswordChangeView`: Handles a form to change the userâ€™s password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PasswordChangeDoneView`: The success view that the user is redirected to after
    a successful password change'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Django also includes the following views to allow users to reset their password:'
  prefs: []
  type: TYPE_NORMAL
- en: '`PasswordResetView`: Allows users to reset their password. It generates a one-time-use
    link with a token and sends it to a userâ€™s email account'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PasswordResetDoneView`: Tells users that an emailâ€”including a link to reset
    their passwordâ€”has been sent to them'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PasswordResetConfirmView`: Allows users to set a new password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`PasswordResetCompleteView`: The success view that the user is redirected to
    after successfully resetting their password'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These views can save you a lot of time when building any web application with
    user accounts. The views use default values that can be overridden, such as the
    location of the template to be rendered, or the form to be used by the view.
  prefs: []
  type: TYPE_NORMAL
- en: You can get more information about the built-in authentication views at [https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views](https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views).
  prefs: []
  type: TYPE_NORMAL
- en: Login and logout views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To learn how to use Djangoâ€™s authentication views, we will substitute our custom
    login view with Djangoâ€™s built-in equivalent and also integrate a logout view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file of the `account` application and add the code highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have commented out the URL pattern for the `user_login`
    view that we created previously. Weâ€™ll now use the `LoginView` view of Djangoâ€™s
    authentication framework. We have also added a URL pattern for the `LogoutView`
    view.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new directory inside the `templates/` directory of the `account` application
    and name it `registration`. This is the default path where the Django authentication
    views expect your authentication templates to be.
  prefs: []
  type: TYPE_NORMAL
- en: The `django.contrib.admin` module includes authentication templates that are
    used for the administration site, like the login template. By placing the `account`
    application at the top of the `INSTALLED_APPS` setting when configuring the project,
    we ensured that Django would use our authentication templates instead of the ones
    defined in any other application.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `templates/registration/` directory, name it `login.html`,
    and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: This login template is quite similar to the one we created before. Django uses
    the `AuthenticationForm` form located at `django.contrib.auth.forms` by default.
    This form tries to authenticate the user and raises a validation error if the
    login is unsuccessful. We use `{% if form.errors %}` in the template to check
    whether the credentials provided are wrong.
  prefs: []
  type: TYPE_NORMAL
- en: We have added a hidden HTML `<input>` element to submit the value of a variable
    called `next`. This variable is provided to the login view if you pass a parameter
    named `next` to the request, for example, by accessing `http://127.0.0.1:8000/account/login/?next=/account/`.
  prefs: []
  type: TYPE_NORMAL
- en: The `next` parameter has to be a URL. If this parameter is given, the Django
    login view will redirect the user to the given URL after a successful login.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create a `logged_out.html` template inside the `templates/registration/`
    directory and make it look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: This is the template that Django will display after the user logs out.
  prefs: []
  type: TYPE_NORMAL
- en: We have added the URL patterns and templates for the login and logout views.
    Users can now log in and out using Djangoâ€™s authentication views.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will create a new view to display a dashboard when users log in to their
    accounts.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: We have created the `dashboard` view, and we have applied to it the `login_required`
    decorator of the authentication framework. The `login_required` decorator checks
    whether the current user is authenticated.
  prefs: []
  type: TYPE_NORMAL
- en: If the user is authenticated, it executes the decorated view; if the user is
    not authenticated, it redirects the user to the login URL, with the originally
    requested URL as a `GET` parameter named `next`.
  prefs: []
  type: TYPE_NORMAL
- en: By doing this, the login view redirects users to the URL that they were trying
    to access after they successfully logged in. Remember that we added a hidden `<input>`
    HTML element named `next` in the login template for this purpose.
  prefs: []
  type: TYPE_NORMAL
- en: We have also defined a `section` variable. We will use this variable to highlight
    the current section in the main menu of the site.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we need to create a template for the dashboard view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file inside the `templates/account/` directory and name it `dashboard.html`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `urls.py` file of the `account` application and add the following
    URL pattern for the view. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of the project and add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'We have defined the following settings:'
  prefs: []
  type: TYPE_NORMAL
- en: '`LOGIN_REDIRECT_URL`: Tells Django which URL to redirect the user to after
    a successful login if no `next` parameter is present in the request'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LOGIN_URL`: The URL to redirect the user to log in (for example, views using
    the `login_required` decorator)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`LOGOUT_URL`: The URL to redirect the user to log out'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have used the names of the URLs that we previously defined with the `name`
    attribute of the `path()` function in the URL patterns. Hardcoded URLs instead
    of URL names can also be used for these settings.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s summarize what we have done so far:'
  prefs: []
  type: TYPE_NORMAL
- en: We have added the built-in Django authentication login and logout views to the
    project.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have created custom templates for both views and defined a simple dashboard
    view to redirect users after they log in.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finally, we have added settings for Django to use these URLs by default.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, we will add a link to the login URL and a button to log out to the base
    template. In order to do this, we have to determine whether the current user is
    logged in or not to display the appropriate action for each case. The current
    user is set in the `HttpRequest` object by the authentication middleware. You
    can access it with `request.user`. The `request` object contains a `User` object
    even if the user is not authenticated. A non-authenticated user is set in the
    request as an instance of `AnonymousUser`. The best way to check if the current
    user is authenticated is by accessing the read-only attribute, `is_authenticated`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `templates/base.html` template by adding the following lines highlighted
    in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: The siteâ€™s menu is only displayed to authenticated users. The `section` variable
    is checked to add a `selected` class attribute to the menu `<li>` list item of
    the current section. By doing so, the menu item that corresponds to the current
    section will be highlighted using CSS. The userâ€™s first name and a button to log
    out are displayed if the user is authenticated; a link to log in is displayed
    otherwise. If the userâ€™s name is empty, the username is displayed instead by using
    `request.user.first_name|default:request.user.username`. Note that for the logout
    action, we use a form with the method `POST` and a button to submit the form.
    This is because the `LogoutView` requires `POST` requests.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/account/login/` in your browser. You should see
    the **Log-in** page. Enter a valid username and password and click on the **Log-in**
    button. You should see the following screen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B21088_04_08.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.8: The Dashboard page'
  prefs: []
  type: TYPE_NORMAL
- en: 'The **My dashboard** menu item is highlighted with CSS because it has a `selected`
    class. Since the user is authenticated, the first name of the user is displayed
    on the right side of the header. Click on the **Logout** button. You should see
    the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_04_09.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.9: The Logged out page'
  prefs: []
  type: TYPE_NORMAL
- en: On this page, you can see that the user is logged out, and therefore, the menu
    of the website is not displayed. The link displayed on the right side of the header
    is now **Log-in**.
  prefs: []
  type: TYPE_NORMAL
- en: If you see the **Logged out** page of the Django administration site instead
    of your own **Logged out** page, check the `INSTALLED_APPS` setting of your project
    and make sure that `django.contrib.admin` comes after the `account` application.
    Both applications contain logged-out templates located in the same relative path.
    The Django template loader will go through the different applications in the `INSTALLED_APPS`
    list and use the first template it finds.
  prefs: []
  type: TYPE_NORMAL
- en: Change password views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need users to be able to change their password after they log in to the site.
    We will integrate the Django authentication views to change passwords.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `urls.py` file of the `account` application and add the following
    URL patterns highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The `PasswordChangeView` view will handle the form to change the password, and
    the `PasswordChangeDoneView` view will display a success message after the user
    has successfully changed their password. Letâ€™s create a template for each view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add a new file inside the `templates/registration/` directory of the `account`
    application and name it `password_change_form.html`. Add the following code to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: The `password_change_form.html` template includes the form to change the password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, create another file in the same directory and name it `password_change_done.html`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: The `password_change_done.html` template only contains the success message to
    be displayed when the user has successfully changed their password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open `http://127.0.0.1:8000/account/password-change/` in your browser. If you
    are not logged in, the browser will redirect you to the **Log-in** page. After
    you are successfully authenticated, you will see the following change password
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_04_10.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.10: The change password form'
  prefs: []
  type: TYPE_NORMAL
- en: 'Fill in the form with your current password and your new password, and then
    click on the **CHANGE** button. You will see the following success page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_04_11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.11: The successful change password page'
  prefs: []
  type: TYPE_NORMAL
- en: Log out and log in again using your new password to verify that everything works
    as expected.
  prefs: []
  type: TYPE_NORMAL
- en: Reset password views
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If users forget their password, they should be able to recover their account.
    We will implement a password reset feature. This will enable users to regain access
    to their account by receiving a password reset email that contains a secure link,
    generated with a unique token, allowing them to create a new password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `urls.py` file of the `account` application and add the following
    URL patterns highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Add a new file to the `templates/registration/` directory of the `account`
    application and name it `password_reset_form.html`. Add the following code to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, create another file in the same directory and name it `password_reset_email.html`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: The `password_reset_email.html` template will be used to render the email sent
    to users to reset their password. It includes a reset token that is generated
    by the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another file in the same directory and name it `password_reset_done.html`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: 'Create another template in the same directory and name it `password_reset_confirm.html`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: In this template, we confirm whether the link to reset the password is valid
    by checking the `validlink` variable. The view `PasswordResetConfirmView` checks
    the validity of the token provided in the URL and passes the `validlink` variable
    to the template. If the link is valid, the user password reset form is displayed.
    Users can only set a new password if they have a valid reset password link.
  prefs: []
  type: TYPE_NORMAL
- en: 'Create another template and name it `password_reset_complete.html`. Enter the
    following code into it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, edit the `registration/login.html` template of the `account` application,
    and add the following lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, open `http://127.0.0.1:8000/account/login/` in your browser. The **Log-in**
    page should now include a link to the reset password page, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_04_12.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.12: The Log-in page, including a link to the reset password page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Forgotten your password?** link. You should see the following
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_04_13.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.13: The restore password form'
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we need to add a **Simple Mail Transfer Protocol** (**SMTP**)
    configuration to the `settings.py` file of your project so that Django is able
    to send emails. You learned how to add email settings to your project in *Chapter
    2*, *Enhancing Your Blog with Advanced Features*. However, during development,
    you can configure Django to write emails to the standard output instead of sending
    them through an SMTP server. Django provides an email backend to write emails
    to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `settings.py` file of your project, and add the following line to
    it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `EMAIL_BACKEND` setting indicates the class that will be used to send emails.
  prefs: []
  type: TYPE_NORMAL
- en: 'Return to your browser, enter the email address of an existing user, and click
    on the **SEND E-MAIL** button. You should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application  Description automatically generated](img/B21088_04_14.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.14: The reset password email sent page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the shell prompt, where you are running the development server.
    You will see the generated email, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: The email is rendered using the `password_reset_email.html` template that you
    created earlier. The URL to reset the password includes a token that was generated
    dynamically by Django.
  prefs: []
  type: TYPE_NORMAL
- en: 'Copy the URL from the email, which should look similar to `http://127.0.0.1:8000/account/password-reset/MQ/ardx0u-b4973cfa2c70d652a190e79054bc479a/`,
    and open it in your browser. You should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, chat or text message, email  Description
    automatically generated](img/B21088_04_15.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.15: The reset password form'
  prefs: []
  type: TYPE_NORMAL
- en: The page to set a new password uses the `password_reset_confirm.html` template.
    Fill in a new password and click on the **CHANGE MY PASSWORD** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'Django will create a new hashed password and save it in the database. You will
    see the following success page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application  Description automatically generated](img/B21088_04_16.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.16: The successful password reset page'
  prefs: []
  type: TYPE_NORMAL
- en: Now, you can log back into the user account using the new password.
  prefs: []
  type: TYPE_NORMAL
- en: Each token to set a new password can be used only once. If you open the link
    that you received again, you will get a message stating that the token is invalid.
  prefs: []
  type: TYPE_NORMAL
- en: We have now integrated the views of the Django authentication framework into
    the project. These views are suitable for most cases. However, you can create
    your own views if you need different behavior.
  prefs: []
  type: TYPE_NORMAL
- en: Django provides URL patterns for the authentication views that are equivalent
    to the ones we just created. We will replace the authentication URL patterns with
    the ones provided by Django.
  prefs: []
  type: TYPE_NORMAL
- en: 'Comment out the authentication URL patterns that you added to the `urls.py`
    file of the `account` application and include `django.contrib.auth.urls` instead,
    as follows. The new code is highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: You can see the authentication URL patterns included at [https://github.com/django/django/blob/stable/5.0.x/django/contrib/auth/urls.py](https://github.com/django/django/blob/stable/5.0.x/django/contrib/auth/urls.py).
  prefs: []
  type: TYPE_NORMAL
- en: We have now added all the necessary authentication views to our project. Next,
    we will implement user registration.
  prefs: []
  type: TYPE_NORMAL
- en: User registration and user profiles
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Site users can now log in, log out, change their password, and reset their password.
    However, we need to build a view to allow visitors to create a user account. They
    should be able to register and create a profile on our site. Once registered,
    users will be able to log in to our site using their credentials.
  prefs: []
  type: TYPE_NORMAL
- en: User registration
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Letâ€™s create a simple view to allow user registration on your website. Initially,
    you have to create a form to let the user enter a username, their real name, and
    a password.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `forms.py` file located inside the `account` application directory
    and add the following lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: We have created a model form for the user model. This form includes the fields
    `username`, `first_name`, and `email` of the user model. We retrieve the user
    model dynamically by using the `get_user_model()` function provided by the `auth`
    application. This retrieves the user model, which could be a custom model instead
    of the default `auth` `User` model, since Django allows you to define custom user
    models. These fields will be validated according to the validations of their corresponding
    model fields. For example, if the user chooses a username that already exists,
    they will get a validation error because `username` is a field defined with `unique=True`.
  prefs: []
  type: TYPE_NORMAL
- en: In order to keep your code generic, use the `get_user_model()` method to retrieve
    the user model and the `AUTH_USER_MODEL` setting to refer to it when defining
    a modelâ€™s relationship with in to it, instead of referring to the `auth` user
    model directly. You can read more information about this at [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#django.contrib.auth.get_user_model](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#django.contrib.auth.get_user_model).
  prefs: []
  type: TYPE_NORMAL
- en: We have also added two additional fieldsâ€”`password` and `password2`â€”for users
    to set a password and to repeat it. Letâ€™s add the field validation to check that
    both passwords are the same.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `forms.py` file in the `account` application and add the following
    `clean_password2()` method to the `UserRegistrationForm` class. The new code is
    highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: We have defined a `clean_password2()` method to compare the second password
    against the first one and raise a validation error if the passwords donâ€™t match.
    This method is executed when the form is validated by calling its `is_valid()`
    method. You can provide a `clean_<fieldname>()` method to any of your form fields
    to clean the value or raise form validation errors for a specific field. Forms
    also include a general `clean()` method to validate the entire form, which is
    useful to validate fields that depend on each other. In this case, we use the
    field-specific `clean_password2()` validation instead of overriding the `clean()`
    method of the form. This avoids overriding other field-specific checks that the
    `ModelForm` gets from the restrictions set in the model (for example, validating
    that the username is unique).
  prefs: []
  type: TYPE_NORMAL
- en: Django also provides a `UserCreationForm` form that resides in `django.contrib.auth.forms`
    and is very similar to the one we have created.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: The view for creating user accounts is quite simple. For security reasons, instead
    of saving the raw password entered by the user, we use the `set_password()` method
    of the user model. This method handles password hashing before storing the password
    in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Django doesnâ€™t store clear text passwords; it stores hashed passwords instead.
    Hashing is the process of transforming a given key into another value. A hash
    function is used to generate a fixed-length value according to a mathematical
    algorithm. By hashing passwords with secure algorithms, Django ensures that user
    passwords stored in the database require massive amounts of computing time to
    break.
  prefs: []
  type: TYPE_NORMAL
- en: By default, Django uses the `PBKDF2` hashing algorithm with a SHA256 hash to
    store all passwords. However, Django not only supports checking existing passwords
    hashed with `PBKDF2` but also supports checking stored passwords hashed with other
    algorithms, such as `PBKDF2SHA1`, `argon2`, `bcrypt`, and `scrypt`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PASSWORD_HASHERS` setting defines the password hashers that the Django
    project supports. The following is the default `PASSWORD_HASHERS` list:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Django uses the first entry of the list (in this case, `PBKDF2PasswordHasher`)
    to hash all passwords. The rest of the hashers can be used by Django to check
    existing passwords.
  prefs: []
  type: TYPE_NORMAL
- en: The `scrypt` hasher was introduced in Django 4.0\. It is more secure and recommended
    over `PBKDF2`. However, `PBKDF2` is still the default hasher, as `scrypt` requires
    OpenSSL 1.1+ and more memory.
  prefs: []
  type: TYPE_NORMAL
- en: You can learn more about how Django stores passwords and about the password
    hashers included at [https://docs.djangoproject.com/en/5.0/topics/auth/passwords/](https://docs.djangoproject.com/en/5.0/topics/auth/passwords/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, edit the `urls.py` file of the `account` application and add the following
    URL pattern highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a new template in the `templates/account/` template directory
    of the `account` application, name it `register.html`, and make it look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: 'Create an additional template file in the same directory and name it `register_done.html`.
    Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/account/register/` in your browser. You will see
    the registration page you have created:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_17.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.17: The account creation form'
  prefs: []
  type: TYPE_NORMAL
- en: Fill in the details for a new user and click on the **CREATE MY ACCOUNT** button.
  prefs: []
  type: TYPE_NORMAL
- en: 'If all fields are valid, the user will be created, and you will see the following
    success message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, application, website  Description automatically
    generated](img/B21088_04_18.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.18: The account is successfully created page'
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **log in** link and enter your username and password to verify
    that you can access your newly created account.
  prefs: []
  type: TYPE_NORMAL
- en: 'Letâ€™s add a link to register on the login template. Edit the `registration/login.html`
    template and find the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'Replace it with the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/account/login/` in your browser. The page should
    now look as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_04_19.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.19: The Log-in page including a link to register'
  prefs: []
  type: TYPE_NORMAL
- en: We have now made the registration page accessible from the **Log-in** page.
  prefs: []
  type: TYPE_NORMAL
- en: Extending the user model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: While the user model provided by Djangoâ€™s authentication framework is sufficient
    for most typical scenarios, it does have a limited set of predefined fields. If
    you want to capture additional details relevant to your application, you may want
    to extend the default user model. For example, the default user model comes with
    the `first_name` and `last_name` fields, a structure that may not align with naming
    conventions in various countries. Additionally, you may want to store further
    user details or construct a more comprehensive user profile.
  prefs: []
  type: TYPE_NORMAL
- en: A simple way to extend the user model is by creating a profile model that contains
    a one-to-one relationship with the Django user model, and any additional fields.
    A one-to-one relationship is similar to a `ForeignKey` field with the parameter
    `unique=True`. The reverse side of the relationship is an implicit one-to-one
    relationship with the related model instead of a manager for multiple elements.
    From each side of the relationship, you access a single related object.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models.py` file of your `account` application and add the following
    code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: Our user profile will include the userâ€™s date of birth and an image of the user.
  prefs: []
  type: TYPE_NORMAL
- en: The one-to-one field `user` will be used to associate profiles with users. We
    use `AUTH_USER_MODEL` to refer to the user model instead of pointing to the `auth.User`
    model directly. This makes our code more generic, as it can operate with custom-defined
    user models. With `on_delete=models.CASCADE`, we force the deletion of the related
    `Profile` object when a `User` object gets deleted.
  prefs: []
  type: TYPE_NORMAL
- en: The `date_of_birth` field is a `DateField`. We have made this field optional
    with `blank=True`, and we allow `null` values with `null=True`.
  prefs: []
  type: TYPE_NORMAL
- en: The `photo` field is an `ImageField`. We have made this field optional with
    `blank=True`. An `ImageField` field manages the storage of image files. It validates
    that the file provided is a valid image, stores the image file in the directory
    indicated with the `upload_to` parameter, and stores the relative path to the
    file in the related database field. An `ImageField` field is translated to a `VARHAR(100)`
    column in the database by default. A blank string will be stored if the value
    is left empty.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Pillow and serving media files
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We need to install the Pillow library to manage images. Pillow is the de facto
    standard library for image processing in Python. It supports multiple image formats
    and provides powerful image processing functions. Pillow is required by Django
    to handle images with `ImageField`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Install Pillow by running the following command from the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `settings.py` file of the project and add the following lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: This will enable Django to manage file uploads and serve media files. `MEDIA_URL`
    is the base URL used to serve the media files uploaded by users. `MEDIA_ROOT`
    is the local path where they reside. Paths and URLs for files are built dynamically
    by prepending the project path or the media URL to them for portability.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, edit the main `urls.py` file of the `bookmarks` project and modify the
    code, as follows. The new lines are highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: We have added the `static()` helper function to serve media files with the Django
    development server during development (that is, when the `DEBUG` setting is set
    to `True`).
  prefs: []
  type: TYPE_NORMAL
- en: The `static()` helper function is suitable for development but not for production
    use. Django is very inefficient at serving static files. Never serve your static
    files with Django in a production environment. You will learn how to serve static
    files in a production environment in *Chapter 17*, *Going Live*.
  prefs: []
  type: TYPE_NORMAL
- en: Creating migrations for the profile model
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Letâ€™s create the database table for the new `Profile` model. Open the shell
    and run the following command to create the database migration for the new model:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'You will get the following output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, sync the database with the following command in the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see output that includes the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'Edit the `admin.py` file of the `account` application and register the `Profile`
    model in the administration site by adding the code in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: 'Run the development server using the following command from the shell prompt:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Open `http://127.0.0.1:8000/admin/` in your browser. Now, you should be able
    to see the `Profile` model on the administration site of your project, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.20: The ACCOUNT block on the administration site index page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Click on the **Add** link of the **Profiles** row. You will see the following
    form to add a new profile:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/B21088_04_21.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.21: The Add profile form'
  prefs: []
  type: TYPE_NORMAL
- en: Create a `Profile` object manually for each of the existing users in the database.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we will let users edit their profiles on the website.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `forms.py` file of the `account` application and add the following
    lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'These forms are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`UserEditForm`: This will allow users to edit their first name, last name,
    and email, which are attributes of the built-in Django user model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ProfileEditForm`: This will allow users to edit the profile data that is saved
    in the custom `Profile` model. Users will be able to edit their date of birth
    and upload an image for their profile picture.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: When users register on the site, a corresponding `Profile` object will be automatically
    created and associated with the `User` object created. However, users created
    through the administration site wonâ€™t automatically get an associated `Profile`
    object. Both users with and without a profile (for example, staff users) can co-exist.
  prefs: []
  type: TYPE_NORMAL
- en: If you want to force profile creation for all users, you can use Django signals
    to trigger the creation of a `Profile` object whenever a user is created. You
    will learn about signals in *Chapter 7*, *Tracking User Actions*, where you will
    engage in an exercise to implement this feature in the section *Expanding your
    project using AI*.
  prefs: []
  type: TYPE_NORMAL
- en: Now, we will let users edit their profiles.
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `views.py` file of the `account` application and add the following
    code highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We have added the new `edit` view to allow users to edit their personal information.
    We have added the `login_required` decorator to the view because only authenticated
    users will be able to edit their profiles. For this view, we use two model forms:
    `UserEditForm` to store the data of the built-in user model and `ProfileEditForm`
    to store the additional personal data in the custom `Profile` model. To validate
    the data submitted, we call the `is_valid()` method of both forms. If both forms
    contain valid data, we save both forms by calling the `save()` method to update
    the corresponding objects in the database.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following URL pattern to the `urls.py` file of the `account` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, create a template for this view in the `templates/account/` directory
    and name it `edit.html`. Add the following code to it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we have added `enctype="multipart/form-data"` to the
    `<form>` HTML element to enable file uploads. We use an HTML form to submit both
    the `user_form` and `profile_form` forms.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the URL `http://127.0.0.1:8000/account/register/` and register a new user.
    Then, log in with the new user and open the URL `http://127.0.0.1:8000/account/edit/`.
    You should see the following page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B21088_04_22.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.22: The profile edit form'
  prefs: []
  type: TYPE_NORMAL
- en: You can now add the profile information and save the changes.
  prefs: []
  type: TYPE_NORMAL
- en: We will edit the dashboard template to include links to the edit profile and
    change password pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open the `templates/account/dashboard.html` template and add the following
    lines highlighted in bold:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: 'Users can now access the form to edit their profile from the dashboard. Open
    `http://127.0.0.1:8000/account/` in your browser and test the new link to edit
    a userâ€™s profile. The dashboard should now look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface  Description automatically generated with medium
    confidence](img/B21088_04_23.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 4.23: Dashboard page content, including links to edit a profile and
    change a password'
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom user model
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Django also offers a way to substitute the user model with a custom model. The
    `User` class should inherit from Djangoâ€™s `AbstractUser` class, which provides
    the full implementation of the default user as an abstract model. You can read
    more about this method at [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model).
  prefs: []
  type: TYPE_NORMAL
- en: Using a custom user model will give you more flexibility, but it might also
    result in more difficult integration with pluggable applications that interact
    directly with Djangoâ€™s `auth` user model.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, you learned how to build an authentication system for your
    site. You implemented all the necessary views for users to register, log in, log
    out, edit their password, and reset their password. You also built a model to
    store custom user profiles.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, you will improve the user experience by providing feedback
    on userâ€™s actions through the Django messages framework. You will also broaden
    the scope of authentication methods, enabling users to authenticate with their
    email address, and integrate social authentication via Google. You will also learn
    how to serve the development server over HTTPS using Django Extensions, and you
    will customize the authentication pipeline to create user profiles automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Additional resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following resources provide additional information related to the topics
    covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Source code for this chapter: [https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04](https://github.com/PacktPublishing/Django-5-by-example/tree/main/Chapter04)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Built-in authentication views: [https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views](https://docs.djangoproject.com/en/5.0/topics/auth/default/#all-authentication-views)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Authentication URL patterns: [https://github.com/django/django/blob/stable/3.0.x/django/contrib/auth/urls.py](https://github.com/django/django/blob/stable/3.0.x/django/contrib/auth/urls.py)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'How Django manages passwords and available password hashers: [https://docs.djangoproject.com/en/5.0/topics/auth/passwords/](https://docs.djangoproject.com/en/5.0/topics/auth/passwords/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Generic user model and the `get_user_model()` method: [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#django.contrib.auth.get_user_model](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#django.contrib.auth.get_user_model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using a custom user model: [https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model](https://docs.djangoproject.com/en/5.0/topics/auth/customizing/#substituting-a-custom-user-model)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Join us on Discord!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Read this book alongside other users, Django development experts, and the author
    himself. Ask questions, provide solutions to other readers, chat with the author
    via Ask Me Anything sessions, and much more.Scan the QR code or visit the link
    to join the community.
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/Django5ByExample](https://packt.link/Django5ByExample)'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code287089408934129031.png)'
  prefs: []
  type: TYPE_IMG
