["```py\n    Dictionary<string, int> dict = new Dictionary<string, int>(); \n\n```", "```py\n    dict.Add(\"green\", 1); \n    dict.Add(\"yellow\", 2);  \n    dict.Add(\"red\", 3); \n    dict.Add(\"blue\", 4); \n    dict.Remove(\"blue\"); \n    Console.WriteLine(\"{0}\", dict[\"red\"]); \n\n    // Output: 3 \n\n```", "```py\n    HashMap<String, String> dict = new HashMap<String, String>(); \n    dict.put(\"green\", \"1\"); \n    dict.put(\"yellow\", \"2\");  \n    dict.put(\"red\", \"3\"); \n    dict.put(\"blue\", \"4\"); \n    dict.remove(\"blue\"); \n    System.out.println(dict.get(\"red\")); \n\n    // Output: 3 \n\n```", "```py\n    NSDictionary *dict = [NSDictionary dictionaryWithObjectsAndKeys: \n    [NSNumber numberWithInt:1], @\"green\",   \n    [NSNumber numberWithInt:2], @\"yellow\",  \n    [NSNumber numberwithInt:3], @\"red\", nil]; \n\n    NSArray *colors = @[@\"green\", @\"yellow\", @\"red\"]; \n    NSArray *positions = @[[NSNumber numberWithInt:1],  \n                           [NSNumber numberWithInt:2],  \n                           [NSNumber numberWithInt:3]]; \n\n    dict = [NSDictionary dictionaryWithObjects:positions forKeys:colors]; \n    NSLog(@\"%li\", (long)[(NSNumber*)[_points valueForKey:@\"red\"] integerValue]); \n\n    // Output: 3 \n\n```", "```py\n    let dict:[String: Int] = [\"green\":1, \"yellow\":2, \"red\":3]  \n    print(dict[red]) \n\n    // Output: 3 \n\n```", "```py\n    Dictionary<string, int> _points; \n    public PointsDictionary() \n    { \n        _points = new Dictionary<string, int>(); \n    } \n\n```", "```py\n    //Update - private \n    private int UpdateCustomerPoints(string customerName, int points)  \n    { \n        if (this.CustomerExists(customerName)) \n        { \n            _points[customerName] = _points[customerName] += points; \n            return _points[customerName]; \n        } \n        return 0; \n    } \n\n```", "```py\n    //Add \n    public void RegisterCustomer(string customerName) \n    { \n        this.RegisterCustomer(customerName, 0); \n    } \n\n    public void RegisterCustomer(string customerName, int previousBalance) \n    { \n        _points.Add(customerName, previousBalance); \n    } \n\n```", "```py\n    //Get \n    public int GetCustomerPoints(string customerName) \n    { \n        int points; \n        _points.TryGetValue(customerName, out points); \n\n        return points; \n    } \n\n```", "```py\n    //Update - public \n    public int AddCustomerPoints(string customerName, int points) \n    { \n        return this.UpdateCustomerPoints(customerName, points); \n    } \n\n    public int RemoveCustomerPoints(string customerName, int points) \n    { \n        return this.UpdateCustomerPoints(customerName, -points); \n    } \n\n    public int RedeemCustomerPoints(string customerName, int points) \n    { \n        //Perform any accounting actions \n        return this.UpdateCustomerPoints(customerName, -points); \n    } \n\n```", "```py\n    //Remove \n    public int CustomerCheckout(string customerName) \n    { \n        int points = this.GetCustomerPoints(customerName); \n        _points.Remove(customerName); \n        return points;  \n    } \n\n```", "```py\n    //Contains \n    public bool CustomerExists(string customerName) \n    { \n        return _points.ContainsKey(customerName); \n    } \n\n```", "```py\n    //Count \n    public int CustomersOnPremises() \n    { \n        return _points.Count; \n    } \n\n```", "```py\n    public void ClosingTime() \n    { \n        //Perform any accounting actions \n        _points.Clear(); \n    } \n\n```", "```py\n    HashMap<String, Integer> _points; \n    public PointsDictionary() \n    { \n        _points = new HashMap<>(); \n    } \n\n```", "```py\n    private Integer UpdateCustomerPoints(String customerName, int points) \n    { \n        if (this.CustomerExists(customerName)) \n        { \n            _points.put(customerName, _points.get(customerName) + points); \n            return _points.get(customerName); \n        }  \n        return 0; \n    } \n\n```", "```py\n    //Add \n    public void RegisterCustomer(String customerName) \n    { \n        this.RegisterCustomer(customerName, 0); \n    } \n\n    public void RegisterCustomer(String customerName, int previousBalance) \n    { \n        _points.put(customerName, previousBalance); \n    } \n\n```", "```py\n    //Get \n    public Integer GetCustomerPoints(String customerName) \n    { \n        return _points.get(customerName) == null ? 0 : _points.get(customerName); \n    } \n\n```", "```py\n    //Update \n    public Integer AddCustomerPoints(String customerName, int points) \n    { \n        return this.UpdateCustomerPoints(customerName, points); \n    } \n\n    public Integer RemoveCustomerPoints(String customerName, int points) \n    { \n        return this.UpdateCustomerPoints(customerName, -points); \n    } \n\n    public Integer RedeemCustomerPoints(String customerName, int points) \n    { \n        //Perform any accounting actions \n        return this.UpdateCustomerPoints(customerName, -points); \n    } \n\n```", "```py\n    //Remove \n    public Integer CustomerCheckout(String customerName) \n    { \n        Integer points = this.GetCustomerPoints(customerName); \n        _points.remove(customerName); \n        return points; \n    } \n\n```", "```py\n    //Contains \n    public boolean CustomerExists(String customerName) \n    { \n        return _points.containsKey(customerName); \n    } \n\n```", "```py\n    //Count \n    public int CustomersOnPremises() \n    { \n        return _points.size(); \n    } \n\n```", "```py\n    //Clear \n    public void ClosingTime() \n    { \n        //Perform accounting actions \n        _points.clear(); \n    } \n\n```", "```py\n    @interface EDSPointsDictionary() \n    { \n        NSMutableDictionary<NSString*, NSNumber*> *_points; \n    } \n\n    @implementation EDSPointsDictionary \n\n    -(instancetype)init \n    { \n        if (self = [super init]) \n        { \n            _points = [NSMutableDictionary dictionary]; \n        } \n\n        return self; \n    } \n\n```", "```py\n    -(NSInteger)updatePoints:(NSInteger)points \n        forCustomer:(NSString*)customerName \n    {  \n        if ([self customerExists:customerName]) \n        { \n            NSInteger exPoints = [[_points objectForKey:customerName] integerValue]; \n            exPoints += points; \n\n            [_points setValue:[NSNumber numberWithInteger:exPoints] forKey:customerName]; \n            return [[_points objectForKey:customerName] integerValue]; \n        } \n        return 0; \n    } \n\n```", "```py\n    //Add \n    -(void)registerCustomer:(NSString*)customerName \n    { \n        [self registerCustomer:customerName withPreviousBalance:0]; \n    } \n\n    -(void)registerCustomer:(NSString*)customerName \n        withPreviousBalance:(NSInteger)previousBalance \n    { \n        NSNumber *points = [NSNumber numberWithInteger:previousBalance]; \n        [_points setObject:points forKey:customerName]; \n    } \n\n```", "```py\n    //Get \n    -(NSInteger)getCustomerPoints:(NSString*)customerName \n    { \n        NSNumber *rawsPoints = [_points objectForKey:customerName]; \n        return rawsPoints ? [rawsPoints integerValue] : 0; \n    } \n\n```", "```py\n    //Update \n    -(NSInteger)addPoints:(NSInteger)points \n        toCustomer:(NSString*)customerName \n    { \n        return [self updatePoints:points forCustomer:customerName]; \n    } \n\n    -(NSInteger)removePoints:(NSInteger)points \n        fromCustomer:(NSString*)customerName \n    { \n        return [self updatePoints:-points forCustomer:customerName]; \n    } \n\n    -(NSInteger)redeemPoints:(NSInteger)points \n        forCustomer:(NSString*)customerName \n    { \n        //Perform any accounting actions \n        return [self updatePoints:-points forCustomer:customerName]; \n    } \n\n```", "```py\n    -(NSInteger)customerCheckout:(NSString*)customerName \n    { \n        NSInteger points = [[_points objectForKey:customerName] integerValue]; \n        [_points removeObjectForKey:customerName]; \n        return points; \n    } \n\n```", "```py\n    //Contains \n    -(bool)customerExists:(NSString*)customerName \n    { \n        return [_points objectForKey:customerName]; \n    } \n\n```", "```py\n    //Count \n    -(NSInteger)customersOnPremises \n    { \n        return [_points count]; \n    } \n\n```", "```py\n    //Clear \n    -(void)closingTime \n    { \n        [_points removeAllObjects]; \n    } \n\n```", "```py\n    var _points = Dictionary<String, Int>() \n\n```", "```py\n    public func updatePointsForCustomer(points: Int, customerName: String) -> Int \n    { \n        if customerExists(customerName) \n        { \n            _points[customerName] = _points[customerName]! + points \n            return _points[customerName]! \n        } \n        return 0 \n    } \n\n```", "```py\n    //Add \n    public func registerCustomer(customerName: String) \n    { \n        registerCustomerWithPreviousBalance(customerName, previousBalance: 0) \n    } \n\n    public func registerCustomerWithPreviousBalance(customerName: String, previousBalance: Int) \n    { \n        _points[customerName] = previousBalance; \n    } \n\n```", "```py\n    //Get \n    public func getCustomerPoints(customerName: String) -> Int \n    { \n        let rawsPoints = _points[customerName] \n        return rawsPoints != nil ? rawsPoints! : 0; \n    } \n\n```", "```py\n    //Update \n    public func addPointsToCustomer(points: Int, customerName: String) -> Int \n    { \n        return updatePointsForCustomer(points, customerName: customerName) \n    } \n\n    public func removePointsFromCustomer(points: Int, customerName: String) -> Int \n    { \n        return updatePointsForCustomer(-points, customerName: customerName) \n    } \n\n    public func redeemPointsForCustomer(points: Int, customerName: String) -> Int \n    { \n        //Perform any accounting actions \n        return updatePointsForCustomer(-points, customerName: customerName) \n    } \n\n```", "```py\n    public func customerCheckout(customerName: String) -> Int \n    { \n        let points = _points[customerName] \n        _points.removeValueForKey(customerName) \n        return points!; \n    } \n\n```", "```py\n    //Contains \n    public func customerExists(customerName: String) -> Bool \n    { \n        return _points[customerName] != nil \n    } \n\n```", "```py\n    //Count \n    public func customersOnPremises() -> Int \n    { \n        return _points.count \n    } \n\n```", "```py\n    //Clear \n    public func closingTime() \n    { \n        _points.removeAll() \n    } \n\n```"]