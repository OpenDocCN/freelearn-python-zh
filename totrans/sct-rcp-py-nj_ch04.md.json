["```py\n>>> l = [[3, 56], [2, 34], [6, 98], [1, 43]]\n```", "```py\n>>> l.sort()\n>>> l\n[[1, 43], [2, 34], [3, 56], [6, 98]]\n```", "```py\n>>> l = [[3, 56], [2, 34], [6, 98], [1, 43]]\n>>> def diffSort(item):\n...     return item[1]\n... \n>>> l.sort(key=diffSort)\n>>> l\n[[2, 34], [1, 43], [3, 56], [6, 98]]\n```", "```py\ncollections.namedtuple(typename, field_names, *, verbose=False, rename=False, module=None)\n```", "```py\n >>> from collections import namedtuple\n >>> Point = namedtuple(\"Point\", [\"x\", \"y\"])\n```", "```py\n >>> p = Point(11, y=22)\n```", "```py\n >>> p[0] + p[1]\n 33\n```", "```py\n >>> x, y = p\n >>> x, y\n (11, 22)\n```", "```py\n >>> p.x + p.y\n 33\n```", "```py\n >>> p\n Point(x=11, y=22)\n```", "```py\n        EmployeeRecord = namedtuple('EmployeeRecord', 'name, age, title, \n                                    department, paygrade')\n```", "```py\n        import csv\n        for emp in map(EmployeeRecord._make, csv.reader(open(\"employees.csv\", \"rb\"))):\n            print(emp.name, emp.title)\n```", "```py\n        import sqlite3\n        conn = sqlite3.connect('/companydata')\n        cursor = conn.cursor()\n        cursor.execute('SELECT name, age, title, department, paygrade FROM employees')\n        for emp in map(EmployeeRecord._make, cursor.fetchall()):\n            print(emp.name, emp.title)\n```", "```py\n >>> t = [12, 34]\n >>> Point._make(t)\n Point(x=12, y=34)\n```", "```py\n >>> p = Point(x=12, y=34)\n >>> p._asdict()\n OrderedDict([('x', 11), ('y', 22)])>\n```", "```py\n >>> p = Point(x=11, y=22)\n >>> p._replace(x=33)\n Point(x=33, y=22)\n >>> for partnum, record in inventory.items():\n ... inventory[partnum] = record._replace(price=newprices[partnum], timestamp=time.now())\n```", "```py\n >>> p._fields # view the field names\n ('x', 'y')\n >>> Color = namedtuple('Color', 'red green blue')\n >>> Pixel = namedtuple('Pixel', Point._fields +  Color._fields)\n >>> Pixel(11, 22, 128, 255, 0)\n Pixel(x=11, y=22, red=128, green=255, blue=0)\n```", "```py\n >>> getattr(p, \"x\")\n 11\n```", "```py\n >>> position = {\"x\": 11, \"y\": 22}\n >>> Point(**position)\n Point(x=11, y=22)\n```", "```py\n >>> class Point(namedtuple('Point', ['x', 'y'])):\n ...     __slots__ = ()\n ...     @property\n ...     def hypot(self):\n ...         return (self.x ** 2 + self.y ** 2) ** 0.5\n ...     def __str__(self):\n ...         return 'Point: x=%6.3f y=%6.3f hypot=%6.3f' % \n                  (self.x, self.y, self.hypot)\n```", "```py\n >>> Book = namedtuple('Book', ['id', 'title', 'authors'])\n >>> Book.__doc__ += ': Hardcover book in active collection'\n >>> Book.id.__doc__ = '13-digit ISBN'\n >>> Book.title.__doc__ = 'Title of first printing'\n >>> Book.authors.__doc__ = 'List of authors sorted by last name'\n```", "```py\n >>> Account = namedtuple('Account', 'owner balance\n                               transaction_count')\n >>> default_account = Account('<owner name>', 0.0, 0)\n >>> johns_account = default_account._replace(owner='John')\n >>> janes_account = default_account._replace(owner='Jane')\n```", "```py\ncollections.deque([iterable[, maxlen]])\n```", "```py\n >>> from collections import deque\n```", "```py\n >>> d = deque(\"ghi\")\n```", "```py\n >>> for elem in d: \n ...     print(elem.upper())\n G\n H\n I\n```", "```py\n >>> d.append('j') # add a new entry to the right side\n >>> d.appendleft('f') # add a new entry to the left side\n```", "```py\n >>> d # show the representation of the deque\n deque(['f', 'g', 'h', 'i', 'j'])\n```", "```py\n >>> d.pop() \n 'j'\n >>> d.popleft() \n 'f'\n```", "```py\n >>> list(d) \n ['g', 'h', 'i']\n```", "```py\n >>> d[0] # peek at leftmost item\n 'g'\n >>> d[-1] # peek at rightmost item\n 'i'\n```", "```py\n >>> list(reversed(d)) \n ['i', 'h', 'g']\n```", "```py\n >>> 'h' in d \n True\n```", "```py\n >>> d.extend('jkl') \n >>> d\n deque(['g', 'h', 'i', 'j', 'k', 'l'])<\n```", "```py\n >>> d.rotate(1) # right rotation\n >>> d\n deque(['l', 'g', 'h', 'i', 'j', 'k'])\n >>> d.rotate(-1) # left rotation\n >>> d\n deque(['g', 'h', 'i', 'j', 'k', 'l'])\n```", "```py\n >>> deque(reversed(d)) \n deque(['l', 'k', 'j', 'i', 'h', 'g'])\n```", "```py\n >>> d.clear() # empty the deque\n >>> d.pop() # cannot pop from an empty deque\n Traceback (most recent call last):\n File \"<pyshell#6>\", line 1, in -toplevel-\n d.pop()\n IndexError: pop from an empty deque\n```", "```py\n >>> d.extendleft('abc') \n >>> d\n deque(['c', 'b', 'a'])\n```", "```py\n def tail(filename, n=10):\n 'Return the last n lines of a file'\n with open(filename) as f:\n return deque(f, n)\n```", "```py\n       from collections import deque\n       import itertools\n\n       def moving_average(iterable, n=3):\n            # moving_average([40, 30, 50, 46, 39, 44]) –> \n                              40.0 42.0 45.0 43.0\n            # http://en.wikipedia.org/wiki/Moving_average\n            it = iter(iterable) \n            # create an iterable object from input argument\n            d = deque(itertools.islice(it, n-1))  \n            # create deque object by slicing iterable\n            d.appendleft(0)\n            s = sum(d)\n            for elem in it:\n                s += elem - d.popleft()\n                d.append(elem)\n                yield s / n  \n                # yield is like \"return\" but is used with generators\n```", "```py\n        def delete_nth(d, n):\n            d.rotate(-n)\n            d.popleft()\n            d.rotate(n)\n```", "```py\ncollections.ChainMap(*maps)\n```", "```py\n       import builtins\n        pylookup = ChainMap(locals(), globals(), vars(builtins))\n```", "```py\n       from collections import ChainMap\n        import os, argparse\n\n        defaults = {'color': 'red', 'user': 'guest'} \n\n        parser = argparse.ArgumentParser()\n        parser.add_argument('-u', '–user')\n        parser.add_argument('-c', '–color')\n        namespace = parser.parse_args()\n        command_line_args = {k:v for k, v in vars(namespace).items() if v}\n\n        combined = ChainMap(command_line_args, os.environ, defaults)\n        print(combined['color'])\n        print(combined['user'])\n```", "```py\n red\n guest\n```", "```py\n       with open('file.txt', 'r') as infile:\n            for line in infile:\n                print('{}'.format(line))\n```", "```py\n       c = ChainMap()  # Create root context\n        d = c.new_child()  # Create nested child context\n        e = c.new_child()  # Child of c, independent from d\n        e.maps[0]  # Current context dictionary – like Python's locals()\n        e.maps[-1]  # Root context – like Python's globals()\n        e.parents  # Enclosing context chain – like Python's nonlocals\n        d['x']  # Get first key in the chain of contexts\n        d['x'] = 1  # Set value in current context\n        del d['x']  # Delete from current context\n        list(d)  # All nested values\n        k in d  # Check all nested values\n        len(d)  # Number of nested values\n        d.items()  # All nested items\n        dict(d) # Flatten into a regular dictionary\n```", "```py\n >>> from collections import Counter\n      >>> c = Counter() # a new, empty counter\n >>> c = Counter('gallahad') # a new counter from an iterable\n >>> c = Counter({'red': 4, 'blue': 2}) # a new counter from a mapping\n >>> c = Counter(cats=4, dogs=8) # a new counter from keyword args\n```", "```py\n >>> c Counter({'a': 3, 'l': 2, 'g': 1, 'h': 1, 'd': 1})\n```", "```py\n >>> count = Counter([\"spam\", \"eggs\", \"bacon\"])\n >>> count[\"toast\"]\n 0\n >>> count\n Counter({'spam': 1, 'eggs': 1, 'bacon': 1})\n```", "```py\n >>> count[\"bacon\"] = 0 # assigning a value of 0 to \"bacon\"\n >>> count\n Counter({'spam': 1, 'eggs': 1, 'bacon': 0})\n >>> del count[\"bacon\"] # del must be used to actually remove \"bacon\"\n >>> count\n Counter({'spam': 1, 'eggs': 1})\n```", "```py\n >>> count.elements()  # iterators create an object in memory\n <itertools.chain object at 0x7f210f769a90>\n >>> sorted(count.elements())  \n      # use another function to actually print the iterated values\n ['eggs', 'spam']\n```", "```py\n >>> c = Counter('gallahad')\n >>> c.most_common()  # return all values\n [('a', 3), ('l', 2), ('g', 1), ('h', 1), ('d', 1)]\n >>> c.most_common(3)  # return top three\n [('a', 3), ('l', 2), ('g', 1)]\n```", "```py\n >>> c = Counter(a=4, b=2, c=0, d=-2)\n >>> d = Counter(a=1, b=2, c=3, d=4)\n >>> c.subtract(d)\n >>> c\n Counter({'a': 3, 'b': 0, 'c': -3, 'd': -6})\n```", "```py\n        sum(c.values()) # total of all counts\n        c.clear() # reset all counts\n        list(c) # list unique elements\n        set(c) # convert to a set\n        dict(c) # convert to a regular dictionary\n        c.items() # convert to a list of (elem, cnt) pairs\n        Counter(dict(list_of_pairs)) \n        # convert from a list of (elem, cnt) pairs\n        c.most_common()[:-n-1:-1] # n least common elements\n        +c # remove zero and negative counts\n```", "```py\n >>> c = Counter(a=3, b=1)\n      >>> d = Counter(a=1, b=2)\n      >>> c + d           #  add two counters  together:  c[x] + d[x]\n      Counter({'a': 4, 'b': 3})\n      >>> c - d           #  subtract (keeping only positive counts)\n      Counter({'a': 2})\n      >>> c & d           #  intersection:  min(c[x], d[x]) \n      Counter({'a': 1, 'b': 1})\n      >>> c | d           #  union:  max(c[x], d[x])\n      Counter({'a': 3, 'b': 2})\n```", "```py\n >>> c = Counter(a=2, b=-4)\n >>> +c # removes negative and zero values\n Counter({'a': 2})\n >>> -c # inverts signs; negative values are ignored\n Counter({'b': 4})\n```", "```py\n >>> from collections import OrderedDict\n      >>> d = {'banana': 3, 'apple': 4, 'pear': 1, 'orange': 2}  \n          # regular unsorted dictionary\n >>> OrderedDict(sorted(d.items(), key=lambda t: t[0]))  \n          # dictionary sorted by key\n OrderedDict([('apple', 4), ('banana', 3), ('orange', 2), \n                   ('pear', 1)])\n >>> OrderedDict(sorted(d.items(), key=lambda t: t[1]))  \n          # dictionary sorted by value\n OrderedDict([('pear', 1), ('orange', 2), ('banana', 3), \n                   ('apple', 4)])\n >>> OrderedDict(sorted(d.items(), key=lambda t: len(t[0])))  \n          # dictionary sorted by length of the key string\n OrderedDict([('pear', 1), ('apple', 4), \n                   ('orange', 2), ('banana', 3)])\n```", "```py\n >>> d = OrderedDict.fromkeys('abcde')\n >>> d.move_to_end('b')\n >>> ''.join(d.keys())\n 'acdeb'\n >>> d.move_to_end('b', last=False)\n >>> ''.join(d.keys())\n 'bacde'\n```", "```py\n >>> d.keys()\n odict_keys(['a', 'c', 'd', 'e', 'b'])\n```", "```py\n       class LastUpdatedOrderedDict(OrderedDict):\n           'Store items in the order the keys were last added'\n           def __setitem__(self, key, value):\n               if key in self:\n                   del self[key]\n               OrderedDict.__setitem__(self, key, value)\n```", "```py\n        class OrderedCounter(Counter, OrderedDict):\n            'Counter that remembers the order elements are first \n             encountered'\n\n            def __repr__(self):\n                return '%s(%r)' % (self.__class__.__name__, \n                                   OrderedDict(self))\n\n            def __reduce__(self):\n                return self.__class__, (OrderedDict(self),)\n```", "```py\n >>> class OrderedCounter(Counter, OrderedDict): \n      ...      'Counter that remembers the order elements are first seen' \n      ...      def __repr__(self): \n      ...          return '%s(%r)' % (self.__class__.__name__, \n      ...                             OrderedDict(self)) \n      ...      def __reduce__(self): \n      ...          return self.__class__, (OrderedDict(self),) \n      ... \n      >>> oc = OrderedCounter('abracadabra') \n      >>> import copy \n      >>> copy.copy(oc) \n      OrderedCounter(OrderedDict([('a', 5), ('b', 2), ('r', 2), ('c', 1), ('d', 1)])) \n```", "```py\n >>> del OrderedCounter.__reduce__ \n     >>> copy.copy(oc) \n     OrderedCounter(OrderedDict([('b', 2), ('a', 5), ('c', 1), ('r', 2), ('d', 1)])) \n```", "```py\n >>> from collections import defaultdict\n      >>> s = [('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)] >>> d = defaultdict(list) >>> for k, v in s: ...     d[k].append(v) ... >>> sorted(d.items()) [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]\n```", "```py\n >>> d = {} >>> for k, v in s: ...     d.setdefault(k, []).append(v) ... >>> sorted(d.items()) [('blue', [2, 4]), ('red', [1]), ('yellow', [1, 3])]\n```", "```py\n >>> s = 'mississippi'\n >>> d = defaultdict(int)\n >>> for k in s:\n ...     d[k] += 1\n ...\n >>> sorted(d.items())\n [('i', 4), ('m', 1), ('p', 2), ('s', 4)]\n```", "```py\n >>> def constant_factory(value): ...     return lambda: value >>> d = defaultdict(constant_factory('<missing>')) >>> d.update(name='John', action='ran') >>> '%(name)s %(action)s to %(object)s' % d 'John ran to <missing>'\n```", "```py\n >>> s = [(\"apple\", 1), (\"banana\", 2), (\"carrot\", 3), (\"banana\", 4), (\"carrot\", 1), (\"banana\", 4)]      >>> d = defaultdict(set)\n      >>> for k, v in s:\n      ...     d[k].add(v)\n      ...\n      >>> sorted(d.items())\n      [('apple', {1}), ('banana', {2, 4}), ('carrot', {1, 3})]\n```", "```py\n >>> from collections import UserDict\n >>> a = UserDict(a=1)\n >>> d = dict(d=3)  # regular dictionary for comparison\n```", "```py\n >>> a.data\n {'a': 1}\n >>> d.data\n Traceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n AttributeError: 'dict' object has no attribute 'data'\n```", "```py\n >>> for k in d:\n ...     print(k, d[k])\n ... \n d 3\n >>> d.items()\n dict_items([('d', 3)])\n >>> for k in a:\n ...     print(k, a[k])\n ... \n a 1\n >>> a.items()\n ItemsView({'a': 1})\n```", "```py\n >>> from collections import UserString\n >>> class AppendString(UserString):\n ...     def append(self, s):\n ...         self.data = self.data + s\n ... \n >>> s = AppendString(\"abracadabra\")\n >>> s.append(\"spam and bananas\")\n >>> print(s)\n abracadabraspam and bananas\n >>> l = \"banana\" \n      # show that regular strings don't have an append method\n >>> l.append(\"apple\")\n Traceback (most recent call last):\n File \"<stdin>\", line 1, in <module>\n AttributeError: 'str' object has no attribute 'append'\n```", "```py\n In [1]: class Adult():\n ...:     def __init__(self, age):\n ...:         self.age = age\n ...:     def __repr__(self):\n ...:         return \"{}\".format(self.age)\n ...: \n```", "```py\n In [2]: people = [Adult(age) for age in (40, 18, 40, 42, 18, 25, 23, 80, 67, 18)] \n```", "```py\n In [8]: from collections import defaultdict\n In [9]: age_groups = defaultdict(list)\n In [10]: for person in people:\n ...:     age_groups[person.age].append(person)\n ...: \n In [11]: for k in age_groups:\n ...:     print(k, age_groups[k])\n ...: \n 40 [40, 40]\n 18 [18, 18, 18]\n 42 [42]\n 25 [25]\n 23 [23]\n 80 [80]\n 67 [67]\n```", "```py\n In [18]: my_list = [27, \"11-13-2017\", 84.98, 5]\n In [19]: store27 = salesReceipt._make(my_list)\n In [20]: print(store27)\n salesReceipt(storeID=27, saleDate='11-13-2017', saleAmount=84.98, totalGuests=5)\n```", "```py\n In [21]: print(store15._fields)\n ('storeID', 'saleDate', 'saleAmount', 'totalGuests')\n```", "```py\n In [22]: from csv import reader\n\n      In [23]: with open(\"sales_record.csv\", \"r\") as input_file:\n      ...:     csv_fields = reader(input_file)\n      ...:     for field_list in csv_fields:\n      ...:         store_record = salesReceipt._make(field_list)\n      ...:         total_sales += float(store_record.saleAmount)\n      ...:         \n\n      In [24]: print(\"Total sales = \", total_sales)\n      Total sales =  105.97\n```", "```py\n In [30]: student_grades = {}\n In [31]: student_grades[\"Jeffrey\"] = 98\n In [32]: student_grades[\"Sarah\"] = 85\n In [33]: student_grades[\"Kim\"] = 92\n In [34]: student_grades[\"Carl\"] = 87\n In [35]: student_grades[\"Mindy\"] = 98\n In [36]: student_grades\n Out[36]: {'Carl': 87, 'Jeffrey': 98, 'Kim': 92, 'Mindy': 98, 'Sarah': 85}\n In [37]: sorted(student_grades.items(), key=lambda t: t[0])\n Out[37]: [('Carl', 87), ('Jeffrey', 98), ('Kim', 92), ('Mindy', 98), ('Sarah', 85)]\n In [38]: sorted(student_grades.items(), key = lambda t: t[1])\n Out[38]: [('Sarah', 85), ('Carl', 87), ('Kim', 92), ('Jeffrey', 98), ('Mindy', 98)]\n In [39]: sorted(student_grades.items(), key = lambda t: -t[1])\n Out[39]: [('Jeffrey', 98), ('Mindy', 98), ('Kim', 92), ('Carl', 87), ('Sarah', 85)]\n In [40]: rankings = collections.OrderedDict(sorted(student_grades.items(), key = lambda t: -t[1]))\n In [41]: rankings\n Out[41]: \n OrderedDict([('Jeffrey', 98),\n ('Mindy', 98),\n ('Kim', 92),\n ('Carl', 87),\n ('Sarah', 85)])\n```", "```py\npip install collections-extended\n```", "```py\nfrom collections_extended import [bag, frozenbag, setlist, frozensetlist, bijection, RangeMap]\n```", "```py\n >>> from collections_extended import setlist\n >>> import string\n >>> sl = setlist(string.ascii_lowercase)\n >>> sl\n setlist(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'))\n >>> sl[3]\n 'd'\n >>> sl[-1]\n 'z'\n True\n >>> sl.index('m')  # so is finding the index of an element\n 12\n >>> sl.insert(1, 'd')  # inserting an element already in raises a ValueError\n Traceback (most recent call last):\n ...\n raise ValueError\n ValueError\n >>> sl.index('d')\n 3\n```", "```py\n >>> from collections_extended import bag\n >>> bag() == set()\n True\n >>> bag('a') == set('a')\n True\n >>> bag('ab') == set('a')\n False\n >>> bag('a') == set('ab')\n False\n >>> bag('aa') == set('a')\n False\n >>> bag('aa') == set('ab')\n False\n >>> bag('ac') == set('ab')\n False\n >>> bag('ac') <= set('ab')\n False\n >>> bag('ac') >= set('ab')\n False\n >>> bag('a') <= bag('a') < bag('aa')\n True\n >>> bag('aa') <= bag('a')\n False\n```", "```py\n >>> from collections import Counter\n      >>> c = Counter()\n >>> c['a'] += 1\n >>> c['a'] -= 1\n >>> 'a' in c\n True\n >>> b = bag()\n >>> b.add('a')\n >>> 'a' in b\n True\n >>> b.remove('a')\n >>> 'a' in b\n False\n```", "```py\n >>> c = Counter()\n >>> c['a'] += 1\n >>> len(c)\n 1\n >>> c['a'] -= 1\n >>> len(c)\n 1\n >>> c['a'] += 2\n >>> len(c)\n 1\n >>> len(Counter('aaabbc'))\n 3\n >>> b = bag()\n >>> b.add('a')\n >>> len(b)\n 1\n >>> b.remove('a')\n >>> len(b)\n 0\n >>> len(bag('aaabbc'))\n 6\n```", "```py\n >>> for item in Counter('aaa'): print(item)\n a\n >>> for item in bag('aaa'): print(item)\n a\n a\n```", "```py\n >>> from collections_extended import RangeMap\n >>> from datetime import date\n >>> us_presidents = RangeMap()\n >>> us_presidents[date(1993, 1, 20):date(2001, 1, 20)] = 'Bill Clinton'\n >>> us_presidents[date(2001, 1, 20):date(2009, 1, 20)] = 'George W. Bush'\n >>> us_presidents[date(2009, 1, 20):] = 'Barack Obama'\n >>> us_presidents[date(2001, 1, 19)]\n 'Bill Clinton'\n >>> us_presidents[date(2001, 1, 20)]\n 'George W. Bush'\n >>> us_presidents[date(2021, 3, 1)]\n 'Barack Obama'\n >>> us_presidents[date(2017, 1, 20):] = 'Someone New'\n >>> us_presidents[date(2021, 3, 1)]\n 'Someone New'\n```", "```py\n >>> from collections_extended import bijection\n >>> bij = bijection({'a': 1, 'b': 2, 'c': 3})\n >>> bij.inverse[2]\n 'b'\n >>> bij['a'] = 2\n >>> bij == bijection({'a': 2, 'c': 3})\n True\n >>> bij.inverse[1] = 'a'\n >>> bij == bijection({'a': 1, 'c': 3})\n True\n```"]