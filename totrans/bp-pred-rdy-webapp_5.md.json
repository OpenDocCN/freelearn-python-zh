["```py\ntozo\n└── frontend\n    └── src\n        └── pages\n```", "```py\nimport axios from \"axios\"; \nimport { useContext } from \"react\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { AuthContext } from \"src/AuthContext\";\nimport { useMutation } from \"src/query\";\nconst useLogout = () => {\n  const { setAuthenticated } = useContext(AuthContext);\n  const queryClient = useQueryClient();\n  const { mutate: logout } = useMutation(\n    async () => await axios.delete(\"/sessions/\"),\n    { \n      onSuccess: () => {\n        setAuthenticated(false);\n        queryClient.clear();\n      },\n    },\n  );\n  return logout;\n};\n```", "```py\nimport Divider from \"@mui/material/Divider\";\nimport IconButton from \"@mui/material/IconButton\";\nimport Menu from \"@mui/material/Menu\";\nimport MenuItem from \"@mui/material/MenuItem\";\nimport AccountCircle from \"@mui/icons-material/AccountCircle\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nconst AccountMenu = () => {\n  const logout = useLogout();\n  const [anchorEl, setAnchorEl] = useState<null | HTMLElement>(null);\n  const onMenuOpen = (event: React.MouseEvent<HTMLElement>) => \n    setAnchorEl(event.currentTarget);\n  const onMenuClose = () => setAnchorEl(null);\n  return (\n    <>\n      <IconButton\n        color=\"inherit\"\n        onClick={onMenuOpen}\n      >\n        <AccountCircle />\n      </IconButton>\n      <Menu\n        anchorEl={anchorEl}\n        anchorOrigin={{ horizontal: \"right\", vertical: \"top\" }}\n        keepMounted\n        onClose={onMenuClose}\n        open={Boolean(anchorEl)}\n        transformOrigin={{           horizontal: \"right\", vertical: \"top\"         }}\n      >\n        <MenuItem \n          component={Link} \n          onClick={onMenuClose} \n          to=\"/change-password/\"\n        >\n          Change password\n        </MenuItem>\n        <Divider />\n        <MenuItem onClick={() => {logout(); onMenuClose();}}>\n          Logout\n        </MenuItem>\n      </Menu>\n    </>\n  );\n};\nexport default AccountMenu;\n```", "```py\nimport AppBar from \"@mui/material/AppBar\";\nimport Box from \"@mui/material/Box\";\nimport Button from \"@mui/material/Button\";\nimport Toolbar from \"@mui/material/Toolbar\";\nimport React, { useContext } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { AuthContext } from \"src/AuthContext\";\nimport AccountMenu from \"src/components/AccountMenu\";\nconst sxToolbar = {\n  paddingLeft: \"env(safe-area-inset-left)\",\n  paddingRight: \"env(safe-area-inset-right)\",\n  paddingTop: \"env(safe-area-inset-top)\",\n}\nconst TopBar = () => {\n  const { authenticated } = useContext(AuthContext);\n  return (\n    <>\n      <AppBar position=\"fixed\">\n        <Toolbar sx={sxToolbar}>\n          <Box sx={{ flexGrow: 1 }}>\n            <Button color=\"inherit\" component={Link} to=\"/\">\n              Tozo\n            </Button>\n          </Box>\n          {authenticated ? <AccountMenu /> : null}\n        </Toolbar>\n      </AppBar>\n      <Toolbar sx={{ ...sxToolbar, marginBottom: 2 }} />\n    </>\n  );\n};\nexport default TopBar;\n```", "```py\nimport TopBar from \"src/components/TopBar\";\n\nconst Router = () => (\n  <BrowserRouter> \n    <ScrollToTop /> \n    <TopBar />\n    <Routes> \n      {/* Place routes here */} \n    </Routes> \n  </BrowserRouter>\n);\n```", "```py\nimport axios from \"axios\"; \nimport { FormikHelpers } from \"formik\";\nimport { useContext } from \"react\";\nimport { useNavigate } from \"react-router\";\nimport { ToastContext } from \"src/ToastContext\";\nimport { useMutation } from \"src/query\";\ninterface IForm {\n  email: string;\n  password: string;\n}\nconst useRegister = () => {\n  const navigate = useNavigate();\n  const { addToast } = useContext(ToastContext);\n  const { mutateAsync: register } = useMutation(\n    async (data: IForm) => await axios.post(\"/members/\", data),\n  );\n  return async (\n    data: IForm,\n    { setFieldError }: FormikHelpers<IForm>,\n  ) => {\n    try {\n      await register(data);\n      addToast(\"Registered\", \"success\");\n      navigate(\"/login/\", { state: { email: data.email } });\n    } catch (error: any) {\n      if (\n        error.response?.status === 400 &&\n        error.response?.data.code === \"WEAK_PASSWORD\"\n      ) {\n        setFieldError(\"password\", \"Password is too weak\");\n      } else {\n        addToast(\"Try again\", \"error\");\n      }\n    }\n  };\n};\n```", "```py\nimport { Form, Formik } from \"formik\";\nimport { useLocation } from \"react-router-dom\"; \nimport * as yup from \"yup\";\n\nimport EmailField from \"src/components/EmailField\";\nimport FormActions from \"src/components/FormActions\";\nimport LazyPasswordWithStrengthField from \"src/components/LazyPasswordWithStrengthField\";\nimport Title from \"src/components/Title\";\nconst validationSchema = yup.object({\n  email: yup.string().email(\"Email invalid\").required(\"Required\"),\n  password: yup.string().required(\"Required\"),\n});\n\nconst Register = () => {\n  const location = useLocation();\n  const onSubmit = useRegister();\n  return (\n    <>\n      <Title title=\"Register\" />\n      <Formik<IForm>\n        initialValues={{\n          email: (location.state as any)?.email ?? \"\",\n          password: \"\",\n        }}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ dirty, isSubmitting, values }) => (\n          <Form>\n          <EmailField \n            fullWidth label=\"Email\" name=\"email\" required \n          />\n            <LazyPasswordWithStrengthField\n              autoComplete=\"new-password\"\n              fullWidth\n              label=\"Password\"\n              name=\"password\"\n              required\n            />\n            <FormActions\n              disabled={!dirty}\n              isSubmitting={isSubmitting}\n              label=\"Register\"\n              links={[\n                {label: \"Login\", to: \"/login/\", state: { email:                   values.email }},\n                {label: \"Reset password\", to: \"/forgotten-                  password/\", state: { email: values.email }},\n              ]}\n            />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\nexport default Register;\n```", "```py\nimport { Route } from \"react-router-dom\";\nimport Register from \"src/pages/Register\";\nconst Router = () => (\n  <BrowserRouter>  \n    <ScrollToTop />  \n    <TopBar /> \n    <Routes>  \n      <Route path=\"/register/\" element={<Register />} /> \n    </Routes>  \n  </BrowserRouter>\n);\n```", "```py\nimport ConfirmEmail from \"src/pages/ConfirmEmail\";\nconst Router = () => (\n  <BrowserRouter>  \n    <ScrollToTop />  \n    <TopBar /> \n    <Routes>  \n      <Route path=\"/register/\" element={<Register />} />\n<Route \npath=\"/confirm-email/:token/\" element={<ConfirmEmail />} \n/> \n    </Routes>  \n  </BrowserRouter>\n);\n```", "```py\nimport LinearProgress from \"@mui/material/LinearProgress\";\nimport axios from \"axios\";\nimport { useContext } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Navigate } from \"react-router-dom\";\n\nimport { useQuery } from \"src/query\";\nimport { ToastContext } from \"src/ToastContext\";\n\ninterface IParams {\n  token?: string;\n}\n\nconst ConfirmEmail = () => {\n  const { addToast } = useContext(ToastContext);\n  const params = useParams() as IParams;\n  const token = params.token ?? \"\";\n  const { isLoading } = useQuery(\n    [\"Email\"],\n    async () => await axios.put(\"/members/email/\", { token }),\n    {\n      onError: (error: any) => {\n        if (error.response?.status === 400) {\n          if (error.response?.data.code === \"TOKEN_INVALID\") {\n            addToast(\"Invalid token\", \"error\");\n          } else if (error.response?.data.code === \"TOKEN_            EXPIRED\"){\n            addToast(\"Token expired\", \"error\");\n          }\n        } else {\n          addToast(\"Try again\", \"error\");\n        }\n      },\n      onSuccess: () => addToast(\"Thanks\", \"success\"),\n    },\n  );\n\n  if (isLoading) {\n    return  <LinearProgress />;\n  } else {\n    return <Navigate to=\"/\" />;\n  }\n};\n\nexport default ConfirmEmail;\n```", "```py\nimport axios from \"axios\"; \nimport { FormikHelpers } from \"formik\";\nimport { useContext } from \"react\";\nimport { useLocation, useNavigate } from \"react-router\";\nimport { AuthContext } from \"src/AuthContext\";\nimport { ToastContext } from \"src/ToastContext\";\nimport { useMutation } from \"src/query\";\ninterface IForm {\n  email: string;\n  password: string;\n}\nconst useLogin = () => {\n  const location = useLocation();\n  const navigate = useNavigate();\n  const { addToast } = useContext(ToastContext);\n  const { setAuthenticated } = useContext(AuthContext);\n  const { mutateAsync: login } = useMutation(\n    async (data: IForm) => await axios.post(\"/sessions/\",      data),\n  );\n  return async (\n    data: IForm,\n    { setFieldError }: FormikHelpers<IForm>,\n  ) => {\n    try {\n      await login(data);\n      setAuthenticated(true);\n      navigate((location.state as any)?.from ?? \"/\");\n    } catch (error: any) {\n      if (error.response?.status === 401) {\n        setFieldError(\"email\", \"Invalid credentials\");\n        setFieldError(\"password\", \"Invalid credentials\");\n      } else {\n        addToast(\"Try again\", \"error\");\n      }\n    }\n  };\n};\n```", "```py\nimport { Form, Formik } from \"formik\"; \nimport * as yup from \"yup\";\n\nimport EmailField from \"src/components/EmailField\";\nimport FormActions from \"src/components/FormActions\";\nimport PasswordField from \"src/components/PasswordField\";\nimport Title from \"src/components/Title\";\nconst validationSchema = yup.object({\n  email: yup.string().email(\"Email invalid\").required(\"Required\"),\n  password: yup.string().required(\"Required\"),\n});\n\nconst Login = () => {\n  const onSubmit= useLogin();\n  const location = useLocation();\n  return (\n    <>\n      <Title title=\"Login\" />\n      <Formik<IForm>\n        initialValues={{\n          email: (location.state as any)?.email ?? \"\",\n          password: \"\",\n        }}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ dirty, isSubmitting, values }) => (\n          <Form>\n            <EmailField\n              fullWidth label=\"Email\" name=\"email\" required\n            />\n            <PasswordField\n              autoComplete=\"password\"\n              fullWidth\n              label=\"Password\"\n              name=\"password\"\n              required\n            />\n            <FormActions\n              disabled={!dirty}\n              isSubmitting={isSubmitting}\n              label=\"Login\"\n              links={[\n                {label: \"Reset password\", to: \"/forgotten-                  password/\", state: { email: values.email }},\n                {label: \"Register\", to: \"/register/\", state: {                   email: values.email }},\n              ]}\n            />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\nexport default Login;\n```", "```py\nimport Login from \"src/pages/Login\";\nconst Router = () => ( \n  <BrowserRouter>   \n    <ScrollToTop />   \n    <TopBar />  \n    <Routes>   \n      <Route path=\"/register/\" element={<Register />} /> \n      <Route  \n        path=\"/confirm-email/:token/\"        element={<ConfirmEmail />}  \n      />  \n      <Route path=\"/login/\" element={<Login />} />\n    </Routes>   \n  </BrowserRouter> \n);\n```", "```py\nimport axios from \"axios\"; \nimport { FormikHelpers } from \"formik\";\nimport { useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { ToastContext } from \"src/ToastContext\";\nimport { useMutation } from \"src/query\";\ninterface IForm {\n  currentPassword: string;\n  newPassword: string;\n}\n\nconst useChangePassword = () => {\n  const { addToast } = useContext(ToastContext);\n  const { mutateAsync: changePassword } = useMutation(\n    async (data: IForm) => \n      await axios.put(\"/members/password/\", data),\n  );\n  const navigate = useNavigate();\n\n  return async (\n    data: IForm,\n    { setFieldError }: FormikHelpers<IForm>,\n  ) => {\n    try {\n      await changePassword(data);\n      addToast(\"Changed\", \"success\");\n      navigate(\"/\");\n    } catch (error: any) {\n      if (axios.isAxiosError(error)) {\n        if (error.response?.status === 400) { \n          setFieldError(\"newPassword\", \"Password is too weak\"); \n        } else if (error.response?.status === 401) {\n          setFieldError(\"currentPassword\", \"Incorrect             password\"); \n        }\n      } else { \n        addToast(\"Try again\", \"error\"); \n      } \n    }\n  };\n}\n```", "```py\nimport { Form, Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport FormActions from \"src/components/FormActions\";\nimport LazyPasswordWithStrengthField from \"src/components/LazyPasswordWithStrengthField\";\nimport PasswordField from \"src/components/PasswordField\";\nimport Title from \"src/components/Title\";\n\nconst validationSchema = yup.object({\n  currentPassword: yup.string().required(\"Required\"),\n  newPassword: yup.string().required(\"Required\"),\n});\n\nconst ChangePassword = () => {\n  const onSubmit = useChangePassword();\n  return (\n    <>\n      <Title title=\"Change Password\" />\n      <Formik<IForm>\n        initialValues={{ currentPassword: \"\", newPassword: \"\" }}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ dirty, isSubmitting }) => (\n          <Form>\n            <PasswordField\n              autoComplete=\"current-password\"\n              fullWidth\n              label=\"Current password\"\n              name=\"currentPassword\"\n              required\n            />\n            <LazyPasswordWithStrengthField \n              autoComplete=\"new-password\" \n              fullWidth \n              label=\"New password\" \n              name=\"newPassword\" \n              required \n            />\n            <FormActions \n              disabled={!dirty}\n              isSubmitting={isSubmitting} \n              label=\"Change\" \n              links={[{ label: \"Back\", to: \"/\" }]} \n            />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\nexport default ChangePassword;\n```", "```py\nimport RequireAuth from \"src/components/RequireAuth\"; \nimport ChangePassword from \"src/pages/ChangePassword\";\nconst Router = () => (\n  <BrowserRouter>\n    ...\n    <Routes>\n      ...\n      <Route \n        path=\"/change-password/\" \n        element={<RequireAuth><ChangePassword /></RequireAuth>} \n      />\n    </Routes>\n  </BrowserRouter>\n);\n```", "```py\nimport axios from \"axios\";\nimport { useContext } from \"react\";\nimport { useNavigate } from \"react-router\";\n\nimport { useMutation } from \"src/query\";\nimport { ToastContext } from \"src/ToastContext\";\ninterface IForm {\n  email: string;\n}\n\nconst useForgottenPassword = () => {\n  const navigate = useNavigate();\n  const { addToast } = useContext(ToastContext);\n\n  const { mutateAsync: forgottenPassword } = useMutation(\n    async (data: IForm) => \n      await axios.post(\"/members/forgotten-password/\", data),\n  ); \n  return async (data: IForm) => {\n    try {\n      await forgottenPassword(data);\n      addToast(\"Reset link sent to your email\", \"success\");\n      navigate(\"/login/\");\n    } catch {\n      addToast(\"Try again\", \"error\");\n    }\n  };\n};\n```", "```py\nimport { Form, Formik } from \"formik\";\nimport { useLocation } from \"react-router\";\nimport * as yup from \"yup\";\n\nimport EmailField from \"src/components/EmailField\";\nimport FormActions from \"src/components/FormActions\";\nimport Title from \"src/components/Title\";\n\nconst validationSchema = yup.object({ \n  email: yup.string().email(\"Email invalid\").required(\"Required\"), \n});\n\nconst ForgottenPassword = () => {\n  const onSubmit = useForgottenPassword();\n  const location = useLocation();\n\n  return (\n    <>\n      <Title title=\"Forgotten password\" />\n      <Formik<IForm>\n        initialValues={{ \n          email: (location.state as any)?.email ?? \"\" \n        }}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ dirty, isSubmitting, values }) => (\n          <Form>\n            <EmailField\n              fullWidth label=\"Email\" name=\"email\" required\n            />\n            <FormActions \n              disabled={!dirty}\n              isSubmitting={isSubmitting} \n              label=\"Send email\" \n              links={[ \n                {label: \"Login\", to: \"/login/\", state: { email:                   values.email }}, \n                {label: \"Register\", to: \"/register/\", state: {                   email: values.email }}, \n              ]} \n            />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default ForgottenPassword;\n```", "```py\nimport ForgottenPassword from \"src/pages/ForgottenPassword\";\nconst Router = () => (\n  <BrowserRouter>\n    ...\n    <Routes>\n      ...\n      <Route \n        path=\"/forgotten-password/\" \n        element={<ForgottenPassword />} \n      />\n    </Routes>\n  </BrowserRouter>\n);\n```", "```py\nimport axios from \"axios\";\nimport { FormikHelpers } from \"formik\";\nimport { useContext } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\n\nimport { useMutation } from \"src/query\";\nimport { ToastContext } from \"src/ToastContext\";\ninterface IForm {\n  password: string;\n}\ninterface IParams {\n  token?: string;\n}\n\nconst useResetPassword = () => {\n  const navigate = useNavigate();\n  const params = useParams() as IParams;\n  const token = params.token ?? \"\";\n  const { addToast } = useContext(ToastContext);\n\n  const { mutateAsync: reset } = useMutation(\n    async (password: string) => \n      await axios.put(\n        \"/members/reset-password/\", { password, token },\n      ),\n  ); \n  return async (\n    data: IForm, \n    { setFieldError }: FormikHelpers<IForm>, \n  ) => {\n    try {\n      await reset(data.password);\n      addToast(\"Success\", \"success\");\n      navigate(\"/login/\");\n    } catch (error: any) {\n      if (error.response?.status === 400) { \n        if (error.response?.data.code === \"WEAK_PASSWORD\") { \n          setFieldError(\"newPassword\", \"Password is too weak\");  \n        } else if (error.response?.data.code === \"TOKEN_           INVALID\") {\n          addToast(\"Invalid token\", \"error\"); \n        } else if (error.response?.data.code === \"TOKEN_           EXPIRED\") { \n          addToast(\"Token expired\", \"error\"); \n        } \n      } else {\n        addToast(\"Try again\", \"error\");\n      }\n    }\n  }\n};\n```", "```py\nimport { Form, Formik } from \"formik\";\nimport * as yup from \"yup\";\n\nimport LazyPasswordWithStrengthField from \"src/components/LazyPasswordWithStrengthField\"\nimport FormActions from \"src/components/FormActions\";\nimport Title from \"src/components/Title\";\n\nconst validationSchema = yup.object({ \n  email: yup.string().email(\"Email invalid\").required(\"Required\"), \n});\n\nconst ResetPassword = () => { \n  const onSubmit = useResetPassword();\n  return (\n    <>\n      <Title title=\"Reset password\" />\n      <Formik<IForm>\n        initialValues={{ password: \"\" }}\n        onSubmit={onSubmit}\n        validationSchema={validationSchema}\n      >\n        {({ dirty, isSubmitting, values }) => (\n          <Form>\n            <LazyPasswordWithStrengthField\n              autoComplete=\"new-password\"\n              fullWidth\n              label=\"Password\"\n              name=\"password\"\n              required\n            />\n            <FormActions \n              disabled={!dirty}\n              isSubmitting={isSubmitting} \n              label=\"Reset password\"\n              links={[{label: \"Login\", to: \"/login/\"}]}\n            />\n          </Form>\n        )}\n      </Formik>\n    </>\n  );\n};\n\nexport default ResetPassword;\n```", "```py\nimport ResetPassword from \"src/pages/ResetPassword\";\nconst Router = () => (\n  <BrowserRouter>\n    ...\n    <Routes>\n      ...\n      <Route \n        path=\"/reset-password/:token/\" \n        element={<ResetPassword />} \n      />\n    </Routes>\n  </BrowserRouter>\n);\n```", "```py\nimport axios from \"axios\";\nimport { useQueryClient } from \"@tanstack/react-query\";\nimport { Todo } from \"src/models\";\nimport { useQuery } from \"src/query\";\nexport const STALE_TIME = 1000 * 60 * 5;  // 5 mins\nexport const useTodosQuery = () => \n  useQuery<Todo[]>(\n    [\"todos\"], \n    async () => {\n      const response = await axios.get(\"/todos/\");\n      return response.data.todos.map(\n        (json: any) => new Todo(json)\n      );\n    },\n    { staleTime: STALE_TIME },\n  );\nexport const useTodoQuery = (id: number) => {\n  const queryClient = useQueryClient();\n  return useQuery<Todo>(\n    [\"todos\", id.toString()],\n    async () => {\n      const response = await axios.get(`/todos/${id}/`);\n      return new Todo(response.data);\n    },\n    {\n      initialData: () => {\n        return queryClient\n          .getQueryData<Todo[]>([\"todos\"])\n          ?.filter((todo: Todo) => todo.id === id)[0];\n      },\n      staleTime: STALE_TIME,\n    },\n  );\n};\n```", "```py\nimport { useMutation } from \"src/query\";\nexport interface ItodoData {\n  complete: boolean;\n  due: Date | null;\n  task: string;\n} \nexport const useCreateTodoMutation = () => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    async (data: ItodoData) => await axios.post(\"/todos/\",       data),\n    {\n      onSuccess: () => queryClient.invalidateQueries([\"todos\"]),\n    },\n  );\n};\nexport const useEditTodoMutation = (id: number) => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    async (data: ItodoData) => \n      await axios.put(`/todos/${id}/`, data),\n    {\n      onSuccess: () => queryClient.        invalidateQueries([\"todos\"]), \n    },\n  );\n};\nexport const useDeleteTodoMutation = () => {\n  const queryClient = useQueryClient();\n  return useMutation(\n    async (id: number) => \n      await axios.delete(`/todos/${id}/`),\n    {\n      onSuccess: () => queryClient.        invalidateQueries([\"todos\"]), \n    },\n  );\n};\n```", "```py\nimport Checkbox from \"@mui/material/Checkbox\";\nimport IconButton from \"@mui/material/IconButton\";\nimport ListItem from \"@mui/material/ListItem\";\nimport ListItemButton from \"@mui/material/ListItemButton\";\nimport ListItemIcon from \"@mui/material/ListItemIcon\";\nimport ListItemText from \"@mui/material/ListItemText\";\nimport Skeleton from \"@mui/material/Skeleton\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { format } from \"date-fns\";\nimport { Link } from \"react-router-dom\";\nimport { Todo as TodoModel } from \"src/models\";\nimport { useDeleteTodoMutation } from \"src/queries\";\ninterface IProps { todo?: TodoModel }\nconst Todo = ({ todo }: IProps) => {\n  const { mutateAsync: deleteTodo } = useDeleteTodoMutation();\n  let secondary; \n  if (todo === undefined) {\n    secondary = <Skeleton width=\"200px\" />;\n  } else if (todo.due !== null) {\n    secondary = format(todo.due, \"P\");\n  }\n  return (\n    <ListItem\n      secondaryAction={\n        <IconButton\n          disabled={todo === undefined} edge=\"end\"\n          onClick={() => deleteTodo(todo?.id!)}\n        >\n          <DeleteIcon />\n        </IconButton>\n      }\n    >\n      <ListItemButton\n        component={Link} disabled={todo === undefined}\n        to={`/todos/${todo?.id}/`}\n      >\n        <ListItemIcon>\n          <Checkbox\n            checked={todo?.complete ?? false}\n            disabled disableRipple edge=\"start\" tabIndex={-1}\n          />\n        </ListItemIcon>\n        <ListItemText \n          primary={todo?.task ?? <Skeleton />}           secondary={secondary}\n        />\n      </ListItemButton>\n    </ListItem>\n  );\n}\nexport default Todo;\n```", "```py\nimport Fab from \"@mui/material/Fab\";\nimport List from \"@mui/material/List\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { Link, Navigate } from \"react-router-dom\";\nimport Todo from \"src/components/Todo\";\nimport { useTodosQuery } from \"src/queries\";\nconst Todos = () => {\n  const { data: todos } = useTodosQuery();\n  if (todos?.length === 0) {\n    return <Navigate to=\"/todos/new/\" />;\n  } else {\n    return (\n      <>\n        <List>\n          {todos !== undefined ?\n            todos.map((todo) => <Todo key={todo.id} todo={todo} />)\n            : [1, 2, 3].map((id) => <Todo key={-id} />)  \n          }\n        </List>\n        <Fab \n          component={Link} \n          sx={{ \n            bottom: (theme) => theme.spacing(2), \n            position: \"fixed\", \n            right: (theme) => theme.spacing(2), \n          }} \n          to=\"/todos/new/\"\n        >\n          <AddIcon />\n        </Fab>\n      </>\n    );\n  }\n};\nexport default Todos;\n```", "```py\nimport Todos from \"src/pages/Todos\";\nconst Router = () => (\n  <BrowserRouter>\n    ...\n    <Routes>\n      ...\n      <Route \n        path=\"/\" \n        element={<RequireAuth><Todos /></RequireAuth>} \n      />\n    </Routes>\n  </BrowserRouter>\n);\n```", "```py\nimport * as yup from \"yup\";\nconst validationSchema = yup.object({\n  complete: yup.boolean(),\n  due: yup.date().nullable(),\n  task: yup.string().required(\"Required\"),\n});\n```", "```py\nimport { Form, Formik } from \"formik\";\n\nimport CheckboxField from \"src/components/CheckboxField\";\nimport DateField from \"src/components/DateField\";\nimport FormActions from \"src/components/FormActions\";\nimport TextField from \"src/components/TextField\";\nimport type { ITodoData } from \"src/queries\";\n\ninterface IProps {\n  initialValues: ITodoData;\n  label: string;\n  onSubmit: (data: ITodoData) => Promise<any>;\n}\n\nconst TodoForm = ({ initialValues, label, onSubmit }: IProps) => (\n  <Formik< ITodoData>\n    initialValues={initialValues}\n    onSubmit={onSubmit}\n    validationSchema={validationSchema}\n  >\n    {({ dirty, isSubmitting }) => (\n      <Form>\n        <TextField\n          fullWidth label=\"Task\" name=\"task\" required\n        />\n        <DateField fullWidth label=\"Due\" name=\"due\" />\n        <CheckboxField\n          fullWidth label=\"Complete\" name=\"complete\"\n        />\n        <FormActions\n          disabled={!dirty}\n          isSubmitting={isSubmitting}\n          label={label}\n          links={[{ label: \"Back\", to: \"/\" }]}\n        />\n      </Form>\n    )}\n  </Formik>\n);\n\nexport default TodoForm;\n```", "```py\nimport { useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\nimport TodoForm from \"src/components/TodoForm\";\nimport Title from \"src/components/Title\";\nimport type { ITodoData } from \"src/queries\";\nimport { useCreateTodoMutation } from \"src/queries\";\nimport { ToastContext } from \"src/ToastContext\";\n\nconst CreateTodo = () => {\n  const navigate = useNavigate();\n  const { addToast } = useContext(ToastContext);\n  const { mutateAsync: createTodo } = useCreateTodoMutation();\n  const onSubmit = async (data: ITodoData) => {\n    try {\n      await createTodo(data);\n      navigate(\"/\");\n    } catch {\n      addToast(\"Try Again\", \"error\");\n    }\n  };\n\n  return (\n    <>\n      <Title title=\"Create a Todo\" />\n      <TodoForm\n        initialValues={{           complete: false, due: null, task: \"\"         }}\n        label=\"Create\"\n        onSubmit={onSubmit}\n      />\n    </>\n  );\n};\n\nexport default CreateTodo;\n```", "```py\nimport CreateTodo from \"src/pages/CreateTodo\";\nconst Router = () => (\n  <BrowserRouter>\n    ...\n    <Routes>\n      ...\n      <Route \n        path=\"/todos/new/\" \n        element={<RequireAuth><CreateTodo /></RequireAuth>} \n      />\n    </Routes>\n  </BrowserRouter>\n);\n```", "```py\nimport Skeleton from \"@mui/material/Skeleton\";\nimport { useContext } from \"react\";\nimport { useNavigate, useParams } from \"react-router\";\n\nimport TodoForm from \"src/components/TodoForm\";\nimport Title from \"src/components/Title\";\nimport type { ITodoData } from \"src/queries\";\nimport { useEditTodoMutation, useTodoQuery } from \"src/queries\";\nimport { ToastContext } from \"src/ToastContext\";\n\ninterface Iparams {\n  id: string;\n}\n\nconst EditTodo = () => {\n  const navigate = useNavigate();\n  const params = useParams<keyof Iparams>() as Iparams;\n  const todoId = parseInt(params.id, 10);\n  const { addToast } = useContext(ToastContext);\n  const { data: todo } = useTodoQuery(todoId); \n  const { mutateAsync: editTodo } = useEditTodoMutation(todoId);\n\n  const onSubmit = async (data: ITodoData) => {\n    try {\n      await editTodo(data);\n      navigate(\"/\");\n    } catch {\n      addToast(\"Try again\", \"error\");\n    }\n  };\n\n  return (\n    <>\n      <Title title=\"Edit todo\" />\n      {todo === undefined ? (\n        <Skeleton height=\"80px\" />\n      ) : (\n        <TodoForm\n          initialValues={{\n            complete: todo.complete,\n            due: todo.due,\n            task: todo.task,\n          }}\n          label=\"Edit\"\n          onSubmit={onSubmit}\n        />\n      )}\n    </>\n  );\n};\n\nexport default EditTodo;\n```", "```py\nimport EditTodo from \"src/pages/EditTodo\";\nconst Router = () => (\n  <BrowserRouter>\n    ...\n    <Routes>\n      ...\n      <Route \n        path=\"/todos/:id/\" \n        element={<RequireAuth><EditTodo /></RequireAuth>} \n      />\n    </Routes>\n  </BrowserRouter>\n);\n```"]