["```py\n(env15) $ odoo shell -c library.conf\n```", "```py\n>>> self\nres.users(1,)\n>>> self._name\n'res.users'\n>>> self.name\n'OdooBot'\n>>> self.login\n'__system__'\n```", "```py\n>>> self.env\n<odoo.api.Environment object at 0x7f6882f7df40>\n```", "```py\n>>> self.env[\"res.partner\"].search([(\"display_name\", \"like\", \"Azure\")])\nres.partner(14, 26, 33, 27)\n```", "```py\n>>> self.env.context\n{'lang': 'en_US', 'tz': 'Europe/Brussels'}\n```", "```py\n>>> self.env.ref('base.user_root')\nres.users(1,)\n```", "```py\n>>> self.env['res.partner'].search([('display_name', 'like', 'Lumber')])\nres.partner(15, 34)\n```", "```py\n>>> self.env['res.partner'].browse([15, 34]) \nres.partner(15, 34)\n```", "```py\n['|',\n    ('message_follower_ids', 'in', [user.partner_id.id]),\n    '|',\n        ('user_id', '=', user.id),\n        ('user_id', '=', False)\n]\n```", "```py\n>>> self.env[\"res.partner\"].read_group([(\"display_name\", \"like\", \"Azure\")], fields=[\"state_id:count_distinct\",], groupby=[\"country_id\"], lazy=False)\n[{'__count': 4, 'state_id': 1, 'country_id': (233, <odoo.tools.func.lazy object at 0x7f197b65fc00>), '__domain': ['&', ('country_id', '=', 233), ('display_name', 'like', 'Azure')]}]\n```", "```py\n>>> print(self.name)\nOdooBot\n```", "```py\n>>> for rec in self: print(rec.name)\n...\nOdooBot\n```", "```py\n>>> self.company_id\nres.company(1,)\n>>> self.company_id.name\n'YourCompany'\n>>> self.company_id.currency_id\nres.currency(1,)\n>>> self.company_id.currency_id.name\n'EUR'\n```", "```py\n>>> self.company_id.parent_id\nres.company()\n>>> self.company_id.parent_id.name\nFalse\n```", "```py\n>>> self.browse(2).login_date\ndatetime.datetime(2021, 11, 2, 16, 47, 57, 327756)\n```", "```py\n>>> root = self.env[\"res.users\"].browse(1)\n>>> print(root.name) \nSystem\n>>> root.name = \"Superuser\"\n>>> print(root.name) \nSuperuser\n```", "```py\n>>> from datetime import date\n>>> self.date = date(2020, 12, 1)\n>>> self.date\ndatetime.date(2020, 12, 1)\n>>> self.date = \"2020-12-02\"\n>>> self.date\ndatetime.date(2020, 12, 2)\n```", "```py\n>>> import base64\n>>> blackdot_binary = b\"\\x89PNG\\r\\n\\x1a\\n\\x00\\x00\\x00\\rIHDR\\x00\\x00\\x00\\x01\\x00\\x00\\x00\\x01\\x08\\x04\\x00\\x00\\x00\\xb5\\x1c\\x0c\\x02\\x00\\x00\\x00\\x0bIDATx\\xdacd\\xf8\\x0f\\x00\\x01\\x05\\x01\\x01'\\x18\\xe3f\\x00\\x00\\x00\\x00IEND\\xaeB'\\x82\"\n>>> self.image_1920 = base64.b64encode(blackdot_binary).decode(\"utf-8\")\n```", "```py\n>>> self.child_ids = None\n>>> self.child_ids\nres.partner()\n```", "```py\n>>> mycompany_partner = self.company_id.partner_id\n>>> myaddress = self.partner_id\n>>> mycompany_partner.child_ids = mycompany_partner.child_ids | myaddress\n```", "```py\n>>> mycompany_partner.child_ids |= myaddress\n```", "```py\n>>> Partner = self.env['res.partner']\n>>> recs = Partner.search( [(\"name\", \"ilike\", \"Azure\")])\n>>> recs.write({\"comment\": \"Hello!\"})\nTrue\n```", "```py\nself.write({ 'child_ids': address1 | address2})\n```", "```py\nself.write({ 'child_ids': [(6, 0, [address1.id, address2.id])]})\n```", "```py\n>>> Partner = self.env['res.partner']\n>>> new = Partner.create({'name': 'ACME', 'is_company': True})\n>>> print(new)\nres.partner(59,)\n```", "```py\n>>> rec = Partner.search([('name', '=', 'ACME')])\n>>> rec.unlink()\n2021-11-15 18:40:10,090 3756 INFO library odoo.models.unlink: User #1 deleted mail.message records with IDs: [20]\n2021-11-15 18:40:10,146 3756 INFO library odoo.models.unlink: User #1 deleted res.partner records with IDs: [59]\n2021-11-15 18:40:10,160 3756 INFO library odoo.models.unlink: User #1 deleted mail.followers records with IDs: [9]\nTrue\n```", "```py\n>>> demo = self.env.ref(\"base.user_demo\")\n>>> new = demo.copy({\"name\": \"John\", \"login\": \"john@example.com\"})\n```", "```py\n>>> from datetime import date\n>>> date.today()\ndatetime.date(2021, 11, 3)\n>>> from datetime import timedelta\n>>> date(2021, 11, 3) + timedelta(days=7)\ndatetime.date(2021, 11, 10)\n```", "```py\n>>> from dateutil.relativedelta import relativedelta\n>>> date(2021, 11, 3) + relativedelta(years=1, months=1)\ndatetime.date(2022, 12, 3)\n```", "```py\n>>> from odoo.tools import date_utils\n>>> from datetime import datetime\n>>> now = datetime(2020, 11, 3, 0, 0, 0)\n>>> date_utils.start_of(now, 'week')\ndatetime.datetime(2020, 11, 2, 0, 0)\n>>> date_utils.end_of(now, 'week')\ndatetime.datetime(2020, 11, 8, 23, 59, 59, 999999)\n>>> today = date(2020, 11, 3)\n>>> date_utils.add(today, months=2)\ndatetime.date(2021, 1, 3)\n>>> date_utils.subtract(today, months=2)\ndatetime.date(2020, 9, 3)\n```", "```py\n>>> from datetime import date\n>>> date(2020, 11, 3).strftime(\"%d/%m/%Y\")\n'03/11/2020'\n```", "```py\n>>> from odoo import fields\n>>> fields.Datetime.to_datetime(\"2020-11-21 23:11:55\")\ndatetime.datetime(2020, 11, 21, 23, 11, 55)\n```", "```py\n>>> from datetime import datetime\n>>> datetime.strptime(\"03/11/2020\", \"%d/%m/%Y\")\ndatetime.datetime(2020, 11, 3, 0, 0)\n```", "```py\n>>> from datetime import datetime\n>>> import pytz\n>>> naive_date = datetime(2020, 12, 1, 0, 30, 0)\n>>> client_tz = self.env.context[\"tz\"]\n>>> client_date = pytz.timezone(client_tz).localize(naive_date)\n>>> utc_date = client_date.astimezone(pytz.utc)\n>>> print(utc_date)\n2020-11-30 23:30:00+00:00\n```", "```py\n>>> rs0 = self.env[\"res.partner\"].search([(\"display_name\", \"like\", \"Azure\")])\n>>> len(rs0)  # how many records?\n4\n>>> rs0.filtered(lambda r: r.name.startswith(\"Nicole\"))\nres.partner(27,)\n>>> rs0.filtered(\"is_company\")\nres.partner(14,)\n>>> rs0.mapped(\"name\")\n['Azure Interior', 'Brandon Freeman', 'Colleen Diaz', 'Nicole Ford']\n>>> rs0.sorted(\"name\", reverse=True).mapped(\"name\")\n['Nicole Ford', 'Colleen Diaz', 'Brandon Freeman', 'Azure Interior']\n>>> rs0.mapped(lambda r: (r.id, r.name))\n[(14, 'Azure Interior'), (26, 'Brandon Freeman'), (33, 'Colleen Diaz'), (27, 'Nicole Ford')]\n```", "```py\nPartner = self.env[\"res.partner\"]\nrecs = self.env[\"res.partner\"]\nfor i in range(3):\n    rec = Partner.create({\"name\": \"Partner %s\" % i})\n    recs |= rec\n```", "```py\nvalues = []\nfor i in range(3):\n    value = {\"name\": \"Partner %s\" % i}\n    values.append(value)\nrecs = self.env[\"res.partner\"].create(values)\n```", "```py\nPartner = self.env[\"res.partner\"]\nrecs = []\nfor i in range(3):\n    rec = Partner.create({\"name\": \"Partner %s\" % i})\n    recs.append(new_rec)\n```", "```py\n>>> self.env.cr.execute(\"SELECT id, login FROM res_users WHERE login=%s OR id=%s\", (\"demo\", 1))\n>>> self.env.cr.execute(\"SELECT id, login FROM res_users WHERE login=%(login)s OR id=%(id)s\", {\"login\": \"demo\", \"id\": 1})\n```", "```py\n>>> self.env.cr.fetchall()\n[(6, 'demo'), (1, '__system__')]\n```", "```py\n>>> self.env.cr.dictfetchall()\n[{'id': 6, 'login': 'demo'}, {'id': 1, 'login': '__system__'}]\n```"]