- en: '2'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Installing and Configuring PyCharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we looked at the most popular features of PyCharm and
    considered not only what makes PyCharm a great IDE but also what makes any IDE
    historically great. There is a base set of features we as developers need in order
    to be truly productive. In this chapter, we’ll turn our focus toward installing
    PyCharm. You may be thinking that you simply download and install it. You can
    do that, but there are different ways to install PyCharm that you might like better.
    There are also different options based on your operating system.
  prefs: []
  type: TYPE_NORMAL
- en: Aside from the simple act of downloading the installer, running it, and mashing
    the next button until the installer’s dialog boxes go away, there are other considerations
    for getting the tool properly installed and working. PyCharm is highly customizable,
    and you are presented with some of those customization options as soon as the
    program runs for the first time. Some of these options are interesting, and some
    of them can be troublesome if you’re just picking every option and every customization
    during the process.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here’s what you can look forward to in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading JetBrains Toolbox and using it to install and manage PyCharm. This
    is my recommended method of installation because you get an easy way to handle
    upgrades and uninstall. You can even install and manage several versions of PyCharm
    should you ever need to.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll run PyCharm for the first time and go through the customization options
    the software presents on the first run. Naturally, you can change these at any
    time, and we’ll cover that too.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We’ll clone this book’s repository from GitHub using PyCharm’s integrated **version
    control system** (**VCS**) tools.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To be successful in this chapter, you will need the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A computer. Just in case you missed this particular gag in [*Chapter 1*](B19644_01.xhtml#_idTextAnchor014),
    I pride myself on being complete and leaving nothing to chance! The computer should
    meet the following system requirements for PyCharm:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 64-bit versions of Microsoft Windows 8 or higher, macOS 10.14 or higher, or
    Linux running GNOME or KDE desktop.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: The official system requirements list 4 GB RAM as the minimum and 8 GB as recommended.
    If you intend to do non-trivial work, and you’re thinking about specs on a new
    computer, I wouldn’t buy less than 16 GB RAM, and I’d prefer 32 GB. The lighter
    specs are just those needed to run PyCharm. Most developers run more than the
    IDE.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 2.5 GB hard disk space; SSD recommended. Again, that’s PyCharm’s low-end recommendation.
    If you’re shopping, get an NVMe drive rather than an SSD. The performance is usually
    10x greater and the cost is easily affordable.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: 1,024 X 768 minimum screen resolution. That’s the low-end specification, and
    it’s a joke. You won’t get much done on a screen that size, and even cheap computers
    today can easily support 1,920 X 1,080\. For professional work, you really want
    4K if possible, or failing that two (or more) 1,920 X 1,080 monitors. The more
    screen real estate you have, the more productive you will be with any IDE. On
    a 4K monitor, I can have PyCharm showing me my project explorer, two open code
    windows side by side, the database explorer, and a terminal session.
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: An operating system. This works best if it is installed on your computer already
    since we don’t cover how to do that in this book. Windows, macOS, Linux—it’s all
    the same as far as this book is concerned because PyCharm works in all three environments,
    and the UI is nearly identical in each environment.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A connection to the internet.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An installation of Python 3\. We’re going to be using Python 3 exclusively in
    this book. There are a few different “flavors” of Python 3, but for the most part,
    the plain old Python 3 from [https://www.python.org](https://www.python.org) will
    be fine. We’ll get into those “flavors” later when we start talking about virtual
    environments in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052), *Customizing
    Interpreters and Virtual Environments*. If revision numbers give you comfort,
    the latest release at the time I’m writing is 3.11.1\. The Python revision I’m
    using in that production SaaS app I mentioned in [*Chapter 1*](B19644_01.xhtml#_idTextAnchor014)
    is 3.8\. If your Python 3 installation is older than that, you should update it.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: At some point, a **GitHub** account might become handy since I will be sharing
    the code from the book using a **Git** repository. Since you’ll be cloning some
    code, but not pushing, it isn’t strictly necessary to sign in—that is, unless
    you’d like to sign in, view the book’s repository, and give it a star. That’d
    be peachy and prove to the world that you’re a stand-up human being.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading PyCharm the traditional way
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: First, I’m going to show the simplest, most direct, and most common way to install
    PyCharm. There’s a decent chance you’ve already done this before you bought this
    book, and there’s nothing wrong with that. After we cover this, I’ll show you
    my preferred way to install using a free app from JetBrains called Toolbox. You
    can choose any of the installation methods you’d like, knowing the choice won’t
    affect the outcome of anything we do in this book.
  prefs: []
  type: TYPE_NORMAL
- en: Note there is a 30-day free trial available for the Professional edition if
    you’d like to try it out. After 30 days, you’ll have to pay for it or downgrade
    to the Community edition. Furthermore, don’t get too hung up on the version number
    displayed in *Figure 2**.1*. JetBrains releases updates to PyCharm quite often,
    and the number will probably change several times before this book even hits the
    shelves. It’s hard to go wrong with the latest version.
  prefs: []
  type: TYPE_NORMAL
- en: To download and install PyCharm, direct your browser to [https://www.jetbrains.com/pycharm](https://www.jetbrains.com/pycharm).
    The site will detect your operating system and attempt to present you with the
    correct download option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The download page has three main parts, as seen in *Figure 2**.1*:'
  prefs: []
  type: TYPE_NORMAL
- en: You can select the operating system (Windows, macOS, or Linux). If you want
    to use Linux, make sure you’re running GNOME or KDE as those are supported window
    managers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: You can choose between the Professional edition or the Community edition.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Regardless of the first two options, make sure you take a look at the dropdown
    for the installer. Windows and Linux let you select between Intel and ARM. macOS
    lets you select between Intel and Apple Silicon:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 2.1: The download window on the JetBrains website; make sure the correct
    operating system and processor are selected](img/B19644_Figure_2.01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.1: The download window on the JetBrains website; make sure the correct
    operating system and processor are selected'
  prefs: []
  type: TYPE_NORMAL
- en: Once you have downloaded the proper version, follow the regular installation
    procedure for your operating system. If you selected a Linux version, you aren’t
    downloading an installer—you’re downloading a gzipped `.tar` file. You can just
    extract it and run PyCharm from the resulting folder.
  prefs: []
  type: TYPE_NORMAL
- en: JetBrains Toolbox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: I just presented the most common way people install software, including PyCharm,
    to their development computer. There is a different way, which I prefer, involving
    installing a separate product called JetBrains Toolbox. Toolbox is especially
    useful if you have multiple JetBrains products, as I do. I have a subscription
    to all their tools, and I regularly use many of them. My preferred C# IDE is JetBrains
    Rider, which I used exclusively in my book *Real-World Implementation of Design
    Patterns in C#*, available from Packt Publishing.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you don’t use multiple JetBrains products, Toolbox provides some useful
    features such as providing an easy way to install, uninstall, and update your
    PyCharm installation. You can even use it to install multiple versions of PyCharm
    should you ever need to, including **Early Access Program** (**EAP**) releases.
    EAP releases give you access to the most cutting-edge features from JetBrains
    before they are generally available. As a development lead, I like to take the
    newest IDEs for a test drive before I give the *all-clear* to my development team.
    Toolbox makes that very easy.
  prefs: []
  type: TYPE_NORMAL
- en: 'Toolbox is a separate download, and it is free. Let’s start by revisiting the
    PyCharm download page. At the bottom, you’ll find a link to JetBrains Toolbox,
    as shown in *Figure 2**.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.2: Skip the usual download links we covered earlier and instead
    click the link to Toolbox](img/B19644_Figure_2.02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.2: Skip the usual download links we covered earlier and instead click
    the link to Toolbox'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is entirely possible that JetBrains will re-arrange its website. If there
    is no link at the bottom, you can simply search for *Toolbox* and find the most
    current download. You’ll land on a page like the one shown in *Figure 2**.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.3: The Toolbox download screen](img/B19644_Figure_2.03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.3: The Toolbox download screen'
  prefs: []
  type: TYPE_NORMAL
- en: As with the normal PyCharm download we reviewed earlier, this web page will
    detect the operating system you are using. The options are a bit simpler, but
    if you’re using a Mac, be sure to click the format button to select Intel versus
    Apple Silicon, as seen in *Figure 2**.3*.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Toolbox in Windows
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The process for installing Toolbox is straightforward. It’s a case where you
    run the installer and smash the **Next** button until the dialog goes away.
  prefs: []
  type: TYPE_NORMAL
- en: Note that when Toolbox is running, you can find it in the system tray in Windows.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Toolbox in macOS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: As with all things Mac, the macOS install is very easy. Having verified you
    downloaded the right version of the `.dmg` file (Intel versus Apple Silicon),
    find the downloaded `.dmg` file in the `Downloads` folder within your `home` folder.
    Double-click to open the `.dmg` file. Drag the Toolbox icon to the `Applications`
    folder. You’re done!
  prefs: []
  type: TYPE_NORMAL
- en: Installing PyCharm with Toolbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Regardless of how you got here—be it on a Mac, Windows, or Linux—you should
    now have Toolbox running. At this point, the experience is almost universal. On
    macOS, Toolbox is just a regular app like any other. On Windows, though, it runs
    in the system tray.
  prefs: []
  type: TYPE_NORMAL
- en: Running Toolbox for the first time brings a pretty standard **end user license
    agreement** (**EULA**). You know the drill. Read it and make sure that JetBrains
    isn’t demanding the surrender of your firstborn, then make your selection to agree
    or disagree with the EULA. Naturally, if you disagree, our time together is at
    an end, unless you’re tuning in for the occasional dad joke. I’ll operate on the
    assumption you agreed to the EULA.
  prefs: []
  type: TYPE_NORMAL
- en: 'With Toolbox installed, you can install IDEs. You’ll see a screen like the
    one shown in *Figure 2**.4*, which lists all the available JetBrains products:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.4: JetBrains Toolbox running in the Windows system tray](img/B19644_Figure_2.04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.4: JetBrains Toolbox running in the Windows system tray'
  prefs: []
  type: TYPE_NORMAL
- en: Naturally, we’re only interested in PyCharm. *Figure 2**.4* shows PyCharm Professional
    and PyCharm Community in the list. If you’re interested in the PyCharm Educational
    edition, it’s further down on the list.
  prefs: []
  type: TYPE_NORMAL
- en: 'To install an IDE, click the **Install** button and wait while Toolbox downloads
    and installs the IDE. Once it is installed, the Toolbox menu changes slightly
    to show you which tools you have installed. You can see mine after I installed
    PyCharm Professional in *Figure 2**.5*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.5: The Toolbox \uFEFFapp after installation of PyCharm Professional](img/B19644_Figure_2.05.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.5: The Toolbox app after installation of PyCharm Professional'
  prefs: []
  type: TYPE_NORMAL
- en: You’ll notice Toolbox lists the applications you have installed at the top of
    the list, while those available for install are below. The advantage offered by
    Toolbox versus a normal install is the ability to launch, update, and uninstall
    your IDEs as well as easily experiment with different versions.
  prefs: []
  type: TYPE_NORMAL
- en: Launching PyCharm using Toolbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After you’ve installed PyCharm, you can launch it or any installed IDE by simply
    clicking the entry in the menu. Before we leave Toolbox, let me show you some
    more interesting features.
  prefs: []
  type: TYPE_NORMAL
- en: Installing an alternate version or uninstalling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Next to each installed IDE in the list, you’ll see three dots, as seen in *Figure
    2**.6*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.6: The three dots next to each app represent a menu](img/B19644_Figure_2.06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.6: The three dots next to each app represent a menu'
  prefs: []
  type: TYPE_NORMAL
- en: The dots are a menu. If you click them, you’ll see some options. You can access
    the settings for PyCharm. We’re going to do this later inside PyCharm itself,
    so we don’t need to do that now. There’s an option for viewing the latest news
    by clicking **What’s new**. Below that, there is an option for installing different
    versions of PyCharm aside from the latest. You can easily roll back to the last
    install if you have problems with the latest. Finally, below the divider and rendered
    in a very intimidating red font is the option to uninstall. It even has a terrifying
    and mysterious ellipsis following the menu option. Hovering over the option usually
    instills a sense of foreboding in all who try it. You were warned.
  prefs: []
  type: TYPE_NORMAL
- en: Updating PyCharm using Toolbox
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Toolbox will help you stay up to date with the latest version of PyCharm and
    any other IDEs you use. Toolbox itself has its own settings and its own update
    mechanism.
  prefs: []
  type: TYPE_NORMAL
- en: 'To get to these settings, click the hexagonal icon in the top-right corner
    of the Toolbox screen, as seen in *Figure 2**.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.7: Use the hexagonal icon at the top of \uFEFFToolbox to access\
    \ its update options](img/B19644_Figure_2.07.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.7: Use the hexagonal icon at the top of Toolbox to access its update
    options'
  prefs: []
  type: TYPE_NORMAL
- en: The **Log in** option allows you to connect Toolbox to your JetBrains account.
    The **About** and **FAQ** options show information about the product. The latter
    takes you to a website where the product's **frequently asked questions** (**FAQ**)
    is maintained. The **Quit** option will close the Toolbox program.
  prefs: []
  type: TYPE_NORMAL
- en: Launching and registering PyCharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Launching PyCharm, regardless of how you do it, shows you a splash screen,
    then takes you to a set of typical first-launch screens. If you installed the
    Professional edition, the first thing you’ll see is the registration screen shown
    in *Figure 2**.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.8: The licensing screen in PyCharm Professional appears on the first
    run](img/B19644_Figure_2.08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.8: The licensing screen in PyCharm Professional appears on the first
    run'
  prefs: []
  type: TYPE_NORMAL
- en: The most common way to proceed here is to log in to your JetBrains account.
    Clicking the button labeled **Log In to JetBrains Account…** will launch your
    browser. You can log in or create an account. If you have purchased a license,
    logging in will associate your copy with the license you purchased.
  prefs: []
  type: TYPE_NORMAL
- en: If you work for a company that owns many licenses, you might need to log in
    to a JetBrains license server. There is also an option for registering with a
    registration code. You’ll find this code in your store account. This can be useful
    if you don’t have good internet access.
  prefs: []
  type: TYPE_NORMAL
- en: Do you have more than one computer?
  prefs: []
  type: TYPE_NORMAL
- en: Note that it is legal to install on multiple computers so long as you aren’t
    running two copies concurrently with the same license. The IDE will detect that
    and demand you shut one copy down.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t have a license and you aren’t ready to commit, you can select the
    **Start trial** option. You will still have to log in to a JetBrains account in
    order to activate your trial.
  prefs: []
  type: TYPE_NORMAL
- en: Setting up PyCharm
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When you launch PyCharm for the first time, and you make it past the license
    and registration, the very next thing you see is a smallish window representing
    PyCharm without a loaded project. You can see the light color scheme version of
    this screen in *Figure 2**.9*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.9: PyCharm with no loaded project](img/B19644_Figure_2.09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.9: PyCharm with no loaded project'
  prefs: []
  type: TYPE_NORMAL
- en: 'From this window, there are a few obvious options. I call them *obvious* because
    they are right in the middle of a big open space in the middle of the window.
    You can create a project, open an existing project, or clone a project from a
    VCS such as Git or **Subversion** (**SVN**). However, my first stop is in the
    gray area to the left on the screen where you’ll find the **Customize** menu option.
    Let’s go ahead and review your options for customizing PyCharm to fit your working
    style. Clicking **Customize** brings you to the preferences screen, as seen in
    *Figure 2**.10*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.10: A small window for setting some of the important preferences
    in PyCharm](img/B19644_Figure_2.10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.10: A small window for setting some of the important preferences in
    PyCharm'
  prefs: []
  type: TYPE_NORMAL
- en: This screen allows us to change the most frequently accessed settings. We can
    change our color theme, the IDE font, and our keymap.
  prefs: []
  type: TYPE_NORMAL
- en: At the bottom, we can import our settings. This is useful when your boss finally
    springs for that new laptop, and you don’t want to spend a bunch of time re-customizing
    your IDE. As we all know, a well-configured, personalized IDE is like your old
    couch. Everybody who tries to sit on it will be horribly uncomfortable. Also,
    it smells. Your friends won’t tell you, but it does. To you, though, it’s molded
    itself perfectly to your form via potentially years of sedentary satisfaction.
    That’s your IDE. You might take years tweaking it to perfection only to be faced
    with having to start over every time you get a new machine. Not today, friends.
    Not with PyCharm. We can export, import, and even share our settings and easily
    bring them into new installations.
  prefs: []
  type: TYPE_NORMAL
- en: I like big fonts and I don’t know why!
  prefs: []
  type: TYPE_NORMAL
- en: You might be noting my font sizes are gigantic in all these shots. I am from
    Texas, and everything is bigger in Texas. However, in this case, I did that for
    you. Screenshots are easy to read with exaggerated font sizes, so you’ll see crazy
    settings in my preferences throughout this book.
  prefs: []
  type: TYPE_NORMAL
- en: You might be thinking at this point that PyCharm has a rather paltry set of
    customization options. You’d be wrong. This deceptively simple window is meant
    to ease you in by presenting the most changed settings. Many users stop here.
    But not you. No, not you. You’re a Viking! Other developers see a deceptively
    diminutive **All settings…** button at the bottom of the screen and think *There
    be dragons!* You see a rich opportunity for adventure! So, click the **All settings…**
    button, if you dare, and we’ll explore this brave new world together.
  prefs: []
  type: TYPE_NORMAL
- en: Appearance and behavior
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Clicking the **All settings…** button brings you to the screen shown in *Figure
    2**.11*. I will mercifully not attempt to cover every available setting as the
    list of possibilities is extensive to the point of tedium. The takeaway as you
    move through the customization settings is that you can pretty much customize
    every pixel generated by the running IDE:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.11: The Settings screen in PyCharm lets you change every aspect
    of the user experience within PyCharm](img/B19644_Figure_2.11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.11: The Settings screen in PyCharm lets you change every aspect of
    the user experience within PyCharm'
  prefs: []
  type: TYPE_NORMAL
- en: Perhaps the most useful way to start is to point out there is a search box at
    the top of the settings categories list. It is usually more practical to search
    for the setting you want than it is to troll through all the screens trying to
    find it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Before we go further, I want you to notice the arrow in *Figure 2**.11* points
    to two items on the screen: **Appearance** at the top (which we’ll talk about
    in just a moment) and a **New UI** setting. As this book is being written, the
    user experience for PyCharm is undergoing a complete overhaul. As the application
    has grown, the menus and toolbars have become increasingly crowded. To fix this,
    JetBrains is working on a simpler UI layout that will hopefully make the tool
    easier to learn and adopt. The classic UI will likely remain available through
    2024, but the new UI will become the standard in late 2023, which should coincide
    with this book going to press. Everything I’m showing you in this book will be
    with the **New UI** setting turned on. It may even be that this option isn’t even
    on the screen in later editions of PyCharm.'
  prefs: []
  type: TYPE_NORMAL
- en: The first thing most developers want to do with a new IDE is to tweak the appearance.
    We’ve already found the setting for the color theme and the font size, but there
    are other settings you’ll want to visit. Let’s start by clicking on **Appearance**,
    as seen in *Figure 2**.11*. This will open a menu on the left and display the
    appearance settings screen.
  prefs: []
  type: TYPE_NORMAL
- en: Appearance
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Having opened the **Appearance** settings, you’ll see a window resembling the
    one shown in *Figure 2**.12*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.12: The Appearance settings for PyCharm](img/B19644_Figure_2.12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.12: The Appearance settings for PyCharm'
  prefs: []
  type: TYPE_NORMAL
- en: We have seen a few of these settings before. We can set the theme as we could
    in the simpler settings dialog we saw earlier. This window, however, gives you
    a link, labeled **Get more themes**, which will let you explore the JetBrains
    Marketplace for themes beyond the standard issue you have with the PyCharm install.
    We’ll cover plugins toward the end of the book, but there’s no harm in looking
    around if you’d like to find something a bit more unique.
  prefs: []
  type: TYPE_NORMAL
- en: Wait for it!
  prefs: []
  type: TYPE_NORMAL
- en: This is not where you set the font that appears in the code editor. This setting
    controls the fonts on the UI itself. It will affect the buttons, menu items, window
    titles, and so on rather than the editor, which is probably what you are wanting
    to change.
  prefs: []
  type: TYPE_NORMAL
- en: Don’t worry—we’ll customize the editor font in just a moment.
  prefs: []
  type: TYPE_NORMAL
- en: Editor settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'As with most of the sections within the **Settings** window, there are a lot
    of customization options. I’m just going to hit a few highlights. As we go through
    the screens, you’ll see just how much customization is possible. If it’s a pixel
    on your screen rendered by PyCharm, you can likely customize it in some way! *Figure
    2**.13* shows the **Editor** settings section of the **Settings** window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.13: The Editor settings in PyCharm’s Settings window](img/B19644_Figure_2.13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.13: The Editor settings in PyCharm’s Settings window'
  prefs: []
  type: TYPE_NORMAL
- en: 'Go through the options on the left side if you like, and see whether there’s
    anything that makes sense for you to change. The **Color Scheme** section lets
    you customize the way the IDE colors your syntax. I’m going to jump to what I
    think is the most useful setting to modify. Click the **Font** section, as I have
    in *Figure 2**.14*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.14: The Font settings for the editor in PyCharm](img/B19644_Figure_2.14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.14: The Font settings for the editor in PyCharm'
  prefs: []
  type: TYPE_NORMAL
- en: 'This screen does one thing: it controls the appearance of text in the IDE’s
    editor window. The other font settings we’ve seen have generally applied to the
    whole IDE. This setting is the most important one for us as users of the tool.
    This is the setting for the part of the tool you’ll be staring at all day long.
    You can set the font, the size, and the line height. I have my font size set high
    because I need nice, big fonts for all these screenshots, but to be honest, my
    daily driver on my work laptop is set to around 16 or 18\. Bigger font sizes are
    easier to read depending on how far away your monitor is. Ideally, that shouldn’t
    be much further than arm’s length. If your font size is too small, you’ll unknowingly
    squint at your monitor more often, and this could lead to fatigue.'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is a setting here for enabling font ligatures. These are enhancements
    to standard fonts that allow symbols that we use in our code to show up with a
    bit more elegance. For example, with font ligatures enabled, a conditional with
    a not equals sign such as `if a != b` will be rendered as seen in *Figure 2**.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.15: Turning on font ligatures allows you to express certain symbols
    that are not normally available, such as the inequality symbol on line 5](img/B19644_Figure_2.15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.15: Turning on font ligatures allows you to express certain symbols
    that are not normally available, such as the inequality symbol on line 5'
  prefs: []
  type: TYPE_NORMAL
- en: In order for this to work, you have to select a font that supports ligatures.
    PyCharm ships with the *Fira Code* font specifically because it’s a nice IDE font
    that supports ligatures. If you want to explore more fonts with ligatures, point
    your browser to [https://nerdfonts.com](https://nerdfonts.com). It has many fonts
    appropriate for editors, terminals, and consoles, many of which support ligatures.
  prefs: []
  type: TYPE_NORMAL
- en: Below the **Font** settings in the **Editor** settings lies **the color scheme**.
    You’ve seen this one before, but it’s nice to know where it is since the last
    time we saw it, it was in the setup window.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’d like more customizations for the color scheme, twirl down the caret
    next to the **Color Scheme** menu item and you’ll see, as I do in *Figure 2**.16*,
    that there are many more options:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.16: You can change the color of just about anything in PyCharm using
    the options in the Color Scheme settings menu](img/B19644_Figure_2.16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.16: You can change the color of just about anything in PyCharm using
    the options in the Color Scheme settings menu'
  prefs: []
  type: TYPE_NORMAL
- en: You can control the colors for every window in the application in every context
    they are used. For example, you can have different color schemes for SQL files
    versus JavaScript files versus Python files.
  prefs: []
  type: TYPE_NORMAL
- en: 'Perhaps the most useful setting in this lot is the ability to customize the
    font that appears in PyCharm’s integrated terminal window. You can see that in
    *Figure 2**.17*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.17: You can customize the font that appears in PyCharm’s integrated
    terminal window](img/B19644_Figure_2.17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.17: You can customize the font that appears in PyCharm’s integrated
    terminal window'
  prefs: []
  type: TYPE_NORMAL
- en: 'By default, the console uses the same font as the editor. If you’d like to
    change that, you can. You can further customize the appearance of the console
    using the **Console Colors** settings, as seen in *Figure 2**.18*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.18: Console Colors settings in PyCharm](img/B19644_Figure_2.18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.18: Console Colors settings in PyCharm'
  prefs: []
  type: TYPE_NORMAL
- en: Personally, I spend a lot of time in the terminal, so I appreciate the level
    of customization available.
  prefs: []
  type: TYPE_NORMAL
- en: 'Close the **Color Scheme** menu and let’s jump to the **Code Style** menu.
    You can see the menu in *Figure 2**.19*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.19: The Code Style menu within PyCharm’s Settings window](img/B19644_Figure_2.19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.19: The Code Style menu within PyCharm’s Settings window'
  prefs: []
  type: TYPE_NORMAL
- en: 'This one I find a little puzzling. The *PEP 8* standard states no Python line
    should be longer than 79 characters, yet the editor has a hard wrap set to 120\.
    Thankfully, we can fix this. As I said, *PEP 8* says code lines should be limited
    to 79 columns or fewer. The standard goes on to recommend comment lines and docstrings
    should be limited to 72 columns. To make sure I follow these rules, I change my
    **Code Style** settings, as shown in *Figure 2**.20*:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.20: These are my recommended settings for wraps and guides, which\
    \ honor PE\uFEFFP 8](img/B19644_Figure_2.20.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.20: These are my recommended settings for wraps and guides, which
    honor PEP 8'
  prefs: []
  type: TYPE_NORMAL
- en: I change the `79`, and I check the wrap by typing in the checkbox. Then, I add
    `72` and `79` to the **Visual guides** setting so that I’ll see lines in the right-hand
    gutter. Well-written Python code is always consistent with standards. Setting
    these visual guides helps me avoid those annoying red squiggly lines. I hate those.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t know what I mean, Python has a built-in linter that will warn you
    when you break *PEP 8* rules. After a while, it’s kind of like an annoying mother-in-law
    sitting in the backseat while you drive. Setting up the **Code Style** settings
    this way avoids code rage in a way that is unavoidable with actual backseat drivers,
    and perhaps mothers-in-law in general.
  prefs: []
  type: TYPE_NORMAL
- en: 'Applying these settings changes the look of the editor, as seen in *Figure
    2**.21*. We can see two lines on the right side showing our guides at 72 and 79
    columns respectively:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.21: Code style has been applied and we can see our two faint gray
    lines on the right in the editor](img/B19644_Figure_2.21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.21: Code style has been applied and we can see our two faint gray
    lines on the right in the editor'
  prefs: []
  type: TYPE_NORMAL
- en: If you remember, we also turned on a hard wrap at *line 79*. To demonstrate
    this, you’ll note that *line 10* in the code, which was typed in before I changed
    the settings, clearly runs past our guide at 79 columns. To test the hard-wrap
    setting, I typed the line again immediately below *line 11*. Once I reached the
    hard-wrap limit, PyCharm inserted a line continuation (`\`) and dropped me to
    the next line down with an appropriate indent. It is now impossible for me to
    type a line of code that violates the *PEP* *8* standard.
  prefs: []
  type: TYPE_NORMAL
- en: Note that changing the settings doesn’t automatically re-format your code. There
    is a utility that does that. We will learn how to automatically format and re-format
    code in [*Chapter 4*](B19644_04.xhtml#_idTextAnchor077).
  prefs: []
  type: TYPE_NORMAL
- en: Other settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There are more settings visible in the **Settings** window, including **Remote
    Development** and **Plugins**. These will be covered in later chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Exporting customized settings
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Customized settings are amazing! But it’s always rough when you must switch
    to a new computer. You’d hate to have to redo all your customizations. Or maybe
    you want to share your settings with other developers on your team. PyCharm makes
    this easy. Just click the **File** menu and find the **Manage IDE Settings** option,
    as seen in *Figure 2**.22*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.22: PyCharm lets you export and import your settings](img/B19644_Figure_2.22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.22: PyCharm lets you export and import your settings'
  prefs: []
  type: TYPE_NORMAL
- en: You can import, export, and reset your settings as you wish.
  prefs: []
  type: TYPE_NORMAL
- en: Working with projects
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we have seen all the configuration options and we’ve tweaked some of
    the more popular settings, let’s take PyCharm for a quick spin around the block.
    We’ll create a quick Python project and learn how to run our main script within
    the UI.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, you’re going to need to have installed Python 3 on your computer.
    The Python documentation at [https://docs.python.org/3/using/index.html](https://docs.python.org/3/using/index.html)
    explains the installation. I find this documentation to be complete, but you have
    to wade through a lot to get to the good part. To make this easier for beginners,
    I’ll include some additional links in the *Further reading* section at the end
    of this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You’re probably starting to realize that PyCharm is a pretty powerful and flexible
    tool. There are several ways to configure it and several places in the application
    where you can start the configuration process. There is similar flexibility in
    creating projects.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you’ve never created a project in PyCharm before, which is likely the case
    right now, you’ll see a window like the one shown in *Figure 2**.23*. This window
    offers a button to create a new project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.23: The opening screen for PyCharm has a button that can be used
    to create a new project](img/B19644_Figure_2.23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.23: The opening screen for PyCharm has a button that can be used to
    create a new project'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have created a project in PyCharm already, the PyCharm window will open
    with the last project it had loaded. This is the case I’m showing in *Figure 2**.24*.
    Here, I have the demo project I’ve had open for our examples so far. A little
    later in this chapter, I’ll show you how to clone this code using PyCharm’s integrated
    Git client, but let’s get back to creating a new project. In *Figure 2**.24*,
    I already have a project open. In this case, you can use the **File** menu to
    create a new project. Click **File** | **New Project…**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.24: You can use the File menu to create a new project by clicking
    File | New Project…](img/B19644_Figure_2.24.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.24: You can use the File menu to create a new project by clicking
    File | New Project…'
  prefs: []
  type: TYPE_NORMAL
- en: 'Regardless of which vector you choose, the result is the same. You get the
    **New Project** window shown in *Figure 2**.25*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.25: The New Project window in PyCharm Professional](img/B19644_Figure_2.25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.25: The New Project window in PyCharm Professional'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is where you will notice a big difference between the Professional edition
    and the Community edition. In *Figure 2**.26*, you’ll see the **New Project**
    windows for the Professional edition (left) and the Community edition (right).
    Focus your attention on the left side of the Professional edition window. The
    Professional edition offers a lot more project types, versus only one option in
    the free edition. The Community edition only creates pure Python projects. It
    doesn’t even give you an option, since that’s all it can do:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.26: The project creation options in PyCharm Professional (left)
    side by side with the Community edition (right)](img/B19644_Figure_2.26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.26: The project creation options in PyCharm Professional (left) side
    by side with the Community edition (right)'
  prefs: []
  type: TYPE_NORMAL
- en: It is important to note that it is not impossible to create projects of any
    type in the PyCharm Community edition. For example, if I wanted to create a Flask
    project to make a web application, I absolutely can do that in the Community edition.
    However, I’ll have to do it manually from scratch. The Professional edition speeds
    things up with better tooling, but it doesn’t prevent you from doing anything
    you couldn’t do in any other editor, free or otherwise.
  prefs: []
  type: TYPE_NORMAL
- en: 'I’m going to choose a project common to both editions: a pure Python project.
    This is the default in both editions.'
  prefs: []
  type: TYPE_NORMAL
- en: The first option at the top of the screen allows you to set the name and location
    of your project. I’m going to leave the default at `pythonProject`. Beneath that,
    there are a bunch of options for creating a Python virtual environment. This is
    the topic of [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052), so I’ll leave them
    as default for now.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you have not yet installed Python 3, or if PyCharm cannot detect your Python
    3 installation, you may be prompted to install Python 3 automatically. Be advised
    that PyCharm might not install the latest version of Python 3, nor will it give
    you any control over where it is installed. It will also considerably slow down
    the time needed to create your first project.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure the checkbox titled **Create a main.py welcome script** is checked,
    and click the **Create** button. If you had a project open already when you began
    the process of creating this new project, you’ll see a dialog asking what you’d
    like to do with the currently open project, as seen in *Figure 2**.27*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.27: If you had a project open already, you have options on what
    you’d like to do with it when creating a new project](img/B19644_Figure_2.27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.27: If you had a project open already, you have options on what you’d
    like to do with it when creating a new project'
  prefs: []
  type: TYPE_NORMAL
- en: For now, let’s select the **This Window** button, which will close the project
    you have open and replace it with your new project. Naturally, your old project
    is still intact and can be re-opened using the **File** | **Open** menu option.
  prefs: []
  type: TYPE_NORMAL
- en: 'The result is a new Python 3 project with a single file. The file will contain
    a variant of the ubiquitous *Hello World* idiom, which spares me from having to
    include it in the book’s source code. See? We all win! Let’s take a look at our
    new project within the IDE in *Figure 2**.28*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.28: The new project is created; now, let’s look around!](img/B19644_Figure_2.28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.28: The new project is created; now, let’s look around!'
  prefs: []
  type: TYPE_NORMAL
- en: As you can see, PyCharm created a project structure for us in the project explorer
    (**1**). The project explorer allows you to see and interact with all the files
    in your project. You can see that it created a few folders for the virtual environment.
    We’ll cover this in depth in [*Chapter 3*](B19644_03.xhtml#_idTextAnchor052).
  prefs: []
  type: TYPE_NORMAL
- en: The editor is clearly seen in the middle (**2**). We’ll be spending a lot of
    time here, so let’s point out that PyCharm, as with most IDEs and editors, uses
    a tabbed interface (**3**). There is a toolbar (**4**) to run, debug, test, and
    profile your program, which we will use in just a moment.
  prefs: []
  type: TYPE_NORMAL
- en: On the bottom right (`\t`) character in PyCharm unless you customize it that
    way. But why in the world would you go and do a thing like that?
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: If PyCharm is unresponsive, look down at the bottom of the window near *area
    6*, and you’ll probably see a progress bar indicating that PyCharm is performing
    some operation such as project file indexing. You might have to wait until it
    finishes before your IDE is fully responsive.
  prefs: []
  type: TYPE_NORMAL
- en: Running a PyCharm project
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I kind of feel like an annoying car salesman who won’t shut up about the features
    of the car. All you want to do is drive it already. Let me get you those keys
    and tell my non-existent manager that we have a fish on the hook. I’ll be right
    back.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the case of PyCharm, the keys are toward the top of the window: *area 4*
    shown in *Figure 2**.28*. You can easily find it by locating the blue button with
    an arrow on it. I’ll show you exactly which button in *Figure 2**.29*. You’ll
    have to trust me on the color. It’s blue. This is the **Run** button. Click it:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 2.29: Click the \uFEFFblue arrow to run the main script](img/B19644_Figure_2.29.jpg)"
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.29: Click the blue arrow to run the main script'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, let out a big old Texas YEEEE-HAW! Or, you can just do whatever passes
    for a hoot and holler wherever you’re from. You just ran your program. We’ve taken
    a big step toward mastering a new IDE. The IDE window changes, as seen in *Figure
    2**.30*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.30: When you run your program, you can see the result of your run
    in the console](img/B19644_Figure_2.30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.30: When you run your program, you can see the result of your run
    in the console'
  prefs: []
  type: TYPE_NORMAL
- en: In addition to the run window itself, note that there are buttons on the tab
    that allow you to rerun the program or stop a program that is currently running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the next section, you’ll learn how to clone a code project from GitHub.
    Before we do that, let’s close the current project. Locate the **File** menu and
    click **File** | **Close Project**, as seen in *Figure 2**.31*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.31: Close the project from the File menu](img/B19644_Figure_2.31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.31: Close the project from the File menu'
  prefs: []
  type: TYPE_NORMAL
- en: Excellent! You’re ready for your next adventure! Let’s go get the sample source
    code for the book from GitHub.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning this book’s code from GitHub
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'PyCharm has a robust set of features for working with VCSs such as Git, SVN,
    Mercurial, and Perforce. We’re going to work with Git and GitHub throughout this
    book because they have become the de facto standard in the industry. If you use
    one of the other supported VCSs, the process is mostly the same. In fact, the
    user experience is mostly the same except for differences in how some of the VCSs
    operate. For example, Git uses a four-step process to commit and push files:'
  prefs: []
  type: TYPE_NORMAL
- en: Stage your local changes (`git add`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit your changes locally (`git commit`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Pull from GitHub or your central repository to make sure you have the latest
    changes and fix any conflicts (`git pull`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Push your changes to the central repository (`git push`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'In contrast, SVN only has two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Pull the latest and fix any conflicts (`svn update`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Commit your local changes to the central repository (`svn commit`).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: My point is, the different VCSs might have different workflows that change the
    user experience in PyCharm. For this book, we’ll only use Git.
  prefs: []
  type: TYPE_NORMAL
- en: 'Since you closed your project at the end of the last section, you should see
    a window similar to the one shown in *Figure 2**.32*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.32: Locate the Get from VCS button](img/B19644_Figure_2.32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.32: Locate the Get from VCS button'
  prefs: []
  type: TYPE_NORMAL
- en: We’re going to accomplish two things in this section. First, we’re going to
    set up your GitHub account in PyCharm. This isn’t strictly a requirement should
    you not currently have an account, but sooner or later in your career, you’re
    going to need a GitHub account. You might as well rip off the proverbial band-aid.
    I won’t cover how to create a GitHub account here. You can find instructions for
    this at [https://github.com/signup](https://github.com/signup).
  prefs: []
  type: TYPE_NORMAL
- en: 'Locate and click the **Get from VCS** button. You’ll see a screen like the
    one shown in *Figure 2**.33*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.33: The Get from Version Control window in PyCharm](img/B19644_Figure_2.33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.33: The Get from Version Control window in PyCharm'
  prefs: []
  type: TYPE_NORMAL
- en: Setting up your GitHub account
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Note that on the right side of the window, you can see all your accounts for
    GitHub, GitHub Enterprise, and JetBrains Space. I’m going to go ahead and set
    up my GitHub account. Click the **GitHub** item on the left menu. You’ll see a
    screen like the one shown in *Figure 2**.34*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.34: Logging in to GitHub is easy and only needs to be done one time](img/B19644_Figure_2.34.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.34: Logging in to GitHub is easy and only needs to be done one time'
  prefs: []
  type: TYPE_NORMAL
- en: Locate and click the **Login via GitHub** button. Before you click it, I recommend
    you go ahead and log in to GitHub at [https://github.com/login](https://github.com/login)
    using your favorite browser. This process is more seamless if you’ve already logged
    in and cleared any **two-factor authentication** (**2FA**) hurdles.
  prefs: []
  type: TYPE_NORMAL
- en: Once authorized, you can close your browser and return to PyCharm. After a few
    minutes, you’ll see all your GitHub repositories in the window. This makes working
    with your own repositories very easy. However, the repository we’re going to clone
    isn’t on your list, so we’ve got a little more work to do.
  prefs: []
  type: TYPE_NORMAL
- en: Cloning the book’s repository
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To clone a repository you don’t own, head back to the **Repository URL** option
    on the left menu, as shown in *Figure 2**.35*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.35: To clone a repository you don’t own, click the Repository URL
    option on the left menu](img/B19644_Figure_2.35.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.35: To clone a repository you don’t own, click the Repository URL
    option on the left menu'
  prefs: []
  type: TYPE_NORMAL
- en: Within the `home` folder under `PyCharmProjects`. I left mine at the default.
    Click the button labeled **Clone**.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once cloned, you’re given the usual paranoid dialog box pervasive in software
    development tools today, as seen in *Figure 2**.36*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 2.36: Do you trust me?](img/B19644_Figure_2.36.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 2.36: Do you trust me?'
  prefs: []
  type: TYPE_NORMAL
- en: I know we just met and all, but if you really want the book’s source code, you
    should click the **Trust Project** button. Once you do, you’re all set. You now
    have all the sample code shown in the book.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was all about the preliminaries. We installed and configured your
    new instance of PyCharm on your computer. There are several ways you can install
    PyCharm. You can go the traditional route of just downloading the installer. My
    preferred way is to install the JetBrains Toolbox app and use that to install
    and manage PyCharm, along with any other JetBrains tools I might need or want.
    Using the Toolbox app allows us an easy way to update PyCharm or even perform
    a clean uninstall should the need arise.
  prefs: []
  type: TYPE_NORMAL
- en: We learned the differences between the three versions of PyCharm. The free Community
    edition is limited in the types of projects PyCharm supports with integrated tooling.
    When we created a new project, we were not afforded any project template options.
    Only “pure Python” projects are supported. This doesn’t mean we can’t create any
    kind of project; it simply means that the tedious part of setting up different
    kinds of projects isn’t handled for you by the IDE.
  prefs: []
  type: TYPE_NORMAL
- en: The Professional edition supports a broader set of tools, including a full set
    of project templates and expanded tools for web development and scientific workloads.
    While the Professional edition isn’t free, there are licensing options for individuals
    and a separate price for corporate developers. There also exist options to obtain
    a free professional license through an application process. Examples include Microsoft
    MVPs and other recognized professionals, open source developers, and university
    professors. There are often discount deals on JetBrains’ website for start-ups,
    educational institutions, and others. Unfortunately, book authors aren’t listed.
  prefs: []
  type: TYPE_NORMAL
- en: The third version of PyCharm is the Educational edition. This is a special edition
    that allows for the creation and playback of interactive lessons right in the
    IDE. If you teach Python using PyCharm, you probably don’t want this. You should
    rather use the Community or Professional edition and take advantage of JetBrains’
    offer of free software for teachers.
  prefs: []
  type: TYPE_NORMAL
- en: Once we got PyCharm installed, we set out to configure the application. A number
    of important configuration options were highlighted. We can customize nearly every
    aspect of the way PyCharm works. Popular settings include setting the IDE’s color
    theme, font size, and code development settings. In our case, we set up our editor
    to use a font with ligatures called Fira Code, which ships with PyCharm. We also
    configured our **Code Style** settings to perform a hard wrap at 79 characters
    to keep us compliant with *PEP* *8* standards.
  prefs: []
  type: TYPE_NORMAL
- en: After we got everything set up, we kicked the proverbial tires by creating a
    simple pure Python project and running it using the IDE’s **Run** button.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we set up PyCharm with our GitHub account and cloned this book’s sample
    code repository. We’ve got a lot done in a short amount of time. At this point,
    you’re all set to develop software using PyCharm, and we’re only in [*Chapter
    2*](B19644_02.xhtml#_idTextAnchor028)!
  prefs: []
  type: TYPE_NORMAL
- en: Stick with me as we dive deeper into working with Python virtual environments
    in the next chapter. Virtual environments are considered a best practice, and
    they provide a way to segregate the requirements of your projects in your local
    development environment. As you’ll see, PyCharm negates the need to remember a
    half-dozen or so commands as well as the installation of extra libraries to get
    your project up and running more quickly.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are the benefits of using the JetBrains Toolbox app to install and manage
    PyCharm installations?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the main differences between the Community edition and the Professional
    edition of PyCharm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the main limitations of PyCharm Community?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: If you are using the PyCharm Community edition, can you still develop projects
    using frameworks such as Flask that are seemingly only supported in the Professional
    edition?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What are the benefits of linking your GitHub account to PyCharm?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Have you gone to the book’s repository and given it a star yet? If you fork
    the repository, you’ll be notified if I ever change anything. I doubt that will
    happen since, like yours, my code is often perfect on the first try. Nope. Couldn’t
    keep a straight face. I tried.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Be sure to check out the companion website for this book at [http://pycharm-book.com](http://pycharm-book.com).
  prefs: []
  type: TYPE_NORMAL
- en: 'Instructions for setting up Puthon: [https://www.maddevskilz.com/pages/python-landing-page](https://www.maddevskilz.com/pages/python-landing-page)'
  prefs: []
  type: TYPE_NORMAL
- en: '*PEP 8 – Style Guide for Python* *Code*: [https://peps.python.org/pep-0008/#maximum-line-length](https://peps.python.org/pep-0008/#maximum-line-length)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Part 2: Improving Your Productivity'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This part covers beginner to advanced concepts and techniques that facilitate
    productivity while working on Python projects in PyCharm. Readers will be able
    to learn about the dynamic options for the management of projects, Python interpreters,
    and virtual environments as well as know how to carry on good programming practices
    such as version control, testing, debugging, and profiling and how PyCharm streamlines
    those processes.
  prefs: []
  type: TYPE_NORMAL
- en: 'This part has the following chapters:'
  prefs: []
  type: TYPE_NORMAL
- en: '[*Chapter 3*](B19644_03.xhtml#_idTextAnchor052), *Customizing Interpreters
    and Virtual Environments*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 4*](B19644_04.xhtml#_idTextAnchor077), *Editing and Formatting with
    Ease in PyCharm*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 5*](B19644_05.xhtml#_idTextAnchor112), *Version Control with Git
    in PyCharm*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[*Chapter 6*](B19644_06.xhtml#_idTextAnchor145), *Seamless Testing, Debugging
    and Profiling*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
