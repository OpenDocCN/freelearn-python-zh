["```py\n\nprice =  'eggs $2, cheese $4'\n```", "```py\nprice = price.replace('$', '£')      # Replace $ by £ in the string price\n```", "```py\n\nx = x.lstrip('#')      # Remove left-hand leading '#' characters to get x = 'this Is A test???'\nx = x.rstrip('?')      # Remove right-hand trailing '?' characters to get x = 'this Is A test'\nx = x.lower()          # Convert to lower-case to get x = 'this is a test'\n```", "```py\n\n    line = line.replace(',',' ')     # Allow use of a space or comma to separate operands\n    line = line.replace('[','')      # Allow LDRI r0,[r2] or LDRI r0,r2 First remove '['\n    line = line.replace(']','')      # Replace ']' by null string.\n    line = line.upper()              # Let's force lower- to upper-case\n    line = line.lstrip(' ')          # Remove leading spaces\n    line = line.rstrip('\\n')         # Remove end of line chars. End-of-line is \\n\n```", "```py\n\nT1 = s[0]                       # This is the mnemonic 'ADD'\nT2 = s[1]                       # This is the destination register 'R1'\nT3 = s[2]                       # This is the first source register 'R2'\nT4 = s[3]                       # This is the second source register 'R3'\n```", "```py\n\nif T1 == 'STOP': then run = 0   # If the instruction is stop then halt processing\nfirstReg = int(T2[1:])          # Get the register number as an integer\n```", "```py\n\nregNum = input('Please enter register number >>>')\ncontents = reg[regNum]\n```", "```py\n\n@ This is text\nNOP\n NOP\nNOP\nNOP\n```", "```py\nEND\n```", "```py\n\nmyFile = 'E:\\\\ArchitectureWithPython\\\\testText.txt'\nwith open(myFile,'r') as sFile:\n    sFile = sFile.readlines()           # Open the source program\nprint (sFile)\n```", "```py\n\n['@ This is text\\n', 'NOP\\n', ' NOP\\n', ' \\n', 'NOP\\n', '\\n', 'NOP\\n', 'END']\n```", "```py\n\nx = [expression for i in y if condition]\n```", "```py\n\ny = 'this$is$a$test'\nx = [i for i in y if i != '$']\n```", "```py\n\nx =['t', 'h', 'i', 's', 'i', 's', 'a', 't', 'e', 's', 't'].\n```", "```py\n    sFile = [i for i in sFile if i != '']   # Remove blank lines\n    ```", "```py\n    sFile = [i.upper() for i in sFile]      # Convert to upper-case\n    ```", "```py\n\nsFile = [i.split() for i in sFile if i != '']\n```", "```py\n\nsFile = ['ADD R1 R2 R3', 'BEQ LOOP', '', 'LDRL R2 4','']\nsFile = [i.split() for i in sFile if i != '']\n```", "```py\nprint(sFile)\n```", "```py\n\n[['ADD', 'R1', 'R2', 'R3'], ['BEQ', 'LOOP'], ['LDRL', 'R2', '4']]\n```", "```py\n\nopCodes = {'add':(2,34), 'inc':(4,37)}\n```", "```py\n\nopCodes = {'add':[2,34], 'inc':[4,37]}\n```", "```py\n\nfruit1 = ['apples', 'oranges', 'grapes', 'bananas', 'peaches']\nsize = len(fruit1)               # Get length of the list\ninList = False                   # inList is False until we find item\nfor i in range (0,size):         # Repeat for each item in list\n    if fruit1[i] == 'grapes':\n```", "```py\n        inList = True            # Set flag to True if we find the item\n```", "```py\n\nlistSize = len(fruit1)\nfor i in range (0,listSize):\n    if fruit1[i] != 'grapes': inList = False   # Is the item here?\"\n    else:                                      # If it is, drop out of the loop\n        inList = True                          # Set flag on finding it\n        break                                  # Jump out of the loop\n```", "```py\n\nif inList == False: print('Yes, we have no grapes')\nif inList == True:  print('Grapes --- we got lots')\n```", "```py\n\nif    'grapes' in fruit1:\n      inList = True\nelse: inList = False\n```", "```py\n\nif 'Smith' in staff:  worksHere = True\nelse:                 worksHere = False\n```", "```py\n\narithOps = ['ADD','SUB','MUL','DIV']       # Define list of arithmetic operations\n.\n.\nif 'mnemonic' in arithOps:                 # Test whether instruction is arithmetic\n    .\n    .\nelse:\n```", "```py\n\nfor i in anyList:                          # Operate on each element of the list one-by-one\n    <body of loop>\n```", "```py\n\ncar = ['red', 'white', 'green' ,'silver', 'teal']\nfor color in car: print(color)             # Color is a loop variable; we could have used i.\n```", "```py\n\nred\nwhite\ngreen\nsilver\nteal\n```", "```py\n\nopCodes = [('NOP','misc',0),('BEQ','flow',1),('LDR','move',2), \\\n          ('ADD', 'arith',3)]\nfor instruction in opCodes:                # Step through the op-codes\n    print(instruction)                     # Print the current op-code\n    op     = instruction[0]                # Extract the three tuple members\n    group  = instruction[1]\n    params = instruction[2]\n    print(op, group, params)               # Print the three tuple values\n```", "```py\n    if op == 'BEQ': print('beq found')     # Demo! Print BEQ when we find it\n```", "```py\n\n('NOP', 'misc', 0)\nNOP misc 0\n('BEQ', 'flow', 1)\nBEQ flow 1\nbeq found\n('LDR', 'move', 2)\nLDR move 2\n('ADD', 'arith', 3)\nADD arith 3\n```", "```py\n\ncar = [ 'red', 'white', 'green', 'silver', 'teal']\nfor color in enumerate(car):\n    print (color)\n```", "```py\n\n(0, 'red')\n(1, 'white')\n(2, 'green')\n(3, 'silver')\n(4, 'teal')\n```", "```py\n\nfor count, color in enumerate(car):\n```", "```py\n    print ('count = ', count, 'Color =', color)\n```", "```py\n\ncount =  0 Color = red\ncount =  1 Color = white\ncount =  2 Color = green\ncount =  3 Color = silver\ncount =  4 Color = teal\n```", "```py\n\nfruit = [['apple',2.35,150], ['orange',4.10,200], ['banana',3.65,70]]\n```", "```py\n\nfor i in range (0,len(fruit)):     # Step through the list of fruit.  len(fruit) is 3\n    if fruit[i][0] == 'orange':    # If the first element in the current item is 'orange',\n        price = fruit[i][1]        # then get the second element in that item\n        break                      # If we do find 'orange' we can break out of the loop\n```", "```py\n\ntestList = [[4,9,[1,6]],[8,7,[0,9]]]\n```", "```py\n\ntestList = [[4,9,[1,6]], [8,7,[0,9]]]  # Each element in the list is itself a list\n```", "```py\n\nx = ['this', 'that', 'then']\n```", "```py\n\n{some operations}\n{main loop\n{some other operations}\nif x == 1 {Do this batch of operations}\nrepeat\n{do these operations}\n}\n```", "```py\n\n{some operations}\n{main loop\n     {some operations}\n     if x == 1\n        {do this batch of operations}\n     repeat\n        {do these operations}\n}\n```", "```py\n\nx = 1\ny = 2\nif z == 4:\n    s = 1\n    b = 2\n    if b == 3:\n        g = 1\nelse: p = 7\n```", "```py\n\nif 'INC' in opCodes:       # This returns True if 'INC' is in opCodes\n```", "```py\n\nbinaryCode  = opData[0]\nformatStyle = opData[1]\n```", "```py\n\nif opCodes.get(thisInstruction) == None: # Ensure that the instruction is valid\n```", "```py\n   print(\"Error. Illegal operation\")\n```", "```py\n\nprefixes = {'UK':44, 'USA':1, 'Germany':49, 'France':33}\nwhile True:                              # Infinite loop\n    x = input('Country? ')               # Ask for the country\n    y = prefixes.get(x)                  # Look up the prefix\n    if y == None:                        # If None print error message\n        print('Prefix not found')\n        break                            # And exit the loop\n    else: print('Prefix = ',y)\nprint('Program terminated')\n```", "```py\n\nHastings EQU 1066      @ Equate the Name \"Hastings\" to the value 1066\n```", "```py\n\nnamSub = {'Hastings':1066, 'Agincourt':1415, 'Trafalgar':1805}\n```", "```py\n\nx = namSub.get('Hastings')\n```", "```py\n\nregs = {'r0':0, 'r1':1, 'r2':2, 'r3':3, 'r4':4}   # Register name-to-number translation\nsymTab = {'start':0,'time':24,'stackP':'sp','next':0xF2} \n                                            # Symbol table converts symbolic name to value\nx0 = 'add r1,r2,r4'                # An example of an instruction in text form\nx1 = x0.split(' ')                 # Split instruction into op-code and predicate\nx2 = x1[1].split(',')              # Split the predicate into tokens\nx3 = x2[0]                         # Get the first token of x2\nif x3 in regs:                     # Is this a valid register?\n    x4 = regs.get(x3)              # Use get() to read its value\nprint ('x0 = ',x0, '\\nx1 = ',x1, '\\nx2 = ',x2, '\\nx3 = ',x3, '\\nx4 = ',x4)\ny0 = 'beq next'                    # Another example: instruction with a label\ny1 = y0.split(' ')                 # Split into op-code and predicate on the space\ny2 = y1[1]                         # Read the predicate (i.e.,'next')\ny3 = symTab.get(y2)                # Get its value from the symbol table (i.e., 0xF2)\nprint('beq ',y3)                   # Print the instruction with the actual address\nz = symTab.get('beq next'.split(' ')[1])  # We've done it all in one line. Not so easy to follow.\nprint('beq ',z)\nprint('Symbol table ', symTab)            # Print the symbol table using a print\nsymTab['nextOne'] = 1234                  # This is how we add a new key and value\nprint('Symbol table ', symTab)            # Here's the augmented symbol table\nopCode = {'add':('Arith',0b0001,3),'ldr':('Move',0b1100,2), \\\n       'nop':('Miscellaneous',1111,0)}    # New directory. Each key has three values in a tuple\nthisInst = 'ldr'                          # Let's look up an instruction\nif thisInst in opCode:                    # First test if it's valid and in the dictionary\n    if thisInst == 'ldr':                 # If it is:\n        instClass = opCode.get('ldr')[0]  # Get first element of the instruction\n        binaryVal = opCode.get('ldr')[1]  # Get the second element\n        operands  = opCode.get('ldr')[2]  # Get the third element\nprint('\\nFor opCode: ',thisInst, '\\nClass = ', instClass, \\\n      '\\nBinary code = ', bin(binaryVal), '\\nNumber of operands = ',operands)\nprint('\\nThis is how to print a directory')\n                                   # Now print a formatted dictionary (key and value on each line)\nfor key,value in opCode.items():\n    print(key, ':', value)\nprint()\nfor i,j in opCode.items():         # Note that key and value can be any two variables\n    print(i, ':', j)\ntheKeys = opCode.keys()            # The function .keys() returns the keys in a dictionary\nprint('The keys are: ',theKeys)\ntest = {'a':0,'b':0,'c':0,'d':0}   # A new directory. The values are just integers\ntest['a'] = test['a'] + 1          # You can change a value! Use the key to locate it\ntest['d'] = test['d'] + 7\ntest1 = {'e':0, 'f':0}             # Here's a second dictionary.\ntest.update(test1)                 # Append it to test using .update()\nprint('Updated dictionary test is: ',test)   # Not convinced? Here it is then.\n```", "```py\n\nx0 =  add r1,r2,r4\nx1 =  ['add', 'r1,r2,r4']\nx2 =  ['r1', 'r2', 'r3']\nx3 =  r1\nx4 =  1\nbeq  242\nbeq  242\nSymbol table  {'start': 0, 'time': 24, 'stackPointer': 'sp', 'next': 242}\nSymbol table  {'start': 0, 'time': 24, 'stackPointer': 'sp', 'next': 242,\n               'nextOne': 1234}\nFor opCode:  ldr\nClass =  Move\nBinary code =  0b1100\nNumber of operands =  2\nThis is how to print a directory\nadd : ('Arith', 1, 3)\nldr : ('Move', 12, 2)\nnop : ('Miscellaneous', 1111, 0)\nadd : ('Arith', 1, 3)\nldr : ('Move', 12, 2)\nnop : ('Miscellaneous', 1111, 0)\nThe keys are:  dict_keys(['add', 'ldr', 'nop'])\nUpdated dictionary test is:  {'a': 1, 'b': 0, 'c': 0, 'd': 7, 'e': 0, 'f': 0}\n```", "```py\npredicate = ['r4','r2','r3']  # The list of parameters for the op-code\n```", "```py\n\nrD = int([predicate[0]][1:])\n```", "```py\n\nrD = predicate[0]\n```", "```py\n\nrD = int([predicate[0]][1:])\n```", "```py\n\nregs = {'r0':0, 'r1':1, 'r2':2, 'r3':3, 'r4':4}   # Register names and values\n```", "```py\n\nif predicate[0] in regs:\n      <deal with valid name>\nelse: <deal with error>\n```", "```py\n\nrD = regs.get(predicate[0])\n```", "```py\n\nregs = {'r0':0, 'r1':1, 'r2':2, 'r3':3, 'r4':4}\naaa  = regs.get('r3')\nbbb  = regs['r3']\nprint('Test aaa = ',aaa, 'bbb =',bbb)\n```", "```py\n\nTest aaa =  3 bbb = 3\n```", "```py\n\ndef adder(P,Q):                    # Adder function\n   R = P + Q\n   return (R)                      # Return the sum R\ndef subtractor(P,Q):               # Subtractor function\n   global R                        # Make R global\n   R = P – Q                       # No need to return a value\nA, B = 7, 2                        # Note Python's multiple assignment\nC = adder(A,B)                     # Do addition\nsubtractor(A,B)                    # Do subtraction (just call the function)\nprint('Sum =', C, 'Diff = ',R)\n```", "```py\n\nSum = 9 Diff =  5\n```", "```py\n\nimport random                   # Get the library (usually at the start of the program)\n.\n.\nX = random.randint(0,256)       # Generate a random integer in the range 0 to 255\n```", "```py\n\nimport sys                      # Get the system library\n.\n.\nif run == 0: sys.exit()         # If run is 0 then go home (exit the Python program)\n```"]