- en: Cloud Computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Cloud computing* is the distribution of computing services, such as servers,
    storage resources, databases, networks, software, analysis, and intelligence,
    via the internet (*the cloud*). The purpose of this chapter is to provide an overview
    of the main cloud computing technologies in relation to the Python programming
    language.'
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will describe the PythonAnywhere platform, with which we will deploy
    Python applications on the cloud. In the context of cloud computing, two emerging
    technologies will be identified: containers and serverless technologies.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Containers* represent the new approach to the virtualization of resources,
    and the *serverless *technologies represent a step forward in the field of cloud
    services because they can speed up the release of applications.'
  prefs: []
  type: TYPE_NORMAL
- en: In fact, you do not have to worry about the provisioning, the servers, or the
    infrastructure configurations. You only have to create functions (namely, Lambda
    functions) that can operate independently from the applications.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: What is cloud computing?
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the cloud computing architecture
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing web applications with PythonAnywhere
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Dockerizing a Python application
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introducing serverless computing
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will also see how to take advantage of the *AWS Lambda* framework for the
    development of Python applications.
  prefs: []
  type: TYPE_NORMAL
- en: What is cloud computing?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Cloud computing is a computational model for the distribution of services based
    on a set of resources, such as virtual processing, mass memory, and networking,
    which can be dynamically aggregated and activated as platforms to run applications,
    satisfying appropriate levels of service and optimizing the efficiency of resource
    use.
  prefs: []
  type: TYPE_NORMAL
- en: This can be acquired and released quickly with minimum management effort or
    interaction with the service provider. This cloud model is composed of five essential
    characteristics, three service models, and four deployment models.
  prefs: []
  type: TYPE_NORMAL
- en: 'In particular, the five essential characteristics are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Free and on-demand access**: This allows users to access—through *user friendly*
    interfaces—the services offered by the provider without human interaction.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Ubiquitous access to the network**: Resources are available throughout the
    network and can be accessed—via standard devices—such as *smartphones*, *tablets*,
    and *personal computers*.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Quick elasticity**: This is the ability of the cloud to increase or reduce
    the resources assigned in a rapid and automatic way, such as making it seem that
    they are infinite to the user. This provides great scalability to the system.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Measured service**: Cloud systems constantly monitor the resources offered
    and optimize them automatically based on the estimated use. In this way, the customer
    only pays for the resources that are actually used in that particular session.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource sharing**: The provider provides its resources through a multi-tenant
    model so that they can be assigned and reassigned dynamically, based on the customer''s
    request, and used by multiple consumers:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/2ada1f6c-31da-4700-aa33-d72e0da304a4.png)'
  prefs: []
  type: TYPE_IMG
- en: Cloud computing main features
  prefs: []
  type: TYPE_NORMAL
- en: However, there are many definitions of cloud computing, each of which has different
    interpretations and meanings. The *National Institute of Standards and Technology* (**NIST**)
    has tried to provide a detailed and official explanation ([https://csrc.nist.gov/publications/detail/sp/800-145/final](https://csrc.nist.gov/publications/detail/sp/800-145/final)).
  prefs: []
  type: TYPE_NORMAL
- en: Another feature (not listed in the definition of NIST, but which is the basis
    of cloud computing) is the concept of virtualization. This is the possibility
    of executing multiple *OSes* on the same physical resources, guaranteeing numerous
    advantages, such as scalability, cost reduction, and greater speed in providing
    new resources to customers.
  prefs: []
  type: TYPE_NORMAL
- en: 'The most common approaches to virtualization are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Containers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Virtual machines
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Both solutions have almost the same advantages as far as the isolation of applications
    is concerned, but they work at different levels of virtualization because the
    containers virtualize the OS and the virtual machines virtualize the hardware. This
    means that the containers are more portable and efficient.
  prefs: []
  type: TYPE_NORMAL
- en: The most common application for virtualizing through containers is Docker. We
    will go through a brief introduction to this framework and we will see how to
    containerize (or dockerize) a Python application.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the cloud computing architecture
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The architecture of cloud computing refers to a series of components and sub-components
    that make up the structure of the system. Typically, it can be grouped into the
    two main sections of *F**rontend* and *B**ackend*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/ee53b3a7-0361-4d4e-a48a-b3e8ec8f6bb3.png)'
  prefs: []
  type: TYPE_IMG
- en: Cloud computing architecture
  prefs: []
  type: TYPE_NORMAL
- en: Each section has a very specific meaning and scope and is linked to the other
    via a virtual network or an internet network.
  prefs: []
  type: TYPE_NORMAL
- en: The *Frontend* refers to the part of the cloud computing system that is visible
    to the user, which is realized through a series of interfaces and applications
    that allow the consumer to access the cloud system. Different cloud computing
    systems have different UIs.
  prefs: []
  type: TYPE_NORMAL
- en: The *Backend* is the part that is not visible to the customer. This section
    contains all the resources that allow the provider to provide cloud computing
    services such as servers, storage systems, and virtual machines. The idea behind
    the creation of the backend is to entrust the management of the entire system
    to a single central server, which will, therefore, have to constantly monitor
    traffic and user requests, perform access control, and implement communication
    protocols.
  prefs: []
  type: TYPE_NORMAL
- en: Among the various components of this architecture, the most important is the
    Hypervisor, also called the*Virtual Machine Manager*. This is a firmware that
    allocates resources dynamically and also allows you to share a single instance
    among multiple users. In short, this is the program that realizes virtualization,
    which is one of the main attributes of cloud computing.
  prefs: []
  type: TYPE_NORMAL
- en: After providing a definition of cloud computing and explaining the essential
    features, we'll introduce the *service models* in which cloud computing services
    can be provided.
  prefs: []
  type: TYPE_NORMAL
- en: Service models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The cloud computing services offered by the providers fall into three broad
    categories:'
  prefs: []
  type: TYPE_NORMAL
- en: '**S**oftware as a Service (SaaS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**P**latform as a Service (PaaS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**I**nfrastructure as a Service (IaaS)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This classification led to the definition of a scheme that takes the name of
    the **SPI** model (see the **bold** initials in the previous list). Sometimes
    it is called the cloud computing stack, as these categories are based on each
    other.
  prefs: []
  type: TYPE_NORMAL
- en: A detailed description of each of these levels will now be given, following
    a top-down approach.
  prefs: []
  type: TYPE_NORMAL
- en: SaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A SaaS provider provides users with software applications on-demand, which are
    accessible through any internet device, such as a web browser. Furthermore, the
    provider hosts the software application and the underlying infrastructure, relieving
    the customer from the burden of management and maintenance activities such as
    software updates and the application of security patches.
  prefs: []
  type: TYPE_NORMAL
- en: There are many advantages of using this model for both the user and the provider.
    For the user, there is a considerable reduction in management costs, and for the
    provider, they have more control over the traffic, thus allowing them to avoid
    any overloads. An example of SaaS is any web-based email service, such as **Gmail**,
    **Outlook**, **Salesforce**and **Yahoo!**.
  prefs: []
  type: TYPE_NORMAL
- en: PaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Unlike SaaS, this service refers to the entire development environment of an
    application, not just its use. So, the PaaS solution provides a cloud platform
    that is accessible through a web browser for the development, testing, distribution,
    and management of software applications. Furthermore, the provider provides web-based
    interfaces, a multi-tenant architecture, and communication tools in order to allow
    developers to create applications in a simpler way. This supports the entire life
    cycle of the software and also favoring the cooperation.
  prefs: []
  type: TYPE_NORMAL
- en: Examples of PaaS are **Microsoft Azure Services**, **Google App Engine**,and
    **Amazon Web Services**.
  prefs: []
  type: TYPE_NORMAL
- en: IaaS
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: IaaS is a model that offers the computing infrastructure as an on-demand service.
    You can, therefore, purchase virtual machines, on which you can run your own software,
    storage resources (with the possibility of rapidly increasing or reducing the
    storage capacity based on your needs), networks, and OS by paying based on what
    you actually use. A dynamic infrastructure of this type adds greater scalability,
    while also significantly reducing costs.
  prefs: []
  type: TYPE_NORMAL
- en: This model is used both by small emerging companies that do not have large capital
    to invest and by established companies seeking to streamline their hardware architecture.
    The range of IaaS sellers is very wide, including **Amazon Web Services**, **IBM**,
    and **Oracle**.
  prefs: []
  type: TYPE_NORMAL
- en: Distribution models
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud computing architectures are not all the same. In fact, there are four
    different distribution models:'
  prefs: []
  type: TYPE_NORMAL
- en: '**The public cloud**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '****The private cloud****'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The cloud community**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**The hybrid cloud**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Public cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This distribution model is open to all, both individual users and companies.
    Typically, the public cloud runs in a data center owned by the service provider
    that handles hardware, software, and other support infrastructure. In this way,
    the user is exempt from any maintenance activities/expenses.
  prefs: []
  type: TYPE_NORMAL
- en: Private cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Also known as *internal clouds*, private clouds offer the same advantages as
    public clouds, but provide greater control over data and processes. This model
    is presented as a cloud infrastructure that works exclusively for a company and
    is therefore managed and hosted within the borders of the given company. Clearly,
    the organization that uses it can extend its architecture to any group that it
    is linked to by a business relationship.
  prefs: []
  type: TYPE_NORMAL
- en: By adopting this type of solution, possible problems concerning the violation
    of sensitive data and industrial espionage are avoided without neglecting the
    possibility of using a simplified, configurable, and high-performing working provisioning
    system. Precisely for this reason, in recent years, the number of companies that
    use the private cloud has increased significantly.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud community
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Conceptually, this model describes a shared infrastructure that is implemented
    and managed by several companies with common interests. This type of solution
    is rarely used because sharing the responsibilities and management activities
    among the various members of the community could become complicated.
  prefs: []
  type: TYPE_NORMAL
- en: Hybrid cloud
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: NIST defines this as the result of the composition of the three implementation
    models mentioned previously (the private, public, and community clouds), trying
    to take the advantages of each of the three in order to make up for where the
    others are weaker. The clouds used remain distinct entities, and this can cause
    a lack of operational consistency. Therefore, companies that adopt this model
    have the task of guaranteeing, through proprietary technologies, the interoperability
    of their servers, optimizing them for the specific roles they must play.
  prefs: []
  type: TYPE_NORMAL
- en: A feature that distinguishes the hybrid cloud from all others is the cloudburst
    or the possibility of being able to dynamically transfer excess traffic from the
    private cloud to the public cloud in the presence of large peak demand.
  prefs: []
  type: TYPE_NORMAL
- en: This implementation model is adopted by those companies that intend to share
    their software applications while retaining their sensitive data in internal clouds.
  prefs: []
  type: TYPE_NORMAL
- en: Cloud computing platforms
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Cloud computing platforms are sets of software and technologies that enable
    the delivery of resources in the cloud (on-demand, scalable, and virtualized resources). Among
    the most popular platforms are those of Google and, of course, the milestone of
    cloud computing: **Amazon Web Services** (**AWS**). Both support Python as a development
    language.'
  prefs: []
  type: TYPE_NORMAL
- en: However, in the next recipe, we will focus on PythonAnywhere, which is a cloud
    platform developed specifically for the deployment of web applications in the
    Python programming language.
  prefs: []
  type: TYPE_NORMAL
- en: Developing web applications with PythonAnywhere
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: PythonAnywhere is an online hosting development and service environment based
    on the Python programming language. Once registered on the site, you will be directed
    to the dashboard, which includes an advanced shell and text editor that is made
    entirely with HTML code. With this, you can create, modify, and execute your own
    scripts.
  prefs: []
  type: TYPE_NORMAL
- en: Moreover, this development environment also allows you to choose which version
    of Python to work with. In this, a simple wizard helps us to preconfigure an application.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's first see how to get login credentials to the site.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot shows the various types of subscriptions, and also,
    the possibility of obtaining a free account (please go to [https://www.pythonanywhere.com/registration/register/beginner/](https://www.pythonanywhere.com/registration/register/beginner/)):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/4696816c-2cbe-451c-869b-2f40d7795d20.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Registration page'
  prefs: []
  type: TYPE_NORMAL
- en: Once access to the site has been obtained (it is recommended that you create
    a beginner account), we log in. Given that the Python shells that are integrated
    into the browsers are very useful, especially for beginners and for introductory
    programming courses, they are certainly not new from a technological point of
    view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Instead, the added value of PythonAnywhere is perceived as soon as you log
    in by accessing the personal dashboard:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1154438e-ea7b-4dd5-aa09-ddb777bdf822.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Dashboard'
  prefs: []
  type: TYPE_NORMAL
- en: 'Through the personal dashboard, we can choose which version of Python to run
    between 2.7 and 3.7, with or without the IPython interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/e36f1f2e-0d04-4b54-88d6-6dbe567056e9.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Console view'
  prefs: []
  type: TYPE_NORMAL
- en: 'The number of consoles that can be used varies according to the type of subscription
    you have. In our case, having made a beginner account, we can use two Python consoles at
    most. Once selecting a Python shell, such as version 3.5, the following view should
    open on the web browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/53465f5a-186d-489c-9eab-fa193e4199c4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Python shell'
  prefs: []
  type: TYPE_NORMAL
- en: In the following section, we want to show you how to use PythonAnywhere to write
    a simple web application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'On the Dashboard, open the Web tab:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/688c7c96-c296-42e7-8da8-aefc386aff11.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Web app view'
  prefs: []
  type: TYPE_NORMAL
- en: 'The interface tells us that we don''t have a web application yet. By selecting
    Add a new web app, the following view opens. It tells us that our applications will
    have the following web address: [loginname.pythonanywhere.com](http://loginname.pythonanywhere.com)
    (for this example, the web address of the application will be [giazax.pythonanywhere.com](http://giazax.pythonanywhere.com)):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/db5b64c1-b102-47f4-b7f2-1eb5d8a79800.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Web app wizard'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on Next, we can select the Python web framework we want to use:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c2d207f8-18c7-4def-a938-e7528ea75290.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Web framework wizard'
  prefs: []
  type: TYPE_NORMAL
- en: 'We select Flask as a web framework, and then click on Next to choose which
    Python version we want to use, as shown here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e70bb841-e4bc-44ea-a3c1-6409acbcbf73.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Web framework wizard'
  prefs: []
  type: TYPE_NORMAL
- en: Flask is a micro-framework for Python that is easy to install and use, and is
    used by companies such as Pinterest and LinkedIn.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't know what a framework for creating web applications is, then you
    can imagine a set of programs with the aim of facilitating the creation of web
    services such as web servers and APIs. More information on Flask can be found
    at [http://flask.pocoo.org/docs/1.0/](http://flask.pocoo.org/docs/1.0/).
  prefs: []
  type: TYPE_NORMAL
- en: 'In the preceding screenshot, we select Python 3.5 for Flask 1.0.2, then let''s
    click on Next to enter the path for a Python file to use in order to hold the
    Flask application. Here, the default file is selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/cf31fec4-6cf0-4ff9-ad1c-214ce6194f2a.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Flask project definition'
  prefs: []
  type: TYPE_NORMAL
- en: 'When we click on Next for the final time, the following screen is displayed,
    which summarizes the web application''s configuration parameters:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/c3ca51d3-dc99-44e5-99bb-5c5196be8342.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Configuration page for giazax.pythonanywhere.com'
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see what happens with this.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In the address bar of the web browser, type the URL of our web application,
    in our case, `https://giazax.pythonanywhere.com/`. The site shows a simple welcome
    phrase:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/5e9035b6-5b9d-421d-8aa0-3c6ecb2b0dec.png)'
  prefs: []
  type: TYPE_IMG
- en: giazax.pythonanywhere.com site page
  prefs: []
  type: TYPE_NORMAL
- en: 'The source code for this application can be seen by selecting Go to directory
    in correspondence with the Source code label:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/df75e642-d6d0-48a7-8f8c-ed458c70f4dd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Configuration page'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, it is possible to analyze the files that make up the web application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/9d75d76e-4bb5-4a18-b904-3aabf59b9158.png)'
  prefs: []
  type: TYPE_IMG
- en: 'PythonAnywhere: Project site repository'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is also possible to upload new files and possibly modify the contents. Here,
    we select the `flask_app.py` file of our first web application. The content looks
    like a minimal Flask application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The `route()` decorator is used by Flask to define the URL that should trigger
    the `hello_world` function. This simple function returns the message displayed
    in the web browser.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The PythonAnywhere shell is made with HTML, making it virtually portable across
    multiple platforms and browsers, including Apple's mobile versions. It is possible
    to keep several shells open (in variable numbers according to the chosen account
    profile), share them with other users, or terminate them as needed.
  prefs: []
  type: TYPE_NORMAL
- en: PythonAnywhere has a rather advanced text editor with syntax coloring and automatic
    indentation, through which you can create, modify, and execute your own scripts.
    The files are stored in a storage area of varying size depending on the profile
    of the account, but if there is not enough space or if you wanted a more fluid
    integration with the filesystem of your PC, then PythonAnywhere allows you to
    use a Dropbox account, making your shared folder accessible on the popular storage
    service.
  prefs: []
  type: TYPE_NORMAL
- en: Each shell can contain a WSGI script that corresponds to a specific URL. It
    is also possible to start a bash shell from which to invoke Git and interact with
    the filesystem. Finally, as we have seen, there is a wizard available that allows
    us to preconfigure a **Django** and **web2py** or Flask application.
  prefs: []
  type: TYPE_NORMAL
- en: Furthermore, there is the possibility of exploiting a **MySQL** database, which
    is a series of cron jobs that allows us to execute certain scripts periodically.
    Therefore, we will get the true essence of PythonAnywhere*:* deployment of web
    applications at the speed of light.
  prefs: []
  type: TYPE_NORMAL
- en: '*PythonAnywhere* relies completely on the **Amazon EC2** infrastructure, so
    there should be no reason not to trust the service. For this reason, it is strongly
    recommended for those who think of making a personal use. The beginner account
    offers more resources than the corresponding one on **Heroku** ([https://www.heroku.com/](https://www.heroku.com/)),
    the deployment is simpler than on **OpenShift** ([https://www.openshift.com/](https://www.openshift.com/)),
    and the whole system is generally much more flexible than **Google App Engine**
    ([https://cloud.google.com/appengine/](https://cloud.google.com/appengine/)).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The main resources on PythonAnywhere can be found here: [https://www.pythonanywhere.com](https://www.pythonanywhere.com).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For web programming via Python, PythonAnywhere supports **Django** ([https://www.djangoproject.com/](https://www.djangoproject.com/))
    and **web2py** ([http://www.web2py.com/](http://www.web2py.com/)), in addition
    to **Flask**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As with **Flask**, it is recommended that you visit these sites for information
    on how to work with these libraries.
  prefs: []
  type: TYPE_NORMAL
- en: Dockerizing a Python application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containers are virtualization environments. They include everything that the
    software needs, namely libraries, dependencies, filesystems, and network interfaces.
    Unlike classic virtual machines, all the aforementioned elements share the kernel
    with the machine they are running on. In this way, the impact on the use of the
    resources of the host node is greatly reduced.
  prefs: []
  type: TYPE_NORMAL
- en: This makes the container a very attractive technology in terms of scalability,
    performance, and isolation. Containers are not young technology; they had success
    with the launch of Docker in 2013\. Since then, they have completely revolutionized
    the standards used for application development and management.
  prefs: []
  type: TYPE_NORMAL
- en: Docker is a container platform based on the implementation of **Linux Containers **(**LXC**),
    which extends the functionality of this technology with the ability to manage
    containers as self-contained images, and adds additional tools for coordinating
    their life cycle and saving their state.
  prefs: []
  type: TYPE_NORMAL
- en: The idea of containerization is precisely to allow a given application to be
    executed on any type of system since all its dependencies are already included
    in the container itself.
  prefs: []
  type: TYPE_NORMAL
- en: In this way, the application becomes highly portable and can be easily tested
    and deployed on any type of environment, both on-premises and, above all, in the
    cloud.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how to dockerize a Python application using Docker.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The Docker team''s intuition was to take the concept of a container and build
    an ecosystem around it that would simplify its use. This ecosystem includes a
    series of tools:'
  prefs: []
  type: TYPE_NORMAL
- en: Docker engine ([https://www.docker.com/products/docker-engine](https://www.docker.com/products/docker-engine))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Docker toolbox ([https://docs.docker.com/toolbox/](https://docs.docker.com/toolbox/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Swarm ([https://docs.docker.com/engine/swarm/](https://docs.docker.com/engine/swarm/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Kitematic ([https://kitematic.com/](https://kitematic.com/))
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing Docker for Windows
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The installation is quite simple: once you have downloaded the installer ([https://docs.docker.com/docker-for-windows/install/](https://docs.docker.com/docker-for-windows/install/)),
    just run it and you''re done. The installation process is generally very linear.
    The only thing that needs attention is the final phase of the installation, in
    which it might be required to enable Hyper-V features. If so, then we accept and
    restart the machine.'
  prefs: []
  type: TYPE_NORMAL
- en: Once the computer is restarted, the Docker icon should appear in the system
    tray in the bottom right of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: 'Open Command Prompt or the PowerShell console and check whether everything
    is okay by executing the `docker version` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The most interesting part of the output is the subdivision that is made between
    the client and the server. The client is our local Windows system, while the server
    is the Linux virtual machine that Docker instantiated behind the scenes. The parts
    communicate with each other thanks to the API layer, as mentioned in the introduction
    of this recipe.
  prefs: []
  type: TYPE_NORMAL
- en: Now, let's see how to containerize (or dockerize) a simple Python application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s imagine we want to deploy the following Python application, which we
    call `dockerize.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: The example application uses the `Flask` module. It implements a simple web
    application at the localhost address, `5000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first step is to create the following text file, with the extension of `.py`,
    which we will call `Dockerfile.py`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'The directives listed in the previous code perform the following tasks:'
  prefs: []
  type: TYPE_NORMAL
- en: '`FROM python: alpine3.7` instructs Docker to use Python version 3.7.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`COPY` copies the application into the container image.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`WORKDIR` sets the working directory (`WORKDIR`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `RUN` instruction calls the `pip` installer, pointing to the `requirements.txt` file.
    It contains the list of dependencies that the application must execute (in our
    case the only dependence is `flask`).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `EXPOSE` directive exposes to the port that is used by Flask.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, in summary, we have written three files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The application to be containerized: `dockerize.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Dockerfile`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The dependency list file
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'So, we need to create an image of the `dockerize.py` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: This will tag the `my-python-app` image and build it.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'After the `my-python-app` image is built, you can run it as a container:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The application is then started as a container, after which the name parameter
    sends the name to the container and the `-p` parameter maps the `5000` host port to
    the container port of `5000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, you need to open your web browser, then on the address bar, type `localhost:
    5000`. If everything worked the right way, then you should see the following web
    page:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbba23ab-e0cf-4174-9c0e-63b7b8a520b6.png)'
  prefs: []
  type: TYPE_IMG
- en: Docker application
  prefs: []
  type: TYPE_NORMAL
- en: Docker runs the `dockerize.py` container by using the `run` command, and the
    result is a web application. The image contains the instructions necessary for
    the operation of the container.
  prefs: []
  type: TYPE_NORMAL
- en: The correlation between container and image can be understood by referring to
    the object-oriented programming paradigm by associating the image with a class and
    the container with the class instance.
  prefs: []
  type: TYPE_NORMAL
- en: 'It is useful to recap what happens when we create an instance of a container:'
  prefs: []
  type: TYPE_NORMAL
- en: The image of the container is (if not already present) unloaded locally.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An environment in which to start the container is created.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A message is printed on the screen.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The previously created environment is then abandoned.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This all takes place in a few seconds and with a simple, intuitive, and readable
    command.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Apparently, containers and virtual machines seem to be very similar concepts.
    But although these two solutions have common characteristics, they are profoundly
    different technologies, in the same way, that we must start thinking about how
    the architectures of our applications are different. We can create a container
    with our monolithic application inside, but in this way, we will not fully exploit
    the strength of the containers, and therefore, of Docker.
  prefs: []
  type: TYPE_NORMAL
- en: A possible software architecture suitable for a container infrastructure is
    the classic microservice architecture. The idea is to break down the application
    into many small components—each with their own specific task—that are able to
    exchange messages and cooperate with each other. The deployment of these components
    will then take place individually, in the form of many containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'A scenario that can be handled with microservices is absolutely impractical
    with a virtual machine since every new virtual machine instantiated would require
    a good expenditure of energy for the host machine. Containers, on the other hand,
    are very light, since they carry out completely different virtualization from
    that practiced by virtual machines:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/f52f2b34-c17f-4138-80f4-e59f1fc1210e.png)'
  prefs: []
  type: TYPE_IMG
- en: Microservice architecture in virtual machine and Docker implementation
  prefs: []
  type: TYPE_NORMAL
- en: In virtual machines, a tool called a **Hypervisor** takes care of reserving
    (statically or dynamically) a certain amount of resources from the host OS to
    be dedicated to one or more OSes, called **guests** or **hosts**. A guest OS will
    be completely isolated from the host OS. This mechanism is very expensive in terms
    of resources, so the idea of combining a microservice with a virtual machine is
    completely impossible.
  prefs: []
  type: TYPE_NORMAL
- en: Containers, on the other hand, make a completely different contribution to the
    issue. The isolation is much blander and all the running containers share the
    same kernel as the underlying OS. Hypervisor overhead completely disappears, and
    a single host can host hundreds of containers.
  prefs: []
  type: TYPE_NORMAL
- en: 'When we ask Docker to run a container from its image, it must be present on
    the local disk, otherwise Docker will warn us of the problem (with a message reading
    Unable to find image ''hello-world: latest'' locally) and will download it autonomously.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To find out which images were downloaded from Docker on our computer, we use
    the `docker images` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The repository is a container of related images. For example, the dockerize
    repository contains various versions of the dockerize image. In the Docker world,
    the term **tag** is more correctly used to express the concept of image versioning.
    In the preceding code example, the image has been tagged as the latest and is
    the only tag available for the dockerize repository.
  prefs: []
  type: TYPE_NORMAL
- en: 'The latest tag is the default tag: whenever we refer to a repository without
    specifying the tag name, Docker will implicitly refer to the latest tag, and if
    this does not exist, then an error will be shown. Therefore, as a best practice,
    the repository tag form would be preferable as it allows greater predictability
    regarding the content of the image, avoiding possible conflicts between containers
    and errors due to the lack of the latest tag.'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Containertechnology is a very broad concept that can be explored by consulting
    numerous articles and examples of applications on the web. However, before starting
    this long and difficult journey, it is advisable to start from the website ([https://www.docker.com/](https://www.docker.com/)),
    which is complete and fully informative.
  prefs: []
  type: TYPE_NORMAL
- en: In the next section, we will examine the main features of serverless computing,
    whose main goal is to make it easier for a software developer to compose code
    that is designed to run on a cloud platform.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing serverless computing
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In recent years, a new service model named **Function as a Service** (**FaaS**) has
    been developed, which is also known as **serverless computing**.
  prefs: []
  type: TYPE_NORMAL
- en: Serverless computing is a cloud computing paradigm that allows the execution
    of applications without worrying about problems related to the underlying infrastructure.
    The term **serverless** could be misleading; in fact, it could be thought that
    this model does not foresee the use of processing servers. In reality, it indicates
    that the provisioning, scalability, and management of the servers on which the
    applications are executed are administered automatically and in a completely transparent
    manner for the developer. Everything is possible thanks to a new architecture
    model called **serverless**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first FaaS model dates back to **Amazon**, when the **AWS Lambda** service
    was released in 2014\. Over time, other alternatives were added to the Amazon
    solution, which were developed by other major vendors such as **Microsoft**, with
    its **Azure Functions**, and by **IBM** and **Google**, with their own **Cloud
    Functions**. There are also valid open source solutions: among the most commonly
    used, we have **Apache OpenWhisk**, which is used by **IBM** on **Bluemix** for
    its serverless offering, but also **OpenLambda** and **IronFunctions**, with the
    latter being based on Docker''s container technology.'
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we see how to implement a serverless Python function via **AWS
    Lambda**.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: AWS is a whole class of cloud services offered and administered through a common
    interface. The common interface through which the services are offered in the
    AWS web console is reachable at [https://console.aws.amazon.com/](https://console.aws.amazon.com/).
  prefs: []
  type: TYPE_NORMAL
- en: This type of service is charged. However, for the first year, a *free tier* is
    available. This a set of services use the minimum amount of resources and can
    be used for free to both evaluate the services and for the development of applications.
  prefs: []
  type: TYPE_NORMAL
- en: For details on how to create a free account with AWS, please refer to the official
    Amazon documentation at [https://aws.amazon.com](https://aws.amazon.com/).
  prefs: []
  type: TYPE_NORMAL
- en: In these sections, we will outline the basics of running code in AWS Lambda
    without having to provision or manage any servers. We will show how to create
    a `Hello World` function in Lambda by using the AWS Lambda console. We will also
    explain how to manually call up the Lambda function by using sample event data
    and how to interpret the output parameters. All the operations shown in this tutorial
    can be performed as part of the free plan at [https://aws.amazon.com/free](https://aws.amazon.com/free).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Let''s have a look at the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first thing to do is log in to the Lambda console ([https://console.aws.amazon.com/console/home](https://console.aws.amazon.com/console/home)).
    Then, you need to locate and select Lambda under compute in order to open the
    AWS Lambda console (which is highlighted in green in the following screenshot):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/e9d3929c-8fd7-49e4-ad1f-2f8a4f35040c.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS: Selecting a Lambda service'
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, in the AWS Lambda console, select Get Started Now and then create a Lambda
    function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/320f0ad3-408b-4960-9122-c930eb52b466.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS: Lambda start page'
  prefs: []
  type: TYPE_NORMAL
- en: In the filter box, type `hello-world-python` and select the hello-world-pythonblueprint.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Now we need to configure the Lambda function. The following list shows the
    configurations and provides example values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Configure function**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Name**: Enter the name of the function here. For this tutorial, enter `hello-world-python`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Description**: Here, you can enter a brief description of the function. This
    box is pre-filled with the phrase A starter AWS Lambda Function.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Runtime**: At the moment, it is possible to write the code of the Lambda
    function in Java, Node.js, and Python 2.7, 3.6, and 3.7\. For this tutorial, set
    up Python 2.7 as a runtime.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lambda function code**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see in the following screenshot, it is possible to review the Python
    sample code.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lambda function handler and role**:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Handler: You can specify a method in which AWS Lambda can start executing the
    code. AWS Lambda provides event data as input to the handler, which will process
    the events. In this example, Lambda identifies the event from the example code,
    so the field will be compiled with lambda_function.lambda_handler.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Role: Click on the drop-down menu and select Basic Execution Role:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/7743d286-d524-4125-9c76-5b27e8bb07ed.png)'
  prefs: []
  type: TYPE_IMG
- en: AWS Configure function page
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, it is necessary to create a role for execution (named IAM Role)
    with the necessary authorizations to be interpreted by AWS Lambda as the executor
    of the Lambda function. By clicking Allow, the Configure function page will be
    returned, and the lambda_basic_execution function will be selected:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/6a8575e9-23f0-41ac-952d-67f44104f573.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS: Role summary page'
  prefs: []
  type: TYPE_NORMAL
- en: 'The console saves the code in a compressed file, which represents the distribution
    package. The console then loads the distribution package into AWS Lambda to create
    the Lambda function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/60142c8f-cb80-4dc5-9fa2-cb8761f5164b.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS: Lambda review page'
  prefs: []
  type: TYPE_NORMAL
- en: 'It is now possible to test the functions, check the results, and display the
    logs:'
  prefs: []
  type: TYPE_NORMAL
- en: 'To run our first Lambda function, click on Test:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/1731dab3-8c0f-4dcd-8550-ecc283af3b75.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS: Lambda testing page'
  prefs: []
  type: TYPE_NORMAL
- en: Enter an event in the pop-up editor to test the function.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Select Hello World from the Sample event template list on the Input test event
    page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![](img/58d60050-f25e-4828-a340-6059c227b0ac.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS: Lambda template'
  prefs: []
  type: TYPE_NORMAL
- en: Click Save and test. Then, AWS Lambda will perform the function on your behalf.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When execution is complete, it is possible to see the results in the console:'
  prefs: []
  type: TYPE_NORMAL
- en: The Execution result section documents the correct execution of the function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Summary section shows the most important information reported in the Log
    output section.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The Log output section shows the logs generated by the Lambda function execution:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/12d7eb67-8089-4f9f-b9b1-9a75ab4becdd.png)'
  prefs: []
  type: TYPE_IMG
- en: 'AWS: Execution results'
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**AWS Lambda** monitors the functions and generates parameter reports automatically
    via **Amazon CloudWatch** (see the following screenshot). To simplify the monitoring
    of the code during execution, AWS Lambda automatically tracks the number of requests,
    the latency per request, and the number of requests with errors, publishing the
    associated parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/66a850ce-0883-45ed-ab46-5a2eb89214fb.png)'
  prefs: []
  type: TYPE_IMG
- en: What is a Lambda function?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A Lambda function contains code that a developer wants to execute in response
    to certain events. The developer takes care of configuring this code and specifying
    the requirements in terms of resources within the console of the reference provider.
    Everything else, including the sizing of resources, is managed automatically by
    the provider, based on the workload required.
  prefs: []
  type: TYPE_NORMAL
- en: Why serverless?
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The benefits of serverless computing are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**No infrastructure management:** Developers can focus on the product to be
    built rather than on the operation and management of runtime servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automatic scalability**: The resources are automatically recalibrated to
    cope with any type of workload, without requiring a configuration for scaling,
    but reacting to real-time events.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Resource use optimization:** Since the processing and storage resources are
    dynamically allocated, it is no longer necessary to invest in excess capacity
    in advance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Cost reduction**: In traditional cloud computing, payment of running resources
    is expected even when they are not actually used. In the serverless case, the
    applications are event-driven, meaning that when the application code is not running,
    no cost is charged, so you won''t have to pay for unused resources.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**High availability:** The services that manage the infrastructure and the
    application guarantee high availability and fault tolerance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Time to Market improvement:** The elimination of infrastructure management
    charges allows developers to focus on product quality and bring the code to production
    faster.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Possible problems and limitations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'There are some cons to take into consideration when evaluating the adoption
    of serverless computing:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Possible loss of performance:** If the code is not used very frequently,
    then latency problems may occur in its execution. These are prominent in comparison
    to cases in which it is in continuous execution on a server, a virtual machine,
    or a container. This happens because (contrary to what occurs when using autoscaling
    policies) with the serverless model, the cloud provider often deallocates resources
    completely if the code is not used. This implies that if the runtime takes some
    time to start, then additional latency is inevitably created in the initial start
    phase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Stateless mode**: Serverless functions operate in stateless mode. This means
    that if you want to add logic to save some elements, such as parameters to pass
    as arguments to a different function, then you need to add a persistent storage
    component to the application flow and link the events to each other. For example,
    Amazon provides an additional tool called **AWS Step Functions**, which coordinates
    and manages the status of all microservices and distributed components of serverless
    applications.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Limit to resources:** Serverless computing is not suitable for some types
    of workloads or use cases, particularly with high-performance ones and for the
    limits on the use of resources that are imposed by the cloud provider (for example,
    AWS limits the number of concurrent runs of Lambda functions). These are both
    due to the difficulty in provisioning the number of desired servers in a limited
    and fixed period of time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Debugging and monitoring:** If you rely on non-open source solutions, then
    the developers will depend on vendors for debugging and monitoring applications,
    and therefore, will not be able to diagnose any problems in detail by using additional
    profilers or debuggers. Thus, they will have to rely on the tools provided by
    their respective providers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we have seen, the reference point for working with serverless architectures
    is the AWS framework ([https://aws.amazon.com/](https://aws.amazon.com/)). At
    the preceding URL, you can find a lot of information and tutorials, including
    the example described in this section.
  prefs: []
  type: TYPE_NORMAL
