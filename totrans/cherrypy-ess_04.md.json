["```py\nconf = {'global': {'server.socket_port': 100100,\n'server.socket_host': 'localhost'}}\ncherrypy.config.update(conf)\ncherrypy.server.quickstart()\n\n```", "```py\nfrom cherrypy import _cpwsgi\n# Create a server on interface 1102.168.0.12 port 100100\ns1 = _cpwsgi.CPWSGIServer()\ns1.bind_addr = ('1102.168.0.12', 100100)\n# Create a server on interface 1102.168.0.27 port 4700\ns2 = _cpwsgi.CPWSGIServer()\ns2.bind_addr = ('1102.168.0.27', 4700)\n# Inform CherryPy which servers to start and use\ncherrypy.server.httpservers = {s1: ('1102.168.0.12', 100100),\ns2: ('1102.168.0.27', 4700)}\ncherrypy.server.start()\n\n```", "```py\ns1.socket_port = 100100\ns1.socket_host = '1102.168.0.12'\ns1.socket_file = ''\ns1.socket_queue_size = 5\ns1.socket_timeout = 10\ns1.protocol_version = 'HTTP/1.1'\ns1.reverse_dns = False\ns1.thread_pool = 10\ns1.max_request_header_size = 500 * 1024\ns1.max_request_body_size = 100 * 1024 * 1024\ns1.ssl_certificate = None\ns1.ssl_private_key = None\n\n```", "```py\nhttp://somehost.com/album/delete/12\n\n```", "```py\nalbum.delete(12)\n\n```", "```py\nhttp://somehost.com/album/12\n\n```", "```py\nDELETE /album/12 HTTP/1.1\n\n```", "```py\nclass Album:\nexposed = True\ndef GET(self, id):\n....\ndef POST(self, title, description):\n....\ndef PUT(self, id, title, description):\n....\ndef DELETE(self, id):\n....\n\n```", "```py\n{'/' : {'request.dispatch': cherrypy.dispatch.MethodDispatcher()}}\n\n```", "```py\nimport cherrypy\nclass Root:\ndef index(self):\nreturn \"Not much to say\"\ndef hello(self, name):\nreturn \"Hello %s\" % name\nif __name__ == '__main__':\nroot = Root()\n# Create an instance of the dispatcher\nd = cherrypy.dispatch.RoutesDispatcher()\n# connect a route that will be handled by the 'index' handler\nd.connect('default_route', '', controller=root)\n# connect a route to the 'hello' handler\n# this will match URIs such as '/say/hello/there'\n# but not '/hello/there'\nd.connect('some_other', 'say/:action/:name',\ncontroller=root, action='hello')\n# set the dispatcher\nconf = {'/': {'request.dispatch': d}}\ncherrypy.quickstart(root, '/', config=conf)\n\n```", "```py\nconnect(name, route, controller, **kwargs)\n\n```", "```py\nimport cherrypy\nclass Site:\ndef index(self):\nreturn \"Hello, world\"\nindex.exposed = True\nclass Forum:\ndef __init__(self, name):\nself.name = name\ndef index(self):\nreturn \"Welcome on the %s forum\" % self.name\nindex.exposed = True\nif __name__ == '__main__':\nsite = Site()\nsite.cars = Forum('Cars')\nsite.music = Forum('My Music')\nhostmap = {'www.ilovecars.com': '/cars',\n'www.mymusic.com': '/music',}\ncherrypy.config.update({'server.socket_port': 80})\nconf = {'/': {'request.dispatch': cherrypy.dispatch.VirtualHost(**hostmap)}}\ncherrypy.tree.mount(site, config=conf)\ncherrypy.server.quickstart()\ncherrypy.engine.start()\n\n```", "```py\n127.0.0.1 www.ilovecars.com\n127.0.0.1 www.mymusic.com\n\n```", "```py\ncherrypy.request.hooks.attach(point, callback, failsafe=None,\npriority=None, **kwargs)\n\n```", "```py\nimport sha\nimport cherrypy\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"\"\"<html>\n<head></head>\n<body>\n<a href=\"admin\">Admin area</a>\n</body>\n</html>\n\"\"\"\nclass Admin:\n@cherrypy.expose\ndef index(self):\nreturn \"This is a private area\"\nif __name__ == '__main__':\ndef get_users():\n# 'test': 'test'\nreturn {'test': 'a104a8fe5ccb110ba61c4c0873d3101e10871082fbbd3'}\ndef encrypt_pwd(token):\nreturn sha.new(token).hexdigest()\nconf = {'/admin': {'tools.basic_auth.on': True,\n'tools.basic_auth.realm': 'Some site',\n'tools.basic_auth.users': get_users,\n'tools.basic_auth.encrypt': encrypt_pwd}}\nroot = Root()\nroot.admin = Admin()\ncherrypy.quickstart(root, '/', config=conf)\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"\"\"<html>\n<head></head>\n<body>\n<form action=\"hello\" method=\"post\">\n<input type=\"text\" name=\"name\" value=\"\" />\n</form>\n</body>\n</html>\n\"\"\"\n@cherrypy.expose\n@tools.decode(encoding='ISO-88510-1')\ndef hello(self, name):\nreturn \"Hello %s\" % (name, )\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nimport cherrypy\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"\"\"<html>\n<head></head>\n<body>\n<a href=\"admin\">Admin area</a>\n</body>\n</html>\n\"\"\"\nclass Admin:\n@cherrypy.expose\ndef index(self):\nreturn \"This is a private area\"\nif __name__ == '__main__':\ndef get_users():\nreturn {'test': 'test'}\nconf = {'/admin': {'tools.digest_auth.on': True,\n'tools.digest_auth.realm': 'Some site',\n'tools.digest_auth.users': get_users}}\nroot = Root()\nroot.admin = Admin()\ncherrypy.quickstart(root, '/', config=conf)\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"\"\"<html>\n<head></head>\n<body>\n<form action=\"hello\" method=\"post\">\n<input type=\"text\" name=\"name\" value=\"\" />\n</form>\n</body>\n</html>\n\"\"\"\n@cherrypy.expose\n@tools.encode(encoding='ISO-88510-15')\ndef hello(self, name):\nreturn \"Hello %s\" % name\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"\"\"<html>\n<head></head>\n<body>\n<form action=\"hello\" method=\"post\">\n<input type=\"text\" name=\"name\" value=\"\" />\n</form>\n</body>\n</html>\n\"\"\"\n@cherrypy.expose\ndef hello(self, name):\nreturn \"Hello %s\" % name\nif __name__ == '__main__':\nconf = {'/': {'tools.etags.on': True,\n'tools.etags.autotags': True}}\ncherrypy.quickstart(Root(), '/', config=conf)\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\n@tools.gzip()\ndef index(self):\nreturn \"this will be compressed\"\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\n@tools.ignore_headers(headers=('Accept-Language',))\ndef index(self):\nreturn \"Accept-Language: %s\" \\\n% cherrypy.request.headers.get('Accept-Language',\n'none provided')\n@cherrypy.expose\ndef other(self):\nreturn \"Accept-Language: %s\" % cherrypy.request.headers.get('Accept-Language')\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nAccept-Language: none provided\n\n```", "```py\nAccept-Language: en-us,en;q=0.5\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nraise StandardError, \"Some sensible error message here\"\nif __name__ == '__main__':\ncherrypy.config.update({'global': {'tools.log_headers.on':\nTrue}})\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nraise StandardError, \"Some sensible error message here\"\nif __name__ == '__main__':\n# This tool is applied globally to the CherryPy process\n# by using the global cherrypy.config.update method.\ncherrypy.config.update({'global': {'tools.log_tracebacks.on':\nFalse}})\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"Base URL: %s %s \" % (cherrypy.request.base,\ncherrypy.url(''))\n@cherrypy.expose\ndef other(self):\nraise cherrypy.HTTPRedirect(cherrypy.url(''))\nif __name__ == '__main__':\nconf = {'global': {'tools.proxy.on': True,\n'tools.proxy.base': 'http://someapp.net/blog',\n'tools.proxy.local': ''}}\ncherrypy.config.update(conf)\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nBase URL: http://someapp.net/blog http://someapp.net/blog/\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn cherrypy.request.headers.get('Referer')\nif __name__ == '__main__':\nconf = {'/': {'tools.referer.on': True,\n'tools.referer.pattern': 'http://[^/]*dodgy\\.com',\n'tools.referer.accept': False}}\ncherrypy.quickstart(Root(), '/', config=conf)\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"Some text\"\n@cherrypy.expose\ndef other(self):\nreturn \"Some other text\"\nif __name__ == '__main__':\nconf = {'/': {'tools.response_headers.on': True,\n'tools.response_headers.headers': [('Content-Type',\n'text/plain')]}}\ncherrypy.quickstart(Root(), '/', config=conf)\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"This should have been redirected to add the trailing\nslash\"\n@cherrypy.expose\ndef nothing(self):\nreturn \"This should have NOT been redirected\"\nnothing._cp_config = {'tools.trailing_slash.on': False}\n@cherrypy.expose\ndef extra(self):\nreturn \"This should have been redirected to remove the\ntrailing slash\"\nextra._cp_config = {'tools.trailing_slash.on': True,\n'tools.trailing_slash.missing': False,\n'tools.trailing_slash.extra': True}\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nimport cherrypy\nfrom cherrypy import _cptools\nclass Root:\n@cherrypy.expose\ndef index(self):\nreturn \"Regular web page handler\"\nclass XMLRPCApp(_cptools.XMLRPCController):\n@cherrypy.expose\ndef echo(self, message):\nreturn message\nif __name__ == '__main__':\nroot = Root()\nroot.xmlrpc = XMLRPCApp()\ncherrypy.quickstart(root, '/')\n\n```", "```py\n>>> import xmlrpclib\n>>> s = xmlrpclib.ServerProxy('http://localhost:8080/xmlrpc')\n>>> s.echo('test')\n'test'\n\n```", "```py\nfrom cherrypy._cptools import Toolbox,\nmytb = Toolbox('mytb')\nmytb.xml_parse = Tool('before_handler', xmlparse)\nconf = {'/': {'mytb.xml_parse.on': True,\n'mytb.xml_parse.engine': 'amara'}}\n\n```", "```py\nTool(point, callable, name=None, priority=50)\n\n```", "```py\ncherrypy.tools.mytool = Tool('on_start_resource', mycallable)\n\n```", "```py\ndef mycallable(...):\nCherryPytools, creating....\nmycallable.failsafe = True\nmycallable.priority = 30\ncherrypy.tools.mytool = Tool('on_start_resource', mycallable)\n\n```", "```py\ncherrypy.tools.mytool = Tool('before_handler', mycallable)\n\n```", "```py\ncherrypy.tools.mytool = HandlerTool(mycallable)\n\n```", "```py\nclass Root:\nother = cherrypy.tools.mytool.handler()\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nCherryPytools, creatingfrom cherrypy import Tool\nfrom xml.parsers.expat import ExpatError\nfrom xml.sax._exceptions import SAXParseException\ndef xmlparse(engine='elementtree', valid_content_types=['text/xml',\n'application/xml'], param_name='doc'):\n# Transform the XML document contained in the request body into\n# an instance of the chosen XML engine.\n# Get the mime type of the entity sent by the user-agent\nct = cherrypy.request.headers.get('Content-Type', None)\n# if it is not a mime type we can handle\n# then let's inform the user-agent\nif ct not in valid_content_types:\nraise cherrypy.HTTPError(415, 'Unsupported Media Type')\n# CherryPy will set the request.body with a file object\n# where to read the content from\nif hasattr(cherrypy.request.body, 'read'):\ncontent = cherrypy.request.body.read()\ndoc = content\ntry:\nif engine == 'elementtree':\nfrom elementtree import ElementTree as ETX\ndoc = ETX.fromstring(content)\nelif engine == 'amara':\nimport amara\ndoc = amara.parse(content)\nexcept (ExpatError, SAXParseException):\nraise cherrypy.HTTPError(400, 'XML document not\nwell-formed')\n# inject the parsed document instance into\n# the request parameters as if it had been\n# a regular URL encoded value\ncherrypy.request.params[param_name] = doc\n# Create a new Tool and attach it to the default CherryPy toolbox\ntools.xml_parse = Tool('before_handler', xmlparse)\nclass Root:\n@cherrypy.expose\n@tools.xml_parse()\ndef echoet(self, doc):\nreturn doc.find('.//message').text\n@cherrypy.expose\n@tools.xml_parse(engine='amara', param_name='d')\ndef echoamara(self, d):\nreturn unicode(d.root.message)\nif __name__ == '__main__':\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\n>>> s = '<root><message>Hello!<message></root>'\n>>> headers = {'Content-Type': 'application/xml'}\n>>> import httplib\n>>> conn = httplib.HTTPConnection(\"localhost:8080\")\n>>> conn.request(\"POST\", \"/echoet\", s, headers)\n>>> r1 = conn.getresponse()\n>>> print r1.status, r1.reason\n200 OK\n>>> r1.read()\n'Hello!'\n>>> conn.request(\"POST\", \"/echoamara\", s, headers)\n>>> r1 = conn.getresponse()\n>>> print r1.status, r1.reason\n200 OK\n>>> r1.read()\n'Hello!'\n>>> conn.request(\"POST\", \"/echoamara\", s)\n>>> r1 = conn.getresponse()\n>>> print r1.status, r1.reason\n415 Unsupported Media Type\n>>> conn.close()\n\n```", "```py\napplication \\\nmyapp.py\ndesign1.css\n\n```", "```py\nbody {\nbackground-color: #86da12;\n}\n\n```", "```py\nimport cherrypy\nclass MyApp:\n@cherrypy.expose\ndef index(self):\nreturn \"\"\"<html>\n<head>\n<title>My application</title>\n<link rel=\"stylesheet\" href=\"css/style.css\" type=\"text/css\"></link>\n</head>\n<html>\n<body>\nHello to you.\nstatic resource servingsingle file, Staticfile tool used</body>\n</html>\"\"\"\nif __name__ == '__main__':\nimport os.path\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\ncherrypy.config.update({'environment': 'production',\n'log.screen': True})\nconf = {'/': {'tools.staticfile.root': current_dir},\n'/css/style.css': {'tools.staticfile.on': True,\n'tools.staticfile.filename':\n'design1.css'}}\ncherrypy.quickstart(MyApp(), '/my', config=conf)\n\n```", "```py\napplication \\\nmyapp.py\ndata \\\ndesign1.css\nsome.js\nfeeds \\\napp.rss\napp.atom\n\n```", "```py\nimport cherrypy\nclass MyApp:\n@cherrypy.expose\ndef index(self):\nreturn \"\"\"<html>\n<head>\n<title>My application</title>\n<link rel=\"stylesheet\" href=\"static/css/design1.css\"\ntype=\"text/css\"></link>\n<script type=\"application/javascript\"\nsrc=\"img/some.js\"></script>\n</head>\n<html>\n<body>\n<a href=\"feed/app.rss\">RSS 2.0 feed</a>\n<a href=\"feed/app.atom\">Atom 1.0 feed</a>\n</body>\n</html>\"\"\"\nstatic resource servingdirectory, Staticdir tool usedif __name__ == '__main__':\nimport os.path\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\ncherrypy.config.update({'environment': 'production',\n'log.screen': True})\nconf = {'/': {'tools.staticdir.root': current_dir},\n'/static/css': {'tools.gzip.on': True,\n'tools.gzip.mime_types':['text/css'],\n'tools.staticdir.on': True,\n'tools.staticdir.dir': 'data'},\n'/static/scripts': {'tools.gzip.on': True,\n'tools.gzip.mime_types':\n['application/javascript'],\n'tools.staticdir.on': True,\n'tools.staticdir.dir': 'data'},\n'/feed': {'tools.staticdir.on': True,\n'tools.staticdir.dir': 'feeds',\n'tools.staticdir.content_types':\n{'rss':'application/xml',\n'atom': 'application/atom+xml'}}}\ncherrypy.quickstart(MyApp(), '/', config=conf)\n\n```", "```py\nimport os.path\nimport cherrypy\nfrom cherrypy.lib.static import serve_file\nclass Root:\n@cherrypy.expose\ndef feed(self, name):\naccepts = cherrypy.request.headers.elements('Accept')\nfor accept in accepts:\nif accept.value == 'application/atom+xml':\nreturn serve_file(os.path.join(current_dir, 'feeds',\n'%s.atom' % name),\ncontent_type='application/atom+xml')\n# Not Atom accepted? Well then send RSS instead...\nreturn serve_file(os.path.join(current_dir, 'feeds',\n'%s.rss' % name),\ncontent_type='application/xml')\nif __name__ == '__main__':\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\ncherrypy.config.update({'environment': 'production',\n'log.screen': True})\ncherrypy.quickstart(Root(), '/')\n\n```", "```py\nimport cherrypy\nfrom paste.translogger import TransLogger\nWSGIWSGI application, hostingdef application(environ, start_response):\nstatus = '200 OK'\nresponse_headers = [('Content-type', 'text/plain')]\nstart_response(status, response_headers)\nreturn ['Hello world!\\n']\nif __name__ == '__main__':\ncherrypy.tree.graft(TransLogger(application), script_name='/')\ncherrypy.server.quickstart()\ncherrypy.engine.start()\n\n```", "```py\nimport cherrypy\nfrom paste.translogger import TransLogger\ndef application(environ, start_response):\nstatus = '200 OK'\nresponse_headers = [('Content-type', 'text/plain')]\nstart_response(status, response_headers)\nreturn ['Hello world!\\n']\nclass Root:\npass\nif __name__ == '__main__':\napp = TransLogger(application)\nconf = {'/': {'tools.wsgiapp.on': True,\n'tools.wsgiapp.app': app,\n'tools.gzip.on': True}}\ncherrypy.tree.mount(Root(), '/', config=conf)\ncherrypy.server.quickstart()\ncherrypy.engine.start()\n\n```", "```py\nimport cherrypy\nfrom cherrypy import tools\nfrom wsgiref.simple_server import make_server\nfrom flup.middleware.gzip import GzipMiddleware\nclass Root:\n@cherrypy.expose\n@tools.response_headers(headers=[('Content-Language', 'en-GB')])\ndef index(self):\nreturn \"Hello world!\"\nif __name__ == '__main__':\nwsgi_app = cherrypy.Application(Root(), script_name=\"/\")\ncherrypy.engine.start(blocking=False)\nhttpd = make_server('localhost', 8080, GzipMiddleware(wsgi_app))\nprint \"HTTP Serving HTTP on http://localhost:8080/\"\nhttpd.serve_forever()\n\n```"]