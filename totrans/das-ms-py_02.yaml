- en: Setting Up
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置环境
- en: In the previous chapter, we took a brief tour of the Python programming language.
    In this chapter, we will look at various ways to download and install the correct
    version of Python, then we will see how to run Python code. In the last couple
    of sections of this chapter, we'll see how to begin taking advantage of the wide
    variety of publicly available Python code that can be found on the internet.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们简要地游览了 Python 编程语言。在这一章中，我们将探讨各种下载和安装正确版本的 Python 的方法，然后我们将看到如何运行 Python
    代码。在本章的最后几节中，我们将看到如何开始利用互联网上广泛可用的各种 Python 代码。
- en: 'The topics covered in this chapter are as follows:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖的主题如下：
- en: Downloading and installing Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 下载和安装 Python
- en: Using the command line and the interactive shell
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用命令行和交互式外壳
- en: Installing packages with `pip`
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `pip` 安装包
- en: Finding packages in the Python package index
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Python 包索引中查找包
- en: Downloading and installing Python
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 下载和安装 Python
- en: The topic of this section is downloading and installing the Python runtime and
    standard library. For this, let's first take a look at the download page, [https://www.python.org/](https://www.python.org/),
    which is, of course, the authoritative place to find Python. You will learn a
    little bit about which versions of Python exist and the one we should choose for
    this book. Then, we'll move on to how to set up Python for this book. Finally,
    we'll check that everything worked the way we wanted.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 本节的主题是下载和安装 Python 运行时和标准库。为此，让我们首先查看下载页面，[https://www.python.org/](https://www.python.org/)，这是当然的，是找到
    Python 的权威地方。你将了解一些关于存在哪些 Python 版本以及我们应该为这本书选择哪个版本的信息。然后，我们将继续了解如何为这本书设置 Python。最后，我们将检查一切是否按预期工作。
- en: Before we can really begin working with Python, we need to make sure we've got
    the language interpreter and libraries properly installed. The first step for
    that is to decide which version of the language to install.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们真正开始使用 Python 之前，我们需要确保我们已经正确安装了语言解释器和库。为此，第一步是决定要安装哪个版本的 Python。
- en: Choosing a suitable version
  id: totrans-10
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 选择合适的版本
- en: There are currently two common varieties of Python in use. One of them is Python
    version 2.7, which is the final version of the Python 2 series. The Python community
    has promised to maintain version 2.7 independently, making it a very stable target
    for development. The other common version is Python 3, which at the time of writing
    this book is in version 3.6.
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: 目前有两种常见的 Python 版本在使用。其中之一是 Python 2.7，它是 Python 2 系列的最终版本。Python 社区承诺将独立维护
    2.7 版本，使其成为开发的一个非常稳定的靶子。另一个常见的版本是 Python 3，在撰写本书时，它是 3.6 版本。
- en: 'Python 3 is where the Python community is innovating. The releases are always
    backward compatible with earlier version 3 releases, but new exciting features
    are added regularly. During the change to version 3, the language in the libraries
    was changed in subtle ways, as you can see in the comparison of the following
    two code snippets:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Python 3 是 Python 社区进行创新的地方。发布版本始终与早期 3 版本的版本向后兼容，但会定期添加新的令人兴奋的功能。在版本 3 的转换过程中，库中的语言在细微之处发生了变化，正如你在以下两个代码片段的比较中可以看到：
- en: '![](img/1f3ca4c5-b741-4073-8f95-ec39be82d0dc.jpg)'
  id: totrans-13
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/1f3ca4c5-b741-4073-8f95-ec39be82d0dc.jpg)'
- en: In the preceding screenshot, on the left-hand side is Python 2 and on the right-hand
    side you see an equivalent code in Python 3\. They are almost the same, but have
    differences, such as placement of parentheses, a few keywords, and a slightly
    different structure than the standard library. You're free to pick whichever version
    or versions you want for your own projects, but for this book, we'll be using
    Python version 3.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的屏幕截图中，左侧是 Python 2，右侧你看到的是 Python 3 的等效代码。它们几乎相同，但有一些差异，例如括号的放置、几个关键字以及与标准库略有不同的结构。你可以自由选择你自己的项目想要的任何版本或版本，但在这本书中，我们将使用
    Python 版本 3。
- en: Now that we have picked the version, let's install it.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经选择了版本，让我们来安装它。
- en: Installing Python
  id: totrans-16
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 安装 Python
- en: If you're a Windows or Mac user, you can download an installer directly from
    the Python website ([https://www.python.org/downloads/](https://www.python.org/downloads/)).
    Pick the installer appropriate for your computer, download it, and run it for
    any platform. We also have the option of downloading the source code, compiling
    it, and installing Python that way.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你使用Windows或Mac，可以直接从Python网站下载安装程序（[https://www.python.org/downloads/](https://www.python.org/downloads/)）。选择适合你电脑的安装程序，下载并运行它。我们还有选择下载源代码、编译它并通过这种方式安装Python的选项。
- en: Unix and Linux users, as well as Mac users who prefer it, have the option to
    install Python through their package manager instead. For systems which integrate
    a package manager, this is probably the best and easiest choice. If we use the
    package manager, this next part is probably already done, otherwise we need to
    make sure that the Python programs are able to run from the command line.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: Unix和Linux用户，以及喜欢它们的Mac用户，可以选择通过他们的包管理器安装Python。对于集成了包管理器的系统，这可能是最好和最简单的方法。如果我们使用包管理器，这部分可能已经完成，否则我们需要确保Python程序可以从命令行运行。
- en: 'On macOS and Unix-like operating systems, all we need is to add a line to the
    profile or the `bashrc` file in our home directory:'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在macOS和类Unix操作系统中，我们只需要在我们的主目录中的配置文件或`bashrc`文件中添加一行：
- en: 'macOS X (edit `~/.profile`):'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'macOS X（编辑`~/.profile`）:'
- en: '[PRE0]'
  id: totrans-21
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Unix/Linux (edit `~/.bashrc`):'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Unix/Linux（编辑`~/.bashrc`）:'
- en: '[PRE1]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Windows:'
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 'Windows:'
- en: Open Advanced System Settings in Control Panel.
  id: totrans-25
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在控制面板中打开高级系统设置。
- en: Click on Environments Variables....
  id: totrans-26
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 点击环境变量...
- en: Edit PATH.
  id: totrans-27
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑PATH。
- en: Add `;<pydir>` at the end.
  id: totrans-28
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在末尾添加`;<pydir>`。
- en: Windows is only slightly more involved, as you'll need to open up the Control
    Panel and locate the Environment Variables screen. In each of the preceding examples,
    `pydir` is the directory where you installed Python—`C:\python36`, for example.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Windows的设置稍微复杂一些，因为你需要打开控制面板并找到环境变量屏幕。在每个先前的例子中，`pydir`是你安装Python的目录——例如`C:\python36`。
- en: Once we've got the path environment variable set, we should be good to go. To
    check that-open a Terminal window (Command Prompt on Windows) and type `Python`,
    then hit *Enter.* If you don't know how to open the Terminal, don't worry, we'll
    talk about that in more detail in the next chapter.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们设置了路径环境变量，我们就应该可以开始了。为了检查这一点，请打开终端窗口（Windows上的命令提示符）并输入`Python`，然后按*Enter*。如果你不知道如何打开终端，不要担心，我们将在下一章中更详细地讨论这个问题。
- en: Also, if you are a Unix user and you do not receive the correct result, it is
    potentially because the `bashrc` file or profile has not been executed yet. You
    may need to log out and log back in again.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，如果你是Unix用户并且没有得到正确的结果，那可能是因为`bashrc`文件或配置文件还没有执行。你可能需要注销并重新登录。
- en: If the Python interactive shell starts up when we type `python` into the Terminal,
    we're good to go. If it doesn't, go back to double-check the changes that we made
    to the path environment variable because that's the piece that tells the operating
    system where to look for programs.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们在终端中输入`python`时Python交互式shell启动了，那么我们就准备好了。如果没有，请返回检查我们修改的路径环境变量，因为这是告诉操作系统在哪里查找程序的部件。
- en: That's it for setting up.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 设置工作就到这里了。
- en: If you're feeling adventurous, you can experiment with the interactive shell
    that we just started up. Try typing in mathematical expressions and see what happens.
    In the next section, we'll look more closely at running Python code using the
    command line and the interactive shell.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你感到好奇，可以尝试使用我们刚刚启动的交互式shell进行实验。试着输入数学表达式，看看会发生什么。在下一节中，我们将更详细地探讨如何使用命令行和交互式shell运行Python代码。
- en: Using the command line and the interactive shell
  id: totrans-35
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用命令行和交互式shell
- en: Since, we looked at installing Python, let's try our hand at making Python actually
    do things using the textual interface.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经看了如何安装Python，那么让我们尝试使用文本界面让Python真正做一些事情。
- en: Text-based user interfaces are very useful to programmers; they provide a quick
    and easy way to interact with programs while they're in development, experiment
    with code (which is, after all, text), and access documentation.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 基于文本的用户界面对程序员非常有用；它们提供了在开发过程中快速轻松地与程序交互、实验代码（毕竟，代码是文本）以及访问文档的便捷方式。
- en: Opening a command-line window
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 打开命令行窗口
- en: How you open a command-line window depends on the operating system you're using.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 打开命令行窗口的方法取决于你使用的操作系统。
- en: On Windows 7, open the Start menu and type `CMD` into the Run box.
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在Windows 7中，打开开始菜单，在运行框中输入`CMD`。
- en: In Windows 8, press the Windows key and then type `CMD` and select Command Prompt.
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 8 上，按 Windows 键，然后输入 `CMD` 并选择命令提示符。
- en: On Windows 10, press the Windows key and select Command Prompt.
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Windows 10 上，按 Windows 键并选择命令提示符。
- en: On macOS, navigate to Applications | Utilities | Terminal.
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 macOS 上，导航到应用程序 | 工具 | 终端。
- en: On Linux or other Unix-style operating systems, the precise mechanism for opening
    a command-line window varies, but they all have the ability to do it; look for
    the words **xterm**, **terminal**, or **shell**.
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在 Linux 或其他类 Unix 操作系统上，打开命令行窗口的精确机制各不相同，但它们都有这个能力；寻找 **xterm**、**终端** 或 **shell**
    等词语。
- en: Python interactive shell
  id: totrans-45
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 交互式外壳
- en: Now that we've got a command-line window, we'll go straight into the Python
    interactive shell. We do that by typing `python` into the command-line window.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经打开了一个命令行窗口，我们将直接进入 Python 交互式外壳。我们通过在命令行窗口中输入 `python` 来做到这一点。
- en: 'If you have multiple versions of Python installed and we want to interact with
    a specified version, we can explicitly choose the version from the command line
    by typing in that version''s name. For example, if we type `python3`, we''ll explicitly
    start up some version of Python 3.X:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你安装了多个版本的 Python，并且我们想要与指定版本进行交互，我们可以在命令行中通过输入该版本名称来显式选择版本。例如，如果我们输入 `python3`，我们将显式启动某个
    Python 3.X 版本：
- en: '![](img/16ae283a-24ca-425e-a888-8bf482fe5b68.jpg)'
  id: totrans-48
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/16ae283a-24ca-425e-a888-8bf482fe5b68.jpg)'
- en: The `python3` command is used for Linux users. Windows users should type `python`
    command line to work.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`python3` 命令用于 Linux 用户。Windows 用户应该输入 `python` 命令行来工作。'
- en: Now, the fun really starts!
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，真正的乐趣才刚刚开始！
- en: 'When we see the `>>>` prompt, we can type in any Python expression or statement
    and see the result immediately (as shown in the following screenshot of code example):'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们看到 `>>>` 提示符时，我们可以输入任何 Python 表达式或语句并立即看到结果（如下面的代码示例截图所示）：
- en: '![](img/2ed6e9bf-cb76-4cad-a787-dace92e0f2c8.jpg)'
  id: totrans-52
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/2ed6e9bf-cb76-4cad-a787-dace92e0f2c8.jpg)'
- en: This is incredibly useful because it means that we don't have to remember every
    detail about how functions work, what class members are called, which exceptions
    are raised under what circumstances, and so on. Whenever we're unsure about something,
    we can just open up an interactive shell and find out. So, let's discuss this
    using a simple example.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 这非常实用，因为它意味着我们不必记住函数如何工作的每一个细节，类成员如何被调用，在什么情况下会引发哪些异常等等。当我们对某事不确定时，我们只需打开一个交互式外壳并查找答案。所以，让我们用一个简单的例子来讨论这个问题。
- en: 'Let''s imagine we''re working on an application that uses Python''s `set` data
    type and we''re unsure about what exception gets raised. When we try to add a
    set to itself, we could go digging through the documentation, but it''s quicker
    and easier to just create a set in the interactive shell and try adding it to
    itself:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们假设我们正在开发一个使用 Python 的 `set` 数据类型的应用程序，并且我们不确定会引发什么异常。当我们尝试将一个集合添加到自身时，我们可能需要查阅文档，但直接在交互式外壳中创建一个集合并尝试将其添加到自身会更快捷、更简单：
- en: '![](img/41d5cd51-a8a6-4ee5-b4f1-4fd81a7164d4.jpg)'
  id: totrans-55
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/41d5cd51-a8a6-4ee5-b4f1-4fd81a7164d4.jpg)'
- en: Right away, the system tells us that adding a set to itself raises a `TypeError`
    exception. Sometimes, running a quick experiment in the interactive shell is the
    fastest way to get information we want, but documentation is nice too.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 立即，系统告诉我们将一个集合添加到自身会引发 `TypeError` 异常。有时，在交互式外壳中快速进行实验是我们获取所需信息的最快方式，但文档也很不错。
- en: 'Fortunately, Python has a very good documentation system that we can access
    straight from the interactive shell by calling the `help` function. We could pass
    any object as the parameter of the `help` function and it will print out that
    object''s documentation for us. So, if we want to find out about `functools.wraps`,
    we just pass it to help using the following two commands and read all about it
    (refer to the following screenshot):'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，Python 有一个非常好的文档系统，我们可以通过调用 `help` 函数直接从交互式外壳中访问它。我们可以将任何对象作为 `help` 函数的参数传递，它将为我们打印出该对象的文档。所以，如果我们想了解
    `functools.wraps`，我们只需使用以下两个命令将其传递给 help 并阅读所有相关信息（参考以下截图）：
- en: '[PRE2]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: '![](img/24bbbba0-16b3-4af4-8cbf-3cc53860f1e5.jpg)'
  id: totrans-59
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24bbbba0-16b3-4af4-8cbf-3cc53860f1e5.jpg)'
- en: 'The `help` function can also take the name of the object you want to read about
    instead of the object itself using the following code:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`help` 函数也可以使用以下代码代替对象本身来读取对象的名称：'
- en: '[PRE3]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This format can save us the time of typing in an `import` statement in the
    interactive shell:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这种格式可以节省我们在交互式外壳中输入 `import` 语句的时间：
- en: '![](img/76ae9dbb-6911-48ae-baa9-656fa87e2033.jpg)'
  id: totrans-63
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/76ae9dbb-6911-48ae-baa9-656fa87e2033.jpg)'
- en: The difference is that the `help` parameter is a string and not an expression
    that evaluates to the object we're interested in.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 不同之处在于`help`参数是一个字符串，而不是一个评估为我们感兴趣的对象的表达式。
- en: Installing packages with pip
  id: totrans-65
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用pip安装包
- en: In this section, we'll take a look at using Python's package manager to install
    and manage third-party code, and now, it's back to the operating system command
    line for us. We'll see how to easily install third-party code from the Python
    Package Index.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将探讨使用Python包管理器来安装和管理第三方代码，现在，我们将回到操作系统命令行。我们将看到如何轻松地从Python包索引中安装第三方代码。
- en: While Python comes with batteries included, that is, the Python standard library
    that's already installed contains a wide range of very useful features, there's
    still plenty of things it doesn't do. Odds are though that somebody somewhere
    has already invented the wheel for us and if so, we can probably find it in the
    Python Package Index.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然Python自带了电池（即已经安装的标准库包含了许多非常有用的功能），但仍然有许多事情它做不到。不过，很可能某个人在某处已经为我们发明了轮子，如果这样的话，我们很可能在Python包索引中找到它。
- en: The pip tool for packages
  id: totrans-68
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 包的pip工具
- en: Python, from version 3.4 onwards, is installed with a tool called `pip`, which
    can interface with the Python Package Index to automatically find, download, and
    install Python packages. If you already know the name of the package you want,
    and you have permission to write into Python's library directory, then this relatively
    simple command will get it fully installed and ready to be used.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 从Python 3.4版本开始，Python通过名为`pip`的工具进行安装，它可以与Python包索引接口，自动查找、下载和安装Python包。如果你已经知道你想要安装的包名，并且你有权限写入Python的库目录，那么这个相对简单的命令就可以将其完全安装并准备好使用。
- en: 'In this instance, we installed a package called `banknumber`, which checks
    if someone''s bank number is a valid bank number or is just a random number. For
    this, just add the `python3 -m pip install banknumber` command and hit *Enter;*
    we''ll get the information as shown in the following screenshot:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，我们安装了一个名为`banknumber`的包，该包检查某个人的银行账号是否是有效的银行账号或只是一个随机数。为此，只需添加`python3
    -m pip install banknumber`命令并按*Enter*；我们就会得到以下截图所示的信息：
- en: '![](img/bbef48a4-9085-45b1-82a9-4d64db8fed3d.jpg)'
  id: totrans-71
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/bbef48a4-9085-45b1-82a9-4d64db8fed3d.jpg)'
- en: If we don't have permission to Python's library directory, never fear. Python
    will look for a second user-specific library directory and since that library
    directory belongs to us, we'll always be able to install packages there.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们没有权限访问Python的库目录，不必担心。Python会寻找第二个用户特定的库目录，由于那个库目录属于我们，我们总是能够在那里安装包。
- en: 'To tell pip that we want to install into our personal library directory, just
    add `--user` to the command right after `install`. In the following screenshot,
    we are installing the `requests` package into our personal directory:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 要告诉pip我们将要安装到个人库目录中，只需在`install`命令后直接添加`--user`即可。在下面的截图里，我们正在将`requests`包安装到我们的个人目录中：
- en: '![](img/24f99b52-e57e-4363-826c-1fd5cb327b5a.jpg)'
  id: totrans-74
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/24f99b52-e57e-4363-826c-1fd5cb327b5a.jpg)'
- en: Managing installed packages
  id: totrans-75
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 管理已安装的包
- en: 'The `pip` tool can do more than just installing packages. It can also give
    us the following:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: '`pip`工具不仅能安装包，还能提供以下功能：'
- en: 'A list of currently installed packages using the `-m pip list` command:'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-m pip list`命令查看当前已安装的包列表：
- en: '![](img/c6ee8621-57cd-48a4-8969-2360376979d8.png)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/c6ee8621-57cd-48a4-8969-2360376979d8.png)'
- en: 'Upgrade currently installed packages to the newest version using the `-m pip
    install --upgrade` command:'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-m pip install --upgrade`命令升级当前已安装的包到最新版本：
- en: '![](img/86cb1873-6787-41f4-a217-f078c6281c79.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/86cb1873-6787-41f4-a217-f078c6281c79.jpg)'
- en: 'Uninstall packages that we don''t need anymore using the `-m pip uninstall`
    command. For example, if we want to uninstall the `banknumber` package, we can
    do it by using the following command, shown in this screenshot:'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`-m pip uninstall`命令卸载我们不再需要的包。例如，如果我们想卸载`banknumber`包，我们可以通过以下命令来完成，如截图所示：
- en: '![](img/83729f04-b963-4d4e-aacf-e9e20bd7798c.jpg)'
  id: totrans-82
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/83729f04-b963-4d4e-aacf-e9e20bd7798c.jpg)'
- en: In short, it's a complete cross-platform management tool for Python packages.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 简而言之，这是一个适用于Python包的完整跨平台管理工具。
- en: Some Python packages require that we be able to compile extensions written in
    the C programming language to install them, but fortunately that's becoming rare.
    Normally, if the compiled extension is required, pip will be able to find and
    install the proper precompiled version automatically. The majority of available
    packages are pure Python anyhow and don't require compilation.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 一些 Python 包要求我们能够编译用 C 编程语言编写的扩展才能安装，但幸运的是这种情况越来越少了。通常，如果需要编译的扩展，pip 将能够自动找到并安装适当的预编译版本。大多数可用的包都是纯
    Python，不需要编译。
- en: 'The pip tool has many more great options and command-line switches, but what
    we''ve seen so far covers the common situations well. If you want to dig into
    it further, pip''s `help` command will give you the details. For example, consider
    the following command:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: pip 工具有许多更多优秀的选项和命令行开关，但我们迄今为止所看到的已经很好地覆盖了常见情况。如果您想进一步了解，pip 的 `help` 命令将提供详细信息。例如，考虑以下命令：
- en: '[PRE4]'
  id: totrans-86
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'The preceding command prints out all the information you could possibly want
    about the `pip install` option:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令打印出有关 `pip install` 选项的所有可能信息：
- en: '![](img/38c3806d-6ab5-434e-b490-b1a3a2aec68c.jpg)'
  id: totrans-88
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/38c3806d-6ab5-434e-b490-b1a3a2aec68c.jpg)'
- en: So, now that we know how to install third-party packages using `pip`, how do
    we go about actually finding packages to install in the first place?
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 那么，既然我们已经知道了如何使用 `pip` 安装第三方包，我们该如何去寻找最初要安装的包呢？
- en: Finding packages in the Python Package Index
  id: totrans-90
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在 Python 包索引中查找包
- en: Earlier, we talked about installing packages from the Python Package Index,
    but what if we don't have a specific package we need to install? What if we just
    need a library to help us get the job done, but don't know which specific one
    we need? Well, as the name of the section implies, the Python Package Index is
    actually an index of packages, which classifies the packages according to a number
    of parameters. The index is conveniently hosted at [https://pypi.python.org/pypi](https://pypi.python.org/pypi).
    We could search the available packages in a number of ways. Let's discuss it in
    detail.
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 之前，我们讨论了从 Python 包索引中安装包，但如果我们没有需要安装的特定包怎么办？如果我们只需要一个库来帮助我们完成任务，但不知道具体需要哪个呢？嗯，正如本节标题所暗示的，Python
    包索引实际上是一个包索引，它根据多个参数对包进行分类。索引方便地托管在 [https://pypi.python.org/pypi](https://pypi.python.org/pypi)。我们可以通过多种方式搜索可用的包。让我们详细讨论一下。
- en: Using keywords
  id: totrans-92
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用关键字
- en: Perhaps, the most useful way of accessing the index is to simply type keywords
    into the search box and see what it spits out.
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 可能，访问索引最有用的方法就是简单地输入关键字到搜索框，看看它会输出什么。
- en: If we ask to search for `asyncio`, we get back a collection of package names
    that have something to do with `asyncio`. The names are, of course, links to each
    package's detailed description on the index, which we can use to decide which
    package best suits our needs.
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要求搜索 `asyncio`，我们会得到一系列与 `asyncio` 有关的包名。当然，这些名称是链接到每个包在索引中的详细描述，我们可以使用这些描述来决定哪个包最适合我们的需求。
- en: There's another way of accessing the index that is often nearly as useful as
    keyword searching and sometimes even more useful.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 有另一种访问索引的方法，这种方法通常与关键字搜索一样有用，有时甚至更有用。
- en: Using Package Index
  id: totrans-96
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用包索引
- en: The Python Package Index supports browsing through its **Package Index** by
    category.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: Python 包索引支持通过类别浏览其**包索引**。
- en: You start browsing by clicking on the Browse packages link in the menu, which
    brings you to the list of different categories. From there, you can select one
    or more categories by clicking on them and you'll be shown a list of the packages
    that fall into all of your selected categories, if the list is short enough to
    be useful.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过点击菜单中的“浏览包”链接开始浏览，这将带您到不同类别的列表。从那里，您可以点击它们来选择一个或多个类别，如果列表足够短，您将看到属于您所选所有类别的包列表。
- en: If you don't get a list of packages, it's because the list would be so long
    that it wouldn't do you any good and you should select more categories to narrow
    it down. If a category disappears from the list while you're selecting, it means
    that there are no packages that run all your selected categories.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您没有获得包列表，那是因为列表会如此之长，以至于对您没有任何帮助，您应该选择更多类别来缩小范围。如果在您选择的过程中某个类别从列表中消失，这意味着没有任何包能够在您所选的所有类别中运行。
- en: Python is not only written in English or used by people who prefer this language,
    but some packages also have good support for other languages. This list is a good
    way to find them, whereas keyword searching might not pick up on that kind of
    detail.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: Python 不仅是用英语编写的或被喜欢这种语言的人使用，而且一些包也提供了对其他语言的良好支持。这个列表是找到它们的好方法，而关键字搜索可能无法捕捉到这种细节。
- en: Searching the Package Index with pip
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 pip 搜索包索引
- en: 'If we don''t want to fire up our browser to go searching through the index,
    we can also do it from the command line through `pip`, as shown in the following
    command:'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们不希望打开浏览器去搜索索引，我们也可以通过命令行使用 `pip` 来完成，如下面的命令所示：
- en: '[PRE5]'
  id: totrans-103
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'This command performs the same search that we did earlier through the web interface:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令执行了我们在网页界面中之前所做的相同搜索：
- en: '![](img/285a601f-a5b8-43aa-a08c-1cc84afe06bd.png)'
  id: totrans-105
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/285a601f-a5b8-43aa-a08c-1cc84afe06bd.png)'
- en: Doing it this way is often faster; but as you can see in the preceding screenshot,
    it only provides us with a name and a brief description of each package. This
    is perfect for getting a quick reminder about the package name, but not so good
    for more in-depth research.
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 以这种方式操作通常更快；但如您在先前的截图中所见，它只提供了每个包的名称和简要描述。这对于快速提醒包名称非常完美，但对于更深入的研究则不太适用。
- en: Legalities and licenses of the Python Package Index
  id: totrans-107
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 包索引的合法性和许可证
- en: Finally, a quick note about legalities and licenses!
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，关于合法性和许可证的简要说明！
- en: The vast majority of packages in the Python Package Index are under open-source
    licenses as certified by the **Open Source Institute** (**OSI**). This means basically
    that they can be freely used and distributed as part of other open-source projects.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: Python 包索引中的绝大多数包都受到开源机构（**Open Source Institute**，**OSI**）认证的开源许可证的约束。这意味着基本上它们可以自由地作为其他开源项目的一部分被使用和分发。
- en: In most cases, the licenses are more liberal than this, allowing us to use the
    software as part of our projects, even if we don't open source our own code.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 在大多数情况下，许可证比这更宽松，允许我们将软件作为我们项目的一部分使用，即使我们不开源我们的代码。
- en: Most does not mean all, however some of the packages are not under OSI certified
    licenses and some of OSI licensed packages are not usable in closed-source projects.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数并不意味着全部，然而一些包不在 OSI 认证的许可证之下，而一些 OSI 许可证的包在封闭源代码项目中不可用。
- en: So, if you're going to be distributing your software, take a moment to make
    sure the licenses line up with your goals.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，如果您打算分发您的软件，请花点时间确保许可证与您的目标一致。
- en: Summary
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we learned how to install Python and get to a place where we
    can begin working on real code. We looked at running Python in a command-line
    window and using it to perform experiments and calculations. We examined how to
    make the best of Python's command line and its extensive `help` library.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们学习了如何安装 Python 并到达一个可以开始编写真实代码的位置。我们探讨了如何在命令行窗口中运行 Python 以及如何用它来进行实验和计算。我们还研究了如何充分利用
    Python 的命令行及其广泛的 `help` 库。
- en: We learned about installing, uninstalling, and upgrading the packages using
    `pip`. We also got a pretty good idea of how to find third-party code to help
    us move our projects along, using the Python Package Index.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 我们学习了如何使用 `pip` 安装、卸载和升级包。我们还对如何通过 Python 包索引找到第三方代码以帮助我们推进项目有了相当的了解。
- en: In the next chapter, we'll work through the steps to create and work with our
    own Python code packages.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将逐步学习如何创建和使用我们自己的 Python 代码包。
