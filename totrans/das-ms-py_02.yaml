- en: Setting Up
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapter, we took a brief tour of the Python programming language.
    In this chapter, we will look at various ways to download and install the correct
    version of Python, then we will see how to run Python code. In the last couple
    of sections of this chapter, we'll see how to begin taking advantage of the wide
    variety of publicly available Python code that can be found on the internet.
  prefs: []
  type: TYPE_NORMAL
- en: 'The topics covered in this chapter are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Downloading and installing Python
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the command line and the interactive shell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing packages with `pip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Finding packages in the Python package index
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Downloading and installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The topic of this section is downloading and installing the Python runtime and
    standard library. For this, let's first take a look at the download page, [https://www.python.org/](https://www.python.org/),
    which is, of course, the authoritative place to find Python. You will learn a
    little bit about which versions of Python exist and the one we should choose for
    this book. Then, we'll move on to how to set up Python for this book. Finally,
    we'll check that everything worked the way we wanted.
  prefs: []
  type: TYPE_NORMAL
- en: Before we can really begin working with Python, we need to make sure we've got
    the language interpreter and libraries properly installed. The first step for
    that is to decide which version of the language to install.
  prefs: []
  type: TYPE_NORMAL
- en: Choosing a suitable version
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are currently two common varieties of Python in use. One of them is Python
    version 2.7, which is the final version of the Python 2 series. The Python community
    has promised to maintain version 2.7 independently, making it a very stable target
    for development. The other common version is Python 3, which at the time of writing
    this book is in version 3.6.
  prefs: []
  type: TYPE_NORMAL
- en: 'Python 3 is where the Python community is innovating. The releases are always
    backward compatible with earlier version 3 releases, but new exciting features
    are added regularly. During the change to version 3, the language in the libraries
    was changed in subtle ways, as you can see in the comparison of the following
    two code snippets:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/1f3ca4c5-b741-4073-8f95-ec39be82d0dc.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding screenshot, on the left-hand side is Python 2 and on the right-hand
    side you see an equivalent code in Python 3\. They are almost the same, but have
    differences, such as placement of parentheses, a few keywords, and a slightly
    different structure than the standard library. You're free to pick whichever version
    or versions you want for your own projects, but for this book, we'll be using
    Python version 3.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have picked the version, let's install it.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Python
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you're a Windows or Mac user, you can download an installer directly from
    the Python website ([https://www.python.org/downloads/](https://www.python.org/downloads/)).
    Pick the installer appropriate for your computer, download it, and run it for
    any platform. We also have the option of downloading the source code, compiling
    it, and installing Python that way.
  prefs: []
  type: TYPE_NORMAL
- en: Unix and Linux users, as well as Mac users who prefer it, have the option to
    install Python through their package manager instead. For systems which integrate
    a package manager, this is probably the best and easiest choice. If we use the
    package manager, this next part is probably already done, otherwise we need to
    make sure that the Python programs are able to run from the command line.
  prefs: []
  type: TYPE_NORMAL
- en: 'On macOS and Unix-like operating systems, all we need is to add a line to the
    profile or the `bashrc` file in our home directory:'
  prefs: []
  type: TYPE_NORMAL
- en: 'macOS X (edit `~/.profile`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Unix/Linux (edit `~/.bashrc`):'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'Windows:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Open Advanced System Settings in Control Panel.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Click on Environments Variables....
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit PATH.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add `;<pydir>` at the end.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Windows is only slightly more involved, as you'll need to open up the Control
    Panel and locate the Environment Variables screen. In each of the preceding examples,
    `pydir` is the directory where you installed Pythonâ€”`C:\python36`, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Once we've got the path environment variable set, we should be good to go. To
    check that-open a Terminal window (Command Prompt on Windows) and type `Python`,
    then hit *Enter.* If you don't know how to open the Terminal, don't worry, we'll
    talk about that in more detail in the next chapter.
  prefs: []
  type: TYPE_NORMAL
- en: Also, if you are a Unix user and you do not receive the correct result, it is
    potentially because the `bashrc` file or profile has not been executed yet. You
    may need to log out and log back in again.
  prefs: []
  type: TYPE_NORMAL
- en: If the Python interactive shell starts up when we type `python` into the Terminal,
    we're good to go. If it doesn't, go back to double-check the changes that we made
    to the path environment variable because that's the piece that tells the operating
    system where to look for programs.
  prefs: []
  type: TYPE_NORMAL
- en: That's it for setting up.
  prefs: []
  type: TYPE_NORMAL
- en: If you're feeling adventurous, you can experiment with the interactive shell
    that we just started up. Try typing in mathematical expressions and see what happens.
    In the next section, we'll look more closely at running Python code using the
    command line and the interactive shell.
  prefs: []
  type: TYPE_NORMAL
- en: Using the command line and the interactive shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Since, we looked at installing Python, let's try our hand at making Python actually
    do things using the textual interface.
  prefs: []
  type: TYPE_NORMAL
- en: Text-based user interfaces are very useful to programmers; they provide a quick
    and easy way to interact with programs while they're in development, experiment
    with code (which is, after all, text), and access documentation.
  prefs: []
  type: TYPE_NORMAL
- en: Opening a command-line window
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How you open a command-line window depends on the operating system you're using.
  prefs: []
  type: TYPE_NORMAL
- en: On Windows 7, open the Start menu and type `CMD` into the Run box.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In Windows 8, press the Windows key and then type `CMD` and select Command Prompt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Windows 10, press the Windows key and select Command Prompt.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On macOS, navigate to Applications | Utilities | Terminal.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: On Linux or other Unix-style operating systems, the precise mechanism for opening
    a command-line window varies, but they all have the ability to do it; look for
    the words **xterm**, **terminal**, or **shell**.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Python interactive shell
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now that we've got a command-line window, we'll go straight into the Python
    interactive shell. We do that by typing `python` into the command-line window.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have multiple versions of Python installed and we want to interact with
    a specified version, we can explicitly choose the version from the command line
    by typing in that version''s name. For example, if we type `python3`, we''ll explicitly
    start up some version of Python 3.X:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/16ae283a-24ca-425e-a888-8bf482fe5b68.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The `python3` command is used for Linux users. Windows users should type `python`
    command line to work.
  prefs: []
  type: TYPE_NORMAL
- en: Now, the fun really starts!
  prefs: []
  type: TYPE_NORMAL
- en: 'When we see the `>>>` prompt, we can type in any Python expression or statement
    and see the result immediately (as shown in the following screenshot of code example):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2ed6e9bf-cb76-4cad-a787-dace92e0f2c8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is incredibly useful because it means that we don't have to remember every
    detail about how functions work, what class members are called, which exceptions
    are raised under what circumstances, and so on. Whenever we're unsure about something,
    we can just open up an interactive shell and find out. So, let's discuss this
    using a simple example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s imagine we''re working on an application that uses Python''s `set` data
    type and we''re unsure about what exception gets raised. When we try to add a
    set to itself, we could go digging through the documentation, but it''s quicker
    and easier to just create a set in the interactive shell and try adding it to
    itself:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/41d5cd51-a8a6-4ee5-b4f1-4fd81a7164d4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Right away, the system tells us that adding a set to itself raises a `TypeError`
    exception. Sometimes, running a quick experiment in the interactive shell is the
    fastest way to get information we want, but documentation is nice too.
  prefs: []
  type: TYPE_NORMAL
- en: 'Fortunately, Python has a very good documentation system that we can access
    straight from the interactive shell by calling the `help` function. We could pass
    any object as the parameter of the `help` function and it will print out that
    object''s documentation for us. So, if we want to find out about `functools.wraps`,
    we just pass it to help using the following two commands and read all about it
    (refer to the following screenshot):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: '![](img/24bbbba0-16b3-4af4-8cbf-3cc53860f1e5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `help` function can also take the name of the object you want to read about
    instead of the object itself using the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'This format can save us the time of typing in an `import` statement in the
    interactive shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/76ae9dbb-6911-48ae-baa9-656fa87e2033.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The difference is that the `help` parameter is a string and not an expression
    that evaluates to the object we're interested in.
  prefs: []
  type: TYPE_NORMAL
- en: Installing packages with pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we'll take a look at using Python's package manager to install
    and manage third-party code, and now, it's back to the operating system command
    line for us. We'll see how to easily install third-party code from the Python
    Package Index.
  prefs: []
  type: TYPE_NORMAL
- en: While Python comes with batteries included, that is, the Python standard library
    that's already installed contains a wide range of very useful features, there's
    still plenty of things it doesn't do. Odds are though that somebody somewhere
    has already invented the wheel for us and if so, we can probably find it in the
    Python Package Index.
  prefs: []
  type: TYPE_NORMAL
- en: The pip tool for packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Python, from version 3.4 onwards, is installed with a tool called `pip`, which
    can interface with the Python Package Index to automatically find, download, and
    install Python packages. If you already know the name of the package you want,
    and you have permission to write into Python's library directory, then this relatively
    simple command will get it fully installed and ready to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this instance, we installed a package called `banknumber`, which checks
    if someone''s bank number is a valid bank number or is just a random number. For
    this, just add the `python3 -m pip install banknumber` command and hit *Enter;*
    we''ll get the information as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/bbef48a4-9085-45b1-82a9-4d64db8fed3d.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If we don't have permission to Python's library directory, never fear. Python
    will look for a second user-specific library directory and since that library
    directory belongs to us, we'll always be able to install packages there.
  prefs: []
  type: TYPE_NORMAL
- en: 'To tell pip that we want to install into our personal library directory, just
    add `--user`Â to the command right after `install`. In the following screenshot,
    we are installing the `requests`Â package into our personal directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/24f99b52-e57e-4363-826c-1fd5cb327b5a.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Managing installed packages
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The `pip` tool can do more than just installing packages. It can also give
    us the following:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A list of currently installed packages using the `-m pip list` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/c6ee8621-57cd-48a4-8969-2360376979d8.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Upgrade currently installed packages to the newest version using the `-m pip
    install --upgrade` command:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/86cb1873-6787-41f4-a217-f078c6281c79.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Uninstall packages that we don''t need anymore using the `-m pip uninstall`
    command. For example, if we want to uninstall the `banknumber` package, we can
    do it by using the following command, shown in this screenshot:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/83729f04-b963-4d4e-aacf-e9e20bd7798c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In short, it's a complete cross-platform management tool for Python packages.
  prefs: []
  type: TYPE_NORMAL
- en: Some Python packages require that we be able to compile extensions written in
    the C programming language to install them, but fortunately that's becoming rare.
    Normally, if the compiled extension is required, pip will be able to find and
    install the proper precompiled version automatically. The majority of available
    packages are pure Python anyhow and don't require compilation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The pip tool has many more great options and command-line switches, but what
    we''ve seen so far covers the common situations well. If you want to dig into
    it further, pip''s `help` command will give you the details. For example, consider
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding command prints out all the information you could possibly want
    about the `pip install` option:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/38c3806d-6ab5-434e-b490-b1a3a2aec68c.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, now that we know how to install third-party packages using `pip`, how do
    we go about actually finding packages to install in the first place?
  prefs: []
  type: TYPE_NORMAL
- en: Finding packages in the Python Package Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Earlier, we talked about installing packages from the Python Package Index,
    but what if we don't have a specific package we need to install? What if we just
    need a library to help us get the job done, but don't know which specific one
    we need? Well, as the name of the section implies, the Python Package Index is
    actually an index of packages, which classifies the packages according to a number
    of parameters. The index is conveniently hosted at [https://pypi.python.org/pypi](https://pypi.python.org/pypi).
    We could search the available packages in a number of ways. Let's discuss it in
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Using keywords
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Perhaps, the most useful way of accessing the index is to simply type keywords
    into the search box and see what it spits out.
  prefs: []
  type: TYPE_NORMAL
- en: If we ask to search for `asyncio`, we get back a collection of package names
    that have something to do with `asyncio`. The names are, of course, links to each
    package's detailed description on the index, which we can use to decide which
    package best suits our needs.
  prefs: []
  type: TYPE_NORMAL
- en: There's another way of accessing the index that is often nearly as useful as
    keyword searching and sometimes even more useful.
  prefs: []
  type: TYPE_NORMAL
- en: Using Package Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Python Package Index supports browsing through its **Package Index** by
    category.
  prefs: []
  type: TYPE_NORMAL
- en: You start browsing by clicking on the Browse packages link in the menu, which
    brings you to the list of different categories. From there, you can select one
    or more categories by clicking on them and you'll be shown a list of the packages
    that fall into all of your selected categories, if the list is short enough to
    be useful.
  prefs: []
  type: TYPE_NORMAL
- en: If you don't get a list of packages, it's because the list would be so long
    that it wouldn't do you any good and you should select more categories to narrow
    it down. If a category disappears from the list while you're selecting, it means
    that there are no packages that run all your selected categories.
  prefs: []
  type: TYPE_NORMAL
- en: Python is not only written in English or used by people who prefer this language,
    but some packages also have good support for other languages. This list is a good
    way to find them, whereas keyword searching might not pick up on that kind of
    detail.
  prefs: []
  type: TYPE_NORMAL
- en: Searching the Package Index with pip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'If we don''t want to fire up our browser to go searching through the index,
    we can also do it from the command line through `pip`, as shown in the following
    command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'This command performs the same search that we did earlier through the web interface:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/285a601f-a5b8-43aa-a08c-1cc84afe06bd.png)'
  prefs: []
  type: TYPE_IMG
- en: Doing it this way is often faster; but as you can see in the preceding screenshot,
    it only provides us with a name and a brief description of each package. This
    is perfect for getting a quick reminder about the package name, but not so good
    for more in-depth research.
  prefs: []
  type: TYPE_NORMAL
- en: Legalities and licenses of the Python Package Index
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Finally, a quick note about legalities and licenses!
  prefs: []
  type: TYPE_NORMAL
- en: The vast majority of packages in the Python Package Index are under open-source
    licenses as certified by the **Open Source Institute** (**OSI**). This means basically
    that they can be freely used and distributed as part of other open-source projects.
  prefs: []
  type: TYPE_NORMAL
- en: In most cases, the licenses are more liberal than this, allowing us to use the
    software as part of our projects, even if we don't open source our own code.
  prefs: []
  type: TYPE_NORMAL
- en: Most does not mean all, however some of the packages are not under OSI certified
    licenses and some of OSI licensed packages are not usable in closed-source projects.
  prefs: []
  type: TYPE_NORMAL
- en: So, if you're going to be distributing your software, take a moment to make
    sure the licenses line up with your goals.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned how to install Python and get to a place where we
    can begin working on real code. We looked at running Python in a command-line
    window and using it to perform experiments and calculations. We examined how to
    make the best of Python's command line and its extensive `help` library.
  prefs: []
  type: TYPE_NORMAL
- en: We learned about installing, uninstalling, and upgrading the packages using
    `pip`. We also got a pretty good idea of how to find third-party code to help
    us move our projects along, using the Python Package Index.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we'll work through the steps to create and work with our
    own Python code packages.
  prefs: []
  type: TYPE_NORMAL
