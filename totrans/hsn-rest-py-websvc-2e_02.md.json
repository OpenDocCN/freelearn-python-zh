["```py\nFlask-SQLAlchemy==2.3.2 \nFlask-Migrate==2.2.1 \nmarshmallow==2.16.0 \nmarshmallow-sqlalchemy==0.14.1 \nflask-marshmallow==0.9.0 \npsycopg2==2.7.5\n```", "```py\n    pip install -r requirements.txt\n```", "```py\nInstalling collected packages: SQLAlchemy, Flask-SQLAlchemy, Mako, python-editor, python-dateutil, alembic, Flask-Migrate, marshmallow, marshmallow-sqlalchemy, flask-marshmallow, psycopg2\n      Running setup.py install for SQLAlchemy ... done\n      Running setup.py install for Mako ... done\n      Running setup.py install for python-editor ... done\nSuccessfully installed Flask-Migrate-2.2.1 Flask-SQLAlchemy-2.3.2\nMako-1.0.7 SQLAlchemy-1.2.12 alembic-1.0.0 flask-marshmallow-0.9.0 marshmallow-2.16.0 marshmallow-sqlalchemy-0.14.1 psycopg2-2.7.5 \npython-dateutil-2.7.3 python-editor-1.0.3\n\n```", "```py\nimport os \n\nbasedir = os.path.abspath(os.path.dirname(__file__)) \nSQLALCHEMY_ECHO = False \nSQLALCHEMY_TRACK_MODIFICATIONS = True \n# Replace your_user_name with the user name you configured for the database \n# Replace your_password with the password you specified for the database user \nSQLALCHEMY_DATABASE_URI = \"postgresql://{DB_USER}:{DB_PASS}@{DB_ADDR}/{DB_NAME}\".format(DB_USER=\"your_user_name\", DB_PASS=\"your_password\", DB_ADDR=\"127.0.0.1\", DB_NAME=\"flask_notifications\") \nSQLALCHEMY_MIGRATE_REPO = os.path.join(basedir, 'db_repository')\n```", "```py\nfrom marshmallow import Schema, fields, pre_load from marshmallow import validate from flask_sqlalchemy import SQLAlchemy from flask_marshmallow import ...\n```", "```py\nclass NotificationCategorySchema(ma.Schema): \n    id = fields.Integer(dump_only=True) \n    # Minimum length = 3 characters \n    name = fields.String(required=True,  \n        validate=validate.Length(3)) \n    url = ma.URLFor('service.notificationcategoryresource',  \n        id='<id>',  \n        _external=True) \n notifications = fields.Nested('NotificationSchema',             \n      many=True,         \n      exclude=('notification_category',)) \n\nclass NotificationSchema(ma.Schema): \n    id = fields.Integer(dump_only=True) \n    # Minimum length = 5 characters \n    message = fields.String(required=True,  \n        validate=validate.Length(5)) \n    ttl = fields.Integer() \n    creation_date = fields.DateTime() \n notification_category =\nfields.Nested(NotificationCategorySchema,\n         only=['id', 'url', 'name'],\n         required=True) \n    displayed_times = fields.Integer() \n    displayed_once = fields.Boolean() \n    url = ma.URLFor('service.notificationresource',  \n        id='<id>',  \n        _external=True) \n\n    @pre_load \n    def process_notification_category(self, data): \n        notification_category = data.get('notification_category') \n        if notification_category: \n            if isinstance(notification_category, dict): \n                notification_category_name = notification_category.get('name') \n            else: \n                notification_category_name = notification_category \n            notification_category_dict = dict(name=notification_category_name) \n        else: \n            notification_category_dict = {} \n        data['notification_category'] = notification_category_dict \n        return data \n```", "```py\nurl = ma.URLFor('service.notificacion_categoryresource', \n    id='<id>', \n    _external=True)\n```", "```py\nnotifications = fields.Nested('NotificationSchema', \n    many=True, \n    exclude=('notification_category',)) \n```", "```py\nnotification_category = fields.Nested(CategorySchema,  \n    only=['id', 'url', 'name'],  \n    required=True) \n```", "```py\nurl = ma.URLFor('service.notificationresource',  \n    id='<id>',  \n    _external=True)\n```", "```py\nfrom flask import Blueprint, request, jsonify, make_response from flask_restful import Api, Resource from http_status import HttpStatus from models import orm, NotificationCategory, NotificationCategorySchema, ...\n```", "```py\nservice.add_resource(NotificationCategoryListResource,  \n    '/notification_categories/') \nservice.add_resource(NotificationCategoryResource,  \n    '/notification_categories/<int:id>') \nservice.add_resource(NotificationListResource,  \n    '/notifications/') \nservice.add_resource(NotificationResource,  \n    '/notifications/<int:id>')\n```", "```py\nfrom flask import Flask \nfrom flask_sqlalchemy import SQLAlchemy \nfrom flask_migrate import Migrate \nfrom models import orm \nfrom views import service_blueprint \n\ndef create_app(config_filename): \n    app = Flask(__name__) \n    app.config.from_object(config_filename) \n    orm.init_app(app) \n    app.register_blueprint(service_blueprint, url_prefix='/service') \n    migrate = Migrate(app, orm) \n    return app \n\napp = create_app('config') \n```", "```py\npsql --username=your_user_name --dbname=flask_notifications --command=\"\\dt\"\n```", "```py\n\n      **                    List of relations**\n **Schema |         Name          | Type  |     Owner** \n      **--------+-----------------------+-------+----------------** ** public | alembic_version       | table | your_user_name** ** public | notification          | table | your_user_name** ** public | notification_category | table | your_user_name** **(3 rows)**\n```", "```py\npsql --username=your_user_name --dbname=flask_notifications --command=\"SELECT * FROM notification_category;\"\npsql --username=your_user_name --dbname=flask_notifications --command=\"SELECT * FROM notification;\"\n\n```", "```py\n    export FLASK_ENV=development\n```", "```py\n    set FLASK_ENV=development\n```", "```py\n    $env:FLASK_ENV = \"development\"\n```"]