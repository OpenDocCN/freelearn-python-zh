["```py\n% python src/acquire.py -o quartet -k ~/Downloads/kaggle.json \\\n  --zip carlmcbrideellis/data-anscombes-quartet\n```", "```py\n% python src/acquire.py --search -k ~/Downloads/kaggle.json\n```", "```py\n% chmod 400 ~/Downloads/kaggle.json\n```", "```py\nimport json\nfrom pathlib import Path\nimport requests.auth\n\nkeypath = Path.home() / \"Downloads\" / \"kaggle.json\"\nwith keypath.open() as keyfile:\n    credentials = json.load(keyfile)\nauth = requests.auth.HTTPBasicAuth(\n    credentials[’username’], credentials[’key’]\n)\n```", "```py\n[\n    {\"id\": some_number, \"ref\": \"username/dataset\", \"title\": ...},\n    {\"id\": another_number, \"ref\": \"username/dataset\", \"title\": ...},\n    etc.\n]\n```", "```py\ndef dataset_iter(url: str, query: dict[str, str]) ->\n  Iterator[dict[str, str]]:\n    page = 1\n    while True:\n        response = requests.get(url, params=quert | {\"page\": str(page)})\n        if response.status_code == 200:\n            details = response.json()\n            if details:\n                yield from iter(details)\n                page += 1\n            else:\n                break\n        elif response.status_code == 429:\n            # Too Many Requests\n            # Pause and try again processing goes here...\n            pass\n        else:\n            # Unexpected response\n            # Error processing goes here...\n            break\n```", "```py\nkeypath = Path.home()/\"Downloads\"/\"kaggle.json\"\nwith keypath.open() as keyfile:\n    credentials = json.load(keyfile)\n\nreader = Access(credentials)\nfor row in reader.dataset_iter(list_url):\n    print(row[’title’], row[’ref’], row[’url’], row[’totalBytes’])\n```", "```py\nfrom unittest.mock import Mock, sentinel, call\n\ndef test_rest_access(monkeypatch):\n    mock_auth_class = Mock(\n        name=\"Mocked HTTPBasicAuth class\",\n        return_value=sentinel.AUTH\n    )\n    monkeypatch.setattr(’requests.auth.HTTPBasicAuth’, mock_auth_class)\n    mock_kaggle_json = {\"username\": sentinel.USERNAME, \"key\": sentinel.KEY}\n    access = RestAccess(mock_kaggle_json)\n    assert access.credentials == sentinel.AUTH\n    assert mock_auth_class.mock_calls == [\n        call(sentinel.USERNAME, sentinel.KEY)\n    ]\n```", "```py\n@fixture.kaggle_server\nScenario: Request for carlmcbrideellis/data-anscombes-quartet\n    extracts file from ZIP archive.\n    A typical download command might be\n    \"python src/acquire.py -k kaggle.json -o quartet \\\n      --zip carlmcbrideellis/data-anscombes-quartet\"\n\n  Given proper keys are in \"kaggle.json\"\n  When we run the kaggle download command\n  Then log has INFO line with \"header: [’mock’, ’data’]\"\n  And log has INFO line with \"count: 1\"\n```", "```py\nimport requests\nimport requests.auth\n```", "```py\nif __name__ == \"__main__\":\n    # Read from a configuration file\n    requests_name = \"requests\"\n    requests = importlib.import_module(requests_name)\n    main(sys.argv[1:])\n```", "```py\nimport csv\nimport io\nimport json\nimport zipfile\nfrom bottle import route, run, request, HTTPResponse\n\n@route(’/api/v1/datasets/list’)\ndef datasets_list(name):\n    # Provide mock JSON documents and Rate throttling\n\n@route(’/api/v1/datasets/download/<ownerSlug>/<datasetSlug>’)\ndef datasets_download(ownerSlug, datasetSlug):\n    # Provide mock ZIP archive\n\nif __name__ == \"__main__\":\n    run(host=’127.0.0.1’, port=8080)\n```", "```py\n@route(’/api/v1/datasets/list’)\ndef datasets_list(name):\n    page = request.query.page or ’1’\n    if page == ’1’:\n        mock_body = [\n            # Provide attributes as needed by the application under test\n            {’title’: ’example1’},\n            {’title’: ’example2’},\n        ]\n        response = HTTPResponse(\n            body=json.dumps(mock_body),\n            status=200,\n            headers={’Content-Type’: ’application/json’}\n        )\n    else:\n        # For error-recovery scenarios, this response may change.\n        response = HTTPResponse(\n            body=json.dumps([]),\n            status=200,\n            headers={’Content-Type’: ’application/json’}\n        )\n    return response\n```", "```py\n@route(’/api/v1/datasets/download/<ownerSlug>/<datasetSlug>’)\ndef datasets_download(ownerSlug, datasetSlug):\n    if ownerSlug == \"carlmcbrideellis\" and datasetSlug ==\n      \"data-anscombes-quartet\":\n        zip_content = io.BytesIO()\n        with zipfile.ZipFile(zip_content, ’w’) as archive:\n            target_path = zipfile.Path(archive, ’Anscombe_quartet_data.csv’)\n            with target_path.open(’w’) as member_file:\n                writer = csv.writer(member_file)\n                writer.writerow([’mock’, ’data’])\n                writer.writerow([’line’, ’two’])\n        response = HTTPResponse(\n            body=zip_content.getvalue(),\n            status=200,\n            headers={\"Content-Type\": \"application/zip\"}\n        )\n        return response\n    # All other requests...\n    response = HTTPResponse(\n        status=404\n    )\n    return response\n```", "```py\nfrom collections.abc import Iterator\nfrom typing import Any\nimport subprocess\nimport time\nimport os\nimport sys\nfrom behave import fixture, use_fixture\nfrom behave.runner import Context\n\n@fixture\ndef kaggle_server(context: Context) -> Iterator[Any]:\n    if \"environment\" not in context:\n        context.environment = os.environ\n    context.environment[\"ACQUIRE_BASE_URL\"] = \"http://127.0.0.1:8080\"\n    # Save server-side log for debugging\n    server = subprocess.Popen(\n        [sys.executable, \"tests/mock_kaggle_bottle.py\"],\n    )\n    time.sleep(0.5)  # 500 ms delay to allow the service to open a socket\n    yield server\n    server.kill()\n```", "```py\nfrom behave import use_fixture\nfrom behave.runner import Context\n\ndef before_tag(context: Context, tag: str) -> None:\n    if tag == \"fixture.kaggle_server\":\n        # This will invoke the definition generator.\n        # It consumes a value before and after the tagged scenario.\n        use_fixture(kaggle_server, context)\n```", "```py\n% python src/acquire.py -o quartet --page \"https://en.wikipedia.org/wiki/Anscombe’s_quartet\" --caption \"Anscombe’s quartet\"\n```", "```py\n<table class=\"wikitable\" style=\"text-align: center; margin-left:auto;\n  margin-right:auto;\" border=\"1\">\n    <caption>Anscombe’s quartet</caption>\n    <tbody>\n      <tr>\n        <th colspan=\"2\">I</th>\n        etc.\n      </tr>\n      <tr>\n        <td><i>x</i></td>\n        <td><i>y</i></td>\n        etc.\n      </tr>\n      <tr>\n        <td>10.0</td>\n        <td>8.04</td>\n        etc.\n      </tr>\n    </tbody>\n</table>\n```", "```py\nfrom urllib.request import urlopen\nfrom bs4 import BeautifulSoup, Tag\n\ndef get_page(url: str) -> BeautifulSoup:\n    return BeautifulSoup(\n        urlopen(url), \"html.parser\"\n    )\n```", "```py\ndef find_table_caption(\n        soup: BeautifulSoup,\n        caption_text: str = \"Anscombe’s quartet\"\n    ) -> Tag:\n    for table in soup.find_all(’table’):\n        if table.caption:\n            if table.caption.text.strip() == caption_text.strip():\n                return table\n    raise RuntimeError(f\"<table> with caption {caption_text!r} not found\")\n```", "```py\nfrom pytest import fixture\nfrom textwrap import dedent\n\n@fixture\ndef example_1(tmp_path):\n    html_page = tmp_path / \"works.html\"\n    html_page.write_text(\n        dedent(\"\"\"\\\n        <!DOCTYPE html>\n        <html>\n        etc.\n        </html>\n        \"\"\"\n        )\n    )\n    yield f\"file://{str(html_page)}\"\n    html_page.unlink()\n```", "```py\ndef test_steps(example_1):\n    soup = html_extract.get_page(example_1)\n    table_tag = html_extract.find_table_caption(soup, \"Anscombe’s quartet\")\n    rows = list(html_extract.table_row_data_iter(table_tag))\n    assert rows == [\n        [],\n        [’Keep this’, ’Data’],\n        [’And this’, ’Data’],\n    ]\n```", "```py\nScenario: Finds captioned table and extracts data\n  Given an HTML page \"example_1.html\"\n    \"\"\"\n      <!DOCTYPE html>\n      <html>\n        etc. with multiple tables.\n      </html>\n    \"\"\"\n  When we run the html extract command\n  Then log has INFO line with \"header: [’Keep this’, ’Data’]\"\n  And log has INFO line with \"count: 1\"\n```", "```py\nfrom textwrap import dedent\n\n@given(u'an HTML page \"{filename}\"')\ndef step_impl(context, filename):\n    context.path = Path(filename)\n    context.path.write_text(dedent(context.text))\n    context.add_cleanup(context.path.unlink)\n```", "```py\n@when(u’we run the html extract command’)\ndef step_impl(context):\n    command = [\n        ’python’, ’src/acquire.py’,\n        ’-o’, ’quartet’,\n        ’--page’, ’$URL’,\n        ’--caption’, \"Anscombe’s quartet\"\n    ]\n    url = f\"file://{str(context.path.absolute())}\"\n    command[command.index(’$URL’)] = url\n    print(shlex.join(command))\n    # etc. with subprocess.run() to execute the command\n```", "```py\n    PairBuilder: TypeVar = Callable[[list[str]], XYPair]\n```"]