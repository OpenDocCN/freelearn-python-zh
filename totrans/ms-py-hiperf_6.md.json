["```py\n    $ sudo apt-get install pypy\n\n    ```", "```py\nimport math\nimport time\n\nTIMES = 10000000\n\ninit = time.clock()\nfor i in range(TIMES):\n    value = math.sqrt(i * math.fabs(math.sin(i - math.cos(i))))\n\nprint \"No function: %s\" % ( init - time.clock())\n\ndef calcMath(i):\n    return math.sqrt(i * math.fabs(math.sin(i - math.cos(i))))\ninit = time.clock()\nfor i in range(TIMES):\n    value = calcMath(i)\nprint \"Function: %s\" % ( init – time.clock())\n```", "```py\nfrom cStringIO import StringIO\nimport time\n\nTIMES = 100000\n\ninit = time.clock()\nvalue = ''\nfor i in range(TIMES):\n    value += str(i)\nprint \"Concatenation: %s\" % ( init - time.clock())\n\ninit = time.clock()\nvalue = StringIO()\nfor i in range(TIMES):\n    value.write(str(i))\nprint \"StringIO: %s\" % ( init - time.clock())\n\ninit = time.clock()\nvalue = []\nfor i in range(TIMES):\n    value.append(str(i))\nfinalValue = ''.join(value)\nprint \"List: %s\" % ( init - time.clock())\n```", "```py\nimport math\n\ndef great_circle(lon1,lat1,lon2,lat2):\n    radius = 3956 #miles\n    x = math.pi/180.0\n\n    a = (90.0-lat1)*(x)\n    b = (90.0-lat2)*(x)\n    theta = (lon2-lon1)*(x)\n    c = math.acos((math.cos(a)*math.cos(b)) + (math.sin(a)*math.sin(b)*math.cos(theta))) \n    return radius*c\n\nlon1, lat1, lon2, lat2 = -72.345, 34.323, -61.823, 54.826\nnum = 5000000\n\nfor i in range(num):great_circle(lon1,lat1,lon2,lat2)\n```", "```py\nimport math\n\ndef calcualte_acos(a, b ,theta):\n return math.acos((math.cos(a)*math.cos(b)) + (math.sin(a)*math.sin(b)*math.cos(theta)))\n\ndef great_circle(lon1,lat1,lon2,lat2):\n    radius = 3956 #miles\n    x = math.pi/180.0\n\n    a = (90.0-lat1)*(x)\n    b = (90.0-lat2)*(x)\n    theta = (lon2-lon1)*(x)\n    c = calcualte_acos(a, b, theta)\n    return radius*c\n\nlon1, lat1, lon2, lat2 = -72.345, 34.323, -61.823, 54.826\nnum = 5000000\n\nfor i in range(num):\n  great_circle(lon1,lat1,lon2,lat2)\n```", "```py\ndef f(x):\n    return x**2-x\n\ndef integrate_f(a, b, N):\n    s = 0\n    dx = (b-a)/N\n    for i in range(N):\n        s += f(a+i*dx)\n    return s * dx\n```", "```py\ndef f(double x):\n    return x**2-x\n\ndef integrate_f(double a, double b, int N):\n    cdef int i\n    cdef double s, dx\n    s = 0\n    dx = (b-a)/N\n    for i in range(N):\n        s += f(a+i*dx)\n    return s * dx\n```", "```py\n    $python setup.py install\n\n    ```", "```py\n    $pip install cython\n\n    ```", "```py\n    #test.pyx\n    def join_n_print(parts):\n        print ' '.join(parts)\n\n    #test.py\n    from test import join_n_print\n    join_n_print( [\"This\", \"is\", \"a\", \"test\"] )\n\n    #setup.py\n    from distutils.core import setup\n    from Cython.Build import cythonize\n\n    setup(\n      name = 'Test app',\n      ext_modules = cythonize(\"test.pyx\"),\n    )\n    ```", "```py\n    $ python setup.py build_ext –inplace\n\n    ```", "```py\n#dishes.pxd\ncdef enum otherstuff:\n    sausage, eggs, lettuce\n\ncdef struct spamdish:\n    int oz_of_spam\n    otherstuff filler\n\n#restaurant.pyx:\ncimport dishes\nfrom dishes cimport spamdish\n\ncdef void prepare(spamdish *d):\n    d.oz_of_spam = 42\n    d.filler = dishes.sausage\n\ndef serve():\n    cdef spamdish d\n    prepare(&d)\n    print \"%d oz spam, filler no. %d\" % (d.oz_of_spam, d.filler)\n```", "```py\nfrom libc.stdlib cimport atoi\n```", "```py\ncdef extern from \"library.h\":\n  int library_counter;\n  char *pointerVar;\n```", "```py\n#my_declaration.pxd\ncdef extern \"myHeader.h\":\n  void print_with_colors(char *)\n\n#my_cython_code.pyx\nfrom my_declaration cimport print_with_colors as c_print_with_colors\n\ndef print_with_colors(str):\n  c_print_with_colors(str)\n```", "```py\n#my_cython_code.pyx\ncimport  my_declaration \ndef print_with_colors(str):\n  my_declaration.print_with_colors(str)\n```", "```py\ndef is_prime(num):\n  for j in range(2,num):\n    if (num % j) == 0:\n      return False\n  return True\n```", "```py\ndef is_prime(int num):\n  cdef int j;\n  for j in range(2,num):\n    if (num % j) == 0:\n      return False\n  return True\n```", "```py\nimport sys\nfrom <right-module-name> import is_prime\n\ndef main(argv):\n\n  if (len(sys.argv) != 3):\n    sys.exit('Usage: prime_numbers.py <lowest_bound> <upper_bound>')\n\n  low = int(sys.argv[1])\n  high = int(sys.argv[2])\n\n  for i in range(low,high):\n    if is_prime(i):\n      print i,\n\nif __name__ == \"__main__\":\n  main(sys.argv[1:])\n```", "```py\n$ time python script.py 10 10000\n\n```", "```py\n#my_functions.pxd\n\n#this is a pure Python function, so Cython will create a make it return and receive Python objects instead of primitive types.\ncdef full_python_function (x):\n    return x**2\n\n#This function instead, is defined as both, a standard function and an optimized C function, thanks to the use of the cpdef keyword.\ncpdef int c_function(int num):\n    return x**2\n```", "```py\ncdef int text(double param) except -1:\n```", "```py\ncdef int text(double param) except? -1:\n```", "```py\ncdef int text(double param) except *:\n```", "```py\ndef great_circle(lon1,lat1,lon2,lat2):\n    radius = 3956 #miles\n    x = PI/180.0\n\n    a = (90.0-lat1)*(x)\n    b = (90.0-lat2)*(x)\n    theta = (lon2-lon1)*(x)\n    c = acos((cos(a)*cos(b)) +\n\n                  (sin(a)*sin(b)*cos(theta)))\n    return radius*c\n```", "```py\nfrom great_circle_py import great_circle\n\nlon1, lat1, lon2, lat2 = -72.345, 34.323, -61.823, 54.826\nnum = 5000000\n\nfor i in range(num):\n  great_circle(lon1,lat1,lon2,lat2)\n```", "```py\n#great_circle_cy_v1.pyx\nfrom math import pi as PI, acos, cos, sin\n\ndef great_circle(double lon1,double lat1,double lon2,double lat2):\n    cdef double a, b, theta, c, x, radius\n\n    radius = 3956 #miles\n    x = PI/180.0\n\n    a = (90.0-lat1)*(x)\n    b = (90.0-lat2)*(x)\n    theta = (lon2-lon1)*(x)\n    c = acos((cos(a)*cos(b)) +\n                  (sin(a)*sin(b)*cos(theta)))\n    return radius*c\n#great_circle_setup_v1.py\nfrom distutils.core import setup\nfrom Cython.Build import cythonize\n\nsetup(\n  name = 'Great Circle module v1',\n  ext_modules = cythonize(\"great_circle_cy_v1.pyx\"),\n)\n```", "```py\n#great_circle_cy_v2.pyx\ncdef extern from \"math.h\":\n    float cosf(float theta)\n    float sinf(float theta)\n    float acosf(float theta)\n\ndef great_circle(double lon1,double lat1,double lon2,double lat2):\n    cdef double a, b, theta, c, x, radius\n    cdef double pi = 3.141592653589793\n\n    radius = 3956 #miles\n    x = pi/180.0\n\n    a = (90.0-lat1)*(x)\n    b = (90.0-lat2)*(x)\n    theta = (lon2-lon1)*(x)\n    c = acosf((cosf(a)*cosf(b)) +\n                  (sinf(a)*sinf(b)*cosf(theta)))\n    return radius*c\n```", "```py\n$ cython -a great_circle_py.py\n\n```", "```py\ncdef char* str = \"test string\"\nprint str == b\"test string\"\n```", "```py\ndef myFunction( (a,b) ):\n  return a + b\nargs = (1,2)\nprint myFunction(args)\n```"]