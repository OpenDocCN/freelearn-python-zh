["```py\nimport os\nimport maya.cmds as cmds\n\ndef browseCustomData():\n\n    projDir = cmds.internalVar(userWorkspaceDir=True)\n\n    newDir = os.path.join(projDir, 'customData')\n\n    if (not os.path.exists(newDir)):\n        os.makedirs(newDir)\n\n    cmds.fileDialog2(startingDirectory=newDir)\n\nbrowseCustomData()\n```", "```py\nimport os\n```", "```py\nprojDir = cmds.internalVar(userWorkspaceDir=True)\n```", "```py\nnewDir = os.path.join(projDir, 'customData')\n```", "```py\nif (not os.path.exists(newDir)):\n```", "```py\n    os.makedirs(newDir)\n```", "```py\ncmds.fileDialog2(startingDirectory=newDir)\n```", "```py\ndef listScripts():\n    scriptDir = cmds.internalVar(userScriptDir=True)\n    print(os.listdir(scriptDir))\n```", "```py\nspr    0    0    0\ncub    -2   0    -2\n```", "```py\nv 2 3 4\n```", "```py\nimport maya.cmds as cmds\n\ndef processFooLine(line):\n\n    parts = line.split()\n\n    if (len(parts) < 4):\n        cmds.error(\"BAD DATA \" + line)\n\n    x = float(parts[1])\n    y = float(parts[2])\n    z = float(parts[3])\n\n    if (parts[0] == \"spr\"):\n        cmds.sphere()\n    elif (parts[0] == \"cub\"):\n        cmds.polyCube()\n\n    cmds.move(x, y, z)\n\ndef readFooFile():\n    filePath = cmds.fileDialog2(fileMode=1, fileFilter=\"*.foo\")\n\n    fileRef = open(filePath[0], \"r\")\n\n    line = fileRef.readline()\n    while (line):\n        processFooLine(line)\n        line = fileRef.readline()\n\n    fileRef.close()\n\nreadFooFile()\n```", "```py\n\"FOO files (*.foo *.fo)\"\n```", "```py\ncmds.fileDialog2(fileMode=1, fileFilter=\"FOO files (*.foo *.fo);;Text files (*.txt)\")\n```", "```py\n    filePath = cmds.fileDialog2(fileMode=1, fileFilter=\"FOO files (*.foo *.fo);;Text files (*.txt)\")\n\n    if (filePath == None):\n        return\n```", "```py\n    fileRef = open(filePath[0], \"r\")\n```", "```py\n    line = fileRef.readline()\n```", "```py\n    while (line):\n        processFooLine(line)\n        line = fileRef.readline()\n```", "```py\n    fileRef.close()\n```", "```py\nparts = line.split()\n\nif (len(parts) < 4):\n    cmds.error(\"BAD DATA \" + line)\n```", "```py\nx = float(parts[1])\ny = float(parts[2])\nz = float(parts[3])\n```", "```py\nif (parts[0] == \"spr\"):\n    cmds.sphere()\nelif (parts[0] == \"cub\"):\n    cmds.polyCube()\n```", "```py\ncmds.move(x, y, z)\n```", "```py\nimport maya.cmds as cmds\n\ndef checkHistory(obj):\n    history = cmds.listHistory(obj)\n\n    geoType = \"\"\n\n    for h in history:\n\n        if (h.startswith(\"makeNurbSphere\")):\n            geoType = \"spr\"\n\n        if (h.startswith(\"polyCube\")):\n            geoType = \"cub\"\n\n    return geoType\n\ndef writeFOO():\n\n    filePath = cmds.fileDialog2(fileMode=0, fileFilter=\"FOO files (*.foo)\")\n\n    if (filePath == None):\n        return\n\n    fileRef = open(filePath[0], \"w\")\n\n    objects = cmds.ls(type=\"transform\")\n\n    for obj in objects:\n        geoType = checkHistory(obj)\n\n        if (geoType != \"\"):\n\n            position = cmds.xform(obj, query=True, translation=True, worldSpace=True)\n            positionString = \" \".join(format(x, \".3f\") for x in position)\n\n            newLine = geoType + \" \" + positionString + \"\\n\"\n            fileRef.write(newLine)\n\n    fileRef.close()\n\nwriteFOO()\n```", "```py\nfilePath = cmds.fileDialog2(fileMode=0, fileFilter=\"FOO files (*.foo)\")\n```", "```py\nif (filePath == None):\n    return\n\nfileRef = open(filePath[0], \"w\")\n```", "```py\nobjects = cmds.ls(type=\"transform\")\n```", "```py\ndef checkHistory(obj):\n    history = cmds.listHistory(obj)\n```", "```py\ngeoType = \"\"\n```", "```py\nfor h in history:\n\n    if (h.startswith(\"makeNurbSphere\")):\n        geoType = \"spr\"\n\n    if (h.startswith(\"polyCube\")):\n        geoType = \"cub\"\n```", "```py\nreturn geoType\n```", "```py\nfor obj in objects:\n    geoType = checkHistory(obj)\n\n    if (geoType != \"\"):\n```", "```py\nposition = cmds.xform(obj, query=True, translation=True, worldSpace=True)\n```", "```py\n[geometry type ID] [x position] [y position] [z position]\n```", "```py\npositionString = \" \".join(position)\n```", "```py\npositionString = \" \".join(map(str, position))\n```", "```py\npositionString = \" \".join(format(x, \".3f\") for x in position)\n```", "```py\nnewLine = geoType + \" \" + positionString + \"\\n\"\n```", "```py\nfileRef.write(newLine)\n```", "```py\nfileRef.close()\n```", "```py\ndef markAsPickup(obj, pickupType):\n    customAtts = cmds.listAttr(obj, userDefined=True)\n\n    if (\"pickupType\" not in customAtts):\n        cmds.addAttr(obj, longName=\"pickupType\", keyable=True)\n\n    cmds.setAttr(obj + \".pickupType\", pickupType)\n```", "```py\ndef listPickups():\n    pickups = []\n    objects = cmds.ls(type=\"transform\")\n\n    for obj in objects:\n        customAtts = cmds.listAttr(obj, userDefined=True)\n        if (customAtts != None):\n            if (\"pickupType\" in customAtts):\n                print(obj)\n                pickups.append(obj)\n\nreturn pickups\n```", "```py\n3 4 4\n```", "```py\nimport maya.cmds as cmds\nimport struct\n\ndef checkHistory(obj):\n    history = cmds.listHistory(obj)\n\n    geoType = \"\"\n\n    for h in history:\n\n        if (h.startswith(\"makeNurbSphere\")):\n            geoType = \"spr\"\n\n        if (h.startswith(\"polyCube\")):\n            geoType = \"cub\"\n\n    return geoType\n\ndef writeFOBHeader(f):\n    headerStr = 'iii'\n    f.write(struct.pack(headerStr, 3, 3, 4))\n\ndef writeObjData(obj, geoType, f):\n\n    position = cmds.xform(obj, query=True, translation=True, worldSpace=True)\n\n    f.write(geoType)\n\n    f.write(struct.pack('fff', position[0], position[1], position[2]))\n\ndef saveFOBFile():\n    filePath = cmds.fileDialog2(fileMode=0, fileFilter=\"FOO Binary files (*.fob)\")\n\n    if (filePath == None):\n        return\n\n    fileRef = open(filePath[0], \"wb\")\n\n    writeFOBHeader(fileRef)\n    objects = cmds.ls(type=\"transform\")\n\n    for obj in objects:\n        geoType = checkHistory(obj)\n\n        if (geoType != \"\"):\n\n            writeObjData(obj, geoType, fileRef)\n            # positionString = \" \".join(format(x, \".3f\") for x in position)\n\n    fileRef.close()\n\nsaveFOBFile()\n```", "```py\nimport struct\n```", "```py\nfilePath = cmds.fileDialog2(fileMode=0, fileFilter=\"FOO Binary files (*.fob)\")\n```", "```py\nfileRef = open(filePath[0], \"wb\")\n```", "```py\nheaderStr = 'iii'\n```", "```py\nstruct.pack(headerStr, 3, 3, 4)\n```", "```py\ndef writeFOBHeader(f):\n    headerStr = 'iii'\n    f.write(struct.pack(headerStr, 3, 3, 4))\n```", "```py\nfor obj in objects:\n    geoType = checkHistory(obj)\n\n    if (geoType != \"\"):\n        writeObjData(obj, geoType, fileRef)\n```", "```py\nposition = cmds.xform(obj, query=True, translation=True, worldSpace=True)\n```", "```py\nf.write(geoType)\n```", "```py\nf.write(struct.pack('fff', position[0], position[1], position[2]))\n```", "```py\nfileRef.close()\n```", "```py\nimport maya.cmds as cmds\nimport struct\n\ndef makeObject(objType, pos):\n\n    newObj = None\n\n    if (objType == \"spr\"):\n        newObj = cmds.sphere()\n    elif (objType == \"cub\"):\n        newObj = cmds.polyCube()\n\n    if (newObj != None):\n        cmds.move(pos[0], pos[1], pos[2])\n\ndef readFOBFile():\n    filePath = cmds.fileDialog2(fileMode=1, fileFilter=\"FOO binary files (*.fob)\")\n\n    if (filePath == None):\n        return\n\n    f = open(filePath[0], \"rb\")\n\n    data = f.read()\n\n    headerLen = 12\n\n    res = struct.unpack('iii', data[0:headerLen])\n\n    geoTypeLen = res[0]\n    numData = res[1]\n    bytesPerData = res[2]\n\n    objectLen = geoTypeLen + (numData * bytesPerData)\n\n    numEntries = (len(data) - headerLen) / objectLen\n\n    dataStr = 'f'*numData\n\n    for i in range(0,numEntries):\n        start = (i * objectLen) + headerLen \n        end = start + geoTypeLen\n\n        geoType = data[start:end]\n\n        start = end\n        end = start + (numData * bytesPerData)\n\n        pos = struct.unpack(dataStr, data[start:end])\n        makeObject(geoType, pos)\n\n    f.close()\n\nreadFOBFile()\n```", "```py\nimport struct\n```", "```py\nfilePath = cmds.fileDialog2(fileMode=1, fileFilter=\"FOO binary files (*.fob)\")\n\nif (filePath == None):\n    return\n```", "```py\nf = open(filePath[0], \"rb\")\n```", "```py\ndata = f.read()\n```", "```py\n    headerLen = 12\n    res = struct.unpack('iii', data[0:headerLen])\n```", "```py\ngeoTypeLen = res[0]\nnumData = res[1]\nbytesPerData = res[2]\n```", "```py\nobjectLen = geoTypeLen + (numData * bytesPerData)\n```", "```py\nnumEntries = (len(data) - headerLen) / objectLen\n```", "```py\ndataStr = 'f'*numData\n```", "```py\n    for i in range(0,numEntries):\n```", "```py\nstart = (i * objectLen) + headerLen \nend = start + geoTypeLen\n```", "```py\ngeoType = data[start:end]\n```", "```py\nstart = end\nend = start + (numData * bytesPerData)\n```", "```py\npos = struct.unpack(dataStr, data[start:end])\n```", "```py\nmakeObject(geoType, pos)\n```", "```py\ndef makeObject(objType, pos):\n\n    newObj = None\n\n    if (objType == \"spr\"):\n        newObj = cmds.sphere()\n    elif (objType == \"cub\"):\n        newObj = cmds.polyCube()\n\n    if (newObj != None):\n        cmds.move(pos[0], pos[1], pos[2])\n```", "```py\nstruct.unpack('fffi', data[0:16])\n```", "```py\nimport maya.cmds as cmds\nimport struct\nimport os\n\ndef readMultipleTypes():\n\n    fileRes = cmds.fileDialog2(fileMode=1, fileFilter=\"FOO files(*.foo);;FOO binary files (*.fob)\")\n\n    if (fileRes == None):\n        return\n\n    filePath = fileRes[0]\n\n    pathParts = os.path.splitext(filePath)\n    extension = pathParts[1]\n\n    if (extension == \".foo\"):\n        readFOOFile(filePath)\n    elif (extension == \".fob\"):\n        readFOBFile(filePath)\n    else:\n        cmds.error(\"unrecognized file type\")\n\nreadMultipleTypes()\n```", "```py\nFOO files(*.foo);;FOO binary files (*.fob)\n```", "```py\n    filePath = fileRes[0]\n\n    pathParts = os.path.splitext(filePath)\n    extension = pathParts[1]\n```", "```py\nif (extension == \".foo\"):\n    readFOOFile(filePath)\nelif (extension == \".fob\"):\n    readFOBFile(filePath)\nelse:\n    cmds.error(\"unrecognized file type\")\n```"]