["```py\nfrom kivy.app import App\nfrom kivy.uix.widget import Widget\n\nclass CanvasWidget(Widget):\n    pass\n\nclass PaintApp(App):\n    def build(self):\n        return CanvasWidget()\n\nif __name__ == '__main__':\n    PaintApp().run()\n```", "```py\nfrom kivy.core.window import Window\nfrom kivy.utils import get_color_from_hex\n\nWindow.clearcolor = get_color_from_hex('#FFFFFF')\n```", "```py\nfrom kivy.config import Config\n\nConfig.set('graphics', 'width', '960')\nConfig.set('graphics', 'height', '540')  # 16:9\n```", "```py\nConfig.set('graphics', 'resizable', '0')\n```", "```py\nfrom kivy.base import EventLoop\nclass PaintApp(App):\n    def build(self):\n        EventLoop.ensure_window()\n        if EventLoop.window.__class__.__name__.endswith('Pygame'):\n            try:\n                from pygame import mouse\n                # pygame_compile_cursor is a fixed version of\n                # pygame.cursors.compile\n                a, b = pygame_compile_cursor()\n                mouse.set_cursor((24, 24), (9, 9), a, b)\n            except:\n                pass\n\n        return CanvasWidget()\n```", "```py\nConfig.set('input', 'mouse', 'mouse,disable_multitouch')\n```", "```py\nclass CanvasWidget(Widget):\n    def on_touch_down(self, touch):\n        print(touch.x, touch.y)\n```", "```py\nself.canvas.add(Line(circle=(touch.x, touch.y, 25)))\n```", "```py\nwith self.canvas:\n    Line(circle=(touch.x, touch.y, 25))\n```", "```py\n// JavaScript code for clearing the canvas\ncanvas.rect(0, 0, width, height)\ncanvas.fillStyle = '#FFFFFF'\ncanvas.fill()\n```", "```py\n# Same code as JavaScript above. This is wrong, don't do it!\nwith self.canvas:\n    Color(1, 1, 1)\n    Rectangle(pos=self.pos, size=self.size)\n```", "```py\nclass CanvasWidget(Widget):\n    def on_touch_down(self, touch):\n        with self.canvas:\n            Color(*get_color_from_hex('#0080FF80'))\n            Line(circle=(touch.x, touch.y, 25), width=4)\n```", "```py\n# In main.py\nfrom kivy.app import App\nfrom kivy.config import Config\nfrom kivy.graphics import Color, Line\nfrom kivy.uix.widget import Widget\nfrom kivy.utils import get_color_from_hex\n\nclass CanvasWidget(Widget):\n    def on_touch_down(self, touch):\n        with self.canvas:\n            Color(*get_color_from_hex('#0080FF80'))\n            Line(circle=(touch.x, touch.y, 25), width=4)\n\nclass PaintApp(App):\n    def build(self):\n        return CanvasWidget()\n\nif __name__ == '__main__':\n    Config.set('graphics', 'width', '400')\n    Config.set('graphics', 'height', '400')\n    Config.set('input', 'mouse',\n               'mouse,disable_multitouch')\n\n    from kivy.core.window import Window\n    Window.clearcolor = get_color_from_hex('#FFFFFF')\n\n    PaintApp().run()\n```", "```py\n# In paint.kv\n<CanvasWidget>:\n    Button:\n        text: 'Delete'\n        right: root.right\n        top: root.top\n        width: 80\n        height: 40\n```", "```py\n# Caution: suboptimal approach!\ndef on_touch_down(self, touch):\n    for widget in self.children:\n        widget.on_touch_down(touch)\n```", "```py\ndef on_touch_down(self, touch):\n    if Widget.on_touch_down(self, touch):\n        return\n```", "```py\ndef clear_canvas(self):\n    self.canvas.clear()\n```", "```py\nButton:\n    on_release: root.clear_canvas()\n```", "```py\ndef clear_canvas(self):\n    self.canvas.clear()\n    self.canvas.children = [widget.canvas\n                            for widget in self.children]\n```", "```py\nclass CanvasWidget(Widget):\n    def clear_canvas(self):\n        saved = self.children[:]  # See below\n        self.clear_widgets()\n        self.canvas.clear()\n        for widget in saved:\n            self.add_widget(widget)\n```", "```py\nfrom kivy.graphics import Color, Line\n\nclass CanvasWidget(Widget):\n    def on_touch_down(self, touch):\n        if Widget.on_touch_down(self, touch):\n            return\n\n        with self.canvas:\n            Color(*get_color_from_hex('#0080FF80'))\n            touch.ud['current_line'] = Line(\n                points=(touch.x, touch.y), width=2)\n\n    def on_touch_move(self, touch):\n        if 'current_line' in touch.ud:\n            touch.ud['current_line'].points += (touch.x, touch.y)\n```", "```py\nBoxLayout:\n    orientation: 'horizontal'\n    padding: 3\n    spacing: 3\n    x: 0\n    y: 0\n    width: root.width\n    height: 40\n\n    ToggleButton:\n        group: 'color'\n        text: 'Red'\n\n    ToggleButton:\n        group: 'color'\n        text: 'Blue'\n        state: 'down'\n```", "```py\nfrom kivy.uix.behaviors import ToggleButtonBehavior\nfrom kivy.uix.togglebutton import ToggleButton\n\nclass RadioButton(ToggleButton):\n    def _do_press(self):\n        if self.state == 'normal':\n            ToggleButtonBehavior._do_press(self)\n```", "```py\n<ColorButton@RadioButton>:\n    group: 'color'\n    on_release: app.canvas_widget.set_color(self.background_color)\n    background_normal: 'color_button_normal.png'\n    background_down: 'color_button_down.png'\n    border: (3, 3, 3, 3)\n```", "```py\nclass PaintApp(App):\n    def build(self):\n        # The set_color() method will be implemented shortly.\n        self.canvas_widget = CanvasWidget()\n        self.canvas_widget.set_color(\n            get_color_from_hex('#2980B9'))\n        return self.canvas_widget\n```", "```py\ndef set_color(self, new_color):\n    self.canvas.add(Color(*new_color))\n```", "```py\n#:import C kivy.utils.get_color_from_hex\n```", "```py\nfrom kivy.utils import get_color_from_hex as C\n```", "```py\nBoxLayout:\n    # ...\n    ColorButton:\n        background_color: C('#2980b9')\n        state: 'down'\n\n    ColorButton:\n        background_color: C('#16A085')\n\n    ColorButton:\n        background_color: C('#27AE60')\n```", "```py\n<LineWidthButton@ColorButton>:\n    group: 'line_width'\n    on_release: app.canvas_widget.set_line_width(self.text)\n    color: C('#2C3E50')\n    background_color: C('#ECF0F1')\n```", "```py\nBoxLayout:\n    orientation: 'vertical'\n    padding: 2\n    spacing: 2\n    x: 0\n    top: root.top\n    width: 80\n    height: 110\n\n    LineWidthButton:\n        text: 'Thin'\n\n    LineWidthButton:\n        text: 'Normal'\n        state: 'down'\n\n    LineWidthButton:\n        text: 'Thick'\n```", "```py\nclass CanvasWidget(Widget):\n    line_width = 2\n\n    def on_touch_down(self, touch):\n        # ...\n        with self.canvas:\n            touch.ud['current_line'] = Line(\n                points=(touch.x, touch.y),\n                width=self.line_width)\n\n    def set_line_width(self, line_width='Normal'):\n        self.line_width = {\n 'Thin': 1, 'Normal': 2, 'Thick': 4\n }[line_width]\n\n```"]