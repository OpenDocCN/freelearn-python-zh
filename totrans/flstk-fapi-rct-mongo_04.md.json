["```py\npython – m venv venv\n```", "```py\nvenv/Scripts/activate\n```", "```py\nsource venv/bin/activate\n```", "```py\npip install httpie\n```", "```py\n(venv) http GET \"http://jsonplaceholder.typicode.com/todos/1\"\n```", "```py\npip install fastapi uvicorn\n```", "```py\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello FastAPI\"}\n```", "```py\nuvicorn chapter4_01:app --reload\n```", "```py\n(venv) http http://localhost:8000/\nHTTP/1.1 200 OK\ncontent-length: 27\ncontent-type: application/json date: Fri, 01 Apr 2022 17:35:48 GMT\nserver: uvicorn\n{\n  \"message\": \"Hello FastAPI\"\n}\n```", "```py\n@app.post(\"/\")\nasync def post_root():\n    return {\"message\": \"Post request success!\"}\n```", "```py\n(venv) http POST http://localhost:8000 HTTP/1.1 200 OK\ncontent-length: 35\ncontent-type: application/json date: Sat, 26 Mar 2022 12:49:25 GMT\nserver: uvicorn\n{\n    \"message\": \"Post request success!\"\n}\n```", "```py\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/car/{id}\")\n    async def root(id):\n        return {\"car_id\": id}\n    car/:id, while {id} is a standard Python string-formatted dynamic parameter in the sense that it can be anything—a string or a number since you haven’t used any hinting.\n    ```", "```py\n    (venv) http \"http://localhost:8000/car/1\"\n    HTTP/1.1 200 OK\n    content-length: 14\n    content-type: application/json date: Mon, 28 Mar 2022 20:31:58 GMT\n    server: uvicorn\n    {\n        \"car_id\": \"1\"\n    }\n    ```", "```py\n    (venv) http http://localhost:8000/car/billy HTTP/1.1 200 OK\n    {\n        \"car_id\": \"billy\"\n    }\n    ```", "```py\n    @app.get(\"/carh/{id}\")\n    async def hinted_car_id(id: int):\n        return {\"car_id\": id}\n    ```", "```py\n(venv) http http://localhost:8000/carh/ HTTP/1.1 404 Not Found\n{\n    \"detail\": \"Not Found\"\n}\n```", "```py\nfrom fastapi import FastAPI\napp = FastAPI()\n@app.get(\"/user/{id}\")\nasync def user(id: int):\n    return {\"User_id\": id}\n@app.get(\"/user/me\")\nasync def me_user():\n    return {\"User_id\": \"This is me!\"}\n```", "```py\nfrom enum import Enum\nfrom fastapi import FastAPI, Path\napp = FastAPI()\nclass AccountType(str, Enum):\n    FREE = \"free\"\n    PRO = \"pro\"\n```", "```py\n@app.get(\"/account/{acc_type}/{months}\")\nasync def account(acc_type: AccountType, months: int = Path(..., ge=3, le=12)):\n    return {\"message\": \"Account created\", \"account_type\": acc_type, \"months\": months}\n```", "```py\n    from fastapi import FastAPI\n    app = FastAPI()\n    @app.get(\"/cars/price\")\n    async def cars_by_price(min_price: int = 0, max_price: int = 100000):\n        return {\"Message\": f\"Listing cars with prices between {min_price} and {max_price}\"}\n    ```", "```py\n    (venv) http \"http://localhost:8000/cars/price?min_price=2000&max_price=4000\"\n    HTTP/1.1 200 OK\n    content-length: 60\n    content-type: application/json date: Mon, 28 Mar 2022 21:20:24 GMT\n    server: uvicorn\n    {\n    \"Message\": \"Listing cars with prices between 2000 and 4000\"\n    }\n    ```", "```py\nfrom typing import Dict\nfrom fastapi import FastAPI, Body\napp = FastAPI()\n@app.post(\"/cars\")\nasync def new_car(data: Dict = Body(...)):\n    print(data)\n    return {\"message\": data}\n```", "```py\n(venv) http POST \"http://localhost:8000/cars\" brand=\"FIAT\" model=\"500\" year=2015\nHTTP/1.1 200 OK\ncontent-length: 56\ncontent-type: application/json date: Mon, 28 Mar 2022 21:27:31 GMT\nserver: uvicorn\n{\n  \"message\": {\n  \"brand\": \"FIAT\",\n  \"model\": \"500\",\n  \"year\": \"2015\"\n}\n```", "```py\nfrom fastapi import FastAPI, Body\nfrom pydantic import BaseModel\nclass InsertCar(BaseModel):\n    brand: str\n    model: str\n    year: int\napp = FastAPI()\n@app.post(\"/cars\")\nasync def new_car(data: InsertCar):\n    print(data)\n    return {\"message\": data}\n```", "```py\nclass UserModel(BaseModel):\n    username: str\n    name: str\n```", "```py\n@app.post(\"/car/user\")\nasync def new_car_model(car: InsertCar, user: UserModel, code: int = Body(None)):\n    return {\"car\": car, \"user\": user, \"code\": code}\n```", "```py\nfrom fastapi import FastAPI, Request\napp = FastAPI()\n@app.get(\"/cars\")\nasync def raw_request(request: Request):\n    return {\"message\": request.base_url, \"all\": dir(request)}\n```", "```py\nfrom typing import Annotated\nfrom fastapi import FastAPI, Header\napp = FastAPI()\n@app.get(\"/headers\")\nasync def read_headers(user_agent: Annotated[str | None, Header()] = None):\n    return {\"User-Agent\": user_agent}\n```", "```py\n(venv) http GET \"http://localhost:8000/headers\"\nHTTP/1.1 200 OK\ncontent-length: 29\ncontent-type: application/json date: Sun, 27 Mar 2022 09:26:49 GMT\nserver: uvicorn\n{\n\"User-Agent\": \"HTTPie/3.2.2\"\n}\n```", "```py\npip install python-multipart==0.0.9\n```", "```py\nfrom fastapi import FastAPI, Form, File, UploadFile\napp = FastAPI()\n@app.post(\"/upload\")\nasync def upload(\n    file: UploadFile = File(...), brand: str = Form(...), model: str = Form(...)\n):\n    return {\"brand\": brand, \"model\": model, \"file_name\": file.filename}\n```", "```py\nhttp -f POST localhost:8000/upload  brand='Ferrari' model='Testarossa'  file@car.jpeg\n```", "```py\nHTTP/1.1 200 OK\ncontent-length: 63\ncontent-type: application/json\ndate: Fri, 22 Mar 2024 11:01:38 GMT\nserver: uvicorn\n{\n    \"brand\": \"Ferrari\",\n    \"file_name\": \"car.jpeg\",\n    \"model\": \"Testarossa\"\n}\n```", "```py\nimport shutil\nfrom fastapi import FastAPI, Form, File, UploadFile\napp = FastAPI()\n@app.post(\"/upload\")\nasync def upload(\n    picture: UploadFile = File(...),\n    brand: str = Form(...),\n    model: str = Form(...)\n):\n    with open(\"saved_file.png\", \"wb\") as buffer:\n        shutil.copyfileobj(picture.file, buffer)\n    return {\"brand\": brand, \"model\": model, \"file_name\": picture.filename}\n```", "```py\nfrom fastapi import FastAPI, status\napp = FastAPI()\n@app.get(\"/\", status_code=status.HTTP_208_ALREADY_REPORTED)\nasync def raw_fa_response():\n    return {\"message\": \"fastapi response\"}\n```", "```py\n(venv) http GET \"http://localhost:8000\"\nHTTP/1.1 208 Already Reported content-length: 30\ncontent-type: application/json date: Sun, 27 Mar 2022 20:14:25 GMT\nserver: uvicorn\n{\n    \"message\": \"fastapi response\"\n}\n```", "```py\nfrom pydantic import BaseModel\nfrom fastapi import Fastapi, HTTPException, status\napp = FastAPI()\nclass InsertCar(BaseModel):\n    brand: str\n    model: str\n    year: int\n@app.post(\"/carsmodel\")\nasync def new_car_model(car: InsertCar):\n    if car.year > 2022:\n        raise HTTPException(\n            status.HTTP_406_NOT_ACCEPTABLE, detail=\"The car doesn't exist yet!\"\n        )\n    return {\"message\": car}\n```", "```py\n(venv) λ http POST http://localhost:8000/carsmodel brand=\"fiat\" mode3\nl=\"500L\" year=2023\nHTTP/1.1 406 Not Acceptable content-length: 39\ncontent-type: application/json date: Tue, 29 Mar 2022 18:37:42 GMT\nserver: uvicorn\n{\n    \"detail\": \"The car doesn't exist yet!\"\n}\n```", "```py\nfrom typing import Annotated\nfrom fastapi import Depends, FastAPI\napp = FastAPI()\nasync def pagination(q: str | None = None, skip: int = 0, limit: int = 100):\n    return {\"q\": q, \"skip\": skip, \"limit\": limit}\n@app.get(\"/cars/\")\nasync def read_items(commons: Annotated[dict, Depends(pagination)]):\n    return commons\n@app.get(\"/users/\")\nasync def read_users(commons: Annotated[dict, Depends(pagination)]):\n    return commons\n```", "```py\n    from fastapi import FastAPI\n    from routers.cars import router as cars_router\n    from routers.user import router as users_router\n    app = FastAPI()\n    app.include_router(cars_router, prefix=\"/cars\", tags=[\"cars\"])\n    app.include_router(users_router, prefix=\"/users\", tags=[\"users\"])\n    ```", "```py\n    from fastapi import APIRouter\n    router = APIRouter()\n    @router.get(\"/\")\n    async def get_users():\n        return {\"message\": \"All users here\"}\n    ```", "```py\n    from fastapi import APIRouter\n    router = APIRouter()\n    @router.get(\"/\")\n    async def get_cars():\n        return {\"message\": \"All cars here\"}\n    ```", "```py\nuvicorn chapter4_17:app\n```", "```py\nfrom fastapi import FastAPI, Request\nfrom random import randint\napp = FastAPI()\n@app.middleware(\"http\")\nasync def add_random_header(request: Request, call_next):\n    number = randint(1,10)\n    response = await call_next(request)\n    response.headers[\"X-Random-Integer \"] = str(number)\n    return response\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello World\"}\n```"]