["```py\n#carexample1.py\nclass Car:\n    pass\n```", "```py\n#carexample1.py\nclass Car:\n    pass\nif __name__ == \"__main__\":\n    car = Car ()\n    car.color = \"blue\"\n    car.miles = 1000\n    print (car.color)\n    print (car.miles)\n```", "```py\n#carexample2.py\nclass Car:\n    c_mileage_units = \"Mi\"\n    def __init__(self, color, miles):\n        self.i_color = color\n        self.i_mileage = miles\nif __name__ == \"__main__\":\n    car1 = Car (\"blue\", 1000)\n    print (car.i_color)\n    print (car.i_mileage)\n    print (car.c_mileage_units)\n    print (Car.c_mileage_units)\n```", "```py\n#carexample3.py\n#class definition of Class Car is same as in carexample2.py\nif __name__ == \"__main__\":\n    car1 = Car (\"blue\", 1000)\n    car2 = Car(\"red\", 2000)\n    print(\"using car1: \" + car1.c_mileage_units)\n    print(\"using car2: \" + car2.c_mileage_units)\n    print(\"using Class: \" + Car.c_mileage_units)\n    car1.c_mileage_units = \"km\"\n    print(\"using car1: \" + car1.c_mileage_units)\n    print(\"using car2: \" + car2.c_mileage_units)\n    print(\"using Class: \" + Car.c_mileage_units)\n    Car.c_mileage_units = \"NP\"\n    print(\"using car1: \" + car1.c_mileage_units)\n    print(\"using car2: \" + car2.c_mileage_units)\n    print(\"using Class: \" + Car.c_mileage_units)\n```", "```py\n    class Name:\n        #non-parameterized constructor\n        Name class\n    ```", "```py\n    class Name:   \n        #parameterized constructor\n        def __init__(self, first, last):\n            self.i_first = first    \n            self.i_last = last\n    ```", "```py\ndef __del__(self):\nprint(\"Object is deleted.\")\n```", "```py\n#methodsexample1.py\nclass Car:\n    c_mileage_units = \"Mi\"\n    def __init__(self, color, miles):\n        self.i_color = color\n        self.i_mileage = miles\n    def print_color (self):\n        print (f\"Color of the car is {self.i_color}\")\n    @classmethod\n    def print_units(cls):\n        print (f\"mileage unit are {cls.c_mileage_unit}\")\n        print(f\"class name is {cls.__name__}\")\n    @staticmethod\n    def print_hello():\n        print (\"Hello from a static method\")\nif __name__ == \"__main__\":\n    car = Car (\"blue\", 1000)\n    car.print_color()\n    car.print_units()\n    car.print_hello()\n    Car.print_color(car);\n    Car.print_units();\n    Car.print_hello()\n```", "```py\nColor of the car is blue\nmileage unit are Mi\nclass name is Car\nHello from a static method\nColor of the car is blue\nmileage unit are Mi\nclass name is Car\nHello from a static method\n```", "```py\n#carexampl4.py\nclass Car:\n    def __init__(self, color, miles):\n        self.i_color = color\n        self.i_mileage = miles\nif __name__ == \"__main__\":\n    car = Car (\"blue\", 1000)\n    print (car)\n```", "```py\n<__main__.Car object at 0x100caae80>\n```", "```py\n#carexample4.py\nclass Car:\n    c_mileage_units = \"Mi\"\n    def __init__(self, color, miles):\n        self.i_color = color\n        self.i_mileage = miles\n    def __str__(self):\n        return f\"car with color {self.i_color} and \\\n         mileage {self.i_mileage}\"\nif __name__ == \"__main__\":\n    car = Car (\"blue\", 1000)\n    print (car)\n```", "```py\ncar with color blue and mileage 1000\n```", "```py\n#carwithinnerexample1.py\nclass Car:\n    \"\"\"outer class\"\"\"\n    c_mileage_units = \"Mi\"\n    def __init__(self, color, miles, eng_size):\n        self.i_color = color\n        self.i_mileage = miles\n        self.i_engine = self.Engine(eng_size)\n    def __str__(self):\n        return f\"car with color {self.i_color}, mileage \\\n        {self.i_mileage} and engine of {self.i_engine}\"\n    class Engine:\n        \"\"\"inner class\"\"\"\n        def __init__(self, size):\n            self.i_size = size\n        def __str__(self):\n            return self.i_size\nif __name__ == \"__main__\":\n    car = Car (\"blue\", 1000, \"2.5L\")\n    print(car)\n    print(car.i_engine.i_size)\n```", "```py\ncar with color blue, mileage 1000 and engine of 2.5L\n2.5L\n```", "```py\n#carexample5.py\nclass Car:\n    c_mileage_units = \"Mi\"\n    __max_speed = 200\n    def __init__(self, color, miles, model):\n        self.i_color = color\n        self.i_mileage = miles\n        self.__no_doors = 4\n        self._model = model\n    def __str__(self):\n        return f\"car with color {self.i_color}, mileage           {self.i_mileage}, model {self._model} and doors             {self.__doors()}\"\n    def __doors(self):\n        return self.__no_doors\nif __name__ == \"__main__\":\n    car = Car (\"blue\", 1000, \"Camry\")\n    print (car)\n```", "```py\nprint (Car._Car__max_speed)    \nprint (car._Car__doors())\nprint (car._model)         \n```", "```py\n#carexample6.py\nclass Car:\n    __mileage_units = \"Mi\"\n    def __init__(self, col, mil):\n        self.__color = col\n        self.__mileage = mil\n    def __str__(self):\n        return f\"car with color {self.get_color()} and \\\n         mileage {self.get_mileage()}\"\n    def get_color(self):\n        return self.__color\n    def get_mileage(self):\n        return self.__mileage\n    def set_mileage (self, new_mil):\n            self.__mileage = new_mil\nif __name__ == \"__main__\":\n    car = Car (\"blue\", 1000)\n    print (car)\n    print (car.get_color())\n    print(car.get_mileage())\n    car.set_mileage(2000)\n    print (car.get_color())\n    print(car.get_mileage())\n```", "```py\ncarexample7.py\nclass Car:\n    __mileage_units = \"Mi\"\n    def __init__(self, col, mil):\n        self.__color = col\n        self.__mileage = mil\n    def __str__(self):\n        return f\"car with color {self.color} and mileage \\\n         {self.mileage}\"\n    @property\n    def color(self):\n        return self.__color\n    @property\n    def mileage(self):\n        return self.__mileage\n    @mileage.setter\n    def mileage (self, new_mil):\n            self.__mileage = new_mil\nif __name__ == \"__main__\":\n    car = Car (\"blue\", 1000)\n    print (car)\n    print (car.color)\n    print(car.mileage)\n    car.mileage = 2000\n    print (car.color)\n    print(car.mileage)\n```", "```py\nclass BaseClass:\n    <attributes and methods of the base class >\nclass ChildClass (BaseClass):\n    <attributes and methods of the child class >\n```", "```py\n#inheritance1.py\nclass Vehicle:\n    def __init__(self, color):\n        self.i_color = color\n    def print_vehicle_info(self):\n        print(f\"This is vehicle and I know my color is \\\n         {self.i_color}\")\nclass Car (Vehicle):\n    def __init__(self, color, seats):\n        self.i_color = color\n        self.i_seats = seats\n    def print_me(self):\n        print( f\"Car with color {self.i_color} and no of \\\n         seats {self.i_seats}\")\nclass Truck (Vehicle):\n    def __init__(self, color, capacity):\n        self.i_color = color\n        self.i_capacity = capacity\n    def print_me(self):\n        print( f\"Truck with color {self.i_color} and \\\n         loading capacity {self.i_capacity} tons\")\nif __name__ == \"__main__\":\n    car = Car (\"blue\", 5)\n    car.print_vehicle_info()\n    car.print_me()\n    truck = Truck(\"white\", 1000)\n    truck.print_vehicle_info()\n    truck.print_me()\n```", "```py\nThis is vehicle and I know my color is blue\nCar with color blue and no of seats 5\nThis is vehicle and I know my color is white\nTruck with color white and loading capacity 1000 tons \n```", "```py\n #inheritance2.py\nclass Vehicle:\n    def __init__(self, color):\n        self.i_color = color\n    def print_vehicle_info(self):\n        print( f\"This is vehicle and I know my color is \\\n         {self.i_color}\")\nclass Engine:\n    def __init__(self, size):\n        self.i_size = size\n    def print_engine_info(self):\n        print(f\"This is Engine and I know my size is \\\n         {self.i_size}\")\nclass Car (Vehicle, Engine):\n    def __init__(self, color, size, seat):\n        self.i_color = color\n        self.i_size = size\n        self.i_seat = seat\n    def print_car_info(self):\n        print(f\"This car of color {self.i_color} with \\\n         seats {self.i_seat} with engine of size \\\n         {self.i_size}\")\nif __name__ == \"__main__\":\n    car = Car (\"blue\", \"2.5L\", 5 )\n    car.print_vehicle_info()\n    car.print_engine_info()\n    car.print_car_info()\n```", "```py\nThis is vehicle and I know my color is blue\nCar with color blue and no of seats 5\nThis is vehicle and I know my color is white\nTruck with color white and loading capacity 1000 tons\n```", "```py\n#methodoverloading1.py\nclass Car:\n    def __init__(self, color, seats):\n        self.i_color = color\n        self.i_seat = seats\n    def print_me(self, i='basic'):\n        if(i =='basic'):\n            print(f\"This car is of color {self.i_color}\")\n        else:\n            print(f\"This car is of color {self.i_color} \\\n             with seats {self.i_seat}\")\n\nif __name__ == \"__main__\":\n    car = Car(\"blue\", 5 )\n    car.print_me()\n    car.print_me('blah')\n    car.print_me('detail')\n```", "```py\nThis car is of color blue\nThis car is of color blue with seats 5\nThis car is of color blue with seats 5\n```", "```py\n#methodoverriding1.py\nclass Vehicle:\n    def __init__(self, color):\n        self.i_color = color\n    def print_me(self):\n        print(f\"This is vehicle and I know my color is \\\n         {self.i_color}\")\nclass Car (Vehicle):\n    def __init__(self, color, seats):\n        self.i_color = color\n        self.i_seats = seats\n    def print_me(self):\n        print( f\"Car with color {self.i_color} and no of \\\n         seats {self.i_seats}\")\nclass Truck (Vehicle):\n    def __init__(self, color, capacity):\n        self.i_color = color\n        self.i_capacity = capacity\n    def print_me(self):\n        print( f\"Truck with color {self.i_color} and \\\n         loading capacity {self.i_capacity} tons\")\nif __name__ == \"__main__\":\n    vehicle = Vehicle(\"red\")\n    vehicle.print_me()\n    car = Car (\"blue\", 5)\n    car.print_me()\n    truck = Truck(\"white\", 1000)\n    truck.print_me()\n```", "```py\nThis is vehicle and I know my color is red\nCar with color blue and no of seats 5\nTruck with color white and loading capacity 1000 tons\n```", "```py\n#abstraction1.py\nfrom abc import ABC, abstractmethod\nclass Vehicle(ABC):\n    def hello(self):\n        print(f\"Hello from abstract class\")\n    @abstractmethod\n    def print_me(self):\n       pass\nclass Car (Vehicle):\n    def __init__(self, color, seats):\n        self.i_color = color\n        self.i_seats = seats\n\n    \"\"\"It is must to implemented this method\"\"\"\n    def print_me(self):\n        print( f\"Car with color {self.i_color} and no of \\\n         seats {self.i_seats}\")\nif __name__ == \"__main__\":\n   # vehicle = Vehicle()    #not possible\n   # vehicle.hello()\n    car = Car (\"blue\", 5)\n    car.print_me()\n    car.hello()\n```", "```py\nCan't instantiate abstract class Vehicle with abstract methods print_me\n```", "```py\n#composition1.py\nclass Seat:\n    def __init__(self, type):\n        self.i_type = type\n    def __str__(self):\n        return f\"Seat type: {self.i_type}\"\nclass Engine:\n    def __init__(self, size):\n        self.i_size = size\n    def __str__(self):\n        return f\"Engine: {self.i_size}\"\nclass Car:\n    def __init__(self, color, eng_size, seat_type):\n        self.i_color = color\n        self.engine = Engine(eng_size)\n        self.seat = Seat(seat_type)\n    def print_me(self):\n        print(f\"This car of color {self.i_color} with \\\n         {self.engine} and {self.seat}\")\nif __name__ == \"__main__\":\n    car = Car (\"blue\", \"2.5L\", \"leather\" )\n    car.print_me()\n    print(car.engine)\n    print(car.seat)\n    print(car.i_color)\n    print(car.engine.i_size)\n    print(car.seat.i_type)\n```", "```py\nThis car of color blue with Engine: 2.5L and Seat type: leather\nEngine: 2.5L\nSeat type: leather\nblue\n2.5L\nleather\n```", "```py\n#ducttype1.py\nclass Car:\n    def start(self):\n        print (\"start engine by ignition /battery\")\nclass Cycle:\n    def start(self):\n        print (\"start by pushing paddles\")\nclass Horse:\n    def push(self):\n        print (\"start by pulling/releasing the reins\")\nif __name__ == \"__main__\":\n    for obj in Car(), Cycle(), Horse():\n        obj.start()\n```"]