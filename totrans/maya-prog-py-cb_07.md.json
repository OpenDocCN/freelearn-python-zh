["```py\nimport maya.cmds as cmds\n\ndef createLightRig():\n\n    offsetAmount = 10\n    lightRotation = 30\n\n    newLight = cmds.spotLight(rgb=(1, 1, 1), name=\"KeyLight\")\n    lightTransform = cmds.listRelatives(newLight, parent=True)\n    keyLight = lightTransform[0]\n\n    newLight = cmds.spotLight(rgb=(0.8, 0.8, 0.8), name=\"FillLight\")\n    lightTransform = cmds.listRelatives(newLight, parent=True)\n    fillLight = lightTransform[0]\n\n    newLight = cmds.directionalLight(rgb=(0.2, 0.2, 0.2), name=\"BackLight\")\n    lightTransform = cmds.listRelatives(newLight, parent=True)\n    backLight = lightTransform[0]\n\n    cmds.move(0, 0, offsetAmount, keyLight)\n    cmds.move(0, 0, 0, keyLight + \".rotatePivot\")\n    cmds.rotate(-lightRotation, lightRotation, 0, keyLight)\n\n    cmds.move(0, 0, offsetAmount, fillLight)\n    cmds.move(0, 0, 0, fillLight + \".rotatePivot\")\n    cmds.rotate(-lightRotation, -lightRotation, 0, fillLight)\n\n    cmds.move(0, 0, offsetAmount, backLight)\n    cmds.move(0, 0, 0, backLight + \".rotatePivot\")\n    cmds.rotate(180 + lightRotation, 0, 0, backLight)\n\n    rigNode = cmds.group(empty=True, name=\"LightRig\")\n\n    cmds.parent(keyLight, rigNode)\n    cmds.parent(fillLight, rigNode)\n    cmds.parent(backLight, rigNode)\n\n    cmds.select(rigNode, replace=True)\n\ncreateLightRig()\n```", "```py\noffsetAmount = 10\nlightRotation = 30\n```", "```py\nnewLight = cmds.spotLight(rgb=(1, 1, 1), name=\"KeyLight\")\n```", "```py\nlightTransform = cmds.listRelatives(newLight, parent=True)\n```", "```py\nkeyLight = lightTransform[0]\n```", "```py\nnewLight = cmds.spotLight(rgb=(0.8, 0.8, 0.8), name=\"FillLight\")\nlightTransform = cmds.listRelatives(newLight, parent=True)\nfillLight = lightTransform[0]\n```", "```py\nnewLight = cmds.directionalLight(rgb=(0.2, 0.2, 0.2), name=\"BackLight\")\nlightTransform = cmds.listRelatives(newLight, parent=True)\nbackLight = lightTransform[0]\n```", "```py\ncmds.move(0, 0, offsetAmount, keyLight)\n```", "```py\ncmds.move(0, 0, 0, keyLight + \".rotatePivot\")\n```", "```py\ncmds.rotate(-lightRotation, lightRotation, 0, keyLight)\n```", "```py\ncmds.move(0, 0, offsetAmount, fillLight)\ncmds.move(0, 0, 0, fillLight + \".rotatePivot\")\ncmds.rotate(-lightRotation, -lightRotation, 0, fillLight)\n```", "```py\ncmds.move(0, 0, offsetAmount, backLight)\ncmds.move(0, 0, 0, backLight + \".rotatePivot\")\ncmds.rotate(180 + lightRotation, 0, 0, backLight)\n```", "```py\nrigNode = cmds.group(empty=True, name=\"LightRig\")\n```", "```py\ncmds.parent(keyLight, rigNode)\ncmds.parent(fillLight, rigNode)\ncmds.parent(backLight, rigNode)\n```", "```py\ncmds.select(rigNode, replace=True)\n```", "```py\n    keyLightShape = cmds.spotLight(rgb=(1, 1, 1), intensity=1, name=\"KeyLight\")\n    fillLightShape = cmds.spotLight(rgb=(1,1,1), intensity=0.8, name=\"FillLight\")\n    backLightShape = cmds.directionalLight(rgb=(1,1,1), intensity=0.2, name=\"BackLight\")\n```", "```py\ncmds.setAttr(keyLightShape + \".intensity\", 0.5)\n```", "```py\ndef createLightRig():\n    offsetAmount = 10\n    lighRotation = 30\n    newLight = cmds.spotLight(rgb=(1, 1, 1), name=\"KeyLight\")\n    # rest of script\n```", "```py\ndef createLightRig(offsetAmount, lightRotation):\n    newLight = cmds.spotLight(rgb=(1, 1, 1), name=\"KeyLight\")\n    # rest of script\n```", "```py\nimport maya.cmds as cmds\nfrom functools import partial\n\nclass LightBoard():\n\n    def __init__(self):\n\n        self.lights = []\n        self.lightControls = []\n        self.lightNum = 0\n\n        if (cmds.window(\"ahLightRig\", exists=True)):\n            cmds.deleteUI(\"ahLightRig\")\n\n        self.win = cmds.window(\"ahLightRig\", title=\"Light Board\")\n        cmds.columnLayout()\n\n        lights = cmds.ls(lights=True)\n\n        for light in lights:\n            self.createLightControl(light)\n\n        cmds.showWindow(self.win)\n\n    def updateColor(self, lightID, *args):\n        newColor = cmds.colorSliderGrp(self.lightControls[lightID], query=True, rgb=True)\n        cmds.setAttr(self.lights[lightID]+ '.color', newColor[0], newColor[1], newColor[2], type=\"double3\")\n\n    def createLightControl(self, lightShape):\n\n        parents = cmds.listRelatives(lightShape, parent=True)\n        lightName = parents[0]\n\n        color = cmds.getAttr(lightShape + '.color')\n        changeCommandFunc = partial(self.updateColor, self.lightNum)\n\n        newSlider = cmds.colorSliderGrp(label=lightName, rgb=color[0], changeCommand=changeCommandFunc)\n\n        self.lights.append(lightShape)\n        self.lightControls.append(newSlider)\n\n        self.lightNum += 1\n\nLightBoard()\n```", "```py\nimport maya.cmds as cmds\nfrom functools import partial\n```", "```py\ndef __init__(self):\n\n    self.lights = []\n    self.lightControls = []\n    self.lightNum = 0\n```", "```py\n        if (cmds.window(\"ahLightRig\", exists=True)):\n            cmds.deleteUI(\"ahLightRig\")\n```", "```py\nself.win = cmds.window((\"ahLightRig\", title=\"Light Board\")\ncmds.columnLayout()\n```", "```py\nlights = cmds.ls(lights=True)\n```", "```py\nfor light in lights:\n    self.createLightControl(light)\n\ncmds.showWindow(self.win)\n```", "```py\ndef updateColor(self, lightID, *args):\n    newColor = cmds.colorSliderGrp(self.lightControls[lightID], query=True, rgb=True)\n    cmds.setAttr(self.lights[lightID]+ '.color', newColor[0], newColor[1], newColor[2], type=\"double3\")\n```", "```py\nnewColor = cmds.colorSliderGrp(self.lightControls[lightID], query=True, rgb=True)\n```", "```py\ncmds.setAttr(self.lights[lightID]+ '.color', newColor[0], newColor[1], newColor[2], type=\"double3\")\n```", "```py\nself.updateColor(0)\n```", "```py\n    def createLightControl(self, lightShape):\n```", "```py\nparents = cmds.listRelatives(lightShape, parent=True)\nlightName = parents[0]\n```", "```py\ncolor = cmds.getAttr(light + '.color')\n```", "```py\nnewSlider = cmds.colorSliderGrp(label=lightName, rgb=color[0], changeCommand=self.someFunction)\n```", "```py\nnewSlider = cmds.colorSliderGrp(label=lightName, rgb=color[0], changeCommand=self.updateColor(0))\n```", "```py\nchangeCommandFunc = partial(self.updateColor, self.lightNum)\n```", "```py\ndef printANum(number):\n    print(number)\n```", "```py\nnewFunction = partial(printANum, 23)\n```", "```py\nnewSlider = cmds.colorSliderGrp(label=lightName, rgb=color[0], changeCommand=changeCommandFunc)\n```", "```py\nself.lights.append(light)\nself.lightControls.append(newSlider)\n```", "```py\nself.lightNum += 1\n```", "```py\nLightBoard()\n```", "```py\nimport maya.cmds as cmds\n\ndef makeCameraRig():\n    aimLoc = cmds.spaceLocator()\n\n    offset = 10\n\n    for i in range(0, 4):\n        newCam = cmds.camera(orthographic=True)\n        cmds.aimConstraint(aimLoc[0], newCam[0], aimVector=(0,0,- 1))\n\n        xpos = 0\n        ypos = 6\n        zpos = 0\n\n        if (i % 2 == 0):\n            xpos = -offset\n        else:\n            xpos = offset\n\n        if (i >= 2):\n            zpos = -offset\n        else:\n            zpos = offset\n\n        cmds.move(xpos, ypos, zpos, newCam[0])\n\nmakeCameraRig()\n```", "```py\naimLoc = cmds.spaceLocator()\n```", "```py\nfor i in range(0, 4):\n    newCam = cmds.camera(orthographic=True)\n```", "```py\ncmds.aimConstraint(aimLoc[0], newCam[0], aimVector=(0,0,-1))\n```", "```py\nxpos = 0\nypos = 6\nzpos = 0\n```", "```py\nif (i % 2 == 0):\n    xpos = -offset\nelse:\n    xpos = offset\n\nif (i >= 2):\n    zpos = -offset\nelse:\n    zpos = offset\n```", "```py\ncmds.move(xpos, ypos, zpos, newCam[0])\n```", "```py\nnewCam = cmds.camera()\ncmds.viewPlace(newCam[0], eye=(5,6,5), lookAt=(0, 2, 0))\n```", "```py\nimport maya.cmds as cmds\nimport os\nfrom PIL import Image\n\nFRAME_WIDTH = 400\nFRAME_HEIGHT = 300\n\ndef renderSpriteSheet():\n    allCams = cmds.listCameras()\n\n    customCams = []\n\n    for cam in allCams:\n        if (cam not in [\"front\", \"persp\", \"side\", \"top\"]):\n            customCams.append(cam)\n\n    # make sure we're rendering TGAs\n    cmds.setAttr(\"defaultRenderGlobals.imageFormat\", 19)\n\n    # create a new image\n    fullImage = Image.new(\"RGBA\", (FRAME_WIDTH*len(customCams), FRAME_HEIGHT), \"black\")\n\n    # run through each camera, rendering the view and adding it to the mage\n        for i in range(0, len(customCams)):\n        result = cmds.render(customCams[i], x=FRAME_WIDTH, y=FRAME_HEIGHT)\n        tempImage = Image.open(result)\n        fullImage.paste(tempImage, (i*FRAME_WIDTH,0))\n\n    basePath = cmds.workspace(query=True, rootDirectory=True)\n    fullPath = os.path.join(basePath, \"images\", \"frames.tga\")\n    fullImage.save(fullPath)\n\nrenderSpriteSheet()\n```", "```py\nimport maya.cmds as cmds\nimport os\nfrom PIL import Image\n```", "```py\nFRAME_WIDTH = 400\nFRAME_HEIGHT = 300\n```", "```py\nallCams = cmds.listCameras()\n```", "```py\ncustomCams = []\n\nfor cam in allCams:\n    if (cam not in [\"front\", \"persp\", \"side\", \"top\"]):\n        customCams.append(cam)\n```", "```py\n    cmds.setAttr(\"defaultRenderGlobals.imageFormat\", 19)\n```", "```py\nfullImage = Image.new(\"RGBA\", (FRAME_WIDTH*len(customCams), FRAME_HEIGHT), \"black\")\n```", "```py\nresult = cmds.render(customCams[i], x=FRAME_WIDTH, y=FRAME_HEIGHT)\n```", "```py\ntempImg = Image.open(result)\n```", "```py\nfullImage.paste(tempImg, (i*FRAME_WIDTH,0))\n```", "```py\nbasePath = cmds.workspace(query=True, rootDirectory=True)\n```", "```py\nfullPath = os.path.join(basePath, \"images\", \"frames.tga\")\n```", "```py\nfullImage.save(fullPath)\n```"]