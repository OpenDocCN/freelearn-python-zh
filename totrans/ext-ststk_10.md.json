["```py\n'''\nSend events covering nspawn containers\n\nThis beacon accepts a list of containers and whether they should be\nrunning or absent:\n\nbeacons:\n  nspawn:\n    vsftpd: absent\n    httpd: running\n\nThis file should be saved as salt/beacons/nspawn.py\n'''\n__virtualname__ = 'nspawn'\n\ndef __virtual__():\n    '''\n    Ensure that systemd-nspawn is available\n    '''\n    if 'nspawn.list_running' in __salt__:\n        return __virtualname__\n    return False\n```", "```py\ndef validate(config):\n    '''\n    Validate the beacon configuration\n    '''\n    if not isinstance(config, dict):\n        return False\n    return True\n```", "```py\ndef validate(config):\n    '''\n    Validate the beacon configuration\n    '''\n    if not isinstance(config, dict):\n        return False\n    for key in config:\n        if config[key] not in ('running', 'absent'):\n            return False\n    return True\n```", "```py\n# machinectl list\nMACHINE       CLASS     SERVICE \nvsftpd         container systemd-nspawn\n\n1 machines listed.\n\n```", "```py\ndef beacon(config):\n    '''\n    Scan for nspawn containers and fire events\n    '''\n    nodes = __salt__['nspawn.list_running']()\n    ret = []\n    for name in config:\n        if config[name] == 'running':\n            if name not in nodes:\n                ret.append({name: 'Absent'})\n        elif config[name] == 'absent':\n            if name in nodes:\n                ret.append({name: 'Running'})\n        else:\n            if name not in nodes:\n                ret.append({name: False})\n\n    return ret\n```", "```py\nbeacons:\n  nspawn:\n    vsftpd: present\n    httpd: absent\n    interval: 30\n```", "```py\nimport time\ndef beacon(config):\n    '''\n    Scan for nspawn containers and fire events\n    '''\n    interval = __salt__['config.get']('nspawn_alert_interval', 360)\n    now = int(time.time())\n\n    nodes = __salt__['nspawn.list_running']()\n    ret = []\n    for name in config:\n        lasttime = __grains__.get('nspawn_last_notify', {}).get(name, 0)\n        if config[name] == 'running':\n            if name not in nodes:\n                if now - lasttime >= interval:\n                    ret.append({name: 'Absent'})\n                    __salt__['grains.setval']('nspawn_last_notify', {name: now})\n        elif config[name] == 'absent':\n            if name in nodes:\n                if now - lasttime >= interval:\n                    ret.append({name: 'Running'})\n                    __salt__['grains.setval']('nspawn_last_notify', {name: now})\n        else:\n            if name not in nodes:\n                if now - lasttime >= interval:\n                    ret.append({name: False})\n                        __salt__['grains.setval']('nspawn_last_notify', {name: now})\n\n    return ret\n```", "```py\nsalt/beacon/alton/nspawn/\t{\n    \"_stamp\": \"2016-01-17T17:48:48.986662\",\n    \"data\": {\n        \"vsftpd\": \"Present\",\n        \"id\": \"alton\"\n    },\n    \"tag\": \"salt/beacon/alton/nspawn/\"\n}\n```", "```py\n'''\nSend events covering nspawn containers\n\nThis beacon accepts a list of containers and whether they should be\nrunning or absent:\n\n    .. code-block:: yaml\n\n        beacons:\n          nspawn:\n            vsftpd: running\n            httpd: absent\n\nThis file should be saved as salt/beacons/nspawn.py\n'''\nimport time\n\n__virtualname__ = 'nspawn'\n\ndef __virtual__():\n    '''\n    Ensure that systemd-nspawn is available\n    '''\n    if 'nspawn.list_running' in __salt__:\n        return __virtualname__\n    return False\n\ndef validate(config):\n    '''\n    Validate the beacon configuration\n    '''\n    if not isinstance(config, dict):\n        return False\n    for key in config:\n        if config[key] not in ('running', 'absent'):\n            return False\n    return True\n\ndef beacon(config):\n    '''\n    Scan for nspawn containers and fire events\n    '''\n    interval = __salt__['config.get']('nspawn_alert_interval', 360)\n    now = int(time.time())\n\n    nodes = __salt__['nspawn.list_running']()\n    ret = []\n    for name in config:\n        lasttime = __grains__.get('nspawn_last_notify', {}).get(name, 0)\n        if config[name] == 'running':\n            if name not in nodes:\n                if now - lasttime >= interval:\n                    ret.append({name: 'Absent'})\n                    __salt__['grains.setval']('nspawn_last_notify', {name: now})\n        elif config[name] == 'absent':\n            if name in nodes:\n                if now - lasttime >= interval:\n                    ret.append({name: 'Running'})\n                    __salt__['grains.setval']('nspawn_last_notify', {name: now})\n        else:\n            if name not in nodes:\n                if now - lasttime >= interval:\n                    ret.append({name: False})\n                    __salt__['grains.setval']('nspawn_last_notify', {name: now})\n\n    return ret\n```", "```py\n# salt-minion -l debug\n\n```", "```py\n[INFO    ] Executing command 'machinectl --no-legend --no-pager list' in directory '/root'\n[DEBUG   ] stdout: vsftpd container systemd-nspawn\n[INFO    ] Executing command 'machinectl --no-legend --no-pager list' in directory '/root'\n[DEBUG   ] stdout: vsftpd container systemd-nspawn\n[INFO    ] Executing command 'machinectl --no-legend --no-pager list' in directory '/root'\n[DEBUG   ] stdout: vsftpd container systemd-nspawn\n\n```", "```py\n# salt-r\nun state.event pretty=True\n\n```", "```py\nsalt/beacon/alton/nspawn/\t{\n    \"_stamp\": \"2016-01-17T17:48:48.986662\",\n    \"data\": {\n        \"ftp-container\": \"Present\",\n        \"id\": \"alton\"\n    },\n    \"tag\": \"salt/beacon/alton/nspawn/\"\n}\n```"]