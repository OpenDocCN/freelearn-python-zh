["```py\n# conditional.1.py\nlate = True\nif late:\n    print(\"I need to call my manager!\") \n```", "```py\n$ python conditional.1.py\nI need to call my manager! \n```", "```py\n# conditional.2.py\nlate = False\nif late:\n    print(\"I need to call my manager!\")  # 1\nelse:\n    print(\"no need to call my manager...\")  # 2 \n```", "```py\n$ python conditional.2.py\nno need to call my manager... \n```", "```py\n# taxes.py\nincome = 15000\nif income < 10000:\n    tax_coefficient = 0.0  # 1\nelif income < 30000:\n    tax_coefficient = 0.2  # 2\nelif income < 100000:\n    tax_coefficient = 0.35  # 3\nelse:\n    tax_coefficient = 0.45  # 4\nprint(f\"You will pay: ${income * tax_coefficient} in taxes\") \n```", "```py\n$ python taxes.py\nYou will pay: $3000.0 in taxes \n```", "```py\n# errorsalert.py\nalert_system = \"console\"  # other value can be \"email\"\nerror_severity = \"critical\"  # other values: \"medium\" or \"low\"\nerror_message = \"Something terrible happened!\"\nif alert_system == \"console\":  # outer\n    print(error_message)  # 1\nelif alert_system == \"email\":\n    if error_severity == \"critical\":  # inner\n        send_email(\"admin@example.com\", error_message)  # 2\n    elif error_severity == \"medium\":\n        send_email(\"support.1@example.com\", error_message)  # 3\n    else:\n        send_email(\"support.2@example.com\", error_message)  # 4 \n```", "```py\n# ternary.py\norder_total = 247  # GBP\n# classic if/else form\nif order_total > 100:\n    discount = 25  # GBP\nelse:\n    discount = 0  # GBP\nprint(order_total, discount) \n```", "```py\n# ternary.py\n# ternary operator\ndiscount = 25 if order_total > 100 else 0\nprint(order_total, discount) \n```", "```py\ndiscount = order_total > 100 ? 25 : 0; \n```", "```py\n# match.py\nday_number = 4\n**match** day_number:\n    **case** 1 | 2 | 3 | 4 | 5:\n        print(\"Weekday\")\n    **case** 6:\n        print(\"Saturday\")\n    **case** 7:\n        print(\"Sunday\")\n    **case** _:\n        print(f\"{day_number} is not a valid day number\") \n```", "```py\n# simple.for.py\nfor number in [0, 1, 2, 3, 4]:\n    print(number) \n```", "```py\n# simple.for.py\nfor number in range(5):\n    print(number) \n```", "```py\n>>> list(range(10))  # one value: from 0 to value (excluded)\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n>>> list(range(3, 8))  # two values: from start to stop (excluded)\n[3, 4, 5, 6, 7]\n>>> list(range(-10, 10, 4))  # three values: step is added\n[-10, -6, -2, 2, 6] \n```", "```py\n# simple.for.2.py\nsurnames = [\"Rivest\", \"Shamir\", \"Adleman\"]\nfor position in range(len(surnames)):\n    print(position, surnames[position]) \n```", "```py\n$ python simple.for.2.py\n0 Rivest\n1 Shamir\n2 Adleman \n```", "```py\n# simple.for.3.py\nsurnames = [\"Rivest\", \"Shamir\", \"Adleman\"]\nfor surname in surnames:\n    print(surname) \n```", "```py\n# simple.for.4.py\nsurnames = [\"Rivest\", \"Shamir\", \"Adleman\"]\nfor position, surname in enumerate(surnames):\n    print(position, surname) \n```", "```py\n# multiple.sequences.py\npeople = [\"Nick\", \"Rick\", \"Roger\", \"Syd\"]\nages = [23, 24, 23, 21]\nfor position in range(len(people)):\n    person = people[position]\n    age = ages[position]\n    print(person, age) \n```", "```py\n$ python multiple.sequences.py\nNick 23\nRick 24\nRoger 23\nSyd 21 \n```", "```py\n# multiple.sequences.enumerate.py\npeople = [\"Nick\", \"Rick\", \"Roger\", \"Syd\"]\nages = [23, 24, 23, 21]\nfor position, person in enumerate(people):\n    age = ages[position]\n    print(person, age) \n```", "```py\n# multiple.sequences.zip.py\npeople = [\"Nick\", \"Rick\", \"Roger\", \"Syd\"]\nages = [23, 24, 23, 21]\nfor person, age in zip(people, ages):\n    print(person, age) \n```", "```py\n# multiple.sequences.unpack.py\npeople = [\"Nick\", \"Rick\", \"Roger\", \"Syd\"]\nages = [23, 24, 23, 21]\ninstruments = [\"Drums\", \"Keyboards\", \"Bass\", \"Guitar\"]\nfor person, age, instrument in zip(people, ages, instruments):\n    print(person, age, instrument) \n```", "```py\n$ python multiple.sequences.unpack.py\nNick 23 Drums\nRick 24 Keyboards\nRoger 23 Bass\nSyd 21 Guitar \n```", "```py\n# multiple.sequences.tuple.py\npeople = [\"Nick\", \"Rick\", \"Roger\", \"Syd\"]\nages = [23, 24, 23, 21]\ninstruments = [\"Drums\", \"Keyboards\", \"Bass\", \"Guitar\"]\nfor data in zip(people, ages, instruments):\n    print(data) \n```", "```py\n# binary.py\nn = 39\nremainders = []\nwhile **n >** **0**:\n    remainder = n % 2  # remainder of division by 2\n    remainders.append(remainder)  # we keep track of remainders\n    n //= 2  # we divide n by 2\nremainders.reverse()\nprint(remainders) \n```", "```py\n# binary.2.py\nn = 39\nremainders = []\nwhile n > 0:\n    **n, remainder =** **divmod****(n,** **2****)**\n    remainders.append(remainder)\nremainders.reverse()\nprint(remainders) \n```", "```py\n# multiple.sequences.while.py\npeople = [\"Nick\", \"Rick\", \"Roger\", \"Syd\"]\nages = [23, 24, 23, 21]\n**position =** **0**\nwhile **position <** **len****(people)**:\n    person = people[position]\n    age = ages[position]\n    print(person, age)\n    **position +=** **1** \n```", "```py\n# discount.py\nfrom datetime import date, timedelta\ntoday = date.today()\ntomorrow = today + timedelta(days=1)  # today + 1 day is tomorrow\nproducts = [\n    {\"sku\": \"1\", \"expiration_date\": today, \"price\": 100.0},\n    {\"sku\": \"2\", \"expiration_date\": tomorrow, \"price\": 50},\n    {\"sku\": \"3\", \"expiration_date\": today, \"price\": 20},\n]\nfor product in products:\n    print(\"Processing sku\", product[\"sku\"])\n    if product[\"expiration_date\"] != today:\n        **continue**\n    product[\"price\"] *= 0.8  # equivalent to applying 20% discount\n    print(\"Sku\", product[\"sku\"], \"price is now\", product[\"price\"]) \n```", "```py\n$ python discount.py\nProcessing sku 1\nSku 1 price is now 80.0\nProcessing sku 2\nProcessing sku 3\nSku 3 price is now 16.0 \n```", "```py\n# any.py\nitems = [0, None, 0.0, True, 0, 7]  # True and 7 evaluate to True\nfound = False  # this is called a \"flag\"\nfor item in items:\n    print(\"scanning item\", item)\n    if item:\n        found = True  # we update the flag\n        **break**\nif found:  # we inspect the flag\n    print(\"At least one item evaluates to True\")\nelse:\n    print(\"All items evaluate to False\") \n```", "```py\n$ python any.py\nscanning item 0\nscanning item None\nscanning item 0.0\nscanning item True\nAt least one item evaluates to True \n```", "```py\n# for.no.else.py\nclass DriverException(Exception):\n    pass\npeople = [(\"James\", 17), (\"Kirk\", 9), (\"Lars\", 13), (\"Robert\", 8)]\ndriver = None\nfor person, age in people:\n    if age >= 18:\n        driver = (person, age)\n        break\nif driver is None:\n    raise DriverException(\"Driver not found.\") \n```", "```py\n# for.else.py\nclass DriverException(Exception):\n    pass\npeople = [(\"James\", 17), (\"Kirk\", 9), (\"Lars\", 13), (\"Robert\", 8)]\nfor person, age in people:\n    if age >= 18:\n        driver = (person, age)\n        break\nelse:\n    raise DriverException(\"Driver not found.\") \n```", "```py\n>>> name = \"heinrich\"\n>>> \n```", "```py\n# walrus.if.py\nremainder = value % modulus\nif remainder:\n    print(f\"Not divisible! The remainder is {remainder}.\") \n```", "```py\n# walrus.if.py\nif remainder := value % modulus:\n    print(f\"Not divisible! The remainder is {remainder}.\") \n```", "```py\n# menu.no.walrus.py\nflavors = [\"pistachio\", \"malaga\", \"vanilla\", \"chocolate\"]\nprompt = \"Choose your flavor: \"\nprint(flavors)\nwhile **True**:\n    choice = input(prompt)\n    if **choice** **in** **flavors**:\n        **break**\n    print(f\"Sorry, '{choice}' is not a valid option.\")\nprint(f\"You chose '{choice}'.\") \n```", "```py\n# menu.walrus.py\nflavors = [\"pistachio\", \"malaga\", \"vanilla\", \"chocolate\"]\nprompt = \"Choose your flavor: \"\nprint(flavors)\nwhile **(choice :=** **input****(prompt))** not in flavors:\n    print(f\"Sorry, '{choice}' is not a valid option.\")\nprint(f\"You chose '{choice}'.\") \n```", "```py\n# primes.py\nprimes = []  # this will contain the primes at the end\nupto = 100  # the limit, inclusive\nfor n in range(2, upto + 1):\n    is_prime = True  # flag, new at each iteration of outer for\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            is_prime = False\n            break\n    if is_prime:  # check on flag\n        primes.append(n)\nprint(primes) \n```", "```py\n$ python primes.py\n[2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\n67, 71, 73, 79, 83, 89, 97] \n```", "```py\n# primes.else.py\nprimes = []\nupto = 100\nfor n in range(2, upto + 1):\n    for divisor in range(2, n):\n        if n % divisor == 0:\n            break\n    else:\n        primes.append(n)\nprint(primes) \n```", "```py\n# coupons.py\ncustomers = [\n    dict(id=1, total=200, coupon_code=\"F20\"),  # F20: fixed, £20\n    dict(id=2, total=150, coupon_code=\"P30\"),  # P30: percent, 30%\n    dict(id=3, total=100, coupon_code=\"P50\"),  # P50: percent, 50%\n    dict(id=4, total=110, coupon_code=\"F15\"),  # F15: fixed, £15\n]\nfor customer in customers:\n    match customer[\"coupon_code\"]:\n        case \"F20\":\n            customer[\"discount\"] = 20.0\n        case \"F15\":\n            customer[\"discount\"] = 15.0\n        case \"P30\":\n            customer[\"discount\"] = customer[\"total\"] * 0.3\n        case \"P50\":\n            customer[\"discount\"] = customer[\"total\"] * 0.5\n        case _:\n            customer[\"discount\"] = 0.0\nfor customer in customers:\n    print(customer[\"id\"], customer[\"total\"], customer[\"discount\"]) \n```", "```py\n$ python coupons.py\n1 200 20.0\n2 150 45.0\n3 100 50.0\n4 110 15.0 \n```", "```py\n# coupons.dict.py\ncustomers = [\n    dict(id=1, total=200, coupon_code=\"F20\"),  # F20: fixed, £20\n    dict(id=2, total=150, coupon_code=\"P30\"),  # P30: percent, 30%\n    dict(id=3, total=100, coupon_code=\"P50\"),  # P50: percent, 50%\n    dict(id=4, total=110, coupon_code=\"F15\"),  # F15: fixed, £15\n]\ndiscounts = {\n    \"F20\": (0.0, 20.0),  # each value is (percent, fixed)\n    \"P30\": (0.3, 0.0),\n    \"P50\": (0.5, 0.0),\n    \"F15\": (0.0, 15.0),\n}\nfor customer in customers:\n    code = customer[\"coupon_code\"]\n    percent, fixed = discounts.get(code, (0.0, 0.0))\n    customer[\"discount\"] = percent * customer[\"total\"] + fixed\nfor customer in customers:\n    print(customer[\"id\"], customer[\"total\"], customer[\"discount\"]) \n```", "```py\n# infinite.py\nfrom itertools import count\nfor n in count(5, 3):\n    if n > 20:\n        break\n    print(n, end=\", \") # instead of newline, comma and space \n```", "```py\n$ python infinite.py\n5, 8, 11, 14, 17, 20, \n```", "```py\n# compress.py\nfrom itertools import compress\ndata = range(10)\neven_selector = [1, 0] * 10\nodd_selector = [0, 1] * 10\neven_numbers = list(compress(data, even_selector))\nodd_numbers = list(compress(data, odd_selector))\nprint(odd_selector)\nprint(list(data))\nprint(even_numbers)\nprint(odd_numbers) \n```", "```py\n$ python compress.py\n[0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1]\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n[0, 2, 4, 6, 8]\n[1, 3, 5, 7, 9] \n```", "```py\n# permutations.py\nfrom itertools import permutations\nprint(list(permutations(\"ABC\"))) \n```", "```py\n$ python permutations.py\n[('A', 'B', 'C'), ('A', 'C', 'B'), ('B', 'A', 'C'), ('B', 'C', 'A'),\n('C', 'A', 'B'), ('C', 'B', 'A')] \n```"]