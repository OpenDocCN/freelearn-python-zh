- en: Chapter 9. Connecting to the Cloud
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第9章。连接到云
- en: 'Cloud modules may seem like the most daunting type of Salt module, because
    of how many functions are required to present a cohesive tool for a cloud provider.
    Fortunately, connecting to most cloud providers is easy, once you know how. In
    this chapter, we''ll discuss:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 由于需要许多功能来呈现一个针对云提供商的统一工具，云模块可能看起来是最令人生畏的Salt模块类型。幸运的是，一旦你知道如何操作，连接到大多数云提供商都很简单。在本章中，我们将讨论：
- en: Understanding how cloud components fit together
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解云组件如何协同工作
- en: Learning which functions are required, and how they are used
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 学习所需的函数以及它们的使用方法
- en: Comparing Libcloud-based modules with direct REST modules
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较基于Libcloud的模块与直接REST模块
- en: Writing a generic cloud module
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 编写通用的云模块
- en: Troubleshooting cloud modules
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 云模块的故障排除
- en: Understanding cloud components
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解云组件
- en: The word *cloud* has suffered from an unfortunate bout of overuse and misuse
    in recent years, so before we talk about what the components look like, we need
    to define what we're actually talking about in the first place.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 近年来，“云”这个词遭受了过度使用和误用的不幸，所以在我们谈论组件看起来像什么之前，我们首先需要定义我们真正在谈论的是什么。
- en: Salt Cloud is designed to operate with *compute cloud* providers. This means
    that they offer computing resources, often in the form of virtual machines. A
    number of cloud providers also offer other resources, such as storage space, DNS,
    and load balancing. While Salt Cloud isn't explicitly designed to manage these
    resources, it is possible to add support for them.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Salt Cloud旨在与*计算云*提供商一起运行。这意味着它们提供计算资源，通常以虚拟机的形式。许多云提供商还提供其他资源，如存储空间、DNS和负载均衡。虽然Salt
    Cloud并非明确设计来管理这些资源，但可以添加对这些资源的支持。
- en: For our purposes, we will discuss creating cloud drivers with a focus on managing
    virtual machines. Some of the techniques can be used for adding other resources,
    so if you're planning on going in that direction, this chapter will still be useful
    to you.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 对于我们的目的，我们将讨论创建云驱动程序，重点是管理虚拟机。其中一些技术可以用于添加其他资源，所以如果你打算朝那个方向发展，本章对你仍然有用。
- en: Looking at the puzzle pieces
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 观察拼图碎片
- en: The primary goal of Salt Cloud is to easily create virtual machines on a cloud
    provider, install a Salt Minion onto that machine, and then automatically accept
    that Minion's keys on the Master. When you dig down, you will find that a number
    of pieces fit together to achieve this goal.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Salt Cloud的主要目标是轻松在云提供商上创建虚拟机，在该机器上安装Salt Minion，然后自动在Master上接受该Minion的密钥。当你深入挖掘时，你会发现许多部件协同工作以实现这一目标。
- en: Connection mechanism
  id: totrans-13
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 连接机制
- en: Most cloud providers offer an API to manage the resources in your account. This
    API comprises an authentication scheme, and a collection of URLs that are used
    in similar ways. Almost every cloud provider supports URLs based on both `GET`
    and `POST` methods, but some support other methods such as `PATCH` and `DELETE`.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云提供商都提供API来管理账户中的资源。此API包括一个身份验证方案，以及一组用于类似目的的URL。几乎每个云提供商都支持基于`GET`和`POST`方法的URL，但一些支持其他方法，如`PATCH`和`DELETE`。
- en: 'Quite frequently, these URLs will include up to four components:'
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 很频繁地，这些URL将包括多达四个组件：
- en: A resource name
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 资源名称
- en: The action to be performed on that resource
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在该资源上要执行的操作
- en: The ID of the resource to be managed
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 要管理的资源的ID
- en: Arguments that define how the resource is managed
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 定义如何管理资源的参数
- en: These components can be combined with the authentication scheme to create a
    single tool that is used to perform all of the management features that are available.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件可以与身份验证方案结合使用，创建一个用于执行所有可用管理功能的单一工具。
- en: Listing resources
  id: totrans-21
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出资源
- en: 'Most resources have a way to list them from the API. These include both options
    that are defined by the cloud provider and resources that belong to your account
    and can be managed by you. Some of the resources that can usually be listed from
    the API are:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数资源都有一种从API中列出它们的方式。这包括由云提供商定义的选项以及属于你的账户且可以由你管理的资源。通常可以从API中列出的资源包括：
- en: Operating system images
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 操作系统镜像
- en: Sizes of virtual machines that can be created
  id: totrans-24
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 可以创建的虚拟机大小
- en: Existing virtual machines in a user's account
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 用户账户中的现有虚拟机
- en: Details about specific virtual machines
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 特定虚拟机的详细信息
- en: Non-compute resources that are managed by the account
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由账户管理的非计算资源
- en: A Salt Cloud module should provide a few different ways to list resources, both
    for creating new virtual machines and for managing existing virtual machines.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: Salt Cloud模块应该提供几种列出资源的方法，无论是创建新的虚拟机还是管理现有的虚拟机
- en: Creating virtual machines
  id: totrans-29
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 创建虚拟机
- en: The most complex component of most cloud modules is the `create()` function,
    which orchestrates the tasks of requesting a virtual machine, waiting for it to
    become available, logging in to it and installing Salt, and accepting that virtual
    machine's Minion keys on the Master. Many of these tasks have been abstracted
    into helper functions that can be called from cloud modules, which greatly simplifies
    the development of the `create()` function.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数云模块中最复杂的组件是`create()`函数，它协调请求虚拟机、等待其可用、登录并安装Salt以及接受该虚拟机的Minion密钥在Master上的任务。许多这些任务已经抽象成可以从云模块中调用的辅助函数，这大大简化了`create()`函数的开发
- en: Managing other resources
  id: totrans-31
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 管理其他资源
- en: Once the preceding components have been put together, creating other functions
    to create, list, modify, and delete other resources will usually not take much
    effort.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦将前面的组件组合在一起，创建其他用于创建、列出、修改和删除其他资源的函数通常不会花费太多精力
- en: Libcloud versus SDK versus direct REST API
  id: totrans-33
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Libcloud与SDK与直接REST API的比较
- en: 'There are three types of cloud modules that ship with Salt. The first and original
    type of module uses a library called Libcloud to communicate with cloud providers.
    Using this kind of library has some distinct advantages:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: Salt附带三种类型的云模块。第一种和原始类型的模块使用名为Libcloud的库与云服务提供商通信。使用此类库有一些明显的优点：
- en: Libcloud supports a huge amount of cloud providers
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Libcloud支持大量的云服务提供商
- en: Libcloud provides a standard and reasonably consistent interface across providers
  id: totrans-36
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Libcloud在各个提供商之间提供了一个标准且相对一致的接口
- en: Salt Cloud has a number of functions built in specifically for Libcloud
  id: totrans-37
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Salt Cloud为Libcloud构建了一些内置的功能
- en: Libcloud is actively developed, with frequent releases
  id: totrans-38
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Libcloud正在积极开发，并频繁发布新版本
- en: 'There are some disadvantages to using Libcloud:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 使用Libcloud也有一些缺点：
- en: Not every feature in every cloud is supported by Libcloud
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 并非每个云中的每个功能都由Libcloud支持
- en: New cloud providers may not yet be supported
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 新的云服务提供商可能尚未得到支持
- en: Old, obscure, and proprietary drivers may not ever be supported
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些旧的、不为人知的和专有的驱动程序可能永远不会得到支持
- en: 'Some cloud providers also provide their own libraries for connecting to their
    infrastructure. This may prove the fastest, easiest, or most reliable way to connect
    to them. Some advantages to using a provider''s own SDK are:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 一些云服务提供商还提供了他们自己的库来连接到他们的基础设施。这可能证明是连接到他们的最快、最简单或最可靠的方式。使用提供商自己的SDK的一些优点是：
- en: The developers are likely to have the most complete knowledge of the API
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发者可能对API有最全面的知识
- en: When new features are released, the SDK is often the first library to support
    them
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 当新功能发布时，SDK通常是第一个支持它们的库
- en: 'Some disadvantages are:'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 一些缺点是：
- en: Some SDKs still don't support all of the features for that cloud provider
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些SDK仍然不支持该云服务提供商的所有功能
- en: Some SDKs can be difficult to use
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一些SDK可能难以使用
- en: 'Another option for communicating with a cloud provider is to communicate directly
    with their REST API. Some advantages to this are:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 与云服务提供商通信的另一种选项是直接与他们通信REST API。这种方法的一些优点是：
- en: You control how the module is maintained
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以控制模块的维护方式
- en: You can make your own additions without waiting for new versions of a library
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可以在不等待库的新版本的情况下添加自己的功能
- en: 'But there are some definite disadvantages to using a direct REST API:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 但使用直接REST API有一些明显的缺点：
- en: You have to maintain the module
  id: totrans-53
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须维护该模块
- en: You have to add any new features yourself
  id: totrans-54
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您必须自己添加任何新的功能
- en: You aren't likely to have as many resources to use the driver as the cloud provider
    has
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 您可能没有云服务提供商那么多的资源来使用驱动程序
- en: You are going to need to decide which of these options is most appropriate for
    your situation. Fortunately, once you have set up a connection mechanism to use
    (whether you write it yourself or use somebody else's), there aren't really any
    differences between the functions that make use of those connections.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 您将需要决定哪种选项最适合您的具体情况。幸运的是，一旦您设置了要使用的连接机制（无论您是自己编写还是使用他人的），使用这些连接的函数之间实际上并没有真正的区别
- en: Writing a generic cloud module
  id: totrans-57
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 编写通用的云模块
- en: We're going to set up a very generic module that uses a direct REST API to communicate
    with a cloud provider. If you spend a lot of time with different APIs, you'll
    find the style used here to be very common.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将设置一个非常通用的模块，该模块使用直接 REST API 与云提供商进行通信。如果您花了很多时间与不同的 API 交互，您会发现这里使用的风格非常常见。
- en: Checking for required configuration
  id: totrans-59
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 检查所需配置
- en: 'In order to use a cloud provider, you will need a `__virtual__()` function
    to check for required configuration, and if necessary, any dependencies. You will
    also need a function called `get_configured_provider()`, which checks to make
    sure that the configuration that is required to connect to your cloud provider
    (usually authentication at the very least, and sometimes other connection parameters)
    have been specified. We will also need to define `__virtualname__`, which contains
    the name of the driver as Salt Cloud will know it. Let''s go ahead and start our
    cloud module with these:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使用云提供商，您需要一个 `__virtual__()` 函数来检查所需配置，并在必要时检查任何依赖项。您还需要一个名为 `get_configured_provider()`
    的函数，该函数检查确保连接到您的云提供商所需的配置（至少是身份验证，有时还有其他连接参数）已被指定。我们还需要定义 `__virtualname__`，它包含驱动程序的名称，Salt
    Cloud 将知道它。让我们从这里开始我们的云模块：
- en: '[PRE0]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: We've started out with a `docstring` that contains information about the required
    configuration for our driver. We're going to stick with a simple authentication
    scheme, which uses an API key as part of the URL, and an HTTP username and password.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 我们从一个包含有关我们驱动程序所需配置信息的 `docstring` 开始。我们将坚持使用简单的身份验证方案，该方案使用 API 密钥作为 URL 的一部分，以及
    HTTP 用户名和密码。
- en: The `__virtual__()` function should first make sure that any required libraries
    are installed. In our case, we don't need anything special, so we'll skip that
    part. We then call `get_configured_provider()` to make sure that any required
    configurations are in place, and if all is good, we return `__virtualname__`.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`__virtual__()` 函数首先应该确保安装了所有必需的库。在我们的例子中，我们不需要任何特殊的东西，所以我们将跳过这一部分。然后我们调用 `get_configured_provider()`
    来确保所有必需的配置都已就绪，如果一切顺利，我们返回 `__virtualname__`。'
- en: The `get_configured_provider()` function will never change, outside of the list
    of parameters that are absolutely required in order for the module to work. If
    you are going to accept any optional parameters, do not include them in this function.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_configured_provider()` 函数将不会改变，除了模块工作所必需的绝对必需的参数列表之外。如果您打算接受任何可选参数，请不要将它们包含在这个函数中。'
- en: Note
  id: totrans-65
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 注意
- en: The `get_configured_provider()` function mentions another built-in variable
    called `__active_provider_name__`. This contains a combination of the name that
    the user sets for this module in their provider config (such as `my-cloud-config`)
    and the name of the actual driver itself (in our case, `generic`), separated by
    a colon (`:`). If you were to use the sample configuration in our docstring, then
    `__active_provider_name__` would be set to `my-cloud-config:generic`.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '`get_configured_provider()` 函数提到了另一个内置变量，称为 `__active_provider_name__`。这个变量包含用户在他们的提供者配置中为该模块设置的名称（例如
    `my-cloud-config`）以及实际驱动程序的名称（在我们的例子中是 `generic`），两者之间用冒号（`:`）分隔。如果您要使用我们文档字符串中的示例配置，那么
    `__active_provider_name__` 将被设置为 `my-cloud-config:generic`。'
- en: Using http.query()
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 http.query()
- en: Salt comes with its own library for communicating over HTTP. This library is
    not a connection library itself; rather, it allows you to use `urllib2` (which
    ships with Python), Tornado (which is a dependency of Salt itself), or `requests`
    (which is a very popular and powerful HTTP library for Python). Like Libcloud,
    Salt's HTTP library strives to provide a consistent interface across available
    libraries. You can specify which library is to be used, if you need to use specific
    features in that library, but by default Tornado is used.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: Salt 自带了一个用于通过 HTTP 通信的库。这个库本身不是一个连接库；相反，它允许您使用 `urllib2`（Python 的一部分），Tornado（Salt
    自身的依赖项），或 `requests`（Python 中非常流行且功能强大的 HTTP 库）。像 Libcloud 一样，Salt 的 HTTP 库力求在所有可用库之间提供一致的接口。如果您需要在该库中使用特定功能，您可以指定要使用的库，但默认情况下使用
    Tornado。
- en: This library lives in `salt.utils` and contains a number of HTTP-related functions.
    The one that is most commonly used is called `query()`. It not only supports all
    three backend libraries but also includes mechanisms to automatically translate
    return data from either JSON or XML into a Python dictionary.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这个库位于 `salt.utils` 中，包含了许多与 HTTP 相关的函数。其中最常用的是 `query()` 函数。它不仅支持所有三个后端库，还包括将返回数据从
    JSON 或 XML 自动转换为 Python 字典的机制。
- en: 'A call to `http.query()` usually looks something like this:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.query()`的调用通常看起来像这样：'
- en: '[PRE1]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: A common REST API
  id: totrans-72
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 常见的REST API
- en: 'Before we connect to a REST API, we need to know what it looks like. The structure
    of the URL often contains the following components:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们连接到REST API之前，我们需要知道它的样子。URL的结构通常包含以下组件：
- en: '[PRE2]'
  id: totrans-74
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Technically, the URL scheme can be HTTP, but if that's your only option, I would
    recommend switching to another cloud provider.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 从技术上讲，URL方案可以是HTTP，但如果这是你唯一的选择，我建议切换到另一个云服务提供商。
- en: The hostname usually contains some hint that it belongs to the API, such as
    `api.example.com`. The documentation for your cloud provider will tell you which
    hostname to use here. The hostname may also include information about which data
    center you are communicating with, such as `eu-north.api.example.com`.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 主机名通常包含一些表明它属于API的提示，例如`api.example.com`。你的云服务提供商的文档将告诉你这里应该使用哪个主机名。主机名也可能包含有关你正在与之通信的数据中心的信息，例如`eu-north.api.example.com`。
- en: Most providers also require you to specify which version of their API you are
    using. This may be in the URL, or in the `POST` data, or even in the client request
    headers. You should always use the latest version unless you have a very good
    reason not to, but cloud providers will often support old versions as well, if
    only temporarily.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 大多数提供商还要求你指定你正在使用的API版本。这可能包含在URL中，或在`POST`数据中，甚至在客户端请求头中。除非你有非常充分的理由不这样做，否则你应该始终使用最新版本，但云服务提供商通常会支持旧版本，即使只是暂时性的。
- en: The resource refers to what you are actually monitoring. This may be something
    like `instance` or `nodes` for virtual machines, `storage` or `volumes` to refer
    to disks, or `images` to refer to prebuilt operating system images or templates.
    I wish I could be more specific here, but this will depend on your cloud provider.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 资源指的是你实际监控的内容。这可能类似于虚拟机的`instance`或`nodes`，用于引用磁盘的`storage`或`volumes`，或者用于引用预构建操作系统镜像或模板的`images`。我希望我能在这里更加具体，但这将取决于你的云服务提供商。
- en: The action may or may not appear in the URL. Some cloud providers will include
    actions such as `create`, `list`, `modify`, `delete`, and so on, followed by the
    ID of the resource to be managed, where necessary.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 动作可能出现在也可能不出现在URL中。一些云服务提供商将包括`create`、`list`、`modify`、`delete`等动作，后面跟着要管理的资源的ID，如果需要的话。
- en: 'However, it''s becoming increasingly common for the action to be determined
    by the HTTP method that is used to make the call. The following methods are commonly
    used by REST APIs:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，使用HTTP方法来确定动作正变得越来越普遍。以下方法通常由REST API使用：
- en: GET
  id: totrans-81
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: GET
- en: This is used for calls that will only display, but never change resources. If
    an ID is not given, then a list of resources is usually given. If an ID is used,
    then the details about that specific resource will be returned.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 这用于仅显示但永远不会更改资源的调用。如果没有提供ID，则通常会提供一个资源列表。如果使用了ID，则将返回该特定资源的详细信息。
- en: POST
  id: totrans-83
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: POST
- en: This is often used for calls that create data, and frequently for those that
    modify data. If an ID is not declared, then a new resource will usually be created.
    If an ID is given, then an existing resource will be modified.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 这通常用于创建数据的调用，并且经常用于修改数据的调用。如果没有声明ID，则通常将创建一个新的资源。如果提供了ID，则将修改现有的资源。
- en: PATCH
  id: totrans-85
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: PATCH
- en: This method was recently added for modifying existing resources. If a cloud
    provider makes use of this method, then they are unlikely to allow `POST` to modify
    existing data. Instead, `POST` will only be used to apply new data, and `PATCH`
    will be used to update existing data.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此方法最近被添加用于修改现有资源。如果云服务提供商使用此方法，那么他们不太可能允许使用`POST`来修改现有数据。相反，`POST`将仅用于应用新数据，而`PATCH`将用于更新现有数据。
- en: DELETE
  id: totrans-87
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: DELETE
- en: Calls using a `DELETE` method will generally include both a resource type, and
    the ID of the resource to be removed. This method is never used to create or modify
    data; only remove it.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`DELETE`方法的调用通常包括资源类型和要删除的资源的ID。此方法永远不会用于创建或修改数据；仅用于删除。
- en: Setting up a _query() function
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 设置一个`query()`函数
- en: 'Now that we know what the API will look like, let''s create a function to communicate
    with it. We will make use of `http.query()` to talk to it, but we also need to
    wrap a few other items in there as well. We''ll start with a function declaration:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们知道了API将是什么样子，让我们创建一个函数来与之通信。我们将使用`http.query()`来与之通信，但我们还需要将一些其他项目包裹在里面。我们从一个函数声明开始：
- en: '[PRE3]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Notice that we have made this function private. There is no reason to allow
    this function to be called directly from the command line, so we need to hide
    it. We have allowed any of the arguments to remain unspecified, because we won't
    always need all of them.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们已经将此函数设为私有。没有理由允许此函数直接从命令行调用，因此我们需要将其隐藏。我们允许任何参数保持未指定，因为我们不一定总是需要所有这些参数。
- en: 'Let''s go ahead and set our `_query()` function, and then go over each of the
    components in it:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们继续设置我们的 `_query()` 函数，然后逐一检查其中的各个组件：
- en: '[PRE4]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: We start off by collecting the connection parameters that are required for our
    cloud provider. The `salt.config` library includes a function called `get_cloud_config_value()`
    that searches through the cloud configuration for the requested value. It can
    search through the main cloud configuration (usually at `/etc/salt/cloud`) as
    well as through any provider or profile configuration. In this case, all of the
    configuration should be found in the provider configuration, as specified in our
    docstring.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 我们首先收集我们云服务提供商所需的连接参数。`salt.config` 库包含一个名为 `get_cloud_config_value()` 的函数，该函数会在云配置中搜索请求的值。它可以搜索主云配置（通常位于
    `/etc/salt/cloud`），以及任何提供者或配置文件配置。在这种情况下，所有配置都应位于提供者配置中，正如我们在文档字符串中所指定的。
- en: Once we have collected the `user`, `password`, and `api_key`, we turn our attention
    to `location`. You may recall that many cloud providers use the hostname to differentiate
    different data centers. Many also have a default data center. In the case of our
    generic driver, we'll assume that `eu-north` is the default, and create a URL
    using that. Our URL also contains a version, as we mentioned before.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦收集了 `user`、`password` 和 `api_key`，我们就将注意力转向 `location`。您可能记得，许多云提供商使用主机名来区分不同的数据中心。许多也设有默认数据中心。在我们的通用驱动程序中，我们将假设
    `eu-north` 是默认的，并使用它创建一个 URL。我们的 URL 还包含了一个版本，正如我们之前提到的。
- en: We then look at the resource that will be used, and any actions that will be
    performed on it. If found, these will be appended to the URL path. With those
    in place, we look at any parameters that will be added to the URL.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们查看将要使用的资源以及将要对其执行的操作。如果找到，这些操作将被附加到 URL 路径上。有了这些，我们就查看将要添加到 URL 中的任何参数。
- en: 'The `params` variable refers to `<name>=<value>` pairs that will be added to
    the URL. These will start with a question mark (`?`) and then be separated with
    an ampersand (`&`), for instance:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`params` 变量指的是将被添加到 URL 中的 `<name>=<value>` 对。这些将以问号（`?`）开头，然后通过 ampersand（`&`）分隔，例如：'
- en: '[PRE5]'
  id: totrans-99
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Instead of appending these to the URL by ourselves, we'll let the `http.query()`
    function take care of it for us. It will properly encode this data if specified
    and append it to the end of the URL for us.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 我们不会自己将这些内容附加到 URL 上，而是让 `http.query()` 函数来处理。如果指定了数据，它将正确地编码这些数据，并将其附加到 URL
    的末尾。
- en: If used, `params` need to be specified as a dictionary. We know that `api_key`
    will be one `params`, so we add it after doing a type check.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用，`params` 需要指定为一个字典。我们知道 `api_key` 将会是其中一个 `params`，因此我们在类型检查之后添加它。
- en: Finally, we need to look at any data that is going to be `POST`ed to the cloud
    provider. Many providers require `POST` data to be sent as a JSON string, rather
    than as URL-encoded data, so if any data is given, we'll convert it to JSON before
    sending it over.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们需要查看将要发送到云提供商的任何数据。许多提供商要求将 `POST` 数据作为 JSON 字符串发送，而不是作为 URL 编码的数据，因此如果提供了任何数据，我们将在发送之前将其转换为
    JSON。
- en: Once we have everything prepared, we use `http.query()` (as `salt.utils.http.query()`)
    to actually make the call. You can see `url`, `method` (as specified in the function
    declaration), `params`, and `data`. We've also set `decode` to `True` and `decode_type`
    to `json`, so that the return data from the cloud provider will automatically
    be converted to a dictionary for us.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 一切准备就绪后，我们使用 `http.query()`（作为 `salt.utils.http.query()`）来实际发起调用。您可以看到 `url`、`method`（在函数声明中指定）、`params`
    和 `data`。我们还设置了 `decode` 为 `True` 和 `decode_type` 为 `json`，这样云提供商返回的数据将自动为我们转换为字典。
- en: 'We''ve also passed through a list of fields to hide from any logging that may
    occur inside the `http.query()` function. This will keep data such as our `api_key`
    private, in the event that any logs are generated. Rather than logging a URL such
    as:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还传递了一个字段列表，以隐藏在 `http.query()` 函数内部可能发生的任何日志记录。这将确保我们的 `api_key` 等数据在生成任何日志时保持私密。而不是记录一个
    URL，例如：
- en: '[PRE6]'
  id: totrans-105
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'A sanitized URL will be logged:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 将会记录一个清理过的 URL：
- en: '[PRE7]'
  id: totrans-107
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: Finally, we pass through a copy of `__opts__`, so that `http.query()` has access
    to any variables that it needs from the `master` or `minion` configuration files.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们传递一个`__opts__`的副本，这样`http.query()`就能访问从`master`或`minion`配置文件中需要的任何变量。
- en: The `http.query()` function will return a dictionary, including an item called
    `dict`, which contains the return data from the cloud provider, converted into
    a dictionary. This is what we will pass back to any functions calling our `_query()`
    function.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.query()`函数将返回一个字典，其中包含一个名为`dict`的项，它包含从云提供商返回的数据，已转换为字典格式。这是我们将其传递回调用我们的`_query()`函数的任何函数的内容。'
- en: Getting profile details
  id: totrans-110
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 获取配置文件详情
- en: Once we have the ability to connect to a cloud provider, we need to be able
    to collect information that can be used to create a VM on that provider. That
    almost always includes a list of VM images and VM sizes. If a cloud provider has
    multiple data centers (and most of them do), then you will also need a function
    that returns a list of them.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们能够连接到云提供商，我们就需要能够收集可用于在该提供商上创建虚拟机的信息。这几乎总是包括虚拟机镜像和虚拟机大小的列表。如果一个云提供商有多个数据中心（大多数都有），那么你还需要一个函数来返回这些数据中心的列表。
- en: These three functions are called `avail_images()`, `avail_sizes()`, and `avail_locations()`.
    They are accessed from the `salt-cloud` command using the `--list-images`, `--list-sizes`,
    and `--list-locations` options, respectively.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 这三个函数分别称为`avail_images()`、`avail_sizes()`和`avail_locations()`。它们分别通过`salt-cloud`命令使用`--list-images`、`--list-sizes`和`--list-locations`选项访问。
- en: Listing images
  id: totrans-113
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出镜像
- en: Images refer to a prebuilt root VM volume. With Windows images, this will be
    the `C:\` disk volume. In other operating systems, it will be the `/` volume.
    Very commonly, a cloud provider will give access to a number of different operating
    systems, and a number of different versions of each of those.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 镜像指的是预构建的根虚拟机卷。对于Windows镜像，这将是指`C:\`磁盘卷。在其他操作系统上，这将是指`/`卷。非常常见的是，云提供商将提供多种不同的操作系统和每种操作系统的多个不同版本。
- en: For instance, a cloud provider may offer a single image each for Ubuntu 14.04,
    Ubuntu 14.10, Ubuntu 15.04, and so on, or they may provide each of those bundled
    with WordPress, MediaWiki, MariaDB, or another popular software package.
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，云提供商可能为Ubuntu 14.04、Ubuntu 14.10、Ubuntu 15.04等提供单个镜像，或者它们可能提供每个镜像捆绑WordPress、MediaWiki、MariaDB或其他流行的软件包。
- en: 'In the case of our generic cloud provider, a list of images can be returned
    simply by requesting the `images` resource:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的通用云提供商的情况下，可以通过请求`images`资源简单地返回一系列镜像。
- en: '[PRE8]'
  id: totrans-117
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In a profile configuration, an image is specified using the `image` argument.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中，使用`image`参数指定镜像。
- en: Listing sizes
  id: totrans-119
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出大小
- en: Sizes are a concept that is unique to cloud providers, and indeed not every
    cloud provider even supports them. Depending on the provider, size usually refers
    to a combination of the number of processors, processor speed, amount of RAM,
    disk space, type of disk (platter versus SSD), and so on.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 大小是云提供商特有的一个概念，实际上并非每个云提供商都支持它们。根据提供商的不同，大小通常指的是处理器数量、处理器速度、RAM大小、磁盘空间、磁盘类型（硬盘驱动器与SSD）等的组合。
- en: 'Once again, our generic cloud provider will return a list of sizes under the
    `sizes` resource:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 再次强调，我们的通用云提供商将在`sizes`资源下返回一系列大小。
- en: '[PRE9]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: In a profile configuration, a size is specified using the `size` argument.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中，使用`size`参数指定大小。
- en: Listing locations
  id: totrans-124
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 列出位置
- en: Depending on the cloud provider, a location may refer to a specific data center,
    a region in some part of the world, or even a specific data center inside a region
    that contains multiple data centers.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 根据云提供商的不同，位置可能指一个具体的数据中心，世界上某个地区的区域，甚至是一个包含多个数据中心的区域内的特定数据中心。
- en: As we said before, the location is often prepended to the URL used to talk to
    the API. In the case of our generic cloud provider, locations are queried using
    the `regions` resource.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我们之前所说的，位置通常会被添加到与API通信所使用的URL之前。在我们的通用云提供商的情况下，位置是通过`regions`资源进行查询的。
- en: '[PRE10]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: In a profile configuration, a location is specified using the `location` argument.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 在配置文件中，使用`location`参数指定位置。
- en: Listing nodes
  id: totrans-129
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 列出节点
- en: 'The next thing to do is display the nodes that currently exist inside the account
    for that cloud provider. There are three `salt-cloud` arguments to display node
    data: `-Q` or `--query`, `-F` or `--full-query`, and `-S` or `--select-query`.
    Each of these options will query every configured cloud provider, and return all
    of the information at once.'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步是显示该云提供商账户中当前存在的节点。有三个`salt-cloud`参数可以显示节点数据：`-Q`或`--query`、`-F`或`--full-query`和`-S`或`--select-query`。每个选项都会查询每个配置的云提供商，并一次性返回所有信息。
- en: Querying standard node data
  id: totrans-131
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询标准节点数据
- en: 'There are six pieces of information that should always be provided for each
    node. This data is displayed when the `-Q` argument is used with `salt-cloud`:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 对于每个节点，应该始终提供六条信息。当使用`salt-cloud`与`-Q`参数时，这些数据会被显示：
- en: '`id`: The ID of this VM, as used by the cloud provider.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`id`：此虚拟机由云提供商使用的ID。'
- en: '`image`: The image used to create this VM. If this data is not available, it
    should be set to `None`.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`image`：创建此虚拟机使用的镜像。如果此数据不可用，应设置为`None`。'
- en: '`size`: The size used to create this VM. If this data is not available, it
    should be set to `None`.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`size`：创建此虚拟机使用的尺寸。如果此数据不可用，应设置为`None`。'
- en: '`state`: The current running state of this VM. This is usually `RUNNING`, `STOPPED`,
    `PENDING` (the VM is still booting), or `TERMINATED` (the VM has been destroyed,
    but not yet cleaned up). If this data is not available, it should be set to None.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`state`：此虚拟机的当前运行状态。这通常是`RUNNING`、`STOPPED`、`PENDING`（虚拟机仍在启动中）或`TERMINATED`（虚拟机已被销毁，但尚未清理）。如果此数据不可用，应设置为None。'
- en: '`private_ips`: Any private IP addresses that are used on a cloud provider''s
    internal network. These should be returned as a list. If this data is not available,
    the list should be empty.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`private_ips`：在云提供商的内部网络上使用的任何私有IP地址。这些应作为列表返回。如果此数据不可用，列表应为空。'
- en: '`public_ips`: Any public IP addresses that are available for this VM. Any IPv6
    addresses should be included here. These IPs should be returned as a list. If
    this data is not available, the list should be empty.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`public_ips`：此虚拟机可用的任何公网IP地址。应包括任何IPv6地址。这些IP应作为列表返回。如果此数据不可用，列表应为空。'
- en: 'Users should have access to all of these variables, even if they are empty
    or set to None. This is also the only data that should be returned by the `-Q`
    argument. To return this data, we use a function called `list_nodes()`:'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 用户应该能够访问所有这些变量，即使它们为空或设置为None。这也是`-Q`参数应该返回的唯一数据。为了返回这些数据，我们使用一个名为`list_nodes()`的函数：
- en: '[PRE11]'
  id: totrans-140
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: Querying full node data
  id: totrans-141
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 查询完整节点数据
- en: 'VMs usually contain quite a bit more information than is returned with `-Q`.
    If you want to view all of the information that a cloud provider is willing and
    able to display to you, you use the `-F` flag. This corresponds to a function
    called `list_nodes_full()`:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 虚拟机通常包含比`-Q`返回的信息多得多的信息。如果你想查看云提供商愿意并且能够显示给你的所有信息，请使用`-F`标志。这对应于一个名为`list_nodes_full()`的函数：
- en: '[PRE12]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Sometimes, you are only interested in a very specific set of data. For instance,
    you may only want to display a VM''s ID, public IPs, and state. The `-S` option
    allows you to perform a query that returns only a selection of the fields that
    are available with a full query. The selection itself is defined as a list in
    the main cloud configuration file (usually `/etc/salt/cloud`):'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，你可能只对一组非常具体的数据感兴趣。例如，你可能只想显示虚拟机的ID、公网IP和状态。`-S`选项允许你执行一个查询，只返回完整查询中可用的字段的选择。这个选择本身是在主云配置文件中定义的列表（通常为`/etc/salt/cloud`）：
- en: '[PRE13]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'The query itself is performed by a function called `list_nodes_select()`. Some
    providers may require something special to be done to separate out this data,
    but most of the time you can just use the `list_nodes_select()` function that
    ships with the `salt.utils.cloud` library:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 查询本身是由一个名为`list_nodes_select()`的函数执行的。一些提供商可能需要做一些特殊操作来分离这些数据，但大多数情况下，你可以直接使用`salt.utils.cloud`库中提供的`list_nodes_select()`函数：
- en: '[PRE14]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Creating a VM
  id: totrans-148
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建虚拟机
- en: 'The most complex part of any cloud module has traditionally been the `create()`
    function. That''s because this function doesn''t just spin up a VM. Its tasks
    can generally be split up into these components:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 任何云模块最复杂的部分传统上一直是`create()`函数。这是因为这个函数不仅仅是启动一个虚拟机。它的任务通常可以分解为以下组件：
- en: Request that the cloud provider create a VM
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 请求云提供商创建虚拟机
- en: Wait for that VM to become available
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 等待虚拟机可用
- en: Log in to that VM and install Salt
  id: totrans-152
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 登录到该虚拟机并安装Salt
- en: Accept that's VM's Minion keys on the Master
  id: totrans-153
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 接受该虚拟机的Minion密钥在Master上
- en: Some more complex cloud providers may include additional steps, such as requesting
    different types of VMs based on the profile configuration, or attaching volumes
    to the VM. In addition, the `create()` function should fire events along Salt's
    event bus, to let the Master know how far along it is with the creation process.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 一些更复杂的云服务提供商可能包括额外的步骤，例如根据配置文件请求不同类型的虚拟机，或将卷附加到虚拟机上。此外，`create()`函数应该在Salt的事件总线上触发事件，让主服务器知道创建过程的进度。
- en: 'Before we get into the `create()` function, we should put together another
    function called `request_instance()`. This function will do two things for us:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们进入`create()`函数之前，我们应该准备另一个名为`request_instance()`的函数。这个函数将为我们做两件事：
- en: It can be called directly from `create()`, which will simplify the `create()`
    function
  id: totrans-156
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以直接从`create()`函数中调用，这将简化`create()`函数
- en: It can be called outside of `create()`, when a non-Salt VM is needed
  id: totrans-157
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它可以在`create()`函数外部调用，当需要非Salt虚拟机时
- en: 'This function doesn''t need to do much. As the name implies, it need only request
    that the cloud provider create a VM. But it will need to collect together some
    information to build the HTTP request:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数不需要做太多。正如其名称所暗示的，它只需要请求云服务提供商创建一个虚拟机。但需要收集一些信息来构建HTTP请求：
- en: '[PRE15]'
  id: totrans-159
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: You've probably noticed the call to `salt.utils.cloud.fire_event()` in this
    function. Every time you do something major in the `create()` function (or in
    functions that are called by `create()`), you should fire an event that gives
    some information about what you're about to do. Those events will be picked up
    by the event reactor, allowing the Master to keep track of progress and perform
    additional tasks if configured to do so, at the right time.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到了在这个函数中调用`salt.utils.cloud.fire_event()`。每次你在`create()`函数（或由`create()`调用的函数）中做重大操作时，都应该触发一个事件，提供一些关于你即将做什么的信息。这些事件将被事件反应器捕获，允许主服务器跟踪进度，并在配置为这样做的情况下，在正确的时间执行额外任务。
- en: We're also going to create a function called `query_instance()`. This function
    will watch a newly requested VM, and wait for an IP address to become available.
    This IP address will be used to log in to the VM and provision it.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还将创建一个名为`query_instance()`的函数。这个函数将监视新请求的虚拟机，等待IP地址变得可用。这个IP地址将用于登录虚拟机并配置它。
- en: '[PRE16]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: This function makes use of another function that ships with Salt called `salt.utils.cloud.wait_for_ip()`.
    That function takes a callback, which we're defining as a nested function called
    `_query_ip_address()`. That nested function checks to see if an IP address exists.
    If it does, then `salt.utils.cloud.wait_for_ip()` will stop waiting and move on.
    If it does not yet exist, then it will keep waiting.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 这个函数使用了Salt附带的一个名为`salt.utils.cloud.wait_for_ip()`的函数。该函数接受一个回调，我们将其定义为嵌套函数，称为`_query_ip_address()`。这个嵌套函数会检查IP地址是否存在。如果存在，则`salt.utils.cloud.wait_for_ip()`将停止等待并继续执行。如果尚未存在，它将继续等待。
- en: There are three more arguments that we're passing in as well. `timeout` defines
    how long to wait for an IP address to show up at all (in our case, ten minutes);
    `interval` tells Salt Cloud how long to wait between queries (our default is ten
    seconds).
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还传递了三个其他参数。`timeout`定义了等待IP地址出现的时间长度（在我们的案例中是十分钟）；`interval`告诉Salt Cloud在查询之间等待多长时间（我们的默认值是十秒）。
- en: You may be tempted to use a much shorter interval, but many cloud providers
    will throttle requests if an account seems to be abusing its privileges. On that
    note, `interval_multiplier` will increase `interval` after each request. For instance,
    if `interval` was set to 1 and `interval_multiplier` was set to 2, then requests
    would be spaced out at 1 second, then 2, 4, 8, 16, 32, and so on.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能会想使用更短的间隔，但许多云服务提供商如果账户似乎在滥用其权限，会限制请求。在此方面，`interval_multiplier`会在每次请求后增加`interval`。例如，如果`interval`设置为1且`interval_multiplier`设置为2，那么请求将间隔1秒，然后是2秒、4秒、8秒、16秒、32秒，以此类推。
- en: 'With those two functions in place, we can finally set up our `create()` function.
    It requires one argument, which is a dictionary containing a combination of the
    profile, provider, and main cloud configuration data:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 在这两个函数就位后，我们最终可以设置我们的`create()`函数。它需要一个参数，即一个包含配置文件、提供者和主要云配置数据的字典：
- en: '[PRE17]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: We begin our function by firing an event stating that a creation process is
    being started. We then allow `request_instance()` and `query_instance()` to do
    their work, pull the name of an SSH key filename from the profile data, and then
    scrape an IP address to use to log in to the box from the VM data.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的功能开始于触发一个事件，声明创建过程正在开始。然后我们允许`request_instance()`和`query_instance()`执行它们的工作，从配置数据中提取SSH密钥文件名，然后从虚拟机数据中抓取用于从虚拟机登录到盒子的IP地址。
- en: The next step involves waiting for the VM to become available, and then logging
    in and provisioning it. But since that part of the process is the same across
    cloud providers, it's all been rolled into another helper function inside `salt.utils.cloud`
    called `bootstrap()`. The `bootstrap()` function will even fire additional events
    for us, keeping the event reactor apprised of its own status.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 下一步涉及等待虚拟机变得可用，然后登录并配置它。但由于这个过程在所有云服务提供商之间都是相同的，所以它已经被整合到`salt.utils.cloud`中的另一个辅助函数`bootstrap()`中。`bootstrap()`函数甚至会为我们触发额外的事件，让事件反应器了解其自身状态。
- en: When all is said and done, we fire one last event stating the information about
    the VM, and return the VM's data to the user.
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们触发一个最后的事件，声明虚拟机的信息，并将虚拟机的数据返回给用户。
- en: Tip
  id: totrans-171
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: You may have noticed that the events that we fire all include a tag starting
    with `salt/cloud/`, then the VM's name, then a short name for the step that we
    are currently performing. If you are working with a more complex cloud provider
    and wish to fire other events that are specific to them, keep the tag looking
    the same way, with as simple a descriptor as possible. This will help your users
    keep track of all of your cloud tags.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 你可能已经注意到，我们触发的事件都包含一个以`salt/cloud/`开头的标签，然后是虚拟机的名称，然后是我们当前执行步骤的简称。如果你在与更复杂的云服务提供商一起工作，并希望触发针对它们的特定事件，请保持标签看起来相同，尽可能简单。这将帮助你的用户跟踪所有你的云标签。
- en: Destroying VMs
  id: totrans-173
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 销毁虚拟机
- en: 'It''s just as important to be able to destroy a VM as it is to be able to create
    one, but the process is thankfully much easier. Keep in mind that events should
    also be fired when destroying: once before it happens, and once after:'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 能够销毁虚拟机与能够创建虚拟机一样重要，但过程幸运地要简单得多。请注意，在销毁时也应该触发事件：一次在发生之前，一次在发生之后：
- en: '[PRE18]'
  id: totrans-175
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: We've done one more important thing in this function. Salt Cloud has the ability
    to maintain a cache of information about VMs. We didn't see this before, because
    the `bootstrap()` function handles populating the cache when a VM is created.
    However, since there is no generic method for destroying machines, we need to
    handle this manually.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个函数中，我们做了另一件重要的事情。Salt Cloud有维护虚拟机信息缓存的能力。我们之前没有看到这一点，因为`bootstrap()`函数在创建虚拟机时处理填充缓存。然而，由于没有销毁机器的通用方法，我们需要手动处理这一点。
- en: Using actions and functions
  id: totrans-177
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用动作和函数
- en: So far, all of the functions that we've written are called directly using a
    special command-line argument (such as `--query` or `--provision`). However, there
    are other operations that cloud providers may be able to perform that are not
    necessarily as standard as the ones that we've seen so far.
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们编写的所有函数都是通过特殊的命令行参数（如`--query`或`--provision`）直接调用的。然而，云服务提供商可能能够执行的操作并不一定像我们之前看到的那么标准化。
- en: For instance, most cloud providers have API methods for `start`, `stop`, and
    `restart`. But some providers don't support all of those; `start` and `stop` may
    be available, but not `restart`. Or `start` and `restart`, but not `stop`. Other
    operations, such as listing SSH keys, may be available on one cloud provider,
    but not another.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，大多数云服务提供商都有`start`、`stop`和`restart`的API方法。但有些提供商并不支持所有这些；`start`和`stop`可能可用，但`restart`不可用。或者`start`和`restart`可用，但`stop`不可用。其他操作，如列出SSH密钥，可能在一个云服务提供商上可用，但在另一个提供商上不可用。
- en: When it comes down to it, there are two types of operations that can be performed
    against a cloud provider. Operations that are specific to a VM (`stop`, `start`,
    `restart`, and so on) are known in Salt Cloud as **actions**. Operations that
    interact with a component of the cloud provider, that are not specific to a VM
    (listing SSH keys, modifying users, and so on), are known in Salt Cloud as **functions**.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 当涉及到对云服务提供商的操作时，主要有两种类型的操作可以进行。针对虚拟机（VM）的特定操作（如`stop`、`start`、`restart`等）在Salt
    Cloud中被称为**动作**。与云服务提供商的组件交互，但不特定于虚拟机的操作（如列出SSH密钥、修改用户等），在Salt Cloud中被称为**函数**。
- en: Using actions
  id: totrans-181
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用动作
- en: 'Actions are called using the `--action` argument with the `salt-cloud` command.
    Because they operate on a specific VM, the first argument passed to them is a
    name. If other arguments are passed in from the command line, they will show up
    in a dictionary called `kwargs`. There is one more argument, called `call`, which
    tells a function whether it was called with `--action` or `--function`. You can
    use this to inform users when they have called an action or function incorrectly:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`--action`参数通过`salt-cloud`命令调用操作。因为它们作用于特定的虚拟机，所以传递给它们的第一个参数是一个名称。如果从命令行传递其他参数，它们将出现在名为`kwargs`的字典中。还有一个额外的参数，称为`call`，它告诉函数是否使用`--action`或`--function`调用。你可以使用这个来通知用户他们是否错误地调用了操作或函数：
- en: '[PRE19]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: Even if you do not plan to issue a warning to users, you must accept the `call`
    argument; it will be passed to it regardless, and an error will be raised if it
    isn't there.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 即使你并不打算向用户发出警告，你也必须接受`call`参数；无论是否传递给它，它都会被传递，如果没有提供，将会引发错误。
- en: Once again, I've sprung another surprise on you. Since this action will be renaming
    a VM, we need to notify Salt as well. If we don't, then the Master will be unable
    to contact the Minion. As usual, there is a helper function (`salt.utils.cloud.rename_key()`)
    that does the work for us.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 再次提醒，我又给你带来了一个惊喜。由于这个操作将重命名虚拟机，我们需要通知Salt。如果我们不这样做，那么Master将无法联系Minion。通常，有一个辅助函数（`salt.utils.cloud.rename_key()`）会为我们完成这项工作。
- en: Using functions
  id: totrans-186
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 使用函数
- en: Because functions do not operate on a specific VM, they do not require a name
    argument. However, they do require the `kwargs` and `call` arguments, even if
    you don't intend to use them for anything.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 因为函数不作用于特定的虚拟机，所以它们不需要名称参数。然而，它们确实需要`kwargs`和`call`参数，即使你并不打算使用它们。
- en: '[PRE20]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: If you add the call argument to various functions throughout your module, you
    will be able to call them directly using the `--action` or `--function` arguments.
    This can be very useful for, say, the `list_nodes()` functions, when you want
    to look at VMs for only one cloud provider at a time, rather than all of them
    at once.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你将`call`参数添加到模块中的各个函数中，你将能够直接使用`--action`或`--function`参数调用它们。这对于像`list_nodes()`这样的函数非常有用，当你只想一次查看一个云提供商的虚拟机，而不是一次性查看所有虚拟机时。
- en: The only public function that cannot be called this way is the `create()` function.
    `destroy()` can be called using the `--action` argument, and almost everything
    else that we've added so far can be called using the `–-function` argument. We'll
    go ahead and add those in for our final cloud module.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 唯一不能这样调用的公共函数是`create()`函数。可以使用`--action`参数调用`destroy()`，而我们迄今为止添加的几乎所有其他内容都可以使用`--function`参数调用。我们将继续添加这些功能到我们的最终云模块中。
- en: The final cloud module
  id: totrans-191
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 最终的云模块
- en: 'When we have finished, the final cloud module will look like this:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们完成时，最终的云模块将看起来像这样：
- en: '[PRE21]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: Troubleshooting cloud modules
  id: totrans-194
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 云模块故障排除
- en: Cloud modules may seem daunting because there are so many components that are
    required to make a cohesive piece of code. But if you work on the module with
    bite-sized chunks, it will be a lot easier to handle.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 云模块可能看起来令人畏惧，因为要制作一个连贯的代码块需要许多组件。但是，如果你以小块的方式处理模块，它将更容易处理。
- en: Write avail_sizes() or avail_images() first
  id: totrans-196
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 首先编写`avail_sizes()`或`avail_images()`
- en: Whenever I write a new cloud module, the first thing I do is get some sample
    code working that makes a small query. Because images and sizes are critical to
    the creation of a VM, and because those calls tend to be very simple, they are
    usually the easiest to get working.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 每次我编写一个新的云模块时，我首先会尝试让一些示例代码运行起来，以执行一个小查询。因为图像和大小对于创建虚拟机至关重要，而且这些调用通常非常简单，所以它们通常是实现起来最简单的。
- en: Once you have one of those functions working, break it out into a `_query()`
    function (if you didn't start that way) and a function that calls it. Then write
    another function that calls it. You may find yourself tweaking `_query()` for
    each of the first few functions, but then it will stabilize and require few, if
    any, changes.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦这些函数中的一个开始工作，将其拆分为一个`_query()`函数（如果你不是从那里开始的）和一个调用它的函数。然后编写另一个调用它的函数。你可能需要为前几个函数调整`_query()`，但之后它将稳定下来，几乎不需要任何更改。
- en: Use shortcuts
  id: totrans-199
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用快捷方式
- en: I cannot tell you how many hours I have spent waiting for VMs to spin up, just
    to test one piece of code. If you break out the `create()` function into a lot
    of smaller functions, then you can temporarily hardcode VM data as needed, and
    skip over operations that would otherwise waste too much time. Just be sure to
    take out the shortcuts when you finish!
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 我无法告诉你我花了多少小时等待虚拟机启动，只是为了测试一小段代码。如果你将`create()`函数分解成许多更小的函数，那么你可以根据需要临时硬编码虚拟机数据，并跳过那些会浪费太多时间的操作。只是确保在完成时移除这些捷径！
- en: Summary
  id: totrans-201
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Salt Cloud is designed to handle compute resources, though additional cloud
    functionality can be added as needed. A cloud module can be written using Libcloud,
    an SDK, or the direct REST API; each method has its pros and cons. Modern REST
    APIs tend to be very similar and easy to work with. There are several functions
    that are required for a cohesive cloud module, but most are not complex. Actions
    are performed against individual VMs while functions are performed against cloud
    providers themselves.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: Salt Cloud旨在处理计算资源，尽管可以根据需要添加额外的云功能。可以使用Libcloud、SDK或直接REST API编写云模块；每种方法都有其优缺点。现代REST
    API通常非常相似且易于使用。一个连贯的云模块需要几个功能，但大多数都不复杂。操作是在单个虚拟机上执行的，而功能是在云提供商本身上执行的。
- en: 'Now that we''ve gone over cloud modules, it''s time to start monitoring our
    resources. Next up: beacons.'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了云模块，是时候开始监控我们的资源了。接下来是：信标。
