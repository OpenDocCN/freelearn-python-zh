["```py\nfile_object = open(file_name ,access_mode)\n\n```", "```py\nfile_input = open(\"sample1.txt\",'r')\nall_read = file_input.read()\nprint all_read\nfile_input.close()\n\n```", "```py\nfile_input = open(\"sample1.txt\",'r')\nprint file_input.read(20)\nprint file_input.read(15)\nprint file_input.read(10)\nfile_input.close()\n\n```", "```py\nfile_input = open(\"sample1.txt\",'r')\nprint file_input.readline()\nprint file_input.readline()\nprint file_input.readline()\nfile_input.close()\n\n```", "```py\nfile_input = open(\"sample1.txt\",'r')\nprint  file_input.readline(100)\nprint  file_input.readline(20)\nfile_input.close()\n\n```", "```py\nfile_input = open(\"sample1.txt\",'r')\nprint  file_input.readlines()\nfile_input.close()\n\n```", "```py\nfile_input = open(\"sample1.txt\",'r')\nfor line in file_input:\n      print line\n\n```", "```py\nword = raw_input(\"Enter the word \")\nword = word.lower()\nfile_txt = open(\"batman.txt\", \"r\")\ncount = 0\nfor each in file_txt:\n    if word in each.lower():\n        count = count+1\nprint \"The \", word ,\" occured \",count, \" times\"\n\n```", "```py\nfile_input = open(\"motivation.txt\",'w')\nfile_input.write(\"Never give up\")\nfile_input.write(\"nRise above hate\")\nfile_input.write(\"nNo body remember second place\")\nfile_input.close()\n\n```", "```py\nfile_input = open(\"motivation.txt\",'w')\nfile_input.write(\"Never give up nRise above hate nNo body remember second place\")\nfile_input.close()\n\n```", "```py\nlist1 = [\"Blood sweat and respectn\",\n \"The first two you given\"\n \"The last you earnn\"\n \"Give it Earn it\"]\ntext_file = open(\"wwerockquotes.txt\", 'w')\ntext_file.writelines(list1)\ntext_file.close()\n\n```", "```py\nfile_input = open(\"newmotivation.txt\",'a')\nfile_input.write(\"Never give up\")\nfile_input.write(\"nRise above hate\")\nfile_input.write(\"nNo body remember second place\")\nfile_input.close() \n\n```", "```py\nfile_input = open(\"newmotivation.txt\",'a')\nfile_input.write(\"nBlood sweat and respect\")\nfile_input.write(\"nThe first two you give\")\nfile_input.write(\"nThe last you earn\")\nfile_input.write(\"nGive it Earn it\")\nfile_input.close()\n\n```", "```py\nimport pickle\nname = [\"mohit\",\"bhaskar\", \"manish\"]\nskill = [\"Python\", \"Python\", \"Java\"]\npickle_file = open(\"emp1.dat\",\"w\")\npickle.dump(name,pickle_file)\npickle.dump(skill,pickle_file)\npickle_file.close()\n\n```", "```py\nimport pickle\npickle_file = open(\"emp1.dat\",'r')\nname_list = pickle.load(pickle_file)\nskill_list =pickle.load(pickle_file)\nprint name_list ,\"n\", skill_list\n\n```", "```py\nleapx_team = {\nname : [\"mohit\", \"Ravender\", \"Himmat\", \"Robbin\"],\nskill : [\"Python\",\"Data Analytic\", \"Information Security\", \"SAP\"]\n             }\n\n```", "```py\nimport pickle\npickle_file = open(\"emp2.dat\",'w')\nleapx_team = {\n     'name' : [\"Mohit\", \"Ravender\", \"Himmat\", \"Robbin\"],\n     'skill' : [\"Python\",\"Data Analytic\", \"Information Security\", \"SAP\"]\n     }\npickle.dump(leapx_team,pickle_file)\npickle_file.close() \n\n```", "```py\nimport pickle\npickle_file = open(\"emp2.dat\",'r')\nall_data = pickle.load(pickle_file)\nprint all_data[\"skill\"]\nprint all_data[\"name\"] \n\n```", "```py\nimport cPickle as pickle\nname = [\"mohit\",\"bhaskar\", \"manish\"]\nskill = [\"Python\", \"Python\", \"Java\"]\npickle_file = open(\"emp1.dat\",\"w\")\npickle.dump(name,pickle_file)\npickle.dump(skill,pickle_file)\npickle_file.close()\n\n```", "```py\ndef sum1(a,b):\n            c = a+b\n            return c\nprint sum1(10,0)\n\n```", "```py\ndef sum1(a,b):\n            c = a+b\n            return c\ndef divide(a,b):\n            c = a/b\n            return c          \nprint divide(10,0)\nprint sum1(10,0)\n\n```", "```py\ndef sum1(a,b):\n    try:\n        c = a+b\n        return c\n    except :\n         print \"Error in sum1 function\"\ndef divide(a,b):\n    try:\n        c = a/b\n        return c\n    except :\n        print \"Error in divide function\"\nprint divide(10,0)\nprint sum1(10,0)\n\n```", "```py\ntry:\n            operation block;\nexcept Exception_name:\n            If there is Exception_name1 then execute this block.\nexcept Exception_name2:\n            If there is Exception_name2, then execute this block.\n else:\n            If there is no exception then execute this block.\n\n```", "```py\ndef divide1():\n    num = int(raw_input(\"Enter the number \"))\n    c = 45/num\n    print c\ndivide1()\n\n```", "```py\n def divide1():\n    try:\n        num = int(raw_input(\"Enter the number \"))\n        c = 45/num         \n        print c     \n    except ValueError :         \n        print \"Value is not int type\" \n    except ZeroDivisionError : \n       print \"Don't use zero\" \n    else: \n      print \"result is \",c\ndivide1()\n\n```", "```py\ntry:\n              #run this action first\nexcept:\n             # Run if exception occurs\nFinally :\n               #Always run this code\n\n```", "```py\ntry -> except -> else -> finally\n\n```", "```py\ntry: \n    num = int(raw_input(\"Enter the number \")) \n    re = 100/num \nexcept: \n    print \"Something is wrong\" \nelse: \n    print \"result is \",re \nfinally : \n    print \"finally program ends\"\n\n```", "```py\ntry: \n    num = int(raw_input(\"Enter the number \")) \n    re = 100/num \n    print re\nexcept Exception as e : \n    print e, type(e)\n\n```", "```py\n>>> raise IOError\nTraceback (most recent call last):\n   File \"<pyshell#0>\", line 1, in <module>\n      raise IOError\nIOError\n\n```", "```py\n>>> raise IOError(\"Hi there\")\nTraceback (most recent call last):\n File \"<pyshell#1>\", line 1, in <module>\n raise IOError(\"Hi there\")\nIOError: Hi there\n>>>\n\n```", "```py\nclass MyException(Exception): \n    def __init__(self, value):\n       self.value = value \n    def __str__(self):\n       return (self.value) \ntry: \n     num = raw_input(\"Enter the number : \")\n     if num == '2':\n         raise MyException(\"ohh\") \n     else :\n         print \"number is not 2\"\nexcept MyException : \n     print \"My exception occurred\"\n\n```", "```py\nclass MyException(Exception): \n      def __init__(self, value):\n           self.value = value \n      def __str__(self):\n           return (self.value)\n\n```", "```py\ntry: \n    num = raw_input(\"Enter the number : \")\n    if num == '2':\n         raise MyException(\"ohh\") \n    else :\n         print \"number is not 2\"\nexcept MyException : \n    print \"My exception occurred\"\n\n```", "```py\nclass MyException(Exception): \n    def __init__(self, value):\n        self.value = value \n    def __str__(self):\n        return (self.value) \ntry: \n     num = raw_input(\"Enter the number : \")\n     if num == '2':\n          raise MyException(\"ohh\") \n     else :\n          print \"number is not 2\"\nexcept IOError: \n      print \"My exception occurred\"\n\n```"]