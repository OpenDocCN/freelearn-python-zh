- en: '14'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Going Further – What To Do Next
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: You have now finished the book—congratulations! Learning ROS 2 is quite a challenge,
    and you’ve made a big step.
  prefs: []
  type: TYPE_NORMAL
- en: 'To recap, this is what you learned:'
  prefs: []
  type: TYPE_NORMAL
- en: '*Part 1:* You cleared up some misconceptions, installed ROS 2, and discovered
    some of the main concepts through experimentation. This set you up for the rest
    of the book.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Part 2:* This is where you learned about the most important ROS 2 concepts:
    how to write nodes and communicate with topics, services, and actions, and also
    how to make your application more dynamic with parameters and launch files.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Part 3:* You built a simulated robot, and while practicing the core concepts,
    you learned about TF, URDF, and Gazebo. TFs are the backbone of almost every ROS
    2 application.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: With this, you have a solid foundation you can use for any other ROS 2 project.
    Now, I don’t want to leave you there and just say that’s it. ROS 2 contains a
    lot more things, and robotics in general is much broader than just ROS 2\. Thus,
    to help you have a better idea for the future, in this last small chapter, I will
    give you some recommendations on what to do next.
  prefs: []
  type: TYPE_NORMAL
- en: What to do next is not the same for everyone. I will first attempt to provide
    a general roadmap, and then explore different nuances and details that will help
    you choose what to learn, depending on what you want to do. I will also share
    some extra resources that you can use to learn more about ROS 2.
  prefs: []
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have a better idea of what to do next,
    depending on your project, job, or learning objectives.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: ROS 2 roadmap – exploration phase
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning for a specific goal
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ROS 2 roadmap – exploration phase
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'When learning a technological topic, I would say the usual pattern is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Discovery phase**: You start with the basics that everybody should learn,
    get a broad understanding of the technology, and learn how to use it.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Exploration phase**: Once you have the basics, you try to explore different
    applications, projects, and topics related to the technology. This will make you
    connect lots of dots and will give you an even better understanding of the global
    picture. You will also become better technically.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '**Specialization phase**: It’s impossible to be an expert on everything. At
    some point, to be able to dive deep into a project, to get a job, or to build
    a career, you will need to specialize in one particular field. After exploring
    lots of topics, you will have a better idea of what you want to do, or what’s
    most in demand. You can then focus your attention and specialize.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: With this book, you have covered the first step. You have learned the basics
    that you absolutely need and will, for sure, use in almost all your future projects.
  prefs: []
  type: TYPE_NORMAL
- en: What we will cover now is the exploration phase, which comes right after that.
    In this section, I will attempt to provide you with a ROS 2 roadmap. This roadmap
    is a (non-exhaustive) list of what you can learn next, in no particular order.
  prefs: []
  type: TYPE_NORMAL
- en: Before we get started, note that I don’t recommend following the roadmap exactly
    as it is. The best way to learn is through projects. So, in this section, we have
    a skill list, and in the next section, we will explore different project/job examples
    to see how to pick the skills you need to learn.
  prefs: []
  type: TYPE_NORMAL
- en: Also, this is my own version; not every ROS expert would necessarily agree with
    me. If you find something that works for you, that’s completely fine. The goal
    here is to make progress.
  prefs: []
  type: TYPE_NORMAL
- en: I didn’t include links for this section because a simple Google search with
    the provided keywords will do. You will mostly find resources in the official
    documentation, independent tutorials and YouTube videos, GitHub projects, and
    questions asked in forums.
  prefs: []
  type: TYPE_NORMAL
- en: Common stacks and frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: After learning the core programming basics and concepts, such as TF and URDF,
    a very common next step is to learn about some of the existing ROS 2 **stacks**
    and **frameworks**, and also learn how to create interfaces between ROS 2 and
    hardware components.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: You will often see the terms *stack*, *framework*, and other variations. They
    usually mean the same thing. Basically, they are collections of packages that
    focus on solving a specific problem.
  prefs: []
  type: TYPE_NORMAL
- en: Among those stacks/frameworks, you can find **Navigation 2** (for **mobile robots**),
    **MoveIt 2** (for **robotic arms** and grippers), and **ros2_control** (for **hardware
    control**).
  prefs: []
  type: TYPE_NORMAL
- en: We will be talking about them because they are used in a lot of applications,
    and knowing about them is very likely to be beneficial for you. Let’s start with
    the hardware interface.
  prefs: []
  type: TYPE_NORMAL
- en: Hardware interface (and ros2_control)
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In the end, a robotics developer creates software in order to control pieces
    of hardware. You make motors move, you read data from sensors, and you add some
    algorithms in the middle to create a robotics system that does something useful.
  prefs: []
  type: TYPE_NORMAL
- en: The hardware interfacing part is crucial, and unless you only work with simulation,
    you will have to work with hardware. Thus, I recommend that you get more familiar
    with how to write a hardware driver (not specifically related to ROS) and how
    to interface this hardware driver with ROS 2.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can first try to create your own driver for a simple piece of hardware
    (anything: a motor, camera, or any other sensor). Once you can control your hardware
    with Python or C++, include your driver inside a ROS 2 node, and add topics/services/parameters
    to create a bridge between the driver and ROS 2.'
  prefs: []
  type: TYPE_NORMAL
- en: You can also find existing hardware components that have a ROS 2 driver, and
    have a look at their interface and code (often available on GitHub).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding how to interact with hardware is a big step in your ROS 2 learning.
  prefs: []
  type: TYPE_NORMAL
- en: Then, once you get that, there is a great framework that allows you to make
    robust interfaces between your ROS 2 application and your hardware drivers. It’s
    called ros2_control. This framework is used in most robots powered by ROS 2\.
    Once you understand how it works, you can set up new robots with hardware connections
    very fast.
  prefs: []
  type: TYPE_NORMAL
- en: 'Warning: learning ros2_control is not easy, and the documentation is not what
    I would call beginner friendly. It also requires you to write code in C++ and
    to know more about advanced ROS 2 concepts such as lifecycle nodes and components.
    I don’t recommend you to learn ros2_control directly after this book, especially
    if that was the beginning of your ROS 2 journey.'
  prefs: []
  type: TYPE_NORMAL
- en: What I recommend is that you first get more comfortable with creating basic
    hardware interfaces for ROS 2\. Then, as you progress throughout your projects,
    you will learn more about advanced ROS 2 concepts, and you will get to the point
    where you can tackle ros2_control.
  prefs: []
  type: TYPE_NORMAL
- en: Navigation 2 stack
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Navigation 2** stack, also known as **Nav2**, is very popular for a reason:
    most robots using ROS 2 are mobile robots, and what do you usually do with a mobile
    robot? You make it navigate autonomously in a physical environment.'
  prefs: []
  type: TYPE_NORMAL
- en: Now, with the ROS 2 basics you got from this book, how do you make that happen?
    There is a big gap between writing nodes and URDFs and making a robot navigate
    using path-planning algorithms. If you were to implement this by yourself, it
    would take you a lot of time and effort.
  prefs: []
  type: TYPE_NORMAL
- en: And if you remember, in the introduction of this book, we talked about how most
    of the time spent on robotics used to be about reinventing the wheel. We don’t
    want to do that.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, you can use the Nav2 stack. With this stack, you can easily create
    a map of the environment with **Simultaneous Localization And Mapping** (**SLAM**),
    and then use this map to make your robot navigate from one place to another, while
    avoiding obstacles.
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the Nav2 stack comes with its own challenges but, once you understand
    it, you can set up a new autonomous mobile robot in no time, and you can easily
    work with the hundreds of existing robotics projects using this stack.
  prefs: []
  type: TYPE_NORMAL
- en: So, I strongly recommend you learn a bit about Nav2\. Even if you don’t plan
    to work with mobile robots, you can get a basic understanding in just a few hours.
    Going deeper and actually adapting a robot for Nav2 will take longer, but for
    now, just get the basics.
  prefs: []
  type: TYPE_NORMAL
- en: MoveIt 2
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: So, there is a stack for mobile robots, and guess what? There is also a stack
    for robotic arms.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The two most common robots you will encounter in ROS 2 projects and jobs are
    mobile robots and robotic arms. Then come drones, but those are more niche and
    less supported. It doesn’t mean that you can’t find good packages to help you
    with drones, but it will for sure be more challenging. Then, even more niche (and
    less supported), you can find boats, spider robots, submarines, and so on.
  prefs: []
  type: TYPE_NORMAL
- en: If you are working with a robotic arm (let’s say with 5, 6, or 7 axes), you
    will need to find a way to compute positions and trajectories for this arm. How
    do you make the arm reach a certain point with a defined orientation, or pick
    up an object and place it somewhere else?
  prefs: []
  type: TYPE_NORMAL
- en: This can become quite a challenge, especially when you learn more about inverse
    kinematics, motion planning, and when you try to make all the joints of the robot
    move and arrive at the same time, without colliding with anything, while having
    continuous positions, velocities, and accelerations.
  prefs: []
  type: TYPE_NORMAL
- en: '**MoveIt 2** will do the motion planning for you, for a robotic arm, or even
    a system with several robotic arms. It also has functionalities for grasping.'
  prefs: []
  type: TYPE_NORMAL
- en: You will need to do some configuration for your robot (starting from the URDF),
    and then you can use some Python or C++ APIs directly in your nodes to send commands
    to control the robot.
  prefs: []
  type: TYPE_NORMAL
- en: I recommend you get at least a basic introduction to MoveIt 2, even if you won’t
    use robotic arms. You can set up a basic project in a few hours and see the main
    functionalities.
  prefs: []
  type: TYPE_NORMAL
- en: With Nav2 and MoveIt 2, you can cover a lot of ground. I don’t know the exact
    percentage of robots that use either of those stacks, but it’s definitely more
    than half of all ROS 2 robots. Nav2 and MoveIt 2 also both have integrations with
    ros2_control, which you can explore when you learn more about ros2_control.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s now explore more topics related to ROS 2.
  prefs: []
  type: TYPE_NORMAL
- en: More exploration topics
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On top of common stacks and frameworks, there are many additional things you
    could learn or improve. Here, we will explore some of them, starting with the
    basics. As stated in this section’s introduction, for any topic, type the relevant
    keyword into Google—maybe followed by **tutorial**—and you will find what you
    need (as explained in previous chapters, for more advanced ROS 2 concepts, documentation
    might be much more scarce). Once again, there is no particular order you should
    follow for this list of skills. Later in this chapter, we will see, with a few
    project and job examples, what to learn, depending on your goals.
  prefs: []
  type: TYPE_NORMAL
- en: Coming back to the basics
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Before jumping to advanced ROS 2 concepts, you should make sure that you have
    the basics right. Maybe when reading this book and doing the exercises, using
    all the terminal commands was a challenge for you. Or maybe the Python code was
    OK, but writing with OOP is not something you are used to.
  prefs: []
  type: TYPE_NORMAL
- en: To give you an example, in my courses or workshops, I often see people struggling
    with typing the right command in the terminal using auto-completion. This is a
    basic skill that will make you work five times faster with Linux, but if you don’t
    know how to do it properly, your whole ROS 2 learning experience will be slowed
    down so much. You can’t overlook the basics.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, it could be beneficial to improve your skills in the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`.bashrc` does, navigating to a package installation folder, getting remote
    access with SSH: these are all examples of what you need to know in order not
    to be stuck in the future. You don’t need to be a Linux expert, but spending a
    few hours to improve the basics can’t hurt.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Python**: I guess at this point you should be quite comfortable with Python,
    but if you had some challenges because of Python (and not ROS 2), then it could
    be helpful to review some basics, especially with classes and OOP.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**C++**: If you only looked at the Python examples, now is a good time to try
    to do the same with C++. Not only will it make you review the concepts one more
    time, but as you progress with ROS 2, you will realize that a lot of code is only
    written in C++, especially for hardware control and algorithms that require a
    lot of computation power. If you want to become a great robotics developer, you
    will need C++.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, once you get those basics right, what other core ROS 2 concepts could you
    learn?
  prefs: []
  type: TYPE_NORMAL
- en: More advanced ROS 2 concepts
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you are comfortable with the prerequisites and the concepts from this
    book, you can go further and learn more advanced ROS 2 concepts, such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Actions**: We saw actions in [*Chapter 7*](B22403_07.xhtml#_idTextAnchor338),
    but I clearly stated that this is a more advanced concept that was maybe worth
    skipping at the time if you felt overwhelmed. If you haven’t worked on actions
    yet, now is a good time. Actions, along with topics and services, will allow you
    to use all the ROS 2 communication mechanisms between nodes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Lifecycle nodes (also called managed nodes)**: These nodes contain a state
    machine that allows you to easily separate your code for different parts of initialization
    and activation. This is especially useful when dealing with hardware. For example,
    you can make sure that a hardware component is correctly connected and initialized
    before using it in a critical part of your application. Also, lifecycle nodes
    will be useful if you want to learn ros2_control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Executors**: With executors, you can have more control over how callbacks
    are handled within a node or several nodes (we saw an example in the *Adding the
    cancel mechanism* section of [*Chapter 7*](B22403_07.xhtml#_idTextAnchor338)).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Components**: By making your nodes components, you can run several nodes
    from within one executable. This can reduce resource usage and speed up communication.
    To learn about components, you first need to understand executors. Then, components
    will also help you understand ros2_control.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is not a final list, but I would say that almost every ROS developer will
    need those concepts at some point.
  prefs: []
  type: TYPE_NORMAL
- en: On top of that, there are many additional technologies not related to ROS that
    can be helpful.
  prefs: []
  type: TYPE_NORMAL
- en: Extra technologies and fields
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As we will see later in this chapter when we look at some job examples, being
    a ROS or robotics developer doesn’t mean you only need to learn about ROS. There
    are many more things required to have a complete skill set.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are more technologies, fields, and tools that you can explore (I repeat,
    this is a non-exhaustive list, just some examples, and in no particular order):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Electronics/hardware**: There is a huge part of hardware in robotics. In
    the end, you write code to move the hardware. Without the hardware, there is nothing.
    This is a complete field in itself. You could learn more about hardware platforms,
    communication protocols, soldering components, designing a **printed circuit board**
    (**PCB**), and so on. Some people make a career just out of this (hardware engineers).
    Even if you don’t plan to follow that road, it can be helpful to know a bit about
    it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mechanics, CAD software, 3D design**: Just like for hardware, some people
    make a career out of mechanical engineering. Without going too deep, it could
    be useful to learn about how to design a mechanical part using CAD software.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Fast prototyping**: This combines a lot of fields, and the goal is, as its
    name suggests, to create a prototype fast to validate (or not) an idea. For fast
    prototyping, you could use 3D printing and embedded hardware boards such as Arduino
    and Raspberry Pi (you can run ROS 2 on Raspberry Pi).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Git, continuous integration/deployment**: The chances are that you will work
    with other people. These tools will help you collaborate and release code more
    easily.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Docker**: The use of Docker amongst robotics developers has been rising,
    as you can easily set up a new environment with the correct Ubuntu/ROS 2 version.
    This can be extremely useful for working on several projects and testing your
    code in different environments.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**DDS, networking**: ROS 2 communication relies on **Data Distribution Service**
    (**DDS**) and, depending on your project, you might have to dive a bit deeper
    into this, as well as networking in general.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Image processing, machine learning, and so on**: There is a huge field in
    robotics dedicated to analyzing the environment and extracting useful information
    from it. You can find a lot of ROS 2 integration with cameras, laser scanning,
    depth sensors, and also libraries such as OpenCV.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As you can see, that’s a lot of things. When seeing this list, you might feel
    a bit discouraged because you realize how little you know, even after finishing
    a whole book about ROS 2\. Don’t worry, though; you don’t need to learn everything.
    I am personally not an expert in all those fields, and nobody is. We will now
    see how to learn ROS 2 more efficiently by having a specific goal in mind.
  prefs: []
  type: TYPE_NORMAL
- en: Learning for a specific goal
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The previous list of frameworks, stacks, and technologies can help you see the
    global picture of robotics, and help you pick what you need to learn next.
  prefs: []
  type: TYPE_NORMAL
- en: But, in the end, depending on your goals, your learning path may differ. If
    you’re a student looking to finish a university project with a mobile robot, or
    if you need to get up to speed to work for a robotics start-up creating simulation
    products, the answer is going to be different.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we will explore a few examples of projects and job offers,
    and see what learning path is more appropriate for each example. Note that the
    examples we will see do not make an exhaustive list of paths. Your own path is
    going to be unique. The real point of this section is to show you that you should
    first think about what you want to do with ROS 2, and from this, pick what to
    learn.
  prefs: []
  type: TYPE_NORMAL
- en: 'Don’t stress too much about it: even if you choose a path and change later,
    no worries. You don’t need to have a definitive answer now about the kind of project
    or career you want to pursue. Remember, you are still in the exploration phase.
    Exploring means going one way, and then maybe realizing that you prefer another
    way, until you find something that really sticks with you. All the knowledge you
    gain while exploring will be valuable.'
  prefs: []
  type: TYPE_NORMAL
- en: Let’s dive in.
  prefs: []
  type: TYPE_NORMAL
- en: What to learn for a project?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The overall best way is to find a project and learn as you go. While building
    the project, you will encounter some challenges. Solving those challenges often
    means learning new things and they will force you to develop a better practical
    understanding.
  prefs: []
  type: TYPE_NORMAL
- en: Now, where to find projects? There are tons of project ideas on the internet.
    Depending on your hardware and financial resources, you might start with something
    that involves only a simulation, or if you have some hardware, you could build
    a robot or part of a robot yourself, and make the robot perform a task in the
    real world.
  prefs: []
  type: TYPE_NORMAL
- en: A few project examples
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Let’s consider a few projects and the learning paths they involve:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Using a mobile robot to find books in a library (typical university project)**:
    Here, you will need to make a robot navigate, so you probably have to learn about
    the Nav2 stack in order to map the library and make the robot move in it. On top
    of that, you will need to figure out how to find books, maybe with a camera. You
    will choose and test a camera and integrate it with your robot. This will make
    you practice with hardware interfacing with the robot. Then, to recognize books,
    you will use image processing. Also, you can start by using an existing mobile
    platform, and then design your own.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Warehouse management with mobile robots**: With this project, you will also
    need to make robots navigate, but this time you will have to make several robots
    work in the same environment in an organized way. You can learn about controlling
    robot swarms, which is yet another thing to learn that we haven’t listed previously.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Maintenance patrol with a drone**: In this case, precise hardware control
    and remote communication will be the first challenge. Then, you will have to control
    the behavior of the drone. Drones are a specific kind of robot, and the MoveIt
    2 or Nav2 stacks won’t apply; you will need to find something else. At the time
    of writing, unfortunately, there is no plug-and-play stack you can use for drones
    in ROS 2\. So, you will need to do some extra research and effort.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Sorting objects in a production line**: Here, we reach a completely different
    domain, which is the manipulation of objects. If not provided, you will need to
    find which robotic arm (or other device) you can use to pick and place objects,
    what prehension system to use, and so on. Then, you can control the robot with
    MoveIt 2\. After that, you also need to find a way to sort products. Maybe you
    need a camera; in this case, you will have to correctly place the camera, do some
    calibration, and coordinate the whole system so that the robot knows which objects
    to pick, and where.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are a few examples, but you can see that depending on what kind of robots
    you will use, and what you want to do with those robots, the application will
    be completely different, which leads to a different learning path.
  prefs: []
  type: TYPE_NORMAL
- en: My personal learning path
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: To give you yet another example, here is my personal story with ROS. I discovered
    ROS when I co-founded a robotics startup. We wanted to create an educational 6-axis
    robotic arm, and I was dealing with the software.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is, more or less, my learning path with ROS: I started with the basics,
    then quickly went on to create a simplified URDF for the robot, and make it move
    with MoveIt, so we could see it move in RViz (we didn’t have a Gazebo simulation
    yet, but as we were building a real physical robot, we focused on the physical
    control first).'
  prefs: []
  type: TYPE_NORMAL
- en: Then, the big challenge was to find reliable low-cost components and motors
    to control each of the 6 axes, create a hardware driver for each, and control
    them from an integrated Raspberry Pi board. This involved learning about communication
    protocols (and ros_control), working closely with the hardware, and experimenting
    a lot.
  prefs: []
  type: TYPE_NORMAL
- en: On another level, the goal was to create an intuitive user interface, so we
    developed some APIs on top of ROS, and a graphical interface with Angular. That
    alone required other kinds of skills.
  prefs: []
  type: TYPE_NORMAL
- en: The story is of course overly simplified, but as you can see, after getting
    the basics, I learned what I needed, when I needed it, so I could make progress
    on the project. For example, I didn’t learn about Gazebo or the Navigation stack
    first; this came much later. The reason is simply because that was not the most
    important thing to learn at the time.
  prefs: []
  type: TYPE_NORMAL
- en: What to learn to get a job?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You might wonder: working on projects is nice, but if your goal is to get a
    job and start a career in robotics, what should you learn?'
  prefs: []
  type: TYPE_NORMAL
- en: 'Again, the answer is: it depends. However, you could have a look at job offers
    you find on the internet and see more or less what is required for the kind of
    job that you want to pursue.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Also, for a junior position, it is often not expected that you are an expert
    in any particular field. Companies know that you have just begun, and that you
    still need to learn. Thus, for junior positions or internships, a strong motivation
    to learn (bonus point: portfolio to showcase personal projects) is often more
    important than having skills in x, y, or z.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, to give you some real examples, I found some existing job offers, and
    I will show you some of the technical requirements they ask for. To be clear:
    I won’t promote any company or job offer here, I will just put a recap of technical
    skills they require (that I have rewritten for brevity), for example purposes
    only.'
  prefs: []
  type: TYPE_NORMAL
- en: Job 1 – ROS 2 development internship
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are the requirements for an internship centered around ROS 2 development:'
  prefs: []
  type: TYPE_NORMAL
- en: Python 3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ROS 1, ROS 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux, Bash, Git
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Notions of path planning and collision avoidance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Network and communication protocols (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: C++ (optional)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: To prepare for this internship, you see that you have to develop your Python,
    Linux, and ROS skills.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: They also mention ROS 1\. It is worth noting that, sometimes, ROS 1 is needed
    (to work on legacy projects), but you can learn it on the go. Sometimes, the person
    writing the job description doesn’t really understand the technology part of the
    job, and just adds all the possible keywords they encounter to make the offer
    look more general and attract more candidates. In this case, you will probably
    use ROS 2 anyway.
  prefs: []
  type: TYPE_NORMAL
- en: Path planning and collision avoidance are also included, meaning that exploring
    the Nav2 stack could give you a competitive advantage.
  prefs: []
  type: TYPE_NORMAL
- en: Job 2 – AI robotics internship
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is another internship where the focus is on artificial intelligence:'
  prefs: []
  type: TYPE_NORMAL
- en: Machine learning
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Proficiency in Python, experience with PyTorch or TensorFlow
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ROS
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Enthusiasm for mobile and intelligent robots
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: For this internship, machine learning will probably be the most important part
    of the job, while working with robots that are using ROS. Thus, for a job like
    this, you should equally learn about machine learning, if that’s your interest.
  prefs: []
  type: TYPE_NORMAL
- en: As you will see, many of the ROS jobs are not 100% centered around ROS. ROS
    is just one tool they use.
  prefs: []
  type: TYPE_NORMAL
- en: Job 3 – Humanoid robot development
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here are some requirements for a more intermediate job (one that requires working
    experience) where you participate in the development of a humanoid robot:'
  prefs: []
  type: TYPE_NORMAL
- en: ROS 2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Linux, Git, and CI workflows
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Jetson platforms
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Robot kinematics and dynamics
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Control algorithms: force, impedance, MPC'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Communication protocols: CAN, I2C, SPI, and so on'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In this job, robot control, communication protocols, and using them in an embedded
    Linux platform are crucial. The chances are that 80% of the challenge will be
    working on this, and then the rest will be about making it work with ROS 2.
  prefs: []
  type: TYPE_NORMAL
- en: I will stop here. The point was to show you that different jobs can require
    very different skill sets, even though they are all labeled as ROS jobs. Also,
    in some of them, ROS is the main focus, but many jobs use ROS only as a single
    tool among many others.
  prefs: []
  type: TYPE_NORMAL
- en: So, if there is a dream job you want to apply to, focus on the required skills
    first. To learn those skills, find a project that matches the skills, and then,
    as you go, find learning resources to help you complete the project.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we focused on what you can do after finishing this book to
    continue learning ROS 2 efficiently. This question can be quite tough to answer,
    and robotics is too vast for anyone to master everything.
  prefs: []
  type: TYPE_NORMAL
- en: Learning for a specific goal (for example, a job application or a work/school
    project) is the best overall since you will learn things that you can directly
    apply.
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t really know what to do, I also gave you a list of common ROS 2
    stacks/frameworks, and other topics related to ROS 2 that you could learn. I strongly
    recommend that you learn those by doing projects, and focus on practical resources
    that teach you by doing.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you liked this book and the way I teach, here are a few more resources from
    me:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Robotics Backend website** ([https://roboticsbackend.com/](https://roboticsbackend.com/)):
    Here, you will find more written tutorials about ROS 2 and other robotics-related
    topics'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Robotics Backend YouTube channel** ([https://www.youtube.com/c/RoboticsBackend](https://www.youtube.com/c/RoboticsBackend)):
    For video tutorials and free crash courses'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Full-length online courses** ([https://roboticsbackend.com/courses/](https://roboticsbackend.com/courses/)):
    I also provide complete ROS 2 courses that you can purchase, with a strong focus
    on practical learning'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: As we saw in this chapter, you have now finished the discovery phase, and you
    enter the exploration phase. As you make progress and get better at what you do,
    you will start to find which field in particular you want to dive into. Depending
    on this, and the opportunities you get, you will start to specialize.
  prefs: []
  type: TYPE_NORMAL
- en: Until then, don’t overthink anything, and just learn/explore as much as possible.
    Start several projects, learn other technologies, and be curious. Also, don’t
    forget to have fun while learning and building projects. This is one of the most
    important things that will motivate you to go further.
  prefs: []
  type: TYPE_NORMAL
- en: I wish you good luck on your journey and hope this book has helped you get started
    on the right foot!
  prefs: []
  type: TYPE_NORMAL
