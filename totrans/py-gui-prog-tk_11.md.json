["```py\n# unittest_demo/mycalc.py\nimport random\nclass MyCalc:\n  def __init__(self, a, b):\n    self.a = a\n    self.b = b\n  def add(self):\n    return self.a + self.b\n  def mod_divide(self):\n    if self.b == 0:\n      raise ValueError(\"Cannot divide by zero\")\n    return (int(self.a / self.b), self.a % self.b)\n  def rand_between(self):\n    return (\n      (random.random() * abs(self.a - self.b))\n      + min(self.a, self.b)\n    ) \n```", "```py\n# unittest_demo/test_mycalc_no_unittest.py\nfrom mycalc import MyCalc\nmc1 = MyCalc(1, 100)\nmc2 = MyCalc(10, 4)\ntry:\n  assert mc1.add() == 101, \"Test of add() failed.\"\n  assert mc2.mod_divide() == (2, 2), \"Test of mod_divide() failed.\"\nexcept AssertionError as e:\n  print(\"Test failed: \", e)\nelse:\n  print(\"Tests succeeded!\") \n```", "```py\nif not expression:\n  raise AssertionError(\"message\") \n```", "```py\ndef add(self):\n  return self.a - self.b \n```", "```py\nTest failed: Test of add() failed. \n```", "```py\ndef mod_divide(self):\n  #...\n  return (self.a // self.b, self.a % self.b) \n```", "```py\n# unittest_demo/test_mycalc.py\nimport mycalc\nimport unittest\nclass TestMyCalc(unittest.TestCase):\n  def test_add(self):\n    mc = mycalc.MyCalc(1, 10)\n    assert mc.add() == 11\nif __name__ == '__main__':\n  unittest.main() \n```", "```py\n.\n---------------------------------------------------------------------\nRan 1 test in 0.000s\nOK \n```", "```py\ndef test_add(self):\n  mc = mycalc.MyCalc(1, 10)\n  assert mc.add() == **12** \n```", "```py\nF\n=====================================================================\nFAIL: test_add (__main__.TestMyCalc)\n---------------------------------------------------------------------Traceback (most recent call last):\nFile \"test_mycalc.py\", line 8, in test_add\nassert mc.add() == 12\nAssertionError\n---------------------------------------------------------------------Ran 1 test in 0.000s\nFAILED (failures=1) \n```", "```py\n def test_add(self):\n    mc = mycalc.MyCalc(1, 10)\n    **self.assertEqual(mc.add(), 12)** \n```", "```py\nTraceback (most recent call last):\nFile \"test_mycalc.py\", line 11, in test_add\nself.assertEqual(mc.add(), 12)\nAssertionError: 11 != 12 \n```", "```py\n def test_mod_divide(self):\n    mc = mycalc.MyCalc(1, 0)\n    self.assertRaises(ValueError, mc.mod_divide) \n```", "```py\n def test_mod_divide(self):\n    mc = mycalc.MyCalc(1, 0)\n    with self.assertRaises(ValueError):\n      mc.mod_divide() \n```", "```py\n def setUp(self):\n    self.mycalc1_0 = mycalc.MyCalc(1, 0)\n    self.mycalc36_12 = mycalc.MyCalc(36, 12) \n```", "```py\n def test_add(self):\n    self.assertEqual(self.mycalc1_0.add(), 1)\n    self.assertEqual(self.mycalc36_12.add(), 48) \n```", "```py\ndef test_rand_between(self):\n  rv = self.mycalc1_0.rand_between()\n  self.assertLessEqual(rv, 1)\n  self.assertGreaterEqual(rv, 0) \n```", "```py\nfrom unittest.mock import Mock\n  #... inside TestMyCalc\n  def test_rand_between(self):\n    fakerandom = Mock(return_value=.5) \n```", "```py\n #...\n    orig_random = mycalc.random.random\n    mycalc.random.random = fakerandom\n    rv = self.mycalc1_0.rand_between()\n    self.assertEqual(rv, 0.5)\n    mycalc.random.random = orig_random \n```", "```py\n# test_mycalc.py\nfrom unittest.mock import patch\n#... inside TestMyCalc\n  def test_rand_between(self):\n    with patch('mycalc.random.random') as fakerandom:\n      fakerandom.return_value = 0.5\n      rv = self.mycalc1_0.rand_between()\n      self.assertEqual(rv, 0.5) \n```", "```py\n @patch('mycalc.random.random')\n  def test_rand_between2(self, fakerandom):\n    fakerandom.return_value = 0.5\n    rv = self.mycalc1_0.rand_between()\n    self.assertEqual(rv, 0.5) \n```", "```py\n$ python -m unittest \n```", "```py\n# test_models.py\nfrom .. import models\nfrom unittest import TestCase\nfrom unittest import mock\nfrom pathlib import Path \n```", "```py\nclass TestCSVModel(TestCase):\n  def setUp(self):\n    self.file1_open = mock.mock_open(\n      read_data=(\n        \"Date,Time,Technician,Lab,Plot,Seed Sample,\"\n        \"Humidity,Light,Temperature,Equipment Fault,\"\n        \"Plants,Blossoms,Fruit,Min Height,Max Height,\"\n        \"Med Height,Notes\\r\\n\"\n        \"2021-06-01,8:00,J Simms,A,2,AX478,24.47,1.01,21.44,\"\n        \"False,14,27,1,2.35,9.2,5.09,\\r\\n\"\n        \"2021-06-01,8:00,J Simms,A,3,AX479,24.15,1,20.82,\"\n        \"False,18,49,6,2.47,14.2,11.83,\\r\\n\"\n      )\n    )\n    self.file2_open = mock.mock_open(read_data='')\n    self.model1 = models.CSVModel('file1')\n    self.model2 = models.CSVModel('file2') \n```", "```py\n# test_models.py, inside TestCSVModel\n  @mock.patch('abq_data_entry.models.Path.exists')\n  def test_get_all_records(self, mock_path_exists):\n    mock_path_exists.return_value = True \n```", "```py\n with mock.patch(\n      'abq_data_entry.models.open',\n      self.file1_open\n    ):\n      records = self.model1.get_all_records() \n```", "```py\n# test_models.py, inside TestCSVModel.test_get_all_records()\n    self.assertEqual(len(records), 2)\n    self.assertIsInstance(records, list)\n    self.assertIsInstance(records[0], dict) \n```", "```py\n fields = (\n      'Date', 'Time', 'Technician', 'Lab', 'Plot',\n      'Seed Sample', 'Humidity', 'Light',\n      'Temperature', 'Equipment Fault', 'Plants',\n      'Blossoms', 'Fruit', 'Min Height', 'Max Height',\n      'Med Height', 'Notes')\n    for field in fields:\n      self.assertIn(field, records[0].keys())\n    self.assertFalse(records[0]['Equipment Fault']) \n```", "```py\n self.file1_open.assert_called_with(\n      Path('file1'), 'r', encoding='utf-8', newline=''\n    ) \n```", "```py\n @mock.patch('abq_data_entry.models.Path.exists')\n  def test_save_record(self, mock_path_exists):\n    record = {\n      \"Date\": '2021-07-01', \"Time\": '12:00',\n      \"Technician\": 'Test Technician', \"Lab\": 'C',\n      \"Plot\": '17', \"Seed Sample\": 'test sample',\n      \"Humidity\": '10', \"Light\": '99',\n      \"Temperature\": '20', \"Equipment Fault\": False,\n      \"Plants\": '10', \"Blossoms\": '200',\n      \"Fruit\": '250', \"Min Height\": '40',\n      \"Max Height\": '50', \"Med Height\": '55',\n      \"Notes\": 'Test Note\\r\\nTest Note\\r\\n'\n    }\n    record_as_csv = (\n      '2021-07-01,12:00,Test Technician,C,17,test sample,10,99,'\n      '20,False,10,200,250,40,50,55,\"Test Note\\r\\nTest Note\\r\\n\"'\n      '\\r\\n') \n```", "```py\n mock_path_exists.return_value = True\n    with mock.patch('abq_data_entry.models.open', self.file2_open):\n      self.model2.save_record(record, None) \n```", "```py\n self.file2_open.assert_called_with(\n        Path('file2'), 'a', encoding='utf-8', newline=''\n      ) \n```", "```py\n file2_handle = self.file2_open()\n      file2_handle.write.assert_called_with(record_as_csv) \n```", "```py\n with mock.patch('abq_data_entry.models.open', self.file1_open):\n      self.model1.save_record(record, 1)\n      self.file1_open.assert_called_with(\n        Path('file1'), 'w', encoding='utf-8'\n      ) \n```", "```py\n file1_handle = self.file1_open()\n      file1_handle.write.assert_has_calls([\n        mock.call(\n          'Date,Time,Technician,Lab,Plot,Seed Sample,'\n          'Humidity,Light,Temperature,Equipment Fault,Plants,'\n          'Blossoms,Fruit,Min Height,Max Height,Med Height,Notes'\n          '\\r\\n'),\n        mock.call(\n          '2021-06-01,8:00,J Simms,A,2,AX478,24.47,1.01,21.44,'\n          'False,14,27,1,2.35,9.2,5.09,\\r\\n'),\n        mock.call(\n          '2021-07-01,12:00,Test Technician,C,17,test sample,'\n          '10,99,20,False,10,200,250,40,50,55,'\n          '\"Test Note\\r\\nTest Note\\r\\n\"\\r\\n')\n        ]) \n```", "```py\n# test_application.py\nfrom unittest import TestCase\nfrom unittest.mock import patch\nfrom .. import application \n```", "```py\nclass TestApplication(TestCase):\n  records = [\n    {'Date': '2018-06-01', 'Time': '8:00', 'Technician': 'J Simms',\n     'Lab': 'A', 'Plot': '1', 'Seed Sample': 'AX477',\n     'Humidity': '24.09', 'Light': '1.03', 'Temperature': '22.01',\n     'Equipment Fault': False,  'Plants': '9', 'Blossoms': '21',\n     'Fruit': '3', 'Max Height': '8.7', 'Med Height': '2.73',\n     'Min Height': '1.67', 'Notes': '\\n\\n',\n    },\n    {'Date': '2018-06-01', 'Time': '8:00', 'Technician': 'J Simms',\n     'Lab': 'A', 'Plot': '2', 'Seed Sample': 'AX478',\n     'Humidity': '24.47', 'Light': '1.01', 'Temperature': '21.44',\n     'Equipment Fault': False, 'Plants': '14', 'Blossoms': '27',\n     'Fruit': '1', 'Max Height': '9.2', 'Med Height': '5.09',\n     'Min Height': '2.35', 'Notes': ''\n     }\n  ]\n  settings = {\n    'autofill date': {'type': 'bool', 'value': True},\n    'autofill sheet data': {'type': 'bool', 'value': True},\n    'font size': {'type': 'int', 'value': 9},\n    'font family': {'type': 'str', 'value': ''},\n    'theme': {'type': 'str', 'value': 'default'}\n  } \n```", "```py\n# test_application.py, inside TestApplication class\n  def setUp(self):\n    with \\\n      patch(\n        'abq_data_entry.application.m.CSVModel'\n      ) as csvmodel,\\\n      patch(\n        'abq_data_entry.application.m.SettingsModel'\n      ) as settingsmodel,\\\n      patch(\n       'abq_data_entry.application.Application._show_login'\n      ) as show_login,\\\n      patch('abq_data_entry.application.v.DataRecordForm'),\\\n      patch('abq_data_entry.application.v.RecordList'),\\\n      patch('abq_data_entry.application.ttk.Notebook'),\\\n      patch('abq_data_entry.application.get_main_menu_for_os')\\\n    :\n      show_login.return_value = True\n      settingsmodel().fields = self.settings\n      csvmodel().get_all_records.return_value = self.records\n      self.app = application.Application() \n```", "```py\n def tearDown(self):\n    self.app.update()\n    self.app.destroy() \n```", "```py\n def test_show_recordlist(self):\n    self.app._show_recordlist()\n    self.app.notebook.select.assert_called_with(self.app.recordlist) \n```", "```py\n def test_populate_recordlist(self):\n    self.app._populate_recordlist()\n    self.app.model.get_all_records.assert_called()\n    self.app.recordlist.populate.assert_called_with(self.records) \n```", "```py\n self.app.model.get_all_records.side_effect = Exception(\n      'Test message'\n    ) \n```", "```py\n with patch('abq_data_entry.application.messagebox'):\n      self.app._populate_recordlist()\n      application.messagebox.showerror.assert_called_with(\n        title='Error', message='Problem reading file',\n        detail='Test message'\n      ) \n```", "```py\n# test_widgets.py\nfrom .. import widgets\nfrom unittest import TestCase\nfrom unittest.mock import Mock\nimport tkinter as tk\nfrom tkinter import ttk\nclass TkTestCase(TestCase):\n  \"\"\"A test case designed for Tkinter widgets and views\"\"\"\n  @classmethod\n  def setUpClass(cls):\n    cls.root = tk.Tk()\n    cls.root.wait_visibility()\n  @classmethod\n  def tearDownClass(cls):\n    cls.root.update()\n    cls.root.destroy() \n```", "```py\nclass TestValidatedSpinbox(TkTestCase):\n  def setUp(self):\n    self.value = tk.DoubleVar()\n    self.vsb = widgets.ValidatedSpinbox(\n      self.root,\n      textvariable=self.value,\n      from_=-10, to=10, increment=1\n    )\n    self.vsb.pack()\n    self.vsb.wait_visibility()\n  def tearDown(self):\n    self.vsb.destroy() \n```", "```py\n def test_key_validate(self):\n    for x in range(10):\n      x = str(x)\n      p_valid = self.vsb._key_validate(x, 'end', '', x, '1')\n      n_valid = self.vsb._key_validate(x, 'end', '-', '-' + x, '1')\n      self.assertTrue(p_valid)\n      self.assertTrue(n_valid) \n```", "```py\n def key_validate(self, new, current=''):\n    return self.vsb._key_validate(\n      new,  # inserted char\n      'end',  # position to insert\n      current,  # current value\n      current + new,  # proposed value\n      '1'  # action code (1 == insert)\n    ) \n```", "```py\n def test_key_validate_letters(self):\n    valid = self.key_validate('a')\n    self.assertFalse(valid)\n  def test_key_validate_increment(self):\n    valid = self.key_validate('1', '0.')\n    self.assertFalse(valid)\n  def test_key_validate_high(self):\n    valid = self.key_validate('0', '10')\n    self.assertFalse(valid)) \n```", "```py\n# test_widgets.py, in TkTestCase\n  def type_in_widget(self, widget, string):\n    widget.focus_force() \n```", "```py\n# test_widgets.py, in TkTestCase\n  keysyms = {\n    '-': 'minus',\n    ' ': 'space',\n    ':': 'colon',\n  } \n```", "```py\n# test_widgets.py, in TkTestCase.type_in_widget()\n    for char in string:\n      char = self.keysyms.get(char, char)\n      widget.event_generate(f'<KeyPress-{char}>')\n      self.root.update_idletasks() \n```", "```py\n def click_on_widget(self, widget, x, y, button=1):\n    widget.focus_force()\n    widget.event_generate(f'<ButtonPress-{button}>', x=x, y=y)\n    self.root.update_idletasks() \n```", "```py\n# test_widgets.py, in TestValidatedSpinbox\n  def test__key_validate_integration(self):\n    self.vsb.delete(0, 'end')\n    self.type_in_widget(self.vsb, '10')\n    self.assertEqual(self.vsb.get(), '10') \n```", "```py\n self.vsb.delete(0, 'end')\n    self.type_in_widget(self.vsb, 'abcdef')\n    self.assertEqual(self.vsb.get(), '')\n    self.vsb.delete(0, 'end')\n    self.type_in_widget(self.vsb, '200')\n    self.assertEqual(self.vsb.get(), '2') \n```", "```py\n# test_widgets.py, inside TestValidatedSpinbox\n  def click_arrow_naive(self, arrow='inc', times=1):\n    x = self.vsb.winfo_width() – 5\n    y = 5 if arrow == 'inc' else 15\n    for _ in range(times):\n      self.click_on_widget(self.vsb, x=x, y=y) \n```", "```py\n# test_widgets.py, inside TkTestCase\n  @staticmethod\n  def find_element(widget, element):\n    widget.update_idletasks()\n    x_coords = range(widget.winfo_width())\n    y_coords = range(widget.winfo_height())\n    for x in x_coords:\n      for y in y_coords:\n        if widget.identify(x, y) == element:\n          return (x + 1, y + 1)\n    raise Exception(f'{element} was not found in widget') \n```", "```py\n# test_widgets.py, inside TestValidatedSpinbox.setUp()\n    ttk.Style().theme_use('classic')\n    self.vsb.update_idletasks() \n```", "```py\n# test_widgets.py, inside TestValidatedSpinbox\n  def click_arrow(self, arrow, times=1):\n    element = f'{arrow}arrow'\n    x, y = self.find_element(self.vsb, element)\n    for _ in range(times):\n      self.click_on_widget(self.vsb, x=x, y=y) \n```", "```py\n# test_widgets.py, inside TestValidatedSpinbox\n  def test_arrows(self):\n    self.value.set(0)\n    self.click_arrow('up', times=1)\n    self.assertEqual(self.vsb.get(), '1')\n    self.click_arrow('up', times=5)\n    self.assertEqual(self.vsb.get(), '6')\n    self.click_arrow(arrow='down', times=1)\n    self.assertEqual(self.vsb.get(), '5') \n```", "```py\n# test_widgets.py\nclass TestValidatedMixin(TkTestCase):\n  def setUp(self):\n    class TestClass(widgets.ValidatedMixin, ttk.Entry):\n      pass\n    self.vw1 = TestClass(self.root) \n```", "```py\n def test__validate(self):\n    args = {\n      'proposed': 'abc',\n      'current': 'ab',\n      'char': 'c',\n      'event': 'key',\n      'index': '2',\n      'action': '1'\n    }\n    self.assertTrue(\n      self.vw1._validate(**args)\n    ) \n```", "```py\n fake_key_val = Mock(return_value=False)\n    self.vw1._key_validate = fake_key_val\n    self.assertFalse(\n      self.vw1._validate(**args)\n    )\n    fake_key_val.assert_called_with(**args) \n```", "```py\n args['event'] = 'focusout'\n    self.assertTrue(self.vw1._validate(**args))\n    fake_focusout_val = Mock(return_value=False)\n    self.vw1._focusout_validate = fake_focusout_val\n    self.assertFalse(self.vw1._validate(**args))\n    fake_focusout_val.assert_called_with(event='focusout') \n```"]