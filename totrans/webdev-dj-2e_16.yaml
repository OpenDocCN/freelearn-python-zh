- en: 16\. Using a Frontend JavaScript Library with Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Overview
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces the basics of JavaScript and ends with building an interactive
    web frontend for Bookr using the React JavaScript framework. You will learn how
    to include the React JavaScript framework in a Django template, and how to build
    React components. This chapter also includes an introduction to `fetch` JavaScript
    function which is used to retrieve information from a REST API. Toward the end
    of the chapter, you will be introduced to the Django `{% verbatim %}` template
    tag, which is used to include unparsed data in a Django template.
  prefs: []
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django is a great tool for building the backend of an application. You have
    seen how easy it is to set up the database, route URLs, and render templates.
    Without using JavaScript, though, when those pages are rendered to the browser,
    they are static and do not provide any form of interaction. By using JavaScript,
    your pages can be transformed into applications that are fully interactive in
    the browser.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter will be a brief introduction to JavaScript frameworks and how to
    use them with Django. While it won't be a deep dive into how to build an entire
    JavaScript application from scratch (that would be a book in itself), we will
    give enough of an introduction so that you can add interactive components to your
    own Django application. In this chapter, we will primarily be working with the
    React framework. Even if you do not have any JavaScript experience, we will introduce
    enough about it so that, by the end of this chapter, you will be comfortable writing
    your own React components. In *Chapter 12*, *Building a REST API*, you built a
    REST API for Bookr. We will interact with that API using JavaScript to retrieve
    data. We will enhance Bookr by showing some review previews on the main page that
    are dynamically loaded and can be paged through.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The code for the exercises and activities in this chapter can be found in this
    book's GitHub repository at [http://packt.live/3iasIMl](http://packt.live/3iasIMl).
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript Frameworks
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These days, real-time interactivity is a fundamental part of web applications.
    While simple interactions can be added without a framework (developing without
    a framework is often called *Vanilla JS*), as your web application grows, it can
    be much easier to manage with the use of a framework. Without a framework, you
    would need to do all these things yourself:'
  prefs: []
  type: TYPE_NORMAL
- en: Manually define the database schema.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Convert data from HTTP requests into native objects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write form validation.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Write SQL queries to save data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Construct HTML to show a response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Compare this to what Django provides. Its **ORM** (**Object Relational Mapping**),
    automatic form parsing and validation, and templating drastically cut down on
    the amount of code you need to write. JavaScript frameworks bring similar time-saving
    enhancements to JavaScript development. Without them, you would have to manually
    update the HTML elements in the browser as your data changes. Let''s take a simple
    example: showing the count of the number of times a button has been clicked. Without
    a framework, you would have to do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: Assign a handler to the button click event.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increment the variable that stored the count.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the element containing the click count display.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Replace the element's text with the new click count.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'When using a framework, the button count variable is bound to the display (HTML),
    so the process you have to code is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Handle the button click.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Increment the variable.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The framework takes care of automatically re-rendering the number display. This
    is just a simple example, though; as your application grows, the disparity in
    complexity between the two approaches expands. There are several JavaScript frameworks
    available, each with different features and some supported and used by large companies.
    Some of the most popular are React ([https://reactjs.org](https://reactjs.org)),
    Vue ([http://vuejs.org](http://vuejs.org)), Angular ([https://angularjs.org](https://angularjs.org)),
    Ember ([https://emberjs.com](https://emberjs.com)), and Backbone.js ([https://backbonejs.org](https://backbonejs.org)).
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will be using React, as it is easy to drop into an existing
    web application and allows *progressive enhancement*. This means that rather than
    having to build your application from scratch, targeting React, you can simply
    apply it to certain parts of the HTML that Django generates; for example, a single
    text field that automatically interprets Markdown and shows the result without
    reloading the page. We will also cover some of the features that Django offers
    that can help integrate several JavaScript frameworks.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are several different levels that JavaScript can be incorporated into
    a web application at. *Figure 16.1* shows our current stack, with no JavaScript
    (note that the following diagrams do not show requests to the server):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.1: Current stack'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_01.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.1: Current stack'
  prefs: []
  type: TYPE_NORMAL
- en: 'You can base your entire application on JavaScript using **Node.js** (a server-side
    JavaScript interpreter), which would take the place of Python and Django in the
    stack. *Figure 16.2* shows how this might look:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.2: Using Node.js to generate HTML'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_02.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.2: Using Node.js to generate HTML'
  prefs: []
  type: TYPE_NORMAL
- en: 'Or, you can have your frontend and templates entirely in JavaScript, and just
    use Django to act as a REST API to provide data to render. *Figure 16.3* shows
    this stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.3: Sending JSON from Django and rendering it in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_03.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.3: Sending JSON from Django and rendering it in the browser'
  prefs: []
  type: TYPE_NORMAL
- en: 'The final approach is progressive enhancement, which is (as mentioned) what
    we will be using. In this way, Django is still generating the HTML templates and
    React sits on top of this to add interactivity:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.4: HTML generated with Django with React providing progressive
    enhancement'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_04.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.4: HTML generated with Django with React providing progressive enhancement'
  prefs: []
  type: TYPE_NORMAL
- en: Note that it is common to use multiple techniques together. For example, Django
    may generate the initial HTML to which React is applied in the browser. The browser
    can then query Django for JSON data to be rendered, using React.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this section, we will briefly introduce some basic JavaScript concepts, such
    as variables and functions. Different operators will be covered as we introduce
    them.
  prefs: []
  type: TYPE_NORMAL
- en: '**Loading JavaScript**'
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript can either be inline in an HTML page or included from a separate
    JavaScript file. Both methods use the `<script>` tag. With inline JavaScript,
    the JavaScript code is written directly inside the `<script>` tags in an HTML
    file; for example, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `console.log` function prints out data to the browser console
    that is visible in the developer tools of your browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.5: The result of the console.log(a) call – 5 is printed to the
    browser console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_05.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.5: The result of the console.log(a) call – 5 is printed to the browser
    console'
  prefs: []
  type: TYPE_NORMAL
- en: 'We could also put the code into its own file (we would not include the `<script>`
    tags in the standalone file). We then load it into the page using the `<script>`
    tag''s `src` attribute, as we saw in *Chapter 5*, *Serving Static Files*:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The source code, whether inline or included, will be executed as soon as the
    browser loads the `<script>` tag.
  prefs: []
  type: TYPE_NORMAL
- en: '**Variables and Constants**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Unlike in Python, variables in JavaScript must be declared, using either the
    `var`, `let`, or `const` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Just like in Python, though, a type for a variable does not need to be declared.
    You will notice that the lines end with semicolons. JavaScript does not require
    lines to be terminated with semicolons – they are optional. However, some style
    guides enforce their use. You should try to stick with a single convention for
    any project.
  prefs: []
  type: TYPE_NORMAL
- en: 'You should use the `let` keyword to declare a variable. Variable declarations
    are scoped. For example, a variable declared with `let` inside a `for` loop will
    not be defined outside the loop. In this example, we''ll loop through and sum
    the multiples of 10 till 90, and then print the result to `console.log`. You''ll
    notice we can access variables declared at the function level inside the `for`
    loop, but not the other way around:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '`const` is for constant data and cannot be redefined. That does not mean that
    the object it points to cannot be changed, though. For example, you couldn''t
    do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: The `var` keyword is required by older browsers that don't support `let` or
    `const`. Only 1% of browsers these days don't support those keywords, so throughout
    the rest of the chapter, we will only use `let` or `const`. Like `let`, variables
    declared with `var` can be reassigned; however, they are scoped at the function
    level only.
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript supports several different types of variables, including strings,
    arrays, objects (which are like dictionaries), and numbers. We will cover arrays
    and objects in their own sections now.
  prefs: []
  type: TYPE_NORMAL
- en: '**Arrays**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Arrays are defined similarly to how they are in Python, with square brackets.
    They can contain different types of data, just like with Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Another thing to remember with the use of `const` is that it prevents reassigning
    the constant but does not prevent changing the variable or object being pointed
    to. For example, we would not be allowed to do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'However, you could update the contents of the `myThings` array by using the
    `push` method (like Python''s `list.append`) to append a new item:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: '**Objects**'
  prefs: []
  type: TYPE_NORMAL
- en: 'JavaScript objects are like Python dictionaries, providing a key-value store.
    The syntax to declare them is similar as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Note that, unlike Python, JavaScript object/dictionary keys do not need to be
    quoted when creating them – unless they contain special characters (spaces, dashes,
    dots, and more).
  prefs: []
  type: TYPE_NORMAL
- en: 'The values from `o` can be accessed either with item access or attribute access:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Also note that since `o` was declared as a constant, we cannot reassign it,
    but we can alter the object''s attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: '**Functions**'
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few different ways to define functions in JavaScript. We will look
    at three. You can define them using the `function` keyword:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'All arguments to a function are optional in JavaScript; that is, you could
    call the preceding function like this: `myFunc()`, and no error would be raised
    (at least during call time). The `a`, `b`, and `c` variables would all be the
    special type `undefined`. This would cause issues in the logic of the function.
    `undefined` is kind of like `None` in Python – although JavaScript also has `null`,
    which is more similar to `None`. Functions can also be defined by assigning them
    to a variable (or constant):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: 'We can also define functions using an arrow syntax. For example, we can also
    define `myFunc` like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'This is more common when defining functions as part of an object, for example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'In this case, it would be called like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: We will return to the reasons for using arrow functions after introducing classes.
  prefs: []
  type: TYPE_NORMAL
- en: '**Classes and Methods**'
  prefs: []
  type: TYPE_NORMAL
- en: 'Classes are defined with the `class` keyword. Inside a `class` definition,
    methods are defined without the `function` keyword. The JavaScript interpreter
    can recognize the syntax and tell that it is a method. Here is an example class,
    which takes a number to add (through `toAdd`) when instantiated. That number will
    be added to whatever is passed to the `add` method, and the result returned:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'Classes are instantiated with the `new` keyword. Other than that, their usage
    is very similar to classes in Python:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: '**Arrow Functions**'
  prefs: []
  type: TYPE_NORMAL
- en: Now that we've introduced the `this` keyword, we can return to the purpose of
    arrow functions. Not only are they shorter to write, but they also preserve the
    context of `this`. Unlike `self` in Python, which always refers to a specific
    object because it is passed into methods, the object that `this` refers to can
    change based on context. Usually, it is due to the nesting of functions, which
    is common in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s look at two examples. First, an object with a function called `outer`.
    This `outer` function contains an `inner` function. We refer to `this` in both
    the `inner` and `outer` functions:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The next code example refers to the `window` object. In JavaScript, `window`
    is a special global variable that exists in each browser tab and represents information
    about that tab. It is an instance of the `window` class. Some examples of the
    attributes `window` has are `document` (which stores the current HTML document),
    `location` (which is the current location shown in the tab's address bar), and
    `outerWidth` and `outerHeight` (which represent the width and height of the browser
    window respectively). For example, to print the current tab's location to the
    browser console, you would write `console.log(window.location)`.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: Inside the `outer` function, `this` refers to `o1` itself, whereas inside the
    `inner` function, `this` refers to the window (an object that contains information
    about the browser window).
  prefs: []
  type: TYPE_NORMAL
- en: 'Compare this to defining the inner function using arrow syntax:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: When we use arrow syntax, `this` is consistent and refers to `o2` in both cases.
    Now that we have had a very brief introduction to JavaScript, let's introduce
    React.
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  prefs: []
  type: TYPE_NORMAL
- en: 'Covering all the concepts of JavaScript is beyond the scope of this book. For
    a complete, hands-on course on JavaScript, you can always refer to *The JavaScript
    Workshop*: [https://courses.packtpub.com/courses/javascript](https://courses.packtpub.com/courses/javascript).'
  prefs: []
  type: TYPE_NORMAL
- en: React
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React allows you to build applications using components. Each component can
    *render* itself, by generating HTML to be inserted on the page.
  prefs: []
  type: TYPE_NORMAL
- en: A component may also keep track of its own *state*. If it does track its own
    state, when the state changes, the component will automatically re-render itself.
    This means if you have an action method that updates a state variable on a component,
    you don't need to then figure out whether the component needs to be redrawn; React
    will do this for you. A web app should track its own state so that it doesn't
    need to query the server to find out how it needs to update to display data.
  prefs: []
  type: TYPE_NORMAL
- en: Data is passed between components using properties, or *props* for short. The
    method of passing properties looks kind of like HTML attributes, but there are
    some differences, which we will cover later in the chapter. Properties are received
    by a component in a single `props` object.
  prefs: []
  type: TYPE_NORMAL
- en: To illustrate with an example, you might build a shopping list app with React.
    You would have a component for the list container (`ListContainer`), and a component
    for a list item (`ListItem`). `ListItem` would be instantiated multiple times,
    once for each item on the shopping list. The container would hold a state, containing
    a list of the items' names. Each item name would be passed to the `ListItem` instances
    as a *prop*. Each `ListItem` would then store the item's name and an `isBought`
    flag in its own state. As you click an item to mark it off the list, `isBought`
    would be set to `true`. Then React would automatically call `render` on that `ListItem`
    to update the display.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are a few different methods of using React with your application. If
    you want to build a deep and complex React application, you should use `npm` (`<script>`
    tag:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `crossorigin` attribute is for security and means cookies or other data
    cannot be sent to the remote server. This is necessary when using a public CDN
    such as [https://unpkg.com/](https://unpkg.com/), in case a malicious script has
    been hosted there by someone.
  prefs: []
  type: TYPE_NORMAL
- en: These should be placed on a page that you want to add React to, just before
    the closing `</body>` tag. The reason for putting the tags here instead of in
    the `<head>` of the page is that the script might want to refer to HTML elements
    on the page. If we put the script tag in the head, it will be executed before
    the page elements are available (as they come after).
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The links to the latest React versions can be found at [https://reactjs.org/docs/cdn-links.html](https://reactjs.org/docs/cdn-links.html).
  prefs: []
  type: TYPE_NORMAL
- en: Components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'There are two ways to build a component in React: with functions or with classes.
    Regardless of the approach, to get displayed on a page, the component must return
    some HTML elements to display. A functional component is a single function that
    returns elements, whereas a class-based component will return elements from its
    `render` method. Functional components cannot keep track of their own state.'
  prefs: []
  type: TYPE_NORMAL
- en: React is like Django in that it automatically escapes HTML in strings that are
    returned from `render`. To generate HTML elements, you must construct them using
    their tag, the attributes/properties they should have, and their content. This
    is done with the `React.createElement` function. A component will return a React
    element, which may contain sub-elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us look at two implementations of the same component, first as a function
    then as a class. The functional component takes `props` as an argument. This is
    an object containing the properties that are passed to it. The following function
    returns an `h1` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: Note that it is conventional for the function to have an uppercase first character.
  prefs: []
  type: TYPE_NORMAL
- en: 'While a functional component is a single function that generates HTML, a class-based
    component must implement a `render` method to do this. The code in the `render`
    method is the same as in the functional component, with one difference: the class-based
    component accepts the `props` object in its constructor, and then `render` (or
    other) methods can refer to `props` using `this.props`. Here is the same `HelloWorld`
    component, implemented as a class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: When using classes, all components extend from the `React.Component` class.
    Class-based components have an advantage over functional components, which is
    that they encapsulate the handling actions/event, and their own state. For simple
    components, using the functional style means less code. For more information on
    components and properties, see [https://reactjs.org/docs/components-and-props.html](https://reactjs.org/docs/components-and-props.html).
  prefs: []
  type: TYPE_NORMAL
- en: Whichever method you choose to define a component, it is used in the same way.
    In this chapter, we will only be using class-based components.
  prefs: []
  type: TYPE_NORMAL
- en: 'To put this component onto an HTML page, we first need to add a place for React
    to render it. Normally, this is done using `<div>` with an `id` attribute. For
    example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that `id` does not have to be `react_container`, it just needs to be unique
    for the page. Then, in the JavaScript code, after defining all your components,
    they are rendered on the page using the `ReactDOM.render` function. This takes
    two arguments: the root React element (not the component) and the HTML element
    in which it should be rendered.'
  prefs: []
  type: TYPE_NORMAL
- en: 'We would use it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: Note that the `HelloWorld` component (class/function) itself is not being passed
    to the `render` function, it is wrapped in a `React.createElement` call to instantiate
    it and transform it into an element.
  prefs: []
  type: TYPE_NORMAL
- en: As you might have guessed from its name, the `document.getElementById` function
    locates an HTML element in the document and returns a reference to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The final output in the browser when the component is rendered is like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s look at a more advanced example component. Note that since `React.createElement`
    is such a commonly used function, it''s common to alias to a shorter name, such
    as `e`: that''s what the first line of this example does.'
  prefs: []
  type: TYPE_NORMAL
- en: 'This component displays a button and has an internal state that keeps track
    of how many times the button was clicked. First, let''s look at the component
    class in its entirety:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'Some things to note about the `ClickCounter` class:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The `props` argument is an object (dictionary) of attribute values that have
    been passed to the component when it is used in HTML. For example:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `props` dictionary would contain the key `foo` with a value of bar, and
    the key `rex` with the value `baz`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`super(props)` calls the super class''s `constructor` method and passes the
    `props` variable. This is analogous to the `super()` method in Python.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each React class has a `state` variable, which is an object. `constructor` can
    initialize it. The state should be changed using the `setState` method, rather
    than being manipulated directly. When it is changed, the `render` method will
    be automatically called to redraw the component.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `render` method returns a new HTML element, using the `React.createElement`
    function (remember, the `e` variable was aliased to this function). In this case,
    the arguments to `React.createElement` will return a `<button>` element with a
    click handler, and with the text content `this.state.clickCount`. Essentially,
    it will return an element like this (when `clickCount` is `0`):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: 'The `onClick` function is set as an anonymous function with arrow syntax. This
    is similar to having a function as follows (although not quite the same since
    it''s in a different context):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Since the function is only one line, we can also remove one set of wrapping
    braces, and we end up with this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: 'We covered how to place `ClickCounter` onto a page earlier in this section,
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The screenshot in the following figure shows the counter in the button when
    the page loads:'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: In the following figure, `DjDt` refers to the debug toolbar that we learned
    about in the *Django Debug Toolbar* section in *Chapter 15*, *Django Third-Party
    Libraries*.
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.6: Button with 0 for the count'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_06.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.6: Button with 0 for the count'
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the button a few times, the button looks as shown in *Figure
    16.7*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.7: Button after clicking seven times'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_07.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.7: Button after clicking seven times'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, just to demonstrate how *not* to write the `render` function, we''ll look
    at what happens if we just return HTML as a string, like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'Now the rendered page looks as shown in *Figure 16.8*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.8: Returned HTML rendered as a string'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_08.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.8: Returned HTML rendered as a string'
  prefs: []
  type: TYPE_NORMAL
- en: This shows React's automatic escaping of HTML in action. Now that we have had
    a brief intro to JavaScript and React, let's add an example page to Bookr so you
    can see it in action.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 16.01: Setting Up a React Example'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we will create an example view and template to use with React.
    Then we will implement the `ClickCounter` component. At the end of the exercise,
    you will be able to interact with it with the `ClickCounter` button:'
  prefs: []
  type: TYPE_NORMAL
- en: In PyCharm, go to `New` -> `File` inside the project's `static` directory. Name
    the new file `react-example.js`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside it, put this code, which will define the React component, then render
    it into the `react_container` `<div>` that we will be creating:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now save `react-example.js`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Go to `New` -> `HTML File` inside the project''s `templates` directory:![Figure
    16.9: Create a new HTML file'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_16_09.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.9: Create a new HTML file'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Name the new file `react-example.html`:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 16.10: Name the file react-example.html'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_16_10.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.10: Name the file react-example.html'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: You can change the title inside the `<title>` element to *React Example*, but
    that is not necessary for this exercise.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`react-example.html` is created with some HTML boilerplate as we have seen
    before. Add the following `<script>` tags to include React just before the closing
    `</body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `react-example.js` file will be included using a `<script>` tag, and we
    need to generate the script path using the `static` template tag. First, `load`
    the static template library at the start of the file by adding this on the second
    line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The first few lines of your file will look like *Figure 16.11*:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Figure 16.11: The load static template tag included'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '](img/B15509_16_11.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We now need to add the containing `<div>` that React will render into. Add
    this element after the opening `<body>` tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can save `react-example.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now we''ll add a view to render the template. Open the `reviews` app''s `views.py`
    and add a `react_example` view at the end of the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In this simple view, we are just rendering the `react-example.html` template
    with no context data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, we need to map a URL to the new view. Open the `bookr` package''s
    `urls.py` file. Add this map to the `urlpatterns` variable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can save and close `urls.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it''s not already running, then go to `http://127.0.0.1:8000/react-example/`.
    You should see the `ClickCount` button rendered as in *Figure 16.12*:![Figure
    16.12: ClickCount button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_16_12.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.12: ClickCount button'
  prefs: []
  type: TYPE_NORMAL
- en: Try clicking the button a few times and watch the counter increment.
  prefs: []
  type: TYPE_NORMAL
- en: In this example, we created our first React component, then added a template
    and view to render it. We included the React framework source from a CDN. In the
    next section, we will introduce **JSX**, which is a method of combining templates
    and code into a single file that can simplify our code.
  prefs: []
  type: TYPE_NORMAL
- en: JSX
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: It can be quite verbose to define each element using the `React.createElement`
    function – even when we alias to a shorter variable name. The verbosity is exacerbated
    when we start building larger components.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using React, we can use JSX instead to build the HTML elements. JSX stands
    for JavaScript XML – since both JavaScript and XML are written in the same file.
    For example, consider the following code in which we are creating a button using
    the `render` method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead of this, we can return its HTML directly, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the HTML is not quoted and returned as a string. That is, we are
    not doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: 'Since JSX is an unusual syntax (a combination of HTML and JavaScript in a single
    file), we need to include another JavaScript library before it can be used: Babel
    ([https://babeljs.io](https://babeljs.io)). This is a library that can *transpile*
    code between different versions of JavaScript. You can write code using the latest
    syntax and have it *transpiled* (a combination of translate and compile) into
    a version of code that older browsers can understand.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Babel can be included with a `<script>` tag like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: This should be included on the page after your other React-related script tags,
    but before you include any files containing JSX.
  prefs: []
  type: TYPE_NORMAL
- en: 'Any JavaScript source code that includes JSX must have the `type="text/babel"`
    attribute added:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: This is so Babel knows to parse the file rather than just treating it as plain
    JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Note that using Babel in this way can be slow for large projects. It is designed
    to be used as part of the build process in an `npm` project and to have your JSX
    files transpiled ahead of time (rather than in real time as we are doing here).
    `npm` project setup is beyond the scope of this book. For our purposes and with
    the small amount of JSX we are using, using Babel will be fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'JSX uses braces to include JavaScript data inside HTML, similar to Django''s
    double braces in templates. JavaScript inside braces will be executed. We''ll
    now look at how to convert our button creation example to JSX. Our `render` method
    can be changed to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'Note that the `onClick` attribute has no quotes around its value; instead,
    it is wrapped in braces. This is passing the JavaScript function that is defined
    inline to the component. It will be available in that component''s `props` dictionary
    that is passed to the `constructor` method. For example, imagine that we had passed
    it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: In such a case, it would be passed to the component as a string value and thus
    would not work.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are also rendering the current value of `clickCount` as the content of the
    `button`. JavaScript could be executed inside these braces too. To show the click
    count plus one, we could do this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: In the next exercise, we will include Babel in our template and then convert
    our component to use JSX.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 16.02: JSX and Babel'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, we want to implement JSX in our component to simplify our
    code. To do this, we need to make a couple of changes to the `react-example.js`
    file and `react-example.html` file to switch to JSX to render `ClickCounter`:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyCharm, open `react-example.js` and change the `render` method to use JSX
    instead, by replacing it with the following code. You can refer to *step 2* from
    *Exercise 16.01*, *Setting Up a React Example*, where we defined this method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We can now treat `ClickCounter` as an element itself. In the `ReactDOM.render`
    call at the end of the file, you can replace the first argument, `e(ClickCounter)`,
    with a `<ClickCounter/>` element, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Since we''re no longer using the `React.create` function that we created in
    *step 2* of *Exercise 16.01*, *Setting Up a React Example*, we can remove the
    alias we created; delete the first line:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can save and close the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `react-example.html` template. You need to include the Babel library
    JavaScript. Add this code between the React `script` elements and the `react-example.js`
    element:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `type="text/babel"` attribute to the `react-example.html` `<script>`
    tag:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Save `react-example.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Start the Django dev server if it is not already running and go to `http://127.0.0.1:8000/react-example/`.
    You should see the same button as we had before (*Figure 16.12*). When clicking
    the button, you should see the count increment as well.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: In this exercise, we did not change the behavior of the `ClickCounter` React
    component. Instead, we refactored it to use JSX. This makes it easier to write
    the component's output directly as HTML and cut down on the amount of code we
    need to write. In the next section, we will look at passing properties to a JSX
    React component.
  prefs: []
  type: TYPE_NORMAL
- en: JSX Properties
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Properties on JSX-based React components are set in the same way as attributes
    on a standard HTML element. The important thing to remember is whether you are
    setting them as a string or a JavaScript value.
  prefs: []
  type: TYPE_NORMAL
- en: Let's look at some examples using the `ClickCounter` component. Say that we
    want to extend `ClickCounter` so that a `target` number can be specified. When
    the target is reached, the button should be replaced with the text `Well done,
    <name>!`. These values should be passed into `ClickCounter` as properties.
  prefs: []
  type: TYPE_NORMAL
- en: 'When using variables, we have to pass them as JSX values:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: 'We can mix and match the method of passing the values too. This is also valid:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: In the next exercise, we will update `ClickCounter` to read these values from
    properties and change its behavior when the target is reached. We will pass these
    values in from the Django template.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 16.03: React Component Properties'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will modify `ClickCounter` to read the values of `target`
    and `name` from its `props`. You will pass these in from the Django view and use
    the `escapejs` filter to make the `name` value safe for use in a JavaScript string.
    When you are finished, you will be able to click on the button until it reaches
    a target, and then see a `Well done` message:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In PyCharm, open the `reviews` app''s `views.py`. We will modify the `react_example`
    view''s `render` call to pass through a context containing `name` and `target`,
    like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can use your own name and pick a different target value if you like. Save
    `views.py`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open the `react-example.js` file. We will update the `state` setting in the
    `constructor` method to set the name and target from `props`, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the behavior of the `render` method to return `Well done, <name>!` once
    `target` has been reached. Add this `if` statement inside the `render` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To pass the values in, move the `ReactDOM.render` call into the template so
    that Django can render that piece of code. Cut this `ReactDOM.render` line from
    the end of `react-example.js`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: We will paste it into the template file in *step 6*. `react-example.js` should
    now only contain the `ClickCounter` class. Save and close the file.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `react-example.html`. After all the existing `<script>` tags (but before
    the closing `</body>` tag), add opening and closing `<script>` tags with the `type="text/babel"`
    attribute. Inside them, we need to assign the Django context values that were
    passed to the template to JavaScript variables. Altogether, you should be adding
    this code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The first assigns the `name` variable with the `name` context variable. We use
    the `escapejs` template filter; otherwise, we could generate invalid JavaScript
    code if our name had a double quote in it. The second value, `target`, is assigned
    from `target`. This is a number, so it does not need to be escaped.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Due to the way Django escapes the values for JavaScript, `name` cannot be passed
    directly to the component property like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<ClickCounter name="{{ name|escapejs }}"/>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The JSX will not un-escape the values correctly and you will end up with escape
    sequences.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'However, you could pass the numerical value target in like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`<ClickCounter target="{ {{ target }} }"/>`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Also, be aware of the spacing between the Django braces and JSX braces. In this
    book, we will stick with assigning all properties to variables first, then passing
    them to the component, for consistency.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Underneath these variable declarations, paste in the `ReactDOM.render` call that
    you copied from `react-example.js`. Then, add the `target={ target }` and `name={
    name }` properties to `ClickCounter`. Remember, these are the JavaScript variables
    being passed in, not the Django context variables – they just happen to have the
    same name. The `<script>` block should now look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can save `react-example.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it is not already running, then go to `http://127.0.0.1:8000/react-example/`.
    Try clicking the button a few times – it should increment until you click it `target`
    number of times. Then, it will be replaced with the `Well done, <name>!` text.
    See *Figure 16.13* for how it should look after you''ve clicked it enough times:![Figure
    16.13: Well done message'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_16_13.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.13: Well done message'
  prefs: []
  type: TYPE_NORMAL
- en: In this exercise, we passed data to a React component using `props`. We escaped
    the data when assigning it to a JavaScript variable using the `escapejs` template
    filter. In the next section, we will cover how to fetch data over HTTP using JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Further Reading
  prefs: []
  type: TYPE_NORMAL
- en: 'For a more detailed, hands-on course on React, you can always refer to *The
    React Workshop*: [https://courses.packtpub.com/courses/react](https://courses.packtpub.com/courses/react).'
  prefs: []
  type: TYPE_NORMAL
- en: JavaScript Promises
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prevent blocking on long-running operations, many JavaScript functions are
    implemented asynchronously. The way they work is by returning immediately, but
    then invoking a callback function when a result is available. The object these
    types of functions return is a `Promise`. Callback functions are provided to the
    `Promise` object by calling its `then` method. When the function finishes running,
    it will either `resolve` the `Promise` (call the `success` function) or `reject`
    it (call the `failure` function).
  prefs: []
  type: TYPE_NORMAL
- en: 'We will illustrate the wrong and right way of using promises. Consider a hypothetical
    long-running function that performs a big calculation, called `getResult`. Instead
    of returning the result, it returns a `Promise`. You would not use it like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: 'Instead, it should be invoked like this, with a callback function passed to
    `then` on the returned `Promise`. We will assume that `getResult` can never fail,
    so we only provide it with a `success` function for the resolve case:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'Normally, you wouldn''t assign the returned `Promise` to a variable. Instead,
    you''d chain the `then` call to the function call. We''ll show this in the next
    example, along with a failure callback (assume `getResult` can now fail). We''ll
    also add some comments illustrating the order in which the code executes:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: Now that we've introduced promises, we can look at the `fetch` function, which
    makes HTTP requests. It is asynchronous and works by returning promises.
  prefs: []
  type: TYPE_NORMAL
- en: fetch
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Most browsers (95%) support a function called `fetch`, which allows you to make
    HTTP requests. It uses an asynchronous callback interface with promises.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `fetch` function takes two arguments. The first is the URL to make the
    request to and the second is an object (dictionary) with settings for the request.
    For example, consider this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The settings are things such as the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`method`: The request HTTP method (`GET`, `POST`, and more).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`headers`: Another object (dictionary) of HTTP headers to send.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body`: The HTTP body to send (for `POST`/`PUT` requests).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`credentials`: By default, `fetch` does not send any cookies. This means your
    requests will act like you are not authenticated. To have it set cookies in its
    requests, this should be set to the value `same-origin` or `include`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Let''s look at it in action with a simple request:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: This code will fetch from `/api/book-list/` and then call a function that logs
    the request to the browser's console using `console.log`.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 16.14* shows the console output in Firefox for the preceding response:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.14: Response output in the console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_14.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.14: Response output in the console'
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see, there isn''t much information that is output. We need to decode
    the response before we can work with it. We can use the `json` method on the response
    object to decode the response body to a JSON object. This also returns a `Promise`,
    so we will ask to get the JSON, then work with the data in our callback. The full
    code block to do that looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE66]'
  prefs: []
  type: TYPE_PRE
- en: 'This will log the decoded object that was in JSON format to the browser console.
    In Firefox, the output looks like *Figure 16.15*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.15: Decoded book list output to console'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_15.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.15: Decoded book list output to console'
  prefs: []
  type: TYPE_NORMAL
- en: In *Exercise 16.04*, *Fetching and Rendering Books*, we will write a new React
    component that will fetch a list of books and then render each one as a list item
    (`<li>`). Before that, we need to learn about the JavaScript `map` method and
    how to use it to build HTML in React.
  prefs: []
  type: TYPE_NORMAL
- en: The JavaScript map Method
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Sometimes we want to execute the same piece of code (JavaScript or JSX) multiple
    times for different input data. In this chapter, it will be most useful to generate
    JSX elements with the same HTML tags but different content. In JavaScript, the
    `map` method iterates over the target array and then executes a callback function
    for each element in the array. Each of these elements is then added to a new array,
    which is then returned. For example, this short snippet uses `map` to double each
    number in the `numbers` array:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE67]'
  prefs: []
  type: TYPE_PRE
- en: The `doubled` array now contains the values `[2, 4, 6]`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can also create a list of JSX values using this method. The only thing to
    note is that each item in the list must have a unique `key` property set. In this
    next short example, we are transforming an array of numbers into `<li>` elements.
    We can then use them inside `<ul>`. Here is an example `render` function to do
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE68]'
  prefs: []
  type: TYPE_PRE
- en: 'When rendered, this will generate the following HTML:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE69]'
  prefs: []
  type: TYPE_PRE
- en: In the next exercise, we will build a React component with a button that will
    fetch the list of books from the API when it is clicked. The list of books will
    then be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: 'Exercise 16.04: Fetching and Rendering Books'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In this exercise, you will create a new component named `BookDisplay` that
    renders an array of books inside `<ul>`. The books will be retrieved using `fetch`.
    To do this, we add the React component into the `react-example.js` file. Then
    we pass the URL of the book list to the component inside the Django template:'
  prefs: []
  type: TYPE_NORMAL
- en: In PyCharm, open `react-example.js`, which you previously used in *step 9* of
    *Exercise 16.03*, *React Component Properties*. You can delete the entire `ClickCounter`
    class.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a new class called `BookDisplay` that `extends` from `React.Component`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Then, add a `constructor` method that takes `props` as an argument. It should
    call `super(props)` and then set its state like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE70]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This will initialize `books` as an empty array, read the API URL from the passed-in
    property `url`, and set a `fetchInProgress` flag to `false`. The code of your
    `constructor` method should be like this:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE71]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Next, add a `doFetch` method. You can copy and paste this code to create it:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE72]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: First, with the `if` statement, we check if a fetch has already been started.
    If so, we `return` from the function. Then, we use `setState` to update the state,
    setting `fetchInProgress` to `true`. This will both update our button display
    text and stop multiple requests from being run at once. We then `fetch` the `this.state.url`
    (which we will pass in through the template later in the exercise). The response
    is retrieved with the `GET` method and we only want to `Accept` a JSON response.
    After we get a response, we then return its JSON using the `json` method. This
    returns a `Promise`, so we use another `then` to handle the callback when the
    JSON is parsed. In that final callback, we set the state of the component, with
    `fetchInProgress` going back to `false`, and the `books` array being set to the
    decoded JSON data.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Next, create the `render` method. You can copy and paste this code too:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE73]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This uses the `map` method to iterate over the array of books in `state`. We
    generate `<li>` for each book, using the book's `pk` as the `key` instance for
    the list item. The content of `<li>` is the book's title. We define a `buttonText`
    variable to store (and update) the text that the button will display. If we currently
    have a `fetch` operation running, then this will be *Fetch in Progress*. Otherwise,
    it will be *Fetch*. Finally, we return a `<div>` that contains all the data we
    want. The content of `<ul>` is the `bookListItems` variable (the array of `<li>`
    instances). It also contains a `<button>` instance added in a similar way to in
    the previous exercises. The `onClick` method calls the `doFetch` method of the
    class. We can make the button `disabled` (that is, the user can't click the button)
    if there is a fetch in progress. We set the button text to the `buttonText` variable
    we created earlier. You can now save and close `react-example.js`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Open `react-example.html`. We need to replace the `ClickCounter` render (from
    *Exercise 16.03*, *React Component Properties*) with a `BookDisplay` render. Delete
    the `name` and `target` variable definitions. We will instead render the `<BookDisplay>`.
    Set the `url` property as a string and pass in the URL to the book list API, using
    the `{% url %}` template tag to generate it. The `ReactDOM.render` call should
    then look like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE74]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: You can now save and close `react-example.html`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Start the Django dev server if it''s not already running, then visit `http://127.0.0.1:8000/react-example/`.
    You should see a single `Fetch` button on the page (*Figure 16.16*):![Figure 16.16:
    Book Fetch button'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '](img/B15509_16_16.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Figure 16.16: Book Fetch button'
  prefs: []
  type: TYPE_NORMAL
- en: 'After clicking the `Fetch` button, it should become disabled and have its text
    changed to `Fetch in Progress`, as we can see here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.17: Fetch in Progress'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_17.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.17: Fetch in Progress'
  prefs: []
  type: TYPE_NORMAL
- en: 'Once the fetch is complete, you should see the list of books rendered as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.18: Book fetch complete'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_18.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.18: Book fetch complete'
  prefs: []
  type: TYPE_NORMAL
- en: This exercise was a chance to integrate React with the Django REST API you built
    in *Chapter 12*, *Building a REST API*. We built a new component (`BookDisplay`)
    with a call to `fetch` to get a list of books. We used the JavaScript `map` method
    to transform the book array to some `<li>` elements. As we had seen before, we
    used `button` to trigger `fetch` when it was clicked. We then provided the book
    list API URL to the React component in the Django template. Later, we saw a list
    of books in Bookr that were loaded dynamically using the REST API.
  prefs: []
  type: TYPE_NORMAL
- en: Before we move onto the activity for this chapter, we will talk about some considerations
    for other JavaScript frameworks when working with Django.
  prefs: []
  type: TYPE_NORMAL
- en: The verbatim Template Tag
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We have seen that when using React, we can use JSX interpolation values in Django
    templates. This is because JSX uses single braces to interpolate values, and Django
    uses double braces. As long as there are spaces between the JSX and Django braces,
    it should work fine.
  prefs: []
  type: TYPE_NORMAL
- en: 'Other frameworks, such as Vue, also use double braces for variable interpolation.
    What that means is if you had a Vue component''s HTML in your template, you might
    try to interpolate a value like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE75]'
  prefs: []
  type: TYPE_PRE
- en: Of course, when Django renders the template, it will interpolate the `name`
    value before the Vue framework gets a chance to render.
  prefs: []
  type: TYPE_NORMAL
- en: 'We can use the `verbatim` template tag to have Django output the data exactly
    as it appears in the template, without performing any rendering or variable interpolation.
    Using it with the previous example is simple:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE76]'
  prefs: []
  type: TYPE_PRE
- en: Now when Django renders the template, the HTML between the template tags will
    be output exactly as it is written, allowing Vue (or another framework) to take
    over and interpolate the variables itself. Many other frameworks separate their
    templates into their own files, which should not conflict with Django's templates.
  prefs: []
  type: TYPE_NORMAL
- en: There are many JavaScript frameworks available, and which one you ultimately
    decide to use will depend on your own opinion or what your company/team uses.
    If you do run into conflicts, the solution will depend on your particular framework.
    The examples in this section should help lead you in the right direction.
  prefs: []
  type: TYPE_NORMAL
- en: We have now covered most things you will need to integrate React (or other JavaScript
    frameworks) with Django. In the next activity, you will implement these learnings
    to fetch the most recent reviews on Bookr.
  prefs: []
  type: TYPE_NORMAL
- en: 'Activity 16.01: Reviews Preview'
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this activity, we will update the Bookr main page to fetch the six most recent
    reviews and display them. The user will be able to click buttons to go forward
    to the next six reviews, and then back to the previous ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'These steps will help you complete the activity:'
  prefs: []
  type: TYPE_NORMAL
- en: First, we can clean up some code from previous exercises. You can take backups
    of these files to preserve them for later reference if you like. Alternatively,
    you can use the GitHub versions too, for future reference. Delete the `react_example`
    view, `react-example` URL, `react-example.html` template, and `react-example.js`
    file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `recent-reviews.js` static file.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two components, a `ReviewDisplay` component that displays the data for
    a single review, and a `RecentReviews` component that handles fetching the review
    data and displaying a list of `ReviewDisplay` components.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: First, create the `ReviewDisplay` class. In its constructor, you should read
    the `review` being passed in through the `props` and assign it to the state.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'The `render` method of `ReviewDisplay` should return JSX HTML like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE77]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: However, you should replace the `BOOK_TITLE`, `REVIEW_RATING`, `CREATOR_EMAIL`,
    `REVIEW_CONTENT`, and `BOOK_ID` placeholders with their proper values from the
    `review` that the component has fetched.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Note that when working with JSX and React, the `class` of an element is set
    with the `className` attribute, not `class`. When it's rendered as HTML, it becomes
    `class`.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Create another React component called `RecentReviews`. Its `constructor` method
    should set up the `state` with the following keys/values:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`reviews`: `[]` (empty list)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`currentUrl`: `props.url`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nextUrl`: `null`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`previousUrl`: `null`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`loading`: `false`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Implement a method to download the reviews from the REST API. Call it `fetchReviews`.
    It should return immediately if `state.loading` is `true`. Then, it should set
    the `loading` property of `state` to `true`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Implement `fetch` in the same way as you did in *Exercise 16.04*, *Fetching
    and Rendering Books*. It should follow the same pattern of requesting `state.currentUrl`
    and then getting the JSON data from the response. Then, set the following values
    in `state`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`loading`: `false`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`reviews`: `data.results`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`nextUrl`: `data.next`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`previousUrl`: `data.previous`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Implement a `componentDidMount` method. This is a method that is called when
    React has loaded the component onto the page. It should call the `fetchReviews`
    method.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a `loadNext` method. If the `nextUrl` in `state` is null, it should return
    immediately. Otherwise, it should set `state.currentUrl` to `state.nextUrl`, then
    call `fetchReviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Similarly, create a `loadPrevious` method; however, this should set `state.currentUrl`
    to `state.previousUrl`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Implement the render method. If the state is loading, then it should return
    the text `Loading…` inside an `<h5>` element.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create two variables to store the `previousButton` and `nextButton` HTML. They
    both should have the `btn btn-secondary` class and the next button should also
    have the `float-right` class. They should have `onClick` attributes set to call
    the `loadPrevious` or `loadNext` methods. They should have their `disabled` attributes
    set to `true` if the respective `previousUrl` or `nextUrl` attributes are `null`.
    The button text should be *Previous* or *Next*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Iterate over the reviews using the `map` method and store the result to a variable.
    Each `review` should be represented by a `ReviewDisplay` component with the attribute
    `key` set to the review's `pk` and `review` set to the `Review` class. If there
    are no reviews (`reviews.length === 0`), then the variable instead should be an
    `<h5>` element with the content *No reviews to display*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Finally, return all the content wrapped in `<div>` elements, like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE78]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The `className` we are using here will display each review preview in one, two,
    or three columns depending on the screen size.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Next, edit `base.html`. You will add all the new content inside the `content`
    block so that it will not be displayed on the non-main pages that override this
    block. Add an `<h4>` element with the content `Recent Reviews`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Add a `<div>` element for React to render into. Make sure you give it a unique `id`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Include the `<script>` tags to include React, React DOM, Babel, and the `recent-reviews.js`
    file. These four tags should be similar to what you had in *Exercise 16.04*, *Fetching
    and Rendering Books*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last thing to add is another `<script>` tag containing the `ReactDOM.render`
    call code. The root component being rendered is `RecentReviews`. It should have
    a `url` attribute set to the value `url="{% url 'api:review-list' %}?limit=6"`.
    This does a URL lookup for `ReviewViewSet` and then appends a page size argument
    of `6`, limiting the number of reviews that are retrieved to a maximum of `6`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Once you have completed these steps, you should be able to navigate to `http://127.0.0.1:8000/`
    (the main Bookr page) and see a page like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.19: Completed reviews preview'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_19.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.19: Completed reviews preview'
  prefs: []
  type: TYPE_NORMAL
- en: In the screenshot, the page has been scrolled to show the `Previous`/`Next`
    buttons. Notice the `Previous` button is disabled because we are on the first
    page.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you click `Next`, you should see the next page of reviews. If you click
    `Next` enough times (depending on how many reviews you have), you will eventually
    reach the last page and then the `Next` button will be disabled:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.20: Next button disabled'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_20.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.20: Next button disabled'
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have no reviews, then you should see the message `No reviews to display`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.21: No reviews to display. text'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_21.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.21: No reviews to display. text'
  prefs: []
  type: TYPE_NORMAL
- en: 'While the page is loading the reviews, you should see the text `Loading…`;
    however, it will probably only display for a split second since the data is being
    loaded off your own computer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 16.22: Loading text'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/B15509_16_22.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Figure 16.22: Loading text'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The solution to this activity can be found at [http://packt.live/2Nh1NTJ](http://packt.live/2Nh1NTJ).
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we introduced JavaScript frameworks and described how they
    work with Django to enhance templates and add interactivity. We introduced the
    JavaScript language and covered some of its main features, variable types, and
    classes. We then introduced the concepts behind React and how it builds HTML by
    using components. We built a React component using just JavaScript and the `React.createElement`
    function. After that, we introduced JSX and saw how it made the development of
    components easier, by letting you directly write HTML in your React components.
    The concepts of `promises` and the `fetch` function were introduced, and we saw
    how to get data from a REST API using `fetch`. The chapter finished with an exercise
    that retrieved reviews from Bookr using the REST API and rendered them to the
    page in an interactive component.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will look at how to deploy our Django project to a production
    web server. You can download the chapter from the GitHub repository for this book
    at [http://packt.live/2Kx6FmR](http://packt.live/2Kx6FmR).
  prefs: []
  type: TYPE_NORMAL
