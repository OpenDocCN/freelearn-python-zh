- en: Chapter 6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Handling Input and Output
  prefs: []
  type: TYPE_NORMAL
- en: 6.1 How to Output Messages and Results to a User's Screen?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: A flowchart uses the oblique parallelogram and the reserved word “Write” to
    display a message or the final results to the user's screen.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-01.png)
  prefs: []
  type: TYPE_NORMAL
- en: where arg1, arg2, and arg3 can be variables, expressions, constant values, or
    alphanumeric values enclosed in double quotes.
  prefs: []
  type: TYPE_NORMAL
- en: The oblique parallelogram that you have just seen is equivalent to the following
    flowchart fragment.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-02.png)
  prefs: []
  type: TYPE_NORMAL
- en: In Python, you can achieve the same result by using the print statement. Its
    general form is
  prefs: []
  type: TYPE_NORMAL
- en: print(arg1, arg2, arg3, …  [, sep = " "] [, end = "\n"])
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►arg1, arg2, arg3, … are the arguments (values) to be printed. They can be variables,
    expressions, constant values, or strings enclosed in single or double quotes.
  prefs: []
  type: TYPE_NORMAL
- en: ►sep is the string inserted between arguments. It is optional and its default
    value is one space character.
  prefs: []
  type: TYPE_NORMAL
- en: ►end is the string appended after the last argument. It is optional and its
    default value is one “line break”.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code fragment:'
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: b = 6
  prefs: []
  type: TYPE_NORMAL
- en: c = a + b
  prefs: []
  type: TYPE_NORMAL
- en: print("The sum of 5 and 6 is", c)
  prefs: []
  type: TYPE_NORMAL
- en: display the message shown in Figure 6–1\.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-03.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6–1 A string and an integer displayed on the screen
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/remember.jpg)In Python, if you want to display a string on the screen,
    the string must be enclosed in single or double quotes.'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Note the space inserted automatically on the screen between
    the first string and the value of variable c (just after the word “is”).'
  prefs: []
  type: TYPE_NORMAL
- en: The result of a mathematical expression can also be calculated directly in a
    print statement. The following code fragment displays exactly the same message
    as in Figure 6–1.
  prefs: []
  type: TYPE_NORMAL
- en: a = 5
  prefs: []
  type: TYPE_NORMAL
- en: b = 6
  prefs: []
  type: TYPE_NORMAL
- en: print("The sum of 5 and 6 is", a + b)
  prefs: []
  type: TYPE_NORMAL
- en: 6.2 How to Alter the Default Behavior of a print Statement?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As already stated, Python automatically outputs a space between arguments. The
    following example
  prefs: []
  type: TYPE_NORMAL
- en: print("Morning", "Evening", "Night")
  prefs: []
  type: TYPE_NORMAL
- en: displays
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-04.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6–2 The output result displays a space between arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'Also keep in mind that the following three statements produce the same output
    result no matter how many space characters exist after the comma ( , ) delimiter:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Morning","Evening","Night")
  prefs: []
  type: TYPE_NORMAL
- en: print("Morning", "Evening", "Night")
  prefs: []
  type: TYPE_NORMAL
- en: print("Morning",   "Evening",   "Night")
  prefs: []
  type: TYPE_NORMAL
- en: as shown in Figure 6–3.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-05.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6–3 The output result always displays one space between arguments
  prefs: []
  type: TYPE_NORMAL
- en: 'If you wish to customize the separator character, you need to use a value for
    argument sep as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: print("Morning", "Evening", "Night", sep = "#")
  prefs: []
  type: TYPE_NORMAL
- en: and the output result now becomes as shown in Figure 6–4.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-06.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6–4 The output result with a customized separator
  prefs: []
  type: TYPE_NORMAL
- en: Now, look carefully at the following example.
  prefs: []
  type: TYPE_NORMAL
- en: a = "Ares"
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello", a)
  prefs: []
  type: TYPE_NORMAL
- en: print("Halo", a)
  prefs: []
  type: TYPE_NORMAL
- en: print("Salut", a)
  prefs: []
  type: TYPE_NORMAL
- en: The print statement in Python automatically appends a “line break” after the
    last argument (variable a); thus, these three messages are displayed one under
    the other as shown in Figure 6–5.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-07.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6–5 The output result displays on three lines
  prefs: []
  type: TYPE_NORMAL
- en: 'You can customize the value of the end argument as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: a = "Ares"
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello", a, end = " - ")
  prefs: []
  type: TYPE_NORMAL
- en: print("Halo", a, end = " - ")
  prefs: []
  type: TYPE_NORMAL
- en: print("Salut", a)
  prefs: []
  type: TYPE_NORMAL
- en: The output result now becomes as shown in Figure 6–6.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter06-08.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6–6 The output result displays on one line
  prefs: []
  type: TYPE_NORMAL
- en: 'An interesting sequence of characters is the \n which can be used to create
    a custom “line break”. You can output a “line break” as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: a = "Ares"
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello", a, "\nHalo", a, "\nSalut", a)
  prefs: []
  type: TYPE_NORMAL
- en: and the output result is shown in Figure 6–7.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter06-09.png)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6–7 The output result displays on three lines
  prefs: []
  type: TYPE_NORMAL
- en: Another useful sequence of characters is the \t which can be used to create
    a “tab stop”. The tab character ( \t ) is useful for aligning output.
  prefs: []
  type: TYPE_NORMAL
- en: print("John\tGeorge")
  prefs: []
  type: TYPE_NORMAL
- en: print("Sofia\tMary")
  prefs: []
  type: TYPE_NORMAL
- en: The output result appears in Figure 6–8\.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-10.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6–8 The output result displays tab characters
  prefs: []
  type: TYPE_NORMAL
- en: Of course, the same result can be accomplished with one single statement.
  prefs: []
  type: TYPE_NORMAL
- en: print("John\tGeorge\nSofia\tMary")
  prefs: []
  type: TYPE_NORMAL
- en: 6.3 How to Prompt the User to Enter Data?
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Do you recall the three main stages involved in creating an algorithm or a computer
    program? The first stage was the “data input” stage, in which the computer lets
    the user enter data such as numbers, their name, their address, or their year
    of birth.
  prefs: []
  type: TYPE_NORMAL
- en: A flowchart uses the oblique parallelogram and the reserved word “Read” to let
    a user enter their data.
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter06-11.png)'
  prefs: []
  type: TYPE_IMG
- en: where var_name1, var_name2, and var_name3 must be variables only.
  prefs: []
  type: TYPE_NORMAL
- en: The oblique parallelogram that you have just seen is equivalent to the following
    flowchart fragment.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-12.png)
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)When a Read statement is executed, the flow of execution
    is interrupted until the user has entered all the data. When data entry is complete,
    the flow of execution continues to the next statement. Usually data are entered
    from a keyboard.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In Python, data input is accomplished using one of the following statements:'
  prefs: []
  type: TYPE_NORMAL
- en: '#Read a string from the keyboard'
  prefs: []
  type: TYPE_NORMAL
- en: var_name_str = input([prompt])
  prefs: []
  type: TYPE_NORMAL
- en: '#Read an integer from the keyboard'
  prefs: []
  type: TYPE_NORMAL
- en: var_name_int = int(input([prompt]))
  prefs: []
  type: TYPE_NORMAL
- en: '#Read a real from the keyboard'
  prefs: []
  type: TYPE_NORMAL
- en: var_name_float = float(input([prompt]))
  prefs: []
  type: TYPE_NORMAL
- en: where
  prefs: []
  type: TYPE_NORMAL
- en: ►prompt is the prompt message to be displayed. It can be either a variable or
    a string enclosed in single or double quotes. The argument prompt is optional.
  prefs: []
  type: TYPE_NORMAL
- en: ►var_name_str can be any variable of type string.
  prefs: []
  type: TYPE_NORMAL
- en: ►var_name_int can be any variable of type integer.
  prefs: []
  type: TYPE_NORMAL
- en: ►var_name_float can be any variable of type float (real).
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/notice.jpg)Functions int() and float() are discussed later in this
    book.'
  prefs: []
  type: TYPE_NORMAL
- en: Let's study the input() statement using the following example.
  prefs: []
  type: TYPE_NORMAL
- en: name = input("What is your name? ")
  prefs: []
  type: TYPE_NORMAL
- en: print("Hello", name)
  prefs: []
  type: TYPE_NORMAL
- en: When the input() statement of this example executes, the message “What is your
    name?” (without the double quotes) is displayed and the flow of execution stops,
    waiting for the user to enter their name. The print() statement is not yet executed!
    As long as the user doesn't enter anything, the computer just waits, as shown
    in Figure 6–9.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-13.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6–9 When an input() statement executes, the computer waits for data input.
  prefs: []
  type: TYPE_NORMAL
- en: When the user finally enters their name and hits the “Enter  ![Image](img/key_enter.png)”
    key, the flow of execution then continues to the next print() statement as shown
    in Figure 6–10.
  prefs: []
  type: TYPE_NORMAL
- en: .![Image](img/chapter06-14.png)
  prefs: []
  type: TYPE_NORMAL
- en: Figure 6–10 The flow of execution continues when the user hits the “Enter ![Image](img/key_enter.png)”
    key.
  prefs: []
  type: TYPE_NORMAL
- en: The following code fragment prompts the user to enter a string and a float,
    that is, a number that contains a fractional part.
  prefs: []
  type: TYPE_NORMAL
- en: 'productName = input("Enter product name: ")'
  prefs: []
  type: TYPE_NORMAL
- en: 'productPrice = float(input("Enter product price: "))'
  prefs: []
  type: TYPE_NORMAL
- en: The following program prompts the user to enter a string and an integer, that
    is, a number without a fractional part and then displays a message.
  prefs: []
  type: TYPE_NORMAL
- en: name = input("What is your name? ")
  prefs: []
  type: TYPE_NORMAL
- en: age = int(input("What is your age? "))
  prefs: []
  type: TYPE_NORMAL
- en: print("Wow, you are already", age, "years old,", name, "!")
  prefs: []
  type: TYPE_NORMAL
- en: In Python (even though it is not frequently used), you can read two or more
    values using just one line of code, as shown here.
  prefs: []
  type: TYPE_NORMAL
- en: name, age = input("What is your name? "), int(input("What is your age? "))
  prefs: []
  type: TYPE_NORMAL
- en: print("Wow, you are already", age, "years old,", name, "!")
  prefs: []
  type: TYPE_NORMAL
- en: The corresponding flowchart fragment, however, must look like this
  prefs: []
  type: TYPE_NORMAL
- en: '![Image](img/chapter06-15.png)'
  prefs: []
  type: TYPE_IMG
- en: In Python, it is recommended to display the prompt messages using the input()
    statement. The following example is correct, but it is not frequently used.
  prefs: []
  type: TYPE_NORMAL
- en: print("What is your name? ", end = "")
  prefs: []
  type: TYPE_NORMAL
- en: name = input()
  prefs: []
  type: TYPE_NORMAL
- en: print("What is your age? ", end = "")
  prefs: []
  type: TYPE_NORMAL
- en: age = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: print("Wow, you are already", age, "years old,", name, "!")
  prefs: []
  type: TYPE_NORMAL
- en: In this book there is a slight difference between the words “prompts” and “lets”.
    When an exercise says “Write a Python program that prompts the user to enter…”
    this means that you must include a prompt message. However, when the exercise
    says “Write a Python program that lets the user enter…” this means that you are
    not actually required to include a prompt message; that is, it is not wrong to
    include one but you don't have to!  The following example lets the user enter
    their name and age (but does not prompt them to).
  prefs: []
  type: TYPE_NORMAL
- en: name = input()
  prefs: []
  type: TYPE_NORMAL
- en: age = int(input())
  prefs: []
  type: TYPE_NORMAL
- en: What happens here (when the program is executed) is that the computer displays
    a text cursor without any prompt message and waits for the user to enter two values—one
    for name and one for age. The user, though, must be a prophet and guess what to
    enter! Do they have to enter their name first and then their age, or is it the
    opposite? So, obviously a prompt message is pretty much required, because it makes
    your program more user-friendly.
  prefs: []
  type: TYPE_NORMAL
- en: '6.4 Review Questions: True/False'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Choose true or false for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)In Python, the word print is a reserved word.
  prefs: []
  type: TYPE_NORMAL
- en: 2)The print() statement can be used to display a message or the content of a
    variable.
  prefs: []
  type: TYPE_NORMAL
- en: 3)When the input() statement is executed, the flow of execution is interrupted
    until the user has entered a value.
  prefs: []
  type: TYPE_NORMAL
- en: 4)One single input() statement can be used to enter multiple data values.
  prefs: []
  type: TYPE_NORMAL
- en: 5)Before data input, a prompt message must always be displayed.
  prefs: []
  type: TYPE_NORMAL
- en: '6.5 Review Questions: Multiple Choice'
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Select the correct answer for each of the following statements.
  prefs: []
  type: TYPE_NORMAL
- en: 1)The statement print(hello) displays
  prefs: []
  type: TYPE_NORMAL
- en: a)the word “hello” (without the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: b)the word “hello” (including the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: c)the content of the variable hello.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 2)The statement print("HELLO") displays
  prefs: []
  type: TYPE_NORMAL
- en: a)the word “HELLO” (without the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: b)the word “HELLO” (including the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: c)the content of the variable HELLO.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 3)The statement print("Hello\nHermes") displays
  prefs: []
  type: TYPE_NORMAL
- en: a)the message “Hello Hermes” (without the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: b)the word “Hello” in one line and the word “Hermes” in the next one (without
    the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: c)the message “HelloHermes” (without the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: d)the message “Hello\nHermes” (without the double quotes).
  prefs: []
  type: TYPE_NORMAL
- en: e)none of the above
  prefs: []
  type: TYPE_NORMAL
- en: 4)The statement  data1data2 = input()
  prefs: []
  type: TYPE_NORMAL
- en: a)lets the user enter a value and assigns it to variable data1\. Variable data2
    remains empty.
  prefs: []
  type: TYPE_NORMAL
- en: b)lets the user enter a value and assigns it to variable data1data2.
  prefs: []
  type: TYPE_NORMAL
- en: c)lets the user enter two values and assigns them to variables data1 and data2.
  prefs: []
  type: TYPE_NORMAL
- en: d)none of the above
  prefs: []
  type: TYPE_NORMAL
