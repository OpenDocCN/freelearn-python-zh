["```py\nfrom third_party_sdk import init_error_reporting\ninit_error_reporting(app)\n```", "```py\n@app.before_server_start\nasync def setup_db(app, loop):\n    app.ctx.db = await db_setup()\n```", "```py\napp = Sanic(__name__)\nassert isinstance(app.config, dict)\n```", "```py\nenvironment = app.config.get(\"ENVIRONMENT\", \"local\")\n```", "```py\napp.config.FALLBACK_ERROR_FORMAT = \"text\"\n```", "```py\n@bp.route(\"\")\nasync def handler(request):\nenvironment = request.app.config.ENVIRONMENT\n```", "```py\nfrom sanic import Sanic\napp = Sanic.get_app()\n```", "```py\n    main_app = Sanic(\"main\")\n    side_app = Sanic(\"side\")\n    assert Sanic.get_app(\"main\") is main_app\n    ```", "```py\napp.config.FOOBAR = 123\nsetattr(app.config, \"FOOBAR\", 123)\napp.config[\"FOOBAR\"] = 123\napp.config.update({\"FOOBAR\": 123})\n```", "```py\napp = Sanic(__name__)\napp.config.FALLBACK_ERROR_FORMAT = \"text\"\n```", "```py\n$ export SANIC_FALLBACK_ERROR_FORMAT=text\n```", "```py\n    FOO = \"bar\"\n    ```", "```py\n    import settings\n    app.update_config(settings)\n    ```", "```py\n    print(app.config.FOO)\n    ```", "```py\n    class MyConfig:\n    FOO = \"bar\"\n    ```", "```py\n    app.update_config(MyConfig)\n    ```", "```py\n    def create_app(..., debug: bool = False) -> Sanic:\n        app = Sanic(__name__)\n        app.debug = debug\n        ...\n    ```", "```py\n    from os import environ\n    from path.to.somewhere import create_app\n\n    def main():\n        app = create_app()\n\n        debug = environ.get(\"RUNNING_ENV\", \"local\") != \"production\"\n\n        app.run(..., debug=debug)\n    ```", "```py\n    $ sanic path.to:app --debug\n    ```", "```py\n    $ pip install gunicorn uvicorn\n    ```", "```py\n    $ gunicorn \\\n        --bind 127.0.0.1:7777 \\\n        --worker-class=uvicorn.workers.UvicornWorker \\\n        path.to:app\n    ```", "```py\n    $ sanic \\\n        --host=0.0.0.0 \\\n        --port=443 \\\n        --cert=/path/to/cert \\\n        --key=/path/to/keyfile \\\n        --workers=4 \\\n        path.to.server:app\n    ```", "```py\n    ssl = {\"cert\": \"/path/to/cert\", \"key\": \"/path/to/keyfile\"}\n    app.run(host=\"0.0.0.0\", port=443, ssl=ssl, workers=4)\n    ```", "```py\n    main_app = Sanic(\"MyApp\")\n    http_app = Sanic(\"MyHTTPProxy\")\n\n    main_app.config.SERVER_NAME = \"example.com\"\n    http_app.config.SERVER_NAME = \"example.com\"\n    ```", "```py\n    @http_app.get(\"/<path:path>\")\n    def proxy(request, path):\n        url = request.app.url_for(\n            \"proxy\",\n            path=path,\n            _server=main_app.config.SERVER_NAME,\n            _external=True,\n            _scheme=\"https\",\n        )\n        return response.redirect(url)\n    ```", "```py\n    @main_app.before_server_start\n    async def start(app, _):\n        app.ctx.http_server = await http_app.create_server(\n            port=80, return_asyncio_server=True\n        )\n        app.ctx.http_server.app.finalize()\n    ```", "```py\n    @main_app.before_server_stop\n    async def stop(app, _):\n        await app.ctx.http_server.close()\n    ```", "```py\n    FROM sanicframework/sanic:3.9-latest\n\n    COPY . /srv\n    WORKDIR /srv\n    EXPOSE 7777\n\n    ENTRYPOINT [\"sanic\", \"server:app\", \"--port=7777\", \"--host=0.0.0.0\", ]\n    ```", "```py\n    $ docker build -t admhpkns/my-sanic-example-app .\n    ```", "```py\n    $ docker run -p 7000:7777 --name=myapp admhpkns/my-sanic-example-app \n    ```", "```py\n    $ docker rm myapp \n    ```", "```py\n    $ docker push admhpkns/my-sanic-example-app:latest\n    ```", "```py\n    $ doctl auth init\n    ```", "```py\n    $ doctl kubernetes cluster kubeconfig save afb87d0b-9bbb-43c6-a711-638bc4930f7a\n    ```", "```py\n    $ kubectl get pods\n    ```", "```py\n    spec:\n      ports:\n        - port: 80\n          targetPort: 7777\n      selector:\n        app: ch08-k8s-app\n    ```", "```py\n    spec:\n      selector:\n        matchLabels:\n          app: ch08-k8s-app\n      replicas: 4\n      template:\n        metadata:\n          labels:\n            app: ch08-k8s-app\n        spec:\n          containers:\n            - name: ch08-k8s-app\n              image: admhpkns/my-sanic-example-app:latest\n              ports:\n                - containerPort: 7777\n    ```", "```py\n    $ kubectl apply -f app.yml\n    service/ch08-k8s-app created\n    deployment.apps/ch08-k8s-app created\n    ```", "```py\n    $ kubectl get pods\n    $ kubectl get svc\n    ```", "```py\n    $ kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.0.0/deploy/static/provider/do/deploy.yaml\n    ```", "```py\n    $ kubectl apply -f ingress.yml\n    ```", "```py\n    $ kubectl get pods -n ingress-nginx\n    ```", "```py\n    $ curl http://example.com       \n    Hello from 141.226.169.179\n    ```", "```py\n    $ kubectl apply --validate=false -f https://github.com/jetstack/cert-manager/releases/download/v1.5.3/cert-manager.yaml\n    ```", "```py\n    $ kubectl get pods --namespace cert-manager\n    ```", "```py\n    apiVersion: v1\n    kind: Service\n    metadata:\n      annotations:\n        service.beta.kubernetes.io/do-loadbalancer-hostname: example.com\n      name: ingress-nginx-controller\n      namespace: ingress-nginx\n    spec:\n      type: LoadBalancer\n      externalTrafficPolicy: Local\n      ports:\n        - name: http\n          port: 80\n          protocol: TCP\n          targetPort: http\n        - name: https\n          port: 443\n          protocol: TCP\n          targetPort: https\n      selector:\n        app.kubernetes.io/name: ingress-nginx\n        app.kubernetes.io/instance: ingress-nginx\n        app.kubernetes.io/component: controller\n    ```", "```py\n    $ kubectl apply -f load-balancer.yml\n    service/ingress-nginx-controller configured\n    ```", "```py\n    $ kubectl apply -f ingress.yml\n    ```"]