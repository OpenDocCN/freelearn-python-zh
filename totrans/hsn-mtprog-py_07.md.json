["```py\n    class Billing:\n        def __init__(self,product_name,unit_price,quantity,tax):\n            self.product_name = product_name\n            self.unit_price = unit_price\n            self.quantity = quantity\n            self.tax = tax\n\n        def generate_bill(self):\n            total = self.unit_price * self.quantity \n            final_total = total + total*self.tax\n            print('***********------------------\n                   **************')\n            print('Product:', self.product_name)\n            print('Total:',final_total)\n            print('***********------------------\n                   **************')\n    ```", "```py\n    billing = Billing('Delmonte Cheese',6,4,0.054)\n    ```", "```py\n    billing.generate_bill()\n    ```", "```py\n***********------------------**************\nProduct: Delmonte Cheese\nTotal: 25.296\n***********------------------**************\n```", "```py\n    def generate_bill(product_name,unit_price,quantity,tax):\n    total = unit_price * quantity \n        final_total = total + total*tax\n        print('***********------------------\n               **************')\n        print('Product:', product_name)\n        print('Total:',final_total)\n        print('***********------------------\n               **************')\n    ```", "```py\n    Invoicing = Billing\n    ```", "```py\n    id(Billing)\n    2015859835472\n    id(Invoicing)\n    2015859835472\n    id(generate_bill)\n    2015871203792\n    ```", "```py\n    class_id_count = {}\n    ```", "```py\n    duplicates = []\n    ids = []\n    classes = []\n    classnames = []\n    ```", "```py\n    for obj in dir():\n        if type(eval(obj)) == type:\n            ids.append(id(eval(obj)))\n            classes.append(eval(obj))\n            classnames.append(obj)\n    ```", "```py\n    for i in ids:\n        if i not in class_id_count:\n            class_id_count[i] = 1\n        elif (class_id_count[i] == 1):\n            duplicates.append(i)\n            class_id_count[i] += 1\n    ```", "```py\n    for cls,clsname in zip(classes,classnames):\n        for clsid in duplicates:\n            if (id(cls)==clsid):\n                print(clsname,cls)\n    ```", "```py\nBilling <class '__main__.Billing'>\nInvoicing <class '__main__.Billing'>\n```", "```py\n    class_id_count\n    {2196689735984: 2}\n    duplicates\n    [2196689735984]\n    ids\n    [2196689735984, 2196689735984]\n    classes\n    [__main__.Billing, __main__.Billing]\n    classnames\n    ['Billing', 'Invoicing']\n    ```", "```py\n    class Product:\n        _product_id = 100902\n        _product_name = 'Iphone X'\n        _product_category = 'Electronics'\n        _unit_price = 700\n    ```", "```py\n        def get_product(self):\n            return self._product_id, self._product_name, \n                 self._product_category, self._unit_price\n    ```", "```py\n    import product\n    prodobj = product.Product()\n    ```", "```py\n    callable(product.Product)\n    True\n    ```", "```py\n    callable(prodobj)\n    False\n    ```", "```py\n    if callable(prodobj.get_product):\n        print(prodobj.get_product())\n    else:\n        print(\"This object is not callable\")\n    ```", "```py\n    if callable(prodobj):\n        print(prodobj)\n    else:\n        print('This is not a method')\n    ```", "```py\n    class Inventory:\n        def __init__(self,product_id,product_name,date,unit_price,quantity,unit_discount,tax):  \n            self.product_id = product_id\n            self.product_name = product_name\n            self.date = date\n            self.unit_price = unit_price\n            self.quantity = quantity\n            self.unit_discount = unit_discount\n            self.tax = tax\n    ```", "```py\n    def calc_amount_before_tax(self,quantity=None,unit_price=None, unit_discount=None):\n            if quantity is None:\n                self.quantity = self.quantity\n            else:\n                self.quantity = quantity\n\n            if unit_price is None:\n                self.unit_price = self.unit_price\n            else:\n                self.unit_price = unit_price\n\n            if unit_discount is None:\n                self.unit_discount = self.unit_discount\n            else:\n                self.unit_discount = unit_discount\n            amount_before_tax = self.quantity * \n               (self.unit_price - self.unit_discount)\n            return amount_before_tax\n    ```", "```py\n    def calc_amount_after_tax(self, quantity=None,unit_price=None,unit_discount=None,tax=None):\n            if quantity is None:\n                self.quantity = self.quantity\n            else:\n                self.quantity = quantity\n\n            if unit_price is None:\n                self.unit_price = self.unit_price\n            else:\n                self.unit_price = unit_price\n\n            if unit_discount is None:\n                self.unit_discount = self.unit_discount\n            else:\n                self.unit_discount = unit_discount\n\n            if tax is None:\n                self.tax = self.tax\n            else:\n                self.tax = tax\n            amount_after_tax = \n                self.calc_amount_before_tax(\n                self.quantity,self.unit_price,\n                self.unit_discount) + self.tax\n            return amount_after_tax\n    ```", "```py\n        def return_inventory(self):\n            import pandas as pd\n            inventory_schema = pd.DataFrame([\n                               self.product_id,\n                               self.product_name,\n                               self.date,\n                               self.unit_price,\n                               self.quantity,\n                               self.unit_discount,\n                               self.tax,\n                               self.calc_unt_before_tax(),\n                self.calc_amount_after_tax()]).transpose()\n            inventory_schema.columns = [\"Product_id\",\n                \"Product_name\",\"Date\",\"Unit_price\",\n                \"Quantity\",\"Unit_discount\",\"Tax\",\n                \"Amount Before Tax\", \"Amount After Tax\"]\n            return inventory_schema    \n    ```", "```py\n    inventory = Inventory(300021,\n                    'Samsung-Refrigerator',\n                    '08/04/2021',\n                    200,\n                    25,\n                    10,\n                    0.0522)\n    ```", "```py\n    inventory.product_id\n    300021\n    inventory.product_name\n    'Samsung-Refrigerator'\n    inventory.date\n    '08/04/2021'\n    inventory.unit_price\n    200\n    inventory.quantity\n    25\n    inventory.unit_discount\n    10\n    inventory.tax\n    0.0522\n    inventory.calc_amount_before_tax()\n    4750\n    inventory.calc_amount_after_tax()\n    4750.0522\n    inventory.return_inventory()\n    ```", "```py\n    dir(Inventory)\n    ['__class__',\n     '__delattr__',\n     '__dict__',\n     ‚__dir__',\n     ‚__doc__',\n     ‚__eq__',\n     ‚__format__',\n     ‚__ge__',\n     ‚__getattribute__',\n     ‚__gt__',\n     ‚__hash__',\n     ‚__init__',\n     ‚__init_subclass__',\n     ‚__le__',\n     ‚__lt__',\n     ‚__module__',\n     ‚__ne__',\n     ‚__new__',\n     ‚__reduce__',\n     ‚__reduce_ex__',\n     ‚__repr__',\n     ‚__setattr__',\n     ‚__sizeof__',\n     ‚__str__',\n     ‚__subclasshook__',\n     ‚__weakref__',\n     ‚calc_amount_after_tax',\n     ‚calc_amount_before_tax',\n     ‚return_inventory']\n    ```", "```py\n    for i in dir(Inventory):\n         if (hasattr(Inventory,i)):\n                if type(getattr(inventory, i)) is type(getattr(inventory,  '__init__')):\n                    print(getattr(Inventory,i))<class 'type'>\n    <function Inventory.__init__ at 0x000001C9BBB46CA0>\n    <function Inventory.calc_amount_after_tax at 0x000001C9BBB46DC0>\n    <function Inventory.calc_amount_before_tax at 0x000001C9BBB46D30>\n    <function Inventory.return_inventory at 0x000001C9BBB46E50>\n    ```", "```py\ninventory_fmcg = Inventory(100011,\n```", "```py\n                'Delmonte Ketchup',\n```", "```py\n                '09/04/2021',\n```", "```py\n                5,\n```", "```py\n                0.25,\n```", "```py\n                0.10,\n```", "```py\n                0.0522)\n```", "```py\ninventory_fmcg.product_id\n```", "```py\n100011\n```", "```py\ninventory_fmcg.calc_amount_before_tax()\n```", "```py\n1.225\n```", "```py\ninventory_fmcg.calc_amount_after_tax()\n```", "```py\n1.2772000000000001\n```", "```py\ninventory_fmcg.return_inventory()\n```", "```py\nisinstance(inventory_fmcg,Inventory)\nTrue\n```", "```py\nisinstance(inventory,Inventory)\nTrue\n```", "```py\n    if isinstance(inventory,Inventory):\n        display(inventory.return_inventory())\n    else:\n        print(\"Object reallocated to\",  type(inventory), \n              \", please correct it\")\n    ```", "```py\n    inventory = \"test\"\n    ```", "```py\n    if isinstance(inventory,Inventory):\n        print(inventory.return_inventory())\n    else:\n        print(\"Object reallocated to\",  type(inventory), \n              \", please correct it\")\n    ```", "```py\nObject reallocated to <class 'str'> , please correct it\n```", "```py\n    class FMCG:\n        def __init__(self,supplier_name,supplier_code,\n           supplier_address,supplier_contract_start_date,\\\n        supplier_contract_end_date,supplier_quality_code):\n            self.supplier_name = supplier_name\n            self.supplier_code = supplier_code\n            self.supplier_address = supplier_address\n            self.supplier_contract_start_date = \n                 supplier_contract_start_date\n            self.supplier_contract_end_date = \n                 supplier_contract_end_date\n            self.supplier_quality_code = \n                 supplier_quality_code\n    ```", "```py\n        def get_supplier_details(self):\n            supplier_details = {\n               'Supplier_name': self.supplier_name, \n                'Supplier_code': self.supplier_code,\n                'Supplier_address': self.supplier_address,\n                'ContractStartDate': \n                        self.supplier_contract_start_date,\n                'ContractEndDate': \n                          self.supplier_contract_end_date, \n                'QualityCode': self.supplier_quality_code\n            }\n            return supplier_details\n    ```", "```py\n    fmcg = FMCG('Test Supplier','a0015','5093 9th Main Street, Pasadena,California, 91001', '05/04/2020', '05/04/2025',1)\n    fmcg.get_supplier_details()\n    {'Supplier_name': 'Test Supplier',\n     'Supplier_code': 'a0015',\n     'Supplier_address': '5093 9th Main Street, \n        Pasadena,California, 91001',\n     'ContractStartDate': '05/04/2020',\n     'ContractEndDate': '05/04/2025',\n     'QualityCode': 1}\n    ```", "```py\n    class Condiments(FMCG,Inventory):\n        def __init__(self,*inventory):\n            self.product_id = inventory[0]\n            self.product_name = inventory[1]\n            self.date = inventory[2]\n            self.unit_price = inventory[3]\n            self.quantity = inventory[4]\n            self.unit_discount = inventory[5]\n            self.tax = inventory[6]\n            self.supplier_name = inventory[7]\n            self.supplier_code = inventory[8]\n            self.supplier_address = inventory[9]\n            self.supplier_contract_start_date = \n                                    inventory[10]\n            self.supplier_contract_end_date = \n                                    inventory[11]\n            self.supplier_quality_code = inventory[12]\n    ```", "```py\n        def return_condiment_inventory(self):\n            import pandas as pd\n            inventory_schema = pd.DataFrame([\n                            self.product_id,\n                            self.date,\n                            self.unit_price,\n                            self.quantity,\n                            self.unit_discount,\n                            self.tax,\n                            self.calc_amount_before_tax(),\n                            self.calc_amount_after_tax(),\n                            self.get_supplier_details()\n                                           ]).transpose()\n            inventory_schema.columns = [\"Product_id\",\n                \"Date\",\"Unit_price\",\"Quantity\",\n                \"Unit_discount\",\"Tax\",\"Amount Before Tax\", \n                \"Amount After Tax\",'Supplier_details']\n            return inventory_schema          \n    ```", "```py\n    ketchup = Condiments(100011,'Delmonte Ketchup','09/04/2021',5,0.25,0.10,0.0522,'Test Supplier','a0015','5093 9th Main Street, Pasadena,California, 91001', '05/04/2020', '05/04/2025',1)\n    ketchup.return_condiment_inventory()\n    ```", "```py\n    issubclass(FMCG,Inventory)\n    False\n    ```", "```py\n    issubclass(Condiments,FMCG)\n    True\n    issubclass(Condiments,Inventory)\n    True\n    ```", "```py\n    if issubclass(Condiments,FMCG):\n        fmcg = Condiments(100011,'Delmonte \n          Ketchup','09/04/2021',5,0.25,0.10,0.0522,\n          'Test Supplier','a0015','5093 9th Main Street, \n          Pasadena,California, 91001', '05/04/2020', \n          '05/04/2025',1)\n    else:\n        fmcg = FMCG('Test Supplier','a0015','5093 9th Main\n          Street, Pasadena,California, 91001', \n          '05/04/2020', '05/04/2025',1)\n    display(fmcg.get_supplier_details())\n    ```", "```py\n    {'Supplier_name': 'Test Supplier',\n     'Supplier_code': 'a0015',\n     'Supplier_address': '5093 9th Main Street, \n        Pasadena,California, 91001',\n     'ContractStartDate': '05/04/2020',\n     'ContractEndDate': '05/04/2025',\n     'QualityCode': 1}\n    ```", "```py\ntest_property = property()\n```", "```py\ntest_property\n```", "```py\n<property at 0x1c9c9335950>\n```", "```py\nclass TestPropertyClass:\n```", "```py\n    def __init__(self):\n```", "```py\n        self._test_attr = None\n```", "```py\n    def get_test_attr(self):\n```", "```py\n        print(\"get test_attr\")\n```", "```py\n        return self._test_attr\n```", "```py\n    def set_test_attr(self, value):\n```", "```py\n        print(\"set test_attr\")\n```", "```py\n        self._test_attr = value\n```", "```py\n    def del_test_attr(self):\n```", "```py\n        print(\"del test_attr\")\n```", "```py\n        del self._test_attr\n```", "```py\n    test_attr = property(get_test_attr, set_test_attr, \n```", "```py\n        del_test_attr, \"test_attr is a property\")\n```", "```py\ntest_property_object = TestPropertyClass()\n```", "```py\ntest_property_object.test_attr\n```", "```py\nget test_attr\n```", "```py\ntest_property_object.test_attr = 1980\n```", "```py\nset test_attr\n```", "```py\ntest_property_object.test_attr\n```", "```py\nget test_attr\n```", "```py\n1980\n```", "```py\ndel test_property_object.test_attr\n```", "```py\ndel test_attr\n```", "```py\ntest_property_object.test_attr\n```", "```py\nclass TestPropertyClass:\n```", "```py\n    def __init__(self):\n```", "```py\n        self._test_attr = None\n```", "```py\n    @property\n```", "```py\n    def test_attr(self):\n```", "```py\n        return self.test_attr\n```", "```py\n    @test_attr.getter\n```", "```py\n    def test_attr(self):\n```", "```py\n        print(\"get test_attr\")\n```", "```py\n        return self._test_attr\n```", "```py\n    @test_attr.setter\n```", "```py\n    def test_attr(self, value):\n```", "```py\n        print(\"set test_attr\")\n```", "```py\n        self._test_attr = value\n```", "```py\n    @test_attr.deleter\n```", "```py\n    def test_attr(self):\n```", "```py\n        print(\"del test_attr\")\n```", "```py\n        del self._test_attr\n```", "```py\ntest_property_object = TestPropertyClass()\n```", "```py\ntest_property_object.test_attr\n```", "```py\nget test_attr\n```", "```py\ntest_property_object.test_attr = 1982\n```", "```py\nset test_attr\n```", "```py\ntest_property_object.test_attr\n```", "```py\nget test_attr\n```", "```py\n1982\n```", "```py\ndel test_property_object.test_attr\n```", "```py\ndel test_attr\n```"]