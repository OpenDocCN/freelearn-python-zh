- en: Chapter 5. Providing Information and Alerting Users
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover:'
  prefs: []
  type: TYPE_NORMAL
- en: Showing a `MessageBox`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Providing help with `ToolTips`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using `SuperToolTips`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a `BalloonTip`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom `SplashScreen`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Showing task progress with the Progress dialog
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an `AboutBox`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: During an application's runtime, a wide variety of events can arise under a
    number of different circumstances. This gives rise to the need to be able to alert
    and inform users of these events in an equally wide variety of context-sensitive,
    intuitive, and effective ways.
  prefs: []
  type: TYPE_NORMAL
- en: Providing information in the right way at the right time is crucial to the usability
    of an application. wxPython includes many widgets to help meet the specific needs
    of any type of application. So let's take a look at some of these widgets and
    see how to use them to their fullest.
  prefs: []
  type: TYPE_NORMAL
- en: Showing a MessageBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`MessageBoxes` are one of, if not, the most common and easy ways of alerting
    users and providing them with the ability to make simple choices. `MessageBoxes`
    come in a number of varying forms but all share two common points. They all have
    a (usually) short caption message and one or more buttons that allow the user
    to respond to the message. This recipe shows how to add a `MessageBox` that gives
    the user a chance to abort closing a `Frame`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As an example of how to show a `MessageBox`, we will create a little Frame
    class that uses a `MessageBox` as a confirmation to the window close event:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/1780_05_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`wx.MessageBox` is a function that will create, show, and clean up a modal
    dialog. It only requires the first parameter, which specifies the message that
    will be displayed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The other parameters are all optional keyword parameters. The second parameter
    is used to specify the dialog's title. The third parameter is the style parameter
    for specifying how the dialog will look and what buttons it will have on it. This
    parameter is just like any other widget constructor in that its value will be
    a bitmask of style flags. The fourth parameter can be used to specify the parent
    window of the dialog. The final two parameters can be used for explicitly setting
    the dialog's X and Y coordinates on the desktop.
  prefs: []
  type: TYPE_NORMAL
- en: In this recipe, we just used the message and the style parameters. In the style
    parameter, we specified the `CENTER` flag which indicates that the dialog should
    be centered on its parent, which in this case will be the desktop since we did
    not specify a parent window. The `ICON_QUESTION` flag specifies that we want to
    display the question mark icon on the dialog. The last flag, `YES_NO`, says that
    we want to have a Yes and a No button on the dialog, so that the user can reply
    to the yes/no question we asked in our message.
  prefs: []
  type: TYPE_NORMAL
- en: When the user clicks on one of the dialog's buttons, the dialog will end its
    modal loop and return the value of the button that was clicked, which in this
    case will be either `YES` or `NO`. Here we simply check the return value and either
    `Veto` the event to stop the `Frame` from closing, or `Skip` it to allow the `Frame`
    to be destroyed.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**Platform Notice**'
  prefs: []
  type: TYPE_NORMAL
- en: On OS X, these dialogs will show the application icon. This is done to conform
    with Apple's Human Interface Guidelines. This means that unless you have built
    your script into an applet and given it its own icon, the dialog will show the
    `Python.app` icon.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There are a number of style flags that the `MessageBox` function can accept.
    Here is a quick reference list, broken down by category.
  prefs: []
  type: TYPE_NORMAL
- en: Icons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The `MessageBox` can show only one icon, so only one of the following flags
    should be specified at a time:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Flags | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.ICON_ERROR` | Display an icon on the dialog that signifies that an error
    has occurred. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.ICON_INFORMATION` | Display an icon on the dialog that signifies that
    the dialog is only displaying information. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.ICON_QUESTION` | Display an icon on the dialog that signifies that a
    question is being asked that the user needs to respond to. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.ICON_WARNING` | Display an icon on the dialog that signifies a warning
    message to the user. |'
  prefs: []
  type: TYPE_TB
- en: Buttons
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The following flags are used to specify the buttons to show in the dialog.
    By default, the dialog will just show an OK button:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Flags | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.CANCEL` | Add a Cancel button to the dialog. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.OK` | Add an OK button to the dialog. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.YES` | Add a Yes button to the dialog. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.NO` | Add a No button to the dialog. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.YES_NO` | Convenience for `wx.YES/wx.NO`. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.YES_DEFAULT` | Set the Yes button as the default button. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.NO_DEFAULT` | Set the No button as the default button. |'
  prefs: []
  type: TYPE_TB
- en: Providing help with ToolTips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`ToolTips` are small pop-up help texts that are shown when the mouse cursor
    hovers over a window object for a few moments. When the mouse leaves the window''s
    area they are automatically dismissed. They are very useful for places where it
    may be necessary to present extra information to your users about the function
    of a certain part of the interface. Nearly all window objects support having a
    `ToolTip` associated with them. This recipe shows how to add a `ToolTip` to a
    `Button`.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to see how to add a `ToolTip` to a control, let''s just make a simple
    `Panel` class that has a single `Button` on it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we just created a simple panel with a single button on it. The button
    just has a simple label that says `Go`. Since there is no other indication as
    to what this button may do, we then added a `ToolTip` to it by calling the `SetToolTipString`
    method. The `SetToolTipString` method belongs to the base `wx.Window` class so
    it can be used with any object that is visible on the screen. This method creates
    a `ToolTip` object and then calls the Window's `SetToolTip` method to associate
    `ToolTip` with the `Window`.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using SuperToolTips* recipe in this chapter shows another way of providing
    context sensitive help to users.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: See the *Playing with the mouse* recipe in [Chapter 2](ch02.html "Chapter 2. Responding
    to Events"), *Responding to Events* for some insight into how the system shows
    the tips when the mouse cursor enters the window.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using SuperToolTips
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `SuperToolTip` class is an advanced type of `ToolTip` provided by the `wx.lib.agw.supertooltip`
    module. Unlike the regular `ToolTip`, the `SuperToolTip` is a custom fully-owner-drawn
    control that supports a wide range of display options. It has the ability to show
    a header, a footer, a body section, and each section can also have an image shown
    in it. In addition to this, it also supports custom backgrounds, HTML rendering
    of the content, and hyperlinks. This recipe shows how to create and use a `SuperToolTip`.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`wx.lib.agw` is available in wxPython 2.8.9.2 and higher.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s modify the sample from the *Providing help with ToolTips* recipe to
    show how a more verbose help message may be helpful in this case. This recipe
    uses two image files that are provided with the source code that accompanies this
    chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: '![How to do it...](img/1780_05_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Here, we took our previous recipe and changed it to use a `SuperToolTip` instead
    of the standard `ToolTip`.
  prefs: []
  type: TYPE_NORMAL
- en: First, we start by importing the extension module from the `wx.lib.agw` package
    so that we can access the `SuperToolTip` class. Then we proceed to create the
    `SuperToolTip` object for our button in the `SuperToolTipTestPanel` class. In
    our use case, this involves creating the tip with its body message, then setting
    a body image that will be shown to the left of our message. We then added some
    header text by calling the `SetHeader` method as well as a footer and footer image
    by using the `SetFooter` and `SetFooterBitmap` methods. The last setup step we
    make is to call `ApplyStyle`. This method allows for the use of one of the 30
    or so built-in style themes for the background gradient.
  prefs: []
  type: TYPE_NORMAL
- en: The final step in using the `SuperToolTip` is the important difference between
    it and the standard `ToolTip`. We have to call `SetTarget` on the `SuperToolTip`
    object instead of calling `SetToolTip` on the `Window` object (in this case our
    `Button)`. This is because the `SuperToolTip` manages when it is shown/hidden,
    and not the `Window` it belongs too.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `SuperToolTip` has a few more options not covered in this recipe. Included
    below are some additional references and information.
  prefs: []
  type: TYPE_NORMAL
- en: Styles
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The `ApplyStyles` method takes one of the named built-in styles as a parameter.
    There are currently about 30 different built-in styles. They are all defined and
    can be found in the `supertooltip` module. They can also be found by looking at
    the return value of `supertooltip.GetStyleKeys()`, which will return a list of
    all the built-in styles.
  prefs: []
  type: TYPE_NORMAL
- en: Additional customization
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'There are a few more additional methods that can be used to customize the appearance
    of the `SuperToolTip`. The following table includes a quick reference for these
    methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Methods | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `SetDrawHeaderLine(bool)` | Draw a horizontal separator line between the
    header and the body. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetDrawFooterLine(bool)` | Draw a horizontal separator line between the
    footer and the body. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetDropShadow(bool)` | Use a drop shadow on the tip window. (Windows only)
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SetUseFade(bool)` | Fade in/out of view. (Windows only) |'
  prefs: []
  type: TYPE_TB
- en: '| `SetEndDelay(int)` | Set the time for which the tip will be shown. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetTopGradientColour(colour)` | Sets the top gradient color. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetBottomGradientColour(colour)` | Sets the bottom gradient color. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetMiddleGradientColour(colour)` | Sets the middle gradient color. |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Providing help with ToolTips* recipe in this chapter shows a way to provide
    simple help messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Displaying a BalloonTip
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`BalloonTips` are yet another `ToolTip` implementation. They are fairly similar
    to the `SuperToolTip` but have a look and feel that imitates the Windows XP taskbar
    balloon notifications. When shown, the `BalloonTip` will create a tip window that
    has a point that extends towards the centre of its target window. This recipe
    shows how to add a `BalloonTip` to an application''s `TaskBarIcon`.'
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '`wx.lib.agw` is available in wxPython 2.8.9.2 and higher.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we will create a simple `TaskBarIcon` class that will show a `BalloonTip`
    when hovered over. In this example, we again use an external icon that is provided
    with the source code that accompanies this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `BalloonTip` class is found in the `wx.lib.agw.balloontip` module. To make
    it easier to use, we imported it with the alias `btip`. The `BalloonTip` constructor
    takes up to five optional keyword arguments to specify the tip''s contents and
    appearance:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Keyword arguments | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `topicon` | Accepts a `Bitmap` object that will be shown in the top left-hand
    corner of the `BalloonTip` window |'
  prefs: []
  type: TYPE_TB
- en: '| `toptitle` | A string that specifies the title of the `BalloonTip` window
    |'
  prefs: []
  type: TYPE_TB
- en: '| `message` | A string that specifies the main message for the `BalloonTip`
    window |'
  prefs: []
  type: TYPE_TB
- en: '| `shape` | Either `BT_RECTANGLE` or `BT_ROUNDED` (default), which specify
    the shape of the `BalloonTip` window |'
  prefs: []
  type: TYPE_TB
- en: '| `tipstyle` | One of the following values for specifying how the `BalloonTip`
    window will be dismissed:'
  prefs: []
  type: TYPE_NORMAL
- en: '`BT_LEAVE:` The tip window will be dismissed when the mouse leaves the target
    window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BT_CLICK:` The tip window will be dismissed when a user clicks on the target
    window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`BT_BUTTON:` The tip window will be dismissed by clicking on a close button
    on the tip window'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '|'
  prefs: []
  type: TYPE_NORMAL
- en: After creating the `BalloonTip`, we modified its start delay by making a call
    to `SetStartDelay`, which sets the delay in milliseconds from which the tip window
    will be shown after the mouse is moved over the target window. Finally, we called
    `SetTarget` to set the `TaskBarIcon` as the target window for this `BalloonTip`.
    After this, the `BalloonTip` is all set up for use with our `TaskBarIcon`.
  prefs: []
  type: TYPE_NORMAL
- en: In the `TaskBarIcons` event handler for the exit menu event, we had to add a
    call to `DestroyTimer` on our `BalloonTip`. This is to ensure that the tip window
    is destroyed, otherwise if it is still open the applications main loop will not
    exit since there are still top-level windows in the application.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'As with most of the generic widgets available in `wx.lib`, the `BalloonTip`
    class offers a wide variety of methods to customize its appearance. The following
    table includes a quick reference to a number of these methods:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Method | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `SetBalloonColour(colour)` | Sets the `BalloonTips` background color. Pass
    `None` to revert back to the default. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetMessageColour(colour)` | Set the text `Colour` for the main message.
    Pass `None` to revert back to the default. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetMessageFont(font)` | Set the `Font` to use for the main message. Pass
    `None` to revert back to the default. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetTitleColour(colour)` | Set the text `Colour` for the title. Pass `None`
    to revert back to the default. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetTitleFont(font)` | Set the titles `Font`. Pass `None` to revert back
    to the default. |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using SuperToolTips* recipe in this chapter shows another way to provide
    context-sensitive information messages.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Working with tray icons* recipe in [Chapter 4](ch04.html "Chapter 4. Advanced
    Building Blocks of a User Interface"), *Advanced Building Blocks of a User Interface*
    contains an explanation of using `TaskBarIcons` in an application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a custom SplashScreen
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '`SplashWindows` are commonly seen during the start up of an application. They
    are a means to show a software''s logo and, more importantly, they are often used
    as a means to provide feedback to the user when an application takes a bit of
    time to start up so that the user knows that the application is in the process
    of loading up. This recipe shows how to create an advanced `SplashWindow` class
    that can show the incremental progress of where an application is during startup.'
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here we will create our custom `SplashScreen` class. The source code that accompanies
    this chapter also includes a sample application showing how to use this class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The screenshot is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How to do it...](img/1780_05_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The basic `SplashScreen` uses the `Bitmap` that is passed into the constructor
    to set its size, and then the `Bitmap` is drawn to fill the background. In our
    subclass, we created a `Gauge` to allow for the program to give feedback to the
    user about the progress of the startup procedure.
  prefs: []
  type: TYPE_NORMAL
- en: To allow the `Gauge` to fit on the `SplashScreen`, we first changed the width
    of the `Gauge` to be the same width as the `SplashScreen`, by calling its `SetSize`
    method with the `Gauge's` height and the `SplashScreen's` width. Next, we changed
    the size of the `SplashScreen` to make it taller, so that we could position the
    `Gauge` at the bottom of it without overlapping the `SplashScreen` image. Then
    the final step was to manually position the `Gauge` into the extra space we added
    at the bottom, by calling its `SetPosition` method with the X and Y coordinates
    of where the top-left corner of the `Gauge` should be placed.
  prefs: []
  type: TYPE_NORMAL
- en: The last two things that we added to our class were just some simple access
    methods to allow the `Gauge` to be manipulated by the users of this class. For
    an example of this class in action, check out the sample code that accompanies
    this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `SplashScreen''s` constructor has two different style parameters. The first
    one, `splashStyle`, is a required bitmask of one or more of the following flags:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Flags | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.SPLASH_CENTRE_ON_PARENT` | Center the SplashScreen on its parent window.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.SPLASH_CENTRE_ON_SCREEN` | Center the SplashScreen on the desktop. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.SPLASH_NO_CENTRE` | Don''t center the SplashScreen. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.SPLASH_TIMEOUT` | Allow the SplashScreen to be automatically destroyed
    when the timeout is reached. |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.SPLASH_NO_TIMEOUT` | Don''t allow the SplashScreen to timeout (require
    explicit destruction of it). |'
  prefs: []
  type: TYPE_TB
- en: The second style flag parameter is the typical optional one, and is for specifying
    `wx.Frame` style flags. The `SplashScreen` derives from `wx.Frame`, so these flags
    will be passed down to the base class. In most cases, the default flags are what
    you want to use here, otherwise it will end up behaving more like a `Frame` than
    a `SplashScreen`.
  prefs: []
  type: TYPE_NORMAL
- en: Showing task progress with the Progress dialog
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The `ProgressDialog` is a dialog for showing the progress of a long-running
    task, such as downloading a file from the Internet, or exporting data from your
    program. The dialog shows a short message, a progress bar, and optionally Abort
    and/or Skip buttons. Additionally, it can also optionally show the estimated,
    elapsed, and remaining time. This recipe shows how to make a command-line script
    that can be used to download a file from the Internet and show the progress of
    the download using `ProgressDialog`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will create a full application here to allow downloading a file from a URL
    that is passed to the script on the command line. So first we will define the
    application object class:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we define the method that will be used to show the `ProgressDialog`,
    and perform the actual downloading of the file by using the `urllib` module from
    the Python standard library:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, we have an additional helper function that is used to get a unique path
    to write the downloaded data to:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: 'Finally, the main execution of the script that does the simple command-line
    argument handling for this application and starts the download is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here is an example of how to call this script from the command-line downloader:
    `python downloader.py http://somewebsite.com/afile.zip`.'
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The recipe above shows the code for the entire downloader application. Let's
    take a walk through how it works, starting at the top and working our way down.
  prefs: []
  type: TYPE_NORMAL
- en: First, we imported some modules from the standard Python library. We needed
    the `os` module for path manipulation, the `sys` module for getting the command-line
    arguments, and the `urllib2` module so that we can open remote URLs.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we defined our `DownloaderApp`. This application object has two methods
    that are of interest to us. The first is the override of `wx.App.OnInit`. In our
    override, we created a Frame and hid it. We did this just to ensure that the event
    loop does not exit before we create and show our `ProgressDialog`, as the event
    loop will exit by default when there are no more top-level windows in the application.
    The second is the `DownloadFile` method. This is where the main action of this
    application takes place.
  prefs: []
  type: TYPE_NORMAL
- en: '`DownloadFile` first opens the remote URL that was passed in using `urllib2`,
    and gets the size of the file that the URL points to. Next, it opens a file on
    the local file system to, write to as we read the data from the remote URL. We
    then create our `ProgressDialog`, giving it the style flags necessary to have
    an Abort button and show the elapsed and remaining time. Once the dialog has been
    created, we can start reading the data from the URL that we opened. We do this
    in a loop that checks how much we have read already and whether or not the Abort
    button was clicked. After reading a chunk from the URL, we call the `ProgressDialog''s
    Update` method, which will update the progress bar and return two Boolean flags
    that indicate if one of the two possible dialog buttons was clicked. Once the
    loop exits, we simply close the two files and `Destroy` our window objects, to
    cause the main loop to exit.'
  prefs: []
  type: TYPE_NORMAL
- en: The final two things are the `GetUniqueName` function and the `__main__. GetUniqueName`
    is just a simple utility function to help generate the local filename, to make
    sure that we don't try to write over an already-existing file. The `__main__`
    execution makes just a simple check of the command-line arguments, and then creates
    the `DownloaderApp` and calls its `DownloadFile` method. We needed to use `wx.CallLater`
    to delay the call by a couple of seconds because `DownloadFile` will block when
    it is called. Without using `CallLater`, it would have blocked, performed the
    download, and returned before the `MainLoop` was started, which would have meant
    that our dialog would have never been displayed on the screen.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Included below are some additional references and information to take into consideration
    when using the `ProgressDialog`.
  prefs: []
  type: TYPE_NORMAL
- en: Message parameter
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: There is some undesirable behavior that can be seen with the `ProgressDialog's`
    message parameter in some cases. If the passed-in message string is very long,
    it will cause the dialog's width to be set very wide. So if you see that the dialog
    is showing up as being much wider than you would expect, try shortening your message.
  prefs: []
  type: TYPE_NORMAL
- en: Style flags
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Here is a quick reference to the available style flags that the `ProgressDialog`
    can use:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Style flags | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.PD_APP_MODAL` | The dialog should be application modal |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.PD_AUTO_HIDE` | Have the dialog automatically disappears when the progress
    bar reaches its maximum value |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.PD_SMOOTH` | Cause the progress bar to be updated smoothly |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.PD_CAN_ABORT` | Show the Abort button on the dialog |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.PD_CAN_SKIP` | Show the Skip button on the dialog |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.PD_ELAPSED_TIME` | Show the elapsed time status text |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.PD_ESTIMATED_TIME` | Show the estimated total time status text |'
  prefs: []
  type: TYPE_TB
- en: '| `wx.PD_REMAININT_TIME` | Show the estimated remaining time status text |'
  prefs: []
  type: TYPE_TB
- en: Creating an AboutBox
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: An About dialog is a simple dialog for displaying some information about an
    application to the user, such as the application's version number and license
    information. This dialog can be found in most applications on any operating system.
    It contains an icon and a small information section that usually contains at least
    the version information and credits. This recipe shows how to set up and show
    an About dialog in an application.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Here, we create a simple skeleton application that shows how to integrate an
    `AboutBox` into an application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we created a very simple yet complete application for creating
    and displaying an About dialog. So let's go over the important parts of the code
    shown above.
  prefs: []
  type: TYPE_NORMAL
- en: Firstly, let's take a look a look at the part where we set up the menus in the
    `AboutRecipeFrame` class. Standard application About dialogs are shown from a
    menu item. On Windows and GTK Linux this menu entry is under the Help menu; on
    Macintosh OS X this menu entry is under the Application menu. wxPython will take
    care of these platform differences for us automatically since we assigned our
    About menu entry the `wx.ID_ABOUT` stock ID, which lets wx know that the menu
    entry is a standard about information menu entry.
  prefs: []
  type: TYPE_NORMAL
- en: The next and most important part of this recipe is the `OnAbout` menu event
    handler. This is the method that will get called when our About menu entry is
    activated and it is where we create and show the About dialog by calling the `AboutBox`
    function. The `AboutBox` function requires an `AboutDialogInfo` object that contains
    all of the information that we want to display in the dialog that it will create.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `AboutDialogInfo` object has a number of methods for setting the different
    data fields that the dialog can support. These methods are all simple setter methods
    that take strings or lists of strings as arguments. We used four of these methods
    in this recipe:'
  prefs: []
  type: TYPE_NORMAL
- en: '`SetName` takes the application''s name. This string will be shown in the dialog''s
    title bar and as the first line in the main content area.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SetVersion` is for setting and showing the application''s version number.
    This is shown after the application name in the main content area.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SetCopyright` sets the copyright information field. The special thing to note
    about this method is if the string contains a (C) in it, this will be automatically
    converted to the copyright symbol ©.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`SetDescription` is the main description field, which can contain any arbitrary
    information about the application.'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The last thing that we did was to show the About dialog box. This is quite simple.
    All we needed to do was to call the `wx.AboutBox` function with the `AboutDialogInfo`
    that we created.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `AboutDialogInfo` object supports a number of additional fields for other
    special types of data and customization of the `AboutBox`. wxPython provides a
    native implementation of the About dialog on the three major platforms (MSW, GTK,
    OSX). However, only the GTK version of the `AboutBox` has native support for all
    the extra fields that the `AboutDialogInfo` supports. If the `AboutDialogInfo`
    contains any fields that the native dialog does not support, wxPython will automatically
    switch to the generic version of the dialog. This can be a problem if you want
    to maintain a native look and feel in your application. So following is a list
    of the other `AboutDialogInfo` fields that are available, and which ones will
    cause the generic dialog to be used on Windows and OS X:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Other `AboutDialogInfo` fields | Description |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| `SetArtists(list_of_strings)` | For crediting the application''s graphic
    artists. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetDevelopers(list_of_strings)` | For crediting the application''s developers.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SetDocWriters(list_of_strings)` | For crediting the application''s documentation
    writers. |'
  prefs: []
  type: TYPE_TB
- en: '| `SetIcon(icon)` | Customize the dialog''s icon. Default is the application
    icon (GTK only) |'
  prefs: []
  type: TYPE_TB
- en: '| `SetLicense(license_string)` | For displaying the application''s long license
    text (GTK only). |'
  prefs: []
  type: TYPE_TB
- en: '| `SetTranslators(list_of_strings)` | For crediting the application''s translators.
    |'
  prefs: []
  type: TYPE_TB
- en: '| `SetWebSite(url_string)` | Creates a hyperlink to a website in the dialog
    (GTK only). |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Utilizing Stock IDs* recipe in [Chapter 1](ch01.html "Chapter 1. Getting
    Started with wxPython"), *Getting Started with wxPython* explains the usage of
    the built-in IDs.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Adding Menus and MenuBars* recipe in [Chapter 3](ch03.html "Chapter 3. Basic
    Building Blocks of a User Interface"), *Basic Building Blocks of a User Interface*
    contains detailed information about creating menus and adding them to a Frame's
    `MenuBar`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
