["```py\n    # email_messages/forms.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import forms\n    from django.utils.translation import ugettext_lazy as _\n    from django.contrib.auth.models import User\n\n    class MessageForm(forms.Form):\n        recipient = forms.ModelChoiceField(\n            label=_(\"Recipient\"),\n            queryset=User.objects.all(),\n            required=True,\n        )\n        message = forms.CharField(\n            label=_(\"Message\"),\n            widget=forms.Textarea,\n            required=True,\n        )\n\n        def __init__(self, request, *args, **kwargs):\n            super(MessageForm, self).__init__(*args, **kwargs)\n     self.request = request\n            self.fields[\"recipient\"].queryset = \\\n                self.fields[\"recipient\"].queryset.\\\n                exclude(pk=request.user.pk)\n    ```", "```py\n    # email_messages/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.contrib.auth.decorators import login_required\n    from django.shortcuts import render, redirect\n\n    from .forms import MessageForm\n\n    @login_required\n    def message_to_user(request):\n        if request.method == \"POST\":\n            form = MessageForm(request, data=request.POST)\n            if form.is_valid():\n                # do something with the form\n                return redirect(\"message_to_user_done\")\n        else:\n            form = MessageForm(request)\n\n        return render(request,\n            \"email_messages/message_to_user.html\",\n            {\"form\": form}\n        )\n    ```", "```py\n    # email_messages/forms.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import forms\n    from django.utils.translation import ugettext,\\\n        ugettext_lazy as _\n    from django.core.mail import send_mail\n    from django.contrib.auth.models import User\n\n    class MessageForm(forms.Form):\n        recipient = forms.ModelChoiceField(\n            label=_(\"Recipient\"),\n            queryset=User.objects.all(),\n            required=True,\n        )\n        message = forms.CharField(\n            label=_(\"Message\"),\n            widget=forms.Textarea,\n            required=True,\n        )\n\n        def __init__(self, request, *args, **kwargs):\n            super(MessageForm, self).__init__(*args, **kwargs)\n            self.request = request\n            self.fields[\"recipient\"].queryset = \\\n                self.fields[\"recipient\"].queryset.\\\n                exclude(pk=request.user.pk)\n\n     def save(self):\n     cleaned_data = self.cleaned_data\n     send_mail(\n     subject=ugettext(\"A message from %s\") % \\\n     self.request.user,\n     message=cleaned_data[\"message\"],\n     from_email=self.request.user.email,\n     recipient_list=[\n     cleaned_data[\"recipient\"].email\n     ],\n     fail_silently=True,\n     )\n\n    ```", "```py\n    # email_messages/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.contrib.auth.decorators import login_required\n    from django.shortcuts import render, redirect\n\n    from .forms import MessageForm\n\n    @login_required\n    def message_to_user(request):\n        if request.method == \"POST\":\n            form = MessageForm(request, data=request.POST)\n            if form.is_valid():\n     form.save()\n                return redirect(\"message_to_user_done\")\n        else:\n            form = MessageForm(request)\n\n        return render(request,\n            \"email_messages/message_to_user.html\",\n            {\"form\": form}\n        )\n    ```", "```py\n# quotes/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nimport os\nfrom django.db import models\nfrom django.utils.timezone import now as timezone_now\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\n\ndef upload_to(instance, filename):\n now = timezone_now()\n filename_base, filename_ext = os.path.splitext(filename)\n return \"quotes/%s%s\" % (\n now.strftime(\"%Y/%m/%Y%m%d%H%M%S\"),\n filename_ext.lower(),\n )\n\n@python_2_unicode_compatible\nclass InspirationalQuote(models.Model):\n    author = models.CharField(_(\"Author\"), max_length=200)\n    quote = models.TextField(_(\"Quote\"))\n    picture = models.ImageField(_(\"Picture\"),\n upload_to=upload_to,\n        blank=True,\n        null=True,\n    )\n\n    class Meta:\n        verbose_name = _(\"Inspirational Quote\")\n        verbose_name_plural = _(\"Inspirational Quotes\")\n\n    def __str__(self):\n        return self.quote\n```", "```py\n    # quotes/forms.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import forms\n    from .models import InspirationalQuote\n\n    class InspirationalQuoteForm(forms.ModelForm):\n        class Meta:\n            model = InspirationalQuote\n            fields = [\"author\", \"quote\", \"picture\", \"language\"]\n    ```", "```py\n    # quotes/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.shortcuts import redirect\n    from django.shortcuts import render\n    from .forms import InspirationalQuoteForm\n\n    def add_quote(request):\n        if request.method == \"POST\":\n            form = InspirationalQuoteForm(\n                data=request.POST,\n                files=request.FILES,\n            )\n            if form.is_valid():\n                quote = form.save()\n                return redirect(\"add_quote_done\")\n        else:\n            form = InspirationalQuoteForm()\n        return render(request,\n            \"quotes/change_quote.html\",\n            {\"form\": form}\n        )\n    ```", "```py\n    {# templates/quotes/change_quote.html #}\n    {% extends \"base.html\" %}\n    {% load i18n %}\n\n    {% block content %}\n        <form method=\"post\" action=\"\" enctype=\"multipart/form-data\">\n            {% csrf_token %}\n            {{ form.as_p }}\n            <button type=\"submit\">{% trans \"Save\" %}</button>\n        </form>\n    {% endblock %}\n    ```", "```py\n# quotes/models.py\n# …\nfrom PIL import Image\nfrom django.conf import settings\nfrom django.core.files.storage import default_storage as storage\nTHUMBNAIL_SIZE = getattr(\n    settings,\n    \"QUOTES_THUMBNAIL_SIZE\",\n    (50, 50)\n)\n\nclass InspirationalQuote(models.Model):\n    # …\n    def save(self, *args, **kwargs):\n        super(InspirationalQuote, self).save(*args, **kwargs)\n        # generate thumbnail picture version\n        self.create_thumbnail()\n\n    def create_thumbnail(self):\n        if not self.picture:\n            return \"\"\n        file_path = self.picture.name\n        filename_base, filename_ext = os.path.splitext(file_path)\n        thumbnail_file_path = \"%s_thumbnail.jpg\" % filename_base\n        if storage.exists(thumbnail_file_path):\n            # if thumbnail version exists, return its url path\n            return \"exists\"\n        try:\n            # resize the original image and\n            # return URL path of the thumbnail version\n            f = storage.open(file_path, 'r')\n            image = Image.open(f)\n            width, height = image.size\n\n            if width > height:\n                delta = width - height\n                left = int(delta/2)\n                upper = 0\n                right = height + left\n                lower = height\n            else:\n                delta = height - width\n                left = 0\n                upper = int(delta/2)\n                right = width\n                lower = width + upper\n\n            image = image.crop((left, upper, right, lower))\n            image = image.resize(THUMBNAIL_SIZE, Image.ANTIALIAS)\n\n            f_mob = storage.open(thumbnail_file_path, \"w\")\n            image.save(f_mob, \"JPEG\")\n            f_mob.close()\n            return \"success\"\n        except:\n            return \"error\"\n\n    def get_thumbnail_picture_url(self):\n        if not self.picture:\n            return \"\"\n        file_path = self.picture.name\n        filename_base, filename_ext = os.path.splitext(file_path)\n        thumbnail_file_path = \"%s_thumbnail.jpg\" % filename_base\n        if storage.exists(thumbnail_file_path):\n            # if thumbnail version exists, return its URL path\n            return storage.url(thumbnail_file_path)\n        # return original as a fallback\n        return self.picture.url\n```", "```py\n(myproject_env)$ pip install django-crispy-forms\n\n```", "```py\n# conf/base.py or settings.py\nINSTALLED_APPS = (\n    # …\n    \"crispy_forms\",\n)\n# …\nCRISPY_TEMPLATE_PACK = \"bootstrap3\"\n```", "```py\n# bulletin_board/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\n\nTYPE_CHOICES = (\n    ('searching', _(\"Searching\")),\n    ('offering', _(\"Offering\")),\n)\n\n@python_2_unicode_compatible\nclass Bulletin(models.Model):\n    bulletin_type = models.CharField(_(\"Type\"), max_length=20, choices=TYPE_CHOICES)\n\n    title = models.CharField(_(\"Title\"), max_length=255)\n    description = models.TextField(_(\"Description\"),\n        max_length=300)\n\n    contact_person = models.CharField(_(\"Contact person\"),\n        max_length=255)\n    phone = models.CharField(_(\"Phone\"), max_length=200,\nblank=True)\n    email = models.EmailField(_(\"Email\"), blank=True)\n\n    image = models.ImageField(_(\"Image\"), max_length=255,\n        upload_to=\"bulletin_board/\", blank=True)\n\n    class Meta:\n        verbose_name = _(\"Bulletin\")\n        verbose_name_plural = _(\"Bulletins\")\n        ordering = (\"title\",)\n\n    def __str__(self):\n        return self.title\n```", "```py\n    # bulletin_board/forms.py\n    # -*- coding: UTF-8 -*-\n    from django import forms\n    from django.utils.translation import ugettext_lazy as _,\\\n        ugettext\n    from crispy_forms.helper import FormHelper\n    from crispy_forms import layout, bootstrap\n    from .models import Bulletin\n\n    class BulletinForm(forms.ModelForm):\n      class Meta:\n        model = Bulletin\n        fields = [\"bulletin_type\", \"title\", \"description\", \n        \"contact_person\", \"phone\", \"email\", \"image\"]\n\n        def __init__(self, *args, **kwargs):\n          super(BulletinForm, self).__init__(*args, **kwargs)\n\n          self.helper = FormHelper()\n          self.helper.form_action = \"\"\n          self.helper.form_method = \"POST\"\n\n          self.fields[\"bulletin_type\"].widget = \\\n            forms.RadioSelect()\n          # delete empty choice for the type\n          del self.fields[\"bulletin_type\"].choices[0]\n\n          self.helper.layout = layout.Layout(\n            layout.Fieldset(\n              _(\"Main data\"),\n              layout.Field(\"bulletin_type\"),\n              layout.Field(\"title\", \n                css_class=\"input-block-level\"),\n                layout.Field(\"description\", \n                css_class=\"input-blocklevel\",\n                rows=\"3\"),\n              ),\n              layout.Fieldset(\n                _(\"Image\"),\n                layout.Field(\"image\", \n                  css_class=\"input-block-level\"),\n                layout.HTML(u\"\"\"{% load i18n %}\n                  <p class=\"help-block\">{% trans \"Available formats are JPG, GIF, and PNG. Minimal size is 800 × 800 px.\" %}</p>\n                \"\"\"),\n                title=_(\"Image upload\"),\n                css_id=\"image_fieldset\",\n              ),\n              layout.Fieldset(\n                _(\"Contact\"),\n                layout.Field(\"contact_person\",\n                  css_class=\"input-blocklevel\"),\n                layout.Div(\n                  bootstrap.PrependedText(\"phone\",\n                  \"\"\"<span class=\"glyphicon glyphicon-earphone\">\n                  </span>\"\"\", \n                    css_class=\"inputblock-level\"),\n                  bootstrap.PrependedText(\"email\", \"@\",\n                    css_class=\"input-block-level\",\n                    placeholder=\"contact@example.com\"),\n                  css_id=\"contact_info\",\n                ),\n              ),\n              bootstrap.FormActions(\n                layout.Submit(\"submit\", _(\"Save\")),\n              )\n            )\n    ```", "```py\n    {# templates/bulletin_board/change_form.html #}\n    {% extends \"base.html\" %}\n    {% load crispy_forms_tags %}\n\n    {% block content %}\n        {% crispy form %}\n    {% endblock %}\n    ```", "```py\n    # quotes/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    import os\n    from django.shortcuts import get_object_or_404\n    from django.http import FileResponse\n    from django.utils.text import slugify\n    from django.contrib.auth.decorators import login_required\n    from .models import InspirationalQuote\n\n    @login_required(login_url=\"my_login_page\")\n    def download_quote_picture(request, quote_id):\n        quote = get_object_or_404(InspirationalQuote,\n            pk=quote_id)\n        file_name, file_extension = os.path.splitext(\n            quote.picture.file.name)\n        file_extension = file_extension[1:]  # remove the dot\n        response = FileResponse(\n            quote.picture.file,\n            content_type=\"image/%s\" % file_extension\n        )\n        response[\"Content-Disposition\"] = \"attachment;\" \\\n            \" filename=%s---%s.%s\" % (\n            slugify(quote.author)[:100],\n            slugify(quote.quote)[:100],\n            file_extension\n        )\n        return response\n    ```", "```py\n    # quotes/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import patterns, url\n\n    urlpatterns = patterns(\"\",\n        # …\n        url(r'^(?P<quote_id>\\d+)/download/$',\n            \"quotes.views.download_quote_picture\",\n            name=\"download_quote_picture\"\n        ),\n    )\n    ```", "```py\n    # myproject/urls.py\n    # -*- coding: UTF-8 -*-\n    from django.conf.urls import patterns, include, url\n    from django.conf import settings\n    from django.contrib import admin\n    from django.core.urlresolvers import reverse_lazy\n    from django.utils.translation import string_concat\n    from django.utils.translation import ugettext_lazy as _\n    from django.conf.urls.i18n import i18n_patterns\n    from crispy_forms.helper import FormHelper\n    from crispy_forms import layout, bootstrap\n\n    login_helper = FormHelper()\n    login_helper.form_action = reverse_lazy(\"my_login_page\")\n    login_helper.form_method = \"POST\"\n    login_helper.form_class = \"form-signin\"\n    login_helper.html5_required = True\n    login_helper.layout = layout.Layout(\n     layout.HTML(string_concat(\"\"\"<h2 class=\"form-signin-heading\">\"\"\", _(\"Please Sign In\"), \"\"\"</h2>\"\"\")),\n     layout.Field(\"username\", placeholder=_(\"username\")),\n     layout.Field(\"password\", placeholder=_(\"password\")),\n     layout.HTML(\"\"\"<input type=\"hidden\" name=\"next\" value=\"{{ next }}\" />\"\"\"),\n     layout.Submit(\"submit\", _(\"Login\"), css_class=\"btn-lg\"),\n    )\n\n    urlpatterns = i18n_patterns(\"\",\n        # …\n        url(r'login/$', \"django.contrib.auth.views.login\",\n            {\"extra_context\": {\"login_helper\": login_helper}},\n            name=\"my_login_page\"\n        ),\n        url(r'^quotes/', include(\"quotes.urls\")),\n    )\n    ```", "```py\n    {# templates/registration/login.html #}\n    {% extends \"base.html\" %}\n    {% load crispy_forms_tags %}\n\n    {% block stylesheet %}\n        {{ block.super }}<link rel=\"stylesheet\" href=\"{{ STATIC_URL }}site/css/login.css\">\n    {% endblock %}\n\n    {% block content %}\n        <div class=\"container\">\n            {% crispy form login_helper %}\n        </div>\n    {% endblock %}\n    ```", "```py\n    # media/quotes/.htaccess\n    Order deny,allow\n    Deny from all\n    ```", "```py\n    # media/quotes/.htaccess\n    Require all denied\n    ```", "```py\n# movies/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\n\nRATING_CHOICES = (\n    (1, \"\"),\n    (2, \"\"),\n    (3, \"\"),\n    (4, \"\"),\n    (5, \"\"),\n)\n\n@python_2_unicode_compatible\nclass Genre(models.Model):\n    title = models.CharField(_(\"Title\"), max_length=100)\n\n    def __str__(self):\n        return self.title\n\n@python_2_unicode_compatible\nclass Director(models.Model):\n    first_name = models.CharField(_(\"First name\"), max_length=40)\n    last_name = models.CharField(_(\"Last name\"), max_length=40)\n\n    def __str__(self):\n        return self.first_name + \" \" + self.last_name\n\n@python_2_unicode_compatible\nclass Actor(models.Model):\n    first_name = models.CharField(_(\"First name\"), max_length=40)\n    last_name = models.CharField(_(\"Last name\"), max_length=40)\n\n    def __str__(self):\n        return self.first_name + \" \" + self.last_name\n\n@python_2_unicode_compatible\nclass Movie(models.Model):\n    title = models.CharField(_(\"Title\"), max_length=255)\n    genres = models.ManyToManyField(Genre, blank=True)\n    directors = models.ManyToManyField(Director, blank=True)\n    actors = models.ManyToManyField(Actor, blank=True)\n    rating = models.PositiveIntegerField(choices=RATING_CHOICES)\n\n    def __str__(self):\n        return self.title\n```", "```py\n    # movies/forms.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django import forms\n    from django.utils.translation import ugettext_lazy as _\n\n    from .models import Genre, Director, Actor, RATING_CHOICES\n\n    class MovieFilterForm(forms.Form):\n        genre = forms.ModelChoiceField(\n            label=_(\"Genre\"),\n            required=False,\n            queryset=Genre.objects.all(),\n        )\n        director = forms.ModelChoiceField(\n            label=_(\"Director\"),\n            required=False,\n            queryset=Director.objects.all(),\n        )\n        actor = forms.ModelChoiceField(\n            label=_(\"Actor\"),\n            required=False,\n            queryset=Actor.objects.all(),\n        )\n        rating = forms.ChoiceField(\n            label=_(\"Rating\"),\n            required=False,\n            choices=RATING_CHOICES,\n        )\n    ```", "```py\n    # movies/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.shortcuts import render\n    from .models import Genre, Director, Actor\n    from .models import Movie, RATING_CHOICES\n    from .forms import MovieFilterForm\n\n    def movie_list(request):\n        qs = Movie.objects.order_by(\"title\")\n\n        form = MovieFilterForm(data=request.GET)\n\n     facets = {\n     \"selected\": {},\n     \"categories\": {\n     \"genres\": Genre.objects.all(),\n     \"directors\": Director.objects.all(),\n     \"actors\": Actor.objects.all(),\n     \"ratings\": RATING_CHOICES,\n     },\n     }\n\n        if form.is_valid():\n            genre = form.cleaned_data[\"genre\"]\n            if genre:\n                facets[\"selected\"][\"genre\"] = genre\n                qs = qs.filter(genres=genre).distinct()\n\n            director = form.cleaned_data[\"director\"]\n            if director:\n                facets[\"selected\"][\"director\"] = director\n                qs = qs.filter(directors=director).distinct()\n\n            actor = form.cleaned_data[\"actor\"]\n            if actor:\n                facets[\"selected\"][\"actor\"] = actor\n                qs = qs.filter(actors=actor).distinct()\n\n            rating = form.cleaned_data[\"rating\"]\n            if rating:\n                rating = int(rating)\n                facets[\"selected\"][\"rating\"] = (rating, dict(RATING_CHOICES)[rating])\n                qs = qs.filter(rating=rating).distinct()\n\n        # Let's inspect the facets in the console\n        if settings.DEBUG:\n            from pprint import pprint\n            pprint(facets)\n\n        context = {\n            \"form\": form,\n            \"facets\": facets,\n            \"object_list\": qs,\n        }\n        return render(request, \"movies/movie_list.html\",\n            context)\n    ```", "```py\n    {# templates/movies/movie_list.html #}\n    {% extends \"base_two_columns.html\" %}\n    {% load i18n utility_tags %}\n\n    {% block sidebar %}\n    <div class=\"filters panel-group\" id=\"accordion\">\n        <div class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n                <h6 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapseGenres\">\n                        {% trans \"Filter by Genre\" %}\n                    </a>\n                </h6>\n            </div>\n            <div id=\"collapseGenres\" class=\"panel-collapse collapse in\">\n                <div class=\"panel-body\">\n                    <div class=\"list-group\">\n                        <a class=\"list-group-item{% if not facets.selected.genre %} active{% endif %}\" href=\"{% modify_query \"genre\" \"page\" %}\">{% trans \"All\" %}</a>\n                        {% for cat in facets.categories.genres %}\n                            <a class=\"list-group-item{% if facets.selected.genre == cat %} active{% endif %}\" href=\"{% modify_query \"page\" genre=cat.pk %}\">{{ cat }}</a>\n                        {% endfor %}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        <div class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n                <h6 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapseDirectors\">\n                        {% trans \"Filter by Director\" %}\n                    </a>\n                </h6>\n            </div>\n            <div id=\"collapseDirectors\" class=\"panel-collapse collapse\">\n                <div class=\"panel-body\">\n                    <div class=\"list-group\">\n                        <a class=\"list-group-item{% if not facets.selected.director %} active{% endif %}\" href=\"{% modify_query \"director\" \"page\" %}\">{% trans \"All\" %}</a>\n                        {% for cat in facets.categories.directors %}\n                            <a class=\"list-group-item{% if facets.selected.director == cat %} active{% endif %}\" href=\"{% modify_query \"page\" director=cat.pk %}\">{{ cat }}</a>\n                        {% endfor %}\n                    </div>\n                </div>\n            </div>\n        </div>\n\n        {# Analogously by the examples of genres and directors above, add a filter for actors here… #}\n\n        <div class=\"panel panel-default\">\n            <div class=\"panel-heading\">\n                <h6 class=\"panel-title\">\n                    <a data-toggle=\"collapse\" data-parent=\"#accordion\" href=\"#collapseRatings\">\n                        {% trans \"Filter by Rating\" %}\n                    </a>\n                </h6>\n            </div>\n            <div id=\"collapseRatings\" class=\"panel-collapse collapse\">\n                <div class=\"panel-body\">\n                    <div class=\"list-group\">\n                        <a class=\"list-group-item{% if not facets.selected.rating %} active{% endif %}\" href=\"{% modify_query \"rating\" \"page\" %}\">{% trans \"All\" %}</a>\n                        {% for r_val, r_display in facets.categories.ratings %}\n                            <a class=\"list-group-item{% if facets.selected.rating.0 == r_val %} active{% endif %}\" href=\"{% modify_query \"page\" rating=r_val %}\">{{ r_display }}</a>\n                        {% endfor %}\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    {% endblock %}\n\n    {% block content %}\n    <div class=\"movie_list\">\n        {% for movie in object_list %}\n            <div class=\"movie alert alert-info\">\n                <p>{{ movie.title }}</p>\n            </div>\n        {% endfor %}\n    </div>\n    {% endblock %}\n    ```", "```py\n    {# base_two_columns.html #}\n    {% extends \"base.html\" %}\n\n    {% block container %}\n        <div class=\"container\">\n            <div class=\"row\">\n                <div id=\"sidebar\" class=\"col-md-4\">\n                    {% block sidebar %}\n                    {% endblock %}\n                </div>\n                <div id=\"content\" class=\"col-md-8\">\n                    {% block content %}\n                    {% endblock %}\n                </div>\n            </div>\n        </div>\n    {% endblock %}\n    ```", "```py\n    # movies/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.shortcuts import render\n    from django.core.paginator import Paginator, EmptyPage,\\\n        PageNotAnInteger\n\n    from .models import Movie\n    from .forms import MovieFilterForm\n\n    def movie_list(request):\n     paginate_by = 15\n        qs = Movie.objects.order_by(\"title\")\n        # … filtering goes here…\n\n     paginator = Paginator(qs, paginate_by)\n\n     page_number = request.GET.get(\"page\")\n     try:\n     page = paginator.page(page_number)\n     except PageNotAnInteger:\n     # If page is not an integer, show first page.\n     page = paginator.page(1)\n     except EmptyPage:\n     # If page is out of range, show last existing page.\n     page = paginator.page(paginator.num_pages)\n\n        context = {\n            # …\n            \"object_list\": page,\n        }\n        return render(request, \"movies/movie_list.html\", context)\n    ```", "```py\n    {# templates/movies/movie_list.html #}\n    {% extends \"base.html\" %}\n    {% load i18n utility_tags %}\n\n    {% block sidebar %}\n        {# … filters go here… #}\n    {% endblock %}\n\n    {% block content %}\n    <div class=\"movie_list\">\n        {% for movie in object_list %}\n            <div class=\"movie alert alert-info\">\n                <p>{{ movie.title }}</p>\n            </div>\n        {% endfor %}\n    </div>\n\n    {% if object_list.has_other_pages %}\n        <ul class=\"pagination\">\n            {% if object_list.has_previous %}\n                <li><a href=\"{% modify_query page=object_list.previous_page_number %}\">&laquo;</a></li>\n            {% else %}\n                <li class=\"disabled\"><span>&laquo;</span></li>\n            {% endif %}\n            {% for page_number in object_list.paginator.page_range %}\n                {% if page_number == object_list.number %}\n                    <li class=\"active\">\n                        <span>{{ page_number }} <span class=\"sr-only\">(current)</span></span>\n                    </li>\n                {% else %}\n                    <li>\n                        <a href=\"{% modify_query page=page_number %}\">{{ page_number }}</a>\n                    </li>\n                {% endif %}\n            {% endfor %}\n            {% if object_list.has_next %}\n                <li><a href=\"{% modify_query page=object_list.next_page_number %}\">&raquo;</a></li>\n            {% else %}\n                <li class=\"disabled\"><span>&raquo;</span></li>\n            {% endif %}\n        </ul>\n    {% endif %}\n    {% endblock %}\n    ```", "```py\n    # movies/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import patterns, url\n    from .views import MovieListView\n    urlpatterns = patterns(\"\",\n        url(r'^$', MovieListView.as_view(), name=\"movie_list\"),\n    )\n    ```", "```py\n    # movies/views.py\n    # -*- coding: UTF-8 -*-\n    from django.shortcuts import render\n    from django.core.paginator import Paginator, EmptyPage,\\\n        PageNotAnInteger\n    from django.views.generic import View\n\n    from .models import Genre\n    from .models import Director\n    from .models import Actor\n    from .models import Movie, RATING_CHOICES\n    from .forms import MovieFilterForm\n\n    class MovieListView(View):\n        form_class = MovieFilterForm\n        template_name = \"movies/movie_list.html\"\n        paginate_by = 15\n\n        def get(self, request, *args, **kwargs):\n            form = self.form_class(data=request.GET)\n            qs, facets = self.get_queryset_and_facets(form)\n            page = self.get_page(request, qs)\n            context = {\n                \"form\": form,\n                \"facets\": facets,\n                \"object_list\": page,\n            }\n            return render(request, self.template_name, context)\n\n        def post(self, request, *args, **kwargs):\n            return self.get(request, *args, **kwargs)\n\n        def get_queryset_and_facets(self, form):\n            qs = Movie.objects.order_by(\"title\")\n\n            facets = {\n                \"selected\": {},\n                \"categories\": {\n                    \"genres\": Genre.objects.all(),\n                    \"directors\": Director.objects.all(),\n                    \"actors\": Actor.objects.all(),\n                    \"ratings\": RATING_CHOICES,\n                },\n            }\n            if form.is_valid():\n                genre = form.cleaned_data[\"genre\"]\n                if genre:\n                    facets[\"selected\"][\"genre\"] = genre\n                    qs = qs.filter(genres=genre).distinct()\n\n                director = form.cleaned_data[\"director\"]\n                if director:\n                    facets[\"selected\"][\"director\"] = director\n                    qs = qs.filter(\n                        directors=director,\n                    ).distinct()\n\n                actor = form.cleaned_data[\"actor\"]\n                if actor:\n                    facets[\"selected\"][\"actor\"] = actor\n                    qs = qs.filter(actors=actor).distinct()\n\n                rating = form.cleaned_data[\"rating\"]\n                if rating:\n                    facets[\"selected\"][\"rating\"] = (\n                        int(rating),\n                        dict(RATING_CHOICES)[int(rating)]\n                    )\n                    qs = qs.filter(rating=rating).distinct()\n            return qs, facets\n\n        def get_page(self, request, qs):\n            paginator = Paginator(qs, self.paginate_by)\n\n            page_number = request.GET.get(\"page\")\n            try:\n                page = paginator.page(page_number)\n            except PageNotAnInteger:\n                # If page is not an integer, show first page.\n                page = paginator.page(1)\n            except EmptyPage:\n                # If page is out of range,\n                # show last existing page.\n                page = paginator.page(paginator.num_pages)\n            return page\n    ```", "```py\n(myproject_env)$ pip install xhtml2pdf\n\n```", "```py\n# cv/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\n\n@python_2_unicode_compatible\nclass CV(models.Model):\n    first_name = models.CharField(_(\"First name\"), max_length=40)\n    last_name = models.CharField(_(\"Last name\"), max_length=40)\n    email = models.EmailField(_(\"Email\"))\n\n    def __str__(self):\n        return self.first_name + \" \" + self.last_name\n\n@python_2_unicode_compatible\nclass Experience(models.Model):\n    cv = models.ForeignKey(CV)\n    from_date = models.DateField(_(\"From\"))\n    till_date = models.DateField(_(\"Till\"), null=True, blank=True)\n    company = models.CharField(_(\"Company\"), max_length=100)\n    position = models.CharField(_(\"Position\"), max_length=100)\n    skills = models.TextField(_(\"Skills gained\"), blank=True)\n\n    def __str__(self):\n        till = _(\"present\")\n        if self.till_date:\n            till = self.till_date.strftime(\"%m/%Y\")\n        return _(\"%(from)s-%(till)s %(pos)s at %(company)s\") % {\n            \"from\": self.from_date.strftime(\"%m/%Y\"),\n            \"till\": till,\n            \"pos\": self.position,\n            \"company\": self.company,\n        }\n    class Meta:\n        ordering = (\"-from_date\",)\n```", "```py\n    # cv/urls.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf.urls import patterns, url\n\n    urlpatterns = patterns('cv.views',\n        url(r'^(?P<cv_id>\\d+)/pdf/$', \"download_cv_pdf\", name=\"download_cv_pdf\"),\n    )\n    ```", "```py\n    # cv/views.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    try:\n        from cStringIO import StringIO\n    except ImportError:\n        from StringIO import StringIO\n    from xhtml2pdf import pisa\n\n    from django.conf import settings\n    from django.shortcuts import get_object_or_404\n    from django.template.loader import render_to_string\n    from django.http import HttpResponse\n\n    from .models import CV\n\n    def download_cv_pdf(request, cv_id):\n        cv = get_object_or_404(CV, pk=cv_id)\n\n        response = HttpResponse(content_type=\"application/pdf\")\n        response[\"Content-Disposition\"] = \"attachment; \"\\\n            \"filename=%s_%s.pdf\" % (\n                cv.first_name,\n                cv.last_name\n            )\n\n        html = render_to_string(\"cv/cv_pdf.html\", {\n            \"cv\": cv,\n            \"MEDIA_ROOT\": settings.MEDIA_ROOT,\n            \"STATIC_ROOT\": settings.STATIC_ROOT,\n        })\n        pdf = pisa.pisaDocument(\n            StringIO(html.encode(\"UTF-8\")),\n            response,\n            encoding=\"UTF-8\",\n        )\n        return response\n    ```", "```py\n    {# templates/cv/cv_pdf.html #}\n    <!DOCTYPE HTML>\n    <html>\n      <head>\n        <meta charset=\"utf-8\" />\n        <title>My Title</title>\n        <style type=\"text/css\">\n          @page {\n            size: \"A4\";\n            margin: 2.5cm 1.5cm 2.5cm 1.5cm;\n            @frame footer {\n              -pdf-frame-content: footerContent;\n              bottom: 0cm;\n              margin-left: 0cm;\n              margin-right: 0cm;\n              height: 1cm;\n            }\n          }\n          #footerContent {\n            color: #666;\n            font-size: 10pt;\n            text-align: center;\n          }\n          /* … Other CSS Rules go here … */\n\n        </style>\n      </head>\n      <body>\n        <div>\n          <h1>Curriculum Vitae</h1>\n          <table>\n            <tr>\n              <td><p><b>{{ cv.first_name }} {{ cv.last_name }}</b><br />\n                Contact: {{ cv.email }}</p>\n              </td>\n              <td align=\"right\">\n                <img src=\"img/smiley.jpg\" width=\"100\" height=\"100\" />\n              </td>\n            </tr>\n          </table>\n\n          <h2>Experience</h2>\n            <table>\n              {% for experience in cv.experience_set.all %}\n                <tr>\n                  <td valign=\"top\"><p>{{ experience.from_date|date:\"F Y\" }} -\n                    {% if experience.till_date %}\n                    {{ experience.till_date|date:\"F Y\" }}\n                    {% else %}\n                    present\n                    {% endif %}<br />\n                    {{ experience.position }} at {{ experience.company }}</p>\n                  </td>\n                  <td valign=\"top\"><p><b>Skills gained</b><br>\n                    {{ experience.skills|linebreaksbr }}\n                    <br>\n                    <br>\n                  </p>\n                  </td>\n                </tr>\n              {% endfor %}\n            </table>\n        </div>\n        <pdf:nextpage>\n          <div>\n            This is an empty page to make a paper plane.\n          </div>\n          <div id=\"footerContent\">\n            Document generated at {% now \"Y-m-d\" %} |\n            Page <pdf:pagenumber> of <pdf:pagecount>\n          </div>\n      </body>\n    </html>\n    ```", "```py\n# ideas/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nfrom django.db import models\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.core.urlresolvers import reverse\nfrom django.core.urlresolvers import NoReverseMatch\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom utils.models import UrlMixin\nfrom utils.fields import MultilingualCharField, MultilingualTextField\n\n@python_2_unicode_compatible\nclass Category(models.Model):\n    title = MultilingualCharField(_(\"Title\"), max_length=200)\n\n    class Meta:\n        verbose_name = _(\"Idea Category\")\n        verbose_name_plural = _(\"Idea Categories\")\n\n    def __str__(self):\n        return self.title\n\n@python_2_unicode_compatible\nclass Idea(UrlMixin):\n    title = MultilingualCharField(_(\"Title\"), max_length=200)\n    subtitle = MultilingualCharField(_(\"Subtitle\"), max_length=200, blank=True)\n    description = MultilingualTextField(_(\"Description\"),\n        blank=True)\n    is_original = models.BooleanField(_(\"Original\"))\n    categories = models.ManyToManyField(Category,\n        verbose_name=_(\"Categories\"), blank=True,\n        related_name=\"ideas\")\n\n    class Meta:\n        verbose_name = _(\"Idea\")\n        verbose_name_plural = _(\"Ideas\")\n\n    def __str__(self):\n        return self.title\n\n    def get_url_path(self):\n        try:\n            return reverse(\"idea_detail\", kwargs={\"id\": self.pk})\n        except NoReverseMatch:\n            return \"\"\n```", "```py\n# quotes/models.py\n# -*- coding: UTF-8 -*-\nfrom __future__ import unicode_literals\nimport os\nfrom django.db import models\nfrom django.utils.timezone import now as timezone_now\nfrom django.utils.translation import ugettext_lazy as _\nfrom django.utils.encoding import python_2_unicode_compatible\nfrom django.conf import settings\nfrom django.core.urlresolvers import reverse\nfrom django.core.urlresolvers import NoReverseMatch\n\nfrom utils.models import UrlMixin\n\ndef upload_to(instance, filename):\n    now = timezone_now()\n    filename_base, filename_ext = os.path.splitext(filename)\n    return 'quotes/%s%s' % (\n        now.strftime(\"%Y/%m/%Y%m%d%H%M%S\"),\n        filename_ext.lower(),\n    )\n\n@python_2_unicode_compatible\nclass InspirationalQuote(UrlMixin):\n    author = models.CharField(_(\"Author\"), max_length=200)\n    quote = models.TextField(_(\"Quote\"))\n    picture = models.ImageField(_(\"Picture\"), upload_to=upload_to,\n        blank=True, null=True)\n    language = models.CharField(_(\"Language\"), max_length=2,\n        blank=True, choices=settings.LANGUAGES)\n\n    class Meta:\n        verbose_name = _(\"Inspirational Quote\")\n        verbose_name_plural = _(\"Inspirational Quotes\")\n\n    def __str__(self):\n        return self.quote\n\n    def get_url_path(self):\n        try:\n            return reverse(\"quote_detail\", kwargs={\"id\": self.pk})\n        except NoReverseMatch:\n            return \"\"\n    # …\n    def title(self):\n        return self.quote\n```", "```py\n(myproject_env)$ pip install django-crispy-forms\n(myproject_env)$ pip install django-haystack\n(myproject_env)$ pip install whoosh\n\n```", "```py\n    # search/multilingual_whoosh_backend.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf import settings\n    from django.utils import translation\n    from haystack.backends.whoosh_backend import \\\n        WhooshSearchBackend, WhooshSearchQuery, WhooshEngine\n    from haystack import connections\n    from haystack.constants import DEFAULT_ALIAS\n\n    class MultilingualWhooshSearchBackend(WhooshSearchBackend):\n        def update(self, index, iterable, commit=True,\n            language_specific=False):\n            if not language_specific and \\\n            self.connection_alias == \"default\":\n                current_language = (translation.get_language()\n                    or settings.LANGUAGE_CODE)[:2]\n                for lang_code, lang_name in settings.LANGUAGES:\n                    using = \"default_%s\" % lang_code\n                    translation.activate(lang_code)\n                    backend = connections[using].get_backend()\n                    backend.update(index, iterable, commit,\n                        language_specific=True)\n                translation.activate(current_language)\n            elif language_specific:\n                super(MultilingualWhooshSearchBackend, self).\\\n                    update(index, iterable, commit)\n\n    class MultilingualWhooshSearchQuery(WhooshSearchQuery):\n        def __init__(self, using=DEFAULT_ALIAS):\n            lang_code = translation.get_language()[:2]\n            using = \"default_%s\" % lang_code\n            super(MultilingualWhooshSearchQuery, self).\\\n                __init__(using)\n\n    class MultilingualWhooshEngine(WhooshEngine):\n        backend = MultilingualWhooshSearchBackend\n        query = MultilingualWhooshSearchQuery\n    ```", "```py\n    # search/search_indexes.py\n    # -*- coding: UTF-8 -*-\n    from __future__ import unicode_literals\n    from django.conf import settings\n    from django.utils.translation import get_language\n    from haystack import indexes\n    from ideas.models import Idea\n    from quotes.models import InspirationalQuote\n\n    class IdeaIndex(indexes.SearchIndex, indexes.Indexable):\n        text = indexes.CharField(document=True)\n\n        def get_model(self):\n            return Idea\n\n        def index_queryset(self, using=None):\n            \"\"\"Used when the entire index for model\n                is updated.\"\"\"\n            return self.get_model().objects.all()\n\n        def prepare_text(self, obj):\n            # this will be called for each language / backend\n            return \"\\n\".join((\n                obj.title,\n                obj.subtitle,\n                obj.description,\n                \"\\n\".join([cat.title\n                    for cat in obj.categories.all()\n                ]),\n            ))\n\n    class InspirationalQuoteIndex(indexes.SearchIndex,\n        indexes.Indexable):\n        text = indexes.CharField(document=True)\n\n        def get_model(self):\n            return InspirationalQuote\n\n        def index_queryset(self, using=None):\n            \"\"\"Used when the entire index for model\n                is updated.\"\"\"\n            if using and using != \"default\":\n                lang_code = using.replace(\"default_\", \"\")\n            else:\n                lang_code = settings.LANGUAGE_CODE[:2]\n            return self.get_model().objects.filter(language=lang_code)\n\n        def prepare_text(self, obj):\n            # this will be called for each language / backend\n            return \"\\n\".join((\n                obj.author,\n                obj.quote,\n            ))\n    ```", "```py\n    INSTALLED_APPS = (\n        # …\n        # third party\n        \"crispy_forms\",\n        \"haystack\",\n        # project-specific\n        \"quotes\",\n        \"utils\",\n        \"ideas\",\n        \"search\",\n    )\n    LANGUAGE_CODE = \"en\"\n    LANGUAGES = (\n        (\"en\", \"English\"),\n        (\"de\", \"Deutsch\"),\n        (\"fr\", \"Français\"),\n        (\"lt\", \"Lietuvių kalba\"),\n    )\n    CRISPY_TEMPLATE_PACK = \"bootstrap3\"\n    HAYSTACK_CONNECTIONS = {\n        \"default\": {\n            \"ENGINE\": \"search.multilingual_whoosh_backend.\"\\\n                \"MultilingualWhooshEngine\",\n            \"PATH\": os.path.join(PROJECT_PATH, \"myproject\",\n                \"tmp\", \"whoosh_index_en\"),\n        },\n        \"default_en\": {\n            \"ENGINE\": \"search.multilingual_whoosh_backend.\"\\\n                \"MultilingualWhooshEngine\",\n            \"PATH\": os.path.join(PROJECT_PATH, \"myproject\",\n                \"tmp\", \"whoosh_index_en\"),\n        },\n        \"default_de\": {\n            \"ENGINE\": \"search.multilingual_whoosh_backend.\"\\\n                \"MultilingualWhooshEngine\",\n            \"PATH\": os.path.join(PROJECT_PATH, \"myproject\",\n                \"tmp\", \"whoosh_index_de\"),\n        },\n        \"default_fr\": {\n            \"ENGINE\": \"search.multilingual_whoosh_backend.\"\\\n                \"MultilingualWhooshEngine\",\n            \"PATH\": os.path.join(PROJECT_PATH, \"myproject\",\n                \"tmp\", \"whoosh_index_fr\"),\n        },\n        \"default_lt\": {\n            \"ENGINE\": \"search.multilingual_whoosh_backend.\"\\\n                \"MultilingualWhooshEngine\",\n            \"PATH\": os.path.join(PROJECT_PATH, \"myproject\",\n                \"tmp\", \"whoosh_index_lt\"),\n        },\n    }\n    ```", "```py\n    # myproject/urls.py\n    # -*- coding: UTF-8 -*-\n    from django.conf.urls import patterns, include, url\n    from django.core.urlresolvers import reverse_lazy\n    from django.utils.translation import string_concat\n    from django.utils.translation import ugettext_lazy as _\n    from django.conf.urls.i18n import i18n_patterns\n\n    from crispy_forms.helper import FormHelper\n    from crispy_forms import layout, bootstrap\n    from haystack.views import SearchView\n\n    class CrispySearchView(SearchView):\n        def extra_context(self):\n            helper = FormHelper()\n            helper.form_tag = False\n            helper.disable_csrf = True\n            return {\"search_helper\": helper}\n\n    urlpatterns = i18n_patterns('',\n        # …\n        url(r'^search/$', CrispySearchView(),\n            name='haystack_search'),\n        # …\n    )\n    ```", "```py\n    {# templates/search/search.html #}\n    {% extends \"base.html\" %}\n    {% load i18n crispy_forms_tags utility_tags %}\n\n    {% block content %}\n        <h2>{% trans \"Search\" %}</h2>\n        <form method=\"get\" action=\"{{ request.path }}\">\n            <div class=\"well clearfix\">\n                {% crispy form search_helper %}\n                <p class=\"pull-right\">\n                    <input class=\"btn btn-primary\" type=\"submit\" value=\"Search\">\n                </p>\n            </div>\n        </form>\n\n        {% if query %}\n            <h3>{% trans \"Results\" %}</h3>\n\n            {% for result in page.object_list %}\n                <p>\n                    <a href=\"{{ result.object.get_url_path }}\">\n                        {{ result.object.title }}\n                    </a>\n                </p>\n            {% empty %}\n                <p>{% trans \"No results found.\" %}</p>\n            {% endfor %}\n\n            {% if page.has_previous or page.has_next %}\n                <nav>\n                    <ul class=\"pager\">\n                        <li class=\"previous\">\n                            {% if page.has_previous %}<a href=\"{% modify_query page=page.previous_page_number %}\">{% endif %}\n                                <span aria-hidden=\"true\">&laquo;</span>\n                            {% if page.has_previous %}</a>{% endif %}\n                        </li>\n                        <li class=\"next\">\n                            {% if page.has_next %}<a href=\"{% modify_query page=page.next_page_number %}\">{% endif %}\n                                <span aria-hidden=\"true\">&raquo;</span>\n                            {% if page.has_next %}</a>{% endif %}\n                        </li>\n                    </ul>\n                </nav>\n            {% endif %}\n        {% endif %}\n    {% endblock %}\n    ```", "```py\n    (myproject_env)$ python manage.py rebuild_index --noinput\n\n    ```"]