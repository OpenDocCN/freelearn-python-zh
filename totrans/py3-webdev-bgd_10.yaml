- en: Chapter 10. Customizing the CRM Application
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this final chapter, we will add functionality to our framework to allow for
    some finishing touches.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: 'Specifically, we will see:'
  prefs: []
  type: TYPE_NORMAL
- en: What is needed to enhance the user interface to use the sort and filter capabilities
    in the framework
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How we can provide the end user with the means to customize an application without
    the need to program
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to use these customizations to enhance the display of items and list of
    items
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: How to enhance the stored information with information from external sources
    such as Google Maps
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Time for action sorting
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When we implemented the `Browse` class in [Chapter 8](ch08.html "Chapter 8. Managing
    Customer Relations"), *Managing Customer Relations*, together with the underlying
    functionality in the `listids()` method of the `AbstractEntity` class, we already
    took care of sorting and filtering.
  prefs: []
  type: TYPE_NORMAL
- en: 'We did not yet allow for any user interaction to make it actually possible
    to sort the list of entities shown. What was missing was the JavaScript code and
    some CSS to make this happen. Take a look at the following screenshot and notice
    the small arrow icons next to some headers on top of the list of accounts:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action sorting](img/3746_10_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You can try the sort options for yourself when you run `crm2.py`.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking once on a column marked with the small double arrows will sort the
    list on that specific column in ascending order. The header will change its background
    color to indicate that the list is now sorted and the small icon will change into
    a single up arrow.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking it again will sort the list in descending order and this will be indicated
    by a small icon of a downward pointing arrow. A final click will render the list
    of items unsorted, as clicking the reset button will (not shown).
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'This sorting behavior is implemented by a few small parts:'
  prefs: []
  type: TYPE_NORMAL
- en: jQuery click handlers associated with the table headers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some CSS to style those headers with suitable icons
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Minor changes to the Python code that produces the table to make it simpler
    to track the sorting state in the browser.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, let's see what has to be added to the JavaScript (the complete file is
    available as `browse.js):`
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/browse.js**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Installing the click handlers is straightforward in itself, but what they have
    to accomplish is a little complicated.
  prefs: []
  type: TYPE_NORMAL
- en: The click handler must first determine which column will be used as the sort
    key. The element that is clicked on is available to the handler as `this` and
    this will give us access to a`<div>` element within the header that contains the
    column's name. This`<div>` element is not shown because its `display` attribute
    will be set to `none`. It is added because we need access to the column's canonical
    name. The`<th>` element itself contains just the display name of the column, which
    may be different from its canonical name.
  prefs: []
  type: TYPE_NORMAL
- en: 'This sort key will have to be passed to the application server and to this
    end we will use the machinery already in place: if we trigger submission of the
    form with the navigation buttons and make sure the proper sort parameters are
    passed along, we''re almost there. How can this be accomplished?'
  prefs: []
  type: TYPE_NORMAL
- en: jQuery provides convenient methods to insert new HTML elements into the existing
    markup (highlighted). From the name of the column, we construct a suitable value
    by appending either `asc` or `desc` to it, separated by a comma and use this as
    the value of a new hidden input element with a name of `sortorder` and insert
    this into the first`<form>` element with the `append()` method. The first form
    in the page is the form element containing the navigation buttons.
  prefs: []
  type: TYPE_NORMAL
- en: Because these same types of hidden`<input>` elements are used to maintain state
    when the user pages through the list of items, we first remove any`<input>` elements
    with a `name` attribute equal to `sortorder` to make sure these elements reflect
    the newly selected sort order and not any old one. The removal is accomplished
    by the aptly named `remove()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The final step is to submit the form. We could trigger the submit event itself
    but because we have several buttons with a `type` attribute equal to `submit`,
    we have to be more specific.
  prefs: []
  type: TYPE_NORMAL
- en: It is not possible to trigger a `submit` event on a button, only on a form,
    but it is possible to trigger the `click` event on a button, thus mimicking the
    user interaction. Once the `click` event is triggered on the button with the `name`
    attribute of `first`, the form is submitted together with all its`<input>` elements,
    even hidden ones, including the new or replaced ones that indicate the sort order.
  prefs: []
  type: TYPE_NORMAL
- en: The handler for a`<th>` element that is already sorted in ascending order and
    marked by a `sorted-asc` class is almost identical. The only change we make is
    that the value of the hidden`<input>` element with `name=sortorder` is the column
    name with a `,desc` suffix instead of an `,asc` suffix.
  prefs: []
  type: TYPE_NORMAL
- en: Clicking on the`<th>` element when it is already sorted in descending order
    will cycle back to showing the unsorted state, so this click handler is even simpler
    as it just triggers the click handler of the clear button, which will result in
    an unsorted list.
  prefs: []
  type: TYPE_NORMAL
- en: The changes in the `index()` method in the `Browse` class are as follows (full
    code available as `browse.py):`
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/browse.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: The Python code in our application barely has to change to accommodate this
    way of interaction. We merely adorn the`<th>` element of a column with a class
    that indicates the state of sorting.
  prefs: []
  type: TYPE_NORMAL
- en: It's either `notsorted, sorted-asc`, or `sorted-desc`. We also insert a`<div>`
    element to hold the true name of the column and an empty`<span>` element flagged
    with suitable jQuery UI icon classes to hold the icons that signal the sorting
    state (highlighted).
  prefs: []
  type: TYPE_NORMAL
- en: The `sortorder` list holds a number of tuples, each with the name of the column
    to sort as the first element and either `asc` or `desc` as the second element.
    This second element is used as the index into a dictionary that maps `asc` to
    `n` and `desc` to `s`, resulting in choosing either a `ui-icon-triangle-1-n` or
    a `ui-icon-triangle-1-s` class. Appending these classes together with a `ui-icon`
    class is all we need to let the jQuery UI stylesheets render our`<span>` element
    with a meaningful icon.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Many arrow-like icons, available in jQuery UI, follow a naming pattern similar
    to those for the small triangles here. The final part indicates a compass direction
    (here `n` for north, or upward) and the number indicates how many arrowheads are
    depicted in the icon (here just one, but there are many double-headed variants).
  prefs: []
  type: TYPE_NORMAL
- en: 'The resulting HTML for a column named `time` that is currently sorted in ascending
    order, would look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'Besides the icon, we add some additional styles to `base.css` to make the headers
    more visible:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/base.css**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: The table headers themselves are merely styled with a light gray color, but
    floating the`<span>` element that will hold the icon to the right is important,
    otherwise it would move below the text in the column header instead of the side.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action filtering
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Almost the same approach we used for sorting can be used for filtering as well,
    only this time it is not a single click on a column header that does the trick,
    but we must provide the user with a way to enter the filter values. Take a look
    at the following screenshot or filter the data yourself by running `crm2.py` again:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action filtering](img/3746_10_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you insert values in any of the input fields below the columns in the table
    and click on the filter button (the one with the magnifying glass icon), the list
    of items to show is reduced to those items that match the filter values. Note
    that sorting and filtering may be combined and that clicking the clear button
    will remove both sorting and filtering settings.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s have a look at the JavaScript code:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/browse.js**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: Most of the work is done in the click handler of the search button. When the
    search button is clicked, we have to construct hidden`<input>` elements in the
    first form with a `name` attribute equal to `pattern` because it is those hidden
    filter inputs that will be passed to the server as arguments to the action URL
    when we trigger a submit of the form.
  prefs: []
  type: TYPE_NORMAL
- en: Note the second argument to the jQuery function ($) that selects an`<input>`
    element (highlighted). Both the visible`<input>` elements provided for the user
    to enter pattern values and the hidden ones in the form containing the navigation
    buttons have the same `name` attribute (pattern). We do not want to remove the
    visible ones as they contain the pattern values we are interested in. Therefore,
    we restrict the selection to the context of the first form, which is passed as
    the second argument.
  prefs: []
  type: TYPE_NORMAL
- en: After this, we are left with just the visible`<input>` elements which we iterate
    over with the `.each()` method. We collect both, the value of the`<input>` element
    and the content of its next sibling, which will be a (hidden)`<span>` element
    containing the true name of the column to filter. Together, these are used to
    construct a new hidden`<input>` element that is appended to the form that will
    be submitted.
  prefs: []
  type: TYPE_NORMAL
- en: After the elements are inserted, we submit this form by triggering the click
    handler of the submit button with the `name` attribute equal to `first`.
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/browse.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'The only changes needed in the Python part of our web application are the insertion
    of suitable`<input>` elements that are initialized with the current pattern values
    to give a visible feedback to the user. The resulting HTML for a column that is
    currently filtered on the value ABC might look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: Customization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: No matter how well designed and elaborate your application is, there is always
    more functionality that the user wants from it. Of course, with a proper framework
    in place and your code well documented, changes should not be a big problem, but
    on the other hand, you wouldn't want to restart an application just because some
    minor customizations are needed.
  prefs: []
  type: TYPE_NORMAL
- en: Many requests regarding an application will be concerned with the usability
    of the user interface, for example, different behavior of widgets or some additional
    features with regard to the information shown, like spell-checking entered text,
    finding stock market information related to a company shown, or the current exchange
    rate of a value on screen in a different currency. Quite a few companies including
    Microsoft, Yahoo!, and Google offer all sorts of free API's that may be used to
    enhance the display of values.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action customizing entity displays
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Say we want to offer the end user the possibility to locate an address on Google
    Maps by simply clicking a button next to an address. Run `crmcustomize.py` and
    add a new address or edit an existing address. The edit/add screen will look similar
    to this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action customizing entity displays](img/3746_10_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you click on the **Map** button, a new window will open, showing a map
    of that address as long as Google Maps was able to find it.
  prefs: []
  type: TYPE_NORMAL
- en: 'This functionality was added by the end user without the need to restart the
    server. Notice that in the opening screen, we have a new menu, **Customize**.
    If that menu is selected, we get a familiar looking interface showing a list of
    customizations added for different entities. If we double-click the one for `Address`
    with the Google Maps description, we get an edit screen, as shown in the following
    illustration:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action customizing entity displays](img/3746_10_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: A quick glance will show that the customization itself is simply HTML mixed
    with some JavaScript that is added to the markup produced by the application each
    time we open an edit or add screen for an `Address` entity.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: It might not always be a good idea to allow any end user to customize an application.
    You might want to restrict some or all of the customization options to a subset
    of end users. Role-based access control is then again a suitable way to administer
    privileges.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let''s first have a look at the customization itself to get a feel of what
    can be accomplished. The code consists of a few lines of HTML and an embedded
    piece of JavaScript:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/customization.html**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: Because our application itself relies on jQuery, any customization code may
    use this library as well, so after we have defined a suitable button, we add a
    click handler to this button (highlighted) that constructs a Google Maps URL from
    the values of several`<input>` elements that will be present on the edit or add
    page of an `Address`, notably `address, city`, and `country`. This URL is then
    passed the `window.open()` method to open a new screen or tab with the results
    of this query.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: Even better results may be obtained when the Google Maps API is used see [http://code.google.com/intl/nl/apis/maps/documentation/javascript](http://code.google.com/intl/nl/apis/maps/documentation/javascript).
  prefs: []
  type: TYPE_NORMAL
- en: What do we need to change in our framework to allow for this simple end user
    customization?
  prefs: []
  type: TYPE_NORMAL
- en: 'We need several related components to make this work:'
  prefs: []
  type: TYPE_NORMAL
- en: The `Display` class needs to be adapted to produce the custom code suitable
    for the instance that is shown.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need some way of storing the customization in the database together with
    the rest of the application.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We need to allow a way to edit these customizations.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Let's look at these requirements in detail. The most important part is a way
    to store this information. Like we did for role-based access control, we can actually
    use our framework again; this time by defining a `custom` class. This `custom`
    class will create a `DisplayCustomization` class and provide access to it for
    all entities derived from the `AbstractEntity` class. The changes needed in the
    entity module are modest (the full code is available in `rbacentity.py):`
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/rbacentity.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: Now that we have access to this storage for customization, any application can
    use it, but it also has to provide a way to let the application user edit these
    customizations. This entails defining a `Browse` class and adding a link to provide
    access to it. This is how it was done in the `crmcustomize` application, shown
    in the example (relevant changes only, full code available in `crmcustomize.py):`
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/crmcustomize.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The final step is to enhance the display module with the means to retrieve
    and deliver these customizations. This is done by adding a few lines to the end
    of the `index()` method, as shown:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/display.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Retrieving is straightforward enough and we actually retrieve two bits of customization:
    one for the specific entity we are showing and one for the customization code
    that is relevant for all entities. The user can add such customization with a
    special entity name of * (a single asterisk character). By putting the general
    customizations first in the markup we deliver, it is possible to override anything
    that is provided for the general case with customizations for the specific entities.'
  prefs: []
  type: TYPE_NORMAL
- en: There is a bit of trickery needed elsewhere in the code of the `Display` class,
    however. Because the customization code may consist of HTML, including`<script>`
    elements containing JavaScript and`<style>` elements containing CSS, we might
    run into trouble when we display the forms to edit the customization code as these
    forms are HTML themselves. We, therefore, need some way to escape this code to
    prevent the content of the input box from being interpreted as HTML.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is accomplished in the following way (the relevant changes to the `Attribute`
    class are shown):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/rbacentity.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The `Attribute` class provided in the entity module is extended to take an extra
    `htmlescape` parameter. If we set this to `True`, we indicate that the contents
    of this attribute should be escaped prior to showing it in a page.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `MetaEntity` class will have to be extended as well to act upon these new
    features in the `Attribute` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/rbacentity.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The `MetaEntity` class is changed to store any `htmlescape` attributes in the
    `htmlescape` class attribute, a dictionary indexed by the attribute name.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, we can create new entities with attributes marked for escape,
    but the `Display` class itself has to act on this information. We therefore add
    the following lines to the `index()` method of the `Display` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/display.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: In the `index()` method of the `Display` class, before constructing an`<input>`
    element we can now check this `htmlescape` dictionary to see if we should escape
    the value of the attribute, and if so, use the `escape()` function provided in
    Python's `xml.sax.saxutils` module to convert any characters that might interfere.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: '**A note of caution:**'
  prefs: []
  type: TYPE_NORMAL
- en: Allowing people to customize an application with HTML and JavaScript carries
    an inherent risk. When we developed a wiki application, we restricted the allowed
    input on pages by scrubbing the input of unwanted HTML. If you are serious about
    security (and you should be!), you have to think about what you will allow for
    customizations as well, especially to prevent cross-site scripting (XSS). Check,
    for example, [http://www.owasp.org/](http://www.owasp.org/) for more on this and
    other security subjects.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action customizing entity lists
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Of course, if we offer the user the opportunity to customize the display of
    *individual* entities, it makes sense to offer the same functionality for lists
    of entities. If you run `crm4.py` and click on the **Contacts** menu item, you
    will see a list as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action customizing entity lists](img/3746_10_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: You will notice that in the column containing the telephone numbers, those beginning
    with a plus sign are shown in a bold font. This will give a visible hint that
    this is probably a foreign number that needs some special code on your telephone
    switch.
  prefs: []
  type: TYPE_NORMAL
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The customization itself is a small piece of JavaScript that is inserted at
    the end of the page that shows the list of contacts:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/customizationexample3.html**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: It uses jQuery to iterate over all`<td>` elements, which is the fourth child
    of their parent (a`<tr>` element, code highlighted). If the text contained in
    that element matches something that begins with optional whitespace and a plus
    sign (the regular expression itself is defined in the first line of the script),
    we set the `font-weight` CSS attribute of that element to `bold`.
  prefs: []
  type: TYPE_NORMAL
- en: Just as with the customization of `Display`, we need to add some way to store
    the customizations. The alterations to the `custom` class in the entity module
    are straightforward and copy the pattern set for `Display` (the complete code
    is available in `rbacentity.py):`
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/rbacentity.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The definition of the `Browse` class in `browse.py` needs to be extended as
    well to retrieve and deliver the customizations (shown are the relevant lines
    from `browse.py):`
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/browse.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'And the final step is to provide the user with a link to edit the customizations.
    This is done in the main application (available as `crm4.py)` by adding these
    lines, again following the pattern set for the display customizations (the lines
    relevant for the browse customizations are highlighted):'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/crm4.py**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: We are, of course, not restricted to actions on the client-side only. As we
    may utilize all the AJAX capabilities of jQuery, we can do quite elaborate things.
  prefs: []
  type: TYPE_NORMAL
- en: Our entity browser already has the functionality to mark a row as selected if
    we click it a single time. However, we did not implement any useful action to
    go with this selection.
  prefs: []
  type: TYPE_NORMAL
- en: When we first implemented the `Display` class, we added a `delete()` method
    and exposed it to the CherryPy engine. We do not make use of this method in any
    way. Now that we can customize the entity browser, we can correct this and implement
    some functionality to add a button that when clicked will delete all selected
    entries. Mind you, it probably makes more sense to provide such basic functionality
    in a real application from the start, but it does show what is possible.
  prefs: []
  type: TYPE_NORMAL
- en: Time for action adding a delete button
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Run `crm4.py` once more, and in the **Customize List** menu, add an item that
    applies to all entities (and hence is marked as ''*'') as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action adding a delete button](img/3746_10_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If we now open, for example, the list of contacts, we see a new button with
    a trashcan icon:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Time for action adding a delete button](img/3746_10_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: What just happened?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The customization we added consists of some HTML to define a`<button>` element
    and some JavaScript to render it as a nice trashcan button and to act on a click:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Chapter10/customizationexample4.html**'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The click handler fetches the `action` attribute from the last form in the list
    of entities (highlighted). This form holds the add button and this `action` attribute
    will therefore point to the URL serviced by the `index()` method of a `Display`
    instance. We simply add `delete` to it to make it point to the URL that will be
    serviced by the `delete()` method.
  prefs: []
  type: TYPE_NORMAL
- en: The next step is to iterate over all`<tr>` elements with a `selected` class
    and use jQuery's `get()` method to fetch the URL with the `id` attribute from
    the`<tr>` element added as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we have to redisplay the list of entities to show the effects of the
    deletion. If the list was filtered and/or sorted, we would like to retain that,
    but we still have to remove the hidden`<input>` element that holds the `cacheid`,
    otherwise we would be presenting the old list. After removing it, we trigger the
    click handler on the first button to initiate a reload.
  prefs: []
  type: TYPE_NORMAL
- en: Like almost every jQuery method, the `click()` method returns the selected elements
    it was invoked on, so we can chain a `button()` method to adorn our button element
    with a proper icon.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This final chapter was all about polishing up our CRM application. We enhanced
    the user interface to utilize the sort and filter features of the underlying framework,
    reused the framework itself to store and manage user customizations, and showed
    how powerful these customizations can be by enhancing the display of items and
    list of items by retrieving data from Google Maps.
  prefs: []
  type: TYPE_NORMAL
- en: Appendix A. References to Resources
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Without repeating each and every reference given in the book, this appendix
    lists a number of resources that give good and comprehensive information on various
    subjects of interest to people building web applications.
  prefs:
  - PREF_BQ
  type: TYPE_NORMAL
- en: Good old offline reference books
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Sometimes it''s nice to leave the keyboard and just relax with a book (or e-reader)
    and do some reading about our favorite subjects. The following small selection
    of books is reference work I pick up regularly (some ISBNs may reflect the e-book
    version):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Especially for people familiar with Python, having some good books around about
    JavaScript and the jQuery libraries is very convenient. The following three books
    are good starters:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Learning JavaScript, Second Edition, Shelley Powers, O''Reilly, 978-0-596-52187-5**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Comprehensive introduction to JavaScript basics.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**jQuery Cookbook, Cody Lindley, O''Reilly, 978-0-596-15977-1**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A large selection of practical examples of how to solve common requirements
    with jQuery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**jQuery UI 1.7, Dan Wellman, Packt, 978-1-847199-72-0**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A step-by-step explanation of all the functionality of the jQuery UI library,
    including advanced features like drag-and-drop.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Python has very good documentation online. Especially the coverage of the standard
    modules distributed with Python is excellent, but to get a thorough insight into
    the language itself and the features added in version 3, this book is a good start:
    **Programming in Python 3, Mark Summerfield, Addison Wesley, 978-0-32168056-3**'
  prefs: []
  type: TYPE_NORMAL
- en: 'All of the following books cover Python subjects that play an important role
    in this book:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Python Testing Beginner''s Guide, Daniel Arbuckle, Packt, 978-1847198-84-6**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Testing doesn't have to be difficult and this book shows why.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**CherryPy Essentials, Sylvain Hellegouarch, Packt, 978-1904811-84-8**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The CherryPy application server that we use extensively in the examples in this
    book is capable of much more. Written by its primary developer, this book covers
    all the features and gives practical examples of some web applications as well.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Using SQLite, Jay A. Kreibich, O''Reilly, 978-0-596-52118-9**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book shows what SQLite is capable of and is even a good introduction to
    database design and the use of SQL. Not Python-specific (SQLite is used in many
    more places than Python alone).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Mastering Regular Expressions, Third Edition, O''Reilly, 978-0-596-52812-6**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This book is everything there is to know about regular expressions. It's mostly
    not Python-specific, but as the regular expression library in Python closely resembles
    the one in Perl, almost all examples can be used as is in Python.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**CSS Mastery, Andy Budd, Friends of Ed, 978-159059-614-2**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Not all style issues are covered by jQuery UI of course and CSS can be tricky.
    This book is one of the most readable ones I've found.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Additional websites, wikis, and blogs
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Additional information on the tools and resources used in the book can be found
    online.
  prefs: []
  type: TYPE_NORMAL
- en: Tools and frameworks
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://www.cherrypy.org/](http://www.cherrypy.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The pure Python application server used in the examples in this book.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://projects.apache.org/projects/http_server.html](http://projects.apache.org/projects/http_server.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Apache is much more than just a web server, but this links to this webserver
    workhorse directly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://jquery.com/](http://jquery.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://jqueryui.com/](http://jqueryui.com/%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: All about the JavaScript libraries used throughout this book to spice up the
    user interface.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.prototypejs.org/](http://www.prototypejs.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.sencha.com/products/extjs/](http://www.sencha.com/products/extjs/%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://mootools.net/](http://mootools.net/%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://dojotoolkit.org/](http://dojotoolkit.org/)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Possible alternatives to the jQuery/jQuery UI libraries. Each has its own strengths
    and weaknesses.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://sqlite.org/](http://sqlite.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://wiki.python.org/moin/DatabaseInterfaces](http://wiki.python.org/moin/DatabaseInterfaces)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The home of the embedded database engine bundled with Python and a list of alternative
    database engines that work with Python.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.aminus.net/dejavu](http://www.aminus.net/dejavu)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.djangoproject.com/](http://www.djangoproject.com/%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.sqlalchemy.org/](http://www.sqlalchemy.org/%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://elixir.ematia.de/trac/](http://elixir.ematia.de/trac/%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Some quality object relational mappers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://subversion.apache.org/](http://subversion.apache.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://git-scm.com/](http://git-scm.com/%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Both good! Widely used version management tools.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://code.google.com/apis/libraries/devguide.html](http://code.google.com/apis/libraries/devguide.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.asp.net/ajaxlibrary/cdn.ashx](http://www.asp.net/ajaxlibrary/cdn.ashx%20)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Content delivery frameworks may reduce the load on your own web server significantly.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://pypi.python.org/pypi](http://pypi.python.org/pypi)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Python package index. Lists thousands of packages ready for use with Python.
    Check this first before reinventing the wheel.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.datatables.net/](http://www.datatables.net/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[http://www.appelsiini.net/projects/jeditable](http://www.appelsiini.net/projects/jeditable)'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Two very capable jQuery plugins. Both are excellent examples of how to extend
    jQuery.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://getfirebug.com/](http://getfirebug.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An extension for the Firefox browser. Invaluable when debugging web applications.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://seleniumhq.org](http://seleniumhq.org)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A tool to test user interfaces/web pages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://www.owasp.org/index.php/Main_Page](http://www.owasp.org/index.php/Main_Page)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Securing your application is very important. On this site, you will find information
    about general principles as well as specific attack patterns (and their remedies).
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Newsfeeds
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[http://planet.python.org/](http://planet.python.org/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A large collection of blogs about Python.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[http://michelanders.blogspot.com/](http://michelanders.blogspot.com/)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The author's blog about writing web applications in Python.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: Appendix B. Pop Quiz Answers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Chapter 2, Creating a Simple Spreadsheet
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Serving content with CherryPy
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer:'
  prefs: []
  type: TYPE_NORMAL
- en: Rename the `index()` method to `content()`
  prefs: []
  type: TYPE_NORMAL
- en: Remember that in order to serve the content referred to by a URL such as [http://127.0.0.1/content](http://127.0.0.1/content),
    CherryPy looks for a method named `content()` in the object instance passed to
    the `quickstart()` function. Later on, we will see that it is also possible to
    build hierarchies of classes that enable CherryPy to serve URLs like `http://127.0.0.1/app/toplevel/content`
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Adding an icon to a button
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '`$("button").button({icons: {primary: ''ui-icon-refresh''}})`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Like many jQuery and jQuery UI plugins, the button widget takes an `options`
    object as an argument. This `options` object may have a number of attributes,
    one of them the `icons` attribute. The value of this attribute itself is an object
    again, its `primary` attribute determining which of the many standard icons will
    be displayed on the button. Refer to the online documentation of the button widget
    to see all options: [http://jqueryui.com/demos/button/](http://jqueryui.com/demos/button/)
    and check jQuery UI''s themeroller page at [http://jqueryui.com/themeroller/](http://jqueryui.com/themeroller/)
    for an overview of all available icons for a given theme.'
  prefs: []
  type: TYPE_NORMAL
- en: Adding conversions to a unitconverter instance
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: Changing option defaults
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer: b'
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 3, Tasklist I: Persistence'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Session IDs
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer 1:'
  prefs: []
  type: TYPE_NORMAL
- en: No, CherryPy will only save the session data to persistent storage if something
    is written to the session data while preparing a response. If an unknown session
    ID is received, the application cannot identify the user and will signal that
    to the client, but it will not store anything in the session data.
  prefs: []
  type: TYPE_NORMAL
- en: 'Answer 2:'
  prefs: []
  type: TYPE_NORMAL
- en: c, because a client that doesn't store cookies will never send a request containing
    the session ID, the server will generate a new one.
  prefs: []
  type: TYPE_NORMAL
- en: Styling screen elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer 1:'
  prefs: []
  type: TYPE_NORMAL
- en: Either leave out the `text:false` in the `options` object passed to the `button()`
    function or explicitly show it with `text:true`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Answer 2:'
  prefs: []
  type: TYPE_NORMAL
- en: The`<div>` element that encloses the`<form>` element might be wider and an unsuitable
    background color may show up where the form isn't covering the full width.
  prefs: []
  type: TYPE_NORMAL
- en: 'Chapter 4, Tasklist II: Databases and AJAX'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Using variable selection criteria
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '`cursor.execute(''select * from task where user_id = ?'',(username,))`'
  prefs: []
  type: TYPE_NORMAL
- en: A working implementation is available as `taskdb3.py`. Note that because there
    may be more than one placeholder present in a query, we pass the actual values
    for these placeholders as a tuple. A peculiarity of the Python syntax demands
    that a tuple is defined as parentheses containing a comma separated list of expressions
    and that a tuple consisting of a single item still has to contain a comma. `(username,)`
    is, therefore, a tuple with a single item.
  prefs: []
  type: TYPE_NORMAL
- en: Spotting the error
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '`test_number()`'
  prefs: []
  type: TYPE_NORMAL
- en: 'It will fail in the very first assertion with an output like the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'It still doesn''t say what is wrong in the code, but now you know that the
    new implementation does not calculate the factorial of a number correctly. The
    solution might not be hard to spot this time: the `range()` function should be
    passed `2` as its first argument, because only 0 and 1 are treated as special-case
    in the code'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 5, Entities and Relations
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: How to check a class
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Python''s built-in function `issubclass()` can provide the information we need.
    Checking, for example, the `instance_a` attribute might be implemented like:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: How to select a limited number of books
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer:'
  prefs: []
  type: TYPE_NORMAL
- en: '`booksdb.list(offset=20,limit=10)`'
  prefs: []
  type: TYPE_NORMAL
- en: Chapter 6, Building a Wiki
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Pop quiz
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Answer:'
  prefs: []
  type: TYPE_NORMAL
- en: The `id`, as it is unique as well.
  prefs: []
  type: TYPE_NORMAL
