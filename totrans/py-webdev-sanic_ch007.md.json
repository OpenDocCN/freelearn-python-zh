["```py\n@app.before_server_start\nasync def setup_db(app, loop):\n    app.ctx.db = await setup_my_db()\n```", "```py\nfrom sanic import Sanic\nasync def some_function_somewhere():\n    app = Sanic.get_app()\n    await app.ctx.db.execute(...)\nOr, perhaps you need it in your route handler:\nbp = Blueprint(\"auth\")\n@bp.post(\"/login\")\nasync def login(request: Request):\n    session_id = await request.app.ctx.db.execute(...)\n    ...\n```", "```py\n@app.on_request\nasync def one(request):\n    print(\"one\")\n@app.on_request\nasync def two(request):\n    print(\"two\")\n@app.get(\"/\")\nasync def handler(request):\n    print(\"three\")\n    return text(\"done\")\n```", "```py\none\ntwo\nthree\n(sanic.access)[INFO][127.0.0.1:47194]: GET http://localhost:7777/  200 4\n```", "```py\n@app.post(\"/login\")\nasync def login(request):\n    user = await do_some_fancy_login_stuff(request)\n    cart = await generate_shopping_cart(request)\n    response = text(f\"Hello {user.name}\")\n    response.cookies[\"cart\"] = cart.uid\n    return response\n```", "```py\nbp = Blueprint(\"ShoppingCart\", url_prefix=\"/cart\")\n@bp.on_request\nasync def fetch_cart(request):\n    cart_id = request.cookies.get(\"cart\")\n    request.ctx.cart = await fetch_shopping_cart(cart_id)\n@bp.get(\"/\")\nasync def get_cart(request):\n    print(request.ctx.cart)\n    ...\n```", "```py\ngroup = Blueprint.group(bp)\n@group.on_request\nasync def fetch_cart(request):\n    cart_id = request.cookies.get(\"cart\")\n    request.ctx.cart = await fetch_shopping_cart(cart_id)\n```", "```py\nbp = Blueprint(\"Six\", url_prefix=\"/six\")\n@app.on_request\nasync def one(request):\n    request.ctx.numbers = []\n    request.ctx.numbers.append(1)\n@bp.on_request\nasync def two(request):\n    request.ctx.numbers.append(2)\n@app.on_request\nasync def three(request):\n    request.ctx.numbers.append(3)\n@bp.on_request\nasync def four(request):\n    request.ctx.numbers.append(4)\n@app.on_request\nasync def five(request):\n    request.ctx.numbers.append(5)\n@bp.on_request\nasync def six(request):\n    request.ctx.numbers.append(6)\n@app.get(\"/\")\nasync def app_handler(request):\n    return json(request.ctx.numbers)\n@bp.get(\"/\")\nasync def bp_handler(request):\n    return json(request.ctx.numbers)\napp.blueprint(bp)\n```", "```py\n$ curl localhost:7777     \n[1,3,5]\n$ curl localhost:7777/six\n[1,3,5,2,4,6]\n```", "```py\nbp = Blueprint(\"Six\", url_prefix=\"/six\")\n@app.on_response\nasync def one(request, response):\n    request.ctx.numbers = []\n    request.ctx.numbers.append(1)\n@bp.on_response\nasync def two(request, response):\n    request.ctx.numbers.append(2)\n@app.on_response\nasync def three(request, response):\n    request.ctx.numbers.append(3)\n@bp.on_response\nasync def four(request, response):\n    request.ctx.numbers.append(4)\n@app.on_response\nasync def five(request, response):\n    request.ctx.numbers.append(5)\n@bp.on_response\nasync def six(request, response):\n    request.ctx.numbers.append(6)\n@app.get(\"/\")\nasync def app_handler(request):\n    return json(request.ctx.numbers)\n@bp.get(\"/\")\nasync def bp_handler(request):\n    return json(request.ctx.numbers)\n```", "```py\n$ curl localhost:7777\n500 — Internal Server Error\n===========================\n'types.SimpleNamespace' object has no attribute 'numbers'\nAttributeError: 'types.SimpleNamespace' object has no attribute 'numbers' while handling path /\nTraceback of __main__ (most recent call last):\n  AttributeError: 'types.SimpleNamespace' object has no attribute 'numbers'\n    File /path/to/sanic/app.py, line 777, in handle_request\n    response = await response\n    File /path/to/server.py, line 48, in app_handler\n    return json(request.ctx.numbers)\n```", "```py\n@bp.on_response\nasync def complete(request, response):\n    return json(request.ctx.numbers)\n@app.on_request\nasync def zero(request):\nrequest.ctx.numbers = []\n@app.on_response\nasync def one(request, response):\n    request.ctx.numbers.append(1)\n@bp.on_response\nasync def two(request, response):\n    request.ctx.numbers.append(2)\n@app.on_response\nasync def three(request, response):\n    request.ctx.numbers.append(3)\n@bp.on_response\nasync def four(request, response):\n    request.ctx.numbers.append(4)\n@app.on_response\nasync def five(request, response):\n    request.ctx.numbers.append(5)\n@bp.on_response\nasync def six(request, response):\n    request.ctx.numbers.append(6)\n@bp.get(\"/\")\nasync def bp_handler(request):\n    request.ctx.numbers = []\n    return json(\"blah blah blah\")\n```", "```py\n$ curl localhost:7777/six\n[5,3,1,6,4,2]\n```", "```py\n@app.on_response\nasync def add_correlation_id(request: Request, response: HTTPResponse):\n    header_name = request.app.config.REQUEST_ID_HEADER\n    response.headers[header_name] = request.id\n```", "```py\n$ curl localhost:7777 -i \nHTTP/1.1 200 OK\nX-Request-ID: 1e3f9c46-1b92-4d33-80ce-cca532e2b93c\ncontent-length: 9\nconnection: keep-alive\ncontent-type: text/plain; charset=utf-8\nHello, world.\n```", "```py\n@bp.on_response\nasync def complete(request, response):\n    return json(request.ctx.numbers)\n...\n@bp.get(\"/\")\nasync def bp_handler(request):\n    request.ctx.numbers = []\n    return json(\"blah blah blah\")\n```", "```py\n@app.on_request\nasync def check_for_politeness(request: Request):\n    if \"please\" in request.headers:\n        return None\n    return text(\"You must say please\")\n```", "```py\n$ curl localhost:7777/show-me-the-money                \nYou must say please\n$ curl localhost:7777/show-me-the-money -H \"Please: With a cherry on top\"\n```", "```py\n@app.get(\"/\")\nasync def handler(request: Request):\n    resp = await request.respond()\n    for _ in range(4):\n        await resp.send(b\"Now I'm free, free-falling\")\n        await asyncio.sleep(1)\n    await resp.eof()\n```", "```py\n@app.get(\"/\")\nasync def handler(request: Request):\n    print(\"before respond()\")\n    resp = await request.respond()\n    print(\"after respond()\")\n    for _ in range(4):\n        print(\"sending\")\n        await resp.send(b\"Now I'm free, free-falling\")\n        await asyncio.sleep(1)\n    print(\"cleanup\")\n    await resp.eof()\n    print(\"done\")\n@app.on_request\nasync def req_middleware(request):\n    print(\"request middleware\")\n@app.on_response\nasync def resp_middleware(request, response):\n    print(\"response middleware\")\n```", "```py\nrequest middleware\nbefore respond()\nresponse middleware\nafter respond()\nsending\n(sanic.access)[INFO][127.0.0.1:49480]: GET http://localhost:7777/  200 26\nsending\nsending\nsending\ncleanup\ndone\n```", "```py\n@app.signal(\"http.lifecycle.begin\")\nasync def connection_begin(conn_info):\n    print(\"Hello from http.lifecycle.begin\")\n```", "```py\nnamespace.reference.action\n```", "```py\n@app.signal(\"http.lifecycle.<foo>\")\nasync def handler(**kwargs):\n    print(\"Hello!!!\")\n```", "```py\n[DEBUG] Dispatching signal: http.lifecycle.begin\nHello!!!\n[DEBUG] Dispatching signal: http.lifecycle.read_head\nHello!!!\n[DEBUG] Dispatching signal: http.lifecycle.request\nHello!!!\n[DEBUG] Dispatching signal: http.lifecycle.handle\nHello!!!\nrequest middleware\nresponse middleware\n[DEBUG] Dispatching signal: http.lifecycle.response\nHello!!!\n[INFO][127.0.0.1:39580]: GET http://localhost:7777/  200 20\n[DEBUG] Dispatching signal: http.lifecycle.send\nHello!!!\n[DEBUG] Dispatching signal: http.lifecycle.complete\nHello!!!\n```", "```py\n    @app.on_request\n    async def req_middleware(request):\n        print(\"request middleware\")\n    ```", "```py\n    @app.signal(\"http.middleware.before\")\n    async def handler(**kwargs):\n        print(\"Hello!!!\")\n    ```", "```py\n    [DEBUG] Dispatching signal: http.middleware.before\n    request middleware\n    ```", "```py\n    @app.signal(\"http.middleware.before\", condition={\"attach_to\": \"request\"})\n    async def handler(**kwargs):\n        print(\"Hello!!!\")\n    ```", "```py\n    [DEBUG] Dispatching signal: http.middleware.before\n    Hello!!!\n    request middleware\n    ```", "```py\napp.dispatch(\"custom.signal.event\", condition={\"foo\": \"bar\"})\n```", "```py\n    @app.on_response\n    async def log_response(request, response):\n        logger.info(\"some information for your logs\")\n    @app.on_response\n    async def something_bad_happens_here(request, response):\n        raise InvalidUsage(\"Uh oh\")\n    ```", "```py\n    @app.signal(\"http.lifecycle.response\")\n    async def log_response(request, response):\n        logger.info(\"some information for your logs\")\n    ```", "```py\n    [ERROR] Exception occurred in one of response middleware handlers\n    Traceback (most recent call last):\n      File \"/home/adam/Projects/Sanic/sanic/sanic/request.py\", line 183, in respond\n        response = await self.app._run_response_middleware(\n      File \"_run_response_middleware\", line 22, in _run_response_middleware\n        from ssl import Purpose, SSLContext, create_default_context\n      File \"/tmp/p.py\", line 23, in something_bad_happens_here\n        raise InvalidUsage(\"Uh oh\")\n    sanic.exceptions.InvalidUsage: Uh oh\n    [DEBUG] Dispatching signal: http.lifecycle.response\n    [INFO] some information for your logs\n    [INFO][127.0.0.1:40466]: GET http://localhost:7777/  200 3\n    ```", "```py\n@app.signal(\"http.lifecycle.response\")\nasync def http_lifecycle_response(request, response):\n    print(\"Finally... the route handler is over\")\n```", "```py\n    @app.signal(\"http.lifecycle.handle\")\n    async def fetch_user_and_cart(request):\n        cart_id = request.cookies.get(\"cart\")\n        session_id = request.cookies.get(\"session\")\n        request.ctx.cart = await fetch_shopping_cart(cart_id)\n        request.ctx.user = await fetch_user(session_id)\n    ```", "```py\n    @dataclass\n    class Cart:\n        items: List[str]\n    @dataclass\n    class User:\n        name: str\n    async def fetch_shopping_cart(cart_id):\n        return Cart([\"chocolate bar\", \"gummy bears\"])\n    async def fetch_user(session_id):\n        return User(\"Adam\")\n    ```", "```py\n    @app.get(\"/\")\n    async def route_handler(request: Request):\n        return json(request.ctx.__dict__)\n    ```", "```py\n    $ curl localhost:7777 -H 'Cookie: cart=123&session_id=456'\n    {\n      \"cart\": {\n        \"items\": [\n          \"chocolate bar\",\n          \"gummy bears\"\n        ]\n      },\n      \"user\": {\n        \"name\": \"Adam\"\n      }\n    }\n    ```", "```py\n    $ sanic server:app -p 7777 --debug --workers=2\n    ```", "```py\n    $ sanic server:app -p 7777 --debug --workers=2 --no-access-logs\n    ```", "```py\n    @app.signal(\"http.lifecycle.handle\")\n    async def access_log(request):\n        await asyncio.sleep(3)\n        name = request.ctx.user.name\n        count = len(request.ctx.cart.items)\n        logger.info(f\"Request from {name}, who has a cart with {count} items\")\n    ```", "```py\n    [DEBUG] Dispatching signal: http.lifecycle.request\n    [DEBUG] Dispatching signal: http.lifecycle.handle\n    [INFO] Request from Adam, who has a cart with 2 items\n    ```", "```py\n    @app.signal(\"http.lifecycle.request\")\n    async def fetch_user_and_cart(request):\n        cart_id = request.cookies.get(\"cart\")\n        session_id = request.cookies.get(\"session\")\n        request.ctx.cart = await fetch_shopping_cart(cart_id)\n        request.ctx.user = await fetch_user(session_id)\n        await request.app.dispatch(\n            \"olives.request.incoming\",\n            context={\"request\": request},\n            inline=True,\n        )\n    @app.signal(\"olives.request.incoming\")\n    async def access_log(request):\n        await asyncio.sleep(3)\n        name = request.ctx.user.name\n        count = len(request.ctx.cart.items)\n        logger.info(f\"Request from {name}, who has a cart with {count} items\")\n    ```", "```py\nawait app.dispatch(\"one.two.three\")\n```", "```py\ndef dispatch(\n    event: str,\n    *,\n    condition: Optional[Dict[str, str]] = None,\n    context: Optional[Dict[str, Any]] = None,\n    fail_not_found: bool = True,\n    inline: bool = False,\n    reverse: bool = False,\n):\n```", "```py\n    async def wait_for_event(app: Sanic):\n        while True:\n            print(\"> waiting\")\n            await app.event(\"http.lifecycle.request\")\n            print(\"> event found\")\n    @app.after_server_start\n    async def after_server_start(app, loop):\n        app.add_task(wait_for_event(app))\n    ```", "```py\n    > waiting\n    [INFO] Starting worker [165193]\n    [DEBUG] Dispatching signal: http.lifecycle.request\n    > event found\n    > waiting\n    ```", "```py\n@app.signal(\"registration.email.send\")\nasync def send_registration_email(email, request):\n    await asyncio.sleep(3)\n    await request.app.dispatch(\"registration.email.done\")\n@app.post(\"/register\")\nasync def handle_registration(request):\n    await do_registration()\n    await request.app.dispatch(\n        \"registration.email.send\",\n        context={\n            \"email\": \"alice@bob.co\",\n            \"request\": request,\n        },\n    )\n    await do_something_else_while_email_is_sent()\n    print(\"Waiting for email send to complete\")\n    await request.app.event(\"registration.email.done\")\n    print(\"Done.\")\n    return text(\"Registration email sent\")\n```", "```py\ndo_registration\nSending email\ndo_something_else_while_email_is_sent\nWaiting for email send to complete\nDone.\n```", "```py\n    @app.signal(\"registration.email.done\")\n    async def noop():\n        ...\n    ```", "```py\n    app.add_signal(None, \"registration.email.done\")\n    ```", "```py\n    app.config.EVENT_AUTOREGISTER = True\n    ```", "```py\napp.config.KEEP_ALIVE = False\n```", "```py\napp.config.KEEP_ALIVE_TIMEOUT = 60\n```", "```py\n    from itertools import count\n    @app.signal(\"http.lifecycle.begin\")\n    async def setup_counter(conn_info):\n        conn_info.ctx._counter = count()\n    ```", "```py\n    @app.on_request\n    async def increment(request):\n        request.conn_info.ctx.count = next(request.conn_info.ctx._counter)\n    ```", "```py\n    @app.get(\"/\")\n    async def handler(request):\n        return json({\"request_number\": request.conn_info.ctx.count})\n    ```", "```py\n    $ curl localhost:7777 localhost:7777\n    {\"request_number\":0}\n    {\"request_number\":1}\n    ```", "```py\n@app.get(\"/\")\nasync def handler(request):\n    return json(\n        {\n            \"request_number\": request.conn_info.ctx.count,\n            \"sanic_count\": request.protocol.state[\"requests_count\"],\n        },\n    )\n```", "```py\n    @app.post(\"/cart)\n    async def add_to_cart(request):\n        if \"name\" not in request.json:\n            raise InvalidUsage(\"You forgot to send a product name\")\n        ...\n    ```", "```py\n    $ curl localhost:7777/cart -X POST -d '{}' -i\n    HTTP/1.1 400 Bad Request\n    content-length: 83\n    connection: keep-alive\n    content-type: text/plain; charset=utf-8\n    400 — Bad Request\n    =================\n    You forgot to send a product name\n    ```", "```py\n    @app.post(\"/coffee\")\n    async def teapot(request):\n        raise InvalidUsage(\"Hmm...\", status_code=418)\n    ```", "```py\n    $ curl localhost:777/coffee -X POST -i      \n    HTTP/1.1 418 I'm a teapot\n    content-length: 58\n    connection: keep-alive\n    content-type: text/plain; charset=utf-8\n    418 — I'm a teapot\n    ==================\n    Hmm...\n    ```", "```py\n@app.get(\"/product/<product_id:uuid>\")\nasync def product_details(request, product_id):\n    try:\n        product = await Product.query(product_id=product_id)\n    except DoesNotExist:\n        raise NotFound(\"No product found\")\n```", "```py\n    from sanic.exceptions import InvalidUsage\n    class MinQuantityError(InvalidUsage):\n        ...\n    ```", "```py\n    @app.post(\"/cart\")\n    async def add_to_cart(request):\n        if request.json[\"qty\"] < 5:\n            raise MinQuantityError(\n                \"Sorry, you must purchase at least 5 of this item\"\n            )\n    ```", "```py\n    $ curl localhost:777/cart -X POST -d '{\"qty\": 1}' -i\n    HTTP/1.1 400 Bad Request\n    content-length: 98\n    connection: keep-alive\n    content-type: text/plain; charset=utf-8\n    400 — Bad Request\n    =================\n    Sorry, you must purchase at least 5 of this item\n    ```", "```py\n    @app.get(\"/product/<product_name:slug>\")\n    async def product_details(request, product_name):\n        raise NotFound(\"No product found\")\n    ```", "```py\n    app = Sanic(__name__)\n    app.config.FALLBACK_ERROR_FORMAT = \"html\"\n    ```", "```py\n    app.config.FALLBACK_ERROR_FORMAT = \"html\"\n    ```", "```py\n    $ curl localhost:7777/product/missing-product\n    {\n      \"description\": \"Not Found\",\n      \"status\": 404,\n      \"message\": \"No product found\"\n    }\n    ```", "```py\n    app.config.FALLBACK_ERROR_FORMAT = \"text\"\n    ```", "```py\n    $ curl localhost:7777/product/missing-product\n    404 — Not Found\n    ===============\n    No product found\n    ```", "```py\napp.config.FALLBACK_ERROR_FORMAT = \"auto\"\n```", "```py\n    app.config.FALLBACK_ERROR_FORMAT = \"html\"\n    ```", "```py\n    @app.get(\"/product/<product_name:slug>\", error_format=\"text\")\n    async def product_details(request, product_name):\n        raise NotFound(\"No product found\")\n    ```", "```py\n    $ curl localhost:7777/product/missing-product\n    404 — Not Found\n    ===============\n    No product found\n    ```", "```py\n    @app.post(\"/cart/complete\")\n    async def complete_transaction(request):\n        ...\n        await submit_payment(...)\n        ...\n    ```", "```py\n    $ curl localhost:7777/cart/complete -X POST\n    500 — Internal Server Error\n    ============================\n    The server encountered an internal error and cannot complete your request.\n    ```", "```py\n[ERROR] Exception occurred while handling uri: 'http://localhost:7777/cart/complete'\nTraceback (most recent call last):\n  File \"handle_request\", line 83, in handle_request\n    \"\"\"\n  File \"/path/to/server.py\", line 19, in complete_transaction\n    await submit_payment(...)\n  File \"/path/to/server.py\", line 13, in submit_payment\n    raise CreditCardError(\"Expiration date must be in format: MMYY\")\nCreditCardError: Expiration date must be in format: MMYY\n[INFO][127.0.0.1:58334]: POST http://localhost:7777/cart/complete  500 144\n```", "```py\n@app.post(\"/cart/complete\")\nasync def complete_transaction(request):\n    ...\n    try:\n        await submit_payment(...)\n    except CreditCardError as e:\n        return text(str(e), status=400)\n    ...\n```", "```py\n@app.exception(CreditCardError)\nasync def handle_credit_card_errors(request, exception):\n    return text(str(exception), status=400)\n```", "```py\nimport asyncio\nasync def something():\n...\nasync def main():\nloop = asyncio.get_running_loop()\nloop.create_task(something())\n```", "```py\nasync def something():\n...\napp.add_task(something)\n```", "```py\nfrom sanic import Sanic\nfrom my_app import something\napp = Sanic(“MyAwesomeApp”)\napp.add_task(something(app))\n```", "```py\n    from celery import Celery\n    @app.before_server_start \n    def setup_celery(app, _):\n        app.ctx.celery = Celery(...)\n    ```", "```py\n    @app.post(\"/start_task\") \n    async def start_task(request): \n        task = request.app.ctx.celery.send_task(\n            \"execute_slow_stuff\", \n            kwargs=request.json\n        )\n        return text(f\"Started task with {task.id=}\", status=202)\n    ```", "```py\n    from sanic import Sanic\n    from job.blueprint import bp\n    app = Sanic(__name__)\n    app.config.NUM_TASK_WORKERS = 3\n    app.blueprint(bp)\n    ```", "```py\n    from sanic import Blueprint\n    from job.startup import (\n    setup_task_executor,\n    setup_job_fetch,\n    register_operations,\n    )\n    from job.view import JobListView, JobDetailView\n    bp = Blueprint(\"JobQueue\", url_prefix=\"/job\")\n    bp.after_server_start(setup_job_fetch)\n    bp.after_server_start(setup_task_executor)\n    bp.after_server_start(register_operations)\n    bp.add_route(JobListView.as_view(), \"\")\n    bp.add_route(JobDetailView.as_view(), \"/<uid:uuid>\")\n    ```", "```py\n    async def setup_job_fetch(app, _):\n    app.ctx.jobs = FileBackend(\"./db\")\n    ```", "```py\n    async def setup_task_executor(app, _):\n    app.ctx.queue = asyncio.Queue(maxsize=64)\n    for x in range(app.config.NUM_TASK_WORKERS):\n    name = f\"Worker-{x}\"\n    print(f\"Starting up executor: {name}\")\n    app.add_task(worker(name, app.ctx.queue, app.ctx.jobs))\n    ```", "```py\n    async def register_operations(app, _):\n    app.ctx.registry = OperationRegistry(Hello)\n    ```", "```py\n    class JobListView(HTTPMethodView):\n    async def post(self, request):\n    operation = request.json.get(\"operation\")\n    kwargs = request.json.get(\"kwargs\", {})\n    if not operation:\n    raise InvalidUsage(\"Missing operation\")\n    ```", "```py\n    uid = uuid.uuid4()\n    await request.app.ctx.queue.put(\n    {\n    \"operation\": operation,\n    \"uid\": uid,\n    \"kwargs\": kwargs,\n    }\n    )\n    return json({\"uid\": str(uid)}, status=202)\n    ```", "```py\n    class JobDetailView(HTTPMethodView):\n    async def get(self, request, uid: uuid.UUID):\n    data = await request.app.ctx.jobs.fetch(uid)\n    return json(data)\n    ```", "```py\n    import asyncio\n    from .base import Operation\n    class Hello(Operation):\n    async def run(self, name=\"world\"):\n    message = f\"Hello, {name}\"\n    print(message)\n    await asyncio.sleep(10)\n    print(\"Done.\")\n    return message\n    ```", "```py\n    async def worker(name, queue, backend):\n    while True:\n    job = await queue.get()\n    if not job:\n    break\n    size = queue.qsize()\n    print(f\"[{name}] Running {job}. {size} in queue.\")\n    ```", "```py\n    job_instance = await Job.create(job, backend)\n    async with job_instance as operation:\n    await job_instance.execute(operation)\n    ```"]