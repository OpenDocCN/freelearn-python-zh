- en: '7'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Debugging Modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238), *Basic Server-Side Development*,
    we saw how to write model methods to implement the logic of our module. However,
    we may get stuck when we encounter errors or logical issues. In order to resolve
    these errors, we need to perform a detailed inspection and this may take time.
    Luckily, Odoo provides you with some debugging tools that can help you find the
    root cause of various issues. In this chapter, we will look at various debugging
    tools and techniques in detail.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: The auto-reload and `--``dev` options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Producing server logs to help debug methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Odoo shell to interactively call methods
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Python debugger to trace method execution
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Understanding the debug mode options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The auto-reload and --dev options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous chapters, we saw how to add a model, fields, and views. Whenever
    we make changes to Python files, we need to restart the server to apply those
    changes. If we make changes in XML files, we need to restart the server and update
    the module to reflect those changes in the user interface. If you are developing
    a large application, this can be time-consuming and frustrating. Odoo provides
    a command-line option, `--dev`, to overcome these issues. The `--dev` option has
    several possible values, and, in this recipe, we will see each of them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Install `inotify or watchdog` in your developer environment with the following
    command in the shell. Without `inotify or watchdog`, the auto-reload feature will
    not work:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To enable the `dev` option, you need to use `--dev=value` from the command line.
    Possible values for this option are `all`, `reload`, `pudb|wdb|ipdb|pdb`, `qweb`,
    `werkzeug`, and `xml`. Take a look at the following recipe for more information.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check the following list for all `--dev` options and their purposes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`reload`: Whenever you make changes in Python, you need to restart the server
    to reflect those changes in Odoo. The `--dev=reload` option will reload the Odoo
    server automatically when you make changes in any Python file. This feature will
    not work if you have not installed the Python `inotify` package. When you run
    an Odoo server with this option, you will see a log like this: `AutoReload watcher
    running` `with inotify`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qweb`: You can create dynamic website pages in Odoo using QWeb templates.
    In [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS Website Development*,
    we will see how to develop a web page with the QWeb template. You can debug issues
    in the QWeb template with the `t-debug` attribute. The `t-debug` options will
    only work if you enable the `dev` mode with `--dev=qweb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`werkzeug`: Odoo uses `werkzeug` to handle HTTP requests. Internally, Odoo
    will catch and suppress all exceptions generated by `werkzeug`. If you use `--dev=werkzeug`,
    werkzeug’s interactive debugger will be displayed on the web page when an exception
    is generated.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`xml`: Whenever you make changes in the view structure, you need to reload
    the server and update the module to apply those changes. With the `--dev=xml`
    option, you just need to reload Odoo from the browser. There is no need to restart
    the server or update the module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pudb|wdb|ipdb|pdb`: You can use the `--dev=pdb` option, it will activate the
    PDB whenever an exception is generated in Odoo. Odoo supports four Python debuggers:
    `pudb`, `wdb`, `ipdb`, and `pdb`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`all`: If you use `--dev=all`, all of the preceding options will be enabled.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you want to enable only a few options, you can use comma-separated values,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you have made changes to the database structure, such as if you have added
    new fields, the `--dev=reload` option will not reflect these in the database schema.
    You need to update the module manually; it only works for Python business logic.
    If you add a new view or menu, the `--dev=xml` option will not reflect this in
    the user interface. You need to update the module manually. This is very helpful
    when you are designing the structure of the view or the website page. If users
    have made changes in the view from the GUI, then `--dev=xml` will not load the
    XML from the file. Odoo will use the view structure, which the user changes.
  prefs: []
  type: TYPE_NORMAL
- en: Producing server logs to help debug methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Server logs** are useful when trying to figure out what has been happening
    at runtime before a crash. They can also be added to provide additional information
    when debugging is an issue. This recipe shows you how to add logging to an existing
    method.'
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will add some logging statements to the following method, which saves the
    stock levels of products to a file (you will also need to add the dependencies
    of the `product` and `stock` modules to the manifest):'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to get some logs when this method is being executed, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'At the beginning of the code, import the `logging` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Before the definition of the model class, get a logger for the module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Modify the code of the `export_stock_level()` method, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Step 1* imports the **logging** module from the Python standard library. Odoo
    uses this module to manage its logs.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 2* sets up a logger for the Python module. We use the common idiom `__name__`
    in Odoo as an automatic variable for the name of the logger and to call the logger
    by `_logger`.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The `__name__`variable is set automatically by the Python interpreter at module-import
    time, and its value is the full name of the module. Since Odoo does a little trick
    with the imports, the add-on modules are seen by Python as belonging to the `odoo.addons`
    Python package. So, if the code of the recipe is in `my_hostel/models/hostel.py`,
    `__name__` will be `odoo.addons.my_hostel.models.hostel`.
  prefs: []
  type: TYPE_NORMAL
- en: 'By doing this, we get two benefits:'
  prefs: []
  type: TYPE_NORMAL
- en: The global logging configuration set on the **odoo** logger is applied to our
    logger because of the hierarchical structure of loggers in the **logging** module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The logs will be prefixed with the full module path, which is a great help when
    trying to find where a given log line is produced
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Step 3* uses the logger to produce log messages. The available methods for
    this are (by increasing log level) `%` substitutions and additional arguments
    to be inserted into the message. You do not need to handle the `%` substitution
    yourself; the logging module is smart enough to perform this operation if the
    log has to be produced. If you are running with a log level of **INFO**, then
    **DEBUG** logs will avoid substitutions that will consume CPU resources in the
    long run.'
  prefs: []
  type: TYPE_NORMAL
- en: Another useful method shown in this recipe is `_logger.exception()`, which can
    be used in an exception handler. The message will be logged with a level of `ERROR`,
    and the stack trace is also printed in the application log.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'You can control the **logging level** of the application from the command line
    or from the configuration file. There are two main ways of doing this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The first way is to use the `--log-handler` option. Its basic syntax is like
    this: `--log-handler=prefix:level`. In this case, the prefix is a piece of the
    path of the logger name, and the level is `my_hostel` loggers to **DEBUG** and
    keep the default log level for the other add-ons, you can start Odoo as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'It is possible to specify `--log-handler` multiple times on the command line.
    You can also configure the `odoo.service.server`, for which we keep info-level
    messages, including server startup notifications:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: The second way is to use the `--log-level` option. To control the log level
    globally, you can use `--log-level` as the command-line option. Possible values
    for this option are `critical`, `error`, `warn`, `debug`, `debug_rpc`, `debug_rpc_answer`,
    `debug_sql`, and `test`.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some shortcuts for setting logging levels. Here is a list of them:'
  prefs: []
  type: TYPE_NORMAL
- en: '`--log-request` is a shortcut for `--log-handler=odoo.http.rpc.request:DEBUG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-response` is a shortcut for `--log-handler=odoo.http.rpc.response:DEBUG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-web` is a shortcut for `--log-handler=odoo.http:DEBUG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`--log-sql` is a shortcut for `--log-handler=odoo.sql_db:DEBUG`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using the Odoo shell to interactively call methods
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Odoo web interface is meant for end users, although the developer mode unlocks
    a number of powerful features. However, testing and debugging through the web
    interface is not the easiest way to do things, as you need to manually prepare
    the data, navigate in the menus to perform actions, and so on. The Odoo shell
    is a **command-line interface**, which you can use to issue calls. This recipe
    shows how to start the Odoo shell and perform actions such as calling a method
    inside the shell.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will reuse the same code as in the previous recipe to produce server logs
    to help debug methods. This allows the `product.product` model to add a new method.
    We will assume that you have an instance with the add-on installed and available.
    In this recipe, we expect that you have an Odoo configuration file for this instance
    called `project.conf`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to call the `export_stock_level()` method from the Odoo shell, perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Start the Odoo shell and specify your project configuration file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Check for error messages and read the information text that’s displayed before
    the usual Python command-line prompt:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: '>>> product = env[''product.product'']'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Get the main stock location record:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Call the `export_stock_level()` method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Commit the transaction before exiting:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Exit the shell by pressing *Ctrl +* *D*.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '*Step 1* uses `odoo-bin shell` to start the Odoo shell. All the usual command-line
    arguments are available. We use `-c` to specify a project configuration file and
    `--log-level` to reduce the verbosity of the logs. When debugging, you may want
    to have a logging level of `DEBUG` for some specific add-ons.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Before providing you with a Python command-line prompt, `odoo-bin shell` starts
    an Odoo instance that does not listen on the network and initializes some global
    variables, which are mentioned in the output:'
  prefs: []
  type: TYPE_NORMAL
- en: '`env` is an environment that’s connected to the database and specified on the
    command line or in the configuration file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`odoo` is the `odoo` package that’s imported for you. You get access to all
    the Python modules within that package to do what you want.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`openerp` is an alias for the `odoo` package for backward compatibility.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`self` is a record set of `res.users` that contains a single record for the
    Odoo superuser (administrator), which is linked to the `env` environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 3* and *4* use `env` to get an empty record set and find a record according
    to the XML ID. *Step 5* calls the method on the `product.product` record set.
    These operations are identical to what you would use inside a method, with a minor
    difference being that we use `env` and not `self.env` (although we can have both,
    as they are identical). Take a look at [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238),
    *Basic Server-Side Development*, for more information on what is available.'
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 6* commits the database transaction. This is not strictly necessary here
    because we did not modify any record in the database, but if we had done so and
    wanted these changes to persist, this is necessary; when you use Odoo through
    the web interface, each RPC call runs in its own database transaction, and Odoo
    manages these for you. When running in shell mode, this no longer happens and
    you have to call `env.cr.commit()` or `env.cr.rollback()` yourself. Otherwise,
    when you exit the shell, any transaction in progress is automatically rolled back.
    When testing, this is fine, but if you use the shell, for example, to script the
    configuration of an instance, don’t forget to commit your work!'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In shell mode, by default, Odoo opens Python’s REPL shell interface. You can
    use the REPL of your choice using the `--shell-interface` option. The supported
    REPLs are `ipython`, `ptpython`, `bpython`, and `python`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: Using the Python debugger to trace method execution
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Sometimes, application logs are not enough to figure out what is going wrong.
    Fortunately, we also have the Python debugger. This recipe shows us how to insert
    a breakpoint in a method and trace the execution by hand.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will reuse the `export_stock_level()` method that was shown in the *Using
    the Odoo shell to interactively call methods* recipe of this chapter. Ensure that
    you have a copy to hand.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To trace the execution of `export_stock_level()` with `pdb`, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the code of the method, and insert the line highlighted here:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Run the method. We will use the Odoo shell, as explained in the *Using the
    Odoo shell to interactively call* *methods* recipe:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'At the `(Pdb)` prompt, issue the `args` command (the shortcut for which is
    `a`) to get the values of the arguments that were passed to the method:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the `list` command to check where in the code you are standing:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Enter the `next` command three times to walk through the first lines of the
    method. You may also use `n`, which is a shortcut:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `p` command to display the values of the `products` and `fname` variables:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Change the value of `fname` to point to the `/``tmp` directory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `return` (shortcut: `r`) command to execute the current function:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Use the `cont` (shortcut: `c`) command to resume the execution of the program:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we hardcoded a breakpoint in the source code of the method by calling
    the `set_trace()` method of the `pdb` module from the Python standard library.
    When this method is executed, the normal flow of the program stops, and you get
    a `(Pdb)` prompt into which you can enter `pdb` commands.
  prefs: []
  type: TYPE_NORMAL
- en: '*Step 2* calls the `stock_level_export()` method using shell mode. It is also
    possible to restart the server normally and use the web interface to generate
    a call to the method you need to trace by clicking on the appropriate elements
    of the user interface.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you need to manually step through some code using the Python debugger,
    here are a few tips that will make your life easier:'
  prefs: []
  type: TYPE_NORMAL
- en: Reduce the logging level to avoid having too many log lines, which pollutes
    the output of the debugger. Starting at the `ERROR` level is generally fine. You
    may want to enable some specific loggers with a higher verbosity, which you can
    do using the `--log-handler` command-line option (refer to the *Producing server
    logs to help debug* *methods* recipe).
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the server with `--workers=0` to avoid any multiprocessing issues that can
    cause the same breakpoint to be reached twice in two different processes.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Run the server with `--max-cron-threads=0` to disable the processing of the
    `ir.cron` periodic tasks, which may otherwise trigger while you are stepping through
    the method, which produces unwanted logs and side effects.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '*Steps 3* to *8* use several `pdb` commands to step through the execution of
    the method. Here’s a summary of the main commands of `pdb`. Most of these are
    also available using the first letter as a shortcut. We indicate this in the following
    list by having the optional letters between parentheses:'
  prefs: []
  type: TYPE_NORMAL
- en: '`h(elp)`: This displays help with the `pdb` commands.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`a(rgs)`: This shows the value of the arguments of the current function/methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`l(ist)`: This displays the source code being executed in chunks of 11 lines,
    initially centered on the current line. Successive calls will move further in
    the source code file. Optionally, you can pass two integers at the start and end,
    which specify the region to display.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`p`: This prints a variable.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pp`: This pretty-prints a variable (useful with lists and dictionaries).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`w(here)`: This shows the call stack, with the current line at the bottom and
    the Python interpreter at the top.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`u(p)`: This moves up one level in the call stack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`d(own)`: This moves down one level in the call stack.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`n(ext)`: This executes the current line of code and then stops.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`s(tep)`: This is to step inside the execution of a method call.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`r(eturn)`: This resumes the execution of the current method until it returns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`c(ont(inue))`: This resumes the execution of the program until the next breakpoint
    is hit.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`b(reak) <args>`: This creates a new breakpoint and displays its identifier;
    `args` can be one of the following:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<empty>`: This lists all breakpoints.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`line_number`: This breaks at the specified line in the current file.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`filename:line_number`: This breaks at the specified line of the specified
    file (which is searched for in the directories of `sys.path`).'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`function_name`: This breaks at the first line of the specified function.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tbreak <args>`: This is similar to break, but the breakpoint will be canceled
    after it has been reached, so successive execution of the line won’t trigger it
    twice.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`disable bp_id`: This disables a breakpoint by ID.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`enable bl_id`: This enables a disabled breakpoint by ID.'
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
- en: '`j(ump) lineno`: The next line to execute will be the one specified. This can
    be used to rerun or skip some lines.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`(!) statement`: This executes a Python statement. The `!` character can be
    omitted if the command does not look like a `pdb` command. For instance, you need
    it if you want to set the value of a variable named `a`, because `a` is the shortcut
    for the `args` command.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the recipe, we inserted a `pdb.set_trace()` statement to break into `pdb`
    for debugging. We can also start `pdb` directly from within the Odoo shell, which
    is very useful when you cannot easily modify the code of the project using `pdb.runcall()`.
    This function takes a method as the first argument and the arguments to pass to
    the function as the next argument. So, inside the Odoo shell, you do the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this recipe, we focused on the Python debugger from the Python standard library,
    `pdb`. It is very useful to know about this tool because it is guaranteed to be
    available on any Python distribution. There are other Python debuggers available,
    such as `ipdb` ([https://pypi.python.org/pypi/ipdb](https://pypi.python.org/pypi/ipdb))
    and `pudb` ([https://pypi.python.org/pypi/pudb](https://pypi.python.org/pypi/pudb)),
    which can be used as drop-in replacements for `pdb`. They share the same API,
    and most of the commands that you saw in this recipe were unchanged. Also, of
    course, if you develop for Odoo using a Python IDE, you will have access to a
    debugger that was integrated with it.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you want to learn more about the `pdb` debugger, refer to the full documentation
    of `pdb` at [https://docs.python.org/3.9/library/pdb.html](https://docs.python.org/3.9/library/pdb.html).
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the debug mode options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, we saw how to enable debug/developer options in Odoo. These options
    are very helpful in debugging and reveal some further technical information. In
    this recipe, we will look at these options in detail.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Check the *Activating the Odoo developer tools* recipe of [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment*, and activate developer mode. After
    activating developer mode, you will see a drop-down menu with a bug icon in the
    top bar, as shown here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 7.1 – Available options after activating debug mode](img/B20997_07_1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.1 – Available options after activating debug mode
  prefs: []
  type: TYPE_NORMAL
- en: In this menu, you will see various options. Give them a go to see them in action.
    The next section will explain these options in more detail.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s learn more about the options in the following points:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Run JS Tests**: This option will redirect you to the JavaScript QUnit test
    case page, as shown in the following screenshot. It will start running all test
    cases one by one. Here, you can see the progress and the status of the test cases.
    In [*Chapter 18*](B20997_18.xhtml#_idTextAnchor990), *Automated Test Cases*, we
    will see how can we create our own QUnit JavaScript test cases:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – QUnit test case result screen](img/B20997_07_2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – QUnit test case result screen
  prefs: []
  type: TYPE_NORMAL
- en: '**Run JS Mobile Tests**: Similar to the preceding option, but this one runs
    a QUnit test case for a mobile environment.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run Click Anywhere Tests**: This option will start clicking on all menus
    one by one. It will click in all the views and search filters. If something is
    broken or there is any regression, it will show the tracebacks. To stop this test,
    you will need to reload the page.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open View**: This option will open a list of all available views. By selecting
    any of them, you can open that view without defining any menus or actions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable Tours**: Odoo uses tours to improve the onboarding of new users.
    If you want to disable it, you can do it by using this option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start Tour**: Odoo also uses tours for automated testing. We will create
    a custom onboarding tour in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861),
    *Web Client Development*. This option will open a dialog box with a list of all
    tours, as shown in the following screenshot. By clicking on the play button next
    to a tour, Odoo will automatically perform all the steps of the tour:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Dialog to manually launch tours](img/B20997_07_3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Dialog to manually launch tours
  prefs: []
  type: TYPE_NORMAL
- en: '**Edit Action**: In the *Adding menu items and views* recipe of [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*, we added a menu item and an action to open views
    in Odoo. Details of these actions are also stored in the database as a record.
    This option will open the record details of the action we open to display the
    current view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hostel.hostel` model, this option will show a list of fields for the `hostel.hostel`
    model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manage Filters**: In Odoo, users can create custom filters from the search
    view. This option will open a list of custom filters for the current model. Here,
    you can modify the custom filters.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical Translations**: This option will open a list of translated terms
    for the current model. You can modify the technical translation terms for your
    model from here. You can refer to [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595),
    *Internationalization,* to learn more about translations.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Access Rights**: This option will show a list of security access rights
    for the current model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Record Rules**: This option will show a list of security record rules
    for the current model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields_view_get()` method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.ui.view` record of the current view. This option is dynamic and it will
    show an option based on the view that is currently open. This means that if you
    open **Kanban View**, you will get an **Edit View: Kanban** option, and if you
    open **Form View**, you will get an **Edit View:** **Form** option.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important tip
  prefs: []
  type: TYPE_NORMAL
- en: You can modify the view definition from the **Edit View** option. This updated
    definition will be applicable on the current database and these changes will be
    removed when you update the module. It’s therefore better to modify views from
    modules.
  prefs: []
  type: TYPE_NORMAL
- en: '`ir.ui.view` record of the current model’s search view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activate Assets Debugging**: Odoo provides two types of developer mode: *Developer
    mode* and *Developer mode with assets*. With this option, you can switch from
    *Developer* mode to *Developer mode with assets* mode. Check the *Activating the
    Odoo developer tools* recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment,* for more details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activate Test Assets Debugging**: As we know, Odoo uses tours for testing.
    Enabling this mode will load test assets in Odoo. This option will show some more
    tours in the **Start** **tour** dialog.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regenerate Assets Bundles**: Odoo manages all CSS and JavaScript through
    asset bundles. This option deletes the old JavaScript and CSS assets and generates
    new ones. This option is helpful when you are getting issues because of asset
    caching. We will learn more about asset bundles in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS* *Website Development.*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Become Super User**: This is a new option added from version 12\. By activating
    this option, you switch to a super user. You can access the records even if you
    don’t have access rights. This option is not available for all users; it is only
    available for users who have **Administration: settings** access rights. After
    activating this mode, you will see a striped top menu, as shown here:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B20997_07_4.jpg)![](img/B20997_07_5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Menu after activating a super user
  prefs: []
  type: TYPE_NORMAL
- en: '**Leave Developer Tools**: This option allows you to leave developer mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have seen all of the options that are available under the debug menu. These
    options can be used in several ways, such as debugging, testing, and fixing issues.
    They can also be used to explore the source code for views.
  prefs: []
  type: TYPE_NORMAL
