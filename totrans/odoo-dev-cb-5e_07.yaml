- en: '7'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '7'
- en: Debugging Modules
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 调试模块
- en: In [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238), *Basic Server-Side Development*,
    we saw how to write model methods to implement the logic of our module. However,
    we may get stuck when we encounter errors or logical issues. In order to resolve
    these errors, we need to perform a detailed inspection and this may take time.
    Luckily, Odoo provides you with some debugging tools that can help you find the
    root cause of various issues. In this chapter, we will look at various debugging
    tools and techniques in detail.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在 [*第 5 章*](B20997_05.xhtml#_idTextAnchor238)，*基本服务器端开发*，我们看到了如何编写模型方法来实现我们模块的逻辑。然而，当我们遇到错误或逻辑问题时，我们可能会陷入困境。为了解决这些错误，我们需要进行详细的检查，这可能会花费一些时间。幸运的是，Odoo
    为你提供了一些调试工具，可以帮助你找到各种问题的根本原因。在本章中，我们将详细探讨各种调试工具和技术。
- en: 'In this chapter, we will cover the following recipes:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将介绍以下食谱：
- en: The auto-reload and `--``dev` options
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自动重新加载和 `--dev` 选项
- en: Producing server logs to help debug methods
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 生成服务器日志以帮助调试方法
- en: Using the Odoo shell to interactively call methods
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Odoo 壳交互式调用方法
- en: Using the Python debugger to trace method execution
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 Python 调试器跟踪方法执行
- en: Understanding the debug mode options
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解调试模式选项
- en: The auto-reload and --dev options
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自动重新加载和 --dev 选项
- en: In the previous chapters, we saw how to add a model, fields, and views. Whenever
    we make changes to Python files, we need to restart the server to apply those
    changes. If we make changes in XML files, we need to restart the server and update
    the module to reflect those changes in the user interface. If you are developing
    a large application, this can be time-consuming and frustrating. Odoo provides
    a command-line option, `--dev`, to overcome these issues. The `--dev` option has
    several possible values, and, in this recipe, we will see each of them.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的章节中，我们看到了如何添加模型、字段和视图。每次我们更改 Python 文件时，我们都需要重新启动服务器以应用这些更改。如果我们更改 XML 文件，我们需要重新启动服务器并更新模块以在用户界面中反映这些更改。如果你正在开发大型应用程序，这可能会很耗时且令人沮丧。Odoo
    提供了一个命令行选项 `--dev` 来克服这些问题。`--dev` 选项有几种可能的值，在本食谱中，我们将看到每个值。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'Install `inotify or watchdog` in your developer environment with the following
    command in the shell. Without `inotify or watchdog`, the auto-reload feature will
    not work:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在你的开发环境中使用以下命令安装 `inotify or watchdog`。没有 `inotify 或 watchdog`，自动重新加载功能将不会工作：
- en: '[PRE0]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-14
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做...
- en: To enable the `dev` option, you need to use `--dev=value` from the command line.
    Possible values for this option are `all`, `reload`, `pudb|wdb|ipdb|pdb`, `qweb`,
    `werkzeug`, and `xml`. Take a look at the following recipe for more information.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 要启用 `dev` 选项，你需要从命令行使用 `--dev=value`。此选项的可能值是 `all`、`reload`、`pudb|wdb|ipdb|pdb`、`qweb`、`werkzeug`
    和 `xml`。查看以下食谱以获取更多信息。
- en: How it works...
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Check the following list for all `--dev` options and their purposes:'
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 检查以下列表以了解所有 `--dev` 选项及其用途：
- en: '`reload`: Whenever you make changes in Python, you need to restart the server
    to reflect those changes in Odoo. The `--dev=reload` option will reload the Odoo
    server automatically when you make changes in any Python file. This feature will
    not work if you have not installed the Python `inotify` package. When you run
    an Odoo server with this option, you will see a log like this: `AutoReload watcher
    running` `with inotify`.'
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`reload`: 每当你对 Python 进行更改时，你需要重新启动服务器以在 Odoo 中反映这些更改。`--dev=reload` 选项会在你对任何
    Python 文件进行更改时自动重新加载 Odoo 服务器。如果你没有安装 Python 的 `inotify` 包，这个功能将不会工作。当你使用此选项运行
    Odoo 服务器时，你会看到这样的日志：`AutoReload watcher running` `with inotify`。'
- en: '`qweb`: You can create dynamic website pages in Odoo using QWeb templates.
    In [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS Website Development*,
    we will see how to develop a web page with the QWeb template. You can debug issues
    in the QWeb template with the `t-debug` attribute. The `t-debug` options will
    only work if you enable the `dev` mode with `--dev=qweb`.'
  id: totrans-19
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qweb`: 你可以使用 QWeb 模板在 Odoo 中创建动态的网站页面。在 [*第 14 章*](B20997_14.xhtml#_idTextAnchor734)，*CMS
    网站开发*，我们将看到如何使用 QWeb 模板开发网页。你可以使用 `t-debug` 属性在 QWeb 模板中调试问题。只有当你使用 `--dev=qweb`
    启用 `dev` 模式时，`t-debug` 选项才会工作。'
- en: '`werkzeug`: Odoo uses `werkzeug` to handle HTTP requests. Internally, Odoo
    will catch and suppress all exceptions generated by `werkzeug`. If you use `--dev=werkzeug`,
    werkzeug’s interactive debugger will be displayed on the web page when an exception
    is generated.'
  id: totrans-20
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`werkzeug`: Odoo 使用 `werkzeug` 来处理 HTTP 请求。内部，Odoo 会捕获并抑制由 `werkzeug` 产生的所有异常。如果你使用
    `--dev=werkzeug`，当产生异常时，werkzeug 的交互式调试器将在网页上显示。'
- en: '`xml`: Whenever you make changes in the view structure, you need to reload
    the server and update the module to apply those changes. With the `--dev=xml`
    option, you just need to reload Odoo from the browser. There is no need to restart
    the server or update the module.'
  id: totrans-21
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`xml`: 每次你在视图结构中做出更改时，都需要重新加载服务器并更新模块以应用这些更改。使用 `--dev=xml` 选项，你只需从浏览器重新加载
    Odoo 即可。无需重新启动服务器或更新模块。'
- en: '`pudb|wdb|ipdb|pdb`: You can use the `--dev=pdb` option, it will activate the
    PDB whenever an exception is generated in Odoo. Odoo supports four Python debuggers:
    `pudb`, `wdb`, `ipdb`, and `pdb`.'
  id: totrans-22
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pudb|wdb|ipdb|pdb`: 你可以使用 `--dev=pdb` 选项，它将在 Odoo 中生成异常时激活 PDB。Odoo 支持四个 Python
    调试器：`pudb`、`wdb`、`ipdb` 和 `pdb`。'
- en: '`all`: If you use `--dev=all`, all of the preceding options will be enabled.'
  id: totrans-23
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`all`: 如果你使用 `--dev=all`，所有前面的选项都将被启用。'
- en: '[PRE1]'
  id: totrans-24
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'If you want to enable only a few options, you can use comma-separated values,
    as follows:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你只想启用几个选项，可以使用逗号分隔的值，如下所示：
- en: '[PRE2]'
  id: totrans-26
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: Important note
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: If you have made changes to the database structure, such as if you have added
    new fields, the `--dev=reload` option will not reflect these in the database schema.
    You need to update the module manually; it only works for Python business logic.
    If you add a new view or menu, the `--dev=xml` option will not reflect this in
    the user interface. You need to update the module manually. This is very helpful
    when you are designing the structure of the view or the website page. If users
    have made changes in the view from the GUI, then `--dev=xml` will not load the
    XML from the file. Odoo will use the view structure, which the user changes.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你已经更改了数据库结构，例如添加了新字段，`--dev=reload` 选项将不会在数据库模式中反映这些更改。你需要手动更新模块；它仅适用于 Python
    业务逻辑。如果你添加了新的视图或菜单，`--dev=xml` 选项将不会在用户界面中反映这一点。你需要手动更新模块。这在设计视图或网站页面结构时非常有用。如果用户从
    GUI 中更改了视图，那么 `--dev=xml` 将不会从文件中加载 XML。Odoo 将使用用户更改的视图结构。
- en: Producing server logs to help debug methods
  id: totrans-29
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 生成服务器日志以帮助调试方法
- en: '**Server logs** are useful when trying to figure out what has been happening
    at runtime before a crash. They can also be added to provide additional information
    when debugging is an issue. This recipe shows you how to add logging to an existing
    method.'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '**服务器日志**在尝试了解崩溃前运行时发生了什么时非常有用。它们还可以添加以在调试问题时提供更多信息。这个食谱展示了如何将日志记录添加到现有方法中。'
- en: Getting ready
  id: totrans-31
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will add some logging statements to the following method, which saves the
    stock levels of products to a file (you will also need to add the dependencies
    of the `product` and `stock` modules to the manifest):'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在以下方法中添加一些日志语句，该方法将产品的库存水平保存到文件中（你还需要将 `product` 和 `stock` 模块的依赖项添加到清单中）：
- en: '[PRE3]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: How to do it...
  id: totrans-34
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'In order to get some logs when this method is being executed, perform the following
    steps:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 为了在执行此方法时获取一些日志，执行以下步骤：
- en: 'At the beginning of the code, import the `logging` module:'
  id: totrans-36
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在代码开头，导入 `logging` 模块：
- en: '[PRE4]'
  id: totrans-37
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Before the definition of the model class, get a logger for the module:'
  id: totrans-38
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在模型类定义之前，为模块获取一个记录器：
- en: '[PRE5]'
  id: totrans-39
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Modify the code of the `export_stock_level()` method, as follows:'
  id: totrans-40
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 修改 `export_stock_level()` 方法的代码，如下所示：
- en: '[PRE6]'
  id: totrans-41
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '*Step 1* imports the **logging** module from the Python standard library. Odoo
    uses this module to manage its logs.'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 1* 从 Python 标准库中导入 **logging** 模块。Odoo 使用此模块来管理其日志。'
- en: '*Step 2* sets up a logger for the Python module. We use the common idiom `__name__`
    in Odoo as an automatic variable for the name of the logger and to call the logger
    by `_logger`.'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 2* 为 Python 模块设置一个记录器。我们在 Odoo 中使用常见的 `__name__` 习惯用法作为记录器名称的自动变量，并通过 `_logger`
    调用记录器。'
- en: Important note
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: The `__name__`variable is set automatically by the Python interpreter at module-import
    time, and its value is the full name of the module. Since Odoo does a little trick
    with the imports, the add-on modules are seen by Python as belonging to the `odoo.addons`
    Python package. So, if the code of the recipe is in `my_hostel/models/hostel.py`,
    `__name__` will be `odoo.addons.my_hostel.models.hostel`.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`__name__` 变量由 Python 解释器在模块导入时自动设置，其值为模块的完整名称。由于 Odoo 对导入做了一些小技巧，附加模块在 Python
    中被视为属于 `odoo.addons` Python 包。因此，如果食谱的代码位于 `my_hostel/models/hostel.py`，则 `__name__`
    将为 `odoo.addons.my_hostel.models.hostel`。'
- en: 'By doing this, we get two benefits:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 通过这样做，我们得到两个好处：
- en: The global logging configuration set on the **odoo** logger is applied to our
    logger because of the hierarchical structure of loggers in the **logging** module
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 由于 **logging** 模块中日志记录器的层次结构，设置在 **odoo** 日志记录器上的全局日志配置应用于我们的日志记录器
- en: The logs will be prefixed with the full module path, which is a great help when
    trying to find where a given log line is produced
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 日志将带有完整的模块路径前缀，这在尝试找到给定日志行产生的地方时非常有帮助
- en: '*Step 3* uses the logger to produce log messages. The available methods for
    this are (by increasing log level) `%` substitutions and additional arguments
    to be inserted into the message. You do not need to handle the `%` substitution
    yourself; the logging module is smart enough to perform this operation if the
    log has to be produced. If you are running with a log level of **INFO**, then
    **DEBUG** logs will avoid substitutions that will consume CPU resources in the
    long run.'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 3* 使用日志记录器生成日志消息。可用于此的方法有（按日志级别递增）`%` 替换和要插入到消息中的附加参数。您不需要自己处理 `%` 替换；如果需要生成日志，日志模块足够智能，可以执行此操作。如果您正在以
    **INFO** 级别运行，那么 **DEBUG** 日志将避免替换，这将在长期运行中消耗 CPU 资源。'
- en: Another useful method shown in this recipe is `_logger.exception()`, which can
    be used in an exception handler. The message will be logged with a level of `ERROR`,
    and the stack trace is also printed in the application log.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 本食谱中展示的另一种有用方法是 `_logger.exception()`，它可以在异常处理程序中使用。消息将以 `ERROR` 级别记录，并且堆栈跟踪也会打印在应用程序日志中。
- en: There’s more...
  id: totrans-52
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'You can control the **logging level** of the application from the command line
    or from the configuration file. There are two main ways of doing this:'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以从命令行或配置文件中控制应用程序的 **日志级别**。主要有两种方法来做这件事：
- en: 'The first way is to use the `--log-handler` option. Its basic syntax is like
    this: `--log-handler=prefix:level`. In this case, the prefix is a piece of the
    path of the logger name, and the level is `my_hostel` loggers to **DEBUG** and
    keep the default log level for the other add-ons, you can start Odoo as follows:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 第一种方法是使用 `--log-handler` 选项。其基本语法如下：`--log-handler=prefix:level`。在这种情况下，前缀是日志记录器名称路径的一部分，级别是
    `my_hostel` 日志记录器设置为 **DEBUG**，并为其他附加组件保留默认日志级别，你可以按照以下方式启动 Odoo：
- en: '[PRE7]'
  id: totrans-55
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'It is possible to specify `--log-handler` multiple times on the command line.
    You can also configure the `odoo.service.server`, for which we keep info-level
    messages, including server startup notifications:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 在命令行上可以多次指定 `--log-handler`。您还可以配置 `odoo.service.server`，我们保留信息级别消息，包括服务器启动通知：
- en: '[PRE8]'
  id: totrans-57
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: The second way is to use the `--log-level` option. To control the log level
    globally, you can use `--log-level` as the command-line option. Possible values
    for this option are `critical`, `error`, `warn`, `debug`, `debug_rpc`, `debug_rpc_answer`,
    `debug_sql`, and `test`.
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 第二种方法是使用 `--log-level` 选项。要全局控制日志级别，可以使用 `--log-level` 作为命令行选项。此选项的可能值有 `critical`、`error`、`warn`、`debug`、`debug_rpc`、`debug_rpc_answer`、`debug_sql`
    和 `test`。
- en: 'There are some shortcuts for setting logging levels. Here is a list of them:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 设置日志级别的快捷方式有一些。以下是一份列表：
- en: '`--log-request` is a shortcut for `--log-handler=odoo.http.rpc.request:DEBUG`'
  id: totrans-60
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-request` 是 `--log-handler=odoo.http.rpc.request:DEBUG` 的快捷方式'
- en: '`--log-response` is a shortcut for `--log-handler=odoo.http.rpc.response:DEBUG`'
  id: totrans-61
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-response` 是 `--log-handler=odoo.http.rpc.response:DEBUG` 的快捷方式'
- en: '`--log-web` is a shortcut for `--log-handler=odoo.http:DEBUG`'
  id: totrans-62
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-web` 是 `--log-handler=odoo.http:DEBUG` 的快捷方式'
- en: '`--log-sql` is a shortcut for `--log-handler=odoo.sql_db:DEBUG`'
  id: totrans-63
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`--log-sql` 是 `--log-handler=odoo.sql_db:DEBUG` 的快捷方式'
- en: Using the Odoo shell to interactively call methods
  id: totrans-64
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Odoo 壳来交互式调用方法
- en: The Odoo web interface is meant for end users, although the developer mode unlocks
    a number of powerful features. However, testing and debugging through the web
    interface is not the easiest way to do things, as you need to manually prepare
    the data, navigate in the menus to perform actions, and so on. The Odoo shell
    is a **command-line interface**, which you can use to issue calls. This recipe
    shows how to start the Odoo shell and perform actions such as calling a method
    inside the shell.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 网络界面是为最终用户设计的，尽管开发者模式解锁了许多强大的功能。然而，通过网络界面进行测试和调试并不是最容易的方法，因为您需要手动准备数据，在菜单中进行导航以执行操作等。Odoo
    壳是一个 **命令行界面**，您可以使用它来发出调用。本食谱展示了如何启动 Odoo 壳并执行如调用壳内方法之类的操作。
- en: Getting ready
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will reuse the same code as in the previous recipe to produce server logs
    to help debug methods. This allows the `product.product` model to add a new method.
    We will assume that you have an instance with the add-on installed and available.
    In this recipe, we expect that you have an Odoo configuration file for this instance
    called `project.conf`.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用之前配方中的相同代码来生成服务器日志以帮助调试方法。这允许 `product.product` 模型添加一个新方法。我们假设你有一个已安装并可供使用的附加组件的实例。在这个配方中，我们期望你有一个名为
    `project.conf` 的 Odoo 配置文件。
- en: How to do it...
  id: totrans-68
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何做到这一点...
- en: 'In order to call the `export_stock_level()` method from the Odoo shell, perform
    the following steps:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 为了从 Odoo 壳中调用 `export_stock_level()` 方法，执行以下步骤：
- en: 'Start the Odoo shell and specify your project configuration file:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启动 Odoo 壳并指定你的项目配置文件：
- en: '[PRE9]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Check for error messages and read the information text that’s displayed before
    the usual Python command-line prompt:'
  id: totrans-72
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 检查错误消息并阅读在常规 Python 命令行提示符之前显示的信息文本：
- en: '[PRE10]'
  id: totrans-73
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: '>>> product = env[''product.product'']'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: '>>> product = env[''product.product'']'
- en: '[PRE11]'
  id: totrans-75
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Get the main stock location record:'
  id: totrans-76
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取主要库存位置记录：
- en: '[PRE12]'
  id: totrans-77
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Call the `export_stock_level()` method:'
  id: totrans-78
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用 `export_stock_level()` 方法：
- en: '[PRE13]'
  id: totrans-79
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Commit the transaction before exiting:'
  id: totrans-80
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在退出前提交事务：
- en: '[PRE14]'
  id: totrans-81
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Exit the shell by pressing *Ctrl +* *D*.
  id: totrans-82
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过按 *Ctrl +* *D* 退出壳。
- en: How it works...
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: '*Step 1* uses `odoo-bin shell` to start the Odoo shell. All the usual command-line
    arguments are available. We use `-c` to specify a project configuration file and
    `--log-level` to reduce the verbosity of the logs. When debugging, you may want
    to have a logging level of `DEBUG` for some specific add-ons.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 1* 使用 `odoo-bin shell` 启动 Odoo 壳。所有常规命令行参数都是可用的。我们使用 `-c` 指定项目配置文件，并使用
    `--log-level` 减少日志的冗余。在调试时，你可能希望为某些特定的插件设置日志级别为 `DEBUG`。'
- en: 'Before providing you with a Python command-line prompt, `odoo-bin shell` starts
    an Odoo instance that does not listen on the network and initializes some global
    variables, which are mentioned in the output:'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 在提供 Python 命令行提示符之前，`odoo-bin shell` 启动一个不监听网络的 Odoo 实例并初始化一些全局变量，这些变量在输出中提到：
- en: '`env` is an environment that’s connected to the database and specified on the
    command line or in the configuration file.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env` 是一个连接到数据库的环境，并在命令行或配置文件中指定。'
- en: '`odoo` is the `odoo` package that’s imported for you. You get access to all
    the Python modules within that package to do what you want.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`odoo` 是为你导入的 `odoo` 包。你可以访问该包内的所有 Python 模块以执行你想要的操作。'
- en: '`openerp` is an alias for the `odoo` package for backward compatibility.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`openerp` 是 `odoo` 包的别名，用于向后兼容。'
- en: '`self` is a record set of `res.users` that contains a single record for the
    Odoo superuser (administrator), which is linked to the `env` environment.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`self` 是 `res.users` 的记录集，包含一个 Odoo 超用户（管理员）的单一记录，该记录与 `env` 环境相关联。'
- en: '*Steps 3* and *4* use `env` to get an empty record set and find a record according
    to the XML ID. *Step 5* calls the method on the `product.product` record set.
    These operations are identical to what you would use inside a method, with a minor
    difference being that we use `env` and not `self.env` (although we can have both,
    as they are identical). Take a look at [*Chapter 5*](B20997_05.xhtml#_idTextAnchor238),
    *Basic Server-Side Development*, for more information on what is available.'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 3* 和 *步骤 4* 使用 `env` 获取一个空记录集并根据 XML ID 查找记录。*步骤 5* 调用 `product.product`
    记录集上的方法。这些操作与你在方法内部使用的是相同的，唯一的区别是我们使用 `env` 而不是 `self.env`（尽管我们可以两者都有，因为它们是相同的）。有关可用的更多信息，请参阅
    [*第 5 章*](B20997_05.xhtml#_idTextAnchor238)，*基本服务器端开发*。'
- en: '*Step 6* commits the database transaction. This is not strictly necessary here
    because we did not modify any record in the database, but if we had done so and
    wanted these changes to persist, this is necessary; when you use Odoo through
    the web interface, each RPC call runs in its own database transaction, and Odoo
    manages these for you. When running in shell mode, this no longer happens and
    you have to call `env.cr.commit()` or `env.cr.rollback()` yourself. Otherwise,
    when you exit the shell, any transaction in progress is automatically rolled back.
    When testing, this is fine, but if you use the shell, for example, to script the
    configuration of an instance, don’t forget to commit your work!'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 6* 提交数据库事务。在这里这并不是严格必要的，因为我们没有修改数据库中的任何记录，但如果我们已经这样做并且希望这些更改持久化，这是必要的；当您通过
    Web 界面使用 Odoo 时，每个 RPC 调用都在自己的数据库事务中运行，Odoo 会为您管理这些事务。当在 shell 模式下运行时，这种情况不再发生，您必须自己调用
    `env.cr.commit()` 或 `env.cr.rollback()`。否则，当您退出 shell 时，任何正在进行的交易都会自动回滚。在测试时，这是可以的，但如果您使用
    shell，例如，来脚本化实例的配置，别忘了提交您的工作！'
- en: There’s more...
  id: totrans-92
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In shell mode, by default, Odoo opens Python’s REPL shell interface. You can
    use the REPL of your choice using the `--shell-interface` option. The supported
    REPLs are `ipython`, `ptpython`, `bpython`, and `python`:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 在 shell 模式下，默认情况下，Odoo 会打开 Python 的 REPL 命令行界面。您可以使用 `--shell-interface` 选项使用您选择的
    REPL。支持的 REPL 有 `ipython`、`ptpython`、`bpython` 和 `python`：
- en: '[PRE15]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: Using the Python debugger to trace method execution
  id: totrans-95
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用 Python 调试器跟踪方法执行
- en: Sometimes, application logs are not enough to figure out what is going wrong.
    Fortunately, we also have the Python debugger. This recipe shows us how to insert
    a breakpoint in a method and trace the execution by hand.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 有时候，应用程序日志不足以找出问题所在。幸运的是，我们还有 Python 调试器。这个食谱展示了我们如何在一个方法中插入断点并通过手动跟踪执行过程。
- en: Getting ready
  id: totrans-97
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will reuse the `export_stock_level()` method that was shown in the *Using
    the Odoo shell to interactively call methods* recipe of this chapter. Ensure that
    you have a copy to hand.
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将重用本章 *使用 Odoo 命令行界面交互式调用方法* 食谱中展示的 `export_stock_level()` 方法。请确保您手头有该方法的副本。
- en: How to do it...
  id: totrans-99
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'To trace the execution of `export_stock_level()` with `pdb`, perform the following
    steps:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 `pdb` 跟踪 `export_stock_level()` 的执行，请执行以下步骤：
- en: 'Edit the code of the method, and insert the line highlighted here:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑方法的代码，并插入此处突出显示的行：
- en: '[PRE16]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'Run the method. We will use the Odoo shell, as explained in the *Using the
    Odoo shell to interactively call* *methods* recipe:'
  id: totrans-103
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行该方法。我们将使用 Odoo 命令行界面，正如在 *使用 Odoo 命令行界面交互式调用 *方法* 的食谱中所述：
- en: '[PRE17]'
  id: totrans-104
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'At the `(Pdb)` prompt, issue the `args` command (the shortcut for which is
    `a`) to get the values of the arguments that were passed to the method:'
  id: totrans-105
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `(Pdb)` 提示符下，发出 `args` 命令（其快捷键为 `a`）以获取传递给方法的参数值：
- en: '[PRE18]'
  id: totrans-106
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Enter the `list` command to check where in the code you are standing:'
  id: totrans-107
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `list` 命令以检查您在代码中的位置：
- en: '[PRE19]'
  id: totrans-108
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Enter the `next` command three times to walk through the first lines of the
    method. You may also use `n`, which is a shortcut:'
  id: totrans-109
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 输入 `next` 命令三次以遍历方法的第一行。您也可以使用 `n`，这是一个快捷键：
- en: '[PRE20]'
  id: totrans-110
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'Use the `p` command to display the values of the `products` and `fname` variables:'
  id: totrans-111
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `p` 命令显示 `products` 和 `fname` 变量的值：
- en: '[PRE21]'
  id: totrans-112
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Change the value of `fname` to point to the `/``tmp` directory:'
  id: totrans-113
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `fname` 的值更改为指向 `/tmp` 目录：
- en: '[PRE22]'
  id: totrans-114
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use the `return` (shortcut: `r`) command to execute the current function:'
  id: totrans-115
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `return`（快捷键：`r`）命令执行当前函数：
- en: '[PRE23]'
  id: totrans-116
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Use the `cont` (shortcut: `c`) command to resume the execution of the program:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用 `cont`（快捷键：`c`）命令恢复程序的执行：
- en: '[PRE24]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE24]'
- en: How it works...
  id: totrans-119
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: In *step 1*, we hardcoded a breakpoint in the source code of the method by calling
    the `set_trace()` method of the `pdb` module from the Python standard library.
    When this method is executed, the normal flow of the program stops, and you get
    a `(Pdb)` prompt into which you can enter `pdb` commands.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 在 *步骤 1* 中，我们通过从 Python 标准库中的 `pdb` 模块调用 `set_trace()` 方法在方法的源代码中硬编码了一个断点。当此方法执行时，程序的正常流程会停止，您会得到一个
    `(Pdb)` 提示符，您可以在其中输入 `pdb` 命令。
- en: '*Step 2* calls the `stock_level_export()` method using shell mode. It is also
    possible to restart the server normally and use the web interface to generate
    a call to the method you need to trace by clicking on the appropriate elements
    of the user interface.'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤 2* 使用 shell 模式调用 `stock_level_export()` 方法。您也可以正常重启服务器并使用 Web 界面通过点击用户界面的适当元素来生成对您需要跟踪的方法的调用。'
- en: 'When you need to manually step through some code using the Python debugger,
    here are a few tips that will make your life easier:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 当你需要使用Python调试器手动逐步执行一些代码时，以下是一些会使你的生活变得更简单的提示：
- en: Reduce the logging level to avoid having too many log lines, which pollutes
    the output of the debugger. Starting at the `ERROR` level is generally fine. You
    may want to enable some specific loggers with a higher verbosity, which you can
    do using the `--log-handler` command-line option (refer to the *Producing server
    logs to help debug* *methods* recipe).
  id: totrans-123
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 将日志级别降低以避免产生过多的日志行，这会污染调试器的输出。从`ERROR`级别开始通常是合适的。你可能想启用一些具有更高详细度的特定日志记录器，你可以使用`--log-handler`命令行选项来实现（参考*生成服务器日志以帮助调试*方法）。
- en: Run the server with `--workers=0` to avoid any multiprocessing issues that can
    cause the same breakpoint to be reached twice in two different processes.
  id: totrans-124
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`--workers=0`运行服务器以避免任何可能导致两个不同进程两次达到相同断点的多进程问题。
- en: Run the server with `--max-cron-threads=0` to disable the processing of the
    `ir.cron` periodic tasks, which may otherwise trigger while you are stepping through
    the method, which produces unwanted logs and side effects.
  id: totrans-125
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用`--max-cron-threads=0`运行服务器以禁用`ir.cron`周期性任务的处理，否则在逐步执行方法时可能会触发，这会产生不想要的日志和副作用。
- en: '*Steps 3* to *8* use several `pdb` commands to step through the execution of
    the method. Here’s a summary of the main commands of `pdb`. Most of these are
    also available using the first letter as a shortcut. We indicate this in the following
    list by having the optional letters between parentheses:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: '*步骤3*到*8*使用几个`pdb`命令来逐步执行方法的执行。以下是`pdb`的主要命令的摘要。其中大部分也可以使用首字母作为快捷键。我们在以下列表中通过在括号中包含可选字母来表示这一点：'
- en: '`h(elp)`: This displays help with the `pdb` commands.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`h(elp)`: 这将显示`pdb`命令的帮助信息。'
- en: '`a(rgs)`: This shows the value of the arguments of the current function/methods.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`a(rgs)`: 这显示了当前函数/方法的参数值。'
- en: '`l(ist)`: This displays the source code being executed in chunks of 11 lines,
    initially centered on the current line. Successive calls will move further in
    the source code file. Optionally, you can pass two integers at the start and end,
    which specify the region to display.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`l(ist)`: 这将以11行为单位分块显示正在执行的源代码，最初集中在当前行。连续调用将移动到源代码文件的更远位置。你可以选择性地在开始和结束处传递两个整数，以指定要显示的区域。'
- en: '`p`: This prints a variable.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`p`: 这将打印一个变量。'
- en: '`pp`: This pretty-prints a variable (useful with lists and dictionaries).'
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`pp`: 这将美化打印一个变量（对于列表和字典很有用）。'
- en: '`w(here)`: This shows the call stack, with the current line at the bottom and
    the Python interpreter at the top.'
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`w(here)`: 这显示了调用堆栈，当前行在底部，Python解释器在顶部。'
- en: '`u(p)`: This moves up one level in the call stack.'
  id: totrans-133
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`u(p)`: 这将在调用堆栈中向上移动一级。'
- en: '`d(own)`: This moves down one level in the call stack.'
  id: totrans-134
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`d(own)`: 这将在调用堆栈中向下移动一级。'
- en: '`n(ext)`: This executes the current line of code and then stops.'
  id: totrans-135
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`n(ext)`: 这将执行当前代码行，然后停止。'
- en: '`s(tep)`: This is to step inside the execution of a method call.'
  id: totrans-136
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`s(tep)`: 这是为了进入方法调用的执行。'
- en: '`r(eturn)`: This resumes the execution of the current method until it returns.'
  id: totrans-137
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`r(eturn)`: 这将恢复当前方法的执行，直到它返回。'
- en: '`c(ont(inue))`: This resumes the execution of the program until the next breakpoint
    is hit.'
  id: totrans-138
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`c(ont(inue))`: 这将恢复程序的执行，直到遇到下一个断点。'
- en: '`b(reak) <args>`: This creates a new breakpoint and displays its identifier;
    `args` can be one of the following:'
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`b(reak) <args>`: 这将创建一个新的断点并显示其标识符；`args`可以是以下之一：'
- en: '`<empty>`: This lists all breakpoints.'
  id: totrans-140
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<empty>`: 这将列出所有断点。'
- en: '`line_number`: This breaks at the specified line in the current file.'
  id: totrans-141
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`line_number`: 这将在当前文件中指定的行处中断。'
- en: '`filename:line_number`: This breaks at the specified line of the specified
    file (which is searched for in the directories of `sys.path`).'
  id: totrans-142
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`filename:line_number`: 这将在指定的文件中指定的行处中断（该文件将在`sys.path`的目录中搜索）。'
- en: '`function_name`: This breaks at the first line of the specified function.'
  id: totrans-143
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`function_name`: 这将在指定函数的第一行处中断。'
- en: '`tbreak <args>`: This is similar to break, but the breakpoint will be canceled
    after it has been reached, so successive execution of the line won’t trigger it
    twice.'
  id: totrans-144
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`tbreak <args>`: 这与`break`类似，但断点在达到后将被取消，因此后续执行该行不会触发它两次。'
- en: '`disable bp_id`: This disables a breakpoint by ID.'
  id: totrans-145
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`disable bp_id`: 这通过ID禁用断点。'
- en: '`enable bl_id`: This enables a disabled breakpoint by ID.'
  id: totrans-146
  prefs:
  - PREF_IND
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`enable bl_id`: 这通过ID启用已禁用的断点。'
- en: '`j(ump) lineno`: The next line to execute will be the one specified. This can
    be used to rerun or skip some lines.'
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`j(ump) lineno`: 下一条要执行的行将是指定的行。这可以用来重新运行或跳过某些行。'
- en: '`(!) statement`: This executes a Python statement. The `!` character can be
    omitted if the command does not look like a `pdb` command. For instance, you need
    it if you want to set the value of a variable named `a`, because `a` is the shortcut
    for the `args` command.'
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(!) statement`: 这将执行一个Python语句。如果命令看起来不像`pdb`命令，则可以省略`!`字符。例如，如果你想设置名为`a`的变量的值，因为`a`是`args`命令的快捷方式，你需要它。'
- en: There’s more...
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: 'In the recipe, we inserted a `pdb.set_trace()` statement to break into `pdb`
    for debugging. We can also start `pdb` directly from within the Odoo shell, which
    is very useful when you cannot easily modify the code of the project using `pdb.runcall()`.
    This function takes a method as the first argument and the arguments to pass to
    the function as the next argument. So, inside the Odoo shell, you do the following:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 在配方中，我们插入了一个`pdb.set_trace()`语句来中断到`pdb`进行调试。我们也可以直接从Odoo shell中启动`pdb`，这在无法使用`pdb.runcall()`轻松修改项目代码时非常有用。这个函数将方法作为第一个参数，将传递给函数的参数作为下一个参数。因此，在Odoo
    shell中，你将执行以下操作：
- en: '[PRE25]'
  id: totrans-151
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this recipe, we focused on the Python debugger from the Python standard library,
    `pdb`. It is very useful to know about this tool because it is guaranteed to be
    available on any Python distribution. There are other Python debuggers available,
    such as `ipdb` ([https://pypi.python.org/pypi/ipdb](https://pypi.python.org/pypi/ipdb))
    and `pudb` ([https://pypi.python.org/pypi/pudb](https://pypi.python.org/pypi/pudb)),
    which can be used as drop-in replacements for `pdb`. They share the same API,
    and most of the commands that you saw in this recipe were unchanged. Also, of
    course, if you develop for Odoo using a Python IDE, you will have access to a
    debugger that was integrated with it.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个配方中，我们专注于Python标准库中的Python调试器`pdb`。了解这个工具非常有用，因为它保证在任何Python发行版中都可用。还有其他Python调试器可用，如`ipdb`([https://pypi.python.org/pypi/ipdb](https://pypi.python.org/pypi/ipdb))和`pudb`([https://pypi.python.org/pypi/pudb](https://pypi.python.org/pypi/pudb))，它们可以用作`pdb`的替代品。它们共享相同的API，并且在这个配方中看到的绝大多数命令都没有改变。当然，如果你使用Python
    IDE为Odoo开发，你将能够访问与之集成的调试器。
- en: See also
  id: totrans-153
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: If you want to learn more about the `pdb` debugger, refer to the full documentation
    of `pdb` at [https://docs.python.org/3.9/library/pdb.html](https://docs.python.org/3.9/library/pdb.html).
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想了解更多关于`pdb`调试器的信息，请参阅`pdb`的完整文档，网址为[https://docs.python.org/3.9/library/pdb.html](https://docs.python.org/3.9/library/pdb.html)。
- en: Understanding the debug mode options
  id: totrans-155
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解调试模式选项
- en: In [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020), *Installing the Odoo Development
    Environment*, we saw how to enable debug/developer options in Odoo. These options
    are very helpful in debugging and reveal some further technical information. In
    this recipe, we will look at these options in detail.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 在[*第1章*](B20997_01.xhtml#_idTextAnchor020)“*安装Odoo开发环境*”中，我们看到了如何在Odoo中启用调试/开发者选项。这些选项在调试中非常有用，并揭示了更多技术信息。在本配方中，我们将详细查看这些选项。
- en: How to do it...
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Check the *Activating the Odoo developer tools* recipe of [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment*, and activate developer mode. After
    activating developer mode, you will see a drop-down menu with a bug icon in the
    top bar, as shown here:'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 检查[*第1章*](B20997_01.xhtml#_idTextAnchor020)中“*激活Odoo开发者工具*”配方，*安装Odoo开发环境*，并激活开发者模式。激活开发者模式后，你将在顶部栏看到一个带有bug图标的下拉菜单，如图所示：
- en: '![Figure 7.1 – Available options after activating debug mode](img/B20997_07_1.jpg)'
  id: totrans-159
  prefs: []
  type: TYPE_IMG
  zh: '![图7.1 – 激活调试模式后的可用选项](img/B20997_07_1.jpg)'
- en: Figure 7.1 – Available options after activating debug mode
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 图7.1 – 激活调试模式后的可用选项
- en: In this menu, you will see various options. Give them a go to see them in action.
    The next section will explain these options in more detail.
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜单中，你会看到各种选项。尝试它们以查看它们的作用。下一节将更详细地解释这些选项。
- en: How it works...
  id: totrans-162
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'Let’s learn more about the options in the following points:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们更深入地了解以下选项：
- en: '**Run JS Tests**: This option will redirect you to the JavaScript QUnit test
    case page, as shown in the following screenshot. It will start running all test
    cases one by one. Here, you can see the progress and the status of the test cases.
    In [*Chapter 18*](B20997_18.xhtml#_idTextAnchor990), *Automated Test Cases*, we
    will see how can we create our own QUnit JavaScript test cases:'
  id: totrans-164
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.2 – QUnit test case result screen](img/B20997_07_2.jpg)'
  id: totrans-165
  prefs: []
  type: TYPE_IMG
- en: Figure 7.2 – QUnit test case result screen
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '**Run JS Mobile Tests**: Similar to the preceding option, but this one runs
    a QUnit test case for a mobile environment.'
  id: totrans-167
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Run Click Anywhere Tests**: This option will start clicking on all menus
    one by one. It will click in all the views and search filters. If something is
    broken or there is any regression, it will show the tracebacks. To stop this test,
    you will need to reload the page.'
  id: totrans-168
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Open View**: This option will open a list of all available views. By selecting
    any of them, you can open that view without defining any menus or actions.'
  id: totrans-169
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Disable Tours**: Odoo uses tours to improve the onboarding of new users.
    If you want to disable it, you can do it by using this option.'
  id: totrans-170
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Start Tour**: Odoo also uses tours for automated testing. We will create
    a custom onboarding tour in [*Chapter 15*](B20997_15.xhtml#_idTextAnchor861),
    *Web Client Development*. This option will open a dialog box with a list of all
    tours, as shown in the following screenshot. By clicking on the play button next
    to a tour, Odoo will automatically perform all the steps of the tour:'
  id: totrans-171
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 7.3 – Dialog to manually launch tours](img/B20997_07_3.jpg)'
  id: totrans-172
  prefs: []
  type: TYPE_IMG
- en: Figure 7.3 – Dialog to manually launch tours
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
- en: '**Edit Action**: In the *Adding menu items and views* recipe of [*Chapter 3*](B20997_03.xhtml#_idTextAnchor083),
    *Creating Odoo Add-On Modules*, we added a menu item and an action to open views
    in Odoo. Details of these actions are also stored in the database as a record.
    This option will open the record details of the action we open to display the
    current view.'
  id: totrans-174
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`hostel.hostel` model, this option will show a list of fields for the `hostel.hostel`
    model.'
  id: totrans-175
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Manage Filters**: In Odoo, users can create custom filters from the search
    view. This option will open a list of custom filters for the current model. Here,
    you can modify the custom filters.'
  id: totrans-176
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Technical Translations**: This option will open a list of translated terms
    for the current model. You can modify the technical translation terms for your
    model from here. You can refer to [*Chapter 11*](B20997_11.xhtml#_idTextAnchor595),
    *Internationalization,* to learn more about translations.'
  id: totrans-177
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Access Rights**: This option will show a list of security access rights
    for the current model.'
  id: totrans-178
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**View Record Rules**: This option will show a list of security record rules
    for the current model.'
  id: totrans-179
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields_view_get()` method.'
  id: totrans-180
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ir.ui.view` record of the current view. This option is dynamic and it will
    show an option based on the view that is currently open. This means that if you
    open **Kanban View**, you will get an **Edit View: Kanban** option, and if you
    open **Form View**, you will get an **Edit View:** **Form** option.'
  id: totrans-181
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important tip
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
- en: You can modify the view definition from the **Edit View** option. This updated
    definition will be applicable on the current database and these changes will be
    removed when you update the module. It’s therefore better to modify views from
    modules.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: '`ir.ui.view` record of the current model’s search view.'
  id: totrans-184
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activate Assets Debugging**: Odoo provides two types of developer mode: *Developer
    mode* and *Developer mode with assets*. With this option, you can switch from
    *Developer* mode to *Developer mode with assets* mode. Check the *Activating the
    Odoo developer tools* recipe in [*Chapter 1*](B20997_01.xhtml#_idTextAnchor020),
    *Installing the Odoo Development Environment,* for more details.'
  id: totrans-185
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Activate Test Assets Debugging**: As we know, Odoo uses tours for testing.
    Enabling this mode will load test assets in Odoo. This option will show some more
    tours in the **Start** **tour** dialog.'
  id: totrans-186
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Regenerate Assets Bundles**: Odoo manages all CSS and JavaScript through
    asset bundles. This option deletes the old JavaScript and CSS assets and generates
    new ones. This option is helpful when you are getting issues because of asset
    caching. We will learn more about asset bundles in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734),
    *CMS* *Website Development.*'
  id: totrans-187
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Become Super User**: This is a new option added from version 12\. By activating
    this option, you switch to a super user. You can access the records even if you
    don’t have access rights. This option is not available for all users; it is only
    available for users who have **Administration: settings** access rights. After
    activating this mode, you will see a striped top menu, as shown here:'
  id: totrans-188
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![](img/B20997_07_4.jpg)![](img/B20997_07_5.jpg)'
  id: totrans-189
  prefs: []
  type: TYPE_IMG
- en: Figure 7.4 – Menu after activating a super user
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
- en: '**Leave Developer Tools**: This option allows you to leave developer mode.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We have seen all of the options that are available under the debug menu. These
    options can be used in several ways, such as debugging, testing, and fixing issues.
    They can also be used to explore the source code for views.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
