- en: <st c="0">1</st>
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="0">1</st>
- en: <st c="2">Installing Python and Django, and Introducing the Movies Store Application</st>
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2">安装 Python 和 Django，并介绍电影商店应用程序</st>
- en: <st c="76">Welcome to</st> *<st c="88">Django 5 for the Impatient</st>*<st c="114">!
    This book focuses on the key tasks and concepts to help you learn and build</st>
    **<st c="192">Django</st>** <st c="198">applications quickly.</st> <st c="221">It
    is designed for those of you who don’t need all the details about Django, except
    for those that you really need to know.</st> <st c="345">By the end of this book,
    you will be confident in creating your own</st> <st c="413">Django projects.</st>
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="76">欢迎来到</st> *<st c="88">《Django 5 快速入门》</st>*<st c="114">！本书专注于关键任务和概念，以帮助您快速学习和构建</st>
    **<st c="192">Django</st>** <st c="198">应用程序。</st> <st c="221">本书面向那些不需要 Django
    的所有细节，只需了解真正需要知道的部分。</st> <st c="345">本书结束时，您将能够自信地创建自己的</st> <st c="413">Django
    项目。</st>
- en: <st c="429">So, what’s Django?</st> <st c="449">Django</st> <st c="455">is a
    free, open-source web framework for building modern</st> **<st c="513">Python</st>**
    <st c="519">web applications.</st> <st c="538">Django helps you quickly build
    web apps by abstracting away many of the repetitive challenges involved in building
    a website, such as connecting to a database, handling security, enabling user
    authentication, creating URL routes, displaying content on a page through templates
    and forms, supporting multiple database backends, and setting up an</st> <st c="883">admin
    interface.</st>
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="429">那么，Django 是什么呢？</st> <st c="449">Django</st> <st c="455">是一个免费的、开源的
    Web 框架，用于构建现代</st> **<st c="513">Python</st>** <st c="519">Web 应用程序。</st> <st
    c="538">Django 通过抽象化构建网站时涉及的大量重复性挑战，如连接数据库、处理安全、启用用户认证、创建 URL 路由、通过模板和表单在页面上显示内容、支持多个数据库后端以及设置管理界面，帮助您快速构建
    Web 应用程序。</st>
- en: <st c="899">This reduction in repetitive tasks allows developers to focus on
    building a web application’s functionality, rather than reinventing the wheel
    for standard web</st> <st c="1060">application functions.</st>
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="899">这种减少重复性任务的做法使得开发者能够专注于构建 Web 应用程序的功能，而不是为标准 Web 应用程序功能重新发明轮子。</st>
    <st c="1060">。</st>
- en: <st c="1082">Django is one of the most popular frameworks available and is used
    by established companies such as</st> *<st c="1183">Instagram</st>*<st c="1192">,</st>
    *<st c="1194">Pinterest</st>*<st c="1203">,</st> *<st c="1205">Mozilla</st>*<st
    c="1212">, and</st> *<st c="1218">National Geographic</st>*<st c="1237">. It is
    also easy enough to be used by start-ups and to build</st> <st c="1299">personal
    projects.</st>
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1082">Django 是最受欢迎的框架之一，被像</st> *<st c="1183">Instagram</st>*<st c="1192">、</st>
    *<st c="1194">Pinterest</st>*<st c="1203">、</st> *<st c="1205">Mozilla</st>*<st
    c="1212">和</st> *<st c="1218">国家地理</st>*<st c="1237">这样的知名公司所使用。</st> <st c="1299">它也足够简单，可以用于初创公司和构建个人项目。</st>
- en: <st c="1317">There are other popular frameworks, such as Flask in Python and
    Express in JavaScript (for more information on Express, see</st> *<st c="1442">Beginning
    Node.js, Express & MongoDB Development</st>* <st c="1490">by Greg Lim:</st> [<st
    c="1504">https://www.amazon.com/dp/B07TWDNMHJ/</st>](https://www.amazon.com/dp/B07TWDNMHJ/)<st
    c="1541">).</st> <st c="1545">However, these frameworks only provide the minimum
    required functionality for a simple web page, and developers have to do more foundational
    work, such as installing and configuring third-party packages on their own for
    basic</st> <st c="1771">website functionality.</st>
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1317">还有其他流行的框架，例如 Python 中的 Flask 和 JavaScript 中的 Express（有关 Express
    的更多信息，请参阅 Greg Lim 的《<st c="1442">Node.js、Express 与 MongoDB 开发入门</st>》：<st c="1490">[https://www.amazon.com/dp/B07TWDNMHJ/](https://www.amazon.com/dp/B07TWDNMHJ/)）。</st>
    <st c="1541">。</st> <st c="1545">然而，这些框架只为简单的 Web 页面提供所需的最小功能，开发者必须进行更多基础工作，例如自行安装和配置第三方包以实现基本的网站功能。</st>
    <st c="1771">。</st>
- en: <st c="1793">In this chapter, we are going to get acquainted with the application
    we are going to build, using Django 5, and get ready to develop our project by
    installing and setting up everything we need.</st> <st c="1988">By the end of
    the chapter, you will have successfully created your</st> <st c="2055">development
    environment.</st>
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="1793">在本章中，我们将熟悉我们将要构建的应用程序，使用 Django 5，并通过安装和设置所需的一切来为开发项目做好准备。</st>
    <st c="1988">本章结束时，您将成功创建自己的</st> <st c="2055">开发环境。</st>
- en: <st c="2079">In this chapter, we will be covering the</st> <st c="2121">following
    topics:</st>
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2079">在本章中，我们将介绍以下主题：</st> <st c="2121">。</st>
- en: <st c="2138">Introducing and</st> <st c="2155">installing Python</st>
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2138">介绍和</st> <st c="2155">安装 Python</st>
- en: <st c="2172">Introducing and</st> <st c="2189">installing Django</st>
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2172">介绍和</st> <st c="2189">安装 Django</st>
- en: <st c="2206">Creating and running a</st> <st c="2230">Django project</st>
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2206">创建和运行一个</st> <st c="2230">Django 项目</st>
- en: <st c="2244">Understanding the Movies</st> <st c="2270">Store application</st>
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2244">理解电影</st> <st c="2270">存储应用程序</st>
- en: <st c="2287">Introducing Django</st> <st c="2307">MVT architecture</st>
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="2287">介绍 Django</st> <st c="2307">MVT 架构</st>
- en: <st c="2323">Technical requirements</st>
  id: totrans-14
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2323">技术要求</st>
- en: <st c="2346">In this chapter, we will use</st> **<st c="2376">Python 3.10+</st>**<st
    c="2388">.</st>
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2346">在本章中，我们将使用</st> **<st c="2376">Python 3.10+</st>**<st c="2388">。</st>
- en: <st c="2389">The code for this chapter is located</st> <st c="2427">at</st>
    [<st c="2430">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter01/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter01/moviesstore)<st
    c="2538">.</st>
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2389">本章的代码位于</st> <st c="2427">以下位置</st> [<st c="2430">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter01/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter01/moviesstore)<st
    c="2538">。</st>
- en: <st c="2539">The CiA video for this chapter can be found</st> <st c="2584">at</st>
    [<st c="2587">https://packt.link/ygUpr</st>](https://packt.link/ygUpr)
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2539">本章的 CiA 视频可以在</st> <st c="2584">以下位置找到</st> [<st c="2587">https://packt.link/ygUpr</st>](https://packt.link/ygUpr)
- en: <st c="2611">Introducing and installing Python</st>
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="2611">介绍和安装 Python</st>
- en: <st c="2645">Python is a high-level programming language (</st>[<st c="2691">https://www.python.org/</st>](https://www.python.org/)<st
    c="2715">), created in the late 1980s by Guido</st> <st c="2754">van Rossum.</st>
    <st c="2766">The name Python comes from the creator’s affection</st> <st c="2816">for
    the British comedy group Monty Python and not the “snake,” as is</st> <st c="2886">commonly
    believed.</st>
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2645">Python 是一种高级编程语言（</st>[<st c="2691">https://www.python.org/</st>](https://www.python.org/)<st
    c="2715">），由 Guido</st> <st c="2754">van Rossum 在 20 世纪 80 年代末期创建。</st> <st c="2766">Python
    的名字来源于创建者对英国喜剧团体 Monty Python 的喜爱，而不是像人们普遍认为的那样是“蛇”。</st> <st c="2816">The name
    Python comes from the creator’s affection</st> <st c="2816">for the British comedy
    group Monty Python and not the “snake,” as is</st> <st c="2886">commonly believed.</st>
- en: <st c="2904">Python has an open-source license, meaning that developers can
    modify, use, and redistribute its code for free without paying the</st> <st c="3035">original
    author.</st>
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="2904">Python 拥有开源许可，这意味着开发者可以免费修改、使用和重新分发其代码，无需支付</st> <st c="3035">原始作者的费用。</st>
- en: <st c="3051">Python is characterized as a friendly and easy-to-learn programming
    language.</st> <st c="3130">Python can be used to develop a wide range of applications,
    including web development, data analysis, artificial intelligence, scientific
    computing,</st> <st c="3279">and automation.</st>
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3051">Python 被描述为一种友好且易于学习的编程语言。</st> <st c="3130">Python 可以用于开发各种应用程序，包括网站开发、数据分析、人工智能、科学计算</st>
    <st c="3279">以及自动化。</st>
- en: <st c="3294">For now, let’s</st> <st c="3310">check whether we have Python installed
    and, if so, what version</st> <st c="3374">we have.</st>
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3294">目前，让我们</st> <st c="3310">检查是否已安装 Python，以及安装的版本</st> <st c="3374">是什么。</st>
- en: <st c="3382">If you are using a Mac, open your Terminal.</st> <st c="3427">If
    you are using Windows, open Command Prompt.</st> <st c="3474">For convenience,
    we will refer to both the Terminal and Command Prompt as</st> *<st c="3548">Terminal</st>*
    <st c="3556">throughout</st> <st c="3568">the book.</st>
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3382">如果您使用的是 Mac，请打开您的终端。</st> <st c="3427">如果您使用的是 Windows，请打开命令提示符。</st>
    <st c="3474">为了方便起见，我们将把终端和命令提示符统称为</st> *<st c="3548">终端</st> <st c="3556">全书。</st>
- en: <st c="3577">We will need to</st> <st c="3594">check whether we have at least
    Python 3.10 in order to use Django 5\.</st> <st c="3663">To do so, go to your
    Terminal and run the</st> <st c="3705">following commands:</st>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3577">为了使用 Django 5，我们需要</st> <st c="3594">检查是否至少安装了 Python 3.10。</st>
    <st c="3663">要这样做，请转到您的终端并运行以下命令：</st> <st c="3705">以下命令：</st>
- en: <st c="3724">For macOS,</st> <st c="3736">run this:</st>
  id: totrans-25
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3724">对于 macOS，</st> <st c="3736">运行以下命令：</st>
- en: '[PRE0]'
  id: totrans-26
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: <st c="3763">For Windows,</st> <st c="3777">run this:</st>
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="3763">对于 Windows，</st> <st c="3777">运行以下命令：</st>
- en: '[PRE1]'
  id: totrans-28
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: <st c="3803">This shows the version of Python you have installed.</st> <st c="3857">Make
    sure that the version is at least</st> *<st c="3896">3.10</st>*<st c="3900">.
    If it isn’t, get the latest version of</st> <st c="3941">Python by going to</st>
    [<st c="3960">https://www.python.org/downloads/</st>](https://www.python.org/downloads/)
    <st c="3993">and installing the version for your OS.</st> <st c="4034">For Windows,
    you must select the</st> **<st c="4067">Add python.exe to PATH</st>** <st c="4089">option
    (to ensure that the Python interpreter can be accessed from any directory in the
    command prompt or</st> *<st c="4196">Terminal</st>*<st c="4204">), as shown in</st>
    *<st c="4220">Figure 1</st>**<st c="4228">.1</st>*<st c="4230">:</st>
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="3803">这显示了您已安装的Python版本。</st> <st c="3857">请确保版本至少为</st> *<st c="3896">3.10</st>*<st
    c="3900">。如果不是，请访问</st> [<st c="3960">https://www.python.org/downloads/</st>](https://www.python.org/downloads/)
    <st c="3993">并安装适用于您的操作系统的版本。</st> <st c="4034">对于Windows，您必须选择</st> **<st c="4067">将python.exe添加到PATH</st>**
    <st c="4089">选项（以确保可以从命令提示符或</st> *<st c="4196">终端</st>*<st c="4204">中的任何目录访问Python解释器），如图</st>
    *<st c="4220">图1</st>**<st c="4228">.1</st>*<st c="4230">:</st>
- en: '![Figure 1.1 – Installing Python on Windows](img/B22457_01_01.jpg)'
  id: totrans-30
  prefs: []
  type: TYPE_IMG
  zh: '![图1.1 – 在Windows上安装Python](img/B22457_01_01.jpg)'
- en: <st c="4687">Figure 1.1 – Installing Python on Windows</st>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4687">图1.1 – 在Windows上安装Python</st>
- en: <st c="4728">After the installation, run the command again to check the version
    of</st> <st c="4799">Python installed.</st>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4728">安装后，再次运行该命令以检查已安装的Python版本。</st>
- en: <st c="4816">The output should reflect the latest version of Python, such as
    Python 3.12.2 (at the time of writing), as shown in</st> *<st c="4933">Figure
    1</st>**<st c="4941">.2</st>*<st c="4943">:</st>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="4816">输出应反映Python的最新版本，例如Python 3.12.2（撰写本文时），如图</st> *<st c="4933">图1</st>**<st
    c="4941">.2</st>*<st c="4943">:</st>
- en: '![Figure 1.2 – Checking the Python version on Windows](img/B22457_01_02.jpg)'
  id: totrans-34
  prefs: []
  type: TYPE_IMG
  zh: '![图1.2 – 检查Windows上的Python版本](img/B22457_01_02.jpg)'
- en: <st c="5077">Figure 1.2 – Checking the Python version on Windows</st>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5077">图1.2 – 检查Windows上的Python版本</st>
- en: <st c="5128">Now that we have Python</st> <st c="5152">installed, let’s move
    on to introducing and</st> <st c="5197">installing Django.</st>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5128">既然我们已经安装了Python</st> <st c="5152">，接下来我们将介绍并</st> <st c="5197">安装Django。</st>
- en: <st c="5215">Introducing and installing Django</st>
  id: totrans-37
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="5215">介绍和安装Django</st>
- en: <st c="5249">Django is a high-level</st> <st c="5273">Python web framework that
    encourages rapid development and clean, pragmatic design (</st>[<st c="5357">https://www.djangoproject.com/</st>](https://www.djangoproject.com/)<st
    c="5388">).</st> <st c="5392">Django makes it easier to build better web apps
    more quickly and with</st> <st c="5462">less code.</st>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5249">Django是一个高级</st> <st c="5273">Python Web框架，它鼓励快速开发和简洁、实用的设计（</st>[<st
    c="5357">https://www.djangoproject.com/</st>](https://www.djangoproject.com/)<st
    c="5388">）。</st> <st c="5392">Django使构建更好的Web应用更加快速，并且代码更少。</st>
- en: <st c="5472">There are several ways to install Django; we will use</st> `<st
    c="5527">pip</st>` <st c="5530">to install Django in this book.</st> `<st c="5682">pip</st>`
    <st c="5685">is automatically installed if you downloaded</st> <st c="5731">Python</st>
    <st c="5738">from</st> [<st c="5743">https://www.python.org/</st>](https://www.python.org/)<st
    c="5766">.</st>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5472">安装Django有几种方法；在这本书中，我们将使用</st> `<st c="5527">pip</st>` <st c="5530">来安装Django。</st>
    `<st c="5682">pip</st>` <st c="5685">如果您从</st> [<st c="5743">https://www.python.org/</st>](https://www.python.org/)<st
    c="5766">.</st>
- en: <st c="5767">First, check whether you have</st> `<st c="5798">pip</st>` <st
    c="5801">installed by going to the Terminal and running the</st> <st c="5853">following
    commands:</st>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5767">首先，通过转到终端并运行以下命令来检查您是否已安装</st> `<st c="5798">pip</st>` <st c="5801">：</st>
- en: <st c="5872">For macOS,</st> <st c="5884">run this:</st>
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5872">对于macOS，</st> <st c="5884">运行以下命令：</st>
- en: '[PRE2]'
  id: totrans-42
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: <st c="5898">For Windows,</st> <st c="5912">run this:</st>
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="5898">对于Windows，</st> <st c="5912">运行以下命令：</st>
- en: '[PRE3]'
  id: totrans-44
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: <st c="5925">If you have</st> `<st c="5938">pip</st>` <st c="5941">installed,
    the output should display a list of</st> `<st c="5989">pip</st>` <st c="5992">commands,
    as shown in</st> *<st c="6015">Figure 1</st>**<st c="6023">.3</st>*<st c="6025">:</st>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="5925">如果您已安装</st> `<st c="5938">pip</st>` <st c="5941">，输出应显示一个</st>
    `<st c="5989">pip</st>` <st c="5992">命令列表，如图</st> *<st c="6015">图1</st>**<st c="6023">.3</st>*<st
    c="6025">:</st>
- en: '![Figure 1.3 – Checking whether pip is installed on Windows](img/B22457_01_03.jpg)'
  id: totrans-46
  prefs: []
  type: TYPE_IMG
  zh: '![图1.3 – 检查Windows上是否已安装pip](img/B22457_01_03.jpg)'
- en: <st c="6164">Figure 1.3 – Checking whether pip is installed on Windows</st>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="6164">图1.3 – 检查Windows上是否已安装pip</st>
- en: <st c="6221">Next, to install Django, run the</st> <st c="6255">following commands:</st>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，要安装 Django，运行以下命令：<st c="6221">Next, to install Django, run the</st> <st
    c="6255">following commands:</st>
- en: <st c="6274">For macOS,</st> <st c="6286">run this:</st>
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 macOS，<st c="6274">For macOS,</st> <st c="6286">run this:</st>
- en: '[PRE4]'
  id: totrans-50
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: <st c="6320">For Windows,</st> <st c="6334">run this:</st>
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Windows，<st c="6320">For Windows,</st> <st c="6334">run this:</st>
- en: '[PRE5]'
  id: totrans-52
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: <st c="6367">The preceding command</st> <st c="6389">will retrieve the Django
    5.0 code version and install it on your machine.</st> <st c="6464">Note that there
    may be newer versions available when you’re reading this book.</st> <st c="6543">However,
    we recommend continuing to use Django 5.0 to ensure that the code in this book
    will function correctly.</st> <st c="6656">After installation, close and reopen</st>
    <st c="6693">your Terminal.</st>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令 <st c="6367">The preceding command</st> <st c="6389">will retrieve the
    Django 5.0 code version and install it on your machine.</st> <st c="6464">Note
    that there may be newer versions available when you’re reading this book.</st>
    <st c="6543">However, we recommend continuing to use Django 5.0 to ensure that
    the code in this book will function correctly.</st> <st c="6656">After installation,
    close and reopen</st> <st c="6693">your Terminal.</st>
- en: <st c="6707">To check whether you have installed Django, run the</st> <st c="6760">following
    commands.</st>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查您是否已安装 Django，运行以下命令。<st c="6707">To check whether you have installed Django,
    run the</st> <st c="6760">following commands.</st>
- en: <st c="6779">For macOS,</st> <st c="6791">run this:</st>
  id: totrans-55
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 macOS，<st c="6779">For macOS,</st> <st c="6791">run this:</st>
- en: '[PRE6]'
  id: totrans-56
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: <st c="6818">For Windows,</st> <st c="6832">run this:</st>
  id: totrans-57
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 对于 Windows，<st c="6818">For Windows,</st> <st c="6832">run this:</st>
- en: '[PRE7]'
  id: totrans-58
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: <st c="6858">Now, the output will show you all the Django commands you can use,
    as shown in</st> *<st c="6938">Figure 1</st>**<st c="6946">.4</st>*<st c="6948">:</st>
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，输出将显示你可以使用的所有 Django 命令，如图 <st c="6938">图 1</st>**<st c="6946">.4</st>*<st
    c="6948">：</st>
- en: '![Figure 1.4 – The Django module commands on macOS](img/B22457_01_04.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.4 – macOS 上的 Django 模块命令](img/B22457_01_04.jpg)'
- en: <st c="7513">Figure 1.4 – The Django module commands on macOS</st>
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.4 – macOS 上的 Django 模块命令 <st c="7513">Figure 1.4 – The Django module commands
    on macOS</st>
- en: <st c="7561">Over the course of the</st> <st c="7584">book, you will progressively
    be introduced to some of the</st> <st c="7643">preceding commands.</st>
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书的过程中，你将逐步被介绍一些先前的命令。<st c="7561">Over the course of the</st> <st c="7584">book,
    you will progressively be introduced to some of the</st> <st c="7643">preceding
    commands.</st>
- en: <st c="7662">Note</st>
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 注意 <st c="7662">Note
- en: <st c="7667">It is also common to use</st> **<st c="7693">virtual environments</st>**
    <st c="7713">(such as the</st> **<st c="7727">venv</st>** <st c="7731">module)
    to manage your Python and Django</st> <st c="7772">projects and dependencies.</st>
    <st c="7800">For now, we will not use venv to get started quickly on Django.</st>
    <st c="7864">We will learn how to use and configure venv at the end of</st> <st
    c="7922">this book.</st>
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 通常也使用 **<st c="7667">虚拟环境</st>** <st c="7693">（例如，</st> **<st c="7727">venv</st>**
    <st c="7731">模块）来管理您的 Python 和 Django</st> <st c="7772">项目及其依赖关系。</st> <st c="7800">目前，我们将不使用
    venv 来快速开始 Django。</st> <st c="7864">我们将在本书末尾学习如何使用和配置 venv。</st>
- en: <st c="7932">We have all the tools we need to create a Django project.</st>
    <st c="7991">Now, let’s move on to</st> <st c="8013">doing that.</st>
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经有了创建 Django 项目所需的所有工具。<st c="7932">We have all the tools we need to create
    a Django project.</st> <st c="7991">Now, let’s move on to</st> <st c="8013">doing
    that.</st>
- en: <st c="8024">Creating and running a Django project</st>
  id: totrans-66
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建和运行 Django 项目 <st c="8024">Creating and running a Django project</st>
- en: <st c="8062">Now that we have Django</st> <st c="8086">installed, we are ready
    to create our</st> <st c="8125">Django project.</st>
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经安装了 Django，我们准备好创建我们的 Django 项目。<st c="8062">Now that we have Django</st>
    <st c="8086">installed, we are ready to create our</st> <st c="8125">Django project.</st>
- en: <st c="8140">There are several ways to</st> <st c="8166">create Django projects.</st>
    <st c="8191">In this book, we will use</st> `<st c="8217">django-admin</st>`<st
    c="8229">.</st> **<st c="8231">django-admin</st>** <st c="8243">is Django’s</st>
    <st c="8256">command-line utility for administrative tasks.</st> <st c="8303">It</st>
    <st c="8305">provides various commands to help you create, manage, and interact
    with Django projects, applications, and other</st> <st c="8419">related components.</st>
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有几种方法可以创建 Django 项目。<st c="8140">There are several ways to</st> <st c="8166">create
    Django projects.</st> <st c="8191">In this book, we will use</st> `<st c="8217">django-admin</st>`<st
    c="8229">.</st> **<st c="8231">django-admin</st>** <st c="8243">是 Django 的</st>
    <st c="8256">命令行实用程序，用于管理任务。</st> <st c="8303">它</st> <st c="8305">提供了各种命令，帮助您创建、管理、交互
    Django 项目、应用程序和其他</st> <st c="8419">相关组件。</st>
- en: <st c="8438">In the Terminal, navigate to the folder where you want to create
    your project and run the</st> <st c="8529">following command:</st>
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 在终端中，导航到您想要创建项目的文件夹，并运行以下命令：<st c="8438">In the Terminal, navigate to the folder
    where you want to create your project and run the</st> <st c="8529">following
    command:</st>
- en: '[PRE8]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: <st c="8585">This will create a</st> `<st c="8605">moviesstore</st>` <st c="8616">folder
    in your current directory.</st> <st c="8651">This folder contains our Django application
    code.</st> <st c="8701">We will discuss its contents later.</st> <st c="8737">For
    now, let’s run our first website on the Django local</st> <st c="8794">web server.</st>
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8585">这将创建一个</st> `<st c="8605">moviesstore</st>` <st c="8616">文件夹在你的当前目录中。</st>
    <st c="8651">这个文件夹包含我们的Django应用程序代码。</st> <st c="8701">我们将在稍后讨论其内容。</st> <st c="8737">现在，让我们在我们的Django本地</st>
    <st c="8794">Web服务器上运行我们的第一个网站。</st>
- en: <st c="8805">In the Terminal, run the</st> `<st c="8831">cd</st>` <st c="8833">command
    to move</st> <st c="8850">into the</st> <st c="8859">created folder:</st>
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8805">在终端中，运行</st> `<st c="8831">cd</st>` <st c="8833">命令以进入</st> <st
    c="8850">创建的文件夹：</st>
- en: '[PRE9]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: <st c="8889">Then, run the</st> <st c="8904">following command:</st>
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="8889">然后，运行以下命令：</st>
- en: <st c="8922">For macOS,</st> <st c="8934">run this:</st>
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8922">对于macOS，</st> <st c="8934">运行以下命令：</st>
- en: '[PRE10]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: <st c="8971">For Windows,</st> <st c="8985">run this:</st>
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="8971">对于Windows，</st> <st c="8985">运行以下命令：</st>
- en: '[PRE11]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: <st c="9021">When you run the aforementioned commands, you start the local web
    server on your machine (for local development purposes).</st> <st c="9145">There
    will be a URL link –</st> `<st c="9172">http://127.0.0.1:8000/</st>` <st c="9194">(equivalent
    to</st> `<st c="9210">http://localhost:8000</st>`<st c="9231">).</st> <st c="9235">Open
    this link in a browser, and you will see the default landing page, as shown in</st>
    *<st c="9319">Figure 1</st>**<st c="9327">.5</st>*<st c="9329">:</st>
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9021">当你运行上述命令时，你将在你的机器上启动本地Web服务器（用于本地开发目的）。</st> <st c="9145">将会有一个URL链接——</st>
    `<st c="9172">http://127.0.0.1:8000/</st>` <st c="9194">(相当于</st> `<st c="9210">http://localhost:8000</st>`<st
    c="9231">)。</st> <st c="9235">在浏览器中打开此链接，你将看到默认的着陆页面，如图</st> *<st c="9319">图1</st>**<st
    c="9327">.5</st>*<st c="9329">所示：</st>
- en: '![Figure 1.5 – The landing page of the Django project](img/B22457_01_05.jpg)'
  id: totrans-80
  prefs: []
  type: TYPE_IMG
  zh: '![图1.5 – Django项目的着陆页面](img/B22457_01_05.jpg)'
- en: <st c="9780">Figure 1.5 – The landing page of the Django project</st>
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9780">图1.5 – Django项目的着陆页面</st>
- en: <st c="9831">This means</st> <st c="9843">that your local web server is running
    and serving the landing</st> <st c="9904">page.</st> <st c="9911">Sometimes, you
    will need to stop the server in order to run other Python commands.</st> <st c="9994">To
    stop the local server, press</st> *<st c="10026">Ctrl</st>* <st c="10030">+</st>
    *<st c="10033">C</st>* <st c="10034">in</st> <st c="10038">the Terminal.</st>
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="9831">这意味着</st> <st c="9843">你的本地Web服务器正在运行并服务着陆页面。</st> <st c="9904">有时，你需要停止服务器以运行其他Python命令。</st>
    <st c="9911">要停止本地服务器，请在</st> *<st c="10026">Ctrl</st>* <st c="10030">+</st> *<st
    c="10033">C</st>* <st c="10034">在</st> <st c="10038">终端中按下。</st>
- en: <st c="10051">We executed our</st> <st c="10067">first Django project successfully.</st>
    <st c="10103">Now, it is time to introduce the application we will develop in</st>
    <st c="10167">this book.</st>
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10051">我们已经成功执行了我们的</st> <st c="10067">第一个Django项目。</st> <st c="10103">现在，是时候介绍本书中将开发的程序了。</st>
- en: <st c="10177">Understanding the Movies Store application</st>
  id: totrans-84
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="10177">理解电影商店应用程序</st>
- en: <st c="10220">The use of running examples is a prevalent approach found in programming
    literature.</st> <st c="10306">The running example</st> <st c="10326">serves as
    a means to illustrate the principles of a methodology, process, tool, or technique.</st>
    <st c="10420">In this book, we will define a</st> *<st c="10451">Movies Store</st>*
    <st c="10463">running example.</st> <st c="10481">We will revisit this running
    example throughout the book to explain many of the Django concepts and elements
    in a</st> <st c="10595">practical way.</st>
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10220">在编程文献中，使用运行示例是一种常见的做法。</st> <st c="10306">运行示例</st> <st c="10326">作为说明方法论、过程、工具或技术原理的手段。</st>
    <st c="10420">在这本书中，我们将定义一个</st> *<st c="10451">电影商店</st>* <st c="10463">运行示例。</st>
    <st c="10481">我们将全书回顾这个运行示例，以实际方式解释许多Django概念和元素。</st>
- en: <st c="10609">The</st> *<st c="10614">Movies Store</st>* <st c="10626">will
    be a web-based platform where users access information about movies and can place
    orders to</st> <st c="10724">purchase them.</st>
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10609">“</st> *<st c="10614">电影商店</st>* ” <st c="10626">将是一个基于Web的平台，用户可以访问有关电影的信息，并可以下订单来</st>
    <st c="10724">购买它们。</st>
- en: <st c="10738">Now, let’s outline the application’s scope for this</st> <st c="10791">particular
    app:</st>
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="10738">现在，让我们概述这个特定应用程序的应用范围：</st> <st c="10791">。</st>
- en: <st c="10806">The</st> **<st c="10811">Home page</st>** <st c="10820">will feature</st>
    <st c="10834">a</st> <st c="10836">welcoming message.</st>
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**主页**将展示一个**欢迎信息**。'
- en: <st c="10854">The</st> **<st c="10859">About page</st>** <st c="10869">will
    provide</st> <st c="10883">details about the</st> *<st c="10901">Movies Store</st>*<st
    c="10913">.</st>
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**关于页面**将提供关于**电影商店**的详细信息。'
- en: <st c="10914">The</st> **<st c="10919">Movies page</st>** <st c="10930">will
    exhibit</st> <st c="10943">information on available movies and include a filter
    to search movies by name.</st> <st c="11023">Additionally, users can click on
    a specific movie to view its details and</st> <st c="11097">post reviews.</st>
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**电影页面**将展示可用的电影信息，并包括一个按名称搜索电影的过滤器。此外，用户可以点击特定的电影来查看其详细信息并**发表评论**。'
- en: <st c="11110">The</st> **<st c="11115">Cart page</st>** <st c="11124">will showcase
    the</st> <st c="11142">movies added to the cart, along with the total price to
    be paid.</st> <st c="11208">Users</st> <st c="11214">can also remove movies from
    the cart and proceed</st> <st c="11263">with purchases.</st>
  id: totrans-91
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**购物车页面**将展示添加到购物车中的电影以及需要支付的总价。<st c="11208">用户</st>还可以从购物车中删除电影并继续购买。'
- en: <st c="11278">The</st> **<st c="11283">Register page</st>** <st c="11296">will
    present a</st> <st c="11312">form enabling users to sign up</st> <st c="11343">for
    accounts.</st>
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**注册页面**将提供一个允许用户**注册账户**的表单。'
- en: <st c="11356">The</st> **<st c="11361">Login page</st>** <st c="11371">will
    present</st> <st c="11384">a form allowing users to log in to</st> <st c="11420">the
    application.</st>
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**登录页面**将提供一个允许用户**登录应用程序**的表单。'
- en: <st c="11436">The</st> **<st c="11441">Orders page</st>** <st c="11452">will
    display</st> <st c="11466">the orders placed by the</st> <st c="11491">logged-in
    user.</st>
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**订单页面**将显示已登录用户**下过的订单**。'
- en: <st c="11506">The</st> **<st c="11511">Admin panel</st>** <st c="11522">will
    encompass</st> <st c="11537">sections to manage the store’s information, including
    creating, updating, deleting, and</st> <st c="11626">listing information.</st>
  id: totrans-95
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**管理员面板**将包括管理商店信息的部分，包括创建、更新、删除和**列出信息**。'
- en: <st c="11646">The</st> *<st c="11651">Movies Store</st>* <st c="11663">will
    be developed using Django (Python), with a SQLite database and Bootstrap (a CSS
    framework).</st> <st c="11761">Further details about these components will be
    covered in the</st> <st c="11823">forthcoming chapters.</st>
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '**电影商店**将使用Django（Python）、SQLite数据库和Bootstrap（一个CSS框架）开发。关于这些组件的更多细节将在接下来的章节中介绍。'
- en: <st c="11844">In</st> *<st c="11848">Figure 1</st>**<st c="11856">.6</st>*<st
    c="11858">, you’ll find a class diagram outlining the application’s scope and
    design.</st> <st c="11934">The</st> *<st c="11938">user</st>* <st c="11942">class
    is depicted with its associated data (such as an id, username, email, and password)
    and is capable of placing</st> *<st c="12059">orders</st>*<st c="12065">. Each</st>
    *<st c="12072">order</st>* <st c="12077">consists of one or more</st> *<st c="12102">items</st>*<st
    c="12107">, which are linked to individual</st> *<st c="12140">movies</st>*<st
    c="12146">. Each</st> *<st c="12153">movie</st>* <st c="12158">will possess its
    respective data (including an id, name, price, description, and image).</st> <st
    c="12248">Lastly,</st> *<st c="12256">users</st>* <st c="12261">have the ability
    to create</st> *<st c="12289">reviews</st>* <st c="12296">for</st> *<st c="12301">movies</st>*<st
    c="12307">.</st>
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 在**图1.6**中，你可以找到一个概述应用程序范围和设计的类图。<st c="11934">用户</st>类展示了其关联的数据（例如id、用户名、电子邮件和密码），并且能够**下订单**。每个**订单**由一个或多个**商品**组成，这些商品与单个**电影**相关联。每个**电影**将拥有其各自的数据（包括id、名称、价格、描述和图片）。最后，**用户**有创建**评论**为**电影**的能力。
- en: '![Figure 1.6 – The Movies Store class diagram](img/B22457_01_06.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.6 – 电影商店类图](img/B22457_01_06.jpg)'
- en: <st c="12664">Figure 1.6 – The Movies Store class diagram</st>
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12664">图 1.6 – 电影商店类图</st>
- en: <st c="12707">This book does not delve into the intricacies of class diagrams;
    hence, we won’t elaborate on additional details within the diagram (you can refer
    to this link for additional information about class diagrams:</st> [<st c="12917">https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/</st>](https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/)<st
    c="13012">).</st> <st c="13016">As you progress through the book, you’ll notice
    the correlation between code and this diagram.</st> <st c="13111">Serving as a</st>
    <st c="13123">blueprint, this diagram guides the construction of</st> <st c="13175">our
    application.</st>
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="12707">本书不会深入探讨类图的复杂性；因此，我们不会详细说明图中的额外细节（您可以参考以下链接获取有关类图的更多信息：</st> [<st
    c="12917">https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/</st>](https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/)<st
    c="13012">）。</st> <st c="13016">随着您阅读本书的深入，您会注意到代码与这张图之间的关联。</st> <st c="13111">作为一份蓝图，这张图指导着我们应用程序的构建。</st>
- en: <st c="13191">Note</st>
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13191">注意</st>
- en: '<st c="13196">Creating a class diagram before commencing coding aids in comprehending
    the application’s scope and identifying crucial data points.</st> <st c="13330">Additionally,
    it facilitates understanding the interconnections among various elements of the
    application.</st> <st c="13437">This diagram can be shared with team members or
    colleagues for feedback, allowing for adjustments as necessary.</st> <st c="13549">Due
    to its nature as a diagram, modifications can be implemented quickly.</st> <st
    c="13623">Otherwise, once the project has been coded, the cost of relocating data
    from one class to another increases significantly.</st> <st c="13746">Check the
    following statement from the book</st> *<st c="13790">Building Microservices</st>*
    <st c="13812">by</st> *<st c="13816">Newman</st>*<st c="13822">,</st> *<st c="13824">S.</st>*
    <st c="13826">(2015): “</st>*<st c="13836">I tend to do much of my thinking in
    the place where the cost of change and the cost of mistakes is as low as it can
    be:</st>* *<st c="13957">the whiteboard.</st>*<st c="13972">”</st>'
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13196">在开始编码之前创建类图有助于理解应用程序的范围并识别关键数据点。</st> <st c="13330">此外，它有助于理解应用程序中各个元素之间的相互关系。</st>
    <st c="13437">此图可以与团队成员或同事分享以获取反馈，并根据需要做出调整。</st> <st c="13549">由于其作为图的特点，修改可以迅速实施。</st>
    <st c="13623">请查看书中以下陈述</st> *<st c="13790">《构建微服务》</st> * <st c="13812">由</st>
    *<st c="13816">纽曼</st> *<st c="13822">，</st> *<st c="13824">S.</st>* <st c="13826">（2015）:</st>
    “</st>*<st c="13836">我倾向于在变更成本和错误成本尽可能低的地方进行大量思考：</st>* *<st c="13957">白板。</st>*<st
    c="13972">”</st>
- en: <st c="13974">Based on the previous scope, we will build a</st> *<st c="14019">Movies
    Store</st>* <st c="14031">app that will allow users to view and search for movies,
    as shown in</st> *<st c="14101">Figure 1</st>**<st c="14109">.7</st>*<st c="14111">:</st>
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="13974">基于之前的范围，我们将构建一个</st> *<st c="14019">电影商店</st> * <st c="14031">应用程序，允许用户查看和搜索电影，如图
    *<st c="14101">图 1</st>**<st c="14109">.7</st>*<st c="14111">：</st>
- en: '![Figure 1.7 – The movies page with search functionality](img/B22457_01_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.7 – 带搜索功能的电影页面](img/B22457_01_07.jpg)'
- en: <st c="14189">Figure 1.7 – The movies page with search functionality</st>
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14189">图 1.7 – 带搜索功能的电影页面</st>
- en: <st c="14243">Users will be able to sign</st> <st c="14270">up, as shown in</st>
    *<st c="14287">Figure 1</st>**<st c="14295">.8</st>*<st c="14297">:</st>
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14243">用户将能够注册，如图 *<st c="14287">图 1</st>**<st c="14295">.8</st>*<st
    c="14297">：</st>
- en: '![Figure 1.8 – The Sign Up page](img/B22457_01_08.jpg)'
  id: totrans-107
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.8 – 注册页面](img/B22457_01_08.jpg)'
- en: <st c="14399">Figure 1.8 – The Sign Up page</st>
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14399">图 1.8 – 注册页面</st>
- en: <st c="14428">Users will be able</st> <st c="14447">to log in, add movies to
    the cart, and make purchases, as shown in</st> *<st c="14515">Figure 1</st>**<st
    c="14523">.9</st>*<st c="14525">:</st>
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14428">用户将能够</st> <st c="14447">登录，将电影添加到购物车，并进行购买，如图 *<st c="14515">图
    1</st>**<st c="14523">.9</st>*<st c="14525">：</st>
- en: '![Figure 1.9 – The shopping cart page](img/B22457_01_09.jpg)'
  id: totrans-110
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.9 – 购物车页面](img/B22457_01_09.jpg)'
- en: <st c="14692">Figure 1.9 – The shopping cart page</st>
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14692">图 1.9 – 购物车页面</st>
- en: <st c="14727">Users</st> <st c="14733">will also be able to list, create, edit,
    and delete movie reviews, as shown in</st> *<st c="14813">Figure 1</st>**<st c="14821">.10</st>*<st
    c="14824">:</st>
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="14727">用户</st> <st c="14733">还将能够列出、创建、编辑和删除电影评论，如图 <st c="14813">图 1</st>**<st
    c="14821">.10</st>**<st c="14824"> 所示：</st>
- en: '![Figure 1.10 – A specific movie page with its reviews](img/B22457_01_10.jpg)'
  id: totrans-113
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.10 – 一个带有其评论的具体电影页面](img/B22457_01_10.jpg)'
- en: <st c="15002">Figure 1.10 – A specific movie page with its reviews</st>
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15002">图 1.10 – 一个带有其评论的具体电影页面</st>
- en: <st c="15054">Many other functionalities</st> <st c="15081">will be developed
    and explained across the book.</st> <st c="15131">Now, let’s see the architecture
    we will use to construct the</st> *<st c="15192">Movies</st>* *<st c="15199">Store</st>*
    <st c="15204">application.</st>
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15054">本书中还将开发并解释许多其他功能。</st> <st c="15081">现在，让我们看看我们将用于构建 *<st c="15192">电影</st>
    * *<st c="15199">商店</st> * <st c="15204">应用程序</st> 的架构。</st>
- en: <st c="15217">Introducing the Django MVT architecture</st>
  id: totrans-116
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="15217">介绍 Django MVT 架构</st>
- en: <st c="15257">There are various methodologies and approaches to design and code
    web applications.</st> <st c="15342">One approach involves consolidating</st>
    <st c="15377">all code into a single file to construct the entire web application.</st>
    <st c="15447">However, finding errors within such a file, often comprising thousands
    of lines of code, can be incredibly challenging.</st> <st c="15567">Alternatively,
    other strategies distribute code across different files and directories.</st>
    <st c="15655">Additionally, some approaches segment an application into multiple
    smaller applications dispersed across several servers, although managing the distribution
    of these servers presents its own set</st> <st c="15850">of challenges.</st>
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15257">设计和管理网络应用程序有各种方法和途径。</st> <st c="15342">其中一种方法是将所有代码合并到一个文件中，以构建整个网络应用程序。</st>
    <st c="15377">然而，在包含数千行代码的此类文件中查找错误可能极具挑战性。</st> <st c="15447">另一种策略是将代码分散到不同的文件和目录中。</st>
    <st c="15567">此外，一些方法将应用程序分割成多个较小的应用程序，这些应用程序分散在多个服务器上，尽管管理这些服务器的分布也带来了一组自己的挑战。</st>
    <st c="15655">此外，一些方法将应用程序分割成多个较小的应用程序，这些应用程序分散在多个服务器上，尽管管理这些服务器的分布也带来了一组自己的挑战。</st>
    <st c="15850">管理这些服务器的分布也带来了一组自己的挑战。</st>
- en: <st c="15864">Organizing your code effectively presents challenges.</st> <st
    c="15919">This is why developers and computer scientists have created software
    architectural patterns.</st> **<st c="16012">Software architectural patterns</st>**
    <st c="16043">offer structural</st> <st c="16061">frameworks or layouts to address
    common software design issues.</st> <st c="16125">By leveraging these patterns,
    start-ups and inexperienced developers can avoid reinventing solutions for every
    new project.</st> <st c="16249">Various architectural patterns exist, including</st>
    **<st c="16297">Model-View-Controller</st>** <st c="16318">(</st>**<st c="16320">MVC</st>**<st
    c="16323">),</st> **<st c="16327">Model-View-Template</st>** <st c="16346">(</st>**<st
    c="16348">MVT</st>**<st c="16351">), layers, service-oriented, and microservices.</st>
    <st c="16400">Each pattern comes with its</st> <st c="16428">own set of pros and
    cons.</st> <st c="16454">Many</st> <st c="16458">frameworks, such as Django, adhere
    to specific patterns in constructing</st> <st c="16531">their applications.</st>
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="15864">有效地组织代码会带来挑战。</st> <st c="15919">这就是为什么开发人员和计算机科学家创建了软件架构模式。</st>
    **<st c="16012">软件架构模式</st>** <st c="16043">提供了结构化框架或布局来解决常见的软件设计问题。</st> <st
    c="16125">通过利用这些模式，初创公司和经验不足的开发者可以避免在每个新项目中重新发明解决方案。</st> <st c="16249">存在各种架构模式，包括**<st
    c="16297">模型-视图-控制器</st>** <st c="16318">(**<st c="16320">MVC</st>**<st c="16323">)**，**<st
    c="16327">模型-视图-模板</st>** <st c="16346">(**<st c="16348">MVT</st>**<st c="16351">)**，层、面向服务、和微服务。</st>
    <st c="16400">每种模式都有自己的</st> <st c="16428">优缺点。</st> <st c="16454">许多</st> <st
    c="16458">框架，如 Django，在构建其应用程序时遵循特定的模式。</st>
- en: <st c="16550">In the case of Django, Django is</st> <st c="16583">based on the
    MVT pattern.</st> <st c="16610">This pattern is similar to MVC but with some differences
    in the responsibilities of</st> <st c="16694">each component:</st>
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="16550">在 Django 的情况下，Django 是基于 MVT 模式的。</st> <st c="16583">这种模式与 MVC
    类似，但在每个组件的责任上有所不同：</st>
- en: '**<st c="16709">Models</st>**<st c="16716">: The model represents</st> <st
    c="16739">the data structure.</st> <st c="16760">In Django, models are Python
    classes that define the structure of the data and how it interacts with the database.</st>
    <st c="16875">Models handle</st> <st c="16888">tasks such as querying a database,
    performing</st> **<st c="16935">CRUD</st>** <st c="16939">(</st>**<st c="16941">Create,
    Read, Update, Delete</st>**<st c="16969">) operations, and enforcing data validation.</st>
    <st c="17015">In the case of the</st> *<st c="17034">Movies Store</st>* <st c="17046">app,</st>
    *<st c="17052">Movie</st>*<st c="17057">,</st> *<st c="17059">Review</st>*<st
    c="17065">,</st> *<st c="17067">Order</st>* <st c="17072">and the other classes
    from our class diagram will be coded as</st> <st c="17135">Django models.</st>'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="16709">模型</st>**<st c="16716">：模型表示</st> <st c="16739">数据结构。</st>
    <st c="16760">在 Django 中，模型是定义数据结构和它与数据库交互方式的 Python 类。</st> <st c="16875">模型处理</st>
    <st c="16888">查询数据库、执行</st> **<st c="16935">CRUD</st>** <st c="16939">（</st>**<st
    c="16941">创建、读取、更新、删除</st>**<st c="16969">）操作以及执行数据验证等任务。</st> <st c="17015">在
    *<st c="17034">电影商店</st>** <st c="17046">应用程序的情况下，*<st c="17052">电影</st>**<st
    c="17057">、*<st c="17059">评论</st>**<st c="17065">、*<st c="17067">订单</st>** <st
    c="17072">以及我们类图中的其他类将被编码为</st> <st c="17135">Django 模型</st>。</st>'
- en: '**<st c="17149">Views</st>**<st c="17155">: Views in Django are responsible
    for processing user requests and returning appropriate</st> <st c="17244">responses.</st>
    <st c="17256">Views typically receive HTTP requests from clients, fetch data from
    the database using models, and render templates to generate HTML responses.</st>
    <st c="17400">In Django, views are Python functions or classes that accept HTTP
    requests and return HTTP responses.</st> <st c="17502">In the case of the</st>
    *<st c="17521">Movies Store</st>* <st c="17533">app, we will create views and
    functions to handle the movies, accounts, and cart,</st> <st c="17616">among others.</st>'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="17149">视图</st>**<st c="17155">：Django 中的视图负责处理用户请求并返回适当的</st> <st
    c="17244">响应。</st> <st c="17256">视图通常接收来自客户端的 HTTP 请求，使用模型从数据库中获取数据，并渲染模板以生成 HTML
    响应。</st> <st c="17400">在 Django 中，视图是接受 HTTP 请求并返回 HTTP 响应的 Python 函数或类。</st>
    <st c="17502">在 *<st c="17521">电影商店</st>** <st c="17533">应用程序的情况下，我们将创建视图和函数来处理电影、账户和购物车等。</st>
    <st c="17616">。</st>'
- en: '**<st c="17629">Templates</st>**<st c="17639">: Templates</st> <st c="17652">are
    used to generate HTML dynamically.</st> <st c="17691">They contain the application’s
    user interface and define how data from the views should be displayed to the users.</st>
    <st c="17806">In the case of the</st> *<st c="17825">Movies Store</st>* <st c="17837">app,
    we will create a template to allow users to log in, a template to list movies,
    and a template to display the shopping cart,</st> <st c="17967">among others.</st>'
  id: totrans-122
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**<st c="17629">模板</st>**<st c="17639">：模板用于动态生成 HTML。</st> <st c="17652">它们包含应用程序的用户界面，并定义了视图中的数据应该如何显示给用户。</st>
    <st c="17691">在 *<st c="17825">电影商店</st>** <st c="17837">应用程序的情况下，我们将创建一个允许用户登录的模板，一个列出电影的模板，以及一个显示购物车的模板等。</st>
    <st c="17967">。</st>'
- en: <st c="17980">The MVT pattern offers several benefits such as enhanced code
    separation, facilitated collaboration among multiple team members, simplified
    error identification, increased code reusability, and improved maintainability.</st>
    *<st c="18201">Figure 1</st>**<st c="18209">.11</st>* <st c="18212">illustrates
    the software architecture of the</st> *<st c="18258">Movies Store</st>*<st c="18270">,
    which we will develop throughout this book.</st> <st c="18316">While it may seem
    overwhelming now, you will understand</st> <st c="18372">the intricacies of this
    architecture by the book’s conclusion.</st> <st c="18435">We will delve deeper
    into the architecture in the</st> <st c="18485">final chapters.</st>
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: MVT 模式提供了诸如代码分离增强、促进多个团队成员之间的协作、简化错误识别、提高代码重用性和改进可维护性等好处。</st> *<st c="18201">图
    1</st>**<st c="18209">.11</st>** <st c="18212">展示了我们将在这本书中开发的 *<st c="18258">电影商店</st>**<st
    c="18270">的软件架构。</st> <st c="18316">虽然现在可能看起来令人不知所措，但到本书结束时，你将理解这个架构的复杂性。</st>
    <st c="18435">我们将在最后几章中更深入地探讨架构。</st>
- en: '![Figure 1.11 – The Movies Store software architecture diagram](img/B22457_01_11.jpg)'
  id: totrans-124
  prefs: []
  type: TYPE_IMG
  zh: '![图 1.11 – 电影商店软件架构图](img/B22457_01_11.jpg)'
- en: <st c="18926">Figure 1.11 – The Movies Store software architecture diagram</st>
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 图 1.11 – 电影商店软件架构图
- en: <st c="18986">Let’s briefly analyze</st> <st c="19009">this</st> <st c="19014">architecture:</st>
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="18986">让我们简要分析</st> <st c="19009">这个</st> <st c="19014">架构：</st>
- en: <st c="19027">Positioned on the left are the clients, which are the users of
    our application, who use browsers on mobile or desktop devices.</st> <st c="19155">These
    clients establish connections with the application via the</st> **<st c="19220">Hypertext
    Transfer Protocol</st>** <st c="19247">(</st>**<st c="19249">HTTP</st>**<st c="19253">),
    providing users</st> <st c="19272">with a means to interact with our</st> <st
    c="19307">web application.</st>
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 位于左侧的是客户端，它们是我们应用程序的用户，使用移动或桌面设备上的浏览器。</st> <st c="19155">这些客户端通过</st> **<st
    c="19220">超文本传输协议</st>** <st c="19247">(</st>**<st c="19249">HTTP</st>**<st c="19253">)与应用程序建立连接，为用户提供与我们的</st>
    <st c="19307">Web应用程序交互的手段。</st>
- en: <st c="19323">On the right side, we have the server, which hosts our</st> <st
    c="19379">application code.</st>
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19323">在右侧，我们有服务器，它托管我们的</st> <st c="19379">应用程序代码。</st>
- en: <st c="19396">All client interactions first pass for a project-level URL file
    called</st> `<st c="19468">urls.py</st>`<st c="19475">. This file is located in
    the main project folder called</st> `<st c="19532">moviesstore/</st>`<st c="19544">.
    URLs will be explored in</st> [*<st c="19571">Chapter 2</st>*](B22457_02.xhtml#_idTextAnchor024)<st
    c="19580">. This project folder also contains a</st> `<st c="19618">templates/</st>`
    <st c="19628">folder in which we will design a reusable base template.</st> <st
    c="19686">Base templates will be explored in</st> [*<st c="19721">Chapter 3</st>*](B22457_03.xhtml#_idTextAnchor041)<st
    c="19730">.</st>
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19396">所有客户端交互首先传递给一个名为</st> `<st c="19468">urls.py</st>`<st c="19475">的项目级别URL文件。</st>
    该文件位于名为</st> `<st c="19532">moviesstore/</st>`<st c="19544">的主项目文件夹中。</st> URLs将在</st>
    [*<st c="19571">第二章</st>*](B22457_02.xhtml#_idTextAnchor024)<st c="19580">中探讨。</st>
    此项目文件夹还包含一个</st> `<st c="19618">templates/</st>` <st c="19628">文件夹，我们将在此设计一个可重用的基础模板。</st>
    <st c="19686">基础模板将在</st> [*<st c="19721">第三章</st>*](B22457_03.xhtml#_idTextAnchor041)<st
    c="19730">中探讨。</st>
- en: <st c="19731">The project-level URL file passes the interaction to an app-level
    URL file.</st> <st c="19808">For this project, we will design and implement four
    Django apps –</st> *<st c="19874">home</st>*<st c="19878">,</st> *<st c="19880">movies</st>*<st
    c="19886">,</st> *<st c="19888">cart</st>*<st c="19892">, and</st> *<st c="19898">accounts</st>*<st
    c="19906">. Django apps will be explored in</st> [*<st c="19940">Chapter 2</st>*](B22457_02.xhtml#_idTextAnchor024)<st
    c="19949">.</st>
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19731">项目级别的URL文件将交互传递给应用级别的URL文件。</st> <st c="19808">对于这个项目，我们将设计和实现四个Django应用——</st>
    *<st c="19874">主页</st>*<st c="19878">,</st> *<st c="19880">电影</st>*<st c="19886">,</st>
    *<st c="19888">购物车</st>*<st c="19892">，以及</st> *<st c="19898">账户</st>*<st c="19906">。Django应用将在</st>
    [*<st c="19940">第二章</st>*](B22457_02.xhtml#_idTextAnchor024)<st c="19949">中探讨。</st>
- en: <st c="19950">Each app-level URL file passes the interaction to a</st> `<st
    c="20003">views.py</st>` <st c="20011">file.</st> <st c="20018">Views will be
    explored in</st> [*<st c="20044">Chapter 2</st>*](B22457_02.xhtml#_idTextAnchor024)<st
    c="20053">.</st>
  id: totrans-131
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="19950">每个应用级别的URL文件将交互传递给一个</st> `<st c="20003">views.py</st>` <st c="20011">文件。</st>
    <st c="20018">视图将在</st> [*<st c="20044">第二章</st>*](B22457_02.xhtml#_idTextAnchor024)<st
    c="20053">中探讨。</st>
- en: <st c="20054">Views communicate with models, if required, and pass information
    to the templates, which are finally delivered to the clients as HTML, CSS, and
    JS code.</st> <st c="20208">Templates will be explored in</st> [*<st c="20238">Chapter
    2</st>*](B22457_02.xhtml#_idTextAnchor024)<st c="20247">, and models will be explored
    in</st> [*<st c="20280">Chapter 5</st>*](B22457_05.xhtml#_idTextAnchor088)<st
    c="20289">.</st>
  id: totrans-132
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: <st c="20054">视图如果需要，会与模型通信，并将信息传递给模板，最终将HTML、CSS和JS代码作为HTML、CSS和JS代码发送到客户端。</st>
    <st c="20208">模板将在</st> [*<st c="20238">第二章</st>*](B22457_02.xhtml#_idTextAnchor024)<st
    c="20247">中探讨，而模型将在</st> [*<st c="20280">第五章</st>*](B22457_05.xhtml#_idTextAnchor088)<st
    c="20289">中探讨。</st>
- en: <st c="20290">In</st> *<st c="20294">Figure 1</st>**<st c="20302">.11</st>*<st
    c="20305">, the</st> **<st c="20311">Model</st>**<st c="20316">,</st> **<st c="20318">View</st>**<st
    c="20322">, and</st> **<st c="20328">Template</st>** <st c="20336">layers are
    highlighted in gray, representing the common architectural pattern used in Django,
    which will be utilized throughout this book.</st> <st c="20476">We</st> <st c="20479">have
    four models corresponding to the classes defined in our class diagram (as previously
    shown in</st> *<st c="20578">Figure 1</st>**<st c="20586">.6</st>*<st c="20588">).</st>
    <st c="20592">The user model does not appear in this diagram because we will reuse
    a built-in Django</st> <st c="20679">user model.</st>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20290">在</st> *<st c="20294">图1</st>**<st c="20302">.11</st>*<st c="20305">中，</st>
    **<st c="20311">模型</st>**<st c="20316">，**<st c="20318">视图</st>**<st c="20322">，和</st>
    **<st c="20328">模板</st>** <st c="20336">层以灰色突出显示，代表了Django中常用的架构模式，本书将使用这一模式。</st>
    <st c="20476">我们</st> <st c="20479">有四个模型对应于我们在类图中定义的类（如前所述在</st> *<st c="20578">图1</st>**<st
    c="20586">.6</st>*<st c="20588">中所示）。</st> <st c="20592">用户模型没有出现在这个图中，因为我们将会重用内置的Django</st>
    <st c="20679">用户模型。</st>
- en: <st c="20690">Therefore, as mentioned earlier, there are different approaches
    to implementing web applications with Django.</st> <st c="20801">There are even
    different ways to implement a Django MVT architecture.</st> <st c="20871">In the
    following chapters, we will see the advantages of adopting an MVT architecture,
    as presented in</st> *<st c="20974">Figure 1</st>**<st c="20982">.11</st>*<st
    c="20985">.</st>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20690">因此，如前所述，使用Django实现Web应用有不同的方法。</st> <st c="20801">甚至有不同方式来实现Django
    MVT架构。</st> <st c="20871">在接下来的章节中，我们将看到采用MVT架构的优势，如图</st> *<st c="20974">图1</st>**<st
    c="20982">.11</st>*<st c="20985">所示。</st>
- en: <st c="20986">Summary</st>
  id: totrans-135
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: <st c="20986">总结</st>
- en: <st c="20994">In this chapter, we learned how to install and use Python,</st>
    `<st c="21054">pip</st>`<st c="21057">, and Django.</st> <st c="21071">We also
    learned how to create a new Django project and run a Django local web server.</st>
    <st c="21157">Then, we explained the scope of the</st> *<st c="21193">Movies Store</st>*
    <st c="21205">project.</st> <st c="21215">We also illustrated the application
    data and its relationships through a class diagram.</st> <st c="21303">Additionally,
    we presented an architecture diagram that showed the main components and elements
    of the</st> *<st c="21406">Movies Store</st>*<st c="21418">. These diagrams will
    serve as a blueprint to codify the</st> *<st c="21475">Movies Store</st>* <st
    c="21487">project in the</st> <st c="21503">upcoming chapters.</st>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="20994">在本章中，我们学习了如何安装和使用Python，</st> `<st c="21054">pip</st>`<st c="21057">，以及Django。</st>
    <st c="21071">我们还学习了如何创建一个新的Django项目并运行Django本地Web服务器。</st> <st c="21157">然后，我们解释了</st>
    *<st c="21193">电影商店</st>* <st c="21205">项目的范围。</st> <st c="21215">我们还通过一个类图展示了应用程序数据和其关系。</st>
    <st c="21303">此外，我们还展示了一个架构图，显示了</st> *<st c="21406">电影商店</st>*<st c="21418">的主要组件和元素。这些图表将作为蓝图，在接下来的章节中用于规范</st>
    *<st c="21475">电影商店</st>* <st c="21487">项目。</st>
- en: <st c="21521">In the next chapter, we will look inside the project folder that
    Django has created for us to understand it better, and we will create our first</st>
    <st c="21667">Django app.</st>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <st c="21521">在下一章中，我们将深入了解Django为我们创建的项目文件夹，以便更好地理解它，并创建我们的第一个</st> <st c="21667">Django应用。</st>
