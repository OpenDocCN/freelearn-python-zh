- en: <st c="0">1</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2">Installing Python and Django, and Introducing the Movies Store Application</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="76">Welcome to</st> *<st c="88">Django 5 for the Impatient</st>*<st c="114">!
    This book focuses on the key tasks and concepts to help you learn and build</st>
    **<st c="192">Django</st>** <st c="198">applications quickly.</st> <st c="221">It
    is designed for those of you who don’t need all the details about Django, except
    for those that you really need to know.</st> <st c="345">By the end of this book,
    you will be confident in creating your own</st> <st c="413">Django projects.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="429">So, what’s Django?</st> <st c="449">Django</st> <st c="455">is a
    free, open-source web framework for building modern</st> **<st c="513">Python</st>**
    <st c="519">web applications.</st> <st c="538">Django helps you quickly build
    web apps by abstracting away many of the repetitive challenges involved in building
    a website, such as connecting to a database, handling security, enabling user
    authentication, creating URL routes, displaying content on a page through templates
    and forms, supporting multiple database backends, and setting up an</st> <st c="883">admin
    interface.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="899">This reduction in repetitive tasks allows developers to focus on
    building a web application’s functionality, rather than reinventing the wheel
    for standard web</st> <st c="1060">application functions.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1082">Django is one of the most popular frameworks available and is used
    by established companies such as</st> *<st c="1183">Instagram</st>*<st c="1192">,</st>
    *<st c="1194">Pinterest</st>*<st c="1203">,</st> *<st c="1205">Mozilla</st>*<st
    c="1212">, and</st> *<st c="1218">National Geographic</st>*<st c="1237">. It is
    also easy enough to be used by start-ups and to build</st> <st c="1299">personal
    projects.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1317">There are other popular frameworks, such as Flask in Python and
    Express in JavaScript (for more information on Express, see</st> *<st c="1442">Beginning
    Node.js, Express & MongoDB Development</st>* <st c="1490">by Greg Lim:</st> [<st
    c="1504">https://www.amazon.com/dp/B07TWDNMHJ/</st>](https://www.amazon.com/dp/B07TWDNMHJ/)<st
    c="1541">).</st> <st c="1545">However, these frameworks only provide the minimum
    required functionality for a simple web page, and developers have to do more foundational
    work, such as installing and configuring third-party packages on their own for
    basic</st> <st c="1771">website functionality.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="1793">In this chapter, we are going to get acquainted with the application
    we are going to build, using Django 5, and get ready to develop our project by
    installing and setting up everything we need.</st> <st c="1988">By the end of
    the chapter, you will have successfully created your</st> <st c="2055">development
    environment.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2079">In this chapter, we will be covering the</st> <st c="2121">following
    topics:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2138">Introducing and</st> <st c="2155">installing Python</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2172">Introducing and</st> <st c="2189">installing Django</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2206">Creating and running a</st> <st c="2230">Django project</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2244">Understanding the Movies</st> <st c="2270">Store application</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2287">Introducing Django</st> <st c="2307">MVT architecture</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="2323">Technical requirements</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2346">In this chapter, we will use</st> **<st c="2376">Python 3.10+</st>**<st
    c="2388">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2389">The code for this chapter is located</st> <st c="2427">at</st>
    [<st c="2430">https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter01/moviesstore</st>](https://github.com/PacktPublishing/Django-5-for-the-Impatient-Second-Edition/tree/main/Chapter01/moviesstore)<st
    c="2538">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2539">The CiA video for this chapter can be found</st> <st c="2584">at</st>
    [<st c="2587">https://packt.link/ygUpr</st>](https://packt.link/ygUpr)
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2611">Introducing and installing Python</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="2645">Python is a high-level programming language (</st>[<st c="2691">https://www.python.org/</st>](https://www.python.org/)<st
    c="2715">), created in the late 1980s by Guido</st> <st c="2754">van Rossum.</st>
    <st c="2766">The name Python comes from the creator’s affection</st> <st c="2816">for
    the British comedy group Monty Python and not the “snake,” as is</st> <st c="2886">commonly
    believed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="2904">Python has an open-source license, meaning that developers can
    modify, use, and redistribute its code for free without paying the</st> <st c="3035">original
    author.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3051">Python is characterized as a friendly and easy-to-learn programming
    language.</st> <st c="3130">Python can be used to develop a wide range of applications,
    including web development, data analysis, artificial intelligence, scientific
    computing,</st> <st c="3279">and automation.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3294">For now, let’s</st> <st c="3310">check whether we have Python installed
    and, if so, what version</st> <st c="3374">we have.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3382">If you are using a Mac, open your Terminal.</st> <st c="3427">If
    you are using Windows, open Command Prompt.</st> <st c="3474">For convenience,
    we will refer to both the Terminal and Command Prompt as</st> *<st c="3548">Terminal</st>*
    <st c="3556">throughout</st> <st c="3568">the book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3577">We will need to</st> <st c="3594">check whether we have at least
    Python 3.10 in order to use Django 5\.</st> <st c="3663">To do so, go to your
    Terminal and run the</st> <st c="3705">following commands:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="3724">For macOS,</st> <st c="3736">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="3763">For Windows,</st> <st c="3777">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="3803">This shows the version of Python you have installed.</st> <st c="3857">Make
    sure that the version is at least</st> *<st c="3896">3.10</st>*<st c="3900">.
    If it isn’t, get the latest version of</st> <st c="3941">Python by going to</st>
    [<st c="3960">https://www.python.org/downloads/</st>](https://www.python.org/downloads/)
    <st c="3993">and installing the version for your OS.</st> <st c="4034">For Windows,
    you must select the</st> **<st c="4067">Add python.exe to PATH</st>** <st c="4089">option
    (to ensure that the Python interpreter can be accessed from any directory in the
    command prompt or</st> *<st c="4196">Terminal</st>*<st c="4204">), as shown in</st>
    *<st c="4220">Figure 1</st>**<st c="4228">.1</st>*<st c="4230">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.1 – Installing Python on Windows](img/B22457_01_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="4687">Figure 1.1 – Installing Python on Windows</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4728">After the installation, run the command again to check the version
    of</st> <st c="4799">Python installed.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="4816">The output should reflect the latest version of Python, such as
    Python 3.12.2 (at the time of writing), as shown in</st> *<st c="4933">Figure
    1</st>**<st c="4941">.2</st>*<st c="4943">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.2 – Checking the Python version on Windows](img/B22457_01_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="5077">Figure 1.2 – Checking the Python version on Windows</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5128">Now that we have Python</st> <st c="5152">installed, let’s move
    on to introducing and</st> <st c="5197">installing Django.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5215">Introducing and installing Django</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="5249">Django is a high-level</st> <st c="5273">Python web framework that
    encourages rapid development and clean, pragmatic design (</st>[<st c="5357">https://www.djangoproject.com/</st>](https://www.djangoproject.com/)<st
    c="5388">).</st> <st c="5392">Django makes it easier to build better web apps
    more quickly and with</st> <st c="5462">less code.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5472">There are several ways to install Django; we will use</st> `<st
    c="5527">pip</st>` <st c="5530">to install Django in this book.</st> `<st c="5682">pip</st>`
    <st c="5685">is automatically installed if you downloaded</st> <st c="5731">Python</st>
    <st c="5738">from</st> [<st c="5743">https://www.python.org/</st>](https://www.python.org/)<st
    c="5766">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5767">First, check whether you have</st> `<st c="5798">pip</st>` <st
    c="5801">installed by going to the Terminal and running the</st> <st c="5853">following
    commands:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="5872">For macOS,</st> <st c="5884">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="5898">For Windows,</st> <st c="5912">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="5925">If you have</st> `<st c="5938">pip</st>` <st c="5941">installed,
    the output should display a list of</st> `<st c="5989">pip</st>` <st c="5992">commands,
    as shown in</st> *<st c="6015">Figure 1</st>**<st c="6023">.3</st>*<st c="6025">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.3 – Checking whether pip is installed on Windows](img/B22457_01_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="6164">Figure 1.3 – Checking whether pip is installed on Windows</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6221">Next, to install Django, run the</st> <st c="6255">following commands:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6274">For macOS,</st> <st c="6286">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="6320">For Windows,</st> <st c="6334">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="6367">The preceding command</st> <st c="6389">will retrieve the Django
    5.0 code version and install it on your machine.</st> <st c="6464">Note that there
    may be newer versions available when you’re reading this book.</st> <st c="6543">However,
    we recommend continuing to use Django 5.0 to ensure that the code in this book
    will function correctly.</st> <st c="6656">After installation, close and reopen</st>
    <st c="6693">your Terminal.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6707">To check whether you have installed Django, run the</st> <st c="6760">following
    commands.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="6779">For macOS,</st> <st c="6791">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="6818">For Windows,</st> <st c="6832">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="6858">Now, the output will show you all the Django commands you can use,
    as shown in</st> *<st c="6938">Figure 1</st>**<st c="6946">.4</st>*<st c="6948">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.4 – The Django module commands on macOS](img/B22457_01_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="7513">Figure 1.4 – The Django module commands on macOS</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7561">Over the course of the</st> <st c="7584">book, you will progressively
    be introduced to some of the</st> <st c="7643">preceding commands.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7662">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7667">It is also common to use</st> **<st c="7693">virtual environments</st>**
    <st c="7713">(such as the</st> **<st c="7727">venv</st>** <st c="7731">module)
    to manage your Python and Django</st> <st c="7772">projects and dependencies.</st>
    <st c="7800">For now, we will not use venv to get started quickly on Django.</st>
    <st c="7864">We will learn how to use and configure venv at the end of</st> <st
    c="7922">this book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="7932">We have all the tools we need to create a Django project.</st>
    <st c="7991">Now, let’s move on to</st> <st c="8013">doing that.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8024">Creating and running a Django project</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="8062">Now that we have Django</st> <st c="8086">installed, we are ready
    to create our</st> <st c="8125">Django project.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8140">There are several ways to</st> <st c="8166">create Django projects.</st>
    <st c="8191">In this book, we will use</st> `<st c="8217">django-admin</st>`<st
    c="8229">.</st> **<st c="8231">django-admin</st>** <st c="8243">is Django’s</st>
    <st c="8256">command-line utility for administrative tasks.</st> <st c="8303">It</st>
    <st c="8305">provides various commands to help you create, manage, and interact
    with Django projects, applications, and other</st> <st c="8419">related components.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8438">In the Terminal, navigate to the folder where you want to create
    your project and run the</st> <st c="8529">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8585">This will create a</st> `<st c="8605">moviesstore</st>` <st c="8616">folder
    in your current directory.</st> <st c="8651">This folder contains our Django application
    code.</st> <st c="8701">We will discuss its contents later.</st> <st c="8737">For
    now, let’s run our first website on the Django local</st> <st c="8794">web server.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8805">In the Terminal, run the</st> `<st c="8831">cd</st>` <st c="8833">command
    to move</st> <st c="8850">into the</st> <st c="8859">created folder:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: <st c="8889">Then, run the</st> <st c="8904">following command:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="8922">For macOS,</st> <st c="8934">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="8971">For Windows,</st> <st c="8985">run this:</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: <st c="9021">When you run the aforementioned commands, you start the local web
    server on your machine (for local development purposes).</st> <st c="9145">There
    will be a URL link –</st> `<st c="9172">http://127.0.0.1:8000/</st>` <st c="9194">(equivalent
    to</st> `<st c="9210">http://localhost:8000</st>`<st c="9231">).</st> <st c="9235">Open
    this link in a browser, and you will see the default landing page, as shown in</st>
    *<st c="9319">Figure 1</st>**<st c="9327">.5</st>*<st c="9329">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.5 – The landing page of the Django project](img/B22457_01_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="9780">Figure 1.5 – The landing page of the Django project</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="9831">This means</st> <st c="9843">that your local web server is running
    and serving the landing</st> <st c="9904">page.</st> <st c="9911">Sometimes, you
    will need to stop the server in order to run other Python commands.</st> <st c="9994">To
    stop the local server, press</st> *<st c="10026">Ctrl</st>* <st c="10030">+</st>
    *<st c="10033">C</st>* <st c="10034">in</st> <st c="10038">the Terminal.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10051">We executed our</st> <st c="10067">first Django project successfully.</st>
    <st c="10103">Now, it is time to introduce the application we will develop in</st>
    <st c="10167">this book.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10177">Understanding the Movies Store application</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="10220">The use of running examples is a prevalent approach found in programming
    literature.</st> <st c="10306">The running example</st> <st c="10326">serves as
    a means to illustrate the principles of a methodology, process, tool, or technique.</st>
    <st c="10420">In this book, we will define a</st> *<st c="10451">Movies Store</st>*
    <st c="10463">running example.</st> <st c="10481">We will revisit this running
    example throughout the book to explain many of the Django concepts and elements
    in a</st> <st c="10595">practical way.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10609">The</st> *<st c="10614">Movies Store</st>* <st c="10626">will
    be a web-based platform where users access information about movies and can place
    orders to</st> <st c="10724">purchase them.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10738">Now, let’s outline the application’s scope for this</st> <st c="10791">particular
    app:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="10806">The</st> **<st c="10811">Home page</st>** <st c="10820">will feature</st>
    <st c="10834">a</st> <st c="10836">welcoming message.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="10854">The</st> **<st c="10859">About page</st>** <st c="10869">will
    provide</st> <st c="10883">details about the</st> *<st c="10901">Movies Store</st>*<st
    c="10913">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="10914">The</st> **<st c="10919">Movies page</st>** <st c="10930">will
    exhibit</st> <st c="10943">information on available movies and include a filter
    to search movies by name.</st> <st c="11023">Additionally, users can click on
    a specific movie to view its details and</st> <st c="11097">post reviews.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11110">The</st> **<st c="11115">Cart page</st>** <st c="11124">will showcase
    the</st> <st c="11142">movies added to the cart, along with the total price to
    be paid.</st> <st c="11208">Users</st> <st c="11214">can also remove movies from
    the cart and proceed</st> <st c="11263">with purchases.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11278">The</st> **<st c="11283">Register page</st>** <st c="11296">will
    present a</st> <st c="11312">form enabling users to sign up</st> <st c="11343">for
    accounts.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11356">The</st> **<st c="11361">Login page</st>** <st c="11371">will
    present</st> <st c="11384">a form allowing users to log in to</st> <st c="11420">the
    application.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11436">The</st> **<st c="11441">Orders page</st>** <st c="11452">will
    display</st> <st c="11466">the orders placed by the</st> <st c="11491">logged-in
    user.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11506">The</st> **<st c="11511">Admin panel</st>** <st c="11522">will
    encompass</st> <st c="11537">sections to manage the store’s information, including
    creating, updating, deleting, and</st> <st c="11626">listing information.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="11646">The</st> *<st c="11651">Movies Store</st>* <st c="11663">will
    be developed using Django (Python), with a SQLite database and Bootstrap (a CSS
    framework).</st> <st c="11761">Further details about these components will be
    covered in the</st> <st c="11823">forthcoming chapters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="11844">In</st> *<st c="11848">Figure 1</st>**<st c="11856">.6</st>*<st
    c="11858">, you’ll find a class diagram outlining the application’s scope and
    design.</st> <st c="11934">The</st> *<st c="11938">user</st>* <st c="11942">class
    is depicted with its associated data (such as an id, username, email, and password)
    and is capable of placing</st> *<st c="12059">orders</st>*<st c="12065">. Each</st>
    *<st c="12072">order</st>* <st c="12077">consists of one or more</st> *<st c="12102">items</st>*<st
    c="12107">, which are linked to individual</st> *<st c="12140">movies</st>*<st
    c="12146">. Each</st> *<st c="12153">movie</st>* <st c="12158">will possess its
    respective data (including an id, name, price, description, and image).</st> <st
    c="12248">Lastly,</st> *<st c="12256">users</st>* <st c="12261">have the ability
    to create</st> *<st c="12289">reviews</st>* <st c="12296">for</st> *<st c="12301">movies</st>*<st
    c="12307">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.6 – The Movies Store class diagram](img/B22457_01_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="12664">Figure 1.6 – The Movies Store class diagram</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="12707">This book does not delve into the intricacies of class diagrams;
    hence, we won’t elaborate on additional details within the diagram (you can refer
    to this link for additional information about class diagrams:</st> [<st c="12917">https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/</st>](https://www.visual-paradigm.com/guide/uml-unified-modeling-language/uml-class-diagram-tutorial/)<st
    c="13012">).</st> <st c="13016">As you progress through the book, you’ll notice
    the correlation between code and this diagram.</st> <st c="13111">Serving as a</st>
    <st c="13123">blueprint, this diagram guides the construction of</st> <st c="13175">our
    application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13191">Note</st>
  prefs: []
  type: TYPE_NORMAL
- en: '<st c="13196">Creating a class diagram before commencing coding aids in comprehending
    the application’s scope and identifying crucial data points.</st> <st c="13330">Additionally,
    it facilitates understanding the interconnections among various elements of the
    application.</st> <st c="13437">This diagram can be shared with team members or
    colleagues for feedback, allowing for adjustments as necessary.</st> <st c="13549">Due
    to its nature as a diagram, modifications can be implemented quickly.</st> <st
    c="13623">Otherwise, once the project has been coded, the cost of relocating data
    from one class to another increases significantly.</st> <st c="13746">Check the
    following statement from the book</st> *<st c="13790">Building Microservices</st>*
    <st c="13812">by</st> *<st c="13816">Newman</st>*<st c="13822">,</st> *<st c="13824">S.</st>*
    <st c="13826">(2015): “</st>*<st c="13836">I tend to do much of my thinking in
    the place where the cost of change and the cost of mistakes is as low as it can
    be:</st>* *<st c="13957">the whiteboard.</st>*<st c="13972">”</st>'
  prefs: []
  type: TYPE_NORMAL
- en: <st c="13974">Based on the previous scope, we will build a</st> *<st c="14019">Movies
    Store</st>* <st c="14031">app that will allow users to view and search for movies,
    as shown in</st> *<st c="14101">Figure 1</st>**<st c="14109">.7</st>*<st c="14111">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.7 – The movies page with search functionality](img/B22457_01_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14189">Figure 1.7 – The movies page with search functionality</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14243">Users will be able to sign</st> <st c="14270">up, as shown in</st>
    *<st c="14287">Figure 1</st>**<st c="14295">.8</st>*<st c="14297">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.8 – The Sign Up page](img/B22457_01_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14399">Figure 1.8 – The Sign Up page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14428">Users will be able</st> <st c="14447">to log in, add movies to
    the cart, and make purchases, as shown in</st> *<st c="14515">Figure 1</st>**<st
    c="14523">.9</st>*<st c="14525">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.9 – The shopping cart page](img/B22457_01_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="14692">Figure 1.9 – The shopping cart page</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="14727">Users</st> <st c="14733">will also be able to list, create, edit,
    and delete movie reviews, as shown in</st> *<st c="14813">Figure 1</st>**<st c="14821">.10</st>*<st
    c="14824">:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.10 – A specific movie page with its reviews](img/B22457_01_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="15002">Figure 1.10 – A specific movie page with its reviews</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15054">Many other functionalities</st> <st c="15081">will be developed
    and explained across the book.</st> <st c="15131">Now, let’s see the architecture
    we will use to construct the</st> *<st c="15192">Movies</st>* *<st c="15199">Store</st>*
    <st c="15204">application.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15217">Introducing the Django MVT architecture</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="15257">There are various methodologies and approaches to design and code
    web applications.</st> <st c="15342">One approach involves consolidating</st>
    <st c="15377">all code into a single file to construct the entire web application.</st>
    <st c="15447">However, finding errors within such a file, often comprising thousands
    of lines of code, can be incredibly challenging.</st> <st c="15567">Alternatively,
    other strategies distribute code across different files and directories.</st>
    <st c="15655">Additionally, some approaches segment an application into multiple
    smaller applications dispersed across several servers, although managing the distribution
    of these servers presents its own set</st> <st c="15850">of challenges.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="15864">Organizing your code effectively presents challenges.</st> <st
    c="15919">This is why developers and computer scientists have created software
    architectural patterns.</st> **<st c="16012">Software architectural patterns</st>**
    <st c="16043">offer structural</st> <st c="16061">frameworks or layouts to address
    common software design issues.</st> <st c="16125">By leveraging these patterns,
    start-ups and inexperienced developers can avoid reinventing solutions for every
    new project.</st> <st c="16249">Various architectural patterns exist, including</st>
    **<st c="16297">Model-View-Controller</st>** <st c="16318">(</st>**<st c="16320">MVC</st>**<st
    c="16323">),</st> **<st c="16327">Model-View-Template</st>** <st c="16346">(</st>**<st
    c="16348">MVT</st>**<st c="16351">), layers, service-oriented, and microservices.</st>
    <st c="16400">Each pattern comes with its</st> <st c="16428">own set of pros and
    cons.</st> <st c="16454">Many</st> <st c="16458">frameworks, such as Django, adhere
    to specific patterns in constructing</st> <st c="16531">their applications.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="16550">In the case of Django, Django is</st> <st c="16583">based on the
    MVT pattern.</st> <st c="16610">This pattern is similar to MVC but with some differences
    in the responsibilities of</st> <st c="16694">each component:</st>
  prefs: []
  type: TYPE_NORMAL
- en: '**<st c="16709">Models</st>**<st c="16716">: The model represents</st> <st
    c="16739">the data structure.</st> <st c="16760">In Django, models are Python
    classes that define the structure of the data and how it interacts with the database.</st>
    <st c="16875">Models handle</st> <st c="16888">tasks such as querying a database,
    performing</st> **<st c="16935">CRUD</st>** <st c="16939">(</st>**<st c="16941">Create,
    Read, Update, Delete</st>**<st c="16969">) operations, and enforcing data validation.</st>
    <st c="17015">In the case of the</st> *<st c="17034">Movies Store</st>* <st c="17046">app,</st>
    *<st c="17052">Movie</st>*<st c="17057">,</st> *<st c="17059">Review</st>*<st
    c="17065">,</st> *<st c="17067">Order</st>* <st c="17072">and the other classes
    from our class diagram will be coded as</st> <st c="17135">Django models.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="17149">Views</st>**<st c="17155">: Views in Django are responsible
    for processing user requests and returning appropriate</st> <st c="17244">responses.</st>
    <st c="17256">Views typically receive HTTP requests from clients, fetch data from
    the database using models, and render templates to generate HTML responses.</st>
    <st c="17400">In Django, views are Python functions or classes that accept HTTP
    requests and return HTTP responses.</st> <st c="17502">In the case of the</st>
    *<st c="17521">Movies Store</st>* <st c="17533">app, we will create views and
    functions to handle the movies, accounts, and cart,</st> <st c="17616">among others.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**<st c="17629">Templates</st>**<st c="17639">: Templates</st> <st c="17652">are
    used to generate HTML dynamically.</st> <st c="17691">They contain the application’s
    user interface and define how data from the views should be displayed to the users.</st>
    <st c="17806">In the case of the</st> *<st c="17825">Movies Store</st>* <st c="17837">app,
    we will create a template to allow users to log in, a template to list movies,
    and a template to display the shopping cart,</st> <st c="17967">among others.</st>'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="17980">The MVT pattern offers several benefits such as enhanced code
    separation, facilitated collaboration among multiple team members, simplified
    error identification, increased code reusability, and improved maintainability.</st>
    *<st c="18201">Figure 1</st>**<st c="18209">.11</st>* <st c="18212">illustrates
    the software architecture of the</st> *<st c="18258">Movies Store</st>*<st c="18270">,
    which we will develop throughout this book.</st> <st c="18316">While it may seem
    overwhelming now, you will understand</st> <st c="18372">the intricacies of this
    architecture by the book’s conclusion.</st> <st c="18435">We will delve deeper
    into the architecture in the</st> <st c="18485">final chapters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 1.11 – The Movies Store software architecture diagram](img/B22457_01_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: <st c="18926">Figure 1.11 – The Movies Store software architecture diagram</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="18986">Let’s briefly analyze</st> <st c="19009">this</st> <st c="19014">architecture:</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="19027">Positioned on the left are the clients, which are the users of
    our application, who use browsers on mobile or desktop devices.</st> <st c="19155">These
    clients establish connections with the application via the</st> **<st c="19220">Hypertext
    Transfer Protocol</st>** <st c="19247">(</st>**<st c="19249">HTTP</st>**<st c="19253">),
    providing users</st> <st c="19272">with a means to interact with our</st> <st
    c="19307">web application.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19323">On the right side, we have the server, which hosts our</st> <st
    c="19379">application code.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19396">All client interactions first pass for a project-level URL file
    called</st> `<st c="19468">urls.py</st>`<st c="19475">. This file is located in
    the main project folder called</st> `<st c="19532">moviesstore/</st>`<st c="19544">.
    URLs will be explored in</st> [*<st c="19571">Chapter 2</st>*](B22457_02.xhtml#_idTextAnchor024)<st
    c="19580">. This project folder also contains a</st> `<st c="19618">templates/</st>`
    <st c="19628">folder in which we will design a reusable base template.</st> <st
    c="19686">Base templates will be explored in</st> [*<st c="19721">Chapter 3</st>*](B22457_03.xhtml#_idTextAnchor041)<st
    c="19730">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19731">The project-level URL file passes the interaction to an app-level
    URL file.</st> <st c="19808">For this project, we will design and implement four
    Django apps –</st> *<st c="19874">home</st>*<st c="19878">,</st> *<st c="19880">movies</st>*<st
    c="19886">,</st> *<st c="19888">cart</st>*<st c="19892">, and</st> *<st c="19898">accounts</st>*<st
    c="19906">. Django apps will be explored in</st> [*<st c="19940">Chapter 2</st>*](B22457_02.xhtml#_idTextAnchor024)<st
    c="19949">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="19950">Each app-level URL file passes the interaction to a</st> `<st
    c="20003">views.py</st>` <st c="20011">file.</st> <st c="20018">Views will be
    explored in</st> [*<st c="20044">Chapter 2</st>*](B22457_02.xhtml#_idTextAnchor024)<st
    c="20053">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20054">Views communicate with models, if required, and pass information
    to the templates, which are finally delivered to the clients as HTML, CSS, and
    JS code.</st> <st c="20208">Templates will be explored in</st> [*<st c="20238">Chapter
    2</st>*](B22457_02.xhtml#_idTextAnchor024)<st c="20247">, and models will be explored
    in</st> [*<st c="20280">Chapter 5</st>*](B22457_05.xhtml#_idTextAnchor088)<st
    c="20289">.</st>
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: <st c="20290">In</st> *<st c="20294">Figure 1</st>**<st c="20302">.11</st>*<st
    c="20305">, the</st> **<st c="20311">Model</st>**<st c="20316">,</st> **<st c="20318">View</st>**<st
    c="20322">, and</st> **<st c="20328">Template</st>** <st c="20336">layers are
    highlighted in gray, representing the common architectural pattern used in Django,
    which will be utilized throughout this book.</st> <st c="20476">We</st> <st c="20479">have
    four models corresponding to the classes defined in our class diagram (as previously
    shown in</st> *<st c="20578">Figure 1</st>**<st c="20586">.6</st>*<st c="20588">).</st>
    <st c="20592">The user model does not appear in this diagram because we will reuse
    a built-in Django</st> <st c="20679">user model.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20690">Therefore, as mentioned earlier, there are different approaches
    to implementing web applications with Django.</st> <st c="20801">There are even
    different ways to implement a Django MVT architecture.</st> <st c="20871">In the
    following chapters, we will see the advantages of adopting an MVT architecture,
    as presented in</st> *<st c="20974">Figure 1</st>**<st c="20982">.11</st>*<st
    c="20985">.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="20986">Summary</st>
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: <st c="20994">In this chapter, we learned how to install and use Python,</st>
    `<st c="21054">pip</st>`<st c="21057">, and Django.</st> <st c="21071">We also
    learned how to create a new Django project and run a Django local web server.</st>
    <st c="21157">Then, we explained the scope of the</st> *<st c="21193">Movies Store</st>*
    <st c="21205">project.</st> <st c="21215">We also illustrated the application
    data and its relationships through a class diagram.</st> <st c="21303">Additionally,
    we presented an architecture diagram that showed the main components and elements
    of the</st> *<st c="21406">Movies Store</st>*<st c="21418">. These diagrams will
    serve as a blueprint to codify the</st> *<st c="21475">Movies Store</st>* <st
    c="21487">project in the</st> <st c="21503">upcoming chapters.</st>
  prefs: []
  type: TYPE_NORMAL
- en: <st c="21521">In the next chapter, we will look inside the project folder that
    Django has created for us to understand it better, and we will create our first</st>
    <st c="21667">Django app.</st>
  prefs: []
  type: TYPE_NORMAL
