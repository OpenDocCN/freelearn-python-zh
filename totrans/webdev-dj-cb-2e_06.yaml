- en: Chapter 6. Model Administration
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 第 6 章。模型管理
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Customizing columns on the change list page
  id: totrans-2
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义更改列表页面上的列
- en: Creating admin actions
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建管理操作
- en: Developing change list filters
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 开发更改列表过滤器
- en: Customizing default admin settings
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 自定义默认管理设置
- en: Inserting a map on a change form
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在更改表单中插入地图
- en: Introduction
  id: totrans-7
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 简介
- en: The Django framework comes with a built-in administration system for your models.
    With very little effort, you can set up filterable, searchable, and sortable lists
    for browsing your models and configure forms to add and edit data. In this chapter,
    we will go through the advanced techniques to customize administration by developing
    some practical cases.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: Django 框架自带了一个用于模型的内置管理系统。只需付出很少的努力，你就可以为浏览模型设置可筛选、可搜索和可排序的列表，并配置表单以添加和编辑数据。在本章中，我们将通过开发一些实际案例来介绍自定义管理的先进技术。
- en: Customizing columns on the change list page
  id: totrans-9
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义更改列表页面上的列
- en: Change list views in the default Django administration system let you have an
    overview of all instances of the specific models. By default, the `list_display`
    model admin property controls the fields that are shown in different columns.
    Additionally, you can have custom functions set there that return the data from
    relations or display custom HTML. In this recipe, we will create a special function
    for the `list_display` property that shows an image in one of the columns of the
    list view. As a bonus, we will make one field directly editable in the list view
    by adding the `list_editable` setting.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 修改默认 Django 管理系统的列表视图让你可以查看特定模型的所有实例的概览。默认情况下，`list_display` 模型管理属性控制着显示在不同列中的字段。此外，你还可以在那里设置自定义函数，这些函数返回关系中的数据或显示自定义
    HTML。在本配方中，我们将为 `list_display` 属性创建一个特殊函数，该函数在列表视图的一列中显示一个图像。作为额外奖励，我们将通过添加 `list_editable`
    设置，使一个字段在列表视图中直接可编辑。
- en: Getting ready
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: To start with, make sure that `django.contrib.admin` is in `INSTALLED_APPS`
    in the settings and `AdminSite` is hooked in the URL configuration. Then, create
    a new `products` app and put it under `INSTALLED_APPS`. This app will have the
    `Product` and `ProductPhoto` models, where one product might have multiple photos.
    For this example, we will also be using `UrlMixin`, which was defined in the *Creating
    a model mixin with URL-related methods* recipe in [Chapter 2](ch02.html "Chapter 2. Database
    Structure"), *Database Structure*.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，请确保在设置中的 `INSTALLED_APPS` 中包含了 `django.contrib.admin`，并且 `AdminSite` 已在 URL
    配置中连接。然后，创建一个新的 `products` 应用程序并将其添加到 `INSTALLED_APPS` 中。这个应用程序将包含 `Product` 和
    `ProductPhoto` 模型，其中一种产品可能有多个照片。在这个例子中，我们还将使用 `UrlMixin`，它是在 [第 2 章](ch02.html
    "第 2 章。数据库结构") 中定义的，与 URL 相关的方法的配方中定义的。*创建一个具有 URL 相关方法的模型混入*。
- en: 'Let''s create the `Product` and `ProductPhoto` models in the `models.py` file,
    as follows:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `models.py` 文件中创建 `Product` 和 `ProductPhoto` 模型，如下所示：
- en: '[PRE0]'
  id: totrans-14
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: How to do it...
  id: totrans-15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: We will create a simple administration for the `Product` model that will have
    instances of the `ProductPhoto` model attached to the product as inlines.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将为 `Product` 模型创建一个简单的管理，该模型将具有附加到产品上的 `ProductPhoto` 模型的实例，作为内联。
- en: In the `list_display` property, we will list the `get_photo()` method of the
    model admin that will be used to show the first photo from many-to-one relationship.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `list_display` 属性中，我们将列出模型管理中使用的 `get_photo()` 方法，该方法将用于显示多对一关系中的第一张照片。
- en: 'Let''s create an `admin.py` file with the following content:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们创建一个包含以下内容的 `admin.py` 文件：
- en: '[PRE1]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: How it works...
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工作原理...
- en: 'If you look at the product administration list in the browser, it will look
    similar to the following screenshot:'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看浏览器中的产品管理列表，它将类似于以下截图：
- en: '![How it works...](img/B04912_06_01.jpg)'
  id: totrans-22
  prefs: []
  type: TYPE_IMG
  zh: '![工作原理...](img/B04912_06_01.jpg)'
- en: Usually, the `list_display` property defines the fields to list in the administration
    list view; for example, `title` and `price` are the fields of the `Product` model.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，`list_display` 属性定义了在管理列表视图中要列出的字段；例如，`title` 和 `price` 是 `Product` 模型的字段。
- en: Besides the normal field names, the `list_display` property accepts a function
    or another callable, the name of an attribute of the admin model, or the name
    of the attribute of the model.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 除了正常的字段名称外，`list_display` 属性还接受一个函数或另一个可调用对象，管理模型的属性名称，或模型的属性名称。
- en: Tip
  id: totrans-25
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: 小贴士
- en: In Python, a callable is a function, method, or a class that implements the
    `__call__()` method. You can check whether a variable is callable using the `callable()`
    function.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 在 Python 中，可调用对象是一个函数、方法或实现了 `__call__()` 方法的类。你可以使用 `callable()` 函数检查一个变量是否可调用。
- en: Each callable that you use in `list_display` will get a model instance passed
    as the first argument. Therefore, in our example, we have the `get_photo()` method
    of the model admin that retrieves the `Product` instance as `obj`. The method
    tries to get the first `ProductPhoto` from the many-to-one relationship and, if
    it exists, it returns the HTML with the `<img>` tag linked to the detail page
    of `Product`.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 在`list_display`中使用的每个可调用函数都会接收到一个作为第一个参数传递的模型实例。因此，在我们的例子中，我们有模型管理器的`get_photo()`方法，它检索`Product`实例作为`obj`。该方法尝试从多对一关系中获得第一个`ProductPhoto`，如果存在，则返回带有链接到`Product`详情页的`<img>`标签的HTML。
- en: You can set several attributes for the callables that you use in `list_display`.
    The `short_description` attribute of the callable defines the title shown for
    the column. The `allow_tags` attribute informs administration to not escape the
    HTML values.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以为在`list_display`中使用的可调用函数设置多个属性。可调用函数的`short_description`属性定义了列显示的标题。`allow_tags`属性通知管理器不要转义HTML值。
- en: In addition, the **Price** field is made editable by the `list_editable` setting
    and there is a **Save** button at the bottom to save the whole list of products.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，通过`list_editable`设置使**价格**字段可编辑，底部有一个**保存**按钮来保存整个产品列表。
- en: There's more...
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 还有更多...
- en: Ideally, the `get_photo()` method shouldn't have any hardcoded HTML in it; however,
    it should load and render a template from a file. For this, you can utilize the
    `render_to_string()` function from `django.template.loader`. Then, your presentation
    logic will be separated from the business logic. I am leaving this as an exercise
    for you.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 理想情况下，`get_photo()`方法中不应包含任何硬编码的HTML；然而，它应该从文件中加载并渲染一个模板。为此，您可以使用`django.template.loader`中的`render_to_string()`函数。然后，您的展示逻辑将与业务逻辑分离。我将这留作您的练习。
- en: See also
  id: totrans-32
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 相关内容
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在[第2章](ch02.html "第2章。数据库结构")的*使用与URL相关的方法创建模型混入*配方中，*数据库结构*
- en: The *Creating admin actions* recipe
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建管理操作*配方'
- en: The *Developing change list filters* recipe
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发变更列表过滤器*配方'
- en: Creating admin actions
  id: totrans-36
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建管理操作
- en: The Django administration system provides actions that we can execute for selected
    items in the list. There is one action given by default and it is used to delete
    selected instances. In this recipe, we will create an additional action for the
    list of the `Product` model that allows the administrators to export selected
    products to Excel spreadsheets.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: Django管理系统为我们提供了可以执行列表中选定项目的操作。默认情况下有一个操作，用于删除选定的实例。在本配方中，我们将为`Product`模型的列表创建一个额外的操作，允许管理员将选定的产品导出到Excel电子表格。
- en: Getting ready
  id: totrans-38
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: We will start with the `products` app that we created in the previous recipe.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从上一个配方中创建的`products`应用开始。
- en: 'Make sure that you have the `xlwt` module installed in your virtual environment
    to create an Excel spreadsheet:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 确保您的虚拟环境中已安装`xlwt`模块以创建Excel电子表格：
- en: '[PRE2]'
  id: totrans-41
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: How to do it...
  id: totrans-42
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Admin actions are functions that take three arguments: the current `ModelAdmin`
    value, the current `HttpRequest` value, and the `QuerySet` value containing the
    selected items. Perform the following steps to create a custom admin action:'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 管理操作是接受三个参数的函数：当前的`ModelAdmin`值、当前的`HttpRequest`值以及包含所选项目的`QuerySet`值。按照以下步骤创建自定义管理操作：
- en: 'Let''s create an `export_xls()` function in the `admin.py` file of the products
    app, as follows:'
  id: totrans-44
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们在产品应用的`admin.py`文件中创建一个`export_xls()`函数，如下所示：
- en: '[PRE3]'
  id: totrans-45
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'Then, add the `actions` setting to `ProductAdmin`, as follows:'
  id: totrans-46
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将`actions`设置添加到`ProductAdmin`中，如下所示：
- en: '[PRE4]'
  id: totrans-47
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: How it works...
  id: totrans-48
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you take a look at the product administration list page in the browser,
    you will see a new action called **Export XLS**, along with the default **Delete
    selected Products** action, as shown in the following screenshot:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您在浏览器中查看产品管理列表页面，您将看到一个名为**导出XLS**的新操作，以及默认的**删除选定的产品**操作，如下面的截图所示：
- en: '![How it works...](img/B04912_06_02.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![如何操作...](img/B04912_06_02.jpg)'
- en: By default, admin actions do something with `QuerySet` and redirect the administrator
    back to the change list page. However, for more complex actions like these, `HttpResponse`
    can be returned. The `export_xls()` function returns `HttpResponse` with the content
    type of the Excel spreadsheet. Using the Content-Disposition header, we set the
    response to be downloadable with the `products.xls` file.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，管理员操作会对 `QuerySet` 执行某些操作，并将管理员重定向回更改列表页面。然而，对于这些更复杂的行为，可以返回 `HttpResponse`。`export_xls()`
    函数返回具有 Excel 电子表格内容类型的 `HttpResponse`。使用 Content-Disposition 标头，我们将响应设置为可下载的 `products.xls`
    文件。
- en: Then, we use the xlwt Python module to create the Excel file.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们使用 xlwt Python 模块创建 Excel 文件。
- en: At first, a workbook with UTF-8 encoding is created. Then, we add a sheet named
    `Products` to it. We will be using the `write()` method of the sheet to set the
    content and style for each cell and the `col()` method to retrieve the column
    and set its width.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，创建一个使用 UTF-8 编码的工作簿。然后，我们向其中添加一个名为 `Products` 的工作表。我们将使用工作表的 `write()` 方法来设置每个单元格的内容和样式，以及使用
    `col()` 方法来获取列并设置其宽度。
- en: To get an overview of all the columns in the sheet, we will create a list of
    tuples with column names and widths. Excel uses some magical units for the widths
    of the columns. They are 1/256 of the width of the zero character in the default
    font. Next, we will define the header style as bold. As we have the columns defined,
    we will loop through them and fill the first row with the column names, also assigning
    the bold style to them.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 要查看工作表中所有列的概览，我们将创建一个包含列名和宽度的元组列表。Excel 使用一些神奇的单位来表示列宽。它们是默认字体中零字符宽度的 1/256。接下来，我们将定义标题样式为粗体。因为我们已经定义了列，我们将遍历它们并在第一行中填充列名，同时将粗体样式分配给它们。
- en: Then, we will create a style for normal cells and prices. The text in normal
    cells will be wrapped in multiple lines. The prices will have a special number
    style with two numbers after the decimal point.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们将创建一个用于普通单元格和价格的样式。普通单元格中的文本将换行。价格将具有特殊的数字样式，小数点后有两位数字。
- en: Lastly, we will go through `QuerySet` of the selected products ordered by ID
    and print the specified fields in the corresponding cells, also applying the specific
    styles.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们将遍历按 ID 排序的选定产品的 `QuerySet`，并在相应的单元格中打印指定的字段，同时应用特定的样式。
- en: 'The workbook is saved to the file-like `HttpResponse` object and the resulting
    Excel sheet looks similar to the following:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 工作簿被保存到类似文件的 `HttpResponse` 对象中，生成的 Excel 表格看起来类似于以下内容：
- en: '| ID | Title | Description | Price (€) | Preview |'
  id: totrans-58
  prefs: []
  type: TYPE_TB
  zh: '| ID | 标题 | 描述 | 价格 (€) | 预览 |'
- en: '| --- | --- | --- | --- | --- |'
  id: totrans-59
  prefs: []
  type: TYPE_TB
  zh: '| --- | --- | --- | --- | --- |'
- en: '| 1 | Ryno | With the Ryno microcycle, you''re not limited to the street or
    the bike lane. It''s a transitional vehicle—it goes most places where a person
    can walk or ride a bike. | 3865.00 | `http://127.0.0.1:8000/media/products/ryno/20140523044813.jpg`
    |'
  id: totrans-60
  prefs: []
  type: TYPE_TB
  zh: '| 1 | Ryno | 使用 Ryno 微型循环，你不仅限于街道或自行车道。它是一种过渡性车辆——它可以去任何一个人可以步行或骑自行车的地方。 |
    3865.00 | `http://127.0.0.1:8000/media/products/ryno/20140523044813.jpg` |'
- en: '| 2 | Mercury Skate | The main purpose of designing this Mercury Skate is to
    decrease the skater''s fatigue and provide them with an easier and smoother ride
    on the pavement. |   | `http://127.0.0.1:8000/media/products/mercury-skate/20140521030128.png`
    |'
  id: totrans-61
  prefs: []
  type: TYPE_TB
  zh: '| 2 | Mercury Skate | 设计这款 Mercury Skate 的主要目的是减少滑板者的疲劳，并为他们提供在人行道上更容易、更顺畅的骑行体验。
    | `http://127.0.0.1:8000/media/products/mercury-skate/20140521030128.png` |'
- en: '| 4 | Detroit Electric Car | The Detroit Electric SP:01 is a limited-edition,
    two-seat, pure-electric sports car that sets new standards for performance and
    handling in electric vehicles. |   | `http://127.0.0.1:8000/media/products/detroit-electric-car/20140521033122.jpg`
    |'
  id: totrans-62
  prefs: []
  type: TYPE_TB
  zh: '| 4 | Detroit Electric Car | Detroit Electric SP:01 是一款限量版、两座、纯电动跑车，为电动汽车的性能和操控设定了新的标准。
    | `http://127.0.0.1:8000/media/products/detroit-electric-car/20140521033122.jpg`
    |'
- en: See also
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: '[Chapter 9](ch09.html "Chapter 9. Data Import and Export"), *Data Import and
    Export*'
  id: totrans-64
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '[第 9 章](ch09.html "第 9 章。数据导入和导出")，*数据导入和导出*'
- en: The *Customizing columns on the change list page* recipe
  id: totrans-65
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*定制更改列表页面上的列* 菜单'
- en: The *Developing change list filters* recipe
  id: totrans-66
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*开发更改列表过滤器* 菜单'
- en: Developing change list filters
  id: totrans-67
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 开发更改列表过滤器
- en: If you want the administrators to be able to filter the change list by date,
    relation, or field choices, you need to use the `list_filter` property for the
    admin model. Additionally, there is a possibility of having custom-tailored filters.
    In this recipe, we will add a filter that allows you to select products by the
    number of photos attached to them.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你想让管理员能够通过日期、关系或字段选择来过滤更改列表，你需要使用管理模型的`list_filter`属性。此外，还有可能使用定制过滤器。在这个菜谱中，我们将添加一个允许你通过附加照片数量选择产品的过滤器。
- en: Getting ready
  id: totrans-69
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Let's start with the `products` app that we created in the previous recipe.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们从上一个菜谱中创建的`products`应用开始。
- en: How to do it...
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Execute the following two steps:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 执行以下两个步骤：
- en: 'In the `admin.py` file, create a `PhotoFilter` class extending from `SimpleListFilter`,
    as follows:'
  id: totrans-73
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`admin.py`文件中，创建一个继承自`SimpleListFilter`的`PhotoFilter`类，如下所示：
- en: '[PRE5]'
  id: totrans-74
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, add a list filter to `ProductAdmin`, as shown in the following code:'
  id: totrans-75
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，将列表过滤器添加到`ProductAdmin`中，如下所示：
- en: '[PRE6]'
  id: totrans-76
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: How it works...
  id: totrans-77
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'The list filter that we just created will be shown in the sidebar of the product
    list, as follows:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我们刚刚创建的列表过滤器将显示在产品列表的侧边栏中，如下所示：
- en: '![How it works...](img/B04912_06_03.jpg)'
  id: totrans-79
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_06_03.jpg)'
- en: 'The `PhotoFilter` class has translatable title and query parameter names as
    properties. It also has two methods: the `lookups()` method that defines the choices
    of the filter and the `queryset()` method that defines how to filter `QuerySet`
    objects when a specific value is selected.'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: '`PhotoFilter`类具有可翻译的标题和查询参数名称作为属性。它还有两个方法：定义过滤器选项的`lookups()`方法和定义在选中特定值时如何过滤`QuerySet`对象的`queryset()`方法。'
- en: 'In the `lookups()` method, we define three choices: there are no photos, there
    is one photo, and there is more than one photo attached. In the `queryset()` method,
    we use the `annotate()` method of `QuerySet` to select the count of photos for
    each product. This count of the photos is then filtered according to the selected
    choice.'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 在`lookups()`方法中，我们定义了三个选项：没有照片、有一张照片和有多张照片附加。在`queryset()`方法中，我们使用`QuerySet`的`annotate()`方法来选择每个产品的照片数量。然后根据所选选项过滤这些照片的数量。
- en: To learn more about the aggregation functions such as `annotate()`, refer to
    the official Django documentation at [https://docs.djangoproject.com/en/1.8/topics/db/aggregation/](https://docs.djangoproject.com/en/1.8/topics/db/aggregation/).
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解更多关于聚合函数，如`annotate()`的信息，请参考官方Django文档，链接为[https://docs.djangoproject.com/en/1.8/topics/db/aggregation/](https://docs.djangoproject.com/en/1.8/topics/db/aggregation/).
- en: See also
  id: totrans-83
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Customizing columns on the change list page* recipe
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义更改列表页面上的列*菜谱'
- en: The *Creating admin actions* recipe
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*创建管理操作*菜谱'
- en: The *Customizing default admin settings* recipe
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*自定义默认管理设置*菜谱'
- en: Customizing default admin settings
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 自定义默认管理设置
- en: Django apps as well as third-party apps come with their own administration settings;
    however, there is a mechanism to switch these settings off and use your own better
    administration settings. In this recipe, you will learn how to exchange the administration
    settings for the `django.contrib.auth` app with custom administration settings.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Django应用以及第三方应用都带有自己的管理设置；然而，有一个机制可以关闭这些设置并使用你自己的更好的管理设置。在这个菜谱中，你将学习如何用自定义管理设置替换`django.contrib.auth`应用的管理设置。
- en: Getting ready
  id: totrans-89
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: Create a `custom_admin` app and put this app under `INSTALLED_APPS` in the settings.
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个`custom_admin`应用，并将此应用放在设置中的`INSTALLED_APPS`下。
- en: How to do it...
  id: totrans-91
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'Insert the following content in the new `admin.py` file in the `custom_admin`
    app:'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 在`custom_admin`应用中的新`admin.py`文件中插入以下内容：
- en: '[PRE7]'
  id: totrans-93
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: How it works...
  id: totrans-94
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何工作...
- en: 'The default user administration list looks similar to the following screenshot:'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 默认用户管理列表看起来类似于以下截图：
- en: '![How it works...](img/B04912_06_04.jpg)'
  id: totrans-96
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_06_04.jpg)'
- en: 'The default group administration list looks similar to the following screenshot:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: 默认的用户管理列表看起来类似于以下截图：
- en: '![How it works...](img/B04912_06_05.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_06_05.jpg)'
- en: In this recipe, we created two model admin classes, `UserAdminExtended` and
    `GroupAdminExtended`, which extend the contributed `UserAdmin` and `GroupAdmin`
    classes, respectively, and overwrite some of the properties. Then, we unregistered
    the existing administration classes for the `User` and `Group` models and registered
    the new modified ones.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个菜谱中，我们创建了两个模型管理类，`UserAdminExtended`和`GroupAdminExtended`，分别扩展了贡献的`UserAdmin`和`GroupAdmin`类，并覆盖了一些属性。然后，我们注销了现有的`User`和`Group`模型的管理类，并注册了新的修改后的类。
- en: 'The following screenshot is how the user administration will look now:'
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图显示了用户管理现在的样子：
- en: '![How it works...](img/B04912_06_06.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_06_06.jpg)'
- en: The modified user administration settings show more fields than the default
    settings in the list view, add additional filters and ordering options, and show
    **Submit** buttons at the top of the editing form.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 修改后的用户管理设置在列表视图中显示的字段比默认设置更多，添加了额外的过滤和排序选项，并在编辑表单的顶部显示**提交**按钮。
- en: 'In the change list of the new group administration settings, we will display
    the users who are assigned to the specific groups. This looks similar to the following
    screenshot in the browser:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 在新的组管理设置更改列表中，我们将显示分配给特定组的用户。这看起来与浏览器中的以下截图类似：
- en: '![How it works...](img/B04912_06_07.jpg)'
  id: totrans-104
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_06_07.jpg)'
- en: There's more...
  id: totrans-105
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 更多...
- en: 'In our Python code, we used a new way to format the strings. To learn more
    about the usage of the `format()` method of the string compared to the old style,
    refer to the following URL: [https://pyformat.info/](https://pyformat.info/).'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的Python代码中，我们使用了一种新的字符串格式化方法。要了解更多关于字符串的`format()`方法与旧风格用法的信息，请参考以下URL：[https://pyformat.info/](https://pyformat.info/)。
- en: See also
  id: totrans-107
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Customizing columns on the change list page* recipe
  id: totrans-108
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*定制更改列表页面上的列*菜谱'
- en: The *Inserting a map into a change form* recipe
  id: totrans-109
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '*在更改表单中插入地图*菜谱'
- en: Inserting a map into a change form
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 在更改表单中插入地图
- en: Google Maps offer a JavaScript API to insert maps into your websites. In this
    recipe, we will create a `locations` app with the `Location` model and extend
    the template of the change form in order to add a map where an administrator can
    find and mark geographical coordinates of a location.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: Google Maps提供了一个JavaScript API，可以将地图插入到您的网站中。在这个菜谱中，我们将创建一个带有`Location`模型的`locations`应用，并扩展更改表单的模板，以便添加一个地图，管理员可以在其中找到并标记位置的地理坐标。
- en: Getting ready
  id: totrans-112
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 准备工作
- en: 'We will start with the `locations` app that should be put under `INSTALLED_APPS`
    in the settings. Create a `Location` model there with a title, description, address,
    and geographical coordinates, as follows:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将从`locations`应用开始，这个应用应该在设置中的`INSTALLED_APPS`下。在那里创建一个`Location`模型，包含标题、描述、地址和地理坐标，如下所示：
- en: '[PRE8]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: How to do it...
  id: totrans-115
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 如何操作...
- en: 'The administration of the `Location` model is as simple as it can be. Perform
    the following steps:'
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: '`Location`模型的管理就像它可能的那样简单。执行以下步骤：'
- en: 'Let''s create the administration settings for the `Location` model. Note that
    we are using the `get_fieldsets()` method to define the field sets with a description
    rendered from a template, as follows:'
  id: totrans-117
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 让我们为`Location`模型创建管理设置。请注意，我们正在使用`get_fieldsets()`方法来定义字段集，并从模板中渲染描述，如下所示：
- en: '[PRE9]'
  id: totrans-118
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'To create a custom change form template, add a new `change_form.html` file
    under `admin/locations/location/` in your `templates` directory. This template
    will extend from the default `admin/change_form.html` template and will overwrite
    the `extrastyle` and `field_sets` blocks, as follows:'
  id: totrans-119
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 要创建自定义更改表单模板，在您的`templates`目录下`admin/locations/location/`中添加一个新的`change_form.html`文件。此模板将从默认的`admin/change_form.html`模板扩展，并覆盖`extrastyle`和`field_sets`块，如下所示：
- en: '[PRE10]'
  id: totrans-120
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Then, we need to create the template for the map that will be inserted in the
    `Map` field set:'
  id: totrans-121
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，我们需要为将插入到`Map`字段集中的地图创建模板：
- en: '[PRE11]'
  id: totrans-122
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Of course, the map won''t be styled by default. Therefore, we have to add some
    CSS, as shown in the following code:'
  id: totrans-123
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当然，地图默认情况下不会被样式化。因此，我们必须添加一些CSS，如下面的代码所示：
- en: '[PRE12]'
  id: totrans-124
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Then, let''s create a `locating.js` JavaScript file. We will be using jQuery
    in this file, as jQuery comes with the contributed administration system and makes
    the work easy and cross-browser. We don''t want to pollute the environment with
    global variables, therefore, we will start with a closure to make a private scope
    for variables and functions (a closure is the local variables for a function kept
    alive after the function has returned), as follows:'
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 然后，让我们创建一个 `locating.js` JavaScript 文件。在这个文件中，我们将使用 jQuery，因为 jQuery 附带了贡献的行政系统，这使得工作变得简单且跨浏览器。我们不希望污染环境中的全局变量，因此，我们将从一个闭包开始，为变量和函数创建一个私有作用域（闭包是函数返回后仍保持活跃的局部变量），如下所示：
- en: '[PRE13]'
  id: totrans-126
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We will create JavaScript functions one by one. The `getAddress4search()` function
    will collect the `address` string from the address fields that can later be used
    for geocoding, as follows:'
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 我们将逐个创建 JavaScript 函数。`getAddress4search()` 函数将从地址字段收集 `address` 字符串，稍后可用于地理编码，如下所示：
- en: '[PRE14]'
  id: totrans-128
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'The `updateMarker()` function will take the latitude and longitude arguments
    and draw or move a marker on the map. It also makes the marker draggable:'
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`updateMarker()` 函数将接受纬度和经度参数，并在地图上绘制或移动标记。它还使标记可拖动：'
- en: '[PRE15]'
  id: totrans-130
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `updateLatitudeAndLongitude()` function takes the latitude and longitude
    arguments and updates the values for the fields with the IDs `id_latitude` and
    `id_longitude`, as follows:'
  id: totrans-131
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`updateLatitudeAndLongitude()` 函数接受纬度和经度参数，并更新具有 `id_latitude` 和 `id_longitude`
    ID 的字段的值，如下所示：'
- en: '[PRE16]'
  id: totrans-132
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `autocompleteAddress()` function gets the results from Google Maps geocoding
    and lists them under the map in order to select the correct one, or if there is
    just one result, it updates the geographical position and address fields, as follows:'
  id: totrans-133
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`autocompleteAddress()` 函数从 Google Maps 地理编码获取结果，并在地图下方列出以供选择正确的选项，或者如果只有一个结果，它将更新地理位置和地址字段，如下所示：'
- en: '[PRE17]'
  id: totrans-134
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'The `updateAddressFields()` function takes a nested dictionary with the address
    components as an argument and fills in all the address fields:'
  id: totrans-135
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: '`updateAddressFields()` 函数接受一个嵌套字典作为参数，其中包含地址组件，并填写所有地址字段：'
- en: '[PRE18]'
  id: totrans-136
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Finally, we have the initialization function that is called on the page load.
    It attaches the `onclick` event handlers to the buttons, creates a Google Map,
    and initially marks the geoposition that is defined in the `latitude` and `longitude`
    fields, as follows:'
  id: totrans-137
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，我们有在页面加载时调用的初始化函数。它将 `onclick` 事件处理程序附加到按钮上，创建一个 Google Map，并在 `latitude`
    和 `longitude` 字段中定义的初始地理位置上标记，如下所示：
- en: '[PRE19]'
  id: totrans-138
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE19]'
- en: How it works...
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 它是如何工作的...
- en: 'If you look at the location change form in the browser, you will see a map
    shown in a field set followed by the field set containing the address fields,
    as shown in the following screenshot:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你查看浏览器中的位置更改表单，你将看到一个在字段集中显示的地图，后面跟着包含地址字段的字段集，如下面的截图所示：
- en: '![How it works...](img/B04912_06_08.jpg)'
  id: totrans-141
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_06_08.jpg)'
- en: 'Under the map, there are two buttons: **Locate address** and **Remove from
    map**.'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在地图下方有两个按钮：**定位地址**和**从地图中移除**。
- en: 'When you click on the **Locate address** button, the geocoding is called in
    order to search for the geographical coordinates of the entered address. The result
    of geocoding is either one or more addresses with latitudes and longitudes in
    a nested dictionary format. To see the structure of the nested dictionary in the
    console of the developer tools, put the following line in the beginning of the
    `autocompleteAddress()` function:'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 当你点击**定位地址**按钮时，将调用地理编码以搜索输入地址的地理坐标。地理编码的结果是一个或多个地址，它们以嵌套字典格式包含纬度和经度。要在开发者工具的控制台中查看嵌套字典的结构，请在
    `autocompleteAddress()` 函数的开始处放置以下行：
- en: '[PRE20]'
  id: totrans-144
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'If there is just one result, the missing postal code or other missing address
    fields are populated, the latitude and longitude are filled in and a marker is
    put at a specific place on the map. If there are more results, the entire list
    is shown under the map with the option to select the correct one, as shown in
    the following screenshot:'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 如果只有一个结果，缺失的邮政编码或其他缺失的地址字段将被填充，纬度和经度将被填写，并在地图上的一个特定位置放置一个标记。如果有更多结果，整个列表将在地图下方显示，并提供选择正确结果的选项，如下面的截图所示：
- en: '![How it works...](img/B04912_06_09.jpg)'
  id: totrans-146
  prefs: []
  type: TYPE_IMG
  zh: '![如何工作...](img/B04912_06_09.jpg)'
- en: Then, the administrator can move the marker on the map by dragging and dropping.
    Also, a double-click anywhere on the map will update the geographical coordinates
    and marker position.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，管理员可以通过拖放在地图上移动标记。此外，在地图上的任何地方双击都将更新地理坐标和标记位置。
- en: Finally, if the **Remove from map** button is clicked, the geographical coordinates
    are cleaned and the marker is removed.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，如果点击了**从地图中移除**按钮，地理坐标将被清除，并移除标记。
- en: See also
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 参见
- en: The *Using HTML5 data attributes* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 参见[第4章](ch04.html "第4章。模板和JavaScript")中的*使用HTML5数据属性*配方，*模板和JavaScript*
