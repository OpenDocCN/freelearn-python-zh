- en: Chapter 6. Model Administration
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Customizing columns on the change list page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating admin actions
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing change list filters
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing default admin settings
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting a map on a change form
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Introduction
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django framework comes with a built-in administration system for your models.
    With very little effort, you can set up filterable, searchable, and sortable lists
    for browsing your models and configure forms to add and edit data. In this chapter,
    we will go through the advanced techniques to customize administration by developing
    some practical cases.
  prefs: []
  type: TYPE_NORMAL
- en: Customizing columns on the change list page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Change list views in the default Django administration system let you have an
    overview of all instances of the specific models. By default, the `list_display`
    model admin property controls the fields that are shown in different columns.
    Additionally, you can have custom functions set there that return the data from
    relations or display custom HTML. In this recipe, we will create a special function
    for the `list_display` property that shows an image in one of the columns of the
    list view. As a bonus, we will make one field directly editable in the list view
    by adding the `list_editable` setting.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To start with, make sure that `django.contrib.admin` is in `INSTALLED_APPS`
    in the settings and `AdminSite` is hooked in the URL configuration. Then, create
    a new `products` app and put it under `INSTALLED_APPS`. This app will have the
    `Product` and `ProductPhoto` models, where one product might have multiple photos.
    For this example, we will also be using `UrlMixin`, which was defined in the *Creating
    a model mixin with URL-related methods* recipe in [Chapter 2](ch02.html "Chapter 2. Database
    Structure"), *Database Structure*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the `Product` and `ProductPhoto` models in the `models.py` file,
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will create a simple administration for the `Product` model that will have
    instances of the `ProductPhoto` model attached to the product as inlines.
  prefs: []
  type: TYPE_NORMAL
- en: In the `list_display` property, we will list the `get_photo()` method of the
    model admin that will be used to show the first photo from many-to-one relationship.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an `admin.py` file with the following content:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you look at the product administration list in the browser, it will look
    similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Usually, the `list_display` property defines the fields to list in the administration
    list view; for example, `title` and `price` are the fields of the `Product` model.
  prefs: []
  type: TYPE_NORMAL
- en: Besides the normal field names, the `list_display` property accepts a function
    or another callable, the name of an attribute of the admin model, or the name
    of the attribute of the model.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: In Python, a callable is a function, method, or a class that implements the
    `__call__()` method. You can check whether a variable is callable using the `callable()`
    function.
  prefs: []
  type: TYPE_NORMAL
- en: Each callable that you use in `list_display` will get a model instance passed
    as the first argument. Therefore, in our example, we have the `get_photo()` method
    of the model admin that retrieves the `Product` instance as `obj`. The method
    tries to get the first `ProductPhoto` from the many-to-one relationship and, if
    it exists, it returns the HTML with the `<img>` tag linked to the detail page
    of `Product`.
  prefs: []
  type: TYPE_NORMAL
- en: You can set several attributes for the callables that you use in `list_display`.
    The `short_description` attribute of the callable defines the title shown for
    the column. The `allow_tags` attribute informs administration to not escape the
    HTML values.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the **Price** field is made editable by the `list_editable` setting
    and there is a **Save** button at the bottom to save the whole list of products.
  prefs: []
  type: TYPE_NORMAL
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ideally, the `get_photo()` method shouldn't have any hardcoded HTML in it; however,
    it should load and render a template from a file. For this, you can utilize the
    `render_to_string()` function from `django.template.loader`. Then, your presentation
    logic will be separated from the business logic. I am leaving this as an exercise
    for you.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Creating a model mixin with URL-related methods* recipe in [Chapter 2](ch02.html
    "Chapter 2. Database Structure"), *Database Structure*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating admin actions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Developing change list filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating admin actions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Django administration system provides actions that we can execute for selected
    items in the list. There is one action given by default and it is used to delete
    selected instances. In this recipe, we will create an additional action for the
    list of the `Product` model that allows the administrators to export selected
    products to Excel spreadsheets.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will start with the `products` app that we created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: 'Make sure that you have the `xlwt` module installed in your virtual environment
    to create an Excel spreadsheet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Admin actions are functions that take three arguments: the current `ModelAdmin`
    value, the current `HttpRequest` value, and the `QuerySet` value containing the
    selected items. Perform the following steps to create a custom admin action:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create an `export_xls()` function in the `admin.py` file of the products
    app, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add the `actions` setting to `ProductAdmin`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you take a look at the product administration list page in the browser,
    you will see a new action called **Export XLS**, along with the default **Delete
    selected Products** action, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: By default, admin actions do something with `QuerySet` and redirect the administrator
    back to the change list page. However, for more complex actions like these, `HttpResponse`
    can be returned. The `export_xls()` function returns `HttpResponse` with the content
    type of the Excel spreadsheet. Using the Content-Disposition header, we set the
    response to be downloadable with the `products.xls` file.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we use the xlwt Python module to create the Excel file.
  prefs: []
  type: TYPE_NORMAL
- en: At first, a workbook with UTF-8 encoding is created. Then, we add a sheet named
    `Products` to it. We will be using the `write()` method of the sheet to set the
    content and style for each cell and the `col()` method to retrieve the column
    and set its width.
  prefs: []
  type: TYPE_NORMAL
- en: To get an overview of all the columns in the sheet, we will create a list of
    tuples with column names and widths. Excel uses some magical units for the widths
    of the columns. They are 1/256 of the width of the zero character in the default
    font. Next, we will define the header style as bold. As we have the columns defined,
    we will loop through them and fill the first row with the column names, also assigning
    the bold style to them.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we will create a style for normal cells and prices. The text in normal
    cells will be wrapped in multiple lines. The prices will have a special number
    style with two numbers after the decimal point.
  prefs: []
  type: TYPE_NORMAL
- en: Lastly, we will go through `QuerySet` of the selected products ordered by ID
    and print the specified fields in the corresponding cells, also applying the specific
    styles.
  prefs: []
  type: TYPE_NORMAL
- en: 'The workbook is saved to the file-like `HttpResponse` object and the resulting
    Excel sheet looks similar to the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '| ID | Title | Description | Price (€) | Preview |'
  prefs: []
  type: TYPE_TB
- en: '| --- | --- | --- | --- | --- |'
  prefs: []
  type: TYPE_TB
- en: '| 1 | Ryno | With the Ryno microcycle, you''re not limited to the street or
    the bike lane. It''s a transitional vehicle—it goes most places where a person
    can walk or ride a bike. | 3865.00 | `http://127.0.0.1:8000/media/products/ryno/20140523044813.jpg`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 2 | Mercury Skate | The main purpose of designing this Mercury Skate is to
    decrease the skater''s fatigue and provide them with an easier and smoother ride
    on the pavement. |   | `http://127.0.0.1:8000/media/products/mercury-skate/20140521030128.png`
    |'
  prefs: []
  type: TYPE_TB
- en: '| 4 | Detroit Electric Car | The Detroit Electric SP:01 is a limited-edition,
    two-seat, pure-electric sports car that sets new standards for performance and
    handling in electric vehicles. |   | `http://127.0.0.1:8000/media/products/detroit-electric-car/20140521033122.jpg`
    |'
  prefs: []
  type: TYPE_TB
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '[Chapter 9](ch09.html "Chapter 9. Data Import and Export"), *Data Import and
    Export*'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Customizing columns on the change list page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Developing change list filters* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Developing change list filters
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: If you want the administrators to be able to filter the change list by date,
    relation, or field choices, you need to use the `list_filter` property for the
    admin model. Additionally, there is a possibility of having custom-tailored filters.
    In this recipe, we will add a filter that allows you to select products by the
    number of photos attached to them.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Let's start with the `products` app that we created in the previous recipe.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Execute the following two steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `admin.py` file, create a `PhotoFilter` class extending from `SimpleListFilter`,
    as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, add a list filter to `ProductAdmin`, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The list filter that we just created will be shown in the sidebar of the product
    list, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The `PhotoFilter` class has translatable title and query parameter names as
    properties. It also has two methods: the `lookups()` method that defines the choices
    of the filter and the `queryset()` method that defines how to filter `QuerySet`
    objects when a specific value is selected.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In the `lookups()` method, we define three choices: there are no photos, there
    is one photo, and there is more than one photo attached. In the `queryset()` method,
    we use the `annotate()` method of `QuerySet` to select the count of photos for
    each product. This count of the photos is then filtered according to the selected
    choice.'
  prefs: []
  type: TYPE_NORMAL
- en: To learn more about the aggregation functions such as `annotate()`, refer to
    the official Django documentation at [https://docs.djangoproject.com/en/1.8/topics/db/aggregation/](https://docs.djangoproject.com/en/1.8/topics/db/aggregation/).
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Customizing columns on the change list page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Creating admin actions* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Customizing default admin settings* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Customizing default admin settings
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Django apps as well as third-party apps come with their own administration settings;
    however, there is a mechanism to switch these settings off and use your own better
    administration settings. In this recipe, you will learn how to exchange the administration
    settings for the `django.contrib.auth` app with custom administration settings.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Create a `custom_admin` app and put this app under `INSTALLED_APPS` in the settings.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Insert the following content in the new `admin.py` file in the `custom_admin`
    app:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The default user administration list looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The default group administration list looks similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In this recipe, we created two model admin classes, `UserAdminExtended` and
    `GroupAdminExtended`, which extend the contributed `UserAdmin` and `GroupAdmin`
    classes, respectively, and overwrite some of the properties. Then, we unregistered
    the existing administration classes for the `User` and `Group` models and registered
    the new modified ones.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot is how the user administration will look now:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: The modified user administration settings show more fields than the default
    settings in the list view, add additional filters and ordering options, and show
    **Submit** buttons at the top of the editing form.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the change list of the new group administration settings, we will display
    the users who are assigned to the specific groups. This looks similar to the following
    screenshot in the browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: There's more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In our Python code, we used a new way to format the strings. To learn more
    about the usage of the `format()` method of the string compared to the old style,
    refer to the following URL: [https://pyformat.info/](https://pyformat.info/).'
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Customizing columns on the change list page* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The *Inserting a map into a change form* recipe
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting a map into a change form
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Google Maps offer a JavaScript API to insert maps into your websites. In this
    recipe, we will create a `locations` app with the `Location` model and extend
    the template of the change form in order to add a map where an administrator can
    find and mark geographical coordinates of a location.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We will start with the `locations` app that should be put under `INSTALLED_APPS`
    in the settings. Create a `Location` model there with a title, description, address,
    and geographical coordinates, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The administration of the `Location` model is as simple as it can be. Perform
    the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s create the administration settings for the `Location` model. Note that
    we are using the `get_fieldsets()` method to define the field sets with a description
    rendered from a template, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'To create a custom change form template, add a new `change_form.html` file
    under `admin/locations/location/` in your `templates` directory. This template
    will extend from the default `admin/change_form.html` template and will overwrite
    the `extrastyle` and `field_sets` blocks, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, we need to create the template for the map that will be inserted in the
    `Map` field set:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Of course, the map won''t be styled by default. Therefore, we have to add some
    CSS, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Then, let''s create a `locating.js` JavaScript file. We will be using jQuery
    in this file, as jQuery comes with the contributed administration system and makes
    the work easy and cross-browser. We don''t want to pollute the environment with
    global variables, therefore, we will start with a closure to make a private scope
    for variables and functions (a closure is the local variables for a function kept
    alive after the function has returned), as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'We will create JavaScript functions one by one. The `getAddress4search()` function
    will collect the `address` string from the address fields that can later be used
    for geocoding, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `updateMarker()` function will take the latitude and longitude arguments
    and draw or move a marker on the map. It also makes the marker draggable:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `updateLatitudeAndLongitude()` function takes the latitude and longitude
    arguments and updates the values for the fields with the IDs `id_latitude` and
    `id_longitude`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `autocompleteAddress()` function gets the results from Google Maps geocoding
    and lists them under the map in order to select the correct one, or if there is
    just one result, it updates the geographical position and address fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The `updateAddressFields()` function takes a nested dictionary with the address
    components as an argument and fills in all the address fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, we have the initialization function that is called on the page load.
    It attaches the `onclick` event handlers to the buttons, creates a Google Map,
    and initially marks the geoposition that is defined in the `latitude` and `longitude`
    fields, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you look at the location change form in the browser, you will see a map
    shown in a field set followed by the field set containing the address fields,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Under the map, there are two buttons: **Locate address** and **Remove from
    map**.'
  prefs: []
  type: TYPE_NORMAL
- en: 'When you click on the **Locate address** button, the geocoding is called in
    order to search for the geographical coordinates of the entered address. The result
    of geocoding is either one or more addresses with latitudes and longitudes in
    a nested dictionary format. To see the structure of the nested dictionary in the
    console of the developer tools, put the following line in the beginning of the
    `autocompleteAddress()` function:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'If there is just one result, the missing postal code or other missing address
    fields are populated, the latitude and longitude are filled in and a marker is
    put at a specific place on the map. If there are more results, the entire list
    is shown under the map with the option to select the correct one, as shown in
    the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![How it works...](img/B04912_06_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Then, the administrator can move the marker on the map by dragging and dropping.
    Also, a double-click anywhere on the map will update the geographical coordinates
    and marker position.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, if the **Remove from map** button is clicked, the geographical coordinates
    are cleaned and the marker is removed.
  prefs: []
  type: TYPE_NORMAL
- en: See also
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The *Using HTML5 data attributes* recipe in [Chapter 4](ch04.html "Chapter 4. Templates
    and JavaScript"), *Templates and JavaScript*
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
