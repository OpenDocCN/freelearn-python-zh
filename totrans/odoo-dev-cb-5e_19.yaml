- en: '19'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing, Deploying, and Testing with Odoo.sh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In 2017, Odoo released Odoo.sh, a new cloud service. Odoo.sh is a platform that
    makes the process of testing, deploying, and monitoring Odoo instances as easy
    as possible. In this chapter, we will look at how Odoo.sh works, when you should
    use it over other deployment options, and its features.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring some basic concepts of Odoo.sh
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Odoo.sh account
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding and installing custom modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing branches
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Accessing debugging options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Getting a backup of your instance
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Checking the status of your builds
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All Odoo.sh options
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This chapter is written under the assumption that you have Odoo.sh access. It
    is a paid service, and you will need a subscription code to access the platform.
    If you are an Odoo partner, you will get a free Odoo.sh subscription code. Otherwise,
    you will need to purchase it from [https://www.odoo.sh/pricing](https://www.odoo.sh/pricing).
    You can still go through this chapter even if you don’t have a subscription code.
    It contains enough screenshots to help you understand the platform.
  prefs: []
  type: TYPE_NORMAL
- en: A note for print readers
  prefs: []
  type: TYPE_NORMAL
- en: 'For the benefit of print readers, there are certain images showing the layout
    of a window in this chapter that may require zooming to view them clearly. You
    can access the graphic bundle containing high-quality images at this link: [https://packt.link/gbp/9781805124276](https://packt.link/gbp/9781805124276)'
  prefs: []
  type: TYPE_NORMAL
- en: Exploring some basic concepts of Odoo.sh
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will look at some of the features of the Odoo.sh platform.
    We will answer some basic questions, such as when you should use it and why it
    should be used.
  prefs: []
  type: TYPE_NORMAL
- en: What is Odoo.sh?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo.sh is a cloud service that provides the platform with the ability to host
    Odoo instances with custom modules. Putting it simply, it is Odoo’s **platform
    as a service** (**PaaS**) cloud solution. It is fully integrated with GitHub.
    Any GitHub repository with valid Odoo modules can be launched on Odoo.sh within
    minutes. You can examine the ongoing development by testing multiple branches
    in parallel. Once you have moved your instance to production, you can test some
    new features with a copy of the production database; this helps to avoid regression.
    It also takes daily backups. With Odoo.sh, you can deploy Odoo instances efficiently,
    even if you don’t have sound knowledge of DevOps. It automatically sets up an
    Odoo instance with top-notch configurations. Note that Odoo.sh is the Enterprise
    edition of Odoo. You cannot use the Odoo Community edition because Odoo.sh will
    only load the Enterprise edition.
  prefs: []
  type: TYPE_NORMAL
- en: Why was Odoo.sh introduced?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before Odoo.sh was introduced, there were two ways to host Odoo instances. The
    first was to use Odoo Online, which is a **software as a service** (**SaaS**)
    cloud service. The second method was the on-premises option, in which you needed
    to host an Odoo instance and configure it on your server yourself. Now, both of
    these options have pros and cons. In the Odoo online option, you don’t need to
    configure or deploy it, as it is a SaaS service. However, you cannot use custom
    modules on this platform. On the other hand, with the on-premises option, you
    can use custom modules, but you need to do everything yourself. You need to purchase
    the server, you need to configure the database and NGINX, and you need to set
    up the mail server, daily backups, and security.
  prefs: []
  type: TYPE_NORMAL
- en: For this reason, there was a need for a new option that provided the simplicity
    of Odoo online and the flexibility of the on-premises option. Odoo.sh lets you
    use custom modules without a complex configuration. It also provides additional
    features, such as testing branches, staging branches, and automated tests.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: It is not completely true that customization is not possible on Odoo online.
    With Odoo Studio and other techniques, you can carry out customization. The scope
    of this customization, however, is very narrow.
  prefs: []
  type: TYPE_NORMAL
- en: When should you use Odoo.sh?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you don’t need customization or you only need a small amount of customization
    that is possible in Odoo online, you should go for Odoo online. This will save
    both time and money. If you want a significant amount of customization and you
    have teamed up with expert DevOps engineers, you can choose the on-premises option.
    Odoo.sh is suitable for when you have good knowledge of Odoo customization but
    do not have any expertise in DevOps. With Odoo.sh, there’s no need to carry out
    complex configurations; you can start using it straight away, along with your
    customization. It even configures the mailing server.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo.sh is very useful when you are developing a large project with agile methodology.
    This is because on Odoo.sh, you can test multiple development branches in parallel
    and deploy the stable development in production in minutes. You can even share
    the test development with the end customer.
  prefs: []
  type: TYPE_NORMAL
- en: What are the features of Odoo.sh?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Odoo has invested a lot of time in the development of the Odoo.sh platform,
    and it is packed with features as a result. Let’s have a look at the features
    of Odoo.sh. Note that Odoo adds new features from time to time. In this section,
    I have mentioned the features that are available at the time of writing this book,
    but you might find some further features as well:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub integration**: This platform is fully integrated with GitHub. You
    can test every branch, pull, or commit here. For every new commit, a new branch
    will be pulled automatically. It will also run an automated test for the new commits.
    You can even create/merge branches from the Odoo.sh UI itself.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web shell**: Odoo.sh provides the web shell in the browser for the current
    build (or production server). Here, you can see all the modules and logs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Web code editor**: Just like the web shell, Odoo.sh provides the code editor
    in the browser. Here, you can access all of the source code and also get the Odoo
    interactive shell for the current build.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSH access**: By registering your public keys, you can connect to any container
    via SSH.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`requirement.txt` to the root of your GitHub repository. Right now, you can
    only install Python packages. It is not possible to install system packages (apt
    packages).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server logs**: You can access the server log for each build from this browser.
    These logs are in real time, and you can also filter them from here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Automated tests**: Odoo.sh provides your own runbot, which you can use to
    perform a series of automated tests for your development. Whenever you add a new
    commit or a new development branch, Odoo.sh will automatically run all of the
    test cases and show the status of the tests. You can access the full test log,
    which will help you find issues if a test case fails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Staging and development branches**: Odoo.sh provides two types of branches:
    the development branch and the staging branch. In the development branch, you
    can test ongoing development with demonstration data. The staging branch is used
    when the development is finished, and you want to test the feature before merging
    it into production. The staging branch does not load the demonstration data; instead,
    it uses a copy of the production server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mail server**: Odoo.sh automatically sets up a mail server for the production
    server. Just like Odoo online, Odoo.sh does not need any extra configuration for
    email, although it is possible to use your own mail server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Mail catcher**: The staging branch uses a copy of your production database,
    so it has information about your real customers. Testing on such a database can
    make it possible to send emails to real customers. To avoid this issue, the email
    feature is only activated on production branches. Staging and development branches
    do not send real emails; instead, they use a mail catcher so that you can test
    and see emails in the staging and development branches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Share the build**: With Odoo.sh, you can share the development branches with
    your customers so they can test them before merging the feature into production.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Faster deployment**: As Odoo.sh is fully integrated with GitHub, you can
    merge and deploy the development branches directly from the browser with a simple
    drag-and-drop procedure.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Backup and recovery**: Odoo.sh keeps full backups for the production instance.
    You can download or restore any of these backups in just a few clicks. Refer to
    the *Getting a backup of your instance* recipe to learn more about backups. Odoo.sh
    keeps 14 full backups for up to 3 months: 1 per day for 7 days, 1 per week for
    4 weeks, 1 per month for 3 months.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Community modules**: You can test and install any community module in a few
    simple clicks. You can also test free modules directly from the app store.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating an Odoo.sh account
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, we will create an Odoo.sh account and an empty repository for
    the custom add-ons.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, you will need a GitHub account on which you can add custom
    modules. You will also need an Odoo.sh subscription code. If you are an Odoo partner,
    you will get a free Odoo.sh subscription code. Otherwise, you will need to purchase
    it from [https://www.odoo.sh/pricing](https://www.odoo.sh/pricing).
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to create an Odoo.sh account:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Open [https://www.odoo.sh](https://www.odoo.sh) and click on **Sign in** in
    the top menu. This will redirect you to the GitHub page:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.1 – GitHub authentication](img/B20997_19_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.1 – GitHub authentication
  prefs: []
  type: TYPE_NORMAL
- en: 'Give authorization to your repositories, which will redirect you back to Odoo.sh.
    Fill in the form to deploy the instance:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.2 – Create an Odoo.sh instance](img/B20997_19_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.2 – Create an Odoo.sh instance
  prefs: []
  type: TYPE_NORMAL
- en: 'This will deploy the instance, and you will be redirected to the Odoo.sh control
    panel. Wait for the build status to be successful; then, you can connect to your
    instance with the **CONNECT** button displayed in the following screenshot:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.3 – Connect to the development instance](img/B20997_19_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.3 – Connect to the development instance
  prefs: []
  type: TYPE_NORMAL
- en: Upon clicking **CONNECT**, you will be automatically logged in to your instance.
    If you are an admin, by clicking on the arrow button at the side, you can connect
    as other users as well.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The Odoo.sh platform is integrated with GitHub. You need to give full authorization
    to Odoo.sh so that it can access your repositories. Odoo.sh will also create the
    webhooks. GitHub webhooks notify the Odoo.sh platform when a new commit or branch
    has been added to your repository. When you sign in for the first time, Odoo.sh
    will redirect you to GitHub. GitHub will show a page similar to the screenshot
    in *step 1*, in which you will need to provide access to all of your private and
    public repositories. If you are not the owner of the repository, you will see
    the button to make an access request to the owner for the rights.
  prefs: []
  type: TYPE_NORMAL
- en: 'After you grant repository access to Odoo.sh, you will be redirected back to
    Odoo.sh, where you will see the form to deploy the Odoo instance. To create a
    new instance, you will need to add the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '**GitHub repository**: Here, you will need to set the GitHub repository with
    your custom modules. The modules in this repository will be available to the Odoo
    instance. You will see a list of all your existing repositories. You can select
    one of them or create a new one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Odoo version**: Choose the Odoo version you want to deploy. You can select
    from the currently supported Odoo LTS versions. Make sure you select the version
    that is compatible with the modules in the GitHub repository. For our example,
    we will select version 14.0.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Subscription code**: This is the code to activate the instance. You will
    receive the code via email after purchasing an Odoo.sh plan; if you are an official
    Odoo partner, you can ask for this code from Odoo.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Hosting location**: Here, you need to choose a server location based on your
    geographic location. The server that is nearest will give the best performance.
    The latency displayed under the hosting location is based on your location. So
    if you are creating an instance for your customer and the customer is in another
    country, you will need to select a server location that is near the customer’s
    location with lower latency.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Once you submit this form, your Odoo instances will be deployed, and you will
    be redirected to the Odoo.sh control panel. Here, you will see your first build.
    It will take a few minutes, and then you will be able to connect to your Odoo
    instance. If you check the left panel, you will see that there are no branches
    in the production and staging sections and that only one branch is in the development
    section. In the next few recipes, we will see how you can create staging and production
    branches.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Right now, Odoo.sh only works with GitHub. Other version-control systems, such
    as GitLab and Bitbucket, are not supported right now. If you want to use a system
    other than GitHub, you can use the intermediate GitHub repository that is linked
    to your actual repository via the submodule. In the future, Odoo will add support
    for GitLab and Bitbucket, but this is not the priority at the moment, according
    to the Odoo officials. The method suggested here is just a workaround if you want
    to use GitLab or Bitbucket.
  prefs: []
  type: TYPE_NORMAL
- en: Adding and installing custom modules
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: As we described earlier, in the *Exploring some basic concepts of Odoo.sh* recipe,
    on the Odoo.sh platform, you can add custom Odoo modules. The platform is integrated
    with GitHub, so adding a new commit in the registered repository will create a
    new build in the respective branch. In this recipe, we will add a custom module
    in our repository and access that module in Odoo.sh.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For our example, we will choose the `my_hostel` module from [*Chapter 18*](B20997_18.xhtml#_idTextAnchor990),
    *Automated Test Cases*. You can add any valid Odoo module in this recipe, but
    we will use the module with test cases here, as the Odoo.sh platform will perform
    all the test cases automatically. For simplicity, we have added this module in
    the GitHub repository of this book, at `Chapter20/r0_initial_module/my_hostel`.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add your custom modules to Odoo.sh:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Get your Git repository on your local machine, add the `my_hostel` module in
    it, and then execute the following command to push the module into the GitHub
    repository:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open your project in Odoo.sh. Here, you will find a new build for this commit.
    It will start running test cases, and you will see the following screen:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.4 – New build for the hostel module](img/B20997_19_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.4 – New build for the hostel module
  prefs: []
  type: TYPE_NORMAL
- en: 'After a new commit is pulled in your Odoo.sh project, you will see the installation
    progress on the right side. Wait for the installation to be complete, then access
    your instance by clicking on the green `my_hostel` module:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.5 – Hostel module installed](img/B20997_19_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.5 – Hostel module installed
  prefs: []
  type: TYPE_NORMAL
- en: Explore and test the `my_hostel` module. Note that this is not a production
    build, so you can test it however you like.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we uploaded the `my_hostel` module to the GitHub repository. Odoo.sh
    will be notified about these changes instantly through a webhook. Then, Odoo.sh
    will start building a new instance. It will install all your custom modules and
    their dependencies. A new build will automatically perform the test cases for
    the installed modules.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: By default, Odoo.sh will only install your custom modules and their dependencies.
    If you want to change this behavior, you can do it from the module installation
    section of the global settings. We will look at these settings in detail in the
    next few recipes.
  prefs: []
  type: TYPE_NORMAL
- en: In the **HISTORY** tab, you will be able to see the full history of the branch.
    Here, you can find some basic information about the build. It will display the
    commit message, the author information, and the GitHub link of the commit. On
    the right side, you will get the live progress of the build. Note that the builds
    in the development section will install the modules with demonstration data. In
    the next few recipes, you will see the difference between the production, development,
    and staging branches in detail.
  prefs: []
  type: TYPE_NORMAL
- en: After a successful build, you will see a button to connect the instance. By
    default, you will be connected with the admin user. Using **CONNECT** as a drop-down
    menu, you can log in as a demo and portal user instead.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Odoo.sh will create a new build for every new commit. You can change this behavior
    from the **SETTINGS** tab of the branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.6 – Development branch options](img/B20997_19_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.6 – Development branch options
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, you will find several options. One of them is **Behavior upon new commits**.
    It has three possible values:'
  prefs: []
  type: TYPE_NORMAL
- en: '**New Build**: This option will create a new build for each commit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Do Nothing**: This option will ignore the new commit and do nothing'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Update Previous Build**: This will use an existing build for the new commit'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Module installation** and **Test suite** options will help you control
    the test suites. You can disable testing and you can run specific test cases with
    these options.
  prefs: []
  type: TYPE_NORMAL
- en: Managing branches
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In Odoo.sh, you can create multiple development and staging branches along with
    the production branch. In this recipe, we will create different types of branches
    and see the differences between them. You will see the full workflow of how you
    can develop, test, and deploy the new features.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Visit [https://www.odoo.sh/project](https://www.odoo.sh/project) and open the
    project we created in the *Creating an Odoo.sh account* recipe. We will create
    a development branch for the new feature and then test it in the staging branch.
    Finally, we will merge the feature in the production branch.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In this recipe, we will create all types of branches in Odoo.sh. At the moment,
    we don’t have any branches in production, so we will start by creating a production
    branch.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the production branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Right now, we only have one **main** branch in the **Development** section.
    The last build of the **main** branch shows a green label that reads **Test: success**,
    meaning that all of the automated test cases have run successfully. We can move
    this branch into the **Production** branch, as the test case status shows that
    everything is fine. In order to move your **main** branch into the **Production**
    branch, you just need to drag the **main** branch from the **Development** section
    and drop it in the **Production** section, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.7 – Move the main branch to Production](img/B20997_19_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.7 – Move the main branch to Production
  prefs: []
  type: TYPE_NORMAL
- en: This will create your **Production** branch. You can access the **Production**
    branch with the **Connect** button on the right side. Once you open the production
    instance, you will notice that there have been no applications installed in the
    production database. This is because the production instance requires you or your
    end customer to install and configure the operation according to the requirements.
    Note that this is a production instance, so in order to keep the instance running,
    you need to enter your Enterprise subscription code.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a development branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: You can create development branches directly from the browser. Click on the
    plus (**+**) button next to the **Development** section. This will show two types
    of input. One is the branch to fork, and the other is the name of the development
    branch. After filling in the input, hit the *Enter* key.
  prefs: []
  type: TYPE_NORMAL
- en: 'This will create a new branch by forking the given branch, as shown in the
    following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.8 – Create a new development branch](img/B20997_19_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.8 – Create a new development branch
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: If you don’t want to create a development branch from the UI, you can create
    it directly from GitHub. If you add a new branch in the GitHub repository, Odoo.sh
    will create a new development branch automatically.
  prefs: []
  type: TYPE_NORMAL
- en: 'Branches in development are usually new feature branches. As an example, we
    will add a new field in the `hostel.room` model. Follow these steps to add a new
    HTML field in the `hostel` model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Increase the module version in the `manifest` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a new field in the model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a **policy** field in the hostel’s form view:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Push the changes in the feature branch by executing the following command in
    the terminal:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This will create a new build on Odoo.sh. After a successful build, you can test
    this new feature by accessing the instance. You will be able to see a new HTML
    field in the book’s form view. Note that this branch is the development branch,
    so the new feature is only available to this branch. Your production branch has
    not changed.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a staging branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Once you complete the development branch and the test cases are successful,
    you can move the branch to the **Staging** section. This is the pre-production
    section. Here, the new feature will be tested with a copy of the production database.
    This will help us to find any issues that might be generated in the production
    database. To move from the development branch to the **Staging** branch, just
    drag and drop the branch into the **Staging** section:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.9 – Move the development branch to Staging](img/B20997_19_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.9 – Move the development branch to Staging
  prefs: []
  type: TYPE_NORMAL
- en: Once you move the **Development** branch to the **Staging** section, you can
    test your new development with production data. Just like any other build, you
    can access the **Staging** branch with the **CONNECT** button on the right. The
    only difference is that you will be able to see the data of the production database
    in this case. Here, your development module is only upgraded automatically if
    you have increased the module version from the manifest.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: The staging branch will use a copy of the production database, so the staging
    instance will have real customers and their emails. For this reason, in the staging
    branch, real emails are disabled so that you don’t send any by accident when testing
    a new feature in the staging branch.
  prefs: []
  type: TYPE_NORMAL
- en: If you haven’t changed the module version, you will need to upgrade the modules
    manually to see the new features in action.
  prefs: []
  type: TYPE_NORMAL
- en: Merging new features in the production branch
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'After you test the new development with the production database (in the staging
    branch), you can deploy the new development into the **Production** branch. Like
    before, you just need to drag and drop the **Staging** branch into the **Production**
    branch. This will merge the new feature branch into the main branch. Like the
    **Staging** branch, your development module is only upgraded automatically if
    you have increased the module version from **manifest**. After this, the new module
    is available for the end customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.10 – Merge changes to production](img/B20997_19_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.10 – Merge changes to production
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you drop the staging branch to **Production**, a popup will be displayed
    with two options:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Rebase and Merge**: This will create a pull request and merge it with the
    rebase so you will have liner history.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Merge**: This will create a merge commit without fast-forwarding:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 19.11 – Display popup for Merge and Rebase and Merge button](img/B20997_19_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.11 – Display popup for Merge and Rebase and Merge button
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the previous example, we performed a full workflow to deploy a new feature
    into production. The following list explains the purposes of the different types
    of branches in Odoo.sh:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Production branch**: This is the actual instance that is used by the end
    customer. There is only one production branch, and the new features are intended
    to merge with this branch. In this branch, the mailing service is active, so your
    end customer can send and receive emails. Daily backup is also active for this
    branch.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Development branches**: This type of branch shows all the active development.
    You can create unlimited development branches, and every new commit in the branch
    will trigger a new build. The database in this branch is loaded with the demonstration
    data. After the development is complete, this branch will be moved to the staging
    branch. The mailing service is not active in these branches.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Staging branches**: This is the intermediate stage in the workflow. A stable
    development will be moved to the staging branch to be tested with a copy of the
    production branch. This is a very important step in the development life cycle;
    it might happen that a feature that works fine in the development branch does
    not work as expected with the production database. The staging branches give you
    an opportunity to test the feature with the production database before deploying
    it in production. If you find any issues with the development in this branch,
    you can move the branch back to development. The number of staging branches is
    based on your Odoo.sh plan. By default, you only have one staging branch, but
    you can purchase more if you want to.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This is the complete workflow of how new features should be merged into production.
    In the next recipe, you will see some other options that we can use with these
    branches.
  prefs: []
  type: TYPE_NORMAL
- en: Accessing debugging options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo.sh provides different features for analysis and debugging purposes. In
    this recipe, we will explore all of these features and options.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the same Odoo.sh project for this recipe. Each option will
    be shown in a different section with a screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Branch history
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You have already seen this feature in previous recipes. The **HISTORY** tab
    shows the full history of the branch. You can connect to the builds from here:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.12 – The HISTORY tab](img/B20997_19_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.12 – The HISTORY tab
  prefs: []
  type: TYPE_NORMAL
- en: In the **HISTORY** tab, you can see all past actions performed on a selected
    branch. It will display logs, merges, new commits, and database restores.
  prefs: []
  type: TYPE_NORMAL
- en: Mail catcher
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: The staging branch uses a copy of your production database, so it has information
    about your customers. Testing the staging branch can send emails to real customers.
    This is why emails are only activated on production branches. The staging and
    development branches do not send real emails. If you want to test the email system
    before deploying any feature into production, you can use the mail catcher, where
    you can see the list of all outgoing emails. The mail catcher will be available
    in the staging and development branches.
  prefs: []
  type: TYPE_NORMAL
- en: 'The mail catcher will display an email with the source and any attachments,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.13 – Mail catcher](img/B20997_19_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.13 – Mail catcher
  prefs: []
  type: TYPE_NORMAL
- en: In the **MAILS** tab, you can see a list of all the captured mail with all attachments.
    Note that the **MAILS** tab will only be displayed in the staging and development
    branches.
  prefs: []
  type: TYPE_NORMAL
- en: Web shell
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: From the `pip` and maintain multiple tabs.
  prefs: []
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot: you can access the web shell by clicking
    on **SHELL**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.14 – Web shell](img/B20997_19_014.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.14 – Web shell
  prefs: []
  type: TYPE_NORMAL
- en: With shell access, you can traverse between different directories and perform
    operations. You can also use the `pip` command to install Python packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is the directory structure from the root directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: These directories can be different based on the type of branch. For example,
    **Maildir** will only be available in the staging and development branches as
    it uses a mail catcher.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sometimes, you need to restart the server or update the module from the shell.
    You can use the following command in the shell to restart the server:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'To update the module, execute the given command in the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will update the **my_hostel** module. If you want to update
    multiple modules, you can pass module names separated by a comma.
  prefs: []
  type: TYPE_NORMAL
- en: Code editor
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'If you are not comfortable with shell access, Odoo.sh provides a full-featured
    editor. Here, you can access the Python shell, the Odoo shell, and the Terminal.
    You can also edit the source code from here, as you can see in the given screenshot.
    After modifying the source code, you can restart the server from the **Odoo**
    menu at the top:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.15 – Web code editor](img/B20997_19_015.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.15 – Web code editor
  prefs: []
  type: TYPE_NORMAL
- en: As depicted in the preceding screenshot, you will be able to update files from
    the editor. Odoo will detect the changes automatically and restart the server.
    Note that if you make changes in data files, you will need to update the module.
  prefs: []
  type: TYPE_NORMAL
- en: Logs
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'From the **LOGS** tab, you can access all of the logs for your instance. You
    can see the live logs without reloading the pages. You can filter the logs from
    here. This allows you to find issues from the production server. Here is a list
    of the different log files you can find in the **LOGS** tab:'
  prefs: []
  type: TYPE_NORMAL
- en: '`install.log`: This is for the logs that are generated when installing the
    modules. The logs of all the automated test cases will be located here.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`pip.log`: You can add Python packages with the `requirement.txt` file. In
    this log file, you will find the installation log of these Python packages.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`odoo.log`: This is the normal access log of Odoo. You will find the full access
    log here. You should look in this log to check production errors.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`update.log`: When you upload a new module with a different manifest version,
    your module gets updated automatically. This file contains the logs of these automatic
    updates.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Take a look at the following screenshot. This shows the live logs for the production
    branch:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.16 – Server log](img/B20997_19_016.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.16 – Server log
  prefs: []
  type: TYPE_NORMAL
- en: The preceding screenshot shows that the logs are live, so you will be able to
    see new logs without reloading. Additionally, you can search for a particular
    log with the textbox in the top-right corner of the UI.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some commonly used `git` commands are available on top of the module, as shown
    in the following screenshot. You can run these by using the **Run** button on
    the left. These commands can’t be edited, but if you want to run a modified command,
    you can copy it from here and then run it from the shell:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.17 – Git commands](img/B20997_19_017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.17 – Git commands
  prefs: []
  type: TYPE_NORMAL
- en: You can execute these `git` commands in the shell to perform various operations,
    as depicted in the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: Getting a backup of your instance
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Backups are essential for the production server. Odoo.sh provides a built-in
    backup facility. In this recipe, we will illustrate how you can download and restore
    backups from Odoo.sh.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In the production branch, you can access the full information about the backups
    from the **BACKUPS** tab at the top. This will display a list of backups:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.18 – Backups manager](img/B20997_19_018.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.18 – Backups manager
  prefs: []
  type: TYPE_NORMAL
- en: From the buttons at the top, you can carry out backup operations, such as downloading
    the dump, performing a manual backup, or restoring from a backup. A database backup
    can take a long time, so it will be done in the background. You will recieve a
    notification on the bell icon at the top when it is completed.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Odoo automatically takes a backup of your production instance daily. Odoo also
    takes an automatic backup whenever you merge a new development branch and update
    the module. You can also perform a manual backup using the button at the top.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo.sh keeps a total of 14 full backups for the Odoo production instance for
    up to 3 months—1 per day for 7 days, 1 per week for 4 weeks, and 1 per month for
    3 months. From the **BACKUPS** tab, you can access 1 month of backups (all 7 days
    of the week and 4 weekly backups).
  prefs: []
  type: TYPE_NORMAL
- en: If you are moving to Odoo.sh from the on-premises or online option, you can
    import your database using the **Import Database** button. If you import your
    database directly into production, it might cause issues. To avoid this, you should
    import the database into the staging branch first.
  prefs: []
  type: TYPE_NORMAL
- en: Checking the status of your builds
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Whenever you make a new commit, Odoo.sh creates the new commit. It also performs
    automated test cases. To manage all of this, Odoo.sh has its own version of runbot.
    In this recipe, we will check the statuses of all the builds.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Click on the **Builds** menu at the top to open the list of builds. Here, you
    can see a full overview of all of the branches and their commits:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.19 – Build status](img/B20997_19_019.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.19 – Build status
  prefs: []
  type: TYPE_NORMAL
- en: By clicking on the **Connect** buttons, you can connect to the instances. You
    can see the status of the build by the background color of the branch.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On the runbot screen, you will get extra control over the builds. You can connect
    to the previous builds from here. Different colors show the status of the build.
    Green means that everything is fine; yellow indicates a warning, which can be
    ignored, but it is recommended that you fix it; red means there is a critical
    issue that you have to fix before merging the development branch into production.
    The red and yellow branches show the exclamation icon, **(!)**, near the **Connect**
    button. When you click on this, you will get a popup with the error and warning
    log. Usually, you need to search the installation log files to find the error
    or warning logs, but this popup will filter out the other logs and only display
    the error and warning logs. This means that whenever a build goes red or yellow,
    you should come here and fix the errors and warnings before merging them into
    production.
  prefs: []
  type: TYPE_NORMAL
- en: Inactive development branches are destroyed after a few minutes. Normally, a
    new build will be created when you add a new **Commit** button. If you want to
    reactivate the build without a new commit; however, you can use the **Rebuild**
    button on the left side. The builds for the staging branches are also destroyed
    after a few minutes, apart from the last one, which will remain active.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'From the **Status** menu in the bar at the top, you can see the overall statistics
    of your instance. The platform servers are continuously monitored. On the **Status**
    screen, you will see the statistics of the server’s availability, which will be
    computed automatically from the platform’s monitoring system. It will show data,
    including the server uptime. The **Status** page will show the input and output
    data from the server. The **Status** page will display the following information:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.20 – Odoo.sh status](img/B20997_19_020.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.20 – Odoo.sh status
  prefs: []
  type: TYPE_NORMAL
- en: The data displayed in the **Status** tab is collected from the various monitoring
    tools used by Odoo.sh.
  prefs: []
  type: TYPE_NORMAL
- en: All Odoo.sh options
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo.sh provides a few further options under the **Settings** menu. In this
    recipe, you will see all of the important options used to modify the default behavior
    of certain things on the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We will be using the same Odoo.sh project that we used in previous recipes.
    You can access all the Odoo.sh settings from the **Settings** menu in the top
    bar. If you are not able to see this menu, that means you are accessing a shared
    project and you don’t have admin access.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Open the **Settings** page from the **Settings** menu in the top bar. We’ll
    take a look at the different options in the following sections.
  prefs: []
  type: TYPE_NORMAL
- en: Project name
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can change the name of the Odoo.sh project from this option. The project
    name in the input will be used to generate your production URL. Development builds
    also use this project name as a prefix. In this case, the URL of our feature branch
    will be something like [https://serpentcs-odooshdemov17-feature-branch-260887.dev.odoo.com](https://serpentcs-odooshdemov17-feature-branch-260887.dev.odoo.com):'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.21 – Change the project name](img/B20997_19_021.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.21 – Change the project name
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: This option will change the production URL, but you cannot get rid of `*.odoo.com`.
    If you want to run a production branch on a custom domain, you can add your custom
    domain in the **Settings** tab of the production branch. You will also need to
    add a CNAME entry in your DNS manager.
  prefs: []
  type: TYPE_NORMAL
- en: Collaborators
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can share the project by adding collaborators. Here, you can search for
    and add a new collaborator using their GitHub ID. A collaborator can have either
    **Admin** or **User** access rights. A collaborator with admin access rights will
    have full access (to the settings as well). A collaborator with user access rights,
    on the other hand, will have restricted access rights. They will be able to see
    all builds, but they will not be able to access the backups, logs, shells, or
    emails of the production or staging branches, although they will have full access
    to the development branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.22 – Add collaborators](img/B20997_19_022.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.22 – Add collaborators
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: You will need to give these users access to the GitHub repository, too; otherwise,
    they won’t be able to create a new repository from the browser.
  prefs: []
  type: TYPE_NORMAL
- en: Public Access
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Using this option, you can share builds with your end customer. This can be
    used for demonstration or testing purposes. To do so, you need to enable the **Allow
    public** **access** checkbox:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.23 – Give public access to builds](img/B20997_19_023.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.23 – Give public access to builds
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the staging branch will have the same password as your production
    branch. However, in the development branch, you will have the username and password
    shown in this table:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Table 19.1](img/Table_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Table 19.1
  prefs: []
  type: TYPE_NORMAL
- en: Module installation
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'In the **Settings** tab of the development branch, you will see the **Module
    installation** option for the development branches. It provides three options,
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.24 – Module installation options](img/B20997_19_024.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.24 – Module installation options
  prefs: []
  type: TYPE_NORMAL
- en: By default, it is set to **Install only my modules**. This option will install
    all of your custom modules and their dependent modules in the new development
    branches. Only automated test cases are performed for these modules. The second
    option is **Full installation**. This option will install all of the modules and
    perform automated test cases for all of those modules. The final option is **Install
    a list of modules**. In this option, you will need to pass a list of comma-separated
    modules, such as **sales**, **purchases**, and **my_hostel**. This option will
    install the given modules and their dependencies.
  prefs: []
  type: TYPE_NORMAL
- en: This setting only applies to development builds. Staging builds duplicate the
    production build, so they will have the same modules installed in the production
    branch and perform test cases for modules that have an updated version manifest.
  prefs: []
  type: TYPE_NORMAL
- en: Submodules
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'The **Submodules** option is used when you are using private modules as submodules.
    This setting is only needed for private submodules; public submodules will work
    fine without any issues. It is not possible to download private repositories publicly,
    so you need to give repository access to Odoo.sh. Follow these steps to add access
    to the private submodules:'
  prefs: []
  type: TYPE_NORMAL
- en: Copy the SSH URL of your private submodule repository in the input and click
    on **Add**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Copy the displayed **public key**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Add this **public key** as a deploy key in your private repository settings
    in GitHub (similar settings are also available on Bitbucket and GitLab):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 19.25 – Set the private submodule](img/B20997_19_025.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.25 – Set the private submodule
  prefs: []
  type: TYPE_NORMAL
- en: You can add multiple submodules, too, and you can remove submodules from here
    as well.
  prefs: []
  type: TYPE_NORMAL
- en: Database Workers
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'You can increase the number of workers for the production build. This is useful
    when you have more users; usually, a single worker can handle 25 backend users
    or 5,000 daily website visitors. This formula is not perfect; it can vary based
    on usage. This option is not free, and increasing the number of workers will increase
    the price of your Odoo.sh subscription:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.26 – Set Database Workers](img/B20997_19_026.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.26 – Set Database Workers
  prefs: []
  type: TYPE_NORMAL
- en: These **Database Workers** are multithreaded, and each one is able to handle
    15 concurrent requests. It is necessary to have enough workers to serve all incoming
    requests as they arrive, but increasing the number of workers does not increase
    the speed of the requests’ processing time. It is only used to handle a large
    number of concurrent users.
  prefs: []
  type: TYPE_NORMAL
- en: Staging Branches
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Staging branches are used to test a new development with the production database.
    By default, Odoo.sh gives you one staging branch. If you are working on large
    projects with lots of developers, this might be a bottleneck in the development
    process, so you can increase the number of **Staging Branches** at an extra cost:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.27 – Set staging branches](img/B20997_19_027.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.27 – Set staging branches
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Along with the configuration options, the **Settings** menu will also display
    some statistics related to the platform.
  prefs: []
  type: TYPE_NORMAL
- en: Database size
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'This section will display the size of your production database. The Odoo.sh
    platform charges the database at USD 1/GB/month. This option helps you keep track
    of your database. The displayed database size is only for the production database;
    it does not include the databases of the staging and development branches:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 19.28 – Database size](img/B20997_19_028.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 19.28 – Database size
  prefs: []
  type: TYPE_NORMAL
- en: Odoo source code revisions
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: This section will display the GitHub revision number of Odoo’s project. It will
    display the revision hash for the Community, Enterprise, and theme projects that
    are currently being used in the platform. This source code will automatically
    be updated every week. This option will help you get the exact same versions on
    your local machine. You can also check this from the web shell, through the `git`
    command in the repository.
  prefs: []
  type: TYPE_NORMAL
