["```py\n    sudo apt update\n    ```", "```py\n    sudo apt upgrade\n    ```", "```py\n    sudo apt install ros-humble-desktop\n    ```", "```py\n    sudo apt install ros-dev-tools\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    ```", "```py\n    talker from the demo_nodes_cpp package. We should observe messages printed to the console:\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    ros2 run demo_nodes_py listener\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    turtlesim_node node from the turtlesim package. Once these commands are executed, a TurtleSim window should appear, displaying a graphic of a simulated turtle positioned in the center of the screen:\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    turtle_teleop_key node from the turtlesim package. This node allows us to control the TurtleSim robot with our keyboard. Our Terminal should look like the following:\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    rqt_graph tool. We should see the following window:\n    ```", "```py\n    mkdir -p ch11_ws/src\n    ```", "```py\n    cd ch11_ws/src\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    ```", "```py\n    ros2 pkg create --build-type ament_python --license Apache-2.0 --node-name draw_circle mqtt_robot --license Apache-2.0\n    ```", "```py\n    draw_circle.py script with the following command:\n\n    ```", "```py\n    gedit draw_circle.py\n    ```", "```py\n\n    ```", "```py\n    import rclpy\n    from rclpy.node import Node\n    from geometry_msgs.msg import Twist\n    import paho.mqtt.client as mqtt\n    ```", "```py\n    class MQTTMessage:\n        def __init__(self):\n            self.should_draw_circle = False\n        def set_flag(self, message):\n            if message == 'draw_circle':\n                self.should_draw_circle = True\n            elif message == 'stop':\n                self.should_draw_circle = False\n    ```", "```py\n    class CircleMover(Node):\n        def __init__(self, mqtt_message):\n            super().__init__('circle_mover')\n            self.mqtt_message = mqtt_message\n            self.publisher = self.create_publisher(\n                             Twist, 'turtle1/cmd_vel', 10)\n            timer = 0.1  # seconds\n            self.timer = self.create_timer( timer,\n                         self.timer_callback)\n            self.vel_msg = Twist()\n            # Initialize MQTT Client and set up callbacks\n            self.mqtt_client = mqtt.Client()\n            self.mqtt_client.on_connect = self.on_connect\n            self.mqtt_client.on_message = self.on_message\n            self.mqtt_client.username_pw_set(\"username\",\n                                             \"password\")\n            self.mqtt_client.connect(\"\n                               driver.cloudmqtt.com\",\n                               port, 60)\n            self.mqtt_client.loop_start()\n        def on_connect(self, client, userdata, flags, rc):\n            client.subscribe(\"move\")\n        def on_message(self, client, userdata, msg):\n            self.mqtt_message.set_flag(\n                                msg.payload.decode())\n    ```", "```py\n        def timer_callback(self):\n            if self.mqtt_message.should_draw_circle:\n                self.vel_msg.linear.x = 1.0\n                self.vel_msg.angular.z = 1.0\n            else:\n                self.vel_msg.linear.x = 0.0\n                self.vel_msg.angular.z = 0.0\n            self.publisher.publish(self.vel_msg)\n    ```", "```py\n    def main(args=None):\n        rclpy.init(args=args)\n        mqtt_message = MQTTMessage()\n        circle_mover = CircleMover(mqtt_message)\n        rclpy.spin(circle_mover)\n        circle_mover.destroy_node()\n        rclpy.shutdown()\n    if __name__ == '__main__':\n        main()\n    ```", "```py\n    package.xml in a text editor, we execute the following command:\n\n    ```", "```py\n      <exec_depend>rclpy</exec_depend>\n      <exec_depend>paho-mqtt</exec_depend>\n    ```", "```py\n\n    ```", "```py\n    source /opt/ros/humble/setup.bash\n    ```", "```py\n    cd ~/ch11_ws\n    ```", "```py\n    colcon build\n    ```", "```py\n    source ~/ch11_ws/install/setup.bash\n    ```", "```py\n    draw_circle, from the package we created, mqtt_robot. Upon execution, our Terminal will enter a wait state, ready to respond to incoming events or actions.\n    ```"]