["```py\ndef test_2(self):\n    print(\"in test_2\")\n    self.assertEqual(1+1, 2)\n```", "```py\ndef test_2(self):\n    print(\"in test_2\")\n    self.assertEqual(1+1, 3)\n```", "```py\nsuite_a = unittest.makeSuite(MyUnitTestA)\n```", "```py\ndef test_injured_unit_selection(self): \n    knight = Knight() \n    enemy = OrcRider() \n    # rest of the test code...\n```", "```py\n$ cd wargame\n$ python -m unittest test.test_wargame\n\n```", "```py\n$ cd wargame\n$ python -m unittest test.test_wargame\n\n```", "```py\n$ python -m unittest test.test_wargame.TestWarGame.test_acquire_hut\n\n```", "```py\n$ cd wargame\n$ python -m unittest test.test_hut\n\n```", "```py\n$ python -m unittest discover\n\n```", "```py\n$ pip install mock\n\n```", "```py\n>>> from unittest.mock import Mock\n\n```", "```py\n>>> mockObj = Mock()\n\n```", "```py\n>>> mockObj \n<Mock id='140524045365320'> \n\n```", "```py\n>>> mockObj.foo\n\n```", "```py\n>>> mockObj.foo\n<Mock name='mockObj.foo' id='140524032172664'>\n\n```", "```py\n>>> mockObj.mock_calls\n[]\n\n```", "```py\n>>> mockObj.foo()\n<Mock name='mockObj.foo()' id='140524032173280'> \n\n```", "```py\n>>> mockObj.foo2(return_value = 20) \n<Mock name='mock.foo2()' id='140271893632056'> \n\n```", "```py\n>>> test_call_list = mockObj.mock_calls \n>>> test_call_list\n[call.foo(), call.foo2(return_value=20)]\n\n```", "```py\npatch(target, new=DEFAULT)\n```", "```py\npatch('__main__.MyClassA.foo', new=Mock(return_value=500))\n```", "```py\nfrom unittest import mock\n```", "```py\n$ cd wargame\n$ python -m unittest test.test_wargame.TestWarGame.test_play\n\n```", "```py\n$ pip install coverage\n\n```", "```py\n$ cd wargame\n$ coverage run -m test.test_wargame && coverage report\n\n```", "```py\n$ cd wargame/test\n$ coverage run test_wargame.py && coverage report\n\n```", "```py\nimport sys \n# Append the directory one level up to the sys.path . \n# Alternatively specify the full path to that dir.\nsys.path.append('../')\n```", "```py\ndef add_nums(a, b): \n    \"\"\"Return sum of two numbers \n\n    Example usage: \n    .. doctest:: \n\n    >>> add_nums(10, 20) \n    30 \n    \"\"\" \n    return (a + b)\n```", "```py\n$ pip install nose\n\n```", "```py\ndef test_a(): \n   assert( 1 == 1) \n```", "```py\n$ nosetests test_nose.py\n\n```", "```py\n$ nosetests --tests foo_a test_nose.py \n\n```", "```py\n$ pip install pytest\n\n```", "```py\ndef test_a(): \n   assert( 1 == 1) \n```", "```py\n$ py.test test_pytest.py\n\n```", "```py\n$ cd wargame\n$ python -m unittest test.test_wargame.TestWarGame.test_occupy_huts\n\n```"]