["```py\nclass Node:\n    def __init__ (self, data=None):\n        self.data = data \n        self.next = None \n```", "```py\nn1 = Node('eggs')\nn2 = Node('ham') \nn3 = Node('spam') \n```", "```py\nn1.next = n2\nn2.next = n3 \n```", "```py\ncurrent = n1 \nwhile current:\n     print(current.data)\n     current = current.next \n```", "```py\neggs\nham\nspam \n```", "```py\ndef iter(self):\n    current = self.head \n    while current:\n        val = current.data \n        current = current.next \n        yield val \n```", "```py\nfor word in words.iter():\n    print(word) \n```", "```py\nclass SinglyLinkedList:\n    def __init__ (self):\n        self.head = None \n```", "```py\nclass SinglyLinkedList:\n    def __init__ (self):  \n        self.head = None  \n        self.size = 0\ndef append(self, data):\n    # Encapsulate the data in a Node \n    node = Node(data)\n    if self.head is None:\n        self.head = node\n    else:\n        current = self.head\n        while current.next:\n            current = current.next\n        current.next = node \n```", "```py\nwords = SinglyLinkedList()\nwords.append('egg')\nwords.append('ham')\nwords.append('spam') \n```", "```py\ncurrent = words.head\nwhile current:\n   print(current.data)\n   current = current.next \n```", "```py\nclass SinglyLinkedList:\n    def __init__ (self):\n        self.tail = None\n        self.head = None\n        self.size = 0\n    def append(self, data):\n        node = Node(data)\n        if self.tail:\n            self.tail.next = node\n            self.tail = node\n        else:\n            self.head = node \n            self.tail = node \n```", "```py\nwords = SinglyLinkedList()\nwords.append('egg')\nwords.append('ham')\nwords.append('spam')\n\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\neggs\nham\nspam \n```", "```py\nclass SinglyLinkedList:\n    def __init__ (self):\n        self.tail = None\n        self.head = None\n        self.size = 0\n    def append_at_a_location(self, data, index): \n        current = self.head \n        prev = self.head \n        node = Node(data)\n        count = 1\n        while current:\n            if count == 1:        \n                node.next = current\n                self.head = node\n                print(count)\n                return\n            elif index == index:\n                node.next = current \n                prev.next = node\n                return\n            count += 1\n            prev = current\n            current = current.next\n        if count < index:\n            print(\"The list has less number of elements\") \n```", "```py\n2 in the existing linked list:\n```", "```py\nwords = SinglyLinkedList()\nwords.append('egg')\nwords.append('ham')\nwords.append('spam')\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next\nwords.append_at_a_location('new', 2)\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\negg\nnew\nham\nspam \n```", "```py\ndef append_at_a_location(self, data): \n    current = self.head \n    prev = self.head\n    node = Node(data)\n    while current:\n        if current.data == data:\n            node.next = current \n            prev.next = node\n        prev = current\n        current = current.next \n```", "```py\nwords.append_at_a_location('ham')\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\negg\nham\nham\nspam \n```", "```py\ndef search(self, data):\n    for node in self.iter():\n        if data == node:\n            return True\n    return False \n```", "```py\nprint(words.search('sspam'))\nprint(words.search('spam')) \n```", "```py\nFalse\nTrue \n```", "```py\ndef size(self):\n    count = 0\n    current = self.head\n    while current:\n        count += 1\n        current = current.next\n    return count \n```", "```py\nclass SinglyLinkedList:\n    def __init__(self):\n        self.head = data\n        self.size = 0 \n```", "```py\ndef delete_first_node (self):\n       current = self.head  \n        if self.head is None:\n              print(\"No data element to delete\")\n        elif current == self.head:\n              self.head = current.next \n```", "```py\nwords.delete_first_node()\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\nham\nspam \n```", "```py\n def delete_last_node (self):  \n        current = self.head  \n        prev = self.head  \n        while current: \n            if current.next is None: \n                prev.next = current.next  \n                self.size -= 1 \n            prev = current \n            current = current.next \n```", "```py\ndef delete(self, data):\n    current = self.head \n    prev = self.head \n    while current:\n          if current.data == data:\n              if current == self.head:\n                  self.head = current.next \n              else:\n                  prev.next = current.next \n              self.size -= 1\n              return\n          prev = current\n          current = current.next \n```", "```py\nwords.delete(\"ham\")\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\negg\nspam \n```", "```py\ndef clear(self):\n    # clear the entire list.\n    self.tail = None\n    self.head = None \n```", "```py\nclass Node:\n    def __init__ (self, data=None, next=None, prev=None):\n       self.data = data \n       self.next = next \n       self.prev = prev \n```", "```py\nclass DoublyLinkedList:\n    def __init__ (self): \n        self.head = None\n        self.tail = None\n        self.count = 0 \n```", "```py\ndef append_at_start(self, data):\n  #Append an item at beginning to the list.\n  new_node = Node(data, None, None)\n  if self.head is None:\n      self.head = new_node\n      self.tail = self.head\n    else:\n      new_node.next = self.head\n      self.head.prev = new_node\n      self.head = new_node\n  self.count += 1 \n```", "```py\nwords = DoublyLinkedList()\nwords.append('egg')\nwords.append('ham')\nwords.append('spam')\nprint(\"Items in doubly linked list before append:\")\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next\nwords.append_at_start('book')\nprint(\"Items in doubly linked list after append:\")\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\nItems in doubly linked list before append:\negg\nham\nspam\nItems in doubly linked list after append:\nbook\negg\nham\nspam \n```", "```py\ndef append(self, data):\n    #Append an item at the end of the list.\n    new_node = Node(data, None, None)\n    if self.head is None:\n        self.head = new_node\n        self.tail = self.head\n    else:\n        new_node.prev = self.tail\n        self.tail.next = new_node\n        self.tail = new_node\n    self.count += 1 \n```", "```py\nnew_node.prev = self.tail \n```", "```py\nself.tail.next = new_node \n```", "```py\nself.tail = new_node \n```", "```py\nself.count += 1 \n```", "```py\nprint(\"Items in doubly linked list after append\")\nwords = DoublyLinkedList()\nwords.append('egg')\nwords.append('ham')\nwords.append('spam')\nwords.append('book')\nprint(\"Items in doubly linked list after adding element at end.\")\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\nItems in doubly linked list after adding element at end.\negg\nham\nspam\nbook \n```", "```py\ndef append_at_a_location(self, data):\n   current = self.head\n   prev = self.head\n   new_node = Node(data, None, None)\n   while current:\n        if current.data == data:\n            new_node.prev = prev\n            new_node.next = current\n            prev.next = new_node\n            current.prev = new_node\n            self.count += 1\n        prev = current\n        current = current.next \n```", "```py\nham\" after the first occurrence of the word â€œham\" in the doubly linked list:\n```", "```py\nwords = DoublyLinkedList() \nwords.append('egg') \nwords.append('ham') \nwords.append('spam') \nwords.append_at_a_location('ham')\nprint(\"Doubly linked list after adding an element after word \\\"ham\\\" in the list.\")\ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\nDoubly linked list after adding an element after word \"ham\" in the list.\negg\nham\nham\nspam \n```", "```py\ndef iter(self):\n        current = self.head \n        while current:\n            val = current.data \n            current = current.next \n            yield val\n\n    def contains(self, data): \n        for node_data in self.iter(): \n            if data == node_data: \n                print(\"Data item is present in the list.\")\n                return   \n        print(\"Data item is not present in the list.\")\n        return \n```", "```py\nwords = DoublyLinkedList() \n\nwords.append('egg') \nwords.append('ham') \nwords.append('spam')\nwords.contains(\"ham\") \nwords.contains(\"ham2\") \n```", "```py\nData item is present in the list.\nData item is not present in the list. \n```", "```py\n def delete(self, data):\n          # Delete a node from the list. \n          current = self.head \n          node_deleted = False \n          if current is None:       \n          #List is empty \n               print(\"List is empty\")\n          elif current.data == data:   \n          #Item to be deleted is found at starting of the list\n               self.head.prev = None \n               node_deleted = True \n               self.head = current.next\n           elif self.tail.data == data:   \n        #Item to be deleted is found at the end of list\n               self.tail = self.tail.prev  \n               self.tail.next = None \n               node_deleted = True \n          else: \n               while current:          \n               #search item to be deleted, and delete that node\n                   if current.data == data: \n                       current.prev.next = current.next  \n                       current.next.prev = current.prev \n                       node_deleted = True \n                   current = current.next \n               if node_deleted == False: \n               # Item to be deleted is not found in the list\n                   print(\"Item not found\")\n          if node_deleted: \n               self.count -= 1 \n```", "```py\ndef delete(self, data):\n    current = self.head\n    node_deleted = False \n```", "```py\nif current is None:\n  node_deleted = False \n```", "```py\nelif current.data == data:\n    self.head.prev = None\n    node_deleted = True\n    self.head = current.next \n```", "```py\nelif self.tail.data == data:\n   self.tail = self.tail.prev\n   self.tail.next = None\n   node_deleted = True \n```", "```py\nelse:\n    while current:\n       if current.data == data:\n             current.prev.next = current.next\n             current.next.prev = current.prev\n             node_deleted = True\n       current = current.next\n   if node_deleted == False:\n# Item to be deleted is not found in the list\n       print(\"Item not found\") \n```", "```py\nif node_deleted:\n  self.count -= 1 \n```", "```py\n#Code to create for a doubly linked list\nwords = DoublyLinkedList()\nwords.append('egg')\nwords.append('ham')\nwords.append('spam')\nwords.delete('ham') \ncurrent = words.head\nwhile current:\n    print(current.data)\n    current = current.next \n```", "```py\negg\nspam \n```", "```py\nclass CircularList:\n    def __init__ (self):\n        self.tail = None\n        self.head = None\n        self.size = 0 \n```", "```py\n def append(self, data):\n        node = Node(data) \n        if self.tail: \n            self.tail.next = node\n            self.tail = node\n `node.next = self.head`\n        else: \n            self.head = node \n            self.tail = node \n `self.tail.next = self.tail`\n        self.size += 1 \n```", "```py\ndef iter(self):\n     current = self.head\n     while current:\n          val = current.data\n          current = current.next\n          yield val \n```", "```py\nwords = CircularList()\nwords.append('eggs')\nwords.append('ham')\nwords.append('spam') \n```", "```py\ncounter = 0\nfor word in words.iter():\n    print(word)\n    counter += 1\n    if counter > 2:\n        break \n```", "```py\neggs\nham\nspam \n```", "```py\nwords = CircularList()\nwords.append('eggs')\nwords.append('ham')\nwords.append('spam')\ncounter = 0\nfor word in words.iter():\n    print(word)\n    counter += 1\n    if counter > 100:\n        break \n```", "```py\n def delete(self, data):\n        current = self.head\n        prev = self.head\n `while prev == current or prev != self.tail:`\n            if current.data == data:\n                if current == self.head:   \n                    #item to be deleted is head node\n                    self.head = current.next\n                    self.tail.next = self.head\n                elif current == self.tail:  \n                    #item to be deleted is tail node\n                    self.tail = prev\n                    prev.next = self.head\n                else:\n                    #item to be deleted is an intermediate node\n                    prev.next = current.next\n                self.size -= 1\n                return\n            prev = current\n            current = current.next\n            if flag is False:\n                print(\"Item not present in the list\") \n```", "```py\nwords = CircularList()\nwords.append('eggs')\nwords.append('ham')\nwords.append('spam')\nwords.append('foo')\nwords.append('bar')\n\nprint(\"Let us try to delete something that isn't in the list.\")\nwords.delete('socks')\ncounter = 0\nfor item in words.iter():\n    print(item)\n    counter += 1\n    if counter > 4:\n        break\n\nprint(\"Let us delete something that is there.\")\nwords.delete('foo')\ncounter = 0\nfor item in words.iter():\n    print(item)\n    counter += 1\n    if counter > 3:\n        break \n```", "```py\nLet us try to delete something that isn't in the list.\nItem not present in the list\neggs\nham\nspam\nfoo\nbar\nLet us delete something that is there.\neggs\nham\nspam\nbar \n```"]