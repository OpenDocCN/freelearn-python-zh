- en: '[*Chapter 11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324): Kanban Views
    and Client-Side QWeb'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '**Kanban views** support lean processes, providing a visual representation
    of the work in progress and the status of each work item. This can be an important
    tool to streamline business processes.'
  prefs: []
  type: TYPE_NORMAL
- en: This chapter introduces **kanban board** concepts, and how they are implemented
    in **Odoo** by using the kanban view type, stage columns, and kanban states.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban views are powered by **QWeb** – the template engine used by Odoo. It
    is **XML**-based and used to generate **HTML** fragments and pages. It is also
    used for reports and website pages, so it is an important part of Odoo that developers
    should be familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, we will show how to organize a kanban view in several areas,
    such as the title and main content, as well as how to use the QWeb syntax to apply
    the widgets and effects that are available.
  prefs: []
  type: TYPE_NORMAL
- en: The QWeb template language will be described in detail to provide a complete
    understanding of its features.
  prefs: []
  type: TYPE_NORMAL
- en: The later sections will explain how to extend the QWeb templates used in kanban
    views and present useful techniques for this. Here, you will learn how to add
    web assets that you intend to be used in these views, such as **CSS** and **JavaScript**.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following topics will be covered in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing kanban boards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing kanban views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Designing kanban cards
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Exploring the QWeb template language
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Extending kanban views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding CSS and JavaScript assets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will understand kanban boards and be able to
    design your own kanban views.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter continues enhancing the `library_checkout` addon module from [*Chapter
    10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287), *Backend Views – Designing
    the User Interface*. The corresponding code can be found in the `ch11/` directory
    of the **GitHub** repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials.](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)
  prefs: []
  type: TYPE_NORMAL
- en: Introducing kanban boards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '*Kanban* is a Japanese word literally meaning *billboard* and is associated
    with lean manufacturing. More recently, *kanban boards* have become popular in
    the software industry with the adoption of **agile** methodologies.'
  prefs: []
  type: TYPE_NORMAL
- en: A kanban board provides a visual representation of a work queue. The board is
    organized into columns, which represent the *stages* of the work process. Work
    items are represented by *cards* placed on the appropriate column of the board.
    New work items start from the leftmost column and travel through the board until
    they reach the rightmost column, which represents the completed work.
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplicity and visual impact of kanban boards make them a good tool to
    support simple business processes. A basic example of a kanban board has three
    columns: *To Do*, *Doing*, and *Done*, as shown in the following diagram:'
  prefs: []
  type: TYPE_NORMAL
- en: '`'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.1 – An example of a kanban board'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.1_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.1 – An example of a kanban board
  prefs: []
  type: TYPE_NORMAL
- en: In many cases, a kanban board is a more effective way to manage a process when
    compared to heavier workflow engines.
  prefs: []
  type: TYPE_NORMAL
- en: Odoo supports kanban views – along with the classic list and form views – to
    support kanban boards. Now that we know what a kanban board is, let's learn how
    to use one.
  prefs: []
  type: TYPE_NORMAL
- en: Supporting kanban boards in Odoo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Browsing the Odoo apps, we can see two different ways to use kanban views. One
    is a simple *card list*, which is used in places such as contacts, products, employees,
    and apps. The other is a kanban board, which is organized in columns representing
    the steps of a process.
  prefs: []
  type: TYPE_NORMAL
- en: 'For simple card lists, a good example is the **Contacts** kanban view. The
    contact cards have an image on the left-hand side and a bold title in the main
    area, followed by a list of values:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.2 – The Contacts kanban view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.2_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.2 – The Contacts kanban view
  prefs: []
  type: TYPE_NORMAL
- en: While this contacts view uses a *kanban view*, it is not a *kanban board*.
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of kanban boards can be found on the *CRM* app''s **Pipeline** page
    or on the **Project Tasks** page. An example of the **Pipeline** page is shown
    in *Figure 11.3*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.3 – The CRM Pipeline kanban board'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.3_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.3 – The CRM Pipeline kanban board
  prefs: []
  type: TYPE_NORMAL
- en: The most important difference between this kanban board and the **Contacts**
    kanban view is the card organization in columns. This is done using the **Group
    By** feature, which is similar to what list views use. Usually, the grouping is
    done in a *stage* field. One very useful feature of kanban views is that they
    support dragging and dropping cards between columns, which automatically assigns
    the corresponding value to the field the view is grouped by.
  prefs: []
  type: TYPE_NORMAL
- en: The **CRM** **Pipeline** page cards have a bit more structure. The main card
    area also has a title, followed by a list of relevant information, as well as
    a footer area. In this footer area, we can see a priority widget on the left-hand
    side, followed by an activities indicator, and on the right-hand side, we can
    see a small image of the responsible user.
  prefs: []
  type: TYPE_NORMAL
- en: It's not visible in the figure shown in this chapter, but the cards also have
    an options menu on the top-right, which is shown when hovering the mouse pointer
    over it. This menu allows us to, for example, change a color indicator for the
    card.
  prefs: []
  type: TYPE_NORMAL
- en: Looking at the cards in both examples, we can see some differences. In fact,
    their design is quite flexible, and there isn't a single way to design a kanban
    card. But these two examples provide a starting point for your designs.
  prefs: []
  type: TYPE_NORMAL
- en: We will be using the more elaborate structure as a model for the cards on our
    checkouts kanban board.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding kanban states
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: On a kanban board, work items start in the leftmost column, and while the work
    is in progress, they travel through the columns until reaching the rightmost column,
    which shows the completed items. This implies a *push strategy*, which means when
    work on a column is done, the work item is *pushed* to the next column.
  prefs: []
  type: TYPE_NORMAL
- en: A push strategy tends to lead to a build-up of work items in progress, which
    can be inefficient. Lean approaches advise using a *pull strategy* instead. Here,
    each stage *pulls* work from the previous one when it is ready to start the next
    work item.
  prefs: []
  type: TYPE_NORMAL
- en: 'Odoo supports the pull strategy with the use of kanban states. Each record
    work item has a kanban state field signaling its flow status: *In progress* (gray),
    *Blocked* (red), or *Ready* (green).'
  prefs: []
  type: TYPE_NORMAL
- en: When the work needed in a stage is completed, instead of moving the card to
    the next column, it is marked as *Ready*. This gives a visual indication that
    the work item is ready to be pulled by the next stage. Additionally, if something
    is preventing the work from moving ahead, it can be marked as *Blocked*, giving
    a visual indication that help is needed to unblock this work item.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, kanban states are used in the **Project Tasks** kanban view.
    In the following screenshot, we can see the kanban state *gray-red-green* indicator
    in the bottom-right of each card. Also, note the progress bar at the top of each
    column, which provides a visual indication of the items in each state:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.4 – The project task kanban view with the kanban states'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.4_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.4 – The project task kanban view with the kanban states
  prefs: []
  type: TYPE_NORMAL
- en: The kanban state is meaningful in each stage, so it should be reset when an
    item moves to another stage.
  prefs: []
  type: TYPE_NORMAL
- en: You have now learned about the different views in a kanban board and what they
    look like. Now, we will move on to learning how to design them.
  prefs: []
  type: TYPE_NORMAL
- en: Designing kanban views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The book checkout process can use a kanban view to visualize the work in progress.
    In this case, the kanban board columns could represent the checkout stages, and
    each checkout could be represented by a card.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what the library checkout kanban view will look like when complete:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 11.5 –  Library checkouts kanban view'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_11.5_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 11.5 – Library checkouts kanban view
  prefs: []
  type: TYPE_NORMAL
- en: 'Form views mostly use Odoo-specific XML elements such as `<field>` and `<group>`.
    They also use some HTML elements such as `<h1>` or `<div>`, but their use is limited.
    Kanban views are quite the opposite. They are HTML-based and additionally support
    two Odoo-specific elements: `<field>` and `<button>`.'
  prefs: []
  type: TYPE_NORMAL
- en: With kanban views, the final HTML presented in the web client is dynamically
    generated from QWeb templates. The QWeb engine processes special XML tags and
    attributes in the templates to produce the final HTML. This allows a lot of control
    of how the content is rendered, but it also makes the view design more complex.
  prefs: []
  type: TYPE_NORMAL
- en: As a kanban view design is so flexible, different design structures can be used.
    A good approach is to find an existing kanban view that would fit well with the
    use case at hand, inspect it, and use it as a reference.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a minimal viable kanban view
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kanban views allow for a rich user interface and can quickly get complex. The
    first step in learning how to design kanban views is to create a minimum viable
    view.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a kanban view to the `library_checkout` module, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add `kanban` in `view_mode` of the window action. To do this, edit the `views/library_menu.xml`
    file and update the value set in the `view_mode` field to match the following:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'The new kanban view will be added in a new XML file, `views/checkout_kanban_view.xml`.
    So, add this file to the `__manifest__.py` module in the `data` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add the XML code for a minimal kanban view in the `views/checkout_kanban_view.xml`
    file by using the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: In the previous code, a kanban view is declared inside a `<kanban>` element.
    Kanban views are described using the QWeb template language. The templates are
    added inside a `<templates>` sub-element.
  prefs: []
  type: TYPE_NORMAL
- en: The main template for each kanban card is described in the `<t t-name="kanban-box">`
    element. This QWeb template is minimal. It is an HTML `<div>` element containing
    an Odoo-specific `<field>` widget, which is also used in form and tree views.
  prefs: []
  type: TYPE_NORMAL
- en: This provides a pretty basic *kanban view* XML structure to start building from.
    To be a *kanban board*, it needs to feature columns for each process stage.
  prefs: []
  type: TYPE_NORMAL
- en: Presenting kanban board columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kanban boards present the work items organized in columns, where each column
    is a stage in the process. New work items start on the left-hand columns and then
    travel through the columns until they arrive at the right-hand side, completed.
  prefs: []
  type: TYPE_NORMAL
- en: Kanban views present items in columns when grouping by a field. For a kanban
    board, the view should be grouped by a stage or state field – often, `stage_id`
    is used.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `default_group_by` attribute sets a default column group for the kanban
    view. To have a kanban board for the book checkouts, edit the `<kanban>` element
    to look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: When opening this view, it will be grouped by stage by default (which is similar
    to *Figure 11.4*). The user is still able to change the applied `group_by` options
    used for list views.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding kanban view attributes and elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kanban views support a few additional attributes to fine-tune their behavior.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `<kanban>` top element supports these attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`default_group_by`: This sets the field to use for the default column groups.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`default_order`: This sets a default order to use for the kanban items.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quick_create="false"`: This disables the `quick_create` option to create new
    items by providing just a title description, using the plus sign at the right-hand
    side of each column header. The `false` value is a JavaScript literal and must
    be in lowercase.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`quick_create_view`: This can optionally be used to set a specific form view
    to use for the `quick_create` function. It should be set with the XML ID of the
    form view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`class`: This adds a CSS class to the root element of the rendered kanban view.
    A relevant class is `o_kanban_small_column`, which makes columns somewhat more
    compact than the default. Additional classes may be made available through the
    CSS assets provided by the module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`group_create`, `group_edit`, `group_delete`, and `quick_create_view`: These
    can be set to `false` to disable the corresponding action on the kanban columns.
    For example, `group_create="false"` removes the vertical **Add new column** bar
    on the right side of the screen.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`records_draggable="false"`: This disables the ability to drag records between
    columns.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `<kanban>` element can contain these elements:'
  prefs: []
  type: TYPE_NORMAL
- en: '`<field>`: This is used to declare the fields used by the QWeb templates that
    need to be retrieved from the server. This is necessary when those fields are
    used in QWeb evaluation expressions. It is not needed for fields used in a template
    `<field>` element.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<progressbar>`: This element adds a progress bar widget on the group column
    headers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`<templates>`: This element is required where the kanban card QWeb templates
    are declared.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An example for the `<templates>` element can be seen in the minimal kanban view
    presented previously. An example of the `<progressbar>` element is provided next.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a progress bar to group columns
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A **progress bar** can show a total number for the column and a colored bar
    representing the column record sub-states. The CRM Pipeline page uses it to provide
    a summary for the lead activities, from **planned** to **overdue**. Another example
    is the use of kanban states, as used by the **Project Tasks** kanban board.
  prefs: []
  type: TYPE_NORMAL
- en: 'For this, first `kanban_state` needs to be added to the model, and then, it
    can be used in the view. To do so, apply the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the field to the `library.checkout` model, editing the `models/library_checkout.py`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'When changing the stage in the same file at the beginning of the `write()`
    method, add the business logic to reset `kanban_state`, as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This completes the model changes needed for the time being. Here, we are focusing
    on adding the progress bar – the kanban status widget will be added in a later
    section.
  prefs: []
  type: TYPE_NORMAL
- en: The `<progressbar>` element is one of the three element types allowed inside
    a `<kanban>` tag, along with `<field>` and `<templates>`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add it to the `<kanban>` view definition, edit the element to add the following
    highlighted code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: The previous code adds the progress bar widget. The `field` attribute sets the
    model field to use, and the `colors` attribute maps the field values to the `"danger"`,
    `"warning"`, `"success"`, or `"muted"` colors.
  prefs: []
  type: TYPE_NORMAL
- en: By default, the column total indicator counts the number of items in each column.
    This can be changed to be the sum of the values in a model field. In the previous
    code, the optional `sum_fields` attribute was added to present the total number
    of books in each column's requests.
  prefs: []
  type: TYPE_NORMAL
- en: At this point, we have a functioning kanban view. However, the kanban cards
    can display richer features. The next section focuses on this, where we will further
    expand the templates used to render the kanban card content.
  prefs: []
  type: TYPE_NORMAL
- en: Designing kanban cards
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The design of a kanban card is quite flexible and uses HTML that is produced
    from QWeb templates declared in the `<templates>` element.
  prefs: []
  type: TYPE_NORMAL
- en: 'The content area will often feature several other areas. Using the CRM Pipeline
    as a blueprint, the following sections can be found:'
  prefs: []
  type: TYPE_NORMAL
- en: A title section, with the lead short summary
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A content section, with the amount, customer name, and lead tags
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A left footer section, with the priority and activities widgets
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A right footer section, with the salesperson avatar
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A top-right menu button, which in this case, is visible on mouse hover
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This section implements the previous kanban card structure, and it populates
    each section to showcase the most important features. The first step for designing
    kanban cards is to lay out the kanban card skeleton, which is described next.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The proposed kanban skeleton, as well as certain CSS classes used, is based
    on the CRM Pipeline kanban view. Odoo modules can provide specific CSS classes
    and use them in the kanban card design. So, these can vary when inspecting the
    kanban view templates from different modules.
  prefs: []
  type: TYPE_NORMAL
- en: Organizing the kanban card layout
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The kanban card minimal design will now be expanded to a skeleton including
    several areas, which we will now describe.
  prefs: []
  type: TYPE_NORMAL
- en: 'The kanban card is defined inside the `<templates>` section in an element with
    `t-name="kanban-box"`. This can be an HTML element or a QWeb `t-` directive. The
    definition created earlier in this chapter uses the neutral `<t>` QWeb element:
    `<t t-name="kanban-box">`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Moving ahead, the kanban view template and the QWeb template should be edited
    to mark the areas to be worked on, as shown by the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: The previous QWeb template code provides a skeleton for all the areas usually
    seen in kanban cards.
  prefs: []
  type: TYPE_NORMAL
- en: When the `t-name` QWeb attribute is used in a `<t>` element, this element can
    have only one child element. This was the case in the preceding code, and the
    `<div>` child element must contain all the other kanban view elements.
  prefs: []
  type: TYPE_NORMAL
- en: It is worth noting that this overarching `<div>` element uses the `class="oe_kanban_global_click"`
    attribute. This makes the card clickable, and when the user does so, the corresponding
    form view will be opened in a similar way to what happens with list views.
  prefs: []
  type: TYPE_NORMAL
- en: The next task is to focus on each of the highlighted areas and add content to
    them.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a title and other content fields
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Now that we have a basic kanban card skeleton, the title and additional data
    can be added.
  prefs: []
  type: TYPE_NORMAL
- en: 'These will go inside the `<div class="oe_kanban_content">` element. The skeleton
    being used has sections for these: the `<div class="o_kanban_record_title">` and
    `<div class="o_kanban_record_body">` elements.'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following code expands this section to highlight the card title and add
    the checkout request date and the requesting library member ID:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: In this case, regular HTML elements can be used. For example, the `<strong>`
    element was used to highlight the title. Also, `<field>` elements can be used
    to render field values, which will be rendered using the appropriate formatting
    in a similar way to what happens in form views. In the previous code, `request_date`
    uses a `<field>` element, and so its content will be rendered using the Odoo-configured
    date format. It is wrapped in a `<div>` element so that there is a line break
    between several fields.
  prefs: []
  type: TYPE_NORMAL
- en: The `member_id` many-to-one object is also added by using a specific widget
    that presents the corresponding avatar image along with the name, `widget="many2one_avatar"`.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have added some basic data elements to the card, let's look at the
    drop-down menu area.
  prefs: []
  type: TYPE_NORMAL
- en: Adding the drop-down options menu
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kanban cards can have an options menu on the top-right corner. Common options
    include being able to edit or delete the record, set a color for the card, or
    run any action that can be called from a button.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is the baseline HTML code for the options menu to be added to
    the top of the `oe_kanban_content` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Here, there are QWeb expressions using fields that may not be loaded into the
    view. In particular, the last `t-if` expression uses the record''s `state` field.
    To ensure this field is available in the form, it should be added just after the
    `<kanban>` element:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'Let''s break down the drop-down menu code and look at the key elements added:'
  prefs: []
  type: TYPE_NORMAL
- en: The ellipsis icon, in an HTML anchor (`<a>`) element, to present the menu button.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `<div class="dropdown-menu" role="menu">` element, containing the menu options.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<a>` element with `type="edit".`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<a>` element with `type="delete".`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A separator line, using `<div role="separator" class="dropdown-divider"/>.`
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A color picker menu option added with a `<ul class="oe_kanban_colorpicker" />`
    element. The `data-field` attribute sets the field used to store the picked color.
    This capability will be implemented in the next section, so it won't work right
    now.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A menu item equivalent to a button click, added with an `<a>` element, featuring
    the same `name` and `type` attributes used in regular buttons. This particular
    one uses `name="button_done" type="object"`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Some menu items, such as `t-if` QWeb directive. This and other QWeb directives
    are explained in more detail later in this chapter in the *Exploring the QWeb
    template language* section.
  prefs: []
  type: TYPE_NORMAL
- en: The `widget` global variable represents a `KanbanRecord()` JavaScript object,
    which is responsible for the rendering of the current kanban card. Two particularly
    useful properties are `widget.editable` and `widget.deletable`, which allow us
    to check whether the corresponding actions are available.
  prefs: []
  type: TYPE_NORMAL
- en: Menu items can be added with additional `<a>` elements in a similar way to the
    **Set as Done** option.
  prefs: []
  type: TYPE_NORMAL
- en: Menu items can be shown or hidden using a JavaScript expression that can use
    record field values. For example, the `state` field is not set to `done`.
  prefs: []
  type: TYPE_NORMAL
- en: The color picker menu option uses a special widget that uses a `color` model
    field to store the picked color. While the color selector is available, we did
    not add the feature to set the card yet. Let's do this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a kanban card color indicator
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Kanban cards can be set with a user-selected color. This colors a bar on the
    left side of the card and can be useful to easily locate items.
  prefs: []
  type: TYPE_NORMAL
- en: The color to apply is selected using a color picker option on the card's menu.
    This is added with a `<ul class="oe_kanban_colorpicker" data-field="color"/>`
    element, as shown in the previous section. The `data-field` attribute sets the
    field to use, which in this case is `color`.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add a kanban color card indicator, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the color field in the `library.checkout` model by editing the `models/library_checkout.py`
    file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This is a regular integer field. The color picker widget maps the selectable
    color to numbers.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Now, the color field can be used to set a dynamic CSS style on the kanban cards
    though QWeb. First, add it to the fields to load by adding the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, edit the kanban card top `<div>` element to add the dynamic color
    style, as shown in the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The preceding code uses `t-attf-class` to dynamically calculate a CSS class
    to apply. A JavaScript expression is declared in a `{{ }}` block to be evaluated
    and return a style to use, which depends on the `color` field value. This completes
    the steps to add a kanban color card indicator.
  prefs: []
  type: TYPE_NORMAL
- en: A few more widgets are available for kanban cards. The next sections show how
    to use them, where we will add them to the card footer section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding priority and activity widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The priority widget is displayed as a list of stars that can be clicked to select
    a priority level. This widget is a `<field>` element with `widget="priority"`.
    The priority field is a `Selection` field, declaring the several priority levels
    available.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `library.checkout` model needs to be modified to add a priority field.
    To do this, complete the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `models/library_checkout.py` file as follows:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Now, the corresponding `<field>` elements need to be added to the kanban template
    on the left side. So, insert the priority widget:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The kanban card now has the priority and activity widgets added to the left
    side of the footer. Next, we will add a few more widgets to the right footer.
  prefs: []
  type: TYPE_NORMAL
- en: Adding kanban state and user avatar widgets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The kanban state widget presents a traffic light color for the item. It is a
    `<field>` element using `widget="kanban_state_selection"`.
  prefs: []
  type: TYPE_NORMAL
- en: 'For related user records, a specific widget is available for this: `widget="many2one_avatar_user"`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Examples of both of these will be added to the kanban card right footer, as
    shown in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The kanban state is added using a `<field>` element with the `kanban_state_selection`
    widget.
  prefs: []
  type: TYPE_NORMAL
- en: The user avatar image is added with the `user_id` field, using the `widget="many2one_avatar_user"`
    widget.
  prefs: []
  type: TYPE_NORMAL
- en: One more important topic is using actions on kanban cards, which we will discuss
    in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Using actions in kanban view elements
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In QWeb templates, the `<a>` tag for links can have a `type` attribute. This
    sets the type of action the link will perform so that links can act just like
    buttons in regular forms. So, in addition to the `<button>` elements, the `<a>`
    tags can also be used to run Odoo actions.
  prefs: []
  type: TYPE_NORMAL
- en: 'As is the case in form views, the action type can be set to `action` or `object`
    and should be accompanied by a `name` attribute that identifies the specific action
    to execute. Additionally, the following action types are also available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`open`: This opens the corresponding form view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`edit`: This opens the corresponding form view directly in edit mode.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`delete`: This deletes the record and removes the item from the kanban view.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: This completes our walkthrough of designing kanban views. Kanban views use the
    QWeb template language, and a few examples were used here. The next section takes
    a deep dive into QWeb.
  prefs: []
  type: TYPE_NORMAL
- en: Exploring the QWeb template language
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The QWeb parser looks for special directives in the templates and replaces them
    with dynamically generated HTML. These directives are XML element attributes and
    can be used in any valid tag or element – for example, `<div>`, `<span>`, or `<field>`.
  prefs: []
  type: TYPE_NORMAL
- en: Sometimes, a QWeb directive needs to be used, but we don't want to place it
    in any of the XML elements in the template. For these cases, the `<t>` special
    element can be used. It can have QWeb directives such as `t-if` or `t-foreach`,
    but it is silent, and it won't have any effect on the final XML/HTML produced.
  prefs: []
  type: TYPE_NORMAL
- en: 'The QWeb directives frequently use evaluated expressions to produce different
    effects that depend on record values. The language used to evaluate these expressions
    depends on the environment where the QWeb is being executed. There are two different
    QWeb implementations: **client-side** **JavaScript** and **server-side** **Python**.
    Reports and website pages use the server-side Python implementation of QWeb.'
  prefs: []
  type: TYPE_NORMAL
- en: Kanban views use the client-side JavaScript implementation. This means that
    the QWeb expression used in kanban views should be written using the JavaScript
    syntax, not Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'When displaying a kanban view, the internal steps are roughly as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: Get the XML for the templates to render.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Call the server `read()` method to get the data for the fields used in the templates.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Locate the `kanban-box` template and parse it using QWeb to output the final
    HTML fragments.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Inject the HTML in the browser display (the **Document Object Model** (**DOM**)).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: This is not meant to be technically exact. It's just a mind map that can be
    useful to understand how things work in kanban views.
  prefs: []
  type: TYPE_NORMAL
- en: Next, we'll learn about QWeb expression evaluation and explore the available
    QWeb directives, using examples that will enhance the checkout kanban card.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding the QWeb JavaScript evaluation context
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Many of the QWeb directives use expressions that are evaluated to produce some
    result. When used on the client side (as is the case for Kanban views), these
    expressions are written in JavaScript. They're evaluated in a context that has
    a few useful variables available.
  prefs: []
  type: TYPE_NORMAL
- en: 'A `record` object is available, representing the current record, with the fields
    requested from the server. The field values can be accessed using either the `raw_value`
    or `value` attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`raw_value`: This is the value returned by the `read()` server method, so it''s
    more suitable for use in condition expressions.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`value`: This is formatted according to the user settings and is meant to be
    used for display in the user interface. This is typically useful for date, datetime,
    float, monetary, and relational fields.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The QWeb evaluation context can also reference the JavaScript web client instance.
    To make use of that, a good understanding of the web client architecture is needed.
    In this chapter, we won''t be able to go into detail regarding this. However,
    for reference purposes, the following identifiers are available in QWeb expression
    evaluation:'
  prefs: []
  type: TYPE_NORMAL
- en: '`widget`: This is a reference to the current `KanbanRecord()` widget object
    and is responsible for the rendering of the current record into a kanban card.
    It exposes some helper functions we can use.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`record`: This is a shortcut for `widget.record` and provides access to the
    fields available, using dot notation.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`read_only_mode`: This indicates whether the current view is in read mode (and
    not in edit mode). It''s a shortcut for `widget.view.options.read_only_mode`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`instance`: This is a reference to the full web client instance.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since QWeb templates are written in XML files, there are limitations on the
    usage of some characters not accepted by the XML format (such as the lower than
    sign (`<`)). When these characters are needed – for example, to describe JavaScript
    expressions – escaped alternatives need to be used.
  prefs: []
  type: TYPE_NORMAL
- en: 'These are the alternative symbols that are available for inequality operations:'
  prefs: []
  type: TYPE_NORMAL
- en: '`&lt;` is for less than (`<`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`&lt;=` is for less than or equal to (`<=`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`&gt;` is for greater than (`>`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`&gt;=` is for greater than or equal to (`>=`).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The preceding comparison symbols are not specific to Odoo and are part of the
    XML format standards.
  prefs: []
  type: TYPE_NORMAL
- en: The previous symbols can be used in QWeb evaluated expressions, and they are
    often used to calculate text to render for the `t-out` directive, which we will
    describe in the following section.
  prefs: []
  type: TYPE_NORMAL
- en: Using t-out to render values
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<field>` element is available to render field values, with the advantage
    of Odoo taking care of properly formatting the output for us. But this has the
    limitation of only displaying the field content.
  prefs: []
  type: TYPE_NORMAL
- en: 'However, the `t-out` directive can render the result of a code expression as
    an HTML-escaped value:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code renders the result of a JavaScript expression. The `record`
    represents the record retrieved from the Odoo server and provides access to the
    fields. The `value` property returns properly formatted content, as returned by
    a `<field>` element. The `raw_value` property returns the unformatted native value.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 15
  prefs: []
  type: TYPE_NORMAL
- en: The `t-out` directive was introduced in `t-esc` directive, used until `t-raw`
    directive was also discontinued. This was previously used to render the raw value
    without escaping any HTML, and using it carries security risks.
  prefs: []
  type: TYPE_NORMAL
- en: Using t-set to assign values to variables
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For more complex logic, the result of an expression can be stored into a variable
    to use later in the template. This is to be done using the `t-set` directive for
    the variable name to be set, followed by the `t-value` directive with the expression
    to calculate the value to be assigned.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the following code renders the title in red if the request has
    no lines yet. It uses a `red_or_black` variable for the CSS class to use, shown
    as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The previous example has a code expression using the `num_books` field, so we
    need to ensure it is loaded by adding a `<field name="num_books" />` element inside
    the `<kanban>` top element.
  prefs: []
  type: TYPE_NORMAL
- en: 'Variables can also be assigned HTML content, as in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The previous code assigns the HTML inside to the `calendar_sign` variable and
    then renders it using the `t-out` directive.
  prefs: []
  type: TYPE_NORMAL
- en: Using t-attf- for string substitution of dynamic attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Our kanban card is using the `t-attf-` QWeb directive to dynamically set a class
    in the top `<div>` element so that the card color depends on the `color` field
    value. For this, the `t-attf-` QWeb directive was used.
  prefs: []
  type: TYPE_NORMAL
- en: The `t-attf-` directive dynamically generates tag attributes using string substitution.
    This allows for parts of larger strings to be generated dynamically, such as URLs
    or CSS class names.
  prefs: []
  type: TYPE_NORMAL
- en: The directive looks for expression blocks that will be evaluated and replaced
    by the results. These are delimited either by `{{` and `}}` or by `#{` and `}`.
    The content of the blocks can be any valid JavaScript expression and can use any
    of the variables available for QWeb expressions, such as `record` and `widget`.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, the `kanban_color()` JavaScript function was used. This is specifically
    provided to map color index numbers into the CSS class color names.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an elaborate example, this directive will be used to dynamically change
    the color of the request date to be in red letters if the priority is high. For
    this, the `<field name="request_date"/>` element in the kanban card should be
    replaced with the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: This results in either `class="oe_kanban_text_red"` or `class="oe_kanban_text_black"`,
    depending on the priority value. This is evaluated dynamically – that means that
    when the user clicks on the priority widget to change it, the date color will
    immediately change.
  prefs: []
  type: TYPE_NORMAL
- en: Using t-att- for expressions calculated by dynamic attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `t-att-` QWeb directive can dynamically generate an attribute value from
    an expression evaluation.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, the formatting effect from the previous section that used the
    `t-attf-` attribute could alternatively be implemented using `t-att-`. The following
    code shows this alternative implementation:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: When the expression evaluates to a false-equivalent value, the attribute is
    not rendered at all. This is important for special HTML attributes such as the
    `checked` input field.
  prefs: []
  type: TYPE_NORMAL
- en: Using t-foreach for loops
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Iterating through loops is useful to repeat a particular HTML block. For this,
    the `t-foreach` directive is used with an expression returning an iterable value.
    It needs to be accompanied by a `t-as` directive, which sets the variable name
    for the iteration value.
  prefs: []
  type: TYPE_NORMAL
- en: This could be used to present the book titles requested in the checkout. This
    requires a loop on the `lines_ids` field.
  prefs: []
  type: TYPE_NORMAL
- en: 'Note that the accessible values for the `line_ids` elements are database IDs
    and not record objects. This can be confirmed by adding the following code in
    the `<!-- Other content area -->` area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'The `t-foreach` directive accepts a JavaScript expression evaluating to a collection
    to iterate. `record.<field>.value` returns a representation of a string for the
    field value, and `record.<field>.raw_value` returns the database-stored values.
    For a to-many field, this is a list of IDS:'
  prefs: []
  type: TYPE_NORMAL
- en: The `t-as` directive sets the variable name to be used to refer to each iteration
    value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `t-out` directive evaluates the provided expression – in this case, just
    the `line` variable name – and renders safely escaped HTML.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Presenting the record IDs is not very interesting. However, we do have a JavaScript
    function available to retrieve an image for an ID: `kanban_image()`.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To use this, first, the checkout lines need to support an image. For this,
    the `models/library_checkout_line.py` file should be edited to add a field for
    the book cover image:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, this field can be used in the kanban card:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: The previous code renders an image for the book title in each checkout line.
  prefs: []
  type: TYPE_NORMAL
- en: If there are many lines, this might be too much content for the kanban card.
    Since the `t-foreach` object is a JavaScript expression, it can use additional
    syntax to limit the number of the allowed cover thumbnails. JavaScript arrays
    have a `slice()` method to extract a subset of elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'This can be used to limit the number to the first five elements by using the
    following variation of the `for` loop:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: The `for` loops have a few helper variables available. These variables are automatically
    generated and are prefixed by the variable name defined in `t-as`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If `t-as="rec"` is used, where `rec` is set as the variable name, the helper
    variables would be as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`rec_index`: This is the iteration index, starting from zero.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rec_size`: This is the number of elements of the collection.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rec_first`: This is true on the first element of the iteration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rec_last`: This is true on the last element of the iteration.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rec_even`: This is true on even indexes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rec_odd`: This is true on odd indexes.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rec_parity`: This is either `odd` or `even`, depending on the current index.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rec_all`: This represents the object being iterated over.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`rec_value`: This holds the value when iterating through a `{key:value}` dictionary
    (`rec` holds the key name).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For example, when presenting a list of comma-separated values, we would like
    to avoid a trailing comma. Avoiding rendering it on the last iteration is easy
    with the help of the `_last` loop variable. Here is an example of this:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: The `rec_last` variable is `true` on the last record. Negating it with `!rec_last`
    enables printing the comma on all iterations except the last one.
  prefs: []
  type: TYPE_NORMAL
- en: Using t-if to apply conditions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `t-if` directive expects an expression to be evaluated in JavaScript when
    rendering kanban views on the client side. The tag and its content will be rendered
    only if the condition evaluates to `true`.
  prefs: []
  type: TYPE_NORMAL
- en: In our example, it was used in the checkout kanban view to have menu options
    available depending on some conditions.
  prefs: []
  type: TYPE_NORMAL
- en: 'To take another example, we can display the checkout number of books borrowed,
    but only if the view has any lines. This can be confirmed by adding the following
    code in the `<!-- Other content area -->` area:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: Here, we used a `t-if="<expression>">` attribute to render an element and its
    content only when the expression used evaluated to `true`. Notice that the condition
    expression uses the `&gt;` symbol instead of `>` to represent the greater-than
    operation.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `else if` and `else` conditions are also supported with the `t-elif` and
    `t-else` directives. Here is an example of their use:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: These conditions are useful to render particular elements on particular cases.
  prefs: []
  type: TYPE_NORMAL
- en: Another useful feature is the ability to decompose templates into smaller reusable
    snippets that can be included using `t-call`. The following section explains how
    this works.
  prefs: []
  type: TYPE_NORMAL
- en: Using t-call to call and reuse templates
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Instead of repeating the same HTML blocks over and over again, building blocks
    can be used to compose more complex user interface views. QWeb templates can be
    used as reusable HTML snippets that are inserted into other templates.
  prefs: []
  type: TYPE_NORMAL
- en: Reusable templates are defined inside the `<templates>` tag and identified by
    a top element with `t-name` other than `kanban-box`. These other templates can
    then be included using the `t-call` directive. This is true for the templates
    declared in the same kanban view, somewhere else in the same addon module, or
    even in a different addon.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the book cover list could be isolated in a reusable snippet.
    For this, another template can be added in the `<templates>` element after the
    `<t t-name="kanban-box">` node, as shown in the following example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, the `t-call` directive can be used to call this template in the `kanban-box`
    main template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: To call templates defined in other addon modules, the `module.name` full identifier
    must be used, in a similar way to what happens with other views. For instance,
    this snippet can be referred to in another module using the `library_checkout.book_covers`
    full identifier.
  prefs: []
  type: TYPE_NORMAL
- en: The called template runs in the same context as the caller, so any variable
    names available in the caller are also available when processing the called template.
  prefs: []
  type: TYPE_NORMAL
- en: A more elegant alternative is to pass arguments to the called template. This
    is done by setting variables inside the `t-call` tag. These will be evaluated
    and made available in the sub-template context only, and they won't exist in the
    caller context.
  prefs: []
  type: TYPE_NORMAL
- en: 'As an example, the `books_cover` template could have an argument to set the
    maximum number of covers to display instead of being hardcoded in the sub-template.
    First, the `book_covers` template should be edited to replace the fixed limit
    with a variable, such as `limit`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, `t-call` must set this variable using a nested `t-set` directive, as shown
    in the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: The entire content inside the `t-call` element is also available to the sub-template
    through the `0` magic variable. Instead of argument variables, an HTML code fragment
    could be added inside the `t-call` element, and then it could be used in the called
    template with `<t t-out="0" />`. This is especially useful for building layouts
    and combining/nesting QWeb templates in a modular way.
  prefs: []
  type: TYPE_NORMAL
- en: Using dictionaries and lists to dynamically set attributes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: We've gone through the most important QWeb directives, but there are a few more
    to be aware of. Now, we'll give a short explanation of them.
  prefs: []
  type: TYPE_NORMAL
- en: Here, the `t-att-NAME` and `t-attf-NAME` style dynamic tag attributes were introduced.
    Additionally, the fixed `t-att` directive can be used. It accepts either a key-value
    dictionary mapping or a pair (that is, a two-element list).
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, consider the following mapping:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: '`t-att` can also work with a list or with pairs of values. For example, consider
    the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: 'The preceding code produces this result:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: These special ways to assign attributes to elements can be useful in cases where
    there is some server-side processing, and a resulting dictionary or list can be
    used on a single `t-att` element to be applied on a template element.
  prefs: []
  type: TYPE_NORMAL
- en: This completes a reasonable overview of the QWeb template language with a special
    focus on kanban view applications, although the QWeb language is also used on
    the server side – for example, it can be used for reports and website pages.
  prefs: []
  type: TYPE_NORMAL
- en: Not surprisingly, QWeb templates provide an extension mechanism. We will explore
    this in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Extending kanban views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The templates used in kanban views and reports can be extended in the same
    way other view types are extended: that is, declare the element to match, possibly
    using an XPath expression, and use the position attribute to set what the extensions
    should do (for example, add the new elements after of before the matched element).
    These techniques are explained in detail in [*Chapter 4*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119),
    *Extending Modules*.'
  prefs: []
  type: TYPE_NORMAL
- en: In practice, kanban views and QWeb templates are more complex than the regular
    form view, and matching the elements to extend can be tricky.
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `<field>` elements as selectors can be difficult. It is common for the
    same field name to be included more than once in a kanban view: at the beginning,
    in the field list to load, and then again inside the kanban box template. Since
    the selector will match the first field element found, the modification won''t
    be applied inside the template, as intended.'
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `//t[@t-name='kanban-box']//field[@name='name']` XPath expression
    locates any child elements matching `<t t-name="kanban-box">`, and then it finds
    any further child elements matching `<field name="name">`.
  prefs: []
  type: TYPE_NORMAL
- en: Another challenge is the frequent use of HTML elements with no clear identifier,
    such as `<div>` or `<span>`. In these cases, XPath expressions with non-trivial
    matching conditions are needed. For example, the `//div/t/img` XPath expression
    matches a `<div><t><img>` nested sequence of elements.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example that extends the `Contacts` kanban view:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: In the previous example, XPath looks for a `<field name="display_name">` element
    inside a `<t t-name="kanban-box">` element. This rules out the same field element
    outside of the `<templates>` section.
  prefs: []
  type: TYPE_NORMAL
- en: For complex XPath expressions, some command-line tools can be helpful to explore
    the correct syntax to use.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `xmllint` command-line utility – from the `libxml2-utils` `--xpath` option
    to perform queries on XML files. Here is an example of using it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: 'Another option is the `xpath` command, from the `libxml-xpath-perl` Debian/Ubuntu
    package. Here is an example of using it:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: These tools can be useful to quickly try and test XPath expressions on an XML
    file.
  prefs: []
  type: TYPE_NORMAL
- en: Until now, you have seen how to create and extend kanban views. However, these
    can make use of additional JavaScript and CSS assets for effects. The next section
    explains how to add these components.
  prefs: []
  type: TYPE_NORMAL
- en: Adding CSS and JavaScript assets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kanban views are mostly HTML and make significant use of CSS classes. In this
    chapter, some standard CSS classes were introduced in the code examples, but modules
    can also provide their own CSS.
  prefs: []
  type: TYPE_NORMAL
- en: The generally used convention is to have the asset files inside the `/static/src`
    subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: Module web assets are declared in a `manifest` file in the `assets` key. This
    file is set with a dictionary that maps the assets bundle to be extended and the
    list of assets to add to it.
  prefs: []
  type: TYPE_NORMAL
- en: This provides the tool to add web assets to an Odoo module, such as CSS and
    JavaScript assets. These web asset files provide a structured way to better provide
    user interface elements for a richer user experience.
  prefs: []
  type: TYPE_NORMAL
- en: They can then be used in the module's QWeb templates, as discussed throughout
    the previous sections in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example for the `library_checkout` addon module. Edit the `__manifest__.py`
    file to add the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: The previous code adds a CSS and JavaScript file to the `web.assets_backend`
    assets bundle.
  prefs: []
  type: TYPE_NORMAL
- en: 'The main asset bundles available are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`web.assets_common`: This contains the assets common to the web client, website,
    and also the point of sale.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_backend`: This contains the assets specific to the backend web
    client.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`web.assets_frontend`: This contains the assets to be made available for the
    public website.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `assets` manifest key was introduced in Odoo 15\. For previous Odoo versions,
    assets were declared using XML template inheritance. We will explain this next.
  prefs: []
  type: TYPE_NORMAL
- en: Adding assets before Odoo 15
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In previous Odoo versions, assets were added using an XML file that extends
    the asset bundle. The XML file doing this was usually placed inside the `views/`
    module subdirectory.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following example adds a CSS and JavaScript file to the `library_checkout`
    module. Add the `views/assets.xml` file with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: As usual, this code should also be added to the `data` key in the `__manifest__.py`
    descriptor file.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter covered kanban views and demonstrated how they can act as a powerful
    user interface tool. By now, you should understand kanban boards, and you are
    equipped with the techniques needed to design kanban views.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you also explored the QWeb template language that powers kanban
    views. With the help of the examples in this chapter, you should now know how
    to use its features.
  prefs: []
  type: TYPE_NORMAL
- en: As is expected for Odoo, kanban views and QWeb templates can also be extended
    by other modules in a similar way to other view types. Having read this chapter,
    you know additional techniques to use this functionality on Kanban views.
  prefs: []
  type: TYPE_NORMAL
- en: Finally, we also discussed the use of CSS and JavaScript assets in advanced
    kanban views. We also looked at how these assets must be provided by the modules
    and must be added to the backend assets. You now know how to implement this.
  prefs: []
  type: TYPE_NORMAL
- en: The next chapter will continue exploring QWeb, but this time, we'll focus on
    the server side and see how to design printable reports.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The following reference materials complement the topics discussed in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The official Odoo documentation on QWeb: https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Bootstrap** CSS documentation: https://getbootstrap.com/docs/4.1/getting-started/introduction/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The **Font Awesome** icon index: https://fontawesome.com/v4.7.0/icons/'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
