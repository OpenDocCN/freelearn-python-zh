- en: '[*Chapter 11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324): Kanban Views
    and Client-Side QWeb'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第11章*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324)：看板视图和客户端QWeb'
- en: '**Kanban views** support lean processes, providing a visual representation
    of the work in progress and the status of each work item. This can be an important
    tool to streamline business processes.'
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: '**看板视图**支持精益流程，提供工作进度和每个工作项状态的视觉表示。这可以是一个重要的工具，用于简化业务流程。'
- en: This chapter introduces **kanban board** concepts, and how they are implemented
    in **Odoo** by using the kanban view type, stage columns, and kanban states.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了**看板板**的概念，以及它们如何通过使用看板视图类型、阶段列和看板状态在**Odoo**中实现。
- en: Kanban views are powered by **QWeb** – the template engine used by Odoo. It
    is **XML**-based and used to generate **HTML** fragments and pages. It is also
    used for reports and website pages, so it is an important part of Odoo that developers
    should be familiar with.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 看板视图由**QWeb**提供支持——Odoo使用的模板引擎。它是基于**XML**的，用于生成**HTML**片段和页面。它还用于报告和网站页面，因此是Odoo的重要组成部分，开发者应该熟悉。
- en: In this chapter, we will show how to organize a kanban view in several areas,
    such as the title and main content, as well as how to use the QWeb syntax to apply
    the widgets and effects that are available.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将展示如何在多个区域组织看板视图，例如标题和主要内容，以及如何使用QWeb语法应用可用的小部件和效果。
- en: The QWeb template language will be described in detail to provide a complete
    understanding of its features.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 将详细描述QWeb模板语言，以提供对其功能的完整理解。
- en: The later sections will explain how to extend the QWeb templates used in kanban
    views and present useful techniques for this. Here, you will learn how to add
    web assets that you intend to be used in these views, such as **CSS** and **JavaScript**.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 后续章节将解释如何扩展看板视图中使用的QWeb模板，并介绍一些有用的技术。在这里，你将学习如何添加打算在这些视图中使用的网络资源，例如**CSS**和**JavaScript**。
- en: 'The following topics will be covered in this chapter:'
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: Introducing kanban boards
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍看板板
- en: Designing kanban views
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计看板视图
- en: Designing kanban cards
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 设计看板卡片
- en: Exploring the QWeb template language
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 探索QWeb模板语言
- en: Extending kanban views
  id: totrans-12
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 扩展看板视图
- en: Adding CSS and JavaScript assets
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加CSS和JavaScript资源
- en: By the end of this chapter, you will understand kanban boards and be able to
    design your own kanban views.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，你将了解看板板，并能够设计自己的看板视图。
- en: Technical requirements
  id: totrans-15
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: This chapter continues enhancing the `library_checkout` addon module from [*Chapter
    10*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287), *Backend Views – Designing
    the User Interface*. The corresponding code can be found in the `ch11/` directory
    of the **GitHub** repository at [https://github.com/PacktPublishing/Odoo-15-Development-Essentials.](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将继续增强来自[*第10章*](B16119_10_Final_PD_ePub.xhtml#_idTextAnchor287)的`library_checkout`附加模块，*后端视图
    – 设计用户界面*。相应的代码可以在**GitHub**仓库的`ch11/`目录中找到，网址为[https://github.com/PacktPublishing/Odoo-15-Development-Essentials.](https://github.com/PacktPublishing/Odoo-15-Development-Essentials)
- en: Introducing kanban boards
  id: totrans-17
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍看板板
- en: '*Kanban* is a Japanese word literally meaning *billboard* and is associated
    with lean manufacturing. More recently, *kanban boards* have become popular in
    the software industry with the adoption of **agile** methodologies.'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: '**看板**是一个日本词汇，字面意思是**看板**，与精益制造相关。最近，随着**敏捷**方法的采用，**看板板**在软件行业中变得流行。'
- en: A kanban board provides a visual representation of a work queue. The board is
    organized into columns, which represent the *stages* of the work process. Work
    items are represented by *cards* placed on the appropriate column of the board.
    New work items start from the leftmost column and travel through the board until
    they reach the rightmost column, which represents the completed work.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 看板板提供了一个工作队列的视觉表示。板子组织成列，代表工作流程的**阶段**。工作项由放置在板子适当列上的**卡片**表示。新的工作项从最左边的列开始，穿过板子，直到达到最右边的列，代表已完成的工作。
- en: 'The simplicity and visual impact of kanban boards make them a good tool to
    support simple business processes. A basic example of a kanban board has three
    columns: *To Do*, *Doing*, and *Done*, as shown in the following diagram:'
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 看板板的简洁性和视觉冲击力使其成为支持简单业务流程的好工具。以下是一个基本的看板板示例，有三个列：*待办*、*进行中*和*完成*，如图所示：
- en: '`'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '`'
- en: '![Figure 11.1 – An example of a kanban board'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.1 – 看板板示例'
- en: '](img/Figure_11.1_B16119.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.1_B16119.jpg)'
- en: Figure 11.1 – An example of a kanban board
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.1 – 看板看板的一个例子
- en: In many cases, a kanban board is a more effective way to manage a process when
    compared to heavier workflow engines.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 在许多情况下，与更复杂的流程引擎相比，看板看板是管理流程的一种更有效的方式。
- en: Odoo supports kanban views – along with the classic list and form views – to
    support kanban boards. Now that we know what a kanban board is, let's learn how
    to use one.
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo支持看板视图 – 与经典列表和表单视图一起 – 以支持看板看板。现在我们知道了什么是看板看板，让我们学习如何使用它。
- en: Supporting kanban boards in Odoo
  id: totrans-27
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Odoo中支持看板看板
- en: Browsing the Odoo apps, we can see two different ways to use kanban views. One
    is a simple *card list*, which is used in places such as contacts, products, employees,
    and apps. The other is a kanban board, which is organized in columns representing
    the steps of a process.
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 浏览Odoo应用，我们可以看到两种不同的使用看板视图的方式。一种是一个简单的**卡片列表**，用于联系人、产品、员工和应用程序等地方。另一种是看板看板，它按流程步骤组织在列中。
- en: 'For simple card lists, a good example is the **Contacts** kanban view. The
    contact cards have an image on the left-hand side and a bold title in the main
    area, followed by a list of values:'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 对于简单的卡片列表，**联系人**看板视图是一个很好的例子。联系人卡片左侧有一个图片，主区域有一个粗体标题，后面跟着一系列值：
- en: '![Figure 11.2 – The Contacts kanban view'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.2 – 联系人看板视图'
- en: '](img/Figure_11.2_B16119.jpg)'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.2_B16119.jpg)'
- en: Figure 11.2 – The Contacts kanban view
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.2 – 联系人看板视图
- en: While this contacts view uses a *kanban view*, it is not a *kanban board*.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 虽然这个联系人视图使用的是**看板视图**，但它不是一个**看板看板**。
- en: 'Examples of kanban boards can be found on the *CRM* app''s **Pipeline** page
    or on the **Project Tasks** page. An example of the **Pipeline** page is shown
    in *Figure 11.3*:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 看板看板的例子可以在**CRM**应用的**管道**页面或**项目任务**页面找到。**管道**页面的一个例子在*图11.3*中展示：
- en: '![Figure 11.3 – The CRM Pipeline kanban board'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '![图11.3 – CRM管道看板看板'
- en: '](img/Figure_11.3_B16119.jpg)'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_11.3_B16119.jpg)'
- en: Figure 11.3 – The CRM Pipeline kanban board
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 图11.3 – CRM管道看板看板
- en: The most important difference between this kanban board and the **Contacts**
    kanban view is the card organization in columns. This is done using the **Group
    By** feature, which is similar to what list views use. Usually, the grouping is
    done in a *stage* field. One very useful feature of kanban views is that they
    support dragging and dropping cards between columns, which automatically assigns
    the corresponding value to the field the view is grouped by.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 与**联系人**看板视图相比，最重要的区别在于卡片在列中的组织方式。这是通过**分组**功能实现的，这与列表视图使用的类似。通常，分组是在**阶段**字段中进行的。看板视图的一个非常有用的功能是它们支持在列之间拖放卡片，这会自动将相应的值分配给视图分组的字段。
- en: The **CRM** **Pipeline** page cards have a bit more structure. The main card
    area also has a title, followed by a list of relevant information, as well as
    a footer area. In this footer area, we can see a priority widget on the left-hand
    side, followed by an activities indicator, and on the right-hand side, we can
    see a small image of the responsible user.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: '**CRM** **管道**页面的卡片结构稍微复杂一些。主要卡片区域也有一个标题，后面跟着相关信息列表，以及页脚区域。在这个页脚区域，我们可以看到左侧有一个优先级小部件，接着是一个活动指示器，右侧则可以看到负责用户的缩略图。'
- en: It's not visible in the figure shown in this chapter, but the cards also have
    an options menu on the top-right, which is shown when hovering the mouse pointer
    over it. This menu allows us to, for example, change a color indicator for the
    card.
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章展示的图中看不到，但卡片在右上角还有一个选项菜单，当鼠标悬停在其上时显示。此菜单允许我们更改卡片的颜色指示器，例如。
- en: Looking at the cards in both examples, we can see some differences. In fact,
    their design is quite flexible, and there isn't a single way to design a kanban
    card. But these two examples provide a starting point for your designs.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 观察这两个例子中的卡片，我们可以看到一些差异。实际上，它们的设计非常灵活，没有一种设计看板卡片的方法。但这两个例子为您的设计提供了一个起点。
- en: We will be using the more elaborate structure as a model for the cards on our
    checkouts kanban board.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用更复杂的结构作为我们检查站看板卡片的标准。
- en: Understanding kanban states
  id: totrans-43
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解看板状态
- en: On a kanban board, work items start in the leftmost column, and while the work
    is in progress, they travel through the columns until reaching the rightmost column,
    which shows the completed items. This implies a *push strategy*, which means when
    work on a column is done, the work item is *pushed* to the next column.
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 在看板板上，工作项从最左边的列开始，在工作进行过程中，它们会穿过各个列，直到到达最右边的列，这显示了已完成的项目。这暗示了一种**推策略**，这意味着当一个列的工作完成时，工作项会被**推**到下一个列。
- en: A push strategy tends to lead to a build-up of work items in progress, which
    can be inefficient. Lean approaches advise using a *pull strategy* instead. Here,
    each stage *pulls* work from the previous one when it is ready to start the next
    work item.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 推策略往往会引起进行中的工作项的积累，这可能会效率低下。精益方法建议使用**拉策略**代替。在这里，每个阶段会在准备好开始下一个工作项时，从上一个阶段**拉**取工作。
- en: 'Odoo supports the pull strategy with the use of kanban states. Each record
    work item has a kanban state field signaling its flow status: *In progress* (gray),
    *Blocked* (red), or *Ready* (green).'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo通过使用看板状态支持拉策略。每个记录工作项都有一个看板状态字段，表示其流程状态：**进行中**（灰色）、**阻塞**（红色）或**就绪**（绿色）。
- en: When the work needed in a stage is completed, instead of moving the card to
    the next column, it is marked as *Ready*. This gives a visual indication that
    the work item is ready to be pulled by the next stage. Additionally, if something
    is preventing the work from moving ahead, it can be marked as *Blocked*, giving
    a visual indication that help is needed to unblock this work item.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 当一个阶段所需的工作完成时，不是将卡片移动到下一个列，而是将其标记为**Ready**。这提供了一个视觉指示，表明工作项已准备好被下一个阶段**拉**取。此外，如果有什么阻碍工作前进，它可以被标记为**Blocked**，这提供了一个视觉指示，表明需要帮助来解锁这个工作项。
- en: 'As an example, kanban states are used in the **Project Tasks** kanban view.
    In the following screenshot, we can see the kanban state *gray-red-green* indicator
    in the bottom-right of each card. Also, note the progress bar at the top of each
    column, which provides a visual indication of the items in each state:'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，看板状态在**项目任务**看板视图中被使用。在下面的屏幕截图中，我们可以看到每个卡片右下角的看板状态**灰色-红色-绿色**指示器。还要注意每个列顶部的进度条，它提供了每个状态的项目的视觉指示：
- en: '![Figure 11.4 – The project task kanban view with the kanban states'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.4 – 项目任务看板视图与看板状态'
- en: '](img/Figure_11.4_B16119.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.4_B16119.jpg)'
- en: Figure 11.4 – The project task kanban view with the kanban states
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.4 – 带有看板状态的项目任务看板视图
- en: The kanban state is meaningful in each stage, so it should be reset when an
    item moves to another stage.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 看板状态在每个阶段都是有意义的，因此当项目移动到另一个阶段时，应该重置它。
- en: You have now learned about the different views in a kanban board and what they
    look like. Now, we will move on to learning how to design them.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，你已经了解了看板板上的不同视图及其外观。现在，我们将继续学习如何设计它们。
- en: Designing kanban views
  id: totrans-54
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计看板视图
- en: The book checkout process can use a kanban view to visualize the work in progress.
    In this case, the kanban board columns could represent the checkout stages, and
    each checkout could be represented by a card.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍借阅流程可以使用看板视图来可视化进行中的工作。在这种情况下，看板板的列可以代表借阅阶段，每个借阅可以由一张卡片表示。
- en: 'This is what the library checkout kanban view will look like when complete:'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是图书馆借阅看板视图完成后的样子：
- en: '![Figure 11.5 –  Library checkouts kanban view'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 11.5 – 图书馆借阅看板视图'
- en: '](img/Figure_11.5_B16119.jpg)'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '![图片](img/Figure_11.5_B16119.jpg)'
- en: Figure 11.5 – Library checkouts kanban view
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 图 11.5 – 图书馆借阅看板视图
- en: 'Form views mostly use Odoo-specific XML elements such as `<field>` and `<group>`.
    They also use some HTML elements such as `<h1>` or `<div>`, but their use is limited.
    Kanban views are quite the opposite. They are HTML-based and additionally support
    two Odoo-specific elements: `<field>` and `<button>`.'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 表单视图主要使用Odoo特定的XML元素，如`<field>`和`<group>`。它们还使用一些HTML元素，如`<h1>`或`<div>`，但它们的使用是有限的。看板视图则恰恰相反。它们基于HTML，并且还支持两个Odoo特定的元素：`<field>`和`<button>`。
- en: With kanban views, the final HTML presented in the web client is dynamically
    generated from QWeb templates. The QWeb engine processes special XML tags and
    attributes in the templates to produce the final HTML. This allows a lot of control
    of how the content is rendered, but it also makes the view design more complex.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 使用看板视图，最终在Web客户端呈现的HTML是动态从QWeb模板生成的。QWeb引擎处理模板中的特殊XML标签和属性，以生成最终的HTML。这允许对内容的渲染方式有更多的控制，但也使得视图设计更加复杂。
- en: As a kanban view design is so flexible, different design structures can be used.
    A good approach is to find an existing kanban view that would fit well with the
    use case at hand, inspect it, and use it as a reference.
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 由于看板视图设计非常灵活，可以使用不同的设计结构。一个好的方法是找到一个与当前用例很好地匹配的现有看板视图，检查它，并用作参考。
- en: Creating a minimal viable kanban view
  id: totrans-63
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建一个最小可行看板视图
- en: Kanban views allow for a rich user interface and can quickly get complex. The
    first step in learning how to design kanban views is to create a minimum viable
    view.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 看板视图允许丰富的用户界面，但可能会迅速变得复杂。学习如何设计看板视图的第一步是创建一个最小可行视图。
- en: 'To add a kanban view to the `library_checkout` module, follow these steps:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 要将看板视图添加到`library_checkout`模块，请按照以下步骤操作：
- en: 'Add `kanban` in `view_mode` of the window action. To do this, edit the `views/library_menu.xml`
    file and update the value set in the `view_mode` field to match the following:'
  id: totrans-66
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在窗口操作的`view_mode`中添加`kanban`。为此，编辑`views/library_menu.xml`文件，并更新`view_mode`字段中的值以匹配以下：
- en: '[PRE0]'
  id: totrans-67
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'The new kanban view will be added in a new XML file, `views/checkout_kanban_view.xml`.
    So, add this file to the `__manifest__.py` module in the `data` key:'
  id: totrans-68
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 新的看板视图将添加到一个新的XML文件中，`views/checkout_kanban_view.xml`。因此，将此文件添加到`__manifest__.py`模块的`data`键中：
- en: '[PRE1]'
  id: totrans-69
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Finally, add the XML code for a minimal kanban view in the `views/checkout_kanban_view.xml`
    file by using the following code:'
  id: totrans-70
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，通过以下代码在`views/checkout_kanban_view.xml`文件中添加一个最小看板视图的XML代码：
- en: '[PRE2]'
  id: totrans-71
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: In the previous code, a kanban view is declared inside a `<kanban>` element.
    Kanban views are described using the QWeb template language. The templates are
    added inside a `<templates>` sub-element.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，一个看板视图在`<kanban>`元素内部声明。看板视图使用QWeb模板语言描述。模板添加在`<templates>`子元素内部。
- en: The main template for each kanban card is described in the `<t t-name="kanban-box">`
    element. This QWeb template is minimal. It is an HTML `<div>` element containing
    an Odoo-specific `<field>` widget, which is also used in form and tree views.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 每个看板卡片的主模板在`<t t-name="kanban-box">`元素中描述。这是一个QWeb模板，是最小的。它是一个包含Odoo特定`<field>`小部件的HTML`<div>`元素，该小部件也用于表单和树视图。
- en: This provides a pretty basic *kanban view* XML structure to start building from.
    To be a *kanban board*, it needs to feature columns for each process stage.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了一个相当基本的看板视图XML结构，可以从它开始构建。要成为一个看板板，它需要包含每个流程阶段的列。
- en: Presenting kanban board columns
  id: totrans-75
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 展示看板板列
- en: Kanban boards present the work items organized in columns, where each column
    is a stage in the process. New work items start on the left-hand columns and then
    travel through the columns until they arrive at the right-hand side, completed.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 看板板以列的形式呈现组织好的工作项，其中每个列是流程中的一个阶段。新的工作项从左侧列开始，然后通过列移动，直到到达右侧，完成。
- en: Kanban views present items in columns when grouping by a field. For a kanban
    board, the view should be grouped by a stage or state field – often, `stage_id`
    is used.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 看板视图在按字段分组时以列的形式呈现项目。对于看板板，视图应按阶段或状态字段分组 - 通常，使用`stage_id`。
- en: 'The `default_group_by` attribute sets a default column group for the kanban
    view. To have a kanban board for the book checkouts, edit the `<kanban>` element
    to look like this:'
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: '`default_group_by`属性为看板视图设置默认列组。要有一个用于图书借阅的看板板，编辑`<kanban>`元素，使其看起来像这样：'
- en: '[PRE3]'
  id: totrans-79
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: When opening this view, it will be grouped by stage by default (which is similar
    to *Figure 11.4*). The user is still able to change the applied `group_by` options
    used for list views.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 当打开此视图时，它将默认按阶段分组（类似于*图11.4*）。用户仍然可以更改用于列表视图的`group_by`选项。
- en: Understanding kanban view attributes and elements
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解看板视图属性和元素
- en: Kanban views support a few additional attributes to fine-tune their behavior.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 看板视图支持一些额外的属性来微调其行为。
- en: 'The `<kanban>` top element supports these attributes:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`<kanban>`顶级元素支持以下属性：'
- en: '`default_group_by`: This sets the field to use for the default column groups.'
  id: totrans-84
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_group_by`: 这将设置用于默认列分组的字段。'
- en: '`default_order`: This sets a default order to use for the kanban items.'
  id: totrans-85
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`default_order`: 这将设置用于看板项目的默认排序。'
- en: '`quick_create="false"`: This disables the `quick_create` option to create new
    items by providing just a title description, using the plus sign at the right-hand
    side of each column header. The `false` value is a JavaScript literal and must
    be in lowercase.'
  id: totrans-86
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quick_create="false"`: 这将禁用通过仅提供标题描述来创建新项目的`quick_create`选项，使用每个列标题右侧的加号。`false`值是一个JavaScript字面量，必须小写。'
- en: '`quick_create_view`: This can optionally be used to set a specific form view
    to use for the `quick_create` function. It should be set with the XML ID of the
    form view.'
  id: totrans-87
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`quick_create_view`：可以可选地用于设置用于`quick_create`函数的特定表单视图。它应该使用表单视图的 XML ID 设置。'
- en: '`class`: This adds a CSS class to the root element of the rendered kanban view.
    A relevant class is `o_kanban_small_column`, which makes columns somewhat more
    compact than the default. Additional classes may be made available through the
    CSS assets provided by the module.'
  id: totrans-88
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`class`: 这会给渲染的看板视图的根元素添加一个 CSS 类。一个相关的类是`o_kanban_small_column`，它使得列比默认值更紧凑。可能通过模块提供的
    CSS 资产提供额外的类。'
- en: '`group_create`, `group_edit`, `group_delete`, and `quick_create_view`: These
    can be set to `false` to disable the corresponding action on the kanban columns.
    For example, `group_create="false"` removes the vertical **Add new column** bar
    on the right side of the screen.'
  id: totrans-89
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`group_create`、`group_edit`、`group_delete`和`quick_create_view`：这些可以设置为`false`以禁用在看板列上的相应操作。例如，`group_create="false"`将移除屏幕右侧的垂直**添加新列**栏。'
- en: '`records_draggable="false"`: This disables the ability to drag records between
    columns.'
  id: totrans-90
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`records_draggable="false"`: 这将禁用拖动记录在列之间的功能。'
- en: 'The `<kanban>` element can contain these elements:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`<kanban>`元素可以包含以下元素：'
- en: '`<field>`: This is used to declare the fields used by the QWeb templates that
    need to be retrieved from the server. This is necessary when those fields are
    used in QWeb evaluation expressions. It is not needed for fields used in a template
    `<field>` element.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<field>`: 这用于声明需要从服务器检索的、由 QWeb 模板使用的字段。当这些字段用于 QWeb 评估表达式时，这是必要的。对于在模板 `<field>`
    元素中使用的字段，则不需要。'
- en: '`<progressbar>`: This element adds a progress bar widget on the group column
    headers.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<progressbar>`: 此元素在组列标题上添加进度条小部件。'
- en: '`<templates>`: This element is required where the kanban card QWeb templates
    are declared.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<templates>`: 在声明看板卡片 QWeb 模板的地方需要此元素。'
- en: An example for the `<templates>` element can be seen in the minimal kanban view
    presented previously. An example of the `<progressbar>` element is provided next.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`<templates>`元素的一个示例可以在之前提供的最小看板视图中看到。下面提供了一个`<progressbar>`元素的示例。'
- en: Adding a progress bar to group columns
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 向组列添加进度条
- en: A **progress bar** can show a total number for the column and a colored bar
    representing the column record sub-states. The CRM Pipeline page uses it to provide
    a summary for the lead activities, from **planned** to **overdue**. Another example
    is the use of kanban states, as used by the **Project Tasks** kanban board.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '**进度条**可以显示列的总数以及表示列记录子状态的彩色条。CRM 流程页面使用它来提供从**计划**到**逾期**的潜在活动摘要。另一个例子是**项目任务**看板中使用的看板状态。'
- en: 'For this, first `kanban_state` needs to be added to the model, and then, it
    can be used in the view. To do so, apply the following steps:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 为了做到这一点，首先需要将`kanban_state`添加到模型中，然后可以在视图中使用它。为此，执行以下步骤：
- en: 'Add the field to the `library.checkout` model, editing the `models/library_checkout.py`
    file as follows:'
  id: totrans-99
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将字段添加到`library.checkout`模型中，按照以下方式编辑`models/library_checkout.py`文件：
- en: '[PRE4]'
  id: totrans-100
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'When changing the stage in the same file at the beginning of the `write()`
    method, add the business logic to reset `kanban_state`, as follows:'
  id: totrans-101
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 当在`write()`方法的开头更改同一文件中的阶段时，添加以下业务逻辑以重置`kanban_state`：
- en: '[PRE5]'
  id: totrans-102
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This completes the model changes needed for the time being. Here, we are focusing
    on adding the progress bar – the kanban status widget will be added in a later
    section.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了目前所需的模型更改。在这里，我们专注于添加进度条 - 看板状态小部件将在稍后的部分添加。
- en: The `<progressbar>` element is one of the three element types allowed inside
    a `<kanban>` tag, along with `<field>` and `<templates>`.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '`<progressbar>`元素是允许在`<kanban>`标签内使用的三种元素类型之一，与`<field>`和`<templates>`一起。'
- en: 'To add it to the `<kanban>` view definition, edit the element to add the following
    highlighted code:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 要将其添加到`<kanban>`视图定义中，编辑元素并添加以下高亮代码：
- en: '[PRE6]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: The previous code adds the progress bar widget. The `field` attribute sets the
    model field to use, and the `colors` attribute maps the field values to the `"danger"`,
    `"warning"`, `"success"`, or `"muted"` colors.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码添加了进度条小部件。`field`属性设置了要使用的模型字段，而`colors`属性将字段值映射到`"danger"`、`"warning"`、`"success"`或`"muted"`颜色。
- en: By default, the column total indicator counts the number of items in each column.
    This can be changed to be the sum of the values in a model field. In the previous
    code, the optional `sum_fields` attribute was added to present the total number
    of books in each column's requests.
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 默认情况下，列总计指示器计算每个列中的项目数量。这可以更改为模型字段中值的总和。在之前的代码中，添加了可选的 `sum_fields` 属性以显示每个列请求中的书籍总数。
- en: At this point, we have a functioning kanban view. However, the kanban cards
    can display richer features. The next section focuses on this, where we will further
    expand the templates used to render the kanban card content.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们已经有一个功能齐全的看板视图。然而，看板卡片可以显示更丰富的功能。下一节将专注于这一点，我们将进一步扩展用于渲染看板卡片内容的模板。
- en: Designing kanban cards
  id: totrans-110
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设计看板卡片
- en: The design of a kanban card is quite flexible and uses HTML that is produced
    from QWeb templates declared in the `<templates>` element.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 看板卡片的布局相当灵活，并使用由 `<templates>` 元素中声明的 QWeb 模板生成的 HTML。
- en: 'The content area will often feature several other areas. Using the CRM Pipeline
    as a blueprint, the following sections can be found:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 内容区域通常会包含几个其他区域。以 CRM 流程为蓝图，可以找到以下部分：
- en: A title section, with the lead short summary
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个标题区域，包含潜在客户的简要概述
- en: A content section, with the amount, customer name, and lead tags
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个内容区域，包含数量、客户名称和潜在客户标签
- en: A left footer section, with the priority and activities widgets
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个左侧页脚区域，包含优先级和活动小部件
- en: A right footer section, with the salesperson avatar
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个右侧页脚区域，包含销售人员头像
- en: A top-right menu button, which in this case, is visible on mouse hover
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个右上角菜单按钮，在这种情况下，在鼠标悬停时可见
- en: This section implements the previous kanban card structure, and it populates
    each section to showcase the most important features. The first step for designing
    kanban cards is to lay out the kanban card skeleton, which is described next.
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 这个部分实现了之前的看板卡片结构，并为每个部分填充内容以展示最重要的功能。设计看板卡片的第一个步骤是布局看板卡片框架，这将在下面描述。
- en: Note
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The proposed kanban skeleton, as well as certain CSS classes used, is based
    on the CRM Pipeline kanban view. Odoo modules can provide specific CSS classes
    and use them in the kanban card design. So, these can vary when inspecting the
    kanban view templates from different modules.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 提出的看板框架以及使用的某些 CSS 类基于 CRM 流程看板视图。Odoo 模块可以提供特定的 CSS 类并在看板卡片设计中使用它们。因此，当检查来自不同模块的看板视图模板时，这些可能会有所不同。
- en: Organizing the kanban card layout
  id: totrans-121
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 组织看板卡片布局
- en: The kanban card minimal design will now be expanded to a skeleton including
    several areas, which we will now describe.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 看板卡片的最小设计现在将扩展到包括几个区域的框架，我们将现在描述这些。
- en: 'The kanban card is defined inside the `<templates>` section in an element with
    `t-name="kanban-box"`. This can be an HTML element or a QWeb `t-` directive. The
    definition created earlier in this chapter uses the neutral `<t>` QWeb element:
    `<t t-name="kanban-box">`.'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 看板卡片定义在 `<templates>` 部分的一个具有 `t-name="kanban-box"` 的元素中。这可以是一个 HTML 元素或一个 QWeb
    `t-` 指令。本章前面创建的定义使用了中性的 `<t>` QWeb 元素：`<t t-name="kanban-box">`。
- en: 'Moving ahead, the kanban view template and the QWeb template should be edited
    to mark the areas to be worked on, as shown by the following code:'
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 继续前进，看板视图模板和 QWeb 模板应该被编辑以标记要工作的区域，如下面的代码所示：
- en: '[PRE7]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: The previous QWeb template code provides a skeleton for all the areas usually
    seen in kanban cards.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的 QWeb 模板代码为看板卡片中通常看到的各个区域提供了一个框架。
- en: When the `t-name` QWeb attribute is used in a `<t>` element, this element can
    have only one child element. This was the case in the preceding code, and the
    `<div>` child element must contain all the other kanban view elements.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 当在 `<t>` 元素中使用 `t-name` QWeb 属性时，此元素只能有一个子元素。这在前面代码中就是这样，并且 `<div>` 子元素必须包含所有其他看板视图元素。
- en: It is worth noting that this overarching `<div>` element uses the `class="oe_kanban_global_click"`
    attribute. This makes the card clickable, and when the user does so, the corresponding
    form view will be opened in a similar way to what happens with list views.
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，这个总的 `<div>` 元素使用了 `class="oe_kanban_global_click"` 属性。这使得卡片可点击，当用户这样做时，相应的表单视图将以类似列表视图的方式打开。
- en: The next task is to focus on each of the highlighted areas and add content to
    them.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: 下一个任务是专注于每个突出显示的区域，并向其中添加内容。
- en: Adding a title and other content fields
  id: totrans-130
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加标题和其他内容字段
- en: Now that we have a basic kanban card skeleton, the title and additional data
    can be added.
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经有一个基本的看板卡片框架，可以添加标题和附加数据。
- en: 'These will go inside the `<div class="oe_kanban_content">` element. The skeleton
    being used has sections for these: the `<div class="o_kanban_record_title">` and
    `<div class="o_kanban_record_body">` elements.'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这些将放在 `<div class="oe_kanban_content">` 元素内部。所使用的骨架为这些部分提供了区域：`<div class="o_kanban_record_title">`
    和 `<div class="o_kanban_record_body">` 元素。
- en: 'The following code expands this section to highlight the card title and add
    the checkout request date and the requesting library member ID:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码扩展了这个部分，以突出显示卡片标题并添加检查请求日期和请求的图书馆成员ID：
- en: '[PRE8]'
  id: totrans-134
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: In this case, regular HTML elements can be used. For example, the `<strong>`
    element was used to highlight the title. Also, `<field>` elements can be used
    to render field values, which will be rendered using the appropriate formatting
    in a similar way to what happens in form views. In the previous code, `request_date`
    uses a `<field>` element, and so its content will be rendered using the Odoo-configured
    date format. It is wrapped in a `<div>` element so that there is a line break
    between several fields.
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，可以使用常规HTML元素。例如，使用 `<strong>` 元素来突出标题。此外，可以使用 `<field>` 元素来渲染字段值，这些值将以与表单视图类似的方式使用适当的格式进行渲染。在之前的代码中，`request_date`
    使用了 `<field>` 元素，因此其内容将使用Odoo配置的日期格式进行渲染。它被包裹在一个 `<div>` 元素中，以便在多个字段之间有一个换行。
- en: The `member_id` many-to-one object is also added by using a specific widget
    that presents the corresponding avatar image along with the name, `widget="many2one_avatar"`.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 通过使用特定的小部件来添加 `member_id` 多对一对象，该小部件展示了相应的头像图像以及名称，`widget="many2one_avatar"`。
- en: Now that we have added some basic data elements to the card, let's look at the
    drop-down menu area.
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经为卡片添加了一些基本数据元素，让我们看看下拉菜单区域。
- en: Adding the drop-down options menu
  id: totrans-138
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加下拉选项菜单
- en: Kanban cards can have an options menu on the top-right corner. Common options
    include being able to edit or delete the record, set a color for the card, or
    run any action that can be called from a button.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: �看板卡片可以在右上角有一个选项菜单。常见选项包括能够编辑或删除记录、为卡片设置颜色或运行任何可以从按钮调用的操作。
- en: 'The following is the baseline HTML code for the options menu to be added to
    the top of the `oe_kanban_content` element:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是为 `oe_kanban_content` 元素顶部添加的选项菜单的基本HTML代码：
- en: '[PRE9]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Here, there are QWeb expressions using fields that may not be loaded into the
    view. In particular, the last `t-if` expression uses the record''s `state` field.
    To ensure this field is available in the form, it should be added just after the
    `<kanban>` element:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，有一些使用可能未加载到视图中的字段的QWeb表达式。特别是，最后的 `t-if` 表达式使用了记录的 `state` 字段。为了确保这个字段在表单中可用，它应该紧接在
    `<kanban>` 元素之后添加：
- en: '[PRE10]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'Let''s break down the drop-down menu code and look at the key elements added:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们分解下拉菜单代码并查看添加的关键元素：
- en: The ellipsis icon, in an HTML anchor (`<a>`) element, to present the menu button.
  id: totrans-145
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在HTML锚点 (`<a>`) 元素中的省略号图标，用于显示菜单按钮。
- en: A `<div class="dropdown-menu" role="menu">` element, containing the menu options.
  id: totrans-146
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个 `<div class="dropdown-menu" role="menu">` 元素，包含菜单选项。
- en: The `<a>` element with `type="edit".`
  id: totrans-147
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有 `type="edit"` 的 `<a>` 元素。
- en: The `<a>` element with `type="delete".`
  id: totrans-148
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 带有 `type="delete"` 的 `<a>` 元素。
- en: A separator line, using `<div role="separator" class="dropdown-divider"/>.`
  id: totrans-149
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `<div role="separator" class="dropdown-divider"/>` 创建的分隔线。
- en: A color picker menu option added with a `<ul class="oe_kanban_colorpicker" />`
    element. The `data-field` attribute sets the field used to store the picked color.
    This capability will be implemented in the next section, so it won't work right
    now.
  id: totrans-150
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 使用 `<ul class="oe_kanban_colorpicker" />` 元素添加的颜色选择器菜单选项。`data-field` 属性设置了用于存储选择的颜色的字段。这个功能将在下一节中实现，所以现在它不会正常工作。
- en: A menu item equivalent to a button click, added with an `<a>` element, featuring
    the same `name` and `type` attributes used in regular buttons. This particular
    one uses `name="button_done" type="object"`.
  id: totrans-151
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个与按钮点击等效的菜单项，通过 `<a>` 元素添加，具有与常规按钮相同的 `name` 和 `type` 属性。这个特定的一个使用 `name="button_done"
    type="object"`。
- en: Some menu items, such as `t-if` QWeb directive. This and other QWeb directives
    are explained in more detail later in this chapter in the *Exploring the QWeb
    template language* section.
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: 一些菜单项，如 `t-if` QWeb指令。这个和其他QWeb指令将在本章的 *探索QWeb模板语言* 部分中更详细地解释。
- en: The `widget` global variable represents a `KanbanRecord()` JavaScript object,
    which is responsible for the rendering of the current kanban card. Two particularly
    useful properties are `widget.editable` and `widget.deletable`, which allow us
    to check whether the corresponding actions are available.
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '`widget` 全局变量代表一个 `KanbanRecord()` JavaScript 对象，它负责渲染当前看板卡片。两个特别有用的属性是 `widget.editable`
    和 `widget.deletable`，这允许我们检查相应的操作是否可用。'
- en: Menu items can be added with additional `<a>` elements in a similar way to the
    **Set as Done** option.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: 可以通过添加类似 **设置为完成** 选项的额外 `<a>` 元素以类似的方式添加菜单项。
- en: Menu items can be shown or hidden using a JavaScript expression that can use
    record field values. For example, the `state` field is not set to `done`.
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 可以使用可以记录字段值的 JavaScript 表达式来显示或隐藏菜单项。例如，`state` 字段未设置为 `done`。
- en: The color picker menu option uses a special widget that uses a `color` model
    field to store the picked color. While the color selector is available, we did
    not add the feature to set the card yet. Let's do this in the next section.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 颜色选择器菜单选项使用一个特殊的 widget，该 widget 使用 `color` 模型字段来存储选择的颜色。虽然颜色选择器可用，但我们尚未添加设置卡片的功能。让我们在下节中完成这个操作。
- en: Adding a kanban card color indicator
  id: totrans-157
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加看板卡片颜色指示器
- en: Kanban cards can be set with a user-selected color. This colors a bar on the
    left side of the card and can be useful to easily locate items.
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 看板卡片可以设置用户选择的颜色。这会在卡片左侧绘制一个条形，并且可以方便地定位项目。
- en: The color to apply is selected using a color picker option on the card's menu.
    This is added with a `<ul class="oe_kanban_colorpicker" data-field="color"/>`
    element, as shown in the previous section. The `data-field` attribute sets the
    field to use, which in this case is `color`.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 要应用的颜色是通过卡片菜单上的颜色选择器选项选择的。这通过一个 `<ul class="oe_kanban_colorpicker" data-field="color"/>`
    元素添加，如前节所示。`data-field` 属性设置了要使用的字段，在这种情况下是 `color`。
- en: 'To add a kanban color card indicator, complete the following steps:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加看板颜色卡片指示器，完成以下步骤：
- en: 'Add the color field in the `library.checkout` model by editing the `models/library_checkout.py`
    file as follows:'
  id: totrans-161
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 通过编辑 `models/library_checkout.py` 文件，按以下方式在 `library.checkout` 模型中添加颜色字段：
- en: '[PRE11]'
  id: totrans-162
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: This is a regular integer field. The color picker widget maps the selectable
    color to numbers.
  id: totrans-163
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这是一个常规的整数字段。颜色选择器 widget 将可选颜色映射到数字。
- en: 'Now, the color field can be used to set a dynamic CSS style on the kanban cards
    though QWeb. First, add it to the fields to load by adding the following code:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，可以通过 QWeb 在看板卡片上使用颜色字段设置动态 CSS 样式。首先，通过添加以下代码将其添加到要加载的字段中：
- en: '[PRE12]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Finally, edit the kanban card top `<div>` element to add the dynamic color
    style, as shown in the following code:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，编辑看板卡片顶部的 `<div>` 元素以添加动态颜色样式，如下面的代码所示：
- en: '[PRE13]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: The preceding code uses `t-attf-class` to dynamically calculate a CSS class
    to apply. A JavaScript expression is declared in a `{{ }}` block to be evaluated
    and return a style to use, which depends on the `color` field value. This completes
    the steps to add a kanban color card indicator.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码使用 `t-attf-class` 动态计算要应用的 CSS 类。在 `{{ }}` 块中声明了一个 JavaScript 表达式，用于评估并返回要使用样式，这取决于
    `color` 字段值。这完成了添加看板颜色卡片指示器的步骤。
- en: A few more widgets are available for kanban cards. The next sections show how
    to use them, where we will add them to the card footer section.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 看板卡片还有更多小部件可供选择。接下来的几节将展示如何使用它们，我们将把它们添加到卡片页脚部分。
- en: Adding priority and activity widgets
  id: totrans-170
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加优先级和活动小部件
- en: The priority widget is displayed as a list of stars that can be clicked to select
    a priority level. This widget is a `<field>` element with `widget="priority"`.
    The priority field is a `Selection` field, declaring the several priority levels
    available.
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 优先级小部件显示为可以点击以选择优先级级别的星号列表。这个小部件是一个 `widget="priority"` 的 `<field>` 元素。优先级字段是一个
    `Selection` 字段，声明了可用的几个优先级级别。
- en: 'The `library.checkout` model needs to be modified to add a priority field.
    To do this, complete the following steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 需要修改 `library.checkout` 模型以添加优先级字段。为此，完成以下步骤：
- en: 'Edit the `models/library_checkout.py` file as follows:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 按以下方式编辑 `models/library_checkout.py` 文件：
- en: '[PRE14]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Now, the corresponding `<field>` elements need to be added to the kanban template
    on the left side. So, insert the priority widget:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 现在，需要在左侧的看板模板中添加相应的 `<field>` 元素。因此，插入优先级小部件：
- en: '[PRE15]'
  id: totrans-176
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The kanban card now has the priority and activity widgets added to the left
    side of the footer. Next, we will add a few more widgets to the right footer.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 看板卡片现在已在页脚左侧添加了优先级和活动小部件。接下来，我们将在右侧页脚添加更多小部件。
- en: Adding kanban state and user avatar widgets
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加看板状态和小部件
- en: The kanban state widget presents a traffic light color for the item. It is a
    `<field>` element using `widget="kanban_state_selection"`.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 看板状态小部件为项目呈现交通灯颜色。它是一个使用`widget="kanban_state_selection"`的`<field>`元素。
- en: 'For related user records, a specific widget is available for this: `widget="many2one_avatar_user"`.'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 对于相关的用户记录，有一个特定的小部件可供使用：`widget="many2one_avatar_user"`。
- en: 'Examples of both of these will be added to the kanban card right footer, as
    shown in the following code:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 这两个示例都将添加到看板卡片右下角，如下面的代码所示：
- en: '[PRE16]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The kanban state is added using a `<field>` element with the `kanban_state_selection`
    widget.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`<field>`元素和`kanban_state_selection`小部件添加看板状态。
- en: The user avatar image is added with the `user_id` field, using the `widget="many2one_avatar_user"`
    widget.
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`user_id`字段和`widget="many2one_avatar_user"`小部件添加用户头像图像。
- en: One more important topic is using actions on kanban cards, which we will discuss
    in the following section.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个重要的话题是在看板卡片上使用动作，我们将在下一节中讨论。
- en: Using actions in kanban view elements
  id: totrans-186
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在看板视图元素中使用动作
- en: In QWeb templates, the `<a>` tag for links can have a `type` attribute. This
    sets the type of action the link will perform so that links can act just like
    buttons in regular forms. So, in addition to the `<button>` elements, the `<a>`
    tags can also be used to run Odoo actions.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 在QWeb模板中，链接的`<a>`标签可以有一个`type`属性。这设置了链接将执行的动作类型，以便链接可以像常规表单中的按钮一样操作。因此，除了`<button>`元素外，`<a>`标签也可以用来运行Odoo动作。
- en: 'As is the case in form views, the action type can be set to `action` or `object`
    and should be accompanied by a `name` attribute that identifies the specific action
    to execute. Additionally, the following action types are also available:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 就像表单视图一样，动作类型可以设置为`action`或`object`，并且应该有一个`name`属性来标识要执行的具体动作。此外，以下动作类型也是可用的：
- en: '`open`: This opens the corresponding form view.'
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`open`：这会打开相应的表单视图。'
- en: '`edit`: This opens the corresponding form view directly in edit mode.'
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`edit`：这会直接以编辑模式打开相应的表单视图。'
- en: '`delete`: This deletes the record and removes the item from the kanban view.'
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`delete`：这会删除记录并从看板视图中移除项目。'
- en: This completes our walkthrough of designing kanban views. Kanban views use the
    QWeb template language, and a few examples were used here. The next section takes
    a deep dive into QWeb.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了我们对设计看板视图的概述。看板视图使用QWeb模板语言，这里使用了几个示例。下一节将深入探讨QWeb。
- en: Exploring the QWeb template language
  id: totrans-193
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 探索QWeb模板语言
- en: The QWeb parser looks for special directives in the templates and replaces them
    with dynamically generated HTML. These directives are XML element attributes and
    can be used in any valid tag or element – for example, `<div>`, `<span>`, or `<field>`.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb解析器在模板中寻找特殊指令，并用动态生成的HTML替换它们。这些指令是XML元素属性，可以在任何有效的标签或元素中使用——例如，`<div>`、`<span>`或`<field>`。
- en: Sometimes, a QWeb directive needs to be used, but we don't want to place it
    in any of the XML elements in the template. For these cases, the `<t>` special
    element can be used. It can have QWeb directives such as `t-if` or `t-foreach`,
    but it is silent, and it won't have any effect on the final XML/HTML produced.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 有时，需要使用QWeb指令，但我们不希望在模板中的任何XML元素中放置它。对于这些情况，可以使用`<t>`特殊元素。它可以有QWeb指令，如`t-if`或`t-foreach`，但它是无声的，并且不会对最终生成的XML/HTML产生任何影响。
- en: 'The QWeb directives frequently use evaluated expressions to produce different
    effects that depend on record values. The language used to evaluate these expressions
    depends on the environment where the QWeb is being executed. There are two different
    QWeb implementations: **client-side** **JavaScript** and **server-side** **Python**.
    Reports and website pages use the server-side Python implementation of QWeb.'
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb指令经常使用评估表达式来产生依赖于记录值的不同效果。用于评估这些表达式的语言取决于QWeb执行的环境。有两种不同的QWeb实现：**客户端**
    **JavaScript** 和 **服务器端** **Python**。报告和网站页面使用QWeb的服务器端Python实现。
- en: Kanban views use the client-side JavaScript implementation. This means that
    the QWeb expression used in kanban views should be written using the JavaScript
    syntax, not Python.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: �看板视图使用客户端JavaScript实现。这意味着看板视图中使用的QWeb表达式应该使用JavaScript语法编写，而不是Python。
- en: 'When displaying a kanban view, the internal steps are roughly as follows:'
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 当显示看板视图时，内部步骤大致如下：
- en: Get the XML for the templates to render.
  id: totrans-199
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 获取用于渲染模板的XML。
- en: Call the server `read()` method to get the data for the fields used in the templates.
  id: totrans-200
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 调用服务器`read()`方法以获取模板中使用的字段数据。
- en: Locate the `kanban-box` template and parse it using QWeb to output the final
    HTML fragments.
  id: totrans-201
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 定位到`kanban-box`模板，并使用QWeb进行解析以输出最终的HTML片段。
- en: Inject the HTML in the browser display (the **Document Object Model** (**DOM**)).
  id: totrans-202
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在浏览器显示中注入HTML（**文档对象模型**（**DOM**））。
- en: This is not meant to be technically exact. It's just a mind map that can be
    useful to understand how things work in kanban views.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不是要精确的技术描述。它只是一个思维导图，有助于理解看板视图中事物的工作方式。
- en: Next, we'll learn about QWeb expression evaluation and explore the available
    QWeb directives, using examples that will enhance the checkout kanban card.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将学习QWeb表达式评估，并探索可用的QWeb指令，使用示例来增强结账看板卡片。
- en: Understanding the QWeb JavaScript evaluation context
  id: totrans-205
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 理解QWeb JavaScript评估上下文
- en: Many of the QWeb directives use expressions that are evaluated to produce some
    result. When used on the client side (as is the case for Kanban views), these
    expressions are written in JavaScript. They're evaluated in a context that has
    a few useful variables available.
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 许多QWeb指令使用的是用于产生某些结果的计算表达式。当在客户端使用（如看板视图的情况）时，这些表达式用JavaScript编写。它们在一个包含一些有用变量的上下文中进行评估。
- en: 'A `record` object is available, representing the current record, with the fields
    requested from the server. The field values can be accessed using either the `raw_value`
    or `value` attributes:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: 可用`record`对象表示当前记录，包含从服务器请求的字段。字段值可以通过`raw_value`或`value`属性访问：
- en: '`raw_value`: This is the value returned by the `read()` server method, so it''s
    more suitable for use in condition expressions.'
  id: totrans-208
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`raw_value`：这是`read()`服务器方法返回的值，因此更适合用于条件表达式。'
- en: '`value`: This is formatted according to the user settings and is meant to be
    used for display in the user interface. This is typically useful for date, datetime,
    float, monetary, and relational fields.'
  id: totrans-209
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`value`：这是根据用户设置格式化的，并旨在在用户界面中显示。这通常对日期、日期时间、浮点数、货币和关系字段很有用。'
- en: 'The QWeb evaluation context can also reference the JavaScript web client instance.
    To make use of that, a good understanding of the web client architecture is needed.
    In this chapter, we won''t be able to go into detail regarding this. However,
    for reference purposes, the following identifiers are available in QWeb expression
    evaluation:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb评估上下文也可以引用JavaScript网络客户端实例。为了利用这一点，需要对网络客户端架构有良好的理解。在本章中，我们无法对此进行详细说明。然而，出于参考目的，以下标识符在QWeb表达式评估中可用：
- en: '`widget`: This is a reference to the current `KanbanRecord()` widget object
    and is responsible for the rendering of the current record into a kanban card.
    It exposes some helper functions we can use.'
  id: totrans-211
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`widget`：这是对当前`KanbanRecord()`小部件对象的引用，负责将当前记录渲染为看板卡片。它公开了一些我们可以使用的辅助函数。'
- en: '`record`: This is a shortcut for `widget.record` and provides access to the
    fields available, using dot notation.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`record`：这是`widget.record`的快捷方式，提供使用点符号访问可用字段。'
- en: '`read_only_mode`: This indicates whether the current view is in read mode (and
    not in edit mode). It''s a shortcut for `widget.view.options.read_only_mode`.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`read_only_mode`：这表示当前视图是否处于只读模式（而不是编辑模式）。它是`widget.view.options.read_only_mode`的快捷方式。'
- en: '`instance`: This is a reference to the full web client instance.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`instance`：这是对完整网络客户端实例的引用。'
- en: Since QWeb templates are written in XML files, there are limitations on the
    usage of some characters not accepted by the XML format (such as the lower than
    sign (`<`)). When these characters are needed – for example, to describe JavaScript
    expressions – escaped alternatives need to be used.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 由于QWeb模板是写在XML文件中的，因此对某些不被XML格式接受的字符（如小于号`<`）的使用有限制。当需要这些字符时——例如，用于描述JavaScript表达式——需要使用转义替代字符。
- en: 'These are the alternative symbols that are available for inequality operations:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是可用于不等式操作的替代符号：
- en: '`&lt;` is for less than (`<`).'
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&lt;`表示小于（`<`）。'
- en: '`&lt;=` is for less than or equal to (`<=`).'
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&lt;=`表示小于或等于（`<=`）。'
- en: '`&gt;` is for greater than (`>`).'
  id: totrans-219
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&gt;`表示大于（`>`）。'
- en: '`&gt;=` is for greater than or equal to (`>=`).'
  id: totrans-220
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`&gt;=`表示大于或等于（`>=`）。'
- en: The preceding comparison symbols are not specific to Odoo and are part of the
    XML format standards.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的比较符号不是Odoo特有的，而是XML格式标准的一部分。
- en: The previous symbols can be used in QWeb evaluated expressions, and they are
    often used to calculate text to render for the `t-out` directive, which we will
    describe in the following section.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的符号可以在QWeb评估表达式中使用，并且它们通常用于计算`t-out`指令要渲染的文本，我们将在下一节中描述。
- en: Using t-out to render values
  id: totrans-223
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`t-out`指令渲染值
- en: The `<field>` element is available to render field values, with the advantage
    of Odoo taking care of properly formatting the output for us. But this has the
    limitation of only displaying the field content.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '`<field>`元素可用于渲染字段值，其优点是Odoo会为我们正确格式化输出。但这个限制是只能显示字段内容。'
- en: 'However, the `t-out` directive can render the result of a code expression as
    an HTML-escaped value:'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，`t-out`指令可以渲染代码表达式的结果作为HTML转义值：
- en: '[PRE17]'
  id: totrans-226
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The preceding code renders the result of a JavaScript expression. The `record`
    represents the record retrieved from the Odoo server and provides access to the
    fields. The `value` property returns properly formatted content, as returned by
    a `<field>` element. The `raw_value` property returns the unformatted native value.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码渲染了JavaScript表达式的结果。`record`代表从Odoo服务器检索的记录，并提供对字段的访问。`value`属性返回正确格式化的内容，就像`<field>`元素返回的那样。`raw_value`属性返回未格式化的原生值。
- en: Changes in Odoo 15
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 15的变化
- en: The `t-out` directive was introduced in `t-esc` directive, used until `t-raw`
    directive was also discontinued. This was previously used to render the raw value
    without escaping any HTML, and using it carries security risks.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-out`指令是在`t-esc`指令中引入的，直到`t-raw`指令也被弃用。它之前被用来渲染原始值而不进行HTML转义，使用它存在安全风险。'
- en: Using t-set to assign values to variables
  id: totrans-230
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`t-set`指令为变量赋值
- en: For more complex logic, the result of an expression can be stored into a variable
    to use later in the template. This is to be done using the `t-set` directive for
    the variable name to be set, followed by the `t-value` directive with the expression
    to calculate the value to be assigned.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 对于更复杂的逻辑，表达式的结果可以存储到变量中，以便在模板中稍后使用。这需要使用`t-set`指令来设置变量名称，然后使用`t-value`指令来计算要分配的值。
- en: 'As an example, the following code renders the title in red if the request has
    no lines yet. It uses a `red_or_black` variable for the CSS class to use, shown
    as follows:'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，以下代码在请求还没有行时将标题渲染为红色。它使用`red_or_black`变量作为要使用的CSS类，如下所示：
- en: '[PRE18]'
  id: totrans-233
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The previous example has a code expression using the `num_books` field, so we
    need to ensure it is loaded by adding a `<field name="num_books" />` element inside
    the `<kanban>` top element.
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例中有一个使用`num_books`字段的代码表达式，因此我们需要确保它通过在`<kanban>`顶部元素内添加`<field name="num_books"
    />`元素来加载。
- en: 'Variables can also be assigned HTML content, as in the following example:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 变量也可以分配HTML内容，如下例所示：
- en: '[PRE19]'
  id: totrans-236
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The previous code assigns the HTML inside to the `calendar_sign` variable and
    then renders it using the `t-out` directive.
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码将HTML内容分配给`calendar_sign`变量，然后使用`t-out`指令进行渲染。
- en: Using t-attf- for string substitution of dynamic attributes
  id: totrans-238
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用`t-attf-`进行动态属性字符串替换
- en: Our kanban card is using the `t-attf-` QWeb directive to dynamically set a class
    in the top `<div>` element so that the card color depends on the `color` field
    value. For this, the `t-attf-` QWeb directive was used.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 我们的看板卡片使用`t-attf-` QWeb指令在顶部的`<div>`元素中动态设置一个类，这样卡片颜色就取决于`color`字段值。为此，使用了`t-attf-`
    QWeb指令。
- en: The `t-attf-` directive dynamically generates tag attributes using string substitution.
    This allows for parts of larger strings to be generated dynamically, such as URLs
    or CSS class names.
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-attf-`指令通过字符串替换动态生成标签属性。这允许动态生成较大字符串的部分，例如URL或CSS类名。'
- en: The directive looks for expression blocks that will be evaluated and replaced
    by the results. These are delimited either by `{{` and `}}` or by `#{` and `}`.
    The content of the blocks can be any valid JavaScript expression and can use any
    of the variables available for QWeb expressions, such as `record` and `widget`.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 指令寻找将被评估并替换为结果的代码块。这些块由`{{`和`}}`或`#{`和`}`分隔。块的内容可以是任何有效的JavaScript表达式，并且可以使用QWeb表达式可用的任何变量，例如`record`和`widget`。
- en: In this case, the `kanban_color()` JavaScript function was used. This is specifically
    provided to map color index numbers into the CSS class color names.
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 在这种情况下，使用了`kanban_color()` JavaScript函数。这是专门提供的，用于将颜色索引数字映射到CSS类颜色名称。
- en: 'As an elaborate example, this directive will be used to dynamically change
    the color of the request date to be in red letters if the priority is high. For
    this, the `<field name="request_date"/>` element in the kanban card should be
    replaced with the following:'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 作为详细示例，这个指令将被用来动态改变请求日期的颜色，如果优先级高，则显示为红色字母。为此，看板卡片中的`<field name="request_date"/>`元素应替换为以下内容：
- en: '[PRE20]'
  id: totrans-244
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: This results in either `class="oe_kanban_text_red"` or `class="oe_kanban_text_black"`,
    depending on the priority value. This is evaluated dynamically – that means that
    when the user clicks on the priority widget to change it, the date color will
    immediately change.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 这将导致`class="oe_kanban_text_red"`或`class="oe_kanban_text_black"`，具体取决于优先级值。这是动态评估的——这意味着当用户点击优先级小部件更改它时，日期颜色会立即改变。
- en: Using t-att- for expressions calculated by dynamic attributes
  id: totrans-246
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用t-att-动态属性计算表达式
- en: The `t-att-` QWeb directive can dynamically generate an attribute value from
    an expression evaluation.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-att-` QWeb指令可以从表达式评估中动态生成一个属性值。'
- en: 'For example, the formatting effect from the previous section that used the
    `t-attf-` attribute could alternatively be implemented using `t-att-`. The following
    code shows this alternative implementation:'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，之前章节中使用的`t-attf-`属性产生的格式化效果，也可以使用`t-att-`来实现。以下代码展示了这种替代实现：
- en: '[PRE21]'
  id: totrans-249
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: When the expression evaluates to a false-equivalent value, the attribute is
    not rendered at all. This is important for special HTML attributes such as the
    `checked` input field.
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 当表达式评估为假等价值时，属性根本不会渲染。这对于特殊的HTML属性，如`checked`输入字段非常重要。
- en: Using t-foreach for loops
  id: totrans-251
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用t-foreach循环
- en: Iterating through loops is useful to repeat a particular HTML block. For this,
    the `t-foreach` directive is used with an expression returning an iterable value.
    It needs to be accompanied by a `t-as` directive, which sets the variable name
    for the iteration value.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 遍历循环对于重复特定的HTML块很有用。为此，使用`t-foreach`指令与返回可迭代值的表达式一起使用。它需要伴随一个`t-as`指令，该指令设置迭代值的变量名。
- en: This could be used to present the book titles requested in the checkout. This
    requires a loop on the `lines_ids` field.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以用来展示在结账时请求的书籍标题。这需要在`lines_ids`字段上循环。
- en: 'Note that the accessible values for the `line_ids` elements are database IDs
    and not record objects. This can be confirmed by adding the following code in
    the `<!-- Other content area -->` area:'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，`line_ids`元素的可用值是数据库ID，而不是记录对象。这可以通过在`<!-- 其他内容区域 -->`区域添加以下代码来确认：
- en: '[PRE22]'
  id: totrans-255
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'The `t-foreach` directive accepts a JavaScript expression evaluating to a collection
    to iterate. `record.<field>.value` returns a representation of a string for the
    field value, and `record.<field>.raw_value` returns the database-stored values.
    For a to-many field, this is a list of IDS:'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-foreach`指令接受一个评估为集合的JavaScript表达式，用于迭代。`record.<field>.value`返回字段值的字符串表示，而`record.<field>.raw_value`返回数据库存储的值。对于多对多字段，这是一个ID列表：'
- en: The `t-as` directive sets the variable name to be used to refer to each iteration
    value.
  id: totrans-257
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t-as`指令设置用于引用每个迭代值的变量名。'
- en: The `t-out` directive evaluates the provided expression – in this case, just
    the `line` variable name – and renders safely escaped HTML.
  id: totrans-258
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`t-out`指令评估提供的表达式——在这种情况下，只是`line`变量名——并安全地渲染转义后的HTML。'
- en: 'Presenting the record IDs is not very interesting. However, we do have a JavaScript
    function available to retrieve an image for an ID: `kanban_image()`.'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 展示记录ID并不很有趣。然而，我们有一个JavaScript函数可以用来获取ID的图片：`kanban_image()`。
- en: 'To use this, first, the checkout lines need to support an image. For this,
    the `models/library_checkout_line.py` file should be edited to add a field for
    the book cover image:'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用这个功能，首先，结账行需要支持图片。为此，需要编辑`models/library_checkout_line.py`文件，添加一个用于书封图片的字段：
- en: '[PRE23]'
  id: totrans-261
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'Now, this field can be used in the kanban card:'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，这个字段可以在看板卡片中使用：
- en: '[PRE24]'
  id: totrans-263
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: The previous code renders an image for the book title in each checkout line.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码在每个结账行中渲染书籍标题的图片。
- en: If there are many lines, this might be too much content for the kanban card.
    Since the `t-foreach` object is a JavaScript expression, it can use additional
    syntax to limit the number of the allowed cover thumbnails. JavaScript arrays
    have a `slice()` method to extract a subset of elements.
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: 如果有很多行，这可能对于看板卡片来说内容太多。由于`t-foreach`对象是一个JavaScript表达式，它可以使用额外的语法来限制允许的封面缩略图的数目。JavaScript数组有一个`slice()`方法来提取元素子集。
- en: 'This can be used to limit the number to the first five elements by using the
    following variation of the `for` loop:'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: 这可以通过以下 `for` 循环的变体来限制数量为前五个元素：
- en: '[PRE25]'
  id: totrans-267
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: The `for` loops have a few helper variables available. These variables are automatically
    generated and are prefixed by the variable name defined in `t-as`.
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: '`for` 循环有一些辅助变量可用。这些变量是自动生成的，并且以前面定义的变量名作为前缀。'
- en: 'If `t-as="rec"` is used, where `rec` is set as the variable name, the helper
    variables would be as follows:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 如果使用 `t-as="rec"`，其中 `rec` 被设置为变量名，辅助变量如下：
- en: '`rec_index`: This is the iteration index, starting from zero.'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_index`：这是迭代索引，从零开始。'
- en: '`rec_size`: This is the number of elements of the collection.'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_size`：这是集合中元素的数量。'
- en: '`rec_first`: This is true on the first element of the iteration.'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_first`：在迭代的第一个元素上为 `true`。'
- en: '`rec_last`: This is true on the last element of the iteration.'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_last`：在迭代的最后一个元素上为 `true`。'
- en: '`rec_even`: This is true on even indexes.'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_even`：在偶数索引上为 `true`。'
- en: '`rec_odd`: This is true on odd indexes.'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_odd`：在奇数索引上为 `true`。'
- en: '`rec_parity`: This is either `odd` or `even`, depending on the current index.'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_parity`：这可以是 `odd` 或 `even`，具体取决于当前索引。'
- en: '`rec_all`: This represents the object being iterated over.'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_all`：这代表正在迭代的对象。'
- en: '`rec_value`: This holds the value when iterating through a `{key:value}` dictionary
    (`rec` holds the key name).'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`rec_value`：在迭代 `{key:value}` 字典（`rec` 保留键名）时持有值。'
- en: 'For example, when presenting a list of comma-separated values, we would like
    to avoid a trailing comma. Avoiding rendering it on the last iteration is easy
    with the help of the `_last` loop variable. Here is an example of this:'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，当呈现一个以逗号分隔的值列表时，我们希望避免在最后一个迭代中出现尾随逗号。借助 `_last` 循环变量，避免在最后一个迭代中渲染它很容易。以下是一个示例：
- en: '[PRE26]'
  id: totrans-280
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: The `rec_last` variable is `true` on the last record. Negating it with `!rec_last`
    enables printing the comma on all iterations except the last one.
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`rec_last` 变量在最后一个记录上为 `true`。通过使用 `!rec_last` 取反，可以在除了最后一个迭代之外的所有迭代中打印逗号。'
- en: Using t-if to apply conditions
  id: totrans-282
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 t-if 应用条件
- en: The `t-if` directive expects an expression to be evaluated in JavaScript when
    rendering kanban views on the client side. The tag and its content will be rendered
    only if the condition evaluates to `true`.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-if` 指令期望在客户端渲染看板视图时，在 JavaScript 中评估一个表达式。只有当条件评估为 `true` 时，标签及其内容才会被渲染。'
- en: In our example, it was used in the checkout kanban view to have menu options
    available depending on some conditions.
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，它在结账看板视图中被用来根据某些条件提供菜单选项。
- en: 'To take another example, we can display the checkout number of books borrowed,
    but only if the view has any lines. This can be confirmed by adding the following
    code in the `<!-- Other content area -->` area:'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 再举一个例子，我们可以显示借阅的书籍的结账编号，但仅当视图有任何行时。这可以通过在 `<!-- 其他内容区域 -->` 区域添加以下代码来确认：
- en: '[PRE27]'
  id: totrans-286
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, we used a `t-if="<expression>">` attribute to render an element and its
    content only when the expression used evaluated to `true`. Notice that the condition
    expression uses the `&gt;` symbol instead of `>` to represent the greater-than
    operation.
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，我们使用了一个 `t-if="<expression>">` 属性来渲染一个元素及其内容，仅当使用的表达式评估为 `true` 时。注意，条件表达式使用
    `&gt;` 符号而不是 `>` 来表示大于操作。
- en: 'The `else if` and `else` conditions are also supported with the `t-elif` and
    `t-else` directives. Here is an example of their use:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`else if` 和 `else` 条件也支持使用 `t-elif` 和 `t-else` 指令。以下是一个使用示例：'
- en: '[PRE28]'
  id: totrans-289
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: These conditions are useful to render particular elements on particular cases.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这些条件对于在特定情况下渲染特定元素非常有用。
- en: Another useful feature is the ability to decompose templates into smaller reusable
    snippets that can be included using `t-call`. The following section explains how
    this works.
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 另一个有用的功能是能够将模板分解成更小的可重用片段，这些片段可以使用 `t-call` 包含。以下部分解释了这是如何工作的。
- en: Using t-call to call and reuse templates
  id: totrans-292
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用 t-call 调用和重用模板
- en: Instead of repeating the same HTML blocks over and over again, building blocks
    can be used to compose more complex user interface views. QWeb templates can be
    used as reusable HTML snippets that are inserted into other templates.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 而不是反复重复相同的 HTML 块，可以使用构建块来组合更复杂的用户界面视图。QWeb 模板可以用作可重用的 HTML 片段，这些片段可以插入到其他模板中。
- en: Reusable templates are defined inside the `<templates>` tag and identified by
    a top element with `t-name` other than `kanban-box`. These other templates can
    then be included using the `t-call` directive. This is true for the templates
    declared in the same kanban view, somewhere else in the same addon module, or
    even in a different addon.
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: 可重用模板定义在 `<templates>` 标签内，并由具有 `t-name` 属性且不同于 `kanban-box` 的顶级元素标识。然后可以使用
    `t-call` 指令包含这些其他模板。这适用于在同一看板视图中声明的模板，在同一插件模块的其他地方，甚至在不同的插件中。
- en: 'As an example, the book cover list could be isolated in a reusable snippet.
    For this, another template can be added in the `<templates>` element after the
    `<t t-name="kanban-box">` node, as shown in the following example:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，可以将封面列表隔离在可重用的片段中。为此，可以在 `<t t-name="kanban-box">` 节点之后在 `<templates>` 元素中添加另一个模板，如下面的示例所示：
- en: '[PRE29]'
  id: totrans-296
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'Then, the `t-call` directive can be used to call this template in the `kanban-box`
    main template:'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，可以使用 `t-call` 指令在 `kanban-box` 主模板中调用此模板：
- en: '[PRE30]'
  id: totrans-298
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: To call templates defined in other addon modules, the `module.name` full identifier
    must be used, in a similar way to what happens with other views. For instance,
    this snippet can be referred to in another module using the `library_checkout.book_covers`
    full identifier.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 要调用在其他插件模块中定义的模板，必须使用 `module.name` 完整标识符，类似于其他视图发生的方式。例如，此片段可以使用 `library_checkout.book_covers`
    完整标识符在其他模块中引用。
- en: The called template runs in the same context as the caller, so any variable
    names available in the caller are also available when processing the called template.
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 被调用的模板在相同的上下文中运行，因此调用者中可用的任何变量名在处理被调用的模板时也是可用的。
- en: A more elegant alternative is to pass arguments to the called template. This
    is done by setting variables inside the `t-call` tag. These will be evaluated
    and made available in the sub-template context only, and they won't exist in the
    caller context.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 一个更优雅的替代方案是将参数传递给被调用的模板。这是通过在 `t-call` 标签内设置变量来完成的。这些变量将仅在子模板上下文中评估和可用，而在调用者上下文中不存在。
- en: 'As an example, the `books_cover` template could have an argument to set the
    maximum number of covers to display instead of being hardcoded in the sub-template.
    First, the `book_covers` template should be edited to replace the fixed limit
    with a variable, such as `limit`:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，`books_cover` 模板可以有一个参数来设置要显示的最大封面数，而不是在子模板中硬编码。首先，应该编辑 `book_covers` 模板，将固定限制替换为变量，例如
    `limit`：
- en: '[PRE31]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'Now, `t-call` must set this variable using a nested `t-set` directive, as shown
    in the following code:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，`t-call` 必须使用嵌套的 `t-set` 指令来设置此变量，如下面的代码所示：
- en: '[PRE32]'
  id: totrans-305
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: The entire content inside the `t-call` element is also available to the sub-template
    through the `0` magic variable. Instead of argument variables, an HTML code fragment
    could be added inside the `t-call` element, and then it could be used in the called
    template with `<t t-out="0" />`. This is especially useful for building layouts
    and combining/nesting QWeb templates in a modular way.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-call` 元素内的整个内容也通过 `0` 魔术变量对子模板可用。而不是参数变量，可以在 `t-call` 元素内添加 HTML 代码片段，然后可以在被调用的模板中使用
    `<t t-out="0" />` 来使用它。这对于构建布局以及以模块化方式组合/嵌套 QWeb 模板特别有用。'
- en: Using dictionaries and lists to dynamically set attributes
  id: totrans-307
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用字典和列表动态设置属性
- en: We've gone through the most important QWeb directives, but there are a few more
    to be aware of. Now, we'll give a short explanation of them.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经介绍了最重要的 QWeb 指令，但还有一些需要了解。现在，我们将简要解释它们。
- en: Here, the `t-att-NAME` and `t-attf-NAME` style dynamic tag attributes were introduced.
    Additionally, the fixed `t-att` directive can be used. It accepts either a key-value
    dictionary mapping or a pair (that is, a two-element list).
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，引入了 `t-att-NAME` 和 `t-attf-NAME` 风格的动态标签属性。此外，还可以使用固定的 `t-att` 指令。它接受键值映射字典或一对（即，一个两元素列表）。
- en: 'For example, consider the following mapping:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，考虑以下映射：
- en: '[PRE33]'
  id: totrans-311
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'The preceding code produces this result:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生以下结果：
- en: '[PRE34]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: '`t-att` can also work with a list or with pairs of values. For example, consider
    the following:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`t-att` 也可以与列表或值对一起工作。例如，考虑以下：'
- en: '[PRE35]'
  id: totrans-315
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: 'The preceding code produces this result:'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 上述代码产生以下结果：
- en: '[PRE36]'
  id: totrans-317
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: These special ways to assign attributes to elements can be useful in cases where
    there is some server-side processing, and a resulting dictionary or list can be
    used on a single `t-att` element to be applied on a template element.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 这些特殊方式为元素分配属性在存在一些服务器端处理的情况下可能很有用，并且可以使用结果字典或列表在单个 `t-att` 元素上应用模板元素。
- en: This completes a reasonable overview of the QWeb template language with a special
    focus on kanban view applications, although the QWeb language is also used on
    the server side – for example, it can be used for reports and website pages.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
- en: Not surprisingly, QWeb templates provide an extension mechanism. We will explore
    this in the next section.
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
- en: Extending kanban views
  id: totrans-321
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The templates used in kanban views and reports can be extended in the same
    way other view types are extended: that is, declare the element to match, possibly
    using an XPath expression, and use the position attribute to set what the extensions
    should do (for example, add the new elements after of before the matched element).
    These techniques are explained in detail in [*Chapter 4*](B16119_04_Final_PD_ePub.xhtml#_idTextAnchor119),
    *Extending Modules*.'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
- en: In practice, kanban views and QWeb templates are more complex than the regular
    form view, and matching the elements to extend can be tricky.
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
- en: 'Using `<field>` elements as selectors can be difficult. It is common for the
    same field name to be included more than once in a kanban view: at the beginning,
    in the field list to load, and then again inside the kanban box template. Since
    the selector will match the first field element found, the modification won''t
    be applied inside the template, as intended.'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
- en: For example, the `//t[@t-name='kanban-box']//field[@name='name']` XPath expression
    locates any child elements matching `<t t-name="kanban-box">`, and then it finds
    any further child elements matching `<field name="name">`.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
- en: Another challenge is the frequent use of HTML elements with no clear identifier,
    such as `<div>` or `<span>`. In these cases, XPath expressions with non-trivial
    matching conditions are needed. For example, the `//div/t/img` XPath expression
    matches a `<div><t><img>` nested sequence of elements.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is an example that extends the `Contacts` kanban view:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-328
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: In the previous example, XPath looks for a `<field name="display_name">` element
    inside a `<t t-name="kanban-box">` element. This rules out the same field element
    outside of the `<templates>` section.
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
- en: For complex XPath expressions, some command-line tools can be helpful to explore
    the correct syntax to use.
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
- en: 'The `xmllint` command-line utility – from the `libxml2-utils` `--xpath` option
    to perform queries on XML files. Here is an example of using it:'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  id: totrans-332
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: 'Another option is the `xpath` command, from the `libxml-xpath-perl` Debian/Ubuntu
    package. Here is an example of using it:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  id: totrans-334
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: These tools can be useful to quickly try and test XPath expressions on an XML
    file.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
- en: Until now, you have seen how to create and extend kanban views. However, these
    can make use of additional JavaScript and CSS assets for effects. The next section
    explains how to add these components.
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
- en: Adding CSS and JavaScript assets
  id: totrans-337
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Kanban views are mostly HTML and make significant use of CSS classes. In this
    chapter, some standard CSS classes were introduced in the code examples, but modules
    can also provide their own CSS.
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
- en: The generally used convention is to have the asset files inside the `/static/src`
    subdirectory.
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: 通常使用的约定是将资产文件放在`/static/src`子目录中。
- en: Module web assets are declared in a `manifest` file in the `assets` key. This
    file is set with a dictionary that maps the assets bundle to be extended and the
    list of assets to add to it.
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: 模块Web资源在`assets`键中的`manifest`文件中声明。此文件使用一个字典设置，将资产包映射到要扩展的资产和要添加到其中的资产列表。
- en: This provides the tool to add web assets to an Odoo module, such as CSS and
    JavaScript assets. These web asset files provide a structured way to better provide
    user interface elements for a richer user experience.
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: 这提供了向Odoo模块添加Web资产（如CSS和JavaScript资产）的工具。这些Web资产文件提供了一种结构化的方式，以更好地提供用户界面元素，从而提供更丰富的用户体验。
- en: They can then be used in the module's QWeb templates, as discussed throughout
    the previous sections in this chapter.
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它们可以在本章前几节讨论的模块的QWeb模板中使用。
- en: 'Here is an example for the `library_checkout` addon module. Edit the `__manifest__.py`
    file to add the following:'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是`library_checkout`附加模块的一个示例。编辑`__manifest__.py`文件，添加以下内容：
- en: '[PRE40]'
  id: totrans-344
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: The previous code adds a CSS and JavaScript file to the `web.assets_backend`
    assets bundle.
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码向`web.assets_backend`资产包添加了CSS和JavaScript文件。
- en: 'The main asset bundles available are as follows:'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的主要资产包如下：
- en: '`web.assets_common`: This contains the assets common to the web client, website,
    and also the point of sale.'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_common`：这包含Web客户端、网站以及销售点的通用资产。'
- en: '`web.assets_backend`: This contains the assets specific to the backend web
    client.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_backend`：这包含特定于后端Web客户端的资产。'
- en: '`web.assets_frontend`: This contains the assets to be made available for the
    public website.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`web.assets_frontend`：这包含可供公共网站使用的资产。'
- en: The `assets` manifest key was introduced in Odoo 15\. For previous Odoo versions,
    assets were declared using XML template inheritance. We will explain this next.
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`assets`清单键是在Odoo 15中引入的。对于之前的Odoo版本，资产是通过XML模板继承声明的。我们将在下一节中解释这一点。'
- en: Adding assets before Odoo 15
  id: totrans-351
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在Odoo 15之前添加资产
- en: In previous Odoo versions, assets were added using an XML file that extends
    the asset bundle. The XML file doing this was usually placed inside the `views/`
    module subdirectory.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的Odoo版本中，资产是通过扩展资产包的XML文件添加的。执行此操作的XML文件通常放置在`views/`模块子目录中。
- en: 'The following example adds a CSS and JavaScript file to the `library_checkout`
    module. Add the `views/assets.xml` file with the following code:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例向`library_checkout`模块添加了CSS和JavaScript文件。添加`views/assets.xml`文件，并包含以下代码：
- en: '[PRE41]'
  id: totrans-354
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: As usual, this code should also be added to the `data` key in the `__manifest__.py`
    descriptor file.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 如同往常，此代码也应添加到`__manifest__.py`描述符文件的`data`键中。
- en: Summary
  id: totrans-356
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: This chapter covered kanban views and demonstrated how they can act as a powerful
    user interface tool. By now, you should understand kanban boards, and you are
    equipped with the techniques needed to design kanban views.
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: 本章涵盖了看板视图，并展示了它们如何作为强大的用户界面工具。到现在为止，你应该理解了看板板，并且你拥有了设计看板视图所需的技术。
- en: In this chapter, you also explored the QWeb template language that powers kanban
    views. With the help of the examples in this chapter, you should now know how
    to use its features.
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你还探索了驱动看板视图的QWeb模板语言。通过本章中的示例，你现在应该知道如何使用其功能。
- en: As is expected for Odoo, kanban views and QWeb templates can also be extended
    by other modules in a similar way to other view types. Having read this chapter,
    you know additional techniques to use this functionality on Kanban views.
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: 如Odoo所预期，看板视图和QWeb模板也可以以与其他视图类型类似的方式由其他模块扩展。阅读完本章后，你应该知道如何使用此功能在看板视图中使用额外的技术。
- en: Finally, we also discussed the use of CSS and JavaScript assets in advanced
    kanban views. We also looked at how these assets must be provided by the modules
    and must be added to the backend assets. You now know how to implement this.
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们还讨论了在高级看板视图中使用CSS和JavaScript资产。我们还探讨了这些资产必须由模块提供，并且必须添加到后端资产中。你现在知道如何实现这一点。
- en: The next chapter will continue exploring QWeb, but this time, we'll focus on
    the server side and see how to design printable reports.
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: 下一章将继续探索QWeb，但这次我们将关注服务器端，并了解如何设计可打印的报告。
- en: Further reading
  id: totrans-362
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'The following reference materials complement the topics discussed in this chapter:'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: 以下参考资料补充了本章讨论的主题：
- en: 'The official Odoo documentation on QWeb: https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 关于QWeb的官方Odoo文档：https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html
- en: 'The **Bootstrap** CSS documentation: https://getbootstrap.com/docs/4.1/getting-started/introduction/'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Bootstrap** CSS 文档：https://getbootstrap.com/docs/4.1/getting-started/introduction/'
- en: 'The **Font Awesome** icon index: https://fontawesome.com/v4.7.0/icons/'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Font Awesome** 图标索引：https://fontawesome.com/v4.7.0/icons/'
