- en: '[*Chapter 13*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379): Creating Web
    and Portal Frontend Features'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo is a business application framework, providing all the tools necessary
    to quickly build apps. A uniform web client provides the business user interface.
    But organizations are not isolated from the world. Being able to also interact
    with external users is needed to support efficient processes. For this, Odoo supports
    a web interface.
  prefs: []
  type: TYPE_NORMAL
- en: The internal user web client is sometimes referred to as the **backend**, and
    the external user interface as the **frontend**. The frontend provides **portal
    features**, accessible to portal user logins. It also provides public features,
    accessible without the need for a login, referred as **website features**.
  prefs: []
  type: TYPE_NORMAL
- en: The portal complements backend apps, providing self-service features to external
    users, such as viewing and paying for their orders, or submitting a support ticket.
  prefs: []
  type: TYPE_NORMAL
- en: The website features are built on top of the Odoo **Content Management System**
    (**CMS**), which allows you to build web pages, including easy-to-use *drag and
    drop* web page design tools. Additional website features are provided as **modules**,
    such as blogs, online jobs, or e-commerce.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, you will learn how to develop frontend add-on modules, leveraging
    the website features provided by Odoo, while discussing the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the library portal learning project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a frontend web page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Learning about web controllers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding portal features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: By the end of this chapter, you will have learned how to use web controllers
    and QWeb templates to create dynamic web pages, integrated into the Odoo frontend.
    Additionally, you will learn how to leverage the Odoo portal module, adding your
    features to it.
  prefs: []
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The work in this chapter requires the `library_checkout` add-on module, last
    edited in [*Chapter 11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324), *Kanban
    Views and Client-Side QWeb*. The add-on module and its dependencies code can be
    found in the Git repository at https://github.com/PacktPublishing/Odoo-15-Development-Essentials.
    The code in this chapter can be found in the same repository.
  prefs: []
  type: TYPE_NORMAL
- en: Introducing the library portal learning project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: To learn about Odoo web page development, a new project will be used. The library
    app can use self-service features for library members. Members can be assigned
    a user login to have access to their book checkout requests.
  prefs: []
  type: TYPE_NORMAL
- en: The `library_portal` add-on module will be created for these portal self-service
    features.
  prefs: []
  type: TYPE_NORMAL
- en: 'The first file to add is the manifest, `library_portal/__manifest__.py`, which
    you can create with the following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: The module depends on `library_checkout` to extend its features. It also depends
    on the `portal` module, providing the foundation for portal features. The `website`
    module provides CMS features, and can also be used for web page development. However,
    the `portal` modules can provide essential frontend features without the need
    to have the *Website* app installed.
  prefs: []
  type: TYPE_NORMAL
- en: The `data` key lists three XML files to be used. The first two are security
    related, and give portal users the access needed to be able to view the checkout
    requests. The last XML file will have the QWeb templates for the portal user interface.
  prefs: []
  type: TYPE_NORMAL
- en: An empty `library_portal/__init__.py` file is also needed for the module directory
    to be a valid Python module, as required by the Odoo framework.
  prefs: []
  type: TYPE_NORMAL
- en: Now that the new module has the essential files, the next step is to add the
    basic components needed to have a functioning web page.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a frontend web page
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To get started with the basics of Odoo web development, a simple web page will
    be created. To do this, two components are needed: a **web controller**, triggered
    when a particular URL is accessed, and a **QWeb template**, to generate the HTML
    to be presented by that URL.'
  prefs: []
  type: TYPE_NORMAL
- en: The web page used to showcase this is a book catalog, a simple list of the books
    in the library. The book catalog page will be accessible at `http://localhost:8069/library/catalog`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following screenshot provides an example of what should be seen:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.1 – Book catalog frontend web page'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.1_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.1 – Book catalog frontend web page
  prefs: []
  type: TYPE_NORMAL
- en: The first step is to add the web controller, which we will do in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a web controller
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Web controllers are Python objects, used to implement web features. They can
    link URL paths to an object method, so that when that URL is accessed, the method
    is executed.
  prefs: []
  type: TYPE_NORMAL
- en: For example, for the `http://localhost:8069/library/catalog` URL, the accessed
    path is `/library/catalog`.
  prefs: []
  type: TYPE_NORMAL
- en: A URL path, sometimes also called an `@http.route` method decorator in an `http.Controller`
    object.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the route for `/library/catalog`, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The controller Python code will be added in the `controllers` subdirectory.
    In the `library_portal` module directory, edit the `__init__.py` file to import
    that subdirectory:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `controllers/__init__.py` file to import the Python file with the controller
    code, which will be in a `main.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the actual controller file, `controllers/main.py`, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: Having done these steps, the controller component is done, and is able to process
    requests for the `/library/catalog` route.
  prefs: []
  type: TYPE_NORMAL
- en: The `odoo.http` module provides the Odoo web-related features. The web controllers,
    responsible for page rendering, should be objects inheriting from the `odoo.http.Controller`
    class. The actual name used for the class is not important. In the previous code,
    the controller class name is `Main()`.
  prefs: []
  type: TYPE_NORMAL
- en: The `catalog()` method, in the `Main()` class, is decorated with `@http.route`,
    binding it to one or more URL routes. Here, the `catalog()` method is triggered
    by the `/library/catalog route`. It also uses the `auth="public"` argument, meaning
    that this route is accessible without requiring authentication. And the `website=true`
    argument means that this page will use the web frontend layout, and ensures some
    needed additional variables are made available.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: Using `website=True` does not require the *Website* app to be installed. It
    also works with base Odoo frontend web pages.
  prefs: []
  type: TYPE_NORMAL
- en: These `catalog()` route method is expected to do some processing and then return
    the HTML page to the user's web browser.
  prefs: []
  type: TYPE_NORMAL
- en: The `http.request` object is automatically set with the web request, and has
    available the `.env` attribute, to access the Odoo environment. This can be used
    to instantiate Odoo models. The example code does this to access the `library.book`
    model and then build a record set with all books available.
  prefs: []
  type: TYPE_NORMAL
- en: The route method runs as the user who is logged in, or as the Public special
    user if no user is logged in and the route allows public access. Since the Public
    user has very limited access, `sudo()` might be needed to ensure that the data
    to be presented can be retrieved.
  prefs: []
  type: TYPE_NORMAL
- en: The final line returns the result of `http.request.render()`. This prepares
    a QWeb template to be rendered. The two arguments are the template XML ID, `library_portal.book_catalog`
    in this case, and a dictionary with the variables to make available to the QWeb
    rendering context. In this case, a `books` variable is made available, set with
    a books record set.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: The `http.request.render()` function returns a Odoo `http.response` object,
    containing the instructions on what to render. The actual processing of the QWeb
    template into HTML is delayed until all web controller code is run and the response
    is ready to be sent to the client. This allows for the route method to be extended
    and, for example, the `qcontext` attribute, holding the dictionary to be used
    for the QWeb rendering, to be modified.
  prefs: []
  type: TYPE_NORMAL
- en: The controller is ready, but the QWeb template used needs to be created before
    it can work. The next section takes care of that.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a QWeb template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: QWeb templates are XML snippets containing HTML code and QWeb directives that
    can dynamically modify the output depending on conditions. The book catalog web
    page needs a QWeb template to render the HTML to be presented.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add the `library_portal.book_catalog` QWeb template, perform the following
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'A new XML data file, `views/main_templates.xml`, will be used to declare the
    template. Add that to the `__manifest__.py` module file, in the `data` key:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the XML data file with the QWeb template, `views/main_templates.xml`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This completes the steps needed to get the QWeb template ready.
  prefs: []
  type: TYPE_NORMAL
- en: The previous code declares the `book_catalog` template. It is a Bootstrap table,
    with three columns. The `<thead>` section declares the columns headers, and the
    `<t t-foreach>` QWeb directive renders a table row for each book in the `books`
    record set.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: QWeb templates are XML. The XML language has stricter rules than regular HTML,
    which, for example, tolerates opening tags that are not closed. This is not allowed
    in XML, and therefore in QWeb templates. To be precise, QWeb templates follow
    the XHTML requirements.
  prefs: []
  type: TYPE_NORMAL
- en: Important in this template is the first directive, `<t t-call="web.frontend_layout">`.
    This is what makes the template HTML be rendered as an Odoo frontend web page,
    including page headers and footers. For this layout to be used, the controller
    route must include the `website=True` argument.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: The website data passed into the QWeb evaluation context is set by the `_prepare_qcontext`
    method of the `ir.ui.view` model. For example, the `website` module adds variables
    to it, in the `models/ir_ui_view.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: '`<t t-set="title">` is also noteworthy. It is used by the frontend layout to
    set the browser tab title.'
  prefs: []
  type: TYPE_NORMAL
- en: When we have both the controller and the QWeb template in place, once the `library_portal`
    module is installed or upgraded, opening `http://localhost:8069/library/catalog`
    with a web browser should display a table with the library's books.
  prefs: []
  type: TYPE_NORMAL
- en: These are the key components used to implement frontend web pages. Note that
    the *Website* app can be used to have more frontend features available, but is
    not required.
  prefs: []
  type: TYPE_NORMAL
- en: Being a web page, it may also need to use additional assets. The next section
    explains this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding CSS and JavaScript assets
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: When designing web pages, the HTML code is often complemented with CSS or JavaScript,
    which are best provided as additional assets.
  prefs: []
  type: TYPE_NORMAL
- en: Assets to load are declared in the head section of the page. Odoo has specific
    QWeb templates in charge of loading assets. In particular, the `web.assets_backend`
    and `web.assets_frontend` provide the assets needed specifically for backend web
    client and frontend web pages. `web.assets_common` provides assets common to both.
  prefs: []
  type: TYPE_NORMAL
- en: To have additional assets loaded, the appropriate template needs to be extended.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in the book catalog page, the title could be presented using a
    larger font size. This can be done by declaring a style in a CSS file, which is
    then used in the `<h1>` element. In fact, the book catalog QWeb template is already
    using `<h1 class="h1-book-catalog">`, applying a custom style.
  prefs: []
  type: TYPE_NORMAL
- en: 'To add this custom style, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `static/src/css/library.css` file with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This CSS must be loaded by frontend web pages. For this, the `web.assets_frontend`
    template should be extended. Add to the `__manifest__.py` file the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This describes how a module can add web assets. These assets will usually be
    `.js`, `.css`, or `.scss` files.
  prefs: []
  type: TYPE_NORMAL
- en: Changes in Odoo 15
  prefs: []
  type: TYPE_NORMAL
- en: Web assets were previously added using an XML file, extending an QWeb template,
    such as `web.assets_backend` or `web.assets_frontend`. An example for this is
    provided in [*Chapter 11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324), *Kanban
    Views and Client-Side QWeb*, in the *Adding CSS and JavaScript assets* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The basics for creating a frontend web page have been described, and involve
    three key components: web controllers, QWeb templates, and web assets.'
  prefs: []
  type: TYPE_NORMAL
- en: QWeb templates and their syntax have been thoroughly described in [*Chapter
    11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324), *Kanban Views and Client-Side
    QWeb*, and [*Chapter 12*](B16119_12_Final_PD_ePub.xhtml#_idTextAnchor358), *Creating
    Printable PDF Reports with Server-Side QWeb*.
  prefs: []
  type: TYPE_NORMAL
- en: But web controllers are worth more attention, and a deeper description of their
    features. The following section will provide this.
  prefs: []
  type: TYPE_NORMAL
- en: Understanding web controllers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Web controllers are the server-side components responsible for responding when
    an Odoo web path is accessed, usually triggering the rendering of a web page.
  prefs: []
  type: TYPE_NORMAL
- en: A web path, such as `/library/catalog`, is assigned to a route, triggering a
    `request` object, and the result is a `response` object, with the details to return
    to the client.
  prefs: []
  type: TYPE_NORMAL
- en: Declaring routes
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `http.route` decorator is used to assign a method to a web path. These
    are the arguments available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`route`, usually provided as a positional argument, is a string, or a list
    of strings, with the paths to map. Method arguments can be extracted from the
    path. The syntax to express these arguments is detailed in the next section.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`type`, to specify the type of request. By default, this is `http`, and can
    also be set to `json`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auth` is the authentication type required. It can be one of `user`, `public`,
    or `none`. The `user` option requires a login to allow access, `public` allows
    anonymous access, through the public user, and `none` is useful in special cases,
    where an Odoo database is not needed, such as authentication endpoints.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These are the arguments that can be used on `route` decorators. The next section
    explains the syntax to extract values from the main argument, to be passed to
    the decorated method.
  prefs: []
  type: TYPE_NORMAL
- en: Extracting argument values from the route string
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `<type:name>`. For example, `<int:partner_id>` extracts an integer value,
    and passes it to the method as the `partner_id` keyword argument. Record instances
    are also supported, using the `model(<model name>)` syntax. For example, `<model('res.partner'):partner>`
    extracts a partner record, passed to the method with the `partner` keyword argument.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: More information on route path formatting can be found in the official Werkzeug
    documentation at [https://werkzeug.palletsprojects.com/routing/](https://werkzeug.palletsprojects.com/routing/).
  prefs: []
  type: TYPE_NORMAL
- en: The URL parameters are passed to the decorated method as keyword arguments.
    These parameters are after the `?` character in a `GET` request, or submitted
    by a `POST` request. For example, the `http://localhost:8069/mypage``x` set to
    `1` and `y` set to `2`.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: Adding to routed methods the `**kw` generic keyword argument capture prevents
    it from erroring if an unexpected argument is added to the URL. For example, without
    it, accessing `http://localhost:8069/library/catalog``**kw` on the method arguments,
    it would be captured in the `kw` variable, and could be ignored by the method
    code.
  prefs: []
  type: TYPE_NORMAL
- en: 'The routed method return value can be any of the following:'
  prefs: []
  type: TYPE_NORMAL
- en: A **falsy** value, resulting in a *204 No Content* HTTP code response.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A text string, used to return a response with that text as the HTML content.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A `response` object, usually created with the `render()` method.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Next, let's learn how the `request` object can be used in a routed method.
  prefs: []
  type: TYPE_NORMAL
- en: Using the request object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A `request` object is automatically instanced when a client web request is made
    to the Odoo server. It is made available by importing `odoo.http.request`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following are the most important attributes provided by this object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`env` is an Odoo `Environment` object, similar to what `self.env` provides
    in regular model methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`context` is a dictionary-like `Mapping` object with the execution context.
    It is similar to model method context.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cr` is a PostgreSQL cursor object for the Odoo database.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`db` is the database name.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`session` is an object storing the session details, including authentication.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`params` stores the request parameters. It is usually not useful, since the
    parameters are already provided as arguments to the method.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`csrf_token(time_limit=None)` is a method to generate a CSRF token for the
    current session. The `time_limit` is the token validity period in seconds. The
    default, `None`, makes it valid for the whole session duration. This attribute
    is used, for example, to set a CSRF token for HTML forms.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'For `http` type requests, the following methods are also available:'
  prefs: []
  type: TYPE_NORMAL
- en: '`make_response(data, headers=None, cookies=None)` can be used to craft non-HTML
    responses.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`not_found(description=None)` returns a *404 Not Found* HTTP code.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render(template, qcontext=None, lazy=True, **kw)` returns a QWeb template
    to render. The actual template rendering is delayed until the final dispatch to
    the client, and so it can be modified by inheriting methods.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Request objects provide a way to access the Odoo environment and all the information
    about the request made by the client. The next relevant object to understand is
    the `response`, to be sent back to the client initiating the request.
  prefs: []
  type: TYPE_NORMAL
- en: Using the response object
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The `response` object is used to dispatch the final HTTP message to send to
    the client. When extending routed methods, it might be the case that the `response`
    returned by the parent `super()` method needs modifications.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following is available on the `response` object:'
  prefs: []
  type: TYPE_NORMAL
- en: '`template` is the name of the template to render.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`qcontext` is a dictionary with the data to make available for the template
    rendering.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`uid` is an integer with the ID of the user rendering the template. If not
    set, the current user running the method code is used.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`render()` is the same rendering method also available in the `request` object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`flatten()` forces the rendering of the template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The response object also supports the parameters provided by the parent library,
    `werkzeug.wrappers.Response`. The corresponding documentation can be found at
    [https://werkzeug.palletsprojects.com/wrappers/#werkzeug.wrappers.Response](https://werkzeug.palletsprojects.com/wrappers/#werkzeug.wrappers.Response).
  prefs: []
  type: TYPE_NORMAL
- en: You now have a good idea about the web development components. Odoo also provides
    a portal useful to interact with external users and the next section explains
    how to add features to it.
  prefs: []
  type: TYPE_NORMAL
- en: Adding portal features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Odoo portal feature make information available to interact with external
    users. Different apps can add features to the portal. For example, the **Sales**
    app adds the ability for customers to check their orders, and even pay for them.
  prefs: []
  type: TYPE_NORMAL
- en: 'Portal users need to be created, providing access to the portal. This is done
    on the corresponding contact record in the **Action** context menu, with the **Grant
    portal access** option, as shown in *Figure 13.2*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.2 – The Grant portal access option on a contact record'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.2_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.2 – The Grant portal access option on a contact record
  prefs: []
  type: TYPE_NORMAL
- en: Once the user goes through the sign-up process, they can log in to Odoo and
    see a **My Account** option when clicking on the username in the top right corner.
    This option opens the portal home page, presenting a summary of all the documents
    available to the user.
  prefs: []
  type: TYPE_NORMAL
- en: 'The documents available depend on the apps installed. *Figure 13.3* shows an
    example of what the portal home page looks like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.3 – Portal page with book checkouts feature'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.3_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.3 – Portal page with book checkouts feature
  prefs: []
  type: TYPE_NORMAL
- en: The `library_portal` module adds the **Book Checkouts** item to the portal **Documents**,
    as seen in *Figure 13.3*. This is the result of what will be implemented in this
    section.
  prefs: []
  type: TYPE_NORMAL
- en: 'The work for this will be split into three parts: access security, controllers,
    and QWeb templates. Each of the following sections will address one of these steps.
    You will start by setting the portal access security configuration.'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring access security for the portal users
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Before portal users can access app data, the necessary access rights need to
    be given to the portal user group, `base.group_portal group`.
  prefs: []
  type: TYPE_NORMAL
- en: In the case of the library app, portal users should be given read-only access
    to the book, member, checkout, and stage models. Furthermore, each portal user
    should only be able to see their own member record and checkouts. For this, both
    access rights and record rules need to be added.
  prefs: []
  type: TYPE_NORMAL
- en: 'To configure the access security for portal users, perform the following steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create the `security/ir.model.access.csv` file, adding read access to the library
    models, with the following content:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Create the `security/library_security.xml` file with **record rules**, limiting
    the records portal that users will be able to access:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Finally, add these data files to the `data` key in the module `__manifest__.py`
    file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The record rules created apply filters based on the current user partner record,
    `user.partner_id.id`. The members are filtered using the `partner_id` field, and
    the checkouts are filtered using the `member_id.partner_id` field.
  prefs: []
  type: TYPE_NORMAL
- en: After this, and a module upgrade, portal users will have the access rights needed
    to use the library portal pages.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs: []
  type: TYPE_NORMAL
- en: It is often the case that web controllers avoid the need to have access rights
    added, by using `sudo()` to get elevated access, which is sure to have access
    to the data. While convenient, the usage of `sudo()` should be carefully considered,
    and avoided if possible. It is more secure to implement access security on the
    model layer, using ACLs and record rules, instead of relying on the controller
    logic for that.
  prefs: []
  type: TYPE_NORMAL
- en: Having the necessary access rights configured, the next step is to add the checkouts
    item to the portal main list.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a portal document type to the main list
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Accessing the portal **My Account** page shows several document types available,
    such as **sales orders** and **invoices**, and the number of items for each.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `library_portal` module should add the **Book Checkouts** option to the
    **My Account** page. Perform the following steps for that:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Edit the `controllers/__init__.py` file to import the Python file with the
    controller code, which will be in the `portal.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the controller file, `controllers/portal.py`, with the following code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: This extends the `CustomerPortal` controller, provided by the `portal` Odoo
    module. The previous code extends the `_prepare_home_portal_values()` method,
    responsible for calculating the document counters. It adds the `book_checkout_count`
    key to the result values, set with the checkout count.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Add the QWeb template file, `views/portal_templates.py`, with the following
    code:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This extends the `portal.portal_my_home` template, responsible for rendering
    the `portal.portal_docs_entry` template should be used to render each document
    item. It uses three variables: the `title`, the `url` to navigate to when clicked,
    and the `placeholder_count`, with the counter identifier provided by the `_prepare_home_portal_values`
    function.'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'Finally, add the new data file to `__manifest__.py`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: The previous steps add the `/my/book-checkouts` page, but this hasn't been implemented
    yet. The next section will do this in a portal-friendly way.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a portal document list page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The **My Account** home page lists the various document types available. Clicking
    the document type link should open the list of documents available.
  prefs: []
  type: TYPE_NORMAL
- en: '*Figure 13.4* shows what the document list page should look like:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 13.4 – Portal document list page for book checkouts'
  prefs: []
  type: TYPE_NORMAL
- en: '](img/Figure_13.4_B16119.jpg)'
  prefs: []
  type: TYPE_NORMAL
- en: Figure 13.4 – Portal document list page for book checkouts
  prefs: []
  type: TYPE_NORMAL
- en: The portal provides base features to be used for these document list pages,
    such as record paging, filters, and sort options.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous example showed how to add a document type to the portal home page.
    Next, the document list needs to be implemented. Continuing with the code from
    the previous section, two steps are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the controller file, `controllers/portal.py`, to add the code for the `/my/book-checkouts`
    route, which will render the `my_book_checkouts` template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the QWeb template file, `views/portal_templates.py`, to add the `my_book_checkouts`
    template for the book checkout list page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code to add to `controllers/portal.py` is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: The previous code adds a route for the `/my/book-checkouts` and `/my/book-checkouts/page/`
    paths. The first is the one used by default, and the second allows navigating
    through the record pages.
  prefs: []
  type: TYPE_NORMAL
- en: 'The method code is organized into three sections:'
  prefs: []
  type: TYPE_NORMAL
- en: The first code section prepares the `pager_data` variable, used by the template
    to render the page navigation links. It uses a `pager()` function from the portal
    module, responsible for preparing this data.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The second code section creates the record set to be used, `checkouts`. It does
    so using the domain filter and pager data set previously.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The third and last code section prepares the `values` dictionary and renders
    the QWeb template. The values are initialized using the portal-provided `_prepare_portal_layout_values()`
    function, and then additional data keys are set, including the pager data. The
    record set to use is also set in the values, in this case in the `checkouts` data
    key.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The portal pages can also have support for user-selected sort order and filters.
    A good example of this is the portal **Tasks**, implemented by the *Project* app.
    Inspecting the corresponding controllers and QWeb templates can provide further
    guidance to add this to other portal pages.
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: 'You have added the controller code, now let''s add the QWeb template with the
    following code:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: The previous code declares the `my_book_checkouts` QWeb template. It starts
    by calling the portal page template, `portal.portal_layout`.
  prefs: []
  type: TYPE_NORMAL
- en: Then, if there are records to render, it prepares an HTML table from them, calling
    the `portal.portal_table` template.
  prefs: []
  type: TYPE_NORMAL
- en: Next, the template adds the table header and body. The table body uses a for-loop
    on the `checkouts` record set to render each row.
  prefs: []
  type: TYPE_NORMAL
- en: Noteworthy is the `<a>` link on each record name. When rendering the checkout
    title, the `t-attf` directive is used to generate the link to open the corresponding
    detail. The special `slug()` function is used to generate a human-readable identifier
    for each record.
  prefs: []
  type: TYPE_NORMAL
- en: The link won't work for now, since the document detail page has not been implemented
    yet. The next section will do that.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a portal document detail page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The portal has a home page, from which the user can navigate to document lists,
    and then open specific documents. A specific book checkout can be accessed with
    the `/my/book-checkout/<id>` path.
  prefs: []
  type: TYPE_NORMAL
- en: 'The previous sections implemented the home page and document list features.
    To complete the portal, the document detail page should be implemented. Continuing
    with the code from the previous section, two steps are needed:'
  prefs: []
  type: TYPE_NORMAL
- en: Edit the controller file, `controllers/portal.py`, to add the code for the `/my/book-checkout`
    route, rendering the `book_checkout` template.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Edit the QWeb template file, `views/portal_templates.py`, to add the `book_checkout`
    template for the book checkout list page.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The code for the book checkout page controller is straightforward and brings
    nothing new. It is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: The previous code adds a route for the `/my/book-checkout/<id>` path, which
    translates the `<id>` into a `library.checkout` record. This record is used as
    a method argument, captured by the `doc` variable name.
  prefs: []
  type: TYPE_NORMAL
- en: Since the `doc` variable contains the checkout record to use, the method only
    needs to render the QWeb template for it, `library_portal.book_checkout`.
  prefs: []
  type: TYPE_NORMAL
- en: 'The code to use for the QWeb template is the following:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: The previous code created the `book_checkout` QWeb template. Again, it starts
    by calling the portal page template, `portal.portal_layout`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Then, the document details template, `portal.portal_record_layout`, is called
    to prepare the detail content. It uses the following two QWeb variables, which
    should be set:'
  prefs: []
  type: TYPE_NORMAL
- en: '`card_header` sets the HTML to use for the header.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`card_body` sets the HTML to use for the document details.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This HTML adds rows with the content. Two particular elements are noteworthy:'
  prefs: []
  type: TYPE_NORMAL
- en: The `<img>` element, adding an image from a data field
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `<address>` element, rendering an address for a partner record
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The current implementation is missing a nice usability feature, the **breadcrumb**
    allowing users to navigate back through the links to the portal main page. The
    next section shows how to add this.
  prefs: []
  type: TYPE_NORMAL
- en: Adding a portal breadcrumb
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Portal pages support a breadcrumb, on the top region of the page. By default,
    a home icon is available, allowing users to quickly navigate back to the main
    page. As the user navigates to the document list, and then to a particular document,
    these selections can be added to the breadcrumb.
  prefs: []
  type: TYPE_NORMAL
- en: The Odoo portal breadcrumb is added by the `portal.portal_breadcrumbs` template.
    It should be extended to add the specific navigation steps for particular document
    types.
  prefs: []
  type: TYPE_NORMAL
- en: 'To have the book checkout breadcrumb, edit the `views/portal_templates.py`
    file to add the following template:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: The template in the previous code extends the `portal.portal_breadcrumbs` template.
    It extends the `<ol>` element with the `o_portal_submenu` class, adding breadcrumb
    `<li>` elements to it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The extension adds two possible elements: one for the **Checkouts** document
    list, and another for a particular book checkout. The breadcrumb is included in
    all portal pages, and these added elements should be conditionally rendered, only
    if they make sense for the current page.'
  prefs: []
  type: TYPE_NORMAL
- en: The previous sections guided you through the various steps needed to add new
    features to the Odoo portal, enabling external users to interact with Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frontend web pages allow Odoo to also provide features to external users. This
    can be used to display generic information to the public, or give personalized
    information to portal users. The frontend web features are the foundation of the
    Odoo CMS, provided by the *Website* app, and for frontend features such as e-commerce.
  prefs: []
  type: TYPE_NORMAL
- en: In this chapter, you understood the technical components that are at the core
    of frontend web features, web controllers, and QWeb templates. Web controllers
    implement routes, triggered when accessing certain URL paths called routes, and
    running any specific business logic needed. QWeb templates receive data prepared
    by the web controller and render HTML output with the help of the QWeb templating
    engine.
  prefs: []
  type: TYPE_NORMAL
- en: You now know how to use these components to implement a public web page integrated
    with the Odoo frontend, including the usage of your own web assets. You also know
    how to leverage the essentials of the Odoo portal to provide self-service features
    to your external users.
  prefs: []
  type: TYPE_NORMAL
- en: This chapter completes your journey through the various components in the Odoo
    framework. The models are the central element around which other components are
    built up. The Odoo base module provides a few essential models developers should
    be familiar with. The next chapter takes on the task of providing an overview
    of these.
  prefs: []
  type: TYPE_NORMAL
- en: Further reading
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'These are additional reference materials that complement the topics discussed
    in this chapter, found in the official Odoo documentation:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Web controllers: [https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'QWeb language: [https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html](https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'JavaScript API reference: [https://www.odoo.com/documentation/15.0/developer/reference/frontend/javascript_reference.html](https://www.odoo.com/documentation/15.0/developer/reference/frontend/javascript_reference.html)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Bootstrap documentation: [https://getbootstrap.com/docs/4.1/getting-started/introduction](https://getbootstrap.com/docs/4.1/getting-started/introduction)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Additional Bootstrap learning resources can be found on the Packt Publishing
    technical page: [https://www.packtpub.com/tech/Bootstrap](https://www.packtpub.com/tech/Bootstrap).'
  prefs: []
  type: TYPE_NORMAL
