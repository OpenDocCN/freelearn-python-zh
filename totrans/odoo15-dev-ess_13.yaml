- en: '[*Chapter 13*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379): Creating Web
    and Portal Frontend Features'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[*第13章*](B16119_13_Final_PD_ePub.xhtml#_idTextAnchor379)：创建Web和门户前端功能'
- en: Odoo is a business application framework, providing all the tools necessary
    to quickly build apps. A uniform web client provides the business user interface.
    But organizations are not isolated from the world. Being able to also interact
    with external users is needed to support efficient processes. For this, Odoo supports
    a web interface.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo是一个业务应用程序框架，提供快速构建应用程序所需的所有工具。统一的Web客户端提供了业务用户界面。但组织不能与世界隔离。能够与外部用户交互以支持高效流程是必要的。为此，Odoo支持Web界面。
- en: The internal user web client is sometimes referred to as the **backend**, and
    the external user interface as the **frontend**. The frontend provides **portal
    features**, accessible to portal user logins. It also provides public features,
    accessible without the need for a login, referred as **website features**.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 内部用户Web客户端有时被称为 **后端**，外部用户界面被称为 **前端**。前端提供 **门户功能**，可供门户用户登录访问。它还提供公共功能，无需登录即可访问，称为
    **网站功能**。
- en: The portal complements backend apps, providing self-service features to external
    users, such as viewing and paying for their orders, or submitting a support ticket.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 门户补充了后端应用程序，为外部用户提供自助服务功能，例如查看和支付他们的订单，或提交支持工单。
- en: The website features are built on top of the Odoo **Content Management System**
    (**CMS**), which allows you to build web pages, including easy-to-use *drag and
    drop* web page design tools. Additional website features are provided as **modules**,
    such as blogs, online jobs, or e-commerce.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 网站功能建立在Odoo **内容管理系统**（**CMS**）之上，该系统允许您构建网页，包括易于使用的 *拖放* 网页设计工具。此外，网站功能还提供作为
    **模块** 的附加功能，例如博客、在线招聘或电子商务。
- en: 'In this chapter, you will learn how to develop frontend add-on modules, leveraging
    the website features provided by Odoo, while discussing the following topics:'
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，您将学习如何开发前端附加模块，利用Odoo提供的网站功能，同时讨论以下主题：
- en: Introducing the library portal learning project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 介绍图书馆门户学习项目
- en: Creating a frontend web page
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建前端网页
- en: Learning about web controllers
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 了解Web控制器
- en: Adding portal features
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 添加门户功能
- en: By the end of this chapter, you will have learned how to use web controllers
    and QWeb templates to create dynamic web pages, integrated into the Odoo frontend.
    Additionally, you will learn how to leverage the Odoo portal module, adding your
    features to it.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 到本章结束时，您将学会如何使用Web控制器和QWeb模板创建动态网页，并将其集成到Odoo前端。此外，您还将学习如何利用Odoo门户模块，将其功能添加到其中。
- en: Technical requirements
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: The work in this chapter requires the `library_checkout` add-on module, last
    edited in [*Chapter 11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324), *Kanban
    Views and Client-Side QWeb*. The add-on module and its dependencies code can be
    found in the Git repository at https://github.com/PacktPublishing/Odoo-15-Development-Essentials.
    The code in this chapter can be found in the same repository.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 本章中的工作需要`library_checkout`附加模块，最后编辑于[*第11章*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324)，*看板视图和客户端QWeb*。附加模块及其依赖代码可以在Git仓库https://github.com/PacktPublishing/Odoo-15-Development-Essentials中找到。本章中的代码可以在同一仓库中找到。
- en: Introducing the library portal learning project
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 介绍图书馆门户学习项目
- en: To learn about Odoo web page development, a new project will be used. The library
    app can use self-service features for library members. Members can be assigned
    a user login to have access to their book checkout requests.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了了解Odoo网页开发，将使用一个新的项目。图书馆应用程序可以使用自助服务功能为图书馆会员提供服务。会员可以被分配一个用户登录名以访问他们的图书借阅请求。
- en: The `library_portal` add-on module will be created for these portal self-service
    features.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 将为这些门户自助服务功能创建名为`library_portal`的附加模块。
- en: 'The first file to add is the manifest, `library_portal/__manifest__.py`, which
    you can create with the following code:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 首先要添加的文件是清单文件，`library_portal/__manifest__.py`，您可以使用以下代码创建它：
- en: '[PRE0]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: The module depends on `library_checkout` to extend its features. It also depends
    on the `portal` module, providing the foundation for portal features. The `website`
    module provides CMS features, and can also be used for web page development. However,
    the `portal` modules can provide essential frontend features without the need
    to have the *Website* app installed.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 该模块依赖于 `library_checkout` 来扩展其功能。它还依赖于 `portal` 模块，为门户功能提供基础。`website` 模块提供
    CMS 功能，也可以用于网页开发。然而，`portal` 模块可以在不安装 *Website* 应用程序的情况下提供必要的前端功能。
- en: The `data` key lists three XML files to be used. The first two are security
    related, and give portal users the access needed to be able to view the checkout
    requests. The last XML file will have the QWeb templates for the portal user interface.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: '`data` 键列出了三个要使用的 XML 文件。前两个与安全相关，为门户用户提供查看借阅请求所需的访问权限。最后一个 XML 文件将包含门户用户界面的
    QWeb 模板。'
- en: An empty `library_portal/__init__.py` file is also needed for the module directory
    to be a valid Python module, as required by the Odoo framework.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 为了使模块目录成为一个有效的 Python 模块，根据 Odoo 框架的要求，还需要一个空的 `library_portal/__init__.py`
    文件。
- en: Now that the new module has the essential files, the next step is to add the
    basic components needed to have a functioning web page.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: 现在新模块已经包含了必要的文件，下一步是添加使网页能够正常运行的必备组件。
- en: Creating a frontend web page
  id: totrans-22
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建前端网页
- en: 'To get started with the basics of Odoo web development, a simple web page will
    be created. To do this, two components are needed: a **web controller**, triggered
    when a particular URL is accessed, and a **QWeb template**, to generate the HTML
    to be presented by that URL.'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始学习 Odoo 网络开发的基础，将创建一个简单的网页。为此，需要两个组件：一个 **网页控制器**，当访问特定的 URL 时被触发，以及一个 **QWeb
    模板**，用于生成由该 URL 展示的 HTML。
- en: The web page used to showcase this is a book catalog, a simple list of the books
    in the library. The book catalog page will be accessible at `http://localhost:8069/library/catalog`.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 展示这个功能的网页是一个图书目录，是图书馆中图书的简单列表。图书目录页面将在 `http://localhost:8069/library/catalog`
    可访问。
- en: 'The following screenshot provides an example of what should be seen:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 以下截图提供了一个示例，展示了应该看到的内容：
- en: '![Figure 13.1 – Book catalog frontend web page'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: '![图 13.1 – 图书目录前端网页'
- en: '](img/Figure_13.1_B16119.jpg)'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '](img/Figure_13.1_B16119.jpg)'
- en: Figure 13.1 – Book catalog frontend web page
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 图 13.1 – 图书目录前端网页
- en: The first step is to add the web controller, which we will do in the next section.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 第一步是添加网页控制器，我们将在下一节中完成。
- en: Adding a web controller
  id: totrans-30
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加网页控制器
- en: Web controllers are Python objects, used to implement web features. They can
    link URL paths to an object method, so that when that URL is accessed, the method
    is executed.
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: 网页控制器是 Python 对象，用于实现网页功能。它们可以将 URL 路径链接到对象方法，这样当访问该 URL 时，就会执行该方法。
- en: For example, for the `http://localhost:8069/library/catalog` URL, the accessed
    path is `/library/catalog`.
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，对于 `http://localhost:8069/library/catalog` URL，访问的路径是 `/library/catalog`。
- en: A URL path, sometimes also called an `@http.route` method decorator in an `http.Controller`
    object.
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: 一个 URL 路径，有时也称为 `http.Controller` 对象中的 `@http.route` 方法装饰器。
- en: 'To create the route for `/library/catalog`, perform the following steps:'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 要为 `/library/catalog` 创建路由，执行以下步骤：
- en: 'The controller Python code will be added in the `controllers` subdirectory.
    In the `library_portal` module directory, edit the `__init__.py` file to import
    that subdirectory:'
  id: totrans-35
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 控制器 Python 代码将被添加到 `controllers` 子目录中。在 `library_portal` 模块目录中，编辑 `__init__.py`
    文件以导入该子目录：
- en: '[PRE1]'
  id: totrans-36
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Add the `controllers/__init__.py` file to import the Python file with the controller
    code, which will be in a `main.py` file:'
  id: totrans-37
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `controllers/__init__.py` 文件添加到导入包含控制器代码的 Python 文件中，该文件将位于 `main.py` 文件中：
- en: '[PRE2]'
  id: totrans-38
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Add the actual controller file, `controllers/main.py`, with the following code:'
  id: totrans-39
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加实际的控制器文件，`controllers/main.py`，包含以下代码：
- en: '[PRE3]'
  id: totrans-40
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Having done these steps, the controller component is done, and is able to process
    requests for the `/library/catalog` route.
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: 完成这些步骤后，控制器组件就完成了，并且能够处理 `/library/catalog` 路由的请求。
- en: The `odoo.http` module provides the Odoo web-related features. The web controllers,
    responsible for page rendering, should be objects inheriting from the `odoo.http.Controller`
    class. The actual name used for the class is not important. In the previous code,
    the controller class name is `Main()`.
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`odoo.http` 模块提供了 Odoo 网络相关的功能。负责页面渲染的网页控制器应该是继承自 `odoo.http.Controller` 类的对象。类名实际上并不重要。在之前的代码中，控制器类名为
    `Main()`。'
- en: The `catalog()` method, in the `Main()` class, is decorated with `@http.route`,
    binding it to one or more URL routes. Here, the `catalog()` method is triggered
    by the `/library/catalog route`. It also uses the `auth="public"` argument, meaning
    that this route is accessible without requiring authentication. And the `website=true`
    argument means that this page will use the web frontend layout, and ensures some
    needed additional variables are made available.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`Main()` 类中的 `catalog()` 方法用 `@http.route` 装饰，将其绑定到一个或多个 URL 路由。在这里，`catalog()`
    方法由 `/library/catalog` 路由触发。它还使用了 `auth="public"` 参数，这意味着此路由无需身份验证即可访问。`website=true`
    参数意味着此页面将使用网页前端布局，并确保提供一些需要的附加变量。'
- en: Note
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: Using `website=True` does not require the *Website* app to be installed. It
    also works with base Odoo frontend web pages.
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 `website=True` 不需要安装 *网站* 应用。它也适用于基本的 Odoo 前端网页。
- en: These `catalog()` route method is expected to do some processing and then return
    the HTML page to the user's web browser.
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 这些 `catalog()` 路由方法预期会进行一些处理，然后返回 HTML 页面给用户的网络浏览器。
- en: The `http.request` object is automatically set with the web request, and has
    available the `.env` attribute, to access the Odoo environment. This can be used
    to instantiate Odoo models. The example code does this to access the `library.book`
    model and then build a record set with all books available.
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.request` 对象会自动设置与网络请求，并具有 `.env` 属性，用于访问 Odoo 环境。这可以用来实例化 Odoo 模型。示例代码就是这样来访问
    `library.book` 模型，然后构建包含所有可用图书的记录集。'
- en: The route method runs as the user who is logged in, or as the Public special
    user if no user is logged in and the route allows public access. Since the Public
    user has very limited access, `sudo()` might be needed to ensure that the data
    to be presented can be retrieved.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 路由方法以登录用户或作为未登录时的公共特殊用户运行。由于公共用户访问权限非常有限，可能需要 `sudo()` 来确保可以检索要展示的数据。
- en: The final line returns the result of `http.request.render()`. This prepares
    a QWeb template to be rendered. The two arguments are the template XML ID, `library_portal.book_catalog`
    in this case, and a dictionary with the variables to make available to the QWeb
    rendering context. In this case, a `books` variable is made available, set with
    a books record set.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后一行返回 `http.request.render()` 的结果。这准备了一个要渲染的 QWeb 模板。两个参数是模板 XML ID，在本例中为 `library_portal.book_catalog`，以及一个字典，包含要提供给
    QWeb 渲染上下文的变量。在这种情况下，一个 `books` 变量被提供，并设置为图书记录集。
- en: Note
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: The `http.request.render()` function returns a Odoo `http.response` object,
    containing the instructions on what to render. The actual processing of the QWeb
    template into HTML is delayed until all web controller code is run and the response
    is ready to be sent to the client. This allows for the route method to be extended
    and, for example, the `qcontext` attribute, holding the dictionary to be used
    for the QWeb rendering, to be modified.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`http.request.render()` 函数返回一个 Odoo `http.response` 对象，包含有关如何渲染的指令。实际的 QWeb
    模板到 HTML 的处理会延迟到所有网络控制器代码运行且响应准备好发送给客户端时。这允许扩展路由方法，例如，修改 `qcontext` 属性，该属性持有用于
    QWeb 渲染的字典。'
- en: The controller is ready, but the QWeb template used needs to be created before
    it can work. The next section takes care of that.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 控制器已就绪，但所使用的 QWeb 模板需要在它能够工作之前创建。下一节将处理这一点。
- en: Adding a QWeb template
  id: totrans-53
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加 QWeb 模板
- en: QWeb templates are XML snippets containing HTML code and QWeb directives that
    can dynamically modify the output depending on conditions. The book catalog web
    page needs a QWeb template to render the HTML to be presented.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb 模板是包含 HTML 代码和 QWeb 指令的 XML 片段，可以根据条件动态修改输出。图书目录网页需要一个 QWeb 模板来渲染要展示的 HTML。
- en: 'To add the `library_portal.book_catalog` QWeb template, perform the following
    steps:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加 `library_portal.book_catalog` QWeb 模板，执行以下步骤：
- en: 'A new XML data file, `views/main_templates.xml`, will be used to declare the
    template. Add that to the `__manifest__.py` module file, in the `data` key:'
  id: totrans-56
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将使用一个新的 XML 数据文件，`views/main_templates.xml`，来声明模板。将其添加到 `__manifest__.py` 模块文件中的
    `data` 键：
- en: '[PRE4]'
  id: totrans-57
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Add the XML data file with the QWeb template, `views/main_templates.xml`:'
  id: totrans-58
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加包含 QWeb 模板的 XML 数据文件，`views/main_templates.xml`：
- en: '[PRE5]'
  id: totrans-59
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE5]'
- en: This completes the steps needed to get the QWeb template ready.
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 这完成了使 QWeb 模板准备就绪所需的步骤。
- en: The previous code declares the `book_catalog` template. It is a Bootstrap table,
    with three columns. The `<thead>` section declares the columns headers, and the
    `<t t-foreach>` QWeb directive renders a table row for each book in the `books`
    record set.
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码声明了`book_catalog`模板。它是一个Bootstrap表格，有三列。`<thead>`部分声明了列标题，而`<t t-foreach>`
    QWeb指令为`books`记录集中的每本书渲染一个表格行。
- en: Note
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: QWeb templates are XML. The XML language has stricter rules than regular HTML,
    which, for example, tolerates opening tags that are not closed. This is not allowed
    in XML, and therefore in QWeb templates. To be precise, QWeb templates follow
    the XHTML requirements.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb模板是XML。XML语言比常规HTML有更严格的规则，例如，HTML可以容忍未关闭的打开标签。在XML中，以及在QWeb模板中，这是不允许的。更准确地说，QWeb模板遵循XHTML的要求。
- en: Important in this template is the first directive, `<t t-call="web.frontend_layout">`.
    This is what makes the template HTML be rendered as an Odoo frontend web page,
    including page headers and footers. For this layout to be used, the controller
    route must include the `website=True` argument.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模板中重要的是第一个指令`<t t-call="web.frontend_layout">`。这使得模板HTML被渲染为Odoo前端网页，包括页眉和页脚。为此布局被使用，控制器路由必须包含`website=True`参数。
- en: Tip
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 提示
- en: The website data passed into the QWeb evaluation context is set by the `_prepare_qcontext`
    method of the `ir.ui.view` model. For example, the `website` module adds variables
    to it, in the `models/ir_ui_view.py` file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 传入QWeb评估上下文的网站数据是由`ir.ui.view`模型的`_prepare_qcontext`方法设置的。例如，`website`模块在`models/ir_ui_view.py`文件中向其中添加变量。
- en: '`<t t-set="title">` is also noteworthy. It is used by the frontend layout to
    set the browser tab title.'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`<t t-set="title">`也值得关注。它被前端布局用于设置浏览器标签页标题。'
- en: When we have both the controller and the QWeb template in place, once the `library_portal`
    module is installed or upgraded, opening `http://localhost:8069/library/catalog`
    with a web browser should display a table with the library's books.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们有了控制器和QWeb模板，一旦`library_portal`模块安装或升级，使用Web浏览器打开`http://localhost:8069/library/catalog`应该会显示图书馆的书籍表格。
- en: These are the key components used to implement frontend web pages. Note that
    the *Website* app can be used to have more frontend features available, but is
    not required.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是实现前端网页的关键组件。请注意，*网站*应用程序可以用来提供更多前端功能，但不是必需的。
- en: Being a web page, it may also need to use additional assets. The next section
    explains this.
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 作为网页，它可能还需要使用额外的资产。下一节将解释这一点。
- en: Adding CSS and JavaScript assets
  id: totrans-71
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加CSS和JavaScript资产
- en: When designing web pages, the HTML code is often complemented with CSS or JavaScript,
    which are best provided as additional assets.
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在设计网页时，HTML代码通常辅以CSS或JavaScript，这些最好作为额外的资产提供。
- en: Assets to load are declared in the head section of the page. Odoo has specific
    QWeb templates in charge of loading assets. In particular, the `web.assets_backend`
    and `web.assets_frontend` provide the assets needed specifically for backend web
    client and frontend web pages. `web.assets_common` provides assets common to both.
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 需要加载的资产在页面的头部部分声明。Odoo有负责加载资产的特定QWeb模板。特别是，`web.assets_backend`和`web.assets_frontend`提供了专门用于后端Web客户端和前端网页的资产。`web.assets_common`提供了两者共有的资产。
- en: To have additional assets loaded, the appropriate template needs to be extended.
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 要加载额外的资产，需要扩展适当的模板。
- en: For example, in the book catalog page, the title could be presented using a
    larger font size. This can be done by declaring a style in a CSS file, which is
    then used in the `<h1>` element. In fact, the book catalog QWeb template is already
    using `<h1 class="h1-book-catalog">`, applying a custom style.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 例如，在图书目录页面上，标题可以使用更大的字体大小来呈现。这可以通过在CSS文件中声明一个样式，然后在`<h1>`元素中使用它来实现。事实上，图书目录QWeb模板已经使用了`<h1
    class="h1-book-catalog">`，应用了自定义样式。
- en: 'To add this custom style, perform the following steps:'
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加此自定义样式，请执行以下步骤：
- en: 'Create the `static/src/css/library.css` file with the following content:'
  id: totrans-77
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下内容创建`static/src/css/library.css`文件：
- en: '[PRE6]'
  id: totrans-78
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'This CSS must be loaded by frontend web pages. For this, the `web.assets_frontend`
    template should be extended. Add to the `__manifest__.py` file the following code:'
  id: totrans-79
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 此CSS必须由前端网页加载。为此，应扩展`web.assets_frontend`模板。在`__manifest__.py`文件中添加以下代码：
- en: '[PRE7]'
  id: totrans-80
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE7]'
- en: This describes how a module can add web assets. These assets will usually be
    `.js`, `.css`, or `.scss` files.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 这描述了模块如何添加Web资产。这些资产通常是`.js`、`.css`或`.scss`文件。
- en: Changes in Odoo 15
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo 15中的更改
- en: Web assets were previously added using an XML file, extending an QWeb template,
    such as `web.assets_backend` or `web.assets_frontend`. An example for this is
    provided in [*Chapter 11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324), *Kanban
    Views and Client-Side QWeb*, in the *Adding CSS and JavaScript assets* section.
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: Web资源之前是通过XML文件添加的，扩展QWeb模板，如`web.assets_backend`或`web.assets_frontend`。在[*第11章*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324)，“看板视图和客户端QWeb”，在“添加CSS和JavaScript资源”部分提供了一个示例。
- en: 'The basics for creating a frontend web page have been described, and involve
    three key components: web controllers, QWeb templates, and web assets.'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 创建前端网页的基本方法已描述，涉及三个关键组件：Web控制器、QWeb模板和Web资源。
- en: QWeb templates and their syntax have been thoroughly described in [*Chapter
    11*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324), *Kanban Views and Client-Side
    QWeb*, and [*Chapter 12*](B16119_12_Final_PD_ePub.xhtml#_idTextAnchor358), *Creating
    Printable PDF Reports with Server-Side QWeb*.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: QWeb模板及其语法已在[*第11章*](B16119_11_Final_PD_ePub.xhtml#_idTextAnchor324)，“看板视图和客户端QWeb”，和[*第12章*](B16119_12_Final_PD_ePub.xhtml#_idTextAnchor358)，“使用服务器端QWeb创建可打印的PDF报告”中进行了详细描述。
- en: But web controllers are worth more attention, and a deeper description of their
    features. The following section will provide this.
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 但Web控制器值得更多关注，并且需要更深入地描述其功能。下一节将提供这些信息。
- en: Understanding web controllers
  id: totrans-87
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解Web控制器
- en: Web controllers are the server-side components responsible for responding when
    an Odoo web path is accessed, usually triggering the rendering of a web page.
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: Web控制器是服务器端组件，负责在访问Odoo网络路径时做出响应，通常触发网页的渲染。
- en: A web path, such as `/library/catalog`, is assigned to a route, triggering a
    `request` object, and the result is a `response` object, with the details to return
    to the client.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 网络路径，例如`/library/catalog`，被分配给一个路由，触发一个`request`对象，结果是一个包含返回给客户端的详细信息的`response`对象。
- en: Declaring routes
  id: totrans-90
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 声明路由
- en: 'The `http.route` decorator is used to assign a method to a web path. These
    are the arguments available:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 使用`http.route`装饰器将方法分配给网络路径。以下是可用的参数：
- en: '`route`, usually provided as a positional argument, is a string, or a list
    of strings, with the paths to map. Method arguments can be extracted from the
    path. The syntax to express these arguments is detailed in the next section.'
  id: totrans-92
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`route`通常作为位置参数提供，是一个字符串，或字符串列表，包含映射的路径。方法参数可以从路径中提取。这些参数的表达式语法将在下一节中详细说明。'
- en: '`type`, to specify the type of request. By default, this is `http`, and can
    also be set to `json`.'
  id: totrans-93
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`type`，用于指定请求类型。默认为`http`，也可以设置为`json`。'
- en: '`auth` is the authentication type required. It can be one of `user`, `public`,
    or `none`. The `user` option requires a login to allow access, `public` allows
    anonymous access, through the public user, and `none` is useful in special cases,
    where an Odoo database is not needed, such as authentication endpoints.'
  id: totrans-94
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`auth`是所需的认证类型。它可以是一组中的`user`、`public`或`none`。`user`选项需要登录才能允许访问，`public`允许通过公共用户匿名访问，而`none`在特殊情况下很有用，例如不需要Odoo数据库的认证端点。'
- en: These are the arguments that can be used on `route` decorators. The next section
    explains the syntax to extract values from the main argument, to be passed to
    the decorated method.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是可以在`route`装饰器上使用的参数。下一节将解释从主要参数中提取值以传递给装饰方法的语法。
- en: Extracting argument values from the route string
  id: totrans-96
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从路由字符串中提取参数值
- en: The `<type:name>`. For example, `<int:partner_id>` extracts an integer value,
    and passes it to the method as the `partner_id` keyword argument. Record instances
    are also supported, using the `model(<model name>)` syntax. For example, `<model('res.partner'):partner>`
    extracts a partner record, passed to the method with the `partner` keyword argument.
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`<type:name>`。例如，`<int:partner_id>`提取一个整数值，并将其作为`partner_id`关键字参数传递给方法。也支持记录实例，使用`model(<模型名称>)`语法。例如，`<model(''res.partner''):partner>`提取一个合作伙伴记录，并将其作为`partner`关键字参数传递给方法。'
- en: Note
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 注意
- en: More information on route path formatting can be found in the official Werkzeug
    documentation at [https://werkzeug.palletsprojects.com/routing/](https://werkzeug.palletsprojects.com/routing/).
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 更多关于路由路径格式的信息可以在官方Werkzeug文档中找到，网址为[https://werkzeug.palletsprojects.com/routing/](https://werkzeug.palletsprojects.com/routing/)。
- en: The URL parameters are passed to the decorated method as keyword arguments.
    These parameters are after the `?` character in a `GET` request, or submitted
    by a `POST` request. For example, the `http://localhost:8069/mypage``x` set to
    `1` and `y` set to `2`.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: URL参数作为关键字参数传递给装饰方法。这些参数位于`GET`请求中的`?`字符之后，或通过`POST`请求提交。例如，将`http://localhost:8069/mypage`中的`x`设置为`1`和`y`设置为`2`。
- en: Tip
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: Adding to routed methods the `**kw` generic keyword argument capture prevents
    it from erroring if an unexpected argument is added to the URL. For example, without
    it, accessing `http://localhost:8069/library/catalog``**kw` on the method arguments,
    it would be captured in the `kw` variable, and could be ignored by the method
    code.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在路由方法中添加`**kw`通用关键字参数捕获可以防止在URL中添加意外参数时出错。例如，如果没有它，在方法参数中访问`http://localhost:8069/library/catalog`**kw**，它将被捕获在`kw`变量中，并且可以被方法代码忽略。
- en: 'The routed method return value can be any of the following:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 路由方法返回值可以是以下任何一种：
- en: A **falsy** value, resulting in a *204 No Content* HTTP code response.
  id: totrans-104
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个**假值**，导致返回*204 No Content* HTTP代码响应。
- en: A text string, used to return a response with that text as the HTML content.
  id: totrans-105
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 一个文本字符串，用于返回包含该文本作为HTML内容的响应。
- en: A `response` object, usually created with the `render()` method.
  id: totrans-106
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`response`对象通常使用`render()`方法创建。'
- en: Next, let's learn how the `request` object can be used in a routed method.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，让我们学习如何在路由方法中使用`request`对象。
- en: Using the request object
  id: totrans-108
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用请求对象
- en: A `request` object is automatically instanced when a client web request is made
    to the Odoo server. It is made available by importing `odoo.http.request`.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 当客户端向Odoo服务器发出Web请求时，会自动实例化一个`request`对象。它通过导入`odoo.http.request`来提供。
- en: 'The following are the most important attributes provided by this object:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是由此对象提供的最重要的属性：
- en: '`env` is an Odoo `Environment` object, similar to what `self.env` provides
    in regular model methods.'
  id: totrans-111
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`env`是Odoo`Environment`对象，类似于常规模型方法中的`self.env`提供的内容。'
- en: '`context` is a dictionary-like `Mapping` object with the execution context.
    It is similar to model method context.'
  id: totrans-112
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`context`是一个具有执行上下文的字典样式的`Mapping`对象，类似于模型方法上下文。'
- en: '`cr` is a PostgreSQL cursor object for the Odoo database.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`cr`是Odoo数据库的PostgreSQL游标对象。'
- en: '`db` is the database name.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`db`是数据库名称。'
- en: '`session` is an object storing the session details, including authentication.'
  id: totrans-115
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`session`是一个存储会话详情的对象，包括身份验证。'
- en: '`params` stores the request parameters. It is usually not useful, since the
    parameters are already provided as arguments to the method.'
  id: totrans-116
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`params`存储请求参数。通常它没有用，因为参数已经作为方法的参数提供。'
- en: '`csrf_token(time_limit=None)` is a method to generate a CSRF token for the
    current session. The `time_limit` is the token validity period in seconds. The
    default, `None`, makes it valid for the whole session duration. This attribute
    is used, for example, to set a CSRF token for HTML forms.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`csrf_token(time_limit=None)`是一个用于生成当前会话CSRF令牌的方法。`time_limit`是令牌有效期的秒数。默认值`None`使其在整个会话期间有效。此属性用于设置HTML表单的CSRF令牌。'
- en: 'For `http` type requests, the following methods are also available:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 对于`http`类型请求，以下方法也是可用的：
- en: '`make_response(data, headers=None, cookies=None)` can be used to craft non-HTML
    responses.'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`make_response(data, headers=None, cookies=None)`可以用来制作非HTML响应。'
- en: '`not_found(description=None)` returns a *404 Not Found* HTTP code.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`not_found(description=None)`返回一个*404 Not Found* HTTP代码。'
- en: '`render(template, qcontext=None, lazy=True, **kw)` returns a QWeb template
    to render. The actual template rendering is delayed until the final dispatch to
    the client, and so it can be modified by inheriting methods.'
  id: totrans-121
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render(template, qcontext=None, lazy=True, **kw)`返回一个用于渲染的QWeb模板。实际的模板渲染被延迟到最终发送给客户端，因此可以通过继承方法进行修改。'
- en: Request objects provide a way to access the Odoo environment and all the information
    about the request made by the client. The next relevant object to understand is
    the `response`, to be sent back to the client initiating the request.
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 请求对象提供了一种访问Odoo环境和客户端请求的所有信息的方式。接下来需要理解的相关对象是`response`，它将被发送回发起请求的客户端。
- en: Using the response object
  id: totrans-123
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 使用响应对象
- en: The `response` object is used to dispatch the final HTTP message to send to
    the client. When extending routed methods, it might be the case that the `response`
    returned by the parent `super()` method needs modifications.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: '`response`对象用于将最终的HTTP消息发送给客户端。当扩展路由方法时，可能需要修改由父`super()`方法返回的`response`。'
- en: 'The following is available on the `response` object:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是在`response`对象上可用的内容：
- en: '`template` is the name of the template to render.'
  id: totrans-126
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`template`是用于渲染的模板名称。'
- en: '`qcontext` is a dictionary with the data to make available for the template
    rendering.'
  id: totrans-127
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`qcontext`是一个字典，包含用于模板渲染的数据。'
- en: '`uid` is an integer with the ID of the user rendering the template. If not
    set, the current user running the method code is used.'
  id: totrans-128
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`uid`是一个包含渲染模板的用户ID的整数。如果没有设置，则使用运行方法代码的当前用户。'
- en: '`render()` is the same rendering method also available in the `request` object.'
  id: totrans-129
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`render()`是也在`request`对象中可用的相同渲染方法。'
- en: '`flatten()` forces the rendering of the template.'
  id: totrans-130
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`flatten()`强制渲染模板。'
- en: The response object also supports the parameters provided by the parent library,
    `werkzeug.wrappers.Response`. The corresponding documentation can be found at
    [https://werkzeug.palletsprojects.com/wrappers/#werkzeug.wrappers.Response](https://werkzeug.palletsprojects.com/wrappers/#werkzeug.wrappers.Response).
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 响应对象也支持由父库`werkzeug.wrappers.Response`提供的参数。相应的文档可以在[https://werkzeug.palletsprojects.com/wrappers/#werkzeug.wrappers.Response](https://werkzeug.palletsprojects.com/wrappers/#werkzeug.wrappers.Response)找到。
- en: You now have a good idea about the web development components. Odoo also provides
    a portal useful to interact with external users and the next section explains
    how to add features to it.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 您现在对Web开发组件有了很好的了解。Odoo还提供了一个用于与外部用户交互的门户，下一节将解释如何向其中添加功能。
- en: Adding portal features
  id: totrans-133
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 添加门户功能
- en: The Odoo portal feature make information available to interact with external
    users. Different apps can add features to the portal. For example, the **Sales**
    app adds the ability for customers to check their orders, and even pay for them.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo门户功能使信息可供与外部用户交互。不同的应用程序可以为门户添加功能。例如，**销售**应用程序为顾客提供了检查订单甚至支付订单的能力。
- en: 'Portal users need to be created, providing access to the portal. This is done
    on the corresponding contact record in the **Action** context menu, with the **Grant
    portal access** option, as shown in *Figure 13.2*:'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: 需要创建门户用户，以提供对门户的访问权限。这可以在相应的联系记录的**操作**上下文菜单中完成，使用**授予门户访问权限**选项，如图*图13.2*所示：
- en: '![Figure 13.2 – The Grant portal access option on a contact record'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.2 – 联系记录上的“授予门户访问权限”选项]'
- en: '](img/Figure_13.2_B16119.jpg)'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_13.2_B16119.jpg]'
- en: Figure 13.2 – The Grant portal access option on a contact record
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.2 – 联系记录上的“授予门户访问权限”选项
- en: Once the user goes through the sign-up process, they can log in to Odoo and
    see a **My Account** option when clicking on the username in the top right corner.
    This option opens the portal home page, presenting a summary of all the documents
    available to the user.
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: 用户完成注册过程后，他们可以登录到Odoo，并在点击右上角的用户名时看到**我的账户**选项。此选项打开门户主页，展示用户可用的所有文档的摘要。
- en: 'The documents available depend on the apps installed. *Figure 13.3* shows an
    example of what the portal home page looks like:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 可用的文档取决于已安装的应用程序。*图13.3*显示了门户主页的示例外观：
- en: '![Figure 13.3 – Portal page with book checkouts feature'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '![图13.3 – 具有图书借阅功能的门户页面]'
- en: '](img/Figure_13.3_B16119.jpg)'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '![img/Figure_13.3_B16119.jpg]'
- en: Figure 13.3 – Portal page with book checkouts feature
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 图13.3 – 具有图书借阅功能的门户页面
- en: The `library_portal` module adds the **Book Checkouts** item to the portal **Documents**,
    as seen in *Figure 13.3*. This is the result of what will be implemented in this
    section.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '`library_portal`模块将**图书借阅**项目添加到门户**文档**中，如图*图13.3*所示。这是本节将要实施的结果。'
- en: 'The work for this will be split into three parts: access security, controllers,
    and QWeb templates. Each of the following sections will address one of these steps.
    You will start by setting the portal access security configuration.'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 这项工作将分为三个部分：访问安全、控制器和QWeb模板。以下每个部分都将解决这些步骤中的一个。您将首先设置门户访问安全配置。
- en: Configuring access security for the portal users
  id: totrans-146
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置门户用户的访问安全
- en: Before portal users can access app data, the necessary access rights need to
    be given to the portal user group, `base.group_portal group`.
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 在门户用户可以访问应用程序数据之前，必须向门户用户组`base.group_portal group`授予必要的访问权限。
- en: In the case of the library app, portal users should be given read-only access
    to the book, member, checkout, and stage models. Furthermore, each portal user
    should only be able to see their own member record and checkouts. For this, both
    access rights and record rules need to be added.
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 在图书馆应用程序的情况下，门户用户应被授予对图书、成员、借阅和阶段模型的只读访问权限。此外，每个门户用户只能看到他们自己的成员记录和借阅。为此，需要添加访问权限和记录规则。
- en: 'To configure the access security for portal users, perform the following steps:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: 要配置门户用户的访问安全，请执行以下步骤：
- en: 'Create the `security/ir.model.access.csv` file, adding read access to the library
    models, with the following content:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`security/ir.model.access.csv`文件，向库模型添加读取访问权限，内容如下：
- en: '[PRE8]'
  id: totrans-151
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'Create the `security/library_security.xml` file with **record rules**, limiting
    the records portal that users will be able to access:'
  id: totrans-152
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建`security/library_security.xml`文件，使用**记录规则**限制用户可以访问的记录，内容如下：
- en: '[PRE9]'
  id: totrans-153
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Finally, add these data files to the `data` key in the module `__manifest__.py`
    file:'
  id: totrans-154
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将这些数据文件添加到模块`__manifest__.py`文件中的`data`键下：
- en: '[PRE10]'
  id: totrans-155
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE10]'
- en: The record rules created apply filters based on the current user partner record,
    `user.partner_id.id`. The members are filtered using the `partner_id` field, and
    the checkouts are filtered using the `member_id.partner_id` field.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 创建的记录规则根据当前用户合作伙伴记录`user.partner_id.id`应用过滤器。成员使用`partner_id`字段进行过滤，借阅使用`member_id.partner_id`字段进行过滤。
- en: After this, and a module upgrade, portal users will have the access rights needed
    to use the library portal pages.
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，以及模块升级后，门户用户将拥有使用图书馆门户页面的所需访问权限。
- en: Tip
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 小贴士
- en: It is often the case that web controllers avoid the need to have access rights
    added, by using `sudo()` to get elevated access, which is sure to have access
    to the data. While convenient, the usage of `sudo()` should be carefully considered,
    and avoided if possible. It is more secure to implement access security on the
    model layer, using ACLs and record rules, instead of relying on the controller
    logic for that.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 通常情况下，Web控制器通过使用`sudo()`来获取提升权限，从而避免添加访问权限的需求，这肯定能访问到数据。虽然方便，但`sudo()`的使用应谨慎考虑，并在可能的情况下避免使用。在模型层上实现访问安全，使用ACLs和记录规则，而不是依赖于控制器逻辑，更为安全。
- en: Having the necessary access rights configured, the next step is to add the checkouts
    item to the portal main list.
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: 配置必要的访问权限后，下一步是将结账项目添加到门户主列表中。
- en: Adding a portal document type to the main list
  id: totrans-161
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加门户文档类型到主列表
- en: Accessing the portal **My Account** page shows several document types available,
    such as **sales orders** and **invoices**, and the number of items for each.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 访问“我的账户”页面会显示几种可用的文档类型，例如**销售订单**和**发票**，以及每种类型的物品数量。
- en: 'The `library_portal` module should add the **Book Checkouts** option to the
    **My Account** page. Perform the following steps for that:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: '`library_portal`模块应将**图书借阅**选项添加到**我的账户**页面。为此，请执行以下步骤：'
- en: 'Edit the `controllers/__init__.py` file to import the Python file with the
    controller code, which will be in the `portal.py` file:'
  id: totrans-164
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑`controllers/__init__.py`文件以导入包含控制器代码的Python文件，该文件位于`portal.py`文件中：
- en: '[PRE11]'
  id: totrans-165
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Add the controller file, `controllers/portal.py`, with the following code:'
  id: totrans-166
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加控制器文件`controllers/portal.py`，包含以下代码：
- en: '[PRE12]'
  id: totrans-167
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: This extends the `CustomerPortal` controller, provided by the `portal` Odoo
    module. The previous code extends the `_prepare_home_portal_values()` method,
    responsible for calculating the document counters. It adds the `book_checkout_count`
    key to the result values, set with the checkout count.
  id: totrans-168
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这扩展了由`portal` Odoo模块提供的`CustomerPortal`控制器。之前的代码扩展了`_prepare_home_portal_values()`方法，负责计算文档计数器。它向结果值中添加了`book_checkout_count`键，并设置为结账计数。
- en: 'Add the QWeb template file, `views/portal_templates.py`, with the following
    code:'
  id: totrans-169
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加QWeb模板文件`views/portal_templates.py`，包含以下代码：
- en: '[PRE13]'
  id: totrans-170
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'This extends the `portal.portal_my_home` template, responsible for rendering
    the `portal.portal_docs_entry` template should be used to render each document
    item. It uses three variables: the `title`, the `url` to navigate to when clicked,
    and the `placeholder_count`, with the counter identifier provided by the `_prepare_home_portal_values`
    function.'
  id: totrans-171
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 这扩展了`portal.portal_my_home`模板，负责渲染`portal.portal_docs_entry`模板，应使用以渲染每个文档项。它使用三个变量：`title`（标题），点击时导航到的`url`，以及`placeholder_count`（占位符计数），由`_prepare_home_portal_values`函数提供的计数器标识符。
- en: 'Finally, add the new data file to `__manifest__.py`:'
  id: totrans-172
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，将新的数据文件添加到`__manifest__.py`：
- en: '[PRE14]'
  id: totrans-173
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE14]'
- en: The previous steps add the `/my/book-checkouts` page, but this hasn't been implemented
    yet. The next section will do this in a portal-friendly way.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的步骤添加了`/my/book-checkouts`页面，但尚未实现。下一节将以门户友好的方式完成此操作。
- en: Adding a portal document list page
  id: totrans-175
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加门户文档列表页面
- en: The **My Account** home page lists the various document types available. Clicking
    the document type link should open the list of documents available.
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: “我的账户”主页列出了可用的各种文档类型。点击文档类型链接应打开可用的文档列表。
- en: '*Figure 13.4* shows what the document list page should look like:'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '*Figure 13.4*展示了文档列表页面应该的样子：'
- en: '![Figure 13.4 – Portal document list page for book checkouts'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 13.4 – Portal document list page for book checkouts](img/Figure_13.4.png)'
- en: '](img/Figure_13.4_B16119.jpg)'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: '![Figure 13.4_B16119.jpg](img/Figure_13.4_B16119.jpg)'
- en: Figure 13.4 – Portal document list page for book checkouts
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: Figure 13.4 – Portal document list page for book checkouts
- en: The portal provides base features to be used for these document list pages,
    such as record paging, filters, and sort options.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 门户提供了用于这些文档列表页面的基础功能，例如记录分页、过滤器以及排序选项。
- en: 'The previous example showed how to add a document type to the portal home page.
    Next, the document list needs to be implemented. Continuing with the code from
    the previous section, two steps are needed:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的示例展示了如何在门户主页上添加文档类型。接下来，需要实现文档列表。继续使用上一节中的代码，需要进行以下两个步骤：
- en: Edit the controller file, `controllers/portal.py`, to add the code for the `/my/book-checkouts`
    route, which will render the `my_book_checkouts` template.
  id: totrans-183
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑控制器文件`controllers/portal.py`，添加`/my/book-checkouts`路由的代码，这将渲染`my_book_checkouts`模板。
- en: Edit the QWeb template file, `views/portal_templates.py`, to add the `my_book_checkouts`
    template for the book checkout list page.
  id: totrans-184
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑QWeb模板文件`views/portal_templates.py`，为图书借阅列表页面添加`my_book_checkouts`模板。
- en: 'The code to add to `controllers/portal.py` is the following:'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加到`controllers/portal.py`的代码如下：
- en: '[PRE15]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: The previous code adds a route for the `/my/book-checkouts` and `/my/book-checkouts/page/`
    paths. The first is the one used by default, and the second allows navigating
    through the record pages.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码为`/my/book-checkouts`和`/my/book-checkouts/page/`路径添加了路由。第一个是默认使用的路由，第二个允许通过记录页面进行导航。
- en: 'The method code is organized into three sections:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 方法代码分为三个部分：
- en: The first code section prepares the `pager_data` variable, used by the template
    to render the page navigation links. It uses a `pager()` function from the portal
    module, responsible for preparing this data.
  id: totrans-189
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第一段代码准备`pager_data`变量，该变量由模板用于渲染页面导航链接。它使用来自门户模块的`pager()`函数，负责准备这些数据。
- en: The second code section creates the record set to be used, `checkouts`. It does
    so using the domain filter and pager data set previously.
  id: totrans-190
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第二段代码创建了一个要使用的记录集，名为`checkouts`。它是通过使用之前定义的域过滤器和数据集来实现的。
- en: The third and last code section prepares the `values` dictionary and renders
    the QWeb template. The values are initialized using the portal-provided `_prepare_portal_layout_values()`
    function, and then additional data keys are set, including the pager data. The
    record set to use is also set in the values, in this case in the `checkouts` data
    key.
  id: totrans-191
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 第三和最后一个代码部分准备`values`字典并渲染QWeb模板。值使用门户提供的`_prepare_portal_layout_values()`函数初始化，然后设置额外的数据键，包括分页数据。在`checkouts`数据键中设置要使用的记录集。
- en: Tip
  id: totrans-192
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 提示
- en: The portal pages can also have support for user-selected sort order and filters.
    A good example of this is the portal **Tasks**, implemented by the *Project* app.
    Inspecting the corresponding controllers and QWeb templates can provide further
    guidance to add this to other portal pages.
  id: totrans-193
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
  zh: 门户页面也可以支持用户选择的排序顺序和过滤器。一个很好的例子是*项目*应用中实现的门户**任务**。检查相应的控制器和QWeb模板可以提供进一步指导，以将此功能添加到其他门户页面。
- en: 'You have added the controller code, now let''s add the QWeb template with the
    following code:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 您已经添加了控制器代码，现在让我们添加以下代码的QWeb模板：
- en: '[PRE16]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: The previous code declares the `my_book_checkouts` QWeb template. It starts
    by calling the portal page template, `portal.portal_layout`.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码声明了`my_book_checkouts` QWeb模板。它首先调用门户页面模板`portal.portal_layout`。
- en: Then, if there are records to render, it prepares an HTML table from them, calling
    the `portal.portal_table` template.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，如果有记录需要渲染，它将准备一个HTML表格，调用`portal.portal_table`模板。
- en: Next, the template adds the table header and body. The table body uses a for-loop
    on the `checkouts` record set to render each row.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，模板添加了表格的表头和主体。表格主体使用`checkouts`记录集的for循环来渲染每一行。
- en: Noteworthy is the `<a>` link on each record name. When rendering the checkout
    title, the `t-attf` directive is used to generate the link to open the corresponding
    detail. The special `slug()` function is used to generate a human-readable identifier
    for each record.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 值得注意的是，每个记录名称上的`<a>`链接。在渲染借阅标题时，使用`t-attf`指令生成打开相应详情的链接。特殊的`slug()`函数用于为每个记录生成一个可读的标识符。
- en: The link won't work for now, since the document detail page has not been implemented
    yet. The next section will do that.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 由于文档详情页面尚未实现，链接目前无法使用。下一节将完成这一工作。
- en: Adding a portal document detail page
  id: totrans-201
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加门户文档详情页面
- en: The portal has a home page, from which the user can navigate to document lists,
    and then open specific documents. A specific book checkout can be accessed with
    the `/my/book-checkout/<id>` path.
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 门户有一个主页，用户可以从主页导航到文档列表，然后打开特定的文档。可以通过`/my/book-checkout/<id>`路径访问特定的书籍借阅。
- en: 'The previous sections implemented the home page and document list features.
    To complete the portal, the document detail page should be implemented. Continuing
    with the code from the previous section, two steps are needed:'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的章节实现了主页和文档列表功能。为了完成门户，应该实现文档详情页面。继续使用上一节的代码，需要两个步骤：
- en: Edit the controller file, `controllers/portal.py`, to add the code for the `/my/book-checkout`
    route, rendering the `book_checkout` template.
  id: totrans-204
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑控制器文件`controllers/portal.py`，为`/my/book-checkout`路由添加代码，渲染`book_checkout`模板。
- en: Edit the QWeb template file, `views/portal_templates.py`, to add the `book_checkout`
    template for the book checkout list page.
  id: totrans-205
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编辑QWeb模板文件`views/portal_templates.py`，为书籍借阅列表页面添加`book_checkout`模板。
- en: 'The code for the book checkout page controller is straightforward and brings
    nothing new. It is the following:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 书籍借阅页面控制器的代码简单直接，没有带来任何新内容。如下所示：
- en: '[PRE17]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: The previous code adds a route for the `/my/book-checkout/<id>` path, which
    translates the `<id>` into a `library.checkout` record. This record is used as
    a method argument, captured by the `doc` variable name.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码为`/my/book-checkout/<id>`路径添加了一个路由，该路由将`<id>`转换为`library.checkout`记录。此记录用作方法参数，通过`doc`变量名称捕获。
- en: Since the `doc` variable contains the checkout record to use, the method only
    needs to render the QWeb template for it, `library_portal.book_checkout`.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 由于`doc`变量包含要使用的借阅记录，因此该方法只需要为它渲染QWeb模板，`library_portal.book_checkout`。
- en: 'The code to use for the QWeb template is the following:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 用于QWeb模板的代码如下：
- en: '[PRE18]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: The previous code created the `book_checkout` QWeb template. Again, it starts
    by calling the portal page template, `portal.portal_layout`.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码创建了`book_checkout` QWeb模板。再次强调，它首先调用门户页面模板，`portal.portal_layout`。
- en: 'Then, the document details template, `portal.portal_record_layout`, is called
    to prepare the detail content. It uses the following two QWeb variables, which
    should be set:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，调用文档详细信息模板`portal.portal_record_layout`来准备详细内容。它使用以下两个QWeb变量，这些变量应该被设置：
- en: '`card_header` sets the HTML to use for the header.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card_header` 设置用于页眉的HTML。'
- en: '`card_body` sets the HTML to use for the document details.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`card_body` 设置用于文档详细信息的HTML。'
- en: 'This HTML adds rows with the content. Two particular elements are noteworthy:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 这个HTML添加了带有内容的行。有两个特别元素值得关注：
- en: The `<img>` element, adding an image from a data field
  id: totrans-217
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<img>`元素，从数据字段添加图片'
- en: The `<address>` element, rendering an address for a partner record
  id: totrans-218
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<address>`元素，用于渲染合作伙伴记录的地址'
- en: The current implementation is missing a nice usability feature, the **breadcrumb**
    allowing users to navigate back through the links to the portal main page. The
    next section shows how to add this.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 当前实现缺少一个良好的可用性功能，即**面包屑**，允许用户通过链接导航回门户主页。下一节将展示如何添加此功能。
- en: Adding a portal breadcrumb
  id: totrans-220
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加门户面包屑
- en: Portal pages support a breadcrumb, on the top region of the page. By default,
    a home icon is available, allowing users to quickly navigate back to the main
    page. As the user navigates to the document list, and then to a particular document,
    these selections can be added to the breadcrumb.
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 门户页面支持面包屑，位于页面的顶部区域。默认情况下，有一个主页图标，允许用户快速导航回主页。当用户导航到文档列表，然后到特定文档时，这些选择可以添加到面包屑中。
- en: The Odoo portal breadcrumb is added by the `portal.portal_breadcrumbs` template.
    It should be extended to add the specific navigation steps for particular document
    types.
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: Odoo门户面包屑是通过`portal.portal_breadcrumbs`模板添加的。它应该扩展以添加特定文档类型的特定导航步骤。
- en: 'To have the book checkout breadcrumb, edit the `views/portal_templates.py`
    file to add the following template:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 要添加书籍借阅面包屑，编辑`views/portal_templates.py`文件，添加以下模板：
- en: '[PRE19]'
  id: totrans-224
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: The template in the previous code extends the `portal.portal_breadcrumbs` template.
    It extends the `<ol>` element with the `o_portal_submenu` class, adding breadcrumb
    `<li>` elements to it.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 之前的代码中的模板扩展了`portal.portal_breadcrumbs`模板。它通过添加带有`o_portal_submenu`类的`<ol>`元素，向其中添加面包屑`<li>`元素。
- en: 'The extension adds two possible elements: one for the **Checkouts** document
    list, and another for a particular book checkout. The breadcrumb is included in
    all portal pages, and these added elements should be conditionally rendered, only
    if they make sense for the current page.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 扩展添加了两个可能元素：一个用于**结账**文档列表，另一个用于特定的书籍结账。面包屑包含在所有门户页面上，这些添加的元素应该有条件地渲染，只有当它们对当前页面有意义时才渲染。
- en: The previous sections guided you through the various steps needed to add new
    features to the Odoo portal, enabling external users to interact with Odoo.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的章节指导你完成了向Odoo门户添加新功能的各个步骤，使外部用户能够与Odoo交互。
- en: Summary
  id: totrans-228
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: Frontend web pages allow Odoo to also provide features to external users. This
    can be used to display generic information to the public, or give personalized
    information to portal users. The frontend web features are the foundation of the
    Odoo CMS, provided by the *Website* app, and for frontend features such as e-commerce.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 前端网页允许Odoo也为外部用户提供功能。这可以用来向公众展示通用信息，或者向门户用户提供个性化信息。前端网页特性是Odoo CMS的基础，由*网站*应用程序提供，以及用于电子商务等前端特性。
- en: In this chapter, you understood the technical components that are at the core
    of frontend web features, web controllers, and QWeb templates. Web controllers
    implement routes, triggered when accessing certain URL paths called routes, and
    running any specific business logic needed. QWeb templates receive data prepared
    by the web controller and render HTML output with the help of the QWeb templating
    engine.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，你了解了构成前端网页特性、网页控制器和QWeb模板的核心技术组件。网页控制器实现路由，当访问特定URL路径（称为路由）时触发，并运行任何特定的业务逻辑。QWeb模板接收由网页控制器准备的数据，并在QWeb模板引擎的帮助下渲染HTML输出。
- en: You now know how to use these components to implement a public web page integrated
    with the Odoo frontend, including the usage of your own web assets. You also know
    how to leverage the essentials of the Odoo portal to provide self-service features
    to your external users.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 你现在知道如何使用这些组件来实现一个与Odoo前端集成的公共网页，包括使用你自己的网页资源。你还知道如何利用Odoo门户的基本要素为外部用户提供自助服务功能。
- en: This chapter completes your journey through the various components in the Odoo
    framework. The models are the central element around which other components are
    built up. The Odoo base module provides a few essential models developers should
    be familiar with. The next chapter takes on the task of providing an overview
    of these.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 本章完成了你在Odoo框架中各个组件的旅程。模型是其他组件围绕构建的中心元素。Odoo基础模块提供了一些开发人员应该熟悉的必要模型。下一章将承担提供这些模型概述的任务。
- en: Further reading
  id: totrans-233
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 进一步阅读
- en: 'These are additional reference materials that complement the topics discussed
    in this chapter, found in the official Odoo documentation:'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是补充本章讨论主题的额外参考资料，可在官方Odoo文档中找到：
- en: 'Web controllers: [https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html)'
  id: totrans-235
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 网页控制器：[https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html](https://www.odoo.com/documentation/15.0/developer/reference/backend/http.html)
- en: 'QWeb language: [https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html](https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html)'
  id: totrans-236
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: QWeb语言：[https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html](https://www.odoo.com/documentation/15.0/developer/reference/frontend/qweb.html)
- en: 'JavaScript API reference: [https://www.odoo.com/documentation/15.0/developer/reference/frontend/javascript_reference.html](https://www.odoo.com/documentation/15.0/developer/reference/frontend/javascript_reference.html)'
  id: totrans-237
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: JavaScript API参考：[https://www.odoo.com/documentation/15.0/developer/reference/frontend/javascript_reference.html](https://www.odoo.com/documentation/15.0/developer/reference/frontend/javascript_reference.html)
- en: 'Bootstrap documentation: [https://getbootstrap.com/docs/4.1/getting-started/introduction](https://getbootstrap.com/docs/4.1/getting-started/introduction)'
  id: totrans-238
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Bootstrap文档：[https://getbootstrap.com/docs/4.1/getting-started/introduction](https://getbootstrap.com/docs/4.1/getting-started/introduction)
- en: 'Additional Bootstrap learning resources can be found on the Packt Publishing
    technical page: [https://www.packtpub.com/tech/Bootstrap](https://www.packtpub.com/tech/Bootstrap).'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在Packt Publishing技术页面上找到额外的Bootstrap学习资源：[https://www.packtpub.com/tech/Bootstrap](https://www.packtpub.com/tech/Bootstrap)。
