- en: Introduction to Python and Qt
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 和 Qt 简介
- en: To understand the process of creating a **graphical user interface** (**GUI**)
    with Python and Qt, we need to know the basic syntax and structure of the language
    and framework. This chapter will cover the basics of the Python programming language—the
    most common methods and operations that will be used for GUI creation, and the
    basic C++ syntax that is used by the Qt library. In addition, there will be an
    introduction to the Qt framework. Without an explanation of this, developers may
    encounter some problems in the early stages of the development process.
  id: totrans-1
  prefs: []
  type: TYPE_NORMAL
  zh: 要了解使用 Python 和 Qt 创建图形用户界面（GUI）的过程，我们需要了解语言和框架的基本语法和结构。本章将涵盖 Python 编程语言的基础知识——用于
    GUI 创建的最常见方法和操作，以及 Qt 库使用的 C++ 基本语法。此外，还将介绍 Qt 框架。如果没有对此进行解释，开发者在开发过程的早期阶段可能会遇到一些问题。
- en: 'This chapter will cover the following topics:'
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 本章将涵盖以下主题：
- en: The basics of Python
  id: totrans-3
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python 的基础知识
- en: The basics of Qt
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt 的基础知识
- en: The basics of C++
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: C++ 的基础知识
- en: An introduction to the Qt framework
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Qt 框架简介
- en: Comparisons
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 比较
- en: The basics of Python
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 的基础知识
- en: Python is a programming language that is implemented as a high-level interpreter.
    It's easy to learn, with proficient high-level data structures, and is simple,
    with a productive approach to object-oriented programming. It has elegant syntax,
    with dynamic typing and an interpreted nature, as described in the official source.
    It is the best language for scripting and rapid application development. We can
    effortlessly extend the Python interpreter using new functions and data types
    implemented in C or C++ (or other languages that are callable from C). With this
    in mind, the creation of a GUI with the Qt library and Python is a good option. To
    start using Python, you need to download the Python interpreter from the official
    source (if it is not already installed) and install it by following the instructions.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: Python 是一种作为高级解释器实现的编程语言。它易于学习，具有高效的高级数据结构，简单且面向对象编程的方法高效。它具有优雅的语法，动态类型和解释性，如官方源所述。它是脚本和快速应用开发的最佳语言。我们可以通过使用在
    C 或 C++（或可以从 C 调用的其他语言）中实现的新函数和数据类型轻松扩展 Python 解释器。考虑到这一点，使用 Qt 库和 Python 创建 GUI
    是一个好的选择。要开始使用 Python，您需要从官方源（如果尚未安装）下载 Python 解释器，并按照说明进行安装。
- en: 'Then, to install PyQt and PySide, you need to run the following commands in
    the Linux/Unix Terminal or Windows command line:'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，为了安装 PyQt 和 PySide，您需要在 Linux/Unix 终端或 Windows 命令行中运行以下命令：
- en: '[PRE0]'
  id: totrans-11
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'You can download and install the PySide2 binding from the Qt official source
    by following the instructions, or you can install it from **PyPI** (**Python Package
    Index**) through `pip`:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以通过遵循说明从 Qt 官方源下载并安装 PySide2 绑定，或者您可以通过 `pip` 从 **PyPI**（Python 包索引）安装它：
- en: '[PRE1]'
  id: totrans-13
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: During this book, `>` will be used when you need to run a command from the Terminal/Command
    Prompt.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，当您需要从终端/命令提示符运行命令时，将使用 `>`。
- en: A good way to program and to create GUIs using Python is to use the Anaconda
    toolkit, which is the best Python-based programming ecosystem. Installing Anaconda
    is highly recommended. When you install Python, you get IDLE, which is a simple
    editor. Anaconda has the Spyder editor by default, which is superior to IDLE.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Python 和 Qt 创建 GUI 的一个好方法是使用 Anaconda 工具包，这是最佳的基于 Python 的编程生态系统。强烈推荐安装 Anaconda。当您安装
    Python 时，您会得到 IDLE，这是一个简单的编辑器。Anaconda 默认包含 Spyder 编辑器，它优于 IDLE。
- en: 'To run the IDLE editor, just type the following command in your Terminal/Command
    Prompt:'
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 要运行 IDLE 编辑器，只需在您的终端/命令提示符中键入以下命令：
- en: '[PRE2]'
  id: totrans-17
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'Use the following command to open Anaconda''s Spyder editor:'
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 使用以下命令打开 Anaconda 的 Spyder 编辑器：
- en: '[PRE3]'
  id: totrans-19
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Once Anaconda is installed, you can also find it in the OS's start menu.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 安装 Anaconda 后，您也可以在操作系统的开始菜单中找到它。
- en: Python syntax
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python 语法
- en: 'Let''s have a short introduction to Python. Here, you will find the most useful
    and popular definitions and operations that will be used throughout this book.
    For complete information about the Python programming language, you need to look
    at the official documentation ([https://docs.python.org/3/](https://docs.python.org/3/)).
    Let''s focus our attention on the most common things that appear in a Python development
    process. To start, open a Terminal/Command Prompt and type the following:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们对Python进行简要介绍。在这里，您将找到本书中将使用到的最有用和最流行的定义和操作。有关Python编程语言的完整信息，您需要查看官方文档([https://docs.python.org/3/](https://docs.python.org/3/))。让我们将注意力集中在Python开发过程中最常见的事物上。首先，打开终端/命令提示符并输入以下内容：
- en: '[PRE4]'
  id: totrans-23
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Alternatively, type `idle` in Command Prompt/Terminal. Either commands will
    run the Python interpreter:'
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，在命令提示符/终端中输入`idle`。这两个命令都会运行Python解释器：
- en: '[PRE5]'
  id: totrans-25
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: Variables and values
  id: totrans-26
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 变量和值
- en: 'The fundamentals of any programming language, not just in Python and perhaps
    not just in programming either, are the definitions and rules of variables and
    values. Variables and values are elements that describe an object in the world
    and the relations among them. The concept of variables and values is commonly
    used in a form such as—some values have some relation to the variable depending
    on the operator used. Here is an example:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 任何编程语言的基础，不仅仅是Python，也许不仅仅是编程，都是变量和值的定义和规则。变量和值是描述世界中的对象及其之间关系的元素。变量和值的概念通常以如下形式使用——某些值根据所使用的运算符与变量有关。以下是一个示例：
- en: '[PRE6]'
  id: totrans-28
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: Here, `name` and `number` are variables. Similarly, `"Name"` and `1` are the
    values of these variables. In the Python programming language, the variables have
    rules of definition. They must be defined before use, and they cannot be numbers.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，`name`和`number`是变量。同样，`"Name"`和`1`是这些变量的值。在Python编程语言中，变量有定义规则。它们必须在使用前定义，并且不能是数字。
- en: 'The following definition is incorrect:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 以下定义是不正确的：
- en: '[PRE7]'
  id: totrans-31
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Also, variables cannot begin with a number. This definition is incorrect:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，变量不能以数字开头。以下定义是不正确的：
- en: '[PRE8]'
  id: totrans-33
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: Variable names cannot have spaces. It is also undesirable to use the names of
    built-in functions in the standard Python library or any imported and defined
    names in the Python module as variable names.
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: 变量名不能包含空格。也不建议使用标准Python库中内置函数的名称或Python模块中导入和定义的名称作为变量名。
- en: 'The following definition is incorrect:'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: 以下定义是不正确的：
- en: '[PRE9]'
  id: totrans-36
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: Also, any other names of imported modules, functions, and classes should be
    avoided, because using them can lead to an unexpected result. You cannot use Python
    keyword names.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还应避免使用导入模块、函数和类的其他名称，因为使用它们可能会导致意外结果。您不能使用Python关键字名称。
- en: 'The following definition is incorrect:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 以下定义是不正确的：
- en: '[PRE10]'
  id: totrans-39
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'A complete list of keywords, built-in functions, and constants is available
    in the Python documentation. Values must be Python data types, which are as follows:'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: Python文档中提供了完整的关键字、内置函数和常量列表。值必须是Python数据类型，如下所示：
- en: '**Strings**: `str(1)`, `"string"`, `''string''`, and `"""documented_string"""`'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字符串**：`str(1)`，`"string"`，`''string''`，和`"""documented_string"""`'
- en: '**Boolean** **values:** `True` or `False`'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**布尔值**：`True`或`False`'
- en: '**Numbers:** `int(1.1)`, `float(1)`, `complex(1)`, and `1`'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**数字**：`int(1.1)`，`float(1)`，`complex(1)`和`1`'
- en: '**Binary** **data:** `bytes("string", encoding=''utf-8'')` immutable and `bytearray("string",
    encoding=''utf-8'')` mutable'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**二进制** **数据**：`bytes("string", encoding=''utf-8'')`不可变和`bytearray("string",
    encoding=''utf-8'')`可变'
- en: '**Tuples:** `(1, "string")` and `tuple("string")`'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元组**：`(1, "string")`和`tuple("string")`'
- en: '**Lists:** `[1, "string"]` and `list("string")`'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**列表**：`[1, "string"]`和`list("string")`'
- en: '**Dictionaries:** `{"key1": 1, "key2": "value"}` and `dict(key1=1, key2="value")`'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**字典**：`{"key1": 1, "key2": "value"}`和`dict(key1=1, key2="value")`'
- en: '**Sets** **of unique elements:** `set("string")` and `frozenset("string")` immutable sets'
  id: totrans-48
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**唯一元素**的**集合**：`set("string")`和`frozenset("string")`不可变集合'
- en: '**Functions:** `def func():pass`'
  id: totrans-49
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**函数**：`def func():pass`'
- en: '**Classes:** `class C:pass`'
  id: totrans-50
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**类**：`class C:pass`'
- en: '**Modules:** Files with extensions such as `file_name.py`'
  id: totrans-51
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**模块**：具有`file_name.py`等扩展名的文件'
- en: '**NoneType** **objects****: **`None`'
  id: totrans-52
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**NoneType** **对象**：**`None`**'
- en: Strings
  id: totrans-53
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 字符串
- en: 'When they are created, strings need to use quotes, `''some text''`, double
    quotes `"some text"`, or documented strings `"""some text"""`. Strings in Python
    are interpreted as a sequence of characters and can be used for the following
    operations:'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 当它们被创建时，字符串需要使用引号，`'some text'`，双引号`"some text"`，或文档字符串`"""some text"""`。Python中的字符串被解释为字符序列，可以用于以下操作：
- en: 'Slicing—the result is a string, starting from `0` to the 2 character. The first
    character is `0`:'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 切片——结果是字符串，从`0`开始到第2个字符。第一个字符是`0`：
- en: '[PRE11]'
  id: totrans-56
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'Reversed slicing—the result is a string, starting from the specified index
    of the character in the string to the 0 character:'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 反向切片——结果是字符串，从字符串中指定的字符索引开始到0字符：
- en: '[PRE12]'
  id: totrans-58
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'Concatenation—the result is a merged string:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 连接——结果是合并后的字符串：
- en: '[PRE13]'
  id: totrans-60
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Multiplication—the `"string"` result is multiplied by the second value:'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 乘法——`"string"`的结果与第二个值相乘：
- en: '[PRE14]'
  id: totrans-62
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'Splitting—the result is a list split by a separator, such as a space or a comma:'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 分割——结果是按分隔符（如空格或逗号）分割的列表：
- en: '[PRE15]'
  id: totrans-64
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'Replacing—the result is a string with new characters:'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 替换——结果是包含新字符的字符串：
- en: '[PRE16]'
  id: totrans-66
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The most useful string methods are as follows:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 最有用的字符串方法如下：
- en: 'Conversion integer to the string, the result of which is a string:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 将整数转换为字符串，结果是字符串：
- en: '[PRE17]'
  id: totrans-69
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: 'Length of the string—the result is an integer:'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 字符串长度——结果是整数：
- en: '[PRE18]'
  id: totrans-71
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Encoding with UTF—the result is an encoded binary object:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UTF进行编码——结果是编码后的二进制对象：
- en: '[PRE19]'
  id: totrans-73
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Decoding with UTF—the result is a decoded string:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 使用UTF进行解码——结果是解码后的字符串：
- en: '[PRE20]'
  id: totrans-75
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: Very often, we have to work with strings and solve problems with different encoding
    that is required to understand the manipulation of different texts in the application.
    This is just a short description of strings; it is recommended that you study
    strings in detail in the Python documentation.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 非常常见的是，我们必须处理字符串并解决应用中需要理解不同文本操作的不同编码问题。这只是字符串的简要描述；建议您在Python文档中详细了解字符串。
- en: Boolean
  id: totrans-77
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 布尔值
- en: Python provides logical constants, such as `True` and `False`.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了逻辑常量，如`True`和`False`。
- en: 'Here''s a definition of the `var` variable with a value equal to `True`, and
    when we call the `var` variable, the result is a Boolean value, which is `True`:'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是定义值为`True`的`var`变量的示例，当我们调用`var`变量时，结果是布尔值，即`True`：
- en: '[PRE21]'
  id: totrans-80
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'Define the `var` variable with a `False` value:'
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 定义值为`False`的`var`变量：
- en: '[PRE22]'
  id: totrans-82
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'Use the `bool` function from the standard library:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 使用标准库中的`bool`函数：
- en: '[PRE23]'
  id: totrans-84
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: The final logical operations return `True` if the variable exists, or if its
    value is equal to `1`. If it doesn't exist or is equal to `0`, then it returns `False`.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的逻辑运算返回`True`，如果变量存在或其值等于`1`。如果它不存在或等于`0`，则返回`False`。
- en: Numbers
  id: totrans-86
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数字
- en: 'The Python interpreter can be used as a simple calculator, and provides some
    useful tools for working with numbers:'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: Python解释器可以用作简单的计算器，并提供一些用于处理数字的有用工具：
- en: '[PRE24]'
  id: totrans-88
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: 'This code defines the `num` variable, with a value equal to `2`:'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码定义了值为`2`的`num`变量：
- en: '[PRE25]'
  id: totrans-90
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: 'When we perform operations with numbers using the division operator (`/`),
    the result in Python 2.x is an integer, whereas in Python 3.x it''s a float:'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用除法运算符（`/`）进行数字操作时，Python 2.x的结果是整数，而Python 3.x的结果是浮点数：
- en: '[PRE26]'
  id: totrans-92
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'When we perform operations with numbers using the floor division operator (`//`),
    the result in Python 2.x is an integer, and with Python 3.x it''s an integer also:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们使用地板除法运算符（`//`）进行数字操作时，Python 2.x的结果是整数，Python 3.x的结果也是整数：
- en: '[PRE27]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: Here, and throughout the book, we will try to clarify the differences between
    the major versions of Python with examples. As we can see, Python 2.x returns
    an `int()` value with classic division, and Python 3.x returns a `float()` value.
    With floor division, all versions return an `int()` value.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 在这里，以及在整个书中，我们将通过示例尝试阐明Python主要版本之间的差异。正如我们所见，Python 2.x使用经典除法返回`int()`值，而Python
    3.x返回`float()`值。使用地板除法，所有版本都返回`int()`值。
- en: 'The outcome of the following operation is an integer (remainder of the division):'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 以下操作的结果是整数（除法的余数）：
- en: '[PRE28]'
  id: totrans-97
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'Here are some operations with numbers:'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些数字操作示例：
- en: 'When converting the string value to the integer, the result is an integer:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串值转换为整数时，结果是整数：
- en: '[PRE29]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: '`int` to `float`—the result is a `float`:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '`int`到`float`——结果是`float`：'
- en: '[PRE30]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'Complex number—the result is a number with a real number and an imaginary part:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 复数——结果是包含实数和虚部的数：
- en: '[PRE31]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: Binary
  id: totrans-105
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 二进制
- en: 'To start working with images, videos, photos, and other graphical objects,
    we need to understand that this data is binary, and the most useful tools for
    this are `bytes()` and `bytearray()`:'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 要开始处理图像、视频、照片和其他图形对象，我们需要了解这些数据是二进制的，而最有用的工具是`bytes()`和`bytearray()`：
- en: 'Convert a string to a binary object; the result is a binary object:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串转换为二进制对象；结果是二进制对象：
- en: '[PRE32]'
  id: totrans-108
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: 'Convert a string to a bytearray; the result is a bytearray:'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 将字符串转换为bytearray；结果是bytearray：
- en: '[PRE33]'
  id: totrans-110
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Change the binary array (this operation is available only with `bytearray()`):'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 改变二进制数组（此操作仅在`bytearray()`中可用）：
- en: '[PRE34]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: Tuples
  id: totrans-113
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 元组
- en: Tuples are an immutable sequence of elements in Python. Elements can be strings,
    numbers, or other Python data types.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是Python中不可变的元素序列。元素可以是字符串、数字或其他Python数据类型。
- en: 'Create and call the following tuple:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 创建并调用以下元组：
- en: '[PRE35]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: A tuple is a sequence of elements separated by commas, and, hence, defining
    a tuple in the form `("string")` is incorrect. If the tuple consists of only one
    element, it needs a comma, for example, `("string",)`.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 元组是由逗号分隔的元素序列，因此，以`("string")`的形式定义元组是不正确的。如果元组只有一个元素，则需要逗号，例如，`("string",)`。
- en: 'Tuple slices—all elements of the tuple `tu[0:]`, the last element, element
    with index `[2]`:'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: 元组切片——元组的所有元素 `tu[0:]`，最后一个元素，索引为 `[2]` 的元素：
- en: '[PRE36]'
  id: totrans-119
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'This returns the amount of specified elements present in the tuple:'
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回元组中存在的指定元素的数量：
- en: '[PRE37]'
  id: totrans-121
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'This returns the index of the specified element that is present in the tuple:'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回元组中指定元素首次出现的索引：
- en: '[PRE38]'
  id: totrans-123
  prefs: []
  type: TYPE_PRE
  zh: '[PRE38]'
- en: Lists
  id: totrans-124
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 列表
- en: 'The most useful tool for data processing is the list. Let''s look at some methods
    and operations involving lists:'
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 数据处理中最有用的工具是列表。让我们看看涉及列表的一些方法和操作：
- en: 'Define a list. The result is a list:'
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个列表。结果是列表：
- en: '[PRE39]'
  id: totrans-127
  prefs: []
  type: TYPE_PRE
  zh: '[PRE39]'
- en: 'This returns all elements of the list. The result is a list:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回列表的所有元素。结果是列表：
- en: '[PRE40]'
  id: totrans-129
  prefs: []
  type: TYPE_PRE
  zh: '[PRE40]'
- en: 'This returns the first element of the list:'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回列表的第一个元素：
- en: '[PRE41]'
  id: totrans-131
  prefs: []
  type: TYPE_PRE
  zh: '[PRE41]'
- en: 'This returns the last element of the list:'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回列表的最后一个元素：
- en: '[PRE42]'
  id: totrans-133
  prefs: []
  type: TYPE_PRE
  zh: '[PRE42]'
- en: 'This returns a list with the last object:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回包含最后一个对象的列表：
- en: '[PRE43]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE43]'
- en: 'This returns the first character of the second item of the list. The item must
    be in sequence:'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 这将返回列表第二个元素的第一个字符。该元素必须按顺序排列：
- en: '[PRE44]'
  id: totrans-137
  prefs: []
  type: TYPE_PRE
  zh: '[PRE44]'
- en: 'This is incorrect. Integer objects are not subscriptable:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 这是错误的。整数对象是不可索引的：
- en: '[PRE45]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE45]'
- en: 'The following is a list of lists:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个列表的列表：
- en: '[PRE46]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE46]'
- en: 'Define a list with name `var` and then define a new list with `var` list inside
    this list:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 定义一个名为 `var` 的列表，然后在这个列表内部定义一个新的列表：
- en: '[PRE47]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE47]'
- en: 'The following code snippet shows how to change the first and second elements
    of the list:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码片段展示了如何更改列表的第一个和第二个元素：
- en: '[PRE48]'
  id: totrans-145
  prefs: []
  type: TYPE_PRE
  zh: '[PRE48]'
- en: 'Lists can be concatenated in the following manner:'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以按以下方式连接：
- en: '[PRE49]'
  id: totrans-147
  prefs: []
  type: TYPE_PRE
  zh: '[PRE49]'
- en: 'This is list multiplication. The list must be multiplied by a number (integer)
    value:'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: 这是列表乘法。列表必须乘以一个数字（整数）值：
- en: '[PRE50]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE50]'
- en: 'The most popular operations with lists are as follows:'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: 列表中最常用的操作如下：
- en: 'This is how a new item is added to the end of the list:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在列表末尾添加新项的方式：
- en: '[PRE51]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE51]'
- en: 'This is how a new item is inserted at the `0` position of the list:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 这是在列表的`0`位置插入新项的方式：
- en: '[PRE52]'
  id: totrans-154
  prefs: []
  type: TYPE_PRE
  zh: '[PRE52]'
- en: 'To check whether an item is in the list, the `in` operator could be used:'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查一个项目是否在列表中，可以使用`in`运算符：
- en: '[PRE53]'
  id: totrans-156
  prefs: []
  type: TYPE_PRE
  zh: '[PRE53]'
- en: 'This finds the element index and returns the index of the first element with
    a specified value:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: 这将找到具有指定值的元素索引并返回第一个元素的索引：
- en: '[PRE54]'
  id: totrans-158
  prefs: []
  type: TYPE_PRE
  zh: '[PRE54]'
- en: 'This removes the element with the specified index:'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 这将移除指定索引的元素：
- en: '[PRE55]'
  id: totrans-160
  prefs: []
  type: TYPE_PRE
  zh: '[PRE55]'
- en: 'This removes the element with the specified value:'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: 这将移除具有指定值的元素：
- en: '[PRE56]'
  id: totrans-162
  prefs: []
  type: TYPE_PRE
  zh: '[PRE56]'
- en: Python provides list generators that work faster than other list creation mechanisms,
    such as the `for` loop.
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: Python提供了比其他列表创建机制（如`for`循环）更快的列表生成器。
- en: 'Lists can be generated in the following manner:'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 列表可以按以下方式生成：
- en: '[PRE57]'
  id: totrans-165
  prefs: []
  type: TYPE_PRE
  zh: '[PRE57]'
- en: 'Join the list to the string with a specified separator. The list items must
    be strings:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 使用指定的分隔符将列表连接到字符串上。列表项必须是字符串：
- en: '[PRE58]'
  id: totrans-167
  prefs: []
  type: TYPE_PRE
  zh: '[PRE58]'
- en: Dictionaries
  id: totrans-168
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 词典
- en: Another way to create data in Python is with a dictionary. In reality, a dictionary
    is not a sequence; it is a mapping of data, and, because of this, operations that
    are available for tuples and lists are not applicable to the dictionary. Commonly
    used methods and operations involving dictionaries are as follows.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 在Python中创建数据的另一种方法是使用字典。实际上，字典不是一个序列；它是一个数据映射，因此，适用于元组和列表的操作不适用于字典。常用的字典方法和操作如下。
- en: 'Create the dictionary:'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: 创建词典：
- en: '[PRE59]'
  id: totrans-171
  prefs: []
  type: TYPE_PRE
  zh: '[PRE59]'
- en: 'A dictionary implies the presence of a key and value, and each key/value pair needs
    to be separated with a comma in the dictionary, for example, {key: value, key:
    value, ...}.'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '字典表示存在一个键和一个值，并且每个键/值对在字典中需要用逗号分隔，例如，{key: value, key: value, ...}。'
- en: 'This gets the dictionary value by the key. The result is the value of the dictionary:'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过键获取字典值。结果是字典的值：
- en: '[PRE60]'
  id: totrans-174
  prefs: []
  type: TYPE_PRE
  zh: '[PRE60]'
- en: The most useful operations with dictionaries are as follows.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 与字典最相关的操作如下。
- en: 'This gets the dictionary value by the key, and we just get the value for the
    key that exists:'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: 这通过键获取字典值，我们只获取存在键的值：
- en: '[PRE61]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE61]'
- en: 'This gets all the keys of the dictionary. The result is a `dict_keys` object
    with keys:'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: 这获取字典的所有键。结果是具有键的 `dict_keys` 对象：
- en: '[PRE62]'
  id: totrans-179
  prefs: []
  type: TYPE_PRE
  zh: '[PRE62]'
- en: 'This gets all the values of the dictionary, and the result is a `dict_values`
    object with values:'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 这获取字典的所有值，结果是具有值的 `dict_values` 对象：
- en: '[PRE63]'
  id: totrans-181
  prefs: []
  type: TYPE_PRE
  zh: '[PRE63]'
- en: 'This gets all the keys and values of the dictionary in tuple form, and the
    result is `dict_items`:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 这将以元组形式获取字典的所有键和值，结果是 `dict_items`：
- en: '[PRE64]'
  id: totrans-183
  prefs: []
  type: TYPE_PRE
  zh: '[PRE64]'
- en: 'This adds a new item to the dictionary:'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 这在字典中添加了一个新条目：
- en: '[PRE65]'
  id: totrans-185
  prefs: []
  type: TYPE_PRE
  zh: '[PRE65]'
- en: 'This deletes the value with the specified key of the dictionary. The result
    is the deleted value:'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: 这删除了具有指定键的字典值。结果是已删除的值：
- en: '[PRE66]'
  id: totrans-187
  prefs: []
  type: TYPE_PRE
  zh: '[PRE66]'
- en: 'If the key does not exist, then the second value is returned:'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 如果键不存在，则返回第二个值：
- en: '[PRE67]'
  id: totrans-189
  prefs: []
  type: TYPE_PRE
  zh: '[PRE67]'
- en: 'This clears the dictionary. The result is an empty dictionary:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 这清除了字典。结果是空字典：
- en: '[PRE68]'
  id: totrans-191
  prefs: []
  type: TYPE_PRE
  zh: '[PRE68]'
- en: Sets
  id: totrans-192
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 集合
- en: Also, in some cases, we can use sets. The set is a complex (or group) of unique
    elements that can be used with data creation. Sets in Python can be created in
    the following way.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，在某些情况下，我们还可以使用集合。集合是一组唯一的元素（或组），可以用于数据创建。Python 中的集合可以按以下方式创建。
- en: 'This creates a set from the elements of the list:'
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 这将从列表的元素中创建一个集合：
- en: '[PRE69]'
  id: totrans-195
  prefs: []
  type: TYPE_PRE
  zh: '[PRE69]'
- en: Sets are mutable.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 集合是可变的。
- en: 'Create a set as `se`, and change the set by adding a new element:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个名为 `se` 的集合，并通过添加新元素来更改集合：
- en: '[PRE70]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE70]'
- en: To create an immutable set, we need to use `frozenset()` from the Python standard
    library.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个不可变集合，我们需要使用 Python 标准库中的 `frozenset()`。
- en: Functions
  id: totrans-200
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 函数
- en: We can treat functions as the result of complex variables and their related
    operations. A function in Python can receive parameters, return a result, and/or
    provide some actions with variables and values. To build functions in Python,
    use the following approach to function definition.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以将函数视为复变数及其相关操作的结果。Python 中的函数可以接收参数，返回结果，以及/或使用变量和值执行一些操作。要在 Python 中构建函数，请使用以下函数定义方法。
- en: 'Define the function—`param` is a parameter of the function that is set as `None`:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 定义函数——`param` 是函数的参数，被设置为 `None`：
- en: '[PRE71]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE71]'
- en: The preceding code increments the parameter and returns, and then calls the
    function with the parameter.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 前面的代码增加参数并返回，然后使用参数调用函数。
- en: Classes
  id: totrans-205
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 类
- en: 'Modern styles of application creation follow the **object-oriented programming**
    (**OOP**) approach, so it is mandatory to use and understand classes. The easiest
    way to create a class using Python is as follows:'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: 现代应用程序创建风格遵循 **面向对象编程**（**OOP**）方法，因此使用和理解类是强制性的。使用 Python 创建类的最简单方法是以下：
- en: '[PRE72]'
  id: totrans-207
  prefs: []
  type: TYPE_PRE
  zh: '[PRE72]'
- en: The `__init__()` method is a constructor of the class, `self.var` is an attribute
    of the class, `self.func()` calls the function, and `def func1(self)` and `def
    func2(self)` are methods of the class. The first `print()` function is used with
    Python 3.x, and the second, commented `print` function is used with Python 2.x.
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`__init__()` 方法是类的构造函数，`self.var` 是类的属性，`self.func()` 调用函数，`def func1(self)`
    和 `def func2(self)` 是类的方法。第一个 `print()` 函数用于 Python 3.x，第二个注释的 `print` 函数用于 Python
    2.x。'
- en: 'This creates an instance of the class, and calls `func2()` of the class:'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 这创建了一个类的实例，并调用了类的 `func2()`：
- en: '[PRE73]'
  id: totrans-210
  prefs: []
  type: TYPE_PRE
  zh: '[PRE73]'
- en: As we can see, classes allow us to build code with broad functionality. By means
    of the `self` argument, we can use our variables at any place in the class, making
    use of the dynamic nature of Python. In addition, classes provide fundamental
    methods, such as inheritance, that make classes the basis of OOP, which we will
    discuss later.
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 如我们所见，类允许我们构建具有广泛功能的代码。通过使用 `self` 参数，我们可以在类的任何地方使用我们的变量，利用 Python 的动态特性。此外，类提供了基本方法，如继承，这使得类成为
    OOP 的基础，我们将在后面讨论。
- en: Now, let's move on from Command Prompt/Terminal typing and try to create a standard
    Python module that will demonstrate the standard syntax.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们从命令提示符/终端输入中跳出来，尝试创建一个标准的 Python 模块，以展示标准语法。
- en: 'To create a Python module, follow these steps:'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建一个 Python 模块，请按照以下步骤操作：
- en: Turn on your device.
  id: totrans-214
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的设备。
- en: Open your favorite editor, such as Notepad, PyCharm, Eclipse, or Emacs. Anaconda
    has a preinstalled Python editor called Spyder, which we mentioned in the *Basics
    of Python* section.
  id: totrans-215
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您喜欢的编辑器，例如记事本、PyCharm、Eclipse 或 Emacs。Anaconda 预装了一个名为 Spyder 的 Python 编辑器，我们在
    *Python 基础* 部分提到了它。
- en: Create a new directory called `App/`.
  id: totrans-216
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个名为 `App/` 的新目录。
- en: Create a new file with the future name of our GUI application, such as `u_app.py`.
  id: totrans-217
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建一个新文件，例如我们的 GUI 应用程序的将来名称为 `u_app.py`。
- en: Switch our attention to this file.
  id: totrans-218
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将注意力转向此文件。
- en: A Python module is a file containing Python definitions and instructions that
    has the `.py` extension. There are also other extensions, such as `.pyc`, `.pyw`,
    and `.pyd`, which will be explained later on in the book. One of the differences
    between a simple file and a module in Python is that a module has the ability
    to import definitions from one module into another. To demonstrate this, let's
    create another new file in the `App/` directory, named `u_tools.py`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: Python模块是一个包含Python定义和指令的文件，具有`.py`扩展名。还有其他扩展名，如`.pyc`、`.pyw`和`.pyd`，这些将在本书的后续部分进行解释。Python中简单文件和模块之间的一个区别是，模块具有将定义从模块导入到另一个模块的能力。为了演示这一点，让我们在`App/`目录中创建另一个新文件，命名为`u_tools.py`。
- en: According to the generally accepted Python coding rules, described in the **Python
    Enhancement Proposals** (**PEP8**) Python language style guide, modules should
    have short, lowercase names such as `u_app.py`. Classes should be in upper camel
    case, such as `UTool():`. For functions, lowercase is preferred, such as `def
    func():;`.
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 根据普遍接受的Python编码规则，这些规则在**Python增强提案**（**PEP8**）Python语言风格指南中描述，模块应该有简短的小写名称，例如`u_app.py`。类应该使用大驼峰命名法，例如`UTool()`。对于函数，首选小写，例如`def
    func():;`。
- en: 'So, now that the files have been created, incorporate the following lines in
    the `u_app.py` file:'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，现在文件已经创建，请在`u_app.py`文件中包含以下行：
- en: 'In the import section, import the `UTools` class from the `u_tools.py` file:'
  id: totrans-222
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在导入部分，从`u_tools.py`文件中导入`UTools`类：
- en: '[PRE74]'
  id: totrans-223
  prefs: []
  type: TYPE_PRE
  zh: '[PRE74]'
- en: Create the `UApp` class that inherits `UTools`**:**
  id: totrans-224
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 创建继承自`UTools`的`UApp`类**：**
- en: '[PRE75]'
  id: totrans-225
  prefs: []
  type: TYPE_PRE
  zh: '[PRE75]'
- en: In the `__init__()` constructor, call the `UTools` class constructor and attribute
    as a string variable.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 在`__init__()`构造函数中，调用`UTools`类构造函数并将属性作为字符串变量。
- en: 'Add the `u_app1()` function to the `UApp` class:'
  id: totrans-227
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`u_app1()`函数添加到`UApp`类中：
- en: '[PRE76]'
  id: totrans-228
  prefs: []
  type: TYPE_PRE
  zh: '[PRE76]'
- en: This function will concatenate the strings from the `UApp` and `UTools` classes
    and print the results. The commented `print` function is used in Python 2.x and
    can be used if you uncomment it and then comment the previous line, with the `print()`
    function.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数将`UApp`和`UTools`类的字符串连接起来并打印结果。在Python 2.x中使用的注释`print`函数，如果取消注释并注释上一行，则可以使用`print()`函数。
- en: 'Add the `u_app2()` function to the `UApp` class:'
  id: totrans-230
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将`u_app2()`函数添加到`UApp`类中：
- en: '[PRE77]'
  id: totrans-231
  prefs: []
  type: TYPE_PRE
  zh: '[PRE77]'
- en: This function creates a new list; the `for` statement is a loop for the list
    from the `UTools` class, and it checks whether it is a digit or a letter. If it
    is not equal to `"."`, it sets all letters to lowercase. Then, join the list to
    the string and print.
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: 此函数创建一个新的列表；`for`语句是`UTools`类列表的循环，并检查它是否是数字或字母。如果不等于`"."`，则将所有字母设置为小写。然后将列表连接到字符串并打印。
- en: 'Complete the `u_tools.py` file:'
  id: totrans-233
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 完成以下`u_tools.py`文件：
- en: '[PRE78]'
  id: totrans-234
  prefs: []
  type: TYPE_PRE
  zh: '[PRE78]'
- en: This instruction is used to define how the code will be running in this file.
    If this module is imported, `__name__` will not be `"__main__"`, and we can use
    the parts of this module in another place. If this module is run as a file (from
    the terminal, as a subprocess), `__name__` will be `"__main__"` and the class
    instance will be created with a call of the first and second functions. So, now
    we need to add the `UTools` class to the `u_tools.py` file.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 此指令用于定义代码在此文件中的运行方式。如果此模块被导入，`__name__`将不是`"__main__"`，我们可以在其他地方使用此模块的某些部分。如果此模块作为文件运行（从终端，作为子进程），`__name__`将是`"__main__"`，并且将通过调用第一个和第二个函数创建类实例。因此，现在我们需要将`UTools`类添加到`u_tools.py`文件中。
- en: 'Add the following code to the `u_tools.py` file:'
  id: totrans-236
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下代码添加到`u_tools.py`文件中：
- en: '[PRE79]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE79]'
- en: In this module, the `UTools` class has been created with a string variable in
    the `__init__()` method. The `u_list()` function converts a string to a list.
    The code matches the PEP8 style.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在此模块中，`UTools`类已在`__init__()`方法中使用字符串变量创建。`u_list()`函数将字符串转换为列表。代码符合PEP8风格。
- en: 'Now, let''s have a look at some Python syntax. It is recommended to add two
    blank lines, one before the definition of the class, and one before the function
    within the class. Along with this, it is recommended to add two blank lines between
    function definitions if you are not using classes. The Python interpreter executes
    a script as a block. The block of code starts with four spaces fewer than the
    previous line. The interpreter can decide that this is the end of the block, when
    the spaces before the next block are smaller than the previous ones, by four spaces.
    As you can see, `#` marks a comment on the line, and the comment text is ignored
    by the interpreter. The definitions of classes, functions, and statements are
    implemented using `:`. The ends of lines are marked with `;`, and the execution
    of several commands on one line is possible, but not recommended. It is preferable
    to write each line of the script on a new line, for ease of comprehension. So,
    we can read these two files and try to start them. To do this, we need to open
    the Terminal/Command Prompt and type the following command:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们看看一些Python语法。建议在类的定义之前和类内的函数之前各添加两个空行。此外，如果你没有使用类，建议在函数定义之间也添加两个空行。Python解释器将脚本作为一个块来执行。代码块从比上一行少四个空格的位置开始。当下一块的空格比前一个块小四个空格时，解释器可以决定这是块的结束。正如你所见，`#`在行上标记了一个注释，注释文本被解释器忽略。类、函数和语句的定义使用`:`实现。行尾用`;`标记，一行上执行多个命令是可能的，但不推荐。为了便于理解，最好将脚本的每一行都写在新的一行上。因此，我们可以读取这两个文件并尝试启动它们。为此，我们需要打开终端/命令提示符并输入以下命令：
- en: '[PRE80]'
  id: totrans-240
  prefs: []
  type: TYPE_PRE
  zh: '[PRE80]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出显示在下图中：
- en: '![](img/23f40b69-af2a-4bd7-af27-cf4a44d65855.png)'
  id: totrans-242
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/23f40b69-af2a-4bd7-af27-cf4a44d65855.png)'
- en: If you can see a similar result, then everything is correct. And what does Python
    do when running this file?
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你看到类似的结果，那么一切就都正确了。那么Python在运行这个文件时做了什么呢？
- en: Python interpreter
  id: totrans-244
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Python解释器
- en: The **Global Interpreter Lock** (**GIL**) is a mechanism that's used by the
    interpreter to ensure that only one thread executes Python bytecode at a time. Locking
    the interpreter to one real-time thread helps the interpreter to be multithreaded,
    to the side of parallelism of the multiprocessor machines. The GIL is always released
    when performing I/O operations. The Python interpreter is a program that translates
    and launches other programs that contain instructions.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: '**全局解释器锁**（**GIL**）是解释器用来确保一次只有一个线程执行Python字节码的一种机制。将解释器锁定到一个实时线程有助于解释器成为多线程的，以支持多处理器机器的并行性。当执行I/O操作时，GIL总是被释放。Python解释器是一个程序，它将其他包含指令的程序翻译并启动。'
- en: It is sometimes called the **Python Virtual Machine** (**PVM**), along the lines
    of the **Java Virtual Machine** (**JVM**), and it provides procedures to translate
    code to bytecode and execute the next step, in contrast to languages such as C++
    that translate code into instructions that run directly on hardware. It is important
    to understand languages such as Python and Java, which constitute a forward step
    in the advancement of programming technology.
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 它有时被称为**Python虚拟机**（**PVM**），类似于**Java虚拟机**（**JVM**），它提供了将代码翻译成字节码并执行下一步的进程，与像C++这样的语言不同，这些语言将代码翻译成直接在硬件上运行的指令。理解像Python和Java这样的语言非常重要，它们构成了编程技术进步的一大步。
- en: Let's see how the Python interpreter runs code lines. First, it starts to execute
    the code line by line, from top to bottom. Python 3.x compiles the import modules
    in the `_pycache_` directory where the file is located, and adds the `.pyc` extension
    to the compiled files. Then, the PVM will translate the instructions into bytecode
    and execute them.
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看Python解释器是如何运行代码行的。首先，它从上到下逐行执行代码。Python 3.x将位于文件所在位置的`_pycache_`目录中的导入模块编译，并将`.pyc`扩展名添加到编译文件中。然后，PVM将指令翻译成字节码并执行它们。
- en: Qt framework
  id: totrans-248
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt框架
- en: Qt is a cross-platform application framework and widget toolkit for creating
    GUI applications that run on all major desktop, mobile, and embedded platforms.
    Most GUI programs developed with Qt have a native-looking interface. In such cases,
    Qt is classified as a widget toolkit. To use Qt as a development framework, you
    need to download Qt from the official source ([https://www.qt.io/](https://www.qt.io/))
    and then install it on your device. Qt supports compilers such as the GCC C++
    compiler and the Visual Studio suite. Qt provides powerful IDEs and tools such
    as Qt Creator, Qt Designer, Qt Assistant, and Qt Linguist. To create a GUI with
    Qt, simply open Qt Creator, and welcome to creating graphics applications! However,
    this book will not describe how to create a GUI with an IDE such as Qt Creator
    or Qt Designer. This book is primarily concerned with creating GUIs with Qt and
    Python. But if you want to start with Qt Creator, then you are welcome to move
    ahead. Because Qt is basically a C++ library, we first need to understand the
    basic methods and syntax of C++.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 是一个跨平台的应用程序框架和窗口工具包，用于创建在所有主要桌面、移动和嵌入式平台上运行的 GUI 应用程序。大多数使用 Qt 开发的 GUI 程序都具有本地外观的界面。在这种情况下，Qt
    被归类为窗口工具包。要使用 Qt 作为开发框架，您需要从官方源（[https://www.qt.io/](https://www.qt.io/））下载 Qt，然后将其安装到您的设备上。Qt
    支持 GCC C++ 编译器和 Visual Studio 套件等编译器。Qt 提供了 Qt Creator、Qt Designer、Qt Assistant
    和 Qt Linguist 等强大的 IDE 和工具。要使用 Qt 创建 GUI，只需打开 Qt Creator，欢迎您创建图形应用程序！然而，本书不会描述如何使用
    Qt Creator 或 Qt Designer 等IDE创建 GUI。本书主要关注使用 Qt 和 Python 创建 GUI。但如果您想从 Qt Creator
    开始，那么欢迎您继续前进。因为 Qt 主要是 C++ 库，我们首先需要了解 C++ 的基本方法和语法。
- en: C++
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++
- en: As you have probably guessed from the name, C++ is a C-based language and has
    a similar syntax. We can assume that Python is also related to C, but do not confuse
    these languages. If C++ is a C-callable language and has similar syntax, we can
    call the Python interpreter a C-based, low-level virtual machine, as we discussed
    earlier. Python syntax and C syntax are not the same.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 如您从名称中可能猜到的，C++ 是一种基于 C 的语言，并且具有类似的语法。我们可以假设 Python 也与 C 有关，但不要混淆这些语言。如果 C++
    是可调用的 C 语言并且具有类似的语法，那么我们可以将 Python 解释器称为我们之前讨论过的基于 C 的、低级虚拟机。Python 语法和 C 语法并不相同。
- en: 'To demonstrate this, we need to create a file named `cpp_file1.cpp` in the
    `App/` directory, created for application development, and add the following lines
    to the file:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 为了演示这一点，我们需要在为应用程序开发创建的 `App/` 目录中创建一个名为 `cpp_file1.cpp` 的文件，并向文件中添加以下行：
- en: '[PRE81]'
  id: totrans-253
  prefs: []
  type: TYPE_PRE
  zh: '[PRE81]'
- en: 'Lines with # are directives that are read and interpreted, known as the preprocessor.
    Then, there is the declaration of a function in C++, `main()`. Everything inside
    braces ({}) is a body function. To get the result of this code, you need to install
    a C ++ compiler. IDEs such as DEV-C++, Code::blocks, and Visual Studio Express
    allow us to compile the code. If you''re a Linux/Mac user, the C++ compiler can
    be installed on your system (such as GCC or Clang) and you can compile this code
    using a Terminal. After downloading and installing the C++ compiler, you need
    to compile this code according to the compiler''s features.'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '带有 # 的行是读取和解释的指令，称为预处理器。然后，是 C++ 中函数的声明，`main()`。花括号 `{}` 内的内容是一个函数体。要获取此代码的结果，您需要安装一个
    C++ 编译器。如 DEV-C++、Code::blocks 和 Visual Studio Express 等IDE允许我们编译代码。如果您是 Linux/Mac
    用户，C++ 编译器可以安装到您的系统上（如 GCC 或 Clang），然后您可以使用终端编译此代码。下载并安装 C++ 编译器后，您需要根据编译器的特性编译此代码。'
- en: 'As a result, a file such as `cpp_file1.exe` will be compiled, and then you
    need to type the following in the Terminal/Command Prompt:'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，将生成一个如 `cpp_file1.exe` 的文件，然后您需要在终端/命令提示符中输入以下内容：
- en: '[PRE82]'
  id: totrans-256
  prefs: []
  type: TYPE_PRE
  zh: '[PRE82]'
- en: 'You can see the result of the program in C++:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在 C++ 中看到程序的结果：
- en: '![](img/ae613d36-dcbe-4759-a343-753585cd70eb.png)'
  id: totrans-258
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/ae613d36-dcbe-4759-a343-753585cd70eb.png)'
- en: Let's describe some C++ syntax that can be found as we advance with our learning
    of the Qt library.
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们描述一些在学习 Qt 库的过程中可以遇到的 C++ 语法。
- en: C++ operators
  id: totrans-260
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++运算符
- en: 'The following operators are available in C ++:'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 中有以下运算符可用：
- en: '`::`: Scope qualifier'
  id: totrans-262
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`::`: 范围限定符'
- en: '`++ --`: Postfix increment/decrement'
  id: totrans-263
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`++ --`: 后缀自增/自减'
- en: '`()`: Functional forms'
  id: totrans-264
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`()`: 函数形式'
- en: '`[]`: Subscript'
  id: totrans-265
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`[]`: 下标'
- en: '`. ->`: Member access'
  id: totrans-266
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`. ->`: 成员访问'
- en: '`++ --`: Prefix increment/decrement'
  id: totrans-267
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`++ --`: 前缀自增/自减'
- en: '`~ !` : Bitwise NOT/logical NOT'
  id: totrans-268
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`~ !`: 按位非/逻辑非'
- en: '`+ -`: Unary prefix'
  id: totrans-269
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+ -`: 一元前缀'
- en: '`& *`: Reference/dereference'
  id: totrans-270
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`& *`: 引用/解引用'
- en: '`new delete`: Allocation/deallocation'
  id: totrans-271
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`new delete`: 分配/释放'
- en: '`sizeof`: Parameter pack'
  id: totrans-272
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`sizeof`: 参数包'
- en: '`(type)`: C-style type casting`.* ->*`: Access pointer'
  id: totrans-273
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`(type)`: C 风格的类型转换 `.* ->*`: 访问指针'
- en: '`* / %`: Multiply, divide, and modulo'
  id: totrans-274
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`* / %`: 乘法、除法和取模'
- en: '`+ -`:Addition and subtraction'
  id: totrans-275
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`+ -`: 加法和减法'
- en: '`<< >>`: Shift left and shift right'
  id: totrans-276
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`<< >>`: 左移和右移'
- en: '`< > <= >=`: Comparison operators'
  id: totrans-277
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`< > <= >=`: 比较运算符'
- en: '`== !=`: Equality/inequality'
  id: totrans-278
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`== !=`: 等于/不等于'
- en: '`& ^ | && ||`: Bitwise AND, bitwise XOR, bitwise OR, logical AND, and logical
    OR'
  id: totrans-279
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`& ^ | && ||`: 位与、位异或、位或、逻辑与和逻辑或'
- en: '`= *= /= %= += -= >>= <<= &= ^= |=`: Assignment/compound assignment'
  id: totrans-280
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`= *= /= %= += -= >>= <<= &= ^= |=`: 赋值/复合赋值'
- en: '`?:`: Conditional operator'
  id: totrans-281
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`?:`: 条件运算符'
- en: '`,`: Comma separator'
  id: totrans-282
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`,`: 逗号分隔符'
- en: C++ syntax requires every variable to be declared with its type before being
    used for the first time.
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 语法要求在第一次使用之前必须声明每个变量的类型。
- en: 'Create the `cpp_file2.cpp` file in the `App/` folder with the following lines:'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `App/` 文件夹中创建 `cpp_file2.cpp` 文件，包含以下行：
- en: '[PRE83]'
  id: totrans-285
  prefs: []
  type: TYPE_PRE
  zh: '[PRE83]'
- en: 'This code declares the `a` variable as an `int` type and with a value of `7`,
    and then declares the `b` variable as a `float` type. It declares the `result` variable as
    a `float` type. Then, it adds the variables. The result goes to the Terminal/cmd. Compile
    and run the code as follows:'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码将 `a` 变量声明为 `int` 类型，并赋予值为 `7`，然后声明 `b` 变量为 `float` 类型。声明 `result` 变量为 `float`
    类型。然后，它将变量相加。结果输出到终端/cmd。按照以下方式编译和运行代码：
- en: '[PRE84]'
  id: totrans-287
  prefs: []
  type: TYPE_PRE
  zh: '[PRE84]'
- en: 'The result of the preceding command is as follows:'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的结果如下：
- en: '![](img/515c7a94-8d84-4f3c-a8cd-5003726daa3f.png)'
  id: totrans-289
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/515c7a94-8d84-4f3c-a8cd-5003726daa3f.png)'
- en: Create the `cpp_file3.cpp`file in the `App/` folder with the following lines.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `App/` 文件夹中创建 `cpp_file3.cpp` 文件，包含以下行。
- en: 'This is what the `cpp_file3.cpp` file looks like:'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `cpp_file3.cpp` 文件的样子：
- en: '[PRE85]'
  id: totrans-292
  prefs: []
  type: TYPE_PRE
  zh: '[PRE85]'
- en: 'This code begins by defining an array and constructing an `if` statement. It
    prints the result if true, with a new line. The `for` statement is constructed,
    along with the **`if else`** statement. Then, break the loop and compile and run
    `cpp_file3.exe`:'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码首先定义一个数组并构建一个 `if` 语句。如果条件为真，则打印结果并换行。构建 `for` 语句以及 `if else` 语句。然后，中断循环并编译并运行
    `cpp_file3.exe`：
- en: '[PRE86]'
  id: totrans-294
  prefs: []
  type: TYPE_PRE
  zh: '[PRE86]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下所示：
- en: '![](img/61930752-b066-4f0d-bab8-666a112faaf7.png)'
  id: totrans-296
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/61930752-b066-4f0d-bab8-666a112faaf7.png)'
- en: Let's  have a look at the C++ functions.
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们来看看 C++ 函数。
- en: C++ functions
  id: totrans-298
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ 函数
- en: Functions in C ++ have the syntax `type name ( parameters ) { statements }`,where
    `type` is the type of value returned by the function, `name` is the identifier
    of the function, `parameters` are the parameters of the function, such as `int
    x` and `int y`, and finally `statements` are the function's body, which is a block
    of statements that specify what the function actually does. In C++, variables
    can be accessed inside the namespace where they are declared, but if they are
    accessed from outside, they have to be properly qualified with `::`—the scope
    operator. Create the `cpp_file4.cpp`file in the `App/` folder with the following
    lines.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: C++ 中的函数语法为 `type name ( parameters ) { statements }`，其中 `type` 是函数返回值的类型，`name`
    是函数的标识符，`parameters` 是函数的参数，例如 `int x` 和 `int y`，最后 `statements` 是函数体，它是一组指定函数实际做什么的语句。在
    C++ 中，可以在声明变量的命名空间内访问变量，但如果从外部访问，则必须使用 `::`（作用域运算符）正确限定。在 `App/` 文件夹中创建 `cpp_file4.cpp`
    文件，包含以下行。
- en: 'This is what the `cpp_file4.cpp` file looks like:'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `cpp_file4.cpp` 文件的样子：
- en: '[PRE87]'
  id: totrans-301
  prefs: []
  type: TYPE_PRE
  zh: '[PRE87]'
- en: 'Variables, types, constants, and functions of the standard C++ library are
    declared within the `std` namespace. Compile and run it, as follows:'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 标准C++库中的变量、类型、常量和函数在 `std` 命名空间内声明。按照以下方式编译和运行：
- en: '[PRE88]'
  id: totrans-303
  prefs: []
  type: TYPE_PRE
  zh: '[PRE88]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: 上述命令的输出如下所示：
- en: '![](img/52497f3f-01a4-4f05-b1ac-dd8c8145ec92.png)'
  id: totrans-305
  prefs: []
  type: TYPE_IMG
  zh: '![图片](img/52497f3f-01a4-4f05-b1ac-dd8c8145ec92.png)'
- en: Let's have a look at the functions without any type.
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们看看无类型的函数。
- en: Functions with no type
  id: totrans-307
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 无类型的函数
- en: When creating functions in C++, you need to declare the type of the value returned
    by the function. If the function does not need to return a value, `void` is used,
    which is a special type used to represent the absence of a value. Create the `cpp_file5.cpp` file in
    the `App/` folder with the following lines.
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: 在 C++ 中创建函数时，需要声明函数返回值的类型。如果函数不需要返回值，则使用 `void`，这是一个特殊类型，用于表示没有值。在 `App/` 文件夹中创建
    `cpp_file5.cpp` 文件，包含以下行。
- en: 'This is what the `cpp_file5.cpp` file looks like:'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是 `cpp_file5.cpp` 文件的样子：
- en: '[PRE89]'
  id: totrans-310
  prefs: []
  type: TYPE_PRE
  zh: '[PRE89]'
- en: It defines a `void` type of function and prints the result when the function
    is called.
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: 它定义了一个 `void` 类型的函数，并在函数被调用时打印结果。
- en: 'Compile and run it, as follows:'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤编译和运行：
- en: '[PRE90]'
  id: totrans-313
  prefs: []
  type: TYPE_PRE
  zh: '[PRE90]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出显示在以下屏幕截图：
- en: '![](img/f619584f-6309-4b3d-9f3c-ba63826d119f.png)'
  id: totrans-315
  prefs: []
  type: TYPE_IMG
  zh: '![](img/f619584f-6309-4b3d-9f3c-ba63826d119f.png)'
- en: Now, let's move on to the C++ classes.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们继续讨论 C++ 类。
- en: C++ classes
  id: totrans-317
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: C++ 类
- en: 'At the end of this short demonstration of C ++ syntax, let''s describe the
    classes. Here''s an example of a class with an inheritance construction in the
    `cpp_file6.cpp` file. Create this in the `App/` folder with the following lines:'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个简短的 C++ 语法演示结束时，让我们描述一下类。以下是一个在 `cpp_file6.cpp` 文件中具有继承构造的类的示例。在 `App/` 文件夹中创建以下内容：
- en: '[PRE91]'
  id: totrans-319
  prefs: []
  type: TYPE_PRE
  zh: '[PRE91]'
- en: 'Compile and run it, as follows:'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤编译和运行：
- en: '[PRE92]'
  id: totrans-321
  prefs: []
  type: TYPE_PRE
  zh: '[PRE92]'
- en: 'The output of the preceding command is shown in the following screenshot:'
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 前一个命令的输出显示在以下屏幕截图：
- en: '![](img/a83c1b57-9b87-44ba-9243-3e4c38473a2f.png)'
  id: totrans-323
  prefs: []
  type: TYPE_IMG
  zh: '![](img/a83c1b57-9b87-44ba-9243-3e4c38473a2f.png)'
- en: If you have a result like this, everything is correct.
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你得到这样的结果，那么一切正常。
- en: Qt
  id: totrans-325
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Qt
- en: We have briefly described the basics of C++ syntax. Now, let's take a look at
    the structure of Qt. The currently supported versions of Qt are 5.6-5.13. Versions
    such as 4.x or below have some differences, but these differences are not fundamental,
    and code written with versions lower than 5 can be easily transformed. This book
    will consider versions 5.9-5.13 of Qt and, where possible, other versions.
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: 我们简要介绍了 C++ 语法的基础知识。现在，让我们看看 Qt 的结构。目前支持的 Qt 版本是 5.6-5.13。例如，4.x 或以下版本有一些差异，但这些差异不是根本性的，并且使用低于
    5 的版本编写的代码可以轻松转换。本书将考虑 Qt 的 5.9-5.13 版本，并在可能的情况下考虑其他版本。
- en: 'As described previously, Qt is a powerful framework that supports Windows 10/8/7,
    most of Linux/X11-RHEL6/7, Ubuntu, openSUSE, Android, macOS, and iOS. When it''s
    downloaded and installed, the Qt framework provides tools such as the following:'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: 如前所述，Qt 是一个强大的框架，支持 Windows 10/8/7、大多数 Linux/X11-RHEL6/7、Ubuntu、openSUSE、Android、macOS
    和 iOS。下载并安装后，Qt 框架提供以下工具：
- en: '**Qt Creator**: This is an IDE, and it consists of the following integrated
    tools:'
  id: totrans-328
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Creator**: 这是一个 IDE，它包括以下集成工具：'
- en: '**Qt Designer:** This is for designing and building GUIs from Qt widgets.'
  id: totrans-329
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 设计器**: 这是为了从 Qt 小部件设计并构建 GUI。'
- en: '**qmake:** This is for building applications for different platforms.'
  id: totrans-330
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**qmake**: 这是为了为不同平台构建应用程序。'
- en: '**Qt Linguist:** This comprises localization tools.'
  id: totrans-331
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 语言学家**: 这包括本地化工具。'
- en: '**Qt Assistant:** This is the Qt documentation.'
  id: totrans-332
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 助手**: 这就是 Qt 文档。'
- en: 'The Qt framework also provides the following integrated instruments:'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 框架还提供以下集成工具：
- en: '**makeqpf**: This is for creating pre-rendered fonts for embedded devices.'
  id: totrans-334
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**makeqpf**: 这是为了为嵌入式设备创建预渲染字体。'
- en: '**Meta-Object Compiler** (**moc**): This is for generating meta-object information
    for QObject subclasses.'
  id: totrans-335
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**元对象编译器**（**moc**）: 这是为了为 QObject 子类生成元对象信息。'
- en: '**User Interface Compiler** (**uic**): This is for generating C++ code from
    UI files.'
  id: totrans-336
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**用户界面编译器**（**uic**）: 这是为了从 UI 文件生成 C++ 代码。'
- en: '**Resource Compiler** (**rcc**): This is for embedding resources into Qt applications
    during the build process.'
  id: totrans-337
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**资源编译器**（**rcc**）: 这是在构建过程中将资源嵌入到 Qt 应用程序中。'
- en: '**Qt D-Bus XML compiler** (**qdbusxml2cpp**): This converts D-Bus interface
    descriptions to C++ source code.'
  id: totrans-338
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt D-Bus XML 编译器**（**qdbusxml2cpp**）: 这将 D-Bus 接口描述转换为 C++ 源代码。'
- en: '**D-Bus Viewer**: This is for inspecting D-Bus objects and messages.'
  id: totrans-339
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**D-Bus 观察器**: 这是为了检查 D-Bus 对象和消息。'
- en: '**Qt Quick Compiler**: This is a compiler for **Qt Modeling Language** (**QML**),
    which builds Qt Quick applications without the deployment of QML sources.'
  id: totrans-340
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 快速编译器**: 这是一个用于 **Qt 模型语言**（**QML**）的编译器，可以在不部署 QML 源文件的情况下构建 Qt 快速应用程序。'
- en: '**Qt VS Tools**: This is for creating Qt applications using the Visual Studio
    IDE instead of Qt Creator.'
  id: totrans-341
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt VS 工具**: 这是为了使用 Visual Studio IDE 创建 Qt 应用程序，而不是 Qt Creator。'
- en: 'Qt 5 provides the following modules:'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 5 提供以下模块：
- en: '**Qt Core**: This contains core non-graphical classes.'
  id: totrans-343
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 核心**: 这包含核心的非图形类。'
- en: '**Qt GUI**: This contains classes for GUI components, including OpenGL.'
  id: totrans-344
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt GUI**: 这包含包括 OpenGL 在内的 GUI 组件类。'
- en: '**Qt Multimedia**: This contains classes for audio, video, radio, and camera
    functionality.'
  id: totrans-345
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 多媒体**: 这包含音频、视频、收音机和摄像头功能类。'
- en: '**Qt Multimedia Widgets**: This provides multimedia functionality.'
  id: totrans-346
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 多媒体小部件**: 这提供了多媒体功能。'
- en: '**Qt Network**: This is for networking support.'
  id: totrans-347
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 网络**: 这是为了提供网络支持。'
- en: '**Qt QML**: This contains classes for QML and JavaScript.'
  id: totrans-348
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt QML**：包含QML和JavaScript的类。'
- en: '**Qt Quick**: This is a framework for building highly dynamic applications.**Qt
    Quick Controls**: This contains UI controls that you can use to create classic
    desktop-style UIs.'
  id: totrans-349
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Quick**：这是一个用于构建高度动态应用的框架。**Qt Quick控件**：包含可用于创建经典桌面风格UI的UI控件。'
- en: '**Qt Quick Dialogs**: This is for making system dialogs from a Qt Quick application.'
  id: totrans-350
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Quick对话框**：用于从Qt Quick应用程序制作系统对话框。'
- en: '**Qt Quick Layouts**: This is for making layouts for Qt Quick-based items.'
  id: totrans-351
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Quick布局**：用于为基于Qt Quick的项目制作布局。'
- en: '**Qt SQL**: This is used for SQL database integration.'
  id: totrans-352
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt SQL**：用于SQL数据库集成。'
- en: '**Qt Test**: This contains testing libraries.'
  id: totrans-353
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt测试**：包含测试库。'
- en: '**Qt Widgets**: This is for making Qt GUIs with C++ widgets.'
  id: totrans-354
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt小部件**：用于使用C++小部件制作Qt GUI。'
- en: 'Also, it provides add-ons that are relevant for different platforms and/or
    under commercial license:'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，它还提供了与不同平台和/或商业许可相关的附加组件：
- en: '**ActiveQt**: ActiveX and COM (Windows).'
  id: totrans-356
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**ActiveQt**：ActiveX和COM（Windows）。'
- en: '**Qt 3D**: Two-dimensional and three-dimensional rendering.'
  id: totrans-357
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt 3D**：二维和三维渲染。'
- en: '**Qt Android Extras**: Platform-specific APIs for Android.'
  id: totrans-358
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Android扩展**：Android平台的特定API。'
- en: '**Qt Bluetooth**: Access to the Bluetooth hardware.'
  id: totrans-359
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt蓝牙**：访问蓝牙硬件。'
- en: '**Qt Canvas 3D**: OpenGL-like 3D drawing calls from Qt Quick.'
  id: totrans-360
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Canvas 3D**：从Qt Quick进行类似OpenGL的3D绘图调用。'
- en: '**Qt Concurrent**: Multithreaded programs without using low-level threading
    primitives.'
  id: totrans-361
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt并发**：不使用低级线程原语的多线程程序。'
- en: '**Qt D-Bus**: Inter-process communication over the D-Bus protocol..'
  id: totrans-362
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt D-Bus**：通过D-Bus协议进行进程间通信。'
- en: '**Qt Gamepad**: Gamepad hardware Qt applications.'
  id: totrans-363
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt游戏手柄**：Qt应用程序的游戏手柄硬件。'
- en: '**Qt Graphical Effects**: Graphical effects for Qt Quick 2.'
  id: totrans-364
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt图形效果**：Qt Quick 2的图形效果。'
- en: '**Qt Location API**: Maps, navigation, and place content in a QML.'
  id: totrans-365
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt位置API**：在QML中提供地图、导航和地点内容。'
- en: '**Qt Mac Extras**: Platform-specific APIs for macOS.'
  id: totrans-366
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Mac扩展**：macOS平台的特定API。'
- en: '**Qt NFC**: Access to **near-field communication** (**NFC**) hardware.'
  id: totrans-367
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt NFC**：访问**近场通信**（NFC）硬件。'
- en: '**Qt Platform Headers**: Encapsulation of the platform-specific information.'
  id: totrans-368
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt平台头文件**：封装特定平台的信息。'
- en: '**Qt Positioning API**: Position, satellite, and area monitoring.'
  id: totrans-369
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt定位API**：位置、卫星和区域监控。'
- en: '**Qt PrintSupport**: Printing.'
  id: totrans-370
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt打印支持**：打印。'
- en: '**Qt Purchasing**: In-app purchase of products in Qt applications.'
  id: totrans-371
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt购买**：Qt应用程序中的产品内购买。'
- en: '**Qt Quick Controls 2**: Embedded and mobile devices.'
  id: totrans-372
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Quick控件2**：嵌入式和移动设备。'
- en: '**Qt Quick Extras**: Set of controls to build interfaces in Qt Quick.'
  id: totrans-373
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Quick扩展**：用于在Qt Quick中构建界面的控件集。'
- en: '**Qt SCXML:** Creating state machines from **State Chart XML** (**SCXML**)
    files and embedding them in applications.'
  id: totrans-374
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt SCXML**：从**状态图XML**（SCXML）文件创建状态机并将其嵌入到应用程序中。'
- en: '**Qt Sensors API**: Sensor hardware and motion gesture recognition.'
  id: totrans-375
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt传感器API**：传感器硬件和运动手势识别。'
- en: '**Qt Serial Bus API**: Access to the serial industrial bus interface (Linux).'
  id: totrans-376
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt串行总线API**：访问串行工业总线接口（Linux）。'
- en: '**Qt Serial Port**: Access to hardware and virtual serial ports.'
  id: totrans-377
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt串行端口**：访问硬件和虚拟串行端口。'
- en: '**Qt SVG**: Displaying the contents of SVG files.'
  id: totrans-378
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt SVG**：显示SVG文件的内容。'
- en: '**Qt WebChannel**: Access to QObject or QML objects from HTML clients for the
    integration of Qt applications with HTML/JavaScript clients.'
  id: totrans-379
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt WebChannel**：从HTML客户端访问QObject或QML对象，以集成Qt应用程序与HTML/JavaScript客户端。'
- en: '**Qt WebEngine**: Embedding web content using the Chromium browser project.'
  id: totrans-380
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt WebEngine**：使用Chromium浏览器项目嵌入网页内容。'
- en: '**Qt WebSockets**: WebSocket communication.'
  id: totrans-381
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt WebSocket**：WebSocket通信。'
- en: '**Qt WebView**: Displays web content.'
  id: totrans-382
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt WebView**：显示网页内容。'
- en: '**Qt Win Extras**: Platform-specific APIs for Windows.'
  id: totrans-383
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Win扩展**：Windows平台的特定API。'
- en: '**Qt XML**: C++ implementations of the **Simple API for XML** (**SAX**) and
    the **Document Object Model** (**DOM**) .'
  id: totrans-384
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt XML**：**简单XML API**（SAX）和**文档对象模型**（DOM）的C++实现。'
- en: '**Qt XML Patterns**: XPath, XQuery, XSLT, and XML schema validation.'
  id: totrans-385
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt XML模式**：XPath、XQuery、XSLT和XML模式验证。'
- en: '**Qt Wayland Compositor**: Framework to develop a Wayland compositor (Linux).'
  id: totrans-386
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**Qt Wayland合成器**：用于开发Wayland合成器（Linux）的框架。'
- en: All of these modules, including C++ classes, QML types (which we will be covering
    in the next chapter), additional packages, and tools, provide a mechanism for
    the application creation process with the Qt framework. In this book, we can't
    describe all the classes of the library in detail. That is impossible, because
    there are more than 1,500 of them. We'll look at the most useful and popular ones
    that a developer will use when they try to create an application with a GUI.
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: 所有这些模块，包括 C++ 类、QML 类型（我们将在下一章中介绍）、额外的包和工具，都提供了使用 Qt 框架进行应用程序创建过程的机制。在这本书中，我们无法详细描述库中的所有类。这是不可能的，因为它们有超过
    1,500 个。我们将查看开发者尝试使用 GUI 创建应用程序时最有用和最受欢迎的类。
- en: Comparisons
  id: totrans-388
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 比较
- en: The principles described previously are very important for the programming process
    with Qt and Python. We covered the basic syntax and rules of Python, C++, and
    Qt modules, which are the main tools we will use to create a GUI. The official
    Qt documentation usually provides a description of the classes in C++. It is highly
    recommended to read this documentation, both for Qt ([https://doc.qt.io/](https://doc.qt.io/qt-5.9))
    and for C++ ([http://www.cplusplus.com/doc/tutorial/](http://www.cplusplus.com/doc/tutorial/)). Python
    was described very briefly, so it's recommended that you look through the official
    Python documentation ([https://docs.python.org/3/](https://docs.python.org/3/)).
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: 之前描述的原则对于使用 Qt 和 Python 进行编程过程非常重要。我们涵盖了 Python、C++ 和 Qt 模块的基本语法和规则，这些是我们创建
    GUI 时将使用的主要工具。官方 Qt 文档通常提供了 C++ 类的描述。强烈建议阅读这些文档，无论是 Qt ([https://doc.qt.io/](https://doc.qt.io/qt-5.9))
    还是 C++ ([http://www.cplusplus.com/doc/tutorial/](http://www.cplusplus.com/doc/tutorial/))。Python
    的描述非常简短，因此建议您查阅官方 Python 文档 ([https://docs.python.org/3/](https://docs.python.org/3/))。
- en: Now, let's read some of the official examples and try to understand them. We
    need to find the `QtWidgets` module on the official website. Open and view the
    first few lines of the documentation. Note `#include <QtWidgets>`—this line can
    be represented as `import QtWidgets` in Python code, but when we start using Python,
    we will use a Python binding to Qt or PyQt5 as a package. So, we will need to
    write `from PyQt5 import QtWidgets`. Then, to create a new widget in Python, we
    need to use `widget = QtWidgets.QWidget(parent)`.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，让我们阅读一些官方示例，并尝试理解它们。我们需要在官方网站上找到 `QtWidgets` 模块。打开并查看文档的前几行。注意 `#include
    <QtWidgets>`——这一行在 Python 代码中可以表示为 `import QtWidgets`，但当我们开始使用 Python 时，我们将使用
    Python 绑定到 Qt 或 PyQt5 作为包。因此，我们需要编写 `from PyQt5 import QtWidgets`。然后，为了在 Python
    中创建一个新的小部件，我们需要使用 `widget = QtWidgets.QWidget(parent)`。
- en: 'The function for using layout in the application is `void QWidget::setLayout(QLayout
    *layout)` with the following lines:'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用程序中使用布局的函数是 `void QWidget::setLayout(QLayout *layout)`，其具体代码如下：
- en: '[PRE93]'
  id: totrans-392
  prefs: []
  type: TYPE_PRE
  zh: '[PRE93]'
- en: 'In the preceding code, we''ve created a new `QVBoxLayout` class, added a widget
    to the layout, and set the layout. This can be implemented using PyQt5:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们创建了一个新的 `QVBoxLayout` 类，向布局中添加了一个小部件，并设置了布局。这可以使用 PyQt5 实现：
- en: '[PRE94]'
  id: totrans-394
  prefs: []
  type: TYPE_PRE
  zh: '[PRE94]'
- en: Qt is the largest and most powerful library for creating graphic applications.
    And Python provides the world's largest set of functional tools that can handle
    any modern programming task. Together, they can produce the greatest applications.
    The use of threads, multiprocessing, and asynchronous programming can make the
    application productive and efficient. The paradigm of the Python programming language
    lies in the real-time universe and this is a strong side.
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: Qt 是创建图形应用程序最大和最强大的库。Python 提供了世界上最大的功能工具集，可以处理任何现代编程任务。它们一起可以产生最伟大的应用程序。使用线程、多进程和异步编程可以使应用程序高效和高效。Python
    编程语言的范式位于实时宇宙中，这是其强大的一面。
- en: Summary
  id: totrans-396
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we described the basics of the instruments and tools to start
    GUI development. This is the introduction to the first stage of learning about
    development with Python. Of course, this is not enough, but it will help with
    the coming chapters. Python, C++, and Qt are most commonly used when a developer
    wants to create an application with PyQt and PySide. For detailed information
    about the syntax of these languages, it is highly recommended to study the official
    documentation.
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们介绍了开始 GUI 开发所需的基本仪器和工具。这是学习使用 Python 进行开发的第一个阶段的介绍。当然，这还远远不够，但它将有助于接下来的章节。当开发者想要使用
    PyQt 和 PySide 创建应用程序时，Python、C++ 和 Qt 是最常用的。有关这些语言的语法详细信息，强烈建议学习官方文档。
- en: In the next chapter, we will learn about QML—the powerful markup language for
    the implementation of different features.
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将学习关于QML——实现不同功能的强大标记语言。
