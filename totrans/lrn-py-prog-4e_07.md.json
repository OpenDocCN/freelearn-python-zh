["```py\n# exceptions/first.example.txt \n>>> gen = (n for n in range(2)) \n>>> next(gen) \n0 \n>>> next(gen) \n1 \n>>> next(gen) \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nStopIteration \n>>> print(undefined_name) \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nNameError: name 'undefined_name' is not defined \n>>> mylist = [1, 2, 3] \n>>> mylist[5] \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nIndexError: list index out of range \n>>> mydict = {\"a\": \"A\", \"b\": \"B\"} \n>>> mydict[\"c\"] \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nKeyError: 'c' \n>>> 1 / 0 \nTraceback (most recent call last): \n  File \"<stdin>\", line 1, in <module> \nZeroDivisionError: division by zero \n```", "```py\n# exceptions/unhandled.py\n1 + \"one\"\nprint(\"This line will never be reached\") \n```", "```py\n$ python exceptions/unhandled.py\nTraceback (most recent call last):\n  File \"exceptions/unhandled.py\", line 2, in <module>\n    1 + \"one\"\n    ~~^~~~~~~\nTypeError: unsupported operand type(s) for +: 'int' and 'str' \n```", "```py\n# exceptions/raising.txt\n>>> raise NotImplementedError(\"I'm afraid I can't do that\")\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nNotImplementedError: I'm afraid I can't do that \n```", "```py\n# exceptions/trace.back.py\ndef squareroot(number):\n    if number < 0:\n        raise ValueError(\"No negative numbers please\") \n    return number**.5\n\ndef quadratic(a, b, c):\n    d = b**2 - 4 * a * c\n    return (\n        (-b - squareroot(d)) / (2 * a),\n        (-b + squareroot(d)) / (2 * a)\n    )\nquadratic(1, 0, 1)  # x**2 + 1 == 0 \n```", "```py\n$ python exceptions/trace.back.py\nTraceback (most recent call last):\n  File \"exceptions/trace.back.py\", line 16, in <module>\n    quadratic(1, 0, 1)  # x**2 + 1 == 0\n    ^^^^^^^^^^^^^^^^^^\n  File \"exceptions/trace.back.py\", line 11, in quadratic\n    (-b - squareroot(d)) / (2 * a),\n          ^^^^^^^^^^^^^\n  File \"exceptions/trace.back.py\", line 4, in squareroot\n    raise ValueError(\"No negative numbers please\")\nValueError: No negative numbers please \n```", "```py\n# exceptions/try.syntax.py \ndef try_syntax(numerator, denominator): \n    try: \n        print(f\"In the try block: {numerator}/{denominator}\") \n        result = numerator / denominator \n    except ZeroDivisionError as zde: \n        print(zde) \n    else: \n        print(\"The result is:\", result) \n        return result \n    finally: \n        print(\"Exiting\")\nprint(try_syntax(12, 4)) \nprint(try_syntax(11, 0)) \n```", "```py\n$ python exceptions/try.syntax.py \nIn the try block: 12/4 \nThe result is: 3.0 \nExiting \n3.0 \nIn the try block: 11/0 \ndivision by zero \nExiting \nNone \n```", "```py\n# exceptions/multiple.py\nvalues = (1, 2)\ntry:\n    q, r = divmod(*values)\nexcept (ZeroDivisionError, TypeError) as e:\n    print(type(e), e) \n```", "```py\n# exceptions/multiple.py \ntry:\n    q, r = divmod(*values)\nexcept ZeroDivisionError:\n    print(\"You tried to divide by zero!\")\nexcept TypeError as e:\n    print(e) \n```", "```py\n# exceptions/replace.txt\n>>> class NotFoundError(Exception):\n...     pass\n...\n>>> vowels = {\"a\": 1, \"e\": 5, \"i\": 9, \"o\": 15, \"u\": 21}\n>>> try:\n...     pos = vowels[\"y\"]\n... except KeyError as e:\n...     raise NotFoundError(*e.args)\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nKeyError: 'y'\nDuring handling of the above exception, another exception occurred:\nTraceback (most recent call last):\n  File \"<stdin>\", line 4, in <module>\nNotFoundError: y \n```", "```py\n# exceptions/replace.py\n>>> try:\n...     pos = vowels[\"y\"]\n... except KeyError as e:\n...     raise NotFoundError(*e.args) from e\n...\nTraceback (most recent call last):\n  File \"<stdin>\", line 2, in <module>\nKeyError: 'y'\nThe above exception was the direct cause of the following exception:\nTraceback (most recent call last):\n  File \"<stdin>\", line 4, in <module>\nNotFoundError: y \n```", "```py\n# exceptions/note.py\ndef squareroot(number):\n    if number < 0:\n        raise ValueError(\"No negative numbers please\")\n    return number**0.5\ndef quadratic(a, b, c):\n    d = b**2 - 4 * a * c\n    try:\n        return (\n            (-b - squareroot(d)) / (2 * a),\n            (-b + squareroot(d)) / (2 * a),\n        )\n    except ValueError as e:\n        **e.add_note(f\"Cannot solve {a}x******2** **+ {b}x + {c} ==** **0****\")**\n        **raise**\nquadratic(1, 0, 1) \n```", "```py\n$ python exceptions/note.py\nTraceback (most recent call last):\n  File \"exceptions/note.py\", line 20, in <module>\n    quadratic(1, 0, 1)\n  File \"exceptions/note.py\", line 12, in quadratic\n    (-b - squareroot(d)) / (2 * a),\n          ^^^^^^^^^^^^^\n  File \"exceptions/note.py\", line 4, in squareroot\n    raise ValueError(\"No negative numbers please\")\nValueError: No negative numbers please\nCannot solve 1x**2 + 0x + 1 == 0 \n```", "```py\n# exceptions/groups/util.py\ndef validate_age(age):\n    if not isinstance(age, int):\n        raise TypeError(f\"Not an integer: {age}\")\n    if age < 0:\n        raise ValueError(f\"Negative age: {age}\")\ndef validate_ages(ages):\n    errors = []\n    for age in ages:\n        try:\n            validate_age(age)\n        except Exception as e:\n            errors.append(e)\n    if errors:\n        raise ExceptionGroup(\"Validation errors\", errors) \n```", "```py\n# exceptions/groups/exc.group.txt\n>>> from util import validate_ages\n>>> validate_ages([24, -5, \"ninety\", 30, None])\n  + Exception Group Traceback (most recent call last):\n  |   File \"<stdin>\", line 1, in <module>\n  |   File \"exceptions/groups/util.py\", line 20, in validate_ages\n  |     raise ExceptionGroup(\"Validation errors\", errors)\n  | ExceptionGroup: Validation errors (3 sub-exceptions)\n  +-+---------------- 1 ----------------\n    | Traceback (most recent call last):\n    |   File \"exceptions/groups/util.py\", line 15, in validate_ages\n    |     validate_age(age)\n    |   File \"exceptions/groups/util.py\", line 8, in validate_age\n    |     raise ValueError(f\"Negative age: {age}\")\n    | ValueError: Negative age: -5\n    +---------------- 2 ----------------\n    | Traceback (most recent call last):\n    |   File \"exceptions/groups/util.py\", line 15, in validate_ages\n    |     validate_age(age)\n    |   File \"exceptions/groups/util.py\", line 6, in validate_age\n    |     raise TypeError(f\"Not an integer: {age}\")\n    | TypeError: Not an integer: ninety\n    +---------------- 3 ----------------\n    | Traceback (most recent call last):\n    |   File \"exceptions/groups/util.py\", line 15, in validate_ages\n    |     validate_age(age)\n    |   File \"exceptions/groups/util.py\", line 6, in validate_age\n    |     raise TypeError(f\"Not an integer: {age}\")\n    | TypeError: Not an integer: None\n    +------------------------------------ \n```", "```py\n# exceptions/groups/handle.group.txt\n>>> from util import validate_ages\n>>> try:\n...     validate_ages([24, -5, \"ninety\", 30, None])\n... except ExceptionGroup as e:\n...     print(e)\n...     print(e.exceptions)\n...\nValidation errors (3 sub-exceptions)\n(ValueError('Negative age: -5'),\n TypeError('Not an integer: ninety'),\n TypeError('Not an integer: None')) \n```", "```py\n# exceptions/groups/handle.nested.txt\n>>> from util import validate_ages\n>>> try:\n...     validate_ages([24, -5, \"ninety\", 30, None])\n... except* TypeError as e:\n...     print(\"Invalid types\")\n...     print(type(e), e)\n...     print(e.exceptions)\n... except* ValueError as e:\n...     print(\"Invalid values\")\n...     print(type(e), e)\n...     print(e.exceptions)\n...\nInvalid types\n<class 'ExceptionGroup'> Validation errors (2 sub-exceptions)\n(TypeError('Not an integer: ninety'),\n TypeError('Not an integer: None'))\nInvalid values\n<class 'ExceptionGroup'> Validation errors (1 sub-exception)\n(ValueError('Negative age: -5'),) \n```", "```py\n# exceptions/groups/handle.nested.txt\n>>> try:\n...     validate_ages([24, -5, \"ninety\", 30, None])\n... except* ValueError as e:\n...     print(\"Invalid values\")\n...\nInvalid values\n  + Exception Group Traceback (most recent call last):\n  |   File \"<stdin>\", line 2, in <module>\n  |   File \"exceptions/groups/util.py\", line 20, in validate_ages\n  |     raise ExceptionGroup(\"Validation errors\", errors)\n  | ExceptionGroup: Validation errors (2 sub-exceptions)\n  +-+---------------- 1 ----------------\n    | Traceback (most recent call last):\n    |   File \"exceptions/groups/util.py\", line 15, in validate_ages\n    |     validate_age(age)\n    |   File \"exceptions/groups/util.py\", line 6, in validate_age\n    |     raise TypeError(f\"Not an integer: {age}\")\n    | TypeError: Not an integer: ninety\n    +---------------- 2 ----------------\n    | Traceback (most recent call last):\n    |   File \"exceptions/groups/util.py\", line 15, in validate_ages\n    |     validate_age(age)\n    |   File \"exceptions/groups/util.py\", line 6, in validate_age\n    |     raise TypeError(f\"Not an integer: {age}\")\n    | TypeError: Not an integer: None\n    +------------------------------------ \n```", "```py\n# exceptions/groups/handle.nested.txt\n>>> try:\n...     raise RuntimeError(\"Ungrouped\")\n... except* RuntimeError as e:\n...     print(type(e), e)\n...     print(e.exceptions)\n...\n<class 'ExceptionGroup'>  (1 sub-exception)\n(RuntimeError('Ungrouped'),) \n```", "```py\n# exceptions/for.loop.py \nn = 100 \nfound = False \nfor a in range(n): \n    if found:\n        break \n    for b in range(n): \n        if found:\n            break \n        for c in range(n): \n            if 42 * a + 17 * b + c == 5096: \n                found = True \n                print(a, b, c)  # 79 99 95\n                break \n```", "```py\n# exceptions/for.loop.py \nclass ExitLoopException(Exception): \n    pass \n\ntry: \n    n = 100 \n    for a in range(n): \n        for b in range(n): \n            for c in range(n): \n                if 42 * a + 17 * b + c == 5096: \n                    raise ExitLoopException(a, b, c) \nexcept ExitLoopException as ele: \n    print(ele.args)  # (79, 99, 95) \n```", "```py\n# context/decimal.prec.py\nfrom decimal import Context, Decimal, getcontext, setcontext\none = Decimal(\"1\")\nthree = Decimal(\"3\")\norig_ctx = getcontext()\nctx = Context(prec=5)\n**setcontext(ctx)**\nprint(f\"{ctx}\\n\")\nprint(\"Custom decimal context:\", one / three)\n**setcontext(orig_ctx)**\nprint(\"Original context restored:\", one / three) \n```", "```py\n$ python context/decimal.prec.py\nContext(prec=5, rounding=ROUND_HALF_EVEN, Emin=-999999,\n        Emax=999999, capitals=1, clamp=0, flags=[],\n        traps=[InvalidOperation, DivisionByZero, Overflow])\nCustom decimal context: 0.33333\nOriginal context restored: 0.3333333333333333333333333333 \n```", "```py\n# context/decimal.prec.try.py\nfrom decimal import Context, Decimal, getcontext, setcontext\none = Decimal(\"1\")\nthree = Decimal(\"3\")\norig_ctx = getcontext()\nctx = Context(prec=5)\nsetcontext(ctx)\ntry:\n    print(\"Custom decimal context:\", one / three)\nfinally:\n    setcontext(orig_ctx)\nprint(\"Original context restored:\", one / three) \n```", "```py\n# context/decimal.prec.ctx.py\nfrom decimal import Context, Decimal, localcontext\none = Decimal(\"1\")\nthree = Decimal(\"3\")\n**with** localcontext(Context(prec=5)) as ctx:\n    print(\"Custom decimal context:\", one / three)\nprint(\"Original context restored:\", one / three) \n```", "```py\n# context/multiple.py\nfrom decimal import Context, Decimal, localcontext\none = Decimal(\"1\")\nthree = Decimal(\"3\")\nwith (\n    localcontext(Context(prec=5)),\n    open(\"output.txt\", \"w\") as out_file\n):\n    out_file.write(f\"{one} / {three} = {one / three}\\n\") \n```", "```py\n# context/manager.class.py\nclass MyContextManager:\n    def __init__(self):\n        print(\"MyContextManager init\", id(self))\n    def __enter__(self):\n        print(\"Entering 'with' context\")\n        **return****self**\n    def __exit__(self, exc_type, exc_val, exc_tb):\n        print(f\"{exc_type=} {exc_val=} {exc_tb=}\")\n        print(\"Exiting 'with' context\")\n        **return****True** \n```", "```py\n# context/manager.class.py\n**ctx_mgr = MyContextManager()**\nprint(\"About to enter 'with' context\")\n**with** **ctx_mgr** **as** **mgr:**\n    print(\"Inside 'with' context\")\n    print(id(mgr))\n    raise Exception(\"Exception inside 'with' context\")\n    print(\"This line will never be reached\")\nprint(\"After 'with' context\") \n```", "```py\n$ python context/manager.class.py\nMyContextManager init 140340228792272\nAbout to enter 'with' context\nEntering 'with' context\nInside 'with' context\n140340228792272\nexc_type=<class 'Exception'> exc_val=Exception(\"Exception inside\n'with' context\") exc_tb=<traceback object at 0x7fa3817c5340>\nExiting 'with' context\nAfter 'with' context \n```", "```py\n# context/generator.py\nfrom contextlib import contextmanager\n@contextmanager\ndef my_context_manager():\n    print(\"Entering 'with' context\")\n    val = object()\n    print(id(val))\n    try:\n        **yield** **val**\n    except Exception as e:\n        print(f\"{type(e)=} {e=} {e.__traceback__=}\")\n    finally:\n        print(\"Exiting 'with' context\")\nprint(\"About to enter 'with' context\")\nwith my_context_manager() as val:\n    print(\"Inside 'with' context\")\n    print(id(val))\n    raise Exception(\"Exception inside 'with' context\")\n    print(\"This line will never be reached\")\nprint(\"After 'with' context\") \n```", "```py\n$ python context/generator.py\nAbout to enter 'with' context\nEntering 'with' context\n139768531985040\nInside 'with' context\n139768531985040\ntype(e)=<class 'Exception'> e=Exception(\"Exception inside 'with'\ncontext\") e.__traceback__=<traceback object at 0x7f1e65a42800>\nExiting 'with' context\nAfter 'with' context \n```"]