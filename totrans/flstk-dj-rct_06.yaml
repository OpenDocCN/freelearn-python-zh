- en: '6'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Creating a Project with React
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ll focus on understanding frontend development and creating
    a web frontend project with React. In previous chapters, we mostly focused on
    Django and Django Rest. In this chapter, we’ll explain the basics of frontend
    development. Next, we will introduce the React library and create a starting project
    for the following chapters. Finally, we will learn how to configure our project.
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will cover the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding frontend development
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating the React project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring the project
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Useful ES6 and React features
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this book, we use the Linux OS, but you can find the tools needed for this
    project on other OSs as well. We’ll see how to install Node.js and **Visual Studio
    Code** (**VS Code**) on your machine in this chapter.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following GitHub link will also be required: [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap6](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap6).'
  prefs: []
  type: TYPE_NORMAL
- en: Understanding frontend development
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Frontend development is the part of software development that focuses on the
    **User Interface** (**UI**). In web development, frontend development is the practice
    of producing **HTML**, **CSS**, and **JavaScript** for a website or web application.
  prefs: []
  type: TYPE_NORMAL
- en: '**HTML** stands for **HyperText Markup Language**. HTML displays content on
    the page, such as text, buttons, links, headings, or lists.'
  prefs: []
  type: TYPE_NORMAL
- en: '**CSS** is defined as **Cascade Style Sheets**. CSS is used to style the web
    page. It deals with things such as colors, layouts, and animation. It also helps
    with the accessibility of your websites so that everyone can easily use your website.'
  prefs: []
  type: TYPE_NORMAL
- en: Finally, **JavaScript** is a client-side language that facilitates user interaction
    and makes dynamic pages. It can help with complex animations, form validation,
    data fetching from a server, and data submission to the server.
  prefs: []
  type: TYPE_NORMAL
- en: However, as with languages such as Python, while building a frontend application
    from scratch with HTML, CSS, and JavaScript is definitely possible, it is quite
    difficult. It requires good knowledge of code architecture and component reusability.
    In the end, you’ll end up creating your own development framework.
  prefs: []
  type: TYPE_NORMAL
- en: But why not directly use some pre-built CSS or JavaScript framework?
  prefs: []
  type: TYPE_NORMAL
- en: Tools such as Vue, Angular, or React can help you write frontend applications
    with seed and in a smoother way.
  prefs: []
  type: TYPE_NORMAL
- en: In this book, we’ll be using React’s open source JavaScript library. Let’s learn
    more about React as a library.
  prefs: []
  type: TYPE_NORMAL
- en: What is React?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**React** is a library that helps developers build reactive UIs as a tree of
    small reusable pieces called components.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In frontend development, a component is a mixture of HTML, CSS, and JavaScript
    that captures the logic required to render a small section or a larger UI. Let’s
    analyze the following HTML form to better understand components in frontend development:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.1 – HTML form](img/Figure_6.01_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.1 – HTML form
  prefs: []
  type: TYPE_NORMAL
- en: 'As you can see in *Figure 6**.1*, in the form, we have defined four components:'
  prefs: []
  type: TYPE_NORMAL
- en: The Name input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Email input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The Message input
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The **Submit** button
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Each of these components has its own logic. For example, the **Submit** button
    will validate the form and save or send the message to a remote source.
  prefs: []
  type: TYPE_NORMAL
- en: '**React** is defined as a library instead of a framework because it only deals
    with UI rendering and leaves many of the other things that are important in development
    to the developers or other tools.'
  prefs: []
  type: TYPE_NORMAL
- en: 'To build a React application, you’ll need the following stack:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Application code**: React, Redux, ESLint, Prettier, and React Router'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`npm`/`yarn`/`pnpm`, and `babel`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Testing tools**: Jest and Enzyme'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: You’ll need to add these dependencies to your React project to optimize and
    perform some tasks – that’s where React differs from tools such as Angular, which
    comes with its own stack for routing, for example.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we better understand React, let’s create a React project.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the React project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before creating the React project, we need to have tools installed for a better
    development experience. These tools are drivers, editors, and plugins basically.
    Let’s start by installing Node.js.
  prefs: []
  type: TYPE_NORMAL
- en: Installing Node.js
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**Node.js** is an open source and powerful JavaScript-based server-side environment.
    It allows developers to run JavaScript programs on the server side, even though
    JavaScript is natively a client-side language.'
  prefs: []
  type: TYPE_NORMAL
- en: '**Node.js** is available for multiple OSs, such as Windows, macOS, and Linux.
    In this book, we are working on a Linux machine and Node.js should normally be
    installed already by default.'
  prefs: []
  type: TYPE_NORMAL
- en: For other OSs, you can find the installation package at [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
    Download the latest **Long-Term Support** (**LTS**) version for your OS.
  prefs: []
  type: TYPE_NORMAL
- en: 'When visiting the link, you’ll have an output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.2 – Node.js installers](img/Figure_6.02_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.2 – Node.js installers
  prefs: []
  type: TYPE_NORMAL
- en: 'To check whether Node.js has been installed on your Linux machine, open the
    Terminal and enter the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'These commands should show you the versions of Node.js and `yarn` installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.3 – node and yarn versions](img/Figure_6.03_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.3 – node and yarn versions
  prefs: []
  type: TYPE_NORMAL
- en: 'If you don’t have `yarn` installed on your machine, you can install it with
    the `npm` package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: '`yarn` and `npm` are package managers for JavaScript. We’ll use the `yarn`
    package manager a lot in upcoming chapters to install packages, run tests, or
    build a production-ready version of the frontend. However, feel free to use `npm`
    if you want. Just don’t forget that the commands are slightly different.'
  prefs: []
  type: TYPE_NORMAL
- en: The basic tools to develop with JavaScript have now been installed. Next, we
    will need to install VS Code and configure it to make JavaScript development easier.
  prefs: []
  type: TYPE_NORMAL
- en: Installing VS Code
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: VS Code is an open source code editor developed and maintained by Microsoft.
    It supports multiple programming languages and with the plugins and extensions,
    you can easily transform it into a powerful IDE. However, you can also use other
    editors such as **Atom**, **Brackets**, or the powerful **IDE WebStorm**. Feel
    free to use what you are familiar with.
  prefs: []
  type: TYPE_NORMAL
- en: VS Code is available for Windows, macOS, and Linux and you can download the
    right version for your OS at [https://code.visualstudio.com/](https://code.visualstudio.com/).
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it’s installed and opened, you’ll see the following window:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.4 – VS Code window](img/Figure_6.04_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.4 – VS Code window
  prefs: []
  type: TYPE_NORMAL
- en: 'VS Code comes with an integrated terminal that you can use to create and run
    React apps. Note also that you can open projects with VS Code using the following
    command in the terminal in the directory of the project:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: You can find the integrated terminal in the **View | Integrated** **Terminal**
    menu.
  prefs: []
  type: TYPE_NORMAL
- en: With the basics of VS Code explored, let’s add the needed extensions to make
    React development more enjoyable.
  prefs: []
  type: TYPE_NORMAL
- en: Adding VS Code extensions
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Every programming language and framework comes with a lot of extensions available
    to make development easier and more enjoyable. These extensions include code snippets,
    testing, project environment configuration, and code formatting. In VS Code, if
    you open **Extensions** in the activity bar (the bar on the left), you can find
    a search bar to look for different extensions.
  prefs: []
  type: TYPE_NORMAL
- en: 'For the React project, let’s start by adding the **ES7+ React/Redux/React-Native/JS**
    **snippets** extension. This extension will suggest code snippets when writing
    code in React files. It should look something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: "![Figure 6.5 – ES7 + React/Redux/React-\uFEFFNative/JS \uFEFFsnippets extension](img/Figure_6.05_B18221.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.5 – ES7 + React/Redux/React-Native/JS snippets extension
  prefs: []
  type: TYPE_NORMAL
- en: 'After that, let’s install the **ESLint** extension. It’ll help you find typos
    and syntax errors quickly by automatically formatting the code and showing formatting
    errors. This makes the ES code formatting rules easy to understand. The ESLint
    extension looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.6 – The ESLint extension](img/Figure_6.06_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.6 – The ESLint extension
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, we will add another VS Code extension called **Prettier**. Prettier is
    a code formatter that not only makes your code visually appealing but also much
    more structured for readability. You can find a VS Code extension that can help
    you format your code automatically after saving your code. The extension looks
    something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.7 – Prettier code formatter](img/Figure_6.07_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.7 – Prettier code formatter
  prefs: []
  type: TYPE_NORMAL
- en: 'And finally, but optionally, we have **indent-rainbow**. If you have many blocks
    of code with parents and children, it can become quite difficult to read. This
    extension will make JavaScript code with indentation more readable. It looks like
    this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.8 – The indent-rainbow extension](img/Figure_6.08_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.8 – The indent-rainbow extension
  prefs: []
  type: TYPE_NORMAL
- en: Great! With these extensions installed in VS Code, we can now move on to creating
    the React application.
  prefs: []
  type: TYPE_NORMAL
- en: Creating and running a React app
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With Node.js and VS Code installed and configured, we have everything we need
    to create our first React.js application.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create our React app, we’ll be using `create-react-app` ([https://github.com/facebook/create-react-app](https://github.com/facebook/create-react-app)),
    a simple command for creating a modern web React application. Follow these steps
    to create your first React application and modify the code:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to create a React application:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'This command will create a React application named `social-media-app`. If you
    are using `npm`, then replace `yarn` with `npx`. After installation, you will
    have an output similar to the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.9 – The React project creation terminal output](img/Figure_6.09_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.9 – The React project creation terminal output
  prefs: []
  type: TYPE_NORMAL
- en: Inside `social-media-app`, you’ll find a file called `package.json`. This file
    contains all the configurations for the JavaScript project, starting from basic
    information about the project, such as the name, the version, and the developers,
    but it also includes a list of installed packages and the scripts related to starting
    the server, for example.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the created React application with the following command:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Open your browser and specify `localhost:3000` as your web link. Once done,
    it will look something like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.10 – Running \uFEFFthe React application](img/Figure_6.10_B18221.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.10 – Running the React application
  prefs: []
  type: TYPE_NORMAL
- en: The application is running. Now, let’s modify the code in the React application.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `App.js` file from the `src` folder in the VS Code editor.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Modify the text inside the `App.js` file from `Learn React` to `Hello World`
    and save the file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.11 – The App.js code](img/Figure_6.11_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.11 – The App.js code
  prefs: []
  type: TYPE_NORMAL
- en: 'Check the browser again and you’ll see the changes:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.12 – Modified React application](img/Figure_6.12_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.12 – Modified React application
  prefs: []
  type: TYPE_NORMAL
- en: React has a hot reload feature, meaning that any changes made to a file in the
    project are reflected in the rendering of the web application.
  prefs: []
  type: TYPE_NORMAL
- en: Great! We’ve just installed a React application and modified the code.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s install some tools in the browser for debugging the React application.
  prefs: []
  type: TYPE_NORMAL
- en: Installing a debugging plugin in the browser
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'To debug React applications, we have to install React Developer Tools, a plugin
    available on Chrome, Firefox, and Edge browsers. You can find the plugin for the
    Chrome version at [https://chrome.google.com/webstore/category/extensions](https://chrome.google.com/webstore/category/extensions)
    and the Firefox version at [https://addons.mozilla.org](https://addons.mozilla.org).
    The plugin looks something like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.13 – The React browser plugin](img/Figure_6.13_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.13 – The React browser plugin
  prefs: []
  type: TYPE_NORMAL
- en: 'Once it’s installed, you can open the developer tools by pressing *Ctrl + Shift
    + I* (or *F12*) in the Chrome browser. The following screenshot shows the developer
    tools in the Firefox browser:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.14 – React application with the open React extension](img/Figure_6.14_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.14 – React application with the open React extension
  prefs: []
  type: TYPE_NORMAL
- en: This tool will be useful for finding bugs and debugging the application in the
    development phase.
  prefs: []
  type: TYPE_NORMAL
- en: The project is created and can now be successfully run. Let’s install and configure
    some packages for routing and styling in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring the project
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before starting to write the authentication flow, let’s make sure that the project
    is ready for coding. In this section, we will configure styling and routing, and
    allow the request on the API.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s start with routing first.
  prefs: []
  type: TYPE_NORMAL
- en: Adding React Router
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Routing in a frontend application represents everything that deals with moving
    from one view to another and loading the right page using the right URL.
  prefs: []
  type: TYPE_NORMAL
- en: React doesn’t come with an integrated routing package, so we’ll use the `react-router`
    package.
  prefs: []
  type: TYPE_NORMAL
- en: 'You can install the package using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, edit the `index.js` file like so:'
  prefs: []
  type: TYPE_NORMAL
- en: src/index.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code block, we imported the `BrowserRouter` component and wrapped
    it inside the `React.StrictMode` component which helps us receive warnings in
    the development mode ([https://reactjs.org/docs/strict-mode.html](https://reactjs.org/docs/strict-mode.html)),
    and finally, the `App` component is wrapped inside the `BrowserRouter` component.
  prefs: []
  type: TYPE_NORMAL
- en: With React Router configured, we can freely move on to installing React Bootstrap
    for styling.
  prefs: []
  type: TYPE_NORMAL
- en: Adding React Bootstrap
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: React is easily configurable with CSS frameworks. For this project, for the
    sake of simplicity and rapidity of development, we’ll go with Bootstrap.
  prefs: []
  type: TYPE_NORMAL
- en: Fortunately, the React ecosystem provides a package called `react-bootstrap`
    independent of JQuery.
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to install the package:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'Next, import the `bootstrap` CSS file into the `index.js` file like so:'
  prefs: []
  type: TYPE_NORMAL
- en: src/index.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: With `react-router` and `react-bootstrap` installed, let’s create a quick page
    using both of these in the next subsection.
  prefs: []
  type: TYPE_NORMAL
- en: Creating the Home page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Creating a page in React using React Router follows this pattern most of the
    time:'
  prefs: []
  type: TYPE_NORMAL
- en: Creating the component and the page
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Registering the page in `BrowserRouter` with an URL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Follow these steps to create the `Home` page:'
  prefs: []
  type: TYPE_NORMAL
- en: Create a directory in `src` called `pages`.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Inside the `pages` directory, create a new file called `Home.jsx`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: "![Figure 6.15 – \uFEFFThe pages folder structure](img/Figure_6.15_B18221.jpg)"
  prefs: []
  type: TYPE_IMG
- en: Figure 6.15 – The pages folder structure
  prefs: []
  type: TYPE_NORMAL
- en: This file will contain the UI for the `Profile` page.
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the following text to the `Home.jsx` file to ensure that authentication
    is working properly:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/pages/Home.jsx
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'Register this page in the `App.js` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: src/App.js
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: 'To register a page with React Router, you use the `<Route />` component and
    pass two props:'
  prefs: []
  type: TYPE_NORMAL
- en: The path
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The component element
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'With the preceding code added, make sure that the React project is running.
    You can check the page at `http://127.0.0.1:3000`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 6.16 – Home page](img/Figure_6.16_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.16 – Home page
  prefs: []
  type: TYPE_NORMAL
- en: Great! With this added, let’s quickly configure the Django project to avoid
    some request issues in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring CORS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**CORS** stands for **cross-origin resource sharing**. It’s a browser mechanism
    that enables controlled access to resources located outside of a given domain.'
  prefs: []
  type: TYPE_NORMAL
- en: It helps prevent cross-domain attacks or unwanted requests. In the case of this
    project, the React project is running on `http://127.0.0.1:3000`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If we try to make some requests from the browser, we’ll receive an error. Open
    the React application at `http://127.0.0.1:3000` and open **Developer Tools**:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.17 – Opening the developer tools](img/Figure_6.17_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.17 – Opening the developer tools
  prefs: []
  type: TYPE_NORMAL
- en: Also, make sure that the Django server is running.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the console, enter the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: 'You’ll receive an error:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.18 – A CORS error when making a request](img/Figure_6.18_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.18 – A CORS error when making a request
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s quickly configure the Django API side by following these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Enable `django-cors-headers`:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'If the installation of the `django-cors-headers` package is complete, go to
    your `settings.py` file and add the package into `INSTALLED_APPS` and the middleware:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CoreRoot/settings.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'Add these lines at the end of the `settings.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: CoreRoot/settings.py
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: Make the request again in **Developer Tools**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'You will see that the request has passed, and we are good now. The API is ready
    to accept requests from the React application:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.19 – Trying a successful request in Developer Tools](img/Figure_6.19_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.19 – Trying a successful request in Developer Tools
  prefs: []
  type: TYPE_NORMAL
- en: With the React project configured with the backend for a better development
    experience, we can now explore the **ES6** (**ECMAScript 6**) and React features
    that we will use a lot in upcoming chapters.
  prefs: []
  type: TYPE_NORMAL
- en: Useful ES6 and React features
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: JavaScript and React are evolving languages and technologies, incorporating
    exciting, new features each year. **ES6**, also known as **ECMAScript 2015**,
    is a significant enhancement in the JavaScript language that allows developers
    to write programs for complex applications with better techniques and patterns.
  prefs: []
  type: TYPE_NORMAL
- en: With React, we have moved from writing classes to writing components using functions
    and React Hooks. In this section, we will quickly explore the ES6 syntaxes, React
    concepts, and React Hooks that we will use in the following chapters.
  prefs: []
  type: TYPE_NORMAL
- en: const and let
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `const` keyword was introduced in `const` keyword, variables can’t be redeclared
    nor reassigned. Here’s an example of its usage:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 6.20 – Usage of the const keyword](img/Figure_6.20_B18221.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 6.20 – Usage of the const keyword
  prefs: []
  type: TYPE_NORMAL
- en: 'On the other hand, `let` is used to declare a variable that can be reassigned
    to a new value. This is useful when you want to create a variable that can change
    over time, such as a counter or an iterator. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: In general, it is a good practice to use `const` by default, and only use `let`
    when you need to reassign a variable. This can help to make your code more readable
    and prevent accidental reassignments.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the usage of `const` and `let` keywords, let’s move on
    to understanding template literals in JavaScript.
  prefs: []
  type: TYPE_NORMAL
- en: Template literals
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In JavaScript, template literals are a way to define string values that can
    contain placeholders for dynamic values. They are represented by the backtick
    (`` ` ``) character and use the dollar sign (`$`) and curly braces (`{}`) to insert
    expressions into the string.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a template literal:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we defined a template literal named `message` that contains
    a placeholder for the `name` variable. When the template literal is evaluated,
    the `name` variable is inserted into the string and the resulting string is logged
    to the console.
  prefs: []
  type: TYPE_NORMAL
- en: 'Template literals provide a more convenient and readable way to create strings
    with dynamic values compared to using the traditional string concatenation operator
    (`+`). They also support **string interpolation**, which means that you can insert
    expressions into the string, as well as multiline strings. Here’s an example:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we defined a template literal called `message` that
    contains multiple expressions that are inserted into the string when the template
    literal is evaluated. This allows us to create a string with dynamic values that
    is more readable and concise than when using string concatenation.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand what template literals are, let’s explain JSX styling
    in React.
  prefs: []
  type: TYPE_NORMAL
- en: JSX styling
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '**JSX** is a syntax extension to JavaScript that allows you to write JavaScript
    code that looks like HTML. It was introduced by Facebook as part of the React
    library, but it can be used with other JavaScript libraries and frameworks as
    well. Here is an example of how you might use JSX in a React component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we defined a React component called `Component` that
    returns some JSX code. The JSX code looks like HTML, but it is transformed into
    JavaScript by the React library, which generates the appropriate elements and
    attributes in the DOM.
  prefs: []
  type: TYPE_NORMAL
- en: 'When you write JSX, you can use JavaScript expressions inside the curly braces
    (`{}`) to insert dynamic values into the JSX code. This allows you to easily create
    dynamic and interactive UIs using JSX:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding example, we defined a React component called `Component` that
    takes a name prop and inserts it into the JSX code using a JavaScript expression.
    This allows us to create a dynamic and personalized greeting for the user.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how JSX works with React, let’s explain the concept of
    props and states.
  prefs: []
  type: TYPE_NORMAL
- en: Props versus states
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In React, props and states are two different ways to manage data in a component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Props are short for **properties** and are used to pass data from a parent
    component to a child component. Props are read-only, which means that a child
    component cannot modify the props passed to it by the parent component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we defined a parent component called `ParentComponent`
    that renders a child component called `ChildComponent` and passes two props to
    the child component (`name` and `age`). The child component receives these props
    as arguments and uses them to render the content of the component. Because props
    are read-only, the child component cannot modify the `name` and `age` props passed
    to it by the parent.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, a state is a way to manage data in a component that can be
    modified by the component itself. The state is private to the component and can
    only be modified using special React methods, such as `useState`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how you might modify a state in a React component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we define a component called `Counter` that uses the
    `useState` Hook to manage the state of a counter. The `useState` Hook returns
    an array with two elements, the current value of the state (in this case, `count`)
    and a function to update the state (in this case, `setCount`).
  prefs: []
  type: TYPE_NORMAL
- en: In the render method of the component, we display the value of the count state
    and define a button that, when clicked, calls the `handleIncrement` function to
    update the count state. This causes the component to re-render and display the
    updated value of the count state.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand the difference between props and state better, let’s
    dive deeper into understanding the `useState` Hook.
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '`useState` is a Hook in React that allows you to add a state to functional
    components. In other words, `useState` allows you to manage the state of your
    component, which is an object that holds information about your component and
    can be used to re-render the component when this state changes.'
  prefs: []
  type: TYPE_NORMAL
- en: The Context API
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The **Context API** is a way to share data between different components in
    a React application. It allows you to pass data through the component tree without
    having to pass props down manually at every level. Here is an example of how you
    might use the Context API in a React application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we use the `React.createContext` method to create a new
    context object, which we call `Context`. We then provide some initial data to
    the context by wrapping our top-level component in a `Context.Provider` component
    and passing the data as the value prop. Finally, we use the `useContext` Hook
    in `Component` to access the data in the context and display it in the component.
  prefs: []
  type: TYPE_NORMAL
- en: There is also another Hook that we will use in this book. Let’s explain the
    `useMemo` Hook in the next section.
  prefs: []
  type: TYPE_NORMAL
- en: useMemo
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: '`useMemo` is a Hook in React that allows you to optimize the performance of
    your components by memoizing expensive calculations. It works by returning a memoized
    value that is only recalculated if one of the inputs to the calculation changes.'
  prefs: []
  type: TYPE_NORMAL
- en: Important note
  prefs: []
  type: TYPE_NORMAL
- en: '**Memoization** is a technique used in computer programming to speed up programs
    by storing the results of expensive function calls and returning the cached result
    when the same inputs are given again. This can be useful for optimizing programs
    that make many repeated calculations with the same input.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of how you might use `useMemo` to optimize the performance
    of a component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we use `useMemo` to memoize the result of an expensive
    calculation that we do with the data prop passed to the component. Because `useMemo`
    only recalculates the value if the data prop changes, we can avoid making the
    expensive calculation every time the component is re-rendered, which can improve
    the performance of our application.
  prefs: []
  type: TYPE_NORMAL
- en: In the React project that we will build in the next chapter, we will work with
    forms using React and the Hooks provided by the React library. Let’s learn more
    about controlled and uncontrolled components.
  prefs: []
  type: TYPE_NORMAL
- en: Handling forms – controlled components and uncontrolled components
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: A controlled component is a component in React that is controlled by the state
    of the parent component. This means that the value of the input field is determined
    by the value prop passed to the component, and any changes to the input are handled
    by the parent component.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of a controlled component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: In the preceding code, we use `useState` to manage the state of the input field
    and the `handleChange` function to update the state when the input is changed.
    Because the value of the input is determined by the `inputValue` state variable,
    the input is considered to be a controlled component.
  prefs: []
  type: TYPE_NORMAL
- en: On the other hand, an uncontrolled component is a component in React that manages
    its own state internally. This means that the value of the input field is determined
    by the `defaultValue` prop passed to the component, and any changes to the input
    are handled by the component itself.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is an example of an uncontrolled component:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: In this example, we used `ref` to manage the state of the input field and the
    `handleSubmit` function to handle the form submission. Because the value of the
    input is determined by the `defaultValue` prop and managed internally by the component,
    the input is considered to be an uncontrolled component.
  prefs: []
  type: TYPE_NORMAL
- en: In this section, we have explored most of the React and ES6 features that we
    will use in the next chapters. We will mostly be working with React Hooks, JSX,
    and interesting ES6 features such as template literals and `let`/`const` keywords.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we’ve explained frontend development and created a React application
    by installing **Node.js** and **VS Code**. We then configured it for better development
    using **VS Code**. React will also run in the browser, so we installed some plugins
    that will make debugging easier.
  prefs: []
  type: TYPE_NORMAL
- en: Then, we started coding a little bit with basic configuration for routing, styling,
    and CORS configuration to allow requests on the Django API. Finally, we explored
    the React and ES6 features that we will be using in the next chapters.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we’ll familiarize ourselves more with React by building
    a login and register page while explaining component-driven development.
  prefs: []
  type: TYPE_NORMAL
- en: Questions
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: What are Node.js and `yarn`?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is frontend development?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you install Node.js?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is VS Code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you install extensions in VS Code?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the purpose of hot reloading?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: How do you create a React application with `create-react-app?`
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
