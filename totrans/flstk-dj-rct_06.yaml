- en: '6'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '6'
- en: Creating a Project with React
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 使用React创建项目
- en: In this chapter, we’ll focus on understanding frontend development and creating
    a web frontend project with React. In previous chapters, we mostly focused on
    Django and Django Rest. In this chapter, we’ll explain the basics of frontend
    development. Next, we will introduce the React library and create a starting project
    for the following chapters. Finally, we will learn how to configure our project.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将专注于理解前端开发，并使用React创建一个Web前端项目。在前面的章节中，我们主要关注Django和Django Rest。在本章中，我们将解释前端开发的基础知识。接下来，我们将介绍React库，并为后续章节创建一个起始项目。最后，我们将学习如何配置我们的项目。
- en: 'In this chapter, we will cover the following topics:'
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将涵盖以下主题：
- en: Understanding frontend development
  id: totrans-4
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解前端开发
- en: Creating the React project
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建React项目
- en: Configuring the project
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 配置项目
- en: Useful ES6 and React features
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 有用的ES6和React特性
- en: Technical requirements
  id: totrans-8
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 技术要求
- en: In this book, we use the Linux OS, but you can find the tools needed for this
    project on other OSs as well. We’ll see how to install Node.js and **Visual Studio
    Code** (**VS Code**) on your machine in this chapter.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们使用Linux操作系统，但您也可以在其他操作系统上找到此项目所需的所有工具。在本章中，我们将介绍如何在您的机器上安装Node.js和**Visual
    Studio Code**（**VS Code**）。
- en: 'The following GitHub link will also be required: [https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap6](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap6).'
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 以下GitHub链接也将是必需的：[https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap6](https://github.com/PacktPublishing/Full-stack-Django-and-React/tree/chap6)。
- en: Understanding frontend development
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 理解前端开发
- en: Frontend development is the part of software development that focuses on the
    **User Interface** (**UI**). In web development, frontend development is the practice
    of producing **HTML**, **CSS**, and **JavaScript** for a website or web application.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 前端开发是软件开发中专注于**用户界面**（**UI**）的部分。在Web开发中，前端开发是指为网站或Web应用程序生成**HTML**、**CSS**和**JavaScript**的实践。
- en: '**HTML** stands for **HyperText Markup Language**. HTML displays content on
    the page, such as text, buttons, links, headings, or lists.'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: '**HTML**代表**超文本标记语言**。HTML在页面上显示内容，如文本、按钮、链接、标题或列表。'
- en: '**CSS** is defined as **Cascade Style Sheets**. CSS is used to style the web
    page. It deals with things such as colors, layouts, and animation. It also helps
    with the accessibility of your websites so that everyone can easily use your website.'
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: '**CSS**被定义为**层叠样式表**。CSS用于美化网页。它处理诸如颜色、布局和动画等问题。它还帮助提高网站的可访问性，以便每个人都能轻松使用您的网站。'
- en: Finally, **JavaScript** is a client-side language that facilitates user interaction
    and makes dynamic pages. It can help with complex animations, form validation,
    data fetching from a server, and data submission to the server.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，**JavaScript**是一种客户端语言，它促进了用户交互并使页面动态化。它可以帮助进行复杂的动画、表单验证、从服务器获取数据以及将数据提交到服务器。
- en: However, as with languages such as Python, while building a frontend application
    from scratch with HTML, CSS, and JavaScript is definitely possible, it is quite
    difficult. It requires good knowledge of code architecture and component reusability.
    In the end, you’ll end up creating your own development framework.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: 然而，与Python等语言一样，虽然从头开始使用HTML、CSS和JavaScript构建前端应用程序是完全可能的，但这相当困难。它需要良好的代码架构和组件重用性知识。最终，您将创建自己的开发框架。
- en: But why not directly use some pre-built CSS or JavaScript framework?
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 但为什么不直接使用一些预构建的CSS或JavaScript框架呢？
- en: Tools such as Vue, Angular, or React can help you write frontend applications
    with seed and in a smoother way.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 如Vue、Angular或React之类的工具可以帮助您以种子和更平滑的方式编写前端应用程序。
- en: In this book, we’ll be using React’s open source JavaScript library. Let’s learn
    more about React as a library.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 在这本书中，我们将使用React的开源JavaScript库。让我们更多地了解React作为一个库。
- en: What is React?
  id: totrans-20
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 什么是React？
- en: '**React** is a library that helps developers build reactive UIs as a tree of
    small reusable pieces called components.'
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: '**React**是一个库，它帮助开发者通过称为组件的小型可重用部件的树状结构构建响应式UI。'
- en: 'In frontend development, a component is a mixture of HTML, CSS, and JavaScript
    that captures the logic required to render a small section or a larger UI. Let’s
    analyze the following HTML form to better understand components in frontend development:'
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 在前端开发中，组件是由HTML、CSS和JavaScript混合而成，用于捕获渲染小部分或较大UI所需的逻辑。让我们分析以下HTML表单，以更好地理解前端开发中的组件：
- en: '![Figure 6.1 – HTML form](img/Figure_6.01_B18221.jpg)'
  id: totrans-23
  prefs: []
  type: TYPE_IMG
  zh: '![图6.1 – HTML表单](img/Figure_6.01_B18221.jpg)'
- en: Figure 6.1 – HTML form
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.1 – HTML表单
- en: 'As you can see in *Figure 6**.1*, in the form, we have defined four components:'
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 如 *图 6**.1 所示，在表单中，我们定义了四个组件：
- en: The Name input
  id: totrans-26
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 名称输入
- en: The Email input
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 电子邮件输入
- en: The Message input
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 消息输入
- en: The **Submit** button
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交**按钮'
- en: Each of these components has its own logic. For example, the **Submit** button
    will validate the form and save or send the message to a remote source.
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这些组件中的每一个都有自己的逻辑。例如，**提交**按钮将验证表单并将消息保存或发送到远程源。
- en: '**React** is defined as a library instead of a framework because it only deals
    with UI rendering and leaves many of the other things that are important in development
    to the developers or other tools.'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '**React** 被定义为库而不是框架，因为它只处理 UI 渲染，并将许多其他在开发中很重要的事情留给开发者或其他工具。'
- en: 'To build a React application, you’ll need the following stack:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 要构建 React 应用程序，你需要以下堆栈：
- en: '**Application code**: React, Redux, ESLint, Prettier, and React Router'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**应用程序代码**：React、Redux、ESLint、Prettier 和 React Router'
- en: '`npm`/`yarn`/`pnpm`, and `babel`'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`npm`/`yarn`/`pnpm` 和 `babel`'
- en: '**Testing tools**: Jest and Enzyme'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**测试工具**：Jest 和 Enzyme'
- en: You’ll need to add these dependencies to your React project to optimize and
    perform some tasks – that’s where React differs from tools such as Angular, which
    comes with its own stack for routing, for example.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 你需要将这些依赖项添加到你的 React 项目中，以优化和执行一些任务——这就是 React 与例如带有其自己的路由堆栈的 Angular 等工具不同的地方。
- en: Now that we better understand React, let’s create a React project.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们对 React 有更好的理解，让我们创建一个 React 项目。
- en: Creating the React project
  id: totrans-38
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建 React 项目
- en: Before creating the React project, we need to have tools installed for a better
    development experience. These tools are drivers, editors, and plugins basically.
    Let’s start by installing Node.js.
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建 React 项目之前，我们需要安装一些工具以获得更好的开发体验。这些工具基本上是驱动程序、编辑器和插件。让我们先安装 Node.js。
- en: Installing Node.js
  id: totrans-40
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 Node.js
- en: '**Node.js** is an open source and powerful JavaScript-based server-side environment.
    It allows developers to run JavaScript programs on the server side, even though
    JavaScript is natively a client-side language.'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '**Node.js** 是一个开源且功能强大的基于 JavaScript 的服务器端环境。它允许开发者即使在 JavaScript 本地是客户端语言的情况下，也能在服务器端运行
    JavaScript 程序。'
- en: '**Node.js** is available for multiple OSs, such as Windows, macOS, and Linux.
    In this book, we are working on a Linux machine and Node.js should normally be
    installed already by default.'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '**Node.js** 可用于多个操作系统，如 Windows、macOS 和 Linux。在这本书中，我们正在使用 Linux 机器，Node.js
    应该已经默认安装。'
- en: For other OSs, you can find the installation package at [https://nodejs.org/en/download/](https://nodejs.org/en/download/).
    Download the latest **Long-Term Support** (**LTS**) version for your OS.
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: 对于其他操作系统，你可以在 [https://nodejs.org/en/download/](https://nodejs.org/en/download/)
    找到安装包。为你的操作系统下载最新的 **长期支持** (**LTS**) 版本。
- en: 'When visiting the link, you’ll have an output similar to the following screenshot:'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 当访问链接时，你将看到一个类似于以下截图的输出：
- en: '![Figure 6.2 – Node.js installers](img/Figure_6.02_B18221.jpg)'
  id: totrans-45
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.2 – Node.js 安装程序](img/Figure_6.02_B18221.jpg)'
- en: Figure 6.2 – Node.js installers
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.2 – Node.js 安装程序
- en: 'To check whether Node.js has been installed on your Linux machine, open the
    Terminal and enter the following commands:'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 要检查 Node.js 是否已安装在你的 Linux 机器上，打开终端并输入以下命令：
- en: '[PRE0]'
  id: totrans-48
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'These commands should show you the versions of Node.js and `yarn` installed:'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 这些命令应该会显示已安装的 Node.js 和 `yarn` 版本：
- en: '![Figure 6.3 – node and yarn versions](img/Figure_6.03_B18221.jpg)'
  id: totrans-50
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.3 – node 和 yarn 版本](img/Figure_6.03_B18221.jpg)'
- en: Figure 6.3 – node and yarn versions
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.3 – node 和 yarn 版本
- en: 'If you don’t have `yarn` installed on your machine, you can install it with
    the `npm` package:'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你机器上没有安装 `yarn`，你可以使用 `npm` 包来安装它：
- en: '[PRE1]'
  id: totrans-53
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: '`yarn` and `npm` are package managers for JavaScript. We’ll use the `yarn`
    package manager a lot in upcoming chapters to install packages, run tests, or
    build a production-ready version of the frontend. However, feel free to use `npm`
    if you want. Just don’t forget that the commands are slightly different.'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`yarn` 和 `npm` 是 JavaScript 的包管理器。在接下来的章节中，我们将大量使用 `yarn` 包管理器来安装包、运行测试或构建前端的生产版本。然而，如果你愿意，也可以使用
    `npm`。只是别忘了命令略有不同。'
- en: The basic tools to develop with JavaScript have now been installed. Next, we
    will need to install VS Code and configure it to make JavaScript development easier.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 现在已经安装了用于 JavaScript 开发的基本工具。接下来，我们需要安装 VS Code 并配置它以使 JavaScript 开发更容易。
- en: Installing VS Code
  id: totrans-56
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 安装 VS Code
- en: VS Code is an open source code editor developed and maintained by Microsoft.
    It supports multiple programming languages and with the plugins and extensions,
    you can easily transform it into a powerful IDE. However, you can also use other
    editors such as **Atom**, **Brackets**, or the powerful **IDE WebStorm**. Feel
    free to use what you are familiar with.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code是由微软开发和维护的开源代码编辑器。它支持多种编程语言，并且通过插件和扩展，你可以轻松地将其转换成一个强大的集成开发环境。然而，你也可以使用其他编辑器，例如**Atom**、**Brackets**或强大的**IDE
    WebStorm**。请随意使用你熟悉的工具。
- en: VS Code is available for Windows, macOS, and Linux and you can download the
    right version for your OS at [https://code.visualstudio.com/](https://code.visualstudio.com/).
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code适用于Windows、macOS和Linux，你可以在[https://code.visualstudio.com/](https://code.visualstudio.com/)下载适合你操作系统的版本。
- en: 'Once it’s installed and opened, you’ll see the following window:'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 安装并打开后，你会看到以下窗口：
- en: '![Figure 6.4 – VS Code window](img/Figure_6.04_B18221.jpg)'
  id: totrans-60
  prefs: []
  type: TYPE_IMG
  zh: '![图6.4 – VS Code窗口](img/Figure_6.04_B18221.jpg)'
- en: Figure 6.4 – VS Code window
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.4 – VS Code窗口
- en: 'VS Code comes with an integrated terminal that you can use to create and run
    React apps. Note also that you can open projects with VS Code using the following
    command in the terminal in the directory of the project:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: VS Code内置了一个终端，你可以使用它来创建和运行React应用。注意，你还可以在项目目录的终端中使用以下命令打开项目：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: You can find the integrated terminal in the **View | Integrated** **Terminal**
    menu.
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 你可以在**视图 | 集成** **终端**菜单中找到内置的终端。
- en: With the basics of VS Code explored, let’s add the needed extensions to make
    React development more enjoyable.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 在探索了VS Code的基础功能后，让我们添加所需的扩展，以使React开发更加愉快。
- en: Adding VS Code extensions
  id: totrans-66
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加VS Code扩展
- en: Every programming language and framework comes with a lot of extensions available
    to make development easier and more enjoyable. These extensions include code snippets,
    testing, project environment configuration, and code formatting. In VS Code, if
    you open **Extensions** in the activity bar (the bar on the left), you can find
    a search bar to look for different extensions.
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 每种编程语言和框架都提供大量扩展，以使开发更加轻松和愉快。这些扩展包括代码片段、测试、项目环境配置和代码格式化。在VS Code中，如果你在活动栏（左侧的栏）中打开**扩展**，你可以找到一个搜索栏来查找不同的扩展。
- en: 'For the React project, let’s start by adding the **ES7+ React/Redux/React-Native/JS**
    **snippets** extension. This extension will suggest code snippets when writing
    code in React files. It should look something like this:'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 对于React项目，让我们首先添加**ES7+ React/Redux/React-Native/JS**代码片段扩展。这个扩展会在编写React文件时建议代码片段。它看起来可能像这样：
- en: "![Figure 6.5 – ES7 + React/Redux/React-\uFEFFNative/JS \uFEFFsnippets extension](img/Figure_6.05_B18221.jpg)"
  id: totrans-69
  prefs: []
  type: TYPE_IMG
  zh: '![图6.5 – ES7 + React/Redux/React-Native/JS代码片段扩展](img/Figure_6.05_B18221.jpg)'
- en: Figure 6.5 – ES7 + React/Redux/React-Native/JS snippets extension
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.5 – ES7 + React/Redux/React-Native/JS代码片段扩展
- en: 'After that, let’s install the **ESLint** extension. It’ll help you find typos
    and syntax errors quickly by automatically formatting the code and showing formatting
    errors. This makes the ES code formatting rules easy to understand. The ESLint
    extension looks like this:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 之后，让我们安装**ESLint**扩展。它将通过自动格式化代码并显示格式错误来帮助你快速找到拼写错误和语法错误。这使得ES代码格式化规则易于理解。ESLint扩展看起来可能像这样：
- en: '![Figure 6.6 – The ESLint extension](img/Figure_6.06_B18221.jpg)'
  id: totrans-72
  prefs: []
  type: TYPE_IMG
  zh: '![图6.6 – ESLint扩展](img/Figure_6.06_B18221.jpg)'
- en: Figure 6.6 – The ESLint extension
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.6 – ESLint扩展
- en: 'Next, we will add another VS Code extension called **Prettier**. Prettier is
    a code formatter that not only makes your code visually appealing but also much
    more structured for readability. You can find a VS Code extension that can help
    you format your code automatically after saving your code. The extension looks
    something like this:'
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我们将添加另一个名为**Prettier**的VS Code扩展。Prettier是一个代码格式化工具，它不仅使你的代码看起来更吸引人，而且结构更清晰，便于阅读。你可以在保存代码后找到VS
    Code扩展来自动格式化你的代码。这个扩展看起来可能像这样：
- en: '![Figure 6.7 – Prettier code formatter](img/Figure_6.07_B18221.jpg)'
  id: totrans-75
  prefs: []
  type: TYPE_IMG
  zh: '![图6.7 – 更漂亮的代码格式化工具](img/Figure_6.07_B18221.jpg)'
- en: Figure 6.7 – Prettier code formatter
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.7 – 更漂亮的代码格式化工具
- en: 'And finally, but optionally, we have **indent-rainbow**. If you have many blocks
    of code with parents and children, it can become quite difficult to read. This
    extension will make JavaScript code with indentation more readable. It looks like
    this:'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，但不是必须的，我们有**indent-rainbow**。如果你有很多带有父亲和子代的代码块，阅读可能会变得相当困难。这个扩展将使具有缩进的JavaScript代码更易于阅读。它看起来可能像这样：
- en: '![Figure 6.8 – The indent-rainbow extension](img/Figure_6.08_B18221.jpg)'
  id: totrans-78
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.8 – indent-rainbow 扩展](img/Figure_6.08_B18221.jpg)'
- en: Figure 6.8 – The indent-rainbow extension
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.8 – indent-rainbow 扩展
- en: Great! With these extensions installed in VS Code, we can now move on to creating
    the React application.
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！在 VS Code 中安装了这些扩展后，我们现在可以继续创建 React 应用程序。
- en: Creating and running a React app
  id: totrans-81
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建和运行一个 React 应用程序
- en: With Node.js and VS Code installed and configured, we have everything we need
    to create our first React.js application.
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 在安装并配置了 Node.js 和 VS Code 之后，我们拥有了创建第一个 React.js 应用程序所需的一切。
- en: 'To create our React app, we’ll be using `create-react-app` ([https://github.com/facebook/create-react-app](https://github.com/facebook/create-react-app)),
    a simple command for creating a modern web React application. Follow these steps
    to create your first React application and modify the code:'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: 要创建我们的 React 应用程序，我们将使用 `create-react-app` ([https://github.com/facebook/create-react-app](https://github.com/facebook/create-react-app))，这是一个用于创建现代
    Web React 应用程序的简单命令。按照以下步骤创建您的第一个 React 应用程序并修改代码：
- en: 'Run the following command to create a React application:'
  id: totrans-84
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 运行以下命令以创建一个 React 应用程序：
- en: '[PRE3]'
  id: totrans-85
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE3]'
- en: 'This command will create a React application named `social-media-app`. If you
    are using `npm`, then replace `yarn` with `npx`. After installation, you will
    have an output similar to the following screenshot:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: 此命令将创建一个名为 `social-media-app` 的 React 应用程序。如果您使用的是 `npm`，则将 `yarn` 替换为 `npx`。安装后，您将得到类似于以下截图的输出：
- en: '![Figure 6.9 – The React project creation terminal output](img/Figure_6.09_B18221.jpg)'
  id: totrans-87
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.9 – React 项目创建终端输出](img/Figure_6.09_B18221.jpg)'
- en: Figure 6.9 – The React project creation terminal output
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.9 – React 项目创建终端输出
- en: Inside `social-media-app`, you’ll find a file called `package.json`. This file
    contains all the configurations for the JavaScript project, starting from basic
    information about the project, such as the name, the version, and the developers,
    but it also includes a list of installed packages and the scripts related to starting
    the server, for example.
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: 在 `social-media-app` 目录中，您会找到一个名为 `package.json` 的文件。此文件包含 JavaScript 项目的所有配置，从项目的基本信息，如名称、版本和开发者，到安装的包列表以及与启动服务器相关的脚本等。
- en: 'Run the created React application with the following command:'
  id: totrans-90
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 使用以下命令运行创建的 React 应用程序：
- en: '[PRE4]'
  id: totrans-91
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'Open your browser and specify `localhost:3000` as your web link. Once done,
    it will look something like this:'
  id: totrans-92
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 打开您的浏览器，并将 `localhost:3000` 指定为您网页链接。完成后，它将看起来像这样：
- en: "![Figure 6.10 – Running \uFEFFthe React application](img/Figure_6.10_B18221.jpg)"
  id: totrans-93
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.10 – 运行 React 应用程序](img/Figure_6.10_B18221.jpg)'
- en: Figure 6.10 – Running the React application
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.10 – 运行 React 应用程序
- en: The application is running. Now, let’s modify the code in the React application.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序正在运行。现在，让我们修改 React 应用程序中的代码。
- en: Open the `App.js` file from the `src` folder in the VS Code editor.
  id: totrans-96
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 VS Code 编辑器中打开 `src` 文件夹中的 `App.js` 文件。
- en: 'Modify the text inside the `App.js` file from `Learn React` to `Hello World`
    and save the file:'
  id: totrans-97
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将 `App.js` 文件中的文本从 `Learn React` 修改为 `Hello World` 并保存文件：
- en: '![Figure 6.11 – The App.js code](img/Figure_6.11_B18221.jpg)'
  id: totrans-98
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.11 – App.js 代码](img/Figure_6.11_B18221.jpg)'
- en: Figure 6.11 – The App.js code
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.11 – App.js 代码
- en: 'Check the browser again and you’ll see the changes:'
  id: totrans-100
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 再次检查浏览器，您将看到变化：
- en: '![Figure 6.12 – Modified React application](img/Figure_6.12_B18221.jpg)'
  id: totrans-101
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.12 – 修改后的 React 应用程序](img/Figure_6.12_B18221.jpg)'
- en: Figure 6.12 – Modified React application
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.12 – 修改后的 React 应用程序
- en: React has a hot reload feature, meaning that any changes made to a file in the
    project are reflected in the rendering of the web application.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: React 具有热重载功能，这意味着对项目中文件所做的任何更改都会反映在 Web 应用的渲染中。
- en: Great! We’ve just installed a React application and modified the code.
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！我们刚刚安装了一个 React 应用程序并修改了代码。
- en: Let’s install some tools in the browser for debugging the React application.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在浏览器中安装一些工具来调试 React 应用程序。
- en: Installing a debugging plugin in the browser
  id: totrans-106
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 在浏览器中安装调试插件
- en: 'To debug React applications, we have to install React Developer Tools, a plugin
    available on Chrome, Firefox, and Edge browsers. You can find the plugin for the
    Chrome version at [https://chrome.google.com/webstore/category/extensions](https://chrome.google.com/webstore/category/extensions)
    and the Firefox version at [https://addons.mozilla.org](https://addons.mozilla.org).
    The plugin looks something like this:'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 要调试 React 应用程序，我们必须安装 React Developer Tools，这是一个在 Chrome、Firefox 和 Edge 浏览器上可用的插件。您可以在
    Chrome 版本的插件地址为 [https://chrome.google.com/webstore/category/extensions](https://chrome.google.com/webstore/category/extensions)，Firefox
    版本的插件地址为 [https://addons.mozilla.org](https://addons.mozilla.org)。插件看起来大致如下：
- en: '![Figure 6.13 – The React browser plugin](img/Figure_6.13_B18221.jpg)'
  id: totrans-108
  prefs: []
  type: TYPE_IMG
  zh: '![图6.13 – React浏览器插件](img/Figure_6.13_B18221.jpg)'
- en: Figure 6.13 – The React browser plugin
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.13 – React浏览器插件
- en: 'Once it’s installed, you can open the developer tools by pressing *Ctrl + Shift
    + I* (or *F12*) in the Chrome browser. The following screenshot shows the developer
    tools in the Firefox browser:'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 安装完成后，您可以通过在Chrome浏览器中按*Ctrl + Shift + I*（或*F12*）打开开发者工具。以下截图显示了Firefox浏览器中的开发者工具：
- en: '![Figure 6.14 – React application with the open React extension](img/Figure_6.14_B18221.jpg)'
  id: totrans-111
  prefs: []
  type: TYPE_IMG
  zh: '![图6.14 – 带有打开的React扩展的React应用程序](img/Figure_6.14_B18221.jpg)'
- en: Figure 6.14 – React application with the open React extension
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.14 – 带有打开的React扩展的React应用程序
- en: This tool will be useful for finding bugs and debugging the application in the
    development phase.
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 此工具在开发阶段查找错误和调试应用程序时将非常有用。
- en: The project is created and can now be successfully run. Let’s install and configure
    some packages for routing and styling in the next section.
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 项目已创建，现在可以成功运行。在下一节中，我们将安装和配置一些用于路由和样式的包。
- en: Configuring the project
  id: totrans-115
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 配置项目
- en: Before starting to write the authentication flow, let’s make sure that the project
    is ready for coding. In this section, we will configure styling and routing, and
    allow the request on the API.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: 在开始编写身份验证流程之前，让我们确保项目已准备好进行编码。在本节中，我们将配置样式和路由，并允许API上的请求。
- en: Let’s start with routing first.
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们先从路由开始。
- en: Adding React Router
  id: totrans-118
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加React Router
- en: Routing in a frontend application represents everything that deals with moving
    from one view to another and loading the right page using the right URL.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 前端应用程序中的路由表示处理从一个视图移动到另一个视图以及使用正确的URL加载正确页面的所有内容。
- en: React doesn’t come with an integrated routing package, so we’ll use the `react-router`
    package.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: React没有内置的路由包，因此我们将使用`react-router`包。
- en: 'You can install the package using the following command:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以使用以下命令安装包：
- en: '[PRE5]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'Then, edit the `index.js` file like so:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，按照如下方式编辑`index.js`文件：
- en: src/index.js
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: src/index.js
- en: '[PRE6]'
  id: totrans-125
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: In the preceding code block, we imported the `BrowserRouter` component and wrapped
    it inside the `React.StrictMode` component which helps us receive warnings in
    the development mode ([https://reactjs.org/docs/strict-mode.html](https://reactjs.org/docs/strict-mode.html)),
    and finally, the `App` component is wrapped inside the `BrowserRouter` component.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码块中，我们导入了`BrowserRouter`组件，并将其包裹在`React.StrictMode`组件中，这有助于我们在开发模式下接收警告，最后，`App`组件被包裹在`BrowserRouter`组件中。
- en: With React Router configured, we can freely move on to installing React Bootstrap
    for styling.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 配置了React Router后，我们可以自由地继续安装React Bootstrap进行样式设置。
- en: Adding React Bootstrap
  id: totrans-128
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加React Bootstrap
- en: React is easily configurable with CSS frameworks. For this project, for the
    sake of simplicity and rapidity of development, we’ll go with Bootstrap.
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: React可以很容易地与CSS框架配置。对于此项目，为了简单和快速开发，我们将选择Bootstrap。
- en: Fortunately, the React ecosystem provides a package called `react-bootstrap`
    independent of JQuery.
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 幸运的是，React生态系统提供了一个名为`react-bootstrap`的包，它独立于JQuery。
- en: 'Run the following command to install the package:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 运行以下命令安装包：
- en: '[PRE7]'
  id: totrans-132
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'Next, import the `bootstrap` CSS file into the `index.js` file like so:'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，将`bootstrap` CSS文件导入到`index.js`文件中，如下所示：
- en: src/index.js
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: src/index.js
- en: '[PRE8]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: With `react-router` and `react-bootstrap` installed, let’s create a quick page
    using both of these in the next subsection.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 安装了`react-router`和`react-bootstrap`后，让我们在下一小节中创建一个使用这两个包的快速页面。
- en: Creating the Home page
  id: totrans-137
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 创建主页
- en: 'Creating a page in React using React Router follows this pattern most of the
    time:'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 使用React Router在React中创建页面通常遵循以下模式：
- en: Creating the component and the page
  id: totrans-139
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 创建组件和页面
- en: Registering the page in `BrowserRouter` with an URL
  id: totrans-140
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 在`BrowserRouter`中注册页面并指定URL
- en: 'Follow these steps to create the `Home` page:'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤创建`Home`页面：
- en: Create a directory in `src` called `pages`.
  id: totrans-142
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`src`目录下创建一个名为`pages`的目录。
- en: 'Inside the `pages` directory, create a new file called `Home.jsx`:'
  id: totrans-143
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`pages`目录中，创建一个名为`Home.jsx`的新文件：
- en: "![Figure 6.15 – \uFEFFThe pages folder structure](img/Figure_6.15_B18221.jpg)"
  id: totrans-144
  prefs: []
  type: TYPE_IMG
  zh: '![图6.15 – 页面文件夹结构](img/Figure_6.15_B18221.jpg)'
- en: Figure 6.15 – The pages folder structure
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: 图6.15 – 页面文件夹结构
- en: This file will contain the UI for the `Profile` page.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 此文件将包含`Profile`页面的UI。
- en: 'Add the following text to the `Home.jsx` file to ensure that authentication
    is working properly:'
  id: totrans-147
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 将以下文本添加到`Home.jsx`文件中，以确保身份验证正常工作：
- en: src/pages/Home.jsx
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: src/pages/Home.jsx
- en: '[PRE9]'
  id: totrans-149
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'Register this page in the `App.js` file:'
  id: totrans-150
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在`App.js`文件中注册此页面：
- en: src/App.js
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: src/App.js
- en: '[PRE10]'
  id: totrans-152
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'To register a page with React Router, you use the `<Route />` component and
    pass two props:'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 React Router 注册页面，您使用 `<Route />` 组件并传递两个属性：
- en: The path
  id: totrans-154
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 路径
- en: The component element
  id: totrans-155
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 组件元素
- en: 'With the preceding code added, make sure that the React project is running.
    You can check the page at `http://127.0.0.1:3000`:'
  id: totrans-156
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 添加前面的代码后，确保 React 项目正在运行。您可以在 `http://127.0.0.1:3000` 的页面进行检查：
- en: '![Figure 6.16 – Home page](img/Figure_6.16_B18221.jpg)'
  id: totrans-157
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.16 – 首页](img/Figure_6.16_B18221.jpg)'
- en: Figure 6.16 – Home page
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.16 – 首页
- en: Great! With this added, let’s quickly configure the Django project to avoid
    some request issues in the next section.
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: 太好了！添加这些后，让我们快速配置 Django 项目，以避免在下一节中遇到一些请求问题。
- en: Configuring CORS
  id: totrans-160
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 配置 CORS
- en: '**CORS** stands for **cross-origin resource sharing**. It’s a browser mechanism
    that enables controlled access to resources located outside of a given domain.'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '**CORS** 代表 **跨源资源共享**。它是一种浏览器机制，允许对位于给定域之外的资源进行受控访问。'
- en: It helps prevent cross-domain attacks or unwanted requests. In the case of this
    project, the React project is running on `http://127.0.0.1:3000`.
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: 它有助于防止跨域攻击或不受欢迎的请求。在本项目中，React 项目运行在 `http://127.0.0.1:3000`。
- en: 'If we try to make some requests from the browser, we’ll receive an error. Open
    the React application at `http://127.0.0.1:3000` and open **Developer Tools**:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们尝试从浏览器发起一些请求，我们会收到一个错误。打开 `http://127.0.0.1:3000` 上的 React 应用并打开 **开发者工具**：
- en: '![Figure 6.17 – Opening the developer tools](img/Figure_6.17_B18221.jpg)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.17 – 打开开发者工具](img/Figure_6.17_B18221.jpg)'
- en: Figure 6.17 – Opening the developer tools
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.17 – 打开开发者工具
- en: Also, make sure that the Django server is running.
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，请确保 Django 服务器正在运行。
- en: 'In the console, enter the following line:'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 在控制台中输入以下行：
- en: '[PRE11]'
  id: totrans-168
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: 'You’ll receive an error:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 您将收到一个错误：
- en: '![Figure 6.18 – A CORS error when making a request](img/Figure_6.18_B18221.jpg)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.18 – 发起请求时的 CORS 错误](img/Figure_6.18_B18221.jpg)'
- en: Figure 6.18 – A CORS error when making a request
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.18 – 发起请求时的 CORS 错误
- en: 'Let’s quickly configure the Django API side by following these steps:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 按照以下步骤快速配置 Django API：
- en: 'Enable `django-cors-headers`:'
  id: totrans-173
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 启用 `django-cors-headers`：
- en: '[PRE12]'
  id: totrans-174
  prefs:
  - PREF_IND
  type: TYPE_PRE
  zh: '[PRE12]'
- en: 'If the installation of the `django-cors-headers` package is complete, go to
    your `settings.py` file and add the package into `INSTALLED_APPS` and the middleware:'
  id: totrans-175
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 如果 `django-cors-headers` 包的安装完成，请转到您的 `settings.py` 文件并将包添加到 `INSTALLED_APPS`
    和中间件中：
- en: CoreRoot/settings.py
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: CoreRoot/settings.py
- en: '[PRE13]'
  id: totrans-177
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'Add these lines at the end of the `settings.py` file:'
  id: totrans-178
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 `settings.py` 文件的末尾添加以下行：
- en: CoreRoot/settings.py
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: CoreRoot/settings.py
- en: '[PRE14]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: Make the request again in **Developer Tools**.
  id: totrans-181
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 在 **开发者工具** 中再次发起请求。
- en: 'You will see that the request has passed, and we are good now. The API is ready
    to accept requests from the React application:'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: 您将看到请求已通过，我们现在一切正常。API 已准备好接受来自 React 应用的请求：
- en: '![Figure 6.19 – Trying a successful request in Developer Tools](img/Figure_6.19_B18221.jpg)'
  id: totrans-183
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.19 – 在开发者工具中尝试成功的请求](img/Figure_6.19_B18221.jpg)'
- en: Figure 6.19 – Trying a successful request in Developer Tools
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.19 – 在开发者工具中尝试成功的请求
- en: With the React project configured with the backend for a better development
    experience, we can now explore the **ES6** (**ECMAScript 6**) and React features
    that we will use a lot in upcoming chapters.
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: 使用配置了后端的 React 项目以获得更好的开发体验后，我们现在可以探索在接下来的章节中会大量使用的 **ES6**（**ECMAScript 6**）和
    React 功能。
- en: Useful ES6 and React features
  id: totrans-186
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 有用的 ES6 和 React 功能
- en: JavaScript and React are evolving languages and technologies, incorporating
    exciting, new features each year. **ES6**, also known as **ECMAScript 2015**,
    is a significant enhancement in the JavaScript language that allows developers
    to write programs for complex applications with better techniques and patterns.
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: JavaScript 和 React 是不断进化的语言和技术，每年都会融入令人兴奋的新特性。**ES6**，也称为 **ECMAScript 2015**，是
    JavaScript 语言中的一个重大增强，它允许开发者使用更好的技术和模式编写用于复杂应用的程序。
- en: With React, we have moved from writing classes to writing components using functions
    and React Hooks. In this section, we will quickly explore the ES6 syntaxes, React
    concepts, and React Hooks that we will use in the following chapters.
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 React，我们已经从编写类转向使用函数和 React Hooks 编写组件。在本节中，我们将快速探索在接下来的章节中会使用的 ES6 语法、React
    概念和 React Hooks。
- en: const and let
  id: totrans-189
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: const 和 let
- en: 'The `const` keyword was introduced in `const` keyword, variables can’t be redeclared
    nor reassigned. Here’s an example of its usage:'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: '`const` 关键字是在 `const` 关键字中引入的，变量不能被重新声明或重新赋值。以下是其使用示例：'
- en: '![Figure 6.20 – Usage of the const keyword](img/Figure_6.20_B18221.jpg)'
  id: totrans-191
  prefs: []
  type: TYPE_IMG
  zh: '![图 6.20 – `const` 关键字的使用](img/Figure_6.20_B18221.jpg)'
- en: Figure 6.20 – Usage of the const keyword
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: 图 6.20 – const 关键字的用法
- en: 'On the other hand, `let` is used to declare a variable that can be reassigned
    to a new value. This is useful when you want to create a variable that can change
    over time, such as a counter or an iterator. Here’s an example:'
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，`let` 用于声明一个可以重新赋值的新值的变量。当你想要创建一个可以随时间变化的变量时，例如计数器或迭代器，这很有用。以下是一个示例：
- en: '[PRE15]'
  id: totrans-194
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: In general, it is a good practice to use `const` by default, and only use `let`
    when you need to reassign a variable. This can help to make your code more readable
    and prevent accidental reassignments.
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: 通常，默认使用 `const` 是一个好习惯，只有在需要重新赋值变量时才使用 `let`。这可以帮助使你的代码更易读并防止意外的重新赋值。
- en: Now that we understand the usage of `const` and `let` keywords, let’s move on
    to understanding template literals in JavaScript.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 `const` 和 `let` 关键字的用法，让我们继续了解 JavaScript 中的模板字符串。
- en: Template literals
  id: totrans-197
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 模板字符串
- en: In JavaScript, template literals are a way to define string values that can
    contain placeholders for dynamic values. They are represented by the backtick
    (`` ` ``) character and use the dollar sign (`$`) and curly braces (`{}`) to insert
    expressions into the string.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 在 JavaScript 中，模板字符串是一种定义包含占位符的字符串值的方式，这些占位符可以用于动态值。它们由反引号 (````) 字符表示，并使用美元符号
    (`$`) 和大括号 (`{}`) 来在字符串中插入表达式。
- en: 'Here is an example of a template literal:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个模板字符串的示例：
- en: '[PRE16]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: In this example, we defined a template literal named `message` that contains
    a placeholder for the `name` variable. When the template literal is evaluated,
    the `name` variable is inserted into the string and the resulting string is logged
    to the console.
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们定义了一个名为 `message` 的模板字符串，其中包含一个用于 `name` 变量的占位符。当模板字符串被评估时，`name` 变量会被插入到字符串中，并且生成的字符串会被记录到控制台。
- en: 'Template literals provide a more convenient and readable way to create strings
    with dynamic values compared to using the traditional string concatenation operator
    (`+`). They also support **string interpolation**, which means that you can insert
    expressions into the string, as well as multiline strings. Here’s an example:'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 模板字符串提供了一种比使用传统的字符串连接运算符 (`+`) 更方便、更易读的方式来创建包含动态值的字符串。它们还支持 **字符串插值**，这意味着你可以将表达式插入到字符串中，以及多行字符串。以下是一个示例：
- en: '[PRE17]'
  id: totrans-203
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: In the preceding example, we defined a template literal called `message` that
    contains multiple expressions that are inserted into the string when the template
    literal is evaluated. This allows us to create a string with dynamic values that
    is more readable and concise than when using string concatenation.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们定义了一个名为 `message` 的模板字符串，它包含多个表达式，当模板字符串被评估时，这些表达式会被插入到字符串中。这允许我们创建一个比使用字符串连接更易读、更简洁的包含动态值的字符串。
- en: Now that we understand what template literals are, let’s explain JSX styling
    in React.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了模板字符串是什么，让我们来解释 React 中的 JSX 样式。
- en: JSX styling
  id: totrans-206
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: JSX 样式
- en: '**JSX** is a syntax extension to JavaScript that allows you to write JavaScript
    code that looks like HTML. It was introduced by Facebook as part of the React
    library, but it can be used with other JavaScript libraries and frameworks as
    well. Here is an example of how you might use JSX in a React component:'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '**JSX** 是 JavaScript 的语法扩展，允许你编写看起来像 HTML 的 JavaScript 代码。它由 Facebook 作为 React
    库的一部分引入，但也可以与其他 JavaScript 库和框架一起使用。以下是一个如何在 React 组件中使用 JSX 的示例：'
- en: '[PRE18]'
  id: totrans-208
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: In the preceding example, we defined a React component called `Component` that
    returns some JSX code. The JSX code looks like HTML, but it is transformed into
    JavaScript by the React library, which generates the appropriate elements and
    attributes in the DOM.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们定义了一个名为 `Component` 的 React 组件，它返回一些 JSX 代码。JSX 代码看起来像 HTML，但由 React
    库转换成 JavaScript，生成 DOM 中的适当元素和属性。
- en: 'When you write JSX, you can use JavaScript expressions inside the curly braces
    (`{}`) to insert dynamic values into the JSX code. This allows you to easily create
    dynamic and interactive UIs using JSX:'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: 当你编写 JSX 时，你可以在大括号 (`{}`) 内使用 JavaScript 表达式来将动态值插入到 JSX 代码中。这允许你使用 JSX 轻松创建动态和交互式的用户界面：
- en: '[PRE19]'
  id: totrans-211
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: In the preceding example, we defined a React component called `Component` that
    takes a name prop and inserts it into the JSX code using a JavaScript expression.
    This allows us to create a dynamic and personalized greeting for the user.
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的例子中，我们定义了一个名为 `Component` 的 React 组件，它接受一个名为 `name` 的属性，并使用 JavaScript 表达式将其插入到
    JSX 代码中。这允许我们为用户创建一个动态和个性化的问候语。
- en: Now that we understand how JSX works with React, let’s explain the concept of
    props and states.
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们已经了解了 JSX 如何与 React 一起工作，让我们解释一下 props 和 states 的概念。
- en: Props versus states
  id: totrans-214
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Props 与 states 的比较
- en: In React, props and states are two different ways to manage data in a component.
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: 在 React 中，props 和 states 是管理组件数据的不同方式。
- en: 'Props are short for **properties** and are used to pass data from a parent
    component to a child component. Props are read-only, which means that a child
    component cannot modify the props passed to it by the parent component:'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: Props 是 **属性** 的简称，用于将数据从父组件传递到子组件。Props 是只读的，这意味着子组件不能修改父组件传递给它的 props：
- en: '[PRE20]'
  id: totrans-217
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: In the preceding code, we defined a parent component called `ParentComponent`
    that renders a child component called `ChildComponent` and passes two props to
    the child component (`name` and `age`). The child component receives these props
    as arguments and uses them to render the content of the component. Because props
    are read-only, the child component cannot modify the `name` and `age` props passed
    to it by the parent.
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了一个名为 `ParentComponent` 的父组件，它渲染了一个名为 `ChildComponent` 的子组件，并将两个
    props (`name` 和 `age`) 传递给子组件。子组件将这些 props 作为参数接收，并使用它们来渲染组件的内容。因为 props 是只读的，所以子组件不能修改父组件传递给它的
    `name` 和 `age` props。
- en: On the other hand, a state is a way to manage data in a component that can be
    modified by the component itself. The state is private to the component and can
    only be modified using special React methods, such as `useState`.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，状态是一种管理组件数据的方式，可以由组件本身修改。状态是私有的，只能使用特殊的 React 方法（如 `useState`）进行修改。
- en: 'Here is an example of how you might modify a state in a React component:'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是一个在 React 组件中修改状态的示例：
- en: '[PRE21]'
  id: totrans-221
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: In the preceding code, we define a component called `Counter` that uses the
    `useState` Hook to manage the state of a counter. The `useState` Hook returns
    an array with two elements, the current value of the state (in this case, `count`)
    and a function to update the state (in this case, `setCount`).
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们定义了一个名为 `Counter` 的组件，它使用 `useState` 钩子来管理计数器的状态。`useState` 钩子返回一个包含两个元素的数组，当前状态值（在本例中为
    `count`）和一个用于更新状态的函数（在本例中为 `setCount`）。
- en: In the render method of the component, we display the value of the count state
    and define a button that, when clicked, calls the `handleIncrement` function to
    update the count state. This causes the component to re-render and display the
    updated value of the count state.
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在组件的渲染方法中，我们显示计数器状态的值，并定义一个按钮，当点击该按钮时，会调用 `handleIncrement` 函数来更新计数器状态。这会导致组件重新渲染并显示更新后的计数器状态值。
- en: Now that we understand the difference between props and state better, let’s
    dive deeper into understanding the `useState` Hook.
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我们更好地理解了 props 和 state 之间的区别，让我们更深入地了解 `useState` 钩子。
- en: Important note
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '`useState` is a Hook in React that allows you to add a state to functional
    components. In other words, `useState` allows you to manage the state of your
    component, which is an object that holds information about your component and
    can be used to re-render the component when this state changes.'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: '`useState` 是 React 中的一个 Hook，它允许您向函数组件添加状态。换句话说，`useState` 允许您管理组件的状态，这是一个包含有关组件信息并可用于在状态变化时重新渲染组件的对象。'
- en: The Context API
  id: totrans-227
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Context API
- en: 'The **Context API** is a way to share data between different components in
    a React application. It allows you to pass data through the component tree without
    having to pass props down manually at every level. Here is an example of how you
    might use the Context API in a React application:'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: '**Context API** 是在 React 应用程序中在不同组件之间共享数据的一种方式。它允许您通过组件树传递数据，而无需在每一级手动传递属性。以下是一个在
    React 应用程序中使用 Context API 的示例：'
- en: '[PRE22]'
  id: totrans-229
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: In the preceding code, we use the `React.createContext` method to create a new
    context object, which we call `Context`. We then provide some initial data to
    the context by wrapping our top-level component in a `Context.Provider` component
    and passing the data as the value prop. Finally, we use the `useContext` Hook
    in `Component` to access the data in the context and display it in the component.
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用 `React.createContext` 方法创建一个新的上下文对象，我们称之为 `Context`。然后，我们通过将顶层组件包裹在一个
    `Context.Provider` 组件中，并将数据作为值属性传递，向上下文中提供一些初始数据。最后，我们在 `Component` 中使用 `useContext`
    钩子来访问上下文中的数据，并在组件中显示它。
- en: There is also another Hook that we will use in this book. Let’s explain the
    `useMemo` Hook in the next section.
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 在本书中，我们还将使用另一个 Hook。让我们在下一节解释 `useMemo` 钩子。
- en: useMemo
  id: totrans-232
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: useMemo
- en: '`useMemo` is a Hook in React that allows you to optimize the performance of
    your components by memoizing expensive calculations. It works by returning a memoized
    value that is only recalculated if one of the inputs to the calculation changes.'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: '`useMemo` 是 React 中的一个 Hook，它允许你通过缓存昂贵的计算来优化组件的性能。它通过返回一个缓存的值来实现，只有当计算中的一个输入改变时，这个值才会重新计算。'
- en: Important note
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示
- en: '**Memoization** is a technique used in computer programming to speed up programs
    by storing the results of expensive function calls and returning the cached result
    when the same inputs are given again. This can be useful for optimizing programs
    that make many repeated calculations with the same input.'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: '**记忆化** 是计算机编程中用于通过存储昂贵函数调用的结果并返回缓存结果的技巧。当再次给出相同的输入时，这可以用于优化执行许多重复计算的程序。'
- en: 'Here is an example of how you might use `useMemo` to optimize the performance
    of a component:'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个如何使用 `useMemo` 来优化组件性能的例子：
- en: '[PRE23]'
  id: totrans-237
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: In the preceding code, we use `useMemo` to memoize the result of an expensive
    calculation that we do with the data prop passed to the component. Because `useMemo`
    only recalculates the value if the data prop changes, we can avoid making the
    expensive calculation every time the component is re-rendered, which can improve
    the performance of our application.
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用 `useMemo` 来缓存我们使用传递给组件的数据属性进行的昂贵计算的结果。因为 `useMemo` 只在数据属性改变时重新计算值，我们可以避免每次组件重新渲染时都进行昂贵的计算，这可以提高我们应用程序的性能。
- en: In the React project that we will build in the next chapter, we will work with
    forms using React and the Hooks provided by the React library. Let’s learn more
    about controlled and uncontrolled components.
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章我们将构建的 React 项目中，我们将使用 React 和 React 库提供的 Hooks 来处理表单。让我们更多地了解受控和非受控组件。
- en: Handling forms – controlled components and uncontrolled components
  id: totrans-240
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 处理表单 - 受控组件和非受控组件
- en: A controlled component is a component in React that is controlled by the state
    of the parent component. This means that the value of the input field is determined
    by the value prop passed to the component, and any changes to the input are handled
    by the parent component.
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: 受控组件是 React 中的一个组件，它由父组件的状态控制。这意味着输入字段的值由传递给组件的值属性决定，任何对输入的更改都由父组件处理。
- en: 'Here is an example of a controlled component:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个受控组件的例子：
- en: '[PRE24]'
  id: totrans-243
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: In the preceding code, we use `useState` to manage the state of the input field
    and the `handleChange` function to update the state when the input is changed.
    Because the value of the input is determined by the `inputValue` state variable,
    the input is considered to be a controlled component.
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 在前面的代码中，我们使用 `useState` 来管理输入字段的州和 `handleChange` 函数来更新状态，当输入改变时。因为输入的值由 `inputValue`
    状态变量决定，所以输入被视为一个受控组件。
- en: On the other hand, an uncontrolled component is a component in React that manages
    its own state internally. This means that the value of the input field is determined
    by the `defaultValue` prop passed to the component, and any changes to the input
    are handled by the component itself.
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，非受控组件是 React 中的一个组件，它内部管理自己的状态。这意味着输入字段的值由传递给组件的 `defaultValue` 属性决定，任何对输入的更改都由组件本身处理。
- en: 'Here is an example of an uncontrolled component:'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: 这里是一个非受控组件的例子：
- en: '[PRE25]'
  id: totrans-247
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: In this example, we used `ref` to manage the state of the input field and the
    `handleSubmit` function to handle the form submission. Because the value of the
    input is determined by the `defaultValue` prop and managed internally by the component,
    the input is considered to be an uncontrolled component.
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们使用 `ref` 来管理输入字段的州和 `handleSubmit` 函数来处理表单提交。因为输入的值由 `defaultValue`
    属性决定，并由组件内部管理，所以输入被视为一个非受控组件。
- en: In this section, we have explored most of the React and ES6 features that we
    will use in the next chapters. We will mostly be working with React Hooks, JSX,
    and interesting ES6 features such as template literals and `let`/`const` keywords.
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们探讨了大多数将在下一章中使用的 React 和 ES6 功能。我们将主要使用 React Hooks、JSX 以及有趣的 ES6 功能，如模板字符串和
    `let`/`const` 关键字。
- en: Summary
  id: totrans-250
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 摘要
- en: In this chapter, we’ve explained frontend development and created a React application
    by installing **Node.js** and **VS Code**. We then configured it for better development
    using **VS Code**. React will also run in the browser, so we installed some plugins
    that will make debugging easier.
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们解释了前端开发，并通过安装**Node.js**和**VS Code**创建了一个React应用程序。然后，我们使用**VS Code**对其进行配置，以实现更好的开发。React也将运行在浏览器中，因此我们安装了一些插件，这将使调试更加容易。
- en: Then, we started coding a little bit with basic configuration for routing, styling,
    and CORS configuration to allow requests on the Django API. Finally, we explored
    the React and ES6 features that we will be using in the next chapters.
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始编写一些代码，为路由、样式和CORS配置进行基本配置，以允许对Django API进行请求。最后，我们探索了下一章中将使用的React和ES6功能。
- en: In the next chapter, we’ll familiarize ourselves more with React by building
    a login and register page while explaining component-driven development.
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 在下一章中，我们将通过构建登录和注册页面来更熟悉React，同时解释组件驱动开发。
- en: Questions
  id: totrans-254
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 问题
- en: What are Node.js and `yarn`?
  id: totrans-255
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: Node.js和`yarn`是什么？
- en: What is frontend development?
  id: totrans-256
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 前端开发是什么？
- en: How do you install Node.js?
  id: totrans-257
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何安装Node.js？
- en: What is VS Code?
  id: totrans-258
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: VS Code是什么？
- en: How do you install extensions in VS Code?
  id: totrans-259
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何在VS Code中安装扩展？
- en: What is the purpose of hot reloading?
  id: totrans-260
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 热重载的目的是什么？
- en: How do you create a React application with `create-react-app?`
  id: totrans-261
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 你如何使用`create-react-app`创建一个React应用程序？
