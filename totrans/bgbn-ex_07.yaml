- en: Chapter 7. Working with Images Using Computer Vision
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will be getting started on interfacing a USB camera with
    a BeagleBone board and capturing images from the camera using OpenCV. We will
    start by installing OpenCV first and then move ahead with capturing images using
    OpenCV and Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will look deeply into the topics given in this chapter:'
  prefs: []
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a USB camera to BeagleBone Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Using Python and OpenCV together
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Image capture from a camera using Python and OpenCV
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Prerequisites
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This topic will cover what parts you will need in this chapter. These can be
    bought online.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will need the following materials to begin:'
  prefs: []
  type: TYPE_NORMAL
- en: 1x BeagleBone Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x microSD card with the latest version of Debian flashed on it to boot the
    BeagleBone board from a microSD card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x 5V DC, 2A power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x Ethernet cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x USB camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Materials needed
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 1x BeagleBone Black
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x microSD card with latest version of Debian flashed on it to boot the BeagleBone
    board from an microSD card
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x 5V DC, 2A power supply
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x Ethernet cable
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 1x USB camera
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Adding a USB camera to a BeagleBone board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Adding a USB camera to a BeagleBone board is pretty straightforward. All you
    need to do is get a USB camera that is compatible with Linux, so one which has
    drivers for Linux. These days almost all USB web cameras come with this support.
    If you have a very old USB web camera that you want to interface with a BeagleBone
    board, you might have to add some additional steps to install the device drivers
    to see your video camera element on the Linux devices list on the BeagleBone board.
    For this topic explanation, I used a Logitech C270 HD webcam, as shown in the
    following figure:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a USB camera to a BeagleBone board](img/4602_07_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can use the USB port available on the BeagleBone board to connect the USB
    camera as shown in the following picture:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a USB camera to a BeagleBone board](img/4602_07_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Boot the BeagleBone board using Debian on the MicroSD Card that we flashed
    earlier, and login into the BeagleBone board via SSH. Now type the command `Lsusb`
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a USB camera to a BeagleBone board](img/4602_07_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If you are able to see the webcam listed on the device list, it means the camera
    is connected properly to the BeagleBone board, via USB.
  prefs: []
  type: TYPE_NORMAL
- en: Then, check whether the drivers are available for the camera in the Linux kernel
    and if it has successfully interfaced, and created a video input element in the
    list of devices in Debian. Let's change the directory to dev directory `cd /dev`,
    and then `ls`. If you see the **video0** listed on the list, then you can assume
    that everything went well and the USB web camera was interfaced with the BeagleBone
    board successfully. We now have a video0 element that we can use in OpenCV or
    in any other software that we will be installing in BeagleBone board to get a
    video input from the camera.
  prefs: []
  type: TYPE_NORMAL
- en: '![Adding a USB camera to a BeagleBone board](img/4602_07_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Now that we have a video component available in our BeagleBone board, we can
    go ahead and install OpenCV to get started with capturing images from the USB
    web camera and store them on the microSD card available on our BeagleBone board.
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV – introduction and setting up on the BeagleBone board
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this topic you will learn about what OpenCV is and how we can use it to capture
    images from a web camera that is connected to the BeagleBone board.
  prefs: []
  type: TYPE_NORMAL
- en: OpenCV stands for Open Source Computer Vision. It is mainly designed for real-time
    computer visualization. So, this library will basically help us to use commonly
    used programming languages like C, C++ and Python to capture images from the camera
    connected to our computer – in our case, using the BeagleBone board. When we go
    to the project section of this chapter to capture an image from the USB camera
    using Python, you will understand how simple the OpenCV library makes it to code
    in getting inputs from the camera, generate outputs as image files, and much more
    in image processing.
  prefs: []
  type: TYPE_NORMAL
- en: Installing OpenCV on Debian on a BeagleBone board
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow the steps to install OpenCV on Debian on a BeagleBone board:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 1: Install compiler:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: 'These compilers are very important to build packages from source codes and
    then install them. Installing them will be useful for us in future, particularly
    during the robot project:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_05.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 2: Install the other required packages that are needed before compiling
    compulsorily:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: In Linux, most of the software written will use other open source packages in
    them to build their software, so these packages are the ones that OpenCV use in
    their software to give us a beautiful and easy to code/use library.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: When you install the packages, if it prompts you to use additional disk space,
    go ahead and hit *Y* and then *Enter* to get started installing the required packages.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are some more software packages you will have to install before compiling,
    which are listed following:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo apt-get -y install libjpeg62-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo apt-get -y install libtiff4-dev libjasper-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo apt-get -y install libgtk2.0-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo apt-get -y install libavcodec-dev libavformat-dev libswscale-dev libv4l-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo apt-get -y install libdc1394-22-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo apt-get -y install libxine-dev libgstreamer0.10-dev libgstreamer-plugins-base0.10-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo apt-get -y install python-dev python-numpy`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo apt-get -y install libqt4-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`sudo apt-get install unzip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Step 3: Install a few other optional softwares that might come in handy in
    the future while working with OpenCV. These are recommended by OpenCV:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo apt-get install python-dev python-numpy libjpeg-dev libpng-dev libtiff-dev
    libjasper-dev libdc1394-22-dev`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: These softwares are not compulsory to for OpenCV to work, but when you connect
    a display to a BeagleBone board in the future and want to use graphics, these
    will surely come in handy. It's better to install them now instead of getting
    frustrated in the future with errors popping up when you write codes with display
    elements and GUI.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'By this stage, we have installed all the necessary packages needed to compile
    and install OpenCV on BeagleBone Black. So, now let''s go ahead and download the
    source code files of OpenCV and then compile and install them. Let''s create a
    new directory and save all the files inside it while building the OpenCV library:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 4: Create an OpenCVdirectory with the following commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir OCV`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cd OCV`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 5: Clone the OpenCV source code into our working directory:'
  prefs: []
  type: TYPE_NORMAL
- en: '`wget https://sourceforge.net/projects/opencvlibrary/files/opencv-unix/2.4.9/opencv-2.4.9.zip`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The `wget` command will download the file from the URL that follows it and
    save it in the present working directory. You can see the percentage of the download
    status as it happens in the Linux shell, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You need to wait until the download completes and check whether you received
    the zip file by using the `ls` command. If you see the file, as shown in the following
    screenshot, you can proceed to the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_10.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Step 6: Building OpenCV from source files using cmake:'
  prefs: []
  type: TYPE_NORMAL
- en: '`unzip opencv-2.4.9.zip –d opencv`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First we need to unzip the `.zip` file we downloaded to extract the contents
    of the file.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_11.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then we compile the files inside it wait until unzipping process is completed:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_12.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Then use the `ls` command to check whether an `opencv` folder is created and
    the contents of the `.zip` have been extracted inside it:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ls`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can see the `opencv` folder has been created, inside which the files have
    been unzipped: `cd opencv`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_13.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'This is how the `ls` and `cd opencv-2.4.9` will look like in the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_14.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now we need to create a folder inside which we will compile and build the files
    for installation from the source files available inside the `opencv-2.4.9` folder.
    You need to execute the commands `mkdir build` and `cd build` in order to do that:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_15.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`cmake -D CMAKE_BUILD_TYPE=RELEASE -D CMAKE_INSTALL_PREFIX=/usr/local -D WITH_TBB=ON
    -D BUILD_NEW_PYTHON_SUPPORT=ON -D WITH_V4L=ON -D INSTALL_C_EXAMPLES=ON -D INSTALL_PYTHON_EXAMPLES=ON
    -D BUILD_EXAMPLES=ON -D WITH_QT=OFF -D WITH_OPENGL=ON`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'This is how it looks:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_16.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, wait until the configuration is finished:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_17.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Once it has finished, you should see something like the preceding screenshot.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now we can go ahead and compile the files:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 7: Compile `make` and it will look like this:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_18.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Wait until the program is compiled and ready to install:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_19.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once the files are compiled and built, we can install OpenCV libraries to our
    system using the next step:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 8: Install `sudo make install`:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_20.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Wait until the program is installed.
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_21.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Once installed let''s go ahead and test whether everything was installed properly
    with the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Step 9: Validate the installation'
  prefs: []
  type: TYPE_NORMAL
- en: 'Since we will be using Python and OpenCV together, lets validate whether the
    Python library of OpenCV was installed properly or not, using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`sudo python`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Inside the Python interactive shell enter the `from cv2 import_version_` command
    to import the library, and then to print the version execute the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '`_version_`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You should see something like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Installing OpenCV on Debian on a BeagleBone board](img/4602_07_22.jpg)'
  prefs: []
  type: TYPE_IMG
- en: If it prints the version without any errors, everything is fine, you can see
    that its **2.4.9**, and that is the same version you downloaded as a zip file
    in step 5.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we have the OpenCV library successfully installed we can go ahead to
    our next topic where we will be using Python and OpenCV together to capture an
    image from the USB video camera that we have plugged into our BeagleBone board.
  prefs: []
  type: TYPE_NORMAL
- en: 'Project: Image capture from a camera using Python and OpenCV'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter we will be writing a code to capture an image from a camera
    and saving it in `.jpg` format using Python.
  prefs: []
  type: TYPE_NORMAL
- en: 'Let''s first create a directory named `ImageCapture` inside which we can save
    the Python file in which we write the code, and where we can also save the image
    file that we capture:'
  prefs: []
  type: TYPE_NORMAL
- en: '`mkdir ImageCapture`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`cd ImageCapture`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'It will look like the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_23.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '`sudo nano TakePhoto.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following image:'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_24.jpg)'
  prefs:
  - PREF_IND
  type: TYPE_IMG
- en: 'Now we can go ahead and start writing the code to capture an image from the
    camera and save it on the BeagleBone Black:'
  prefs: []
  type: TYPE_NORMAL
- en: 'The simplest code possible to do this is given in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_25.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Save it and run it to capture an image from the camera and save it.
  prefs: []
  type: TYPE_NORMAL
- en: 'The output you will see when you run the code `sudo python TakePhoto.py` is
    as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_26.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'If you don''t get any errors and the program ends printing the **Saving Image**
    text, everything should have happened properly. To check this let''s see whether
    the `Photo.jpg` file has been created inside the folder or not. You can use the
    `ls` command to do it and you should see the `Photo.jpg` file created as shown
    in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_27.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Since we are working on BeagleBone Black via SSH we don't have the option to
    view the image directly on the GUI now – we will need a **File Transfer Protocol**
    (**FTP**) client software to download the image that was captured. So, let's go
    ahead and install one on our Windows PC now.
  prefs: []
  type: TYPE_NORMAL
- en: Tip
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: FileZilla is my favourite, so I will be using it in this tutorial, you can use
    the ones you are familiar with or install FileZilla if you don't have it.
  prefs: []
  type: TYPE_NORMAL
- en: 'Once you have opened the FTP software, it will ask you for the IP address of
    the device, username, password, and port number:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_28.jpg)'
  prefs: []
  type: TYPE_IMG
- en: This is how the software looks. You can see on the top left corner a space for
    entering the host's IP address, username, password, and port number. Below that
    you can see the directory selection of where you want the files to be downloaded
    and uploaded from, and at the bottom, you can see the log of data transfers.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now lets go ahead and connect our PC to the BeagleBone Black via FTP to transfer
    the image file we captured and see how it looks. The details you need to enter
    are the IP address assigned to the BeagleBone board, using which you connect to
    it via SSH, the same IP address and user name as `debian` and password `temppwd`
    which is default, if you have changed your username and password, then use them
    here and the port number is `22`. Then click on the Quick connect button and you
    should see the files on the BeagleBone Black, as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_29.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'You can click on the **+** symbol next to the `Debian` folder shown in the
    picture and navigate to the `ImageCapture` folder inside which the `Photo.jpg`
    file that we captured and saved is present. You will see something like the following
    screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_30.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Now you can go ahead and download the file. Once you click on **Download**,
    the file will be downloaded to the FTP folder or the folder which you have selected
    on the PC fpr where the files will be downloaded. You can see in the following
    screenshot that the `Photo.jpg` file is now inside the FTP folder which was empty
    before on your PC:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_31.jpg)'
  prefs: []
  type: TYPE_IMG
- en: So, now that you have the photo that you captured, downloaded to your PC, you
    can go ahead and open it to see it with the image viewer software you have set
    up on your PC.
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_32.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'The image captured is as shown in the previous screenshot and the arrangement
    of the camera while taking this picture was as shown in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Project: Image capture from a camera using Python and OpenCV](img/4602_07_33.jpg)'
  prefs: []
  type: TYPE_IMG
- en: In the preceding picture you can see that the camera has been placed pointing
    towards the BeagleBone Black and at a distance, so the image that we captured
    was showing the side view of the BeagleBone Black, showing the USB connected to
    it, and the background.
  prefs: []
  type: TYPE_NORMAL
- en: So, in this way, you can use Python and OpenCV together to take pictures and
    save them for use in many applications.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: This chapter was just a start for you get to know what open OpenCV is, to set
    it up on BeagleBone Black and to understand a little bit of what you can do with
    it using Python by writing just a few lines of code. In this chapter, the image
    capture project is just a simple thing we did – you can play around and do a lot
    more like capturing videos and saving them, changing a color image to black and
    white, and other image processing using OpenCV and Python. Now we know how to
    click a picture and save it.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will build a home security application project using
    a sensor to detect motion and click a picture whenever a motion is detected. In
    this way, we will be building a real-time application using OpenCV, BeagleBone
    Black and Python where the system will interact with the physical world.
  prefs: []
  type: TYPE_NORMAL
