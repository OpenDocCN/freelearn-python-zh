["```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 5\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nFTP_SERVER_URL = 'ftp.kernel.org'\n\nimport ftplib\ndef test_ftp_connection(path, username, email):\n    #Open ftp connection\n    ftp = ftplib.FTP(path, username, email)\n\n   #List the files in the /pub directory\n    ftp.cwd(\"/pub\")\n    print \"File list at %s:\" %path\n    files = ftp.dir()\n    print files\n\n    ftp.quit()\nif __name__ == '__main__':\n    test_ftp_connection(path=FTP_SERVER_URL, username='anonymous',\n                        email='nobody@nourl.com', \n                        )\n```", "```py\n$ python 5_1_list_files_on_ftp_server.py\nFile list at ftp.kernel.org:\ndrwxrwxr-x    6 ftp      ftp          4096 Dec 01  2011 dist\ndrwxr-xr-x   13 ftp      ftp          4096 Nov 16  2011 linux\ndrwxrwxr-x    3 ftp      ftp          4096 Sep 23  2008 media\ndrwxr-xr-x   17 ftp      ftp          4096 Jun 06  2012 scm\ndrwxrwxr-x    2 ftp      ftp          4096 Dec 01  2011 site\ndrwxr-xr-x   13 ftp      ftp          4096 Nov 27  2011 software\ndrwxr-xr-x    3 ftp      ftp          4096 Apr 30  2008 tools\n\n```", "```py\n$ sudo apt-get install wu-ftpd\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 5\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport os\nimport argparse\nimport ftplib\n\nimport getpass \nLOCAL_FTP_SERVER = 'localhost'\nLOCAL_FILE = 'readme.txt'\ndef ftp_upload(ftp_server, username, password, file_name):\n    print \"Connecting to FTP server: %s\" %ftp_server\n    ftp = ftplib.FTP(ftp_server)\n    print \"Login to FTP server: user=%s\" %username\n    ftp.login(username, password)\n    ext = os.path.splitext(file_name)[1]\n    if ext in (\".txt\", \".htm\", \".html\"):\n        ftp.storlines(\"STOR \" + file_name, open(file_name))\n    else:\n        ftp.storbinary(\"STOR \" + file_name, open(file_name, \"rb\"), 1024)\n    print \"Uploaded file: %s\" %file_name\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='FTP Server Upload Example')\n    parser.add_argument('--ftp-server', action=\"store\", dest=\"ftp_server\", default=LOCAL_FTP_SERVER)\n    parser.add_argument('--file-name', action=\"store\", dest=\"file_name\", default=LOCAL_FILE)\n    parser.add_argument('--username', action=\"store\", dest=\"username\", default=getpass.getuser())\n    given_args = parser.parse_args() \n    ftp_server, file_name, username = given_args.ftp_server, given_args.file_name, given_args.username\n    password = getpass.getpass(prompt=\"Enter you FTP password: \")\n    ftp_upload(ftp_server, username, password, file_name)\n```", "```py\n$ python 5_2_upload_file_to_ftp_server.py \nEnter your FTP password: \nConnecting to FTP server: localhost\nLogin to FTP server: user=faruq\nUploaded file: readme.txt\n\n$ cat /home/faruq/readme.txt \nThis file describes what to do with the .bz2 files you see elsewhere\non this site (ftp.kernel.org).\n\n```", "```py\n$ sudo apt-get install postfix\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 5\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport os\nimport argparse\nimport smtplib\nimport zipfile\nimport tempfile\nfrom email import encoders\nfrom email.mime.base import MIMEBase\nfrom email.mime.multipart import MIMEMultipart    \ndef email_dir_zipped(sender, recipient):\n    zf = tempfile.TemporaryFile(prefix='mail', suffix='.zip')\n    zip = zipfile.ZipFile(zf, 'w')\n    print \"Zipping current dir: %s\" %os.getcwd()\n    for file_name in os.listdir(os.getcwd()):\n        zip.write(file_name)\n    zip.close()\n    zf.seek(0)\n    # Create the message\n    print \"Creating email message...\"\n    email_msg = MIMEMultipart()\n    email_msg['Subject'] = 'File from path %s' %os.getcwd()\n    email_msg['To'] = ', '.join(recipient)\n    email_msg['From'] = sender\n    email_msg.preamble = 'Testing email from Python.\\n'\n    msg = MIMEBase('application', 'zip')\n    msg.set_payload(zf.read())\n    encoders.encode_base64(msg)\n    msg.add_header('Content-Disposition', 'attachment', \n                   filename=os.getcwd()[-1] + '.zip')\n    email_msg.attach(msg)\n    email_msg = email_msg.as_string()\n\n    # send the message\n    print \"Sending email message...\"\n    smtp = None\n    try:\n        smtp = smtplib.SMTP('localhost')\n        smtp.set_debuglevel(1)\n        smtp.sendmail(sender, recipient, email_msg)\n    except Exception, e:\n        print \"Error: %s\" %str(e)\n    finally:\n        if smtp:\n           smtp.close()\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Email Example')\n    parser.add_argument('--sender', action=\"store\", dest=\"sender\", default='you@you.com')\n    parser.add_argument('--recipient', action=\"store\", dest=\"recipient\")\n    given_args = parser.parse_args()\n    email_dir_zipped(given_args.sender, given_args.recipient)\n```", "```py\n$ python 5_3_email_current_dir_zipped.py --recipient=faruq@localhost\nZipping current dir: /home/faruq/Dropbox/PacktPub/pynet-cookbook/pynetcookbook_code/chapter5\nCreating email message...\nSending email message...\nsend: 'ehlo [127.0.0.1]\\r\\n'\nreply: '250-debian6.debian2013.com\\r\\n'\nreply: '250-PIPELINING\\r\\n'\nreply: '250-SIZE 10240000\\r\\n'\nreply: '250-VRFY\\r\\n'\nreply: '250-ETRN\\r\\n'\nreply: '250-STARTTLS\\r\\n'\nreply: '250-ENHANCEDSTATUSCODES\\r\\n'\nreply: '250-8BITMIME\\r\\n'\nreply: '250 DSN\\r\\n'\nreply: retcode (250); Msg: debian6.debian2013.com\nPIPELINING\nSIZE 10240000\nVRFY\nETRN\nSTARTTLS\nENHANCEDSTATUSCODES\n8BITMIME\nDSN\nsend: 'mail FROM:<you@you.com> size=9141\\r\\n'\nreply: '250 2.1.0 Ok\\r\\n'\nreply: retcode (250); Msg: 2.1.0 Ok\nsend: 'rcpt TO:<faruq@localhost>\\r\\n'\nreply: '250 2.1.5 Ok\\r\\n'\nreply: retcode (250); Msg: 2.1.5 Ok\nsend: 'data\\r\\n'\nreply: '354 End data with <CR><LF>.<CR><LF>\\r\\n'\nreply: retcode (354); Msg: End data with <CR><LF>.<CR><LF>\ndata: (354, 'End data with <CR><LF>.<CR><LF>')\nsend: 'Content-Type: multipart/mixed; boundary=\"===============0388489101==...[TRUNCATED]\nreply: '250 2.0.0 Ok: queued as 42D2F34A996\\r\\n'\nreply: retcode (250); Msg: 2.0.0 Ok: queued as 42D2F34A996\ndata: (250, '2.0.0 Ok: queued as 42D2F34A996')\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 5\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport argparse\nimport getpass\nimport poplib\nGOOGLE_POP3_SERVER = 'pop.googlemail.com'\n\ndef download_email(username): \n    mailbox = poplib.POP3_SSL(GOOGLE_POP3_SERVER, '995') \n    mailbox.user(username)\n    password = getpass.getpass(prompt=\"Enter you Google password: \") \n    mailbox.pass_(password) \n    num_messages = len(mailbox.list()[1])\n    print \"Total emails: %s\" %num_messages\n    print \"Getting last message\" \n    for msg in mailbox.retr(num_messages)[1]:\n        print msg\n    mailbox.quit()\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Email Download Example')\n    parser.add_argument('--username', action=\"store\", dest=\"username\", default=getpass.getuser())\n    given_args = parser.parse_args() \n    username = given_args.username\n    download_email(username)\n```", "```py\n$ python 5_4_download_google_email_via_pop3.py --username=<USERNAME>\nEnter your Google password: \nTotal emails: 333\nGetting last message\n...[TRUNCATED]\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter â€“ 5\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport argparse\nimport getpass\nimport imaplib\nGOOGLE_IMAP_SERVER = 'imap.googlemail.com'\ndef check_email(username): \n    mailbox = imaplib.IMAP4_SSL(GOOGLE_IMAP_SERVER, '993') \n    password = getpass.getpass(prompt=\"Enter you Google password: \") \n    mailbox.login(username, password)\n    mailbox.select('Inbox')\n    typ, data = mailbox.search(None, 'ALL')\n    for num in data[0].split():\n        typ, data = mailbox.fetch(num, '(RFC822)')\n\n        print 'Message %s\\n%s\\n' % (num, data[0][1])\n        break\n    mailbox.close()\n    mailbox.logout()\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Email Download Example')\n    parser.add_argument('--username', action=\"store\", dest=\"username\", default=getpass.getuser())\n    given_args = parser.parse_args() \n    username = given_args.username\n    check_email(username)\n```", "```py\n$$ python 5_5_check_remote_email_via_imap.py --username=<USER_NAME>\nEnter your Google password: \nMessage 1\nReceived: by 10.140.142.16; Sat, 17 Nov 2007 09:26:31 -0800 (PST)\nMessage-ID: <...>@mail.gmail.com>\nDate: Sat, 17 Nov 2007 09:26:31 -0800\nFrom: \"Gmail Team\" <mail-noreply@google.com>\nTo: \"<User Full Name>\" <USER_NAME>@gmail.com>\nSubject: Gmail is different. Here's what you need to know.\nMIME-Version: 1.0\nContent-Type: multipart/alternative; \n boundary=\"----=_Part_7453_30339499.1195320391988\"\n\n------=_Part_7453_30339499.1195320391988\nContent-Type: text/plain; charset=ISO-8859-1\nContent-Transfer-Encoding: 7bit\nContent-Disposition: inline\n\nMessages that are easy to find, an inbox that organizes itself, great\nspam-fighting tools and built-in chat. Sound cool? Welcome to Gmail.\n\nTo get started, you may want to:\n[TRUNCATED]\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 5\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport argparse\nimport os\nimport getpass\nimport re\nimport sys\nimport smtplib\n\nfrom email.mime.image import MIMEImage\nfrom email.mime.multipart import MIMEMultipart\nfrom email.mime.text import MIMEText\n\nSMTP_SERVER = 'smtp.gmail.com'\nSMTP_PORT = 587\n\ndef send_email(sender, recipient):\n    \"\"\" Send email message \"\"\"\n    msg = MIMEMultipart()\n    msg['Subject'] = 'Python Email Test'\n    msg['To'] = recipient\n    msg['From'] = sender\n    subject = 'Python email Test'\n    message = 'Images attached.'\n    # attach image files\n    files = os.listdir(os.getcwd())\n    gifsearch = re.compile(\".gif\", re.IGNORECASE)\n    files = filter(gifsearch.search, files)\n    for filename in files:\n        path = os.path.join(os.getcwd(), filename)\n        if not os.path.isfile(path):\n            continue\n        img = MIMEImage(open(path, 'rb').read(), _subtype=\"gif\")\n\n        img.add_header('Content-Disposition', 'attachment', filename=filename)\n        msg.attach(img)\n\n    part = MIMEText('text', \"plain\")\n    part.set_payload(message)\n    msg.attach(part)\n\n    # create smtp session\n    session = smtplib.SMTP(SMTP_SERVER, SMTP_PORT)\n    session.ehlo()\n    session.starttls()\n    session.ehlo\n    password = getpass.getpass(prompt=\"Enter you Google password: \") \n    session.login(sender, password)\n    session.sendmail(sender, recipient, msg.as_string())\n    print \"Email sent.\"\n    session.quit()\n\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='Email Sending Example')\n    parser.add_argument('--sender', action=\"store\", dest=\"sender\")\n    parser.add_argument('--recipient', action=\"store\", dest=\"recipient\")\n    given_args = parser.parse_args()\n    send_email(given_args.sender, given_args.recipient)\n```", "```py\n$ python 5_6_send_email_from_gmail.py --sender=<USERNAME>@gmail.com â€“recipient=<USER>@<ANOTHER_COMPANY.com>\nEnter you Google password: \nEmail sent.\n\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 5\n# This program is optimized for Python 2.7.\n# It may run on any other version with/without modifications.\n\nimport os\nimport cgi\nimport argparse\nimport BaseHTTPServer\nimport CGIHTTPServer\nimport cgitb \ncgitb.enable()  ## enable CGI error reporting\ndef web_server(port):\n    server = BaseHTTPServer.HTTPServer\n    handler = CGIHTTPServer.CGIHTTPRequestHandler #RequestsHandler\n    server_address = (\"\", port)\n    handler.cgi_directories = [\"/cgi-bin\", ]\n    httpd = server(server_address, handler)\n    print \"Starting web server with CGI support on port: %s ...\" %port\n    httpd.serve_forever()\nif __name__ == '__main__':\n    parser = argparse.ArgumentParser(description='CGI Server Example')\n    parser.add_argument('--port', action=\"store\", dest=\"port\", type=int, required=True)\n    given_args = parser.parse_args()\n    web_server(given_args.port)\n```", "```py\n$ python 5_7_cgi_server.py --port=8800\nStarting web server with CGI support on port: 8800 ...\nlocalhost - - [19/May/2013 18:40:22] \"GET / HTTP/1.1\" 200 -\n\n```", "```py\nName:  User1\nComment: Comment1\n\n```", "```py\nUser1 sends a comment: Comment1\n\n```", "```py\n<html>\n   <body>\n         <form action=\"/cgi-bin/5_7_get_feedback.py\" method=\"post\">\n                Name: <input type=\"text\" name=\"Name\">  <br />\n                Comment: <input type=\"text\" name=\"Comment\" />\n                <input type=\"submit\" value=\"Submit\" />\n         </form>\n   </body>\n</html>\n```", "```py\n#!/usr/bin/env python\n# Python Network Programming Cookbook -- Chapter - 5\n# This program requires Python 2.7 or any later version\nimport cgi\nimport cgitb \n# Create instance of FieldStorage \nform = cgi.FieldStorage() \n# Get data from fields\nname = form.getvalue('Name')\ncomment  = form.getvalue('Comment')\nprint \"Content-type:text/html\\r\\n\\r\\n\"\nprint \"<html>\"\nprint \"<head>\"\nprint \"<title>CGI Program Example </title>\"\nprint \"</head>\"\nprint \"<body>\"\nprint \"<h2> %s sends a comment: %s</h2>\" % (name, comment)\nprint \"</body>\"\nprint \"</html>\"\n\n```"]