["```py\n#!/usr/bin/python3\n#painting.py\nimport tkinter as TK\n\n#Set defaults\nbtn1pressed = False\nnewline = True\n\ndef main():\n  root = TK.Tk()\n  the_canvas = TK.Canvas(root)\n  the_canvas.pack()\n  the_canvas.bind(\"<Motion>\", mousemove)\n  the_canvas.bind(\"<ButtonPress-1>\", mouse1press)\n  the_canvas.bind(\"<ButtonRelease-1>\", mouse1release)\n  root.mainloop()\n\ndef mouse1press(event):\n  global btn1pressed\n  btn1pressed = True\n\ndef mouse1release(event):\n  global btn1pressed, newline\n  btn1pressed = False\n  newline = True\n\ndef mousemove(event):\n  if btn1pressed == True:\n    global xorig, yorig, newline\n    if newline == False:\n      event.widget.create_line(xorig,yorig,event.x,event.y,\n                               smooth=TK.TRUE)\n    newline = False\n    xorig = event.x\n    yorig = event.y\n\nif __name__ == \"__main__\":\n  main()\n#End\n```", "```py\n    #!/usr/bin/python3\n    # bouncingball.py\n    import tkinter as TK\n    import time\n\n    VERT,HOREZ=0,1\n    xTOP,yTOP = 0,1\n    xBTM,yBTM = 2,3\n    MAX_WIDTH,MAX_HEIGHT = 640,480\n    xSTART,ySTART = 100,200\n    BALL_SIZE=20\n    RUNNING=True\n    ```", "```py\n    def close():\n      global RUNNING\n      RUNNING=False\n      root.destroy()\n\n    def move_right(event):\n      if canv.coords(paddle)[xBTM]<(MAX_WIDTH-7):\n        canv.move(paddle, 7, 0)\n\n    def move_left(event):\n      if canv.coords(paddle)[xTOP]>7:\n        canv.move(paddle, -7, 0)\n\n    def determineDir(ball,obj):\n      global delta_x,delta_y\n      if (ball[xTOP] == obj[xBTM]) or (ball[xBTM] == \n          obj[xTOP]):\n        delta_x = -delta_x\n      elif (ball[yTOP] == obj[yBTM]) or (ball[yBTM] == \n            obj[yTOP]):\n        delta_y = -delta_y\n    ```", "```py\n    root = TK.Tk()\n    root.title(\"Bouncing Ball\")\n    root.geometry('%sx%s+%s+%s' %(MAX_WIDTH, MAX_HEIGHT, 100, 100))\n    root.bind('<Right>', move_right)\n    root.bind('<Left>', move_left)\n    root.protocol('WM_DELETE_WINDOW', close)\n\n    canv = TK.Canvas(root, highlightthickness=0)\n    canv.pack(fill='both', expand=True)\n    ```", "```py\n    top = canv.create_line(0, 0, MAX_WIDTH, 0, fill='blue',\n                           tags=('top'))\n    left = canv.create_line(0, 0, 0, MAX_HEIGHT, fill='blue',\n                            tags=('left'))\n    right = canv.create_line(MAX_WIDTH, 0, MAX_WIDTH, MAX_HEIGHT,\n                             fill='blue', tags=('right'))\n    bottom = canv.create_line(0, MAX_HEIGHT, MAX_WIDTH, MAX_HEIGHT,\n                              fill='blue', tags=('bottom'))\n\n    ball = canv.create_rectangle(0, 0, BALL_SIZE, BALL_SIZE,\n                                 outline='black', fill='black', \n                                 tags=('ball'))\n    paddle = canv.create_rectangle(100, MAX_HEIGHT - 30, 150, 470,\n                                   outline='black', \n                                   fill='green', tags=('rect'))\n    ```", "```py\n    brick=list()\n    for i in range(0,16):\n      for row in range(0,4):\n        brick.append(canv.create_rectangle(i*40, row*20,\n                     ((i+1)*40)-2, ((row+1)*20)-2,\n                     outline='black', fill='red',\n                     tags=('rect')))\n\n    delta_x = delta_y = 1\n    xold,yold = xSTART,ySTART\n    canv.move(ball, xold, yold)\n    ```", "```py\n    while RUNNING:\n      objects = canv.find_overlapping(canv.coords(ball)[0],\n                                      canv.coords(ball)[1],\n                                      canv.coords(ball)[2],\n                                      canv.coords(ball)[3])\n\n      #Only change the direction once (so will bounce off 1st\n      # block even if 2 are hit)\n      dir_changed=False\n      for obj in objects:\n        if (obj != ball):\n          if dir_changed==False:\n            determineDir(canv.coords(ball),canv.coords(obj))\n            dir_changed=True\n          if (obj >= brick[0]) and (obj <= brick[len(brick)-1]):\n            canv.delete(obj)\n          if (obj == bottom):\n            text = canv.create_text(300,100,text=\"YOU HAVE MISSED!\")\n            canv.coords(ball, (xSTART,ySTART,\n                        xSTART+BALL_SIZE,ySTART+BALL_SIZE))\n            delta_x = delta_y = 1\n            canv.update()\n            time.sleep(3)\n            canv.delete(text)\n      new_x, new_y = delta_x, delta_y\n      canv.move(ball, new_x, new_y)\n\n      canv.update()\n      time.sleep(0.005)\n    #End\n    ```", "```py\nbrick=list()\nfor i in range(0,16):\n  for row in range(0,4):\n    brick.append(canv.create_rectangle(i*40, row*20, \n                 ((i+1)*40)-2, ((row+1)*20)-2, outline='black', \n                 fill='red', tags=('rect')))\n```", "```py\nif (ball[xTOP] == obj[xBTM]) or (ball[xBTM] == obj[xTOP]):\n    delta_x = -delta_x\n```", "```py\nif (obj >= brick[0]) and (obj <= brick[-1]):\n    canv.delete(obj)\n```", "```py\n    #!/usr/bin/python3\n    # scroller.py\n    import tkinter as TK\n    import time\n    import math\n    from random import randint\n\n    STEP=7\n    xVAL,yVAL=0,1\n    MAX_WIDTH,MAX_HEIGHT=640,480\n    SPACE_WIDTH=MAX_WIDTH*2\n    SPACE_HEIGHT=MAX_HEIGHT*2\n    LEFT,UP,RIGHT,DOWN=0,1,2,3\n    SPACE_LIMITS=[0,0,SPACE_WIDTH-MAX_WIDTH,\n                  SPACE_HEIGHT-MAX_HEIGHT]\n    DIS_LIMITS=[STEP,STEP,MAX_WIDTH-STEP,MAX_HEIGHT-STEP]\n    BGN_IMG=\"bg.gif\"\n    PLAYER_IMG=[\"playerL.gif\",\"playerU.gif\",\n                \"playerR.gif\",\"playerD.gif\"]\n    WALL_IMG=[\"wallH.gif\",\"wallV.gif\"]\n    GOLD_IMG=\"gold.gif\"\n    MARK_IMG=\"mark.gif\"\n    newGame=False\n    checks=list()\n    ```", "```py\n    def move_right(event):\n      movePlayer(RIGHT,STEP)\n    def move_left(event):\n      movePlayer(LEFT,-STEP)\n    def move_up(event):\n      movePlayer(UP,-STEP)\n    def move_down(event):\n      movePlayer(DOWN,STEP)\n\n    def foundWall(facing,move):\n      hitWall=False\n      olCoords=[canv.coords(player)[xVAL],\n                canv.coords(player)[yVAL],\n                canv.coords(player)[xVAL]+PLAYER_SIZE[xVAL],\n                canv.coords(player)[yVAL]+PLAYER_SIZE[yVAL]]\n      olCoords[facing]+=move\n      objects = canv.find_overlapping(olCoords[0],olCoords[1],\n                                      olCoords[2],olCoords[3])\n      for obj in objects:\n        objTags = canv.gettags(obj)\n        for tag in objTags:\n          if tag == \"wall\":\n            hitWall=True\n      return hitWall\n\n    def moveBackgnd(movement):\n      global bg_offset\n      bg_offset[xVAL]+=movement[xVAL]\n      bg_offset[yVAL]+=movement[yVAL]\n      for obj in canv.find_withtag(\"bg\"):\n        canv.move(obj, -movement[xVAL], -movement[yVAL])\n\n    def makeMove(facing,move):\n      if facing == RIGHT or facing == LEFT:\n        movement=[move,0] #RIGHT/LEFT\n        bgOffset=bg_offset[xVAL]\n        playerPos=canv.coords(player)[xVAL]\n      else:\n        movement=[0,move] #UP/DOWN\n        bgOffset=bg_offset[yVAL]\n        playerPos=canv.coords(player)[yVAL]\n      #Check Bottom/Right Corner\n      if facing == RIGHT or facing == DOWN: \n        if (playerPos+PLAYER_SIZE[xVAL]) < DIS_LIMITS[facing]:\n          canv.move(player, movement[xVAL], movement[yVAL])\n        elif bgOffset < SPACE_LIMITS[facing]:\n          moveBackgnd(movement)\n      else:\n        #Check Top/Left Corner\n        if (playerPos) > DIS_LIMITS[facing]:\n          canv.move(player, movement[xVAL], movement[yVAL])\n        elif bgOffset > SPACE_LIMITS[facing]:\n          moveBackgnd(movement)\n\n    def movePlayer(facing,move):\n      hitWall=foundWall(facing,move)\n      if hitWall==False:\n        makeMove(facing,move)\n      canv.itemconfig(player,image=playImg[facing])\n    ```", "```py\n    def check(event):\n      global checks,newGame,text\n      if newGame:\n        for chk in checks:\n          canv.delete(chk)\n        del checks[:]\n        canv.delete(gold,text)\n        newGame=False\n        hideGold()\n      else:\n        checks.append(\n                      canv.create_image(canv.coords(player)[xVAL],\n                      canv.coords(player)[yVAL],\n                      anchor=TK.NW, image=checkImg,\n                      tags=('check','bg')))\n        distance=measureTo(checks[-1],gold)\n        if(distance<=0):\n          canv.itemconfig(gold,state='normal')\n          canv.itemconfig(check,state='hidden')\n          text = canv.create_text(300,100,fill=\"white\",\n                                  text=(\"You have found the gold in\"+ \n                                  \" %d tries!\"%len(checks)))\n          newGame=True\n        else:\n          text = canv.create_text(300,100,fill=\"white\",\n                                  text=(\"You are %d steps away!\"%distance))\n          canv.update()\n          time.sleep(1)\n          canv.delete(text)\n\n    def measureTo(objectA,objectB):\n      deltaX=canv.coords(objectA)[xVAL]-\\\n                         canv.coords(objectB)[xVAL]\n      deltaY=canv.coords(objectA)[yVAL]-\\\n                         canv.coords(objectB)[yVAL]\n      w_sq=abs(deltaX)**2\n      h_sq=abs(deltaY)**2\n      hypot=math.sqrt(w_sq+h_sq)\n      return round((hypot/5)-20,-1)\n    ```", "```py\n    def hideGold():\n      global gold\n      goldPos=findLocationForGold()\n      gold=canv.create_image(goldPos[xVAL], goldPos[yVAL],\n                             anchor=TK.NW, image=goldImg,\n                             tags=('gold','bg'),\n                             state='hidden')\n\n    def findLocationForGold():\n      placeGold=False\n      while(placeGold==False):\n        goldPos=[randint(0-bg_offset[xVAL],\n                 SPACE_WIDTH-GOLD_SIZE[xVAL]-bg_offset[xVAL]),\n                 randint(0-bg_offset[yVAL],\n                 SPACE_HEIGHT-GOLD_SIZE[yVAL]-bg_offset[yVAL])]\n        objects = canv.find_overlapping(goldPos[xVAL],\n                                        goldPos[yVAL],\n                                        goldPos[xVAL]+GOLD_SIZE[xVAL],\n                                        goldPos[yVAL]+GOLD_SIZE[yVAL])\n        findNewPlace=False\n        for obj in objects:\n          objTags = canv.gettags(obj)\n          for tag in objTags:\n            if (tag == \"wall\") or (tag == \"player\"):\n              findNewPlace=True\n        if findNewPlace == False:\n          placeGold=True\n      return goldPos\n    ```", "```py\n    root = TK.Tk()\n    root.title(\"Overhead Game\")\n    root.geometry('%sx%s+%s+%s' %(MAX_WIDTH, \n                                  MAX_HEIGHT, \n                                  100, 100))\n    root.resizable(width=TK.FALSE, height=TK.FALSE)\n    root.bind('<Right>', move_right)\n    root.bind('<Left>', move_left)\n    root.bind('<Up>', move_up)\n    root.bind('<Down>', move_down)\n    root.bind('<Return>', check)\n\n    canv = TK.Canvas(root, highlightthickness=0)\n    canv.place(x=0,y=0,width=SPACE_WIDTH,height=SPACE_HEIGHT)\n    ```", "```py\n    #Create background tiles\n    bgnImg = TK.PhotoImage(file=BGN_IMG)\n    BGN_SIZE = bgnImg.width(),bgnImg.height()\n    background=list()\n    COLS=int(SPACE_WIDTH/BGN_SIZE[xVAL])+1\n    ROWS=int(SPACE_HEIGHT/BGN_SIZE[yVAL])+1\n    for col in range(0,COLS):\n      for row in range(0,ROWS):\n        background.append(canv.create_image(col*BGN_SIZE[xVAL],\n                          row*BGN_SIZE[yVAL], anchor=TK.NW,\n                          image=bgnImg,\n                          tags=('background','bg')))\n    bg_offset=[0,0]\n\n    #Create player\n    playImg=list()\n    for img in PLAYER_IMG:\n      playImg.append(TK.PhotoImage(file=img))\n    #Assume images are all same size/shape\n    PLAYER_SIZE=playImg[RIGHT].width(),playImg[RIGHT].height()\n    player = canv.create_image(100,100, anchor=TK.NW,\n                               image=playImg[RIGHT],\n                               tags=('player'))\n\n    #Create walls\n    wallImg=[TK.PhotoImage(file=WALL_IMG[0]),\n             TK.PhotoImage(file=WALL_IMG[1])]\n    WALL_SIZE=[wallImg[0].width(),wallImg[0].height()]\n    wallPosH=[(0,WALL_SIZE[xVAL]*1.5),\n              (WALL_SIZE[xVAL],WALL_SIZE[xVAL]*1.5),\n              (SPACE_WIDTH-WALL_SIZE[xVAL],WALL_SIZE[xVAL]*1.5),\n              (WALL_SIZE[xVAL],SPACE_HEIGHT-WALL_SIZE[yVAL])]\n    wallPosV=[(WALL_SIZE[xVAL],0),(WALL_SIZE[xVAL]*3,0)]\n    wallPos=[wallPosH,wallPosV]\n    wall=list()\n    for i,img in enumerate(WALL_IMG):\n      for item in wallPos[i]:\n        wall.append(canv.create_image(item[xVAL],item[yVAL],\n                    anchor=TK.NW, image=wallImg[i],\n                    tags=('wall','bg')))\n\n    #Place gold\n    goldImg = TK.PhotoImage(file=GOLD_IMG)\n    GOLD_SIZE=[goldImg.width(),goldImg.height()]\n    hideGold()\n    #Check mark\n    checkImg = TK.PhotoImage(file=MARK_IMG)\n    ```", "```py\n    #Wait for actions from user\n    root.mainloop()\n    #End\n    ```"]