- en: '23'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Managing Emails in Odoo
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Email integration is the most prominent feature of Odoo. You can send and receive
    emails directly from the Odoo user interface. You can even manage email threads
    on business documents, such as leads, sales orders, and projects. In this chapter,
    we will explore a few important ways to deal with emails in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here, we’ll cover the following recipes:'
  prefs: []
  type: TYPE_NORMAL
- en: Configuring incoming and outgoing email servers
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing chatter on documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing activities on documents
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending emails using the Jinja template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending emails using the QWeb template
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Managing the email alias
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Logging user changes in a chatter
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sending periodic digest emails
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Technical requirements
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: All the code used in this chapter can be downloaded from [https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter23](https://github.com/PacktPublishing/Odoo-17-Development-Cookbook-Fifth-Edition/tree/main/Chapter23).
  prefs: []
  type: TYPE_NORMAL
- en: Configuring incoming and outgoing email servers
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Before you start sending and receiving emails in Odoo, you will need to configure
    the incoming and outgoing email servers. In this recipe, you will learn how to
    configure email servers in Odoo.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: There is no development needed for this recipe, but you will require email server
    information, such as the server URL, port, server type, username, and password.
    We will use this information to configure the email servers.
  prefs: []
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you are using **Odoo Online** or **Odoo.sh**, you do not need to configure
    the email servers. You can send and receive emails without any complex configurations
    on those platforms. This recipe is for on-premises Odoo instances.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Configuring incoming and outgoing email servers involves a few steps that are
    common to the processes for incoming and outgoing servers and a few steps that
    are unique to each kind of server. So, first, we will see the common configuration
    steps, and then we will configure the incoming and outgoing email servers individually.
    The following are the steps required for both incoming and outgoing email servers:'
  prefs: []
  type: TYPE_NORMAL
- en: Open the **General Settings** form menu, at **Settings** | **General Settings**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Go to the **Discuss** section and inside **Alias Domain**. This will display
    the following options:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 23.1 – Setting an alias domain](img/B20997_23_01.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.1 – Setting an alias domain
  prefs: []
  type: TYPE_NORMAL
- en: In the **Alias Domain** field, enter the domain name on which your email server
    is running. Then, save the configuration.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the incoming email server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Perform the following steps to configure the incoming email server:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **General Settings** and click on the **Incoming Email Servers** link under
    Technical | Email. This will redirect you to a list view of incoming email servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on the **Create** button, which will open the following form view. Enter
    the details of your incoming email server (see the *How it works…* section for
    an explanation of each field):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 23.2 – Configuring the incoming email server](img/B20997_23_02.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.2 – Configuring the incoming email server
  prefs: []
  type: TYPE_NORMAL
- en: Click on the **Test & Confirm** button to verify your configuration. It will
    show an error message if you have wrongly configured the incoming email server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Configuring the outgoing email server
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: 'Follow these steps to configure the outgoing email server:'
  prefs: []
  type: TYPE_NORMAL
- en: Open **General Settings** and enable the **Custom Email Servers** option, then
    click on the **Outgoing Email Servers** link. This will redirect you to the list
    view of outgoing email servers.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Click on **Create**, which will open the following form view. Enter the details
    of your outgoing email server (see the *How it works…* section for an explanation
    of each field):'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 23.3 – Configuring the outgoing email server](img/B20997_23_03.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.3 – Configuring the outgoing email server
  prefs: []
  type: TYPE_NORMAL
- en: Click on **Test Connection** at the bottom of the screen to verify your configuration.
    It will show an error message if you have wrongly configured the outgoing email
    server.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The outgoing email server will display the error dialog even if you have configured
    it properly. Look for a **Connection Test Successful!** message in the error dialog
    body. It means your outgoing server is configured correctly.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The steps given in this recipe are self-explanatory and do not require further
    explanation. But the outgoing email and incoming email records have several fields,
    so let’s see their purpose.
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is a list of fields used to configure the incoming email server:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: The name of the server, which helps you identify a specific incoming
    email server when you have configured multiple incoming email servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Type**: Here, you need to choose from three options: **POP Server**,
    **IMAP Server**, and **Local Server**. The value of this field will be based on
    your email service provider.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Server Name**: The domain of the server on which the service is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Port**: The number of the port on which the server is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SSL/TLS**: Check this field if you are using SSL/TLS encryption.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username**: The email address for which you are fetching emails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: The password for the email address provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active**: This field is used to enable or disable the incoming email server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep Attachment**: Turn off this option if you do not want to manage attachments
    from incoming emails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep Original**: Turn on this option if you want to keep the original email
    along with the preceding one.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The following is a list of fields used for configuring the outgoing email server:'
  prefs: []
  type: TYPE_NORMAL
- en: '**Name**: The name of the server, which helps you identify a specific incoming
    email server when you have configured multiple incoming email servers.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Priority**: This field is used to define the priority of the outgoing email
    server. Lower numbers get higher priority, so email servers with a lower priority
    number will be used most.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SMTP Server**: The domain of the server on which the service is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**SMTP Port**: The number of the port on which the server is running.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Connection Encryption**: The type of security used to send emails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Username**: The email account used for sending emails.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Password**: The password for the email account provided.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Active**: This field is used to enable or disable the outgoing email server.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By default, incoming emails are fetched every 5 minutes. If you want to change
    this interval, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Activate developer mode.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Open **Scheduled Actions** at **Settings** | **Technical** | **Automation**
    |**Scheduled Actions**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Search for and open the scheduled action named **Mail:** **Fetchmail Service**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Change the interval using the field labeled **Execute Every**.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Managing chatter on documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this recipe, you will learn how to manage chatter on your documents and add
    a communication thread to a record.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will reuse the `my_hostel` module from [*Chapter 8*](B20997_08.xhtml#_idTextAnchor388),
    *Advanced Server-Side Development Techniques*. You can grab an initial copy of
    the module from the `Chapter23/ 00_initial_module` directory of the GitHub repository
    for this hostel room. In this recipe, we will add chatter to the `hostel.student`
    model.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add chatter on the records of the `hostel.student` model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the `mail` module dependency in the `__manifest__.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inherit `mail.thread` in the Python definition of the `hostel.student` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add chatter widgets on the form view of the `hostel.student` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Install the `my_hostel` module to see the changes in action:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 23.4 – Chatter on the hostel student form view](img/B20997_23_04.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.4 – Chatter on the hostel student form view
  prefs: []
  type: TYPE_NORMAL
- en: As shown in the preceding screenshot, after installing the module, you will
    be able to see chatter in the form view.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In order to enable chatter on any model, you will need to install the `mail`
    module first. This is because all the code required to enable chatter or mailing
    capabilities is part of the `mail` module. That’s why, in *step 1*, we added the
    `mail` module dependency in the manifest file of the `my_hostel` module. This
    will automatically install the `mail` module whenever you install the `my_hostel`
    module.
  prefs: []
  type: TYPE_NORMAL
- en: The fields and methods required to operate chatter are part of the `mail.thread`
    model. The `mail.thread` model is an abstract model and is just used for inheritance
    purposes. In *step 2*, we inherited the `mail.thread` model in the `hostel.student`
    model. This will add all the necessary fields and methods required for chatter
    in the `hostel.student` model. If you don’t know how model inheritance works,
    refer to the *Using abstract models for reusable model features* recipe in [*Chapter
    4*](B20997_04.xhtml#_idTextAnchor118), *Application Models*.
  prefs: []
  type: TYPE_NORMAL
- en: In *steps 1* and *2*, we added all the fields and methods required for chatter.
    The only remaining thing for chatter is adding a user interface in the form view.
    In *step 3*, we added a message thread and follower widget. You might be wondering
    about the `message_follower_ids` and `message_ids` fields. These fields are not
    added in the `hostel.student` model definition but they are added from the `mail.thread`
    model through inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'When you post messages in a chatter, emails will be sent to the followers.
    If you noticed in the example of this recipe, the room of the student is not the
    follower of the records, so they will not receive the messages. If you want to
    send an email notification to the student, you will need to add them to the student
    list. You can add the follower manually from the user interface, but if you want
    to add them automatically, you can use the `message_subscribe()` method. Take
    a look at the following code—when we assign a hostel room, the given code will
    automatically add the student to the list of followers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: Similarly, if you want to remove followers from the list, you can use the `message_unsubscribe()`
    method.
  prefs: []
  type: TYPE_NORMAL
- en: Managing activities on documents
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: When using chatter, you can also add activities. These are used to plan your
    actions on the record. It is kind of a to-do list for each record. In this recipe,
    you will learn how to enable activities on any model.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe,
    *Managing chatter on documents*. We will add activities to the `hostel.student`
    model.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add activities to the `hostel.student` model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inherit `mail.activity.mixin` in the Python definition of the `hostel.student`
    model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `mail_activity` widget in the chatter of the `hostel.student` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `my_hostel` module to apply the changes. This will display chatter
    activities:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 23.5 – Activity manager on the hostel student form view](img/Image96422.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.5 – Activity manager on the hostel student form view
  prefs: []
  type: TYPE_NORMAL
- en: This is how the user will be able to manage different chatter activities. Note
    that an activity scheduled by one user is visible to all other users too.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Activities are part of the `mail` module, and you can optionally enable them
    in chatter. In order to enable activities on records, you need to inherit `mail.activity.mixin`.
    Similar to the `mail.thread` model, `mail.activity.mixin` is also an abstract
    model. Inheriting `mail.activity.mixin` will add all the necessary fields and
    methods in the module. These methods and fields are used to manage activities
    on records. In *step 1*, we added `mail.activity.mixin` into the `hostel.student`
    model. Because of this, the inheritance of `hostel.student` will get all the methods
    and fields required to manage activities.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we added the `mail_activity` widget in the form view. This will
    display the UI for managing activities. The `activity_ids` field is added in the
    `hostel.student` model through inheritance.
  prefs: []
  type: TYPE_NORMAL
- en: Activities can be of different types. By default, you can create activities
    with types such as `Email`, `Call`, `Meeting`, and `To-Do`. If you want to add
    your own activity type, you can do it by going to **Settings** | **Technical**
    | **Discuss** | **Activity Types** in developer mode.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'If you want to schedule an activity automatically, you can use the `activity_schedule()`
    method of the `mail.activity.mixin` model. This will create an activity on a given
    discharge date. You can schedule the activity manually with the `activity_schedule()`
    method, as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: This example will schedule a call activity for the student whenever someone
    discharges a hostel. The deadline for the activity will be set as the discharge
    date of the hostel so that the rector can make a call to the student on that date.
  prefs: []
  type: TYPE_NORMAL
- en: Sending emails using the Jinja template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Odoo supports creating dynamic emails through Jinja templates. Jinja is a text-based
    templating engine used to generate dynamic HTML content. In this recipe, we will
    create a Jinja email template and then send emails with its help.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe,
    *Managing activities on documents*. We will add the Jinja template to send an
    email to the student to tell them about the admission to the hostel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to send a reminder email to the student:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Create a new file called `my_hostel/data/mail_template.xml` and add the email
    template:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Register the template file in the manifest file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `hostel.student` model to send the email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `send_mail_assign_room()` method to the `hostel.student` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `my_hostel` module to apply the changes. This will add a `hostel.student`
    model. When they click on the button, followers will get this message:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.6 – Email sent via a Jinja template](img/B20997_23_06.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.6 – Email sent via a Jinja template
  prefs: []
  type: TYPE_NORMAL
- en: The procedure shown in this recipe is useful when you want to send updates to
    your customers through emails. Because of the Jinja template, you can send emails
    dynamically based on individual records.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, we created an email template using Jinja. Jinja templates help
    us generate a dynamic email based on record data. The email template is stored
    in the `mail.template` model. Let’s see a list of fields you will need to pass
    in order to create a Jinja email template:'
  prefs: []
  type: TYPE_NORMAL
- en: '`name`: The name of the template that is used to identify a specific template.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email_from`: The value of this field will be the email address from which
    this email is sent.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email_to`: The value of this field will be the email address of the recipient.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`email_cc`: The value of this field will be used for the email address to send
    a copy of the email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`subject`: This field contains the subject of the email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`model_id`: This field contains the reference of the model. The email template
    will be rendered with the data of this model.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`body_html`: This field will contain the body of the email template. It is
    a Jinja template, so you can use variables, loops, conditions, and so on. If you
    want to learn more about Jinja templates, go to [http://jinja.pocoo.org/docs/2.10/](http://jinja.pocoo.org/docs/2.10/).
    Usually, we wrap the content in the `CDATA` tag so that the content in the body
    is considered as character data and not as markup.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`auto_delete`: This is a Boolean field that deletes an email once the email
    is sent. The default value of this field is `False`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`lang`: This field is used to translate the email template into another language.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`scheduled_date`: This field is used to schedule emails in the future.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Information
  prefs: []
  type: TYPE_NORMAL
- en: You can use `${}` in the `email_form`, `email_to`, `email_cc`, `subject`, `scheduled_date`,
    and `lang` fields. This helps you to set values dynamically. Take a look at *step
    1* in our recipe—we used `{{ (object.email) }}` to set the `email_to` field dynamically.
  prefs: []
  type: TYPE_NORMAL
- en: 'If you look closely at the content of the `body_html` field, you will notice
    we used `<t t-out="object.name">`. Here, the object is the recordset of the `hostel.student`
    model. During the rendering,`<t t-out="object.hostel_id.name"></t>` will be replaced
    with the hostel name. As well as `object`, some other helper functions and variables
    are passed in the rendering context. Here is a list of helpers passed to the renderer
    context:'
  prefs: []
  type: TYPE_NORMAL
- en: '`object`: This variable will contain the recordset of the model, which is set
    in the template by the `model_id` field'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format_date`: This is a reference to the method used to format date-time objects'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format_datetime`: This is a reference to the method used to convert the UTC
    date and time into the date and time for another time zone'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format_amount`: This is a reference to the method used to convert `float`
    into `string` with the currency symbol'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`format_duration`: This method is used to convert `float` into `time`—for instance,
    to convert 1.5 to 01:30'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`user`: This will be the recordset of the current user'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`ctx`: This will contain the dictionary of the environment context'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Note
  prefs: []
  type: TYPE_NORMAL
- en: If you want to see the list of templates, activate developer mode, and open
    the **Settings** | **Technical** | **Email** | **Templates** menu. The form view
    of the template also provides a button to preview the rendered template.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we registered the template file in the manifest file.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we added a button in the form view to invoke the `send_mail_assign_room()`
    method, which will send the email to the followers.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 4*, we added the `send_mail_assign_room()` method, which will be invoked
    by clicking the button. The `message_post_with_source()` method is used to send
    the email. The `message_post_with_source()` method is inherited in the model through
    `mail.thread` inheritance. To send the email, you just need to pass the template
    ID as the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The `message_post_with_source()` method is used to send emails with the Jinja
    template. If you just want to send an email with plain text, you can use the `message_post()`
    method:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The preceding code will add a `subtype_id` parameter.
  prefs: []
  type: TYPE_NORMAL
- en: Sending emails using the QWeb template
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In the previous recipe, we learned how to send emails using the Jinja template.
    In this recipe, we will see another way to send dynamic emails. We will send emails
    with the help of the QWeb template.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will use the `my_hostel` module from the previous recipe,
    *Sending emails using the Jinja template*. We will use the QWeb template to send
    an email to the student informing them that their admission was completed in the
    hostel.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to send a reminder email to the student:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the QWeb template into the `my_hostel/data/mail_template.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add a `hostel.student` model to send the email:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the `send_mail_assign_room_qweb()` method in the `hostel.student` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `my_hostel` module to apply the changes. This will add a `hostel.student`
    model. When the button is clicked, followers will get a message like this:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '![Figure 23.7 – Email sent via the QWeb template](img/B20997_23_07.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.7 – Email sent via the QWeb template
  prefs: []
  type: TYPE_NORMAL
- en: The procedure shown in this recipe works exactly like the previous recipe, *Sending
    emails using the Jinja template*. The only difference is the template type, as
    this recipe uses QWeb templates.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: In *step 1*, we created a QWeb template with the `send_mail_assign_room_qweb`
    ID. If you look in the template, you’ll see we are not using the `format_date()`
    data field method anymore. This is because the QWeb rendering engine handles this
    automatically and displays the date based on the user’s language. For the same
    reason, you are not required to use the `format_amount()` method to display currency
    symbols. The QWeb rendering engine will manage this automatically. If you want
    to learn more about QWeb templates, refer to the *Creating or modifying templates*
    recipe in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS* *Website Development*.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 2*, we added a button in the form view to invoke the `send_mail_assign_room_qweb()`
    method, which sends the email to the followers.
  prefs: []
  type: TYPE_NORMAL
- en: In *step 3*, we added the `send_mail_assign_room_qweb()` method, which will
    be invoked by a button click. The `message_post_with_source()` method is used
    to send the email. The `message_post_with_source()` method is inherited in the
    model through `mail.thread` inheritance. To send the email, you just need to pass
    the web template’s XML ID as the parameter.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sending emails with the QWeb template works exactly the same as in the previous
    recipe, but there are some subtle differences between the QWeb email template
    and the Jinja email template. Here is a quick comparison between both templates:'
  prefs: []
  type: TYPE_NORMAL
- en: 'There is no simple way to send extra parameters in the email templates. You
    have to use a recordset in the `object` variable to fetch dynamic data. On the
    other hand, with QWeb email templates, you can pass extra values in the renderer
    context through the `values` parameter:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: To manage the date format, time zone, and amount with currency symbols, in the
    Jinja template, you have to use the `format_date`, `format_tz`, and `format_amount`
    functions, while in QWeb templates, it is managed automatically.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: It is not possible to modify an existing template for other modules in Jinja,
    whereas in QWeb templates, you can modify the email template through inheritance.
    If you want to learn more about QWeb inheritance, refer to the *Creating or modifying
    templates* recipe in [*Chapter 14*](B20997_14.xhtml#_idTextAnchor734), *CMS* *Website
    Development*.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'You can select and use a Jinja template directly from the message composer.
    In the following screenshot, the drop-down menu in the bottom-right corner is
    used to select a Jinja template:'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '![Figure 23.8 – Template selection option](img/B20997_23_08.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.8 – Template selection option
  prefs: []
  type: TYPE_NORMAL
- en: Using QWeb, selecting a template directly from the message composer is not an
    option.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: All methods (`message_post` and `message_post_with_source`) respect the user’s
    preference. If the user changes the notification-management option from the user
    preferences, the user will not receive emails; instead, they will receive notifications
    in Odoo’s UI. This is the same for customers; if a customer opts out of emails,
    they will not receive any updates through email.
  prefs: []
  type: TYPE_NORMAL
- en: 'Additionally, the Odoo message thread follows a concept called `subtype_id`,
    in `message_post_*` methods to send emails based on the subtype. Usually, the
    user will manage their subtypes from the dropdown of the **Follow** button. Let’s
    suppose the user has set their subtypes as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.9 – Option to edit subtype](img/B20997_23_09.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.9 – Option to edit subtype
  prefs: []
  type: TYPE_NORMAL
- en: Based on the user’s preference, the user will only get emails for **Discussions**
    messages.
  prefs: []
  type: TYPE_NORMAL
- en: Managing the email alias
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Email aliasing is a feature in Odoo that is used to create a record through
    incoming emails. The simplest example of an email alias is sales teams. You just
    need to send an email to `sale@yourdomain.com`, and Odoo will create a new record
    for `crm.lead` in the sales team. In this recipe, we will create one email alias
    to create a hostel student record.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe,
    *Sending emails using the QWeb template*. We will create our email alias with
    the `hostelstudent@yourdomain.com` email address. If you send an email to this
    email address with the book’s name in the subject, a record is created in the
    `hostel.student` model.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to add an email alias for the `hostel.student` model:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Add the email alias data in the `my_hostel/data/mail_template.xml` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Add the following imports in the `my_hostel/models/hostel_student.py` file:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Override the `message_new()` method in the `hostel.student` model:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the `my_hostel` module to apply the changes. Then, send an email to
    `hostelstudent@yourdomain.com`. This will create a new `hostel.student` record,
    and it will be displayed as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.10 – Record generated via email](img/B20997_23_010.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.10 – Record generated via email
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you send an email to `hostelstudent@yourdomain.com`, Odoo will generate
    a new student record.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In *step 1*, we created a `mail.alias` record. This alias will handle the `hostelstudent@yourdomain.com`
    email address. When you send an email to this address, Odoo will create a new
    record in the `hostel.student` model. If you want to see the list of active aliases
    in the system, open **Settings** | **Technical** | **Email** | **Aliases**. Here
    is a list of fields available to configure the alias:'
  prefs: []
  type: TYPE_NORMAL
- en: '`alias_name`: This field holds the local part of the email address; for example,
    the `hostelstudent` part in `hostelstudent@yourdomain.com` is the local part of
    the email address.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alias_model_id`: The model reference on which a record should be created for
    the incoming email.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alias_contact`: This field holds the security preferences for the alias. Possible
    options are `everyone`, `partners`, `followers`, and `employees`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`alias_defaults`: When an incoming email is received, its record is created
    in the model specified on the alias. If you want to set default values in the
    record, give the values in the form of a dictionary in this field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In *step 2*, we added the necessary imports. In *step 3*, we overrode the `message_new()`
    method. This method is invoked automatically when a new email is received on the
    alias email address. This method will take two parameters:'
  prefs: []
  type: TYPE_NORMAL
- en: '`msg_dict`: This parameter will be the dictionary that contains information
    about the received email. It contains email information such as the sender’s email
    address, the receiver’s email address, the email subject, and the email body.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`custom_values`: This is a custom value used to create a new record. This is
    the same value you set on the alias record using the `alias_defaults` field.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'In our recipe, we overrode the `message_new()` method and fetched the name
    from the email through a regular expression. Then, we fetched the email address
    of the sender with the help of the tools we imported in *step 2*. We used the
    sender’s email address to create a student record. Then, we updated `custom_values`
    with these two values: `name` and `email`. We passed this updated `custom_values`
    data to the `super()` method, which created a new `hostel.student` record with
    the given `name` and `email` values. This is how a record is created when you
    send an email to the alias.'
  prefs: []
  type: TYPE_NORMAL
- en: There’s more...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Some business models have a requirement that means you need a separate alias
    per record. For example, the sales team model has separate aliases for each team,
    such as `sale-in@example.com` for Team India and `sale-be@example.com` for Team
    Belgium. If you want to manage such aliases in your model, you can use `mail.alias.mixin`.
    In order to use it in your model, you will need to inherit the mixin:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: After inheriting the mixin, you will need to add the `alias_name` field into
    the form view so that end users can add aliases by themselves.
  prefs: []
  type: TYPE_NORMAL
- en: Logging user changes in a chatter
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Odoo framework provides a built-in facility to log field changes in a chatter.
    In this recipe, we will enable logging on some of the fields so that when changes
    are made in them, Odoo will add logs in the chatter.
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe,
    *Managing the email alias*. In this recipe, we will log changes from a few fields
    in the `hostel.student` model.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Modify the definitions of the fields, to enable logs for the fields when you
    change them. This is shown in the following code snippet:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'Update the `my_hostel` module to apply the changes. Create a new record in
    the `hostel.student` model, make some changes in the fields, and then admission
    and discharge the hostel. If you check the chatter, you will see the following
    logs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.11 – Changelogs in the chatter](img/B20997_23_011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.11 – Changelogs in the chatter
  prefs: []
  type: TYPE_NORMAL
- en: Whenever you make changes to `state`, `admission_date`, or `discharge_date`,
    you will see a new log in the chatter. This will help you to see the full history
    of the record.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'By adding the `tracking=True` attribute on the field, you can enable logging
    for that field. When you set the `tracking=True` attribute, Odoo will add a log
    that changes in the chatter whenever you update the field value. If you enable
    tracking on multiple records and you want to provide a sequence in the tracking
    values, you can also pass a number in the tracking parameter like this: `tracking=20`.
    When you pass `tracking=True`, then the default sequence is used, which is `100`.'
  prefs: []
  type: TYPE_NORMAL
- en: In our recipe, we added `tracking=True` on the `state`, `admission_date`, and
    `discharge_date` fields. This means Odoo will log changes when you update the
    values of the `admission_date`, `discharge_date`, or `state` fields. Take a look
    at the screenshot in the *How to do it…* section; we have only changed the `admission_date`
    and `discharge_date` fields.
  prefs: []
  type: TYPE_NORMAL
- en: Note that the `track_visibility` feature only works if your model inherits the
    `mail.thread` model because the code-related chatter and logs are part of the
    `mail.thread` model.
  prefs: []
  type: TYPE_NORMAL
- en: Sending periodic digest emails
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The Odoo framework has built-in support for sending out periodic digest emails.
    With digest emails, you can send an email with information about business KPIs.
    In this recipe, we will send data about the hostel room to the rector (or any
    other authorized person).
  prefs: []
  type: TYPE_NORMAL
- en: Getting ready
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this recipe, we will be using the `my_hostel` module from the previous recipe,
    *Logging user changes in* *a chatter*.
  prefs: []
  type: TYPE_NORMAL
- en: How to do it...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Follow these steps to generate digest emails for room rent records:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Inherit the `digest.digest` model and add fields for the KPIs:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Inherit the `digest.digest` model’s form view and add the KPI fields:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs:
  - PREF_IND
  type: TYPE_PRE
- en: 'Update the module to apply the changes. Once you update the module, enable
    developer mode and open **Settings** | **Technical** | **Emails** | **Digest Emails**,
    as seen in the following screenshot:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.12 – Enabling the digest email for room rent data](img/B20997_23_012.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.12 – Enabling the digest email for room rent data
  prefs: []
  type: TYPE_NORMAL
- en: Once you enable this and if you have subscribed to digest emails, you will start
    receiving digest emails.
  prefs: []
  type: TYPE_NORMAL
- en: How it works...
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'In order to build a customized digest email, you need two fields. The first
    field will be a `Boolean` field, used to enable and disable the KPI, while the
    second field will be a `compute` field and will be called to acquire the KPI value.
    We created both of the fields in *step 1*. If you check the definition of the
    `compute` field, it uses the `_get_kpi_compute_parameters` method. This method
    returns three parameters: a start date, an end date, and the company record. You
    can use these parameters to generate a value for your KPI. We have returned the
    number of rooms rented during a particular period of time. If your KPI is multi-website
    compatible, then you can use a `company` parameter.'
  prefs: []
  type: TYPE_NORMAL
- en: 'In *step 2*, we added a field to the digest form view. This field is used to
    enable/disable digest emails. When you enable it, you will start receiving digest
    emails:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Figure 23.13 – Digest email for room rent records](img/B20997_23_013.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Figure 23.13 – Digest email for room rent records
  prefs: []
  type: TYPE_NORMAL
- en: Enable developer mode, then open **Settings** | **Technical** | **Emails** |
    **Digest Emails**. Here, you can configure the recipients of digest emails and
    set the periodicity for digest emails. You can also enable/disable digest emails
    from here.
  prefs: []
  type: TYPE_NORMAL
