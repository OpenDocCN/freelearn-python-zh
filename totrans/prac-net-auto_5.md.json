["```py\n$ sudo apt-get update $ sudo apt-get install software-properties-common $ sudo apt-add-repository ppa:ansible/ansible $ sudo apt-get update $ sudo apt-get install ansible\n```", "```py\npip install --user ansible\n```", "```py\n$ sudo nano /etc/ansible/hosts\n```", "```py\nansible myrouters -m ping -f 5\n```", "```py\nansible myrouters -m ping -f 5 -u <username>\n```", "```py\nansible myrouters -m ping -f 5 -u username --become -k (-k will ask for password)\n```", "```py\nansible myrouters -a \"show version\" -f 5 \n```", "```py\nansible servers -m copy -a \"src=/home/user1/myfile.txt dest=/tmp/myfile.txt\"\n```", "```py\nansible mywebservers -m service -a \"name=httpd state=started\"\n```", "```py\nansible mywebservers -m service -a \"name=httpd state=stopped\"\n```", "```py\nansible servers -B 600 -m -a \"show tech-support\"\n```", "```py\nansible servers -m async_status -a \"jobid\"\n```", "```py\nansible localhost -m setup |more \n```", "```py\nansible servers -m shell -a \"reboot\"\n```", "```py\nansible servers -m shell -a \"shutdown\"\n```", "```py\n- hosts: webservers\n  vars:\n    http_port: 80\n    max_clients: 200\n  remote_user: root\n  tasks:\n  - name: test connection\n    ping:\n```", "```py\n- hosts: myrouters\n  vars:\n    http_port: 80\n    max_clients: 200\n  remote_user: root\n  tasks:\n  - name: test connection\n    ping:\n```", "```py\nnano checkme.yml\n```", "```py\nansible-playbook checkme.yml --check \n```", "```py\n- hosts: myrouters\ntasks:\n - name: show uptime\n   command: echo \"this task will show uptime of all hosts\"\n   notify: \"show device uptime\"\nhandlers:\n - name: show variables\n   shell: uptime\n   listen: \"show device uptime\"\n```", "```py\n#example\n- import_playbook: myroutercheck.yml\n- import_playbook: myserver.yml\n\n```", "```py\n# mytask.yml\n---\n- name: uptime\n  shell: uptime\n```", "```py\ntasks:\n- import_tasks: mytask.yml\n# or\n- include_tasks: mytask.yml\n```", "```py\n# extrahandler.yml\n---\n- name: show uptime\n  shell: uptime    \n```", "```py\nhandlers:\n- include_tasks: extrahandler.yml\n# or \n- import_tasks: extrahandler.yml\n```", "```py\nmyname:\n  name: checkme\n  age: 30\n```", "```py\nansible <hostname> -m setup\n```", "```py\nansible localhost -m setup\n```", "```py\n- hosts: myrouters\n  vars:\n      mypath: \"{{ base_path }}/etc\"\n```", "```py\n- hosts: myrouters\n  tasks: \n   - debug:\n       msg: \"System {{ inventory_hostname }} has hostname as {{ ansible_nodename }}\"\n```", "```py\n- hosts: \"{{hosts}}\"\n  tasks: \n   - debug:\n       msg: \"Hello {{user}}, System {{ inventory_hostname }} has hostname as {{ ansible_nodename }}\"\n```", "```py\nansible-playbook gethosts.yml --extra-vars \"hosts=myrouters user=Abhishek\"\n```", "```py\n- hosts: myrouters\n tasks: \n - shell: uptime\n - debug:\n msg: \"This is clock condition\" \n when: clock == \"clock\"\n\n - debug: \n msg: \"This is NOT a clock condition\"\n when: clock != \"clock\"\n\n```", "```py\nansible-playbook checkif.yml --extra-vars \"clock=clock123\"\n```", "```py\nansible-playbook checkif.yml --extra-vars \"clock=clock\"\n```", "```py\n- hosts: myrouters\n  tasks: \n   - shell: uptime\n   - debug:\n       msg: \"This is clock condition on Ubuntu\" \n     when: \n      - clock == \"clock\"\n      - ansible_distribution == \"Ubuntu\"\n\n   - debug: \n       msg: \"This is clock condition on Red HAT\"\n     when: \n      - clock = \"clock\" \n      - ansible_distribution == \"Red Hat\"\n\n```", "```py\n---\n- hosts : all\n vars:\n - test: Server\ntasks:\n - debug: \n msg: \"{{ test }} {{ item }}\" \n with_items: [ 0, 2, 4, 6, 8, 10 ]\n```", "```py\n---\n- hosts : all\n vars:\n - test: Server\ntasks:\n - debug: \n msg: \"{{ test }} {{ item }}\" \n with_sequence: count=10\n```", "```py\nwith_sequence: start=0 end=10 stride=2\n```", "```py\n---\n- hosts : all\n vars:\n - test: Server\ntasks:\n - debug: \n msg: \"{{ test }} {{ item }}\" \n with_random_choice:\n    - \"Choice Random 1\"\n    - \"Choice Random 2\"\n    - \"Choice Random 3\"\n    - \"Choice Random 4\"\n```", "```py\n#call libraries\nimport json\nfrom collections import namedtuple\nfrom ansible.parsing.dataloader import DataLoader\nfrom ansible.vars.manager import VariableManager\nfrom ansible.inventory.manager import InventoryManager\nfrom ansible.playbook.play import Play\nfrom ansible.executor.task_queue_manager import TaskQueueManager\nfrom ansible.plugins.callback import CallbackBase\n\nOptions = namedtuple('Options', ['connection', 'module_path', 'forks', 'become', 'become_method', 'become_user', 'check', 'diff'])\n\n# initialize objects\nloader = DataLoader()\noptions = Options(connection='local', module_path='', forks=100, become=None, become_method=None, become_user=None, check=False,\n                  diff=False)\npasswords = dict(vault_pass='secret')\n\n# create inventory\ninventory = InventoryManager(loader=loader, sources=['/etc/ansible/hosts'])\nvariable_manager = VariableManager(loader=loader, inventory=inventory)\n\n# create play with task\nplay_source = dict(\n        name = \"mypythoncheck\",\n        hosts = 'myrouters',\n        gather_facts = 'no',\n        tasks = [\n            dict(action=dict(module='shell', args='hostname'), register='shell_out'),\n            dict(action=dict(module='debug', args=dict(msg='{{shell_out.stdout}}')))\n         ]\n    )\nplay = Play().load(play_source, variable_manager=variable_manager, loader=loader)\n\n# execution\ntask = None\ntry:\n    task = TaskQueueManager(\n              inventory=inventory,\n              variable_manager=variable_manager,\n              loader=loader,\n              options=options,\n              passwords=passwords,\n              stdout_callback='default'\n          )\n    result = task.run(play)\nfinally:\n    if task is not None:\n        task.cleanup()\n```", "```py\nno service pad\n service tcp-keepalives-in\n service tcp-keepalives-out\n service password-encryption\n username test password test\n !\n hostname {{item.hostname}}\n logging server {{logging_server}}\n !\n logging buffered 32000\n no logging console\n !\n ip domain-lookup enable\n !\n exit\n```", "```py\n---\nlogging_server: 10.10.10.10\n```", "```py\n---\n- name: Generate configuration files\n  template: src=routers.j2 dest=/home/abhishek/{{item.hostname}}.txt\n  with_items: \n  - { hostname: myrouter1 }\n  - { hostname: myrouter2 }\n```", "```py\n---\n- name: Generate router configuration files\n  hosts: localhost\n\n  roles:\n    - routers\n```"]