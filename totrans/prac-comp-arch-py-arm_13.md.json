["```py\n\n                         @ Register r0 is A and r1 is B\n      cmp    r0,#30      @ Compare A with 30\n      ble    Exit        @ If A ≤ 30, skip the next operation\n      mov    r1,#12      @ else B = 12\n```", "```py\nExit:\n```", "```py\n\n      cmp    r0,#30      @ Compare A with 30\n      movgt  r1,#12      @ If A > 30, then B = 12\n```", "```py\n\n   ldr r1,[r0]                   @ Get data pointed at by r0\n   add r0,r0,#4                  @ Advance pointer to next word location\n```", "```py\n\n      adr r0,table               @ r0 points to the table of data (pseudo-instruction)\n      add r3,r0,#28 * 4          @ r3 points to the end of the table (28 x 4 bytes)\n      mov r1,#0                  @ Clear the sum in r1\nloop: ldr r2,[r0]                @ REPEAT: Get the next value in r2\n      add r1,r1,r2               @ Add the new value to the running total\n      add r0,r0,#4               @ Point to the next location in the table (4 bytes increment)\n      cmp r0,r3                  @ Are we at the end of the table?\n      bne loop                   @ UNTIL all elements added\ntable: .word 123                 @ Data for day 1\n       .word 456                 @ Data for day 2\n       .word 20                  @ Data for day 28\n```", "```py\n\n      ldr       r0,=String        @ r0 points at the string (using a pseudo-instruction)\nloop: ldrb      r1,[r0]          @ REPEAT Read a byte character\n      add       r0,r0,#1          @ Update character pointer by 1 (not by 4)\n      cmp       r1,#Term          @ UNTIL terminator found\n```", "```py\n      bne      loop\n```", "```py\n\n      mov  r0,#0x400         @ r0 points to the block of data\n      ldr  r1,#24            @ r1 contains the number of words to move\nnext: ldr  r2,[r0]           @ REPEAT: Read word and put in r2\n      add  r0,r0,#4          @ Point to next word\n      str  r2,[r0,#128]      @ Store the word 128 bytes on\n      subs r1,#1             @ Decrement the counter and set the status bits\n      bne  next              @ UNTIL all elements added\n```", "```py\n\nldr r7,[r0,r1]               @ Load r7 with the contents of the location pointed at by r0 plus r1\n```", "```py\n\nldr r2,[r0,r1,lsl #3]        @ Load r7 with the contents of the location pointed at by r0 plus r1 x 8\n```", "```py\n\n    str r4,[r0,#4]!   @ Store r4 at the address given by [r0] + 4 and then increment r0 by 4\n```", "```py\n\n    str r4,[r0],#4    @ Store  r4 at the address given by [r0] and then increment r0 by 4.\n```", "```py\n\n       adr  r0,table1       @ Source array pointer in r0\\. Use pseudo instruction\n       adr  r1,table2       @ Destination array pointer in r1\n       mov  r2,#8           @ Eight elements (words) to move\nloop:  ldr  r3,[r0],#4      @ REPEAT: Get element from table 1 (post-indexing by 4)\n       str  r3,[r1],#4      @ Store in table 2 (post-indexing 4)\n       subs r2,r2,#1        @ Decrement counter\n       bne  loop            @ UNTIL all done\n```", "```py\n\n         .equ    len,5            @ Length of string to reverse\n         .text                    @ Program (code) area\n         .global _start\n_start:  mov    r0,#len           @ Number of characters to move\n         adr    r1,adr_st1        @ r1 points at source address 1\n         adr    r2,adr_st2        @ r2 points at source address 2\n         ldr    r1,[r1]           @ Register r1 points to source\n         ldr    r2,[r2]           @ Register r2 points to destination\n         add    r2,r2,#len-1      @ r2 points to bottom of destination\nLoop:    ldrb   r3,[r1],#1        @ Get char from source, increment pointer (note ldbr)\n         strb   r3,[r2],#-1       @ Store char in destination, decrement pointer\n         subs   r0,r0,#1          @ Decrement char count\n         bne    Loop              @ REPEAT until all done\n         nop                      @ Stop here\nadr_st1: .word  str1\nadr_st2: .word  str2\n         .data\nstr1:    .ascii \"Hello\"           @ Source string\nstr2:    .byte  0,0,0,0,0         @ Destination string\n         .end\n```", "```py\n\n        .text\n        .global   _start\n_start: ldr r0,=pqr\n        ldr r1,=abc                @ Note the special format of the pseudo ldr\n        adr r2,pqr\n        ldr r3,=0x11111111\n        nop\n        mov r0,#0\n        mov r7,#1\n        svc 0\nabc:   .word 0x22222222\npqr:   .word 0x33333333\n       .end\n```", "```py\n0x10054 <_start>      ldr r0, [pc, #32]   ; 0x1007c <pqr+4>\n0x10058 <_start+4>    ldr r1, [pc, #32]   ; 0x10080 <pqr+8>\n0x1005c <_start+8>\n0x10060 <_start+12>   ldr r3, [pc, #28]   ; 0x10084 <pqr+12>\n```", "```py\n\nr0             0x00010078\nr1             0x00010074\nr2             0x00010078\nr3             0x11111111\n(gdb) x/8xw 0x10074\n0x10074 <abc>:          0x22222222    0x33333333    0x00010078      0x00010074\n0x10084 <pqr+12>:       0x11111111    0x00001141    0x61656100      0x00010069\n```"]