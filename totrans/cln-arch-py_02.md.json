["```py\nfrom abc import ABC, abstractmethod\nclass Notifier(ABC):\n    @abstractmethod\n    def send_notification(self, message: str) -> None:\n        pass\nclass EmailNotifier(Notifier):\n    def send_notification(self, message: str) -> None:\n        print(f\"Sending email: {message}\")\nclass SMSNotifier(Notifier):\n    def send_notification(self, message: str) -> None:\n        print(f\"Sending SMS: {message}\")\nclass NotificationService:\n    def __init__(self, notifier: Notifier):\n        self.notifier = notifier\n    def notify(self, message: str) -> None:\n        self.notifier.send_notification(message)\n# Usage\nemail_notifier = EmailNotifier()\nemail_service = NotificationService(email_notifier)\nemail_service.notify(\"Hello via email\") \n```", "```py\nfrom typing import Protocol\nclass Notifier(Protocol):\n    def send_notification(self, message: str) -> None:\n        ...\nclass EmailNotifier: # Note: no explicit inheritance\n    def send_notification(self, message: str) -> None:\n        print(f\"Sending email: {message}\")\nclass SMSNotifier: # Note: no explicit inheritance\n    def send_notification(self, message: str) -> None:\n        print(f\"Sending SMS: {message}\")\nclass NotificationService:\n    # Still able to use type hinting\n    def __init__(self, notifier: Notifier):\n        self.notifier = notifier\n    def notify(self, message: str) -> None:\n        self.notifier.send_notification(message)\n# Usage\nsms_notifier = SMSNotifier()\nsms_service = NotificationService(sms_notifier)\nsms_service.notify(\"Hello via SMS\") \n```"]