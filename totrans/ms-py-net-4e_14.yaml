- en: '14'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Working with Git
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We have worked on various aspects of network automation with Python, Ansible,
    and many other tools. In the examples you have been following along with in the
    first 13 chapters of this book, we have used over 150 files containing over 5,300
    lines of code. That’s pretty good for network engineers who may have been working
    primarily with the command-line interface before reading this book! With our new
    scripts and tools, we are ready to go out and conquer our network tasks, right?
    Well, not so fast, my fellow network ninjas.
  id: totrans-2
  prefs: []
  type: TYPE_NORMAL
- en: There are several things we need to consider before we get into the meat of
    the tasks. We’ll run through these considerations and talk about how the version-control
    (or source-control) system Git can help us out.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
- en: 'We’ll cover the following topics:'
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
- en: Content management considerations and Git
  id: totrans-5
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An introduction to Git
  id: totrans-6
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Setting up Git
  id: totrans-7
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git usage examples
  id: totrans-8
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git with Python
  id: totrans-9
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Automating configuration backup
  id: totrans-10
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Collaborating with Git
  id: totrans-11
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: First, let’s talk about what exactly are these considerations and the role Git
    can play in helping us to manage them.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
- en: Content management considerations and Git
  id: totrans-13
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The first thing that we must consider when creating code files is how to keep
    them in a location where they can be retrieved and used by us and others. Ideally,
    this location would be the only central place where the file is kept but also
    have backup copies available if needed. After the initial release of the code,
    we might add features and fix bugs in the future, so we would like a way to track
    these changes and keep the latest ones available for download. If the new changes
    do not work, we would like ways to roll back the changes and reflect the differences
    in the history of the file. This would give us a good idea of the evolution of
    the code files.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
- en: The second question is about the collaborative process between our team members.
    If we work with other network engineers, we will most likely need to work collectively
    on the files. These can be Python scripts, Ansible Playbooks, Jinja2 templates,
    INI-style configuration files, and many others. The point is that any kind of
    text-based file should be tracked with multiple inputs that everybody on the team
    should be able to see.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
- en: The third question is accountability. Once we have a system that allows for
    multiple inputs and changes, we need to mark these changes with an appropriate
    track record to reflect the owner of the change. The track record should also
    include a brief reason for the change so that the person reviewing the history
    can get an understanding of why the change was made.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
- en: These are some of the main challenges a version-control (or source-control)
    system, such as Git, tries to solve. To be fair, the process of version control
    can exist in forms other than a dedicated software system. For example, if I open
    my Microsoft Word program, the file constantly saves itself, and I can go back
    in time to revisit the changes or roll back to a previous version. That is one
    form of version control; however, the Word doc is hard to scale beyond my laptop.
    The version-control system we are focused on in this chapter is a standalone software
    tool with the primary purpose of tracking software changes.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是版本控制系统（如 Git）试图解决的一些主要挑战。公平地说，版本控制的过程可以存在于除专用软件系统之外的形式。例如，如果我打开我的 Microsoft
    Word 程序，文件会不断自动保存，我可以回到过去查看变更或回滚到之前的版本。这是一种版本控制的形式；然而，Word 文档很难在我的笔记本电脑之外进行扩展。在本章中，我们关注的版本控制系统是一个独立的软件工具，其主要目的是跟踪软件变更。
- en: There is no shortage of different source-control tools in software engineering,
    both proprietary and open-source. Some popular open-source version-control systems
    are CVS, SVN, Mercurial, and Git. In this chapter, we will focus on the source-control
    system Git. Many of the software we have used in this book use the same version
    control system to track changes, collaborate on features, and communicate with
    its users. We will be taking a more in-depth look at the tool. Git is the de facto
    version-control system for many large, open-source projects, including Python
    and the Linux kernel.
  id: totrans-18
  prefs: []
  type: TYPE_NORMAL
  zh: 软件工程中不缺乏不同的源代码管理工具，既有专有的也有开源的。一些流行的开源版本控制系统包括 CVS、SVN、Mercurial 和 Git。在本章中，我们将重点关注源代码管理系统
    Git。我们在这本书中使用的许多软件都使用相同的版本控制系统来跟踪变更、协作开发功能和与用户沟通。我们将更深入地探讨这个工具。Git 是许多大型开源项目的默认版本控制系统，包括
    Python 和 Linux 内核。
- en: 'As of February 2017, the CPython development process has moved to GitHub. It
    has been a work in progress since January 2015\. For more information, check out
    PEP 512 at: [https://www.python.org/dev/peps/pep-0512](https://www.python.org/dev/peps/pep-0512).'
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 截至 2017 年 2 月，CPython 的开发过程已转移到 GitHub。自 2015 年 1 月以来，它一直在进行中。更多信息请查看 PEP 512：[https://www.python.org/dev/peps/pep-0512](https://www.python.org/dev/peps/pep-0512)。
- en: Before we dive into the working examples of Git, let’s look at the history and
    advantages of the Git system.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入 Git 的工作示例之前，让我们看看 Git 系统的历史和优势。
- en: Introduction to Git
  id: totrans-21
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git 简介
- en: Git was created by Linus Torvalds, the creator of the Linux kernel, in April
    2005\. With his dry wit, he has affectionately called the tool “the information
    manager from hell.” In an interview with the Linux Foundation, Linus mentioned
    that he felt source-control management was just about the least interesting thing
    in the computing world ([https://www.linuxfoundation.org/blog/2015/04/10-years-of-git-an-interview-with-git-creator-linus-torvalds/](https://web.archive.org/web/20210419173925/https://www.linuxfoundation.org/blog/2015/04/10-years-of-git-an-interview-with-git-creator-linus-torvalds/)).
    Nevertheless, he created the tool after a disagreement between the Linux kernel
    developer community and BitKeeper, the proprietary system they were using at the
    time.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: Git 是由 Linux 内核的创造者林纳斯·托瓦兹（Linus Torvalds）在 2005 年 4 月创建的。他以幽默的口吻，亲昵地称这个工具为“来自地狱的信息管理器”。在
    Linux 基金会的采访中，林纳斯提到，他觉得源代码管理在计算机世界中几乎是最无趣的事情（[https://www.linuxfoundation.org/blog/2015/04/10-years-of-git-an-interview-with-git-creator-linus-torvalds/](https://web.archive.org/web/20210419173925/https://www.linuxfoundation.org/blog/2015/04/10-years-of-git-an-interview-with-git-creator-linus-torvalds/））。尽管如此，他在
    Linux 内核开发者社区与当时使用的专有系统 BitKeeper 发生争执后创建了这款工具。
- en: What does the name Git stand for? In British English slang, a git is an insult
    denoting an unpleasant, annoying, childish person. With his dry humor, Linus said
    he is an egotistical bastard and that he named all of his projects after himself.
    First Linux, now Git. However, some suggested that the name is short for **Global
    Information Tracker** (**GIT**). You can be the judge of which explanation you
    like better.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: Git 这个名字代表什么？在英国英语俚语中，git 是一个侮辱性的词汇，表示一个令人不愉快、讨厌、幼稚的人。林纳斯以其幽默感表示，他是一个自负的家伙，并且他把所有的项目都命名为自己的名字。首先是
    Linux，现在是 Git。然而，有人建议这个名字是 **Global Information Tracker**（GIT）的缩写。你可以判断你更喜欢哪种解释。
- en: The project came together quickly. About 10 days after its creation (yeah, you
    read that right), Linus felt the basic ideas for Git were right and started to
    commit the first Linux kernel code with Git. The rest, as they say, is history.
    More than ten years after its creation, it is still meeting all the expectations
    of the Linux kernel project. It took over as the version-control system for many
    other open-source projects despite many developers’ inherent inertia in switching
    source-control systems. For the Python code base, after many years of hosting
    the code at Mercurial ([https://hg.python.org/](https://hg.python.org/)), the
    project was switched to Git on GitHub in February 2017.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 项目很快聚集在一起。在其创建后的大约 10 天（是的，你没看错），林纳斯觉得 Git 的基本想法是正确的，并开始使用 Git 提交第一个 Linux 内核代码。其余的，正如人们所说，就是历史。在创建超过十年后，它仍然满足
    Linux 内核项目的所有预期。尽管许多开发者对切换源代码控制系统有固有的惰性，但它接管了许多其他开源项目的版本控制系统。对于 Python 代码库，在 Mercurial
    ([https://hg.python.org/](https://hg.python.org/)) 上托管代码多年后，该项目于 2017 年 2 月在 GitHub
    上切换到 Git。
- en: Now that we’ve been through the history of Git let’s take a look at some of
    its benefits.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经了解了 Git 的历史，让我们来看看它的一些好处。
- en: Benefits of Git
  id: totrans-26
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 的好处
- en: The success of hosting large and distributed open-source projects, such as the
    Linux kernel and Python, speaks to the advantages of Git. I mean, if this tool
    is good enough for the software development for the most popular operating system
    (in my opinion) and the most popular programming language (again, my opinion only)
    in the world, it is probably good enough for my hobby project.
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 诸如 Linux 内核和 Python 这样的大型和分布式开源项目的托管成功，证明了 Git 的优势。我的意思是，如果这个工具足够好，可以用于世界上（在我看来）最受欢迎的操作系统和编程语言（再次，仅代表我个人观点）的软件开发，那么它可能也足够好，可以用于我的个人项目。
- en: 'The popularity of Git is especially significant given that it is a relatively
    new source-control tool, and people do not tend to switch to a new tool unless
    it offers significant advantages over the old tool. Let’s look at some of the
    benefits of Git:'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑到 Git 是一种相对较新的源代码管理工具，并且人们通常不会切换到新工具，除非它提供了相对于旧工具的显著优势，Git 的流行尤其显著。让我们来看看
    Git 的一些好处：
- en: '**Distributed development**: Git supports parallel, independent, and simultaneous
    development in private repositories offline. Many other version control systems
    require constant synchronization with a central repository. The distributed and
    offline nature of Git allows significantly greater flexibility for the developers.'
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分布式开发**：Git 支持在离线私有存储库中进行并行、独立和同时开发。许多其他版本控制系统需要与中央存储库进行持续同步。Git 的分布式和离线特性为开发者提供了显著更大的灵活性。'
- en: '**Scale to handle thousands of developers**: The number of developers working
    on different parts of some open-source projects is in the thousands. Git supports
    the integration of their work reliably.'
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**扩展以处理数千名开发者**：在许多开源项目的不同部分工作的开发者数量达到数千人。Git 支持可靠地整合他们的工作。'
- en: '**Performance**: Linus was determined to make sure Git was fast and efficient.
    To save space and transfer time for the sheer volume of updates for the Linux
    kernel code alone, compression and a delta check were used to make Git fast and
    efficient.'
  id: totrans-31
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**性能**：林纳斯决心确保 Git 快速且高效。为了节省空间和传输时间，仅针对 Linux 内核代码的大量更新，就使用了压缩和差异检查来使 Git
    快速且高效。'
- en: '**Accountability and immutability**: Git enforces a change log on every commit
    that changes a file, so there is a trail for all the changes and the reason behind
    them. The data objects in Git cannot be modified after they are created and placed
    in the database, making them immutable. This further enforces accountability.'
  id: totrans-32
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**责任和不可变性**：Git 对每个更改文件的提交强制执行更改日志，因此可以追踪所有更改及其背后的原因。Git 中的数据对象在创建并放入数据库后不能被修改，这使得它们不可变。这进一步强化了责任。'
- en: '**Atomic transactions**: The integrity of the repository is ensured as the
    different but related change is performed either altogether or not at all. This
    will ensure the repository is not left in a partially changed or corrupted state.'
  id: totrans-33
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**原子事务**：由于不同的但相关的更改要么全部执行，要么完全不执行，因此确保了存储库的完整性。这将确保存储库不会被留下处于部分更改或损坏的状态。'
- en: '**Complete repositories**: Each repository has a complete copy of all historical
    revisions of every file.'
  id: totrans-34
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**完整存储库**：每个存储库都包含每个文件的每个历史版本的完整副本。'
- en: '**Free, as in freedom**: The origin of the Git tool was born out of the disagreement
    between Linux and BitKeeper VCS as to whether software should be free and whether
    one should reject commercial software on principle, so it makes sense that the
    tool has a very liberal usage license.'
  id: totrans-35
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自由，如同自由一样**：Git 工具的起源源于 Linux 和 BitKeeper VCS 在软件是否应该是自由的以及是否应该基于原则拒绝商业软件之间的分歧，因此这个工具具有非常自由的用法许可。'
- en: Let’s look at some of the terms used in Git before we go deeper into it.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们深入了解 Git 之前，让我们看看一些 Git 中使用的术语。
- en: Git Terminology
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 术语
- en: 'Here are some Git terms we should be familiar with:'
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 这里有一些我们应该熟悉的 Git 术语：
- en: '**Ref**: The name that begins with `refs` and points to an object.'
  id: totrans-39
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**引用**：以 `refs` 开头的名称，指向一个对象。'
- en: '**Repository**: This is a database that contains all of a project’s information,
    files, metadata, and history. It contains a collection of refs for all the collections
    of objects.'
  id: totrans-40
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**仓库**：这是一个包含项目所有信息、文件、元数据和历史的数据库。它包含所有对象集合的refs集合。'
- en: '**Branch**: This is an active line of development. The most recent commit is
    the `tip` or the `HEAD` of that branch. A repository can have multiple branches,
    but your `working tree` or `working directory` can only be associated with one
    branch. This is sometimes referred to as the current or `checked out` branch.'
  id: totrans-41
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**分支**：这是一条活跃的开发线。最近的提交是该分支的 `tip` 或 `HEAD`。一个仓库可以有多个分支，但你的 `working tree`
    或 `working directory` 只能关联到一个分支。这有时也被称为当前或 `checked out` 分支。'
- en: '**Checkout**: This is the action of updating all or part of the working tree
    to a particular point.'
  id: totrans-42
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**检出**：这是将工作树的所有或部分更新到特定点的行为。'
- en: '**Commit**: This is a point in time in Git history, or it can mean storing
    a new snapshot in the repository.'
  id: totrans-43
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**提交**：这是 Git 历史中的一个时间点，或者它也可以意味着在仓库中存储一个新的快照。'
- en: '**Merge**: This is the action to bring the content of another branch into the
    current branch. For example, I am merging the `development` branch with the `master`
    branch.'
  id: totrans-44
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**合并**：这是将另一个分支的内容合并到当前分支中的行为。例如，我正在将 `development` 分支与 `master` 分支合并。'
- en: '**Fetch**: This is the action of getting the content from a remote repository.'
  id: totrans-45
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**获取**：这是从远程仓库获取内容的行为。'
- en: '**Pull**: Fetching and merging a repository.'
  id: totrans-46
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**拉取**：从仓库获取内容并合并。'
- en: '**Tag**: This is a mark at a point in time in a repository that is significant.'
  id: totrans-47
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**标签**：这是在仓库中某个时间点的标记，具有重大意义。'
- en: This is not a complete list; please refer to the Git glossary, [https://git-scm.com/docs/gitglossary](https://git-scm.com/docs/gitglossary),
    for more terms and their definitions.
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 这不是一个完整的列表；请参考 Git 术语表，[https://git-scm.com/docs/gitglossary](https://git-scm.com/docs/gitglossary)，以获取更多术语及其定义。
- en: Finally, before getting into the actual setup and uses of Git, let’s talk about
    the important distinction between Git and GitHub; one that is easily overlooked
    by engineers unfamiliar with the two.
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，在进入 Git 的实际设置和使用之前，让我们谈谈 Git 和 GitHub 之间的重要区别；这是工程师在不熟悉这两个系统时容易忽视的。
- en: Git and GitHub
  id: totrans-50
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Git 和 GitHub
- en: Git and GitHub are not the same things. Sometimes, for engineers who are new
    to version-control systems, this is confusing. Git is a revision-control system,
    while GitHub, [https://github.com/](https://github.com/), is a centralized hosting
    service for Git repositories. The company, GitHub, was launched in 2008 and was
    acquired by Microsoft in 2018 but continued to operate independently.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: Git 和 GitHub 并不相同。有时，对于初学者来说，这可能会造成混淆。Git 是一个版本控制系统，而 GitHub，[https://github.com/](https://github.com/)，是一个集中式托管服务，用于
    Git 仓库。GitHub 公司成立于 2008 年，于 2018 年被微软收购，但继续独立运营。
- en: Because Git is a decentralized system, GitHub stores a copy of our project’s
    repository, just like any other distributed offline copies. We often designate
    the GitHub repository as the project’s central repository, and all other developers
    push and pull their changes to and from that repository.
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 由于 Git 是一个去中心化系统，GitHub 存储了我们项目仓库的副本，就像任何其他分布式离线副本一样。我们通常将 GitHub 仓库指定为项目的中央仓库，所有其他开发者都将他们的更改推送到该仓库或从该仓库拉取。
- en: After GitHub was acquired by Microsoft in 2018, [https://blogs.microsoft.com/blog/2018/10/26/microsoft-completes-github-acquisition/](https://blogs.microsoft.com/blog/2018/10/26/microsoft-completes-github-acquisition/),
    many in the developer community worried about the independence of GitHub. As described
    in the press release, “GitHub will retain its developer-first ethos, operate independently,
    and remain an open-source platform.” GitHub takes this idea of being the centralized
    repository in a distributed system further by using the `fork` and `pull` `requests`
    mechanisms. For projects hosted on GitHub, the project maintainers typically encourage
    other developers to `fork` the repository, or make a copy of the repository, and
    work on it as their copied repository.
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: 2018年，GitHub被微软收购后[https://blogs.microsoft.com/blog/2018/10/26/microsoft-completes-github-acquisition/](https://blogs.microsoft.com/blog/2018/10/26/microsoft-completes-github-acquisition/)，开发者社区中的许多人担心GitHub的独立性。正如新闻稿中所描述的，“GitHub将保持以开发者为先的宗旨，独立运营，并继续作为一个开源平台。”GitHub通过使用`fork`和`pull`请求机制，进一步将作为分布式系统中的集中式仓库这一理念付诸实践。对于托管在GitHub上的项目，项目维护者通常会鼓励其他开发者`fork`仓库，或者复制仓库，并在复制的仓库上工作。
- en: After making changes, they can send a `pull` `request` to the main project,
    and the project maintainers can review the changes and `commit` the changes if
    they see fit. GitHub also adds the web interface to the repositories beside the
    command line; this makes Git more user-friendly.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 修改完成后，他们可以向主项目发送一个`pull`请求，项目维护者可以审查这些更改，并在认为合适的情况下提交更改。GitHub还增加了命令行之外的Web界面；这使得Git更加用户友好。
- en: Now that we’ve differentiated Git and GitHub, we can start properly! First,
    let’s talk about setting up Git.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 既然我们已经区分了Git和GitHub，我们就可以开始正确地使用它们了！首先，让我们谈谈Git的设置。
- en: Setting up Git
  id: totrans-56
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 设置Git
- en: So far, we have been using Git just to download files from GitHub. In this section,
    we will go a bit further by setting up Git locally so we can start committing
    our files. I will use the same Ubuntu 22.04 LTS management host in the example.
    If you are using a different version of Linux or other operating systems, a quick
    search of the installation process should land you in the right set of instructions.
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 到目前为止，我们一直在使用Git从GitHub下载文件。在本节中，我们将通过在本地设置Git来进一步操作，这样我们就可以开始提交我们的文件。在示例中，我将使用相同的Ubuntu
    22.04 LTS管理主机。如果你使用的是不同的Linux版本或其他操作系统，快速搜索安装过程应该会带你找到正确的指令集。
- en: 'If you have not done so already, install Git via the `apt` package-management
    tool:'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你还没有这样做，请通过`apt`包管理工具安装Git：
- en: '[PRE0]'
  id: totrans-59
  prefs: []
  type: TYPE_PRE
  zh: '[PRE0]'
- en: 'Once `git` is installed, we need to configure a few things so that our commit
    messages can contain the correct information:'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦安装了`git`，我们需要配置一些设置，以便我们的提交信息可以包含正确的信息：
- en: '[PRE1]'
  id: totrans-61
  prefs: []
  type: TYPE_PRE
  zh: '[PRE1]'
- en: 'Alternatively, you can modify the information in the `~/.gitconfig` file:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 或者，你可以修改`~/.gitconfig`文件中的信息：
- en: '[PRE2]'
  id: totrans-63
  prefs: []
  type: TYPE_PRE
  zh: '[PRE2]'
- en: 'There are many options in Git that we can change, but the name and email are
    the ones that allow us to commit the change without getting a warning. Personally,
    I like to use the Vim text editor, instead of the default Emac, for typing commit
    messages:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: Git中有许多我们可以更改的选项，但名字和电子邮件是那些允许我们提交更改而不会收到警告的选项。我个人喜欢使用Vim文本编辑器，而不是默认的Emac，来编写提交信息：
- en: '[PRE3]'
  id: totrans-65
  prefs: []
  type: TYPE_PRE
  zh: '[PRE3]'
- en: Before we move on to using Git, let’s go over the idea of a `gitignore` file.
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们继续使用Git之前，让我们回顾一下`gitignore`文件的概念。
- en: Gitignore
  id: totrans-67
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Gitignore
- en: There are files you do not want Git to check into GitHub or other repositories,
    such as files with passwords, API keys, or other sensitive information. The easiest
    way to prevent files from being accidentally checked into a repository is to create
    a .`gitignore` file in the repository’s top-level folder. Git will use the `gitignore`
    file to determine which files and directories should be ignored before committing.
    The `gitignore` file should be committed to the repository as early as possible
    and be shared with other users.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 有一些文件你不想让Git提交到GitHub或其他仓库，例如包含密码、API密钥或其他敏感信息的文件。防止文件意外提交到仓库的最简单方法是，在仓库的顶级文件夹中创建一个`.gitignore`文件。Git将使用`gitignore`文件来确定在提交之前应该忽略哪些文件和目录。应尽早将`gitignore`文件提交到仓库，并与其他用户共享。
- en: 'Imagine the panic you would feel if you accidentally checked your group API
    key into a public Git repository. It is usually helpful to create the `gitignore`
    file when creating a new repository. In fact, GitHub provides an option to do
    just that when you create a repository on its platform. This file can include
    language-specific files. For example, let’s exclude the Python `Byte-compiled`
    files:'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 想象一下，如果您不小心将您的组API密钥检查到公共Git存储库中，您会感到多么恐慌。通常，在创建新存储库时创建`gitignore`文件是有帮助的。实际上，当您在GitHub平台上创建存储库时，它提供了一个选项来做这件事。此文件可以包含特定语言的文件。例如，让我们排除Python的`字节编译`文件：
- en: '[PRE4]'
  id: totrans-70
  prefs: []
  type: TYPE_PRE
  zh: '[PRE4]'
- en: 'We can also include files that are specific to your operating system:'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 我们还可以包含特定于您操作系统的文件：
- en: '[PRE5]'
  id: totrans-72
  prefs: []
  type: TYPE_PRE
  zh: '[PRE5]'
- en: 'You can learn more about `.gitignore` on GitHub’s help page: [https://help.github.com/articles/ignoring-files/](https://help.github.com/articles/ignoring-files/).
    Here are some other references:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 您可以在GitHub的帮助页面了解更多关于`.gitignore`的信息：[https://help.github.com/articles/ignoring-files/](https://help.github.com/articles/ignoring-files/).
    这里还有一些其他参考：
- en: 'Gitignore manual: [https://git-scm.com/docs/gitignore](https://git-scm.com/docs/gitignore)'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Gitignore手册：[https://git-scm.com/docs/gitignore](https://git-scm.com/docs/gitignore)
- en: 'GitHub’s collection of `.gitignore` templates: [https://github.com/github/gitignore](https://github.com/github/gitignore)'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: GitHub的`.gitignore`模板集合：[https://github.com/github/gitignore](https://github.com/github/gitignore)
- en: 'Python language `.gitignore` example: [https://github.com/github/gitignore/blob/master/Python.gitignore](https://github.com/github/gitignore/blob/master/Python.gitignore)'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: Python语言`.gitignore`示例：[https://github.com/github/gitignore/blob/master/Python.gitignore](https://github.com/github/gitignore/blob/master/Python.gitignore)
- en: 'The `.gitignore` file for this book’s repository: [https://github.com/PacktPublishing/Mastering-Python-Networking-Fourth-Edition/blob/main/.gitignore](https://github.com/PacktPublishing/Mastering-Python-Networking-Fourth-Edition/blob/main/.gitignore).'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 本书存储库的`.gitignore`文件：[https://github.com/PacktPublishing/Mastering-Python-Networking-Fourth-Edition/blob/main/.gitignore](https://github.com/PacktPublishing/Mastering-Python-Networking-Fourth-Edition/blob/main/.gitignore).
- en: I see the `.gitignore` file as a file that should be created simultaneously
    with any new repository. That is why this concept is introduced as early as possible.
    We will look at some of the Git usage examples in the next section.
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为`.gitignore`文件应该与任何新的存储库同时创建。这就是为什么这个概念要尽早引入。我们将在下一节中查看一些Git使用示例。
- en: Git Usage Examples
  id: totrans-79
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: Git使用示例
- en: 'In my experience, when we work with Git, we will likely use the command line
    and the various options. The graphical tools are useful when we need to trace
    back changes, look at logs, and compare commit differences, but we rarely use
    them for normal branching and commits. We can look at Git’s command-line option
    by using the `help` option:'
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: 根据我的经验，当我们使用Git时，我们可能会使用命令行和各种选项。当我们需要回溯更改、查看日志和比较提交差异时，图形工具很有用，但我们很少在常规分支和提交中使用它们。我们可以通过使用`help`选项来查看Git的命令行选项：
- en: '[PRE6]'
  id: totrans-81
  prefs: []
  type: TYPE_PRE
  zh: '[PRE6]'
- en: 'We will create a `repository` and create a file inside the repository:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将创建一个`repository`并在存储库内部创建一个文件：
- en: '[PRE7]'
  id: totrans-83
  prefs: []
  type: TYPE_PRE
  zh: '[PRE7]'
- en: 'When the repository was initialized with Git, a new hidden folder of `.git`
    was added to the directory. It contains all the Git-related files:'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 当存储库使用Git初始化时，目录中添加了一个新的隐藏文件夹`.git`。它包含所有与Git相关的文件：
- en: '[PRE8]'
  id: totrans-85
  prefs: []
  type: TYPE_PRE
  zh: '[PRE8]'
- en: 'There are several locations where Git receives its configurations in a hierarchical
    format. The files are read from the `system`, `global`, and `repository` by default.
    The more specific the repository’s location, the higher the override preference.
    For example, the repository configuration will override the global configuration.
    You can use the `git config -l` command to see the aggregated configuration:'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: Git在分层格式中从几个位置接收其配置。默认情况下，文件从`system`、`global`和`repository`读取。存储库的位置越具体，覆盖优先级越高。例如，存储库配置将覆盖全局配置。您可以使用`git
    config -l`命令来查看聚合的配置：
- en: '[PRE9]'
  id: totrans-87
  prefs: []
  type: TYPE_PRE
  zh: '[PRE9]'
- en: 'When we create a file in the repository, it is not tracked. For `git` to be
    aware of the file, we need to add the file:'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们在存储库中创建文件时，它不会被跟踪。为了让`git`知道这个文件，我们需要添加这个文件：
- en: '[PRE10]'
  id: totrans-89
  prefs: []
  type: TYPE_PRE
  zh: '[PRE10]'
- en: 'When you add the file, it is in a staged status. To make the changes official,
    we will need to commit the change:'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 当您添加文件时，它处于暂存状态。为了使更改正式化，我们需要提交这个更改：
- en: '[PRE11]'
  id: totrans-91
  prefs: []
  type: TYPE_PRE
  zh: '[PRE11]'
- en: In the last example, we provided the `commit` message with the `-m` option when
    we issued the `commit` statement. If we did not use the option, we would have
    been taken to a page to provide the commit message. In our scenario, we configured
    the text editor to be Vim, so we can use it to edit the message.
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
- en: 'Let’s make some changes to the file and `commit` it again. Notice that after
    the file has been changed, Git knows the file has been modified:'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  id: totrans-94
  prefs: []
  type: TYPE_PRE
  zh: '[PRE12]'
- en: The `git commit` number is an `SHA-1 hash`, which is an important feature. If
    we had followed the same step on another computer, our `SHA-1 hash` value would
    be the same. This is how Git knows the two repositories are identical even when
    they are worked on in parallel.
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
- en: 'If you have ever wondered about the `SHA-1 hash` value being accidentally or
    purposely modified to overlap, there is an interesting article on the GitHub blog
    about detecting this `SHA-1 hash` collision: [https://github.blog/2017-03-20-sha-1-collision-detection-on-github-com/](https://github.blog/2017-03-20-sha-1-collision-detection-on-github-com/).'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
- en: 'We can show the history of the commits with `git log`. The entries are shown
    in reverse chronological order; each commit shows the author’s name and email
    address, the date, the log message, as well as the internal identification number
    of the commit:'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  id: totrans-98
  prefs: []
  type: TYPE_PRE
  zh: '[PRE13]'
- en: 'We can also show more details about the change using the commit ID:'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  id: totrans-100
  prefs: []
  type: TYPE_PRE
  zh: '[PRE14]'
- en: 'If you need to revert the changes you have made, you can choose between `revert`
    and `reset`. The former changes all the files for a specific commit back to their
    state before the commit:'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  id: totrans-102
  prefs: []
  type: TYPE_PRE
  zh: '[PRE15]'
- en: 'The `revert` command will keep the `commit` you reverted and make a new `commit`.
    You will be able to see all the changes up to that point, including the revert:'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  id: totrans-104
  prefs: []
  type: TYPE_PRE
  zh: '[PRE16]'
- en: 'The `reset` option will reset the status of your repository to an older version
    and discard all the changes in between:'
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  id: totrans-106
  prefs: []
  type: TYPE_PRE
  zh: '[PRE17]'
- en: I like to keep all the history, including any rollbacks I have done. Therefore,
    when I need to roll back a change, I usually pick `revert` instead of `reset`.
    In this section, we have seen how we can work with individual files. In the next
    section, let’s look at how we can work with a collection of files that is grouped
    into a particular `bundle`, called `branch`.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
- en: Git Branch
  id: totrans-108
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: A `branch` in `git` is a line of development within a repository. Git allows
    many branches and thus different lines of development within a repository. By
    default, we have the master branch.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
- en: 'A few years back, the default branch for GitHub was renamed “main”: [https://github.com/github/renaming](https://github.com/github/renaming).
    We will see both in the field.'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
- en: 'There are many reasons for branching; there are no hard-set rules about when
    to branch or work on the master/main branch directly. Most of the time, we create
    a branch when there is a bug fix, a customer software release, or a development
    phase. In our example, let us create a branch that represents development, appropriately
    named the `dev` branch:'
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  id: totrans-112
  prefs: []
  type: TYPE_PRE
  zh: '[PRE18]'
- en: 'Notice we need to specifically move into the `dev branch` after creation. We
    do that with `checkout`:'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，我们需要在创建后特别移动到 `dev 分支`。我们使用 `checkout` 来做这件事：
- en: '[PRE19]'
  id: totrans-114
  prefs: []
  type: TYPE_PRE
  zh: '[PRE19]'
- en: 'Let’s add a second file to the `dev` branch:'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们在 `dev` 分支中添加第二个文件：
- en: '[PRE20]'
  id: totrans-116
  prefs: []
  type: TYPE_PRE
  zh: '[PRE20]'
- en: 'We can go back to the `master` branch and verify that the two lines of development
    are separate. Note that when we switch to the master branch, there is only one
    file in the directory:'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以回到 `master` 分支并验证两条开发线是分开的。注意，当我们切换到 master 分支时，目录中只有一个文件：
- en: '[PRE21]'
  id: totrans-118
  prefs: []
  type: TYPE_PRE
  zh: '[PRE21]'
- en: 'To have the contents in the `dev` branch be written into the `master` branch,
    we will need to `merge` them:'
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 要将 `dev` 分支的内容写入 `master` 分支，我们需要 `merge` 它们：
- en: '[PRE22]'
  id: totrans-120
  prefs: []
  type: TYPE_PRE
  zh: '[PRE22]'
- en: 'We can use `git rm` to remove a file. To see how it works, let’s create a third
    file and remove it:'
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以使用 `git rm` 来删除一个文件。为了了解它是如何工作的，让我们创建第三个文件并删除它：
- en: '[PRE23]'
  id: totrans-122
  prefs: []
  type: TYPE_PRE
  zh: '[PRE23]'
- en: 'We will be able to see the last two changes in the log:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将能够在日志中看到最后两个更改：
- en: '[PRE24]'
  id: totrans-124
  prefs: []
  type: TYPE_PRE
  zh: '[PRE24]'
- en: We have gone through most of the basic operations we would use for Git. Let’s
    look at how to use GitHub to share our repository.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我们已经了解了大多数我们将使用的 Git 基本操作。让我们看看如何使用 GitHub 来共享我们的仓库。
- en: GitHub Example
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: GitHub 示例
- en: In this example, we will use GitHub as the centralized location to synchronize
    our local repository and share it with other users.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 在这个例子中，我们将使用 GitHub 作为集中位置来同步我们的本地仓库并与其他用户共享。
- en: 'We will create a repository on GitHub. GitHub has always been free for creating
    public open-source repositories. Starting in January 2019, it also offers unlimited
    free private repositories. In this case, we will create a private repository and
    add the license and `.gitignore` file:'
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将在 GitHub 上创建一个仓库。GitHub 一直免费提供创建公共开源仓库。从 2019 年 1 月开始，它还提供无限免费的私有仓库。在这种情况下，我们将创建一个私有仓库并添加许可证和
    `.gitignore` 文件：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_01.png)'
  id: totrans-129
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件 自动生成的描述](img/B18403_14_01.png)'
- en: 'Figure 14.1: Creating a private repository in GitHub'
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.1：在 GitHub 中创建私有仓库
- en: 'Once the repository is created, we can find the URL for it:'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了仓库，我们就可以找到它的 URL：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_02.png)'
  id: totrans-132
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件 自动生成的描述](img/B18403_14_02.png)'
- en: 'Figure 14.2: GitHub repository URL'
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.2：GitHub 仓库 URL
- en: 'We will use this URL to create a remote target, which we will use as a “source
    of truth” for our project. We will name the remote target `gitHubRepo`:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用这个 URL 来创建一个远程目标，我们将将其用作项目的“真相之源”。我们将远程目标命名为 `gitHubRepo`：
- en: '[PRE25]'
  id: totrans-135
  prefs: []
  type: TYPE_PRE
  zh: '[PRE25]'
- en: Since we chose to create `README.md` and `LICENSE` files during creation, the
    remote repository and local repository are not the same.
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: 由于我们在创建时选择了创建 `README.md` 和 `LICENSE` 文件，远程仓库和本地仓库并不相同。
- en: 'GitHub switched to a **Personal Access Token** (**PAT**) as the term to be
    entered as a password a few years ago: [https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token).
    To generate a token, click on the profile logo **-> Settings -> Developer settings
    -> Personal Access Tokens**. We need to use this token as our password when prompted
    in the command line.'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 几年前，GitHub 将 **个人访问令牌**（**PAT**）作为密码的术语进行了更改：[https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token](https://docs.github.com/en/authentication/keeping-your-account-and-data-secure/creating-a-personal-access-token)。要生成令牌，请点击个人标志
    **-> 设置 -> 开发者设置 -> 个人访问令牌**。我们需要在命令行提示时使用此令牌作为密码。
- en: 'If we were to push local changes to the new GitHub repository, we would receive
    the following error (remember to change the branch name to main if that is your
    default branch):'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我们要将本地更改推送到新的 GitHub 仓库，我们会收到以下错误（记得如果默认分支是 main，请将分支名称更改为 main）：
- en: '[PRE26]'
  id: totrans-139
  prefs: []
  type: TYPE_PRE
  zh: '[PRE26]'
- en: 'We will go ahead and use `git pull` to get the new files from GitHub:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将使用 `git pull` 来从 GitHub 获取新文件：
- en: '[PRE27]'
  id: totrans-141
  prefs: []
  type: TYPE_PRE
  zh: '[PRE27]'
- en: 'Now we will be able to `push` the contents over to GitHub:'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我们将能够将内容 `push` 到 GitHub：
- en: '[PRE28]'
  id: totrans-143
  prefs: []
  type: TYPE_PRE
  zh: '[PRE28]'
- en: 'We can verify the content of the GitHub repository on the web page:'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我们可以在网页上验证 GitHub 仓库的内容：
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_03.png)'
  id: totrans-145
  prefs: []
  type: TYPE_IMG
  zh: '![图形用户界面，文本，应用程序，电子邮件 自动生成的描述](img/B18403_14_03.png)'
- en: 'Figure 14.3: GitHub repository'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 图 14.3：GitHub 仓库
- en: 'Now another user can simply make a copy, or `clone`, of the repository:'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 现在另一个用户可以简单地复制，或者 `clone` 仓库：
- en: '[PRE29]'
  id: totrans-148
  prefs: []
  type: TYPE_PRE
  zh: '[PRE29]'
- en: 'This copied repository will be the exact copy of my original repository, including
    all the commit history:'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  id: totrans-150
  prefs: []
  type: TYPE_PRE
  zh: '[PRE30]'
- en: 'I can also invite another person as a collaborator for the project under the
    repository settings:'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_04.png)'
  id: totrans-152
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.4: Repository invite'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
- en: In the next example, we will see how we can fork a repository and perform a
    pull request for a repository we do not maintain.
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating with Pull Requests
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
- en: As mentioned, Git supports collaboration between developers for a single project.
    We will look at how it is done when the code is hosted on GitHub.
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
- en: 'In this case, we will use the GitHub repository for the second edition of this
    book from Packt’s GitHub public repository. I will use a different GitHub handle,
    so I appear as a non-administrative user. I will click on the **Fork** button
    to make a copy of the repository in my account:'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
- en: '![A screenshot of a computer  Description automatically generated with medium
    confidence](img/B18403_14_05.png)'
  id: totrans-158
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.5: Git Fork button'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
- en: 'It will take a few seconds to make a copy:'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, website  Description automatically generated](img/B18403_14_06.png)'
  id: totrans-161
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.6: Git Fork in progress'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
- en: 'After it is forked, we will have a copy of the repository in our account:'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_07.png)'
  id: totrans-164
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.7: Git Fork'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
- en: 'We can follow the same steps we used to modify the files. In this case, I will
    make some changes to the `README.md` file. After the change is made, I can click
    on the **New pull request** button to create a pull request:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_08.png)'
  id: totrans-167
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.8: Pull request'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
- en: 'When making a pull request, we should fill in as much information as possible
    to provide justifications for making the change:'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_09.png)'
  id: totrans-170
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.9: Pull request details'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
- en: 'The repository maintainer will receive a notification of the pull request;
    if accepted, the change will make its way to the original repository:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_10.png)'
  id: totrans-173
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.10: Pull request record'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
- en: GitHub provides an excellent platform for collaboration with other developers;
    this is quickly becoming the de facto development choice for many large, open-source
    projects. Since Git and GitHub are used extensively in many projects, a natural
    next step would be to automate the processes we have seen in this section. In
    the following section, let’s look at how we can use Git with Python.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
- en: Git with Python
  id: totrans-176
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: There are some Python packages that we can use with Git and GitHub. In this
    section, we will look at the GitPython and PyGitHub libraries.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
- en: GitPython
  id: totrans-178
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'We can use the GitPython package, [https://gitpython.readthedocs.io/en/stable/index.html](https://gitpython.readthedocs.io/en/stable/index.html),
    to work with our Git repository. We will install the package and use the Python
    shell to construct a `Repo` object. From there, we can list all the commits in
    the repository:'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  id: totrans-180
  prefs: []
  type: TYPE_PRE
  zh: '[PRE31]'
- en: 'We can also look at the index entries in the `repo` object:'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  id: totrans-182
  prefs: []
  type: TYPE_PRE
  zh: '[PRE32]'
- en: GitPython offers good integration with all the Git functions. However, it might
    not be the easiest library to work with for beginners. We need to understand the
    terms and structure of Git to take full advantage of GitPython, and it is always
    good to keep it in mind if we need it for other projects.
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
- en: PyGitHub
  id: totrans-184
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Let’s look at using the PyGithub library, [http://pygithub.readthedocs.io/en/latest/](http://pygithub.readthedocs.io/en/latest/),
    to interact with GitHub reappearing around GitHub API v3, [https://developer.github.com/v3/](https://developer.github.com/v3/):'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  id: totrans-186
  prefs: []
  type: TYPE_PRE
  zh: '[PRE33]'
- en: 'Let’s use the Python shell to print out the user’s current repository:'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  id: totrans-188
  prefs: []
  type: TYPE_PRE
  zh: '[PRE34]'
- en: 'For more programmatic access, we can also create more granular control using
    an access token. GitHub allows a token to be associated with the selected rights:'
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
- en: '![A picture containing graphical user interface  Description automatically
    generated](img/B18403_14_11.png)'
  id: totrans-190
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.11: GitHub token generation'
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
- en: 'The output is a bit different if you use the access token as the authentication
    mechanism:'
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  id: totrans-193
  prefs: []
  type: TYPE_PRE
  zh: '[PRE35]'
- en: Now that we are familiar with Git, GitHub, and some Python packages, we can
    use them to work with the technology. We will look at some practical examples
    in the upcoming section.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
- en: Automating Configuration Backup
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this example, we will use PyGithub to back up a directory containing our
    router configurations. We have seen how we can retrieve the information from our
    devices with Python or Ansible; we can now check them into GitHub.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
- en: 'We have a subdirectory, named `config`, with our router configs in text format:'
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  id: totrans-198
  prefs: []
  type: TYPE_PRE
  zh: '[PRE36]'
- en: 'We can use the following script, `Chapter14_1.py`, to retrieve the latest index
    from our GitHub repository, build the content that we need to commit, and automatically
    commit the configuration:'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  id: totrans-200
  prefs: []
  type: TYPE_PRE
  zh: '[PRE37]'
- en: 'We can see the `configs` directory in the GitHub repository:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_12.png)'
  id: totrans-202
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.12: Conﬁgs directory'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
- en: 'The commit history shows the commit from our script:'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
- en: '![Graphical user interface, text, application, email  Description automatically
    generated](img/B18403_14_13.png)'
  id: totrans-205
  prefs: []
  type: TYPE_IMG
- en: 'Figure 14.13: Commit history'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
- en: In the GitHub example section, we saw how we could collaborate with other developers
    by forking the repository and making pull requests. Let’s look at how we can further
    collaborate with Git.
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
- en: Collaborating with Git
  id: totrans-208
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Git is an awesome collaboration technology, and GitHub is an incredibly effective
    way to develop projects together. GitHub provides a place for anyone in the world
    with internet access to share their thoughts and code for free. We know how to
    use Git and some basic collaboration steps using GitHub, but how do we join and
    contribute to a project?
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
- en: Sure, we would like to give back to these open-source projects that have given
    us so much, but how do we get started?
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
- en: 'In this section, we’ll look at some of the things to know about software development
    collaboration using Git and GitHub:'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
- en: '**Start small**: One of the most important things to understand is the role
    we can play within a team. We might be awesome at network engineering, but mediocre
    at Python development. There are plenty of things we can do that don’t involve
    being a highly skilled developer. Don’t be afraid to start small; documentation
    and testing are two good ways to get your foot in the door as a contributor.'
  id: totrans-212
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Learn the ecosystem**: With any project, large or small, there is a set of
    conventions and a culture that has been established. We are all drawn to Python
    for its easy-to-read syntax and beginner-friendly culture; it also has a development
    guide centered around that ideology ([https://devguide.python.org/](https://devguide.python.org/)).
    The Ansible project, on the other hand, also has an extensive community guide
    ([https://docs.ansible.com/ansible/latest/community/index.html](https://docs.ansible.com/ansible/latest/community/index.html)).
    It includes the code of conduct, the pull request process, how to report bugs,
    and the release process. Read these guides and learn the ecosystem for the project
    of interest.'
  id: totrans-213
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Make a branch**: I made the mistake of forking a project and making a pull
    request for the main branch. The main branch should be left alone for the core
    contributors to make changes. We should create a separate branch for our contribution
    and allow the branch to be merged later.'
  id: totrans-214
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Keep the forked repository synchronized**: Once you have forked a project,
    no rule forces the cloned repository to sync with the main repository. We should
    make a point to regularly do `git pull` (get the code and merge locally) or `git`
    `fetch` (get the code with any change locally) to ensure we have the latest copy
    of the main repository.'
  id: totrans-215
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Be friendly**: Just as in the real world, the virtual world has no place
    for hostility. When discussing an issue, be civil and friendly, even in disagreements.'
  id: totrans-216
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Git and GitHub provide a way for any motivated individual to make a difference
    by making it easy to collaborate on projects. We are all empowered to contribute
    to any open source or private projects that interest us.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  id: totrans-218
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we looked at the version-control system known as Git and its
    close sibling, GitHub. Git was developed by Linus Torvolds in 2005 to help develop
    the Linux kernel and was later adopted by other open-source projects as their
    source-control system. Git is a fast, distributed, and scalable system. GitHub
    provides a centralized location to host Git repositories on the internet that
    allows anybody with an internet connection to collaborate.
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
- en: 'We looked at how to use Git in the command line and its various operations
    and how they are applied in GitHub. We also studied two popular Python libraries
    for working with Git: GitPython and PyGithub. We ended this chapter with a configuration
    backup example and notes about project collaboration.'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
- en: 'In *Chapter 15*,*Continuous Integration with GitLab*, we will look at another
    popular open-source tool used for continuous integration and deployment: GitLab.'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
- en: Join our book community
  id: totrans-222
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'To join our community for this book – where you can share feedback, ask questions
    to the author, and learn about new releases – follow the QR code below:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
- en: '[https://packt.link/networkautomationcommunity](https://packt.link/networkautomationcommunity)'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/QR_Code2903617220506617062.png)'
  id: totrans-225
  prefs: []
  type: TYPE_IMG
