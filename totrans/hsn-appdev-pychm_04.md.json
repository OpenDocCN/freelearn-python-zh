["```py\nimport time\ndef test_code():\n  pass\n```", "```py\nb.if\n```", "```py\nif b:\n```", "```py\nlet foo = \"some user option\";\nif(foo.toUpperCase() === \"SOME USER OPTION\"){\n console.log(\"It matched!\");\n}\n```", "```py\nfoo = \"some user option\"\nif foo.upper() == \"SOME USER OPTION\":\n  print(\"It matched\")\n```", "```py\na = 5\nb = 6\ndef add_two_ints(first, second):\n  return a + b\n```", "```py\na = 5\nb = 6\ndef add_two_ints(first: int, second: int) -> int:\n  return a + b\n```", "```py\na = 5\nb = 6\ndef add_two(num1: int, num2: int) -> int:\n  sum = num1 + num2\n  return sum\nadd_two(a, b)\n```", "```py\na = 5\nb = 6\ndef add_two(num1: int, num2: int) -> int:\n  return num1 + num2\nadd_two(a, b)\n```", "```py\ncomputer_science_grades = {\n  \"Guido van Rossum\": 100,\n  \"Ewa Jodlwska\": 99,\n  \"Fabrizio Romano\": 88,\n  \"Henrich Kruger\": 87,\n  \"Rick van Hattem\": 83,\n  \"Steven Lott\": 72,\n  \"Dusty Phillips\": 72,\n  \"Quan Nguyen\": 92\n}\n```", "```py\nadvanced_theoretical_and_applied_recess_grades = {\n  \"Bruce Van Horn\": 100,\n  \"Prajakta Naik\": 92,\n  \"Kinnari Chohan\": 88,\n  \"Pooja Yadiv\": 86\n}\n```", "```py\ndef computer_science_average(grades: dict) -> float:\n  raw_total = 0\n  for grade in grades.values():\n    raw_total += grade\n  average = (raw_total / len(grades))\n  return average\n```", "```py\nboring_class_average = computer_science_average(computer_science_grades)\nprint(f\"Boring average is {boring_class_average}\")\n```", "```py\ndef advanced_recess_average(grades: dict) -> float:\n  raw_total = 0\n  for grade in grades.values():\n    raw_total += grade\n  average = (raw_total / len(grades))\n  return average\n```", "```py\ndef computer_science_average(grades: dict) -> float:\n  average = compute_average(grades)\n  return average\n```", "```py\ndef compute_average(grades):\n  raw_total = 0\n  for grade in grades.values():\n    raw_total += grade\n  total_number_grades = len(grades)\n  average = (raw_total / total_number_grades)\n  return average\n```", "```py\ndef computer_science_average(grades: dict) -> float:\n  raw_total = 0\n  fake_var_1 = 1\n  fake_var_2 = 2\n  fake_var_3 = 3\n  fake_var_4 = 4\n  fake_var_5 = 5\n  fake_var_6 = 6\n  fake_var_7 = 7\n  print(f\"{fake_var_1}{fake_var_2}{fake_var_3}{fake_var_4}\")\n  print(f\"{fake_var_5}{fake_var_6}{fake_var_7}\")\n  for grade in grades.values():\n    raw_total += grade\n  average = (raw_total / len(grades))\n  return average\n```", "```py\nimport sqlite3\nCANDY_DB = \"candy.db\"\n```", "```py\ndef read_input_file_type_a(file_path: str) -> None:\n  with open(file_path, \"r\") as data:\n    for line in data:\n      cleaned = line.strip(\"\\n\")\n      write_to_database(cleaned)\n  print(\"Processing Complete!\")\n```", "```py\ndef write_to_database(datum: str) -> None:\n  connection = sqlite3.connect(CANDY_DB)\n  cursor = connection.cursor()\n  sql = f\"INSERT INTO candy(name) VALUES ('{datum}')\"\n  print(sql)\n  cursor.execute(sql)\n  cursor.close()\n  connection.close()\n```", "```py\nif __name__ == \"__main__\":\n  read_input_file_type_a(\"../input_file_a.txt\")\n```", "```py\n{\n \"data\": [\n  \"truffles\",\n  \"turtles\",\n  \"dark chocolate bark\"\n ]\n}\n```", "```py\nimport json\nfrom read_input_file_a import write_to_database\n```", "```py\ndef read_input_file_type_b(file_path: str) -> None:\n  with open(file_path, \"r\") as json_data:\n    data = json.load(json_data)\n    candies = data[\"data\"]\n    for candy in candies:\n      write_to_database(candy)\n  print(\"Processing Complete!\")\nif __name__ == \"__main__\":\n  read_input_file_type_b(\"../input_file_b.json\")\n```", "```py\nimport sqlite3\nfrom input.read_input_file_a import CANDY_DB\ndef write_to_database(datum: str) -> None:\n  connection = sqlite3.connect(CANDY_DB)\n  cursor = connection.cursor()\n  sql = f\"INSERT INTO candy(name) VALUES ('{datum}')\"\n  print(sql)\n  cursor.execute(sql)\n  cursor.close()\n  connection.close()\n```", "```py\nfrom input.database_helper import write_to_database\n```", "```py\nimport sys\nfrom math import sqrt\ndef prime_check(n: int) -> bool:\n  # TODO: docstring goes here\n  if n < 2:\n    return False\n  limit = int(sqrt(n)) + 1\n  for i in range(2, limit):\n    if n % i == 0:\n      return False # return False if a divisor is found\n  return True # return True if no divisor is found\n```", "```py\n\"\"\"\n:param n:\n:return:\n\"\"\"\n```", "```py\n\"\"\"\nCheck whether an integer is a prime number of not.\nGenerally, the function goes through all odd numbers\nless than the square root of the input integer, and\nchecks to see if the input is divisible by that number.\n:param n:\n:return:\n\"\"\"\n```", "```py\n\"\"\"\nCheck whether an integer is a prime number of not.\nGenerally, the function goes through all odd numbers\nless than the square root of the input integer, and\nchecks to see if the input is divisible by that number.\n:param n: the integer to prime check\n:return:\n\"\"\"\n```", "```py\n\"\"\"\nCheck whether an integer is a prime number of not.\nGenerally, the function goes through all odd numbers\nless than the square root of the input integer, and\nchecks to see if the input is divisible by that number.\n:param n: the integer to prime check\n:return: boolean\n\"\"\"\n```"]