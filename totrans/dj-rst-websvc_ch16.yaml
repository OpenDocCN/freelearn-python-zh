- en: Working with Advanced Relationships and Serialization
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will create a complex RESTful Web Service that will persist
    data in a PostgreSQL database. We will work with different types of relationships
    between the resources and we will take advantage of generic classes and generic
    views provided by the Django REST framework to reduce the amount of boilerplate
    code. We will gain an understanding of:'
  prefs: []
  type: TYPE_NORMAL
- en: Defining the requirements for a complex RESTful Web Service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Creating a new app with Django
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring a new web service
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining many-to-one relationships with models.ForeignKey
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Installing PostgreSQL
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Running migrations that generate relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Analyzing the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Configuring serialization and deserialization with relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining hyperlinks with serializers.HyperlinkedModelSerializer
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with class-based views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Taking advantage of generic classes and generic views
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Generalizing and mixing behavior
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Working with routing and endpoints
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Making requests that interact with resources that have relationships
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Defining the requirements for a complex RESTful Web Service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: So far, our RESTful Web Service performed CRUD operations on a single database
    table. Now, we want to create a more complex RESTful Web Service with the Django
    REST framework to interact with a complex database model.
  prefs: []
  type: TYPE_NORMAL
- en: A drone is an **IoT** (short for **Internet of Things**) device that interacts
    with many sensors and actuators, including digital electronic speed controllers
    linked to engines, propellers, and sensors. A drone is also known as an **Unnamed
    Aerial Vehicle** (**UAV**). We will code a RESTful Web Service that will allow
    us to register competitions for drones that are grouped into drone categories.
    In our previous RESTful Web Service, we had toys grouped in toy categories and
    we used a string field to specify the toy category for a toy. In this case, we
    want to be able to easily retrieve all the drones that belong to a specific drone
    category. Thus, we will have a relationship between a drone and a drone category.
  prefs: []
  type: TYPE_NORMAL
- en: We must be able to perform CRUD operations on diverse resources and resource
    collections. Many resources have relationships with other resources, and therefore,
    we won't work with simple models. We will learn how to establish different kinds
    of relationships between the models.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following list enumerates the resources and the model name we will use
    to represent them in a Django REST framework:'
  prefs: []
  type: TYPE_NORMAL
- en: Drone categories (`DroneCategory` model)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Drones (`Drone` model)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Pilots (`Pilot` model)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Competitions (`Competition` model)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The drone category (`DroneCategory` model) just requires a name.
  prefs: []
  type: TYPE_NORMAL
- en: 'We need the following data for a drone (`Drone` model):'
  prefs: []
  type: TYPE_NORMAL
- en: A foreign key to a drone category (`DroneCategory` model)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A manufacturing date
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A bool value indicating whether the drone participated in at least one competition
    or not
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A timestamp with the date and time in which the drone was inserted in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need the following data for a pilot (`Pilot` model):'
  prefs: []
  type: TYPE_NORMAL
- en: A name
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A gender value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: An integer value with the number of races in which the pilot participated
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A timestamp with the date and time in which the pilot was inserted in the database
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We need the following data for the competition (`Competition` model):'
  prefs: []
  type: TYPE_NORMAL
- en: A foreign key to a pilot (`Pilot` model)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A foreign key to a drone (`Drone` model)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A distance value (measured in feet)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A date in which the drone controlled by the pilot reached the specified distance
    value
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We will use diverse options that the Django REST framework provides us to materialize
    the relationship between resources. This way, we will be able to analyze different
    configurations that will make it possible for us to know which is the best option
    based on the specific requirements of new web services that we will develop in
    the future.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following table shows the HTTP verbs, the scope and the semantics for the
    methods that our new RESTful Web Service must support. Each method is composed
    by an HTTP verb and a scope. All the methods have well-defined meanings for all
    the resources and resource collections. In this case, we will implement the PATCH
    HTTP verb for all the resources:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **HTTP verb** | **Scope** | **Semantics** |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Drone category | Retrieve a single drone category. The drone category
    must include a list of URLs for each drone resource that belongs to the drone
    category. |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Collection of drone categories | Retrieve all the stored drone categories
    in the collection, sorted by their name in ascending order. Each drone category
    must include a list of URLs for each drone resource that belongs to the drone
    category. |'
  prefs: []
  type: TYPE_TB
- en: '| POST | Collection of drone categories | Create a new drone category in the
    collection. |'
  prefs: []
  type: TYPE_TB
- en: '| PUT | Drone category | Update an existing drone category. |'
  prefs: []
  type: TYPE_TB
- en: '| PATCH | Drone category | Update one or more fields of an existing drone category.
    |'
  prefs: []
  type: TYPE_TB
- en: '| DELETE | Drone category | Delete an existing drone category. |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Drone | Retrieve a single drone. The drone must include its drone category
    description. |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Collection of drones | Retrieve all the stored drones in the collection,
    sorted by their name in ascending order. Each drone must include its drone category
    description. |'
  prefs: []
  type: TYPE_TB
- en: '| POST | Collection of drones | Create a new drone in the collection. |'
  prefs: []
  type: TYPE_TB
- en: '| PUT | Drone | Update an existing drone. |'
  prefs: []
  type: TYPE_TB
- en: '| PATCH | Drone | Update one or more fields of an existing drone. |'
  prefs: []
  type: TYPE_TB
- en: '| DELETE | Drone | Delete an existing drone. |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Pilot | Retrieve a single pilot. The pilot must include a list of the
    registered competitions, sorted by distance in descending order. The list must
    include all the details for the competition in which the pilots and his related
    drone participated. |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Collection of pilots | Retrieve all the stored pilots in the collection,
    sorted by their name in ascending order. Each pilot must include a list of the
    registered competitions, sorted by distance in descending order. The list must
    include all the details for the competition in which the pilot and his related
    drone participated. |'
  prefs: []
  type: TYPE_TB
- en: '| POST | Collection of pilots | Create a new pilot in the collection. |'
  prefs: []
  type: TYPE_TB
- en: '| PUT | Pilot | Update an existing pilot. |'
  prefs: []
  type: TYPE_TB
- en: '| PATCH | Pilot | Update one or more fields of an existing pilot. |'
  prefs: []
  type: TYPE_TB
- en: '| DELETE | Pilot | Delete an existing pilot. |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Competition | Retrieve a single competition. The competition must include
    the pilot''s name that made the drone reach a specific distance and the drone''s
    name. |'
  prefs: []
  type: TYPE_TB
- en: '| GET | Collection of competitions | Retrieve all the stored competitions in
    the collection, sorted by distance in descending order. Each competition must
    include the pilot''s name that made the drone reach a specific distance and the
    drone''s name. |'
  prefs: []
  type: TYPE_TB
- en: '| POST | Collection of competitions | Create a new competition in the collection.
    The competition must be related to an existing pilot and an existing drone. |'
  prefs: []
  type: TYPE_TB
- en: '| PUT | Competition | Update an existing competition. |'
  prefs: []
  type: TYPE_TB
- en: '| PATCH | Competition | Update one or more fields of an existing competition.
    |'
  prefs: []
  type: TYPE_TB
- en: '| DELETE | Competition | Delete an existing competition. |'
  prefs: []
  type: TYPE_TB
- en: 'In the previous table, we have a huge number of methods and scopes. The following
    table enumerates the URIs for each scope mentioned in the previous table, where
    `{id}` has to be replaced with the numeric `id` or primary key of the resource:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scope** | **URI** |'
  prefs: []
  type: TYPE_TB
- en: '| Collection of drone categories | `/drone-categories/` |'
  prefs: []
  type: TYPE_TB
- en: '| Drone category | `/drone-category/{id}` |'
  prefs: []
  type: TYPE_TB
- en: '| Collection of drones | `/drones/` |'
  prefs: []
  type: TYPE_TB
- en: '| Drone | `/drone/{id}` |'
  prefs: []
  type: TYPE_TB
- en: '| Collection of pilots | `/pilots/` |'
  prefs: []
  type: TYPE_TB
- en: '| Pilot | `/pilot/{id}` |'
  prefs: []
  type: TYPE_TB
- en: '| Collection of competitions | `/competitions/` |'
  prefs: []
  type: TYPE_TB
- en: '| Competition | `/competition/{id}` |'
  prefs: []
  type: TYPE_TB
- en: Let's consider that `http://localhost:8000/` is the URL for the RESTful Web
    Service running on Django's development server. We have to compose and send an
    HTTP request with the following HTTP verb (`GET`) and request URL (`http://localhost:8000/competitions/`)
    to retrieve all the stored competitions in the collection.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE0]'
  prefs: []
  type: TYPE_PRE
- en: Our RESTful Web Service must be able to update a single field for an existing
    resource. In order to make this possible, we will implement the `PATCH` method.
    Remember that the `PUT` method is meant to replace an entire resource and the
    `PATCH` method is meant to apply a delta to an existing resource, that is, to
    update one or more fields for an existing resource.
  prefs: []
  type: TYPE_NORMAL
- en: We definitely want our RESTful Web Serice to support the `OPTIONS` method for
    all the resources and collections of resources. This way, we will provide a consistent
    web service.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the **ORM** (short for **Object-Relational Mapping**) included in
    Django. In addition, we will take advantage of many features and reusable elements
    included in the latest version of the Django REST framework to make it easy to
    build our web service without writing a huge amount of code.
  prefs: []
  type: TYPE_NORMAL
- en: In this case, we will work with a PostgreSQL database. However, in case you
    don't want to spend time installing PostgreSQL, you can skip the changes we make
    in the Django REST framework ORM configuration and continue working with the default
    SQLite database, as we did with our first RESTful Web Service.
  prefs: []
  type: TYPE_NORMAL
- en: Creating a new app with Django
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will create a new app with Django. We will follow the same steps we
    learned in [Chapter 1](dj-rst-websvc_ch11.html), *Installing the Required Software
    and Tools*, in the *Creating an app with Django* section. However, in order to
    avoid repeating many steps, we will use the same `restful01` project we had created
    in that chapter. Hence, we will just add a new app to an existing project.
  prefs: []
  type: TYPE_NORMAL
- en: Make sure you quit Django's development server. Remember that you just need
    to press *Ctrl* + *C* in the terminal or command-prompt window in which it is
    running. In case you weren't running Django's development server, make sure the
    virtual environment in which we have been working in the previous chapter is activated.
    Then, go to the `restful01` folder within the `01` folder (the root folder for
    our virtual environment). The following commands use the default paths to go to
    this folder. In case you have used a different path for your virtual environment,
    make sure you replace the base path with the appropriate one.
  prefs: []
  type: TYPE_NORMAL
- en: 'In Linux or macOS, enter the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE1]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer the Command Prompt, run the following command in the Windows
    command line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE2]'
  prefs: []
  type: TYPE_PRE
- en: 'If you prefer Windows PowerShell, run the following command in Windows PowerShell:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE3]'
  prefs: []
  type: TYPE_PRE
- en: 'Then, run the following command to create a new Django app named `drones` within
    the `restful01` Django project. The command won''t produce any output:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE4]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous command creates a new `restful01/drones` sub-folder, with the
    following files:'
  prefs: []
  type: TYPE_NORMAL
- en: '`views.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`tests.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`models.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`apps.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`admin.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`__init__.py`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In addition, the `restful01/drones` folder will have a `migrations` sub-folder
    with an `__init__.py` Python script. The structure is the same as the one we analyzed
    in [Chapter 1](dj-rst-websvc_ch11.html)*, Installing the Required Software and
    Tools*, in the *Understanding Django folders, files and configurations* section.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring a new web service
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We added a new Django app to our existing Django project. Use your favorite
    editor or IDE to check the Python code in the `apps.py` file within the `restful01/drones`
    folder (`restful01\drones` in Windows). The following lines show the code for
    this file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE5]'
  prefs: []
  type: TYPE_PRE
- en: The code declares the `DronesConfig` class as a subclass of the `django.apps.AppConfig`
    class that represents a Django application and its configuration. The `DronesConfig`
    class just defines the `name` class attribute and sets its value to `'drones'`.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we have to add `drones.apps.DronesConfig` as one of the installed apps
    in the `restful01/settings.py` file that configures settings for the `restful01`
    Django project. I built the previous string by concatenating many values as follows:
    app name + `.apps.` + class name, which is, `drones` + `.apps.` + `DronesConfig`.'
  prefs: []
  type: TYPE_NORMAL
- en: We already added the `rest_framework` app to make it possible for us to use
    the Django REST framework in the `restful01/settings.py` file. However, in case
    you decided to create a new Django project from scratch by following all the steps
    we learned in [Chapter 1](dj-rst-websvc_ch11.html), *Installing the Required Software
    and Tools*, make sure you don't forget to add the `rest_framework` app.
  prefs: []
  type: TYPE_NORMAL
- en: Open the `restful01/settings.py` file that declares module-level variables that
    define the configuration of Django for the `restful01` project. We will make some
    changes to this Django settings file. Locate the lines that assign a strings list
    to `INSTALLED_APPS` to declare the installed apps.
  prefs: []
  type: TYPE_NORMAL
- en: 'Remove the following line from the `INSTALLED_APPS` strings list. This way,
    Django won''t consider this app anymore:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE6]'
  prefs: []
  type: TYPE_PRE
- en: 'Add the following string to the `INSTALLED_APPS` strings list and save the
    changes to the `restful01/settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE7]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show the new code that declares the `INSTALLED_APPS` strings
    list with the added line highlighted and with comments to understand what each
    added string means. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE8]'
  prefs: []
  type: TYPE_PRE
- en: This way, we have added the `drones` application to our initial Django project
    named `restful01`.
  prefs: []
  type: TYPE_NORMAL
- en: Defining many-to-one relationships with models.ForeignKey
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will create the models that we will use to represent and persist the
    drone categories, drones, pilots, and competitions, and their relationships. Open
    the `drones/models.py` file and replace its contents with the following code.
    The lines that declare fields related to other models are highlighted in the code
    listing. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/drones/models.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE9]'
  prefs: []
  type: TYPE_PRE
- en: 'The code declares the following four models, specifically, four classes that
    are subclasses of the `django.db.models.Model` class:'
  prefs: []
  type: TYPE_NORMAL
- en: '`DroneCategory`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Drone`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Pilot`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`Competition`'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django automatically adds an auto-increment integer primary key column named
    `id` when it creates the database table related to each model. We specify the
    field types, maximum lengths, and defaults for many attributes.
  prefs: []
  type: TYPE_NORMAL
- en: Each class declares a `Meta` inner class that declares an ordering attribute.
    The `Meta` inner class declared within the `Competition` class specifies `'-distance_in_feet'`
    as the value of the `ordering` tuple, with a dash as a prefix of the field name
    to order by `distance_in_feet` in descending order, instead of the default ascending
    order.
  prefs: []
  type: TYPE_NORMAL
- en: The `DroneCategory`, `Drone`, and `Pilot` classes declare a `__str__` method
    that returns the contents of the `name` attribute that provides the name or title
    for each of these models. This way, whenever Django needs to provide a human readable
    representation for the model, it will call this method and return its result.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Drone` model declares the `drone_category` field with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE10]'
  prefs: []
  type: TYPE_PRE
- en: The previous line uses the `django.db.models.ForeignKey` class to provide a
    many-to-one relationship to the `DroneCategory` model. The `'drones'` value specified
    for the `related_name` argument creates a backwards relation from the `DroneCategory`
    model to the `Drone` model. This value indicates the name to use for the relation
    from the related `DroneCategory` object back to a Drone object.
  prefs: []
  type: TYPE_NORMAL
- en: This way, we will be able to easily access all the drones that belong to a specific
    drone category. Whenever we delete a drone category, we want all the drones that
    belong to this category to be deleted, too, and therefore, we specified the `models.CASCADE`
    value for the `on_delete` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Competition` model declares the `pilot` field with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE11]'
  prefs: []
  type: TYPE_PRE
- en: The previous line uses the `django.db.models.ForeignKey` class to provide a
    many-to-one relationship to the `Pilot` model. The `'competitions'` value specified
    for the `related_name` argument creates a backwards relation from the `Pilot`
    model to the `Competition` model. This value indicates the name to use for the
    relation from the related Pilot object back to a Competition object.
  prefs: []
  type: TYPE_NORMAL
- en: This way, we will be able to easily access all the competitions in which a specific
    pilot participated with his drone. Whenever we delete a pilot, we want all the
    competitions in which this pilot participated to be deleted, too, and therefore,
    we specified the `models.CASCADE` value for the `on_delete` argument.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `Competition` model declares the `drone` field with the following line:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE12]'
  prefs: []
  type: TYPE_PRE
- en: The previous line uses the `django.db.models.ForeignKey` class to provide a
    many-to-one relationship to the `Drone` model. In this case, we don't create a
    backwards relation because we don't need it. Thus, we don't specify a value for
    the `related_name` argument. Whenever we delete a drone, we want all the competitions
    in which the drone participated to be deleted too, and therefore, we specified
    the `models.CASCADE` value for the `on_delete` argument.
  prefs: []
  type: TYPE_NORMAL
- en: Installing PostgreSQL
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In order to work with this example, you have to download and install PostgreSQL,
    in case you aren''t already running it in your development computer or in a development
    server. PostgreSQL is available on multiple platforms and offers versions for
    Linux, macOS and Windows, among other operating systems. You can download and
    install this relational database management system from the Download section of
    its web page: [http://www.postgresql.org](http://www.postgresql.org).'
  prefs: []
  type: TYPE_NORMAL
- en: The next samples that work with a PostgreSQL database have been tested in PostgreSQL
    versions 9.6.x and PostgreSQL 10.x. Make sure you work with any of these versions.
  prefs: []
  type: TYPE_NORMAL
- en: 'There are interactive installers built by EnterpriseDB and BigSQL for macOS
    and Windows. In case you are working with macOS, Postgres.app provides a really
    easy way to install and use PostgreSQL on this operating system. You can read
    more about Postgres.app and download it from its web page: [http://postgresapp.com](http://postgresapp.com).'
  prefs: []
  type: TYPE_NORMAL
- en: After you finish the installation process, you have to make sure that the PostgreSQL
    `bin` folder is included in the PATH environmental variable. You should be able
    to execute the psql command-line utility from your current Linux or macOS terminal,
    the Windows command prompt, or Windows PowerShell.
  prefs: []
  type: TYPE_NORMAL
- en: In case the `bin` folder isn't included in the PATH, you will receive an error
    indicating that the `pg_config` file cannot be found when trying to install the
    psycopg2 Python package. In addition, you will have to use the full path to each
    of the PostgreSQL command-line tools that we will use in the next steps.
  prefs: []
  type: TYPE_NORMAL
- en: Running migrations that generate relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We must create the initial migration for the new models we recently coded. We
    just need to run the following Python scripts and we will also synchronize the
    database for the first time. As we learned from our previous RESTful Web Service
    sample, by default, Django uses an SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: In this new example, we will be working with a PostgreSQL database. However,
    in case you want to use an SQLite, you can skip all the next steps related to
    PostgreSQL, its configuration in Django, and jump to the migrations generation
    command. You will also have to use the SQLite utilities instead of the PostgreSQL
    tools to analyze the database.
  prefs: []
  type: TYPE_NORMAL
- en: We will use the PostgreSQL command-line tools to create a new database named
    `toys`. In case you already have a PostgreSQL database with this name, make sure
    that you use another name in all the commands and configurations. You can perform
    the same tasks with any PostgreSQL GUI tool or any database administration tool
    that supports PostgreSQL.
  prefs: []
  type: TYPE_NORMAL
- en: 'In case you are developing in Linux, it is necessary to run the commands as
    the `postgres` user. Run the following command in Windows or macOS to create a
    new database named `drones`. Notice that the command won''t produce any output
    and that you must have the `bin` folder for PostgreSQL command-line tools in your
    path:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE13]'
  prefs: []
  type: TYPE_PRE
- en: 'In Linux, run the following command to use the `postgres` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE14]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will use the psql command-line tool to run some SQL statements to create
    a specific user that we will use in Django and assign the necessary roles for
    it. In Windows or macOS, run the following command to launch the psql tool:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE15]'
  prefs: []
  type: TYPE_PRE
- en: 'In macOS, you might need to run the following command to launch psql with the
    `postgres` user in case the previous command doesn''t work, as it will depend
    on the way in which you installed and configured PostgreSQL:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE16]'
  prefs: []
  type: TYPE_PRE
- en: 'In Linux, run the following command to start psql with the `postgres` user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE17]'
  prefs: []
  type: TYPE_PRE
- en: Then, run the following SQL statements and finally enter `\q` to exit the psql
    command-line tool.
  prefs: []
  type: TYPE_NORMAL
- en: Replace the username with your desired username to use in the new database,
    and password with your chosen password. We will specify the selected username
    and password in the Django settings for our web service.
  prefs: []
  type: TYPE_NORMAL
- en: 'You don''t need to run the steps in case you are already working with a specific
    user in PostgreSQL and you have already granted privileges to the database for
    the user:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE18]'
  prefs: []
  type: TYPE_PRE
- en: 'You will see the following output for the previous commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE19]'
  prefs: []
  type: TYPE_PRE
- en: 'The default SQLite database engine and the database file name are specified
    in the `restful01/settings.py` Python file. The following lines show the default
    lines that configure the database:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE20]'
  prefs: []
  type: TYPE_PRE
- en: 'We will work with PostgreSQL instead of SQLite for this example, and therefore,
    we must replace the declaration of the `DATABASES` dictionary with the following
    lines. The nested dictionary maps the database named `default` with the `django.db.backends.postgresql`
    database engine, the desired database name and its settings. In this case, we
    will create a database named `drones`. Make sure you specify the desired database
    name in the value for the `''NAME''` key and that you configure the user, password,
    host, and port based on your PostgreSQL configuration. In case you followed the
    previously explained steps to configure the PostgreSQL database, use the settings
    specified in these steps. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/settings.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE21]'
  prefs: []
  type: TYPE_PRE
- en: In case you decided to continue working with SQLite, you don't need to make
    the previous changes and you can continue using the default configuration.
  prefs: []
  type: TYPE_NORMAL
- en: 'We don''t want the migrations process to take into account our models related
    to toys from the previous web service, and therefore, we will make changes to
    the code in the `urls.py` file in the `restful01` folder, specifically, the `restful01/urls.py`
    file. The file defines the root URL configurations, and therefore, we must remove
    the URL patterns declared in the `toys/urls.py` file. The following lines show
    the new code for the `restful01/urls.py` file. The code file for the sample is
    included in the `hillar_django_restful_06_01` folder, in the `restful01/urls.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE22]'
  prefs: []
  type: TYPE_PRE
- en: 'In order to use PostgreSQL, it is necessary to install a Python-PostgreSQL
    Database Adapter that Django will use to interact with a PostgreSQL database:
    the Psycopg2 package (psycopg2).'
  prefs: []
  type: TYPE_NORMAL
- en: 'In macOS, we have to make sure that the PostgreSQL `bin` folder is included
    in the `PATH` environmental variable. For example, in case the path to the `bin`
    folder is `/Applications/Postgres.app/Contents/Versions/latest/bin`, we must execute
    the following command to add this folder to the `PATH` environmental variable:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE23]'
  prefs: []
  type: TYPE_PRE
- en: 'Once we make sure that the PostgreSQL `bin` folder is included in the `PATH`
    environmental variable, we just need to run the following command to install this
    package. Make sure the virtual environment is activated before running the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE24]'
  prefs: []
  type: TYPE_PRE
- en: 'The last lines for the output will indicate that the psycopg2 package has been
    successfully installed:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE25]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, run the following Python script to generate the migrations that will allow
    us to synchronize the PostgreSQL database for the first time. We will run the
    migrations for the `drones` application:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE26]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show the output generated after running the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE27]'
  prefs: []
  type: TYPE_PRE
- en: 'The output indicates that the `restful01/drones/migrations/0001_initial.py`
    file includes the code to create the `Competition`, `Drone`, `DroneCategory`,
    and `Pilot` models. The following lines show the code for this file that was automatically
    generated by Django. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/drones/migrations/0001_initial.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE28]'
  prefs: []
  type: TYPE_PRE
- en: The code defines a subclass of the `django.db.migrations.Migration` class named
    `Migration` that defines an `operations` list with many calls to `migrations.CreateModel`.
    Each `migrations.CreateModel` call will create the table for each of the related
    models.
  prefs: []
  type: TYPE_NORMAL
- en: 'Notice that Django has automatically added an `id` field for each of the models.
    The `operations` are executed in the same order in which they are displayed in
    the list. The code creates `Competition`, `Drone`, `DroneCategory`, `Pilot` and
    finally adds the following fields with foreign keys:'
  prefs: []
  type: TYPE_NORMAL
- en: The `drone_category` field to the `Drone` model with the foreign key to the
    `DroneCategory` model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `drone` field to the `Competition` model with the foreign key to the `Drone`
    model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `pilot` field to the `Competition` model with the foreign key to the `Pilot`
    model
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Now, run the following python script to apply all the generated migrations:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE29]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show the output generated after running the previous command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE30]'
  prefs: []
  type: TYPE_PRE
- en: Analyzing the database
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: After we have run the previous command, we can use the PostgreSQL command-line
    tools or any other application that allows us to easily check the contents of
    a PostreSQL database, to check the tables that Django generated. **If you decided
    to continue working with SQLite, we already learned how to check the tables in
    the previous chapters.**
  prefs: []
  type: TYPE_NORMAL
- en: 'Run the following command to list the generated tables:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE31]'
  prefs: []
  type: TYPE_PRE
- en: 'The following lines show the output with all the generated table names:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE32]'
  prefs: []
  type: TYPE_PRE
- en: 'In our previous example, Django used the `toys_` prefix for the table related
    to the `toys` application we had created. In this case, the application name is
    `drones`, and therefore, Django uses the `drones_` prefix for the following four
    tables that are related to the application:'
  prefs: []
  type: TYPE_NORMAL
- en: '`drones_drone`: This table persists the `Drone` model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drones_dronecategory`: This table persists the `DroneCategory` model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drones_pilot`: This table persists the `Pilot` model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`drones_competition`: This table persists the `Competition` model'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Django's integrated ORM generated these tables and the foreign keys based on
    the information included in our models and the code generated during the migrations
    process.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following commands will allow you to check the contents of the four tables
    after we compose and send different HTTP requests to the RESTful Web Service,
    and these calls end up making CRUD operations to the four tables. The commands
    assume that you are running PostgreSQL on the same computer in which you are running
    the command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE33]'
  prefs: []
  type: TYPE_PRE
- en: Instead of working with the PostgreSQL command-line utility, you can use a GUI
    tool to check the contents of the PostgreSQL database. You can use also the database
    tools included in your favorite IDE to check the contents for the SQLite database.
  prefs: []
  type: TYPE_NORMAL
- en: As happened in our previous example, Django generated additional tables that
    it requires to support the web framework and the authentication features that
    we will use later.
  prefs: []
  type: TYPE_NORMAL
- en: Configuring serialization and deserialization with relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The new RESTful Web Service must be able to serialize the `DroneCategory`, `Drone`,
    `Pilot`, and `Competition` instances into JSON representations and vice versa.
    In this case, we must pay special attention to the relationships between the different
    models when we create the serializer classes to manage serialization to JSON and
    deserialization from JSON.
  prefs: []
  type: TYPE_NORMAL
- en: In our last version of the previous RESTful Web Service, we created a subclass
    of the `rest_framework.serializers.ModelSerializer` class to make it easier to
    generate a serializer and reduce boilerplate code. In this case, we will also
    declare one class that inherits from `ModelSerializer`. The other three classes
    will inherit from the `rest_framework.serializers.HyperlinkedModelSerializer`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: The `HyperlinkedModelSerializer` is a type of `ModelSerializer` that uses hyperlinked
    relationships instead of primary key relationships, and therefore, it represents
    the relationships to other model instances with hyperlinks instead of primary
    key values. In addition, the `HyperlinkedModelSerializer` generates a field named
    `url` with the URL for the resource as its value. As happens with `ModelSerializer`,
    the `HyperlinkedModelSerializer` class provides default implementations for the
    `create` and `update` methods.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, go to the `restful01/drones` folder and create a new Python code file
    named `serializers.py`. The following lines show the code that declares the new
    `DroneCategorySerializer` class. Notice that we will add more classes to this
    file later. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/serializers.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE34]'
  prefs: []
  type: TYPE_PRE
- en: The `DroneCategorySerializer` class is a subclass of the `HyperlinkedModelSerializer`
    class. The `DroneCategorySerializer` class declares a `drones` attribute that
    holds an instance of `serializers.HyperlinkedRelatedField` with `many` and `read_only`
    equal to `True`. This way, the code defines a one-to-many relationship that is
    read-only.
  prefs: []
  type: TYPE_NORMAL
- en: The code uses the `drones` name that we specified as the `related_name` string
    value when we created the `drone_category` field as a `models.ForeignKey` instance
    in the `Drone` model. This way, the `drones` field will provide us with an array
    of hyperlinks to each drone that belongs to the drone category.
  prefs: []
  type: TYPE_NORMAL
- en: The `view_name` value is `'drone-detail'` to indicate the browsable API feature
    to use the drone detail view to render the hyperlink when the user clicks or taps
    on it. This way, we make it possible for the browsable API to allow us to browse
    between related models.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `DroneCategorySerializer` class declares a `Meta` inner class that declares
    the following two attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`model`: This attribute specifies the model related to the serializer, that
    is, the `DroneCategory` class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields`: This attribute specifies a tuple of string whose values indicate
    the field names that we want to include in the serialization from the model related
    to the serializer, that is, the `DroneCategory` class. We want to include both
    the primary key and the URL, and therefore, the code specified both `''pk''` and
    `''url''` as members of the tuple. In addition, we want to include the name and
    the field that provides hyperlinks to each drone that belongs to the drone category.
    Thus, the code also specifies `''name''` and `''drones''` as members of the tuple.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: There is no need to override either the `create` or `update` methods because
    the generic behavior will be enough in this case. The `HyperlinkedModelSerializer`
    superclass provides implementations for both methods.
  prefs: []
  type: TYPE_NORMAL
- en: Defining hyperlinks with serializers.HyperlinkedModelSerializer
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'Now, add the following code to the `serializers.py` file to declare the `DroneSerializer`
    class. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/serializers.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE35]'
  prefs: []
  type: TYPE_PRE
- en: The `DroneSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    class. The `DroneSerializer` class declares a `drone_category` attribute that
    holds an instance of `serializers.SlugRelatedField` with its `queryset` argument
    set to `DroneCategory.objects.all()` and its `slug_field` argument set to `'name'`.
  prefs: []
  type: TYPE_NORMAL
- en: A `SlugRelatedField` is a read-write field that represents the target of the
    relationship by a unique slug attribute, that is, the description. In the Drone
    model, we created the `drone_category` field as a `models.ForeignKey` instance.
  prefs: []
  type: TYPE_NORMAL
- en: We want to display the drone category name as the description (slug field) for
    the related `DroneCategory`, and therefore, we specified `'name'` as the value
    for the `slug_field` argument. The browsable API has to display the possible options
    for the related drone category in a dropdown field in a form, and Django will
    use the expression specified in the `queryset` argument to retrieve all the possible
    instances and display their specified slug field.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `DroneSerializer` class declares a `Meta` inner class that declares two
    attributes:'
  prefs: []
  type: TYPE_NORMAL
- en: '`model`: The `Drone` class.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`fields`. In this case, we don''t want to include the primary key, and therefore,
    the tuple doesn''t include the `''pk''` string. The `drone_category` field will
    render the `name` field for the related `DroneCategory`.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Now, add the following code to the `serializers.py` file to declare the `CompetitionSerializer`
    class. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/serializers.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE36]'
  prefs: []
  type: TYPE_PRE
- en: The `CompetitionSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    class. We will use the `CompetitionSerializer` class to serialize `Competition`
    instances related to a `Pilot`, that is, to display all the competitions in which
    a specific `Pilot` has participated when we serialize a `Pilot`. We want to display
    all the details for the related `Drone`, but we don't include the related `Pilot`
    because the `Pilot` will use this `CompetitionSerializer` serializer.
  prefs: []
  type: TYPE_NORMAL
- en: The `CompetitionSerializer` class declares a `drone` attribute that holds an
    instance of the previously coded `DroneSerializer` class. We created the `drone`
    field as a `models.ForeignKey` instance in the `Competition` model and we want
    to serialize the same data for the drone that we coded in the `DroneSerializer`
    class.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `CompetitionSerializer` class declares a `Meta` inner class that declares
    two attributes: `model` and `fields`. The `model` attribute specifies the model
    related to the serializer, that is, the `Competition` class. As previously explained,
    we don''t include the `''Pilot''` field name in the `fields` tuple of string to
    avoid serializing the Pilot again. We will use a `PilotSerializer` as a master
    and the `CompetitionSerializer` as the detail.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, add the following code to the `serializers.py` file to declare the `PilotSerializer`
    class. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/serializers.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE37]'
  prefs: []
  type: TYPE_PRE
- en: The `PilotSerializer` class is a subclass of the `HyperlinkedModelSerializer`
    class. We will use the `PilotSerializer` class to serialize `Pilot` instances
    and we will use the perviously coded `CompetitionSerializer` class to serialize
    all the `Competition` instances related to the `Pilot`.
  prefs: []
  type: TYPE_NORMAL
- en: The `PilotSerializer` class declares a `competitions` attribute that holds and
    instance of the previously coded `CompetitionSerializer` class. The `many` argument
    is set to `True` because it is a one-to-many relationship (one `Pilot` has many
    related `Competition` instances).
  prefs: []
  type: TYPE_NORMAL
- en: We use the `competitions` name that we specified as the `related_name` string
    value when we created the `Pilot` field as a `models.ForeignKey` instance in the
    `Competition` model. This way, the `competitions` field will render each `Competition`
    that belongs to the `Pilot` by using the previously declared `CompetitionSerializer`.
  prefs: []
  type: TYPE_NORMAL
- en: The `Pilot` model declared `gender` as an instance of `models.CharField` with
    the `choices` attribute set to the `Pilot.GENDER_CHOICES` string tuple. The `PilotSerializer`
    class declares a `gender` attribute that holds an instance of `serializers.ChoiceField`
    with the `choices` argument set to the `Pilot.GENDER_CHOICES` string tuple.
  prefs: []
  type: TYPE_NORMAL
- en: In addition, the class declares a `gender_description` attribute with `read_only`
    set to `True` and the `source` argument set to `'get_gender_display'`. The `source`
    string is built with the `get_` prefix followed by the field name, `gender`, and
    the `_display` suffix. This way, the read-only `gender_description` attribute
    will render the description for the gender choices instead of the single char
    stored values.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `PilotSerializer` class declares a `Meta` inner class that declares two
    attributes: `model` and `fields`. The `model` attribute specifies the model related
    to the serializer, that is, the `Pilot` class. We will use the `PilotSerializer`
    class as a master and the `CompetitionSerializer` class as the detail. As happened
    with the previous serializers, the fields attribute specifies a tuple of string
    whose values indicate the field names that we want to include in the serialization
    from the related model.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, add the following code to the `serializers.py` file to declare the
    `PilotCompetitionSerializer` class. The code file for the sample is included in
    the `hillar_django_restful_06_01` folder in the `restful01/drones/serializers.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE38]'
  prefs: []
  type: TYPE_PRE
- en: The `PilotCompetitionSerializer` class is a subclass of the `ModelSerializer`
    class. We will use the `CompetitionSerializer` class to serialize `Competition`
    instances. Previously, we created the `CompetitionSerializer` class to serialize
    `Competition` instances as the detail of a `Pilot`. We will use the new `PilotCompetitionSerializer`
    class whenever we want to display the related `Pilot` name and the related `Drone`
    name.
  prefs: []
  type: TYPE_NORMAL
- en: In the other serializer class, the `CompetitionSerializer` class, we didn't
    include any information related to the `Pilot` and we included all the details
    for the drone. This new class is an example of the flexibility that we have when
    we declare more than one serializer for the same model.
  prefs: []
  type: TYPE_NORMAL
- en: The `PilotCompetitionSerializer` class declares a `pilot` attribute that holds
    an instance of `serializers.SlugRelatedField` with its `queryset` argument set
    to `Pilot.objects.all()` and its `slug_field` argument set to `'name'`. We created
    the `pilot` field as a `models.ForeignKey` instance in the `Competition` model
    and we want to display the Pilot's name as the description (slug field) for the
    related `Pilot`. Thus, we specified `'name'` as the `slug_field`. When the browsable
    API has to display the possible options for the related pilot in a dropdown in
    a form, Django will use the expression specified in the `queryset` argument to
    retrieve all the possible pilots and display their specified slug field.
  prefs: []
  type: TYPE_NORMAL
- en: The `PilotCompetitionSerializer` class declares a `drone` attribute that holds
    an instance of `serializers.SlugRelatedField` with its `queryset` argument set
    to `Drone.objects.all()` and its `slug_field` argument set to `'name'`. We created
    the `drone` field as a `models.ForeignKey` instance in the `Competition` model
    and we want to display the drone's name as the description (slug field) for the
    related `Drone`.
  prefs: []
  type: TYPE_NORMAL
- en: 'We have coded all the necessary serializers for our new RESTful Web Service.
    The following table summarizes the serializers we have. Notice that we have two
    different serializers for the `Competition` model:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Serializer class name** | **Superclass** | **Related model** |'
  prefs: []
  type: TYPE_TB
- en: '| `DroneCategorySerializer` | `HyperlinkedModelSerializer` | `DroneCategory`
    |'
  prefs: []
  type: TYPE_TB
- en: '| `DroneSerializer` | `HyperlinkedModelSerializer` | `Drone` |'
  prefs: []
  type: TYPE_TB
- en: '| `CompetitionSerializer` | `HyperlinkedModelSerializer` | `Competition` |'
  prefs: []
  type: TYPE_TB
- en: '| `PilotSerializer` | `HyperlinkedModelSerializer` | `Pilot` |'
  prefs: []
  type: TYPE_TB
- en: '| `PilotCompetitionSerializer` | `ModelSerializer` | `Competition` |'
  prefs: []
  type: TYPE_TB
- en: Working with class-based views
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: We will write our RESTful Web Service by coding class-based views. We will take
    advantage of a set of generic views that we can use as our base classes for our
    class-based views to reduce the required code to the minimum and reuse the behavior
    that has been generalized in the Django REST framework.
  prefs: []
  type: TYPE_NORMAL
- en: 'We will create subclasses of the two following generic class views declared
    in the `rest_framework.generics` module:'
  prefs: []
  type: TYPE_NORMAL
- en: '`ListCreateAPIView`: This class view implements the `get` method that retrieves
    a listing of a queryset and the `post` method that creates a model instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`RetrieveUpdateDestroyAPIView`: This class view implements the `get`, `delete`,
    `put`, and `patch` methods to retrieve, delete, completely update, or partially
    update a model instance'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Those two generic views are composed by combining reusable bits of behavior
    in the Django REST framework implemented as mixin classes declared in the `rest_framework.mixins`
    module. We can create a class that uses multiple inheritance and combine the features
    provided by many of these mixin classes.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following line shows the declaration of the `ListCreateAPIView` class as
    the composition of `ListModelMixin`, `CreateModelMixin`, and `rest_framework.generics.GenericAPIView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE39]'
  prefs: []
  type: TYPE_PRE
- en: 'The following line shows the declaration of the `RetrieveUpdateDestroyAPIView`
    class as the composition of `RetrieveModelMixin`, `UpdateModelMixin`, `DestroyModelMixin`,
    and `rest_framework.generics.GenericAPIView`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE40]'
  prefs: []
  type: TYPE_PRE
- en: Taking advantage of generic classes and viewsets
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will create many Django class-based views that will use the previously
    explained generic classes combined with the serializer classes to return JSON
    representations for each HTTP request that our RESTful Web Service will handle.
  prefs: []
  type: TYPE_NORMAL
- en: We will just have to specify a queryset that retrieves all the objects in the
    `queryset` attribute and the serializer class in the `serializer_class` attribute
    for each subclass that we declare. The behavior coded in the generic classes will
    do the rest for us. In addition, we will declare a `name` attribute with the string
    name we will use to identify the view.
  prefs: []
  type: TYPE_NORMAL
- en: 'Go to the `restful01/drones` folder and open the `views.py` file. Replace the
    code in this file with the following code that declares the required imports and
    the class-based views for our web service. We will add more classes to this file
    later. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/views.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE41]'
  prefs: []
  type: TYPE_PRE
- en: Generalizing and mixing behavior
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'The previous classes took advantage of generalized behavior. Each of the superclasses
    for the classes mixed different generalized behaviors. The following table summarizes
    the HTTP verbs that each class-based view is going to process and the scope to
    which it applies. Notice that we can execute the `OPTIONS` HTTP verb on any of
    the scopes:'
  prefs: []
  type: TYPE_NORMAL
- en: '| **Scope** | **Class-based view name** | **HTTP verbs that it will process**
    |'
  prefs: []
  type: TYPE_TB
- en: '| Collection of drone categories: `/drone-categories/` | `DroneCategoryList`
    | GET, POST, and OPTIONS |'
  prefs: []
  type: TYPE_TB
- en: '| Drone category: /drone-`category/{id}` | `DroneCategoryDetail` | GET, PUT,
    PATCH, DELETE, and OPTIONS |'
  prefs: []
  type: TYPE_TB
- en: '| Collection of drones: `/drones/` | `DroneList` | GET, POST, and OPTIONS |'
  prefs: []
  type: TYPE_TB
- en: '| Drone: `/drone/{id`} | `DroneDetail` | GET, PUT, PATCH, DELETE, and OPTIONS
    |'
  prefs: []
  type: TYPE_TB
- en: '| Collection of Pilots: `/pilots/` | `PilotList` | GET, POST and OPTIONS |'
  prefs: []
  type: TYPE_TB
- en: '| Pilot: `/Pilot/{id}` | `PilotDetail` | GET, PUT, PATCH, DELETE and OPTIONS
    |'
  prefs: []
  type: TYPE_TB
- en: '| Collection of competitions: `/competitions/` | `CompetitionList` | GET, POST
    and OPTIONS |'
  prefs: []
  type: TYPE_TB
- en: '| Score: `/competition/{id}` | `CompetitionDetail` | GET, PUT, PATCH, DELETE
    and OPTIONS |'
  prefs: []
  type: TYPE_TB
- en: Working with routing and endpoints
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'We want to create an endpoint for the root of our web service to make it easy
    to browse the resource collections and resources provided by our web service with
    the browsable API feature and understand how everything works. Add the following
    code to the `views.py` file in the `restful01/drones` folder to declare the `ApiRoot`
    class as a subclass of the `generics.GenericAPIView` class. The code file for
    the sample is included in the `hillar_django_restful_06_01` folder in the `restful01/drones/views.py`
    file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE42]'
  prefs: []
  type: TYPE_PRE
- en: The `ApiRoot` class is a subclass of the `rest_framework.generics.GenericAPIView`
    class and declares the `get` method. The `GenericAPIView` class is the base class
    for all the other generic views we have previousy analyzed.
  prefs: []
  type: TYPE_NORMAL
- en: The `ApiRoot` class defines the `get` method that returns a `Response` object
    with key/value pairs of strings that provide a descriptive name for the view and
    its URL, generated with the `rest_framework.reverse.reverse` function. This URL
    resolver function returns a fully qualified URL for the view.
  prefs: []
  type: TYPE_NORMAL
- en: Go to the `restful01/drones` folder and create a new file named `urls.py`. Write
    the following code in this new file. The following lines show the code for this
    file that defines the URL patterns that specifies the regular expressions that
    have to be matched in the request to run a specific method for a class-based view
    defined in the `views.py` file.
  prefs: []
  type: TYPE_NORMAL
- en: 'In the previous example, we specified a function that represented a view. In
    this case, we call the `as_view` method for each appropriate class-based view.
    The code file for the sample is included in the `hillar_django_restful_06_01`
    folder in the `restful01/drones/urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE43]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we have to replace the code in the `urls.py` file in the `restful01` folder,
    specifically, the `restful01/urls.py` file. The file defines the root URL configurations,
    and therefore, we must include the URL patterns declared in the previously coded
    `drones/urls.py` file. The following lines show the new code for the `restful01/urls.py`
    file. The code file for the sample is included in the `hillar_django_restful_06_01`
    folder, in the `restful01/urls.py` file:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE44]'
  prefs: []
  type: TYPE_PRE
- en: Making requests that interact with resources that have relationships
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Now, we will use the HTTP command or its curl equivalents to compose and send
    HTTP requests to the recently coded RESTful Web Service that allows us to work
    with drone categories, drones, pilots, and competitions. We will use JSON for
    the requests that require additional data. Remember that you can perform the same
    tasks with your favorite GUI- based tool or with the browsable API.
  prefs: []
  type: TYPE_NORMAL
- en: Launch Django's development server to compose and send HTTP requests to our
    new unsecure Web service. We will definitely add security later. In case you don't
    remember how to start Django's development server, check the instructions in [Chapter
    3](dj-rst-websvc_ch13.html), *Creating API Views*, in the *Launching Django's
    development server* section.
  prefs: []
  type: TYPE_NORMAL
- en: 'First, we will compose and send an HTTP `POST` request to create a new drone
    category:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE45]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent curl command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE46]'
  prefs: []
  type: TYPE_PRE
- en: The previous command will compose and send a `POST` HTTP request with the specified
    JSON key/value pair. The request specifies `/drone-categories/`, and therefore,
    it will match the `'^drone-categories/$'` regular expression and run the `post`
    method for the `views.DroneCategoryList` class based view. Remember that the method
    is defined in the `ListCreateAPIView` superclass and it ends up calling the `create`
    method defined in `mixins.CreateModelMixin`.
  prefs: []
  type: TYPE_NORMAL
- en: 'If the new `DroneCategory` instance was successfully persisted in the database,
    the call to the method will return an `HTTP 201 Created` status code and the recently
    persisted `DroneCategory` serialized to JSON in the response body. The following
    line shows a sample response for the HTTP request with the new `DroneCategory`
    object in the JSON response. Notice that the response body includes both the primary
    key, `pk`, and the URL, `url`, for the created category. The `drones` array is
    empty because there aren''t drones related to the recently created drone category
    yet. The response doesn''t include the header to focus on the body:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE47]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will compose and send HTTP requests to create two drones that belong
    to the drone category we recently created: `Quadcopter`. We specify the `drone_category`
    value with the name of the desired drone category. The database table that persists
    the `Drone` model (the `drones_drone` table) will save the value of the primary
    key of the related `DroneCategory` whose name value matches the one we provide:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE48]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the equivalent curl commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE49]'
  prefs: []
  type: TYPE_PRE
- en: The previous commands will compose and send two `POST` HTTP requests with the
    specified JSON key/value pairs. The request specifies `/toys/`, and therefore,
    it will match the `'^toys/$'` regular expression and run the `post` method for
    the `views.DroneList` class based view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show sample responses for the two HTTP requests with the
    new `Drone` objects in the JSON responses. Notice that the response includes only
    the URL, `url`, for the created drones and doesn''t include the primary key. The
    value for `drone_category` is the `name` for the related `DroneCategory`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE50]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run the commands explained in the *Analyzing the database* section to
    check the rows that were inserted in the tables that Django created in the PostgreSQL
    database to persist the models. The `drone_category_id` column for the `drones_drone`
    table saves the value of the primary key of the related row in the `drones_drone_category`
    table. The `DroneSerializer` class uses the `SlugRelatedField` to display the
    `name` value for the related `DroneCategory`. The following screenshot uses the
    psql command-line utility to query the contents for the `drones_drone_category`
    and the `drones_drone` table in a PostgreSQL database after running the HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/2a5cb57b-0975-4e63-a8a5-e42b7ad348a4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will compose and send an HTTP request to retrieve the drone category
    that contains the two drones we created. Don''t forget to replace `1` with the
    primary key value of the drone category whose name is equal to `''Quadcopter''`
    in your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE51]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent curl command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE52]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8000/drone-categories/1`. The request has a number after `/drone-categories/`,
    and therefore, it will match the `''^drone-categories/(?P<pk>[0-9]+)$''` regular
    expression and run the `get` method for the `views.DroneCategoryDetail` class-based
    view.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that the method is defined in the `RetrieveUpdateDestroyAPIView` superclass
    and it ends up calling the `retrieve` method defined in `mixins.RetrieveModelMixin`.
    The following lines show a sample response for the HTTP request, with the `DroneCategory`
    object and the hyperlinks of the related drones in the JSON response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE53]'
  prefs: []
  type: TYPE_PRE
- en: The `DroneCategorySerializer` class defined the `drones` attribute as a `HyperlinkedRelatedField`,
    and therefore, the serializer renders the URL for each related `Drone` instance
    in the value for the `drones` array. Later, we will display the results in a web
    browser through the browsable API and we will be able to click or tap on the hyperlink
    to see the details for each drone.
  prefs: []
  type: TYPE_NORMAL
- en: 'Now, we will compose and send an HTTP `POST` request to create a drone related
    to a drone category name that doesn''t exist: `''Octocopter''`:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE54]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent `curl` command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE55]'
  prefs: []
  type: TYPE_PRE
- en: 'Django won''t be able to retrieve a `DroneCategory` instance whose `name` is
    equal to the specified value: `Octocopter`. Hence, as a result of the previous
    request, we will receive a `400 Bad Request` status code in the response header
    and a message related to the value specified for the `drone_category` key in the
    JSON body. The following lines show a sample response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE56]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will compose and send HTTP requests to create two pilots:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE57]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the equivalent curl commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE58]'
  prefs: []
  type: TYPE_PRE
- en: The previous commands will compose and send two HTTP `POST` requests with the
    specified JSON key/value pairs. The request specifies `/pilots/`, and therefore,
    it will match the `'^Pilots/$'` regular expression and run the `post` method for
    the `views.PilotList` class-based view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show sample responses for the two HTTP requests with the
    new `Pilot` objects in the JSON responses. Notice that the response includes only
    the url, `url`, for the created pilots and doesn''t include the primary key. The
    value for `gender_description` is the choice description for the `gender` char.
    The `competitions` array is empty because there aren''t competitions related to
    each new `Pilot` yet. The responses don''t include the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE59]'
  prefs: []
  type: TYPE_PRE
- en: 'Now, we will compose and send many HTTP `POST` requests to create three competitions:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE60]'
  prefs: []
  type: TYPE_PRE
- en: 'The following are the equivalent curl commands:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE61]'
  prefs: []
  type: TYPE_PRE
- en: The previous commands will compose and send three HTTP `POST` requests with
    the specified JSON key/value pairs. The request specifies `/competitions/`, and
    therefore, it will match the `'^competitions/$'` regular expression and run the
    `post` method for the `views.CompetitionList` class based view.
  prefs: []
  type: TYPE_NORMAL
- en: 'The following lines show sample responses for the three HTTP requests with
    the new `Competition` objects in the JSON responses. Django REST framework uses
    the `PilotCompetitionSerializer` class to generate the JSON response. Hence, the
    value for `drone` is the name for the related `Drone` instance and the value for
    `Pilot` is the name for the related `Pilot` instance. The `PilotCompetitionSerializer`
    class used `SlugRelatedField` for both fields, and therefore, we can specify the
    names as the values for both the `drone` and `pilot` keys. The responses don''t
    include the headers:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE62]'
  prefs: []
  type: TYPE_PRE
- en: 'We can run the commands explained in the *Analyzing the database* section to
    check the rows that were inserted in the tables that Django created in the PostgreSQL
    database to persist the models. The `drone_id` column for the `drones_competition`
    table saves the value of the primary key of the related row in the `drones_drone`
    table. In addition, the `pilot_id` column for the `drones_competition` table saves
    the value of the primary key of the related row in the `drones_pilot` table. The
    following screenshot uses the `psql` command-line utility to query the contents
    for the `drones_drone_category`, `drones_drone`, `drones_pilot`, and `drones_competition`
    tables in a PostgreSQL database after running the HTTP requests:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](img/6506be8a-b1f8-4cad-9293-0cf7393115da.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Now, we will compose and send an HTTP `GET` request to retrieve a specific
    pilot that participated in two competitions, that is, the pilot resource whose
    id or primary key is equal to `1`. Don''t forget to replace `1` with the primary
    key value of the Pilot whose name is equal to `''Penelope Pitstop''` in your configuration:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE63]'
  prefs: []
  type: TYPE_PRE
- en: 'The following is the equivalent curl command:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE64]'
  prefs: []
  type: TYPE_PRE
- en: 'The previous commands will compose and send the following HTTP request: `GET
    http://localhost:8000/Pilots/1`. The request has a number after `/pilots/`, and
    therefore, it will match the `''^Pilots/(?P<pk>[0-9]+)$''` regular expression
    and run the `get` method for the `views.PilotDetail` class-based view.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Remember that the `get` method is defined in the `RetrieveUpdateDestroyAPIView`
    superclass and it ends up calling the `retrieve` method defined in `mixins.RetrieveModelMixin`.
    The following lines show a sample response for the HTTP request, with the `Pilot`
    object, the related `Competition` objects and the `Drone` object related to each
    `Competition` object in the JSON response:'
  prefs: []
  type: TYPE_NORMAL
- en: '[PRE65]'
  prefs: []
  type: TYPE_PRE
- en: The `PilotSerializer` class defined the `competitions` attribute as a `CompetitionSerializer`
    instance with the `many` argument equal to `True`. Hence, this serializer renders
    each `Competition` related to the `Pilot`. The `CompetitionSerializer` class defined
    the `drone` attribute as a `DroneSerializer`, and therefore, this serializer renders
    each drone related to the competition.
  prefs: []
  type: TYPE_NORMAL
- en: Later, we will render the results in a web browser through the browsable API
    and we will be able to click or tap on the hyperlink of each of the related resources.
    However, in this case, we also see all their details without having to follow
    the hyperlink in the JSON response body.
  prefs: []
  type: TYPE_NORMAL
- en: Test your knowledge
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Let's see whether you can answer the following questions correctly.
  prefs: []
  type: TYPE_NORMAL
- en: 'The `related_name` argument for the `django.db.models.ForeignKey` class initializer
    specifies:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The name to use for the relation from the related object back to this object
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The related model class name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The related model primary key attribute name
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'If we use the following line to declare the `pilot` field in the `Competition`
    model: `pilot = models.ForeignKey(Pilot, related_name=''competitions'', on_delete=models.CASCADE)`.
    What will Django''s ORM do whenever we delete a specific Pilot?'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: All the related competitions in which this `Pilot` participated will remain
    without changes in the database
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the related competitions in which this `Pilot` participated will be deleted
    too
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: All the related pilots that are related to the Competition will be deleted too
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'The `rest_framework.serializers.HyperlinkedModelSerializer` class is a type
    of `ModelSerializer` that represents the relationships to other model instances
    with:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Primary key values
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Foreign key values
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: Hyperlinks
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following attributes defined in the Meta inner class for a class
    that inherits from `ModelSerializer` specifies the model related to the serializer
    that is being declared:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: related-model
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: model
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: main-model
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Which of the following attributes defined in the Meta inner class for a class
    that inherits from ModelSerializer specifies the tuple of string whose values
    indicate the field names that we want to include in the serialization from the
    model related to the serializer:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: included-fields
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: fields
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: serialized-fields
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The rights answers are included in the [Appendix](https://cdp.packtpub.com/django_restful_web_services__/wp-admin/post.php?post=44&action=edit#post_454), *Solutions*.
  prefs: []
  type: TYPE_NORMAL
- en: Summary
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we defined the requirements for a complex RESTful Web Service
    in which we needed to work with drone categories, drones, pilots, and competitions.
    We created a new app with Django and configured the new web service.
  prefs: []
  type: TYPE_NORMAL
- en: We defined many-to-one relationships between the models with `models.ForeignKey`.
    We configured Django to work with a PostgreSQL database. We executed migrations
    that generated tables with relationships between them. We analyzed the generated
    database and we configured serialization and deserialization for the models. We
    declared two serializers for a single model to understand the flexibility we have
    with Django and the Django REST framework.
  prefs: []
  type: TYPE_NORMAL
- en: We defined hyperlinks with the help of the `HyperlinkedModelSerializer` class
    and we worked with class-based views. In this case, we took advantage of generic
    classes and generic views that generalize and mix predefined behaviors. We worked
    with routings and endpoints and we prepared our RESTful Web Service to work with
    the browsable API. We made many different HTTP requests to create and retrieve
    resources that have relationships between them. We did everything without writing
    a huge amount of code.
  prefs: []
  type: TYPE_NORMAL
- en: Now that we understand how to work with class-based views, and to take advantage
    of generalized behaviors and materialize complex relationships, we will add constraints,
    filtering, searching, ordering, and pagination features to our RESTful Web Service.
    We will cover these topics in the next chapter.
  prefs: []
  type: TYPE_NORMAL
